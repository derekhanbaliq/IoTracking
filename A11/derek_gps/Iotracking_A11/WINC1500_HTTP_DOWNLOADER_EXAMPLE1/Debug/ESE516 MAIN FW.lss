
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002ab40  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003cb40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005b5c  20000300  0003ce40  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005e5c  0004299c  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0013a828  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000117a0  00000000  00000000  0016aba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017339  00000000  00000000  0017c349  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003e60  00000000  00000000  00193682  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a90  00000000  00000000  001974e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00042734  00000000  00000000  0019af72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000616af  00000000  00000000  001dd6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c4169  00000000  00000000  0023ed55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000f06c  00000000  00000000  00302ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	60 7e 00 20 81 b5 02 00 79 b6 02 00 79 b6 02 00     `~. ....y...y...
	...
   1202c:	f5 a7 01 00 00 00 00 00 00 00 00 00 11 a9 01 00     ................
   1203c:	59 a9 01 00 79 b6 02 00 79 b6 02 00 79 b6 02 00     Y...y...y...y...
   1204c:	d1 76 02 00 fd 6b 02 00 79 b6 02 00 09 2e 01 00     .v...k..y.......
   1205c:	79 b6 02 00 4d 2f 01 00 75 7d 02 00 8d 7d 02 00     y...M/..u}...}..
   1206c:	a5 7d 02 00 bd 7d 02 00 d5 7d 02 00 ed 7d 02 00     .}...}...}...}..
   1207c:	c9 b4 02 00 dd b4 02 00 f1 b4 02 00 e1 84 01 00     ................
   1208c:	f5 84 01 00 09 85 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	91 2c 01 00 79 b6 02 00 cd 2d 01 00 79 b6 02 00     .,..y....-..y...
   120ac:	79 b6 02 00 00 00 00 00                             y.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003cb40 	.word	0x0003cb40

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003cb40 	.word	0x0003cb40
   1210c:	0003cb40 	.word	0x0003cb40
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223d      	movs	r2, #61	; 0x3d
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004778 	.word	0x20004778
   12224:	00014ccd 	.word	0x00014ccd

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223d      	movs	r2, #61	; 0x3d
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004778 	.word	0x20004778
   1227c:	00014ccd 	.word	0x00014ccd

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	2000478c 	.word	0x2000478c
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	20004790 	.word	0x20004790
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	0002685d 	.word	0x0002685d

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	000268b1 	.word	0x000268b1

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	200047a0 	.word	0x200047a0
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	0001848d 	.word	0x0001848d
   13444:	fffbffff 	.word	0xfffbffff
   13448:	0001842f 	.word	0x0001842f
   1344c:	000183d1 	.word	0x000183d1

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	0001848d 	.word	0x0001848d
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005dd0 	.word	0x20005dd0
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b9a      	ldr	r3, [pc, #616]	; (13a8c <vCommandConsoleTask+0x274>)
   13822:	0018      	movs	r0, r3
   13824:	4b9a      	ldr	r3, [pc, #616]	; (13a90 <vCommandConsoleTask+0x278>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4b9a      	ldr	r3, [pc, #616]	; (13a94 <vCommandConsoleTask+0x27c>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b98      	ldr	r3, [pc, #608]	; (13a90 <vCommandConsoleTask+0x278>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4b99      	ldr	r3, [pc, #612]	; (13a98 <vCommandConsoleTask+0x280>)
   13832:	0018      	movs	r0, r3
   13834:	4b96      	ldr	r3, [pc, #600]	; (13a90 <vCommandConsoleTask+0x278>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4b98      	ldr	r3, [pc, #608]	; (13a9c <vCommandConsoleTask+0x284>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b94      	ldr	r3, [pc, #592]	; (13a90 <vCommandConsoleTask+0x278>)
   1383e:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13840:	4b97      	ldr	r3, [pc, #604]	; (13aa0 <vCommandConsoleTask+0x288>)
   13842:	0018      	movs	r0, r3
   13844:	4b92      	ldr	r3, [pc, #584]	; (13a90 <vCommandConsoleTask+0x278>)
   13846:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13848:	4b96      	ldr	r3, [pc, #600]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b90      	ldr	r3, [pc, #576]	; (13a90 <vCommandConsoleTask+0x278>)
   1384e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xGpsGetCommand); //added by Derek
   13850:	4b95      	ldr	r3, [pc, #596]	; (13aa8 <vCommandConsoleTask+0x290>)
   13852:	0018      	movs	r0, r3
   13854:	4b8e      	ldr	r3, [pc, #568]	; (13a90 <vCommandConsoleTask+0x278>)
   13856:	4798      	blx	r3
	
    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13858:	2317      	movs	r3, #23
   1385a:	18fb      	adds	r3, r7, r3
   1385c:	2200      	movs	r2, #0
   1385e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13860:	4b92      	ldr	r3, [pc, #584]	; (13aac <vCommandConsoleTask+0x294>)
   13862:	0018      	movs	r0, r3
   13864:	4b92      	ldr	r3, [pc, #584]	; (13ab0 <vCommandConsoleTask+0x298>)
   13866:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13868:	2203      	movs	r2, #3
   1386a:	2100      	movs	r1, #0
   1386c:	2001      	movs	r0, #1
   1386e:	4b91      	ldr	r3, [pc, #580]	; (13ab4 <vCommandConsoleTask+0x29c>)
   13870:	4798      	blx	r3
   13872:	0002      	movs	r2, r0
   13874:	4b90      	ldr	r3, [pc, #576]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13876:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13878:	4b8f      	ldr	r3, [pc, #572]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1387a:	681b      	ldr	r3, [r3, #0]
   1387c:	2b00      	cmp	r3, #0
   1387e:	d107      	bne.n	13890 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13880:	4b8e      	ldr	r3, [pc, #568]	; (13abc <vCommandConsoleTask+0x2a4>)
   13882:	0019      	movs	r1, r3
   13884:	2003      	movs	r0, #3
   13886:	4b8e      	ldr	r3, [pc, #568]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13888:	4798      	blx	r3
        vTaskSuspend(NULL);
   1388a:	2000      	movs	r0, #0
   1388c:	4b8d      	ldr	r3, [pc, #564]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1388e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13890:	230c      	movs	r3, #12
   13892:	18fb      	adds	r3, r7, r3
   13894:	0018      	movs	r0, r3
   13896:	4b8c      	ldr	r3, [pc, #560]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13898:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   1389a:	230c      	movs	r3, #12
   1389c:	18fb      	adds	r3, r7, r3
   1389e:	781b      	ldrb	r3, [r3, #0]
   138a0:	2b0a      	cmp	r3, #10
   138a2:	d004      	beq.n	138ae <vCommandConsoleTask+0x96>
   138a4:	230c      	movs	r3, #12
   138a6:	18fb      	adds	r3, r7, r3
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	2b0d      	cmp	r3, #13
   138ac:	d137      	bne.n	1391e <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138ae:	4b87      	ldr	r3, [pc, #540]	; (13acc <vCommandConsoleTask+0x2b4>)
   138b0:	0018      	movs	r0, r3
   138b2:	4b7f      	ldr	r3, [pc, #508]	; (13ab0 <vCommandConsoleTask+0x298>)
   138b4:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138b6:	4b86      	ldr	r3, [pc, #536]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   138b8:	2200      	movs	r2, #0
   138ba:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138bc:	4b85      	ldr	r3, [pc, #532]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138be:	2200      	movs	r2, #0
   138c0:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138c2:	4985      	ldr	r1, [pc, #532]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138c4:	4b85      	ldr	r3, [pc, #532]	; (13adc <vCommandConsoleTask+0x2c4>)
   138c6:	2231      	movs	r2, #49	; 0x31
   138c8:	0018      	movs	r0, r3
   138ca:	4b85      	ldr	r3, [pc, #532]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   138cc:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138ce:	4b83      	ldr	r3, [pc, #524]	; (13adc <vCommandConsoleTask+0x2c4>)
   138d0:	2231      	movs	r2, #49	; 0x31
   138d2:	2100      	movs	r1, #0
   138d4:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138d6:	4983      	ldr	r1, [pc, #524]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138d8:	4b7f      	ldr	r3, [pc, #508]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138da:	2264      	movs	r2, #100	; 0x64
   138dc:	0018      	movs	r0, r3
   138de:	4b82      	ldr	r3, [pc, #520]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138e0:	4798      	blx	r3
   138e2:	0003      	movs	r3, r0
   138e4:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138e6:	4b7f      	ldr	r3, [pc, #508]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138e8:	2263      	movs	r2, #99	; 0x63
   138ea:	2100      	movs	r1, #0
   138ec:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138ee:	4b7d      	ldr	r3, [pc, #500]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138f0:	0018      	movs	r0, r3
   138f2:	4b6f      	ldr	r3, [pc, #444]	; (13ab0 <vCommandConsoleTask+0x298>)
   138f4:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138f6:	693b      	ldr	r3, [r7, #16]
   138f8:	2b00      	cmp	r3, #0
   138fa:	d1ec      	bne.n	138d6 <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   138fc:	2317      	movs	r3, #23
   138fe:	18fb      	adds	r3, r7, r3
   13900:	2200      	movs	r2, #0
   13902:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13904:	4b74      	ldr	r3, [pc, #464]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13906:	2232      	movs	r2, #50	; 0x32
   13908:	2100      	movs	r1, #0
   1390a:	0018      	movs	r0, r3
   1390c:	4b77      	ldr	r3, [pc, #476]	; (13aec <vCommandConsoleTask+0x2d4>)
   1390e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13910:	4b74      	ldr	r3, [pc, #464]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13912:	2264      	movs	r2, #100	; 0x64
   13914:	2100      	movs	r1, #0
   13916:	0018      	movs	r0, r3
   13918:	4b74      	ldr	r3, [pc, #464]	; (13aec <vCommandConsoleTask+0x2d4>)
   1391a:	4798      	blx	r3
   1391c:	e0b5      	b.n	13a8a <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   1391e:	4b6c      	ldr	r3, [pc, #432]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	2b00      	cmp	r3, #0
   13924:	d059      	beq.n	139da <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13926:	4b6b      	ldr	r3, [pc, #428]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b03      	cmp	r3, #3
   1392c:	d80c      	bhi.n	13948 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   1392e:	4b69      	ldr	r3, [pc, #420]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	1c5a      	adds	r2, r3, #1
   13934:	b2d1      	uxtb	r1, r2
   13936:	4a67      	ldr	r2, [pc, #412]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13938:	7011      	strb	r1, [r2, #0]
   1393a:	001a      	movs	r2, r3
   1393c:	230c      	movs	r3, #12
   1393e:	18fb      	adds	r3, r7, r3
   13940:	7819      	ldrb	r1, [r3, #0]
   13942:	4b6b      	ldr	r3, [pc, #428]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13944:	5499      	strb	r1, [r3, r2]
   13946:	e005      	b.n	13954 <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   13948:	4b61      	ldr	r3, [pc, #388]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   1394a:	2200      	movs	r2, #0
   1394c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1394e:	4b61      	ldr	r3, [pc, #388]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13950:	2200      	movs	r2, #0
   13952:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13954:	4b5f      	ldr	r3, [pc, #380]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13956:	781b      	ldrb	r3, [r3, #0]
   13958:	2b01      	cmp	r3, #1
   1395a:	d999      	bls.n	13890 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   1395c:	4a65      	ldr	r2, [pc, #404]	; (13af4 <vCommandConsoleTask+0x2dc>)
   1395e:	4b64      	ldr	r3, [pc, #400]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13960:	0011      	movs	r1, r2
   13962:	0018      	movs	r0, r3
   13964:	4b64      	ldr	r3, [pc, #400]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13966:	4798      	blx	r3
   13968:	1e03      	subs	r3, r0, #0
   1396a:	d02f      	beq.n	139cc <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   1396c:	4963      	ldr	r1, [pc, #396]	; (13afc <vCommandConsoleTask+0x2e4>)
   1396e:	4b5a      	ldr	r3, [pc, #360]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13970:	221b      	movs	r2, #27
   13972:	0018      	movs	r0, r3
   13974:	4b62      	ldr	r3, [pc, #392]	; (13b00 <vCommandConsoleTask+0x2e8>)
   13976:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13978:	4b57      	ldr	r3, [pc, #348]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   1397a:	0018      	movs	r0, r3
   1397c:	4b4c      	ldr	r3, [pc, #304]	; (13ab0 <vCommandConsoleTask+0x298>)
   1397e:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13980:	2317      	movs	r3, #23
   13982:	18fb      	adds	r3, r7, r3
   13984:	2200      	movs	r2, #0
   13986:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13988:	4b53      	ldr	r3, [pc, #332]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   1398a:	2232      	movs	r2, #50	; 0x32
   1398c:	2100      	movs	r1, #0
   1398e:	0018      	movs	r0, r3
   13990:	4b56      	ldr	r3, [pc, #344]	; (13aec <vCommandConsoleTask+0x2d4>)
   13992:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   13994:	4951      	ldr	r1, [pc, #324]	; (13adc <vCommandConsoleTask+0x2c4>)
   13996:	4b50      	ldr	r3, [pc, #320]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13998:	2231      	movs	r2, #49	; 0x31
   1399a:	0018      	movs	r0, r3
   1399c:	4b50      	ldr	r3, [pc, #320]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1399e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139a0:	4b4d      	ldr	r3, [pc, #308]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   139a2:	0018      	movs	r0, r3
   139a4:	4b57      	ldr	r3, [pc, #348]	; (13b04 <vCommandConsoleTask+0x2ec>)
   139a6:	4798      	blx	r3
   139a8:	0003      	movs	r3, r0
   139aa:	2b30      	cmp	r3, #48	; 0x30
   139ac:	d806      	bhi.n	139bc <vCommandConsoleTask+0x1a4>
   139ae:	4b4b      	ldr	r3, [pc, #300]	; (13adc <vCommandConsoleTask+0x2c4>)
   139b0:	0018      	movs	r0, r3
   139b2:	4b54      	ldr	r3, [pc, #336]	; (13b04 <vCommandConsoleTask+0x2ec>)
   139b4:	4798      	blx	r3
   139b6:	0003      	movs	r3, r0
   139b8:	b2da      	uxtb	r2, r3
   139ba:	e000      	b.n	139be <vCommandConsoleTask+0x1a6>
   139bc:	2231      	movs	r2, #49	; 0x31
   139be:	2317      	movs	r3, #23
   139c0:	18fb      	adds	r3, r7, r3
   139c2:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139c4:	4b44      	ldr	r3, [pc, #272]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   139c6:	0018      	movs	r0, r3
   139c8:	4b39      	ldr	r3, [pc, #228]	; (13ab0 <vCommandConsoleTask+0x298>)
   139ca:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139cc:	4b40      	ldr	r3, [pc, #256]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   139ce:	2200      	movs	r2, #0
   139d0:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139d2:	4b40      	ldr	r3, [pc, #256]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   139d4:	2200      	movs	r2, #0
   139d6:	701a      	strb	r2, [r3, #0]
   139d8:	e75a      	b.n	13890 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139da:	230c      	movs	r3, #12
   139dc:	18fb      	adds	r3, r7, r3
   139de:	781b      	ldrb	r3, [r3, #0]
   139e0:	2b0d      	cmp	r3, #13
   139e2:	d100      	bne.n	139e6 <vCommandConsoleTask+0x1ce>
   139e4:	e754      	b.n	13890 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139e6:	230c      	movs	r3, #12
   139e8:	18fb      	adds	r3, r7, r3
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	2b08      	cmp	r3, #8
   139ee:	d004      	beq.n	139fa <vCommandConsoleTask+0x1e2>
   139f0:	230c      	movs	r3, #12
   139f2:	18fb      	adds	r3, r7, r3
   139f4:	781b      	ldrb	r3, [r3, #0]
   139f6:	2b7f      	cmp	r3, #127	; 0x7f
   139f8:	d11c      	bne.n	13a34 <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   139fa:	2308      	movs	r3, #8
   139fc:	18fb      	adds	r3, r7, r3
   139fe:	4a42      	ldr	r2, [pc, #264]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13a00:	6812      	ldr	r2, [r2, #0]
   13a02:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a04:	2308      	movs	r3, #8
   13a06:	18fb      	adds	r3, r7, r3
   13a08:	0018      	movs	r0, r3
   13a0a:	4b29      	ldr	r3, [pc, #164]	; (13ab0 <vCommandConsoleTask+0x298>)
   13a0c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a0e:	2317      	movs	r3, #23
   13a10:	18fb      	adds	r3, r7, r3
   13a12:	781b      	ldrb	r3, [r3, #0]
   13a14:	2b00      	cmp	r3, #0
   13a16:	d037      	beq.n	13a88 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   13a18:	2317      	movs	r3, #23
   13a1a:	18fb      	adds	r3, r7, r3
   13a1c:	781a      	ldrb	r2, [r3, #0]
   13a1e:	2317      	movs	r3, #23
   13a20:	18fb      	adds	r3, r7, r3
   13a22:	3a01      	subs	r2, #1
   13a24:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	4a2a      	ldr	r2, [pc, #168]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13a2e:	2100      	movs	r1, #0
   13a30:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a32:	e029      	b.n	13a88 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a34:	230c      	movs	r3, #12
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	781b      	ldrb	r3, [r3, #0]
   13a3a:	2b1b      	cmp	r3, #27
   13a3c:	d106      	bne.n	13a4c <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   13a3e:	4b24      	ldr	r3, [pc, #144]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13a40:	2201      	movs	r2, #1
   13a42:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a44:	4b23      	ldr	r3, [pc, #140]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13a46:	2200      	movs	r2, #0
   13a48:	701a      	strb	r2, [r3, #0]
   13a4a:	e721      	b.n	13890 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a4c:	2317      	movs	r3, #23
   13a4e:	18fb      	adds	r3, r7, r3
   13a50:	781b      	ldrb	r3, [r3, #0]
   13a52:	2b31      	cmp	r3, #49	; 0x31
   13a54:	d80e      	bhi.n	13a74 <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a56:	2317      	movs	r3, #23
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	781b      	ldrb	r3, [r3, #0]
   13a5c:	220c      	movs	r2, #12
   13a5e:	18ba      	adds	r2, r7, r2
   13a60:	7811      	ldrb	r1, [r2, #0]
   13a62:	4a1d      	ldr	r2, [pc, #116]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13a64:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a66:	2317      	movs	r3, #23
   13a68:	18fb      	adds	r3, r7, r3
   13a6a:	781a      	ldrb	r2, [r3, #0]
   13a6c:	2317      	movs	r3, #23
   13a6e:	18fb      	adds	r3, r7, r3
   13a70:	3201      	adds	r2, #1
   13a72:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a74:	230c      	movs	r3, #12
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	2200      	movs	r2, #0
   13a7a:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a7c:	230c      	movs	r3, #12
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	0018      	movs	r0, r3
   13a82:	4b0b      	ldr	r3, [pc, #44]	; (13ab0 <vCommandConsoleTask+0x298>)
   13a84:	4798      	blx	r3
   13a86:	e703      	b.n	13890 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a88:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a8a:	e701      	b.n	13890 <vCommandConsoleTask+0x78>
   13a8c:	00038894 	.word	0x00038894
   13a90:	000185d5 	.word	0x000185d5
   13a94:	00038884 	.word	0x00038884
   13a98:	000388e4 	.word	0x000388e4
   13a9c:	000388a4 	.word	0x000388a4
   13aa0:	000388b4 	.word	0x000388b4
   13aa4:	000388c4 	.word	0x000388c4
   13aa8:	000388d4 	.word	0x000388d4
   13aac:	00038544 	.word	0x00038544
   13ab0:	0001e4f5 	.word	0x0001e4f5
   13ab4:	0001ab95 	.word	0x0001ab95
   13ab8:	200047f0 	.word	0x200047f0
   13abc:	000386f0 	.word	0x000386f0
   13ac0:	0001e5e1 	.word	0x0001e5e1
   13ac4:	0001c981 	.word	0x0001c981
   13ac8:	00013b0d 	.word	0x00013b0d
   13acc:	00038710 	.word	0x00038710
   13ad0:	20000514 	.word	0x20000514
   13ad4:	20000515 	.word	0x20000515
   13ad8:	2000054c 	.word	0x2000054c
   13adc:	20000518 	.word	0x20000518
   13ae0:	0003575f 	.word	0x0003575f
   13ae4:	20000580 	.word	0x20000580
   13ae8:	00018645 	.word	0x00018645
   13aec:	00035377 	.word	0x00035377
   13af0:	200005e4 	.word	0x200005e4
   13af4:	00038714 	.word	0x00038714
   13af8:	00035679 	.word	0x00035679
   13afc:	00038718 	.word	0x00038718
   13b00:	00035635 	.word	0x00035635
   13b04:	0003572f 	.word	0x0003572f
   13b08:	00038720 	.word	0x00038720

00013b0c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b0c:	b580      	push	{r7, lr}
   13b0e:	b084      	sub	sp, #16
   13b10:	af00      	add	r7, sp, #0
   13b12:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b14:	687b      	ldr	r3, [r7, #4]
   13b16:	0018      	movs	r0, r3
   13b18:	4b0c      	ldr	r3, [pc, #48]	; (13b4c <FreeRTOS_read+0x40>)
   13b1a:	4798      	blx	r3
   13b1c:	0003      	movs	r3, r0
   13b1e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b20:	e00d      	b.n	13b3e <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b22:	4b0b      	ldr	r3, [pc, #44]	; (13b50 <FreeRTOS_read+0x44>)
   13b24:	681a      	ldr	r2, [r3, #0]
   13b26:	2301      	movs	r3, #1
   13b28:	425b      	negs	r3, r3
   13b2a:	0019      	movs	r1, r3
   13b2c:	0010      	movs	r0, r2
   13b2e:	4b09      	ldr	r3, [pc, #36]	; (13b54 <FreeRTOS_read+0x48>)
   13b30:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b32:	687b      	ldr	r3, [r7, #4]
   13b34:	0018      	movs	r0, r3
   13b36:	4b05      	ldr	r3, [pc, #20]	; (13b4c <FreeRTOS_read+0x40>)
   13b38:	4798      	blx	r3
   13b3a:	0003      	movs	r3, r0
   13b3c:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b3e:	68fb      	ldr	r3, [r7, #12]
   13b40:	3301      	adds	r3, #1
   13b42:	d0ee      	beq.n	13b22 <FreeRTOS_read+0x16>
    }
}
   13b44:	46c0      	nop			; (mov r8, r8)
   13b46:	46bd      	mov	sp, r7
   13b48:	b004      	add	sp, #16
   13b4a:	bd80      	pop	{r7, pc}
   13b4c:	0001e591 	.word	0x0001e591
   13b50:	200047f0 	.word	0x200047f0
   13b54:	0001bb4d 	.word	0x0001bb4d

00013b58 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b58:	b580      	push	{r7, lr}
   13b5a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b5c:	4b0a      	ldr	r3, [pc, #40]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b5e:	2200      	movs	r2, #0
   13b60:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b62:	4b0a      	ldr	r3, [pc, #40]	; (13b8c <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b64:	681b      	ldr	r3, [r3, #0]
   13b66:	4a08      	ldr	r2, [pc, #32]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b68:	0011      	movs	r1, r2
   13b6a:	0018      	movs	r0, r3
   13b6c:	4b08      	ldr	r3, [pc, #32]	; (13b90 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b6e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b70:	4b05      	ldr	r3, [pc, #20]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b72:	681b      	ldr	r3, [r3, #0]
   13b74:	2b00      	cmp	r3, #0
   13b76:	d003      	beq.n	13b80 <CliCharReadySemaphoreGiveFromISR+0x28>
   13b78:	4b06      	ldr	r3, [pc, #24]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b7a:	2280      	movs	r2, #128	; 0x80
   13b7c:	0552      	lsls	r2, r2, #21
   13b7e:	601a      	str	r2, [r3, #0]
}
   13b80:	46c0      	nop			; (mov r8, r8)
   13b82:	46bd      	mov	sp, r7
   13b84:	bd80      	pop	{r7, pc}
   13b86:	46c0      	nop			; (mov r8, r8)
   13b88:	200005e8 	.word	0x200005e8
   13b8c:	200047f0 	.word	0x200047f0
   13b90:	0001b4c5 	.word	0x0001b4c5
   13b94:	e000ed04 	.word	0xe000ed04

00013b98 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b98:	b5b0      	push	{r4, r5, r7, lr}
   13b9a:	b08a      	sub	sp, #40	; 0x28
   13b9c:	af02      	add	r7, sp, #8
   13b9e:	60f8      	str	r0, [r7, #12]
   13ba0:	60b9      	str	r1, [r7, #8]
   13ba2:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13ba4:	4b49      	ldr	r3, [pc, #292]	; (13ccc <CLI_GetImuData+0x134>)
   13ba6:	4798      	blx	r3
   13ba8:	0003      	movs	r3, r0
   13baa:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13bac:	231b      	movs	r3, #27
   13bae:	18fa      	adds	r2, r7, r3
   13bb0:	69fb      	ldr	r3, [r7, #28]
   13bb2:	0011      	movs	r1, r2
   13bb4:	0018      	movs	r0, r3
   13bb6:	4b46      	ldr	r3, [pc, #280]	; (13cd0 <CLI_GetImuData+0x138>)
   13bb8:	4798      	blx	r3

    if (reg) {
   13bba:	231b      	movs	r3, #27
   13bbc:	18fb      	adds	r3, r7, r3
   13bbe:	781b      	ldrb	r3, [r3, #0]
   13bc0:	2b00      	cmp	r3, #0
   13bc2:	d064      	beq.n	13c8e <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13bc4:	4b43      	ldr	r3, [pc, #268]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bc6:	2206      	movs	r2, #6
   13bc8:	2100      	movs	r1, #0
   13bca:	0018      	movs	r0, r3
   13bcc:	4b42      	ldr	r3, [pc, #264]	; (13cd8 <CLI_GetImuData+0x140>)
   13bce:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13bd0:	4a40      	ldr	r2, [pc, #256]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bd2:	69fb      	ldr	r3, [r7, #28]
   13bd4:	0011      	movs	r1, r2
   13bd6:	0018      	movs	r0, r3
   13bd8:	4b40      	ldr	r3, [pc, #256]	; (13cdc <CLI_GetImuData+0x144>)
   13bda:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13bdc:	4b3d      	ldr	r3, [pc, #244]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bde:	2200      	movs	r2, #0
   13be0:	5e9b      	ldrsh	r3, [r3, r2]
   13be2:	0018      	movs	r0, r3
   13be4:	4b3e      	ldr	r3, [pc, #248]	; (13ce0 <CLI_GetImuData+0x148>)
   13be6:	4798      	blx	r3
   13be8:	1c02      	adds	r2, r0, #0
   13bea:	4b3e      	ldr	r3, [pc, #248]	; (13ce4 <CLI_GetImuData+0x14c>)
   13bec:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13bee:	4b39      	ldr	r3, [pc, #228]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bf0:	2202      	movs	r2, #2
   13bf2:	5e9b      	ldrsh	r3, [r3, r2]
   13bf4:	0018      	movs	r0, r3
   13bf6:	4b3a      	ldr	r3, [pc, #232]	; (13ce0 <CLI_GetImuData+0x148>)
   13bf8:	4798      	blx	r3
   13bfa:	1c02      	adds	r2, r0, #0
   13bfc:	4b39      	ldr	r3, [pc, #228]	; (13ce4 <CLI_GetImuData+0x14c>)
   13bfe:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c00:	4b34      	ldr	r3, [pc, #208]	; (13cd4 <CLI_GetImuData+0x13c>)
   13c02:	2204      	movs	r2, #4
   13c04:	5e9b      	ldrsh	r3, [r3, r2]
   13c06:	0018      	movs	r0, r3
   13c08:	4b35      	ldr	r3, [pc, #212]	; (13ce0 <CLI_GetImuData+0x148>)
   13c0a:	4798      	blx	r3
   13c0c:	1c02      	adds	r2, r0, #0
   13c0e:	4b35      	ldr	r3, [pc, #212]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c10:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c12:	4b34      	ldr	r3, [pc, #208]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c14:	681a      	ldr	r2, [r3, #0]
   13c16:	4b34      	ldr	r3, [pc, #208]	; (13ce8 <CLI_GetImuData+0x150>)
   13c18:	1c10      	adds	r0, r2, #0
   13c1a:	4798      	blx	r3
   13c1c:	0005      	movs	r5, r0
   13c1e:	4b31      	ldr	r3, [pc, #196]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c20:	685a      	ldr	r2, [r3, #4]
   13c22:	4b31      	ldr	r3, [pc, #196]	; (13ce8 <CLI_GetImuData+0x150>)
   13c24:	1c10      	adds	r0, r2, #0
   13c26:	4798      	blx	r3
   13c28:	0004      	movs	r4, r0
   13c2a:	4b2e      	ldr	r3, [pc, #184]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c2c:	689a      	ldr	r2, [r3, #8]
   13c2e:	4b2e      	ldr	r3, [pc, #184]	; (13ce8 <CLI_GetImuData+0x150>)
   13c30:	1c10      	adds	r0, r2, #0
   13c32:	4798      	blx	r3
   13c34:	0003      	movs	r3, r0
   13c36:	4a2d      	ldr	r2, [pc, #180]	; (13cec <CLI_GetImuData+0x154>)
   13c38:	68b9      	ldr	r1, [r7, #8]
   13c3a:	68f8      	ldr	r0, [r7, #12]
   13c3c:	9301      	str	r3, [sp, #4]
   13c3e:	9400      	str	r4, [sp, #0]
   13c40:	002b      	movs	r3, r5
   13c42:	4c2b      	ldr	r4, [pc, #172]	; (13cf0 <CLI_GetImuData+0x158>)
   13c44:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   13c46:	4b27      	ldr	r3, [pc, #156]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c48:	681a      	ldr	r2, [r3, #0]
   13c4a:	4b27      	ldr	r3, [pc, #156]	; (13ce8 <CLI_GetImuData+0x150>)
   13c4c:	1c10      	adds	r0, r2, #0
   13c4e:	4798      	blx	r3
   13c50:	0003      	movs	r3, r0
   13c52:	b21a      	sxth	r2, r3
   13c54:	2314      	movs	r3, #20
   13c56:	18fb      	adds	r3, r7, r3
   13c58:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   13c5a:	4b22      	ldr	r3, [pc, #136]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c5c:	685a      	ldr	r2, [r3, #4]
   13c5e:	4b22      	ldr	r3, [pc, #136]	; (13ce8 <CLI_GetImuData+0x150>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	0003      	movs	r3, r0
   13c66:	b21a      	sxth	r2, r3
   13c68:	2314      	movs	r3, #20
   13c6a:	18fb      	adds	r3, r7, r3
   13c6c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   13c6e:	4b1d      	ldr	r3, [pc, #116]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c70:	689a      	ldr	r2, [r3, #8]
   13c72:	4b1d      	ldr	r3, [pc, #116]	; (13ce8 <CLI_GetImuData+0x150>)
   13c74:	1c10      	adds	r0, r2, #0
   13c76:	4798      	blx	r3
   13c78:	0003      	movs	r3, r0
   13c7a:	b21a      	sxth	r2, r3
   13c7c:	2314      	movs	r3, #20
   13c7e:	18fb      	adds	r3, r7, r3
   13c80:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13c82:	2314      	movs	r3, #20
   13c84:	18fb      	adds	r3, r7, r3
   13c86:	0018      	movs	r0, r3
   13c88:	4b1a      	ldr	r3, [pc, #104]	; (13cf4 <CLI_GetImuData+0x15c>)
   13c8a:	4798      	blx	r3
   13c8c:	e019      	b.n	13cc2 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   13c8e:	4a1a      	ldr	r2, [pc, #104]	; (13cf8 <CLI_GetImuData+0x160>)
   13c90:	68b9      	ldr	r1, [r7, #8]
   13c92:	68fb      	ldr	r3, [r7, #12]
   13c94:	0018      	movs	r0, r3
   13c96:	4b16      	ldr	r3, [pc, #88]	; (13cf0 <CLI_GetImuData+0x158>)
   13c98:	4798      	blx	r3
		imuPacket.xmg = -1;
   13c9a:	2314      	movs	r3, #20
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	2201      	movs	r2, #1
   13ca0:	4252      	negs	r2, r2
   13ca2:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   13ca4:	2314      	movs	r3, #20
   13ca6:	18fb      	adds	r3, r7, r3
   13ca8:	2202      	movs	r2, #2
   13caa:	4252      	negs	r2, r2
   13cac:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   13cae:	2314      	movs	r3, #20
   13cb0:	18fb      	adds	r3, r7, r3
   13cb2:	2203      	movs	r2, #3
   13cb4:	4252      	negs	r2, r2
   13cb6:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13cb8:	2314      	movs	r3, #20
   13cba:	18fb      	adds	r3, r7, r3
   13cbc:	0018      	movs	r0, r3
   13cbe:	4b0d      	ldr	r3, [pc, #52]	; (13cf4 <CLI_GetImuData+0x15c>)
   13cc0:	4798      	blx	r3
    }
    return pdFALSE;
   13cc2:	2300      	movs	r3, #0
}
   13cc4:	0018      	movs	r0, r3
   13cc6:	46bd      	mov	sp, r7
   13cc8:	b008      	add	sp, #32
   13cca:	bdb0      	pop	{r4, r5, r7, pc}
   13ccc:	00015cc9 	.word	0x00015cc9
   13cd0:	000156b5 	.word	0x000156b5
   13cd4:	200005ec 	.word	0x200005ec
   13cd8:	00035377 	.word	0x00035377
   13cdc:	000156f1 	.word	0x000156f1
   13ce0:	00014f45 	.word	0x00014f45
   13ce4:	200005f4 	.word	0x200005f4
   13ce8:	000335f1 	.word	0x000335f1
   13cec:	00038724 	.word	0x00038724
   13cf0:	000355d1 	.word	0x000355d1
   13cf4:	00017c19 	.word	0x00017c19
   13cf8:	00038748 	.word	0x00038748

00013cfc <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cfc:	b590      	push	{r4, r7, lr}
   13cfe:	b087      	sub	sp, #28
   13d00:	af00      	add	r7, sp, #0
   13d02:	60f8      	str	r0, [r7, #12]
   13d04:	60b9      	str	r1, [r7, #8]
   13d06:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13d08:	2317      	movs	r3, #23
   13d0a:	18fb      	adds	r3, r7, r3
   13d0c:	221b      	movs	r2, #27
   13d0e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13d10:	2317      	movs	r3, #23
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	4a08      	ldr	r2, [pc, #32]	; (13d38 <xCliClearTerminalScreen+0x3c>)
   13d18:	4808      	ldr	r0, [pc, #32]	; (13d3c <xCliClearTerminalScreen+0x40>)
   13d1a:	210f      	movs	r1, #15
   13d1c:	4c08      	ldr	r4, [pc, #32]	; (13d40 <xCliClearTerminalScreen+0x44>)
   13d1e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13d20:	4a06      	ldr	r2, [pc, #24]	; (13d3c <xCliClearTerminalScreen+0x40>)
   13d22:	68b9      	ldr	r1, [r7, #8]
   13d24:	68fb      	ldr	r3, [r7, #12]
   13d26:	0018      	movs	r0, r3
   13d28:	4b05      	ldr	r3, [pc, #20]	; (13d40 <xCliClearTerminalScreen+0x44>)
   13d2a:	4798      	blx	r3
    return pdFALSE;
   13d2c:	2300      	movs	r3, #0
}
   13d2e:	0018      	movs	r0, r3
   13d30:	46bd      	mov	sp, r7
   13d32:	b007      	add	sp, #28
   13d34:	bd90      	pop	{r4, r7, pc}
   13d36:	46c0      	nop			; (mov r8, r8)
   13d38:	00038770 	.word	0x00038770
   13d3c:	20000504 	.word	0x20000504
   13d40:	000355d1 	.word	0x000355d1

00013d44 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d44:	b580      	push	{r7, lr}
   13d46:	b084      	sub	sp, #16
   13d48:	af00      	add	r7, sp, #0
   13d4a:	60f8      	str	r0, [r7, #12]
   13d4c:	60b9      	str	r1, [r7, #8]
   13d4e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d50:	2002      	movs	r0, #2
   13d52:	4b03      	ldr	r3, [pc, #12]	; (13d60 <CLI_OTAU+0x1c>)
   13d54:	4798      	blx	r3

    return pdFALSE;
   13d56:	2300      	movs	r3, #0
}
   13d58:	0018      	movs	r0, r3
   13d5a:	46bd      	mov	sp, r7
   13d5c:	b004      	add	sp, #16
   13d5e:	bd80      	pop	{r7, pc}
   13d60:	00017be5 	.word	0x00017be5

00013d64 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d64:	b580      	push	{r7, lr}
   13d66:	b084      	sub	sp, #16
   13d68:	af00      	add	r7, sp, #0
   13d6a:	60f8      	str	r0, [r7, #12]
   13d6c:	60b9      	str	r1, [r7, #8]
   13d6e:	607a      	str	r2, [r7, #4]
    system_reset();
   13d70:	4b03      	ldr	r3, [pc, #12]	; (13d80 <CLI_ResetDevice+0x1c>)
   13d72:	4798      	blx	r3
    return pdFALSE;
   13d74:	2300      	movs	r3, #0
}
   13d76:	0018      	movs	r0, r3
   13d78:	46bd      	mov	sp, r7
   13d7a:	b004      	add	sp, #16
   13d7c:	bd80      	pop	{r7, pc}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	00013805 	.word	0x00013805

00013d84 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d84:	b590      	push	{r4, r7, lr}
   13d86:	b087      	sub	sp, #28
   13d88:	af00      	add	r7, sp, #0
   13d8a:	60f8      	str	r0, [r7, #12]
   13d8c:	60b9      	str	r1, [r7, #8]
   13d8e:	607a      	str	r2, [r7, #4]
    char distance = 0;
   13d90:	2313      	movs	r3, #19
   13d92:	18fb      	adds	r3, r7, r3
   13d94:	2200      	movs	r2, #0
   13d96:	701a      	strb	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 1000);
   13d98:	23fa      	movs	r3, #250	; 0xfa
   13d9a:	009a      	lsls	r2, r3, #2
   13d9c:	2313      	movs	r3, #19
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	0011      	movs	r1, r2
   13da2:	0018      	movs	r0, r3
   13da4:	4b18      	ldr	r3, [pc, #96]	; (13e08 <CLI_DistanceSensorGetDistance+0x84>)
   13da6:	4798      	blx	r3
   13da8:	0003      	movs	r3, r0
   13daa:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13dac:	697b      	ldr	r3, [r7, #20]
   13dae:	2b00      	cmp	r3, #0
   13db0:	d006      	beq.n	13dc0 <CLI_DistanceSensorGetDistance+0x3c>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13db2:	697b      	ldr	r3, [r7, #20]
   13db4:	4a15      	ldr	r2, [pc, #84]	; (13e0c <CLI_DistanceSensorGetDistance+0x88>)
   13db6:	68b9      	ldr	r1, [r7, #8]
   13db8:	68f8      	ldr	r0, [r7, #12]
   13dba:	4c15      	ldr	r4, [pc, #84]	; (13e10 <CLI_DistanceSensorGetDistance+0x8c>)
   13dbc:	47a0      	blx	r4
   13dbe:	e005      	b.n	13dcc <CLI_DistanceSensorGetDistance+0x48>
    } else {
        //snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "\r\nGPS outputted \r\n");
   13dc0:	4a14      	ldr	r2, [pc, #80]	; (13e14 <CLI_DistanceSensorGetDistance+0x90>)
   13dc2:	68b9      	ldr	r1, [r7, #8]
   13dc4:	68fb      	ldr	r3, [r7, #12]
   13dc6:	0018      	movs	r0, r3
   13dc8:	4b11      	ldr	r3, [pc, #68]	; (13e10 <CLI_DistanceSensorGetDistance+0x8c>)
   13dca:	4798      	blx	r3
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13dcc:	2313      	movs	r3, #19
   13dce:	18fb      	adds	r3, r7, r3
   13dd0:	0018      	movs	r0, r3
   13dd2:	4b11      	ldr	r3, [pc, #68]	; (13e18 <CLI_DistanceSensorGetDistance+0x94>)
   13dd4:	4798      	blx	r3
   13dd6:	0003      	movs	r3, r0
   13dd8:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13dda:	697b      	ldr	r3, [r7, #20]
   13ddc:	2b01      	cmp	r3, #1
   13dde:	d10e      	bne.n	13dfe <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13de0:	68fb      	ldr	r3, [r7, #12]
   13de2:	0018      	movs	r0, r3
   13de4:	4b0d      	ldr	r3, [pc, #52]	; (13e1c <CLI_DistanceSensorGetDistance+0x98>)
   13de6:	4798      	blx	r3
   13de8:	0003      	movs	r3, r0
   13dea:	001a      	movs	r2, r3
   13dec:	68fb      	ldr	r3, [r7, #12]
   13dee:	189a      	adds	r2, r3, r2
   13df0:	4b0b      	ldr	r3, [pc, #44]	; (13e20 <CLI_DistanceSensorGetDistance+0x9c>)
   13df2:	0010      	movs	r0, r2
   13df4:	0019      	movs	r1, r3
   13df6:	231a      	movs	r3, #26
   13df8:	001a      	movs	r2, r3
   13dfa:	4b0a      	ldr	r3, [pc, #40]	; (13e24 <CLI_DistanceSensorGetDistance+0xa0>)
   13dfc:	4798      	blx	r3
    }
    return pdFALSE;
   13dfe:	2300      	movs	r3, #0
}
   13e00:	0018      	movs	r0, r3
   13e02:	46bd      	mov	sp, r7
   13e04:	b007      	add	sp, #28
   13e06:	bd90      	pop	{r4, r7, pc}
   13e08:	000143d9 	.word	0x000143d9
   13e0c:	000387c4 	.word	0x000387c4
   13e10:	000355d1 	.word	0x000355d1
   13e14:	000387d8 	.word	0x000387d8
   13e18:	00017c45 	.word	0x00017c45
   13e1c:	0003572f 	.word	0x0003572f
   13e20:	000387ec 	.word	0x000387ec
   13e24:	00035341 	.word	0x00035341

00013e28 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e28:	b590      	push	{r4, r7, lr}
   13e2a:	b08f      	sub	sp, #60	; 0x3c
   13e2c:	af00      	add	r7, sp, #0
   13e2e:	60f8      	str	r0, [r7, #12]
   13e30:	60b9      	str	r1, [r7, #8]
   13e32:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13e34:	2318      	movs	r3, #24
   13e36:	18fb      	adds	r3, r7, r3
   13e38:	2200      	movs	r2, #0
   13e3a:	701a      	strb	r2, [r3, #0]
   13e3c:	2318      	movs	r3, #24
   13e3e:	18fb      	adds	r3, r7, r3
   13e40:	2200      	movs	r2, #0
   13e42:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13e44:	2318      	movs	r3, #24
   13e46:	18fb      	adds	r3, r7, r3
   13e48:	2200      	movs	r2, #0
   13e4a:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13e4c:	2318      	movs	r3, #24
   13e4e:	18fb      	adds	r3, r7, r3
   13e50:	2200      	movs	r2, #0
   13e52:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13e54:	231c      	movs	r3, #28
   13e56:	18fb      	adds	r3, r7, r3
   13e58:	2200      	movs	r2, #0
   13e5a:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13e5c:	231c      	movs	r3, #28
   13e5e:	18fb      	adds	r3, r7, r3
   13e60:	2214      	movs	r2, #20
   13e62:	18ba      	adds	r2, r7, r2
   13e64:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13e66:	231c      	movs	r3, #28
   13e68:	18fb      	adds	r3, r7, r3
   13e6a:	2201      	movs	r2, #1
   13e6c:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13e6e:	231c      	movs	r3, #28
   13e70:	18fb      	adds	r3, r7, r3
   13e72:	2218      	movs	r2, #24
   13e74:	18ba      	adds	r2, r7, r2
   13e76:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13e78:	231c      	movs	r3, #28
   13e7a:	18fb      	adds	r3, r7, r3
   13e7c:	2201      	movs	r2, #1
   13e7e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13e80:	4b2a      	ldr	r3, [pc, #168]	; (13f2c <CLI_i2cScan+0x104>)
   13e82:	0018      	movs	r0, r3
   13e84:	4b2a      	ldr	r3, [pc, #168]	; (13f30 <CLI_i2cScan+0x108>)
   13e86:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e88:	2300      	movs	r3, #0
   13e8a:	637b      	str	r3, [r7, #52]	; 0x34
   13e8c:	e042      	b.n	13f14 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e90:	4a28      	ldr	r2, [pc, #160]	; (13f34 <CLI_i2cScan+0x10c>)
   13e92:	4829      	ldr	r0, [pc, #164]	; (13f38 <CLI_i2cScan+0x110>)
   13e94:	210f      	movs	r1, #15
   13e96:	4c29      	ldr	r4, [pc, #164]	; (13f3c <CLI_i2cScan+0x114>)
   13e98:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13e9a:	4b27      	ldr	r3, [pc, #156]	; (13f38 <CLI_i2cScan+0x110>)
   13e9c:	0018      	movs	r0, r3
   13e9e:	4b24      	ldr	r3, [pc, #144]	; (13f30 <CLI_i2cScan+0x108>)
   13ea0:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13ea2:	2300      	movs	r3, #0
   13ea4:	633b      	str	r3, [r7, #48]	; 0x30
   13ea6:	e02b      	b.n	13f00 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13eaa:	b2da      	uxtb	r2, r3
   13eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eae:	b2db      	uxtb	r3, r3
   13eb0:	18d3      	adds	r3, r2, r3
   13eb2:	b2da      	uxtb	r2, r3
   13eb4:	231c      	movs	r3, #28
   13eb6:	18fb      	adds	r3, r7, r3
   13eb8:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   13eba:	231c      	movs	r3, #28
   13ebc:	18fb      	adds	r3, r7, r3
   13ebe:	2264      	movs	r2, #100	; 0x64
   13ec0:	2164      	movs	r1, #100	; 0x64
   13ec2:	0018      	movs	r0, r3
   13ec4:	4b1e      	ldr	r3, [pc, #120]	; (13f40 <CLI_i2cScan+0x118>)
   13ec6:	4798      	blx	r3
   13ec8:	0003      	movs	r3, r0
   13eca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13ece:	2b00      	cmp	r3, #0
   13ed0:	d10c      	bne.n	13eec <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   13ed2:	231c      	movs	r3, #28
   13ed4:	18fb      	adds	r3, r7, r3
   13ed6:	781b      	ldrb	r3, [r3, #0]
   13ed8:	4a1a      	ldr	r2, [pc, #104]	; (13f44 <CLI_i2cScan+0x11c>)
   13eda:	4817      	ldr	r0, [pc, #92]	; (13f38 <CLI_i2cScan+0x110>)
   13edc:	210f      	movs	r1, #15
   13ede:	4c17      	ldr	r4, [pc, #92]	; (13f3c <CLI_i2cScan+0x114>)
   13ee0:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13ee2:	4b15      	ldr	r3, [pc, #84]	; (13f38 <CLI_i2cScan+0x110>)
   13ee4:	0018      	movs	r0, r3
   13ee6:	4b12      	ldr	r3, [pc, #72]	; (13f30 <CLI_i2cScan+0x108>)
   13ee8:	4798      	blx	r3
   13eea:	e006      	b.n	13efa <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13eec:	4b12      	ldr	r3, [pc, #72]	; (13f38 <CLI_i2cScan+0x110>)
   13eee:	4a16      	ldr	r2, [pc, #88]	; (13f48 <CLI_i2cScan+0x120>)
   13ef0:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   13ef2:	4b11      	ldr	r3, [pc, #68]	; (13f38 <CLI_i2cScan+0x110>)
   13ef4:	0018      	movs	r0, r3
   13ef6:	4b0e      	ldr	r3, [pc, #56]	; (13f30 <CLI_i2cScan+0x108>)
   13ef8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13efc:	3301      	adds	r3, #1
   13efe:	633b      	str	r3, [r7, #48]	; 0x30
   13f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13f02:	2b0f      	cmp	r3, #15
   13f04:	ddd0      	ble.n	13ea8 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13f06:	4b11      	ldr	r3, [pc, #68]	; (13f4c <CLI_i2cScan+0x124>)
   13f08:	0018      	movs	r0, r3
   13f0a:	4b09      	ldr	r3, [pc, #36]	; (13f30 <CLI_i2cScan+0x108>)
   13f0c:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13f10:	3310      	adds	r3, #16
   13f12:	637b      	str	r3, [r7, #52]	; 0x34
   13f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13f16:	2b7f      	cmp	r3, #127	; 0x7f
   13f18:	ddb9      	ble.n	13e8e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13f1a:	4b0c      	ldr	r3, [pc, #48]	; (13f4c <CLI_i2cScan+0x124>)
   13f1c:	0018      	movs	r0, r3
   13f1e:	4b04      	ldr	r3, [pc, #16]	; (13f30 <CLI_i2cScan+0x108>)
   13f20:	4798      	blx	r3
			return pdFALSE;
   13f22:	2300      	movs	r3, #0

}
   13f24:	0018      	movs	r0, r3
   13f26:	46bd      	mov	sp, r7
   13f28:	b00f      	add	sp, #60	; 0x3c
   13f2a:	bd90      	pop	{r4, r7, pc}
   13f2c:	00038824 	.word	0x00038824
   13f30:	0001e4f5 	.word	0x0001e4f5
   13f34:	00038858 	.word	0x00038858
   13f38:	20000504 	.word	0x20000504
   13f3c:	000355d1 	.word	0x000355d1
   13f40:	00014da5 	.word	0x00014da5
   13f44:	00038860 	.word	0x00038860
   13f48:	00202058 	.word	0x00202058
   13f4c:	00038710 	.word	0x00038710

00013f50 <CLI_GetGpsData>:

// CLI Command added by Derek. Reads from the GPS and returns data.
BaseType_t CLI_GetGpsData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13f50:	b580      	push	{r7, lr}
   13f52:	b084      	sub	sp, #16
   13f54:	af00      	add	r7, sp, #0
   13f56:	60f8      	str	r0, [r7, #12]
   13f58:	60b9      	str	r1, [r7, #8]
   13f5a:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("Added by Derek, TBD!\r\n\r\n");
   13f5c:	4b04      	ldr	r3, [pc, #16]	; (13f70 <CLI_GetGpsData+0x20>)
   13f5e:	0018      	movs	r0, r3
   13f60:	4b04      	ldr	r3, [pc, #16]	; (13f74 <CLI_GetGpsData+0x24>)
   13f62:	4798      	blx	r3
		gpsPacket.lat = 0;
		gpsPacket.lon = 0;
		WifiAddGpsDataToQueue(&gpsPacket);
	}
	*/
	return pdFALSE;
   13f64:	2300      	movs	r3, #0
}
   13f66:	0018      	movs	r0, r3
   13f68:	46bd      	mov	sp, r7
   13f6a:	b004      	add	sp, #16
   13f6c:	bd80      	pop	{r7, pc}
   13f6e:	46c0      	nop			; (mov r8, r8)
   13f70:	00038868 	.word	0x00038868
   13f74:	0001e4f5 	.word	0x0001e4f5

00013f78 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13f78:	b590      	push	{r4, r7, lr}
   13f7a:	b085      	sub	sp, #20
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   13f80:	4b06      	ldr	r3, [pc, #24]	; (13f9c <ControlAddGameData+0x24>)
   13f82:	6818      	ldr	r0, [r3, #0]
   13f84:	6879      	ldr	r1, [r7, #4]
   13f86:	2300      	movs	r3, #0
   13f88:	220a      	movs	r2, #10
   13f8a:	4c05      	ldr	r4, [pc, #20]	; (13fa0 <ControlAddGameData+0x28>)
   13f8c:	47a0      	blx	r4
   13f8e:	0003      	movs	r3, r0
   13f90:	60fb      	str	r3, [r7, #12]
    return error;
   13f92:	68fb      	ldr	r3, [r7, #12]
}
   13f94:	0018      	movs	r0, r3
   13f96:	46bd      	mov	sp, r7
   13f98:	b005      	add	sp, #20
   13f9a:	bd90      	pop	{r4, r7, pc}
   13f9c:	20000600 	.word	0x20000600
   13fa0:	0001ae3d 	.word	0x0001ae3d

00013fa4 <system_interrupt_enable>:
{
   13fa4:	b580      	push	{r7, lr}
   13fa6:	b082      	sub	sp, #8
   13fa8:	af00      	add	r7, sp, #0
   13faa:	0002      	movs	r2, r0
   13fac:	1dfb      	adds	r3, r7, #7
   13fae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13fb0:	4b06      	ldr	r3, [pc, #24]	; (13fcc <system_interrupt_enable+0x28>)
   13fb2:	1dfa      	adds	r2, r7, #7
   13fb4:	7812      	ldrb	r2, [r2, #0]
   13fb6:	0011      	movs	r1, r2
   13fb8:	221f      	movs	r2, #31
   13fba:	400a      	ands	r2, r1
   13fbc:	2101      	movs	r1, #1
   13fbe:	4091      	lsls	r1, r2
   13fc0:	000a      	movs	r2, r1
   13fc2:	601a      	str	r2, [r3, #0]
}
   13fc4:	46c0      	nop			; (mov r8, r8)
   13fc6:	46bd      	mov	sp, r7
   13fc8:	b002      	add	sp, #8
   13fca:	bd80      	pop	{r7, pc}
   13fcc:	e000e100 	.word	0xe000e100

00013fd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   13fd0:	b580      	push	{r7, lr}
   13fd2:	b084      	sub	sp, #16
   13fd4:	af00      	add	r7, sp, #0
   13fd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	681b      	ldr	r3, [r3, #0]
   13fdc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   13fde:	68fb      	ldr	r3, [r7, #12]
   13fe0:	69db      	ldr	r3, [r3, #28]
   13fe2:	1e5a      	subs	r2, r3, #1
   13fe4:	4193      	sbcs	r3, r2
   13fe6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   13fe8:	0018      	movs	r0, r3
   13fea:	46bd      	mov	sp, r7
   13fec:	b004      	add	sp, #16
   13fee:	bd80      	pop	{r7, pc}

00013ff0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   13ff0:	b580      	push	{r7, lr}
   13ff2:	b082      	sub	sp, #8
   13ff4:	af00      	add	r7, sp, #0
   13ff6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   13ff8:	46c0      	nop			; (mov r8, r8)
   13ffa:	687b      	ldr	r3, [r7, #4]
   13ffc:	0018      	movs	r0, r3
   13ffe:	4b04      	ldr	r3, [pc, #16]	; (14010 <_usart_wait_for_sync+0x20>)
   14000:	4798      	blx	r3
   14002:	1e03      	subs	r3, r0, #0
   14004:	d1f9      	bne.n	13ffa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   14006:	46c0      	nop			; (mov r8, r8)
   14008:	46bd      	mov	sp, r7
   1400a:	b002      	add	sp, #8
   1400c:	bd80      	pop	{r7, pc}
   1400e:	46c0      	nop			; (mov r8, r8)
   14010:	00013fd1 	.word	0x00013fd1

00014014 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   14014:	b580      	push	{r7, lr}
   14016:	b082      	sub	sp, #8
   14018:	af00      	add	r7, sp, #0
   1401a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1401c:	687b      	ldr	r3, [r7, #4]
   1401e:	2280      	movs	r2, #128	; 0x80
   14020:	05d2      	lsls	r2, r2, #23
   14022:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   14024:	687b      	ldr	r3, [r7, #4]
   14026:	2200      	movs	r2, #0
   14028:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1402a:	687b      	ldr	r3, [r7, #4]
   1402c:	22ff      	movs	r2, #255	; 0xff
   1402e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   14030:	687b      	ldr	r3, [r7, #4]
   14032:	2200      	movs	r2, #0
   14034:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   14036:	687b      	ldr	r3, [r7, #4]
   14038:	2200      	movs	r2, #0
   1403a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1403c:	687b      	ldr	r3, [r7, #4]
   1403e:	2296      	movs	r2, #150	; 0x96
   14040:	0192      	lsls	r2, r2, #6
   14042:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   14044:	687b      	ldr	r3, [r7, #4]
   14046:	2224      	movs	r2, #36	; 0x24
   14048:	2101      	movs	r1, #1
   1404a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1404c:	687b      	ldr	r3, [r7, #4]
   1404e:	2225      	movs	r2, #37	; 0x25
   14050:	2101      	movs	r1, #1
   14052:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   14054:	687b      	ldr	r3, [r7, #4]
   14056:	2226      	movs	r2, #38	; 0x26
   14058:	2100      	movs	r1, #0
   1405a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1405c:	687b      	ldr	r3, [r7, #4]
   1405e:	2227      	movs	r2, #39	; 0x27
   14060:	2100      	movs	r1, #0
   14062:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   14064:	687b      	ldr	r3, [r7, #4]
   14066:	2200      	movs	r2, #0
   14068:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1406a:	687b      	ldr	r3, [r7, #4]
   1406c:	2288      	movs	r2, #136	; 0x88
   1406e:	0352      	lsls	r2, r2, #13
   14070:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   14072:	687b      	ldr	r3, [r7, #4]
   14074:	222c      	movs	r2, #44	; 0x2c
   14076:	2100      	movs	r1, #0
   14078:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1407a:	687b      	ldr	r3, [r7, #4]
   1407c:	222d      	movs	r2, #45	; 0x2d
   1407e:	2100      	movs	r1, #0
   14080:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14082:	687b      	ldr	r3, [r7, #4]
   14084:	2200      	movs	r2, #0
   14086:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14088:	687b      	ldr	r3, [r7, #4]
   1408a:	2200      	movs	r2, #0
   1408c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1408e:	687b      	ldr	r3, [r7, #4]
   14090:	2200      	movs	r2, #0
   14092:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   14094:	687b      	ldr	r3, [r7, #4]
   14096:	2200      	movs	r2, #0
   14098:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1409a:	687b      	ldr	r3, [r7, #4]
   1409c:	2200      	movs	r2, #0
   1409e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   140a0:	687b      	ldr	r3, [r7, #4]
   140a2:	2200      	movs	r2, #0
   140a4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   140a6:	687b      	ldr	r3, [r7, #4]
   140a8:	2200      	movs	r2, #0
   140aa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   140ac:	687b      	ldr	r3, [r7, #4]
   140ae:	2200      	movs	r2, #0
   140b0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   140b2:	687b      	ldr	r3, [r7, #4]
   140b4:	2200      	movs	r2, #0
   140b6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   140b8:	687b      	ldr	r3, [r7, #4]
   140ba:	2200      	movs	r2, #0
   140bc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   140be:	687b      	ldr	r3, [r7, #4]
   140c0:	2213      	movs	r2, #19
   140c2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   140c4:	687b      	ldr	r3, [r7, #4]
   140c6:	2200      	movs	r2, #0
   140c8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   140ca:	46c0      	nop			; (mov r8, r8)
   140cc:	46bd      	mov	sp, r7
   140ce:	b002      	add	sp, #8
   140d0:	bd80      	pop	{r7, pc}
	...

000140d4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   140d4:	b580      	push	{r7, lr}
   140d6:	b084      	sub	sp, #16
   140d8:	af00      	add	r7, sp, #0
   140da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   140dc:	687b      	ldr	r3, [r7, #4]
   140de:	681b      	ldr	r3, [r3, #0]
   140e0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   140e2:	687b      	ldr	r3, [r7, #4]
   140e4:	681b      	ldr	r3, [r3, #0]
   140e6:	0018      	movs	r0, r3
   140e8:	4b09      	ldr	r3, [pc, #36]	; (14110 <usart_enable+0x3c>)
   140ea:	4798      	blx	r3
   140ec:	0003      	movs	r3, r0
   140ee:	0018      	movs	r0, r3
   140f0:	4b08      	ldr	r3, [pc, #32]	; (14114 <usart_enable+0x40>)
   140f2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   140f4:	687b      	ldr	r3, [r7, #4]
   140f6:	0018      	movs	r0, r3
   140f8:	4b07      	ldr	r3, [pc, #28]	; (14118 <usart_enable+0x44>)
   140fa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   140fc:	68fb      	ldr	r3, [r7, #12]
   140fe:	681b      	ldr	r3, [r3, #0]
   14100:	2202      	movs	r2, #2
   14102:	431a      	orrs	r2, r3
   14104:	68fb      	ldr	r3, [r7, #12]
   14106:	601a      	str	r2, [r3, #0]
}
   14108:	46c0      	nop			; (mov r8, r8)
   1410a:	46bd      	mov	sp, r7
   1410c:	b004      	add	sp, #16
   1410e:	bd80      	pop	{r7, pc}
   14110:	00027d31 	.word	0x00027d31
   14114:	00013fa5 	.word	0x00013fa5
   14118:	00013ff1 	.word	0x00013ff1

0001411c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1411c:	b580      	push	{r7, lr}
   1411e:	b082      	sub	sp, #8
   14120:	af00      	add	r7, sp, #0
   14122:	6078      	str	r0, [r7, #4]
   14124:	000a      	movs	r2, r1
   14126:	1cfb      	adds	r3, r7, #3
   14128:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1412a:	687b      	ldr	r3, [r7, #4]
   1412c:	2231      	movs	r2, #49	; 0x31
   1412e:	5c9b      	ldrb	r3, [r3, r2]
   14130:	b25a      	sxtb	r2, r3
   14132:	1cfb      	adds	r3, r7, #3
   14134:	781b      	ldrb	r3, [r3, #0]
   14136:	2101      	movs	r1, #1
   14138:	4099      	lsls	r1, r3
   1413a:	000b      	movs	r3, r1
   1413c:	b25b      	sxtb	r3, r3
   1413e:	4313      	orrs	r3, r2
   14140:	b25b      	sxtb	r3, r3
   14142:	b2d9      	uxtb	r1, r3
   14144:	687b      	ldr	r3, [r7, #4]
   14146:	2231      	movs	r2, #49	; 0x31
   14148:	5499      	strb	r1, [r3, r2]

}
   1414a:	46c0      	nop			; (mov r8, r8)
   1414c:	46bd      	mov	sp, r7
   1414e:	b002      	add	sp, #8
   14150:	bd80      	pop	{r7, pc}
	...

00014154 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   14154:	b580      	push	{r7, lr}
   14156:	b084      	sub	sp, #16
   14158:	af00      	add	r7, sp, #0
   1415a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1415c:	2300      	movs	r3, #0
   1415e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14160:	4b09      	ldr	r3, [pc, #36]	; (14188 <distUsartWritecallback+0x34>)
   14162:	681b      	ldr	r3, [r3, #0]
   14164:	220c      	movs	r2, #12
   14166:	18ba      	adds	r2, r7, r2
   14168:	0011      	movs	r1, r2
   1416a:	0018      	movs	r0, r3
   1416c:	4b07      	ldr	r3, [pc, #28]	; (1418c <distUsartWritecallback+0x38>)
   1416e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14170:	68fb      	ldr	r3, [r7, #12]
   14172:	2b00      	cmp	r3, #0
   14174:	d003      	beq.n	1417e <distUsartWritecallback+0x2a>
   14176:	4b06      	ldr	r3, [pc, #24]	; (14190 <distUsartWritecallback+0x3c>)
   14178:	2280      	movs	r2, #128	; 0x80
   1417a:	0552      	lsls	r2, r2, #21
   1417c:	601a      	str	r2, [r3, #0]
}
   1417e:	46c0      	nop			; (mov r8, r8)
   14180:	46bd      	mov	sp, r7
   14182:	b004      	add	sp, #16
   14184:	bd80      	pop	{r7, pc}
   14186:	46c0      	nop			; (mov r8, r8)
   14188:	20004848 	.word	0x20004848
   1418c:	0001b4c5 	.word	0x0001b4c5
   14190:	e000ed04 	.word	0xe000ed04

00014194 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   14194:	b580      	push	{r7, lr}
   14196:	b084      	sub	sp, #16
   14198:	af00      	add	r7, sp, #0
   1419a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1419c:	2300      	movs	r3, #0
   1419e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   141a0:	4b09      	ldr	r3, [pc, #36]	; (141c8 <distUsartReadcallback+0x34>)
   141a2:	681b      	ldr	r3, [r3, #0]
   141a4:	220c      	movs	r2, #12
   141a6:	18ba      	adds	r2, r7, r2
   141a8:	0011      	movs	r1, r2
   141aa:	0018      	movs	r0, r3
   141ac:	4b07      	ldr	r3, [pc, #28]	; (141cc <distUsartReadcallback+0x38>)
   141ae:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141b0:	68fb      	ldr	r3, [r7, #12]
   141b2:	2b00      	cmp	r3, #0
   141b4:	d003      	beq.n	141be <distUsartReadcallback+0x2a>
   141b6:	4b06      	ldr	r3, [pc, #24]	; (141d0 <distUsartReadcallback+0x3c>)
   141b8:	2280      	movs	r2, #128	; 0x80
   141ba:	0552      	lsls	r2, r2, #21
   141bc:	601a      	str	r2, [r3, #0]
}
   141be:	46c0      	nop			; (mov r8, r8)
   141c0:	46bd      	mov	sp, r7
   141c2:	b004      	add	sp, #16
   141c4:	bd80      	pop	{r7, pc}
   141c6:	46c0      	nop			; (mov r8, r8)
   141c8:	20004848 	.word	0x20004848
   141cc:	0001b4c5 	.word	0x0001b4c5
   141d0:	e000ed04 	.word	0xe000ed04

000141d4 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
   141d4:	b580      	push	{r7, lr}
   141d6:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
   141d8:	4b10      	ldr	r3, [pc, #64]	; (1421c <InitializeDistanceSensor+0x48>)
   141da:	4798      	blx	r3
    configure_usart_callbacks();
   141dc:	4b10      	ldr	r3, [pc, #64]	; (14220 <InitializeDistanceSensor+0x4c>)
   141de:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   141e0:	2001      	movs	r0, #1
   141e2:	4b10      	ldr	r3, [pc, #64]	; (14224 <InitializeDistanceSensor+0x50>)
   141e4:	4798      	blx	r3
   141e6:	0002      	movs	r2, r0
   141e8:	4b0f      	ldr	r3, [pc, #60]	; (14228 <InitializeDistanceSensor+0x54>)
   141ea:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   141ec:	2203      	movs	r2, #3
   141ee:	2100      	movs	r1, #0
   141f0:	2001      	movs	r0, #1
   141f2:	4b0e      	ldr	r3, [pc, #56]	; (1422c <InitializeDistanceSensor+0x58>)
   141f4:	4798      	blx	r3
   141f6:	0002      	movs	r2, r0
   141f8:	4b0d      	ldr	r3, [pc, #52]	; (14230 <InitializeDistanceSensor+0x5c>)
   141fa:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
   141fc:	4b0a      	ldr	r3, [pc, #40]	; (14228 <InitializeDistanceSensor+0x54>)
   141fe:	681b      	ldr	r3, [r3, #0]
   14200:	2b00      	cmp	r3, #0
   14202:	d003      	beq.n	1420c <InitializeDistanceSensor+0x38>
   14204:	4b0a      	ldr	r3, [pc, #40]	; (14230 <InitializeDistanceSensor+0x5c>)
   14206:	681b      	ldr	r3, [r3, #0]
   14208:	2b00      	cmp	r3, #0
   1420a:	d103      	bne.n	14214 <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
   1420c:	4b09      	ldr	r3, [pc, #36]	; (14234 <InitializeDistanceSensor+0x60>)
   1420e:	0018      	movs	r0, r3
   14210:	4b09      	ldr	r3, [pc, #36]	; (14238 <InitializeDistanceSensor+0x64>)
   14212:	4798      	blx	r3
    }
}
   14214:	46c0      	nop			; (mov r8, r8)
   14216:	46bd      	mov	sp, r7
   14218:	bd80      	pop	{r7, pc}
   1421a:	46c0      	nop			; (mov r8, r8)
   1421c:	000145a5 	.word	0x000145a5
   14220:	0001461d 	.word	0x0001461d
   14224:	0001adfd 	.word	0x0001adfd
   14228:	20004858 	.word	0x20004858
   1422c:	0001ab95 	.word	0x0001ab95
   14230:	20004848 	.word	0x20004848
   14234:	000388f4 	.word	0x000388f4
   14238:	0001e4f5 	.word	0x0001e4f5

0001423c <parseGPRMC_lat>:
char checkerprint3[64];
char latchar[12];
char lontchar[12];
char *eptr;

double parseGPRMC_lat(char stringtocheck[]) {
   1423c:	b590      	push	{r4, r7, lr}
   1423e:	b089      	sub	sp, #36	; 0x24
   14240:	af00      	add	r7, sp, #0
   14242:	6078      	str	r0, [r7, #4]
	//checks string to find A, then goes into the numbers bounded by , and ,
	//take out the latitude number
	int gpsgood = 0;
   14244:	2300      	movs	r3, #0
   14246:	61fb      	str	r3, [r7, #28]
	int latcnt = 0;
   14248:	2300      	movs	r3, #0
   1424a:	61bb      	str	r3, [r7, #24]
	double curr_lat = 0.0;
   1424c:	2300      	movs	r3, #0
   1424e:	2400      	movs	r4, #0
   14250:	60bb      	str	r3, [r7, #8]
   14252:	60fc      	str	r4, [r7, #12]
 	for (int i = 0; i < 64; i++) {
   14254:	2300      	movs	r3, #0
   14256:	617b      	str	r3, [r7, #20]
   14258:	e036      	b.n	142c8 <parseGPRMC_lat+0x8c>
 		//SerialConsoleWriteString("printing here in gps func \r\n");
		 
		if (stringtocheck[i] == 'A') { //A existed
   1425a:	697b      	ldr	r3, [r7, #20]
   1425c:	687a      	ldr	r2, [r7, #4]
   1425e:	18d3      	adds	r3, r2, r3
   14260:	781b      	ldrb	r3, [r3, #0]
   14262:	2b41      	cmp	r3, #65	; 0x41
   14264:	d105      	bne.n	14272 <parseGPRMC_lat+0x36>
			gpsgood = 1;
   14266:	2301      	movs	r3, #1
   14268:	61fb      	str	r3, [r7, #28]
			SerialConsoleWriteString("\r\nGPS is connected \r\n");
   1426a:	4b20      	ldr	r3, [pc, #128]	; (142ec <parseGPRMC_lat+0xb0>)
   1426c:	0018      	movs	r0, r3
   1426e:	4b20      	ldr	r3, [pc, #128]	; (142f0 <parseGPRMC_lat+0xb4>)
   14270:	4798      	blx	r3
		}

		if (gpsgood) { //doing manual indexing
   14272:	69fb      	ldr	r3, [r7, #28]
   14274:	2b00      	cmp	r3, #0
   14276:	d022      	beq.n	142be <parseGPRMC_lat+0x82>
			for (int j = 14; j < 24; j++) {
   14278:	230e      	movs	r3, #14
   1427a:	613b      	str	r3, [r7, #16]
   1427c:	e01b      	b.n	142b6 <parseGPRMC_lat+0x7a>
				snprintf(checkerprint3, 64, "%c", stringtocheck[j]);
   1427e:	693b      	ldr	r3, [r7, #16]
   14280:	687a      	ldr	r2, [r7, #4]
   14282:	18d3      	adds	r3, r2, r3
   14284:	781b      	ldrb	r3, [r3, #0]
   14286:	4a1b      	ldr	r2, [pc, #108]	; (142f4 <parseGPRMC_lat+0xb8>)
   14288:	481b      	ldr	r0, [pc, #108]	; (142f8 <parseGPRMC_lat+0xbc>)
   1428a:	2140      	movs	r1, #64	; 0x40
   1428c:	4c1b      	ldr	r4, [pc, #108]	; (142fc <parseGPRMC_lat+0xc0>)
   1428e:	47a0      	blx	r4
				SerialConsoleWriteString(checkerprint3);
   14290:	4b19      	ldr	r3, [pc, #100]	; (142f8 <parseGPRMC_lat+0xbc>)
   14292:	0018      	movs	r0, r3
   14294:	4b16      	ldr	r3, [pc, #88]	; (142f0 <parseGPRMC_lat+0xb4>)
   14296:	4798      	blx	r3
				latchar[latcnt] = stringtocheck[j];
   14298:	693b      	ldr	r3, [r7, #16]
   1429a:	687a      	ldr	r2, [r7, #4]
   1429c:	18d3      	adds	r3, r2, r3
   1429e:	7819      	ldrb	r1, [r3, #0]
   142a0:	4a17      	ldr	r2, [pc, #92]	; (14300 <parseGPRMC_lat+0xc4>)
   142a2:	69bb      	ldr	r3, [r7, #24]
   142a4:	18d3      	adds	r3, r2, r3
   142a6:	1c0a      	adds	r2, r1, #0
   142a8:	701a      	strb	r2, [r3, #0]
				latcnt++;
   142aa:	69bb      	ldr	r3, [r7, #24]
   142ac:	3301      	adds	r3, #1
   142ae:	61bb      	str	r3, [r7, #24]
			for (int j = 14; j < 24; j++) {
   142b0:	693b      	ldr	r3, [r7, #16]
   142b2:	3301      	adds	r3, #1
   142b4:	613b      	str	r3, [r7, #16]
   142b6:	693b      	ldr	r3, [r7, #16]
   142b8:	2b17      	cmp	r3, #23
   142ba:	dde0      	ble.n	1427e <parseGPRMC_lat+0x42>
			}
			//gpsgood = 0; //done with the latitude
			break;
   142bc:	e007      	b.n	142ce <parseGPRMC_lat+0x92>
		}
		else {
			gpsgood = 0;
   142be:	2300      	movs	r3, #0
   142c0:	61fb      	str	r3, [r7, #28]
 	for (int i = 0; i < 64; i++) {
   142c2:	697b      	ldr	r3, [r7, #20]
   142c4:	3301      	adds	r3, #1
   142c6:	617b      	str	r3, [r7, #20]
   142c8:	697b      	ldr	r3, [r7, #20]
   142ca:	2b3f      	cmp	r3, #63	; 0x3f
   142cc:	ddc5      	ble.n	1425a <parseGPRMC_lat+0x1e>
 		//snprintf(checkerprint3, 64, "\r\n%c\r\n", stringtocheck[i]);
 		//SerialConsoleWriteString(checkerprint3);
 	}
  	//gps_latitude = strtod(latchar, &eptr);
	//sscanf(latchar, "%f", &gps_latitude);
	curr_lat = atof(latchar);
   142ce:	4b0c      	ldr	r3, [pc, #48]	; (14300 <parseGPRMC_lat+0xc4>)
   142d0:	0018      	movs	r0, r3
   142d2:	4b0c      	ldr	r3, [pc, #48]	; (14304 <parseGPRMC_lat+0xc8>)
   142d4:	4798      	blx	r3
   142d6:	0003      	movs	r3, r0
   142d8:	000c      	movs	r4, r1
   142da:	60bb      	str	r3, [r7, #8]
   142dc:	60fc      	str	r4, [r7, #12]
	//printf("floatvalue %f", gps_latitude);
//   	snprintf(checkerprint3, 64, "\r\nGPS latitude is %lf\r\n", curr_lat);
//   	SerialConsoleWriteString(checkerprint3);
//  	SerialConsoleWriteString("\r\nstring parsed \r\n");
	//rmcoutput = stringtocheck;
	return curr_lat;
   142de:	68bb      	ldr	r3, [r7, #8]
   142e0:	68fc      	ldr	r4, [r7, #12]
}
   142e2:	0018      	movs	r0, r3
   142e4:	0021      	movs	r1, r4
   142e6:	46bd      	mov	sp, r7
   142e8:	b009      	add	sp, #36	; 0x24
   142ea:	bd90      	pop	{r4, r7, pc}
   142ec:	0003891c 	.word	0x0003891c
   142f0:	0001e4f5 	.word	0x0001e4f5
   142f4:	00038934 	.word	0x00038934
   142f8:	200048dc 	.word	0x200048dc
   142fc:	000355d1 	.word	0x000355d1
   14300:	2000485c 	.word	0x2000485c
   14304:	000352b9 	.word	0x000352b9

00014308 <parseGPRMC_long>:
/**
 * @fn			double parseGPRMC_long(char stringtocheck)
 * @brief		returns the reading from the NMEA's GPRMC line for the GPS longitude
 * @note		outputs a double to use for later commands directly
 */
double parseGPRMC_long(char stringtocheck[]) {
   14308:	b590      	push	{r4, r7, lr}
   1430a:	b089      	sub	sp, #36	; 0x24
   1430c:	af00      	add	r7, sp, #0
   1430e:	6078      	str	r0, [r7, #4]
	//checks string to find A, then goes into the numbers bounded by , and ,
	//take out the latitude number
	int gpsgood = 0;
   14310:	2300      	movs	r3, #0
   14312:	61fb      	str	r3, [r7, #28]
	int lontcnt = 0;
   14314:	2300      	movs	r3, #0
   14316:	61bb      	str	r3, [r7, #24]
	double curr_lont = 0.0;
   14318:	2300      	movs	r3, #0
   1431a:	2400      	movs	r4, #0
   1431c:	60bb      	str	r3, [r7, #8]
   1431e:	60fc      	str	r4, [r7, #12]
	for (int i = 0; i < 64; i++) {
   14320:	2300      	movs	r3, #0
   14322:	617b      	str	r3, [r7, #20]
   14324:	e036      	b.n	14394 <parseGPRMC_long+0x8c>
		//SerialConsoleWriteString("printing here in gps func \r\n");
		
		if (stringtocheck[i] == 'A') { //A existed
   14326:	697b      	ldr	r3, [r7, #20]
   14328:	687a      	ldr	r2, [r7, #4]
   1432a:	18d3      	adds	r3, r2, r3
   1432c:	781b      	ldrb	r3, [r3, #0]
   1432e:	2b41      	cmp	r3, #65	; 0x41
   14330:	d105      	bne.n	1433e <parseGPRMC_long+0x36>
			gpsgood = 1;
   14332:	2301      	movs	r3, #1
   14334:	61fb      	str	r3, [r7, #28]
			SerialConsoleWriteString("\r\nGPS is connected \r\n");
   14336:	4b20      	ldr	r3, [pc, #128]	; (143b8 <parseGPRMC_long+0xb0>)
   14338:	0018      	movs	r0, r3
   1433a:	4b20      	ldr	r3, [pc, #128]	; (143bc <parseGPRMC_long+0xb4>)
   1433c:	4798      	blx	r3
		}

		if (gpsgood) { //doing manual indexing
   1433e:	69fb      	ldr	r3, [r7, #28]
   14340:	2b00      	cmp	r3, #0
   14342:	d022      	beq.n	1438a <parseGPRMC_long+0x82>
			for (int j = 27; j < 38; j++) {
   14344:	231b      	movs	r3, #27
   14346:	613b      	str	r3, [r7, #16]
   14348:	e01b      	b.n	14382 <parseGPRMC_long+0x7a>
				snprintf(checkerprint3, 64, "%c", stringtocheck[j]);
   1434a:	693b      	ldr	r3, [r7, #16]
   1434c:	687a      	ldr	r2, [r7, #4]
   1434e:	18d3      	adds	r3, r2, r3
   14350:	781b      	ldrb	r3, [r3, #0]
   14352:	4a1b      	ldr	r2, [pc, #108]	; (143c0 <parseGPRMC_long+0xb8>)
   14354:	481b      	ldr	r0, [pc, #108]	; (143c4 <parseGPRMC_long+0xbc>)
   14356:	2140      	movs	r1, #64	; 0x40
   14358:	4c1b      	ldr	r4, [pc, #108]	; (143c8 <parseGPRMC_long+0xc0>)
   1435a:	47a0      	blx	r4
				SerialConsoleWriteString(checkerprint3);
   1435c:	4b19      	ldr	r3, [pc, #100]	; (143c4 <parseGPRMC_long+0xbc>)
   1435e:	0018      	movs	r0, r3
   14360:	4b16      	ldr	r3, [pc, #88]	; (143bc <parseGPRMC_long+0xb4>)
   14362:	4798      	blx	r3
				lontchar[lontcnt] = stringtocheck[j];
   14364:	693b      	ldr	r3, [r7, #16]
   14366:	687a      	ldr	r2, [r7, #4]
   14368:	18d3      	adds	r3, r2, r3
   1436a:	7819      	ldrb	r1, [r3, #0]
   1436c:	4a17      	ldr	r2, [pc, #92]	; (143cc <parseGPRMC_long+0xc4>)
   1436e:	69bb      	ldr	r3, [r7, #24]
   14370:	18d3      	adds	r3, r2, r3
   14372:	1c0a      	adds	r2, r1, #0
   14374:	701a      	strb	r2, [r3, #0]
				lontcnt++;
   14376:	69bb      	ldr	r3, [r7, #24]
   14378:	3301      	adds	r3, #1
   1437a:	61bb      	str	r3, [r7, #24]
			for (int j = 27; j < 38; j++) {
   1437c:	693b      	ldr	r3, [r7, #16]
   1437e:	3301      	adds	r3, #1
   14380:	613b      	str	r3, [r7, #16]
   14382:	693b      	ldr	r3, [r7, #16]
   14384:	2b25      	cmp	r3, #37	; 0x25
   14386:	dde0      	ble.n	1434a <parseGPRMC_long+0x42>
			}
			//gpsgood = 0; //done with the latitude
			break;
   14388:	e007      	b.n	1439a <parseGPRMC_long+0x92>
		}
		else {
			gpsgood = 0;
   1438a:	2300      	movs	r3, #0
   1438c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 64; i++) {
   1438e:	697b      	ldr	r3, [r7, #20]
   14390:	3301      	adds	r3, #1
   14392:	617b      	str	r3, [r7, #20]
   14394:	697b      	ldr	r3, [r7, #20]
   14396:	2b3f      	cmp	r3, #63	; 0x3f
   14398:	ddc5      	ble.n	14326 <parseGPRMC_long+0x1e>
		//snprintf(checkerprint3, 64, "\r\n%c\r\n", stringtocheck[i]);
		//SerialConsoleWriteString(checkerprint3);
	}
	//gps_latitude = strtod(latchar, &eptr);
	//sscanf(latchar, "%f", &gps_latitude);
	curr_lont = atof(latchar);
   1439a:	4b0d      	ldr	r3, [pc, #52]	; (143d0 <parseGPRMC_long+0xc8>)
   1439c:	0018      	movs	r0, r3
   1439e:	4b0d      	ldr	r3, [pc, #52]	; (143d4 <parseGPRMC_long+0xcc>)
   143a0:	4798      	blx	r3
   143a2:	0003      	movs	r3, r0
   143a4:	000c      	movs	r4, r1
   143a6:	60bb      	str	r3, [r7, #8]
   143a8:	60fc      	str	r4, [r7, #12]
	//printf("floatvalue %f", gps_latitude);
// 	snprintf(checkerprint3, 64, "\r\nGPS longitude is %lf\r\n", curr_lont);
// 	SerialConsoleWriteString(checkerprint3);
// 	SerialConsoleWriteString("\r\nstring parsed \r\n");
	//rmcoutput = stringtocheck;
	return curr_lont;
   143aa:	68bb      	ldr	r3, [r7, #8]
   143ac:	68fc      	ldr	r4, [r7, #12]
}
   143ae:	0018      	movs	r0, r3
   143b0:	0021      	movs	r1, r4
   143b2:	46bd      	mov	sp, r7
   143b4:	b009      	add	sp, #36	; 0x24
   143b6:	bd90      	pop	{r4, r7, pc}
   143b8:	0003891c 	.word	0x0003891c
   143bc:	0001e4f5 	.word	0x0001e4f5
   143c0:	00038934 	.word	0x00038934
   143c4:	200048dc 	.word	0x200048dc
   143c8:	000355d1 	.word	0x000355d1
   143cc:	2000484c 	.word	0x2000484c
   143d0:	2000485c 	.word	0x2000485c
   143d4:	000352b9 	.word	0x000352b9

000143d8 <DistanceSensorGetDistance>:
char stringHolderRMC[64];

//memset(dataHolder, 0, sizeof(dataHolder));

int32_t DistanceSensorGetDistance(float *distance, const TickType_t xMaxBlockTime)
{
   143d8:	b590      	push	{r4, r7, lr}
   143da:	b08b      	sub	sp, #44	; 0x2c
   143dc:	af02      	add	r7, sp, #8
   143de:	6078      	str	r0, [r7, #4]
   143e0:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   143e2:	2300      	movs	r3, #0
   143e4:	61fb      	str	r3, [r7, #28]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   143e6:	2396      	movs	r3, #150	; 0x96
   143e8:	005b      	lsls	r3, r3, #1
   143ea:	0018      	movs	r0, r3
   143ec:	4b58      	ldr	r3, [pc, #352]	; (14550 <DistanceSensorGetDistance+0x178>)
   143ee:	4798      	blx	r3
   143f0:	0003      	movs	r3, r0
   143f2:	61fb      	str	r3, [r7, #28]
    if (ERROR_NONE != error) goto exitf;
   143f4:	69fb      	ldr	r3, [r7, #28]
   143f6:	2b00      	cmp	r3, #0
   143f8:	d000      	beq.n	143fc <DistanceSensorGetDistance+0x24>
   143fa:	e09e      	b.n	1453a <DistanceSensorGetDistance+0x162>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   143fc:	4b55      	ldr	r3, [pc, #340]	; (14554 <DistanceSensorGetDistance+0x17c>)
   143fe:	2255      	movs	r2, #85	; 0x55
   14400:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14402:	4954      	ldr	r1, [pc, #336]	; (14554 <DistanceSensorGetDistance+0x17c>)
   14404:	4b54      	ldr	r3, [pc, #336]	; (14558 <DistanceSensorGetDistance+0x180>)
   14406:	2201      	movs	r2, #1
   14408:	0018      	movs	r0, r3
   1440a:	4b54      	ldr	r3, [pc, #336]	; (1455c <DistanceSensorGetDistance+0x184>)
   1440c:	4798      	blx	r3
   1440e:	1e03      	subs	r3, r0, #0
   14410:	d000      	beq.n	14414 <DistanceSensorGetDistance+0x3c>
   14412:	e094      	b.n	1453e <DistanceSensorGetDistance+0x166>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14414:	4b52      	ldr	r3, [pc, #328]	; (14560 <DistanceSensorGetDistance+0x188>)
   14416:	681b      	ldr	r3, [r3, #0]
   14418:	683a      	ldr	r2, [r7, #0]
   1441a:	0011      	movs	r1, r2
   1441c:	0018      	movs	r0, r3
   1441e:	4b51      	ldr	r3, [pc, #324]	; (14564 <DistanceSensorGetDistance+0x18c>)
   14420:	4798      	blx	r3
   14422:	0003      	movs	r3, r0
   14424:	2b01      	cmp	r3, #1
   14426:	d003      	beq.n	14430 <DistanceSensorGetDistance+0x58>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14428:	2303      	movs	r3, #3
   1442a:	425b      	negs	r3, r3
   1442c:	61fb      	str	r3, [r7, #28]
        goto exitf;
   1442e:	e087      	b.n	14540 <DistanceSensorGetDistance+0x168>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    //usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
	
	int len = sizeof(latestRxDistance) / sizeof(char);
   14430:	2350      	movs	r3, #80	; 0x50
   14432:	60fb      	str	r3, [r7, #12]
	usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, len);
   14434:	68fb      	ldr	r3, [r7, #12]
   14436:	b29a      	uxth	r2, r3
   14438:	494b      	ldr	r1, [pc, #300]	; (14568 <DistanceSensorGetDistance+0x190>)
   1443a:	4b47      	ldr	r3, [pc, #284]	; (14558 <DistanceSensorGetDistance+0x180>)
   1443c:	0018      	movs	r0, r3
   1443e:	4b4b      	ldr	r3, [pc, #300]	; (1456c <DistanceSensorGetDistance+0x194>)
   14440:	4798      	blx	r3
	
    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14442:	4b47      	ldr	r3, [pc, #284]	; (14560 <DistanceSensorGetDistance+0x188>)
   14444:	681b      	ldr	r3, [r3, #0]
   14446:	683a      	ldr	r2, [r7, #0]
   14448:	0011      	movs	r1, r2
   1444a:	0018      	movs	r0, r3
   1444c:	4b45      	ldr	r3, [pc, #276]	; (14564 <DistanceSensorGetDistance+0x18c>)
   1444e:	4798      	blx	r3
   14450:	0003      	movs	r3, r0
   14452:	2b01      	cmp	r3, #1
   14454:	d16d      	bne.n	14532 <DistanceSensorGetDistance+0x15a>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        
		//*distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
		//*distance = (float)latestRxDistance[0]; //Derek-@628
		int inRMC = 0;
   14456:	2300      	movs	r3, #0
   14458:	61bb      	str	r3, [r7, #24]
		int fillint = 0;
   1445a:	2300      	movs	r3, #0
   1445c:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < len; i++)
   1445e:	2300      	movs	r3, #0
   14460:	613b      	str	r3, [r7, #16]
   14462:	e025      	b.n	144b0 <DistanceSensorGetDistance+0xd8>
		{	
			//SerialConsoleWriteString(latestRxDistance[i]);
			char convertedText = latestRxDistance[i];
   14464:	230b      	movs	r3, #11
   14466:	18fb      	adds	r3, r7, r3
   14468:	493f      	ldr	r1, [pc, #252]	; (14568 <DistanceSensorGetDistance+0x190>)
   1446a:	693a      	ldr	r2, [r7, #16]
   1446c:	188a      	adds	r2, r1, r2
   1446e:	7812      	ldrb	r2, [r2, #0]
   14470:	701a      	strb	r2, [r3, #0]
			//snprintf(checkerprint, 64, "%c", convertedText);
			//SerialConsoleWriteString(checkerprint); //to display it
			if (convertedText == 'C') { //we are in GPRMC line
   14472:	230b      	movs	r3, #11
   14474:	18fb      	adds	r3, r7, r3
   14476:	781b      	ldrb	r3, [r3, #0]
   14478:	2b43      	cmp	r3, #67	; 0x43
   1447a:	d101      	bne.n	14480 <DistanceSensorGetDistance+0xa8>
				inRMC = 1;
   1447c:	2301      	movs	r3, #1
   1447e:	61bb      	str	r3, [r7, #24]
				//snprintf(checkerprint2, 64, "\r\nfound GPRMC line at index i = %i \r\n", i);
				//SerialConsoleWriteString(checkerprint2); //to display it
			}
			if (inRMC && convertedText != '$')
   14480:	69bb      	ldr	r3, [r7, #24]
   14482:	2b00      	cmp	r3, #0
   14484:	d00f      	beq.n	144a6 <DistanceSensorGetDistance+0xce>
   14486:	230b      	movs	r3, #11
   14488:	18fb      	adds	r3, r7, r3
   1448a:	781b      	ldrb	r3, [r3, #0]
   1448c:	2b24      	cmp	r3, #36	; 0x24
   1448e:	d00a      	beq.n	144a6 <DistanceSensorGetDistance+0xce>
			{
				stringHolderRMC[fillint] = convertedText;
   14490:	4a37      	ldr	r2, [pc, #220]	; (14570 <DistanceSensorGetDistance+0x198>)
   14492:	697b      	ldr	r3, [r7, #20]
   14494:	18d3      	adds	r3, r2, r3
   14496:	220b      	movs	r2, #11
   14498:	18ba      	adds	r2, r7, r2
   1449a:	7812      	ldrb	r2, [r2, #0]
   1449c:	701a      	strb	r2, [r3, #0]
				fillint++;
   1449e:	697b      	ldr	r3, [r7, #20]
   144a0:	3301      	adds	r3, #1
   144a2:	617b      	str	r3, [r7, #20]
   144a4:	e001      	b.n	144aa <DistanceSensorGetDistance+0xd2>
			}
			else {
				inRMC = 0;
   144a6:	2300      	movs	r3, #0
   144a8:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < len; i++)
   144aa:	693b      	ldr	r3, [r7, #16]
   144ac:	3301      	adds	r3, #1
   144ae:	613b      	str	r3, [r7, #16]
   144b0:	693a      	ldr	r2, [r7, #16]
   144b2:	68fb      	ldr	r3, [r7, #12]
   144b4:	429a      	cmp	r2, r3
   144b6:	dbd5      	blt.n	14464 <DistanceSensorGetDistance+0x8c>
			}
		}
		//stringHolderRMC[fillint++] = '\0';
		SerialConsoleWriteString("printing saved RMC\r\n");
   144b8:	4b2e      	ldr	r3, [pc, #184]	; (14574 <DistanceSensorGetDistance+0x19c>)
   144ba:	0018      	movs	r0, r3
   144bc:	4b2e      	ldr	r3, [pc, #184]	; (14578 <DistanceSensorGetDistance+0x1a0>)
   144be:	4798      	blx	r3
		snprintf(checkerprint2, 64, "%s\r\n", (char *) stringHolderRMC);
   144c0:	4b2b      	ldr	r3, [pc, #172]	; (14570 <DistanceSensorGetDistance+0x198>)
   144c2:	4a2e      	ldr	r2, [pc, #184]	; (1457c <DistanceSensorGetDistance+0x1a4>)
   144c4:	482e      	ldr	r0, [pc, #184]	; (14580 <DistanceSensorGetDistance+0x1a8>)
   144c6:	2140      	movs	r1, #64	; 0x40
   144c8:	4c2e      	ldr	r4, [pc, #184]	; (14584 <DistanceSensorGetDistance+0x1ac>)
   144ca:	47a0      	blx	r4
		SerialConsoleWriteString(checkerprint2);
   144cc:	4b2c      	ldr	r3, [pc, #176]	; (14580 <DistanceSensorGetDistance+0x1a8>)
   144ce:	0018      	movs	r0, r3
   144d0:	4b29      	ldr	r3, [pc, #164]	; (14578 <DistanceSensorGetDistance+0x1a0>)
   144d2:	4798      	blx	r3

		gps_latitude = parseGPRMC_lat(stringHolderRMC);
   144d4:	4b26      	ldr	r3, [pc, #152]	; (14570 <DistanceSensorGetDistance+0x198>)
   144d6:	0018      	movs	r0, r3
   144d8:	4b2b      	ldr	r3, [pc, #172]	; (14588 <DistanceSensorGetDistance+0x1b0>)
   144da:	4798      	blx	r3
   144dc:	0003      	movs	r3, r0
   144de:	000c      	movs	r4, r1
   144e0:	4a2a      	ldr	r2, [pc, #168]	; (1458c <DistanceSensorGetDistance+0x1b4>)
   144e2:	6013      	str	r3, [r2, #0]
   144e4:	6054      	str	r4, [r2, #4]
		gps_longitude = parseGPRMC_long(stringHolderRMC);
   144e6:	4b22      	ldr	r3, [pc, #136]	; (14570 <DistanceSensorGetDistance+0x198>)
   144e8:	0018      	movs	r0, r3
   144ea:	4b29      	ldr	r3, [pc, #164]	; (14590 <DistanceSensorGetDistance+0x1b8>)
   144ec:	4798      	blx	r3
   144ee:	0003      	movs	r3, r0
   144f0:	000c      	movs	r4, r1
   144f2:	4a28      	ldr	r2, [pc, #160]	; (14594 <DistanceSensorGetDistance+0x1bc>)
   144f4:	6013      	str	r3, [r2, #0]
   144f6:	6054      	str	r4, [r2, #4]

		snprintf(checkerprint2, 64, "\r\nGPS Latitude = %f \r\n", gps_latitude);
   144f8:	4b24      	ldr	r3, [pc, #144]	; (1458c <DistanceSensorGetDistance+0x1b4>)
   144fa:	685c      	ldr	r4, [r3, #4]
   144fc:	681b      	ldr	r3, [r3, #0]
   144fe:	4a26      	ldr	r2, [pc, #152]	; (14598 <DistanceSensorGetDistance+0x1c0>)
   14500:	481f      	ldr	r0, [pc, #124]	; (14580 <DistanceSensorGetDistance+0x1a8>)
   14502:	9300      	str	r3, [sp, #0]
   14504:	9401      	str	r4, [sp, #4]
   14506:	2140      	movs	r1, #64	; 0x40
   14508:	4b1e      	ldr	r3, [pc, #120]	; (14584 <DistanceSensorGetDistance+0x1ac>)
   1450a:	4798      	blx	r3
		SerialConsoleWriteString(checkerprint2);
   1450c:	4b1c      	ldr	r3, [pc, #112]	; (14580 <DistanceSensorGetDistance+0x1a8>)
   1450e:	0018      	movs	r0, r3
   14510:	4b19      	ldr	r3, [pc, #100]	; (14578 <DistanceSensorGetDistance+0x1a0>)
   14512:	4798      	blx	r3
		snprintf(checkerprint2, 64, "\r\nGPS Longitude = %f \r\n", gps_longitude);
   14514:	4b1f      	ldr	r3, [pc, #124]	; (14594 <DistanceSensorGetDistance+0x1bc>)
   14516:	685c      	ldr	r4, [r3, #4]
   14518:	681b      	ldr	r3, [r3, #0]
   1451a:	4a20      	ldr	r2, [pc, #128]	; (1459c <DistanceSensorGetDistance+0x1c4>)
   1451c:	4818      	ldr	r0, [pc, #96]	; (14580 <DistanceSensorGetDistance+0x1a8>)
   1451e:	9300      	str	r3, [sp, #0]
   14520:	9401      	str	r4, [sp, #4]
   14522:	2140      	movs	r1, #64	; 0x40
   14524:	4b17      	ldr	r3, [pc, #92]	; (14584 <DistanceSensorGetDistance+0x1ac>)
   14526:	4798      	blx	r3
		SerialConsoleWriteString(checkerprint2);
   14528:	4b15      	ldr	r3, [pc, #84]	; (14580 <DistanceSensorGetDistance+0x1a8>)
   1452a:	0018      	movs	r0, r3
   1452c:	4b12      	ldr	r3, [pc, #72]	; (14578 <DistanceSensorGetDistance+0x1a0>)
   1452e:	4798      	blx	r3
   14530:	e006      	b.n	14540 <DistanceSensorGetDistance+0x168>
		} else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14532:	2303      	movs	r3, #3
   14534:	425b      	negs	r3, r3
   14536:	61fb      	str	r3, [r7, #28]
        goto exitf;
   14538:	e002      	b.n	14540 <DistanceSensorGetDistance+0x168>
    if (ERROR_NONE != error) goto exitf;
   1453a:	46c0      	nop			; (mov r8, r8)
   1453c:	e000      	b.n	14540 <DistanceSensorGetDistance+0x168>
        goto exitf;
   1453e:	46c0      	nop			; (mov r8, r8)
		}
	
exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14540:	4b17      	ldr	r3, [pc, #92]	; (145a0 <DistanceSensorGetDistance+0x1c8>)
   14542:	4798      	blx	r3

    return error;
   14544:	69fb      	ldr	r3, [r7, #28]
}
   14546:	0018      	movs	r0, r3
   14548:	46bd      	mov	sp, r7
   1454a:	b009      	add	sp, #36	; 0x24
   1454c:	bd90      	pop	{r4, r7, pc}
   1454e:	46c0      	nop			; (mov r8, r8)
   14550:	000146a1 	.word	0x000146a1
   14554:	20004844 	.word	0x20004844
   14558:	20004868 	.word	0x20004868
   1455c:	00029591 	.word	0x00029591
   14560:	20004848 	.word	0x20004848
   14564:	0001bb4d 	.word	0x0001bb4d
   14568:	200047f4 	.word	0x200047f4
   1456c:	000295d9 	.word	0x000295d9
   14570:	2000491c 	.word	0x2000491c
   14574:	00038938 	.word	0x00038938
   14578:	0001e4f5 	.word	0x0001e4f5
   1457c:	00038950 	.word	0x00038950
   14580:	2000489c 	.word	0x2000489c
   14584:	000355d1 	.word	0x000355d1
   14588:	0001423d 	.word	0x0001423d
   1458c:	20000608 	.word	0x20000608
   14590:	00014309 	.word	0x00014309
   14594:	20000610 	.word	0x20000610
   14598:	00038958 	.word	0x00038958
   1459c:	00038970 	.word	0x00038970
   145a0:	00014669 	.word	0x00014669

000145a4 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   145a4:	b580      	push	{r7, lr}
   145a6:	b090      	sub	sp, #64	; 0x40
   145a8:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   145aa:	003b      	movs	r3, r7
   145ac:	0018      	movs	r0, r3
   145ae:	4b14      	ldr	r3, [pc, #80]	; (14600 <configure_usart+0x5c>)
   145b0:	4798      	blx	r3

    config_usart.baudrate = 9600;
   145b2:	003b      	movs	r3, r7
   145b4:	2296      	movs	r2, #150	; 0x96
   145b6:	0192      	lsls	r2, r2, #6
   145b8:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   145ba:	003b      	movs	r3, r7
   145bc:	2280      	movs	r2, #128	; 0x80
   145be:	0352      	lsls	r2, r2, #13
   145c0:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
   145c2:	003b      	movs	r3, r7
   145c4:	4a0f      	ldr	r2, [pc, #60]	; (14604 <configure_usart+0x60>)
   145c6:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
   145c8:	003b      	movs	r3, r7
   145ca:	4a0f      	ldr	r2, [pc, #60]	; (14608 <configure_usart+0x64>)
   145cc:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
   145ce:	003b      	movs	r3, r7
   145d0:	2201      	movs	r2, #1
   145d2:	4252      	negs	r2, r2
   145d4:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
   145d6:	003b      	movs	r3, r7
   145d8:	2201      	movs	r2, #1
   145da:	4252      	negs	r2, r2
   145dc:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
   145de:	46c0      	nop			; (mov r8, r8)
   145e0:	003a      	movs	r2, r7
   145e2:	490a      	ldr	r1, [pc, #40]	; (1460c <configure_usart+0x68>)
   145e4:	4b0a      	ldr	r3, [pc, #40]	; (14610 <configure_usart+0x6c>)
   145e6:	0018      	movs	r0, r3
   145e8:	4b0a      	ldr	r3, [pc, #40]	; (14614 <configure_usart+0x70>)
   145ea:	4798      	blx	r3
   145ec:	1e03      	subs	r3, r0, #0
   145ee:	d1f7      	bne.n	145e0 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance_dist);
   145f0:	4b07      	ldr	r3, [pc, #28]	; (14610 <configure_usart+0x6c>)
   145f2:	0018      	movs	r0, r3
   145f4:	4b08      	ldr	r3, [pc, #32]	; (14618 <configure_usart+0x74>)
   145f6:	4798      	blx	r3
}
   145f8:	46c0      	nop			; (mov r8, r8)
   145fa:	46bd      	mov	sp, r7
   145fc:	b010      	add	sp, #64	; 0x40
   145fe:	bd80      	pop	{r7, pc}
   14600:	00014015 	.word	0x00014015
   14604:	00220003 	.word	0x00220003
   14608:	00230003 	.word	0x00230003
   1460c:	42001c00 	.word	0x42001c00
   14610:	20004868 	.word	0x20004868
   14614:	00029195 	.word	0x00029195
   14618:	000140d5 	.word	0x000140d5

0001461c <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1461c:	b580      	push	{r7, lr}
   1461e:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   14620:	490c      	ldr	r1, [pc, #48]	; (14654 <configure_usart_callbacks+0x38>)
   14622:	4b0d      	ldr	r3, [pc, #52]	; (14658 <configure_usart_callbacks+0x3c>)
   14624:	2200      	movs	r2, #0
   14626:	0018      	movs	r0, r3
   14628:	4b0c      	ldr	r3, [pc, #48]	; (1465c <configure_usart_callbacks+0x40>)
   1462a:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   1462c:	490c      	ldr	r1, [pc, #48]	; (14660 <configure_usart_callbacks+0x44>)
   1462e:	4b0a      	ldr	r3, [pc, #40]	; (14658 <configure_usart_callbacks+0x3c>)
   14630:	2201      	movs	r2, #1
   14632:	0018      	movs	r0, r3
   14634:	4b09      	ldr	r3, [pc, #36]	; (1465c <configure_usart_callbacks+0x40>)
   14636:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
   14638:	4b07      	ldr	r3, [pc, #28]	; (14658 <configure_usart_callbacks+0x3c>)
   1463a:	2100      	movs	r1, #0
   1463c:	0018      	movs	r0, r3
   1463e:	4b09      	ldr	r3, [pc, #36]	; (14664 <configure_usart_callbacks+0x48>)
   14640:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
   14642:	4b05      	ldr	r3, [pc, #20]	; (14658 <configure_usart_callbacks+0x3c>)
   14644:	2101      	movs	r1, #1
   14646:	0018      	movs	r0, r3
   14648:	4b06      	ldr	r3, [pc, #24]	; (14664 <configure_usart_callbacks+0x48>)
   1464a:	4798      	blx	r3
}
   1464c:	46c0      	nop			; (mov r8, r8)
   1464e:	46bd      	mov	sp, r7
   14650:	bd80      	pop	{r7, pc}
   14652:	46c0      	nop			; (mov r8, r8)
   14654:	00014155 	.word	0x00014155
   14658:	20004868 	.word	0x20004868
   1465c:	00029549 	.word	0x00029549
   14660:	00014195 	.word	0x00014195
   14664:	0001411d 	.word	0x0001411d

00014668 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14668:	b590      	push	{r4, r7, lr}
   1466a:	b083      	sub	sp, #12
   1466c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1466e:	2300      	movs	r3, #0
   14670:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   14672:	4b09      	ldr	r3, [pc, #36]	; (14698 <DistanceSensorFreeMutex+0x30>)
   14674:	6818      	ldr	r0, [r3, #0]
   14676:	2300      	movs	r3, #0
   14678:	2200      	movs	r2, #0
   1467a:	2100      	movs	r1, #0
   1467c:	4c07      	ldr	r4, [pc, #28]	; (1469c <DistanceSensorFreeMutex+0x34>)
   1467e:	47a0      	blx	r4
   14680:	0003      	movs	r3, r0
   14682:	2b01      	cmp	r3, #1
   14684:	d002      	beq.n	1468c <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14686:	2314      	movs	r3, #20
   14688:	425b      	negs	r3, r3
   1468a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1468c:	687b      	ldr	r3, [r7, #4]
}
   1468e:	0018      	movs	r0, r3
   14690:	46bd      	mov	sp, r7
   14692:	b003      	add	sp, #12
   14694:	bd90      	pop	{r4, r7, pc}
   14696:	46c0      	nop			; (mov r8, r8)
   14698:	20004858 	.word	0x20004858
   1469c:	0001ae3d 	.word	0x0001ae3d

000146a0 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   146a0:	b580      	push	{r7, lr}
   146a2:	b084      	sub	sp, #16
   146a4:	af00      	add	r7, sp, #0
   146a6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   146a8:	2300      	movs	r3, #0
   146aa:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   146ac:	4b08      	ldr	r3, [pc, #32]	; (146d0 <DistanceSensorGetMutex+0x30>)
   146ae:	681b      	ldr	r3, [r3, #0]
   146b0:	687a      	ldr	r2, [r7, #4]
   146b2:	0011      	movs	r1, r2
   146b4:	0018      	movs	r0, r3
   146b6:	4b07      	ldr	r3, [pc, #28]	; (146d4 <DistanceSensorGetMutex+0x34>)
   146b8:	4798      	blx	r3
   146ba:	0003      	movs	r3, r0
   146bc:	2b01      	cmp	r3, #1
   146be:	d002      	beq.n	146c6 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   146c0:	231d      	movs	r3, #29
   146c2:	425b      	negs	r3, r3
   146c4:	60fb      	str	r3, [r7, #12]
    }
    return error;
   146c6:	68fb      	ldr	r3, [r7, #12]
   146c8:	0018      	movs	r0, r3
   146ca:	46bd      	mov	sp, r7
   146cc:	b004      	add	sp, #16
   146ce:	bd80      	pop	{r7, pc}
   146d0:	20004858 	.word	0x20004858
   146d4:	0001bb4d 	.word	0x0001bb4d

000146d8 <system_interrupt_enable>:
{
   146d8:	b580      	push	{r7, lr}
   146da:	b082      	sub	sp, #8
   146dc:	af00      	add	r7, sp, #0
   146de:	0002      	movs	r2, r0
   146e0:	1dfb      	adds	r3, r7, #7
   146e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   146e4:	4b06      	ldr	r3, [pc, #24]	; (14700 <system_interrupt_enable+0x28>)
   146e6:	1dfa      	adds	r2, r7, #7
   146e8:	7812      	ldrb	r2, [r2, #0]
   146ea:	0011      	movs	r1, r2
   146ec:	221f      	movs	r2, #31
   146ee:	400a      	ands	r2, r1
   146f0:	2101      	movs	r1, #1
   146f2:	4091      	lsls	r1, r2
   146f4:	000a      	movs	r2, r1
   146f6:	601a      	str	r2, [r3, #0]
}
   146f8:	46c0      	nop			; (mov r8, r8)
   146fa:	46bd      	mov	sp, r7
   146fc:	b002      	add	sp, #8
   146fe:	bd80      	pop	{r7, pc}
   14700:	e000e100 	.word	0xe000e100

00014704 <i2c_master_is_syncing>:
{
   14704:	b580      	push	{r7, lr}
   14706:	b084      	sub	sp, #16
   14708:	af00      	add	r7, sp, #0
   1470a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1470c:	687b      	ldr	r3, [r7, #4]
   1470e:	681b      	ldr	r3, [r3, #0]
   14710:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14712:	68fb      	ldr	r3, [r7, #12]
   14714:	69db      	ldr	r3, [r3, #28]
   14716:	2207      	movs	r2, #7
   14718:	4013      	ands	r3, r2
   1471a:	1e5a      	subs	r2, r3, #1
   1471c:	4193      	sbcs	r3, r2
   1471e:	b2db      	uxtb	r3, r3
}
   14720:	0018      	movs	r0, r3
   14722:	46bd      	mov	sp, r7
   14724:	b004      	add	sp, #16
   14726:	bd80      	pop	{r7, pc}

00014728 <_i2c_master_wait_for_sync>:
{
   14728:	b580      	push	{r7, lr}
   1472a:	b082      	sub	sp, #8
   1472c:	af00      	add	r7, sp, #0
   1472e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14730:	46c0      	nop			; (mov r8, r8)
   14732:	687b      	ldr	r3, [r7, #4]
   14734:	0018      	movs	r0, r3
   14736:	4b04      	ldr	r3, [pc, #16]	; (14748 <_i2c_master_wait_for_sync+0x20>)
   14738:	4798      	blx	r3
   1473a:	1e03      	subs	r3, r0, #0
   1473c:	d1f9      	bne.n	14732 <_i2c_master_wait_for_sync+0xa>
}
   1473e:	46c0      	nop			; (mov r8, r8)
   14740:	46bd      	mov	sp, r7
   14742:	b002      	add	sp, #8
   14744:	bd80      	pop	{r7, pc}
   14746:	46c0      	nop			; (mov r8, r8)
   14748:	00014705 	.word	0x00014705

0001474c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   1474c:	b580      	push	{r7, lr}
   1474e:	b082      	sub	sp, #8
   14750:	af00      	add	r7, sp, #0
   14752:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14754:	687b      	ldr	r3, [r7, #4]
   14756:	2264      	movs	r2, #100	; 0x64
   14758:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1475a:	687b      	ldr	r3, [r7, #4]
   1475c:	4a1b      	ldr	r2, [pc, #108]	; (147cc <i2c_master_get_config_defaults+0x80>)
   1475e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14760:	687b      	ldr	r3, [r7, #4]
   14762:	2200      	movs	r2, #0
   14764:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14766:	687b      	ldr	r3, [r7, #4]
   14768:	2200      	movs	r2, #0
   1476a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   1476c:	687b      	ldr	r3, [r7, #4]
   1476e:	2200      	movs	r2, #0
   14770:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14772:	687b      	ldr	r3, [r7, #4]
   14774:	2280      	movs	r2, #128	; 0x80
   14776:	0392      	lsls	r2, r2, #14
   14778:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1477a:	687b      	ldr	r3, [r7, #4]
   1477c:	2201      	movs	r2, #1
   1477e:	4252      	negs	r2, r2
   14780:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	2201      	movs	r2, #1
   14786:	4252      	negs	r2, r2
   14788:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	2200      	movs	r2, #0
   1478e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14790:	687b      	ldr	r3, [r7, #4]
   14792:	2200      	movs	r2, #0
   14794:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14796:	687b      	ldr	r3, [r7, #4]
   14798:	2224      	movs	r2, #36	; 0x24
   1479a:	2100      	movs	r1, #0
   1479c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1479e:	687b      	ldr	r3, [r7, #4]
   147a0:	2200      	movs	r2, #0
   147a2:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   147a4:	687b      	ldr	r3, [r7, #4]
   147a6:	222c      	movs	r2, #44	; 0x2c
   147a8:	2100      	movs	r1, #0
   147aa:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   147ac:	687b      	ldr	r3, [r7, #4]
   147ae:	222d      	movs	r2, #45	; 0x2d
   147b0:	2100      	movs	r1, #0
   147b2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   147b4:	687b      	ldr	r3, [r7, #4]
   147b6:	222e      	movs	r2, #46	; 0x2e
   147b8:	2100      	movs	r1, #0
   147ba:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   147bc:	687b      	ldr	r3, [r7, #4]
   147be:	22d7      	movs	r2, #215	; 0xd7
   147c0:	861a      	strh	r2, [r3, #48]	; 0x30
}
   147c2:	46c0      	nop			; (mov r8, r8)
   147c4:	46bd      	mov	sp, r7
   147c6:	b002      	add	sp, #8
   147c8:	bd80      	pop	{r7, pc}
   147ca:	46c0      	nop			; (mov r8, r8)
   147cc:	00000d48 	.word	0x00000d48

000147d0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   147d0:	b580      	push	{r7, lr}
   147d2:	b084      	sub	sp, #16
   147d4:	af00      	add	r7, sp, #0
   147d6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	681b      	ldr	r3, [r3, #0]
   147dc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   147de:	2300      	movs	r3, #0
   147e0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   147e2:	687b      	ldr	r3, [r7, #4]
   147e4:	0018      	movs	r0, r3
   147e6:	4b14      	ldr	r3, [pc, #80]	; (14838 <i2c_master_enable+0x68>)
   147e8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   147ea:	68bb      	ldr	r3, [r7, #8]
   147ec:	681b      	ldr	r3, [r3, #0]
   147ee:	2202      	movs	r2, #2
   147f0:	431a      	orrs	r2, r3
   147f2:	68bb      	ldr	r3, [r7, #8]
   147f4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   147f6:	687b      	ldr	r3, [r7, #4]
   147f8:	681b      	ldr	r3, [r3, #0]
   147fa:	0018      	movs	r0, r3
   147fc:	4b0f      	ldr	r3, [pc, #60]	; (1483c <i2c_master_enable+0x6c>)
   147fe:	4798      	blx	r3
   14800:	0003      	movs	r3, r0
   14802:	0018      	movs	r0, r3
   14804:	4b0e      	ldr	r3, [pc, #56]	; (14840 <i2c_master_enable+0x70>)
   14806:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14808:	e00c      	b.n	14824 <i2c_master_enable+0x54>
		timeout_counter++;
   1480a:	68fb      	ldr	r3, [r7, #12]
   1480c:	3301      	adds	r3, #1
   1480e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14810:	687b      	ldr	r3, [r7, #4]
   14812:	88db      	ldrh	r3, [r3, #6]
   14814:	001a      	movs	r2, r3
   14816:	68fb      	ldr	r3, [r7, #12]
   14818:	429a      	cmp	r2, r3
   1481a:	d803      	bhi.n	14824 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1481c:	68bb      	ldr	r3, [r7, #8]
   1481e:	2210      	movs	r2, #16
   14820:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14822:	e006      	b.n	14832 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14824:	68bb      	ldr	r3, [r7, #8]
   14826:	8b5b      	ldrh	r3, [r3, #26]
   14828:	b29b      	uxth	r3, r3
   1482a:	001a      	movs	r2, r3
   1482c:	2310      	movs	r3, #16
   1482e:	4013      	ands	r3, r2
   14830:	d0eb      	beq.n	1480a <i2c_master_enable+0x3a>
		}
	}
}
   14832:	46bd      	mov	sp, r7
   14834:	b004      	add	sp, #16
   14836:	bd80      	pop	{r7, pc}
   14838:	00014729 	.word	0x00014729
   1483c:	00027d31 	.word	0x00027d31
   14840:	000146d9 	.word	0x000146d9

00014844 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14844:	b580      	push	{r7, lr}
   14846:	b082      	sub	sp, #8
   14848:	af00      	add	r7, sp, #0
   1484a:	6078      	str	r0, [r7, #4]
   1484c:	000a      	movs	r2, r1
   1484e:	1cfb      	adds	r3, r7, #3
   14850:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14852:	687b      	ldr	r3, [r7, #4]
   14854:	7e5b      	ldrb	r3, [r3, #25]
   14856:	b2db      	uxtb	r3, r3
   14858:	b25a      	sxtb	r2, r3
   1485a:	1cfb      	adds	r3, r7, #3
   1485c:	781b      	ldrb	r3, [r3, #0]
   1485e:	2101      	movs	r1, #1
   14860:	4099      	lsls	r1, r3
   14862:	000b      	movs	r3, r1
   14864:	b25b      	sxtb	r3, r3
   14866:	4313      	orrs	r3, r2
   14868:	b25b      	sxtb	r3, r3
   1486a:	b2da      	uxtb	r2, r3
   1486c:	687b      	ldr	r3, [r7, #4]
   1486e:	765a      	strb	r2, [r3, #25]
}
   14870:	46c0      	nop			; (mov r8, r8)
   14872:	46bd      	mov	sp, r7
   14874:	b002      	add	sp, #8
   14876:	bd80      	pop	{r7, pc}

00014878 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14878:	b590      	push	{r4, r7, lr}
   1487a:	b091      	sub	sp, #68	; 0x44
   1487c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1487e:	2300      	movs	r3, #0
   14880:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14882:	233a      	movs	r3, #58	; 0x3a
   14884:	18fb      	adds	r3, r7, r3
   14886:	2200      	movs	r2, #0
   14888:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1488a:	1d3b      	adds	r3, r7, #4
   1488c:	0018      	movs	r0, r3
   1488e:	4b21      	ldr	r3, [pc, #132]	; (14914 <I2cDriverConfigureSensorBus+0x9c>)
   14890:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14892:	1d3b      	adds	r3, r7, #4
   14894:	4a20      	ldr	r2, [pc, #128]	; (14918 <I2cDriverConfigureSensorBus+0xa0>)
   14896:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14898:	1d3b      	adds	r3, r7, #4
   1489a:	4a20      	ldr	r2, [pc, #128]	; (1491c <I2cDriverConfigureSensorBus+0xa4>)
   1489c:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   1489e:	1d3b      	adds	r3, r7, #4
   148a0:	22fa      	movs	r2, #250	; 0xfa
   148a2:	0092      	lsls	r2, r2, #2
   148a4:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   148a6:	233b      	movs	r3, #59	; 0x3b
   148a8:	18fb      	adds	r3, r7, r3
   148aa:	2203      	movs	r2, #3
   148ac:	701a      	strb	r2, [r3, #0]
   148ae:	e01e      	b.n	148ee <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   148b0:	233a      	movs	r3, #58	; 0x3a
   148b2:	18fc      	adds	r4, r7, r3
   148b4:	1d3a      	adds	r2, r7, #4
   148b6:	491a      	ldr	r1, [pc, #104]	; (14920 <I2cDriverConfigureSensorBus+0xa8>)
   148b8:	4b1a      	ldr	r3, [pc, #104]	; (14924 <I2cDriverConfigureSensorBus+0xac>)
   148ba:	0018      	movs	r0, r3
   148bc:	4b1a      	ldr	r3, [pc, #104]	; (14928 <I2cDriverConfigureSensorBus+0xb0>)
   148be:	4798      	blx	r3
   148c0:	0003      	movs	r3, r0
   148c2:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   148c4:	233a      	movs	r3, #58	; 0x3a
   148c6:	18fb      	adds	r3, r7, r3
   148c8:	781b      	ldrb	r3, [r3, #0]
   148ca:	2b00      	cmp	r3, #0
   148cc:	d104      	bne.n	148d8 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   148ce:	233a      	movs	r3, #58	; 0x3a
   148d0:	18fb      	adds	r3, r7, r3
   148d2:	781b      	ldrb	r3, [r3, #0]
   148d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   148d6:	e00f      	b.n	148f8 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   148d8:	4b12      	ldr	r3, [pc, #72]	; (14924 <I2cDriverConfigureSensorBus+0xac>)
   148da:	0018      	movs	r0, r3
   148dc:	4b13      	ldr	r3, [pc, #76]	; (1492c <I2cDriverConfigureSensorBus+0xb4>)
   148de:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   148e0:	233b      	movs	r3, #59	; 0x3b
   148e2:	18fb      	adds	r3, r7, r3
   148e4:	781a      	ldrb	r2, [r3, #0]
   148e6:	233b      	movs	r3, #59	; 0x3b
   148e8:	18fb      	adds	r3, r7, r3
   148ea:	3a01      	subs	r2, #1
   148ec:	701a      	strb	r2, [r3, #0]
   148ee:	233b      	movs	r3, #59	; 0x3b
   148f0:	18fb      	adds	r3, r7, r3
   148f2:	781b      	ldrb	r3, [r3, #0]
   148f4:	2b00      	cmp	r3, #0
   148f6:	d1db      	bne.n	148b0 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   148f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   148fa:	2b00      	cmp	r3, #0
   148fc:	d104      	bne.n	14908 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   148fe:	4b09      	ldr	r3, [pc, #36]	; (14924 <I2cDriverConfigureSensorBus+0xac>)
   14900:	0018      	movs	r0, r3
   14902:	4b0b      	ldr	r3, [pc, #44]	; (14930 <I2cDriverConfigureSensorBus+0xb8>)
   14904:	4798      	blx	r3
   14906:	e000      	b.n	1490a <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14908:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1490c:	0018      	movs	r0, r3
   1490e:	46bd      	mov	sp, r7
   14910:	b011      	add	sp, #68	; 0x44
   14912:	bd90      	pop	{r4, r7, pc}
   14914:	0001474d 	.word	0x0001474d
   14918:	00080002 	.word	0x00080002
   1491c:	00090002 	.word	0x00090002
   14920:	42000800 	.word	0x42000800
   14924:	200049a4 	.word	0x200049a4
   14928:	00018235 	.word	0x00018235
   1492c:	00018369 	.word	0x00018369
   14930:	000147d1 	.word	0x000147d1

00014934 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14934:	b580      	push	{r7, lr}
   14936:	b084      	sub	sp, #16
   14938:	af00      	add	r7, sp, #0
   1493a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1493c:	4b0e      	ldr	r3, [pc, #56]	; (14978 <I2cSensorsTxComplete+0x44>)
   1493e:	2200      	movs	r2, #0
   14940:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14942:	4b0d      	ldr	r3, [pc, #52]	; (14978 <I2cSensorsTxComplete+0x44>)
   14944:	2201      	movs	r2, #1
   14946:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14948:	2300      	movs	r3, #0
   1494a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1494c:	4b0b      	ldr	r3, [pc, #44]	; (1497c <I2cSensorsTxComplete+0x48>)
   1494e:	681b      	ldr	r3, [r3, #0]
   14950:	220c      	movs	r2, #12
   14952:	18ba      	adds	r2, r7, r2
   14954:	0011      	movs	r1, r2
   14956:	0018      	movs	r0, r3
   14958:	4b09      	ldr	r3, [pc, #36]	; (14980 <I2cSensorsTxComplete+0x4c>)
   1495a:	4798      	blx	r3
    sensorTransmitError = false;
   1495c:	4b09      	ldr	r3, [pc, #36]	; (14984 <I2cSensorsTxComplete+0x50>)
   1495e:	2200      	movs	r2, #0
   14960:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14962:	68fb      	ldr	r3, [r7, #12]
   14964:	2b00      	cmp	r3, #0
   14966:	d003      	beq.n	14970 <I2cSensorsTxComplete+0x3c>
   14968:	4b07      	ldr	r3, [pc, #28]	; (14988 <I2cSensorsTxComplete+0x54>)
   1496a:	2280      	movs	r2, #128	; 0x80
   1496c:	0552      	lsls	r2, r2, #21
   1496e:	601a      	str	r2, [r3, #0]
}
   14970:	46c0      	nop			; (mov r8, r8)
   14972:	46bd      	mov	sp, r7
   14974:	b004      	add	sp, #16
   14976:	bd80      	pop	{r7, pc}
   14978:	2000061c 	.word	0x2000061c
   1497c:	200049cc 	.word	0x200049cc
   14980:	0001b4c5 	.word	0x0001b4c5
   14984:	20000618 	.word	0x20000618
   14988:	e000ed04 	.word	0xe000ed04

0001498c <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   1498c:	b580      	push	{r7, lr}
   1498e:	b084      	sub	sp, #16
   14990:	af00      	add	r7, sp, #0
   14992:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14994:	4b0e      	ldr	r3, [pc, #56]	; (149d0 <I2cSensorsRxComplete+0x44>)
   14996:	2200      	movs	r2, #0
   14998:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1499a:	4b0d      	ldr	r3, [pc, #52]	; (149d0 <I2cSensorsRxComplete+0x44>)
   1499c:	2201      	movs	r2, #1
   1499e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   149a0:	2300      	movs	r3, #0
   149a2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   149a4:	4b0b      	ldr	r3, [pc, #44]	; (149d4 <I2cSensorsRxComplete+0x48>)
   149a6:	681b      	ldr	r3, [r3, #0]
   149a8:	220c      	movs	r2, #12
   149aa:	18ba      	adds	r2, r7, r2
   149ac:	0011      	movs	r1, r2
   149ae:	0018      	movs	r0, r3
   149b0:	4b09      	ldr	r3, [pc, #36]	; (149d8 <I2cSensorsRxComplete+0x4c>)
   149b2:	4798      	blx	r3
    sensorTransmitError = false;
   149b4:	4b09      	ldr	r3, [pc, #36]	; (149dc <I2cSensorsRxComplete+0x50>)
   149b6:	2200      	movs	r2, #0
   149b8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   149ba:	68fb      	ldr	r3, [r7, #12]
   149bc:	2b00      	cmp	r3, #0
   149be:	d003      	beq.n	149c8 <I2cSensorsRxComplete+0x3c>
   149c0:	4b07      	ldr	r3, [pc, #28]	; (149e0 <I2cSensorsRxComplete+0x54>)
   149c2:	2280      	movs	r2, #128	; 0x80
   149c4:	0552      	lsls	r2, r2, #21
   149c6:	601a      	str	r2, [r3, #0]
}
   149c8:	46c0      	nop			; (mov r8, r8)
   149ca:	46bd      	mov	sp, r7
   149cc:	b004      	add	sp, #16
   149ce:	bd80      	pop	{r7, pc}
   149d0:	2000061c 	.word	0x2000061c
   149d4:	200049cc 	.word	0x200049cc
   149d8:	0001b4c5 	.word	0x0001b4c5
   149dc:	20000618 	.word	0x20000618
   149e0:	e000ed04 	.word	0xe000ed04

000149e4 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   149e4:	b580      	push	{r7, lr}
   149e6:	b084      	sub	sp, #16
   149e8:	af00      	add	r7, sp, #0
   149ea:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   149ec:	4b0e      	ldr	r3, [pc, #56]	; (14a28 <I2cSensorsError+0x44>)
   149ee:	2200      	movs	r2, #0
   149f0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   149f2:	4b0d      	ldr	r3, [pc, #52]	; (14a28 <I2cSensorsError+0x44>)
   149f4:	2201      	movs	r2, #1
   149f6:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   149f8:	2300      	movs	r3, #0
   149fa:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   149fc:	4b0b      	ldr	r3, [pc, #44]	; (14a2c <I2cSensorsError+0x48>)
   149fe:	681b      	ldr	r3, [r3, #0]
   14a00:	220c      	movs	r2, #12
   14a02:	18ba      	adds	r2, r7, r2
   14a04:	0011      	movs	r1, r2
   14a06:	0018      	movs	r0, r3
   14a08:	4b09      	ldr	r3, [pc, #36]	; (14a30 <I2cSensorsError+0x4c>)
   14a0a:	4798      	blx	r3
    sensorTransmitError = true;
   14a0c:	4b09      	ldr	r3, [pc, #36]	; (14a34 <I2cSensorsError+0x50>)
   14a0e:	2201      	movs	r2, #1
   14a10:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14a12:	68fb      	ldr	r3, [r7, #12]
   14a14:	2b00      	cmp	r3, #0
   14a16:	d003      	beq.n	14a20 <I2cSensorsError+0x3c>
   14a18:	4b07      	ldr	r3, [pc, #28]	; (14a38 <I2cSensorsError+0x54>)
   14a1a:	2280      	movs	r2, #128	; 0x80
   14a1c:	0552      	lsls	r2, r2, #21
   14a1e:	601a      	str	r2, [r3, #0]
}
   14a20:	46c0      	nop			; (mov r8, r8)
   14a22:	46bd      	mov	sp, r7
   14a24:	b004      	add	sp, #16
   14a26:	bd80      	pop	{r7, pc}
   14a28:	2000061c 	.word	0x2000061c
   14a2c:	200049cc 	.word	0x200049cc
   14a30:	0001b4c5 	.word	0x0001b4c5
   14a34:	20000618 	.word	0x20000618
   14a38:	e000ed04 	.word	0xe000ed04

00014a3c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14a3c:	b580      	push	{r7, lr}
   14a3e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14a40:	4911      	ldr	r1, [pc, #68]	; (14a88 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14a42:	4b12      	ldr	r3, [pc, #72]	; (14a8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14a44:	2200      	movs	r2, #0
   14a46:	0018      	movs	r0, r3
   14a48:	4b11      	ldr	r3, [pc, #68]	; (14a90 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14a4a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14a4c:	4b0f      	ldr	r3, [pc, #60]	; (14a8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14a4e:	2100      	movs	r1, #0
   14a50:	0018      	movs	r0, r3
   14a52:	4b10      	ldr	r3, [pc, #64]	; (14a94 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14a54:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14a56:	4910      	ldr	r1, [pc, #64]	; (14a98 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14a58:	4b0c      	ldr	r3, [pc, #48]	; (14a8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14a5a:	2201      	movs	r2, #1
   14a5c:	0018      	movs	r0, r3
   14a5e:	4b0c      	ldr	r3, [pc, #48]	; (14a90 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14a60:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14a62:	4b0a      	ldr	r3, [pc, #40]	; (14a8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14a64:	2101      	movs	r1, #1
   14a66:	0018      	movs	r0, r3
   14a68:	4b0a      	ldr	r3, [pc, #40]	; (14a94 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14a6a:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14a6c:	490b      	ldr	r1, [pc, #44]	; (14a9c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14a6e:	4b07      	ldr	r3, [pc, #28]	; (14a8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14a70:	2202      	movs	r2, #2
   14a72:	0018      	movs	r0, r3
   14a74:	4b06      	ldr	r3, [pc, #24]	; (14a90 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14a76:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14a78:	4b04      	ldr	r3, [pc, #16]	; (14a8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14a7a:	2102      	movs	r1, #2
   14a7c:	0018      	movs	r0, r3
   14a7e:	4b05      	ldr	r3, [pc, #20]	; (14a94 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14a80:	4798      	blx	r3
}
   14a82:	46c0      	nop			; (mov r8, r8)
   14a84:	46bd      	mov	sp, r7
   14a86:	bd80      	pop	{r7, pc}
   14a88:	00014935 	.word	0x00014935
   14a8c:	200049a4 	.word	0x200049a4
   14a90:	000132b1 	.word	0x000132b1
   14a94:	00014845 	.word	0x00014845
   14a98:	0001498d 	.word	0x0001498d
   14a9c:	000149e5 	.word	0x000149e5

00014aa0 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14aa0:	b580      	push	{r7, lr}
   14aa2:	b082      	sub	sp, #8
   14aa4:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14aa6:	2300      	movs	r3, #0
   14aa8:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14aaa:	4b14      	ldr	r3, [pc, #80]	; (14afc <I2cInitializeDriver+0x5c>)
   14aac:	4798      	blx	r3
   14aae:	0003      	movs	r3, r0
   14ab0:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14ab2:	687b      	ldr	r3, [r7, #4]
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	d11a      	bne.n	14aee <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14ab8:	4b11      	ldr	r3, [pc, #68]	; (14b00 <I2cInitializeDriver+0x60>)
   14aba:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14abc:	2001      	movs	r0, #1
   14abe:	4b11      	ldr	r3, [pc, #68]	; (14b04 <I2cInitializeDriver+0x64>)
   14ac0:	4798      	blx	r3
   14ac2:	0002      	movs	r2, r0
   14ac4:	4b10      	ldr	r3, [pc, #64]	; (14b08 <I2cInitializeDriver+0x68>)
   14ac6:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14ac8:	2203      	movs	r2, #3
   14aca:	2100      	movs	r1, #0
   14acc:	2001      	movs	r0, #1
   14ace:	4b0f      	ldr	r3, [pc, #60]	; (14b0c <I2cInitializeDriver+0x6c>)
   14ad0:	4798      	blx	r3
   14ad2:	0002      	movs	r2, r0
   14ad4:	4b0e      	ldr	r3, [pc, #56]	; (14b10 <I2cInitializeDriver+0x70>)
   14ad6:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14ad8:	4b0b      	ldr	r3, [pc, #44]	; (14b08 <I2cInitializeDriver+0x68>)
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	2b00      	cmp	r3, #0
   14ade:	d003      	beq.n	14ae8 <I2cInitializeDriver+0x48>
   14ae0:	4b0b      	ldr	r3, [pc, #44]	; (14b10 <I2cInitializeDriver+0x70>)
   14ae2:	681b      	ldr	r3, [r3, #0]
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d103      	bne.n	14af0 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14ae8:	2306      	movs	r3, #6
   14aea:	607b      	str	r3, [r7, #4]
        goto exit;
   14aec:	e000      	b.n	14af0 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14aee:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14af0:	687b      	ldr	r3, [r7, #4]
}
   14af2:	0018      	movs	r0, r3
   14af4:	46bd      	mov	sp, r7
   14af6:	b002      	add	sp, #8
   14af8:	bd80      	pop	{r7, pc}
   14afa:	46c0      	nop			; (mov r8, r8)
   14afc:	00014879 	.word	0x00014879
   14b00:	00014a3d 	.word	0x00014a3d
   14b04:	0001adfd 	.word	0x0001adfd
   14b08:	200049a0 	.word	0x200049a0
   14b0c:	0001ab95 	.word	0x0001ab95
   14b10:	200049cc 	.word	0x200049cc

00014b14 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14b14:	b590      	push	{r4, r7, lr}
   14b16:	b085      	sub	sp, #20
   14b18:	af00      	add	r7, sp, #0
   14b1a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14b1c:	2300      	movs	r3, #0
   14b1e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14b20:	687b      	ldr	r3, [r7, #4]
   14b22:	2b00      	cmp	r3, #0
   14b24:	d003      	beq.n	14b2e <I2cWriteData+0x1a>
   14b26:	687b      	ldr	r3, [r7, #4]
   14b28:	685b      	ldr	r3, [r3, #4]
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	d103      	bne.n	14b36 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14b2e:	2308      	movs	r3, #8
   14b30:	425b      	negs	r3, r3
   14b32:	60fb      	str	r3, [r7, #12]
        goto exit;
   14b34:	e01f      	b.n	14b76 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14b36:	687b      	ldr	r3, [r7, #4]
   14b38:	781b      	ldrb	r3, [r3, #0]
   14b3a:	b29a      	uxth	r2, r3
   14b3c:	4b10      	ldr	r3, [pc, #64]	; (14b80 <I2cWriteData+0x6c>)
   14b3e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14b40:	687b      	ldr	r3, [r7, #4]
   14b42:	685a      	ldr	r2, [r3, #4]
   14b44:	4b0e      	ldr	r3, [pc, #56]	; (14b80 <I2cWriteData+0x6c>)
   14b46:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14b48:	687b      	ldr	r3, [r7, #4]
   14b4a:	89da      	ldrh	r2, [r3, #14]
   14b4c:	4b0c      	ldr	r3, [pc, #48]	; (14b80 <I2cWriteData+0x6c>)
   14b4e:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14b50:	230b      	movs	r3, #11
   14b52:	18fc      	adds	r4, r7, r3
   14b54:	4a0a      	ldr	r2, [pc, #40]	; (14b80 <I2cWriteData+0x6c>)
   14b56:	4b0b      	ldr	r3, [pc, #44]	; (14b84 <I2cWriteData+0x70>)
   14b58:	0011      	movs	r1, r2
   14b5a:	0018      	movs	r0, r3
   14b5c:	4b0a      	ldr	r3, [pc, #40]	; (14b88 <I2cWriteData+0x74>)
   14b5e:	4798      	blx	r3
   14b60:	0003      	movs	r3, r0
   14b62:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14b64:	230b      	movs	r3, #11
   14b66:	18fb      	adds	r3, r7, r3
   14b68:	781b      	ldrb	r3, [r3, #0]
   14b6a:	2b00      	cmp	r3, #0
   14b6c:	d003      	beq.n	14b76 <I2cWriteData+0x62>
        error = ERROR_IO;
   14b6e:	2306      	movs	r3, #6
   14b70:	425b      	negs	r3, r3
   14b72:	60fb      	str	r3, [r7, #12]
        goto exit;
   14b74:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14b76:	68fb      	ldr	r3, [r7, #12]
}
   14b78:	0018      	movs	r0, r3
   14b7a:	46bd      	mov	sp, r7
   14b7c:	b005      	add	sp, #20
   14b7e:	bd90      	pop	{r4, r7, pc}
   14b80:	200049d0 	.word	0x200049d0
   14b84:	200049a4 	.word	0x200049a4
   14b88:	00013535 	.word	0x00013535

00014b8c <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14b8c:	b590      	push	{r4, r7, lr}
   14b8e:	b085      	sub	sp, #20
   14b90:	af00      	add	r7, sp, #0
   14b92:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14b94:	2300      	movs	r3, #0
   14b96:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14b98:	687b      	ldr	r3, [r7, #4]
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d003      	beq.n	14ba6 <I2cReadData+0x1a>
   14b9e:	687b      	ldr	r3, [r7, #4]
   14ba0:	685b      	ldr	r3, [r3, #4]
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	d103      	bne.n	14bae <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14ba6:	2308      	movs	r3, #8
   14ba8:	425b      	negs	r3, r3
   14baa:	60fb      	str	r3, [r7, #12]
        goto exit;
   14bac:	e01f      	b.n	14bee <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14bae:	687b      	ldr	r3, [r7, #4]
   14bb0:	781b      	ldrb	r3, [r3, #0]
   14bb2:	b29a      	uxth	r2, r3
   14bb4:	4b10      	ldr	r3, [pc, #64]	; (14bf8 <I2cReadData+0x6c>)
   14bb6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14bb8:	687b      	ldr	r3, [r7, #4]
   14bba:	689a      	ldr	r2, [r3, #8]
   14bbc:	4b0e      	ldr	r3, [pc, #56]	; (14bf8 <I2cReadData+0x6c>)
   14bbe:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14bc0:	687b      	ldr	r3, [r7, #4]
   14bc2:	899a      	ldrh	r2, [r3, #12]
   14bc4:	4b0c      	ldr	r3, [pc, #48]	; (14bf8 <I2cReadData+0x6c>)
   14bc6:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14bc8:	230b      	movs	r3, #11
   14bca:	18fc      	adds	r4, r7, r3
   14bcc:	4a0a      	ldr	r2, [pc, #40]	; (14bf8 <I2cReadData+0x6c>)
   14bce:	4b0b      	ldr	r3, [pc, #44]	; (14bfc <I2cReadData+0x70>)
   14bd0:	0011      	movs	r1, r2
   14bd2:	0018      	movs	r0, r3
   14bd4:	4b0a      	ldr	r3, [pc, #40]	; (14c00 <I2cReadData+0x74>)
   14bd6:	4798      	blx	r3
   14bd8:	0003      	movs	r3, r0
   14bda:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14bdc:	230b      	movs	r3, #11
   14bde:	18fb      	adds	r3, r7, r3
   14be0:	781b      	ldrb	r3, [r3, #0]
   14be2:	2b00      	cmp	r3, #0
   14be4:	d003      	beq.n	14bee <I2cReadData+0x62>
        error = ERROR_IO;
   14be6:	2306      	movs	r3, #6
   14be8:	425b      	negs	r3, r3
   14bea:	60fb      	str	r3, [r7, #12]
        goto exit;
   14bec:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14bee:	68fb      	ldr	r3, [r7, #12]
}
   14bf0:	0018      	movs	r0, r3
   14bf2:	46bd      	mov	sp, r7
   14bf4:	b005      	add	sp, #20
   14bf6:	bd90      	pop	{r4, r7, pc}
   14bf8:	200049d0 	.word	0x200049d0
   14bfc:	200049a4 	.word	0x200049a4
   14c00:	00013451 	.word	0x00013451

00014c04 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14c04:	b590      	push	{r4, r7, lr}
   14c06:	b083      	sub	sp, #12
   14c08:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14c0a:	2300      	movs	r3, #0
   14c0c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14c0e:	4b09      	ldr	r3, [pc, #36]	; (14c34 <I2cFreeMutex+0x30>)
   14c10:	6818      	ldr	r0, [r3, #0]
   14c12:	2300      	movs	r3, #0
   14c14:	2200      	movs	r2, #0
   14c16:	2100      	movs	r1, #0
   14c18:	4c07      	ldr	r4, [pc, #28]	; (14c38 <I2cFreeMutex+0x34>)
   14c1a:	47a0      	blx	r4
   14c1c:	0003      	movs	r3, r0
   14c1e:	2b01      	cmp	r3, #1
   14c20:	d002      	beq.n	14c28 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14c22:	2314      	movs	r3, #20
   14c24:	425b      	negs	r3, r3
   14c26:	607b      	str	r3, [r7, #4]
    }
    return error;
   14c28:	687b      	ldr	r3, [r7, #4]
}
   14c2a:	0018      	movs	r0, r3
   14c2c:	46bd      	mov	sp, r7
   14c2e:	b003      	add	sp, #12
   14c30:	bd90      	pop	{r4, r7, pc}
   14c32:	46c0      	nop			; (mov r8, r8)
   14c34:	200049a0 	.word	0x200049a0
   14c38:	0001ae3d 	.word	0x0001ae3d

00014c3c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b084      	sub	sp, #16
   14c40:	af00      	add	r7, sp, #0
   14c42:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14c44:	2300      	movs	r3, #0
   14c46:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14c48:	4b08      	ldr	r3, [pc, #32]	; (14c6c <I2cGetMutex+0x30>)
   14c4a:	681b      	ldr	r3, [r3, #0]
   14c4c:	687a      	ldr	r2, [r7, #4]
   14c4e:	0011      	movs	r1, r2
   14c50:	0018      	movs	r0, r3
   14c52:	4b07      	ldr	r3, [pc, #28]	; (14c70 <I2cGetMutex+0x34>)
   14c54:	4798      	blx	r3
   14c56:	0003      	movs	r3, r0
   14c58:	2b01      	cmp	r3, #1
   14c5a:	d002      	beq.n	14c62 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14c5c:	231d      	movs	r3, #29
   14c5e:	425b      	negs	r3, r3
   14c60:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14c62:	68fb      	ldr	r3, [r7, #12]
}
   14c64:	0018      	movs	r0, r3
   14c66:	46bd      	mov	sp, r7
   14c68:	b004      	add	sp, #16
   14c6a:	bd80      	pop	{r7, pc}
   14c6c:	200049a0 	.word	0x200049a0
   14c70:	0001bb4d 	.word	0x0001bb4d

00014c74 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14c74:	b580      	push	{r7, lr}
   14c76:	b084      	sub	sp, #16
   14c78:	af00      	add	r7, sp, #0
   14c7a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14c7c:	2300      	movs	r3, #0
   14c7e:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14c80:	4b04      	ldr	r3, [pc, #16]	; (14c94 <I2cGetSemaphoreHandle+0x20>)
   14c82:	681a      	ldr	r2, [r3, #0]
   14c84:	687b      	ldr	r3, [r7, #4]
   14c86:	601a      	str	r2, [r3, #0]
    return error;
   14c88:	68fb      	ldr	r3, [r7, #12]
}
   14c8a:	0018      	movs	r0, r3
   14c8c:	46bd      	mov	sp, r7
   14c8e:	b004      	add	sp, #16
   14c90:	bd80      	pop	{r7, pc}
   14c92:	46c0      	nop			; (mov r8, r8)
   14c94:	200049cc 	.word	0x200049cc

00014c98 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14c98:	b580      	push	{r7, lr}
   14c9a:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14c9c:	4b02      	ldr	r3, [pc, #8]	; (14ca8 <I2cGetTaskErrorStatus+0x10>)
   14c9e:	781b      	ldrb	r3, [r3, #0]
}
   14ca0:	0018      	movs	r0, r3
   14ca2:	46bd      	mov	sp, r7
   14ca4:	bd80      	pop	{r7, pc}
   14ca6:	46c0      	nop			; (mov r8, r8)
   14ca8:	20000618 	.word	0x20000618

00014cac <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14cac:	b580      	push	{r7, lr}
   14cae:	b082      	sub	sp, #8
   14cb0:	af00      	add	r7, sp, #0
   14cb2:	0002      	movs	r2, r0
   14cb4:	1dfb      	adds	r3, r7, #7
   14cb6:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14cb8:	4b03      	ldr	r3, [pc, #12]	; (14cc8 <I2cSetTaskErrorStatus+0x1c>)
   14cba:	1dfa      	adds	r2, r7, #7
   14cbc:	7812      	ldrb	r2, [r2, #0]
   14cbe:	701a      	strb	r2, [r3, #0]
}
   14cc0:	46c0      	nop			; (mov r8, r8)
   14cc2:	46bd      	mov	sp, r7
   14cc4:	b002      	add	sp, #8
   14cc6:	bd80      	pop	{r7, pc}
   14cc8:	20000618 	.word	0x20000618

00014ccc <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14ccc:	b580      	push	{r7, lr}
   14cce:	b084      	sub	sp, #16
   14cd0:	af00      	add	r7, sp, #0
   14cd2:	6078      	str	r0, [r7, #4]
   14cd4:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14cd6:	2300      	movs	r3, #0
   14cd8:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14cda:	2300      	movs	r3, #0
   14cdc:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14cde:	2396      	movs	r3, #150	; 0x96
   14ce0:	005b      	lsls	r3, r3, #1
   14ce2:	0018      	movs	r0, r3
   14ce4:	4b28      	ldr	r3, [pc, #160]	; (14d88 <I2cWriteDataWait+0xbc>)
   14ce6:	4798      	blx	r3
   14ce8:	0003      	movs	r3, r0
   14cea:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14cec:	68fb      	ldr	r3, [r7, #12]
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d138      	bne.n	14d64 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14cf2:	2308      	movs	r3, #8
   14cf4:	18fb      	adds	r3, r7, r3
   14cf6:	0018      	movs	r0, r3
   14cf8:	4b24      	ldr	r3, [pc, #144]	; (14d8c <I2cWriteDataWait+0xc0>)
   14cfa:	4798      	blx	r3
   14cfc:	0003      	movs	r3, r0
   14cfe:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14d00:	68fb      	ldr	r3, [r7, #12]
   14d02:	2b00      	cmp	r3, #0
   14d04:	d130      	bne.n	14d68 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14d06:	687b      	ldr	r3, [r7, #4]
   14d08:	0018      	movs	r0, r3
   14d0a:	4b21      	ldr	r3, [pc, #132]	; (14d90 <I2cWriteDataWait+0xc4>)
   14d0c:	4798      	blx	r3
   14d0e:	0003      	movs	r3, r0
   14d10:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14d12:	68fb      	ldr	r3, [r7, #12]
   14d14:	2b00      	cmp	r3, #0
   14d16:	d12a      	bne.n	14d6e <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14d18:	68bb      	ldr	r3, [r7, #8]
   14d1a:	683a      	ldr	r2, [r7, #0]
   14d1c:	0011      	movs	r1, r2
   14d1e:	0018      	movs	r0, r3
   14d20:	4b1c      	ldr	r3, [pc, #112]	; (14d94 <I2cWriteDataWait+0xc8>)
   14d22:	4798      	blx	r3
   14d24:	0003      	movs	r3, r0
   14d26:	2b01      	cmp	r3, #1
   14d28:	d111      	bne.n	14d4e <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14d2a:	4b1b      	ldr	r3, [pc, #108]	; (14d98 <I2cWriteDataWait+0xcc>)
   14d2c:	4798      	blx	r3
   14d2e:	1e03      	subs	r3, r0, #0
   14d30:	d011      	beq.n	14d56 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14d32:	2000      	movs	r0, #0
   14d34:	4b19      	ldr	r3, [pc, #100]	; (14d9c <I2cWriteDataWait+0xd0>)
   14d36:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14d38:	68fb      	ldr	r3, [r7, #12]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d003      	beq.n	14d46 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14d3e:	2321      	movs	r3, #33	; 0x21
   14d40:	425b      	negs	r3, r3
   14d42:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14d44:	e014      	b.n	14d70 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14d46:	2303      	movs	r3, #3
   14d48:	425b      	negs	r3, r3
   14d4a:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14d4c:	e010      	b.n	14d70 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14d4e:	2303      	movs	r3, #3
   14d50:	425b      	negs	r3, r3
   14d52:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14d54:	e00c      	b.n	14d70 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14d56:	4b12      	ldr	r3, [pc, #72]	; (14da0 <I2cWriteDataWait+0xd4>)
   14d58:	4798      	blx	r3
   14d5a:	0002      	movs	r2, r0
   14d5c:	68fb      	ldr	r3, [r7, #12]
   14d5e:	4313      	orrs	r3, r2
   14d60:	60fb      	str	r3, [r7, #12]
   14d62:	e002      	b.n	14d6a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14d64:	46c0      	nop			; (mov r8, r8)
   14d66:	e000      	b.n	14d6a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14d68:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14d6a:	68fb      	ldr	r3, [r7, #12]
   14d6c:	e007      	b.n	14d7e <I2cWriteDataWait+0xb2>
        goto exitError0;
   14d6e:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14d70:	4b0b      	ldr	r3, [pc, #44]	; (14da0 <I2cWriteDataWait+0xd4>)
   14d72:	4798      	blx	r3
   14d74:	0002      	movs	r2, r0
   14d76:	68fb      	ldr	r3, [r7, #12]
   14d78:	4313      	orrs	r3, r2
   14d7a:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14d7c:	68fb      	ldr	r3, [r7, #12]
}
   14d7e:	0018      	movs	r0, r3
   14d80:	46bd      	mov	sp, r7
   14d82:	b004      	add	sp, #16
   14d84:	bd80      	pop	{r7, pc}
   14d86:	46c0      	nop			; (mov r8, r8)
   14d88:	00014c3d 	.word	0x00014c3d
   14d8c:	00014c75 	.word	0x00014c75
   14d90:	00014b15 	.word	0x00014b15
   14d94:	0001bb4d 	.word	0x0001bb4d
   14d98:	00014c99 	.word	0x00014c99
   14d9c:	00014cad 	.word	0x00014cad
   14da0:	00014c05 	.word	0x00014c05

00014da4 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14da4:	b580      	push	{r7, lr}
   14da6:	b086      	sub	sp, #24
   14da8:	af00      	add	r7, sp, #0
   14daa:	60f8      	str	r0, [r7, #12]
   14dac:	60b9      	str	r1, [r7, #8]
   14dae:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14db0:	2300      	movs	r3, #0
   14db2:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14db4:	2300      	movs	r3, #0
   14db6:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14db8:	2396      	movs	r3, #150	; 0x96
   14dba:	005b      	lsls	r3, r3, #1
   14dbc:	0018      	movs	r0, r3
   14dbe:	4b35      	ldr	r3, [pc, #212]	; (14e94 <I2cReadDataWait+0xf0>)
   14dc0:	4798      	blx	r3
   14dc2:	0003      	movs	r3, r0
   14dc4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14dc6:	697b      	ldr	r3, [r7, #20]
   14dc8:	2b00      	cmp	r3, #0
   14dca:	d155      	bne.n	14e78 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14dcc:	2310      	movs	r3, #16
   14dce:	18fb      	adds	r3, r7, r3
   14dd0:	0018      	movs	r0, r3
   14dd2:	4b31      	ldr	r3, [pc, #196]	; (14e98 <I2cReadDataWait+0xf4>)
   14dd4:	4798      	blx	r3
   14dd6:	0003      	movs	r3, r0
   14dd8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14dda:	697b      	ldr	r3, [r7, #20]
   14ddc:	2b00      	cmp	r3, #0
   14dde:	d14d      	bne.n	14e7c <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14de0:	68fb      	ldr	r3, [r7, #12]
   14de2:	0018      	movs	r0, r3
   14de4:	4b2d      	ldr	r3, [pc, #180]	; (14e9c <I2cReadDataWait+0xf8>)
   14de6:	4798      	blx	r3
   14de8:	0003      	movs	r3, r0
   14dea:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14dec:	697b      	ldr	r3, [r7, #20]
   14dee:	2b00      	cmp	r3, #0
   14df0:	d147      	bne.n	14e82 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14df2:	693b      	ldr	r3, [r7, #16]
   14df4:	687a      	ldr	r2, [r7, #4]
   14df6:	0011      	movs	r1, r2
   14df8:	0018      	movs	r0, r3
   14dfa:	4b29      	ldr	r3, [pc, #164]	; (14ea0 <I2cReadDataWait+0xfc>)
   14dfc:	4798      	blx	r3
   14dfe:	0003      	movs	r3, r0
   14e00:	2b01      	cmp	r3, #1
   14e02:	d118      	bne.n	14e36 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14e04:	4b27      	ldr	r3, [pc, #156]	; (14ea4 <I2cReadDataWait+0x100>)
   14e06:	4798      	blx	r3
   14e08:	1e03      	subs	r3, r0, #0
   14e0a:	d006      	beq.n	14e1a <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14e0c:	2000      	movs	r0, #0
   14e0e:	4b26      	ldr	r3, [pc, #152]	; (14ea8 <I2cReadDataWait+0x104>)
   14e10:	4798      	blx	r3
            error = ERROR_ABORTED;
   14e12:	2303      	movs	r3, #3
   14e14:	425b      	negs	r3, r3
   14e16:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14e18:	e034      	b.n	14e84 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14e1a:	68bb      	ldr	r3, [r7, #8]
   14e1c:	0018      	movs	r0, r3
   14e1e:	4b23      	ldr	r3, [pc, #140]	; (14eac <I2cReadDataWait+0x108>)
   14e20:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14e22:	68fb      	ldr	r3, [r7, #12]
   14e24:	0018      	movs	r0, r3
   14e26:	4b22      	ldr	r3, [pc, #136]	; (14eb0 <I2cReadDataWait+0x10c>)
   14e28:	4798      	blx	r3
   14e2a:	0003      	movs	r3, r0
   14e2c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14e2e:	697b      	ldr	r3, [r7, #20]
   14e30:	2b00      	cmp	r3, #0
   14e32:	d004      	beq.n	14e3e <I2cReadDataWait+0x9a>
        goto exitError0;
   14e34:	e026      	b.n	14e84 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14e36:	2303      	movs	r3, #3
   14e38:	425b      	negs	r3, r3
   14e3a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14e3c:	e022      	b.n	14e84 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14e3e:	693b      	ldr	r3, [r7, #16]
   14e40:	687a      	ldr	r2, [r7, #4]
   14e42:	0011      	movs	r1, r2
   14e44:	0018      	movs	r0, r3
   14e46:	4b16      	ldr	r3, [pc, #88]	; (14ea0 <I2cReadDataWait+0xfc>)
   14e48:	4798      	blx	r3
   14e4a:	0003      	movs	r3, r0
   14e4c:	2b01      	cmp	r3, #1
   14e4e:	d10a      	bne.n	14e66 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14e50:	4b14      	ldr	r3, [pc, #80]	; (14ea4 <I2cReadDataWait+0x100>)
   14e52:	4798      	blx	r3
   14e54:	1e03      	subs	r3, r0, #0
   14e56:	d00a      	beq.n	14e6e <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14e58:	2000      	movs	r0, #0
   14e5a:	4b13      	ldr	r3, [pc, #76]	; (14ea8 <I2cReadDataWait+0x104>)
   14e5c:	4798      	blx	r3
            error = ERROR_ABORTED;
   14e5e:	2303      	movs	r3, #3
   14e60:	425b      	negs	r3, r3
   14e62:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14e64:	e00e      	b.n	14e84 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14e66:	2303      	movs	r3, #3
   14e68:	425b      	negs	r3, r3
   14e6a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14e6c:	e00a      	b.n	14e84 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14e6e:	4b11      	ldr	r3, [pc, #68]	; (14eb4 <I2cReadDataWait+0x110>)
   14e70:	4798      	blx	r3
   14e72:	0003      	movs	r3, r0
   14e74:	617b      	str	r3, [r7, #20]
   14e76:	e002      	b.n	14e7e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14e78:	46c0      	nop			; (mov r8, r8)
   14e7a:	e000      	b.n	14e7e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14e7c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14e7e:	697b      	ldr	r3, [r7, #20]
   14e80:	e003      	b.n	14e8a <I2cReadDataWait+0xe6>
        goto exitError0;
   14e82:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14e84:	4b0b      	ldr	r3, [pc, #44]	; (14eb4 <I2cReadDataWait+0x110>)
   14e86:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14e88:	697b      	ldr	r3, [r7, #20]
}
   14e8a:	0018      	movs	r0, r3
   14e8c:	46bd      	mov	sp, r7
   14e8e:	b006      	add	sp, #24
   14e90:	bd80      	pop	{r7, pc}
   14e92:	46c0      	nop			; (mov r8, r8)
   14e94:	00014c3d 	.word	0x00014c3d
   14e98:	00014c75 	.word	0x00014c75
   14e9c:	00014b15 	.word	0x00014b15
   14ea0:	0001bb4d 	.word	0x0001bb4d
   14ea4:	00014c99 	.word	0x00014c99
   14ea8:	00014cad 	.word	0x00014cad
   14eac:	0001c8a1 	.word	0x0001c8a1
   14eb0:	00014b8d 	.word	0x00014b8d
   14eb4:	00014c05 	.word	0x00014c05

00014eb8 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14eb8:	b5b0      	push	{r4, r5, r7, lr}
   14eba:	b086      	sub	sp, #24
   14ebc:	af00      	add	r7, sp, #0
   14ebe:	60f8      	str	r0, [r7, #12]
   14ec0:	0008      	movs	r0, r1
   14ec2:	607a      	str	r2, [r7, #4]
   14ec4:	0019      	movs	r1, r3
   14ec6:	230b      	movs	r3, #11
   14ec8:	18fb      	adds	r3, r7, r3
   14eca:	1c02      	adds	r2, r0, #0
   14ecc:	701a      	strb	r2, [r3, #0]
   14ece:	2308      	movs	r3, #8
   14ed0:	18fb      	adds	r3, r7, r3
   14ed2:	1c0a      	adds	r2, r1, #0
   14ed4:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14ed6:	68fb      	ldr	r3, [r7, #12]
   14ed8:	685c      	ldr	r4, [r3, #4]
   14eda:	68fb      	ldr	r3, [r7, #12]
   14edc:	6898      	ldr	r0, [r3, #8]
   14ede:	2308      	movs	r3, #8
   14ee0:	18fb      	adds	r3, r7, r3
   14ee2:	881d      	ldrh	r5, [r3, #0]
   14ee4:	687a      	ldr	r2, [r7, #4]
   14ee6:	230b      	movs	r3, #11
   14ee8:	18fb      	adds	r3, r7, r3
   14eea:	7819      	ldrb	r1, [r3, #0]
   14eec:	002b      	movs	r3, r5
   14eee:	47a0      	blx	r4
   14ef0:	0003      	movs	r3, r0
   14ef2:	617b      	str	r3, [r7, #20]

  return ret;
   14ef4:	697b      	ldr	r3, [r7, #20]
}
   14ef6:	0018      	movs	r0, r3
   14ef8:	46bd      	mov	sp, r7
   14efa:	b006      	add	sp, #24
   14efc:	bdb0      	pop	{r4, r5, r7, pc}

00014efe <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14efe:	b5b0      	push	{r4, r5, r7, lr}
   14f00:	b086      	sub	sp, #24
   14f02:	af00      	add	r7, sp, #0
   14f04:	60f8      	str	r0, [r7, #12]
   14f06:	0008      	movs	r0, r1
   14f08:	607a      	str	r2, [r7, #4]
   14f0a:	0019      	movs	r1, r3
   14f0c:	230b      	movs	r3, #11
   14f0e:	18fb      	adds	r3, r7, r3
   14f10:	1c02      	adds	r2, r0, #0
   14f12:	701a      	strb	r2, [r3, #0]
   14f14:	2308      	movs	r3, #8
   14f16:	18fb      	adds	r3, r7, r3
   14f18:	1c0a      	adds	r2, r1, #0
   14f1a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14f1c:	68fb      	ldr	r3, [r7, #12]
   14f1e:	681c      	ldr	r4, [r3, #0]
   14f20:	68fb      	ldr	r3, [r7, #12]
   14f22:	6898      	ldr	r0, [r3, #8]
   14f24:	2308      	movs	r3, #8
   14f26:	18fb      	adds	r3, r7, r3
   14f28:	881d      	ldrh	r5, [r3, #0]
   14f2a:	687a      	ldr	r2, [r7, #4]
   14f2c:	230b      	movs	r3, #11
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	7819      	ldrb	r1, [r3, #0]
   14f32:	002b      	movs	r3, r5
   14f34:	47a0      	blx	r4
   14f36:	0003      	movs	r3, r0
   14f38:	617b      	str	r3, [r7, #20]

  return ret;
   14f3a:	697b      	ldr	r3, [r7, #20]
}
   14f3c:	0018      	movs	r0, r3
   14f3e:	46bd      	mov	sp, r7
   14f40:	b006      	add	sp, #24
   14f42:	bdb0      	pop	{r4, r5, r7, pc}

00014f44 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14f44:	b580      	push	{r7, lr}
   14f46:	b082      	sub	sp, #8
   14f48:	af00      	add	r7, sp, #0
   14f4a:	0002      	movs	r2, r0
   14f4c:	1dbb      	adds	r3, r7, #6
   14f4e:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14f50:	1dbb      	adds	r3, r7, #6
   14f52:	2200      	movs	r2, #0
   14f54:	5e9a      	ldrsh	r2, [r3, r2]
   14f56:	4b06      	ldr	r3, [pc, #24]	; (14f70 <lsm6dso_from_fs2_to_mg+0x2c>)
   14f58:	0010      	movs	r0, r2
   14f5a:	4798      	blx	r3
   14f5c:	1c02      	adds	r2, r0, #0
   14f5e:	4b05      	ldr	r3, [pc, #20]	; (14f74 <lsm6dso_from_fs2_to_mg+0x30>)
   14f60:	4905      	ldr	r1, [pc, #20]	; (14f78 <lsm6dso_from_fs2_to_mg+0x34>)
   14f62:	1c10      	adds	r0, r2, #0
   14f64:	4798      	blx	r3
   14f66:	1c03      	adds	r3, r0, #0
}
   14f68:	1c18      	adds	r0, r3, #0
   14f6a:	46bd      	mov	sp, r7
   14f6c:	b002      	add	sp, #8
   14f6e:	bd80      	pop	{r7, pc}
   14f70:	00033631 	.word	0x00033631
   14f74:	000333b1 	.word	0x000333b1
   14f78:	3d79db23 	.word	0x3d79db23

00014f7c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14f7c:	b590      	push	{r4, r7, lr}
   14f7e:	b085      	sub	sp, #20
   14f80:	af00      	add	r7, sp, #0
   14f82:	6078      	str	r0, [r7, #4]
   14f84:	000a      	movs	r2, r1
   14f86:	1cfb      	adds	r3, r7, #3
   14f88:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14f8a:	2308      	movs	r3, #8
   14f8c:	18fa      	adds	r2, r7, r3
   14f8e:	6878      	ldr	r0, [r7, #4]
   14f90:	2301      	movs	r3, #1
   14f92:	2110      	movs	r1, #16
   14f94:	4c12      	ldr	r4, [pc, #72]	; (14fe0 <lsm6dso_xl_full_scale_set+0x64>)
   14f96:	47a0      	blx	r4
   14f98:	0003      	movs	r3, r0
   14f9a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14f9c:	68fb      	ldr	r3, [r7, #12]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d119      	bne.n	14fd6 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14fa2:	1cfb      	adds	r3, r7, #3
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	2203      	movs	r2, #3
   14fa8:	4013      	ands	r3, r2
   14faa:	b2da      	uxtb	r2, r3
   14fac:	2308      	movs	r3, #8
   14fae:	18fb      	adds	r3, r7, r3
   14fb0:	2103      	movs	r1, #3
   14fb2:	400a      	ands	r2, r1
   14fb4:	0090      	lsls	r0, r2, #2
   14fb6:	781a      	ldrb	r2, [r3, #0]
   14fb8:	210c      	movs	r1, #12
   14fba:	438a      	bics	r2, r1
   14fbc:	1c11      	adds	r1, r2, #0
   14fbe:	1c02      	adds	r2, r0, #0
   14fc0:	430a      	orrs	r2, r1
   14fc2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14fc4:	2308      	movs	r3, #8
   14fc6:	18fa      	adds	r2, r7, r3
   14fc8:	6878      	ldr	r0, [r7, #4]
   14fca:	2301      	movs	r3, #1
   14fcc:	2110      	movs	r1, #16
   14fce:	4c05      	ldr	r4, [pc, #20]	; (14fe4 <lsm6dso_xl_full_scale_set+0x68>)
   14fd0:	47a0      	blx	r4
   14fd2:	0003      	movs	r3, r0
   14fd4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14fd6:	68fb      	ldr	r3, [r7, #12]
}
   14fd8:	0018      	movs	r0, r3
   14fda:	46bd      	mov	sp, r7
   14fdc:	b005      	add	sp, #20
   14fde:	bd90      	pop	{r4, r7, pc}
   14fe0:	00014eb9 	.word	0x00014eb9
   14fe4:	00014eff 	.word	0x00014eff

00014fe8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14fe8:	b590      	push	{r4, r7, lr}
   14fea:	b087      	sub	sp, #28
   14fec:	af00      	add	r7, sp, #0
   14fee:	6078      	str	r0, [r7, #4]
   14ff0:	000a      	movs	r2, r1
   14ff2:	1cfb      	adds	r3, r7, #3
   14ff4:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14ff6:	2317      	movs	r3, #23
   14ff8:	18fb      	adds	r3, r7, r3
   14ffa:	1cfa      	adds	r2, r7, #3
   14ffc:	7812      	ldrb	r2, [r2, #0]
   14ffe:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15000:	230c      	movs	r3, #12
   15002:	18fa      	adds	r2, r7, r3
   15004:	687b      	ldr	r3, [r7, #4]
   15006:	0011      	movs	r1, r2
   15008:	0018      	movs	r0, r3
   1500a:	4ba4      	ldr	r3, [pc, #656]	; (1529c <lsm6dso_xl_data_rate_set+0x2b4>)
   1500c:	4798      	blx	r3
   1500e:	0003      	movs	r3, r0
   15010:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15012:	693b      	ldr	r3, [r7, #16]
   15014:	2b00      	cmp	r3, #0
   15016:	d000      	beq.n	1501a <lsm6dso_xl_data_rate_set+0x32>
   15018:	e113      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1501a:	230c      	movs	r3, #12
   1501c:	18fb      	adds	r3, r7, r3
   1501e:	781b      	ldrb	r3, [r3, #0]
   15020:	07db      	lsls	r3, r3, #31
   15022:	0fdb      	lsrs	r3, r3, #31
   15024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15026:	230c      	movs	r3, #12
   15028:	18fb      	adds	r3, r7, r3
   1502a:	781b      	ldrb	r3, [r3, #0]
   1502c:	079b      	lsls	r3, r3, #30
   1502e:	0fdb      	lsrs	r3, r3, #31
   15030:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15032:	4313      	orrs	r3, r2
   15034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15036:	230c      	movs	r3, #12
   15038:	18fb      	adds	r3, r7, r3
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	075b      	lsls	r3, r3, #29
   1503e:	0fdb      	lsrs	r3, r3, #31
   15040:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15042:	4313      	orrs	r3, r2
   15044:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15046:	230c      	movs	r3, #12
   15048:	18fb      	adds	r3, r7, r3
   1504a:	781b      	ldrb	r3, [r3, #0]
   1504c:	071b      	lsls	r3, r3, #28
   1504e:	0fdb      	lsrs	r3, r3, #31
   15050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15052:	4313      	orrs	r3, r2
   15054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15056:	230c      	movs	r3, #12
   15058:	18fb      	adds	r3, r7, r3
   1505a:	781b      	ldrb	r3, [r3, #0]
   1505c:	06db      	lsls	r3, r3, #27
   1505e:	0fdb      	lsrs	r3, r3, #31
   15060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15062:	4313      	orrs	r3, r2
   15064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15066:	230c      	movs	r3, #12
   15068:	18fb      	adds	r3, r7, r3
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	069b      	lsls	r3, r3, #26
   1506e:	0fdb      	lsrs	r3, r3, #31
   15070:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15072:	4313      	orrs	r3, r2
   15074:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15076:	230c      	movs	r3, #12
   15078:	18fb      	adds	r3, r7, r3
   1507a:	781b      	ldrb	r3, [r3, #0]
   1507c:	065b      	lsls	r3, r3, #25
   1507e:	0fdb      	lsrs	r3, r3, #31
   15080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15082:	4313      	orrs	r3, r2
   15084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15086:	230c      	movs	r3, #12
   15088:	18fb      	adds	r3, r7, r3
   1508a:	781b      	ldrb	r3, [r3, #0]
   1508c:	061b      	lsls	r3, r3, #24
   1508e:	0fdb      	lsrs	r3, r3, #31
   15090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15092:	4313      	orrs	r3, r2
   15094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15096:	230c      	movs	r3, #12
   15098:	18fb      	adds	r3, r7, r3
   1509a:	785b      	ldrb	r3, [r3, #1]
   1509c:	07db      	lsls	r3, r3, #31
   1509e:	0fdb      	lsrs	r3, r3, #31
   150a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   150a2:	4313      	orrs	r3, r2
   150a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   150a6:	230c      	movs	r3, #12
   150a8:	18fb      	adds	r3, r7, r3
   150aa:	785b      	ldrb	r3, [r3, #1]
   150ac:	079b      	lsls	r3, r3, #30
   150ae:	0fdb      	lsrs	r3, r3, #31
   150b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   150b2:	4313      	orrs	r3, r2
   150b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   150b6:	230c      	movs	r3, #12
   150b8:	18fb      	adds	r3, r7, r3
   150ba:	785b      	ldrb	r3, [r3, #1]
   150bc:	075b      	lsls	r3, r3, #29
   150be:	0fdb      	lsrs	r3, r3, #31
   150c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   150c2:	4313      	orrs	r3, r2
   150c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   150c6:	230c      	movs	r3, #12
   150c8:	18fb      	adds	r3, r7, r3
   150ca:	785b      	ldrb	r3, [r3, #1]
   150cc:	071b      	lsls	r3, r3, #28
   150ce:	0fdb      	lsrs	r3, r3, #31
   150d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   150d2:	4313      	orrs	r3, r2
   150d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   150d6:	230c      	movs	r3, #12
   150d8:	18fb      	adds	r3, r7, r3
   150da:	785b      	ldrb	r3, [r3, #1]
   150dc:	06db      	lsls	r3, r3, #27
   150de:	0fdb      	lsrs	r3, r3, #31
   150e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   150e2:	4313      	orrs	r3, r2
   150e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   150e6:	230c      	movs	r3, #12
   150e8:	18fb      	adds	r3, r7, r3
   150ea:	785b      	ldrb	r3, [r3, #1]
   150ec:	069b      	lsls	r3, r3, #26
   150ee:	0fdb      	lsrs	r3, r3, #31
   150f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   150f2:	4313      	orrs	r3, r2
   150f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   150f6:	230c      	movs	r3, #12
   150f8:	18fb      	adds	r3, r7, r3
   150fa:	785b      	ldrb	r3, [r3, #1]
   150fc:	065b      	lsls	r3, r3, #25
   150fe:	0fdb      	lsrs	r3, r3, #31
   15100:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15102:	4313      	orrs	r3, r2
   15104:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15106:	230c      	movs	r3, #12
   15108:	18fb      	adds	r3, r7, r3
   1510a:	785b      	ldrb	r3, [r3, #1]
   1510c:	061b      	lsls	r3, r3, #24
   1510e:	0fdb      	lsrs	r3, r3, #31
   15110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15112:	4313      	orrs	r3, r2
   15114:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15116:	2b01      	cmp	r3, #1
   15118:	d000      	beq.n	1511c <lsm6dso_xl_data_rate_set+0x134>
   1511a:	e092      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   1511c:	230b      	movs	r3, #11
   1511e:	18fa      	adds	r2, r7, r3
   15120:	687b      	ldr	r3, [r7, #4]
   15122:	0011      	movs	r1, r2
   15124:	0018      	movs	r0, r3
   15126:	4b5e      	ldr	r3, [pc, #376]	; (152a0 <lsm6dso_xl_data_rate_set+0x2b8>)
   15128:	4798      	blx	r3
   1512a:	0003      	movs	r3, r0
   1512c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1512e:	693b      	ldr	r3, [r7, #16]
   15130:	2b00      	cmp	r3, #0
   15132:	d000      	beq.n	15136 <lsm6dso_xl_data_rate_set+0x14e>
   15134:	e085      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15136:	230b      	movs	r3, #11
   15138:	18fb      	adds	r3, r7, r3
   1513a:	781b      	ldrb	r3, [r3, #0]
   1513c:	2b01      	cmp	r3, #1
   1513e:	d017      	beq.n	15170 <lsm6dso_xl_data_rate_set+0x188>
   15140:	dc02      	bgt.n	15148 <lsm6dso_xl_data_rate_set+0x160>
   15142:	2b00      	cmp	r3, #0
   15144:	d005      	beq.n	15152 <lsm6dso_xl_data_rate_set+0x16a>
   15146:	e076      	b.n	15236 <lsm6dso_xl_data_rate_set+0x24e>
   15148:	2b02      	cmp	r3, #2
   1514a:	d029      	beq.n	151a0 <lsm6dso_xl_data_rate_set+0x1b8>
   1514c:	2b03      	cmp	r3, #3
   1514e:	d048      	beq.n	151e2 <lsm6dso_xl_data_rate_set+0x1fa>
   15150:	e071      	b.n	15236 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   15152:	1cfb      	adds	r3, r7, #3
   15154:	781b      	ldrb	r3, [r3, #0]
   15156:	2b00      	cmp	r3, #0
   15158:	d104      	bne.n	15164 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   1515a:	2317      	movs	r3, #23
   1515c:	18fb      	adds	r3, r7, r3
   1515e:	2201      	movs	r2, #1
   15160:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15162:	e06e      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15164:	2317      	movs	r3, #23
   15166:	18fb      	adds	r3, r7, r3
   15168:	1cfa      	adds	r2, r7, #3
   1516a:	7812      	ldrb	r2, [r2, #0]
   1516c:	701a      	strb	r2, [r3, #0]
            break;
   1516e:	e068      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15170:	1cfb      	adds	r3, r7, #3
   15172:	781b      	ldrb	r3, [r3, #0]
   15174:	2b00      	cmp	r3, #0
   15176:	d104      	bne.n	15182 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15178:	2317      	movs	r3, #23
   1517a:	18fb      	adds	r3, r7, r3
   1517c:	2202      	movs	r2, #2
   1517e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15180:	e05f      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15182:	1cfb      	adds	r3, r7, #3
   15184:	781b      	ldrb	r3, [r3, #0]
   15186:	2b01      	cmp	r3, #1
   15188:	d104      	bne.n	15194 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   1518a:	2317      	movs	r3, #23
   1518c:	18fb      	adds	r3, r7, r3
   1518e:	2202      	movs	r2, #2
   15190:	701a      	strb	r2, [r3, #0]
            break;
   15192:	e056      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15194:	2317      	movs	r3, #23
   15196:	18fb      	adds	r3, r7, r3
   15198:	1cfa      	adds	r2, r7, #3
   1519a:	7812      	ldrb	r2, [r2, #0]
   1519c:	701a      	strb	r2, [r3, #0]
            break;
   1519e:	e050      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   151a0:	1cfb      	adds	r3, r7, #3
   151a2:	781b      	ldrb	r3, [r3, #0]
   151a4:	2b00      	cmp	r3, #0
   151a6:	d104      	bne.n	151b2 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   151a8:	2317      	movs	r3, #23
   151aa:	18fb      	adds	r3, r7, r3
   151ac:	2203      	movs	r2, #3
   151ae:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   151b0:	e047      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   151b2:	1cfb      	adds	r3, r7, #3
   151b4:	781b      	ldrb	r3, [r3, #0]
   151b6:	2b01      	cmp	r3, #1
   151b8:	d104      	bne.n	151c4 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   151ba:	2317      	movs	r3, #23
   151bc:	18fb      	adds	r3, r7, r3
   151be:	2203      	movs	r2, #3
   151c0:	701a      	strb	r2, [r3, #0]
            break;
   151c2:	e03e      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   151c4:	1cfb      	adds	r3, r7, #3
   151c6:	781b      	ldrb	r3, [r3, #0]
   151c8:	2b02      	cmp	r3, #2
   151ca:	d104      	bne.n	151d6 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   151cc:	2317      	movs	r3, #23
   151ce:	18fb      	adds	r3, r7, r3
   151d0:	2203      	movs	r2, #3
   151d2:	701a      	strb	r2, [r3, #0]
            break;
   151d4:	e035      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   151d6:	2317      	movs	r3, #23
   151d8:	18fb      	adds	r3, r7, r3
   151da:	1cfa      	adds	r2, r7, #3
   151dc:	7812      	ldrb	r2, [r2, #0]
   151de:	701a      	strb	r2, [r3, #0]
            break;
   151e0:	e02f      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   151e2:	1cfb      	adds	r3, r7, #3
   151e4:	781b      	ldrb	r3, [r3, #0]
   151e6:	2b00      	cmp	r3, #0
   151e8:	d104      	bne.n	151f4 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   151ea:	2317      	movs	r3, #23
   151ec:	18fb      	adds	r3, r7, r3
   151ee:	2204      	movs	r2, #4
   151f0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   151f2:	e026      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   151f4:	1cfb      	adds	r3, r7, #3
   151f6:	781b      	ldrb	r3, [r3, #0]
   151f8:	2b01      	cmp	r3, #1
   151fa:	d104      	bne.n	15206 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   151fc:	2317      	movs	r3, #23
   151fe:	18fb      	adds	r3, r7, r3
   15200:	2204      	movs	r2, #4
   15202:	701a      	strb	r2, [r3, #0]
            break;
   15204:	e01d      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   15206:	1cfb      	adds	r3, r7, #3
   15208:	781b      	ldrb	r3, [r3, #0]
   1520a:	2b02      	cmp	r3, #2
   1520c:	d104      	bne.n	15218 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1520e:	2317      	movs	r3, #23
   15210:	18fb      	adds	r3, r7, r3
   15212:	2204      	movs	r2, #4
   15214:	701a      	strb	r2, [r3, #0]
            break;
   15216:	e014      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   15218:	1cfb      	adds	r3, r7, #3
   1521a:	781b      	ldrb	r3, [r3, #0]
   1521c:	2b03      	cmp	r3, #3
   1521e:	d104      	bne.n	1522a <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15220:	2317      	movs	r3, #23
   15222:	18fb      	adds	r3, r7, r3
   15224:	2204      	movs	r2, #4
   15226:	701a      	strb	r2, [r3, #0]
            break;
   15228:	e00b      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1522a:	2317      	movs	r3, #23
   1522c:	18fb      	adds	r3, r7, r3
   1522e:	1cfa      	adds	r2, r7, #3
   15230:	7812      	ldrb	r2, [r2, #0]
   15232:	701a      	strb	r2, [r3, #0]
            break;
   15234:	e005      	b.n	15242 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   15236:	2317      	movs	r3, #23
   15238:	18fb      	adds	r3, r7, r3
   1523a:	1cfa      	adds	r2, r7, #3
   1523c:	7812      	ldrb	r2, [r2, #0]
   1523e:	701a      	strb	r2, [r3, #0]
            break;
   15240:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15242:	693b      	ldr	r3, [r7, #16]
   15244:	2b00      	cmp	r3, #0
   15246:	d108      	bne.n	1525a <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15248:	2308      	movs	r3, #8
   1524a:	18fa      	adds	r2, r7, r3
   1524c:	6878      	ldr	r0, [r7, #4]
   1524e:	2301      	movs	r3, #1
   15250:	2110      	movs	r1, #16
   15252:	4c14      	ldr	r4, [pc, #80]	; (152a4 <lsm6dso_xl_data_rate_set+0x2bc>)
   15254:	47a0      	blx	r4
   15256:	0003      	movs	r3, r0
   15258:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1525a:	693b      	ldr	r3, [r7, #16]
   1525c:	2b00      	cmp	r3, #0
   1525e:	d118      	bne.n	15292 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   15260:	2317      	movs	r3, #23
   15262:	18fb      	adds	r3, r7, r3
   15264:	781b      	ldrb	r3, [r3, #0]
   15266:	220f      	movs	r2, #15
   15268:	4013      	ands	r3, r2
   1526a:	b2da      	uxtb	r2, r3
   1526c:	2308      	movs	r3, #8
   1526e:	18fb      	adds	r3, r7, r3
   15270:	0110      	lsls	r0, r2, #4
   15272:	781a      	ldrb	r2, [r3, #0]
   15274:	210f      	movs	r1, #15
   15276:	400a      	ands	r2, r1
   15278:	1c11      	adds	r1, r2, #0
   1527a:	1c02      	adds	r2, r0, #0
   1527c:	430a      	orrs	r2, r1
   1527e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15280:	2308      	movs	r3, #8
   15282:	18fa      	adds	r2, r7, r3
   15284:	6878      	ldr	r0, [r7, #4]
   15286:	2301      	movs	r3, #1
   15288:	2110      	movs	r1, #16
   1528a:	4c07      	ldr	r4, [pc, #28]	; (152a8 <lsm6dso_xl_data_rate_set+0x2c0>)
   1528c:	47a0      	blx	r4
   1528e:	0003      	movs	r3, r0
   15290:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15292:	693b      	ldr	r3, [r7, #16]
}
   15294:	0018      	movs	r0, r3
   15296:	46bd      	mov	sp, r7
   15298:	b007      	add	sp, #28
   1529a:	bd90      	pop	{r4, r7, pc}
   1529c:	00015ac5 	.word	0x00015ac5
   152a0:	00015b19 	.word	0x00015b19
   152a4:	00014eb9 	.word	0x00014eb9
   152a8:	00014eff 	.word	0x00014eff

000152ac <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   152ac:	b590      	push	{r4, r7, lr}
   152ae:	b085      	sub	sp, #20
   152b0:	af00      	add	r7, sp, #0
   152b2:	6078      	str	r0, [r7, #4]
   152b4:	000a      	movs	r2, r1
   152b6:	1cfb      	adds	r3, r7, #3
   152b8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   152ba:	2308      	movs	r3, #8
   152bc:	18fa      	adds	r2, r7, r3
   152be:	6878      	ldr	r0, [r7, #4]
   152c0:	2301      	movs	r3, #1
   152c2:	2111      	movs	r1, #17
   152c4:	4c12      	ldr	r4, [pc, #72]	; (15310 <lsm6dso_gy_full_scale_set+0x64>)
   152c6:	47a0      	blx	r4
   152c8:	0003      	movs	r3, r0
   152ca:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   152cc:	68fb      	ldr	r3, [r7, #12]
   152ce:	2b00      	cmp	r3, #0
   152d0:	d119      	bne.n	15306 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   152d2:	1cfb      	adds	r3, r7, #3
   152d4:	781b      	ldrb	r3, [r3, #0]
   152d6:	2207      	movs	r2, #7
   152d8:	4013      	ands	r3, r2
   152da:	b2da      	uxtb	r2, r3
   152dc:	2308      	movs	r3, #8
   152de:	18fb      	adds	r3, r7, r3
   152e0:	2107      	movs	r1, #7
   152e2:	400a      	ands	r2, r1
   152e4:	1890      	adds	r0, r2, r2
   152e6:	781a      	ldrb	r2, [r3, #0]
   152e8:	210e      	movs	r1, #14
   152ea:	438a      	bics	r2, r1
   152ec:	1c11      	adds	r1, r2, #0
   152ee:	1c02      	adds	r2, r0, #0
   152f0:	430a      	orrs	r2, r1
   152f2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   152f4:	2308      	movs	r3, #8
   152f6:	18fa      	adds	r2, r7, r3
   152f8:	6878      	ldr	r0, [r7, #4]
   152fa:	2301      	movs	r3, #1
   152fc:	2111      	movs	r1, #17
   152fe:	4c05      	ldr	r4, [pc, #20]	; (15314 <lsm6dso_gy_full_scale_set+0x68>)
   15300:	47a0      	blx	r4
   15302:	0003      	movs	r3, r0
   15304:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15306:	68fb      	ldr	r3, [r7, #12]
}
   15308:	0018      	movs	r0, r3
   1530a:	46bd      	mov	sp, r7
   1530c:	b005      	add	sp, #20
   1530e:	bd90      	pop	{r4, r7, pc}
   15310:	00014eb9 	.word	0x00014eb9
   15314:	00014eff 	.word	0x00014eff

00015318 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   15318:	b590      	push	{r4, r7, lr}
   1531a:	b087      	sub	sp, #28
   1531c:	af00      	add	r7, sp, #0
   1531e:	6078      	str	r0, [r7, #4]
   15320:	000a      	movs	r2, r1
   15322:	1cfb      	adds	r3, r7, #3
   15324:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   15326:	2317      	movs	r3, #23
   15328:	18fb      	adds	r3, r7, r3
   1532a:	1cfa      	adds	r2, r7, #3
   1532c:	7812      	ldrb	r2, [r2, #0]
   1532e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15330:	230c      	movs	r3, #12
   15332:	18fa      	adds	r2, r7, r3
   15334:	687b      	ldr	r3, [r7, #4]
   15336:	0011      	movs	r1, r2
   15338:	0018      	movs	r0, r3
   1533a:	4ba4      	ldr	r3, [pc, #656]	; (155cc <lsm6dso_gy_data_rate_set+0x2b4>)
   1533c:	4798      	blx	r3
   1533e:	0003      	movs	r3, r0
   15340:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15342:	693b      	ldr	r3, [r7, #16]
   15344:	2b00      	cmp	r3, #0
   15346:	d000      	beq.n	1534a <lsm6dso_gy_data_rate_set+0x32>
   15348:	e113      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1534a:	230c      	movs	r3, #12
   1534c:	18fb      	adds	r3, r7, r3
   1534e:	781b      	ldrb	r3, [r3, #0]
   15350:	07db      	lsls	r3, r3, #31
   15352:	0fdb      	lsrs	r3, r3, #31
   15354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15356:	230c      	movs	r3, #12
   15358:	18fb      	adds	r3, r7, r3
   1535a:	781b      	ldrb	r3, [r3, #0]
   1535c:	079b      	lsls	r3, r3, #30
   1535e:	0fdb      	lsrs	r3, r3, #31
   15360:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15362:	4313      	orrs	r3, r2
   15364:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15366:	230c      	movs	r3, #12
   15368:	18fb      	adds	r3, r7, r3
   1536a:	781b      	ldrb	r3, [r3, #0]
   1536c:	075b      	lsls	r3, r3, #29
   1536e:	0fdb      	lsrs	r3, r3, #31
   15370:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15372:	4313      	orrs	r3, r2
   15374:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15376:	230c      	movs	r3, #12
   15378:	18fb      	adds	r3, r7, r3
   1537a:	781b      	ldrb	r3, [r3, #0]
   1537c:	071b      	lsls	r3, r3, #28
   1537e:	0fdb      	lsrs	r3, r3, #31
   15380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15382:	4313      	orrs	r3, r2
   15384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15386:	230c      	movs	r3, #12
   15388:	18fb      	adds	r3, r7, r3
   1538a:	781b      	ldrb	r3, [r3, #0]
   1538c:	06db      	lsls	r3, r3, #27
   1538e:	0fdb      	lsrs	r3, r3, #31
   15390:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15392:	4313      	orrs	r3, r2
   15394:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15396:	230c      	movs	r3, #12
   15398:	18fb      	adds	r3, r7, r3
   1539a:	781b      	ldrb	r3, [r3, #0]
   1539c:	069b      	lsls	r3, r3, #26
   1539e:	0fdb      	lsrs	r3, r3, #31
   153a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   153a2:	4313      	orrs	r3, r2
   153a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   153a6:	230c      	movs	r3, #12
   153a8:	18fb      	adds	r3, r7, r3
   153aa:	781b      	ldrb	r3, [r3, #0]
   153ac:	065b      	lsls	r3, r3, #25
   153ae:	0fdb      	lsrs	r3, r3, #31
   153b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   153b2:	4313      	orrs	r3, r2
   153b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   153b6:	230c      	movs	r3, #12
   153b8:	18fb      	adds	r3, r7, r3
   153ba:	781b      	ldrb	r3, [r3, #0]
   153bc:	061b      	lsls	r3, r3, #24
   153be:	0fdb      	lsrs	r3, r3, #31
   153c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   153c2:	4313      	orrs	r3, r2
   153c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   153c6:	230c      	movs	r3, #12
   153c8:	18fb      	adds	r3, r7, r3
   153ca:	785b      	ldrb	r3, [r3, #1]
   153cc:	07db      	lsls	r3, r3, #31
   153ce:	0fdb      	lsrs	r3, r3, #31
   153d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   153d2:	4313      	orrs	r3, r2
   153d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   153d6:	230c      	movs	r3, #12
   153d8:	18fb      	adds	r3, r7, r3
   153da:	785b      	ldrb	r3, [r3, #1]
   153dc:	079b      	lsls	r3, r3, #30
   153de:	0fdb      	lsrs	r3, r3, #31
   153e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   153e2:	4313      	orrs	r3, r2
   153e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   153e6:	230c      	movs	r3, #12
   153e8:	18fb      	adds	r3, r7, r3
   153ea:	785b      	ldrb	r3, [r3, #1]
   153ec:	075b      	lsls	r3, r3, #29
   153ee:	0fdb      	lsrs	r3, r3, #31
   153f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   153f2:	4313      	orrs	r3, r2
   153f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   153f6:	230c      	movs	r3, #12
   153f8:	18fb      	adds	r3, r7, r3
   153fa:	785b      	ldrb	r3, [r3, #1]
   153fc:	071b      	lsls	r3, r3, #28
   153fe:	0fdb      	lsrs	r3, r3, #31
   15400:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15402:	4313      	orrs	r3, r2
   15404:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15406:	230c      	movs	r3, #12
   15408:	18fb      	adds	r3, r7, r3
   1540a:	785b      	ldrb	r3, [r3, #1]
   1540c:	06db      	lsls	r3, r3, #27
   1540e:	0fdb      	lsrs	r3, r3, #31
   15410:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15412:	4313      	orrs	r3, r2
   15414:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15416:	230c      	movs	r3, #12
   15418:	18fb      	adds	r3, r7, r3
   1541a:	785b      	ldrb	r3, [r3, #1]
   1541c:	069b      	lsls	r3, r3, #26
   1541e:	0fdb      	lsrs	r3, r3, #31
   15420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15422:	4313      	orrs	r3, r2
   15424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15426:	230c      	movs	r3, #12
   15428:	18fb      	adds	r3, r7, r3
   1542a:	785b      	ldrb	r3, [r3, #1]
   1542c:	065b      	lsls	r3, r3, #25
   1542e:	0fdb      	lsrs	r3, r3, #31
   15430:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15432:	4313      	orrs	r3, r2
   15434:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15436:	230c      	movs	r3, #12
   15438:	18fb      	adds	r3, r7, r3
   1543a:	785b      	ldrb	r3, [r3, #1]
   1543c:	061b      	lsls	r3, r3, #24
   1543e:	0fdb      	lsrs	r3, r3, #31
   15440:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15442:	4313      	orrs	r3, r2
   15444:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15446:	2b01      	cmp	r3, #1
   15448:	d000      	beq.n	1544c <lsm6dso_gy_data_rate_set+0x134>
   1544a:	e092      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   1544c:	230b      	movs	r3, #11
   1544e:	18fa      	adds	r2, r7, r3
   15450:	687b      	ldr	r3, [r7, #4]
   15452:	0011      	movs	r1, r2
   15454:	0018      	movs	r0, r3
   15456:	4b5e      	ldr	r3, [pc, #376]	; (155d0 <lsm6dso_gy_data_rate_set+0x2b8>)
   15458:	4798      	blx	r3
   1545a:	0003      	movs	r3, r0
   1545c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1545e:	693b      	ldr	r3, [r7, #16]
   15460:	2b00      	cmp	r3, #0
   15462:	d000      	beq.n	15466 <lsm6dso_gy_data_rate_set+0x14e>
   15464:	e085      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15466:	230b      	movs	r3, #11
   15468:	18fb      	adds	r3, r7, r3
   1546a:	781b      	ldrb	r3, [r3, #0]
   1546c:	2b01      	cmp	r3, #1
   1546e:	d017      	beq.n	154a0 <lsm6dso_gy_data_rate_set+0x188>
   15470:	dc02      	bgt.n	15478 <lsm6dso_gy_data_rate_set+0x160>
   15472:	2b00      	cmp	r3, #0
   15474:	d005      	beq.n	15482 <lsm6dso_gy_data_rate_set+0x16a>
   15476:	e076      	b.n	15566 <lsm6dso_gy_data_rate_set+0x24e>
   15478:	2b02      	cmp	r3, #2
   1547a:	d029      	beq.n	154d0 <lsm6dso_gy_data_rate_set+0x1b8>
   1547c:	2b03      	cmp	r3, #3
   1547e:	d048      	beq.n	15512 <lsm6dso_gy_data_rate_set+0x1fa>
   15480:	e071      	b.n	15566 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   15482:	1cfb      	adds	r3, r7, #3
   15484:	781b      	ldrb	r3, [r3, #0]
   15486:	2b00      	cmp	r3, #0
   15488:	d104      	bne.n	15494 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   1548a:	2317      	movs	r3, #23
   1548c:	18fb      	adds	r3, r7, r3
   1548e:	2201      	movs	r2, #1
   15490:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15492:	e06e      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15494:	2317      	movs	r3, #23
   15496:	18fb      	adds	r3, r7, r3
   15498:	1cfa      	adds	r2, r7, #3
   1549a:	7812      	ldrb	r2, [r2, #0]
   1549c:	701a      	strb	r2, [r3, #0]
            break;
   1549e:	e068      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   154a0:	1cfb      	adds	r3, r7, #3
   154a2:	781b      	ldrb	r3, [r3, #0]
   154a4:	2b00      	cmp	r3, #0
   154a6:	d104      	bne.n	154b2 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   154a8:	2317      	movs	r3, #23
   154aa:	18fb      	adds	r3, r7, r3
   154ac:	2202      	movs	r2, #2
   154ae:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   154b0:	e05f      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   154b2:	1cfb      	adds	r3, r7, #3
   154b4:	781b      	ldrb	r3, [r3, #0]
   154b6:	2b01      	cmp	r3, #1
   154b8:	d104      	bne.n	154c4 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   154ba:	2317      	movs	r3, #23
   154bc:	18fb      	adds	r3, r7, r3
   154be:	2202      	movs	r2, #2
   154c0:	701a      	strb	r2, [r3, #0]
            break;
   154c2:	e056      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   154c4:	2317      	movs	r3, #23
   154c6:	18fb      	adds	r3, r7, r3
   154c8:	1cfa      	adds	r2, r7, #3
   154ca:	7812      	ldrb	r2, [r2, #0]
   154cc:	701a      	strb	r2, [r3, #0]
            break;
   154ce:	e050      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   154d0:	1cfb      	adds	r3, r7, #3
   154d2:	781b      	ldrb	r3, [r3, #0]
   154d4:	2b00      	cmp	r3, #0
   154d6:	d104      	bne.n	154e2 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   154d8:	2317      	movs	r3, #23
   154da:	18fb      	adds	r3, r7, r3
   154dc:	2203      	movs	r2, #3
   154de:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   154e0:	e047      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   154e2:	1cfb      	adds	r3, r7, #3
   154e4:	781b      	ldrb	r3, [r3, #0]
   154e6:	2b01      	cmp	r3, #1
   154e8:	d104      	bne.n	154f4 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   154ea:	2317      	movs	r3, #23
   154ec:	18fb      	adds	r3, r7, r3
   154ee:	2203      	movs	r2, #3
   154f0:	701a      	strb	r2, [r3, #0]
            break;
   154f2:	e03e      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   154f4:	1cfb      	adds	r3, r7, #3
   154f6:	781b      	ldrb	r3, [r3, #0]
   154f8:	2b02      	cmp	r3, #2
   154fa:	d104      	bne.n	15506 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   154fc:	2317      	movs	r3, #23
   154fe:	18fb      	adds	r3, r7, r3
   15500:	2203      	movs	r2, #3
   15502:	701a      	strb	r2, [r3, #0]
            break;
   15504:	e035      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15506:	2317      	movs	r3, #23
   15508:	18fb      	adds	r3, r7, r3
   1550a:	1cfa      	adds	r2, r7, #3
   1550c:	7812      	ldrb	r2, [r2, #0]
   1550e:	701a      	strb	r2, [r3, #0]
            break;
   15510:	e02f      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15512:	1cfb      	adds	r3, r7, #3
   15514:	781b      	ldrb	r3, [r3, #0]
   15516:	2b00      	cmp	r3, #0
   15518:	d104      	bne.n	15524 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1551a:	2317      	movs	r3, #23
   1551c:	18fb      	adds	r3, r7, r3
   1551e:	2204      	movs	r2, #4
   15520:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15522:	e026      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15524:	1cfb      	adds	r3, r7, #3
   15526:	781b      	ldrb	r3, [r3, #0]
   15528:	2b01      	cmp	r3, #1
   1552a:	d104      	bne.n	15536 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1552c:	2317      	movs	r3, #23
   1552e:	18fb      	adds	r3, r7, r3
   15530:	2204      	movs	r2, #4
   15532:	701a      	strb	r2, [r3, #0]
            break;
   15534:	e01d      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15536:	1cfb      	adds	r3, r7, #3
   15538:	781b      	ldrb	r3, [r3, #0]
   1553a:	2b02      	cmp	r3, #2
   1553c:	d104      	bne.n	15548 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1553e:	2317      	movs	r3, #23
   15540:	18fb      	adds	r3, r7, r3
   15542:	2204      	movs	r2, #4
   15544:	701a      	strb	r2, [r3, #0]
            break;
   15546:	e014      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15548:	1cfb      	adds	r3, r7, #3
   1554a:	781b      	ldrb	r3, [r3, #0]
   1554c:	2b03      	cmp	r3, #3
   1554e:	d104      	bne.n	1555a <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15550:	2317      	movs	r3, #23
   15552:	18fb      	adds	r3, r7, r3
   15554:	2204      	movs	r2, #4
   15556:	701a      	strb	r2, [r3, #0]
            break;
   15558:	e00b      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1555a:	2317      	movs	r3, #23
   1555c:	18fb      	adds	r3, r7, r3
   1555e:	1cfa      	adds	r2, r7, #3
   15560:	7812      	ldrb	r2, [r2, #0]
   15562:	701a      	strb	r2, [r3, #0]
            break;
   15564:	e005      	b.n	15572 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   15566:	2317      	movs	r3, #23
   15568:	18fb      	adds	r3, r7, r3
   1556a:	1cfa      	adds	r2, r7, #3
   1556c:	7812      	ldrb	r2, [r2, #0]
   1556e:	701a      	strb	r2, [r3, #0]
            break;
   15570:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15572:	693b      	ldr	r3, [r7, #16]
   15574:	2b00      	cmp	r3, #0
   15576:	d108      	bne.n	1558a <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15578:	2308      	movs	r3, #8
   1557a:	18fa      	adds	r2, r7, r3
   1557c:	6878      	ldr	r0, [r7, #4]
   1557e:	2301      	movs	r3, #1
   15580:	2111      	movs	r1, #17
   15582:	4c14      	ldr	r4, [pc, #80]	; (155d4 <lsm6dso_gy_data_rate_set+0x2bc>)
   15584:	47a0      	blx	r4
   15586:	0003      	movs	r3, r0
   15588:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1558a:	693b      	ldr	r3, [r7, #16]
   1558c:	2b00      	cmp	r3, #0
   1558e:	d118      	bne.n	155c2 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15590:	2317      	movs	r3, #23
   15592:	18fb      	adds	r3, r7, r3
   15594:	781b      	ldrb	r3, [r3, #0]
   15596:	220f      	movs	r2, #15
   15598:	4013      	ands	r3, r2
   1559a:	b2da      	uxtb	r2, r3
   1559c:	2308      	movs	r3, #8
   1559e:	18fb      	adds	r3, r7, r3
   155a0:	0110      	lsls	r0, r2, #4
   155a2:	781a      	ldrb	r2, [r3, #0]
   155a4:	210f      	movs	r1, #15
   155a6:	400a      	ands	r2, r1
   155a8:	1c11      	adds	r1, r2, #0
   155aa:	1c02      	adds	r2, r0, #0
   155ac:	430a      	orrs	r2, r1
   155ae:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   155b0:	2308      	movs	r3, #8
   155b2:	18fa      	adds	r2, r7, r3
   155b4:	6878      	ldr	r0, [r7, #4]
   155b6:	2301      	movs	r3, #1
   155b8:	2111      	movs	r1, #17
   155ba:	4c07      	ldr	r4, [pc, #28]	; (155d8 <lsm6dso_gy_data_rate_set+0x2c0>)
   155bc:	47a0      	blx	r4
   155be:	0003      	movs	r3, r0
   155c0:	613b      	str	r3, [r7, #16]
  }

  return ret;
   155c2:	693b      	ldr	r3, [r7, #16]
}
   155c4:	0018      	movs	r0, r3
   155c6:	46bd      	mov	sp, r7
   155c8:	b007      	add	sp, #28
   155ca:	bd90      	pop	{r4, r7, pc}
   155cc:	00015ac5 	.word	0x00015ac5
   155d0:	00015b19 	.word	0x00015b19
   155d4:	00014eb9 	.word	0x00014eb9
   155d8:	00014eff 	.word	0x00014eff

000155dc <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   155dc:	b590      	push	{r4, r7, lr}
   155de:	b085      	sub	sp, #20
   155e0:	af00      	add	r7, sp, #0
   155e2:	6078      	str	r0, [r7, #4]
   155e4:	000a      	movs	r2, r1
   155e6:	1cfb      	adds	r3, r7, #3
   155e8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   155ea:	2308      	movs	r3, #8
   155ec:	18fa      	adds	r2, r7, r3
   155ee:	6878      	ldr	r0, [r7, #4]
   155f0:	2301      	movs	r3, #1
   155f2:	2112      	movs	r1, #18
   155f4:	4c12      	ldr	r4, [pc, #72]	; (15640 <lsm6dso_block_data_update_set+0x64>)
   155f6:	47a0      	blx	r4
   155f8:	0003      	movs	r3, r0
   155fa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   155fc:	68fb      	ldr	r3, [r7, #12]
   155fe:	2b00      	cmp	r3, #0
   15600:	d119      	bne.n	15636 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15602:	1cfb      	adds	r3, r7, #3
   15604:	781b      	ldrb	r3, [r3, #0]
   15606:	2201      	movs	r2, #1
   15608:	4013      	ands	r3, r2
   1560a:	b2da      	uxtb	r2, r3
   1560c:	2308      	movs	r3, #8
   1560e:	18fb      	adds	r3, r7, r3
   15610:	2101      	movs	r1, #1
   15612:	400a      	ands	r2, r1
   15614:	0190      	lsls	r0, r2, #6
   15616:	781a      	ldrb	r2, [r3, #0]
   15618:	2140      	movs	r1, #64	; 0x40
   1561a:	438a      	bics	r2, r1
   1561c:	1c11      	adds	r1, r2, #0
   1561e:	1c02      	adds	r2, r0, #0
   15620:	430a      	orrs	r2, r1
   15622:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15624:	2308      	movs	r3, #8
   15626:	18fa      	adds	r2, r7, r3
   15628:	6878      	ldr	r0, [r7, #4]
   1562a:	2301      	movs	r3, #1
   1562c:	2112      	movs	r1, #18
   1562e:	4c05      	ldr	r4, [pc, #20]	; (15644 <lsm6dso_block_data_update_set+0x68>)
   15630:	47a0      	blx	r4
   15632:	0003      	movs	r3, r0
   15634:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15636:	68fb      	ldr	r3, [r7, #12]
}
   15638:	0018      	movs	r0, r3
   1563a:	46bd      	mov	sp, r7
   1563c:	b005      	add	sp, #20
   1563e:	bd90      	pop	{r4, r7, pc}
   15640:	00014eb9 	.word	0x00014eb9
   15644:	00014eff 	.word	0x00014eff

00015648 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15648:	b590      	push	{r4, r7, lr}
   1564a:	b085      	sub	sp, #20
   1564c:	af00      	add	r7, sp, #0
   1564e:	6078      	str	r0, [r7, #4]
   15650:	000a      	movs	r2, r1
   15652:	1cfb      	adds	r3, r7, #3
   15654:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15656:	2308      	movs	r3, #8
   15658:	18fa      	adds	r2, r7, r3
   1565a:	6878      	ldr	r0, [r7, #4]
   1565c:	2301      	movs	r3, #1
   1565e:	2115      	movs	r1, #21
   15660:	4c12      	ldr	r4, [pc, #72]	; (156ac <lsm6dso_xl_offset_weight_set+0x64>)
   15662:	47a0      	blx	r4
   15664:	0003      	movs	r3, r0
   15666:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15668:	68fb      	ldr	r3, [r7, #12]
   1566a:	2b00      	cmp	r3, #0
   1566c:	d119      	bne.n	156a2 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   1566e:	1cfb      	adds	r3, r7, #3
   15670:	781b      	ldrb	r3, [r3, #0]
   15672:	2201      	movs	r2, #1
   15674:	4013      	ands	r3, r2
   15676:	b2da      	uxtb	r2, r3
   15678:	2308      	movs	r3, #8
   1567a:	18fb      	adds	r3, r7, r3
   1567c:	2101      	movs	r1, #1
   1567e:	400a      	ands	r2, r1
   15680:	00d0      	lsls	r0, r2, #3
   15682:	781a      	ldrb	r2, [r3, #0]
   15684:	2108      	movs	r1, #8
   15686:	438a      	bics	r2, r1
   15688:	1c11      	adds	r1, r2, #0
   1568a:	1c02      	adds	r2, r0, #0
   1568c:	430a      	orrs	r2, r1
   1568e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15690:	2308      	movs	r3, #8
   15692:	18fa      	adds	r2, r7, r3
   15694:	6878      	ldr	r0, [r7, #4]
   15696:	2301      	movs	r3, #1
   15698:	2115      	movs	r1, #21
   1569a:	4c05      	ldr	r4, [pc, #20]	; (156b0 <lsm6dso_xl_offset_weight_set+0x68>)
   1569c:	47a0      	blx	r4
   1569e:	0003      	movs	r3, r0
   156a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   156a2:	68fb      	ldr	r3, [r7, #12]
}
   156a4:	0018      	movs	r0, r3
   156a6:	46bd      	mov	sp, r7
   156a8:	b005      	add	sp, #20
   156aa:	bd90      	pop	{r4, r7, pc}
   156ac:	00014eb9 	.word	0x00014eb9
   156b0:	00014eff 	.word	0x00014eff

000156b4 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   156b4:	b590      	push	{r4, r7, lr}
   156b6:	b085      	sub	sp, #20
   156b8:	af00      	add	r7, sp, #0
   156ba:	6078      	str	r0, [r7, #4]
   156bc:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   156be:	2308      	movs	r3, #8
   156c0:	18fa      	adds	r2, r7, r3
   156c2:	6878      	ldr	r0, [r7, #4]
   156c4:	2301      	movs	r3, #1
   156c6:	211e      	movs	r1, #30
   156c8:	4c08      	ldr	r4, [pc, #32]	; (156ec <lsm6dso_xl_flag_data_ready_get+0x38>)
   156ca:	47a0      	blx	r4
   156cc:	0003      	movs	r3, r0
   156ce:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   156d0:	2308      	movs	r3, #8
   156d2:	18fb      	adds	r3, r7, r3
   156d4:	781b      	ldrb	r3, [r3, #0]
   156d6:	07db      	lsls	r3, r3, #31
   156d8:	0fdb      	lsrs	r3, r3, #31
   156da:	b2db      	uxtb	r3, r3
   156dc:	001a      	movs	r2, r3
   156de:	683b      	ldr	r3, [r7, #0]
   156e0:	701a      	strb	r2, [r3, #0]

  return ret;
   156e2:	68fb      	ldr	r3, [r7, #12]
}
   156e4:	0018      	movs	r0, r3
   156e6:	46bd      	mov	sp, r7
   156e8:	b005      	add	sp, #20
   156ea:	bd90      	pop	{r4, r7, pc}
   156ec:	00014eb9 	.word	0x00014eb9

000156f0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   156f0:	b590      	push	{r4, r7, lr}
   156f2:	b087      	sub	sp, #28
   156f4:	af00      	add	r7, sp, #0
   156f6:	6078      	str	r0, [r7, #4]
   156f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   156fa:	230c      	movs	r3, #12
   156fc:	18fa      	adds	r2, r7, r3
   156fe:	6878      	ldr	r0, [r7, #4]
   15700:	2306      	movs	r3, #6
   15702:	2128      	movs	r1, #40	; 0x28
   15704:	4c26      	ldr	r4, [pc, #152]	; (157a0 <lsm6dso_acceleration_raw_get+0xb0>)
   15706:	47a0      	blx	r4
   15708:	0003      	movs	r3, r0
   1570a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   1570c:	230c      	movs	r3, #12
   1570e:	18fb      	adds	r3, r7, r3
   15710:	785b      	ldrb	r3, [r3, #1]
   15712:	b21a      	sxth	r2, r3
   15714:	683b      	ldr	r3, [r7, #0]
   15716:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15718:	683b      	ldr	r3, [r7, #0]
   1571a:	2200      	movs	r2, #0
   1571c:	5e9b      	ldrsh	r3, [r3, r2]
   1571e:	b29b      	uxth	r3, r3
   15720:	021b      	lsls	r3, r3, #8
   15722:	b29a      	uxth	r2, r3
   15724:	230c      	movs	r3, #12
   15726:	18fb      	adds	r3, r7, r3
   15728:	781b      	ldrb	r3, [r3, #0]
   1572a:	b29b      	uxth	r3, r3
   1572c:	18d3      	adds	r3, r2, r3
   1572e:	b29b      	uxth	r3, r3
   15730:	b21a      	sxth	r2, r3
   15732:	683b      	ldr	r3, [r7, #0]
   15734:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15736:	683b      	ldr	r3, [r7, #0]
   15738:	3302      	adds	r3, #2
   1573a:	220c      	movs	r2, #12
   1573c:	18ba      	adds	r2, r7, r2
   1573e:	78d2      	ldrb	r2, [r2, #3]
   15740:	b212      	sxth	r2, r2
   15742:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15744:	683b      	ldr	r3, [r7, #0]
   15746:	3302      	adds	r3, #2
   15748:	683a      	ldr	r2, [r7, #0]
   1574a:	3202      	adds	r2, #2
   1574c:	2100      	movs	r1, #0
   1574e:	5e52      	ldrsh	r2, [r2, r1]
   15750:	b292      	uxth	r2, r2
   15752:	0212      	lsls	r2, r2, #8
   15754:	b291      	uxth	r1, r2
   15756:	220c      	movs	r2, #12
   15758:	18ba      	adds	r2, r7, r2
   1575a:	7892      	ldrb	r2, [r2, #2]
   1575c:	b292      	uxth	r2, r2
   1575e:	188a      	adds	r2, r1, r2
   15760:	b292      	uxth	r2, r2
   15762:	b212      	sxth	r2, r2
   15764:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15766:	683b      	ldr	r3, [r7, #0]
   15768:	3304      	adds	r3, #4
   1576a:	220c      	movs	r2, #12
   1576c:	18ba      	adds	r2, r7, r2
   1576e:	7952      	ldrb	r2, [r2, #5]
   15770:	b212      	sxth	r2, r2
   15772:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15774:	683b      	ldr	r3, [r7, #0]
   15776:	3304      	adds	r3, #4
   15778:	683a      	ldr	r2, [r7, #0]
   1577a:	3204      	adds	r2, #4
   1577c:	2100      	movs	r1, #0
   1577e:	5e52      	ldrsh	r2, [r2, r1]
   15780:	b292      	uxth	r2, r2
   15782:	0212      	lsls	r2, r2, #8
   15784:	b291      	uxth	r1, r2
   15786:	220c      	movs	r2, #12
   15788:	18ba      	adds	r2, r7, r2
   1578a:	7912      	ldrb	r2, [r2, #4]
   1578c:	b292      	uxth	r2, r2
   1578e:	188a      	adds	r2, r1, r2
   15790:	b292      	uxth	r2, r2
   15792:	b212      	sxth	r2, r2
   15794:	801a      	strh	r2, [r3, #0]

  return ret;
   15796:	697b      	ldr	r3, [r7, #20]
}
   15798:	0018      	movs	r0, r3
   1579a:	46bd      	mov	sp, r7
   1579c:	b007      	add	sp, #28
   1579e:	bd90      	pop	{r4, r7, pc}
   157a0:	00014eb9 	.word	0x00014eb9

000157a4 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   157a4:	b590      	push	{r4, r7, lr}
   157a6:	b085      	sub	sp, #20
   157a8:	af00      	add	r7, sp, #0
   157aa:	6078      	str	r0, [r7, #4]
   157ac:	000a      	movs	r2, r1
   157ae:	1cfb      	adds	r3, r7, #3
   157b0:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   157b2:	2308      	movs	r3, #8
   157b4:	18fa      	adds	r2, r7, r3
   157b6:	6878      	ldr	r0, [r7, #4]
   157b8:	2301      	movs	r3, #1
   157ba:	2101      	movs	r1, #1
   157bc:	4c11      	ldr	r4, [pc, #68]	; (15804 <lsm6dso_mem_bank_set+0x60>)
   157be:	47a0      	blx	r4
   157c0:	0003      	movs	r3, r0
   157c2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   157c4:	68fb      	ldr	r3, [r7, #12]
   157c6:	2b00      	cmp	r3, #0
   157c8:	d117      	bne.n	157fa <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   157ca:	1cfb      	adds	r3, r7, #3
   157cc:	781b      	ldrb	r3, [r3, #0]
   157ce:	2203      	movs	r2, #3
   157d0:	4013      	ands	r3, r2
   157d2:	b2da      	uxtb	r2, r3
   157d4:	2308      	movs	r3, #8
   157d6:	18fb      	adds	r3, r7, r3
   157d8:	0190      	lsls	r0, r2, #6
   157da:	781a      	ldrb	r2, [r3, #0]
   157dc:	213f      	movs	r1, #63	; 0x3f
   157de:	400a      	ands	r2, r1
   157e0:	1c11      	adds	r1, r2, #0
   157e2:	1c02      	adds	r2, r0, #0
   157e4:	430a      	orrs	r2, r1
   157e6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   157e8:	2308      	movs	r3, #8
   157ea:	18fa      	adds	r2, r7, r3
   157ec:	6878      	ldr	r0, [r7, #4]
   157ee:	2301      	movs	r3, #1
   157f0:	2101      	movs	r1, #1
   157f2:	4c05      	ldr	r4, [pc, #20]	; (15808 <lsm6dso_mem_bank_set+0x64>)
   157f4:	47a0      	blx	r4
   157f6:	0003      	movs	r3, r0
   157f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   157fa:	68fb      	ldr	r3, [r7, #12]
}
   157fc:	0018      	movs	r0, r3
   157fe:	46bd      	mov	sp, r7
   15800:	b005      	add	sp, #20
   15802:	bd90      	pop	{r4, r7, pc}
   15804:	00014eb9 	.word	0x00014eb9
   15808:	00014eff 	.word	0x00014eff

0001580c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   1580c:	b590      	push	{r4, r7, lr}
   1580e:	b085      	sub	sp, #20
   15810:	af00      	add	r7, sp, #0
   15812:	6078      	str	r0, [r7, #4]
   15814:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15816:	683a      	ldr	r2, [r7, #0]
   15818:	6878      	ldr	r0, [r7, #4]
   1581a:	2301      	movs	r3, #1
   1581c:	210f      	movs	r1, #15
   1581e:	4c04      	ldr	r4, [pc, #16]	; (15830 <lsm6dso_device_id_get+0x24>)
   15820:	47a0      	blx	r4
   15822:	0003      	movs	r3, r0
   15824:	60fb      	str	r3, [r7, #12]

  return ret;
   15826:	68fb      	ldr	r3, [r7, #12]
}
   15828:	0018      	movs	r0, r3
   1582a:	46bd      	mov	sp, r7
   1582c:	b005      	add	sp, #20
   1582e:	bd90      	pop	{r4, r7, pc}
   15830:	00014eb9 	.word	0x00014eb9

00015834 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15834:	b590      	push	{r4, r7, lr}
   15836:	b085      	sub	sp, #20
   15838:	af00      	add	r7, sp, #0
   1583a:	6078      	str	r0, [r7, #4]
   1583c:	000a      	movs	r2, r1
   1583e:	1cfb      	adds	r3, r7, #3
   15840:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15842:	2308      	movs	r3, #8
   15844:	18fa      	adds	r2, r7, r3
   15846:	6878      	ldr	r0, [r7, #4]
   15848:	2301      	movs	r3, #1
   1584a:	2112      	movs	r1, #18
   1584c:	4c12      	ldr	r4, [pc, #72]	; (15898 <lsm6dso_reset_set+0x64>)
   1584e:	47a0      	blx	r4
   15850:	0003      	movs	r3, r0
   15852:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15854:	68fb      	ldr	r3, [r7, #12]
   15856:	2b00      	cmp	r3, #0
   15858:	d119      	bne.n	1588e <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   1585a:	1cfb      	adds	r3, r7, #3
   1585c:	781b      	ldrb	r3, [r3, #0]
   1585e:	2201      	movs	r2, #1
   15860:	4013      	ands	r3, r2
   15862:	b2da      	uxtb	r2, r3
   15864:	2308      	movs	r3, #8
   15866:	18fb      	adds	r3, r7, r3
   15868:	2101      	movs	r1, #1
   1586a:	400a      	ands	r2, r1
   1586c:	0010      	movs	r0, r2
   1586e:	781a      	ldrb	r2, [r3, #0]
   15870:	2101      	movs	r1, #1
   15872:	438a      	bics	r2, r1
   15874:	1c11      	adds	r1, r2, #0
   15876:	1c02      	adds	r2, r0, #0
   15878:	430a      	orrs	r2, r1
   1587a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1587c:	2308      	movs	r3, #8
   1587e:	18fa      	adds	r2, r7, r3
   15880:	6878      	ldr	r0, [r7, #4]
   15882:	2301      	movs	r3, #1
   15884:	2112      	movs	r1, #18
   15886:	4c05      	ldr	r4, [pc, #20]	; (1589c <lsm6dso_reset_set+0x68>)
   15888:	47a0      	blx	r4
   1588a:	0003      	movs	r3, r0
   1588c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1588e:	68fb      	ldr	r3, [r7, #12]
}
   15890:	0018      	movs	r0, r3
   15892:	46bd      	mov	sp, r7
   15894:	b005      	add	sp, #20
   15896:	bd90      	pop	{r4, r7, pc}
   15898:	00014eb9 	.word	0x00014eb9
   1589c:	00014eff 	.word	0x00014eff

000158a0 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   158a0:	b590      	push	{r4, r7, lr}
   158a2:	b085      	sub	sp, #20
   158a4:	af00      	add	r7, sp, #0
   158a6:	6078      	str	r0, [r7, #4]
   158a8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   158aa:	2308      	movs	r3, #8
   158ac:	18fa      	adds	r2, r7, r3
   158ae:	6878      	ldr	r0, [r7, #4]
   158b0:	2301      	movs	r3, #1
   158b2:	2112      	movs	r1, #18
   158b4:	4c08      	ldr	r4, [pc, #32]	; (158d8 <lsm6dso_reset_get+0x38>)
   158b6:	47a0      	blx	r4
   158b8:	0003      	movs	r3, r0
   158ba:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   158bc:	2308      	movs	r3, #8
   158be:	18fb      	adds	r3, r7, r3
   158c0:	781b      	ldrb	r3, [r3, #0]
   158c2:	07db      	lsls	r3, r3, #31
   158c4:	0fdb      	lsrs	r3, r3, #31
   158c6:	b2db      	uxtb	r3, r3
   158c8:	001a      	movs	r2, r3
   158ca:	683b      	ldr	r3, [r7, #0]
   158cc:	701a      	strb	r2, [r3, #0]

  return ret;
   158ce:	68fb      	ldr	r3, [r7, #12]
}
   158d0:	0018      	movs	r0, r3
   158d2:	46bd      	mov	sp, r7
   158d4:	b005      	add	sp, #20
   158d6:	bd90      	pop	{r4, r7, pc}
   158d8:	00014eb9 	.word	0x00014eb9

000158dc <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   158dc:	b590      	push	{r4, r7, lr}
   158de:	b085      	sub	sp, #20
   158e0:	af00      	add	r7, sp, #0
   158e2:	6078      	str	r0, [r7, #4]
   158e4:	000a      	movs	r2, r1
   158e6:	1cfb      	adds	r3, r7, #3
   158e8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   158ea:	2308      	movs	r3, #8
   158ec:	18fa      	adds	r2, r7, r3
   158ee:	6878      	ldr	r0, [r7, #4]
   158f0:	2301      	movs	r3, #1
   158f2:	2110      	movs	r1, #16
   158f4:	4c12      	ldr	r4, [pc, #72]	; (15940 <lsm6dso_xl_filter_lp2_set+0x64>)
   158f6:	47a0      	blx	r4
   158f8:	0003      	movs	r3, r0
   158fa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   158fc:	68fb      	ldr	r3, [r7, #12]
   158fe:	2b00      	cmp	r3, #0
   15900:	d119      	bne.n	15936 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15902:	1cfb      	adds	r3, r7, #3
   15904:	781b      	ldrb	r3, [r3, #0]
   15906:	2201      	movs	r2, #1
   15908:	4013      	ands	r3, r2
   1590a:	b2da      	uxtb	r2, r3
   1590c:	2308      	movs	r3, #8
   1590e:	18fb      	adds	r3, r7, r3
   15910:	2101      	movs	r1, #1
   15912:	400a      	ands	r2, r1
   15914:	1890      	adds	r0, r2, r2
   15916:	781a      	ldrb	r2, [r3, #0]
   15918:	2102      	movs	r1, #2
   1591a:	438a      	bics	r2, r1
   1591c:	1c11      	adds	r1, r2, #0
   1591e:	1c02      	adds	r2, r0, #0
   15920:	430a      	orrs	r2, r1
   15922:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15924:	2308      	movs	r3, #8
   15926:	18fa      	adds	r2, r7, r3
   15928:	6878      	ldr	r0, [r7, #4]
   1592a:	2301      	movs	r3, #1
   1592c:	2110      	movs	r1, #16
   1592e:	4c05      	ldr	r4, [pc, #20]	; (15944 <lsm6dso_xl_filter_lp2_set+0x68>)
   15930:	47a0      	blx	r4
   15932:	0003      	movs	r3, r0
   15934:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15936:	68fb      	ldr	r3, [r7, #12]
}
   15938:	0018      	movs	r0, r3
   1593a:	46bd      	mov	sp, r7
   1593c:	b005      	add	sp, #20
   1593e:	bd90      	pop	{r4, r7, pc}
   15940:	00014eb9 	.word	0x00014eb9
   15944:	00014eff 	.word	0x00014eff

00015948 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15948:	b590      	push	{r4, r7, lr}
   1594a:	b085      	sub	sp, #20
   1594c:	af00      	add	r7, sp, #0
   1594e:	6078      	str	r0, [r7, #4]
   15950:	000a      	movs	r2, r1
   15952:	1cfb      	adds	r3, r7, #3
   15954:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15956:	2308      	movs	r3, #8
   15958:	18fa      	adds	r2, r7, r3
   1595a:	6878      	ldr	r0, [r7, #4]
   1595c:	2301      	movs	r3, #1
   1595e:	2117      	movs	r1, #23
   15960:	4c25      	ldr	r4, [pc, #148]	; (159f8 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15962:	47a0      	blx	r4
   15964:	0003      	movs	r3, r0
   15966:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15968:	68fb      	ldr	r3, [r7, #12]
   1596a:	2b00      	cmp	r3, #0
   1596c:	d13f      	bne.n	159ee <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   1596e:	1cfb      	adds	r3, r7, #3
   15970:	781b      	ldrb	r3, [r3, #0]
   15972:	091b      	lsrs	r3, r3, #4
   15974:	b2db      	uxtb	r3, r3
   15976:	1c1a      	adds	r2, r3, #0
   15978:	2301      	movs	r3, #1
   1597a:	4013      	ands	r3, r2
   1597c:	b2da      	uxtb	r2, r3
   1597e:	2308      	movs	r3, #8
   15980:	18fb      	adds	r3, r7, r3
   15982:	2101      	movs	r1, #1
   15984:	400a      	ands	r2, r1
   15986:	0090      	lsls	r0, r2, #2
   15988:	781a      	ldrb	r2, [r3, #0]
   1598a:	2104      	movs	r1, #4
   1598c:	438a      	bics	r2, r1
   1598e:	1c11      	adds	r1, r2, #0
   15990:	1c02      	adds	r2, r0, #0
   15992:	430a      	orrs	r2, r1
   15994:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15996:	1cfb      	adds	r3, r7, #3
   15998:	781b      	ldrb	r3, [r3, #0]
   1599a:	095b      	lsrs	r3, r3, #5
   1599c:	b2db      	uxtb	r3, r3
   1599e:	1c1a      	adds	r2, r3, #0
   159a0:	2301      	movs	r3, #1
   159a2:	4013      	ands	r3, r2
   159a4:	b2da      	uxtb	r2, r3
   159a6:	2308      	movs	r3, #8
   159a8:	18fb      	adds	r3, r7, r3
   159aa:	2101      	movs	r1, #1
   159ac:	400a      	ands	r2, r1
   159ae:	0110      	lsls	r0, r2, #4
   159b0:	781a      	ldrb	r2, [r3, #0]
   159b2:	2110      	movs	r1, #16
   159b4:	438a      	bics	r2, r1
   159b6:	1c11      	adds	r1, r2, #0
   159b8:	1c02      	adds	r2, r0, #0
   159ba:	430a      	orrs	r2, r1
   159bc:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   159be:	1cfb      	adds	r3, r7, #3
   159c0:	781b      	ldrb	r3, [r3, #0]
   159c2:	2207      	movs	r2, #7
   159c4:	4013      	ands	r3, r2
   159c6:	b2da      	uxtb	r2, r3
   159c8:	2308      	movs	r3, #8
   159ca:	18fb      	adds	r3, r7, r3
   159cc:	0150      	lsls	r0, r2, #5
   159ce:	781a      	ldrb	r2, [r3, #0]
   159d0:	211f      	movs	r1, #31
   159d2:	400a      	ands	r2, r1
   159d4:	1c11      	adds	r1, r2, #0
   159d6:	1c02      	adds	r2, r0, #0
   159d8:	430a      	orrs	r2, r1
   159da:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   159dc:	2308      	movs	r3, #8
   159de:	18fa      	adds	r2, r7, r3
   159e0:	6878      	ldr	r0, [r7, #4]
   159e2:	2301      	movs	r3, #1
   159e4:	2117      	movs	r1, #23
   159e6:	4c05      	ldr	r4, [pc, #20]	; (159fc <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   159e8:	47a0      	blx	r4
   159ea:	0003      	movs	r3, r0
   159ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   159ee:	68fb      	ldr	r3, [r7, #12]
}
   159f0:	0018      	movs	r0, r3
   159f2:	46bd      	mov	sp, r7
   159f4:	b005      	add	sp, #20
   159f6:	bd90      	pop	{r4, r7, pc}
   159f8:	00014eb9 	.word	0x00014eb9
   159fc:	00014eff 	.word	0x00014eff

00015a00 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15a00:	b590      	push	{r4, r7, lr}
   15a02:	b087      	sub	sp, #28
   15a04:	af00      	add	r7, sp, #0
   15a06:	6078      	str	r0, [r7, #4]
   15a08:	000a      	movs	r2, r1
   15a0a:	1cfb      	adds	r3, r7, #3
   15a0c:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15a0e:	230c      	movs	r3, #12
   15a10:	18fa      	adds	r2, r7, r3
   15a12:	6878      	ldr	r0, [r7, #4]
   15a14:	2301      	movs	r3, #1
   15a16:	2118      	movs	r1, #24
   15a18:	4c28      	ldr	r4, [pc, #160]	; (15abc <lsm6dso_i3c_disable_set+0xbc>)
   15a1a:	47a0      	blx	r4
   15a1c:	0003      	movs	r3, r0
   15a1e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15a20:	697b      	ldr	r3, [r7, #20]
   15a22:	2b00      	cmp	r3, #0
   15a24:	d11c      	bne.n	15a60 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15a26:	1cfb      	adds	r3, r7, #3
   15a28:	781b      	ldrb	r3, [r3, #0]
   15a2a:	09db      	lsrs	r3, r3, #7
   15a2c:	b2db      	uxtb	r3, r3
   15a2e:	1c1a      	adds	r2, r3, #0
   15a30:	2301      	movs	r3, #1
   15a32:	4013      	ands	r3, r2
   15a34:	b2da      	uxtb	r2, r3
   15a36:	230c      	movs	r3, #12
   15a38:	18fb      	adds	r3, r7, r3
   15a3a:	2101      	movs	r1, #1
   15a3c:	400a      	ands	r2, r1
   15a3e:	1890      	adds	r0, r2, r2
   15a40:	781a      	ldrb	r2, [r3, #0]
   15a42:	2102      	movs	r1, #2
   15a44:	438a      	bics	r2, r1
   15a46:	1c11      	adds	r1, r2, #0
   15a48:	1c02      	adds	r2, r0, #0
   15a4a:	430a      	orrs	r2, r1
   15a4c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15a4e:	230c      	movs	r3, #12
   15a50:	18fa      	adds	r2, r7, r3
   15a52:	6878      	ldr	r0, [r7, #4]
   15a54:	2301      	movs	r3, #1
   15a56:	2118      	movs	r1, #24
   15a58:	4c19      	ldr	r4, [pc, #100]	; (15ac0 <lsm6dso_i3c_disable_set+0xc0>)
   15a5a:	47a0      	blx	r4
   15a5c:	0003      	movs	r3, r0
   15a5e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   15a60:	697b      	ldr	r3, [r7, #20]
   15a62:	2b00      	cmp	r3, #0
   15a64:	d108      	bne.n	15a78 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15a66:	2310      	movs	r3, #16
   15a68:	18fa      	adds	r2, r7, r3
   15a6a:	6878      	ldr	r0, [r7, #4]
   15a6c:	2301      	movs	r3, #1
   15a6e:	2162      	movs	r1, #98	; 0x62
   15a70:	4c12      	ldr	r4, [pc, #72]	; (15abc <lsm6dso_i3c_disable_set+0xbc>)
   15a72:	47a0      	blx	r4
   15a74:	0003      	movs	r3, r0
   15a76:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15a78:	697b      	ldr	r3, [r7, #20]
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	d119      	bne.n	15ab2 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   15a7e:	1cfb      	adds	r3, r7, #3
   15a80:	781b      	ldrb	r3, [r3, #0]
   15a82:	2203      	movs	r2, #3
   15a84:	4013      	ands	r3, r2
   15a86:	b2da      	uxtb	r2, r3
   15a88:	2310      	movs	r3, #16
   15a8a:	18fb      	adds	r3, r7, r3
   15a8c:	2103      	movs	r1, #3
   15a8e:	400a      	ands	r2, r1
   15a90:	00d0      	lsls	r0, r2, #3
   15a92:	781a      	ldrb	r2, [r3, #0]
   15a94:	2118      	movs	r1, #24
   15a96:	438a      	bics	r2, r1
   15a98:	1c11      	adds	r1, r2, #0
   15a9a:	1c02      	adds	r2, r0, #0
   15a9c:	430a      	orrs	r2, r1
   15a9e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15aa0:	2310      	movs	r3, #16
   15aa2:	18fa      	adds	r2, r7, r3
   15aa4:	6878      	ldr	r0, [r7, #4]
   15aa6:	2301      	movs	r3, #1
   15aa8:	2162      	movs	r1, #98	; 0x62
   15aaa:	4c05      	ldr	r4, [pc, #20]	; (15ac0 <lsm6dso_i3c_disable_set+0xc0>)
   15aac:	47a0      	blx	r4
   15aae:	0003      	movs	r3, r0
   15ab0:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15ab2:	697b      	ldr	r3, [r7, #20]
}
   15ab4:	0018      	movs	r0, r3
   15ab6:	46bd      	mov	sp, r7
   15ab8:	b007      	add	sp, #28
   15aba:	bd90      	pop	{r4, r7, pc}
   15abc:	00014eb9 	.word	0x00014eb9
   15ac0:	00014eff 	.word	0x00014eff

00015ac4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15ac4:	b590      	push	{r4, r7, lr}
   15ac6:	b085      	sub	sp, #20
   15ac8:	af00      	add	r7, sp, #0
   15aca:	6078      	str	r0, [r7, #4]
   15acc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15ace:	687b      	ldr	r3, [r7, #4]
   15ad0:	2102      	movs	r1, #2
   15ad2:	0018      	movs	r0, r3
   15ad4:	4b0e      	ldr	r3, [pc, #56]	; (15b10 <lsm6dso_fsm_enable_get+0x4c>)
   15ad6:	4798      	blx	r3
   15ad8:	0003      	movs	r3, r0
   15ada:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15adc:	68fb      	ldr	r3, [r7, #12]
   15ade:	2b00      	cmp	r3, #0
   15ae0:	d107      	bne.n	15af2 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15ae2:	683a      	ldr	r2, [r7, #0]
   15ae4:	6878      	ldr	r0, [r7, #4]
   15ae6:	2302      	movs	r3, #2
   15ae8:	2146      	movs	r1, #70	; 0x46
   15aea:	4c0a      	ldr	r4, [pc, #40]	; (15b14 <lsm6dso_fsm_enable_get+0x50>)
   15aec:	47a0      	blx	r4
   15aee:	0003      	movs	r3, r0
   15af0:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15af2:	68fb      	ldr	r3, [r7, #12]
   15af4:	2b00      	cmp	r3, #0
   15af6:	d106      	bne.n	15b06 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15af8:	687b      	ldr	r3, [r7, #4]
   15afa:	2100      	movs	r1, #0
   15afc:	0018      	movs	r0, r3
   15afe:	4b04      	ldr	r3, [pc, #16]	; (15b10 <lsm6dso_fsm_enable_get+0x4c>)
   15b00:	4798      	blx	r3
   15b02:	0003      	movs	r3, r0
   15b04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15b06:	68fb      	ldr	r3, [r7, #12]
}
   15b08:	0018      	movs	r0, r3
   15b0a:	46bd      	mov	sp, r7
   15b0c:	b005      	add	sp, #20
   15b0e:	bd90      	pop	{r4, r7, pc}
   15b10:	000157a5 	.word	0x000157a5
   15b14:	00014eb9 	.word	0x00014eb9

00015b18 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15b18:	b590      	push	{r4, r7, lr}
   15b1a:	b085      	sub	sp, #20
   15b1c:	af00      	add	r7, sp, #0
   15b1e:	6078      	str	r0, [r7, #4]
   15b20:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15b22:	687b      	ldr	r3, [r7, #4]
   15b24:	2102      	movs	r1, #2
   15b26:	0018      	movs	r0, r3
   15b28:	4b21      	ldr	r3, [pc, #132]	; (15bb0 <lsm6dso_fsm_data_rate_get+0x98>)
   15b2a:	4798      	blx	r3
   15b2c:	0003      	movs	r3, r0
   15b2e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15b30:	68fb      	ldr	r3, [r7, #12]
   15b32:	2b00      	cmp	r3, #0
   15b34:	d108      	bne.n	15b48 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15b36:	2308      	movs	r3, #8
   15b38:	18fa      	adds	r2, r7, r3
   15b3a:	6878      	ldr	r0, [r7, #4]
   15b3c:	2301      	movs	r3, #1
   15b3e:	215f      	movs	r1, #95	; 0x5f
   15b40:	4c1c      	ldr	r4, [pc, #112]	; (15bb4 <lsm6dso_fsm_data_rate_get+0x9c>)
   15b42:	47a0      	blx	r4
   15b44:	0003      	movs	r3, r0
   15b46:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15b48:	68fb      	ldr	r3, [r7, #12]
   15b4a:	2b00      	cmp	r3, #0
   15b4c:	d12b      	bne.n	15ba6 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   15b4e:	2308      	movs	r3, #8
   15b50:	18fb      	adds	r3, r7, r3
   15b52:	781b      	ldrb	r3, [r3, #0]
   15b54:	06db      	lsls	r3, r3, #27
   15b56:	0f9b      	lsrs	r3, r3, #30
   15b58:	b2db      	uxtb	r3, r3
   15b5a:	2b01      	cmp	r3, #1
   15b5c:	d00c      	beq.n	15b78 <lsm6dso_fsm_data_rate_get+0x60>
   15b5e:	dc02      	bgt.n	15b66 <lsm6dso_fsm_data_rate_get+0x4e>
   15b60:	2b00      	cmp	r3, #0
   15b62:	d005      	beq.n	15b70 <lsm6dso_fsm_data_rate_get+0x58>
   15b64:	e014      	b.n	15b90 <lsm6dso_fsm_data_rate_get+0x78>
   15b66:	2b02      	cmp	r3, #2
   15b68:	d00a      	beq.n	15b80 <lsm6dso_fsm_data_rate_get+0x68>
   15b6a:	2b03      	cmp	r3, #3
   15b6c:	d00c      	beq.n	15b88 <lsm6dso_fsm_data_rate_get+0x70>
   15b6e:	e00f      	b.n	15b90 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15b70:	683b      	ldr	r3, [r7, #0]
   15b72:	2200      	movs	r2, #0
   15b74:	701a      	strb	r2, [r3, #0]
        break;
   15b76:	e00f      	b.n	15b98 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15b78:	683b      	ldr	r3, [r7, #0]
   15b7a:	2201      	movs	r2, #1
   15b7c:	701a      	strb	r2, [r3, #0]
        break;
   15b7e:	e00b      	b.n	15b98 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   15b80:	683b      	ldr	r3, [r7, #0]
   15b82:	2202      	movs	r2, #2
   15b84:	701a      	strb	r2, [r3, #0]
        break;
   15b86:	e007      	b.n	15b98 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   15b88:	683b      	ldr	r3, [r7, #0]
   15b8a:	2203      	movs	r2, #3
   15b8c:	701a      	strb	r2, [r3, #0]
        break;
   15b8e:	e003      	b.n	15b98 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15b90:	683b      	ldr	r3, [r7, #0]
   15b92:	2200      	movs	r2, #0
   15b94:	701a      	strb	r2, [r3, #0]
        break;
   15b96:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15b98:	687b      	ldr	r3, [r7, #4]
   15b9a:	2100      	movs	r1, #0
   15b9c:	0018      	movs	r0, r3
   15b9e:	4b04      	ldr	r3, [pc, #16]	; (15bb0 <lsm6dso_fsm_data_rate_get+0x98>)
   15ba0:	4798      	blx	r3
   15ba2:	0003      	movs	r3, r0
   15ba4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15ba6:	68fb      	ldr	r3, [r7, #12]
}
   15ba8:	0018      	movs	r0, r3
   15baa:	46bd      	mov	sp, r7
   15bac:	b005      	add	sp, #20
   15bae:	bd90      	pop	{r4, r7, pc}
   15bb0:	000157a5 	.word	0x000157a5
   15bb4:	00014eb9 	.word	0x00014eb9

00015bb8 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15bb8:	b580      	push	{r7, lr}
   15bba:	b086      	sub	sp, #24
   15bbc:	af00      	add	r7, sp, #0
   15bbe:	60f8      	str	r0, [r7, #12]
   15bc0:	0008      	movs	r0, r1
   15bc2:	607a      	str	r2, [r7, #4]
   15bc4:	0019      	movs	r1, r3
   15bc6:	230b      	movs	r3, #11
   15bc8:	18fb      	adds	r3, r7, r3
   15bca:	1c02      	adds	r2, r0, #0
   15bcc:	701a      	strb	r2, [r3, #0]
   15bce:	2308      	movs	r3, #8
   15bd0:	18fb      	adds	r3, r7, r3
   15bd2:	1c0a      	adds	r2, r1, #0
   15bd4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   15bd6:	2300      	movs	r3, #0
   15bd8:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
   15bda:	4b19      	ldr	r3, [pc, #100]	; (15c40 <platform_write+0x88>)
   15bdc:	220b      	movs	r2, #11
   15bde:	18ba      	adds	r2, r7, r2
   15be0:	7812      	ldrb	r2, [r2, #0]
   15be2:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
   15be4:	2300      	movs	r3, #0
   15be6:	617b      	str	r3, [r7, #20]
   15be8:	e00a      	b.n	15c00 <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
   15bea:	697b      	ldr	r3, [r7, #20]
   15bec:	3301      	adds	r3, #1
   15bee:	697a      	ldr	r2, [r7, #20]
   15bf0:	6879      	ldr	r1, [r7, #4]
   15bf2:	188a      	adds	r2, r1, r2
   15bf4:	7811      	ldrb	r1, [r2, #0]
   15bf6:	4a12      	ldr	r2, [pc, #72]	; (15c40 <platform_write+0x88>)
   15bf8:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
   15bfa:	697b      	ldr	r3, [r7, #20]
   15bfc:	3301      	adds	r3, #1
   15bfe:	617b      	str	r3, [r7, #20]
   15c00:	2308      	movs	r3, #8
   15c02:	18fb      	adds	r3, r7, r3
   15c04:	881a      	ldrh	r2, [r3, #0]
   15c06:	697b      	ldr	r3, [r7, #20]
   15c08:	429a      	cmp	r2, r3
   15c0a:	dcee      	bgt.n	15bea <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
   15c0c:	4b0d      	ldr	r3, [pc, #52]	; (15c44 <platform_write+0x8c>)
   15c0e:	226b      	movs	r2, #107	; 0x6b
   15c10:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
   15c12:	2308      	movs	r3, #8
   15c14:	18fb      	adds	r3, r7, r3
   15c16:	881b      	ldrh	r3, [r3, #0]
   15c18:	3301      	adds	r3, #1
   15c1a:	b29a      	uxth	r2, r3
   15c1c:	4b09      	ldr	r3, [pc, #36]	; (15c44 <platform_write+0x8c>)
   15c1e:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   15c20:	4b08      	ldr	r3, [pc, #32]	; (15c44 <platform_write+0x8c>)
   15c22:	4a07      	ldr	r2, [pc, #28]	; (15c40 <platform_write+0x88>)
   15c24:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
   15c26:	4b07      	ldr	r3, [pc, #28]	; (15c44 <platform_write+0x8c>)
   15c28:	2164      	movs	r1, #100	; 0x64
   15c2a:	0018      	movs	r0, r3
   15c2c:	4b06      	ldr	r3, [pc, #24]	; (15c48 <platform_write+0x90>)
   15c2e:	4798      	blx	r3
   15c30:	0003      	movs	r3, r0
   15c32:	613b      	str	r3, [r7, #16]
	return error;
   15c34:	693b      	ldr	r3, [r7, #16]

}
   15c36:	0018      	movs	r0, r3
   15c38:	46bd      	mov	sp, r7
   15c3a:	b006      	add	sp, #24
   15c3c:	bd80      	pop	{r7, pc}
   15c3e:	46c0      	nop			; (mov r8, r8)
   15c40:	200049dc 	.word	0x200049dc
   15c44:	20004a1c 	.word	0x20004a1c
   15c48:	00014ccd 	.word	0x00014ccd

00015c4c <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b086      	sub	sp, #24
   15c50:	af00      	add	r7, sp, #0
   15c52:	60f8      	str	r0, [r7, #12]
   15c54:	0008      	movs	r0, r1
   15c56:	607a      	str	r2, [r7, #4]
   15c58:	0019      	movs	r1, r3
   15c5a:	230b      	movs	r3, #11
   15c5c:	18fb      	adds	r3, r7, r3
   15c5e:	1c02      	adds	r2, r0, #0
   15c60:	701a      	strb	r2, [r3, #0]
   15c62:	2308      	movs	r3, #8
   15c64:	18fb      	adds	r3, r7, r3
   15c66:	1c0a      	adds	r2, r1, #0
   15c68:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   15c6a:	2300      	movs	r3, #0
   15c6c:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
   15c6e:	4b13      	ldr	r3, [pc, #76]	; (15cbc <platform_read+0x70>)
   15c70:	226b      	movs	r2, #107	; 0x6b
   15c72:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   15c74:	4b11      	ldr	r3, [pc, #68]	; (15cbc <platform_read+0x70>)
   15c76:	2208      	movs	r2, #8
   15c78:	18ba      	adds	r2, r7, r2
   15c7a:	8812      	ldrh	r2, [r2, #0]
   15c7c:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   15c7e:	4b0f      	ldr	r3, [pc, #60]	; (15cbc <platform_read+0x70>)
   15c80:	687a      	ldr	r2, [r7, #4]
   15c82:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
   15c84:	4b0d      	ldr	r3, [pc, #52]	; (15cbc <platform_read+0x70>)
   15c86:	2201      	movs	r2, #1
   15c88:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   15c8a:	4b0d      	ldr	r3, [pc, #52]	; (15cc0 <platform_read+0x74>)
   15c8c:	220b      	movs	r2, #11
   15c8e:	18ba      	adds	r2, r7, r2
   15c90:	7812      	ldrb	r2, [r2, #0]
   15c92:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   15c94:	4b0a      	ldr	r3, [pc, #40]	; (15cc0 <platform_read+0x74>)
   15c96:	2200      	movs	r2, #0
   15c98:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
   15c9a:	4b08      	ldr	r3, [pc, #32]	; (15cbc <platform_read+0x70>)
   15c9c:	4a08      	ldr	r2, [pc, #32]	; (15cc0 <platform_read+0x74>)
   15c9e:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
   15ca0:	4b06      	ldr	r3, [pc, #24]	; (15cbc <platform_read+0x70>)
   15ca2:	2264      	movs	r2, #100	; 0x64
   15ca4:	2105      	movs	r1, #5
   15ca6:	0018      	movs	r0, r3
   15ca8:	4b06      	ldr	r3, [pc, #24]	; (15cc4 <platform_read+0x78>)
   15caa:	4798      	blx	r3
   15cac:	0003      	movs	r3, r0
   15cae:	617b      	str	r3, [r7, #20]
	
	return error;
   15cb0:	697b      	ldr	r3, [r7, #20]

}
   15cb2:	0018      	movs	r0, r3
   15cb4:	46bd      	mov	sp, r7
   15cb6:	b006      	add	sp, #24
   15cb8:	bd80      	pop	{r7, pc}
   15cba:	46c0      	nop			; (mov r8, r8)
   15cbc:	20004a1c 	.word	0x20004a1c
   15cc0:	200049dc 	.word	0x200049dc
   15cc4:	00014da5 	.word	0x00014da5

00015cc8 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15cc8:	b580      	push	{r7, lr}
   15cca:	af00      	add	r7, sp, #0
return &dev_ctx;
   15ccc:	4b01      	ldr	r3, [pc, #4]	; (15cd4 <GetImuStruct+0xc>)
}
   15cce:	0018      	movs	r0, r3
   15cd0:	46bd      	mov	sp, r7
   15cd2:	bd80      	pop	{r7, pc}
   15cd4:	20000020 	.word	0x20000020

00015cd8 <InitImu>:



int32_t InitImu(void)
{
   15cd8:	b580      	push	{r7, lr}
   15cda:	b082      	sub	sp, #8
   15cdc:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   15cde:	2300      	movs	r3, #0
   15ce0:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15ce2:	4b23      	ldr	r3, [pc, #140]	; (15d70 <InitImu+0x98>)
   15ce4:	2101      	movs	r1, #1
   15ce6:	0018      	movs	r0, r3
   15ce8:	4b22      	ldr	r3, [pc, #136]	; (15d74 <InitImu+0x9c>)
   15cea:	4798      	blx	r3
   15cec:	0003      	movs	r3, r0
   15cee:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   15cf0:	1cfa      	adds	r2, r7, #3
   15cf2:	4b1f      	ldr	r3, [pc, #124]	; (15d70 <InitImu+0x98>)
   15cf4:	0011      	movs	r1, r2
   15cf6:	0018      	movs	r0, r3
   15cf8:	4b1f      	ldr	r3, [pc, #124]	; (15d78 <InitImu+0xa0>)
   15cfa:	4798      	blx	r3
   15cfc:	0002      	movs	r2, r0
   15cfe:	687b      	ldr	r3, [r7, #4]
   15d00:	4313      	orrs	r3, r2
   15d02:	607b      	str	r3, [r7, #4]
  } while (rst);
   15d04:	1cfb      	adds	r3, r7, #3
   15d06:	781b      	ldrb	r3, [r3, #0]
   15d08:	2b00      	cmp	r3, #0
   15d0a:	d1f1      	bne.n	15cf0 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15d0c:	4b18      	ldr	r3, [pc, #96]	; (15d70 <InitImu+0x98>)
   15d0e:	2180      	movs	r1, #128	; 0x80
   15d10:	0018      	movs	r0, r3
   15d12:	4b1a      	ldr	r3, [pc, #104]	; (15d7c <InitImu+0xa4>)
   15d14:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15d16:	4b16      	ldr	r3, [pc, #88]	; (15d70 <InitImu+0x98>)
   15d18:	2101      	movs	r1, #1
   15d1a:	0018      	movs	r0, r3
   15d1c:	4b18      	ldr	r3, [pc, #96]	; (15d80 <InitImu+0xa8>)
   15d1e:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15d20:	4b13      	ldr	r3, [pc, #76]	; (15d70 <InitImu+0x98>)
   15d22:	2100      	movs	r1, #0
   15d24:	0018      	movs	r0, r3
   15d26:	4b17      	ldr	r3, [pc, #92]	; (15d84 <InitImu+0xac>)
   15d28:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15d2a:	4b11      	ldr	r3, [pc, #68]	; (15d70 <InitImu+0x98>)
   15d2c:	2101      	movs	r1, #1
   15d2e:	0018      	movs	r0, r3
   15d30:	4b15      	ldr	r3, [pc, #84]	; (15d88 <InitImu+0xb0>)
   15d32:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15d34:	4b0e      	ldr	r3, [pc, #56]	; (15d70 <InitImu+0x98>)
   15d36:	2101      	movs	r1, #1
   15d38:	0018      	movs	r0, r3
   15d3a:	4b14      	ldr	r3, [pc, #80]	; (15d8c <InitImu+0xb4>)
   15d3c:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15d3e:	4b0c      	ldr	r3, [pc, #48]	; (15d70 <InitImu+0x98>)
   15d40:	2100      	movs	r1, #0
   15d42:	0018      	movs	r0, r3
   15d44:	4b12      	ldr	r3, [pc, #72]	; (15d90 <InitImu+0xb8>)
   15d46:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15d48:	4b09      	ldr	r3, [pc, #36]	; (15d70 <InitImu+0x98>)
   15d4a:	2106      	movs	r1, #6
   15d4c:	0018      	movs	r0, r3
   15d4e:	4b11      	ldr	r3, [pc, #68]	; (15d94 <InitImu+0xbc>)
   15d50:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15d52:	4b07      	ldr	r3, [pc, #28]	; (15d70 <InitImu+0x98>)
   15d54:	2104      	movs	r1, #4
   15d56:	0018      	movs	r0, r3
   15d58:	4b0f      	ldr	r3, [pc, #60]	; (15d98 <InitImu+0xc0>)
   15d5a:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15d5c:	4b04      	ldr	r3, [pc, #16]	; (15d70 <InitImu+0x98>)
   15d5e:	2101      	movs	r1, #1
   15d60:	0018      	movs	r0, r3
   15d62:	4b0e      	ldr	r3, [pc, #56]	; (15d9c <InitImu+0xc4>)
   15d64:	4798      	blx	r3

  return error;
   15d66:	687b      	ldr	r3, [r7, #4]
}
   15d68:	0018      	movs	r0, r3
   15d6a:	46bd      	mov	sp, r7
   15d6c:	b002      	add	sp, #8
   15d6e:	bd80      	pop	{r7, pc}
   15d70:	20000020 	.word	0x20000020
   15d74:	00015835 	.word	0x00015835
   15d78:	000158a1 	.word	0x000158a1
   15d7c:	00015a01 	.word	0x00015a01
   15d80:	000155dd 	.word	0x000155dd
   15d84:	00015649 	.word	0x00015649
   15d88:	00014fe9 	.word	0x00014fe9
   15d8c:	00015319 	.word	0x00015319
   15d90:	00014f7d 	.word	0x00014f7d
   15d94:	000152ad 	.word	0x000152ad
   15d98:	00015949 	.word	0x00015949
   15d9c:	000158dd 	.word	0x000158dd

00015da0 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15da0:	b580      	push	{r7, lr}
   15da2:	b082      	sub	sp, #8
   15da4:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15da6:	1cfb      	adds	r3, r7, #3
   15da8:	2200      	movs	r2, #0
   15daa:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15dac:	4b11      	ldr	r3, [pc, #68]	; (15df4 <SeesawGetKeypadCount+0x54>)
   15dae:	222e      	movs	r2, #46	; 0x2e
   15db0:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15db2:	4b10      	ldr	r3, [pc, #64]	; (15df4 <SeesawGetKeypadCount+0x54>)
   15db4:	4a10      	ldr	r2, [pc, #64]	; (15df8 <SeesawGetKeypadCount+0x58>)
   15db6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15db8:	4b0e      	ldr	r3, [pc, #56]	; (15df4 <SeesawGetKeypadCount+0x54>)
   15dba:	2202      	movs	r2, #2
   15dbc:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15dbe:	4b0d      	ldr	r3, [pc, #52]	; (15df4 <SeesawGetKeypadCount+0x54>)
   15dc0:	1cfa      	adds	r2, r7, #3
   15dc2:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15dc4:	4b0b      	ldr	r3, [pc, #44]	; (15df4 <SeesawGetKeypadCount+0x54>)
   15dc6:	2201      	movs	r2, #1
   15dc8:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15dca:	4b0a      	ldr	r3, [pc, #40]	; (15df4 <SeesawGetKeypadCount+0x54>)
   15dcc:	2264      	movs	r2, #100	; 0x64
   15dce:	2100      	movs	r1, #0
   15dd0:	0018      	movs	r0, r3
   15dd2:	4b0a      	ldr	r3, [pc, #40]	; (15dfc <SeesawGetKeypadCount+0x5c>)
   15dd4:	4798      	blx	r3
   15dd6:	0003      	movs	r3, r0
   15dd8:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15dda:	687b      	ldr	r3, [r7, #4]
   15ddc:	2b00      	cmp	r3, #0
   15dde:	d003      	beq.n	15de8 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15de0:	4b07      	ldr	r3, [pc, #28]	; (15e00 <SeesawGetKeypadCount+0x60>)
   15de2:	0018      	movs	r0, r3
   15de4:	4b07      	ldr	r3, [pc, #28]	; (15e04 <SeesawGetKeypadCount+0x64>)
   15de6:	4798      	blx	r3
    }
    return count;
   15de8:	1cfb      	adds	r3, r7, #3
   15dea:	781b      	ldrb	r3, [r3, #0]
}
   15dec:	0018      	movs	r0, r3
   15dee:	46bd      	mov	sp, r7
   15df0:	b002      	add	sp, #8
   15df2:	bd80      	pop	{r7, pc}
   15df4:	20004a2c 	.word	0x20004a2c
   15df8:	00038988 	.word	0x00038988
   15dfc:	00014da5 	.word	0x00014da5
   15e00:	00038a4c 	.word	0x00038a4c
   15e04:	0001e4f5 	.word	0x0001e4f5

00015e08 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   15e08:	b580      	push	{r7, lr}
   15e0a:	b084      	sub	sp, #16
   15e0c:	af00      	add	r7, sp, #0
   15e0e:	6078      	str	r0, [r7, #4]
   15e10:	000a      	movs	r2, r1
   15e12:	1cfb      	adds	r3, r7, #3
   15e14:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   15e16:	1cfb      	adds	r3, r7, #3
   15e18:	781b      	ldrb	r3, [r3, #0]
   15e1a:	2b00      	cmp	r3, #0
   15e1c:	d101      	bne.n	15e22 <SeesawReadKeypad+0x1a>
   15e1e:	2300      	movs	r3, #0
   15e20:	e026      	b.n	15e70 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15e22:	2308      	movs	r3, #8
   15e24:	18fb      	adds	r3, r7, r3
   15e26:	4a14      	ldr	r2, [pc, #80]	; (15e78 <SeesawReadKeypad+0x70>)
   15e28:	8812      	ldrh	r2, [r2, #0]
   15e2a:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15e2c:	4b13      	ldr	r3, [pc, #76]	; (15e7c <SeesawReadKeypad+0x74>)
   15e2e:	222e      	movs	r2, #46	; 0x2e
   15e30:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15e32:	4b12      	ldr	r3, [pc, #72]	; (15e7c <SeesawReadKeypad+0x74>)
   15e34:	2208      	movs	r2, #8
   15e36:	18ba      	adds	r2, r7, r2
   15e38:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15e3a:	4b10      	ldr	r3, [pc, #64]	; (15e7c <SeesawReadKeypad+0x74>)
   15e3c:	2202      	movs	r2, #2
   15e3e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   15e40:	4b0e      	ldr	r3, [pc, #56]	; (15e7c <SeesawReadKeypad+0x74>)
   15e42:	687a      	ldr	r2, [r7, #4]
   15e44:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   15e46:	1cfb      	adds	r3, r7, #3
   15e48:	781b      	ldrb	r3, [r3, #0]
   15e4a:	b29a      	uxth	r2, r3
   15e4c:	4b0b      	ldr	r3, [pc, #44]	; (15e7c <SeesawReadKeypad+0x74>)
   15e4e:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15e50:	4b0a      	ldr	r3, [pc, #40]	; (15e7c <SeesawReadKeypad+0x74>)
   15e52:	2264      	movs	r2, #100	; 0x64
   15e54:	2100      	movs	r1, #0
   15e56:	0018      	movs	r0, r3
   15e58:	4b09      	ldr	r3, [pc, #36]	; (15e80 <SeesawReadKeypad+0x78>)
   15e5a:	4798      	blx	r3
   15e5c:	0003      	movs	r3, r0
   15e5e:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15e60:	68fb      	ldr	r3, [r7, #12]
   15e62:	2b00      	cmp	r3, #0
   15e64:	d003      	beq.n	15e6e <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15e66:	4b07      	ldr	r3, [pc, #28]	; (15e84 <SeesawReadKeypad+0x7c>)
   15e68:	0018      	movs	r0, r3
   15e6a:	4b07      	ldr	r3, [pc, #28]	; (15e88 <SeesawReadKeypad+0x80>)
   15e6c:	4798      	blx	r3
    }
    return error;
   15e6e:	68fb      	ldr	r3, [r7, #12]
}
   15e70:	0018      	movs	r0, r3
   15e72:	46bd      	mov	sp, r7
   15e74:	b004      	add	sp, #16
   15e76:	bd80      	pop	{r7, pc}
   15e78:	00038a70 	.word	0x00038a70
   15e7c:	20004a2c 	.word	0x20004a2c
   15e80:	00014da5 	.word	0x00014da5
   15e84:	00038a4c 	.word	0x00038a4c
   15e88:	0001e4f5 	.word	0x0001e4f5

00015e8c <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   15e8c:	b5b0      	push	{r4, r5, r7, lr}
   15e8e:	b086      	sub	sp, #24
   15e90:	af00      	add	r7, sp, #0
   15e92:	0005      	movs	r5, r0
   15e94:	000c      	movs	r4, r1
   15e96:	0010      	movs	r0, r2
   15e98:	0019      	movs	r1, r3
   15e9a:	1dfb      	adds	r3, r7, #7
   15e9c:	1c2a      	adds	r2, r5, #0
   15e9e:	701a      	strb	r2, [r3, #0]
   15ea0:	1dbb      	adds	r3, r7, #6
   15ea2:	1c22      	adds	r2, r4, #0
   15ea4:	701a      	strb	r2, [r3, #0]
   15ea6:	1d7b      	adds	r3, r7, #5
   15ea8:	1c02      	adds	r2, r0, #0
   15eaa:	701a      	strb	r2, [r3, #0]
   15eac:	1d3b      	adds	r3, r7, #4
   15eae:	1c0a      	adds	r2, r1, #0
   15eb0:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   15eb2:	2308      	movs	r3, #8
   15eb4:	18fb      	adds	r3, r7, r3
   15eb6:	220e      	movs	r2, #14
   15eb8:	701a      	strb	r2, [r3, #0]
   15eba:	2308      	movs	r3, #8
   15ebc:	18fb      	adds	r3, r7, r3
   15ebe:	2204      	movs	r2, #4
   15ec0:	705a      	strb	r2, [r3, #1]
   15ec2:	2308      	movs	r3, #8
   15ec4:	18fb      	adds	r3, r7, r3
   15ec6:	2200      	movs	r2, #0
   15ec8:	709a      	strb	r2, [r3, #2]
   15eca:	2308      	movs	r3, #8
   15ecc:	18fb      	adds	r3, r7, r3
   15ece:	2200      	movs	r2, #0
   15ed0:	70da      	strb	r2, [r3, #3]
   15ed2:	2308      	movs	r3, #8
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	1d7a      	adds	r2, r7, #5
   15ed8:	7812      	ldrb	r2, [r2, #0]
   15eda:	711a      	strb	r2, [r3, #4]
   15edc:	2308      	movs	r3, #8
   15ede:	18fb      	adds	r3, r7, r3
   15ee0:	1dba      	adds	r2, r7, #6
   15ee2:	7812      	ldrb	r2, [r2, #0]
   15ee4:	715a      	strb	r2, [r3, #5]
   15ee6:	2308      	movs	r3, #8
   15ee8:	18fb      	adds	r3, r7, r3
   15eea:	1d3a      	adds	r2, r7, #4
   15eec:	7812      	ldrb	r2, [r2, #0]
   15eee:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   15ef0:	1dfb      	adds	r3, r7, #7
   15ef2:	781b      	ldrb	r3, [r3, #0]
   15ef4:	b29b      	uxth	r3, r3
   15ef6:	2216      	movs	r2, #22
   15ef8:	18ba      	adds	r2, r7, r2
   15efa:	1c19      	adds	r1, r3, #0
   15efc:	1c0b      	adds	r3, r1, #0
   15efe:	18db      	adds	r3, r3, r3
   15f00:	185b      	adds	r3, r3, r1
   15f02:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   15f04:	2316      	movs	r3, #22
   15f06:	18fb      	adds	r3, r7, r3
   15f08:	881b      	ldrh	r3, [r3, #0]
   15f0a:	0a1b      	lsrs	r3, r3, #8
   15f0c:	b29b      	uxth	r3, r3
   15f0e:	b2da      	uxtb	r2, r3
   15f10:	2308      	movs	r3, #8
   15f12:	18fb      	adds	r3, r7, r3
   15f14:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15f16:	2316      	movs	r3, #22
   15f18:	18fb      	adds	r3, r7, r3
   15f1a:	881b      	ldrh	r3, [r3, #0]
   15f1c:	b2da      	uxtb	r2, r3
   15f1e:	2308      	movs	r3, #8
   15f20:	18fb      	adds	r3, r7, r3
   15f22:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   15f24:	4b09      	ldr	r3, [pc, #36]	; (15f4c <SeesawSetLed+0xc0>)
   15f26:	2208      	movs	r2, #8
   15f28:	18ba      	adds	r2, r7, r2
   15f2a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15f2c:	4b07      	ldr	r3, [pc, #28]	; (15f4c <SeesawSetLed+0xc0>)
   15f2e:	2207      	movs	r2, #7
   15f30:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15f32:	4b06      	ldr	r3, [pc, #24]	; (15f4c <SeesawSetLed+0xc0>)
   15f34:	2164      	movs	r1, #100	; 0x64
   15f36:	0018      	movs	r0, r3
   15f38:	4b05      	ldr	r3, [pc, #20]	; (15f50 <SeesawSetLed+0xc4>)
   15f3a:	4798      	blx	r3
   15f3c:	0003      	movs	r3, r0
   15f3e:	613b      	str	r3, [r7, #16]
    return error;
   15f40:	693b      	ldr	r3, [r7, #16]
}
   15f42:	0018      	movs	r0, r3
   15f44:	46bd      	mov	sp, r7
   15f46:	b006      	add	sp, #24
   15f48:	bdb0      	pop	{r4, r5, r7, pc}
   15f4a:	46c0      	nop			; (mov r8, r8)
   15f4c:	20004a2c 	.word	0x20004a2c
   15f50:	00014ccd 	.word	0x00014ccd

00015f54 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   15f54:	b580      	push	{r7, lr}
   15f56:	b082      	sub	sp, #8
   15f58:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15f5a:	003b      	movs	r3, r7
   15f5c:	4a0a      	ldr	r2, [pc, #40]	; (15f88 <SeesawOrderLedUpdate+0x34>)
   15f5e:	8812      	ldrh	r2, [r2, #0]
   15f60:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   15f62:	4b0a      	ldr	r3, [pc, #40]	; (15f8c <SeesawOrderLedUpdate+0x38>)
   15f64:	003a      	movs	r2, r7
   15f66:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   15f68:	4b08      	ldr	r3, [pc, #32]	; (15f8c <SeesawOrderLedUpdate+0x38>)
   15f6a:	2202      	movs	r2, #2
   15f6c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15f6e:	4b07      	ldr	r3, [pc, #28]	; (15f8c <SeesawOrderLedUpdate+0x38>)
   15f70:	2164      	movs	r1, #100	; 0x64
   15f72:	0018      	movs	r0, r3
   15f74:	4b06      	ldr	r3, [pc, #24]	; (15f90 <SeesawOrderLedUpdate+0x3c>)
   15f76:	4798      	blx	r3
   15f78:	0003      	movs	r3, r0
   15f7a:	607b      	str	r3, [r7, #4]
    return error;
   15f7c:	687b      	ldr	r3, [r7, #4]
}
   15f7e:	0018      	movs	r0, r3
   15f80:	46bd      	mov	sp, r7
   15f82:	b002      	add	sp, #8
   15f84:	bd80      	pop	{r7, pc}
   15f86:	46c0      	nop			; (mov r8, r8)
   15f88:	00038a74 	.word	0x00038a74
   15f8c:	20004a2c 	.word	0x20004a2c
   15f90:	00014ccd 	.word	0x00014ccd

00015f94 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   15f94:	b590      	push	{r4, r7, lr}
   15f96:	b087      	sub	sp, #28
   15f98:	af00      	add	r7, sp, #0
   15f9a:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!\r\n");
   15f9c:	4b9a      	ldr	r3, [pc, #616]	; (16208 <vUiHandlerTask+0x274>)
   15f9e:	0018      	movs	r0, r3
   15fa0:	4b9a      	ldr	r3, [pc, #616]	; (1620c <vUiHandlerTask+0x278>)
   15fa2:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   15fa4:	4b9a      	ldr	r3, [pc, #616]	; (16210 <vUiHandlerTask+0x27c>)
   15fa6:	2201      	movs	r2, #1
   15fa8:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   15faa:	4b9a      	ldr	r3, [pc, #616]	; (16214 <vUiHandlerTask+0x280>)
   15fac:	4798      	blx	r3
    //gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
    //gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
	gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   15fae:	4b9a      	ldr	r3, [pc, #616]	; (16218 <vUiHandlerTask+0x284>)
   15fb0:	489a      	ldr	r0, [pc, #616]	; (1621c <vUiHandlerTask+0x288>)
   15fb2:	2208      	movs	r2, #8
   15fb4:	2100      	movs	r1, #0
   15fb6:	4c9a      	ldr	r4, [pc, #616]	; (16220 <vUiHandlerTask+0x28c>)
   15fb8:	47a0      	blx	r4
	gfx_mono_draw_string("IoTracking", 0, 18, &sysfont);
   15fba:	4b97      	ldr	r3, [pc, #604]	; (16218 <vUiHandlerTask+0x284>)
   15fbc:	4899      	ldr	r0, [pc, #612]	; (16224 <vUiHandlerTask+0x290>)
   15fbe:	2212      	movs	r2, #18
   15fc0:	2100      	movs	r1, #0
   15fc2:	4c97      	ldr	r4, [pc, #604]	; (16220 <vUiHandlerTask+0x28c>)
   15fc4:	47a0      	blx	r4
	gfx_mono_draw_string("Derek Zhou", 0, 28, &sysfont);
   15fc6:	4b94      	ldr	r3, [pc, #592]	; (16218 <vUiHandlerTask+0x284>)
   15fc8:	4897      	ldr	r0, [pc, #604]	; (16228 <vUiHandlerTask+0x294>)
   15fca:	221c      	movs	r2, #28
   15fcc:	2100      	movs	r1, #0
   15fce:	4c94      	ldr	r4, [pc, #592]	; (16220 <vUiHandlerTask+0x28c>)
   15fd0:	47a0      	blx	r4
	gfx_mono_draw_string("Weihao H.", 0, 38, &sysfont);
   15fd2:	4b91      	ldr	r3, [pc, #580]	; (16218 <vUiHandlerTask+0x284>)
   15fd4:	4895      	ldr	r0, [pc, #596]	; (1622c <vUiHandlerTask+0x298>)
   15fd6:	2226      	movs	r2, #38	; 0x26
   15fd8:	2100      	movs	r1, #0
   15fda:	4c91      	ldr	r4, [pc, #580]	; (16220 <vUiHandlerTask+0x28c>)
   15fdc:	47a0      	blx	r4

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   15fde:	4b8c      	ldr	r3, [pc, #560]	; (16210 <vUiHandlerTask+0x27c>)
   15fe0:	781b      	ldrb	r3, [r3, #0]
   15fe2:	2b01      	cmp	r3, #1
   15fe4:	d100      	bne.n	15fe8 <vUiHandlerTask+0x54>
   15fe6:	e107      	b.n	161f8 <vUiHandlerTask+0x264>
   15fe8:	2b02      	cmp	r3, #2
   15fea:	d002      	beq.n	15ff2 <vUiHandlerTask+0x5e>
   15fec:	2b00      	cmp	r3, #0
   15fee:	d06e      	beq.n	160ce <vUiHandlerTask+0x13a>
   15ff0:	e0fe      	b.n	161f0 <vUiHandlerTask+0x25c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   15ff2:	4b8f      	ldr	r3, [pc, #572]	; (16230 <vUiHandlerTask+0x29c>)
   15ff4:	2200      	movs	r2, #0
   15ff6:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   15ff8:	4b8e      	ldr	r3, [pc, #568]	; (16234 <vUiHandlerTask+0x2a0>)
   15ffa:	2201      	movs	r2, #1
   15ffc:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   15ffe:	4b8e      	ldr	r3, [pc, #568]	; (16238 <vUiHandlerTask+0x2a4>)
   16000:	2214      	movs	r2, #20
   16002:	21ff      	movs	r1, #255	; 0xff
   16004:	0018      	movs	r0, r3
   16006:	4b8d      	ldr	r3, [pc, #564]	; (1623c <vUiHandlerTask+0x2a8>)
   16008:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   1600a:	4b8d      	ldr	r3, [pc, #564]	; (16240 <vUiHandlerTask+0x2ac>)
   1600c:	2200      	movs	r2, #0
   1600e:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   16010:	2317      	movs	r3, #23
   16012:	18fc      	adds	r4, r7, r3
   16014:	4b8b      	ldr	r3, [pc, #556]	; (16244 <vUiHandlerTask+0x2b0>)
   16016:	4798      	blx	r3
   16018:	0003      	movs	r3, r0
   1601a:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   1601c:	2317      	movs	r3, #23
   1601e:	18fb      	adds	r3, r7, r3
   16020:	781b      	ldrb	r3, [r3, #0]
   16022:	2b0f      	cmp	r3, #15
   16024:	d903      	bls.n	1602e <vUiHandlerTask+0x9a>
   16026:	2317      	movs	r3, #23
   16028:	18fb      	adds	r3, r7, r3
   1602a:	2210      	movs	r2, #16
   1602c:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   1602e:	2317      	movs	r3, #23
   16030:	18fb      	adds	r3, r7, r3
   16032:	781b      	ldrb	r3, [r3, #0]
   16034:	2b00      	cmp	r3, #0
   16036:	d007      	beq.n	16048 <vUiHandlerTask+0xb4>
                    SeesawReadKeypad(buttons,
   16038:	2317      	movs	r3, #23
   1603a:	18fb      	adds	r3, r7, r3
   1603c:	781a      	ldrb	r2, [r3, #0]
   1603e:	4b82      	ldr	r3, [pc, #520]	; (16248 <vUiHandlerTask+0x2b4>)
   16040:	0011      	movs	r1, r2
   16042:	0018      	movs	r0, r3
   16044:	4b81      	ldr	r3, [pc, #516]	; (1624c <vUiHandlerTask+0x2b8>)
   16046:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   16048:	4b7f      	ldr	r3, [pc, #508]	; (16248 <vUiHandlerTask+0x2b4>)
   1604a:	2210      	movs	r2, #16
   1604c:	2100      	movs	r1, #0
   1604e:	0018      	movs	r0, r3
   16050:	4b7a      	ldr	r3, [pc, #488]	; (1623c <vUiHandlerTask+0x2a8>)
   16052:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   16054:	4b7e      	ldr	r3, [pc, #504]	; (16250 <vUiHandlerTask+0x2bc>)
   16056:	781b      	ldrb	r3, [r3, #0]
   16058:	b2d9      	uxtb	r1, r3
   1605a:	4b7e      	ldr	r3, [pc, #504]	; (16254 <vUiHandlerTask+0x2c0>)
   1605c:	781b      	ldrb	r3, [r3, #0]
   1605e:	b2da      	uxtb	r2, r3
   16060:	4b7d      	ldr	r3, [pc, #500]	; (16258 <vUiHandlerTask+0x2c4>)
   16062:	781b      	ldrb	r3, [r3, #0]
   16064:	b2db      	uxtb	r3, r3
   16066:	2000      	movs	r0, #0
   16068:	4c7c      	ldr	r4, [pc, #496]	; (1625c <vUiHandlerTask+0x2c8>)
   1606a:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1606c:	4b7c      	ldr	r3, [pc, #496]	; (16260 <vUiHandlerTask+0x2cc>)
   1606e:	4798      	blx	r3
                vTaskDelay(1000);
   16070:	23fa      	movs	r3, #250	; 0xfa
   16072:	009b      	lsls	r3, r3, #2
   16074:	0018      	movs	r0, r3
   16076:	4b7b      	ldr	r3, [pc, #492]	; (16264 <vUiHandlerTask+0x2d0>)
   16078:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   1607a:	2300      	movs	r3, #0
   1607c:	2200      	movs	r2, #0
   1607e:	2100      	movs	r1, #0
   16080:	2000      	movs	r0, #0
   16082:	4c76      	ldr	r4, [pc, #472]	; (1625c <vUiHandlerTask+0x2c8>)
   16084:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   16086:	4b72      	ldr	r3, [pc, #456]	; (16250 <vUiHandlerTask+0x2bc>)
   16088:	781b      	ldrb	r3, [r3, #0]
   1608a:	b2d9      	uxtb	r1, r3
   1608c:	4b71      	ldr	r3, [pc, #452]	; (16254 <vUiHandlerTask+0x2c0>)
   1608e:	781b      	ldrb	r3, [r3, #0]
   16090:	b2da      	uxtb	r2, r3
   16092:	4b71      	ldr	r3, [pc, #452]	; (16258 <vUiHandlerTask+0x2c4>)
   16094:	781b      	ldrb	r3, [r3, #0]
   16096:	b2db      	uxtb	r3, r3
   16098:	200f      	movs	r0, #15
   1609a:	4c70      	ldr	r4, [pc, #448]	; (1625c <vUiHandlerTask+0x2c8>)
   1609c:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1609e:	4b70      	ldr	r3, [pc, #448]	; (16260 <vUiHandlerTask+0x2cc>)
   160a0:	4798      	blx	r3
                vTaskDelay(1000);
   160a2:	23fa      	movs	r3, #250	; 0xfa
   160a4:	009b      	lsls	r3, r3, #2
   160a6:	0018      	movs	r0, r3
   160a8:	4b6e      	ldr	r3, [pc, #440]	; (16264 <vUiHandlerTask+0x2d0>)
   160aa:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   160ac:	2300      	movs	r3, #0
   160ae:	2200      	movs	r2, #0
   160b0:	2100      	movs	r1, #0
   160b2:	200f      	movs	r0, #15
   160b4:	4c69      	ldr	r4, [pc, #420]	; (1625c <vUiHandlerTask+0x2c8>)
   160b6:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   160b8:	4b69      	ldr	r3, [pc, #420]	; (16260 <vUiHandlerTask+0x2cc>)
   160ba:	4798      	blx	r3
                vTaskDelay(1000);
   160bc:	23fa      	movs	r3, #250	; 0xfa
   160be:	009b      	lsls	r3, r3, #2
   160c0:	0018      	movs	r0, r3
   160c2:	4b68      	ldr	r3, [pc, #416]	; (16264 <vUiHandlerTask+0x2d0>)
   160c4:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   160c6:	4b52      	ldr	r3, [pc, #328]	; (16210 <vUiHandlerTask+0x27c>)
   160c8:	2200      	movs	r2, #0
   160ca:	701a      	strb	r2, [r3, #0]

                break;
   160cc:	e097      	b.n	161fe <vUiHandlerTask+0x26a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   160ce:	2316      	movs	r3, #22
   160d0:	18fc      	adds	r4, r7, r3
   160d2:	4b5c      	ldr	r3, [pc, #368]	; (16244 <vUiHandlerTask+0x2b0>)
   160d4:	4798      	blx	r3
   160d6:	0003      	movs	r3, r0
   160d8:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   160da:	4b5b      	ldr	r3, [pc, #364]	; (16248 <vUiHandlerTask+0x2b4>)
   160dc:	2210      	movs	r2, #16
   160de:	2100      	movs	r1, #0
   160e0:	0018      	movs	r0, r3
   160e2:	4b56      	ldr	r3, [pc, #344]	; (1623c <vUiHandlerTask+0x2a8>)
   160e4:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   160e6:	2316      	movs	r3, #22
   160e8:	18fb      	adds	r3, r7, r3
   160ea:	781b      	ldrb	r3, [r3, #0]
   160ec:	2b0f      	cmp	r3, #15
   160ee:	d903      	bls.n	160f8 <vUiHandlerTask+0x164>
                    numPresses = BUTTON_PRESSES_MAX;
   160f0:	2316      	movs	r3, #22
   160f2:	18fb      	adds	r3, r7, r3
   160f4:	2210      	movs	r2, #16
   160f6:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   160f8:	2316      	movs	r3, #22
   160fa:	18fb      	adds	r3, r7, r3
   160fc:	781b      	ldrb	r3, [r3, #0]
   160fe:	2b00      	cmp	r3, #0
   16100:	d065      	beq.n	161ce <vUiHandlerTask+0x23a>
   16102:	2316      	movs	r3, #22
   16104:	18fb      	adds	r3, r7, r3
   16106:	781a      	ldrb	r2, [r3, #0]
   16108:	4b4f      	ldr	r3, [pc, #316]	; (16248 <vUiHandlerTask+0x2b4>)
   1610a:	0011      	movs	r1, r2
   1610c:	0018      	movs	r0, r3
   1610e:	4b4f      	ldr	r3, [pc, #316]	; (1624c <vUiHandlerTask+0x2b8>)
   16110:	4798      	blx	r3
   16112:	1e03      	subs	r3, r0, #0
   16114:	d15b      	bne.n	161ce <vUiHandlerTask+0x23a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   16116:	2300      	movs	r3, #0
   16118:	613b      	str	r3, [r7, #16]
   1611a:	e050      	b.n	161be <vUiHandlerTask+0x22a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   1611c:	4a4a      	ldr	r2, [pc, #296]	; (16248 <vUiHandlerTask+0x2b4>)
   1611e:	693b      	ldr	r3, [r7, #16]
   16120:	18d3      	adds	r3, r2, r3
   16122:	781b      	ldrb	r3, [r3, #0]
   16124:	089b      	lsrs	r3, r3, #2
   16126:	b2db      	uxtb	r3, r3
   16128:	2b00      	cmp	r3, #0
   1612a:	da00      	bge.n	1612e <vUiHandlerTask+0x19a>
   1612c:	3307      	adds	r3, #7
   1612e:	10db      	asrs	r3, r3, #3
   16130:	b2db      	uxtb	r3, r3
   16132:	009b      	lsls	r3, r3, #2
   16134:	b2d9      	uxtb	r1, r3
   16136:	4a44      	ldr	r2, [pc, #272]	; (16248 <vUiHandlerTask+0x2b4>)
   16138:	693b      	ldr	r3, [r7, #16]
   1613a:	18d3      	adds	r3, r2, r3
   1613c:	781b      	ldrb	r3, [r3, #0]
   1613e:	089b      	lsrs	r3, r3, #2
   16140:	b2db      	uxtb	r3, r3
   16142:	2207      	movs	r2, #7
   16144:	4013      	ands	r3, r2
   16146:	b2da      	uxtb	r2, r3
   16148:	230f      	movs	r3, #15
   1614a:	18fb      	adds	r3, r7, r3
   1614c:	188a      	adds	r2, r1, r2
   1614e:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   16150:	4a3d      	ldr	r2, [pc, #244]	; (16248 <vUiHandlerTask+0x2b4>)
   16152:	693b      	ldr	r3, [r7, #16]
   16154:	18d3      	adds	r3, r2, r3
   16156:	781a      	ldrb	r2, [r3, #0]
   16158:	230e      	movs	r3, #14
   1615a:	18fb      	adds	r3, r7, r3
   1615c:	2103      	movs	r1, #3
   1615e:	400a      	ands	r2, r1
   16160:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   16162:	230e      	movs	r3, #14
   16164:	18fb      	adds	r3, r7, r3
   16166:	781b      	ldrb	r3, [r3, #0]
   16168:	2b03      	cmp	r3, #3
   1616a:	d10f      	bne.n	1618c <vUiHandlerTask+0x1f8>
                            SeesawSetLed(keynum, red, green, blue);
   1616c:	4b38      	ldr	r3, [pc, #224]	; (16250 <vUiHandlerTask+0x2bc>)
   1616e:	781b      	ldrb	r3, [r3, #0]
   16170:	b2d9      	uxtb	r1, r3
   16172:	4b38      	ldr	r3, [pc, #224]	; (16254 <vUiHandlerTask+0x2c0>)
   16174:	781b      	ldrb	r3, [r3, #0]
   16176:	b2da      	uxtb	r2, r3
   16178:	4b37      	ldr	r3, [pc, #220]	; (16258 <vUiHandlerTask+0x2c4>)
   1617a:	781b      	ldrb	r3, [r3, #0]
   1617c:	b2dc      	uxtb	r4, r3
   1617e:	230f      	movs	r3, #15
   16180:	18fb      	adds	r3, r7, r3
   16182:	7818      	ldrb	r0, [r3, #0]
   16184:	0023      	movs	r3, r4
   16186:	4c35      	ldr	r4, [pc, #212]	; (1625c <vUiHandlerTask+0x2c8>)
   16188:	47a0      	blx	r4
   1618a:	e015      	b.n	161b8 <vUiHandlerTask+0x224>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   1618c:	230f      	movs	r3, #15
   1618e:	18fb      	adds	r3, r7, r3
   16190:	7818      	ldrb	r0, [r3, #0]
   16192:	2300      	movs	r3, #0
   16194:	2200      	movs	r2, #0
   16196:	2100      	movs	r1, #0
   16198:	4c30      	ldr	r4, [pc, #192]	; (1625c <vUiHandlerTask+0x2c8>)
   1619a:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   1619c:	4b24      	ldr	r3, [pc, #144]	; (16230 <vUiHandlerTask+0x29c>)
   1619e:	781b      	ldrb	r3, [r3, #0]
   161a0:	0019      	movs	r1, r3
   161a2:	4b25      	ldr	r3, [pc, #148]	; (16238 <vUiHandlerTask+0x2a4>)
   161a4:	220f      	movs	r2, #15
   161a6:	18ba      	adds	r2, r7, r2
   161a8:	7812      	ldrb	r2, [r2, #0]
   161aa:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   161ac:	4b20      	ldr	r3, [pc, #128]	; (16230 <vUiHandlerTask+0x29c>)
   161ae:	781b      	ldrb	r3, [r3, #0]
   161b0:	3301      	adds	r3, #1
   161b2:	b2da      	uxtb	r2, r3
   161b4:	4b1e      	ldr	r3, [pc, #120]	; (16230 <vUiHandlerTask+0x29c>)
   161b6:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   161b8:	693b      	ldr	r3, [r7, #16]
   161ba:	3301      	adds	r3, #1
   161bc:	613b      	str	r3, [r7, #16]
   161be:	2316      	movs	r3, #22
   161c0:	18fb      	adds	r3, r7, r3
   161c2:	781a      	ldrb	r2, [r3, #0]
   161c4:	693b      	ldr	r3, [r7, #16]
   161c6:	429a      	cmp	r2, r3
   161c8:	dca8      	bgt.n	1611c <vUiHandlerTask+0x188>
                        }
                    }
                    SeesawOrderLedUpdate();
   161ca:	4b25      	ldr	r3, [pc, #148]	; (16260 <vUiHandlerTask+0x2cc>)
   161cc:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   161ce:	4b18      	ldr	r3, [pc, #96]	; (16230 <vUiHandlerTask+0x29c>)
   161d0:	781a      	ldrb	r2, [r3, #0]
   161d2:	4b18      	ldr	r3, [pc, #96]	; (16234 <vUiHandlerTask+0x2a0>)
   161d4:	781b      	ldrb	r3, [r3, #0]
   161d6:	429a      	cmp	r2, r3
   161d8:	d203      	bcs.n	161e2 <vUiHandlerTask+0x24e>
   161da:	4b15      	ldr	r3, [pc, #84]	; (16230 <vUiHandlerTask+0x29c>)
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	2b13      	cmp	r3, #19
   161e0:	d90c      	bls.n	161fc <vUiHandlerTask+0x268>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   161e2:	4b17      	ldr	r3, [pc, #92]	; (16240 <vUiHandlerTask+0x2ac>)
   161e4:	2201      	movs	r2, #1
   161e6:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   161e8:	4b09      	ldr	r3, [pc, #36]	; (16210 <vUiHandlerTask+0x27c>)
   161ea:	2201      	movs	r2, #1
   161ec:	701a      	strb	r2, [r3, #0]
                }

                break;
   161ee:	e005      	b.n	161fc <vUiHandlerTask+0x268>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   161f0:	4b07      	ldr	r3, [pc, #28]	; (16210 <vUiHandlerTask+0x27c>)
   161f2:	2200      	movs	r2, #0
   161f4:	701a      	strb	r2, [r3, #0]
                break;
   161f6:	e002      	b.n	161fe <vUiHandlerTask+0x26a>
                break;
   161f8:	46c0      	nop			; (mov r8, r8)
   161fa:	e000      	b.n	161fe <vUiHandlerTask+0x26a>
                break;
   161fc:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   161fe:	2032      	movs	r0, #50	; 0x32
   16200:	4b18      	ldr	r3, [pc, #96]	; (16264 <vUiHandlerTask+0x2d0>)
   16202:	4798      	blx	r3
        switch (uiState) {
   16204:	e6eb      	b.n	15fde <vUiHandlerTask+0x4a>
   16206:	46c0      	nop			; (mov r8, r8)
   16208:	00038a9c 	.word	0x00038a9c
   1620c:	0001e4f5 	.word	0x0001e4f5
   16210:	20004a74 	.word	0x20004a74
   16214:	0001287d 	.word	0x0001287d
   16218:	20000000 	.word	0x20000000
   1621c:	00038ab0 	.word	0x00038ab0
   16220:	00012721 	.word	0x00012721
   16224:	00038ab8 	.word	0x00038ab8
   16228:	00038ac4 	.word	0x00038ac4
   1622c:	00038ad0 	.word	0x00038ad0
   16230:	20000631 	.word	0x20000631
   16234:	20000632 	.word	0x20000632
   16238:	20004a3c 	.word	0x20004a3c
   1623c:	00035377 	.word	0x00035377
   16240:	20000633 	.word	0x20000633
   16244:	00015da1 	.word	0x00015da1
   16248:	20004a64 	.word	0x20004a64
   1624c:	00015e09 	.word	0x00015e09
   16250:	20000630 	.word	0x20000630
   16254:	2000002c 	.word	0x2000002c
   16258:	2000002d 	.word	0x2000002d
   1625c:	00015e8d 	.word	0x00015e8d
   16260:	00015f55 	.word	0x00015f55
   16264:	0001c8a1 	.word	0x0001c8a1

00016268 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   16268:	b590      	push	{r4, r7, lr}
   1626a:	b083      	sub	sp, #12
   1626c:	af00      	add	r7, sp, #0
   1626e:	0004      	movs	r4, r0
   16270:	0008      	movs	r0, r1
   16272:	0011      	movs	r1, r2
   16274:	1dfb      	adds	r3, r7, #7
   16276:	1c22      	adds	r2, r4, #0
   16278:	701a      	strb	r2, [r3, #0]
   1627a:	1dbb      	adds	r3, r7, #6
   1627c:	1c02      	adds	r2, r0, #0
   1627e:	701a      	strb	r2, [r3, #0]
   16280:	1d7b      	adds	r3, r7, #5
   16282:	1c0a      	adds	r2, r1, #0
   16284:	701a      	strb	r2, [r3, #0]
    red = r;
   16286:	4b08      	ldr	r3, [pc, #32]	; (162a8 <UIChangeColors+0x40>)
   16288:	1dfa      	adds	r2, r7, #7
   1628a:	7812      	ldrb	r2, [r2, #0]
   1628c:	701a      	strb	r2, [r3, #0]
    green = g;
   1628e:	4b07      	ldr	r3, [pc, #28]	; (162ac <UIChangeColors+0x44>)
   16290:	1dba      	adds	r2, r7, #6
   16292:	7812      	ldrb	r2, [r2, #0]
   16294:	701a      	strb	r2, [r3, #0]
    blue = b;
   16296:	4b06      	ldr	r3, [pc, #24]	; (162b0 <UIChangeColors+0x48>)
   16298:	1d7a      	adds	r2, r7, #5
   1629a:	7812      	ldrb	r2, [r2, #0]
   1629c:	701a      	strb	r2, [r3, #0]
}
   1629e:	46c0      	nop			; (mov r8, r8)
   162a0:	46bd      	mov	sp, r7
   162a2:	b003      	add	sp, #12
   162a4:	bd90      	pop	{r4, r7, pc}
   162a6:	46c0      	nop			; (mov r8, r8)
   162a8:	20000630 	.word	0x20000630
   162ac:	2000002c 	.word	0x2000002c
   162b0:	2000002d 	.word	0x2000002d

000162b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   162b4:	b580      	push	{r7, lr}
   162b6:	b084      	sub	sp, #16
   162b8:	af00      	add	r7, sp, #0
   162ba:	0002      	movs	r2, r0
   162bc:	1dfb      	adds	r3, r7, #7
   162be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   162c0:	230f      	movs	r3, #15
   162c2:	18fb      	adds	r3, r7, r3
   162c4:	1dfa      	adds	r2, r7, #7
   162c6:	7812      	ldrb	r2, [r2, #0]
   162c8:	09d2      	lsrs	r2, r2, #7
   162ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   162cc:	230e      	movs	r3, #14
   162ce:	18fb      	adds	r3, r7, r3
   162d0:	1dfa      	adds	r2, r7, #7
   162d2:	7812      	ldrb	r2, [r2, #0]
   162d4:	0952      	lsrs	r2, r2, #5
   162d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   162d8:	4b0d      	ldr	r3, [pc, #52]	; (16310 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   162da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   162dc:	230f      	movs	r3, #15
   162de:	18fb      	adds	r3, r7, r3
   162e0:	781b      	ldrb	r3, [r3, #0]
   162e2:	2b00      	cmp	r3, #0
   162e4:	d10f      	bne.n	16306 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   162e6:	230f      	movs	r3, #15
   162e8:	18fb      	adds	r3, r7, r3
   162ea:	781b      	ldrb	r3, [r3, #0]
   162ec:	009b      	lsls	r3, r3, #2
   162ee:	2210      	movs	r2, #16
   162f0:	4694      	mov	ip, r2
   162f2:	44bc      	add	ip, r7
   162f4:	4463      	add	r3, ip
   162f6:	3b08      	subs	r3, #8
   162f8:	681a      	ldr	r2, [r3, #0]
   162fa:	230e      	movs	r3, #14
   162fc:	18fb      	adds	r3, r7, r3
   162fe:	781b      	ldrb	r3, [r3, #0]
   16300:	01db      	lsls	r3, r3, #7
   16302:	18d3      	adds	r3, r2, r3
   16304:	e000      	b.n	16308 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16306:	2300      	movs	r3, #0
	}
}
   16308:	0018      	movs	r0, r3
   1630a:	46bd      	mov	sp, r7
   1630c:	b004      	add	sp, #16
   1630e:	bd80      	pop	{r7, pc}
   16310:	41004400 	.word	0x41004400

00016314 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16314:	b580      	push	{r7, lr}
   16316:	b082      	sub	sp, #8
   16318:	af00      	add	r7, sp, #0
   1631a:	0002      	movs	r2, r0
   1631c:	1dfb      	adds	r3, r7, #7
   1631e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16320:	1dfb      	adds	r3, r7, #7
   16322:	781b      	ldrb	r3, [r3, #0]
   16324:	0018      	movs	r0, r3
   16326:	4b03      	ldr	r3, [pc, #12]	; (16334 <port_get_group_from_gpio_pin+0x20>)
   16328:	4798      	blx	r3
   1632a:	0003      	movs	r3, r0
}
   1632c:	0018      	movs	r0, r3
   1632e:	46bd      	mov	sp, r7
   16330:	b002      	add	sp, #8
   16332:	bd80      	pop	{r7, pc}
   16334:	000162b5 	.word	0x000162b5

00016338 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16338:	b580      	push	{r7, lr}
   1633a:	b084      	sub	sp, #16
   1633c:	af00      	add	r7, sp, #0
   1633e:	0002      	movs	r2, r0
   16340:	1dfb      	adds	r3, r7, #7
   16342:	701a      	strb	r2, [r3, #0]
   16344:	1dbb      	adds	r3, r7, #6
   16346:	1c0a      	adds	r2, r1, #0
   16348:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1634a:	1dfb      	adds	r3, r7, #7
   1634c:	781b      	ldrb	r3, [r3, #0]
   1634e:	0018      	movs	r0, r3
   16350:	4b0d      	ldr	r3, [pc, #52]	; (16388 <port_pin_set_output_level+0x50>)
   16352:	4798      	blx	r3
   16354:	0003      	movs	r3, r0
   16356:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16358:	1dfb      	adds	r3, r7, #7
   1635a:	781b      	ldrb	r3, [r3, #0]
   1635c:	221f      	movs	r2, #31
   1635e:	4013      	ands	r3, r2
   16360:	2201      	movs	r2, #1
   16362:	409a      	lsls	r2, r3
   16364:	0013      	movs	r3, r2
   16366:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16368:	1dbb      	adds	r3, r7, #6
   1636a:	781b      	ldrb	r3, [r3, #0]
   1636c:	2b00      	cmp	r3, #0
   1636e:	d003      	beq.n	16378 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16370:	68fb      	ldr	r3, [r7, #12]
   16372:	68ba      	ldr	r2, [r7, #8]
   16374:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16376:	e002      	b.n	1637e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16378:	68fb      	ldr	r3, [r7, #12]
   1637a:	68ba      	ldr	r2, [r7, #8]
   1637c:	615a      	str	r2, [r3, #20]
}
   1637e:	46c0      	nop			; (mov r8, r8)
   16380:	46bd      	mov	sp, r7
   16382:	b004      	add	sp, #16
   16384:	bd80      	pop	{r7, pc}
   16386:	46c0      	nop			; (mov r8, r8)
   16388:	00016315 	.word	0x00016315

0001638c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   1638c:	b580      	push	{r7, lr}
   1638e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16390:	4b02      	ldr	r3, [pc, #8]	; (1639c <init_state+0x10>)
   16392:	2200      	movs	r2, #0
   16394:	701a      	strb	r2, [r3, #0]
}
   16396:	46c0      	nop			; (mov r8, r8)
   16398:	46bd      	mov	sp, r7
   1639a:	bd80      	pop	{r7, pc}
   1639c:	20000649 	.word	0x20000649

000163a0 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   163a0:	b580      	push	{r7, lr}
   163a2:	b082      	sub	sp, #8
   163a4:	af00      	add	r7, sp, #0
   163a6:	0002      	movs	r2, r0
   163a8:	1dfb      	adds	r3, r7, #7
   163aa:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   163ac:	1dfb      	adds	r3, r7, #7
   163ae:	781b      	ldrb	r3, [r3, #0]
   163b0:	b25b      	sxtb	r3, r3
   163b2:	43db      	mvns	r3, r3
   163b4:	b25b      	sxtb	r3, r3
   163b6:	4a06      	ldr	r2, [pc, #24]	; (163d0 <clear_state+0x30>)
   163b8:	7812      	ldrb	r2, [r2, #0]
   163ba:	b252      	sxtb	r2, r2
   163bc:	4013      	ands	r3, r2
   163be:	b25b      	sxtb	r3, r3
   163c0:	b2da      	uxtb	r2, r3
   163c2:	4b03      	ldr	r3, [pc, #12]	; (163d0 <clear_state+0x30>)
   163c4:	701a      	strb	r2, [r3, #0]
}
   163c6:	46c0      	nop			; (mov r8, r8)
   163c8:	46bd      	mov	sp, r7
   163ca:	b002      	add	sp, #8
   163cc:	bd80      	pop	{r7, pc}
   163ce:	46c0      	nop			; (mov r8, r8)
   163d0:	20000649 	.word	0x20000649

000163d4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   163d4:	b580      	push	{r7, lr}
   163d6:	b082      	sub	sp, #8
   163d8:	af00      	add	r7, sp, #0
   163da:	0002      	movs	r2, r0
   163dc:	1dfb      	adds	r3, r7, #7
   163de:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   163e0:	4b05      	ldr	r3, [pc, #20]	; (163f8 <add_state+0x24>)
   163e2:	781a      	ldrb	r2, [r3, #0]
   163e4:	1dfb      	adds	r3, r7, #7
   163e6:	781b      	ldrb	r3, [r3, #0]
   163e8:	4313      	orrs	r3, r2
   163ea:	b2da      	uxtb	r2, r3
   163ec:	4b02      	ldr	r3, [pc, #8]	; (163f8 <add_state+0x24>)
   163ee:	701a      	strb	r2, [r3, #0]
}
   163f0:	46c0      	nop			; (mov r8, r8)
   163f2:	46bd      	mov	sp, r7
   163f4:	b002      	add	sp, #8
   163f6:	bd80      	pop	{r7, pc}
   163f8:	20000649 	.word	0x20000649

000163fc <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   163fc:	b580      	push	{r7, lr}
   163fe:	b082      	sub	sp, #8
   16400:	af00      	add	r7, sp, #0
   16402:	0002      	movs	r2, r0
   16404:	1dfb      	adds	r3, r7, #7
   16406:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16408:	4b06      	ldr	r3, [pc, #24]	; (16424 <is_state_set+0x28>)
   1640a:	781b      	ldrb	r3, [r3, #0]
   1640c:	1dfa      	adds	r2, r7, #7
   1640e:	7812      	ldrb	r2, [r2, #0]
   16410:	4013      	ands	r3, r2
   16412:	b2db      	uxtb	r3, r3
   16414:	1e5a      	subs	r2, r3, #1
   16416:	4193      	sbcs	r3, r2
   16418:	b2db      	uxtb	r3, r3
}
   1641a:	0018      	movs	r0, r3
   1641c:	46bd      	mov	sp, r7
   1641e:	b002      	add	sp, #8
   16420:	bd80      	pop	{r7, pc}
   16422:	46c0      	nop			; (mov r8, r8)
   16424:	20000649 	.word	0x20000649

00016428 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16428:	b590      	push	{r4, r7, lr}
   1642a:	b085      	sub	sp, #20
   1642c:	af00      	add	r7, sp, #0
   1642e:	6078      	str	r0, [r7, #4]
   16430:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16432:	687b      	ldr	r3, [r7, #4]
   16434:	2b00      	cmp	r3, #0
   16436:	d002      	beq.n	1643e <is_exist_file+0x16>
   16438:	683b      	ldr	r3, [r7, #0]
   1643a:	2b00      	cmp	r3, #0
   1643c:	d101      	bne.n	16442 <is_exist_file+0x1a>
        return false;
   1643e:	2300      	movs	r3, #0
   16440:	e013      	b.n	1646a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16442:	230f      	movs	r3, #15
   16444:	18fc      	adds	r4, r7, r3
   16446:	6839      	ldr	r1, [r7, #0]
   16448:	4b0a      	ldr	r3, [pc, #40]	; (16474 <is_exist_file+0x4c>)
   1644a:	2200      	movs	r2, #0
   1644c:	0018      	movs	r0, r3
   1644e:	4b0a      	ldr	r3, [pc, #40]	; (16478 <is_exist_file+0x50>)
   16450:	4798      	blx	r3
   16452:	0003      	movs	r3, r0
   16454:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16456:	4b07      	ldr	r3, [pc, #28]	; (16474 <is_exist_file+0x4c>)
   16458:	0018      	movs	r0, r3
   1645a:	4b08      	ldr	r3, [pc, #32]	; (1647c <is_exist_file+0x54>)
   1645c:	4798      	blx	r3
    return (ret == FR_OK);
   1645e:	230f      	movs	r3, #15
   16460:	18fb      	adds	r3, r7, r3
   16462:	781b      	ldrb	r3, [r3, #0]
   16464:	425a      	negs	r2, r3
   16466:	4153      	adcs	r3, r2
   16468:	b2db      	uxtb	r3, r3
}
   1646a:	0018      	movs	r0, r3
   1646c:	46bd      	mov	sp, r7
   1646e:	b005      	add	sp, #20
   16470:	bd90      	pop	{r4, r7, pc}
   16472:	46c0      	nop			; (mov r8, r8)
   16474:	2000087c 	.word	0x2000087c
   16478:	0002dfb5 	.word	0x0002dfb5
   1647c:	0002e9b5 	.word	0x0002e9b5

00016480 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16480:	b580      	push	{r7, lr}
   16482:	b09e      	sub	sp, #120	; 0x78
   16484:	af00      	add	r7, sp, #0
   16486:	60f8      	str	r0, [r7, #12]
   16488:	60b9      	str	r1, [r7, #8]
   1648a:	1dfb      	adds	r3, r7, #7
   1648c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1648e:	2376      	movs	r3, #118	; 0x76
   16490:	18fb      	adds	r3, r7, r3
   16492:	2201      	movs	r2, #1
   16494:	801a      	strh	r2, [r3, #0]
   16496:	2374      	movs	r3, #116	; 0x74
   16498:	18fb      	adds	r3, r7, r3
   1649a:	2200      	movs	r2, #0
   1649c:	801a      	strh	r2, [r3, #0]
   1649e:	236e      	movs	r3, #110	; 0x6e
   164a0:	18fb      	adds	r3, r7, r3
   164a2:	2200      	movs	r2, #0
   164a4:	801a      	strh	r2, [r3, #0]
   164a6:	2372      	movs	r3, #114	; 0x72
   164a8:	18fb      	adds	r3, r7, r3
   164aa:	2200      	movs	r2, #0
   164ac:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   164ae:	2324      	movs	r3, #36	; 0x24
   164b0:	18fb      	adds	r3, r7, r3
   164b2:	0018      	movs	r0, r3
   164b4:	2341      	movs	r3, #65	; 0x41
   164b6:	001a      	movs	r2, r3
   164b8:	2100      	movs	r1, #0
   164ba:	4b92      	ldr	r3, [pc, #584]	; (16704 <rename_to_unique+0x284>)
   164bc:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   164be:	2318      	movs	r3, #24
   164c0:	18fb      	adds	r3, r7, r3
   164c2:	0018      	movs	r0, r3
   164c4:	2309      	movs	r3, #9
   164c6:	001a      	movs	r2, r3
   164c8:	2100      	movs	r1, #0
   164ca:	4b8e      	ldr	r3, [pc, #568]	; (16704 <rename_to_unique+0x284>)
   164cc:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   164ce:	2314      	movs	r3, #20
   164d0:	18fb      	adds	r3, r7, r3
   164d2:	2200      	movs	r2, #0
   164d4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   164d6:	2300      	movs	r3, #0
   164d8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   164da:	2371      	movs	r3, #113	; 0x71
   164dc:	18fb      	adds	r3, r7, r3
   164de:	2200      	movs	r2, #0
   164e0:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   164e2:	68bb      	ldr	r3, [r7, #8]
   164e4:	2b00      	cmp	r3, #0
   164e6:	d101      	bne.n	164ec <rename_to_unique+0x6c>
        return false;
   164e8:	2300      	movs	r3, #0
   164ea:	e106      	b.n	166fa <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   164ec:	68ba      	ldr	r2, [r7, #8]
   164ee:	68fb      	ldr	r3, [r7, #12]
   164f0:	0011      	movs	r1, r2
   164f2:	0018      	movs	r0, r3
   164f4:	4b84      	ldr	r3, [pc, #528]	; (16708 <rename_to_unique+0x288>)
   164f6:	4798      	blx	r3
   164f8:	0003      	movs	r3, r0
   164fa:	001a      	movs	r2, r3
   164fc:	2301      	movs	r3, #1
   164fe:	4053      	eors	r3, r2
   16500:	b2db      	uxtb	r3, r3
   16502:	2b00      	cmp	r3, #0
   16504:	d001      	beq.n	1650a <rename_to_unique+0x8a>
        return true;
   16506:	2301      	movs	r3, #1
   16508:	e0f7      	b.n	166fa <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1650a:	68bb      	ldr	r3, [r7, #8]
   1650c:	0018      	movs	r0, r3
   1650e:	4b7f      	ldr	r3, [pc, #508]	; (1670c <rename_to_unique+0x28c>)
   16510:	4798      	blx	r3
   16512:	0003      	movs	r3, r0
   16514:	2b40      	cmp	r3, #64	; 0x40
   16516:	d901      	bls.n	1651c <rename_to_unique+0x9c>
        return false;
   16518:	2300      	movs	r3, #0
   1651a:	e0ee      	b.n	166fa <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   1651c:	68bb      	ldr	r3, [r7, #8]
   1651e:	212e      	movs	r1, #46	; 0x2e
   16520:	0018      	movs	r0, r3
   16522:	4b7b      	ldr	r3, [pc, #492]	; (16710 <rename_to_unique+0x290>)
   16524:	4798      	blx	r3
   16526:	0003      	movs	r3, r0
   16528:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1652a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1652c:	2b00      	cmp	r3, #0
   1652e:	d052      	beq.n	165d6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16532:	0018      	movs	r0, r3
   16534:	4b75      	ldr	r3, [pc, #468]	; (1670c <rename_to_unique+0x28c>)
   16536:	4798      	blx	r3
   16538:	0002      	movs	r2, r0
   1653a:	236e      	movs	r3, #110	; 0x6e
   1653c:	18fb      	adds	r3, r7, r3
   1653e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16540:	236e      	movs	r3, #110	; 0x6e
   16542:	18fb      	adds	r3, r7, r3
   16544:	881b      	ldrh	r3, [r3, #0]
   16546:	2b07      	cmp	r3, #7
   16548:	d837      	bhi.n	165ba <rename_to_unique+0x13a>
            valid_ext = true;
   1654a:	2371      	movs	r3, #113	; 0x71
   1654c:	18fb      	adds	r3, r7, r3
   1654e:	2201      	movs	r2, #1
   16550:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16552:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16554:	2318      	movs	r3, #24
   16556:	18fb      	adds	r3, r7, r3
   16558:	0011      	movs	r1, r2
   1655a:	0018      	movs	r0, r3
   1655c:	4b6d      	ldr	r3, [pc, #436]	; (16714 <rename_to_unique+0x294>)
   1655e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16560:	68bb      	ldr	r3, [r7, #8]
   16562:	0018      	movs	r0, r3
   16564:	4b69      	ldr	r3, [pc, #420]	; (1670c <rename_to_unique+0x28c>)
   16566:	4798      	blx	r3
   16568:	0002      	movs	r2, r0
   1656a:	236e      	movs	r3, #110	; 0x6e
   1656c:	18fb      	adds	r3, r7, r3
   1656e:	881b      	ldrh	r3, [r3, #0]
   16570:	1ad3      	subs	r3, r2, r3
   16572:	2b3c      	cmp	r3, #60	; 0x3c
   16574:	d911      	bls.n	1659a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16576:	2374      	movs	r3, #116	; 0x74
   16578:	18fb      	adds	r3, r7, r3
   1657a:	226e      	movs	r2, #110	; 0x6e
   1657c:	18ba      	adds	r2, r7, r2
   1657e:	8812      	ldrh	r2, [r2, #0]
   16580:	213c      	movs	r1, #60	; 0x3c
   16582:	1a8a      	subs	r2, r1, r2
   16584:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16586:	2374      	movs	r3, #116	; 0x74
   16588:	18fb      	adds	r3, r7, r3
   1658a:	881a      	ldrh	r2, [r3, #0]
   1658c:	68b9      	ldr	r1, [r7, #8]
   1658e:	2324      	movs	r3, #36	; 0x24
   16590:	18fb      	adds	r3, r7, r3
   16592:	0018      	movs	r0, r3
   16594:	4b60      	ldr	r3, [pc, #384]	; (16718 <rename_to_unique+0x298>)
   16596:	4798      	blx	r3
   16598:	e02a      	b.n	165f0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1659a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1659c:	68bb      	ldr	r3, [r7, #8]
   1659e:	1ad2      	subs	r2, r2, r3
   165a0:	2374      	movs	r3, #116	; 0x74
   165a2:	18fb      	adds	r3, r7, r3
   165a4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   165a6:	2374      	movs	r3, #116	; 0x74
   165a8:	18fb      	adds	r3, r7, r3
   165aa:	881a      	ldrh	r2, [r3, #0]
   165ac:	68b9      	ldr	r1, [r7, #8]
   165ae:	2324      	movs	r3, #36	; 0x24
   165b0:	18fb      	adds	r3, r7, r3
   165b2:	0018      	movs	r0, r3
   165b4:	4b58      	ldr	r3, [pc, #352]	; (16718 <rename_to_unique+0x298>)
   165b6:	4798      	blx	r3
   165b8:	e01a      	b.n	165f0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   165ba:	2374      	movs	r3, #116	; 0x74
   165bc:	18fb      	adds	r3, r7, r3
   165be:	223c      	movs	r2, #60	; 0x3c
   165c0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   165c2:	2374      	movs	r3, #116	; 0x74
   165c4:	18fb      	adds	r3, r7, r3
   165c6:	881a      	ldrh	r2, [r3, #0]
   165c8:	68b9      	ldr	r1, [r7, #8]
   165ca:	2324      	movs	r3, #36	; 0x24
   165cc:	18fb      	adds	r3, r7, r3
   165ce:	0018      	movs	r0, r3
   165d0:	4b51      	ldr	r3, [pc, #324]	; (16718 <rename_to_unique+0x298>)
   165d2:	4798      	blx	r3
   165d4:	e00c      	b.n	165f0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   165d6:	2374      	movs	r3, #116	; 0x74
   165d8:	18fb      	adds	r3, r7, r3
   165da:	223c      	movs	r2, #60	; 0x3c
   165dc:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   165de:	2374      	movs	r3, #116	; 0x74
   165e0:	18fb      	adds	r3, r7, r3
   165e2:	881a      	ldrh	r2, [r3, #0]
   165e4:	68b9      	ldr	r1, [r7, #8]
   165e6:	2324      	movs	r3, #36	; 0x24
   165e8:	18fb      	adds	r3, r7, r3
   165ea:	0018      	movs	r0, r3
   165ec:	4b4a      	ldr	r3, [pc, #296]	; (16718 <rename_to_unique+0x298>)
   165ee:	4798      	blx	r3
    }

    name[name_len++] = '-';
   165f0:	2374      	movs	r3, #116	; 0x74
   165f2:	18fb      	adds	r3, r7, r3
   165f4:	881b      	ldrh	r3, [r3, #0]
   165f6:	2274      	movs	r2, #116	; 0x74
   165f8:	18ba      	adds	r2, r7, r2
   165fa:	1c59      	adds	r1, r3, #1
   165fc:	8011      	strh	r1, [r2, #0]
   165fe:	001a      	movs	r2, r3
   16600:	2324      	movs	r3, #36	; 0x24
   16602:	18fb      	adds	r3, r7, r3
   16604:	212d      	movs	r1, #45	; 0x2d
   16606:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16608:	2376      	movs	r3, #118	; 0x76
   1660a:	18fb      	adds	r3, r7, r3
   1660c:	2200      	movs	r2, #0
   1660e:	801a      	strh	r2, [r3, #0]
   16610:	2372      	movs	r3, #114	; 0x72
   16612:	18fb      	adds	r3, r7, r3
   16614:	2201      	movs	r2, #1
   16616:	801a      	strh	r2, [r3, #0]
   16618:	e010      	b.n	1663c <rename_to_unique+0x1bc>
        count *= 10;
   1661a:	2372      	movs	r3, #114	; 0x72
   1661c:	18fa      	adds	r2, r7, r3
   1661e:	2372      	movs	r3, #114	; 0x72
   16620:	18fb      	adds	r3, r7, r3
   16622:	881b      	ldrh	r3, [r3, #0]
   16624:	1c19      	adds	r1, r3, #0
   16626:	0089      	lsls	r1, r1, #2
   16628:	18cb      	adds	r3, r1, r3
   1662a:	18db      	adds	r3, r3, r3
   1662c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1662e:	2376      	movs	r3, #118	; 0x76
   16630:	18fb      	adds	r3, r7, r3
   16632:	881a      	ldrh	r2, [r3, #0]
   16634:	2376      	movs	r3, #118	; 0x76
   16636:	18fb      	adds	r3, r7, r3
   16638:	3201      	adds	r2, #1
   1663a:	801a      	strh	r2, [r3, #0]
   1663c:	2376      	movs	r3, #118	; 0x76
   1663e:	18fb      	adds	r3, r7, r3
   16640:	881b      	ldrh	r3, [r3, #0]
   16642:	2b02      	cmp	r3, #2
   16644:	d9e9      	bls.n	1661a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16646:	2376      	movs	r3, #118	; 0x76
   16648:	18fb      	adds	r3, r7, r3
   1664a:	2201      	movs	r2, #1
   1664c:	801a      	strh	r2, [r3, #0]
   1664e:	e04b      	b.n	166e8 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16650:	2376      	movs	r3, #118	; 0x76
   16652:	18fb      	adds	r3, r7, r3
   16654:	881a      	ldrh	r2, [r3, #0]
   16656:	4931      	ldr	r1, [pc, #196]	; (1671c <rename_to_unique+0x29c>)
   16658:	2314      	movs	r3, #20
   1665a:	18fb      	adds	r3, r7, r3
   1665c:	0018      	movs	r0, r3
   1665e:	4b30      	ldr	r3, [pc, #192]	; (16720 <rename_to_unique+0x2a0>)
   16660:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16662:	2374      	movs	r3, #116	; 0x74
   16664:	18fb      	adds	r3, r7, r3
   16666:	881b      	ldrh	r3, [r3, #0]
   16668:	2224      	movs	r2, #36	; 0x24
   1666a:	18ba      	adds	r2, r7, r2
   1666c:	18d3      	adds	r3, r2, r3
   1666e:	2214      	movs	r2, #20
   16670:	18b9      	adds	r1, r7, r2
   16672:	2203      	movs	r2, #3
   16674:	0018      	movs	r0, r3
   16676:	4b28      	ldr	r3, [pc, #160]	; (16718 <rename_to_unique+0x298>)
   16678:	4798      	blx	r3
        if (valid_ext) {
   1667a:	2371      	movs	r3, #113	; 0x71
   1667c:	18fb      	adds	r3, r7, r3
   1667e:	781b      	ldrb	r3, [r3, #0]
   16680:	2b00      	cmp	r3, #0
   16682:	d00c      	beq.n	1669e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16684:	2374      	movs	r3, #116	; 0x74
   16686:	18fb      	adds	r3, r7, r3
   16688:	881b      	ldrh	r3, [r3, #0]
   1668a:	3303      	adds	r3, #3
   1668c:	2224      	movs	r2, #36	; 0x24
   1668e:	18ba      	adds	r2, r7, r2
   16690:	18d3      	adds	r3, r2, r3
   16692:	2218      	movs	r2, #24
   16694:	18ba      	adds	r2, r7, r2
   16696:	0011      	movs	r1, r2
   16698:	0018      	movs	r0, r3
   1669a:	4b1e      	ldr	r3, [pc, #120]	; (16714 <rename_to_unique+0x294>)
   1669c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1669e:	2324      	movs	r3, #36	; 0x24
   166a0:	18fa      	adds	r2, r7, r3
   166a2:	68fb      	ldr	r3, [r7, #12]
   166a4:	0011      	movs	r1, r2
   166a6:	0018      	movs	r0, r3
   166a8:	4b17      	ldr	r3, [pc, #92]	; (16708 <rename_to_unique+0x288>)
   166aa:	4798      	blx	r3
   166ac:	0003      	movs	r3, r0
   166ae:	001a      	movs	r2, r3
   166b0:	2301      	movs	r3, #1
   166b2:	4053      	eors	r3, r2
   166b4:	b2db      	uxtb	r3, r3
   166b6:	2b00      	cmp	r3, #0
   166b8:	d00f      	beq.n	166da <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   166ba:	1dfb      	adds	r3, r7, #7
   166bc:	781a      	ldrb	r2, [r3, #0]
   166be:	68bb      	ldr	r3, [r7, #8]
   166c0:	2100      	movs	r1, #0
   166c2:	0018      	movs	r0, r3
   166c4:	4b0f      	ldr	r3, [pc, #60]	; (16704 <rename_to_unique+0x284>)
   166c6:	4798      	blx	r3
            strcpy(file_path_name, name);
   166c8:	2324      	movs	r3, #36	; 0x24
   166ca:	18fa      	adds	r2, r7, r3
   166cc:	68bb      	ldr	r3, [r7, #8]
   166ce:	0011      	movs	r1, r2
   166d0:	0018      	movs	r0, r3
   166d2:	4b10      	ldr	r3, [pc, #64]	; (16714 <rename_to_unique+0x294>)
   166d4:	4798      	blx	r3
            return true;
   166d6:	2301      	movs	r3, #1
   166d8:	e00f      	b.n	166fa <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   166da:	2376      	movs	r3, #118	; 0x76
   166dc:	18fb      	adds	r3, r7, r3
   166de:	881a      	ldrh	r2, [r3, #0]
   166e0:	2376      	movs	r3, #118	; 0x76
   166e2:	18fb      	adds	r3, r7, r3
   166e4:	3201      	adds	r2, #1
   166e6:	801a      	strh	r2, [r3, #0]
   166e8:	2376      	movs	r3, #118	; 0x76
   166ea:	18fa      	adds	r2, r7, r3
   166ec:	2372      	movs	r3, #114	; 0x72
   166ee:	18fb      	adds	r3, r7, r3
   166f0:	8812      	ldrh	r2, [r2, #0]
   166f2:	881b      	ldrh	r3, [r3, #0]
   166f4:	429a      	cmp	r2, r3
   166f6:	d3ab      	bcc.n	16650 <rename_to_unique+0x1d0>
        }
    }
    return false;
   166f8:	2300      	movs	r3, #0
}
   166fa:	0018      	movs	r0, r3
   166fc:	46bd      	mov	sp, r7
   166fe:	b01e      	add	sp, #120	; 0x78
   16700:	bd80      	pop	{r7, pc}
   16702:	46c0      	nop			; (mov r8, r8)
   16704:	00035377 	.word	0x00035377
   16708:	00016429 	.word	0x00016429
   1670c:	0003572f 	.word	0x0003572f
   16710:	00035789 	.word	0x00035789
   16714:	000356e3 	.word	0x000356e3
   16718:	0003575f 	.word	0x0003575f
   1671c:	00038af0 	.word	0x00038af0
   16720:	00035635 	.word	0x00035635

00016724 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16724:	b590      	push	{r4, r7, lr}
   16726:	b083      	sub	sp, #12
   16728:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1672a:	2001      	movs	r0, #1
   1672c:	4b22      	ldr	r3, [pc, #136]	; (167b8 <start_download+0x94>)
   1672e:	4798      	blx	r3
   16730:	0003      	movs	r3, r0
   16732:	001a      	movs	r2, r3
   16734:	2301      	movs	r3, #1
   16736:	4053      	eors	r3, r2
   16738:	b2db      	uxtb	r3, r3
   1673a:	2b00      	cmp	r3, #0
   1673c:	d005      	beq.n	1674a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1673e:	4b1f      	ldr	r3, [pc, #124]	; (167bc <start_download+0x98>)
   16740:	0019      	movs	r1, r3
   16742:	2001      	movs	r0, #1
   16744:	4b1e      	ldr	r3, [pc, #120]	; (167c0 <start_download+0x9c>)
   16746:	4798      	blx	r3
        return;
   16748:	e032      	b.n	167b0 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1674a:	2002      	movs	r0, #2
   1674c:	4b1a      	ldr	r3, [pc, #104]	; (167b8 <start_download+0x94>)
   1674e:	4798      	blx	r3
   16750:	0003      	movs	r3, r0
   16752:	001a      	movs	r2, r3
   16754:	2301      	movs	r3, #1
   16756:	4053      	eors	r3, r2
   16758:	b2db      	uxtb	r3, r3
   1675a:	2b00      	cmp	r3, #0
   1675c:	d005      	beq.n	1676a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1675e:	4b19      	ldr	r3, [pc, #100]	; (167c4 <start_download+0xa0>)
   16760:	0019      	movs	r1, r3
   16762:	2001      	movs	r0, #1
   16764:	4b16      	ldr	r3, [pc, #88]	; (167c0 <start_download+0x9c>)
   16766:	4798      	blx	r3
        return;
   16768:	e022      	b.n	167b0 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1676a:	2004      	movs	r0, #4
   1676c:	4b12      	ldr	r3, [pc, #72]	; (167b8 <start_download+0x94>)
   1676e:	4798      	blx	r3
   16770:	1e03      	subs	r3, r0, #0
   16772:	d005      	beq.n	16780 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16774:	4b14      	ldr	r3, [pc, #80]	; (167c8 <start_download+0xa4>)
   16776:	0019      	movs	r1, r3
   16778:	2001      	movs	r0, #1
   1677a:	4b11      	ldr	r3, [pc, #68]	; (167c0 <start_download+0x9c>)
   1677c:	4798      	blx	r3
        return;
   1677e:	e017      	b.n	167b0 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16780:	2008      	movs	r0, #8
   16782:	4b0d      	ldr	r3, [pc, #52]	; (167b8 <start_download+0x94>)
   16784:	4798      	blx	r3
   16786:	1e03      	subs	r3, r0, #0
   16788:	d005      	beq.n	16796 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1678a:	4b10      	ldr	r3, [pc, #64]	; (167cc <start_download+0xa8>)
   1678c:	0019      	movs	r1, r3
   1678e:	2001      	movs	r0, #1
   16790:	4b0b      	ldr	r3, [pc, #44]	; (167c0 <start_download+0x9c>)
   16792:	4798      	blx	r3
        return;
   16794:	e00c      	b.n	167b0 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16796:	4b0e      	ldr	r3, [pc, #56]	; (167d0 <start_download+0xac>)
   16798:	0019      	movs	r1, r3
   1679a:	2001      	movs	r0, #1
   1679c:	4b08      	ldr	r3, [pc, #32]	; (167c0 <start_download+0x9c>)
   1679e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   167a0:	490c      	ldr	r1, [pc, #48]	; (167d4 <start_download+0xb0>)
   167a2:	480d      	ldr	r0, [pc, #52]	; (167d8 <start_download+0xb4>)
   167a4:	2300      	movs	r3, #0
   167a6:	9300      	str	r3, [sp, #0]
   167a8:	2300      	movs	r3, #0
   167aa:	2201      	movs	r2, #1
   167ac:	4c0b      	ldr	r4, [pc, #44]	; (167dc <start_download+0xb8>)
   167ae:	47a0      	blx	r4
}
   167b0:	46bd      	mov	sp, r7
   167b2:	b001      	add	sp, #4
   167b4:	bd90      	pop	{r4, r7, pc}
   167b6:	46c0      	nop			; (mov r8, r8)
   167b8:	000163fd 	.word	0x000163fd
   167bc:	00038af8 	.word	0x00038af8
   167c0:	0001e5e1 	.word	0x0001e5e1
   167c4:	00038b24 	.word	0x00038b24
   167c8:	00038b50 	.word	0x00038b50
   167cc:	00038b7c 	.word	0x00038b7c
   167d0:	00038ba8 	.word	0x00038ba8
   167d4:	00038bd4 	.word	0x00038bd4
   167d8:	20004ad0 	.word	0x20004ad0
   167dc:	00031609 	.word	0x00031609

000167e0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   167e0:	b5b0      	push	{r4, r5, r7, lr}
   167e2:	b086      	sub	sp, #24
   167e4:	af00      	add	r7, sp, #0
   167e6:	6078      	str	r0, [r7, #4]
   167e8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   167ea:	687b      	ldr	r3, [r7, #4]
   167ec:	2b00      	cmp	r3, #0
   167ee:	d002      	beq.n	167f6 <store_file_packet+0x16>
   167f0:	683b      	ldr	r3, [r7, #0]
   167f2:	2b00      	cmp	r3, #0
   167f4:	d105      	bne.n	16802 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   167f6:	4b58      	ldr	r3, [pc, #352]	; (16958 <store_file_packet+0x178>)
   167f8:	0019      	movs	r1, r3
   167fa:	2001      	movs	r0, #1
   167fc:	4b57      	ldr	r3, [pc, #348]	; (1695c <store_file_packet+0x17c>)
   167fe:	4798      	blx	r3
        return;
   16800:	e0a6      	b.n	16950 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16802:	2008      	movs	r0, #8
   16804:	4b56      	ldr	r3, [pc, #344]	; (16960 <store_file_packet+0x180>)
   16806:	4798      	blx	r3
   16808:	0003      	movs	r3, r0
   1680a:	001a      	movs	r2, r3
   1680c:	2301      	movs	r3, #1
   1680e:	4053      	eors	r3, r2
   16810:	b2db      	uxtb	r3, r3
   16812:	2b00      	cmp	r3, #0
   16814:	d055      	beq.n	168c2 <store_file_packet+0xe2>
        char *cp = NULL;
   16816:	2300      	movs	r3, #0
   16818:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1681a:	4b52      	ldr	r3, [pc, #328]	; (16964 <store_file_packet+0x184>)
   1681c:	2230      	movs	r2, #48	; 0x30
   1681e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16820:	4b50      	ldr	r3, [pc, #320]	; (16964 <store_file_packet+0x184>)
   16822:	223a      	movs	r2, #58	; 0x3a
   16824:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16826:	4b50      	ldr	r3, [pc, #320]	; (16968 <store_file_packet+0x188>)
   16828:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1682a:	e002      	b.n	16832 <store_file_packet+0x52>
            cp--;
   1682c:	697b      	ldr	r3, [r7, #20]
   1682e:	3b01      	subs	r3, #1
   16830:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16832:	697b      	ldr	r3, [r7, #20]
   16834:	781b      	ldrb	r3, [r3, #0]
   16836:	2b2f      	cmp	r3, #47	; 0x2f
   16838:	d1f8      	bne.n	1682c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1683a:	697b      	ldr	r3, [r7, #20]
   1683c:	0018      	movs	r0, r3
   1683e:	4b4b      	ldr	r3, [pc, #300]	; (1696c <store_file_packet+0x18c>)
   16840:	4798      	blx	r3
   16842:	0003      	movs	r3, r0
   16844:	2b01      	cmp	r3, #1
   16846:	d924      	bls.n	16892 <store_file_packet+0xb2>
            cp++;
   16848:	697b      	ldr	r3, [r7, #20]
   1684a:	3301      	adds	r3, #1
   1684c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1684e:	697a      	ldr	r2, [r7, #20]
   16850:	4b47      	ldr	r3, [pc, #284]	; (16970 <store_file_packet+0x190>)
   16852:	0011      	movs	r1, r2
   16854:	0018      	movs	r0, r3
   16856:	4b47      	ldr	r3, [pc, #284]	; (16974 <store_file_packet+0x194>)
   16858:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1685a:	4942      	ldr	r1, [pc, #264]	; (16964 <store_file_packet+0x184>)
   1685c:	4b46      	ldr	r3, [pc, #280]	; (16978 <store_file_packet+0x198>)
   1685e:	2240      	movs	r2, #64	; 0x40
   16860:	0018      	movs	r0, r3
   16862:	4b46      	ldr	r3, [pc, #280]	; (1697c <store_file_packet+0x19c>)
   16864:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16866:	4a3f      	ldr	r2, [pc, #252]	; (16964 <store_file_packet+0x184>)
   16868:	4b45      	ldr	r3, [pc, #276]	; (16980 <store_file_packet+0x1a0>)
   1686a:	0019      	movs	r1, r3
   1686c:	2001      	movs	r0, #1
   1686e:	4b3b      	ldr	r3, [pc, #236]	; (1695c <store_file_packet+0x17c>)
   16870:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16872:	2313      	movs	r3, #19
   16874:	18fc      	adds	r4, r7, r3
   16876:	493b      	ldr	r1, [pc, #236]	; (16964 <store_file_packet+0x184>)
   16878:	4b3f      	ldr	r3, [pc, #252]	; (16978 <store_file_packet+0x198>)
   1687a:	220a      	movs	r2, #10
   1687c:	0018      	movs	r0, r3
   1687e:	4b41      	ldr	r3, [pc, #260]	; (16984 <store_file_packet+0x1a4>)
   16880:	4798      	blx	r3
   16882:	0003      	movs	r3, r0
   16884:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16886:	2313      	movs	r3, #19
   16888:	18fb      	adds	r3, r7, r3
   1688a:	781b      	ldrb	r3, [r3, #0]
   1688c:	2b00      	cmp	r3, #0
   1688e:	d012      	beq.n	168b6 <store_file_packet+0xd6>
   16890:	e008      	b.n	168a4 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16892:	4b3d      	ldr	r3, [pc, #244]	; (16988 <store_file_packet+0x1a8>)
   16894:	0019      	movs	r1, r3
   16896:	2001      	movs	r0, #1
   16898:	4b30      	ldr	r3, [pc, #192]	; (1695c <store_file_packet+0x17c>)
   1689a:	4798      	blx	r3
            add_state(CANCELED);
   1689c:	2020      	movs	r0, #32
   1689e:	4b3b      	ldr	r3, [pc, #236]	; (1698c <store_file_packet+0x1ac>)
   168a0:	4798      	blx	r3
            return;
   168a2:	e055      	b.n	16950 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   168a4:	2313      	movs	r3, #19
   168a6:	18fb      	adds	r3, r7, r3
   168a8:	781a      	ldrb	r2, [r3, #0]
   168aa:	4b39      	ldr	r3, [pc, #228]	; (16990 <store_file_packet+0x1b0>)
   168ac:	0019      	movs	r1, r3
   168ae:	2001      	movs	r0, #1
   168b0:	4b2a      	ldr	r3, [pc, #168]	; (1695c <store_file_packet+0x17c>)
   168b2:	4798      	blx	r3
            return;
   168b4:	e04c      	b.n	16950 <store_file_packet+0x170>
        }

        received_file_size = 0;
   168b6:	4b37      	ldr	r3, [pc, #220]	; (16994 <store_file_packet+0x1b4>)
   168b8:	2200      	movs	r2, #0
   168ba:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   168bc:	2008      	movs	r0, #8
   168be:	4b33      	ldr	r3, [pc, #204]	; (1698c <store_file_packet+0x1ac>)
   168c0:	4798      	blx	r3
    }

    if (data != NULL) {
   168c2:	687b      	ldr	r3, [r7, #4]
   168c4:	2b00      	cmp	r3, #0
   168c6:	d043      	beq.n	16950 <store_file_packet+0x170>
        UINT wsize = 0;
   168c8:	2300      	movs	r3, #0
   168ca:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   168cc:	2313      	movs	r3, #19
   168ce:	18fc      	adds	r4, r7, r3
   168d0:	230c      	movs	r3, #12
   168d2:	18fb      	adds	r3, r7, r3
   168d4:	683a      	ldr	r2, [r7, #0]
   168d6:	6879      	ldr	r1, [r7, #4]
   168d8:	4827      	ldr	r0, [pc, #156]	; (16978 <store_file_packet+0x198>)
   168da:	4d2f      	ldr	r5, [pc, #188]	; (16998 <store_file_packet+0x1b8>)
   168dc:	47a8      	blx	r5
   168de:	0003      	movs	r3, r0
   168e0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   168e2:	2313      	movs	r3, #19
   168e4:	18fb      	adds	r3, r7, r3
   168e6:	781b      	ldrb	r3, [r3, #0]
   168e8:	2b00      	cmp	r3, #0
   168ea:	d00c      	beq.n	16906 <store_file_packet+0x126>
            f_close(&file_object);
   168ec:	4b22      	ldr	r3, [pc, #136]	; (16978 <store_file_packet+0x198>)
   168ee:	0018      	movs	r0, r3
   168f0:	4b2a      	ldr	r3, [pc, #168]	; (1699c <store_file_packet+0x1bc>)
   168f2:	4798      	blx	r3
            add_state(CANCELED);
   168f4:	2020      	movs	r0, #32
   168f6:	4b25      	ldr	r3, [pc, #148]	; (1698c <store_file_packet+0x1ac>)
   168f8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   168fa:	4b29      	ldr	r3, [pc, #164]	; (169a0 <store_file_packet+0x1c0>)
   168fc:	0019      	movs	r1, r3
   168fe:	2001      	movs	r0, #1
   16900:	4b16      	ldr	r3, [pc, #88]	; (1695c <store_file_packet+0x17c>)
   16902:	4798      	blx	r3
            return;
   16904:	e024      	b.n	16950 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16906:	4b23      	ldr	r3, [pc, #140]	; (16994 <store_file_packet+0x1b4>)
   16908:	681a      	ldr	r2, [r3, #0]
   1690a:	68fb      	ldr	r3, [r7, #12]
   1690c:	18d2      	adds	r2, r2, r3
   1690e:	4b21      	ldr	r3, [pc, #132]	; (16994 <store_file_packet+0x1b4>)
   16910:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16912:	4b20      	ldr	r3, [pc, #128]	; (16994 <store_file_packet+0x1b4>)
   16914:	681a      	ldr	r2, [r3, #0]
   16916:	4b23      	ldr	r3, [pc, #140]	; (169a4 <store_file_packet+0x1c4>)
   16918:	681b      	ldr	r3, [r3, #0]
   1691a:	4923      	ldr	r1, [pc, #140]	; (169a8 <store_file_packet+0x1c8>)
   1691c:	2001      	movs	r0, #1
   1691e:	4c0f      	ldr	r4, [pc, #60]	; (1695c <store_file_packet+0x17c>)
   16920:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16922:	4b1c      	ldr	r3, [pc, #112]	; (16994 <store_file_packet+0x1b4>)
   16924:	681a      	ldr	r2, [r3, #0]
   16926:	4b1f      	ldr	r3, [pc, #124]	; (169a4 <store_file_packet+0x1c4>)
   16928:	681b      	ldr	r3, [r3, #0]
   1692a:	429a      	cmp	r2, r3
   1692c:	d310      	bcc.n	16950 <store_file_packet+0x170>
            f_close(&file_object);
   1692e:	4b12      	ldr	r3, [pc, #72]	; (16978 <store_file_packet+0x198>)
   16930:	0018      	movs	r0, r3
   16932:	4b1a      	ldr	r3, [pc, #104]	; (1699c <store_file_packet+0x1bc>)
   16934:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16936:	4b1d      	ldr	r3, [pc, #116]	; (169ac <store_file_packet+0x1cc>)
   16938:	0019      	movs	r1, r3
   1693a:	2001      	movs	r0, #1
   1693c:	4b07      	ldr	r3, [pc, #28]	; (1695c <store_file_packet+0x17c>)
   1693e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16940:	2100      	movs	r1, #0
   16942:	2017      	movs	r0, #23
   16944:	4b1a      	ldr	r3, [pc, #104]	; (169b0 <store_file_packet+0x1d0>)
   16946:	4798      	blx	r3
            add_state(COMPLETED);
   16948:	2010      	movs	r0, #16
   1694a:	4b10      	ldr	r3, [pc, #64]	; (1698c <store_file_packet+0x1ac>)
   1694c:	4798      	blx	r3
            return;
   1694e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16950:	46bd      	mov	sp, r7
   16952:	b006      	add	sp, #24
   16954:	bdb0      	pop	{r4, r5, r7, pc}
   16956:	46c0      	nop			; (mov r8, r8)
   16958:	00038c08 	.word	0x00038c08
   1695c:	0001e5e1 	.word	0x0001e5e1
   16960:	000163fd 	.word	0x000163fd
   16964:	200000b4 	.word	0x200000b4
   16968:	00038c04 	.word	0x00038c04
   1696c:	0003572f 	.word	0x0003572f
   16970:	200000b6 	.word	0x200000b6
   16974:	000356e3 	.word	0x000356e3
   16978:	2000087c 	.word	0x2000087c
   1697c:	00016481 	.word	0x00016481
   16980:	00038c6c 	.word	0x00038c6c
   16984:	0002dfb5 	.word	0x0002dfb5
   16988:	00038c2c 	.word	0x00038c2c
   1698c:	000163d5 	.word	0x000163d5
   16990:	00038c94 	.word	0x00038c94
   16994:	200008a4 	.word	0x200008a4
   16998:	0002e4e5 	.word	0x0002e4e5
   1699c:	0002e9b5 	.word	0x0002e9b5
   169a0:	00038cc8 	.word	0x00038cc8
   169a4:	200008a0 	.word	0x200008a0
   169a8:	00038d04 	.word	0x00038d04
   169ac:	00038d38 	.word	0x00038d38
   169b0:	00016339 	.word	0x00016339

000169b4 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   169b4:	b590      	push	{r4, r7, lr}
   169b6:	b085      	sub	sp, #20
   169b8:	af00      	add	r7, sp, #0
   169ba:	60f8      	str	r0, [r7, #12]
   169bc:	60b9      	str	r1, [r7, #8]
   169be:	607a      	str	r2, [r7, #4]
    switch (type) {
   169c0:	68bb      	ldr	r3, [r7, #8]
   169c2:	2b04      	cmp	r3, #4
   169c4:	d900      	bls.n	169c8 <http_client_callback+0x14>
   169c6:	e077      	b.n	16ab8 <http_client_callback+0x104>
   169c8:	68bb      	ldr	r3, [r7, #8]
   169ca:	009a      	lsls	r2, r3, #2
   169cc:	4b3c      	ldr	r3, [pc, #240]	; (16ac0 <http_client_callback+0x10c>)
   169ce:	18d3      	adds	r3, r2, r3
   169d0:	681b      	ldr	r3, [r3, #0]
   169d2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   169d4:	4b3b      	ldr	r3, [pc, #236]	; (16ac4 <http_client_callback+0x110>)
   169d6:	0019      	movs	r1, r3
   169d8:	2001      	movs	r0, #1
   169da:	4b3b      	ldr	r3, [pc, #236]	; (16ac8 <http_client_callback+0x114>)
   169dc:	4798      	blx	r3
            break;
   169de:	e06b      	b.n	16ab8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   169e0:	4b3a      	ldr	r3, [pc, #232]	; (16acc <http_client_callback+0x118>)
   169e2:	0019      	movs	r1, r3
   169e4:	2001      	movs	r0, #1
   169e6:	4b38      	ldr	r3, [pc, #224]	; (16ac8 <http_client_callback+0x114>)
   169e8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   169ea:	2004      	movs	r0, #4
   169ec:	4b38      	ldr	r3, [pc, #224]	; (16ad0 <http_client_callback+0x11c>)
   169ee:	4798      	blx	r3
            break;
   169f0:	e062      	b.n	16ab8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   169f2:	687b      	ldr	r3, [r7, #4]
   169f4:	881b      	ldrh	r3, [r3, #0]
   169f6:	001a      	movs	r2, r3
   169f8:	687b      	ldr	r3, [r7, #4]
   169fa:	685b      	ldr	r3, [r3, #4]
   169fc:	4935      	ldr	r1, [pc, #212]	; (16ad4 <http_client_callback+0x120>)
   169fe:	2001      	movs	r0, #1
   16a00:	4c31      	ldr	r4, [pc, #196]	; (16ac8 <http_client_callback+0x114>)
   16a02:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16a04:	687b      	ldr	r3, [r7, #4]
   16a06:	881b      	ldrh	r3, [r3, #0]
   16a08:	2bc8      	cmp	r3, #200	; 0xc8
   16a0a:	d10d      	bne.n	16a28 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16a0c:	687b      	ldr	r3, [r7, #4]
   16a0e:	685a      	ldr	r2, [r3, #4]
   16a10:	4b31      	ldr	r3, [pc, #196]	; (16ad8 <http_client_callback+0x124>)
   16a12:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16a14:	4b31      	ldr	r3, [pc, #196]	; (16adc <http_client_callback+0x128>)
   16a16:	2200      	movs	r2, #0
   16a18:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16a1a:	687b      	ldr	r3, [r7, #4]
   16a1c:	685a      	ldr	r2, [r3, #4]
   16a1e:	2380      	movs	r3, #128	; 0x80
   16a20:	009b      	lsls	r3, r3, #2
   16a22:	429a      	cmp	r2, r3
   16a24:	d843      	bhi.n	16aae <http_client_callback+0xfa>
   16a26:	e003      	b.n	16a30 <http_client_callback+0x7c>
                add_state(CANCELED);
   16a28:	2020      	movs	r0, #32
   16a2a:	4b29      	ldr	r3, [pc, #164]	; (16ad0 <http_client_callback+0x11c>)
   16a2c:	4798      	blx	r3
                return;
   16a2e:	e043      	b.n	16ab8 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16a30:	687b      	ldr	r3, [r7, #4]
   16a32:	689a      	ldr	r2, [r3, #8]
   16a34:	687b      	ldr	r3, [r7, #4]
   16a36:	685b      	ldr	r3, [r3, #4]
   16a38:	0019      	movs	r1, r3
   16a3a:	0010      	movs	r0, r2
   16a3c:	4b28      	ldr	r3, [pc, #160]	; (16ae0 <http_client_callback+0x12c>)
   16a3e:	4798      	blx	r3
                add_state(COMPLETED);
   16a40:	2010      	movs	r0, #16
   16a42:	4b23      	ldr	r3, [pc, #140]	; (16ad0 <http_client_callback+0x11c>)
   16a44:	4798      	blx	r3
            }
            break;
   16a46:	e032      	b.n	16aae <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16a48:	687b      	ldr	r3, [r7, #4]
   16a4a:	685a      	ldr	r2, [r3, #4]
   16a4c:	687b      	ldr	r3, [r7, #4]
   16a4e:	681b      	ldr	r3, [r3, #0]
   16a50:	0019      	movs	r1, r3
   16a52:	0010      	movs	r0, r2
   16a54:	4b22      	ldr	r3, [pc, #136]	; (16ae0 <http_client_callback+0x12c>)
   16a56:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16a58:	687b      	ldr	r3, [r7, #4]
   16a5a:	7a1b      	ldrb	r3, [r3, #8]
   16a5c:	2b00      	cmp	r3, #0
   16a5e:	d028      	beq.n	16ab2 <http_client_callback+0xfe>
                add_state(COMPLETED);
   16a60:	2010      	movs	r0, #16
   16a62:	4b1b      	ldr	r3, [pc, #108]	; (16ad0 <http_client_callback+0x11c>)
   16a64:	4798      	blx	r3
            }

            break;
   16a66:	e024      	b.n	16ab2 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16a68:	687b      	ldr	r3, [r7, #4]
   16a6a:	681a      	ldr	r2, [r3, #0]
   16a6c:	4b1d      	ldr	r3, [pc, #116]	; (16ae4 <http_client_callback+0x130>)
   16a6e:	0019      	movs	r1, r3
   16a70:	2001      	movs	r0, #1
   16a72:	4b15      	ldr	r3, [pc, #84]	; (16ac8 <http_client_callback+0x114>)
   16a74:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16a76:	687b      	ldr	r3, [r7, #4]
   16a78:	681b      	ldr	r3, [r3, #0]
   16a7a:	330b      	adds	r3, #11
   16a7c:	d11b      	bne.n	16ab6 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16a7e:	2008      	movs	r0, #8
   16a80:	4b19      	ldr	r3, [pc, #100]	; (16ae8 <http_client_callback+0x134>)
   16a82:	4798      	blx	r3
   16a84:	1e03      	subs	r3, r0, #0
   16a86:	d006      	beq.n	16a96 <http_client_callback+0xe2>
                    f_close(&file_object);
   16a88:	4b18      	ldr	r3, [pc, #96]	; (16aec <http_client_callback+0x138>)
   16a8a:	0018      	movs	r0, r3
   16a8c:	4b18      	ldr	r3, [pc, #96]	; (16af0 <http_client_callback+0x13c>)
   16a8e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16a90:	2008      	movs	r0, #8
   16a92:	4b18      	ldr	r3, [pc, #96]	; (16af4 <http_client_callback+0x140>)
   16a94:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   16a96:	2004      	movs	r0, #4
   16a98:	4b13      	ldr	r3, [pc, #76]	; (16ae8 <http_client_callback+0x134>)
   16a9a:	4798      	blx	r3
   16a9c:	1e03      	subs	r3, r0, #0
   16a9e:	d002      	beq.n	16aa6 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16aa0:	2004      	movs	r0, #4
   16aa2:	4b14      	ldr	r3, [pc, #80]	; (16af4 <http_client_callback+0x140>)
   16aa4:	4798      	blx	r3
                }

                start_download();
   16aa6:	4b14      	ldr	r3, [pc, #80]	; (16af8 <http_client_callback+0x144>)
   16aa8:	4798      	blx	r3
            }

            break;
   16aaa:	46c0      	nop			; (mov r8, r8)
   16aac:	e003      	b.n	16ab6 <http_client_callback+0x102>
            break;
   16aae:	46c0      	nop			; (mov r8, r8)
   16ab0:	e002      	b.n	16ab8 <http_client_callback+0x104>
            break;
   16ab2:	46c0      	nop			; (mov r8, r8)
   16ab4:	e000      	b.n	16ab8 <http_client_callback+0x104>
            break;
   16ab6:	46c0      	nop			; (mov r8, r8)
    }
}
   16ab8:	46bd      	mov	sp, r7
   16aba:	b005      	add	sp, #20
   16abc:	bd90      	pop	{r4, r7, pc}
   16abe:	46c0      	nop			; (mov r8, r8)
   16ac0:	000394f4 	.word	0x000394f4
   16ac4:	00038d6c 	.word	0x00038d6c
   16ac8:	0001e5e1 	.word	0x0001e5e1
   16acc:	00038da4 	.word	0x00038da4
   16ad0:	000163d5 	.word	0x000163d5
   16ad4:	00038dd0 	.word	0x00038dd0
   16ad8:	200008a0 	.word	0x200008a0
   16adc:	200008a4 	.word	0x200008a4
   16ae0:	000167e1 	.word	0x000167e1
   16ae4:	00038e0c 	.word	0x00038e0c
   16ae8:	000163fd 	.word	0x000163fd
   16aec:	2000087c 	.word	0x2000087c
   16af0:	0002e9b5 	.word	0x0002e9b5
   16af4:	000163a1 	.word	0x000163a1
   16af8:	00016725 	.word	0x00016725

00016afc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16afc:	b580      	push	{r7, lr}
   16afe:	b082      	sub	sp, #8
   16b00:	af00      	add	r7, sp, #0
   16b02:	603a      	str	r2, [r7, #0]
   16b04:	1dfb      	adds	r3, r7, #7
   16b06:	1c02      	adds	r2, r0, #0
   16b08:	701a      	strb	r2, [r3, #0]
   16b0a:	1dbb      	adds	r3, r7, #6
   16b0c:	1c0a      	adds	r2, r1, #0
   16b0e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16b10:	683a      	ldr	r2, [r7, #0]
   16b12:	1dbb      	adds	r3, r7, #6
   16b14:	7819      	ldrb	r1, [r3, #0]
   16b16:	1dfb      	adds	r3, r7, #7
   16b18:	781b      	ldrb	r3, [r3, #0]
   16b1a:	b25b      	sxtb	r3, r3
   16b1c:	0018      	movs	r0, r3
   16b1e:	4b03      	ldr	r3, [pc, #12]	; (16b2c <socket_cb+0x30>)
   16b20:	4798      	blx	r3
}
   16b22:	46c0      	nop			; (mov r8, r8)
   16b24:	46bd      	mov	sp, r7
   16b26:	b002      	add	sp, #8
   16b28:	bd80      	pop	{r7, pc}
   16b2a:	46c0      	nop			; (mov r8, r8)
   16b2c:	00031319 	.word	0x00031319

00016b30 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16b30:	b5b0      	push	{r4, r5, r7, lr}
   16b32:	b086      	sub	sp, #24
   16b34:	af04      	add	r7, sp, #16
   16b36:	6078      	str	r0, [r7, #4]
   16b38:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16b3a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16b3c:	22ff      	movs	r2, #255	; 0xff
   16b3e:	4013      	ands	r3, r2
   16b40:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   16b42:	683b      	ldr	r3, [r7, #0]
   16b44:	0a1b      	lsrs	r3, r3, #8
   16b46:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16b48:	23ff      	movs	r3, #255	; 0xff
   16b4a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16b4c:	683a      	ldr	r2, [r7, #0]
   16b4e:	0c12      	lsrs	r2, r2, #16
   16b50:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   16b52:	22ff      	movs	r2, #255	; 0xff
   16b54:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16b56:	6839      	ldr	r1, [r7, #0]
   16b58:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16b5a:	000d      	movs	r5, r1
   16b5c:	6878      	ldr	r0, [r7, #4]
   16b5e:	4909      	ldr	r1, [pc, #36]	; (16b84 <resolve_cb+0x54>)
   16b60:	9502      	str	r5, [sp, #8]
   16b62:	9201      	str	r2, [sp, #4]
   16b64:	9300      	str	r3, [sp, #0]
   16b66:	0023      	movs	r3, r4
   16b68:	0002      	movs	r2, r0
   16b6a:	2001      	movs	r0, #1
   16b6c:	4c06      	ldr	r4, [pc, #24]	; (16b88 <resolve_cb+0x58>)
   16b6e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16b70:	683a      	ldr	r2, [r7, #0]
   16b72:	687b      	ldr	r3, [r7, #4]
   16b74:	0011      	movs	r1, r2
   16b76:	0018      	movs	r0, r3
   16b78:	4b04      	ldr	r3, [pc, #16]	; (16b8c <resolve_cb+0x5c>)
   16b7a:	4798      	blx	r3
}
   16b7c:	46c0      	nop			; (mov r8, r8)
   16b7e:	46bd      	mov	sp, r7
   16b80:	b002      	add	sp, #8
   16b82:	bdb0      	pop	{r4, r5, r7, pc}
   16b84:	00038e3c 	.word	0x00038e3c
   16b88:	0001e5e1 	.word	0x0001e5e1
   16b8c:	0003147d 	.word	0x0003147d

00016b90 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16b90:	b590      	push	{r4, r7, lr}
   16b92:	b087      	sub	sp, #28
   16b94:	af02      	add	r7, sp, #8
   16b96:	0002      	movs	r2, r0
   16b98:	6039      	str	r1, [r7, #0]
   16b9a:	1dfb      	adds	r3, r7, #7
   16b9c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16b9e:	1dfb      	adds	r3, r7, #7
   16ba0:	781b      	ldrb	r3, [r3, #0]
   16ba2:	2b2c      	cmp	r3, #44	; 0x2c
   16ba4:	d002      	beq.n	16bac <wifi_cb+0x1c>
   16ba6:	2b32      	cmp	r3, #50	; 0x32
   16ba8:	d03d      	beq.n	16c26 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16baa:	e06f      	b.n	16c8c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16bac:	683b      	ldr	r3, [r7, #0]
   16bae:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16bb0:	68fb      	ldr	r3, [r7, #12]
   16bb2:	781b      	ldrb	r3, [r3, #0]
   16bb4:	2b01      	cmp	r3, #1
   16bb6:	d107      	bne.n	16bc8 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16bb8:	4b36      	ldr	r3, [pc, #216]	; (16c94 <wifi_cb+0x104>)
   16bba:	0019      	movs	r1, r3
   16bbc:	2001      	movs	r0, #1
   16bbe:	4b36      	ldr	r3, [pc, #216]	; (16c98 <wifi_cb+0x108>)
   16bc0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   16bc2:	4b36      	ldr	r3, [pc, #216]	; (16c9c <wifi_cb+0x10c>)
   16bc4:	4798      	blx	r3
            break;
   16bc6:	e05e      	b.n	16c86 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16bc8:	68fb      	ldr	r3, [r7, #12]
   16bca:	781b      	ldrb	r3, [r3, #0]
   16bcc:	2b00      	cmp	r3, #0
   16bce:	d15a      	bne.n	16c86 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16bd0:	4b33      	ldr	r3, [pc, #204]	; (16ca0 <wifi_cb+0x110>)
   16bd2:	0019      	movs	r1, r3
   16bd4:	2001      	movs	r0, #1
   16bd6:	4b30      	ldr	r3, [pc, #192]	; (16c98 <wifi_cb+0x108>)
   16bd8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16bda:	2002      	movs	r0, #2
   16bdc:	4b31      	ldr	r3, [pc, #196]	; (16ca4 <wifi_cb+0x114>)
   16bde:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16be0:	2008      	movs	r0, #8
   16be2:	4b31      	ldr	r3, [pc, #196]	; (16ca8 <wifi_cb+0x118>)
   16be4:	4798      	blx	r3
   16be6:	1e03      	subs	r3, r0, #0
   16be8:	d006      	beq.n	16bf8 <wifi_cb+0x68>
                    f_close(&file_object);
   16bea:	4b30      	ldr	r3, [pc, #192]	; (16cac <wifi_cb+0x11c>)
   16bec:	0018      	movs	r0, r3
   16bee:	4b30      	ldr	r3, [pc, #192]	; (16cb0 <wifi_cb+0x120>)
   16bf0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16bf2:	2008      	movs	r0, #8
   16bf4:	4b2b      	ldr	r3, [pc, #172]	; (16ca4 <wifi_cb+0x114>)
   16bf6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16bf8:	2004      	movs	r0, #4
   16bfa:	4b2b      	ldr	r3, [pc, #172]	; (16ca8 <wifi_cb+0x118>)
   16bfc:	4798      	blx	r3
   16bfe:	1e03      	subs	r3, r0, #0
   16c00:	d002      	beq.n	16c08 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   16c02:	2004      	movs	r0, #4
   16c04:	4b27      	ldr	r3, [pc, #156]	; (16ca4 <wifi_cb+0x114>)
   16c06:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16c08:	4b2a      	ldr	r3, [pc, #168]	; (16cb4 <wifi_cb+0x124>)
   16c0a:	2101      	movs	r1, #1
   16c0c:	0018      	movs	r0, r3
   16c0e:	4b2a      	ldr	r3, [pc, #168]	; (16cb8 <wifi_cb+0x128>)
   16c10:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16c12:	4a2a      	ldr	r2, [pc, #168]	; (16cbc <wifi_cb+0x12c>)
   16c14:	482a      	ldr	r0, [pc, #168]	; (16cc0 <wifi_cb+0x130>)
   16c16:	23ff      	movs	r3, #255	; 0xff
   16c18:	9300      	str	r3, [sp, #0]
   16c1a:	0013      	movs	r3, r2
   16c1c:	2202      	movs	r2, #2
   16c1e:	2105      	movs	r1, #5
   16c20:	4c28      	ldr	r4, [pc, #160]	; (16cc4 <wifi_cb+0x134>)
   16c22:	47a0      	blx	r4
            break;
   16c24:	e02f      	b.n	16c86 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16c26:	683b      	ldr	r3, [r7, #0]
   16c28:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16c2a:	68bb      	ldr	r3, [r7, #8]
   16c2c:	781b      	ldrb	r3, [r3, #0]
   16c2e:	0018      	movs	r0, r3
   16c30:	68bb      	ldr	r3, [r7, #8]
   16c32:	3301      	adds	r3, #1
   16c34:	781b      	ldrb	r3, [r3, #0]
   16c36:	001c      	movs	r4, r3
   16c38:	68bb      	ldr	r3, [r7, #8]
   16c3a:	3302      	adds	r3, #2
   16c3c:	781b      	ldrb	r3, [r3, #0]
   16c3e:	001a      	movs	r2, r3
   16c40:	68bb      	ldr	r3, [r7, #8]
   16c42:	3303      	adds	r3, #3
   16c44:	781b      	ldrb	r3, [r3, #0]
   16c46:	4920      	ldr	r1, [pc, #128]	; (16cc8 <wifi_cb+0x138>)
   16c48:	9301      	str	r3, [sp, #4]
   16c4a:	9200      	str	r2, [sp, #0]
   16c4c:	0023      	movs	r3, r4
   16c4e:	0002      	movs	r2, r0
   16c50:	2001      	movs	r0, #1
   16c52:	4c11      	ldr	r4, [pc, #68]	; (16c98 <wifi_cb+0x108>)
   16c54:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16c56:	2002      	movs	r0, #2
   16c58:	4b1c      	ldr	r3, [pc, #112]	; (16ccc <wifi_cb+0x13c>)
   16c5a:	4798      	blx	r3
            if (do_download_flag == 1) {
   16c5c:	4b1c      	ldr	r3, [pc, #112]	; (16cd0 <wifi_cb+0x140>)
   16c5e:	781b      	ldrb	r3, [r3, #0]
   16c60:	2b01      	cmp	r3, #1
   16c62:	d102      	bne.n	16c6a <wifi_cb+0xda>
                start_download();
   16c64:	4b1b      	ldr	r3, [pc, #108]	; (16cd4 <wifi_cb+0x144>)
   16c66:	4798      	blx	r3
        } break;
   16c68:	e00f      	b.n	16c8a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16c6a:	4a1b      	ldr	r2, [pc, #108]	; (16cd8 <wifi_cb+0x148>)
   16c6c:	4b11      	ldr	r3, [pc, #68]	; (16cb4 <wifi_cb+0x124>)
   16c6e:	0011      	movs	r1, r2
   16c70:	0018      	movs	r0, r3
   16c72:	4b1a      	ldr	r3, [pc, #104]	; (16cdc <wifi_cb+0x14c>)
   16c74:	4798      	blx	r3
   16c76:	1e03      	subs	r3, r0, #0
   16c78:	d007      	beq.n	16c8a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16c7a:	4b19      	ldr	r3, [pc, #100]	; (16ce0 <wifi_cb+0x150>)
   16c7c:	0019      	movs	r1, r3
   16c7e:	2001      	movs	r0, #1
   16c80:	4b05      	ldr	r3, [pc, #20]	; (16c98 <wifi_cb+0x108>)
   16c82:	4798      	blx	r3
        } break;
   16c84:	e001      	b.n	16c8a <wifi_cb+0xfa>
            break;
   16c86:	46c0      	nop			; (mov r8, r8)
   16c88:	e000      	b.n	16c8c <wifi_cb+0xfc>
        } break;
   16c8a:	46c0      	nop			; (mov r8, r8)
    }
}
   16c8c:	46c0      	nop			; (mov r8, r8)
   16c8e:	46bd      	mov	sp, r7
   16c90:	b005      	add	sp, #20
   16c92:	bd90      	pop	{r4, r7, pc}
   16c94:	00038e6c 	.word	0x00038e6c
   16c98:	0001e5e1 	.word	0x0001e5e1
   16c9c:	00022ae9 	.word	0x00022ae9
   16ca0:	00038e8c 	.word	0x00038e8c
   16ca4:	000163a1 	.word	0x000163a1
   16ca8:	000163fd 	.word	0x000163fd
   16cac:	2000087c 	.word	0x2000087c
   16cb0:	0002e9b5 	.word	0x0002e9b5
   16cb4:	200008a8 	.word	0x200008a8
   16cb8:	0002ffc5 	.word	0x0002ffc5
   16cbc:	00038eb0 	.word	0x00038eb0
   16cc0:	00038ebc 	.word	0x00038ebc
   16cc4:	00022615 	.word	0x00022615
   16cc8:	00038ec4 	.word	0x00038ec4
   16ccc:	000163d5 	.word	0x000163d5
   16cd0:	20000648 	.word	0x20000648
   16cd4:	00016725 	.word	0x00016725
   16cd8:	00038adc 	.word	0x00038adc
   16cdc:	0002fe91 	.word	0x0002fe91
   16ce0:	00038eec 	.word	0x00038eec

00016ce4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16ce4:	b590      	push	{r4, r7, lr}
   16ce6:	b083      	sub	sp, #12
   16ce8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16cea:	4b29      	ldr	r3, [pc, #164]	; (16d90 <init_storage+0xac>)
   16cec:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16cee:	4b29      	ldr	r3, [pc, #164]	; (16d94 <init_storage+0xb0>)
   16cf0:	0019      	movs	r1, r3
   16cf2:	2001      	movs	r0, #1
   16cf4:	4b28      	ldr	r3, [pc, #160]	; (16d98 <init_storage+0xb4>)
   16cf6:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16cf8:	1dfc      	adds	r4, r7, #7
   16cfa:	2000      	movs	r0, #0
   16cfc:	4b27      	ldr	r3, [pc, #156]	; (16d9c <init_storage+0xb8>)
   16cfe:	4798      	blx	r3
   16d00:	0003      	movs	r3, r0
   16d02:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   16d04:	1dfb      	adds	r3, r7, #7
   16d06:	781b      	ldrb	r3, [r3, #0]
   16d08:	2b01      	cmp	r3, #1
   16d0a:	d110      	bne.n	16d2e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16d0c:	4b24      	ldr	r3, [pc, #144]	; (16da0 <init_storage+0xbc>)
   16d0e:	0019      	movs	r1, r3
   16d10:	2001      	movs	r0, #1
   16d12:	4b21      	ldr	r3, [pc, #132]	; (16d98 <init_storage+0xb4>)
   16d14:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   16d16:	4b23      	ldr	r3, [pc, #140]	; (16da4 <init_storage+0xc0>)
   16d18:	0019      	movs	r1, r3
   16d1a:	2001      	movs	r0, #1
   16d1c:	4b1e      	ldr	r3, [pc, #120]	; (16d98 <init_storage+0xb4>)
   16d1e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   16d20:	46c0      	nop			; (mov r8, r8)
   16d22:	2000      	movs	r0, #0
   16d24:	4b20      	ldr	r3, [pc, #128]	; (16da8 <init_storage+0xc4>)
   16d26:	4798      	blx	r3
   16d28:	0003      	movs	r3, r0
   16d2a:	2b02      	cmp	r3, #2
   16d2c:	d1f9      	bne.n	16d22 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   16d2e:	1dfb      	adds	r3, r7, #7
   16d30:	781b      	ldrb	r3, [r3, #0]
   16d32:	2b00      	cmp	r3, #0
   16d34:	d1e0      	bne.n	16cf8 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   16d36:	4b1d      	ldr	r3, [pc, #116]	; (16dac <init_storage+0xc8>)
   16d38:	0019      	movs	r1, r3
   16d3a:	2001      	movs	r0, #1
   16d3c:	4b16      	ldr	r3, [pc, #88]	; (16d98 <init_storage+0xb4>)
   16d3e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   16d40:	238c      	movs	r3, #140	; 0x8c
   16d42:	009a      	lsls	r2, r3, #2
   16d44:	4b1a      	ldr	r3, [pc, #104]	; (16db0 <init_storage+0xcc>)
   16d46:	2100      	movs	r1, #0
   16d48:	0018      	movs	r0, r3
   16d4a:	4b1a      	ldr	r3, [pc, #104]	; (16db4 <init_storage+0xd0>)
   16d4c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16d4e:	1dbc      	adds	r4, r7, #6
   16d50:	4b17      	ldr	r3, [pc, #92]	; (16db0 <init_storage+0xcc>)
   16d52:	0019      	movs	r1, r3
   16d54:	2000      	movs	r0, #0
   16d56:	4b18      	ldr	r3, [pc, #96]	; (16db8 <init_storage+0xd4>)
   16d58:	4798      	blx	r3
   16d5a:	0003      	movs	r3, r0
   16d5c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   16d5e:	1dbb      	adds	r3, r7, #6
   16d60:	781b      	ldrb	r3, [r3, #0]
   16d62:	2b0b      	cmp	r3, #11
   16d64:	d107      	bne.n	16d76 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   16d66:	1dbb      	adds	r3, r7, #6
   16d68:	781a      	ldrb	r2, [r3, #0]
   16d6a:	4b14      	ldr	r3, [pc, #80]	; (16dbc <init_storage+0xd8>)
   16d6c:	0019      	movs	r1, r3
   16d6e:	2001      	movs	r0, #1
   16d70:	4b09      	ldr	r3, [pc, #36]	; (16d98 <init_storage+0xb4>)
   16d72:	4798      	blx	r3
            return;
   16d74:	e008      	b.n	16d88 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   16d76:	4b12      	ldr	r3, [pc, #72]	; (16dc0 <init_storage+0xdc>)
   16d78:	0019      	movs	r1, r3
   16d7a:	2001      	movs	r0, #1
   16d7c:	4b06      	ldr	r3, [pc, #24]	; (16d98 <init_storage+0xb4>)
   16d7e:	4798      	blx	r3
        add_state(STORAGE_READY);
   16d80:	2001      	movs	r0, #1
   16d82:	4b10      	ldr	r3, [pc, #64]	; (16dc4 <init_storage+0xe0>)
   16d84:	4798      	blx	r3
        return;
   16d86:	46c0      	nop			; (mov r8, r8)
    }
}
   16d88:	46bd      	mov	sp, r7
   16d8a:	b003      	add	sp, #12
   16d8c:	bd90      	pop	{r4, r7, pc}
   16d8e:	46c0      	nop			; (mov r8, r8)
   16d90:	0001f3f9 	.word	0x0001f3f9
   16d94:	00038f10 	.word	0x00038f10
   16d98:	0001e5e1 	.word	0x0001e5e1
   16d9c:	0001f8d5 	.word	0x0001f8d5
   16da0:	00038f48 	.word	0x00038f48
   16da4:	00038f70 	.word	0x00038f70
   16da8:	0001f449 	.word	0x0001f449
   16dac:	00038fa4 	.word	0x00038fa4
   16db0:	2000064c 	.word	0x2000064c
   16db4:	00035377 	.word	0x00035377
   16db8:	0002df5d 	.word	0x0002df5d
   16dbc:	00038fc8 	.word	0x00038fc8
   16dc0:	00038ff8 	.word	0x00038ff8
   16dc4:	000163d5 	.word	0x000163d5

00016dc8 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16dc8:	b580      	push	{r7, lr}
   16dca:	b082      	sub	sp, #8
   16dcc:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16dce:	1d3b      	adds	r3, r7, #4
   16dd0:	0018      	movs	r0, r3
   16dd2:	4b08      	ldr	r3, [pc, #32]	; (16df4 <configure_timer+0x2c>)
   16dd4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   16dd6:	1d3a      	adds	r2, r7, #4
   16dd8:	4b07      	ldr	r3, [pc, #28]	; (16df8 <configure_timer+0x30>)
   16dda:	0011      	movs	r1, r2
   16ddc:	0018      	movs	r0, r3
   16dde:	4b07      	ldr	r3, [pc, #28]	; (16dfc <configure_timer+0x34>)
   16de0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   16de2:	4b05      	ldr	r3, [pc, #20]	; (16df8 <configure_timer+0x30>)
   16de4:	0018      	movs	r0, r3
   16de6:	4b06      	ldr	r3, [pc, #24]	; (16e00 <configure_timer+0x38>)
   16de8:	4798      	blx	r3
}
   16dea:	46c0      	nop			; (mov r8, r8)
   16dec:	46bd      	mov	sp, r7
   16dee:	b002      	add	sp, #8
   16df0:	bd80      	pop	{r7, pc}
   16df2:	46c0      	nop			; (mov r8, r8)
   16df4:	00032aad 	.word	0x00032aad
   16df8:	20004a78 	.word	0x20004a78
   16dfc:	00032ad1 	.word	0x00032ad1
   16e00:	00032bbd 	.word	0x00032bbd

00016e04 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16e04:	b580      	push	{r7, lr}
   16e06:	b088      	sub	sp, #32
   16e08:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16e0a:	003b      	movs	r3, r7
   16e0c:	0018      	movs	r0, r3
   16e0e:	4b16      	ldr	r3, [pc, #88]	; (16e68 <configure_http_client+0x64>)
   16e10:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16e12:	003b      	movs	r3, r7
   16e14:	2280      	movs	r2, #128	; 0x80
   16e16:	0092      	lsls	r2, r2, #2
   16e18:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16e1a:	003b      	movs	r3, r7
   16e1c:	4a13      	ldr	r2, [pc, #76]	; (16e6c <configure_http_client+0x68>)
   16e1e:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   16e20:	003b      	movs	r3, r7
   16e22:	22bc      	movs	r2, #188	; 0xbc
   16e24:	32ff      	adds	r2, #255	; 0xff
   16e26:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16e28:	003b      	movs	r3, r7
   16e2a:	2201      	movs	r2, #1
   16e2c:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16e2e:	003a      	movs	r2, r7
   16e30:	4b0f      	ldr	r3, [pc, #60]	; (16e70 <configure_http_client+0x6c>)
   16e32:	0011      	movs	r1, r2
   16e34:	0018      	movs	r0, r3
   16e36:	4b0f      	ldr	r3, [pc, #60]	; (16e74 <configure_http_client+0x70>)
   16e38:	4798      	blx	r3
   16e3a:	0003      	movs	r3, r0
   16e3c:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   16e3e:	69fb      	ldr	r3, [r7, #28]
   16e40:	2b00      	cmp	r3, #0
   16e42:	da06      	bge.n	16e52 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16e44:	69fa      	ldr	r2, [r7, #28]
   16e46:	4b0c      	ldr	r3, [pc, #48]	; (16e78 <configure_http_client+0x74>)
   16e48:	0019      	movs	r1, r3
   16e4a:	2001      	movs	r0, #1
   16e4c:	4b0b      	ldr	r3, [pc, #44]	; (16e7c <configure_http_client+0x78>)
   16e4e:	4798      	blx	r3
        while (1) {
   16e50:	e7fe      	b.n	16e50 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16e52:	4a0b      	ldr	r2, [pc, #44]	; (16e80 <configure_http_client+0x7c>)
   16e54:	4b06      	ldr	r3, [pc, #24]	; (16e70 <configure_http_client+0x6c>)
   16e56:	0011      	movs	r1, r2
   16e58:	0018      	movs	r0, r3
   16e5a:	4b0a      	ldr	r3, [pc, #40]	; (16e84 <configure_http_client+0x80>)
   16e5c:	4798      	blx	r3
}
   16e5e:	46c0      	nop			; (mov r8, r8)
   16e60:	46bd      	mov	sp, r7
   16e62:	b008      	add	sp, #32
   16e64:	bd80      	pop	{r7, pc}
   16e66:	46c0      	nop			; (mov r8, r8)
   16e68:	00031141 	.word	0x00031141
   16e6c:	20004a78 	.word	0x20004a78
   16e70:	20004ad0 	.word	0x20004ad0
   16e74:	0003118d 	.word	0x0003118d
   16e78:	0003901c 	.word	0x0003901c
   16e7c:	0001e5e1 	.word	0x0001e5e1
   16e80:	000169b5 	.word	0x000169b5
   16e84:	00031279 	.word	0x00031279

00016e88 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16e88:	b580      	push	{r7, lr}
   16e8a:	b082      	sub	sp, #8
   16e8c:	af00      	add	r7, sp, #0
   16e8e:	603a      	str	r2, [r7, #0]
   16e90:	1dfb      	adds	r3, r7, #7
   16e92:	1c02      	adds	r2, r0, #0
   16e94:	701a      	strb	r2, [r3, #0]
   16e96:	1dbb      	adds	r3, r7, #6
   16e98:	1c0a      	adds	r2, r1, #0
   16e9a:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16e9c:	683a      	ldr	r2, [r7, #0]
   16e9e:	1dbb      	adds	r3, r7, #6
   16ea0:	7819      	ldrb	r1, [r3, #0]
   16ea2:	1dfb      	adds	r3, r7, #7
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	b25b      	sxtb	r3, r3
   16ea8:	0018      	movs	r0, r3
   16eaa:	4b03      	ldr	r3, [pc, #12]	; (16eb8 <socket_event_handler+0x30>)
   16eac:	4798      	blx	r3
}
   16eae:	46c0      	nop			; (mov r8, r8)
   16eb0:	46bd      	mov	sp, r7
   16eb2:	b002      	add	sp, #8
   16eb4:	bd80      	pop	{r7, pc}
   16eb6:	46c0      	nop			; (mov r8, r8)
   16eb8:	0002fe39 	.word	0x0002fe39

00016ebc <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16ebc:	b580      	push	{r7, lr}
   16ebe:	b082      	sub	sp, #8
   16ec0:	af00      	add	r7, sp, #0
   16ec2:	6078      	str	r0, [r7, #4]
   16ec4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   16ec6:	683a      	ldr	r2, [r7, #0]
   16ec8:	687b      	ldr	r3, [r7, #4]
   16eca:	0011      	movs	r1, r2
   16ecc:	0018      	movs	r0, r3
   16ece:	4b03      	ldr	r3, [pc, #12]	; (16edc <socket_resolve_handler+0x20>)
   16ed0:	4798      	blx	r3
}
   16ed2:	46c0      	nop			; (mov r8, r8)
   16ed4:	46bd      	mov	sp, r7
   16ed6:	b002      	add	sp, #8
   16ed8:	bd80      	pop	{r7, pc}
   16eda:	46c0      	nop			; (mov r8, r8)
   16edc:	0002fe6d 	.word	0x0002fe6d

00016ee0 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   16ee0:	b590      	push	{r4, r7, lr}
   16ee2:	b089      	sub	sp, #36	; 0x24
   16ee4:	af02      	add	r7, sp, #8
   16ee6:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16ee8:	2310      	movs	r3, #16
   16eea:	18fb      	adds	r3, r7, r3
   16eec:	2200      	movs	r2, #0
   16eee:	701a      	strb	r2, [r3, #0]
   16ef0:	2310      	movs	r3, #16
   16ef2:	18fb      	adds	r3, r7, r3
   16ef4:	2200      	movs	r2, #0
   16ef6:	705a      	strb	r2, [r3, #1]
   16ef8:	2310      	movs	r3, #16
   16efa:	18fb      	adds	r3, r7, r3
   16efc:	2200      	movs	r2, #0
   16efe:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16f00:	687b      	ldr	r3, [r7, #4]
   16f02:	685b      	ldr	r3, [r3, #4]
   16f04:	685a      	ldr	r2, [r3, #4]
   16f06:	687b      	ldr	r3, [r7, #4]
   16f08:	685b      	ldr	r3, [r3, #4]
   16f0a:	689b      	ldr	r3, [r3, #8]
   16f0c:	492a      	ldr	r1, [pc, #168]	; (16fb8 <SubscribeHandlerLedTopic+0xd8>)
   16f0e:	2001      	movs	r0, #1
   16f10:	4c2a      	ldr	r4, [pc, #168]	; (16fbc <SubscribeHandlerLedTopic+0xdc>)
   16f12:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   16f14:	687b      	ldr	r3, [r7, #4]
   16f16:	681b      	ldr	r3, [r3, #0]
   16f18:	689b      	ldr	r3, [r3, #8]
   16f1a:	4929      	ldr	r1, [pc, #164]	; (16fc0 <SubscribeHandlerLedTopic+0xe0>)
   16f1c:	2204      	movs	r2, #4
   16f1e:	0018      	movs	r0, r3
   16f20:	4b28      	ldr	r3, [pc, #160]	; (16fc4 <SubscribeHandlerLedTopic+0xe4>)
   16f22:	4798      	blx	r3
   16f24:	1e03      	subs	r3, r0, #0
   16f26:	d143      	bne.n	16fb0 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   16f28:	687b      	ldr	r3, [r7, #4]
   16f2a:	681b      	ldr	r3, [r3, #0]
   16f2c:	689b      	ldr	r3, [r3, #8]
   16f2e:	3304      	adds	r3, #4
   16f30:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   16f32:	2300      	movs	r3, #0
   16f34:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   16f36:	e015      	b.n	16f64 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   16f38:	697c      	ldr	r4, [r7, #20]
   16f3a:	1c63      	adds	r3, r4, #1
   16f3c:	617b      	str	r3, [r7, #20]
   16f3e:	68fb      	ldr	r3, [r7, #12]
   16f40:	220c      	movs	r2, #12
   16f42:	18b9      	adds	r1, r7, r2
   16f44:	220a      	movs	r2, #10
   16f46:	0018      	movs	r0, r3
   16f48:	4b1f      	ldr	r3, [pc, #124]	; (16fc8 <SubscribeHandlerLedTopic+0xe8>)
   16f4a:	4798      	blx	r3
   16f4c:	0003      	movs	r3, r0
   16f4e:	b2da      	uxtb	r2, r3
   16f50:	2310      	movs	r3, #16
   16f52:	18fb      	adds	r3, r7, r3
   16f54:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16f56:	68fb      	ldr	r3, [r7, #12]
   16f58:	781b      	ldrb	r3, [r3, #0]
   16f5a:	2b2c      	cmp	r3, #44	; 0x2c
   16f5c:	d10a      	bne.n	16f74 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   16f5e:	68fb      	ldr	r3, [r7, #12]
   16f60:	3301      	adds	r3, #1
   16f62:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   16f64:	697b      	ldr	r3, [r7, #20]
   16f66:	2b02      	cmp	r3, #2
   16f68:	dc05      	bgt.n	16f76 <SubscribeHandlerLedTopic+0x96>
   16f6a:	68fb      	ldr	r3, [r7, #12]
   16f6c:	781b      	ldrb	r3, [r3, #0]
   16f6e:	2b00      	cmp	r3, #0
   16f70:	d1e2      	bne.n	16f38 <SubscribeHandlerLedTopic+0x58>
   16f72:	e000      	b.n	16f76 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   16f74:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   16f76:	2310      	movs	r3, #16
   16f78:	18fb      	adds	r3, r7, r3
   16f7a:	781b      	ldrb	r3, [r3, #0]
   16f7c:	001a      	movs	r2, r3
   16f7e:	2310      	movs	r3, #16
   16f80:	18fb      	adds	r3, r7, r3
   16f82:	785b      	ldrb	r3, [r3, #1]
   16f84:	0018      	movs	r0, r3
   16f86:	2310      	movs	r3, #16
   16f88:	18fb      	adds	r3, r7, r3
   16f8a:	789b      	ldrb	r3, [r3, #2]
   16f8c:	490f      	ldr	r1, [pc, #60]	; (16fcc <SubscribeHandlerLedTopic+0xec>)
   16f8e:	9300      	str	r3, [sp, #0]
   16f90:	0003      	movs	r3, r0
   16f92:	2001      	movs	r0, #1
   16f94:	4c09      	ldr	r4, [pc, #36]	; (16fbc <SubscribeHandlerLedTopic+0xdc>)
   16f96:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   16f98:	2310      	movs	r3, #16
   16f9a:	18fb      	adds	r3, r7, r3
   16f9c:	7818      	ldrb	r0, [r3, #0]
   16f9e:	2310      	movs	r3, #16
   16fa0:	18fb      	adds	r3, r7, r3
   16fa2:	7859      	ldrb	r1, [r3, #1]
   16fa4:	2310      	movs	r3, #16
   16fa6:	18fb      	adds	r3, r7, r3
   16fa8:	789b      	ldrb	r3, [r3, #2]
   16faa:	001a      	movs	r2, r3
   16fac:	4b08      	ldr	r3, [pc, #32]	; (16fd0 <SubscribeHandlerLedTopic+0xf0>)
   16fae:	4798      	blx	r3
    }
}
   16fb0:	46c0      	nop			; (mov r8, r8)
   16fb2:	46bd      	mov	sp, r7
   16fb4:	b007      	add	sp, #28
   16fb6:	bd90      	pop	{r4, r7, pc}
   16fb8:	00039064 	.word	0x00039064
   16fbc:	0001e5e1 	.word	0x0001e5e1
   16fc0:	0003906c 	.word	0x0003906c
   16fc4:	0003573d 	.word	0x0003573d
   16fc8:	0003654d 	.word	0x0003654d
   16fcc:	00039074 	.word	0x00039074
   16fd0:	00016269 	.word	0x00016269

00016fd4 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   16fd4:	b590      	push	{r4, r7, lr}
   16fd6:	b08b      	sub	sp, #44	; 0x2c
   16fd8:	af00      	add	r7, sp, #0
   16fda:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   16fdc:	230c      	movs	r3, #12
   16fde:	18fb      	adds	r3, r7, r3
   16fe0:	2214      	movs	r2, #20
   16fe2:	21ff      	movs	r1, #255	; 0xff
   16fe4:	0018      	movs	r0, r3
   16fe6:	4b48      	ldr	r3, [pc, #288]	; (17108 <SubscribeHandlerGameTopic+0x134>)
   16fe8:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16fea:	687b      	ldr	r3, [r7, #4]
   16fec:	681b      	ldr	r3, [r3, #0]
   16fee:	689b      	ldr	r3, [r3, #8]
   16ff0:	4946      	ldr	r1, [pc, #280]	; (1710c <SubscribeHandlerGameTopic+0x138>)
   16ff2:	2209      	movs	r2, #9
   16ff4:	0018      	movs	r0, r3
   16ff6:	4b46      	ldr	r3, [pc, #280]	; (17110 <SubscribeHandlerGameTopic+0x13c>)
   16ff8:	4798      	blx	r3
   16ffa:	1e03      	subs	r3, r0, #0
   16ffc:	d166      	bne.n	170cc <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   16ffe:	4b45      	ldr	r3, [pc, #276]	; (17114 <SubscribeHandlerGameTopic+0x140>)
   17000:	0019      	movs	r1, r3
   17002:	2001      	movs	r0, #1
   17004:	4b44      	ldr	r3, [pc, #272]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   17006:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17008:	687b      	ldr	r3, [r7, #4]
   1700a:	685b      	ldr	r3, [r3, #4]
   1700c:	685a      	ldr	r2, [r3, #4]
   1700e:	687b      	ldr	r3, [r7, #4]
   17010:	685b      	ldr	r3, [r3, #4]
   17012:	689b      	ldr	r3, [r3, #8]
   17014:	4941      	ldr	r1, [pc, #260]	; (1711c <SubscribeHandlerGameTopic+0x148>)
   17016:	2001      	movs	r0, #1
   17018:	4c3f      	ldr	r4, [pc, #252]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   1701a:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   1701c:	687b      	ldr	r3, [r7, #4]
   1701e:	681b      	ldr	r3, [r3, #0]
   17020:	68da      	ldr	r2, [r3, #12]
   17022:	687b      	ldr	r3, [r7, #4]
   17024:	681b      	ldr	r3, [r3, #0]
   17026:	689b      	ldr	r3, [r3, #8]
   17028:	493d      	ldr	r1, [pc, #244]	; (17120 <SubscribeHandlerGameTopic+0x14c>)
   1702a:	2001      	movs	r0, #1
   1702c:	4c3a      	ldr	r4, [pc, #232]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   1702e:	47a0      	blx	r4

        int nb = 0;
   17030:	2300      	movs	r3, #0
   17032:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   17034:	687b      	ldr	r3, [r7, #4]
   17036:	681b      	ldr	r3, [r3, #0]
   17038:	689b      	ldr	r3, [r3, #8]
   1703a:	3309      	adds	r3, #9
   1703c:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1703e:	e015      	b.n	1706c <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   17040:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   17042:	1c63      	adds	r3, r4, #1
   17044:	627b      	str	r3, [r7, #36]	; 0x24
   17046:	68bb      	ldr	r3, [r7, #8]
   17048:	2208      	movs	r2, #8
   1704a:	18b9      	adds	r1, r7, r2
   1704c:	220a      	movs	r2, #10
   1704e:	0018      	movs	r0, r3
   17050:	4b34      	ldr	r3, [pc, #208]	; (17124 <SubscribeHandlerGameTopic+0x150>)
   17052:	4798      	blx	r3
   17054:	0003      	movs	r3, r0
   17056:	b2da      	uxtb	r2, r3
   17058:	230c      	movs	r3, #12
   1705a:	18fb      	adds	r3, r7, r3
   1705c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1705e:	68bb      	ldr	r3, [r7, #8]
   17060:	781b      	ldrb	r3, [r3, #0]
   17062:	2b2c      	cmp	r3, #44	; 0x2c
   17064:	d10a      	bne.n	1707c <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   17066:	68bb      	ldr	r3, [r7, #8]
   17068:	3301      	adds	r3, #1
   1706a:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1706e:	2b13      	cmp	r3, #19
   17070:	dc05      	bgt.n	1707e <SubscribeHandlerGameTopic+0xaa>
   17072:	68bb      	ldr	r3, [r7, #8]
   17074:	781b      	ldrb	r3, [r3, #0]
   17076:	2b00      	cmp	r3, #0
   17078:	d1e2      	bne.n	17040 <SubscribeHandlerGameTopic+0x6c>
   1707a:	e000      	b.n	1707e <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   1707c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1707e:	4b2a      	ldr	r3, [pc, #168]	; (17128 <SubscribeHandlerGameTopic+0x154>)
   17080:	0019      	movs	r1, r3
   17082:	2001      	movs	r0, #1
   17084:	4b24      	ldr	r3, [pc, #144]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   17086:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17088:	2300      	movs	r3, #0
   1708a:	623b      	str	r3, [r7, #32]
   1708c:	e00d      	b.n	170aa <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1708e:	230c      	movs	r3, #12
   17090:	18fa      	adds	r2, r7, r3
   17092:	6a3b      	ldr	r3, [r7, #32]
   17094:	18d3      	adds	r3, r2, r3
   17096:	781b      	ldrb	r3, [r3, #0]
   17098:	001a      	movs	r2, r3
   1709a:	4b24      	ldr	r3, [pc, #144]	; (1712c <SubscribeHandlerGameTopic+0x158>)
   1709c:	0019      	movs	r1, r3
   1709e:	2001      	movs	r0, #1
   170a0:	4b1d      	ldr	r3, [pc, #116]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   170a2:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   170a4:	6a3b      	ldr	r3, [r7, #32]
   170a6:	3301      	adds	r3, #1
   170a8:	623b      	str	r3, [r7, #32]
   170aa:	6a3b      	ldr	r3, [r7, #32]
   170ac:	2b13      	cmp	r3, #19
   170ae:	ddee      	ble.n	1708e <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   170b0:	230c      	movs	r3, #12
   170b2:	18fb      	adds	r3, r7, r3
   170b4:	0018      	movs	r0, r3
   170b6:	4b1e      	ldr	r3, [pc, #120]	; (17130 <SubscribeHandlerGameTopic+0x15c>)
   170b8:	4798      	blx	r3
   170ba:	0003      	movs	r3, r0
   170bc:	2b01      	cmp	r3, #1
   170be:	d11e      	bne.n	170fe <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   170c0:	4b1c      	ldr	r3, [pc, #112]	; (17134 <SubscribeHandlerGameTopic+0x160>)
   170c2:	0019      	movs	r1, r3
   170c4:	2001      	movs	r0, #1
   170c6:	4b14      	ldr	r3, [pc, #80]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   170c8:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   170ca:	e018      	b.n	170fe <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   170cc:	4b1a      	ldr	r3, [pc, #104]	; (17138 <SubscribeHandlerGameTopic+0x164>)
   170ce:	0019      	movs	r1, r3
   170d0:	2001      	movs	r0, #1
   170d2:	4b11      	ldr	r3, [pc, #68]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   170d4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   170d6:	687b      	ldr	r3, [r7, #4]
   170d8:	685b      	ldr	r3, [r3, #4]
   170da:	685a      	ldr	r2, [r3, #4]
   170dc:	687b      	ldr	r3, [r7, #4]
   170de:	685b      	ldr	r3, [r3, #4]
   170e0:	689b      	ldr	r3, [r3, #8]
   170e2:	490e      	ldr	r1, [pc, #56]	; (1711c <SubscribeHandlerGameTopic+0x148>)
   170e4:	2001      	movs	r0, #1
   170e6:	4c0c      	ldr	r4, [pc, #48]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   170e8:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   170ea:	687b      	ldr	r3, [r7, #4]
   170ec:	681b      	ldr	r3, [r3, #0]
   170ee:	68da      	ldr	r2, [r3, #12]
   170f0:	687b      	ldr	r3, [r7, #4]
   170f2:	681b      	ldr	r3, [r3, #0]
   170f4:	689b      	ldr	r3, [r3, #8]
   170f6:	490a      	ldr	r1, [pc, #40]	; (17120 <SubscribeHandlerGameTopic+0x14c>)
   170f8:	2001      	movs	r0, #1
   170fa:	4c07      	ldr	r4, [pc, #28]	; (17118 <SubscribeHandlerGameTopic+0x144>)
   170fc:	47a0      	blx	r4
}
   170fe:	46c0      	nop			; (mov r8, r8)
   17100:	46bd      	mov	sp, r7
   17102:	b00b      	add	sp, #44	; 0x2c
   17104:	bd90      	pop	{r4, r7, pc}
   17106:	46c0      	nop			; (mov r8, r8)
   17108:	00035377 	.word	0x00035377
   1710c:	00039088 	.word	0x00039088
   17110:	0003573d 	.word	0x0003573d
   17114:	00039094 	.word	0x00039094
   17118:	0001e5e1 	.word	0x0001e5e1
   1711c:	00039064 	.word	0x00039064
   17120:	000390b0 	.word	0x000390b0
   17124:	0003654d 	.word	0x0003654d
   17128:	000390b8 	.word	0x000390b8
   1712c:	000390cc 	.word	0x000390cc
   17130:	00013f79 	.word	0x00013f79
   17134:	000390d0 	.word	0x000390d0
   17138:	000390ec 	.word	0x000390ec

0001713c <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   1713c:	b590      	push	{r4, r7, lr}
   1713e:	b083      	sub	sp, #12
   17140:	af00      	add	r7, sp, #0
   17142:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "IMU topic received! -"); //changed by Derek
   17144:	4b09      	ldr	r3, [pc, #36]	; (1716c <SubscribeHandlerImuTopic+0x30>)
   17146:	0019      	movs	r1, r3
   17148:	2001      	movs	r0, #1
   1714a:	4b09      	ldr	r3, [pc, #36]	; (17170 <SubscribeHandlerImuTopic+0x34>)
   1714c:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s \r\n\r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1714e:	687b      	ldr	r3, [r7, #4]
   17150:	685b      	ldr	r3, [r3, #4]
   17152:	685a      	ldr	r2, [r3, #4]
   17154:	687b      	ldr	r3, [r7, #4]
   17156:	685b      	ldr	r3, [r3, #4]
   17158:	689b      	ldr	r3, [r3, #8]
   1715a:	4906      	ldr	r1, [pc, #24]	; (17174 <SubscribeHandlerImuTopic+0x38>)
   1715c:	2001      	movs	r0, #1
   1715e:	4c04      	ldr	r4, [pc, #16]	; (17170 <SubscribeHandlerImuTopic+0x34>)
   17160:	47a0      	blx	r4
}
   17162:	46c0      	nop			; (mov r8, r8)
   17164:	46bd      	mov	sp, r7
   17166:	b003      	add	sp, #12
   17168:	bd90      	pop	{r4, r7, pc}
   1716a:	46c0      	nop			; (mov r8, r8)
   1716c:	0003911c 	.word	0x0003911c
   17170:	0001e5e1 	.word	0x0001e5e1
   17174:	00039134 	.word	0x00039134

00017178 <SubscribeHandlerGpsTopic>:
	LogMessage(LOG_DEBUG_LVL, "\r\nDistance topic received!\r\n");
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandlerGpsTopic(MessageData *msgData) //Derek-GPS, used in mqtt_callback()
{
   17178:	b590      	push	{r4, r7, lr}
   1717a:	b083      	sub	sp, #12
   1717c:	af00      	add	r7, sp, #0
   1717e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "GPS topic received! -");
   17180:	4b09      	ldr	r3, [pc, #36]	; (171a8 <SubscribeHandlerGpsTopic+0x30>)
   17182:	0019      	movs	r1, r3
   17184:	2001      	movs	r0, #1
   17186:	4b09      	ldr	r3, [pc, #36]	; (171ac <SubscribeHandlerGpsTopic+0x34>)
   17188:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "%.*s \r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1718a:	687b      	ldr	r3, [r7, #4]
   1718c:	685b      	ldr	r3, [r3, #4]
   1718e:	685a      	ldr	r2, [r3, #4]
   17190:	687b      	ldr	r3, [r7, #4]
   17192:	685b      	ldr	r3, [r3, #4]
   17194:	689b      	ldr	r3, [r3, #8]
   17196:	4906      	ldr	r1, [pc, #24]	; (171b0 <SubscribeHandlerGpsTopic+0x38>)
   17198:	2001      	movs	r0, #1
   1719a:	4c04      	ldr	r4, [pc, #16]	; (171ac <SubscribeHandlerGpsTopic+0x34>)
   1719c:	47a0      	blx	r4
}
   1719e:	46c0      	nop			; (mov r8, r8)
   171a0:	46bd      	mov	sp, r7
   171a2:	b003      	add	sp, #12
   171a4:	bd90      	pop	{r4, r7, pc}
   171a6:	46c0      	nop			; (mov r8, r8)
   171a8:	00039160 	.word	0x00039160
   171ac:	0001e5e1 	.word	0x0001e5e1
   171b0:	00039178 	.word	0x00039178

000171b4 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   171b4:	b590      	push	{r4, r7, lr}
   171b6:	b08b      	sub	sp, #44	; 0x2c
   171b8:	af06      	add	r7, sp, #24
   171ba:	60f8      	str	r0, [r7, #12]
   171bc:	60b9      	str	r1, [r7, #8]
   171be:	607a      	str	r2, [r7, #4]
    switch (type) {
   171c0:	68bb      	ldr	r3, [r7, #8]
   171c2:	2b01      	cmp	r3, #1
   171c4:	d03b      	beq.n	1723e <mqtt_callback+0x8a>
   171c6:	2b05      	cmp	r3, #5
   171c8:	d064      	beq.n	17294 <mqtt_callback+0xe0>
   171ca:	2b00      	cmp	r3, #0
   171cc:	d000      	beq.n	171d0 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   171ce:	e067      	b.n	172a0 <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   171d0:	687b      	ldr	r3, [r7, #4]
   171d2:	681b      	ldr	r3, [r3, #0]
   171d4:	2b00      	cmp	r3, #0
   171d6:	db25      	blt.n	17224 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   171d8:	4b33      	ldr	r3, [pc, #204]	; (172a8 <mqtt_callback+0xf4>)
   171da:	0019      	movs	r1, r3
   171dc:	2001      	movs	r0, #1
   171de:	4b33      	ldr	r3, [pc, #204]	; (172ac <mqtt_callback+0xf8>)
   171e0:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   171e2:	4933      	ldr	r1, [pc, #204]	; (172b0 <mqtt_callback+0xfc>)
   171e4:	4a33      	ldr	r2, [pc, #204]	; (172b4 <mqtt_callback+0x100>)
   171e6:	68f8      	ldr	r0, [r7, #12]
   171e8:	2300      	movs	r3, #0
   171ea:	9305      	str	r3, [sp, #20]
   171ec:	2300      	movs	r3, #0
   171ee:	9304      	str	r3, [sp, #16]
   171f0:	2300      	movs	r3, #0
   171f2:	9303      	str	r3, [sp, #12]
   171f4:	2300      	movs	r3, #0
   171f6:	9302      	str	r3, [sp, #8]
   171f8:	2300      	movs	r3, #0
   171fa:	9301      	str	r3, [sp, #4]
   171fc:	4b2d      	ldr	r3, [pc, #180]	; (172b4 <mqtt_callback+0x100>)
   171fe:	9300      	str	r3, [sp, #0]
   17200:	000b      	movs	r3, r1
   17202:	2101      	movs	r1, #1
   17204:	4c2c      	ldr	r4, [pc, #176]	; (172b8 <mqtt_callback+0x104>)
   17206:	47a0      	blx	r4
   17208:	1e03      	subs	r3, r0, #0
   1720a:	d005      	beq.n	17218 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   1720c:	4b2b      	ldr	r3, [pc, #172]	; (172bc <mqtt_callback+0x108>)
   1720e:	0019      	movs	r1, r3
   17210:	2001      	movs	r0, #1
   17212:	4b26      	ldr	r3, [pc, #152]	; (172ac <mqtt_callback+0xf8>)
   17214:	4798      	blx	r3
        } break;
   17216:	e043      	b.n	172a0 <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n\r\n");
   17218:	4b29      	ldr	r3, [pc, #164]	; (172c0 <mqtt_callback+0x10c>)
   1721a:	0019      	movs	r1, r3
   1721c:	2001      	movs	r0, #1
   1721e:	4b23      	ldr	r3, [pc, #140]	; (172ac <mqtt_callback+0xf8>)
   17220:	4798      	blx	r3
        } break;
   17222:	e03d      	b.n	172a0 <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   17224:	4a27      	ldr	r2, [pc, #156]	; (172c4 <mqtt_callback+0x110>)
   17226:	4b28      	ldr	r3, [pc, #160]	; (172c8 <mqtt_callback+0x114>)
   17228:	0019      	movs	r1, r3
   1722a:	2001      	movs	r0, #1
   1722c:	4b1f      	ldr	r3, [pc, #124]	; (172ac <mqtt_callback+0xf8>)
   1722e:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   17230:	4a24      	ldr	r2, [pc, #144]	; (172c4 <mqtt_callback+0x110>)
   17232:	68fb      	ldr	r3, [r7, #12]
   17234:	0011      	movs	r1, r2
   17236:	0018      	movs	r0, r3
   17238:	4b24      	ldr	r3, [pc, #144]	; (172cc <mqtt_callback+0x118>)
   1723a:	4798      	blx	r3
        } break;
   1723c:	e030      	b.n	172a0 <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1723e:	687b      	ldr	r3, [r7, #4]
   17240:	781b      	ldrb	r3, [r3, #0]
   17242:	2b00      	cmp	r3, #0
   17244:	d11d      	bne.n	17282 <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   17246:	4b22      	ldr	r3, [pc, #136]	; (172d0 <mqtt_callback+0x11c>)
   17248:	4922      	ldr	r1, [pc, #136]	; (172d4 <mqtt_callback+0x120>)
   1724a:	68f8      	ldr	r0, [r7, #12]
   1724c:	2202      	movs	r2, #2
   1724e:	4c22      	ldr	r4, [pc, #136]	; (172d8 <mqtt_callback+0x124>)
   17250:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   17252:	4b22      	ldr	r3, [pc, #136]	; (172dc <mqtt_callback+0x128>)
   17254:	4922      	ldr	r1, [pc, #136]	; (172e0 <mqtt_callback+0x12c>)
   17256:	68f8      	ldr	r0, [r7, #12]
   17258:	2202      	movs	r2, #2
   1725a:	4c1f      	ldr	r4, [pc, #124]	; (172d8 <mqtt_callback+0x124>)
   1725c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   1725e:	4b21      	ldr	r3, [pc, #132]	; (172e4 <mqtt_callback+0x130>)
   17260:	4921      	ldr	r1, [pc, #132]	; (172e8 <mqtt_callback+0x134>)
   17262:	68f8      	ldr	r0, [r7, #12]
   17264:	2202      	movs	r2, #2
   17266:	4c1c      	ldr	r4, [pc, #112]	; (172d8 <mqtt_callback+0x124>)
   17268:	47a0      	blx	r4
				mqtt_subscribe(module_inst, GPS_TOPIC, 2, SubscribeHandlerGpsTopic); //Derek-GPS
   1726a:	4b20      	ldr	r3, [pc, #128]	; (172ec <mqtt_callback+0x138>)
   1726c:	4920      	ldr	r1, [pc, #128]	; (172f0 <mqtt_callback+0x13c>)
   1726e:	68f8      	ldr	r0, [r7, #12]
   17270:	2202      	movs	r2, #2
   17272:	4c19      	ldr	r4, [pc, #100]	; (172d8 <mqtt_callback+0x124>)
   17274:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   17276:	4b1f      	ldr	r3, [pc, #124]	; (172f4 <mqtt_callback+0x140>)
   17278:	0019      	movs	r1, r3
   1727a:	2001      	movs	r0, #1
   1727c:	4b0b      	ldr	r3, [pc, #44]	; (172ac <mqtt_callback+0xf8>)
   1727e:	4798      	blx	r3
            break;
   17280:	e00e      	b.n	172a0 <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17282:	687b      	ldr	r3, [r7, #4]
   17284:	781b      	ldrb	r3, [r3, #0]
   17286:	001a      	movs	r2, r3
   17288:	4b1b      	ldr	r3, [pc, #108]	; (172f8 <mqtt_callback+0x144>)
   1728a:	0019      	movs	r1, r3
   1728c:	2001      	movs	r0, #1
   1728e:	4b07      	ldr	r3, [pc, #28]	; (172ac <mqtt_callback+0xf8>)
   17290:	4798      	blx	r3
            break;
   17292:	e005      	b.n	172a0 <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17294:	4b19      	ldr	r3, [pc, #100]	; (172fc <mqtt_callback+0x148>)
   17296:	0019      	movs	r1, r3
   17298:	2001      	movs	r0, #1
   1729a:	4b04      	ldr	r3, [pc, #16]	; (172ac <mqtt_callback+0xf8>)
   1729c:	4798      	blx	r3
            break;
   1729e:	46c0      	nop			; (mov r8, r8)
}
   172a0:	46c0      	nop			; (mov r8, r8)
   172a2:	46bd      	mov	sp, r7
   172a4:	b005      	add	sp, #20
   172a6:	bd90      	pop	{r4, r7, pc}
   172a8:	000391ac 	.word	0x000391ac
   172ac:	0001e5e1 	.word	0x0001e5e1
   172b0:	000391c8 	.word	0x000391c8
   172b4:	000391d8 	.word	0x000391d8
   172b8:	0002fed9 	.word	0x0002fed9
   172bc:	000391e4 	.word	0x000391e4
   172c0:	0003920c 	.word	0x0003920c
   172c4:	00038adc 	.word	0x00038adc
   172c8:	0003922c 	.word	0x0003922c
   172cc:	0002fe91 	.word	0x0002fe91
   172d0:	00016fd5 	.word	0x00016fd5
   172d4:	00039264 	.word	0x00039264
   172d8:	00030079 	.word	0x00030079
   172dc:	00016ee1 	.word	0x00016ee1
   172e0:	00039188 	.word	0x00039188
   172e4:	0001713d 	.word	0x0001713d
   172e8:	00039278 	.word	0x00039278
   172ec:	00017179 	.word	0x00017179
   172f0:	0003928c 	.word	0x0003928c
   172f4:	000392a0 	.word	0x000392a0
   172f8:	000392b4 	.word	0x000392b4
   172fc:	000392e8 	.word	0x000392e8

00017300 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17300:	b580      	push	{r7, lr}
   17302:	b088      	sub	sp, #32
   17304:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17306:	1d3b      	adds	r3, r7, #4
   17308:	0018      	movs	r0, r3
   1730a:	4b1f      	ldr	r3, [pc, #124]	; (17388 <configure_mqtt+0x88>)
   1730c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1730e:	1d3b      	adds	r3, r7, #4
   17310:	4a1e      	ldr	r2, [pc, #120]	; (1738c <configure_mqtt+0x8c>)
   17312:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17314:	1d3b      	adds	r3, r7, #4
   17316:	2280      	movs	r2, #128	; 0x80
   17318:	0092      	lsls	r2, r2, #2
   1731a:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   1731c:	1d3b      	adds	r3, r7, #4
   1731e:	4a1c      	ldr	r2, [pc, #112]	; (17390 <configure_mqtt+0x90>)
   17320:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17322:	1d3b      	adds	r3, r7, #4
   17324:	2280      	movs	r2, #128	; 0x80
   17326:	0092      	lsls	r2, r2, #2
   17328:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   1732a:	1d3b      	adds	r3, r7, #4
   1732c:	4a19      	ldr	r2, [pc, #100]	; (17394 <configure_mqtt+0x94>)
   1732e:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   17330:	1d3b      	adds	r3, r7, #4
   17332:	4a19      	ldr	r2, [pc, #100]	; (17398 <configure_mqtt+0x98>)
   17334:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17336:	1d3a      	adds	r2, r7, #4
   17338:	4b18      	ldr	r3, [pc, #96]	; (1739c <configure_mqtt+0x9c>)
   1733a:	0011      	movs	r1, r2
   1733c:	0018      	movs	r0, r3
   1733e:	4b18      	ldr	r3, [pc, #96]	; (173a0 <configure_mqtt+0xa0>)
   17340:	4798      	blx	r3
   17342:	0003      	movs	r3, r0
   17344:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17346:	69fb      	ldr	r3, [r7, #28]
   17348:	2b00      	cmp	r3, #0
   1734a:	da06      	bge.n	1735a <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   1734c:	69fa      	ldr	r2, [r7, #28]
   1734e:	4b15      	ldr	r3, [pc, #84]	; (173a4 <configure_mqtt+0xa4>)
   17350:	0019      	movs	r1, r3
   17352:	2001      	movs	r0, #1
   17354:	4b14      	ldr	r3, [pc, #80]	; (173a8 <configure_mqtt+0xa8>)
   17356:	4798      	blx	r3
        while (1) {
   17358:	e7fe      	b.n	17358 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1735a:	4a14      	ldr	r2, [pc, #80]	; (173ac <configure_mqtt+0xac>)
   1735c:	4b0f      	ldr	r3, [pc, #60]	; (1739c <configure_mqtt+0x9c>)
   1735e:	0011      	movs	r1, r2
   17360:	0018      	movs	r0, r3
   17362:	4b13      	ldr	r3, [pc, #76]	; (173b0 <configure_mqtt+0xb0>)
   17364:	4798      	blx	r3
   17366:	0003      	movs	r3, r0
   17368:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1736a:	69fb      	ldr	r3, [r7, #28]
   1736c:	2b00      	cmp	r3, #0
   1736e:	da06      	bge.n	1737e <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   17370:	69fa      	ldr	r2, [r7, #28]
   17372:	4b10      	ldr	r3, [pc, #64]	; (173b4 <configure_mqtt+0xb4>)
   17374:	0019      	movs	r1, r3
   17376:	2001      	movs	r0, #1
   17378:	4b0b      	ldr	r3, [pc, #44]	; (173a8 <configure_mqtt+0xa8>)
   1737a:	4798      	blx	r3
        while (1) {
   1737c:	e7fe      	b.n	1737c <configure_mqtt+0x7c>
        }
    }
}
   1737e:	46c0      	nop			; (mov r8, r8)
   17380:	46bd      	mov	sp, r7
   17382:	b008      	add	sp, #32
   17384:	bd80      	pop	{r7, pc}
   17386:	46c0      	nop			; (mov r8, r8)
   17388:	0002fdd1 	.word	0x0002fdd1
   1738c:	200008e0 	.word	0x200008e0
   17390:	20000ae0 	.word	0x20000ae0
   17394:	0000075b 	.word	0x0000075b
   17398:	00001770 	.word	0x00001770
   1739c:	200008a8 	.word	0x200008a8
   173a0:	0002fd21 	.word	0x0002fd21
   173a4:	000392fc 	.word	0x000392fc
   173a8:	0001e5e1 	.word	0x0001e5e1
   173ac:	000171b5 	.word	0x000171b5
   173b0:	0002fe11 	.word	0x0002fe11
   173b4:	00039330 	.word	0x00039330

000173b8 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   173b8:	b580      	push	{r7, lr}
   173ba:	b084      	sub	sp, #16
   173bc:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   173be:	1d3b      	adds	r3, r7, #4
   173c0:	0018      	movs	r0, r3
   173c2:	4b0b      	ldr	r3, [pc, #44]	; (173f0 <configure_extint_channel+0x38>)
   173c4:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   173c6:	1d3b      	adds	r3, r7, #4
   173c8:	2237      	movs	r2, #55	; 0x37
   173ca:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   173cc:	1d3b      	adds	r3, r7, #4
   173ce:	2200      	movs	r2, #0
   173d0:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   173d2:	1d3b      	adds	r3, r7, #4
   173d4:	2201      	movs	r2, #1
   173d6:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   173d8:	1d3b      	adds	r3, r7, #4
   173da:	2202      	movs	r2, #2
   173dc:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   173de:	1d3b      	adds	r3, r7, #4
   173e0:	0019      	movs	r1, r3
   173e2:	2007      	movs	r0, #7
   173e4:	4b03      	ldr	r3, [pc, #12]	; (173f4 <configure_extint_channel+0x3c>)
   173e6:	4798      	blx	r3
}
   173e8:	46c0      	nop			; (mov r8, r8)
   173ea:	46bd      	mov	sp, r7
   173ec:	b004      	add	sp, #16
   173ee:	bd80      	pop	{r7, pc}
   173f0:	00026f09 	.word	0x00026f09
   173f4:	00026f3d 	.word	0x00026f3d

000173f8 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   173f8:	b580      	push	{r7, lr}
   173fa:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   173fc:	4b06      	ldr	r3, [pc, #24]	; (17418 <configure_extint_callbacks+0x20>)
   173fe:	2200      	movs	r2, #0
   17400:	2107      	movs	r1, #7
   17402:	0018      	movs	r0, r3
   17404:	4b05      	ldr	r3, [pc, #20]	; (1741c <configure_extint_callbacks+0x24>)
   17406:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17408:	2100      	movs	r1, #0
   1740a:	2007      	movs	r0, #7
   1740c:	4b04      	ldr	r3, [pc, #16]	; (17420 <configure_extint_callbacks+0x28>)
   1740e:	4798      	blx	r3
}
   17410:	46c0      	nop			; (mov r8, r8)
   17412:	46bd      	mov	sp, r7
   17414:	bd80      	pop	{r7, pc}
   17416:	46c0      	nop			; (mov r8, r8)
   17418:	00017425 	.word	0x00017425
   1741c:	00026b09 	.word	0x00026b09
   17420:	00026b6d 	.word	0x00026b6d

00017424 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17424:	b5b0      	push	{r4, r5, r7, lr}
   17426:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17428:	4b0c      	ldr	r3, [pc, #48]	; (1745c <extint_detection_callback+0x38>)
   1742a:	681b      	ldr	r3, [r3, #0]
   1742c:	1c5a      	adds	r2, r3, #1
   1742e:	4b0b      	ldr	r3, [pc, #44]	; (1745c <extint_detection_callback+0x38>)
   17430:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17432:	4b0a      	ldr	r3, [pc, #40]	; (1745c <extint_detection_callback+0x38>)
   17434:	681b      	ldr	r3, [r3, #0]
   17436:	2b28      	cmp	r3, #40	; 0x28
   17438:	d902      	bls.n	17440 <extint_detection_callback+0x1c>
   1743a:	4b08      	ldr	r3, [pc, #32]	; (1745c <extint_detection_callback+0x38>)
   1743c:	2201      	movs	r2, #1
   1743e:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17440:	4b06      	ldr	r3, [pc, #24]	; (1745c <extint_detection_callback+0x38>)
   17442:	681b      	ldr	r3, [r3, #0]
   17444:	4a06      	ldr	r2, [pc, #24]	; (17460 <extint_detection_callback+0x3c>)
   17446:	4807      	ldr	r0, [pc, #28]	; (17464 <extint_detection_callback+0x40>)
   17448:	213f      	movs	r1, #63	; 0x3f
   1744a:	4c07      	ldr	r4, [pc, #28]	; (17468 <extint_detection_callback+0x44>)
   1744c:	47a0      	blx	r4
    isPressed = true;
   1744e:	4b07      	ldr	r3, [pc, #28]	; (1746c <extint_detection_callback+0x48>)
   17450:	2201      	movs	r2, #1
   17452:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17454:	46c0      	nop			; (mov r8, r8)
   17456:	46bd      	mov	sp, r7
   17458:	bdb0      	pop	{r4, r5, r7, pc}
   1745a:	46c0      	nop			; (mov r8, r8)
   1745c:	200000b0 	.word	0x200000b0
   17460:	00039364 	.word	0x00039364
   17464:	20000070 	.word	0x20000070
   17468:	000355d1 	.word	0x000355d1
   1746c:	20000ce0 	.word	0x20000ce0

00017470 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17470:	b580      	push	{r7, lr}
   17472:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17474:	4a15      	ldr	r2, [pc, #84]	; (174cc <HTTP_DownloadFileInit+0x5c>)
   17476:	4b16      	ldr	r3, [pc, #88]	; (174d0 <HTTP_DownloadFileInit+0x60>)
   17478:	0011      	movs	r1, r2
   1747a:	0018      	movs	r0, r3
   1747c:	4b15      	ldr	r3, [pc, #84]	; (174d4 <HTTP_DownloadFileInit+0x64>)
   1747e:	4798      	blx	r3
   17480:	1e03      	subs	r3, r0, #0
   17482:	d008      	beq.n	17496 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17484:	4b14      	ldr	r3, [pc, #80]	; (174d8 <HTTP_DownloadFileInit+0x68>)
   17486:	0019      	movs	r1, r3
   17488:	2001      	movs	r0, #1
   1748a:	4b14      	ldr	r3, [pc, #80]	; (174dc <HTTP_DownloadFileInit+0x6c>)
   1748c:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   1748e:	e002      	b.n	17496 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17490:	2000      	movs	r0, #0
   17492:	4b13      	ldr	r3, [pc, #76]	; (174e0 <HTTP_DownloadFileInit+0x70>)
   17494:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   17496:	4b0e      	ldr	r3, [pc, #56]	; (174d0 <HTTP_DownloadFileInit+0x60>)
   17498:	2234      	movs	r2, #52	; 0x34
   1749a:	5c9b      	ldrb	r3, [r3, r2]
   1749c:	2b00      	cmp	r3, #0
   1749e:	d1f7      	bne.n	17490 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   174a0:	4b10      	ldr	r3, [pc, #64]	; (174e4 <HTTP_DownloadFileInit+0x74>)
   174a2:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   174a4:	4b10      	ldr	r3, [pc, #64]	; (174e8 <HTTP_DownloadFileInit+0x78>)
   174a6:	2201      	movs	r2, #1
   174a8:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   174aa:	4a10      	ldr	r2, [pc, #64]	; (174ec <HTTP_DownloadFileInit+0x7c>)
   174ac:	4b10      	ldr	r3, [pc, #64]	; (174f0 <HTTP_DownloadFileInit+0x80>)
   174ae:	0011      	movs	r1, r2
   174b0:	0018      	movs	r0, r3
   174b2:	4b10      	ldr	r3, [pc, #64]	; (174f4 <HTTP_DownloadFileInit+0x84>)
   174b4:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   174b6:	4b10      	ldr	r3, [pc, #64]	; (174f8 <HTTP_DownloadFileInit+0x88>)
   174b8:	4798      	blx	r3

    start_download();
   174ba:	4b10      	ldr	r3, [pc, #64]	; (174fc <HTTP_DownloadFileInit+0x8c>)
   174bc:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   174be:	4b10      	ldr	r3, [pc, #64]	; (17500 <HTTP_DownloadFileInit+0x90>)
   174c0:	2203      	movs	r2, #3
   174c2:	701a      	strb	r2, [r3, #0]
}
   174c4:	46c0      	nop			; (mov r8, r8)
   174c6:	46bd      	mov	sp, r7
   174c8:	bd80      	pop	{r7, pc}
   174ca:	46c0      	nop			; (mov r8, r8)
   174cc:	00038adc 	.word	0x00038adc
   174d0:	200008a8 	.word	0x200008a8
   174d4:	0002ffc5 	.word	0x0002ffc5
   174d8:	00038eec 	.word	0x00038eec
   174dc:	0001e5e1 	.word	0x0001e5e1
   174e0:	000225f9 	.word	0x000225f9
   174e4:	00025bb5 	.word	0x00025bb5
   174e8:	20000648 	.word	0x20000648
   174ec:	00016b31 	.word	0x00016b31
   174f0:	00016afd 	.word	0x00016afd
   174f4:	00025bfd 	.word	0x00025bfd
   174f8:	00025b65 	.word	0x00025b65
   174fc:	00016725 	.word	0x00016725
   17500:	20000634 	.word	0x20000634

00017504 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17504:	b590      	push	{r4, r7, lr}
   17506:	b085      	sub	sp, #20
   17508:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1750a:	e009      	b.n	17520 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1750c:	2000      	movs	r0, #0
   1750e:	4b2a      	ldr	r3, [pc, #168]	; (175b8 <HTTP_DownloadFileTransaction+0xb4>)
   17510:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17512:	4b2a      	ldr	r3, [pc, #168]	; (175bc <HTTP_DownloadFileTransaction+0xb8>)
   17514:	0018      	movs	r0, r3
   17516:	4b2a      	ldr	r3, [pc, #168]	; (175c0 <HTTP_DownloadFileTransaction+0xbc>)
   17518:	4798      	blx	r3
        vTaskDelay(5);
   1751a:	2005      	movs	r0, #5
   1751c:	4b29      	ldr	r3, [pc, #164]	; (175c4 <HTTP_DownloadFileTransaction+0xc0>)
   1751e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17520:	2010      	movs	r0, #16
   17522:	4b29      	ldr	r3, [pc, #164]	; (175c8 <HTTP_DownloadFileTransaction+0xc4>)
   17524:	4798      	blx	r3
   17526:	0003      	movs	r3, r0
   17528:	001a      	movs	r2, r3
   1752a:	2301      	movs	r3, #1
   1752c:	4053      	eors	r3, r2
   1752e:	b2db      	uxtb	r3, r3
   17530:	2b00      	cmp	r3, #0
   17532:	d009      	beq.n	17548 <HTTP_DownloadFileTransaction+0x44>
   17534:	2020      	movs	r0, #32
   17536:	4b24      	ldr	r3, [pc, #144]	; (175c8 <HTTP_DownloadFileTransaction+0xc4>)
   17538:	4798      	blx	r3
   1753a:	0003      	movs	r3, r0
   1753c:	001a      	movs	r2, r3
   1753e:	2301      	movs	r3, #1
   17540:	4053      	eors	r3, r2
   17542:	b2db      	uxtb	r3, r3
   17544:	2b00      	cmp	r3, #0
   17546:	d1e1      	bne.n	1750c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17548:	4b20      	ldr	r3, [pc, #128]	; (175cc <HTTP_DownloadFileTransaction+0xc8>)
   1754a:	4798      	blx	r3
    vTaskDelay(1000);
   1754c:	23fa      	movs	r3, #250	; 0xfa
   1754e:	009b      	lsls	r3, r3, #2
   17550:	0018      	movs	r0, r3
   17552:	4b1c      	ldr	r3, [pc, #112]	; (175c4 <HTTP_DownloadFileTransaction+0xc0>)
   17554:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17556:	4b1e      	ldr	r3, [pc, #120]	; (175d0 <HTTP_DownloadFileTransaction+0xcc>)
   17558:	2200      	movs	r2, #0
   1755a:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   1755c:	003b      	movs	r3, r7
   1755e:	4a1d      	ldr	r2, [pc, #116]	; (175d4 <HTTP_DownloadFileTransaction+0xd0>)
   17560:	ca13      	ldmia	r2!, {r0, r1, r4}
   17562:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17564:	003b      	movs	r3, r7
   17566:	2230      	movs	r2, #48	; 0x30
   17568:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1756a:	230f      	movs	r3, #15
   1756c:	18fc      	adds	r4, r7, r3
   1756e:	0039      	movs	r1, r7
   17570:	4b19      	ldr	r3, [pc, #100]	; (175d8 <HTTP_DownloadFileTransaction+0xd4>)
   17572:	220a      	movs	r2, #10
   17574:	0018      	movs	r0, r3
   17576:	4b19      	ldr	r3, [pc, #100]	; (175dc <HTTP_DownloadFileTransaction+0xd8>)
   17578:	4798      	blx	r3
   1757a:	0003      	movs	r3, r0
   1757c:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1757e:	230f      	movs	r3, #15
   17580:	18fb      	adds	r3, r7, r3
   17582:	781b      	ldrb	r3, [r3, #0]
   17584:	2b00      	cmp	r3, #0
   17586:	d008      	beq.n	1759a <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17588:	230f      	movs	r3, #15
   1758a:	18fb      	adds	r3, r7, r3
   1758c:	781a      	ldrb	r2, [r3, #0]
   1758e:	4b14      	ldr	r3, [pc, #80]	; (175e0 <HTTP_DownloadFileTransaction+0xdc>)
   17590:	0019      	movs	r1, r3
   17592:	2000      	movs	r0, #0
   17594:	4b13      	ldr	r3, [pc, #76]	; (175e4 <HTTP_DownloadFileTransaction+0xe0>)
   17596:	4798      	blx	r3
   17598:	e003      	b.n	175a2 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   1759a:	4b13      	ldr	r3, [pc, #76]	; (175e8 <HTTP_DownloadFileTransaction+0xe4>)
   1759c:	0018      	movs	r0, r3
   1759e:	4b13      	ldr	r3, [pc, #76]	; (175ec <HTTP_DownloadFileTransaction+0xe8>)
   175a0:	4798      	blx	r3
    }
	
	f_close(&file_object);
   175a2:	4b0d      	ldr	r3, [pc, #52]	; (175d8 <HTTP_DownloadFileTransaction+0xd4>)
   175a4:	0018      	movs	r0, r3
   175a6:	4b12      	ldr	r3, [pc, #72]	; (175f0 <HTTP_DownloadFileTransaction+0xec>)
   175a8:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   175aa:	4b12      	ldr	r3, [pc, #72]	; (175f4 <HTTP_DownloadFileTransaction+0xf0>)
   175ac:	2200      	movs	r2, #0
   175ae:	701a      	strb	r2, [r3, #0]
}
   175b0:	46c0      	nop			; (mov r8, r8)
   175b2:	46bd      	mov	sp, r7
   175b4:	b005      	add	sp, #20
   175b6:	bd90      	pop	{r4, r7, pc}
   175b8:	000225f9 	.word	0x000225f9
   175bc:	20004a78 	.word	0x20004a78
   175c0:	00032ced 	.word	0x00032ced
   175c4:	0001c8a1 	.word	0x0001c8a1
   175c8:	000163fd 	.word	0x000163fd
   175cc:	00025bb5 	.word	0x00025bb5
   175d0:	20000648 	.word	0x20000648
   175d4:	0003939c 	.word	0x0003939c
   175d8:	2000087c 	.word	0x2000087c
   175dc:	0002dfb5 	.word	0x0002dfb5
   175e0:	00039378 	.word	0x00039378
   175e4:	0001e5e1 	.word	0x0001e5e1
   175e8:	00039388 	.word	0x00039388
   175ec:	0001e4f5 	.word	0x0001e4f5
   175f0:	0002e9b5 	.word	0x0002e9b5
   175f4:	20000634 	.word	0x20000634

000175f8 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   175f8:	b580      	push	{r7, lr}
   175fa:	af00      	add	r7, sp, #0
    socketDeinit();
   175fc:	4b18      	ldr	r3, [pc, #96]	; (17660 <MQTT_InitRoutine+0x68>)
   175fe:	4798      	blx	r3
    configure_mqtt();
   17600:	4b18      	ldr	r3, [pc, #96]	; (17664 <MQTT_InitRoutine+0x6c>)
   17602:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17604:	4a18      	ldr	r2, [pc, #96]	; (17668 <MQTT_InitRoutine+0x70>)
   17606:	4b19      	ldr	r3, [pc, #100]	; (1766c <MQTT_InitRoutine+0x74>)
   17608:	0011      	movs	r1, r2
   1760a:	0018      	movs	r0, r3
   1760c:	4b18      	ldr	r3, [pc, #96]	; (17670 <MQTT_InitRoutine+0x78>)
   1760e:	4798      	blx	r3
    socketInit();
   17610:	4b18      	ldr	r3, [pc, #96]	; (17674 <MQTT_InitRoutine+0x7c>)
   17612:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17614:	4b18      	ldr	r3, [pc, #96]	; (17678 <MQTT_InitRoutine+0x80>)
   17616:	2234      	movs	r2, #52	; 0x34
   17618:	5c9b      	ldrb	r3, [r3, r2]
   1761a:	2201      	movs	r2, #1
   1761c:	4053      	eors	r3, r2
   1761e:	b2db      	uxtb	r3, r3
   17620:	2b00      	cmp	r3, #0
   17622:	d00c      	beq.n	1763e <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17624:	4a15      	ldr	r2, [pc, #84]	; (1767c <MQTT_InitRoutine+0x84>)
   17626:	4b14      	ldr	r3, [pc, #80]	; (17678 <MQTT_InitRoutine+0x80>)
   17628:	0011      	movs	r1, r2
   1762a:	0018      	movs	r0, r3
   1762c:	4b14      	ldr	r3, [pc, #80]	; (17680 <MQTT_InitRoutine+0x88>)
   1762e:	4798      	blx	r3
   17630:	1e03      	subs	r3, r0, #0
   17632:	d004      	beq.n	1763e <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17634:	4b13      	ldr	r3, [pc, #76]	; (17684 <MQTT_InitRoutine+0x8c>)
   17636:	0019      	movs	r1, r3
   17638:	2001      	movs	r0, #1
   1763a:	4b13      	ldr	r3, [pc, #76]	; (17688 <MQTT_InitRoutine+0x90>)
   1763c:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1763e:	4b0e      	ldr	r3, [pc, #56]	; (17678 <MQTT_InitRoutine+0x80>)
   17640:	2234      	movs	r2, #52	; 0x34
   17642:	5c9b      	ldrb	r3, [r3, r2]
   17644:	2b00      	cmp	r3, #0
   17646:	d004      	beq.n	17652 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n\r\n");
   17648:	4b10      	ldr	r3, [pc, #64]	; (1768c <MQTT_InitRoutine+0x94>)
   1764a:	0019      	movs	r1, r3
   1764c:	2001      	movs	r0, #1
   1764e:	4b0e      	ldr	r3, [pc, #56]	; (17688 <MQTT_InitRoutine+0x90>)
   17650:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17652:	4b0f      	ldr	r3, [pc, #60]	; (17690 <MQTT_InitRoutine+0x98>)
   17654:	2201      	movs	r2, #1
   17656:	701a      	strb	r2, [r3, #0]
}
   17658:	46c0      	nop			; (mov r8, r8)
   1765a:	46bd      	mov	sp, r7
   1765c:	bd80      	pop	{r7, pc}
   1765e:	46c0      	nop			; (mov r8, r8)
   17660:	00025bb5 	.word	0x00025bb5
   17664:	00017301 	.word	0x00017301
   17668:	00016ebd 	.word	0x00016ebd
   1766c:	00016e89 	.word	0x00016e89
   17670:	00025bfd 	.word	0x00025bfd
   17674:	00025b65 	.word	0x00025b65
   17678:	200008a8 	.word	0x200008a8
   1767c:	00038adc 	.word	0x00038adc
   17680:	0002fe91 	.word	0x0002fe91
   17684:	00038eec 	.word	0x00038eec
   17688:	0001e5e1 	.word	0x0001e5e1
   1768c:	000393a8 	.word	0x000393a8
   17690:	20000634 	.word	0x20000634

00017694 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17694:	b580      	push	{r7, lr}
   17696:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17698:	2000      	movs	r0, #0
   1769a:	4b0c      	ldr	r3, [pc, #48]	; (176cc <MQTT_HandleTransactions+0x38>)
   1769c:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1769e:	4b0c      	ldr	r3, [pc, #48]	; (176d0 <MQTT_HandleTransactions+0x3c>)
   176a0:	0018      	movs	r0, r3
   176a2:	4b0c      	ldr	r3, [pc, #48]	; (176d4 <MQTT_HandleTransactions+0x40>)
   176a4:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   176a6:	4b0c      	ldr	r3, [pc, #48]	; (176d8 <MQTT_HandleTransactions+0x44>)
   176a8:	4798      	blx	r3
    MQTT_HandleImuMessages();
   176aa:	4b0c      	ldr	r3, [pc, #48]	; (176dc <MQTT_HandleTransactions+0x48>)
   176ac:	4798      	blx	r3
	MQTT_HandleGpsMessages(); //Derek-GPS
   176ae:	4b0c      	ldr	r3, [pc, #48]	; (176e0 <MQTT_HandleTransactions+0x4c>)
   176b0:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   176b2:	4b0c      	ldr	r3, [pc, #48]	; (176e4 <MQTT_HandleTransactions+0x50>)
   176b4:	2234      	movs	r2, #52	; 0x34
   176b6:	5c9b      	ldrb	r3, [r3, r2]
   176b8:	2b00      	cmp	r3, #0
   176ba:	d004      	beq.n	176c6 <MQTT_HandleTransactions+0x32>
   176bc:	4b09      	ldr	r3, [pc, #36]	; (176e4 <MQTT_HandleTransactions+0x50>)
   176be:	2164      	movs	r1, #100	; 0x64
   176c0:	0018      	movs	r0, r3
   176c2:	4b09      	ldr	r3, [pc, #36]	; (176e8 <MQTT_HandleTransactions+0x54>)
   176c4:	4798      	blx	r3
}
   176c6:	46c0      	nop			; (mov r8, r8)
   176c8:	46bd      	mov	sp, r7
   176ca:	bd80      	pop	{r7, pc}
   176cc:	000225f9 	.word	0x000225f9
   176d0:	20004a78 	.word	0x20004a78
   176d4:	00032ced 	.word	0x00032ced
   176d8:	00017811 	.word	0x00017811
   176dc:	000176ed 	.word	0x000176ed
   176e0:	00017779 	.word	0x00017779
   176e4:	200008a8 	.word	0x200008a8
   176e8:	000300c1 	.word	0x000300c1

000176ec <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   176ec:	b590      	push	{r4, r7, lr}
   176ee:	b085      	sub	sp, #20
   176f0:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   176f2:	4b18      	ldr	r3, [pc, #96]	; (17754 <MQTT_HandleImuMessages+0x68>)
   176f4:	681b      	ldr	r3, [r3, #0]
   176f6:	0039      	movs	r1, r7
   176f8:	2200      	movs	r2, #0
   176fa:	0018      	movs	r0, r3
   176fc:	4b16      	ldr	r3, [pc, #88]	; (17758 <MQTT_HandleImuMessages+0x6c>)
   176fe:	4798      	blx	r3
   17700:	0003      	movs	r3, r0
   17702:	2b01      	cmp	r3, #1
   17704:	d121      	bne.n	1774a <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17706:	003b      	movs	r3, r7
   17708:	2200      	movs	r2, #0
   1770a:	5e9b      	ldrsh	r3, [r3, r2]
   1770c:	001c      	movs	r4, r3
   1770e:	003b      	movs	r3, r7
   17710:	2202      	movs	r2, #2
   17712:	5e9b      	ldrsh	r3, [r3, r2]
   17714:	0019      	movs	r1, r3
   17716:	003b      	movs	r3, r7
   17718:	2204      	movs	r2, #4
   1771a:	5e9b      	ldrsh	r3, [r3, r2]
   1771c:	4a0f      	ldr	r2, [pc, #60]	; (1775c <MQTT_HandleImuMessages+0x70>)
   1771e:	4810      	ldr	r0, [pc, #64]	; (17760 <MQTT_HandleImuMessages+0x74>)
   17720:	9301      	str	r3, [sp, #4]
   17722:	9100      	str	r1, [sp, #0]
   17724:	0023      	movs	r3, r4
   17726:	213f      	movs	r1, #63	; 0x3f
   17728:	4c0e      	ldr	r4, [pc, #56]	; (17764 <MQTT_HandleImuMessages+0x78>)
   1772a:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1772c:	4b0c      	ldr	r3, [pc, #48]	; (17760 <MQTT_HandleImuMessages+0x74>)
   1772e:	0018      	movs	r0, r3
   17730:	4b0d      	ldr	r3, [pc, #52]	; (17768 <MQTT_HandleImuMessages+0x7c>)
   17732:	4798      	blx	r3
   17734:	0004      	movs	r4, r0
   17736:	4a0a      	ldr	r2, [pc, #40]	; (17760 <MQTT_HandleImuMessages+0x74>)
   17738:	490c      	ldr	r1, [pc, #48]	; (1776c <MQTT_HandleImuMessages+0x80>)
   1773a:	480d      	ldr	r0, [pc, #52]	; (17770 <MQTT_HandleImuMessages+0x84>)
   1773c:	2300      	movs	r3, #0
   1773e:	9301      	str	r3, [sp, #4]
   17740:	2301      	movs	r3, #1
   17742:	9300      	str	r3, [sp, #0]
   17744:	0023      	movs	r3, r4
   17746:	4c0b      	ldr	r4, [pc, #44]	; (17774 <MQTT_HandleImuMessages+0x88>)
   17748:	47a0      	blx	r4
    }
}
   1774a:	46c0      	nop			; (mov r8, r8)
   1774c:	46bd      	mov	sp, r7
   1774e:	b003      	add	sp, #12
   17750:	bd90      	pop	{r4, r7, pc}
   17752:	46c0      	nop			; (mov r8, r8)
   17754:	20000640 	.word	0x20000640
   17758:	0001b6f5 	.word	0x0001b6f5
   1775c:	000393c8 	.word	0x000393c8
   17760:	20000030 	.word	0x20000030
   17764:	000355d1 	.word	0x000355d1
   17768:	0003572f 	.word	0x0003572f
   1776c:	00039278 	.word	0x00039278
   17770:	200008a8 	.word	0x200008a8
   17774:	0003000d 	.word	0x0003000d

00017778 <MQTT_HandleGpsMessages>:

static void MQTT_HandleGpsMessages(void) //Derek-GPS, used in MQTT_HandleTransactions()
{
   17778:	b5b0      	push	{r4, r5, r7, lr}
   1777a:	b086      	sub	sp, #24
   1777c:	af04      	add	r7, sp, #16
	struct GpsDataPacket gpsDataVar;
	if (pdPASS == xQueueReceive(xQueueImuBuffer, &gpsDataVar, 0)) {
   1777e:	4b1a      	ldr	r3, [pc, #104]	; (177e8 <MQTT_HandleGpsMessages+0x70>)
   17780:	681b      	ldr	r3, [r3, #0]
   17782:	0039      	movs	r1, r7
   17784:	2200      	movs	r2, #0
   17786:	0018      	movs	r0, r3
   17788:	4b18      	ldr	r3, [pc, #96]	; (177ec <MQTT_HandleGpsMessages+0x74>)
   1778a:	4798      	blx	r3
   1778c:	0003      	movs	r3, r0
   1778e:	2b01      	cmp	r3, #1
   17790:	d126      	bne.n	177e0 <MQTT_HandleGpsMessages+0x68>
		snprintf(mqtt_msg, 63, "{\"name\":\"derek\", \"lat\": %f, \"lon\": %f}", gpsDataVar.lat, gpsDataVar.lon);
   17792:	003b      	movs	r3, r7
   17794:	681a      	ldr	r2, [r3, #0]
   17796:	4b16      	ldr	r3, [pc, #88]	; (177f0 <MQTT_HandleGpsMessages+0x78>)
   17798:	1c10      	adds	r0, r2, #0
   1779a:	4798      	blx	r3
   1779c:	0004      	movs	r4, r0
   1779e:	000d      	movs	r5, r1
   177a0:	003b      	movs	r3, r7
   177a2:	685a      	ldr	r2, [r3, #4]
   177a4:	4b12      	ldr	r3, [pc, #72]	; (177f0 <MQTT_HandleGpsMessages+0x78>)
   177a6:	1c10      	adds	r0, r2, #0
   177a8:	4798      	blx	r3
   177aa:	0002      	movs	r2, r0
   177ac:	000b      	movs	r3, r1
   177ae:	4911      	ldr	r1, [pc, #68]	; (177f4 <MQTT_HandleGpsMessages+0x7c>)
   177b0:	4811      	ldr	r0, [pc, #68]	; (177f8 <MQTT_HandleGpsMessages+0x80>)
   177b2:	9202      	str	r2, [sp, #8]
   177b4:	9303      	str	r3, [sp, #12]
   177b6:	9400      	str	r4, [sp, #0]
   177b8:	9501      	str	r5, [sp, #4]
   177ba:	000a      	movs	r2, r1
   177bc:	213f      	movs	r1, #63	; 0x3f
   177be:	4b0f      	ldr	r3, [pc, #60]	; (177fc <MQTT_HandleGpsMessages+0x84>)
   177c0:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, GPS_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   177c2:	4b0d      	ldr	r3, [pc, #52]	; (177f8 <MQTT_HandleGpsMessages+0x80>)
   177c4:	0018      	movs	r0, r3
   177c6:	4b0e      	ldr	r3, [pc, #56]	; (17800 <MQTT_HandleGpsMessages+0x88>)
   177c8:	4798      	blx	r3
   177ca:	0004      	movs	r4, r0
   177cc:	4a0a      	ldr	r2, [pc, #40]	; (177f8 <MQTT_HandleGpsMessages+0x80>)
   177ce:	490d      	ldr	r1, [pc, #52]	; (17804 <MQTT_HandleGpsMessages+0x8c>)
   177d0:	480d      	ldr	r0, [pc, #52]	; (17808 <MQTT_HandleGpsMessages+0x90>)
   177d2:	2300      	movs	r3, #0
   177d4:	9301      	str	r3, [sp, #4]
   177d6:	2301      	movs	r3, #1
   177d8:	9300      	str	r3, [sp, #0]
   177da:	0023      	movs	r3, r4
   177dc:	4c0b      	ldr	r4, [pc, #44]	; (1780c <MQTT_HandleGpsMessages+0x94>)
   177de:	47a0      	blx	r4
	}
}
   177e0:	46c0      	nop			; (mov r8, r8)
   177e2:	46bd      	mov	sp, r7
   177e4:	b002      	add	sp, #8
   177e6:	bdb0      	pop	{r4, r5, r7, pc}
   177e8:	20000640 	.word	0x20000640
   177ec:	0001b6f5 	.word	0x0001b6f5
   177f0:	00034f5d 	.word	0x00034f5d
   177f4:	000393ec 	.word	0x000393ec
   177f8:	20000030 	.word	0x20000030
   177fc:	000355d1 	.word	0x000355d1
   17800:	0003572f 	.word	0x0003572f
   17804:	0003928c 	.word	0x0003928c
   17808:	200008a8 	.word	0x200008a8
   1780c:	0003000d 	.word	0x0003000d

00017810 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17810:	b590      	push	{r4, r7, lr}
   17812:	b08b      	sub	sp, #44	; 0x2c
   17814:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17816:	4b39      	ldr	r3, [pc, #228]	; (178fc <MQTT_HandleGameMessages+0xec>)
   17818:	681b      	ldr	r3, [r3, #0]
   1781a:	2208      	movs	r2, #8
   1781c:	18b9      	adds	r1, r7, r2
   1781e:	2200      	movs	r2, #0
   17820:	0018      	movs	r0, r3
   17822:	4b37      	ldr	r3, [pc, #220]	; (17900 <MQTT_HandleGameMessages+0xf0>)
   17824:	4798      	blx	r3
   17826:	0003      	movs	r3, r0
   17828:	2b01      	cmp	r3, #1
   1782a:	d163      	bne.n	178f4 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   1782c:	4b35      	ldr	r3, [pc, #212]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   1782e:	4a36      	ldr	r2, [pc, #216]	; (17908 <MQTT_HandleGameMessages+0xf8>)
   17830:	ca03      	ldmia	r2!, {r0, r1}
   17832:	c303      	stmia	r3!, {r0, r1}
   17834:	8812      	ldrh	r2, [r2, #0]
   17836:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17838:	2300      	movs	r3, #0
   1783a:	61fb      	str	r3, [r7, #28]
   1783c:	e02d      	b.n	1789a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   1783e:	2308      	movs	r3, #8
   17840:	18fa      	adds	r2, r7, r3
   17842:	69fb      	ldr	r3, [r7, #28]
   17844:	18d3      	adds	r3, r2, r3
   17846:	781b      	ldrb	r3, [r3, #0]
   17848:	2bff      	cmp	r3, #255	; 0xff
   1784a:	d02a      	beq.n	178a2 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   1784c:	2308      	movs	r3, #8
   1784e:	18fa      	adds	r2, r7, r3
   17850:	69fb      	ldr	r3, [r7, #28]
   17852:	18d3      	adds	r3, r2, r3
   17854:	781b      	ldrb	r3, [r3, #0]
   17856:	4a2d      	ldr	r2, [pc, #180]	; (1790c <MQTT_HandleGameMessages+0xfc>)
   17858:	0038      	movs	r0, r7
   1785a:	2103      	movs	r1, #3
   1785c:	4c2c      	ldr	r4, [pc, #176]	; (17910 <MQTT_HandleGameMessages+0x100>)
   1785e:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17860:	003a      	movs	r2, r7
   17862:	4b28      	ldr	r3, [pc, #160]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   17864:	0011      	movs	r1, r2
   17866:	0018      	movs	r0, r3
   17868:	4b2a      	ldr	r3, [pc, #168]	; (17914 <MQTT_HandleGameMessages+0x104>)
   1786a:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   1786c:	69fb      	ldr	r3, [r7, #28]
   1786e:	3301      	adds	r3, #1
   17870:	2208      	movs	r2, #8
   17872:	18ba      	adds	r2, r7, r2
   17874:	5cd3      	ldrb	r3, [r2, r3]
   17876:	2bff      	cmp	r3, #255	; 0xff
   17878:	d00c      	beq.n	17894 <MQTT_HandleGameMessages+0x84>
   1787a:	69fb      	ldr	r3, [r7, #28]
   1787c:	3301      	adds	r3, #1
   1787e:	2b13      	cmp	r3, #19
   17880:	dc08      	bgt.n	17894 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17882:	003b      	movs	r3, r7
   17884:	222c      	movs	r2, #44	; 0x2c
   17886:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17888:	003a      	movs	r2, r7
   1788a:	4b1e      	ldr	r3, [pc, #120]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   1788c:	0011      	movs	r1, r2
   1788e:	0018      	movs	r0, r3
   17890:	4b20      	ldr	r3, [pc, #128]	; (17914 <MQTT_HandleGameMessages+0x104>)
   17892:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17894:	69fb      	ldr	r3, [r7, #28]
   17896:	3301      	adds	r3, #1
   17898:	61fb      	str	r3, [r7, #28]
   1789a:	69fb      	ldr	r3, [r7, #28]
   1789c:	2b13      	cmp	r3, #19
   1789e:	ddce      	ble.n	1783e <MQTT_HandleGameMessages+0x2e>
   178a0:	e000      	b.n	178a4 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   178a2:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   178a4:	4b17      	ldr	r3, [pc, #92]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   178a6:	0018      	movs	r0, r3
   178a8:	4b1b      	ldr	r3, [pc, #108]	; (17918 <MQTT_HandleGameMessages+0x108>)
   178aa:	4798      	blx	r3
   178ac:	0003      	movs	r3, r0
   178ae:	001a      	movs	r2, r3
   178b0:	4b14      	ldr	r3, [pc, #80]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   178b2:	18d2      	adds	r2, r2, r3
   178b4:	4b19      	ldr	r3, [pc, #100]	; (1791c <MQTT_HandleGameMessages+0x10c>)
   178b6:	0010      	movs	r0, r2
   178b8:	0019      	movs	r1, r3
   178ba:	2303      	movs	r3, #3
   178bc:	001a      	movs	r2, r3
   178be:	4b18      	ldr	r3, [pc, #96]	; (17920 <MQTT_HandleGameMessages+0x110>)
   178c0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   178c2:	4b10      	ldr	r3, [pc, #64]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   178c4:	0019      	movs	r1, r3
   178c6:	2001      	movs	r0, #1
   178c8:	4b16      	ldr	r3, [pc, #88]	; (17924 <MQTT_HandleGameMessages+0x114>)
   178ca:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   178cc:	4b16      	ldr	r3, [pc, #88]	; (17928 <MQTT_HandleGameMessages+0x118>)
   178ce:	0019      	movs	r1, r3
   178d0:	2001      	movs	r0, #1
   178d2:	4b14      	ldr	r3, [pc, #80]	; (17924 <MQTT_HandleGameMessages+0x114>)
   178d4:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   178d6:	4b0b      	ldr	r3, [pc, #44]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   178d8:	0018      	movs	r0, r3
   178da:	4b0f      	ldr	r3, [pc, #60]	; (17918 <MQTT_HandleGameMessages+0x108>)
   178dc:	4798      	blx	r3
   178de:	0004      	movs	r4, r0
   178e0:	4a08      	ldr	r2, [pc, #32]	; (17904 <MQTT_HandleGameMessages+0xf4>)
   178e2:	4912      	ldr	r1, [pc, #72]	; (1792c <MQTT_HandleGameMessages+0x11c>)
   178e4:	4812      	ldr	r0, [pc, #72]	; (17930 <MQTT_HandleGameMessages+0x120>)
   178e6:	2300      	movs	r3, #0
   178e8:	9301      	str	r3, [sp, #4]
   178ea:	2301      	movs	r3, #1
   178ec:	9300      	str	r3, [sp, #0]
   178ee:	0023      	movs	r3, r4
   178f0:	4c10      	ldr	r4, [pc, #64]	; (17934 <MQTT_HandleGameMessages+0x124>)
   178f2:	47a0      	blx	r4
    }
}
   178f4:	46c0      	nop			; (mov r8, r8)
   178f6:	46bd      	mov	sp, r7
   178f8:	b009      	add	sp, #36	; 0x24
   178fa:	bd90      	pop	{r4, r7, pc}
   178fc:	2000063c 	.word	0x2000063c
   17900:	0001b6f5 	.word	0x0001b6f5
   17904:	20000030 	.word	0x20000030
   17908:	00039088 	.word	0x00039088
   1790c:	00039414 	.word	0x00039414
   17910:	000355d1 	.word	0x000355d1
   17914:	000356b5 	.word	0x000356b5
   17918:	0003572f 	.word	0x0003572f
   1791c:	00039418 	.word	0x00039418
   17920:	00035341 	.word	0x00035341
   17924:	0001e5e1 	.word	0x0001e5e1
   17928:	0003941c 	.word	0x0003941c
   1792c:	00039420 	.word	0x00039420
   17930:	200008a8 	.word	0x200008a8
   17934:	0003000d 	.word	0x0003000d

00017938 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17938:	b590      	push	{r4, r7, lr}
   1793a:	b08d      	sub	sp, #52	; 0x34
   1793c:	af02      	add	r7, sp, #8
   1793e:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17940:	2064      	movs	r0, #100	; 0x64
   17942:	4b79      	ldr	r3, [pc, #484]	; (17b28 <vWifiTask+0x1f0>)
   17944:	4798      	blx	r3
    init_state();
   17946:	4b79      	ldr	r3, [pc, #484]	; (17b2c <vWifiTask+0x1f4>)
   17948:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1794a:	2200      	movs	r2, #0
   1794c:	2104      	movs	r1, #4
   1794e:	2005      	movs	r0, #5
   17950:	4b77      	ldr	r3, [pc, #476]	; (17b30 <vWifiTask+0x1f8>)
   17952:	4798      	blx	r3
   17954:	0002      	movs	r2, r0
   17956:	4b77      	ldr	r3, [pc, #476]	; (17b34 <vWifiTask+0x1fc>)
   17958:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   1795a:	2200      	movs	r2, #0
   1795c:	2106      	movs	r1, #6
   1795e:	2005      	movs	r0, #5
   17960:	4b73      	ldr	r3, [pc, #460]	; (17b30 <vWifiTask+0x1f8>)
   17962:	4798      	blx	r3
   17964:	0002      	movs	r2, r0
   17966:	4b74      	ldr	r3, [pc, #464]	; (17b38 <vWifiTask+0x200>)
   17968:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   1796a:	2200      	movs	r2, #0
   1796c:	2114      	movs	r1, #20
   1796e:	2002      	movs	r0, #2
   17970:	4b6f      	ldr	r3, [pc, #444]	; (17b30 <vWifiTask+0x1f8>)
   17972:	4798      	blx	r3
   17974:	0002      	movs	r2, r0
   17976:	4b71      	ldr	r3, [pc, #452]	; (17b3c <vWifiTask+0x204>)
   17978:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1797a:	2200      	movs	r2, #0
   1797c:	2102      	movs	r1, #2
   1797e:	2005      	movs	r0, #5
   17980:	4b6b      	ldr	r3, [pc, #428]	; (17b30 <vWifiTask+0x1f8>)
   17982:	4798      	blx	r3
   17984:	0002      	movs	r2, r0
   17986:	4b6e      	ldr	r3, [pc, #440]	; (17b40 <vWifiTask+0x208>)
   17988:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   1798a:	4b6a      	ldr	r3, [pc, #424]	; (17b34 <vWifiTask+0x1fc>)
   1798c:	681b      	ldr	r3, [r3, #0]
   1798e:	2b00      	cmp	r3, #0
   17990:	d00b      	beq.n	179aa <vWifiTask+0x72>
   17992:	4b69      	ldr	r3, [pc, #420]	; (17b38 <vWifiTask+0x200>)
   17994:	681b      	ldr	r3, [r3, #0]
   17996:	2b00      	cmp	r3, #0
   17998:	d007      	beq.n	179aa <vWifiTask+0x72>
   1799a:	4b68      	ldr	r3, [pc, #416]	; (17b3c <vWifiTask+0x204>)
   1799c:	681b      	ldr	r3, [r3, #0]
   1799e:	2b00      	cmp	r3, #0
   179a0:	d003      	beq.n	179aa <vWifiTask+0x72>
   179a2:	4b67      	ldr	r3, [pc, #412]	; (17b40 <vWifiTask+0x208>)
   179a4:	681b      	ldr	r3, [r3, #0]
   179a6:	2b00      	cmp	r3, #0
   179a8:	d103      	bne.n	179b2 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   179aa:	4b66      	ldr	r3, [pc, #408]	; (17b44 <vWifiTask+0x20c>)
   179ac:	0018      	movs	r0, r3
   179ae:	4b66      	ldr	r3, [pc, #408]	; (17b48 <vWifiTask+0x210>)
   179b0:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   179b2:	4b66      	ldr	r3, [pc, #408]	; (17b4c <vWifiTask+0x214>)
   179b4:	0018      	movs	r0, r3
   179b6:	4b64      	ldr	r3, [pc, #400]	; (17b48 <vWifiTask+0x210>)
   179b8:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   179ba:	4b65      	ldr	r3, [pc, #404]	; (17b50 <vWifiTask+0x218>)
   179bc:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   179be:	4b65      	ldr	r3, [pc, #404]	; (17b54 <vWifiTask+0x21c>)
   179c0:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   179c2:	4b65      	ldr	r3, [pc, #404]	; (17b58 <vWifiTask+0x220>)
   179c4:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   179c6:	4b65      	ldr	r3, [pc, #404]	; (17b5c <vWifiTask+0x224>)
   179c8:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   179ca:	4b65      	ldr	r3, [pc, #404]	; (17b60 <vWifiTask+0x228>)
   179cc:	4798      	blx	r3
    configure_extint_callbacks();
   179ce:	4b65      	ldr	r3, [pc, #404]	; (17b64 <vWifiTask+0x22c>)
   179d0:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   179d2:	230c      	movs	r3, #12
   179d4:	18fb      	adds	r3, r7, r3
   179d6:	2218      	movs	r2, #24
   179d8:	2100      	movs	r1, #0
   179da:	0018      	movs	r0, r3
   179dc:	4b62      	ldr	r3, [pc, #392]	; (17b68 <vWifiTask+0x230>)
   179de:	4798      	blx	r3

    nm_bsp_init();
   179e0:	4b62      	ldr	r3, [pc, #392]	; (17b6c <vWifiTask+0x234>)
   179e2:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   179e4:	230c      	movs	r3, #12
   179e6:	18fb      	adds	r3, r7, r3
   179e8:	4a61      	ldr	r2, [pc, #388]	; (17b70 <vWifiTask+0x238>)
   179ea:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   179ec:	2327      	movs	r3, #39	; 0x27
   179ee:	18fc      	adds	r4, r7, r3
   179f0:	230c      	movs	r3, #12
   179f2:	18fb      	adds	r3, r7, r3
   179f4:	0018      	movs	r0, r3
   179f6:	4b5f      	ldr	r3, [pc, #380]	; (17b74 <vWifiTask+0x23c>)
   179f8:	4798      	blx	r3
   179fa:	0003      	movs	r3, r0
   179fc:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   179fe:	2327      	movs	r3, #39	; 0x27
   17a00:	18fb      	adds	r3, r7, r3
   17a02:	781b      	ldrb	r3, [r3, #0]
   17a04:	b25b      	sxtb	r3, r3
   17a06:	2b00      	cmp	r3, #0
   17a08:	d009      	beq.n	17a1e <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17a0a:	2327      	movs	r3, #39	; 0x27
   17a0c:	18fb      	adds	r3, r7, r3
   17a0e:	2200      	movs	r2, #0
   17a10:	569a      	ldrsb	r2, [r3, r2]
   17a12:	4b59      	ldr	r3, [pc, #356]	; (17b78 <vWifiTask+0x240>)
   17a14:	0019      	movs	r1, r3
   17a16:	2001      	movs	r0, #1
   17a18:	4b58      	ldr	r3, [pc, #352]	; (17b7c <vWifiTask+0x244>)
   17a1a:	4798      	blx	r3
        while (1) {
   17a1c:	e7fe      	b.n	17a1c <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17a1e:	4a58      	ldr	r2, [pc, #352]	; (17b80 <vWifiTask+0x248>)
   17a20:	4b58      	ldr	r3, [pc, #352]	; (17b84 <vWifiTask+0x24c>)
   17a22:	0019      	movs	r1, r3
   17a24:	2001      	movs	r0, #1
   17a26:	4b55      	ldr	r3, [pc, #340]	; (17b7c <vWifiTask+0x244>)
   17a28:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17a2a:	4b57      	ldr	r3, [pc, #348]	; (17b88 <vWifiTask+0x250>)
   17a2c:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17a2e:	4a57      	ldr	r2, [pc, #348]	; (17b8c <vWifiTask+0x254>)
   17a30:	4b57      	ldr	r3, [pc, #348]	; (17b90 <vWifiTask+0x258>)
   17a32:	0011      	movs	r1, r2
   17a34:	0018      	movs	r0, r3
   17a36:	4b57      	ldr	r3, [pc, #348]	; (17b94 <vWifiTask+0x25c>)
   17a38:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17a3a:	4a57      	ldr	r2, [pc, #348]	; (17b98 <vWifiTask+0x260>)
   17a3c:	4850      	ldr	r0, [pc, #320]	; (17b80 <vWifiTask+0x248>)
   17a3e:	23ff      	movs	r3, #255	; 0xff
   17a40:	9300      	str	r3, [sp, #0]
   17a42:	0013      	movs	r3, r2
   17a44:	2202      	movs	r2, #2
   17a46:	2105      	movs	r1, #5
   17a48:	4c54      	ldr	r4, [pc, #336]	; (17b9c <vWifiTask+0x264>)
   17a4a:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17a4c:	e006      	b.n	17a5c <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17a4e:	2000      	movs	r0, #0
   17a50:	4b53      	ldr	r3, [pc, #332]	; (17ba0 <vWifiTask+0x268>)
   17a52:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17a54:	4b53      	ldr	r3, [pc, #332]	; (17ba4 <vWifiTask+0x26c>)
   17a56:	0018      	movs	r0, r3
   17a58:	4b53      	ldr	r3, [pc, #332]	; (17ba8 <vWifiTask+0x270>)
   17a5a:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17a5c:	2002      	movs	r0, #2
   17a5e:	4b53      	ldr	r3, [pc, #332]	; (17bac <vWifiTask+0x274>)
   17a60:	4798      	blx	r3
   17a62:	0003      	movs	r3, r0
   17a64:	001a      	movs	r2, r3
   17a66:	2301      	movs	r3, #1
   17a68:	4053      	eors	r3, r2
   17a6a:	b2db      	uxtb	r3, r3
   17a6c:	2b00      	cmp	r3, #0
   17a6e:	d1ee      	bne.n	17a4e <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   17a70:	23fa      	movs	r3, #250	; 0xfa
   17a72:	009b      	lsls	r3, r3, #2
   17a74:	0018      	movs	r0, r3
   17a76:	4b2c      	ldr	r3, [pc, #176]	; (17b28 <vWifiTask+0x1f0>)
   17a78:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17a7a:	4b4d      	ldr	r3, [pc, #308]	; (17bb0 <vWifiTask+0x278>)
   17a7c:	2201      	movs	r2, #1
   17a7e:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17a80:	4b4b      	ldr	r3, [pc, #300]	; (17bb0 <vWifiTask+0x278>)
   17a82:	781b      	ldrb	r3, [r3, #0]
   17a84:	b25b      	sxtb	r3, r3
   17a86:	2b01      	cmp	r3, #1
   17a88:	d00b      	beq.n	17aa2 <vWifiTask+0x16a>
   17a8a:	dc02      	bgt.n	17a92 <vWifiTask+0x15a>
   17a8c:	2b00      	cmp	r3, #0
   17a8e:	d005      	beq.n	17a9c <vWifiTask+0x164>
   17a90:	e010      	b.n	17ab4 <vWifiTask+0x17c>
   17a92:	2b02      	cmp	r3, #2
   17a94:	d008      	beq.n	17aa8 <vWifiTask+0x170>
   17a96:	2b03      	cmp	r3, #3
   17a98:	d009      	beq.n	17aae <vWifiTask+0x176>
   17a9a:	e00b      	b.n	17ab4 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17a9c:	4b45      	ldr	r3, [pc, #276]	; (17bb4 <vWifiTask+0x27c>)
   17a9e:	4798      	blx	r3

                break;
   17aa0:	e00c      	b.n	17abc <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17aa2:	4b45      	ldr	r3, [pc, #276]	; (17bb8 <vWifiTask+0x280>)
   17aa4:	4798      	blx	r3
                break;
   17aa6:	e009      	b.n	17abc <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17aa8:	4b44      	ldr	r3, [pc, #272]	; (17bbc <vWifiTask+0x284>)
   17aaa:	4798      	blx	r3
                break;
   17aac:	e006      	b.n	17abc <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17aae:	4b44      	ldr	r3, [pc, #272]	; (17bc0 <vWifiTask+0x288>)
   17ab0:	4798      	blx	r3
                break;
   17ab2:	e003      	b.n	17abc <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   17ab4:	4b3e      	ldr	r3, [pc, #248]	; (17bb0 <vWifiTask+0x278>)
   17ab6:	2200      	movs	r2, #0
   17ab8:	701a      	strb	r2, [r3, #0]
                break;
   17aba:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17abc:	230b      	movs	r3, #11
   17abe:	18fb      	adds	r3, r7, r3
   17ac0:	2200      	movs	r2, #0
   17ac2:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17ac4:	4b1b      	ldr	r3, [pc, #108]	; (17b34 <vWifiTask+0x1fc>)
   17ac6:	681b      	ldr	r3, [r3, #0]
   17ac8:	220b      	movs	r2, #11
   17aca:	18b9      	adds	r1, r7, r2
   17acc:	2200      	movs	r2, #0
   17ace:	0018      	movs	r0, r3
   17ad0:	4b3c      	ldr	r3, [pc, #240]	; (17bc4 <vWifiTask+0x28c>)
   17ad2:	4798      	blx	r3
   17ad4:	0003      	movs	r3, r0
   17ad6:	2b01      	cmp	r3, #1
   17ad8:	d105      	bne.n	17ae6 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   17ada:	230b      	movs	r3, #11
   17adc:	18fb      	adds	r3, r7, r3
   17ade:	781b      	ldrb	r3, [r3, #0]
   17ae0:	b25a      	sxtb	r2, r3
   17ae2:	4b33      	ldr	r3, [pc, #204]	; (17bb0 <vWifiTask+0x278>)
   17ae4:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17ae6:	4b38      	ldr	r3, [pc, #224]	; (17bc8 <vWifiTask+0x290>)
   17ae8:	781b      	ldrb	r3, [r3, #0]
   17aea:	b2db      	uxtb	r3, r3
   17aec:	2b00      	cmp	r3, #0
   17aee:	d017      	beq.n	17b20 <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   17af0:	4b36      	ldr	r3, [pc, #216]	; (17bcc <vWifiTask+0x294>)
   17af2:	0018      	movs	r0, r3
   17af4:	4b36      	ldr	r3, [pc, #216]	; (17bd0 <vWifiTask+0x298>)
   17af6:	4798      	blx	r3
   17af8:	0004      	movs	r4, r0
   17afa:	4a34      	ldr	r2, [pc, #208]	; (17bcc <vWifiTask+0x294>)
   17afc:	4935      	ldr	r1, [pc, #212]	; (17bd4 <vWifiTask+0x29c>)
   17afe:	4836      	ldr	r0, [pc, #216]	; (17bd8 <vWifiTask+0x2a0>)
   17b00:	2300      	movs	r3, #0
   17b02:	9301      	str	r3, [sp, #4]
   17b04:	2301      	movs	r3, #1
   17b06:	9300      	str	r3, [sp, #0]
   17b08:	0023      	movs	r3, r4
   17b0a:	4c34      	ldr	r4, [pc, #208]	; (17bdc <vWifiTask+0x2a4>)
   17b0c:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   17b0e:	4a2f      	ldr	r2, [pc, #188]	; (17bcc <vWifiTask+0x294>)
   17b10:	4b33      	ldr	r3, [pc, #204]	; (17be0 <vWifiTask+0x2a8>)
   17b12:	0019      	movs	r1, r3
   17b14:	2001      	movs	r0, #1
   17b16:	4b19      	ldr	r3, [pc, #100]	; (17b7c <vWifiTask+0x244>)
   17b18:	4798      	blx	r3
            isPressed = false;
   17b1a:	4b2b      	ldr	r3, [pc, #172]	; (17bc8 <vWifiTask+0x290>)
   17b1c:	2200      	movs	r2, #0
   17b1e:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   17b20:	2064      	movs	r0, #100	; 0x64
   17b22:	4b01      	ldr	r3, [pc, #4]	; (17b28 <vWifiTask+0x1f0>)
   17b24:	4798      	blx	r3
    while (1) {
   17b26:	e7ab      	b.n	17a80 <vWifiTask+0x148>
   17b28:	0001c8a1 	.word	0x0001c8a1
   17b2c:	0001638d 	.word	0x0001638d
   17b30:	0001ab95 	.word	0x0001ab95
   17b34:	20000638 	.word	0x20000638
   17b38:	20000640 	.word	0x20000640
   17b3c:	2000063c 	.word	0x2000063c
   17b40:	20000644 	.word	0x20000644
   17b44:	00039434 	.word	0x00039434
   17b48:	0001e4f5 	.word	0x0001e4f5
   17b4c:	0003945c 	.word	0x0003945c
   17b50:	00016dc9 	.word	0x00016dc9
   17b54:	00016e05 	.word	0x00016e05
   17b58:	00017301 	.word	0x00017301
   17b5c:	00016ce5 	.word	0x00016ce5
   17b60:	000173b9 	.word	0x000173b9
   17b64:	000173f9 	.word	0x000173f9
   17b68:	00035377 	.word	0x00035377
   17b6c:	00020a05 	.word	0x00020a05
   17b70:	00016b91 	.word	0x00016b91
   17b74:	000224dd 	.word	0x000224dd
   17b78:	00039478 	.word	0x00039478
   17b7c:	0001e5e1 	.word	0x0001e5e1
   17b80:	00038ebc 	.word	0x00038ebc
   17b84:	000394a4 	.word	0x000394a4
   17b88:	00025b65 	.word	0x00025b65
   17b8c:	00016ebd 	.word	0x00016ebd
   17b90:	00016e89 	.word	0x00016e89
   17b94:	00025bfd 	.word	0x00025bfd
   17b98:	00038eb0 	.word	0x00038eb0
   17b9c:	00022615 	.word	0x00022615
   17ba0:	000225f9 	.word	0x000225f9
   17ba4:	20004a78 	.word	0x20004a78
   17ba8:	00032ced 	.word	0x00032ced
   17bac:	000163fd 	.word	0x000163fd
   17bb0:	20000634 	.word	0x20000634
   17bb4:	000175f9 	.word	0x000175f9
   17bb8:	00017695 	.word	0x00017695
   17bbc:	00017471 	.word	0x00017471
   17bc0:	00017505 	.word	0x00017505
   17bc4:	0001b6f5 	.word	0x0001b6f5
   17bc8:	20000ce0 	.word	0x20000ce0
   17bcc:	20000070 	.word	0x20000070
   17bd0:	0003572f 	.word	0x0003572f
   17bd4:	000394c8 	.word	0x000394c8
   17bd8:	200008a8 	.word	0x200008a8
   17bdc:	0003000d 	.word	0x0003000d
   17be0:	000394e4 	.word	0x000394e4

00017be4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17be4:	b590      	push	{r4, r7, lr}
   17be6:	b083      	sub	sp, #12
   17be8:	af00      	add	r7, sp, #0
   17bea:	0002      	movs	r2, r0
   17bec:	1dfb      	adds	r3, r7, #7
   17bee:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   17bf0:	1dfb      	adds	r3, r7, #7
   17bf2:	781b      	ldrb	r3, [r3, #0]
   17bf4:	2b03      	cmp	r3, #3
   17bf6:	d806      	bhi.n	17c06 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17bf8:	4b05      	ldr	r3, [pc, #20]	; (17c10 <WifiHandlerSetState+0x2c>)
   17bfa:	6818      	ldr	r0, [r3, #0]
   17bfc:	1df9      	adds	r1, r7, #7
   17bfe:	2300      	movs	r3, #0
   17c00:	220a      	movs	r2, #10
   17c02:	4c04      	ldr	r4, [pc, #16]	; (17c14 <WifiHandlerSetState+0x30>)
   17c04:	47a0      	blx	r4
    }
}
   17c06:	46c0      	nop			; (mov r8, r8)
   17c08:	46bd      	mov	sp, r7
   17c0a:	b003      	add	sp, #12
   17c0c:	bd90      	pop	{r4, r7, pc}
   17c0e:	46c0      	nop			; (mov r8, r8)
   17c10:	20000638 	.word	0x20000638
   17c14:	0001ae3d 	.word	0x0001ae3d

00017c18 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   17c18:	b590      	push	{r4, r7, lr}
   17c1a:	b085      	sub	sp, #20
   17c1c:	af00      	add	r7, sp, #0
   17c1e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   17c20:	4b06      	ldr	r3, [pc, #24]	; (17c3c <WifiAddImuDataToQueue+0x24>)
   17c22:	6818      	ldr	r0, [r3, #0]
   17c24:	6879      	ldr	r1, [r7, #4]
   17c26:	2300      	movs	r3, #0
   17c28:	220a      	movs	r2, #10
   17c2a:	4c05      	ldr	r4, [pc, #20]	; (17c40 <WifiAddImuDataToQueue+0x28>)
   17c2c:	47a0      	blx	r4
   17c2e:	0003      	movs	r3, r0
   17c30:	60fb      	str	r3, [r7, #12]
    return error;
   17c32:	68fb      	ldr	r3, [r7, #12]
}
   17c34:	0018      	movs	r0, r3
   17c36:	46bd      	mov	sp, r7
   17c38:	b005      	add	sp, #20
   17c3a:	bd90      	pop	{r4, r7, pc}
   17c3c:	20000640 	.word	0x20000640
   17c40:	0001ae3d 	.word	0x0001ae3d

00017c44 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   17c44:	b590      	push	{r4, r7, lr}
   17c46:	b085      	sub	sp, #20
   17c48:	af00      	add	r7, sp, #0
   17c4a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   17c4c:	4b06      	ldr	r3, [pc, #24]	; (17c68 <WifiAddDistanceDataToQueue+0x24>)
   17c4e:	6818      	ldr	r0, [r3, #0]
   17c50:	6879      	ldr	r1, [r7, #4]
   17c52:	2300      	movs	r3, #0
   17c54:	220a      	movs	r2, #10
   17c56:	4c05      	ldr	r4, [pc, #20]	; (17c6c <WifiAddDistanceDataToQueue+0x28>)
   17c58:	47a0      	blx	r4
   17c5a:	0003      	movs	r3, r0
   17c5c:	60fb      	str	r3, [r7, #12]
	return error;
   17c5e:	68fb      	ldr	r3, [r7, #12]
}
   17c60:	0018      	movs	r0, r3
   17c62:	46bd      	mov	sp, r7
   17c64:	b005      	add	sp, #20
   17c66:	bd90      	pop	{r4, r7, pc}
   17c68:	20000644 	.word	0x20000644
   17c6c:	0001ae3d 	.word	0x0001ae3d

00017c70 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17c70:	b580      	push	{r7, lr}
   17c72:	b082      	sub	sp, #8
   17c74:	af00      	add	r7, sp, #0
   17c76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17c78:	687b      	ldr	r3, [r7, #4]
   17c7a:	2200      	movs	r2, #0
   17c7c:	701a      	strb	r2, [r3, #0]
}
   17c7e:	46c0      	nop			; (mov r8, r8)
   17c80:	46bd      	mov	sp, r7
   17c82:	b002      	add	sp, #8
   17c84:	bd80      	pop	{r7, pc}
	...

00017c88 <system_apb_clock_set_mask>:
{
   17c88:	b580      	push	{r7, lr}
   17c8a:	b082      	sub	sp, #8
   17c8c:	af00      	add	r7, sp, #0
   17c8e:	0002      	movs	r2, r0
   17c90:	6039      	str	r1, [r7, #0]
   17c92:	1dfb      	adds	r3, r7, #7
   17c94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17c96:	1dfb      	adds	r3, r7, #7
   17c98:	781b      	ldrb	r3, [r3, #0]
   17c9a:	2b01      	cmp	r3, #1
   17c9c:	d00a      	beq.n	17cb4 <system_apb_clock_set_mask+0x2c>
   17c9e:	2b02      	cmp	r3, #2
   17ca0:	d00f      	beq.n	17cc2 <system_apb_clock_set_mask+0x3a>
   17ca2:	2b00      	cmp	r3, #0
   17ca4:	d114      	bne.n	17cd0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17ca6:	4b0e      	ldr	r3, [pc, #56]	; (17ce0 <system_apb_clock_set_mask+0x58>)
   17ca8:	4a0d      	ldr	r2, [pc, #52]	; (17ce0 <system_apb_clock_set_mask+0x58>)
   17caa:	6991      	ldr	r1, [r2, #24]
   17cac:	683a      	ldr	r2, [r7, #0]
   17cae:	430a      	orrs	r2, r1
   17cb0:	619a      	str	r2, [r3, #24]
			break;
   17cb2:	e00f      	b.n	17cd4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17cb4:	4b0a      	ldr	r3, [pc, #40]	; (17ce0 <system_apb_clock_set_mask+0x58>)
   17cb6:	4a0a      	ldr	r2, [pc, #40]	; (17ce0 <system_apb_clock_set_mask+0x58>)
   17cb8:	69d1      	ldr	r1, [r2, #28]
   17cba:	683a      	ldr	r2, [r7, #0]
   17cbc:	430a      	orrs	r2, r1
   17cbe:	61da      	str	r2, [r3, #28]
			break;
   17cc0:	e008      	b.n	17cd4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17cc2:	4b07      	ldr	r3, [pc, #28]	; (17ce0 <system_apb_clock_set_mask+0x58>)
   17cc4:	4a06      	ldr	r2, [pc, #24]	; (17ce0 <system_apb_clock_set_mask+0x58>)
   17cc6:	6a11      	ldr	r1, [r2, #32]
   17cc8:	683a      	ldr	r2, [r7, #0]
   17cca:	430a      	orrs	r2, r1
   17ccc:	621a      	str	r2, [r3, #32]
			break;
   17cce:	e001      	b.n	17cd4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17cd0:	2317      	movs	r3, #23
   17cd2:	e000      	b.n	17cd6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17cd4:	2300      	movs	r3, #0
}
   17cd6:	0018      	movs	r0, r3
   17cd8:	46bd      	mov	sp, r7
   17cda:	b002      	add	sp, #8
   17cdc:	bd80      	pop	{r7, pc}
   17cde:	46c0      	nop			; (mov r8, r8)
   17ce0:	40000400 	.word	0x40000400

00017ce4 <system_pinmux_get_config_defaults>:
{
   17ce4:	b580      	push	{r7, lr}
   17ce6:	b082      	sub	sp, #8
   17ce8:	af00      	add	r7, sp, #0
   17cea:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17cec:	687b      	ldr	r3, [r7, #4]
   17cee:	2280      	movs	r2, #128	; 0x80
   17cf0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17cf2:	687b      	ldr	r3, [r7, #4]
   17cf4:	2200      	movs	r2, #0
   17cf6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17cf8:	687b      	ldr	r3, [r7, #4]
   17cfa:	2201      	movs	r2, #1
   17cfc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17cfe:	687b      	ldr	r3, [r7, #4]
   17d00:	2200      	movs	r2, #0
   17d02:	70da      	strb	r2, [r3, #3]
}
   17d04:	46c0      	nop			; (mov r8, r8)
   17d06:	46bd      	mov	sp, r7
   17d08:	b002      	add	sp, #8
   17d0a:	bd80      	pop	{r7, pc}

00017d0c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   17d0c:	b580      	push	{r7, lr}
   17d0e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17d10:	4b05      	ldr	r3, [pc, #20]	; (17d28 <system_is_debugger_present+0x1c>)
   17d12:	789b      	ldrb	r3, [r3, #2]
   17d14:	b2db      	uxtb	r3, r3
   17d16:	001a      	movs	r2, r3
   17d18:	2302      	movs	r3, #2
   17d1a:	4013      	ands	r3, r2
   17d1c:	1e5a      	subs	r2, r3, #1
   17d1e:	4193      	sbcs	r3, r2
   17d20:	b2db      	uxtb	r3, r3
}
   17d22:	0018      	movs	r0, r3
   17d24:	46bd      	mov	sp, r7
   17d26:	bd80      	pop	{r7, pc}
   17d28:	41002000 	.word	0x41002000

00017d2c <system_interrupt_enter_critical_section>:
{
   17d2c:	b580      	push	{r7, lr}
   17d2e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17d30:	4b02      	ldr	r3, [pc, #8]	; (17d3c <system_interrupt_enter_critical_section+0x10>)
   17d32:	4798      	blx	r3
}
   17d34:	46c0      	nop			; (mov r8, r8)
   17d36:	46bd      	mov	sp, r7
   17d38:	bd80      	pop	{r7, pc}
   17d3a:	46c0      	nop			; (mov r8, r8)
   17d3c:	0002685d 	.word	0x0002685d

00017d40 <system_interrupt_leave_critical_section>:
{
   17d40:	b580      	push	{r7, lr}
   17d42:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17d44:	4b02      	ldr	r3, [pc, #8]	; (17d50 <system_interrupt_leave_critical_section+0x10>)
   17d46:	4798      	blx	r3
}
   17d48:	46c0      	nop			; (mov r8, r8)
   17d4a:	46bd      	mov	sp, r7
   17d4c:	bd80      	pop	{r7, pc}
   17d4e:	46c0      	nop			; (mov r8, r8)
   17d50:	000268b1 	.word	0x000268b1

00017d54 <system_interrupt_disable>:
{
   17d54:	b580      	push	{r7, lr}
   17d56:	b082      	sub	sp, #8
   17d58:	af00      	add	r7, sp, #0
   17d5a:	0002      	movs	r2, r0
   17d5c:	1dfb      	adds	r3, r7, #7
   17d5e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17d60:	4a07      	ldr	r2, [pc, #28]	; (17d80 <system_interrupt_disable+0x2c>)
   17d62:	1dfb      	adds	r3, r7, #7
   17d64:	781b      	ldrb	r3, [r3, #0]
   17d66:	0019      	movs	r1, r3
   17d68:	231f      	movs	r3, #31
   17d6a:	400b      	ands	r3, r1
   17d6c:	2101      	movs	r1, #1
   17d6e:	4099      	lsls	r1, r3
   17d70:	000b      	movs	r3, r1
   17d72:	0019      	movs	r1, r3
   17d74:	2380      	movs	r3, #128	; 0x80
   17d76:	50d1      	str	r1, [r2, r3]
}
   17d78:	46c0      	nop			; (mov r8, r8)
   17d7a:	46bd      	mov	sp, r7
   17d7c:	b002      	add	sp, #8
   17d7e:	bd80      	pop	{r7, pc}
   17d80:	e000e100 	.word	0xe000e100

00017d84 <i2c_master_is_syncing>:
{
   17d84:	b580      	push	{r7, lr}
   17d86:	b084      	sub	sp, #16
   17d88:	af00      	add	r7, sp, #0
   17d8a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17d8c:	687b      	ldr	r3, [r7, #4]
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17d92:	68fb      	ldr	r3, [r7, #12]
   17d94:	69db      	ldr	r3, [r3, #28]
   17d96:	2207      	movs	r2, #7
   17d98:	4013      	ands	r3, r2
   17d9a:	1e5a      	subs	r2, r3, #1
   17d9c:	4193      	sbcs	r3, r2
   17d9e:	b2db      	uxtb	r3, r3
}
   17da0:	0018      	movs	r0, r3
   17da2:	46bd      	mov	sp, r7
   17da4:	b004      	add	sp, #16
   17da6:	bd80      	pop	{r7, pc}

00017da8 <_i2c_master_wait_for_sync>:
{
   17da8:	b580      	push	{r7, lr}
   17daa:	b082      	sub	sp, #8
   17dac:	af00      	add	r7, sp, #0
   17dae:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17db0:	46c0      	nop			; (mov r8, r8)
   17db2:	687b      	ldr	r3, [r7, #4]
   17db4:	0018      	movs	r0, r3
   17db6:	4b04      	ldr	r3, [pc, #16]	; (17dc8 <_i2c_master_wait_for_sync+0x20>)
   17db8:	4798      	blx	r3
   17dba:	1e03      	subs	r3, r0, #0
   17dbc:	d1f9      	bne.n	17db2 <_i2c_master_wait_for_sync+0xa>
}
   17dbe:	46c0      	nop			; (mov r8, r8)
   17dc0:	46bd      	mov	sp, r7
   17dc2:	b002      	add	sp, #8
   17dc4:	bd80      	pop	{r7, pc}
   17dc6:	46c0      	nop			; (mov r8, r8)
   17dc8:	00017d85 	.word	0x00017d85

00017dcc <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17dcc:	b580      	push	{r7, lr}
   17dce:	b084      	sub	sp, #16
   17dd0:	af00      	add	r7, sp, #0
   17dd2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17dd4:	687b      	ldr	r3, [r7, #4]
   17dd6:	681b      	ldr	r3, [r3, #0]
   17dd8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17dda:	687b      	ldr	r3, [r7, #4]
   17ddc:	681b      	ldr	r3, [r3, #0]
   17dde:	0018      	movs	r0, r3
   17de0:	4b0d      	ldr	r3, [pc, #52]	; (17e18 <i2c_master_disable+0x4c>)
   17de2:	4798      	blx	r3
   17de4:	0003      	movs	r3, r0
   17de6:	0018      	movs	r0, r3
   17de8:	4b0c      	ldr	r3, [pc, #48]	; (17e1c <i2c_master_disable+0x50>)
   17dea:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17dec:	687b      	ldr	r3, [r7, #4]
   17dee:	0018      	movs	r0, r3
   17df0:	4b0b      	ldr	r3, [pc, #44]	; (17e20 <i2c_master_disable+0x54>)
   17df2:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17df4:	68fb      	ldr	r3, [r7, #12]
   17df6:	2283      	movs	r2, #131	; 0x83
   17df8:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17dfa:	68fb      	ldr	r3, [r7, #12]
   17dfc:	2283      	movs	r2, #131	; 0x83
   17dfe:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17e00:	68fb      	ldr	r3, [r7, #12]
   17e02:	681b      	ldr	r3, [r3, #0]
   17e04:	2202      	movs	r2, #2
   17e06:	4393      	bics	r3, r2
   17e08:	001a      	movs	r2, r3
   17e0a:	68fb      	ldr	r3, [r7, #12]
   17e0c:	601a      	str	r2, [r3, #0]

}
   17e0e:	46c0      	nop			; (mov r8, r8)
   17e10:	46bd      	mov	sp, r7
   17e12:	b004      	add	sp, #16
   17e14:	bd80      	pop	{r7, pc}
   17e16:	46c0      	nop			; (mov r8, r8)
   17e18:	00027d31 	.word	0x00027d31
   17e1c:	00017d55 	.word	0x00017d55
   17e20:	00017da9 	.word	0x00017da9

00017e24 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e26:	b097      	sub	sp, #92	; 0x5c
   17e28:	af00      	add	r7, sp, #0
   17e2a:	6178      	str	r0, [r7, #20]
   17e2c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   17e2e:	2300      	movs	r3, #0
   17e30:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17e32:	2300      	movs	r3, #0
   17e34:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   17e36:	2300      	movs	r3, #0
   17e38:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   17e3a:	233b      	movs	r3, #59	; 0x3b
   17e3c:	2210      	movs	r2, #16
   17e3e:	4694      	mov	ip, r2
   17e40:	44bc      	add	ip, r7
   17e42:	4463      	add	r3, ip
   17e44:	2200      	movs	r2, #0
   17e46:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17e48:	697b      	ldr	r3, [r7, #20]
   17e4a:	681b      	ldr	r3, [r3, #0]
   17e4c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   17e4e:	697b      	ldr	r3, [r7, #20]
   17e50:	681b      	ldr	r3, [r3, #0]
   17e52:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17e54:	2323      	movs	r3, #35	; 0x23
   17e56:	2210      	movs	r2, #16
   17e58:	18ba      	adds	r2, r7, r2
   17e5a:	18d4      	adds	r4, r2, r3
   17e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e5e:	0018      	movs	r0, r3
   17e60:	4bc0      	ldr	r3, [pc, #768]	; (18164 <_i2c_master_set_config+0x340>)
   17e62:	4798      	blx	r3
   17e64:	0003      	movs	r3, r0
   17e66:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17e68:	230c      	movs	r3, #12
   17e6a:	2210      	movs	r2, #16
   17e6c:	4694      	mov	ip, r2
   17e6e:	44bc      	add	ip, r7
   17e70:	4463      	add	r3, ip
   17e72:	0018      	movs	r0, r3
   17e74:	4bbc      	ldr	r3, [pc, #752]	; (18168 <_i2c_master_set_config+0x344>)
   17e76:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17e78:	693b      	ldr	r3, [r7, #16]
   17e7a:	69db      	ldr	r3, [r3, #28]
   17e7c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17e7e:	693b      	ldr	r3, [r7, #16]
   17e80:	6a1b      	ldr	r3, [r3, #32]
   17e82:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17e86:	2b00      	cmp	r3, #0
   17e88:	d106      	bne.n	17e98 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   17e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e8c:	2100      	movs	r1, #0
   17e8e:	0018      	movs	r0, r3
   17e90:	4bb6      	ldr	r3, [pc, #728]	; (1816c <_i2c_master_set_config+0x348>)
   17e92:	4798      	blx	r3
   17e94:	0003      	movs	r3, r0
   17e96:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17e9a:	b2da      	uxtb	r2, r3
   17e9c:	230c      	movs	r3, #12
   17e9e:	2110      	movs	r1, #16
   17ea0:	468c      	mov	ip, r1
   17ea2:	44bc      	add	ip, r7
   17ea4:	4463      	add	r3, ip
   17ea6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17ea8:	230c      	movs	r3, #12
   17eaa:	2210      	movs	r2, #16
   17eac:	4694      	mov	ip, r2
   17eae:	44bc      	add	ip, r7
   17eb0:	4463      	add	r3, ip
   17eb2:	2202      	movs	r2, #2
   17eb4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   17eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17eb8:	0c1b      	lsrs	r3, r3, #16
   17eba:	b2db      	uxtb	r3, r3
   17ebc:	220c      	movs	r2, #12
   17ebe:	2110      	movs	r1, #16
   17ec0:	468c      	mov	ip, r1
   17ec2:	44bc      	add	ip, r7
   17ec4:	4462      	add	r2, ip
   17ec6:	0011      	movs	r1, r2
   17ec8:	0018      	movs	r0, r3
   17eca:	4ba9      	ldr	r3, [pc, #676]	; (18170 <_i2c_master_set_config+0x34c>)
   17ecc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17ed0:	2b00      	cmp	r3, #0
   17ed2:	d106      	bne.n	17ee2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17ed6:	2101      	movs	r1, #1
   17ed8:	0018      	movs	r0, r3
   17eda:	4ba4      	ldr	r3, [pc, #656]	; (1816c <_i2c_master_set_config+0x348>)
   17edc:	4798      	blx	r3
   17ede:	0003      	movs	r3, r0
   17ee0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   17ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17ee4:	b2da      	uxtb	r2, r3
   17ee6:	230c      	movs	r3, #12
   17ee8:	2110      	movs	r1, #16
   17eea:	468c      	mov	ip, r1
   17eec:	44bc      	add	ip, r7
   17eee:	4463      	add	r3, ip
   17ef0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17ef2:	230c      	movs	r3, #12
   17ef4:	2210      	movs	r2, #16
   17ef6:	4694      	mov	ip, r2
   17ef8:	44bc      	add	ip, r7
   17efa:	4463      	add	r3, ip
   17efc:	2202      	movs	r2, #2
   17efe:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17f02:	0c1b      	lsrs	r3, r3, #16
   17f04:	b2db      	uxtb	r3, r3
   17f06:	220c      	movs	r2, #12
   17f08:	2110      	movs	r1, #16
   17f0a:	468c      	mov	ip, r1
   17f0c:	44bc      	add	ip, r7
   17f0e:	4462      	add	r2, ip
   17f10:	0011      	movs	r1, r2
   17f12:	0018      	movs	r0, r3
   17f14:	4b96      	ldr	r3, [pc, #600]	; (18170 <_i2c_master_set_config+0x34c>)
   17f16:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17f18:	693b      	ldr	r3, [r7, #16]
   17f1a:	8a9a      	ldrh	r2, [r3, #20]
   17f1c:	697b      	ldr	r3, [r7, #20]
   17f1e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17f20:	693b      	ldr	r3, [r7, #16]
   17f22:	8ada      	ldrh	r2, [r3, #22]
   17f24:	697b      	ldr	r3, [r7, #20]
   17f26:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17f28:	693b      	ldr	r3, [r7, #16]
   17f2a:	7e1b      	ldrb	r3, [r3, #24]
   17f2c:	2b00      	cmp	r3, #0
   17f2e:	d103      	bne.n	17f38 <_i2c_master_set_config+0x114>
   17f30:	4b90      	ldr	r3, [pc, #576]	; (18174 <_i2c_master_set_config+0x350>)
   17f32:	4798      	blx	r3
   17f34:	1e03      	subs	r3, r0, #0
   17f36:	d002      	beq.n	17f3e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   17f38:	2380      	movs	r3, #128	; 0x80
   17f3a:	657b      	str	r3, [r7, #84]	; 0x54
   17f3c:	e001      	b.n	17f42 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   17f3e:	2300      	movs	r3, #0
   17f40:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17f42:	693b      	ldr	r3, [r7, #16]
   17f44:	691b      	ldr	r3, [r3, #16]
   17f46:	2b00      	cmp	r3, #0
   17f48:	d004      	beq.n	17f54 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   17f4a:	693b      	ldr	r3, [r7, #16]
   17f4c:	691b      	ldr	r3, [r3, #16]
   17f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17f50:	4313      	orrs	r3, r2
   17f52:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17f54:	693b      	ldr	r3, [r7, #16]
   17f56:	689b      	ldr	r3, [r3, #8]
   17f58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17f5a:	4313      	orrs	r3, r2
   17f5c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   17f5e:	693b      	ldr	r3, [r7, #16]
   17f60:	2224      	movs	r2, #36	; 0x24
   17f62:	5c9b      	ldrb	r3, [r3, r2]
   17f64:	2b00      	cmp	r3, #0
   17f66:	d004      	beq.n	17f72 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17f6a:	2280      	movs	r2, #128	; 0x80
   17f6c:	05d2      	lsls	r2, r2, #23
   17f6e:	4313      	orrs	r3, r2
   17f70:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17f72:	693b      	ldr	r3, [r7, #16]
   17f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17f76:	2b00      	cmp	r3, #0
   17f78:	d004      	beq.n	17f84 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17f7a:	693b      	ldr	r3, [r7, #16]
   17f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17f7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17f80:	4313      	orrs	r3, r2
   17f82:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17f84:	693b      	ldr	r3, [r7, #16]
   17f86:	222c      	movs	r2, #44	; 0x2c
   17f88:	5c9b      	ldrb	r3, [r3, r2]
   17f8a:	2b00      	cmp	r3, #0
   17f8c:	d105      	bne.n	17f9a <_i2c_master_set_config+0x176>
   17f8e:	693b      	ldr	r3, [r7, #16]
   17f90:	689a      	ldr	r2, [r3, #8]
   17f92:	2380      	movs	r3, #128	; 0x80
   17f94:	049b      	lsls	r3, r3, #18
   17f96:	429a      	cmp	r2, r3
   17f98:	d104      	bne.n	17fa4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17f9c:	2280      	movs	r2, #128	; 0x80
   17f9e:	0512      	lsls	r2, r2, #20
   17fa0:	4313      	orrs	r3, r2
   17fa2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17fa4:	693b      	ldr	r3, [r7, #16]
   17fa6:	222d      	movs	r2, #45	; 0x2d
   17fa8:	5c9b      	ldrb	r3, [r3, r2]
   17faa:	2b00      	cmp	r3, #0
   17fac:	d004      	beq.n	17fb8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17fb0:	2280      	movs	r2, #128	; 0x80
   17fb2:	0412      	lsls	r2, r2, #16
   17fb4:	4313      	orrs	r3, r2
   17fb6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17fb8:	693b      	ldr	r3, [r7, #16]
   17fba:	222e      	movs	r2, #46	; 0x2e
   17fbc:	5c9b      	ldrb	r3, [r3, r2]
   17fbe:	2b00      	cmp	r3, #0
   17fc0:	d004      	beq.n	17fcc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   17fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17fc4:	2280      	movs	r2, #128	; 0x80
   17fc6:	03d2      	lsls	r2, r2, #15
   17fc8:	4313      	orrs	r3, r2
   17fca:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17fce:	681a      	ldr	r2, [r3, #0]
   17fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17fd2:	431a      	orrs	r2, r3
   17fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17fd6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17fda:	2280      	movs	r2, #128	; 0x80
   17fdc:	0052      	lsls	r2, r2, #1
   17fde:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17fe0:	2323      	movs	r3, #35	; 0x23
   17fe2:	2210      	movs	r2, #16
   17fe4:	4694      	mov	ip, r2
   17fe6:	44bc      	add	ip, r7
   17fe8:	4463      	add	r3, ip
   17fea:	781b      	ldrb	r3, [r3, #0]
   17fec:	3314      	adds	r3, #20
   17fee:	b2db      	uxtb	r3, r3
   17ff0:	0018      	movs	r0, r3
   17ff2:	4b61      	ldr	r3, [pc, #388]	; (18178 <_i2c_master_set_config+0x354>)
   17ff4:	4798      	blx	r3
   17ff6:	0003      	movs	r3, r0
   17ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17ffa:	693b      	ldr	r3, [r7, #16]
   17ffc:	681b      	ldr	r3, [r3, #0]
   17ffe:	22fa      	movs	r2, #250	; 0xfa
   18000:	0092      	lsls	r2, r2, #2
   18002:	4353      	muls	r3, r2
   18004:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   18006:	693b      	ldr	r3, [r7, #16]
   18008:	685b      	ldr	r3, [r3, #4]
   1800a:	22fa      	movs	r2, #250	; 0xfa
   1800c:	0092      	lsls	r2, r2, #2
   1800e:	4353      	muls	r3, r2
   18010:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   18012:	693b      	ldr	r3, [r7, #16]
   18014:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   18016:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   18018:	4b58      	ldr	r3, [pc, #352]	; (1817c <_i2c_master_set_config+0x358>)
   1801a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1801c:	4798      	blx	r3
   1801e:	0005      	movs	r5, r0
   18020:	000e      	movs	r6, r1
   18022:	4b56      	ldr	r3, [pc, #344]	; (1817c <_i2c_master_set_config+0x358>)
   18024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   18026:	4798      	blx	r3
   18028:	60b8      	str	r0, [r7, #8]
   1802a:	60f9      	str	r1, [r7, #12]
   1802c:	4b53      	ldr	r3, [pc, #332]	; (1817c <_i2c_master_set_config+0x358>)
   1802e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18030:	4798      	blx	r3
   18032:	4c53      	ldr	r4, [pc, #332]	; (18180 <_i2c_master_set_config+0x35c>)
   18034:	4a53      	ldr	r2, [pc, #332]	; (18184 <_i2c_master_set_config+0x360>)
   18036:	4b54      	ldr	r3, [pc, #336]	; (18188 <_i2c_master_set_config+0x364>)
   18038:	47a0      	blx	r4
   1803a:	0003      	movs	r3, r0
   1803c:	000c      	movs	r4, r1
   1803e:	603b      	str	r3, [r7, #0]
   18040:	607c      	str	r4, [r7, #4]
   18042:	4b4e      	ldr	r3, [pc, #312]	; (1817c <_i2c_master_set_config+0x358>)
   18044:	6a38      	ldr	r0, [r7, #32]
   18046:	4798      	blx	r3
   18048:	0002      	movs	r2, r0
   1804a:	000b      	movs	r3, r1
   1804c:	4c4c      	ldr	r4, [pc, #304]	; (18180 <_i2c_master_set_config+0x35c>)
   1804e:	6838      	ldr	r0, [r7, #0]
   18050:	6879      	ldr	r1, [r7, #4]
   18052:	47a0      	blx	r4
   18054:	0003      	movs	r3, r0
   18056:	000c      	movs	r4, r1
   18058:	0018      	movs	r0, r3
   1805a:	0021      	movs	r1, r4
   1805c:	4c4b      	ldr	r4, [pc, #300]	; (1818c <_i2c_master_set_config+0x368>)
   1805e:	2200      	movs	r2, #0
   18060:	4b4b      	ldr	r3, [pc, #300]	; (18190 <_i2c_master_set_config+0x36c>)
   18062:	47a0      	blx	r4
   18064:	0003      	movs	r3, r0
   18066:	000c      	movs	r4, r1
   18068:	001a      	movs	r2, r3
   1806a:	0023      	movs	r3, r4
   1806c:	4c44      	ldr	r4, [pc, #272]	; (18180 <_i2c_master_set_config+0x35c>)
   1806e:	68b8      	ldr	r0, [r7, #8]
   18070:	68f9      	ldr	r1, [r7, #12]
   18072:	47a0      	blx	r4
   18074:	0003      	movs	r3, r0
   18076:	000c      	movs	r4, r1
   18078:	001a      	movs	r2, r3
   1807a:	0023      	movs	r3, r4
   1807c:	4c45      	ldr	r4, [pc, #276]	; (18194 <_i2c_master_set_config+0x370>)
   1807e:	0028      	movs	r0, r5
   18080:	0031      	movs	r1, r6
   18082:	47a0      	blx	r4
   18084:	0003      	movs	r3, r0
   18086:	000c      	movs	r4, r1
   18088:	001d      	movs	r5, r3
   1808a:	0026      	movs	r6, r4
   1808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1808e:	005a      	lsls	r2, r3, #1
   18090:	4b3a      	ldr	r3, [pc, #232]	; (1817c <_i2c_master_set_config+0x358>)
   18092:	0010      	movs	r0, r2
   18094:	4798      	blx	r3
   18096:	0002      	movs	r2, r0
   18098:	000b      	movs	r3, r1
   1809a:	4c3c      	ldr	r4, [pc, #240]	; (1818c <_i2c_master_set_config+0x368>)
   1809c:	0028      	movs	r0, r5
   1809e:	0031      	movs	r1, r6
   180a0:	47a0      	blx	r4
   180a2:	0003      	movs	r3, r0
   180a4:	000c      	movs	r4, r1
   180a6:	0018      	movs	r0, r3
   180a8:	0021      	movs	r1, r4
   180aa:	4c3a      	ldr	r4, [pc, #232]	; (18194 <_i2c_master_set_config+0x370>)
   180ac:	2200      	movs	r2, #0
   180ae:	4b3a      	ldr	r3, [pc, #232]	; (18198 <_i2c_master_set_config+0x374>)
   180b0:	47a0      	blx	r4
   180b2:	0003      	movs	r3, r0
   180b4:	000c      	movs	r4, r1
   180b6:	001d      	movs	r5, r3
   180b8:	0026      	movs	r6, r4
   180ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   180bc:	005a      	lsls	r2, r3, #1
   180be:	4b2f      	ldr	r3, [pc, #188]	; (1817c <_i2c_master_set_config+0x358>)
   180c0:	0010      	movs	r0, r2
   180c2:	4798      	blx	r3
   180c4:	0002      	movs	r2, r0
   180c6:	000b      	movs	r3, r1
   180c8:	4c34      	ldr	r4, [pc, #208]	; (1819c <_i2c_master_set_config+0x378>)
   180ca:	0028      	movs	r0, r5
   180cc:	0031      	movs	r1, r6
   180ce:	47a0      	blx	r4
   180d0:	0003      	movs	r3, r0
   180d2:	000c      	movs	r4, r1
   180d4:	0019      	movs	r1, r3
   180d6:	0022      	movs	r2, r4
   180d8:	4b31      	ldr	r3, [pc, #196]	; (181a0 <_i2c_master_set_config+0x37c>)
   180da:	0008      	movs	r0, r1
   180dc:	0011      	movs	r1, r2
   180de:	4798      	blx	r3
   180e0:	0003      	movs	r3, r0
   180e2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   180e4:	693b      	ldr	r3, [r7, #16]
   180e6:	689a      	ldr	r2, [r3, #8]
   180e8:	2380      	movs	r3, #128	; 0x80
   180ea:	049b      	lsls	r3, r3, #18
   180ec:	429a      	cmp	r2, r3
   180ee:	d16a      	bne.n	181c6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   180f0:	4b22      	ldr	r3, [pc, #136]	; (1817c <_i2c_master_set_config+0x358>)
   180f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   180f4:	4798      	blx	r3
   180f6:	4c25      	ldr	r4, [pc, #148]	; (1818c <_i2c_master_set_config+0x368>)
   180f8:	0002      	movs	r2, r0
   180fa:	000b      	movs	r3, r1
   180fc:	47a0      	blx	r4
   180fe:	0003      	movs	r3, r0
   18100:	000c      	movs	r4, r1
   18102:	001d      	movs	r5, r3
   18104:	0026      	movs	r6, r4
   18106:	4b1d      	ldr	r3, [pc, #116]	; (1817c <_i2c_master_set_config+0x358>)
   18108:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1810a:	4798      	blx	r3
   1810c:	4c1c      	ldr	r4, [pc, #112]	; (18180 <_i2c_master_set_config+0x35c>)
   1810e:	2200      	movs	r2, #0
   18110:	4b24      	ldr	r3, [pc, #144]	; (181a4 <_i2c_master_set_config+0x380>)
   18112:	47a0      	blx	r4
   18114:	0003      	movs	r3, r0
   18116:	000c      	movs	r4, r1
   18118:	001a      	movs	r2, r3
   1811a:	0023      	movs	r3, r4
   1811c:	4c1f      	ldr	r4, [pc, #124]	; (1819c <_i2c_master_set_config+0x378>)
   1811e:	0028      	movs	r0, r5
   18120:	0031      	movs	r1, r6
   18122:	47a0      	blx	r4
   18124:	0003      	movs	r3, r0
   18126:	000c      	movs	r4, r1
   18128:	0018      	movs	r0, r3
   1812a:	0021      	movs	r1, r4
   1812c:	4c19      	ldr	r4, [pc, #100]	; (18194 <_i2c_master_set_config+0x370>)
   1812e:	2200      	movs	r2, #0
   18130:	4b19      	ldr	r3, [pc, #100]	; (18198 <_i2c_master_set_config+0x374>)
   18132:	47a0      	blx	r4
   18134:	0003      	movs	r3, r0
   18136:	000c      	movs	r4, r1
   18138:	0019      	movs	r1, r3
   1813a:	0022      	movs	r2, r4
   1813c:	4b18      	ldr	r3, [pc, #96]	; (181a0 <_i2c_master_set_config+0x37c>)
   1813e:	0008      	movs	r0, r1
   18140:	0011      	movs	r1, r2
   18142:	4798      	blx	r3
   18144:	0003      	movs	r3, r0
   18146:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   18148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1814a:	2b00      	cmp	r3, #0
   1814c:	d02e      	beq.n	181ac <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1814e:	4b16      	ldr	r3, [pc, #88]	; (181a8 <_i2c_master_set_config+0x384>)
   18150:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18154:	4798      	blx	r3
   18156:	0003      	movs	r3, r0
   18158:	1e9a      	subs	r2, r3, #2
   1815a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1815c:	1ad3      	subs	r3, r2, r3
   1815e:	653b      	str	r3, [r7, #80]	; 0x50
   18160:	e031      	b.n	181c6 <_i2c_master_set_config+0x3a2>
   18162:	46c0      	nop			; (mov r8, r8)
   18164:	00027c61 	.word	0x00027c61
   18168:	00017ce5 	.word	0x00017ce5
   1816c:	00027aa5 	.word	0x00027aa5
   18170:	0002a851 	.word	0x0002a851
   18174:	00017d0d 	.word	0x00017d0d
   18178:	0002a615 	.word	0x0002a615
   1817c:	00034eed 	.word	0x00034eed
   18180:	00034359 	.word	0x00034359
   18184:	e826d695 	.word	0xe826d695
   18188:	3e112e0b 	.word	0x3e112e0b
   1818c:	000336d1 	.word	0x000336d1
   18190:	40240000 	.word	0x40240000
   18194:	00034859 	.word	0x00034859
   18198:	3ff00000 	.word	0x3ff00000
   1819c:	00033cf1 	.word	0x00033cf1
   181a0:	00034e85 	.word	0x00034e85
   181a4:	40080000 	.word	0x40080000
   181a8:	00033035 	.word	0x00033035
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   181ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   181ae:	005a      	lsls	r2, r3, #1
   181b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   181b2:	18d3      	adds	r3, r2, r3
   181b4:	1e5a      	subs	r2, r3, #1
   181b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   181b8:	0059      	lsls	r1, r3, #1
   181ba:	4b1d      	ldr	r3, [pc, #116]	; (18230 <_i2c_master_set_config+0x40c>)
   181bc:	0010      	movs	r0, r2
   181be:	4798      	blx	r3
   181c0:	0003      	movs	r3, r0
   181c2:	3b01      	subs	r3, #1
   181c4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   181c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   181c8:	2bff      	cmp	r3, #255	; 0xff
   181ca:	dc08      	bgt.n	181de <_i2c_master_set_config+0x3ba>
   181cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   181ce:	2b00      	cmp	r3, #0
   181d0:	db05      	blt.n	181de <_i2c_master_set_config+0x3ba>
   181d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   181d4:	2bff      	cmp	r3, #255	; 0xff
   181d6:	dc02      	bgt.n	181de <_i2c_master_set_config+0x3ba>
   181d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   181da:	2b00      	cmp	r3, #0
   181dc:	da06      	bge.n	181ec <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   181de:	233b      	movs	r3, #59	; 0x3b
   181e0:	2210      	movs	r2, #16
   181e2:	4694      	mov	ip, r2
   181e4:	44bc      	add	ip, r7
   181e6:	4463      	add	r3, ip
   181e8:	2240      	movs	r2, #64	; 0x40
   181ea:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   181ec:	233b      	movs	r3, #59	; 0x3b
   181ee:	2210      	movs	r2, #16
   181f0:	4694      	mov	ip, r2
   181f2:	44bc      	add	ip, r7
   181f4:	4463      	add	r3, ip
   181f6:	781b      	ldrb	r3, [r3, #0]
   181f8:	2b40      	cmp	r3, #64	; 0x40
   181fa:	d00e      	beq.n	1821a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   181fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   181fe:	22ff      	movs	r2, #255	; 0xff
   18200:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18204:	041b      	lsls	r3, r3, #16
   18206:	0019      	movs	r1, r3
   18208:	23ff      	movs	r3, #255	; 0xff
   1820a:	041b      	lsls	r3, r3, #16
   1820c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1820e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18212:	0612      	lsls	r2, r2, #24
   18214:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18218:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1821a:	233b      	movs	r3, #59	; 0x3b
   1821c:	2210      	movs	r2, #16
   1821e:	4694      	mov	ip, r2
   18220:	44bc      	add	ip, r7
   18222:	4463      	add	r3, ip
   18224:	781b      	ldrb	r3, [r3, #0]
}
   18226:	0018      	movs	r0, r3
   18228:	46bd      	mov	sp, r7
   1822a:	b017      	add	sp, #92	; 0x5c
   1822c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1822e:	46c0      	nop			; (mov r8, r8)
   18230:	00033035 	.word	0x00033035

00018234 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   18234:	b590      	push	{r4, r7, lr}
   18236:	b08b      	sub	sp, #44	; 0x2c
   18238:	af00      	add	r7, sp, #0
   1823a:	60f8      	str	r0, [r7, #12]
   1823c:	60b9      	str	r1, [r7, #8]
   1823e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   18240:	68fb      	ldr	r3, [r7, #12]
   18242:	68ba      	ldr	r2, [r7, #8]
   18244:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18246:	68fb      	ldr	r3, [r7, #12]
   18248:	681b      	ldr	r3, [r3, #0]
   1824a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1824c:	68fb      	ldr	r3, [r7, #12]
   1824e:	681b      	ldr	r3, [r3, #0]
   18250:	0018      	movs	r0, r3
   18252:	4b3b      	ldr	r3, [pc, #236]	; (18340 <i2c_master_init+0x10c>)
   18254:	4798      	blx	r3
   18256:	0003      	movs	r3, r0
   18258:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1825a:	6a3b      	ldr	r3, [r7, #32]
   1825c:	3302      	adds	r3, #2
   1825e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18260:	6a3b      	ldr	r3, [r7, #32]
   18262:	3314      	adds	r3, #20
   18264:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   18266:	2201      	movs	r2, #1
   18268:	69fb      	ldr	r3, [r7, #28]
   1826a:	409a      	lsls	r2, r3
   1826c:	0013      	movs	r3, r2
   1826e:	0019      	movs	r1, r3
   18270:	2002      	movs	r0, #2
   18272:	4b34      	ldr	r3, [pc, #208]	; (18344 <i2c_master_init+0x110>)
   18274:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   18276:	2314      	movs	r3, #20
   18278:	18fb      	adds	r3, r7, r3
   1827a:	0018      	movs	r0, r3
   1827c:	4b32      	ldr	r3, [pc, #200]	; (18348 <i2c_master_init+0x114>)
   1827e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18280:	687b      	ldr	r3, [r7, #4]
   18282:	7b1a      	ldrb	r2, [r3, #12]
   18284:	2314      	movs	r3, #20
   18286:	18fb      	adds	r3, r7, r3
   18288:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1828a:	69bb      	ldr	r3, [r7, #24]
   1828c:	b2db      	uxtb	r3, r3
   1828e:	2214      	movs	r2, #20
   18290:	18ba      	adds	r2, r7, r2
   18292:	0011      	movs	r1, r2
   18294:	0018      	movs	r0, r3
   18296:	4b2d      	ldr	r3, [pc, #180]	; (1834c <i2c_master_init+0x118>)
   18298:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1829a:	69bb      	ldr	r3, [r7, #24]
   1829c:	b2db      	uxtb	r3, r3
   1829e:	0018      	movs	r0, r3
   182a0:	4b2b      	ldr	r3, [pc, #172]	; (18350 <i2c_master_init+0x11c>)
   182a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   182a4:	687b      	ldr	r3, [r7, #4]
   182a6:	7b1b      	ldrb	r3, [r3, #12]
   182a8:	2100      	movs	r1, #0
   182aa:	0018      	movs	r0, r3
   182ac:	4b29      	ldr	r3, [pc, #164]	; (18354 <i2c_master_init+0x120>)
   182ae:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   182b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   182b2:	681b      	ldr	r3, [r3, #0]
   182b4:	2202      	movs	r2, #2
   182b6:	4013      	ands	r3, r2
   182b8:	d001      	beq.n	182be <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   182ba:	231c      	movs	r3, #28
   182bc:	e03b      	b.n	18336 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   182be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   182c0:	681b      	ldr	r3, [r3, #0]
   182c2:	2201      	movs	r2, #1
   182c4:	4013      	ands	r3, r2
   182c6:	d001      	beq.n	182cc <i2c_master_init+0x98>
		return STATUS_BUSY;
   182c8:	2305      	movs	r3, #5
   182ca:	e034      	b.n	18336 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   182cc:	68fb      	ldr	r3, [r7, #12]
   182ce:	681b      	ldr	r3, [r3, #0]
   182d0:	2217      	movs	r2, #23
   182d2:	18bc      	adds	r4, r7, r2
   182d4:	0018      	movs	r0, r3
   182d6:	4b1a      	ldr	r3, [pc, #104]	; (18340 <i2c_master_init+0x10c>)
   182d8:	4798      	blx	r3
   182da:	0003      	movs	r3, r0
   182dc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   182de:	4a1e      	ldr	r2, [pc, #120]	; (18358 <i2c_master_init+0x124>)
   182e0:	2317      	movs	r3, #23
   182e2:	18fb      	adds	r3, r7, r3
   182e4:	781b      	ldrb	r3, [r3, #0]
   182e6:	0011      	movs	r1, r2
   182e8:	0018      	movs	r0, r3
   182ea:	4b1c      	ldr	r3, [pc, #112]	; (1835c <i2c_master_init+0x128>)
   182ec:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   182ee:	2317      	movs	r3, #23
   182f0:	18fb      	adds	r3, r7, r3
   182f2:	781a      	ldrb	r2, [r3, #0]
   182f4:	4b1a      	ldr	r3, [pc, #104]	; (18360 <i2c_master_init+0x12c>)
   182f6:	0092      	lsls	r2, r2, #2
   182f8:	68f9      	ldr	r1, [r7, #12]
   182fa:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   182fc:	68fb      	ldr	r3, [r7, #12]
   182fe:	2200      	movs	r2, #0
   18300:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   18302:	68fb      	ldr	r3, [r7, #12]
   18304:	2200      	movs	r2, #0
   18306:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18308:	68fb      	ldr	r3, [r7, #12]
   1830a:	2200      	movs	r2, #0
   1830c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1830e:	68fb      	ldr	r3, [r7, #12]
   18310:	2200      	movs	r2, #0
   18312:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18314:	68fb      	ldr	r3, [r7, #12]
   18316:	2225      	movs	r2, #37	; 0x25
   18318:	2100      	movs	r1, #0
   1831a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1831c:	68fb      	ldr	r3, [r7, #12]
   1831e:	2200      	movs	r2, #0
   18320:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18324:	2214      	movs	r2, #20
   18326:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18328:	687a      	ldr	r2, [r7, #4]
   1832a:	68fb      	ldr	r3, [r7, #12]
   1832c:	0011      	movs	r1, r2
   1832e:	0018      	movs	r0, r3
   18330:	4b0c      	ldr	r3, [pc, #48]	; (18364 <i2c_master_init+0x130>)
   18332:	4798      	blx	r3
   18334:	0003      	movs	r3, r0
}
   18336:	0018      	movs	r0, r3
   18338:	46bd      	mov	sp, r7
   1833a:	b00b      	add	sp, #44	; 0x2c
   1833c:	bd90      	pop	{r4, r7, pc}
   1833e:	46c0      	nop			; (mov r8, r8)
   18340:	00027c61 	.word	0x00027c61
   18344:	00017c89 	.word	0x00017c89
   18348:	00017c71 	.word	0x00017c71
   1834c:	0002a4f1 	.word	0x0002a4f1
   18350:	0002a535 	.word	0x0002a535
   18354:	00027a19 	.word	0x00027a19
   18358:	00013575 	.word	0x00013575
   1835c:	00027cc5 	.word	0x00027cc5
   18360:	20005dd0 	.word	0x20005dd0
   18364:	00017e25 	.word	0x00017e25

00018368 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18368:	b580      	push	{r7, lr}
   1836a:	b084      	sub	sp, #16
   1836c:	af00      	add	r7, sp, #0
   1836e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18370:	687b      	ldr	r3, [r7, #4]
   18372:	681b      	ldr	r3, [r3, #0]
   18374:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18376:	687b      	ldr	r3, [r7, #4]
   18378:	0018      	movs	r0, r3
   1837a:	4b0f      	ldr	r3, [pc, #60]	; (183b8 <i2c_master_reset+0x50>)
   1837c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1837e:	687b      	ldr	r3, [r7, #4]
   18380:	0018      	movs	r0, r3
   18382:	4b0e      	ldr	r3, [pc, #56]	; (183bc <i2c_master_reset+0x54>)
   18384:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   18386:	4b0e      	ldr	r3, [pc, #56]	; (183c0 <i2c_master_reset+0x58>)
   18388:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1838a:	687b      	ldr	r3, [r7, #4]
   1838c:	681b      	ldr	r3, [r3, #0]
   1838e:	0018      	movs	r0, r3
   18390:	4b0c      	ldr	r3, [pc, #48]	; (183c4 <i2c_master_reset+0x5c>)
   18392:	4798      	blx	r3
   18394:	0003      	movs	r3, r0
   18396:	0018      	movs	r0, r3
   18398:	4b0b      	ldr	r3, [pc, #44]	; (183c8 <i2c_master_reset+0x60>)
   1839a:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   1839c:	4b0b      	ldr	r3, [pc, #44]	; (183cc <i2c_master_reset+0x64>)
   1839e:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   183a0:	687b      	ldr	r3, [r7, #4]
   183a2:	0018      	movs	r0, r3
   183a4:	4b04      	ldr	r3, [pc, #16]	; (183b8 <i2c_master_reset+0x50>)
   183a6:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   183a8:	68fb      	ldr	r3, [r7, #12]
   183aa:	2201      	movs	r2, #1
   183ac:	601a      	str	r2, [r3, #0]
}
   183ae:	46c0      	nop			; (mov r8, r8)
   183b0:	46bd      	mov	sp, r7
   183b2:	b004      	add	sp, #16
   183b4:	bd80      	pop	{r7, pc}
   183b6:	46c0      	nop			; (mov r8, r8)
   183b8:	00017da9 	.word	0x00017da9
   183bc:	00017dcd 	.word	0x00017dcd
   183c0:	00017d2d 	.word	0x00017d2d
   183c4:	00027d31 	.word	0x00027d31
   183c8:	0002a66d 	.word	0x0002a66d
   183cc:	00017d41 	.word	0x00017d41

000183d0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   183d0:	b580      	push	{r7, lr}
   183d2:	b084      	sub	sp, #16
   183d4:	af00      	add	r7, sp, #0
   183d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   183d8:	687b      	ldr	r3, [r7, #4]
   183da:	681b      	ldr	r3, [r3, #0]
   183dc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   183de:	68fb      	ldr	r3, [r7, #12]
   183e0:	7e1b      	ldrb	r3, [r3, #24]
   183e2:	b2db      	uxtb	r3, r3
   183e4:	001a      	movs	r2, r3
   183e6:	2302      	movs	r3, #2
   183e8:	4013      	ands	r3, r2
   183ea:	d00b      	beq.n	18404 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   183ec:	68fb      	ldr	r3, [r7, #12]
   183ee:	2202      	movs	r2, #2
   183f0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   183f2:	68fb      	ldr	r3, [r7, #12]
   183f4:	8b5b      	ldrh	r3, [r3, #26]
   183f6:	b29b      	uxth	r3, r3
   183f8:	001a      	movs	r2, r3
   183fa:	2302      	movs	r3, #2
   183fc:	4013      	ands	r3, r2
   183fe:	d011      	beq.n	18424 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18400:	2341      	movs	r3, #65	; 0x41
   18402:	e010      	b.n	18426 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18404:	68fb      	ldr	r3, [r7, #12]
   18406:	8b5b      	ldrh	r3, [r3, #26]
   18408:	b29b      	uxth	r3, r3
   1840a:	001a      	movs	r2, r3
   1840c:	2304      	movs	r3, #4
   1840e:	4013      	ands	r3, r2
   18410:	d008      	beq.n	18424 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18412:	68fb      	ldr	r3, [r7, #12]
   18414:	685b      	ldr	r3, [r3, #4]
   18416:	22c0      	movs	r2, #192	; 0xc0
   18418:	0292      	lsls	r2, r2, #10
   1841a:	431a      	orrs	r2, r3
   1841c:	68fb      	ldr	r3, [r7, #12]
   1841e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   18420:	2318      	movs	r3, #24
   18422:	e000      	b.n	18426 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18424:	2300      	movs	r3, #0
}
   18426:	0018      	movs	r0, r3
   18428:	46bd      	mov	sp, r7
   1842a:	b004      	add	sp, #16
   1842c:	bd80      	pop	{r7, pc}

0001842e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1842e:	b580      	push	{r7, lr}
   18430:	b084      	sub	sp, #16
   18432:	af00      	add	r7, sp, #0
   18434:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18436:	687b      	ldr	r3, [r7, #4]
   18438:	681b      	ldr	r3, [r3, #0]
   1843a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1843c:	230e      	movs	r3, #14
   1843e:	18fb      	adds	r3, r7, r3
   18440:	2200      	movs	r2, #0
   18442:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18444:	e00f      	b.n	18466 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   18446:	230e      	movs	r3, #14
   18448:	18fb      	adds	r3, r7, r3
   1844a:	220e      	movs	r2, #14
   1844c:	18ba      	adds	r2, r7, r2
   1844e:	8812      	ldrh	r2, [r2, #0]
   18450:	3201      	adds	r2, #1
   18452:	801a      	strh	r2, [r3, #0]
   18454:	687b      	ldr	r3, [r7, #4]
   18456:	891b      	ldrh	r3, [r3, #8]
   18458:	220e      	movs	r2, #14
   1845a:	18ba      	adds	r2, r7, r2
   1845c:	8812      	ldrh	r2, [r2, #0]
   1845e:	429a      	cmp	r2, r3
   18460:	d301      	bcc.n	18466 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   18462:	2312      	movs	r3, #18
   18464:	e00e      	b.n	18484 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18466:	68bb      	ldr	r3, [r7, #8]
   18468:	7e1b      	ldrb	r3, [r3, #24]
   1846a:	b2db      	uxtb	r3, r3
   1846c:	001a      	movs	r2, r3
   1846e:	2301      	movs	r3, #1
   18470:	4013      	ands	r3, r2
   18472:	d106      	bne.n	18482 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   18474:	68bb      	ldr	r3, [r7, #8]
   18476:	7e1b      	ldrb	r3, [r3, #24]
   18478:	b2db      	uxtb	r3, r3
   1847a:	001a      	movs	r2, r3
   1847c:	2302      	movs	r3, #2
   1847e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18480:	d0e1      	beq.n	18446 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   18482:	2300      	movs	r3, #0
}
   18484:	0018      	movs	r0, r3
   18486:	46bd      	mov	sp, r7
   18488:	b004      	add	sp, #16
   1848a:	bd80      	pop	{r7, pc}

0001848c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   1848c:	b590      	push	{r4, r7, lr}
   1848e:	b085      	sub	sp, #20
   18490:	af00      	add	r7, sp, #0
   18492:	6078      	str	r0, [r7, #4]
   18494:	000a      	movs	r2, r1
   18496:	1cfb      	adds	r3, r7, #3
   18498:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1849a:	687b      	ldr	r3, [r7, #4]
   1849c:	681b      	ldr	r3, [r3, #0]
   1849e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   184a0:	68fb      	ldr	r3, [r7, #12]
   184a2:	685b      	ldr	r3, [r3, #4]
   184a4:	2280      	movs	r2, #128	; 0x80
   184a6:	02d2      	lsls	r2, r2, #11
   184a8:	431a      	orrs	r2, r3
   184aa:	68fb      	ldr	r3, [r7, #12]
   184ac:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   184ae:	1cfb      	adds	r3, r7, #3
   184b0:	781a      	ldrb	r2, [r3, #0]
   184b2:	68fb      	ldr	r3, [r7, #12]
   184b4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   184b6:	230b      	movs	r3, #11
   184b8:	18fc      	adds	r4, r7, r3
   184ba:	687b      	ldr	r3, [r7, #4]
   184bc:	0018      	movs	r0, r3
   184be:	4b07      	ldr	r3, [pc, #28]	; (184dc <_i2c_master_send_hs_master_code+0x50>)
   184c0:	4798      	blx	r3
   184c2:	0003      	movs	r3, r0
   184c4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   184c6:	68fb      	ldr	r3, [r7, #12]
   184c8:	2201      	movs	r2, #1
   184ca:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   184cc:	230b      	movs	r3, #11
   184ce:	18fb      	adds	r3, r7, r3
   184d0:	781b      	ldrb	r3, [r3, #0]
}
   184d2:	0018      	movs	r0, r3
   184d4:	46bd      	mov	sp, r7
   184d6:	b005      	add	sp, #20
   184d8:	bd90      	pop	{r4, r7, pc}
   184da:	46c0      	nop			; (mov r8, r8)
   184dc:	0001842f 	.word	0x0001842f

000184e0 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   184e0:	b580      	push	{r7, lr}
   184e2:	af00      	add	r7, sp, #0
   184e4:	2000      	movs	r0, #0
   184e6:	4b02      	ldr	r3, [pc, #8]	; (184f0 <TC3_Handler+0x10>)
   184e8:	4798      	blx	r3
   184ea:	46c0      	nop			; (mov r8, r8)
   184ec:	46bd      	mov	sp, r7
   184ee:	bd80      	pop	{r7, pc}
   184f0:	0001851d 	.word	0x0001851d

000184f4 <TC4_Handler>:
   184f4:	b580      	push	{r7, lr}
   184f6:	af00      	add	r7, sp, #0
   184f8:	2001      	movs	r0, #1
   184fa:	4b02      	ldr	r3, [pc, #8]	; (18504 <TC4_Handler+0x10>)
   184fc:	4798      	blx	r3
   184fe:	46c0      	nop			; (mov r8, r8)
   18500:	46bd      	mov	sp, r7
   18502:	bd80      	pop	{r7, pc}
   18504:	0001851d 	.word	0x0001851d

00018508 <TC5_Handler>:
   18508:	b580      	push	{r7, lr}
   1850a:	af00      	add	r7, sp, #0
   1850c:	2002      	movs	r0, #2
   1850e:	4b02      	ldr	r3, [pc, #8]	; (18518 <TC5_Handler+0x10>)
   18510:	4798      	blx	r3
   18512:	46c0      	nop			; (mov r8, r8)
   18514:	46bd      	mov	sp, r7
   18516:	bd80      	pop	{r7, pc}
   18518:	0001851d 	.word	0x0001851d

0001851c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1851c:	b580      	push	{r7, lr}
   1851e:	b084      	sub	sp, #16
   18520:	af00      	add	r7, sp, #0
   18522:	0002      	movs	r2, r0
   18524:	1dfb      	adds	r3, r7, #7
   18526:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18528:	1dfb      	adds	r3, r7, #7
   1852a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1852c:	4b28      	ldr	r3, [pc, #160]	; (185d0 <_tc_interrupt_handler+0xb4>)
   1852e:	0092      	lsls	r2, r2, #2
   18530:	58d3      	ldr	r3, [r2, r3]
   18532:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18534:	68fb      	ldr	r3, [r7, #12]
   18536:	681b      	ldr	r3, [r3, #0]
   18538:	7b9b      	ldrb	r3, [r3, #14]
   1853a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1853c:	68fa      	ldr	r2, [r7, #12]
   1853e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18540:	4013      	ands	r3, r2
   18542:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18544:	68fb      	ldr	r3, [r7, #12]
   18546:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18548:	230b      	movs	r3, #11
   1854a:	18fb      	adds	r3, r7, r3
   1854c:	400a      	ands	r2, r1
   1854e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18550:	230b      	movs	r3, #11
   18552:	18fb      	adds	r3, r7, r3
   18554:	781b      	ldrb	r3, [r3, #0]
   18556:	2201      	movs	r2, #1
   18558:	4013      	ands	r3, r2
   1855a:	d008      	beq.n	1856e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1855c:	68fb      	ldr	r3, [r7, #12]
   1855e:	689b      	ldr	r3, [r3, #8]
   18560:	68fa      	ldr	r2, [r7, #12]
   18562:	0010      	movs	r0, r2
   18564:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18566:	68fb      	ldr	r3, [r7, #12]
   18568:	681b      	ldr	r3, [r3, #0]
   1856a:	2201      	movs	r2, #1
   1856c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1856e:	230b      	movs	r3, #11
   18570:	18fb      	adds	r3, r7, r3
   18572:	781b      	ldrb	r3, [r3, #0]
   18574:	2202      	movs	r2, #2
   18576:	4013      	ands	r3, r2
   18578:	d008      	beq.n	1858c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1857a:	68fb      	ldr	r3, [r7, #12]
   1857c:	68db      	ldr	r3, [r3, #12]
   1857e:	68fa      	ldr	r2, [r7, #12]
   18580:	0010      	movs	r0, r2
   18582:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18584:	68fb      	ldr	r3, [r7, #12]
   18586:	681b      	ldr	r3, [r3, #0]
   18588:	2202      	movs	r2, #2
   1858a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1858c:	230b      	movs	r3, #11
   1858e:	18fb      	adds	r3, r7, r3
   18590:	781b      	ldrb	r3, [r3, #0]
   18592:	2210      	movs	r2, #16
   18594:	4013      	ands	r3, r2
   18596:	d008      	beq.n	185aa <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18598:	68fb      	ldr	r3, [r7, #12]
   1859a:	691b      	ldr	r3, [r3, #16]
   1859c:	68fa      	ldr	r2, [r7, #12]
   1859e:	0010      	movs	r0, r2
   185a0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   185a2:	68fb      	ldr	r3, [r7, #12]
   185a4:	681b      	ldr	r3, [r3, #0]
   185a6:	2210      	movs	r2, #16
   185a8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   185aa:	230b      	movs	r3, #11
   185ac:	18fb      	adds	r3, r7, r3
   185ae:	781b      	ldrb	r3, [r3, #0]
   185b0:	2220      	movs	r2, #32
   185b2:	4013      	ands	r3, r2
   185b4:	d008      	beq.n	185c8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   185b6:	68fb      	ldr	r3, [r7, #12]
   185b8:	695b      	ldr	r3, [r3, #20]
   185ba:	68fa      	ldr	r2, [r7, #12]
   185bc:	0010      	movs	r0, r2
   185be:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   185c0:	68fb      	ldr	r3, [r7, #12]
   185c2:	681b      	ldr	r3, [r3, #0]
   185c4:	2220      	movs	r2, #32
   185c6:	739a      	strb	r2, [r3, #14]
	}
}
   185c8:	46c0      	nop			; (mov r8, r8)
   185ca:	46bd      	mov	sp, r7
   185cc:	b004      	add	sp, #16
   185ce:	bd80      	pop	{r7, pc}
   185d0:	20004bb8 	.word	0x20004bb8

000185d4 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   185d4:	b580      	push	{r7, lr}
   185d6:	b084      	sub	sp, #16
   185d8:	af00      	add	r7, sp, #0
   185da:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   185dc:	2300      	movs	r3, #0
   185de:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   185e0:	687b      	ldr	r3, [r7, #4]
   185e2:	2b00      	cmp	r3, #0
   185e4:	d101      	bne.n	185ea <FreeRTOS_CLIRegisterCommand+0x16>
   185e6:	b672      	cpsid	i
   185e8:	e7fe      	b.n	185e8 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   185ea:	2008      	movs	r0, #8
   185ec:	4b11      	ldr	r3, [pc, #68]	; (18634 <FreeRTOS_CLIRegisterCommand+0x60>)
   185ee:	4798      	blx	r3
   185f0:	0003      	movs	r3, r0
   185f2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   185f4:	68bb      	ldr	r3, [r7, #8]
   185f6:	2b00      	cmp	r3, #0
   185f8:	d101      	bne.n	185fe <FreeRTOS_CLIRegisterCommand+0x2a>
   185fa:	b672      	cpsid	i
   185fc:	e7fe      	b.n	185fc <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   185fe:	68bb      	ldr	r3, [r7, #8]
   18600:	2b00      	cmp	r3, #0
   18602:	d012      	beq.n	1862a <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18604:	4b0c      	ldr	r3, [pc, #48]	; (18638 <FreeRTOS_CLIRegisterCommand+0x64>)
   18606:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18608:	68bb      	ldr	r3, [r7, #8]
   1860a:	687a      	ldr	r2, [r7, #4]
   1860c:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1860e:	68bb      	ldr	r3, [r7, #8]
   18610:	2200      	movs	r2, #0
   18612:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18614:	4b09      	ldr	r3, [pc, #36]	; (1863c <FreeRTOS_CLIRegisterCommand+0x68>)
   18616:	681b      	ldr	r3, [r3, #0]
   18618:	68ba      	ldr	r2, [r7, #8]
   1861a:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1861c:	4b07      	ldr	r3, [pc, #28]	; (1863c <FreeRTOS_CLIRegisterCommand+0x68>)
   1861e:	68ba      	ldr	r2, [r7, #8]
   18620:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18622:	4b07      	ldr	r3, [pc, #28]	; (18640 <FreeRTOS_CLIRegisterCommand+0x6c>)
   18624:	4798      	blx	r3

		xReturn = pdPASS;
   18626:	2301      	movs	r3, #1
   18628:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1862a:	68fb      	ldr	r3, [r7, #12]
}
   1862c:	0018      	movs	r0, r3
   1862e:	46bd      	mov	sp, r7
   18630:	b004      	add	sp, #16
   18632:	bd80      	pop	{r7, pc}
   18634:	0001a9e1 	.word	0x0001a9e1
   18638:	0001a8a9 	.word	0x0001a8a9
   1863c:	20000100 	.word	0x20000100
   18640:	0001a8cd 	.word	0x0001a8cd

00018644 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18644:	b580      	push	{r7, lr}
   18646:	b088      	sub	sp, #32
   18648:	af00      	add	r7, sp, #0
   1864a:	60f8      	str	r0, [r7, #12]
   1864c:	60b9      	str	r1, [r7, #8]
   1864e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18650:	2301      	movs	r3, #1
   18652:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18654:	4b3d      	ldr	r3, [pc, #244]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   18656:	681b      	ldr	r3, [r3, #0]
   18658:	2b00      	cmp	r3, #0
   1865a:	d144      	bne.n	186e6 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1865c:	4b3b      	ldr	r3, [pc, #236]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   1865e:	4a3c      	ldr	r2, [pc, #240]	; (18750 <FreeRTOS_CLIProcessCommand+0x10c>)
   18660:	601a      	str	r2, [r3, #0]
   18662:	e03a      	b.n	186da <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18664:	4b39      	ldr	r3, [pc, #228]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   18666:	681b      	ldr	r3, [r3, #0]
   18668:	681b      	ldr	r3, [r3, #0]
   1866a:	681b      	ldr	r3, [r3, #0]
   1866c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1866e:	69bb      	ldr	r3, [r7, #24]
   18670:	0018      	movs	r0, r3
   18672:	4b38      	ldr	r3, [pc, #224]	; (18754 <FreeRTOS_CLIProcessCommand+0x110>)
   18674:	4798      	blx	r3
   18676:	0003      	movs	r3, r0
   18678:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1867a:	68fa      	ldr	r2, [r7, #12]
   1867c:	697b      	ldr	r3, [r7, #20]
   1867e:	18d3      	adds	r3, r2, r3
   18680:	781b      	ldrb	r3, [r3, #0]
   18682:	2b20      	cmp	r3, #32
   18684:	d005      	beq.n	18692 <FreeRTOS_CLIProcessCommand+0x4e>
   18686:	68fa      	ldr	r2, [r7, #12]
   18688:	697b      	ldr	r3, [r7, #20]
   1868a:	18d3      	adds	r3, r2, r3
   1868c:	781b      	ldrb	r3, [r3, #0]
   1868e:	2b00      	cmp	r3, #0
   18690:	d11e      	bne.n	186d0 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18692:	697a      	ldr	r2, [r7, #20]
   18694:	69b9      	ldr	r1, [r7, #24]
   18696:	68fb      	ldr	r3, [r7, #12]
   18698:	0018      	movs	r0, r3
   1869a:	4b2f      	ldr	r3, [pc, #188]	; (18758 <FreeRTOS_CLIProcessCommand+0x114>)
   1869c:	4798      	blx	r3
   1869e:	1e03      	subs	r3, r0, #0
   186a0:	d116      	bne.n	186d0 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   186a2:	4b2a      	ldr	r3, [pc, #168]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   186a4:	681b      	ldr	r3, [r3, #0]
   186a6:	681b      	ldr	r3, [r3, #0]
   186a8:	7b1b      	ldrb	r3, [r3, #12]
   186aa:	b25b      	sxtb	r3, r3
   186ac:	2b00      	cmp	r3, #0
   186ae:	db19      	blt.n	186e4 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   186b0:	68fb      	ldr	r3, [r7, #12]
   186b2:	0018      	movs	r0, r3
   186b4:	4b29      	ldr	r3, [pc, #164]	; (1875c <FreeRTOS_CLIProcessCommand+0x118>)
   186b6:	4798      	blx	r3
   186b8:	0003      	movs	r3, r0
   186ba:	001a      	movs	r2, r3
   186bc:	4b23      	ldr	r3, [pc, #140]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   186be:	681b      	ldr	r3, [r3, #0]
   186c0:	681b      	ldr	r3, [r3, #0]
   186c2:	7b1b      	ldrb	r3, [r3, #12]
   186c4:	b25b      	sxtb	r3, r3
   186c6:	429a      	cmp	r2, r3
   186c8:	d00c      	beq.n	186e4 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   186ca:	2300      	movs	r3, #0
   186cc:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   186ce:	e009      	b.n	186e4 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   186d0:	4b1e      	ldr	r3, [pc, #120]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   186d2:	681b      	ldr	r3, [r3, #0]
   186d4:	685a      	ldr	r2, [r3, #4]
   186d6:	4b1d      	ldr	r3, [pc, #116]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   186d8:	601a      	str	r2, [r3, #0]
   186da:	4b1c      	ldr	r3, [pc, #112]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   186dc:	681b      	ldr	r3, [r3, #0]
   186de:	2b00      	cmp	r3, #0
   186e0:	d1c0      	bne.n	18664 <FreeRTOS_CLIProcessCommand+0x20>
   186e2:	e000      	b.n	186e6 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   186e4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   186e6:	4b19      	ldr	r3, [pc, #100]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   186e8:	681b      	ldr	r3, [r3, #0]
   186ea:	2b00      	cmp	r3, #0
   186ec:	d00c      	beq.n	18708 <FreeRTOS_CLIProcessCommand+0xc4>
   186ee:	69fb      	ldr	r3, [r7, #28]
   186f0:	2b00      	cmp	r3, #0
   186f2:	d109      	bne.n	18708 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   186f4:	687a      	ldr	r2, [r7, #4]
   186f6:	491a      	ldr	r1, [pc, #104]	; (18760 <FreeRTOS_CLIProcessCommand+0x11c>)
   186f8:	68bb      	ldr	r3, [r7, #8]
   186fa:	0018      	movs	r0, r3
   186fc:	4b19      	ldr	r3, [pc, #100]	; (18764 <FreeRTOS_CLIProcessCommand+0x120>)
   186fe:	4798      	blx	r3
		pxCommand = NULL;
   18700:	4b12      	ldr	r3, [pc, #72]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   18702:	2200      	movs	r2, #0
   18704:	601a      	str	r2, [r3, #0]
   18706:	e01c      	b.n	18742 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18708:	4b10      	ldr	r3, [pc, #64]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   1870a:	681b      	ldr	r3, [r3, #0]
   1870c:	2b00      	cmp	r3, #0
   1870e:	d010      	beq.n	18732 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18710:	4b0e      	ldr	r3, [pc, #56]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   18712:	681b      	ldr	r3, [r3, #0]
   18714:	681b      	ldr	r3, [r3, #0]
   18716:	689b      	ldr	r3, [r3, #8]
   18718:	68fa      	ldr	r2, [r7, #12]
   1871a:	6879      	ldr	r1, [r7, #4]
   1871c:	68b8      	ldr	r0, [r7, #8]
   1871e:	4798      	blx	r3
   18720:	0003      	movs	r3, r0
   18722:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18724:	69fb      	ldr	r3, [r7, #28]
   18726:	2b00      	cmp	r3, #0
   18728:	d10b      	bne.n	18742 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1872a:	4b08      	ldr	r3, [pc, #32]	; (1874c <FreeRTOS_CLIProcessCommand+0x108>)
   1872c:	2200      	movs	r2, #0
   1872e:	601a      	str	r2, [r3, #0]
   18730:	e007      	b.n	18742 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18732:	687a      	ldr	r2, [r7, #4]
   18734:	490c      	ldr	r1, [pc, #48]	; (18768 <FreeRTOS_CLIProcessCommand+0x124>)
   18736:	68bb      	ldr	r3, [r7, #8]
   18738:	0018      	movs	r0, r3
   1873a:	4b0a      	ldr	r3, [pc, #40]	; (18764 <FreeRTOS_CLIProcessCommand+0x120>)
   1873c:	4798      	blx	r3
		xReturn = pdFALSE;
   1873e:	2300      	movs	r3, #0
   18740:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18742:	69fb      	ldr	r3, [r7, #28]
}
   18744:	0018      	movs	r0, r3
   18746:	46bd      	mov	sp, r7
   18748:	b008      	add	sp, #32
   1874a:	bd80      	pop	{r7, pc}
   1874c:	20000ce4 	.word	0x20000ce4
   18750:	200000f8 	.word	0x200000f8
   18754:	0003572f 	.word	0x0003572f
   18758:	0003573d 	.word	0x0003573d
   1875c:	000187cd 	.word	0x000187cd
   18760:	0003953c 	.word	0x0003953c
   18764:	0003575f 	.word	0x0003575f
   18768:	00039594 	.word	0x00039594

0001876c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1876c:	b580      	push	{r7, lr}
   1876e:	b086      	sub	sp, #24
   18770:	af00      	add	r7, sp, #0
   18772:	60f8      	str	r0, [r7, #12]
   18774:	60b9      	str	r1, [r7, #8]
   18776:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18778:	4b11      	ldr	r3, [pc, #68]	; (187c0 <prvHelpCommand+0x54>)
   1877a:	681b      	ldr	r3, [r3, #0]
   1877c:	2b00      	cmp	r3, #0
   1877e:	d102      	bne.n	18786 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18780:	4b0f      	ldr	r3, [pc, #60]	; (187c0 <prvHelpCommand+0x54>)
   18782:	4a10      	ldr	r2, [pc, #64]	; (187c4 <prvHelpCommand+0x58>)
   18784:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18786:	4b0e      	ldr	r3, [pc, #56]	; (187c0 <prvHelpCommand+0x54>)
   18788:	681b      	ldr	r3, [r3, #0]
   1878a:	681b      	ldr	r3, [r3, #0]
   1878c:	6859      	ldr	r1, [r3, #4]
   1878e:	68ba      	ldr	r2, [r7, #8]
   18790:	68fb      	ldr	r3, [r7, #12]
   18792:	0018      	movs	r0, r3
   18794:	4b0c      	ldr	r3, [pc, #48]	; (187c8 <prvHelpCommand+0x5c>)
   18796:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18798:	4b09      	ldr	r3, [pc, #36]	; (187c0 <prvHelpCommand+0x54>)
   1879a:	681b      	ldr	r3, [r3, #0]
   1879c:	685a      	ldr	r2, [r3, #4]
   1879e:	4b08      	ldr	r3, [pc, #32]	; (187c0 <prvHelpCommand+0x54>)
   187a0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   187a2:	4b07      	ldr	r3, [pc, #28]	; (187c0 <prvHelpCommand+0x54>)
   187a4:	681b      	ldr	r3, [r3, #0]
   187a6:	2b00      	cmp	r3, #0
   187a8:	d102      	bne.n	187b0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   187aa:	2300      	movs	r3, #0
   187ac:	617b      	str	r3, [r7, #20]
   187ae:	e001      	b.n	187b4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   187b0:	2301      	movs	r3, #1
   187b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   187b4:	697b      	ldr	r3, [r7, #20]
}
   187b6:	0018      	movs	r0, r3
   187b8:	46bd      	mov	sp, r7
   187ba:	b006      	add	sp, #24
   187bc:	bd80      	pop	{r7, pc}
   187be:	46c0      	nop			; (mov r8, r8)
   187c0:	20000ce8 	.word	0x20000ce8
   187c4:	200000f8 	.word	0x200000f8
   187c8:	0003575f 	.word	0x0003575f

000187cc <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   187cc:	b580      	push	{r7, lr}
   187ce:	b084      	sub	sp, #16
   187d0:	af00      	add	r7, sp, #0
   187d2:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   187d4:	230f      	movs	r3, #15
   187d6:	18fb      	adds	r3, r7, r3
   187d8:	2200      	movs	r2, #0
   187da:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   187dc:	2300      	movs	r3, #0
   187de:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   187e0:	e018      	b.n	18814 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   187e2:	687b      	ldr	r3, [r7, #4]
   187e4:	781b      	ldrb	r3, [r3, #0]
   187e6:	2b20      	cmp	r3, #32
   187e8:	d10f      	bne.n	1880a <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   187ea:	68bb      	ldr	r3, [r7, #8]
   187ec:	2b01      	cmp	r3, #1
   187ee:	d00e      	beq.n	1880e <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   187f0:	230f      	movs	r3, #15
   187f2:	18fb      	adds	r3, r7, r3
   187f4:	781b      	ldrb	r3, [r3, #0]
   187f6:	b25b      	sxtb	r3, r3
   187f8:	b2db      	uxtb	r3, r3
   187fa:	3301      	adds	r3, #1
   187fc:	b2da      	uxtb	r2, r3
   187fe:	230f      	movs	r3, #15
   18800:	18fb      	adds	r3, r7, r3
   18802:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18804:	2301      	movs	r3, #1
   18806:	60bb      	str	r3, [r7, #8]
   18808:	e001      	b.n	1880e <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1880a:	2300      	movs	r3, #0
   1880c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1880e:	687b      	ldr	r3, [r7, #4]
   18810:	3301      	adds	r3, #1
   18812:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18814:	687b      	ldr	r3, [r7, #4]
   18816:	781b      	ldrb	r3, [r3, #0]
   18818:	2b00      	cmp	r3, #0
   1881a:	d1e2      	bne.n	187e2 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1881c:	68bb      	ldr	r3, [r7, #8]
   1881e:	2b01      	cmp	r3, #1
   18820:	d109      	bne.n	18836 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18822:	230f      	movs	r3, #15
   18824:	18fb      	adds	r3, r7, r3
   18826:	781b      	ldrb	r3, [r3, #0]
   18828:	b25b      	sxtb	r3, r3
   1882a:	b2db      	uxtb	r3, r3
   1882c:	3b01      	subs	r3, #1
   1882e:	b2da      	uxtb	r2, r3
   18830:	230f      	movs	r3, #15
   18832:	18fb      	adds	r3, r7, r3
   18834:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18836:	230f      	movs	r3, #15
   18838:	18fb      	adds	r3, r7, r3
   1883a:	781b      	ldrb	r3, [r3, #0]
   1883c:	b25b      	sxtb	r3, r3
}
   1883e:	0018      	movs	r0, r3
   18840:	46bd      	mov	sp, r7
   18842:	b004      	add	sp, #16
   18844:	bd80      	pop	{r7, pc}
	...

00018848 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18848:	b580      	push	{r7, lr}
   1884a:	b082      	sub	sp, #8
   1884c:	af00      	add	r7, sp, #0
   1884e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18850:	687b      	ldr	r3, [r7, #4]
   18852:	0018      	movs	r0, r3
   18854:	4b03      	ldr	r3, [pc, #12]	; (18864 <prvTraceGetQueueNumber+0x1c>)
   18856:	4798      	blx	r3
   18858:	0003      	movs	r3, r0
}
   1885a:	0018      	movs	r0, r3
   1885c:	46bd      	mov	sp, r7
   1885e:	b002      	add	sp, #8
   18860:	bd80      	pop	{r7, pc}
   18862:	46c0      	nop			; (mov r8, r8)
   18864:	0001c005 	.word	0x0001c005

00018868 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18868:	b580      	push	{r7, lr}
   1886a:	b082      	sub	sp, #8
   1886c:	af00      	add	r7, sp, #0
   1886e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18870:	687b      	ldr	r3, [r7, #4]
   18872:	0018      	movs	r0, r3
   18874:	4b03      	ldr	r3, [pc, #12]	; (18884 <prvTraceGetQueueType+0x1c>)
   18876:	4798      	blx	r3
   18878:	0003      	movs	r3, r0
}
   1887a:	0018      	movs	r0, r3
   1887c:	46bd      	mov	sp, r7
   1887e:	b002      	add	sp, #8
   18880:	bd80      	pop	{r7, pc}
   18882:	46c0      	nop			; (mov r8, r8)
   18884:	0001c031 	.word	0x0001c031

00018888 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18888:	b580      	push	{r7, lr}
   1888a:	b082      	sub	sp, #8
   1888c:	af00      	add	r7, sp, #0
   1888e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18890:	687b      	ldr	r3, [r7, #4]
   18892:	0018      	movs	r0, r3
   18894:	4b03      	ldr	r3, [pc, #12]	; (188a4 <prvTraceGetTaskNumberLow16+0x1c>)
   18896:	4798      	blx	r3
   18898:	0003      	movs	r3, r0
   1889a:	b29b      	uxth	r3, r3
}
   1889c:	0018      	movs	r0, r3
   1889e:	46bd      	mov	sp, r7
   188a0:	b002      	add	sp, #8
   188a2:	bd80      	pop	{r7, pc}
   188a4:	0001d361 	.word	0x0001d361

000188a8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   188a8:	b580      	push	{r7, lr}
   188aa:	b082      	sub	sp, #8
   188ac:	af00      	add	r7, sp, #0
   188ae:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   188b0:	687b      	ldr	r3, [r7, #4]
   188b2:	0018      	movs	r0, r3
   188b4:	4b04      	ldr	r3, [pc, #16]	; (188c8 <prvTraceGetTaskNumberHigh16+0x20>)
   188b6:	4798      	blx	r3
   188b8:	0003      	movs	r3, r0
   188ba:	0c1b      	lsrs	r3, r3, #16
   188bc:	b29b      	uxth	r3, r3
}
   188be:	0018      	movs	r0, r3
   188c0:	46bd      	mov	sp, r7
   188c2:	b002      	add	sp, #8
   188c4:	bd80      	pop	{r7, pc}
   188c6:	46c0      	nop			; (mov r8, r8)
   188c8:	0001d361 	.word	0x0001d361

000188cc <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   188cc:	b580      	push	{r7, lr}
   188ce:	b082      	sub	sp, #8
   188d0:	af00      	add	r7, sp, #0
   188d2:	6078      	str	r0, [r7, #4]
   188d4:	000a      	movs	r2, r1
   188d6:	1cbb      	adds	r3, r7, #2
   188d8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   188da:	687b      	ldr	r3, [r7, #4]
   188dc:	0018      	movs	r0, r3
   188de:	4b08      	ldr	r3, [pc, #32]	; (18900 <prvTraceSetTaskNumberLow16+0x34>)
   188e0:	4798      	blx	r3
   188e2:	0003      	movs	r3, r0
   188e4:	0c1b      	lsrs	r3, r3, #16
   188e6:	041a      	lsls	r2, r3, #16
   188e8:	1cbb      	adds	r3, r7, #2
   188ea:	881b      	ldrh	r3, [r3, #0]
   188ec:	431a      	orrs	r2, r3
   188ee:	687b      	ldr	r3, [r7, #4]
   188f0:	0011      	movs	r1, r2
   188f2:	0018      	movs	r0, r3
   188f4:	4b03      	ldr	r3, [pc, #12]	; (18904 <prvTraceSetTaskNumberLow16+0x38>)
   188f6:	4798      	blx	r3
}
   188f8:	46c0      	nop			; (mov r8, r8)
   188fa:	46bd      	mov	sp, r7
   188fc:	b002      	add	sp, #8
   188fe:	bd80      	pop	{r7, pc}
   18900:	0001d361 	.word	0x0001d361
   18904:	0001d389 	.word	0x0001d389

00018908 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18908:	b580      	push	{r7, lr}
   1890a:	b082      	sub	sp, #8
   1890c:	af00      	add	r7, sp, #0
   1890e:	6078      	str	r0, [r7, #4]
   18910:	000a      	movs	r2, r1
   18912:	1cbb      	adds	r3, r7, #2
   18914:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18916:	687b      	ldr	r3, [r7, #4]
   18918:	0018      	movs	r0, r3
   1891a:	4b09      	ldr	r3, [pc, #36]	; (18940 <prvTraceSetTaskNumberHigh16+0x38>)
   1891c:	4798      	blx	r3
   1891e:	0003      	movs	r3, r0
   18920:	041b      	lsls	r3, r3, #16
   18922:	0c1a      	lsrs	r2, r3, #16
   18924:	1cbb      	adds	r3, r7, #2
   18926:	881b      	ldrh	r3, [r3, #0]
   18928:	041b      	lsls	r3, r3, #16
   1892a:	431a      	orrs	r2, r3
   1892c:	687b      	ldr	r3, [r7, #4]
   1892e:	0011      	movs	r1, r2
   18930:	0018      	movs	r0, r3
   18932:	4b04      	ldr	r3, [pc, #16]	; (18944 <prvTraceSetTaskNumberHigh16+0x3c>)
   18934:	4798      	blx	r3
}
   18936:	46c0      	nop			; (mov r8, r8)
   18938:	46bd      	mov	sp, r7
   1893a:	b002      	add	sp, #8
   1893c:	bd80      	pop	{r7, pc}
   1893e:	46c0      	nop			; (mov r8, r8)
   18940:	0001d361 	.word	0x0001d361
   18944:	0001d389 	.word	0x0001d389

00018948 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18948:	b580      	push	{r7, lr}
   1894a:	b082      	sub	sp, #8
   1894c:	af00      	add	r7, sp, #0
   1894e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18950:	687b      	ldr	r3, [r7, #4]
   18952:	0018      	movs	r0, r3
   18954:	4b03      	ldr	r3, [pc, #12]	; (18964 <prvTraceGetQueueNumberLow16+0x1c>)
   18956:	4798      	blx	r3
   18958:	0003      	movs	r3, r0
   1895a:	b29b      	uxth	r3, r3
}
   1895c:	0018      	movs	r0, r3
   1895e:	46bd      	mov	sp, r7
   18960:	b002      	add	sp, #8
   18962:	bd80      	pop	{r7, pc}
   18964:	00018849 	.word	0x00018849

00018968 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18968:	b580      	push	{r7, lr}
   1896a:	b082      	sub	sp, #8
   1896c:	af00      	add	r7, sp, #0
   1896e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18970:	687b      	ldr	r3, [r7, #4]
   18972:	0018      	movs	r0, r3
   18974:	4b04      	ldr	r3, [pc, #16]	; (18988 <prvTraceGetQueueNumberHigh16+0x20>)
   18976:	4798      	blx	r3
   18978:	0003      	movs	r3, r0
   1897a:	0c1b      	lsrs	r3, r3, #16
   1897c:	b29b      	uxth	r3, r3
}
   1897e:	0018      	movs	r0, r3
   18980:	46bd      	mov	sp, r7
   18982:	b002      	add	sp, #8
   18984:	bd80      	pop	{r7, pc}
   18986:	46c0      	nop			; (mov r8, r8)
   18988:	00018849 	.word	0x00018849

0001898c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1898c:	b580      	push	{r7, lr}
   1898e:	b082      	sub	sp, #8
   18990:	af00      	add	r7, sp, #0
   18992:	6078      	str	r0, [r7, #4]
   18994:	000a      	movs	r2, r1
   18996:	1cbb      	adds	r3, r7, #2
   18998:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1899a:	687b      	ldr	r3, [r7, #4]
   1899c:	0018      	movs	r0, r3
   1899e:	4b08      	ldr	r3, [pc, #32]	; (189c0 <prvTraceSetQueueNumberLow16+0x34>)
   189a0:	4798      	blx	r3
   189a2:	0003      	movs	r3, r0
   189a4:	0c1b      	lsrs	r3, r3, #16
   189a6:	041a      	lsls	r2, r3, #16
   189a8:	1cbb      	adds	r3, r7, #2
   189aa:	881b      	ldrh	r3, [r3, #0]
   189ac:	431a      	orrs	r2, r3
   189ae:	687b      	ldr	r3, [r7, #4]
   189b0:	0011      	movs	r1, r2
   189b2:	0018      	movs	r0, r3
   189b4:	4b03      	ldr	r3, [pc, #12]	; (189c4 <prvTraceSetQueueNumberLow16+0x38>)
   189b6:	4798      	blx	r3
}
   189b8:	46c0      	nop			; (mov r8, r8)
   189ba:	46bd      	mov	sp, r7
   189bc:	b002      	add	sp, #8
   189be:	bd80      	pop	{r7, pc}
   189c0:	00018849 	.word	0x00018849
   189c4:	0001c019 	.word	0x0001c019

000189c8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   189c8:	b580      	push	{r7, lr}
   189ca:	b082      	sub	sp, #8
   189cc:	af00      	add	r7, sp, #0
   189ce:	6078      	str	r0, [r7, #4]
   189d0:	000a      	movs	r2, r1
   189d2:	1cbb      	adds	r3, r7, #2
   189d4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   189d6:	687b      	ldr	r3, [r7, #4]
   189d8:	0018      	movs	r0, r3
   189da:	4b09      	ldr	r3, [pc, #36]	; (18a00 <prvTraceSetQueueNumberHigh16+0x38>)
   189dc:	4798      	blx	r3
   189de:	0003      	movs	r3, r0
   189e0:	041b      	lsls	r3, r3, #16
   189e2:	0c1a      	lsrs	r2, r3, #16
   189e4:	1cbb      	adds	r3, r7, #2
   189e6:	881b      	ldrh	r3, [r3, #0]
   189e8:	041b      	lsls	r3, r3, #16
   189ea:	431a      	orrs	r2, r3
   189ec:	687b      	ldr	r3, [r7, #4]
   189ee:	0011      	movs	r1, r2
   189f0:	0018      	movs	r0, r3
   189f2:	4b04      	ldr	r3, [pc, #16]	; (18a04 <prvTraceSetQueueNumberHigh16+0x3c>)
   189f4:	4798      	blx	r3
}
   189f6:	46c0      	nop			; (mov r8, r8)
   189f8:	46bd      	mov	sp, r7
   189fa:	b002      	add	sp, #8
   189fc:	bd80      	pop	{r7, pc}
   189fe:	46c0      	nop			; (mov r8, r8)
   18a00:	00018849 	.word	0x00018849
   18a04:	0001c019 	.word	0x0001c019

00018a08 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18a08:	b580      	push	{r7, lr}
   18a0a:	b084      	sub	sp, #16
   18a0c:	af00      	add	r7, sp, #0
   18a0e:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18a10:	2300      	movs	r3, #0
   18a12:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18a14:	2300      	movs	r3, #0
   18a16:	60bb      	str	r3, [r7, #8]
   18a18:	e018      	b.n	18a4c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18a1a:	4b14      	ldr	r3, [pc, #80]	; (18a6c <prvAddTaskToStackMonitor+0x64>)
   18a1c:	68ba      	ldr	r2, [r7, #8]
   18a1e:	00d2      	lsls	r2, r2, #3
   18a20:	58d3      	ldr	r3, [r2, r3]
   18a22:	2b00      	cmp	r3, #0
   18a24:	d10f      	bne.n	18a46 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18a26:	4b11      	ldr	r3, [pc, #68]	; (18a6c <prvAddTaskToStackMonitor+0x64>)
   18a28:	68ba      	ldr	r2, [r7, #8]
   18a2a:	00d2      	lsls	r2, r2, #3
   18a2c:	6879      	ldr	r1, [r7, #4]
   18a2e:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18a30:	4a0e      	ldr	r2, [pc, #56]	; (18a6c <prvAddTaskToStackMonitor+0x64>)
   18a32:	68bb      	ldr	r3, [r7, #8]
   18a34:	00db      	lsls	r3, r3, #3
   18a36:	18d3      	adds	r3, r2, r3
   18a38:	3304      	adds	r3, #4
   18a3a:	2201      	movs	r2, #1
   18a3c:	4252      	negs	r2, r2
   18a3e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18a40:	2301      	movs	r3, #1
   18a42:	60fb      	str	r3, [r7, #12]
			break;
   18a44:	e005      	b.n	18a52 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18a46:	68bb      	ldr	r3, [r7, #8]
   18a48:	3301      	adds	r3, #1
   18a4a:	60bb      	str	r3, [r7, #8]
   18a4c:	68bb      	ldr	r3, [r7, #8]
   18a4e:	2b09      	cmp	r3, #9
   18a50:	dde3      	ble.n	18a1a <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18a52:	68fb      	ldr	r3, [r7, #12]
   18a54:	2b00      	cmp	r3, #0
   18a56:	d104      	bne.n	18a62 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18a58:	4b05      	ldr	r3, [pc, #20]	; (18a70 <prvAddTaskToStackMonitor+0x68>)
   18a5a:	681b      	ldr	r3, [r3, #0]
   18a5c:	1c5a      	adds	r2, r3, #1
   18a5e:	4b04      	ldr	r3, [pc, #16]	; (18a70 <prvAddTaskToStackMonitor+0x68>)
   18a60:	601a      	str	r2, [r3, #0]
	}
}
   18a62:	46c0      	nop			; (mov r8, r8)
   18a64:	46bd      	mov	sp, r7
   18a66:	b004      	add	sp, #16
   18a68:	bd80      	pop	{r7, pc}
   18a6a:	46c0      	nop			; (mov r8, r8)
   18a6c:	20000cf0 	.word	0x20000cf0
   18a70:	20000d40 	.word	0x20000d40

00018a74 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18a74:	b590      	push	{r4, r7, lr}
   18a76:	b085      	sub	sp, #20
   18a78:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18a7a:	2300      	movs	r3, #0
   18a7c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18a7e:	4b2b      	ldr	r3, [pc, #172]	; (18b2c <prvReportStackUsage+0xb8>)
   18a80:	681b      	ldr	r3, [r3, #0]
   18a82:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18a84:	4b29      	ldr	r3, [pc, #164]	; (18b2c <prvReportStackUsage+0xb8>)
   18a86:	681a      	ldr	r2, [r3, #0]
   18a88:	4b29      	ldr	r3, [pc, #164]	; (18b30 <prvReportStackUsage+0xbc>)
   18a8a:	00d2      	lsls	r2, r2, #3
   18a8c:	58d3      	ldr	r3, [r2, r3]
   18a8e:	2b00      	cmp	r3, #0
   18a90:	d035      	beq.n	18afe <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   18a92:	4b26      	ldr	r3, [pc, #152]	; (18b2c <prvReportStackUsage+0xb8>)
   18a94:	681a      	ldr	r2, [r3, #0]
   18a96:	4b26      	ldr	r3, [pc, #152]	; (18b30 <prvReportStackUsage+0xbc>)
   18a98:	00d2      	lsls	r2, r2, #3
   18a9a:	58d3      	ldr	r3, [r2, r3]
   18a9c:	0018      	movs	r0, r3
   18a9e:	4b25      	ldr	r3, [pc, #148]	; (18b34 <prvReportStackUsage+0xc0>)
   18aa0:	4798      	blx	r3
   18aa2:	0003      	movs	r3, r0
   18aa4:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18aa6:	4b21      	ldr	r3, [pc, #132]	; (18b2c <prvReportStackUsage+0xb8>)
   18aa8:	681b      	ldr	r3, [r3, #0]
   18aaa:	4a21      	ldr	r2, [pc, #132]	; (18b30 <prvReportStackUsage+0xbc>)
   18aac:	00db      	lsls	r3, r3, #3
   18aae:	18d3      	adds	r3, r2, r3
   18ab0:	3304      	adds	r3, #4
   18ab2:	681a      	ldr	r2, [r3, #0]
   18ab4:	687b      	ldr	r3, [r7, #4]
   18ab6:	429a      	cmp	r2, r3
   18ab8:	d907      	bls.n	18aca <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18aba:	4b1c      	ldr	r3, [pc, #112]	; (18b2c <prvReportStackUsage+0xb8>)
   18abc:	681b      	ldr	r3, [r3, #0]
   18abe:	4a1c      	ldr	r2, [pc, #112]	; (18b30 <prvReportStackUsage+0xbc>)
   18ac0:	00db      	lsls	r3, r3, #3
   18ac2:	18d3      	adds	r3, r2, r3
   18ac4:	3304      	adds	r3, #4
   18ac6:	687a      	ldr	r2, [r7, #4]
   18ac8:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18aca:	4b18      	ldr	r3, [pc, #96]	; (18b2c <prvReportStackUsage+0xb8>)
   18acc:	681a      	ldr	r2, [r3, #0]
   18ace:	4b18      	ldr	r3, [pc, #96]	; (18b30 <prvReportStackUsage+0xbc>)
   18ad0:	00d2      	lsls	r2, r2, #3
   18ad2:	58d3      	ldr	r3, [r2, r3]
   18ad4:	0018      	movs	r0, r3
   18ad6:	4b18      	ldr	r3, [pc, #96]	; (18b38 <prvReportStackUsage+0xc4>)
   18ad8:	4798      	blx	r3
   18ada:	0003      	movs	r3, r0
   18adc:	b2db      	uxtb	r3, r3
   18ade:	0019      	movs	r1, r3
   18ae0:	4b12      	ldr	r3, [pc, #72]	; (18b2c <prvReportStackUsage+0xb8>)
   18ae2:	681b      	ldr	r3, [r3, #0]
   18ae4:	4a12      	ldr	r2, [pc, #72]	; (18b30 <prvReportStackUsage+0xbc>)
   18ae6:	00db      	lsls	r3, r3, #3
   18ae8:	18d3      	adds	r3, r2, r3
   18aea:	3304      	adds	r3, #4
   18aec:	681b      	ldr	r3, [r3, #0]
   18aee:	000a      	movs	r2, r1
   18af0:	2103      	movs	r1, #3
   18af2:	20ea      	movs	r0, #234	; 0xea
   18af4:	4c11      	ldr	r4, [pc, #68]	; (18b3c <prvReportStackUsage+0xc8>)
   18af6:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18af8:	68fb      	ldr	r3, [r7, #12]
   18afa:	3301      	adds	r3, #1
   18afc:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18afe:	4b0b      	ldr	r3, [pc, #44]	; (18b2c <prvReportStackUsage+0xb8>)
   18b00:	681b      	ldr	r3, [r3, #0]
   18b02:	1c5a      	adds	r2, r3, #1
   18b04:	4b0e      	ldr	r3, [pc, #56]	; (18b40 <prvReportStackUsage+0xcc>)
   18b06:	210a      	movs	r1, #10
   18b08:	0010      	movs	r0, r2
   18b0a:	4798      	blx	r3
   18b0c:	000b      	movs	r3, r1
   18b0e:	001a      	movs	r2, r3
   18b10:	4b06      	ldr	r3, [pc, #24]	; (18b2c <prvReportStackUsage+0xb8>)
   18b12:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18b14:	68fb      	ldr	r3, [r7, #12]
   18b16:	2b00      	cmp	r3, #0
   18b18:	dc04      	bgt.n	18b24 <prvReportStackUsage+0xb0>
   18b1a:	4b04      	ldr	r3, [pc, #16]	; (18b2c <prvReportStackUsage+0xb8>)
   18b1c:	681a      	ldr	r2, [r3, #0]
   18b1e:	68bb      	ldr	r3, [r7, #8]
   18b20:	429a      	cmp	r2, r3
   18b22:	d1af      	bne.n	18a84 <prvReportStackUsage+0x10>
}
   18b24:	46c0      	nop			; (mov r8, r8)
   18b26:	46bd      	mov	sp, r7
   18b28:	b005      	add	sp, #20
   18b2a:	bd90      	pop	{r4, r7, pc}
   18b2c:	20000d44 	.word	0x20000d44
   18b30:	20000cf0 	.word	0x20000cf0
   18b34:	0001d501 	.word	0x0001d501
   18b38:	00018889 	.word	0x00018889
   18b3c:	000193d1 	.word	0x000193d1
   18b40:	00033315 	.word	0x00033315

00018b44 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18b44:	b580      	push	{r7, lr}
   18b46:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18b48:	4b02      	ldr	r3, [pc, #8]	; (18b54 <prvTraceGetCurrentTaskHandle+0x10>)
   18b4a:	4798      	blx	r3
   18b4c:	0003      	movs	r3, r0
}
   18b4e:	0018      	movs	r0, r3
   18b50:	46bd      	mov	sp, r7
   18b52:	bd80      	pop	{r7, pc}
   18b54:	0001d5ad 	.word	0x0001d5ad

00018b58 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18b58:	b590      	push	{r4, r7, lr}
   18b5a:	b085      	sub	sp, #20
   18b5c:	af02      	add	r7, sp, #8
   18b5e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18b60:	4b14      	ldr	r3, [pc, #80]	; (18bb4 <vTraceEnable+0x5c>)
   18b62:	4798      	blx	r3

	if (startOption == TRC_START)
   18b64:	687b      	ldr	r3, [r7, #4]
   18b66:	2b01      	cmp	r3, #1
   18b68:	d102      	bne.n	18b70 <vTraceEnable+0x18>
	{
		vTraceStart();
   18b6a:	4b13      	ldr	r3, [pc, #76]	; (18bb8 <vTraceEnable+0x60>)
   18b6c:	4798      	blx	r3
   18b6e:	e00e      	b.n	18b8e <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18b70:	687b      	ldr	r3, [r7, #4]
   18b72:	2b02      	cmp	r3, #2
   18b74:	d104      	bne.n	18b80 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18b76:	4b11      	ldr	r3, [pc, #68]	; (18bbc <vTraceEnable+0x64>)
   18b78:	0018      	movs	r0, r3
   18b7a:	4b11      	ldr	r3, [pc, #68]	; (18bc0 <vTraceEnable+0x68>)
   18b7c:	4798      	blx	r3
   18b7e:	e006      	b.n	18b8e <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18b80:	687b      	ldr	r3, [r7, #4]
   18b82:	2b00      	cmp	r3, #0
   18b84:	d003      	beq.n	18b8e <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18b86:	4b0f      	ldr	r3, [pc, #60]	; (18bc4 <vTraceEnable+0x6c>)
   18b88:	0018      	movs	r0, r3
   18b8a:	4b0d      	ldr	r3, [pc, #52]	; (18bc0 <vTraceEnable+0x68>)
   18b8c:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18b8e:	4b0e      	ldr	r3, [pc, #56]	; (18bc8 <vTraceEnable+0x70>)
   18b90:	681b      	ldr	r3, [r3, #0]
   18b92:	2b00      	cmp	r3, #0
   18b94:	d10a      	bne.n	18bac <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18b96:	2396      	movs	r3, #150	; 0x96
   18b98:	005a      	lsls	r2, r3, #1
   18b9a:	490c      	ldr	r1, [pc, #48]	; (18bcc <vTraceEnable+0x74>)
   18b9c:	480c      	ldr	r0, [pc, #48]	; (18bd0 <vTraceEnable+0x78>)
   18b9e:	4b0a      	ldr	r3, [pc, #40]	; (18bc8 <vTraceEnable+0x70>)
   18ba0:	9301      	str	r3, [sp, #4]
   18ba2:	2304      	movs	r3, #4
   18ba4:	9300      	str	r3, [sp, #0]
   18ba6:	2300      	movs	r3, #0
   18ba8:	4c0a      	ldr	r4, [pc, #40]	; (18bd4 <vTraceEnable+0x7c>)
   18baa:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18bac:	46c0      	nop			; (mov r8, r8)
   18bae:	46bd      	mov	sp, r7
   18bb0:	b003      	add	sp, #12
   18bb2:	bd90      	pop	{r4, r7, pc}
   18bb4:	00019a9d 	.word	0x00019a9d
   18bb8:	00018ff5 	.word	0x00018ff5
   18bbc:	000395f4 	.word	0x000395f4
   18bc0:	0001a145 	.word	0x0001a145
   18bc4:	00039634 	.word	0x00039634
   18bc8:	20000cec 	.word	0x20000cec
   18bcc:	00039668 	.word	0x00039668
   18bd0:	00018bd9 	.word	0x00018bd9
   18bd4:	0001c505 	.word	0x0001c505

00018bd8 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18bd8:	b580      	push	{r7, lr}
   18bda:	b082      	sub	sp, #8
   18bdc:	af00      	add	r7, sp, #0
   18bde:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18be0:	4b04      	ldr	r3, [pc, #16]	; (18bf4 <TzCtrl+0x1c>)
   18be2:	4798      	blx	r3
   18be4:	1e03      	subs	r3, r0, #0
   18be6:	d001      	beq.n	18bec <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18be8:	4b03      	ldr	r3, [pc, #12]	; (18bf8 <TzCtrl+0x20>)
   18bea:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18bec:	2004      	movs	r0, #4
   18bee:	4b03      	ldr	r3, [pc, #12]	; (18bfc <TzCtrl+0x24>)
   18bf0:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18bf2:	e7f5      	b.n	18be0 <TzCtrl+0x8>
   18bf4:	00019039 	.word	0x00019039
   18bf8:	00018a75 	.word	0x00018a75
   18bfc:	0001c8a1 	.word	0x0001c8a1

00018c00 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18c00:	b580      	push	{r7, lr}
   18c02:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18c04:	4b60      	ldr	r3, [pc, #384]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c06:	681b      	ldr	r3, [r3, #0]
   18c08:	2209      	movs	r2, #9
   18c0a:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18c0c:	4b5e      	ldr	r3, [pc, #376]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c0e:	681b      	ldr	r3, [r3, #0]
   18c10:	2264      	movs	r2, #100	; 0x64
   18c12:	210a      	movs	r1, #10
   18c14:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18c16:	4b5c      	ldr	r3, [pc, #368]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c18:	681b      	ldr	r3, [r3, #0]
   18c1a:	2265      	movs	r2, #101	; 0x65
   18c1c:	210a      	movs	r1, #10
   18c1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18c20:	4b59      	ldr	r3, [pc, #356]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c22:	681b      	ldr	r3, [r3, #0]
   18c24:	2266      	movs	r2, #102	; 0x66
   18c26:	210a      	movs	r1, #10
   18c28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18c2a:	4b57      	ldr	r3, [pc, #348]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c2c:	681b      	ldr	r3, [r3, #0]
   18c2e:	2267      	movs	r2, #103	; 0x67
   18c30:	210f      	movs	r1, #15
   18c32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18c34:	4b54      	ldr	r3, [pc, #336]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c36:	681b      	ldr	r3, [r3, #0]
   18c38:	2268      	movs	r2, #104	; 0x68
   18c3a:	2105      	movs	r1, #5
   18c3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18c3e:	4b52      	ldr	r3, [pc, #328]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c40:	681b      	ldr	r3, [r3, #0]
   18c42:	2269      	movs	r2, #105	; 0x69
   18c44:	2105      	movs	r1, #5
   18c46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18c48:	4b4f      	ldr	r3, [pc, #316]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c4a:	681b      	ldr	r3, [r3, #0]
   18c4c:	226a      	movs	r2, #106	; 0x6a
   18c4e:	2105      	movs	r1, #5
   18c50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18c52:	4b4d      	ldr	r3, [pc, #308]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c54:	681b      	ldr	r3, [r3, #0]
   18c56:	226b      	movs	r2, #107	; 0x6b
   18c58:	2105      	movs	r1, #5
   18c5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   18c5c:	4b4a      	ldr	r3, [pc, #296]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c5e:	681b      	ldr	r3, [r3, #0]
   18c60:	226c      	movs	r2, #108	; 0x6c
   18c62:	2105      	movs	r1, #5
   18c64:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   18c66:	4b48      	ldr	r3, [pc, #288]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c68:	681b      	ldr	r3, [r3, #0]
   18c6a:	2270      	movs	r2, #112	; 0x70
   18c6c:	210f      	movs	r1, #15
   18c6e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18c70:	4b45      	ldr	r3, [pc, #276]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c72:	681b      	ldr	r3, [r3, #0]
   18c74:	2271      	movs	r2, #113	; 0x71
   18c76:	210f      	movs	r1, #15
   18c78:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   18c7a:	4b43      	ldr	r3, [pc, #268]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c7c:	681b      	ldr	r3, [r3, #0]
   18c7e:	2272      	movs	r2, #114	; 0x72
   18c80:	210f      	movs	r1, #15
   18c82:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18c84:	4b40      	ldr	r3, [pc, #256]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c86:	681b      	ldr	r3, [r3, #0]
   18c88:	2273      	movs	r2, #115	; 0x73
   18c8a:	210f      	movs	r1, #15
   18c8c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   18c8e:	4b3e      	ldr	r3, [pc, #248]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c90:	681b      	ldr	r3, [r3, #0]
   18c92:	2274      	movs	r2, #116	; 0x74
   18c94:	210f      	movs	r1, #15
   18c96:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   18c98:	4b3b      	ldr	r3, [pc, #236]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18c9a:	681b      	ldr	r3, [r3, #0]
   18c9c:	2275      	movs	r2, #117	; 0x75
   18c9e:	210f      	movs	r1, #15
   18ca0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   18ca2:	4b39      	ldr	r3, [pc, #228]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18ca4:	681b      	ldr	r3, [r3, #0]
   18ca6:	2276      	movs	r2, #118	; 0x76
   18ca8:	210f      	movs	r1, #15
   18caa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18cac:	4b36      	ldr	r3, [pc, #216]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cae:	681b      	ldr	r3, [r3, #0]
   18cb0:	2277      	movs	r2, #119	; 0x77
   18cb2:	210f      	movs	r1, #15
   18cb4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   18cb6:	4b34      	ldr	r3, [pc, #208]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cb8:	681b      	ldr	r3, [r3, #0]
   18cba:	2278      	movs	r2, #120	; 0x78
   18cbc:	210f      	movs	r1, #15
   18cbe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18cc0:	4b31      	ldr	r3, [pc, #196]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cc2:	681b      	ldr	r3, [r3, #0]
   18cc4:	227c      	movs	r2, #124	; 0x7c
   18cc6:	2110      	movs	r1, #16
   18cc8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18cca:	4b2f      	ldr	r3, [pc, #188]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18ccc:	681b      	ldr	r3, [r3, #0]
   18cce:	227d      	movs	r2, #125	; 0x7d
   18cd0:	2110      	movs	r1, #16
   18cd2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   18cd4:	4b2c      	ldr	r3, [pc, #176]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cd6:	681b      	ldr	r3, [r3, #0]
   18cd8:	227e      	movs	r2, #126	; 0x7e
   18cda:	2110      	movs	r1, #16
   18cdc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18cde:	4b2a      	ldr	r3, [pc, #168]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18ce0:	681b      	ldr	r3, [r3, #0]
   18ce2:	227f      	movs	r2, #127	; 0x7f
   18ce4:	2113      	movs	r1, #19
   18ce6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18ce8:	4b27      	ldr	r3, [pc, #156]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cea:	681b      	ldr	r3, [r3, #0]
   18cec:	2280      	movs	r2, #128	; 0x80
   18cee:	2111      	movs	r1, #17
   18cf0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   18cf2:	4b25      	ldr	r3, [pc, #148]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cf4:	681b      	ldr	r3, [r3, #0]
   18cf6:	2281      	movs	r2, #129	; 0x81
   18cf8:	2110      	movs	r1, #16
   18cfa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18cfc:	4b22      	ldr	r3, [pc, #136]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18cfe:	681b      	ldr	r3, [r3, #0]
   18d00:	2282      	movs	r2, #130	; 0x82
   18d02:	2113      	movs	r1, #19
   18d04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   18d06:	4b20      	ldr	r3, [pc, #128]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d08:	681b      	ldr	r3, [r3, #0]
   18d0a:	2283      	movs	r2, #131	; 0x83
   18d0c:	2113      	movs	r1, #19
   18d0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18d10:	4b1d      	ldr	r3, [pc, #116]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d12:	681b      	ldr	r3, [r3, #0]
   18d14:	2284      	movs	r2, #132	; 0x84
   18d16:	2113      	movs	r1, #19
   18d18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   18d1a:	4b1b      	ldr	r3, [pc, #108]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d1c:	681b      	ldr	r3, [r3, #0]
   18d1e:	2288      	movs	r2, #136	; 0x88
   18d20:	2100      	movs	r1, #0
   18d22:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18d24:	4b18      	ldr	r3, [pc, #96]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d26:	681b      	ldr	r3, [r3, #0]
   18d28:	228a      	movs	r2, #138	; 0x8a
   18d2a:	21a0      	movs	r1, #160	; 0xa0
   18d2c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18d2e:	4b16      	ldr	r3, [pc, #88]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d30:	681b      	ldr	r3, [r3, #0]
   18d32:	228c      	movs	r2, #140	; 0x8c
   18d34:	21a0      	movs	r1, #160	; 0xa0
   18d36:	0049      	lsls	r1, r1, #1
   18d38:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   18d3a:	4b13      	ldr	r3, [pc, #76]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d3c:	681b      	ldr	r3, [r3, #0]
   18d3e:	228e      	movs	r2, #142	; 0x8e
   18d40:	21f0      	movs	r1, #240	; 0xf0
   18d42:	0049      	lsls	r1, r1, #1
   18d44:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   18d46:	4b10      	ldr	r3, [pc, #64]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d48:	681b      	ldr	r3, [r3, #0]
   18d4a:	2290      	movs	r2, #144	; 0x90
   18d4c:	490f      	ldr	r1, [pc, #60]	; (18d8c <vTraceInitObjectPropertyTable+0x18c>)
   18d4e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18d50:	4b0d      	ldr	r3, [pc, #52]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	2292      	movs	r2, #146	; 0x92
   18d56:	490e      	ldr	r1, [pc, #56]	; (18d90 <vTraceInitObjectPropertyTable+0x190>)
   18d58:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   18d5a:	4b0b      	ldr	r3, [pc, #44]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d5c:	681b      	ldr	r3, [r3, #0]
   18d5e:	2294      	movs	r2, #148	; 0x94
   18d60:	490c      	ldr	r1, [pc, #48]	; (18d94 <vTraceInitObjectPropertyTable+0x194>)
   18d62:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18d64:	4b08      	ldr	r3, [pc, #32]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d66:	681b      	ldr	r3, [r3, #0]
   18d68:	2296      	movs	r2, #150	; 0x96
   18d6a:	490b      	ldr	r1, [pc, #44]	; (18d98 <vTraceInitObjectPropertyTable+0x198>)
   18d6c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18d6e:	4b06      	ldr	r3, [pc, #24]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d70:	681b      	ldr	r3, [r3, #0]
   18d72:	2298      	movs	r2, #152	; 0x98
   18d74:	218c      	movs	r1, #140	; 0x8c
   18d76:	00c9      	lsls	r1, r1, #3
   18d78:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   18d7a:	4b03      	ldr	r3, [pc, #12]	; (18d88 <vTraceInitObjectPropertyTable+0x188>)
   18d7c:	681b      	ldr	r3, [r3, #0]
   18d7e:	4a07      	ldr	r2, [pc, #28]	; (18d9c <vTraceInitObjectPropertyTable+0x19c>)
   18d80:	661a      	str	r2, [r3, #96]	; 0x60
}
   18d82:	46c0      	nop			; (mov r8, r8)
   18d84:	46bd      	mov	sp, r7
   18d86:	bd80      	pop	{r7, pc}
   18d88:	20000e04 	.word	0x20000e04
   18d8c:	000002fd 	.word	0x000002fd
   18d90:	00000352 	.word	0x00000352
   18d94:	000003a2 	.word	0x000003a2
   18d98:	00000401 	.word	0x00000401
   18d9c:	000004bf 	.word	0x000004bf

00018da0 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18da0:	b580      	push	{r7, lr}
   18da2:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18da4:	4b2e      	ldr	r3, [pc, #184]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18da6:	2200      	movs	r2, #0
   18da8:	825a      	strh	r2, [r3, #18]
   18daa:	4b2d      	ldr	r3, [pc, #180]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dac:	8a5a      	ldrh	r2, [r3, #18]
   18dae:	4b2c      	ldr	r3, [pc, #176]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18db0:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   18db2:	4b2b      	ldr	r3, [pc, #172]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18db4:	220a      	movs	r2, #10
   18db6:	829a      	strh	r2, [r3, #20]
   18db8:	4b29      	ldr	r3, [pc, #164]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dba:	8a9a      	ldrh	r2, [r3, #20]
   18dbc:	4b28      	ldr	r3, [pc, #160]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dbe:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18dc0:	4b27      	ldr	r3, [pc, #156]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dc2:	2214      	movs	r2, #20
   18dc4:	82da      	strh	r2, [r3, #22]
   18dc6:	4b26      	ldr	r3, [pc, #152]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dc8:	8ada      	ldrh	r2, [r3, #22]
   18dca:	4b25      	ldr	r3, [pc, #148]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dcc:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18dce:	4b24      	ldr	r3, [pc, #144]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dd0:	221e      	movs	r2, #30
   18dd2:	831a      	strh	r2, [r3, #24]
   18dd4:	4b22      	ldr	r3, [pc, #136]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dd6:	8b1a      	ldrh	r2, [r3, #24]
   18dd8:	4b21      	ldr	r3, [pc, #132]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dda:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18ddc:	4b20      	ldr	r3, [pc, #128]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dde:	222d      	movs	r2, #45	; 0x2d
   18de0:	835a      	strh	r2, [r3, #26]
   18de2:	4b1f      	ldr	r3, [pc, #124]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18de4:	8b5a      	ldrh	r2, [r3, #26]
   18de6:	4b1e      	ldr	r3, [pc, #120]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18de8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18dea:	4b1d      	ldr	r3, [pc, #116]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dec:	2232      	movs	r2, #50	; 0x32
   18dee:	839a      	strh	r2, [r3, #28]
   18df0:	4b1b      	ldr	r3, [pc, #108]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18df2:	8b9a      	ldrh	r2, [r3, #28]
   18df4:	4b1a      	ldr	r3, [pc, #104]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18df6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18df8:	4b19      	ldr	r3, [pc, #100]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18dfa:	2237      	movs	r2, #55	; 0x37
   18dfc:	83da      	strh	r2, [r3, #30]
   18dfe:	4b18      	ldr	r3, [pc, #96]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e00:	8bda      	ldrh	r2, [r3, #30]
   18e02:	4b17      	ldr	r3, [pc, #92]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e04:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   18e06:	4b16      	ldr	r3, [pc, #88]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e08:	223c      	movs	r2, #60	; 0x3c
   18e0a:	841a      	strh	r2, [r3, #32]
   18e0c:	4b14      	ldr	r3, [pc, #80]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e0e:	8c1a      	ldrh	r2, [r3, #32]
   18e10:	4b13      	ldr	r3, [pc, #76]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e12:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18e14:	4b12      	ldr	r3, [pc, #72]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e16:	2241      	movs	r2, #65	; 0x41
   18e18:	845a      	strh	r2, [r3, #34]	; 0x22
   18e1a:	4b11      	ldr	r3, [pc, #68]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e1c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18e1e:	4b10      	ldr	r3, [pc, #64]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e20:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18e22:	4b0f      	ldr	r3, [pc, #60]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e24:	2209      	movs	r2, #9
   18e26:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18e28:	4b0d      	ldr	r3, [pc, #52]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e2a:	2213      	movs	r2, #19
   18e2c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18e2e:	4b0c      	ldr	r3, [pc, #48]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e30:	221d      	movs	r2, #29
   18e32:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18e34:	4b0a      	ldr	r3, [pc, #40]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e36:	222c      	movs	r2, #44	; 0x2c
   18e38:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   18e3a:	4b09      	ldr	r3, [pc, #36]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e3c:	2231      	movs	r2, #49	; 0x31
   18e3e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18e40:	4b07      	ldr	r3, [pc, #28]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e42:	2236      	movs	r2, #54	; 0x36
   18e44:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   18e46:	4b06      	ldr	r3, [pc, #24]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e48:	223b      	movs	r2, #59	; 0x3b
   18e4a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18e4c:	4b04      	ldr	r3, [pc, #16]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e4e:	2240      	movs	r2, #64	; 0x40
   18e50:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18e52:	4b03      	ldr	r3, [pc, #12]	; (18e60 <vTraceInitObjectHandleStack+0xc0>)
   18e54:	2245      	movs	r2, #69	; 0x45
   18e56:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18e58:	46c0      	nop			; (mov r8, r8)
   18e5a:	46bd      	mov	sp, r7
   18e5c:	bd80      	pop	{r7, pc}
   18e5e:	46c0      	nop			; (mov r8, r8)
   18e60:	20000d74 	.word	0x20000d74

00018e64 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18e64:	b580      	push	{r7, lr}
   18e66:	b082      	sub	sp, #8
   18e68:	af00      	add	r7, sp, #0
   18e6a:	0002      	movs	r2, r0
   18e6c:	1dfb      	adds	r3, r7, #7
   18e6e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18e70:	1dfb      	adds	r3, r7, #7
   18e72:	781b      	ldrb	r3, [r3, #0]
   18e74:	2b08      	cmp	r3, #8
   18e76:	d816      	bhi.n	18ea6 <pszTraceGetErrorNotEnoughHandles+0x42>
   18e78:	009a      	lsls	r2, r3, #2
   18e7a:	4b0d      	ldr	r3, [pc, #52]	; (18eb0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18e7c:	18d3      	adds	r3, r2, r3
   18e7e:	681b      	ldr	r3, [r3, #0]
   18e80:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18e82:	4b0c      	ldr	r3, [pc, #48]	; (18eb4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   18e84:	e010      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   18e86:	4b0c      	ldr	r3, [pc, #48]	; (18eb8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18e88:	e00e      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   18e8a:	4b0c      	ldr	r3, [pc, #48]	; (18ebc <pszTraceGetErrorNotEnoughHandles+0x58>)
   18e8c:	e00c      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   18e8e:	4b0c      	ldr	r3, [pc, #48]	; (18ec0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18e90:	e00a      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   18e92:	4b0c      	ldr	r3, [pc, #48]	; (18ec4 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18e94:	e008      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18e96:	4b0c      	ldr	r3, [pc, #48]	; (18ec8 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18e98:	e006      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18e9a:	4b0c      	ldr	r3, [pc, #48]	; (18ecc <pszTraceGetErrorNotEnoughHandles+0x68>)
   18e9c:	e004      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   18e9e:	4b0c      	ldr	r3, [pc, #48]	; (18ed0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18ea0:	e002      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   18ea2:	4b0c      	ldr	r3, [pc, #48]	; (18ed4 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18ea4:	e000      	b.n	18ea8 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18ea6:	4b0c      	ldr	r3, [pc, #48]	; (18ed8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18ea8:	0018      	movs	r0, r3
   18eaa:	46bd      	mov	sp, r7
   18eac:	b002      	add	sp, #8
   18eae:	bd80      	pop	{r7, pc}
   18eb0:	00039970 	.word	0x00039970
   18eb4:	00039670 	.word	0x00039670
   18eb8:	000396b8 	.word	0x000396b8
   18ebc:	00039700 	.word	0x00039700
   18ec0:	00039754 	.word	0x00039754
   18ec4:	000397a0 	.word	0x000397a0
   18ec8:	000397ec 	.word	0x000397ec
   18ecc:	00039838 	.word	0x00039838
   18ed0:	0003988c 	.word	0x0003988c
   18ed4:	000398e4 	.word	0x000398e4
   18ed8:	00039940 	.word	0x00039940

00018edc <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18edc:	b590      	push	{r4, r7, lr}
   18ede:	b087      	sub	sp, #28
   18ee0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   18ee2:	2317      	movs	r3, #23
   18ee4:	18fb      	adds	r3, r7, r3
   18ee6:	2200      	movs	r2, #0
   18ee8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18eea:	4b36      	ldr	r3, [pc, #216]	; (18fc4 <uiTraceStart+0xe8>)
   18eec:	681b      	ldr	r3, [r3, #0]
   18eee:	2b00      	cmp	r3, #0
   18ef0:	d10b      	bne.n	18f0a <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   18ef2:	4b34      	ldr	r3, [pc, #208]	; (18fc4 <uiTraceStart+0xe8>)
   18ef4:	681b      	ldr	r3, [r3, #0]
   18ef6:	2b00      	cmp	r3, #0
   18ef8:	d105      	bne.n	18f06 <uiTraceStart+0x2a>
   18efa:	4b33      	ldr	r3, [pc, #204]	; (18fc8 <uiTraceStart+0xec>)
   18efc:	0018      	movs	r0, r3
   18efe:	4b33      	ldr	r3, [pc, #204]	; (18fcc <uiTraceStart+0xf0>)
   18f00:	4798      	blx	r3
   18f02:	2300      	movs	r3, #0
   18f04:	e059      	b.n	18fba <uiTraceStart+0xde>
		return 0;
   18f06:	2300      	movs	r3, #0
   18f08:	e057      	b.n	18fba <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18f0a:	4b2e      	ldr	r3, [pc, #184]	; (18fc4 <uiTraceStart+0xe8>)
   18f0c:	681b      	ldr	r3, [r3, #0]
   18f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f10:	2b01      	cmp	r3, #1
   18f12:	d101      	bne.n	18f18 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18f14:	2301      	movs	r3, #1
   18f16:	e050      	b.n	18fba <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18f18:	4b2d      	ldr	r3, [pc, #180]	; (18fd0 <uiTraceStart+0xf4>)
   18f1a:	681b      	ldr	r3, [r3, #0]
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d149      	bne.n	18fb4 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18f20:	f3ef 8310 	mrs	r3, PRIMASK
   18f24:	60bb      	str	r3, [r7, #8]
  return(result);
   18f26:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18f28:	613b      	str	r3, [r7, #16]
   18f2a:	2301      	movs	r3, #1
   18f2c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18f2e:	68fb      	ldr	r3, [r7, #12]
   18f30:	f383 8810 	msr	PRIMASK, r3
   18f34:	4b27      	ldr	r3, [pc, #156]	; (18fd4 <uiTraceStart+0xf8>)
   18f36:	681b      	ldr	r3, [r3, #0]
   18f38:	1c5a      	adds	r2, r3, #1
   18f3a:	4b26      	ldr	r3, [pc, #152]	; (18fd4 <uiTraceStart+0xf8>)
   18f3c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18f3e:	4b21      	ldr	r3, [pc, #132]	; (18fc4 <uiTraceStart+0xe8>)
   18f40:	681b      	ldr	r3, [r3, #0]
   18f42:	2201      	movs	r2, #1
   18f44:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18f46:	4b24      	ldr	r3, [pc, #144]	; (18fd8 <uiTraceStart+0xfc>)
   18f48:	4798      	blx	r3
   18f4a:	0003      	movs	r3, r0
   18f4c:	0018      	movs	r0, r3
   18f4e:	4b23      	ldr	r3, [pc, #140]	; (18fdc <uiTraceStart+0x100>)
   18f50:	4798      	blx	r3
   18f52:	0003      	movs	r3, r0
   18f54:	001a      	movs	r2, r3
   18f56:	2317      	movs	r3, #23
   18f58:	18fb      	adds	r3, r7, r3
   18f5a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18f5c:	2317      	movs	r3, #23
   18f5e:	18fb      	adds	r3, r7, r3
   18f60:	781b      	ldrb	r3, [r3, #0]
   18f62:	2b00      	cmp	r3, #0
   18f64:	d116      	bne.n	18f94 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18f66:	2317      	movs	r3, #23
   18f68:	18fc      	adds	r4, r7, r3
   18f6a:	2003      	movs	r0, #3
   18f6c:	4b1c      	ldr	r3, [pc, #112]	; (18fe0 <uiTraceStart+0x104>)
   18f6e:	4798      	blx	r3
   18f70:	0003      	movs	r3, r0
   18f72:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18f74:	4a1b      	ldr	r2, [pc, #108]	; (18fe4 <uiTraceStart+0x108>)
   18f76:	2317      	movs	r3, #23
   18f78:	18fb      	adds	r3, r7, r3
   18f7a:	781b      	ldrb	r3, [r3, #0]
   18f7c:	0019      	movs	r1, r3
   18f7e:	2003      	movs	r0, #3
   18f80:	4b19      	ldr	r3, [pc, #100]	; (18fe8 <uiTraceStart+0x10c>)
   18f82:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18f84:	2317      	movs	r3, #23
   18f86:	18fb      	adds	r3, r7, r3
   18f88:	781b      	ldrb	r3, [r3, #0]
   18f8a:	2200      	movs	r2, #0
   18f8c:	0019      	movs	r1, r3
   18f8e:	2003      	movs	r0, #3
   18f90:	4b16      	ldr	r3, [pc, #88]	; (18fec <uiTraceStart+0x110>)
   18f92:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18f94:	2317      	movs	r3, #23
   18f96:	18fb      	adds	r3, r7, r3
   18f98:	781b      	ldrb	r3, [r3, #0]
   18f9a:	0018      	movs	r0, r3
   18f9c:	4b14      	ldr	r3, [pc, #80]	; (18ff0 <uiTraceStart+0x114>)
   18f9e:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18fa0:	4b0c      	ldr	r3, [pc, #48]	; (18fd4 <uiTraceStart+0xf8>)
   18fa2:	681b      	ldr	r3, [r3, #0]
   18fa4:	1e5a      	subs	r2, r3, #1
   18fa6:	4b0b      	ldr	r3, [pc, #44]	; (18fd4 <uiTraceStart+0xf8>)
   18fa8:	601a      	str	r2, [r3, #0]
   18faa:	693b      	ldr	r3, [r7, #16]
   18fac:	607b      	str	r3, [r7, #4]
   18fae:	687b      	ldr	r3, [r7, #4]
   18fb0:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18fb4:	4b03      	ldr	r3, [pc, #12]	; (18fc4 <uiTraceStart+0xe8>)
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18fba:	0018      	movs	r0, r3
   18fbc:	46bd      	mov	sp, r7
   18fbe:	b007      	add	sp, #28
   18fc0:	bd90      	pop	{r4, r7, pc}
   18fc2:	46c0      	nop			; (mov r8, r8)
   18fc4:	20000e04 	.word	0x20000e04
   18fc8:	00039994 	.word	0x00039994
   18fcc:	0001a145 	.word	0x0001a145
   18fd0:	20000d64 	.word	0x20000d64
   18fd4:	20000d5c 	.word	0x20000d5c
   18fd8:	00018b45 	.word	0x00018b45
   18fdc:	00018889 	.word	0x00018889
   18fe0:	00019e29 	.word	0x00019e29
   18fe4:	000399d8 	.word	0x000399d8
   18fe8:	0001a059 	.word	0x0001a059
   18fec:	000197bd 	.word	0x000197bd
   18ff0:	000196a5 	.word	0x000196a5

00018ff4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18ff4:	b580      	push	{r7, lr}
   18ff6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18ff8:	4b02      	ldr	r3, [pc, #8]	; (19004 <vTraceStart+0x10>)
   18ffa:	4798      	blx	r3
}
   18ffc:	46c0      	nop			; (mov r8, r8)
   18ffe:	46bd      	mov	sp, r7
   19000:	bd80      	pop	{r7, pc}
   19002:	46c0      	nop			; (mov r8, r8)
   19004:	00018edd 	.word	0x00018edd

00019008 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   19008:	b580      	push	{r7, lr}
   1900a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1900c:	4b08      	ldr	r3, [pc, #32]	; (19030 <vTraceStop+0x28>)
   1900e:	681b      	ldr	r3, [r3, #0]
   19010:	2b00      	cmp	r3, #0
   19012:	d003      	beq.n	1901c <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   19014:	4b06      	ldr	r3, [pc, #24]	; (19030 <vTraceStop+0x28>)
   19016:	681b      	ldr	r3, [r3, #0]
   19018:	2200      	movs	r2, #0
   1901a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1901c:	4b05      	ldr	r3, [pc, #20]	; (19034 <vTraceStop+0x2c>)
   1901e:	681b      	ldr	r3, [r3, #0]
   19020:	2b00      	cmp	r3, #0
   19022:	d002      	beq.n	1902a <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   19024:	4b03      	ldr	r3, [pc, #12]	; (19034 <vTraceStop+0x2c>)
   19026:	681b      	ldr	r3, [r3, #0]
   19028:	4798      	blx	r3
	}
}
   1902a:	46c0      	nop			; (mov r8, r8)
   1902c:	46bd      	mov	sp, r7
   1902e:	bd80      	pop	{r7, pc}
   19030:	20000e04 	.word	0x20000e04
   19034:	20000d6c 	.word	0x20000d6c

00019038 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   19038:	b580      	push	{r7, lr}
   1903a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1903c:	4b05      	ldr	r3, [pc, #20]	; (19054 <xTraceIsRecordingEnabled+0x1c>)
   1903e:	681b      	ldr	r3, [r3, #0]
   19040:	2b00      	cmp	r3, #0
   19042:	d003      	beq.n	1904c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   19044:	4b03      	ldr	r3, [pc, #12]	; (19054 <xTraceIsRecordingEnabled+0x1c>)
   19046:	681b      	ldr	r3, [r3, #0]
   19048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1904a:	e000      	b.n	1904e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1904c:	2300      	movs	r3, #0
	}
}
   1904e:	0018      	movs	r0, r3
   19050:	46bd      	mov	sp, r7
   19052:	bd80      	pop	{r7, pc}
   19054:	20000e04 	.word	0x20000e04

00019058 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19058:	b590      	push	{r4, r7, lr}
   1905a:	b089      	sub	sp, #36	; 0x24
   1905c:	af00      	add	r7, sp, #0
   1905e:	0002      	movs	r2, r0
   19060:	1dfb      	adds	r3, r7, #7
   19062:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   19064:	1dfb      	adds	r3, r7, #7
   19066:	781b      	ldrb	r3, [r3, #0]
   19068:	2b00      	cmp	r3, #0
   1906a:	d057      	beq.n	1911c <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1906c:	4b2e      	ldr	r3, [pc, #184]	; (19128 <prvTraceStoreTaskReady+0xd0>)
   1906e:	681b      	ldr	r3, [r3, #0]
   19070:	2b00      	cmp	r3, #0
   19072:	d055      	beq.n	19120 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   19074:	1dfb      	adds	r3, r7, #7
   19076:	781b      	ldrb	r3, [r3, #0]
   19078:	2b0f      	cmp	r3, #15
   1907a:	d904      	bls.n	19086 <prvTraceStoreTaskReady+0x2e>
   1907c:	4b2b      	ldr	r3, [pc, #172]	; (1912c <prvTraceStoreTaskReady+0xd4>)
   1907e:	0018      	movs	r0, r3
   19080:	4b2b      	ldr	r3, [pc, #172]	; (19130 <prvTraceStoreTaskReady+0xd8>)
   19082:	4798      	blx	r3
   19084:	e04d      	b.n	19122 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   19086:	4b2b      	ldr	r3, [pc, #172]	; (19134 <prvTraceStoreTaskReady+0xdc>)
   19088:	681b      	ldr	r3, [r3, #0]
   1908a:	2b00      	cmp	r3, #0
   1908c:	d004      	beq.n	19098 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1908e:	4b2a      	ldr	r3, [pc, #168]	; (19138 <prvTraceStoreTaskReady+0xe0>)
   19090:	0018      	movs	r0, r3
   19092:	4b27      	ldr	r3, [pc, #156]	; (19130 <prvTraceStoreTaskReady+0xd8>)
   19094:	4798      	blx	r3
		return;
   19096:	e044      	b.n	19122 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19098:	f3ef 8310 	mrs	r3, PRIMASK
   1909c:	60fb      	str	r3, [r7, #12]
  return(result);
   1909e:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   190a0:	61fb      	str	r3, [r7, #28]
   190a2:	2301      	movs	r3, #1
   190a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   190a6:	693b      	ldr	r3, [r7, #16]
   190a8:	f383 8810 	msr	PRIMASK, r3
   190ac:	4b21      	ldr	r3, [pc, #132]	; (19134 <prvTraceStoreTaskReady+0xdc>)
   190ae:	681b      	ldr	r3, [r3, #0]
   190b0:	1c5a      	adds	r2, r3, #1
   190b2:	4b20      	ldr	r3, [pc, #128]	; (19134 <prvTraceStoreTaskReady+0xdc>)
   190b4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   190b6:	4b21      	ldr	r3, [pc, #132]	; (1913c <prvTraceStoreTaskReady+0xe4>)
   190b8:	681b      	ldr	r3, [r3, #0]
   190ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   190bc:	2b00      	cmp	r3, #0
   190be:	d022      	beq.n	19106 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   190c0:	231a      	movs	r3, #26
   190c2:	18fc      	adds	r4, r7, r3
   190c4:	4b1e      	ldr	r3, [pc, #120]	; (19140 <prvTraceStoreTaskReady+0xe8>)
   190c6:	0018      	movs	r0, r3
   190c8:	4b1e      	ldr	r3, [pc, #120]	; (19144 <prvTraceStoreTaskReady+0xec>)
   190ca:	4798      	blx	r3
   190cc:	0003      	movs	r3, r0
   190ce:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   190d0:	2319      	movs	r3, #25
   190d2:	18fb      	adds	r3, r7, r3
   190d4:	1dfa      	adds	r2, r7, #7
   190d6:	7812      	ldrb	r2, [r2, #0]
   190d8:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   190da:	4b1b      	ldr	r3, [pc, #108]	; (19148 <prvTraceStoreTaskReady+0xf0>)
   190dc:	4798      	blx	r3
   190de:	0003      	movs	r3, r0
   190e0:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   190e2:	697b      	ldr	r3, [r7, #20]
   190e4:	2b00      	cmp	r3, #0
   190e6:	d00e      	beq.n	19106 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   190e8:	697b      	ldr	r3, [r7, #20]
   190ea:	2202      	movs	r2, #2
   190ec:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   190ee:	697b      	ldr	r3, [r7, #20]
   190f0:	221a      	movs	r2, #26
   190f2:	18ba      	adds	r2, r7, r2
   190f4:	8812      	ldrh	r2, [r2, #0]
   190f6:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   190f8:	697b      	ldr	r3, [r7, #20]
   190fa:	2219      	movs	r2, #25
   190fc:	18ba      	adds	r2, r7, r2
   190fe:	7812      	ldrb	r2, [r2, #0]
   19100:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19102:	4b12      	ldr	r3, [pc, #72]	; (1914c <prvTraceStoreTaskReady+0xf4>)
   19104:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19106:	4b0b      	ldr	r3, [pc, #44]	; (19134 <prvTraceStoreTaskReady+0xdc>)
   19108:	681b      	ldr	r3, [r3, #0]
   1910a:	1e5a      	subs	r2, r3, #1
   1910c:	4b09      	ldr	r3, [pc, #36]	; (19134 <prvTraceStoreTaskReady+0xdc>)
   1910e:	601a      	str	r2, [r3, #0]
   19110:	69fb      	ldr	r3, [r7, #28]
   19112:	60bb      	str	r3, [r7, #8]
   19114:	68bb      	ldr	r3, [r7, #8]
   19116:	f383 8810 	msr	PRIMASK, r3
   1911a:	e002      	b.n	19122 <prvTraceStoreTaskReady+0xca>
		return;
   1911c:	46c0      	nop			; (mov r8, r8)
   1911e:	e000      	b.n	19122 <prvTraceStoreTaskReady+0xca>
		return;
   19120:	46c0      	nop			; (mov r8, r8)
}
   19122:	46bd      	mov	sp, r7
   19124:	b009      	add	sp, #36	; 0x24
   19126:	bd90      	pop	{r4, r7, pc}
   19128:	2000010c 	.word	0x2000010c
   1912c:	00039d40 	.word	0x00039d40
   19130:	0001a145 	.word	0x0001a145
   19134:	20000d5c 	.word	0x20000d5c
   19138:	00039d80 	.word	0x00039d80
   1913c:	20000e04 	.word	0x20000e04
   19140:	0000ffff 	.word	0x0000ffff
   19144:	0001a359 	.word	0x0001a359
   19148:	00019cfd 	.word	0x00019cfd
   1914c:	0001a301 	.word	0x0001a301

00019150 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   19150:	b580      	push	{r7, lr}
   19152:	b08e      	sub	sp, #56	; 0x38
   19154:	af00      	add	r7, sp, #0
   19156:	60f8      	str	r0, [r7, #12]
   19158:	60b9      	str	r1, [r7, #8]
   1915a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1915c:	4b48      	ldr	r3, [pc, #288]	; (19280 <vTraceStoreMemMangEvent+0x130>)
   1915e:	681b      	ldr	r3, [r3, #0]
   19160:	2b00      	cmp	r3, #0
   19162:	d100      	bne.n	19166 <vTraceStoreMemMangEvent+0x16>
   19164:	e088      	b.n	19278 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   19166:	687b      	ldr	r3, [r7, #4]
   19168:	2b00      	cmp	r3, #0
   1916a:	da03      	bge.n	19174 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1916c:	687b      	ldr	r3, [r7, #4]
   1916e:	425b      	negs	r3, r3
   19170:	637b      	str	r3, [r7, #52]	; 0x34
   19172:	e001      	b.n	19178 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   19174:	687b      	ldr	r3, [r7, #4]
   19176:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19178:	f3ef 8310 	mrs	r3, PRIMASK
   1917c:	61bb      	str	r3, [r7, #24]
  return(result);
   1917e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   19180:	633b      	str	r3, [r7, #48]	; 0x30
   19182:	2301      	movs	r3, #1
   19184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19186:	69fb      	ldr	r3, [r7, #28]
   19188:	f383 8810 	msr	PRIMASK, r3
   1918c:	4b3d      	ldr	r3, [pc, #244]	; (19284 <vTraceStoreMemMangEvent+0x134>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	1c5a      	adds	r2, r3, #1
   19192:	4b3c      	ldr	r3, [pc, #240]	; (19284 <vTraceStoreMemMangEvent+0x134>)
   19194:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   19196:	68bb      	ldr	r3, [r7, #8]
   19198:	2b00      	cmp	r3, #0
   1919a:	d005      	beq.n	191a8 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1919c:	4b3a      	ldr	r3, [pc, #232]	; (19288 <vTraceStoreMemMangEvent+0x138>)
   1919e:	681a      	ldr	r2, [r3, #0]
   191a0:	687b      	ldr	r3, [r7, #4]
   191a2:	18d2      	adds	r2, r2, r3
   191a4:	4b38      	ldr	r3, [pc, #224]	; (19288 <vTraceStoreMemMangEvent+0x138>)
   191a6:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   191a8:	4b35      	ldr	r3, [pc, #212]	; (19280 <vTraceStoreMemMangEvent+0x130>)
   191aa:	681b      	ldr	r3, [r3, #0]
   191ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   191ae:	2b00      	cmp	r3, #0
   191b0:	d057      	beq.n	19262 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   191b2:	20ff      	movs	r0, #255	; 0xff
   191b4:	4b35      	ldr	r3, [pc, #212]	; (1928c <vTraceStoreMemMangEvent+0x13c>)
   191b6:	4798      	blx	r3
   191b8:	0003      	movs	r3, r0
   191ba:	001a      	movs	r2, r3
   191bc:	232f      	movs	r3, #47	; 0x2f
   191be:	18fb      	adds	r3, r7, r3
   191c0:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   191c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   191c4:	4a32      	ldr	r2, [pc, #200]	; (19290 <vTraceStoreMemMangEvent+0x140>)
   191c6:	0019      	movs	r1, r3
   191c8:	0010      	movs	r0, r2
   191ca:	4b32      	ldr	r3, [pc, #200]	; (19294 <vTraceStoreMemMangEvent+0x144>)
   191cc:	4798      	blx	r3
   191ce:	0002      	movs	r2, r0
   191d0:	232c      	movs	r3, #44	; 0x2c
   191d2:	18fb      	adds	r3, r7, r3
   191d4:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   191d6:	4b30      	ldr	r3, [pc, #192]	; (19298 <vTraceStoreMemMangEvent+0x148>)
   191d8:	4798      	blx	r3
   191da:	0003      	movs	r3, r0
   191dc:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   191de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191e0:	2b00      	cmp	r3, #0
   191e2:	d03e      	beq.n	19262 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   191e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191e6:	222f      	movs	r2, #47	; 0x2f
   191e8:	18ba      	adds	r2, r7, r2
   191ea:	7812      	ldrb	r2, [r2, #0]
   191ec:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   191ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191f0:	2200      	movs	r2, #0
   191f2:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   191f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191f6:	222c      	movs	r2, #44	; 0x2c
   191f8:	18ba      	adds	r2, r7, r2
   191fa:	8812      	ldrh	r2, [r2, #0]
   191fc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   191fe:	4b27      	ldr	r3, [pc, #156]	; (1929c <vTraceStoreMemMangEvent+0x14c>)
   19200:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   19202:	68bb      	ldr	r3, [r7, #8]
   19204:	4a22      	ldr	r2, [pc, #136]	; (19290 <vTraceStoreMemMangEvent+0x140>)
   19206:	0019      	movs	r1, r3
   19208:	0010      	movs	r0, r2
   1920a:	4b22      	ldr	r3, [pc, #136]	; (19294 <vTraceStoreMemMangEvent+0x144>)
   1920c:	4798      	blx	r3
   1920e:	0002      	movs	r2, r0
   19210:	2326      	movs	r3, #38	; 0x26
   19212:	18fb      	adds	r3, r7, r3
   19214:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   19216:	2325      	movs	r3, #37	; 0x25
   19218:	18fb      	adds	r3, r7, r3
   1921a:	2200      	movs	r2, #0
   1921c:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1921e:	4b1e      	ldr	r3, [pc, #120]	; (19298 <vTraceStoreMemMangEvent+0x148>)
   19220:	4798      	blx	r3
   19222:	0003      	movs	r3, r0
   19224:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   19226:	6a3b      	ldr	r3, [r7, #32]
   19228:	2b00      	cmp	r3, #0
   1922a:	d01a      	beq.n	19262 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1922c:	6a3b      	ldr	r3, [r7, #32]
   1922e:	2226      	movs	r2, #38	; 0x26
   19230:	18ba      	adds	r2, r7, r2
   19232:	8812      	ldrh	r2, [r2, #0]
   19234:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   19236:	6a3b      	ldr	r3, [r7, #32]
   19238:	2225      	movs	r2, #37	; 0x25
   1923a:	18ba      	adds	r2, r7, r2
   1923c:	7812      	ldrb	r2, [r2, #0]
   1923e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   19240:	68fb      	ldr	r3, [r7, #12]
   19242:	b2db      	uxtb	r3, r3
   19244:	3301      	adds	r3, #1
   19246:	b2da      	uxtb	r2, r3
   19248:	6a3b      	ldr	r3, [r7, #32]
   1924a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1924c:	68fb      	ldr	r3, [r7, #12]
   1924e:	b2da      	uxtb	r2, r3
   19250:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19252:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   19254:	4b11      	ldr	r3, [pc, #68]	; (1929c <vTraceStoreMemMangEvent+0x14c>)
   19256:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19258:	4b09      	ldr	r3, [pc, #36]	; (19280 <vTraceStoreMemMangEvent+0x130>)
   1925a:	681b      	ldr	r3, [r3, #0]
   1925c:	4a0a      	ldr	r2, [pc, #40]	; (19288 <vTraceStoreMemMangEvent+0x138>)
   1925e:	6812      	ldr	r2, [r2, #0]
   19260:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   19262:	4b08      	ldr	r3, [pc, #32]	; (19284 <vTraceStoreMemMangEvent+0x134>)
   19264:	681b      	ldr	r3, [r3, #0]
   19266:	1e5a      	subs	r2, r3, #1
   19268:	4b06      	ldr	r3, [pc, #24]	; (19284 <vTraceStoreMemMangEvent+0x134>)
   1926a:	601a      	str	r2, [r3, #0]
   1926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1926e:	617b      	str	r3, [r7, #20]
   19270:	697b      	ldr	r3, [r7, #20]
   19272:	f383 8810 	msr	PRIMASK, r3
   19276:	e000      	b.n	1927a <vTraceStoreMemMangEvent+0x12a>
		return;
   19278:	46c0      	nop			; (mov r8, r8)
}
   1927a:	46bd      	mov	sp, r7
   1927c:	b00e      	add	sp, #56	; 0x38
   1927e:	bd80      	pop	{r7, pc}
   19280:	20000e04 	.word	0x20000e04
   19284:	20000d5c 	.word	0x20000d5c
   19288:	20000d70 	.word	0x20000d70
   1928c:	0001a359 	.word	0x0001a359
   19290:	0000ffff 	.word	0x0000ffff
   19294:	0001951d 	.word	0x0001951d
   19298:	00019cfd 	.word	0x00019cfd
   1929c:	0001a301 	.word	0x0001a301

000192a0 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   192a0:	b590      	push	{r4, r7, lr}
   192a2:	b08b      	sub	sp, #44	; 0x2c
   192a4:	af00      	add	r7, sp, #0
   192a6:	60f8      	str	r0, [r7, #12]
   192a8:	607a      	str	r2, [r7, #4]
   192aa:	230b      	movs	r3, #11
   192ac:	18fb      	adds	r3, r7, r3
   192ae:	1c0a      	adds	r2, r1, #0
   192b0:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   192b2:	68fb      	ldr	r3, [r7, #12]
   192b4:	2bfe      	cmp	r3, #254	; 0xfe
   192b6:	d904      	bls.n	192c2 <prvTraceStoreKernelCall+0x22>
   192b8:	4b39      	ldr	r3, [pc, #228]	; (193a0 <prvTraceStoreKernelCall+0x100>)
   192ba:	0018      	movs	r0, r3
   192bc:	4b39      	ldr	r3, [pc, #228]	; (193a4 <prvTraceStoreKernelCall+0x104>)
   192be:	4798      	blx	r3
   192c0:	e06b      	b.n	1939a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   192c2:	230b      	movs	r3, #11
   192c4:	18fb      	adds	r3, r7, r3
   192c6:	781b      	ldrb	r3, [r3, #0]
   192c8:	2b08      	cmp	r3, #8
   192ca:	d904      	bls.n	192d6 <prvTraceStoreKernelCall+0x36>
   192cc:	4b36      	ldr	r3, [pc, #216]	; (193a8 <prvTraceStoreKernelCall+0x108>)
   192ce:	0018      	movs	r0, r3
   192d0:	4b34      	ldr	r3, [pc, #208]	; (193a4 <prvTraceStoreKernelCall+0x104>)
   192d2:	4798      	blx	r3
   192d4:	e061      	b.n	1939a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   192d6:	4b35      	ldr	r3, [pc, #212]	; (193ac <prvTraceStoreKernelCall+0x10c>)
   192d8:	681a      	ldr	r2, [r3, #0]
   192da:	230b      	movs	r3, #11
   192dc:	18fb      	adds	r3, r7, r3
   192de:	781b      	ldrb	r3, [r3, #0]
   192e0:	2164      	movs	r1, #100	; 0x64
   192e2:	18d3      	adds	r3, r2, r3
   192e4:	185b      	adds	r3, r3, r1
   192e6:	781b      	ldrb	r3, [r3, #0]
   192e8:	001a      	movs	r2, r3
   192ea:	687b      	ldr	r3, [r7, #4]
   192ec:	429a      	cmp	r2, r3
   192ee:	d204      	bcs.n	192fa <prvTraceStoreKernelCall+0x5a>
   192f0:	4b2f      	ldr	r3, [pc, #188]	; (193b0 <prvTraceStoreKernelCall+0x110>)
   192f2:	0018      	movs	r0, r3
   192f4:	4b2b      	ldr	r3, [pc, #172]	; (193a4 <prvTraceStoreKernelCall+0x104>)
   192f6:	4798      	blx	r3
   192f8:	e04f      	b.n	1939a <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   192fa:	4b2e      	ldr	r3, [pc, #184]	; (193b4 <prvTraceStoreKernelCall+0x114>)
   192fc:	681b      	ldr	r3, [r3, #0]
   192fe:	2b00      	cmp	r3, #0
   19300:	d004      	beq.n	1930c <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   19302:	4b2d      	ldr	r3, [pc, #180]	; (193b8 <prvTraceStoreKernelCall+0x118>)
   19304:	0018      	movs	r0, r3
   19306:	4b27      	ldr	r3, [pc, #156]	; (193a4 <prvTraceStoreKernelCall+0x104>)
   19308:	4798      	blx	r3
		return;
   1930a:	e046      	b.n	1939a <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1930c:	4b2b      	ldr	r3, [pc, #172]	; (193bc <prvTraceStoreKernelCall+0x11c>)
   1930e:	781b      	ldrb	r3, [r3, #0]
   19310:	2b00      	cmp	r3, #0
   19312:	d041      	beq.n	19398 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19314:	f3ef 8310 	mrs	r3, PRIMASK
   19318:	617b      	str	r3, [r7, #20]
  return(result);
   1931a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1931c:	627b      	str	r3, [r7, #36]	; 0x24
   1931e:	2301      	movs	r3, #1
   19320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19322:	69bb      	ldr	r3, [r7, #24]
   19324:	f383 8810 	msr	PRIMASK, r3
   19328:	4b22      	ldr	r3, [pc, #136]	; (193b4 <prvTraceStoreKernelCall+0x114>)
   1932a:	681b      	ldr	r3, [r3, #0]
   1932c:	1c5a      	adds	r2, r3, #1
   1932e:	4b21      	ldr	r3, [pc, #132]	; (193b4 <prvTraceStoreKernelCall+0x114>)
   19330:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   19332:	4b1e      	ldr	r3, [pc, #120]	; (193ac <prvTraceStoreKernelCall+0x10c>)
   19334:	681b      	ldr	r3, [r3, #0]
   19336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19338:	2b00      	cmp	r3, #0
   1933a:	d022      	beq.n	19382 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1933c:	2322      	movs	r3, #34	; 0x22
   1933e:	18fc      	adds	r4, r7, r3
   19340:	4b1f      	ldr	r3, [pc, #124]	; (193c0 <prvTraceStoreKernelCall+0x120>)
   19342:	0018      	movs	r0, r3
   19344:	4b1f      	ldr	r3, [pc, #124]	; (193c4 <prvTraceStoreKernelCall+0x124>)
   19346:	4798      	blx	r3
   19348:	0003      	movs	r3, r0
   1934a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1934c:	2321      	movs	r3, #33	; 0x21
   1934e:	18fb      	adds	r3, r7, r3
   19350:	687a      	ldr	r2, [r7, #4]
   19352:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19354:	4b1c      	ldr	r3, [pc, #112]	; (193c8 <prvTraceStoreKernelCall+0x128>)
   19356:	4798      	blx	r3
   19358:	0003      	movs	r3, r0
   1935a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1935c:	69fb      	ldr	r3, [r7, #28]
   1935e:	2b00      	cmp	r3, #0
   19360:	d00f      	beq.n	19382 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   19362:	69fb      	ldr	r3, [r7, #28]
   19364:	2222      	movs	r2, #34	; 0x22
   19366:	18ba      	adds	r2, r7, r2
   19368:	8812      	ldrh	r2, [r2, #0]
   1936a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1936c:	68fb      	ldr	r3, [r7, #12]
   1936e:	b2da      	uxtb	r2, r3
   19370:	69fb      	ldr	r3, [r7, #28]
   19372:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19374:	69fb      	ldr	r3, [r7, #28]
   19376:	2221      	movs	r2, #33	; 0x21
   19378:	18ba      	adds	r2, r7, r2
   1937a:	7812      	ldrb	r2, [r2, #0]
   1937c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1937e:	4b13      	ldr	r3, [pc, #76]	; (193cc <prvTraceStoreKernelCall+0x12c>)
   19380:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19382:	4b0c      	ldr	r3, [pc, #48]	; (193b4 <prvTraceStoreKernelCall+0x114>)
   19384:	681b      	ldr	r3, [r3, #0]
   19386:	1e5a      	subs	r2, r3, #1
   19388:	4b0a      	ldr	r3, [pc, #40]	; (193b4 <prvTraceStoreKernelCall+0x114>)
   1938a:	601a      	str	r2, [r3, #0]
   1938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1938e:	613b      	str	r3, [r7, #16]
   19390:	693b      	ldr	r3, [r7, #16]
   19392:	f383 8810 	msr	PRIMASK, r3
   19396:	e000      	b.n	1939a <prvTraceStoreKernelCall+0xfa>
		return;
   19398:	46c0      	nop			; (mov r8, r8)
}
   1939a:	46bd      	mov	sp, r7
   1939c:	b00b      	add	sp, #44	; 0x2c
   1939e:	bd90      	pop	{r4, r7, pc}
   193a0:	00039df0 	.word	0x00039df0
   193a4:	0001a145 	.word	0x0001a145
   193a8:	00039e28 	.word	0x00039e28
   193ac:	20000e04 	.word	0x20000e04
   193b0:	00039e70 	.word	0x00039e70
   193b4:	20000d5c 	.word	0x20000d5c
   193b8:	00039eb8 	.word	0x00039eb8
   193bc:	20000d68 	.word	0x20000d68
   193c0:	0000ffff 	.word	0x0000ffff
   193c4:	0001a359 	.word	0x0001a359
   193c8:	00019cfd 	.word	0x00019cfd
   193cc:	0001a301 	.word	0x0001a301

000193d0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   193d0:	b580      	push	{r7, lr}
   193d2:	b08a      	sub	sp, #40	; 0x28
   193d4:	af00      	add	r7, sp, #0
   193d6:	60f8      	str	r0, [r7, #12]
   193d8:	607a      	str	r2, [r7, #4]
   193da:	603b      	str	r3, [r7, #0]
   193dc:	230b      	movs	r3, #11
   193de:	18fb      	adds	r3, r7, r3
   193e0:	1c0a      	adds	r2, r1, #0
   193e2:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   193e4:	68fb      	ldr	r3, [r7, #12]
   193e6:	2bfe      	cmp	r3, #254	; 0xfe
   193e8:	d904      	bls.n	193f4 <prvTraceStoreKernelCallWithParam+0x24>
   193ea:	4b40      	ldr	r3, [pc, #256]	; (194ec <prvTraceStoreKernelCallWithParam+0x11c>)
   193ec:	0018      	movs	r0, r3
   193ee:	4b40      	ldr	r3, [pc, #256]	; (194f0 <prvTraceStoreKernelCallWithParam+0x120>)
   193f0:	4798      	blx	r3
   193f2:	e077      	b.n	194e4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   193f4:	230b      	movs	r3, #11
   193f6:	18fb      	adds	r3, r7, r3
   193f8:	781b      	ldrb	r3, [r3, #0]
   193fa:	2b08      	cmp	r3, #8
   193fc:	d904      	bls.n	19408 <prvTraceStoreKernelCallWithParam+0x38>
   193fe:	4b3d      	ldr	r3, [pc, #244]	; (194f4 <prvTraceStoreKernelCallWithParam+0x124>)
   19400:	0018      	movs	r0, r3
   19402:	4b3b      	ldr	r3, [pc, #236]	; (194f0 <prvTraceStoreKernelCallWithParam+0x120>)
   19404:	4798      	blx	r3
   19406:	e06d      	b.n	194e4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19408:	4b3b      	ldr	r3, [pc, #236]	; (194f8 <prvTraceStoreKernelCallWithParam+0x128>)
   1940a:	681a      	ldr	r2, [r3, #0]
   1940c:	230b      	movs	r3, #11
   1940e:	18fb      	adds	r3, r7, r3
   19410:	781b      	ldrb	r3, [r3, #0]
   19412:	2164      	movs	r1, #100	; 0x64
   19414:	18d3      	adds	r3, r2, r3
   19416:	185b      	adds	r3, r3, r1
   19418:	781b      	ldrb	r3, [r3, #0]
   1941a:	001a      	movs	r2, r3
   1941c:	687b      	ldr	r3, [r7, #4]
   1941e:	429a      	cmp	r2, r3
   19420:	d204      	bcs.n	1942c <prvTraceStoreKernelCallWithParam+0x5c>
   19422:	4b36      	ldr	r3, [pc, #216]	; (194fc <prvTraceStoreKernelCallWithParam+0x12c>)
   19424:	0018      	movs	r0, r3
   19426:	4b32      	ldr	r3, [pc, #200]	; (194f0 <prvTraceStoreKernelCallWithParam+0x120>)
   19428:	4798      	blx	r3
   1942a:	e05b      	b.n	194e4 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1942c:	4b34      	ldr	r3, [pc, #208]	; (19500 <prvTraceStoreKernelCallWithParam+0x130>)
   1942e:	681b      	ldr	r3, [r3, #0]
   19430:	2b00      	cmp	r3, #0
   19432:	d004      	beq.n	1943e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19434:	4b33      	ldr	r3, [pc, #204]	; (19504 <prvTraceStoreKernelCallWithParam+0x134>)
   19436:	0018      	movs	r0, r3
   19438:	4b2d      	ldr	r3, [pc, #180]	; (194f0 <prvTraceStoreKernelCallWithParam+0x120>)
   1943a:	4798      	blx	r3
		return;
   1943c:	e052      	b.n	194e4 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1943e:	f3ef 8310 	mrs	r3, PRIMASK
   19442:	617b      	str	r3, [r7, #20]
  return(result);
   19444:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   19446:	627b      	str	r3, [r7, #36]	; 0x24
   19448:	2301      	movs	r3, #1
   1944a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1944c:	69bb      	ldr	r3, [r7, #24]
   1944e:	f383 8810 	msr	PRIMASK, r3
   19452:	4b2b      	ldr	r3, [pc, #172]	; (19500 <prvTraceStoreKernelCallWithParam+0x130>)
   19454:	681b      	ldr	r3, [r3, #0]
   19456:	1c5a      	adds	r2, r3, #1
   19458:	4b29      	ldr	r3, [pc, #164]	; (19500 <prvTraceStoreKernelCallWithParam+0x130>)
   1945a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1945c:	4b26      	ldr	r3, [pc, #152]	; (194f8 <prvTraceStoreKernelCallWithParam+0x128>)
   1945e:	681b      	ldr	r3, [r3, #0]
   19460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19462:	2b00      	cmp	r3, #0
   19464:	d034      	beq.n	194d0 <prvTraceStoreKernelCallWithParam+0x100>
   19466:	4b28      	ldr	r3, [pc, #160]	; (19508 <prvTraceStoreKernelCallWithParam+0x138>)
   19468:	781b      	ldrb	r3, [r3, #0]
   1946a:	2b00      	cmp	r3, #0
   1946c:	d030      	beq.n	194d0 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1946e:	20ff      	movs	r0, #255	; 0xff
   19470:	4b26      	ldr	r3, [pc, #152]	; (1950c <prvTraceStoreKernelCallWithParam+0x13c>)
   19472:	4798      	blx	r3
   19474:	0003      	movs	r3, r0
   19476:	001a      	movs	r2, r3
   19478:	2323      	movs	r3, #35	; 0x23
   1947a:	18fb      	adds	r3, r7, r3
   1947c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1947e:	683b      	ldr	r3, [r7, #0]
   19480:	0019      	movs	r1, r3
   19482:	20ff      	movs	r0, #255	; 0xff
   19484:	4b22      	ldr	r3, [pc, #136]	; (19510 <prvTraceStoreKernelCallWithParam+0x140>)
   19486:	4798      	blx	r3
   19488:	0002      	movs	r2, r0
   1948a:	2322      	movs	r3, #34	; 0x22
   1948c:	18fb      	adds	r3, r7, r3
   1948e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19490:	2321      	movs	r3, #33	; 0x21
   19492:	18fb      	adds	r3, r7, r3
   19494:	687a      	ldr	r2, [r7, #4]
   19496:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19498:	4b1e      	ldr	r3, [pc, #120]	; (19514 <prvTraceStoreKernelCallWithParam+0x144>)
   1949a:	4798      	blx	r3
   1949c:	0003      	movs	r3, r0
   1949e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   194a0:	69fb      	ldr	r3, [r7, #28]
   194a2:	2b00      	cmp	r3, #0
   194a4:	d014      	beq.n	194d0 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   194a6:	69fb      	ldr	r3, [r7, #28]
   194a8:	2223      	movs	r2, #35	; 0x23
   194aa:	18ba      	adds	r2, r7, r2
   194ac:	7812      	ldrb	r2, [r2, #0]
   194ae:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   194b0:	68fb      	ldr	r3, [r7, #12]
   194b2:	b2da      	uxtb	r2, r3
   194b4:	69fb      	ldr	r3, [r7, #28]
   194b6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   194b8:	69fb      	ldr	r3, [r7, #28]
   194ba:	2221      	movs	r2, #33	; 0x21
   194bc:	18ba      	adds	r2, r7, r2
   194be:	7812      	ldrb	r2, [r2, #0]
   194c0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   194c2:	69fb      	ldr	r3, [r7, #28]
   194c4:	2222      	movs	r2, #34	; 0x22
   194c6:	18ba      	adds	r2, r7, r2
   194c8:	7812      	ldrb	r2, [r2, #0]
   194ca:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   194cc:	4b12      	ldr	r3, [pc, #72]	; (19518 <prvTraceStoreKernelCallWithParam+0x148>)
   194ce:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   194d0:	4b0b      	ldr	r3, [pc, #44]	; (19500 <prvTraceStoreKernelCallWithParam+0x130>)
   194d2:	681b      	ldr	r3, [r3, #0]
   194d4:	1e5a      	subs	r2, r3, #1
   194d6:	4b0a      	ldr	r3, [pc, #40]	; (19500 <prvTraceStoreKernelCallWithParam+0x130>)
   194d8:	601a      	str	r2, [r3, #0]
   194da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   194dc:	613b      	str	r3, [r7, #16]
   194de:	693b      	ldr	r3, [r7, #16]
   194e0:	f383 8810 	msr	PRIMASK, r3
}
   194e4:	46bd      	mov	sp, r7
   194e6:	b00a      	add	sp, #40	; 0x28
   194e8:	bd80      	pop	{r7, pc}
   194ea:	46c0      	nop			; (mov r8, r8)
   194ec:	00039ef0 	.word	0x00039ef0
   194f0:	0001a145 	.word	0x0001a145
   194f4:	00039f30 	.word	0x00039f30
   194f8:	20000e04 	.word	0x20000e04
   194fc:	00039f80 	.word	0x00039f80
   19500:	20000d5c 	.word	0x20000d5c
   19504:	00039fd0 	.word	0x00039fd0
   19508:	20000d68 	.word	0x20000d68
   1950c:	0001a359 	.word	0x0001a359
   19510:	0001951d 	.word	0x0001951d
   19514:	00019cfd 	.word	0x00019cfd
   19518:	0001a301 	.word	0x0001a301

0001951c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1951c:	b580      	push	{r7, lr}
   1951e:	b084      	sub	sp, #16
   19520:	af00      	add	r7, sp, #0
   19522:	6078      	str	r0, [r7, #4]
   19524:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19526:	687b      	ldr	r3, [r7, #4]
   19528:	2bff      	cmp	r3, #255	; 0xff
   1952a:	d009      	beq.n	19540 <prvTraceGetParam+0x24>
   1952c:	687b      	ldr	r3, [r7, #4]
   1952e:	4a19      	ldr	r2, [pc, #100]	; (19594 <prvTraceGetParam+0x78>)
   19530:	4293      	cmp	r3, r2
   19532:	d005      	beq.n	19540 <prvTraceGetParam+0x24>
   19534:	4b18      	ldr	r3, [pc, #96]	; (19598 <prvTraceGetParam+0x7c>)
   19536:	0018      	movs	r0, r3
   19538:	4b18      	ldr	r3, [pc, #96]	; (1959c <prvTraceGetParam+0x80>)
   1953a:	4798      	blx	r3
   1953c:	683b      	ldr	r3, [r7, #0]
   1953e:	e024      	b.n	1958a <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19540:	683a      	ldr	r2, [r7, #0]
   19542:	687b      	ldr	r3, [r7, #4]
   19544:	429a      	cmp	r2, r3
   19546:	d801      	bhi.n	1954c <prvTraceGetParam+0x30>
	{
		return param;
   19548:	683b      	ldr	r3, [r7, #0]
   1954a:	e01e      	b.n	1958a <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1954c:	4b14      	ldr	r3, [pc, #80]	; (195a0 <prvTraceGetParam+0x84>)
   1954e:	4798      	blx	r3
   19550:	0003      	movs	r3, r0
   19552:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19554:	68fb      	ldr	r3, [r7, #12]
   19556:	2b00      	cmp	r3, #0
   19558:	d014      	beq.n	19584 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1955a:	68fb      	ldr	r3, [r7, #12]
   1955c:	2201      	movs	r2, #1
   1955e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19560:	687b      	ldr	r3, [r7, #4]
   19562:	43db      	mvns	r3, r3
   19564:	683a      	ldr	r2, [r7, #0]
   19566:	4013      	ands	r3, r2
   19568:	0a1b      	lsrs	r3, r3, #8
   1956a:	b2da      	uxtb	r2, r3
   1956c:	68fb      	ldr	r3, [r7, #12]
   1956e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19570:	687b      	ldr	r3, [r7, #4]
   19572:	43db      	mvns	r3, r3
   19574:	683a      	ldr	r2, [r7, #0]
   19576:	4013      	ands	r3, r2
   19578:	0c1b      	lsrs	r3, r3, #16
   1957a:	b29a      	uxth	r2, r3
   1957c:	68fb      	ldr	r3, [r7, #12]
   1957e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19580:	4b08      	ldr	r3, [pc, #32]	; (195a4 <prvTraceGetParam+0x88>)
   19582:	4798      	blx	r3
		}

		return param & param_max;
   19584:	683b      	ldr	r3, [r7, #0]
   19586:	687a      	ldr	r2, [r7, #4]
   19588:	4013      	ands	r3, r2
	}
}
   1958a:	0018      	movs	r0, r3
   1958c:	46bd      	mov	sp, r7
   1958e:	b004      	add	sp, #16
   19590:	bd80      	pop	{r7, pc}
   19592:	46c0      	nop			; (mov r8, r8)
   19594:	0000ffff 	.word	0x0000ffff
   19598:	0003a008 	.word	0x0003a008
   1959c:	0001a145 	.word	0x0001a145
   195a0:	00019cfd 	.word	0x00019cfd
   195a4:	0001a301 	.word	0x0001a301

000195a8 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   195a8:	b580      	push	{r7, lr}
   195aa:	b08a      	sub	sp, #40	; 0x28
   195ac:	af00      	add	r7, sp, #0
   195ae:	6078      	str	r0, [r7, #4]
   195b0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   195b2:	2326      	movs	r3, #38	; 0x26
   195b4:	18fb      	adds	r3, r7, r3
   195b6:	2200      	movs	r2, #0
   195b8:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   195ba:	687b      	ldr	r3, [r7, #4]
   195bc:	2bfe      	cmp	r3, #254	; 0xfe
   195be:	d904      	bls.n	195ca <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   195c0:	4b2d      	ldr	r3, [pc, #180]	; (19678 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   195c2:	0018      	movs	r0, r3
   195c4:	4b2d      	ldr	r3, [pc, #180]	; (1967c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   195c6:	4798      	blx	r3
   195c8:	e053      	b.n	19672 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   195ca:	4b2d      	ldr	r3, [pc, #180]	; (19680 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   195cc:	681b      	ldr	r3, [r3, #0]
   195ce:	2b00      	cmp	r3, #0
   195d0:	d004      	beq.n	195dc <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   195d2:	4b2c      	ldr	r3, [pc, #176]	; (19684 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   195d4:	0018      	movs	r0, r3
   195d6:	4b29      	ldr	r3, [pc, #164]	; (1967c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   195d8:	4798      	blx	r3
		return;
   195da:	e04a      	b.n	19672 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   195dc:	f3ef 8310 	mrs	r3, PRIMASK
   195e0:	613b      	str	r3, [r7, #16]
  return(result);
   195e2:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   195e4:	623b      	str	r3, [r7, #32]
   195e6:	2301      	movs	r3, #1
   195e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   195ea:	697b      	ldr	r3, [r7, #20]
   195ec:	f383 8810 	msr	PRIMASK, r3
   195f0:	4b23      	ldr	r3, [pc, #140]	; (19680 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   195f2:	681b      	ldr	r3, [r3, #0]
   195f4:	1c5a      	adds	r2, r3, #1
   195f6:	4b22      	ldr	r3, [pc, #136]	; (19680 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   195f8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   195fa:	4b23      	ldr	r3, [pc, #140]	; (19688 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   195fc:	681b      	ldr	r3, [r3, #0]
   195fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19600:	2b00      	cmp	r3, #0
   19602:	d02c      	beq.n	1965e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19604:	4b21      	ldr	r3, [pc, #132]	; (1968c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19606:	781b      	ldrb	r3, [r3, #0]
   19608:	2b00      	cmp	r3, #0
   1960a:	d028      	beq.n	1965e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1960c:	20ff      	movs	r0, #255	; 0xff
   1960e:	4b20      	ldr	r3, [pc, #128]	; (19690 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19610:	4798      	blx	r3
   19612:	0003      	movs	r3, r0
   19614:	001a      	movs	r2, r3
   19616:	231f      	movs	r3, #31
   19618:	18fb      	adds	r3, r7, r3
   1961a:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1961c:	683b      	ldr	r3, [r7, #0]
   1961e:	4a1d      	ldr	r2, [pc, #116]	; (19694 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19620:	0019      	movs	r1, r3
   19622:	0010      	movs	r0, r2
   19624:	4b1c      	ldr	r3, [pc, #112]	; (19698 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19626:	4798      	blx	r3
   19628:	0002      	movs	r2, r0
   1962a:	2326      	movs	r3, #38	; 0x26
   1962c:	18fb      	adds	r3, r7, r3
   1962e:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19630:	4b1a      	ldr	r3, [pc, #104]	; (1969c <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19632:	4798      	blx	r3
   19634:	0003      	movs	r3, r0
   19636:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19638:	69bb      	ldr	r3, [r7, #24]
   1963a:	2b00      	cmp	r3, #0
   1963c:	d00f      	beq.n	1965e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1963e:	69bb      	ldr	r3, [r7, #24]
   19640:	221f      	movs	r2, #31
   19642:	18ba      	adds	r2, r7, r2
   19644:	7812      	ldrb	r2, [r2, #0]
   19646:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19648:	687b      	ldr	r3, [r7, #4]
   1964a:	b2da      	uxtb	r2, r3
   1964c:	69bb      	ldr	r3, [r7, #24]
   1964e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19650:	69bb      	ldr	r3, [r7, #24]
   19652:	2226      	movs	r2, #38	; 0x26
   19654:	18ba      	adds	r2, r7, r2
   19656:	8812      	ldrh	r2, [r2, #0]
   19658:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1965a:	4b11      	ldr	r3, [pc, #68]	; (196a0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1965c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1965e:	4b08      	ldr	r3, [pc, #32]	; (19680 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19660:	681b      	ldr	r3, [r3, #0]
   19662:	1e5a      	subs	r2, r3, #1
   19664:	4b06      	ldr	r3, [pc, #24]	; (19680 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19666:	601a      	str	r2, [r3, #0]
   19668:	6a3b      	ldr	r3, [r7, #32]
   1966a:	60fb      	str	r3, [r7, #12]
   1966c:	68fb      	ldr	r3, [r7, #12]
   1966e:	f383 8810 	msr	PRIMASK, r3
}
   19672:	46bd      	mov	sp, r7
   19674:	b00a      	add	sp, #40	; 0x28
   19676:	bd80      	pop	{r7, pc}
   19678:	0003a044 	.word	0x0003a044
   1967c:	0001a145 	.word	0x0001a145
   19680:	20000d5c 	.word	0x20000d5c
   19684:	0003a09c 	.word	0x0003a09c
   19688:	20000e04 	.word	0x20000e04
   1968c:	20000d68 	.word	0x20000d68
   19690:	0001a359 	.word	0x0001a359
   19694:	0000ffff 	.word	0x0000ffff
   19698:	0001951d 	.word	0x0001951d
   1969c:	00019cfd 	.word	0x00019cfd
   196a0:	0001a301 	.word	0x0001a301

000196a4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   196a4:	b590      	push	{r4, r7, lr}
   196a6:	b089      	sub	sp, #36	; 0x24
   196a8:	af00      	add	r7, sp, #0
   196aa:	0002      	movs	r2, r0
   196ac:	1dfb      	adds	r3, r7, #7
   196ae:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   196b0:	1dfb      	adds	r3, r7, #7
   196b2:	781b      	ldrb	r3, [r3, #0]
   196b4:	2b0f      	cmp	r3, #15
   196b6:	d904      	bls.n	196c2 <prvTraceStoreTaskswitch+0x1e>
   196b8:	4b34      	ldr	r3, [pc, #208]	; (1978c <prvTraceStoreTaskswitch+0xe8>)
   196ba:	0018      	movs	r0, r3
   196bc:	4b34      	ldr	r3, [pc, #208]	; (19790 <prvTraceStoreTaskswitch+0xec>)
   196be:	4798      	blx	r3
   196c0:	e061      	b.n	19786 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   196c2:	f3ef 8310 	mrs	r3, PRIMASK
   196c6:	60fb      	str	r3, [r7, #12]
  return(result);
   196c8:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   196ca:	61fb      	str	r3, [r7, #28]
   196cc:	2301      	movs	r3, #1
   196ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   196d0:	693b      	ldr	r3, [r7, #16]
   196d2:	f383 8810 	msr	PRIMASK, r3
   196d6:	4b2f      	ldr	r3, [pc, #188]	; (19794 <prvTraceStoreTaskswitch+0xf0>)
   196d8:	681b      	ldr	r3, [r3, #0]
   196da:	1c5a      	adds	r2, r3, #1
   196dc:	4b2d      	ldr	r3, [pc, #180]	; (19794 <prvTraceStoreTaskswitch+0xf0>)
   196de:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   196e0:	4b2d      	ldr	r3, [pc, #180]	; (19798 <prvTraceStoreTaskswitch+0xf4>)
   196e2:	781b      	ldrb	r3, [r3, #0]
   196e4:	1dfa      	adds	r2, r7, #7
   196e6:	7812      	ldrb	r2, [r2, #0]
   196e8:	429a      	cmp	r2, r3
   196ea:	d042      	beq.n	19772 <prvTraceStoreTaskswitch+0xce>
   196ec:	4b2b      	ldr	r3, [pc, #172]	; (1979c <prvTraceStoreTaskswitch+0xf8>)
   196ee:	681b      	ldr	r3, [r3, #0]
   196f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   196f2:	2b00      	cmp	r3, #0
   196f4:	d03d      	beq.n	19772 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   196f6:	4b2a      	ldr	r3, [pc, #168]	; (197a0 <prvTraceStoreTaskswitch+0xfc>)
   196f8:	2200      	movs	r2, #0
   196fa:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   196fc:	231a      	movs	r3, #26
   196fe:	18fc      	adds	r4, r7, r3
   19700:	4b28      	ldr	r3, [pc, #160]	; (197a4 <prvTraceStoreTaskswitch+0x100>)
   19702:	0018      	movs	r0, r3
   19704:	4b28      	ldr	r3, [pc, #160]	; (197a8 <prvTraceStoreTaskswitch+0x104>)
   19706:	4798      	blx	r3
   19708:	0003      	movs	r3, r0
   1970a:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1970c:	4b22      	ldr	r3, [pc, #136]	; (19798 <prvTraceStoreTaskswitch+0xf4>)
   1970e:	1dfa      	adds	r2, r7, #7
   19710:	7812      	ldrb	r2, [r2, #0]
   19712:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19714:	2319      	movs	r3, #25
   19716:	18fb      	adds	r3, r7, r3
   19718:	4a1f      	ldr	r2, [pc, #124]	; (19798 <prvTraceStoreTaskswitch+0xf4>)
   1971a:	7812      	ldrb	r2, [r2, #0]
   1971c:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1971e:	4b23      	ldr	r3, [pc, #140]	; (197ac <prvTraceStoreTaskswitch+0x108>)
   19720:	4798      	blx	r3
   19722:	0003      	movs	r3, r0
   19724:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19726:	697b      	ldr	r3, [r7, #20]
   19728:	2b00      	cmp	r3, #0
   1972a:	d022      	beq.n	19772 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1972c:	4b1a      	ldr	r3, [pc, #104]	; (19798 <prvTraceStoreTaskswitch+0xf4>)
   1972e:	781b      	ldrb	r3, [r3, #0]
   19730:	0019      	movs	r1, r3
   19732:	2003      	movs	r0, #3
   19734:	4b1e      	ldr	r3, [pc, #120]	; (197b0 <prvTraceStoreTaskswitch+0x10c>)
   19736:	4798      	blx	r3
   19738:	0003      	movs	r3, r0
   1973a:	2b01      	cmp	r3, #1
   1973c:	d103      	bne.n	19746 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1973e:	697b      	ldr	r3, [r7, #20]
   19740:	2207      	movs	r2, #7
   19742:	701a      	strb	r2, [r3, #0]
   19744:	e002      	b.n	1974c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19746:	697b      	ldr	r3, [r7, #20]
   19748:	2206      	movs	r2, #6
   1974a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1974c:	697b      	ldr	r3, [r7, #20]
   1974e:	221a      	movs	r2, #26
   19750:	18ba      	adds	r2, r7, r2
   19752:	8812      	ldrh	r2, [r2, #0]
   19754:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19756:	697b      	ldr	r3, [r7, #20]
   19758:	2219      	movs	r2, #25
   1975a:	18ba      	adds	r2, r7, r2
   1975c:	7812      	ldrb	r2, [r2, #0]
   1975e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19760:	4b0d      	ldr	r3, [pc, #52]	; (19798 <prvTraceStoreTaskswitch+0xf4>)
   19762:	781b      	ldrb	r3, [r3, #0]
   19764:	2201      	movs	r2, #1
   19766:	0019      	movs	r1, r3
   19768:	2003      	movs	r0, #3
   1976a:	4b12      	ldr	r3, [pc, #72]	; (197b4 <prvTraceStoreTaskswitch+0x110>)
   1976c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1976e:	4b12      	ldr	r3, [pc, #72]	; (197b8 <prvTraceStoreTaskswitch+0x114>)
   19770:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19772:	4b08      	ldr	r3, [pc, #32]	; (19794 <prvTraceStoreTaskswitch+0xf0>)
   19774:	681b      	ldr	r3, [r3, #0]
   19776:	1e5a      	subs	r2, r3, #1
   19778:	4b06      	ldr	r3, [pc, #24]	; (19794 <prvTraceStoreTaskswitch+0xf0>)
   1977a:	601a      	str	r2, [r3, #0]
   1977c:	69fb      	ldr	r3, [r7, #28]
   1977e:	60bb      	str	r3, [r7, #8]
   19780:	68bb      	ldr	r3, [r7, #8]
   19782:	f383 8810 	msr	PRIMASK, r3
}
   19786:	46bd      	mov	sp, r7
   19788:	b009      	add	sp, #36	; 0x24
   1978a:	bd90      	pop	{r4, r7, pc}
   1978c:	0003a0d4 	.word	0x0003a0d4
   19790:	0001a145 	.word	0x0001a145
   19794:	20000d5c 	.word	0x20000d5c
   19798:	20000d68 	.word	0x20000d68
   1979c:	20000e04 	.word	0x20000e04
   197a0:	20000d48 	.word	0x20000d48
   197a4:	0000ffff 	.word	0x0000ffff
   197a8:	0001a359 	.word	0x0001a359
   197ac:	00019cfd 	.word	0x00019cfd
   197b0:	000199a1 	.word	0x000199a1
   197b4:	000198fd 	.word	0x000198fd
   197b8:	0001a301 	.word	0x0001a301

000197bc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   197bc:	b590      	push	{r4, r7, lr}
   197be:	b083      	sub	sp, #12
   197c0:	af00      	add	r7, sp, #0
   197c2:	0004      	movs	r4, r0
   197c4:	0008      	movs	r0, r1
   197c6:	0011      	movs	r1, r2
   197c8:	1dfb      	adds	r3, r7, #7
   197ca:	1c22      	adds	r2, r4, #0
   197cc:	701a      	strb	r2, [r3, #0]
   197ce:	1dbb      	adds	r3, r7, #6
   197d0:	1c02      	adds	r2, r0, #0
   197d2:	701a      	strb	r2, [r3, #0]
   197d4:	1d7b      	adds	r3, r7, #5
   197d6:	1c0a      	adds	r2, r1, #0
   197d8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   197da:	1dfb      	adds	r3, r7, #7
   197dc:	781b      	ldrb	r3, [r3, #0]
   197de:	2b08      	cmp	r3, #8
   197e0:	d904      	bls.n	197ec <prvTraceSetPriorityProperty+0x30>
   197e2:	4b1a      	ldr	r3, [pc, #104]	; (1984c <prvTraceSetPriorityProperty+0x90>)
   197e4:	0018      	movs	r0, r3
   197e6:	4b1a      	ldr	r3, [pc, #104]	; (19850 <prvTraceSetPriorityProperty+0x94>)
   197e8:	4798      	blx	r3
   197ea:	e02c      	b.n	19846 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   197ec:	4b19      	ldr	r3, [pc, #100]	; (19854 <prvTraceSetPriorityProperty+0x98>)
   197ee:	681a      	ldr	r2, [r3, #0]
   197f0:	1dfb      	adds	r3, r7, #7
   197f2:	781b      	ldrb	r3, [r3, #0]
   197f4:	2164      	movs	r1, #100	; 0x64
   197f6:	18d3      	adds	r3, r2, r3
   197f8:	185b      	adds	r3, r3, r1
   197fa:	781b      	ldrb	r3, [r3, #0]
   197fc:	1dba      	adds	r2, r7, #6
   197fe:	7812      	ldrb	r2, [r2, #0]
   19800:	429a      	cmp	r2, r3
   19802:	d904      	bls.n	1980e <prvTraceSetPriorityProperty+0x52>
   19804:	4b14      	ldr	r3, [pc, #80]	; (19858 <prvTraceSetPriorityProperty+0x9c>)
   19806:	0018      	movs	r0, r3
   19808:	4b11      	ldr	r3, [pc, #68]	; (19850 <prvTraceSetPriorityProperty+0x94>)
   1980a:	4798      	blx	r3
   1980c:	e01b      	b.n	19846 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1980e:	4b11      	ldr	r3, [pc, #68]	; (19854 <prvTraceSetPriorityProperty+0x98>)
   19810:	681c      	ldr	r4, [r3, #0]
   19812:	1dfb      	adds	r3, r7, #7
   19814:	781a      	ldrb	r2, [r3, #0]
   19816:	1dbb      	adds	r3, r7, #6
   19818:	781b      	ldrb	r3, [r3, #0]
   1981a:	0011      	movs	r1, r2
   1981c:	0018      	movs	r0, r3
   1981e:	4b0f      	ldr	r3, [pc, #60]	; (1985c <prvTraceSetPriorityProperty+0xa0>)
   19820:	4798      	blx	r3
   19822:	0003      	movs	r3, r0
   19824:	0018      	movs	r0, r3
   19826:	4b0b      	ldr	r3, [pc, #44]	; (19854 <prvTraceSetPriorityProperty+0x98>)
   19828:	681a      	ldr	r2, [r3, #0]
   1982a:	1dfb      	adds	r3, r7, #7
   1982c:	781b      	ldrb	r3, [r3, #0]
   1982e:	2170      	movs	r1, #112	; 0x70
   19830:	18d3      	adds	r3, r2, r3
   19832:	185b      	adds	r3, r3, r1
   19834:	781b      	ldrb	r3, [r3, #0]
   19836:	18c3      	adds	r3, r0, r3
   19838:	3301      	adds	r3, #1
   1983a:	229c      	movs	r2, #156	; 0x9c
   1983c:	18e3      	adds	r3, r4, r3
   1983e:	189b      	adds	r3, r3, r2
   19840:	1d7a      	adds	r2, r7, #5
   19842:	7812      	ldrb	r2, [r2, #0]
   19844:	701a      	strb	r2, [r3, #0]
}
   19846:	46bd      	mov	sp, r7
   19848:	b003      	add	sp, #12
   1984a:	bd90      	pop	{r4, r7, pc}
   1984c:	0003a268 	.word	0x0003a268
   19850:	0001a145 	.word	0x0001a145
   19854:	20000e04 	.word	0x20000e04
   19858:	0003a2b4 	.word	0x0003a2b4
   1985c:	00019d51 	.word	0x00019d51

00019860 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19860:	b590      	push	{r4, r7, lr}
   19862:	b083      	sub	sp, #12
   19864:	af00      	add	r7, sp, #0
   19866:	0002      	movs	r2, r0
   19868:	1dfb      	adds	r3, r7, #7
   1986a:	701a      	strb	r2, [r3, #0]
   1986c:	1dbb      	adds	r3, r7, #6
   1986e:	1c0a      	adds	r2, r1, #0
   19870:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19872:	1dfb      	adds	r3, r7, #7
   19874:	781b      	ldrb	r3, [r3, #0]
   19876:	2b08      	cmp	r3, #8
   19878:	d905      	bls.n	19886 <prvTraceGetPriorityProperty+0x26>
   1987a:	4b1b      	ldr	r3, [pc, #108]	; (198e8 <prvTraceGetPriorityProperty+0x88>)
   1987c:	0018      	movs	r0, r3
   1987e:	4b1b      	ldr	r3, [pc, #108]	; (198ec <prvTraceGetPriorityProperty+0x8c>)
   19880:	4798      	blx	r3
   19882:	2300      	movs	r3, #0
   19884:	e02b      	b.n	198de <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19886:	4b1a      	ldr	r3, [pc, #104]	; (198f0 <prvTraceGetPriorityProperty+0x90>)
   19888:	681a      	ldr	r2, [r3, #0]
   1988a:	1dfb      	adds	r3, r7, #7
   1988c:	781b      	ldrb	r3, [r3, #0]
   1988e:	2164      	movs	r1, #100	; 0x64
   19890:	18d3      	adds	r3, r2, r3
   19892:	185b      	adds	r3, r3, r1
   19894:	781b      	ldrb	r3, [r3, #0]
   19896:	1dba      	adds	r2, r7, #6
   19898:	7812      	ldrb	r2, [r2, #0]
   1989a:	429a      	cmp	r2, r3
   1989c:	d905      	bls.n	198aa <prvTraceGetPriorityProperty+0x4a>
   1989e:	4b15      	ldr	r3, [pc, #84]	; (198f4 <prvTraceGetPriorityProperty+0x94>)
   198a0:	0018      	movs	r0, r3
   198a2:	4b12      	ldr	r3, [pc, #72]	; (198ec <prvTraceGetPriorityProperty+0x8c>)
   198a4:	4798      	blx	r3
   198a6:	2300      	movs	r3, #0
   198a8:	e019      	b.n	198de <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   198aa:	4b11      	ldr	r3, [pc, #68]	; (198f0 <prvTraceGetPriorityProperty+0x90>)
   198ac:	681c      	ldr	r4, [r3, #0]
   198ae:	1dfb      	adds	r3, r7, #7
   198b0:	781a      	ldrb	r2, [r3, #0]
   198b2:	1dbb      	adds	r3, r7, #6
   198b4:	781b      	ldrb	r3, [r3, #0]
   198b6:	0011      	movs	r1, r2
   198b8:	0018      	movs	r0, r3
   198ba:	4b0f      	ldr	r3, [pc, #60]	; (198f8 <prvTraceGetPriorityProperty+0x98>)
   198bc:	4798      	blx	r3
   198be:	0003      	movs	r3, r0
   198c0:	0018      	movs	r0, r3
   198c2:	4b0b      	ldr	r3, [pc, #44]	; (198f0 <prvTraceGetPriorityProperty+0x90>)
   198c4:	681a      	ldr	r2, [r3, #0]
   198c6:	1dfb      	adds	r3, r7, #7
   198c8:	781b      	ldrb	r3, [r3, #0]
   198ca:	2170      	movs	r1, #112	; 0x70
   198cc:	18d3      	adds	r3, r2, r3
   198ce:	185b      	adds	r3, r3, r1
   198d0:	781b      	ldrb	r3, [r3, #0]
   198d2:	18c3      	adds	r3, r0, r3
   198d4:	3301      	adds	r3, #1
   198d6:	229c      	movs	r2, #156	; 0x9c
   198d8:	18e3      	adds	r3, r4, r3
   198da:	189b      	adds	r3, r3, r2
   198dc:	781b      	ldrb	r3, [r3, #0]
}
   198de:	0018      	movs	r0, r3
   198e0:	46bd      	mov	sp, r7
   198e2:	b003      	add	sp, #12
   198e4:	bd90      	pop	{r4, r7, pc}
   198e6:	46c0      	nop			; (mov r8, r8)
   198e8:	0003a2f4 	.word	0x0003a2f4
   198ec:	0001a145 	.word	0x0001a145
   198f0:	20000e04 	.word	0x20000e04
   198f4:	0003a340 	.word	0x0003a340
   198f8:	00019d51 	.word	0x00019d51

000198fc <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   198fc:	b590      	push	{r4, r7, lr}
   198fe:	b083      	sub	sp, #12
   19900:	af00      	add	r7, sp, #0
   19902:	0004      	movs	r4, r0
   19904:	0008      	movs	r0, r1
   19906:	0011      	movs	r1, r2
   19908:	1dfb      	adds	r3, r7, #7
   1990a:	1c22      	adds	r2, r4, #0
   1990c:	701a      	strb	r2, [r3, #0]
   1990e:	1dbb      	adds	r3, r7, #6
   19910:	1c02      	adds	r2, r0, #0
   19912:	701a      	strb	r2, [r3, #0]
   19914:	1d7b      	adds	r3, r7, #5
   19916:	1c0a      	adds	r2, r1, #0
   19918:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1991a:	1dfb      	adds	r3, r7, #7
   1991c:	781b      	ldrb	r3, [r3, #0]
   1991e:	2b08      	cmp	r3, #8
   19920:	d904      	bls.n	1992c <prvTraceSetObjectState+0x30>
   19922:	4b1a      	ldr	r3, [pc, #104]	; (1998c <prvTraceSetObjectState+0x90>)
   19924:	0018      	movs	r0, r3
   19926:	4b1a      	ldr	r3, [pc, #104]	; (19990 <prvTraceSetObjectState+0x94>)
   19928:	4798      	blx	r3
   1992a:	e02b      	b.n	19984 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1992c:	4b19      	ldr	r3, [pc, #100]	; (19994 <prvTraceSetObjectState+0x98>)
   1992e:	681a      	ldr	r2, [r3, #0]
   19930:	1dfb      	adds	r3, r7, #7
   19932:	781b      	ldrb	r3, [r3, #0]
   19934:	2164      	movs	r1, #100	; 0x64
   19936:	18d3      	adds	r3, r2, r3
   19938:	185b      	adds	r3, r3, r1
   1993a:	781b      	ldrb	r3, [r3, #0]
   1993c:	1dba      	adds	r2, r7, #6
   1993e:	7812      	ldrb	r2, [r2, #0]
   19940:	429a      	cmp	r2, r3
   19942:	d904      	bls.n	1994e <prvTraceSetObjectState+0x52>
   19944:	4b14      	ldr	r3, [pc, #80]	; (19998 <prvTraceSetObjectState+0x9c>)
   19946:	0018      	movs	r0, r3
   19948:	4b11      	ldr	r3, [pc, #68]	; (19990 <prvTraceSetObjectState+0x94>)
   1994a:	4798      	blx	r3
   1994c:	e01a      	b.n	19984 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1994e:	4b11      	ldr	r3, [pc, #68]	; (19994 <prvTraceSetObjectState+0x98>)
   19950:	681c      	ldr	r4, [r3, #0]
   19952:	1dfb      	adds	r3, r7, #7
   19954:	781a      	ldrb	r2, [r3, #0]
   19956:	1dbb      	adds	r3, r7, #6
   19958:	781b      	ldrb	r3, [r3, #0]
   1995a:	0011      	movs	r1, r2
   1995c:	0018      	movs	r0, r3
   1995e:	4b0f      	ldr	r3, [pc, #60]	; (1999c <prvTraceSetObjectState+0xa0>)
   19960:	4798      	blx	r3
   19962:	0003      	movs	r3, r0
   19964:	0018      	movs	r0, r3
   19966:	4b0b      	ldr	r3, [pc, #44]	; (19994 <prvTraceSetObjectState+0x98>)
   19968:	681a      	ldr	r2, [r3, #0]
   1996a:	1dfb      	adds	r3, r7, #7
   1996c:	781b      	ldrb	r3, [r3, #0]
   1996e:	2170      	movs	r1, #112	; 0x70
   19970:	18d3      	adds	r3, r2, r3
   19972:	185b      	adds	r3, r3, r1
   19974:	781b      	ldrb	r3, [r3, #0]
   19976:	18c3      	adds	r3, r0, r3
   19978:	229c      	movs	r2, #156	; 0x9c
   1997a:	18e3      	adds	r3, r4, r3
   1997c:	189b      	adds	r3, r3, r2
   1997e:	1d7a      	adds	r2, r7, #5
   19980:	7812      	ldrb	r2, [r2, #0]
   19982:	701a      	strb	r2, [r3, #0]
}
   19984:	46bd      	mov	sp, r7
   19986:	b003      	add	sp, #12
   19988:	bd90      	pop	{r4, r7, pc}
   1998a:	46c0      	nop			; (mov r8, r8)
   1998c:	0003a380 	.word	0x0003a380
   19990:	0001a145 	.word	0x0001a145
   19994:	20000e04 	.word	0x20000e04
   19998:	0003a3c4 	.word	0x0003a3c4
   1999c:	00019d51 	.word	0x00019d51

000199a0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   199a0:	b590      	push	{r4, r7, lr}
   199a2:	b083      	sub	sp, #12
   199a4:	af00      	add	r7, sp, #0
   199a6:	0002      	movs	r2, r0
   199a8:	1dfb      	adds	r3, r7, #7
   199aa:	701a      	strb	r2, [r3, #0]
   199ac:	1dbb      	adds	r3, r7, #6
   199ae:	1c0a      	adds	r2, r1, #0
   199b0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   199b2:	1dfb      	adds	r3, r7, #7
   199b4:	781b      	ldrb	r3, [r3, #0]
   199b6:	2b08      	cmp	r3, #8
   199b8:	d905      	bls.n	199c6 <prvTraceGetObjectState+0x26>
   199ba:	4b1a      	ldr	r3, [pc, #104]	; (19a24 <prvTraceGetObjectState+0x84>)
   199bc:	0018      	movs	r0, r3
   199be:	4b1a      	ldr	r3, [pc, #104]	; (19a28 <prvTraceGetObjectState+0x88>)
   199c0:	4798      	blx	r3
   199c2:	2300      	movs	r3, #0
   199c4:	e02a      	b.n	19a1c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   199c6:	4b19      	ldr	r3, [pc, #100]	; (19a2c <prvTraceGetObjectState+0x8c>)
   199c8:	681a      	ldr	r2, [r3, #0]
   199ca:	1dfb      	adds	r3, r7, #7
   199cc:	781b      	ldrb	r3, [r3, #0]
   199ce:	2164      	movs	r1, #100	; 0x64
   199d0:	18d3      	adds	r3, r2, r3
   199d2:	185b      	adds	r3, r3, r1
   199d4:	781b      	ldrb	r3, [r3, #0]
   199d6:	1dba      	adds	r2, r7, #6
   199d8:	7812      	ldrb	r2, [r2, #0]
   199da:	429a      	cmp	r2, r3
   199dc:	d905      	bls.n	199ea <prvTraceGetObjectState+0x4a>
   199de:	4b14      	ldr	r3, [pc, #80]	; (19a30 <prvTraceGetObjectState+0x90>)
   199e0:	0018      	movs	r0, r3
   199e2:	4b11      	ldr	r3, [pc, #68]	; (19a28 <prvTraceGetObjectState+0x88>)
   199e4:	4798      	blx	r3
   199e6:	2300      	movs	r3, #0
   199e8:	e018      	b.n	19a1c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   199ea:	4b10      	ldr	r3, [pc, #64]	; (19a2c <prvTraceGetObjectState+0x8c>)
   199ec:	681c      	ldr	r4, [r3, #0]
   199ee:	1dfb      	adds	r3, r7, #7
   199f0:	781a      	ldrb	r2, [r3, #0]
   199f2:	1dbb      	adds	r3, r7, #6
   199f4:	781b      	ldrb	r3, [r3, #0]
   199f6:	0011      	movs	r1, r2
   199f8:	0018      	movs	r0, r3
   199fa:	4b0e      	ldr	r3, [pc, #56]	; (19a34 <prvTraceGetObjectState+0x94>)
   199fc:	4798      	blx	r3
   199fe:	0003      	movs	r3, r0
   19a00:	0018      	movs	r0, r3
   19a02:	4b0a      	ldr	r3, [pc, #40]	; (19a2c <prvTraceGetObjectState+0x8c>)
   19a04:	681a      	ldr	r2, [r3, #0]
   19a06:	1dfb      	adds	r3, r7, #7
   19a08:	781b      	ldrb	r3, [r3, #0]
   19a0a:	2170      	movs	r1, #112	; 0x70
   19a0c:	18d3      	adds	r3, r2, r3
   19a0e:	185b      	adds	r3, r3, r1
   19a10:	781b      	ldrb	r3, [r3, #0]
   19a12:	18c3      	adds	r3, r0, r3
   19a14:	229c      	movs	r2, #156	; 0x9c
   19a16:	18e3      	adds	r3, r4, r3
   19a18:	189b      	adds	r3, r3, r2
   19a1a:	781b      	ldrb	r3, [r3, #0]
}
   19a1c:	0018      	movs	r0, r3
   19a1e:	46bd      	mov	sp, r7
   19a20:	b003      	add	sp, #12
   19a22:	bd90      	pop	{r4, r7, pc}
   19a24:	0003a400 	.word	0x0003a400
   19a28:	0001a145 	.word	0x0001a145
   19a2c:	20000e04 	.word	0x20000e04
   19a30:	0003a444 	.word	0x0003a444
   19a34:	00019d51 	.word	0x00019d51

00019a38 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19a38:	b590      	push	{r4, r7, lr}
   19a3a:	b083      	sub	sp, #12
   19a3c:	af00      	add	r7, sp, #0
   19a3e:	0002      	movs	r2, r0
   19a40:	1dfb      	adds	r3, r7, #7
   19a42:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19a44:	4b11      	ldr	r3, [pc, #68]	; (19a8c <prvTraceSetTaskInstanceFinished+0x54>)
   19a46:	681b      	ldr	r3, [r3, #0]
   19a48:	2267      	movs	r2, #103	; 0x67
   19a4a:	5c9b      	ldrb	r3, [r3, r2]
   19a4c:	1dfa      	adds	r2, r7, #7
   19a4e:	7812      	ldrb	r2, [r2, #0]
   19a50:	429a      	cmp	r2, r3
   19a52:	d904      	bls.n	19a5e <prvTraceSetTaskInstanceFinished+0x26>
   19a54:	4b0e      	ldr	r3, [pc, #56]	; (19a90 <prvTraceSetTaskInstanceFinished+0x58>)
   19a56:	0018      	movs	r0, r3
   19a58:	4b0e      	ldr	r3, [pc, #56]	; (19a94 <prvTraceSetTaskInstanceFinished+0x5c>)
   19a5a:	4798      	blx	r3
   19a5c:	e013      	b.n	19a86 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19a5e:	4b0b      	ldr	r3, [pc, #44]	; (19a8c <prvTraceSetTaskInstanceFinished+0x54>)
   19a60:	681c      	ldr	r4, [r3, #0]
   19a62:	1dfb      	adds	r3, r7, #7
   19a64:	781b      	ldrb	r3, [r3, #0]
   19a66:	2103      	movs	r1, #3
   19a68:	0018      	movs	r0, r3
   19a6a:	4b0b      	ldr	r3, [pc, #44]	; (19a98 <prvTraceSetTaskInstanceFinished+0x60>)
   19a6c:	4798      	blx	r3
   19a6e:	0003      	movs	r3, r0
   19a70:	0019      	movs	r1, r3
   19a72:	4b06      	ldr	r3, [pc, #24]	; (19a8c <prvTraceSetTaskInstanceFinished+0x54>)
   19a74:	681b      	ldr	r3, [r3, #0]
   19a76:	2273      	movs	r2, #115	; 0x73
   19a78:	5c9b      	ldrb	r3, [r3, r2]
   19a7a:	18cb      	adds	r3, r1, r3
   19a7c:	229c      	movs	r2, #156	; 0x9c
   19a7e:	18e3      	adds	r3, r4, r3
   19a80:	189b      	adds	r3, r3, r2
   19a82:	2200      	movs	r2, #0
   19a84:	701a      	strb	r2, [r3, #0]
#endif
}
   19a86:	46bd      	mov	sp, r7
   19a88:	b003      	add	sp, #12
   19a8a:	bd90      	pop	{r4, r7, pc}
   19a8c:	20000e04 	.word	0x20000e04
   19a90:	0003a480 	.word	0x0003a480
   19a94:	0001a145 	.word	0x0001a145
   19a98:	00019d51 	.word	0x00019d51

00019a9c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19a9c:	b580      	push	{r7, lr}
   19a9e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19aa0:	4b75      	ldr	r3, [pc, #468]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19aa2:	681b      	ldr	r3, [r3, #0]
   19aa4:	2b00      	cmp	r3, #0
   19aa6:	d103      	bne.n	19ab0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19aa8:	4b73      	ldr	r3, [pc, #460]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19aaa:	4a74      	ldr	r2, [pc, #464]	; (19c7c <prvTraceInitTraceData+0x1e0>)
   19aac:	601a      	str	r2, [r3, #0]
   19aae:	e006      	b.n	19abe <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19ab0:	4b71      	ldr	r3, [pc, #452]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19ab2:	681b      	ldr	r3, [r3, #0]
   19ab4:	781b      	ldrb	r3, [r3, #0]
   19ab6:	b2db      	uxtb	r3, r3
   19ab8:	2b01      	cmp	r3, #1
   19aba:	d100      	bne.n	19abe <prvTraceInitTraceData+0x22>
   19abc:	e0d8      	b.n	19c70 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19abe:	4b70      	ldr	r3, [pc, #448]	; (19c80 <prvTraceInitTraceData+0x1e4>)
   19ac0:	681a      	ldr	r2, [r3, #0]
   19ac2:	4b70      	ldr	r3, [pc, #448]	; (19c84 <prvTraceInitTraceData+0x1e8>)
   19ac4:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   19ac6:	4b6c      	ldr	r3, [pc, #432]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19ac8:	6818      	ldr	r0, [r3, #0]
   19aca:	23bd      	movs	r3, #189	; 0xbd
   19acc:	011b      	lsls	r3, r3, #4
   19ace:	001a      	movs	r2, r3
   19ad0:	2100      	movs	r1, #0
   19ad2:	4b6d      	ldr	r3, [pc, #436]	; (19c88 <prvTraceInitTraceData+0x1ec>)
   19ad4:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   19ad6:	4b68      	ldr	r3, [pc, #416]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19ad8:	681b      	ldr	r3, [r3, #0]
   19ada:	4a6c      	ldr	r2, [pc, #432]	; (19c8c <prvTraceInitTraceData+0x1f0>)
   19adc:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19ade:	4b66      	ldr	r3, [pc, #408]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19ae0:	681b      	ldr	r3, [r3, #0]
   19ae2:	2205      	movs	r2, #5
   19ae4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   19ae6:	4b64      	ldr	r3, [pc, #400]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19ae8:	681b      	ldr	r3, [r3, #0]
   19aea:	2200      	movs	r2, #0
   19aec:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19aee:	4b62      	ldr	r3, [pc, #392]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19af0:	681b      	ldr	r3, [r3, #0]
   19af2:	22bd      	movs	r2, #189	; 0xbd
   19af4:	0112      	lsls	r2, r2, #4
   19af6:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19af8:	4b5f      	ldr	r3, [pc, #380]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19afa:	681b      	ldr	r3, [r3, #0]
   19afc:	2296      	movs	r2, #150	; 0x96
   19afe:	0052      	lsls	r2, r2, #1
   19b00:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19b02:	4b5d      	ldr	r3, [pc, #372]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b04:	681b      	ldr	r3, [r3, #0]
   19b06:	4a62      	ldr	r2, [pc, #392]	; (19c90 <prvTraceInitTraceData+0x1f4>)
   19b08:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19b0a:	4b5b      	ldr	r3, [pc, #364]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b0c:	681b      	ldr	r3, [r3, #0]
   19b0e:	2200      	movs	r2, #0
   19b10:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19b12:	4b59      	ldr	r3, [pc, #356]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b14:	681b      	ldr	r3, [r3, #0]
   19b16:	2200      	movs	r2, #0
   19b18:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19b1a:	4b5e      	ldr	r3, [pc, #376]	; (19c94 <prvTraceInitTraceData+0x1f8>)
   19b1c:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19b1e:	4b56      	ldr	r3, [pc, #344]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b20:	681b      	ldr	r3, [r3, #0]
   19b22:	4a5d      	ldr	r2, [pc, #372]	; (19c98 <prvTraceInitTraceData+0x1fc>)
   19b24:	495d      	ldr	r1, [pc, #372]	; (19c9c <prvTraceInitTraceData+0x200>)
   19b26:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19b28:	4b53      	ldr	r3, [pc, #332]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b2a:	681a      	ldr	r2, [r3, #0]
   19b2c:	23ac      	movs	r3, #172	; 0xac
   19b2e:	00db      	lsls	r3, r3, #3
   19b30:	21c8      	movs	r1, #200	; 0xc8
   19b32:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19b34:	4b50      	ldr	r3, [pc, #320]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b36:	681b      	ldr	r3, [r3, #0]
   19b38:	4a59      	ldr	r2, [pc, #356]	; (19ca0 <prvTraceInitTraceData+0x204>)
   19b3a:	2101      	movs	r1, #1
   19b3c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19b3e:	4b4e      	ldr	r3, [pc, #312]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b40:	681a      	ldr	r2, [r3, #0]
   19b42:	23d7      	movs	r3, #215	; 0xd7
   19b44:	00db      	lsls	r3, r3, #3
   19b46:	4957      	ldr	r1, [pc, #348]	; (19ca4 <prvTraceInitTraceData+0x208>)
   19b48:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19b4a:	4b4b      	ldr	r3, [pc, #300]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b4c:	681b      	ldr	r3, [r3, #0]
   19b4e:	4a56      	ldr	r2, [pc, #344]	; (19ca8 <prvTraceInitTraceData+0x20c>)
   19b50:	4694      	mov	ip, r2
   19b52:	4463      	add	r3, ip
   19b54:	4955      	ldr	r1, [pc, #340]	; (19cac <prvTraceInitTraceData+0x210>)
   19b56:	2250      	movs	r2, #80	; 0x50
   19b58:	0018      	movs	r0, r3
   19b5a:	4b55      	ldr	r3, [pc, #340]	; (19cb0 <prvTraceInitTraceData+0x214>)
   19b5c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19b5e:	4b46      	ldr	r3, [pc, #280]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b60:	681b      	ldr	r3, [r3, #0]
   19b62:	4a54      	ldr	r2, [pc, #336]	; (19cb4 <prvTraceInitTraceData+0x218>)
   19b64:	4954      	ldr	r1, [pc, #336]	; (19cb8 <prvTraceInitTraceData+0x21c>)
   19b66:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19b68:	4b43      	ldr	r3, [pc, #268]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b6a:	681b      	ldr	r3, [r3, #0]
   19b6c:	4a53      	ldr	r2, [pc, #332]	; (19cbc <prvTraceInitTraceData+0x220>)
   19b6e:	210a      	movs	r1, #10
   19b70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19b72:	4b41      	ldr	r3, [pc, #260]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b74:	681b      	ldr	r3, [r3, #0]
   19b76:	4a52      	ldr	r2, [pc, #328]	; (19cc0 <prvTraceInitTraceData+0x224>)
   19b78:	210b      	movs	r1, #11
   19b7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19b7c:	4b3e      	ldr	r3, [pc, #248]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b7e:	681b      	ldr	r3, [r3, #0]
   19b80:	4a50      	ldr	r2, [pc, #320]	; (19cc4 <prvTraceInitTraceData+0x228>)
   19b82:	210c      	movs	r1, #12
   19b84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19b86:	4b3c      	ldr	r3, [pc, #240]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b88:	681b      	ldr	r3, [r3, #0]
   19b8a:	4a4f      	ldr	r2, [pc, #316]	; (19cc8 <prvTraceInitTraceData+0x22c>)
   19b8c:	210d      	movs	r1, #13
   19b8e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19b90:	4b39      	ldr	r3, [pc, #228]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b92:	681b      	ldr	r3, [r3, #0]
   19b94:	4a4d      	ldr	r2, [pc, #308]	; (19ccc <prvTraceInitTraceData+0x230>)
   19b96:	2171      	movs	r1, #113	; 0x71
   19b98:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19b9a:	4b37      	ldr	r3, [pc, #220]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19b9c:	681b      	ldr	r3, [r3, #0]
   19b9e:	4a4c      	ldr	r2, [pc, #304]	; (19cd0 <prvTraceInitTraceData+0x234>)
   19ba0:	2172      	movs	r1, #114	; 0x72
   19ba2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19ba4:	4b34      	ldr	r3, [pc, #208]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19ba6:	681b      	ldr	r3, [r3, #0]
   19ba8:	4a4a      	ldr	r2, [pc, #296]	; (19cd4 <prvTraceInitTraceData+0x238>)
   19baa:	2173      	movs	r1, #115	; 0x73
   19bac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19bae:	4b32      	ldr	r3, [pc, #200]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bb0:	681b      	ldr	r3, [r3, #0]
   19bb2:	4a49      	ldr	r2, [pc, #292]	; (19cd8 <prvTraceInitTraceData+0x23c>)
   19bb4:	2174      	movs	r1, #116	; 0x74
   19bb6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19bb8:	4b2f      	ldr	r3, [pc, #188]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bba:	681b      	ldr	r3, [r3, #0]
   19bbc:	4a47      	ldr	r2, [pc, #284]	; (19cdc <prvTraceInitTraceData+0x240>)
   19bbe:	21f1      	movs	r1, #241	; 0xf1
   19bc0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19bc2:	4b2d      	ldr	r3, [pc, #180]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bc4:	681b      	ldr	r3, [r3, #0]
   19bc6:	4a46      	ldr	r2, [pc, #280]	; (19ce0 <prvTraceInitTraceData+0x244>)
   19bc8:	21f2      	movs	r1, #242	; 0xf2
   19bca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19bcc:	4b2a      	ldr	r3, [pc, #168]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bce:	681b      	ldr	r3, [r3, #0]
   19bd0:	4a44      	ldr	r2, [pc, #272]	; (19ce4 <prvTraceInitTraceData+0x248>)
   19bd2:	21f3      	movs	r1, #243	; 0xf3
   19bd4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19bd6:	4b28      	ldr	r3, [pc, #160]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bd8:	681b      	ldr	r3, [r3, #0]
   19bda:	4a43      	ldr	r2, [pc, #268]	; (19ce8 <prvTraceInitTraceData+0x24c>)
   19bdc:	21f4      	movs	r1, #244	; 0xf4
   19bde:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19be0:	4b42      	ldr	r3, [pc, #264]	; (19cec <prvTraceInitTraceData+0x250>)
   19be2:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19be4:	4b24      	ldr	r3, [pc, #144]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19be6:	681b      	ldr	r3, [r3, #0]
   19be8:	22f4      	movs	r2, #244	; 0xf4
   19bea:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19bec:	4b22      	ldr	r3, [pc, #136]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bee:	681b      	ldr	r3, [r3, #0]
   19bf0:	22f3      	movs	r2, #243	; 0xf3
   19bf2:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19bf4:	4b20      	ldr	r3, [pc, #128]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bf6:	681b      	ldr	r3, [r3, #0]
   19bf8:	22f2      	movs	r2, #242	; 0xf2
   19bfa:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19bfc:	4b1e      	ldr	r3, [pc, #120]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19bfe:	681b      	ldr	r3, [r3, #0]
   19c00:	22f1      	movs	r2, #241	; 0xf1
   19c02:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19c04:	4b1c      	ldr	r3, [pc, #112]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c06:	681b      	ldr	r3, [r3, #0]
   19c08:	2274      	movs	r2, #116	; 0x74
   19c0a:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19c0c:	4b1a      	ldr	r3, [pc, #104]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c0e:	681b      	ldr	r3, [r3, #0]
   19c10:	2273      	movs	r2, #115	; 0x73
   19c12:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19c14:	4b18      	ldr	r3, [pc, #96]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c16:	681b      	ldr	r3, [r3, #0]
   19c18:	2272      	movs	r2, #114	; 0x72
   19c1a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19c1c:	4b16      	ldr	r3, [pc, #88]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c1e:	681b      	ldr	r3, [r3, #0]
   19c20:	2271      	movs	r2, #113	; 0x71
   19c22:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19c24:	4b14      	ldr	r3, [pc, #80]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c26:	681b      	ldr	r3, [r3, #0]
   19c28:	2204      	movs	r2, #4
   19c2a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19c2c:	4b12      	ldr	r3, [pc, #72]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c2e:	681b      	ldr	r3, [r3, #0]
   19c30:	2203      	movs	r2, #3
   19c32:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19c34:	4b10      	ldr	r3, [pc, #64]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c36:	681b      	ldr	r3, [r3, #0]
   19c38:	2202      	movs	r2, #2
   19c3a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19c3c:	4b0e      	ldr	r3, [pc, #56]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c3e:	681b      	ldr	r3, [r3, #0]
   19c40:	2201      	movs	r2, #1
   19c42:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19c44:	4b2a      	ldr	r3, [pc, #168]	; (19cf0 <prvTraceInitTraceData+0x254>)
   19c46:	681b      	ldr	r3, [r3, #0]
   19c48:	2b00      	cmp	r3, #0
   19c4a:	d012      	beq.n	19c72 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19c4c:	4b0a      	ldr	r3, [pc, #40]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c4e:	681b      	ldr	r3, [r3, #0]
   19c50:	4a15      	ldr	r2, [pc, #84]	; (19ca8 <prvTraceInitTraceData+0x20c>)
   19c52:	1898      	adds	r0, r3, r2
   19c54:	4b26      	ldr	r3, [pc, #152]	; (19cf0 <prvTraceInitTraceData+0x254>)
   19c56:	681b      	ldr	r3, [r3, #0]
   19c58:	2250      	movs	r2, #80	; 0x50
   19c5a:	0019      	movs	r1, r3
   19c5c:	4b14      	ldr	r3, [pc, #80]	; (19cb0 <prvTraceInitTraceData+0x214>)
   19c5e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19c60:	4b05      	ldr	r3, [pc, #20]	; (19c78 <prvTraceInitTraceData+0x1dc>)
   19c62:	681b      	ldr	r3, [r3, #0]
   19c64:	4a23      	ldr	r2, [pc, #140]	; (19cf4 <prvTraceInitTraceData+0x258>)
   19c66:	2101      	movs	r1, #1
   19c68:	5099      	str	r1, [r3, r2]
		vTraceStop();
   19c6a:	4b23      	ldr	r3, [pc, #140]	; (19cf8 <prvTraceInitTraceData+0x25c>)
   19c6c:	4798      	blx	r3
   19c6e:	e000      	b.n	19c72 <prvTraceInitTraceData+0x1d6>
			return;
   19c70:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19c72:	46bd      	mov	sp, r7
   19c74:	bd80      	pop	{r7, pc}
   19c76:	46c0      	nop			; (mov r8, r8)
   19c78:	20000e04 	.word	0x20000e04
   19c7c:	20004bc4 	.word	0x20004bc4
   19c80:	e000e018 	.word	0xe000e018
   19c84:	20005794 	.word	0x20005794
   19c88:	00035377 	.word	0x00035377
   19c8c:	00001aa1 	.word	0x00001aa1
   19c90:	f0f0f0f0 	.word	0xf0f0f0f0
   19c94:	00018c01 	.word	0x00018c01
   19c98:	0000055c 	.word	0x0000055c
   19c9c:	f1f1f1f1 	.word	0xf1f1f1f1
   19ca0:	00000564 	.word	0x00000564
   19ca4:	f2f2f2f2 	.word	0xf2f2f2f2
   19ca8:	000006bc 	.word	0x000006bc
   19cac:	0003a4c8 	.word	0x0003a4c8
   19cb0:	0001a011 	.word	0x0001a011
   19cb4:	0000070c 	.word	0x0000070c
   19cb8:	f3f3f3f3 	.word	0xf3f3f3f3
   19cbc:	00000bc4 	.word	0x00000bc4
   19cc0:	00000bc5 	.word	0x00000bc5
   19cc4:	00000bc6 	.word	0x00000bc6
   19cc8:	00000bc7 	.word	0x00000bc7
   19ccc:	00000bc8 	.word	0x00000bc8
   19cd0:	00000bc9 	.word	0x00000bc9
   19cd4:	00000bca 	.word	0x00000bca
   19cd8:	00000bcb 	.word	0x00000bcb
   19cdc:	00000bcc 	.word	0x00000bcc
   19ce0:	00000bcd 	.word	0x00000bcd
   19ce4:	00000bce 	.word	0x00000bce
   19ce8:	00000bcf 	.word	0x00000bcf
   19cec:	00018da1 	.word	0x00018da1
   19cf0:	20000d64 	.word	0x20000d64
   19cf4:	000006b4 	.word	0x000006b4
   19cf8:	00019009 	.word	0x00019009

00019cfc <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19cfc:	b580      	push	{r7, lr}
   19cfe:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19d00:	4b10      	ldr	r3, [pc, #64]	; (19d44 <prvTraceNextFreeEventBufferSlot+0x48>)
   19d02:	681b      	ldr	r3, [r3, #0]
   19d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19d06:	2b00      	cmp	r3, #0
   19d08:	d101      	bne.n	19d0e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   19d0a:	2300      	movs	r3, #0
   19d0c:	e017      	b.n	19d3e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19d0e:	4b0d      	ldr	r3, [pc, #52]	; (19d44 <prvTraceNextFreeEventBufferSlot+0x48>)
   19d10:	681b      	ldr	r3, [r3, #0]
   19d12:	69da      	ldr	r2, [r3, #28]
   19d14:	232c      	movs	r3, #44	; 0x2c
   19d16:	33ff      	adds	r3, #255	; 0xff
   19d18:	429a      	cmp	r2, r3
   19d1a:	d905      	bls.n	19d28 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19d1c:	4b0a      	ldr	r3, [pc, #40]	; (19d48 <prvTraceNextFreeEventBufferSlot+0x4c>)
   19d1e:	0018      	movs	r0, r3
   19d20:	4b0a      	ldr	r3, [pc, #40]	; (19d4c <prvTraceNextFreeEventBufferSlot+0x50>)
   19d22:	4798      	blx	r3
		return NULL;
   19d24:	2300      	movs	r3, #0
   19d26:	e00a      	b.n	19d3e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19d28:	4b06      	ldr	r3, [pc, #24]	; (19d44 <prvTraceNextFreeEventBufferSlot+0x48>)
   19d2a:	681a      	ldr	r2, [r3, #0]
   19d2c:	4b05      	ldr	r3, [pc, #20]	; (19d44 <prvTraceNextFreeEventBufferSlot+0x48>)
   19d2e:	681b      	ldr	r3, [r3, #0]
   19d30:	69db      	ldr	r3, [r3, #28]
   19d32:	009b      	lsls	r3, r3, #2
   19d34:	21e2      	movs	r1, #226	; 0xe2
   19d36:	00c9      	lsls	r1, r1, #3
   19d38:	468c      	mov	ip, r1
   19d3a:	4463      	add	r3, ip
   19d3c:	18d3      	adds	r3, r2, r3
}
   19d3e:	0018      	movs	r0, r3
   19d40:	46bd      	mov	sp, r7
   19d42:	bd80      	pop	{r7, pc}
   19d44:	20000e04 	.word	0x20000e04
   19d48:	0003a4dc 	.word	0x0003a4dc
   19d4c:	0001a145 	.word	0x0001a145

00019d50 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19d50:	b580      	push	{r7, lr}
   19d52:	b082      	sub	sp, #8
   19d54:	af00      	add	r7, sp, #0
   19d56:	0002      	movs	r2, r0
   19d58:	1dfb      	adds	r3, r7, #7
   19d5a:	701a      	strb	r2, [r3, #0]
   19d5c:	1dbb      	adds	r3, r7, #6
   19d5e:	1c0a      	adds	r2, r1, #0
   19d60:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19d62:	1dbb      	adds	r3, r7, #6
   19d64:	781b      	ldrb	r3, [r3, #0]
   19d66:	2b08      	cmp	r3, #8
   19d68:	d905      	bls.n	19d76 <uiIndexOfObject+0x26>
   19d6a:	4b2a      	ldr	r3, [pc, #168]	; (19e14 <uiIndexOfObject+0xc4>)
   19d6c:	0018      	movs	r0, r3
   19d6e:	4b2a      	ldr	r3, [pc, #168]	; (19e18 <uiIndexOfObject+0xc8>)
   19d70:	4798      	blx	r3
   19d72:	2300      	movs	r3, #0
   19d74:	e049      	b.n	19e0a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   19d76:	1dfb      	adds	r3, r7, #7
   19d78:	781b      	ldrb	r3, [r3, #0]
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	d00b      	beq.n	19d96 <uiIndexOfObject+0x46>
   19d7e:	4b27      	ldr	r3, [pc, #156]	; (19e1c <uiIndexOfObject+0xcc>)
   19d80:	681a      	ldr	r2, [r3, #0]
   19d82:	1dbb      	adds	r3, r7, #6
   19d84:	781b      	ldrb	r3, [r3, #0]
   19d86:	2164      	movs	r1, #100	; 0x64
   19d88:	18d3      	adds	r3, r2, r3
   19d8a:	185b      	adds	r3, r3, r1
   19d8c:	781b      	ldrb	r3, [r3, #0]
   19d8e:	1dfa      	adds	r2, r7, #7
   19d90:	7812      	ldrb	r2, [r2, #0]
   19d92:	429a      	cmp	r2, r3
   19d94:	d905      	bls.n	19da2 <uiIndexOfObject+0x52>
   19d96:	4b22      	ldr	r3, [pc, #136]	; (19e20 <uiIndexOfObject+0xd0>)
   19d98:	0018      	movs	r0, r3
   19d9a:	4b1f      	ldr	r3, [pc, #124]	; (19e18 <uiIndexOfObject+0xc8>)
   19d9c:	4798      	blx	r3
   19d9e:	2300      	movs	r3, #0
   19da0:	e033      	b.n	19e0a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19da2:	1dbb      	adds	r3, r7, #6
   19da4:	781b      	ldrb	r3, [r3, #0]
   19da6:	2b08      	cmp	r3, #8
   19da8:	d82a      	bhi.n	19e00 <uiIndexOfObject+0xb0>
   19daa:	1dfb      	adds	r3, r7, #7
   19dac:	781b      	ldrb	r3, [r3, #0]
   19dae:	2b00      	cmp	r3, #0
   19db0:	d026      	beq.n	19e00 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   19db2:	4b1a      	ldr	r3, [pc, #104]	; (19e1c <uiIndexOfObject+0xcc>)
   19db4:	681a      	ldr	r2, [r3, #0]
   19db6:	1dbb      	adds	r3, r7, #6
   19db8:	781b      	ldrb	r3, [r3, #0]
   19dba:	2164      	movs	r1, #100	; 0x64
   19dbc:	18d3      	adds	r3, r2, r3
   19dbe:	185b      	adds	r3, r3, r1
   19dc0:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19dc2:	1dfa      	adds	r2, r7, #7
   19dc4:	7812      	ldrb	r2, [r2, #0]
   19dc6:	429a      	cmp	r2, r3
   19dc8:	d81a      	bhi.n	19e00 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19dca:	4b14      	ldr	r3, [pc, #80]	; (19e1c <uiIndexOfObject+0xcc>)
   19dcc:	681a      	ldr	r2, [r3, #0]
   19dce:	1dbb      	adds	r3, r7, #6
   19dd0:	781b      	ldrb	r3, [r3, #0]
   19dd2:	3340      	adds	r3, #64	; 0x40
   19dd4:	005b      	lsls	r3, r3, #1
   19dd6:	18d3      	adds	r3, r2, r3
   19dd8:	3308      	adds	r3, #8
   19dda:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19ddc:	4b0f      	ldr	r3, [pc, #60]	; (19e1c <uiIndexOfObject+0xcc>)
   19dde:	6819      	ldr	r1, [r3, #0]
   19de0:	1dbb      	adds	r3, r7, #6
   19de2:	781b      	ldrb	r3, [r3, #0]
   19de4:	207c      	movs	r0, #124	; 0x7c
   19de6:	18cb      	adds	r3, r1, r3
   19de8:	181b      	adds	r3, r3, r0
   19dea:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19dec:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19dee:	1df9      	adds	r1, r7, #7
   19df0:	7809      	ldrb	r1, [r1, #0]
   19df2:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19df4:	b289      	uxth	r1, r1
   19df6:	434b      	muls	r3, r1
   19df8:	b29b      	uxth	r3, r3
   19dfa:	18d3      	adds	r3, r2, r3
   19dfc:	b29b      	uxth	r3, r3
   19dfe:	e004      	b.n	19e0a <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19e00:	4b08      	ldr	r3, [pc, #32]	; (19e24 <uiIndexOfObject+0xd4>)
   19e02:	0018      	movs	r0, r3
   19e04:	4b04      	ldr	r3, [pc, #16]	; (19e18 <uiIndexOfObject+0xc8>)
   19e06:	4798      	blx	r3
	return 0;
   19e08:	2300      	movs	r3, #0
}
   19e0a:	0018      	movs	r0, r3
   19e0c:	46bd      	mov	sp, r7
   19e0e:	b002      	add	sp, #8
   19e10:	bd80      	pop	{r7, pc}
   19e12:	46c0      	nop			; (mov r8, r8)
   19e14:	0003a504 	.word	0x0003a504
   19e18:	0001a145 	.word	0x0001a145
   19e1c:	20000e04 	.word	0x20000e04
   19e20:	0003a544 	.word	0x0003a544
   19e24:	0003a584 	.word	0x0003a584

00019e28 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19e28:	b580      	push	{r7, lr}
   19e2a:	b088      	sub	sp, #32
   19e2c:	af00      	add	r7, sp, #0
   19e2e:	0002      	movs	r2, r0
   19e30:	1dfb      	adds	r3, r7, #7
   19e32:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19e34:	4b5a      	ldr	r3, [pc, #360]	; (19fa0 <prvTraceGetObjectHandle+0x178>)
   19e36:	681b      	ldr	r3, [r3, #0]
   19e38:	2b00      	cmp	r3, #0
   19e3a:	d105      	bne.n	19e48 <prvTraceGetObjectHandle+0x20>
   19e3c:	4b59      	ldr	r3, [pc, #356]	; (19fa4 <prvTraceGetObjectHandle+0x17c>)
   19e3e:	0018      	movs	r0, r3
   19e40:	4b59      	ldr	r3, [pc, #356]	; (19fa8 <prvTraceGetObjectHandle+0x180>)
   19e42:	4798      	blx	r3
   19e44:	2300      	movs	r3, #0
   19e46:	e0a7      	b.n	19f98 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19e48:	1dfb      	adds	r3, r7, #7
   19e4a:	781b      	ldrb	r3, [r3, #0]
   19e4c:	2b08      	cmp	r3, #8
   19e4e:	d905      	bls.n	19e5c <prvTraceGetObjectHandle+0x34>
   19e50:	4b56      	ldr	r3, [pc, #344]	; (19fac <prvTraceGetObjectHandle+0x184>)
   19e52:	0018      	movs	r0, r3
   19e54:	4b54      	ldr	r3, [pc, #336]	; (19fa8 <prvTraceGetObjectHandle+0x180>)
   19e56:	4798      	blx	r3
   19e58:	2300      	movs	r3, #0
   19e5a:	e09d      	b.n	19f98 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19e5c:	f3ef 8310 	mrs	r3, PRIMASK
   19e60:	60fb      	str	r3, [r7, #12]
  return(result);
   19e62:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19e64:	61bb      	str	r3, [r7, #24]
   19e66:	2301      	movs	r3, #1
   19e68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19e6a:	693b      	ldr	r3, [r7, #16]
   19e6c:	f383 8810 	msr	PRIMASK, r3
   19e70:	4b4f      	ldr	r3, [pc, #316]	; (19fb0 <prvTraceGetObjectHandle+0x188>)
   19e72:	681b      	ldr	r3, [r3, #0]
   19e74:	1c5a      	adds	r2, r3, #1
   19e76:	4b4e      	ldr	r3, [pc, #312]	; (19fb0 <prvTraceGetObjectHandle+0x188>)
   19e78:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   19e7a:	1dfb      	adds	r3, r7, #7
   19e7c:	781a      	ldrb	r2, [r3, #0]
   19e7e:	4b4d      	ldr	r3, [pc, #308]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19e80:	0052      	lsls	r2, r2, #1
   19e82:	5ad3      	ldrh	r3, [r2, r3]
   19e84:	001a      	movs	r2, r3
   19e86:	4b4c      	ldr	r3, [pc, #304]	; (19fb8 <prvTraceGetObjectHandle+0x190>)
   19e88:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   19e8a:	4b4b      	ldr	r3, [pc, #300]	; (19fb8 <prvTraceGetObjectHandle+0x190>)
   19e8c:	681b      	ldr	r3, [r3, #0]
   19e8e:	4a49      	ldr	r2, [pc, #292]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19e90:	2148      	movs	r1, #72	; 0x48
   19e92:	18d3      	adds	r3, r2, r3
   19e94:	185b      	adds	r3, r3, r1
   19e96:	781b      	ldrb	r3, [r3, #0]
   19e98:	2b00      	cmp	r3, #0
   19e9a:	d117      	bne.n	19ecc <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19e9c:	4b46      	ldr	r3, [pc, #280]	; (19fb8 <prvTraceGetObjectHandle+0x190>)
   19e9e:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19ea0:	4b45      	ldr	r3, [pc, #276]	; (19fb8 <prvTraceGetObjectHandle+0x190>)
   19ea2:	681b      	ldr	r3, [r3, #0]
   19ea4:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19ea6:	1dfb      	adds	r3, r7, #7
   19ea8:	781b      	ldrb	r3, [r3, #0]
   19eaa:	4842      	ldr	r0, [pc, #264]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19eac:	3308      	adds	r3, #8
   19eae:	005b      	lsls	r3, r3, #1
   19eb0:	18c3      	adds	r3, r0, r3
   19eb2:	3302      	adds	r3, #2
   19eb4:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19eb6:	b2db      	uxtb	r3, r3
   19eb8:	1acb      	subs	r3, r1, r3
   19eba:	b2db      	uxtb	r3, r3
   19ebc:	3301      	adds	r3, #1
   19ebe:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19ec0:	4b3c      	ldr	r3, [pc, #240]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19ec2:	2148      	movs	r1, #72	; 0x48
   19ec4:	189b      	adds	r3, r3, r2
   19ec6:	185b      	adds	r3, r3, r1
   19ec8:	1c02      	adds	r2, r0, #0
   19eca:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19ecc:	4b3a      	ldr	r3, [pc, #232]	; (19fb8 <prvTraceGetObjectHandle+0x190>)
   19ece:	681a      	ldr	r2, [r3, #0]
   19ed0:	231f      	movs	r3, #31
   19ed2:	18fb      	adds	r3, r7, r3
   19ed4:	4937      	ldr	r1, [pc, #220]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19ed6:	2048      	movs	r0, #72	; 0x48
   19ed8:	188a      	adds	r2, r1, r2
   19eda:	1812      	adds	r2, r2, r0
   19edc:	7812      	ldrb	r2, [r2, #0]
   19ede:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19ee0:	1dfb      	adds	r3, r7, #7
   19ee2:	781a      	ldrb	r2, [r3, #0]
   19ee4:	4b33      	ldr	r3, [pc, #204]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19ee6:	0052      	lsls	r2, r2, #1
   19ee8:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19eea:	1dfb      	adds	r3, r7, #7
   19eec:	781b      	ldrb	r3, [r3, #0]
   19eee:	4931      	ldr	r1, [pc, #196]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19ef0:	3310      	adds	r3, #16
   19ef2:	005b      	lsls	r3, r3, #1
   19ef4:	18cb      	adds	r3, r1, r3
   19ef6:	3304      	adds	r3, #4
   19ef8:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19efa:	429a      	cmp	r2, r3
   19efc:	d90d      	bls.n	19f1a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19efe:	1dfb      	adds	r3, r7, #7
   19f00:	781b      	ldrb	r3, [r3, #0]
   19f02:	0018      	movs	r0, r3
   19f04:	4b2d      	ldr	r3, [pc, #180]	; (19fbc <prvTraceGetObjectHandle+0x194>)
   19f06:	4798      	blx	r3
   19f08:	0003      	movs	r3, r0
   19f0a:	0018      	movs	r0, r3
   19f0c:	4b26      	ldr	r3, [pc, #152]	; (19fa8 <prvTraceGetObjectHandle+0x180>)
   19f0e:	4798      	blx	r3
		handle = 0;
   19f10:	231f      	movs	r3, #31
   19f12:	18fb      	adds	r3, r7, r3
   19f14:	2200      	movs	r2, #0
   19f16:	701a      	strb	r2, [r3, #0]
   19f18:	e031      	b.n	19f7e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19f1a:	1dfb      	adds	r3, r7, #7
   19f1c:	781b      	ldrb	r3, [r3, #0]
   19f1e:	4a25      	ldr	r2, [pc, #148]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19f20:	0059      	lsls	r1, r3, #1
   19f22:	5a8a      	ldrh	r2, [r1, r2]
   19f24:	3201      	adds	r2, #1
   19f26:	b291      	uxth	r1, r2
   19f28:	4a22      	ldr	r2, [pc, #136]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19f2a:	005b      	lsls	r3, r3, #1
   19f2c:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19f2e:	1dfb      	adds	r3, r7, #7
   19f30:	781a      	ldrb	r2, [r3, #0]
   19f32:	4b20      	ldr	r3, [pc, #128]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19f34:	0052      	lsls	r2, r2, #1
   19f36:	5ad3      	ldrh	r3, [r2, r3]
   19f38:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19f3a:	1dfb      	adds	r3, r7, #7
   19f3c:	781b      	ldrb	r3, [r3, #0]
   19f3e:	4a1d      	ldr	r2, [pc, #116]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19f40:	3308      	adds	r3, #8
   19f42:	005b      	lsls	r3, r3, #1
   19f44:	18d3      	adds	r3, r2, r3
   19f46:	3302      	adds	r3, #2
   19f48:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19f4a:	1acb      	subs	r3, r1, r3
   19f4c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19f4e:	1dfb      	adds	r3, r7, #7
   19f50:	781b      	ldrb	r3, [r3, #0]
   19f52:	4a18      	ldr	r2, [pc, #96]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19f54:	3318      	adds	r3, #24
   19f56:	005b      	lsls	r3, r3, #1
   19f58:	18d3      	adds	r3, r2, r3
   19f5a:	3306      	adds	r3, #6
   19f5c:	881b      	ldrh	r3, [r3, #0]
   19f5e:	001a      	movs	r2, r3
		if (hndCount >
   19f60:	697b      	ldr	r3, [r7, #20]
   19f62:	429a      	cmp	r2, r3
   19f64:	da0b      	bge.n	19f7e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19f66:	1dfb      	adds	r3, r7, #7
   19f68:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19f6a:	697a      	ldr	r2, [r7, #20]
   19f6c:	b2d2      	uxtb	r2, r2
   19f6e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19f70:	4a10      	ldr	r2, [pc, #64]	; (19fb4 <prvTraceGetObjectHandle+0x18c>)
   19f72:	3318      	adds	r3, #24
   19f74:	005b      	lsls	r3, r3, #1
   19f76:	18d3      	adds	r3, r2, r3
   19f78:	3306      	adds	r3, #6
   19f7a:	1c0a      	adds	r2, r1, #0
   19f7c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19f7e:	4b0c      	ldr	r3, [pc, #48]	; (19fb0 <prvTraceGetObjectHandle+0x188>)
   19f80:	681b      	ldr	r3, [r3, #0]
   19f82:	1e5a      	subs	r2, r3, #1
   19f84:	4b0a      	ldr	r3, [pc, #40]	; (19fb0 <prvTraceGetObjectHandle+0x188>)
   19f86:	601a      	str	r2, [r3, #0]
   19f88:	69bb      	ldr	r3, [r7, #24]
   19f8a:	60bb      	str	r3, [r7, #8]
   19f8c:	68bb      	ldr	r3, [r7, #8]
   19f8e:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19f92:	231f      	movs	r3, #31
   19f94:	18fb      	adds	r3, r7, r3
   19f96:	781b      	ldrb	r3, [r3, #0]
}
   19f98:	0018      	movs	r0, r3
   19f9a:	46bd      	mov	sp, r7
   19f9c:	b008      	add	sp, #32
   19f9e:	bd80      	pop	{r7, pc}
   19fa0:	20000e04 	.word	0x20000e04
   19fa4:	000399e4 	.word	0x000399e4
   19fa8:	0001a145 	.word	0x0001a145
   19fac:	0003a5c4 	.word	0x0003a5c4
   19fb0:	20000d5c 	.word	0x20000d5c
   19fb4:	20000d74 	.word	0x20000d74
   19fb8:	20000e08 	.word	0x20000e08
   19fbc:	00018e65 	.word	0x00018e65

00019fc0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19fc0:	b590      	push	{r4, r7, lr}
   19fc2:	b085      	sub	sp, #20
   19fc4:	af00      	add	r7, sp, #0
   19fc6:	0002      	movs	r2, r0
   19fc8:	1dfb      	adds	r3, r7, #7
   19fca:	701a      	strb	r2, [r3, #0]
   19fcc:	1dbb      	adds	r3, r7, #6
   19fce:	1c0a      	adds	r2, r1, #0
   19fd0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   19fd2:	230e      	movs	r3, #14
   19fd4:	18fc      	adds	r4, r7, r3
   19fd6:	1dfb      	adds	r3, r7, #7
   19fd8:	781a      	ldrb	r2, [r3, #0]
   19fda:	1dbb      	adds	r3, r7, #6
   19fdc:	781b      	ldrb	r3, [r3, #0]
   19fde:	0011      	movs	r1, r2
   19fe0:	0018      	movs	r0, r3
   19fe2:	4b09      	ldr	r3, [pc, #36]	; (1a008 <prvMarkObjectAsUsed+0x48>)
   19fe4:	4798      	blx	r3
   19fe6:	0003      	movs	r3, r0
   19fe8:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19fea:	4b08      	ldr	r3, [pc, #32]	; (1a00c <prvMarkObjectAsUsed+0x4c>)
   19fec:	681a      	ldr	r2, [r3, #0]
   19fee:	230e      	movs	r3, #14
   19ff0:	18fb      	adds	r3, r7, r3
   19ff2:	881b      	ldrh	r3, [r3, #0]
   19ff4:	219c      	movs	r1, #156	; 0x9c
   19ff6:	18d3      	adds	r3, r2, r3
   19ff8:	185b      	adds	r3, r3, r1
   19ffa:	2201      	movs	r2, #1
   19ffc:	701a      	strb	r2, [r3, #0]
}
   19ffe:	46c0      	nop			; (mov r8, r8)
   1a000:	46bd      	mov	sp, r7
   1a002:	b005      	add	sp, #20
   1a004:	bd90      	pop	{r4, r7, pc}
   1a006:	46c0      	nop			; (mov r8, r8)
   1a008:	00019d51 	.word	0x00019d51
   1a00c:	20000e04 	.word	0x20000e04

0001a010 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a010:	b580      	push	{r7, lr}
   1a012:	b086      	sub	sp, #24
   1a014:	af00      	add	r7, sp, #0
   1a016:	60f8      	str	r0, [r7, #12]
   1a018:	60b9      	str	r1, [r7, #8]
   1a01a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a01c:	2300      	movs	r3, #0
   1a01e:	617b      	str	r3, [r7, #20]
   1a020:	e010      	b.n	1a044 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a022:	68fa      	ldr	r2, [r7, #12]
   1a024:	697b      	ldr	r3, [r7, #20]
   1a026:	18d3      	adds	r3, r2, r3
   1a028:	68b9      	ldr	r1, [r7, #8]
   1a02a:	697a      	ldr	r2, [r7, #20]
   1a02c:	188a      	adds	r2, r1, r2
   1a02e:	7812      	ldrb	r2, [r2, #0]
   1a030:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a032:	68ba      	ldr	r2, [r7, #8]
   1a034:	697b      	ldr	r3, [r7, #20]
   1a036:	18d3      	adds	r3, r2, r3
   1a038:	781b      	ldrb	r3, [r3, #0]
   1a03a:	2b00      	cmp	r3, #0
   1a03c:	d007      	beq.n	1a04e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a03e:	697b      	ldr	r3, [r7, #20]
   1a040:	3301      	adds	r3, #1
   1a042:	617b      	str	r3, [r7, #20]
   1a044:	697a      	ldr	r2, [r7, #20]
   1a046:	687b      	ldr	r3, [r7, #4]
   1a048:	429a      	cmp	r2, r3
   1a04a:	d3ea      	bcc.n	1a022 <prvStrncpy+0x12>
			break;
	}
}
   1a04c:	e000      	b.n	1a050 <prvStrncpy+0x40>
			break;
   1a04e:	46c0      	nop			; (mov r8, r8)
}
   1a050:	46c0      	nop			; (mov r8, r8)
   1a052:	46bd      	mov	sp, r7
   1a054:	b006      	add	sp, #24
   1a056:	bd80      	pop	{r7, pc}

0001a058 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a058:	b580      	push	{r7, lr}
   1a05a:	b082      	sub	sp, #8
   1a05c:	af00      	add	r7, sp, #0
   1a05e:	603a      	str	r2, [r7, #0]
   1a060:	1dfb      	adds	r3, r7, #7
   1a062:	1c02      	adds	r2, r0, #0
   1a064:	701a      	strb	r2, [r3, #0]
   1a066:	1dbb      	adds	r3, r7, #6
   1a068:	1c0a      	adds	r2, r1, #0
   1a06a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a06c:	683b      	ldr	r3, [r7, #0]
   1a06e:	2b00      	cmp	r3, #0
   1a070:	d104      	bne.n	1a07c <prvTraceSetObjectName+0x24>
   1a072:	4b2a      	ldr	r3, [pc, #168]	; (1a11c <prvTraceSetObjectName+0xc4>)
   1a074:	0018      	movs	r0, r3
   1a076:	4b2a      	ldr	r3, [pc, #168]	; (1a120 <prvTraceSetObjectName+0xc8>)
   1a078:	4798      	blx	r3
   1a07a:	e04b      	b.n	1a114 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a07c:	1dfb      	adds	r3, r7, #7
   1a07e:	781b      	ldrb	r3, [r3, #0]
   1a080:	2b08      	cmp	r3, #8
   1a082:	d904      	bls.n	1a08e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a084:	4b27      	ldr	r3, [pc, #156]	; (1a124 <prvTraceSetObjectName+0xcc>)
   1a086:	0018      	movs	r0, r3
   1a088:	4b25      	ldr	r3, [pc, #148]	; (1a120 <prvTraceSetObjectName+0xc8>)
   1a08a:	4798      	blx	r3
		return;
   1a08c:	e042      	b.n	1a114 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a08e:	1dbb      	adds	r3, r7, #6
   1a090:	781b      	ldrb	r3, [r3, #0]
   1a092:	2b00      	cmp	r3, #0
   1a094:	d104      	bne.n	1a0a0 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a096:	4b24      	ldr	r3, [pc, #144]	; (1a128 <prvTraceSetObjectName+0xd0>)
   1a098:	0018      	movs	r0, r3
   1a09a:	4b21      	ldr	r3, [pc, #132]	; (1a120 <prvTraceSetObjectName+0xc8>)
   1a09c:	4798      	blx	r3
		return;
   1a09e:	e039      	b.n	1a114 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a0a0:	4b22      	ldr	r3, [pc, #136]	; (1a12c <prvTraceSetObjectName+0xd4>)
   1a0a2:	681a      	ldr	r2, [r3, #0]
   1a0a4:	1dfb      	adds	r3, r7, #7
   1a0a6:	781b      	ldrb	r3, [r3, #0]
   1a0a8:	2164      	movs	r1, #100	; 0x64
   1a0aa:	18d3      	adds	r3, r2, r3
   1a0ac:	185b      	adds	r3, r3, r1
   1a0ae:	781b      	ldrb	r3, [r3, #0]
   1a0b0:	1dba      	adds	r2, r7, #6
   1a0b2:	7812      	ldrb	r2, [r2, #0]
   1a0b4:	429a      	cmp	r2, r3
   1a0b6:	d909      	bls.n	1a0cc <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a0b8:	1dfb      	adds	r3, r7, #7
   1a0ba:	781b      	ldrb	r3, [r3, #0]
   1a0bc:	0018      	movs	r0, r3
   1a0be:	4b1c      	ldr	r3, [pc, #112]	; (1a130 <prvTraceSetObjectName+0xd8>)
   1a0c0:	4798      	blx	r3
   1a0c2:	0003      	movs	r3, r0
   1a0c4:	0018      	movs	r0, r3
   1a0c6:	4b16      	ldr	r3, [pc, #88]	; (1a120 <prvTraceSetObjectName+0xc8>)
   1a0c8:	4798      	blx	r3
   1a0ca:	e023      	b.n	1a114 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a0cc:	1dfb      	adds	r3, r7, #7
   1a0ce:	781a      	ldrb	r2, [r3, #0]
   1a0d0:	1dbb      	adds	r3, r7, #6
   1a0d2:	781b      	ldrb	r3, [r3, #0]
   1a0d4:	0011      	movs	r1, r2
   1a0d6:	0018      	movs	r0, r3
   1a0d8:	4b16      	ldr	r3, [pc, #88]	; (1a134 <prvTraceSetObjectName+0xdc>)
   1a0da:	4798      	blx	r3
   1a0dc:	0003      	movs	r3, r0
   1a0de:	001a      	movs	r2, r3
   1a0e0:	4b15      	ldr	r3, [pc, #84]	; (1a138 <prvTraceSetObjectName+0xe0>)
   1a0e2:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a0e4:	4b15      	ldr	r3, [pc, #84]	; (1a13c <prvTraceSetObjectName+0xe4>)
   1a0e6:	681b      	ldr	r3, [r3, #0]
   1a0e8:	2b00      	cmp	r3, #0
   1a0ea:	d113      	bne.n	1a114 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a0ec:	4b0f      	ldr	r3, [pc, #60]	; (1a12c <prvTraceSetObjectName+0xd4>)
   1a0ee:	681a      	ldr	r2, [r3, #0]
   1a0f0:	4b11      	ldr	r3, [pc, #68]	; (1a138 <prvTraceSetObjectName+0xe0>)
   1a0f2:	881b      	ldrh	r3, [r3, #0]
   1a0f4:	3398      	adds	r3, #152	; 0x98
   1a0f6:	18d3      	adds	r3, r2, r3
   1a0f8:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a0fa:	4b0c      	ldr	r3, [pc, #48]	; (1a12c <prvTraceSetObjectName+0xd4>)
   1a0fc:	681a      	ldr	r2, [r3, #0]
   1a0fe:	1dfb      	adds	r3, r7, #7
   1a100:	781b      	ldrb	r3, [r3, #0]
   1a102:	2170      	movs	r1, #112	; 0x70
   1a104:	18d3      	adds	r3, r2, r3
   1a106:	185b      	adds	r3, r3, r1
   1a108:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a10a:	001a      	movs	r2, r3
   1a10c:	683b      	ldr	r3, [r7, #0]
   1a10e:	0019      	movs	r1, r3
   1a110:	4b0b      	ldr	r3, [pc, #44]	; (1a140 <prvTraceSetObjectName+0xe8>)
   1a112:	4798      	blx	r3
		}
	}
}
   1a114:	46bd      	mov	sp, r7
   1a116:	b002      	add	sp, #8
   1a118:	bd80      	pop	{r7, pc}
   1a11a:	46c0      	nop			; (mov r8, r8)
   1a11c:	0003a6c8 	.word	0x0003a6c8
   1a120:	0001a145 	.word	0x0001a145
   1a124:	0003a6fc 	.word	0x0003a6fc
   1a128:	0003a72c 	.word	0x0003a72c
   1a12c:	20000e04 	.word	0x20000e04
   1a130:	00018e65 	.word	0x00018e65
   1a134:	00019d51 	.word	0x00019d51
   1a138:	20000e0c 	.word	0x20000e0c
   1a13c:	20000d64 	.word	0x20000d64
   1a140:	0001a011 	.word	0x0001a011

0001a144 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a144:	b580      	push	{r7, lr}
   1a146:	b082      	sub	sp, #8
   1a148:	af00      	add	r7, sp, #0
   1a14a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a14c:	4b11      	ldr	r3, [pc, #68]	; (1a194 <prvTraceError+0x50>)
   1a14e:	681b      	ldr	r3, [r3, #0]
   1a150:	2b00      	cmp	r3, #0
   1a152:	d001      	beq.n	1a158 <prvTraceError+0x14>
	{
		vTraceStop();
   1a154:	4b10      	ldr	r3, [pc, #64]	; (1a198 <prvTraceError+0x54>)
   1a156:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a158:	4b10      	ldr	r3, [pc, #64]	; (1a19c <prvTraceError+0x58>)
   1a15a:	681b      	ldr	r3, [r3, #0]
   1a15c:	2b00      	cmp	r3, #0
   1a15e:	d115      	bne.n	1a18c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a160:	4b0e      	ldr	r3, [pc, #56]	; (1a19c <prvTraceError+0x58>)
   1a162:	687a      	ldr	r2, [r7, #4]
   1a164:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a166:	4b0b      	ldr	r3, [pc, #44]	; (1a194 <prvTraceError+0x50>)
   1a168:	681b      	ldr	r3, [r3, #0]
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	d00e      	beq.n	1a18c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a16e:	4b09      	ldr	r3, [pc, #36]	; (1a194 <prvTraceError+0x50>)
   1a170:	681b      	ldr	r3, [r3, #0]
   1a172:	4a0b      	ldr	r2, [pc, #44]	; (1a1a0 <prvTraceError+0x5c>)
   1a174:	1898      	adds	r0, r3, r2
   1a176:	4b09      	ldr	r3, [pc, #36]	; (1a19c <prvTraceError+0x58>)
   1a178:	681b      	ldr	r3, [r3, #0]
   1a17a:	2250      	movs	r2, #80	; 0x50
   1a17c:	0019      	movs	r1, r3
   1a17e:	4b09      	ldr	r3, [pc, #36]	; (1a1a4 <prvTraceError+0x60>)
   1a180:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a182:	4b04      	ldr	r3, [pc, #16]	; (1a194 <prvTraceError+0x50>)
   1a184:	681b      	ldr	r3, [r3, #0]
   1a186:	4a08      	ldr	r2, [pc, #32]	; (1a1a8 <prvTraceError+0x64>)
   1a188:	2101      	movs	r1, #1
   1a18a:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a18c:	46c0      	nop			; (mov r8, r8)
   1a18e:	46bd      	mov	sp, r7
   1a190:	b002      	add	sp, #8
   1a192:	bd80      	pop	{r7, pc}
   1a194:	20000e04 	.word	0x20000e04
   1a198:	00019009 	.word	0x00019009
   1a19c:	20000d64 	.word	0x20000d64
   1a1a0:	000006bc 	.word	0x000006bc
   1a1a4:	0001a011 	.word	0x0001a011
   1a1a8:	000006b4 	.word	0x000006b4

0001a1ac <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a1ac:	b580      	push	{r7, lr}
   1a1ae:	b086      	sub	sp, #24
   1a1b0:	af00      	add	r7, sp, #0
   1a1b2:	0002      	movs	r2, r0
   1a1b4:	1dfb      	adds	r3, r7, #7
   1a1b6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a1b8:	2300      	movs	r3, #0
   1a1ba:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a1bc:	2300      	movs	r3, #0
   1a1be:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a1c0:	1dfb      	adds	r3, r7, #7
   1a1c2:	781b      	ldrb	r3, [r3, #0]
   1a1c4:	2b00      	cmp	r3, #0
   1a1c6:	d000      	beq.n	1a1ca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a1c8:	e089      	b.n	1a2de <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a1ca:	4b49      	ldr	r3, [pc, #292]	; (1a2f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a1cc:	0018      	movs	r0, r3
   1a1ce:	4b49      	ldr	r3, [pc, #292]	; (1a2f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a1d0:	4798      	blx	r3
   1a1d2:	e08a      	b.n	1a2ea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a1d4:	4b48      	ldr	r3, [pc, #288]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a1d6:	681b      	ldr	r3, [r3, #0]
   1a1d8:	69da      	ldr	r2, [r3, #28]
   1a1da:	697b      	ldr	r3, [r7, #20]
   1a1dc:	18d3      	adds	r3, r2, r3
   1a1de:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a1e0:	4b45      	ldr	r3, [pc, #276]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a1e2:	6819      	ldr	r1, [r3, #0]
   1a1e4:	693b      	ldr	r3, [r7, #16]
   1a1e6:	009a      	lsls	r2, r3, #2
   1a1e8:	23e2      	movs	r3, #226	; 0xe2
   1a1ea:	00db      	lsls	r3, r3, #3
   1a1ec:	188a      	adds	r2, r1, r2
   1a1ee:	18d3      	adds	r3, r2, r3
   1a1f0:	781b      	ldrb	r3, [r3, #0]
   1a1f2:	2b98      	cmp	r3, #152	; 0x98
   1a1f4:	d934      	bls.n	1a260 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a1f6:	4b40      	ldr	r3, [pc, #256]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a1f8:	6819      	ldr	r1, [r3, #0]
   1a1fa:	693b      	ldr	r3, [r7, #16]
   1a1fc:	009a      	lsls	r2, r3, #2
   1a1fe:	23e2      	movs	r3, #226	; 0xe2
   1a200:	00db      	lsls	r3, r3, #3
   1a202:	188a      	adds	r2, r1, r2
   1a204:	18d3      	adds	r3, r2, r3
   1a206:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a208:	2ba7      	cmp	r3, #167	; 0xa7
   1a20a:	d829      	bhi.n	1a260 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a20c:	4b3a      	ldr	r3, [pc, #232]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a20e:	6819      	ldr	r1, [r3, #0]
   1a210:	693b      	ldr	r3, [r7, #16]
   1a212:	009a      	lsls	r2, r3, #2
   1a214:	23e2      	movs	r3, #226	; 0xe2
   1a216:	00db      	lsls	r3, r3, #3
   1a218:	188a      	adds	r2, r1, r2
   1a21a:	18d3      	adds	r3, r2, r3
   1a21c:	781a      	ldrb	r2, [r3, #0]
   1a21e:	230f      	movs	r3, #15
   1a220:	18fb      	adds	r3, r7, r3
   1a222:	3268      	adds	r2, #104	; 0x68
   1a224:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a226:	230f      	movs	r3, #15
   1a228:	18fb      	adds	r3, r7, r3
   1a22a:	781a      	ldrb	r2, [r3, #0]
   1a22c:	693b      	ldr	r3, [r7, #16]
   1a22e:	18d2      	adds	r2, r2, r3
   1a230:	4b31      	ldr	r3, [pc, #196]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a232:	681b      	ldr	r3, [r3, #0]
   1a234:	699b      	ldr	r3, [r3, #24]
   1a236:	429a      	cmp	r2, r3
   1a238:	d24d      	bcs.n	1a2d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a23a:	4b2f      	ldr	r3, [pc, #188]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a23c:	681a      	ldr	r2, [r3, #0]
   1a23e:	693b      	ldr	r3, [r7, #16]
   1a240:	009b      	lsls	r3, r3, #2
   1a242:	21e2      	movs	r1, #226	; 0xe2
   1a244:	00c9      	lsls	r1, r1, #3
   1a246:	468c      	mov	ip, r1
   1a248:	4463      	add	r3, ip
   1a24a:	18d0      	adds	r0, r2, r3
   1a24c:	230f      	movs	r3, #15
   1a24e:	18fb      	adds	r3, r7, r3
   1a250:	781b      	ldrb	r3, [r3, #0]
   1a252:	3301      	adds	r3, #1
   1a254:	009b      	lsls	r3, r3, #2
   1a256:	001a      	movs	r2, r3
   1a258:	2100      	movs	r1, #0
   1a25a:	4b28      	ldr	r3, [pc, #160]	; (1a2fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a25c:	4798      	blx	r3
		{
   1a25e:	e03a      	b.n	1a2d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a260:	4b25      	ldr	r3, [pc, #148]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a262:	6819      	ldr	r1, [r3, #0]
   1a264:	693b      	ldr	r3, [r7, #16]
   1a266:	009a      	lsls	r2, r3, #2
   1a268:	23e2      	movs	r3, #226	; 0xe2
   1a26a:	00db      	lsls	r3, r3, #3
   1a26c:	188a      	adds	r2, r1, r2
   1a26e:	18d3      	adds	r3, r2, r3
   1a270:	781b      	ldrb	r3, [r3, #0]
   1a272:	2b01      	cmp	r3, #1
   1a274:	d130      	bne.n	1a2d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a276:	693b      	ldr	r3, [r7, #16]
   1a278:	1c5a      	adds	r2, r3, #1
   1a27a:	4b1f      	ldr	r3, [pc, #124]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a27c:	681b      	ldr	r3, [r3, #0]
   1a27e:	699b      	ldr	r3, [r3, #24]
   1a280:	429a      	cmp	r2, r3
   1a282:	d20e      	bcs.n	1a2a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a284:	4b1c      	ldr	r3, [pc, #112]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a286:	681a      	ldr	r2, [r3, #0]
   1a288:	693b      	ldr	r3, [r7, #16]
   1a28a:	009b      	lsls	r3, r3, #2
   1a28c:	21e2      	movs	r1, #226	; 0xe2
   1a28e:	00c9      	lsls	r1, r1, #3
   1a290:	468c      	mov	ip, r1
   1a292:	4463      	add	r3, ip
   1a294:	18d3      	adds	r3, r2, r3
   1a296:	2208      	movs	r2, #8
   1a298:	2100      	movs	r1, #0
   1a29a:	0018      	movs	r0, r3
   1a29c:	4b17      	ldr	r3, [pc, #92]	; (1a2fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a29e:	4798      	blx	r3
   1a2a0:	e01a      	b.n	1a2d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a2a2:	4b15      	ldr	r3, [pc, #84]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a2a4:	681b      	ldr	r3, [r3, #0]
   1a2a6:	22e2      	movs	r2, #226	; 0xe2
   1a2a8:	00d2      	lsls	r2, r2, #3
   1a2aa:	4694      	mov	ip, r2
   1a2ac:	4463      	add	r3, ip
   1a2ae:	2204      	movs	r2, #4
   1a2b0:	2100      	movs	r1, #0
   1a2b2:	0018      	movs	r0, r3
   1a2b4:	4b11      	ldr	r3, [pc, #68]	; (1a2fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a2b6:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a2b8:	4b0f      	ldr	r3, [pc, #60]	; (1a2f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a2ba:	681a      	ldr	r2, [r3, #0]
   1a2bc:	693b      	ldr	r3, [r7, #16]
   1a2be:	009b      	lsls	r3, r3, #2
   1a2c0:	21e2      	movs	r1, #226	; 0xe2
   1a2c2:	00c9      	lsls	r1, r1, #3
   1a2c4:	468c      	mov	ip, r1
   1a2c6:	4463      	add	r3, ip
   1a2c8:	18d3      	adds	r3, r2, r3
   1a2ca:	2204      	movs	r2, #4
   1a2cc:	2100      	movs	r1, #0
   1a2ce:	0018      	movs	r0, r3
   1a2d0:	4b0a      	ldr	r3, [pc, #40]	; (1a2fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a2d2:	4798      	blx	r3
   1a2d4:	e000      	b.n	1a2d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a2d6:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a2d8:	697b      	ldr	r3, [r7, #20]
   1a2da:	3301      	adds	r3, #1
   1a2dc:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a2de:	1dfb      	adds	r3, r7, #7
   1a2e0:	781a      	ldrb	r2, [r3, #0]
   1a2e2:	697b      	ldr	r3, [r7, #20]
   1a2e4:	429a      	cmp	r2, r3
   1a2e6:	d900      	bls.n	1a2ea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a2e8:	e774      	b.n	1a1d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a2ea:	46bd      	mov	sp, r7
   1a2ec:	b006      	add	sp, #24
   1a2ee:	bd80      	pop	{r7, pc}
   1a2f0:	0003a78c 	.word	0x0003a78c
   1a2f4:	0001a145 	.word	0x0001a145
   1a2f8:	20000e04 	.word	0x20000e04
   1a2fc:	00035377 	.word	0x00035377

0001a300 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a300:	b580      	push	{r7, lr}
   1a302:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a304:	4b12      	ldr	r3, [pc, #72]	; (1a350 <prvTraceUpdateCounters+0x50>)
   1a306:	681b      	ldr	r3, [r3, #0]
   1a308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a30a:	2b00      	cmp	r3, #0
   1a30c:	d01c      	beq.n	1a348 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a30e:	4b10      	ldr	r3, [pc, #64]	; (1a350 <prvTraceUpdateCounters+0x50>)
   1a310:	681b      	ldr	r3, [r3, #0]
   1a312:	695a      	ldr	r2, [r3, #20]
   1a314:	3201      	adds	r2, #1
   1a316:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a318:	4b0d      	ldr	r3, [pc, #52]	; (1a350 <prvTraceUpdateCounters+0x50>)
   1a31a:	681b      	ldr	r3, [r3, #0]
   1a31c:	69da      	ldr	r2, [r3, #28]
   1a31e:	3201      	adds	r2, #1
   1a320:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a322:	4b0b      	ldr	r3, [pc, #44]	; (1a350 <prvTraceUpdateCounters+0x50>)
   1a324:	681b      	ldr	r3, [r3, #0]
   1a326:	69da      	ldr	r2, [r3, #28]
   1a328:	232c      	movs	r3, #44	; 0x2c
   1a32a:	33ff      	adds	r3, #255	; 0xff
   1a32c:	429a      	cmp	r2, r3
   1a32e:	d907      	bls.n	1a340 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a330:	4b07      	ldr	r3, [pc, #28]	; (1a350 <prvTraceUpdateCounters+0x50>)
   1a332:	681b      	ldr	r3, [r3, #0]
   1a334:	2201      	movs	r2, #1
   1a336:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a338:	4b05      	ldr	r3, [pc, #20]	; (1a350 <prvTraceUpdateCounters+0x50>)
   1a33a:	681b      	ldr	r3, [r3, #0]
   1a33c:	2200      	movs	r2, #0
   1a33e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a340:	2001      	movs	r0, #1
   1a342:	4b04      	ldr	r3, [pc, #16]	; (1a354 <prvTraceUpdateCounters+0x54>)
   1a344:	4798      	blx	r3
   1a346:	e000      	b.n	1a34a <prvTraceUpdateCounters+0x4a>
		return;
   1a348:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a34a:	46bd      	mov	sp, r7
   1a34c:	bd80      	pop	{r7, pc}
   1a34e:	46c0      	nop			; (mov r8, r8)
   1a350:	20000e04 	.word	0x20000e04
   1a354:	0001a1ad 	.word	0x0001a1ad

0001a358 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a358:	b5b0      	push	{r4, r5, r7, lr}
   1a35a:	b086      	sub	sp, #24
   1a35c:	af00      	add	r7, sp, #0
   1a35e:	0002      	movs	r2, r0
   1a360:	1dbb      	adds	r3, r7, #6
   1a362:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a364:	2300      	movs	r3, #0
   1a366:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a368:	2300      	movs	r3, #0
   1a36a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a36c:	2300      	movs	r3, #0
   1a36e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a370:	1dbb      	adds	r3, r7, #6
   1a372:	881b      	ldrh	r3, [r3, #0]
   1a374:	2bff      	cmp	r3, #255	; 0xff
   1a376:	d00a      	beq.n	1a38e <prvTraceGetDTS+0x36>
   1a378:	1dbb      	adds	r3, r7, #6
   1a37a:	881b      	ldrh	r3, [r3, #0]
   1a37c:	4a60      	ldr	r2, [pc, #384]	; (1a500 <prvTraceGetDTS+0x1a8>)
   1a37e:	4293      	cmp	r3, r2
   1a380:	d005      	beq.n	1a38e <prvTraceGetDTS+0x36>
   1a382:	4b60      	ldr	r3, [pc, #384]	; (1a504 <prvTraceGetDTS+0x1ac>)
   1a384:	0018      	movs	r0, r3
   1a386:	4b60      	ldr	r3, [pc, #384]	; (1a508 <prvTraceGetDTS+0x1b0>)
   1a388:	4798      	blx	r3
   1a38a:	2300      	movs	r3, #0
   1a38c:	e0b3      	b.n	1a4f6 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a38e:	4b5f      	ldr	r3, [pc, #380]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a390:	681b      	ldr	r3, [r3, #0]
   1a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a394:	2b00      	cmp	r3, #0
   1a396:	d118      	bne.n	1a3ca <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a398:	4b5d      	ldr	r3, [pc, #372]	; (1a510 <prvTraceGetDTS+0x1b8>)
   1a39a:	681b      	ldr	r3, [r3, #0]
   1a39c:	2b00      	cmp	r3, #0
   1a39e:	d006      	beq.n	1a3ae <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a3a0:	4b5a      	ldr	r3, [pc, #360]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a3a2:	681b      	ldr	r3, [r3, #0]
   1a3a4:	4a5a      	ldr	r2, [pc, #360]	; (1a510 <prvTraceGetDTS+0x1b8>)
   1a3a6:	6812      	ldr	r2, [r2, #0]
   1a3a8:	0892      	lsrs	r2, r2, #2
   1a3aa:	625a      	str	r2, [r3, #36]	; 0x24
   1a3ac:	e00d      	b.n	1a3ca <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a3ae:	4b59      	ldr	r3, [pc, #356]	; (1a514 <prvTraceGetDTS+0x1bc>)
   1a3b0:	681a      	ldr	r2, [r3, #0]
   1a3b2:	4b59      	ldr	r3, [pc, #356]	; (1a518 <prvTraceGetDTS+0x1c0>)
   1a3b4:	681b      	ldr	r3, [r3, #0]
   1a3b6:	429a      	cmp	r2, r3
   1a3b8:	d007      	beq.n	1a3ca <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a3ba:	4b54      	ldr	r3, [pc, #336]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a3bc:	681c      	ldr	r4, [r3, #0]
   1a3be:	2000      	movs	r0, #0
   1a3c0:	4b56      	ldr	r3, [pc, #344]	; (1a51c <prvTraceGetDTS+0x1c4>)
   1a3c2:	4798      	blx	r3
   1a3c4:	0003      	movs	r3, r0
   1a3c6:	089b      	lsrs	r3, r3, #2
   1a3c8:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a3ca:	230c      	movs	r3, #12
   1a3cc:	18fb      	adds	r3, r7, r3
   1a3ce:	0018      	movs	r0, r3
   1a3d0:	4b53      	ldr	r3, [pc, #332]	; (1a520 <prvTraceGetDTS+0x1c8>)
   1a3d2:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a3d4:	68fa      	ldr	r2, [r7, #12]
   1a3d6:	4b53      	ldr	r3, [pc, #332]	; (1a524 <prvTraceGetDTS+0x1cc>)
   1a3d8:	681b      	ldr	r3, [r3, #0]
   1a3da:	1ad3      	subs	r3, r2, r3
   1a3dc:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a3de:	68fa      	ldr	r2, [r7, #12]
   1a3e0:	4b50      	ldr	r3, [pc, #320]	; (1a524 <prvTraceGetDTS+0x1cc>)
   1a3e2:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a3e4:	4b49      	ldr	r3, [pc, #292]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a3e6:	681b      	ldr	r3, [r3, #0]
   1a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a3ea:	2b00      	cmp	r3, #0
   1a3ec:	d044      	beq.n	1a478 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a3ee:	4b47      	ldr	r3, [pc, #284]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a3f0:	681b      	ldr	r3, [r3, #0]
   1a3f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a3f4:	693b      	ldr	r3, [r7, #16]
   1a3f6:	429a      	cmp	r2, r3
   1a3f8:	d21e      	bcs.n	1a438 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a3fa:	4b44      	ldr	r3, [pc, #272]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a3fc:	681c      	ldr	r4, [r3, #0]
   1a3fe:	4b43      	ldr	r3, [pc, #268]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a400:	681b      	ldr	r3, [r3, #0]
   1a402:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a404:	4b41      	ldr	r3, [pc, #260]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a406:	681b      	ldr	r3, [r3, #0]
   1a408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a40a:	4b47      	ldr	r3, [pc, #284]	; (1a528 <prvTraceGetDTS+0x1d0>)
   1a40c:	0011      	movs	r1, r2
   1a40e:	6938      	ldr	r0, [r7, #16]
   1a410:	4798      	blx	r3
   1a412:	0003      	movs	r3, r0
   1a414:	18eb      	adds	r3, r5, r3
   1a416:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a418:	4b3c      	ldr	r3, [pc, #240]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a41a:	681c      	ldr	r4, [r3, #0]
   1a41c:	4b3b      	ldr	r3, [pc, #236]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a41e:	681b      	ldr	r3, [r3, #0]
   1a420:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a422:	4b3a      	ldr	r3, [pc, #232]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a424:	681b      	ldr	r3, [r3, #0]
   1a426:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a428:	693a      	ldr	r2, [r7, #16]
   1a42a:	4b40      	ldr	r3, [pc, #256]	; (1a52c <prvTraceGetDTS+0x1d4>)
   1a42c:	0010      	movs	r0, r2
   1a42e:	4798      	blx	r3
   1a430:	000b      	movs	r3, r1
   1a432:	18eb      	adds	r3, r5, r3
   1a434:	62a3      	str	r3, [r4, #40]	; 0x28
   1a436:	e007      	b.n	1a448 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a438:	4b34      	ldr	r3, [pc, #208]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a43a:	681b      	ldr	r3, [r3, #0]
   1a43c:	4a33      	ldr	r2, [pc, #204]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a43e:	6812      	ldr	r2, [r2, #0]
   1a440:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a442:	693a      	ldr	r2, [r7, #16]
   1a444:	188a      	adds	r2, r1, r2
   1a446:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a448:	4b30      	ldr	r3, [pc, #192]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a44a:	681b      	ldr	r3, [r3, #0]
   1a44c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a44e:	4b2f      	ldr	r3, [pc, #188]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a450:	681b      	ldr	r3, [r3, #0]
   1a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a454:	429a      	cmp	r2, r3
   1a456:	d313      	bcc.n	1a480 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a458:	4b2c      	ldr	r3, [pc, #176]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a45a:	681b      	ldr	r3, [r3, #0]
   1a45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a45e:	3201      	adds	r2, #1
   1a460:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a462:	4b2a      	ldr	r3, [pc, #168]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a464:	681b      	ldr	r3, [r3, #0]
   1a466:	4a29      	ldr	r2, [pc, #164]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a468:	6812      	ldr	r2, [r2, #0]
   1a46a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a46c:	4a27      	ldr	r2, [pc, #156]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a46e:	6812      	ldr	r2, [r2, #0]
   1a470:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a472:	1a8a      	subs	r2, r1, r2
   1a474:	629a      	str	r2, [r3, #40]	; 0x28
   1a476:	e003      	b.n	1a480 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a478:	4b24      	ldr	r3, [pc, #144]	; (1a50c <prvTraceGetDTS+0x1b4>)
   1a47a:	681b      	ldr	r3, [r3, #0]
   1a47c:	68fa      	ldr	r2, [r7, #12]
   1a47e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a480:	1dbb      	adds	r3, r7, #6
   1a482:	881a      	ldrh	r2, [r3, #0]
   1a484:	693b      	ldr	r3, [r7, #16]
   1a486:	429a      	cmp	r2, r3
   1a488:	d22f      	bcs.n	1a4ea <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a48a:	4b29      	ldr	r3, [pc, #164]	; (1a530 <prvTraceGetDTS+0x1d8>)
   1a48c:	4798      	blx	r3
   1a48e:	0003      	movs	r3, r0
   1a490:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a492:	697b      	ldr	r3, [r7, #20]
   1a494:	2b00      	cmp	r3, #0
   1a496:	d028      	beq.n	1a4ea <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a498:	1dbb      	adds	r3, r7, #6
   1a49a:	881b      	ldrh	r3, [r3, #0]
   1a49c:	4a18      	ldr	r2, [pc, #96]	; (1a500 <prvTraceGetDTS+0x1a8>)
   1a49e:	4293      	cmp	r3, r2
   1a4a0:	d10b      	bne.n	1a4ba <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a4a2:	697b      	ldr	r3, [r7, #20]
   1a4a4:	22a9      	movs	r2, #169	; 0xa9
   1a4a6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a4a8:	693b      	ldr	r3, [r7, #16]
   1a4aa:	0c1b      	lsrs	r3, r3, #16
   1a4ac:	b29a      	uxth	r2, r3
   1a4ae:	697b      	ldr	r3, [r7, #20]
   1a4b0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a4b2:	697b      	ldr	r3, [r7, #20]
   1a4b4:	2200      	movs	r2, #0
   1a4b6:	705a      	strb	r2, [r3, #1]
   1a4b8:	e015      	b.n	1a4e6 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a4ba:	1dbb      	adds	r3, r7, #6
   1a4bc:	881b      	ldrh	r3, [r3, #0]
   1a4be:	2bff      	cmp	r3, #255	; 0xff
   1a4c0:	d10d      	bne.n	1a4de <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a4c2:	697b      	ldr	r3, [r7, #20]
   1a4c4:	22a8      	movs	r2, #168	; 0xa8
   1a4c6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a4c8:	693b      	ldr	r3, [r7, #16]
   1a4ca:	0a1b      	lsrs	r3, r3, #8
   1a4cc:	b29a      	uxth	r2, r3
   1a4ce:	697b      	ldr	r3, [r7, #20]
   1a4d0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a4d2:	693b      	ldr	r3, [r7, #16]
   1a4d4:	0e1b      	lsrs	r3, r3, #24
   1a4d6:	b2da      	uxtb	r2, r3
   1a4d8:	697b      	ldr	r3, [r7, #20]
   1a4da:	705a      	strb	r2, [r3, #1]
   1a4dc:	e003      	b.n	1a4e6 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a4de:	4b15      	ldr	r3, [pc, #84]	; (1a534 <prvTraceGetDTS+0x1dc>)
   1a4e0:	0018      	movs	r0, r3
   1a4e2:	4b09      	ldr	r3, [pc, #36]	; (1a508 <prvTraceGetDTS+0x1b0>)
   1a4e4:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a4e6:	4b14      	ldr	r3, [pc, #80]	; (1a538 <prvTraceGetDTS+0x1e0>)
   1a4e8:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a4ea:	693b      	ldr	r3, [r7, #16]
   1a4ec:	b29b      	uxth	r3, r3
   1a4ee:	1dba      	adds	r2, r7, #6
   1a4f0:	8812      	ldrh	r2, [r2, #0]
   1a4f2:	4013      	ands	r3, r2
   1a4f4:	b29b      	uxth	r3, r3
}
   1a4f6:	0018      	movs	r0, r3
   1a4f8:	46bd      	mov	sp, r7
   1a4fa:	b006      	add	sp, #24
   1a4fc:	bdb0      	pop	{r4, r5, r7, pc}
   1a4fe:	46c0      	nop			; (mov r8, r8)
   1a500:	0000ffff 	.word	0x0000ffff
   1a504:	0003a7e4 	.word	0x0003a7e4
   1a508:	0001a145 	.word	0x0001a145
   1a50c:	20000e04 	.word	0x20000e04
   1a510:	20000d60 	.word	0x20000d60
   1a514:	e000e018 	.word	0xe000e018
   1a518:	20005794 	.word	0x20005794
   1a51c:	0002a419 	.word	0x0002a419
   1a520:	0001a53d 	.word	0x0001a53d
   1a524:	20000e10 	.word	0x20000e10
   1a528:	00033035 	.word	0x00033035
   1a52c:	00033141 	.word	0x00033141
   1a530:	00019cfd 	.word	0x00019cfd
   1a534:	0003a824 	.word	0x0003a824
   1a538:	0001a301 	.word	0x0001a301

0001a53c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a53c:	b580      	push	{r7, lr}
   1a53e:	b084      	sub	sp, #16
   1a540:	af00      	add	r7, sp, #0
   1a542:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a544:	2300      	movs	r3, #0
   1a546:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a548:	2300      	movs	r3, #0
   1a54a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a54c:	4b2d      	ldr	r3, [pc, #180]	; (1a604 <prvTracePortGetTimeStamp+0xc8>)
   1a54e:	681b      	ldr	r3, [r3, #0]
   1a550:	2b01      	cmp	r3, #1
   1a552:	d107      	bne.n	1a564 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a554:	687b      	ldr	r3, [r7, #4]
   1a556:	2b00      	cmp	r3, #0
   1a558:	d04f      	beq.n	1a5fa <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a55a:	4b2b      	ldr	r3, [pc, #172]	; (1a608 <prvTracePortGetTimeStamp+0xcc>)
   1a55c:	681a      	ldr	r2, [r3, #0]
   1a55e:	687b      	ldr	r3, [r7, #4]
   1a560:	601a      	str	r2, [r3, #0]
		return;
   1a562:	e04a      	b.n	1a5fa <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a564:	4b29      	ldr	r3, [pc, #164]	; (1a60c <prvTracePortGetTimeStamp+0xd0>)
   1a566:	681a      	ldr	r2, [r3, #0]
   1a568:	4b29      	ldr	r3, [pc, #164]	; (1a610 <prvTracePortGetTimeStamp+0xd4>)
   1a56a:	681b      	ldr	r3, [r3, #0]
   1a56c:	1ad3      	subs	r3, r2, r3
   1a56e:	3301      	adds	r3, #1
   1a570:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a572:	4b28      	ldr	r3, [pc, #160]	; (1a614 <prvTracePortGetTimeStamp+0xd8>)
   1a574:	681a      	ldr	r2, [r3, #0]
   1a576:	4b28      	ldr	r3, [pc, #160]	; (1a618 <prvTracePortGetTimeStamp+0xdc>)
   1a578:	681b      	ldr	r3, [r3, #0]
   1a57a:	1ad3      	subs	r3, r2, r3
   1a57c:	3b01      	subs	r3, #1
   1a57e:	2b00      	cmp	r3, #0
   1a580:	db03      	blt.n	1a58a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a582:	4b24      	ldr	r3, [pc, #144]	; (1a614 <prvTracePortGetTimeStamp+0xd8>)
   1a584:	681b      	ldr	r3, [r3, #0]
   1a586:	60fb      	str	r3, [r7, #12]
   1a588:	e002      	b.n	1a590 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a58a:	4b23      	ldr	r3, [pc, #140]	; (1a618 <prvTracePortGetTimeStamp+0xdc>)
   1a58c:	681b      	ldr	r3, [r3, #0]
   1a58e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a590:	4b20      	ldr	r3, [pc, #128]	; (1a614 <prvTracePortGetTimeStamp+0xd8>)
   1a592:	681b      	ldr	r3, [r3, #0]
   1a594:	68fa      	ldr	r2, [r7, #12]
   1a596:	429a      	cmp	r2, r3
   1a598:	d107      	bne.n	1a5aa <prvTracePortGetTimeStamp+0x6e>
   1a59a:	4b20      	ldr	r3, [pc, #128]	; (1a61c <prvTracePortGetTimeStamp+0xe0>)
   1a59c:	681b      	ldr	r3, [r3, #0]
   1a59e:	68ba      	ldr	r2, [r7, #8]
   1a5a0:	429a      	cmp	r2, r3
   1a5a2:	d202      	bcs.n	1a5aa <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a5a4:	68fb      	ldr	r3, [r7, #12]
   1a5a6:	3301      	adds	r3, #1
   1a5a8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a5aa:	687b      	ldr	r3, [r7, #4]
   1a5ac:	2b00      	cmp	r3, #0
   1a5ae:	d016      	beq.n	1a5de <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a5b0:	4b16      	ldr	r3, [pc, #88]	; (1a60c <prvTracePortGetTimeStamp+0xd0>)
   1a5b2:	681b      	ldr	r3, [r3, #0]
   1a5b4:	3301      	adds	r3, #1
   1a5b6:	089b      	lsrs	r3, r3, #2
   1a5b8:	68fa      	ldr	r2, [r7, #12]
   1a5ba:	435a      	muls	r2, r3
   1a5bc:	4b12      	ldr	r3, [pc, #72]	; (1a608 <prvTracePortGetTimeStamp+0xcc>)
   1a5be:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a5c0:	4b12      	ldr	r3, [pc, #72]	; (1a60c <prvTracePortGetTimeStamp+0xd0>)
   1a5c2:	681b      	ldr	r3, [r3, #0]
   1a5c4:	3301      	adds	r3, #1
   1a5c6:	2203      	movs	r2, #3
   1a5c8:	4013      	ands	r3, r2
   1a5ca:	68fa      	ldr	r2, [r7, #12]
   1a5cc:	435a      	muls	r2, r3
   1a5ce:	68bb      	ldr	r3, [r7, #8]
   1a5d0:	18d3      	adds	r3, r2, r3
   1a5d2:	089a      	lsrs	r2, r3, #2
   1a5d4:	4b0c      	ldr	r3, [pc, #48]	; (1a608 <prvTracePortGetTimeStamp+0xcc>)
   1a5d6:	681b      	ldr	r3, [r3, #0]
   1a5d8:	18d2      	adds	r2, r2, r3
   1a5da:	4b0b      	ldr	r3, [pc, #44]	; (1a608 <prvTracePortGetTimeStamp+0xcc>)
   1a5dc:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a5de:	4b0d      	ldr	r3, [pc, #52]	; (1a614 <prvTracePortGetTimeStamp+0xd8>)
   1a5e0:	68fa      	ldr	r2, [r7, #12]
   1a5e2:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a5e4:	687b      	ldr	r3, [r7, #4]
   1a5e6:	2b00      	cmp	r3, #0
   1a5e8:	d003      	beq.n	1a5f2 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a5ea:	4b07      	ldr	r3, [pc, #28]	; (1a608 <prvTracePortGetTimeStamp+0xcc>)
   1a5ec:	681a      	ldr	r2, [r3, #0]
   1a5ee:	687b      	ldr	r3, [r7, #4]
   1a5f0:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a5f2:	4b0a      	ldr	r3, [pc, #40]	; (1a61c <prvTracePortGetTimeStamp+0xe0>)
   1a5f4:	68ba      	ldr	r2, [r7, #8]
   1a5f6:	601a      	str	r2, [r3, #0]
   1a5f8:	e000      	b.n	1a5fc <prvTracePortGetTimeStamp+0xc0>
		return;
   1a5fa:	46c0      	nop			; (mov r8, r8)
}
   1a5fc:	46bd      	mov	sp, r7
   1a5fe:	b004      	add	sp, #16
   1a600:	bd80      	pop	{r7, pc}
   1a602:	46c0      	nop			; (mov r8, r8)
   1a604:	20000d50 	.word	0x20000d50
   1a608:	20000d54 	.word	0x20000d54
   1a60c:	e000e014 	.word	0xe000e014
   1a610:	e000e018 	.word	0xe000e018
   1a614:	20000e14 	.word	0x20000e14
   1a618:	20000d4c 	.word	0x20000d4c
   1a61c:	20000e18 	.word	0x20000e18

0001a620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a620:	b580      	push	{r7, lr}
   1a622:	b082      	sub	sp, #8
   1a624:	af00      	add	r7, sp, #0
   1a626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a628:	687b      	ldr	r3, [r7, #4]
   1a62a:	3308      	adds	r3, #8
   1a62c:	001a      	movs	r2, r3
   1a62e:	687b      	ldr	r3, [r7, #4]
   1a630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a632:	687b      	ldr	r3, [r7, #4]
   1a634:	2201      	movs	r2, #1
   1a636:	4252      	negs	r2, r2
   1a638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a63a:	687b      	ldr	r3, [r7, #4]
   1a63c:	3308      	adds	r3, #8
   1a63e:	001a      	movs	r2, r3
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a644:	687b      	ldr	r3, [r7, #4]
   1a646:	3308      	adds	r3, #8
   1a648:	001a      	movs	r2, r3
   1a64a:	687b      	ldr	r3, [r7, #4]
   1a64c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a64e:	687b      	ldr	r3, [r7, #4]
   1a650:	2200      	movs	r2, #0
   1a652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a654:	46c0      	nop			; (mov r8, r8)
   1a656:	46bd      	mov	sp, r7
   1a658:	b002      	add	sp, #8
   1a65a:	bd80      	pop	{r7, pc}

0001a65c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1a65c:	b580      	push	{r7, lr}
   1a65e:	b082      	sub	sp, #8
   1a660:	af00      	add	r7, sp, #0
   1a662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1a664:	687b      	ldr	r3, [r7, #4]
   1a666:	2200      	movs	r2, #0
   1a668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a66a:	46c0      	nop			; (mov r8, r8)
   1a66c:	46bd      	mov	sp, r7
   1a66e:	b002      	add	sp, #8
   1a670:	bd80      	pop	{r7, pc}

0001a672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a672:	b580      	push	{r7, lr}
   1a674:	b084      	sub	sp, #16
   1a676:	af00      	add	r7, sp, #0
   1a678:	6078      	str	r0, [r7, #4]
   1a67a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1a67c:	687b      	ldr	r3, [r7, #4]
   1a67e:	685b      	ldr	r3, [r3, #4]
   1a680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1a682:	683b      	ldr	r3, [r7, #0]
   1a684:	68fa      	ldr	r2, [r7, #12]
   1a686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a688:	68fb      	ldr	r3, [r7, #12]
   1a68a:	689a      	ldr	r2, [r3, #8]
   1a68c:	683b      	ldr	r3, [r7, #0]
   1a68e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a690:	68fb      	ldr	r3, [r7, #12]
   1a692:	689b      	ldr	r3, [r3, #8]
   1a694:	683a      	ldr	r2, [r7, #0]
   1a696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a698:	68fb      	ldr	r3, [r7, #12]
   1a69a:	683a      	ldr	r2, [r7, #0]
   1a69c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a69e:	683b      	ldr	r3, [r7, #0]
   1a6a0:	687a      	ldr	r2, [r7, #4]
   1a6a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a6a4:	687b      	ldr	r3, [r7, #4]
   1a6a6:	681b      	ldr	r3, [r3, #0]
   1a6a8:	1c5a      	adds	r2, r3, #1
   1a6aa:	687b      	ldr	r3, [r7, #4]
   1a6ac:	601a      	str	r2, [r3, #0]
}
   1a6ae:	46c0      	nop			; (mov r8, r8)
   1a6b0:	46bd      	mov	sp, r7
   1a6b2:	b004      	add	sp, #16
   1a6b4:	bd80      	pop	{r7, pc}

0001a6b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a6b6:	b580      	push	{r7, lr}
   1a6b8:	b084      	sub	sp, #16
   1a6ba:	af00      	add	r7, sp, #0
   1a6bc:	6078      	str	r0, [r7, #4]
   1a6be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a6c0:	683b      	ldr	r3, [r7, #0]
   1a6c2:	681b      	ldr	r3, [r3, #0]
   1a6c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a6c6:	68bb      	ldr	r3, [r7, #8]
   1a6c8:	3301      	adds	r3, #1
   1a6ca:	d103      	bne.n	1a6d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1a6cc:	687b      	ldr	r3, [r7, #4]
   1a6ce:	691b      	ldr	r3, [r3, #16]
   1a6d0:	60fb      	str	r3, [r7, #12]
   1a6d2:	e00c      	b.n	1a6ee <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a6d4:	687b      	ldr	r3, [r7, #4]
   1a6d6:	3308      	adds	r3, #8
   1a6d8:	60fb      	str	r3, [r7, #12]
   1a6da:	e002      	b.n	1a6e2 <vListInsert+0x2c>
   1a6dc:	68fb      	ldr	r3, [r7, #12]
   1a6de:	685b      	ldr	r3, [r3, #4]
   1a6e0:	60fb      	str	r3, [r7, #12]
   1a6e2:	68fb      	ldr	r3, [r7, #12]
   1a6e4:	685b      	ldr	r3, [r3, #4]
   1a6e6:	681a      	ldr	r2, [r3, #0]
   1a6e8:	68bb      	ldr	r3, [r7, #8]
   1a6ea:	429a      	cmp	r2, r3
   1a6ec:	d9f6      	bls.n	1a6dc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1a6ee:	68fb      	ldr	r3, [r7, #12]
   1a6f0:	685a      	ldr	r2, [r3, #4]
   1a6f2:	683b      	ldr	r3, [r7, #0]
   1a6f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a6f6:	683b      	ldr	r3, [r7, #0]
   1a6f8:	685b      	ldr	r3, [r3, #4]
   1a6fa:	683a      	ldr	r2, [r7, #0]
   1a6fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a6fe:	683b      	ldr	r3, [r7, #0]
   1a700:	68fa      	ldr	r2, [r7, #12]
   1a702:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1a704:	68fb      	ldr	r3, [r7, #12]
   1a706:	683a      	ldr	r2, [r7, #0]
   1a708:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a70a:	683b      	ldr	r3, [r7, #0]
   1a70c:	687a      	ldr	r2, [r7, #4]
   1a70e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a710:	687b      	ldr	r3, [r7, #4]
   1a712:	681b      	ldr	r3, [r3, #0]
   1a714:	1c5a      	adds	r2, r3, #1
   1a716:	687b      	ldr	r3, [r7, #4]
   1a718:	601a      	str	r2, [r3, #0]
}
   1a71a:	46c0      	nop			; (mov r8, r8)
   1a71c:	46bd      	mov	sp, r7
   1a71e:	b004      	add	sp, #16
   1a720:	bd80      	pop	{r7, pc}

0001a722 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1a722:	b580      	push	{r7, lr}
   1a724:	b084      	sub	sp, #16
   1a726:	af00      	add	r7, sp, #0
   1a728:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1a72a:	687b      	ldr	r3, [r7, #4]
   1a72c:	691b      	ldr	r3, [r3, #16]
   1a72e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a730:	687b      	ldr	r3, [r7, #4]
   1a732:	685b      	ldr	r3, [r3, #4]
   1a734:	687a      	ldr	r2, [r7, #4]
   1a736:	6892      	ldr	r2, [r2, #8]
   1a738:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a73a:	687b      	ldr	r3, [r7, #4]
   1a73c:	689b      	ldr	r3, [r3, #8]
   1a73e:	687a      	ldr	r2, [r7, #4]
   1a740:	6852      	ldr	r2, [r2, #4]
   1a742:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a744:	68fb      	ldr	r3, [r7, #12]
   1a746:	685a      	ldr	r2, [r3, #4]
   1a748:	687b      	ldr	r3, [r7, #4]
   1a74a:	429a      	cmp	r2, r3
   1a74c:	d103      	bne.n	1a756 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a74e:	687b      	ldr	r3, [r7, #4]
   1a750:	689a      	ldr	r2, [r3, #8]
   1a752:	68fb      	ldr	r3, [r7, #12]
   1a754:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1a756:	687b      	ldr	r3, [r7, #4]
   1a758:	2200      	movs	r2, #0
   1a75a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1a75c:	68fb      	ldr	r3, [r7, #12]
   1a75e:	681b      	ldr	r3, [r3, #0]
   1a760:	1e5a      	subs	r2, r3, #1
   1a762:	68fb      	ldr	r3, [r7, #12]
   1a764:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1a766:	68fb      	ldr	r3, [r7, #12]
   1a768:	681b      	ldr	r3, [r3, #0]
}
   1a76a:	0018      	movs	r0, r3
   1a76c:	46bd      	mov	sp, r7
   1a76e:	b004      	add	sp, #16
   1a770:	bd80      	pop	{r7, pc}
	...

0001a774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1a774:	b580      	push	{r7, lr}
   1a776:	b084      	sub	sp, #16
   1a778:	af00      	add	r7, sp, #0
   1a77a:	60f8      	str	r0, [r7, #12]
   1a77c:	60b9      	str	r1, [r7, #8]
   1a77e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1a780:	68fb      	ldr	r3, [r7, #12]
   1a782:	3b04      	subs	r3, #4
   1a784:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1a786:	68fb      	ldr	r3, [r7, #12]
   1a788:	2280      	movs	r2, #128	; 0x80
   1a78a:	0452      	lsls	r2, r2, #17
   1a78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a78e:	68fb      	ldr	r3, [r7, #12]
   1a790:	3b04      	subs	r3, #4
   1a792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1a794:	68ba      	ldr	r2, [r7, #8]
   1a796:	68fb      	ldr	r3, [r7, #12]
   1a798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a79a:	68fb      	ldr	r3, [r7, #12]
   1a79c:	3b04      	subs	r3, #4
   1a79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1a7a0:	4a08      	ldr	r2, [pc, #32]	; (1a7c4 <pxPortInitialiseStack+0x50>)
   1a7a2:	68fb      	ldr	r3, [r7, #12]
   1a7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1a7a6:	68fb      	ldr	r3, [r7, #12]
   1a7a8:	3b14      	subs	r3, #20
   1a7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1a7ac:	687a      	ldr	r2, [r7, #4]
   1a7ae:	68fb      	ldr	r3, [r7, #12]
   1a7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1a7b2:	68fb      	ldr	r3, [r7, #12]
   1a7b4:	3b20      	subs	r3, #32
   1a7b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1a7b8:	68fb      	ldr	r3, [r7, #12]
}
   1a7ba:	0018      	movs	r0, r3
   1a7bc:	46bd      	mov	sp, r7
   1a7be:	b004      	add	sp, #16
   1a7c0:	bd80      	pop	{r7, pc}
   1a7c2:	46c0      	nop			; (mov r8, r8)
   1a7c4:	0001a7c9 	.word	0x0001a7c9

0001a7c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1a7c8:	b580      	push	{r7, lr}
   1a7ca:	b082      	sub	sp, #8
   1a7cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1a7ce:	2300      	movs	r3, #0
   1a7d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1a7d2:	4b07      	ldr	r3, [pc, #28]	; (1a7f0 <prvTaskExitError+0x28>)
   1a7d4:	681b      	ldr	r3, [r3, #0]
   1a7d6:	3301      	adds	r3, #1
   1a7d8:	d001      	beq.n	1a7de <prvTaskExitError+0x16>
   1a7da:	b672      	cpsid	i
   1a7dc:	e7fe      	b.n	1a7dc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1a7de:	b672      	cpsid	i
	while( ulDummy == 0 )
   1a7e0:	46c0      	nop			; (mov r8, r8)
   1a7e2:	687b      	ldr	r3, [r7, #4]
   1a7e4:	2b00      	cmp	r3, #0
   1a7e6:	d0fc      	beq.n	1a7e2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1a7e8:	46c0      	nop			; (mov r8, r8)
   1a7ea:	46bd      	mov	sp, r7
   1a7ec:	b002      	add	sp, #8
   1a7ee:	bd80      	pop	{r7, pc}
   1a7f0:	20000114 	.word	0x20000114

0001a7f4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1a7f4:	b580      	push	{r7, lr}
   1a7f6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1a7f8:	46c0      	nop			; (mov r8, r8)
   1a7fa:	46bd      	mov	sp, r7
   1a7fc:	bd80      	pop	{r7, pc}
	...

0001a800 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1a800:	4a0b      	ldr	r2, [pc, #44]	; (1a830 <pxCurrentTCBConst2>)
   1a802:	6813      	ldr	r3, [r2, #0]
   1a804:	6818      	ldr	r0, [r3, #0]
   1a806:	3020      	adds	r0, #32
   1a808:	f380 8809 	msr	PSP, r0
   1a80c:	2002      	movs	r0, #2
   1a80e:	f380 8814 	msr	CONTROL, r0
   1a812:	f3bf 8f6f 	isb	sy
   1a816:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a818:	46ae      	mov	lr, r5
   1a81a:	bc08      	pop	{r3}
   1a81c:	bc04      	pop	{r2}
   1a81e:	b662      	cpsie	i
   1a820:	4718      	bx	r3
   1a822:	46c0      	nop			; (mov r8, r8)
   1a824:	46c0      	nop			; (mov r8, r8)
   1a826:	46c0      	nop			; (mov r8, r8)
   1a828:	46c0      	nop			; (mov r8, r8)
   1a82a:	46c0      	nop			; (mov r8, r8)
   1a82c:	46c0      	nop			; (mov r8, r8)
   1a82e:	46c0      	nop			; (mov r8, r8)

0001a830 <pxCurrentTCBConst2>:
   1a830:	200040ec 	.word	0x200040ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a834:	46c0      	nop			; (mov r8, r8)
   1a836:	46c0      	nop			; (mov r8, r8)

0001a838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a838:	b580      	push	{r7, lr}
   1a83a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a83c:	4b0e      	ldr	r3, [pc, #56]	; (1a878 <xPortStartScheduler+0x40>)
   1a83e:	4a0e      	ldr	r2, [pc, #56]	; (1a878 <xPortStartScheduler+0x40>)
   1a840:	6812      	ldr	r2, [r2, #0]
   1a842:	21ff      	movs	r1, #255	; 0xff
   1a844:	0409      	lsls	r1, r1, #16
   1a846:	430a      	orrs	r2, r1
   1a848:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a84a:	4b0b      	ldr	r3, [pc, #44]	; (1a878 <xPortStartScheduler+0x40>)
   1a84c:	4a0a      	ldr	r2, [pc, #40]	; (1a878 <xPortStartScheduler+0x40>)
   1a84e:	6812      	ldr	r2, [r2, #0]
   1a850:	21ff      	movs	r1, #255	; 0xff
   1a852:	0609      	lsls	r1, r1, #24
   1a854:	430a      	orrs	r2, r1
   1a856:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a858:	4b08      	ldr	r3, [pc, #32]	; (1a87c <xPortStartScheduler+0x44>)
   1a85a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a85c:	4b08      	ldr	r3, [pc, #32]	; (1a880 <xPortStartScheduler+0x48>)
   1a85e:	2200      	movs	r2, #0
   1a860:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a862:	4b08      	ldr	r3, [pc, #32]	; (1a884 <xPortStartScheduler+0x4c>)
   1a864:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a866:	4b08      	ldr	r3, [pc, #32]	; (1a888 <xPortStartScheduler+0x50>)
   1a868:	4798      	blx	r3
	prvTaskExitError();
   1a86a:	4b08      	ldr	r3, [pc, #32]	; (1a88c <xPortStartScheduler+0x54>)
   1a86c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a86e:	2300      	movs	r3, #0
}
   1a870:	0018      	movs	r0, r3
   1a872:	46bd      	mov	sp, r7
   1a874:	bd80      	pop	{r7, pc}
   1a876:	46c0      	nop			; (mov r8, r8)
   1a878:	e000ed20 	.word	0xe000ed20
   1a87c:	0001a999 	.word	0x0001a999
   1a880:	20000114 	.word	0x20000114
   1a884:	0001a801 	.word	0x0001a801
   1a888:	0001cef5 	.word	0x0001cef5
   1a88c:	0001a7c9 	.word	0x0001a7c9

0001a890 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a890:	b580      	push	{r7, lr}
   1a892:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a894:	4b03      	ldr	r3, [pc, #12]	; (1a8a4 <vPortYield+0x14>)
   1a896:	2280      	movs	r2, #128	; 0x80
   1a898:	0552      	lsls	r2, r2, #21
   1a89a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a89c:	46c0      	nop			; (mov r8, r8)
   1a89e:	46bd      	mov	sp, r7
   1a8a0:	bd80      	pop	{r7, pc}
   1a8a2:	46c0      	nop			; (mov r8, r8)
   1a8a4:	e000ed04 	.word	0xe000ed04

0001a8a8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a8a8:	b580      	push	{r7, lr}
   1a8aa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a8ac:	b672      	cpsid	i
    uxCriticalNesting++;
   1a8ae:	4b06      	ldr	r3, [pc, #24]	; (1a8c8 <vPortEnterCritical+0x20>)
   1a8b0:	681b      	ldr	r3, [r3, #0]
   1a8b2:	1c5a      	adds	r2, r3, #1
   1a8b4:	4b04      	ldr	r3, [pc, #16]	; (1a8c8 <vPortEnterCritical+0x20>)
   1a8b6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a8b8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a8bc:	f3bf 8f6f 	isb	sy
}
   1a8c0:	46c0      	nop			; (mov r8, r8)
   1a8c2:	46bd      	mov	sp, r7
   1a8c4:	bd80      	pop	{r7, pc}
   1a8c6:	46c0      	nop			; (mov r8, r8)
   1a8c8:	20000114 	.word	0x20000114

0001a8cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a8cc:	b580      	push	{r7, lr}
   1a8ce:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a8d0:	4b09      	ldr	r3, [pc, #36]	; (1a8f8 <vPortExitCritical+0x2c>)
   1a8d2:	681b      	ldr	r3, [r3, #0]
   1a8d4:	2b00      	cmp	r3, #0
   1a8d6:	d101      	bne.n	1a8dc <vPortExitCritical+0x10>
   1a8d8:	b672      	cpsid	i
   1a8da:	e7fe      	b.n	1a8da <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a8dc:	4b06      	ldr	r3, [pc, #24]	; (1a8f8 <vPortExitCritical+0x2c>)
   1a8de:	681b      	ldr	r3, [r3, #0]
   1a8e0:	1e5a      	subs	r2, r3, #1
   1a8e2:	4b05      	ldr	r3, [pc, #20]	; (1a8f8 <vPortExitCritical+0x2c>)
   1a8e4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a8e6:	4b04      	ldr	r3, [pc, #16]	; (1a8f8 <vPortExitCritical+0x2c>)
   1a8e8:	681b      	ldr	r3, [r3, #0]
   1a8ea:	2b00      	cmp	r3, #0
   1a8ec:	d100      	bne.n	1a8f0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a8ee:	b662      	cpsie	i
    }
}
   1a8f0:	46c0      	nop			; (mov r8, r8)
   1a8f2:	46bd      	mov	sp, r7
   1a8f4:	bd80      	pop	{r7, pc}
   1a8f6:	46c0      	nop			; (mov r8, r8)
   1a8f8:	20000114 	.word	0x20000114

0001a8fc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a8fc:	f3ef 8010 	mrs	r0, PRIMASK
   1a900:	b672      	cpsid	i
   1a902:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a904:	46c0      	nop			; (mov r8, r8)
   1a906:	0018      	movs	r0, r3

0001a908 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a908:	f380 8810 	msr	PRIMASK, r0
   1a90c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a90e:	46c0      	nop			; (mov r8, r8)

0001a910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a910:	f3ef 8009 	mrs	r0, PSP
   1a914:	4b0e      	ldr	r3, [pc, #56]	; (1a950 <pxCurrentTCBConst>)
   1a916:	681a      	ldr	r2, [r3, #0]
   1a918:	3820      	subs	r0, #32
   1a91a:	6010      	str	r0, [r2, #0]
   1a91c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a91e:	4644      	mov	r4, r8
   1a920:	464d      	mov	r5, r9
   1a922:	4656      	mov	r6, sl
   1a924:	465f      	mov	r7, fp
   1a926:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a928:	b508      	push	{r3, lr}
   1a92a:	b672      	cpsid	i
   1a92c:	f002 fae2 	bl	1cef4 <vTaskSwitchContext>
   1a930:	b662      	cpsie	i
   1a932:	bc0c      	pop	{r2, r3}
   1a934:	6811      	ldr	r1, [r2, #0]
   1a936:	6808      	ldr	r0, [r1, #0]
   1a938:	3010      	adds	r0, #16
   1a93a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a93c:	46a0      	mov	r8, r4
   1a93e:	46a9      	mov	r9, r5
   1a940:	46b2      	mov	sl, r6
   1a942:	46bb      	mov	fp, r7
   1a944:	f380 8809 	msr	PSP, r0
   1a948:	3820      	subs	r0, #32
   1a94a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a94c:	4718      	bx	r3
   1a94e:	46c0      	nop			; (mov r8, r8)

0001a950 <pxCurrentTCBConst>:
   1a950:	200040ec 	.word	0x200040ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a954:	46c0      	nop			; (mov r8, r8)
   1a956:	46c0      	nop			; (mov r8, r8)

0001a958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a958:	b580      	push	{r7, lr}
   1a95a:	b082      	sub	sp, #8
   1a95c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a95e:	4b0a      	ldr	r3, [pc, #40]	; (1a988 <SysTick_Handler+0x30>)
   1a960:	4798      	blx	r3
   1a962:	0003      	movs	r3, r0
   1a964:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a966:	4b09      	ldr	r3, [pc, #36]	; (1a98c <SysTick_Handler+0x34>)
   1a968:	4798      	blx	r3
   1a96a:	1e03      	subs	r3, r0, #0
   1a96c:	d003      	beq.n	1a976 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a96e:	4b08      	ldr	r3, [pc, #32]	; (1a990 <SysTick_Handler+0x38>)
   1a970:	2280      	movs	r2, #128	; 0x80
   1a972:	0552      	lsls	r2, r2, #21
   1a974:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a976:	687b      	ldr	r3, [r7, #4]
   1a978:	0018      	movs	r0, r3
   1a97a:	4b06      	ldr	r3, [pc, #24]	; (1a994 <SysTick_Handler+0x3c>)
   1a97c:	4798      	blx	r3
}
   1a97e:	46c0      	nop			; (mov r8, r8)
   1a980:	46bd      	mov	sp, r7
   1a982:	b002      	add	sp, #8
   1a984:	bd80      	pop	{r7, pc}
   1a986:	46c0      	nop			; (mov r8, r8)
   1a988:	0001a8fd 	.word	0x0001a8fd
   1a98c:	0001cd05 	.word	0x0001cd05
   1a990:	e000ed04 	.word	0xe000ed04
   1a994:	0001a909 	.word	0x0001a909

0001a998 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a998:	b5b0      	push	{r4, r5, r7, lr}
   1a99a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a99c:	4b0b      	ldr	r3, [pc, #44]	; (1a9cc <prvSetupTimerInterrupt+0x34>)
   1a99e:	2200      	movs	r2, #0
   1a9a0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a9a2:	4b0b      	ldr	r3, [pc, #44]	; (1a9d0 <prvSetupTimerInterrupt+0x38>)
   1a9a4:	2200      	movs	r2, #0
   1a9a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a9a8:	4c0a      	ldr	r4, [pc, #40]	; (1a9d4 <prvSetupTimerInterrupt+0x3c>)
   1a9aa:	2000      	movs	r0, #0
   1a9ac:	4b0a      	ldr	r3, [pc, #40]	; (1a9d8 <prvSetupTimerInterrupt+0x40>)
   1a9ae:	4798      	blx	r3
   1a9b0:	4b0a      	ldr	r3, [pc, #40]	; (1a9dc <prvSetupTimerInterrupt+0x44>)
   1a9b2:	22fa      	movs	r2, #250	; 0xfa
   1a9b4:	0091      	lsls	r1, r2, #2
   1a9b6:	4798      	blx	r3
   1a9b8:	0003      	movs	r3, r0
   1a9ba:	3b01      	subs	r3, #1
   1a9bc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a9be:	4b03      	ldr	r3, [pc, #12]	; (1a9cc <prvSetupTimerInterrupt+0x34>)
   1a9c0:	2207      	movs	r2, #7
   1a9c2:	601a      	str	r2, [r3, #0]
}
   1a9c4:	46c0      	nop			; (mov r8, r8)
   1a9c6:	46bd      	mov	sp, r7
   1a9c8:	bdb0      	pop	{r4, r5, r7, pc}
   1a9ca:	46c0      	nop			; (mov r8, r8)
   1a9cc:	e000e010 	.word	0xe000e010
   1a9d0:	e000e018 	.word	0xe000e018
   1a9d4:	e000e014 	.word	0xe000e014
   1a9d8:	0002a419 	.word	0x0002a419
   1a9dc:	00033035 	.word	0x00033035

0001a9e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a9e0:	b580      	push	{r7, lr}
   1a9e2:	b084      	sub	sp, #16
   1a9e4:	af00      	add	r7, sp, #0
   1a9e6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a9e8:	2300      	movs	r3, #0
   1a9ea:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a9ec:	687b      	ldr	r3, [r7, #4]
   1a9ee:	2207      	movs	r2, #7
   1a9f0:	4013      	ands	r3, r2
   1a9f2:	d004      	beq.n	1a9fe <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a9f4:	687b      	ldr	r3, [r7, #4]
   1a9f6:	2207      	movs	r2, #7
   1a9f8:	4393      	bics	r3, r2
   1a9fa:	3308      	adds	r3, #8
   1a9fc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a9fe:	4b21      	ldr	r3, [pc, #132]	; (1aa84 <pvPortMalloc+0xa4>)
   1aa00:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1aa02:	4b21      	ldr	r3, [pc, #132]	; (1aa88 <pvPortMalloc+0xa8>)
   1aa04:	681b      	ldr	r3, [r3, #0]
   1aa06:	2b00      	cmp	r3, #0
   1aa08:	d105      	bne.n	1aa16 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1aa0a:	4b20      	ldr	r3, [pc, #128]	; (1aa8c <pvPortMalloc+0xac>)
   1aa0c:	2207      	movs	r2, #7
   1aa0e:	4393      	bics	r3, r2
   1aa10:	001a      	movs	r2, r3
   1aa12:	4b1d      	ldr	r3, [pc, #116]	; (1aa88 <pvPortMalloc+0xa8>)
   1aa14:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1aa16:	4b1e      	ldr	r3, [pc, #120]	; (1aa90 <pvPortMalloc+0xb0>)
   1aa18:	681a      	ldr	r2, [r3, #0]
   1aa1a:	687b      	ldr	r3, [r7, #4]
   1aa1c:	18d3      	adds	r3, r2, r3
   1aa1e:	4a1d      	ldr	r2, [pc, #116]	; (1aa94 <pvPortMalloc+0xb4>)
   1aa20:	4293      	cmp	r3, r2
   1aa22:	d813      	bhi.n	1aa4c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1aa24:	4b1a      	ldr	r3, [pc, #104]	; (1aa90 <pvPortMalloc+0xb0>)
   1aa26:	681a      	ldr	r2, [r3, #0]
   1aa28:	687b      	ldr	r3, [r7, #4]
   1aa2a:	18d2      	adds	r2, r2, r3
   1aa2c:	4b18      	ldr	r3, [pc, #96]	; (1aa90 <pvPortMalloc+0xb0>)
   1aa2e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1aa30:	429a      	cmp	r2, r3
   1aa32:	d90b      	bls.n	1aa4c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1aa34:	4b14      	ldr	r3, [pc, #80]	; (1aa88 <pvPortMalloc+0xa8>)
   1aa36:	681a      	ldr	r2, [r3, #0]
   1aa38:	4b15      	ldr	r3, [pc, #84]	; (1aa90 <pvPortMalloc+0xb0>)
   1aa3a:	681b      	ldr	r3, [r3, #0]
   1aa3c:	18d3      	adds	r3, r2, r3
   1aa3e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1aa40:	4b13      	ldr	r3, [pc, #76]	; (1aa90 <pvPortMalloc+0xb0>)
   1aa42:	681a      	ldr	r2, [r3, #0]
   1aa44:	687b      	ldr	r3, [r7, #4]
   1aa46:	18d2      	adds	r2, r2, r3
   1aa48:	4b11      	ldr	r3, [pc, #68]	; (1aa90 <pvPortMalloc+0xb0>)
   1aa4a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1aa4c:	68fb      	ldr	r3, [r7, #12]
   1aa4e:	2b00      	cmp	r3, #0
   1aa50:	d006      	beq.n	1aa60 <pvPortMalloc+0x80>
   1aa52:	68fb      	ldr	r3, [r7, #12]
   1aa54:	687a      	ldr	r2, [r7, #4]
   1aa56:	0019      	movs	r1, r3
   1aa58:	2094      	movs	r0, #148	; 0x94
   1aa5a:	4b0f      	ldr	r3, [pc, #60]	; (1aa98 <pvPortMalloc+0xb8>)
   1aa5c:	4798      	blx	r3
   1aa5e:	e005      	b.n	1aa6c <pvPortMalloc+0x8c>
   1aa60:	68fb      	ldr	r3, [r7, #12]
   1aa62:	687a      	ldr	r2, [r7, #4]
   1aa64:	0019      	movs	r1, r3
   1aa66:	20e8      	movs	r0, #232	; 0xe8
   1aa68:	4b0b      	ldr	r3, [pc, #44]	; (1aa98 <pvPortMalloc+0xb8>)
   1aa6a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1aa6c:	4b0b      	ldr	r3, [pc, #44]	; (1aa9c <pvPortMalloc+0xbc>)
   1aa6e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1aa70:	68fb      	ldr	r3, [r7, #12]
   1aa72:	2b00      	cmp	r3, #0
   1aa74:	d101      	bne.n	1aa7a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1aa76:	4b0a      	ldr	r3, [pc, #40]	; (1aaa0 <pvPortMalloc+0xc0>)
   1aa78:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1aa7a:	68fb      	ldr	r3, [r7, #12]
}
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	46bd      	mov	sp, r7
   1aa80:	b004      	add	sp, #16
   1aa82:	bd80      	pop	{r7, pc}
   1aa84:	0001cb61 	.word	0x0001cb61
   1aa88:	200040e8 	.word	0x200040e8
   1aa8c:	20000e24 	.word	0x20000e24
   1aa90:	200040e4 	.word	0x200040e4
   1aa94:	000032bf 	.word	0x000032bf
   1aa98:	00019151 	.word	0x00019151
   1aa9c:	0001cb79 	.word	0x0001cb79
   1aaa0:	00033005 	.word	0x00033005

0001aaa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1aaa4:	b580      	push	{r7, lr}
   1aaa6:	b082      	sub	sp, #8
   1aaa8:	af00      	add	r7, sp, #0
   1aaaa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1aaac:	687b      	ldr	r3, [r7, #4]
   1aaae:	2b00      	cmp	r3, #0
   1aab0:	d001      	beq.n	1aab6 <vPortFree+0x12>
   1aab2:	b672      	cpsid	i
   1aab4:	e7fe      	b.n	1aab4 <vPortFree+0x10>
}
   1aab6:	46c0      	nop			; (mov r8, r8)
   1aab8:	46bd      	mov	sp, r7
   1aaba:	b002      	add	sp, #8
   1aabc:	bd80      	pop	{r7, pc}
	...

0001aac0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1aac0:	b580      	push	{r7, lr}
   1aac2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1aac4:	4b03      	ldr	r3, [pc, #12]	; (1aad4 <xPortGetFreeHeapSize+0x14>)
   1aac6:	681b      	ldr	r3, [r3, #0]
   1aac8:	22cb      	movs	r2, #203	; 0xcb
   1aaca:	0192      	lsls	r2, r2, #6
   1aacc:	1ad3      	subs	r3, r2, r3
}
   1aace:	0018      	movs	r0, r3
   1aad0:	46bd      	mov	sp, r7
   1aad2:	bd80      	pop	{r7, pc}
   1aad4:	200040e4 	.word	0x200040e4

0001aad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1aad8:	b580      	push	{r7, lr}
   1aada:	b084      	sub	sp, #16
   1aadc:	af00      	add	r7, sp, #0
   1aade:	6078      	str	r0, [r7, #4]
   1aae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1aae2:	687b      	ldr	r3, [r7, #4]
   1aae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1aae6:	68fb      	ldr	r3, [r7, #12]
   1aae8:	2b00      	cmp	r3, #0
   1aaea:	d101      	bne.n	1aaf0 <xQueueGenericReset+0x18>
   1aaec:	b672      	cpsid	i
   1aaee:	e7fe      	b.n	1aaee <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1aaf0:	4b23      	ldr	r3, [pc, #140]	; (1ab80 <xQueueGenericReset+0xa8>)
   1aaf2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1aaf4:	68fb      	ldr	r3, [r7, #12]
   1aaf6:	681a      	ldr	r2, [r3, #0]
   1aaf8:	68fb      	ldr	r3, [r7, #12]
   1aafa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1aafc:	68fb      	ldr	r3, [r7, #12]
   1aafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ab00:	434b      	muls	r3, r1
   1ab02:	18d2      	adds	r2, r2, r3
   1ab04:	68fb      	ldr	r3, [r7, #12]
   1ab06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1ab08:	68fb      	ldr	r3, [r7, #12]
   1ab0a:	2200      	movs	r2, #0
   1ab0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1ab0e:	68fb      	ldr	r3, [r7, #12]
   1ab10:	681a      	ldr	r2, [r3, #0]
   1ab12:	68fb      	ldr	r3, [r7, #12]
   1ab14:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1ab16:	68fb      	ldr	r3, [r7, #12]
   1ab18:	681a      	ldr	r2, [r3, #0]
   1ab1a:	68fb      	ldr	r3, [r7, #12]
   1ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ab1e:	1e59      	subs	r1, r3, #1
   1ab20:	68fb      	ldr	r3, [r7, #12]
   1ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ab24:	434b      	muls	r3, r1
   1ab26:	18d2      	adds	r2, r2, r3
   1ab28:	68fb      	ldr	r3, [r7, #12]
   1ab2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1ab2c:	68fb      	ldr	r3, [r7, #12]
   1ab2e:	2244      	movs	r2, #68	; 0x44
   1ab30:	21ff      	movs	r1, #255	; 0xff
   1ab32:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1ab34:	68fb      	ldr	r3, [r7, #12]
   1ab36:	2245      	movs	r2, #69	; 0x45
   1ab38:	21ff      	movs	r1, #255	; 0xff
   1ab3a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1ab3c:	683b      	ldr	r3, [r7, #0]
   1ab3e:	2b00      	cmp	r3, #0
   1ab40:	d10d      	bne.n	1ab5e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ab42:	68fb      	ldr	r3, [r7, #12]
   1ab44:	691b      	ldr	r3, [r3, #16]
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	d013      	beq.n	1ab72 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ab4a:	68fb      	ldr	r3, [r7, #12]
   1ab4c:	3310      	adds	r3, #16
   1ab4e:	0018      	movs	r0, r3
   1ab50:	4b0c      	ldr	r3, [pc, #48]	; (1ab84 <xQueueGenericReset+0xac>)
   1ab52:	4798      	blx	r3
   1ab54:	1e03      	subs	r3, r0, #0
   1ab56:	d00c      	beq.n	1ab72 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1ab58:	4b0b      	ldr	r3, [pc, #44]	; (1ab88 <xQueueGenericReset+0xb0>)
   1ab5a:	4798      	blx	r3
   1ab5c:	e009      	b.n	1ab72 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1ab5e:	68fb      	ldr	r3, [r7, #12]
   1ab60:	3310      	adds	r3, #16
   1ab62:	0018      	movs	r0, r3
   1ab64:	4b09      	ldr	r3, [pc, #36]	; (1ab8c <xQueueGenericReset+0xb4>)
   1ab66:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1ab68:	68fb      	ldr	r3, [r7, #12]
   1ab6a:	3324      	adds	r3, #36	; 0x24
   1ab6c:	0018      	movs	r0, r3
   1ab6e:	4b07      	ldr	r3, [pc, #28]	; (1ab8c <xQueueGenericReset+0xb4>)
   1ab70:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1ab72:	4b07      	ldr	r3, [pc, #28]	; (1ab90 <xQueueGenericReset+0xb8>)
   1ab74:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1ab76:	2301      	movs	r3, #1
}
   1ab78:	0018      	movs	r0, r3
   1ab7a:	46bd      	mov	sp, r7
   1ab7c:	b004      	add	sp, #16
   1ab7e:	bd80      	pop	{r7, pc}
   1ab80:	0001a8a9 	.word	0x0001a8a9
   1ab84:	0001d139 	.word	0x0001d139
   1ab88:	0001a891 	.word	0x0001a891
   1ab8c:	0001a621 	.word	0x0001a621
   1ab90:	0001a8cd 	.word	0x0001a8cd

0001ab94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1ab94:	b590      	push	{r4, r7, lr}
   1ab96:	b08b      	sub	sp, #44	; 0x2c
   1ab98:	af02      	add	r7, sp, #8
   1ab9a:	60f8      	str	r0, [r7, #12]
   1ab9c:	60b9      	str	r1, [r7, #8]
   1ab9e:	1dfb      	adds	r3, r7, #7
   1aba0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1aba2:	68fb      	ldr	r3, [r7, #12]
   1aba4:	2b00      	cmp	r3, #0
   1aba6:	d101      	bne.n	1abac <xQueueGenericCreate+0x18>
   1aba8:	b672      	cpsid	i
   1abaa:	e7fe      	b.n	1abaa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1abac:	68bb      	ldr	r3, [r7, #8]
   1abae:	2b00      	cmp	r3, #0
   1abb0:	d102      	bne.n	1abb8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1abb2:	2300      	movs	r3, #0
   1abb4:	61fb      	str	r3, [r7, #28]
   1abb6:	e003      	b.n	1abc0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1abb8:	68fb      	ldr	r3, [r7, #12]
   1abba:	68ba      	ldr	r2, [r7, #8]
   1abbc:	4353      	muls	r3, r2
   1abbe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1abc0:	69fb      	ldr	r3, [r7, #28]
   1abc2:	3354      	adds	r3, #84	; 0x54
   1abc4:	0018      	movs	r0, r3
   1abc6:	4b19      	ldr	r3, [pc, #100]	; (1ac2c <xQueueGenericCreate+0x98>)
   1abc8:	4798      	blx	r3
   1abca:	0003      	movs	r3, r0
   1abcc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1abce:	69bb      	ldr	r3, [r7, #24]
   1abd0:	2b00      	cmp	r3, #0
   1abd2:	d00d      	beq.n	1abf0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1abd4:	69bb      	ldr	r3, [r7, #24]
   1abd6:	3354      	adds	r3, #84	; 0x54
   1abd8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1abda:	1dfb      	adds	r3, r7, #7
   1abdc:	781c      	ldrb	r4, [r3, #0]
   1abde:	697a      	ldr	r2, [r7, #20]
   1abe0:	68b9      	ldr	r1, [r7, #8]
   1abe2:	68f8      	ldr	r0, [r7, #12]
   1abe4:	69bb      	ldr	r3, [r7, #24]
   1abe6:	9300      	str	r3, [sp, #0]
   1abe8:	0023      	movs	r3, r4
   1abea:	4c11      	ldr	r4, [pc, #68]	; (1ac30 <xQueueGenericCreate+0x9c>)
   1abec:	47a0      	blx	r4
   1abee:	e017      	b.n	1ac20 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1abf0:	4b10      	ldr	r3, [pc, #64]	; (1ac34 <xQueueGenericCreate+0xa0>)
   1abf2:	4798      	blx	r3
   1abf4:	0003      	movs	r3, r0
   1abf6:	0018      	movs	r0, r3
   1abf8:	4b0f      	ldr	r3, [pc, #60]	; (1ac38 <xQueueGenericCreate+0xa4>)
   1abfa:	4798      	blx	r3
   1abfc:	0003      	movs	r3, r0
   1abfe:	001a      	movs	r2, r3
   1ac00:	4b0e      	ldr	r3, [pc, #56]	; (1ac3c <xQueueGenericCreate+0xa8>)
   1ac02:	881b      	ldrh	r3, [r3, #0]
   1ac04:	4013      	ands	r3, r2
   1ac06:	b29b      	uxth	r3, r3
   1ac08:	2b00      	cmp	r3, #0
   1ac0a:	d009      	beq.n	1ac20 <xQueueGenericCreate+0x8c>
   1ac0c:	1dfb      	adds	r3, r7, #7
   1ac0e:	781b      	ldrb	r3, [r3, #0]
   1ac10:	4a0b      	ldr	r2, [pc, #44]	; (1ac40 <xQueueGenericCreate+0xac>)
   1ac12:	5cd3      	ldrb	r3, [r2, r3]
   1ac14:	3340      	adds	r3, #64	; 0x40
   1ac16:	b2db      	uxtb	r3, r3
   1ac18:	2100      	movs	r1, #0
   1ac1a:	0018      	movs	r0, r3
   1ac1c:	4b09      	ldr	r3, [pc, #36]	; (1ac44 <xQueueGenericCreate+0xb0>)
   1ac1e:	4798      	blx	r3
		}

		return pxNewQueue;
   1ac20:	69bb      	ldr	r3, [r7, #24]
	}
   1ac22:	0018      	movs	r0, r3
   1ac24:	46bd      	mov	sp, r7
   1ac26:	b009      	add	sp, #36	; 0x24
   1ac28:	bd90      	pop	{r4, r7, pc}
   1ac2a:	46c0      	nop			; (mov r8, r8)
   1ac2c:	0001a9e1 	.word	0x0001a9e1
   1ac30:	0001ac49 	.word	0x0001ac49
   1ac34:	00018b45 	.word	0x00018b45
   1ac38:	000188a9 	.word	0x000188a9
   1ac3c:	20000110 	.word	0x20000110
   1ac40:	20000104 	.word	0x20000104
   1ac44:	000195a9 	.word	0x000195a9

0001ac48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1ac48:	b5b0      	push	{r4, r5, r7, lr}
   1ac4a:	b084      	sub	sp, #16
   1ac4c:	af00      	add	r7, sp, #0
   1ac4e:	60f8      	str	r0, [r7, #12]
   1ac50:	60b9      	str	r1, [r7, #8]
   1ac52:	607a      	str	r2, [r7, #4]
   1ac54:	001a      	movs	r2, r3
   1ac56:	1cfb      	adds	r3, r7, #3
   1ac58:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1ac5a:	68bb      	ldr	r3, [r7, #8]
   1ac5c:	2b00      	cmp	r3, #0
   1ac5e:	d103      	bne.n	1ac68 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1ac60:	6a3b      	ldr	r3, [r7, #32]
   1ac62:	6a3a      	ldr	r2, [r7, #32]
   1ac64:	601a      	str	r2, [r3, #0]
   1ac66:	e002      	b.n	1ac6e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1ac68:	6a3b      	ldr	r3, [r7, #32]
   1ac6a:	687a      	ldr	r2, [r7, #4]
   1ac6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1ac6e:	6a3b      	ldr	r3, [r7, #32]
   1ac70:	68fa      	ldr	r2, [r7, #12]
   1ac72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1ac74:	6a3b      	ldr	r3, [r7, #32]
   1ac76:	68ba      	ldr	r2, [r7, #8]
   1ac78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1ac7a:	6a3b      	ldr	r3, [r7, #32]
   1ac7c:	2101      	movs	r1, #1
   1ac7e:	0018      	movs	r0, r3
   1ac80:	4b41      	ldr	r3, [pc, #260]	; (1ad88 <prvInitialiseNewQueue+0x140>)
   1ac82:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1ac84:	6a3b      	ldr	r3, [r7, #32]
   1ac86:	1cfa      	adds	r2, r7, #3
   1ac88:	2150      	movs	r1, #80	; 0x50
   1ac8a:	7812      	ldrb	r2, [r2, #0]
   1ac8c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1ac8e:	6a3b      	ldr	r3, [r7, #32]
   1ac90:	2200      	movs	r2, #0
   1ac92:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1ac94:	6a3b      	ldr	r3, [r7, #32]
   1ac96:	0018      	movs	r0, r3
   1ac98:	4b3c      	ldr	r3, [pc, #240]	; (1ad8c <prvInitialiseNewQueue+0x144>)
   1ac9a:	4798      	blx	r3
   1ac9c:	0003      	movs	r3, r0
   1ac9e:	001a      	movs	r2, r3
   1aca0:	4b3b      	ldr	r3, [pc, #236]	; (1ad90 <prvInitialiseNewQueue+0x148>)
   1aca2:	5c9b      	ldrb	r3, [r3, r2]
   1aca4:	0018      	movs	r0, r3
   1aca6:	4b3b      	ldr	r3, [pc, #236]	; (1ad94 <prvInitialiseNewQueue+0x14c>)
   1aca8:	4798      	blx	r3
   1acaa:	0003      	movs	r3, r0
   1acac:	b29a      	uxth	r2, r3
   1acae:	6a3b      	ldr	r3, [r7, #32]
   1acb0:	0011      	movs	r1, r2
   1acb2:	0018      	movs	r0, r3
   1acb4:	4b38      	ldr	r3, [pc, #224]	; (1ad98 <prvInitialiseNewQueue+0x150>)
   1acb6:	4798      	blx	r3
   1acb8:	4b38      	ldr	r3, [pc, #224]	; (1ad9c <prvInitialiseNewQueue+0x154>)
   1acba:	881a      	ldrh	r2, [r3, #0]
   1acbc:	6a3b      	ldr	r3, [r7, #32]
   1acbe:	0011      	movs	r1, r2
   1acc0:	0018      	movs	r0, r3
   1acc2:	4b37      	ldr	r3, [pc, #220]	; (1ada0 <prvInitialiseNewQueue+0x158>)
   1acc4:	4798      	blx	r3
   1acc6:	6a3b      	ldr	r3, [r7, #32]
   1acc8:	0018      	movs	r0, r3
   1acca:	4b30      	ldr	r3, [pc, #192]	; (1ad8c <prvInitialiseNewQueue+0x144>)
   1accc:	4798      	blx	r3
   1acce:	0003      	movs	r3, r0
   1acd0:	001a      	movs	r2, r3
   1acd2:	4b2f      	ldr	r3, [pc, #188]	; (1ad90 <prvInitialiseNewQueue+0x148>)
   1acd4:	5c9c      	ldrb	r4, [r3, r2]
   1acd6:	6a3b      	ldr	r3, [r7, #32]
   1acd8:	0018      	movs	r0, r3
   1acda:	4b32      	ldr	r3, [pc, #200]	; (1ada4 <prvInitialiseNewQueue+0x15c>)
   1acdc:	4798      	blx	r3
   1acde:	0003      	movs	r3, r0
   1ace0:	b2db      	uxtb	r3, r3
   1ace2:	0019      	movs	r1, r3
   1ace4:	0020      	movs	r0, r4
   1ace6:	4b30      	ldr	r3, [pc, #192]	; (1ada8 <prvInitialiseNewQueue+0x160>)
   1ace8:	4798      	blx	r3
   1acea:	4b30      	ldr	r3, [pc, #192]	; (1adac <prvInitialiseNewQueue+0x164>)
   1acec:	4798      	blx	r3
   1acee:	0003      	movs	r3, r0
   1acf0:	0018      	movs	r0, r3
   1acf2:	4b2f      	ldr	r3, [pc, #188]	; (1adb0 <prvInitialiseNewQueue+0x168>)
   1acf4:	4798      	blx	r3
   1acf6:	0003      	movs	r3, r0
   1acf8:	001a      	movs	r2, r3
   1acfa:	4b2e      	ldr	r3, [pc, #184]	; (1adb4 <prvInitialiseNewQueue+0x16c>)
   1acfc:	881b      	ldrh	r3, [r3, #0]
   1acfe:	4013      	ands	r3, r2
   1ad00:	b29b      	uxth	r3, r3
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d029      	beq.n	1ad5a <prvInitialiseNewQueue+0x112>
   1ad06:	6a3b      	ldr	r3, [r7, #32]
   1ad08:	0018      	movs	r0, r3
   1ad0a:	4b2b      	ldr	r3, [pc, #172]	; (1adb8 <prvInitialiseNewQueue+0x170>)
   1ad0c:	4798      	blx	r3
   1ad0e:	0003      	movs	r3, r0
   1ad10:	001a      	movs	r2, r3
   1ad12:	4b28      	ldr	r3, [pc, #160]	; (1adb4 <prvInitialiseNewQueue+0x16c>)
   1ad14:	881b      	ldrh	r3, [r3, #0]
   1ad16:	4013      	ands	r3, r2
   1ad18:	b29b      	uxth	r3, r3
   1ad1a:	2b00      	cmp	r3, #0
   1ad1c:	d01d      	beq.n	1ad5a <prvInitialiseNewQueue+0x112>
   1ad1e:	6a3b      	ldr	r3, [r7, #32]
   1ad20:	0018      	movs	r0, r3
   1ad22:	4b1a      	ldr	r3, [pc, #104]	; (1ad8c <prvInitialiseNewQueue+0x144>)
   1ad24:	4798      	blx	r3
   1ad26:	0003      	movs	r3, r0
   1ad28:	001a      	movs	r2, r3
   1ad2a:	4b19      	ldr	r3, [pc, #100]	; (1ad90 <prvInitialiseNewQueue+0x148>)
   1ad2c:	5c9b      	ldrb	r3, [r3, r2]
   1ad2e:	3318      	adds	r3, #24
   1ad30:	b2db      	uxtb	r3, r3
   1ad32:	001d      	movs	r5, r3
   1ad34:	6a3b      	ldr	r3, [r7, #32]
   1ad36:	0018      	movs	r0, r3
   1ad38:	4b14      	ldr	r3, [pc, #80]	; (1ad8c <prvInitialiseNewQueue+0x144>)
   1ad3a:	4798      	blx	r3
   1ad3c:	0003      	movs	r3, r0
   1ad3e:	001a      	movs	r2, r3
   1ad40:	4b13      	ldr	r3, [pc, #76]	; (1ad90 <prvInitialiseNewQueue+0x148>)
   1ad42:	5c9c      	ldrb	r4, [r3, r2]
   1ad44:	6a3b      	ldr	r3, [r7, #32]
   1ad46:	0018      	movs	r0, r3
   1ad48:	4b16      	ldr	r3, [pc, #88]	; (1ada4 <prvInitialiseNewQueue+0x15c>)
   1ad4a:	4798      	blx	r3
   1ad4c:	0003      	movs	r3, r0
   1ad4e:	b2db      	uxtb	r3, r3
   1ad50:	001a      	movs	r2, r3
   1ad52:	0021      	movs	r1, r4
   1ad54:	0028      	movs	r0, r5
   1ad56:	4b19      	ldr	r3, [pc, #100]	; (1adbc <prvInitialiseNewQueue+0x174>)
   1ad58:	4798      	blx	r3
   1ad5a:	6a3b      	ldr	r3, [r7, #32]
   1ad5c:	0018      	movs	r0, r3
   1ad5e:	4b0b      	ldr	r3, [pc, #44]	; (1ad8c <prvInitialiseNewQueue+0x144>)
   1ad60:	4798      	blx	r3
   1ad62:	0003      	movs	r3, r0
   1ad64:	001a      	movs	r2, r3
   1ad66:	4b0a      	ldr	r3, [pc, #40]	; (1ad90 <prvInitialiseNewQueue+0x148>)
   1ad68:	5c9c      	ldrb	r4, [r3, r2]
   1ad6a:	6a3b      	ldr	r3, [r7, #32]
   1ad6c:	0018      	movs	r0, r3
   1ad6e:	4b0d      	ldr	r3, [pc, #52]	; (1ada4 <prvInitialiseNewQueue+0x15c>)
   1ad70:	4798      	blx	r3
   1ad72:	0003      	movs	r3, r0
   1ad74:	b2db      	uxtb	r3, r3
   1ad76:	2200      	movs	r2, #0
   1ad78:	0019      	movs	r1, r3
   1ad7a:	0020      	movs	r0, r4
   1ad7c:	4b10      	ldr	r3, [pc, #64]	; (1adc0 <prvInitialiseNewQueue+0x178>)
   1ad7e:	4798      	blx	r3
}
   1ad80:	46c0      	nop			; (mov r8, r8)
   1ad82:	46bd      	mov	sp, r7
   1ad84:	b004      	add	sp, #16
   1ad86:	bdb0      	pop	{r4, r5, r7, pc}
   1ad88:	0001aad9 	.word	0x0001aad9
   1ad8c:	00018869 	.word	0x00018869
   1ad90:	20000104 	.word	0x20000104
   1ad94:	00019e29 	.word	0x00019e29
   1ad98:	0001898d 	.word	0x0001898d
   1ad9c:	20000112 	.word	0x20000112
   1ada0:	000189c9 	.word	0x000189c9
   1ada4:	00018949 	.word	0x00018949
   1ada8:	00019fc1 	.word	0x00019fc1
   1adac:	00018b45 	.word	0x00018b45
   1adb0:	000188a9 	.word	0x000188a9
   1adb4:	20000110 	.word	0x20000110
   1adb8:	00018969 	.word	0x00018969
   1adbc:	000192a1 	.word	0x000192a1
   1adc0:	000198fd 	.word	0x000198fd

0001adc4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1adc4:	b590      	push	{r4, r7, lr}
   1adc6:	b083      	sub	sp, #12
   1adc8:	af00      	add	r7, sp, #0
   1adca:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1adcc:	687b      	ldr	r3, [r7, #4]
   1adce:	2b00      	cmp	r3, #0
   1add0:	d00e      	beq.n	1adf0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1add2:	687b      	ldr	r3, [r7, #4]
   1add4:	2200      	movs	r2, #0
   1add6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1add8:	687b      	ldr	r3, [r7, #4]
   1adda:	2200      	movs	r2, #0
   1addc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1adde:	687b      	ldr	r3, [r7, #4]
   1ade0:	2200      	movs	r2, #0
   1ade2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1ade4:	6878      	ldr	r0, [r7, #4]
   1ade6:	2300      	movs	r3, #0
   1ade8:	2200      	movs	r2, #0
   1adea:	2100      	movs	r1, #0
   1adec:	4c02      	ldr	r4, [pc, #8]	; (1adf8 <prvInitialiseMutex+0x34>)
   1adee:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1adf0:	46c0      	nop			; (mov r8, r8)
   1adf2:	46bd      	mov	sp, r7
   1adf4:	b003      	add	sp, #12
   1adf6:	bd90      	pop	{r4, r7, pc}
   1adf8:	0001ae3d 	.word	0x0001ae3d

0001adfc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1adfc:	b580      	push	{r7, lr}
   1adfe:	b086      	sub	sp, #24
   1ae00:	af00      	add	r7, sp, #0
   1ae02:	0002      	movs	r2, r0
   1ae04:	1dfb      	adds	r3, r7, #7
   1ae06:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1ae08:	2301      	movs	r3, #1
   1ae0a:	617b      	str	r3, [r7, #20]
   1ae0c:	2300      	movs	r3, #0
   1ae0e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1ae10:	1dfb      	adds	r3, r7, #7
   1ae12:	781a      	ldrb	r2, [r3, #0]
   1ae14:	6939      	ldr	r1, [r7, #16]
   1ae16:	697b      	ldr	r3, [r7, #20]
   1ae18:	0018      	movs	r0, r3
   1ae1a:	4b06      	ldr	r3, [pc, #24]	; (1ae34 <xQueueCreateMutex+0x38>)
   1ae1c:	4798      	blx	r3
   1ae1e:	0003      	movs	r3, r0
   1ae20:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1ae22:	68fb      	ldr	r3, [r7, #12]
   1ae24:	0018      	movs	r0, r3
   1ae26:	4b04      	ldr	r3, [pc, #16]	; (1ae38 <xQueueCreateMutex+0x3c>)
   1ae28:	4798      	blx	r3

		return pxNewQueue;
   1ae2a:	68fb      	ldr	r3, [r7, #12]
	}
   1ae2c:	0018      	movs	r0, r3
   1ae2e:	46bd      	mov	sp, r7
   1ae30:	b006      	add	sp, #24
   1ae32:	bd80      	pop	{r7, pc}
   1ae34:	0001ab95 	.word	0x0001ab95
   1ae38:	0001adc5 	.word	0x0001adc5

0001ae3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1ae3c:	b5b0      	push	{r4, r5, r7, lr}
   1ae3e:	b08a      	sub	sp, #40	; 0x28
   1ae40:	af00      	add	r7, sp, #0
   1ae42:	60f8      	str	r0, [r7, #12]
   1ae44:	60b9      	str	r1, [r7, #8]
   1ae46:	607a      	str	r2, [r7, #4]
   1ae48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1ae4a:	2300      	movs	r3, #0
   1ae4c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ae4e:	68fb      	ldr	r3, [r7, #12]
   1ae50:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1ae52:	6a3b      	ldr	r3, [r7, #32]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	d101      	bne.n	1ae5c <xQueueGenericSend+0x20>
   1ae58:	b672      	cpsid	i
   1ae5a:	e7fe      	b.n	1ae5a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ae5c:	68bb      	ldr	r3, [r7, #8]
   1ae5e:	2b00      	cmp	r3, #0
   1ae60:	d103      	bne.n	1ae6a <xQueueGenericSend+0x2e>
   1ae62:	6a3b      	ldr	r3, [r7, #32]
   1ae64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	d101      	bne.n	1ae6e <xQueueGenericSend+0x32>
   1ae6a:	2301      	movs	r3, #1
   1ae6c:	e000      	b.n	1ae70 <xQueueGenericSend+0x34>
   1ae6e:	2300      	movs	r3, #0
   1ae70:	2b00      	cmp	r3, #0
   1ae72:	d101      	bne.n	1ae78 <xQueueGenericSend+0x3c>
   1ae74:	b672      	cpsid	i
   1ae76:	e7fe      	b.n	1ae76 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ae78:	683b      	ldr	r3, [r7, #0]
   1ae7a:	2b02      	cmp	r3, #2
   1ae7c:	d103      	bne.n	1ae86 <xQueueGenericSend+0x4a>
   1ae7e:	6a3b      	ldr	r3, [r7, #32]
   1ae80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ae82:	2b01      	cmp	r3, #1
   1ae84:	d101      	bne.n	1ae8a <xQueueGenericSend+0x4e>
   1ae86:	2301      	movs	r3, #1
   1ae88:	e000      	b.n	1ae8c <xQueueGenericSend+0x50>
   1ae8a:	2300      	movs	r3, #0
   1ae8c:	2b00      	cmp	r3, #0
   1ae8e:	d101      	bne.n	1ae94 <xQueueGenericSend+0x58>
   1ae90:	b672      	cpsid	i
   1ae92:	e7fe      	b.n	1ae92 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ae94:	4bbc      	ldr	r3, [pc, #752]	; (1b188 <xQueueGenericSend+0x34c>)
   1ae96:	4798      	blx	r3
   1ae98:	1e03      	subs	r3, r0, #0
   1ae9a:	d102      	bne.n	1aea2 <xQueueGenericSend+0x66>
   1ae9c:	687b      	ldr	r3, [r7, #4]
   1ae9e:	2b00      	cmp	r3, #0
   1aea0:	d101      	bne.n	1aea6 <xQueueGenericSend+0x6a>
   1aea2:	2301      	movs	r3, #1
   1aea4:	e000      	b.n	1aea8 <xQueueGenericSend+0x6c>
   1aea6:	2300      	movs	r3, #0
   1aea8:	2b00      	cmp	r3, #0
   1aeaa:	d101      	bne.n	1aeb0 <xQueueGenericSend+0x74>
   1aeac:	b672      	cpsid	i
   1aeae:	e7fe      	b.n	1aeae <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1aeb0:	4bb6      	ldr	r3, [pc, #728]	; (1b18c <xQueueGenericSend+0x350>)
   1aeb2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1aeb4:	6a3b      	ldr	r3, [r7, #32]
   1aeb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1aeb8:	6a3b      	ldr	r3, [r7, #32]
   1aeba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aebc:	429a      	cmp	r2, r3
   1aebe:	d303      	bcc.n	1aec8 <xQueueGenericSend+0x8c>
   1aec0:	683b      	ldr	r3, [r7, #0]
   1aec2:	2b02      	cmp	r3, #2
   1aec4:	d000      	beq.n	1aec8 <xQueueGenericSend+0x8c>
   1aec6:	e08e      	b.n	1afe6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1aec8:	4bb1      	ldr	r3, [pc, #708]	; (1b190 <xQueueGenericSend+0x354>)
   1aeca:	4798      	blx	r3
   1aecc:	0003      	movs	r3, r0
   1aece:	0018      	movs	r0, r3
   1aed0:	4bb0      	ldr	r3, [pc, #704]	; (1b194 <xQueueGenericSend+0x358>)
   1aed2:	4798      	blx	r3
   1aed4:	0003      	movs	r3, r0
   1aed6:	001a      	movs	r2, r3
   1aed8:	4baf      	ldr	r3, [pc, #700]	; (1b198 <xQueueGenericSend+0x35c>)
   1aeda:	881b      	ldrh	r3, [r3, #0]
   1aedc:	4013      	ands	r3, r2
   1aede:	b29b      	uxth	r3, r3
   1aee0:	2b00      	cmp	r3, #0
   1aee2:	d02e      	beq.n	1af42 <xQueueGenericSend+0x106>
   1aee4:	6a3b      	ldr	r3, [r7, #32]
   1aee6:	0018      	movs	r0, r3
   1aee8:	4bac      	ldr	r3, [pc, #688]	; (1b19c <xQueueGenericSend+0x360>)
   1aeea:	4798      	blx	r3
   1aeec:	0003      	movs	r3, r0
   1aeee:	001a      	movs	r2, r3
   1aef0:	4ba9      	ldr	r3, [pc, #676]	; (1b198 <xQueueGenericSend+0x35c>)
   1aef2:	881b      	ldrh	r3, [r3, #0]
   1aef4:	4013      	ands	r3, r2
   1aef6:	b29b      	uxth	r3, r3
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	d022      	beq.n	1af42 <xQueueGenericSend+0x106>
   1aefc:	683b      	ldr	r3, [r7, #0]
   1aefe:	2b00      	cmp	r3, #0
   1af00:	d10b      	bne.n	1af1a <xQueueGenericSend+0xde>
   1af02:	6a3b      	ldr	r3, [r7, #32]
   1af04:	0018      	movs	r0, r3
   1af06:	4ba6      	ldr	r3, [pc, #664]	; (1b1a0 <xQueueGenericSend+0x364>)
   1af08:	4798      	blx	r3
   1af0a:	0003      	movs	r3, r0
   1af0c:	001a      	movs	r2, r3
   1af0e:	4ba5      	ldr	r3, [pc, #660]	; (1b1a4 <xQueueGenericSend+0x368>)
   1af10:	5c9b      	ldrb	r3, [r3, r2]
   1af12:	3320      	adds	r3, #32
   1af14:	b2db      	uxtb	r3, r3
   1af16:	001d      	movs	r5, r3
   1af18:	e000      	b.n	1af1c <xQueueGenericSend+0xe0>
   1af1a:	2525      	movs	r5, #37	; 0x25
   1af1c:	6a3b      	ldr	r3, [r7, #32]
   1af1e:	0018      	movs	r0, r3
   1af20:	4b9f      	ldr	r3, [pc, #636]	; (1b1a0 <xQueueGenericSend+0x364>)
   1af22:	4798      	blx	r3
   1af24:	0003      	movs	r3, r0
   1af26:	001a      	movs	r2, r3
   1af28:	4b9e      	ldr	r3, [pc, #632]	; (1b1a4 <xQueueGenericSend+0x368>)
   1af2a:	5c9c      	ldrb	r4, [r3, r2]
   1af2c:	6a3b      	ldr	r3, [r7, #32]
   1af2e:	0018      	movs	r0, r3
   1af30:	4b9d      	ldr	r3, [pc, #628]	; (1b1a8 <xQueueGenericSend+0x36c>)
   1af32:	4798      	blx	r3
   1af34:	0003      	movs	r3, r0
   1af36:	b2db      	uxtb	r3, r3
   1af38:	001a      	movs	r2, r3
   1af3a:	0021      	movs	r1, r4
   1af3c:	0028      	movs	r0, r5
   1af3e:	4b9b      	ldr	r3, [pc, #620]	; (1b1ac <xQueueGenericSend+0x370>)
   1af40:	4798      	blx	r3
   1af42:	6a3b      	ldr	r3, [r7, #32]
   1af44:	0018      	movs	r0, r3
   1af46:	4b96      	ldr	r3, [pc, #600]	; (1b1a0 <xQueueGenericSend+0x364>)
   1af48:	4798      	blx	r3
   1af4a:	0003      	movs	r3, r0
   1af4c:	001a      	movs	r2, r3
   1af4e:	4b95      	ldr	r3, [pc, #596]	; (1b1a4 <xQueueGenericSend+0x368>)
   1af50:	5c9c      	ldrb	r4, [r3, r2]
   1af52:	6a3b      	ldr	r3, [r7, #32]
   1af54:	0018      	movs	r0, r3
   1af56:	4b94      	ldr	r3, [pc, #592]	; (1b1a8 <xQueueGenericSend+0x36c>)
   1af58:	4798      	blx	r3
   1af5a:	0003      	movs	r3, r0
   1af5c:	b2dd      	uxtb	r5, r3
   1af5e:	6a3b      	ldr	r3, [r7, #32]
   1af60:	0018      	movs	r0, r3
   1af62:	4b8f      	ldr	r3, [pc, #572]	; (1b1a0 <xQueueGenericSend+0x364>)
   1af64:	4798      	blx	r3
   1af66:	0003      	movs	r3, r0
   1af68:	001a      	movs	r2, r3
   1af6a:	4b8e      	ldr	r3, [pc, #568]	; (1b1a4 <xQueueGenericSend+0x368>)
   1af6c:	5c9b      	ldrb	r3, [r3, r2]
   1af6e:	2b02      	cmp	r3, #2
   1af70:	d005      	beq.n	1af7e <xQueueGenericSend+0x142>
   1af72:	6a3b      	ldr	r3, [r7, #32]
   1af74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1af76:	b2db      	uxtb	r3, r3
   1af78:	3301      	adds	r3, #1
   1af7a:	b2db      	uxtb	r3, r3
   1af7c:	e000      	b.n	1af80 <xQueueGenericSend+0x144>
   1af7e:	2300      	movs	r3, #0
   1af80:	001a      	movs	r2, r3
   1af82:	0029      	movs	r1, r5
   1af84:	0020      	movs	r0, r4
   1af86:	4b8a      	ldr	r3, [pc, #552]	; (1b1b0 <xQueueGenericSend+0x374>)
   1af88:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1af8a:	683a      	ldr	r2, [r7, #0]
   1af8c:	68b9      	ldr	r1, [r7, #8]
   1af8e:	6a3b      	ldr	r3, [r7, #32]
   1af90:	0018      	movs	r0, r3
   1af92:	4b88      	ldr	r3, [pc, #544]	; (1b1b4 <xQueueGenericSend+0x378>)
   1af94:	4798      	blx	r3
   1af96:	0003      	movs	r3, r0
   1af98:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1af9a:	6a3b      	ldr	r3, [r7, #32]
   1af9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1af9e:	2b00      	cmp	r3, #0
   1afa0:	d00a      	beq.n	1afb8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1afa2:	683a      	ldr	r2, [r7, #0]
   1afa4:	6a3b      	ldr	r3, [r7, #32]
   1afa6:	0011      	movs	r1, r2
   1afa8:	0018      	movs	r0, r3
   1afaa:	4b83      	ldr	r3, [pc, #524]	; (1b1b8 <xQueueGenericSend+0x37c>)
   1afac:	4798      	blx	r3
   1afae:	1e03      	subs	r3, r0, #0
   1afb0:	d015      	beq.n	1afde <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1afb2:	4b82      	ldr	r3, [pc, #520]	; (1b1bc <xQueueGenericSend+0x380>)
   1afb4:	4798      	blx	r3
   1afb6:	e012      	b.n	1afde <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1afb8:	6a3b      	ldr	r3, [r7, #32]
   1afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1afbc:	2b00      	cmp	r3, #0
   1afbe:	d009      	beq.n	1afd4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1afc0:	6a3b      	ldr	r3, [r7, #32]
   1afc2:	3324      	adds	r3, #36	; 0x24
   1afc4:	0018      	movs	r0, r3
   1afc6:	4b7e      	ldr	r3, [pc, #504]	; (1b1c0 <xQueueGenericSend+0x384>)
   1afc8:	4798      	blx	r3
   1afca:	1e03      	subs	r3, r0, #0
   1afcc:	d007      	beq.n	1afde <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1afce:	4b7b      	ldr	r3, [pc, #492]	; (1b1bc <xQueueGenericSend+0x380>)
   1afd0:	4798      	blx	r3
   1afd2:	e004      	b.n	1afde <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1afd4:	69fb      	ldr	r3, [r7, #28]
   1afd6:	2b00      	cmp	r3, #0
   1afd8:	d001      	beq.n	1afde <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1afda:	4b78      	ldr	r3, [pc, #480]	; (1b1bc <xQueueGenericSend+0x380>)
   1afdc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1afde:	4b79      	ldr	r3, [pc, #484]	; (1b1c4 <xQueueGenericSend+0x388>)
   1afe0:	4798      	blx	r3
				return pdPASS;
   1afe2:	2301      	movs	r3, #1
   1afe4:	e142      	b.n	1b26c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1afe6:	687b      	ldr	r3, [r7, #4]
   1afe8:	2b00      	cmp	r3, #0
   1afea:	d140      	bne.n	1b06e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1afec:	4b75      	ldr	r3, [pc, #468]	; (1b1c4 <xQueueGenericSend+0x388>)
   1afee:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1aff0:	4b67      	ldr	r3, [pc, #412]	; (1b190 <xQueueGenericSend+0x354>)
   1aff2:	4798      	blx	r3
   1aff4:	0003      	movs	r3, r0
   1aff6:	0018      	movs	r0, r3
   1aff8:	4b66      	ldr	r3, [pc, #408]	; (1b194 <xQueueGenericSend+0x358>)
   1affa:	4798      	blx	r3
   1affc:	0003      	movs	r3, r0
   1affe:	001a      	movs	r2, r3
   1b000:	4b65      	ldr	r3, [pc, #404]	; (1b198 <xQueueGenericSend+0x35c>)
   1b002:	881b      	ldrh	r3, [r3, #0]
   1b004:	4013      	ands	r3, r2
   1b006:	b29b      	uxth	r3, r3
   1b008:	2b00      	cmp	r3, #0
   1b00a:	d02e      	beq.n	1b06a <xQueueGenericSend+0x22e>
   1b00c:	6a3b      	ldr	r3, [r7, #32]
   1b00e:	0018      	movs	r0, r3
   1b010:	4b62      	ldr	r3, [pc, #392]	; (1b19c <xQueueGenericSend+0x360>)
   1b012:	4798      	blx	r3
   1b014:	0003      	movs	r3, r0
   1b016:	001a      	movs	r2, r3
   1b018:	4b5f      	ldr	r3, [pc, #380]	; (1b198 <xQueueGenericSend+0x35c>)
   1b01a:	881b      	ldrh	r3, [r3, #0]
   1b01c:	4013      	ands	r3, r2
   1b01e:	b29b      	uxth	r3, r3
   1b020:	2b00      	cmp	r3, #0
   1b022:	d022      	beq.n	1b06a <xQueueGenericSend+0x22e>
   1b024:	683b      	ldr	r3, [r7, #0]
   1b026:	2b00      	cmp	r3, #0
   1b028:	d10b      	bne.n	1b042 <xQueueGenericSend+0x206>
   1b02a:	6a3b      	ldr	r3, [r7, #32]
   1b02c:	0018      	movs	r0, r3
   1b02e:	4b5c      	ldr	r3, [pc, #368]	; (1b1a0 <xQueueGenericSend+0x364>)
   1b030:	4798      	blx	r3
   1b032:	0003      	movs	r3, r0
   1b034:	001a      	movs	r2, r3
   1b036:	4b5b      	ldr	r3, [pc, #364]	; (1b1a4 <xQueueGenericSend+0x368>)
   1b038:	5c9b      	ldrb	r3, [r3, r2]
   1b03a:	3348      	adds	r3, #72	; 0x48
   1b03c:	b2db      	uxtb	r3, r3
   1b03e:	001d      	movs	r5, r3
   1b040:	e000      	b.n	1b044 <xQueueGenericSend+0x208>
   1b042:	254d      	movs	r5, #77	; 0x4d
   1b044:	6a3b      	ldr	r3, [r7, #32]
   1b046:	0018      	movs	r0, r3
   1b048:	4b55      	ldr	r3, [pc, #340]	; (1b1a0 <xQueueGenericSend+0x364>)
   1b04a:	4798      	blx	r3
   1b04c:	0003      	movs	r3, r0
   1b04e:	001a      	movs	r2, r3
   1b050:	4b54      	ldr	r3, [pc, #336]	; (1b1a4 <xQueueGenericSend+0x368>)
   1b052:	5c9c      	ldrb	r4, [r3, r2]
   1b054:	6a3b      	ldr	r3, [r7, #32]
   1b056:	0018      	movs	r0, r3
   1b058:	4b53      	ldr	r3, [pc, #332]	; (1b1a8 <xQueueGenericSend+0x36c>)
   1b05a:	4798      	blx	r3
   1b05c:	0003      	movs	r3, r0
   1b05e:	b2db      	uxtb	r3, r3
   1b060:	001a      	movs	r2, r3
   1b062:	0021      	movs	r1, r4
   1b064:	0028      	movs	r0, r5
   1b066:	4b51      	ldr	r3, [pc, #324]	; (1b1ac <xQueueGenericSend+0x370>)
   1b068:	4798      	blx	r3
					return errQUEUE_FULL;
   1b06a:	2300      	movs	r3, #0
   1b06c:	e0fe      	b.n	1b26c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b070:	2b00      	cmp	r3, #0
   1b072:	d106      	bne.n	1b082 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b074:	2314      	movs	r3, #20
   1b076:	18fb      	adds	r3, r7, r3
   1b078:	0018      	movs	r0, r3
   1b07a:	4b53      	ldr	r3, [pc, #332]	; (1b1c8 <xQueueGenericSend+0x38c>)
   1b07c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b07e:	2301      	movs	r3, #1
   1b080:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b082:	4b50      	ldr	r3, [pc, #320]	; (1b1c4 <xQueueGenericSend+0x388>)
   1b084:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b086:	4b51      	ldr	r3, [pc, #324]	; (1b1cc <xQueueGenericSend+0x390>)
   1b088:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b08a:	4b40      	ldr	r3, [pc, #256]	; (1b18c <xQueueGenericSend+0x350>)
   1b08c:	4798      	blx	r3
   1b08e:	6a3b      	ldr	r3, [r7, #32]
   1b090:	2244      	movs	r2, #68	; 0x44
   1b092:	5c9b      	ldrb	r3, [r3, r2]
   1b094:	b25b      	sxtb	r3, r3
   1b096:	3301      	adds	r3, #1
   1b098:	d103      	bne.n	1b0a2 <xQueueGenericSend+0x266>
   1b09a:	6a3b      	ldr	r3, [r7, #32]
   1b09c:	2244      	movs	r2, #68	; 0x44
   1b09e:	2100      	movs	r1, #0
   1b0a0:	5499      	strb	r1, [r3, r2]
   1b0a2:	6a3b      	ldr	r3, [r7, #32]
   1b0a4:	2245      	movs	r2, #69	; 0x45
   1b0a6:	5c9b      	ldrb	r3, [r3, r2]
   1b0a8:	b25b      	sxtb	r3, r3
   1b0aa:	3301      	adds	r3, #1
   1b0ac:	d103      	bne.n	1b0b6 <xQueueGenericSend+0x27a>
   1b0ae:	6a3b      	ldr	r3, [r7, #32]
   1b0b0:	2245      	movs	r2, #69	; 0x45
   1b0b2:	2100      	movs	r1, #0
   1b0b4:	5499      	strb	r1, [r3, r2]
   1b0b6:	4b43      	ldr	r3, [pc, #268]	; (1b1c4 <xQueueGenericSend+0x388>)
   1b0b8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b0ba:	1d3a      	adds	r2, r7, #4
   1b0bc:	2314      	movs	r3, #20
   1b0be:	18fb      	adds	r3, r7, r3
   1b0c0:	0011      	movs	r1, r2
   1b0c2:	0018      	movs	r0, r3
   1b0c4:	4b42      	ldr	r3, [pc, #264]	; (1b1d0 <xQueueGenericSend+0x394>)
   1b0c6:	4798      	blx	r3
   1b0c8:	1e03      	subs	r3, r0, #0
   1b0ca:	d000      	beq.n	1b0ce <xQueueGenericSend+0x292>
   1b0cc:	e08a      	b.n	1b1e4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b0ce:	6a3b      	ldr	r3, [r7, #32]
   1b0d0:	0018      	movs	r0, r3
   1b0d2:	4b40      	ldr	r3, [pc, #256]	; (1b1d4 <xQueueGenericSend+0x398>)
   1b0d4:	4798      	blx	r3
   1b0d6:	1e03      	subs	r3, r0, #0
   1b0d8:	d04f      	beq.n	1b17a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b0da:	4b2d      	ldr	r3, [pc, #180]	; (1b190 <xQueueGenericSend+0x354>)
   1b0dc:	4798      	blx	r3
   1b0de:	0003      	movs	r3, r0
   1b0e0:	0018      	movs	r0, r3
   1b0e2:	4b2c      	ldr	r3, [pc, #176]	; (1b194 <xQueueGenericSend+0x358>)
   1b0e4:	4798      	blx	r3
   1b0e6:	0003      	movs	r3, r0
   1b0e8:	001a      	movs	r2, r3
   1b0ea:	4b2b      	ldr	r3, [pc, #172]	; (1b198 <xQueueGenericSend+0x35c>)
   1b0ec:	881b      	ldrh	r3, [r3, #0]
   1b0ee:	4013      	ands	r3, r2
   1b0f0:	b29b      	uxth	r3, r3
   1b0f2:	2b00      	cmp	r3, #0
   1b0f4:	d02e      	beq.n	1b154 <xQueueGenericSend+0x318>
   1b0f6:	6a3b      	ldr	r3, [r7, #32]
   1b0f8:	0018      	movs	r0, r3
   1b0fa:	4b28      	ldr	r3, [pc, #160]	; (1b19c <xQueueGenericSend+0x360>)
   1b0fc:	4798      	blx	r3
   1b0fe:	0003      	movs	r3, r0
   1b100:	001a      	movs	r2, r3
   1b102:	4b25      	ldr	r3, [pc, #148]	; (1b198 <xQueueGenericSend+0x35c>)
   1b104:	881b      	ldrh	r3, [r3, #0]
   1b106:	4013      	ands	r3, r2
   1b108:	b29b      	uxth	r3, r3
   1b10a:	2b00      	cmp	r3, #0
   1b10c:	d022      	beq.n	1b154 <xQueueGenericSend+0x318>
   1b10e:	683b      	ldr	r3, [r7, #0]
   1b110:	2b00      	cmp	r3, #0
   1b112:	d10b      	bne.n	1b12c <xQueueGenericSend+0x2f0>
   1b114:	6a3b      	ldr	r3, [r7, #32]
   1b116:	0018      	movs	r0, r3
   1b118:	4b21      	ldr	r3, [pc, #132]	; (1b1a0 <xQueueGenericSend+0x364>)
   1b11a:	4798      	blx	r3
   1b11c:	0003      	movs	r3, r0
   1b11e:	001a      	movs	r2, r3
   1b120:	4b20      	ldr	r3, [pc, #128]	; (1b1a4 <xQueueGenericSend+0x368>)
   1b122:	5c9b      	ldrb	r3, [r3, r2]
   1b124:	3370      	adds	r3, #112	; 0x70
   1b126:	b2db      	uxtb	r3, r3
   1b128:	001d      	movs	r5, r3
   1b12a:	e000      	b.n	1b12e <xQueueGenericSend+0x2f2>
   1b12c:	2575      	movs	r5, #117	; 0x75
   1b12e:	6a3b      	ldr	r3, [r7, #32]
   1b130:	0018      	movs	r0, r3
   1b132:	4b1b      	ldr	r3, [pc, #108]	; (1b1a0 <xQueueGenericSend+0x364>)
   1b134:	4798      	blx	r3
   1b136:	0003      	movs	r3, r0
   1b138:	001a      	movs	r2, r3
   1b13a:	4b1a      	ldr	r3, [pc, #104]	; (1b1a4 <xQueueGenericSend+0x368>)
   1b13c:	5c9c      	ldrb	r4, [r3, r2]
   1b13e:	6a3b      	ldr	r3, [r7, #32]
   1b140:	0018      	movs	r0, r3
   1b142:	4b19      	ldr	r3, [pc, #100]	; (1b1a8 <xQueueGenericSend+0x36c>)
   1b144:	4798      	blx	r3
   1b146:	0003      	movs	r3, r0
   1b148:	b2db      	uxtb	r3, r3
   1b14a:	001a      	movs	r2, r3
   1b14c:	0021      	movs	r1, r4
   1b14e:	0028      	movs	r0, r5
   1b150:	4b16      	ldr	r3, [pc, #88]	; (1b1ac <xQueueGenericSend+0x370>)
   1b152:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b154:	6a3b      	ldr	r3, [r7, #32]
   1b156:	3310      	adds	r3, #16
   1b158:	687a      	ldr	r2, [r7, #4]
   1b15a:	0011      	movs	r1, r2
   1b15c:	0018      	movs	r0, r3
   1b15e:	4b1e      	ldr	r3, [pc, #120]	; (1b1d8 <xQueueGenericSend+0x39c>)
   1b160:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b162:	6a3b      	ldr	r3, [r7, #32]
   1b164:	0018      	movs	r0, r3
   1b166:	4b1d      	ldr	r3, [pc, #116]	; (1b1dc <xQueueGenericSend+0x3a0>)
   1b168:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b16a:	4b1d      	ldr	r3, [pc, #116]	; (1b1e0 <xQueueGenericSend+0x3a4>)
   1b16c:	4798      	blx	r3
   1b16e:	1e03      	subs	r3, r0, #0
   1b170:	d000      	beq.n	1b174 <xQueueGenericSend+0x338>
   1b172:	e69d      	b.n	1aeb0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b174:	4b11      	ldr	r3, [pc, #68]	; (1b1bc <xQueueGenericSend+0x380>)
   1b176:	4798      	blx	r3
   1b178:	e69a      	b.n	1aeb0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b17a:	6a3b      	ldr	r3, [r7, #32]
   1b17c:	0018      	movs	r0, r3
   1b17e:	4b17      	ldr	r3, [pc, #92]	; (1b1dc <xQueueGenericSend+0x3a0>)
   1b180:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b182:	4b17      	ldr	r3, [pc, #92]	; (1b1e0 <xQueueGenericSend+0x3a4>)
   1b184:	4798      	blx	r3
   1b186:	e693      	b.n	1aeb0 <xQueueGenericSend+0x74>
   1b188:	0001d5c9 	.word	0x0001d5c9
   1b18c:	0001a8a9 	.word	0x0001a8a9
   1b190:	00018b45 	.word	0x00018b45
   1b194:	000188a9 	.word	0x000188a9
   1b198:	20000110 	.word	0x20000110
   1b19c:	00018969 	.word	0x00018969
   1b1a0:	00018869 	.word	0x00018869
   1b1a4:	20000104 	.word	0x20000104
   1b1a8:	00018949 	.word	0x00018949
   1b1ac:	000192a1 	.word	0x000192a1
   1b1b0:	000198fd 	.word	0x000198fd
   1b1b4:	0001c075 	.word	0x0001c075
   1b1b8:	0001c379 	.word	0x0001c379
   1b1bc:	0001a891 	.word	0x0001a891
   1b1c0:	0001d139 	.word	0x0001d139
   1b1c4:	0001a8cd 	.word	0x0001a8cd
   1b1c8:	0001d279 	.word	0x0001d279
   1b1cc:	0001cb61 	.word	0x0001cb61
   1b1d0:	0001d2a1 	.word	0x0001d2a1
   1b1d4:	0001c2c9 	.word	0x0001c2c9
   1b1d8:	0001d015 	.word	0x0001d015
   1b1dc:	0001c1a5 	.word	0x0001c1a5
   1b1e0:	0001cb79 	.word	0x0001cb79
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b1e4:	6a3b      	ldr	r3, [r7, #32]
   1b1e6:	0018      	movs	r0, r3
   1b1e8:	4b22      	ldr	r3, [pc, #136]	; (1b274 <xQueueGenericSend+0x438>)
   1b1ea:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b1ec:	4b22      	ldr	r3, [pc, #136]	; (1b278 <xQueueGenericSend+0x43c>)
   1b1ee:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b1f0:	4b22      	ldr	r3, [pc, #136]	; (1b27c <xQueueGenericSend+0x440>)
   1b1f2:	4798      	blx	r3
   1b1f4:	0003      	movs	r3, r0
   1b1f6:	0018      	movs	r0, r3
   1b1f8:	4b21      	ldr	r3, [pc, #132]	; (1b280 <xQueueGenericSend+0x444>)
   1b1fa:	4798      	blx	r3
   1b1fc:	0003      	movs	r3, r0
   1b1fe:	001a      	movs	r2, r3
   1b200:	4b20      	ldr	r3, [pc, #128]	; (1b284 <xQueueGenericSend+0x448>)
   1b202:	881b      	ldrh	r3, [r3, #0]
   1b204:	4013      	ands	r3, r2
   1b206:	b29b      	uxth	r3, r3
   1b208:	2b00      	cmp	r3, #0
   1b20a:	d02e      	beq.n	1b26a <xQueueGenericSend+0x42e>
   1b20c:	6a3b      	ldr	r3, [r7, #32]
   1b20e:	0018      	movs	r0, r3
   1b210:	4b1d      	ldr	r3, [pc, #116]	; (1b288 <xQueueGenericSend+0x44c>)
   1b212:	4798      	blx	r3
   1b214:	0003      	movs	r3, r0
   1b216:	001a      	movs	r2, r3
   1b218:	4b1a      	ldr	r3, [pc, #104]	; (1b284 <xQueueGenericSend+0x448>)
   1b21a:	881b      	ldrh	r3, [r3, #0]
   1b21c:	4013      	ands	r3, r2
   1b21e:	b29b      	uxth	r3, r3
   1b220:	2b00      	cmp	r3, #0
   1b222:	d022      	beq.n	1b26a <xQueueGenericSend+0x42e>
   1b224:	683b      	ldr	r3, [r7, #0]
   1b226:	2b00      	cmp	r3, #0
   1b228:	d10b      	bne.n	1b242 <xQueueGenericSend+0x406>
   1b22a:	6a3b      	ldr	r3, [r7, #32]
   1b22c:	0018      	movs	r0, r3
   1b22e:	4b17      	ldr	r3, [pc, #92]	; (1b28c <xQueueGenericSend+0x450>)
   1b230:	4798      	blx	r3
   1b232:	0003      	movs	r3, r0
   1b234:	001a      	movs	r2, r3
   1b236:	4b16      	ldr	r3, [pc, #88]	; (1b290 <xQueueGenericSend+0x454>)
   1b238:	5c9b      	ldrb	r3, [r3, r2]
   1b23a:	3348      	adds	r3, #72	; 0x48
   1b23c:	b2db      	uxtb	r3, r3
   1b23e:	001d      	movs	r5, r3
   1b240:	e000      	b.n	1b244 <xQueueGenericSend+0x408>
   1b242:	254d      	movs	r5, #77	; 0x4d
   1b244:	6a3b      	ldr	r3, [r7, #32]
   1b246:	0018      	movs	r0, r3
   1b248:	4b10      	ldr	r3, [pc, #64]	; (1b28c <xQueueGenericSend+0x450>)
   1b24a:	4798      	blx	r3
   1b24c:	0003      	movs	r3, r0
   1b24e:	001a      	movs	r2, r3
   1b250:	4b0f      	ldr	r3, [pc, #60]	; (1b290 <xQueueGenericSend+0x454>)
   1b252:	5c9c      	ldrb	r4, [r3, r2]
   1b254:	6a3b      	ldr	r3, [r7, #32]
   1b256:	0018      	movs	r0, r3
   1b258:	4b0e      	ldr	r3, [pc, #56]	; (1b294 <xQueueGenericSend+0x458>)
   1b25a:	4798      	blx	r3
   1b25c:	0003      	movs	r3, r0
   1b25e:	b2db      	uxtb	r3, r3
   1b260:	001a      	movs	r2, r3
   1b262:	0021      	movs	r1, r4
   1b264:	0028      	movs	r0, r5
   1b266:	4b0c      	ldr	r3, [pc, #48]	; (1b298 <xQueueGenericSend+0x45c>)
   1b268:	4798      	blx	r3
			return errQUEUE_FULL;
   1b26a:	2300      	movs	r3, #0
		}
	}
}
   1b26c:	0018      	movs	r0, r3
   1b26e:	46bd      	mov	sp, r7
   1b270:	b00a      	add	sp, #40	; 0x28
   1b272:	bdb0      	pop	{r4, r5, r7, pc}
   1b274:	0001c1a5 	.word	0x0001c1a5
   1b278:	0001cb79 	.word	0x0001cb79
   1b27c:	00018b45 	.word	0x00018b45
   1b280:	000188a9 	.word	0x000188a9
   1b284:	20000110 	.word	0x20000110
   1b288:	00018969 	.word	0x00018969
   1b28c:	00018869 	.word	0x00018869
   1b290:	20000104 	.word	0x20000104
   1b294:	00018949 	.word	0x00018949
   1b298:	000192a1 	.word	0x000192a1

0001b29c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b29c:	b5b0      	push	{r4, r5, r7, lr}
   1b29e:	b088      	sub	sp, #32
   1b2a0:	af00      	add	r7, sp, #0
   1b2a2:	60f8      	str	r0, [r7, #12]
   1b2a4:	60b9      	str	r1, [r7, #8]
   1b2a6:	607a      	str	r2, [r7, #4]
   1b2a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b2aa:	68fb      	ldr	r3, [r7, #12]
   1b2ac:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b2ae:	69bb      	ldr	r3, [r7, #24]
   1b2b0:	2b00      	cmp	r3, #0
   1b2b2:	d101      	bne.n	1b2b8 <xQueueGenericSendFromISR+0x1c>
   1b2b4:	b672      	cpsid	i
   1b2b6:	e7fe      	b.n	1b2b6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b2b8:	68bb      	ldr	r3, [r7, #8]
   1b2ba:	2b00      	cmp	r3, #0
   1b2bc:	d103      	bne.n	1b2c6 <xQueueGenericSendFromISR+0x2a>
   1b2be:	69bb      	ldr	r3, [r7, #24]
   1b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b2c2:	2b00      	cmp	r3, #0
   1b2c4:	d101      	bne.n	1b2ca <xQueueGenericSendFromISR+0x2e>
   1b2c6:	2301      	movs	r3, #1
   1b2c8:	e000      	b.n	1b2cc <xQueueGenericSendFromISR+0x30>
   1b2ca:	2300      	movs	r3, #0
   1b2cc:	2b00      	cmp	r3, #0
   1b2ce:	d101      	bne.n	1b2d4 <xQueueGenericSendFromISR+0x38>
   1b2d0:	b672      	cpsid	i
   1b2d2:	e7fe      	b.n	1b2d2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b2d4:	683b      	ldr	r3, [r7, #0]
   1b2d6:	2b02      	cmp	r3, #2
   1b2d8:	d103      	bne.n	1b2e2 <xQueueGenericSendFromISR+0x46>
   1b2da:	69bb      	ldr	r3, [r7, #24]
   1b2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b2de:	2b01      	cmp	r3, #1
   1b2e0:	d101      	bne.n	1b2e6 <xQueueGenericSendFromISR+0x4a>
   1b2e2:	2301      	movs	r3, #1
   1b2e4:	e000      	b.n	1b2e8 <xQueueGenericSendFromISR+0x4c>
   1b2e6:	2300      	movs	r3, #0
   1b2e8:	2b00      	cmp	r3, #0
   1b2ea:	d101      	bne.n	1b2f0 <xQueueGenericSendFromISR+0x54>
   1b2ec:	b672      	cpsid	i
   1b2ee:	e7fe      	b.n	1b2ee <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b2f0:	4b68      	ldr	r3, [pc, #416]	; (1b494 <xQueueGenericSendFromISR+0x1f8>)
   1b2f2:	4798      	blx	r3
   1b2f4:	0003      	movs	r3, r0
   1b2f6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b2f8:	69bb      	ldr	r3, [r7, #24]
   1b2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b2fc:	69bb      	ldr	r3, [r7, #24]
   1b2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b300:	429a      	cmp	r2, r3
   1b302:	d303      	bcc.n	1b30c <xQueueGenericSendFromISR+0x70>
   1b304:	683b      	ldr	r3, [r7, #0]
   1b306:	2b02      	cmp	r3, #2
   1b308:	d000      	beq.n	1b30c <xQueueGenericSendFromISR+0x70>
   1b30a:	e088      	b.n	1b41e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b30c:	2313      	movs	r3, #19
   1b30e:	18fb      	adds	r3, r7, r3
   1b310:	69ba      	ldr	r2, [r7, #24]
   1b312:	2145      	movs	r1, #69	; 0x45
   1b314:	5c52      	ldrb	r2, [r2, r1]
   1b316:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b318:	69bb      	ldr	r3, [r7, #24]
   1b31a:	0018      	movs	r0, r3
   1b31c:	4b5e      	ldr	r3, [pc, #376]	; (1b498 <xQueueGenericSendFromISR+0x1fc>)
   1b31e:	4798      	blx	r3
   1b320:	0003      	movs	r3, r0
   1b322:	001a      	movs	r2, r3
   1b324:	4b5d      	ldr	r3, [pc, #372]	; (1b49c <xQueueGenericSendFromISR+0x200>)
   1b326:	881b      	ldrh	r3, [r3, #0]
   1b328:	4013      	ands	r3, r2
   1b32a:	b29b      	uxth	r3, r3
   1b32c:	2b00      	cmp	r3, #0
   1b32e:	d022      	beq.n	1b376 <xQueueGenericSendFromISR+0xda>
   1b330:	683b      	ldr	r3, [r7, #0]
   1b332:	2b00      	cmp	r3, #0
   1b334:	d10b      	bne.n	1b34e <xQueueGenericSendFromISR+0xb2>
   1b336:	69bb      	ldr	r3, [r7, #24]
   1b338:	0018      	movs	r0, r3
   1b33a:	4b59      	ldr	r3, [pc, #356]	; (1b4a0 <xQueueGenericSendFromISR+0x204>)
   1b33c:	4798      	blx	r3
   1b33e:	0003      	movs	r3, r0
   1b340:	001a      	movs	r2, r3
   1b342:	4b58      	ldr	r3, [pc, #352]	; (1b4a4 <xQueueGenericSendFromISR+0x208>)
   1b344:	5c9b      	ldrb	r3, [r3, r2]
   1b346:	3330      	adds	r3, #48	; 0x30
   1b348:	b2db      	uxtb	r3, r3
   1b34a:	001d      	movs	r5, r3
   1b34c:	e000      	b.n	1b350 <xQueueGenericSendFromISR+0xb4>
   1b34e:	2535      	movs	r5, #53	; 0x35
   1b350:	69bb      	ldr	r3, [r7, #24]
   1b352:	0018      	movs	r0, r3
   1b354:	4b52      	ldr	r3, [pc, #328]	; (1b4a0 <xQueueGenericSendFromISR+0x204>)
   1b356:	4798      	blx	r3
   1b358:	0003      	movs	r3, r0
   1b35a:	001a      	movs	r2, r3
   1b35c:	4b51      	ldr	r3, [pc, #324]	; (1b4a4 <xQueueGenericSendFromISR+0x208>)
   1b35e:	5c9c      	ldrb	r4, [r3, r2]
   1b360:	69bb      	ldr	r3, [r7, #24]
   1b362:	0018      	movs	r0, r3
   1b364:	4b50      	ldr	r3, [pc, #320]	; (1b4a8 <xQueueGenericSendFromISR+0x20c>)
   1b366:	4798      	blx	r3
   1b368:	0003      	movs	r3, r0
   1b36a:	b2db      	uxtb	r3, r3
   1b36c:	001a      	movs	r2, r3
   1b36e:	0021      	movs	r1, r4
   1b370:	0028      	movs	r0, r5
   1b372:	4b4e      	ldr	r3, [pc, #312]	; (1b4ac <xQueueGenericSendFromISR+0x210>)
   1b374:	4798      	blx	r3
   1b376:	69bb      	ldr	r3, [r7, #24]
   1b378:	0018      	movs	r0, r3
   1b37a:	4b49      	ldr	r3, [pc, #292]	; (1b4a0 <xQueueGenericSendFromISR+0x204>)
   1b37c:	4798      	blx	r3
   1b37e:	0003      	movs	r3, r0
   1b380:	001a      	movs	r2, r3
   1b382:	4b48      	ldr	r3, [pc, #288]	; (1b4a4 <xQueueGenericSendFromISR+0x208>)
   1b384:	5c9c      	ldrb	r4, [r3, r2]
   1b386:	69bb      	ldr	r3, [r7, #24]
   1b388:	0018      	movs	r0, r3
   1b38a:	4b47      	ldr	r3, [pc, #284]	; (1b4a8 <xQueueGenericSendFromISR+0x20c>)
   1b38c:	4798      	blx	r3
   1b38e:	0003      	movs	r3, r0
   1b390:	b2d9      	uxtb	r1, r3
   1b392:	69bb      	ldr	r3, [r7, #24]
   1b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b396:	b2db      	uxtb	r3, r3
   1b398:	3301      	adds	r3, #1
   1b39a:	b2db      	uxtb	r3, r3
   1b39c:	001a      	movs	r2, r3
   1b39e:	0020      	movs	r0, r4
   1b3a0:	4b43      	ldr	r3, [pc, #268]	; (1b4b0 <xQueueGenericSendFromISR+0x214>)
   1b3a2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b3a4:	683a      	ldr	r2, [r7, #0]
   1b3a6:	68b9      	ldr	r1, [r7, #8]
   1b3a8:	69bb      	ldr	r3, [r7, #24]
   1b3aa:	0018      	movs	r0, r3
   1b3ac:	4b41      	ldr	r3, [pc, #260]	; (1b4b4 <xQueueGenericSendFromISR+0x218>)
   1b3ae:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b3b0:	2313      	movs	r3, #19
   1b3b2:	18fb      	adds	r3, r7, r3
   1b3b4:	781b      	ldrb	r3, [r3, #0]
   1b3b6:	b25b      	sxtb	r3, r3
   1b3b8:	3301      	adds	r3, #1
   1b3ba:	d124      	bne.n	1b406 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b3bc:	69bb      	ldr	r3, [r7, #24]
   1b3be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b3c0:	2b00      	cmp	r3, #0
   1b3c2:	d00e      	beq.n	1b3e2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b3c4:	683a      	ldr	r2, [r7, #0]
   1b3c6:	69bb      	ldr	r3, [r7, #24]
   1b3c8:	0011      	movs	r1, r2
   1b3ca:	0018      	movs	r0, r3
   1b3cc:	4b3a      	ldr	r3, [pc, #232]	; (1b4b8 <xQueueGenericSendFromISR+0x21c>)
   1b3ce:	4798      	blx	r3
   1b3d0:	1e03      	subs	r3, r0, #0
   1b3d2:	d021      	beq.n	1b418 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b3d4:	687b      	ldr	r3, [r7, #4]
   1b3d6:	2b00      	cmp	r3, #0
   1b3d8:	d01e      	beq.n	1b418 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b3da:	687b      	ldr	r3, [r7, #4]
   1b3dc:	2201      	movs	r2, #1
   1b3de:	601a      	str	r2, [r3, #0]
   1b3e0:	e01a      	b.n	1b418 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b3e2:	69bb      	ldr	r3, [r7, #24]
   1b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b3e6:	2b00      	cmp	r3, #0
   1b3e8:	d016      	beq.n	1b418 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b3ea:	69bb      	ldr	r3, [r7, #24]
   1b3ec:	3324      	adds	r3, #36	; 0x24
   1b3ee:	0018      	movs	r0, r3
   1b3f0:	4b32      	ldr	r3, [pc, #200]	; (1b4bc <xQueueGenericSendFromISR+0x220>)
   1b3f2:	4798      	blx	r3
   1b3f4:	1e03      	subs	r3, r0, #0
   1b3f6:	d00f      	beq.n	1b418 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b3f8:	687b      	ldr	r3, [r7, #4]
   1b3fa:	2b00      	cmp	r3, #0
   1b3fc:	d00c      	beq.n	1b418 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b3fe:	687b      	ldr	r3, [r7, #4]
   1b400:	2201      	movs	r2, #1
   1b402:	601a      	str	r2, [r3, #0]
   1b404:	e008      	b.n	1b418 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b406:	2313      	movs	r3, #19
   1b408:	18fb      	adds	r3, r7, r3
   1b40a:	781b      	ldrb	r3, [r3, #0]
   1b40c:	3301      	adds	r3, #1
   1b40e:	b2db      	uxtb	r3, r3
   1b410:	b259      	sxtb	r1, r3
   1b412:	69bb      	ldr	r3, [r7, #24]
   1b414:	2245      	movs	r2, #69	; 0x45
   1b416:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b418:	2301      	movs	r3, #1
   1b41a:	61fb      	str	r3, [r7, #28]
		{
   1b41c:	e030      	b.n	1b480 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b41e:	69bb      	ldr	r3, [r7, #24]
   1b420:	0018      	movs	r0, r3
   1b422:	4b1d      	ldr	r3, [pc, #116]	; (1b498 <xQueueGenericSendFromISR+0x1fc>)
   1b424:	4798      	blx	r3
   1b426:	0003      	movs	r3, r0
   1b428:	001a      	movs	r2, r3
   1b42a:	4b1c      	ldr	r3, [pc, #112]	; (1b49c <xQueueGenericSendFromISR+0x200>)
   1b42c:	881b      	ldrh	r3, [r3, #0]
   1b42e:	4013      	ands	r3, r2
   1b430:	b29b      	uxth	r3, r3
   1b432:	2b00      	cmp	r3, #0
   1b434:	d022      	beq.n	1b47c <xQueueGenericSendFromISR+0x1e0>
   1b436:	683b      	ldr	r3, [r7, #0]
   1b438:	2b00      	cmp	r3, #0
   1b43a:	d10b      	bne.n	1b454 <xQueueGenericSendFromISR+0x1b8>
   1b43c:	69bb      	ldr	r3, [r7, #24]
   1b43e:	0018      	movs	r0, r3
   1b440:	4b17      	ldr	r3, [pc, #92]	; (1b4a0 <xQueueGenericSendFromISR+0x204>)
   1b442:	4798      	blx	r3
   1b444:	0003      	movs	r3, r0
   1b446:	001a      	movs	r2, r3
   1b448:	4b16      	ldr	r3, [pc, #88]	; (1b4a4 <xQueueGenericSendFromISR+0x208>)
   1b44a:	5c9b      	ldrb	r3, [r3, r2]
   1b44c:	3358      	adds	r3, #88	; 0x58
   1b44e:	b2db      	uxtb	r3, r3
   1b450:	001d      	movs	r5, r3
   1b452:	e000      	b.n	1b456 <xQueueGenericSendFromISR+0x1ba>
   1b454:	255d      	movs	r5, #93	; 0x5d
   1b456:	69bb      	ldr	r3, [r7, #24]
   1b458:	0018      	movs	r0, r3
   1b45a:	4b11      	ldr	r3, [pc, #68]	; (1b4a0 <xQueueGenericSendFromISR+0x204>)
   1b45c:	4798      	blx	r3
   1b45e:	0003      	movs	r3, r0
   1b460:	001a      	movs	r2, r3
   1b462:	4b10      	ldr	r3, [pc, #64]	; (1b4a4 <xQueueGenericSendFromISR+0x208>)
   1b464:	5c9c      	ldrb	r4, [r3, r2]
   1b466:	69bb      	ldr	r3, [r7, #24]
   1b468:	0018      	movs	r0, r3
   1b46a:	4b0f      	ldr	r3, [pc, #60]	; (1b4a8 <xQueueGenericSendFromISR+0x20c>)
   1b46c:	4798      	blx	r3
   1b46e:	0003      	movs	r3, r0
   1b470:	b2db      	uxtb	r3, r3
   1b472:	001a      	movs	r2, r3
   1b474:	0021      	movs	r1, r4
   1b476:	0028      	movs	r0, r5
   1b478:	4b0c      	ldr	r3, [pc, #48]	; (1b4ac <xQueueGenericSendFromISR+0x210>)
   1b47a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b47c:	2300      	movs	r3, #0
   1b47e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b480:	697b      	ldr	r3, [r7, #20]
   1b482:	0018      	movs	r0, r3
   1b484:	4b0e      	ldr	r3, [pc, #56]	; (1b4c0 <xQueueGenericSendFromISR+0x224>)
   1b486:	4798      	blx	r3

	return xReturn;
   1b488:	69fb      	ldr	r3, [r7, #28]
}
   1b48a:	0018      	movs	r0, r3
   1b48c:	46bd      	mov	sp, r7
   1b48e:	b008      	add	sp, #32
   1b490:	bdb0      	pop	{r4, r5, r7, pc}
   1b492:	46c0      	nop			; (mov r8, r8)
   1b494:	0001a8fd 	.word	0x0001a8fd
   1b498:	00018969 	.word	0x00018969
   1b49c:	20000110 	.word	0x20000110
   1b4a0:	00018869 	.word	0x00018869
   1b4a4:	20000104 	.word	0x20000104
   1b4a8:	00018949 	.word	0x00018949
   1b4ac:	000192a1 	.word	0x000192a1
   1b4b0:	000198fd 	.word	0x000198fd
   1b4b4:	0001c075 	.word	0x0001c075
   1b4b8:	0001c379 	.word	0x0001c379
   1b4bc:	0001d139 	.word	0x0001d139
   1b4c0:	0001a909 	.word	0x0001a909

0001b4c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b4c4:	b580      	push	{r7, lr}
   1b4c6:	b082      	sub	sp, #8
   1b4c8:	af00      	add	r7, sp, #0
   1b4ca:	6078      	str	r0, [r7, #4]
   1b4cc:	6039      	str	r1, [r7, #0]
   1b4ce:	6839      	ldr	r1, [r7, #0]
   1b4d0:	687b      	ldr	r3, [r7, #4]
   1b4d2:	2200      	movs	r2, #0
   1b4d4:	0018      	movs	r0, r3
   1b4d6:	4b03      	ldr	r3, [pc, #12]	; (1b4e4 <xQueueGiveFromISR+0x20>)
   1b4d8:	4798      	blx	r3
   1b4da:	0003      	movs	r3, r0
   1b4dc:	0018      	movs	r0, r3
   1b4de:	46bd      	mov	sp, r7
   1b4e0:	b002      	add	sp, #8
   1b4e2:	bd80      	pop	{r7, pc}
   1b4e4:	0001b4e9 	.word	0x0001b4e9

0001b4e8 <MyWrapper>:
{
   1b4e8:	b5b0      	push	{r4, r5, r7, lr}
   1b4ea:	b08a      	sub	sp, #40	; 0x28
   1b4ec:	af00      	add	r7, sp, #0
   1b4ee:	60f8      	str	r0, [r7, #12]
   1b4f0:	60b9      	str	r1, [r7, #8]
   1b4f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b4f4:	68fb      	ldr	r3, [r7, #12]
   1b4f6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b4f8:	6a3b      	ldr	r3, [r7, #32]
   1b4fa:	2b00      	cmp	r3, #0
   1b4fc:	d101      	bne.n	1b502 <MyWrapper+0x1a>
   1b4fe:	b672      	cpsid	i
   1b500:	e7fe      	b.n	1b500 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b502:	6a3b      	ldr	r3, [r7, #32]
   1b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b506:	2b00      	cmp	r3, #0
   1b508:	d001      	beq.n	1b50e <MyWrapper+0x26>
   1b50a:	b672      	cpsid	i
   1b50c:	e7fe      	b.n	1b50c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b50e:	6a3b      	ldr	r3, [r7, #32]
   1b510:	681b      	ldr	r3, [r3, #0]
   1b512:	2b00      	cmp	r3, #0
   1b514:	d103      	bne.n	1b51e <MyWrapper+0x36>
   1b516:	6a3b      	ldr	r3, [r7, #32]
   1b518:	685b      	ldr	r3, [r3, #4]
   1b51a:	2b00      	cmp	r3, #0
   1b51c:	d101      	bne.n	1b522 <MyWrapper+0x3a>
   1b51e:	2301      	movs	r3, #1
   1b520:	e000      	b.n	1b524 <MyWrapper+0x3c>
   1b522:	2300      	movs	r3, #0
   1b524:	2b00      	cmp	r3, #0
   1b526:	d101      	bne.n	1b52c <MyWrapper+0x44>
   1b528:	b672      	cpsid	i
   1b52a:	e7fe      	b.n	1b52a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b52c:	4b66      	ldr	r3, [pc, #408]	; (1b6c8 <MyWrapper+0x1e0>)
   1b52e:	4798      	blx	r3
   1b530:	0003      	movs	r3, r0
   1b532:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b534:	6a3b      	ldr	r3, [r7, #32]
   1b536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b538:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b53a:	6a3b      	ldr	r3, [r7, #32]
   1b53c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b53e:	69bb      	ldr	r3, [r7, #24]
   1b540:	429a      	cmp	r2, r3
   1b542:	d800      	bhi.n	1b546 <MyWrapper+0x5e>
   1b544:	e085      	b.n	1b652 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b546:	2317      	movs	r3, #23
   1b548:	18fb      	adds	r3, r7, r3
   1b54a:	6a3a      	ldr	r2, [r7, #32]
   1b54c:	2145      	movs	r1, #69	; 0x45
   1b54e:	5c52      	ldrb	r2, [r2, r1]
   1b550:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b552:	6a3b      	ldr	r3, [r7, #32]
   1b554:	0018      	movs	r0, r3
   1b556:	4b5d      	ldr	r3, [pc, #372]	; (1b6cc <MyWrapper+0x1e4>)
   1b558:	4798      	blx	r3
   1b55a:	0003      	movs	r3, r0
   1b55c:	001a      	movs	r2, r3
   1b55e:	4b5c      	ldr	r3, [pc, #368]	; (1b6d0 <MyWrapper+0x1e8>)
   1b560:	881b      	ldrh	r3, [r3, #0]
   1b562:	4013      	ands	r3, r2
   1b564:	b29b      	uxth	r3, r3
   1b566:	2b00      	cmp	r3, #0
   1b568:	d022      	beq.n	1b5b0 <MyWrapper+0xc8>
   1b56a:	687b      	ldr	r3, [r7, #4]
   1b56c:	2b00      	cmp	r3, #0
   1b56e:	d10b      	bne.n	1b588 <MyWrapper+0xa0>
   1b570:	6a3b      	ldr	r3, [r7, #32]
   1b572:	0018      	movs	r0, r3
   1b574:	4b57      	ldr	r3, [pc, #348]	; (1b6d4 <MyWrapper+0x1ec>)
   1b576:	4798      	blx	r3
   1b578:	0003      	movs	r3, r0
   1b57a:	001a      	movs	r2, r3
   1b57c:	4b56      	ldr	r3, [pc, #344]	; (1b6d8 <MyWrapper+0x1f0>)
   1b57e:	5c9b      	ldrb	r3, [r3, r2]
   1b580:	3330      	adds	r3, #48	; 0x30
   1b582:	b2db      	uxtb	r3, r3
   1b584:	001d      	movs	r5, r3
   1b586:	e000      	b.n	1b58a <MyWrapper+0xa2>
   1b588:	2535      	movs	r5, #53	; 0x35
   1b58a:	6a3b      	ldr	r3, [r7, #32]
   1b58c:	0018      	movs	r0, r3
   1b58e:	4b51      	ldr	r3, [pc, #324]	; (1b6d4 <MyWrapper+0x1ec>)
   1b590:	4798      	blx	r3
   1b592:	0003      	movs	r3, r0
   1b594:	001a      	movs	r2, r3
   1b596:	4b50      	ldr	r3, [pc, #320]	; (1b6d8 <MyWrapper+0x1f0>)
   1b598:	5c9c      	ldrb	r4, [r3, r2]
   1b59a:	6a3b      	ldr	r3, [r7, #32]
   1b59c:	0018      	movs	r0, r3
   1b59e:	4b4f      	ldr	r3, [pc, #316]	; (1b6dc <MyWrapper+0x1f4>)
   1b5a0:	4798      	blx	r3
   1b5a2:	0003      	movs	r3, r0
   1b5a4:	b2db      	uxtb	r3, r3
   1b5a6:	001a      	movs	r2, r3
   1b5a8:	0021      	movs	r1, r4
   1b5aa:	0028      	movs	r0, r5
   1b5ac:	4b4c      	ldr	r3, [pc, #304]	; (1b6e0 <MyWrapper+0x1f8>)
   1b5ae:	4798      	blx	r3
   1b5b0:	6a3b      	ldr	r3, [r7, #32]
   1b5b2:	0018      	movs	r0, r3
   1b5b4:	4b47      	ldr	r3, [pc, #284]	; (1b6d4 <MyWrapper+0x1ec>)
   1b5b6:	4798      	blx	r3
   1b5b8:	0003      	movs	r3, r0
   1b5ba:	001a      	movs	r2, r3
   1b5bc:	4b46      	ldr	r3, [pc, #280]	; (1b6d8 <MyWrapper+0x1f0>)
   1b5be:	5c9c      	ldrb	r4, [r3, r2]
   1b5c0:	6a3b      	ldr	r3, [r7, #32]
   1b5c2:	0018      	movs	r0, r3
   1b5c4:	4b45      	ldr	r3, [pc, #276]	; (1b6dc <MyWrapper+0x1f4>)
   1b5c6:	4798      	blx	r3
   1b5c8:	0003      	movs	r3, r0
   1b5ca:	b2d9      	uxtb	r1, r3
   1b5cc:	6a3b      	ldr	r3, [r7, #32]
   1b5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b5d0:	b2db      	uxtb	r3, r3
   1b5d2:	3301      	adds	r3, #1
   1b5d4:	b2db      	uxtb	r3, r3
   1b5d6:	001a      	movs	r2, r3
   1b5d8:	0020      	movs	r0, r4
   1b5da:	4b42      	ldr	r3, [pc, #264]	; (1b6e4 <MyWrapper+0x1fc>)
   1b5dc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b5de:	69bb      	ldr	r3, [r7, #24]
   1b5e0:	1c5a      	adds	r2, r3, #1
   1b5e2:	6a3b      	ldr	r3, [r7, #32]
   1b5e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b5e6:	2317      	movs	r3, #23
   1b5e8:	18fb      	adds	r3, r7, r3
   1b5ea:	781b      	ldrb	r3, [r3, #0]
   1b5ec:	b25b      	sxtb	r3, r3
   1b5ee:	3301      	adds	r3, #1
   1b5f0:	d123      	bne.n	1b63a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b5f2:	6a3b      	ldr	r3, [r7, #32]
   1b5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b5f6:	2b00      	cmp	r3, #0
   1b5f8:	d00d      	beq.n	1b616 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b5fa:	6a3b      	ldr	r3, [r7, #32]
   1b5fc:	2100      	movs	r1, #0
   1b5fe:	0018      	movs	r0, r3
   1b600:	4b39      	ldr	r3, [pc, #228]	; (1b6e8 <MyWrapper+0x200>)
   1b602:	4798      	blx	r3
   1b604:	1e03      	subs	r3, r0, #0
   1b606:	d021      	beq.n	1b64c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b608:	68bb      	ldr	r3, [r7, #8]
   1b60a:	2b00      	cmp	r3, #0
   1b60c:	d01e      	beq.n	1b64c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b60e:	68bb      	ldr	r3, [r7, #8]
   1b610:	2201      	movs	r2, #1
   1b612:	601a      	str	r2, [r3, #0]
   1b614:	e01a      	b.n	1b64c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b616:	6a3b      	ldr	r3, [r7, #32]
   1b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b61a:	2b00      	cmp	r3, #0
   1b61c:	d016      	beq.n	1b64c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b61e:	6a3b      	ldr	r3, [r7, #32]
   1b620:	3324      	adds	r3, #36	; 0x24
   1b622:	0018      	movs	r0, r3
   1b624:	4b31      	ldr	r3, [pc, #196]	; (1b6ec <MyWrapper+0x204>)
   1b626:	4798      	blx	r3
   1b628:	1e03      	subs	r3, r0, #0
   1b62a:	d00f      	beq.n	1b64c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b62c:	68bb      	ldr	r3, [r7, #8]
   1b62e:	2b00      	cmp	r3, #0
   1b630:	d00c      	beq.n	1b64c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b632:	68bb      	ldr	r3, [r7, #8]
   1b634:	2201      	movs	r2, #1
   1b636:	601a      	str	r2, [r3, #0]
   1b638:	e008      	b.n	1b64c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b63a:	2317      	movs	r3, #23
   1b63c:	18fb      	adds	r3, r7, r3
   1b63e:	781b      	ldrb	r3, [r3, #0]
   1b640:	3301      	adds	r3, #1
   1b642:	b2db      	uxtb	r3, r3
   1b644:	b259      	sxtb	r1, r3
   1b646:	6a3b      	ldr	r3, [r7, #32]
   1b648:	2245      	movs	r2, #69	; 0x45
   1b64a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b64c:	2301      	movs	r3, #1
   1b64e:	627b      	str	r3, [r7, #36]	; 0x24
   1b650:	e030      	b.n	1b6b4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b652:	6a3b      	ldr	r3, [r7, #32]
   1b654:	0018      	movs	r0, r3
   1b656:	4b1d      	ldr	r3, [pc, #116]	; (1b6cc <MyWrapper+0x1e4>)
   1b658:	4798      	blx	r3
   1b65a:	0003      	movs	r3, r0
   1b65c:	001a      	movs	r2, r3
   1b65e:	4b1c      	ldr	r3, [pc, #112]	; (1b6d0 <MyWrapper+0x1e8>)
   1b660:	881b      	ldrh	r3, [r3, #0]
   1b662:	4013      	ands	r3, r2
   1b664:	b29b      	uxth	r3, r3
   1b666:	2b00      	cmp	r3, #0
   1b668:	d022      	beq.n	1b6b0 <MyWrapper+0x1c8>
   1b66a:	687b      	ldr	r3, [r7, #4]
   1b66c:	2b00      	cmp	r3, #0
   1b66e:	d10b      	bne.n	1b688 <MyWrapper+0x1a0>
   1b670:	6a3b      	ldr	r3, [r7, #32]
   1b672:	0018      	movs	r0, r3
   1b674:	4b17      	ldr	r3, [pc, #92]	; (1b6d4 <MyWrapper+0x1ec>)
   1b676:	4798      	blx	r3
   1b678:	0003      	movs	r3, r0
   1b67a:	001a      	movs	r2, r3
   1b67c:	4b16      	ldr	r3, [pc, #88]	; (1b6d8 <MyWrapper+0x1f0>)
   1b67e:	5c9b      	ldrb	r3, [r3, r2]
   1b680:	3358      	adds	r3, #88	; 0x58
   1b682:	b2db      	uxtb	r3, r3
   1b684:	001d      	movs	r5, r3
   1b686:	e000      	b.n	1b68a <MyWrapper+0x1a2>
   1b688:	255d      	movs	r5, #93	; 0x5d
   1b68a:	6a3b      	ldr	r3, [r7, #32]
   1b68c:	0018      	movs	r0, r3
   1b68e:	4b11      	ldr	r3, [pc, #68]	; (1b6d4 <MyWrapper+0x1ec>)
   1b690:	4798      	blx	r3
   1b692:	0003      	movs	r3, r0
   1b694:	001a      	movs	r2, r3
   1b696:	4b10      	ldr	r3, [pc, #64]	; (1b6d8 <MyWrapper+0x1f0>)
   1b698:	5c9c      	ldrb	r4, [r3, r2]
   1b69a:	6a3b      	ldr	r3, [r7, #32]
   1b69c:	0018      	movs	r0, r3
   1b69e:	4b0f      	ldr	r3, [pc, #60]	; (1b6dc <MyWrapper+0x1f4>)
   1b6a0:	4798      	blx	r3
   1b6a2:	0003      	movs	r3, r0
   1b6a4:	b2db      	uxtb	r3, r3
   1b6a6:	001a      	movs	r2, r3
   1b6a8:	0021      	movs	r1, r4
   1b6aa:	0028      	movs	r0, r5
   1b6ac:	4b0c      	ldr	r3, [pc, #48]	; (1b6e0 <MyWrapper+0x1f8>)
   1b6ae:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b6b0:	2300      	movs	r3, #0
   1b6b2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b6b4:	69fb      	ldr	r3, [r7, #28]
   1b6b6:	0018      	movs	r0, r3
   1b6b8:	4b0d      	ldr	r3, [pc, #52]	; (1b6f0 <MyWrapper+0x208>)
   1b6ba:	4798      	blx	r3

	return xReturn;
   1b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b6be:	0018      	movs	r0, r3
   1b6c0:	46bd      	mov	sp, r7
   1b6c2:	b00a      	add	sp, #40	; 0x28
   1b6c4:	bdb0      	pop	{r4, r5, r7, pc}
   1b6c6:	46c0      	nop			; (mov r8, r8)
   1b6c8:	0001a8fd 	.word	0x0001a8fd
   1b6cc:	00018969 	.word	0x00018969
   1b6d0:	20000110 	.word	0x20000110
   1b6d4:	00018869 	.word	0x00018869
   1b6d8:	20000104 	.word	0x20000104
   1b6dc:	00018949 	.word	0x00018949
   1b6e0:	000192a1 	.word	0x000192a1
   1b6e4:	000198fd 	.word	0x000198fd
   1b6e8:	0001c379 	.word	0x0001c379
   1b6ec:	0001d139 	.word	0x0001d139
   1b6f0:	0001a909 	.word	0x0001a909

0001b6f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b6f4:	b5b0      	push	{r4, r5, r7, lr}
   1b6f6:	b08a      	sub	sp, #40	; 0x28
   1b6f8:	af00      	add	r7, sp, #0
   1b6fa:	60f8      	str	r0, [r7, #12]
   1b6fc:	60b9      	str	r1, [r7, #8]
   1b6fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b700:	2300      	movs	r3, #0
   1b702:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b704:	68fb      	ldr	r3, [r7, #12]
   1b706:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b708:	6a3b      	ldr	r3, [r7, #32]
   1b70a:	2b00      	cmp	r3, #0
   1b70c:	d101      	bne.n	1b712 <xQueueReceive+0x1e>
   1b70e:	b672      	cpsid	i
   1b710:	e7fe      	b.n	1b710 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b712:	68bb      	ldr	r3, [r7, #8]
   1b714:	2b00      	cmp	r3, #0
   1b716:	d103      	bne.n	1b720 <xQueueReceive+0x2c>
   1b718:	6a3b      	ldr	r3, [r7, #32]
   1b71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b71c:	2b00      	cmp	r3, #0
   1b71e:	d101      	bne.n	1b724 <xQueueReceive+0x30>
   1b720:	2301      	movs	r3, #1
   1b722:	e000      	b.n	1b726 <xQueueReceive+0x32>
   1b724:	2300      	movs	r3, #0
   1b726:	2b00      	cmp	r3, #0
   1b728:	d101      	bne.n	1b72e <xQueueReceive+0x3a>
   1b72a:	b672      	cpsid	i
   1b72c:	e7fe      	b.n	1b72c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b72e:	4bbf      	ldr	r3, [pc, #764]	; (1ba2c <xQueueReceive+0x338>)
   1b730:	4798      	blx	r3
   1b732:	1e03      	subs	r3, r0, #0
   1b734:	d102      	bne.n	1b73c <xQueueReceive+0x48>
   1b736:	687b      	ldr	r3, [r7, #4]
   1b738:	2b00      	cmp	r3, #0
   1b73a:	d101      	bne.n	1b740 <xQueueReceive+0x4c>
   1b73c:	2301      	movs	r3, #1
   1b73e:	e000      	b.n	1b742 <xQueueReceive+0x4e>
   1b740:	2300      	movs	r3, #0
   1b742:	2b00      	cmp	r3, #0
   1b744:	d101      	bne.n	1b74a <xQueueReceive+0x56>
   1b746:	b672      	cpsid	i
   1b748:	e7fe      	b.n	1b748 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b74a:	4bb9      	ldr	r3, [pc, #740]	; (1ba30 <xQueueReceive+0x33c>)
   1b74c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b74e:	6a3b      	ldr	r3, [r7, #32]
   1b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b752:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b754:	69fb      	ldr	r3, [r7, #28]
   1b756:	2b00      	cmp	r3, #0
   1b758:	d100      	bne.n	1b75c <xQueueReceive+0x68>
   1b75a:	e07d      	b.n	1b858 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b75c:	68ba      	ldr	r2, [r7, #8]
   1b75e:	6a3b      	ldr	r3, [r7, #32]
   1b760:	0011      	movs	r1, r2
   1b762:	0018      	movs	r0, r3
   1b764:	4bb3      	ldr	r3, [pc, #716]	; (1ba34 <xQueueReceive+0x340>)
   1b766:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1b768:	4bb3      	ldr	r3, [pc, #716]	; (1ba38 <xQueueReceive+0x344>)
   1b76a:	4798      	blx	r3
   1b76c:	0003      	movs	r3, r0
   1b76e:	0018      	movs	r0, r3
   1b770:	4bb2      	ldr	r3, [pc, #712]	; (1ba3c <xQueueReceive+0x348>)
   1b772:	4798      	blx	r3
   1b774:	0003      	movs	r3, r0
   1b776:	001a      	movs	r2, r3
   1b778:	4bb1      	ldr	r3, [pc, #708]	; (1ba40 <xQueueReceive+0x34c>)
   1b77a:	881b      	ldrh	r3, [r3, #0]
   1b77c:	4013      	ands	r3, r2
   1b77e:	b29b      	uxth	r3, r3
   1b780:	2b00      	cmp	r3, #0
   1b782:	d029      	beq.n	1b7d8 <xQueueReceive+0xe4>
   1b784:	6a3b      	ldr	r3, [r7, #32]
   1b786:	0018      	movs	r0, r3
   1b788:	4bae      	ldr	r3, [pc, #696]	; (1ba44 <xQueueReceive+0x350>)
   1b78a:	4798      	blx	r3
   1b78c:	0003      	movs	r3, r0
   1b78e:	001a      	movs	r2, r3
   1b790:	4bab      	ldr	r3, [pc, #684]	; (1ba40 <xQueueReceive+0x34c>)
   1b792:	881b      	ldrh	r3, [r3, #0]
   1b794:	4013      	ands	r3, r2
   1b796:	b29b      	uxth	r3, r3
   1b798:	2b00      	cmp	r3, #0
   1b79a:	d01d      	beq.n	1b7d8 <xQueueReceive+0xe4>
   1b79c:	6a3b      	ldr	r3, [r7, #32]
   1b79e:	0018      	movs	r0, r3
   1b7a0:	4ba9      	ldr	r3, [pc, #676]	; (1ba48 <xQueueReceive+0x354>)
   1b7a2:	4798      	blx	r3
   1b7a4:	0003      	movs	r3, r0
   1b7a6:	001a      	movs	r2, r3
   1b7a8:	4ba8      	ldr	r3, [pc, #672]	; (1ba4c <xQueueReceive+0x358>)
   1b7aa:	5c9b      	ldrb	r3, [r3, r2]
   1b7ac:	3328      	adds	r3, #40	; 0x28
   1b7ae:	b2db      	uxtb	r3, r3
   1b7b0:	001d      	movs	r5, r3
   1b7b2:	6a3b      	ldr	r3, [r7, #32]
   1b7b4:	0018      	movs	r0, r3
   1b7b6:	4ba4      	ldr	r3, [pc, #656]	; (1ba48 <xQueueReceive+0x354>)
   1b7b8:	4798      	blx	r3
   1b7ba:	0003      	movs	r3, r0
   1b7bc:	001a      	movs	r2, r3
   1b7be:	4ba3      	ldr	r3, [pc, #652]	; (1ba4c <xQueueReceive+0x358>)
   1b7c0:	5c9c      	ldrb	r4, [r3, r2]
   1b7c2:	6a3b      	ldr	r3, [r7, #32]
   1b7c4:	0018      	movs	r0, r3
   1b7c6:	4ba2      	ldr	r3, [pc, #648]	; (1ba50 <xQueueReceive+0x35c>)
   1b7c8:	4798      	blx	r3
   1b7ca:	0003      	movs	r3, r0
   1b7cc:	b2db      	uxtb	r3, r3
   1b7ce:	001a      	movs	r2, r3
   1b7d0:	0021      	movs	r1, r4
   1b7d2:	0028      	movs	r0, r5
   1b7d4:	4b9f      	ldr	r3, [pc, #636]	; (1ba54 <xQueueReceive+0x360>)
   1b7d6:	4798      	blx	r3
   1b7d8:	6a3b      	ldr	r3, [r7, #32]
   1b7da:	0018      	movs	r0, r3
   1b7dc:	4b9a      	ldr	r3, [pc, #616]	; (1ba48 <xQueueReceive+0x354>)
   1b7de:	4798      	blx	r3
   1b7e0:	0003      	movs	r3, r0
   1b7e2:	001a      	movs	r2, r3
   1b7e4:	4b99      	ldr	r3, [pc, #612]	; (1ba4c <xQueueReceive+0x358>)
   1b7e6:	5c9c      	ldrb	r4, [r3, r2]
   1b7e8:	6a3b      	ldr	r3, [r7, #32]
   1b7ea:	0018      	movs	r0, r3
   1b7ec:	4b98      	ldr	r3, [pc, #608]	; (1ba50 <xQueueReceive+0x35c>)
   1b7ee:	4798      	blx	r3
   1b7f0:	0003      	movs	r3, r0
   1b7f2:	b2dd      	uxtb	r5, r3
   1b7f4:	6a3b      	ldr	r3, [r7, #32]
   1b7f6:	0018      	movs	r0, r3
   1b7f8:	4b93      	ldr	r3, [pc, #588]	; (1ba48 <xQueueReceive+0x354>)
   1b7fa:	4798      	blx	r3
   1b7fc:	0003      	movs	r3, r0
   1b7fe:	001a      	movs	r2, r3
   1b800:	4b92      	ldr	r3, [pc, #584]	; (1ba4c <xQueueReceive+0x358>)
   1b802:	5c9b      	ldrb	r3, [r3, r2]
   1b804:	2b02      	cmp	r3, #2
   1b806:	d108      	bne.n	1b81a <xQueueReceive+0x126>
   1b808:	4b8b      	ldr	r3, [pc, #556]	; (1ba38 <xQueueReceive+0x344>)
   1b80a:	4798      	blx	r3
   1b80c:	0003      	movs	r3, r0
   1b80e:	0018      	movs	r0, r3
   1b810:	4b91      	ldr	r3, [pc, #580]	; (1ba58 <xQueueReceive+0x364>)
   1b812:	4798      	blx	r3
   1b814:	0003      	movs	r3, r0
   1b816:	b2db      	uxtb	r3, r3
   1b818:	e004      	b.n	1b824 <xQueueReceive+0x130>
   1b81a:	6a3b      	ldr	r3, [r7, #32]
   1b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b81e:	b2db      	uxtb	r3, r3
   1b820:	3b01      	subs	r3, #1
   1b822:	b2db      	uxtb	r3, r3
   1b824:	001a      	movs	r2, r3
   1b826:	0029      	movs	r1, r5
   1b828:	0020      	movs	r0, r4
   1b82a:	4b8c      	ldr	r3, [pc, #560]	; (1ba5c <xQueueReceive+0x368>)
   1b82c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b82e:	69fb      	ldr	r3, [r7, #28]
   1b830:	1e5a      	subs	r2, r3, #1
   1b832:	6a3b      	ldr	r3, [r7, #32]
   1b834:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b836:	6a3b      	ldr	r3, [r7, #32]
   1b838:	691b      	ldr	r3, [r3, #16]
   1b83a:	2b00      	cmp	r3, #0
   1b83c:	d008      	beq.n	1b850 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b83e:	6a3b      	ldr	r3, [r7, #32]
   1b840:	3310      	adds	r3, #16
   1b842:	0018      	movs	r0, r3
   1b844:	4b86      	ldr	r3, [pc, #536]	; (1ba60 <xQueueReceive+0x36c>)
   1b846:	4798      	blx	r3
   1b848:	1e03      	subs	r3, r0, #0
   1b84a:	d001      	beq.n	1b850 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b84c:	4b85      	ldr	r3, [pc, #532]	; (1ba64 <xQueueReceive+0x370>)
   1b84e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b850:	4b85      	ldr	r3, [pc, #532]	; (1ba68 <xQueueReceive+0x374>)
   1b852:	4798      	blx	r3
				return pdPASS;
   1b854:	2301      	movs	r3, #1
   1b856:	e15f      	b.n	1bb18 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b858:	687b      	ldr	r3, [r7, #4]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	d13b      	bne.n	1b8d6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b85e:	4b82      	ldr	r3, [pc, #520]	; (1ba68 <xQueueReceive+0x374>)
   1b860:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b862:	4b75      	ldr	r3, [pc, #468]	; (1ba38 <xQueueReceive+0x344>)
   1b864:	4798      	blx	r3
   1b866:	0003      	movs	r3, r0
   1b868:	0018      	movs	r0, r3
   1b86a:	4b74      	ldr	r3, [pc, #464]	; (1ba3c <xQueueReceive+0x348>)
   1b86c:	4798      	blx	r3
   1b86e:	0003      	movs	r3, r0
   1b870:	001a      	movs	r2, r3
   1b872:	4b73      	ldr	r3, [pc, #460]	; (1ba40 <xQueueReceive+0x34c>)
   1b874:	881b      	ldrh	r3, [r3, #0]
   1b876:	4013      	ands	r3, r2
   1b878:	b29b      	uxth	r3, r3
   1b87a:	2b00      	cmp	r3, #0
   1b87c:	d029      	beq.n	1b8d2 <xQueueReceive+0x1de>
   1b87e:	6a3b      	ldr	r3, [r7, #32]
   1b880:	0018      	movs	r0, r3
   1b882:	4b70      	ldr	r3, [pc, #448]	; (1ba44 <xQueueReceive+0x350>)
   1b884:	4798      	blx	r3
   1b886:	0003      	movs	r3, r0
   1b888:	001a      	movs	r2, r3
   1b88a:	4b6d      	ldr	r3, [pc, #436]	; (1ba40 <xQueueReceive+0x34c>)
   1b88c:	881b      	ldrh	r3, [r3, #0]
   1b88e:	4013      	ands	r3, r2
   1b890:	b29b      	uxth	r3, r3
   1b892:	2b00      	cmp	r3, #0
   1b894:	d01d      	beq.n	1b8d2 <xQueueReceive+0x1de>
   1b896:	6a3b      	ldr	r3, [r7, #32]
   1b898:	0018      	movs	r0, r3
   1b89a:	4b6b      	ldr	r3, [pc, #428]	; (1ba48 <xQueueReceive+0x354>)
   1b89c:	4798      	blx	r3
   1b89e:	0003      	movs	r3, r0
   1b8a0:	001a      	movs	r2, r3
   1b8a2:	4b6a      	ldr	r3, [pc, #424]	; (1ba4c <xQueueReceive+0x358>)
   1b8a4:	5c9b      	ldrb	r3, [r3, r2]
   1b8a6:	3350      	adds	r3, #80	; 0x50
   1b8a8:	b2db      	uxtb	r3, r3
   1b8aa:	001d      	movs	r5, r3
   1b8ac:	6a3b      	ldr	r3, [r7, #32]
   1b8ae:	0018      	movs	r0, r3
   1b8b0:	4b65      	ldr	r3, [pc, #404]	; (1ba48 <xQueueReceive+0x354>)
   1b8b2:	4798      	blx	r3
   1b8b4:	0003      	movs	r3, r0
   1b8b6:	001a      	movs	r2, r3
   1b8b8:	4b64      	ldr	r3, [pc, #400]	; (1ba4c <xQueueReceive+0x358>)
   1b8ba:	5c9c      	ldrb	r4, [r3, r2]
   1b8bc:	6a3b      	ldr	r3, [r7, #32]
   1b8be:	0018      	movs	r0, r3
   1b8c0:	4b63      	ldr	r3, [pc, #396]	; (1ba50 <xQueueReceive+0x35c>)
   1b8c2:	4798      	blx	r3
   1b8c4:	0003      	movs	r3, r0
   1b8c6:	b2db      	uxtb	r3, r3
   1b8c8:	001a      	movs	r2, r3
   1b8ca:	0021      	movs	r1, r4
   1b8cc:	0028      	movs	r0, r5
   1b8ce:	4b61      	ldr	r3, [pc, #388]	; (1ba54 <xQueueReceive+0x360>)
   1b8d0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b8d2:	2300      	movs	r3, #0
   1b8d4:	e120      	b.n	1bb18 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b8d8:	2b00      	cmp	r3, #0
   1b8da:	d106      	bne.n	1b8ea <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b8dc:	2314      	movs	r3, #20
   1b8de:	18fb      	adds	r3, r7, r3
   1b8e0:	0018      	movs	r0, r3
   1b8e2:	4b62      	ldr	r3, [pc, #392]	; (1ba6c <xQueueReceive+0x378>)
   1b8e4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b8e6:	2301      	movs	r3, #1
   1b8e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b8ea:	4b5f      	ldr	r3, [pc, #380]	; (1ba68 <xQueueReceive+0x374>)
   1b8ec:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b8ee:	4b60      	ldr	r3, [pc, #384]	; (1ba70 <xQueueReceive+0x37c>)
   1b8f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b8f2:	4b4f      	ldr	r3, [pc, #316]	; (1ba30 <xQueueReceive+0x33c>)
   1b8f4:	4798      	blx	r3
   1b8f6:	6a3b      	ldr	r3, [r7, #32]
   1b8f8:	2244      	movs	r2, #68	; 0x44
   1b8fa:	5c9b      	ldrb	r3, [r3, r2]
   1b8fc:	b25b      	sxtb	r3, r3
   1b8fe:	3301      	adds	r3, #1
   1b900:	d103      	bne.n	1b90a <xQueueReceive+0x216>
   1b902:	6a3b      	ldr	r3, [r7, #32]
   1b904:	2244      	movs	r2, #68	; 0x44
   1b906:	2100      	movs	r1, #0
   1b908:	5499      	strb	r1, [r3, r2]
   1b90a:	6a3b      	ldr	r3, [r7, #32]
   1b90c:	2245      	movs	r2, #69	; 0x45
   1b90e:	5c9b      	ldrb	r3, [r3, r2]
   1b910:	b25b      	sxtb	r3, r3
   1b912:	3301      	adds	r3, #1
   1b914:	d103      	bne.n	1b91e <xQueueReceive+0x22a>
   1b916:	6a3b      	ldr	r3, [r7, #32]
   1b918:	2245      	movs	r2, #69	; 0x45
   1b91a:	2100      	movs	r1, #0
   1b91c:	5499      	strb	r1, [r3, r2]
   1b91e:	4b52      	ldr	r3, [pc, #328]	; (1ba68 <xQueueReceive+0x374>)
   1b920:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b922:	1d3a      	adds	r2, r7, #4
   1b924:	2314      	movs	r3, #20
   1b926:	18fb      	adds	r3, r7, r3
   1b928:	0011      	movs	r1, r2
   1b92a:	0018      	movs	r0, r3
   1b92c:	4b51      	ldr	r3, [pc, #324]	; (1ba74 <xQueueReceive+0x380>)
   1b92e:	4798      	blx	r3
   1b930:	1e03      	subs	r3, r0, #0
   1b932:	d000      	beq.n	1b936 <xQueueReceive+0x242>
   1b934:	e0aa      	b.n	1ba8c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b936:	6a3b      	ldr	r3, [r7, #32]
   1b938:	0018      	movs	r0, r3
   1b93a:	4b4f      	ldr	r3, [pc, #316]	; (1ba78 <xQueueReceive+0x384>)
   1b93c:	4798      	blx	r3
   1b93e:	1e03      	subs	r3, r0, #0
   1b940:	d06d      	beq.n	1ba1e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b942:	4b3d      	ldr	r3, [pc, #244]	; (1ba38 <xQueueReceive+0x344>)
   1b944:	4798      	blx	r3
   1b946:	0003      	movs	r3, r0
   1b948:	0018      	movs	r0, r3
   1b94a:	4b3c      	ldr	r3, [pc, #240]	; (1ba3c <xQueueReceive+0x348>)
   1b94c:	4798      	blx	r3
   1b94e:	0003      	movs	r3, r0
   1b950:	001a      	movs	r2, r3
   1b952:	4b3b      	ldr	r3, [pc, #236]	; (1ba40 <xQueueReceive+0x34c>)
   1b954:	881b      	ldrh	r3, [r3, #0]
   1b956:	4013      	ands	r3, r2
   1b958:	b29b      	uxth	r3, r3
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	d029      	beq.n	1b9b2 <xQueueReceive+0x2be>
   1b95e:	6a3b      	ldr	r3, [r7, #32]
   1b960:	0018      	movs	r0, r3
   1b962:	4b38      	ldr	r3, [pc, #224]	; (1ba44 <xQueueReceive+0x350>)
   1b964:	4798      	blx	r3
   1b966:	0003      	movs	r3, r0
   1b968:	001a      	movs	r2, r3
   1b96a:	4b35      	ldr	r3, [pc, #212]	; (1ba40 <xQueueReceive+0x34c>)
   1b96c:	881b      	ldrh	r3, [r3, #0]
   1b96e:	4013      	ands	r3, r2
   1b970:	b29b      	uxth	r3, r3
   1b972:	2b00      	cmp	r3, #0
   1b974:	d01d      	beq.n	1b9b2 <xQueueReceive+0x2be>
   1b976:	6a3b      	ldr	r3, [r7, #32]
   1b978:	0018      	movs	r0, r3
   1b97a:	4b33      	ldr	r3, [pc, #204]	; (1ba48 <xQueueReceive+0x354>)
   1b97c:	4798      	blx	r3
   1b97e:	0003      	movs	r3, r0
   1b980:	001a      	movs	r2, r3
   1b982:	4b32      	ldr	r3, [pc, #200]	; (1ba4c <xQueueReceive+0x358>)
   1b984:	5c9b      	ldrb	r3, [r3, r2]
   1b986:	3368      	adds	r3, #104	; 0x68
   1b988:	b2db      	uxtb	r3, r3
   1b98a:	001d      	movs	r5, r3
   1b98c:	6a3b      	ldr	r3, [r7, #32]
   1b98e:	0018      	movs	r0, r3
   1b990:	4b2d      	ldr	r3, [pc, #180]	; (1ba48 <xQueueReceive+0x354>)
   1b992:	4798      	blx	r3
   1b994:	0003      	movs	r3, r0
   1b996:	001a      	movs	r2, r3
   1b998:	4b2c      	ldr	r3, [pc, #176]	; (1ba4c <xQueueReceive+0x358>)
   1b99a:	5c9c      	ldrb	r4, [r3, r2]
   1b99c:	6a3b      	ldr	r3, [r7, #32]
   1b99e:	0018      	movs	r0, r3
   1b9a0:	4b2b      	ldr	r3, [pc, #172]	; (1ba50 <xQueueReceive+0x35c>)
   1b9a2:	4798      	blx	r3
   1b9a4:	0003      	movs	r3, r0
   1b9a6:	b2db      	uxtb	r3, r3
   1b9a8:	001a      	movs	r2, r3
   1b9aa:	0021      	movs	r1, r4
   1b9ac:	0028      	movs	r0, r5
   1b9ae:	4b29      	ldr	r3, [pc, #164]	; (1ba54 <xQueueReceive+0x360>)
   1b9b0:	4798      	blx	r3
   1b9b2:	6a3b      	ldr	r3, [r7, #32]
   1b9b4:	0018      	movs	r0, r3
   1b9b6:	4b24      	ldr	r3, [pc, #144]	; (1ba48 <xQueueReceive+0x354>)
   1b9b8:	4798      	blx	r3
   1b9ba:	0003      	movs	r3, r0
   1b9bc:	001a      	movs	r2, r3
   1b9be:	4b23      	ldr	r3, [pc, #140]	; (1ba4c <xQueueReceive+0x358>)
   1b9c0:	5c9b      	ldrb	r3, [r3, r2]
   1b9c2:	2b02      	cmp	r3, #2
   1b9c4:	d018      	beq.n	1b9f8 <xQueueReceive+0x304>
   1b9c6:	4b1c      	ldr	r3, [pc, #112]	; (1ba38 <xQueueReceive+0x344>)
   1b9c8:	4798      	blx	r3
   1b9ca:	0003      	movs	r3, r0
   1b9cc:	0018      	movs	r0, r3
   1b9ce:	4b1b      	ldr	r3, [pc, #108]	; (1ba3c <xQueueReceive+0x348>)
   1b9d0:	4798      	blx	r3
   1b9d2:	0003      	movs	r3, r0
   1b9d4:	001a      	movs	r2, r3
   1b9d6:	4b1a      	ldr	r3, [pc, #104]	; (1ba40 <xQueueReceive+0x34c>)
   1b9d8:	881b      	ldrh	r3, [r3, #0]
   1b9da:	4013      	ands	r3, r2
   1b9dc:	b29b      	uxth	r3, r3
   1b9de:	2b00      	cmp	r3, #0
   1b9e0:	d00a      	beq.n	1b9f8 <xQueueReceive+0x304>
   1b9e2:	4b15      	ldr	r3, [pc, #84]	; (1ba38 <xQueueReceive+0x344>)
   1b9e4:	4798      	blx	r3
   1b9e6:	0003      	movs	r3, r0
   1b9e8:	0018      	movs	r0, r3
   1b9ea:	4b1b      	ldr	r3, [pc, #108]	; (1ba58 <xQueueReceive+0x364>)
   1b9ec:	4798      	blx	r3
   1b9ee:	0003      	movs	r3, r0
   1b9f0:	b2db      	uxtb	r3, r3
   1b9f2:	0018      	movs	r0, r3
   1b9f4:	4b21      	ldr	r3, [pc, #132]	; (1ba7c <xQueueReceive+0x388>)
   1b9f6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b9f8:	6a3b      	ldr	r3, [r7, #32]
   1b9fa:	3324      	adds	r3, #36	; 0x24
   1b9fc:	687a      	ldr	r2, [r7, #4]
   1b9fe:	0011      	movs	r1, r2
   1ba00:	0018      	movs	r0, r3
   1ba02:	4b1f      	ldr	r3, [pc, #124]	; (1ba80 <xQueueReceive+0x38c>)
   1ba04:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1ba06:	6a3b      	ldr	r3, [r7, #32]
   1ba08:	0018      	movs	r0, r3
   1ba0a:	4b1e      	ldr	r3, [pc, #120]	; (1ba84 <xQueueReceive+0x390>)
   1ba0c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ba0e:	4b1e      	ldr	r3, [pc, #120]	; (1ba88 <xQueueReceive+0x394>)
   1ba10:	4798      	blx	r3
   1ba12:	1e03      	subs	r3, r0, #0
   1ba14:	d000      	beq.n	1ba18 <xQueueReceive+0x324>
   1ba16:	e698      	b.n	1b74a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1ba18:	4b12      	ldr	r3, [pc, #72]	; (1ba64 <xQueueReceive+0x370>)
   1ba1a:	4798      	blx	r3
   1ba1c:	e695      	b.n	1b74a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1ba1e:	6a3b      	ldr	r3, [r7, #32]
   1ba20:	0018      	movs	r0, r3
   1ba22:	4b18      	ldr	r3, [pc, #96]	; (1ba84 <xQueueReceive+0x390>)
   1ba24:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1ba26:	4b18      	ldr	r3, [pc, #96]	; (1ba88 <xQueueReceive+0x394>)
   1ba28:	4798      	blx	r3
   1ba2a:	e68e      	b.n	1b74a <xQueueReceive+0x56>
   1ba2c:	0001d5c9 	.word	0x0001d5c9
   1ba30:	0001a8a9 	.word	0x0001a8a9
   1ba34:	0001c155 	.word	0x0001c155
   1ba38:	00018b45 	.word	0x00018b45
   1ba3c:	000188a9 	.word	0x000188a9
   1ba40:	20000110 	.word	0x20000110
   1ba44:	00018969 	.word	0x00018969
   1ba48:	00018869 	.word	0x00018869
   1ba4c:	20000104 	.word	0x20000104
   1ba50:	00018949 	.word	0x00018949
   1ba54:	000192a1 	.word	0x000192a1
   1ba58:	00018889 	.word	0x00018889
   1ba5c:	000198fd 	.word	0x000198fd
   1ba60:	0001d139 	.word	0x0001d139
   1ba64:	0001a891 	.word	0x0001a891
   1ba68:	0001a8cd 	.word	0x0001a8cd
   1ba6c:	0001d279 	.word	0x0001d279
   1ba70:	0001cb61 	.word	0x0001cb61
   1ba74:	0001d2a1 	.word	0x0001d2a1
   1ba78:	0001c295 	.word	0x0001c295
   1ba7c:	00019a39 	.word	0x00019a39
   1ba80:	0001d015 	.word	0x0001d015
   1ba84:	0001c1a5 	.word	0x0001c1a5
   1ba88:	0001cb79 	.word	0x0001cb79
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1ba8c:	6a3b      	ldr	r3, [r7, #32]
   1ba8e:	0018      	movs	r0, r3
   1ba90:	4b23      	ldr	r3, [pc, #140]	; (1bb20 <xQueueReceive+0x42c>)
   1ba92:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ba94:	4b23      	ldr	r3, [pc, #140]	; (1bb24 <xQueueReceive+0x430>)
   1ba96:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ba98:	6a3b      	ldr	r3, [r7, #32]
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	4b22      	ldr	r3, [pc, #136]	; (1bb28 <xQueueReceive+0x434>)
   1ba9e:	4798      	blx	r3
   1baa0:	1e03      	subs	r3, r0, #0
   1baa2:	d100      	bne.n	1baa6 <xQueueReceive+0x3b2>
   1baa4:	e651      	b.n	1b74a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1baa6:	4b21      	ldr	r3, [pc, #132]	; (1bb2c <xQueueReceive+0x438>)
   1baa8:	4798      	blx	r3
   1baaa:	0003      	movs	r3, r0
   1baac:	0018      	movs	r0, r3
   1baae:	4b20      	ldr	r3, [pc, #128]	; (1bb30 <xQueueReceive+0x43c>)
   1bab0:	4798      	blx	r3
   1bab2:	0003      	movs	r3, r0
   1bab4:	001a      	movs	r2, r3
   1bab6:	4b1f      	ldr	r3, [pc, #124]	; (1bb34 <xQueueReceive+0x440>)
   1bab8:	881b      	ldrh	r3, [r3, #0]
   1baba:	4013      	ands	r3, r2
   1babc:	b29b      	uxth	r3, r3
   1babe:	2b00      	cmp	r3, #0
   1bac0:	d029      	beq.n	1bb16 <xQueueReceive+0x422>
   1bac2:	6a3b      	ldr	r3, [r7, #32]
   1bac4:	0018      	movs	r0, r3
   1bac6:	4b1c      	ldr	r3, [pc, #112]	; (1bb38 <xQueueReceive+0x444>)
   1bac8:	4798      	blx	r3
   1baca:	0003      	movs	r3, r0
   1bacc:	001a      	movs	r2, r3
   1bace:	4b19      	ldr	r3, [pc, #100]	; (1bb34 <xQueueReceive+0x440>)
   1bad0:	881b      	ldrh	r3, [r3, #0]
   1bad2:	4013      	ands	r3, r2
   1bad4:	b29b      	uxth	r3, r3
   1bad6:	2b00      	cmp	r3, #0
   1bad8:	d01d      	beq.n	1bb16 <xQueueReceive+0x422>
   1bada:	6a3b      	ldr	r3, [r7, #32]
   1badc:	0018      	movs	r0, r3
   1bade:	4b17      	ldr	r3, [pc, #92]	; (1bb3c <xQueueReceive+0x448>)
   1bae0:	4798      	blx	r3
   1bae2:	0003      	movs	r3, r0
   1bae4:	001a      	movs	r2, r3
   1bae6:	4b16      	ldr	r3, [pc, #88]	; (1bb40 <xQueueReceive+0x44c>)
   1bae8:	5c9b      	ldrb	r3, [r3, r2]
   1baea:	3350      	adds	r3, #80	; 0x50
   1baec:	b2db      	uxtb	r3, r3
   1baee:	001d      	movs	r5, r3
   1baf0:	6a3b      	ldr	r3, [r7, #32]
   1baf2:	0018      	movs	r0, r3
   1baf4:	4b11      	ldr	r3, [pc, #68]	; (1bb3c <xQueueReceive+0x448>)
   1baf6:	4798      	blx	r3
   1baf8:	0003      	movs	r3, r0
   1bafa:	001a      	movs	r2, r3
   1bafc:	4b10      	ldr	r3, [pc, #64]	; (1bb40 <xQueueReceive+0x44c>)
   1bafe:	5c9c      	ldrb	r4, [r3, r2]
   1bb00:	6a3b      	ldr	r3, [r7, #32]
   1bb02:	0018      	movs	r0, r3
   1bb04:	4b0f      	ldr	r3, [pc, #60]	; (1bb44 <xQueueReceive+0x450>)
   1bb06:	4798      	blx	r3
   1bb08:	0003      	movs	r3, r0
   1bb0a:	b2db      	uxtb	r3, r3
   1bb0c:	001a      	movs	r2, r3
   1bb0e:	0021      	movs	r1, r4
   1bb10:	0028      	movs	r0, r5
   1bb12:	4b0d      	ldr	r3, [pc, #52]	; (1bb48 <xQueueReceive+0x454>)
   1bb14:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bb16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bb18:	0018      	movs	r0, r3
   1bb1a:	46bd      	mov	sp, r7
   1bb1c:	b00a      	add	sp, #40	; 0x28
   1bb1e:	bdb0      	pop	{r4, r5, r7, pc}
   1bb20:	0001c1a5 	.word	0x0001c1a5
   1bb24:	0001cb79 	.word	0x0001cb79
   1bb28:	0001c295 	.word	0x0001c295
   1bb2c:	00018b45 	.word	0x00018b45
   1bb30:	000188a9 	.word	0x000188a9
   1bb34:	20000110 	.word	0x20000110
   1bb38:	00018969 	.word	0x00018969
   1bb3c:	00018869 	.word	0x00018869
   1bb40:	20000104 	.word	0x20000104
   1bb44:	00018949 	.word	0x00018949
   1bb48:	000192a1 	.word	0x000192a1

0001bb4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1bb4c:	b5b0      	push	{r4, r5, r7, lr}
   1bb4e:	b08a      	sub	sp, #40	; 0x28
   1bb50:	af00      	add	r7, sp, #0
   1bb52:	6078      	str	r0, [r7, #4]
   1bb54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1bb56:	2300      	movs	r3, #0
   1bb58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bb5a:	687b      	ldr	r3, [r7, #4]
   1bb5c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1bb5e:	2300      	movs	r3, #0
   1bb60:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bb62:	69fb      	ldr	r3, [r7, #28]
   1bb64:	2b00      	cmp	r3, #0
   1bb66:	d101      	bne.n	1bb6c <xQueueSemaphoreTake+0x20>
   1bb68:	b672      	cpsid	i
   1bb6a:	e7fe      	b.n	1bb6a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bb6c:	69fb      	ldr	r3, [r7, #28]
   1bb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bb70:	2b00      	cmp	r3, #0
   1bb72:	d001      	beq.n	1bb78 <xQueueSemaphoreTake+0x2c>
   1bb74:	b672      	cpsid	i
   1bb76:	e7fe      	b.n	1bb76 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bb78:	4bcb      	ldr	r3, [pc, #812]	; (1bea8 <xQueueSemaphoreTake+0x35c>)
   1bb7a:	4798      	blx	r3
   1bb7c:	1e03      	subs	r3, r0, #0
   1bb7e:	d102      	bne.n	1bb86 <xQueueSemaphoreTake+0x3a>
   1bb80:	683b      	ldr	r3, [r7, #0]
   1bb82:	2b00      	cmp	r3, #0
   1bb84:	d101      	bne.n	1bb8a <xQueueSemaphoreTake+0x3e>
   1bb86:	2301      	movs	r3, #1
   1bb88:	e000      	b.n	1bb8c <xQueueSemaphoreTake+0x40>
   1bb8a:	2300      	movs	r3, #0
   1bb8c:	2b00      	cmp	r3, #0
   1bb8e:	d101      	bne.n	1bb94 <xQueueSemaphoreTake+0x48>
   1bb90:	b672      	cpsid	i
   1bb92:	e7fe      	b.n	1bb92 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bb94:	4bc5      	ldr	r3, [pc, #788]	; (1beac <xQueueSemaphoreTake+0x360>)
   1bb96:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1bb98:	69fb      	ldr	r3, [r7, #28]
   1bb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb9c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1bb9e:	69bb      	ldr	r3, [r7, #24]
   1bba0:	2b00      	cmp	r3, #0
   1bba2:	d100      	bne.n	1bba6 <xQueueSemaphoreTake+0x5a>
   1bba4:	e080      	b.n	1bca8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1bba6:	4bc2      	ldr	r3, [pc, #776]	; (1beb0 <xQueueSemaphoreTake+0x364>)
   1bba8:	4798      	blx	r3
   1bbaa:	0003      	movs	r3, r0
   1bbac:	0018      	movs	r0, r3
   1bbae:	4bc1      	ldr	r3, [pc, #772]	; (1beb4 <xQueueSemaphoreTake+0x368>)
   1bbb0:	4798      	blx	r3
   1bbb2:	0003      	movs	r3, r0
   1bbb4:	001a      	movs	r2, r3
   1bbb6:	4bc0      	ldr	r3, [pc, #768]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1bbb8:	881b      	ldrh	r3, [r3, #0]
   1bbba:	4013      	ands	r3, r2
   1bbbc:	b29b      	uxth	r3, r3
   1bbbe:	2b00      	cmp	r3, #0
   1bbc0:	d029      	beq.n	1bc16 <xQueueSemaphoreTake+0xca>
   1bbc2:	69fb      	ldr	r3, [r7, #28]
   1bbc4:	0018      	movs	r0, r3
   1bbc6:	4bbd      	ldr	r3, [pc, #756]	; (1bebc <xQueueSemaphoreTake+0x370>)
   1bbc8:	4798      	blx	r3
   1bbca:	0003      	movs	r3, r0
   1bbcc:	001a      	movs	r2, r3
   1bbce:	4bba      	ldr	r3, [pc, #744]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1bbd0:	881b      	ldrh	r3, [r3, #0]
   1bbd2:	4013      	ands	r3, r2
   1bbd4:	b29b      	uxth	r3, r3
   1bbd6:	2b00      	cmp	r3, #0
   1bbd8:	d01d      	beq.n	1bc16 <xQueueSemaphoreTake+0xca>
   1bbda:	69fb      	ldr	r3, [r7, #28]
   1bbdc:	0018      	movs	r0, r3
   1bbde:	4bb8      	ldr	r3, [pc, #736]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bbe0:	4798      	blx	r3
   1bbe2:	0003      	movs	r3, r0
   1bbe4:	001a      	movs	r2, r3
   1bbe6:	4bb7      	ldr	r3, [pc, #732]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bbe8:	5c9b      	ldrb	r3, [r3, r2]
   1bbea:	3328      	adds	r3, #40	; 0x28
   1bbec:	b2db      	uxtb	r3, r3
   1bbee:	001d      	movs	r5, r3
   1bbf0:	69fb      	ldr	r3, [r7, #28]
   1bbf2:	0018      	movs	r0, r3
   1bbf4:	4bb2      	ldr	r3, [pc, #712]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bbf6:	4798      	blx	r3
   1bbf8:	0003      	movs	r3, r0
   1bbfa:	001a      	movs	r2, r3
   1bbfc:	4bb1      	ldr	r3, [pc, #708]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bbfe:	5c9c      	ldrb	r4, [r3, r2]
   1bc00:	69fb      	ldr	r3, [r7, #28]
   1bc02:	0018      	movs	r0, r3
   1bc04:	4bb0      	ldr	r3, [pc, #704]	; (1bec8 <xQueueSemaphoreTake+0x37c>)
   1bc06:	4798      	blx	r3
   1bc08:	0003      	movs	r3, r0
   1bc0a:	b2db      	uxtb	r3, r3
   1bc0c:	001a      	movs	r2, r3
   1bc0e:	0021      	movs	r1, r4
   1bc10:	0028      	movs	r0, r5
   1bc12:	4bae      	ldr	r3, [pc, #696]	; (1becc <xQueueSemaphoreTake+0x380>)
   1bc14:	4798      	blx	r3
   1bc16:	69fb      	ldr	r3, [r7, #28]
   1bc18:	0018      	movs	r0, r3
   1bc1a:	4ba9      	ldr	r3, [pc, #676]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bc1c:	4798      	blx	r3
   1bc1e:	0003      	movs	r3, r0
   1bc20:	001a      	movs	r2, r3
   1bc22:	4ba8      	ldr	r3, [pc, #672]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bc24:	5c9c      	ldrb	r4, [r3, r2]
   1bc26:	69fb      	ldr	r3, [r7, #28]
   1bc28:	0018      	movs	r0, r3
   1bc2a:	4ba7      	ldr	r3, [pc, #668]	; (1bec8 <xQueueSemaphoreTake+0x37c>)
   1bc2c:	4798      	blx	r3
   1bc2e:	0003      	movs	r3, r0
   1bc30:	b2dd      	uxtb	r5, r3
   1bc32:	69fb      	ldr	r3, [r7, #28]
   1bc34:	0018      	movs	r0, r3
   1bc36:	4ba2      	ldr	r3, [pc, #648]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bc38:	4798      	blx	r3
   1bc3a:	0003      	movs	r3, r0
   1bc3c:	001a      	movs	r2, r3
   1bc3e:	4ba1      	ldr	r3, [pc, #644]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bc40:	5c9b      	ldrb	r3, [r3, r2]
   1bc42:	2b02      	cmp	r3, #2
   1bc44:	d108      	bne.n	1bc58 <xQueueSemaphoreTake+0x10c>
   1bc46:	4b9a      	ldr	r3, [pc, #616]	; (1beb0 <xQueueSemaphoreTake+0x364>)
   1bc48:	4798      	blx	r3
   1bc4a:	0003      	movs	r3, r0
   1bc4c:	0018      	movs	r0, r3
   1bc4e:	4ba0      	ldr	r3, [pc, #640]	; (1bed0 <xQueueSemaphoreTake+0x384>)
   1bc50:	4798      	blx	r3
   1bc52:	0003      	movs	r3, r0
   1bc54:	b2db      	uxtb	r3, r3
   1bc56:	e004      	b.n	1bc62 <xQueueSemaphoreTake+0x116>
   1bc58:	69fb      	ldr	r3, [r7, #28]
   1bc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc5c:	b2db      	uxtb	r3, r3
   1bc5e:	3b01      	subs	r3, #1
   1bc60:	b2db      	uxtb	r3, r3
   1bc62:	001a      	movs	r2, r3
   1bc64:	0029      	movs	r1, r5
   1bc66:	0020      	movs	r0, r4
   1bc68:	4b9a      	ldr	r3, [pc, #616]	; (1bed4 <xQueueSemaphoreTake+0x388>)
   1bc6a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1bc6c:	69bb      	ldr	r3, [r7, #24]
   1bc6e:	1e5a      	subs	r2, r3, #1
   1bc70:	69fb      	ldr	r3, [r7, #28]
   1bc72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bc74:	69fb      	ldr	r3, [r7, #28]
   1bc76:	681b      	ldr	r3, [r3, #0]
   1bc78:	2b00      	cmp	r3, #0
   1bc7a:	d104      	bne.n	1bc86 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1bc7c:	4b96      	ldr	r3, [pc, #600]	; (1bed8 <xQueueSemaphoreTake+0x38c>)
   1bc7e:	4798      	blx	r3
   1bc80:	0002      	movs	r2, r0
   1bc82:	69fb      	ldr	r3, [r7, #28]
   1bc84:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bc86:	69fb      	ldr	r3, [r7, #28]
   1bc88:	691b      	ldr	r3, [r3, #16]
   1bc8a:	2b00      	cmp	r3, #0
   1bc8c:	d008      	beq.n	1bca0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bc8e:	69fb      	ldr	r3, [r7, #28]
   1bc90:	3310      	adds	r3, #16
   1bc92:	0018      	movs	r0, r3
   1bc94:	4b91      	ldr	r3, [pc, #580]	; (1bedc <xQueueSemaphoreTake+0x390>)
   1bc96:	4798      	blx	r3
   1bc98:	1e03      	subs	r3, r0, #0
   1bc9a:	d001      	beq.n	1bca0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bc9c:	4b90      	ldr	r3, [pc, #576]	; (1bee0 <xQueueSemaphoreTake+0x394>)
   1bc9e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bca0:	4b90      	ldr	r3, [pc, #576]	; (1bee4 <xQueueSemaphoreTake+0x398>)
   1bca2:	4798      	blx	r3
				return pdPASS;
   1bca4:	2301      	movs	r3, #1
   1bca6:	e18b      	b.n	1bfc0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bca8:	683b      	ldr	r3, [r7, #0]
   1bcaa:	2b00      	cmp	r3, #0
   1bcac:	d140      	bne.n	1bd30 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1bcae:	6a3b      	ldr	r3, [r7, #32]
   1bcb0:	2b00      	cmp	r3, #0
   1bcb2:	d001      	beq.n	1bcb8 <xQueueSemaphoreTake+0x16c>
   1bcb4:	b672      	cpsid	i
   1bcb6:	e7fe      	b.n	1bcb6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1bcb8:	4b8a      	ldr	r3, [pc, #552]	; (1bee4 <xQueueSemaphoreTake+0x398>)
   1bcba:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bcbc:	4b7c      	ldr	r3, [pc, #496]	; (1beb0 <xQueueSemaphoreTake+0x364>)
   1bcbe:	4798      	blx	r3
   1bcc0:	0003      	movs	r3, r0
   1bcc2:	0018      	movs	r0, r3
   1bcc4:	4b7b      	ldr	r3, [pc, #492]	; (1beb4 <xQueueSemaphoreTake+0x368>)
   1bcc6:	4798      	blx	r3
   1bcc8:	0003      	movs	r3, r0
   1bcca:	001a      	movs	r2, r3
   1bccc:	4b7a      	ldr	r3, [pc, #488]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1bcce:	881b      	ldrh	r3, [r3, #0]
   1bcd0:	4013      	ands	r3, r2
   1bcd2:	b29b      	uxth	r3, r3
   1bcd4:	2b00      	cmp	r3, #0
   1bcd6:	d029      	beq.n	1bd2c <xQueueSemaphoreTake+0x1e0>
   1bcd8:	69fb      	ldr	r3, [r7, #28]
   1bcda:	0018      	movs	r0, r3
   1bcdc:	4b77      	ldr	r3, [pc, #476]	; (1bebc <xQueueSemaphoreTake+0x370>)
   1bcde:	4798      	blx	r3
   1bce0:	0003      	movs	r3, r0
   1bce2:	001a      	movs	r2, r3
   1bce4:	4b74      	ldr	r3, [pc, #464]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1bce6:	881b      	ldrh	r3, [r3, #0]
   1bce8:	4013      	ands	r3, r2
   1bcea:	b29b      	uxth	r3, r3
   1bcec:	2b00      	cmp	r3, #0
   1bcee:	d01d      	beq.n	1bd2c <xQueueSemaphoreTake+0x1e0>
   1bcf0:	69fb      	ldr	r3, [r7, #28]
   1bcf2:	0018      	movs	r0, r3
   1bcf4:	4b72      	ldr	r3, [pc, #456]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bcf6:	4798      	blx	r3
   1bcf8:	0003      	movs	r3, r0
   1bcfa:	001a      	movs	r2, r3
   1bcfc:	4b71      	ldr	r3, [pc, #452]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bcfe:	5c9b      	ldrb	r3, [r3, r2]
   1bd00:	3350      	adds	r3, #80	; 0x50
   1bd02:	b2db      	uxtb	r3, r3
   1bd04:	001d      	movs	r5, r3
   1bd06:	69fb      	ldr	r3, [r7, #28]
   1bd08:	0018      	movs	r0, r3
   1bd0a:	4b6d      	ldr	r3, [pc, #436]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bd0c:	4798      	blx	r3
   1bd0e:	0003      	movs	r3, r0
   1bd10:	001a      	movs	r2, r3
   1bd12:	4b6c      	ldr	r3, [pc, #432]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bd14:	5c9c      	ldrb	r4, [r3, r2]
   1bd16:	69fb      	ldr	r3, [r7, #28]
   1bd18:	0018      	movs	r0, r3
   1bd1a:	4b6b      	ldr	r3, [pc, #428]	; (1bec8 <xQueueSemaphoreTake+0x37c>)
   1bd1c:	4798      	blx	r3
   1bd1e:	0003      	movs	r3, r0
   1bd20:	b2db      	uxtb	r3, r3
   1bd22:	001a      	movs	r2, r3
   1bd24:	0021      	movs	r1, r4
   1bd26:	0028      	movs	r0, r5
   1bd28:	4b68      	ldr	r3, [pc, #416]	; (1becc <xQueueSemaphoreTake+0x380>)
   1bd2a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bd2c:	2300      	movs	r3, #0
   1bd2e:	e147      	b.n	1bfc0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd32:	2b00      	cmp	r3, #0
   1bd34:	d106      	bne.n	1bd44 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bd36:	230c      	movs	r3, #12
   1bd38:	18fb      	adds	r3, r7, r3
   1bd3a:	0018      	movs	r0, r3
   1bd3c:	4b6a      	ldr	r3, [pc, #424]	; (1bee8 <xQueueSemaphoreTake+0x39c>)
   1bd3e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bd40:	2301      	movs	r3, #1
   1bd42:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bd44:	4b67      	ldr	r3, [pc, #412]	; (1bee4 <xQueueSemaphoreTake+0x398>)
   1bd46:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bd48:	4b68      	ldr	r3, [pc, #416]	; (1beec <xQueueSemaphoreTake+0x3a0>)
   1bd4a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bd4c:	4b57      	ldr	r3, [pc, #348]	; (1beac <xQueueSemaphoreTake+0x360>)
   1bd4e:	4798      	blx	r3
   1bd50:	69fb      	ldr	r3, [r7, #28]
   1bd52:	2244      	movs	r2, #68	; 0x44
   1bd54:	5c9b      	ldrb	r3, [r3, r2]
   1bd56:	b25b      	sxtb	r3, r3
   1bd58:	3301      	adds	r3, #1
   1bd5a:	d103      	bne.n	1bd64 <xQueueSemaphoreTake+0x218>
   1bd5c:	69fb      	ldr	r3, [r7, #28]
   1bd5e:	2244      	movs	r2, #68	; 0x44
   1bd60:	2100      	movs	r1, #0
   1bd62:	5499      	strb	r1, [r3, r2]
   1bd64:	69fb      	ldr	r3, [r7, #28]
   1bd66:	2245      	movs	r2, #69	; 0x45
   1bd68:	5c9b      	ldrb	r3, [r3, r2]
   1bd6a:	b25b      	sxtb	r3, r3
   1bd6c:	3301      	adds	r3, #1
   1bd6e:	d103      	bne.n	1bd78 <xQueueSemaphoreTake+0x22c>
   1bd70:	69fb      	ldr	r3, [r7, #28]
   1bd72:	2245      	movs	r2, #69	; 0x45
   1bd74:	2100      	movs	r1, #0
   1bd76:	5499      	strb	r1, [r3, r2]
   1bd78:	4b5a      	ldr	r3, [pc, #360]	; (1bee4 <xQueueSemaphoreTake+0x398>)
   1bd7a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bd7c:	003a      	movs	r2, r7
   1bd7e:	230c      	movs	r3, #12
   1bd80:	18fb      	adds	r3, r7, r3
   1bd82:	0011      	movs	r1, r2
   1bd84:	0018      	movs	r0, r3
   1bd86:	4b5a      	ldr	r3, [pc, #360]	; (1bef0 <xQueueSemaphoreTake+0x3a4>)
   1bd88:	4798      	blx	r3
   1bd8a:	1e03      	subs	r3, r0, #0
   1bd8c:	d000      	beq.n	1bd90 <xQueueSemaphoreTake+0x244>
   1bd8e:	e0bd      	b.n	1bf0c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bd90:	69fb      	ldr	r3, [r7, #28]
   1bd92:	0018      	movs	r0, r3
   1bd94:	4b57      	ldr	r3, [pc, #348]	; (1bef4 <xQueueSemaphoreTake+0x3a8>)
   1bd96:	4798      	blx	r3
   1bd98:	1e03      	subs	r3, r0, #0
   1bd9a:	d100      	bne.n	1bd9e <xQueueSemaphoreTake+0x252>
   1bd9c:	e07c      	b.n	1be98 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bd9e:	4b44      	ldr	r3, [pc, #272]	; (1beb0 <xQueueSemaphoreTake+0x364>)
   1bda0:	4798      	blx	r3
   1bda2:	0003      	movs	r3, r0
   1bda4:	0018      	movs	r0, r3
   1bda6:	4b43      	ldr	r3, [pc, #268]	; (1beb4 <xQueueSemaphoreTake+0x368>)
   1bda8:	4798      	blx	r3
   1bdaa:	0003      	movs	r3, r0
   1bdac:	001a      	movs	r2, r3
   1bdae:	4b42      	ldr	r3, [pc, #264]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1bdb0:	881b      	ldrh	r3, [r3, #0]
   1bdb2:	4013      	ands	r3, r2
   1bdb4:	b29b      	uxth	r3, r3
   1bdb6:	2b00      	cmp	r3, #0
   1bdb8:	d029      	beq.n	1be0e <xQueueSemaphoreTake+0x2c2>
   1bdba:	69fb      	ldr	r3, [r7, #28]
   1bdbc:	0018      	movs	r0, r3
   1bdbe:	4b3f      	ldr	r3, [pc, #252]	; (1bebc <xQueueSemaphoreTake+0x370>)
   1bdc0:	4798      	blx	r3
   1bdc2:	0003      	movs	r3, r0
   1bdc4:	001a      	movs	r2, r3
   1bdc6:	4b3c      	ldr	r3, [pc, #240]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1bdc8:	881b      	ldrh	r3, [r3, #0]
   1bdca:	4013      	ands	r3, r2
   1bdcc:	b29b      	uxth	r3, r3
   1bdce:	2b00      	cmp	r3, #0
   1bdd0:	d01d      	beq.n	1be0e <xQueueSemaphoreTake+0x2c2>
   1bdd2:	69fb      	ldr	r3, [r7, #28]
   1bdd4:	0018      	movs	r0, r3
   1bdd6:	4b3a      	ldr	r3, [pc, #232]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bdd8:	4798      	blx	r3
   1bdda:	0003      	movs	r3, r0
   1bddc:	001a      	movs	r2, r3
   1bdde:	4b39      	ldr	r3, [pc, #228]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bde0:	5c9b      	ldrb	r3, [r3, r2]
   1bde2:	3368      	adds	r3, #104	; 0x68
   1bde4:	b2db      	uxtb	r3, r3
   1bde6:	001d      	movs	r5, r3
   1bde8:	69fb      	ldr	r3, [r7, #28]
   1bdea:	0018      	movs	r0, r3
   1bdec:	4b34      	ldr	r3, [pc, #208]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1bdee:	4798      	blx	r3
   1bdf0:	0003      	movs	r3, r0
   1bdf2:	001a      	movs	r2, r3
   1bdf4:	4b33      	ldr	r3, [pc, #204]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1bdf6:	5c9c      	ldrb	r4, [r3, r2]
   1bdf8:	69fb      	ldr	r3, [r7, #28]
   1bdfa:	0018      	movs	r0, r3
   1bdfc:	4b32      	ldr	r3, [pc, #200]	; (1bec8 <xQueueSemaphoreTake+0x37c>)
   1bdfe:	4798      	blx	r3
   1be00:	0003      	movs	r3, r0
   1be02:	b2db      	uxtb	r3, r3
   1be04:	001a      	movs	r2, r3
   1be06:	0021      	movs	r1, r4
   1be08:	0028      	movs	r0, r5
   1be0a:	4b30      	ldr	r3, [pc, #192]	; (1becc <xQueueSemaphoreTake+0x380>)
   1be0c:	4798      	blx	r3
   1be0e:	69fb      	ldr	r3, [r7, #28]
   1be10:	0018      	movs	r0, r3
   1be12:	4b2b      	ldr	r3, [pc, #172]	; (1bec0 <xQueueSemaphoreTake+0x374>)
   1be14:	4798      	blx	r3
   1be16:	0003      	movs	r3, r0
   1be18:	001a      	movs	r2, r3
   1be1a:	4b2a      	ldr	r3, [pc, #168]	; (1bec4 <xQueueSemaphoreTake+0x378>)
   1be1c:	5c9b      	ldrb	r3, [r3, r2]
   1be1e:	2b02      	cmp	r3, #2
   1be20:	d018      	beq.n	1be54 <xQueueSemaphoreTake+0x308>
   1be22:	4b23      	ldr	r3, [pc, #140]	; (1beb0 <xQueueSemaphoreTake+0x364>)
   1be24:	4798      	blx	r3
   1be26:	0003      	movs	r3, r0
   1be28:	0018      	movs	r0, r3
   1be2a:	4b22      	ldr	r3, [pc, #136]	; (1beb4 <xQueueSemaphoreTake+0x368>)
   1be2c:	4798      	blx	r3
   1be2e:	0003      	movs	r3, r0
   1be30:	001a      	movs	r2, r3
   1be32:	4b21      	ldr	r3, [pc, #132]	; (1beb8 <xQueueSemaphoreTake+0x36c>)
   1be34:	881b      	ldrh	r3, [r3, #0]
   1be36:	4013      	ands	r3, r2
   1be38:	b29b      	uxth	r3, r3
   1be3a:	2b00      	cmp	r3, #0
   1be3c:	d00a      	beq.n	1be54 <xQueueSemaphoreTake+0x308>
   1be3e:	4b1c      	ldr	r3, [pc, #112]	; (1beb0 <xQueueSemaphoreTake+0x364>)
   1be40:	4798      	blx	r3
   1be42:	0003      	movs	r3, r0
   1be44:	0018      	movs	r0, r3
   1be46:	4b22      	ldr	r3, [pc, #136]	; (1bed0 <xQueueSemaphoreTake+0x384>)
   1be48:	4798      	blx	r3
   1be4a:	0003      	movs	r3, r0
   1be4c:	b2db      	uxtb	r3, r3
   1be4e:	0018      	movs	r0, r3
   1be50:	4b29      	ldr	r3, [pc, #164]	; (1bef8 <xQueueSemaphoreTake+0x3ac>)
   1be52:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1be54:	69fb      	ldr	r3, [r7, #28]
   1be56:	681b      	ldr	r3, [r3, #0]
   1be58:	2b00      	cmp	r3, #0
   1be5a:	d10a      	bne.n	1be72 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1be5c:	4b13      	ldr	r3, [pc, #76]	; (1beac <xQueueSemaphoreTake+0x360>)
   1be5e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1be60:	69fb      	ldr	r3, [r7, #28]
   1be62:	685b      	ldr	r3, [r3, #4]
   1be64:	0018      	movs	r0, r3
   1be66:	4b25      	ldr	r3, [pc, #148]	; (1befc <xQueueSemaphoreTake+0x3b0>)
   1be68:	4798      	blx	r3
   1be6a:	0003      	movs	r3, r0
   1be6c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1be6e:	4b1d      	ldr	r3, [pc, #116]	; (1bee4 <xQueueSemaphoreTake+0x398>)
   1be70:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1be72:	69fb      	ldr	r3, [r7, #28]
   1be74:	3324      	adds	r3, #36	; 0x24
   1be76:	683a      	ldr	r2, [r7, #0]
   1be78:	0011      	movs	r1, r2
   1be7a:	0018      	movs	r0, r3
   1be7c:	4b20      	ldr	r3, [pc, #128]	; (1bf00 <xQueueSemaphoreTake+0x3b4>)
   1be7e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1be80:	69fb      	ldr	r3, [r7, #28]
   1be82:	0018      	movs	r0, r3
   1be84:	4b1f      	ldr	r3, [pc, #124]	; (1bf04 <xQueueSemaphoreTake+0x3b8>)
   1be86:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1be88:	4b1f      	ldr	r3, [pc, #124]	; (1bf08 <xQueueSemaphoreTake+0x3bc>)
   1be8a:	4798      	blx	r3
   1be8c:	1e03      	subs	r3, r0, #0
   1be8e:	d000      	beq.n	1be92 <xQueueSemaphoreTake+0x346>
   1be90:	e680      	b.n	1bb94 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1be92:	4b13      	ldr	r3, [pc, #76]	; (1bee0 <xQueueSemaphoreTake+0x394>)
   1be94:	4798      	blx	r3
   1be96:	e67d      	b.n	1bb94 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1be98:	69fb      	ldr	r3, [r7, #28]
   1be9a:	0018      	movs	r0, r3
   1be9c:	4b19      	ldr	r3, [pc, #100]	; (1bf04 <xQueueSemaphoreTake+0x3b8>)
   1be9e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bea0:	4b19      	ldr	r3, [pc, #100]	; (1bf08 <xQueueSemaphoreTake+0x3bc>)
   1bea2:	4798      	blx	r3
   1bea4:	e676      	b.n	1bb94 <xQueueSemaphoreTake+0x48>
   1bea6:	46c0      	nop			; (mov r8, r8)
   1bea8:	0001d5c9 	.word	0x0001d5c9
   1beac:	0001a8a9 	.word	0x0001a8a9
   1beb0:	00018b45 	.word	0x00018b45
   1beb4:	000188a9 	.word	0x000188a9
   1beb8:	20000110 	.word	0x20000110
   1bebc:	00018969 	.word	0x00018969
   1bec0:	00018869 	.word	0x00018869
   1bec4:	20000104 	.word	0x20000104
   1bec8:	00018949 	.word	0x00018949
   1becc:	000192a1 	.word	0x000192a1
   1bed0:	00018889 	.word	0x00018889
   1bed4:	000198fd 	.word	0x000198fd
   1bed8:	0001da95 	.word	0x0001da95
   1bedc:	0001d139 	.word	0x0001d139
   1bee0:	0001a891 	.word	0x0001a891
   1bee4:	0001a8cd 	.word	0x0001a8cd
   1bee8:	0001d279 	.word	0x0001d279
   1beec:	0001cb61 	.word	0x0001cb61
   1bef0:	0001d2a1 	.word	0x0001d2a1
   1bef4:	0001c295 	.word	0x0001c295
   1bef8:	00019a39 	.word	0x00019a39
   1befc:	0001d601 	.word	0x0001d601
   1bf00:	0001d015 	.word	0x0001d015
   1bf04:	0001c1a5 	.word	0x0001c1a5
   1bf08:	0001cb79 	.word	0x0001cb79
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1bf0c:	69fb      	ldr	r3, [r7, #28]
   1bf0e:	0018      	movs	r0, r3
   1bf10:	4b2d      	ldr	r3, [pc, #180]	; (1bfc8 <xQueueSemaphoreTake+0x47c>)
   1bf12:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1bf14:	4b2d      	ldr	r3, [pc, #180]	; (1bfcc <xQueueSemaphoreTake+0x480>)
   1bf16:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bf18:	69fb      	ldr	r3, [r7, #28]
   1bf1a:	0018      	movs	r0, r3
   1bf1c:	4b2c      	ldr	r3, [pc, #176]	; (1bfd0 <xQueueSemaphoreTake+0x484>)
   1bf1e:	4798      	blx	r3
   1bf20:	1e03      	subs	r3, r0, #0
   1bf22:	d100      	bne.n	1bf26 <xQueueSemaphoreTake+0x3da>
   1bf24:	e636      	b.n	1bb94 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1bf26:	6a3b      	ldr	r3, [r7, #32]
   1bf28:	2b00      	cmp	r3, #0
   1bf2a:	d010      	beq.n	1bf4e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1bf2c:	4b29      	ldr	r3, [pc, #164]	; (1bfd4 <xQueueSemaphoreTake+0x488>)
   1bf2e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1bf30:	69fb      	ldr	r3, [r7, #28]
   1bf32:	0018      	movs	r0, r3
   1bf34:	4b28      	ldr	r3, [pc, #160]	; (1bfd8 <xQueueSemaphoreTake+0x48c>)
   1bf36:	4798      	blx	r3
   1bf38:	0003      	movs	r3, r0
   1bf3a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1bf3c:	69fb      	ldr	r3, [r7, #28]
   1bf3e:	685b      	ldr	r3, [r3, #4]
   1bf40:	697a      	ldr	r2, [r7, #20]
   1bf42:	0011      	movs	r1, r2
   1bf44:	0018      	movs	r0, r3
   1bf46:	4b25      	ldr	r3, [pc, #148]	; (1bfdc <xQueueSemaphoreTake+0x490>)
   1bf48:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1bf4a:	4b25      	ldr	r3, [pc, #148]	; (1bfe0 <xQueueSemaphoreTake+0x494>)
   1bf4c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bf4e:	4b25      	ldr	r3, [pc, #148]	; (1bfe4 <xQueueSemaphoreTake+0x498>)
   1bf50:	4798      	blx	r3
   1bf52:	0003      	movs	r3, r0
   1bf54:	0018      	movs	r0, r3
   1bf56:	4b24      	ldr	r3, [pc, #144]	; (1bfe8 <xQueueSemaphoreTake+0x49c>)
   1bf58:	4798      	blx	r3
   1bf5a:	0003      	movs	r3, r0
   1bf5c:	001a      	movs	r2, r3
   1bf5e:	4b23      	ldr	r3, [pc, #140]	; (1bfec <xQueueSemaphoreTake+0x4a0>)
   1bf60:	881b      	ldrh	r3, [r3, #0]
   1bf62:	4013      	ands	r3, r2
   1bf64:	b29b      	uxth	r3, r3
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d029      	beq.n	1bfbe <xQueueSemaphoreTake+0x472>
   1bf6a:	69fb      	ldr	r3, [r7, #28]
   1bf6c:	0018      	movs	r0, r3
   1bf6e:	4b20      	ldr	r3, [pc, #128]	; (1bff0 <xQueueSemaphoreTake+0x4a4>)
   1bf70:	4798      	blx	r3
   1bf72:	0003      	movs	r3, r0
   1bf74:	001a      	movs	r2, r3
   1bf76:	4b1d      	ldr	r3, [pc, #116]	; (1bfec <xQueueSemaphoreTake+0x4a0>)
   1bf78:	881b      	ldrh	r3, [r3, #0]
   1bf7a:	4013      	ands	r3, r2
   1bf7c:	b29b      	uxth	r3, r3
   1bf7e:	2b00      	cmp	r3, #0
   1bf80:	d01d      	beq.n	1bfbe <xQueueSemaphoreTake+0x472>
   1bf82:	69fb      	ldr	r3, [r7, #28]
   1bf84:	0018      	movs	r0, r3
   1bf86:	4b1b      	ldr	r3, [pc, #108]	; (1bff4 <xQueueSemaphoreTake+0x4a8>)
   1bf88:	4798      	blx	r3
   1bf8a:	0003      	movs	r3, r0
   1bf8c:	001a      	movs	r2, r3
   1bf8e:	4b1a      	ldr	r3, [pc, #104]	; (1bff8 <xQueueSemaphoreTake+0x4ac>)
   1bf90:	5c9b      	ldrb	r3, [r3, r2]
   1bf92:	3350      	adds	r3, #80	; 0x50
   1bf94:	b2db      	uxtb	r3, r3
   1bf96:	001d      	movs	r5, r3
   1bf98:	69fb      	ldr	r3, [r7, #28]
   1bf9a:	0018      	movs	r0, r3
   1bf9c:	4b15      	ldr	r3, [pc, #84]	; (1bff4 <xQueueSemaphoreTake+0x4a8>)
   1bf9e:	4798      	blx	r3
   1bfa0:	0003      	movs	r3, r0
   1bfa2:	001a      	movs	r2, r3
   1bfa4:	4b14      	ldr	r3, [pc, #80]	; (1bff8 <xQueueSemaphoreTake+0x4ac>)
   1bfa6:	5c9c      	ldrb	r4, [r3, r2]
   1bfa8:	69fb      	ldr	r3, [r7, #28]
   1bfaa:	0018      	movs	r0, r3
   1bfac:	4b13      	ldr	r3, [pc, #76]	; (1bffc <xQueueSemaphoreTake+0x4b0>)
   1bfae:	4798      	blx	r3
   1bfb0:	0003      	movs	r3, r0
   1bfb2:	b2db      	uxtb	r3, r3
   1bfb4:	001a      	movs	r2, r3
   1bfb6:	0021      	movs	r1, r4
   1bfb8:	0028      	movs	r0, r5
   1bfba:	4b11      	ldr	r3, [pc, #68]	; (1c000 <xQueueSemaphoreTake+0x4b4>)
   1bfbc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bfbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bfc0:	0018      	movs	r0, r3
   1bfc2:	46bd      	mov	sp, r7
   1bfc4:	b00a      	add	sp, #40	; 0x28
   1bfc6:	bdb0      	pop	{r4, r5, r7, pc}
   1bfc8:	0001c1a5 	.word	0x0001c1a5
   1bfcc:	0001cb79 	.word	0x0001cb79
   1bfd0:	0001c295 	.word	0x0001c295
   1bfd4:	0001a8a9 	.word	0x0001a8a9
   1bfd8:	0001c047 	.word	0x0001c047
   1bfdc:	0001d8f9 	.word	0x0001d8f9
   1bfe0:	0001a8cd 	.word	0x0001a8cd
   1bfe4:	00018b45 	.word	0x00018b45
   1bfe8:	000188a9 	.word	0x000188a9
   1bfec:	20000110 	.word	0x20000110
   1bff0:	00018969 	.word	0x00018969
   1bff4:	00018869 	.word	0x00018869
   1bff8:	20000104 	.word	0x20000104
   1bffc:	00018949 	.word	0x00018949
   1c000:	000192a1 	.word	0x000192a1

0001c004 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c004:	b580      	push	{r7, lr}
   1c006:	b082      	sub	sp, #8
   1c008:	af00      	add	r7, sp, #0
   1c00a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c00c:	687b      	ldr	r3, [r7, #4]
   1c00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c010:	0018      	movs	r0, r3
   1c012:	46bd      	mov	sp, r7
   1c014:	b002      	add	sp, #8
   1c016:	bd80      	pop	{r7, pc}

0001c018 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c018:	b580      	push	{r7, lr}
   1c01a:	b082      	sub	sp, #8
   1c01c:	af00      	add	r7, sp, #0
   1c01e:	6078      	str	r0, [r7, #4]
   1c020:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c022:	687b      	ldr	r3, [r7, #4]
   1c024:	683a      	ldr	r2, [r7, #0]
   1c026:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c028:	46c0      	nop			; (mov r8, r8)
   1c02a:	46bd      	mov	sp, r7
   1c02c:	b002      	add	sp, #8
   1c02e:	bd80      	pop	{r7, pc}

0001c030 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c030:	b580      	push	{r7, lr}
   1c032:	b082      	sub	sp, #8
   1c034:	af00      	add	r7, sp, #0
   1c036:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	2250      	movs	r2, #80	; 0x50
   1c03c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c03e:	0018      	movs	r0, r3
   1c040:	46bd      	mov	sp, r7
   1c042:	b002      	add	sp, #8
   1c044:	bd80      	pop	{r7, pc}

0001c046 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c046:	b580      	push	{r7, lr}
   1c048:	b084      	sub	sp, #16
   1c04a:	af00      	add	r7, sp, #0
   1c04c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c04e:	687b      	ldr	r3, [r7, #4]
   1c050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c052:	2b00      	cmp	r3, #0
   1c054:	d006      	beq.n	1c064 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c056:	687b      	ldr	r3, [r7, #4]
   1c058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c05a:	681b      	ldr	r3, [r3, #0]
   1c05c:	2205      	movs	r2, #5
   1c05e:	1ad3      	subs	r3, r2, r3
   1c060:	60fb      	str	r3, [r7, #12]
   1c062:	e001      	b.n	1c068 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c064:	2300      	movs	r3, #0
   1c066:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c068:	68fb      	ldr	r3, [r7, #12]
	}
   1c06a:	0018      	movs	r0, r3
   1c06c:	46bd      	mov	sp, r7
   1c06e:	b004      	add	sp, #16
   1c070:	bd80      	pop	{r7, pc}
	...

0001c074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c074:	b580      	push	{r7, lr}
   1c076:	b086      	sub	sp, #24
   1c078:	af00      	add	r7, sp, #0
   1c07a:	60f8      	str	r0, [r7, #12]
   1c07c:	60b9      	str	r1, [r7, #8]
   1c07e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c080:	2300      	movs	r3, #0
   1c082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c084:	68fb      	ldr	r3, [r7, #12]
   1c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c08a:	68fb      	ldr	r3, [r7, #12]
   1c08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c08e:	2b00      	cmp	r3, #0
   1c090:	d10e      	bne.n	1c0b0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c092:	68fb      	ldr	r3, [r7, #12]
   1c094:	681b      	ldr	r3, [r3, #0]
   1c096:	2b00      	cmp	r3, #0
   1c098:	d14e      	bne.n	1c138 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c09a:	68fb      	ldr	r3, [r7, #12]
   1c09c:	685b      	ldr	r3, [r3, #4]
   1c09e:	0018      	movs	r0, r3
   1c0a0:	4b2a      	ldr	r3, [pc, #168]	; (1c14c <prvCopyDataToQueue+0xd8>)
   1c0a2:	4798      	blx	r3
   1c0a4:	0003      	movs	r3, r0
   1c0a6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c0a8:	68fb      	ldr	r3, [r7, #12]
   1c0aa:	2200      	movs	r2, #0
   1c0ac:	605a      	str	r2, [r3, #4]
   1c0ae:	e043      	b.n	1c138 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c0b0:	687b      	ldr	r3, [r7, #4]
   1c0b2:	2b00      	cmp	r3, #0
   1c0b4:	d119      	bne.n	1c0ea <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c0b6:	68fb      	ldr	r3, [r7, #12]
   1c0b8:	6898      	ldr	r0, [r3, #8]
   1c0ba:	68fb      	ldr	r3, [r7, #12]
   1c0bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c0be:	68bb      	ldr	r3, [r7, #8]
   1c0c0:	0019      	movs	r1, r3
   1c0c2:	4b23      	ldr	r3, [pc, #140]	; (1c150 <prvCopyDataToQueue+0xdc>)
   1c0c4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c0c6:	68fb      	ldr	r3, [r7, #12]
   1c0c8:	689a      	ldr	r2, [r3, #8]
   1c0ca:	68fb      	ldr	r3, [r7, #12]
   1c0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c0ce:	18d2      	adds	r2, r2, r3
   1c0d0:	68fb      	ldr	r3, [r7, #12]
   1c0d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c0d4:	68fb      	ldr	r3, [r7, #12]
   1c0d6:	689a      	ldr	r2, [r3, #8]
   1c0d8:	68fb      	ldr	r3, [r7, #12]
   1c0da:	685b      	ldr	r3, [r3, #4]
   1c0dc:	429a      	cmp	r2, r3
   1c0de:	d32b      	bcc.n	1c138 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c0e0:	68fb      	ldr	r3, [r7, #12]
   1c0e2:	681a      	ldr	r2, [r3, #0]
   1c0e4:	68fb      	ldr	r3, [r7, #12]
   1c0e6:	609a      	str	r2, [r3, #8]
   1c0e8:	e026      	b.n	1c138 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c0ea:	68fb      	ldr	r3, [r7, #12]
   1c0ec:	68d8      	ldr	r0, [r3, #12]
   1c0ee:	68fb      	ldr	r3, [r7, #12]
   1c0f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c0f2:	68bb      	ldr	r3, [r7, #8]
   1c0f4:	0019      	movs	r1, r3
   1c0f6:	4b16      	ldr	r3, [pc, #88]	; (1c150 <prvCopyDataToQueue+0xdc>)
   1c0f8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c0fa:	68fb      	ldr	r3, [r7, #12]
   1c0fc:	68da      	ldr	r2, [r3, #12]
   1c0fe:	68fb      	ldr	r3, [r7, #12]
   1c100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c102:	425b      	negs	r3, r3
   1c104:	18d2      	adds	r2, r2, r3
   1c106:	68fb      	ldr	r3, [r7, #12]
   1c108:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c10a:	68fb      	ldr	r3, [r7, #12]
   1c10c:	68da      	ldr	r2, [r3, #12]
   1c10e:	68fb      	ldr	r3, [r7, #12]
   1c110:	681b      	ldr	r3, [r3, #0]
   1c112:	429a      	cmp	r2, r3
   1c114:	d207      	bcs.n	1c126 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c116:	68fb      	ldr	r3, [r7, #12]
   1c118:	685a      	ldr	r2, [r3, #4]
   1c11a:	68fb      	ldr	r3, [r7, #12]
   1c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c11e:	425b      	negs	r3, r3
   1c120:	18d2      	adds	r2, r2, r3
   1c122:	68fb      	ldr	r3, [r7, #12]
   1c124:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c126:	687b      	ldr	r3, [r7, #4]
   1c128:	2b02      	cmp	r3, #2
   1c12a:	d105      	bne.n	1c138 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c12c:	693b      	ldr	r3, [r7, #16]
   1c12e:	2b00      	cmp	r3, #0
   1c130:	d002      	beq.n	1c138 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c132:	693b      	ldr	r3, [r7, #16]
   1c134:	3b01      	subs	r3, #1
   1c136:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c138:	693b      	ldr	r3, [r7, #16]
   1c13a:	1c5a      	adds	r2, r3, #1
   1c13c:	68fb      	ldr	r3, [r7, #12]
   1c13e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c140:	697b      	ldr	r3, [r7, #20]
}
   1c142:	0018      	movs	r0, r3
   1c144:	46bd      	mov	sp, r7
   1c146:	b006      	add	sp, #24
   1c148:	bd80      	pop	{r7, pc}
   1c14a:	46c0      	nop			; (mov r8, r8)
   1c14c:	0001d791 	.word	0x0001d791
   1c150:	00035341 	.word	0x00035341

0001c154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c154:	b580      	push	{r7, lr}
   1c156:	b082      	sub	sp, #8
   1c158:	af00      	add	r7, sp, #0
   1c15a:	6078      	str	r0, [r7, #4]
   1c15c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c15e:	687b      	ldr	r3, [r7, #4]
   1c160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c162:	2b00      	cmp	r3, #0
   1c164:	d018      	beq.n	1c198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c166:	687b      	ldr	r3, [r7, #4]
   1c168:	68da      	ldr	r2, [r3, #12]
   1c16a:	687b      	ldr	r3, [r7, #4]
   1c16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c16e:	18d2      	adds	r2, r2, r3
   1c170:	687b      	ldr	r3, [r7, #4]
   1c172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c174:	687b      	ldr	r3, [r7, #4]
   1c176:	68da      	ldr	r2, [r3, #12]
   1c178:	687b      	ldr	r3, [r7, #4]
   1c17a:	685b      	ldr	r3, [r3, #4]
   1c17c:	429a      	cmp	r2, r3
   1c17e:	d303      	bcc.n	1c188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c180:	687b      	ldr	r3, [r7, #4]
   1c182:	681a      	ldr	r2, [r3, #0]
   1c184:	687b      	ldr	r3, [r7, #4]
   1c186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c188:	687b      	ldr	r3, [r7, #4]
   1c18a:	68d9      	ldr	r1, [r3, #12]
   1c18c:	687b      	ldr	r3, [r7, #4]
   1c18e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c190:	683b      	ldr	r3, [r7, #0]
   1c192:	0018      	movs	r0, r3
   1c194:	4b02      	ldr	r3, [pc, #8]	; (1c1a0 <prvCopyDataFromQueue+0x4c>)
   1c196:	4798      	blx	r3
	}
}
   1c198:	46c0      	nop			; (mov r8, r8)
   1c19a:	46bd      	mov	sp, r7
   1c19c:	b002      	add	sp, #8
   1c19e:	bd80      	pop	{r7, pc}
   1c1a0:	00035341 	.word	0x00035341

0001c1a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c1a4:	b580      	push	{r7, lr}
   1c1a6:	b084      	sub	sp, #16
   1c1a8:	af00      	add	r7, sp, #0
   1c1aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c1ac:	4b34      	ldr	r3, [pc, #208]	; (1c280 <prvUnlockQueue+0xdc>)
   1c1ae:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c1b0:	230f      	movs	r3, #15
   1c1b2:	18fb      	adds	r3, r7, r3
   1c1b4:	687a      	ldr	r2, [r7, #4]
   1c1b6:	2145      	movs	r1, #69	; 0x45
   1c1b8:	5c52      	ldrb	r2, [r2, r1]
   1c1ba:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c1bc:	e022      	b.n	1c204 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c1be:	687b      	ldr	r3, [r7, #4]
   1c1c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	d009      	beq.n	1c1da <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c1c6:	687b      	ldr	r3, [r7, #4]
   1c1c8:	2100      	movs	r1, #0
   1c1ca:	0018      	movs	r0, r3
   1c1cc:	4b2d      	ldr	r3, [pc, #180]	; (1c284 <prvUnlockQueue+0xe0>)
   1c1ce:	4798      	blx	r3
   1c1d0:	1e03      	subs	r3, r0, #0
   1c1d2:	d00f      	beq.n	1c1f4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c1d4:	4b2c      	ldr	r3, [pc, #176]	; (1c288 <prvUnlockQueue+0xe4>)
   1c1d6:	4798      	blx	r3
   1c1d8:	e00c      	b.n	1c1f4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c1da:	687b      	ldr	r3, [r7, #4]
   1c1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c1de:	2b00      	cmp	r3, #0
   1c1e0:	d017      	beq.n	1c212 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c1e2:	687b      	ldr	r3, [r7, #4]
   1c1e4:	3324      	adds	r3, #36	; 0x24
   1c1e6:	0018      	movs	r0, r3
   1c1e8:	4b28      	ldr	r3, [pc, #160]	; (1c28c <prvUnlockQueue+0xe8>)
   1c1ea:	4798      	blx	r3
   1c1ec:	1e03      	subs	r3, r0, #0
   1c1ee:	d001      	beq.n	1c1f4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c1f0:	4b25      	ldr	r3, [pc, #148]	; (1c288 <prvUnlockQueue+0xe4>)
   1c1f2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c1f4:	230f      	movs	r3, #15
   1c1f6:	18fb      	adds	r3, r7, r3
   1c1f8:	781b      	ldrb	r3, [r3, #0]
   1c1fa:	3b01      	subs	r3, #1
   1c1fc:	b2da      	uxtb	r2, r3
   1c1fe:	230f      	movs	r3, #15
   1c200:	18fb      	adds	r3, r7, r3
   1c202:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c204:	230f      	movs	r3, #15
   1c206:	18fb      	adds	r3, r7, r3
   1c208:	781b      	ldrb	r3, [r3, #0]
   1c20a:	b25b      	sxtb	r3, r3
   1c20c:	2b00      	cmp	r3, #0
   1c20e:	dcd6      	bgt.n	1c1be <prvUnlockQueue+0x1a>
   1c210:	e000      	b.n	1c214 <prvUnlockQueue+0x70>
						break;
   1c212:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c214:	687b      	ldr	r3, [r7, #4]
   1c216:	2245      	movs	r2, #69	; 0x45
   1c218:	21ff      	movs	r1, #255	; 0xff
   1c21a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c21c:	4b1c      	ldr	r3, [pc, #112]	; (1c290 <prvUnlockQueue+0xec>)
   1c21e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c220:	4b17      	ldr	r3, [pc, #92]	; (1c280 <prvUnlockQueue+0xdc>)
   1c222:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c224:	230e      	movs	r3, #14
   1c226:	18fb      	adds	r3, r7, r3
   1c228:	687a      	ldr	r2, [r7, #4]
   1c22a:	2144      	movs	r1, #68	; 0x44
   1c22c:	5c52      	ldrb	r2, [r2, r1]
   1c22e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c230:	e014      	b.n	1c25c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c232:	687b      	ldr	r3, [r7, #4]
   1c234:	691b      	ldr	r3, [r3, #16]
   1c236:	2b00      	cmp	r3, #0
   1c238:	d017      	beq.n	1c26a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c23a:	687b      	ldr	r3, [r7, #4]
   1c23c:	3310      	adds	r3, #16
   1c23e:	0018      	movs	r0, r3
   1c240:	4b12      	ldr	r3, [pc, #72]	; (1c28c <prvUnlockQueue+0xe8>)
   1c242:	4798      	blx	r3
   1c244:	1e03      	subs	r3, r0, #0
   1c246:	d001      	beq.n	1c24c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c248:	4b0f      	ldr	r3, [pc, #60]	; (1c288 <prvUnlockQueue+0xe4>)
   1c24a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c24c:	230e      	movs	r3, #14
   1c24e:	18fb      	adds	r3, r7, r3
   1c250:	781b      	ldrb	r3, [r3, #0]
   1c252:	3b01      	subs	r3, #1
   1c254:	b2da      	uxtb	r2, r3
   1c256:	230e      	movs	r3, #14
   1c258:	18fb      	adds	r3, r7, r3
   1c25a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c25c:	230e      	movs	r3, #14
   1c25e:	18fb      	adds	r3, r7, r3
   1c260:	781b      	ldrb	r3, [r3, #0]
   1c262:	b25b      	sxtb	r3, r3
   1c264:	2b00      	cmp	r3, #0
   1c266:	dce4      	bgt.n	1c232 <prvUnlockQueue+0x8e>
   1c268:	e000      	b.n	1c26c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c26a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c26c:	687b      	ldr	r3, [r7, #4]
   1c26e:	2244      	movs	r2, #68	; 0x44
   1c270:	21ff      	movs	r1, #255	; 0xff
   1c272:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c274:	4b06      	ldr	r3, [pc, #24]	; (1c290 <prvUnlockQueue+0xec>)
   1c276:	4798      	blx	r3
}
   1c278:	46c0      	nop			; (mov r8, r8)
   1c27a:	46bd      	mov	sp, r7
   1c27c:	b004      	add	sp, #16
   1c27e:	bd80      	pop	{r7, pc}
   1c280:	0001a8a9 	.word	0x0001a8a9
   1c284:	0001c379 	.word	0x0001c379
   1c288:	0001d34d 	.word	0x0001d34d
   1c28c:	0001d139 	.word	0x0001d139
   1c290:	0001a8cd 	.word	0x0001a8cd

0001c294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c294:	b580      	push	{r7, lr}
   1c296:	b084      	sub	sp, #16
   1c298:	af00      	add	r7, sp, #0
   1c29a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c29c:	4b08      	ldr	r3, [pc, #32]	; (1c2c0 <prvIsQueueEmpty+0x2c>)
   1c29e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c2a0:	687b      	ldr	r3, [r7, #4]
   1c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c2a4:	2b00      	cmp	r3, #0
   1c2a6:	d102      	bne.n	1c2ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c2a8:	2301      	movs	r3, #1
   1c2aa:	60fb      	str	r3, [r7, #12]
   1c2ac:	e001      	b.n	1c2b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c2b2:	4b04      	ldr	r3, [pc, #16]	; (1c2c4 <prvIsQueueEmpty+0x30>)
   1c2b4:	4798      	blx	r3

	return xReturn;
   1c2b6:	68fb      	ldr	r3, [r7, #12]
}
   1c2b8:	0018      	movs	r0, r3
   1c2ba:	46bd      	mov	sp, r7
   1c2bc:	b004      	add	sp, #16
   1c2be:	bd80      	pop	{r7, pc}
   1c2c0:	0001a8a9 	.word	0x0001a8a9
   1c2c4:	0001a8cd 	.word	0x0001a8cd

0001c2c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c2c8:	b580      	push	{r7, lr}
   1c2ca:	b084      	sub	sp, #16
   1c2cc:	af00      	add	r7, sp, #0
   1c2ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c2d0:	4b09      	ldr	r3, [pc, #36]	; (1c2f8 <prvIsQueueFull+0x30>)
   1c2d2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c2d4:	687b      	ldr	r3, [r7, #4]
   1c2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c2d8:	687b      	ldr	r3, [r7, #4]
   1c2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c2dc:	429a      	cmp	r2, r3
   1c2de:	d102      	bne.n	1c2e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c2e0:	2301      	movs	r3, #1
   1c2e2:	60fb      	str	r3, [r7, #12]
   1c2e4:	e001      	b.n	1c2ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c2e6:	2300      	movs	r3, #0
   1c2e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c2ea:	4b04      	ldr	r3, [pc, #16]	; (1c2fc <prvIsQueueFull+0x34>)
   1c2ec:	4798      	blx	r3

	return xReturn;
   1c2ee:	68fb      	ldr	r3, [r7, #12]
}
   1c2f0:	0018      	movs	r0, r3
   1c2f2:	46bd      	mov	sp, r7
   1c2f4:	b004      	add	sp, #16
   1c2f6:	bd80      	pop	{r7, pc}
   1c2f8:	0001a8a9 	.word	0x0001a8a9
   1c2fc:	0001a8cd 	.word	0x0001a8cd

0001c300 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c300:	b580      	push	{r7, lr}
   1c302:	b086      	sub	sp, #24
   1c304:	af00      	add	r7, sp, #0
   1c306:	60f8      	str	r0, [r7, #12]
   1c308:	60b9      	str	r1, [r7, #8]
   1c30a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c30c:	68fb      	ldr	r3, [r7, #12]
   1c30e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c310:	4b15      	ldr	r3, [pc, #84]	; (1c368 <vQueueWaitForMessageRestricted+0x68>)
   1c312:	4798      	blx	r3
   1c314:	697b      	ldr	r3, [r7, #20]
   1c316:	2244      	movs	r2, #68	; 0x44
   1c318:	5c9b      	ldrb	r3, [r3, r2]
   1c31a:	b25b      	sxtb	r3, r3
   1c31c:	3301      	adds	r3, #1
   1c31e:	d103      	bne.n	1c328 <vQueueWaitForMessageRestricted+0x28>
   1c320:	697b      	ldr	r3, [r7, #20]
   1c322:	2244      	movs	r2, #68	; 0x44
   1c324:	2100      	movs	r1, #0
   1c326:	5499      	strb	r1, [r3, r2]
   1c328:	697b      	ldr	r3, [r7, #20]
   1c32a:	2245      	movs	r2, #69	; 0x45
   1c32c:	5c9b      	ldrb	r3, [r3, r2]
   1c32e:	b25b      	sxtb	r3, r3
   1c330:	3301      	adds	r3, #1
   1c332:	d103      	bne.n	1c33c <vQueueWaitForMessageRestricted+0x3c>
   1c334:	697b      	ldr	r3, [r7, #20]
   1c336:	2245      	movs	r2, #69	; 0x45
   1c338:	2100      	movs	r1, #0
   1c33a:	5499      	strb	r1, [r3, r2]
   1c33c:	4b0b      	ldr	r3, [pc, #44]	; (1c36c <vQueueWaitForMessageRestricted+0x6c>)
   1c33e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c340:	697b      	ldr	r3, [r7, #20]
   1c342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c344:	2b00      	cmp	r3, #0
   1c346:	d106      	bne.n	1c356 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c348:	697b      	ldr	r3, [r7, #20]
   1c34a:	3324      	adds	r3, #36	; 0x24
   1c34c:	687a      	ldr	r2, [r7, #4]
   1c34e:	68b9      	ldr	r1, [r7, #8]
   1c350:	0018      	movs	r0, r3
   1c352:	4b07      	ldr	r3, [pc, #28]	; (1c370 <vQueueWaitForMessageRestricted+0x70>)
   1c354:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c356:	697b      	ldr	r3, [r7, #20]
   1c358:	0018      	movs	r0, r3
   1c35a:	4b06      	ldr	r3, [pc, #24]	; (1c374 <vQueueWaitForMessageRestricted+0x74>)
   1c35c:	4798      	blx	r3
	}
   1c35e:	46c0      	nop			; (mov r8, r8)
   1c360:	46bd      	mov	sp, r7
   1c362:	b006      	add	sp, #24
   1c364:	bd80      	pop	{r7, pc}
   1c366:	46c0      	nop			; (mov r8, r8)
   1c368:	0001a8a9 	.word	0x0001a8a9
   1c36c:	0001a8cd 	.word	0x0001a8cd
   1c370:	0001d059 	.word	0x0001d059
   1c374:	0001c1a5 	.word	0x0001c1a5

0001c378 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c378:	b5b0      	push	{r4, r5, r7, lr}
   1c37a:	b086      	sub	sp, #24
   1c37c:	af00      	add	r7, sp, #0
   1c37e:	6078      	str	r0, [r7, #4]
   1c380:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c382:	687b      	ldr	r3, [r7, #4]
   1c384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c388:	2300      	movs	r3, #0
   1c38a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c38c:	693b      	ldr	r3, [r7, #16]
   1c38e:	2b00      	cmp	r3, #0
   1c390:	d101      	bne.n	1c396 <prvNotifyQueueSetContainer+0x1e>
   1c392:	b672      	cpsid	i
   1c394:	e7fe      	b.n	1c394 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c396:	693b      	ldr	r3, [r7, #16]
   1c398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c39a:	693b      	ldr	r3, [r7, #16]
   1c39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c39e:	429a      	cmp	r2, r3
   1c3a0:	d301      	bcc.n	1c3a6 <prvNotifyQueueSetContainer+0x2e>
   1c3a2:	b672      	cpsid	i
   1c3a4:	e7fe      	b.n	1c3a4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c3a6:	693b      	ldr	r3, [r7, #16]
   1c3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c3aa:	693b      	ldr	r3, [r7, #16]
   1c3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c3ae:	429a      	cmp	r2, r3
   1c3b0:	d300      	bcc.n	1c3b4 <prvNotifyQueueSetContainer+0x3c>
   1c3b2:	e08b      	b.n	1c4cc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c3b4:	230f      	movs	r3, #15
   1c3b6:	18fb      	adds	r3, r7, r3
   1c3b8:	693a      	ldr	r2, [r7, #16]
   1c3ba:	2145      	movs	r1, #69	; 0x45
   1c3bc:	5c52      	ldrb	r2, [r2, r1]
   1c3be:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c3c0:	4b45      	ldr	r3, [pc, #276]	; (1c4d8 <prvNotifyQueueSetContainer+0x160>)
   1c3c2:	4798      	blx	r3
   1c3c4:	0003      	movs	r3, r0
   1c3c6:	0018      	movs	r0, r3
   1c3c8:	4b44      	ldr	r3, [pc, #272]	; (1c4dc <prvNotifyQueueSetContainer+0x164>)
   1c3ca:	4798      	blx	r3
   1c3cc:	0003      	movs	r3, r0
   1c3ce:	001a      	movs	r2, r3
   1c3d0:	4b43      	ldr	r3, [pc, #268]	; (1c4e0 <prvNotifyQueueSetContainer+0x168>)
   1c3d2:	881b      	ldrh	r3, [r3, #0]
   1c3d4:	4013      	ands	r3, r2
   1c3d6:	b29b      	uxth	r3, r3
   1c3d8:	2b00      	cmp	r3, #0
   1c3da:	d02e      	beq.n	1c43a <prvNotifyQueueSetContainer+0xc2>
   1c3dc:	693b      	ldr	r3, [r7, #16]
   1c3de:	0018      	movs	r0, r3
   1c3e0:	4b40      	ldr	r3, [pc, #256]	; (1c4e4 <prvNotifyQueueSetContainer+0x16c>)
   1c3e2:	4798      	blx	r3
   1c3e4:	0003      	movs	r3, r0
   1c3e6:	001a      	movs	r2, r3
   1c3e8:	4b3d      	ldr	r3, [pc, #244]	; (1c4e0 <prvNotifyQueueSetContainer+0x168>)
   1c3ea:	881b      	ldrh	r3, [r3, #0]
   1c3ec:	4013      	ands	r3, r2
   1c3ee:	b29b      	uxth	r3, r3
   1c3f0:	2b00      	cmp	r3, #0
   1c3f2:	d022      	beq.n	1c43a <prvNotifyQueueSetContainer+0xc2>
   1c3f4:	683b      	ldr	r3, [r7, #0]
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	d10b      	bne.n	1c412 <prvNotifyQueueSetContainer+0x9a>
   1c3fa:	693b      	ldr	r3, [r7, #16]
   1c3fc:	0018      	movs	r0, r3
   1c3fe:	4b3a      	ldr	r3, [pc, #232]	; (1c4e8 <prvNotifyQueueSetContainer+0x170>)
   1c400:	4798      	blx	r3
   1c402:	0003      	movs	r3, r0
   1c404:	001a      	movs	r2, r3
   1c406:	4b39      	ldr	r3, [pc, #228]	; (1c4ec <prvNotifyQueueSetContainer+0x174>)
   1c408:	5c9b      	ldrb	r3, [r3, r2]
   1c40a:	3320      	adds	r3, #32
   1c40c:	b2db      	uxtb	r3, r3
   1c40e:	001d      	movs	r5, r3
   1c410:	e000      	b.n	1c414 <prvNotifyQueueSetContainer+0x9c>
   1c412:	2525      	movs	r5, #37	; 0x25
   1c414:	693b      	ldr	r3, [r7, #16]
   1c416:	0018      	movs	r0, r3
   1c418:	4b33      	ldr	r3, [pc, #204]	; (1c4e8 <prvNotifyQueueSetContainer+0x170>)
   1c41a:	4798      	blx	r3
   1c41c:	0003      	movs	r3, r0
   1c41e:	001a      	movs	r2, r3
   1c420:	4b32      	ldr	r3, [pc, #200]	; (1c4ec <prvNotifyQueueSetContainer+0x174>)
   1c422:	5c9c      	ldrb	r4, [r3, r2]
   1c424:	693b      	ldr	r3, [r7, #16]
   1c426:	0018      	movs	r0, r3
   1c428:	4b31      	ldr	r3, [pc, #196]	; (1c4f0 <prvNotifyQueueSetContainer+0x178>)
   1c42a:	4798      	blx	r3
   1c42c:	0003      	movs	r3, r0
   1c42e:	b2db      	uxtb	r3, r3
   1c430:	001a      	movs	r2, r3
   1c432:	0021      	movs	r1, r4
   1c434:	0028      	movs	r0, r5
   1c436:	4b2f      	ldr	r3, [pc, #188]	; (1c4f4 <prvNotifyQueueSetContainer+0x17c>)
   1c438:	4798      	blx	r3
   1c43a:	693b      	ldr	r3, [r7, #16]
   1c43c:	0018      	movs	r0, r3
   1c43e:	4b2a      	ldr	r3, [pc, #168]	; (1c4e8 <prvNotifyQueueSetContainer+0x170>)
   1c440:	4798      	blx	r3
   1c442:	0003      	movs	r3, r0
   1c444:	001a      	movs	r2, r3
   1c446:	4b29      	ldr	r3, [pc, #164]	; (1c4ec <prvNotifyQueueSetContainer+0x174>)
   1c448:	5c9c      	ldrb	r4, [r3, r2]
   1c44a:	693b      	ldr	r3, [r7, #16]
   1c44c:	0018      	movs	r0, r3
   1c44e:	4b28      	ldr	r3, [pc, #160]	; (1c4f0 <prvNotifyQueueSetContainer+0x178>)
   1c450:	4798      	blx	r3
   1c452:	0003      	movs	r3, r0
   1c454:	b2dd      	uxtb	r5, r3
   1c456:	693b      	ldr	r3, [r7, #16]
   1c458:	0018      	movs	r0, r3
   1c45a:	4b23      	ldr	r3, [pc, #140]	; (1c4e8 <prvNotifyQueueSetContainer+0x170>)
   1c45c:	4798      	blx	r3
   1c45e:	0003      	movs	r3, r0
   1c460:	001a      	movs	r2, r3
   1c462:	4b22      	ldr	r3, [pc, #136]	; (1c4ec <prvNotifyQueueSetContainer+0x174>)
   1c464:	5c9b      	ldrb	r3, [r3, r2]
   1c466:	2b02      	cmp	r3, #2
   1c468:	d005      	beq.n	1c476 <prvNotifyQueueSetContainer+0xfe>
   1c46a:	693b      	ldr	r3, [r7, #16]
   1c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c46e:	b2db      	uxtb	r3, r3
   1c470:	3301      	adds	r3, #1
   1c472:	b2db      	uxtb	r3, r3
   1c474:	e000      	b.n	1c478 <prvNotifyQueueSetContainer+0x100>
   1c476:	2300      	movs	r3, #0
   1c478:	001a      	movs	r2, r3
   1c47a:	0029      	movs	r1, r5
   1c47c:	0020      	movs	r0, r4
   1c47e:	4b1e      	ldr	r3, [pc, #120]	; (1c4f8 <prvNotifyQueueSetContainer+0x180>)
   1c480:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c482:	683a      	ldr	r2, [r7, #0]
   1c484:	1d39      	adds	r1, r7, #4
   1c486:	693b      	ldr	r3, [r7, #16]
   1c488:	0018      	movs	r0, r3
   1c48a:	4b1c      	ldr	r3, [pc, #112]	; (1c4fc <prvNotifyQueueSetContainer+0x184>)
   1c48c:	4798      	blx	r3
   1c48e:	0003      	movs	r3, r0
   1c490:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c492:	230f      	movs	r3, #15
   1c494:	18fb      	adds	r3, r7, r3
   1c496:	781b      	ldrb	r3, [r3, #0]
   1c498:	b25b      	sxtb	r3, r3
   1c49a:	3301      	adds	r3, #1
   1c49c:	d10d      	bne.n	1c4ba <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c49e:	693b      	ldr	r3, [r7, #16]
   1c4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c4a2:	2b00      	cmp	r3, #0
   1c4a4:	d012      	beq.n	1c4cc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c4a6:	693b      	ldr	r3, [r7, #16]
   1c4a8:	3324      	adds	r3, #36	; 0x24
   1c4aa:	0018      	movs	r0, r3
   1c4ac:	4b14      	ldr	r3, [pc, #80]	; (1c500 <prvNotifyQueueSetContainer+0x188>)
   1c4ae:	4798      	blx	r3
   1c4b0:	1e03      	subs	r3, r0, #0
   1c4b2:	d00b      	beq.n	1c4cc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c4b4:	2301      	movs	r3, #1
   1c4b6:	617b      	str	r3, [r7, #20]
   1c4b8:	e008      	b.n	1c4cc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c4ba:	230f      	movs	r3, #15
   1c4bc:	18fb      	adds	r3, r7, r3
   1c4be:	781b      	ldrb	r3, [r3, #0]
   1c4c0:	3301      	adds	r3, #1
   1c4c2:	b2db      	uxtb	r3, r3
   1c4c4:	b259      	sxtb	r1, r3
   1c4c6:	693b      	ldr	r3, [r7, #16]
   1c4c8:	2245      	movs	r2, #69	; 0x45
   1c4ca:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c4cc:	697b      	ldr	r3, [r7, #20]
	}
   1c4ce:	0018      	movs	r0, r3
   1c4d0:	46bd      	mov	sp, r7
   1c4d2:	b006      	add	sp, #24
   1c4d4:	bdb0      	pop	{r4, r5, r7, pc}
   1c4d6:	46c0      	nop			; (mov r8, r8)
   1c4d8:	00018b45 	.word	0x00018b45
   1c4dc:	000188a9 	.word	0x000188a9
   1c4e0:	20000110 	.word	0x20000110
   1c4e4:	00018969 	.word	0x00018969
   1c4e8:	00018869 	.word	0x00018869
   1c4ec:	20000104 	.word	0x20000104
   1c4f0:	00018949 	.word	0x00018949
   1c4f4:	000192a1 	.word	0x000192a1
   1c4f8:	000198fd 	.word	0x000198fd
   1c4fc:	0001c075 	.word	0x0001c075
   1c500:	0001d139 	.word	0x0001d139

0001c504 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c504:	b590      	push	{r4, r7, lr}
   1c506:	b08d      	sub	sp, #52	; 0x34
   1c508:	af04      	add	r7, sp, #16
   1c50a:	60f8      	str	r0, [r7, #12]
   1c50c:	60b9      	str	r1, [r7, #8]
   1c50e:	603b      	str	r3, [r7, #0]
   1c510:	1dbb      	adds	r3, r7, #6
   1c512:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c514:	1dbb      	adds	r3, r7, #6
   1c516:	881b      	ldrh	r3, [r3, #0]
   1c518:	009b      	lsls	r3, r3, #2
   1c51a:	0018      	movs	r0, r3
   1c51c:	4b1d      	ldr	r3, [pc, #116]	; (1c594 <xTaskCreate+0x90>)
   1c51e:	4798      	blx	r3
   1c520:	0003      	movs	r3, r0
   1c522:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c524:	697b      	ldr	r3, [r7, #20]
   1c526:	2b00      	cmp	r3, #0
   1c528:	d010      	beq.n	1c54c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c52a:	2054      	movs	r0, #84	; 0x54
   1c52c:	4b19      	ldr	r3, [pc, #100]	; (1c594 <xTaskCreate+0x90>)
   1c52e:	4798      	blx	r3
   1c530:	0003      	movs	r3, r0
   1c532:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c534:	69fb      	ldr	r3, [r7, #28]
   1c536:	2b00      	cmp	r3, #0
   1c538:	d003      	beq.n	1c542 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c53a:	69fb      	ldr	r3, [r7, #28]
   1c53c:	697a      	ldr	r2, [r7, #20]
   1c53e:	631a      	str	r2, [r3, #48]	; 0x30
   1c540:	e006      	b.n	1c550 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c542:	697b      	ldr	r3, [r7, #20]
   1c544:	0018      	movs	r0, r3
   1c546:	4b14      	ldr	r3, [pc, #80]	; (1c598 <xTaskCreate+0x94>)
   1c548:	4798      	blx	r3
   1c54a:	e001      	b.n	1c550 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c54c:	2300      	movs	r3, #0
   1c54e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c550:	69fb      	ldr	r3, [r7, #28]
   1c552:	2b00      	cmp	r3, #0
   1c554:	d016      	beq.n	1c584 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c556:	1dbb      	adds	r3, r7, #6
   1c558:	881a      	ldrh	r2, [r3, #0]
   1c55a:	683c      	ldr	r4, [r7, #0]
   1c55c:	68b9      	ldr	r1, [r7, #8]
   1c55e:	68f8      	ldr	r0, [r7, #12]
   1c560:	2300      	movs	r3, #0
   1c562:	9303      	str	r3, [sp, #12]
   1c564:	69fb      	ldr	r3, [r7, #28]
   1c566:	9302      	str	r3, [sp, #8]
   1c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c56a:	9301      	str	r3, [sp, #4]
   1c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c56e:	9300      	str	r3, [sp, #0]
   1c570:	0023      	movs	r3, r4
   1c572:	4c0a      	ldr	r4, [pc, #40]	; (1c59c <xTaskCreate+0x98>)
   1c574:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c576:	69fb      	ldr	r3, [r7, #28]
   1c578:	0018      	movs	r0, r3
   1c57a:	4b09      	ldr	r3, [pc, #36]	; (1c5a0 <xTaskCreate+0x9c>)
   1c57c:	4798      	blx	r3
			xReturn = pdPASS;
   1c57e:	2301      	movs	r3, #1
   1c580:	61bb      	str	r3, [r7, #24]
   1c582:	e002      	b.n	1c58a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c584:	2301      	movs	r3, #1
   1c586:	425b      	negs	r3, r3
   1c588:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c58a:	69bb      	ldr	r3, [r7, #24]
	}
   1c58c:	0018      	movs	r0, r3
   1c58e:	46bd      	mov	sp, r7
   1c590:	b009      	add	sp, #36	; 0x24
   1c592:	bd90      	pop	{r4, r7, pc}
   1c594:	0001a9e1 	.word	0x0001a9e1
   1c598:	0001aaa5 	.word	0x0001aaa5
   1c59c:	0001c5a5 	.word	0x0001c5a5
   1c5a0:	0001c6b5 	.word	0x0001c6b5

0001c5a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c5a4:	b580      	push	{r7, lr}
   1c5a6:	b086      	sub	sp, #24
   1c5a8:	af00      	add	r7, sp, #0
   1c5aa:	60f8      	str	r0, [r7, #12]
   1c5ac:	60b9      	str	r1, [r7, #8]
   1c5ae:	607a      	str	r2, [r7, #4]
   1c5b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c5b6:	687b      	ldr	r3, [r7, #4]
   1c5b8:	009b      	lsls	r3, r3, #2
   1c5ba:	001a      	movs	r2, r3
   1c5bc:	21a5      	movs	r1, #165	; 0xa5
   1c5be:	4b39      	ldr	r3, [pc, #228]	; (1c6a4 <prvInitialiseNewTask+0x100>)
   1c5c0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c5c6:	687b      	ldr	r3, [r7, #4]
   1c5c8:	4937      	ldr	r1, [pc, #220]	; (1c6a8 <prvInitialiseNewTask+0x104>)
   1c5ca:	468c      	mov	ip, r1
   1c5cc:	4463      	add	r3, ip
   1c5ce:	009b      	lsls	r3, r3, #2
   1c5d0:	18d3      	adds	r3, r2, r3
   1c5d2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c5d4:	693b      	ldr	r3, [r7, #16]
   1c5d6:	2207      	movs	r2, #7
   1c5d8:	4393      	bics	r3, r2
   1c5da:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c5dc:	693b      	ldr	r3, [r7, #16]
   1c5de:	2207      	movs	r2, #7
   1c5e0:	4013      	ands	r3, r2
   1c5e2:	d001      	beq.n	1c5e8 <prvInitialiseNewTask+0x44>
   1c5e4:	b672      	cpsid	i
   1c5e6:	e7fe      	b.n	1c5e6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c5e8:	2300      	movs	r3, #0
   1c5ea:	617b      	str	r3, [r7, #20]
   1c5ec:	e013      	b.n	1c616 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c5ee:	68ba      	ldr	r2, [r7, #8]
   1c5f0:	697b      	ldr	r3, [r7, #20]
   1c5f2:	18d3      	adds	r3, r2, r3
   1c5f4:	7818      	ldrb	r0, [r3, #0]
   1c5f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c5f8:	2134      	movs	r1, #52	; 0x34
   1c5fa:	697b      	ldr	r3, [r7, #20]
   1c5fc:	18d3      	adds	r3, r2, r3
   1c5fe:	185b      	adds	r3, r3, r1
   1c600:	1c02      	adds	r2, r0, #0
   1c602:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c604:	68ba      	ldr	r2, [r7, #8]
   1c606:	697b      	ldr	r3, [r7, #20]
   1c608:	18d3      	adds	r3, r2, r3
   1c60a:	781b      	ldrb	r3, [r3, #0]
   1c60c:	2b00      	cmp	r3, #0
   1c60e:	d006      	beq.n	1c61e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c610:	697b      	ldr	r3, [r7, #20]
   1c612:	3301      	adds	r3, #1
   1c614:	617b      	str	r3, [r7, #20]
   1c616:	697b      	ldr	r3, [r7, #20]
   1c618:	2b07      	cmp	r3, #7
   1c61a:	d9e8      	bls.n	1c5ee <prvInitialiseNewTask+0x4a>
   1c61c:	e000      	b.n	1c620 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c61e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c622:	223b      	movs	r2, #59	; 0x3b
   1c624:	2100      	movs	r1, #0
   1c626:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c628:	6a3b      	ldr	r3, [r7, #32]
   1c62a:	2b04      	cmp	r3, #4
   1c62c:	d901      	bls.n	1c632 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c62e:	2304      	movs	r3, #4
   1c630:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c634:	6a3a      	ldr	r2, [r7, #32]
   1c636:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c63a:	6a3a      	ldr	r2, [r7, #32]
   1c63c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c640:	2200      	movs	r2, #0
   1c642:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c646:	3304      	adds	r3, #4
   1c648:	0018      	movs	r0, r3
   1c64a:	4b18      	ldr	r3, [pc, #96]	; (1c6ac <prvInitialiseNewTask+0x108>)
   1c64c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c650:	3318      	adds	r3, #24
   1c652:	0018      	movs	r0, r3
   1c654:	4b15      	ldr	r3, [pc, #84]	; (1c6ac <prvInitialiseNewTask+0x108>)
   1c656:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c658:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c65c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c65e:	6a3b      	ldr	r3, [r7, #32]
   1c660:	2205      	movs	r2, #5
   1c662:	1ad2      	subs	r2, r2, r3
   1c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c66c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c670:	2200      	movs	r2, #0
   1c672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c676:	2250      	movs	r2, #80	; 0x50
   1c678:	2100      	movs	r1, #0
   1c67a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c67c:	683a      	ldr	r2, [r7, #0]
   1c67e:	68f9      	ldr	r1, [r7, #12]
   1c680:	693b      	ldr	r3, [r7, #16]
   1c682:	0018      	movs	r0, r3
   1c684:	4b0a      	ldr	r3, [pc, #40]	; (1c6b0 <prvInitialiseNewTask+0x10c>)
   1c686:	4798      	blx	r3
   1c688:	0002      	movs	r2, r0
   1c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c68c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c690:	2b00      	cmp	r3, #0
   1c692:	d002      	beq.n	1c69a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c696:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c69a:	46c0      	nop			; (mov r8, r8)
   1c69c:	46bd      	mov	sp, r7
   1c69e:	b006      	add	sp, #24
   1c6a0:	bd80      	pop	{r7, pc}
   1c6a2:	46c0      	nop			; (mov r8, r8)
   1c6a4:	00035377 	.word	0x00035377
   1c6a8:	3fffffff 	.word	0x3fffffff
   1c6ac:	0001a65d 	.word	0x0001a65d
   1c6b0:	0001a775 	.word	0x0001a775

0001c6b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c6b4:	b580      	push	{r7, lr}
   1c6b6:	b082      	sub	sp, #8
   1c6b8:	af00      	add	r7, sp, #0
   1c6ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c6bc:	4b60      	ldr	r3, [pc, #384]	; (1c840 <prvAddNewTaskToReadyList+0x18c>)
   1c6be:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1c6c0:	4b60      	ldr	r3, [pc, #384]	; (1c844 <prvAddNewTaskToReadyList+0x190>)
   1c6c2:	681b      	ldr	r3, [r3, #0]
   1c6c4:	1c5a      	adds	r2, r3, #1
   1c6c6:	4b5f      	ldr	r3, [pc, #380]	; (1c844 <prvAddNewTaskToReadyList+0x190>)
   1c6c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1c6ca:	4b5f      	ldr	r3, [pc, #380]	; (1c848 <prvAddNewTaskToReadyList+0x194>)
   1c6cc:	681b      	ldr	r3, [r3, #0]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d109      	bne.n	1c6e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c6d2:	4b5d      	ldr	r3, [pc, #372]	; (1c848 <prvAddNewTaskToReadyList+0x194>)
   1c6d4:	687a      	ldr	r2, [r7, #4]
   1c6d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c6d8:	4b5a      	ldr	r3, [pc, #360]	; (1c844 <prvAddNewTaskToReadyList+0x190>)
   1c6da:	681b      	ldr	r3, [r3, #0]
   1c6dc:	2b01      	cmp	r3, #1
   1c6de:	d110      	bne.n	1c702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c6e0:	4b5a      	ldr	r3, [pc, #360]	; (1c84c <prvAddNewTaskToReadyList+0x198>)
   1c6e2:	4798      	blx	r3
   1c6e4:	e00d      	b.n	1c702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c6e6:	4b5a      	ldr	r3, [pc, #360]	; (1c850 <prvAddNewTaskToReadyList+0x19c>)
   1c6e8:	681b      	ldr	r3, [r3, #0]
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	d109      	bne.n	1c702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c6ee:	4b56      	ldr	r3, [pc, #344]	; (1c848 <prvAddNewTaskToReadyList+0x194>)
   1c6f0:	681b      	ldr	r3, [r3, #0]
   1c6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6f4:	687b      	ldr	r3, [r7, #4]
   1c6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c6f8:	429a      	cmp	r2, r3
   1c6fa:	d802      	bhi.n	1c702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c6fc:	4b52      	ldr	r3, [pc, #328]	; (1c848 <prvAddNewTaskToReadyList+0x194>)
   1c6fe:	687a      	ldr	r2, [r7, #4]
   1c700:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c702:	4b54      	ldr	r3, [pc, #336]	; (1c854 <prvAddNewTaskToReadyList+0x1a0>)
   1c704:	681b      	ldr	r3, [r3, #0]
   1c706:	1c5a      	adds	r2, r3, #1
   1c708:	4b52      	ldr	r3, [pc, #328]	; (1c854 <prvAddNewTaskToReadyList+0x1a0>)
   1c70a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1c70c:	4b51      	ldr	r3, [pc, #324]	; (1c854 <prvAddNewTaskToReadyList+0x1a0>)
   1c70e:	681a      	ldr	r2, [r3, #0]
   1c710:	687b      	ldr	r3, [r7, #4]
   1c712:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1c714:	687b      	ldr	r3, [r7, #4]
   1c716:	2b00      	cmp	r3, #0
   1c718:	d052      	beq.n	1c7c0 <prvAddNewTaskToReadyList+0x10c>
   1c71a:	2003      	movs	r0, #3
   1c71c:	4b4e      	ldr	r3, [pc, #312]	; (1c858 <prvAddNewTaskToReadyList+0x1a4>)
   1c71e:	4798      	blx	r3
   1c720:	0003      	movs	r3, r0
   1c722:	b29a      	uxth	r2, r3
   1c724:	687b      	ldr	r3, [r7, #4]
   1c726:	0011      	movs	r1, r2
   1c728:	0018      	movs	r0, r3
   1c72a:	4b4c      	ldr	r3, [pc, #304]	; (1c85c <prvAddNewTaskToReadyList+0x1a8>)
   1c72c:	4798      	blx	r3
   1c72e:	4b4c      	ldr	r3, [pc, #304]	; (1c860 <prvAddNewTaskToReadyList+0x1ac>)
   1c730:	881a      	ldrh	r2, [r3, #0]
   1c732:	687b      	ldr	r3, [r7, #4]
   1c734:	0011      	movs	r1, r2
   1c736:	0018      	movs	r0, r3
   1c738:	4b4a      	ldr	r3, [pc, #296]	; (1c864 <prvAddNewTaskToReadyList+0x1b0>)
   1c73a:	4798      	blx	r3
   1c73c:	687b      	ldr	r3, [r7, #4]
   1c73e:	0018      	movs	r0, r3
   1c740:	4b49      	ldr	r3, [pc, #292]	; (1c868 <prvAddNewTaskToReadyList+0x1b4>)
   1c742:	4798      	blx	r3
   1c744:	0003      	movs	r3, r0
   1c746:	b2d9      	uxtb	r1, r3
   1c748:	687b      	ldr	r3, [r7, #4]
   1c74a:	3334      	adds	r3, #52	; 0x34
   1c74c:	001a      	movs	r2, r3
   1c74e:	2003      	movs	r0, #3
   1c750:	4b46      	ldr	r3, [pc, #280]	; (1c86c <prvAddNewTaskToReadyList+0x1b8>)
   1c752:	4798      	blx	r3
   1c754:	687b      	ldr	r3, [r7, #4]
   1c756:	0018      	movs	r0, r3
   1c758:	4b43      	ldr	r3, [pc, #268]	; (1c868 <prvAddNewTaskToReadyList+0x1b4>)
   1c75a:	4798      	blx	r3
   1c75c:	0003      	movs	r3, r0
   1c75e:	b2d9      	uxtb	r1, r3
   1c760:	687b      	ldr	r3, [r7, #4]
   1c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c764:	b2db      	uxtb	r3, r3
   1c766:	001a      	movs	r2, r3
   1c768:	2003      	movs	r0, #3
   1c76a:	4b41      	ldr	r3, [pc, #260]	; (1c870 <prvAddNewTaskToReadyList+0x1bc>)
   1c76c:	4798      	blx	r3
   1c76e:	4b41      	ldr	r3, [pc, #260]	; (1c874 <prvAddNewTaskToReadyList+0x1c0>)
   1c770:	4798      	blx	r3
   1c772:	0003      	movs	r3, r0
   1c774:	0018      	movs	r0, r3
   1c776:	4b40      	ldr	r3, [pc, #256]	; (1c878 <prvAddNewTaskToReadyList+0x1c4>)
   1c778:	4798      	blx	r3
   1c77a:	0003      	movs	r3, r0
   1c77c:	001a      	movs	r2, r3
   1c77e:	4b3f      	ldr	r3, [pc, #252]	; (1c87c <prvAddNewTaskToReadyList+0x1c8>)
   1c780:	881b      	ldrh	r3, [r3, #0]
   1c782:	4013      	ands	r3, r2
   1c784:	b29b      	uxth	r3, r3
   1c786:	2b00      	cmp	r3, #0
   1c788:	d016      	beq.n	1c7b8 <prvAddNewTaskToReadyList+0x104>
   1c78a:	687b      	ldr	r3, [r7, #4]
   1c78c:	0018      	movs	r0, r3
   1c78e:	4b3a      	ldr	r3, [pc, #232]	; (1c878 <prvAddNewTaskToReadyList+0x1c4>)
   1c790:	4798      	blx	r3
   1c792:	0003      	movs	r3, r0
   1c794:	001a      	movs	r2, r3
   1c796:	4b39      	ldr	r3, [pc, #228]	; (1c87c <prvAddNewTaskToReadyList+0x1c8>)
   1c798:	881b      	ldrh	r3, [r3, #0]
   1c79a:	4013      	ands	r3, r2
   1c79c:	b29b      	uxth	r3, r3
   1c79e:	2b00      	cmp	r3, #0
   1c7a0:	d00a      	beq.n	1c7b8 <prvAddNewTaskToReadyList+0x104>
   1c7a2:	687b      	ldr	r3, [r7, #4]
   1c7a4:	0018      	movs	r0, r3
   1c7a6:	4b30      	ldr	r3, [pc, #192]	; (1c868 <prvAddNewTaskToReadyList+0x1b4>)
   1c7a8:	4798      	blx	r3
   1c7aa:	0003      	movs	r3, r0
   1c7ac:	b2db      	uxtb	r3, r3
   1c7ae:	001a      	movs	r2, r3
   1c7b0:	2103      	movs	r1, #3
   1c7b2:	201b      	movs	r0, #27
   1c7b4:	4b32      	ldr	r3, [pc, #200]	; (1c880 <prvAddNewTaskToReadyList+0x1cc>)
   1c7b6:	4798      	blx	r3
   1c7b8:	687b      	ldr	r3, [r7, #4]
   1c7ba:	0018      	movs	r0, r3
   1c7bc:	4b31      	ldr	r3, [pc, #196]	; (1c884 <prvAddNewTaskToReadyList+0x1d0>)
   1c7be:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1c7c0:	687b      	ldr	r3, [r7, #4]
   1c7c2:	0018      	movs	r0, r3
   1c7c4:	4b2c      	ldr	r3, [pc, #176]	; (1c878 <prvAddNewTaskToReadyList+0x1c4>)
   1c7c6:	4798      	blx	r3
   1c7c8:	0003      	movs	r3, r0
   1c7ca:	001a      	movs	r2, r3
   1c7cc:	4b2b      	ldr	r3, [pc, #172]	; (1c87c <prvAddNewTaskToReadyList+0x1c8>)
   1c7ce:	881b      	ldrh	r3, [r3, #0]
   1c7d0:	4013      	ands	r3, r2
   1c7d2:	b29b      	uxth	r3, r3
   1c7d4:	2b00      	cmp	r3, #0
   1c7d6:	d008      	beq.n	1c7ea <prvAddNewTaskToReadyList+0x136>
   1c7d8:	687b      	ldr	r3, [r7, #4]
   1c7da:	0018      	movs	r0, r3
   1c7dc:	4b22      	ldr	r3, [pc, #136]	; (1c868 <prvAddNewTaskToReadyList+0x1b4>)
   1c7de:	4798      	blx	r3
   1c7e0:	0003      	movs	r3, r0
   1c7e2:	b2db      	uxtb	r3, r3
   1c7e4:	0018      	movs	r0, r3
   1c7e6:	4b28      	ldr	r3, [pc, #160]	; (1c888 <prvAddNewTaskToReadyList+0x1d4>)
   1c7e8:	4798      	blx	r3
   1c7ea:	687b      	ldr	r3, [r7, #4]
   1c7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7ee:	4b27      	ldr	r3, [pc, #156]	; (1c88c <prvAddNewTaskToReadyList+0x1d8>)
   1c7f0:	681b      	ldr	r3, [r3, #0]
   1c7f2:	429a      	cmp	r2, r3
   1c7f4:	d903      	bls.n	1c7fe <prvAddNewTaskToReadyList+0x14a>
   1c7f6:	687b      	ldr	r3, [r7, #4]
   1c7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7fa:	4b24      	ldr	r3, [pc, #144]	; (1c88c <prvAddNewTaskToReadyList+0x1d8>)
   1c7fc:	601a      	str	r2, [r3, #0]
   1c7fe:	687b      	ldr	r3, [r7, #4]
   1c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c802:	0013      	movs	r3, r2
   1c804:	009b      	lsls	r3, r3, #2
   1c806:	189b      	adds	r3, r3, r2
   1c808:	009b      	lsls	r3, r3, #2
   1c80a:	4a21      	ldr	r2, [pc, #132]	; (1c890 <prvAddNewTaskToReadyList+0x1dc>)
   1c80c:	189a      	adds	r2, r3, r2
   1c80e:	687b      	ldr	r3, [r7, #4]
   1c810:	3304      	adds	r3, #4
   1c812:	0019      	movs	r1, r3
   1c814:	0010      	movs	r0, r2
   1c816:	4b1f      	ldr	r3, [pc, #124]	; (1c894 <prvAddNewTaskToReadyList+0x1e0>)
   1c818:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c81a:	4b1f      	ldr	r3, [pc, #124]	; (1c898 <prvAddNewTaskToReadyList+0x1e4>)
   1c81c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c81e:	4b0c      	ldr	r3, [pc, #48]	; (1c850 <prvAddNewTaskToReadyList+0x19c>)
   1c820:	681b      	ldr	r3, [r3, #0]
   1c822:	2b00      	cmp	r3, #0
   1c824:	d008      	beq.n	1c838 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c826:	4b08      	ldr	r3, [pc, #32]	; (1c848 <prvAddNewTaskToReadyList+0x194>)
   1c828:	681b      	ldr	r3, [r3, #0]
   1c82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c82c:	687b      	ldr	r3, [r7, #4]
   1c82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c830:	429a      	cmp	r2, r3
   1c832:	d201      	bcs.n	1c838 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c834:	4b19      	ldr	r3, [pc, #100]	; (1c89c <prvAddNewTaskToReadyList+0x1e8>)
   1c836:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c838:	46c0      	nop			; (mov r8, r8)
   1c83a:	46bd      	mov	sp, r7
   1c83c:	b002      	add	sp, #8
   1c83e:	bd80      	pop	{r7, pc}
   1c840:	0001a8a9 	.word	0x0001a8a9
   1c844:	200041c4 	.word	0x200041c4
   1c848:	200040ec 	.word	0x200040ec
   1c84c:	0001d3d5 	.word	0x0001d3d5
   1c850:	200041d0 	.word	0x200041d0
   1c854:	200041e0 	.word	0x200041e0
   1c858:	00019e29 	.word	0x00019e29
   1c85c:	000188cd 	.word	0x000188cd
   1c860:	20000112 	.word	0x20000112
   1c864:	00018909 	.word	0x00018909
   1c868:	00018889 	.word	0x00018889
   1c86c:	0001a059 	.word	0x0001a059
   1c870:	000197bd 	.word	0x000197bd
   1c874:	00018b45 	.word	0x00018b45
   1c878:	000188a9 	.word	0x000188a9
   1c87c:	20000110 	.word	0x20000110
   1c880:	000192a1 	.word	0x000192a1
   1c884:	00018a09 	.word	0x00018a09
   1c888:	00019059 	.word	0x00019059
   1c88c:	200041cc 	.word	0x200041cc
   1c890:	200040f0 	.word	0x200040f0
   1c894:	0001a673 	.word	0x0001a673
   1c898:	0001a8cd 	.word	0x0001a8cd
   1c89c:	0001a891 	.word	0x0001a891

0001c8a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c8a0:	b580      	push	{r7, lr}
   1c8a2:	b084      	sub	sp, #16
   1c8a4:	af00      	add	r7, sp, #0
   1c8a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c8a8:	2300      	movs	r3, #0
   1c8aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c8ac:	687b      	ldr	r3, [r7, #4]
   1c8ae:	2b00      	cmp	r3, #0
   1c8b0:	d045      	beq.n	1c93e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c8b2:	4b27      	ldr	r3, [pc, #156]	; (1c950 <vTaskDelay+0xb0>)
   1c8b4:	681b      	ldr	r3, [r3, #0]
   1c8b6:	2b00      	cmp	r3, #0
   1c8b8:	d001      	beq.n	1c8be <vTaskDelay+0x1e>
   1c8ba:	b672      	cpsid	i
   1c8bc:	e7fe      	b.n	1c8bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c8be:	4b25      	ldr	r3, [pc, #148]	; (1c954 <vTaskDelay+0xb4>)
   1c8c0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c8c2:	4b25      	ldr	r3, [pc, #148]	; (1c958 <vTaskDelay+0xb8>)
   1c8c4:	681b      	ldr	r3, [r3, #0]
   1c8c6:	0018      	movs	r0, r3
   1c8c8:	4b24      	ldr	r3, [pc, #144]	; (1c95c <vTaskDelay+0xbc>)
   1c8ca:	4798      	blx	r3
   1c8cc:	0003      	movs	r3, r0
   1c8ce:	001a      	movs	r2, r3
   1c8d0:	4b23      	ldr	r3, [pc, #140]	; (1c960 <vTaskDelay+0xc0>)
   1c8d2:	881b      	ldrh	r3, [r3, #0]
   1c8d4:	4013      	ands	r3, r2
   1c8d6:	b29b      	uxth	r3, r3
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	d00e      	beq.n	1c8fa <vTaskDelay+0x5a>
   1c8dc:	687b      	ldr	r3, [r7, #4]
   1c8de:	0019      	movs	r1, r3
   1c8e0:	2089      	movs	r0, #137	; 0x89
   1c8e2:	4b20      	ldr	r3, [pc, #128]	; (1c964 <vTaskDelay+0xc4>)
   1c8e4:	4798      	blx	r3
   1c8e6:	4b1c      	ldr	r3, [pc, #112]	; (1c958 <vTaskDelay+0xb8>)
   1c8e8:	681b      	ldr	r3, [r3, #0]
   1c8ea:	0018      	movs	r0, r3
   1c8ec:	4b1e      	ldr	r3, [pc, #120]	; (1c968 <vTaskDelay+0xc8>)
   1c8ee:	4798      	blx	r3
   1c8f0:	0003      	movs	r3, r0
   1c8f2:	b2db      	uxtb	r3, r3
   1c8f4:	0018      	movs	r0, r3
   1c8f6:	4b1d      	ldr	r3, [pc, #116]	; (1c96c <vTaskDelay+0xcc>)
   1c8f8:	4798      	blx	r3
   1c8fa:	4b1d      	ldr	r3, [pc, #116]	; (1c970 <vTaskDelay+0xd0>)
   1c8fc:	4798      	blx	r3
   1c8fe:	0003      	movs	r3, r0
   1c900:	0018      	movs	r0, r3
   1c902:	4b16      	ldr	r3, [pc, #88]	; (1c95c <vTaskDelay+0xbc>)
   1c904:	4798      	blx	r3
   1c906:	0003      	movs	r3, r0
   1c908:	001a      	movs	r2, r3
   1c90a:	4b15      	ldr	r3, [pc, #84]	; (1c960 <vTaskDelay+0xc0>)
   1c90c:	881b      	ldrh	r3, [r3, #0]
   1c90e:	4013      	ands	r3, r2
   1c910:	b29b      	uxth	r3, r3
   1c912:	2b00      	cmp	r3, #0
   1c914:	d00a      	beq.n	1c92c <vTaskDelay+0x8c>
   1c916:	4b16      	ldr	r3, [pc, #88]	; (1c970 <vTaskDelay+0xd0>)
   1c918:	4798      	blx	r3
   1c91a:	0003      	movs	r3, r0
   1c91c:	0018      	movs	r0, r3
   1c91e:	4b12      	ldr	r3, [pc, #72]	; (1c968 <vTaskDelay+0xc8>)
   1c920:	4798      	blx	r3
   1c922:	0003      	movs	r3, r0
   1c924:	b2db      	uxtb	r3, r3
   1c926:	0018      	movs	r0, r3
   1c928:	4b10      	ldr	r3, [pc, #64]	; (1c96c <vTaskDelay+0xcc>)
   1c92a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c92c:	687b      	ldr	r3, [r7, #4]
   1c92e:	2100      	movs	r1, #0
   1c930:	0018      	movs	r0, r3
   1c932:	4b10      	ldr	r3, [pc, #64]	; (1c974 <vTaskDelay+0xd4>)
   1c934:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c936:	4b10      	ldr	r3, [pc, #64]	; (1c978 <vTaskDelay+0xd8>)
   1c938:	4798      	blx	r3
   1c93a:	0003      	movs	r3, r0
   1c93c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c93e:	68fb      	ldr	r3, [r7, #12]
   1c940:	2b00      	cmp	r3, #0
   1c942:	d101      	bne.n	1c948 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c944:	4b0d      	ldr	r3, [pc, #52]	; (1c97c <vTaskDelay+0xdc>)
   1c946:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c948:	46c0      	nop			; (mov r8, r8)
   1c94a:	46bd      	mov	sp, r7
   1c94c:	b004      	add	sp, #16
   1c94e:	bd80      	pop	{r7, pc}
   1c950:	200041ec 	.word	0x200041ec
   1c954:	0001cb61 	.word	0x0001cb61
   1c958:	200040ec 	.word	0x200040ec
   1c95c:	000188a9 	.word	0x000188a9
   1c960:	20000110 	.word	0x20000110
   1c964:	000195a9 	.word	0x000195a9
   1c968:	00018889 	.word	0x00018889
   1c96c:	00019a39 	.word	0x00019a39
   1c970:	00018b45 	.word	0x00018b45
   1c974:	0001dab9 	.word	0x0001dab9
   1c978:	0001cb79 	.word	0x0001cb79
   1c97c:	0001a891 	.word	0x0001a891

0001c980 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c980:	b580      	push	{r7, lr}
   1c982:	b084      	sub	sp, #16
   1c984:	af00      	add	r7, sp, #0
   1c986:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c988:	4b42      	ldr	r3, [pc, #264]	; (1ca94 <vTaskSuspend+0x114>)
   1c98a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c98c:	687b      	ldr	r3, [r7, #4]
   1c98e:	2b00      	cmp	r3, #0
   1c990:	d102      	bne.n	1c998 <vTaskSuspend+0x18>
   1c992:	4b41      	ldr	r3, [pc, #260]	; (1ca98 <vTaskSuspend+0x118>)
   1c994:	681b      	ldr	r3, [r3, #0]
   1c996:	e000      	b.n	1c99a <vTaskSuspend+0x1a>
   1c998:	687b      	ldr	r3, [r7, #4]
   1c99a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c99c:	4b3f      	ldr	r3, [pc, #252]	; (1ca9c <vTaskSuspend+0x11c>)
   1c99e:	4798      	blx	r3
   1c9a0:	0003      	movs	r3, r0
   1c9a2:	0018      	movs	r0, r3
   1c9a4:	4b3e      	ldr	r3, [pc, #248]	; (1caa0 <vTaskSuspend+0x120>)
   1c9a6:	4798      	blx	r3
   1c9a8:	0003      	movs	r3, r0
   1c9aa:	001a      	movs	r2, r3
   1c9ac:	4b3d      	ldr	r3, [pc, #244]	; (1caa4 <vTaskSuspend+0x124>)
   1c9ae:	881b      	ldrh	r3, [r3, #0]
   1c9b0:	4013      	ands	r3, r2
   1c9b2:	b29b      	uxth	r3, r3
   1c9b4:	2b00      	cmp	r3, #0
   1c9b6:	d016      	beq.n	1c9e6 <vTaskSuspend+0x66>
   1c9b8:	68fb      	ldr	r3, [r7, #12]
   1c9ba:	0018      	movs	r0, r3
   1c9bc:	4b38      	ldr	r3, [pc, #224]	; (1caa0 <vTaskSuspend+0x120>)
   1c9be:	4798      	blx	r3
   1c9c0:	0003      	movs	r3, r0
   1c9c2:	001a      	movs	r2, r3
   1c9c4:	4b37      	ldr	r3, [pc, #220]	; (1caa4 <vTaskSuspend+0x124>)
   1c9c6:	881b      	ldrh	r3, [r3, #0]
   1c9c8:	4013      	ands	r3, r2
   1c9ca:	b29b      	uxth	r3, r3
   1c9cc:	2b00      	cmp	r3, #0
   1c9ce:	d00a      	beq.n	1c9e6 <vTaskSuspend+0x66>
   1c9d0:	68fb      	ldr	r3, [r7, #12]
   1c9d2:	0018      	movs	r0, r3
   1c9d4:	4b34      	ldr	r3, [pc, #208]	; (1caa8 <vTaskSuspend+0x128>)
   1c9d6:	4798      	blx	r3
   1c9d8:	0003      	movs	r3, r0
   1c9da:	b2db      	uxtb	r3, r3
   1c9dc:	001a      	movs	r2, r3
   1c9de:	2103      	movs	r1, #3
   1c9e0:	208a      	movs	r0, #138	; 0x8a
   1c9e2:	4b32      	ldr	r3, [pc, #200]	; (1caac <vTaskSuspend+0x12c>)
   1c9e4:	4798      	blx	r3
   1c9e6:	68fb      	ldr	r3, [r7, #12]
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	4b2f      	ldr	r3, [pc, #188]	; (1caa8 <vTaskSuspend+0x128>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0003      	movs	r3, r0
   1c9f0:	b2db      	uxtb	r3, r3
   1c9f2:	0018      	movs	r0, r3
   1c9f4:	4b2e      	ldr	r3, [pc, #184]	; (1cab0 <vTaskSuspend+0x130>)
   1c9f6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c9f8:	68fb      	ldr	r3, [r7, #12]
   1c9fa:	3304      	adds	r3, #4
   1c9fc:	0018      	movs	r0, r3
   1c9fe:	4b2d      	ldr	r3, [pc, #180]	; (1cab4 <vTaskSuspend+0x134>)
   1ca00:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ca02:	68fb      	ldr	r3, [r7, #12]
   1ca04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ca06:	2b00      	cmp	r3, #0
   1ca08:	d004      	beq.n	1ca14 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ca0a:	68fb      	ldr	r3, [r7, #12]
   1ca0c:	3318      	adds	r3, #24
   1ca0e:	0018      	movs	r0, r3
   1ca10:	4b28      	ldr	r3, [pc, #160]	; (1cab4 <vTaskSuspend+0x134>)
   1ca12:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1ca14:	68fb      	ldr	r3, [r7, #12]
   1ca16:	1d1a      	adds	r2, r3, #4
   1ca18:	4b27      	ldr	r3, [pc, #156]	; (1cab8 <vTaskSuspend+0x138>)
   1ca1a:	0011      	movs	r1, r2
   1ca1c:	0018      	movs	r0, r3
   1ca1e:	4b27      	ldr	r3, [pc, #156]	; (1cabc <vTaskSuspend+0x13c>)
   1ca20:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1ca22:	68fb      	ldr	r3, [r7, #12]
   1ca24:	2250      	movs	r2, #80	; 0x50
   1ca26:	5c9b      	ldrb	r3, [r3, r2]
   1ca28:	b2db      	uxtb	r3, r3
   1ca2a:	2b01      	cmp	r3, #1
   1ca2c:	d103      	bne.n	1ca36 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ca2e:	68fb      	ldr	r3, [r7, #12]
   1ca30:	2250      	movs	r2, #80	; 0x50
   1ca32:	2100      	movs	r1, #0
   1ca34:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1ca36:	4b22      	ldr	r3, [pc, #136]	; (1cac0 <vTaskSuspend+0x140>)
   1ca38:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1ca3a:	4b22      	ldr	r3, [pc, #136]	; (1cac4 <vTaskSuspend+0x144>)
   1ca3c:	681b      	ldr	r3, [r3, #0]
   1ca3e:	2b00      	cmp	r3, #0
   1ca40:	d005      	beq.n	1ca4e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1ca42:	4b14      	ldr	r3, [pc, #80]	; (1ca94 <vTaskSuspend+0x114>)
   1ca44:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1ca46:	4b20      	ldr	r3, [pc, #128]	; (1cac8 <vTaskSuspend+0x148>)
   1ca48:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1ca4a:	4b1d      	ldr	r3, [pc, #116]	; (1cac0 <vTaskSuspend+0x140>)
   1ca4c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1ca4e:	4b12      	ldr	r3, [pc, #72]	; (1ca98 <vTaskSuspend+0x118>)
   1ca50:	681b      	ldr	r3, [r3, #0]
   1ca52:	68fa      	ldr	r2, [r7, #12]
   1ca54:	429a      	cmp	r2, r3
   1ca56:	d118      	bne.n	1ca8a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1ca58:	4b1a      	ldr	r3, [pc, #104]	; (1cac4 <vTaskSuspend+0x144>)
   1ca5a:	681b      	ldr	r3, [r3, #0]
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d008      	beq.n	1ca72 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ca60:	4b1a      	ldr	r3, [pc, #104]	; (1cacc <vTaskSuspend+0x14c>)
   1ca62:	681b      	ldr	r3, [r3, #0]
   1ca64:	2b00      	cmp	r3, #0
   1ca66:	d001      	beq.n	1ca6c <vTaskSuspend+0xec>
   1ca68:	b672      	cpsid	i
   1ca6a:	e7fe      	b.n	1ca6a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1ca6c:	4b18      	ldr	r3, [pc, #96]	; (1cad0 <vTaskSuspend+0x150>)
   1ca6e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ca70:	e00b      	b.n	1ca8a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ca72:	4b11      	ldr	r3, [pc, #68]	; (1cab8 <vTaskSuspend+0x138>)
   1ca74:	681a      	ldr	r2, [r3, #0]
   1ca76:	4b17      	ldr	r3, [pc, #92]	; (1cad4 <vTaskSuspend+0x154>)
   1ca78:	681b      	ldr	r3, [r3, #0]
   1ca7a:	429a      	cmp	r2, r3
   1ca7c:	d103      	bne.n	1ca86 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1ca7e:	4b06      	ldr	r3, [pc, #24]	; (1ca98 <vTaskSuspend+0x118>)
   1ca80:	2200      	movs	r2, #0
   1ca82:	601a      	str	r2, [r3, #0]
	}
   1ca84:	e001      	b.n	1ca8a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1ca86:	4b14      	ldr	r3, [pc, #80]	; (1cad8 <vTaskSuspend+0x158>)
   1ca88:	4798      	blx	r3
	}
   1ca8a:	46c0      	nop			; (mov r8, r8)
   1ca8c:	46bd      	mov	sp, r7
   1ca8e:	b004      	add	sp, #16
   1ca90:	bd80      	pop	{r7, pc}
   1ca92:	46c0      	nop			; (mov r8, r8)
   1ca94:	0001a8a9 	.word	0x0001a8a9
   1ca98:	200040ec 	.word	0x200040ec
   1ca9c:	00018b45 	.word	0x00018b45
   1caa0:	000188a9 	.word	0x000188a9
   1caa4:	20000110 	.word	0x20000110
   1caa8:	00018889 	.word	0x00018889
   1caac:	000192a1 	.word	0x000192a1
   1cab0:	00019a39 	.word	0x00019a39
   1cab4:	0001a723 	.word	0x0001a723
   1cab8:	200041b0 	.word	0x200041b0
   1cabc:	0001a673 	.word	0x0001a673
   1cac0:	0001a8cd 	.word	0x0001a8cd
   1cac4:	200041d0 	.word	0x200041d0
   1cac8:	0001d565 	.word	0x0001d565
   1cacc:	200041ec 	.word	0x200041ec
   1cad0:	0001a891 	.word	0x0001a891
   1cad4:	200041c4 	.word	0x200041c4
   1cad8:	0001cef5 	.word	0x0001cef5

0001cadc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1cadc:	b590      	push	{r4, r7, lr}
   1cade:	b085      	sub	sp, #20
   1cae0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1cae2:	4916      	ldr	r1, [pc, #88]	; (1cb3c <vTaskStartScheduler+0x60>)
   1cae4:	4816      	ldr	r0, [pc, #88]	; (1cb40 <vTaskStartScheduler+0x64>)
   1cae6:	4b17      	ldr	r3, [pc, #92]	; (1cb44 <vTaskStartScheduler+0x68>)
   1cae8:	9301      	str	r3, [sp, #4]
   1caea:	2300      	movs	r3, #0
   1caec:	9300      	str	r3, [sp, #0]
   1caee:	2300      	movs	r3, #0
   1caf0:	2296      	movs	r2, #150	; 0x96
   1caf2:	4c15      	ldr	r4, [pc, #84]	; (1cb48 <vTaskStartScheduler+0x6c>)
   1caf4:	47a0      	blx	r4
   1caf6:	0003      	movs	r3, r0
   1caf8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1cafa:	687b      	ldr	r3, [r7, #4]
   1cafc:	2b01      	cmp	r3, #1
   1cafe:	d103      	bne.n	1cb08 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1cb00:	4b12      	ldr	r3, [pc, #72]	; (1cb4c <vTaskStartScheduler+0x70>)
   1cb02:	4798      	blx	r3
   1cb04:	0003      	movs	r3, r0
   1cb06:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1cb08:	687b      	ldr	r3, [r7, #4]
   1cb0a:	2b01      	cmp	r3, #1
   1cb0c:	d10d      	bne.n	1cb2a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1cb0e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1cb10:	4b0f      	ldr	r3, [pc, #60]	; (1cb50 <vTaskStartScheduler+0x74>)
   1cb12:	2201      	movs	r2, #1
   1cb14:	4252      	negs	r2, r2
   1cb16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1cb18:	4b0e      	ldr	r3, [pc, #56]	; (1cb54 <vTaskStartScheduler+0x78>)
   1cb1a:	2201      	movs	r2, #1
   1cb1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1cb1e:	4b0e      	ldr	r3, [pc, #56]	; (1cb58 <vTaskStartScheduler+0x7c>)
   1cb20:	2200      	movs	r2, #0
   1cb22:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1cb24:	4b0d      	ldr	r3, [pc, #52]	; (1cb5c <vTaskStartScheduler+0x80>)
   1cb26:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1cb28:	e004      	b.n	1cb34 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1cb2a:	687b      	ldr	r3, [r7, #4]
   1cb2c:	3301      	adds	r3, #1
   1cb2e:	d101      	bne.n	1cb34 <vTaskStartScheduler+0x58>
   1cb30:	b672      	cpsid	i
   1cb32:	e7fe      	b.n	1cb32 <vTaskStartScheduler+0x56>
}
   1cb34:	46c0      	nop			; (mov r8, r8)
   1cb36:	46bd      	mov	sp, r7
   1cb38:	b003      	add	sp, #12
   1cb3a:	bd90      	pop	{r4, r7, pc}
   1cb3c:	0003aa10 	.word	0x0003aa10
   1cb40:	0001d3ad 	.word	0x0001d3ad
   1cb44:	200041e8 	.word	0x200041e8
   1cb48:	0001c505 	.word	0x0001c505
   1cb4c:	0001db6d 	.word	0x0001db6d
   1cb50:	200041e4 	.word	0x200041e4
   1cb54:	200041d0 	.word	0x200041d0
   1cb58:	200041c8 	.word	0x200041c8
   1cb5c:	0001a839 	.word	0x0001a839

0001cb60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1cb60:	b580      	push	{r7, lr}
   1cb62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1cb64:	4b03      	ldr	r3, [pc, #12]	; (1cb74 <vTaskSuspendAll+0x14>)
   1cb66:	681b      	ldr	r3, [r3, #0]
   1cb68:	1c5a      	adds	r2, r3, #1
   1cb6a:	4b02      	ldr	r3, [pc, #8]	; (1cb74 <vTaskSuspendAll+0x14>)
   1cb6c:	601a      	str	r2, [r3, #0]
}
   1cb6e:	46c0      	nop			; (mov r8, r8)
   1cb70:	46bd      	mov	sp, r7
   1cb72:	bd80      	pop	{r7, pc}
   1cb74:	200041ec 	.word	0x200041ec

0001cb78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1cb78:	b580      	push	{r7, lr}
   1cb7a:	b084      	sub	sp, #16
   1cb7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1cb7e:	2300      	movs	r3, #0
   1cb80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1cb82:	2300      	movs	r3, #0
   1cb84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1cb86:	4b45      	ldr	r3, [pc, #276]	; (1cc9c <xTaskResumeAll+0x124>)
   1cb88:	681b      	ldr	r3, [r3, #0]
   1cb8a:	2b00      	cmp	r3, #0
   1cb8c:	d101      	bne.n	1cb92 <xTaskResumeAll+0x1a>
   1cb8e:	b672      	cpsid	i
   1cb90:	e7fe      	b.n	1cb90 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1cb92:	4b43      	ldr	r3, [pc, #268]	; (1cca0 <xTaskResumeAll+0x128>)
   1cb94:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1cb96:	4b41      	ldr	r3, [pc, #260]	; (1cc9c <xTaskResumeAll+0x124>)
   1cb98:	681b      	ldr	r3, [r3, #0]
   1cb9a:	1e5a      	subs	r2, r3, #1
   1cb9c:	4b3f      	ldr	r3, [pc, #252]	; (1cc9c <xTaskResumeAll+0x124>)
   1cb9e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cba0:	4b3e      	ldr	r3, [pc, #248]	; (1cc9c <xTaskResumeAll+0x124>)
   1cba2:	681b      	ldr	r3, [r3, #0]
   1cba4:	2b00      	cmp	r3, #0
   1cba6:	d000      	beq.n	1cbaa <xTaskResumeAll+0x32>
   1cba8:	e071      	b.n	1cc8e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1cbaa:	4b3e      	ldr	r3, [pc, #248]	; (1cca4 <xTaskResumeAll+0x12c>)
   1cbac:	681b      	ldr	r3, [r3, #0]
   1cbae:	2b00      	cmp	r3, #0
   1cbb0:	d100      	bne.n	1cbb4 <xTaskResumeAll+0x3c>
   1cbb2:	e06c      	b.n	1cc8e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cbb4:	e044      	b.n	1cc40 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1cbb6:	4b3c      	ldr	r3, [pc, #240]	; (1cca8 <xTaskResumeAll+0x130>)
   1cbb8:	68db      	ldr	r3, [r3, #12]
   1cbba:	68db      	ldr	r3, [r3, #12]
   1cbbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cbbe:	68fb      	ldr	r3, [r7, #12]
   1cbc0:	3318      	adds	r3, #24
   1cbc2:	0018      	movs	r0, r3
   1cbc4:	4b39      	ldr	r3, [pc, #228]	; (1ccac <xTaskResumeAll+0x134>)
   1cbc6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cbc8:	68fb      	ldr	r3, [r7, #12]
   1cbca:	3304      	adds	r3, #4
   1cbcc:	0018      	movs	r0, r3
   1cbce:	4b37      	ldr	r3, [pc, #220]	; (1ccac <xTaskResumeAll+0x134>)
   1cbd0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1cbd2:	68fb      	ldr	r3, [r7, #12]
   1cbd4:	0018      	movs	r0, r3
   1cbd6:	4b36      	ldr	r3, [pc, #216]	; (1ccb0 <xTaskResumeAll+0x138>)
   1cbd8:	4798      	blx	r3
   1cbda:	0003      	movs	r3, r0
   1cbdc:	001a      	movs	r2, r3
   1cbde:	4b35      	ldr	r3, [pc, #212]	; (1ccb4 <xTaskResumeAll+0x13c>)
   1cbe0:	881b      	ldrh	r3, [r3, #0]
   1cbe2:	4013      	ands	r3, r2
   1cbe4:	b29b      	uxth	r3, r3
   1cbe6:	2b00      	cmp	r3, #0
   1cbe8:	d008      	beq.n	1cbfc <xTaskResumeAll+0x84>
   1cbea:	68fb      	ldr	r3, [r7, #12]
   1cbec:	0018      	movs	r0, r3
   1cbee:	4b32      	ldr	r3, [pc, #200]	; (1ccb8 <xTaskResumeAll+0x140>)
   1cbf0:	4798      	blx	r3
   1cbf2:	0003      	movs	r3, r0
   1cbf4:	b2db      	uxtb	r3, r3
   1cbf6:	0018      	movs	r0, r3
   1cbf8:	4b30      	ldr	r3, [pc, #192]	; (1ccbc <xTaskResumeAll+0x144>)
   1cbfa:	4798      	blx	r3
   1cbfc:	68fb      	ldr	r3, [r7, #12]
   1cbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc00:	4b2f      	ldr	r3, [pc, #188]	; (1ccc0 <xTaskResumeAll+0x148>)
   1cc02:	681b      	ldr	r3, [r3, #0]
   1cc04:	429a      	cmp	r2, r3
   1cc06:	d903      	bls.n	1cc10 <xTaskResumeAll+0x98>
   1cc08:	68fb      	ldr	r3, [r7, #12]
   1cc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc0c:	4b2c      	ldr	r3, [pc, #176]	; (1ccc0 <xTaskResumeAll+0x148>)
   1cc0e:	601a      	str	r2, [r3, #0]
   1cc10:	68fb      	ldr	r3, [r7, #12]
   1cc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc14:	0013      	movs	r3, r2
   1cc16:	009b      	lsls	r3, r3, #2
   1cc18:	189b      	adds	r3, r3, r2
   1cc1a:	009b      	lsls	r3, r3, #2
   1cc1c:	4a29      	ldr	r2, [pc, #164]	; (1ccc4 <xTaskResumeAll+0x14c>)
   1cc1e:	189a      	adds	r2, r3, r2
   1cc20:	68fb      	ldr	r3, [r7, #12]
   1cc22:	3304      	adds	r3, #4
   1cc24:	0019      	movs	r1, r3
   1cc26:	0010      	movs	r0, r2
   1cc28:	4b27      	ldr	r3, [pc, #156]	; (1ccc8 <xTaskResumeAll+0x150>)
   1cc2a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cc2c:	68fb      	ldr	r3, [r7, #12]
   1cc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc30:	4b26      	ldr	r3, [pc, #152]	; (1cccc <xTaskResumeAll+0x154>)
   1cc32:	681b      	ldr	r3, [r3, #0]
   1cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc36:	429a      	cmp	r2, r3
   1cc38:	d302      	bcc.n	1cc40 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1cc3a:	4b25      	ldr	r3, [pc, #148]	; (1ccd0 <xTaskResumeAll+0x158>)
   1cc3c:	2201      	movs	r2, #1
   1cc3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cc40:	4b19      	ldr	r3, [pc, #100]	; (1cca8 <xTaskResumeAll+0x130>)
   1cc42:	681b      	ldr	r3, [r3, #0]
   1cc44:	2b00      	cmp	r3, #0
   1cc46:	d1b6      	bne.n	1cbb6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1cc48:	68fb      	ldr	r3, [r7, #12]
   1cc4a:	2b00      	cmp	r3, #0
   1cc4c:	d001      	beq.n	1cc52 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1cc4e:	4b21      	ldr	r3, [pc, #132]	; (1ccd4 <xTaskResumeAll+0x15c>)
   1cc50:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1cc52:	4b21      	ldr	r3, [pc, #132]	; (1ccd8 <xTaskResumeAll+0x160>)
   1cc54:	681b      	ldr	r3, [r3, #0]
   1cc56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1cc58:	687b      	ldr	r3, [r7, #4]
   1cc5a:	2b00      	cmp	r3, #0
   1cc5c:	d00f      	beq.n	1cc7e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1cc5e:	4b1f      	ldr	r3, [pc, #124]	; (1ccdc <xTaskResumeAll+0x164>)
   1cc60:	4798      	blx	r3
   1cc62:	1e03      	subs	r3, r0, #0
   1cc64:	d002      	beq.n	1cc6c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1cc66:	4b1a      	ldr	r3, [pc, #104]	; (1ccd0 <xTaskResumeAll+0x158>)
   1cc68:	2201      	movs	r2, #1
   1cc6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1cc6c:	687b      	ldr	r3, [r7, #4]
   1cc6e:	3b01      	subs	r3, #1
   1cc70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1cc72:	687b      	ldr	r3, [r7, #4]
   1cc74:	2b00      	cmp	r3, #0
   1cc76:	d1f2      	bne.n	1cc5e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1cc78:	4b17      	ldr	r3, [pc, #92]	; (1ccd8 <xTaskResumeAll+0x160>)
   1cc7a:	2200      	movs	r2, #0
   1cc7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1cc7e:	4b14      	ldr	r3, [pc, #80]	; (1ccd0 <xTaskResumeAll+0x158>)
   1cc80:	681b      	ldr	r3, [r3, #0]
   1cc82:	2b00      	cmp	r3, #0
   1cc84:	d003      	beq.n	1cc8e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1cc86:	2301      	movs	r3, #1
   1cc88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1cc8a:	4b15      	ldr	r3, [pc, #84]	; (1cce0 <xTaskResumeAll+0x168>)
   1cc8c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1cc8e:	4b15      	ldr	r3, [pc, #84]	; (1cce4 <xTaskResumeAll+0x16c>)
   1cc90:	4798      	blx	r3

	return xAlreadyYielded;
   1cc92:	68bb      	ldr	r3, [r7, #8]
}
   1cc94:	0018      	movs	r0, r3
   1cc96:	46bd      	mov	sp, r7
   1cc98:	b004      	add	sp, #16
   1cc9a:	bd80      	pop	{r7, pc}
   1cc9c:	200041ec 	.word	0x200041ec
   1cca0:	0001a8a9 	.word	0x0001a8a9
   1cca4:	200041c4 	.word	0x200041c4
   1cca8:	20004184 	.word	0x20004184
   1ccac:	0001a723 	.word	0x0001a723
   1ccb0:	000188a9 	.word	0x000188a9
   1ccb4:	20000110 	.word	0x20000110
   1ccb8:	00018889 	.word	0x00018889
   1ccbc:	00019059 	.word	0x00019059
   1ccc0:	200041cc 	.word	0x200041cc
   1ccc4:	200040f0 	.word	0x200040f0
   1ccc8:	0001a673 	.word	0x0001a673
   1cccc:	200040ec 	.word	0x200040ec
   1ccd0:	200041d8 	.word	0x200041d8
   1ccd4:	0001d565 	.word	0x0001d565
   1ccd8:	200041d4 	.word	0x200041d4
   1ccdc:	0001cd05 	.word	0x0001cd05
   1cce0:	0001a891 	.word	0x0001a891
   1cce4:	0001a8cd 	.word	0x0001a8cd

0001cce8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1cce8:	b580      	push	{r7, lr}
   1ccea:	b082      	sub	sp, #8
   1ccec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1ccee:	4b04      	ldr	r3, [pc, #16]	; (1cd00 <xTaskGetTickCount+0x18>)
   1ccf0:	681b      	ldr	r3, [r3, #0]
   1ccf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1ccf4:	687b      	ldr	r3, [r7, #4]
}
   1ccf6:	0018      	movs	r0, r3
   1ccf8:	46bd      	mov	sp, r7
   1ccfa:	b002      	add	sp, #8
   1ccfc:	bd80      	pop	{r7, pc}
   1ccfe:	46c0      	nop			; (mov r8, r8)
   1cd00:	200041c8 	.word	0x200041c8

0001cd04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1cd04:	b580      	push	{r7, lr}
   1cd06:	b086      	sub	sp, #24
   1cd08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1cd0a:	2300      	movs	r3, #0
   1cd0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1cd0e:	4b64      	ldr	r3, [pc, #400]	; (1cea0 <xTaskIncrementTick+0x19c>)
   1cd10:	681b      	ldr	r3, [r3, #0]
   1cd12:	2b01      	cmp	r3, #1
   1cd14:	d003      	beq.n	1cd1e <xTaskIncrementTick+0x1a>
   1cd16:	4b63      	ldr	r3, [pc, #396]	; (1cea4 <xTaskIncrementTick+0x1a0>)
   1cd18:	681b      	ldr	r3, [r3, #0]
   1cd1a:	2b00      	cmp	r3, #0
   1cd1c:	d107      	bne.n	1cd2e <xTaskIncrementTick+0x2a>
   1cd1e:	4b62      	ldr	r3, [pc, #392]	; (1cea8 <xTaskIncrementTick+0x1a4>)
   1cd20:	681b      	ldr	r3, [r3, #0]
   1cd22:	1c5a      	adds	r2, r3, #1
   1cd24:	4b60      	ldr	r3, [pc, #384]	; (1cea8 <xTaskIncrementTick+0x1a4>)
   1cd26:	601a      	str	r2, [r3, #0]
   1cd28:	2000      	movs	r0, #0
   1cd2a:	4b60      	ldr	r3, [pc, #384]	; (1ceac <xTaskIncrementTick+0x1a8>)
   1cd2c:	4798      	blx	r3
   1cd2e:	4b5c      	ldr	r3, [pc, #368]	; (1cea0 <xTaskIncrementTick+0x19c>)
   1cd30:	681b      	ldr	r3, [r3, #0]
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	d106      	bne.n	1cd44 <xTaskIncrementTick+0x40>
   1cd36:	4b5e      	ldr	r3, [pc, #376]	; (1ceb0 <xTaskIncrementTick+0x1ac>)
   1cd38:	681b      	ldr	r3, [r3, #0]
   1cd3a:	3301      	adds	r3, #1
   1cd3c:	0019      	movs	r1, r3
   1cd3e:	2003      	movs	r0, #3
   1cd40:	4b5c      	ldr	r3, [pc, #368]	; (1ceb4 <xTaskIncrementTick+0x1b0>)
   1cd42:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cd44:	4b56      	ldr	r3, [pc, #344]	; (1cea0 <xTaskIncrementTick+0x19c>)
   1cd46:	681b      	ldr	r3, [r3, #0]
   1cd48:	2b00      	cmp	r3, #0
   1cd4a:	d000      	beq.n	1cd4e <xTaskIncrementTick+0x4a>
   1cd4c:	e098      	b.n	1ce80 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1cd4e:	4b58      	ldr	r3, [pc, #352]	; (1ceb0 <xTaskIncrementTick+0x1ac>)
   1cd50:	681b      	ldr	r3, [r3, #0]
   1cd52:	3301      	adds	r3, #1
   1cd54:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1cd56:	4b56      	ldr	r3, [pc, #344]	; (1ceb0 <xTaskIncrementTick+0x1ac>)
   1cd58:	693a      	ldr	r2, [r7, #16]
   1cd5a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1cd5c:	693b      	ldr	r3, [r7, #16]
   1cd5e:	2b00      	cmp	r3, #0
   1cd60:	d117      	bne.n	1cd92 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1cd62:	4b55      	ldr	r3, [pc, #340]	; (1ceb8 <xTaskIncrementTick+0x1b4>)
   1cd64:	681b      	ldr	r3, [r3, #0]
   1cd66:	681b      	ldr	r3, [r3, #0]
   1cd68:	2b00      	cmp	r3, #0
   1cd6a:	d001      	beq.n	1cd70 <xTaskIncrementTick+0x6c>
   1cd6c:	b672      	cpsid	i
   1cd6e:	e7fe      	b.n	1cd6e <xTaskIncrementTick+0x6a>
   1cd70:	4b51      	ldr	r3, [pc, #324]	; (1ceb8 <xTaskIncrementTick+0x1b4>)
   1cd72:	681b      	ldr	r3, [r3, #0]
   1cd74:	60fb      	str	r3, [r7, #12]
   1cd76:	4b51      	ldr	r3, [pc, #324]	; (1cebc <xTaskIncrementTick+0x1b8>)
   1cd78:	681a      	ldr	r2, [r3, #0]
   1cd7a:	4b4f      	ldr	r3, [pc, #316]	; (1ceb8 <xTaskIncrementTick+0x1b4>)
   1cd7c:	601a      	str	r2, [r3, #0]
   1cd7e:	4b4f      	ldr	r3, [pc, #316]	; (1cebc <xTaskIncrementTick+0x1b8>)
   1cd80:	68fa      	ldr	r2, [r7, #12]
   1cd82:	601a      	str	r2, [r3, #0]
   1cd84:	4b4e      	ldr	r3, [pc, #312]	; (1cec0 <xTaskIncrementTick+0x1bc>)
   1cd86:	681b      	ldr	r3, [r3, #0]
   1cd88:	1c5a      	adds	r2, r3, #1
   1cd8a:	4b4d      	ldr	r3, [pc, #308]	; (1cec0 <xTaskIncrementTick+0x1bc>)
   1cd8c:	601a      	str	r2, [r3, #0]
   1cd8e:	4b4d      	ldr	r3, [pc, #308]	; (1cec4 <xTaskIncrementTick+0x1c0>)
   1cd90:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1cd92:	4b4d      	ldr	r3, [pc, #308]	; (1cec8 <xTaskIncrementTick+0x1c4>)
   1cd94:	681b      	ldr	r3, [r3, #0]
   1cd96:	693a      	ldr	r2, [r7, #16]
   1cd98:	429a      	cmp	r2, r3
   1cd9a:	d363      	bcc.n	1ce64 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cd9c:	4b46      	ldr	r3, [pc, #280]	; (1ceb8 <xTaskIncrementTick+0x1b4>)
   1cd9e:	681b      	ldr	r3, [r3, #0]
   1cda0:	681b      	ldr	r3, [r3, #0]
   1cda2:	2b00      	cmp	r3, #0
   1cda4:	d101      	bne.n	1cdaa <xTaskIncrementTick+0xa6>
   1cda6:	2301      	movs	r3, #1
   1cda8:	e000      	b.n	1cdac <xTaskIncrementTick+0xa8>
   1cdaa:	2300      	movs	r3, #0
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	d004      	beq.n	1cdba <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cdb0:	4b45      	ldr	r3, [pc, #276]	; (1cec8 <xTaskIncrementTick+0x1c4>)
   1cdb2:	2201      	movs	r2, #1
   1cdb4:	4252      	negs	r2, r2
   1cdb6:	601a      	str	r2, [r3, #0]
					break;
   1cdb8:	e054      	b.n	1ce64 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cdba:	4b3f      	ldr	r3, [pc, #252]	; (1ceb8 <xTaskIncrementTick+0x1b4>)
   1cdbc:	681b      	ldr	r3, [r3, #0]
   1cdbe:	68db      	ldr	r3, [r3, #12]
   1cdc0:	68db      	ldr	r3, [r3, #12]
   1cdc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1cdc4:	68bb      	ldr	r3, [r7, #8]
   1cdc6:	685b      	ldr	r3, [r3, #4]
   1cdc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1cdca:	693a      	ldr	r2, [r7, #16]
   1cdcc:	687b      	ldr	r3, [r7, #4]
   1cdce:	429a      	cmp	r2, r3
   1cdd0:	d203      	bcs.n	1cdda <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1cdd2:	4b3d      	ldr	r3, [pc, #244]	; (1cec8 <xTaskIncrementTick+0x1c4>)
   1cdd4:	687a      	ldr	r2, [r7, #4]
   1cdd6:	601a      	str	r2, [r3, #0]
						break;
   1cdd8:	e044      	b.n	1ce64 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cdda:	68bb      	ldr	r3, [r7, #8]
   1cddc:	3304      	adds	r3, #4
   1cdde:	0018      	movs	r0, r3
   1cde0:	4b3a      	ldr	r3, [pc, #232]	; (1cecc <xTaskIncrementTick+0x1c8>)
   1cde2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cde4:	68bb      	ldr	r3, [r7, #8]
   1cde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cde8:	2b00      	cmp	r3, #0
   1cdea:	d004      	beq.n	1cdf6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cdec:	68bb      	ldr	r3, [r7, #8]
   1cdee:	3318      	adds	r3, #24
   1cdf0:	0018      	movs	r0, r3
   1cdf2:	4b36      	ldr	r3, [pc, #216]	; (1cecc <xTaskIncrementTick+0x1c8>)
   1cdf4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1cdf6:	68bb      	ldr	r3, [r7, #8]
   1cdf8:	0018      	movs	r0, r3
   1cdfa:	4b35      	ldr	r3, [pc, #212]	; (1ced0 <xTaskIncrementTick+0x1cc>)
   1cdfc:	4798      	blx	r3
   1cdfe:	0003      	movs	r3, r0
   1ce00:	001a      	movs	r2, r3
   1ce02:	4b34      	ldr	r3, [pc, #208]	; (1ced4 <xTaskIncrementTick+0x1d0>)
   1ce04:	881b      	ldrh	r3, [r3, #0]
   1ce06:	4013      	ands	r3, r2
   1ce08:	b29b      	uxth	r3, r3
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	d008      	beq.n	1ce20 <xTaskIncrementTick+0x11c>
   1ce0e:	68bb      	ldr	r3, [r7, #8]
   1ce10:	0018      	movs	r0, r3
   1ce12:	4b31      	ldr	r3, [pc, #196]	; (1ced8 <xTaskIncrementTick+0x1d4>)
   1ce14:	4798      	blx	r3
   1ce16:	0003      	movs	r3, r0
   1ce18:	b2db      	uxtb	r3, r3
   1ce1a:	0018      	movs	r0, r3
   1ce1c:	4b2f      	ldr	r3, [pc, #188]	; (1cedc <xTaskIncrementTick+0x1d8>)
   1ce1e:	4798      	blx	r3
   1ce20:	68bb      	ldr	r3, [r7, #8]
   1ce22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce24:	4b2e      	ldr	r3, [pc, #184]	; (1cee0 <xTaskIncrementTick+0x1dc>)
   1ce26:	681b      	ldr	r3, [r3, #0]
   1ce28:	429a      	cmp	r2, r3
   1ce2a:	d903      	bls.n	1ce34 <xTaskIncrementTick+0x130>
   1ce2c:	68bb      	ldr	r3, [r7, #8]
   1ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce30:	4b2b      	ldr	r3, [pc, #172]	; (1cee0 <xTaskIncrementTick+0x1dc>)
   1ce32:	601a      	str	r2, [r3, #0]
   1ce34:	68bb      	ldr	r3, [r7, #8]
   1ce36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce38:	0013      	movs	r3, r2
   1ce3a:	009b      	lsls	r3, r3, #2
   1ce3c:	189b      	adds	r3, r3, r2
   1ce3e:	009b      	lsls	r3, r3, #2
   1ce40:	4a28      	ldr	r2, [pc, #160]	; (1cee4 <xTaskIncrementTick+0x1e0>)
   1ce42:	189a      	adds	r2, r3, r2
   1ce44:	68bb      	ldr	r3, [r7, #8]
   1ce46:	3304      	adds	r3, #4
   1ce48:	0019      	movs	r1, r3
   1ce4a:	0010      	movs	r0, r2
   1ce4c:	4b26      	ldr	r3, [pc, #152]	; (1cee8 <xTaskIncrementTick+0x1e4>)
   1ce4e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ce50:	68bb      	ldr	r3, [r7, #8]
   1ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce54:	4b25      	ldr	r3, [pc, #148]	; (1ceec <xTaskIncrementTick+0x1e8>)
   1ce56:	681b      	ldr	r3, [r3, #0]
   1ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce5a:	429a      	cmp	r2, r3
   1ce5c:	d39e      	bcc.n	1cd9c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1ce5e:	2301      	movs	r3, #1
   1ce60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ce62:	e79b      	b.n	1cd9c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1ce64:	4b21      	ldr	r3, [pc, #132]	; (1ceec <xTaskIncrementTick+0x1e8>)
   1ce66:	681b      	ldr	r3, [r3, #0]
   1ce68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce6a:	491e      	ldr	r1, [pc, #120]	; (1cee4 <xTaskIncrementTick+0x1e0>)
   1ce6c:	0013      	movs	r3, r2
   1ce6e:	009b      	lsls	r3, r3, #2
   1ce70:	189b      	adds	r3, r3, r2
   1ce72:	009b      	lsls	r3, r3, #2
   1ce74:	585b      	ldr	r3, [r3, r1]
   1ce76:	2b01      	cmp	r3, #1
   1ce78:	d907      	bls.n	1ce8a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1ce7a:	2301      	movs	r3, #1
   1ce7c:	617b      	str	r3, [r7, #20]
   1ce7e:	e004      	b.n	1ce8a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1ce80:	4b08      	ldr	r3, [pc, #32]	; (1cea4 <xTaskIncrementTick+0x1a0>)
   1ce82:	681b      	ldr	r3, [r3, #0]
   1ce84:	1c5a      	adds	r2, r3, #1
   1ce86:	4b07      	ldr	r3, [pc, #28]	; (1cea4 <xTaskIncrementTick+0x1a0>)
   1ce88:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1ce8a:	4b19      	ldr	r3, [pc, #100]	; (1cef0 <xTaskIncrementTick+0x1ec>)
   1ce8c:	681b      	ldr	r3, [r3, #0]
   1ce8e:	2b00      	cmp	r3, #0
   1ce90:	d001      	beq.n	1ce96 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1ce92:	2301      	movs	r3, #1
   1ce94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1ce96:	697b      	ldr	r3, [r7, #20]
}
   1ce98:	0018      	movs	r0, r3
   1ce9a:	46bd      	mov	sp, r7
   1ce9c:	b006      	add	sp, #24
   1ce9e:	bd80      	pop	{r7, pc}
   1cea0:	200041ec 	.word	0x200041ec
   1cea4:	200041d4 	.word	0x200041d4
   1cea8:	20000d4c 	.word	0x20000d4c
   1ceac:	0001a53d 	.word	0x0001a53d
   1ceb0:	200041c8 	.word	0x200041c8
   1ceb4:	000195a9 	.word	0x000195a9
   1ceb8:	2000417c 	.word	0x2000417c
   1cebc:	20004180 	.word	0x20004180
   1cec0:	200041dc 	.word	0x200041dc
   1cec4:	0001d565 	.word	0x0001d565
   1cec8:	200041e4 	.word	0x200041e4
   1cecc:	0001a723 	.word	0x0001a723
   1ced0:	000188a9 	.word	0x000188a9
   1ced4:	20000110 	.word	0x20000110
   1ced8:	00018889 	.word	0x00018889
   1cedc:	00019059 	.word	0x00019059
   1cee0:	200041cc 	.word	0x200041cc
   1cee4:	200040f0 	.word	0x200040f0
   1cee8:	0001a673 	.word	0x0001a673
   1ceec:	200040ec 	.word	0x200040ec
   1cef0:	200041d8 	.word	0x200041d8

0001cef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1cef4:	b580      	push	{r7, lr}
   1cef6:	b082      	sub	sp, #8
   1cef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1cefa:	4b3a      	ldr	r3, [pc, #232]	; (1cfe4 <vTaskSwitchContext+0xf0>)
   1cefc:	681b      	ldr	r3, [r3, #0]
   1cefe:	2b00      	cmp	r3, #0
   1cf00:	d003      	beq.n	1cf0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1cf02:	4b39      	ldr	r3, [pc, #228]	; (1cfe8 <vTaskSwitchContext+0xf4>)
   1cf04:	2201      	movs	r2, #1
   1cf06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1cf08:	e067      	b.n	1cfda <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1cf0a:	4b37      	ldr	r3, [pc, #220]	; (1cfe8 <vTaskSwitchContext+0xf4>)
   1cf0c:	2200      	movs	r2, #0
   1cf0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1cf10:	4b36      	ldr	r3, [pc, #216]	; (1cfec <vTaskSwitchContext+0xf8>)
   1cf12:	681b      	ldr	r3, [r3, #0]
   1cf14:	681a      	ldr	r2, [r3, #0]
   1cf16:	4b35      	ldr	r3, [pc, #212]	; (1cfec <vTaskSwitchContext+0xf8>)
   1cf18:	681b      	ldr	r3, [r3, #0]
   1cf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cf1c:	429a      	cmp	r2, r3
   1cf1e:	d808      	bhi.n	1cf32 <vTaskSwitchContext+0x3e>
   1cf20:	4b32      	ldr	r3, [pc, #200]	; (1cfec <vTaskSwitchContext+0xf8>)
   1cf22:	681a      	ldr	r2, [r3, #0]
   1cf24:	4b31      	ldr	r3, [pc, #196]	; (1cfec <vTaskSwitchContext+0xf8>)
   1cf26:	681b      	ldr	r3, [r3, #0]
   1cf28:	3334      	adds	r3, #52	; 0x34
   1cf2a:	0019      	movs	r1, r3
   1cf2c:	0010      	movs	r0, r2
   1cf2e:	4b30      	ldr	r3, [pc, #192]	; (1cff0 <vTaskSwitchContext+0xfc>)
   1cf30:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1cf32:	4b30      	ldr	r3, [pc, #192]	; (1cff4 <vTaskSwitchContext+0x100>)
   1cf34:	681b      	ldr	r3, [r3, #0]
   1cf36:	607b      	str	r3, [r7, #4]
   1cf38:	e007      	b.n	1cf4a <vTaskSwitchContext+0x56>
   1cf3a:	687b      	ldr	r3, [r7, #4]
   1cf3c:	2b00      	cmp	r3, #0
   1cf3e:	d101      	bne.n	1cf44 <vTaskSwitchContext+0x50>
   1cf40:	b672      	cpsid	i
   1cf42:	e7fe      	b.n	1cf42 <vTaskSwitchContext+0x4e>
   1cf44:	687b      	ldr	r3, [r7, #4]
   1cf46:	3b01      	subs	r3, #1
   1cf48:	607b      	str	r3, [r7, #4]
   1cf4a:	492b      	ldr	r1, [pc, #172]	; (1cff8 <vTaskSwitchContext+0x104>)
   1cf4c:	687a      	ldr	r2, [r7, #4]
   1cf4e:	0013      	movs	r3, r2
   1cf50:	009b      	lsls	r3, r3, #2
   1cf52:	189b      	adds	r3, r3, r2
   1cf54:	009b      	lsls	r3, r3, #2
   1cf56:	585b      	ldr	r3, [r3, r1]
   1cf58:	2b00      	cmp	r3, #0
   1cf5a:	d0ee      	beq.n	1cf3a <vTaskSwitchContext+0x46>
   1cf5c:	687a      	ldr	r2, [r7, #4]
   1cf5e:	0013      	movs	r3, r2
   1cf60:	009b      	lsls	r3, r3, #2
   1cf62:	189b      	adds	r3, r3, r2
   1cf64:	009b      	lsls	r3, r3, #2
   1cf66:	4a24      	ldr	r2, [pc, #144]	; (1cff8 <vTaskSwitchContext+0x104>)
   1cf68:	189b      	adds	r3, r3, r2
   1cf6a:	603b      	str	r3, [r7, #0]
   1cf6c:	683b      	ldr	r3, [r7, #0]
   1cf6e:	685b      	ldr	r3, [r3, #4]
   1cf70:	685a      	ldr	r2, [r3, #4]
   1cf72:	683b      	ldr	r3, [r7, #0]
   1cf74:	605a      	str	r2, [r3, #4]
   1cf76:	683b      	ldr	r3, [r7, #0]
   1cf78:	685a      	ldr	r2, [r3, #4]
   1cf7a:	683b      	ldr	r3, [r7, #0]
   1cf7c:	3308      	adds	r3, #8
   1cf7e:	429a      	cmp	r2, r3
   1cf80:	d104      	bne.n	1cf8c <vTaskSwitchContext+0x98>
   1cf82:	683b      	ldr	r3, [r7, #0]
   1cf84:	685b      	ldr	r3, [r3, #4]
   1cf86:	685a      	ldr	r2, [r3, #4]
   1cf88:	683b      	ldr	r3, [r7, #0]
   1cf8a:	605a      	str	r2, [r3, #4]
   1cf8c:	683b      	ldr	r3, [r7, #0]
   1cf8e:	685b      	ldr	r3, [r3, #4]
   1cf90:	68da      	ldr	r2, [r3, #12]
   1cf92:	4b16      	ldr	r3, [pc, #88]	; (1cfec <vTaskSwitchContext+0xf8>)
   1cf94:	601a      	str	r2, [r3, #0]
   1cf96:	4b17      	ldr	r3, [pc, #92]	; (1cff4 <vTaskSwitchContext+0x100>)
   1cf98:	687a      	ldr	r2, [r7, #4]
   1cf9a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1cf9c:	4b17      	ldr	r3, [pc, #92]	; (1cffc <vTaskSwitchContext+0x108>)
   1cf9e:	2201      	movs	r2, #1
   1cfa0:	601a      	str	r2, [r3, #0]
   1cfa2:	4b17      	ldr	r3, [pc, #92]	; (1d000 <vTaskSwitchContext+0x10c>)
   1cfa4:	4798      	blx	r3
   1cfa6:	0003      	movs	r3, r0
   1cfa8:	0018      	movs	r0, r3
   1cfaa:	4b16      	ldr	r3, [pc, #88]	; (1d004 <vTaskSwitchContext+0x110>)
   1cfac:	4798      	blx	r3
   1cfae:	0003      	movs	r3, r0
   1cfb0:	001a      	movs	r2, r3
   1cfb2:	4b15      	ldr	r3, [pc, #84]	; (1d008 <vTaskSwitchContext+0x114>)
   1cfb4:	881b      	ldrh	r3, [r3, #0]
   1cfb6:	4013      	ands	r3, r2
   1cfb8:	b29b      	uxth	r3, r3
   1cfba:	2b00      	cmp	r3, #0
   1cfbc:	d00a      	beq.n	1cfd4 <vTaskSwitchContext+0xe0>
   1cfbe:	4b10      	ldr	r3, [pc, #64]	; (1d000 <vTaskSwitchContext+0x10c>)
   1cfc0:	4798      	blx	r3
   1cfc2:	0003      	movs	r3, r0
   1cfc4:	0018      	movs	r0, r3
   1cfc6:	4b11      	ldr	r3, [pc, #68]	; (1d00c <vTaskSwitchContext+0x118>)
   1cfc8:	4798      	blx	r3
   1cfca:	0003      	movs	r3, r0
   1cfcc:	b2db      	uxtb	r3, r3
   1cfce:	0018      	movs	r0, r3
   1cfd0:	4b0f      	ldr	r3, [pc, #60]	; (1d010 <vTaskSwitchContext+0x11c>)
   1cfd2:	4798      	blx	r3
   1cfd4:	4b09      	ldr	r3, [pc, #36]	; (1cffc <vTaskSwitchContext+0x108>)
   1cfd6:	2202      	movs	r2, #2
   1cfd8:	601a      	str	r2, [r3, #0]
}
   1cfda:	46c0      	nop			; (mov r8, r8)
   1cfdc:	46bd      	mov	sp, r7
   1cfde:	b002      	add	sp, #8
   1cfe0:	bd80      	pop	{r7, pc}
   1cfe2:	46c0      	nop			; (mov r8, r8)
   1cfe4:	200041ec 	.word	0x200041ec
   1cfe8:	200041d8 	.word	0x200041d8
   1cfec:	200040ec 	.word	0x200040ec
   1cff0:	0003301d 	.word	0x0003301d
   1cff4:	200041cc 	.word	0x200041cc
   1cff8:	200040f0 	.word	0x200040f0
   1cffc:	20000d58 	.word	0x20000d58
   1d000:	00018b45 	.word	0x00018b45
   1d004:	000188a9 	.word	0x000188a9
   1d008:	20000110 	.word	0x20000110
   1d00c:	00018889 	.word	0x00018889
   1d010:	000196a5 	.word	0x000196a5

0001d014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d014:	b580      	push	{r7, lr}
   1d016:	b082      	sub	sp, #8
   1d018:	af00      	add	r7, sp, #0
   1d01a:	6078      	str	r0, [r7, #4]
   1d01c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d01e:	687b      	ldr	r3, [r7, #4]
   1d020:	2b00      	cmp	r3, #0
   1d022:	d101      	bne.n	1d028 <vTaskPlaceOnEventList+0x14>
   1d024:	b672      	cpsid	i
   1d026:	e7fe      	b.n	1d026 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d028:	4b08      	ldr	r3, [pc, #32]	; (1d04c <vTaskPlaceOnEventList+0x38>)
   1d02a:	681b      	ldr	r3, [r3, #0]
   1d02c:	3318      	adds	r3, #24
   1d02e:	001a      	movs	r2, r3
   1d030:	687b      	ldr	r3, [r7, #4]
   1d032:	0011      	movs	r1, r2
   1d034:	0018      	movs	r0, r3
   1d036:	4b06      	ldr	r3, [pc, #24]	; (1d050 <vTaskPlaceOnEventList+0x3c>)
   1d038:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d03a:	683b      	ldr	r3, [r7, #0]
   1d03c:	2101      	movs	r1, #1
   1d03e:	0018      	movs	r0, r3
   1d040:	4b04      	ldr	r3, [pc, #16]	; (1d054 <vTaskPlaceOnEventList+0x40>)
   1d042:	4798      	blx	r3
}
   1d044:	46c0      	nop			; (mov r8, r8)
   1d046:	46bd      	mov	sp, r7
   1d048:	b002      	add	sp, #8
   1d04a:	bd80      	pop	{r7, pc}
   1d04c:	200040ec 	.word	0x200040ec
   1d050:	0001a6b7 	.word	0x0001a6b7
   1d054:	0001dab9 	.word	0x0001dab9

0001d058 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d058:	b580      	push	{r7, lr}
   1d05a:	b084      	sub	sp, #16
   1d05c:	af00      	add	r7, sp, #0
   1d05e:	60f8      	str	r0, [r7, #12]
   1d060:	60b9      	str	r1, [r7, #8]
   1d062:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d064:	68fb      	ldr	r3, [r7, #12]
   1d066:	2b00      	cmp	r3, #0
   1d068:	d101      	bne.n	1d06e <vTaskPlaceOnEventListRestricted+0x16>
   1d06a:	b672      	cpsid	i
   1d06c:	e7fe      	b.n	1d06c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d06e:	4b28      	ldr	r3, [pc, #160]	; (1d110 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d070:	681b      	ldr	r3, [r3, #0]
   1d072:	3318      	adds	r3, #24
   1d074:	001a      	movs	r2, r3
   1d076:	68fb      	ldr	r3, [r7, #12]
   1d078:	0011      	movs	r1, r2
   1d07a:	0018      	movs	r0, r3
   1d07c:	4b25      	ldr	r3, [pc, #148]	; (1d114 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d07e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d080:	687b      	ldr	r3, [r7, #4]
   1d082:	2b00      	cmp	r3, #0
   1d084:	d002      	beq.n	1d08c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d086:	2301      	movs	r3, #1
   1d088:	425b      	negs	r3, r3
   1d08a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d08c:	4b20      	ldr	r3, [pc, #128]	; (1d110 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d08e:	681b      	ldr	r3, [r3, #0]
   1d090:	0018      	movs	r0, r3
   1d092:	4b21      	ldr	r3, [pc, #132]	; (1d118 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d094:	4798      	blx	r3
   1d096:	0003      	movs	r3, r0
   1d098:	001a      	movs	r2, r3
   1d09a:	4b20      	ldr	r3, [pc, #128]	; (1d11c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d09c:	881b      	ldrh	r3, [r3, #0]
   1d09e:	4013      	ands	r3, r2
   1d0a0:	b29b      	uxth	r3, r3
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d011      	beq.n	1d0ca <vTaskPlaceOnEventListRestricted+0x72>
   1d0a6:	4b1e      	ldr	r3, [pc, #120]	; (1d120 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d0a8:	681a      	ldr	r2, [r3, #0]
   1d0aa:	68bb      	ldr	r3, [r7, #8]
   1d0ac:	18d3      	adds	r3, r2, r3
   1d0ae:	0019      	movs	r1, r3
   1d0b0:	2088      	movs	r0, #136	; 0x88
   1d0b2:	4b1c      	ldr	r3, [pc, #112]	; (1d124 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d0b4:	4798      	blx	r3
   1d0b6:	4b16      	ldr	r3, [pc, #88]	; (1d110 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d0b8:	681b      	ldr	r3, [r3, #0]
   1d0ba:	0018      	movs	r0, r3
   1d0bc:	4b1a      	ldr	r3, [pc, #104]	; (1d128 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d0be:	4798      	blx	r3
   1d0c0:	0003      	movs	r3, r0
   1d0c2:	b2db      	uxtb	r3, r3
   1d0c4:	0018      	movs	r0, r3
   1d0c6:	4b19      	ldr	r3, [pc, #100]	; (1d12c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d0c8:	4798      	blx	r3
   1d0ca:	4b19      	ldr	r3, [pc, #100]	; (1d130 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d0cc:	4798      	blx	r3
   1d0ce:	0003      	movs	r3, r0
   1d0d0:	0018      	movs	r0, r3
   1d0d2:	4b11      	ldr	r3, [pc, #68]	; (1d118 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d0d4:	4798      	blx	r3
   1d0d6:	0003      	movs	r3, r0
   1d0d8:	001a      	movs	r2, r3
   1d0da:	4b10      	ldr	r3, [pc, #64]	; (1d11c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d0dc:	881b      	ldrh	r3, [r3, #0]
   1d0de:	4013      	ands	r3, r2
   1d0e0:	b29b      	uxth	r3, r3
   1d0e2:	2b00      	cmp	r3, #0
   1d0e4:	d00a      	beq.n	1d0fc <vTaskPlaceOnEventListRestricted+0xa4>
   1d0e6:	4b12      	ldr	r3, [pc, #72]	; (1d130 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d0e8:	4798      	blx	r3
   1d0ea:	0003      	movs	r3, r0
   1d0ec:	0018      	movs	r0, r3
   1d0ee:	4b0e      	ldr	r3, [pc, #56]	; (1d128 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d0f0:	4798      	blx	r3
   1d0f2:	0003      	movs	r3, r0
   1d0f4:	b2db      	uxtb	r3, r3
   1d0f6:	0018      	movs	r0, r3
   1d0f8:	4b0c      	ldr	r3, [pc, #48]	; (1d12c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d0fa:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d0fc:	687a      	ldr	r2, [r7, #4]
   1d0fe:	68bb      	ldr	r3, [r7, #8]
   1d100:	0011      	movs	r1, r2
   1d102:	0018      	movs	r0, r3
   1d104:	4b0b      	ldr	r3, [pc, #44]	; (1d134 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d106:	4798      	blx	r3
	}
   1d108:	46c0      	nop			; (mov r8, r8)
   1d10a:	46bd      	mov	sp, r7
   1d10c:	b004      	add	sp, #16
   1d10e:	bd80      	pop	{r7, pc}
   1d110:	200040ec 	.word	0x200040ec
   1d114:	0001a673 	.word	0x0001a673
   1d118:	000188a9 	.word	0x000188a9
   1d11c:	20000110 	.word	0x20000110
   1d120:	200041c8 	.word	0x200041c8
   1d124:	000195a9 	.word	0x000195a9
   1d128:	00018889 	.word	0x00018889
   1d12c:	00019a39 	.word	0x00019a39
   1d130:	00018b45 	.word	0x00018b45
   1d134:	0001dab9 	.word	0x0001dab9

0001d138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d138:	b580      	push	{r7, lr}
   1d13a:	b084      	sub	sp, #16
   1d13c:	af00      	add	r7, sp, #0
   1d13e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d140:	687b      	ldr	r3, [r7, #4]
   1d142:	68db      	ldr	r3, [r3, #12]
   1d144:	68db      	ldr	r3, [r3, #12]
   1d146:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d148:	68bb      	ldr	r3, [r7, #8]
   1d14a:	2b00      	cmp	r3, #0
   1d14c:	d101      	bne.n	1d152 <xTaskRemoveFromEventList+0x1a>
   1d14e:	b672      	cpsid	i
   1d150:	e7fe      	b.n	1d150 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d152:	68bb      	ldr	r3, [r7, #8]
   1d154:	3318      	adds	r3, #24
   1d156:	0018      	movs	r0, r3
   1d158:	4b2a      	ldr	r3, [pc, #168]	; (1d204 <xTaskRemoveFromEventList+0xcc>)
   1d15a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d15c:	4b2a      	ldr	r3, [pc, #168]	; (1d208 <xTaskRemoveFromEventList+0xd0>)
   1d15e:	681b      	ldr	r3, [r3, #0]
   1d160:	2b00      	cmp	r3, #0
   1d162:	d132      	bne.n	1d1ca <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d164:	68bb      	ldr	r3, [r7, #8]
   1d166:	3304      	adds	r3, #4
   1d168:	0018      	movs	r0, r3
   1d16a:	4b26      	ldr	r3, [pc, #152]	; (1d204 <xTaskRemoveFromEventList+0xcc>)
   1d16c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d16e:	68bb      	ldr	r3, [r7, #8]
   1d170:	0018      	movs	r0, r3
   1d172:	4b26      	ldr	r3, [pc, #152]	; (1d20c <xTaskRemoveFromEventList+0xd4>)
   1d174:	4798      	blx	r3
   1d176:	0003      	movs	r3, r0
   1d178:	001a      	movs	r2, r3
   1d17a:	4b25      	ldr	r3, [pc, #148]	; (1d210 <xTaskRemoveFromEventList+0xd8>)
   1d17c:	881b      	ldrh	r3, [r3, #0]
   1d17e:	4013      	ands	r3, r2
   1d180:	b29b      	uxth	r3, r3
   1d182:	2b00      	cmp	r3, #0
   1d184:	d008      	beq.n	1d198 <xTaskRemoveFromEventList+0x60>
   1d186:	68bb      	ldr	r3, [r7, #8]
   1d188:	0018      	movs	r0, r3
   1d18a:	4b22      	ldr	r3, [pc, #136]	; (1d214 <xTaskRemoveFromEventList+0xdc>)
   1d18c:	4798      	blx	r3
   1d18e:	0003      	movs	r3, r0
   1d190:	b2db      	uxtb	r3, r3
   1d192:	0018      	movs	r0, r3
   1d194:	4b20      	ldr	r3, [pc, #128]	; (1d218 <xTaskRemoveFromEventList+0xe0>)
   1d196:	4798      	blx	r3
   1d198:	68bb      	ldr	r3, [r7, #8]
   1d19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d19c:	4b1f      	ldr	r3, [pc, #124]	; (1d21c <xTaskRemoveFromEventList+0xe4>)
   1d19e:	681b      	ldr	r3, [r3, #0]
   1d1a0:	429a      	cmp	r2, r3
   1d1a2:	d903      	bls.n	1d1ac <xTaskRemoveFromEventList+0x74>
   1d1a4:	68bb      	ldr	r3, [r7, #8]
   1d1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1a8:	4b1c      	ldr	r3, [pc, #112]	; (1d21c <xTaskRemoveFromEventList+0xe4>)
   1d1aa:	601a      	str	r2, [r3, #0]
   1d1ac:	68bb      	ldr	r3, [r7, #8]
   1d1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1b0:	0013      	movs	r3, r2
   1d1b2:	009b      	lsls	r3, r3, #2
   1d1b4:	189b      	adds	r3, r3, r2
   1d1b6:	009b      	lsls	r3, r3, #2
   1d1b8:	4a19      	ldr	r2, [pc, #100]	; (1d220 <xTaskRemoveFromEventList+0xe8>)
   1d1ba:	189a      	adds	r2, r3, r2
   1d1bc:	68bb      	ldr	r3, [r7, #8]
   1d1be:	3304      	adds	r3, #4
   1d1c0:	0019      	movs	r1, r3
   1d1c2:	0010      	movs	r0, r2
   1d1c4:	4b17      	ldr	r3, [pc, #92]	; (1d224 <xTaskRemoveFromEventList+0xec>)
   1d1c6:	4798      	blx	r3
   1d1c8:	e007      	b.n	1d1da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d1ca:	68bb      	ldr	r3, [r7, #8]
   1d1cc:	3318      	adds	r3, #24
   1d1ce:	001a      	movs	r2, r3
   1d1d0:	4b15      	ldr	r3, [pc, #84]	; (1d228 <xTaskRemoveFromEventList+0xf0>)
   1d1d2:	0011      	movs	r1, r2
   1d1d4:	0018      	movs	r0, r3
   1d1d6:	4b13      	ldr	r3, [pc, #76]	; (1d224 <xTaskRemoveFromEventList+0xec>)
   1d1d8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d1da:	68bb      	ldr	r3, [r7, #8]
   1d1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1de:	4b13      	ldr	r3, [pc, #76]	; (1d22c <xTaskRemoveFromEventList+0xf4>)
   1d1e0:	681b      	ldr	r3, [r3, #0]
   1d1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d1e4:	429a      	cmp	r2, r3
   1d1e6:	d905      	bls.n	1d1f4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d1e8:	2301      	movs	r3, #1
   1d1ea:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d1ec:	4b10      	ldr	r3, [pc, #64]	; (1d230 <xTaskRemoveFromEventList+0xf8>)
   1d1ee:	2201      	movs	r2, #1
   1d1f0:	601a      	str	r2, [r3, #0]
   1d1f2:	e001      	b.n	1d1f8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d1f4:	2300      	movs	r3, #0
   1d1f6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d1f8:	68fb      	ldr	r3, [r7, #12]
}
   1d1fa:	0018      	movs	r0, r3
   1d1fc:	46bd      	mov	sp, r7
   1d1fe:	b004      	add	sp, #16
   1d200:	bd80      	pop	{r7, pc}
   1d202:	46c0      	nop			; (mov r8, r8)
   1d204:	0001a723 	.word	0x0001a723
   1d208:	200041ec 	.word	0x200041ec
   1d20c:	000188a9 	.word	0x000188a9
   1d210:	20000110 	.word	0x20000110
   1d214:	00018889 	.word	0x00018889
   1d218:	00019059 	.word	0x00019059
   1d21c:	200041cc 	.word	0x200041cc
   1d220:	200040f0 	.word	0x200040f0
   1d224:	0001a673 	.word	0x0001a673
   1d228:	20004184 	.word	0x20004184
   1d22c:	200040ec 	.word	0x200040ec
   1d230:	200041d8 	.word	0x200041d8

0001d234 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d234:	b580      	push	{r7, lr}
   1d236:	b082      	sub	sp, #8
   1d238:	af00      	add	r7, sp, #0
   1d23a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d23c:	687b      	ldr	r3, [r7, #4]
   1d23e:	2b00      	cmp	r3, #0
   1d240:	d101      	bne.n	1d246 <vTaskSetTimeOutState+0x12>
   1d242:	b672      	cpsid	i
   1d244:	e7fe      	b.n	1d244 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d246:	4b08      	ldr	r3, [pc, #32]	; (1d268 <vTaskSetTimeOutState+0x34>)
   1d248:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d24a:	4b08      	ldr	r3, [pc, #32]	; (1d26c <vTaskSetTimeOutState+0x38>)
   1d24c:	681a      	ldr	r2, [r3, #0]
   1d24e:	687b      	ldr	r3, [r7, #4]
   1d250:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d252:	4b07      	ldr	r3, [pc, #28]	; (1d270 <vTaskSetTimeOutState+0x3c>)
   1d254:	681a      	ldr	r2, [r3, #0]
   1d256:	687b      	ldr	r3, [r7, #4]
   1d258:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d25a:	4b06      	ldr	r3, [pc, #24]	; (1d274 <vTaskSetTimeOutState+0x40>)
   1d25c:	4798      	blx	r3
}
   1d25e:	46c0      	nop			; (mov r8, r8)
   1d260:	46bd      	mov	sp, r7
   1d262:	b002      	add	sp, #8
   1d264:	bd80      	pop	{r7, pc}
   1d266:	46c0      	nop			; (mov r8, r8)
   1d268:	0001a8a9 	.word	0x0001a8a9
   1d26c:	200041dc 	.word	0x200041dc
   1d270:	200041c8 	.word	0x200041c8
   1d274:	0001a8cd 	.word	0x0001a8cd

0001d278 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d278:	b580      	push	{r7, lr}
   1d27a:	b082      	sub	sp, #8
   1d27c:	af00      	add	r7, sp, #0
   1d27e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d280:	4b05      	ldr	r3, [pc, #20]	; (1d298 <vTaskInternalSetTimeOutState+0x20>)
   1d282:	681a      	ldr	r2, [r3, #0]
   1d284:	687b      	ldr	r3, [r7, #4]
   1d286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d288:	4b04      	ldr	r3, [pc, #16]	; (1d29c <vTaskInternalSetTimeOutState+0x24>)
   1d28a:	681a      	ldr	r2, [r3, #0]
   1d28c:	687b      	ldr	r3, [r7, #4]
   1d28e:	605a      	str	r2, [r3, #4]
}
   1d290:	46c0      	nop			; (mov r8, r8)
   1d292:	46bd      	mov	sp, r7
   1d294:	b002      	add	sp, #8
   1d296:	bd80      	pop	{r7, pc}
   1d298:	200041dc 	.word	0x200041dc
   1d29c:	200041c8 	.word	0x200041c8

0001d2a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d2a0:	b580      	push	{r7, lr}
   1d2a2:	b086      	sub	sp, #24
   1d2a4:	af00      	add	r7, sp, #0
   1d2a6:	6078      	str	r0, [r7, #4]
   1d2a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d2aa:	687b      	ldr	r3, [r7, #4]
   1d2ac:	2b00      	cmp	r3, #0
   1d2ae:	d101      	bne.n	1d2b4 <xTaskCheckForTimeOut+0x14>
   1d2b0:	b672      	cpsid	i
   1d2b2:	e7fe      	b.n	1d2b2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d2b4:	683b      	ldr	r3, [r7, #0]
   1d2b6:	2b00      	cmp	r3, #0
   1d2b8:	d101      	bne.n	1d2be <xTaskCheckForTimeOut+0x1e>
   1d2ba:	b672      	cpsid	i
   1d2bc:	e7fe      	b.n	1d2bc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d2be:	4b1e      	ldr	r3, [pc, #120]	; (1d338 <xTaskCheckForTimeOut+0x98>)
   1d2c0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d2c2:	4b1e      	ldr	r3, [pc, #120]	; (1d33c <xTaskCheckForTimeOut+0x9c>)
   1d2c4:	681b      	ldr	r3, [r3, #0]
   1d2c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d2c8:	687b      	ldr	r3, [r7, #4]
   1d2ca:	685b      	ldr	r3, [r3, #4]
   1d2cc:	693a      	ldr	r2, [r7, #16]
   1d2ce:	1ad3      	subs	r3, r2, r3
   1d2d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d2d2:	683b      	ldr	r3, [r7, #0]
   1d2d4:	681b      	ldr	r3, [r3, #0]
   1d2d6:	3301      	adds	r3, #1
   1d2d8:	d102      	bne.n	1d2e0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d2da:	2300      	movs	r3, #0
   1d2dc:	617b      	str	r3, [r7, #20]
   1d2de:	e024      	b.n	1d32a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d2e0:	687b      	ldr	r3, [r7, #4]
   1d2e2:	681a      	ldr	r2, [r3, #0]
   1d2e4:	4b16      	ldr	r3, [pc, #88]	; (1d340 <xTaskCheckForTimeOut+0xa0>)
   1d2e6:	681b      	ldr	r3, [r3, #0]
   1d2e8:	429a      	cmp	r2, r3
   1d2ea:	d007      	beq.n	1d2fc <xTaskCheckForTimeOut+0x5c>
   1d2ec:	687b      	ldr	r3, [r7, #4]
   1d2ee:	685a      	ldr	r2, [r3, #4]
   1d2f0:	693b      	ldr	r3, [r7, #16]
   1d2f2:	429a      	cmp	r2, r3
   1d2f4:	d802      	bhi.n	1d2fc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d2f6:	2301      	movs	r3, #1
   1d2f8:	617b      	str	r3, [r7, #20]
   1d2fa:	e016      	b.n	1d32a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d2fc:	683b      	ldr	r3, [r7, #0]
   1d2fe:	681a      	ldr	r2, [r3, #0]
   1d300:	68fb      	ldr	r3, [r7, #12]
   1d302:	429a      	cmp	r2, r3
   1d304:	d90c      	bls.n	1d320 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d306:	683b      	ldr	r3, [r7, #0]
   1d308:	681a      	ldr	r2, [r3, #0]
   1d30a:	68fb      	ldr	r3, [r7, #12]
   1d30c:	1ad2      	subs	r2, r2, r3
   1d30e:	683b      	ldr	r3, [r7, #0]
   1d310:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d312:	687b      	ldr	r3, [r7, #4]
   1d314:	0018      	movs	r0, r3
   1d316:	4b0b      	ldr	r3, [pc, #44]	; (1d344 <xTaskCheckForTimeOut+0xa4>)
   1d318:	4798      	blx	r3
			xReturn = pdFALSE;
   1d31a:	2300      	movs	r3, #0
   1d31c:	617b      	str	r3, [r7, #20]
   1d31e:	e004      	b.n	1d32a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d320:	683b      	ldr	r3, [r7, #0]
   1d322:	2200      	movs	r2, #0
   1d324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d326:	2301      	movs	r3, #1
   1d328:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d32a:	4b07      	ldr	r3, [pc, #28]	; (1d348 <xTaskCheckForTimeOut+0xa8>)
   1d32c:	4798      	blx	r3

	return xReturn;
   1d32e:	697b      	ldr	r3, [r7, #20]
}
   1d330:	0018      	movs	r0, r3
   1d332:	46bd      	mov	sp, r7
   1d334:	b006      	add	sp, #24
   1d336:	bd80      	pop	{r7, pc}
   1d338:	0001a8a9 	.word	0x0001a8a9
   1d33c:	200041c8 	.word	0x200041c8
   1d340:	200041dc 	.word	0x200041dc
   1d344:	0001d279 	.word	0x0001d279
   1d348:	0001a8cd 	.word	0x0001a8cd

0001d34c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d34c:	b580      	push	{r7, lr}
   1d34e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d350:	4b02      	ldr	r3, [pc, #8]	; (1d35c <vTaskMissedYield+0x10>)
   1d352:	2201      	movs	r2, #1
   1d354:	601a      	str	r2, [r3, #0]
}
   1d356:	46c0      	nop			; (mov r8, r8)
   1d358:	46bd      	mov	sp, r7
   1d35a:	bd80      	pop	{r7, pc}
   1d35c:	200041d8 	.word	0x200041d8

0001d360 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d360:	b580      	push	{r7, lr}
   1d362:	b084      	sub	sp, #16
   1d364:	af00      	add	r7, sp, #0
   1d366:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d368:	687b      	ldr	r3, [r7, #4]
   1d36a:	2b00      	cmp	r3, #0
   1d36c:	d005      	beq.n	1d37a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d36e:	687b      	ldr	r3, [r7, #4]
   1d370:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d372:	68bb      	ldr	r3, [r7, #8]
   1d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d376:	60fb      	str	r3, [r7, #12]
   1d378:	e001      	b.n	1d37e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d37a:	2300      	movs	r3, #0
   1d37c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d37e:	68fb      	ldr	r3, [r7, #12]
	}
   1d380:	0018      	movs	r0, r3
   1d382:	46bd      	mov	sp, r7
   1d384:	b004      	add	sp, #16
   1d386:	bd80      	pop	{r7, pc}

0001d388 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d388:	b580      	push	{r7, lr}
   1d38a:	b084      	sub	sp, #16
   1d38c:	af00      	add	r7, sp, #0
   1d38e:	6078      	str	r0, [r7, #4]
   1d390:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d392:	687b      	ldr	r3, [r7, #4]
   1d394:	2b00      	cmp	r3, #0
   1d396:	d004      	beq.n	1d3a2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d398:	687b      	ldr	r3, [r7, #4]
   1d39a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d39c:	68fb      	ldr	r3, [r7, #12]
   1d39e:	683a      	ldr	r2, [r7, #0]
   1d3a0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d3a2:	46c0      	nop			; (mov r8, r8)
   1d3a4:	46bd      	mov	sp, r7
   1d3a6:	b004      	add	sp, #16
   1d3a8:	bd80      	pop	{r7, pc}
	...

0001d3ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d3ac:	b580      	push	{r7, lr}
   1d3ae:	b082      	sub	sp, #8
   1d3b0:	af00      	add	r7, sp, #0
   1d3b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d3b4:	4b04      	ldr	r3, [pc, #16]	; (1d3c8 <prvIdleTask+0x1c>)
   1d3b6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d3b8:	4b04      	ldr	r3, [pc, #16]	; (1d3cc <prvIdleTask+0x20>)
   1d3ba:	681b      	ldr	r3, [r3, #0]
   1d3bc:	2b01      	cmp	r3, #1
   1d3be:	d9f9      	bls.n	1d3b4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d3c0:	4b03      	ldr	r3, [pc, #12]	; (1d3d0 <prvIdleTask+0x24>)
   1d3c2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d3c4:	e7f6      	b.n	1d3b4 <prvIdleTask+0x8>
   1d3c6:	46c0      	nop			; (mov r8, r8)
   1d3c8:	0001d461 	.word	0x0001d461
   1d3cc:	200040f0 	.word	0x200040f0
   1d3d0:	0001a891 	.word	0x0001a891

0001d3d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d3d4:	b580      	push	{r7, lr}
   1d3d6:	b082      	sub	sp, #8
   1d3d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d3da:	2300      	movs	r3, #0
   1d3dc:	607b      	str	r3, [r7, #4]
   1d3de:	e00c      	b.n	1d3fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d3e0:	687a      	ldr	r2, [r7, #4]
   1d3e2:	0013      	movs	r3, r2
   1d3e4:	009b      	lsls	r3, r3, #2
   1d3e6:	189b      	adds	r3, r3, r2
   1d3e8:	009b      	lsls	r3, r3, #2
   1d3ea:	4a14      	ldr	r2, [pc, #80]	; (1d43c <prvInitialiseTaskLists+0x68>)
   1d3ec:	189b      	adds	r3, r3, r2
   1d3ee:	0018      	movs	r0, r3
   1d3f0:	4b13      	ldr	r3, [pc, #76]	; (1d440 <prvInitialiseTaskLists+0x6c>)
   1d3f2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d3f4:	687b      	ldr	r3, [r7, #4]
   1d3f6:	3301      	adds	r3, #1
   1d3f8:	607b      	str	r3, [r7, #4]
   1d3fa:	687b      	ldr	r3, [r7, #4]
   1d3fc:	2b04      	cmp	r3, #4
   1d3fe:	d9ef      	bls.n	1d3e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d400:	4b10      	ldr	r3, [pc, #64]	; (1d444 <prvInitialiseTaskLists+0x70>)
   1d402:	0018      	movs	r0, r3
   1d404:	4b0e      	ldr	r3, [pc, #56]	; (1d440 <prvInitialiseTaskLists+0x6c>)
   1d406:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d408:	4b0f      	ldr	r3, [pc, #60]	; (1d448 <prvInitialiseTaskLists+0x74>)
   1d40a:	0018      	movs	r0, r3
   1d40c:	4b0c      	ldr	r3, [pc, #48]	; (1d440 <prvInitialiseTaskLists+0x6c>)
   1d40e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d410:	4b0e      	ldr	r3, [pc, #56]	; (1d44c <prvInitialiseTaskLists+0x78>)
   1d412:	0018      	movs	r0, r3
   1d414:	4b0a      	ldr	r3, [pc, #40]	; (1d440 <prvInitialiseTaskLists+0x6c>)
   1d416:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d418:	4b0d      	ldr	r3, [pc, #52]	; (1d450 <prvInitialiseTaskLists+0x7c>)
   1d41a:	0018      	movs	r0, r3
   1d41c:	4b08      	ldr	r3, [pc, #32]	; (1d440 <prvInitialiseTaskLists+0x6c>)
   1d41e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d420:	4b0c      	ldr	r3, [pc, #48]	; (1d454 <prvInitialiseTaskLists+0x80>)
   1d422:	0018      	movs	r0, r3
   1d424:	4b06      	ldr	r3, [pc, #24]	; (1d440 <prvInitialiseTaskLists+0x6c>)
   1d426:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d428:	4b0b      	ldr	r3, [pc, #44]	; (1d458 <prvInitialiseTaskLists+0x84>)
   1d42a:	4a06      	ldr	r2, [pc, #24]	; (1d444 <prvInitialiseTaskLists+0x70>)
   1d42c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d42e:	4b0b      	ldr	r3, [pc, #44]	; (1d45c <prvInitialiseTaskLists+0x88>)
   1d430:	4a05      	ldr	r2, [pc, #20]	; (1d448 <prvInitialiseTaskLists+0x74>)
   1d432:	601a      	str	r2, [r3, #0]
}
   1d434:	46c0      	nop			; (mov r8, r8)
   1d436:	46bd      	mov	sp, r7
   1d438:	b002      	add	sp, #8
   1d43a:	bd80      	pop	{r7, pc}
   1d43c:	200040f0 	.word	0x200040f0
   1d440:	0001a621 	.word	0x0001a621
   1d444:	20004154 	.word	0x20004154
   1d448:	20004168 	.word	0x20004168
   1d44c:	20004184 	.word	0x20004184
   1d450:	20004198 	.word	0x20004198
   1d454:	200041b0 	.word	0x200041b0
   1d458:	2000417c 	.word	0x2000417c
   1d45c:	20004180 	.word	0x20004180

0001d460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d460:	b580      	push	{r7, lr}
   1d462:	b082      	sub	sp, #8
   1d464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d466:	e01a      	b.n	1d49e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d468:	4b11      	ldr	r3, [pc, #68]	; (1d4b0 <prvCheckTasksWaitingTermination+0x50>)
   1d46a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d46c:	4b11      	ldr	r3, [pc, #68]	; (1d4b4 <prvCheckTasksWaitingTermination+0x54>)
   1d46e:	68db      	ldr	r3, [r3, #12]
   1d470:	68db      	ldr	r3, [r3, #12]
   1d472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d474:	687b      	ldr	r3, [r7, #4]
   1d476:	3304      	adds	r3, #4
   1d478:	0018      	movs	r0, r3
   1d47a:	4b0f      	ldr	r3, [pc, #60]	; (1d4b8 <prvCheckTasksWaitingTermination+0x58>)
   1d47c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d47e:	4b0f      	ldr	r3, [pc, #60]	; (1d4bc <prvCheckTasksWaitingTermination+0x5c>)
   1d480:	681b      	ldr	r3, [r3, #0]
   1d482:	1e5a      	subs	r2, r3, #1
   1d484:	4b0d      	ldr	r3, [pc, #52]	; (1d4bc <prvCheckTasksWaitingTermination+0x5c>)
   1d486:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d488:	4b0d      	ldr	r3, [pc, #52]	; (1d4c0 <prvCheckTasksWaitingTermination+0x60>)
   1d48a:	681b      	ldr	r3, [r3, #0]
   1d48c:	1e5a      	subs	r2, r3, #1
   1d48e:	4b0c      	ldr	r3, [pc, #48]	; (1d4c0 <prvCheckTasksWaitingTermination+0x60>)
   1d490:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d492:	4b0c      	ldr	r3, [pc, #48]	; (1d4c4 <prvCheckTasksWaitingTermination+0x64>)
   1d494:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d496:	687b      	ldr	r3, [r7, #4]
   1d498:	0018      	movs	r0, r3
   1d49a:	4b0b      	ldr	r3, [pc, #44]	; (1d4c8 <prvCheckTasksWaitingTermination+0x68>)
   1d49c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d49e:	4b08      	ldr	r3, [pc, #32]	; (1d4c0 <prvCheckTasksWaitingTermination+0x60>)
   1d4a0:	681b      	ldr	r3, [r3, #0]
   1d4a2:	2b00      	cmp	r3, #0
   1d4a4:	d1e0      	bne.n	1d468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d4a6:	46c0      	nop			; (mov r8, r8)
   1d4a8:	46bd      	mov	sp, r7
   1d4aa:	b002      	add	sp, #8
   1d4ac:	bd80      	pop	{r7, pc}
   1d4ae:	46c0      	nop			; (mov r8, r8)
   1d4b0:	0001a8a9 	.word	0x0001a8a9
   1d4b4:	20004198 	.word	0x20004198
   1d4b8:	0001a723 	.word	0x0001a723
   1d4bc:	200041c4 	.word	0x200041c4
   1d4c0:	200041ac 	.word	0x200041ac
   1d4c4:	0001a8cd 	.word	0x0001a8cd
   1d4c8:	0001d53d 	.word	0x0001d53d

0001d4cc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d4cc:	b580      	push	{r7, lr}
   1d4ce:	b084      	sub	sp, #16
   1d4d0:	af00      	add	r7, sp, #0
   1d4d2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d4d4:	2300      	movs	r3, #0
   1d4d6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d4d8:	e005      	b.n	1d4e6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d4da:	687b      	ldr	r3, [r7, #4]
   1d4dc:	3301      	adds	r3, #1
   1d4de:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d4e0:	68fb      	ldr	r3, [r7, #12]
   1d4e2:	3301      	adds	r3, #1
   1d4e4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d4e6:	687b      	ldr	r3, [r7, #4]
   1d4e8:	781b      	ldrb	r3, [r3, #0]
   1d4ea:	2ba5      	cmp	r3, #165	; 0xa5
   1d4ec:	d0f5      	beq.n	1d4da <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d4ee:	68fb      	ldr	r3, [r7, #12]
   1d4f0:	089b      	lsrs	r3, r3, #2
   1d4f2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d4f4:	68fb      	ldr	r3, [r7, #12]
   1d4f6:	b29b      	uxth	r3, r3
	}
   1d4f8:	0018      	movs	r0, r3
   1d4fa:	46bd      	mov	sp, r7
   1d4fc:	b004      	add	sp, #16
   1d4fe:	bd80      	pop	{r7, pc}

0001d500 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d500:	b580      	push	{r7, lr}
   1d502:	b086      	sub	sp, #24
   1d504:	af00      	add	r7, sp, #0
   1d506:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d508:	687b      	ldr	r3, [r7, #4]
   1d50a:	2b00      	cmp	r3, #0
   1d50c:	d102      	bne.n	1d514 <uxTaskGetStackHighWaterMark+0x14>
   1d50e:	4b09      	ldr	r3, [pc, #36]	; (1d534 <uxTaskGetStackHighWaterMark+0x34>)
   1d510:	681b      	ldr	r3, [r3, #0]
   1d512:	e000      	b.n	1d516 <uxTaskGetStackHighWaterMark+0x16>
   1d514:	687b      	ldr	r3, [r7, #4]
   1d516:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d518:	697b      	ldr	r3, [r7, #20]
   1d51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d51c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d51e:	693b      	ldr	r3, [r7, #16]
   1d520:	0018      	movs	r0, r3
   1d522:	4b05      	ldr	r3, [pc, #20]	; (1d538 <uxTaskGetStackHighWaterMark+0x38>)
   1d524:	4798      	blx	r3
   1d526:	0003      	movs	r3, r0
   1d528:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d52a:	68fb      	ldr	r3, [r7, #12]
	}
   1d52c:	0018      	movs	r0, r3
   1d52e:	46bd      	mov	sp, r7
   1d530:	b006      	add	sp, #24
   1d532:	bd80      	pop	{r7, pc}
   1d534:	200040ec 	.word	0x200040ec
   1d538:	0001d4cd 	.word	0x0001d4cd

0001d53c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d53c:	b580      	push	{r7, lr}
   1d53e:	b082      	sub	sp, #8
   1d540:	af00      	add	r7, sp, #0
   1d542:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d544:	687b      	ldr	r3, [r7, #4]
   1d546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d548:	0018      	movs	r0, r3
   1d54a:	4b05      	ldr	r3, [pc, #20]	; (1d560 <prvDeleteTCB+0x24>)
   1d54c:	4798      	blx	r3
			vPortFree( pxTCB );
   1d54e:	687b      	ldr	r3, [r7, #4]
   1d550:	0018      	movs	r0, r3
   1d552:	4b03      	ldr	r3, [pc, #12]	; (1d560 <prvDeleteTCB+0x24>)
   1d554:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d556:	46c0      	nop			; (mov r8, r8)
   1d558:	46bd      	mov	sp, r7
   1d55a:	b002      	add	sp, #8
   1d55c:	bd80      	pop	{r7, pc}
   1d55e:	46c0      	nop			; (mov r8, r8)
   1d560:	0001aaa5 	.word	0x0001aaa5

0001d564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d564:	b580      	push	{r7, lr}
   1d566:	b082      	sub	sp, #8
   1d568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d56a:	4b0e      	ldr	r3, [pc, #56]	; (1d5a4 <prvResetNextTaskUnblockTime+0x40>)
   1d56c:	681b      	ldr	r3, [r3, #0]
   1d56e:	681b      	ldr	r3, [r3, #0]
   1d570:	2b00      	cmp	r3, #0
   1d572:	d101      	bne.n	1d578 <prvResetNextTaskUnblockTime+0x14>
   1d574:	2301      	movs	r3, #1
   1d576:	e000      	b.n	1d57a <prvResetNextTaskUnblockTime+0x16>
   1d578:	2300      	movs	r3, #0
   1d57a:	2b00      	cmp	r3, #0
   1d57c:	d004      	beq.n	1d588 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d57e:	4b0a      	ldr	r3, [pc, #40]	; (1d5a8 <prvResetNextTaskUnblockTime+0x44>)
   1d580:	2201      	movs	r2, #1
   1d582:	4252      	negs	r2, r2
   1d584:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d586:	e008      	b.n	1d59a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d588:	4b06      	ldr	r3, [pc, #24]	; (1d5a4 <prvResetNextTaskUnblockTime+0x40>)
   1d58a:	681b      	ldr	r3, [r3, #0]
   1d58c:	68db      	ldr	r3, [r3, #12]
   1d58e:	68db      	ldr	r3, [r3, #12]
   1d590:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d592:	687b      	ldr	r3, [r7, #4]
   1d594:	685a      	ldr	r2, [r3, #4]
   1d596:	4b04      	ldr	r3, [pc, #16]	; (1d5a8 <prvResetNextTaskUnblockTime+0x44>)
   1d598:	601a      	str	r2, [r3, #0]
}
   1d59a:	46c0      	nop			; (mov r8, r8)
   1d59c:	46bd      	mov	sp, r7
   1d59e:	b002      	add	sp, #8
   1d5a0:	bd80      	pop	{r7, pc}
   1d5a2:	46c0      	nop			; (mov r8, r8)
   1d5a4:	2000417c 	.word	0x2000417c
   1d5a8:	200041e4 	.word	0x200041e4

0001d5ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d5ac:	b580      	push	{r7, lr}
   1d5ae:	b082      	sub	sp, #8
   1d5b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d5b2:	4b04      	ldr	r3, [pc, #16]	; (1d5c4 <xTaskGetCurrentTaskHandle+0x18>)
   1d5b4:	681b      	ldr	r3, [r3, #0]
   1d5b6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d5b8:	687b      	ldr	r3, [r7, #4]
	}
   1d5ba:	0018      	movs	r0, r3
   1d5bc:	46bd      	mov	sp, r7
   1d5be:	b002      	add	sp, #8
   1d5c0:	bd80      	pop	{r7, pc}
   1d5c2:	46c0      	nop			; (mov r8, r8)
   1d5c4:	200040ec 	.word	0x200040ec

0001d5c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d5c8:	b580      	push	{r7, lr}
   1d5ca:	b082      	sub	sp, #8
   1d5cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d5ce:	4b0a      	ldr	r3, [pc, #40]	; (1d5f8 <xTaskGetSchedulerState+0x30>)
   1d5d0:	681b      	ldr	r3, [r3, #0]
   1d5d2:	2b00      	cmp	r3, #0
   1d5d4:	d102      	bne.n	1d5dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d5d6:	2301      	movs	r3, #1
   1d5d8:	607b      	str	r3, [r7, #4]
   1d5da:	e008      	b.n	1d5ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d5dc:	4b07      	ldr	r3, [pc, #28]	; (1d5fc <xTaskGetSchedulerState+0x34>)
   1d5de:	681b      	ldr	r3, [r3, #0]
   1d5e0:	2b00      	cmp	r3, #0
   1d5e2:	d102      	bne.n	1d5ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d5e4:	2302      	movs	r3, #2
   1d5e6:	607b      	str	r3, [r7, #4]
   1d5e8:	e001      	b.n	1d5ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d5ea:	2300      	movs	r3, #0
   1d5ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d5ee:	687b      	ldr	r3, [r7, #4]
	}
   1d5f0:	0018      	movs	r0, r3
   1d5f2:	46bd      	mov	sp, r7
   1d5f4:	b002      	add	sp, #8
   1d5f6:	bd80      	pop	{r7, pc}
   1d5f8:	200041d0 	.word	0x200041d0
   1d5fc:	200041ec 	.word	0x200041ec

0001d600 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d600:	b590      	push	{r4, r7, lr}
   1d602:	b085      	sub	sp, #20
   1d604:	af00      	add	r7, sp, #0
   1d606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d608:	687b      	ldr	r3, [r7, #4]
   1d60a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d60c:	2300      	movs	r3, #0
   1d60e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d610:	687b      	ldr	r3, [r7, #4]
   1d612:	2b00      	cmp	r3, #0
   1d614:	d100      	bne.n	1d618 <xTaskPriorityInherit+0x18>
   1d616:	e09d      	b.n	1d754 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d618:	68bb      	ldr	r3, [r7, #8]
   1d61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d61c:	4b50      	ldr	r3, [pc, #320]	; (1d760 <xTaskPriorityInherit+0x160>)
   1d61e:	681b      	ldr	r3, [r3, #0]
   1d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d622:	429a      	cmp	r2, r3
   1d624:	d300      	bcc.n	1d628 <xTaskPriorityInherit+0x28>
   1d626:	e08c      	b.n	1d742 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d628:	68bb      	ldr	r3, [r7, #8]
   1d62a:	699b      	ldr	r3, [r3, #24]
   1d62c:	2b00      	cmp	r3, #0
   1d62e:	db06      	blt.n	1d63e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d630:	4b4b      	ldr	r3, [pc, #300]	; (1d760 <xTaskPriorityInherit+0x160>)
   1d632:	681b      	ldr	r3, [r3, #0]
   1d634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d636:	2205      	movs	r2, #5
   1d638:	1ad2      	subs	r2, r2, r3
   1d63a:	68bb      	ldr	r3, [r7, #8]
   1d63c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d63e:	68bb      	ldr	r3, [r7, #8]
   1d640:	6959      	ldr	r1, [r3, #20]
   1d642:	68bb      	ldr	r3, [r7, #8]
   1d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d646:	0013      	movs	r3, r2
   1d648:	009b      	lsls	r3, r3, #2
   1d64a:	189b      	adds	r3, r3, r2
   1d64c:	009b      	lsls	r3, r3, #2
   1d64e:	4a45      	ldr	r2, [pc, #276]	; (1d764 <xTaskPriorityInherit+0x164>)
   1d650:	189b      	adds	r3, r3, r2
   1d652:	4299      	cmp	r1, r3
   1d654:	d101      	bne.n	1d65a <xTaskPriorityInherit+0x5a>
   1d656:	2301      	movs	r3, #1
   1d658:	e000      	b.n	1d65c <xTaskPriorityInherit+0x5c>
   1d65a:	2300      	movs	r3, #0
   1d65c:	2b00      	cmp	r3, #0
   1d65e:	d037      	beq.n	1d6d0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d660:	68bb      	ldr	r3, [r7, #8]
   1d662:	3304      	adds	r3, #4
   1d664:	0018      	movs	r0, r3
   1d666:	4b40      	ldr	r3, [pc, #256]	; (1d768 <xTaskPriorityInherit+0x168>)
   1d668:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d66a:	4b3d      	ldr	r3, [pc, #244]	; (1d760 <xTaskPriorityInherit+0x160>)
   1d66c:	681b      	ldr	r3, [r3, #0]
   1d66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d670:	68bb      	ldr	r3, [r7, #8]
   1d672:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1d674:	68bb      	ldr	r3, [r7, #8]
   1d676:	0018      	movs	r0, r3
   1d678:	4b3c      	ldr	r3, [pc, #240]	; (1d76c <xTaskPriorityInherit+0x16c>)
   1d67a:	4798      	blx	r3
   1d67c:	0003      	movs	r3, r0
   1d67e:	001a      	movs	r2, r3
   1d680:	4b3b      	ldr	r3, [pc, #236]	; (1d770 <xTaskPriorityInherit+0x170>)
   1d682:	881b      	ldrh	r3, [r3, #0]
   1d684:	4013      	ands	r3, r2
   1d686:	b29b      	uxth	r3, r3
   1d688:	2b00      	cmp	r3, #0
   1d68a:	d008      	beq.n	1d69e <xTaskPriorityInherit+0x9e>
   1d68c:	68bb      	ldr	r3, [r7, #8]
   1d68e:	0018      	movs	r0, r3
   1d690:	4b38      	ldr	r3, [pc, #224]	; (1d774 <xTaskPriorityInherit+0x174>)
   1d692:	4798      	blx	r3
   1d694:	0003      	movs	r3, r0
   1d696:	b2db      	uxtb	r3, r3
   1d698:	0018      	movs	r0, r3
   1d69a:	4b37      	ldr	r3, [pc, #220]	; (1d778 <xTaskPriorityInherit+0x178>)
   1d69c:	4798      	blx	r3
   1d69e:	68bb      	ldr	r3, [r7, #8]
   1d6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6a2:	4b36      	ldr	r3, [pc, #216]	; (1d77c <xTaskPriorityInherit+0x17c>)
   1d6a4:	681b      	ldr	r3, [r3, #0]
   1d6a6:	429a      	cmp	r2, r3
   1d6a8:	d903      	bls.n	1d6b2 <xTaskPriorityInherit+0xb2>
   1d6aa:	68bb      	ldr	r3, [r7, #8]
   1d6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6ae:	4b33      	ldr	r3, [pc, #204]	; (1d77c <xTaskPriorityInherit+0x17c>)
   1d6b0:	601a      	str	r2, [r3, #0]
   1d6b2:	68bb      	ldr	r3, [r7, #8]
   1d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6b6:	0013      	movs	r3, r2
   1d6b8:	009b      	lsls	r3, r3, #2
   1d6ba:	189b      	adds	r3, r3, r2
   1d6bc:	009b      	lsls	r3, r3, #2
   1d6be:	4a29      	ldr	r2, [pc, #164]	; (1d764 <xTaskPriorityInherit+0x164>)
   1d6c0:	189a      	adds	r2, r3, r2
   1d6c2:	68bb      	ldr	r3, [r7, #8]
   1d6c4:	3304      	adds	r3, #4
   1d6c6:	0019      	movs	r1, r3
   1d6c8:	0010      	movs	r0, r2
   1d6ca:	4b2d      	ldr	r3, [pc, #180]	; (1d780 <xTaskPriorityInherit+0x180>)
   1d6cc:	4798      	blx	r3
   1d6ce:	e004      	b.n	1d6da <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d6d0:	4b23      	ldr	r3, [pc, #140]	; (1d760 <xTaskPriorityInherit+0x160>)
   1d6d2:	681b      	ldr	r3, [r3, #0]
   1d6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6d6:	68bb      	ldr	r3, [r7, #8]
   1d6d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1d6da:	68bb      	ldr	r3, [r7, #8]
   1d6dc:	0018      	movs	r0, r3
   1d6de:	4b23      	ldr	r3, [pc, #140]	; (1d76c <xTaskPriorityInherit+0x16c>)
   1d6e0:	4798      	blx	r3
   1d6e2:	0003      	movs	r3, r0
   1d6e4:	001a      	movs	r2, r3
   1d6e6:	4b22      	ldr	r3, [pc, #136]	; (1d770 <xTaskPriorityInherit+0x170>)
   1d6e8:	881b      	ldrh	r3, [r3, #0]
   1d6ea:	4013      	ands	r3, r2
   1d6ec:	b29b      	uxth	r3, r3
   1d6ee:	2b00      	cmp	r3, #0
   1d6f0:	d024      	beq.n	1d73c <xTaskPriorityInherit+0x13c>
   1d6f2:	68bb      	ldr	r3, [r7, #8]
   1d6f4:	0018      	movs	r0, r3
   1d6f6:	4b1f      	ldr	r3, [pc, #124]	; (1d774 <xTaskPriorityInherit+0x174>)
   1d6f8:	4798      	blx	r3
   1d6fa:	0003      	movs	r3, r0
   1d6fc:	b2db      	uxtb	r3, r3
   1d6fe:	001c      	movs	r4, r3
   1d700:	68bb      	ldr	r3, [r7, #8]
   1d702:	0018      	movs	r0, r3
   1d704:	4b1b      	ldr	r3, [pc, #108]	; (1d774 <xTaskPriorityInherit+0x174>)
   1d706:	4798      	blx	r3
   1d708:	0003      	movs	r3, r0
   1d70a:	b2db      	uxtb	r3, r3
   1d70c:	0019      	movs	r1, r3
   1d70e:	2003      	movs	r0, #3
   1d710:	4b1c      	ldr	r3, [pc, #112]	; (1d784 <xTaskPriorityInherit+0x184>)
   1d712:	4798      	blx	r3
   1d714:	0003      	movs	r3, r0
   1d716:	0022      	movs	r2, r4
   1d718:	2103      	movs	r1, #3
   1d71a:	208e      	movs	r0, #142	; 0x8e
   1d71c:	4c1a      	ldr	r4, [pc, #104]	; (1d788 <xTaskPriorityInherit+0x188>)
   1d71e:	47a0      	blx	r4
   1d720:	68bb      	ldr	r3, [r7, #8]
   1d722:	0018      	movs	r0, r3
   1d724:	4b13      	ldr	r3, [pc, #76]	; (1d774 <xTaskPriorityInherit+0x174>)
   1d726:	4798      	blx	r3
   1d728:	0003      	movs	r3, r0
   1d72a:	b2d9      	uxtb	r1, r3
   1d72c:	4b0c      	ldr	r3, [pc, #48]	; (1d760 <xTaskPriorityInherit+0x160>)
   1d72e:	681b      	ldr	r3, [r3, #0]
   1d730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d732:	b2db      	uxtb	r3, r3
   1d734:	001a      	movs	r2, r3
   1d736:	2003      	movs	r0, #3
   1d738:	4b14      	ldr	r3, [pc, #80]	; (1d78c <xTaskPriorityInherit+0x18c>)
   1d73a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1d73c:	2301      	movs	r3, #1
   1d73e:	60fb      	str	r3, [r7, #12]
   1d740:	e008      	b.n	1d754 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1d742:	68bb      	ldr	r3, [r7, #8]
   1d744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d746:	4b06      	ldr	r3, [pc, #24]	; (1d760 <xTaskPriorityInherit+0x160>)
   1d748:	681b      	ldr	r3, [r3, #0]
   1d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d74c:	429a      	cmp	r2, r3
   1d74e:	d201      	bcs.n	1d754 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1d750:	2301      	movs	r3, #1
   1d752:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d754:	68fb      	ldr	r3, [r7, #12]
	}
   1d756:	0018      	movs	r0, r3
   1d758:	46bd      	mov	sp, r7
   1d75a:	b005      	add	sp, #20
   1d75c:	bd90      	pop	{r4, r7, pc}
   1d75e:	46c0      	nop			; (mov r8, r8)
   1d760:	200040ec 	.word	0x200040ec
   1d764:	200040f0 	.word	0x200040f0
   1d768:	0001a723 	.word	0x0001a723
   1d76c:	000188a9 	.word	0x000188a9
   1d770:	20000110 	.word	0x20000110
   1d774:	00018889 	.word	0x00018889
   1d778:	00019059 	.word	0x00019059
   1d77c:	200041cc 	.word	0x200041cc
   1d780:	0001a673 	.word	0x0001a673
   1d784:	00019861 	.word	0x00019861
   1d788:	000193d1 	.word	0x000193d1
   1d78c:	000197bd 	.word	0x000197bd

0001d790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1d790:	b590      	push	{r4, r7, lr}
   1d792:	b085      	sub	sp, #20
   1d794:	af00      	add	r7, sp, #0
   1d796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d798:	687b      	ldr	r3, [r7, #4]
   1d79a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d79c:	2300      	movs	r3, #0
   1d79e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d7a0:	687b      	ldr	r3, [r7, #4]
   1d7a2:	2b00      	cmp	r3, #0
   1d7a4:	d100      	bne.n	1d7a8 <xTaskPriorityDisinherit+0x18>
   1d7a6:	e089      	b.n	1d8bc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1d7a8:	4b47      	ldr	r3, [pc, #284]	; (1d8c8 <xTaskPriorityDisinherit+0x138>)
   1d7aa:	681b      	ldr	r3, [r3, #0]
   1d7ac:	68ba      	ldr	r2, [r7, #8]
   1d7ae:	429a      	cmp	r2, r3
   1d7b0:	d001      	beq.n	1d7b6 <xTaskPriorityDisinherit+0x26>
   1d7b2:	b672      	cpsid	i
   1d7b4:	e7fe      	b.n	1d7b4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1d7b6:	68bb      	ldr	r3, [r7, #8]
   1d7b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d7ba:	2b00      	cmp	r3, #0
   1d7bc:	d101      	bne.n	1d7c2 <xTaskPriorityDisinherit+0x32>
   1d7be:	b672      	cpsid	i
   1d7c0:	e7fe      	b.n	1d7c0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1d7c2:	68bb      	ldr	r3, [r7, #8]
   1d7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d7c6:	1e5a      	subs	r2, r3, #1
   1d7c8:	68bb      	ldr	r3, [r7, #8]
   1d7ca:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1d7cc:	68bb      	ldr	r3, [r7, #8]
   1d7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d7d0:	68bb      	ldr	r3, [r7, #8]
   1d7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d7d4:	429a      	cmp	r2, r3
   1d7d6:	d071      	beq.n	1d8bc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1d7d8:	68bb      	ldr	r3, [r7, #8]
   1d7da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d7dc:	2b00      	cmp	r3, #0
   1d7de:	d16d      	bne.n	1d8bc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d7e0:	68bb      	ldr	r3, [r7, #8]
   1d7e2:	3304      	adds	r3, #4
   1d7e4:	0018      	movs	r0, r3
   1d7e6:	4b39      	ldr	r3, [pc, #228]	; (1d8cc <xTaskPriorityDisinherit+0x13c>)
   1d7e8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d7ea:	68bb      	ldr	r3, [r7, #8]
   1d7ec:	0018      	movs	r0, r3
   1d7ee:	4b38      	ldr	r3, [pc, #224]	; (1d8d0 <xTaskPriorityDisinherit+0x140>)
   1d7f0:	4798      	blx	r3
   1d7f2:	0003      	movs	r3, r0
   1d7f4:	001a      	movs	r2, r3
   1d7f6:	4b37      	ldr	r3, [pc, #220]	; (1d8d4 <xTaskPriorityDisinherit+0x144>)
   1d7f8:	881b      	ldrh	r3, [r3, #0]
   1d7fa:	4013      	ands	r3, r2
   1d7fc:	b29b      	uxth	r3, r3
   1d7fe:	2b00      	cmp	r3, #0
   1d800:	d023      	beq.n	1d84a <xTaskPriorityDisinherit+0xba>
   1d802:	68bb      	ldr	r3, [r7, #8]
   1d804:	0018      	movs	r0, r3
   1d806:	4b34      	ldr	r3, [pc, #208]	; (1d8d8 <xTaskPriorityDisinherit+0x148>)
   1d808:	4798      	blx	r3
   1d80a:	0003      	movs	r3, r0
   1d80c:	b2db      	uxtb	r3, r3
   1d80e:	001c      	movs	r4, r3
   1d810:	68bb      	ldr	r3, [r7, #8]
   1d812:	0018      	movs	r0, r3
   1d814:	4b30      	ldr	r3, [pc, #192]	; (1d8d8 <xTaskPriorityDisinherit+0x148>)
   1d816:	4798      	blx	r3
   1d818:	0003      	movs	r3, r0
   1d81a:	b2db      	uxtb	r3, r3
   1d81c:	0019      	movs	r1, r3
   1d81e:	2003      	movs	r0, #3
   1d820:	4b2e      	ldr	r3, [pc, #184]	; (1d8dc <xTaskPriorityDisinherit+0x14c>)
   1d822:	4798      	blx	r3
   1d824:	0003      	movs	r3, r0
   1d826:	0022      	movs	r2, r4
   1d828:	2103      	movs	r1, #3
   1d82a:	208f      	movs	r0, #143	; 0x8f
   1d82c:	4c2c      	ldr	r4, [pc, #176]	; (1d8e0 <xTaskPriorityDisinherit+0x150>)
   1d82e:	47a0      	blx	r4
   1d830:	68bb      	ldr	r3, [r7, #8]
   1d832:	0018      	movs	r0, r3
   1d834:	4b28      	ldr	r3, [pc, #160]	; (1d8d8 <xTaskPriorityDisinherit+0x148>)
   1d836:	4798      	blx	r3
   1d838:	0003      	movs	r3, r0
   1d83a:	b2d9      	uxtb	r1, r3
   1d83c:	68bb      	ldr	r3, [r7, #8]
   1d83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d840:	b2db      	uxtb	r3, r3
   1d842:	001a      	movs	r2, r3
   1d844:	2003      	movs	r0, #3
   1d846:	4b27      	ldr	r3, [pc, #156]	; (1d8e4 <xTaskPriorityDisinherit+0x154>)
   1d848:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d84a:	68bb      	ldr	r3, [r7, #8]
   1d84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d84e:	68bb      	ldr	r3, [r7, #8]
   1d850:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d852:	68bb      	ldr	r3, [r7, #8]
   1d854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d856:	2205      	movs	r2, #5
   1d858:	1ad2      	subs	r2, r2, r3
   1d85a:	68bb      	ldr	r3, [r7, #8]
   1d85c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d85e:	68bb      	ldr	r3, [r7, #8]
   1d860:	0018      	movs	r0, r3
   1d862:	4b1b      	ldr	r3, [pc, #108]	; (1d8d0 <xTaskPriorityDisinherit+0x140>)
   1d864:	4798      	blx	r3
   1d866:	0003      	movs	r3, r0
   1d868:	001a      	movs	r2, r3
   1d86a:	4b1a      	ldr	r3, [pc, #104]	; (1d8d4 <xTaskPriorityDisinherit+0x144>)
   1d86c:	881b      	ldrh	r3, [r3, #0]
   1d86e:	4013      	ands	r3, r2
   1d870:	b29b      	uxth	r3, r3
   1d872:	2b00      	cmp	r3, #0
   1d874:	d008      	beq.n	1d888 <xTaskPriorityDisinherit+0xf8>
   1d876:	68bb      	ldr	r3, [r7, #8]
   1d878:	0018      	movs	r0, r3
   1d87a:	4b17      	ldr	r3, [pc, #92]	; (1d8d8 <xTaskPriorityDisinherit+0x148>)
   1d87c:	4798      	blx	r3
   1d87e:	0003      	movs	r3, r0
   1d880:	b2db      	uxtb	r3, r3
   1d882:	0018      	movs	r0, r3
   1d884:	4b18      	ldr	r3, [pc, #96]	; (1d8e8 <xTaskPriorityDisinherit+0x158>)
   1d886:	4798      	blx	r3
   1d888:	68bb      	ldr	r3, [r7, #8]
   1d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d88c:	4b17      	ldr	r3, [pc, #92]	; (1d8ec <xTaskPriorityDisinherit+0x15c>)
   1d88e:	681b      	ldr	r3, [r3, #0]
   1d890:	429a      	cmp	r2, r3
   1d892:	d903      	bls.n	1d89c <xTaskPriorityDisinherit+0x10c>
   1d894:	68bb      	ldr	r3, [r7, #8]
   1d896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d898:	4b14      	ldr	r3, [pc, #80]	; (1d8ec <xTaskPriorityDisinherit+0x15c>)
   1d89a:	601a      	str	r2, [r3, #0]
   1d89c:	68bb      	ldr	r3, [r7, #8]
   1d89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8a0:	0013      	movs	r3, r2
   1d8a2:	009b      	lsls	r3, r3, #2
   1d8a4:	189b      	adds	r3, r3, r2
   1d8a6:	009b      	lsls	r3, r3, #2
   1d8a8:	4a11      	ldr	r2, [pc, #68]	; (1d8f0 <xTaskPriorityDisinherit+0x160>)
   1d8aa:	189a      	adds	r2, r3, r2
   1d8ac:	68bb      	ldr	r3, [r7, #8]
   1d8ae:	3304      	adds	r3, #4
   1d8b0:	0019      	movs	r1, r3
   1d8b2:	0010      	movs	r0, r2
   1d8b4:	4b0f      	ldr	r3, [pc, #60]	; (1d8f4 <xTaskPriorityDisinherit+0x164>)
   1d8b6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d8b8:	2301      	movs	r3, #1
   1d8ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d8bc:	68fb      	ldr	r3, [r7, #12]
	}
   1d8be:	0018      	movs	r0, r3
   1d8c0:	46bd      	mov	sp, r7
   1d8c2:	b005      	add	sp, #20
   1d8c4:	bd90      	pop	{r4, r7, pc}
   1d8c6:	46c0      	nop			; (mov r8, r8)
   1d8c8:	200040ec 	.word	0x200040ec
   1d8cc:	0001a723 	.word	0x0001a723
   1d8d0:	000188a9 	.word	0x000188a9
   1d8d4:	20000110 	.word	0x20000110
   1d8d8:	00018889 	.word	0x00018889
   1d8dc:	00019861 	.word	0x00019861
   1d8e0:	000193d1 	.word	0x000193d1
   1d8e4:	000197bd 	.word	0x000197bd
   1d8e8:	00019059 	.word	0x00019059
   1d8ec:	200041cc 	.word	0x200041cc
   1d8f0:	200040f0 	.word	0x200040f0
   1d8f4:	0001a673 	.word	0x0001a673

0001d8f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d8f8:	b590      	push	{r4, r7, lr}
   1d8fa:	b087      	sub	sp, #28
   1d8fc:	af00      	add	r7, sp, #0
   1d8fe:	6078      	str	r0, [r7, #4]
   1d900:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d902:	687b      	ldr	r3, [r7, #4]
   1d904:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d906:	2301      	movs	r3, #1
   1d908:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d90a:	687b      	ldr	r3, [r7, #4]
   1d90c:	2b00      	cmp	r3, #0
   1d90e:	d100      	bne.n	1d912 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d910:	e0a4      	b.n	1da5c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d912:	693b      	ldr	r3, [r7, #16]
   1d914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d916:	2b00      	cmp	r3, #0
   1d918:	d101      	bne.n	1d91e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d91a:	b672      	cpsid	i
   1d91c:	e7fe      	b.n	1d91c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d91e:	693b      	ldr	r3, [r7, #16]
   1d920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d922:	683b      	ldr	r3, [r7, #0]
   1d924:	429a      	cmp	r2, r3
   1d926:	d202      	bcs.n	1d92e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d928:	683b      	ldr	r3, [r7, #0]
   1d92a:	617b      	str	r3, [r7, #20]
   1d92c:	e002      	b.n	1d934 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d92e:	693b      	ldr	r3, [r7, #16]
   1d930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d932:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d934:	693b      	ldr	r3, [r7, #16]
   1d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d938:	697b      	ldr	r3, [r7, #20]
   1d93a:	429a      	cmp	r2, r3
   1d93c:	d100      	bne.n	1d940 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d93e:	e08d      	b.n	1da5c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d940:	693b      	ldr	r3, [r7, #16]
   1d942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d944:	68fb      	ldr	r3, [r7, #12]
   1d946:	429a      	cmp	r2, r3
   1d948:	d000      	beq.n	1d94c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d94a:	e087      	b.n	1da5c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d94c:	4b45      	ldr	r3, [pc, #276]	; (1da64 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d94e:	681b      	ldr	r3, [r3, #0]
   1d950:	693a      	ldr	r2, [r7, #16]
   1d952:	429a      	cmp	r2, r3
   1d954:	d101      	bne.n	1d95a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d956:	b672      	cpsid	i
   1d958:	e7fe      	b.n	1d958 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d95a:	693b      	ldr	r3, [r7, #16]
   1d95c:	0018      	movs	r0, r3
   1d95e:	4b42      	ldr	r3, [pc, #264]	; (1da68 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d960:	4798      	blx	r3
   1d962:	0003      	movs	r3, r0
   1d964:	001a      	movs	r2, r3
   1d966:	4b41      	ldr	r3, [pc, #260]	; (1da6c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d968:	881b      	ldrh	r3, [r3, #0]
   1d96a:	4013      	ands	r3, r2
   1d96c:	b29b      	uxth	r3, r3
   1d96e:	2b00      	cmp	r3, #0
   1d970:	d023      	beq.n	1d9ba <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d972:	693b      	ldr	r3, [r7, #16]
   1d974:	0018      	movs	r0, r3
   1d976:	4b3e      	ldr	r3, [pc, #248]	; (1da70 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d978:	4798      	blx	r3
   1d97a:	0003      	movs	r3, r0
   1d97c:	b2db      	uxtb	r3, r3
   1d97e:	001c      	movs	r4, r3
   1d980:	693b      	ldr	r3, [r7, #16]
   1d982:	0018      	movs	r0, r3
   1d984:	4b3a      	ldr	r3, [pc, #232]	; (1da70 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d986:	4798      	blx	r3
   1d988:	0003      	movs	r3, r0
   1d98a:	b2db      	uxtb	r3, r3
   1d98c:	0019      	movs	r1, r3
   1d98e:	2003      	movs	r0, #3
   1d990:	4b38      	ldr	r3, [pc, #224]	; (1da74 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d992:	4798      	blx	r3
   1d994:	0003      	movs	r3, r0
   1d996:	0022      	movs	r2, r4
   1d998:	2103      	movs	r1, #3
   1d99a:	208f      	movs	r0, #143	; 0x8f
   1d99c:	4c36      	ldr	r4, [pc, #216]	; (1da78 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d99e:	47a0      	blx	r4
   1d9a0:	693b      	ldr	r3, [r7, #16]
   1d9a2:	0018      	movs	r0, r3
   1d9a4:	4b32      	ldr	r3, [pc, #200]	; (1da70 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d9a6:	4798      	blx	r3
   1d9a8:	0003      	movs	r3, r0
   1d9aa:	b2d9      	uxtb	r1, r3
   1d9ac:	693b      	ldr	r3, [r7, #16]
   1d9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d9b0:	b2db      	uxtb	r3, r3
   1d9b2:	001a      	movs	r2, r3
   1d9b4:	2003      	movs	r0, #3
   1d9b6:	4b31      	ldr	r3, [pc, #196]	; (1da7c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d9b8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d9ba:	693b      	ldr	r3, [r7, #16]
   1d9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d9be:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d9c0:	693b      	ldr	r3, [r7, #16]
   1d9c2:	697a      	ldr	r2, [r7, #20]
   1d9c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d9c6:	693b      	ldr	r3, [r7, #16]
   1d9c8:	699b      	ldr	r3, [r3, #24]
   1d9ca:	2b00      	cmp	r3, #0
   1d9cc:	db04      	blt.n	1d9d8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d9ce:	697b      	ldr	r3, [r7, #20]
   1d9d0:	2205      	movs	r2, #5
   1d9d2:	1ad2      	subs	r2, r2, r3
   1d9d4:	693b      	ldr	r3, [r7, #16]
   1d9d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d9d8:	693b      	ldr	r3, [r7, #16]
   1d9da:	6959      	ldr	r1, [r3, #20]
   1d9dc:	68ba      	ldr	r2, [r7, #8]
   1d9de:	0013      	movs	r3, r2
   1d9e0:	009b      	lsls	r3, r3, #2
   1d9e2:	189b      	adds	r3, r3, r2
   1d9e4:	009b      	lsls	r3, r3, #2
   1d9e6:	4a26      	ldr	r2, [pc, #152]	; (1da80 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d9e8:	189b      	adds	r3, r3, r2
   1d9ea:	4299      	cmp	r1, r3
   1d9ec:	d101      	bne.n	1d9f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d9ee:	2301      	movs	r3, #1
   1d9f0:	e000      	b.n	1d9f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d9f2:	2300      	movs	r3, #0
   1d9f4:	2b00      	cmp	r3, #0
   1d9f6:	d031      	beq.n	1da5c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d9f8:	693b      	ldr	r3, [r7, #16]
   1d9fa:	3304      	adds	r3, #4
   1d9fc:	0018      	movs	r0, r3
   1d9fe:	4b21      	ldr	r3, [pc, #132]	; (1da84 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1da00:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1da02:	693b      	ldr	r3, [r7, #16]
   1da04:	0018      	movs	r0, r3
   1da06:	4b18      	ldr	r3, [pc, #96]	; (1da68 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1da08:	4798      	blx	r3
   1da0a:	0003      	movs	r3, r0
   1da0c:	001a      	movs	r2, r3
   1da0e:	4b17      	ldr	r3, [pc, #92]	; (1da6c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1da10:	881b      	ldrh	r3, [r3, #0]
   1da12:	4013      	ands	r3, r2
   1da14:	b29b      	uxth	r3, r3
   1da16:	2b00      	cmp	r3, #0
   1da18:	d008      	beq.n	1da2c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1da1a:	693b      	ldr	r3, [r7, #16]
   1da1c:	0018      	movs	r0, r3
   1da1e:	4b14      	ldr	r3, [pc, #80]	; (1da70 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1da20:	4798      	blx	r3
   1da22:	0003      	movs	r3, r0
   1da24:	b2db      	uxtb	r3, r3
   1da26:	0018      	movs	r0, r3
   1da28:	4b17      	ldr	r3, [pc, #92]	; (1da88 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1da2a:	4798      	blx	r3
   1da2c:	693b      	ldr	r3, [r7, #16]
   1da2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da30:	4b16      	ldr	r3, [pc, #88]	; (1da8c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1da32:	681b      	ldr	r3, [r3, #0]
   1da34:	429a      	cmp	r2, r3
   1da36:	d903      	bls.n	1da40 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1da38:	693b      	ldr	r3, [r7, #16]
   1da3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da3c:	4b13      	ldr	r3, [pc, #76]	; (1da8c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1da3e:	601a      	str	r2, [r3, #0]
   1da40:	693b      	ldr	r3, [r7, #16]
   1da42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da44:	0013      	movs	r3, r2
   1da46:	009b      	lsls	r3, r3, #2
   1da48:	189b      	adds	r3, r3, r2
   1da4a:	009b      	lsls	r3, r3, #2
   1da4c:	4a0c      	ldr	r2, [pc, #48]	; (1da80 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1da4e:	189a      	adds	r2, r3, r2
   1da50:	693b      	ldr	r3, [r7, #16]
   1da52:	3304      	adds	r3, #4
   1da54:	0019      	movs	r1, r3
   1da56:	0010      	movs	r0, r2
   1da58:	4b0d      	ldr	r3, [pc, #52]	; (1da90 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1da5a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1da5c:	46c0      	nop			; (mov r8, r8)
   1da5e:	46bd      	mov	sp, r7
   1da60:	b007      	add	sp, #28
   1da62:	bd90      	pop	{r4, r7, pc}
   1da64:	200040ec 	.word	0x200040ec
   1da68:	000188a9 	.word	0x000188a9
   1da6c:	20000110 	.word	0x20000110
   1da70:	00018889 	.word	0x00018889
   1da74:	00019861 	.word	0x00019861
   1da78:	000193d1 	.word	0x000193d1
   1da7c:	000197bd 	.word	0x000197bd
   1da80:	200040f0 	.word	0x200040f0
   1da84:	0001a723 	.word	0x0001a723
   1da88:	00019059 	.word	0x00019059
   1da8c:	200041cc 	.word	0x200041cc
   1da90:	0001a673 	.word	0x0001a673

0001da94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1da94:	b580      	push	{r7, lr}
   1da96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1da98:	4b06      	ldr	r3, [pc, #24]	; (1dab4 <pvTaskIncrementMutexHeldCount+0x20>)
   1da9a:	681b      	ldr	r3, [r3, #0]
   1da9c:	2b00      	cmp	r3, #0
   1da9e:	d004      	beq.n	1daaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1daa0:	4b04      	ldr	r3, [pc, #16]	; (1dab4 <pvTaskIncrementMutexHeldCount+0x20>)
   1daa2:	681b      	ldr	r3, [r3, #0]
   1daa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1daa6:	3201      	adds	r2, #1
   1daa8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1daaa:	4b02      	ldr	r3, [pc, #8]	; (1dab4 <pvTaskIncrementMutexHeldCount+0x20>)
   1daac:	681b      	ldr	r3, [r3, #0]
	}
   1daae:	0018      	movs	r0, r3
   1dab0:	46bd      	mov	sp, r7
   1dab2:	bd80      	pop	{r7, pc}
   1dab4:	200040ec 	.word	0x200040ec

0001dab8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1dab8:	b580      	push	{r7, lr}
   1daba:	b084      	sub	sp, #16
   1dabc:	af00      	add	r7, sp, #0
   1dabe:	6078      	str	r0, [r7, #4]
   1dac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1dac2:	4b21      	ldr	r3, [pc, #132]	; (1db48 <prvAddCurrentTaskToDelayedList+0x90>)
   1dac4:	681b      	ldr	r3, [r3, #0]
   1dac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dac8:	4b20      	ldr	r3, [pc, #128]	; (1db4c <prvAddCurrentTaskToDelayedList+0x94>)
   1daca:	681b      	ldr	r3, [r3, #0]
   1dacc:	3304      	adds	r3, #4
   1dace:	0018      	movs	r0, r3
   1dad0:	4b1f      	ldr	r3, [pc, #124]	; (1db50 <prvAddCurrentTaskToDelayedList+0x98>)
   1dad2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1dad4:	687b      	ldr	r3, [r7, #4]
   1dad6:	3301      	adds	r3, #1
   1dad8:	d10b      	bne.n	1daf2 <prvAddCurrentTaskToDelayedList+0x3a>
   1dada:	683b      	ldr	r3, [r7, #0]
   1dadc:	2b00      	cmp	r3, #0
   1dade:	d008      	beq.n	1daf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1dae0:	4b1a      	ldr	r3, [pc, #104]	; (1db4c <prvAddCurrentTaskToDelayedList+0x94>)
   1dae2:	681b      	ldr	r3, [r3, #0]
   1dae4:	1d1a      	adds	r2, r3, #4
   1dae6:	4b1b      	ldr	r3, [pc, #108]	; (1db54 <prvAddCurrentTaskToDelayedList+0x9c>)
   1dae8:	0011      	movs	r1, r2
   1daea:	0018      	movs	r0, r3
   1daec:	4b1a      	ldr	r3, [pc, #104]	; (1db58 <prvAddCurrentTaskToDelayedList+0xa0>)
   1daee:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1daf0:	e026      	b.n	1db40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1daf2:	68fa      	ldr	r2, [r7, #12]
   1daf4:	687b      	ldr	r3, [r7, #4]
   1daf6:	18d3      	adds	r3, r2, r3
   1daf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1dafa:	4b14      	ldr	r3, [pc, #80]	; (1db4c <prvAddCurrentTaskToDelayedList+0x94>)
   1dafc:	681b      	ldr	r3, [r3, #0]
   1dafe:	68ba      	ldr	r2, [r7, #8]
   1db00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1db02:	68ba      	ldr	r2, [r7, #8]
   1db04:	68fb      	ldr	r3, [r7, #12]
   1db06:	429a      	cmp	r2, r3
   1db08:	d209      	bcs.n	1db1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1db0a:	4b14      	ldr	r3, [pc, #80]	; (1db5c <prvAddCurrentTaskToDelayedList+0xa4>)
   1db0c:	681a      	ldr	r2, [r3, #0]
   1db0e:	4b0f      	ldr	r3, [pc, #60]	; (1db4c <prvAddCurrentTaskToDelayedList+0x94>)
   1db10:	681b      	ldr	r3, [r3, #0]
   1db12:	3304      	adds	r3, #4
   1db14:	0019      	movs	r1, r3
   1db16:	0010      	movs	r0, r2
   1db18:	4b11      	ldr	r3, [pc, #68]	; (1db60 <prvAddCurrentTaskToDelayedList+0xa8>)
   1db1a:	4798      	blx	r3
}
   1db1c:	e010      	b.n	1db40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1db1e:	4b11      	ldr	r3, [pc, #68]	; (1db64 <prvAddCurrentTaskToDelayedList+0xac>)
   1db20:	681a      	ldr	r2, [r3, #0]
   1db22:	4b0a      	ldr	r3, [pc, #40]	; (1db4c <prvAddCurrentTaskToDelayedList+0x94>)
   1db24:	681b      	ldr	r3, [r3, #0]
   1db26:	3304      	adds	r3, #4
   1db28:	0019      	movs	r1, r3
   1db2a:	0010      	movs	r0, r2
   1db2c:	4b0c      	ldr	r3, [pc, #48]	; (1db60 <prvAddCurrentTaskToDelayedList+0xa8>)
   1db2e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1db30:	4b0d      	ldr	r3, [pc, #52]	; (1db68 <prvAddCurrentTaskToDelayedList+0xb0>)
   1db32:	681b      	ldr	r3, [r3, #0]
   1db34:	68ba      	ldr	r2, [r7, #8]
   1db36:	429a      	cmp	r2, r3
   1db38:	d202      	bcs.n	1db40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1db3a:	4b0b      	ldr	r3, [pc, #44]	; (1db68 <prvAddCurrentTaskToDelayedList+0xb0>)
   1db3c:	68ba      	ldr	r2, [r7, #8]
   1db3e:	601a      	str	r2, [r3, #0]
}
   1db40:	46c0      	nop			; (mov r8, r8)
   1db42:	46bd      	mov	sp, r7
   1db44:	b004      	add	sp, #16
   1db46:	bd80      	pop	{r7, pc}
   1db48:	200041c8 	.word	0x200041c8
   1db4c:	200040ec 	.word	0x200040ec
   1db50:	0001a723 	.word	0x0001a723
   1db54:	200041b0 	.word	0x200041b0
   1db58:	0001a673 	.word	0x0001a673
   1db5c:	20004180 	.word	0x20004180
   1db60:	0001a6b7 	.word	0x0001a6b7
   1db64:	2000417c 	.word	0x2000417c
   1db68:	200041e4 	.word	0x200041e4

0001db6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1db6c:	b590      	push	{r4, r7, lr}
   1db6e:	b085      	sub	sp, #20
   1db70:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1db72:	2300      	movs	r3, #0
   1db74:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1db76:	4b0e      	ldr	r3, [pc, #56]	; (1dbb0 <xTimerCreateTimerTask+0x44>)
   1db78:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1db7a:	4b0e      	ldr	r3, [pc, #56]	; (1dbb4 <xTimerCreateTimerTask+0x48>)
   1db7c:	681b      	ldr	r3, [r3, #0]
   1db7e:	2b00      	cmp	r3, #0
   1db80:	d00b      	beq.n	1db9a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1db82:	490d      	ldr	r1, [pc, #52]	; (1dbb8 <xTimerCreateTimerTask+0x4c>)
   1db84:	480d      	ldr	r0, [pc, #52]	; (1dbbc <xTimerCreateTimerTask+0x50>)
   1db86:	4b0e      	ldr	r3, [pc, #56]	; (1dbc0 <xTimerCreateTimerTask+0x54>)
   1db88:	9301      	str	r3, [sp, #4]
   1db8a:	2302      	movs	r3, #2
   1db8c:	9300      	str	r3, [sp, #0]
   1db8e:	2300      	movs	r3, #0
   1db90:	2280      	movs	r2, #128	; 0x80
   1db92:	4c0c      	ldr	r4, [pc, #48]	; (1dbc4 <xTimerCreateTimerTask+0x58>)
   1db94:	47a0      	blx	r4
   1db96:	0003      	movs	r3, r0
   1db98:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1db9a:	687b      	ldr	r3, [r7, #4]
   1db9c:	2b00      	cmp	r3, #0
   1db9e:	d101      	bne.n	1dba4 <xTimerCreateTimerTask+0x38>
   1dba0:	b672      	cpsid	i
   1dba2:	e7fe      	b.n	1dba2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1dba4:	687b      	ldr	r3, [r7, #4]
}
   1dba6:	0018      	movs	r0, r3
   1dba8:	46bd      	mov	sp, r7
   1dbaa:	b003      	add	sp, #12
   1dbac:	bd90      	pop	{r4, r7, pc}
   1dbae:	46c0      	nop			; (mov r8, r8)
   1dbb0:	0001e0b5 	.word	0x0001e0b5
   1dbb4:	20004220 	.word	0x20004220
   1dbb8:	0003aa18 	.word	0x0003aa18
   1dbbc:	0001dced 	.word	0x0001dced
   1dbc0:	20004224 	.word	0x20004224
   1dbc4:	0001c505 	.word	0x0001c505

0001dbc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1dbc8:	b590      	push	{r4, r7, lr}
   1dbca:	b089      	sub	sp, #36	; 0x24
   1dbcc:	af00      	add	r7, sp, #0
   1dbce:	60f8      	str	r0, [r7, #12]
   1dbd0:	60b9      	str	r1, [r7, #8]
   1dbd2:	607a      	str	r2, [r7, #4]
   1dbd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1dbd6:	2300      	movs	r3, #0
   1dbd8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1dbda:	68fb      	ldr	r3, [r7, #12]
   1dbdc:	2b00      	cmp	r3, #0
   1dbde:	d101      	bne.n	1dbe4 <xTimerGenericCommand+0x1c>
   1dbe0:	b672      	cpsid	i
   1dbe2:	e7fe      	b.n	1dbe2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1dbe4:	4b1e      	ldr	r3, [pc, #120]	; (1dc60 <xTimerGenericCommand+0x98>)
   1dbe6:	681b      	ldr	r3, [r3, #0]
   1dbe8:	2b00      	cmp	r3, #0
   1dbea:	d033      	beq.n	1dc54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1dbec:	2310      	movs	r3, #16
   1dbee:	18fb      	adds	r3, r7, r3
   1dbf0:	68ba      	ldr	r2, [r7, #8]
   1dbf2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1dbf4:	2310      	movs	r3, #16
   1dbf6:	18fb      	adds	r3, r7, r3
   1dbf8:	687a      	ldr	r2, [r7, #4]
   1dbfa:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1dbfc:	2310      	movs	r3, #16
   1dbfe:	18fb      	adds	r3, r7, r3
   1dc00:	68fa      	ldr	r2, [r7, #12]
   1dc02:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1dc04:	68bb      	ldr	r3, [r7, #8]
   1dc06:	2b05      	cmp	r3, #5
   1dc08:	dc1a      	bgt.n	1dc40 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1dc0a:	4b16      	ldr	r3, [pc, #88]	; (1dc64 <xTimerGenericCommand+0x9c>)
   1dc0c:	4798      	blx	r3
   1dc0e:	0003      	movs	r3, r0
   1dc10:	2b02      	cmp	r3, #2
   1dc12:	d10a      	bne.n	1dc2a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1dc14:	4b12      	ldr	r3, [pc, #72]	; (1dc60 <xTimerGenericCommand+0x98>)
   1dc16:	6818      	ldr	r0, [r3, #0]
   1dc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1dc1a:	2310      	movs	r3, #16
   1dc1c:	18f9      	adds	r1, r7, r3
   1dc1e:	2300      	movs	r3, #0
   1dc20:	4c11      	ldr	r4, [pc, #68]	; (1dc68 <xTimerGenericCommand+0xa0>)
   1dc22:	47a0      	blx	r4
   1dc24:	0003      	movs	r3, r0
   1dc26:	61fb      	str	r3, [r7, #28]
   1dc28:	e014      	b.n	1dc54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1dc2a:	4b0d      	ldr	r3, [pc, #52]	; (1dc60 <xTimerGenericCommand+0x98>)
   1dc2c:	6818      	ldr	r0, [r3, #0]
   1dc2e:	2310      	movs	r3, #16
   1dc30:	18f9      	adds	r1, r7, r3
   1dc32:	2300      	movs	r3, #0
   1dc34:	2200      	movs	r2, #0
   1dc36:	4c0c      	ldr	r4, [pc, #48]	; (1dc68 <xTimerGenericCommand+0xa0>)
   1dc38:	47a0      	blx	r4
   1dc3a:	0003      	movs	r3, r0
   1dc3c:	61fb      	str	r3, [r7, #28]
   1dc3e:	e009      	b.n	1dc54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1dc40:	4b07      	ldr	r3, [pc, #28]	; (1dc60 <xTimerGenericCommand+0x98>)
   1dc42:	6818      	ldr	r0, [r3, #0]
   1dc44:	683a      	ldr	r2, [r7, #0]
   1dc46:	2310      	movs	r3, #16
   1dc48:	18f9      	adds	r1, r7, r3
   1dc4a:	2300      	movs	r3, #0
   1dc4c:	4c07      	ldr	r4, [pc, #28]	; (1dc6c <xTimerGenericCommand+0xa4>)
   1dc4e:	47a0      	blx	r4
   1dc50:	0003      	movs	r3, r0
   1dc52:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1dc54:	69fb      	ldr	r3, [r7, #28]
}
   1dc56:	0018      	movs	r0, r3
   1dc58:	46bd      	mov	sp, r7
   1dc5a:	b009      	add	sp, #36	; 0x24
   1dc5c:	bd90      	pop	{r4, r7, pc}
   1dc5e:	46c0      	nop			; (mov r8, r8)
   1dc60:	20004220 	.word	0x20004220
   1dc64:	0001d5c9 	.word	0x0001d5c9
   1dc68:	0001ae3d 	.word	0x0001ae3d
   1dc6c:	0001b29d 	.word	0x0001b29d

0001dc70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1dc70:	b590      	push	{r4, r7, lr}
   1dc72:	b087      	sub	sp, #28
   1dc74:	af02      	add	r7, sp, #8
   1dc76:	6078      	str	r0, [r7, #4]
   1dc78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dc7a:	4b18      	ldr	r3, [pc, #96]	; (1dcdc <prvProcessExpiredTimer+0x6c>)
   1dc7c:	681b      	ldr	r3, [r3, #0]
   1dc7e:	68db      	ldr	r3, [r3, #12]
   1dc80:	68db      	ldr	r3, [r3, #12]
   1dc82:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1dc84:	68fb      	ldr	r3, [r7, #12]
   1dc86:	3304      	adds	r3, #4
   1dc88:	0018      	movs	r0, r3
   1dc8a:	4b15      	ldr	r3, [pc, #84]	; (1dce0 <prvProcessExpiredTimer+0x70>)
   1dc8c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1dc8e:	68fb      	ldr	r3, [r7, #12]
   1dc90:	69db      	ldr	r3, [r3, #28]
   1dc92:	2b01      	cmp	r3, #1
   1dc94:	d119      	bne.n	1dcca <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1dc96:	68fb      	ldr	r3, [r7, #12]
   1dc98:	699a      	ldr	r2, [r3, #24]
   1dc9a:	687b      	ldr	r3, [r7, #4]
   1dc9c:	18d1      	adds	r1, r2, r3
   1dc9e:	687b      	ldr	r3, [r7, #4]
   1dca0:	683a      	ldr	r2, [r7, #0]
   1dca2:	68f8      	ldr	r0, [r7, #12]
   1dca4:	4c0f      	ldr	r4, [pc, #60]	; (1dce4 <prvProcessExpiredTimer+0x74>)
   1dca6:	47a0      	blx	r4
   1dca8:	1e03      	subs	r3, r0, #0
   1dcaa:	d00e      	beq.n	1dcca <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1dcac:	687a      	ldr	r2, [r7, #4]
   1dcae:	68f8      	ldr	r0, [r7, #12]
   1dcb0:	2300      	movs	r3, #0
   1dcb2:	9300      	str	r3, [sp, #0]
   1dcb4:	2300      	movs	r3, #0
   1dcb6:	2100      	movs	r1, #0
   1dcb8:	4c0b      	ldr	r4, [pc, #44]	; (1dce8 <prvProcessExpiredTimer+0x78>)
   1dcba:	47a0      	blx	r4
   1dcbc:	0003      	movs	r3, r0
   1dcbe:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1dcc0:	68bb      	ldr	r3, [r7, #8]
   1dcc2:	2b00      	cmp	r3, #0
   1dcc4:	d101      	bne.n	1dcca <prvProcessExpiredTimer+0x5a>
   1dcc6:	b672      	cpsid	i
   1dcc8:	e7fe      	b.n	1dcc8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1dcca:	68fb      	ldr	r3, [r7, #12]
   1dccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dcce:	68fa      	ldr	r2, [r7, #12]
   1dcd0:	0010      	movs	r0, r2
   1dcd2:	4798      	blx	r3
}
   1dcd4:	46c0      	nop			; (mov r8, r8)
   1dcd6:	46bd      	mov	sp, r7
   1dcd8:	b005      	add	sp, #20
   1dcda:	bd90      	pop	{r4, r7, pc}
   1dcdc:	20004218 	.word	0x20004218
   1dce0:	0001a723 	.word	0x0001a723
   1dce4:	0001de55 	.word	0x0001de55
   1dce8:	0001dbc9 	.word	0x0001dbc9

0001dcec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1dcec:	b580      	push	{r7, lr}
   1dcee:	b084      	sub	sp, #16
   1dcf0:	af00      	add	r7, sp, #0
   1dcf2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1dcf4:	4b08      	ldr	r3, [pc, #32]	; (1dd18 <prvTimerTask+0x2c>)
   1dcf6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1dcf8:	2308      	movs	r3, #8
   1dcfa:	18fb      	adds	r3, r7, r3
   1dcfc:	0018      	movs	r0, r3
   1dcfe:	4b07      	ldr	r3, [pc, #28]	; (1dd1c <prvTimerTask+0x30>)
   1dd00:	4798      	blx	r3
   1dd02:	0003      	movs	r3, r0
   1dd04:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1dd06:	68ba      	ldr	r2, [r7, #8]
   1dd08:	68fb      	ldr	r3, [r7, #12]
   1dd0a:	0011      	movs	r1, r2
   1dd0c:	0018      	movs	r0, r3
   1dd0e:	4b04      	ldr	r3, [pc, #16]	; (1dd20 <prvTimerTask+0x34>)
   1dd10:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1dd12:	4b04      	ldr	r3, [pc, #16]	; (1dd24 <prvTimerTask+0x38>)
   1dd14:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1dd16:	e7ef      	b.n	1dcf8 <prvTimerTask+0xc>
   1dd18:	00032de5 	.word	0x00032de5
   1dd1c:	0001ddcd 	.word	0x0001ddcd
   1dd20:	0001dd29 	.word	0x0001dd29
   1dd24:	0001dedd 	.word	0x0001dedd

0001dd28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1dd28:	b580      	push	{r7, lr}
   1dd2a:	b084      	sub	sp, #16
   1dd2c:	af00      	add	r7, sp, #0
   1dd2e:	6078      	str	r0, [r7, #4]
   1dd30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1dd32:	4b1e      	ldr	r3, [pc, #120]	; (1ddac <prvProcessTimerOrBlockTask+0x84>)
   1dd34:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1dd36:	2308      	movs	r3, #8
   1dd38:	18fb      	adds	r3, r7, r3
   1dd3a:	0018      	movs	r0, r3
   1dd3c:	4b1c      	ldr	r3, [pc, #112]	; (1ddb0 <prvProcessTimerOrBlockTask+0x88>)
   1dd3e:	4798      	blx	r3
   1dd40:	0003      	movs	r3, r0
   1dd42:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1dd44:	68bb      	ldr	r3, [r7, #8]
   1dd46:	2b00      	cmp	r3, #0
   1dd48:	d129      	bne.n	1dd9e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1dd4a:	683b      	ldr	r3, [r7, #0]
   1dd4c:	2b00      	cmp	r3, #0
   1dd4e:	d10c      	bne.n	1dd6a <prvProcessTimerOrBlockTask+0x42>
   1dd50:	687a      	ldr	r2, [r7, #4]
   1dd52:	68fb      	ldr	r3, [r7, #12]
   1dd54:	429a      	cmp	r2, r3
   1dd56:	d808      	bhi.n	1dd6a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1dd58:	4b16      	ldr	r3, [pc, #88]	; (1ddb4 <prvProcessTimerOrBlockTask+0x8c>)
   1dd5a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1dd5c:	68fa      	ldr	r2, [r7, #12]
   1dd5e:	687b      	ldr	r3, [r7, #4]
   1dd60:	0011      	movs	r1, r2
   1dd62:	0018      	movs	r0, r3
   1dd64:	4b14      	ldr	r3, [pc, #80]	; (1ddb8 <prvProcessTimerOrBlockTask+0x90>)
   1dd66:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1dd68:	e01b      	b.n	1dda2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1dd6a:	683b      	ldr	r3, [r7, #0]
   1dd6c:	2b00      	cmp	r3, #0
   1dd6e:	d006      	beq.n	1dd7e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1dd70:	4b12      	ldr	r3, [pc, #72]	; (1ddbc <prvProcessTimerOrBlockTask+0x94>)
   1dd72:	681b      	ldr	r3, [r3, #0]
   1dd74:	681b      	ldr	r3, [r3, #0]
   1dd76:	425a      	negs	r2, r3
   1dd78:	4153      	adcs	r3, r2
   1dd7a:	b2db      	uxtb	r3, r3
   1dd7c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1dd7e:	4b10      	ldr	r3, [pc, #64]	; (1ddc0 <prvProcessTimerOrBlockTask+0x98>)
   1dd80:	6818      	ldr	r0, [r3, #0]
   1dd82:	687a      	ldr	r2, [r7, #4]
   1dd84:	68fb      	ldr	r3, [r7, #12]
   1dd86:	1ad3      	subs	r3, r2, r3
   1dd88:	683a      	ldr	r2, [r7, #0]
   1dd8a:	0019      	movs	r1, r3
   1dd8c:	4b0d      	ldr	r3, [pc, #52]	; (1ddc4 <prvProcessTimerOrBlockTask+0x9c>)
   1dd8e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1dd90:	4b08      	ldr	r3, [pc, #32]	; (1ddb4 <prvProcessTimerOrBlockTask+0x8c>)
   1dd92:	4798      	blx	r3
   1dd94:	1e03      	subs	r3, r0, #0
   1dd96:	d104      	bne.n	1dda2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1dd98:	4b0b      	ldr	r3, [pc, #44]	; (1ddc8 <prvProcessTimerOrBlockTask+0xa0>)
   1dd9a:	4798      	blx	r3
}
   1dd9c:	e001      	b.n	1dda2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1dd9e:	4b05      	ldr	r3, [pc, #20]	; (1ddb4 <prvProcessTimerOrBlockTask+0x8c>)
   1dda0:	4798      	blx	r3
}
   1dda2:	46c0      	nop			; (mov r8, r8)
   1dda4:	46bd      	mov	sp, r7
   1dda6:	b004      	add	sp, #16
   1dda8:	bd80      	pop	{r7, pc}
   1ddaa:	46c0      	nop			; (mov r8, r8)
   1ddac:	0001cb61 	.word	0x0001cb61
   1ddb0:	0001de0d 	.word	0x0001de0d
   1ddb4:	0001cb79 	.word	0x0001cb79
   1ddb8:	0001dc71 	.word	0x0001dc71
   1ddbc:	2000421c 	.word	0x2000421c
   1ddc0:	20004220 	.word	0x20004220
   1ddc4:	0001c301 	.word	0x0001c301
   1ddc8:	0001a891 	.word	0x0001a891

0001ddcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1ddcc:	b580      	push	{r7, lr}
   1ddce:	b084      	sub	sp, #16
   1ddd0:	af00      	add	r7, sp, #0
   1ddd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1ddd4:	4b0c      	ldr	r3, [pc, #48]	; (1de08 <prvGetNextExpireTime+0x3c>)
   1ddd6:	681b      	ldr	r3, [r3, #0]
   1ddd8:	681b      	ldr	r3, [r3, #0]
   1ddda:	425a      	negs	r2, r3
   1dddc:	4153      	adcs	r3, r2
   1ddde:	b2db      	uxtb	r3, r3
   1dde0:	001a      	movs	r2, r3
   1dde2:	687b      	ldr	r3, [r7, #4]
   1dde4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1dde6:	687b      	ldr	r3, [r7, #4]
   1dde8:	681b      	ldr	r3, [r3, #0]
   1ddea:	2b00      	cmp	r3, #0
   1ddec:	d105      	bne.n	1ddfa <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ddee:	4b06      	ldr	r3, [pc, #24]	; (1de08 <prvGetNextExpireTime+0x3c>)
   1ddf0:	681b      	ldr	r3, [r3, #0]
   1ddf2:	68db      	ldr	r3, [r3, #12]
   1ddf4:	681b      	ldr	r3, [r3, #0]
   1ddf6:	60fb      	str	r3, [r7, #12]
   1ddf8:	e001      	b.n	1ddfe <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1ddfa:	2300      	movs	r3, #0
   1ddfc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1ddfe:	68fb      	ldr	r3, [r7, #12]
}
   1de00:	0018      	movs	r0, r3
   1de02:	46bd      	mov	sp, r7
   1de04:	b004      	add	sp, #16
   1de06:	bd80      	pop	{r7, pc}
   1de08:	20004218 	.word	0x20004218

0001de0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1de0c:	b580      	push	{r7, lr}
   1de0e:	b084      	sub	sp, #16
   1de10:	af00      	add	r7, sp, #0
   1de12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1de14:	4b0c      	ldr	r3, [pc, #48]	; (1de48 <prvSampleTimeNow+0x3c>)
   1de16:	4798      	blx	r3
   1de18:	0003      	movs	r3, r0
   1de1a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1de1c:	4b0b      	ldr	r3, [pc, #44]	; (1de4c <prvSampleTimeNow+0x40>)
   1de1e:	681b      	ldr	r3, [r3, #0]
   1de20:	68fa      	ldr	r2, [r7, #12]
   1de22:	429a      	cmp	r2, r3
   1de24:	d205      	bcs.n	1de32 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1de26:	4b0a      	ldr	r3, [pc, #40]	; (1de50 <prvSampleTimeNow+0x44>)
   1de28:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1de2a:	687b      	ldr	r3, [r7, #4]
   1de2c:	2201      	movs	r2, #1
   1de2e:	601a      	str	r2, [r3, #0]
   1de30:	e002      	b.n	1de38 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1de32:	687b      	ldr	r3, [r7, #4]
   1de34:	2200      	movs	r2, #0
   1de36:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1de38:	4b04      	ldr	r3, [pc, #16]	; (1de4c <prvSampleTimeNow+0x40>)
   1de3a:	68fa      	ldr	r2, [r7, #12]
   1de3c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1de3e:	68fb      	ldr	r3, [r7, #12]
}
   1de40:	0018      	movs	r0, r3
   1de42:	46bd      	mov	sp, r7
   1de44:	b004      	add	sp, #16
   1de46:	bd80      	pop	{r7, pc}
   1de48:	0001cce9 	.word	0x0001cce9
   1de4c:	20004228 	.word	0x20004228
   1de50:	0001dff5 	.word	0x0001dff5

0001de54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1de54:	b580      	push	{r7, lr}
   1de56:	b086      	sub	sp, #24
   1de58:	af00      	add	r7, sp, #0
   1de5a:	60f8      	str	r0, [r7, #12]
   1de5c:	60b9      	str	r1, [r7, #8]
   1de5e:	607a      	str	r2, [r7, #4]
   1de60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1de62:	2300      	movs	r3, #0
   1de64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1de66:	68fb      	ldr	r3, [r7, #12]
   1de68:	68ba      	ldr	r2, [r7, #8]
   1de6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1de6c:	68fb      	ldr	r3, [r7, #12]
   1de6e:	68fa      	ldr	r2, [r7, #12]
   1de70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1de72:	68ba      	ldr	r2, [r7, #8]
   1de74:	687b      	ldr	r3, [r7, #4]
   1de76:	429a      	cmp	r2, r3
   1de78:	d812      	bhi.n	1dea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1de7a:	687a      	ldr	r2, [r7, #4]
   1de7c:	683b      	ldr	r3, [r7, #0]
   1de7e:	1ad2      	subs	r2, r2, r3
   1de80:	68fb      	ldr	r3, [r7, #12]
   1de82:	699b      	ldr	r3, [r3, #24]
   1de84:	429a      	cmp	r2, r3
   1de86:	d302      	bcc.n	1de8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1de88:	2301      	movs	r3, #1
   1de8a:	617b      	str	r3, [r7, #20]
   1de8c:	e01b      	b.n	1dec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1de8e:	4b10      	ldr	r3, [pc, #64]	; (1ded0 <prvInsertTimerInActiveList+0x7c>)
   1de90:	681a      	ldr	r2, [r3, #0]
   1de92:	68fb      	ldr	r3, [r7, #12]
   1de94:	3304      	adds	r3, #4
   1de96:	0019      	movs	r1, r3
   1de98:	0010      	movs	r0, r2
   1de9a:	4b0e      	ldr	r3, [pc, #56]	; (1ded4 <prvInsertTimerInActiveList+0x80>)
   1de9c:	4798      	blx	r3
   1de9e:	e012      	b.n	1dec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1dea0:	687a      	ldr	r2, [r7, #4]
   1dea2:	683b      	ldr	r3, [r7, #0]
   1dea4:	429a      	cmp	r2, r3
   1dea6:	d206      	bcs.n	1deb6 <prvInsertTimerInActiveList+0x62>
   1dea8:	68ba      	ldr	r2, [r7, #8]
   1deaa:	683b      	ldr	r3, [r7, #0]
   1deac:	429a      	cmp	r2, r3
   1deae:	d302      	bcc.n	1deb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1deb0:	2301      	movs	r3, #1
   1deb2:	617b      	str	r3, [r7, #20]
   1deb4:	e007      	b.n	1dec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1deb6:	4b08      	ldr	r3, [pc, #32]	; (1ded8 <prvInsertTimerInActiveList+0x84>)
   1deb8:	681a      	ldr	r2, [r3, #0]
   1deba:	68fb      	ldr	r3, [r7, #12]
   1debc:	3304      	adds	r3, #4
   1debe:	0019      	movs	r1, r3
   1dec0:	0010      	movs	r0, r2
   1dec2:	4b04      	ldr	r3, [pc, #16]	; (1ded4 <prvInsertTimerInActiveList+0x80>)
   1dec4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1dec6:	697b      	ldr	r3, [r7, #20]
}
   1dec8:	0018      	movs	r0, r3
   1deca:	46bd      	mov	sp, r7
   1decc:	b006      	add	sp, #24
   1dece:	bd80      	pop	{r7, pc}
   1ded0:	2000421c 	.word	0x2000421c
   1ded4:	0001a6b7 	.word	0x0001a6b7
   1ded8:	20004218 	.word	0x20004218

0001dedc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1dedc:	b590      	push	{r4, r7, lr}
   1dede:	b08b      	sub	sp, #44	; 0x2c
   1dee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dee2:	e068      	b.n	1dfb6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1dee4:	2308      	movs	r3, #8
   1dee6:	18fb      	adds	r3, r7, r3
   1dee8:	681b      	ldr	r3, [r3, #0]
   1deea:	2b00      	cmp	r3, #0
   1deec:	db63      	blt.n	1dfb6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1deee:	2308      	movs	r3, #8
   1def0:	18fb      	adds	r3, r7, r3
   1def2:	689b      	ldr	r3, [r3, #8]
   1def4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1def6:	69fb      	ldr	r3, [r7, #28]
   1def8:	695b      	ldr	r3, [r3, #20]
   1defa:	2b00      	cmp	r3, #0
   1defc:	d004      	beq.n	1df08 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1defe:	69fb      	ldr	r3, [r7, #28]
   1df00:	3304      	adds	r3, #4
   1df02:	0018      	movs	r0, r3
   1df04:	4b33      	ldr	r3, [pc, #204]	; (1dfd4 <prvProcessReceivedCommands+0xf8>)
   1df06:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1df08:	1d3b      	adds	r3, r7, #4
   1df0a:	0018      	movs	r0, r3
   1df0c:	4b32      	ldr	r3, [pc, #200]	; (1dfd8 <prvProcessReceivedCommands+0xfc>)
   1df0e:	4798      	blx	r3
   1df10:	0003      	movs	r3, r0
   1df12:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1df14:	2308      	movs	r3, #8
   1df16:	18fb      	adds	r3, r7, r3
   1df18:	681b      	ldr	r3, [r3, #0]
   1df1a:	2b09      	cmp	r3, #9
   1df1c:	d84a      	bhi.n	1dfb4 <prvProcessReceivedCommands+0xd8>
   1df1e:	009a      	lsls	r2, r3, #2
   1df20:	4b2e      	ldr	r3, [pc, #184]	; (1dfdc <prvProcessReceivedCommands+0x100>)
   1df22:	18d3      	adds	r3, r2, r3
   1df24:	681b      	ldr	r3, [r3, #0]
   1df26:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1df28:	2308      	movs	r3, #8
   1df2a:	18fb      	adds	r3, r7, r3
   1df2c:	685a      	ldr	r2, [r3, #4]
   1df2e:	69fb      	ldr	r3, [r7, #28]
   1df30:	699b      	ldr	r3, [r3, #24]
   1df32:	18d1      	adds	r1, r2, r3
   1df34:	2308      	movs	r3, #8
   1df36:	18fb      	adds	r3, r7, r3
   1df38:	685b      	ldr	r3, [r3, #4]
   1df3a:	69ba      	ldr	r2, [r7, #24]
   1df3c:	69f8      	ldr	r0, [r7, #28]
   1df3e:	4c28      	ldr	r4, [pc, #160]	; (1dfe0 <prvProcessReceivedCommands+0x104>)
   1df40:	47a0      	blx	r4
   1df42:	1e03      	subs	r3, r0, #0
   1df44:	d037      	beq.n	1dfb6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1df46:	69fb      	ldr	r3, [r7, #28]
   1df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1df4a:	69fa      	ldr	r2, [r7, #28]
   1df4c:	0010      	movs	r0, r2
   1df4e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1df50:	69fb      	ldr	r3, [r7, #28]
   1df52:	69db      	ldr	r3, [r3, #28]
   1df54:	2b01      	cmp	r3, #1
   1df56:	d12e      	bne.n	1dfb6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1df58:	2308      	movs	r3, #8
   1df5a:	18fb      	adds	r3, r7, r3
   1df5c:	685a      	ldr	r2, [r3, #4]
   1df5e:	69fb      	ldr	r3, [r7, #28]
   1df60:	699b      	ldr	r3, [r3, #24]
   1df62:	18d2      	adds	r2, r2, r3
   1df64:	69f8      	ldr	r0, [r7, #28]
   1df66:	2300      	movs	r3, #0
   1df68:	9300      	str	r3, [sp, #0]
   1df6a:	2300      	movs	r3, #0
   1df6c:	2100      	movs	r1, #0
   1df6e:	4c1d      	ldr	r4, [pc, #116]	; (1dfe4 <prvProcessReceivedCommands+0x108>)
   1df70:	47a0      	blx	r4
   1df72:	0003      	movs	r3, r0
   1df74:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1df76:	697b      	ldr	r3, [r7, #20]
   1df78:	2b00      	cmp	r3, #0
   1df7a:	d11c      	bne.n	1dfb6 <prvProcessReceivedCommands+0xda>
   1df7c:	b672      	cpsid	i
   1df7e:	e7fe      	b.n	1df7e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1df80:	2308      	movs	r3, #8
   1df82:	18fb      	adds	r3, r7, r3
   1df84:	685a      	ldr	r2, [r3, #4]
   1df86:	69fb      	ldr	r3, [r7, #28]
   1df88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1df8a:	69fb      	ldr	r3, [r7, #28]
   1df8c:	699b      	ldr	r3, [r3, #24]
   1df8e:	2b00      	cmp	r3, #0
   1df90:	d101      	bne.n	1df96 <prvProcessReceivedCommands+0xba>
   1df92:	b672      	cpsid	i
   1df94:	e7fe      	b.n	1df94 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1df96:	69fb      	ldr	r3, [r7, #28]
   1df98:	699a      	ldr	r2, [r3, #24]
   1df9a:	69bb      	ldr	r3, [r7, #24]
   1df9c:	18d1      	adds	r1, r2, r3
   1df9e:	69bb      	ldr	r3, [r7, #24]
   1dfa0:	69ba      	ldr	r2, [r7, #24]
   1dfa2:	69f8      	ldr	r0, [r7, #28]
   1dfa4:	4c0e      	ldr	r4, [pc, #56]	; (1dfe0 <prvProcessReceivedCommands+0x104>)
   1dfa6:	47a0      	blx	r4
					break;
   1dfa8:	e005      	b.n	1dfb6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1dfaa:	69fb      	ldr	r3, [r7, #28]
   1dfac:	0018      	movs	r0, r3
   1dfae:	4b0e      	ldr	r3, [pc, #56]	; (1dfe8 <prvProcessReceivedCommands+0x10c>)
   1dfb0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1dfb2:	e000      	b.n	1dfb6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1dfb4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dfb6:	4b0d      	ldr	r3, [pc, #52]	; (1dfec <prvProcessReceivedCommands+0x110>)
   1dfb8:	681b      	ldr	r3, [r3, #0]
   1dfba:	2208      	movs	r2, #8
   1dfbc:	18b9      	adds	r1, r7, r2
   1dfbe:	2200      	movs	r2, #0
   1dfc0:	0018      	movs	r0, r3
   1dfc2:	4b0b      	ldr	r3, [pc, #44]	; (1dff0 <prvProcessReceivedCommands+0x114>)
   1dfc4:	4798      	blx	r3
   1dfc6:	1e03      	subs	r3, r0, #0
   1dfc8:	d18c      	bne.n	1dee4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1dfca:	46c0      	nop			; (mov r8, r8)
   1dfcc:	46bd      	mov	sp, r7
   1dfce:	b009      	add	sp, #36	; 0x24
   1dfd0:	bd90      	pop	{r4, r7, pc}
   1dfd2:	46c0      	nop			; (mov r8, r8)
   1dfd4:	0001a723 	.word	0x0001a723
   1dfd8:	0001de0d 	.word	0x0001de0d
   1dfdc:	0003aa20 	.word	0x0003aa20
   1dfe0:	0001de55 	.word	0x0001de55
   1dfe4:	0001dbc9 	.word	0x0001dbc9
   1dfe8:	0001aaa5 	.word	0x0001aaa5
   1dfec:	20004220 	.word	0x20004220
   1dff0:	0001b6f5 	.word	0x0001b6f5

0001dff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1dff4:	b590      	push	{r4, r7, lr}
   1dff6:	b089      	sub	sp, #36	; 0x24
   1dff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1dffa:	e03e      	b.n	1e07a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dffc:	4b28      	ldr	r3, [pc, #160]	; (1e0a0 <prvSwitchTimerLists+0xac>)
   1dffe:	681b      	ldr	r3, [r3, #0]
   1e000:	68db      	ldr	r3, [r3, #12]
   1e002:	681b      	ldr	r3, [r3, #0]
   1e004:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e006:	4b26      	ldr	r3, [pc, #152]	; (1e0a0 <prvSwitchTimerLists+0xac>)
   1e008:	681b      	ldr	r3, [r3, #0]
   1e00a:	68db      	ldr	r3, [r3, #12]
   1e00c:	68db      	ldr	r3, [r3, #12]
   1e00e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e010:	693b      	ldr	r3, [r7, #16]
   1e012:	3304      	adds	r3, #4
   1e014:	0018      	movs	r0, r3
   1e016:	4b23      	ldr	r3, [pc, #140]	; (1e0a4 <prvSwitchTimerLists+0xb0>)
   1e018:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e01a:	693b      	ldr	r3, [r7, #16]
   1e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e01e:	693a      	ldr	r2, [r7, #16]
   1e020:	0010      	movs	r0, r2
   1e022:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e024:	693b      	ldr	r3, [r7, #16]
   1e026:	69db      	ldr	r3, [r3, #28]
   1e028:	2b01      	cmp	r3, #1
   1e02a:	d126      	bne.n	1e07a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e02c:	693b      	ldr	r3, [r7, #16]
   1e02e:	699a      	ldr	r2, [r3, #24]
   1e030:	697b      	ldr	r3, [r7, #20]
   1e032:	18d3      	adds	r3, r2, r3
   1e034:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e036:	68fa      	ldr	r2, [r7, #12]
   1e038:	697b      	ldr	r3, [r7, #20]
   1e03a:	429a      	cmp	r2, r3
   1e03c:	d90e      	bls.n	1e05c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e03e:	693b      	ldr	r3, [r7, #16]
   1e040:	68fa      	ldr	r2, [r7, #12]
   1e042:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e044:	693b      	ldr	r3, [r7, #16]
   1e046:	693a      	ldr	r2, [r7, #16]
   1e048:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e04a:	4b15      	ldr	r3, [pc, #84]	; (1e0a0 <prvSwitchTimerLists+0xac>)
   1e04c:	681a      	ldr	r2, [r3, #0]
   1e04e:	693b      	ldr	r3, [r7, #16]
   1e050:	3304      	adds	r3, #4
   1e052:	0019      	movs	r1, r3
   1e054:	0010      	movs	r0, r2
   1e056:	4b14      	ldr	r3, [pc, #80]	; (1e0a8 <prvSwitchTimerLists+0xb4>)
   1e058:	4798      	blx	r3
   1e05a:	e00e      	b.n	1e07a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e05c:	697a      	ldr	r2, [r7, #20]
   1e05e:	6938      	ldr	r0, [r7, #16]
   1e060:	2300      	movs	r3, #0
   1e062:	9300      	str	r3, [sp, #0]
   1e064:	2300      	movs	r3, #0
   1e066:	2100      	movs	r1, #0
   1e068:	4c10      	ldr	r4, [pc, #64]	; (1e0ac <prvSwitchTimerLists+0xb8>)
   1e06a:	47a0      	blx	r4
   1e06c:	0003      	movs	r3, r0
   1e06e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e070:	68bb      	ldr	r3, [r7, #8]
   1e072:	2b00      	cmp	r3, #0
   1e074:	d101      	bne.n	1e07a <prvSwitchTimerLists+0x86>
   1e076:	b672      	cpsid	i
   1e078:	e7fe      	b.n	1e078 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e07a:	4b09      	ldr	r3, [pc, #36]	; (1e0a0 <prvSwitchTimerLists+0xac>)
   1e07c:	681b      	ldr	r3, [r3, #0]
   1e07e:	681b      	ldr	r3, [r3, #0]
   1e080:	2b00      	cmp	r3, #0
   1e082:	d1bb      	bne.n	1dffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e084:	4b06      	ldr	r3, [pc, #24]	; (1e0a0 <prvSwitchTimerLists+0xac>)
   1e086:	681b      	ldr	r3, [r3, #0]
   1e088:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e08a:	4b09      	ldr	r3, [pc, #36]	; (1e0b0 <prvSwitchTimerLists+0xbc>)
   1e08c:	681a      	ldr	r2, [r3, #0]
   1e08e:	4b04      	ldr	r3, [pc, #16]	; (1e0a0 <prvSwitchTimerLists+0xac>)
   1e090:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e092:	4b07      	ldr	r3, [pc, #28]	; (1e0b0 <prvSwitchTimerLists+0xbc>)
   1e094:	687a      	ldr	r2, [r7, #4]
   1e096:	601a      	str	r2, [r3, #0]
}
   1e098:	46c0      	nop			; (mov r8, r8)
   1e09a:	46bd      	mov	sp, r7
   1e09c:	b007      	add	sp, #28
   1e09e:	bd90      	pop	{r4, r7, pc}
   1e0a0:	20004218 	.word	0x20004218
   1e0a4:	0001a723 	.word	0x0001a723
   1e0a8:	0001a6b7 	.word	0x0001a6b7
   1e0ac:	0001dbc9 	.word	0x0001dbc9
   1e0b0:	2000421c 	.word	0x2000421c

0001e0b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e0b4:	b580      	push	{r7, lr}
   1e0b6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e0b8:	4b10      	ldr	r3, [pc, #64]	; (1e0fc <prvCheckForValidListAndQueue+0x48>)
   1e0ba:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e0bc:	4b10      	ldr	r3, [pc, #64]	; (1e100 <prvCheckForValidListAndQueue+0x4c>)
   1e0be:	681b      	ldr	r3, [r3, #0]
   1e0c0:	2b00      	cmp	r3, #0
   1e0c2:	d115      	bne.n	1e0f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e0c4:	4b0f      	ldr	r3, [pc, #60]	; (1e104 <prvCheckForValidListAndQueue+0x50>)
   1e0c6:	0018      	movs	r0, r3
   1e0c8:	4b0f      	ldr	r3, [pc, #60]	; (1e108 <prvCheckForValidListAndQueue+0x54>)
   1e0ca:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e0cc:	4b0f      	ldr	r3, [pc, #60]	; (1e10c <prvCheckForValidListAndQueue+0x58>)
   1e0ce:	0018      	movs	r0, r3
   1e0d0:	4b0d      	ldr	r3, [pc, #52]	; (1e108 <prvCheckForValidListAndQueue+0x54>)
   1e0d2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e0d4:	4b0e      	ldr	r3, [pc, #56]	; (1e110 <prvCheckForValidListAndQueue+0x5c>)
   1e0d6:	4a0b      	ldr	r2, [pc, #44]	; (1e104 <prvCheckForValidListAndQueue+0x50>)
   1e0d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e0da:	4b0e      	ldr	r3, [pc, #56]	; (1e114 <prvCheckForValidListAndQueue+0x60>)
   1e0dc:	4a0b      	ldr	r2, [pc, #44]	; (1e10c <prvCheckForValidListAndQueue+0x58>)
   1e0de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e0e0:	2200      	movs	r2, #0
   1e0e2:	210c      	movs	r1, #12
   1e0e4:	2005      	movs	r0, #5
   1e0e6:	4b0c      	ldr	r3, [pc, #48]	; (1e118 <prvCheckForValidListAndQueue+0x64>)
   1e0e8:	4798      	blx	r3
   1e0ea:	0002      	movs	r2, r0
   1e0ec:	4b04      	ldr	r3, [pc, #16]	; (1e100 <prvCheckForValidListAndQueue+0x4c>)
   1e0ee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e0f0:	4b0a      	ldr	r3, [pc, #40]	; (1e11c <prvCheckForValidListAndQueue+0x68>)
   1e0f2:	4798      	blx	r3
}
   1e0f4:	46c0      	nop			; (mov r8, r8)
   1e0f6:	46bd      	mov	sp, r7
   1e0f8:	bd80      	pop	{r7, pc}
   1e0fa:	46c0      	nop			; (mov r8, r8)
   1e0fc:	0001a8a9 	.word	0x0001a8a9
   1e100:	20004220 	.word	0x20004220
   1e104:	200041f0 	.word	0x200041f0
   1e108:	0001a621 	.word	0x0001a621
   1e10c:	20004204 	.word	0x20004204
   1e110:	20004218 	.word	0x20004218
   1e114:	2000421c 	.word	0x2000421c
   1e118:	0001ab95 	.word	0x0001ab95
   1e11c:	0001a8cd 	.word	0x0001a8cd

0001e120 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e120:	b580      	push	{r7, lr}
   1e122:	b082      	sub	sp, #8
   1e124:	af00      	add	r7, sp, #0
   1e126:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e128:	687b      	ldr	r3, [r7, #4]
   1e12a:	7c1b      	ldrb	r3, [r3, #16]
   1e12c:	2b00      	cmp	r3, #0
   1e12e:	d00b      	beq.n	1e148 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e130:	687b      	ldr	r3, [r7, #4]
   1e132:	689b      	ldr	r3, [r3, #8]
   1e134:	1c5a      	adds	r2, r3, #1
   1e136:	687b      	ldr	r3, [r7, #4]
   1e138:	68d9      	ldr	r1, [r3, #12]
   1e13a:	4b10      	ldr	r3, [pc, #64]	; (1e17c <advance_pointer+0x5c>)
   1e13c:	0010      	movs	r0, r2
   1e13e:	4798      	blx	r3
   1e140:	000b      	movs	r3, r1
   1e142:	001a      	movs	r2, r3
   1e144:	687b      	ldr	r3, [r7, #4]
   1e146:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e148:	687b      	ldr	r3, [r7, #4]
   1e14a:	685b      	ldr	r3, [r3, #4]
   1e14c:	1c5a      	adds	r2, r3, #1
   1e14e:	687b      	ldr	r3, [r7, #4]
   1e150:	68d9      	ldr	r1, [r3, #12]
   1e152:	4b0a      	ldr	r3, [pc, #40]	; (1e17c <advance_pointer+0x5c>)
   1e154:	0010      	movs	r0, r2
   1e156:	4798      	blx	r3
   1e158:	000b      	movs	r3, r1
   1e15a:	001a      	movs	r2, r3
   1e15c:	687b      	ldr	r3, [r7, #4]
   1e15e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e160:	687b      	ldr	r3, [r7, #4]
   1e162:	685a      	ldr	r2, [r3, #4]
   1e164:	687b      	ldr	r3, [r7, #4]
   1e166:	689b      	ldr	r3, [r3, #8]
   1e168:	1ad3      	subs	r3, r2, r3
   1e16a:	425a      	negs	r2, r3
   1e16c:	4153      	adcs	r3, r2
   1e16e:	b2da      	uxtb	r2, r3
   1e170:	687b      	ldr	r3, [r7, #4]
   1e172:	741a      	strb	r2, [r3, #16]
 }
   1e174:	46c0      	nop			; (mov r8, r8)
   1e176:	46bd      	mov	sp, r7
   1e178:	b002      	add	sp, #8
   1e17a:	bd80      	pop	{r7, pc}
   1e17c:	00033141 	.word	0x00033141

0001e180 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e180:	b580      	push	{r7, lr}
   1e182:	b082      	sub	sp, #8
   1e184:	af00      	add	r7, sp, #0
   1e186:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e188:	687b      	ldr	r3, [r7, #4]
   1e18a:	2200      	movs	r2, #0
   1e18c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e18e:	687b      	ldr	r3, [r7, #4]
   1e190:	689b      	ldr	r3, [r3, #8]
   1e192:	1c5a      	adds	r2, r3, #1
   1e194:	687b      	ldr	r3, [r7, #4]
   1e196:	68d9      	ldr	r1, [r3, #12]
   1e198:	4b05      	ldr	r3, [pc, #20]	; (1e1b0 <retreat_pointer+0x30>)
   1e19a:	0010      	movs	r0, r2
   1e19c:	4798      	blx	r3
   1e19e:	000b      	movs	r3, r1
   1e1a0:	001a      	movs	r2, r3
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	609a      	str	r2, [r3, #8]
 }
   1e1a6:	46c0      	nop			; (mov r8, r8)
   1e1a8:	46bd      	mov	sp, r7
   1e1aa:	b002      	add	sp, #8
   1e1ac:	bd80      	pop	{r7, pc}
   1e1ae:	46c0      	nop			; (mov r8, r8)
   1e1b0:	00033141 	.word	0x00033141

0001e1b4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e1b4:	b580      	push	{r7, lr}
   1e1b6:	b084      	sub	sp, #16
   1e1b8:	af00      	add	r7, sp, #0
   1e1ba:	6078      	str	r0, [r7, #4]
   1e1bc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e1be:	2014      	movs	r0, #20
   1e1c0:	4b09      	ldr	r3, [pc, #36]	; (1e1e8 <circular_buf_init+0x34>)
   1e1c2:	4798      	blx	r3
   1e1c4:	0003      	movs	r3, r0
   1e1c6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e1c8:	68fb      	ldr	r3, [r7, #12]
   1e1ca:	687a      	ldr	r2, [r7, #4]
   1e1cc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e1ce:	68fb      	ldr	r3, [r7, #12]
   1e1d0:	683a      	ldr	r2, [r7, #0]
   1e1d2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e1d4:	68fb      	ldr	r3, [r7, #12]
   1e1d6:	0018      	movs	r0, r3
   1e1d8:	4b04      	ldr	r3, [pc, #16]	; (1e1ec <circular_buf_init+0x38>)
   1e1da:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e1dc:	68fb      	ldr	r3, [r7, #12]
 }
   1e1de:	0018      	movs	r0, r3
   1e1e0:	46bd      	mov	sp, r7
   1e1e2:	b004      	add	sp, #16
   1e1e4:	bd80      	pop	{r7, pc}
   1e1e6:	46c0      	nop			; (mov r8, r8)
   1e1e8:	00035319 	.word	0x00035319
   1e1ec:	0001e1f1 	.word	0x0001e1f1

0001e1f0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e1f0:	b580      	push	{r7, lr}
   1e1f2:	b082      	sub	sp, #8
   1e1f4:	af00      	add	r7, sp, #0
   1e1f6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e1f8:	687b      	ldr	r3, [r7, #4]
   1e1fa:	2200      	movs	r2, #0
   1e1fc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e1fe:	687b      	ldr	r3, [r7, #4]
   1e200:	2200      	movs	r2, #0
   1e202:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e204:	687b      	ldr	r3, [r7, #4]
   1e206:	2200      	movs	r2, #0
   1e208:	741a      	strb	r2, [r3, #16]
 }
   1e20a:	46c0      	nop			; (mov r8, r8)
   1e20c:	46bd      	mov	sp, r7
   1e20e:	b002      	add	sp, #8
   1e210:	bd80      	pop	{r7, pc}
	...

0001e214 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e214:	b580      	push	{r7, lr}
   1e216:	b082      	sub	sp, #8
   1e218:	af00      	add	r7, sp, #0
   1e21a:	6078      	str	r0, [r7, #4]
   1e21c:	000a      	movs	r2, r1
   1e21e:	1cfb      	adds	r3, r7, #3
   1e220:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e222:	687b      	ldr	r3, [r7, #4]
   1e224:	681a      	ldr	r2, [r3, #0]
   1e226:	687b      	ldr	r3, [r7, #4]
   1e228:	685b      	ldr	r3, [r3, #4]
   1e22a:	18d3      	adds	r3, r2, r3
   1e22c:	1cfa      	adds	r2, r7, #3
   1e22e:	7812      	ldrb	r2, [r2, #0]
   1e230:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e232:	687b      	ldr	r3, [r7, #4]
   1e234:	0018      	movs	r0, r3
   1e236:	4b03      	ldr	r3, [pc, #12]	; (1e244 <circular_buf_put+0x30>)
   1e238:	4798      	blx	r3
 }
   1e23a:	46c0      	nop			; (mov r8, r8)
   1e23c:	46bd      	mov	sp, r7
   1e23e:	b002      	add	sp, #8
   1e240:	bd80      	pop	{r7, pc}
   1e242:	46c0      	nop			; (mov r8, r8)
   1e244:	0001e121 	.word	0x0001e121

0001e248 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e248:	b580      	push	{r7, lr}
   1e24a:	b084      	sub	sp, #16
   1e24c:	af00      	add	r7, sp, #0
   1e24e:	6078      	str	r0, [r7, #4]
   1e250:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e252:	2301      	movs	r3, #1
   1e254:	425b      	negs	r3, r3
   1e256:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e258:	687b      	ldr	r3, [r7, #4]
   1e25a:	0018      	movs	r0, r3
   1e25c:	4b0d      	ldr	r3, [pc, #52]	; (1e294 <circular_buf_get+0x4c>)
   1e25e:	4798      	blx	r3
   1e260:	0003      	movs	r3, r0
   1e262:	001a      	movs	r2, r3
   1e264:	2301      	movs	r3, #1
   1e266:	4053      	eors	r3, r2
   1e268:	b2db      	uxtb	r3, r3
   1e26a:	2b00      	cmp	r3, #0
   1e26c:	d00d      	beq.n	1e28a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e26e:	687b      	ldr	r3, [r7, #4]
   1e270:	681a      	ldr	r2, [r3, #0]
   1e272:	687b      	ldr	r3, [r7, #4]
   1e274:	689b      	ldr	r3, [r3, #8]
   1e276:	18d3      	adds	r3, r2, r3
   1e278:	781a      	ldrb	r2, [r3, #0]
   1e27a:	683b      	ldr	r3, [r7, #0]
   1e27c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e27e:	687b      	ldr	r3, [r7, #4]
   1e280:	0018      	movs	r0, r3
   1e282:	4b05      	ldr	r3, [pc, #20]	; (1e298 <circular_buf_get+0x50>)
   1e284:	4798      	blx	r3

		 r = 0;
   1e286:	2300      	movs	r3, #0
   1e288:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e28a:	68fb      	ldr	r3, [r7, #12]
 }
   1e28c:	0018      	movs	r0, r3
   1e28e:	46bd      	mov	sp, r7
   1e290:	b004      	add	sp, #16
   1e292:	bd80      	pop	{r7, pc}
   1e294:	0001e29d 	.word	0x0001e29d
   1e298:	0001e181 	.word	0x0001e181

0001e29c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e29c:	b580      	push	{r7, lr}
   1e29e:	b082      	sub	sp, #8
   1e2a0:	af00      	add	r7, sp, #0
   1e2a2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e2a4:	687b      	ldr	r3, [r7, #4]
   1e2a6:	7c1b      	ldrb	r3, [r3, #16]
   1e2a8:	2201      	movs	r2, #1
   1e2aa:	4053      	eors	r3, r2
   1e2ac:	b2db      	uxtb	r3, r3
   1e2ae:	2b00      	cmp	r3, #0
   1e2b0:	d007      	beq.n	1e2c2 <circular_buf_empty+0x26>
   1e2b2:	687b      	ldr	r3, [r7, #4]
   1e2b4:	685a      	ldr	r2, [r3, #4]
   1e2b6:	687b      	ldr	r3, [r7, #4]
   1e2b8:	689b      	ldr	r3, [r3, #8]
   1e2ba:	429a      	cmp	r2, r3
   1e2bc:	d101      	bne.n	1e2c2 <circular_buf_empty+0x26>
   1e2be:	2301      	movs	r3, #1
   1e2c0:	e000      	b.n	1e2c4 <circular_buf_empty+0x28>
   1e2c2:	2300      	movs	r3, #0
   1e2c4:	1c1a      	adds	r2, r3, #0
   1e2c6:	2301      	movs	r3, #1
   1e2c8:	4013      	ands	r3, r2
   1e2ca:	b2db      	uxtb	r3, r3
 }
   1e2cc:	0018      	movs	r0, r3
   1e2ce:	46bd      	mov	sp, r7
   1e2d0:	b002      	add	sp, #8
   1e2d2:	bd80      	pop	{r7, pc}

0001e2d4 <system_interrupt_enable>:
{
   1e2d4:	b580      	push	{r7, lr}
   1e2d6:	b082      	sub	sp, #8
   1e2d8:	af00      	add	r7, sp, #0
   1e2da:	0002      	movs	r2, r0
   1e2dc:	1dfb      	adds	r3, r7, #7
   1e2de:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e2e0:	4b06      	ldr	r3, [pc, #24]	; (1e2fc <system_interrupt_enable+0x28>)
   1e2e2:	1dfa      	adds	r2, r7, #7
   1e2e4:	7812      	ldrb	r2, [r2, #0]
   1e2e6:	0011      	movs	r1, r2
   1e2e8:	221f      	movs	r2, #31
   1e2ea:	400a      	ands	r2, r1
   1e2ec:	2101      	movs	r1, #1
   1e2ee:	4091      	lsls	r1, r2
   1e2f0:	000a      	movs	r2, r1
   1e2f2:	601a      	str	r2, [r3, #0]
}
   1e2f4:	46c0      	nop			; (mov r8, r8)
   1e2f6:	46bd      	mov	sp, r7
   1e2f8:	b002      	add	sp, #8
   1e2fa:	bd80      	pop	{r7, pc}
   1e2fc:	e000e100 	.word	0xe000e100

0001e300 <usart_is_syncing>:
{
   1e300:	b580      	push	{r7, lr}
   1e302:	b084      	sub	sp, #16
   1e304:	af00      	add	r7, sp, #0
   1e306:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e308:	687b      	ldr	r3, [r7, #4]
   1e30a:	681b      	ldr	r3, [r3, #0]
   1e30c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1e30e:	68fb      	ldr	r3, [r7, #12]
   1e310:	69db      	ldr	r3, [r3, #28]
   1e312:	1e5a      	subs	r2, r3, #1
   1e314:	4193      	sbcs	r3, r2
   1e316:	b2db      	uxtb	r3, r3
}
   1e318:	0018      	movs	r0, r3
   1e31a:	46bd      	mov	sp, r7
   1e31c:	b004      	add	sp, #16
   1e31e:	bd80      	pop	{r7, pc}

0001e320 <_usart_wait_for_sync>:
{
   1e320:	b580      	push	{r7, lr}
   1e322:	b082      	sub	sp, #8
   1e324:	af00      	add	r7, sp, #0
   1e326:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1e328:	46c0      	nop			; (mov r8, r8)
   1e32a:	687b      	ldr	r3, [r7, #4]
   1e32c:	0018      	movs	r0, r3
   1e32e:	4b04      	ldr	r3, [pc, #16]	; (1e340 <_usart_wait_for_sync+0x20>)
   1e330:	4798      	blx	r3
   1e332:	1e03      	subs	r3, r0, #0
   1e334:	d1f9      	bne.n	1e32a <_usart_wait_for_sync+0xa>
}
   1e336:	46c0      	nop			; (mov r8, r8)
   1e338:	46bd      	mov	sp, r7
   1e33a:	b002      	add	sp, #8
   1e33c:	bd80      	pop	{r7, pc}
   1e33e:	46c0      	nop			; (mov r8, r8)
   1e340:	0001e301 	.word	0x0001e301

0001e344 <usart_get_config_defaults>:
{
   1e344:	b580      	push	{r7, lr}
   1e346:	b082      	sub	sp, #8
   1e348:	af00      	add	r7, sp, #0
   1e34a:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1e34c:	687b      	ldr	r3, [r7, #4]
   1e34e:	2280      	movs	r2, #128	; 0x80
   1e350:	05d2      	lsls	r2, r2, #23
   1e352:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e354:	687b      	ldr	r3, [r7, #4]
   1e356:	2200      	movs	r2, #0
   1e358:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e35a:	687b      	ldr	r3, [r7, #4]
   1e35c:	22ff      	movs	r2, #255	; 0xff
   1e35e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e360:	687b      	ldr	r3, [r7, #4]
   1e362:	2200      	movs	r2, #0
   1e364:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e366:	687b      	ldr	r3, [r7, #4]
   1e368:	2200      	movs	r2, #0
   1e36a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e36c:	687b      	ldr	r3, [r7, #4]
   1e36e:	2296      	movs	r2, #150	; 0x96
   1e370:	0192      	lsls	r2, r2, #6
   1e372:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e374:	687b      	ldr	r3, [r7, #4]
   1e376:	2224      	movs	r2, #36	; 0x24
   1e378:	2101      	movs	r1, #1
   1e37a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e37c:	687b      	ldr	r3, [r7, #4]
   1e37e:	2225      	movs	r2, #37	; 0x25
   1e380:	2101      	movs	r1, #1
   1e382:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e384:	687b      	ldr	r3, [r7, #4]
   1e386:	2226      	movs	r2, #38	; 0x26
   1e388:	2100      	movs	r1, #0
   1e38a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e38c:	687b      	ldr	r3, [r7, #4]
   1e38e:	2227      	movs	r2, #39	; 0x27
   1e390:	2100      	movs	r1, #0
   1e392:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e394:	687b      	ldr	r3, [r7, #4]
   1e396:	2200      	movs	r2, #0
   1e398:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e39a:	687b      	ldr	r3, [r7, #4]
   1e39c:	2288      	movs	r2, #136	; 0x88
   1e39e:	0352      	lsls	r2, r2, #13
   1e3a0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e3a2:	687b      	ldr	r3, [r7, #4]
   1e3a4:	222c      	movs	r2, #44	; 0x2c
   1e3a6:	2100      	movs	r1, #0
   1e3a8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e3aa:	687b      	ldr	r3, [r7, #4]
   1e3ac:	222d      	movs	r2, #45	; 0x2d
   1e3ae:	2100      	movs	r1, #0
   1e3b0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e3b2:	687b      	ldr	r3, [r7, #4]
   1e3b4:	2200      	movs	r2, #0
   1e3b6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e3b8:	687b      	ldr	r3, [r7, #4]
   1e3ba:	2200      	movs	r2, #0
   1e3bc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e3be:	687b      	ldr	r3, [r7, #4]
   1e3c0:	2200      	movs	r2, #0
   1e3c2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e3c4:	687b      	ldr	r3, [r7, #4]
   1e3c6:	2200      	movs	r2, #0
   1e3c8:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e3ca:	687b      	ldr	r3, [r7, #4]
   1e3cc:	2200      	movs	r2, #0
   1e3ce:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e3d0:	687b      	ldr	r3, [r7, #4]
   1e3d2:	2200      	movs	r2, #0
   1e3d4:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1e3d6:	687b      	ldr	r3, [r7, #4]
   1e3d8:	2200      	movs	r2, #0
   1e3da:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1e3dc:	687b      	ldr	r3, [r7, #4]
   1e3de:	2200      	movs	r2, #0
   1e3e0:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1e3e2:	687b      	ldr	r3, [r7, #4]
   1e3e4:	2200      	movs	r2, #0
   1e3e6:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1e3e8:	687b      	ldr	r3, [r7, #4]
   1e3ea:	2200      	movs	r2, #0
   1e3ec:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e3ee:	687b      	ldr	r3, [r7, #4]
   1e3f0:	2213      	movs	r2, #19
   1e3f2:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1e3f4:	687b      	ldr	r3, [r7, #4]
   1e3f6:	2200      	movs	r2, #0
   1e3f8:	775a      	strb	r2, [r3, #29]
}
   1e3fa:	46c0      	nop			; (mov r8, r8)
   1e3fc:	46bd      	mov	sp, r7
   1e3fe:	b002      	add	sp, #8
   1e400:	bd80      	pop	{r7, pc}
	...

0001e404 <usart_enable>:
{
   1e404:	b580      	push	{r7, lr}
   1e406:	b084      	sub	sp, #16
   1e408:	af00      	add	r7, sp, #0
   1e40a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e40c:	687b      	ldr	r3, [r7, #4]
   1e40e:	681b      	ldr	r3, [r3, #0]
   1e410:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e412:	687b      	ldr	r3, [r7, #4]
   1e414:	681b      	ldr	r3, [r3, #0]
   1e416:	0018      	movs	r0, r3
   1e418:	4b09      	ldr	r3, [pc, #36]	; (1e440 <usart_enable+0x3c>)
   1e41a:	4798      	blx	r3
   1e41c:	0003      	movs	r3, r0
   1e41e:	0018      	movs	r0, r3
   1e420:	4b08      	ldr	r3, [pc, #32]	; (1e444 <usart_enable+0x40>)
   1e422:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1e424:	687b      	ldr	r3, [r7, #4]
   1e426:	0018      	movs	r0, r3
   1e428:	4b07      	ldr	r3, [pc, #28]	; (1e448 <usart_enable+0x44>)
   1e42a:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e42c:	68fb      	ldr	r3, [r7, #12]
   1e42e:	681b      	ldr	r3, [r3, #0]
   1e430:	2202      	movs	r2, #2
   1e432:	431a      	orrs	r2, r3
   1e434:	68fb      	ldr	r3, [r7, #12]
   1e436:	601a      	str	r2, [r3, #0]
}
   1e438:	46c0      	nop			; (mov r8, r8)
   1e43a:	46bd      	mov	sp, r7
   1e43c:	b004      	add	sp, #16
   1e43e:	bd80      	pop	{r7, pc}
   1e440:	00027d31 	.word	0x00027d31
   1e444:	0001e2d5 	.word	0x0001e2d5
   1e448:	0001e321 	.word	0x0001e321

0001e44c <usart_enable_callback>:
{
   1e44c:	b580      	push	{r7, lr}
   1e44e:	b082      	sub	sp, #8
   1e450:	af00      	add	r7, sp, #0
   1e452:	6078      	str	r0, [r7, #4]
   1e454:	000a      	movs	r2, r1
   1e456:	1cfb      	adds	r3, r7, #3
   1e458:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1e45a:	687b      	ldr	r3, [r7, #4]
   1e45c:	2231      	movs	r2, #49	; 0x31
   1e45e:	5c9b      	ldrb	r3, [r3, r2]
   1e460:	b25a      	sxtb	r2, r3
   1e462:	1cfb      	adds	r3, r7, #3
   1e464:	781b      	ldrb	r3, [r3, #0]
   1e466:	2101      	movs	r1, #1
   1e468:	4099      	lsls	r1, r3
   1e46a:	000b      	movs	r3, r1
   1e46c:	b25b      	sxtb	r3, r3
   1e46e:	4313      	orrs	r3, r2
   1e470:	b25b      	sxtb	r3, r3
   1e472:	b2d9      	uxtb	r1, r3
   1e474:	687b      	ldr	r3, [r7, #4]
   1e476:	2231      	movs	r2, #49	; 0x31
   1e478:	5499      	strb	r1, [r3, r2]
}
   1e47a:	46c0      	nop			; (mov r8, r8)
   1e47c:	46bd      	mov	sp, r7
   1e47e:	b002      	add	sp, #8
   1e480:	bd80      	pop	{r7, pc}
	...

0001e484 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e484:	b580      	push	{r7, lr}
   1e486:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e488:	2380      	movs	r3, #128	; 0x80
   1e48a:	009a      	lsls	r2, r3, #2
   1e48c:	4b0f      	ldr	r3, [pc, #60]	; (1e4cc <InitializeSerialConsole+0x48>)
   1e48e:	0011      	movs	r1, r2
   1e490:	0018      	movs	r0, r3
   1e492:	4b0f      	ldr	r3, [pc, #60]	; (1e4d0 <InitializeSerialConsole+0x4c>)
   1e494:	4798      	blx	r3
   1e496:	0002      	movs	r2, r0
   1e498:	4b0e      	ldr	r3, [pc, #56]	; (1e4d4 <InitializeSerialConsole+0x50>)
   1e49a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e49c:	2380      	movs	r3, #128	; 0x80
   1e49e:	009a      	lsls	r2, r3, #2
   1e4a0:	4b0d      	ldr	r3, [pc, #52]	; (1e4d8 <InitializeSerialConsole+0x54>)
   1e4a2:	0011      	movs	r1, r2
   1e4a4:	0018      	movs	r0, r3
   1e4a6:	4b0a      	ldr	r3, [pc, #40]	; (1e4d0 <InitializeSerialConsole+0x4c>)
   1e4a8:	4798      	blx	r3
   1e4aa:	0002      	movs	r2, r0
   1e4ac:	4b0b      	ldr	r3, [pc, #44]	; (1e4dc <InitializeSerialConsole+0x58>)
   1e4ae:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e4b0:	4b0b      	ldr	r3, [pc, #44]	; (1e4e0 <InitializeSerialConsole+0x5c>)
   1e4b2:	4798      	blx	r3
    configure_usart_callbacks();
   1e4b4:	4b0b      	ldr	r3, [pc, #44]	; (1e4e4 <InitializeSerialConsole+0x60>)
   1e4b6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e4b8:	490b      	ldr	r1, [pc, #44]	; (1e4e8 <InitializeSerialConsole+0x64>)
   1e4ba:	4b0c      	ldr	r3, [pc, #48]	; (1e4ec <InitializeSerialConsole+0x68>)
   1e4bc:	2201      	movs	r2, #1
   1e4be:	0018      	movs	r0, r3
   1e4c0:	4b0b      	ldr	r3, [pc, #44]	; (1e4f0 <InitializeSerialConsole+0x6c>)
   1e4c2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e4c4:	46c0      	nop			; (mov r8, r8)
   1e4c6:	46bd      	mov	sp, r7
   1e4c8:	bd80      	pop	{r7, pc}
   1e4ca:	46c0      	nop			; (mov r8, r8)
   1e4cc:	20005a54 	.word	0x20005a54
   1e4d0:	0001e1b5 	.word	0x0001e1b5
   1e4d4:	2000584c 	.word	0x2000584c
   1e4d8:	20005854 	.word	0x20005854
   1e4dc:	20005c58 	.word	0x20005c58
   1e4e0:	0001e659 	.word	0x0001e659
   1e4e4:	0001e6d1 	.word	0x0001e6d1
   1e4e8:	20005850 	.word	0x20005850
   1e4ec:	20005818 	.word	0x20005818
   1e4f0:	000295d9 	.word	0x000295d9

0001e4f4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e4f4:	b580      	push	{r7, lr}
   1e4f6:	b084      	sub	sp, #16
   1e4f8:	af00      	add	r7, sp, #0
   1e4fa:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e4fc:	4b1a      	ldr	r3, [pc, #104]	; (1e568 <SerialConsoleWriteString+0x74>)
   1e4fe:	4798      	blx	r3
    if (string != NULL) {
   1e500:	687b      	ldr	r3, [r7, #4]
   1e502:	2b00      	cmp	r3, #0
   1e504:	d02a      	beq.n	1e55c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e506:	2300      	movs	r3, #0
   1e508:	60fb      	str	r3, [r7, #12]
   1e50a:	e00b      	b.n	1e524 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e50c:	4b17      	ldr	r3, [pc, #92]	; (1e56c <SerialConsoleWriteString+0x78>)
   1e50e:	6818      	ldr	r0, [r3, #0]
   1e510:	687a      	ldr	r2, [r7, #4]
   1e512:	68fb      	ldr	r3, [r7, #12]
   1e514:	18d3      	adds	r3, r2, r3
   1e516:	781b      	ldrb	r3, [r3, #0]
   1e518:	0019      	movs	r1, r3
   1e51a:	4b15      	ldr	r3, [pc, #84]	; (1e570 <SerialConsoleWriteString+0x7c>)
   1e51c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e51e:	68fb      	ldr	r3, [r7, #12]
   1e520:	3301      	adds	r3, #1
   1e522:	60fb      	str	r3, [r7, #12]
   1e524:	687b      	ldr	r3, [r7, #4]
   1e526:	0018      	movs	r0, r3
   1e528:	4b12      	ldr	r3, [pc, #72]	; (1e574 <SerialConsoleWriteString+0x80>)
   1e52a:	4798      	blx	r3
   1e52c:	0002      	movs	r2, r0
   1e52e:	68fb      	ldr	r3, [r7, #12]
   1e530:	429a      	cmp	r2, r3
   1e532:	d8eb      	bhi.n	1e50c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e534:	4b10      	ldr	r3, [pc, #64]	; (1e578 <SerialConsoleWriteString+0x84>)
   1e536:	2101      	movs	r1, #1
   1e538:	0018      	movs	r0, r3
   1e53a:	4b10      	ldr	r3, [pc, #64]	; (1e57c <SerialConsoleWriteString+0x88>)
   1e53c:	4798      	blx	r3
   1e53e:	1e03      	subs	r3, r0, #0
   1e540:	d10c      	bne.n	1e55c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e542:	4b0a      	ldr	r3, [pc, #40]	; (1e56c <SerialConsoleWriteString+0x78>)
   1e544:	681b      	ldr	r3, [r3, #0]
   1e546:	4a0e      	ldr	r2, [pc, #56]	; (1e580 <SerialConsoleWriteString+0x8c>)
   1e548:	0011      	movs	r1, r2
   1e54a:	0018      	movs	r0, r3
   1e54c:	4b0d      	ldr	r3, [pc, #52]	; (1e584 <SerialConsoleWriteString+0x90>)
   1e54e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e550:	490b      	ldr	r1, [pc, #44]	; (1e580 <SerialConsoleWriteString+0x8c>)
   1e552:	4b09      	ldr	r3, [pc, #36]	; (1e578 <SerialConsoleWriteString+0x84>)
   1e554:	2201      	movs	r2, #1
   1e556:	0018      	movs	r0, r3
   1e558:	4b0b      	ldr	r3, [pc, #44]	; (1e588 <SerialConsoleWriteString+0x94>)
   1e55a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e55c:	4b0b      	ldr	r3, [pc, #44]	; (1e58c <SerialConsoleWriteString+0x98>)
   1e55e:	4798      	blx	r3
}
   1e560:	46c0      	nop			; (mov r8, r8)
   1e562:	46bd      	mov	sp, r7
   1e564:	b004      	add	sp, #16
   1e566:	bd80      	pop	{r7, pc}
   1e568:	0001cb61 	.word	0x0001cb61
   1e56c:	20005c58 	.word	0x20005c58
   1e570:	0001e215 	.word	0x0001e215
   1e574:	0003572f 	.word	0x0003572f
   1e578:	20005818 	.word	0x20005818
   1e57c:	00029621 	.word	0x00029621
   1e580:	20005c54 	.word	0x20005c54
   1e584:	0001e249 	.word	0x0001e249
   1e588:	00029591 	.word	0x00029591
   1e58c:	0001cb79 	.word	0x0001cb79

0001e590 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e590:	b580      	push	{r7, lr}
   1e592:	b084      	sub	sp, #16
   1e594:	af00      	add	r7, sp, #0
   1e596:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e598:	4b08      	ldr	r3, [pc, #32]	; (1e5bc <SerialConsoleReadCharacter+0x2c>)
   1e59a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e59c:	4b08      	ldr	r3, [pc, #32]	; (1e5c0 <SerialConsoleReadCharacter+0x30>)
   1e59e:	681b      	ldr	r3, [r3, #0]
   1e5a0:	687a      	ldr	r2, [r7, #4]
   1e5a2:	0011      	movs	r1, r2
   1e5a4:	0018      	movs	r0, r3
   1e5a6:	4b07      	ldr	r3, [pc, #28]	; (1e5c4 <SerialConsoleReadCharacter+0x34>)
   1e5a8:	4798      	blx	r3
   1e5aa:	0003      	movs	r3, r0
   1e5ac:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e5ae:	4b06      	ldr	r3, [pc, #24]	; (1e5c8 <SerialConsoleReadCharacter+0x38>)
   1e5b0:	4798      	blx	r3
    return a;
   1e5b2:	68fb      	ldr	r3, [r7, #12]
}
   1e5b4:	0018      	movs	r0, r3
   1e5b6:	46bd      	mov	sp, r7
   1e5b8:	b004      	add	sp, #16
   1e5ba:	bd80      	pop	{r7, pc}
   1e5bc:	0001cb61 	.word	0x0001cb61
   1e5c0:	2000584c 	.word	0x2000584c
   1e5c4:	0001e249 	.word	0x0001e249
   1e5c8:	0001cb79 	.word	0x0001cb79

0001e5cc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e5cc:	b580      	push	{r7, lr}
   1e5ce:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e5d0:	4b02      	ldr	r3, [pc, #8]	; (1e5dc <getLogLevel+0x10>)
   1e5d2:	781b      	ldrb	r3, [r3, #0]
}
   1e5d4:	0018      	movs	r0, r3
   1e5d6:	46bd      	mov	sp, r7
   1e5d8:	bd80      	pop	{r7, pc}
   1e5da:	46c0      	nop			; (mov r8, r8)
   1e5dc:	2000422c 	.word	0x2000422c

0001e5e0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e5e0:	b40e      	push	{r1, r2, r3}
   1e5e2:	b590      	push	{r4, r7, lr}
   1e5e4:	b084      	sub	sp, #16
   1e5e6:	af00      	add	r7, sp, #0
   1e5e8:	0002      	movs	r2, r0
   1e5ea:	1dfb      	adds	r3, r7, #7
   1e5ec:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e5ee:	4b0e      	ldr	r3, [pc, #56]	; (1e628 <LogMessage+0x48>)
   1e5f0:	4798      	blx	r3
   1e5f2:	0003      	movs	r3, r0
   1e5f4:	001a      	movs	r2, r3
   1e5f6:	1dfb      	adds	r3, r7, #7
   1e5f8:	781b      	ldrb	r3, [r3, #0]
   1e5fa:	4293      	cmp	r3, r2
   1e5fc:	d30c      	bcc.n	1e618 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e5fe:	2320      	movs	r3, #32
   1e600:	18fb      	adds	r3, r7, r3
   1e602:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e604:	68fb      	ldr	r3, [r7, #12]
   1e606:	69fa      	ldr	r2, [r7, #28]
   1e608:	4808      	ldr	r0, [pc, #32]	; (1e62c <LogMessage+0x4c>)
   1e60a:	217f      	movs	r1, #127	; 0x7f
   1e60c:	4c08      	ldr	r4, [pc, #32]	; (1e630 <LogMessage+0x50>)
   1e60e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e610:	4b06      	ldr	r3, [pc, #24]	; (1e62c <LogMessage+0x4c>)
   1e612:	0018      	movs	r0, r3
   1e614:	4b07      	ldr	r3, [pc, #28]	; (1e634 <LogMessage+0x54>)
   1e616:	4798      	blx	r3
        va_end(ap);
    }
};
   1e618:	46c0      	nop			; (mov r8, r8)
   1e61a:	46bd      	mov	sp, r7
   1e61c:	b004      	add	sp, #16
   1e61e:	bc90      	pop	{r4, r7}
   1e620:	bc08      	pop	{r3}
   1e622:	b003      	add	sp, #12
   1e624:	4718      	bx	r3
   1e626:	46c0      	nop			; (mov r8, r8)
   1e628:	0001e5cd 	.word	0x0001e5cd
   1e62c:	20005798 	.word	0x20005798
   1e630:	000365cd 	.word	0x000365cd
   1e634:	0001e4f5 	.word	0x0001e4f5

0001e638 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e638:	b40f      	push	{r0, r1, r2, r3}
   1e63a:	b580      	push	{r7, lr}
   1e63c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e63e:	68bb      	ldr	r3, [r7, #8]
   1e640:	0019      	movs	r1, r3
   1e642:	2001      	movs	r0, #1
   1e644:	4b03      	ldr	r3, [pc, #12]	; (1e654 <LogMessageDebug+0x1c>)
   1e646:	4798      	blx	r3
};
   1e648:	46c0      	nop			; (mov r8, r8)
   1e64a:	46bd      	mov	sp, r7
   1e64c:	bc80      	pop	{r7}
   1e64e:	bc08      	pop	{r3}
   1e650:	b004      	add	sp, #16
   1e652:	4718      	bx	r3
   1e654:	0001e5e1 	.word	0x0001e5e1

0001e658 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1e658:	b580      	push	{r7, lr}
   1e65a:	b090      	sub	sp, #64	; 0x40
   1e65c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1e65e:	003b      	movs	r3, r7
   1e660:	0018      	movs	r0, r3
   1e662:	4b14      	ldr	r3, [pc, #80]	; (1e6b4 <configure_usart+0x5c>)
   1e664:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1e666:	003b      	movs	r3, r7
   1e668:	22e1      	movs	r2, #225	; 0xe1
   1e66a:	0252      	lsls	r2, r2, #9
   1e66c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1e66e:	003b      	movs	r3, r7
   1e670:	22c4      	movs	r2, #196	; 0xc4
   1e672:	0392      	lsls	r2, r2, #14
   1e674:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1e676:	003b      	movs	r3, r7
   1e678:	2201      	movs	r2, #1
   1e67a:	4252      	negs	r2, r2
   1e67c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1e67e:	003b      	movs	r3, r7
   1e680:	2201      	movs	r2, #1
   1e682:	4252      	negs	r2, r2
   1e684:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1e686:	003b      	movs	r3, r7
   1e688:	4a0b      	ldr	r2, [pc, #44]	; (1e6b8 <configure_usart+0x60>)
   1e68a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1e68c:	003b      	movs	r3, r7
   1e68e:	4a0b      	ldr	r2, [pc, #44]	; (1e6bc <configure_usart+0x64>)
   1e690:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1e692:	46c0      	nop			; (mov r8, r8)
   1e694:	003a      	movs	r2, r7
   1e696:	490a      	ldr	r1, [pc, #40]	; (1e6c0 <configure_usart+0x68>)
   1e698:	4b0a      	ldr	r3, [pc, #40]	; (1e6c4 <configure_usart+0x6c>)
   1e69a:	0018      	movs	r0, r3
   1e69c:	4b0a      	ldr	r3, [pc, #40]	; (1e6c8 <configure_usart+0x70>)
   1e69e:	4798      	blx	r3
   1e6a0:	1e03      	subs	r3, r0, #0
   1e6a2:	d1f7      	bne.n	1e694 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1e6a4:	4b07      	ldr	r3, [pc, #28]	; (1e6c4 <configure_usart+0x6c>)
   1e6a6:	0018      	movs	r0, r3
   1e6a8:	4b08      	ldr	r3, [pc, #32]	; (1e6cc <configure_usart+0x74>)
   1e6aa:	4798      	blx	r3
}
   1e6ac:	46c0      	nop			; (mov r8, r8)
   1e6ae:	46bd      	mov	sp, r7
   1e6b0:	b010      	add	sp, #64	; 0x40
   1e6b2:	bd80      	pop	{r7, pc}
   1e6b4:	0001e345 	.word	0x0001e345
   1e6b8:	002a0003 	.word	0x002a0003
   1e6bc:	002b0003 	.word	0x002b0003
   1e6c0:	42001800 	.word	0x42001800
   1e6c4:	20005818 	.word	0x20005818
   1e6c8:	00029195 	.word	0x00029195
   1e6cc:	0001e405 	.word	0x0001e405

0001e6d0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1e6d0:	b580      	push	{r7, lr}
   1e6d2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e6d4:	490c      	ldr	r1, [pc, #48]	; (1e708 <configure_usart_callbacks+0x38>)
   1e6d6:	4b0d      	ldr	r3, [pc, #52]	; (1e70c <configure_usart_callbacks+0x3c>)
   1e6d8:	2200      	movs	r2, #0
   1e6da:	0018      	movs	r0, r3
   1e6dc:	4b0c      	ldr	r3, [pc, #48]	; (1e710 <configure_usart_callbacks+0x40>)
   1e6de:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1e6e0:	490c      	ldr	r1, [pc, #48]	; (1e714 <configure_usart_callbacks+0x44>)
   1e6e2:	4b0a      	ldr	r3, [pc, #40]	; (1e70c <configure_usart_callbacks+0x3c>)
   1e6e4:	2201      	movs	r2, #1
   1e6e6:	0018      	movs	r0, r3
   1e6e8:	4b09      	ldr	r3, [pc, #36]	; (1e710 <configure_usart_callbacks+0x40>)
   1e6ea:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e6ec:	4b07      	ldr	r3, [pc, #28]	; (1e70c <configure_usart_callbacks+0x3c>)
   1e6ee:	2100      	movs	r1, #0
   1e6f0:	0018      	movs	r0, r3
   1e6f2:	4b09      	ldr	r3, [pc, #36]	; (1e718 <configure_usart_callbacks+0x48>)
   1e6f4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1e6f6:	4b05      	ldr	r3, [pc, #20]	; (1e70c <configure_usart_callbacks+0x3c>)
   1e6f8:	2101      	movs	r1, #1
   1e6fa:	0018      	movs	r0, r3
   1e6fc:	4b06      	ldr	r3, [pc, #24]	; (1e718 <configure_usart_callbacks+0x48>)
   1e6fe:	4798      	blx	r3
}
   1e700:	46c0      	nop			; (mov r8, r8)
   1e702:	46bd      	mov	sp, r7
   1e704:	bd80      	pop	{r7, pc}
   1e706:	46c0      	nop			; (mov r8, r8)
   1e708:	0001e765 	.word	0x0001e765
   1e70c:	20005818 	.word	0x20005818
   1e710:	00029549 	.word	0x00029549
   1e714:	0001e71d 	.word	0x0001e71d
   1e718:	0001e44d 	.word	0x0001e44d

0001e71c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1e71c:	b580      	push	{r7, lr}
   1e71e:	b082      	sub	sp, #8
   1e720:	af00      	add	r7, sp, #0
   1e722:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1e724:	4b09      	ldr	r3, [pc, #36]	; (1e74c <usart_read_callback+0x30>)
   1e726:	681a      	ldr	r2, [r3, #0]
   1e728:	4b09      	ldr	r3, [pc, #36]	; (1e750 <usart_read_callback+0x34>)
   1e72a:	781b      	ldrb	r3, [r3, #0]
   1e72c:	0019      	movs	r1, r3
   1e72e:	0010      	movs	r0, r2
   1e730:	4b08      	ldr	r3, [pc, #32]	; (1e754 <usart_read_callback+0x38>)
   1e732:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1e734:	4906      	ldr	r1, [pc, #24]	; (1e750 <usart_read_callback+0x34>)
   1e736:	4b08      	ldr	r3, [pc, #32]	; (1e758 <usart_read_callback+0x3c>)
   1e738:	2201      	movs	r2, #1
   1e73a:	0018      	movs	r0, r3
   1e73c:	4b07      	ldr	r3, [pc, #28]	; (1e75c <usart_read_callback+0x40>)
   1e73e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1e740:	4b07      	ldr	r3, [pc, #28]	; (1e760 <usart_read_callback+0x44>)
   1e742:	4798      	blx	r3
}
   1e744:	46c0      	nop			; (mov r8, r8)
   1e746:	46bd      	mov	sp, r7
   1e748:	b002      	add	sp, #8
   1e74a:	bd80      	pop	{r7, pc}
   1e74c:	2000584c 	.word	0x2000584c
   1e750:	20005850 	.word	0x20005850
   1e754:	0001e215 	.word	0x0001e215
   1e758:	20005818 	.word	0x20005818
   1e75c:	000295d9 	.word	0x000295d9
   1e760:	00013b59 	.word	0x00013b59

0001e764 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1e764:	b580      	push	{r7, lr}
   1e766:	b082      	sub	sp, #8
   1e768:	af00      	add	r7, sp, #0
   1e76a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1e76c:	4b09      	ldr	r3, [pc, #36]	; (1e794 <usart_write_callback+0x30>)
   1e76e:	681b      	ldr	r3, [r3, #0]
   1e770:	4a09      	ldr	r2, [pc, #36]	; (1e798 <usart_write_callback+0x34>)
   1e772:	0011      	movs	r1, r2
   1e774:	0018      	movs	r0, r3
   1e776:	4b09      	ldr	r3, [pc, #36]	; (1e79c <usart_write_callback+0x38>)
   1e778:	4798      	blx	r3
   1e77a:	0003      	movs	r3, r0
   1e77c:	3301      	adds	r3, #1
   1e77e:	d005      	beq.n	1e78c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e780:	4905      	ldr	r1, [pc, #20]	; (1e798 <usart_write_callback+0x34>)
   1e782:	4b07      	ldr	r3, [pc, #28]	; (1e7a0 <usart_write_callback+0x3c>)
   1e784:	2201      	movs	r2, #1
   1e786:	0018      	movs	r0, r3
   1e788:	4b06      	ldr	r3, [pc, #24]	; (1e7a4 <usart_write_callback+0x40>)
   1e78a:	4798      	blx	r3
    }
}
   1e78c:	46c0      	nop			; (mov r8, r8)
   1e78e:	46bd      	mov	sp, r7
   1e790:	b002      	add	sp, #8
   1e792:	bd80      	pop	{r7, pc}
   1e794:	20005c58 	.word	0x20005c58
   1e798:	20005c54 	.word	0x20005c54
   1e79c:	0001e249 	.word	0x0001e249
   1e7a0:	20005818 	.word	0x20005818
   1e7a4:	00029591 	.word	0x00029591

0001e7a8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1e7a8:	b590      	push	{r4, r7, lr}
   1e7aa:	b087      	sub	sp, #28
   1e7ac:	af00      	add	r7, sp, #0
   1e7ae:	60f8      	str	r0, [r7, #12]
   1e7b0:	000c      	movs	r4, r1
   1e7b2:	0010      	movs	r0, r2
   1e7b4:	0019      	movs	r1, r3
   1e7b6:	230a      	movs	r3, #10
   1e7b8:	18fb      	adds	r3, r7, r3
   1e7ba:	1c22      	adds	r2, r4, #0
   1e7bc:	801a      	strh	r2, [r3, #0]
   1e7be:	2308      	movs	r3, #8
   1e7c0:	18fb      	adds	r3, r7, r3
   1e7c2:	1c02      	adds	r2, r0, #0
   1e7c4:	801a      	strh	r2, [r3, #0]
   1e7c6:	1dfb      	adds	r3, r7, #7
   1e7c8:	1c0a      	adds	r2, r1, #0
   1e7ca:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1e7cc:	230a      	movs	r3, #10
   1e7ce:	18fb      	adds	r3, r7, r3
   1e7d0:	881a      	ldrh	r2, [r3, #0]
   1e7d2:	2308      	movs	r3, #8
   1e7d4:	18fb      	adds	r3, r7, r3
   1e7d6:	881b      	ldrh	r3, [r3, #0]
   1e7d8:	1ad3      	subs	r3, r2, r3
   1e7da:	3307      	adds	r3, #7
   1e7dc:	2b00      	cmp	r3, #0
   1e7de:	da00      	bge.n	1e7e2 <SDMMC_UNSTUFF_BITS+0x3a>
   1e7e0:	3307      	adds	r3, #7
   1e7e2:	10db      	asrs	r3, r3, #3
   1e7e4:	3b01      	subs	r3, #1
   1e7e6:	68fa      	ldr	r2, [r7, #12]
   1e7e8:	18d3      	adds	r3, r2, r3
   1e7ea:	781b      	ldrb	r3, [r3, #0]
   1e7ec:	0019      	movs	r1, r3
   1e7ee:	2308      	movs	r3, #8
   1e7f0:	18fb      	adds	r3, r7, r3
   1e7f2:	881b      	ldrh	r3, [r3, #0]
   1e7f4:	2207      	movs	r2, #7
   1e7f6:	4013      	ands	r3, r2
   1e7f8:	4119      	asrs	r1, r3
   1e7fa:	000b      	movs	r3, r1
   1e7fc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1e7fe:	2308      	movs	r3, #8
   1e800:	18fb      	adds	r3, r7, r3
   1e802:	881b      	ldrh	r3, [r3, #0]
   1e804:	2207      	movs	r2, #7
   1e806:	401a      	ands	r2, r3
   1e808:	1dfb      	adds	r3, r7, #7
   1e80a:	781b      	ldrb	r3, [r3, #0]
   1e80c:	18d3      	adds	r3, r2, r3
   1e80e:	2b08      	cmp	r3, #8
   1e810:	dd1c      	ble.n	1e84c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e812:	230a      	movs	r3, #10
   1e814:	18fb      	adds	r3, r7, r3
   1e816:	881a      	ldrh	r2, [r3, #0]
   1e818:	2308      	movs	r3, #8
   1e81a:	18fb      	adds	r3, r7, r3
   1e81c:	881b      	ldrh	r3, [r3, #0]
   1e81e:	1ad3      	subs	r3, r2, r3
   1e820:	3307      	adds	r3, #7
   1e822:	2b00      	cmp	r3, #0
   1e824:	da00      	bge.n	1e828 <SDMMC_UNSTUFF_BITS+0x80>
   1e826:	3307      	adds	r3, #7
   1e828:	10db      	asrs	r3, r3, #3
   1e82a:	3b02      	subs	r3, #2
   1e82c:	68fa      	ldr	r2, [r7, #12]
   1e82e:	18d3      	adds	r3, r2, r3
   1e830:	781b      	ldrb	r3, [r3, #0]
   1e832:	0019      	movs	r1, r3
   1e834:	2308      	movs	r3, #8
   1e836:	18fb      	adds	r3, r7, r3
   1e838:	881b      	ldrh	r3, [r3, #0]
   1e83a:	2207      	movs	r2, #7
   1e83c:	4013      	ands	r3, r2
   1e83e:	2208      	movs	r2, #8
   1e840:	1ad3      	subs	r3, r2, r3
   1e842:	4099      	lsls	r1, r3
   1e844:	000b      	movs	r3, r1
   1e846:	697a      	ldr	r2, [r7, #20]
   1e848:	4313      	orrs	r3, r2
   1e84a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e84c:	2308      	movs	r3, #8
   1e84e:	18fb      	adds	r3, r7, r3
   1e850:	881b      	ldrh	r3, [r3, #0]
   1e852:	2207      	movs	r2, #7
   1e854:	401a      	ands	r2, r3
   1e856:	1dfb      	adds	r3, r7, #7
   1e858:	781b      	ldrb	r3, [r3, #0]
   1e85a:	18d3      	adds	r3, r2, r3
   1e85c:	2b10      	cmp	r3, #16
   1e85e:	dd1c      	ble.n	1e89a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e860:	230a      	movs	r3, #10
   1e862:	18fb      	adds	r3, r7, r3
   1e864:	881a      	ldrh	r2, [r3, #0]
   1e866:	2308      	movs	r3, #8
   1e868:	18fb      	adds	r3, r7, r3
   1e86a:	881b      	ldrh	r3, [r3, #0]
   1e86c:	1ad3      	subs	r3, r2, r3
   1e86e:	3307      	adds	r3, #7
   1e870:	2b00      	cmp	r3, #0
   1e872:	da00      	bge.n	1e876 <SDMMC_UNSTUFF_BITS+0xce>
   1e874:	3307      	adds	r3, #7
   1e876:	10db      	asrs	r3, r3, #3
   1e878:	3b03      	subs	r3, #3
   1e87a:	68fa      	ldr	r2, [r7, #12]
   1e87c:	18d3      	adds	r3, r2, r3
   1e87e:	781b      	ldrb	r3, [r3, #0]
   1e880:	0019      	movs	r1, r3
   1e882:	2308      	movs	r3, #8
   1e884:	18fb      	adds	r3, r7, r3
   1e886:	881b      	ldrh	r3, [r3, #0]
   1e888:	2207      	movs	r2, #7
   1e88a:	4013      	ands	r3, r2
   1e88c:	2210      	movs	r2, #16
   1e88e:	1ad3      	subs	r3, r2, r3
   1e890:	4099      	lsls	r1, r3
   1e892:	000b      	movs	r3, r1
   1e894:	697a      	ldr	r2, [r7, #20]
   1e896:	4313      	orrs	r3, r2
   1e898:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e89a:	2308      	movs	r3, #8
   1e89c:	18fb      	adds	r3, r7, r3
   1e89e:	881b      	ldrh	r3, [r3, #0]
   1e8a0:	2207      	movs	r2, #7
   1e8a2:	401a      	ands	r2, r3
   1e8a4:	1dfb      	adds	r3, r7, #7
   1e8a6:	781b      	ldrb	r3, [r3, #0]
   1e8a8:	18d3      	adds	r3, r2, r3
   1e8aa:	2b10      	cmp	r3, #16
   1e8ac:	dd1c      	ble.n	1e8e8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e8ae:	230a      	movs	r3, #10
   1e8b0:	18fb      	adds	r3, r7, r3
   1e8b2:	881a      	ldrh	r2, [r3, #0]
   1e8b4:	2308      	movs	r3, #8
   1e8b6:	18fb      	adds	r3, r7, r3
   1e8b8:	881b      	ldrh	r3, [r3, #0]
   1e8ba:	1ad3      	subs	r3, r2, r3
   1e8bc:	3307      	adds	r3, #7
   1e8be:	2b00      	cmp	r3, #0
   1e8c0:	da00      	bge.n	1e8c4 <SDMMC_UNSTUFF_BITS+0x11c>
   1e8c2:	3307      	adds	r3, #7
   1e8c4:	10db      	asrs	r3, r3, #3
   1e8c6:	3b03      	subs	r3, #3
   1e8c8:	68fa      	ldr	r2, [r7, #12]
   1e8ca:	18d3      	adds	r3, r2, r3
   1e8cc:	781b      	ldrb	r3, [r3, #0]
   1e8ce:	0019      	movs	r1, r3
   1e8d0:	2308      	movs	r3, #8
   1e8d2:	18fb      	adds	r3, r7, r3
   1e8d4:	881b      	ldrh	r3, [r3, #0]
   1e8d6:	2207      	movs	r2, #7
   1e8d8:	4013      	ands	r3, r2
   1e8da:	2210      	movs	r2, #16
   1e8dc:	1ad3      	subs	r3, r2, r3
   1e8de:	4099      	lsls	r1, r3
   1e8e0:	000b      	movs	r3, r1
   1e8e2:	697a      	ldr	r2, [r7, #20]
   1e8e4:	4313      	orrs	r3, r2
   1e8e6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e8e8:	1dfb      	adds	r3, r7, #7
   1e8ea:	781b      	ldrb	r3, [r3, #0]
   1e8ec:	2201      	movs	r2, #1
   1e8ee:	409a      	lsls	r2, r3
   1e8f0:	0013      	movs	r3, r2
   1e8f2:	1e5a      	subs	r2, r3, #1
   1e8f4:	697b      	ldr	r3, [r7, #20]
   1e8f6:	4013      	ands	r3, r2
   1e8f8:	617b      	str	r3, [r7, #20]
	return value;
   1e8fa:	697b      	ldr	r3, [r7, #20]
}
   1e8fc:	0018      	movs	r0, r3
   1e8fe:	46bd      	mov	sp, r7
   1e900:	b007      	add	sp, #28
   1e902:	bd90      	pop	{r4, r7, pc}

0001e904 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e904:	b580      	push	{r7, lr}
   1e906:	b082      	sub	sp, #8
   1e908:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e90a:	4b23      	ldr	r3, [pc, #140]	; (1e998 <mmc_spi_op_cond+0x94>)
   1e90c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e90e:	4b23      	ldr	r3, [pc, #140]	; (1e99c <mmc_spi_op_cond+0x98>)
   1e910:	2100      	movs	r1, #0
   1e912:	0018      	movs	r0, r3
   1e914:	4b22      	ldr	r3, [pc, #136]	; (1e9a0 <mmc_spi_op_cond+0x9c>)
   1e916:	4798      	blx	r3
   1e918:	0003      	movs	r3, r0
   1e91a:	001a      	movs	r2, r3
   1e91c:	2301      	movs	r3, #1
   1e91e:	4053      	eors	r3, r2
   1e920:	b2db      	uxtb	r3, r3
   1e922:	2b00      	cmp	r3, #0
   1e924:	d001      	beq.n	1e92a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e926:	2300      	movs	r3, #0
   1e928:	e031      	b.n	1e98e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e92a:	4b1e      	ldr	r3, [pc, #120]	; (1e9a4 <mmc_spi_op_cond+0xa0>)
   1e92c:	4798      	blx	r3
   1e92e:	0003      	movs	r3, r0
   1e930:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e932:	683b      	ldr	r3, [r7, #0]
   1e934:	2201      	movs	r2, #1
   1e936:	4013      	ands	r3, r2
   1e938:	d006      	beq.n	1e948 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e93a:	687b      	ldr	r3, [r7, #4]
   1e93c:	1e5a      	subs	r2, r3, #1
   1e93e:	607a      	str	r2, [r7, #4]
   1e940:	2b00      	cmp	r3, #0
   1e942:	d1e4      	bne.n	1e90e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e944:	2300      	movs	r3, #0
   1e946:	e022      	b.n	1e98e <mmc_spi_op_cond+0x8a>
			break;
   1e948:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e94a:	4b17      	ldr	r3, [pc, #92]	; (1e9a8 <mmc_spi_op_cond+0xa4>)
   1e94c:	2100      	movs	r1, #0
   1e94e:	0018      	movs	r0, r3
   1e950:	4b13      	ldr	r3, [pc, #76]	; (1e9a0 <mmc_spi_op_cond+0x9c>)
   1e952:	4798      	blx	r3
   1e954:	0003      	movs	r3, r0
   1e956:	001a      	movs	r2, r3
   1e958:	2301      	movs	r3, #1
   1e95a:	4053      	eors	r3, r2
   1e95c:	b2db      	uxtb	r3, r3
   1e95e:	2b00      	cmp	r3, #0
   1e960:	d001      	beq.n	1e966 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e962:	2300      	movs	r3, #0
   1e964:	e013      	b.n	1e98e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e966:	4b0f      	ldr	r3, [pc, #60]	; (1e9a4 <mmc_spi_op_cond+0xa0>)
   1e968:	4798      	blx	r3
   1e96a:	0002      	movs	r2, r0
   1e96c:	23c0      	movs	r3, #192	; 0xc0
   1e96e:	05db      	lsls	r3, r3, #23
   1e970:	401a      	ands	r2, r3
   1e972:	2380      	movs	r3, #128	; 0x80
   1e974:	05db      	lsls	r3, r3, #23
   1e976:	429a      	cmp	r2, r3
   1e978:	d108      	bne.n	1e98c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e97a:	4b0c      	ldr	r3, [pc, #48]	; (1e9ac <mmc_spi_op_cond+0xa8>)
   1e97c:	681a      	ldr	r2, [r3, #0]
   1e97e:	4b0b      	ldr	r3, [pc, #44]	; (1e9ac <mmc_spi_op_cond+0xa8>)
   1e980:	681b      	ldr	r3, [r3, #0]
   1e982:	7adb      	ldrb	r3, [r3, #11]
   1e984:	2108      	movs	r1, #8
   1e986:	430b      	orrs	r3, r1
   1e988:	b2db      	uxtb	r3, r3
   1e98a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e98c:	2301      	movs	r3, #1
}
   1e98e:	0018      	movs	r0, r3
   1e990:	46bd      	mov	sp, r7
   1e992:	b002      	add	sp, #8
   1e994:	bd80      	pop	{r7, pc}
   1e996:	46c0      	nop			; (mov r8, r8)
   1e998:	00001bee 	.word	0x00001bee
   1e99c:	00001101 	.word	0x00001101
   1e9a0:	00020381 	.word	0x00020381
   1e9a4:	000205c1 	.word	0x000205c1
   1e9a8:	0000053a 	.word	0x0000053a
   1e9ac:	20004254 	.word	0x20004254

0001e9b0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e9b0:	b580      	push	{r7, lr}
   1e9b2:	b086      	sub	sp, #24
   1e9b4:	af00      	add	r7, sp, #0
   1e9b6:	0002      	movs	r2, r0
   1e9b8:	1dfb      	adds	r3, r7, #7
   1e9ba:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e9bc:	4b2e      	ldr	r3, [pc, #184]	; (1ea78 <sd_spi_op_cond+0xc8>)
   1e9be:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e9c0:	4b2e      	ldr	r3, [pc, #184]	; (1ea7c <sd_spi_op_cond+0xcc>)
   1e9c2:	2100      	movs	r1, #0
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	4b2e      	ldr	r3, [pc, #184]	; (1ea80 <sd_spi_op_cond+0xd0>)
   1e9c8:	4798      	blx	r3
   1e9ca:	0003      	movs	r3, r0
   1e9cc:	001a      	movs	r2, r3
   1e9ce:	2301      	movs	r3, #1
   1e9d0:	4053      	eors	r3, r2
   1e9d2:	b2db      	uxtb	r3, r3
   1e9d4:	2b00      	cmp	r3, #0
   1e9d6:	d001      	beq.n	1e9dc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e9d8:	2300      	movs	r3, #0
   1e9da:	e048      	b.n	1ea6e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e9dc:	2300      	movs	r3, #0
   1e9de:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e9e0:	1dfb      	adds	r3, r7, #7
   1e9e2:	781b      	ldrb	r3, [r3, #0]
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d004      	beq.n	1e9f2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e9e8:	697b      	ldr	r3, [r7, #20]
   1e9ea:	2280      	movs	r2, #128	; 0x80
   1e9ec:	05d2      	lsls	r2, r2, #23
   1e9ee:	4313      	orrs	r3, r2
   1e9f0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e9f2:	697b      	ldr	r3, [r7, #20]
   1e9f4:	4a23      	ldr	r2, [pc, #140]	; (1ea84 <sd_spi_op_cond+0xd4>)
   1e9f6:	0019      	movs	r1, r3
   1e9f8:	0010      	movs	r0, r2
   1e9fa:	4b21      	ldr	r3, [pc, #132]	; (1ea80 <sd_spi_op_cond+0xd0>)
   1e9fc:	4798      	blx	r3
   1e9fe:	0003      	movs	r3, r0
   1ea00:	001a      	movs	r2, r3
   1ea02:	2301      	movs	r3, #1
   1ea04:	4053      	eors	r3, r2
   1ea06:	b2db      	uxtb	r3, r3
   1ea08:	2b00      	cmp	r3, #0
   1ea0a:	d001      	beq.n	1ea10 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1ea0c:	2300      	movs	r3, #0
   1ea0e:	e02e      	b.n	1ea6e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1ea10:	4b1d      	ldr	r3, [pc, #116]	; (1ea88 <sd_spi_op_cond+0xd8>)
   1ea12:	4798      	blx	r3
   1ea14:	0003      	movs	r3, r0
   1ea16:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1ea18:	68fb      	ldr	r3, [r7, #12]
   1ea1a:	2201      	movs	r2, #1
   1ea1c:	4013      	ands	r3, r2
   1ea1e:	d006      	beq.n	1ea2e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1ea20:	693b      	ldr	r3, [r7, #16]
   1ea22:	1e5a      	subs	r2, r3, #1
   1ea24:	613a      	str	r2, [r7, #16]
   1ea26:	2b00      	cmp	r3, #0
   1ea28:	d1ca      	bne.n	1e9c0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1ea2a:	2300      	movs	r3, #0
   1ea2c:	e01f      	b.n	1ea6e <sd_spi_op_cond+0xbe>
			break;
   1ea2e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ea30:	4b16      	ldr	r3, [pc, #88]	; (1ea8c <sd_spi_op_cond+0xdc>)
   1ea32:	2100      	movs	r1, #0
   1ea34:	0018      	movs	r0, r3
   1ea36:	4b12      	ldr	r3, [pc, #72]	; (1ea80 <sd_spi_op_cond+0xd0>)
   1ea38:	4798      	blx	r3
   1ea3a:	0003      	movs	r3, r0
   1ea3c:	001a      	movs	r2, r3
   1ea3e:	2301      	movs	r3, #1
   1ea40:	4053      	eors	r3, r2
   1ea42:	b2db      	uxtb	r3, r3
   1ea44:	2b00      	cmp	r3, #0
   1ea46:	d001      	beq.n	1ea4c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ea48:	2300      	movs	r3, #0
   1ea4a:	e010      	b.n	1ea6e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ea4c:	4b0e      	ldr	r3, [pc, #56]	; (1ea88 <sd_spi_op_cond+0xd8>)
   1ea4e:	4798      	blx	r3
   1ea50:	0002      	movs	r2, r0
   1ea52:	2380      	movs	r3, #128	; 0x80
   1ea54:	05db      	lsls	r3, r3, #23
   1ea56:	4013      	ands	r3, r2
   1ea58:	d008      	beq.n	1ea6c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ea5a:	4b0d      	ldr	r3, [pc, #52]	; (1ea90 <sd_spi_op_cond+0xe0>)
   1ea5c:	681a      	ldr	r2, [r3, #0]
   1ea5e:	4b0c      	ldr	r3, [pc, #48]	; (1ea90 <sd_spi_op_cond+0xe0>)
   1ea60:	681b      	ldr	r3, [r3, #0]
   1ea62:	7adb      	ldrb	r3, [r3, #11]
   1ea64:	2108      	movs	r1, #8
   1ea66:	430b      	orrs	r3, r1
   1ea68:	b2db      	uxtb	r3, r3
   1ea6a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ea6c:	2301      	movs	r3, #1
}
   1ea6e:	0018      	movs	r0, r3
   1ea70:	46bd      	mov	sp, r7
   1ea72:	b006      	add	sp, #24
   1ea74:	bd80      	pop	{r7, pc}
   1ea76:	46c0      	nop			; (mov r8, r8)
   1ea78:	00001bee 	.word	0x00001bee
   1ea7c:	00001137 	.word	0x00001137
   1ea80:	00020381 	.word	0x00020381
   1ea84:	00001129 	.word	0x00001129
   1ea88:	000205c1 	.word	0x000205c1
   1ea8c:	0000053a 	.word	0x0000053a
   1ea90:	20004254 	.word	0x20004254

0001ea94 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1ea94:	b580      	push	{r7, lr}
   1ea96:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1ea98:	2301      	movs	r3, #1
}
   1ea9a:	0018      	movs	r0, r3
   1ea9c:	46bd      	mov	sp, r7
   1ea9e:	bd80      	pop	{r7, pc}

0001eaa0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1eaa0:	b580      	push	{r7, lr}
   1eaa2:	b084      	sub	sp, #16
   1eaa4:	af00      	add	r7, sp, #0
   1eaa6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1eaa8:	687b      	ldr	r3, [r7, #4]
   1eaaa:	2200      	movs	r2, #0
   1eaac:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1eaae:	23d5      	movs	r3, #213	; 0xd5
   1eab0:	005b      	lsls	r3, r3, #1
   1eab2:	4a14      	ldr	r2, [pc, #80]	; (1eb04 <sd_cmd8+0x64>)
   1eab4:	0019      	movs	r1, r3
   1eab6:	0010      	movs	r0, r2
   1eab8:	4b13      	ldr	r3, [pc, #76]	; (1eb08 <sd_cmd8+0x68>)
   1eaba:	4798      	blx	r3
   1eabc:	0003      	movs	r3, r0
   1eabe:	001a      	movs	r2, r3
   1eac0:	2301      	movs	r3, #1
   1eac2:	4053      	eors	r3, r2
   1eac4:	b2db      	uxtb	r3, r3
   1eac6:	2b00      	cmp	r3, #0
   1eac8:	d001      	beq.n	1eace <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1eaca:	2301      	movs	r3, #1
   1eacc:	e015      	b.n	1eafa <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1eace:	4b0f      	ldr	r3, [pc, #60]	; (1eb0c <sd_cmd8+0x6c>)
   1ead0:	4798      	blx	r3
   1ead2:	0003      	movs	r3, r0
   1ead4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1ead6:	68fb      	ldr	r3, [r7, #12]
   1ead8:	3301      	adds	r3, #1
   1eada:	d101      	bne.n	1eae0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1eadc:	2301      	movs	r3, #1
   1eade:	e00c      	b.n	1eafa <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1eae0:	68fb      	ldr	r3, [r7, #12]
   1eae2:	051b      	lsls	r3, r3, #20
   1eae4:	0d1a      	lsrs	r2, r3, #20
   1eae6:	23d5      	movs	r3, #213	; 0xd5
   1eae8:	005b      	lsls	r3, r3, #1
   1eaea:	429a      	cmp	r2, r3
   1eaec:	d001      	beq.n	1eaf2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1eaee:	2300      	movs	r3, #0
   1eaf0:	e003      	b.n	1eafa <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1eaf2:	687b      	ldr	r3, [r7, #4]
   1eaf4:	2201      	movs	r2, #1
   1eaf6:	701a      	strb	r2, [r3, #0]
	return true;
   1eaf8:	2301      	movs	r3, #1
}
   1eafa:	0018      	movs	r0, r3
   1eafc:	46bd      	mov	sp, r7
   1eafe:	b004      	add	sp, #16
   1eb00:	bd80      	pop	{r7, pc}
   1eb02:	46c0      	nop			; (mov r8, r8)
   1eb04:	00005508 	.word	0x00005508
   1eb08:	00020381 	.word	0x00020381
   1eb0c:	000205c1 	.word	0x000205c1

0001eb10 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1eb10:	b590      	push	{r4, r7, lr}
   1eb12:	b089      	sub	sp, #36	; 0x24
   1eb14:	af02      	add	r7, sp, #8
   1eb16:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1eb18:	2380      	movs	r3, #128	; 0x80
   1eb1a:	009a      	lsls	r2, r3, #2
   1eb1c:	4841      	ldr	r0, [pc, #260]	; (1ec24 <mmc_cmd8+0x114>)
   1eb1e:	2300      	movs	r3, #0
   1eb20:	9300      	str	r3, [sp, #0]
   1eb22:	2301      	movs	r3, #1
   1eb24:	2100      	movs	r1, #0
   1eb26:	4c40      	ldr	r4, [pc, #256]	; (1ec28 <mmc_cmd8+0x118>)
   1eb28:	47a0      	blx	r4
   1eb2a:	0003      	movs	r3, r0
   1eb2c:	001a      	movs	r2, r3
   1eb2e:	2301      	movs	r3, #1
   1eb30:	4053      	eors	r3, r2
   1eb32:	b2db      	uxtb	r3, r3
   1eb34:	2b00      	cmp	r3, #0
   1eb36:	d001      	beq.n	1eb3c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1eb38:	2300      	movs	r3, #0
   1eb3a:	e06e      	b.n	1ec1a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1eb3c:	2316      	movs	r3, #22
   1eb3e:	18fb      	adds	r3, r7, r3
   1eb40:	2200      	movs	r2, #0
   1eb42:	801a      	strh	r2, [r3, #0]
   1eb44:	e014      	b.n	1eb70 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1eb46:	2310      	movs	r3, #16
   1eb48:	18fb      	adds	r3, r7, r3
   1eb4a:	0018      	movs	r0, r3
   1eb4c:	4b37      	ldr	r3, [pc, #220]	; (1ec2c <mmc_cmd8+0x11c>)
   1eb4e:	4798      	blx	r3
   1eb50:	0003      	movs	r3, r0
   1eb52:	001a      	movs	r2, r3
   1eb54:	2301      	movs	r3, #1
   1eb56:	4053      	eors	r3, r2
   1eb58:	b2db      	uxtb	r3, r3
   1eb5a:	2b00      	cmp	r3, #0
   1eb5c:	d001      	beq.n	1eb62 <mmc_cmd8+0x52>
			return false;
   1eb5e:	2300      	movs	r3, #0
   1eb60:	e05b      	b.n	1ec1a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1eb62:	2316      	movs	r3, #22
   1eb64:	18fb      	adds	r3, r7, r3
   1eb66:	881a      	ldrh	r2, [r3, #0]
   1eb68:	2316      	movs	r3, #22
   1eb6a:	18fb      	adds	r3, r7, r3
   1eb6c:	3201      	adds	r2, #1
   1eb6e:	801a      	strh	r2, [r3, #0]
   1eb70:	2316      	movs	r3, #22
   1eb72:	18fb      	adds	r3, r7, r3
   1eb74:	881b      	ldrh	r3, [r3, #0]
   1eb76:	2b31      	cmp	r3, #49	; 0x31
   1eb78:	d9e5      	bls.n	1eb46 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1eb7a:	693b      	ldr	r3, [r7, #16]
   1eb7c:	b2db      	uxtb	r3, r3
   1eb7e:	2202      	movs	r2, #2
   1eb80:	4013      	ands	r3, r2
   1eb82:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1eb84:	687b      	ldr	r3, [r7, #4]
   1eb86:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1eb88:	4b29      	ldr	r3, [pc, #164]	; (1ec30 <mmc_cmd8+0x120>)
   1eb8a:	681b      	ldr	r3, [r3, #0]
   1eb8c:	330e      	adds	r3, #14
   1eb8e:	0018      	movs	r0, r3
   1eb90:	230c      	movs	r3, #12
   1eb92:	223e      	movs	r2, #62	; 0x3e
   1eb94:	2180      	movs	r1, #128	; 0x80
   1eb96:	4c27      	ldr	r4, [pc, #156]	; (1ec34 <mmc_cmd8+0x124>)
   1eb98:	47a0      	blx	r4
   1eb9a:	0002      	movs	r2, r0
   1eb9c:	4b26      	ldr	r3, [pc, #152]	; (1ec38 <mmc_cmd8+0x128>)
   1eb9e:	429a      	cmp	r2, r3
   1eba0:	d135      	bne.n	1ec0e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1eba2:	e014      	b.n	1ebce <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1eba4:	230c      	movs	r3, #12
   1eba6:	18fb      	adds	r3, r7, r3
   1eba8:	0018      	movs	r0, r3
   1ebaa:	4b20      	ldr	r3, [pc, #128]	; (1ec2c <mmc_cmd8+0x11c>)
   1ebac:	4798      	blx	r3
   1ebae:	0003      	movs	r3, r0
   1ebb0:	001a      	movs	r2, r3
   1ebb2:	2301      	movs	r3, #1
   1ebb4:	4053      	eors	r3, r2
   1ebb6:	b2db      	uxtb	r3, r3
   1ebb8:	2b00      	cmp	r3, #0
   1ebba:	d001      	beq.n	1ebc0 <mmc_cmd8+0xb0>
				return false;
   1ebbc:	2300      	movs	r3, #0
   1ebbe:	e02c      	b.n	1ec1a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ebc0:	2316      	movs	r3, #22
   1ebc2:	18fb      	adds	r3, r7, r3
   1ebc4:	881a      	ldrh	r2, [r3, #0]
   1ebc6:	2316      	movs	r3, #22
   1ebc8:	18fb      	adds	r3, r7, r3
   1ebca:	3201      	adds	r2, #1
   1ebcc:	801a      	strh	r2, [r3, #0]
   1ebce:	2316      	movs	r3, #22
   1ebd0:	18fb      	adds	r3, r7, r3
   1ebd2:	881b      	ldrh	r3, [r3, #0]
   1ebd4:	2b35      	cmp	r3, #53	; 0x35
   1ebd6:	d9e5      	bls.n	1eba4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1ebd8:	4b15      	ldr	r3, [pc, #84]	; (1ec30 <mmc_cmd8+0x120>)
   1ebda:	681b      	ldr	r3, [r3, #0]
   1ebdc:	68fa      	ldr	r2, [r7, #12]
   1ebde:	0852      	lsrs	r2, r2, #1
   1ebe0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ebe2:	e014      	b.n	1ec0e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1ebe4:	230c      	movs	r3, #12
   1ebe6:	18fb      	adds	r3, r7, r3
   1ebe8:	0018      	movs	r0, r3
   1ebea:	4b10      	ldr	r3, [pc, #64]	; (1ec2c <mmc_cmd8+0x11c>)
   1ebec:	4798      	blx	r3
   1ebee:	0003      	movs	r3, r0
   1ebf0:	001a      	movs	r2, r3
   1ebf2:	2301      	movs	r3, #1
   1ebf4:	4053      	eors	r3, r2
   1ebf6:	b2db      	uxtb	r3, r3
   1ebf8:	2b00      	cmp	r3, #0
   1ebfa:	d001      	beq.n	1ec00 <mmc_cmd8+0xf0>
			return false;
   1ebfc:	2300      	movs	r3, #0
   1ebfe:	e00c      	b.n	1ec1a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ec00:	2316      	movs	r3, #22
   1ec02:	18fb      	adds	r3, r7, r3
   1ec04:	881a      	ldrh	r2, [r3, #0]
   1ec06:	2316      	movs	r3, #22
   1ec08:	18fb      	adds	r3, r7, r3
   1ec0a:	3201      	adds	r2, #1
   1ec0c:	801a      	strh	r2, [r3, #0]
   1ec0e:	2316      	movs	r3, #22
   1ec10:	18fb      	adds	r3, r7, r3
   1ec12:	881b      	ldrh	r3, [r3, #0]
   1ec14:	2b7f      	cmp	r3, #127	; 0x7f
   1ec16:	d9e5      	bls.n	1ebe4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1ec18:	2301      	movs	r3, #1
}
   1ec1a:	0018      	movs	r0, r3
   1ec1c:	46bd      	mov	sp, r7
   1ec1e:	b007      	add	sp, #28
   1ec20:	bd90      	pop	{r4, r7, pc}
   1ec22:	46c0      	nop			; (mov r8, r8)
   1ec24:	00081108 	.word	0x00081108
   1ec28:	000203a9 	.word	0x000203a9
   1ec2c:	000205d5 	.word	0x000205d5
   1ec30:	20004254 	.word	0x20004254
   1ec34:	0001e7a9 	.word	0x0001e7a9
   1ec38:	00000fff 	.word	0x00000fff

0001ec3c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1ec3c:	b590      	push	{r4, r7, lr}
   1ec3e:	b083      	sub	sp, #12
   1ec40:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1ec42:	4b15      	ldr	r3, [pc, #84]	; (1ec98 <sd_mmc_cmd9_spi+0x5c>)
   1ec44:	681b      	ldr	r3, [r3, #0]
   1ec46:	891b      	ldrh	r3, [r3, #8]
   1ec48:	0419      	lsls	r1, r3, #16
   1ec4a:	4814      	ldr	r0, [pc, #80]	; (1ec9c <sd_mmc_cmd9_spi+0x60>)
   1ec4c:	2301      	movs	r3, #1
   1ec4e:	9300      	str	r3, [sp, #0]
   1ec50:	2301      	movs	r3, #1
   1ec52:	2210      	movs	r2, #16
   1ec54:	4c12      	ldr	r4, [pc, #72]	; (1eca0 <sd_mmc_cmd9_spi+0x64>)
   1ec56:	47a0      	blx	r4
   1ec58:	0003      	movs	r3, r0
   1ec5a:	001a      	movs	r2, r3
   1ec5c:	2301      	movs	r3, #1
   1ec5e:	4053      	eors	r3, r2
   1ec60:	b2db      	uxtb	r3, r3
   1ec62:	2b00      	cmp	r3, #0
   1ec64:	d001      	beq.n	1ec6a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1ec66:	2300      	movs	r3, #0
   1ec68:	e012      	b.n	1ec90 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1ec6a:	4b0b      	ldr	r3, [pc, #44]	; (1ec98 <sd_mmc_cmd9_spi+0x5c>)
   1ec6c:	681b      	ldr	r3, [r3, #0]
   1ec6e:	330e      	adds	r3, #14
   1ec70:	2101      	movs	r1, #1
   1ec72:	0018      	movs	r0, r3
   1ec74:	4b0b      	ldr	r3, [pc, #44]	; (1eca4 <sd_mmc_cmd9_spi+0x68>)
   1ec76:	4798      	blx	r3
   1ec78:	0003      	movs	r3, r0
   1ec7a:	001a      	movs	r2, r3
   1ec7c:	2301      	movs	r3, #1
   1ec7e:	4053      	eors	r3, r2
   1ec80:	b2db      	uxtb	r3, r3
   1ec82:	2b00      	cmp	r3, #0
   1ec84:	d001      	beq.n	1ec8a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1ec86:	2300      	movs	r3, #0
   1ec88:	e002      	b.n	1ec90 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1ec8a:	4b07      	ldr	r3, [pc, #28]	; (1eca8 <sd_mmc_cmd9_spi+0x6c>)
   1ec8c:	4798      	blx	r3
   1ec8e:	0003      	movs	r3, r0
}
   1ec90:	0018      	movs	r0, r3
   1ec92:	46bd      	mov	sp, r7
   1ec94:	b001      	add	sp, #4
   1ec96:	bd90      	pop	{r4, r7, pc}
   1ec98:	20004254 	.word	0x20004254
   1ec9c:	00081109 	.word	0x00081109
   1eca0:	000203a9 	.word	0x000203a9
   1eca4:	00020679 	.word	0x00020679
   1eca8:	0002071d 	.word	0x0002071d

0001ecac <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1ecac:	b5b0      	push	{r4, r5, r7, lr}
   1ecae:	b084      	sub	sp, #16
   1ecb0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1ecb2:	4b45      	ldr	r3, [pc, #276]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ecb4:	681b      	ldr	r3, [r3, #0]
   1ecb6:	330e      	adds	r3, #14
   1ecb8:	0018      	movs	r0, r3
   1ecba:	2304      	movs	r3, #4
   1ecbc:	227a      	movs	r2, #122	; 0x7a
   1ecbe:	2180      	movs	r1, #128	; 0x80
   1ecc0:	4c42      	ldr	r4, [pc, #264]	; (1edcc <mmc_decode_csd+0x120>)
   1ecc2:	47a0      	blx	r4
   1ecc4:	0003      	movs	r3, r0
   1ecc6:	2b02      	cmp	r3, #2
   1ecc8:	d011      	beq.n	1ecee <mmc_decode_csd+0x42>
   1ecca:	d802      	bhi.n	1ecd2 <mmc_decode_csd+0x26>
   1eccc:	2b01      	cmp	r3, #1
   1ecce:	d009      	beq.n	1ece4 <mmc_decode_csd+0x38>
   1ecd0:	e003      	b.n	1ecda <mmc_decode_csd+0x2e>
   1ecd2:	2b03      	cmp	r3, #3
   1ecd4:	d010      	beq.n	1ecf8 <mmc_decode_csd+0x4c>
   1ecd6:	2b04      	cmp	r3, #4
   1ecd8:	d013      	beq.n	1ed02 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ecda:	4b3b      	ldr	r3, [pc, #236]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ecdc:	681b      	ldr	r3, [r3, #0]
   1ecde:	2212      	movs	r2, #18
   1ece0:	731a      	strb	r2, [r3, #12]
		break;
   1ece2:	e013      	b.n	1ed0c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1ece4:	4b38      	ldr	r3, [pc, #224]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ece6:	681b      	ldr	r3, [r3, #0]
   1ece8:	2214      	movs	r2, #20
   1ecea:	731a      	strb	r2, [r3, #12]
		break;
   1ecec:	e00e      	b.n	1ed0c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1ecee:	4b36      	ldr	r3, [pc, #216]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ecf0:	681b      	ldr	r3, [r3, #0]
   1ecf2:	2222      	movs	r2, #34	; 0x22
   1ecf4:	731a      	strb	r2, [r3, #12]
		break;
   1ecf6:	e009      	b.n	1ed0c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1ecf8:	4b33      	ldr	r3, [pc, #204]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ecfa:	681b      	ldr	r3, [r3, #0]
   1ecfc:	2230      	movs	r2, #48	; 0x30
   1ecfe:	731a      	strb	r2, [r3, #12]
		break;
   1ed00:	e004      	b.n	1ed0c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1ed02:	4b31      	ldr	r3, [pc, #196]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ed04:	681b      	ldr	r3, [r3, #0]
   1ed06:	2240      	movs	r2, #64	; 0x40
   1ed08:	731a      	strb	r2, [r3, #12]
		break;
   1ed0a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ed0c:	4b2e      	ldr	r3, [pc, #184]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ed0e:	681b      	ldr	r3, [r3, #0]
   1ed10:	330e      	adds	r3, #14
   1ed12:	0018      	movs	r0, r3
   1ed14:	2308      	movs	r3, #8
   1ed16:	2260      	movs	r2, #96	; 0x60
   1ed18:	2180      	movs	r1, #128	; 0x80
   1ed1a:	4c2c      	ldr	r4, [pc, #176]	; (1edcc <mmc_decode_csd+0x120>)
   1ed1c:	47a0      	blx	r4
   1ed1e:	0003      	movs	r3, r0
   1ed20:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1ed22:	68fb      	ldr	r3, [r7, #12]
   1ed24:	2207      	movs	r2, #7
   1ed26:	401a      	ands	r2, r3
   1ed28:	4b29      	ldr	r3, [pc, #164]	; (1edd0 <mmc_decode_csd+0x124>)
   1ed2a:	0092      	lsls	r2, r2, #2
   1ed2c:	58d3      	ldr	r3, [r2, r3]
   1ed2e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ed30:	68fb      	ldr	r3, [r7, #12]
   1ed32:	08db      	lsrs	r3, r3, #3
   1ed34:	220f      	movs	r2, #15
   1ed36:	401a      	ands	r2, r3
   1ed38:	4b26      	ldr	r3, [pc, #152]	; (1edd4 <mmc_decode_csd+0x128>)
   1ed3a:	0092      	lsls	r2, r2, #2
   1ed3c:	58d3      	ldr	r3, [r2, r3]
   1ed3e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1ed40:	4b21      	ldr	r3, [pc, #132]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ed42:	681b      	ldr	r3, [r3, #0]
   1ed44:	68ba      	ldr	r2, [r7, #8]
   1ed46:	6879      	ldr	r1, [r7, #4]
   1ed48:	434a      	muls	r2, r1
   1ed4a:	21fa      	movs	r1, #250	; 0xfa
   1ed4c:	0089      	lsls	r1, r1, #2
   1ed4e:	434a      	muls	r2, r1
   1ed50:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1ed52:	4b1d      	ldr	r3, [pc, #116]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ed54:	681b      	ldr	r3, [r3, #0]
   1ed56:	330e      	adds	r3, #14
   1ed58:	0018      	movs	r0, r3
   1ed5a:	230c      	movs	r3, #12
   1ed5c:	223e      	movs	r2, #62	; 0x3e
   1ed5e:	2180      	movs	r1, #128	; 0x80
   1ed60:	4c1a      	ldr	r4, [pc, #104]	; (1edcc <mmc_decode_csd+0x120>)
   1ed62:	47a0      	blx	r4
   1ed64:	0002      	movs	r2, r0
   1ed66:	4b1c      	ldr	r3, [pc, #112]	; (1edd8 <mmc_decode_csd+0x12c>)
   1ed68:	429a      	cmp	r2, r3
   1ed6a:	d028      	beq.n	1edbe <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1ed6c:	4b16      	ldr	r3, [pc, #88]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ed6e:	681b      	ldr	r3, [r3, #0]
   1ed70:	330e      	adds	r3, #14
   1ed72:	0018      	movs	r0, r3
   1ed74:	230c      	movs	r3, #12
   1ed76:	223e      	movs	r2, #62	; 0x3e
   1ed78:	2180      	movs	r1, #128	; 0x80
   1ed7a:	4c14      	ldr	r4, [pc, #80]	; (1edcc <mmc_decode_csd+0x120>)
   1ed7c:	47a0      	blx	r4
   1ed7e:	0003      	movs	r3, r0
   1ed80:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ed82:	4b11      	ldr	r3, [pc, #68]	; (1edc8 <mmc_decode_csd+0x11c>)
   1ed84:	681b      	ldr	r3, [r3, #0]
   1ed86:	330e      	adds	r3, #14
   1ed88:	0018      	movs	r0, r3
   1ed8a:	2303      	movs	r3, #3
   1ed8c:	222f      	movs	r2, #47	; 0x2f
   1ed8e:	2180      	movs	r1, #128	; 0x80
   1ed90:	4d0e      	ldr	r5, [pc, #56]	; (1edcc <mmc_decode_csd+0x120>)
   1ed92:	47a8      	blx	r5
   1ed94:	0003      	movs	r3, r0
   1ed96:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1ed98:	409c      	lsls	r4, r3
   1ed9a:	0023      	movs	r3, r4
   1ed9c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ed9e:	4b0a      	ldr	r3, [pc, #40]	; (1edc8 <mmc_decode_csd+0x11c>)
   1eda0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1eda2:	4b09      	ldr	r3, [pc, #36]	; (1edc8 <mmc_decode_csd+0x11c>)
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	330e      	adds	r3, #14
   1eda8:	0018      	movs	r0, r3
   1edaa:	2304      	movs	r3, #4
   1edac:	2250      	movs	r2, #80	; 0x50
   1edae:	2180      	movs	r1, #128	; 0x80
   1edb0:	4d06      	ldr	r5, [pc, #24]	; (1edcc <mmc_decode_csd+0x120>)
   1edb2:	47a8      	blx	r5
   1edb4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1edb6:	683b      	ldr	r3, [r7, #0]
   1edb8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1edba:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1edbc:	6063      	str	r3, [r4, #4]
	}
}
   1edbe:	46c0      	nop			; (mov r8, r8)
   1edc0:	46bd      	mov	sp, r7
   1edc2:	b004      	add	sp, #16
   1edc4:	bdb0      	pop	{r4, r5, r7, pc}
   1edc6:	46c0      	nop			; (mov r8, r8)
   1edc8:	20004254 	.word	0x20004254
   1edcc:	0001e7a9 	.word	0x0001e7a9
   1edd0:	0003aa48 	.word	0x0003aa48
   1edd4:	0003aaa4 	.word	0x0003aaa4
   1edd8:	00000fff 	.word	0x00000fff

0001eddc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1eddc:	b5b0      	push	{r4, r5, r7, lr}
   1edde:	b084      	sub	sp, #16
   1ede0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ede2:	4b35      	ldr	r3, [pc, #212]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ede4:	681b      	ldr	r3, [r3, #0]
   1ede6:	330e      	adds	r3, #14
   1ede8:	0018      	movs	r0, r3
   1edea:	2308      	movs	r3, #8
   1edec:	2260      	movs	r2, #96	; 0x60
   1edee:	2180      	movs	r1, #128	; 0x80
   1edf0:	4c32      	ldr	r4, [pc, #200]	; (1eebc <sd_decode_csd+0xe0>)
   1edf2:	47a0      	blx	r4
   1edf4:	0003      	movs	r3, r0
   1edf6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1edf8:	68fb      	ldr	r3, [r7, #12]
   1edfa:	2207      	movs	r2, #7
   1edfc:	401a      	ands	r2, r3
   1edfe:	4b30      	ldr	r3, [pc, #192]	; (1eec0 <sd_decode_csd+0xe4>)
   1ee00:	0092      	lsls	r2, r2, #2
   1ee02:	58d3      	ldr	r3, [r2, r3]
   1ee04:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ee06:	68fb      	ldr	r3, [r7, #12]
   1ee08:	08db      	lsrs	r3, r3, #3
   1ee0a:	220f      	movs	r2, #15
   1ee0c:	401a      	ands	r2, r3
   1ee0e:	4b2d      	ldr	r3, [pc, #180]	; (1eec4 <sd_decode_csd+0xe8>)
   1ee10:	0092      	lsls	r2, r2, #2
   1ee12:	58d3      	ldr	r3, [r2, r3]
   1ee14:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1ee16:	4b28      	ldr	r3, [pc, #160]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee18:	681b      	ldr	r3, [r3, #0]
   1ee1a:	68ba      	ldr	r2, [r7, #8]
   1ee1c:	6879      	ldr	r1, [r7, #4]
   1ee1e:	434a      	muls	r2, r1
   1ee20:	21fa      	movs	r1, #250	; 0xfa
   1ee22:	0089      	lsls	r1, r1, #2
   1ee24:	434a      	muls	r2, r1
   1ee26:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1ee28:	4b23      	ldr	r3, [pc, #140]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee2a:	681b      	ldr	r3, [r3, #0]
   1ee2c:	330e      	adds	r3, #14
   1ee2e:	0018      	movs	r0, r3
   1ee30:	2302      	movs	r3, #2
   1ee32:	227e      	movs	r2, #126	; 0x7e
   1ee34:	2180      	movs	r1, #128	; 0x80
   1ee36:	4c21      	ldr	r4, [pc, #132]	; (1eebc <sd_decode_csd+0xe0>)
   1ee38:	47a0      	blx	r4
   1ee3a:	1e03      	subs	r3, r0, #0
   1ee3c:	d00f      	beq.n	1ee5e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1ee3e:	4b1e      	ldr	r3, [pc, #120]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee40:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1ee42:	4b1d      	ldr	r3, [pc, #116]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee44:	681b      	ldr	r3, [r3, #0]
   1ee46:	330e      	adds	r3, #14
   1ee48:	0018      	movs	r0, r3
   1ee4a:	2316      	movs	r3, #22
   1ee4c:	2230      	movs	r2, #48	; 0x30
   1ee4e:	2180      	movs	r1, #128	; 0x80
   1ee50:	4d1a      	ldr	r5, [pc, #104]	; (1eebc <sd_decode_csd+0xe0>)
   1ee52:	47a8      	blx	r5
   1ee54:	0003      	movs	r3, r0
				* 512;
   1ee56:	3301      	adds	r3, #1
   1ee58:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1ee5a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1ee5c:	e028      	b.n	1eeb0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ee5e:	4b16      	ldr	r3, [pc, #88]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee60:	681b      	ldr	r3, [r3, #0]
   1ee62:	330e      	adds	r3, #14
   1ee64:	0018      	movs	r0, r3
   1ee66:	230c      	movs	r3, #12
   1ee68:	223e      	movs	r2, #62	; 0x3e
   1ee6a:	2180      	movs	r1, #128	; 0x80
   1ee6c:	4c13      	ldr	r4, [pc, #76]	; (1eebc <sd_decode_csd+0xe0>)
   1ee6e:	47a0      	blx	r4
   1ee70:	0003      	movs	r3, r0
   1ee72:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ee74:	4b10      	ldr	r3, [pc, #64]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee76:	681b      	ldr	r3, [r3, #0]
   1ee78:	330e      	adds	r3, #14
   1ee7a:	0018      	movs	r0, r3
   1ee7c:	2303      	movs	r3, #3
   1ee7e:	222f      	movs	r2, #47	; 0x2f
   1ee80:	2180      	movs	r1, #128	; 0x80
   1ee82:	4d0e      	ldr	r5, [pc, #56]	; (1eebc <sd_decode_csd+0xe0>)
   1ee84:	47a8      	blx	r5
   1ee86:	0003      	movs	r3, r0
   1ee88:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ee8a:	409c      	lsls	r4, r3
   1ee8c:	0023      	movs	r3, r4
   1ee8e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ee90:	4b09      	ldr	r3, [pc, #36]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee92:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1ee94:	4b08      	ldr	r3, [pc, #32]	; (1eeb8 <sd_decode_csd+0xdc>)
   1ee96:	681b      	ldr	r3, [r3, #0]
   1ee98:	330e      	adds	r3, #14
   1ee9a:	0018      	movs	r0, r3
   1ee9c:	2304      	movs	r3, #4
   1ee9e:	2250      	movs	r2, #80	; 0x50
   1eea0:	2180      	movs	r1, #128	; 0x80
   1eea2:	4d06      	ldr	r5, [pc, #24]	; (1eebc <sd_decode_csd+0xe0>)
   1eea4:	47a8      	blx	r5
   1eea6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1eea8:	683b      	ldr	r3, [r7, #0]
   1eeaa:	4093      	lsls	r3, r2
				/ 1024;
   1eeac:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1eeae:	6063      	str	r3, [r4, #4]
}
   1eeb0:	46c0      	nop			; (mov r8, r8)
   1eeb2:	46bd      	mov	sp, r7
   1eeb4:	b004      	add	sp, #16
   1eeb6:	bdb0      	pop	{r4, r5, r7, pc}
   1eeb8:	20004254 	.word	0x20004254
   1eebc:	0001e7a9 	.word	0x0001e7a9
   1eec0:	0003aa48 	.word	0x0003aa48
   1eec4:	0003aa64 	.word	0x0003aa64

0001eec8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1eec8:	b580      	push	{r7, lr}
   1eeca:	b082      	sub	sp, #8
   1eecc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1eece:	4b11      	ldr	r3, [pc, #68]	; (1ef14 <sd_mmc_cmd13+0x4c>)
   1eed0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1eed2:	4b11      	ldr	r3, [pc, #68]	; (1ef18 <sd_mmc_cmd13+0x50>)
   1eed4:	2100      	movs	r1, #0
   1eed6:	0018      	movs	r0, r3
   1eed8:	4b10      	ldr	r3, [pc, #64]	; (1ef1c <sd_mmc_cmd13+0x54>)
   1eeda:	4798      	blx	r3
   1eedc:	0003      	movs	r3, r0
   1eede:	001a      	movs	r2, r3
   1eee0:	2301      	movs	r3, #1
   1eee2:	4053      	eors	r3, r2
   1eee4:	b2db      	uxtb	r3, r3
   1eee6:	2b00      	cmp	r3, #0
   1eee8:	d001      	beq.n	1eeee <sd_mmc_cmd13+0x26>
				return false;
   1eeea:	2300      	movs	r3, #0
   1eeec:	e00e      	b.n	1ef0c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1eeee:	4b0c      	ldr	r3, [pc, #48]	; (1ef20 <sd_mmc_cmd13+0x58>)
   1eef0:	4798      	blx	r3
   1eef2:	0002      	movs	r2, r0
   1eef4:	23ff      	movs	r3, #255	; 0xff
   1eef6:	4013      	ands	r3, r2
   1eef8:	d006      	beq.n	1ef08 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1eefa:	687b      	ldr	r3, [r7, #4]
   1eefc:	1e5a      	subs	r2, r3, #1
   1eefe:	607a      	str	r2, [r7, #4]
   1ef00:	2b00      	cmp	r3, #0
   1ef02:	d1e6      	bne.n	1eed2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1ef04:	2300      	movs	r3, #0
   1ef06:	e001      	b.n	1ef0c <sd_mmc_cmd13+0x44>
				break;
   1ef08:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1ef0a:	2301      	movs	r3, #1
}
   1ef0c:	0018      	movs	r0, r3
   1ef0e:	46bd      	mov	sp, r7
   1ef10:	b002      	add	sp, #8
   1ef12:	bd80      	pop	{r7, pc}
   1ef14:	00030d40 	.word	0x00030d40
   1ef18:	00001b0d 	.word	0x00001b0d
   1ef1c:	00020381 	.word	0x00020381
   1ef20:	000205c1 	.word	0x000205c1

0001ef24 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1ef24:	b590      	push	{r4, r7, lr}
   1ef26:	b085      	sub	sp, #20
   1ef28:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1ef2a:	4b38      	ldr	r3, [pc, #224]	; (1f00c <sd_acmd51+0xe8>)
   1ef2c:	681b      	ldr	r3, [r3, #0]
   1ef2e:	891b      	ldrh	r3, [r3, #8]
   1ef30:	041b      	lsls	r3, r3, #16
   1ef32:	4a37      	ldr	r2, [pc, #220]	; (1f010 <sd_acmd51+0xec>)
   1ef34:	0019      	movs	r1, r3
   1ef36:	0010      	movs	r0, r2
   1ef38:	4b36      	ldr	r3, [pc, #216]	; (1f014 <sd_acmd51+0xf0>)
   1ef3a:	4798      	blx	r3
   1ef3c:	0003      	movs	r3, r0
   1ef3e:	001a      	movs	r2, r3
   1ef40:	2301      	movs	r3, #1
   1ef42:	4053      	eors	r3, r2
   1ef44:	b2db      	uxtb	r3, r3
   1ef46:	2b00      	cmp	r3, #0
   1ef48:	d001      	beq.n	1ef4e <sd_acmd51+0x2a>
		return false;
   1ef4a:	2300      	movs	r3, #0
   1ef4c:	e059      	b.n	1f002 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1ef4e:	4832      	ldr	r0, [pc, #200]	; (1f018 <sd_acmd51+0xf4>)
   1ef50:	2301      	movs	r3, #1
   1ef52:	9300      	str	r3, [sp, #0]
   1ef54:	2301      	movs	r3, #1
   1ef56:	2208      	movs	r2, #8
   1ef58:	2100      	movs	r1, #0
   1ef5a:	4c30      	ldr	r4, [pc, #192]	; (1f01c <sd_acmd51+0xf8>)
   1ef5c:	47a0      	blx	r4
   1ef5e:	0003      	movs	r3, r0
   1ef60:	001a      	movs	r2, r3
   1ef62:	2301      	movs	r3, #1
   1ef64:	4053      	eors	r3, r2
   1ef66:	b2db      	uxtb	r3, r3
   1ef68:	2b00      	cmp	r3, #0
   1ef6a:	d001      	beq.n	1ef70 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1ef6c:	2300      	movs	r3, #0
   1ef6e:	e048      	b.n	1f002 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1ef70:	003b      	movs	r3, r7
   1ef72:	2101      	movs	r1, #1
   1ef74:	0018      	movs	r0, r3
   1ef76:	4b2a      	ldr	r3, [pc, #168]	; (1f020 <sd_acmd51+0xfc>)
   1ef78:	4798      	blx	r3
   1ef7a:	0003      	movs	r3, r0
   1ef7c:	001a      	movs	r2, r3
   1ef7e:	2301      	movs	r3, #1
   1ef80:	4053      	eors	r3, r2
   1ef82:	b2db      	uxtb	r3, r3
   1ef84:	2b00      	cmp	r3, #0
   1ef86:	d001      	beq.n	1ef8c <sd_acmd51+0x68>
		return false;
   1ef88:	2300      	movs	r3, #0
   1ef8a:	e03a      	b.n	1f002 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1ef8c:	4b25      	ldr	r3, [pc, #148]	; (1f024 <sd_acmd51+0x100>)
   1ef8e:	4798      	blx	r3
   1ef90:	0003      	movs	r3, r0
   1ef92:	001a      	movs	r2, r3
   1ef94:	2301      	movs	r3, #1
   1ef96:	4053      	eors	r3, r2
   1ef98:	b2db      	uxtb	r3, r3
   1ef9a:	2b00      	cmp	r3, #0
   1ef9c:	d001      	beq.n	1efa2 <sd_acmd51+0x7e>
		return false;
   1ef9e:	2300      	movs	r3, #0
   1efa0:	e02f      	b.n	1f002 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1efa2:	0038      	movs	r0, r7
   1efa4:	2304      	movs	r3, #4
   1efa6:	2238      	movs	r2, #56	; 0x38
   1efa8:	2140      	movs	r1, #64	; 0x40
   1efaa:	4c1f      	ldr	r4, [pc, #124]	; (1f028 <sd_acmd51+0x104>)
   1efac:	47a0      	blx	r4
   1efae:	0003      	movs	r3, r0
   1efb0:	2b01      	cmp	r3, #1
   1efb2:	d008      	beq.n	1efc6 <sd_acmd51+0xa2>
   1efb4:	d302      	bcc.n	1efbc <sd_acmd51+0x98>
   1efb6:	2b02      	cmp	r3, #2
   1efb8:	d00a      	beq.n	1efd0 <sd_acmd51+0xac>
   1efba:	e01c      	b.n	1eff6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1efbc:	4b13      	ldr	r3, [pc, #76]	; (1f00c <sd_acmd51+0xe8>)
   1efbe:	681b      	ldr	r3, [r3, #0]
   1efc0:	2210      	movs	r2, #16
   1efc2:	731a      	strb	r2, [r3, #12]
		break;
   1efc4:	e01c      	b.n	1f000 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1efc6:	4b11      	ldr	r3, [pc, #68]	; (1f00c <sd_acmd51+0xe8>)
   1efc8:	681b      	ldr	r3, [r3, #0]
   1efca:	221a      	movs	r2, #26
   1efcc:	731a      	strb	r2, [r3, #12]
		break;
   1efce:	e017      	b.n	1f000 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1efd0:	0038      	movs	r0, r7
   1efd2:	2301      	movs	r3, #1
   1efd4:	222f      	movs	r2, #47	; 0x2f
   1efd6:	2140      	movs	r1, #64	; 0x40
   1efd8:	4c13      	ldr	r4, [pc, #76]	; (1f028 <sd_acmd51+0x104>)
   1efda:	47a0      	blx	r4
   1efdc:	0003      	movs	r3, r0
   1efde:	2b01      	cmp	r3, #1
   1efe0:	d104      	bne.n	1efec <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1efe2:	4b0a      	ldr	r3, [pc, #40]	; (1f00c <sd_acmd51+0xe8>)
   1efe4:	681b      	ldr	r3, [r3, #0]
   1efe6:	2230      	movs	r2, #48	; 0x30
   1efe8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1efea:	e009      	b.n	1f000 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1efec:	4b07      	ldr	r3, [pc, #28]	; (1f00c <sd_acmd51+0xe8>)
   1efee:	681b      	ldr	r3, [r3, #0]
   1eff0:	2220      	movs	r2, #32
   1eff2:	731a      	strb	r2, [r3, #12]
		break;
   1eff4:	e004      	b.n	1f000 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1eff6:	4b05      	ldr	r3, [pc, #20]	; (1f00c <sd_acmd51+0xe8>)
   1eff8:	681b      	ldr	r3, [r3, #0]
   1effa:	2210      	movs	r2, #16
   1effc:	731a      	strb	r2, [r3, #12]
		break;
   1effe:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f000:	2301      	movs	r3, #1
}
   1f002:	0018      	movs	r0, r3
   1f004:	46bd      	mov	sp, r7
   1f006:	b003      	add	sp, #12
   1f008:	bd90      	pop	{r4, r7, pc}
   1f00a:	46c0      	nop			; (mov r8, r8)
   1f00c:	20004254 	.word	0x20004254
   1f010:	00001137 	.word	0x00001137
   1f014:	00020381 	.word	0x00020381
   1f018:	00081133 	.word	0x00081133
   1f01c:	000203a9 	.word	0x000203a9
   1f020:	00020679 	.word	0x00020679
   1f024:	0002071d 	.word	0x0002071d
   1f028:	0001e7a9 	.word	0x0001e7a9

0001f02c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f02c:	b580      	push	{r7, lr}
   1f02e:	b082      	sub	sp, #8
   1f030:	af00      	add	r7, sp, #0
   1f032:	0002      	movs	r2, r0
   1f034:	1dfb      	adds	r3, r7, #7
   1f036:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f038:	1dfb      	adds	r3, r7, #7
   1f03a:	781b      	ldrb	r3, [r3, #0]
   1f03c:	2b00      	cmp	r3, #0
   1f03e:	d001      	beq.n	1f044 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f040:	2304      	movs	r3, #4
   1f042:	e047      	b.n	1f0d4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f044:	1dfb      	adds	r3, r7, #7
   1f046:	781b      	ldrb	r3, [r3, #0]
   1f048:	4a24      	ldr	r2, [pc, #144]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f04a:	015b      	lsls	r3, r3, #5
   1f04c:	18d3      	adds	r3, r2, r3
   1f04e:	330a      	adds	r3, #10
   1f050:	781b      	ldrb	r3, [r3, #0]
   1f052:	2b04      	cmp	r3, #4
   1f054:	d008      	beq.n	1f068 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f056:	1dfb      	adds	r3, r7, #7
   1f058:	781b      	ldrb	r3, [r3, #0]
   1f05a:	4a20      	ldr	r2, [pc, #128]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f05c:	015b      	lsls	r3, r3, #5
   1f05e:	18d3      	adds	r3, r2, r3
   1f060:	330a      	adds	r3, #10
   1f062:	781b      	ldrb	r3, [r3, #0]
   1f064:	2b03      	cmp	r3, #3
   1f066:	d11d      	bne.n	1f0a4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f068:	1dfb      	adds	r3, r7, #7
   1f06a:	781b      	ldrb	r3, [r3, #0]
   1f06c:	4a1b      	ldr	r2, [pc, #108]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f06e:	015b      	lsls	r3, r3, #5
   1f070:	18d3      	adds	r3, r2, r3
   1f072:	330a      	adds	r3, #10
   1f074:	2202      	movs	r2, #2
   1f076:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f078:	1dfb      	adds	r3, r7, #7
   1f07a:	781a      	ldrb	r2, [r3, #0]
   1f07c:	4b17      	ldr	r3, [pc, #92]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f07e:	0152      	lsls	r2, r2, #5
   1f080:	4917      	ldr	r1, [pc, #92]	; (1f0e0 <sd_mmc_select_slot+0xb4>)
   1f082:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f084:	1dfb      	adds	r3, r7, #7
   1f086:	781b      	ldrb	r3, [r3, #0]
   1f088:	4a14      	ldr	r2, [pc, #80]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f08a:	015b      	lsls	r3, r3, #5
   1f08c:	18d3      	adds	r3, r2, r3
   1f08e:	330d      	adds	r3, #13
   1f090:	2201      	movs	r2, #1
   1f092:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f094:	1dfb      	adds	r3, r7, #7
   1f096:	781b      	ldrb	r3, [r3, #0]
   1f098:	4a10      	ldr	r2, [pc, #64]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f09a:	015b      	lsls	r3, r3, #5
   1f09c:	18d3      	adds	r3, r2, r3
   1f09e:	331e      	adds	r3, #30
   1f0a0:	2200      	movs	r2, #0
   1f0a2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f0a4:	4b0f      	ldr	r3, [pc, #60]	; (1f0e4 <sd_mmc_select_slot+0xb8>)
   1f0a6:	1dfa      	adds	r2, r7, #7
   1f0a8:	7812      	ldrb	r2, [r2, #0]
   1f0aa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f0ac:	1dfb      	adds	r3, r7, #7
   1f0ae:	781b      	ldrb	r3, [r3, #0]
   1f0b0:	015a      	lsls	r2, r3, #5
   1f0b2:	4b0a      	ldr	r3, [pc, #40]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f0b4:	18d2      	adds	r2, r2, r3
   1f0b6:	4b0c      	ldr	r3, [pc, #48]	; (1f0e8 <sd_mmc_select_slot+0xbc>)
   1f0b8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f0ba:	4b0c      	ldr	r3, [pc, #48]	; (1f0ec <sd_mmc_select_slot+0xc0>)
   1f0bc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f0be:	1dfb      	adds	r3, r7, #7
   1f0c0:	781b      	ldrb	r3, [r3, #0]
   1f0c2:	4a06      	ldr	r2, [pc, #24]	; (1f0dc <sd_mmc_select_slot+0xb0>)
   1f0c4:	015b      	lsls	r3, r3, #5
   1f0c6:	18d3      	adds	r3, r2, r3
   1f0c8:	330a      	adds	r3, #10
   1f0ca:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f0cc:	3b02      	subs	r3, #2
   1f0ce:	425a      	negs	r2, r3
   1f0d0:	4153      	adcs	r3, r2
   1f0d2:	b2db      	uxtb	r3, r3
}
   1f0d4:	0018      	movs	r0, r3
   1f0d6:	46bd      	mov	sp, r7
   1f0d8:	b002      	add	sp, #8
   1f0da:	bd80      	pop	{r7, pc}
   1f0dc:	20004230 	.word	0x20004230
   1f0e0:	00061a80 	.word	0x00061a80
   1f0e4:	20004250 	.word	0x20004250
   1f0e8:	20004254 	.word	0x20004254
   1f0ec:	0001f0f1 	.word	0x0001f0f1

0001f0f0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f0f0:	b5b0      	push	{r4, r5, r7, lr}
   1f0f2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f0f4:	4b09      	ldr	r3, [pc, #36]	; (1f11c <sd_mmc_configure_slot+0x2c>)
   1f0f6:	7818      	ldrb	r0, [r3, #0]
   1f0f8:	4b09      	ldr	r3, [pc, #36]	; (1f120 <sd_mmc_configure_slot+0x30>)
   1f0fa:	681b      	ldr	r3, [r3, #0]
   1f0fc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f0fe:	4b08      	ldr	r3, [pc, #32]	; (1f120 <sd_mmc_configure_slot+0x30>)
   1f100:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f102:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f104:	4b06      	ldr	r3, [pc, #24]	; (1f120 <sd_mmc_configure_slot+0x30>)
   1f106:	681b      	ldr	r3, [r3, #0]
   1f108:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f10a:	1e5c      	subs	r4, r3, #1
   1f10c:	41a3      	sbcs	r3, r4
   1f10e:	b2db      	uxtb	r3, r3
   1f110:	4c04      	ldr	r4, [pc, #16]	; (1f124 <sd_mmc_configure_slot+0x34>)
   1f112:	47a0      	blx	r4
}
   1f114:	46c0      	nop			; (mov r8, r8)
   1f116:	46bd      	mov	sp, r7
   1f118:	bdb0      	pop	{r4, r5, r7, pc}
   1f11a:	46c0      	nop			; (mov r8, r8)
   1f11c:	20004250 	.word	0x20004250
   1f120:	20004254 	.word	0x20004254
   1f124:	00020269 	.word	0x00020269

0001f128 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f128:	b580      	push	{r7, lr}
   1f12a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f12c:	4b05      	ldr	r3, [pc, #20]	; (1f144 <sd_mmc_deselect_slot+0x1c>)
   1f12e:	781b      	ldrb	r3, [r3, #0]
   1f130:	2b00      	cmp	r3, #0
   1f132:	d104      	bne.n	1f13e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f134:	4b03      	ldr	r3, [pc, #12]	; (1f144 <sd_mmc_deselect_slot+0x1c>)
   1f136:	781b      	ldrb	r3, [r3, #0]
   1f138:	0018      	movs	r0, r3
   1f13a:	4b03      	ldr	r3, [pc, #12]	; (1f148 <sd_mmc_deselect_slot+0x20>)
   1f13c:	4798      	blx	r3
	}
}
   1f13e:	46c0      	nop			; (mov r8, r8)
   1f140:	46bd      	mov	sp, r7
   1f142:	bd80      	pop	{r7, pc}
   1f144:	20004250 	.word	0x20004250
   1f148:	000202f1 	.word	0x000202f1

0001f14c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f14c:	b580      	push	{r7, lr}
   1f14e:	b082      	sub	sp, #8
   1f150:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f152:	1dfb      	adds	r3, r7, #7
   1f154:	2200      	movs	r2, #0
   1f156:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f158:	4b59      	ldr	r3, [pc, #356]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f15a:	681b      	ldr	r3, [r3, #0]
   1f15c:	2201      	movs	r2, #1
   1f15e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f160:	4b57      	ldr	r3, [pc, #348]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f162:	681b      	ldr	r3, [r3, #0]
   1f164:	2200      	movs	r2, #0
   1f166:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f168:	4b55      	ldr	r3, [pc, #340]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f16a:	681b      	ldr	r3, [r3, #0]
   1f16c:	2200      	movs	r2, #0
   1f16e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f170:	4b54      	ldr	r3, [pc, #336]	; (1f2c4 <sd_mmc_spi_card_init+0x178>)
   1f172:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f174:	2388      	movs	r3, #136	; 0x88
   1f176:	015b      	lsls	r3, r3, #5
   1f178:	2100      	movs	r1, #0
   1f17a:	0018      	movs	r0, r3
   1f17c:	4b52      	ldr	r3, [pc, #328]	; (1f2c8 <sd_mmc_spi_card_init+0x17c>)
   1f17e:	4798      	blx	r3
   1f180:	0003      	movs	r3, r0
   1f182:	001a      	movs	r2, r3
   1f184:	2301      	movs	r3, #1
   1f186:	4053      	eors	r3, r2
   1f188:	b2db      	uxtb	r3, r3
   1f18a:	2b00      	cmp	r3, #0
   1f18c:	d001      	beq.n	1f192 <sd_mmc_spi_card_init+0x46>
		return false;
   1f18e:	2300      	movs	r3, #0
   1f190:	e092      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f192:	1dfb      	adds	r3, r7, #7
   1f194:	0018      	movs	r0, r3
   1f196:	4b4d      	ldr	r3, [pc, #308]	; (1f2cc <sd_mmc_spi_card_init+0x180>)
   1f198:	4798      	blx	r3
   1f19a:	0003      	movs	r3, r0
   1f19c:	001a      	movs	r2, r3
   1f19e:	2301      	movs	r3, #1
   1f1a0:	4053      	eors	r3, r2
   1f1a2:	b2db      	uxtb	r3, r3
   1f1a4:	2b00      	cmp	r3, #0
   1f1a6:	d001      	beq.n	1f1ac <sd_mmc_spi_card_init+0x60>
		return false;
   1f1a8:	2300      	movs	r3, #0
   1f1aa:	e085      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f1ac:	4b48      	ldr	r3, [pc, #288]	; (1f2d0 <sd_mmc_spi_card_init+0x184>)
   1f1ae:	4798      	blx	r3
   1f1b0:	0003      	movs	r3, r0
   1f1b2:	001a      	movs	r2, r3
   1f1b4:	2301      	movs	r3, #1
   1f1b6:	4053      	eors	r3, r2
   1f1b8:	b2db      	uxtb	r3, r3
   1f1ba:	2b00      	cmp	r3, #0
   1f1bc:	d001      	beq.n	1f1c2 <sd_mmc_spi_card_init+0x76>
		return false;
   1f1be:	2300      	movs	r3, #0
   1f1c0:	e07a      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f1c2:	4b3f      	ldr	r3, [pc, #252]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f1c4:	681b      	ldr	r3, [r3, #0]
   1f1c6:	7adb      	ldrb	r3, [r3, #11]
   1f1c8:	001a      	movs	r2, r3
   1f1ca:	2301      	movs	r3, #1
   1f1cc:	4013      	ands	r3, r2
   1f1ce:	d021      	beq.n	1f214 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f1d0:	1dfb      	adds	r3, r7, #7
   1f1d2:	781b      	ldrb	r3, [r3, #0]
   1f1d4:	0018      	movs	r0, r3
   1f1d6:	4b3f      	ldr	r3, [pc, #252]	; (1f2d4 <sd_mmc_spi_card_init+0x188>)
   1f1d8:	4798      	blx	r3
   1f1da:	0003      	movs	r3, r0
   1f1dc:	001a      	movs	r2, r3
   1f1de:	2301      	movs	r3, #1
   1f1e0:	4053      	eors	r3, r2
   1f1e2:	b2db      	uxtb	r3, r3
   1f1e4:	2b00      	cmp	r3, #0
   1f1e6:	d007      	beq.n	1f1f8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f1e8:	4b35      	ldr	r3, [pc, #212]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f1ea:	681b      	ldr	r3, [r3, #0]
   1f1ec:	2202      	movs	r2, #2
   1f1ee:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f1f0:	4b39      	ldr	r3, [pc, #228]	; (1f2d8 <sd_mmc_spi_card_init+0x18c>)
   1f1f2:	4798      	blx	r3
   1f1f4:	0003      	movs	r3, r0
   1f1f6:	e05f      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f1f8:	4b38      	ldr	r3, [pc, #224]	; (1f2dc <sd_mmc_spi_card_init+0x190>)
   1f1fa:	2100      	movs	r1, #0
   1f1fc:	0018      	movs	r0, r3
   1f1fe:	4b32      	ldr	r3, [pc, #200]	; (1f2c8 <sd_mmc_spi_card_init+0x17c>)
   1f200:	4798      	blx	r3
   1f202:	0003      	movs	r3, r0
   1f204:	001a      	movs	r2, r3
   1f206:	2301      	movs	r3, #1
   1f208:	4053      	eors	r3, r2
   1f20a:	b2db      	uxtb	r3, r3
   1f20c:	2b00      	cmp	r3, #0
   1f20e:	d001      	beq.n	1f214 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f210:	2300      	movs	r3, #0
   1f212:	e051      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f214:	4b2a      	ldr	r3, [pc, #168]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f216:	681b      	ldr	r3, [r3, #0]
   1f218:	7adb      	ldrb	r3, [r3, #11]
   1f21a:	001a      	movs	r2, r3
   1f21c:	2301      	movs	r3, #1
   1f21e:	4013      	ands	r3, r2
   1f220:	d017      	beq.n	1f252 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f222:	4b2f      	ldr	r3, [pc, #188]	; (1f2e0 <sd_mmc_spi_card_init+0x194>)
   1f224:	4798      	blx	r3
   1f226:	0003      	movs	r3, r0
   1f228:	001a      	movs	r2, r3
   1f22a:	2301      	movs	r3, #1
   1f22c:	4053      	eors	r3, r2
   1f22e:	b2db      	uxtb	r3, r3
   1f230:	2b00      	cmp	r3, #0
   1f232:	d001      	beq.n	1f238 <sd_mmc_spi_card_init+0xec>
			return false;
   1f234:	2300      	movs	r3, #0
   1f236:	e03f      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f238:	4b2a      	ldr	r3, [pc, #168]	; (1f2e4 <sd_mmc_spi_card_init+0x198>)
   1f23a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f23c:	4b2a      	ldr	r3, [pc, #168]	; (1f2e8 <sd_mmc_spi_card_init+0x19c>)
   1f23e:	4798      	blx	r3
   1f240:	0003      	movs	r3, r0
   1f242:	001a      	movs	r2, r3
   1f244:	2301      	movs	r3, #1
   1f246:	4053      	eors	r3, r2
   1f248:	b2db      	uxtb	r3, r3
   1f24a:	2b00      	cmp	r3, #0
   1f24c:	d001      	beq.n	1f252 <sd_mmc_spi_card_init+0x106>
			return false;
   1f24e:	2300      	movs	r3, #0
   1f250:	e032      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f252:	4b1b      	ldr	r3, [pc, #108]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f254:	681b      	ldr	r3, [r3, #0]
   1f256:	7adb      	ldrb	r3, [r3, #11]
   1f258:	001a      	movs	r2, r3
   1f25a:	2301      	movs	r3, #1
   1f25c:	4013      	ands	r3, r2
   1f25e:	d016      	beq.n	1f28e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f260:	4b17      	ldr	r3, [pc, #92]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f262:	681b      	ldr	r3, [r3, #0]
   1f264:	7adb      	ldrb	r3, [r3, #11]
   1f266:	001a      	movs	r2, r3
   1f268:	2308      	movs	r3, #8
   1f26a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f26c:	d10f      	bne.n	1f28e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f26e:	2380      	movs	r3, #128	; 0x80
   1f270:	009b      	lsls	r3, r3, #2
   1f272:	4a1e      	ldr	r2, [pc, #120]	; (1f2ec <sd_mmc_spi_card_init+0x1a0>)
   1f274:	0019      	movs	r1, r3
   1f276:	0010      	movs	r0, r2
   1f278:	4b13      	ldr	r3, [pc, #76]	; (1f2c8 <sd_mmc_spi_card_init+0x17c>)
   1f27a:	4798      	blx	r3
   1f27c:	0003      	movs	r3, r0
   1f27e:	001a      	movs	r2, r3
   1f280:	2301      	movs	r3, #1
   1f282:	4053      	eors	r3, r2
   1f284:	b2db      	uxtb	r3, r3
   1f286:	2b00      	cmp	r3, #0
   1f288:	d001      	beq.n	1f28e <sd_mmc_spi_card_init+0x142>
			return false;
   1f28a:	2300      	movs	r3, #0
   1f28c:	e014      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f28e:	4b0c      	ldr	r3, [pc, #48]	; (1f2c0 <sd_mmc_spi_card_init+0x174>)
   1f290:	681b      	ldr	r3, [r3, #0]
   1f292:	7adb      	ldrb	r3, [r3, #11]
   1f294:	001a      	movs	r2, r3
   1f296:	2301      	movs	r3, #1
   1f298:	4013      	ands	r3, r2
   1f29a:	d00a      	beq.n	1f2b2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f29c:	4b14      	ldr	r3, [pc, #80]	; (1f2f0 <sd_mmc_spi_card_init+0x1a4>)
   1f29e:	4798      	blx	r3
   1f2a0:	0003      	movs	r3, r0
   1f2a2:	001a      	movs	r2, r3
   1f2a4:	2301      	movs	r3, #1
   1f2a6:	4053      	eors	r3, r2
   1f2a8:	b2db      	uxtb	r3, r3
   1f2aa:	2b00      	cmp	r3, #0
   1f2ac:	d001      	beq.n	1f2b2 <sd_mmc_spi_card_init+0x166>
			return false;
   1f2ae:	2300      	movs	r3, #0
   1f2b0:	e002      	b.n	1f2b8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f2b2:	4b10      	ldr	r3, [pc, #64]	; (1f2f4 <sd_mmc_spi_card_init+0x1a8>)
   1f2b4:	4798      	blx	r3
	return true;
   1f2b6:	2301      	movs	r3, #1
}
   1f2b8:	0018      	movs	r0, r3
   1f2ba:	46bd      	mov	sp, r7
   1f2bc:	b002      	add	sp, #8
   1f2be:	bd80      	pop	{r7, pc}
   1f2c0:	20004254 	.word	0x20004254
   1f2c4:	00020335 	.word	0x00020335
   1f2c8:	00020381 	.word	0x00020381
   1f2cc:	0001eaa1 	.word	0x0001eaa1
   1f2d0:	0001ea95 	.word	0x0001ea95
   1f2d4:	0001e9b1 	.word	0x0001e9b1
   1f2d8:	0001f2f9 	.word	0x0001f2f9
   1f2dc:	0000113b 	.word	0x0000113b
   1f2e0:	0001ec3d 	.word	0x0001ec3d
   1f2e4:	0001eddd 	.word	0x0001eddd
   1f2e8:	0001ef25 	.word	0x0001ef25
   1f2ec:	00001110 	.word	0x00001110
   1f2f0:	0001eec9 	.word	0x0001eec9
   1f2f4:	0001f0f1 	.word	0x0001f0f1

0001f2f8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f2f8:	b580      	push	{r7, lr}
   1f2fa:	b082      	sub	sp, #8
   1f2fc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f2fe:	2388      	movs	r3, #136	; 0x88
   1f300:	015b      	lsls	r3, r3, #5
   1f302:	2100      	movs	r1, #0
   1f304:	0018      	movs	r0, r3
   1f306:	4b32      	ldr	r3, [pc, #200]	; (1f3d0 <sd_mmc_spi_install_mmc+0xd8>)
   1f308:	4798      	blx	r3
   1f30a:	0003      	movs	r3, r0
   1f30c:	001a      	movs	r2, r3
   1f30e:	2301      	movs	r3, #1
   1f310:	4053      	eors	r3, r2
   1f312:	b2db      	uxtb	r3, r3
   1f314:	2b00      	cmp	r3, #0
   1f316:	d001      	beq.n	1f31c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f318:	2300      	movs	r3, #0
   1f31a:	e055      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f31c:	4b2d      	ldr	r3, [pc, #180]	; (1f3d4 <sd_mmc_spi_install_mmc+0xdc>)
   1f31e:	4798      	blx	r3
   1f320:	0003      	movs	r3, r0
   1f322:	001a      	movs	r2, r3
   1f324:	2301      	movs	r3, #1
   1f326:	4053      	eors	r3, r2
   1f328:	b2db      	uxtb	r3, r3
   1f32a:	2b00      	cmp	r3, #0
   1f32c:	d001      	beq.n	1f332 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f32e:	2300      	movs	r3, #0
   1f330:	e04a      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f332:	4b29      	ldr	r3, [pc, #164]	; (1f3d8 <sd_mmc_spi_install_mmc+0xe0>)
   1f334:	2100      	movs	r1, #0
   1f336:	0018      	movs	r0, r3
   1f338:	4b25      	ldr	r3, [pc, #148]	; (1f3d0 <sd_mmc_spi_install_mmc+0xd8>)
   1f33a:	4798      	blx	r3
   1f33c:	0003      	movs	r3, r0
   1f33e:	001a      	movs	r2, r3
   1f340:	2301      	movs	r3, #1
   1f342:	4053      	eors	r3, r2
   1f344:	b2db      	uxtb	r3, r3
   1f346:	2b00      	cmp	r3, #0
   1f348:	d001      	beq.n	1f34e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f34a:	2300      	movs	r3, #0
   1f34c:	e03c      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f34e:	4b23      	ldr	r3, [pc, #140]	; (1f3dc <sd_mmc_spi_install_mmc+0xe4>)
   1f350:	4798      	blx	r3
   1f352:	0003      	movs	r3, r0
   1f354:	001a      	movs	r2, r3
   1f356:	2301      	movs	r3, #1
   1f358:	4053      	eors	r3, r2
   1f35a:	b2db      	uxtb	r3, r3
   1f35c:	2b00      	cmp	r3, #0
   1f35e:	d001      	beq.n	1f364 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f360:	2300      	movs	r3, #0
   1f362:	e031      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f364:	4b1e      	ldr	r3, [pc, #120]	; (1f3e0 <sd_mmc_spi_install_mmc+0xe8>)
   1f366:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f368:	4b1e      	ldr	r3, [pc, #120]	; (1f3e4 <sd_mmc_spi_install_mmc+0xec>)
   1f36a:	681b      	ldr	r3, [r3, #0]
   1f36c:	7b1b      	ldrb	r3, [r3, #12]
   1f36e:	2b3f      	cmp	r3, #63	; 0x3f
   1f370:	d90c      	bls.n	1f38c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f372:	1dfb      	adds	r3, r7, #7
   1f374:	0018      	movs	r0, r3
   1f376:	4b1c      	ldr	r3, [pc, #112]	; (1f3e8 <sd_mmc_spi_install_mmc+0xf0>)
   1f378:	4798      	blx	r3
   1f37a:	0003      	movs	r3, r0
   1f37c:	001a      	movs	r2, r3
   1f37e:	2301      	movs	r3, #1
   1f380:	4053      	eors	r3, r2
   1f382:	b2db      	uxtb	r3, r3
   1f384:	2b00      	cmp	r3, #0
   1f386:	d001      	beq.n	1f38c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f388:	2300      	movs	r3, #0
   1f38a:	e01d      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f38c:	2380      	movs	r3, #128	; 0x80
   1f38e:	009b      	lsls	r3, r3, #2
   1f390:	4a16      	ldr	r2, [pc, #88]	; (1f3ec <sd_mmc_spi_install_mmc+0xf4>)
   1f392:	0019      	movs	r1, r3
   1f394:	0010      	movs	r0, r2
   1f396:	4b0e      	ldr	r3, [pc, #56]	; (1f3d0 <sd_mmc_spi_install_mmc+0xd8>)
   1f398:	4798      	blx	r3
   1f39a:	0003      	movs	r3, r0
   1f39c:	001a      	movs	r2, r3
   1f39e:	2301      	movs	r3, #1
   1f3a0:	4053      	eors	r3, r2
   1f3a2:	b2db      	uxtb	r3, r3
   1f3a4:	2b00      	cmp	r3, #0
   1f3a6:	d001      	beq.n	1f3ac <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	e00d      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f3ac:	4b10      	ldr	r3, [pc, #64]	; (1f3f0 <sd_mmc_spi_install_mmc+0xf8>)
   1f3ae:	4798      	blx	r3
   1f3b0:	0003      	movs	r3, r0
   1f3b2:	001a      	movs	r2, r3
   1f3b4:	2301      	movs	r3, #1
   1f3b6:	4053      	eors	r3, r2
   1f3b8:	b2db      	uxtb	r3, r3
   1f3ba:	2b00      	cmp	r3, #0
   1f3bc:	d001      	beq.n	1f3c2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f3be:	2300      	movs	r3, #0
   1f3c0:	e002      	b.n	1f3c8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f3c2:	4b0c      	ldr	r3, [pc, #48]	; (1f3f4 <sd_mmc_spi_install_mmc+0xfc>)
   1f3c4:	4798      	blx	r3
	return true;
   1f3c6:	2301      	movs	r3, #1
}
   1f3c8:	0018      	movs	r0, r3
   1f3ca:	46bd      	mov	sp, r7
   1f3cc:	b002      	add	sp, #8
   1f3ce:	bd80      	pop	{r7, pc}
   1f3d0:	00020381 	.word	0x00020381
   1f3d4:	0001e905 	.word	0x0001e905
   1f3d8:	0000113b 	.word	0x0000113b
   1f3dc:	0001ec3d 	.word	0x0001ec3d
   1f3e0:	0001ecad 	.word	0x0001ecad
   1f3e4:	20004254 	.word	0x20004254
   1f3e8:	0001eb11 	.word	0x0001eb11
   1f3ec:	00001110 	.word	0x00001110
   1f3f0:	0001eec9 	.word	0x0001eec9
   1f3f4:	0001f0f1 	.word	0x0001f0f1

0001f3f8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f3f8:	b580      	push	{r7, lr}
   1f3fa:	b082      	sub	sp, #8
   1f3fc:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f3fe:	1dfb      	adds	r3, r7, #7
   1f400:	2200      	movs	r2, #0
   1f402:	701a      	strb	r2, [r3, #0]
   1f404:	e00c      	b.n	1f420 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f406:	1dfb      	adds	r3, r7, #7
   1f408:	781b      	ldrb	r3, [r3, #0]
   1f40a:	4a0c      	ldr	r2, [pc, #48]	; (1f43c <sd_mmc_init+0x44>)
   1f40c:	015b      	lsls	r3, r3, #5
   1f40e:	18d3      	adds	r3, r2, r3
   1f410:	330a      	adds	r3, #10
   1f412:	2204      	movs	r2, #4
   1f414:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f416:	1dfb      	adds	r3, r7, #7
   1f418:	781a      	ldrb	r2, [r3, #0]
   1f41a:	1dfb      	adds	r3, r7, #7
   1f41c:	3201      	adds	r2, #1
   1f41e:	701a      	strb	r2, [r3, #0]
   1f420:	1dfb      	adds	r3, r7, #7
   1f422:	781b      	ldrb	r3, [r3, #0]
   1f424:	2b00      	cmp	r3, #0
   1f426:	d0ee      	beq.n	1f406 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f428:	4b05      	ldr	r3, [pc, #20]	; (1f440 <sd_mmc_init+0x48>)
   1f42a:	22ff      	movs	r2, #255	; 0xff
   1f42c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f42e:	4b05      	ldr	r3, [pc, #20]	; (1f444 <sd_mmc_init+0x4c>)
   1f430:	4798      	blx	r3
}
   1f432:	46c0      	nop			; (mov r8, r8)
   1f434:	46bd      	mov	sp, r7
   1f436:	b002      	add	sp, #8
   1f438:	bd80      	pop	{r7, pc}
   1f43a:	46c0      	nop			; (mov r8, r8)
   1f43c:	20004230 	.word	0x20004230
   1f440:	20004250 	.word	0x20004250
   1f444:	000201a1 	.word	0x000201a1

0001f448 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f448:	b590      	push	{r4, r7, lr}
   1f44a:	b085      	sub	sp, #20
   1f44c:	af00      	add	r7, sp, #0
   1f44e:	0002      	movs	r2, r0
   1f450:	1dfb      	adds	r3, r7, #7
   1f452:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f454:	230f      	movs	r3, #15
   1f456:	18fc      	adds	r4, r7, r3
   1f458:	1dfb      	adds	r3, r7, #7
   1f45a:	781b      	ldrb	r3, [r3, #0]
   1f45c:	0018      	movs	r0, r3
   1f45e:	4b13      	ldr	r3, [pc, #76]	; (1f4ac <sd_mmc_check+0x64>)
   1f460:	4798      	blx	r3
   1f462:	0003      	movs	r3, r0
   1f464:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f466:	230f      	movs	r3, #15
   1f468:	18fb      	adds	r3, r7, r3
   1f46a:	781b      	ldrb	r3, [r3, #0]
   1f46c:	2b01      	cmp	r3, #1
   1f46e:	d005      	beq.n	1f47c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f470:	4b0f      	ldr	r3, [pc, #60]	; (1f4b0 <sd_mmc_check+0x68>)
   1f472:	4798      	blx	r3
		return sd_mmc_err;
   1f474:	230f      	movs	r3, #15
   1f476:	18fb      	adds	r3, r7, r3
   1f478:	781b      	ldrb	r3, [r3, #0]
   1f47a:	e012      	b.n	1f4a2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f47c:	4b0d      	ldr	r3, [pc, #52]	; (1f4b4 <sd_mmc_check+0x6c>)
   1f47e:	4798      	blx	r3
   1f480:	1e03      	subs	r3, r0, #0
   1f482:	d007      	beq.n	1f494 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f484:	4b0c      	ldr	r3, [pc, #48]	; (1f4b8 <sd_mmc_check+0x70>)
   1f486:	681b      	ldr	r3, [r3, #0]
   1f488:	2200      	movs	r2, #0
   1f48a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f48c:	4b08      	ldr	r3, [pc, #32]	; (1f4b0 <sd_mmc_check+0x68>)
   1f48e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f490:	2301      	movs	r3, #1
   1f492:	e006      	b.n	1f4a2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f494:	4b08      	ldr	r3, [pc, #32]	; (1f4b8 <sd_mmc_check+0x70>)
   1f496:	681b      	ldr	r3, [r3, #0]
   1f498:	2203      	movs	r2, #3
   1f49a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f49c:	4b04      	ldr	r3, [pc, #16]	; (1f4b0 <sd_mmc_check+0x68>)
   1f49e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f4a0:	2303      	movs	r3, #3
}
   1f4a2:	0018      	movs	r0, r3
   1f4a4:	46bd      	mov	sp, r7
   1f4a6:	b005      	add	sp, #20
   1f4a8:	bd90      	pop	{r4, r7, pc}
   1f4aa:	46c0      	nop			; (mov r8, r8)
   1f4ac:	0001f02d 	.word	0x0001f02d
   1f4b0:	0001f129 	.word	0x0001f129
   1f4b4:	0001f14d 	.word	0x0001f14d
   1f4b8:	20004254 	.word	0x20004254

0001f4bc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f4bc:	b580      	push	{r7, lr}
   1f4be:	b082      	sub	sp, #8
   1f4c0:	af00      	add	r7, sp, #0
   1f4c2:	0002      	movs	r2, r0
   1f4c4:	1dfb      	adds	r3, r7, #7
   1f4c6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f4c8:	1dfb      	adds	r3, r7, #7
   1f4ca:	781b      	ldrb	r3, [r3, #0]
   1f4cc:	0018      	movs	r0, r3
   1f4ce:	4b07      	ldr	r3, [pc, #28]	; (1f4ec <sd_mmc_get_type+0x30>)
   1f4d0:	4798      	blx	r3
   1f4d2:	1e03      	subs	r3, r0, #0
   1f4d4:	d001      	beq.n	1f4da <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f4d6:	2300      	movs	r3, #0
   1f4d8:	e004      	b.n	1f4e4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f4da:	4b05      	ldr	r3, [pc, #20]	; (1f4f0 <sd_mmc_get_type+0x34>)
   1f4dc:	4798      	blx	r3
	return sd_mmc_card->type;
   1f4de:	4b05      	ldr	r3, [pc, #20]	; (1f4f4 <sd_mmc_get_type+0x38>)
   1f4e0:	681b      	ldr	r3, [r3, #0]
   1f4e2:	7adb      	ldrb	r3, [r3, #11]
}
   1f4e4:	0018      	movs	r0, r3
   1f4e6:	46bd      	mov	sp, r7
   1f4e8:	b002      	add	sp, #8
   1f4ea:	bd80      	pop	{r7, pc}
   1f4ec:	0001f02d 	.word	0x0001f02d
   1f4f0:	0001f129 	.word	0x0001f129
   1f4f4:	20004254 	.word	0x20004254

0001f4f8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f4f8:	b580      	push	{r7, lr}
   1f4fa:	b082      	sub	sp, #8
   1f4fc:	af00      	add	r7, sp, #0
   1f4fe:	0002      	movs	r2, r0
   1f500:	1dfb      	adds	r3, r7, #7
   1f502:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f504:	1dfb      	adds	r3, r7, #7
   1f506:	781b      	ldrb	r3, [r3, #0]
   1f508:	0018      	movs	r0, r3
   1f50a:	4b07      	ldr	r3, [pc, #28]	; (1f528 <sd_mmc_get_capacity+0x30>)
   1f50c:	4798      	blx	r3
   1f50e:	1e03      	subs	r3, r0, #0
   1f510:	d001      	beq.n	1f516 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f512:	2300      	movs	r3, #0
   1f514:	e004      	b.n	1f520 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f516:	4b05      	ldr	r3, [pc, #20]	; (1f52c <sd_mmc_get_capacity+0x34>)
   1f518:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f51a:	4b05      	ldr	r3, [pc, #20]	; (1f530 <sd_mmc_get_capacity+0x38>)
   1f51c:	681b      	ldr	r3, [r3, #0]
   1f51e:	685b      	ldr	r3, [r3, #4]
}
   1f520:	0018      	movs	r0, r3
   1f522:	46bd      	mov	sp, r7
   1f524:	b002      	add	sp, #8
   1f526:	bd80      	pop	{r7, pc}
   1f528:	0001f02d 	.word	0x0001f02d
   1f52c:	0001f129 	.word	0x0001f129
   1f530:	20004254 	.word	0x20004254

0001f534 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f534:	b580      	push	{r7, lr}
   1f536:	b082      	sub	sp, #8
   1f538:	af00      	add	r7, sp, #0
   1f53a:	0002      	movs	r2, r0
   1f53c:	1dfb      	adds	r3, r7, #7
   1f53e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f540:	2300      	movs	r3, #0
}
   1f542:	0018      	movs	r0, r3
   1f544:	46bd      	mov	sp, r7
   1f546:	b002      	add	sp, #8
   1f548:	bd80      	pop	{r7, pc}
	...

0001f54c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f54c:	b590      	push	{r4, r7, lr}
   1f54e:	b089      	sub	sp, #36	; 0x24
   1f550:	af02      	add	r7, sp, #8
   1f552:	6039      	str	r1, [r7, #0]
   1f554:	0011      	movs	r1, r2
   1f556:	1dfb      	adds	r3, r7, #7
   1f558:	1c02      	adds	r2, r0, #0
   1f55a:	701a      	strb	r2, [r3, #0]
   1f55c:	1d3b      	adds	r3, r7, #4
   1f55e:	1c0a      	adds	r2, r1, #0
   1f560:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f562:	230f      	movs	r3, #15
   1f564:	18fc      	adds	r4, r7, r3
   1f566:	1dfb      	adds	r3, r7, #7
   1f568:	781b      	ldrb	r3, [r3, #0]
   1f56a:	0018      	movs	r0, r3
   1f56c:	4b29      	ldr	r3, [pc, #164]	; (1f614 <sd_mmc_init_read_blocks+0xc8>)
   1f56e:	4798      	blx	r3
   1f570:	0003      	movs	r3, r0
   1f572:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f574:	230f      	movs	r3, #15
   1f576:	18fb      	adds	r3, r7, r3
   1f578:	781b      	ldrb	r3, [r3, #0]
   1f57a:	2b00      	cmp	r3, #0
   1f57c:	d003      	beq.n	1f586 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f57e:	230f      	movs	r3, #15
   1f580:	18fb      	adds	r3, r7, r3
   1f582:	781b      	ldrb	r3, [r3, #0]
   1f584:	e041      	b.n	1f60a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f586:	4b24      	ldr	r3, [pc, #144]	; (1f618 <sd_mmc_init_read_blocks+0xcc>)
   1f588:	4798      	blx	r3
   1f58a:	0003      	movs	r3, r0
   1f58c:	001a      	movs	r2, r3
   1f58e:	2301      	movs	r3, #1
   1f590:	4053      	eors	r3, r2
   1f592:	b2db      	uxtb	r3, r3
   1f594:	2b00      	cmp	r3, #0
   1f596:	d003      	beq.n	1f5a0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f598:	4b20      	ldr	r3, [pc, #128]	; (1f61c <sd_mmc_init_read_blocks+0xd0>)
   1f59a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f59c:	2305      	movs	r3, #5
   1f59e:	e034      	b.n	1f60a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f5a0:	1d3b      	adds	r3, r7, #4
   1f5a2:	881b      	ldrh	r3, [r3, #0]
   1f5a4:	2b01      	cmp	r3, #1
   1f5a6:	d902      	bls.n	1f5ae <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f5a8:	4b1d      	ldr	r3, [pc, #116]	; (1f620 <sd_mmc_init_read_blocks+0xd4>)
   1f5aa:	617b      	str	r3, [r7, #20]
   1f5ac:	e001      	b.n	1f5b2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f5ae:	4b1d      	ldr	r3, [pc, #116]	; (1f624 <sd_mmc_init_read_blocks+0xd8>)
   1f5b0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f5b2:	4b1d      	ldr	r3, [pc, #116]	; (1f628 <sd_mmc_init_read_blocks+0xdc>)
   1f5b4:	681b      	ldr	r3, [r3, #0]
   1f5b6:	7adb      	ldrb	r3, [r3, #11]
   1f5b8:	001a      	movs	r2, r3
   1f5ba:	2308      	movs	r3, #8
   1f5bc:	4013      	ands	r3, r2
   1f5be:	d002      	beq.n	1f5c6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f5c0:	683b      	ldr	r3, [r7, #0]
   1f5c2:	613b      	str	r3, [r7, #16]
   1f5c4:	e002      	b.n	1f5cc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f5c6:	683b      	ldr	r3, [r7, #0]
   1f5c8:	025b      	lsls	r3, r3, #9
   1f5ca:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f5cc:	1d3b      	adds	r3, r7, #4
   1f5ce:	881c      	ldrh	r4, [r3, #0]
   1f5d0:	2380      	movs	r3, #128	; 0x80
   1f5d2:	009a      	lsls	r2, r3, #2
   1f5d4:	6939      	ldr	r1, [r7, #16]
   1f5d6:	6978      	ldr	r0, [r7, #20]
   1f5d8:	2301      	movs	r3, #1
   1f5da:	9300      	str	r3, [sp, #0]
   1f5dc:	0023      	movs	r3, r4
   1f5de:	4c13      	ldr	r4, [pc, #76]	; (1f62c <sd_mmc_init_read_blocks+0xe0>)
   1f5e0:	47a0      	blx	r4
   1f5e2:	0003      	movs	r3, r0
   1f5e4:	001a      	movs	r2, r3
   1f5e6:	2301      	movs	r3, #1
   1f5e8:	4053      	eors	r3, r2
   1f5ea:	b2db      	uxtb	r3, r3
   1f5ec:	2b00      	cmp	r3, #0
   1f5ee:	d003      	beq.n	1f5f8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f5f0:	4b0a      	ldr	r3, [pc, #40]	; (1f61c <sd_mmc_init_read_blocks+0xd0>)
   1f5f2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f5f4:	2305      	movs	r3, #5
   1f5f6:	e008      	b.n	1f60a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f5f8:	4b0d      	ldr	r3, [pc, #52]	; (1f630 <sd_mmc_init_read_blocks+0xe4>)
   1f5fa:	1d3a      	adds	r2, r7, #4
   1f5fc:	8812      	ldrh	r2, [r2, #0]
   1f5fe:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f600:	4b0c      	ldr	r3, [pc, #48]	; (1f634 <sd_mmc_init_read_blocks+0xe8>)
   1f602:	1d3a      	adds	r2, r7, #4
   1f604:	8812      	ldrh	r2, [r2, #0]
   1f606:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f608:	2300      	movs	r3, #0
}
   1f60a:	0018      	movs	r0, r3
   1f60c:	46bd      	mov	sp, r7
   1f60e:	b007      	add	sp, #28
   1f610:	bd90      	pop	{r4, r7, pc}
   1f612:	46c0      	nop			; (mov r8, r8)
   1f614:	0001f02d 	.word	0x0001f02d
   1f618:	0001eec9 	.word	0x0001eec9
   1f61c:	0001f129 	.word	0x0001f129
   1f620:	00101112 	.word	0x00101112
   1f624:	00081111 	.word	0x00081111
   1f628:	20004254 	.word	0x20004254
   1f62c:	000203a9 	.word	0x000203a9
   1f630:	2000425a 	.word	0x2000425a
   1f634:	20004258 	.word	0x20004258

0001f638 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f638:	b580      	push	{r7, lr}
   1f63a:	b082      	sub	sp, #8
   1f63c:	af00      	add	r7, sp, #0
   1f63e:	6078      	str	r0, [r7, #4]
   1f640:	000a      	movs	r2, r1
   1f642:	1cbb      	adds	r3, r7, #2
   1f644:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f646:	1cbb      	adds	r3, r7, #2
   1f648:	881a      	ldrh	r2, [r3, #0]
   1f64a:	687b      	ldr	r3, [r7, #4]
   1f64c:	0011      	movs	r1, r2
   1f64e:	0018      	movs	r0, r3
   1f650:	4b0d      	ldr	r3, [pc, #52]	; (1f688 <sd_mmc_start_read_blocks+0x50>)
   1f652:	4798      	blx	r3
   1f654:	0003      	movs	r3, r0
   1f656:	001a      	movs	r2, r3
   1f658:	2301      	movs	r3, #1
   1f65a:	4053      	eors	r3, r2
   1f65c:	b2db      	uxtb	r3, r3
   1f65e:	2b00      	cmp	r3, #0
   1f660:	d004      	beq.n	1f66c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f662:	4b0a      	ldr	r3, [pc, #40]	; (1f68c <sd_mmc_start_read_blocks+0x54>)
   1f664:	2200      	movs	r2, #0
   1f666:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f668:	2305      	movs	r3, #5
   1f66a:	e008      	b.n	1f67e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f66c:	4b07      	ldr	r3, [pc, #28]	; (1f68c <sd_mmc_start_read_blocks+0x54>)
   1f66e:	881a      	ldrh	r2, [r3, #0]
   1f670:	1cbb      	adds	r3, r7, #2
   1f672:	881b      	ldrh	r3, [r3, #0]
   1f674:	1ad3      	subs	r3, r2, r3
   1f676:	b29a      	uxth	r2, r3
   1f678:	4b04      	ldr	r3, [pc, #16]	; (1f68c <sd_mmc_start_read_blocks+0x54>)
   1f67a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f67c:	2300      	movs	r3, #0
}
   1f67e:	0018      	movs	r0, r3
   1f680:	46bd      	mov	sp, r7
   1f682:	b002      	add	sp, #8
   1f684:	bd80      	pop	{r7, pc}
   1f686:	46c0      	nop			; (mov r8, r8)
   1f688:	00020679 	.word	0x00020679
   1f68c:	2000425a 	.word	0x2000425a

0001f690 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1f690:	b580      	push	{r7, lr}
   1f692:	b082      	sub	sp, #8
   1f694:	af00      	add	r7, sp, #0
   1f696:	0002      	movs	r2, r0
   1f698:	1dfb      	adds	r3, r7, #7
   1f69a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1f69c:	4b1c      	ldr	r3, [pc, #112]	; (1f710 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1f69e:	4798      	blx	r3
   1f6a0:	0003      	movs	r3, r0
   1f6a2:	001a      	movs	r2, r3
   1f6a4:	2301      	movs	r3, #1
   1f6a6:	4053      	eors	r3, r2
   1f6a8:	b2db      	uxtb	r3, r3
   1f6aa:	2b00      	cmp	r3, #0
   1f6ac:	d001      	beq.n	1f6b2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f6ae:	2305      	movs	r3, #5
   1f6b0:	e029      	b.n	1f706 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1f6b2:	1dfb      	adds	r3, r7, #7
   1f6b4:	781b      	ldrb	r3, [r3, #0]
   1f6b6:	2b00      	cmp	r3, #0
   1f6b8:	d003      	beq.n	1f6c2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f6ba:	4b16      	ldr	r3, [pc, #88]	; (1f714 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f6bc:	2200      	movs	r2, #0
   1f6be:	801a      	strh	r2, [r3, #0]
   1f6c0:	e005      	b.n	1f6ce <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f6c2:	4b14      	ldr	r3, [pc, #80]	; (1f714 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f6c4:	881b      	ldrh	r3, [r3, #0]
   1f6c6:	2b00      	cmp	r3, #0
   1f6c8:	d001      	beq.n	1f6ce <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1f6ca:	2300      	movs	r3, #0
   1f6cc:	e01b      	b.n	1f706 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f6ce:	4b12      	ldr	r3, [pc, #72]	; (1f718 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1f6d0:	881b      	ldrh	r3, [r3, #0]
   1f6d2:	2b01      	cmp	r3, #1
   1f6d4:	d103      	bne.n	1f6de <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f6d6:	4b11      	ldr	r3, [pc, #68]	; (1f71c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f6d8:	4798      	blx	r3
		return SD_MMC_OK;
   1f6da:	2300      	movs	r3, #0
   1f6dc:	e013      	b.n	1f706 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1f6de:	4b10      	ldr	r3, [pc, #64]	; (1f720 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f6e0:	2100      	movs	r1, #0
   1f6e2:	0018      	movs	r0, r3
   1f6e4:	4b0f      	ldr	r3, [pc, #60]	; (1f724 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f6e6:	4798      	blx	r3
   1f6e8:	0003      	movs	r3, r0
   1f6ea:	001a      	movs	r2, r3
   1f6ec:	2301      	movs	r3, #1
   1f6ee:	4053      	eors	r3, r2
   1f6f0:	b2db      	uxtb	r3, r3
   1f6f2:	2b00      	cmp	r3, #0
   1f6f4:	d004      	beq.n	1f700 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1f6f6:	4b0a      	ldr	r3, [pc, #40]	; (1f720 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f6f8:	2100      	movs	r1, #0
   1f6fa:	0018      	movs	r0, r3
   1f6fc:	4b09      	ldr	r3, [pc, #36]	; (1f724 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f6fe:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1f700:	4b06      	ldr	r3, [pc, #24]	; (1f71c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f702:	4798      	blx	r3
	return SD_MMC_OK;
   1f704:	2300      	movs	r3, #0
}
   1f706:	0018      	movs	r0, r3
   1f708:	46bd      	mov	sp, r7
   1f70a:	b002      	add	sp, #8
   1f70c:	bd80      	pop	{r7, pc}
   1f70e:	46c0      	nop			; (mov r8, r8)
   1f710:	0002071d 	.word	0x0002071d
   1f714:	2000425a 	.word	0x2000425a
   1f718:	20004258 	.word	0x20004258
   1f71c:	0001f129 	.word	0x0001f129
   1f720:	0000310c 	.word	0x0000310c
   1f724:	00020381 	.word	0x00020381

0001f728 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f728:	b590      	push	{r4, r7, lr}
   1f72a:	b089      	sub	sp, #36	; 0x24
   1f72c:	af02      	add	r7, sp, #8
   1f72e:	6039      	str	r1, [r7, #0]
   1f730:	0011      	movs	r1, r2
   1f732:	1dfb      	adds	r3, r7, #7
   1f734:	1c02      	adds	r2, r0, #0
   1f736:	701a      	strb	r2, [r3, #0]
   1f738:	1d3b      	adds	r3, r7, #4
   1f73a:	1c0a      	adds	r2, r1, #0
   1f73c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f73e:	230f      	movs	r3, #15
   1f740:	18fc      	adds	r4, r7, r3
   1f742:	1dfb      	adds	r3, r7, #7
   1f744:	781b      	ldrb	r3, [r3, #0]
   1f746:	0018      	movs	r0, r3
   1f748:	4b28      	ldr	r3, [pc, #160]	; (1f7ec <sd_mmc_init_write_blocks+0xc4>)
   1f74a:	4798      	blx	r3
   1f74c:	0003      	movs	r3, r0
   1f74e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f750:	230f      	movs	r3, #15
   1f752:	18fb      	adds	r3, r7, r3
   1f754:	781b      	ldrb	r3, [r3, #0]
   1f756:	2b00      	cmp	r3, #0
   1f758:	d003      	beq.n	1f762 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1f75a:	230f      	movs	r3, #15
   1f75c:	18fb      	adds	r3, r7, r3
   1f75e:	781b      	ldrb	r3, [r3, #0]
   1f760:	e03f      	b.n	1f7e2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1f762:	1dfb      	adds	r3, r7, #7
   1f764:	781b      	ldrb	r3, [r3, #0]
   1f766:	0018      	movs	r0, r3
   1f768:	4b21      	ldr	r3, [pc, #132]	; (1f7f0 <sd_mmc_init_write_blocks+0xc8>)
   1f76a:	4798      	blx	r3
   1f76c:	1e03      	subs	r3, r0, #0
   1f76e:	d003      	beq.n	1f778 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1f770:	4b20      	ldr	r3, [pc, #128]	; (1f7f4 <sd_mmc_init_write_blocks+0xcc>)
   1f772:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1f774:	2307      	movs	r3, #7
   1f776:	e034      	b.n	1f7e2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1f778:	1d3b      	adds	r3, r7, #4
   1f77a:	881b      	ldrh	r3, [r3, #0]
   1f77c:	2b01      	cmp	r3, #1
   1f77e:	d902      	bls.n	1f786 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1f780:	4b1d      	ldr	r3, [pc, #116]	; (1f7f8 <sd_mmc_init_write_blocks+0xd0>)
   1f782:	617b      	str	r3, [r7, #20]
   1f784:	e001      	b.n	1f78a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1f786:	4b1d      	ldr	r3, [pc, #116]	; (1f7fc <sd_mmc_init_write_blocks+0xd4>)
   1f788:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f78a:	4b1d      	ldr	r3, [pc, #116]	; (1f800 <sd_mmc_init_write_blocks+0xd8>)
   1f78c:	681b      	ldr	r3, [r3, #0]
   1f78e:	7adb      	ldrb	r3, [r3, #11]
   1f790:	001a      	movs	r2, r3
   1f792:	2308      	movs	r3, #8
   1f794:	4013      	ands	r3, r2
   1f796:	d002      	beq.n	1f79e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1f798:	683b      	ldr	r3, [r7, #0]
   1f79a:	613b      	str	r3, [r7, #16]
   1f79c:	e002      	b.n	1f7a4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f79e:	683b      	ldr	r3, [r7, #0]
   1f7a0:	025b      	lsls	r3, r3, #9
   1f7a2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f7a4:	1d3b      	adds	r3, r7, #4
   1f7a6:	881c      	ldrh	r4, [r3, #0]
   1f7a8:	2380      	movs	r3, #128	; 0x80
   1f7aa:	009a      	lsls	r2, r3, #2
   1f7ac:	6939      	ldr	r1, [r7, #16]
   1f7ae:	6978      	ldr	r0, [r7, #20]
   1f7b0:	2301      	movs	r3, #1
   1f7b2:	9300      	str	r3, [sp, #0]
   1f7b4:	0023      	movs	r3, r4
   1f7b6:	4c13      	ldr	r4, [pc, #76]	; (1f804 <sd_mmc_init_write_blocks+0xdc>)
   1f7b8:	47a0      	blx	r4
   1f7ba:	0003      	movs	r3, r0
   1f7bc:	001a      	movs	r2, r3
   1f7be:	2301      	movs	r3, #1
   1f7c0:	4053      	eors	r3, r2
   1f7c2:	b2db      	uxtb	r3, r3
   1f7c4:	2b00      	cmp	r3, #0
   1f7c6:	d003      	beq.n	1f7d0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1f7c8:	4b0a      	ldr	r3, [pc, #40]	; (1f7f4 <sd_mmc_init_write_blocks+0xcc>)
   1f7ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f7cc:	2305      	movs	r3, #5
   1f7ce:	e008      	b.n	1f7e2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f7d0:	4b0d      	ldr	r3, [pc, #52]	; (1f808 <sd_mmc_init_write_blocks+0xe0>)
   1f7d2:	1d3a      	adds	r2, r7, #4
   1f7d4:	8812      	ldrh	r2, [r2, #0]
   1f7d6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f7d8:	4b0c      	ldr	r3, [pc, #48]	; (1f80c <sd_mmc_init_write_blocks+0xe4>)
   1f7da:	1d3a      	adds	r2, r7, #4
   1f7dc:	8812      	ldrh	r2, [r2, #0]
   1f7de:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f7e0:	2300      	movs	r3, #0
}
   1f7e2:	0018      	movs	r0, r3
   1f7e4:	46bd      	mov	sp, r7
   1f7e6:	b007      	add	sp, #28
   1f7e8:	bd90      	pop	{r4, r7, pc}
   1f7ea:	46c0      	nop			; (mov r8, r8)
   1f7ec:	0001f02d 	.word	0x0001f02d
   1f7f0:	0001f535 	.word	0x0001f535
   1f7f4:	0001f129 	.word	0x0001f129
   1f7f8:	00109119 	.word	0x00109119
   1f7fc:	00089118 	.word	0x00089118
   1f800:	20004254 	.word	0x20004254
   1f804:	000203a9 	.word	0x000203a9
   1f808:	2000425a 	.word	0x2000425a
   1f80c:	20004258 	.word	0x20004258

0001f810 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f810:	b580      	push	{r7, lr}
   1f812:	b082      	sub	sp, #8
   1f814:	af00      	add	r7, sp, #0
   1f816:	6078      	str	r0, [r7, #4]
   1f818:	000a      	movs	r2, r1
   1f81a:	1cbb      	adds	r3, r7, #2
   1f81c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f81e:	1cbb      	adds	r3, r7, #2
   1f820:	881a      	ldrh	r2, [r3, #0]
   1f822:	687b      	ldr	r3, [r7, #4]
   1f824:	0011      	movs	r1, r2
   1f826:	0018      	movs	r0, r3
   1f828:	4b0d      	ldr	r3, [pc, #52]	; (1f860 <sd_mmc_start_write_blocks+0x50>)
   1f82a:	4798      	blx	r3
   1f82c:	0003      	movs	r3, r0
   1f82e:	001a      	movs	r2, r3
   1f830:	2301      	movs	r3, #1
   1f832:	4053      	eors	r3, r2
   1f834:	b2db      	uxtb	r3, r3
   1f836:	2b00      	cmp	r3, #0
   1f838:	d004      	beq.n	1f844 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f83a:	4b0a      	ldr	r3, [pc, #40]	; (1f864 <sd_mmc_start_write_blocks+0x54>)
   1f83c:	2200      	movs	r2, #0
   1f83e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f840:	2305      	movs	r3, #5
   1f842:	e008      	b.n	1f856 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f844:	4b07      	ldr	r3, [pc, #28]	; (1f864 <sd_mmc_start_write_blocks+0x54>)
   1f846:	881a      	ldrh	r2, [r3, #0]
   1f848:	1cbb      	adds	r3, r7, #2
   1f84a:	881b      	ldrh	r3, [r3, #0]
   1f84c:	1ad3      	subs	r3, r2, r3
   1f84e:	b29a      	uxth	r2, r3
   1f850:	4b04      	ldr	r3, [pc, #16]	; (1f864 <sd_mmc_start_write_blocks+0x54>)
   1f852:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f854:	2300      	movs	r3, #0
}
   1f856:	0018      	movs	r0, r3
   1f858:	46bd      	mov	sp, r7
   1f85a:	b002      	add	sp, #8
   1f85c:	bd80      	pop	{r7, pc}
   1f85e:	46c0      	nop			; (mov r8, r8)
   1f860:	00020729 	.word	0x00020729
   1f864:	2000425a 	.word	0x2000425a

0001f868 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f868:	b580      	push	{r7, lr}
   1f86a:	b082      	sub	sp, #8
   1f86c:	af00      	add	r7, sp, #0
   1f86e:	0002      	movs	r2, r0
   1f870:	1dfb      	adds	r3, r7, #7
   1f872:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f874:	4b13      	ldr	r3, [pc, #76]	; (1f8c4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f876:	4798      	blx	r3
   1f878:	0003      	movs	r3, r0
   1f87a:	001a      	movs	r2, r3
   1f87c:	2301      	movs	r3, #1
   1f87e:	4053      	eors	r3, r2
   1f880:	b2db      	uxtb	r3, r3
   1f882:	2b00      	cmp	r3, #0
   1f884:	d001      	beq.n	1f88a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f886:	2305      	movs	r3, #5
   1f888:	e018      	b.n	1f8bc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f88a:	1dfb      	adds	r3, r7, #7
   1f88c:	781b      	ldrb	r3, [r3, #0]
   1f88e:	2b00      	cmp	r3, #0
   1f890:	d003      	beq.n	1f89a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f892:	4b0d      	ldr	r3, [pc, #52]	; (1f8c8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f894:	2200      	movs	r2, #0
   1f896:	801a      	strh	r2, [r3, #0]
   1f898:	e005      	b.n	1f8a6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f89a:	4b0b      	ldr	r3, [pc, #44]	; (1f8c8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f89c:	881b      	ldrh	r3, [r3, #0]
   1f89e:	2b00      	cmp	r3, #0
   1f8a0:	d001      	beq.n	1f8a6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f8a2:	2300      	movs	r3, #0
   1f8a4:	e00a      	b.n	1f8bc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f8a6:	4b09      	ldr	r3, [pc, #36]	; (1f8cc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f8a8:	881b      	ldrh	r3, [r3, #0]
   1f8aa:	2b01      	cmp	r3, #1
   1f8ac:	d103      	bne.n	1f8b6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f8ae:	4b08      	ldr	r3, [pc, #32]	; (1f8d0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f8b0:	4798      	blx	r3
		return SD_MMC_OK;
   1f8b2:	2300      	movs	r3, #0
   1f8b4:	e002      	b.n	1f8bc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f8b6:	4b06      	ldr	r3, [pc, #24]	; (1f8d0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f8b8:	4798      	blx	r3
	return SD_MMC_OK;
   1f8ba:	2300      	movs	r3, #0
}
   1f8bc:	0018      	movs	r0, r3
   1f8be:	46bd      	mov	sp, r7
   1f8c0:	b002      	add	sp, #8
   1f8c2:	bd80      	pop	{r7, pc}
   1f8c4:	000207e9 	.word	0x000207e9
   1f8c8:	2000425a 	.word	0x2000425a
   1f8cc:	20004258 	.word	0x20004258
   1f8d0:	0001f129 	.word	0x0001f129

0001f8d4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f8d4:	b580      	push	{r7, lr}
   1f8d6:	b082      	sub	sp, #8
   1f8d8:	af00      	add	r7, sp, #0
   1f8da:	0002      	movs	r2, r0
   1f8dc:	1dfb      	adds	r3, r7, #7
   1f8de:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f8e0:	1dfb      	adds	r3, r7, #7
   1f8e2:	781b      	ldrb	r3, [r3, #0]
   1f8e4:	0018      	movs	r0, r3
   1f8e6:	4b16      	ldr	r3, [pc, #88]	; (1f940 <sd_mmc_test_unit_ready+0x6c>)
   1f8e8:	4798      	blx	r3
   1f8ea:	0003      	movs	r3, r0
   1f8ec:	2b01      	cmp	r3, #1
   1f8ee:	d019      	beq.n	1f924 <sd_mmc_test_unit_ready+0x50>
   1f8f0:	2b02      	cmp	r3, #2
   1f8f2:	d019      	beq.n	1f928 <sd_mmc_test_unit_ready+0x54>
   1f8f4:	2b00      	cmp	r3, #0
   1f8f6:	d11e      	bne.n	1f936 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f8f8:	1dfb      	adds	r3, r7, #7
   1f8fa:	781b      	ldrb	r3, [r3, #0]
   1f8fc:	4a11      	ldr	r2, [pc, #68]	; (1f944 <sd_mmc_test_unit_ready+0x70>)
   1f8fe:	5cd3      	ldrb	r3, [r2, r3]
   1f900:	2b00      	cmp	r3, #0
   1f902:	d001      	beq.n	1f908 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f904:	2302      	movs	r3, #2
   1f906:	e017      	b.n	1f938 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f908:	1dfb      	adds	r3, r7, #7
   1f90a:	781b      	ldrb	r3, [r3, #0]
   1f90c:	0018      	movs	r0, r3
   1f90e:	4b0e      	ldr	r3, [pc, #56]	; (1f948 <sd_mmc_test_unit_ready+0x74>)
   1f910:	4798      	blx	r3
   1f912:	0003      	movs	r3, r0
   1f914:	001a      	movs	r2, r3
   1f916:	2303      	movs	r3, #3
   1f918:	4013      	ands	r3, r2
   1f91a:	d001      	beq.n	1f920 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f91c:	2300      	movs	r3, #0
   1f91e:	e00b      	b.n	1f938 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f920:	2302      	movs	r3, #2
   1f922:	e009      	b.n	1f938 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f924:	2303      	movs	r3, #3
   1f926:	e007      	b.n	1f938 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f928:	1dfb      	adds	r3, r7, #7
   1f92a:	781b      	ldrb	r3, [r3, #0]
   1f92c:	4a05      	ldr	r2, [pc, #20]	; (1f944 <sd_mmc_test_unit_ready+0x70>)
   1f92e:	2100      	movs	r1, #0
   1f930:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f932:	2302      	movs	r3, #2
   1f934:	e000      	b.n	1f938 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f936:	2301      	movs	r3, #1
	}
}
   1f938:	0018      	movs	r0, r3
   1f93a:	46bd      	mov	sp, r7
   1f93c:	b002      	add	sp, #8
   1f93e:	bd80      	pop	{r7, pc}
   1f940:	0001f449 	.word	0x0001f449
   1f944:	2000425c 	.word	0x2000425c
   1f948:	0001f4bd 	.word	0x0001f4bd

0001f94c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f94c:	b580      	push	{r7, lr}
   1f94e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f950:	2000      	movs	r0, #0
   1f952:	4b03      	ldr	r3, [pc, #12]	; (1f960 <sd_mmc_test_unit_ready_0+0x14>)
   1f954:	4798      	blx	r3
   1f956:	0003      	movs	r3, r0
}
   1f958:	0018      	movs	r0, r3
   1f95a:	46bd      	mov	sp, r7
   1f95c:	bd80      	pop	{r7, pc}
   1f95e:	46c0      	nop			; (mov r8, r8)
   1f960:	0001f8d5 	.word	0x0001f8d5

0001f964 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f964:	b580      	push	{r7, lr}
   1f966:	b082      	sub	sp, #8
   1f968:	af00      	add	r7, sp, #0
   1f96a:	0002      	movs	r2, r0
   1f96c:	6039      	str	r1, [r7, #0]
   1f96e:	1dfb      	adds	r3, r7, #7
   1f970:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f972:	1dfb      	adds	r3, r7, #7
   1f974:	781b      	ldrb	r3, [r3, #0]
   1f976:	0018      	movs	r0, r3
   1f978:	4b08      	ldr	r3, [pc, #32]	; (1f99c <sd_mmc_read_capacity+0x38>)
   1f97a:	4798      	blx	r3
   1f97c:	0003      	movs	r3, r0
   1f97e:	005b      	lsls	r3, r3, #1
   1f980:	1e5a      	subs	r2, r3, #1
   1f982:	683b      	ldr	r3, [r7, #0]
   1f984:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f986:	1dfb      	adds	r3, r7, #7
   1f988:	781b      	ldrb	r3, [r3, #0]
   1f98a:	0018      	movs	r0, r3
   1f98c:	4b04      	ldr	r3, [pc, #16]	; (1f9a0 <sd_mmc_read_capacity+0x3c>)
   1f98e:	4798      	blx	r3
   1f990:	0003      	movs	r3, r0
}
   1f992:	0018      	movs	r0, r3
   1f994:	46bd      	mov	sp, r7
   1f996:	b002      	add	sp, #8
   1f998:	bd80      	pop	{r7, pc}
   1f99a:	46c0      	nop			; (mov r8, r8)
   1f99c:	0001f4f9 	.word	0x0001f4f9
   1f9a0:	0001f8d5 	.word	0x0001f8d5

0001f9a4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f9a4:	b580      	push	{r7, lr}
   1f9a6:	b082      	sub	sp, #8
   1f9a8:	af00      	add	r7, sp, #0
   1f9aa:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f9ac:	687b      	ldr	r3, [r7, #4]
   1f9ae:	0019      	movs	r1, r3
   1f9b0:	2000      	movs	r0, #0
   1f9b2:	4b03      	ldr	r3, [pc, #12]	; (1f9c0 <sd_mmc_read_capacity_0+0x1c>)
   1f9b4:	4798      	blx	r3
   1f9b6:	0003      	movs	r3, r0
}
   1f9b8:	0018      	movs	r0, r3
   1f9ba:	46bd      	mov	sp, r7
   1f9bc:	b002      	add	sp, #8
   1f9be:	bd80      	pop	{r7, pc}
   1f9c0:	0001f965 	.word	0x0001f965

0001f9c4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f9c4:	b580      	push	{r7, lr}
   1f9c6:	b082      	sub	sp, #8
   1f9c8:	af00      	add	r7, sp, #0
   1f9ca:	0002      	movs	r2, r0
   1f9cc:	1dfb      	adds	r3, r7, #7
   1f9ce:	701a      	strb	r2, [r3, #0]
   1f9d0:	1dbb      	adds	r3, r7, #6
   1f9d2:	1c0a      	adds	r2, r1, #0
   1f9d4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f9d6:	1dfb      	adds	r3, r7, #7
   1f9d8:	781b      	ldrb	r3, [r3, #0]
   1f9da:	4a04      	ldr	r2, [pc, #16]	; (1f9ec <sd_mmc_unload+0x28>)
   1f9dc:	1db9      	adds	r1, r7, #6
   1f9de:	7809      	ldrb	r1, [r1, #0]
   1f9e0:	54d1      	strb	r1, [r2, r3]
	return true;
   1f9e2:	2301      	movs	r3, #1
}
   1f9e4:	0018      	movs	r0, r3
   1f9e6:	46bd      	mov	sp, r7
   1f9e8:	b002      	add	sp, #8
   1f9ea:	bd80      	pop	{r7, pc}
   1f9ec:	2000425c 	.word	0x2000425c

0001f9f0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f9f0:	b580      	push	{r7, lr}
   1f9f2:	b082      	sub	sp, #8
   1f9f4:	af00      	add	r7, sp, #0
   1f9f6:	0002      	movs	r2, r0
   1f9f8:	1dfb      	adds	r3, r7, #7
   1f9fa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f9fc:	1dfb      	adds	r3, r7, #7
   1f9fe:	781b      	ldrb	r3, [r3, #0]
   1fa00:	0019      	movs	r1, r3
   1fa02:	2000      	movs	r0, #0
   1fa04:	4b03      	ldr	r3, [pc, #12]	; (1fa14 <sd_mmc_unload_0+0x24>)
   1fa06:	4798      	blx	r3
   1fa08:	0003      	movs	r3, r0
}
   1fa0a:	0018      	movs	r0, r3
   1fa0c:	46bd      	mov	sp, r7
   1fa0e:	b002      	add	sp, #8
   1fa10:	bd80      	pop	{r7, pc}
   1fa12:	46c0      	nop			; (mov r8, r8)
   1fa14:	0001f9c5 	.word	0x0001f9c5

0001fa18 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1fa18:	b580      	push	{r7, lr}
   1fa1a:	b082      	sub	sp, #8
   1fa1c:	af00      	add	r7, sp, #0
   1fa1e:	0002      	movs	r2, r0
   1fa20:	1dfb      	adds	r3, r7, #7
   1fa22:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1fa24:	1dfb      	adds	r3, r7, #7
   1fa26:	781b      	ldrb	r3, [r3, #0]
   1fa28:	0018      	movs	r0, r3
   1fa2a:	4b03      	ldr	r3, [pc, #12]	; (1fa38 <sd_mmc_wr_protect+0x20>)
   1fa2c:	4798      	blx	r3
   1fa2e:	0003      	movs	r3, r0
}
   1fa30:	0018      	movs	r0, r3
   1fa32:	46bd      	mov	sp, r7
   1fa34:	b002      	add	sp, #8
   1fa36:	bd80      	pop	{r7, pc}
   1fa38:	0001f535 	.word	0x0001f535

0001fa3c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1fa3c:	b580      	push	{r7, lr}
   1fa3e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1fa40:	2000      	movs	r0, #0
   1fa42:	4b03      	ldr	r3, [pc, #12]	; (1fa50 <sd_mmc_wr_protect_0+0x14>)
   1fa44:	4798      	blx	r3
   1fa46:	0003      	movs	r3, r0
}
   1fa48:	0018      	movs	r0, r3
   1fa4a:	46bd      	mov	sp, r7
   1fa4c:	bd80      	pop	{r7, pc}
   1fa4e:	46c0      	nop			; (mov r8, r8)
   1fa50:	0001fa19 	.word	0x0001fa19

0001fa54 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1fa54:	b580      	push	{r7, lr}
   1fa56:	b082      	sub	sp, #8
   1fa58:	af00      	add	r7, sp, #0
   1fa5a:	0002      	movs	r2, r0
   1fa5c:	1dfb      	adds	r3, r7, #7
   1fa5e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1fa60:	2301      	movs	r3, #1
}
   1fa62:	0018      	movs	r0, r3
   1fa64:	46bd      	mov	sp, r7
   1fa66:	b002      	add	sp, #8
   1fa68:	bd80      	pop	{r7, pc}
	...

0001fa6c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1fa6c:	b580      	push	{r7, lr}
   1fa6e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1fa70:	2000      	movs	r0, #0
   1fa72:	4b03      	ldr	r3, [pc, #12]	; (1fa80 <sd_mmc_removal_0+0x14>)
   1fa74:	4798      	blx	r3
   1fa76:	0003      	movs	r3, r0
}
   1fa78:	0018      	movs	r0, r3
   1fa7a:	46bd      	mov	sp, r7
   1fa7c:	bd80      	pop	{r7, pc}
   1fa7e:	46c0      	nop			; (mov r8, r8)
   1fa80:	0001fa55 	.word	0x0001fa55

0001fa84 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1fa84:	b580      	push	{r7, lr}
   1fa86:	b084      	sub	sp, #16
   1fa88:	af00      	add	r7, sp, #0
   1fa8a:	60b9      	str	r1, [r7, #8]
   1fa8c:	607a      	str	r2, [r7, #4]
   1fa8e:	230f      	movs	r3, #15
   1fa90:	18fb      	adds	r3, r7, r3
   1fa92:	1c02      	adds	r2, r0, #0
   1fa94:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1fa96:	68b9      	ldr	r1, [r7, #8]
   1fa98:	230f      	movs	r3, #15
   1fa9a:	18fb      	adds	r3, r7, r3
   1fa9c:	781b      	ldrb	r3, [r3, #0]
   1fa9e:	2201      	movs	r2, #1
   1faa0:	0018      	movs	r0, r3
   1faa2:	4b10      	ldr	r3, [pc, #64]	; (1fae4 <sd_mmc_mem_2_ram+0x60>)
   1faa4:	4798      	blx	r3
   1faa6:	1e03      	subs	r3, r0, #0
   1faa8:	d005      	beq.n	1fab6 <sd_mmc_mem_2_ram+0x32>
   1faaa:	2b02      	cmp	r3, #2
   1faac:	d101      	bne.n	1fab2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1faae:	2302      	movs	r3, #2
   1fab0:	e013      	b.n	1fada <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1fab2:	2301      	movs	r3, #1
   1fab4:	e011      	b.n	1fada <sd_mmc_mem_2_ram+0x56>
		break;
   1fab6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1fab8:	687b      	ldr	r3, [r7, #4]
   1faba:	2101      	movs	r1, #1
   1fabc:	0018      	movs	r0, r3
   1fabe:	4b0a      	ldr	r3, [pc, #40]	; (1fae8 <sd_mmc_mem_2_ram+0x64>)
   1fac0:	4798      	blx	r3
   1fac2:	1e03      	subs	r3, r0, #0
   1fac4:	d001      	beq.n	1faca <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1fac6:	2301      	movs	r3, #1
   1fac8:	e007      	b.n	1fada <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1faca:	2000      	movs	r0, #0
   1facc:	4b07      	ldr	r3, [pc, #28]	; (1faec <sd_mmc_mem_2_ram+0x68>)
   1face:	4798      	blx	r3
   1fad0:	1e03      	subs	r3, r0, #0
   1fad2:	d001      	beq.n	1fad8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1fad4:	2301      	movs	r3, #1
   1fad6:	e000      	b.n	1fada <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1fad8:	2300      	movs	r3, #0
}
   1fada:	0018      	movs	r0, r3
   1fadc:	46bd      	mov	sp, r7
   1fade:	b004      	add	sp, #16
   1fae0:	bd80      	pop	{r7, pc}
   1fae2:	46c0      	nop			; (mov r8, r8)
   1fae4:	0001f54d 	.word	0x0001f54d
   1fae8:	0001f639 	.word	0x0001f639
   1faec:	0001f691 	.word	0x0001f691

0001faf0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1faf0:	b580      	push	{r7, lr}
   1faf2:	b082      	sub	sp, #8
   1faf4:	af00      	add	r7, sp, #0
   1faf6:	6078      	str	r0, [r7, #4]
   1faf8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1fafa:	683a      	ldr	r2, [r7, #0]
   1fafc:	687b      	ldr	r3, [r7, #4]
   1fafe:	0019      	movs	r1, r3
   1fb00:	2000      	movs	r0, #0
   1fb02:	4b03      	ldr	r3, [pc, #12]	; (1fb10 <sd_mmc_mem_2_ram_0+0x20>)
   1fb04:	4798      	blx	r3
   1fb06:	0003      	movs	r3, r0
}
   1fb08:	0018      	movs	r0, r3
   1fb0a:	46bd      	mov	sp, r7
   1fb0c:	b002      	add	sp, #8
   1fb0e:	bd80      	pop	{r7, pc}
   1fb10:	0001fa85 	.word	0x0001fa85

0001fb14 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1fb14:	b580      	push	{r7, lr}
   1fb16:	b084      	sub	sp, #16
   1fb18:	af00      	add	r7, sp, #0
   1fb1a:	60b9      	str	r1, [r7, #8]
   1fb1c:	607a      	str	r2, [r7, #4]
   1fb1e:	230f      	movs	r3, #15
   1fb20:	18fb      	adds	r3, r7, r3
   1fb22:	1c02      	adds	r2, r0, #0
   1fb24:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1fb26:	68b9      	ldr	r1, [r7, #8]
   1fb28:	230f      	movs	r3, #15
   1fb2a:	18fb      	adds	r3, r7, r3
   1fb2c:	781b      	ldrb	r3, [r3, #0]
   1fb2e:	2201      	movs	r2, #1
   1fb30:	0018      	movs	r0, r3
   1fb32:	4b10      	ldr	r3, [pc, #64]	; (1fb74 <sd_mmc_ram_2_mem+0x60>)
   1fb34:	4798      	blx	r3
   1fb36:	1e03      	subs	r3, r0, #0
   1fb38:	d005      	beq.n	1fb46 <sd_mmc_ram_2_mem+0x32>
   1fb3a:	2b02      	cmp	r3, #2
   1fb3c:	d101      	bne.n	1fb42 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1fb3e:	2302      	movs	r3, #2
   1fb40:	e013      	b.n	1fb6a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1fb42:	2301      	movs	r3, #1
   1fb44:	e011      	b.n	1fb6a <sd_mmc_ram_2_mem+0x56>
		break;
   1fb46:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1fb48:	687b      	ldr	r3, [r7, #4]
   1fb4a:	2101      	movs	r1, #1
   1fb4c:	0018      	movs	r0, r3
   1fb4e:	4b0a      	ldr	r3, [pc, #40]	; (1fb78 <sd_mmc_ram_2_mem+0x64>)
   1fb50:	4798      	blx	r3
   1fb52:	1e03      	subs	r3, r0, #0
   1fb54:	d001      	beq.n	1fb5a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1fb56:	2301      	movs	r3, #1
   1fb58:	e007      	b.n	1fb6a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1fb5a:	2000      	movs	r0, #0
   1fb5c:	4b07      	ldr	r3, [pc, #28]	; (1fb7c <sd_mmc_ram_2_mem+0x68>)
   1fb5e:	4798      	blx	r3
   1fb60:	1e03      	subs	r3, r0, #0
   1fb62:	d001      	beq.n	1fb68 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1fb64:	2301      	movs	r3, #1
   1fb66:	e000      	b.n	1fb6a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1fb68:	2300      	movs	r3, #0
}
   1fb6a:	0018      	movs	r0, r3
   1fb6c:	46bd      	mov	sp, r7
   1fb6e:	b004      	add	sp, #16
   1fb70:	bd80      	pop	{r7, pc}
   1fb72:	46c0      	nop			; (mov r8, r8)
   1fb74:	0001f729 	.word	0x0001f729
   1fb78:	0001f811 	.word	0x0001f811
   1fb7c:	0001f869 	.word	0x0001f869

0001fb80 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1fb80:	b580      	push	{r7, lr}
   1fb82:	b082      	sub	sp, #8
   1fb84:	af00      	add	r7, sp, #0
   1fb86:	6078      	str	r0, [r7, #4]
   1fb88:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1fb8a:	683a      	ldr	r2, [r7, #0]
   1fb8c:	687b      	ldr	r3, [r7, #4]
   1fb8e:	0019      	movs	r1, r3
   1fb90:	2000      	movs	r0, #0
   1fb92:	4b03      	ldr	r3, [pc, #12]	; (1fba0 <sd_mmc_ram_2_mem_0+0x20>)
   1fb94:	4798      	blx	r3
   1fb96:	0003      	movs	r3, r0
}
   1fb98:	0018      	movs	r0, r3
   1fb9a:	46bd      	mov	sp, r7
   1fb9c:	b002      	add	sp, #8
   1fb9e:	bd80      	pop	{r7, pc}
   1fba0:	0001fb15 	.word	0x0001fb15

0001fba4 <system_pinmux_get_group_from_gpio_pin>:
{
   1fba4:	b580      	push	{r7, lr}
   1fba6:	b084      	sub	sp, #16
   1fba8:	af00      	add	r7, sp, #0
   1fbaa:	0002      	movs	r2, r0
   1fbac:	1dfb      	adds	r3, r7, #7
   1fbae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fbb0:	230f      	movs	r3, #15
   1fbb2:	18fb      	adds	r3, r7, r3
   1fbb4:	1dfa      	adds	r2, r7, #7
   1fbb6:	7812      	ldrb	r2, [r2, #0]
   1fbb8:	09d2      	lsrs	r2, r2, #7
   1fbba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fbbc:	230e      	movs	r3, #14
   1fbbe:	18fb      	adds	r3, r7, r3
   1fbc0:	1dfa      	adds	r2, r7, #7
   1fbc2:	7812      	ldrb	r2, [r2, #0]
   1fbc4:	0952      	lsrs	r2, r2, #5
   1fbc6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fbc8:	4b0d      	ldr	r3, [pc, #52]	; (1fc00 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fbca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fbcc:	230f      	movs	r3, #15
   1fbce:	18fb      	adds	r3, r7, r3
   1fbd0:	781b      	ldrb	r3, [r3, #0]
   1fbd2:	2b00      	cmp	r3, #0
   1fbd4:	d10f      	bne.n	1fbf6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fbd6:	230f      	movs	r3, #15
   1fbd8:	18fb      	adds	r3, r7, r3
   1fbda:	781b      	ldrb	r3, [r3, #0]
   1fbdc:	009b      	lsls	r3, r3, #2
   1fbde:	2210      	movs	r2, #16
   1fbe0:	4694      	mov	ip, r2
   1fbe2:	44bc      	add	ip, r7
   1fbe4:	4463      	add	r3, ip
   1fbe6:	3b08      	subs	r3, #8
   1fbe8:	681a      	ldr	r2, [r3, #0]
   1fbea:	230e      	movs	r3, #14
   1fbec:	18fb      	adds	r3, r7, r3
   1fbee:	781b      	ldrb	r3, [r3, #0]
   1fbf0:	01db      	lsls	r3, r3, #7
   1fbf2:	18d3      	adds	r3, r2, r3
   1fbf4:	e000      	b.n	1fbf8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fbf6:	2300      	movs	r3, #0
}
   1fbf8:	0018      	movs	r0, r3
   1fbfa:	46bd      	mov	sp, r7
   1fbfc:	b004      	add	sp, #16
   1fbfe:	bd80      	pop	{r7, pc}
   1fc00:	41004400 	.word	0x41004400

0001fc04 <system_interrupt_enable>:
{
   1fc04:	b580      	push	{r7, lr}
   1fc06:	b082      	sub	sp, #8
   1fc08:	af00      	add	r7, sp, #0
   1fc0a:	0002      	movs	r2, r0
   1fc0c:	1dfb      	adds	r3, r7, #7
   1fc0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fc10:	4b06      	ldr	r3, [pc, #24]	; (1fc2c <system_interrupt_enable+0x28>)
   1fc12:	1dfa      	adds	r2, r7, #7
   1fc14:	7812      	ldrb	r2, [r2, #0]
   1fc16:	0011      	movs	r1, r2
   1fc18:	221f      	movs	r2, #31
   1fc1a:	400a      	ands	r2, r1
   1fc1c:	2101      	movs	r1, #1
   1fc1e:	4091      	lsls	r1, r2
   1fc20:	000a      	movs	r2, r1
   1fc22:	601a      	str	r2, [r3, #0]
}
   1fc24:	46c0      	nop			; (mov r8, r8)
   1fc26:	46bd      	mov	sp, r7
   1fc28:	b002      	add	sp, #8
   1fc2a:	bd80      	pop	{r7, pc}
   1fc2c:	e000e100 	.word	0xe000e100

0001fc30 <port_get_group_from_gpio_pin>:
{
   1fc30:	b580      	push	{r7, lr}
   1fc32:	b082      	sub	sp, #8
   1fc34:	af00      	add	r7, sp, #0
   1fc36:	0002      	movs	r2, r0
   1fc38:	1dfb      	adds	r3, r7, #7
   1fc3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fc3c:	1dfb      	adds	r3, r7, #7
   1fc3e:	781b      	ldrb	r3, [r3, #0]
   1fc40:	0018      	movs	r0, r3
   1fc42:	4b03      	ldr	r3, [pc, #12]	; (1fc50 <port_get_group_from_gpio_pin+0x20>)
   1fc44:	4798      	blx	r3
   1fc46:	0003      	movs	r3, r0
}
   1fc48:	0018      	movs	r0, r3
   1fc4a:	46bd      	mov	sp, r7
   1fc4c:	b002      	add	sp, #8
   1fc4e:	bd80      	pop	{r7, pc}
   1fc50:	0001fba5 	.word	0x0001fba5

0001fc54 <port_get_config_defaults>:
{
   1fc54:	b580      	push	{r7, lr}
   1fc56:	b082      	sub	sp, #8
   1fc58:	af00      	add	r7, sp, #0
   1fc5a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fc5c:	687b      	ldr	r3, [r7, #4]
   1fc5e:	2200      	movs	r2, #0
   1fc60:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fc62:	687b      	ldr	r3, [r7, #4]
   1fc64:	2201      	movs	r2, #1
   1fc66:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fc68:	687b      	ldr	r3, [r7, #4]
   1fc6a:	2200      	movs	r2, #0
   1fc6c:	709a      	strb	r2, [r3, #2]
}
   1fc6e:	46c0      	nop			; (mov r8, r8)
   1fc70:	46bd      	mov	sp, r7
   1fc72:	b002      	add	sp, #8
   1fc74:	bd80      	pop	{r7, pc}
	...

0001fc78 <port_pin_set_output_level>:
{
   1fc78:	b580      	push	{r7, lr}
   1fc7a:	b084      	sub	sp, #16
   1fc7c:	af00      	add	r7, sp, #0
   1fc7e:	0002      	movs	r2, r0
   1fc80:	1dfb      	adds	r3, r7, #7
   1fc82:	701a      	strb	r2, [r3, #0]
   1fc84:	1dbb      	adds	r3, r7, #6
   1fc86:	1c0a      	adds	r2, r1, #0
   1fc88:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fc8a:	1dfb      	adds	r3, r7, #7
   1fc8c:	781b      	ldrb	r3, [r3, #0]
   1fc8e:	0018      	movs	r0, r3
   1fc90:	4b0d      	ldr	r3, [pc, #52]	; (1fcc8 <port_pin_set_output_level+0x50>)
   1fc92:	4798      	blx	r3
   1fc94:	0003      	movs	r3, r0
   1fc96:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fc98:	1dfb      	adds	r3, r7, #7
   1fc9a:	781b      	ldrb	r3, [r3, #0]
   1fc9c:	221f      	movs	r2, #31
   1fc9e:	4013      	ands	r3, r2
   1fca0:	2201      	movs	r2, #1
   1fca2:	409a      	lsls	r2, r3
   1fca4:	0013      	movs	r3, r2
   1fca6:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fca8:	1dbb      	adds	r3, r7, #6
   1fcaa:	781b      	ldrb	r3, [r3, #0]
   1fcac:	2b00      	cmp	r3, #0
   1fcae:	d003      	beq.n	1fcb8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fcb0:	68fb      	ldr	r3, [r7, #12]
   1fcb2:	68ba      	ldr	r2, [r7, #8]
   1fcb4:	619a      	str	r2, [r3, #24]
}
   1fcb6:	e002      	b.n	1fcbe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fcb8:	68fb      	ldr	r3, [r7, #12]
   1fcba:	68ba      	ldr	r2, [r7, #8]
   1fcbc:	615a      	str	r2, [r3, #20]
}
   1fcbe:	46c0      	nop			; (mov r8, r8)
   1fcc0:	46bd      	mov	sp, r7
   1fcc2:	b004      	add	sp, #16
   1fcc4:	bd80      	pop	{r7, pc}
   1fcc6:	46c0      	nop			; (mov r8, r8)
   1fcc8:	0001fc31 	.word	0x0001fc31

0001fccc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1fccc:	b580      	push	{r7, lr}
   1fcce:	b084      	sub	sp, #16
   1fcd0:	af00      	add	r7, sp, #0
   1fcd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fcd4:	687b      	ldr	r3, [r7, #4]
   1fcd6:	681b      	ldr	r3, [r3, #0]
   1fcd8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1fcda:	68fb      	ldr	r3, [r7, #12]
   1fcdc:	69db      	ldr	r3, [r3, #28]
   1fcde:	1e5a      	subs	r2, r3, #1
   1fce0:	4193      	sbcs	r3, r2
   1fce2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1fce4:	0018      	movs	r0, r3
   1fce6:	46bd      	mov	sp, r7
   1fce8:	b004      	add	sp, #16
   1fcea:	bd80      	pop	{r7, pc}

0001fcec <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1fcec:	b580      	push	{r7, lr}
   1fcee:	b082      	sub	sp, #8
   1fcf0:	af00      	add	r7, sp, #0
   1fcf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1fcf4:	687b      	ldr	r3, [r7, #4]
   1fcf6:	2201      	movs	r2, #1
   1fcf8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1fcfa:	687b      	ldr	r3, [r7, #4]
   1fcfc:	2200      	movs	r2, #0
   1fcfe:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1fd00:	687b      	ldr	r3, [r7, #4]
   1fd02:	2200      	movs	r2, #0
   1fd04:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1fd06:	687b      	ldr	r3, [r7, #4]
   1fd08:	22c0      	movs	r2, #192	; 0xc0
   1fd0a:	0392      	lsls	r2, r2, #14
   1fd0c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1fd0e:	687b      	ldr	r3, [r7, #4]
   1fd10:	2200      	movs	r2, #0
   1fd12:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1fd14:	687b      	ldr	r3, [r7, #4]
   1fd16:	2200      	movs	r2, #0
   1fd18:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1fd1a:	687b      	ldr	r3, [r7, #4]
   1fd1c:	2201      	movs	r2, #1
   1fd1e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1fd20:	687b      	ldr	r3, [r7, #4]
   1fd22:	2201      	movs	r2, #1
   1fd24:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1fd26:	687b      	ldr	r3, [r7, #4]
   1fd28:	2200      	movs	r2, #0
   1fd2a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1fd2c:	687b      	ldr	r3, [r7, #4]
   1fd2e:	2224      	movs	r2, #36	; 0x24
   1fd30:	2100      	movs	r1, #0
   1fd32:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1fd34:	687b      	ldr	r3, [r7, #4]
   1fd36:	3318      	adds	r3, #24
   1fd38:	220c      	movs	r2, #12
   1fd3a:	2100      	movs	r1, #0
   1fd3c:	0018      	movs	r0, r3
   1fd3e:	4b0a      	ldr	r3, [pc, #40]	; (1fd68 <spi_get_config_defaults+0x7c>)
   1fd40:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1fd42:	687b      	ldr	r3, [r7, #4]
   1fd44:	4a09      	ldr	r2, [pc, #36]	; (1fd6c <spi_get_config_defaults+0x80>)
   1fd46:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1fd48:	687b      	ldr	r3, [r7, #4]
   1fd4a:	2200      	movs	r2, #0
   1fd4c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1fd4e:	687b      	ldr	r3, [r7, #4]
   1fd50:	2200      	movs	r2, #0
   1fd52:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1fd54:	687b      	ldr	r3, [r7, #4]
   1fd56:	2200      	movs	r2, #0
   1fd58:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1fd5a:	687b      	ldr	r3, [r7, #4]
   1fd5c:	2200      	movs	r2, #0
   1fd5e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1fd60:	46c0      	nop			; (mov r8, r8)
   1fd62:	46bd      	mov	sp, r7
   1fd64:	b002      	add	sp, #8
   1fd66:	bd80      	pop	{r7, pc}
   1fd68:	00035377 	.word	0x00035377
   1fd6c:	000186a0 	.word	0x000186a0

0001fd70 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1fd70:	b580      	push	{r7, lr}
   1fd72:	b082      	sub	sp, #8
   1fd74:	af00      	add	r7, sp, #0
   1fd76:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1fd78:	687b      	ldr	r3, [r7, #4]
   1fd7a:	220a      	movs	r2, #10
   1fd7c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1fd7e:	687b      	ldr	r3, [r7, #4]
   1fd80:	2200      	movs	r2, #0
   1fd82:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1fd84:	687b      	ldr	r3, [r7, #4]
   1fd86:	2200      	movs	r2, #0
   1fd88:	709a      	strb	r2, [r3, #2]
}
   1fd8a:	46c0      	nop			; (mov r8, r8)
   1fd8c:	46bd      	mov	sp, r7
   1fd8e:	b002      	add	sp, #8
   1fd90:	bd80      	pop	{r7, pc}
	...

0001fd94 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1fd94:	b580      	push	{r7, lr}
   1fd96:	b084      	sub	sp, #16
   1fd98:	af00      	add	r7, sp, #0
   1fd9a:	6078      	str	r0, [r7, #4]
   1fd9c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1fd9e:	683b      	ldr	r3, [r7, #0]
   1fda0:	781a      	ldrb	r2, [r3, #0]
   1fda2:	687b      	ldr	r3, [r7, #4]
   1fda4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1fda6:	683b      	ldr	r3, [r7, #0]
   1fda8:	785a      	ldrb	r2, [r3, #1]
   1fdaa:	687b      	ldr	r3, [r7, #4]
   1fdac:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1fdae:	683b      	ldr	r3, [r7, #0]
   1fdb0:	789a      	ldrb	r2, [r3, #2]
   1fdb2:	687b      	ldr	r3, [r7, #4]
   1fdb4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1fdb6:	230c      	movs	r3, #12
   1fdb8:	18fb      	adds	r3, r7, r3
   1fdba:	0018      	movs	r0, r3
   1fdbc:	4b0b      	ldr	r3, [pc, #44]	; (1fdec <spi_attach_slave+0x58>)
   1fdbe:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1fdc0:	230c      	movs	r3, #12
   1fdc2:	18fb      	adds	r3, r7, r3
   1fdc4:	2201      	movs	r2, #1
   1fdc6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1fdc8:	687b      	ldr	r3, [r7, #4]
   1fdca:	781b      	ldrb	r3, [r3, #0]
   1fdcc:	220c      	movs	r2, #12
   1fdce:	18ba      	adds	r2, r7, r2
   1fdd0:	0011      	movs	r1, r2
   1fdd2:	0018      	movs	r0, r3
   1fdd4:	4b06      	ldr	r3, [pc, #24]	; (1fdf0 <spi_attach_slave+0x5c>)
   1fdd6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1fdd8:	687b      	ldr	r3, [r7, #4]
   1fdda:	781b      	ldrb	r3, [r3, #0]
   1fddc:	2101      	movs	r1, #1
   1fdde:	0018      	movs	r0, r3
   1fde0:	4b04      	ldr	r3, [pc, #16]	; (1fdf4 <spi_attach_slave+0x60>)
   1fde2:	4798      	blx	r3
}
   1fde4:	46c0      	nop			; (mov r8, r8)
   1fde6:	46bd      	mov	sp, r7
   1fde8:	b004      	add	sp, #16
   1fdea:	bd80      	pop	{r7, pc}
   1fdec:	0001fc55 	.word	0x0001fc55
   1fdf0:	00027061 	.word	0x00027061
   1fdf4:	0001fc79 	.word	0x0001fc79

0001fdf8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1fdf8:	b580      	push	{r7, lr}
   1fdfa:	b084      	sub	sp, #16
   1fdfc:	af00      	add	r7, sp, #0
   1fdfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fe00:	687b      	ldr	r3, [r7, #4]
   1fe02:	681b      	ldr	r3, [r3, #0]
   1fe04:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fe06:	687b      	ldr	r3, [r7, #4]
   1fe08:	681b      	ldr	r3, [r3, #0]
   1fe0a:	0018      	movs	r0, r3
   1fe0c:	4b0b      	ldr	r3, [pc, #44]	; (1fe3c <spi_enable+0x44>)
   1fe0e:	4798      	blx	r3
   1fe10:	0003      	movs	r3, r0
   1fe12:	0018      	movs	r0, r3
   1fe14:	4b0a      	ldr	r3, [pc, #40]	; (1fe40 <spi_enable+0x48>)
   1fe16:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1fe18:	46c0      	nop			; (mov r8, r8)
   1fe1a:	687b      	ldr	r3, [r7, #4]
   1fe1c:	0018      	movs	r0, r3
   1fe1e:	4b09      	ldr	r3, [pc, #36]	; (1fe44 <spi_enable+0x4c>)
   1fe20:	4798      	blx	r3
   1fe22:	1e03      	subs	r3, r0, #0
   1fe24:	d1f9      	bne.n	1fe1a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1fe26:	68fb      	ldr	r3, [r7, #12]
   1fe28:	681b      	ldr	r3, [r3, #0]
   1fe2a:	2202      	movs	r2, #2
   1fe2c:	431a      	orrs	r2, r3
   1fe2e:	68fb      	ldr	r3, [r7, #12]
   1fe30:	601a      	str	r2, [r3, #0]
}
   1fe32:	46c0      	nop			; (mov r8, r8)
   1fe34:	46bd      	mov	sp, r7
   1fe36:	b004      	add	sp, #16
   1fe38:	bd80      	pop	{r7, pc}
   1fe3a:	46c0      	nop			; (mov r8, r8)
   1fe3c:	00027d31 	.word	0x00027d31
   1fe40:	0001fc05 	.word	0x0001fc05
   1fe44:	0001fccd 	.word	0x0001fccd

0001fe48 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1fe48:	b580      	push	{r7, lr}
   1fe4a:	b084      	sub	sp, #16
   1fe4c:	af00      	add	r7, sp, #0
   1fe4e:	6078      	str	r0, [r7, #4]
   1fe50:	000a      	movs	r2, r1
   1fe52:	1cfb      	adds	r3, r7, #3
   1fe54:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1fe56:	230f      	movs	r3, #15
   1fe58:	18fb      	adds	r3, r7, r3
   1fe5a:	2200      	movs	r2, #0
   1fe5c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1fe5e:	e038      	b.n	1fed2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1fe60:	687b      	ldr	r3, [r7, #4]
   1fe62:	1c5a      	adds	r2, r3, #1
   1fe64:	607a      	str	r2, [r7, #4]
   1fe66:	220e      	movs	r2, #14
   1fe68:	18ba      	adds	r2, r7, r2
   1fe6a:	781b      	ldrb	r3, [r3, #0]
   1fe6c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fe6e:	230d      	movs	r3, #13
   1fe70:	18fb      	adds	r3, r7, r3
   1fe72:	2200      	movs	r2, #0
   1fe74:	701a      	strb	r2, [r3, #0]
   1fe76:	e027      	b.n	1fec8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1fe78:	230f      	movs	r3, #15
   1fe7a:	18fa      	adds	r2, r7, r3
   1fe7c:	230f      	movs	r3, #15
   1fe7e:	18fb      	adds	r3, r7, r3
   1fe80:	781b      	ldrb	r3, [r3, #0]
   1fe82:	18db      	adds	r3, r3, r3
   1fe84:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1fe86:	230e      	movs	r3, #14
   1fe88:	18fa      	adds	r2, r7, r3
   1fe8a:	230f      	movs	r3, #15
   1fe8c:	18fb      	adds	r3, r7, r3
   1fe8e:	7812      	ldrb	r2, [r2, #0]
   1fe90:	781b      	ldrb	r3, [r3, #0]
   1fe92:	4053      	eors	r3, r2
   1fe94:	b2db      	uxtb	r3, r3
   1fe96:	b25b      	sxtb	r3, r3
   1fe98:	2b00      	cmp	r3, #0
   1fe9a:	da07      	bge.n	1feac <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1fe9c:	230f      	movs	r3, #15
   1fe9e:	18fb      	adds	r3, r7, r3
   1fea0:	220f      	movs	r2, #15
   1fea2:	18ba      	adds	r2, r7, r2
   1fea4:	7812      	ldrb	r2, [r2, #0]
   1fea6:	2109      	movs	r1, #9
   1fea8:	404a      	eors	r2, r1
   1feaa:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1feac:	230e      	movs	r3, #14
   1feae:	18fa      	adds	r2, r7, r3
   1feb0:	230e      	movs	r3, #14
   1feb2:	18fb      	adds	r3, r7, r3
   1feb4:	781b      	ldrb	r3, [r3, #0]
   1feb6:	18db      	adds	r3, r3, r3
   1feb8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1feba:	230d      	movs	r3, #13
   1febc:	18fb      	adds	r3, r7, r3
   1febe:	781a      	ldrb	r2, [r3, #0]
   1fec0:	230d      	movs	r3, #13
   1fec2:	18fb      	adds	r3, r7, r3
   1fec4:	3201      	adds	r2, #1
   1fec6:	701a      	strb	r2, [r3, #0]
   1fec8:	230d      	movs	r3, #13
   1feca:	18fb      	adds	r3, r7, r3
   1fecc:	781b      	ldrb	r3, [r3, #0]
   1fece:	2b07      	cmp	r3, #7
   1fed0:	d9d2      	bls.n	1fe78 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1fed2:	1cfb      	adds	r3, r7, #3
   1fed4:	781b      	ldrb	r3, [r3, #0]
   1fed6:	1cfa      	adds	r2, r7, #3
   1fed8:	1e59      	subs	r1, r3, #1
   1feda:	7011      	strb	r1, [r2, #0]
   1fedc:	2b00      	cmp	r3, #0
   1fede:	d1bf      	bne.n	1fe60 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1fee0:	230f      	movs	r3, #15
   1fee2:	18fb      	adds	r3, r7, r3
   1fee4:	781b      	ldrb	r3, [r3, #0]
   1fee6:	005b      	lsls	r3, r3, #1
   1fee8:	b25b      	sxtb	r3, r3
   1feea:	2201      	movs	r2, #1
   1feec:	4313      	orrs	r3, r2
   1feee:	b25a      	sxtb	r2, r3
   1fef0:	230f      	movs	r3, #15
   1fef2:	18fb      	adds	r3, r7, r3
   1fef4:	701a      	strb	r2, [r3, #0]
	return crc;
   1fef6:	230f      	movs	r3, #15
   1fef8:	18fb      	adds	r3, r7, r3
   1fefa:	781b      	ldrb	r3, [r3, #0]
}
   1fefc:	0018      	movs	r0, r3
   1fefe:	46bd      	mov	sp, r7
   1ff00:	b004      	add	sp, #16
   1ff02:	bd80      	pop	{r7, pc}

0001ff04 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1ff04:	b590      	push	{r4, r7, lr}
   1ff06:	b083      	sub	sp, #12
   1ff08:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1ff0a:	1c7b      	adds	r3, r7, #1
   1ff0c:	22ff      	movs	r2, #255	; 0xff
   1ff0e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1ff10:	1cbb      	adds	r3, r7, #2
   1ff12:	22ff      	movs	r2, #255	; 0xff
   1ff14:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1ff16:	1cbb      	adds	r3, r7, #2
   1ff18:	881b      	ldrh	r3, [r3, #0]
   1ff1a:	1c79      	adds	r1, r7, #1
   1ff1c:	4811      	ldr	r0, [pc, #68]	; (1ff64 <sd_mmc_spi_wait_busy+0x60>)
   1ff1e:	2201      	movs	r2, #1
   1ff20:	4c11      	ldr	r4, [pc, #68]	; (1ff68 <sd_mmc_spi_wait_busy+0x64>)
   1ff22:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1ff24:	4b11      	ldr	r3, [pc, #68]	; (1ff6c <sd_mmc_spi_wait_busy+0x68>)
   1ff26:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1ff28:	1cbb      	adds	r3, r7, #2
   1ff2a:	881b      	ldrh	r3, [r3, #0]
   1ff2c:	1c79      	adds	r1, r7, #1
   1ff2e:	480d      	ldr	r0, [pc, #52]	; (1ff64 <sd_mmc_spi_wait_busy+0x60>)
   1ff30:	2201      	movs	r2, #1
   1ff32:	4c0d      	ldr	r4, [pc, #52]	; (1ff68 <sd_mmc_spi_wait_busy+0x64>)
   1ff34:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1ff36:	1cbb      	adds	r3, r7, #2
   1ff38:	881b      	ldrh	r3, [r3, #0]
   1ff3a:	1c79      	adds	r1, r7, #1
   1ff3c:	4809      	ldr	r0, [pc, #36]	; (1ff64 <sd_mmc_spi_wait_busy+0x60>)
   1ff3e:	2201      	movs	r2, #1
   1ff40:	4c09      	ldr	r4, [pc, #36]	; (1ff68 <sd_mmc_spi_wait_busy+0x64>)
   1ff42:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1ff44:	687b      	ldr	r3, [r7, #4]
   1ff46:	1e5a      	subs	r2, r3, #1
   1ff48:	607a      	str	r2, [r7, #4]
   1ff4a:	2b00      	cmp	r3, #0
   1ff4c:	d101      	bne.n	1ff52 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1ff4e:	2300      	movs	r3, #0
   1ff50:	e004      	b.n	1ff5c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1ff52:	1c7b      	adds	r3, r7, #1
   1ff54:	781b      	ldrb	r3, [r3, #0]
   1ff56:	2bff      	cmp	r3, #255	; 0xff
   1ff58:	d1ed      	bne.n	1ff36 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1ff5a:	2301      	movs	r3, #1
}
   1ff5c:	0018      	movs	r0, r3
   1ff5e:	46bd      	mov	sp, r7
   1ff60:	b003      	add	sp, #12
   1ff62:	bd90      	pop	{r4, r7, pc}
   1ff64:	20004260 	.word	0x20004260
   1ff68:	00028671 	.word	0x00028671
   1ff6c:	00030d40 	.word	0x00030d40

0001ff70 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1ff70:	b590      	push	{r4, r7, lr}
   1ff72:	b083      	sub	sp, #12
   1ff74:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1ff76:	1cbb      	adds	r3, r7, #2
   1ff78:	22ff      	movs	r2, #255	; 0xff
   1ff7a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1ff7c:	1c7b      	adds	r3, r7, #1
   1ff7e:	2200      	movs	r2, #0
   1ff80:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1ff82:	4b18      	ldr	r3, [pc, #96]	; (1ffe4 <sd_mmc_spi_start_read_block+0x74>)
   1ff84:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1ff86:	687b      	ldr	r3, [r7, #4]
   1ff88:	1e5a      	subs	r2, r3, #1
   1ff8a:	607a      	str	r2, [r7, #4]
   1ff8c:	2b00      	cmp	r3, #0
   1ff8e:	d104      	bne.n	1ff9a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1ff90:	4b15      	ldr	r3, [pc, #84]	; (1ffe8 <sd_mmc_spi_start_read_block+0x78>)
   1ff92:	2204      	movs	r2, #4
   1ff94:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1ff96:	2300      	movs	r3, #0
   1ff98:	e020      	b.n	1ffdc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1ff9a:	1cbb      	adds	r3, r7, #2
   1ff9c:	881b      	ldrh	r3, [r3, #0]
   1ff9e:	1c79      	adds	r1, r7, #1
   1ffa0:	4812      	ldr	r0, [pc, #72]	; (1ffec <sd_mmc_spi_start_read_block+0x7c>)
   1ffa2:	2201      	movs	r2, #1
   1ffa4:	4c12      	ldr	r4, [pc, #72]	; (1fff0 <sd_mmc_spi_start_read_block+0x80>)
   1ffa6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1ffa8:	1c7b      	adds	r3, r7, #1
   1ffaa:	781b      	ldrb	r3, [r3, #0]
   1ffac:	001a      	movs	r2, r3
   1ffae:	23f0      	movs	r3, #240	; 0xf0
   1ffb0:	4013      	ands	r3, r2
   1ffb2:	d10e      	bne.n	1ffd2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1ffb4:	1c7b      	adds	r3, r7, #1
   1ffb6:	781b      	ldrb	r3, [r3, #0]
   1ffb8:	001a      	movs	r2, r3
   1ffba:	2307      	movs	r3, #7
   1ffbc:	4013      	ands	r3, r2
   1ffbe:	d003      	beq.n	1ffc8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1ffc0:	4b09      	ldr	r3, [pc, #36]	; (1ffe8 <sd_mmc_spi_start_read_block+0x78>)
   1ffc2:	2207      	movs	r2, #7
   1ffc4:	701a      	strb	r2, [r3, #0]
   1ffc6:	e002      	b.n	1ffce <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1ffc8:	4b07      	ldr	r3, [pc, #28]	; (1ffe8 <sd_mmc_spi_start_read_block+0x78>)
   1ffca:	220b      	movs	r2, #11
   1ffcc:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1ffce:	2300      	movs	r3, #0
   1ffd0:	e004      	b.n	1ffdc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1ffd2:	1c7b      	adds	r3, r7, #1
   1ffd4:	781b      	ldrb	r3, [r3, #0]
   1ffd6:	2bfe      	cmp	r3, #254	; 0xfe
   1ffd8:	d1d5      	bne.n	1ff86 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1ffda:	2301      	movs	r3, #1
}
   1ffdc:	0018      	movs	r0, r3
   1ffde:	46bd      	mov	sp, r7
   1ffe0:	b003      	add	sp, #12
   1ffe2:	bd90      	pop	{r4, r7, pc}
   1ffe4:	0007a120 	.word	0x0007a120
   1ffe8:	200042a3 	.word	0x200042a3
   1ffec:	20004260 	.word	0x20004260
   1fff0:	00028671 	.word	0x00028671

0001fff4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1fff4:	b590      	push	{r4, r7, lr}
   1fff6:	b083      	sub	sp, #12
   1fff8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1fffa:	1dbb      	adds	r3, r7, #6
   1fffc:	22ff      	movs	r2, #255	; 0xff
   1fffe:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   20000:	1dbb      	adds	r3, r7, #6
   20002:	881b      	ldrh	r3, [r3, #0]
   20004:	1d39      	adds	r1, r7, #4
   20006:	4804      	ldr	r0, [pc, #16]	; (20018 <sd_mmc_spi_stop_read_block+0x24>)
   20008:	2202      	movs	r2, #2
   2000a:	4c04      	ldr	r4, [pc, #16]	; (2001c <sd_mmc_spi_stop_read_block+0x28>)
   2000c:	47a0      	blx	r4
			dummy);
}
   2000e:	46c0      	nop			; (mov r8, r8)
   20010:	46bd      	mov	sp, r7
   20012:	b003      	add	sp, #12
   20014:	bd90      	pop	{r4, r7, pc}
   20016:	46c0      	nop			; (mov r8, r8)
   20018:	20004260 	.word	0x20004260
   2001c:	00028671 	.word	0x00028671

00020020 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20020:	b580      	push	{r7, lr}
   20022:	b082      	sub	sp, #8
   20024:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   20026:	1dfb      	adds	r3, r7, #7
   20028:	22ff      	movs	r2, #255	; 0xff
   2002a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2002c:	1df9      	adds	r1, r7, #7
   2002e:	4b0d      	ldr	r3, [pc, #52]	; (20064 <sd_mmc_spi_start_write_block+0x44>)
   20030:	2201      	movs	r2, #1
   20032:	0018      	movs	r0, r3
   20034:	4b0c      	ldr	r3, [pc, #48]	; (20068 <sd_mmc_spi_start_write_block+0x48>)
   20036:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   20038:	4b0c      	ldr	r3, [pc, #48]	; (2006c <sd_mmc_spi_start_write_block+0x4c>)
   2003a:	881b      	ldrh	r3, [r3, #0]
   2003c:	2b01      	cmp	r3, #1
   2003e:	d103      	bne.n	20048 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20040:	1dbb      	adds	r3, r7, #6
   20042:	22fe      	movs	r2, #254	; 0xfe
   20044:	701a      	strb	r2, [r3, #0]
   20046:	e002      	b.n	2004e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   20048:	1dbb      	adds	r3, r7, #6
   2004a:	22fc      	movs	r2, #252	; 0xfc
   2004c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2004e:	1db9      	adds	r1, r7, #6
   20050:	4b04      	ldr	r3, [pc, #16]	; (20064 <sd_mmc_spi_start_write_block+0x44>)
   20052:	2201      	movs	r2, #1
   20054:	0018      	movs	r0, r3
   20056:	4b04      	ldr	r3, [pc, #16]	; (20068 <sd_mmc_spi_start_write_block+0x48>)
   20058:	4798      	blx	r3
}
   2005a:	46c0      	nop			; (mov r8, r8)
   2005c:	46bd      	mov	sp, r7
   2005e:	b002      	add	sp, #8
   20060:	bd80      	pop	{r7, pc}
   20062:	46c0      	nop			; (mov r8, r8)
   20064:	20004260 	.word	0x20004260
   20068:	00028895 	.word	0x00028895
   2006c:	200042ae 	.word	0x200042ae

00020070 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20070:	b590      	push	{r4, r7, lr}
   20072:	b083      	sub	sp, #12
   20074:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20076:	1dbb      	adds	r3, r7, #6
   20078:	22ff      	movs	r2, #255	; 0xff
   2007a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2007c:	1cbb      	adds	r3, r7, #2
   2007e:	2201      	movs	r2, #1
   20080:	4252      	negs	r2, r2
   20082:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   20084:	1cb9      	adds	r1, r7, #2
   20086:	4b1b      	ldr	r3, [pc, #108]	; (200f4 <sd_mmc_spi_stop_write_block+0x84>)
   20088:	2202      	movs	r2, #2
   2008a:	0018      	movs	r0, r3
   2008c:	4b1a      	ldr	r3, [pc, #104]	; (200f8 <sd_mmc_spi_stop_write_block+0x88>)
   2008e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   20090:	1dbb      	adds	r3, r7, #6
   20092:	881b      	ldrh	r3, [r3, #0]
   20094:	1d79      	adds	r1, r7, #5
   20096:	4817      	ldr	r0, [pc, #92]	; (200f4 <sd_mmc_spi_stop_write_block+0x84>)
   20098:	2201      	movs	r2, #1
   2009a:	4c18      	ldr	r4, [pc, #96]	; (200fc <sd_mmc_spi_stop_write_block+0x8c>)
   2009c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   2009e:	1d7b      	adds	r3, r7, #5
   200a0:	781b      	ldrb	r3, [r3, #0]
   200a2:	001a      	movs	r2, r3
   200a4:	2310      	movs	r3, #16
   200a6:	4013      	ands	r3, r2
   200a8:	d105      	bne.n	200b6 <sd_mmc_spi_stop_write_block+0x46>
   200aa:	1d7b      	adds	r3, r7, #5
   200ac:	781b      	ldrb	r3, [r3, #0]
   200ae:	001a      	movs	r2, r3
   200b0:	2301      	movs	r3, #1
   200b2:	4013      	ands	r3, r2
   200b4:	d104      	bne.n	200c0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   200b6:	4b12      	ldr	r3, [pc, #72]	; (20100 <sd_mmc_spi_stop_write_block+0x90>)
   200b8:	2201      	movs	r2, #1
   200ba:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   200bc:	2300      	movs	r3, #0
   200be:	e014      	b.n	200ea <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   200c0:	1d7b      	adds	r3, r7, #5
   200c2:	781b      	ldrb	r3, [r3, #0]
   200c4:	001a      	movs	r2, r3
   200c6:	231e      	movs	r3, #30
   200c8:	4013      	ands	r3, r2
   200ca:	2b04      	cmp	r3, #4
   200cc:	d00b      	beq.n	200e6 <sd_mmc_spi_stop_write_block+0x76>
   200ce:	2b0a      	cmp	r3, #10
   200d0:	d104      	bne.n	200dc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   200d2:	4b0b      	ldr	r3, [pc, #44]	; (20100 <sd_mmc_spi_stop_write_block+0x90>)
   200d4:	2208      	movs	r2, #8
   200d6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   200d8:	2300      	movs	r3, #0
   200da:	e006      	b.n	200ea <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   200dc:	4b08      	ldr	r3, [pc, #32]	; (20100 <sd_mmc_spi_stop_write_block+0x90>)
   200de:	220a      	movs	r2, #10
   200e0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   200e2:	2300      	movs	r3, #0
   200e4:	e001      	b.n	200ea <sd_mmc_spi_stop_write_block+0x7a>
		break;
   200e6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   200e8:	2301      	movs	r3, #1
}
   200ea:	0018      	movs	r0, r3
   200ec:	46bd      	mov	sp, r7
   200ee:	b003      	add	sp, #12
   200f0:	bd90      	pop	{r4, r7, pc}
   200f2:	46c0      	nop			; (mov r8, r8)
   200f4:	20004260 	.word	0x20004260
   200f8:	00028895 	.word	0x00028895
   200fc:	00028671 	.word	0x00028671
   20100:	200042a3 	.word	0x200042a3

00020104 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   20104:	b590      	push	{r4, r7, lr}
   20106:	b083      	sub	sp, #12
   20108:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2010a:	4b1d      	ldr	r3, [pc, #116]	; (20180 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2010c:	881b      	ldrh	r3, [r3, #0]
   2010e:	2b01      	cmp	r3, #1
   20110:	d101      	bne.n	20116 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   20112:	2301      	movs	r3, #1
   20114:	e030      	b.n	20178 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   20116:	4b1a      	ldr	r3, [pc, #104]	; (20180 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   20118:	881b      	ldrh	r3, [r3, #0]
   2011a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   2011c:	4b19      	ldr	r3, [pc, #100]	; (20184 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2011e:	681a      	ldr	r2, [r3, #0]
   20120:	4b19      	ldr	r3, [pc, #100]	; (20188 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20122:	881b      	ldrh	r3, [r3, #0]
   20124:	0019      	movs	r1, r3
   20126:	4b19      	ldr	r3, [pc, #100]	; (2018c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   20128:	0010      	movs	r0, r2
   2012a:	4798      	blx	r3
   2012c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2012e:	429c      	cmp	r4, r3
   20130:	d901      	bls.n	20136 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20132:	2301      	movs	r3, #1
   20134:	e020      	b.n	20178 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   20136:	1dfb      	adds	r3, r7, #7
   20138:	22ff      	movs	r2, #255	; 0xff
   2013a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2013c:	1df9      	adds	r1, r7, #7
   2013e:	4b14      	ldr	r3, [pc, #80]	; (20190 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20140:	2201      	movs	r2, #1
   20142:	0018      	movs	r0, r3
   20144:	4b13      	ldr	r3, [pc, #76]	; (20194 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20146:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   20148:	1dfb      	adds	r3, r7, #7
   2014a:	22fd      	movs	r2, #253	; 0xfd
   2014c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2014e:	1df9      	adds	r1, r7, #7
   20150:	4b0f      	ldr	r3, [pc, #60]	; (20190 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20152:	2201      	movs	r2, #1
   20154:	0018      	movs	r0, r3
   20156:	4b0f      	ldr	r3, [pc, #60]	; (20194 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20158:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2015a:	4b0f      	ldr	r3, [pc, #60]	; (20198 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2015c:	4798      	blx	r3
   2015e:	0003      	movs	r3, r0
   20160:	001a      	movs	r2, r3
   20162:	2301      	movs	r3, #1
   20164:	4053      	eors	r3, r2
   20166:	b2db      	uxtb	r3, r3
   20168:	2b00      	cmp	r3, #0
   2016a:	d004      	beq.n	20176 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2016c:	4b0b      	ldr	r3, [pc, #44]	; (2019c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2016e:	2205      	movs	r2, #5
   20170:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20172:	2300      	movs	r3, #0
   20174:	e000      	b.n	20178 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20176:	2301      	movs	r3, #1
}
   20178:	0018      	movs	r0, r3
   2017a:	46bd      	mov	sp, r7
   2017c:	b003      	add	sp, #12
   2017e:	bd90      	pop	{r4, r7, pc}
   20180:	200042ae 	.word	0x200042ae
   20184:	200042a8 	.word	0x200042a8
   20188:	200042ac 	.word	0x200042ac
   2018c:	00033035 	.word	0x00033035
   20190:	20004260 	.word	0x20004260
   20194:	00028895 	.word	0x00028895
   20198:	0001ff05 	.word	0x0001ff05
   2019c:	200042a3 	.word	0x200042a3

000201a0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   201a0:	b580      	push	{r7, lr}
   201a2:	b090      	sub	sp, #64	; 0x40
   201a4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   201a6:	4b1f      	ldr	r3, [pc, #124]	; (20224 <sd_mmc_spi_init+0x84>)
   201a8:	2200      	movs	r2, #0
   201aa:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   201ac:	233c      	movs	r3, #60	; 0x3c
   201ae:	18fb      	adds	r3, r7, r3
   201b0:	0018      	movs	r0, r3
   201b2:	4b1d      	ldr	r3, [pc, #116]	; (20228 <sd_mmc_spi_init+0x88>)
   201b4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   201b6:	1d3b      	adds	r3, r7, #4
   201b8:	0018      	movs	r0, r3
   201ba:	4b1c      	ldr	r3, [pc, #112]	; (2022c <sd_mmc_spi_init+0x8c>)
   201bc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   201be:	1d3b      	adds	r3, r7, #4
   201c0:	2280      	movs	r2, #128	; 0x80
   201c2:	0252      	lsls	r2, r2, #9
   201c4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   201c6:	1d3b      	adds	r3, r7, #4
   201c8:	4a19      	ldr	r2, [pc, #100]	; (20230 <sd_mmc_spi_init+0x90>)
   201ca:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   201cc:	1d3b      	adds	r3, r7, #4
   201ce:	4a19      	ldr	r2, [pc, #100]	; (20234 <sd_mmc_spi_init+0x94>)
   201d0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   201d2:	1d3b      	adds	r3, r7, #4
   201d4:	4a18      	ldr	r2, [pc, #96]	; (20238 <sd_mmc_spi_init+0x98>)
   201d6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   201d8:	1d3b      	adds	r3, r7, #4
   201da:	4a18      	ldr	r2, [pc, #96]	; (2023c <sd_mmc_spi_init+0x9c>)
   201dc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   201de:	1d3b      	adds	r3, r7, #4
   201e0:	2224      	movs	r2, #36	; 0x24
   201e2:	2100      	movs	r1, #0
   201e4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   201e6:	1d3b      	adds	r3, r7, #4
   201e8:	4a15      	ldr	r2, [pc, #84]	; (20240 <sd_mmc_spi_init+0xa0>)
   201ea:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   201ec:	1d3a      	adds	r2, r7, #4
   201ee:	4915      	ldr	r1, [pc, #84]	; (20244 <sd_mmc_spi_init+0xa4>)
   201f0:	4b15      	ldr	r3, [pc, #84]	; (20248 <sd_mmc_spi_init+0xa8>)
   201f2:	0018      	movs	r0, r3
   201f4:	4b15      	ldr	r3, [pc, #84]	; (2024c <sd_mmc_spi_init+0xac>)
   201f6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   201f8:	4b13      	ldr	r3, [pc, #76]	; (20248 <sd_mmc_spi_init+0xa8>)
   201fa:	0018      	movs	r0, r3
   201fc:	4b14      	ldr	r3, [pc, #80]	; (20250 <sd_mmc_spi_init+0xb0>)
   201fe:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   20200:	4b14      	ldr	r3, [pc, #80]	; (20254 <sd_mmc_spi_init+0xb4>)
   20202:	0018      	movs	r0, r3
   20204:	4b14      	ldr	r3, [pc, #80]	; (20258 <sd_mmc_spi_init+0xb8>)
   20206:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   20208:	4b14      	ldr	r3, [pc, #80]	; (2025c <sd_mmc_spi_init+0xbc>)
   2020a:	781a      	ldrb	r2, [r3, #0]
   2020c:	4b11      	ldr	r3, [pc, #68]	; (20254 <sd_mmc_spi_init+0xb4>)
   2020e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   20210:	4a10      	ldr	r2, [pc, #64]	; (20254 <sd_mmc_spi_init+0xb4>)
   20212:	4b13      	ldr	r3, [pc, #76]	; (20260 <sd_mmc_spi_init+0xc0>)
   20214:	0011      	movs	r1, r2
   20216:	0018      	movs	r0, r3
   20218:	4b12      	ldr	r3, [pc, #72]	; (20264 <sd_mmc_spi_init+0xc4>)
   2021a:	4798      	blx	r3
}
   2021c:	46c0      	nop			; (mov r8, r8)
   2021e:	46bd      	mov	sp, r7
   20220:	b010      	add	sp, #64	; 0x40
   20222:	bd80      	pop	{r7, pc}
   20224:	200042a3 	.word	0x200042a3
   20228:	0001fc55 	.word	0x0001fc55
   2022c:	0001fced 	.word	0x0001fced
   20230:	00100002 	.word	0x00100002
   20234:	00110002 	.word	0x00110002
   20238:	00120002 	.word	0x00120002
   2023c:	00130002 	.word	0x00130002
   20240:	00061a80 	.word	0x00061a80
   20244:	42000c00 	.word	0x42000c00
   20248:	20004260 	.word	0x20004260
   2024c:	000284e1 	.word	0x000284e1
   20250:	0001fdf9 	.word	0x0001fdf9
   20254:	200042a0 	.word	0x200042a0
   20258:	0001fd71 	.word	0x0001fd71
   2025c:	20000118 	.word	0x20000118
   20260:	2000429c 	.word	0x2000429c
   20264:	0001fd95 	.word	0x0001fd95

00020268 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20268:	b590      	push	{r4, r7, lr}
   2026a:	b083      	sub	sp, #12
   2026c:	af00      	add	r7, sp, #0
   2026e:	0004      	movs	r4, r0
   20270:	6039      	str	r1, [r7, #0]
   20272:	0010      	movs	r0, r2
   20274:	0019      	movs	r1, r3
   20276:	1dfb      	adds	r3, r7, #7
   20278:	1c22      	adds	r2, r4, #0
   2027a:	701a      	strb	r2, [r3, #0]
   2027c:	1dbb      	adds	r3, r7, #6
   2027e:	1c02      	adds	r2, r0, #0
   20280:	701a      	strb	r2, [r3, #0]
   20282:	1d7b      	adds	r3, r7, #5
   20284:	1c0a      	adds	r2, r1, #0
   20286:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20288:	4b13      	ldr	r3, [pc, #76]	; (202d8 <sd_mmc_spi_select_device+0x70>)
   2028a:	2200      	movs	r2, #0
   2028c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   2028e:	683b      	ldr	r3, [r7, #0]
   20290:	4a12      	ldr	r2, [pc, #72]	; (202dc <sd_mmc_spi_select_device+0x74>)
   20292:	4293      	cmp	r3, r2
   20294:	d907      	bls.n	202a6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   20296:	4b11      	ldr	r3, [pc, #68]	; (202dc <sd_mmc_spi_select_device+0x74>)
   20298:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2029a:	e004      	b.n	202a6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   2029c:	683b      	ldr	r3, [r7, #0]
   2029e:	08db      	lsrs	r3, r3, #3
   202a0:	683a      	ldr	r2, [r7, #0]
   202a2:	1ad3      	subs	r3, r2, r3
   202a4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   202a6:	683a      	ldr	r2, [r7, #0]
   202a8:	4b0d      	ldr	r3, [pc, #52]	; (202e0 <sd_mmc_spi_select_device+0x78>)
   202aa:	0011      	movs	r1, r2
   202ac:	0018      	movs	r0, r3
   202ae:	4b0d      	ldr	r3, [pc, #52]	; (202e4 <sd_mmc_spi_select_device+0x7c>)
   202b0:	4798      	blx	r3
   202b2:	0003      	movs	r3, r0
   202b4:	2b17      	cmp	r3, #23
   202b6:	d0f1      	beq.n	2029c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   202b8:	1dfb      	adds	r3, r7, #7
   202ba:	781a      	ldrb	r2, [r3, #0]
   202bc:	0013      	movs	r3, r2
   202be:	005b      	lsls	r3, r3, #1
   202c0:	189b      	adds	r3, r3, r2
   202c2:	4a09      	ldr	r2, [pc, #36]	; (202e8 <sd_mmc_spi_select_device+0x80>)
   202c4:	1899      	adds	r1, r3, r2
   202c6:	4b06      	ldr	r3, [pc, #24]	; (202e0 <sd_mmc_spi_select_device+0x78>)
   202c8:	2201      	movs	r2, #1
   202ca:	0018      	movs	r0, r3
   202cc:	4b07      	ldr	r3, [pc, #28]	; (202ec <sd_mmc_spi_select_device+0x84>)
   202ce:	4798      	blx	r3
}
   202d0:	46c0      	nop			; (mov r8, r8)
   202d2:	46bd      	mov	sp, r7
   202d4:	b003      	add	sp, #12
   202d6:	bd90      	pop	{r4, r7, pc}
   202d8:	200042a3 	.word	0x200042a3
   202dc:	00989680 	.word	0x00989680
   202e0:	20004260 	.word	0x20004260
   202e4:	00028209 	.word	0x00028209
   202e8:	2000429c 	.word	0x2000429c
   202ec:	000287a5 	.word	0x000287a5

000202f0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   202f0:	b580      	push	{r7, lr}
   202f2:	b082      	sub	sp, #8
   202f4:	af00      	add	r7, sp, #0
   202f6:	0002      	movs	r2, r0
   202f8:	1dfb      	adds	r3, r7, #7
   202fa:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   202fc:	4b09      	ldr	r3, [pc, #36]	; (20324 <sd_mmc_spi_deselect_device+0x34>)
   202fe:	2200      	movs	r2, #0
   20300:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20302:	1dfb      	adds	r3, r7, #7
   20304:	781a      	ldrb	r2, [r3, #0]
   20306:	0013      	movs	r3, r2
   20308:	005b      	lsls	r3, r3, #1
   2030a:	189b      	adds	r3, r3, r2
   2030c:	4a06      	ldr	r2, [pc, #24]	; (20328 <sd_mmc_spi_deselect_device+0x38>)
   2030e:	1899      	adds	r1, r3, r2
   20310:	4b06      	ldr	r3, [pc, #24]	; (2032c <sd_mmc_spi_deselect_device+0x3c>)
   20312:	2200      	movs	r2, #0
   20314:	0018      	movs	r0, r3
   20316:	4b06      	ldr	r3, [pc, #24]	; (20330 <sd_mmc_spi_deselect_device+0x40>)
   20318:	4798      	blx	r3
}
   2031a:	46c0      	nop			; (mov r8, r8)
   2031c:	46bd      	mov	sp, r7
   2031e:	b002      	add	sp, #8
   20320:	bd80      	pop	{r7, pc}
   20322:	46c0      	nop			; (mov r8, r8)
   20324:	200042a3 	.word	0x200042a3
   20328:	2000429c 	.word	0x2000429c
   2032c:	20004260 	.word	0x20004260
   20330:	000287a5 	.word	0x000287a5

00020334 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20334:	b580      	push	{r7, lr}
   20336:	b082      	sub	sp, #8
   20338:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2033a:	1dbb      	adds	r3, r7, #6
   2033c:	22ff      	movs	r2, #255	; 0xff
   2033e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20340:	4b0c      	ldr	r3, [pc, #48]	; (20374 <sd_mmc_spi_send_clock+0x40>)
   20342:	2200      	movs	r2, #0
   20344:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20346:	1dfb      	adds	r3, r7, #7
   20348:	2200      	movs	r2, #0
   2034a:	701a      	strb	r2, [r3, #0]
   2034c:	e00a      	b.n	20364 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   2034e:	1db9      	adds	r1, r7, #6
   20350:	4b09      	ldr	r3, [pc, #36]	; (20378 <sd_mmc_spi_send_clock+0x44>)
   20352:	2201      	movs	r2, #1
   20354:	0018      	movs	r0, r3
   20356:	4b09      	ldr	r3, [pc, #36]	; (2037c <sd_mmc_spi_send_clock+0x48>)
   20358:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2035a:	1dfb      	adds	r3, r7, #7
   2035c:	781a      	ldrb	r2, [r3, #0]
   2035e:	1dfb      	adds	r3, r7, #7
   20360:	3201      	adds	r2, #1
   20362:	701a      	strb	r2, [r3, #0]
   20364:	1dfb      	adds	r3, r7, #7
   20366:	781b      	ldrb	r3, [r3, #0]
   20368:	2b09      	cmp	r3, #9
   2036a:	d9f0      	bls.n	2034e <sd_mmc_spi_send_clock+0x1a>
	}
}
   2036c:	46c0      	nop			; (mov r8, r8)
   2036e:	46bd      	mov	sp, r7
   20370:	b002      	add	sp, #8
   20372:	bd80      	pop	{r7, pc}
   20374:	200042a3 	.word	0x200042a3
   20378:	20004260 	.word	0x20004260
   2037c:	00028895 	.word	0x00028895

00020380 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20380:	b590      	push	{r4, r7, lr}
   20382:	b085      	sub	sp, #20
   20384:	af02      	add	r7, sp, #8
   20386:	6078      	str	r0, [r7, #4]
   20388:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   2038a:	6839      	ldr	r1, [r7, #0]
   2038c:	6878      	ldr	r0, [r7, #4]
   2038e:	2300      	movs	r3, #0
   20390:	9300      	str	r3, [sp, #0]
   20392:	2300      	movs	r3, #0
   20394:	2200      	movs	r2, #0
   20396:	4c03      	ldr	r4, [pc, #12]	; (203a4 <sd_mmc_spi_send_cmd+0x24>)
   20398:	47a0      	blx	r4
   2039a:	0003      	movs	r3, r0
}
   2039c:	0018      	movs	r0, r3
   2039e:	46bd      	mov	sp, r7
   203a0:	b003      	add	sp, #12
   203a2:	bd90      	pop	{r4, r7, pc}
   203a4:	000203a9 	.word	0x000203a9

000203a8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   203a8:	b590      	push	{r4, r7, lr}
   203aa:	b089      	sub	sp, #36	; 0x24
   203ac:	af00      	add	r7, sp, #0
   203ae:	60f8      	str	r0, [r7, #12]
   203b0:	60b9      	str	r1, [r7, #8]
   203b2:	0019      	movs	r1, r3
   203b4:	1dbb      	adds	r3, r7, #6
   203b6:	801a      	strh	r2, [r3, #0]
   203b8:	1d3b      	adds	r3, r7, #4
   203ba:	1c0a      	adds	r2, r1, #0
   203bc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   203be:	231b      	movs	r3, #27
   203c0:	18fb      	adds	r3, r7, r3
   203c2:	22ff      	movs	r2, #255	; 0xff
   203c4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   203c6:	231c      	movs	r3, #28
   203c8:	18fb      	adds	r3, r7, r3
   203ca:	22ff      	movs	r2, #255	; 0xff
   203cc:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   203ce:	4b72      	ldr	r3, [pc, #456]	; (20598 <sd_mmc_spi_adtc_start+0x1f0>)
   203d0:	2200      	movs	r2, #0
   203d2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   203d4:	68fb      	ldr	r3, [r7, #12]
   203d6:	b2db      	uxtb	r3, r3
   203d8:	223f      	movs	r2, #63	; 0x3f
   203da:	4013      	ands	r3, r2
   203dc:	b2db      	uxtb	r3, r3
   203de:	2240      	movs	r2, #64	; 0x40
   203e0:	4313      	orrs	r3, r2
   203e2:	b2da      	uxtb	r2, r3
   203e4:	2314      	movs	r3, #20
   203e6:	18fb      	adds	r3, r7, r3
   203e8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   203ea:	68bb      	ldr	r3, [r7, #8]
   203ec:	0e1b      	lsrs	r3, r3, #24
   203ee:	b2da      	uxtb	r2, r3
   203f0:	2314      	movs	r3, #20
   203f2:	18fb      	adds	r3, r7, r3
   203f4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   203f6:	68bb      	ldr	r3, [r7, #8]
   203f8:	0c1b      	lsrs	r3, r3, #16
   203fa:	b2da      	uxtb	r2, r3
   203fc:	2314      	movs	r3, #20
   203fe:	18fb      	adds	r3, r7, r3
   20400:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20402:	68bb      	ldr	r3, [r7, #8]
   20404:	0a1b      	lsrs	r3, r3, #8
   20406:	b2da      	uxtb	r2, r3
   20408:	2314      	movs	r3, #20
   2040a:	18fb      	adds	r3, r7, r3
   2040c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   2040e:	68bb      	ldr	r3, [r7, #8]
   20410:	b2da      	uxtb	r2, r3
   20412:	2314      	movs	r3, #20
   20414:	18fb      	adds	r3, r7, r3
   20416:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20418:	2314      	movs	r3, #20
   2041a:	18fb      	adds	r3, r7, r3
   2041c:	2105      	movs	r1, #5
   2041e:	0018      	movs	r0, r3
   20420:	4b5e      	ldr	r3, [pc, #376]	; (2059c <sd_mmc_spi_adtc_start+0x1f4>)
   20422:	4798      	blx	r3
   20424:	0003      	movs	r3, r0
   20426:	001a      	movs	r2, r3
   20428:	2314      	movs	r3, #20
   2042a:	18fb      	adds	r3, r7, r3
   2042c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   2042e:	231b      	movs	r3, #27
   20430:	18f9      	adds	r1, r7, r3
   20432:	4b5b      	ldr	r3, [pc, #364]	; (205a0 <sd_mmc_spi_adtc_start+0x1f8>)
   20434:	2201      	movs	r2, #1
   20436:	0018      	movs	r0, r3
   20438:	4b5a      	ldr	r3, [pc, #360]	; (205a4 <sd_mmc_spi_adtc_start+0x1fc>)
   2043a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   2043c:	2314      	movs	r3, #20
   2043e:	18f9      	adds	r1, r7, r3
   20440:	4b57      	ldr	r3, [pc, #348]	; (205a0 <sd_mmc_spi_adtc_start+0x1f8>)
   20442:	2206      	movs	r2, #6
   20444:	0018      	movs	r0, r3
   20446:	4b57      	ldr	r3, [pc, #348]	; (205a4 <sd_mmc_spi_adtc_start+0x1fc>)
   20448:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2044a:	2313      	movs	r3, #19
   2044c:	18fb      	adds	r3, r7, r3
   2044e:	22ff      	movs	r2, #255	; 0xff
   20450:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20452:	231c      	movs	r3, #28
   20454:	18fb      	adds	r3, r7, r3
   20456:	881b      	ldrh	r3, [r3, #0]
   20458:	2213      	movs	r2, #19
   2045a:	18b9      	adds	r1, r7, r2
   2045c:	4850      	ldr	r0, [pc, #320]	; (205a0 <sd_mmc_spi_adtc_start+0x1f8>)
   2045e:	2201      	movs	r2, #1
   20460:	4c51      	ldr	r4, [pc, #324]	; (205a8 <sd_mmc_spi_adtc_start+0x200>)
   20462:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20464:	231f      	movs	r3, #31
   20466:	18fb      	adds	r3, r7, r3
   20468:	2207      	movs	r2, #7
   2046a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   2046c:	231c      	movs	r3, #28
   2046e:	18fb      	adds	r3, r7, r3
   20470:	881b      	ldrh	r3, [r3, #0]
   20472:	2213      	movs	r2, #19
   20474:	18b9      	adds	r1, r7, r2
   20476:	484a      	ldr	r0, [pc, #296]	; (205a0 <sd_mmc_spi_adtc_start+0x1f8>)
   20478:	2201      	movs	r2, #1
   2047a:	4c4b      	ldr	r4, [pc, #300]	; (205a8 <sd_mmc_spi_adtc_start+0x200>)
   2047c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   2047e:	2313      	movs	r3, #19
   20480:	18fb      	adds	r3, r7, r3
   20482:	781b      	ldrb	r3, [r3, #0]
   20484:	b25b      	sxtb	r3, r3
   20486:	2b00      	cmp	r3, #0
   20488:	da10      	bge.n	204ac <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   2048a:	231f      	movs	r3, #31
   2048c:	18fb      	adds	r3, r7, r3
   2048e:	221f      	movs	r2, #31
   20490:	18ba      	adds	r2, r7, r2
   20492:	7812      	ldrb	r2, [r2, #0]
   20494:	3a01      	subs	r2, #1
   20496:	701a      	strb	r2, [r3, #0]
   20498:	231f      	movs	r3, #31
   2049a:	18fb      	adds	r3, r7, r3
   2049c:	781b      	ldrb	r3, [r3, #0]
   2049e:	2b00      	cmp	r3, #0
   204a0:	d1e4      	bne.n	2046c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   204a2:	4b3d      	ldr	r3, [pc, #244]	; (20598 <sd_mmc_spi_adtc_start+0x1f0>)
   204a4:	2202      	movs	r2, #2
   204a6:	701a      	strb	r2, [r3, #0]
			return false;
   204a8:	2300      	movs	r3, #0
   204aa:	e070      	b.n	2058e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   204ac:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   204ae:	2313      	movs	r3, #19
   204b0:	18fb      	adds	r3, r7, r3
   204b2:	781b      	ldrb	r3, [r3, #0]
   204b4:	001a      	movs	r2, r3
   204b6:	4b3d      	ldr	r3, [pc, #244]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   204b8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   204ba:	2313      	movs	r3, #19
   204bc:	18fb      	adds	r3, r7, r3
   204be:	781b      	ldrb	r3, [r3, #0]
   204c0:	001a      	movs	r2, r3
   204c2:	2308      	movs	r3, #8
   204c4:	4013      	ands	r3, r2
   204c6:	d004      	beq.n	204d2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   204c8:	4b33      	ldr	r3, [pc, #204]	; (20598 <sd_mmc_spi_adtc_start+0x1f0>)
   204ca:	2206      	movs	r2, #6
   204cc:	701a      	strb	r2, [r3, #0]
		return false;
   204ce:	2300      	movs	r3, #0
   204d0:	e05d      	b.n	2058e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   204d2:	2313      	movs	r3, #19
   204d4:	18fb      	adds	r3, r7, r3
   204d6:	781b      	ldrb	r3, [r3, #0]
   204d8:	001a      	movs	r2, r3
   204da:	2304      	movs	r3, #4
   204dc:	4013      	ands	r3, r2
   204de:	d004      	beq.n	204ea <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   204e0:	4b2d      	ldr	r3, [pc, #180]	; (20598 <sd_mmc_spi_adtc_start+0x1f0>)
   204e2:	2209      	movs	r2, #9
   204e4:	701a      	strb	r2, [r3, #0]
		return false;
   204e6:	2300      	movs	r3, #0
   204e8:	e051      	b.n	2058e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   204ea:	2313      	movs	r3, #19
   204ec:	18fb      	adds	r3, r7, r3
   204ee:	781b      	ldrb	r3, [r3, #0]
   204f0:	001a      	movs	r2, r3
   204f2:	2301      	movs	r3, #1
   204f4:	439a      	bics	r2, r3
   204f6:	1e13      	subs	r3, r2, #0
   204f8:	d004      	beq.n	20504 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   204fa:	4b27      	ldr	r3, [pc, #156]	; (20598 <sd_mmc_spi_adtc_start+0x1f0>)
   204fc:	2201      	movs	r2, #1
   204fe:	701a      	strb	r2, [r3, #0]
		return false;
   20500:	2300      	movs	r3, #0
   20502:	e044      	b.n	2058e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20504:	68fa      	ldr	r2, [r7, #12]
   20506:	2380      	movs	r3, #128	; 0x80
   20508:	019b      	lsls	r3, r3, #6
   2050a:	4013      	ands	r3, r2
   2050c:	d00d      	beq.n	2052a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   2050e:	4b28      	ldr	r3, [pc, #160]	; (205b0 <sd_mmc_spi_adtc_start+0x208>)
   20510:	4798      	blx	r3
   20512:	0003      	movs	r3, r0
   20514:	001a      	movs	r2, r3
   20516:	2301      	movs	r3, #1
   20518:	4053      	eors	r3, r2
   2051a:	b2db      	uxtb	r3, r3
   2051c:	2b00      	cmp	r3, #0
   2051e:	d004      	beq.n	2052a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20520:	4b1d      	ldr	r3, [pc, #116]	; (20598 <sd_mmc_spi_adtc_start+0x1f0>)
   20522:	2203      	movs	r2, #3
   20524:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20526:	2300      	movs	r3, #0
   20528:	e031      	b.n	2058e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2052a:	68fa      	ldr	r2, [r7, #12]
   2052c:	2380      	movs	r3, #128	; 0x80
   2052e:	009b      	lsls	r3, r3, #2
   20530:	4013      	ands	r3, r2
   20532:	d00e      	beq.n	20552 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20534:	4b1d      	ldr	r3, [pc, #116]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   20536:	2200      	movs	r2, #0
   20538:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2053a:	231c      	movs	r3, #28
   2053c:	18fb      	adds	r3, r7, r3
   2053e:	881b      	ldrh	r3, [r3, #0]
   20540:	491a      	ldr	r1, [pc, #104]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   20542:	4817      	ldr	r0, [pc, #92]	; (205a0 <sd_mmc_spi_adtc_start+0x1f8>)
   20544:	2201      	movs	r2, #1
   20546:	4c18      	ldr	r4, [pc, #96]	; (205a8 <sd_mmc_spi_adtc_start+0x200>)
   20548:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2054a:	4b18      	ldr	r3, [pc, #96]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   2054c:	681a      	ldr	r2, [r3, #0]
   2054e:	4b17      	ldr	r3, [pc, #92]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   20550:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20552:	68fa      	ldr	r2, [r7, #12]
   20554:	2380      	movs	r3, #128	; 0x80
   20556:	00db      	lsls	r3, r3, #3
   20558:	4013      	ands	r3, r2
   2055a:	d00c      	beq.n	20576 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   2055c:	231c      	movs	r3, #28
   2055e:	18fb      	adds	r3, r7, r3
   20560:	881b      	ldrh	r3, [r3, #0]
   20562:	4912      	ldr	r1, [pc, #72]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   20564:	480e      	ldr	r0, [pc, #56]	; (205a0 <sd_mmc_spi_adtc_start+0x1f8>)
   20566:	2204      	movs	r2, #4
   20568:	4c0f      	ldr	r4, [pc, #60]	; (205a8 <sd_mmc_spi_adtc_start+0x200>)
   2056a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   2056c:	4b0f      	ldr	r3, [pc, #60]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   2056e:	681b      	ldr	r3, [r3, #0]
   20570:	ba1a      	rev	r2, r3
   20572:	4b0e      	ldr	r3, [pc, #56]	; (205ac <sd_mmc_spi_adtc_start+0x204>)
   20574:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20576:	4b0f      	ldr	r3, [pc, #60]	; (205b4 <sd_mmc_spi_adtc_start+0x20c>)
   20578:	1dba      	adds	r2, r7, #6
   2057a:	8812      	ldrh	r2, [r2, #0]
   2057c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   2057e:	4b0e      	ldr	r3, [pc, #56]	; (205b8 <sd_mmc_spi_adtc_start+0x210>)
   20580:	1d3a      	adds	r2, r7, #4
   20582:	8812      	ldrh	r2, [r2, #0]
   20584:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20586:	4b0d      	ldr	r3, [pc, #52]	; (205bc <sd_mmc_spi_adtc_start+0x214>)
   20588:	2200      	movs	r2, #0
   2058a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   2058c:	2301      	movs	r3, #1
}
   2058e:	0018      	movs	r0, r3
   20590:	46bd      	mov	sp, r7
   20592:	b009      	add	sp, #36	; 0x24
   20594:	bd90      	pop	{r4, r7, pc}
   20596:	46c0      	nop			; (mov r8, r8)
   20598:	200042a3 	.word	0x200042a3
   2059c:	0001fe49 	.word	0x0001fe49
   205a0:	20004260 	.word	0x20004260
   205a4:	00028895 	.word	0x00028895
   205a8:	00028671 	.word	0x00028671
   205ac:	200042a4 	.word	0x200042a4
   205b0:	0001ff05 	.word	0x0001ff05
   205b4:	200042ac 	.word	0x200042ac
   205b8:	200042ae 	.word	0x200042ae
   205bc:	200042a8 	.word	0x200042a8

000205c0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   205c0:	b580      	push	{r7, lr}
   205c2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   205c4:	4b02      	ldr	r3, [pc, #8]	; (205d0 <sd_mmc_spi_get_response+0x10>)
   205c6:	681b      	ldr	r3, [r3, #0]
}
   205c8:	0018      	movs	r0, r3
   205ca:	46bd      	mov	sp, r7
   205cc:	bd80      	pop	{r7, pc}
   205ce:	46c0      	nop			; (mov r8, r8)
   205d0:	200042a4 	.word	0x200042a4

000205d4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   205d4:	b590      	push	{r4, r7, lr}
   205d6:	b085      	sub	sp, #20
   205d8:	af00      	add	r7, sp, #0
   205da:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   205dc:	230e      	movs	r3, #14
   205de:	18fb      	adds	r3, r7, r3
   205e0:	22ff      	movs	r2, #255	; 0xff
   205e2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   205e4:	4b1c      	ldr	r3, [pc, #112]	; (20658 <sd_mmc_spi_read_word+0x84>)
   205e6:	2200      	movs	r2, #0
   205e8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   205ea:	4b1c      	ldr	r3, [pc, #112]	; (2065c <sd_mmc_spi_read_word+0x88>)
   205ec:	681a      	ldr	r2, [r3, #0]
   205ee:	4b1c      	ldr	r3, [pc, #112]	; (20660 <sd_mmc_spi_read_word+0x8c>)
   205f0:	881b      	ldrh	r3, [r3, #0]
   205f2:	0019      	movs	r1, r3
   205f4:	4b1b      	ldr	r3, [pc, #108]	; (20664 <sd_mmc_spi_read_word+0x90>)
   205f6:	0010      	movs	r0, r2
   205f8:	4798      	blx	r3
   205fa:	1e0b      	subs	r3, r1, #0
   205fc:	d10a      	bne.n	20614 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   205fe:	4b1a      	ldr	r3, [pc, #104]	; (20668 <sd_mmc_spi_read_word+0x94>)
   20600:	4798      	blx	r3
   20602:	0003      	movs	r3, r0
   20604:	001a      	movs	r2, r3
   20606:	2301      	movs	r3, #1
   20608:	4053      	eors	r3, r2
   2060a:	b2db      	uxtb	r3, r3
   2060c:	2b00      	cmp	r3, #0
   2060e:	d001      	beq.n	20614 <sd_mmc_spi_read_word+0x40>
			return false;
   20610:	2300      	movs	r3, #0
   20612:	e01d      	b.n	20650 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20614:	230e      	movs	r3, #14
   20616:	18fb      	adds	r3, r7, r3
   20618:	881b      	ldrh	r3, [r3, #0]
   2061a:	1d39      	adds	r1, r7, #4
   2061c:	4813      	ldr	r0, [pc, #76]	; (2066c <sd_mmc_spi_read_word+0x98>)
   2061e:	2204      	movs	r2, #4
   20620:	4c13      	ldr	r4, [pc, #76]	; (20670 <sd_mmc_spi_read_word+0x9c>)
   20622:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20624:	687b      	ldr	r3, [r7, #4]
   20626:	687a      	ldr	r2, [r7, #4]
   20628:	6812      	ldr	r2, [r2, #0]
   2062a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   2062c:	4b0b      	ldr	r3, [pc, #44]	; (2065c <sd_mmc_spi_read_word+0x88>)
   2062e:	681b      	ldr	r3, [r3, #0]
   20630:	1d1a      	adds	r2, r3, #4
   20632:	4b0a      	ldr	r3, [pc, #40]	; (2065c <sd_mmc_spi_read_word+0x88>)
   20634:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20636:	4b09      	ldr	r3, [pc, #36]	; (2065c <sd_mmc_spi_read_word+0x88>)
   20638:	681a      	ldr	r2, [r3, #0]
   2063a:	4b09      	ldr	r3, [pc, #36]	; (20660 <sd_mmc_spi_read_word+0x8c>)
   2063c:	881b      	ldrh	r3, [r3, #0]
   2063e:	0019      	movs	r1, r3
   20640:	4b08      	ldr	r3, [pc, #32]	; (20664 <sd_mmc_spi_read_word+0x90>)
   20642:	0010      	movs	r0, r2
   20644:	4798      	blx	r3
   20646:	1e0b      	subs	r3, r1, #0
   20648:	d101      	bne.n	2064e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   2064a:	4b0a      	ldr	r3, [pc, #40]	; (20674 <sd_mmc_spi_read_word+0xa0>)
   2064c:	4798      	blx	r3
	}
	return true;
   2064e:	2301      	movs	r3, #1
}
   20650:	0018      	movs	r0, r3
   20652:	46bd      	mov	sp, r7
   20654:	b005      	add	sp, #20
   20656:	bd90      	pop	{r4, r7, pc}
   20658:	200042a3 	.word	0x200042a3
   2065c:	200042a8 	.word	0x200042a8
   20660:	200042ac 	.word	0x200042ac
   20664:	00033141 	.word	0x00033141
   20668:	0001ff71 	.word	0x0001ff71
   2066c:	20004260 	.word	0x20004260
   20670:	00028671 	.word	0x00028671
   20674:	0001fff5 	.word	0x0001fff5

00020678 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20678:	b590      	push	{r4, r7, lr}
   2067a:	b085      	sub	sp, #20
   2067c:	af00      	add	r7, sp, #0
   2067e:	6078      	str	r0, [r7, #4]
   20680:	000a      	movs	r2, r1
   20682:	1cbb      	adds	r3, r7, #2
   20684:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20686:	230a      	movs	r3, #10
   20688:	18fb      	adds	r3, r7, r3
   2068a:	22ff      	movs	r2, #255	; 0xff
   2068c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2068e:	4b1c      	ldr	r3, [pc, #112]	; (20700 <sd_mmc_spi_start_read_blocks+0x88>)
   20690:	2200      	movs	r2, #0
   20692:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20694:	2300      	movs	r3, #0
   20696:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20698:	e025      	b.n	206e6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   2069a:	4b1a      	ldr	r3, [pc, #104]	; (20704 <sd_mmc_spi_start_read_blocks+0x8c>)
   2069c:	4798      	blx	r3
   2069e:	0003      	movs	r3, r0
   206a0:	001a      	movs	r2, r3
   206a2:	2301      	movs	r3, #1
   206a4:	4053      	eors	r3, r2
   206a6:	b2db      	uxtb	r3, r3
   206a8:	2b00      	cmp	r3, #0
   206aa:	d001      	beq.n	206b0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   206ac:	2300      	movs	r3, #0
   206ae:	e022      	b.n	206f6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   206b0:	687a      	ldr	r2, [r7, #4]
   206b2:	68fb      	ldr	r3, [r7, #12]
   206b4:	18d1      	adds	r1, r2, r3
   206b6:	4b14      	ldr	r3, [pc, #80]	; (20708 <sd_mmc_spi_start_read_blocks+0x90>)
   206b8:	881a      	ldrh	r2, [r3, #0]
   206ba:	230a      	movs	r3, #10
   206bc:	18fb      	adds	r3, r7, r3
   206be:	881b      	ldrh	r3, [r3, #0]
   206c0:	4812      	ldr	r0, [pc, #72]	; (2070c <sd_mmc_spi_start_read_blocks+0x94>)
   206c2:	4c13      	ldr	r4, [pc, #76]	; (20710 <sd_mmc_spi_start_read_blocks+0x98>)
   206c4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   206c6:	4b10      	ldr	r3, [pc, #64]	; (20708 <sd_mmc_spi_start_read_blocks+0x90>)
   206c8:	881b      	ldrh	r3, [r3, #0]
   206ca:	001a      	movs	r2, r3
   206cc:	68fb      	ldr	r3, [r7, #12]
   206ce:	189b      	adds	r3, r3, r2
   206d0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   206d2:	4b0d      	ldr	r3, [pc, #52]	; (20708 <sd_mmc_spi_start_read_blocks+0x90>)
   206d4:	881b      	ldrh	r3, [r3, #0]
   206d6:	001a      	movs	r2, r3
   206d8:	4b0e      	ldr	r3, [pc, #56]	; (20714 <sd_mmc_spi_start_read_blocks+0x9c>)
   206da:	681b      	ldr	r3, [r3, #0]
   206dc:	18d2      	adds	r2, r2, r3
   206de:	4b0d      	ldr	r3, [pc, #52]	; (20714 <sd_mmc_spi_start_read_blocks+0x9c>)
   206e0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   206e2:	4b0d      	ldr	r3, [pc, #52]	; (20718 <sd_mmc_spi_start_read_blocks+0xa0>)
   206e4:	4798      	blx	r3
	while (nb_block--) {
   206e6:	1cbb      	adds	r3, r7, #2
   206e8:	881b      	ldrh	r3, [r3, #0]
   206ea:	1cba      	adds	r2, r7, #2
   206ec:	1e59      	subs	r1, r3, #1
   206ee:	8011      	strh	r1, [r2, #0]
   206f0:	2b00      	cmp	r3, #0
   206f2:	d1d2      	bne.n	2069a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   206f4:	2301      	movs	r3, #1
}
   206f6:	0018      	movs	r0, r3
   206f8:	46bd      	mov	sp, r7
   206fa:	b005      	add	sp, #20
   206fc:	bd90      	pop	{r4, r7, pc}
   206fe:	46c0      	nop			; (mov r8, r8)
   20700:	200042a3 	.word	0x200042a3
   20704:	0001ff71 	.word	0x0001ff71
   20708:	200042ac 	.word	0x200042ac
   2070c:	20004260 	.word	0x20004260
   20710:	00028671 	.word	0x00028671
   20714:	200042a8 	.word	0x200042a8
   20718:	0001fff5 	.word	0x0001fff5

0002071c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   2071c:	b580      	push	{r7, lr}
   2071e:	af00      	add	r7, sp, #0
	return true;
   20720:	2301      	movs	r3, #1
}
   20722:	0018      	movs	r0, r3
   20724:	46bd      	mov	sp, r7
   20726:	bd80      	pop	{r7, pc}

00020728 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20728:	b580      	push	{r7, lr}
   2072a:	b084      	sub	sp, #16
   2072c:	af00      	add	r7, sp, #0
   2072e:	6078      	str	r0, [r7, #4]
   20730:	000a      	movs	r2, r1
   20732:	1cbb      	adds	r3, r7, #2
   20734:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20736:	4b24      	ldr	r3, [pc, #144]	; (207c8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20738:	2200      	movs	r2, #0
   2073a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2073c:	2300      	movs	r3, #0
   2073e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20740:	e035      	b.n	207ae <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20742:	4b22      	ldr	r3, [pc, #136]	; (207cc <sd_mmc_spi_start_write_blocks+0xa4>)
   20744:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20746:	687a      	ldr	r2, [r7, #4]
   20748:	68fb      	ldr	r3, [r7, #12]
   2074a:	18d1      	adds	r1, r2, r3
   2074c:	4b20      	ldr	r3, [pc, #128]	; (207d0 <sd_mmc_spi_start_write_blocks+0xa8>)
   2074e:	881a      	ldrh	r2, [r3, #0]
   20750:	4b20      	ldr	r3, [pc, #128]	; (207d4 <sd_mmc_spi_start_write_blocks+0xac>)
   20752:	0018      	movs	r0, r3
   20754:	4b20      	ldr	r3, [pc, #128]	; (207d8 <sd_mmc_spi_start_write_blocks+0xb0>)
   20756:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20758:	4b1d      	ldr	r3, [pc, #116]	; (207d0 <sd_mmc_spi_start_write_blocks+0xa8>)
   2075a:	881b      	ldrh	r3, [r3, #0]
   2075c:	001a      	movs	r2, r3
   2075e:	68fb      	ldr	r3, [r7, #12]
   20760:	189b      	adds	r3, r3, r2
   20762:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20764:	4b1a      	ldr	r3, [pc, #104]	; (207d0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20766:	881b      	ldrh	r3, [r3, #0]
   20768:	001a      	movs	r2, r3
   2076a:	4b1c      	ldr	r3, [pc, #112]	; (207dc <sd_mmc_spi_start_write_blocks+0xb4>)
   2076c:	681b      	ldr	r3, [r3, #0]
   2076e:	18d2      	adds	r2, r2, r3
   20770:	4b1a      	ldr	r3, [pc, #104]	; (207dc <sd_mmc_spi_start_write_blocks+0xb4>)
   20772:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20774:	4b1a      	ldr	r3, [pc, #104]	; (207e0 <sd_mmc_spi_start_write_blocks+0xb8>)
   20776:	4798      	blx	r3
   20778:	0003      	movs	r3, r0
   2077a:	001a      	movs	r2, r3
   2077c:	2301      	movs	r3, #1
   2077e:	4053      	eors	r3, r2
   20780:	b2db      	uxtb	r3, r3
   20782:	2b00      	cmp	r3, #0
   20784:	d001      	beq.n	2078a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20786:	2300      	movs	r3, #0
   20788:	e019      	b.n	207be <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   2078a:	1cbb      	adds	r3, r7, #2
   2078c:	881b      	ldrh	r3, [r3, #0]
   2078e:	2b00      	cmp	r3, #0
   20790:	d00d      	beq.n	207ae <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20792:	4b14      	ldr	r3, [pc, #80]	; (207e4 <sd_mmc_spi_start_write_blocks+0xbc>)
   20794:	4798      	blx	r3
   20796:	0003      	movs	r3, r0
   20798:	001a      	movs	r2, r3
   2079a:	2301      	movs	r3, #1
   2079c:	4053      	eors	r3, r2
   2079e:	b2db      	uxtb	r3, r3
   207a0:	2b00      	cmp	r3, #0
   207a2:	d004      	beq.n	207ae <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   207a4:	4b08      	ldr	r3, [pc, #32]	; (207c8 <sd_mmc_spi_start_write_blocks+0xa0>)
   207a6:	2205      	movs	r2, #5
   207a8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   207aa:	2300      	movs	r3, #0
   207ac:	e007      	b.n	207be <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   207ae:	1cbb      	adds	r3, r7, #2
   207b0:	881b      	ldrh	r3, [r3, #0]
   207b2:	1cba      	adds	r2, r7, #2
   207b4:	1e59      	subs	r1, r3, #1
   207b6:	8011      	strh	r1, [r2, #0]
   207b8:	2b00      	cmp	r3, #0
   207ba:	d1c2      	bne.n	20742 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   207bc:	2301      	movs	r3, #1
}
   207be:	0018      	movs	r0, r3
   207c0:	46bd      	mov	sp, r7
   207c2:	b004      	add	sp, #16
   207c4:	bd80      	pop	{r7, pc}
   207c6:	46c0      	nop			; (mov r8, r8)
   207c8:	200042a3 	.word	0x200042a3
   207cc:	00020021 	.word	0x00020021
   207d0:	200042ac 	.word	0x200042ac
   207d4:	20004260 	.word	0x20004260
   207d8:	00028895 	.word	0x00028895
   207dc:	200042a8 	.word	0x200042a8
   207e0:	00020071 	.word	0x00020071
   207e4:	0001ff05 	.word	0x0001ff05

000207e8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   207e8:	b580      	push	{r7, lr}
   207ea:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   207ec:	4b09      	ldr	r3, [pc, #36]	; (20814 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   207ee:	4798      	blx	r3
   207f0:	0003      	movs	r3, r0
   207f2:	001a      	movs	r2, r3
   207f4:	2301      	movs	r3, #1
   207f6:	4053      	eors	r3, r2
   207f8:	b2db      	uxtb	r3, r3
   207fa:	2b00      	cmp	r3, #0
   207fc:	d004      	beq.n	20808 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   207fe:	4b06      	ldr	r3, [pc, #24]	; (20818 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20800:	2205      	movs	r2, #5
   20802:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20804:	2300      	movs	r3, #0
   20806:	e002      	b.n	2080e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20808:	4b04      	ldr	r3, [pc, #16]	; (2081c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   2080a:	4798      	blx	r3
   2080c:	0003      	movs	r3, r0
}
   2080e:	0018      	movs	r0, r3
   20810:	46bd      	mov	sp, r7
   20812:	bd80      	pop	{r7, pc}
   20814:	0001ff05 	.word	0x0001ff05
   20818:	200042a3 	.word	0x200042a3
   2081c:	00020105 	.word	0x00020105

00020820 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20820:	b580      	push	{r7, lr}
   20822:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20824:	2000      	movs	r0, #0
   20826:	4b0f      	ldr	r3, [pc, #60]	; (20864 <delay_init+0x44>)
   20828:	4798      	blx	r3
   2082a:	0002      	movs	r2, r0
   2082c:	4b0e      	ldr	r3, [pc, #56]	; (20868 <delay_init+0x48>)
   2082e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20830:	4b0d      	ldr	r3, [pc, #52]	; (20868 <delay_init+0x48>)
   20832:	6818      	ldr	r0, [r3, #0]
   20834:	4b0d      	ldr	r3, [pc, #52]	; (2086c <delay_init+0x4c>)
   20836:	22fa      	movs	r2, #250	; 0xfa
   20838:	0091      	lsls	r1, r2, #2
   2083a:	4798      	blx	r3
   2083c:	0003      	movs	r3, r0
   2083e:	001a      	movs	r2, r3
   20840:	4b09      	ldr	r3, [pc, #36]	; (20868 <delay_init+0x48>)
   20842:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20844:	4b08      	ldr	r3, [pc, #32]	; (20868 <delay_init+0x48>)
   20846:	6818      	ldr	r0, [r3, #0]
   20848:	4b08      	ldr	r3, [pc, #32]	; (2086c <delay_init+0x4c>)
   2084a:	22fa      	movs	r2, #250	; 0xfa
   2084c:	0091      	lsls	r1, r2, #2
   2084e:	4798      	blx	r3
   20850:	0003      	movs	r3, r0
   20852:	001a      	movs	r2, r3
   20854:	4b06      	ldr	r3, [pc, #24]	; (20870 <delay_init+0x50>)
   20856:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20858:	4b06      	ldr	r3, [pc, #24]	; (20874 <delay_init+0x54>)
   2085a:	2205      	movs	r2, #5
   2085c:	601a      	str	r2, [r3, #0]
}
   2085e:	46c0      	nop			; (mov r8, r8)
   20860:	46bd      	mov	sp, r7
   20862:	bd80      	pop	{r7, pc}
   20864:	0002a419 	.word	0x0002a419
   20868:	2000011c 	.word	0x2000011c
   2086c:	00033035 	.word	0x00033035
   20870:	20000120 	.word	0x20000120
   20874:	e000e010 	.word	0xe000e010

00020878 <system_pinmux_get_group_from_gpio_pin>:
{
   20878:	b580      	push	{r7, lr}
   2087a:	b084      	sub	sp, #16
   2087c:	af00      	add	r7, sp, #0
   2087e:	0002      	movs	r2, r0
   20880:	1dfb      	adds	r3, r7, #7
   20882:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20884:	230f      	movs	r3, #15
   20886:	18fb      	adds	r3, r7, r3
   20888:	1dfa      	adds	r2, r7, #7
   2088a:	7812      	ldrb	r2, [r2, #0]
   2088c:	09d2      	lsrs	r2, r2, #7
   2088e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20890:	230e      	movs	r3, #14
   20892:	18fb      	adds	r3, r7, r3
   20894:	1dfa      	adds	r2, r7, #7
   20896:	7812      	ldrb	r2, [r2, #0]
   20898:	0952      	lsrs	r2, r2, #5
   2089a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2089c:	4b0d      	ldr	r3, [pc, #52]	; (208d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2089e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   208a0:	230f      	movs	r3, #15
   208a2:	18fb      	adds	r3, r7, r3
   208a4:	781b      	ldrb	r3, [r3, #0]
   208a6:	2b00      	cmp	r3, #0
   208a8:	d10f      	bne.n	208ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   208aa:	230f      	movs	r3, #15
   208ac:	18fb      	adds	r3, r7, r3
   208ae:	781b      	ldrb	r3, [r3, #0]
   208b0:	009b      	lsls	r3, r3, #2
   208b2:	2210      	movs	r2, #16
   208b4:	4694      	mov	ip, r2
   208b6:	44bc      	add	ip, r7
   208b8:	4463      	add	r3, ip
   208ba:	3b08      	subs	r3, #8
   208bc:	681a      	ldr	r2, [r3, #0]
   208be:	230e      	movs	r3, #14
   208c0:	18fb      	adds	r3, r7, r3
   208c2:	781b      	ldrb	r3, [r3, #0]
   208c4:	01db      	lsls	r3, r3, #7
   208c6:	18d3      	adds	r3, r2, r3
   208c8:	e000      	b.n	208cc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   208ca:	2300      	movs	r3, #0
}
   208cc:	0018      	movs	r0, r3
   208ce:	46bd      	mov	sp, r7
   208d0:	b004      	add	sp, #16
   208d2:	bd80      	pop	{r7, pc}
   208d4:	41004400 	.word	0x41004400

000208d8 <system_interrupt_enable_global>:
{
   208d8:	b580      	push	{r7, lr}
   208da:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   208dc:	4b04      	ldr	r3, [pc, #16]	; (208f0 <system_interrupt_enable_global+0x18>)
   208de:	2201      	movs	r2, #1
   208e0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   208e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   208e6:	b662      	cpsie	i
}
   208e8:	46c0      	nop			; (mov r8, r8)
   208ea:	46bd      	mov	sp, r7
   208ec:	bd80      	pop	{r7, pc}
   208ee:	46c0      	nop			; (mov r8, r8)
   208f0:	20000126 	.word	0x20000126

000208f4 <port_get_group_from_gpio_pin>:
{
   208f4:	b580      	push	{r7, lr}
   208f6:	b082      	sub	sp, #8
   208f8:	af00      	add	r7, sp, #0
   208fa:	0002      	movs	r2, r0
   208fc:	1dfb      	adds	r3, r7, #7
   208fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20900:	1dfb      	adds	r3, r7, #7
   20902:	781b      	ldrb	r3, [r3, #0]
   20904:	0018      	movs	r0, r3
   20906:	4b03      	ldr	r3, [pc, #12]	; (20914 <port_get_group_from_gpio_pin+0x20>)
   20908:	4798      	blx	r3
   2090a:	0003      	movs	r3, r0
}
   2090c:	0018      	movs	r0, r3
   2090e:	46bd      	mov	sp, r7
   20910:	b002      	add	sp, #8
   20912:	bd80      	pop	{r7, pc}
   20914:	00020879 	.word	0x00020879

00020918 <port_get_config_defaults>:
{
   20918:	b580      	push	{r7, lr}
   2091a:	b082      	sub	sp, #8
   2091c:	af00      	add	r7, sp, #0
   2091e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20920:	687b      	ldr	r3, [r7, #4]
   20922:	2200      	movs	r2, #0
   20924:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20926:	687b      	ldr	r3, [r7, #4]
   20928:	2201      	movs	r2, #1
   2092a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2092c:	687b      	ldr	r3, [r7, #4]
   2092e:	2200      	movs	r2, #0
   20930:	709a      	strb	r2, [r3, #2]
}
   20932:	46c0      	nop			; (mov r8, r8)
   20934:	46bd      	mov	sp, r7
   20936:	b002      	add	sp, #8
   20938:	bd80      	pop	{r7, pc}
	...

0002093c <port_pin_set_output_level>:
{
   2093c:	b580      	push	{r7, lr}
   2093e:	b084      	sub	sp, #16
   20940:	af00      	add	r7, sp, #0
   20942:	0002      	movs	r2, r0
   20944:	1dfb      	adds	r3, r7, #7
   20946:	701a      	strb	r2, [r3, #0]
   20948:	1dbb      	adds	r3, r7, #6
   2094a:	1c0a      	adds	r2, r1, #0
   2094c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2094e:	1dfb      	adds	r3, r7, #7
   20950:	781b      	ldrb	r3, [r3, #0]
   20952:	0018      	movs	r0, r3
   20954:	4b0d      	ldr	r3, [pc, #52]	; (2098c <port_pin_set_output_level+0x50>)
   20956:	4798      	blx	r3
   20958:	0003      	movs	r3, r0
   2095a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2095c:	1dfb      	adds	r3, r7, #7
   2095e:	781b      	ldrb	r3, [r3, #0]
   20960:	221f      	movs	r2, #31
   20962:	4013      	ands	r3, r2
   20964:	2201      	movs	r2, #1
   20966:	409a      	lsls	r2, r3
   20968:	0013      	movs	r3, r2
   2096a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2096c:	1dbb      	adds	r3, r7, #6
   2096e:	781b      	ldrb	r3, [r3, #0]
   20970:	2b00      	cmp	r3, #0
   20972:	d003      	beq.n	2097c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20974:	68fb      	ldr	r3, [r7, #12]
   20976:	68ba      	ldr	r2, [r7, #8]
   20978:	619a      	str	r2, [r3, #24]
}
   2097a:	e002      	b.n	20982 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2097c:	68fb      	ldr	r3, [r7, #12]
   2097e:	68ba      	ldr	r2, [r7, #8]
   20980:	615a      	str	r2, [r3, #20]
}
   20982:	46c0      	nop			; (mov r8, r8)
   20984:	46bd      	mov	sp, r7
   20986:	b004      	add	sp, #16
   20988:	bd80      	pop	{r7, pc}
   2098a:	46c0      	nop			; (mov r8, r8)
   2098c:	000208f5 	.word	0x000208f5

00020990 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20990:	b580      	push	{r7, lr}
   20992:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20994:	4b04      	ldr	r3, [pc, #16]	; (209a8 <chip_isr+0x18>)
   20996:	681b      	ldr	r3, [r3, #0]
   20998:	2b00      	cmp	r3, #0
   2099a:	d002      	beq.n	209a2 <chip_isr+0x12>
		gpfIsr();
   2099c:	4b02      	ldr	r3, [pc, #8]	; (209a8 <chip_isr+0x18>)
   2099e:	681b      	ldr	r3, [r3, #0]
   209a0:	4798      	blx	r3
	}
}
   209a2:	46c0      	nop			; (mov r8, r8)
   209a4:	46bd      	mov	sp, r7
   209a6:	bd80      	pop	{r7, pc}
   209a8:	200042b0 	.word	0x200042b0

000209ac <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   209ac:	b580      	push	{r7, lr}
   209ae:	b082      	sub	sp, #8
   209b0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   209b2:	1d3b      	adds	r3, r7, #4
   209b4:	0018      	movs	r0, r3
   209b6:	4b10      	ldr	r3, [pc, #64]	; (209f8 <init_chip_pins+0x4c>)
   209b8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   209ba:	1d3b      	adds	r3, r7, #4
   209bc:	2201      	movs	r2, #1
   209be:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   209c0:	1d3b      	adds	r3, r7, #4
   209c2:	0019      	movs	r1, r3
   209c4:	201b      	movs	r0, #27
   209c6:	4b0d      	ldr	r3, [pc, #52]	; (209fc <init_chip_pins+0x50>)
   209c8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   209ca:	1d3b      	adds	r3, r7, #4
   209cc:	0019      	movs	r1, r3
   209ce:	201c      	movs	r0, #28
   209d0:	4b0a      	ldr	r3, [pc, #40]	; (209fc <init_chip_pins+0x50>)
   209d2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   209d4:	1d3b      	adds	r3, r7, #4
   209d6:	0019      	movs	r1, r3
   209d8:	2028      	movs	r0, #40	; 0x28
   209da:	4b08      	ldr	r3, [pc, #32]	; (209fc <init_chip_pins+0x50>)
   209dc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   209de:	2100      	movs	r1, #0
   209e0:	201c      	movs	r0, #28
   209e2:	4b07      	ldr	r3, [pc, #28]	; (20a00 <init_chip_pins+0x54>)
   209e4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   209e6:	2100      	movs	r1, #0
   209e8:	201b      	movs	r0, #27
   209ea:	4b05      	ldr	r3, [pc, #20]	; (20a00 <init_chip_pins+0x54>)
   209ec:	4798      	blx	r3
}
   209ee:	46c0      	nop			; (mov r8, r8)
   209f0:	46bd      	mov	sp, r7
   209f2:	b002      	add	sp, #8
   209f4:	bd80      	pop	{r7, pc}
   209f6:	46c0      	nop			; (mov r8, r8)
   209f8:	00020919 	.word	0x00020919
   209fc:	00027061 	.word	0x00027061
   20a00:	0002093d 	.word	0x0002093d

00020a04 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20a04:	b580      	push	{r7, lr}
   20a06:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20a08:	4b0b      	ldr	r3, [pc, #44]	; (20a38 <nm_bsp_init+0x34>)
   20a0a:	2200      	movs	r2, #0
   20a0c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20a0e:	4b0b      	ldr	r3, [pc, #44]	; (20a3c <nm_bsp_init+0x38>)
   20a10:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20a12:	4b0b      	ldr	r3, [pc, #44]	; (20a40 <nm_bsp_init+0x3c>)
   20a14:	681b      	ldr	r3, [r3, #0]
   20a16:	2201      	movs	r2, #1
   20a18:	4013      	ands	r3, r2
   20a1a:	d004      	beq.n	20a26 <nm_bsp_init+0x22>
   20a1c:	4b08      	ldr	r3, [pc, #32]	; (20a40 <nm_bsp_init+0x3c>)
   20a1e:	681b      	ldr	r3, [r3, #0]
   20a20:	2202      	movs	r2, #2
   20a22:	4013      	ands	r3, r2
   20a24:	d101      	bne.n	20a2a <nm_bsp_init+0x26>
	    delay_init();
   20a26:	4b07      	ldr	r3, [pc, #28]	; (20a44 <nm_bsp_init+0x40>)
   20a28:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20a2a:	4b07      	ldr	r3, [pc, #28]	; (20a48 <nm_bsp_init+0x44>)
   20a2c:	4798      	blx	r3

	return M2M_SUCCESS;
   20a2e:	2300      	movs	r3, #0
}
   20a30:	0018      	movs	r0, r3
   20a32:	46bd      	mov	sp, r7
   20a34:	bd80      	pop	{r7, pc}
   20a36:	46c0      	nop			; (mov r8, r8)
   20a38:	200042b0 	.word	0x200042b0
   20a3c:	000209ad 	.word	0x000209ad
   20a40:	e000e010 	.word	0xe000e010
   20a44:	00020821 	.word	0x00020821
   20a48:	000208d9 	.word	0x000208d9

00020a4c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20a4c:	b580      	push	{r7, lr}
   20a4e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20a50:	2100      	movs	r1, #0
   20a52:	201c      	movs	r0, #28
   20a54:	4b0b      	ldr	r3, [pc, #44]	; (20a84 <nm_bsp_reset+0x38>)
   20a56:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20a58:	2100      	movs	r1, #0
   20a5a:	201b      	movs	r0, #27
   20a5c:	4b09      	ldr	r3, [pc, #36]	; (20a84 <nm_bsp_reset+0x38>)
   20a5e:	4798      	blx	r3
	nm_bsp_sleep(1);
   20a60:	2001      	movs	r0, #1
   20a62:	4b09      	ldr	r3, [pc, #36]	; (20a88 <nm_bsp_reset+0x3c>)
   20a64:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20a66:	2101      	movs	r1, #1
   20a68:	201c      	movs	r0, #28
   20a6a:	4b06      	ldr	r3, [pc, #24]	; (20a84 <nm_bsp_reset+0x38>)
   20a6c:	4798      	blx	r3
	nm_bsp_sleep(10);
   20a6e:	200a      	movs	r0, #10
   20a70:	4b05      	ldr	r3, [pc, #20]	; (20a88 <nm_bsp_reset+0x3c>)
   20a72:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20a74:	2101      	movs	r1, #1
   20a76:	201b      	movs	r0, #27
   20a78:	4b02      	ldr	r3, [pc, #8]	; (20a84 <nm_bsp_reset+0x38>)
   20a7a:	4798      	blx	r3
}
   20a7c:	46c0      	nop			; (mov r8, r8)
   20a7e:	46bd      	mov	sp, r7
   20a80:	bd80      	pop	{r7, pc}
   20a82:	46c0      	nop			; (mov r8, r8)
   20a84:	0002093d 	.word	0x0002093d
   20a88:	00020a8d 	.word	0x00020a8d

00020a8c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   20a8c:	b580      	push	{r7, lr}
   20a8e:	b082      	sub	sp, #8
   20a90:	af00      	add	r7, sp, #0
   20a92:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20a94:	687b      	ldr	r3, [r7, #4]
   20a96:	0018      	movs	r0, r3
   20a98:	4b02      	ldr	r3, [pc, #8]	; (20aa4 <nm_bsp_sleep+0x18>)
   20a9a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   20a9c:	46c0      	nop			; (mov r8, r8)
   20a9e:	46bd      	mov	sp, r7
   20aa0:	b002      	add	sp, #8
   20aa2:	bd80      	pop	{r7, pc}
   20aa4:	0001c8a1 	.word	0x0001c8a1

00020aa8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20aa8:	b580      	push	{r7, lr}
   20aaa:	b086      	sub	sp, #24
   20aac:	af00      	add	r7, sp, #0
   20aae:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20ab0:	4b15      	ldr	r3, [pc, #84]	; (20b08 <nm_bsp_register_isr+0x60>)
   20ab2:	687a      	ldr	r2, [r7, #4]
   20ab4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20ab6:	230c      	movs	r3, #12
   20ab8:	18fb      	adds	r3, r7, r3
   20aba:	0018      	movs	r0, r3
   20abc:	4b13      	ldr	r3, [pc, #76]	; (20b0c <nm_bsp_register_isr+0x64>)
   20abe:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20ac0:	230c      	movs	r3, #12
   20ac2:	18fb      	adds	r3, r7, r3
   20ac4:	2229      	movs	r2, #41	; 0x29
   20ac6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20ac8:	230c      	movs	r3, #12
   20aca:	18fb      	adds	r3, r7, r3
   20acc:	2200      	movs	r2, #0
   20ace:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20ad0:	230c      	movs	r3, #12
   20ad2:	18fb      	adds	r3, r7, r3
   20ad4:	2201      	movs	r2, #1
   20ad6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20ad8:	230c      	movs	r3, #12
   20ada:	18fb      	adds	r3, r7, r3
   20adc:	2202      	movs	r2, #2
   20ade:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20ae0:	230c      	movs	r3, #12
   20ae2:	18fb      	adds	r3, r7, r3
   20ae4:	0019      	movs	r1, r3
   20ae6:	2009      	movs	r0, #9
   20ae8:	4b09      	ldr	r3, [pc, #36]	; (20b10 <nm_bsp_register_isr+0x68>)
   20aea:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20aec:	4b09      	ldr	r3, [pc, #36]	; (20b14 <nm_bsp_register_isr+0x6c>)
   20aee:	2200      	movs	r2, #0
   20af0:	2109      	movs	r1, #9
   20af2:	0018      	movs	r0, r3
   20af4:	4b08      	ldr	r3, [pc, #32]	; (20b18 <nm_bsp_register_isr+0x70>)
   20af6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20af8:	2100      	movs	r1, #0
   20afa:	2009      	movs	r0, #9
   20afc:	4b07      	ldr	r3, [pc, #28]	; (20b1c <nm_bsp_register_isr+0x74>)
   20afe:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20b00:	46c0      	nop			; (mov r8, r8)
   20b02:	46bd      	mov	sp, r7
   20b04:	b006      	add	sp, #24
   20b06:	bd80      	pop	{r7, pc}
   20b08:	200042b0 	.word	0x200042b0
   20b0c:	00026f09 	.word	0x00026f09
   20b10:	00026f3d 	.word	0x00026f3d
   20b14:	00020991 	.word	0x00020991
   20b18:	00026b09 	.word	0x00026b09
   20b1c:	00026b6d 	.word	0x00026b6d

00020b20 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20b20:	b580      	push	{r7, lr}
   20b22:	b082      	sub	sp, #8
   20b24:	af00      	add	r7, sp, #0
   20b26:	0002      	movs	r2, r0
   20b28:	1dfb      	adds	r3, r7, #7
   20b2a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20b2c:	1dfb      	adds	r3, r7, #7
   20b2e:	781b      	ldrb	r3, [r3, #0]
   20b30:	2b00      	cmp	r3, #0
   20b32:	d004      	beq.n	20b3e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20b34:	2100      	movs	r1, #0
   20b36:	2009      	movs	r0, #9
   20b38:	4b05      	ldr	r3, [pc, #20]	; (20b50 <nm_bsp_interrupt_ctrl+0x30>)
   20b3a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20b3c:	e003      	b.n	20b46 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20b3e:	2100      	movs	r1, #0
   20b40:	2009      	movs	r0, #9
   20b42:	4b04      	ldr	r3, [pc, #16]	; (20b54 <nm_bsp_interrupt_ctrl+0x34>)
   20b44:	4798      	blx	r3
}
   20b46:	46c0      	nop			; (mov r8, r8)
   20b48:	46bd      	mov	sp, r7
   20b4a:	b002      	add	sp, #8
   20b4c:	bd80      	pop	{r7, pc}
   20b4e:	46c0      	nop			; (mov r8, r8)
   20b50:	00026b6d 	.word	0x00026b6d
   20b54:	00026bb5 	.word	0x00026bb5

00020b58 <system_pinmux_get_group_from_gpio_pin>:
{
   20b58:	b580      	push	{r7, lr}
   20b5a:	b084      	sub	sp, #16
   20b5c:	af00      	add	r7, sp, #0
   20b5e:	0002      	movs	r2, r0
   20b60:	1dfb      	adds	r3, r7, #7
   20b62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20b64:	230f      	movs	r3, #15
   20b66:	18fb      	adds	r3, r7, r3
   20b68:	1dfa      	adds	r2, r7, #7
   20b6a:	7812      	ldrb	r2, [r2, #0]
   20b6c:	09d2      	lsrs	r2, r2, #7
   20b6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20b70:	230e      	movs	r3, #14
   20b72:	18fb      	adds	r3, r7, r3
   20b74:	1dfa      	adds	r2, r7, #7
   20b76:	7812      	ldrb	r2, [r2, #0]
   20b78:	0952      	lsrs	r2, r2, #5
   20b7a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20b7c:	4b0d      	ldr	r3, [pc, #52]	; (20bb4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20b7e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20b80:	230f      	movs	r3, #15
   20b82:	18fb      	adds	r3, r7, r3
   20b84:	781b      	ldrb	r3, [r3, #0]
   20b86:	2b00      	cmp	r3, #0
   20b88:	d10f      	bne.n	20baa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20b8a:	230f      	movs	r3, #15
   20b8c:	18fb      	adds	r3, r7, r3
   20b8e:	781b      	ldrb	r3, [r3, #0]
   20b90:	009b      	lsls	r3, r3, #2
   20b92:	2210      	movs	r2, #16
   20b94:	4694      	mov	ip, r2
   20b96:	44bc      	add	ip, r7
   20b98:	4463      	add	r3, ip
   20b9a:	3b08      	subs	r3, #8
   20b9c:	681a      	ldr	r2, [r3, #0]
   20b9e:	230e      	movs	r3, #14
   20ba0:	18fb      	adds	r3, r7, r3
   20ba2:	781b      	ldrb	r3, [r3, #0]
   20ba4:	01db      	lsls	r3, r3, #7
   20ba6:	18d3      	adds	r3, r2, r3
   20ba8:	e000      	b.n	20bac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20baa:	2300      	movs	r3, #0
}
   20bac:	0018      	movs	r0, r3
   20bae:	46bd      	mov	sp, r7
   20bb0:	b004      	add	sp, #16
   20bb2:	bd80      	pop	{r7, pc}
   20bb4:	41004400 	.word	0x41004400

00020bb8 <system_interrupt_enable>:
{
   20bb8:	b580      	push	{r7, lr}
   20bba:	b082      	sub	sp, #8
   20bbc:	af00      	add	r7, sp, #0
   20bbe:	0002      	movs	r2, r0
   20bc0:	1dfb      	adds	r3, r7, #7
   20bc2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20bc4:	4b06      	ldr	r3, [pc, #24]	; (20be0 <system_interrupt_enable+0x28>)
   20bc6:	1dfa      	adds	r2, r7, #7
   20bc8:	7812      	ldrb	r2, [r2, #0]
   20bca:	0011      	movs	r1, r2
   20bcc:	221f      	movs	r2, #31
   20bce:	400a      	ands	r2, r1
   20bd0:	2101      	movs	r1, #1
   20bd2:	4091      	lsls	r1, r2
   20bd4:	000a      	movs	r2, r1
   20bd6:	601a      	str	r2, [r3, #0]
}
   20bd8:	46c0      	nop			; (mov r8, r8)
   20bda:	46bd      	mov	sp, r7
   20bdc:	b002      	add	sp, #8
   20bde:	bd80      	pop	{r7, pc}
   20be0:	e000e100 	.word	0xe000e100

00020be4 <system_interrupt_disable>:
{
   20be4:	b580      	push	{r7, lr}
   20be6:	b082      	sub	sp, #8
   20be8:	af00      	add	r7, sp, #0
   20bea:	0002      	movs	r2, r0
   20bec:	1dfb      	adds	r3, r7, #7
   20bee:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20bf0:	4a07      	ldr	r2, [pc, #28]	; (20c10 <system_interrupt_disable+0x2c>)
   20bf2:	1dfb      	adds	r3, r7, #7
   20bf4:	781b      	ldrb	r3, [r3, #0]
   20bf6:	0019      	movs	r1, r3
   20bf8:	231f      	movs	r3, #31
   20bfa:	400b      	ands	r3, r1
   20bfc:	2101      	movs	r1, #1
   20bfe:	4099      	lsls	r1, r3
   20c00:	000b      	movs	r3, r1
   20c02:	0019      	movs	r1, r3
   20c04:	2380      	movs	r3, #128	; 0x80
   20c06:	50d1      	str	r1, [r2, r3]
}
   20c08:	46c0      	nop			; (mov r8, r8)
   20c0a:	46bd      	mov	sp, r7
   20c0c:	b002      	add	sp, #8
   20c0e:	bd80      	pop	{r7, pc}
   20c10:	e000e100 	.word	0xe000e100

00020c14 <port_get_group_from_gpio_pin>:
{
   20c14:	b580      	push	{r7, lr}
   20c16:	b082      	sub	sp, #8
   20c18:	af00      	add	r7, sp, #0
   20c1a:	0002      	movs	r2, r0
   20c1c:	1dfb      	adds	r3, r7, #7
   20c1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20c20:	1dfb      	adds	r3, r7, #7
   20c22:	781b      	ldrb	r3, [r3, #0]
   20c24:	0018      	movs	r0, r3
   20c26:	4b03      	ldr	r3, [pc, #12]	; (20c34 <port_get_group_from_gpio_pin+0x20>)
   20c28:	4798      	blx	r3
   20c2a:	0003      	movs	r3, r0
}
   20c2c:	0018      	movs	r0, r3
   20c2e:	46bd      	mov	sp, r7
   20c30:	b002      	add	sp, #8
   20c32:	bd80      	pop	{r7, pc}
   20c34:	00020b59 	.word	0x00020b59

00020c38 <port_get_config_defaults>:
{
   20c38:	b580      	push	{r7, lr}
   20c3a:	b082      	sub	sp, #8
   20c3c:	af00      	add	r7, sp, #0
   20c3e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20c40:	687b      	ldr	r3, [r7, #4]
   20c42:	2200      	movs	r2, #0
   20c44:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20c46:	687b      	ldr	r3, [r7, #4]
   20c48:	2201      	movs	r2, #1
   20c4a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20c4c:	687b      	ldr	r3, [r7, #4]
   20c4e:	2200      	movs	r2, #0
   20c50:	709a      	strb	r2, [r3, #2]
}
   20c52:	46c0      	nop			; (mov r8, r8)
   20c54:	46bd      	mov	sp, r7
   20c56:	b002      	add	sp, #8
   20c58:	bd80      	pop	{r7, pc}
	...

00020c5c <port_pin_set_output_level>:
{
   20c5c:	b580      	push	{r7, lr}
   20c5e:	b084      	sub	sp, #16
   20c60:	af00      	add	r7, sp, #0
   20c62:	0002      	movs	r2, r0
   20c64:	1dfb      	adds	r3, r7, #7
   20c66:	701a      	strb	r2, [r3, #0]
   20c68:	1dbb      	adds	r3, r7, #6
   20c6a:	1c0a      	adds	r2, r1, #0
   20c6c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20c6e:	1dfb      	adds	r3, r7, #7
   20c70:	781b      	ldrb	r3, [r3, #0]
   20c72:	0018      	movs	r0, r3
   20c74:	4b0d      	ldr	r3, [pc, #52]	; (20cac <port_pin_set_output_level+0x50>)
   20c76:	4798      	blx	r3
   20c78:	0003      	movs	r3, r0
   20c7a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20c7c:	1dfb      	adds	r3, r7, #7
   20c7e:	781b      	ldrb	r3, [r3, #0]
   20c80:	221f      	movs	r2, #31
   20c82:	4013      	ands	r3, r2
   20c84:	2201      	movs	r2, #1
   20c86:	409a      	lsls	r2, r3
   20c88:	0013      	movs	r3, r2
   20c8a:	60bb      	str	r3, [r7, #8]
	if (level) {
   20c8c:	1dbb      	adds	r3, r7, #6
   20c8e:	781b      	ldrb	r3, [r3, #0]
   20c90:	2b00      	cmp	r3, #0
   20c92:	d003      	beq.n	20c9c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20c94:	68fb      	ldr	r3, [r7, #12]
   20c96:	68ba      	ldr	r2, [r7, #8]
   20c98:	619a      	str	r2, [r3, #24]
}
   20c9a:	e002      	b.n	20ca2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20c9c:	68fb      	ldr	r3, [r7, #12]
   20c9e:	68ba      	ldr	r2, [r7, #8]
   20ca0:	615a      	str	r2, [r3, #20]
}
   20ca2:	46c0      	nop			; (mov r8, r8)
   20ca4:	46bd      	mov	sp, r7
   20ca6:	b004      	add	sp, #16
   20ca8:	bd80      	pop	{r7, pc}
   20caa:	46c0      	nop			; (mov r8, r8)
   20cac:	00020c15 	.word	0x00020c15

00020cb0 <spi_is_syncing>:
{
   20cb0:	b580      	push	{r7, lr}
   20cb2:	b084      	sub	sp, #16
   20cb4:	af00      	add	r7, sp, #0
   20cb6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20cb8:	687b      	ldr	r3, [r7, #4]
   20cba:	681b      	ldr	r3, [r3, #0]
   20cbc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   20cbe:	68fb      	ldr	r3, [r7, #12]
   20cc0:	69db      	ldr	r3, [r3, #28]
   20cc2:	1e5a      	subs	r2, r3, #1
   20cc4:	4193      	sbcs	r3, r2
   20cc6:	b2db      	uxtb	r3, r3
}
   20cc8:	0018      	movs	r0, r3
   20cca:	46bd      	mov	sp, r7
   20ccc:	b004      	add	sp, #16
   20cce:	bd80      	pop	{r7, pc}

00020cd0 <spi_get_config_defaults>:
{
   20cd0:	b580      	push	{r7, lr}
   20cd2:	b082      	sub	sp, #8
   20cd4:	af00      	add	r7, sp, #0
   20cd6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   20cd8:	687b      	ldr	r3, [r7, #4]
   20cda:	2201      	movs	r2, #1
   20cdc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   20cde:	687b      	ldr	r3, [r7, #4]
   20ce0:	2200      	movs	r2, #0
   20ce2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20ce4:	687b      	ldr	r3, [r7, #4]
   20ce6:	2200      	movs	r2, #0
   20ce8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20cea:	687b      	ldr	r3, [r7, #4]
   20cec:	22c0      	movs	r2, #192	; 0xc0
   20cee:	0392      	lsls	r2, r2, #14
   20cf0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20cf2:	687b      	ldr	r3, [r7, #4]
   20cf4:	2200      	movs	r2, #0
   20cf6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20cf8:	687b      	ldr	r3, [r7, #4]
   20cfa:	2200      	movs	r2, #0
   20cfc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   20cfe:	687b      	ldr	r3, [r7, #4]
   20d00:	2201      	movs	r2, #1
   20d02:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   20d04:	687b      	ldr	r3, [r7, #4]
   20d06:	2201      	movs	r2, #1
   20d08:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   20d0a:	687b      	ldr	r3, [r7, #4]
   20d0c:	2200      	movs	r2, #0
   20d0e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   20d10:	687b      	ldr	r3, [r7, #4]
   20d12:	2224      	movs	r2, #36	; 0x24
   20d14:	2100      	movs	r1, #0
   20d16:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20d18:	687b      	ldr	r3, [r7, #4]
   20d1a:	3318      	adds	r3, #24
   20d1c:	220c      	movs	r2, #12
   20d1e:	2100      	movs	r1, #0
   20d20:	0018      	movs	r0, r3
   20d22:	4b0a      	ldr	r3, [pc, #40]	; (20d4c <spi_get_config_defaults+0x7c>)
   20d24:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   20d26:	687b      	ldr	r3, [r7, #4]
   20d28:	4a09      	ldr	r2, [pc, #36]	; (20d50 <spi_get_config_defaults+0x80>)
   20d2a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20d2c:	687b      	ldr	r3, [r7, #4]
   20d2e:	2200      	movs	r2, #0
   20d30:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20d32:	687b      	ldr	r3, [r7, #4]
   20d34:	2200      	movs	r2, #0
   20d36:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20d38:	687b      	ldr	r3, [r7, #4]
   20d3a:	2200      	movs	r2, #0
   20d3c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   20d3e:	687b      	ldr	r3, [r7, #4]
   20d40:	2200      	movs	r2, #0
   20d42:	635a      	str	r2, [r3, #52]	; 0x34
};
   20d44:	46c0      	nop			; (mov r8, r8)
   20d46:	46bd      	mov	sp, r7
   20d48:	b002      	add	sp, #8
   20d4a:	bd80      	pop	{r7, pc}
   20d4c:	00035377 	.word	0x00035377
   20d50:	000186a0 	.word	0x000186a0

00020d54 <spi_slave_inst_get_config_defaults>:
{
   20d54:	b580      	push	{r7, lr}
   20d56:	b082      	sub	sp, #8
   20d58:	af00      	add	r7, sp, #0
   20d5a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   20d5c:	687b      	ldr	r3, [r7, #4]
   20d5e:	220a      	movs	r2, #10
   20d60:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20d62:	687b      	ldr	r3, [r7, #4]
   20d64:	2200      	movs	r2, #0
   20d66:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20d68:	687b      	ldr	r3, [r7, #4]
   20d6a:	2200      	movs	r2, #0
   20d6c:	709a      	strb	r2, [r3, #2]
}
   20d6e:	46c0      	nop			; (mov r8, r8)
   20d70:	46bd      	mov	sp, r7
   20d72:	b002      	add	sp, #8
   20d74:	bd80      	pop	{r7, pc}
	...

00020d78 <spi_attach_slave>:
{
   20d78:	b580      	push	{r7, lr}
   20d7a:	b084      	sub	sp, #16
   20d7c:	af00      	add	r7, sp, #0
   20d7e:	6078      	str	r0, [r7, #4]
   20d80:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   20d82:	683b      	ldr	r3, [r7, #0]
   20d84:	781a      	ldrb	r2, [r3, #0]
   20d86:	687b      	ldr	r3, [r7, #4]
   20d88:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20d8a:	683b      	ldr	r3, [r7, #0]
   20d8c:	785a      	ldrb	r2, [r3, #1]
   20d8e:	687b      	ldr	r3, [r7, #4]
   20d90:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20d92:	683b      	ldr	r3, [r7, #0]
   20d94:	789a      	ldrb	r2, [r3, #2]
   20d96:	687b      	ldr	r3, [r7, #4]
   20d98:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   20d9a:	230c      	movs	r3, #12
   20d9c:	18fb      	adds	r3, r7, r3
   20d9e:	0018      	movs	r0, r3
   20da0:	4b0b      	ldr	r3, [pc, #44]	; (20dd0 <spi_attach_slave+0x58>)
   20da2:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20da4:	230c      	movs	r3, #12
   20da6:	18fb      	adds	r3, r7, r3
   20da8:	2201      	movs	r2, #1
   20daa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20dac:	687b      	ldr	r3, [r7, #4]
   20dae:	781b      	ldrb	r3, [r3, #0]
   20db0:	220c      	movs	r2, #12
   20db2:	18ba      	adds	r2, r7, r2
   20db4:	0011      	movs	r1, r2
   20db6:	0018      	movs	r0, r3
   20db8:	4b06      	ldr	r3, [pc, #24]	; (20dd4 <spi_attach_slave+0x5c>)
   20dba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20dbc:	687b      	ldr	r3, [r7, #4]
   20dbe:	781b      	ldrb	r3, [r3, #0]
   20dc0:	2101      	movs	r1, #1
   20dc2:	0018      	movs	r0, r3
   20dc4:	4b04      	ldr	r3, [pc, #16]	; (20dd8 <spi_attach_slave+0x60>)
   20dc6:	4798      	blx	r3
}
   20dc8:	46c0      	nop			; (mov r8, r8)
   20dca:	46bd      	mov	sp, r7
   20dcc:	b004      	add	sp, #16
   20dce:	bd80      	pop	{r7, pc}
   20dd0:	00020c39 	.word	0x00020c39
   20dd4:	00027061 	.word	0x00027061
   20dd8:	00020c5d 	.word	0x00020c5d

00020ddc <spi_enable>:
{
   20ddc:	b580      	push	{r7, lr}
   20dde:	b084      	sub	sp, #16
   20de0:	af00      	add	r7, sp, #0
   20de2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20de4:	687b      	ldr	r3, [r7, #4]
   20de6:	681b      	ldr	r3, [r3, #0]
   20de8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20dea:	687b      	ldr	r3, [r7, #4]
   20dec:	681b      	ldr	r3, [r3, #0]
   20dee:	0018      	movs	r0, r3
   20df0:	4b0b      	ldr	r3, [pc, #44]	; (20e20 <spi_enable+0x44>)
   20df2:	4798      	blx	r3
   20df4:	0003      	movs	r3, r0
   20df6:	0018      	movs	r0, r3
   20df8:	4b0a      	ldr	r3, [pc, #40]	; (20e24 <spi_enable+0x48>)
   20dfa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   20dfc:	46c0      	nop			; (mov r8, r8)
   20dfe:	687b      	ldr	r3, [r7, #4]
   20e00:	0018      	movs	r0, r3
   20e02:	4b09      	ldr	r3, [pc, #36]	; (20e28 <spi_enable+0x4c>)
   20e04:	4798      	blx	r3
   20e06:	1e03      	subs	r3, r0, #0
   20e08:	d1f9      	bne.n	20dfe <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20e0a:	68fb      	ldr	r3, [r7, #12]
   20e0c:	681b      	ldr	r3, [r3, #0]
   20e0e:	2202      	movs	r2, #2
   20e10:	431a      	orrs	r2, r3
   20e12:	68fb      	ldr	r3, [r7, #12]
   20e14:	601a      	str	r2, [r3, #0]
}
   20e16:	46c0      	nop			; (mov r8, r8)
   20e18:	46bd      	mov	sp, r7
   20e1a:	b004      	add	sp, #16
   20e1c:	bd80      	pop	{r7, pc}
   20e1e:	46c0      	nop			; (mov r8, r8)
   20e20:	00027d31 	.word	0x00027d31
   20e24:	00020bb9 	.word	0x00020bb9
   20e28:	00020cb1 	.word	0x00020cb1

00020e2c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   20e2c:	b580      	push	{r7, lr}
   20e2e:	b084      	sub	sp, #16
   20e30:	af00      	add	r7, sp, #0
   20e32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20e34:	687b      	ldr	r3, [r7, #4]
   20e36:	681b      	ldr	r3, [r3, #0]
   20e38:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   20e3a:	687b      	ldr	r3, [r7, #4]
   20e3c:	681b      	ldr	r3, [r3, #0]
   20e3e:	0018      	movs	r0, r3
   20e40:	4b0e      	ldr	r3, [pc, #56]	; (20e7c <spi_disable+0x50>)
   20e42:	4798      	blx	r3
   20e44:	0003      	movs	r3, r0
   20e46:	0018      	movs	r0, r3
   20e48:	4b0d      	ldr	r3, [pc, #52]	; (20e80 <spi_disable+0x54>)
   20e4a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20e4c:	46c0      	nop			; (mov r8, r8)
   20e4e:	687b      	ldr	r3, [r7, #4]
   20e50:	0018      	movs	r0, r3
   20e52:	4b0c      	ldr	r3, [pc, #48]	; (20e84 <spi_disable+0x58>)
   20e54:	4798      	blx	r3
   20e56:	1e03      	subs	r3, r0, #0
   20e58:	d1f9      	bne.n	20e4e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   20e5a:	68fb      	ldr	r3, [r7, #12]
   20e5c:	228f      	movs	r2, #143	; 0x8f
   20e5e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20e60:	68fb      	ldr	r3, [r7, #12]
   20e62:	228f      	movs	r2, #143	; 0x8f
   20e64:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20e66:	68fb      	ldr	r3, [r7, #12]
   20e68:	681b      	ldr	r3, [r3, #0]
   20e6a:	2202      	movs	r2, #2
   20e6c:	4393      	bics	r3, r2
   20e6e:	001a      	movs	r2, r3
   20e70:	68fb      	ldr	r3, [r7, #12]
   20e72:	601a      	str	r2, [r3, #0]
}
   20e74:	46c0      	nop			; (mov r8, r8)
   20e76:	46bd      	mov	sp, r7
   20e78:	b004      	add	sp, #16
   20e7a:	bd80      	pop	{r7, pc}
   20e7c:	00027d31 	.word	0x00027d31
   20e80:	00020be5 	.word	0x00020be5
   20e84:	00020cb1 	.word	0x00020cb1

00020e88 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   20e88:	b580      	push	{r7, lr}
   20e8a:	b084      	sub	sp, #16
   20e8c:	af00      	add	r7, sp, #0
   20e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20e90:	687b      	ldr	r3, [r7, #4]
   20e92:	681b      	ldr	r3, [r3, #0]
   20e94:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20e96:	68fb      	ldr	r3, [r7, #12]
   20e98:	7e1b      	ldrb	r3, [r3, #24]
   20e9a:	b2db      	uxtb	r3, r3
   20e9c:	001a      	movs	r2, r3
   20e9e:	2302      	movs	r3, #2
   20ea0:	4013      	ands	r3, r2
   20ea2:	1e5a      	subs	r2, r3, #1
   20ea4:	4193      	sbcs	r3, r2
   20ea6:	b2db      	uxtb	r3, r3
}
   20ea8:	0018      	movs	r0, r3
   20eaa:	46bd      	mov	sp, r7
   20eac:	b004      	add	sp, #16
   20eae:	bd80      	pop	{r7, pc}

00020eb0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20eb0:	b580      	push	{r7, lr}
   20eb2:	b084      	sub	sp, #16
   20eb4:	af00      	add	r7, sp, #0
   20eb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20eb8:	687b      	ldr	r3, [r7, #4]
   20eba:	681b      	ldr	r3, [r3, #0]
   20ebc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   20ebe:	68fb      	ldr	r3, [r7, #12]
   20ec0:	7e1b      	ldrb	r3, [r3, #24]
   20ec2:	b2db      	uxtb	r3, r3
   20ec4:	001a      	movs	r2, r3
   20ec6:	2301      	movs	r3, #1
   20ec8:	4013      	ands	r3, r2
   20eca:	1e5a      	subs	r2, r3, #1
   20ecc:	4193      	sbcs	r3, r2
   20ece:	b2db      	uxtb	r3, r3
}
   20ed0:	0018      	movs	r0, r3
   20ed2:	46bd      	mov	sp, r7
   20ed4:	b004      	add	sp, #16
   20ed6:	bd80      	pop	{r7, pc}

00020ed8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20ed8:	b580      	push	{r7, lr}
   20eda:	b084      	sub	sp, #16
   20edc:	af00      	add	r7, sp, #0
   20ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20ee0:	687b      	ldr	r3, [r7, #4]
   20ee2:	681b      	ldr	r3, [r3, #0]
   20ee4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20ee6:	68fb      	ldr	r3, [r7, #12]
   20ee8:	7e1b      	ldrb	r3, [r3, #24]
   20eea:	b2db      	uxtb	r3, r3
   20eec:	001a      	movs	r2, r3
   20eee:	2304      	movs	r3, #4
   20ef0:	4013      	ands	r3, r2
   20ef2:	1e5a      	subs	r2, r3, #1
   20ef4:	4193      	sbcs	r3, r2
   20ef6:	b2db      	uxtb	r3, r3
}
   20ef8:	0018      	movs	r0, r3
   20efa:	46bd      	mov	sp, r7
   20efc:	b004      	add	sp, #16
   20efe:	bd80      	pop	{r7, pc}

00020f00 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20f00:	b580      	push	{r7, lr}
   20f02:	b084      	sub	sp, #16
   20f04:	af00      	add	r7, sp, #0
   20f06:	6078      	str	r0, [r7, #4]
   20f08:	000a      	movs	r2, r1
   20f0a:	1cbb      	adds	r3, r7, #2
   20f0c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20f0e:	687b      	ldr	r3, [r7, #4]
   20f10:	681b      	ldr	r3, [r3, #0]
   20f12:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20f14:	687b      	ldr	r3, [r7, #4]
   20f16:	0018      	movs	r0, r3
   20f18:	4b0a      	ldr	r3, [pc, #40]	; (20f44 <spi_write+0x44>)
   20f1a:	4798      	blx	r3
   20f1c:	0003      	movs	r3, r0
   20f1e:	001a      	movs	r2, r3
   20f20:	2301      	movs	r3, #1
   20f22:	4053      	eors	r3, r2
   20f24:	b2db      	uxtb	r3, r3
   20f26:	2b00      	cmp	r3, #0
   20f28:	d001      	beq.n	20f2e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   20f2a:	2305      	movs	r3, #5
   20f2c:	e006      	b.n	20f3c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   20f2e:	1cbb      	adds	r3, r7, #2
   20f30:	881b      	ldrh	r3, [r3, #0]
   20f32:	05db      	lsls	r3, r3, #23
   20f34:	0dda      	lsrs	r2, r3, #23
   20f36:	68fb      	ldr	r3, [r7, #12]
   20f38:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   20f3a:	2300      	movs	r3, #0
}
   20f3c:	0018      	movs	r0, r3
   20f3e:	46bd      	mov	sp, r7
   20f40:	b004      	add	sp, #16
   20f42:	bd80      	pop	{r7, pc}
   20f44:	00020eb1 	.word	0x00020eb1

00020f48 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20f48:	b580      	push	{r7, lr}
   20f4a:	b084      	sub	sp, #16
   20f4c:	af00      	add	r7, sp, #0
   20f4e:	6078      	str	r0, [r7, #4]
   20f50:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20f52:	687b      	ldr	r3, [r7, #4]
   20f54:	681b      	ldr	r3, [r3, #0]
   20f56:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20f58:	687b      	ldr	r3, [r7, #4]
   20f5a:	0018      	movs	r0, r3
   20f5c:	4b1b      	ldr	r3, [pc, #108]	; (20fcc <spi_read+0x84>)
   20f5e:	4798      	blx	r3
   20f60:	0003      	movs	r3, r0
   20f62:	001a      	movs	r2, r3
   20f64:	2301      	movs	r3, #1
   20f66:	4053      	eors	r3, r2
   20f68:	b2db      	uxtb	r3, r3
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	d001      	beq.n	20f72 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20f6e:	2310      	movs	r3, #16
   20f70:	e027      	b.n	20fc2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20f72:	230f      	movs	r3, #15
   20f74:	18fb      	adds	r3, r7, r3
   20f76:	2200      	movs	r2, #0
   20f78:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   20f7a:	68bb      	ldr	r3, [r7, #8]
   20f7c:	8b5b      	ldrh	r3, [r3, #26]
   20f7e:	b29b      	uxth	r3, r3
   20f80:	001a      	movs	r2, r3
   20f82:	2304      	movs	r3, #4
   20f84:	4013      	ands	r3, r2
   20f86:	d006      	beq.n	20f96 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20f88:	230f      	movs	r3, #15
   20f8a:	18fb      	adds	r3, r7, r3
   20f8c:	221e      	movs	r2, #30
   20f8e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20f90:	68bb      	ldr	r3, [r7, #8]
   20f92:	2204      	movs	r2, #4
   20f94:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20f96:	687b      	ldr	r3, [r7, #4]
   20f98:	799b      	ldrb	r3, [r3, #6]
   20f9a:	2b01      	cmp	r3, #1
   20f9c:	d108      	bne.n	20fb0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20f9e:	68bb      	ldr	r3, [r7, #8]
   20fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20fa2:	b29b      	uxth	r3, r3
   20fa4:	05db      	lsls	r3, r3, #23
   20fa6:	0ddb      	lsrs	r3, r3, #23
   20fa8:	b29a      	uxth	r2, r3
   20faa:	683b      	ldr	r3, [r7, #0]
   20fac:	801a      	strh	r2, [r3, #0]
   20fae:	e005      	b.n	20fbc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20fb0:	68bb      	ldr	r3, [r7, #8]
   20fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20fb4:	b2db      	uxtb	r3, r3
   20fb6:	b29a      	uxth	r2, r3
   20fb8:	683b      	ldr	r3, [r7, #0]
   20fba:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20fbc:	230f      	movs	r3, #15
   20fbe:	18fb      	adds	r3, r7, r3
   20fc0:	781b      	ldrb	r3, [r3, #0]
}
   20fc2:	0018      	movs	r0, r3
   20fc4:	46bd      	mov	sp, r7
   20fc6:	b004      	add	sp, #16
   20fc8:	bd80      	pop	{r7, pc}
   20fca:	46c0      	nop			; (mov r8, r8)
   20fcc:	00020ed9 	.word	0x00020ed9

00020fd0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20fd0:	b580      	push	{r7, lr}
   20fd2:	b086      	sub	sp, #24
   20fd4:	af00      	add	r7, sp, #0
   20fd6:	60f8      	str	r0, [r7, #12]
   20fd8:	60b9      	str	r1, [r7, #8]
   20fda:	1dbb      	adds	r3, r7, #6
   20fdc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20fde:	2313      	movs	r3, #19
   20fe0:	18fb      	adds	r3, r7, r3
   20fe2:	22ff      	movs	r2, #255	; 0xff
   20fe4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20fe6:	2317      	movs	r3, #23
   20fe8:	18fb      	adds	r3, r7, r3
   20fea:	2200      	movs	r2, #0
   20fec:	701a      	strb	r2, [r3, #0]
   20fee:	2316      	movs	r3, #22
   20ff0:	18fb      	adds	r3, r7, r3
   20ff2:	2200      	movs	r2, #0
   20ff4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20ff6:	2314      	movs	r3, #20
   20ff8:	18fb      	adds	r3, r7, r3
   20ffa:	2200      	movs	r2, #0
   20ffc:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   20ffe:	2310      	movs	r3, #16
   21000:	18fb      	adds	r3, r7, r3
   21002:	2200      	movs	r2, #0
   21004:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   21006:	68bb      	ldr	r3, [r7, #8]
   21008:	2b00      	cmp	r3, #0
   2100a:	d102      	bne.n	21012 <spi_rw+0x42>
   2100c:	68fb      	ldr	r3, [r7, #12]
   2100e:	2b00      	cmp	r3, #0
   21010:	d003      	beq.n	2101a <spi_rw+0x4a>
   21012:	1dbb      	adds	r3, r7, #6
   21014:	881b      	ldrh	r3, [r3, #0]
   21016:	2b00      	cmp	r3, #0
   21018:	d102      	bne.n	21020 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2101a:	230f      	movs	r3, #15
   2101c:	425b      	negs	r3, r3
   2101e:	e07e      	b.n	2111e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   21020:	68fb      	ldr	r3, [r7, #12]
   21022:	2b00      	cmp	r3, #0
   21024:	d106      	bne.n	21034 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   21026:	2313      	movs	r3, #19
   21028:	18fb      	adds	r3, r7, r3
   2102a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2102c:	2317      	movs	r3, #23
   2102e:	18fb      	adds	r3, r7, r3
   21030:	2201      	movs	r2, #1
   21032:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   21034:	68bb      	ldr	r3, [r7, #8]
   21036:	2b00      	cmp	r3, #0
   21038:	d106      	bne.n	21048 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2103a:	2313      	movs	r3, #19
   2103c:	18fb      	adds	r3, r7, r3
   2103e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   21040:	2316      	movs	r3, #22
   21042:	18fb      	adds	r3, r7, r3
   21044:	2201      	movs	r2, #1
   21046:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   21048:	4937      	ldr	r1, [pc, #220]	; (21128 <spi_rw+0x158>)
   2104a:	4b38      	ldr	r3, [pc, #224]	; (2112c <spi_rw+0x15c>)
   2104c:	2201      	movs	r2, #1
   2104e:	0018      	movs	r0, r3
   21050:	4b37      	ldr	r3, [pc, #220]	; (21130 <spi_rw+0x160>)
   21052:	4798      	blx	r3

	while (u16Sz) {
   21054:	e04c      	b.n	210f0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   21056:	68fb      	ldr	r3, [r7, #12]
   21058:	781a      	ldrb	r2, [r3, #0]
   2105a:	2314      	movs	r3, #20
   2105c:	18fb      	adds	r3, r7, r3
   2105e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21060:	46c0      	nop			; (mov r8, r8)
   21062:	4b32      	ldr	r3, [pc, #200]	; (2112c <spi_rw+0x15c>)
   21064:	0018      	movs	r0, r3
   21066:	4b33      	ldr	r3, [pc, #204]	; (21134 <spi_rw+0x164>)
   21068:	4798      	blx	r3
   2106a:	0003      	movs	r3, r0
   2106c:	001a      	movs	r2, r3
   2106e:	2301      	movs	r3, #1
   21070:	4053      	eors	r3, r2
   21072:	b2db      	uxtb	r3, r3
   21074:	2b00      	cmp	r3, #0
   21076:	d1f4      	bne.n	21062 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   21078:	46c0      	nop			; (mov r8, r8)
   2107a:	2314      	movs	r3, #20
   2107c:	18fb      	adds	r3, r7, r3
   2107e:	881a      	ldrh	r2, [r3, #0]
   21080:	4b2a      	ldr	r3, [pc, #168]	; (2112c <spi_rw+0x15c>)
   21082:	0011      	movs	r1, r2
   21084:	0018      	movs	r0, r3
   21086:	4b2c      	ldr	r3, [pc, #176]	; (21138 <spi_rw+0x168>)
   21088:	4798      	blx	r3
   2108a:	1e03      	subs	r3, r0, #0
   2108c:	d1f5      	bne.n	2107a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   2108e:	46c0      	nop			; (mov r8, r8)
   21090:	4b26      	ldr	r3, [pc, #152]	; (2112c <spi_rw+0x15c>)
   21092:	0018      	movs	r0, r3
   21094:	4b29      	ldr	r3, [pc, #164]	; (2113c <spi_rw+0x16c>)
   21096:	4798      	blx	r3
   21098:	0003      	movs	r3, r0
   2109a:	001a      	movs	r2, r3
   2109c:	2301      	movs	r3, #1
   2109e:	4053      	eors	r3, r2
   210a0:	b2db      	uxtb	r3, r3
   210a2:	2b00      	cmp	r3, #0
   210a4:	d1f4      	bne.n	21090 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   210a6:	46c0      	nop			; (mov r8, r8)
   210a8:	2310      	movs	r3, #16
   210aa:	18fa      	adds	r2, r7, r3
   210ac:	4b1f      	ldr	r3, [pc, #124]	; (2112c <spi_rw+0x15c>)
   210ae:	0011      	movs	r1, r2
   210b0:	0018      	movs	r0, r3
   210b2:	4b23      	ldr	r3, [pc, #140]	; (21140 <spi_rw+0x170>)
   210b4:	4798      	blx	r3
   210b6:	1e03      	subs	r3, r0, #0
   210b8:	d1f6      	bne.n	210a8 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   210ba:	2310      	movs	r3, #16
   210bc:	18fb      	adds	r3, r7, r3
   210be:	881b      	ldrh	r3, [r3, #0]
   210c0:	b2da      	uxtb	r2, r3
   210c2:	68bb      	ldr	r3, [r7, #8]
   210c4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   210c6:	1dbb      	adds	r3, r7, #6
   210c8:	881a      	ldrh	r2, [r3, #0]
   210ca:	1dbb      	adds	r3, r7, #6
   210cc:	3a01      	subs	r2, #1
   210ce:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   210d0:	2316      	movs	r3, #22
   210d2:	18fb      	adds	r3, r7, r3
   210d4:	781b      	ldrb	r3, [r3, #0]
   210d6:	2b00      	cmp	r3, #0
   210d8:	d102      	bne.n	210e0 <spi_rw+0x110>
			pu8Miso++;
   210da:	68bb      	ldr	r3, [r7, #8]
   210dc:	3301      	adds	r3, #1
   210de:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   210e0:	2317      	movs	r3, #23
   210e2:	18fb      	adds	r3, r7, r3
   210e4:	781b      	ldrb	r3, [r3, #0]
   210e6:	2b00      	cmp	r3, #0
   210e8:	d102      	bne.n	210f0 <spi_rw+0x120>
			pu8Mosi++;
   210ea:	68fb      	ldr	r3, [r7, #12]
   210ec:	3301      	adds	r3, #1
   210ee:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   210f0:	1dbb      	adds	r3, r7, #6
   210f2:	881b      	ldrh	r3, [r3, #0]
   210f4:	2b00      	cmp	r3, #0
   210f6:	d1ae      	bne.n	21056 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   210f8:	46c0      	nop			; (mov r8, r8)
   210fa:	4b0c      	ldr	r3, [pc, #48]	; (2112c <spi_rw+0x15c>)
   210fc:	0018      	movs	r0, r3
   210fe:	4b11      	ldr	r3, [pc, #68]	; (21144 <spi_rw+0x174>)
   21100:	4798      	blx	r3
   21102:	0003      	movs	r3, r0
   21104:	001a      	movs	r2, r3
   21106:	2301      	movs	r3, #1
   21108:	4053      	eors	r3, r2
   2110a:	b2db      	uxtb	r3, r3
   2110c:	2b00      	cmp	r3, #0
   2110e:	d1f4      	bne.n	210fa <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   21110:	4905      	ldr	r1, [pc, #20]	; (21128 <spi_rw+0x158>)
   21112:	4b06      	ldr	r3, [pc, #24]	; (2112c <spi_rw+0x15c>)
   21114:	2200      	movs	r2, #0
   21116:	0018      	movs	r0, r3
   21118:	4b05      	ldr	r3, [pc, #20]	; (21130 <spi_rw+0x160>)
   2111a:	4798      	blx	r3

	return M2M_SUCCESS;
   2111c:	2300      	movs	r3, #0
}
   2111e:	0018      	movs	r0, r3
   21120:	46bd      	mov	sp, r7
   21122:	b006      	add	sp, #24
   21124:	bd80      	pop	{r7, pc}
   21126:	46c0      	nop			; (mov r8, r8)
   21128:	20005c5c 	.word	0x20005c5c
   2112c:	20005c60 	.word	0x20005c60
   21130:	000287a5 	.word	0x000287a5
   21134:	00020eb1 	.word	0x00020eb1
   21138:	00020f01 	.word	0x00020f01
   2113c:	00020ed9 	.word	0x00020ed9
   21140:	00020f49 	.word	0x00020f49
   21144:	00020e89 	.word	0x00020e89

00021148 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   21148:	b580      	push	{r7, lr}
   2114a:	b092      	sub	sp, #72	; 0x48
   2114c:	af00      	add	r7, sp, #0
   2114e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   21150:	2347      	movs	r3, #71	; 0x47
   21152:	18fb      	adds	r3, r7, r3
   21154:	2200      	movs	r2, #0
   21156:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   21158:	2308      	movs	r3, #8
   2115a:	18fb      	adds	r3, r7, r3
   2115c:	0018      	movs	r0, r3
   2115e:	4b26      	ldr	r3, [pc, #152]	; (211f8 <nm_bus_init+0xb0>)
   21160:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   21162:	2308      	movs	r3, #8
   21164:	18fb      	adds	r3, r7, r3
   21166:	220e      	movs	r2, #14
   21168:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2116a:	2308      	movs	r3, #8
   2116c:	18fa      	adds	r2, r7, r3
   2116e:	4b23      	ldr	r3, [pc, #140]	; (211fc <nm_bus_init+0xb4>)
   21170:	0011      	movs	r1, r2
   21172:	0018      	movs	r0, r3
   21174:	4b22      	ldr	r3, [pc, #136]	; (21200 <nm_bus_init+0xb8>)
   21176:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   21178:	230c      	movs	r3, #12
   2117a:	18fb      	adds	r3, r7, r3
   2117c:	0018      	movs	r0, r3
   2117e:	4b21      	ldr	r3, [pc, #132]	; (21204 <nm_bus_init+0xbc>)
   21180:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21182:	230c      	movs	r3, #12
   21184:	18fb      	adds	r3, r7, r3
   21186:	22c0      	movs	r2, #192	; 0xc0
   21188:	0392      	lsls	r2, r2, #14
   2118a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   2118c:	230c      	movs	r3, #12
   2118e:	18fb      	adds	r3, r7, r3
   21190:	4a1d      	ldr	r2, [pc, #116]	; (21208 <nm_bus_init+0xc0>)
   21192:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   21194:	230c      	movs	r3, #12
   21196:	18fb      	adds	r3, r7, r3
   21198:	4a1c      	ldr	r2, [pc, #112]	; (2120c <nm_bus_init+0xc4>)
   2119a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2119c:	230c      	movs	r3, #12
   2119e:	18fb      	adds	r3, r7, r3
   211a0:	2201      	movs	r2, #1
   211a2:	4252      	negs	r2, r2
   211a4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   211a6:	230c      	movs	r3, #12
   211a8:	18fb      	adds	r3, r7, r3
   211aa:	4a19      	ldr	r2, [pc, #100]	; (21210 <nm_bus_init+0xc8>)
   211ac:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   211ae:	230c      	movs	r3, #12
   211b0:	18fb      	adds	r3, r7, r3
   211b2:	2200      	movs	r2, #0
   211b4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   211b6:	230c      	movs	r3, #12
   211b8:	18fb      	adds	r3, r7, r3
   211ba:	4a16      	ldr	r2, [pc, #88]	; (21214 <nm_bus_init+0xcc>)
   211bc:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   211be:	230c      	movs	r3, #12
   211c0:	18fa      	adds	r2, r7, r3
   211c2:	4915      	ldr	r1, [pc, #84]	; (21218 <nm_bus_init+0xd0>)
   211c4:	4b15      	ldr	r3, [pc, #84]	; (2121c <nm_bus_init+0xd4>)
   211c6:	0018      	movs	r0, r3
   211c8:	4b15      	ldr	r3, [pc, #84]	; (21220 <nm_bus_init+0xd8>)
   211ca:	4798      	blx	r3
   211cc:	1e03      	subs	r3, r0, #0
   211ce:	d002      	beq.n	211d6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   211d0:	2306      	movs	r3, #6
   211d2:	425b      	negs	r3, r3
   211d4:	e00c      	b.n	211f0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   211d6:	4b11      	ldr	r3, [pc, #68]	; (2121c <nm_bus_init+0xd4>)
   211d8:	0018      	movs	r0, r3
   211da:	4b12      	ldr	r3, [pc, #72]	; (21224 <nm_bus_init+0xdc>)
   211dc:	4798      	blx	r3

	nm_bsp_reset();
   211de:	4b12      	ldr	r3, [pc, #72]	; (21228 <nm_bus_init+0xe0>)
   211e0:	4798      	blx	r3
	nm_bsp_sleep(1);
   211e2:	2001      	movs	r0, #1
   211e4:	4b11      	ldr	r3, [pc, #68]	; (2122c <nm_bus_init+0xe4>)
   211e6:	4798      	blx	r3
#endif
	return result;
   211e8:	2347      	movs	r3, #71	; 0x47
   211ea:	18fb      	adds	r3, r7, r3
   211ec:	781b      	ldrb	r3, [r3, #0]
   211ee:	b25b      	sxtb	r3, r3
}
   211f0:	0018      	movs	r0, r3
   211f2:	46bd      	mov	sp, r7
   211f4:	b012      	add	sp, #72	; 0x48
   211f6:	bd80      	pop	{r7, pc}
   211f8:	00020d55 	.word	0x00020d55
   211fc:	20005c5c 	.word	0x20005c5c
   21200:	00020d79 	.word	0x00020d79
   21204:	00020cd1 	.word	0x00020cd1
   21208:	000c0002 	.word	0x000c0002
   2120c:	000d0002 	.word	0x000d0002
   21210:	000f0002 	.word	0x000f0002
   21214:	00124f80 	.word	0x00124f80
   21218:	42001000 	.word	0x42001000
   2121c:	20005c60 	.word	0x20005c60
   21220:	000284e1 	.word	0x000284e1
   21224:	00020ddd 	.word	0x00020ddd
   21228:	00020a4d 	.word	0x00020a4d
   2122c:	00020a8d 	.word	0x00020a8d

00021230 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21230:	b590      	push	{r4, r7, lr}
   21232:	b085      	sub	sp, #20
   21234:	af00      	add	r7, sp, #0
   21236:	0002      	movs	r2, r0
   21238:	6039      	str	r1, [r7, #0]
   2123a:	1dfb      	adds	r3, r7, #7
   2123c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   2123e:	230f      	movs	r3, #15
   21240:	18fb      	adds	r3, r7, r3
   21242:	2200      	movs	r2, #0
   21244:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   21246:	1dfb      	adds	r3, r7, #7
   21248:	781b      	ldrb	r3, [r3, #0]
   2124a:	2b03      	cmp	r3, #3
   2124c:	d10f      	bne.n	2126e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   2124e:	683b      	ldr	r3, [r7, #0]
   21250:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21252:	68bb      	ldr	r3, [r7, #8]
   21254:	6818      	ldr	r0, [r3, #0]
   21256:	68bb      	ldr	r3, [r7, #8]
   21258:	6859      	ldr	r1, [r3, #4]
   2125a:	68bb      	ldr	r3, [r7, #8]
   2125c:	891b      	ldrh	r3, [r3, #8]
   2125e:	220f      	movs	r2, #15
   21260:	18bc      	adds	r4, r7, r2
   21262:	001a      	movs	r2, r3
   21264:	4b10      	ldr	r3, [pc, #64]	; (212a8 <nm_bus_ioctl+0x78>)
   21266:	4798      	blx	r3
   21268:	0003      	movs	r3, r0
   2126a:	7023      	strb	r3, [r4, #0]
		}
		break;
   2126c:	e013      	b.n	21296 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   2126e:	230f      	movs	r3, #15
   21270:	18fb      	adds	r3, r7, r3
   21272:	22ff      	movs	r2, #255	; 0xff
   21274:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   21276:	2383      	movs	r3, #131	; 0x83
   21278:	005a      	lsls	r2, r3, #1
   2127a:	490c      	ldr	r1, [pc, #48]	; (212ac <nm_bus_ioctl+0x7c>)
   2127c:	4b0c      	ldr	r3, [pc, #48]	; (212b0 <nm_bus_ioctl+0x80>)
   2127e:	0018      	movs	r0, r3
   21280:	4b0c      	ldr	r3, [pc, #48]	; (212b4 <nm_bus_ioctl+0x84>)
   21282:	4798      	blx	r3
   21284:	4b0c      	ldr	r3, [pc, #48]	; (212b8 <nm_bus_ioctl+0x88>)
   21286:	0018      	movs	r0, r3
   21288:	4b0a      	ldr	r3, [pc, #40]	; (212b4 <nm_bus_ioctl+0x84>)
   2128a:	4798      	blx	r3
   2128c:	4b0b      	ldr	r3, [pc, #44]	; (212bc <nm_bus_ioctl+0x8c>)
   2128e:	0018      	movs	r0, r3
   21290:	4b08      	ldr	r3, [pc, #32]	; (212b4 <nm_bus_ioctl+0x84>)
   21292:	4798      	blx	r3
			break;
   21294:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   21296:	230f      	movs	r3, #15
   21298:	18fb      	adds	r3, r7, r3
   2129a:	781b      	ldrb	r3, [r3, #0]
   2129c:	b25b      	sxtb	r3, r3
}
   2129e:	0018      	movs	r0, r3
   212a0:	46bd      	mov	sp, r7
   212a2:	b005      	add	sp, #20
   212a4:	bd90      	pop	{r4, r7, pc}
   212a6:	46c0      	nop			; (mov r8, r8)
   212a8:	00020fd1 	.word	0x00020fd1
   212ac:	0003ab10 	.word	0x0003ab10
   212b0:	0003aae4 	.word	0x0003aae4
   212b4:	0001e639 	.word	0x0001e639
   212b8:	0003aaf8 	.word	0x0003aaf8
   212bc:	0003ab0c 	.word	0x0003ab0c

000212c0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   212c0:	b580      	push	{r7, lr}
   212c2:	b082      	sub	sp, #8
   212c4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   212c6:	1dfb      	adds	r3, r7, #7
   212c8:	2200      	movs	r2, #0
   212ca:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   212cc:	1d3b      	adds	r3, r7, #4
   212ce:	0018      	movs	r0, r3
   212d0:	4b13      	ldr	r3, [pc, #76]	; (21320 <nm_bus_deinit+0x60>)
   212d2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   212d4:	1d3b      	adds	r3, r7, #4
   212d6:	2200      	movs	r2, #0
   212d8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   212da:	1d3b      	adds	r3, r7, #4
   212dc:	2200      	movs	r2, #0
   212de:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   212e0:	4b10      	ldr	r3, [pc, #64]	; (21324 <nm_bus_deinit+0x64>)
   212e2:	0018      	movs	r0, r3
   212e4:	4b10      	ldr	r3, [pc, #64]	; (21328 <nm_bus_deinit+0x68>)
   212e6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   212e8:	1d3b      	adds	r3, r7, #4
   212ea:	0019      	movs	r1, r3
   212ec:	200c      	movs	r0, #12
   212ee:	4b0f      	ldr	r3, [pc, #60]	; (2132c <nm_bus_deinit+0x6c>)
   212f0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   212f2:	1d3b      	adds	r3, r7, #4
   212f4:	0019      	movs	r1, r3
   212f6:	200f      	movs	r0, #15
   212f8:	4b0c      	ldr	r3, [pc, #48]	; (2132c <nm_bus_deinit+0x6c>)
   212fa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   212fc:	1d3b      	adds	r3, r7, #4
   212fe:	0019      	movs	r1, r3
   21300:	200d      	movs	r0, #13
   21302:	4b0a      	ldr	r3, [pc, #40]	; (2132c <nm_bus_deinit+0x6c>)
   21304:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   21306:	1d3b      	adds	r3, r7, #4
   21308:	0019      	movs	r1, r3
   2130a:	200e      	movs	r0, #14
   2130c:	4b07      	ldr	r3, [pc, #28]	; (2132c <nm_bus_deinit+0x6c>)
   2130e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21310:	1dfb      	adds	r3, r7, #7
   21312:	781b      	ldrb	r3, [r3, #0]
   21314:	b25b      	sxtb	r3, r3
}
   21316:	0018      	movs	r0, r3
   21318:	46bd      	mov	sp, r7
   2131a:	b002      	add	sp, #8
   2131c:	bd80      	pop	{r7, pc}
   2131e:	46c0      	nop			; (mov r8, r8)
   21320:	00020c39 	.word	0x00020c39
   21324:	20005c60 	.word	0x20005c60
   21328:	00020e2d 	.word	0x00020e2d
   2132c:	00027061 	.word	0x00027061

00021330 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21330:	b580      	push	{r7, lr}
   21332:	b084      	sub	sp, #16
   21334:	af00      	add	r7, sp, #0
   21336:	60f8      	str	r0, [r7, #12]
   21338:	60b9      	str	r1, [r7, #8]
   2133a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	2b00      	cmp	r3, #0
   21340:	d010      	beq.n	21364 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21342:	68bb      	ldr	r3, [r7, #8]
   21344:	781a      	ldrb	r2, [r3, #0]
   21346:	68fb      	ldr	r3, [r7, #12]
   21348:	701a      	strb	r2, [r3, #0]
		pDst++;
   2134a:	68fb      	ldr	r3, [r7, #12]
   2134c:	3301      	adds	r3, #1
   2134e:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21350:	68bb      	ldr	r3, [r7, #8]
   21352:	3301      	adds	r3, #1
   21354:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   21356:	687b      	ldr	r3, [r7, #4]
   21358:	3b01      	subs	r3, #1
   2135a:	607b      	str	r3, [r7, #4]
   2135c:	687b      	ldr	r3, [r7, #4]
   2135e:	2b00      	cmp	r3, #0
   21360:	d1ef      	bne.n	21342 <m2m_memcpy+0x12>
   21362:	e000      	b.n	21366 <m2m_memcpy+0x36>
	if(sz == 0) return;
   21364:	46c0      	nop			; (mov r8, r8)
}
   21366:	46bd      	mov	sp, r7
   21368:	b004      	add	sp, #16
   2136a:	bd80      	pop	{r7, pc}

0002136c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   2136c:	b580      	push	{r7, lr}
   2136e:	b084      	sub	sp, #16
   21370:	af00      	add	r7, sp, #0
   21372:	60f8      	str	r0, [r7, #12]
   21374:	607a      	str	r2, [r7, #4]
   21376:	230b      	movs	r3, #11
   21378:	18fb      	adds	r3, r7, r3
   2137a:	1c0a      	adds	r2, r1, #0
   2137c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   2137e:	687b      	ldr	r3, [r7, #4]
   21380:	2b00      	cmp	r3, #0
   21382:	d00e      	beq.n	213a2 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21384:	68fb      	ldr	r3, [r7, #12]
   21386:	220b      	movs	r2, #11
   21388:	18ba      	adds	r2, r7, r2
   2138a:	7812      	ldrb	r2, [r2, #0]
   2138c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2138e:	68fb      	ldr	r3, [r7, #12]
   21390:	3301      	adds	r3, #1
   21392:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21394:	687b      	ldr	r3, [r7, #4]
   21396:	3b01      	subs	r3, #1
   21398:	607b      	str	r3, [r7, #4]
   2139a:	687b      	ldr	r3, [r7, #4]
   2139c:	2b00      	cmp	r3, #0
   2139e:	d1f1      	bne.n	21384 <m2m_memset+0x18>
   213a0:	e000      	b.n	213a4 <m2m_memset+0x38>
	if(sz == 0) return;
   213a2:	46c0      	nop			; (mov r8, r8)
}
   213a4:	46bd      	mov	sp, r7
   213a6:	b004      	add	sp, #16
   213a8:	bd80      	pop	{r7, pc}

000213aa <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   213aa:	b580      	push	{r7, lr}
   213ac:	b084      	sub	sp, #16
   213ae:	af00      	add	r7, sp, #0
   213b0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   213b2:	230e      	movs	r3, #14
   213b4:	18fb      	adds	r3, r7, r3
   213b6:	2200      	movs	r2, #0
   213b8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   213ba:	e009      	b.n	213d0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   213bc:	230e      	movs	r3, #14
   213be:	18fb      	adds	r3, r7, r3
   213c0:	881a      	ldrh	r2, [r3, #0]
   213c2:	230e      	movs	r3, #14
   213c4:	18fb      	adds	r3, r7, r3
   213c6:	3201      	adds	r2, #1
   213c8:	801a      	strh	r2, [r3, #0]
		pcStr++;
   213ca:	687b      	ldr	r3, [r7, #4]
   213cc:	3301      	adds	r3, #1
   213ce:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   213d0:	687b      	ldr	r3, [r7, #4]
   213d2:	781b      	ldrb	r3, [r3, #0]
   213d4:	2b00      	cmp	r3, #0
   213d6:	d1f1      	bne.n	213bc <m2m_strlen+0x12>
	}
	return u16StrLen;
   213d8:	230e      	movs	r3, #14
   213da:	18fb      	adds	r3, r7, r3
   213dc:	881b      	ldrh	r3, [r3, #0]
}
   213de:	0018      	movs	r0, r3
   213e0:	46bd      	mov	sp, r7
   213e2:	b004      	add	sp, #16
   213e4:	bd80      	pop	{r7, pc}
	...

000213e8 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   213e8:	b580      	push	{r7, lr}
   213ea:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   213ec:	4b04      	ldr	r3, [pc, #16]	; (21400 <isr+0x18>)
   213ee:	78db      	ldrb	r3, [r3, #3]
   213f0:	b2db      	uxtb	r3, r3
   213f2:	3301      	adds	r3, #1
   213f4:	b2da      	uxtb	r2, r3
   213f6:	4b02      	ldr	r3, [pc, #8]	; (21400 <isr+0x18>)
   213f8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   213fa:	46c0      	nop			; (mov r8, r8)
   213fc:	46bd      	mov	sp, r7
   213fe:	bd80      	pop	{r7, pc}
   21400:	20005c9c 	.word	0x20005c9c

00021404 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21404:	b590      	push	{r4, r7, lr}
   21406:	b083      	sub	sp, #12
   21408:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2140a:	1dfb      	adds	r3, r7, #7
   2140c:	2200      	movs	r2, #0
   2140e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21410:	4b14      	ldr	r3, [pc, #80]	; (21464 <hif_set_rx_done+0x60>)
   21412:	2200      	movs	r2, #0
   21414:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   21416:	2001      	movs	r0, #1
   21418:	4b13      	ldr	r3, [pc, #76]	; (21468 <hif_set_rx_done+0x64>)
   2141a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   2141c:	1dfc      	adds	r4, r7, #7
   2141e:	003b      	movs	r3, r7
   21420:	4a12      	ldr	r2, [pc, #72]	; (2146c <hif_set_rx_done+0x68>)
   21422:	0019      	movs	r1, r3
   21424:	0010      	movs	r0, r2
   21426:	4b12      	ldr	r3, [pc, #72]	; (21470 <hif_set_rx_done+0x6c>)
   21428:	4798      	blx	r3
   2142a:	0003      	movs	r3, r0
   2142c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2142e:	1dfb      	adds	r3, r7, #7
   21430:	781b      	ldrb	r3, [r3, #0]
   21432:	b25b      	sxtb	r3, r3
   21434:	2b00      	cmp	r3, #0
   21436:	d10d      	bne.n	21454 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   21438:	683b      	ldr	r3, [r7, #0]
   2143a:	2202      	movs	r2, #2
   2143c:	4313      	orrs	r3, r2
   2143e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21440:	683b      	ldr	r3, [r7, #0]
   21442:	1dfc      	adds	r4, r7, #7
   21444:	4a09      	ldr	r2, [pc, #36]	; (2146c <hif_set_rx_done+0x68>)
   21446:	0019      	movs	r1, r3
   21448:	0010      	movs	r0, r2
   2144a:	4b0a      	ldr	r3, [pc, #40]	; (21474 <hif_set_rx_done+0x70>)
   2144c:	4798      	blx	r3
   2144e:	0003      	movs	r3, r0
   21450:	7023      	strb	r3, [r4, #0]
   21452:	e000      	b.n	21456 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21454:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   21456:	1dfb      	adds	r3, r7, #7
   21458:	781b      	ldrb	r3, [r3, #0]
   2145a:	b25b      	sxtb	r3, r3

}
   2145c:	0018      	movs	r0, r3
   2145e:	46bd      	mov	sp, r7
   21460:	b003      	add	sp, #12
   21462:	bd90      	pop	{r4, r7, pc}
   21464:	20005c9c 	.word	0x20005c9c
   21468:	00020b21 	.word	0x00020b21
   2146c:	00001070 	.word	0x00001070
   21470:	00023325 	.word	0x00023325
   21474:	00023349 	.word	0x00023349

00021478 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21478:	b580      	push	{r7, lr}
   2147a:	b082      	sub	sp, #8
   2147c:	af00      	add	r7, sp, #0
   2147e:	603a      	str	r2, [r7, #0]
   21480:	1dfb      	adds	r3, r7, #7
   21482:	1c02      	adds	r2, r0, #0
   21484:	701a      	strb	r2, [r3, #0]
   21486:	1d3b      	adds	r3, r7, #4
   21488:	1c0a      	adds	r2, r1, #0
   2148a:	801a      	strh	r2, [r3, #0]


}
   2148c:	46c0      	nop			; (mov r8, r8)
   2148e:	46bd      	mov	sp, r7
   21490:	b002      	add	sp, #8
   21492:	bd80      	pop	{r7, pc}

00021494 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21494:	b590      	push	{r4, r7, lr}
   21496:	b083      	sub	sp, #12
   21498:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2149a:	1dfb      	adds	r3, r7, #7
   2149c:	2200      	movs	r2, #0
   2149e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   214a0:	4b16      	ldr	r3, [pc, #88]	; (214fc <hif_chip_wake+0x68>)
   214a2:	789b      	ldrb	r3, [r3, #2]
   214a4:	b2db      	uxtb	r3, r3
   214a6:	2b00      	cmp	r3, #0
   214a8:	d003      	beq.n	214b2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   214aa:	1dfb      	adds	r3, r7, #7
   214ac:	781b      	ldrb	r3, [r3, #0]
   214ae:	b25b      	sxtb	r3, r3
   214b0:	e01f      	b.n	214f2 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   214b2:	4b12      	ldr	r3, [pc, #72]	; (214fc <hif_chip_wake+0x68>)
   214b4:	785b      	ldrb	r3, [r3, #1]
   214b6:	b2db      	uxtb	r3, r3
   214b8:	2b00      	cmp	r3, #0
   214ba:	d10e      	bne.n	214da <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   214bc:	4b0f      	ldr	r3, [pc, #60]	; (214fc <hif_chip_wake+0x68>)
   214be:	781b      	ldrb	r3, [r3, #0]
   214c0:	b2db      	uxtb	r3, r3
   214c2:	2b00      	cmp	r3, #0
   214c4:	d009      	beq.n	214da <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   214c6:	1dfc      	adds	r4, r7, #7
   214c8:	4b0d      	ldr	r3, [pc, #52]	; (21500 <hif_chip_wake+0x6c>)
   214ca:	4798      	blx	r3
   214cc:	0003      	movs	r3, r0
   214ce:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   214d0:	1dfb      	adds	r3, r7, #7
   214d2:	781b      	ldrb	r3, [r3, #0]
   214d4:	b25b      	sxtb	r3, r3
   214d6:	2b00      	cmp	r3, #0
   214d8:	d107      	bne.n	214ea <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   214da:	4b08      	ldr	r3, [pc, #32]	; (214fc <hif_chip_wake+0x68>)
   214dc:	785b      	ldrb	r3, [r3, #1]
   214de:	b2db      	uxtb	r3, r3
   214e0:	3301      	adds	r3, #1
   214e2:	b2da      	uxtb	r2, r3
   214e4:	4b05      	ldr	r3, [pc, #20]	; (214fc <hif_chip_wake+0x68>)
   214e6:	705a      	strb	r2, [r3, #1]
   214e8:	e000      	b.n	214ec <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   214ea:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   214ec:	1dfb      	adds	r3, r7, #7
   214ee:	781b      	ldrb	r3, [r3, #0]
   214f0:	b25b      	sxtb	r3, r3
}
   214f2:	0018      	movs	r0, r3
   214f4:	46bd      	mov	sp, r7
   214f6:	b003      	add	sp, #12
   214f8:	bd90      	pop	{r4, r7, pc}
   214fa:	46c0      	nop			; (mov r8, r8)
   214fc:	20005c9c 	.word	0x20005c9c
   21500:	00022df5 	.word	0x00022df5

00021504 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21504:	b580      	push	{r7, lr}
   21506:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21508:	4b07      	ldr	r3, [pc, #28]	; (21528 <hif_chip_sleep_sc+0x24>)
   2150a:	785b      	ldrb	r3, [r3, #1]
   2150c:	b2db      	uxtb	r3, r3
   2150e:	2b00      	cmp	r3, #0
   21510:	d006      	beq.n	21520 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21512:	4b05      	ldr	r3, [pc, #20]	; (21528 <hif_chip_sleep_sc+0x24>)
   21514:	785b      	ldrb	r3, [r3, #1]
   21516:	b2db      	uxtb	r3, r3
   21518:	3b01      	subs	r3, #1
   2151a:	b2da      	uxtb	r2, r3
   2151c:	4b02      	ldr	r3, [pc, #8]	; (21528 <hif_chip_sleep_sc+0x24>)
   2151e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21520:	2300      	movs	r3, #0
}
   21522:	0018      	movs	r0, r3
   21524:	46bd      	mov	sp, r7
   21526:	bd80      	pop	{r7, pc}
   21528:	20005c9c 	.word	0x20005c9c

0002152c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   2152c:	b590      	push	{r4, r7, lr}
   2152e:	b083      	sub	sp, #12
   21530:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21532:	1dfb      	adds	r3, r7, #7
   21534:	2200      	movs	r2, #0
   21536:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21538:	4b10      	ldr	r3, [pc, #64]	; (2157c <hif_chip_sleep+0x50>)
   2153a:	785b      	ldrb	r3, [r3, #1]
   2153c:	b2db      	uxtb	r3, r3
   2153e:	2b00      	cmp	r3, #0
   21540:	d006      	beq.n	21550 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21542:	4b0e      	ldr	r3, [pc, #56]	; (2157c <hif_chip_sleep+0x50>)
   21544:	785b      	ldrb	r3, [r3, #1]
   21546:	b2db      	uxtb	r3, r3
   21548:	3b01      	subs	r3, #1
   2154a:	b2da      	uxtb	r2, r3
   2154c:	4b0b      	ldr	r3, [pc, #44]	; (2157c <hif_chip_sleep+0x50>)
   2154e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21550:	4b0a      	ldr	r3, [pc, #40]	; (2157c <hif_chip_sleep+0x50>)
   21552:	785b      	ldrb	r3, [r3, #1]
   21554:	b2db      	uxtb	r3, r3
   21556:	2b00      	cmp	r3, #0
   21558:	d109      	bne.n	2156e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2155a:	4b08      	ldr	r3, [pc, #32]	; (2157c <hif_chip_sleep+0x50>)
   2155c:	781b      	ldrb	r3, [r3, #0]
   2155e:	b2db      	uxtb	r3, r3
   21560:	2b00      	cmp	r3, #0
   21562:	d004      	beq.n	2156e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21564:	1dfc      	adds	r4, r7, #7
   21566:	4b06      	ldr	r3, [pc, #24]	; (21580 <hif_chip_sleep+0x54>)
   21568:	4798      	blx	r3
   2156a:	0003      	movs	r3, r0
   2156c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   2156e:	1dfb      	adds	r3, r7, #7
   21570:	781b      	ldrb	r3, [r3, #0]
   21572:	b25b      	sxtb	r3, r3
}
   21574:	0018      	movs	r0, r3
   21576:	46bd      	mov	sp, r7
   21578:	b003      	add	sp, #12
   2157a:	bd90      	pop	{r4, r7, pc}
   2157c:	20005c9c 	.word	0x20005c9c
   21580:	00022d1d 	.word	0x00022d1d

00021584 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21584:	b580      	push	{r7, lr}
   21586:	b082      	sub	sp, #8
   21588:	af00      	add	r7, sp, #0
   2158a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   2158c:	4b09      	ldr	r3, [pc, #36]	; (215b4 <hif_init+0x30>)
   2158e:	222c      	movs	r2, #44	; 0x2c
   21590:	2100      	movs	r1, #0
   21592:	0018      	movs	r0, r3
   21594:	4b08      	ldr	r3, [pc, #32]	; (215b8 <hif_init+0x34>)
   21596:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21598:	4b08      	ldr	r3, [pc, #32]	; (215bc <hif_init+0x38>)
   2159a:	0018      	movs	r0, r3
   2159c:	4b08      	ldr	r3, [pc, #32]	; (215c0 <hif_init+0x3c>)
   2159e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   215a0:	4b08      	ldr	r3, [pc, #32]	; (215c4 <hif_init+0x40>)
   215a2:	0019      	movs	r1, r3
   215a4:	2003      	movs	r0, #3
   215a6:	4b08      	ldr	r3, [pc, #32]	; (215c8 <hif_init+0x44>)
   215a8:	4798      	blx	r3
	return M2M_SUCCESS;
   215aa:	2300      	movs	r3, #0
}
   215ac:	0018      	movs	r0, r3
   215ae:	46bd      	mov	sp, r7
   215b0:	b002      	add	sp, #8
   215b2:	bd80      	pop	{r7, pc}
   215b4:	20005c9c 	.word	0x20005c9c
   215b8:	0002136d 	.word	0x0002136d
   215bc:	000213e9 	.word	0x000213e9
   215c0:	00020aa9 	.word	0x00020aa9
   215c4:	00021479 	.word	0x00021479
   215c8:	00022069 	.word	0x00022069

000215cc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   215cc:	b590      	push	{r4, r7, lr}
   215ce:	b089      	sub	sp, #36	; 0x24
   215d0:	af00      	add	r7, sp, #0
   215d2:	0004      	movs	r4, r0
   215d4:	0008      	movs	r0, r1
   215d6:	603a      	str	r2, [r7, #0]
   215d8:	0019      	movs	r1, r3
   215da:	1dfb      	adds	r3, r7, #7
   215dc:	1c22      	adds	r2, r4, #0
   215de:	701a      	strb	r2, [r3, #0]
   215e0:	1dbb      	adds	r3, r7, #6
   215e2:	1c02      	adds	r2, r0, #0
   215e4:	701a      	strb	r2, [r3, #0]
   215e6:	1d3b      	adds	r3, r7, #4
   215e8:	1c0a      	adds	r2, r1, #0
   215ea:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   215ec:	231f      	movs	r3, #31
   215ee:	18fb      	adds	r3, r7, r3
   215f0:	22ff      	movs	r2, #255	; 0xff
   215f2:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   215f4:	1dbb      	adds	r3, r7, #6
   215f6:	781b      	ldrb	r3, [r3, #0]
   215f8:	227f      	movs	r2, #127	; 0x7f
   215fa:	4013      	ands	r3, r2
   215fc:	b2da      	uxtb	r2, r3
   215fe:	2318      	movs	r3, #24
   21600:	18fb      	adds	r3, r7, r3
   21602:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21604:	2318      	movs	r3, #24
   21606:	18fb      	adds	r3, r7, r3
   21608:	1dfa      	adds	r2, r7, #7
   2160a:	7812      	ldrb	r2, [r2, #0]
   2160c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2160e:	2318      	movs	r3, #24
   21610:	18fb      	adds	r3, r7, r3
   21612:	2208      	movs	r2, #8
   21614:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21618:	2b00      	cmp	r3, #0
   2161a:	d011      	beq.n	21640 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   2161c:	2318      	movs	r3, #24
   2161e:	18fb      	adds	r3, r7, r3
   21620:	885b      	ldrh	r3, [r3, #2]
   21622:	b29a      	uxth	r2, r3
   21624:	2338      	movs	r3, #56	; 0x38
   21626:	18f9      	adds	r1, r7, r3
   21628:	2334      	movs	r3, #52	; 0x34
   2162a:	18fb      	adds	r3, r7, r3
   2162c:	8809      	ldrh	r1, [r1, #0]
   2162e:	881b      	ldrh	r3, [r3, #0]
   21630:	18cb      	adds	r3, r1, r3
   21632:	b29b      	uxth	r3, r3
   21634:	18d3      	adds	r3, r2, r3
   21636:	b29a      	uxth	r2, r3
   21638:	2318      	movs	r3, #24
   2163a:	18fb      	adds	r3, r7, r3
   2163c:	805a      	strh	r2, [r3, #2]
   2163e:	e00a      	b.n	21656 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21640:	2318      	movs	r3, #24
   21642:	18fb      	adds	r3, r7, r3
   21644:	885b      	ldrh	r3, [r3, #2]
   21646:	b29a      	uxth	r2, r3
   21648:	1d3b      	adds	r3, r7, #4
   2164a:	881b      	ldrh	r3, [r3, #0]
   2164c:	18d3      	adds	r3, r2, r3
   2164e:	b29a      	uxth	r2, r3
   21650:	2318      	movs	r3, #24
   21652:	18fb      	adds	r3, r7, r3
   21654:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21656:	231f      	movs	r3, #31
   21658:	18fc      	adds	r4, r7, r3
   2165a:	4bb2      	ldr	r3, [pc, #712]	; (21924 <hif_send+0x358>)
   2165c:	4798      	blx	r3
   2165e:	0003      	movs	r3, r0
   21660:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21662:	231f      	movs	r3, #31
   21664:	18fb      	adds	r3, r7, r3
   21666:	781b      	ldrb	r3, [r3, #0]
   21668:	b25b      	sxtb	r3, r3
   2166a:	2b00      	cmp	r3, #0
   2166c:	d000      	beq.n	21670 <hif_send+0xa4>
   2166e:	e129      	b.n	218c4 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21670:	2300      	movs	r3, #0
   21672:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21674:	230e      	movs	r3, #14
   21676:	18fb      	adds	r3, r7, r3
   21678:	2200      	movs	r2, #0
   2167a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   2167c:	2300      	movs	r3, #0
   2167e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21680:	1dfb      	adds	r3, r7, #7
   21682:	781a      	ldrb	r2, [r3, #0]
   21684:	697b      	ldr	r3, [r7, #20]
   21686:	4313      	orrs	r3, r2
   21688:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   2168a:	1dbb      	adds	r3, r7, #6
   2168c:	781b      	ldrb	r3, [r3, #0]
   2168e:	021a      	lsls	r2, r3, #8
   21690:	697b      	ldr	r3, [r7, #20]
   21692:	4313      	orrs	r3, r2
   21694:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21696:	2318      	movs	r3, #24
   21698:	18fb      	adds	r3, r7, r3
   2169a:	885b      	ldrh	r3, [r3, #2]
   2169c:	b29b      	uxth	r3, r3
   2169e:	041a      	lsls	r2, r3, #16
   216a0:	697b      	ldr	r3, [r7, #20]
   216a2:	4313      	orrs	r3, r2
   216a4:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   216a6:	697b      	ldr	r3, [r7, #20]
   216a8:	221f      	movs	r2, #31
   216aa:	18bc      	adds	r4, r7, r2
   216ac:	4a9e      	ldr	r2, [pc, #632]	; (21928 <hif_send+0x35c>)
   216ae:	0019      	movs	r1, r3
   216b0:	0010      	movs	r0, r2
   216b2:	4b9e      	ldr	r3, [pc, #632]	; (2192c <hif_send+0x360>)
   216b4:	4798      	blx	r3
   216b6:	0003      	movs	r3, r0
   216b8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   216ba:	231f      	movs	r3, #31
   216bc:	18fb      	adds	r3, r7, r3
   216be:	781b      	ldrb	r3, [r3, #0]
   216c0:	b25b      	sxtb	r3, r3
   216c2:	2b00      	cmp	r3, #0
   216c4:	d000      	beq.n	216c8 <hif_send+0xfc>
   216c6:	e119      	b.n	218fc <hif_send+0x330>

		reg = 0UL;
   216c8:	2300      	movs	r3, #0
   216ca:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   216cc:	697b      	ldr	r3, [r7, #20]
   216ce:	2202      	movs	r2, #2
   216d0:	4313      	orrs	r3, r2
   216d2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   216d4:	697b      	ldr	r3, [r7, #20]
   216d6:	221f      	movs	r2, #31
   216d8:	18bc      	adds	r4, r7, r2
   216da:	4a95      	ldr	r2, [pc, #596]	; (21930 <hif_send+0x364>)
   216dc:	0019      	movs	r1, r3
   216de:	0010      	movs	r0, r2
   216e0:	4b92      	ldr	r3, [pc, #584]	; (2192c <hif_send+0x360>)
   216e2:	4798      	blx	r3
   216e4:	0003      	movs	r3, r0
   216e6:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   216e8:	231f      	movs	r3, #31
   216ea:	18fb      	adds	r3, r7, r3
   216ec:	781b      	ldrb	r3, [r3, #0]
   216ee:	b25b      	sxtb	r3, r3
   216f0:	2b00      	cmp	r3, #0
   216f2:	d000      	beq.n	216f6 <hif_send+0x12a>
   216f4:	e104      	b.n	21900 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   216f6:	2300      	movs	r3, #0
   216f8:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   216fa:	230e      	movs	r3, #14
   216fc:	18fb      	adds	r3, r7, r3
   216fe:	2200      	movs	r2, #0
   21700:	801a      	strh	r2, [r3, #0]
   21702:	e050      	b.n	217a6 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21704:	231f      	movs	r3, #31
   21706:	18fc      	adds	r4, r7, r3
   21708:	2314      	movs	r3, #20
   2170a:	18fb      	adds	r3, r7, r3
   2170c:	4a88      	ldr	r2, [pc, #544]	; (21930 <hif_send+0x364>)
   2170e:	0019      	movs	r1, r3
   21710:	0010      	movs	r0, r2
   21712:	4b88      	ldr	r3, [pc, #544]	; (21934 <hif_send+0x368>)
   21714:	4798      	blx	r3
   21716:	0003      	movs	r3, r0
   21718:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2171a:	231f      	movs	r3, #31
   2171c:	18fb      	adds	r3, r7, r3
   2171e:	781b      	ldrb	r3, [r3, #0]
   21720:	b25b      	sxtb	r3, r3
   21722:	2b00      	cmp	r3, #0
   21724:	d147      	bne.n	217b6 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21726:	230e      	movs	r3, #14
   21728:	18fb      	adds	r3, r7, r3
   2172a:	881b      	ldrh	r3, [r3, #0]
   2172c:	b29a      	uxth	r2, r3
   2172e:	23f4      	movs	r3, #244	; 0xf4
   21730:	33ff      	adds	r3, #255	; 0xff
   21732:	429a      	cmp	r2, r3
   21734:	d916      	bls.n	21764 <hif_send+0x198>
				if(cnt < 501) {
   21736:	230e      	movs	r3, #14
   21738:	18fb      	adds	r3, r7, r3
   2173a:	881b      	ldrh	r3, [r3, #0]
   2173c:	b29a      	uxth	r2, r3
   2173e:	23fa      	movs	r3, #250	; 0xfa
   21740:	005b      	lsls	r3, r3, #1
   21742:	429a      	cmp	r2, r3
   21744:	d80b      	bhi.n	2175e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21746:	4b7c      	ldr	r3, [pc, #496]	; (21938 <hif_send+0x36c>)
   21748:	0018      	movs	r0, r3
   2174a:	4b7c      	ldr	r3, [pc, #496]	; (2193c <hif_send+0x370>)
   2174c:	4798      	blx	r3
   2174e:	4b7c      	ldr	r3, [pc, #496]	; (21940 <hif_send+0x374>)
   21750:	0018      	movs	r0, r3
   21752:	4b7a      	ldr	r3, [pc, #488]	; (2193c <hif_send+0x370>)
   21754:	4798      	blx	r3
   21756:	4b7b      	ldr	r3, [pc, #492]	; (21944 <hif_send+0x378>)
   21758:	0018      	movs	r0, r3
   2175a:	4b78      	ldr	r3, [pc, #480]	; (2193c <hif_send+0x370>)
   2175c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   2175e:	2001      	movs	r0, #1
   21760:	4b79      	ldr	r3, [pc, #484]	; (21948 <hif_send+0x37c>)
   21762:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21764:	697b      	ldr	r3, [r7, #20]
   21766:	2202      	movs	r2, #2
   21768:	4013      	ands	r3, r2
   2176a:	d113      	bne.n	21794 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   2176c:	231f      	movs	r3, #31
   2176e:	18fc      	adds	r4, r7, r3
   21770:	2310      	movs	r3, #16
   21772:	18fb      	adds	r3, r7, r3
   21774:	4a75      	ldr	r2, [pc, #468]	; (2194c <hif_send+0x380>)
   21776:	0019      	movs	r1, r3
   21778:	0010      	movs	r0, r2
   2177a:	4b6e      	ldr	r3, [pc, #440]	; (21934 <hif_send+0x368>)
   2177c:	4798      	blx	r3
   2177e:	0003      	movs	r3, r0
   21780:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21782:	231f      	movs	r3, #31
   21784:	18fb      	adds	r3, r7, r3
   21786:	781b      	ldrb	r3, [r3, #0]
   21788:	b25b      	sxtb	r3, r3
   2178a:	2b00      	cmp	r3, #0
   2178c:	d015      	beq.n	217ba <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   2178e:	2300      	movs	r3, #0
   21790:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21792:	e0bc      	b.n	2190e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21794:	230e      	movs	r3, #14
   21796:	18fb      	adds	r3, r7, r3
   21798:	881b      	ldrh	r3, [r3, #0]
   2179a:	b29b      	uxth	r3, r3
   2179c:	3301      	adds	r3, #1
   2179e:	b29a      	uxth	r2, r3
   217a0:	230e      	movs	r3, #14
   217a2:	18fb      	adds	r3, r7, r3
   217a4:	801a      	strh	r2, [r3, #0]
   217a6:	230e      	movs	r3, #14
   217a8:	18fb      	adds	r3, r7, r3
   217aa:	881b      	ldrh	r3, [r3, #0]
   217ac:	b29b      	uxth	r3, r3
   217ae:	4a68      	ldr	r2, [pc, #416]	; (21950 <hif_send+0x384>)
   217b0:	4293      	cmp	r3, r2
   217b2:	d9a7      	bls.n	21704 <hif_send+0x138>
   217b4:	e002      	b.n	217bc <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   217b6:	46c0      	nop			; (mov r8, r8)
   217b8:	e000      	b.n	217bc <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   217ba:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   217bc:	693b      	ldr	r3, [r7, #16]
   217be:	2b00      	cmp	r3, #0
   217c0:	d100      	bne.n	217c4 <hif_send+0x1f8>
   217c2:	e074      	b.n	218ae <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   217c4:	693b      	ldr	r3, [r7, #16]
   217c6:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   217c8:	2318      	movs	r3, #24
   217ca:	18fb      	adds	r3, r7, r3
   217cc:	885b      	ldrh	r3, [r3, #2]
   217ce:	b29a      	uxth	r2, r3
   217d0:	2318      	movs	r3, #24
   217d2:	18fb      	adds	r3, r7, r3
   217d4:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   217d6:	68bb      	ldr	r3, [r7, #8]
   217d8:	221f      	movs	r2, #31
   217da:	18bc      	adds	r4, r7, r2
   217dc:	2218      	movs	r2, #24
   217de:	18b9      	adds	r1, r7, r2
   217e0:	2208      	movs	r2, #8
   217e2:	0018      	movs	r0, r3
   217e4:	4b5b      	ldr	r3, [pc, #364]	; (21954 <hif_send+0x388>)
   217e6:	4798      	blx	r3
   217e8:	0003      	movs	r3, r0
   217ea:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   217ec:	231f      	movs	r3, #31
   217ee:	18fb      	adds	r3, r7, r3
   217f0:	781b      	ldrb	r3, [r3, #0]
   217f2:	b25b      	sxtb	r3, r3
   217f4:	2b00      	cmp	r3, #0
   217f6:	d000      	beq.n	217fa <hif_send+0x22e>
   217f8:	e084      	b.n	21904 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   217fa:	68bb      	ldr	r3, [r7, #8]
   217fc:	3308      	adds	r3, #8
   217fe:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21800:	683b      	ldr	r3, [r7, #0]
   21802:	2b00      	cmp	r3, #0
   21804:	d016      	beq.n	21834 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21806:	68b8      	ldr	r0, [r7, #8]
   21808:	1d3b      	adds	r3, r7, #4
   2180a:	881a      	ldrh	r2, [r3, #0]
   2180c:	231f      	movs	r3, #31
   2180e:	18fc      	adds	r4, r7, r3
   21810:	683b      	ldr	r3, [r7, #0]
   21812:	0019      	movs	r1, r3
   21814:	4b4f      	ldr	r3, [pc, #316]	; (21954 <hif_send+0x388>)
   21816:	4798      	blx	r3
   21818:	0003      	movs	r3, r0
   2181a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2181c:	231f      	movs	r3, #31
   2181e:	18fb      	adds	r3, r7, r3
   21820:	781b      	ldrb	r3, [r3, #0]
   21822:	b25b      	sxtb	r3, r3
   21824:	2b00      	cmp	r3, #0
   21826:	d000      	beq.n	2182a <hif_send+0x25e>
   21828:	e06e      	b.n	21908 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2182a:	1d3b      	adds	r3, r7, #4
   2182c:	881a      	ldrh	r2, [r3, #0]
   2182e:	68bb      	ldr	r3, [r7, #8]
   21830:	18d3      	adds	r3, r2, r3
   21832:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21836:	2b00      	cmp	r3, #0
   21838:	d021      	beq.n	2187e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2183a:	2338      	movs	r3, #56	; 0x38
   2183c:	18fb      	adds	r3, r7, r3
   2183e:	881a      	ldrh	r2, [r3, #0]
   21840:	1d3b      	adds	r3, r7, #4
   21842:	881b      	ldrh	r3, [r3, #0]
   21844:	1ad3      	subs	r3, r2, r3
   21846:	001a      	movs	r2, r3
   21848:	68bb      	ldr	r3, [r7, #8]
   2184a:	18d3      	adds	r3, r2, r3
   2184c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   2184e:	68b8      	ldr	r0, [r7, #8]
   21850:	2334      	movs	r3, #52	; 0x34
   21852:	18fb      	adds	r3, r7, r3
   21854:	881a      	ldrh	r2, [r3, #0]
   21856:	231f      	movs	r3, #31
   21858:	18fc      	adds	r4, r7, r3
   2185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2185c:	0019      	movs	r1, r3
   2185e:	4b3d      	ldr	r3, [pc, #244]	; (21954 <hif_send+0x388>)
   21860:	4798      	blx	r3
   21862:	0003      	movs	r3, r0
   21864:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21866:	231f      	movs	r3, #31
   21868:	18fb      	adds	r3, r7, r3
   2186a:	781b      	ldrb	r3, [r3, #0]
   2186c:	b25b      	sxtb	r3, r3
   2186e:	2b00      	cmp	r3, #0
   21870:	d14c      	bne.n	2190c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21872:	2334      	movs	r3, #52	; 0x34
   21874:	18fb      	adds	r3, r7, r3
   21876:	881a      	ldrh	r2, [r3, #0]
   21878:	68bb      	ldr	r3, [r7, #8]
   2187a:	18d3      	adds	r3, r2, r3
   2187c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   2187e:	693b      	ldr	r3, [r7, #16]
   21880:	009b      	lsls	r3, r3, #2
   21882:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21884:	697b      	ldr	r3, [r7, #20]
   21886:	2202      	movs	r2, #2
   21888:	4313      	orrs	r3, r2
   2188a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   2188c:	697b      	ldr	r3, [r7, #20]
   2188e:	221f      	movs	r2, #31
   21890:	18bc      	adds	r4, r7, r2
   21892:	4a31      	ldr	r2, [pc, #196]	; (21958 <hif_send+0x38c>)
   21894:	0019      	movs	r1, r3
   21896:	0010      	movs	r0, r2
   21898:	4b24      	ldr	r3, [pc, #144]	; (2192c <hif_send+0x360>)
   2189a:	4798      	blx	r3
   2189c:	0003      	movs	r3, r0
   2189e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   218a0:	231f      	movs	r3, #31
   218a2:	18fb      	adds	r3, r7, r3
   218a4:	781b      	ldrb	r3, [r3, #0]
   218a6:	b25b      	sxtb	r3, r3
   218a8:	2b00      	cmp	r3, #0
   218aa:	d01c      	beq.n	218e6 <hif_send+0x31a>
   218ac:	e02f      	b.n	2190e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   218ae:	231f      	movs	r3, #31
   218b0:	18fc      	adds	r4, r7, r3
   218b2:	4b2a      	ldr	r3, [pc, #168]	; (2195c <hif_send+0x390>)
   218b4:	4798      	blx	r3
   218b6:	0003      	movs	r3, r0
   218b8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   218ba:	231f      	movs	r3, #31
   218bc:	18fb      	adds	r3, r7, r3
   218be:	22fd      	movs	r2, #253	; 0xfd
   218c0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   218c2:	e026      	b.n	21912 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   218c4:	2398      	movs	r3, #152	; 0x98
   218c6:	33ff      	adds	r3, #255	; 0xff
   218c8:	001a      	movs	r2, r3
   218ca:	4925      	ldr	r1, [pc, #148]	; (21960 <hif_send+0x394>)
   218cc:	4b25      	ldr	r3, [pc, #148]	; (21964 <hif_send+0x398>)
   218ce:	0018      	movs	r0, r3
   218d0:	4b1a      	ldr	r3, [pc, #104]	; (2193c <hif_send+0x370>)
   218d2:	4798      	blx	r3
   218d4:	4b24      	ldr	r3, [pc, #144]	; (21968 <hif_send+0x39c>)
   218d6:	0018      	movs	r0, r3
   218d8:	4b18      	ldr	r3, [pc, #96]	; (2193c <hif_send+0x370>)
   218da:	4798      	blx	r3
   218dc:	4b19      	ldr	r3, [pc, #100]	; (21944 <hif_send+0x378>)
   218de:	0018      	movs	r0, r3
   218e0:	4b16      	ldr	r3, [pc, #88]	; (2193c <hif_send+0x370>)
   218e2:	4798      	blx	r3
		goto ERR2;
   218e4:	e015      	b.n	21912 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   218e6:	231f      	movs	r3, #31
   218e8:	18fc      	adds	r4, r7, r3
   218ea:	4b1c      	ldr	r3, [pc, #112]	; (2195c <hif_send+0x390>)
   218ec:	4798      	blx	r3
   218ee:	0003      	movs	r3, r0
   218f0:	7023      	strb	r3, [r4, #0]
	return ret;
   218f2:	231f      	movs	r3, #31
   218f4:	18fb      	adds	r3, r7, r3
   218f6:	781b      	ldrb	r3, [r3, #0]
   218f8:	b25b      	sxtb	r3, r3
   218fa:	e00e      	b.n	2191a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   218fc:	46c0      	nop			; (mov r8, r8)
   218fe:	e006      	b.n	2190e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21900:	46c0      	nop			; (mov r8, r8)
   21902:	e004      	b.n	2190e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21904:	46c0      	nop			; (mov r8, r8)
   21906:	e002      	b.n	2190e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21908:	46c0      	nop			; (mov r8, r8)
   2190a:	e000      	b.n	2190e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2190c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2190e:	4b17      	ldr	r3, [pc, #92]	; (2196c <hif_send+0x3a0>)
   21910:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21912:	231f      	movs	r3, #31
   21914:	18fb      	adds	r3, r7, r3
   21916:	781b      	ldrb	r3, [r3, #0]
   21918:	b25b      	sxtb	r3, r3
}
   2191a:	0018      	movs	r0, r3
   2191c:	46bd      	mov	sp, r7
   2191e:	b009      	add	sp, #36	; 0x24
   21920:	bd90      	pop	{r4, r7, pc}
   21922:	46c0      	nop			; (mov r8, r8)
   21924:	00021495 	.word	0x00021495
   21928:	0000108c 	.word	0x0000108c
   2192c:	00023349 	.word	0x00023349
   21930:	00001078 	.word	0x00001078
   21934:	00023325 	.word	0x00023325
   21938:	0003ab20 	.word	0x0003ab20
   2193c:	0001e639 	.word	0x0001e639
   21940:	0003ab2c 	.word	0x0003ab2c
   21944:	0003ab40 	.word	0x0003ab40
   21948:	00020a8d 	.word	0x00020a8d
   2194c:	00150400 	.word	0x00150400
   21950:	000003e7 	.word	0x000003e7
   21954:	00023491 	.word	0x00023491
   21958:	0000106c 	.word	0x0000106c
   2195c:	0002152d 	.word	0x0002152d
   21960:	0003ae48 	.word	0x0003ae48
   21964:	0003ab44 	.word	0x0003ab44
   21968:	0003ab58 	.word	0x0003ab58
   2196c:	00021505 	.word	0x00021505

00021970 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21970:	b590      	push	{r4, r7, lr}
   21972:	b087      	sub	sp, #28
   21974:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21976:	230f      	movs	r3, #15
   21978:	18fb      	adds	r3, r7, r3
   2197a:	2200      	movs	r2, #0
   2197c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2197e:	230f      	movs	r3, #15
   21980:	18fc      	adds	r4, r7, r3
   21982:	2308      	movs	r3, #8
   21984:	18fb      	adds	r3, r7, r3
   21986:	4adc      	ldr	r2, [pc, #880]	; (21cf8 <hif_isr+0x388>)
   21988:	0019      	movs	r1, r3
   2198a:	0010      	movs	r0, r2
   2198c:	4bdb      	ldr	r3, [pc, #876]	; (21cfc <hif_isr+0x38c>)
   2198e:	4798      	blx	r3
   21990:	0003      	movs	r3, r0
   21992:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21994:	230f      	movs	r3, #15
   21996:	18fb      	adds	r3, r7, r3
   21998:	781b      	ldrb	r3, [r3, #0]
   2199a:	b25b      	sxtb	r3, r3
   2199c:	2b00      	cmp	r3, #0
   2199e:	d000      	beq.n	219a2 <hif_isr+0x32>
   219a0:	e21e      	b.n	21de0 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   219a2:	68bb      	ldr	r3, [r7, #8]
   219a4:	2201      	movs	r2, #1
   219a6:	4013      	ands	r3, r2
   219a8:	d100      	bne.n	219ac <hif_isr+0x3c>
   219aa:	e204      	b.n	21db6 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   219ac:	2000      	movs	r0, #0
   219ae:	4bd4      	ldr	r3, [pc, #848]	; (21d00 <hif_isr+0x390>)
   219b0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   219b2:	68bb      	ldr	r3, [r7, #8]
   219b4:	2201      	movs	r2, #1
   219b6:	4393      	bics	r3, r2
   219b8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   219ba:	68bb      	ldr	r3, [r7, #8]
   219bc:	220f      	movs	r2, #15
   219be:	18bc      	adds	r4, r7, r2
   219c0:	4acd      	ldr	r2, [pc, #820]	; (21cf8 <hif_isr+0x388>)
   219c2:	0019      	movs	r1, r3
   219c4:	0010      	movs	r0, r2
   219c6:	4bcf      	ldr	r3, [pc, #828]	; (21d04 <hif_isr+0x394>)
   219c8:	4798      	blx	r3
   219ca:	0003      	movs	r3, r0
   219cc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   219ce:	230f      	movs	r3, #15
   219d0:	18fb      	adds	r3, r7, r3
   219d2:	781b      	ldrb	r3, [r3, #0]
   219d4:	b25b      	sxtb	r3, r3
   219d6:	2b00      	cmp	r3, #0
   219d8:	d000      	beq.n	219dc <hif_isr+0x6c>
   219da:	e210      	b.n	21dfe <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   219dc:	4bca      	ldr	r3, [pc, #808]	; (21d08 <hif_isr+0x398>)
   219de:	2201      	movs	r2, #1
   219e0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   219e2:	68bb      	ldr	r3, [r7, #8]
   219e4:	089b      	lsrs	r3, r3, #2
   219e6:	b29a      	uxth	r2, r3
   219e8:	230c      	movs	r3, #12
   219ea:	18fb      	adds	r3, r7, r3
   219ec:	0512      	lsls	r2, r2, #20
   219ee:	0d12      	lsrs	r2, r2, #20
   219f0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   219f2:	230c      	movs	r3, #12
   219f4:	18fb      	adds	r3, r7, r3
   219f6:	881b      	ldrh	r3, [r3, #0]
   219f8:	2b00      	cmp	r3, #0
   219fa:	d100      	bne.n	219fe <hif_isr+0x8e>
   219fc:	e1c8      	b.n	21d90 <hif_isr+0x420>
				uint32 address = 0;
   219fe:	2300      	movs	r3, #0
   21a00:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21a02:	230f      	movs	r3, #15
   21a04:	18fc      	adds	r4, r7, r3
   21a06:	003b      	movs	r3, r7
   21a08:	4ac0      	ldr	r2, [pc, #768]	; (21d0c <hif_isr+0x39c>)
   21a0a:	0019      	movs	r1, r3
   21a0c:	0010      	movs	r0, r2
   21a0e:	4bbb      	ldr	r3, [pc, #748]	; (21cfc <hif_isr+0x38c>)
   21a10:	4798      	blx	r3
   21a12:	0003      	movs	r3, r0
   21a14:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21a16:	230f      	movs	r3, #15
   21a18:	18fb      	adds	r3, r7, r3
   21a1a:	781b      	ldrb	r3, [r3, #0]
   21a1c:	b25b      	sxtb	r3, r3
   21a1e:	2b00      	cmp	r3, #0
   21a20:	d012      	beq.n	21a48 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21a22:	23e4      	movs	r3, #228	; 0xe4
   21a24:	005a      	lsls	r2, r3, #1
   21a26:	49ba      	ldr	r1, [pc, #744]	; (21d10 <hif_isr+0x3a0>)
   21a28:	4bba      	ldr	r3, [pc, #744]	; (21d14 <hif_isr+0x3a4>)
   21a2a:	0018      	movs	r0, r3
   21a2c:	4bba      	ldr	r3, [pc, #744]	; (21d18 <hif_isr+0x3a8>)
   21a2e:	4798      	blx	r3
   21a30:	4bba      	ldr	r3, [pc, #744]	; (21d1c <hif_isr+0x3ac>)
   21a32:	0018      	movs	r0, r3
   21a34:	4bb8      	ldr	r3, [pc, #736]	; (21d18 <hif_isr+0x3a8>)
   21a36:	4798      	blx	r3
   21a38:	4bb9      	ldr	r3, [pc, #740]	; (21d20 <hif_isr+0x3b0>)
   21a3a:	0018      	movs	r0, r3
   21a3c:	4bb6      	ldr	r3, [pc, #728]	; (21d18 <hif_isr+0x3a8>)
   21a3e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21a40:	2001      	movs	r0, #1
   21a42:	4baf      	ldr	r3, [pc, #700]	; (21d00 <hif_isr+0x390>)
   21a44:	4798      	blx	r3
					goto ERR1;
   21a46:	e1db      	b.n	21e00 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21a48:	683a      	ldr	r2, [r7, #0]
   21a4a:	4baf      	ldr	r3, [pc, #700]	; (21d08 <hif_isr+0x398>)
   21a4c:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21a4e:	230c      	movs	r3, #12
   21a50:	18fb      	adds	r3, r7, r3
   21a52:	881a      	ldrh	r2, [r3, #0]
   21a54:	4bac      	ldr	r3, [pc, #688]	; (21d08 <hif_isr+0x398>)
   21a56:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21a58:	683b      	ldr	r3, [r7, #0]
   21a5a:	220f      	movs	r2, #15
   21a5c:	18bc      	adds	r4, r7, r2
   21a5e:	1d39      	adds	r1, r7, #4
   21a60:	2204      	movs	r2, #4
   21a62:	0018      	movs	r0, r3
   21a64:	4baf      	ldr	r3, [pc, #700]	; (21d24 <hif_isr+0x3b4>)
   21a66:	4798      	blx	r3
   21a68:	0003      	movs	r3, r0
   21a6a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21a6c:	1d3b      	adds	r3, r7, #4
   21a6e:	885b      	ldrh	r3, [r3, #2]
   21a70:	b29a      	uxth	r2, r3
   21a72:	1d3b      	adds	r3, r7, #4
   21a74:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21a76:	230f      	movs	r3, #15
   21a78:	18fb      	adds	r3, r7, r3
   21a7a:	781b      	ldrb	r3, [r3, #0]
   21a7c:	b25b      	sxtb	r3, r3
   21a7e:	2b00      	cmp	r3, #0
   21a80:	d012      	beq.n	21aa8 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21a82:	23e9      	movs	r3, #233	; 0xe9
   21a84:	005a      	lsls	r2, r3, #1
   21a86:	49a2      	ldr	r1, [pc, #648]	; (21d10 <hif_isr+0x3a0>)
   21a88:	4ba2      	ldr	r3, [pc, #648]	; (21d14 <hif_isr+0x3a4>)
   21a8a:	0018      	movs	r0, r3
   21a8c:	4ba2      	ldr	r3, [pc, #648]	; (21d18 <hif_isr+0x3a8>)
   21a8e:	4798      	blx	r3
   21a90:	4ba5      	ldr	r3, [pc, #660]	; (21d28 <hif_isr+0x3b8>)
   21a92:	0018      	movs	r0, r3
   21a94:	4ba0      	ldr	r3, [pc, #640]	; (21d18 <hif_isr+0x3a8>)
   21a96:	4798      	blx	r3
   21a98:	4ba1      	ldr	r3, [pc, #644]	; (21d20 <hif_isr+0x3b0>)
   21a9a:	0018      	movs	r0, r3
   21a9c:	4b9e      	ldr	r3, [pc, #632]	; (21d18 <hif_isr+0x3a8>)
   21a9e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21aa0:	2001      	movs	r0, #1
   21aa2:	4b97      	ldr	r3, [pc, #604]	; (21d00 <hif_isr+0x390>)
   21aa4:	4798      	blx	r3
					goto ERR1;
   21aa6:	e1ab      	b.n	21e00 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21aa8:	1d3b      	adds	r3, r7, #4
   21aaa:	885b      	ldrh	r3, [r3, #2]
   21aac:	b29b      	uxth	r3, r3
   21aae:	220c      	movs	r2, #12
   21ab0:	18ba      	adds	r2, r7, r2
   21ab2:	8812      	ldrh	r2, [r2, #0]
   21ab4:	429a      	cmp	r2, r3
   21ab6:	d02f      	beq.n	21b18 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21ab8:	230c      	movs	r3, #12
   21aba:	18fb      	adds	r3, r7, r3
   21abc:	881b      	ldrh	r3, [r3, #0]
   21abe:	1d3a      	adds	r2, r7, #4
   21ac0:	8852      	ldrh	r2, [r2, #2]
   21ac2:	b292      	uxth	r2, r2
   21ac4:	1a9b      	subs	r3, r3, r2
   21ac6:	2b04      	cmp	r3, #4
   21ac8:	dd26      	ble.n	21b18 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   21aca:	23dc      	movs	r3, #220	; 0xdc
   21acc:	33ff      	adds	r3, #255	; 0xff
   21ace:	001a      	movs	r2, r3
   21ad0:	498f      	ldr	r1, [pc, #572]	; (21d10 <hif_isr+0x3a0>)
   21ad2:	4b90      	ldr	r3, [pc, #576]	; (21d14 <hif_isr+0x3a4>)
   21ad4:	0018      	movs	r0, r3
   21ad6:	4b90      	ldr	r3, [pc, #576]	; (21d18 <hif_isr+0x3a8>)
   21ad8:	4798      	blx	r3
   21ada:	230c      	movs	r3, #12
   21adc:	18fb      	adds	r3, r7, r3
   21ade:	8819      	ldrh	r1, [r3, #0]
   21ae0:	1d3b      	adds	r3, r7, #4
   21ae2:	885b      	ldrh	r3, [r3, #2]
   21ae4:	b29b      	uxth	r3, r3
   21ae6:	001a      	movs	r2, r3
   21ae8:	1d3b      	adds	r3, r7, #4
   21aea:	781b      	ldrb	r3, [r3, #0]
   21aec:	b2db      	uxtb	r3, r3
   21aee:	001c      	movs	r4, r3
   21af0:	1d3b      	adds	r3, r7, #4
   21af2:	785b      	ldrb	r3, [r3, #1]
   21af4:	b2db      	uxtb	r3, r3
   21af6:	488d      	ldr	r0, [pc, #564]	; (21d2c <hif_isr+0x3bc>)
   21af8:	9300      	str	r3, [sp, #0]
   21afa:	0023      	movs	r3, r4
   21afc:	4c86      	ldr	r4, [pc, #536]	; (21d18 <hif_isr+0x3a8>)
   21afe:	47a0      	blx	r4
   21b00:	4b87      	ldr	r3, [pc, #540]	; (21d20 <hif_isr+0x3b0>)
   21b02:	0018      	movs	r0, r3
   21b04:	4b84      	ldr	r3, [pc, #528]	; (21d18 <hif_isr+0x3a8>)
   21b06:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21b08:	2001      	movs	r0, #1
   21b0a:	4b7d      	ldr	r3, [pc, #500]	; (21d00 <hif_isr+0x390>)
   21b0c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21b0e:	230f      	movs	r3, #15
   21b10:	18fb      	adds	r3, r7, r3
   21b12:	22fa      	movs	r2, #250	; 0xfa
   21b14:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21b16:	e173      	b.n	21e00 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21b18:	1d3b      	adds	r3, r7, #4
   21b1a:	781b      	ldrb	r3, [r3, #0]
   21b1c:	b2db      	uxtb	r3, r3
   21b1e:	2b01      	cmp	r3, #1
   21b20:	d122      	bne.n	21b68 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21b22:	4b79      	ldr	r3, [pc, #484]	; (21d08 <hif_isr+0x398>)
   21b24:	691b      	ldr	r3, [r3, #16]
   21b26:	2b00      	cmp	r3, #0
   21b28:	d00d      	beq.n	21b46 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21b2a:	4b77      	ldr	r3, [pc, #476]	; (21d08 <hif_isr+0x398>)
   21b2c:	691b      	ldr	r3, [r3, #16]
   21b2e:	1d3a      	adds	r2, r7, #4
   21b30:	7852      	ldrb	r2, [r2, #1]
   21b32:	b2d0      	uxtb	r0, r2
   21b34:	1d3a      	adds	r2, r7, #4
   21b36:	8852      	ldrh	r2, [r2, #2]
   21b38:	b292      	uxth	r2, r2
   21b3a:	3a08      	subs	r2, #8
   21b3c:	b291      	uxth	r1, r2
   21b3e:	683a      	ldr	r2, [r7, #0]
   21b40:	3208      	adds	r2, #8
   21b42:	4798      	blx	r3
   21b44:	e102      	b.n	21d4c <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21b46:	23e8      	movs	r3, #232	; 0xe8
   21b48:	33ff      	adds	r3, #255	; 0xff
   21b4a:	001a      	movs	r2, r3
   21b4c:	4970      	ldr	r1, [pc, #448]	; (21d10 <hif_isr+0x3a0>)
   21b4e:	4b71      	ldr	r3, [pc, #452]	; (21d14 <hif_isr+0x3a4>)
   21b50:	0018      	movs	r0, r3
   21b52:	4b71      	ldr	r3, [pc, #452]	; (21d18 <hif_isr+0x3a8>)
   21b54:	4798      	blx	r3
   21b56:	4b76      	ldr	r3, [pc, #472]	; (21d30 <hif_isr+0x3c0>)
   21b58:	0018      	movs	r0, r3
   21b5a:	4b6f      	ldr	r3, [pc, #444]	; (21d18 <hif_isr+0x3a8>)
   21b5c:	4798      	blx	r3
   21b5e:	4b70      	ldr	r3, [pc, #448]	; (21d20 <hif_isr+0x3b0>)
   21b60:	0018      	movs	r0, r3
   21b62:	4b6d      	ldr	r3, [pc, #436]	; (21d18 <hif_isr+0x3a8>)
   21b64:	4798      	blx	r3
   21b66:	e0f1      	b.n	21d4c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21b68:	1d3b      	adds	r3, r7, #4
   21b6a:	781b      	ldrb	r3, [r3, #0]
   21b6c:	b2db      	uxtb	r3, r3
   21b6e:	2b02      	cmp	r3, #2
   21b70:	d122      	bne.n	21bb8 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21b72:	4b65      	ldr	r3, [pc, #404]	; (21d08 <hif_isr+0x398>)
   21b74:	695b      	ldr	r3, [r3, #20]
   21b76:	2b00      	cmp	r3, #0
   21b78:	d00d      	beq.n	21b96 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21b7a:	4b63      	ldr	r3, [pc, #396]	; (21d08 <hif_isr+0x398>)
   21b7c:	695b      	ldr	r3, [r3, #20]
   21b7e:	1d3a      	adds	r2, r7, #4
   21b80:	7852      	ldrb	r2, [r2, #1]
   21b82:	b2d0      	uxtb	r0, r2
   21b84:	1d3a      	adds	r2, r7, #4
   21b86:	8852      	ldrh	r2, [r2, #2]
   21b88:	b292      	uxth	r2, r2
   21b8a:	3a08      	subs	r2, #8
   21b8c:	b291      	uxth	r1, r2
   21b8e:	683a      	ldr	r2, [r7, #0]
   21b90:	3208      	adds	r2, #8
   21b92:	4798      	blx	r3
   21b94:	e0da      	b.n	21d4c <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21b96:	23f0      	movs	r3, #240	; 0xf0
   21b98:	33ff      	adds	r3, #255	; 0xff
   21b9a:	001a      	movs	r2, r3
   21b9c:	495c      	ldr	r1, [pc, #368]	; (21d10 <hif_isr+0x3a0>)
   21b9e:	4b5d      	ldr	r3, [pc, #372]	; (21d14 <hif_isr+0x3a4>)
   21ba0:	0018      	movs	r0, r3
   21ba2:	4b5d      	ldr	r3, [pc, #372]	; (21d18 <hif_isr+0x3a8>)
   21ba4:	4798      	blx	r3
   21ba6:	4b63      	ldr	r3, [pc, #396]	; (21d34 <hif_isr+0x3c4>)
   21ba8:	0018      	movs	r0, r3
   21baa:	4b5b      	ldr	r3, [pc, #364]	; (21d18 <hif_isr+0x3a8>)
   21bac:	4798      	blx	r3
   21bae:	4b5c      	ldr	r3, [pc, #368]	; (21d20 <hif_isr+0x3b0>)
   21bb0:	0018      	movs	r0, r3
   21bb2:	4b59      	ldr	r3, [pc, #356]	; (21d18 <hif_isr+0x3a8>)
   21bb4:	4798      	blx	r3
   21bb6:	e0c9      	b.n	21d4c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   21bb8:	1d3b      	adds	r3, r7, #4
   21bba:	781b      	ldrb	r3, [r3, #0]
   21bbc:	b2db      	uxtb	r3, r3
   21bbe:	2b04      	cmp	r3, #4
   21bc0:	d122      	bne.n	21c08 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21bc2:	4b51      	ldr	r3, [pc, #324]	; (21d08 <hif_isr+0x398>)
   21bc4:	699b      	ldr	r3, [r3, #24]
   21bc6:	2b00      	cmp	r3, #0
   21bc8:	d00d      	beq.n	21be6 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21bca:	4b4f      	ldr	r3, [pc, #316]	; (21d08 <hif_isr+0x398>)
   21bcc:	699b      	ldr	r3, [r3, #24]
   21bce:	1d3a      	adds	r2, r7, #4
   21bd0:	7852      	ldrb	r2, [r2, #1]
   21bd2:	b2d0      	uxtb	r0, r2
   21bd4:	1d3a      	adds	r2, r7, #4
   21bd6:	8852      	ldrh	r2, [r2, #2]
   21bd8:	b292      	uxth	r2, r2
   21bda:	3a08      	subs	r2, #8
   21bdc:	b291      	uxth	r1, r2
   21bde:	683a      	ldr	r2, [r7, #0]
   21be0:	3208      	adds	r2, #8
   21be2:	4798      	blx	r3
   21be4:	e0b2      	b.n	21d4c <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21be6:	23f8      	movs	r3, #248	; 0xf8
   21be8:	33ff      	adds	r3, #255	; 0xff
   21bea:	001a      	movs	r2, r3
   21bec:	4948      	ldr	r1, [pc, #288]	; (21d10 <hif_isr+0x3a0>)
   21bee:	4b49      	ldr	r3, [pc, #292]	; (21d14 <hif_isr+0x3a4>)
   21bf0:	0018      	movs	r0, r3
   21bf2:	4b49      	ldr	r3, [pc, #292]	; (21d18 <hif_isr+0x3a8>)
   21bf4:	4798      	blx	r3
   21bf6:	4b50      	ldr	r3, [pc, #320]	; (21d38 <hif_isr+0x3c8>)
   21bf8:	0018      	movs	r0, r3
   21bfa:	4b47      	ldr	r3, [pc, #284]	; (21d18 <hif_isr+0x3a8>)
   21bfc:	4798      	blx	r3
   21bfe:	4b48      	ldr	r3, [pc, #288]	; (21d20 <hif_isr+0x3b0>)
   21c00:	0018      	movs	r0, r3
   21c02:	4b45      	ldr	r3, [pc, #276]	; (21d18 <hif_isr+0x3a8>)
   21c04:	4798      	blx	r3
   21c06:	e0a1      	b.n	21d4c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   21c08:	1d3b      	adds	r3, r7, #4
   21c0a:	781b      	ldrb	r3, [r3, #0]
   21c0c:	b2db      	uxtb	r3, r3
   21c0e:	2b06      	cmp	r3, #6
   21c10:	d121      	bne.n	21c56 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21c12:	4b3d      	ldr	r3, [pc, #244]	; (21d08 <hif_isr+0x398>)
   21c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21c16:	2b00      	cmp	r3, #0
   21c18:	d00d      	beq.n	21c36 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21c1a:	4b3b      	ldr	r3, [pc, #236]	; (21d08 <hif_isr+0x398>)
   21c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21c1e:	1d3a      	adds	r2, r7, #4
   21c20:	7852      	ldrb	r2, [r2, #1]
   21c22:	b2d0      	uxtb	r0, r2
   21c24:	1d3a      	adds	r2, r7, #4
   21c26:	8852      	ldrh	r2, [r2, #2]
   21c28:	b292      	uxth	r2, r2
   21c2a:	3a08      	subs	r2, #8
   21c2c:	b291      	uxth	r1, r2
   21c2e:	683a      	ldr	r2, [r7, #0]
   21c30:	3208      	adds	r2, #8
   21c32:	4798      	blx	r3
   21c34:	e08a      	b.n	21d4c <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21c36:	2380      	movs	r3, #128	; 0x80
   21c38:	009a      	lsls	r2, r3, #2
   21c3a:	4935      	ldr	r1, [pc, #212]	; (21d10 <hif_isr+0x3a0>)
   21c3c:	4b35      	ldr	r3, [pc, #212]	; (21d14 <hif_isr+0x3a4>)
   21c3e:	0018      	movs	r0, r3
   21c40:	4b35      	ldr	r3, [pc, #212]	; (21d18 <hif_isr+0x3a8>)
   21c42:	4798      	blx	r3
   21c44:	4b3d      	ldr	r3, [pc, #244]	; (21d3c <hif_isr+0x3cc>)
   21c46:	0018      	movs	r0, r3
   21c48:	4b33      	ldr	r3, [pc, #204]	; (21d18 <hif_isr+0x3a8>)
   21c4a:	4798      	blx	r3
   21c4c:	4b34      	ldr	r3, [pc, #208]	; (21d20 <hif_isr+0x3b0>)
   21c4e:	0018      	movs	r0, r3
   21c50:	4b31      	ldr	r3, [pc, #196]	; (21d18 <hif_isr+0x3a8>)
   21c52:	4798      	blx	r3
   21c54:	e07a      	b.n	21d4c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   21c56:	1d3b      	adds	r3, r7, #4
   21c58:	781b      	ldrb	r3, [r3, #0]
   21c5a:	b2db      	uxtb	r3, r3
   21c5c:	2b07      	cmp	r3, #7
   21c5e:	d120      	bne.n	21ca2 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21c60:	4b29      	ldr	r3, [pc, #164]	; (21d08 <hif_isr+0x398>)
   21c62:	69db      	ldr	r3, [r3, #28]
   21c64:	2b00      	cmp	r3, #0
   21c66:	d00d      	beq.n	21c84 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21c68:	4b27      	ldr	r3, [pc, #156]	; (21d08 <hif_isr+0x398>)
   21c6a:	69db      	ldr	r3, [r3, #28]
   21c6c:	1d3a      	adds	r2, r7, #4
   21c6e:	7852      	ldrb	r2, [r2, #1]
   21c70:	b2d0      	uxtb	r0, r2
   21c72:	1d3a      	adds	r2, r7, #4
   21c74:	8852      	ldrh	r2, [r2, #2]
   21c76:	b292      	uxth	r2, r2
   21c78:	3a08      	subs	r2, #8
   21c7a:	b291      	uxth	r1, r2
   21c7c:	683a      	ldr	r2, [r7, #0]
   21c7e:	3208      	adds	r2, #8
   21c80:	4798      	blx	r3
   21c82:	e063      	b.n	21d4c <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   21c84:	4a2e      	ldr	r2, [pc, #184]	; (21d40 <hif_isr+0x3d0>)
   21c86:	4922      	ldr	r1, [pc, #136]	; (21d10 <hif_isr+0x3a0>)
   21c88:	4b22      	ldr	r3, [pc, #136]	; (21d14 <hif_isr+0x3a4>)
   21c8a:	0018      	movs	r0, r3
   21c8c:	4b22      	ldr	r3, [pc, #136]	; (21d18 <hif_isr+0x3a8>)
   21c8e:	4798      	blx	r3
   21c90:	4b2c      	ldr	r3, [pc, #176]	; (21d44 <hif_isr+0x3d4>)
   21c92:	0018      	movs	r0, r3
   21c94:	4b20      	ldr	r3, [pc, #128]	; (21d18 <hif_isr+0x3a8>)
   21c96:	4798      	blx	r3
   21c98:	4b21      	ldr	r3, [pc, #132]	; (21d20 <hif_isr+0x3b0>)
   21c9a:	0018      	movs	r0, r3
   21c9c:	4b1e      	ldr	r3, [pc, #120]	; (21d18 <hif_isr+0x3a8>)
   21c9e:	4798      	blx	r3
   21ca0:	e054      	b.n	21d4c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21ca2:	1d3b      	adds	r3, r7, #4
   21ca4:	781b      	ldrb	r3, [r3, #0]
   21ca6:	b2db      	uxtb	r3, r3
   21ca8:	2b05      	cmp	r3, #5
   21caa:	d111      	bne.n	21cd0 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   21cac:	4b16      	ldr	r3, [pc, #88]	; (21d08 <hif_isr+0x398>)
   21cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21cb0:	2b00      	cmp	r3, #0
   21cb2:	d04b      	beq.n	21d4c <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21cb4:	4b14      	ldr	r3, [pc, #80]	; (21d08 <hif_isr+0x398>)
   21cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21cb8:	1d3a      	adds	r2, r7, #4
   21cba:	7852      	ldrb	r2, [r2, #1]
   21cbc:	b2d0      	uxtb	r0, r2
   21cbe:	1d3a      	adds	r2, r7, #4
   21cc0:	8852      	ldrh	r2, [r2, #2]
   21cc2:	b292      	uxth	r2, r2
   21cc4:	3a08      	subs	r2, #8
   21cc6:	b291      	uxth	r1, r2
   21cc8:	683a      	ldr	r2, [r7, #0]
   21cca:	3208      	adds	r2, #8
   21ccc:	4798      	blx	r3
   21cce:	e03d      	b.n	21d4c <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   21cd0:	2384      	movs	r3, #132	; 0x84
   21cd2:	009a      	lsls	r2, r3, #2
   21cd4:	490e      	ldr	r1, [pc, #56]	; (21d10 <hif_isr+0x3a0>)
   21cd6:	4b0f      	ldr	r3, [pc, #60]	; (21d14 <hif_isr+0x3a4>)
   21cd8:	0018      	movs	r0, r3
   21cda:	4b0f      	ldr	r3, [pc, #60]	; (21d18 <hif_isr+0x3a8>)
   21cdc:	4798      	blx	r3
   21cde:	4b1a      	ldr	r3, [pc, #104]	; (21d48 <hif_isr+0x3d8>)
   21ce0:	0018      	movs	r0, r3
   21ce2:	4b0d      	ldr	r3, [pc, #52]	; (21d18 <hif_isr+0x3a8>)
   21ce4:	4798      	blx	r3
   21ce6:	4b0e      	ldr	r3, [pc, #56]	; (21d20 <hif_isr+0x3b0>)
   21ce8:	0018      	movs	r0, r3
   21cea:	4b0b      	ldr	r3, [pc, #44]	; (21d18 <hif_isr+0x3a8>)
   21cec:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   21cee:	230f      	movs	r3, #15
   21cf0:	18fb      	adds	r3, r7, r3
   21cf2:	22fa      	movs	r2, #250	; 0xfa
   21cf4:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21cf6:	e083      	b.n	21e00 <hif_isr+0x490>
   21cf8:	00001070 	.word	0x00001070
   21cfc:	00023325 	.word	0x00023325
   21d00:	00020b21 	.word	0x00020b21
   21d04:	00023349 	.word	0x00023349
   21d08:	20005c9c 	.word	0x20005c9c
   21d0c:	00001084 	.word	0x00001084
   21d10:	0003ae54 	.word	0x0003ae54
   21d14:	0003ab44 	.word	0x0003ab44
   21d18:	0001e639 	.word	0x0001e639
   21d1c:	0003ab78 	.word	0x0003ab78
   21d20:	0003ab40 	.word	0x0003ab40
   21d24:	00023399 	.word	0x00023399
   21d28:	0003aba0 	.word	0x0003aba0
   21d2c:	0003abb8 	.word	0x0003abb8
   21d30:	0003abf8 	.word	0x0003abf8
   21d34:	0003ac1c 	.word	0x0003ac1c
   21d38:	0003ac40 	.word	0x0003ac40
   21d3c:	0003ac60 	.word	0x0003ac60
   21d40:	00000207 	.word	0x00000207
   21d44:	0003ac84 	.word	0x0003ac84
   21d48:	0003aca8 	.word	0x0003aca8
				}
				if(gstrHifCxt.u8HifRXDone)
   21d4c:	4b30      	ldr	r3, [pc, #192]	; (21e10 <hif_isr+0x4a0>)
   21d4e:	789b      	ldrb	r3, [r3, #2]
   21d50:	b2db      	uxtb	r3, r3
   21d52:	2b00      	cmp	r3, #0
   21d54:	d054      	beq.n	21e00 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   21d56:	4a2f      	ldr	r2, [pc, #188]	; (21e14 <hif_isr+0x4a4>)
   21d58:	492f      	ldr	r1, [pc, #188]	; (21e18 <hif_isr+0x4a8>)
   21d5a:	4b30      	ldr	r3, [pc, #192]	; (21e1c <hif_isr+0x4ac>)
   21d5c:	0018      	movs	r0, r3
   21d5e:	4b30      	ldr	r3, [pc, #192]	; (21e20 <hif_isr+0x4b0>)
   21d60:	4798      	blx	r3
   21d62:	1d3b      	adds	r3, r7, #4
   21d64:	781b      	ldrb	r3, [r3, #0]
   21d66:	b2db      	uxtb	r3, r3
   21d68:	0019      	movs	r1, r3
   21d6a:	1d3b      	adds	r3, r7, #4
   21d6c:	785b      	ldrb	r3, [r3, #1]
   21d6e:	b2db      	uxtb	r3, r3
   21d70:	001a      	movs	r2, r3
   21d72:	4b2c      	ldr	r3, [pc, #176]	; (21e24 <hif_isr+0x4b4>)
   21d74:	0018      	movs	r0, r3
   21d76:	4b2a      	ldr	r3, [pc, #168]	; (21e20 <hif_isr+0x4b0>)
   21d78:	4798      	blx	r3
   21d7a:	4b2b      	ldr	r3, [pc, #172]	; (21e28 <hif_isr+0x4b8>)
   21d7c:	0018      	movs	r0, r3
   21d7e:	4b28      	ldr	r3, [pc, #160]	; (21e20 <hif_isr+0x4b0>)
   21d80:	4798      	blx	r3
					ret = hif_set_rx_done();
   21d82:	230f      	movs	r3, #15
   21d84:	18fc      	adds	r4, r7, r3
   21d86:	4b29      	ldr	r3, [pc, #164]	; (21e2c <hif_isr+0x4bc>)
   21d88:	4798      	blx	r3
   21d8a:	0003      	movs	r3, r0
   21d8c:	7023      	strb	r3, [r4, #0]
   21d8e:	e037      	b.n	21e00 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21d90:	4a27      	ldr	r2, [pc, #156]	; (21e30 <hif_isr+0x4c0>)
   21d92:	4921      	ldr	r1, [pc, #132]	; (21e18 <hif_isr+0x4a8>)
   21d94:	4b21      	ldr	r3, [pc, #132]	; (21e1c <hif_isr+0x4ac>)
   21d96:	0018      	movs	r0, r3
   21d98:	4b21      	ldr	r3, [pc, #132]	; (21e20 <hif_isr+0x4b0>)
   21d9a:	4798      	blx	r3
   21d9c:	4b25      	ldr	r3, [pc, #148]	; (21e34 <hif_isr+0x4c4>)
   21d9e:	0018      	movs	r0, r3
   21da0:	4b1f      	ldr	r3, [pc, #124]	; (21e20 <hif_isr+0x4b0>)
   21da2:	4798      	blx	r3
   21da4:	4b20      	ldr	r3, [pc, #128]	; (21e28 <hif_isr+0x4b8>)
   21da6:	0018      	movs	r0, r3
   21da8:	4b1d      	ldr	r3, [pc, #116]	; (21e20 <hif_isr+0x4b0>)
   21daa:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   21dac:	230f      	movs	r3, #15
   21dae:	18fb      	adds	r3, r7, r3
   21db0:	22fe      	movs	r2, #254	; 0xfe
   21db2:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21db4:	e024      	b.n	21e00 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   21db6:	4a20      	ldr	r2, [pc, #128]	; (21e38 <hif_isr+0x4c8>)
   21db8:	4917      	ldr	r1, [pc, #92]	; (21e18 <hif_isr+0x4a8>)
   21dba:	4b18      	ldr	r3, [pc, #96]	; (21e1c <hif_isr+0x4ac>)
   21dbc:	0018      	movs	r0, r3
   21dbe:	4b18      	ldr	r3, [pc, #96]	; (21e20 <hif_isr+0x4b0>)
   21dc0:	4798      	blx	r3
   21dc2:	68ba      	ldr	r2, [r7, #8]
   21dc4:	4b1d      	ldr	r3, [pc, #116]	; (21e3c <hif_isr+0x4cc>)
   21dc6:	0011      	movs	r1, r2
   21dc8:	0018      	movs	r0, r3
   21dca:	4b15      	ldr	r3, [pc, #84]	; (21e20 <hif_isr+0x4b0>)
   21dcc:	4798      	blx	r3
   21dce:	4b16      	ldr	r3, [pc, #88]	; (21e28 <hif_isr+0x4b8>)
   21dd0:	0018      	movs	r0, r3
   21dd2:	4b13      	ldr	r3, [pc, #76]	; (21e20 <hif_isr+0x4b0>)
   21dd4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21dd6:	230f      	movs	r3, #15
   21dd8:	18fb      	adds	r3, r7, r3
   21dda:	22f4      	movs	r2, #244	; 0xf4
   21ddc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21dde:	e00f      	b.n	21e00 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21de0:	4a17      	ldr	r2, [pc, #92]	; (21e40 <hif_isr+0x4d0>)
   21de2:	490d      	ldr	r1, [pc, #52]	; (21e18 <hif_isr+0x4a8>)
   21de4:	4b0d      	ldr	r3, [pc, #52]	; (21e1c <hif_isr+0x4ac>)
   21de6:	0018      	movs	r0, r3
   21de8:	4b0d      	ldr	r3, [pc, #52]	; (21e20 <hif_isr+0x4b0>)
   21dea:	4798      	blx	r3
   21dec:	4b15      	ldr	r3, [pc, #84]	; (21e44 <hif_isr+0x4d4>)
   21dee:	0018      	movs	r0, r3
   21df0:	4b0b      	ldr	r3, [pc, #44]	; (21e20 <hif_isr+0x4b0>)
   21df2:	4798      	blx	r3
   21df4:	4b0c      	ldr	r3, [pc, #48]	; (21e28 <hif_isr+0x4b8>)
   21df6:	0018      	movs	r0, r3
   21df8:	4b09      	ldr	r3, [pc, #36]	; (21e20 <hif_isr+0x4b0>)
   21dfa:	4798      	blx	r3
		goto ERR1;
   21dfc:	e000      	b.n	21e00 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   21dfe:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21e00:	230f      	movs	r3, #15
   21e02:	18fb      	adds	r3, r7, r3
   21e04:	781b      	ldrb	r3, [r3, #0]
   21e06:	b25b      	sxtb	r3, r3
}
   21e08:	0018      	movs	r0, r3
   21e0a:	46bd      	mov	sp, r7
   21e0c:	b005      	add	sp, #20
   21e0e:	bd90      	pop	{r4, r7, pc}
   21e10:	20005c9c 	.word	0x20005c9c
   21e14:	00000216 	.word	0x00000216
   21e18:	0003ae54 	.word	0x0003ae54
   21e1c:	0003ab44 	.word	0x0003ab44
   21e20:	0001e639 	.word	0x0001e639
   21e24:	0003acc0 	.word	0x0003acc0
   21e28:	0003ab40 	.word	0x0003ab40
   21e2c:	00021405 	.word	0x00021405
   21e30:	0000021d 	.word	0x0000021d
   21e34:	0003acec 	.word	0x0003acec
   21e38:	00000225 	.word	0x00000225
   21e3c:	0003ad00 	.word	0x0003ad00
   21e40:	0000022e 	.word	0x0000022e
   21e44:	0003ad1c 	.word	0x0003ad1c

00021e48 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   21e48:	b590      	push	{r4, r7, lr}
   21e4a:	b083      	sub	sp, #12
   21e4c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   21e4e:	1dfb      	adds	r3, r7, #7
   21e50:	2200      	movs	r2, #0
   21e52:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21e54:	4b1c      	ldr	r3, [pc, #112]	; (21ec8 <hif_handle_isr+0x80>)
   21e56:	2200      	movs	r2, #0
   21e58:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21e5a:	e024      	b.n	21ea6 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   21e5c:	4b1a      	ldr	r3, [pc, #104]	; (21ec8 <hif_handle_isr+0x80>)
   21e5e:	78db      	ldrb	r3, [r3, #3]
   21e60:	b2db      	uxtb	r3, r3
   21e62:	3b01      	subs	r3, #1
   21e64:	b2da      	uxtb	r2, r3
   21e66:	4b18      	ldr	r3, [pc, #96]	; (21ec8 <hif_handle_isr+0x80>)
   21e68:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   21e6a:	1dfc      	adds	r4, r7, #7
   21e6c:	4b17      	ldr	r3, [pc, #92]	; (21ecc <hif_handle_isr+0x84>)
   21e6e:	4798      	blx	r3
   21e70:	0003      	movs	r3, r0
   21e72:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21e74:	1dfb      	adds	r3, r7, #7
   21e76:	781b      	ldrb	r3, [r3, #0]
   21e78:	b25b      	sxtb	r3, r3
   21e7a:	2b00      	cmp	r3, #0
   21e7c:	d100      	bne.n	21e80 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   21e7e:	e012      	b.n	21ea6 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21e80:	4a13      	ldr	r2, [pc, #76]	; (21ed0 <hif_handle_isr+0x88>)
   21e82:	4914      	ldr	r1, [pc, #80]	; (21ed4 <hif_handle_isr+0x8c>)
   21e84:	4b14      	ldr	r3, [pc, #80]	; (21ed8 <hif_handle_isr+0x90>)
   21e86:	0018      	movs	r0, r3
   21e88:	4b14      	ldr	r3, [pc, #80]	; (21edc <hif_handle_isr+0x94>)
   21e8a:	4798      	blx	r3
   21e8c:	1dfb      	adds	r3, r7, #7
   21e8e:	2200      	movs	r2, #0
   21e90:	569a      	ldrsb	r2, [r3, r2]
   21e92:	4b13      	ldr	r3, [pc, #76]	; (21ee0 <hif_handle_isr+0x98>)
   21e94:	0011      	movs	r1, r2
   21e96:	0018      	movs	r0, r3
   21e98:	4b10      	ldr	r3, [pc, #64]	; (21edc <hif_handle_isr+0x94>)
   21e9a:	4798      	blx	r3
   21e9c:	4b11      	ldr	r3, [pc, #68]	; (21ee4 <hif_handle_isr+0x9c>)
   21e9e:	0018      	movs	r0, r3
   21ea0:	4b0e      	ldr	r3, [pc, #56]	; (21edc <hif_handle_isr+0x94>)
   21ea2:	4798      	blx	r3
			ret = hif_isr();
   21ea4:	e7e1      	b.n	21e6a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21ea6:	4b08      	ldr	r3, [pc, #32]	; (21ec8 <hif_handle_isr+0x80>)
   21ea8:	78db      	ldrb	r3, [r3, #3]
   21eaa:	b2db      	uxtb	r3, r3
   21eac:	2b00      	cmp	r3, #0
   21eae:	d004      	beq.n	21eba <hif_handle_isr+0x72>
   21eb0:	4b05      	ldr	r3, [pc, #20]	; (21ec8 <hif_handle_isr+0x80>)
   21eb2:	791b      	ldrb	r3, [r3, #4]
   21eb4:	b2db      	uxtb	r3, r3
   21eb6:	2b00      	cmp	r3, #0
   21eb8:	d0d0      	beq.n	21e5c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   21eba:	1dfb      	adds	r3, r7, #7
   21ebc:	781b      	ldrb	r3, [r3, #0]
   21ebe:	b25b      	sxtb	r3, r3
}
   21ec0:	0018      	movs	r0, r3
   21ec2:	46bd      	mov	sp, r7
   21ec4:	b003      	add	sp, #12
   21ec6:	bd90      	pop	{r4, r7, pc}
   21ec8:	20005c9c 	.word	0x20005c9c
   21ecc:	00021971 	.word	0x00021971
   21ed0:	00000257 	.word	0x00000257
   21ed4:	0003ae5c 	.word	0x0003ae5c
   21ed8:	0003ab44 	.word	0x0003ab44
   21edc:	0001e639 	.word	0x0001e639
   21ee0:	0003ad40 	.word	0x0003ad40
   21ee4:	0003ab40 	.word	0x0003ab40

00021ee8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21ee8:	b590      	push	{r4, r7, lr}
   21eea:	b087      	sub	sp, #28
   21eec:	af00      	add	r7, sp, #0
   21eee:	60f8      	str	r0, [r7, #12]
   21ef0:	60b9      	str	r1, [r7, #8]
   21ef2:	0019      	movs	r1, r3
   21ef4:	1dbb      	adds	r3, r7, #6
   21ef6:	801a      	strh	r2, [r3, #0]
   21ef8:	1d7b      	adds	r3, r7, #5
   21efa:	1c0a      	adds	r2, r1, #0
   21efc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21efe:	2317      	movs	r3, #23
   21f00:	18fb      	adds	r3, r7, r3
   21f02:	2200      	movs	r2, #0
   21f04:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21f06:	68fb      	ldr	r3, [r7, #12]
   21f08:	2b00      	cmp	r3, #0
   21f0a:	d006      	beq.n	21f1a <hif_receive+0x32>
   21f0c:	68bb      	ldr	r3, [r7, #8]
   21f0e:	2b00      	cmp	r3, #0
   21f10:	d003      	beq.n	21f1a <hif_receive+0x32>
   21f12:	1dbb      	adds	r3, r7, #6
   21f14:	881b      	ldrh	r3, [r3, #0]
   21f16:	2b00      	cmp	r3, #0
   21f18:	d11e      	bne.n	21f58 <hif_receive+0x70>
	{
		if(isDone)
   21f1a:	1d7b      	adds	r3, r7, #5
   21f1c:	781b      	ldrb	r3, [r3, #0]
   21f1e:	2b00      	cmp	r3, #0
   21f20:	d006      	beq.n	21f30 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21f22:	2317      	movs	r3, #23
   21f24:	18fc      	adds	r4, r7, r3
   21f26:	4b45      	ldr	r3, [pc, #276]	; (2203c <hif_receive+0x154>)
   21f28:	4798      	blx	r3
   21f2a:	0003      	movs	r3, r0
   21f2c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   21f2e:	e07c      	b.n	2202a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21f30:	2317      	movs	r3, #23
   21f32:	18fb      	adds	r3, r7, r3
   21f34:	22f4      	movs	r2, #244	; 0xf4
   21f36:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21f38:	239e      	movs	r3, #158	; 0x9e
   21f3a:	009a      	lsls	r2, r3, #2
   21f3c:	4940      	ldr	r1, [pc, #256]	; (22040 <hif_receive+0x158>)
   21f3e:	4b41      	ldr	r3, [pc, #260]	; (22044 <hif_receive+0x15c>)
   21f40:	0018      	movs	r0, r3
   21f42:	4b41      	ldr	r3, [pc, #260]	; (22048 <hif_receive+0x160>)
   21f44:	4798      	blx	r3
   21f46:	4b41      	ldr	r3, [pc, #260]	; (2204c <hif_receive+0x164>)
   21f48:	0018      	movs	r0, r3
   21f4a:	4b3f      	ldr	r3, [pc, #252]	; (22048 <hif_receive+0x160>)
   21f4c:	4798      	blx	r3
   21f4e:	4b40      	ldr	r3, [pc, #256]	; (22050 <hif_receive+0x168>)
   21f50:	0018      	movs	r0, r3
   21f52:	4b3d      	ldr	r3, [pc, #244]	; (22048 <hif_receive+0x160>)
   21f54:	4798      	blx	r3
		goto ERR1;
   21f56:	e068      	b.n	2202a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21f58:	1dbb      	adds	r3, r7, #6
   21f5a:	881a      	ldrh	r2, [r3, #0]
   21f5c:	4b3d      	ldr	r3, [pc, #244]	; (22054 <hif_receive+0x16c>)
   21f5e:	68db      	ldr	r3, [r3, #12]
   21f60:	429a      	cmp	r2, r3
   21f62:	d917      	bls.n	21f94 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21f64:	2317      	movs	r3, #23
   21f66:	18fb      	adds	r3, r7, r3
   21f68:	22f4      	movs	r2, #244	; 0xf4
   21f6a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21f6c:	23a0      	movs	r3, #160	; 0xa0
   21f6e:	009a      	lsls	r2, r3, #2
   21f70:	4933      	ldr	r1, [pc, #204]	; (22040 <hif_receive+0x158>)
   21f72:	4b34      	ldr	r3, [pc, #208]	; (22044 <hif_receive+0x15c>)
   21f74:	0018      	movs	r0, r3
   21f76:	4b34      	ldr	r3, [pc, #208]	; (22048 <hif_receive+0x160>)
   21f78:	4798      	blx	r3
   21f7a:	1dbb      	adds	r3, r7, #6
   21f7c:	8819      	ldrh	r1, [r3, #0]
   21f7e:	4b35      	ldr	r3, [pc, #212]	; (22054 <hif_receive+0x16c>)
   21f80:	68da      	ldr	r2, [r3, #12]
   21f82:	4b35      	ldr	r3, [pc, #212]	; (22058 <hif_receive+0x170>)
   21f84:	0018      	movs	r0, r3
   21f86:	4b30      	ldr	r3, [pc, #192]	; (22048 <hif_receive+0x160>)
   21f88:	4798      	blx	r3
   21f8a:	4b31      	ldr	r3, [pc, #196]	; (22050 <hif_receive+0x168>)
   21f8c:	0018      	movs	r0, r3
   21f8e:	4b2e      	ldr	r3, [pc, #184]	; (22048 <hif_receive+0x160>)
   21f90:	4798      	blx	r3
		goto ERR1;
   21f92:	e04a      	b.n	2202a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21f94:	4b2f      	ldr	r3, [pc, #188]	; (22054 <hif_receive+0x16c>)
   21f96:	689a      	ldr	r2, [r3, #8]
   21f98:	68fb      	ldr	r3, [r7, #12]
   21f9a:	429a      	cmp	r2, r3
   21f9c:	d80a      	bhi.n	21fb4 <hif_receive+0xcc>
   21f9e:	1dbb      	adds	r3, r7, #6
   21fa0:	881a      	ldrh	r2, [r3, #0]
   21fa2:	68fb      	ldr	r3, [r7, #12]
   21fa4:	18d2      	adds	r2, r2, r3
   21fa6:	4b2b      	ldr	r3, [pc, #172]	; (22054 <hif_receive+0x16c>)
   21fa8:	6899      	ldr	r1, [r3, #8]
   21faa:	4b2a      	ldr	r3, [pc, #168]	; (22054 <hif_receive+0x16c>)
   21fac:	68db      	ldr	r3, [r3, #12]
   21fae:	18cb      	adds	r3, r1, r3
   21fb0:	429a      	cmp	r2, r3
   21fb2:	d912      	bls.n	21fda <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21fb4:	2317      	movs	r3, #23
   21fb6:	18fb      	adds	r3, r7, r3
   21fb8:	22f4      	movs	r2, #244	; 0xf4
   21fba:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21fbc:	4a27      	ldr	r2, [pc, #156]	; (2205c <hif_receive+0x174>)
   21fbe:	4920      	ldr	r1, [pc, #128]	; (22040 <hif_receive+0x158>)
   21fc0:	4b20      	ldr	r3, [pc, #128]	; (22044 <hif_receive+0x15c>)
   21fc2:	0018      	movs	r0, r3
   21fc4:	4b20      	ldr	r3, [pc, #128]	; (22048 <hif_receive+0x160>)
   21fc6:	4798      	blx	r3
   21fc8:	4b25      	ldr	r3, [pc, #148]	; (22060 <hif_receive+0x178>)
   21fca:	0018      	movs	r0, r3
   21fcc:	4b1e      	ldr	r3, [pc, #120]	; (22048 <hif_receive+0x160>)
   21fce:	4798      	blx	r3
   21fd0:	4b1f      	ldr	r3, [pc, #124]	; (22050 <hif_receive+0x168>)
   21fd2:	0018      	movs	r0, r3
   21fd4:	4b1c      	ldr	r3, [pc, #112]	; (22048 <hif_receive+0x160>)
   21fd6:	4798      	blx	r3
		goto ERR1;
   21fd8:	e027      	b.n	2202a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   21fda:	1dbb      	adds	r3, r7, #6
   21fdc:	881a      	ldrh	r2, [r3, #0]
   21fde:	2317      	movs	r3, #23
   21fe0:	18fc      	adds	r4, r7, r3
   21fe2:	68b9      	ldr	r1, [r7, #8]
   21fe4:	68fb      	ldr	r3, [r7, #12]
   21fe6:	0018      	movs	r0, r3
   21fe8:	4b1e      	ldr	r3, [pc, #120]	; (22064 <hif_receive+0x17c>)
   21fea:	4798      	blx	r3
   21fec:	0003      	movs	r3, r0
   21fee:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21ff0:	2317      	movs	r3, #23
   21ff2:	18fb      	adds	r3, r7, r3
   21ff4:	781b      	ldrb	r3, [r3, #0]
   21ff6:	b25b      	sxtb	r3, r3
   21ff8:	2b00      	cmp	r3, #0
   21ffa:	d115      	bne.n	22028 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   21ffc:	4b15      	ldr	r3, [pc, #84]	; (22054 <hif_receive+0x16c>)
   21ffe:	689a      	ldr	r2, [r3, #8]
   22000:	4b14      	ldr	r3, [pc, #80]	; (22054 <hif_receive+0x16c>)
   22002:	68db      	ldr	r3, [r3, #12]
   22004:	18d2      	adds	r2, r2, r3
   22006:	1dbb      	adds	r3, r7, #6
   22008:	8819      	ldrh	r1, [r3, #0]
   2200a:	68fb      	ldr	r3, [r7, #12]
   2200c:	18cb      	adds	r3, r1, r3
   2200e:	429a      	cmp	r2, r3
   22010:	d003      	beq.n	2201a <hif_receive+0x132>
   22012:	1d7b      	adds	r3, r7, #5
   22014:	781b      	ldrb	r3, [r3, #0]
   22016:	2b00      	cmp	r3, #0
   22018:	d007      	beq.n	2202a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2201a:	2317      	movs	r3, #23
   2201c:	18fc      	adds	r4, r7, r3
   2201e:	4b07      	ldr	r3, [pc, #28]	; (2203c <hif_receive+0x154>)
   22020:	4798      	blx	r3
   22022:	0003      	movs	r3, r0
   22024:	7023      	strb	r3, [r4, #0]
   22026:	e000      	b.n	2202a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   22028:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2202a:	2317      	movs	r3, #23
   2202c:	18fb      	adds	r3, r7, r3
   2202e:	781b      	ldrb	r3, [r3, #0]
   22030:	b25b      	sxtb	r3, r3
}
   22032:	0018      	movs	r0, r3
   22034:	46bd      	mov	sp, r7
   22036:	b007      	add	sp, #28
   22038:	bd90      	pop	{r4, r7, pc}
   2203a:	46c0      	nop			; (mov r8, r8)
   2203c:	00021405 	.word	0x00021405
   22040:	0003ae6c 	.word	0x0003ae6c
   22044:	0003ab44 	.word	0x0003ab44
   22048:	0001e639 	.word	0x0001e639
   2204c:	0003ad70 	.word	0x0003ad70
   22050:	0003ab40 	.word	0x0003ab40
   22054:	20005c9c 	.word	0x20005c9c
   22058:	0003ad90 	.word	0x0003ad90
   2205c:	00000286 	.word	0x00000286
   22060:	0003add8 	.word	0x0003add8
   22064:	00023399 	.word	0x00023399

00022068 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   22068:	b580      	push	{r7, lr}
   2206a:	b084      	sub	sp, #16
   2206c:	af00      	add	r7, sp, #0
   2206e:	0002      	movs	r2, r0
   22070:	6039      	str	r1, [r7, #0]
   22072:	1dfb      	adds	r3, r7, #7
   22074:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22076:	230f      	movs	r3, #15
   22078:	18fb      	adds	r3, r7, r3
   2207a:	2200      	movs	r2, #0
   2207c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2207e:	1dfb      	adds	r3, r7, #7
   22080:	781b      	ldrb	r3, [r3, #0]
   22082:	2b07      	cmp	r3, #7
   22084:	d820      	bhi.n	220c8 <hif_register_cb+0x60>
   22086:	009a      	lsls	r2, r3, #2
   22088:	4b1e      	ldr	r3, [pc, #120]	; (22104 <hif_register_cb+0x9c>)
   2208a:	18d3      	adds	r3, r2, r3
   2208c:	681b      	ldr	r3, [r3, #0]
   2208e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22090:	4b1d      	ldr	r3, [pc, #116]	; (22108 <hif_register_cb+0xa0>)
   22092:	683a      	ldr	r2, [r7, #0]
   22094:	615a      	str	r2, [r3, #20]
			break;
   22096:	e02d      	b.n	220f4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   22098:	4b1b      	ldr	r3, [pc, #108]	; (22108 <hif_register_cb+0xa0>)
   2209a:	683a      	ldr	r2, [r7, #0]
   2209c:	611a      	str	r2, [r3, #16]
			break;
   2209e:	e029      	b.n	220f4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   220a0:	4b19      	ldr	r3, [pc, #100]	; (22108 <hif_register_cb+0xa0>)
   220a2:	683a      	ldr	r2, [r7, #0]
   220a4:	619a      	str	r2, [r3, #24]
			break;
   220a6:	e025      	b.n	220f4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   220a8:	4b17      	ldr	r3, [pc, #92]	; (22108 <hif_register_cb+0xa0>)
   220aa:	683a      	ldr	r2, [r7, #0]
   220ac:	621a      	str	r2, [r3, #32]
			break;
   220ae:	e021      	b.n	220f4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   220b0:	4b15      	ldr	r3, [pc, #84]	; (22108 <hif_register_cb+0xa0>)
   220b2:	683a      	ldr	r2, [r7, #0]
   220b4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   220b6:	e01d      	b.n	220f4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   220b8:	4b13      	ldr	r3, [pc, #76]	; (22108 <hif_register_cb+0xa0>)
   220ba:	683a      	ldr	r2, [r7, #0]
   220bc:	61da      	str	r2, [r3, #28]
			break;
   220be:	e019      	b.n	220f4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   220c0:	4b11      	ldr	r3, [pc, #68]	; (22108 <hif_register_cb+0xa0>)
   220c2:	683a      	ldr	r2, [r7, #0]
   220c4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   220c6:	e015      	b.n	220f4 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   220c8:	4a10      	ldr	r2, [pc, #64]	; (2210c <hif_register_cb+0xa4>)
   220ca:	4911      	ldr	r1, [pc, #68]	; (22110 <hif_register_cb+0xa8>)
   220cc:	4b11      	ldr	r3, [pc, #68]	; (22114 <hif_register_cb+0xac>)
   220ce:	0018      	movs	r0, r3
   220d0:	4b11      	ldr	r3, [pc, #68]	; (22118 <hif_register_cb+0xb0>)
   220d2:	4798      	blx	r3
   220d4:	1dfb      	adds	r3, r7, #7
   220d6:	781a      	ldrb	r2, [r3, #0]
   220d8:	4b10      	ldr	r3, [pc, #64]	; (2211c <hif_register_cb+0xb4>)
   220da:	0011      	movs	r1, r2
   220dc:	0018      	movs	r0, r3
   220de:	4b0e      	ldr	r3, [pc, #56]	; (22118 <hif_register_cb+0xb0>)
   220e0:	4798      	blx	r3
   220e2:	4b0f      	ldr	r3, [pc, #60]	; (22120 <hif_register_cb+0xb8>)
   220e4:	0018      	movs	r0, r3
   220e6:	4b0c      	ldr	r3, [pc, #48]	; (22118 <hif_register_cb+0xb0>)
   220e8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   220ea:	230f      	movs	r3, #15
   220ec:	18fb      	adds	r3, r7, r3
   220ee:	22f4      	movs	r2, #244	; 0xf4
   220f0:	701a      	strb	r2, [r3, #0]
			break;
   220f2:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   220f4:	230f      	movs	r3, #15
   220f6:	18fb      	adds	r3, r7, r3
   220f8:	781b      	ldrb	r3, [r3, #0]
   220fa:	b25b      	sxtb	r3, r3
}
   220fc:	0018      	movs	r0, r3
   220fe:	46bd      	mov	sp, r7
   22100:	b004      	add	sp, #16
   22102:	bd80      	pop	{r7, pc}
   22104:	0003ae28 	.word	0x0003ae28
   22108:	20005c9c 	.word	0x20005c9c
   2210c:	000002be 	.word	0x000002be
   22110:	0003ae78 	.word	0x0003ae78
   22114:	0003ab44 	.word	0x0003ab44
   22118:	0001e639 	.word	0x0001e639
   2211c:	0003ae1c 	.word	0x0003ae1c
   22120:	0003ab40 	.word	0x0003ab40

00022124 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22124:	b590      	push	{r4, r7, lr}
   22126:	b0af      	sub	sp, #188	; 0xbc
   22128:	af02      	add	r7, sp, #8
   2212a:	603a      	str	r2, [r7, #0]
   2212c:	1dfb      	adds	r3, r7, #7
   2212e:	1c02      	adds	r2, r0, #0
   22130:	701a      	strb	r2, [r3, #0]
   22132:	1d3b      	adds	r3, r7, #4
   22134:	1c0a      	adds	r2, r1, #0
   22136:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   22138:	1dfb      	adds	r3, r7, #7
   2213a:	781b      	ldrb	r3, [r3, #0]
   2213c:	2b2c      	cmp	r3, #44	; 0x2c
   2213e:	d116      	bne.n	2216e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   22140:	23a4      	movs	r3, #164	; 0xa4
   22142:	18f9      	adds	r1, r7, r3
   22144:	6838      	ldr	r0, [r7, #0]
   22146:	2300      	movs	r3, #0
   22148:	2204      	movs	r2, #4
   2214a:	4cca      	ldr	r4, [pc, #808]	; (22474 <m2m_wifi_cb+0x350>)
   2214c:	47a0      	blx	r4
   2214e:	1e03      	subs	r3, r0, #0
   22150:	d000      	beq.n	22154 <m2m_wifi_cb+0x30>
   22152:	e1b4      	b.n	224be <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   22154:	4bc8      	ldr	r3, [pc, #800]	; (22478 <m2m_wifi_cb+0x354>)
   22156:	681b      	ldr	r3, [r3, #0]
   22158:	2b00      	cmp	r3, #0
   2215a:	d100      	bne.n	2215e <m2m_wifi_cb+0x3a>
   2215c:	e1af      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   2215e:	4bc6      	ldr	r3, [pc, #792]	; (22478 <m2m_wifi_cb+0x354>)
   22160:	681b      	ldr	r3, [r3, #0]
   22162:	22a4      	movs	r2, #164	; 0xa4
   22164:	18ba      	adds	r2, r7, r2
   22166:	0011      	movs	r1, r2
   22168:	202c      	movs	r0, #44	; 0x2c
   2216a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   2216c:	e1a7      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   2216e:	1dfb      	adds	r3, r7, #7
   22170:	781b      	ldrb	r3, [r3, #0]
   22172:	2b1b      	cmp	r3, #27
   22174:	d116      	bne.n	221a4 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   22176:	239c      	movs	r3, #156	; 0x9c
   22178:	18f9      	adds	r1, r7, r3
   2217a:	6838      	ldr	r0, [r7, #0]
   2217c:	2300      	movs	r3, #0
   2217e:	2208      	movs	r2, #8
   22180:	4cbc      	ldr	r4, [pc, #752]	; (22474 <m2m_wifi_cb+0x350>)
   22182:	47a0      	blx	r4
   22184:	1e03      	subs	r3, r0, #0
   22186:	d000      	beq.n	2218a <m2m_wifi_cb+0x66>
   22188:	e199      	b.n	224be <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2218a:	4bbb      	ldr	r3, [pc, #748]	; (22478 <m2m_wifi_cb+0x354>)
   2218c:	681b      	ldr	r3, [r3, #0]
   2218e:	2b00      	cmp	r3, #0
   22190:	d100      	bne.n	22194 <m2m_wifi_cb+0x70>
   22192:	e194      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   22194:	4bb8      	ldr	r3, [pc, #736]	; (22478 <m2m_wifi_cb+0x354>)
   22196:	681b      	ldr	r3, [r3, #0]
   22198:	229c      	movs	r2, #156	; 0x9c
   2219a:	18ba      	adds	r2, r7, r2
   2219c:	0011      	movs	r1, r2
   2219e:	201b      	movs	r0, #27
   221a0:	4798      	blx	r3
}
   221a2:	e18c      	b.n	224be <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   221a4:	1dfb      	adds	r3, r7, #7
   221a6:	781b      	ldrb	r3, [r3, #0]
   221a8:	2b06      	cmp	r3, #6
   221aa:	d116      	bne.n	221da <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   221ac:	230c      	movs	r3, #12
   221ae:	18f9      	adds	r1, r7, r3
   221b0:	6838      	ldr	r0, [r7, #0]
   221b2:	2301      	movs	r3, #1
   221b4:	2230      	movs	r2, #48	; 0x30
   221b6:	4caf      	ldr	r4, [pc, #700]	; (22474 <m2m_wifi_cb+0x350>)
   221b8:	47a0      	blx	r4
   221ba:	1e03      	subs	r3, r0, #0
   221bc:	d000      	beq.n	221c0 <m2m_wifi_cb+0x9c>
   221be:	e17e      	b.n	224be <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   221c0:	4bad      	ldr	r3, [pc, #692]	; (22478 <m2m_wifi_cb+0x354>)
   221c2:	681b      	ldr	r3, [r3, #0]
   221c4:	2b00      	cmp	r3, #0
   221c6:	d100      	bne.n	221ca <m2m_wifi_cb+0xa6>
   221c8:	e179      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   221ca:	4bab      	ldr	r3, [pc, #684]	; (22478 <m2m_wifi_cb+0x354>)
   221cc:	681b      	ldr	r3, [r3, #0]
   221ce:	220c      	movs	r2, #12
   221d0:	18ba      	adds	r2, r7, r2
   221d2:	0011      	movs	r1, r2
   221d4:	2006      	movs	r0, #6
   221d6:	4798      	blx	r3
}
   221d8:	e171      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   221da:	1dfb      	adds	r3, r7, #7
   221dc:	781b      	ldrb	r3, [r3, #0]
   221de:	2b0e      	cmp	r3, #14
   221e0:	d100      	bne.n	221e4 <m2m_wifi_cb+0xc0>
   221e2:	e16c      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   221e4:	1dfb      	adds	r3, r7, #7
   221e6:	781b      	ldrb	r3, [r3, #0]
   221e8:	2b32      	cmp	r3, #50	; 0x32
   221ea:	d116      	bne.n	2221a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   221ec:	2384      	movs	r3, #132	; 0x84
   221ee:	18f9      	adds	r1, r7, r3
   221f0:	6838      	ldr	r0, [r7, #0]
   221f2:	2300      	movs	r3, #0
   221f4:	2218      	movs	r2, #24
   221f6:	4c9f      	ldr	r4, [pc, #636]	; (22474 <m2m_wifi_cb+0x350>)
   221f8:	47a0      	blx	r4
   221fa:	1e03      	subs	r3, r0, #0
   221fc:	d000      	beq.n	22200 <m2m_wifi_cb+0xdc>
   221fe:	e15e      	b.n	224be <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22200:	4b9d      	ldr	r3, [pc, #628]	; (22478 <m2m_wifi_cb+0x354>)
   22202:	681b      	ldr	r3, [r3, #0]
   22204:	2b00      	cmp	r3, #0
   22206:	d100      	bne.n	2220a <m2m_wifi_cb+0xe6>
   22208:	e159      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2220a:	4b9b      	ldr	r3, [pc, #620]	; (22478 <m2m_wifi_cb+0x354>)
   2220c:	681b      	ldr	r3, [r3, #0]
   2220e:	2284      	movs	r2, #132	; 0x84
   22210:	18ba      	adds	r2, r7, r2
   22212:	0011      	movs	r1, r2
   22214:	2032      	movs	r0, #50	; 0x32
   22216:	4798      	blx	r3
}
   22218:	e151      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2221a:	1dfb      	adds	r3, r7, #7
   2221c:	781b      	ldrb	r3, [r3, #0]
   2221e:	2b2f      	cmp	r3, #47	; 0x2f
   22220:	d11d      	bne.n	2225e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22222:	230c      	movs	r3, #12
   22224:	18fb      	adds	r3, r7, r3
   22226:	2264      	movs	r2, #100	; 0x64
   22228:	2100      	movs	r1, #0
   2222a:	0018      	movs	r0, r3
   2222c:	4b93      	ldr	r3, [pc, #588]	; (2247c <m2m_wifi_cb+0x358>)
   2222e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22230:	230c      	movs	r3, #12
   22232:	18f9      	adds	r1, r7, r3
   22234:	6838      	ldr	r0, [r7, #0]
   22236:	2300      	movs	r3, #0
   22238:	2264      	movs	r2, #100	; 0x64
   2223a:	4c8e      	ldr	r4, [pc, #568]	; (22474 <m2m_wifi_cb+0x350>)
   2223c:	47a0      	blx	r4
   2223e:	1e03      	subs	r3, r0, #0
   22240:	d000      	beq.n	22244 <m2m_wifi_cb+0x120>
   22242:	e13c      	b.n	224be <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22244:	4b8c      	ldr	r3, [pc, #560]	; (22478 <m2m_wifi_cb+0x354>)
   22246:	681b      	ldr	r3, [r3, #0]
   22248:	2b00      	cmp	r3, #0
   2224a:	d100      	bne.n	2224e <m2m_wifi_cb+0x12a>
   2224c:	e137      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   2224e:	4b8a      	ldr	r3, [pc, #552]	; (22478 <m2m_wifi_cb+0x354>)
   22250:	681b      	ldr	r3, [r3, #0]
   22252:	220c      	movs	r2, #12
   22254:	18ba      	adds	r2, r7, r2
   22256:	0011      	movs	r1, r2
   22258:	202f      	movs	r0, #47	; 0x2f
   2225a:	4798      	blx	r3
}
   2225c:	e12f      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   2225e:	1dfb      	adds	r3, r7, #7
   22260:	781b      	ldrb	r3, [r3, #0]
   22262:	2b34      	cmp	r3, #52	; 0x34
   22264:	d137      	bne.n	222d6 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   22266:	2380      	movs	r3, #128	; 0x80
   22268:	18f9      	adds	r1, r7, r3
   2226a:	6838      	ldr	r0, [r7, #0]
   2226c:	2300      	movs	r3, #0
   2226e:	2204      	movs	r2, #4
   22270:	4c80      	ldr	r4, [pc, #512]	; (22474 <m2m_wifi_cb+0x350>)
   22272:	47a0      	blx	r4
   22274:	1e03      	subs	r3, r0, #0
   22276:	d000      	beq.n	2227a <m2m_wifi_cb+0x156>
   22278:	e121      	b.n	224be <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2227a:	4b81      	ldr	r3, [pc, #516]	; (22480 <m2m_wifi_cb+0x35c>)
   2227c:	0018      	movs	r0, r3
   2227e:	4b81      	ldr	r3, [pc, #516]	; (22484 <m2m_wifi_cb+0x360>)
   22280:	4798      	blx	r3
   22282:	2380      	movs	r3, #128	; 0x80
   22284:	18fb      	adds	r3, r7, r3
   22286:	681b      	ldr	r3, [r3, #0]
   22288:	0e1b      	lsrs	r3, r3, #24
   2228a:	b2db      	uxtb	r3, r3
   2228c:	0019      	movs	r1, r3
   2228e:	2380      	movs	r3, #128	; 0x80
   22290:	18fb      	adds	r3, r7, r3
   22292:	681b      	ldr	r3, [r3, #0]
   22294:	0c1b      	lsrs	r3, r3, #16
   22296:	b2db      	uxtb	r3, r3
   22298:	001a      	movs	r2, r3
   2229a:	2380      	movs	r3, #128	; 0x80
   2229c:	18fb      	adds	r3, r7, r3
   2229e:	681b      	ldr	r3, [r3, #0]
   222a0:	0a1b      	lsrs	r3, r3, #8
   222a2:	b2db      	uxtb	r3, r3
   222a4:	001c      	movs	r4, r3
   222a6:	2380      	movs	r3, #128	; 0x80
   222a8:	18fb      	adds	r3, r7, r3
   222aa:	681b      	ldr	r3, [r3, #0]
   222ac:	b2db      	uxtb	r3, r3
   222ae:	4876      	ldr	r0, [pc, #472]	; (22488 <m2m_wifi_cb+0x364>)
   222b0:	9300      	str	r3, [sp, #0]
   222b2:	0023      	movs	r3, r4
   222b4:	4c73      	ldr	r4, [pc, #460]	; (22484 <m2m_wifi_cb+0x360>)
   222b6:	47a0      	blx	r4
   222b8:	4b74      	ldr	r3, [pc, #464]	; (2248c <m2m_wifi_cb+0x368>)
   222ba:	0018      	movs	r0, r3
   222bc:	4b71      	ldr	r3, [pc, #452]	; (22484 <m2m_wifi_cb+0x360>)
   222be:	4798      	blx	r3
			if (gpfAppWifiCb)
   222c0:	4b6d      	ldr	r3, [pc, #436]	; (22478 <m2m_wifi_cb+0x354>)
   222c2:	681b      	ldr	r3, [r3, #0]
   222c4:	2b00      	cmp	r3, #0
   222c6:	d100      	bne.n	222ca <m2m_wifi_cb+0x1a6>
   222c8:	e0f9      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   222ca:	4b6b      	ldr	r3, [pc, #428]	; (22478 <m2m_wifi_cb+0x354>)
   222cc:	681b      	ldr	r3, [r3, #0]
   222ce:	2100      	movs	r1, #0
   222d0:	2034      	movs	r0, #52	; 0x34
   222d2:	4798      	blx	r3
}
   222d4:	e0f3      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   222d6:	1dfb      	adds	r3, r7, #7
   222d8:	781b      	ldrb	r3, [r3, #0]
   222da:	2b11      	cmp	r3, #17
   222dc:	d11e      	bne.n	2231c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   222de:	4b6c      	ldr	r3, [pc, #432]	; (22490 <m2m_wifi_cb+0x36c>)
   222e0:	2200      	movs	r2, #0
   222e2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   222e4:	237c      	movs	r3, #124	; 0x7c
   222e6:	18f9      	adds	r1, r7, r3
   222e8:	6838      	ldr	r0, [r7, #0]
   222ea:	2300      	movs	r3, #0
   222ec:	2204      	movs	r2, #4
   222ee:	4c61      	ldr	r4, [pc, #388]	; (22474 <m2m_wifi_cb+0x350>)
   222f0:	47a0      	blx	r4
   222f2:	1e03      	subs	r3, r0, #0
   222f4:	d000      	beq.n	222f8 <m2m_wifi_cb+0x1d4>
   222f6:	e0e2      	b.n	224be <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   222f8:	237c      	movs	r3, #124	; 0x7c
   222fa:	18fb      	adds	r3, r7, r3
   222fc:	781a      	ldrb	r2, [r3, #0]
   222fe:	4b65      	ldr	r3, [pc, #404]	; (22494 <m2m_wifi_cb+0x370>)
   22300:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22302:	4b5d      	ldr	r3, [pc, #372]	; (22478 <m2m_wifi_cb+0x354>)
   22304:	681b      	ldr	r3, [r3, #0]
   22306:	2b00      	cmp	r3, #0
   22308:	d100      	bne.n	2230c <m2m_wifi_cb+0x1e8>
   2230a:	e0d8      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   2230c:	4b5a      	ldr	r3, [pc, #360]	; (22478 <m2m_wifi_cb+0x354>)
   2230e:	681b      	ldr	r3, [r3, #0]
   22310:	227c      	movs	r2, #124	; 0x7c
   22312:	18ba      	adds	r2, r7, r2
   22314:	0011      	movs	r1, r2
   22316:	2011      	movs	r0, #17
   22318:	4798      	blx	r3
}
   2231a:	e0d0      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   2231c:	1dfb      	adds	r3, r7, #7
   2231e:	781b      	ldrb	r3, [r3, #0]
   22320:	2b13      	cmp	r3, #19
   22322:	d116      	bne.n	22352 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22324:	230c      	movs	r3, #12
   22326:	18f9      	adds	r1, r7, r3
   22328:	6838      	ldr	r0, [r7, #0]
   2232a:	2300      	movs	r3, #0
   2232c:	222c      	movs	r2, #44	; 0x2c
   2232e:	4c51      	ldr	r4, [pc, #324]	; (22474 <m2m_wifi_cb+0x350>)
   22330:	47a0      	blx	r4
   22332:	1e03      	subs	r3, r0, #0
   22334:	d000      	beq.n	22338 <m2m_wifi_cb+0x214>
   22336:	e0c2      	b.n	224be <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22338:	4b4f      	ldr	r3, [pc, #316]	; (22478 <m2m_wifi_cb+0x354>)
   2233a:	681b      	ldr	r3, [r3, #0]
   2233c:	2b00      	cmp	r3, #0
   2233e:	d100      	bne.n	22342 <m2m_wifi_cb+0x21e>
   22340:	e0bd      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22342:	4b4d      	ldr	r3, [pc, #308]	; (22478 <m2m_wifi_cb+0x354>)
   22344:	681b      	ldr	r3, [r3, #0]
   22346:	220c      	movs	r2, #12
   22348:	18ba      	adds	r2, r7, r2
   2234a:	0011      	movs	r1, r2
   2234c:	2013      	movs	r0, #19
   2234e:	4798      	blx	r3
}
   22350:	e0b5      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22352:	1dfb      	adds	r3, r7, #7
   22354:	781b      	ldrb	r3, [r3, #0]
   22356:	2b04      	cmp	r3, #4
   22358:	d116      	bne.n	22388 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2235a:	23a8      	movs	r3, #168	; 0xa8
   2235c:	18f9      	adds	r1, r7, r3
   2235e:	6838      	ldr	r0, [r7, #0]
   22360:	2300      	movs	r3, #0
   22362:	2204      	movs	r2, #4
   22364:	4c43      	ldr	r4, [pc, #268]	; (22474 <m2m_wifi_cb+0x350>)
   22366:	47a0      	blx	r4
   22368:	1e03      	subs	r3, r0, #0
   2236a:	d000      	beq.n	2236e <m2m_wifi_cb+0x24a>
   2236c:	e0a7      	b.n	224be <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2236e:	4b42      	ldr	r3, [pc, #264]	; (22478 <m2m_wifi_cb+0x354>)
   22370:	681b      	ldr	r3, [r3, #0]
   22372:	2b00      	cmp	r3, #0
   22374:	d100      	bne.n	22378 <m2m_wifi_cb+0x254>
   22376:	e0a2      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   22378:	4b3f      	ldr	r3, [pc, #252]	; (22478 <m2m_wifi_cb+0x354>)
   2237a:	681b      	ldr	r3, [r3, #0]
   2237c:	22a8      	movs	r2, #168	; 0xa8
   2237e:	18ba      	adds	r2, r7, r2
   22380:	0011      	movs	r1, r2
   22382:	2004      	movs	r0, #4
   22384:	4798      	blx	r3
}
   22386:	e09a      	b.n	224be <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   22388:	1dfb      	adds	r3, r7, #7
   2238a:	781b      	ldrb	r3, [r3, #0]
   2238c:	2b65      	cmp	r3, #101	; 0x65
   2238e:	d116      	bne.n	223be <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22390:	23a8      	movs	r3, #168	; 0xa8
   22392:	18f9      	adds	r1, r7, r3
   22394:	6838      	ldr	r0, [r7, #0]
   22396:	2300      	movs	r3, #0
   22398:	2204      	movs	r2, #4
   2239a:	4c36      	ldr	r4, [pc, #216]	; (22474 <m2m_wifi_cb+0x350>)
   2239c:	47a0      	blx	r4
   2239e:	1e03      	subs	r3, r0, #0
   223a0:	d000      	beq.n	223a4 <m2m_wifi_cb+0x280>
   223a2:	e08c      	b.n	224be <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   223a4:	4b34      	ldr	r3, [pc, #208]	; (22478 <m2m_wifi_cb+0x354>)
   223a6:	681b      	ldr	r3, [r3, #0]
   223a8:	2b00      	cmp	r3, #0
   223aa:	d100      	bne.n	223ae <m2m_wifi_cb+0x28a>
   223ac:	e087      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   223ae:	4b32      	ldr	r3, [pc, #200]	; (22478 <m2m_wifi_cb+0x354>)
   223b0:	681b      	ldr	r3, [r3, #0]
   223b2:	22a8      	movs	r2, #168	; 0xa8
   223b4:	18ba      	adds	r2, r7, r2
   223b6:	0011      	movs	r1, r2
   223b8:	2065      	movs	r0, #101	; 0x65
   223ba:	4798      	blx	r3
}
   223bc:	e07f      	b.n	224be <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   223be:	1dfb      	adds	r3, r7, #7
   223c0:	781b      	ldrb	r3, [r3, #0]
   223c2:	2b09      	cmp	r3, #9
   223c4:	d116      	bne.n	223f4 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   223c6:	230c      	movs	r3, #12
   223c8:	18f9      	adds	r1, r7, r3
   223ca:	6838      	ldr	r0, [r7, #0]
   223cc:	2301      	movs	r3, #1
   223ce:	2264      	movs	r2, #100	; 0x64
   223d0:	4c28      	ldr	r4, [pc, #160]	; (22474 <m2m_wifi_cb+0x350>)
   223d2:	47a0      	blx	r4
   223d4:	1e03      	subs	r3, r0, #0
   223d6:	d000      	beq.n	223da <m2m_wifi_cb+0x2b6>
   223d8:	e071      	b.n	224be <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   223da:	4b27      	ldr	r3, [pc, #156]	; (22478 <m2m_wifi_cb+0x354>)
   223dc:	681b      	ldr	r3, [r3, #0]
   223de:	2b00      	cmp	r3, #0
   223e0:	d100      	bne.n	223e4 <m2m_wifi_cb+0x2c0>
   223e2:	e06c      	b.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   223e4:	4b24      	ldr	r3, [pc, #144]	; (22478 <m2m_wifi_cb+0x354>)
   223e6:	681b      	ldr	r3, [r3, #0]
   223e8:	220c      	movs	r2, #12
   223ea:	18ba      	adds	r2, r7, r2
   223ec:	0011      	movs	r1, r2
   223ee:	2009      	movs	r0, #9
   223f0:	4798      	blx	r3
}
   223f2:	e064      	b.n	224be <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   223f4:	1dfb      	adds	r3, r7, #7
   223f6:	781b      	ldrb	r3, [r3, #0]
   223f8:	2b2a      	cmp	r3, #42	; 0x2a
   223fa:	d114      	bne.n	22426 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   223fc:	2378      	movs	r3, #120	; 0x78
   223fe:	18f9      	adds	r1, r7, r3
   22400:	6838      	ldr	r0, [r7, #0]
   22402:	2301      	movs	r3, #1
   22404:	2204      	movs	r2, #4
   22406:	4c1b      	ldr	r4, [pc, #108]	; (22474 <m2m_wifi_cb+0x350>)
   22408:	47a0      	blx	r4
   2240a:	1e03      	subs	r3, r0, #0
   2240c:	d157      	bne.n	224be <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2240e:	4b1a      	ldr	r3, [pc, #104]	; (22478 <m2m_wifi_cb+0x354>)
   22410:	681b      	ldr	r3, [r3, #0]
   22412:	2b00      	cmp	r3, #0
   22414:	d053      	beq.n	224be <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   22416:	4b18      	ldr	r3, [pc, #96]	; (22478 <m2m_wifi_cb+0x354>)
   22418:	681b      	ldr	r3, [r3, #0]
   2241a:	2278      	movs	r2, #120	; 0x78
   2241c:	18ba      	adds	r2, r7, r2
   2241e:	0011      	movs	r1, r2
   22420:	202a      	movs	r0, #42	; 0x2a
   22422:	4798      	blx	r3
}
   22424:	e04b      	b.n	224be <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   22426:	1dfb      	adds	r3, r7, #7
   22428:	781b      	ldrb	r3, [r3, #0]
   2242a:	2b20      	cmp	r3, #32
   2242c:	d134      	bne.n	22498 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   2242e:	2370      	movs	r3, #112	; 0x70
   22430:	18f9      	adds	r1, r7, r3
   22432:	6838      	ldr	r0, [r7, #0]
   22434:	2300      	movs	r3, #0
   22436:	2208      	movs	r2, #8
   22438:	4c0e      	ldr	r4, [pc, #56]	; (22474 <m2m_wifi_cb+0x350>)
   2243a:	47a0      	blx	r4
   2243c:	1e03      	subs	r3, r0, #0
   2243e:	d13e      	bne.n	224be <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22440:	683b      	ldr	r3, [r7, #0]
   22442:	3308      	adds	r3, #8
   22444:	0018      	movs	r0, r3
   22446:	2370      	movs	r3, #112	; 0x70
   22448:	18fb      	adds	r3, r7, r3
   2244a:	6819      	ldr	r1, [r3, #0]
   2244c:	2370      	movs	r3, #112	; 0x70
   2244e:	18fb      	adds	r3, r7, r3
   22450:	889a      	ldrh	r2, [r3, #4]
   22452:	2301      	movs	r3, #1
   22454:	4c07      	ldr	r4, [pc, #28]	; (22474 <m2m_wifi_cb+0x350>)
   22456:	47a0      	blx	r4
   22458:	1e03      	subs	r3, r0, #0
   2245a:	d130      	bne.n	224be <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   2245c:	4b06      	ldr	r3, [pc, #24]	; (22478 <m2m_wifi_cb+0x354>)
   2245e:	681b      	ldr	r3, [r3, #0]
   22460:	2b00      	cmp	r3, #0
   22462:	d02c      	beq.n	224be <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22464:	4b04      	ldr	r3, [pc, #16]	; (22478 <m2m_wifi_cb+0x354>)
   22466:	681b      	ldr	r3, [r3, #0]
   22468:	2270      	movs	r2, #112	; 0x70
   2246a:	18ba      	adds	r2, r7, r2
   2246c:	0011      	movs	r1, r2
   2246e:	2020      	movs	r0, #32
   22470:	4798      	blx	r3
}
   22472:	e024      	b.n	224be <m2m_wifi_cb+0x39a>
   22474:	00021ee9 	.word	0x00021ee9
   22478:	200042b8 	.word	0x200042b8
   2247c:	0002136d 	.word	0x0002136d
   22480:	0003ae88 	.word	0x0003ae88
   22484:	0001e639 	.word	0x0001e639
   22488:	0003ae94 	.word	0x0003ae94
   2248c:	0003aeb4 	.word	0x0003aeb4
   22490:	200042b5 	.word	0x200042b5
   22494:	200042b4 	.word	0x200042b4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   22498:	2324      	movs	r3, #36	; 0x24
   2249a:	33ff      	adds	r3, #255	; 0xff
   2249c:	001a      	movs	r2, r3
   2249e:	490a      	ldr	r1, [pc, #40]	; (224c8 <m2m_wifi_cb+0x3a4>)
   224a0:	4b0a      	ldr	r3, [pc, #40]	; (224cc <m2m_wifi_cb+0x3a8>)
   224a2:	0018      	movs	r0, r3
   224a4:	4b0a      	ldr	r3, [pc, #40]	; (224d0 <m2m_wifi_cb+0x3ac>)
   224a6:	4798      	blx	r3
   224a8:	1dfb      	adds	r3, r7, #7
   224aa:	781a      	ldrb	r2, [r3, #0]
   224ac:	4b09      	ldr	r3, [pc, #36]	; (224d4 <m2m_wifi_cb+0x3b0>)
   224ae:	0011      	movs	r1, r2
   224b0:	0018      	movs	r0, r3
   224b2:	4b07      	ldr	r3, [pc, #28]	; (224d0 <m2m_wifi_cb+0x3ac>)
   224b4:	4798      	blx	r3
   224b6:	4b08      	ldr	r3, [pc, #32]	; (224d8 <m2m_wifi_cb+0x3b4>)
   224b8:	0018      	movs	r0, r3
   224ba:	4b05      	ldr	r3, [pc, #20]	; (224d0 <m2m_wifi_cb+0x3ac>)
   224bc:	4798      	blx	r3
}
   224be:	46c0      	nop			; (mov r8, r8)
   224c0:	46bd      	mov	sp, r7
   224c2:	b02d      	add	sp, #180	; 0xb4
   224c4:	bd90      	pop	{r4, r7, pc}
   224c6:	46c0      	nop			; (mov r8, r8)
   224c8:	0003b1a8 	.word	0x0003b1a8
   224cc:	0003aeb8 	.word	0x0003aeb8
   224d0:	0001e639 	.word	0x0001e639
   224d4:	0003aecc 	.word	0x0003aecc
   224d8:	0003aeb4 	.word	0x0003aeb4

000224dc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   224dc:	b590      	push	{r4, r7, lr}
   224de:	b08f      	sub	sp, #60	; 0x3c
   224e0:	af00      	add	r7, sp, #0
   224e2:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   224e4:	2337      	movs	r3, #55	; 0x37
   224e6:	18fb      	adds	r3, r7, r3
   224e8:	2200      	movs	r2, #0
   224ea:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   224ec:	230b      	movs	r3, #11
   224ee:	18fb      	adds	r3, r7, r3
   224f0:	2201      	movs	r2, #1
   224f2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   224f4:	687b      	ldr	r3, [r7, #4]
   224f6:	2b00      	cmp	r3, #0
   224f8:	d104      	bne.n	22504 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   224fa:	2337      	movs	r3, #55	; 0x37
   224fc:	18fb      	adds	r3, r7, r3
   224fe:	22f4      	movs	r2, #244	; 0xf4
   22500:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22502:	e052      	b.n	225aa <m2m_wifi_init+0xce>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22504:	687b      	ldr	r3, [r7, #4]
   22506:	681a      	ldr	r2, [r3, #0]
   22508:	4b2c      	ldr	r3, [pc, #176]	; (225bc <m2m_wifi_init+0xe0>)
   2250a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   2250c:	4b2c      	ldr	r3, [pc, #176]	; (225c0 <m2m_wifi_init+0xe4>)
   2250e:	2200      	movs	r2, #0
   22510:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22512:	2337      	movs	r3, #55	; 0x37
   22514:	18fc      	adds	r4, r7, r3
   22516:	230b      	movs	r3, #11
   22518:	18fb      	adds	r3, r7, r3
   2251a:	0018      	movs	r0, r3
   2251c:	4b29      	ldr	r3, [pc, #164]	; (225c4 <m2m_wifi_init+0xe8>)
   2251e:	4798      	blx	r3
   22520:	0003      	movs	r3, r0
   22522:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22524:	2337      	movs	r3, #55	; 0x37
   22526:	18fb      	adds	r3, r7, r3
   22528:	781b      	ldrb	r3, [r3, #0]
   2252a:	b25b      	sxtb	r3, r3
   2252c:	2b00      	cmp	r3, #0
   2252e:	d139      	bne.n	225a4 <m2m_wifi_init+0xc8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22530:	2337      	movs	r3, #55	; 0x37
   22532:	18fc      	adds	r4, r7, r3
   22534:	2000      	movs	r0, #0
   22536:	4b24      	ldr	r3, [pc, #144]	; (225c8 <m2m_wifi_init+0xec>)
   22538:	4798      	blx	r3
   2253a:	0003      	movs	r3, r0
   2253c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   2253e:	2337      	movs	r3, #55	; 0x37
   22540:	18fb      	adds	r3, r7, r3
   22542:	781b      	ldrb	r3, [r3, #0]
   22544:	b25b      	sxtb	r3, r3
   22546:	2b00      	cmp	r3, #0
   22548:	d127      	bne.n	2259a <m2m_wifi_init+0xbe>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   2254a:	4b20      	ldr	r3, [pc, #128]	; (225cc <m2m_wifi_init+0xf0>)
   2254c:	0019      	movs	r1, r3
   2254e:	2001      	movs	r0, #1
   22550:	4b1f      	ldr	r3, [pc, #124]	; (225d0 <m2m_wifi_init+0xf4>)
   22552:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   22554:	2337      	movs	r3, #55	; 0x37
   22556:	18fc      	adds	r4, r7, r3
   22558:	230c      	movs	r3, #12
   2255a:	18fb      	adds	r3, r7, r3
   2255c:	0018      	movs	r0, r3
   2255e:	4b1d      	ldr	r3, [pc, #116]	; (225d4 <m2m_wifi_init+0xf8>)
   22560:	4798      	blx	r3
   22562:	0003      	movs	r3, r0
   22564:	7023      	strb	r3, [r4, #0]
	//M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
	//M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
	//M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	//M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	//M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
	SerialConsoleWriteString("\r\n");
   22566:	4b1c      	ldr	r3, [pc, #112]	; (225d8 <m2m_wifi_init+0xfc>)
   22568:	0018      	movs	r0, r3
   2256a:	4b1c      	ldr	r3, [pc, #112]	; (225dc <m2m_wifi_init+0x100>)
   2256c:	4798      	blx	r3
	
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   2256e:	2337      	movs	r3, #55	; 0x37
   22570:	18fb      	adds	r3, r7, r3
   22572:	781b      	ldrb	r3, [r3, #0]
   22574:	b25b      	sxtb	r3, r3
   22576:	330d      	adds	r3, #13
   22578:	d116      	bne.n	225a8 <m2m_wifi_init+0xcc>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   2257a:	23f5      	movs	r3, #245	; 0xf5
   2257c:	005a      	lsls	r2, r3, #1
   2257e:	4918      	ldr	r1, [pc, #96]	; (225e0 <m2m_wifi_init+0x104>)
   22580:	4b18      	ldr	r3, [pc, #96]	; (225e4 <m2m_wifi_init+0x108>)
   22582:	0018      	movs	r0, r3
   22584:	4b18      	ldr	r3, [pc, #96]	; (225e8 <m2m_wifi_init+0x10c>)
   22586:	4798      	blx	r3
   22588:	4b18      	ldr	r3, [pc, #96]	; (225ec <m2m_wifi_init+0x110>)
   2258a:	0018      	movs	r0, r3
   2258c:	4b16      	ldr	r3, [pc, #88]	; (225e8 <m2m_wifi_init+0x10c>)
   2258e:	4798      	blx	r3
   22590:	4b17      	ldr	r3, [pc, #92]	; (225f0 <m2m_wifi_init+0x114>)
   22592:	0018      	movs	r0, r3
   22594:	4b14      	ldr	r3, [pc, #80]	; (225e8 <m2m_wifi_init+0x10c>)
   22596:	4798      	blx	r3
	}

	goto _EXIT0;
   22598:	e006      	b.n	225a8 <m2m_wifi_init+0xcc>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   2259a:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   2259c:	2000      	movs	r0, #0
   2259e:	4b15      	ldr	r3, [pc, #84]	; (225f4 <m2m_wifi_init+0x118>)
   225a0:	4798      	blx	r3
   225a2:	e002      	b.n	225aa <m2m_wifi_init+0xce>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   225a4:	46c0      	nop			; (mov r8, r8)
   225a6:	e000      	b.n	225aa <m2m_wifi_init+0xce>
	goto _EXIT0;
   225a8:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   225aa:	2337      	movs	r3, #55	; 0x37
   225ac:	18fb      	adds	r3, r7, r3
   225ae:	781b      	ldrb	r3, [r3, #0]
   225b0:	b25b      	sxtb	r3, r3
}
   225b2:	0018      	movs	r0, r3
   225b4:	46bd      	mov	sp, r7
   225b6:	b00f      	add	sp, #60	; 0x3c
   225b8:	bd90      	pop	{r4, r7, pc}
   225ba:	46c0      	nop			; (mov r8, r8)
   225bc:	200042b8 	.word	0x200042b8
   225c0:	200042b5 	.word	0x200042b5
   225c4:	00023729 	.word	0x00023729
   225c8:	00021585 	.word	0x00021585
   225cc:	00022125 	.word	0x00022125
   225d0:	00022069 	.word	0x00022069
   225d4:	0002355d 	.word	0x0002355d
   225d8:	0003b02c 	.word	0x0003b02c
   225dc:	0001e4f5 	.word	0x0001e4f5
   225e0:	0003b1b4 	.word	0x0003b1b4
   225e4:	0003aeb8 	.word	0x0003aeb8
   225e8:	0001e639 	.word	0x0001e639
   225ec:	0003b030 	.word	0x0003b030
   225f0:	0003aeb4 	.word	0x0003aeb4
   225f4:	000238b9 	.word	0x000238b9

000225f8 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   225f8:	b580      	push	{r7, lr}
   225fa:	b082      	sub	sp, #8
   225fc:	af00      	add	r7, sp, #0
   225fe:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22600:	4b03      	ldr	r3, [pc, #12]	; (22610 <m2m_wifi_handle_events+0x18>)
   22602:	4798      	blx	r3
   22604:	0003      	movs	r3, r0
}
   22606:	0018      	movs	r0, r3
   22608:	46bd      	mov	sp, r7
   2260a:	b002      	add	sp, #8
   2260c:	bd80      	pop	{r7, pc}
   2260e:	46c0      	nop			; (mov r8, r8)
   22610:	00021e49 	.word	0x00021e49

00022614 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22614:	b590      	push	{r4, r7, lr}
   22616:	b087      	sub	sp, #28
   22618:	af02      	add	r7, sp, #8
   2261a:	60f8      	str	r0, [r7, #12]
   2261c:	0008      	movs	r0, r1
   2261e:	0011      	movs	r1, r2
   22620:	607b      	str	r3, [r7, #4]
   22622:	230b      	movs	r3, #11
   22624:	18fb      	adds	r3, r7, r3
   22626:	1c02      	adds	r2, r0, #0
   22628:	701a      	strb	r2, [r3, #0]
   2262a:	230a      	movs	r3, #10
   2262c:	18fb      	adds	r3, r7, r3
   2262e:	1c0a      	adds	r2, r1, #0
   22630:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22632:	687c      	ldr	r4, [r7, #4]
   22634:	230a      	movs	r3, #10
   22636:	18fb      	adds	r3, r7, r3
   22638:	781a      	ldrb	r2, [r3, #0]
   2263a:	230b      	movs	r3, #11
   2263c:	18fb      	adds	r3, r7, r3
   2263e:	7819      	ldrb	r1, [r3, #0]
   22640:	68f8      	ldr	r0, [r7, #12]
   22642:	2300      	movs	r3, #0
   22644:	9301      	str	r3, [sp, #4]
   22646:	2320      	movs	r3, #32
   22648:	18fb      	adds	r3, r7, r3
   2264a:	881b      	ldrh	r3, [r3, #0]
   2264c:	9300      	str	r3, [sp, #0]
   2264e:	0023      	movs	r3, r4
   22650:	4c03      	ldr	r4, [pc, #12]	; (22660 <m2m_wifi_connect+0x4c>)
   22652:	47a0      	blx	r4
   22654:	0003      	movs	r3, r0
}
   22656:	0018      	movs	r0, r3
   22658:	46bd      	mov	sp, r7
   2265a:	b005      	add	sp, #20
   2265c:	bd90      	pop	{r4, r7, pc}
   2265e:	46c0      	nop			; (mov r8, r8)
   22660:	00022665 	.word	0x00022665

00022664 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22664:	b5b0      	push	{r4, r5, r7, lr}
   22666:	b0aa      	sub	sp, #168	; 0xa8
   22668:	af04      	add	r7, sp, #16
   2266a:	60f8      	str	r0, [r7, #12]
   2266c:	0008      	movs	r0, r1
   2266e:	0011      	movs	r1, r2
   22670:	607b      	str	r3, [r7, #4]
   22672:	230b      	movs	r3, #11
   22674:	18fb      	adds	r3, r7, r3
   22676:	1c02      	adds	r2, r0, #0
   22678:	701a      	strb	r2, [r3, #0]
   2267a:	230a      	movs	r3, #10
   2267c:	18fb      	adds	r3, r7, r3
   2267e:	1c0a      	adds	r2, r1, #0
   22680:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22682:	2397      	movs	r3, #151	; 0x97
   22684:	18fb      	adds	r3, r7, r3
   22686:	2200      	movs	r2, #0
   22688:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   2268a:	230a      	movs	r3, #10
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	781b      	ldrb	r3, [r3, #0]
   22690:	2b01      	cmp	r3, #1
   22692:	d100      	bne.n	22696 <m2m_wifi_connect_sc+0x32>
   22694:	e085      	b.n	227a2 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22696:	687b      	ldr	r3, [r7, #4]
   22698:	2b00      	cmp	r3, #0
   2269a:	d112      	bne.n	226c2 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   2269c:	4ad7      	ldr	r2, [pc, #860]	; (229fc <m2m_wifi_connect_sc+0x398>)
   2269e:	49d8      	ldr	r1, [pc, #864]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   226a0:	4bd8      	ldr	r3, [pc, #864]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   226a2:	0018      	movs	r0, r3
   226a4:	4bd8      	ldr	r3, [pc, #864]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   226a6:	4798      	blx	r3
   226a8:	4bd8      	ldr	r3, [pc, #864]	; (22a0c <m2m_wifi_connect_sc+0x3a8>)
   226aa:	0018      	movs	r0, r3
   226ac:	4bd6      	ldr	r3, [pc, #856]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   226ae:	4798      	blx	r3
   226b0:	4bd7      	ldr	r3, [pc, #860]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   226b2:	0018      	movs	r0, r3
   226b4:	4bd4      	ldr	r3, [pc, #848]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   226b6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   226b8:	2397      	movs	r3, #151	; 0x97
   226ba:	18fb      	adds	r3, r7, r3
   226bc:	22f4      	movs	r2, #244	; 0xf4
   226be:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   226c0:	e1f9      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   226c2:	230a      	movs	r3, #10
   226c4:	18fb      	adds	r3, r7, r3
   226c6:	781b      	ldrb	r3, [r3, #0]
   226c8:	2b02      	cmp	r3, #2
   226ca:	d16a      	bne.n	227a2 <m2m_wifi_connect_sc+0x13e>
   226cc:	687b      	ldr	r3, [r7, #4]
   226ce:	0018      	movs	r0, r3
   226d0:	4bd0      	ldr	r3, [pc, #832]	; (22a14 <m2m_wifi_connect_sc+0x3b0>)
   226d2:	4798      	blx	r3
   226d4:	0003      	movs	r3, r0
   226d6:	2b40      	cmp	r3, #64	; 0x40
   226d8:	d163      	bne.n	227a2 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   226da:	2396      	movs	r3, #150	; 0x96
   226dc:	18fb      	adds	r3, r7, r3
   226de:	2200      	movs	r2, #0
   226e0:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   226e2:	687b      	ldr	r3, [r7, #4]
   226e4:	2290      	movs	r2, #144	; 0x90
   226e6:	18ba      	adds	r2, r7, r2
   226e8:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   226ea:	e055      	b.n	22798 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   226ec:	2396      	movs	r3, #150	; 0x96
   226ee:	18fb      	adds	r3, r7, r3
   226f0:	781b      	ldrb	r3, [r3, #0]
   226f2:	2290      	movs	r2, #144	; 0x90
   226f4:	18ba      	adds	r2, r7, r2
   226f6:	6812      	ldr	r2, [r2, #0]
   226f8:	18d3      	adds	r3, r2, r3
   226fa:	781b      	ldrb	r3, [r3, #0]
   226fc:	2b2f      	cmp	r3, #47	; 0x2f
   226fe:	d931      	bls.n	22764 <m2m_wifi_connect_sc+0x100>
   22700:	2396      	movs	r3, #150	; 0x96
   22702:	18fb      	adds	r3, r7, r3
   22704:	781b      	ldrb	r3, [r3, #0]
   22706:	2290      	movs	r2, #144	; 0x90
   22708:	18ba      	adds	r2, r7, r2
   2270a:	6812      	ldr	r2, [r2, #0]
   2270c:	18d3      	adds	r3, r2, r3
   2270e:	781b      	ldrb	r3, [r3, #0]
   22710:	2b39      	cmp	r3, #57	; 0x39
   22712:	d909      	bls.n	22728 <m2m_wifi_connect_sc+0xc4>
   22714:	2396      	movs	r3, #150	; 0x96
   22716:	18fb      	adds	r3, r7, r3
   22718:	781b      	ldrb	r3, [r3, #0]
   2271a:	2290      	movs	r2, #144	; 0x90
   2271c:	18ba      	adds	r2, r7, r2
   2271e:	6812      	ldr	r2, [r2, #0]
   22720:	18d3      	adds	r3, r2, r3
   22722:	781b      	ldrb	r3, [r3, #0]
   22724:	2b40      	cmp	r3, #64	; 0x40
   22726:	d91d      	bls.n	22764 <m2m_wifi_connect_sc+0x100>
   22728:	2396      	movs	r3, #150	; 0x96
   2272a:	18fb      	adds	r3, r7, r3
   2272c:	781b      	ldrb	r3, [r3, #0]
   2272e:	2290      	movs	r2, #144	; 0x90
   22730:	18ba      	adds	r2, r7, r2
   22732:	6812      	ldr	r2, [r2, #0]
   22734:	18d3      	adds	r3, r2, r3
   22736:	781b      	ldrb	r3, [r3, #0]
   22738:	2b46      	cmp	r3, #70	; 0x46
   2273a:	d909      	bls.n	22750 <m2m_wifi_connect_sc+0xec>
   2273c:	2396      	movs	r3, #150	; 0x96
   2273e:	18fb      	adds	r3, r7, r3
   22740:	781b      	ldrb	r3, [r3, #0]
   22742:	2290      	movs	r2, #144	; 0x90
   22744:	18ba      	adds	r2, r7, r2
   22746:	6812      	ldr	r2, [r2, #0]
   22748:	18d3      	adds	r3, r2, r3
   2274a:	781b      	ldrb	r3, [r3, #0]
   2274c:	2b60      	cmp	r3, #96	; 0x60
   2274e:	d909      	bls.n	22764 <m2m_wifi_connect_sc+0x100>
   22750:	2396      	movs	r3, #150	; 0x96
   22752:	18fb      	adds	r3, r7, r3
   22754:	781b      	ldrb	r3, [r3, #0]
   22756:	2290      	movs	r2, #144	; 0x90
   22758:	18ba      	adds	r2, r7, r2
   2275a:	6812      	ldr	r2, [r2, #0]
   2275c:	18d3      	adds	r3, r2, r3
   2275e:	781b      	ldrb	r3, [r3, #0]
   22760:	2b66      	cmp	r3, #102	; 0x66
   22762:	d912      	bls.n	2278a <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22764:	4aac      	ldr	r2, [pc, #688]	; (22a18 <m2m_wifi_connect_sc+0x3b4>)
   22766:	49a6      	ldr	r1, [pc, #664]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   22768:	4ba6      	ldr	r3, [pc, #664]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   2276a:	0018      	movs	r0, r3
   2276c:	4ba6      	ldr	r3, [pc, #664]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   2276e:	4798      	blx	r3
   22770:	4baa      	ldr	r3, [pc, #680]	; (22a1c <m2m_wifi_connect_sc+0x3b8>)
   22772:	0018      	movs	r0, r3
   22774:	4ba4      	ldr	r3, [pc, #656]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   22776:	4798      	blx	r3
   22778:	4ba5      	ldr	r3, [pc, #660]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   2277a:	0018      	movs	r0, r3
   2277c:	4ba2      	ldr	r3, [pc, #648]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   2277e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22780:	2397      	movs	r3, #151	; 0x97
   22782:	18fb      	adds	r3, r7, r3
   22784:	22f4      	movs	r2, #244	; 0xf4
   22786:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22788:	e195      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   2278a:	2396      	movs	r3, #150	; 0x96
   2278c:	18fb      	adds	r3, r7, r3
   2278e:	781a      	ldrb	r2, [r3, #0]
   22790:	2396      	movs	r3, #150	; 0x96
   22792:	18fb      	adds	r3, r7, r3
   22794:	3201      	adds	r2, #1
   22796:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22798:	2396      	movs	r3, #150	; 0x96
   2279a:	18fb      	adds	r3, r7, r3
   2279c:	781b      	ldrb	r3, [r3, #0]
   2279e:	2b3f      	cmp	r3, #63	; 0x3f
   227a0:	d9a4      	bls.n	226ec <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   227a2:	230b      	movs	r3, #11
   227a4:	18fb      	adds	r3, r7, r3
   227a6:	781b      	ldrb	r3, [r3, #0]
   227a8:	2b00      	cmp	r3, #0
   227aa:	d004      	beq.n	227b6 <m2m_wifi_connect_sc+0x152>
   227ac:	230b      	movs	r3, #11
   227ae:	18fb      	adds	r3, r7, r3
   227b0:	781b      	ldrb	r3, [r3, #0]
   227b2:	2b20      	cmp	r3, #32
   227b4:	d912      	bls.n	227dc <m2m_wifi_connect_sc+0x178>
	{
		M2M_ERR("SSID LEN INVALID\n");
   227b6:	4a9a      	ldr	r2, [pc, #616]	; (22a20 <m2m_wifi_connect_sc+0x3bc>)
   227b8:	4991      	ldr	r1, [pc, #580]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   227ba:	4b92      	ldr	r3, [pc, #584]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   227bc:	0018      	movs	r0, r3
   227be:	4b92      	ldr	r3, [pc, #584]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   227c0:	4798      	blx	r3
   227c2:	4b98      	ldr	r3, [pc, #608]	; (22a24 <m2m_wifi_connect_sc+0x3c0>)
   227c4:	0018      	movs	r0, r3
   227c6:	4b90      	ldr	r3, [pc, #576]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   227c8:	4798      	blx	r3
   227ca:	4b91      	ldr	r3, [pc, #580]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   227cc:	0018      	movs	r0, r3
   227ce:	4b8e      	ldr	r3, [pc, #568]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   227d0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   227d2:	2397      	movs	r3, #151	; 0x97
   227d4:	18fb      	adds	r3, r7, r3
   227d6:	22f4      	movs	r2, #244	; 0xf4
   227d8:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   227da:	e16c      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   227dc:	23a8      	movs	r3, #168	; 0xa8
   227de:	18fb      	adds	r3, r7, r3
   227e0:	881b      	ldrh	r3, [r3, #0]
   227e2:	2b00      	cmp	r3, #0
   227e4:	d004      	beq.n	227f0 <m2m_wifi_connect_sc+0x18c>
   227e6:	23a8      	movs	r3, #168	; 0xa8
   227e8:	18fb      	adds	r3, r7, r3
   227ea:	881b      	ldrh	r3, [r3, #0]
   227ec:	2b0e      	cmp	r3, #14
   227ee:	d918      	bls.n	22822 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   227f0:	23a8      	movs	r3, #168	; 0xa8
   227f2:	18fb      	adds	r3, r7, r3
   227f4:	881b      	ldrh	r3, [r3, #0]
   227f6:	2bff      	cmp	r3, #255	; 0xff
   227f8:	d013      	beq.n	22822 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   227fa:	238f      	movs	r3, #143	; 0x8f
   227fc:	009a      	lsls	r2, r3, #2
   227fe:	4980      	ldr	r1, [pc, #512]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   22800:	4b80      	ldr	r3, [pc, #512]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   22802:	0018      	movs	r0, r3
   22804:	4b80      	ldr	r3, [pc, #512]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   22806:	4798      	blx	r3
   22808:	4b87      	ldr	r3, [pc, #540]	; (22a28 <m2m_wifi_connect_sc+0x3c4>)
   2280a:	0018      	movs	r0, r3
   2280c:	4b7e      	ldr	r3, [pc, #504]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   2280e:	4798      	blx	r3
   22810:	4b7f      	ldr	r3, [pc, #508]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   22812:	0018      	movs	r0, r3
   22814:	4b7c      	ldr	r3, [pc, #496]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   22816:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22818:	2397      	movs	r3, #151	; 0x97
   2281a:	18fb      	adds	r3, r7, r3
   2281c:	22f4      	movs	r2, #244	; 0xf4
   2281e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22820:	e149      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22822:	230b      	movs	r3, #11
   22824:	18fb      	adds	r3, r7, r3
   22826:	781a      	ldrb	r2, [r3, #0]
   22828:	68f9      	ldr	r1, [r7, #12]
   2282a:	2314      	movs	r3, #20
   2282c:	18fb      	adds	r3, r7, r3
   2282e:	3346      	adds	r3, #70	; 0x46
   22830:	0018      	movs	r0, r3
   22832:	4b7e      	ldr	r3, [pc, #504]	; (22a2c <m2m_wifi_connect_sc+0x3c8>)
   22834:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22836:	230b      	movs	r3, #11
   22838:	18fb      	adds	r3, r7, r3
   2283a:	781b      	ldrb	r3, [r3, #0]
   2283c:	2214      	movs	r2, #20
   2283e:	18ba      	adds	r2, r7, r2
   22840:	2146      	movs	r1, #70	; 0x46
   22842:	18d3      	adds	r3, r2, r3
   22844:	185b      	adds	r3, r3, r1
   22846:	2200      	movs	r2, #0
   22848:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   2284a:	2314      	movs	r3, #20
   2284c:	18fb      	adds	r3, r7, r3
   2284e:	22a8      	movs	r2, #168	; 0xa8
   22850:	18ba      	adds	r2, r7, r2
   22852:	2144      	movs	r1, #68	; 0x44
   22854:	8812      	ldrh	r2, [r2, #0]
   22856:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22858:	23ac      	movs	r3, #172	; 0xac
   2285a:	18fb      	adds	r3, r7, r3
   2285c:	781b      	ldrb	r3, [r3, #0]
   2285e:	1e5a      	subs	r2, r3, #1
   22860:	4193      	sbcs	r3, r2
   22862:	b2db      	uxtb	r3, r3
   22864:	0019      	movs	r1, r3
   22866:	2314      	movs	r3, #20
   22868:	18fb      	adds	r3, r7, r3
   2286a:	2267      	movs	r2, #103	; 0x67
   2286c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   2286e:	2314      	movs	r3, #20
   22870:	18fb      	adds	r3, r7, r3
   22872:	228c      	movs	r2, #140	; 0x8c
   22874:	18ba      	adds	r2, r7, r2
   22876:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22878:	238c      	movs	r3, #140	; 0x8c
   2287a:	18fb      	adds	r3, r7, r3
   2287c:	681b      	ldr	r3, [r3, #0]
   2287e:	220a      	movs	r2, #10
   22880:	18ba      	adds	r2, r7, r2
   22882:	2141      	movs	r1, #65	; 0x41
   22884:	7812      	ldrb	r2, [r2, #0]
   22886:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22888:	230a      	movs	r3, #10
   2288a:	18fb      	adds	r3, r7, r3
   2288c:	781b      	ldrb	r3, [r3, #0]
   2288e:	2b03      	cmp	r3, #3
   22890:	d000      	beq.n	22894 <m2m_wifi_connect_sc+0x230>
   22892:	e07c      	b.n	2298e <m2m_wifi_connect_sc+0x32a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22894:	687b      	ldr	r3, [r7, #4]
   22896:	2288      	movs	r2, #136	; 0x88
   22898:	18ba      	adds	r2, r7, r2
   2289a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   2289c:	238c      	movs	r3, #140	; 0x8c
   2289e:	18fb      	adds	r3, r7, r3
   228a0:	681b      	ldr	r3, [r3, #0]
   228a2:	2284      	movs	r2, #132	; 0x84
   228a4:	18ba      	adds	r2, r7, r2
   228a6:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   228a8:	2388      	movs	r3, #136	; 0x88
   228aa:	18fb      	adds	r3, r7, r3
   228ac:	681b      	ldr	r3, [r3, #0]
   228ae:	781b      	ldrb	r3, [r3, #0]
   228b0:	3b01      	subs	r3, #1
   228b2:	b2da      	uxtb	r2, r3
   228b4:	2384      	movs	r3, #132	; 0x84
   228b6:	18fb      	adds	r3, r7, r3
   228b8:	681b      	ldr	r3, [r3, #0]
   228ba:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   228bc:	2384      	movs	r3, #132	; 0x84
   228be:	18fb      	adds	r3, r7, r3
   228c0:	681b      	ldr	r3, [r3, #0]
   228c2:	781b      	ldrb	r3, [r3, #0]
   228c4:	2b03      	cmp	r3, #3
   228c6:	d918      	bls.n	228fa <m2m_wifi_connect_sc+0x296>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   228c8:	4a59      	ldr	r2, [pc, #356]	; (22a30 <m2m_wifi_connect_sc+0x3cc>)
   228ca:	494d      	ldr	r1, [pc, #308]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   228cc:	4b4d      	ldr	r3, [pc, #308]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   228ce:	0018      	movs	r0, r3
   228d0:	4b4d      	ldr	r3, [pc, #308]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   228d2:	4798      	blx	r3
   228d4:	2384      	movs	r3, #132	; 0x84
   228d6:	18fb      	adds	r3, r7, r3
   228d8:	681b      	ldr	r3, [r3, #0]
   228da:	781b      	ldrb	r3, [r3, #0]
   228dc:	001a      	movs	r2, r3
   228de:	4b55      	ldr	r3, [pc, #340]	; (22a34 <m2m_wifi_connect_sc+0x3d0>)
   228e0:	0011      	movs	r1, r2
   228e2:	0018      	movs	r0, r3
   228e4:	4b48      	ldr	r3, [pc, #288]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   228e6:	4798      	blx	r3
   228e8:	4b49      	ldr	r3, [pc, #292]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   228ea:	0018      	movs	r0, r3
   228ec:	4b46      	ldr	r3, [pc, #280]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   228ee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   228f0:	2397      	movs	r3, #151	; 0x97
   228f2:	18fb      	adds	r3, r7, r3
   228f4:	22f4      	movs	r2, #244	; 0xf4
   228f6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   228f8:	e0dd      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   228fa:	2388      	movs	r3, #136	; 0x88
   228fc:	18fb      	adds	r3, r7, r3
   228fe:	681b      	ldr	r3, [r3, #0]
   22900:	785b      	ldrb	r3, [r3, #1]
   22902:	3b01      	subs	r3, #1
   22904:	b2da      	uxtb	r2, r3
   22906:	2384      	movs	r3, #132	; 0x84
   22908:	18fb      	adds	r3, r7, r3
   2290a:	681b      	ldr	r3, [r3, #0]
   2290c:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2290e:	2384      	movs	r3, #132	; 0x84
   22910:	18fb      	adds	r3, r7, r3
   22912:	681b      	ldr	r3, [r3, #0]
   22914:	785b      	ldrb	r3, [r3, #1]
   22916:	2b0a      	cmp	r3, #10
   22918:	d01e      	beq.n	22958 <m2m_wifi_connect_sc+0x2f4>
   2291a:	2384      	movs	r3, #132	; 0x84
   2291c:	18fb      	adds	r3, r7, r3
   2291e:	681b      	ldr	r3, [r3, #0]
   22920:	785b      	ldrb	r3, [r3, #1]
   22922:	2b1a      	cmp	r3, #26
   22924:	d018      	beq.n	22958 <m2m_wifi_connect_sc+0x2f4>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22926:	4a44      	ldr	r2, [pc, #272]	; (22a38 <m2m_wifi_connect_sc+0x3d4>)
   22928:	4935      	ldr	r1, [pc, #212]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   2292a:	4b36      	ldr	r3, [pc, #216]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   2292c:	0018      	movs	r0, r3
   2292e:	4b36      	ldr	r3, [pc, #216]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   22930:	4798      	blx	r3
   22932:	2384      	movs	r3, #132	; 0x84
   22934:	18fb      	adds	r3, r7, r3
   22936:	681b      	ldr	r3, [r3, #0]
   22938:	785b      	ldrb	r3, [r3, #1]
   2293a:	001a      	movs	r2, r3
   2293c:	4b3f      	ldr	r3, [pc, #252]	; (22a3c <m2m_wifi_connect_sc+0x3d8>)
   2293e:	0011      	movs	r1, r2
   22940:	0018      	movs	r0, r3
   22942:	4b31      	ldr	r3, [pc, #196]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   22944:	4798      	blx	r3
   22946:	4b32      	ldr	r3, [pc, #200]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   22948:	0018      	movs	r0, r3
   2294a:	4b2f      	ldr	r3, [pc, #188]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   2294c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2294e:	2397      	movs	r3, #151	; 0x97
   22950:	18fb      	adds	r3, r7, r3
   22952:	22f4      	movs	r2, #244	; 0xf4
   22954:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22956:	e0ae      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22958:	2384      	movs	r3, #132	; 0x84
   2295a:	18fb      	adds	r3, r7, r3
   2295c:	681b      	ldr	r3, [r3, #0]
   2295e:	1c98      	adds	r0, r3, #2
   22960:	2388      	movs	r3, #136	; 0x88
   22962:	18fb      	adds	r3, r7, r3
   22964:	681b      	ldr	r3, [r3, #0]
   22966:	1c99      	adds	r1, r3, #2
   22968:	2388      	movs	r3, #136	; 0x88
   2296a:	18fb      	adds	r3, r7, r3
   2296c:	681b      	ldr	r3, [r3, #0]
   2296e:	785b      	ldrb	r3, [r3, #1]
   22970:	001a      	movs	r2, r3
   22972:	4b2e      	ldr	r3, [pc, #184]	; (22a2c <m2m_wifi_connect_sc+0x3c8>)
   22974:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22976:	2388      	movs	r3, #136	; 0x88
   22978:	18fb      	adds	r3, r7, r3
   2297a:	681b      	ldr	r3, [r3, #0]
   2297c:	785b      	ldrb	r3, [r3, #1]
   2297e:	001a      	movs	r2, r3
   22980:	2384      	movs	r3, #132	; 0x84
   22982:	18fb      	adds	r3, r7, r3
   22984:	681b      	ldr	r3, [r3, #0]
   22986:	189b      	adds	r3, r3, r2
   22988:	2200      	movs	r2, #0
   2298a:	709a      	strb	r2, [r3, #2]
   2298c:	e082      	b.n	22a94 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   2298e:	230a      	movs	r3, #10
   22990:	18fb      	adds	r3, r7, r3
   22992:	781b      	ldrb	r3, [r3, #0]
   22994:	2b02      	cmp	r3, #2
   22996:	d157      	bne.n	22a48 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22998:	2382      	movs	r3, #130	; 0x82
   2299a:	18fc      	adds	r4, r7, r3
   2299c:	687b      	ldr	r3, [r7, #4]
   2299e:	0018      	movs	r0, r3
   229a0:	4b1c      	ldr	r3, [pc, #112]	; (22a14 <m2m_wifi_connect_sc+0x3b0>)
   229a2:	4798      	blx	r3
   229a4:	0003      	movs	r3, r0
   229a6:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   229a8:	2382      	movs	r3, #130	; 0x82
   229aa:	18fb      	adds	r3, r7, r3
   229ac:	881b      	ldrh	r3, [r3, #0]
   229ae:	2b00      	cmp	r3, #0
   229b0:	d004      	beq.n	229bc <m2m_wifi_connect_sc+0x358>
   229b2:	2382      	movs	r3, #130	; 0x82
   229b4:	18fb      	adds	r3, r7, r3
   229b6:	881b      	ldrh	r3, [r3, #0]
   229b8:	2b40      	cmp	r3, #64	; 0x40
   229ba:	d912      	bls.n	229e2 <m2m_wifi_connect_sc+0x37e>
		{
			M2M_ERR("Incorrect PSK key length\n");
   229bc:	4a20      	ldr	r2, [pc, #128]	; (22a40 <m2m_wifi_connect_sc+0x3dc>)
   229be:	4910      	ldr	r1, [pc, #64]	; (22a00 <m2m_wifi_connect_sc+0x39c>)
   229c0:	4b10      	ldr	r3, [pc, #64]	; (22a04 <m2m_wifi_connect_sc+0x3a0>)
   229c2:	0018      	movs	r0, r3
   229c4:	4b10      	ldr	r3, [pc, #64]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   229c6:	4798      	blx	r3
   229c8:	4b1e      	ldr	r3, [pc, #120]	; (22a44 <m2m_wifi_connect_sc+0x3e0>)
   229ca:	0018      	movs	r0, r3
   229cc:	4b0e      	ldr	r3, [pc, #56]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   229ce:	4798      	blx	r3
   229d0:	4b0f      	ldr	r3, [pc, #60]	; (22a10 <m2m_wifi_connect_sc+0x3ac>)
   229d2:	0018      	movs	r0, r3
   229d4:	4b0c      	ldr	r3, [pc, #48]	; (22a08 <m2m_wifi_connect_sc+0x3a4>)
   229d6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   229d8:	2397      	movs	r3, #151	; 0x97
   229da:	18fb      	adds	r3, r7, r3
   229dc:	22f4      	movs	r2, #244	; 0xf4
   229de:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   229e0:	e069      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   229e2:	238c      	movs	r3, #140	; 0x8c
   229e4:	18fb      	adds	r3, r7, r3
   229e6:	6818      	ldr	r0, [r3, #0]
   229e8:	2382      	movs	r3, #130	; 0x82
   229ea:	18fb      	adds	r3, r7, r3
   229ec:	881b      	ldrh	r3, [r3, #0]
   229ee:	3301      	adds	r3, #1
   229f0:	001a      	movs	r2, r3
   229f2:	687b      	ldr	r3, [r7, #4]
   229f4:	0019      	movs	r1, r3
   229f6:	4b0d      	ldr	r3, [pc, #52]	; (22a2c <m2m_wifi_connect_sc+0x3c8>)
   229f8:	4798      	blx	r3
   229fa:	e04b      	b.n	22a94 <m2m_wifi_connect_sc+0x430>
   229fc:	0000021d 	.word	0x0000021d
   22a00:	0003b1c4 	.word	0x0003b1c4
   22a04:	0003aeb8 	.word	0x0003aeb8
   22a08:	0001e639 	.word	0x0001e639
   22a0c:	0003b04c 	.word	0x0003b04c
   22a10:	0003aeb4 	.word	0x0003aeb4
   22a14:	000213ab 	.word	0x000213ab
   22a18:	00000229 	.word	0x00000229
   22a1c:	0003b060 	.word	0x0003b060
   22a20:	00000233 	.word	0x00000233
   22a24:	0003b070 	.word	0x0003b070
   22a28:	0003b084 	.word	0x0003b084
   22a2c:	00021331 	.word	0x00021331
   22a30:	00000253 	.word	0x00000253
   22a34:	0003b090 	.word	0x0003b090
   22a38:	0000025a 	.word	0x0000025a
   22a3c:	0003b0ac 	.word	0x0003b0ac
   22a40:	00000269 	.word	0x00000269
   22a44:	0003b0c8 	.word	0x0003b0c8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22a48:	230a      	movs	r3, #10
   22a4a:	18fb      	adds	r3, r7, r3
   22a4c:	781b      	ldrb	r3, [r3, #0]
   22a4e:	2b04      	cmp	r3, #4
   22a50:	d108      	bne.n	22a64 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22a52:	238c      	movs	r3, #140	; 0x8c
   22a54:	18fb      	adds	r3, r7, r3
   22a56:	681b      	ldr	r3, [r3, #0]
   22a58:	6879      	ldr	r1, [r7, #4]
   22a5a:	223e      	movs	r2, #62	; 0x3e
   22a5c:	0018      	movs	r0, r3
   22a5e:	4b1a      	ldr	r3, [pc, #104]	; (22ac8 <m2m_wifi_connect_sc+0x464>)
   22a60:	4798      	blx	r3
   22a62:	e017      	b.n	22a94 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22a64:	230a      	movs	r3, #10
   22a66:	18fb      	adds	r3, r7, r3
   22a68:	781b      	ldrb	r3, [r3, #0]
   22a6a:	2b01      	cmp	r3, #1
   22a6c:	d012      	beq.n	22a94 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22a6e:	4a17      	ldr	r2, [pc, #92]	; (22acc <m2m_wifi_connect_sc+0x468>)
   22a70:	4917      	ldr	r1, [pc, #92]	; (22ad0 <m2m_wifi_connect_sc+0x46c>)
   22a72:	4b18      	ldr	r3, [pc, #96]	; (22ad4 <m2m_wifi_connect_sc+0x470>)
   22a74:	0018      	movs	r0, r3
   22a76:	4b18      	ldr	r3, [pc, #96]	; (22ad8 <m2m_wifi_connect_sc+0x474>)
   22a78:	4798      	blx	r3
   22a7a:	4b18      	ldr	r3, [pc, #96]	; (22adc <m2m_wifi_connect_sc+0x478>)
   22a7c:	0018      	movs	r0, r3
   22a7e:	4b16      	ldr	r3, [pc, #88]	; (22ad8 <m2m_wifi_connect_sc+0x474>)
   22a80:	4798      	blx	r3
   22a82:	4b17      	ldr	r3, [pc, #92]	; (22ae0 <m2m_wifi_connect_sc+0x47c>)
   22a84:	0018      	movs	r0, r3
   22a86:	4b14      	ldr	r3, [pc, #80]	; (22ad8 <m2m_wifi_connect_sc+0x474>)
   22a88:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22a8a:	2397      	movs	r3, #151	; 0x97
   22a8c:	18fb      	adds	r3, r7, r3
   22a8e:	22f4      	movs	r2, #244	; 0xf4
   22a90:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22a92:	e010      	b.n	22ab6 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22a94:	2397      	movs	r3, #151	; 0x97
   22a96:	18fc      	adds	r4, r7, r3
   22a98:	2314      	movs	r3, #20
   22a9a:	18fa      	adds	r2, r7, r3
   22a9c:	2300      	movs	r3, #0
   22a9e:	9302      	str	r3, [sp, #8]
   22aa0:	2300      	movs	r3, #0
   22aa2:	9301      	str	r3, [sp, #4]
   22aa4:	2300      	movs	r3, #0
   22aa6:	9300      	str	r3, [sp, #0]
   22aa8:	236c      	movs	r3, #108	; 0x6c
   22aaa:	2128      	movs	r1, #40	; 0x28
   22aac:	2001      	movs	r0, #1
   22aae:	4d0d      	ldr	r5, [pc, #52]	; (22ae4 <m2m_wifi_connect_sc+0x480>)
   22ab0:	47a8      	blx	r5
   22ab2:	0003      	movs	r3, r0
   22ab4:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   22ab6:	2397      	movs	r3, #151	; 0x97
   22ab8:	18fb      	adds	r3, r7, r3
   22aba:	781b      	ldrb	r3, [r3, #0]
   22abc:	b25b      	sxtb	r3, r3
}
   22abe:	0018      	movs	r0, r3
   22ac0:	46bd      	mov	sp, r7
   22ac2:	b026      	add	sp, #152	; 0x98
   22ac4:	bdb0      	pop	{r4, r5, r7, pc}
   22ac6:	46c0      	nop			; (mov r8, r8)
   22ac8:	00021331 	.word	0x00021331
   22acc:	00000279 	.word	0x00000279
   22ad0:	0003b1c4 	.word	0x0003b1c4
   22ad4:	0003aeb8 	.word	0x0003aeb8
   22ad8:	0001e639 	.word	0x0001e639
   22adc:	0003b0e4 	.word	0x0003b0e4
   22ae0:	0003aeb4 	.word	0x0003aeb4
   22ae4:	000215cd 	.word	0x000215cd

00022ae8 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22ae8:	b580      	push	{r7, lr}
   22aea:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   22aec:	2300      	movs	r3, #0
}
   22aee:	0018      	movs	r0, r3
   22af0:	46bd      	mov	sp, r7
   22af2:	bd80      	pop	{r7, pc}

00022af4 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22af4:	b590      	push	{r4, r7, lr}
   22af6:	b087      	sub	sp, #28
   22af8:	af00      	add	r7, sp, #0
   22afa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22afc:	2317      	movs	r3, #23
   22afe:	18fb      	adds	r3, r7, r3
   22b00:	2200      	movs	r2, #0
   22b02:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22b04:	687b      	ldr	r3, [r7, #4]
   22b06:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22b08:	693b      	ldr	r3, [r7, #16]
   22b0a:	2280      	movs	r2, #128	; 0x80
   22b0c:	0052      	lsls	r2, r2, #1
   22b0e:	4313      	orrs	r3, r2
   22b10:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22b12:	693a      	ldr	r2, [r7, #16]
   22b14:	23a5      	movs	r3, #165	; 0xa5
   22b16:	015b      	lsls	r3, r3, #5
   22b18:	0011      	movs	r1, r2
   22b1a:	0018      	movs	r0, r3
   22b1c:	4b12      	ldr	r3, [pc, #72]	; (22b68 <chip_apply_conf+0x74>)
   22b1e:	4798      	blx	r3
		if(val32 != 0) {		
   22b20:	693b      	ldr	r3, [r7, #16]
   22b22:	2b00      	cmp	r3, #0
   22b24:	d018      	beq.n	22b58 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22b26:	2300      	movs	r3, #0
   22b28:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22b2a:	2317      	movs	r3, #23
   22b2c:	18fc      	adds	r4, r7, r3
   22b2e:	230c      	movs	r3, #12
   22b30:	18fa      	adds	r2, r7, r3
   22b32:	23a5      	movs	r3, #165	; 0xa5
   22b34:	015b      	lsls	r3, r3, #5
   22b36:	0011      	movs	r1, r2
   22b38:	0018      	movs	r0, r3
   22b3a:	4b0c      	ldr	r3, [pc, #48]	; (22b6c <chip_apply_conf+0x78>)
   22b3c:	4798      	blx	r3
   22b3e:	0003      	movs	r3, r0
   22b40:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22b42:	2317      	movs	r3, #23
   22b44:	18fb      	adds	r3, r7, r3
   22b46:	781b      	ldrb	r3, [r3, #0]
   22b48:	b25b      	sxtb	r3, r3
   22b4a:	2b00      	cmp	r3, #0
   22b4c:	d1e1      	bne.n	22b12 <chip_apply_conf+0x1e>
				if(reg == val32)
   22b4e:	68fa      	ldr	r2, [r7, #12]
   22b50:	693b      	ldr	r3, [r7, #16]
   22b52:	429a      	cmp	r2, r3
   22b54:	d002      	beq.n	22b5c <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   22b56:	e7dc      	b.n	22b12 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22b58:	46c0      	nop			; (mov r8, r8)
   22b5a:	e000      	b.n	22b5e <chip_apply_conf+0x6a>
					break;
   22b5c:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   22b5e:	2300      	movs	r3, #0
}
   22b60:	0018      	movs	r0, r3
   22b62:	46bd      	mov	sp, r7
   22b64:	b007      	add	sp, #28
   22b66:	bd90      	pop	{r4, r7, pc}
   22b68:	00023349 	.word	0x00023349
   22b6c:	00023325 	.word	0x00023325

00022b70 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   22b70:	b590      	push	{r4, r7, lr}
   22b72:	b083      	sub	sp, #12
   22b74:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22b76:	2300      	movs	r3, #0
   22b78:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   22b7a:	1dfb      	adds	r3, r7, #7
   22b7c:	2200      	movs	r2, #0
   22b7e:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   22b80:	1dfc      	adds	r4, r7, #7
   22b82:	003b      	movs	r3, r7
   22b84:	4a24      	ldr	r2, [pc, #144]	; (22c18 <enable_interrupts+0xa8>)
   22b86:	0019      	movs	r1, r3
   22b88:	0010      	movs	r0, r2
   22b8a:	4b24      	ldr	r3, [pc, #144]	; (22c1c <enable_interrupts+0xac>)
   22b8c:	4798      	blx	r3
   22b8e:	0003      	movs	r3, r0
   22b90:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22b92:	1dfb      	adds	r3, r7, #7
   22b94:	781b      	ldrb	r3, [r3, #0]
   22b96:	b25b      	sxtb	r3, r3
   22b98:	2b00      	cmp	r3, #0
   22b9a:	d131      	bne.n	22c00 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   22b9c:	683b      	ldr	r3, [r7, #0]
   22b9e:	2280      	movs	r2, #128	; 0x80
   22ba0:	0052      	lsls	r2, r2, #1
   22ba2:	4313      	orrs	r3, r2
   22ba4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   22ba6:	683b      	ldr	r3, [r7, #0]
   22ba8:	1dfc      	adds	r4, r7, #7
   22baa:	4a1b      	ldr	r2, [pc, #108]	; (22c18 <enable_interrupts+0xa8>)
   22bac:	0019      	movs	r1, r3
   22bae:	0010      	movs	r0, r2
   22bb0:	4b1b      	ldr	r3, [pc, #108]	; (22c20 <enable_interrupts+0xb0>)
   22bb2:	4798      	blx	r3
   22bb4:	0003      	movs	r3, r0
   22bb6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22bb8:	1dfb      	adds	r3, r7, #7
   22bba:	781b      	ldrb	r3, [r3, #0]
   22bbc:	b25b      	sxtb	r3, r3
   22bbe:	2b00      	cmp	r3, #0
   22bc0:	d120      	bne.n	22c04 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   22bc2:	1dfc      	adds	r4, r7, #7
   22bc4:	003a      	movs	r2, r7
   22bc6:	23d0      	movs	r3, #208	; 0xd0
   22bc8:	015b      	lsls	r3, r3, #5
   22bca:	0011      	movs	r1, r2
   22bcc:	0018      	movs	r0, r3
   22bce:	4b13      	ldr	r3, [pc, #76]	; (22c1c <enable_interrupts+0xac>)
   22bd0:	4798      	blx	r3
   22bd2:	0003      	movs	r3, r0
   22bd4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22bd6:	1dfb      	adds	r3, r7, #7
   22bd8:	781b      	ldrb	r3, [r3, #0]
   22bda:	b25b      	sxtb	r3, r3
   22bdc:	2b00      	cmp	r3, #0
   22bde:	d113      	bne.n	22c08 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   22be0:	683b      	ldr	r3, [r7, #0]
   22be2:	2280      	movs	r2, #128	; 0x80
   22be4:	0252      	lsls	r2, r2, #9
   22be6:	4313      	orrs	r3, r2
   22be8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   22bea:	683a      	ldr	r2, [r7, #0]
   22bec:	1dfc      	adds	r4, r7, #7
   22bee:	23d0      	movs	r3, #208	; 0xd0
   22bf0:	015b      	lsls	r3, r3, #5
   22bf2:	0011      	movs	r1, r2
   22bf4:	0018      	movs	r0, r3
   22bf6:	4b0a      	ldr	r3, [pc, #40]	; (22c20 <enable_interrupts+0xb0>)
   22bf8:	4798      	blx	r3
   22bfa:	0003      	movs	r3, r0
   22bfc:	7023      	strb	r3, [r4, #0]
   22bfe:	e004      	b.n	22c0a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22c00:	46c0      	nop			; (mov r8, r8)
   22c02:	e002      	b.n	22c0a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22c04:	46c0      	nop			; (mov r8, r8)
   22c06:	e000      	b.n	22c0a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22c08:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   22c0a:	1dfb      	adds	r3, r7, #7
   22c0c:	781b      	ldrb	r3, [r3, #0]
   22c0e:	b25b      	sxtb	r3, r3
}
   22c10:	0018      	movs	r0, r3
   22c12:	46bd      	mov	sp, r7
   22c14:	b003      	add	sp, #12
   22c16:	bd90      	pop	{r4, r7, pc}
   22c18:	00001408 	.word	0x00001408
   22c1c:	00023325 	.word	0x00023325
   22c20:	00023349 	.word	0x00023349

00022c24 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   22c24:	b580      	push	{r7, lr}
   22c26:	b082      	sub	sp, #8
   22c28:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   22c2a:	4b32      	ldr	r3, [pc, #200]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c2c:	681b      	ldr	r3, [r3, #0]
   22c2e:	2b00      	cmp	r3, #0
   22c30:	d159      	bne.n	22ce6 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   22c32:	4a30      	ldr	r2, [pc, #192]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c34:	2380      	movs	r3, #128	; 0x80
   22c36:	015b      	lsls	r3, r3, #5
   22c38:	0011      	movs	r1, r2
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b2e      	ldr	r3, [pc, #184]	; (22cf8 <nmi_get_chipid+0xd4>)
   22c3e:	4798      	blx	r3
   22c40:	1e03      	subs	r3, r0, #0
   22c42:	d004      	beq.n	22c4e <nmi_get_chipid+0x2a>
			chipid = 0;
   22c44:	4b2b      	ldr	r3, [pc, #172]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c46:	2200      	movs	r2, #0
   22c48:	601a      	str	r2, [r3, #0]
			return 0;
   22c4a:	2300      	movs	r3, #0
   22c4c:	e04d      	b.n	22cea <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   22c4e:	1d3b      	adds	r3, r7, #4
   22c50:	4a2a      	ldr	r2, [pc, #168]	; (22cfc <nmi_get_chipid+0xd8>)
   22c52:	0019      	movs	r1, r3
   22c54:	0010      	movs	r0, r2
   22c56:	4b28      	ldr	r3, [pc, #160]	; (22cf8 <nmi_get_chipid+0xd4>)
   22c58:	4798      	blx	r3
   22c5a:	1e03      	subs	r3, r0, #0
   22c5c:	d004      	beq.n	22c68 <nmi_get_chipid+0x44>
			chipid = 0;
   22c5e:	4b25      	ldr	r3, [pc, #148]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c60:	2200      	movs	r2, #0
   22c62:	601a      	str	r2, [r3, #0]
			return 0;
   22c64:	2300      	movs	r3, #0
   22c66:	e040      	b.n	22cea <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   22c68:	4b22      	ldr	r3, [pc, #136]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c6a:	681b      	ldr	r3, [r3, #0]
   22c6c:	4a24      	ldr	r2, [pc, #144]	; (22d00 <nmi_get_chipid+0xdc>)
   22c6e:	4293      	cmp	r3, r2
   22c70:	d106      	bne.n	22c80 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   22c72:	687b      	ldr	r3, [r7, #4]
   22c74:	2b01      	cmp	r3, #1
   22c76:	d029      	beq.n	22ccc <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22c78:	4b1e      	ldr	r3, [pc, #120]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c7a:	4a22      	ldr	r2, [pc, #136]	; (22d04 <nmi_get_chipid+0xe0>)
   22c7c:	601a      	str	r2, [r3, #0]
   22c7e:	e025      	b.n	22ccc <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   22c80:	4b1c      	ldr	r3, [pc, #112]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c82:	681b      	ldr	r3, [r3, #0]
   22c84:	4a20      	ldr	r2, [pc, #128]	; (22d08 <nmi_get_chipid+0xe4>)
   22c86:	4293      	cmp	r3, r2
   22c88:	d10d      	bne.n	22ca6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22c8a:	687b      	ldr	r3, [r7, #4]
   22c8c:	2b03      	cmp	r3, #3
   22c8e:	d01d      	beq.n	22ccc <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   22c90:	687b      	ldr	r3, [r7, #4]
   22c92:	2b04      	cmp	r3, #4
   22c94:	d103      	bne.n	22c9e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   22c96:	4b17      	ldr	r3, [pc, #92]	; (22cf4 <nmi_get_chipid+0xd0>)
   22c98:	4a1c      	ldr	r2, [pc, #112]	; (22d0c <nmi_get_chipid+0xe8>)
   22c9a:	601a      	str	r2, [r3, #0]
   22c9c:	e016      	b.n	22ccc <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   22c9e:	4b15      	ldr	r3, [pc, #84]	; (22cf4 <nmi_get_chipid+0xd0>)
   22ca0:	4a1b      	ldr	r2, [pc, #108]	; (22d10 <nmi_get_chipid+0xec>)
   22ca2:	601a      	str	r2, [r3, #0]
   22ca4:	e012      	b.n	22ccc <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22ca6:	4b13      	ldr	r3, [pc, #76]	; (22cf4 <nmi_get_chipid+0xd0>)
   22ca8:	681b      	ldr	r3, [r3, #0]
   22caa:	4a1a      	ldr	r2, [pc, #104]	; (22d14 <nmi_get_chipid+0xf0>)
   22cac:	4293      	cmp	r3, r2
   22cae:	d10d      	bne.n	22ccc <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   22cb0:	4a10      	ldr	r2, [pc, #64]	; (22cf4 <nmi_get_chipid+0xd0>)
   22cb2:	23ec      	movs	r3, #236	; 0xec
   22cb4:	039b      	lsls	r3, r3, #14
   22cb6:	0011      	movs	r1, r2
   22cb8:	0018      	movs	r0, r3
   22cba:	4b0f      	ldr	r3, [pc, #60]	; (22cf8 <nmi_get_chipid+0xd4>)
   22cbc:	4798      	blx	r3
   22cbe:	1e03      	subs	r3, r0, #0
   22cc0:	d004      	beq.n	22ccc <nmi_get_chipid+0xa8>
			chipid = 0;
   22cc2:	4b0c      	ldr	r3, [pc, #48]	; (22cf4 <nmi_get_chipid+0xd0>)
   22cc4:	2200      	movs	r2, #0
   22cc6:	601a      	str	r2, [r3, #0]
			return 0;
   22cc8:	2300      	movs	r3, #0
   22cca:	e00e      	b.n	22cea <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22ccc:	4b09      	ldr	r3, [pc, #36]	; (22cf4 <nmi_get_chipid+0xd0>)
   22cce:	681b      	ldr	r3, [r3, #0]
   22cd0:	4a11      	ldr	r2, [pc, #68]	; (22d18 <nmi_get_chipid+0xf4>)
   22cd2:	401a      	ands	r2, r3
   22cd4:	4b07      	ldr	r3, [pc, #28]	; (22cf4 <nmi_get_chipid+0xd0>)
   22cd6:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22cd8:	4b06      	ldr	r3, [pc, #24]	; (22cf4 <nmi_get_chipid+0xd0>)
   22cda:	681b      	ldr	r3, [r3, #0]
   22cdc:	22a0      	movs	r2, #160	; 0xa0
   22cde:	02d2      	lsls	r2, r2, #11
   22ce0:	431a      	orrs	r2, r3
   22ce2:	4b04      	ldr	r3, [pc, #16]	; (22cf4 <nmi_get_chipid+0xd0>)
   22ce4:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   22ce6:	4b03      	ldr	r3, [pc, #12]	; (22cf4 <nmi_get_chipid+0xd0>)
   22ce8:	681b      	ldr	r3, [r3, #0]
}
   22cea:	0018      	movs	r0, r3
   22cec:	46bd      	mov	sp, r7
   22cee:	b002      	add	sp, #8
   22cf0:	bd80      	pop	{r7, pc}
   22cf2:	46c0      	nop			; (mov r8, r8)
   22cf4:	200042bc 	.word	0x200042bc
   22cf8:	00023325 	.word	0x00023325
   22cfc:	000013f4 	.word	0x000013f4
   22d00:	001002a0 	.word	0x001002a0
   22d04:	001002a1 	.word	0x001002a1
   22d08:	001002b0 	.word	0x001002b0
   22d0c:	001002b1 	.word	0x001002b1
   22d10:	001002b2 	.word	0x001002b2
   22d14:	001000f0 	.word	0x001000f0
   22d18:	fff0ffff 	.word	0xfff0ffff

00022d1c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22d1c:	b590      	push	{r4, r7, lr}
   22d1e:	b083      	sub	sp, #12
   22d20:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   22d22:	1dfb      	adds	r3, r7, #7
   22d24:	2200      	movs	r2, #0
   22d26:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22d28:	1dfc      	adds	r4, r7, #7
   22d2a:	003b      	movs	r3, r7
   22d2c:	0019      	movs	r1, r3
   22d2e:	2010      	movs	r0, #16
   22d30:	4b2e      	ldr	r3, [pc, #184]	; (22dec <chip_sleep+0xd0>)
   22d32:	4798      	blx	r3
   22d34:	0003      	movs	r3, r0
   22d36:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22d38:	1dfb      	adds	r3, r7, #7
   22d3a:	781b      	ldrb	r3, [r3, #0]
   22d3c:	b25b      	sxtb	r3, r3
   22d3e:	2b00      	cmp	r3, #0
   22d40:	d145      	bne.n	22dce <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   22d42:	683b      	ldr	r3, [r7, #0]
   22d44:	2201      	movs	r2, #1
   22d46:	4013      	ands	r3, r2
   22d48:	d000      	beq.n	22d4c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22d4a:	e7ed      	b.n	22d28 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22d4c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22d4e:	1dfc      	adds	r4, r7, #7
   22d50:	003b      	movs	r3, r7
   22d52:	0019      	movs	r1, r3
   22d54:	2001      	movs	r0, #1
   22d56:	4b25      	ldr	r3, [pc, #148]	; (22dec <chip_sleep+0xd0>)
   22d58:	4798      	blx	r3
   22d5a:	0003      	movs	r3, r0
   22d5c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22d5e:	1dfb      	adds	r3, r7, #7
   22d60:	781b      	ldrb	r3, [r3, #0]
   22d62:	b25b      	sxtb	r3, r3
   22d64:	2b00      	cmp	r3, #0
   22d66:	d134      	bne.n	22dd2 <chip_sleep+0xb6>
	if(reg & NBIT1)
   22d68:	683b      	ldr	r3, [r7, #0]
   22d6a:	2202      	movs	r2, #2
   22d6c:	4013      	ands	r3, r2
   22d6e:	d010      	beq.n	22d92 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   22d70:	683b      	ldr	r3, [r7, #0]
   22d72:	2202      	movs	r2, #2
   22d74:	4393      	bics	r3, r2
   22d76:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22d78:	683b      	ldr	r3, [r7, #0]
   22d7a:	1dfc      	adds	r4, r7, #7
   22d7c:	0019      	movs	r1, r3
   22d7e:	2001      	movs	r0, #1
   22d80:	4b1b      	ldr	r3, [pc, #108]	; (22df0 <chip_sleep+0xd4>)
   22d82:	4798      	blx	r3
   22d84:	0003      	movs	r3, r0
   22d86:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22d88:	1dfb      	adds	r3, r7, #7
   22d8a:	781b      	ldrb	r3, [r3, #0]
   22d8c:	b25b      	sxtb	r3, r3
   22d8e:	2b00      	cmp	r3, #0
   22d90:	d121      	bne.n	22dd6 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22d92:	1dfc      	adds	r4, r7, #7
   22d94:	003b      	movs	r3, r7
   22d96:	0019      	movs	r1, r3
   22d98:	200b      	movs	r0, #11
   22d9a:	4b14      	ldr	r3, [pc, #80]	; (22dec <chip_sleep+0xd0>)
   22d9c:	4798      	blx	r3
   22d9e:	0003      	movs	r3, r0
   22da0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22da2:	1dfb      	adds	r3, r7, #7
   22da4:	781b      	ldrb	r3, [r3, #0]
   22da6:	b25b      	sxtb	r3, r3
   22da8:	2b00      	cmp	r3, #0
   22daa:	d116      	bne.n	22dda <chip_sleep+0xbe>
	if(reg & NBIT0)
   22dac:	683b      	ldr	r3, [r7, #0]
   22dae:	2201      	movs	r2, #1
   22db0:	4013      	ands	r3, r2
   22db2:	d013      	beq.n	22ddc <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   22db4:	683b      	ldr	r3, [r7, #0]
   22db6:	2201      	movs	r2, #1
   22db8:	4393      	bics	r3, r2
   22dba:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22dbc:	683b      	ldr	r3, [r7, #0]
   22dbe:	1dfc      	adds	r4, r7, #7
   22dc0:	0019      	movs	r1, r3
   22dc2:	200b      	movs	r0, #11
   22dc4:	4b0a      	ldr	r3, [pc, #40]	; (22df0 <chip_sleep+0xd4>)
   22dc6:	4798      	blx	r3
   22dc8:	0003      	movs	r3, r0
   22dca:	7023      	strb	r3, [r4, #0]
   22dcc:	e006      	b.n	22ddc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22dce:	46c0      	nop			; (mov r8, r8)
   22dd0:	e004      	b.n	22ddc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22dd2:	46c0      	nop			; (mov r8, r8)
   22dd4:	e002      	b.n	22ddc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   22dd6:	46c0      	nop			; (mov r8, r8)
   22dd8:	e000      	b.n	22ddc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22dda:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22ddc:	1dfb      	adds	r3, r7, #7
   22dde:	781b      	ldrb	r3, [r3, #0]
   22de0:	b25b      	sxtb	r3, r3
}
   22de2:	0018      	movs	r0, r3
   22de4:	46bd      	mov	sp, r7
   22de6:	b003      	add	sp, #12
   22de8:	bd90      	pop	{r4, r7, pc}
   22dea:	46c0      	nop			; (mov r8, r8)
   22dec:	00023325 	.word	0x00023325
   22df0:	00023349 	.word	0x00023349

00022df4 <chip_wake>:
sint8 chip_wake(void)
{
   22df4:	b590      	push	{r4, r7, lr}
   22df6:	b085      	sub	sp, #20
   22df8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22dfa:	230f      	movs	r3, #15
   22dfc:	18fb      	adds	r3, r7, r3
   22dfe:	2200      	movs	r2, #0
   22e00:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   22e02:	2300      	movs	r3, #0
   22e04:	607b      	str	r3, [r7, #4]
   22e06:	2300      	movs	r3, #0
   22e08:	603b      	str	r3, [r7, #0]
   22e0a:	2300      	movs	r3, #0
   22e0c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22e0e:	230f      	movs	r3, #15
   22e10:	18fc      	adds	r4, r7, r3
   22e12:	1d3b      	adds	r3, r7, #4
   22e14:	0019      	movs	r1, r3
   22e16:	200b      	movs	r0, #11
   22e18:	4b4e      	ldr	r3, [pc, #312]	; (22f54 <chip_wake+0x160>)
   22e1a:	4798      	blx	r3
   22e1c:	0003      	movs	r3, r0
   22e1e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22e20:	230f      	movs	r3, #15
   22e22:	18fb      	adds	r3, r7, r3
   22e24:	781b      	ldrb	r3, [r3, #0]
   22e26:	b25b      	sxtb	r3, r3
   22e28:	2b00      	cmp	r3, #0
   22e2a:	d000      	beq.n	22e2e <chip_wake+0x3a>
   22e2c:	e082      	b.n	22f34 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22e2e:	687b      	ldr	r3, [r7, #4]
   22e30:	2201      	movs	r2, #1
   22e32:	4013      	ands	r3, r2
   22e34:	d111      	bne.n	22e5a <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   22e36:	687b      	ldr	r3, [r7, #4]
   22e38:	2201      	movs	r2, #1
   22e3a:	4313      	orrs	r3, r2
   22e3c:	220f      	movs	r2, #15
   22e3e:	18bc      	adds	r4, r7, r2
   22e40:	0019      	movs	r1, r3
   22e42:	200b      	movs	r0, #11
   22e44:	4b44      	ldr	r3, [pc, #272]	; (22f58 <chip_wake+0x164>)
   22e46:	4798      	blx	r3
   22e48:	0003      	movs	r3, r0
   22e4a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22e4c:	230f      	movs	r3, #15
   22e4e:	18fb      	adds	r3, r7, r3
   22e50:	781b      	ldrb	r3, [r3, #0]
   22e52:	b25b      	sxtb	r3, r3
   22e54:	2b00      	cmp	r3, #0
   22e56:	d000      	beq.n	22e5a <chip_wake+0x66>
   22e58:	e06e      	b.n	22f38 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22e5a:	230f      	movs	r3, #15
   22e5c:	18fc      	adds	r4, r7, r3
   22e5e:	1d3b      	adds	r3, r7, #4
   22e60:	0019      	movs	r1, r3
   22e62:	2001      	movs	r0, #1
   22e64:	4b3b      	ldr	r3, [pc, #236]	; (22f54 <chip_wake+0x160>)
   22e66:	4798      	blx	r3
   22e68:	0003      	movs	r3, r0
   22e6a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22e6c:	230f      	movs	r3, #15
   22e6e:	18fb      	adds	r3, r7, r3
   22e70:	781b      	ldrb	r3, [r3, #0]
   22e72:	b25b      	sxtb	r3, r3
   22e74:	2b00      	cmp	r3, #0
   22e76:	d161      	bne.n	22f3c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22e78:	687b      	ldr	r3, [r7, #4]
   22e7a:	2202      	movs	r2, #2
   22e7c:	4013      	ands	r3, r2
   22e7e:	d110      	bne.n	22ea2 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22e80:	687b      	ldr	r3, [r7, #4]
   22e82:	2202      	movs	r2, #2
   22e84:	4313      	orrs	r3, r2
   22e86:	220f      	movs	r2, #15
   22e88:	18bc      	adds	r4, r7, r2
   22e8a:	0019      	movs	r1, r3
   22e8c:	2001      	movs	r0, #1
   22e8e:	4b32      	ldr	r3, [pc, #200]	; (22f58 <chip_wake+0x164>)
   22e90:	4798      	blx	r3
   22e92:	0003      	movs	r3, r0
   22e94:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22e96:	230f      	movs	r3, #15
   22e98:	18fb      	adds	r3, r7, r3
   22e9a:	781b      	ldrb	r3, [r3, #0]
   22e9c:	b25b      	sxtb	r3, r3
   22e9e:	2b00      	cmp	r3, #0
   22ea0:	d14e      	bne.n	22f40 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   22ea2:	230f      	movs	r3, #15
   22ea4:	18fc      	adds	r4, r7, r3
   22ea6:	003b      	movs	r3, r7
   22ea8:	0019      	movs	r1, r3
   22eaa:	200f      	movs	r0, #15
   22eac:	4b29      	ldr	r3, [pc, #164]	; (22f54 <chip_wake+0x160>)
   22eae:	4798      	blx	r3
   22eb0:	0003      	movs	r3, r0
   22eb2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22eb4:	230f      	movs	r3, #15
   22eb6:	18fb      	adds	r3, r7, r3
   22eb8:	781b      	ldrb	r3, [r3, #0]
   22eba:	b25b      	sxtb	r3, r3
   22ebc:	2b00      	cmp	r3, #0
   22ebe:	d014      	beq.n	22eea <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22ec0:	23a8      	movs	r3, #168	; 0xa8
   22ec2:	005a      	lsls	r2, r3, #1
   22ec4:	4925      	ldr	r1, [pc, #148]	; (22f5c <chip_wake+0x168>)
   22ec6:	4b26      	ldr	r3, [pc, #152]	; (22f60 <chip_wake+0x16c>)
   22ec8:	0018      	movs	r0, r3
   22eca:	4b26      	ldr	r3, [pc, #152]	; (22f64 <chip_wake+0x170>)
   22ecc:	4798      	blx	r3
   22ece:	230f      	movs	r3, #15
   22ed0:	18fb      	adds	r3, r7, r3
   22ed2:	2100      	movs	r1, #0
   22ed4:	5659      	ldrsb	r1, [r3, r1]
   22ed6:	683a      	ldr	r2, [r7, #0]
   22ed8:	4b23      	ldr	r3, [pc, #140]	; (22f68 <chip_wake+0x174>)
   22eda:	0018      	movs	r0, r3
   22edc:	4b21      	ldr	r3, [pc, #132]	; (22f64 <chip_wake+0x170>)
   22ede:	4798      	blx	r3
   22ee0:	4b22      	ldr	r3, [pc, #136]	; (22f6c <chip_wake+0x178>)
   22ee2:	0018      	movs	r0, r3
   22ee4:	4b1f      	ldr	r3, [pc, #124]	; (22f64 <chip_wake+0x170>)
   22ee6:	4798      	blx	r3
			goto _WAKE_EXIT;
   22ee8:	e02b      	b.n	22f42 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22eea:	683b      	ldr	r3, [r7, #0]
   22eec:	2204      	movs	r2, #4
   22eee:	4013      	ands	r3, r2
   22ef0:	d11c      	bne.n	22f2c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   22ef2:	2002      	movs	r0, #2
   22ef4:	4b1e      	ldr	r3, [pc, #120]	; (22f70 <chip_wake+0x17c>)
   22ef6:	4798      	blx	r3
		trials++;
   22ef8:	68bb      	ldr	r3, [r7, #8]
   22efa:	3301      	adds	r3, #1
   22efc:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22efe:	68bb      	ldr	r3, [r7, #8]
   22f00:	2b04      	cmp	r3, #4
   22f02:	d9ce      	bls.n	22ea2 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22f04:	23ad      	movs	r3, #173	; 0xad
   22f06:	005a      	lsls	r2, r3, #1
   22f08:	4914      	ldr	r1, [pc, #80]	; (22f5c <chip_wake+0x168>)
   22f0a:	4b15      	ldr	r3, [pc, #84]	; (22f60 <chip_wake+0x16c>)
   22f0c:	0018      	movs	r0, r3
   22f0e:	4b15      	ldr	r3, [pc, #84]	; (22f64 <chip_wake+0x170>)
   22f10:	4798      	blx	r3
   22f12:	4b18      	ldr	r3, [pc, #96]	; (22f74 <chip_wake+0x180>)
   22f14:	0018      	movs	r0, r3
   22f16:	4b13      	ldr	r3, [pc, #76]	; (22f64 <chip_wake+0x170>)
   22f18:	4798      	blx	r3
   22f1a:	4b14      	ldr	r3, [pc, #80]	; (22f6c <chip_wake+0x178>)
   22f1c:	0018      	movs	r0, r3
   22f1e:	4b11      	ldr	r3, [pc, #68]	; (22f64 <chip_wake+0x170>)
   22f20:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   22f22:	230f      	movs	r3, #15
   22f24:	18fb      	adds	r3, r7, r3
   22f26:	22fc      	movs	r2, #252	; 0xfc
   22f28:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22f2a:	e00a      	b.n	22f42 <chip_wake+0x14e>
			break;
   22f2c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22f2e:	4b12      	ldr	r3, [pc, #72]	; (22f78 <chip_wake+0x184>)
   22f30:	4798      	blx	r3
   22f32:	e006      	b.n	22f42 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22f34:	46c0      	nop			; (mov r8, r8)
   22f36:	e004      	b.n	22f42 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22f38:	46c0      	nop			; (mov r8, r8)
   22f3a:	e002      	b.n	22f42 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22f3c:	46c0      	nop			; (mov r8, r8)
   22f3e:	e000      	b.n	22f42 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22f40:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   22f42:	230f      	movs	r3, #15
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	781b      	ldrb	r3, [r3, #0]
   22f48:	b25b      	sxtb	r3, r3
}
   22f4a:	0018      	movs	r0, r3
   22f4c:	46bd      	mov	sp, r7
   22f4e:	b005      	add	sp, #20
   22f50:	bd90      	pop	{r4, r7, pc}
   22f52:	46c0      	nop			; (mov r8, r8)
   22f54:	00023325 	.word	0x00023325
   22f58:	00023349 	.word	0x00023349
   22f5c:	0003b264 	.word	0x0003b264
   22f60:	0003b1d8 	.word	0x0003b1d8
   22f64:	0001e639 	.word	0x0001e639
   22f68:	0003b1ec 	.word	0x0003b1ec
   22f6c:	0003b204 	.word	0x0003b204
   22f70:	00020a8d 	.word	0x00020a8d
   22f74:	0003b208 	.word	0x0003b208
   22f78:	000232e5 	.word	0x000232e5

00022f7c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22f7c:	b580      	push	{r7, lr}
   22f7e:	b088      	sub	sp, #32
   22f80:	af00      	add	r7, sp, #0
   22f82:	0002      	movs	r2, r0
   22f84:	1dfb      	adds	r3, r7, #7
   22f86:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22f88:	2313      	movs	r3, #19
   22f8a:	18fb      	adds	r3, r7, r3
   22f8c:	2200      	movs	r2, #0
   22f8e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22f90:	2300      	movs	r3, #0
   22f92:	61fb      	str	r3, [r7, #28]
   22f94:	2300      	movs	r3, #0
   22f96:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22f98:	2300      	movs	r3, #0
   22f9a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22f9c:	4b4a      	ldr	r3, [pc, #296]	; (230c8 <wait_for_bootrom+0x14c>)
   22f9e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22fa0:	2300      	movs	r3, #0
   22fa2:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22fa4:	4b49      	ldr	r3, [pc, #292]	; (230cc <wait_for_bootrom+0x150>)
   22fa6:	0018      	movs	r0, r3
   22fa8:	4b49      	ldr	r3, [pc, #292]	; (230d0 <wait_for_bootrom+0x154>)
   22faa:	4798      	blx	r3
   22fac:	0003      	movs	r3, r0
   22fae:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   22fb0:	69fb      	ldr	r3, [r7, #28]
   22fb2:	2b00      	cmp	r3, #0
   22fb4:	db03      	blt.n	22fbe <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22fb6:	2001      	movs	r0, #1
   22fb8:	4b46      	ldr	r3, [pc, #280]	; (230d4 <wait_for_bootrom+0x158>)
   22fba:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22fbc:	e7f2      	b.n	22fa4 <wait_for_bootrom+0x28>
			break;
   22fbe:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22fc0:	4b45      	ldr	r3, [pc, #276]	; (230d8 <wait_for_bootrom+0x15c>)
   22fc2:	0018      	movs	r0, r3
   22fc4:	4b42      	ldr	r3, [pc, #264]	; (230d0 <wait_for_bootrom+0x154>)
   22fc6:	4798      	blx	r3
   22fc8:	0003      	movs	r3, r0
   22fca:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22fcc:	69fb      	ldr	r3, [r7, #28]
   22fce:	2201      	movs	r2, #1
   22fd0:	4013      	ands	r3, r2
   22fd2:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22fd4:	69fb      	ldr	r3, [r7, #28]
   22fd6:	2b00      	cmp	r3, #0
   22fd8:	d112      	bne.n	23000 <wait_for_bootrom+0x84>
	{
		reg = 0;
   22fda:	2300      	movs	r3, #0
   22fdc:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22fde:	e00b      	b.n	22ff8 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22fe0:	2001      	movs	r0, #1
   22fe2:	4b3c      	ldr	r3, [pc, #240]	; (230d4 <wait_for_bootrom+0x158>)
   22fe4:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22fe6:	4b3d      	ldr	r3, [pc, #244]	; (230dc <wait_for_bootrom+0x160>)
   22fe8:	0018      	movs	r0, r3
   22fea:	4b39      	ldr	r3, [pc, #228]	; (230d0 <wait_for_bootrom+0x154>)
   22fec:	4798      	blx	r3
   22fee:	0003      	movs	r3, r0
   22ff0:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   22ff2:	69bb      	ldr	r3, [r7, #24]
   22ff4:	3301      	adds	r3, #1
   22ff6:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22ff8:	69fb      	ldr	r3, [r7, #28]
   22ffa:	4a39      	ldr	r2, [pc, #228]	; (230e0 <wait_for_bootrom+0x164>)
   22ffc:	4293      	cmp	r3, r2
   22ffe:	d1ef      	bne.n	22fe0 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   23000:	1dfb      	adds	r3, r7, #7
   23002:	781b      	ldrb	r3, [r3, #0]
   23004:	2b02      	cmp	r3, #2
   23006:	d10d      	bne.n	23024 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23008:	4a36      	ldr	r2, [pc, #216]	; (230e4 <wait_for_bootrom+0x168>)
   2300a:	4b37      	ldr	r3, [pc, #220]	; (230e8 <wait_for_bootrom+0x16c>)
   2300c:	0011      	movs	r1, r2
   2300e:	0018      	movs	r0, r3
   23010:	4b36      	ldr	r3, [pc, #216]	; (230ec <wait_for_bootrom+0x170>)
   23012:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23014:	2380      	movs	r3, #128	; 0x80
   23016:	035b      	lsls	r3, r3, #13
   23018:	4a35      	ldr	r2, [pc, #212]	; (230f0 <wait_for_bootrom+0x174>)
   2301a:	0019      	movs	r1, r3
   2301c:	0010      	movs	r0, r2
   2301e:	4b33      	ldr	r3, [pc, #204]	; (230ec <wait_for_bootrom+0x170>)
   23020:	4798      	blx	r3
   23022:	e022      	b.n	2306a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   23024:	1dfb      	adds	r3, r7, #7
   23026:	781b      	ldrb	r3, [r3, #0]
   23028:	2b03      	cmp	r3, #3
   2302a:	d10b      	bne.n	23044 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   2302c:	4a2d      	ldr	r2, [pc, #180]	; (230e4 <wait_for_bootrom+0x168>)
   2302e:	4b2e      	ldr	r3, [pc, #184]	; (230e8 <wait_for_bootrom+0x16c>)
   23030:	0011      	movs	r1, r2
   23032:	0018      	movs	r0, r3
   23034:	4b2d      	ldr	r3, [pc, #180]	; (230ec <wait_for_bootrom+0x170>)
   23036:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   23038:	4b2d      	ldr	r3, [pc, #180]	; (230f0 <wait_for_bootrom+0x174>)
   2303a:	2100      	movs	r1, #0
   2303c:	0018      	movs	r0, r3
   2303e:	4b2b      	ldr	r3, [pc, #172]	; (230ec <wait_for_bootrom+0x170>)
   23040:	4798      	blx	r3
   23042:	e012      	b.n	2306a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   23044:	1dfb      	adds	r3, r7, #7
   23046:	781b      	ldrb	r3, [r3, #0]
   23048:	2b04      	cmp	r3, #4
   2304a:	d108      	bne.n	2305e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   2304c:	2380      	movs	r3, #128	; 0x80
   2304e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   23050:	68fb      	ldr	r3, [r7, #12]
   23052:	4a27      	ldr	r2, [pc, #156]	; (230f0 <wait_for_bootrom+0x174>)
   23054:	0019      	movs	r1, r3
   23056:	0010      	movs	r0, r2
   23058:	4b24      	ldr	r3, [pc, #144]	; (230ec <wait_for_bootrom+0x170>)
   2305a:	4798      	blx	r3
   2305c:	e005      	b.n	2306a <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2305e:	68fb      	ldr	r3, [r7, #12]
   23060:	4a23      	ldr	r2, [pc, #140]	; (230f0 <wait_for_bootrom+0x174>)
   23062:	0019      	movs	r1, r3
   23064:	0010      	movs	r0, r2
   23066:	4b21      	ldr	r3, [pc, #132]	; (230ec <wait_for_bootrom+0x170>)
   23068:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   2306a:	4b22      	ldr	r3, [pc, #136]	; (230f4 <wait_for_bootrom+0x178>)
   2306c:	4798      	blx	r3
   2306e:	0003      	movs	r3, r0
   23070:	051b      	lsls	r3, r3, #20
   23072:	0d1b      	lsrs	r3, r3, #20
   23074:	4a20      	ldr	r2, [pc, #128]	; (230f8 <wait_for_bootrom+0x17c>)
   23076:	4293      	cmp	r3, r2
   23078:	d906      	bls.n	23088 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   2307a:	697b      	ldr	r3, [r7, #20]
   2307c:	2202      	movs	r2, #2
   2307e:	4313      	orrs	r3, r2
   23080:	0018      	movs	r0, r3
   23082:	4b1e      	ldr	r3, [pc, #120]	; (230fc <wait_for_bootrom+0x180>)
   23084:	4798      	blx	r3
   23086:	e003      	b.n	23090 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23088:	697b      	ldr	r3, [r7, #20]
   2308a:	0018      	movs	r0, r3
   2308c:	4b1b      	ldr	r3, [pc, #108]	; (230fc <wait_for_bootrom+0x180>)
   2308e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   23090:	4b1b      	ldr	r3, [pc, #108]	; (23100 <wait_for_bootrom+0x184>)
   23092:	0018      	movs	r0, r3
   23094:	4b1b      	ldr	r3, [pc, #108]	; (23104 <wait_for_bootrom+0x188>)
   23096:	4798      	blx	r3
   23098:	68fa      	ldr	r2, [r7, #12]
   2309a:	4b1b      	ldr	r3, [pc, #108]	; (23108 <wait_for_bootrom+0x18c>)
   2309c:	0011      	movs	r1, r2
   2309e:	0018      	movs	r0, r3
   230a0:	4b18      	ldr	r3, [pc, #96]	; (23104 <wait_for_bootrom+0x188>)
   230a2:	4798      	blx	r3
   230a4:	4b19      	ldr	r3, [pc, #100]	; (2310c <wait_for_bootrom+0x190>)
   230a6:	0018      	movs	r0, r3
   230a8:	4b16      	ldr	r3, [pc, #88]	; (23104 <wait_for_bootrom+0x188>)
   230aa:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   230ac:	4a18      	ldr	r2, [pc, #96]	; (23110 <wait_for_bootrom+0x194>)
   230ae:	4b0b      	ldr	r3, [pc, #44]	; (230dc <wait_for_bootrom+0x160>)
   230b0:	0011      	movs	r1, r2
   230b2:	0018      	movs	r0, r3
   230b4:	4b0d      	ldr	r3, [pc, #52]	; (230ec <wait_for_bootrom+0x170>)
   230b6:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   230b8:	2313      	movs	r3, #19
   230ba:	18fb      	adds	r3, r7, r3
   230bc:	781b      	ldrb	r3, [r3, #0]
   230be:	b25b      	sxtb	r3, r3
}
   230c0:	0018      	movs	r0, r3
   230c2:	46bd      	mov	sp, r7
   230c4:	b008      	add	sp, #32
   230c6:	bd80      	pop	{r7, pc}
   230c8:	13301354 	.word	0x13301354
   230cc:	00001014 	.word	0x00001014
   230d0:	00023305 	.word	0x00023305
   230d4:	00020a8d 	.word	0x00020a8d
   230d8:	000207bc 	.word	0x000207bc
   230dc:	000c000c 	.word	0x000c000c
   230e0:	10add09e 	.word	0x10add09e
   230e4:	3c1cd57d 	.word	0x3c1cd57d
   230e8:	000207ac 	.word	0x000207ac
   230ec:	00023349 	.word	0x00023349
   230f0:	0000108c 	.word	0x0000108c
   230f4:	00022c25 	.word	0x00022c25
   230f8:	0000039f 	.word	0x0000039f
   230fc:	00022af5 	.word	0x00022af5
   23100:	0003b224 	.word	0x0003b224
   23104:	0001e639 	.word	0x0001e639
   23108:	0003b230 	.word	0x0003b230
   2310c:	0003b204 	.word	0x0003b204
   23110:	ef522f61 	.word	0xef522f61

00023114 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23114:	b580      	push	{r7, lr}
   23116:	b088      	sub	sp, #32
   23118:	af00      	add	r7, sp, #0
   2311a:	0002      	movs	r2, r0
   2311c:	1dfb      	adds	r3, r7, #7
   2311e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23120:	231f      	movs	r3, #31
   23122:	18fb      	adds	r3, r7, r3
   23124:	2200      	movs	r2, #0
   23126:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23128:	2300      	movs	r3, #0
   2312a:	61bb      	str	r3, [r7, #24]
   2312c:	2300      	movs	r3, #0
   2312e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   23130:	2301      	movs	r3, #1
   23132:	425b      	negs	r3, r3
   23134:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   23136:	4b1d      	ldr	r3, [pc, #116]	; (231ac <wait_for_firmware_start+0x98>)
   23138:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   2313a:	4b1d      	ldr	r3, [pc, #116]	; (231b0 <wait_for_firmware_start+0x9c>)
   2313c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2313e:	1dfb      	adds	r3, r7, #7
   23140:	781b      	ldrb	r3, [r3, #0]
   23142:	2b02      	cmp	r3, #2
   23144:	d003      	beq.n	2314e <wait_for_firmware_start+0x3a>
   23146:	1dfb      	adds	r3, r7, #7
   23148:	781b      	ldrb	r3, [r3, #0]
   2314a:	2b03      	cmp	r3, #3
   2314c:	d119      	bne.n	23182 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2314e:	4b19      	ldr	r3, [pc, #100]	; (231b4 <wait_for_firmware_start+0xa0>)
   23150:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   23152:	4b19      	ldr	r3, [pc, #100]	; (231b8 <wait_for_firmware_start+0xa4>)
   23154:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   23156:	e014      	b.n	23182 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23158:	2002      	movs	r0, #2
   2315a:	4b18      	ldr	r3, [pc, #96]	; (231bc <wait_for_firmware_start+0xa8>)
   2315c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2315e:	68fb      	ldr	r3, [r7, #12]
   23160:	0018      	movs	r0, r3
   23162:	4b17      	ldr	r3, [pc, #92]	; (231c0 <wait_for_firmware_start+0xac>)
   23164:	4798      	blx	r3
   23166:	0003      	movs	r3, r0
   23168:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   2316a:	697b      	ldr	r3, [r7, #20]
   2316c:	3301      	adds	r3, #1
   2316e:	617b      	str	r3, [r7, #20]
   23170:	697a      	ldr	r2, [r7, #20]
   23172:	693b      	ldr	r3, [r7, #16]
   23174:	429a      	cmp	r2, r3
   23176:	d304      	bcc.n	23182 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23178:	231f      	movs	r3, #31
   2317a:	18fb      	adds	r3, r7, r3
   2317c:	22fb      	movs	r2, #251	; 0xfb
   2317e:	701a      	strb	r2, [r3, #0]
			goto ERR;
   23180:	e00c      	b.n	2319c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   23182:	68ba      	ldr	r2, [r7, #8]
   23184:	69bb      	ldr	r3, [r7, #24]
   23186:	429a      	cmp	r2, r3
   23188:	d1e6      	bne.n	23158 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   2318a:	68bb      	ldr	r3, [r7, #8]
   2318c:	4a08      	ldr	r2, [pc, #32]	; (231b0 <wait_for_firmware_start+0x9c>)
   2318e:	4293      	cmp	r3, r2
   23190:	d104      	bne.n	2319c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   23192:	4b06      	ldr	r3, [pc, #24]	; (231ac <wait_for_firmware_start+0x98>)
   23194:	2100      	movs	r1, #0
   23196:	0018      	movs	r0, r3
   23198:	4b0a      	ldr	r3, [pc, #40]	; (231c4 <wait_for_firmware_start+0xb0>)
   2319a:	4798      	blx	r3
	}
ERR:
	return ret;
   2319c:	231f      	movs	r3, #31
   2319e:	18fb      	adds	r3, r7, r3
   231a0:	781b      	ldrb	r3, [r3, #0]
   231a2:	b25b      	sxtb	r3, r3
}
   231a4:	0018      	movs	r0, r3
   231a6:	46bd      	mov	sp, r7
   231a8:	b008      	add	sp, #32
   231aa:	bd80      	pop	{r7, pc}
   231ac:	0000108c 	.word	0x0000108c
   231b0:	02532636 	.word	0x02532636
   231b4:	000207ac 	.word	0x000207ac
   231b8:	d75dc1c3 	.word	0xd75dc1c3
   231bc:	00020a8d 	.word	0x00020a8d
   231c0:	00023305 	.word	0x00023305
   231c4:	00023349 	.word	0x00023349

000231c8 <chip_deinit>:

sint8 chip_deinit(void)
{
   231c8:	b590      	push	{r4, r7, lr}
   231ca:	b083      	sub	sp, #12
   231cc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   231ce:	2300      	movs	r3, #0
   231d0:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   231d2:	1dfc      	adds	r4, r7, #7
   231d4:	003a      	movs	r2, r7
   231d6:	23a0      	movs	r3, #160	; 0xa0
   231d8:	015b      	lsls	r3, r3, #5
   231da:	0011      	movs	r1, r2
   231dc:	0018      	movs	r0, r3
   231de:	4b20      	ldr	r3, [pc, #128]	; (23260 <chip_deinit+0x98>)
   231e0:	4798      	blx	r3
   231e2:	0003      	movs	r3, r0
   231e4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   231e6:	1dfb      	adds	r3, r7, #7
   231e8:	781b      	ldrb	r3, [r3, #0]
   231ea:	b25b      	sxtb	r3, r3
   231ec:	2b00      	cmp	r3, #0
   231ee:	d00e      	beq.n	2320e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   231f0:	4a1c      	ldr	r2, [pc, #112]	; (23264 <chip_deinit+0x9c>)
   231f2:	491d      	ldr	r1, [pc, #116]	; (23268 <chip_deinit+0xa0>)
   231f4:	4b1d      	ldr	r3, [pc, #116]	; (2326c <chip_deinit+0xa4>)
   231f6:	0018      	movs	r0, r3
   231f8:	4b1d      	ldr	r3, [pc, #116]	; (23270 <chip_deinit+0xa8>)
   231fa:	4798      	blx	r3
   231fc:	4b1d      	ldr	r3, [pc, #116]	; (23274 <chip_deinit+0xac>)
   231fe:	0018      	movs	r0, r3
   23200:	4b1b      	ldr	r3, [pc, #108]	; (23270 <chip_deinit+0xa8>)
   23202:	4798      	blx	r3
   23204:	4b1c      	ldr	r3, [pc, #112]	; (23278 <chip_deinit+0xb0>)
   23206:	0018      	movs	r0, r3
   23208:	4b19      	ldr	r3, [pc, #100]	; (23270 <chip_deinit+0xa8>)
   2320a:	4798      	blx	r3
		goto ERR1;
   2320c:	e021      	b.n	23252 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2320e:	683b      	ldr	r3, [r7, #0]
   23210:	4a1a      	ldr	r2, [pc, #104]	; (2327c <chip_deinit+0xb4>)
   23212:	4013      	ands	r3, r2
   23214:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23216:	683a      	ldr	r2, [r7, #0]
   23218:	1dfc      	adds	r4, r7, #7
   2321a:	23a0      	movs	r3, #160	; 0xa0
   2321c:	015b      	lsls	r3, r3, #5
   2321e:	0011      	movs	r1, r2
   23220:	0018      	movs	r0, r3
   23222:	4b17      	ldr	r3, [pc, #92]	; (23280 <chip_deinit+0xb8>)
   23224:	4798      	blx	r3
   23226:	0003      	movs	r3, r0
   23228:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   2322a:	1dfb      	adds	r3, r7, #7
   2322c:	781b      	ldrb	r3, [r3, #0]
   2322e:	b25b      	sxtb	r3, r3
   23230:	2b00      	cmp	r3, #0
   23232:	d00e      	beq.n	23252 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   23234:	4a13      	ldr	r2, [pc, #76]	; (23284 <chip_deinit+0xbc>)
   23236:	490c      	ldr	r1, [pc, #48]	; (23268 <chip_deinit+0xa0>)
   23238:	4b0c      	ldr	r3, [pc, #48]	; (2326c <chip_deinit+0xa4>)
   2323a:	0018      	movs	r0, r3
   2323c:	4b0c      	ldr	r3, [pc, #48]	; (23270 <chip_deinit+0xa8>)
   2323e:	4798      	blx	r3
   23240:	4b0c      	ldr	r3, [pc, #48]	; (23274 <chip_deinit+0xac>)
   23242:	0018      	movs	r0, r3
   23244:	4b0a      	ldr	r3, [pc, #40]	; (23270 <chip_deinit+0xa8>)
   23246:	4798      	blx	r3
   23248:	4b0b      	ldr	r3, [pc, #44]	; (23278 <chip_deinit+0xb0>)
   2324a:	0018      	movs	r0, r3
   2324c:	4b08      	ldr	r3, [pc, #32]	; (23270 <chip_deinit+0xa8>)
   2324e:	4798      	blx	r3
		goto ERR1;
   23250:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23252:	1dfb      	adds	r3, r7, #7
   23254:	781b      	ldrb	r3, [r3, #0]
   23256:	b25b      	sxtb	r3, r3
}
   23258:	0018      	movs	r0, r3
   2325a:	46bd      	mov	sp, r7
   2325c:	b003      	add	sp, #12
   2325e:	bd90      	pop	{r4, r7, pc}
   23260:	00023325 	.word	0x00023325
   23264:	00000201 	.word	0x00000201
   23268:	0003b270 	.word	0x0003b270
   2326c:	0003b1d8 	.word	0x0003b1d8
   23270:	0001e639 	.word	0x0001e639
   23274:	0003b248 	.word	0x0003b248
   23278:	0003b204 	.word	0x0003b204
   2327c:	fffffbff 	.word	0xfffffbff
   23280:	00023349 	.word	0x00023349
   23284:	00000207 	.word	0x00000207

00023288 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23288:	b590      	push	{r4, r7, lr}
   2328a:	b085      	sub	sp, #20
   2328c:	af00      	add	r7, sp, #0
   2328e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23290:	230f      	movs	r3, #15
   23292:	18fb      	adds	r3, r7, r3
   23294:	2200      	movs	r2, #0
   23296:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23298:	230f      	movs	r3, #15
   2329a:	18fc      	adds	r4, r7, r3
   2329c:	687b      	ldr	r3, [r7, #4]
   2329e:	0018      	movs	r0, r3
   232a0:	4b05      	ldr	r3, [pc, #20]	; (232b8 <nm_bus_iface_init+0x30>)
   232a2:	4798      	blx	r3
   232a4:	0003      	movs	r3, r0
   232a6:	7023      	strb	r3, [r4, #0]
	return ret;
   232a8:	230f      	movs	r3, #15
   232aa:	18fb      	adds	r3, r7, r3
   232ac:	781b      	ldrb	r3, [r3, #0]
   232ae:	b25b      	sxtb	r3, r3
}
   232b0:	0018      	movs	r0, r3
   232b2:	46bd      	mov	sp, r7
   232b4:	b005      	add	sp, #20
   232b6:	bd90      	pop	{r4, r7, pc}
   232b8:	00021149 	.word	0x00021149

000232bc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   232bc:	b590      	push	{r4, r7, lr}
   232be:	b083      	sub	sp, #12
   232c0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   232c2:	1dfb      	adds	r3, r7, #7
   232c4:	2200      	movs	r2, #0
   232c6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   232c8:	1dfc      	adds	r4, r7, #7
   232ca:	4b05      	ldr	r3, [pc, #20]	; (232e0 <nm_bus_iface_deinit+0x24>)
   232cc:	4798      	blx	r3
   232ce:	0003      	movs	r3, r0
   232d0:	7023      	strb	r3, [r4, #0]

	return ret;
   232d2:	1dfb      	adds	r3, r7, #7
   232d4:	781b      	ldrb	r3, [r3, #0]
   232d6:	b25b      	sxtb	r3, r3
}
   232d8:	0018      	movs	r0, r3
   232da:	46bd      	mov	sp, r7
   232dc:	b003      	add	sp, #12
   232de:	bd90      	pop	{r4, r7, pc}
   232e0:	000212c1 	.word	0x000212c1

000232e4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   232e4:	b580      	push	{r7, lr}
   232e6:	b082      	sub	sp, #8
   232e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   232ea:	1dfb      	adds	r3, r7, #7
   232ec:	2200      	movs	r2, #0
   232ee:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   232f0:	4b03      	ldr	r3, [pc, #12]	; (23300 <nm_bus_reset+0x1c>)
   232f2:	4798      	blx	r3
   232f4:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   232f6:	0018      	movs	r0, r3
   232f8:	46bd      	mov	sp, r7
   232fa:	b002      	add	sp, #8
   232fc:	bd80      	pop	{r7, pc}
   232fe:	46c0      	nop			; (mov r8, r8)
   23300:	00025111 	.word	0x00025111

00023304 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23304:	b580      	push	{r7, lr}
   23306:	b082      	sub	sp, #8
   23308:	af00      	add	r7, sp, #0
   2330a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   2330c:	687b      	ldr	r3, [r7, #4]
   2330e:	0018      	movs	r0, r3
   23310:	4b03      	ldr	r3, [pc, #12]	; (23320 <nm_read_reg+0x1c>)
   23312:	4798      	blx	r3
   23314:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23316:	0018      	movs	r0, r3
   23318:	46bd      	mov	sp, r7
   2331a:	b002      	add	sp, #8
   2331c:	bd80      	pop	{r7, pc}
   2331e:	46c0      	nop			; (mov r8, r8)
   23320:	000252a5 	.word	0x000252a5

00023324 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23324:	b580      	push	{r7, lr}
   23326:	b082      	sub	sp, #8
   23328:	af00      	add	r7, sp, #0
   2332a:	6078      	str	r0, [r7, #4]
   2332c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   2332e:	683a      	ldr	r2, [r7, #0]
   23330:	687b      	ldr	r3, [r7, #4]
   23332:	0011      	movs	r1, r2
   23334:	0018      	movs	r0, r3
   23336:	4b03      	ldr	r3, [pc, #12]	; (23344 <nm_read_reg_with_ret+0x20>)
   23338:	4798      	blx	r3
   2333a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   2333c:	0018      	movs	r0, r3
   2333e:	46bd      	mov	sp, r7
   23340:	b002      	add	sp, #8
   23342:	bd80      	pop	{r7, pc}
   23344:	000252c9 	.word	0x000252c9

00023348 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23348:	b580      	push	{r7, lr}
   2334a:	b082      	sub	sp, #8
   2334c:	af00      	add	r7, sp, #0
   2334e:	6078      	str	r0, [r7, #4]
   23350:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   23352:	683a      	ldr	r2, [r7, #0]
   23354:	687b      	ldr	r3, [r7, #4]
   23356:	0011      	movs	r1, r2
   23358:	0018      	movs	r0, r3
   2335a:	4b03      	ldr	r3, [pc, #12]	; (23368 <nm_write_reg+0x20>)
   2335c:	4798      	blx	r3
   2335e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   23360:	0018      	movs	r0, r3
   23362:	46bd      	mov	sp, r7
   23364:	b002      	add	sp, #8
   23366:	bd80      	pop	{r7, pc}
   23368:	00025319 	.word	0x00025319

0002336c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2336c:	b580      	push	{r7, lr}
   2336e:	b084      	sub	sp, #16
   23370:	af00      	add	r7, sp, #0
   23372:	60f8      	str	r0, [r7, #12]
   23374:	60b9      	str	r1, [r7, #8]
   23376:	1dbb      	adds	r3, r7, #6
   23378:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   2337a:	1dbb      	adds	r3, r7, #6
   2337c:	881a      	ldrh	r2, [r3, #0]
   2337e:	68b9      	ldr	r1, [r7, #8]
   23380:	68fb      	ldr	r3, [r7, #12]
   23382:	0018      	movs	r0, r3
   23384:	4b03      	ldr	r3, [pc, #12]	; (23394 <p_nm_read_block+0x28>)
   23386:	4798      	blx	r3
   23388:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2338a:	0018      	movs	r0, r3
   2338c:	46bd      	mov	sp, r7
   2338e:	b004      	add	sp, #16
   23390:	bd80      	pop	{r7, pc}
   23392:	46c0      	nop			; (mov r8, r8)
   23394:	00025369 	.word	0x00025369

00023398 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23398:	b580      	push	{r7, lr}
   2339a:	b086      	sub	sp, #24
   2339c:	af00      	add	r7, sp, #0
   2339e:	60f8      	str	r0, [r7, #12]
   233a0:	60b9      	str	r1, [r7, #8]
   233a2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   233a4:	4b2d      	ldr	r3, [pc, #180]	; (2345c <nm_read_block+0xc4>)
   233a6:	881a      	ldrh	r2, [r3, #0]
   233a8:	2310      	movs	r3, #16
   233aa:	18fb      	adds	r3, r7, r3
   233ac:	3a08      	subs	r2, #8
   233ae:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   233b0:	2300      	movs	r3, #0
   233b2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   233b4:	2313      	movs	r3, #19
   233b6:	18fb      	adds	r3, r7, r3
   233b8:	2200      	movs	r2, #0
   233ba:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   233bc:	2310      	movs	r3, #16
   233be:	18fb      	adds	r3, r7, r3
   233c0:	881a      	ldrh	r2, [r3, #0]
   233c2:	687b      	ldr	r3, [r7, #4]
   233c4:	429a      	cmp	r2, r3
   233c6:	d313      	bcc.n	233f0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   233c8:	68ba      	ldr	r2, [r7, #8]
   233ca:	697b      	ldr	r3, [r7, #20]
   233cc:	18d1      	adds	r1, r2, r3
   233ce:	687b      	ldr	r3, [r7, #4]
   233d0:	b29a      	uxth	r2, r3
   233d2:	68fb      	ldr	r3, [r7, #12]
   233d4:	0018      	movs	r0, r3
   233d6:	4b22      	ldr	r3, [pc, #136]	; (23460 <nm_read_block+0xc8>)
   233d8:	4798      	blx	r3
   233da:	0003      	movs	r3, r0
   233dc:	b2da      	uxtb	r2, r3
   233de:	2313      	movs	r3, #19
   233e0:	18fb      	adds	r3, r7, r3
   233e2:	781b      	ldrb	r3, [r3, #0]
   233e4:	18d3      	adds	r3, r2, r3
   233e6:	b2da      	uxtb	r2, r3
   233e8:	2313      	movs	r3, #19
   233ea:	18fb      	adds	r3, r7, r3
   233ec:	701a      	strb	r2, [r3, #0]
			break;
   233ee:	e02d      	b.n	2344c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   233f0:	68ba      	ldr	r2, [r7, #8]
   233f2:	697b      	ldr	r3, [r7, #20]
   233f4:	18d1      	adds	r1, r2, r3
   233f6:	2310      	movs	r3, #16
   233f8:	18fb      	adds	r3, r7, r3
   233fa:	881a      	ldrh	r2, [r3, #0]
   233fc:	68fb      	ldr	r3, [r7, #12]
   233fe:	0018      	movs	r0, r3
   23400:	4b17      	ldr	r3, [pc, #92]	; (23460 <nm_read_block+0xc8>)
   23402:	4798      	blx	r3
   23404:	0003      	movs	r3, r0
   23406:	b2da      	uxtb	r2, r3
   23408:	2313      	movs	r3, #19
   2340a:	18fb      	adds	r3, r7, r3
   2340c:	781b      	ldrb	r3, [r3, #0]
   2340e:	18d3      	adds	r3, r2, r3
   23410:	b2da      	uxtb	r2, r3
   23412:	2313      	movs	r3, #19
   23414:	18fb      	adds	r3, r7, r3
   23416:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23418:	2313      	movs	r3, #19
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	781b      	ldrb	r3, [r3, #0]
   2341e:	b25b      	sxtb	r3, r3
   23420:	2b00      	cmp	r3, #0
   23422:	d112      	bne.n	2344a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23424:	2310      	movs	r3, #16
   23426:	18fb      	adds	r3, r7, r3
   23428:	881b      	ldrh	r3, [r3, #0]
   2342a:	687a      	ldr	r2, [r7, #4]
   2342c:	1ad3      	subs	r3, r2, r3
   2342e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23430:	2310      	movs	r3, #16
   23432:	18fb      	adds	r3, r7, r3
   23434:	881b      	ldrh	r3, [r3, #0]
   23436:	697a      	ldr	r2, [r7, #20]
   23438:	18d3      	adds	r3, r2, r3
   2343a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   2343c:	2310      	movs	r3, #16
   2343e:	18fb      	adds	r3, r7, r3
   23440:	881b      	ldrh	r3, [r3, #0]
   23442:	68fa      	ldr	r2, [r7, #12]
   23444:	18d3      	adds	r3, r2, r3
   23446:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23448:	e7b8      	b.n	233bc <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2344a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   2344c:	2313      	movs	r3, #19
   2344e:	18fb      	adds	r3, r7, r3
   23450:	781b      	ldrb	r3, [r3, #0]
   23452:	b25b      	sxtb	r3, r3
}
   23454:	0018      	movs	r0, r3
   23456:	46bd      	mov	sp, r7
   23458:	b006      	add	sp, #24
   2345a:	bd80      	pop	{r7, pc}
   2345c:	20000124 	.word	0x20000124
   23460:	0002336d 	.word	0x0002336d

00023464 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23464:	b580      	push	{r7, lr}
   23466:	b084      	sub	sp, #16
   23468:	af00      	add	r7, sp, #0
   2346a:	60f8      	str	r0, [r7, #12]
   2346c:	60b9      	str	r1, [r7, #8]
   2346e:	1dbb      	adds	r3, r7, #6
   23470:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   23472:	1dbb      	adds	r3, r7, #6
   23474:	881a      	ldrh	r2, [r3, #0]
   23476:	68b9      	ldr	r1, [r7, #8]
   23478:	68fb      	ldr	r3, [r7, #12]
   2347a:	0018      	movs	r0, r3
   2347c:	4b03      	ldr	r3, [pc, #12]	; (2348c <p_nm_write_block+0x28>)
   2347e:	4798      	blx	r3
   23480:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23482:	0018      	movs	r0, r3
   23484:	46bd      	mov	sp, r7
   23486:	b004      	add	sp, #16
   23488:	bd80      	pop	{r7, pc}
   2348a:	46c0      	nop			; (mov r8, r8)
   2348c:	000253c1 	.word	0x000253c1

00023490 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23490:	b580      	push	{r7, lr}
   23492:	b086      	sub	sp, #24
   23494:	af00      	add	r7, sp, #0
   23496:	60f8      	str	r0, [r7, #12]
   23498:	60b9      	str	r1, [r7, #8]
   2349a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   2349c:	4b2d      	ldr	r3, [pc, #180]	; (23554 <nm_write_block+0xc4>)
   2349e:	881a      	ldrh	r2, [r3, #0]
   234a0:	2310      	movs	r3, #16
   234a2:	18fb      	adds	r3, r7, r3
   234a4:	3a08      	subs	r2, #8
   234a6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   234a8:	2300      	movs	r3, #0
   234aa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   234ac:	2313      	movs	r3, #19
   234ae:	18fb      	adds	r3, r7, r3
   234b0:	2200      	movs	r2, #0
   234b2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   234b4:	2310      	movs	r3, #16
   234b6:	18fb      	adds	r3, r7, r3
   234b8:	881a      	ldrh	r2, [r3, #0]
   234ba:	687b      	ldr	r3, [r7, #4]
   234bc:	429a      	cmp	r2, r3
   234be:	d313      	bcc.n	234e8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   234c0:	68ba      	ldr	r2, [r7, #8]
   234c2:	697b      	ldr	r3, [r7, #20]
   234c4:	18d1      	adds	r1, r2, r3
   234c6:	687b      	ldr	r3, [r7, #4]
   234c8:	b29a      	uxth	r2, r3
   234ca:	68fb      	ldr	r3, [r7, #12]
   234cc:	0018      	movs	r0, r3
   234ce:	4b22      	ldr	r3, [pc, #136]	; (23558 <nm_write_block+0xc8>)
   234d0:	4798      	blx	r3
   234d2:	0003      	movs	r3, r0
   234d4:	b2da      	uxtb	r2, r3
   234d6:	2313      	movs	r3, #19
   234d8:	18fb      	adds	r3, r7, r3
   234da:	781b      	ldrb	r3, [r3, #0]
   234dc:	18d3      	adds	r3, r2, r3
   234de:	b2da      	uxtb	r2, r3
   234e0:	2313      	movs	r3, #19
   234e2:	18fb      	adds	r3, r7, r3
   234e4:	701a      	strb	r2, [r3, #0]
			break;
   234e6:	e02d      	b.n	23544 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   234e8:	68ba      	ldr	r2, [r7, #8]
   234ea:	697b      	ldr	r3, [r7, #20]
   234ec:	18d1      	adds	r1, r2, r3
   234ee:	2310      	movs	r3, #16
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	881a      	ldrh	r2, [r3, #0]
   234f4:	68fb      	ldr	r3, [r7, #12]
   234f6:	0018      	movs	r0, r3
   234f8:	4b17      	ldr	r3, [pc, #92]	; (23558 <nm_write_block+0xc8>)
   234fa:	4798      	blx	r3
   234fc:	0003      	movs	r3, r0
   234fe:	b2da      	uxtb	r2, r3
   23500:	2313      	movs	r3, #19
   23502:	18fb      	adds	r3, r7, r3
   23504:	781b      	ldrb	r3, [r3, #0]
   23506:	18d3      	adds	r3, r2, r3
   23508:	b2da      	uxtb	r2, r3
   2350a:	2313      	movs	r3, #19
   2350c:	18fb      	adds	r3, r7, r3
   2350e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23510:	2313      	movs	r3, #19
   23512:	18fb      	adds	r3, r7, r3
   23514:	781b      	ldrb	r3, [r3, #0]
   23516:	b25b      	sxtb	r3, r3
   23518:	2b00      	cmp	r3, #0
   2351a:	d112      	bne.n	23542 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   2351c:	2310      	movs	r3, #16
   2351e:	18fb      	adds	r3, r7, r3
   23520:	881b      	ldrh	r3, [r3, #0]
   23522:	687a      	ldr	r2, [r7, #4]
   23524:	1ad3      	subs	r3, r2, r3
   23526:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23528:	2310      	movs	r3, #16
   2352a:	18fb      	adds	r3, r7, r3
   2352c:	881b      	ldrh	r3, [r3, #0]
   2352e:	697a      	ldr	r2, [r7, #20]
   23530:	18d3      	adds	r3, r2, r3
   23532:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23534:	2310      	movs	r3, #16
   23536:	18fb      	adds	r3, r7, r3
   23538:	881b      	ldrh	r3, [r3, #0]
   2353a:	68fa      	ldr	r2, [r7, #12]
   2353c:	18d3      	adds	r3, r2, r3
   2353e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23540:	e7b8      	b.n	234b4 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23542:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23544:	2313      	movs	r3, #19
   23546:	18fb      	adds	r3, r7, r3
   23548:	781b      	ldrb	r3, [r3, #0]
   2354a:	b25b      	sxtb	r3, r3
}
   2354c:	0018      	movs	r0, r3
   2354e:	46bd      	mov	sp, r7
   23550:	b006      	add	sp, #24
   23552:	bd80      	pop	{r7, pc}
   23554:	20000124 	.word	0x20000124
   23558:	00023465 	.word	0x00023465

0002355c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   2355c:	b590      	push	{r4, r7, lr}
   2355e:	b089      	sub	sp, #36	; 0x24
   23560:	af00      	add	r7, sp, #0
   23562:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23564:	2300      	movs	r3, #0
   23566:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23568:	231f      	movs	r3, #31
   2356a:	18fb      	adds	r3, r7, r3
   2356c:	2200      	movs	r2, #0
   2356e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23570:	230c      	movs	r3, #12
   23572:	18fb      	adds	r3, r7, r3
   23574:	0018      	movs	r0, r3
   23576:	2308      	movs	r3, #8
   23578:	001a      	movs	r2, r3
   2357a:	2100      	movs	r1, #0
   2357c:	4b64      	ldr	r3, [pc, #400]	; (23710 <nm_get_firmware_full_info+0x1b4>)
   2357e:	4798      	blx	r3
	if (pstrRev != NULL)
   23580:	687b      	ldr	r3, [r7, #4]
   23582:	2b00      	cmp	r3, #0
   23584:	d100      	bne.n	23588 <nm_get_firmware_full_info+0x2c>
   23586:	e0ba      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23588:	687b      	ldr	r3, [r7, #4]
   2358a:	2228      	movs	r2, #40	; 0x28
   2358c:	2100      	movs	r1, #0
   2358e:	0018      	movs	r0, r3
   23590:	4b60      	ldr	r3, [pc, #384]	; (23714 <nm_get_firmware_full_info+0x1b8>)
   23592:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23594:	231f      	movs	r3, #31
   23596:	18fc      	adds	r4, r7, r3
   23598:	2314      	movs	r3, #20
   2359a:	18fb      	adds	r3, r7, r3
   2359c:	4a5e      	ldr	r2, [pc, #376]	; (23718 <nm_get_firmware_full_info+0x1bc>)
   2359e:	0019      	movs	r1, r3
   235a0:	0010      	movs	r0, r2
   235a2:	4b5e      	ldr	r3, [pc, #376]	; (2371c <nm_get_firmware_full_info+0x1c0>)
   235a4:	4798      	blx	r3
   235a6:	0003      	movs	r3, r0
   235a8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   235aa:	231f      	movs	r3, #31
   235ac:	18fb      	adds	r3, r7, r3
   235ae:	781b      	ldrb	r3, [r3, #0]
   235b0:	b25b      	sxtb	r3, r3
   235b2:	2b00      	cmp	r3, #0
   235b4:	d000      	beq.n	235b8 <nm_get_firmware_full_info+0x5c>
   235b6:	e0a2      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   235b8:	697b      	ldr	r3, [r7, #20]
   235ba:	2b00      	cmp	r3, #0
   235bc:	d100      	bne.n	235c0 <nm_get_firmware_full_info+0x64>
   235be:	e09a      	b.n	236f6 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   235c0:	697b      	ldr	r3, [r7, #20]
   235c2:	22c0      	movs	r2, #192	; 0xc0
   235c4:	0292      	lsls	r2, r2, #10
   235c6:	4313      	orrs	r3, r2
   235c8:	221f      	movs	r2, #31
   235ca:	18bc      	adds	r4, r7, r2
   235cc:	220c      	movs	r2, #12
   235ce:	18b9      	adds	r1, r7, r2
   235d0:	2208      	movs	r2, #8
   235d2:	0018      	movs	r0, r3
   235d4:	4b52      	ldr	r3, [pc, #328]	; (23720 <nm_get_firmware_full_info+0x1c4>)
   235d6:	4798      	blx	r3
   235d8:	0003      	movs	r3, r0
   235da:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   235dc:	231f      	movs	r3, #31
   235de:	18fb      	adds	r3, r7, r3
   235e0:	781b      	ldrb	r3, [r3, #0]
   235e2:	b25b      	sxtb	r3, r3
   235e4:	2b00      	cmp	r3, #0
   235e6:	d000      	beq.n	235ea <nm_get_firmware_full_info+0x8e>
   235e8:	e089      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   235ea:	230c      	movs	r3, #12
   235ec:	18fb      	adds	r3, r7, r3
   235ee:	685b      	ldr	r3, [r3, #4]
   235f0:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   235f2:	697b      	ldr	r3, [r7, #20]
   235f4:	041b      	lsls	r3, r3, #16
   235f6:	0c1b      	lsrs	r3, r3, #16
   235f8:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   235fa:	697b      	ldr	r3, [r7, #20]
   235fc:	2b00      	cmp	r3, #0
   235fe:	d100      	bne.n	23602 <nm_get_firmware_full_info+0xa6>
   23600:	e074      	b.n	236ec <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23602:	697b      	ldr	r3, [r7, #20]
   23604:	22c0      	movs	r2, #192	; 0xc0
   23606:	0292      	lsls	r2, r2, #10
   23608:	4313      	orrs	r3, r2
   2360a:	221f      	movs	r2, #31
   2360c:	18bc      	adds	r4, r7, r2
   2360e:	6879      	ldr	r1, [r7, #4]
   23610:	2228      	movs	r2, #40	; 0x28
   23612:	0018      	movs	r0, r3
   23614:	4b42      	ldr	r3, [pc, #264]	; (23720 <nm_get_firmware_full_info+0x1c4>)
   23616:	4798      	blx	r3
   23618:	0003      	movs	r3, r0
   2361a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   2361c:	231f      	movs	r3, #31
   2361e:	18fb      	adds	r3, r7, r3
   23620:	781b      	ldrb	r3, [r3, #0]
   23622:	b25b      	sxtb	r3, r3
   23624:	2b00      	cmp	r3, #0
   23626:	d16a      	bne.n	236fe <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23628:	687b      	ldr	r3, [r7, #4]
   2362a:	791b      	ldrb	r3, [r3, #4]
   2362c:	021b      	lsls	r3, r3, #8
   2362e:	b21a      	sxth	r2, r3
   23630:	687b      	ldr	r3, [r7, #4]
   23632:	795b      	ldrb	r3, [r3, #5]
   23634:	011b      	lsls	r3, r3, #4
   23636:	b21b      	sxth	r3, r3
   23638:	21ff      	movs	r1, #255	; 0xff
   2363a:	400b      	ands	r3, r1
   2363c:	b21b      	sxth	r3, r3
   2363e:	4313      	orrs	r3, r2
   23640:	b21a      	sxth	r2, r3
   23642:	687b      	ldr	r3, [r7, #4]
   23644:	799b      	ldrb	r3, [r3, #6]
   23646:	b21b      	sxth	r3, r3
   23648:	210f      	movs	r1, #15
   2364a:	400b      	ands	r3, r1
   2364c:	b21b      	sxth	r3, r3
   2364e:	4313      	orrs	r3, r2
   23650:	b21a      	sxth	r2, r3
   23652:	231c      	movs	r3, #28
   23654:	18fb      	adds	r3, r7, r3
   23656:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23658:	231a      	movs	r3, #26
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	4a31      	ldr	r2, [pc, #196]	; (23724 <nm_get_firmware_full_info+0x1c8>)
   2365e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23660:	687b      	ldr	r3, [r7, #4]
   23662:	79db      	ldrb	r3, [r3, #7]
   23664:	021b      	lsls	r3, r3, #8
   23666:	b21a      	sxth	r2, r3
   23668:	687b      	ldr	r3, [r7, #4]
   2366a:	7a1b      	ldrb	r3, [r3, #8]
   2366c:	011b      	lsls	r3, r3, #4
   2366e:	b21b      	sxth	r3, r3
   23670:	21ff      	movs	r1, #255	; 0xff
   23672:	400b      	ands	r3, r1
   23674:	b21b      	sxth	r3, r3
   23676:	4313      	orrs	r3, r2
   23678:	b21a      	sxth	r2, r3
   2367a:	687b      	ldr	r3, [r7, #4]
   2367c:	7a5b      	ldrb	r3, [r3, #9]
   2367e:	b21b      	sxth	r3, r3
   23680:	210f      	movs	r1, #15
   23682:	400b      	ands	r3, r1
   23684:	b21b      	sxth	r3, r3
   23686:	4313      	orrs	r3, r2
   23688:	b21a      	sxth	r2, r3
   2368a:	2318      	movs	r3, #24
   2368c:	18fb      	adds	r3, r7, r3
   2368e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23690:	231c      	movs	r3, #28
   23692:	18fb      	adds	r3, r7, r3
   23694:	881b      	ldrh	r3, [r3, #0]
   23696:	2b00      	cmp	r3, #0
   23698:	d009      	beq.n	236ae <nm_get_firmware_full_info+0x152>
   2369a:	2318      	movs	r3, #24
   2369c:	18fb      	adds	r3, r7, r3
   2369e:	881b      	ldrh	r3, [r3, #0]
   236a0:	2b00      	cmp	r3, #0
   236a2:	d004      	beq.n	236ae <nm_get_firmware_full_info+0x152>
   236a4:	2318      	movs	r3, #24
   236a6:	18fb      	adds	r3, r7, r3
   236a8:	881b      	ldrh	r3, [r3, #0]
   236aa:	2b00      	cmp	r3, #0
   236ac:	d104      	bne.n	236b8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   236ae:	231f      	movs	r3, #31
   236b0:	18fb      	adds	r3, r7, r3
   236b2:	22f4      	movs	r2, #244	; 0xf4
   236b4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   236b6:	e022      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   236b8:	231a      	movs	r3, #26
   236ba:	18fa      	adds	r2, r7, r3
   236bc:	2318      	movs	r3, #24
   236be:	18fb      	adds	r3, r7, r3
   236c0:	8812      	ldrh	r2, [r2, #0]
   236c2:	881b      	ldrh	r3, [r3, #0]
   236c4:	429a      	cmp	r2, r3
   236c6:	d204      	bcs.n	236d2 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   236c8:	231f      	movs	r3, #31
   236ca:	18fb      	adds	r3, r7, r3
   236cc:	22f3      	movs	r2, #243	; 0xf3
   236ce:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   236d0:	e015      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   236d2:	231a      	movs	r3, #26
   236d4:	18fa      	adds	r2, r7, r3
   236d6:	231c      	movs	r3, #28
   236d8:	18fb      	adds	r3, r7, r3
   236da:	8812      	ldrh	r2, [r2, #0]
   236dc:	881b      	ldrh	r3, [r3, #0]
   236de:	429a      	cmp	r2, r3
   236e0:	d90d      	bls.n	236fe <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   236e2:	231f      	movs	r3, #31
   236e4:	18fb      	adds	r3, r7, r3
   236e6:	22f3      	movs	r2, #243	; 0xf3
   236e8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   236ea:	e008      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   236ec:	231f      	movs	r3, #31
   236ee:	18fb      	adds	r3, r7, r3
   236f0:	22f4      	movs	r2, #244	; 0xf4
   236f2:	701a      	strb	r2, [r3, #0]
   236f4:	e003      	b.n	236fe <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   236f6:	231f      	movs	r3, #31
   236f8:	18fb      	adds	r3, r7, r3
   236fa:	22f4      	movs	r2, #244	; 0xf4
   236fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   236fe:	231f      	movs	r3, #31
   23700:	18fb      	adds	r3, r7, r3
   23702:	781b      	ldrb	r3, [r3, #0]
   23704:	b25b      	sxtb	r3, r3
}
   23706:	0018      	movs	r0, r3
   23708:	46bd      	mov	sp, r7
   2370a:	b009      	add	sp, #36	; 0x24
   2370c:	bd90      	pop	{r4, r7, pc}
   2370e:	46c0      	nop			; (mov r8, r8)
   23710:	00035377 	.word	0x00035377
   23714:	0002136d 	.word	0x0002136d
   23718:	000c0008 	.word	0x000c0008
   2371c:	00023325 	.word	0x00023325
   23720:	00023399 	.word	0x00023399
   23724:	00001354 	.word	0x00001354

00023728 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23728:	b590      	push	{r4, r7, lr}
   2372a:	b085      	sub	sp, #20
   2372c:	af00      	add	r7, sp, #0
   2372e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23730:	230f      	movs	r3, #15
   23732:	18fb      	adds	r3, r7, r3
   23734:	2200      	movs	r2, #0
   23736:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23738:	687b      	ldr	r3, [r7, #4]
   2373a:	2b00      	cmp	r3, #0
   2373c:	d013      	beq.n	23766 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2373e:	230e      	movs	r3, #14
   23740:	18fb      	adds	r3, r7, r3
   23742:	687a      	ldr	r2, [r7, #4]
   23744:	7812      	ldrb	r2, [r2, #0]
   23746:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23748:	230e      	movs	r3, #14
   2374a:	18fb      	adds	r3, r7, r3
   2374c:	781b      	ldrb	r3, [r3, #0]
   2374e:	2b00      	cmp	r3, #0
   23750:	d004      	beq.n	2375c <nm_drv_init+0x34>
   23752:	230e      	movs	r3, #14
   23754:	18fb      	adds	r3, r7, r3
   23756:	781b      	ldrb	r3, [r3, #0]
   23758:	2b04      	cmp	r3, #4
   2375a:	d908      	bls.n	2376e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   2375c:	230e      	movs	r3, #14
   2375e:	18fb      	adds	r3, r7, r3
   23760:	2201      	movs	r2, #1
   23762:	701a      	strb	r2, [r3, #0]
   23764:	e003      	b.n	2376e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23766:	230e      	movs	r3, #14
   23768:	18fb      	adds	r3, r7, r3
   2376a:	2201      	movs	r2, #1
   2376c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   2376e:	230f      	movs	r3, #15
   23770:	18fc      	adds	r4, r7, r3
   23772:	2000      	movs	r0, #0
   23774:	4b41      	ldr	r3, [pc, #260]	; (2387c <nm_drv_init+0x154>)
   23776:	4798      	blx	r3
   23778:	0003      	movs	r3, r0
   2377a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2377c:	230f      	movs	r3, #15
   2377e:	18fb      	adds	r3, r7, r3
   23780:	781b      	ldrb	r3, [r3, #0]
   23782:	b25b      	sxtb	r3, r3
   23784:	2b00      	cmp	r3, #0
   23786:	d00f      	beq.n	237a8 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23788:	2390      	movs	r3, #144	; 0x90
   2378a:	005a      	lsls	r2, r3, #1
   2378c:	493c      	ldr	r1, [pc, #240]	; (23880 <nm_drv_init+0x158>)
   2378e:	4b3d      	ldr	r3, [pc, #244]	; (23884 <nm_drv_init+0x15c>)
   23790:	0018      	movs	r0, r3
   23792:	4b3d      	ldr	r3, [pc, #244]	; (23888 <nm_drv_init+0x160>)
   23794:	4798      	blx	r3
   23796:	4b3d      	ldr	r3, [pc, #244]	; (2388c <nm_drv_init+0x164>)
   23798:	0018      	movs	r0, r3
   2379a:	4b3b      	ldr	r3, [pc, #236]	; (23888 <nm_drv_init+0x160>)
   2379c:	4798      	blx	r3
   2379e:	4b3c      	ldr	r3, [pc, #240]	; (23890 <nm_drv_init+0x168>)
   237a0:	0018      	movs	r0, r3
   237a2:	4b39      	ldr	r3, [pc, #228]	; (23888 <nm_drv_init+0x160>)
   237a4:	4798      	blx	r3
		goto ERR1;
   237a6:	e061      	b.n	2386c <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   237a8:	4b3a      	ldr	r3, [pc, #232]	; (23894 <nm_drv_init+0x16c>)
   237aa:	0018      	movs	r0, r3
   237ac:	4b36      	ldr	r3, [pc, #216]	; (23888 <nm_drv_init+0x160>)
   237ae:	4798      	blx	r3
   237b0:	4b39      	ldr	r3, [pc, #228]	; (23898 <nm_drv_init+0x170>)
   237b2:	4798      	blx	r3
   237b4:	0002      	movs	r2, r0
   237b6:	4b39      	ldr	r3, [pc, #228]	; (2389c <nm_drv_init+0x174>)
   237b8:	0011      	movs	r1, r2
   237ba:	0018      	movs	r0, r3
   237bc:	4b32      	ldr	r3, [pc, #200]	; (23888 <nm_drv_init+0x160>)
   237be:	4798      	blx	r3
   237c0:	4b33      	ldr	r3, [pc, #204]	; (23890 <nm_drv_init+0x168>)
   237c2:	0018      	movs	r0, r3
   237c4:	4b30      	ldr	r3, [pc, #192]	; (23888 <nm_drv_init+0x160>)
   237c6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   237c8:	4b35      	ldr	r3, [pc, #212]	; (238a0 <nm_drv_init+0x178>)
   237ca:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   237cc:	230f      	movs	r3, #15
   237ce:	18fc      	adds	r4, r7, r3
   237d0:	230e      	movs	r3, #14
   237d2:	18fb      	adds	r3, r7, r3
   237d4:	781b      	ldrb	r3, [r3, #0]
   237d6:	0018      	movs	r0, r3
   237d8:	4b32      	ldr	r3, [pc, #200]	; (238a4 <nm_drv_init+0x17c>)
   237da:	4798      	blx	r3
   237dc:	0003      	movs	r3, r0
   237de:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   237e0:	230f      	movs	r3, #15
   237e2:	18fb      	adds	r3, r7, r3
   237e4:	781b      	ldrb	r3, [r3, #0]
   237e6:	b25b      	sxtb	r3, r3
   237e8:	2b00      	cmp	r3, #0
   237ea:	d13a      	bne.n	23862 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   237ec:	230f      	movs	r3, #15
   237ee:	18fc      	adds	r4, r7, r3
   237f0:	230e      	movs	r3, #14
   237f2:	18fb      	adds	r3, r7, r3
   237f4:	781b      	ldrb	r3, [r3, #0]
   237f6:	0018      	movs	r0, r3
   237f8:	4b2b      	ldr	r3, [pc, #172]	; (238a8 <nm_drv_init+0x180>)
   237fa:	4798      	blx	r3
   237fc:	0003      	movs	r3, r0
   237fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23800:	230f      	movs	r3, #15
   23802:	18fb      	adds	r3, r7, r3
   23804:	781b      	ldrb	r3, [r3, #0]
   23806:	b25b      	sxtb	r3, r3
   23808:	2b00      	cmp	r3, #0
   2380a:	d12c      	bne.n	23866 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   2380c:	230e      	movs	r3, #14
   2380e:	18fb      	adds	r3, r7, r3
   23810:	781b      	ldrb	r3, [r3, #0]
   23812:	2b02      	cmp	r3, #2
   23814:	d02a      	beq.n	2386c <nm_drv_init+0x144>
   23816:	230e      	movs	r3, #14
   23818:	18fb      	adds	r3, r7, r3
   2381a:	781b      	ldrb	r3, [r3, #0]
   2381c:	2b03      	cmp	r3, #3
   2381e:	d025      	beq.n	2386c <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23820:	230f      	movs	r3, #15
   23822:	18fc      	adds	r4, r7, r3
   23824:	4b21      	ldr	r3, [pc, #132]	; (238ac <nm_drv_init+0x184>)
   23826:	4798      	blx	r3
   23828:	0003      	movs	r3, r0
   2382a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2382c:	230f      	movs	r3, #15
   2382e:	18fb      	adds	r3, r7, r3
   23830:	781b      	ldrb	r3, [r3, #0]
   23832:	b25b      	sxtb	r3, r3
   23834:	2b00      	cmp	r3, #0
   23836:	d00f      	beq.n	23858 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23838:	23a7      	movs	r3, #167	; 0xa7
   2383a:	005a      	lsls	r2, r3, #1
   2383c:	4910      	ldr	r1, [pc, #64]	; (23880 <nm_drv_init+0x158>)
   2383e:	4b11      	ldr	r3, [pc, #68]	; (23884 <nm_drv_init+0x15c>)
   23840:	0018      	movs	r0, r3
   23842:	4b11      	ldr	r3, [pc, #68]	; (23888 <nm_drv_init+0x160>)
   23844:	4798      	blx	r3
   23846:	4b1a      	ldr	r3, [pc, #104]	; (238b0 <nm_drv_init+0x188>)
   23848:	0018      	movs	r0, r3
   2384a:	4b0f      	ldr	r3, [pc, #60]	; (23888 <nm_drv_init+0x160>)
   2384c:	4798      	blx	r3
   2384e:	4b10      	ldr	r3, [pc, #64]	; (23890 <nm_drv_init+0x168>)
   23850:	0018      	movs	r0, r3
   23852:	4b0d      	ldr	r3, [pc, #52]	; (23888 <nm_drv_init+0x160>)
   23854:	4798      	blx	r3
		goto ERR2;
   23856:	e007      	b.n	23868 <nm_drv_init+0x140>
	}
	return ret;
   23858:	230f      	movs	r3, #15
   2385a:	18fb      	adds	r3, r7, r3
   2385c:	781b      	ldrb	r3, [r3, #0]
   2385e:	b25b      	sxtb	r3, r3
   23860:	e008      	b.n	23874 <nm_drv_init+0x14c>
		goto ERR2;
   23862:	46c0      	nop			; (mov r8, r8)
   23864:	e000      	b.n	23868 <nm_drv_init+0x140>
		goto ERR2;
   23866:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23868:	4b12      	ldr	r3, [pc, #72]	; (238b4 <nm_drv_init+0x18c>)
   2386a:	4798      	blx	r3
ERR1:
	return ret;
   2386c:	230f      	movs	r3, #15
   2386e:	18fb      	adds	r3, r7, r3
   23870:	781b      	ldrb	r3, [r3, #0]
   23872:	b25b      	sxtb	r3, r3
}
   23874:	0018      	movs	r0, r3
   23876:	46bd      	mov	sp, r7
   23878:	b005      	add	sp, #20
   2387a:	bd90      	pop	{r4, r7, pc}
   2387c:	00023289 	.word	0x00023289
   23880:	0003b34c 	.word	0x0003b34c
   23884:	0003b27c 	.word	0x0003b27c
   23888:	0001e639 	.word	0x0001e639
   2388c:	0003b290 	.word	0x0003b290
   23890:	0003b2ac 	.word	0x0003b2ac
   23894:	0003b2b0 	.word	0x0003b2b0
   23898:	00022c25 	.word	0x00022c25
   2389c:	0003b2bc 	.word	0x0003b2bc
   238a0:	00025141 	.word	0x00025141
   238a4:	00022f7d 	.word	0x00022f7d
   238a8:	00023115 	.word	0x00023115
   238ac:	00022b71 	.word	0x00022b71
   238b0:	0003b2cc 	.word	0x0003b2cc
   238b4:	000232bd 	.word	0x000232bd

000238b8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   238b8:	b590      	push	{r4, r7, lr}
   238ba:	b085      	sub	sp, #20
   238bc:	af00      	add	r7, sp, #0
   238be:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   238c0:	230f      	movs	r3, #15
   238c2:	18fc      	adds	r4, r7, r3
   238c4:	4b2e      	ldr	r3, [pc, #184]	; (23980 <nm_drv_deinit+0xc8>)
   238c6:	4798      	blx	r3
   238c8:	0003      	movs	r3, r0
   238ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   238cc:	230f      	movs	r3, #15
   238ce:	18fb      	adds	r3, r7, r3
   238d0:	781b      	ldrb	r3, [r3, #0]
   238d2:	b25b      	sxtb	r3, r3
   238d4:	2b00      	cmp	r3, #0
   238d6:	d010      	beq.n	238fa <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   238d8:	2366      	movs	r3, #102	; 0x66
   238da:	33ff      	adds	r3, #255	; 0xff
   238dc:	001a      	movs	r2, r3
   238de:	4929      	ldr	r1, [pc, #164]	; (23984 <nm_drv_deinit+0xcc>)
   238e0:	4b29      	ldr	r3, [pc, #164]	; (23988 <nm_drv_deinit+0xd0>)
   238e2:	0018      	movs	r0, r3
   238e4:	4b29      	ldr	r3, [pc, #164]	; (2398c <nm_drv_deinit+0xd4>)
   238e6:	4798      	blx	r3
   238e8:	4b29      	ldr	r3, [pc, #164]	; (23990 <nm_drv_deinit+0xd8>)
   238ea:	0018      	movs	r0, r3
   238ec:	4b27      	ldr	r3, [pc, #156]	; (2398c <nm_drv_deinit+0xd4>)
   238ee:	4798      	blx	r3
   238f0:	4b28      	ldr	r3, [pc, #160]	; (23994 <nm_drv_deinit+0xdc>)
   238f2:	0018      	movs	r0, r3
   238f4:	4b25      	ldr	r3, [pc, #148]	; (2398c <nm_drv_deinit+0xd4>)
   238f6:	4798      	blx	r3
		goto ERR1;
   238f8:	e03a      	b.n	23970 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   238fa:	230f      	movs	r3, #15
   238fc:	18fc      	adds	r4, r7, r3
   238fe:	2000      	movs	r0, #0
   23900:	4b25      	ldr	r3, [pc, #148]	; (23998 <nm_drv_deinit+0xe0>)
   23902:	4798      	blx	r3
   23904:	0003      	movs	r3, r0
   23906:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23908:	230f      	movs	r3, #15
   2390a:	18fb      	adds	r3, r7, r3
   2390c:	781b      	ldrb	r3, [r3, #0]
   2390e:	b25b      	sxtb	r3, r3
   23910:	2b00      	cmp	r3, #0
   23912:	d00f      	beq.n	23934 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23914:	23b6      	movs	r3, #182	; 0xb6
   23916:	005a      	lsls	r2, r3, #1
   23918:	491a      	ldr	r1, [pc, #104]	; (23984 <nm_drv_deinit+0xcc>)
   2391a:	4b1b      	ldr	r3, [pc, #108]	; (23988 <nm_drv_deinit+0xd0>)
   2391c:	0018      	movs	r0, r3
   2391e:	4b1b      	ldr	r3, [pc, #108]	; (2398c <nm_drv_deinit+0xd4>)
   23920:	4798      	blx	r3
   23922:	4b1e      	ldr	r3, [pc, #120]	; (2399c <nm_drv_deinit+0xe4>)
   23924:	0018      	movs	r0, r3
   23926:	4b19      	ldr	r3, [pc, #100]	; (2398c <nm_drv_deinit+0xd4>)
   23928:	4798      	blx	r3
   2392a:	4b1a      	ldr	r3, [pc, #104]	; (23994 <nm_drv_deinit+0xdc>)
   2392c:	0018      	movs	r0, r3
   2392e:	4b17      	ldr	r3, [pc, #92]	; (2398c <nm_drv_deinit+0xd4>)
   23930:	4798      	blx	r3
		goto ERR1;
   23932:	e01d      	b.n	23970 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23934:	230f      	movs	r3, #15
   23936:	18fc      	adds	r4, r7, r3
   23938:	4b19      	ldr	r3, [pc, #100]	; (239a0 <nm_drv_deinit+0xe8>)
   2393a:	4798      	blx	r3
   2393c:	0003      	movs	r3, r0
   2393e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23940:	230f      	movs	r3, #15
   23942:	18fb      	adds	r3, r7, r3
   23944:	781b      	ldrb	r3, [r3, #0]
   23946:	b25b      	sxtb	r3, r3
   23948:	2b00      	cmp	r3, #0
   2394a:	d00f      	beq.n	2396c <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   2394c:	23b9      	movs	r3, #185	; 0xb9
   2394e:	005a      	lsls	r2, r3, #1
   23950:	490c      	ldr	r1, [pc, #48]	; (23984 <nm_drv_deinit+0xcc>)
   23952:	4b0d      	ldr	r3, [pc, #52]	; (23988 <nm_drv_deinit+0xd0>)
   23954:	0018      	movs	r0, r3
   23956:	4b0d      	ldr	r3, [pc, #52]	; (2398c <nm_drv_deinit+0xd4>)
   23958:	4798      	blx	r3
   2395a:	4b12      	ldr	r3, [pc, #72]	; (239a4 <nm_drv_deinit+0xec>)
   2395c:	0018      	movs	r0, r3
   2395e:	4b0b      	ldr	r3, [pc, #44]	; (2398c <nm_drv_deinit+0xd4>)
   23960:	4798      	blx	r3
   23962:	4b0c      	ldr	r3, [pc, #48]	; (23994 <nm_drv_deinit+0xdc>)
   23964:	0018      	movs	r0, r3
   23966:	4b09      	ldr	r3, [pc, #36]	; (2398c <nm_drv_deinit+0xd4>)
   23968:	4798      	blx	r3
		goto ERR1;
   2396a:	e001      	b.n	23970 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   2396c:	4b0e      	ldr	r3, [pc, #56]	; (239a8 <nm_drv_deinit+0xf0>)
   2396e:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23970:	230f      	movs	r3, #15
   23972:	18fb      	adds	r3, r7, r3
   23974:	781b      	ldrb	r3, [r3, #0]
   23976:	b25b      	sxtb	r3, r3
}
   23978:	0018      	movs	r0, r3
   2397a:	46bd      	mov	sp, r7
   2397c:	b005      	add	sp, #20
   2397e:	bd90      	pop	{r4, r7, pc}
   23980:	000231c9 	.word	0x000231c9
   23984:	0003b358 	.word	0x0003b358
   23988:	0003b27c 	.word	0x0003b27c
   2398c:	0001e639 	.word	0x0001e639
   23990:	0003b2ec 	.word	0x0003b2ec
   23994:	0003b2ac 	.word	0x0003b2ac
   23998:	000265e9 	.word	0x000265e9
   2399c:	0003b30c 	.word	0x0003b30c
   239a0:	000232bd 	.word	0x000232bd
   239a4:	0003b330 	.word	0x0003b330
   239a8:	0002528d 	.word	0x0002528d

000239ac <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   239ac:	b580      	push	{r7, lr}
   239ae:	b086      	sub	sp, #24
   239b0:	af00      	add	r7, sp, #0
   239b2:	6078      	str	r0, [r7, #4]
   239b4:	000a      	movs	r2, r1
   239b6:	1cbb      	adds	r3, r7, #2
   239b8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   239ba:	230c      	movs	r3, #12
   239bc:	18fb      	adds	r3, r7, r3
   239be:	2200      	movs	r2, #0
   239c0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   239c2:	230c      	movs	r3, #12
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	687a      	ldr	r2, [r7, #4]
   239c8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   239ca:	230c      	movs	r3, #12
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	1cba      	adds	r2, r7, #2
   239d0:	8812      	ldrh	r2, [r2, #0]
   239d2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   239d4:	230c      	movs	r3, #12
   239d6:	18fb      	adds	r3, r7, r3
   239d8:	0019      	movs	r1, r3
   239da:	2003      	movs	r0, #3
   239dc:	4b03      	ldr	r3, [pc, #12]	; (239ec <nmi_spi_read+0x40>)
   239de:	4798      	blx	r3
   239e0:	0003      	movs	r3, r0
}
   239e2:	0018      	movs	r0, r3
   239e4:	46bd      	mov	sp, r7
   239e6:	b006      	add	sp, #24
   239e8:	bd80      	pop	{r7, pc}
   239ea:	46c0      	nop			; (mov r8, r8)
   239ec:	00021231 	.word	0x00021231

000239f0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   239f0:	b580      	push	{r7, lr}
   239f2:	b086      	sub	sp, #24
   239f4:	af00      	add	r7, sp, #0
   239f6:	6078      	str	r0, [r7, #4]
   239f8:	000a      	movs	r2, r1
   239fa:	1cbb      	adds	r3, r7, #2
   239fc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   239fe:	230c      	movs	r3, #12
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	687a      	ldr	r2, [r7, #4]
   23a04:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23a06:	230c      	movs	r3, #12
   23a08:	18fb      	adds	r3, r7, r3
   23a0a:	2200      	movs	r2, #0
   23a0c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23a0e:	230c      	movs	r3, #12
   23a10:	18fb      	adds	r3, r7, r3
   23a12:	1cba      	adds	r2, r7, #2
   23a14:	8812      	ldrh	r2, [r2, #0]
   23a16:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23a18:	230c      	movs	r3, #12
   23a1a:	18fb      	adds	r3, r7, r3
   23a1c:	0019      	movs	r1, r3
   23a1e:	2003      	movs	r0, #3
   23a20:	4b03      	ldr	r3, [pc, #12]	; (23a30 <nmi_spi_write+0x40>)
   23a22:	4798      	blx	r3
   23a24:	0003      	movs	r3, r0
}
   23a26:	0018      	movs	r0, r3
   23a28:	46bd      	mov	sp, r7
   23a2a:	b006      	add	sp, #24
   23a2c:	bd80      	pop	{r7, pc}
   23a2e:	46c0      	nop			; (mov r8, r8)
   23a30:	00021231 	.word	0x00021231

00023a34 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23a34:	b580      	push	{r7, lr}
   23a36:	b088      	sub	sp, #32
   23a38:	af00      	add	r7, sp, #0
   23a3a:	60f8      	str	r0, [r7, #12]
   23a3c:	60b9      	str	r1, [r7, #8]
   23a3e:	1dbb      	adds	r3, r7, #6
   23a40:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23a42:	2314      	movs	r3, #20
   23a44:	18fb      	adds	r3, r7, r3
   23a46:	68fa      	ldr	r2, [r7, #12]
   23a48:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23a4a:	2314      	movs	r3, #20
   23a4c:	18fb      	adds	r3, r7, r3
   23a4e:	68ba      	ldr	r2, [r7, #8]
   23a50:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23a52:	2314      	movs	r3, #20
   23a54:	18fb      	adds	r3, r7, r3
   23a56:	1dba      	adds	r2, r7, #6
   23a58:	8812      	ldrh	r2, [r2, #0]
   23a5a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23a5c:	2314      	movs	r3, #20
   23a5e:	18fb      	adds	r3, r7, r3
   23a60:	0019      	movs	r1, r3
   23a62:	2003      	movs	r0, #3
   23a64:	4b03      	ldr	r3, [pc, #12]	; (23a74 <nmi_spi_rw+0x40>)
   23a66:	4798      	blx	r3
   23a68:	0003      	movs	r3, r0
}
   23a6a:	0018      	movs	r0, r3
   23a6c:	46bd      	mov	sp, r7
   23a6e:	b008      	add	sp, #32
   23a70:	bd80      	pop	{r7, pc}
   23a72:	46c0      	nop			; (mov r8, r8)
   23a74:	00021231 	.word	0x00021231

00023a78 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23a78:	b580      	push	{r7, lr}
   23a7a:	b082      	sub	sp, #8
   23a7c:	af00      	add	r7, sp, #0
   23a7e:	0002      	movs	r2, r0
   23a80:	1dfb      	adds	r3, r7, #7
   23a82:	701a      	strb	r2, [r3, #0]
   23a84:	1dbb      	adds	r3, r7, #6
   23a86:	1c0a      	adds	r2, r1, #0
   23a88:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23a8a:	1dfb      	adds	r3, r7, #7
   23a8c:	781b      	ldrb	r3, [r3, #0]
   23a8e:	005a      	lsls	r2, r3, #1
   23a90:	1dbb      	adds	r3, r7, #6
   23a92:	781b      	ldrb	r3, [r3, #0]
   23a94:	4053      	eors	r3, r2
   23a96:	4a03      	ldr	r2, [pc, #12]	; (23aa4 <crc7_byte+0x2c>)
   23a98:	5cd3      	ldrb	r3, [r2, r3]
}
   23a9a:	0018      	movs	r0, r3
   23a9c:	46bd      	mov	sp, r7
   23a9e:	b002      	add	sp, #8
   23aa0:	bd80      	pop	{r7, pc}
   23aa2:	46c0      	nop			; (mov r8, r8)
   23aa4:	0003b368 	.word	0x0003b368

00023aa8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23aa8:	b590      	push	{r4, r7, lr}
   23aaa:	b085      	sub	sp, #20
   23aac:	af00      	add	r7, sp, #0
   23aae:	60b9      	str	r1, [r7, #8]
   23ab0:	607a      	str	r2, [r7, #4]
   23ab2:	230f      	movs	r3, #15
   23ab4:	18fb      	adds	r3, r7, r3
   23ab6:	1c02      	adds	r2, r0, #0
   23ab8:	701a      	strb	r2, [r3, #0]
	while (len--)
   23aba:	e00e      	b.n	23ada <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23abc:	68bb      	ldr	r3, [r7, #8]
   23abe:	1c5a      	adds	r2, r3, #1
   23ac0:	60ba      	str	r2, [r7, #8]
   23ac2:	781a      	ldrb	r2, [r3, #0]
   23ac4:	230f      	movs	r3, #15
   23ac6:	18fc      	adds	r4, r7, r3
   23ac8:	230f      	movs	r3, #15
   23aca:	18fb      	adds	r3, r7, r3
   23acc:	781b      	ldrb	r3, [r3, #0]
   23ace:	0011      	movs	r1, r2
   23ad0:	0018      	movs	r0, r3
   23ad2:	4b08      	ldr	r3, [pc, #32]	; (23af4 <crc7+0x4c>)
   23ad4:	4798      	blx	r3
   23ad6:	0003      	movs	r3, r0
   23ad8:	7023      	strb	r3, [r4, #0]
	while (len--)
   23ada:	687b      	ldr	r3, [r7, #4]
   23adc:	1e5a      	subs	r2, r3, #1
   23ade:	607a      	str	r2, [r7, #4]
   23ae0:	2b00      	cmp	r3, #0
   23ae2:	d1eb      	bne.n	23abc <crc7+0x14>
	return crc;
   23ae4:	230f      	movs	r3, #15
   23ae6:	18fb      	adds	r3, r7, r3
   23ae8:	781b      	ldrb	r3, [r3, #0]
}
   23aea:	0018      	movs	r0, r3
   23aec:	46bd      	mov	sp, r7
   23aee:	b005      	add	sp, #20
   23af0:	bd90      	pop	{r4, r7, pc}
   23af2:	46c0      	nop			; (mov r8, r8)
   23af4:	00023a79 	.word	0x00023a79

00023af8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23af8:	b590      	push	{r4, r7, lr}
   23afa:	b089      	sub	sp, #36	; 0x24
   23afc:	af00      	add	r7, sp, #0
   23afe:	60b9      	str	r1, [r7, #8]
   23b00:	607a      	str	r2, [r7, #4]
   23b02:	603b      	str	r3, [r7, #0]
   23b04:	230f      	movs	r3, #15
   23b06:	18fb      	adds	r3, r7, r3
   23b08:	1c02      	adds	r2, r0, #0
   23b0a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23b0c:	231f      	movs	r3, #31
   23b0e:	18fb      	adds	r3, r7, r3
   23b10:	2205      	movs	r2, #5
   23b12:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23b14:	231e      	movs	r3, #30
   23b16:	18fb      	adds	r3, r7, r3
   23b18:	2201      	movs	r2, #1
   23b1a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23b1c:	2314      	movs	r3, #20
   23b1e:	18fb      	adds	r3, r7, r3
   23b20:	220f      	movs	r2, #15
   23b22:	18ba      	adds	r2, r7, r2
   23b24:	7812      	ldrb	r2, [r2, #0]
   23b26:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23b28:	230f      	movs	r3, #15
   23b2a:	18fb      	adds	r3, r7, r3
   23b2c:	781b      	ldrb	r3, [r3, #0]
   23b2e:	3bc1      	subs	r3, #193	; 0xc1
   23b30:	2b0e      	cmp	r3, #14
   23b32:	d900      	bls.n	23b36 <spi_cmd+0x3e>
   23b34:	e11b      	b.n	23d6e <spi_cmd+0x276>
   23b36:	009a      	lsls	r2, r3, #2
   23b38:	4bb6      	ldr	r3, [pc, #728]	; (23e14 <spi_cmd+0x31c>)
   23b3a:	18d3      	adds	r3, r2, r3
   23b3c:	681b      	ldr	r3, [r3, #0]
   23b3e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23b40:	68bb      	ldr	r3, [r7, #8]
   23b42:	0c1b      	lsrs	r3, r3, #16
   23b44:	b2da      	uxtb	r2, r3
   23b46:	2314      	movs	r3, #20
   23b48:	18fb      	adds	r3, r7, r3
   23b4a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23b4c:	68bb      	ldr	r3, [r7, #8]
   23b4e:	0a1b      	lsrs	r3, r3, #8
   23b50:	b2da      	uxtb	r2, r3
   23b52:	2314      	movs	r3, #20
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23b58:	68bb      	ldr	r3, [r7, #8]
   23b5a:	b2da      	uxtb	r2, r3
   23b5c:	2314      	movs	r3, #20
   23b5e:	18fb      	adds	r3, r7, r3
   23b60:	70da      	strb	r2, [r3, #3]
		len = 5;
   23b62:	231f      	movs	r3, #31
   23b64:	18fb      	adds	r3, r7, r3
   23b66:	2205      	movs	r2, #5
   23b68:	701a      	strb	r2, [r3, #0]
		break;
   23b6a:	e105      	b.n	23d78 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   23b6c:	68bb      	ldr	r3, [r7, #8]
   23b6e:	0a1b      	lsrs	r3, r3, #8
   23b70:	b2da      	uxtb	r2, r3
   23b72:	2314      	movs	r3, #20
   23b74:	18fb      	adds	r3, r7, r3
   23b76:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23b78:	2330      	movs	r3, #48	; 0x30
   23b7a:	18fb      	adds	r3, r7, r3
   23b7c:	781b      	ldrb	r3, [r3, #0]
   23b7e:	2b00      	cmp	r3, #0
   23b80:	d009      	beq.n	23b96 <spi_cmd+0x9e>
   23b82:	2314      	movs	r3, #20
   23b84:	18fb      	adds	r3, r7, r3
   23b86:	785b      	ldrb	r3, [r3, #1]
   23b88:	2280      	movs	r2, #128	; 0x80
   23b8a:	4252      	negs	r2, r2
   23b8c:	4313      	orrs	r3, r2
   23b8e:	b2da      	uxtb	r2, r3
   23b90:	2314      	movs	r3, #20
   23b92:	18fb      	adds	r3, r7, r3
   23b94:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   23b96:	68bb      	ldr	r3, [r7, #8]
   23b98:	b2da      	uxtb	r2, r3
   23b9a:	2314      	movs	r3, #20
   23b9c:	18fb      	adds	r3, r7, r3
   23b9e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23ba0:	2314      	movs	r3, #20
   23ba2:	18fb      	adds	r3, r7, r3
   23ba4:	2200      	movs	r2, #0
   23ba6:	70da      	strb	r2, [r3, #3]
		len = 5;
   23ba8:	231f      	movs	r3, #31
   23baa:	18fb      	adds	r3, r7, r3
   23bac:	2205      	movs	r2, #5
   23bae:	701a      	strb	r2, [r3, #0]
		break;
   23bb0:	e0e2      	b.n	23d78 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   23bb2:	2314      	movs	r3, #20
   23bb4:	18fb      	adds	r3, r7, r3
   23bb6:	2200      	movs	r2, #0
   23bb8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23bba:	2314      	movs	r3, #20
   23bbc:	18fb      	adds	r3, r7, r3
   23bbe:	2200      	movs	r2, #0
   23bc0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23bc2:	2314      	movs	r3, #20
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	2200      	movs	r2, #0
   23bc8:	70da      	strb	r2, [r3, #3]
		len = 5;
   23bca:	231f      	movs	r3, #31
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	2205      	movs	r2, #5
   23bd0:	701a      	strb	r2, [r3, #0]
		break;
   23bd2:	e0d1      	b.n	23d78 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   23bd4:	2314      	movs	r3, #20
   23bd6:	18fb      	adds	r3, r7, r3
   23bd8:	2200      	movs	r2, #0
   23bda:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23bdc:	2314      	movs	r3, #20
   23bde:	18fb      	adds	r3, r7, r3
   23be0:	2200      	movs	r2, #0
   23be2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23be4:	2314      	movs	r3, #20
   23be6:	18fb      	adds	r3, r7, r3
   23be8:	2200      	movs	r2, #0
   23bea:	70da      	strb	r2, [r3, #3]
		len = 5;
   23bec:	231f      	movs	r3, #31
   23bee:	18fb      	adds	r3, r7, r3
   23bf0:	2205      	movs	r2, #5
   23bf2:	701a      	strb	r2, [r3, #0]
		break;
   23bf4:	e0c0      	b.n	23d78 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   23bf6:	2314      	movs	r3, #20
   23bf8:	18fb      	adds	r3, r7, r3
   23bfa:	22ff      	movs	r2, #255	; 0xff
   23bfc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   23bfe:	2314      	movs	r3, #20
   23c00:	18fb      	adds	r3, r7, r3
   23c02:	22ff      	movs	r2, #255	; 0xff
   23c04:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   23c06:	2314      	movs	r3, #20
   23c08:	18fb      	adds	r3, r7, r3
   23c0a:	22ff      	movs	r2, #255	; 0xff
   23c0c:	70da      	strb	r2, [r3, #3]
		len = 5;
   23c0e:	231f      	movs	r3, #31
   23c10:	18fb      	adds	r3, r7, r3
   23c12:	2205      	movs	r2, #5
   23c14:	701a      	strb	r2, [r3, #0]
		break;
   23c16:	e0af      	b.n	23d78 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23c18:	68bb      	ldr	r3, [r7, #8]
   23c1a:	0c1b      	lsrs	r3, r3, #16
   23c1c:	b2da      	uxtb	r2, r3
   23c1e:	2314      	movs	r3, #20
   23c20:	18fb      	adds	r3, r7, r3
   23c22:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23c24:	68bb      	ldr	r3, [r7, #8]
   23c26:	0a1b      	lsrs	r3, r3, #8
   23c28:	b2da      	uxtb	r2, r3
   23c2a:	2314      	movs	r3, #20
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23c30:	68bb      	ldr	r3, [r7, #8]
   23c32:	b2da      	uxtb	r2, r3
   23c34:	2314      	movs	r3, #20
   23c36:	18fb      	adds	r3, r7, r3
   23c38:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   23c3a:	683b      	ldr	r3, [r7, #0]
   23c3c:	0a1b      	lsrs	r3, r3, #8
   23c3e:	b2da      	uxtb	r2, r3
   23c40:	2314      	movs	r3, #20
   23c42:	18fb      	adds	r3, r7, r3
   23c44:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   23c46:	683b      	ldr	r3, [r7, #0]
   23c48:	b2da      	uxtb	r2, r3
   23c4a:	2314      	movs	r3, #20
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	715a      	strb	r2, [r3, #5]
		len = 7;
   23c50:	231f      	movs	r3, #31
   23c52:	18fb      	adds	r3, r7, r3
   23c54:	2207      	movs	r2, #7
   23c56:	701a      	strb	r2, [r3, #0]
		break;
   23c58:	e08e      	b.n	23d78 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   23c5a:	68bb      	ldr	r3, [r7, #8]
   23c5c:	0c1b      	lsrs	r3, r3, #16
   23c5e:	b2da      	uxtb	r2, r3
   23c60:	2314      	movs	r3, #20
   23c62:	18fb      	adds	r3, r7, r3
   23c64:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23c66:	68bb      	ldr	r3, [r7, #8]
   23c68:	0a1b      	lsrs	r3, r3, #8
   23c6a:	b2da      	uxtb	r2, r3
   23c6c:	2314      	movs	r3, #20
   23c6e:	18fb      	adds	r3, r7, r3
   23c70:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23c72:	68bb      	ldr	r3, [r7, #8]
   23c74:	b2da      	uxtb	r2, r3
   23c76:	2314      	movs	r3, #20
   23c78:	18fb      	adds	r3, r7, r3
   23c7a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   23c7c:	683b      	ldr	r3, [r7, #0]
   23c7e:	0c1b      	lsrs	r3, r3, #16
   23c80:	b2da      	uxtb	r2, r3
   23c82:	2314      	movs	r3, #20
   23c84:	18fb      	adds	r3, r7, r3
   23c86:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23c88:	683b      	ldr	r3, [r7, #0]
   23c8a:	0a1b      	lsrs	r3, r3, #8
   23c8c:	b2da      	uxtb	r2, r3
   23c8e:	2314      	movs	r3, #20
   23c90:	18fb      	adds	r3, r7, r3
   23c92:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   23c94:	683b      	ldr	r3, [r7, #0]
   23c96:	b2da      	uxtb	r2, r3
   23c98:	2314      	movs	r3, #20
   23c9a:	18fb      	adds	r3, r7, r3
   23c9c:	719a      	strb	r2, [r3, #6]
		len = 8;
   23c9e:	231f      	movs	r3, #31
   23ca0:	18fb      	adds	r3, r7, r3
   23ca2:	2208      	movs	r2, #8
   23ca4:	701a      	strb	r2, [r3, #0]
		break;
   23ca6:	e067      	b.n	23d78 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23ca8:	68bb      	ldr	r3, [r7, #8]
   23caa:	0a1b      	lsrs	r3, r3, #8
   23cac:	b2da      	uxtb	r2, r3
   23cae:	2314      	movs	r3, #20
   23cb0:	18fb      	adds	r3, r7, r3
   23cb2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23cb4:	2330      	movs	r3, #48	; 0x30
   23cb6:	18fb      	adds	r3, r7, r3
   23cb8:	781b      	ldrb	r3, [r3, #0]
   23cba:	2b00      	cmp	r3, #0
   23cbc:	d009      	beq.n	23cd2 <spi_cmd+0x1da>
   23cbe:	2314      	movs	r3, #20
   23cc0:	18fb      	adds	r3, r7, r3
   23cc2:	785b      	ldrb	r3, [r3, #1]
   23cc4:	2280      	movs	r2, #128	; 0x80
   23cc6:	4252      	negs	r2, r2
   23cc8:	4313      	orrs	r3, r2
   23cca:	b2da      	uxtb	r2, r3
   23ccc:	2314      	movs	r3, #20
   23cce:	18fb      	adds	r3, r7, r3
   23cd0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   23cd2:	68bb      	ldr	r3, [r7, #8]
   23cd4:	b2da      	uxtb	r2, r3
   23cd6:	2314      	movs	r3, #20
   23cd8:	18fb      	adds	r3, r7, r3
   23cda:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23cdc:	687b      	ldr	r3, [r7, #4]
   23cde:	0e1b      	lsrs	r3, r3, #24
   23ce0:	b2da      	uxtb	r2, r3
   23ce2:	2314      	movs	r3, #20
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23ce8:	687b      	ldr	r3, [r7, #4]
   23cea:	0c1b      	lsrs	r3, r3, #16
   23cec:	b2da      	uxtb	r2, r3
   23cee:	2314      	movs	r3, #20
   23cf0:	18fb      	adds	r3, r7, r3
   23cf2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23cf4:	687b      	ldr	r3, [r7, #4]
   23cf6:	0a1b      	lsrs	r3, r3, #8
   23cf8:	b2da      	uxtb	r2, r3
   23cfa:	2314      	movs	r3, #20
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   23d00:	687b      	ldr	r3, [r7, #4]
   23d02:	b2da      	uxtb	r2, r3
   23d04:	2314      	movs	r3, #20
   23d06:	18fb      	adds	r3, r7, r3
   23d08:	719a      	strb	r2, [r3, #6]
		len = 8;
   23d0a:	231f      	movs	r3, #31
   23d0c:	18fb      	adds	r3, r7, r3
   23d0e:	2208      	movs	r2, #8
   23d10:	701a      	strb	r2, [r3, #0]
		break;
   23d12:	e031      	b.n	23d78 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23d14:	68bb      	ldr	r3, [r7, #8]
   23d16:	0c1b      	lsrs	r3, r3, #16
   23d18:	b2da      	uxtb	r2, r3
   23d1a:	2314      	movs	r3, #20
   23d1c:	18fb      	adds	r3, r7, r3
   23d1e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23d20:	68bb      	ldr	r3, [r7, #8]
   23d22:	0a1b      	lsrs	r3, r3, #8
   23d24:	b2da      	uxtb	r2, r3
   23d26:	2314      	movs	r3, #20
   23d28:	18fb      	adds	r3, r7, r3
   23d2a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23d2c:	68bb      	ldr	r3, [r7, #8]
   23d2e:	b2da      	uxtb	r2, r3
   23d30:	2314      	movs	r3, #20
   23d32:	18fb      	adds	r3, r7, r3
   23d34:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   23d36:	687b      	ldr	r3, [r7, #4]
   23d38:	0e1b      	lsrs	r3, r3, #24
   23d3a:	b2da      	uxtb	r2, r3
   23d3c:	2314      	movs	r3, #20
   23d3e:	18fb      	adds	r3, r7, r3
   23d40:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   23d42:	687b      	ldr	r3, [r7, #4]
   23d44:	0c1b      	lsrs	r3, r3, #16
   23d46:	b2da      	uxtb	r2, r3
   23d48:	2314      	movs	r3, #20
   23d4a:	18fb      	adds	r3, r7, r3
   23d4c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   23d4e:	687b      	ldr	r3, [r7, #4]
   23d50:	0a1b      	lsrs	r3, r3, #8
   23d52:	b2da      	uxtb	r2, r3
   23d54:	2314      	movs	r3, #20
   23d56:	18fb      	adds	r3, r7, r3
   23d58:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   23d5a:	687b      	ldr	r3, [r7, #4]
   23d5c:	b2da      	uxtb	r2, r3
   23d5e:	2314      	movs	r3, #20
   23d60:	18fb      	adds	r3, r7, r3
   23d62:	71da      	strb	r2, [r3, #7]
		len = 9;
   23d64:	231f      	movs	r3, #31
   23d66:	18fb      	adds	r3, r7, r3
   23d68:	2209      	movs	r2, #9
   23d6a:	701a      	strb	r2, [r3, #0]
		break;
   23d6c:	e004      	b.n	23d78 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   23d6e:	231e      	movs	r3, #30
   23d70:	18fb      	adds	r3, r7, r3
   23d72:	2200      	movs	r2, #0
   23d74:	701a      	strb	r2, [r3, #0]
		break;
   23d76:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23d78:	231e      	movs	r3, #30
   23d7a:	18fb      	adds	r3, r7, r3
   23d7c:	781b      	ldrb	r3, [r3, #0]
   23d7e:	b25b      	sxtb	r3, r3
   23d80:	2b00      	cmp	r3, #0
   23d82:	d03f      	beq.n	23e04 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23d84:	4b24      	ldr	r3, [pc, #144]	; (23e18 <spi_cmd+0x320>)
   23d86:	781b      	ldrb	r3, [r3, #0]
   23d88:	2b00      	cmp	r3, #0
   23d8a:	d115      	bne.n	23db8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23d8c:	231f      	movs	r3, #31
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	781b      	ldrb	r3, [r3, #0]
   23d92:	1e5c      	subs	r4, r3, #1
   23d94:	231f      	movs	r3, #31
   23d96:	18fb      	adds	r3, r7, r3
   23d98:	781b      	ldrb	r3, [r3, #0]
   23d9a:	3b01      	subs	r3, #1
   23d9c:	001a      	movs	r2, r3
   23d9e:	2314      	movs	r3, #20
   23da0:	18fb      	adds	r3, r7, r3
   23da2:	0019      	movs	r1, r3
   23da4:	207f      	movs	r0, #127	; 0x7f
   23da6:	4b1d      	ldr	r3, [pc, #116]	; (23e1c <spi_cmd+0x324>)
   23da8:	4798      	blx	r3
   23daa:	0003      	movs	r3, r0
   23dac:	18db      	adds	r3, r3, r3
   23dae:	b2da      	uxtb	r2, r3
   23db0:	2314      	movs	r3, #20
   23db2:	18fb      	adds	r3, r7, r3
   23db4:	551a      	strb	r2, [r3, r4]
   23db6:	e006      	b.n	23dc6 <spi_cmd+0x2ce>
		else
			len-=1;
   23db8:	231f      	movs	r3, #31
   23dba:	18fb      	adds	r3, r7, r3
   23dbc:	221f      	movs	r2, #31
   23dbe:	18ba      	adds	r2, r7, r2
   23dc0:	7812      	ldrb	r2, [r2, #0]
   23dc2:	3a01      	subs	r2, #1
   23dc4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   23dc6:	231f      	movs	r3, #31
   23dc8:	18fb      	adds	r3, r7, r3
   23dca:	781b      	ldrb	r3, [r3, #0]
   23dcc:	b29a      	uxth	r2, r3
   23dce:	2314      	movs	r3, #20
   23dd0:	18fb      	adds	r3, r7, r3
   23dd2:	0011      	movs	r1, r2
   23dd4:	0018      	movs	r0, r3
   23dd6:	4b12      	ldr	r3, [pc, #72]	; (23e20 <spi_cmd+0x328>)
   23dd8:	4798      	blx	r3
   23dda:	1e03      	subs	r3, r0, #0
   23ddc:	d012      	beq.n	23e04 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23dde:	2390      	movs	r3, #144	; 0x90
   23de0:	005a      	lsls	r2, r3, #1
   23de2:	4910      	ldr	r1, [pc, #64]	; (23e24 <spi_cmd+0x32c>)
   23de4:	4b10      	ldr	r3, [pc, #64]	; (23e28 <spi_cmd+0x330>)
   23de6:	0018      	movs	r0, r3
   23de8:	4b10      	ldr	r3, [pc, #64]	; (23e2c <spi_cmd+0x334>)
   23dea:	4798      	blx	r3
   23dec:	4b10      	ldr	r3, [pc, #64]	; (23e30 <spi_cmd+0x338>)
   23dee:	0018      	movs	r0, r3
   23df0:	4b0e      	ldr	r3, [pc, #56]	; (23e2c <spi_cmd+0x334>)
   23df2:	4798      	blx	r3
   23df4:	4b0f      	ldr	r3, [pc, #60]	; (23e34 <spi_cmd+0x33c>)
   23df6:	0018      	movs	r0, r3
   23df8:	4b0c      	ldr	r3, [pc, #48]	; (23e2c <spi_cmd+0x334>)
   23dfa:	4798      	blx	r3
			result = N_FAIL;
   23dfc:	231e      	movs	r3, #30
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	2200      	movs	r2, #0
   23e02:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23e04:	231e      	movs	r3, #30
   23e06:	18fb      	adds	r3, r7, r3
   23e08:	781b      	ldrb	r3, [r3, #0]
   23e0a:	b25b      	sxtb	r3, r3
}
   23e0c:	0018      	movs	r0, r3
   23e0e:	46bd      	mov	sp, r7
   23e10:	b009      	add	sp, #36	; 0x24
   23e12:	bd90      	pop	{r4, r7, pc}
   23e14:	0003b9e0 	.word	0x0003b9e0
   23e18:	200042c0 	.word	0x200042c0
   23e1c:	00023aa9 	.word	0x00023aa9
   23e20:	000239f1 	.word	0x000239f1
   23e24:	0003ba58 	.word	0x0003ba58
   23e28:	0003b468 	.word	0x0003b468
   23e2c:	0001e639 	.word	0x0001e639
   23e30:	0003b47c 	.word	0x0003b47c
   23e34:	0003b4a8 	.word	0x0003b4a8

00023e38 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23e38:	b590      	push	{r4, r7, lr}
   23e3a:	b085      	sub	sp, #20
   23e3c:	af00      	add	r7, sp, #0
   23e3e:	0002      	movs	r2, r0
   23e40:	1dfb      	adds	r3, r7, #7
   23e42:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   23e44:	230e      	movs	r3, #14
   23e46:	18fb      	adds	r3, r7, r3
   23e48:	2201      	movs	r2, #1
   23e4a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23e4c:	4b32      	ldr	r3, [pc, #200]	; (23f18 <spi_data_rsp+0xe0>)
   23e4e:	781b      	ldrb	r3, [r3, #0]
   23e50:	2b00      	cmp	r3, #0
   23e52:	d104      	bne.n	23e5e <spi_data_rsp+0x26>
		len = 2;
   23e54:	230f      	movs	r3, #15
   23e56:	18fb      	adds	r3, r7, r3
   23e58:	2202      	movs	r2, #2
   23e5a:	701a      	strb	r2, [r3, #0]
   23e5c:	e003      	b.n	23e66 <spi_data_rsp+0x2e>
	else
		len = 3;
   23e5e:	230f      	movs	r3, #15
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	2203      	movs	r2, #3
   23e64:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   23e66:	230f      	movs	r3, #15
   23e68:	18fb      	adds	r3, r7, r3
   23e6a:	781b      	ldrb	r3, [r3, #0]
   23e6c:	b29a      	uxth	r2, r3
   23e6e:	2308      	movs	r3, #8
   23e70:	18fb      	adds	r3, r7, r3
   23e72:	0011      	movs	r1, r2
   23e74:	0018      	movs	r0, r3
   23e76:	4b29      	ldr	r3, [pc, #164]	; (23f1c <spi_data_rsp+0xe4>)
   23e78:	4798      	blx	r3
   23e7a:	1e03      	subs	r3, r0, #0
   23e7c:	d013      	beq.n	23ea6 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   23e7e:	239a      	movs	r3, #154	; 0x9a
   23e80:	005a      	lsls	r2, r3, #1
   23e82:	4927      	ldr	r1, [pc, #156]	; (23f20 <spi_data_rsp+0xe8>)
   23e84:	4b27      	ldr	r3, [pc, #156]	; (23f24 <spi_data_rsp+0xec>)
   23e86:	0018      	movs	r0, r3
   23e88:	4b27      	ldr	r3, [pc, #156]	; (23f28 <spi_data_rsp+0xf0>)
   23e8a:	4798      	blx	r3
   23e8c:	4b27      	ldr	r3, [pc, #156]	; (23f2c <spi_data_rsp+0xf4>)
   23e8e:	0018      	movs	r0, r3
   23e90:	4b25      	ldr	r3, [pc, #148]	; (23f28 <spi_data_rsp+0xf0>)
   23e92:	4798      	blx	r3
   23e94:	4b26      	ldr	r3, [pc, #152]	; (23f30 <spi_data_rsp+0xf8>)
   23e96:	0018      	movs	r0, r3
   23e98:	4b23      	ldr	r3, [pc, #140]	; (23f28 <spi_data_rsp+0xf0>)
   23e9a:	4798      	blx	r3
		result = N_FAIL;
   23e9c:	230e      	movs	r3, #14
   23e9e:	18fb      	adds	r3, r7, r3
   23ea0:	2200      	movs	r2, #0
   23ea2:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23ea4:	e030      	b.n	23f08 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23ea6:	230f      	movs	r3, #15
   23ea8:	18fb      	adds	r3, r7, r3
   23eaa:	781b      	ldrb	r3, [r3, #0]
   23eac:	3b01      	subs	r3, #1
   23eae:	2208      	movs	r2, #8
   23eb0:	18ba      	adds	r2, r7, r2
   23eb2:	5cd3      	ldrb	r3, [r2, r3]
   23eb4:	2b00      	cmp	r3, #0
   23eb6:	d108      	bne.n	23eca <spi_data_rsp+0x92>
   23eb8:	230f      	movs	r3, #15
   23eba:	18fb      	adds	r3, r7, r3
   23ebc:	781b      	ldrb	r3, [r3, #0]
   23ebe:	3b02      	subs	r3, #2
   23ec0:	2208      	movs	r2, #8
   23ec2:	18ba      	adds	r2, r7, r2
   23ec4:	5cd3      	ldrb	r3, [r2, r3]
   23ec6:	2bc3      	cmp	r3, #195	; 0xc3
   23ec8:	d01e      	beq.n	23f08 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23eca:	233c      	movs	r3, #60	; 0x3c
   23ecc:	33ff      	adds	r3, #255	; 0xff
   23ece:	001a      	movs	r2, r3
   23ed0:	4913      	ldr	r1, [pc, #76]	; (23f20 <spi_data_rsp+0xe8>)
   23ed2:	4b14      	ldr	r3, [pc, #80]	; (23f24 <spi_data_rsp+0xec>)
   23ed4:	0018      	movs	r0, r3
   23ed6:	4b14      	ldr	r3, [pc, #80]	; (23f28 <spi_data_rsp+0xf0>)
   23ed8:	4798      	blx	r3
   23eda:	2308      	movs	r3, #8
   23edc:	18fb      	adds	r3, r7, r3
   23ede:	781b      	ldrb	r3, [r3, #0]
   23ee0:	0019      	movs	r1, r3
   23ee2:	2308      	movs	r3, #8
   23ee4:	18fb      	adds	r3, r7, r3
   23ee6:	785b      	ldrb	r3, [r3, #1]
   23ee8:	001a      	movs	r2, r3
   23eea:	2308      	movs	r3, #8
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	789b      	ldrb	r3, [r3, #2]
   23ef0:	4810      	ldr	r0, [pc, #64]	; (23f34 <spi_data_rsp+0xfc>)
   23ef2:	4c0d      	ldr	r4, [pc, #52]	; (23f28 <spi_data_rsp+0xf0>)
   23ef4:	47a0      	blx	r4
   23ef6:	4b0e      	ldr	r3, [pc, #56]	; (23f30 <spi_data_rsp+0xf8>)
   23ef8:	0018      	movs	r0, r3
   23efa:	4b0b      	ldr	r3, [pc, #44]	; (23f28 <spi_data_rsp+0xf0>)
   23efc:	4798      	blx	r3
		result = N_FAIL;
   23efe:	230e      	movs	r3, #14
   23f00:	18fb      	adds	r3, r7, r3
   23f02:	2200      	movs	r2, #0
   23f04:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23f06:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23f08:	230e      	movs	r3, #14
   23f0a:	18fb      	adds	r3, r7, r3
   23f0c:	781b      	ldrb	r3, [r3, #0]
   23f0e:	b25b      	sxtb	r3, r3
}
   23f10:	0018      	movs	r0, r3
   23f12:	46bd      	mov	sp, r7
   23f14:	b005      	add	sp, #20
   23f16:	bd90      	pop	{r4, r7, pc}
   23f18:	200042c0 	.word	0x200042c0
   23f1c:	000239ad 	.word	0x000239ad
   23f20:	0003ba60 	.word	0x0003ba60
   23f24:	0003b468 	.word	0x0003b468
   23f28:	0001e639 	.word	0x0001e639
   23f2c:	0003b4ac 	.word	0x0003b4ac
   23f30:	0003b4a8 	.word	0x0003b4a8
   23f34:	0003b4cc 	.word	0x0003b4cc

00023f38 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23f38:	b580      	push	{r7, lr}
   23f3a:	b084      	sub	sp, #16
   23f3c:	af00      	add	r7, sp, #0
   23f3e:	0002      	movs	r2, r0
   23f40:	1dfb      	adds	r3, r7, #7
   23f42:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   23f44:	230f      	movs	r3, #15
   23f46:	18fb      	adds	r3, r7, r3
   23f48:	2201      	movs	r2, #1
   23f4a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23f4c:	1dfb      	adds	r3, r7, #7
   23f4e:	781b      	ldrb	r3, [r3, #0]
   23f50:	2bcf      	cmp	r3, #207	; 0xcf
   23f52:	d007      	beq.n	23f64 <spi_cmd_rsp+0x2c>
   23f54:	1dfb      	adds	r3, r7, #7
   23f56:	781b      	ldrb	r3, [r3, #0]
   23f58:	2bc5      	cmp	r3, #197	; 0xc5
   23f5a:	d003      	beq.n	23f64 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   23f5c:	1dfb      	adds	r3, r7, #7
   23f5e:	781b      	ldrb	r3, [r3, #0]
   23f60:	2bc6      	cmp	r3, #198	; 0xc6
   23f62:	d10c      	bne.n	23f7e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23f64:	230d      	movs	r3, #13
   23f66:	18fb      	adds	r3, r7, r3
   23f68:	2101      	movs	r1, #1
   23f6a:	0018      	movs	r0, r3
   23f6c:	4b3b      	ldr	r3, [pc, #236]	; (2405c <spi_cmd_rsp+0x124>)
   23f6e:	4798      	blx	r3
   23f70:	1e03      	subs	r3, r0, #0
   23f72:	d004      	beq.n	23f7e <spi_cmd_rsp+0x46>
			result = N_FAIL;
   23f74:	230f      	movs	r3, #15
   23f76:	18fb      	adds	r3, r7, r3
   23f78:	2200      	movs	r2, #0
   23f7a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23f7c:	e065      	b.n	2404a <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23f7e:	230e      	movs	r3, #14
   23f80:	18fb      	adds	r3, r7, r3
   23f82:	220a      	movs	r2, #10
   23f84:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23f86:	230d      	movs	r3, #13
   23f88:	18fb      	adds	r3, r7, r3
   23f8a:	2101      	movs	r1, #1
   23f8c:	0018      	movs	r0, r3
   23f8e:	4b33      	ldr	r3, [pc, #204]	; (2405c <spi_cmd_rsp+0x124>)
   23f90:	4798      	blx	r3
   23f92:	1e03      	subs	r3, r0, #0
   23f94:	d014      	beq.n	23fc0 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23f96:	235c      	movs	r3, #92	; 0x5c
   23f98:	33ff      	adds	r3, #255	; 0xff
   23f9a:	001a      	movs	r2, r3
   23f9c:	4930      	ldr	r1, [pc, #192]	; (24060 <spi_cmd_rsp+0x128>)
   23f9e:	4b31      	ldr	r3, [pc, #196]	; (24064 <spi_cmd_rsp+0x12c>)
   23fa0:	0018      	movs	r0, r3
   23fa2:	4b31      	ldr	r3, [pc, #196]	; (24068 <spi_cmd_rsp+0x130>)
   23fa4:	4798      	blx	r3
   23fa6:	4b31      	ldr	r3, [pc, #196]	; (2406c <spi_cmd_rsp+0x134>)
   23fa8:	0018      	movs	r0, r3
   23faa:	4b2f      	ldr	r3, [pc, #188]	; (24068 <spi_cmd_rsp+0x130>)
   23fac:	4798      	blx	r3
   23fae:	4b30      	ldr	r3, [pc, #192]	; (24070 <spi_cmd_rsp+0x138>)
   23fb0:	0018      	movs	r0, r3
   23fb2:	4b2d      	ldr	r3, [pc, #180]	; (24068 <spi_cmd_rsp+0x130>)
   23fb4:	4798      	blx	r3
			result = N_FAIL;
   23fb6:	230f      	movs	r3, #15
   23fb8:	18fb      	adds	r3, r7, r3
   23fba:	2200      	movs	r2, #0
   23fbc:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23fbe:	e044      	b.n	2404a <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23fc0:	230d      	movs	r3, #13
   23fc2:	18fb      	adds	r3, r7, r3
   23fc4:	781b      	ldrb	r3, [r3, #0]
   23fc6:	1dfa      	adds	r2, r7, #7
   23fc8:	7812      	ldrb	r2, [r2, #0]
   23fca:	429a      	cmp	r2, r3
   23fcc:	d00b      	beq.n	23fe6 <spi_cmd_rsp+0xae>
   23fce:	230e      	movs	r3, #14
   23fd0:	18fb      	adds	r3, r7, r3
   23fd2:	781b      	ldrb	r3, [r3, #0]
   23fd4:	b25b      	sxtb	r3, r3
   23fd6:	b2da      	uxtb	r2, r3
   23fd8:	3a01      	subs	r2, #1
   23fda:	b2d1      	uxtb	r1, r2
   23fdc:	220e      	movs	r2, #14
   23fde:	18ba      	adds	r2, r7, r2
   23fe0:	7011      	strb	r1, [r2, #0]
   23fe2:	2b00      	cmp	r3, #0
   23fe4:	dccf      	bgt.n	23f86 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23fe6:	230e      	movs	r3, #14
   23fe8:	18fb      	adds	r3, r7, r3
   23fea:	220a      	movs	r2, #10
   23fec:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23fee:	230d      	movs	r3, #13
   23ff0:	18fb      	adds	r3, r7, r3
   23ff2:	2101      	movs	r1, #1
   23ff4:	0018      	movs	r0, r3
   23ff6:	4b19      	ldr	r3, [pc, #100]	; (2405c <spi_cmd_rsp+0x124>)
   23ff8:	4798      	blx	r3
   23ffa:	1e03      	subs	r3, r0, #0
   23ffc:	d014      	beq.n	24028 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23ffe:	236a      	movs	r3, #106	; 0x6a
   24000:	33ff      	adds	r3, #255	; 0xff
   24002:	001a      	movs	r2, r3
   24004:	4916      	ldr	r1, [pc, #88]	; (24060 <spi_cmd_rsp+0x128>)
   24006:	4b17      	ldr	r3, [pc, #92]	; (24064 <spi_cmd_rsp+0x12c>)
   24008:	0018      	movs	r0, r3
   2400a:	4b17      	ldr	r3, [pc, #92]	; (24068 <spi_cmd_rsp+0x130>)
   2400c:	4798      	blx	r3
   2400e:	4b17      	ldr	r3, [pc, #92]	; (2406c <spi_cmd_rsp+0x134>)
   24010:	0018      	movs	r0, r3
   24012:	4b15      	ldr	r3, [pc, #84]	; (24068 <spi_cmd_rsp+0x130>)
   24014:	4798      	blx	r3
   24016:	4b16      	ldr	r3, [pc, #88]	; (24070 <spi_cmd_rsp+0x138>)
   24018:	0018      	movs	r0, r3
   2401a:	4b13      	ldr	r3, [pc, #76]	; (24068 <spi_cmd_rsp+0x130>)
   2401c:	4798      	blx	r3
			result = N_FAIL;
   2401e:	230f      	movs	r3, #15
   24020:	18fb      	adds	r3, r7, r3
   24022:	2200      	movs	r2, #0
   24024:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24026:	e010      	b.n	2404a <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   24028:	230d      	movs	r3, #13
   2402a:	18fb      	adds	r3, r7, r3
   2402c:	781b      	ldrb	r3, [r3, #0]
   2402e:	2b00      	cmp	r3, #0
   24030:	d00b      	beq.n	2404a <spi_cmd_rsp+0x112>
   24032:	230e      	movs	r3, #14
   24034:	18fb      	adds	r3, r7, r3
   24036:	781b      	ldrb	r3, [r3, #0]
   24038:	b25b      	sxtb	r3, r3
   2403a:	b2da      	uxtb	r2, r3
   2403c:	3a01      	subs	r2, #1
   2403e:	b2d1      	uxtb	r1, r2
   24040:	220e      	movs	r2, #14
   24042:	18ba      	adds	r2, r7, r2
   24044:	7011      	strb	r1, [r2, #0]
   24046:	2b00      	cmp	r3, #0
   24048:	dcd1      	bgt.n	23fee <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   2404a:	230f      	movs	r3, #15
   2404c:	18fb      	adds	r3, r7, r3
   2404e:	781b      	ldrb	r3, [r3, #0]
   24050:	b25b      	sxtb	r3, r3
}
   24052:	0018      	movs	r0, r3
   24054:	46bd      	mov	sp, r7
   24056:	b004      	add	sp, #16
   24058:	bd80      	pop	{r7, pc}
   2405a:	46c0      	nop			; (mov r8, r8)
   2405c:	000239ad 	.word	0x000239ad
   24060:	0003ba70 	.word	0x0003ba70
   24064:	0003b468 	.word	0x0003b468
   24068:	0001e639 	.word	0x0001e639
   2406c:	0003b4fc 	.word	0x0003b4fc
   24070:	0003b4a8 	.word	0x0003b4a8

00024074 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   24074:	b590      	push	{r4, r7, lr}
   24076:	b09f      	sub	sp, #124	; 0x7c
   24078:	af00      	add	r7, sp, #0
   2407a:	60b9      	str	r1, [r7, #8]
   2407c:	607a      	str	r2, [r7, #4]
   2407e:	603b      	str	r3, [r7, #0]
   24080:	230f      	movs	r3, #15
   24082:	18fb      	adds	r3, r7, r3
   24084:	1c02      	adds	r2, r0, #0
   24086:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24088:	2300      	movs	r3, #0
   2408a:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   2408c:	2301      	movs	r3, #1
   2408e:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   24090:	2338      	movs	r3, #56	; 0x38
   24092:	18fb      	adds	r3, r7, r3
   24094:	220f      	movs	r2, #15
   24096:	18ba      	adds	r2, r7, r2
   24098:	7812      	ldrb	r2, [r2, #0]
   2409a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2409c:	230f      	movs	r3, #15
   2409e:	18fb      	adds	r3, r7, r3
   240a0:	781b      	ldrb	r3, [r3, #0]
   240a2:	3bc1      	subs	r3, #193	; 0xc1
   240a4:	2b0e      	cmp	r3, #14
   240a6:	d900      	bls.n	240aa <spi_cmd_complete+0x36>
   240a8:	e103      	b.n	242b2 <spi_cmd_complete+0x23e>
   240aa:	009a      	lsls	r2, r3, #2
   240ac:	4bd1      	ldr	r3, [pc, #836]	; (243f4 <spi_cmd_complete+0x380>)
   240ae:	18d3      	adds	r3, r2, r3
   240b0:	681b      	ldr	r3, [r3, #0]
   240b2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   240b4:	68bb      	ldr	r3, [r7, #8]
   240b6:	0c1b      	lsrs	r3, r3, #16
   240b8:	b2da      	uxtb	r2, r3
   240ba:	2338      	movs	r3, #56	; 0x38
   240bc:	18fb      	adds	r3, r7, r3
   240be:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   240c0:	68bb      	ldr	r3, [r7, #8]
   240c2:	0a1b      	lsrs	r3, r3, #8
   240c4:	b2da      	uxtb	r2, r3
   240c6:	2338      	movs	r3, #56	; 0x38
   240c8:	18fb      	adds	r3, r7, r3
   240ca:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   240cc:	68bb      	ldr	r3, [r7, #8]
   240ce:	b2da      	uxtb	r2, r3
   240d0:	2338      	movs	r3, #56	; 0x38
   240d2:	18fb      	adds	r3, r7, r3
   240d4:	70da      	strb	r2, [r3, #3]
		len = 5;
   240d6:	2305      	movs	r3, #5
   240d8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   240da:	e0ed      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   240dc:	68bb      	ldr	r3, [r7, #8]
   240de:	0a1b      	lsrs	r3, r3, #8
   240e0:	b2da      	uxtb	r2, r3
   240e2:	2338      	movs	r3, #56	; 0x38
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   240e8:	2388      	movs	r3, #136	; 0x88
   240ea:	18fb      	adds	r3, r7, r3
   240ec:	781b      	ldrb	r3, [r3, #0]
   240ee:	2b01      	cmp	r3, #1
   240f0:	d109      	bne.n	24106 <spi_cmd_complete+0x92>
   240f2:	2338      	movs	r3, #56	; 0x38
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	785b      	ldrb	r3, [r3, #1]
   240f8:	2280      	movs	r2, #128	; 0x80
   240fa:	4252      	negs	r2, r2
   240fc:	4313      	orrs	r3, r2
   240fe:	b2da      	uxtb	r2, r3
   24100:	2338      	movs	r3, #56	; 0x38
   24102:	18fb      	adds	r3, r7, r3
   24104:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24106:	68bb      	ldr	r3, [r7, #8]
   24108:	b2da      	uxtb	r2, r3
   2410a:	2338      	movs	r3, #56	; 0x38
   2410c:	18fb      	adds	r3, r7, r3
   2410e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24110:	2338      	movs	r3, #56	; 0x38
   24112:	18fb      	adds	r3, r7, r3
   24114:	2200      	movs	r2, #0
   24116:	70da      	strb	r2, [r3, #3]
		len = 5;
   24118:	2305      	movs	r3, #5
   2411a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2411c:	e0cc      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2411e:	2338      	movs	r3, #56	; 0x38
   24120:	18fb      	adds	r3, r7, r3
   24122:	2200      	movs	r2, #0
   24124:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24126:	2338      	movs	r3, #56	; 0x38
   24128:	18fb      	adds	r3, r7, r3
   2412a:	2200      	movs	r2, #0
   2412c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2412e:	2338      	movs	r3, #56	; 0x38
   24130:	18fb      	adds	r3, r7, r3
   24132:	2200      	movs	r2, #0
   24134:	70da      	strb	r2, [r3, #3]
		len = 5;
   24136:	2305      	movs	r3, #5
   24138:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2413a:	e0bd      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   2413c:	2338      	movs	r3, #56	; 0x38
   2413e:	18fb      	adds	r3, r7, r3
   24140:	2200      	movs	r2, #0
   24142:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24144:	2338      	movs	r3, #56	; 0x38
   24146:	18fb      	adds	r3, r7, r3
   24148:	2200      	movs	r2, #0
   2414a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2414c:	2338      	movs	r3, #56	; 0x38
   2414e:	18fb      	adds	r3, r7, r3
   24150:	2200      	movs	r2, #0
   24152:	70da      	strb	r2, [r3, #3]
		len = 5;
   24154:	2305      	movs	r3, #5
   24156:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24158:	e0ae      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   2415a:	2338      	movs	r3, #56	; 0x38
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	22ff      	movs	r2, #255	; 0xff
   24160:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   24162:	2338      	movs	r3, #56	; 0x38
   24164:	18fb      	adds	r3, r7, r3
   24166:	22ff      	movs	r2, #255	; 0xff
   24168:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   2416a:	2338      	movs	r3, #56	; 0x38
   2416c:	18fb      	adds	r3, r7, r3
   2416e:	22ff      	movs	r2, #255	; 0xff
   24170:	70da      	strb	r2, [r3, #3]
		len = 5;
   24172:	2305      	movs	r3, #5
   24174:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24176:	e09f      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24178:	68bb      	ldr	r3, [r7, #8]
   2417a:	0c1b      	lsrs	r3, r3, #16
   2417c:	b2da      	uxtb	r2, r3
   2417e:	2338      	movs	r3, #56	; 0x38
   24180:	18fb      	adds	r3, r7, r3
   24182:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24184:	68bb      	ldr	r3, [r7, #8]
   24186:	0a1b      	lsrs	r3, r3, #8
   24188:	b2da      	uxtb	r2, r3
   2418a:	2338      	movs	r3, #56	; 0x38
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24190:	68bb      	ldr	r3, [r7, #8]
   24192:	b2da      	uxtb	r2, r3
   24194:	2338      	movs	r3, #56	; 0x38
   24196:	18fb      	adds	r3, r7, r3
   24198:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   2419a:	683b      	ldr	r3, [r7, #0]
   2419c:	0a1b      	lsrs	r3, r3, #8
   2419e:	b2da      	uxtb	r2, r3
   241a0:	2338      	movs	r3, #56	; 0x38
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   241a6:	683b      	ldr	r3, [r7, #0]
   241a8:	b2da      	uxtb	r2, r3
   241aa:	2338      	movs	r3, #56	; 0x38
   241ac:	18fb      	adds	r3, r7, r3
   241ae:	715a      	strb	r2, [r3, #5]
		len = 7;
   241b0:	2307      	movs	r3, #7
   241b2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   241b4:	e080      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   241b6:	68bb      	ldr	r3, [r7, #8]
   241b8:	0c1b      	lsrs	r3, r3, #16
   241ba:	b2da      	uxtb	r2, r3
   241bc:	2338      	movs	r3, #56	; 0x38
   241be:	18fb      	adds	r3, r7, r3
   241c0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   241c2:	68bb      	ldr	r3, [r7, #8]
   241c4:	0a1b      	lsrs	r3, r3, #8
   241c6:	b2da      	uxtb	r2, r3
   241c8:	2338      	movs	r3, #56	; 0x38
   241ca:	18fb      	adds	r3, r7, r3
   241cc:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   241ce:	68bb      	ldr	r3, [r7, #8]
   241d0:	b2da      	uxtb	r2, r3
   241d2:	2338      	movs	r3, #56	; 0x38
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   241d8:	683b      	ldr	r3, [r7, #0]
   241da:	0c1b      	lsrs	r3, r3, #16
   241dc:	b2da      	uxtb	r2, r3
   241de:	2338      	movs	r3, #56	; 0x38
   241e0:	18fb      	adds	r3, r7, r3
   241e2:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   241e4:	683b      	ldr	r3, [r7, #0]
   241e6:	0a1b      	lsrs	r3, r3, #8
   241e8:	b2da      	uxtb	r2, r3
   241ea:	2338      	movs	r3, #56	; 0x38
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   241f0:	683b      	ldr	r3, [r7, #0]
   241f2:	b2da      	uxtb	r2, r3
   241f4:	2338      	movs	r3, #56	; 0x38
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	719a      	strb	r2, [r3, #6]
		len = 8;
   241fa:	2308      	movs	r3, #8
   241fc:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   241fe:	e05b      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   24200:	68bb      	ldr	r3, [r7, #8]
   24202:	0a1b      	lsrs	r3, r3, #8
   24204:	b2da      	uxtb	r2, r3
   24206:	2338      	movs	r3, #56	; 0x38
   24208:	18fb      	adds	r3, r7, r3
   2420a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   2420c:	2388      	movs	r3, #136	; 0x88
   2420e:	18fb      	adds	r3, r7, r3
   24210:	781b      	ldrb	r3, [r3, #0]
   24212:	2b01      	cmp	r3, #1
   24214:	d109      	bne.n	2422a <spi_cmd_complete+0x1b6>
   24216:	2338      	movs	r3, #56	; 0x38
   24218:	18fb      	adds	r3, r7, r3
   2421a:	785b      	ldrb	r3, [r3, #1]
   2421c:	2280      	movs	r2, #128	; 0x80
   2421e:	4252      	negs	r2, r2
   24220:	4313      	orrs	r3, r2
   24222:	b2da      	uxtb	r2, r3
   24224:	2338      	movs	r3, #56	; 0x38
   24226:	18fb      	adds	r3, r7, r3
   24228:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   2422a:	68bb      	ldr	r3, [r7, #8]
   2422c:	b2da      	uxtb	r2, r3
   2422e:	2338      	movs	r3, #56	; 0x38
   24230:	18fb      	adds	r3, r7, r3
   24232:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   24234:	687b      	ldr	r3, [r7, #4]
   24236:	78da      	ldrb	r2, [r3, #3]
   24238:	2338      	movs	r3, #56	; 0x38
   2423a:	18fb      	adds	r3, r7, r3
   2423c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2423e:	687b      	ldr	r3, [r7, #4]
   24240:	789a      	ldrb	r2, [r3, #2]
   24242:	2338      	movs	r3, #56	; 0x38
   24244:	18fb      	adds	r3, r7, r3
   24246:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24248:	687b      	ldr	r3, [r7, #4]
   2424a:	785a      	ldrb	r2, [r3, #1]
   2424c:	2338      	movs	r3, #56	; 0x38
   2424e:	18fb      	adds	r3, r7, r3
   24250:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   24252:	687b      	ldr	r3, [r7, #4]
   24254:	781a      	ldrb	r2, [r3, #0]
   24256:	2338      	movs	r3, #56	; 0x38
   24258:	18fb      	adds	r3, r7, r3
   2425a:	719a      	strb	r2, [r3, #6]
		len = 8;
   2425c:	2308      	movs	r3, #8
   2425e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24260:	e02a      	b.n	242b8 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   24262:	68bb      	ldr	r3, [r7, #8]
   24264:	0c1b      	lsrs	r3, r3, #16
   24266:	b2da      	uxtb	r2, r3
   24268:	2338      	movs	r3, #56	; 0x38
   2426a:	18fb      	adds	r3, r7, r3
   2426c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2426e:	68bb      	ldr	r3, [r7, #8]
   24270:	0a1b      	lsrs	r3, r3, #8
   24272:	b2da      	uxtb	r2, r3
   24274:	2338      	movs	r3, #56	; 0x38
   24276:	18fb      	adds	r3, r7, r3
   24278:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   2427a:	68bb      	ldr	r3, [r7, #8]
   2427c:	b2da      	uxtb	r2, r3
   2427e:	2338      	movs	r3, #56	; 0x38
   24280:	18fb      	adds	r3, r7, r3
   24282:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24284:	687b      	ldr	r3, [r7, #4]
   24286:	78da      	ldrb	r2, [r3, #3]
   24288:	2338      	movs	r3, #56	; 0x38
   2428a:	18fb      	adds	r3, r7, r3
   2428c:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2428e:	687b      	ldr	r3, [r7, #4]
   24290:	789a      	ldrb	r2, [r3, #2]
   24292:	2338      	movs	r3, #56	; 0x38
   24294:	18fb      	adds	r3, r7, r3
   24296:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24298:	687b      	ldr	r3, [r7, #4]
   2429a:	785a      	ldrb	r2, [r3, #1]
   2429c:	2338      	movs	r3, #56	; 0x38
   2429e:	18fb      	adds	r3, r7, r3
   242a0:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   242a2:	687b      	ldr	r3, [r7, #4]
   242a4:	781a      	ldrb	r2, [r3, #0]
   242a6:	2338      	movs	r3, #56	; 0x38
   242a8:	18fb      	adds	r3, r7, r3
   242aa:	71da      	strb	r2, [r3, #7]
		len = 9;
   242ac:	2309      	movs	r3, #9
   242ae:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   242b0:	e002      	b.n	242b8 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   242b2:	2300      	movs	r3, #0
   242b4:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   242b6:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   242b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   242ba:	2b01      	cmp	r3, #1
   242bc:	d001      	beq.n	242c2 <spi_cmd_complete+0x24e>
		return result;
   242be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   242c0:	e33a      	b.n	24938 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   242c2:	4b4d      	ldr	r3, [pc, #308]	; (243f8 <spi_cmd_complete+0x384>)
   242c4:	781b      	ldrb	r3, [r3, #0]
   242c6:	2b00      	cmp	r3, #0
   242c8:	d111      	bne.n	242ee <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   242ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   242cc:	1e5c      	subs	r4, r3, #1
   242ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   242d0:	3b01      	subs	r3, #1
   242d2:	001a      	movs	r2, r3
   242d4:	2338      	movs	r3, #56	; 0x38
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	0019      	movs	r1, r3
   242da:	207f      	movs	r0, #127	; 0x7f
   242dc:	4b47      	ldr	r3, [pc, #284]	; (243fc <spi_cmd_complete+0x388>)
   242de:	4798      	blx	r3
   242e0:	0003      	movs	r3, r0
   242e2:	18db      	adds	r3, r3, r3
   242e4:	b2da      	uxtb	r2, r3
   242e6:	2338      	movs	r3, #56	; 0x38
   242e8:	18fb      	adds	r3, r7, r3
   242ea:	551a      	strb	r2, [r3, r4]
   242ec:	e002      	b.n	242f4 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   242ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   242f0:	3b01      	subs	r3, #1
   242f2:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   242f4:	230f      	movs	r3, #15
   242f6:	18fb      	adds	r3, r7, r3
   242f8:	781b      	ldrb	r3, [r3, #0]
   242fa:	2bcf      	cmp	r3, #207	; 0xcf
   242fc:	d009      	beq.n	24312 <spi_cmd_complete+0x29e>
   242fe:	230f      	movs	r3, #15
   24300:	18fb      	adds	r3, r7, r3
   24302:	781b      	ldrb	r3, [r3, #0]
   24304:	2bc5      	cmp	r3, #197	; 0xc5
   24306:	d004      	beq.n	24312 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24308:	230f      	movs	r3, #15
   2430a:	18fb      	adds	r3, r7, r3
   2430c:	781b      	ldrb	r3, [r3, #0]
   2430e:	2bc6      	cmp	r3, #198	; 0xc6
   24310:	d103      	bne.n	2431a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24314:	3306      	adds	r3, #6
   24316:	673b      	str	r3, [r7, #112]	; 0x70
   24318:	e018      	b.n	2434c <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2431a:	230f      	movs	r3, #15
   2431c:	18fb      	adds	r3, r7, r3
   2431e:	781b      	ldrb	r3, [r3, #0]
   24320:	2bc4      	cmp	r3, #196	; 0xc4
   24322:	d004      	beq.n	2432e <spi_cmd_complete+0x2ba>
   24324:	230f      	movs	r3, #15
   24326:	18fb      	adds	r3, r7, r3
   24328:	781b      	ldrb	r3, [r3, #0]
   2432a:	2bca      	cmp	r3, #202	; 0xca
   2432c:	d10b      	bne.n	24346 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   2432e:	4b32      	ldr	r3, [pc, #200]	; (243f8 <spi_cmd_complete+0x384>)
   24330:	781b      	ldrb	r3, [r3, #0]
   24332:	2b00      	cmp	r3, #0
   24334:	d103      	bne.n	2433e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24338:	330c      	adds	r3, #12
   2433a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   2433c:	e006      	b.n	2434c <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24340:	330a      	adds	r3, #10
   24342:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24344:	e002      	b.n	2434c <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24348:	3305      	adds	r3, #5
   2434a:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   2434c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2434e:	2b20      	cmp	r3, #32
   24350:	d914      	bls.n	2437c <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   24352:	23f7      	movs	r3, #247	; 0xf7
   24354:	005a      	lsls	r2, r3, #1
   24356:	492a      	ldr	r1, [pc, #168]	; (24400 <spi_cmd_complete+0x38c>)
   24358:	4b2a      	ldr	r3, [pc, #168]	; (24404 <spi_cmd_complete+0x390>)
   2435a:	0018      	movs	r0, r3
   2435c:	4b2a      	ldr	r3, [pc, #168]	; (24408 <spi_cmd_complete+0x394>)
   2435e:	4798      	blx	r3
   24360:	6f39      	ldr	r1, [r7, #112]	; 0x70
   24362:	4b2a      	ldr	r3, [pc, #168]	; (2440c <spi_cmd_complete+0x398>)
   24364:	2220      	movs	r2, #32
   24366:	0018      	movs	r0, r3
   24368:	4b27      	ldr	r3, [pc, #156]	; (24408 <spi_cmd_complete+0x394>)
   2436a:	4798      	blx	r3
   2436c:	4b28      	ldr	r3, [pc, #160]	; (24410 <spi_cmd_complete+0x39c>)
   2436e:	0018      	movs	r0, r3
   24370:	4b25      	ldr	r3, [pc, #148]	; (24408 <spi_cmd_complete+0x394>)
   24372:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24374:	2300      	movs	r3, #0
   24376:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2437a:	e2dd      	b.n	24938 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   2437c:	2377      	movs	r3, #119	; 0x77
   2437e:	18fb      	adds	r3, r7, r3
   24380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24382:	701a      	strb	r2, [r3, #0]
   24384:	e00d      	b.n	243a2 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24386:	2377      	movs	r3, #119	; 0x77
   24388:	18fb      	adds	r3, r7, r3
   2438a:	781b      	ldrb	r3, [r3, #0]
   2438c:	2238      	movs	r2, #56	; 0x38
   2438e:	18ba      	adds	r2, r7, r2
   24390:	2100      	movs	r1, #0
   24392:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24394:	2377      	movs	r3, #119	; 0x77
   24396:	18fb      	adds	r3, r7, r3
   24398:	781a      	ldrb	r2, [r3, #0]
   2439a:	2377      	movs	r3, #119	; 0x77
   2439c:	18fb      	adds	r3, r7, r3
   2439e:	3201      	adds	r2, #1
   243a0:	701a      	strb	r2, [r3, #0]
   243a2:	2377      	movs	r3, #119	; 0x77
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	781a      	ldrb	r2, [r3, #0]
   243a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   243aa:	429a      	cmp	r2, r3
   243ac:	d3eb      	bcc.n	24386 <spi_cmd_complete+0x312>
	}
	rix = len;
   243ae:	2376      	movs	r3, #118	; 0x76
   243b0:	18fb      	adds	r3, r7, r3
   243b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   243b4:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   243b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   243b8:	b29a      	uxth	r2, r3
   243ba:	2318      	movs	r3, #24
   243bc:	18f9      	adds	r1, r7, r3
   243be:	2338      	movs	r3, #56	; 0x38
   243c0:	18fb      	adds	r3, r7, r3
   243c2:	0018      	movs	r0, r3
   243c4:	4b13      	ldr	r3, [pc, #76]	; (24414 <spi_cmd_complete+0x3a0>)
   243c6:	4798      	blx	r3
   243c8:	1e03      	subs	r3, r0, #0
   243ca:	d027      	beq.n	2441c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   243cc:	23fa      	movs	r3, #250	; 0xfa
   243ce:	33ff      	adds	r3, #255	; 0xff
   243d0:	001a      	movs	r2, r3
   243d2:	490b      	ldr	r1, [pc, #44]	; (24400 <spi_cmd_complete+0x38c>)
   243d4:	4b0b      	ldr	r3, [pc, #44]	; (24404 <spi_cmd_complete+0x390>)
   243d6:	0018      	movs	r0, r3
   243d8:	4b0b      	ldr	r3, [pc, #44]	; (24408 <spi_cmd_complete+0x394>)
   243da:	4798      	blx	r3
   243dc:	4b0e      	ldr	r3, [pc, #56]	; (24418 <spi_cmd_complete+0x3a4>)
   243de:	0018      	movs	r0, r3
   243e0:	4b09      	ldr	r3, [pc, #36]	; (24408 <spi_cmd_complete+0x394>)
   243e2:	4798      	blx	r3
   243e4:	4b0a      	ldr	r3, [pc, #40]	; (24410 <spi_cmd_complete+0x39c>)
   243e6:	0018      	movs	r0, r3
   243e8:	4b07      	ldr	r3, [pc, #28]	; (24408 <spi_cmd_complete+0x394>)
   243ea:	4798      	blx	r3
		result = N_FAIL;
   243ec:	2300      	movs	r3, #0
   243ee:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   243f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   243f2:	e2a1      	b.n	24938 <spi_cmd_complete+0x8c4>
   243f4:	0003ba1c 	.word	0x0003ba1c
   243f8:	200042c0 	.word	0x200042c0
   243fc:	00023aa9 	.word	0x00023aa9
   24400:	0003ba7c 	.word	0x0003ba7c
   24404:	0003b468 	.word	0x0003b468
   24408:	0001e639 	.word	0x0001e639
   2440c:	0003b530 	.word	0x0003b530
   24410:	0003b4a8 	.word	0x0003b4a8
   24414:	00023a35 	.word	0x00023a35
   24418:	0003b47c 	.word	0x0003b47c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   2441c:	230f      	movs	r3, #15
   2441e:	18fb      	adds	r3, r7, r3
   24420:	781b      	ldrb	r3, [r3, #0]
   24422:	2bcf      	cmp	r3, #207	; 0xcf
   24424:	d009      	beq.n	2443a <spi_cmd_complete+0x3c6>
   24426:	230f      	movs	r3, #15
   24428:	18fb      	adds	r3, r7, r3
   2442a:	781b      	ldrb	r3, [r3, #0]
   2442c:	2bc5      	cmp	r3, #197	; 0xc5
   2442e:	d004      	beq.n	2443a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   24430:	230f      	movs	r3, #15
   24432:	18fb      	adds	r3, r7, r3
   24434:	781b      	ldrb	r3, [r3, #0]
   24436:	2bc6      	cmp	r3, #198	; 0xc6
   24438:	d106      	bne.n	24448 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   2443a:	2376      	movs	r3, #118	; 0x76
   2443c:	18fb      	adds	r3, r7, r3
   2443e:	781a      	ldrb	r2, [r3, #0]
   24440:	2376      	movs	r3, #118	; 0x76
   24442:	18fb      	adds	r3, r7, r3
   24444:	3201      	adds	r2, #1
   24446:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24448:	2376      	movs	r3, #118	; 0x76
   2444a:	18fb      	adds	r3, r7, r3
   2444c:	781b      	ldrb	r3, [r3, #0]
   2444e:	2276      	movs	r2, #118	; 0x76
   24450:	18ba      	adds	r2, r7, r2
   24452:	1c59      	adds	r1, r3, #1
   24454:	7011      	strb	r1, [r2, #0]
   24456:	001a      	movs	r2, r3
   24458:	2318      	movs	r3, #24
   2445a:	18fb      	adds	r3, r7, r3
   2445c:	5c9a      	ldrb	r2, [r3, r2]
   2445e:	2317      	movs	r3, #23
   24460:	18fb      	adds	r3, r7, r3
   24462:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24464:	2317      	movs	r3, #23
   24466:	18fb      	adds	r3, r7, r3
   24468:	781b      	ldrb	r3, [r3, #0]
   2446a:	220f      	movs	r2, #15
   2446c:	18ba      	adds	r2, r7, r2
   2446e:	7812      	ldrb	r2, [r2, #0]
   24470:	429a      	cmp	r2, r3
   24472:	d018      	beq.n	244a6 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24474:	4add      	ldr	r2, [pc, #884]	; (247ec <spi_cmd_complete+0x778>)
   24476:	49de      	ldr	r1, [pc, #888]	; (247f0 <spi_cmd_complete+0x77c>)
   24478:	4bde      	ldr	r3, [pc, #888]	; (247f4 <spi_cmd_complete+0x780>)
   2447a:	0018      	movs	r0, r3
   2447c:	4bde      	ldr	r3, [pc, #888]	; (247f8 <spi_cmd_complete+0x784>)
   2447e:	4798      	blx	r3
   24480:	230f      	movs	r3, #15
   24482:	18fb      	adds	r3, r7, r3
   24484:	7819      	ldrb	r1, [r3, #0]
   24486:	2317      	movs	r3, #23
   24488:	18fb      	adds	r3, r7, r3
   2448a:	781b      	ldrb	r3, [r3, #0]
   2448c:	001a      	movs	r2, r3
   2448e:	4bdb      	ldr	r3, [pc, #876]	; (247fc <spi_cmd_complete+0x788>)
   24490:	0018      	movs	r0, r3
   24492:	4bd9      	ldr	r3, [pc, #868]	; (247f8 <spi_cmd_complete+0x784>)
   24494:	4798      	blx	r3
   24496:	4bda      	ldr	r3, [pc, #872]	; (24800 <spi_cmd_complete+0x78c>)
   24498:	0018      	movs	r0, r3
   2449a:	4bd7      	ldr	r3, [pc, #860]	; (247f8 <spi_cmd_complete+0x784>)
   2449c:	4798      	blx	r3
		result = N_FAIL;
   2449e:	2300      	movs	r3, #0
   244a0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   244a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   244a4:	e248      	b.n	24938 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   244a6:	2376      	movs	r3, #118	; 0x76
   244a8:	18fb      	adds	r3, r7, r3
   244aa:	781b      	ldrb	r3, [r3, #0]
   244ac:	2276      	movs	r2, #118	; 0x76
   244ae:	18ba      	adds	r2, r7, r2
   244b0:	1c59      	adds	r1, r3, #1
   244b2:	7011      	strb	r1, [r2, #0]
   244b4:	001a      	movs	r2, r3
   244b6:	2318      	movs	r3, #24
   244b8:	18fb      	adds	r3, r7, r3
   244ba:	5c9a      	ldrb	r2, [r3, r2]
   244bc:	2317      	movs	r3, #23
   244be:	18fb      	adds	r3, r7, r3
   244c0:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   244c2:	2317      	movs	r3, #23
   244c4:	18fb      	adds	r3, r7, r3
   244c6:	781b      	ldrb	r3, [r3, #0]
   244c8:	2b00      	cmp	r3, #0
   244ca:	d016      	beq.n	244fa <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   244cc:	4acd      	ldr	r2, [pc, #820]	; (24804 <spi_cmd_complete+0x790>)
   244ce:	49c8      	ldr	r1, [pc, #800]	; (247f0 <spi_cmd_complete+0x77c>)
   244d0:	4bc8      	ldr	r3, [pc, #800]	; (247f4 <spi_cmd_complete+0x780>)
   244d2:	0018      	movs	r0, r3
   244d4:	4bc8      	ldr	r3, [pc, #800]	; (247f8 <spi_cmd_complete+0x784>)
   244d6:	4798      	blx	r3
   244d8:	2317      	movs	r3, #23
   244da:	18fb      	adds	r3, r7, r3
   244dc:	781b      	ldrb	r3, [r3, #0]
   244de:	001a      	movs	r2, r3
   244e0:	4bc9      	ldr	r3, [pc, #804]	; (24808 <spi_cmd_complete+0x794>)
   244e2:	0011      	movs	r1, r2
   244e4:	0018      	movs	r0, r3
   244e6:	4bc4      	ldr	r3, [pc, #784]	; (247f8 <spi_cmd_complete+0x784>)
   244e8:	4798      	blx	r3
   244ea:	4bc5      	ldr	r3, [pc, #788]	; (24800 <spi_cmd_complete+0x78c>)
   244ec:	0018      	movs	r0, r3
   244ee:	4bc2      	ldr	r3, [pc, #776]	; (247f8 <spi_cmd_complete+0x784>)
   244f0:	4798      	blx	r3
		result = N_FAIL;
   244f2:	2300      	movs	r3, #0
   244f4:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   244f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   244f8:	e21e      	b.n	24938 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   244fa:	230f      	movs	r3, #15
   244fc:	18fb      	adds	r3, r7, r3
   244fe:	781b      	ldrb	r3, [r3, #0]
   24500:	2bc4      	cmp	r3, #196	; 0xc4
   24502:	d00f      	beq.n	24524 <spi_cmd_complete+0x4b0>
   24504:	230f      	movs	r3, #15
   24506:	18fb      	adds	r3, r7, r3
   24508:	781b      	ldrb	r3, [r3, #0]
   2450a:	2bca      	cmp	r3, #202	; 0xca
   2450c:	d00a      	beq.n	24524 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2450e:	230f      	movs	r3, #15
   24510:	18fb      	adds	r3, r7, r3
   24512:	781b      	ldrb	r3, [r3, #0]
   24514:	2bc2      	cmp	r3, #194	; 0xc2
   24516:	d005      	beq.n	24524 <spi_cmd_complete+0x4b0>
   24518:	230f      	movs	r3, #15
   2451a:	18fb      	adds	r3, r7, r3
   2451c:	781b      	ldrb	r3, [r3, #0]
   2451e:	2bc8      	cmp	r3, #200	; 0xc8
   24520:	d000      	beq.n	24524 <spi_cmd_complete+0x4b0>
   24522:	e208      	b.n	24936 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24524:	230a      	movs	r3, #10
   24526:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24528:	2376      	movs	r3, #118	; 0x76
   2452a:	18fb      	adds	r3, r7, r3
   2452c:	781a      	ldrb	r2, [r3, #0]
   2452e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24530:	429a      	cmp	r2, r3
   24532:	d218      	bcs.n	24566 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24534:	2376      	movs	r3, #118	; 0x76
   24536:	18fb      	adds	r3, r7, r3
   24538:	781b      	ldrb	r3, [r3, #0]
   2453a:	2276      	movs	r2, #118	; 0x76
   2453c:	18ba      	adds	r2, r7, r2
   2453e:	1c59      	adds	r1, r3, #1
   24540:	7011      	strb	r1, [r2, #0]
   24542:	001a      	movs	r2, r3
   24544:	2318      	movs	r3, #24
   24546:	18fb      	adds	r3, r7, r3
   24548:	5c9a      	ldrb	r2, [r3, r2]
   2454a:	2317      	movs	r3, #23
   2454c:	18fb      	adds	r3, r7, r3
   2454e:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24550:	2317      	movs	r3, #23
   24552:	18fb      	adds	r3, r7, r3
   24554:	781b      	ldrb	r3, [r3, #0]
   24556:	091b      	lsrs	r3, r3, #4
   24558:	b2db      	uxtb	r3, r3
   2455a:	001a      	movs	r2, r3
   2455c:	230f      	movs	r3, #15
   2455e:	4013      	ands	r3, r2
   24560:	2b0f      	cmp	r3, #15
   24562:	d103      	bne.n	2456c <spi_cmd_complete+0x4f8>
					break;
   24564:	e007      	b.n	24576 <spi_cmd_complete+0x502>
					retry = 0;
   24566:	2300      	movs	r3, #0
   24568:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   2456a:	e004      	b.n	24576 <spi_cmd_complete+0x502>
			} while (retry--);
   2456c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2456e:	1e5a      	subs	r2, r3, #1
   24570:	667a      	str	r2, [r7, #100]	; 0x64
   24572:	2b00      	cmp	r3, #0
   24574:	d1d8      	bne.n	24528 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24578:	2b00      	cmp	r3, #0
   2457a:	dc18      	bgt.n	245ae <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   2457c:	2395      	movs	r3, #149	; 0x95
   2457e:	009a      	lsls	r2, r3, #2
   24580:	499b      	ldr	r1, [pc, #620]	; (247f0 <spi_cmd_complete+0x77c>)
   24582:	4b9c      	ldr	r3, [pc, #624]	; (247f4 <spi_cmd_complete+0x780>)
   24584:	0018      	movs	r0, r3
   24586:	4b9c      	ldr	r3, [pc, #624]	; (247f8 <spi_cmd_complete+0x784>)
   24588:	4798      	blx	r3
   2458a:	2317      	movs	r3, #23
   2458c:	18fb      	adds	r3, r7, r3
   2458e:	781b      	ldrb	r3, [r3, #0]
   24590:	001a      	movs	r2, r3
   24592:	4b9e      	ldr	r3, [pc, #632]	; (2480c <spi_cmd_complete+0x798>)
   24594:	0011      	movs	r1, r2
   24596:	0018      	movs	r0, r3
   24598:	4b97      	ldr	r3, [pc, #604]	; (247f8 <spi_cmd_complete+0x784>)
   2459a:	4798      	blx	r3
   2459c:	4b98      	ldr	r3, [pc, #608]	; (24800 <spi_cmd_complete+0x78c>)
   2459e:	0018      	movs	r0, r3
   245a0:	4b95      	ldr	r3, [pc, #596]	; (247f8 <spi_cmd_complete+0x784>)
   245a2:	4798      	blx	r3
				result = N_RESET;
   245a4:	2301      	movs	r3, #1
   245a6:	425b      	negs	r3, r3
   245a8:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   245aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   245ac:	e1c4      	b.n	24938 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   245ae:	230f      	movs	r3, #15
   245b0:	18fb      	adds	r3, r7, r3
   245b2:	781b      	ldrb	r3, [r3, #0]
   245b4:	2bc4      	cmp	r3, #196	; 0xc4
   245b6:	d005      	beq.n	245c4 <spi_cmd_complete+0x550>
   245b8:	230f      	movs	r3, #15
   245ba:	18fb      	adds	r3, r7, r3
   245bc:	781b      	ldrb	r3, [r3, #0]
   245be:	2bca      	cmp	r3, #202	; 0xca
   245c0:	d000      	beq.n	245c4 <spi_cmd_complete+0x550>
   245c2:	e08e      	b.n	246e2 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   245c4:	2376      	movs	r3, #118	; 0x76
   245c6:	18fb      	adds	r3, r7, r3
   245c8:	781b      	ldrb	r3, [r3, #0]
   245ca:	3303      	adds	r3, #3
   245cc:	001a      	movs	r2, r3
   245ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   245d0:	429a      	cmp	r2, r3
   245d2:	d23c      	bcs.n	2464e <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   245d4:	2376      	movs	r3, #118	; 0x76
   245d6:	18fb      	adds	r3, r7, r3
   245d8:	781b      	ldrb	r3, [r3, #0]
   245da:	2276      	movs	r2, #118	; 0x76
   245dc:	18ba      	adds	r2, r7, r2
   245de:	1c59      	adds	r1, r3, #1
   245e0:	7011      	strb	r1, [r2, #0]
   245e2:	001a      	movs	r2, r3
   245e4:	2318      	movs	r3, #24
   245e6:	18fb      	adds	r3, r7, r3
   245e8:	5c9a      	ldrb	r2, [r3, r2]
   245ea:	687b      	ldr	r3, [r7, #4]
   245ec:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   245ee:	687b      	ldr	r3, [r7, #4]
   245f0:	1c5a      	adds	r2, r3, #1
   245f2:	2376      	movs	r3, #118	; 0x76
   245f4:	18fb      	adds	r3, r7, r3
   245f6:	781b      	ldrb	r3, [r3, #0]
   245f8:	2176      	movs	r1, #118	; 0x76
   245fa:	1879      	adds	r1, r7, r1
   245fc:	1c58      	adds	r0, r3, #1
   245fe:	7008      	strb	r0, [r1, #0]
   24600:	0019      	movs	r1, r3
   24602:	2318      	movs	r3, #24
   24604:	18fb      	adds	r3, r7, r3
   24606:	5c5b      	ldrb	r3, [r3, r1]
   24608:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2460a:	687b      	ldr	r3, [r7, #4]
   2460c:	1c9a      	adds	r2, r3, #2
   2460e:	2376      	movs	r3, #118	; 0x76
   24610:	18fb      	adds	r3, r7, r3
   24612:	781b      	ldrb	r3, [r3, #0]
   24614:	2176      	movs	r1, #118	; 0x76
   24616:	1879      	adds	r1, r7, r1
   24618:	1c58      	adds	r0, r3, #1
   2461a:	7008      	strb	r0, [r1, #0]
   2461c:	0019      	movs	r1, r3
   2461e:	2318      	movs	r3, #24
   24620:	18fb      	adds	r3, r7, r3
   24622:	5c5b      	ldrb	r3, [r3, r1]
   24624:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24626:	687b      	ldr	r3, [r7, #4]
   24628:	1cda      	adds	r2, r3, #3
   2462a:	2376      	movs	r3, #118	; 0x76
   2462c:	18fb      	adds	r3, r7, r3
   2462e:	781b      	ldrb	r3, [r3, #0]
   24630:	2176      	movs	r1, #118	; 0x76
   24632:	1879      	adds	r1, r7, r1
   24634:	1c58      	adds	r0, r3, #1
   24636:	7008      	strb	r0, [r1, #0]
   24638:	0019      	movs	r1, r3
   2463a:	2318      	movs	r3, #24
   2463c:	18fb      	adds	r3, r7, r3
   2463e:	5c5b      	ldrb	r3, [r3, r1]
   24640:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24642:	4b73      	ldr	r3, [pc, #460]	; (24810 <spi_cmd_complete+0x79c>)
   24644:	781b      	ldrb	r3, [r3, #0]
   24646:	2b00      	cmp	r3, #0
   24648:	d000      	beq.n	2464c <spi_cmd_complete+0x5d8>
   2464a:	e174      	b.n	24936 <spi_cmd_complete+0x8c2>
   2464c:	e011      	b.n	24672 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   2464e:	4a71      	ldr	r2, [pc, #452]	; (24814 <spi_cmd_complete+0x7a0>)
   24650:	4967      	ldr	r1, [pc, #412]	; (247f0 <spi_cmd_complete+0x77c>)
   24652:	4b68      	ldr	r3, [pc, #416]	; (247f4 <spi_cmd_complete+0x780>)
   24654:	0018      	movs	r0, r3
   24656:	4b68      	ldr	r3, [pc, #416]	; (247f8 <spi_cmd_complete+0x784>)
   24658:	4798      	blx	r3
   2465a:	4b6f      	ldr	r3, [pc, #444]	; (24818 <spi_cmd_complete+0x7a4>)
   2465c:	0018      	movs	r0, r3
   2465e:	4b66      	ldr	r3, [pc, #408]	; (247f8 <spi_cmd_complete+0x784>)
   24660:	4798      	blx	r3
   24662:	4b67      	ldr	r3, [pc, #412]	; (24800 <spi_cmd_complete+0x78c>)
   24664:	0018      	movs	r0, r3
   24666:	4b64      	ldr	r3, [pc, #400]	; (247f8 <spi_cmd_complete+0x784>)
   24668:	4798      	blx	r3
					result = N_FAIL;
   2466a:	2300      	movs	r3, #0
   2466c:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   2466e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24670:	e162      	b.n	24938 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24672:	2376      	movs	r3, #118	; 0x76
   24674:	18fb      	adds	r3, r7, r3
   24676:	781b      	ldrb	r3, [r3, #0]
   24678:	3301      	adds	r3, #1
   2467a:	001a      	movs	r2, r3
   2467c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2467e:	429a      	cmp	r2, r3
   24680:	d21c      	bcs.n	246bc <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24682:	2376      	movs	r3, #118	; 0x76
   24684:	18fb      	adds	r3, r7, r3
   24686:	781b      	ldrb	r3, [r3, #0]
   24688:	2276      	movs	r2, #118	; 0x76
   2468a:	18ba      	adds	r2, r7, r2
   2468c:	1c59      	adds	r1, r3, #1
   2468e:	7011      	strb	r1, [r2, #0]
   24690:	001a      	movs	r2, r3
   24692:	2318      	movs	r3, #24
   24694:	18fb      	adds	r3, r7, r3
   24696:	5c9a      	ldrb	r2, [r3, r2]
   24698:	2314      	movs	r3, #20
   2469a:	18fb      	adds	r3, r7, r3
   2469c:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2469e:	2376      	movs	r3, #118	; 0x76
   246a0:	18fb      	adds	r3, r7, r3
   246a2:	781b      	ldrb	r3, [r3, #0]
   246a4:	2276      	movs	r2, #118	; 0x76
   246a6:	18ba      	adds	r2, r7, r2
   246a8:	1c59      	adds	r1, r3, #1
   246aa:	7011      	strb	r1, [r2, #0]
   246ac:	001a      	movs	r2, r3
   246ae:	2318      	movs	r3, #24
   246b0:	18fb      	adds	r3, r7, r3
   246b2:	5c9a      	ldrb	r2, [r3, r2]
   246b4:	2314      	movs	r3, #20
   246b6:	18fb      	adds	r3, r7, r3
   246b8:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   246ba:	e13c      	b.n	24936 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   246bc:	239c      	movs	r3, #156	; 0x9c
   246be:	009a      	lsls	r2, r3, #2
   246c0:	494b      	ldr	r1, [pc, #300]	; (247f0 <spi_cmd_complete+0x77c>)
   246c2:	4b4c      	ldr	r3, [pc, #304]	; (247f4 <spi_cmd_complete+0x780>)
   246c4:	0018      	movs	r0, r3
   246c6:	4b4c      	ldr	r3, [pc, #304]	; (247f8 <spi_cmd_complete+0x784>)
   246c8:	4798      	blx	r3
   246ca:	4b54      	ldr	r3, [pc, #336]	; (2481c <spi_cmd_complete+0x7a8>)
   246cc:	0018      	movs	r0, r3
   246ce:	4b4a      	ldr	r3, [pc, #296]	; (247f8 <spi_cmd_complete+0x784>)
   246d0:	4798      	blx	r3
   246d2:	4b4b      	ldr	r3, [pc, #300]	; (24800 <spi_cmd_complete+0x78c>)
   246d4:	0018      	movs	r0, r3
   246d6:	4b48      	ldr	r3, [pc, #288]	; (247f8 <spi_cmd_complete+0x784>)
   246d8:	4798      	blx	r3
						result = N_FAIL;
   246da:	2300      	movs	r3, #0
   246dc:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   246de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   246e0:	e12a      	b.n	24938 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   246e2:	230f      	movs	r3, #15
   246e4:	18fb      	adds	r3, r7, r3
   246e6:	781b      	ldrb	r3, [r3, #0]
   246e8:	2bc2      	cmp	r3, #194	; 0xc2
   246ea:	d005      	beq.n	246f8 <spi_cmd_complete+0x684>
   246ec:	230f      	movs	r3, #15
   246ee:	18fb      	adds	r3, r7, r3
   246f0:	781b      	ldrb	r3, [r3, #0]
   246f2:	2bc8      	cmp	r3, #200	; 0xc8
   246f4:	d000      	beq.n	246f8 <spi_cmd_complete+0x684>
   246f6:	e11e      	b.n	24936 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   246f8:	2300      	movs	r3, #0
   246fa:	663b      	str	r3, [r7, #96]	; 0x60
   246fc:	e011      	b.n	24722 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   246fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24700:	1c5a      	adds	r2, r3, #1
   24702:	663a      	str	r2, [r7, #96]	; 0x60
   24704:	001a      	movs	r2, r3
   24706:	687b      	ldr	r3, [r7, #4]
   24708:	189a      	adds	r2, r3, r2
   2470a:	2376      	movs	r3, #118	; 0x76
   2470c:	18fb      	adds	r3, r7, r3
   2470e:	781b      	ldrb	r3, [r3, #0]
   24710:	2176      	movs	r1, #118	; 0x76
   24712:	1879      	adds	r1, r7, r1
   24714:	1c58      	adds	r0, r3, #1
   24716:	7008      	strb	r0, [r1, #0]
   24718:	0019      	movs	r1, r3
   2471a:	2318      	movs	r3, #24
   2471c:	18fb      	adds	r3, r7, r3
   2471e:	5c5b      	ldrb	r3, [r3, r1]
   24720:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24722:	2376      	movs	r3, #118	; 0x76
   24724:	18fb      	adds	r3, r7, r3
   24726:	781a      	ldrb	r2, [r3, #0]
   24728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2472a:	429a      	cmp	r2, r3
   2472c:	d203      	bcs.n	24736 <spi_cmd_complete+0x6c2>
   2472e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24730:	683b      	ldr	r3, [r7, #0]
   24732:	429a      	cmp	r2, r3
   24734:	d3e3      	bcc.n	246fe <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24738:	683a      	ldr	r2, [r7, #0]
   2473a:	1ad3      	subs	r3, r2, r3
   2473c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2473e:	683b      	ldr	r3, [r7, #0]
   24740:	2b00      	cmp	r3, #0
   24742:	d100      	bne.n	24746 <spi_cmd_complete+0x6d2>
   24744:	e0f1      	b.n	2492a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24748:	2280      	movs	r2, #128	; 0x80
   2474a:	0192      	lsls	r2, r2, #6
   2474c:	1ad3      	subs	r3, r2, r3
   2474e:	001a      	movs	r2, r3
   24750:	683b      	ldr	r3, [r7, #0]
   24752:	429a      	cmp	r2, r3
   24754:	d302      	bcc.n	2475c <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24756:	683b      	ldr	r3, [r7, #0]
   24758:	65fb      	str	r3, [r7, #92]	; 0x5c
   2475a:	e004      	b.n	24766 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   2475c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2475e:	2280      	movs	r2, #128	; 0x80
   24760:	0192      	lsls	r2, r2, #6
   24762:	1ad3      	subs	r3, r2, r3
   24764:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24768:	687a      	ldr	r2, [r7, #4]
   2476a:	18d3      	adds	r3, r2, r3
   2476c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2476e:	b292      	uxth	r2, r2
   24770:	0011      	movs	r1, r2
   24772:	0018      	movs	r0, r3
   24774:	4b2a      	ldr	r3, [pc, #168]	; (24820 <spi_cmd_complete+0x7ac>)
   24776:	4798      	blx	r3
   24778:	1e03      	subs	r3, r0, #0
   2477a:	d010      	beq.n	2479e <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   2477c:	4a29      	ldr	r2, [pc, #164]	; (24824 <spi_cmd_complete+0x7b0>)
   2477e:	491c      	ldr	r1, [pc, #112]	; (247f0 <spi_cmd_complete+0x77c>)
   24780:	4b1c      	ldr	r3, [pc, #112]	; (247f4 <spi_cmd_complete+0x780>)
   24782:	0018      	movs	r0, r3
   24784:	4b1c      	ldr	r3, [pc, #112]	; (247f8 <spi_cmd_complete+0x784>)
   24786:	4798      	blx	r3
   24788:	4b27      	ldr	r3, [pc, #156]	; (24828 <spi_cmd_complete+0x7b4>)
   2478a:	0018      	movs	r0, r3
   2478c:	4b1a      	ldr	r3, [pc, #104]	; (247f8 <spi_cmd_complete+0x784>)
   2478e:	4798      	blx	r3
   24790:	4b1b      	ldr	r3, [pc, #108]	; (24800 <spi_cmd_complete+0x78c>)
   24792:	0018      	movs	r0, r3
   24794:	4b18      	ldr	r3, [pc, #96]	; (247f8 <spi_cmd_complete+0x784>)
   24796:	4798      	blx	r3
						result = N_FAIL;
   24798:	2300      	movs	r3, #0
   2479a:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   2479c:	e0cb      	b.n	24936 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2479e:	4b1c      	ldr	r3, [pc, #112]	; (24810 <spi_cmd_complete+0x79c>)
   247a0:	781b      	ldrb	r3, [r3, #0]
   247a2:	2b00      	cmp	r3, #0
   247a4:	d119      	bne.n	247da <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   247a6:	2314      	movs	r3, #20
   247a8:	18fb      	adds	r3, r7, r3
   247aa:	2102      	movs	r1, #2
   247ac:	0018      	movs	r0, r3
   247ae:	4b1c      	ldr	r3, [pc, #112]	; (24820 <spi_cmd_complete+0x7ac>)
   247b0:	4798      	blx	r3
   247b2:	1e03      	subs	r3, r0, #0
   247b4:	d011      	beq.n	247da <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   247b6:	23a6      	movs	r3, #166	; 0xa6
   247b8:	009a      	lsls	r2, r3, #2
   247ba:	490d      	ldr	r1, [pc, #52]	; (247f0 <spi_cmd_complete+0x77c>)
   247bc:	4b0d      	ldr	r3, [pc, #52]	; (247f4 <spi_cmd_complete+0x780>)
   247be:	0018      	movs	r0, r3
   247c0:	4b0d      	ldr	r3, [pc, #52]	; (247f8 <spi_cmd_complete+0x784>)
   247c2:	4798      	blx	r3
   247c4:	4b19      	ldr	r3, [pc, #100]	; (2482c <spi_cmd_complete+0x7b8>)
   247c6:	0018      	movs	r0, r3
   247c8:	4b0b      	ldr	r3, [pc, #44]	; (247f8 <spi_cmd_complete+0x784>)
   247ca:	4798      	blx	r3
   247cc:	4b0c      	ldr	r3, [pc, #48]	; (24800 <spi_cmd_complete+0x78c>)
   247ce:	0018      	movs	r0, r3
   247d0:	4b09      	ldr	r3, [pc, #36]	; (247f8 <spi_cmd_complete+0x784>)
   247d2:	4798      	blx	r3
							result = N_FAIL;
   247d4:	2300      	movs	r3, #0
   247d6:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   247d8:	e0ad      	b.n	24936 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   247da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   247dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   247de:	18d3      	adds	r3, r2, r3
   247e0:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   247e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   247e4:	683a      	ldr	r2, [r7, #0]
   247e6:	1ad3      	subs	r3, r2, r3
   247e8:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   247ea:	e09e      	b.n	2492a <spi_cmd_complete+0x8b6>
   247ec:	0000022f 	.word	0x0000022f
   247f0:	0003ba7c 	.word	0x0003ba7c
   247f4:	0003b468 	.word	0x0003b468
   247f8:	0001e639 	.word	0x0001e639
   247fc:	0003b560 	.word	0x0003b560
   24800:	0003b4a8 	.word	0x0003b4a8
   24804:	00000239 	.word	0x00000239
   24808:	0003b59c 	.word	0x0003b59c
   2480c:	0003b5d0 	.word	0x0003b5d0
   24810:	200042c0 	.word	0x200042c0
   24814:	00000263 	.word	0x00000263
   24818:	0003b600 	.word	0x0003b600
   2481c:	0003b630 	.word	0x0003b630
   24820:	000239ad 	.word	0x000239ad
   24824:	0000028e 	.word	0x0000028e
   24828:	0003b660 	.word	0x0003b660
   2482c:	0003b694 	.word	0x0003b694
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24830:	683a      	ldr	r2, [r7, #0]
   24832:	2380      	movs	r3, #128	; 0x80
   24834:	019b      	lsls	r3, r3, #6
   24836:	429a      	cmp	r2, r3
   24838:	d802      	bhi.n	24840 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2483a:	683b      	ldr	r3, [r7, #0]
   2483c:	65bb      	str	r3, [r7, #88]	; 0x58
   2483e:	e002      	b.n	24846 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24840:	2380      	movs	r3, #128	; 0x80
   24842:	019b      	lsls	r3, r3, #6
   24844:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24846:	230a      	movs	r3, #10
   24848:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   2484a:	2317      	movs	r3, #23
   2484c:	18fb      	adds	r3, r7, r3
   2484e:	2101      	movs	r1, #1
   24850:	0018      	movs	r0, r3
   24852:	4b3b      	ldr	r3, [pc, #236]	; (24940 <spi_cmd_complete+0x8cc>)
   24854:	4798      	blx	r3
   24856:	1e03      	subs	r3, r0, #0
   24858:	d011      	beq.n	2487e <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   2485a:	23ae      	movs	r3, #174	; 0xae
   2485c:	009a      	lsls	r2, r3, #2
   2485e:	4939      	ldr	r1, [pc, #228]	; (24944 <spi_cmd_complete+0x8d0>)
   24860:	4b39      	ldr	r3, [pc, #228]	; (24948 <spi_cmd_complete+0x8d4>)
   24862:	0018      	movs	r0, r3
   24864:	4b39      	ldr	r3, [pc, #228]	; (2494c <spi_cmd_complete+0x8d8>)
   24866:	4798      	blx	r3
   24868:	4b39      	ldr	r3, [pc, #228]	; (24950 <spi_cmd_complete+0x8dc>)
   2486a:	0018      	movs	r0, r3
   2486c:	4b37      	ldr	r3, [pc, #220]	; (2494c <spi_cmd_complete+0x8d8>)
   2486e:	4798      	blx	r3
   24870:	4b38      	ldr	r3, [pc, #224]	; (24954 <spi_cmd_complete+0x8e0>)
   24872:	0018      	movs	r0, r3
   24874:	4b35      	ldr	r3, [pc, #212]	; (2494c <spi_cmd_complete+0x8d8>)
   24876:	4798      	blx	r3
							result = N_FAIL;
   24878:	2300      	movs	r3, #0
   2487a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   2487c:	e010      	b.n	248a0 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   2487e:	2317      	movs	r3, #23
   24880:	18fb      	adds	r3, r7, r3
   24882:	781b      	ldrb	r3, [r3, #0]
   24884:	091b      	lsrs	r3, r3, #4
   24886:	b2db      	uxtb	r3, r3
   24888:	001a      	movs	r2, r3
   2488a:	230f      	movs	r3, #15
   2488c:	4013      	ands	r3, r2
   2488e:	2b0f      	cmp	r3, #15
   24890:	d005      	beq.n	2489e <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24894:	1e5a      	subs	r2, r3, #1
   24896:	667a      	str	r2, [r7, #100]	; 0x64
   24898:	2b00      	cmp	r3, #0
   2489a:	d1d6      	bne.n	2484a <spi_cmd_complete+0x7d6>
   2489c:	e000      	b.n	248a0 <spi_cmd_complete+0x82c>
							break;
   2489e:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   248a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   248a2:	2b00      	cmp	r3, #0
   248a4:	d046      	beq.n	24934 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   248a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   248a8:	687a      	ldr	r2, [r7, #4]
   248aa:	18d3      	adds	r3, r2, r3
   248ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
   248ae:	b292      	uxth	r2, r2
   248b0:	0011      	movs	r1, r2
   248b2:	0018      	movs	r0, r3
   248b4:	4b22      	ldr	r3, [pc, #136]	; (24940 <spi_cmd_complete+0x8cc>)
   248b6:	4798      	blx	r3
   248b8:	1e03      	subs	r3, r0, #0
   248ba:	d011      	beq.n	248e0 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   248bc:	23b2      	movs	r3, #178	; 0xb2
   248be:	009a      	lsls	r2, r3, #2
   248c0:	4920      	ldr	r1, [pc, #128]	; (24944 <spi_cmd_complete+0x8d0>)
   248c2:	4b21      	ldr	r3, [pc, #132]	; (24948 <spi_cmd_complete+0x8d4>)
   248c4:	0018      	movs	r0, r3
   248c6:	4b21      	ldr	r3, [pc, #132]	; (2494c <spi_cmd_complete+0x8d8>)
   248c8:	4798      	blx	r3
   248ca:	4b23      	ldr	r3, [pc, #140]	; (24958 <spi_cmd_complete+0x8e4>)
   248cc:	0018      	movs	r0, r3
   248ce:	4b1f      	ldr	r3, [pc, #124]	; (2494c <spi_cmd_complete+0x8d8>)
   248d0:	4798      	blx	r3
   248d2:	4b20      	ldr	r3, [pc, #128]	; (24954 <spi_cmd_complete+0x8e0>)
   248d4:	0018      	movs	r0, r3
   248d6:	4b1d      	ldr	r3, [pc, #116]	; (2494c <spi_cmd_complete+0x8d8>)
   248d8:	4798      	blx	r3
						result = N_FAIL;
   248da:	2300      	movs	r3, #0
   248dc:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   248de:	e02a      	b.n	24936 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   248e0:	4b1e      	ldr	r3, [pc, #120]	; (2495c <spi_cmd_complete+0x8e8>)
   248e2:	781b      	ldrb	r3, [r3, #0]
   248e4:	2b00      	cmp	r3, #0
   248e6:	d118      	bne.n	2491a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   248e8:	2314      	movs	r3, #20
   248ea:	18fb      	adds	r3, r7, r3
   248ec:	2102      	movs	r1, #2
   248ee:	0018      	movs	r0, r3
   248f0:	4b13      	ldr	r3, [pc, #76]	; (24940 <spi_cmd_complete+0x8cc>)
   248f2:	4798      	blx	r3
   248f4:	1e03      	subs	r3, r0, #0
   248f6:	d010      	beq.n	2491a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   248f8:	4a19      	ldr	r2, [pc, #100]	; (24960 <spi_cmd_complete+0x8ec>)
   248fa:	4912      	ldr	r1, [pc, #72]	; (24944 <spi_cmd_complete+0x8d0>)
   248fc:	4b12      	ldr	r3, [pc, #72]	; (24948 <spi_cmd_complete+0x8d4>)
   248fe:	0018      	movs	r0, r3
   24900:	4b12      	ldr	r3, [pc, #72]	; (2494c <spi_cmd_complete+0x8d8>)
   24902:	4798      	blx	r3
   24904:	4b17      	ldr	r3, [pc, #92]	; (24964 <spi_cmd_complete+0x8f0>)
   24906:	0018      	movs	r0, r3
   24908:	4b10      	ldr	r3, [pc, #64]	; (2494c <spi_cmd_complete+0x8d8>)
   2490a:	4798      	blx	r3
   2490c:	4b11      	ldr	r3, [pc, #68]	; (24954 <spi_cmd_complete+0x8e0>)
   2490e:	0018      	movs	r0, r3
   24910:	4b0e      	ldr	r3, [pc, #56]	; (2494c <spi_cmd_complete+0x8d8>)
   24912:	4798      	blx	r3
							result = N_FAIL;
   24914:	2300      	movs	r3, #0
   24916:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24918:	e00d      	b.n	24936 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2491a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2491c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2491e:	18d3      	adds	r3, r2, r3
   24920:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24924:	683a      	ldr	r2, [r7, #0]
   24926:	1ad3      	subs	r3, r2, r3
   24928:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2492a:	683b      	ldr	r3, [r7, #0]
   2492c:	2b00      	cmp	r3, #0
   2492e:	d000      	beq.n	24932 <spi_cmd_complete+0x8be>
   24930:	e77e      	b.n	24830 <spi_cmd_complete+0x7bc>
   24932:	e000      	b.n	24936 <spi_cmd_complete+0x8c2>
						break;
   24934:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24938:	0018      	movs	r0, r3
   2493a:	46bd      	mov	sp, r7
   2493c:	b01f      	add	sp, #124	; 0x7c
   2493e:	bd90      	pop	{r4, r7, pc}
   24940:	000239ad 	.word	0x000239ad
   24944:	0003ba7c 	.word	0x0003ba7c
   24948:	0003b468 	.word	0x0003b468
   2494c:	0001e639 	.word	0x0001e639
   24950:	0003b6cc 	.word	0x0003b6cc
   24954:	0003b4a8 	.word	0x0003b4a8
   24958:	0003b660 	.word	0x0003b660
   2495c:	200042c0 	.word	0x200042c0
   24960:	000002d2 	.word	0x000002d2
   24964:	0003b694 	.word	0x0003b694

00024968 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24968:	b580      	push	{r7, lr}
   2496a:	b086      	sub	sp, #24
   2496c:	af00      	add	r7, sp, #0
   2496e:	6078      	str	r0, [r7, #4]
   24970:	000a      	movs	r2, r1
   24972:	1cbb      	adds	r3, r7, #2
   24974:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24976:	2313      	movs	r3, #19
   24978:	18fb      	adds	r3, r7, r3
   2497a:	2201      	movs	r2, #1
   2497c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2497e:	230c      	movs	r3, #12
   24980:	18fb      	adds	r3, r7, r3
   24982:	2200      	movs	r2, #0
   24984:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24986:	2316      	movs	r3, #22
   24988:	18fb      	adds	r3, r7, r3
   2498a:	2200      	movs	r2, #0
   2498c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2498e:	1cbb      	adds	r3, r7, #2
   24990:	881a      	ldrh	r2, [r3, #0]
   24992:	2380      	movs	r3, #128	; 0x80
   24994:	019b      	lsls	r3, r3, #6
   24996:	429a      	cmp	r2, r3
   24998:	d805      	bhi.n	249a6 <spi_data_write+0x3e>
			nbytes = sz;
   2499a:	2314      	movs	r3, #20
   2499c:	18fb      	adds	r3, r7, r3
   2499e:	1cba      	adds	r2, r7, #2
   249a0:	8812      	ldrh	r2, [r2, #0]
   249a2:	801a      	strh	r2, [r3, #0]
   249a4:	e004      	b.n	249b0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   249a6:	2314      	movs	r3, #20
   249a8:	18fb      	adds	r3, r7, r3
   249aa:	2280      	movs	r2, #128	; 0x80
   249ac:	0192      	lsls	r2, r2, #6
   249ae:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   249b0:	2311      	movs	r3, #17
   249b2:	18fb      	adds	r3, r7, r3
   249b4:	22f0      	movs	r2, #240	; 0xf0
   249b6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   249b8:	2316      	movs	r3, #22
   249ba:	18fb      	adds	r3, r7, r3
   249bc:	2200      	movs	r2, #0
   249be:	5e9b      	ldrsh	r3, [r3, r2]
   249c0:	2b00      	cmp	r3, #0
   249c2:	d10f      	bne.n	249e4 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   249c4:	1cbb      	adds	r3, r7, #2
   249c6:	881a      	ldrh	r2, [r3, #0]
   249c8:	2380      	movs	r3, #128	; 0x80
   249ca:	019b      	lsls	r3, r3, #6
   249cc:	429a      	cmp	r2, r3
   249ce:	d804      	bhi.n	249da <spi_data_write+0x72>
				order = 0x3;
   249d0:	2312      	movs	r3, #18
   249d2:	18fb      	adds	r3, r7, r3
   249d4:	2203      	movs	r2, #3
   249d6:	701a      	strb	r2, [r3, #0]
   249d8:	e013      	b.n	24a02 <spi_data_write+0x9a>
			else
				order = 0x1;
   249da:	2312      	movs	r3, #18
   249dc:	18fb      	adds	r3, r7, r3
   249de:	2201      	movs	r2, #1
   249e0:	701a      	strb	r2, [r3, #0]
   249e2:	e00e      	b.n	24a02 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   249e4:	1cbb      	adds	r3, r7, #2
   249e6:	881a      	ldrh	r2, [r3, #0]
   249e8:	2380      	movs	r3, #128	; 0x80
   249ea:	019b      	lsls	r3, r3, #6
   249ec:	429a      	cmp	r2, r3
   249ee:	d804      	bhi.n	249fa <spi_data_write+0x92>
				order = 0x3;
   249f0:	2312      	movs	r3, #18
   249f2:	18fb      	adds	r3, r7, r3
   249f4:	2203      	movs	r2, #3
   249f6:	701a      	strb	r2, [r3, #0]
   249f8:	e003      	b.n	24a02 <spi_data_write+0x9a>
			else
				order = 0x2;
   249fa:	2312      	movs	r3, #18
   249fc:	18fb      	adds	r3, r7, r3
   249fe:	2202      	movs	r2, #2
   24a00:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24a02:	2311      	movs	r3, #17
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	781a      	ldrb	r2, [r3, #0]
   24a08:	2312      	movs	r3, #18
   24a0a:	18fb      	adds	r3, r7, r3
   24a0c:	781b      	ldrb	r3, [r3, #0]
   24a0e:	4313      	orrs	r3, r2
   24a10:	b2da      	uxtb	r2, r3
   24a12:	2311      	movs	r3, #17
   24a14:	18fb      	adds	r3, r7, r3
   24a16:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24a18:	2311      	movs	r3, #17
   24a1a:	18fb      	adds	r3, r7, r3
   24a1c:	2101      	movs	r1, #1
   24a1e:	0018      	movs	r0, r3
   24a20:	4b3c      	ldr	r3, [pc, #240]	; (24b14 <spi_data_write+0x1ac>)
   24a22:	4798      	blx	r3
   24a24:	1e03      	subs	r3, r0, #0
   24a26:	d012      	beq.n	24a4e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24a28:	4a3b      	ldr	r2, [pc, #236]	; (24b18 <spi_data_write+0x1b0>)
   24a2a:	493c      	ldr	r1, [pc, #240]	; (24b1c <spi_data_write+0x1b4>)
   24a2c:	4b3c      	ldr	r3, [pc, #240]	; (24b20 <spi_data_write+0x1b8>)
   24a2e:	0018      	movs	r0, r3
   24a30:	4b3c      	ldr	r3, [pc, #240]	; (24b24 <spi_data_write+0x1bc>)
   24a32:	4798      	blx	r3
   24a34:	4b3c      	ldr	r3, [pc, #240]	; (24b28 <spi_data_write+0x1c0>)
   24a36:	0018      	movs	r0, r3
   24a38:	4b3a      	ldr	r3, [pc, #232]	; (24b24 <spi_data_write+0x1bc>)
   24a3a:	4798      	blx	r3
   24a3c:	4b3b      	ldr	r3, [pc, #236]	; (24b2c <spi_data_write+0x1c4>)
   24a3e:	0018      	movs	r0, r3
   24a40:	4b38      	ldr	r3, [pc, #224]	; (24b24 <spi_data_write+0x1bc>)
   24a42:	4798      	blx	r3
			result = N_FAIL;
   24a44:	2313      	movs	r3, #19
   24a46:	18fb      	adds	r3, r7, r3
   24a48:	2200      	movs	r2, #0
   24a4a:	701a      	strb	r2, [r3, #0]
			break;
   24a4c:	e059      	b.n	24b02 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24a4e:	2316      	movs	r3, #22
   24a50:	18fb      	adds	r3, r7, r3
   24a52:	2200      	movs	r2, #0
   24a54:	5e9b      	ldrsh	r3, [r3, r2]
   24a56:	687a      	ldr	r2, [r7, #4]
   24a58:	18d2      	adds	r2, r2, r3
   24a5a:	2314      	movs	r3, #20
   24a5c:	18fb      	adds	r3, r7, r3
   24a5e:	881b      	ldrh	r3, [r3, #0]
   24a60:	0019      	movs	r1, r3
   24a62:	0010      	movs	r0, r2
   24a64:	4b2b      	ldr	r3, [pc, #172]	; (24b14 <spi_data_write+0x1ac>)
   24a66:	4798      	blx	r3
   24a68:	1e03      	subs	r3, r0, #0
   24a6a:	d012      	beq.n	24a92 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24a6c:	4a30      	ldr	r2, [pc, #192]	; (24b30 <spi_data_write+0x1c8>)
   24a6e:	492b      	ldr	r1, [pc, #172]	; (24b1c <spi_data_write+0x1b4>)
   24a70:	4b2b      	ldr	r3, [pc, #172]	; (24b20 <spi_data_write+0x1b8>)
   24a72:	0018      	movs	r0, r3
   24a74:	4b2b      	ldr	r3, [pc, #172]	; (24b24 <spi_data_write+0x1bc>)
   24a76:	4798      	blx	r3
   24a78:	4b2e      	ldr	r3, [pc, #184]	; (24b34 <spi_data_write+0x1cc>)
   24a7a:	0018      	movs	r0, r3
   24a7c:	4b29      	ldr	r3, [pc, #164]	; (24b24 <spi_data_write+0x1bc>)
   24a7e:	4798      	blx	r3
   24a80:	4b2a      	ldr	r3, [pc, #168]	; (24b2c <spi_data_write+0x1c4>)
   24a82:	0018      	movs	r0, r3
   24a84:	4b27      	ldr	r3, [pc, #156]	; (24b24 <spi_data_write+0x1bc>)
   24a86:	4798      	blx	r3
			result = N_FAIL;
   24a88:	2313      	movs	r3, #19
   24a8a:	18fb      	adds	r3, r7, r3
   24a8c:	2200      	movs	r2, #0
   24a8e:	701a      	strb	r2, [r3, #0]
			break;
   24a90:	e037      	b.n	24b02 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   24a92:	4b29      	ldr	r3, [pc, #164]	; (24b38 <spi_data_write+0x1d0>)
   24a94:	781b      	ldrb	r3, [r3, #0]
   24a96:	2b00      	cmp	r3, #0
   24a98:	d11b      	bne.n	24ad2 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24a9a:	230c      	movs	r3, #12
   24a9c:	18fb      	adds	r3, r7, r3
   24a9e:	2102      	movs	r1, #2
   24aa0:	0018      	movs	r0, r3
   24aa2:	4b1c      	ldr	r3, [pc, #112]	; (24b14 <spi_data_write+0x1ac>)
   24aa4:	4798      	blx	r3
   24aa6:	1e03      	subs	r3, r0, #0
   24aa8:	d013      	beq.n	24ad2 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24aaa:	23d7      	movs	r3, #215	; 0xd7
   24aac:	009a      	lsls	r2, r3, #2
   24aae:	491b      	ldr	r1, [pc, #108]	; (24b1c <spi_data_write+0x1b4>)
   24ab0:	4b1b      	ldr	r3, [pc, #108]	; (24b20 <spi_data_write+0x1b8>)
   24ab2:	0018      	movs	r0, r3
   24ab4:	4b1b      	ldr	r3, [pc, #108]	; (24b24 <spi_data_write+0x1bc>)
   24ab6:	4798      	blx	r3
   24ab8:	4b20      	ldr	r3, [pc, #128]	; (24b3c <spi_data_write+0x1d4>)
   24aba:	0018      	movs	r0, r3
   24abc:	4b19      	ldr	r3, [pc, #100]	; (24b24 <spi_data_write+0x1bc>)
   24abe:	4798      	blx	r3
   24ac0:	4b1a      	ldr	r3, [pc, #104]	; (24b2c <spi_data_write+0x1c4>)
   24ac2:	0018      	movs	r0, r3
   24ac4:	4b17      	ldr	r3, [pc, #92]	; (24b24 <spi_data_write+0x1bc>)
   24ac6:	4798      	blx	r3
				result = N_FAIL;
   24ac8:	2313      	movs	r3, #19
   24aca:	18fb      	adds	r3, r7, r3
   24acc:	2200      	movs	r2, #0
   24ace:	701a      	strb	r2, [r3, #0]
				break;
   24ad0:	e017      	b.n	24b02 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   24ad2:	2316      	movs	r3, #22
   24ad4:	18fb      	adds	r3, r7, r3
   24ad6:	881a      	ldrh	r2, [r3, #0]
   24ad8:	2314      	movs	r3, #20
   24ada:	18fb      	adds	r3, r7, r3
   24adc:	881b      	ldrh	r3, [r3, #0]
   24ade:	18d3      	adds	r3, r2, r3
   24ae0:	b29a      	uxth	r2, r3
   24ae2:	2316      	movs	r3, #22
   24ae4:	18fb      	adds	r3, r7, r3
   24ae6:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24ae8:	1cbb      	adds	r3, r7, #2
   24aea:	1cb9      	adds	r1, r7, #2
   24aec:	2214      	movs	r2, #20
   24aee:	18ba      	adds	r2, r7, r2
   24af0:	8809      	ldrh	r1, [r1, #0]
   24af2:	8812      	ldrh	r2, [r2, #0]
   24af4:	1a8a      	subs	r2, r1, r2
   24af6:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24af8:	1cbb      	adds	r3, r7, #2
   24afa:	881b      	ldrh	r3, [r3, #0]
   24afc:	2b00      	cmp	r3, #0
   24afe:	d000      	beq.n	24b02 <spi_data_write+0x19a>
   24b00:	e745      	b.n	2498e <spi_data_write+0x26>


	return result;
   24b02:	2313      	movs	r3, #19
   24b04:	18fb      	adds	r3, r7, r3
   24b06:	781b      	ldrb	r3, [r3, #0]
   24b08:	b25b      	sxtb	r3, r3
}
   24b0a:	0018      	movs	r0, r3
   24b0c:	46bd      	mov	sp, r7
   24b0e:	b006      	add	sp, #24
   24b10:	bd80      	pop	{r7, pc}
   24b12:	46c0      	nop			; (mov r8, r8)
   24b14:	000239f1 	.word	0x000239f1
   24b18:	00000349 	.word	0x00000349
   24b1c:	0003ba90 	.word	0x0003ba90
   24b20:	0003b468 	.word	0x0003b468
   24b24:	0001e639 	.word	0x0001e639
   24b28:	0003b730 	.word	0x0003b730
   24b2c:	0003b4a8 	.word	0x0003b4a8
   24b30:	00000352 	.word	0x00000352
   24b34:	0003b768 	.word	0x0003b768
   24b38:	200042c0 	.word	0x200042c0
   24b3c:	0003b79c 	.word	0x0003b79c

00024b40 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24b40:	b590      	push	{r4, r7, lr}
   24b42:	b087      	sub	sp, #28
   24b44:	af02      	add	r7, sp, #8
   24b46:	6078      	str	r0, [r7, #4]
   24b48:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24b4a:	230f      	movs	r3, #15
   24b4c:	18fb      	adds	r3, r7, r3
   24b4e:	220a      	movs	r2, #10
   24b50:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24b52:	230c      	movs	r3, #12
   24b54:	18fb      	adds	r3, r7, r3
   24b56:	2201      	movs	r2, #1
   24b58:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   24b5a:	230e      	movs	r3, #14
   24b5c:	18fb      	adds	r3, r7, r3
   24b5e:	22c9      	movs	r2, #201	; 0xc9
   24b60:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   24b62:	230d      	movs	r3, #13
   24b64:	18fb      	adds	r3, r7, r3
   24b66:	2200      	movs	r2, #0
   24b68:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   24b6a:	687b      	ldr	r3, [r7, #4]
   24b6c:	2b30      	cmp	r3, #48	; 0x30
   24b6e:	d808      	bhi.n	24b82 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   24b70:	230e      	movs	r3, #14
   24b72:	18fb      	adds	r3, r7, r3
   24b74:	22c3      	movs	r2, #195	; 0xc3
   24b76:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24b78:	230d      	movs	r3, #13
   24b7a:	18fb      	adds	r3, r7, r3
   24b7c:	2201      	movs	r2, #1
   24b7e:	701a      	strb	r2, [r3, #0]
   24b80:	e007      	b.n	24b92 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   24b82:	230e      	movs	r3, #14
   24b84:	18fb      	adds	r3, r7, r3
   24b86:	22c9      	movs	r2, #201	; 0xc9
   24b88:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24b8a:	230d      	movs	r3, #13
   24b8c:	18fb      	adds	r3, r7, r3
   24b8e:	2200      	movs	r2, #0
   24b90:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   24b92:	003a      	movs	r2, r7
   24b94:	6879      	ldr	r1, [r7, #4]
   24b96:	230e      	movs	r3, #14
   24b98:	18fb      	adds	r3, r7, r3
   24b9a:	7818      	ldrb	r0, [r3, #0]
   24b9c:	230d      	movs	r3, #13
   24b9e:	18fb      	adds	r3, r7, r3
   24ba0:	781b      	ldrb	r3, [r3, #0]
   24ba2:	9300      	str	r3, [sp, #0]
   24ba4:	2304      	movs	r3, #4
   24ba6:	4c2e      	ldr	r4, [pc, #184]	; (24c60 <spi_write_reg+0x120>)
   24ba8:	47a0      	blx	r4
   24baa:	0002      	movs	r2, r0
   24bac:	230c      	movs	r3, #12
   24bae:	18fb      	adds	r3, r7, r3
   24bb0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24bb2:	230c      	movs	r3, #12
   24bb4:	18fb      	adds	r3, r7, r3
   24bb6:	781b      	ldrb	r3, [r3, #0]
   24bb8:	b25b      	sxtb	r3, r3
   24bba:	2b01      	cmp	r3, #1
   24bbc:	d010      	beq.n	24be0 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   24bbe:	4a29      	ldr	r2, [pc, #164]	; (24c64 <spi_write_reg+0x124>)
   24bc0:	4929      	ldr	r1, [pc, #164]	; (24c68 <spi_write_reg+0x128>)
   24bc2:	4b2a      	ldr	r3, [pc, #168]	; (24c6c <spi_write_reg+0x12c>)
   24bc4:	0018      	movs	r0, r3
   24bc6:	4b2a      	ldr	r3, [pc, #168]	; (24c70 <spi_write_reg+0x130>)
   24bc8:	4798      	blx	r3
   24bca:	687a      	ldr	r2, [r7, #4]
   24bcc:	4b29      	ldr	r3, [pc, #164]	; (24c74 <spi_write_reg+0x134>)
   24bce:	0011      	movs	r1, r2
   24bd0:	0018      	movs	r0, r3
   24bd2:	4b27      	ldr	r3, [pc, #156]	; (24c70 <spi_write_reg+0x130>)
   24bd4:	4798      	blx	r3
   24bd6:	4b28      	ldr	r3, [pc, #160]	; (24c78 <spi_write_reg+0x138>)
   24bd8:	0018      	movs	r0, r3
   24bda:	4b25      	ldr	r3, [pc, #148]	; (24c70 <spi_write_reg+0x130>)
   24bdc:	4798      	blx	r3
		goto _FAIL_;
   24bde:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   24be0:	230c      	movs	r3, #12
   24be2:	18fb      	adds	r3, r7, r3
   24be4:	781b      	ldrb	r3, [r3, #0]
   24be6:	b25b      	sxtb	r3, r3
   24be8:	2b01      	cmp	r3, #1
   24bea:	d030      	beq.n	24c4e <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   24bec:	2001      	movs	r0, #1
   24bee:	4b23      	ldr	r3, [pc, #140]	; (24c7c <spi_write_reg+0x13c>)
   24bf0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24bf2:	2300      	movs	r3, #0
   24bf4:	9300      	str	r3, [sp, #0]
   24bf6:	2300      	movs	r3, #0
   24bf8:	2200      	movs	r2, #0
   24bfa:	2100      	movs	r1, #0
   24bfc:	20cf      	movs	r0, #207	; 0xcf
   24bfe:	4c20      	ldr	r4, [pc, #128]	; (24c80 <spi_write_reg+0x140>)
   24c00:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24c02:	20cf      	movs	r0, #207	; 0xcf
   24c04:	4b1f      	ldr	r3, [pc, #124]	; (24c84 <spi_write_reg+0x144>)
   24c06:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24c08:	23ea      	movs	r3, #234	; 0xea
   24c0a:	009a      	lsls	r2, r3, #2
   24c0c:	4916      	ldr	r1, [pc, #88]	; (24c68 <spi_write_reg+0x128>)
   24c0e:	4b17      	ldr	r3, [pc, #92]	; (24c6c <spi_write_reg+0x12c>)
   24c10:	0018      	movs	r0, r3
   24c12:	4b17      	ldr	r3, [pc, #92]	; (24c70 <spi_write_reg+0x130>)
   24c14:	4798      	blx	r3
   24c16:	230f      	movs	r3, #15
   24c18:	18fb      	adds	r3, r7, r3
   24c1a:	7819      	ldrb	r1, [r3, #0]
   24c1c:	683b      	ldr	r3, [r7, #0]
   24c1e:	687a      	ldr	r2, [r7, #4]
   24c20:	4819      	ldr	r0, [pc, #100]	; (24c88 <spi_write_reg+0x148>)
   24c22:	4c13      	ldr	r4, [pc, #76]	; (24c70 <spi_write_reg+0x130>)
   24c24:	47a0      	blx	r4
   24c26:	4b14      	ldr	r3, [pc, #80]	; (24c78 <spi_write_reg+0x138>)
   24c28:	0018      	movs	r0, r3
   24c2a:	4b11      	ldr	r3, [pc, #68]	; (24c70 <spi_write_reg+0x130>)
   24c2c:	4798      	blx	r3
		nm_bsp_sleep(1);
   24c2e:	2001      	movs	r0, #1
   24c30:	4b12      	ldr	r3, [pc, #72]	; (24c7c <spi_write_reg+0x13c>)
   24c32:	4798      	blx	r3
		retry--;
   24c34:	230f      	movs	r3, #15
   24c36:	18fb      	adds	r3, r7, r3
   24c38:	781a      	ldrb	r2, [r3, #0]
   24c3a:	230f      	movs	r3, #15
   24c3c:	18fb      	adds	r3, r7, r3
   24c3e:	3a01      	subs	r2, #1
   24c40:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24c42:	230f      	movs	r3, #15
   24c44:	18fb      	adds	r3, r7, r3
   24c46:	781b      	ldrb	r3, [r3, #0]
   24c48:	2b00      	cmp	r3, #0
   24c4a:	d000      	beq.n	24c4e <spi_write_reg+0x10e>
   24c4c:	e78d      	b.n	24b6a <spi_write_reg+0x2a>
	}

	return result;
   24c4e:	230c      	movs	r3, #12
   24c50:	18fb      	adds	r3, r7, r3
   24c52:	781b      	ldrb	r3, [r3, #0]
   24c54:	b25b      	sxtb	r3, r3
}
   24c56:	0018      	movs	r0, r3
   24c58:	46bd      	mov	sp, r7
   24c5a:	b005      	add	sp, #20
   24c5c:	bd90      	pop	{r4, r7, pc}
   24c5e:	46c0      	nop			; (mov r8, r8)
   24c60:	00024075 	.word	0x00024075
   24c64:	0000039d 	.word	0x0000039d
   24c68:	0003baa0 	.word	0x0003baa0
   24c6c:	0003b468 	.word	0x0003b468
   24c70:	0001e639 	.word	0x0001e639
   24c74:	0003b7d4 	.word	0x0003b7d4
   24c78:	0003b4a8 	.word	0x0003b4a8
   24c7c:	00020a8d 	.word	0x00020a8d
   24c80:	00023af9 	.word	0x00023af9
   24c84:	00023f39 	.word	0x00023f39
   24c88:	0003b800 	.word	0x0003b800

00024c8c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24c8c:	b590      	push	{r4, r7, lr}
   24c8e:	b089      	sub	sp, #36	; 0x24
   24c90:	af02      	add	r7, sp, #8
   24c92:	60f8      	str	r0, [r7, #12]
   24c94:	60b9      	str	r1, [r7, #8]
   24c96:	1dbb      	adds	r3, r7, #6
   24c98:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24c9a:	2316      	movs	r3, #22
   24c9c:	18fb      	adds	r3, r7, r3
   24c9e:	220a      	movs	r2, #10
   24ca0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   24ca2:	2315      	movs	r3, #21
   24ca4:	18fb      	adds	r3, r7, r3
   24ca6:	22c7      	movs	r2, #199	; 0xc7
   24ca8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24caa:	1dbb      	adds	r3, r7, #6
   24cac:	881a      	ldrh	r2, [r3, #0]
   24cae:	68f9      	ldr	r1, [r7, #12]
   24cb0:	2315      	movs	r3, #21
   24cb2:	18fb      	adds	r3, r7, r3
   24cb4:	7818      	ldrb	r0, [r3, #0]
   24cb6:	2300      	movs	r3, #0
   24cb8:	9300      	str	r3, [sp, #0]
   24cba:	0013      	movs	r3, r2
   24cbc:	2200      	movs	r2, #0
   24cbe:	4c4d      	ldr	r4, [pc, #308]	; (24df4 <nm_spi_write+0x168>)
   24cc0:	47a0      	blx	r4
   24cc2:	0002      	movs	r2, r0
   24cc4:	2317      	movs	r3, #23
   24cc6:	18fb      	adds	r3, r7, r3
   24cc8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24cca:	2317      	movs	r3, #23
   24ccc:	18fb      	adds	r3, r7, r3
   24cce:	781b      	ldrb	r3, [r3, #0]
   24cd0:	b25b      	sxtb	r3, r3
   24cd2:	2b01      	cmp	r3, #1
   24cd4:	d010      	beq.n	24cf8 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   24cd6:	4a48      	ldr	r2, [pc, #288]	; (24df8 <nm_spi_write+0x16c>)
   24cd8:	4948      	ldr	r1, [pc, #288]	; (24dfc <nm_spi_write+0x170>)
   24cda:	4b49      	ldr	r3, [pc, #292]	; (24e00 <nm_spi_write+0x174>)
   24cdc:	0018      	movs	r0, r3
   24cde:	4b49      	ldr	r3, [pc, #292]	; (24e04 <nm_spi_write+0x178>)
   24ce0:	4798      	blx	r3
   24ce2:	68fa      	ldr	r2, [r7, #12]
   24ce4:	4b48      	ldr	r3, [pc, #288]	; (24e08 <nm_spi_write+0x17c>)
   24ce6:	0011      	movs	r1, r2
   24ce8:	0018      	movs	r0, r3
   24cea:	4b46      	ldr	r3, [pc, #280]	; (24e04 <nm_spi_write+0x178>)
   24cec:	4798      	blx	r3
   24cee:	4b47      	ldr	r3, [pc, #284]	; (24e0c <nm_spi_write+0x180>)
   24cf0:	0018      	movs	r0, r3
   24cf2:	4b44      	ldr	r3, [pc, #272]	; (24e04 <nm_spi_write+0x178>)
   24cf4:	4798      	blx	r3
		goto _FAIL_;
   24cf6:	e03e      	b.n	24d76 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24cf8:	2317      	movs	r3, #23
   24cfa:	18fc      	adds	r4, r7, r3
   24cfc:	1dbb      	adds	r3, r7, #6
   24cfe:	881a      	ldrh	r2, [r3, #0]
   24d00:	68bb      	ldr	r3, [r7, #8]
   24d02:	0011      	movs	r1, r2
   24d04:	0018      	movs	r0, r3
   24d06:	4b42      	ldr	r3, [pc, #264]	; (24e10 <nm_spi_write+0x184>)
   24d08:	4798      	blx	r3
   24d0a:	0003      	movs	r3, r0
   24d0c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24d0e:	2317      	movs	r3, #23
   24d10:	18fb      	adds	r3, r7, r3
   24d12:	781b      	ldrb	r3, [r3, #0]
   24d14:	b25b      	sxtb	r3, r3
   24d16:	2b01      	cmp	r3, #1
   24d18:	d00e      	beq.n	24d38 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24d1a:	4a3e      	ldr	r2, [pc, #248]	; (24e14 <nm_spi_write+0x188>)
   24d1c:	4937      	ldr	r1, [pc, #220]	; (24dfc <nm_spi_write+0x170>)
   24d1e:	4b38      	ldr	r3, [pc, #224]	; (24e00 <nm_spi_write+0x174>)
   24d20:	0018      	movs	r0, r3
   24d22:	4b38      	ldr	r3, [pc, #224]	; (24e04 <nm_spi_write+0x178>)
   24d24:	4798      	blx	r3
   24d26:	4b3c      	ldr	r3, [pc, #240]	; (24e18 <nm_spi_write+0x18c>)
   24d28:	0018      	movs	r0, r3
   24d2a:	4b36      	ldr	r3, [pc, #216]	; (24e04 <nm_spi_write+0x178>)
   24d2c:	4798      	blx	r3
   24d2e:	4b37      	ldr	r3, [pc, #220]	; (24e0c <nm_spi_write+0x180>)
   24d30:	0018      	movs	r0, r3
   24d32:	4b34      	ldr	r3, [pc, #208]	; (24e04 <nm_spi_write+0x178>)
   24d34:	4798      	blx	r3
		goto _FAIL_;
   24d36:	e01e      	b.n	24d76 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24d38:	2317      	movs	r3, #23
   24d3a:	18fc      	adds	r4, r7, r3
   24d3c:	2315      	movs	r3, #21
   24d3e:	18fb      	adds	r3, r7, r3
   24d40:	781b      	ldrb	r3, [r3, #0]
   24d42:	0018      	movs	r0, r3
   24d44:	4b35      	ldr	r3, [pc, #212]	; (24e1c <nm_spi_write+0x190>)
   24d46:	4798      	blx	r3
   24d48:	0003      	movs	r3, r0
   24d4a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24d4c:	2317      	movs	r3, #23
   24d4e:	18fb      	adds	r3, r7, r3
   24d50:	781b      	ldrb	r3, [r3, #0]
   24d52:	b25b      	sxtb	r3, r3
   24d54:	2b01      	cmp	r3, #1
   24d56:	d00e      	beq.n	24d76 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24d58:	4a31      	ldr	r2, [pc, #196]	; (24e20 <nm_spi_write+0x194>)
   24d5a:	4928      	ldr	r1, [pc, #160]	; (24dfc <nm_spi_write+0x170>)
   24d5c:	4b28      	ldr	r3, [pc, #160]	; (24e00 <nm_spi_write+0x174>)
   24d5e:	0018      	movs	r0, r3
   24d60:	4b28      	ldr	r3, [pc, #160]	; (24e04 <nm_spi_write+0x178>)
   24d62:	4798      	blx	r3
   24d64:	4b2c      	ldr	r3, [pc, #176]	; (24e18 <nm_spi_write+0x18c>)
   24d66:	0018      	movs	r0, r3
   24d68:	4b26      	ldr	r3, [pc, #152]	; (24e04 <nm_spi_write+0x178>)
   24d6a:	4798      	blx	r3
   24d6c:	4b27      	ldr	r3, [pc, #156]	; (24e0c <nm_spi_write+0x180>)
   24d6e:	0018      	movs	r0, r3
   24d70:	4b24      	ldr	r3, [pc, #144]	; (24e04 <nm_spi_write+0x178>)
   24d72:	4798      	blx	r3
		goto _FAIL_;
   24d74:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   24d76:	2317      	movs	r3, #23
   24d78:	18fb      	adds	r3, r7, r3
   24d7a:	781b      	ldrb	r3, [r3, #0]
   24d7c:	b25b      	sxtb	r3, r3
   24d7e:	2b01      	cmp	r3, #1
   24d80:	d030      	beq.n	24de4 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   24d82:	2001      	movs	r0, #1
   24d84:	4b27      	ldr	r3, [pc, #156]	; (24e24 <nm_spi_write+0x198>)
   24d86:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24d88:	2300      	movs	r3, #0
   24d8a:	9300      	str	r3, [sp, #0]
   24d8c:	2300      	movs	r3, #0
   24d8e:	2200      	movs	r2, #0
   24d90:	2100      	movs	r1, #0
   24d92:	20cf      	movs	r0, #207	; 0xcf
   24d94:	4c24      	ldr	r4, [pc, #144]	; (24e28 <nm_spi_write+0x19c>)
   24d96:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24d98:	20cf      	movs	r0, #207	; 0xcf
   24d9a:	4b24      	ldr	r3, [pc, #144]	; (24e2c <nm_spi_write+0x1a0>)
   24d9c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24d9e:	4a24      	ldr	r2, [pc, #144]	; (24e30 <nm_spi_write+0x1a4>)
   24da0:	4916      	ldr	r1, [pc, #88]	; (24dfc <nm_spi_write+0x170>)
   24da2:	4b17      	ldr	r3, [pc, #92]	; (24e00 <nm_spi_write+0x174>)
   24da4:	0018      	movs	r0, r3
   24da6:	4b17      	ldr	r3, [pc, #92]	; (24e04 <nm_spi_write+0x178>)
   24da8:	4798      	blx	r3
   24daa:	2316      	movs	r3, #22
   24dac:	18fb      	adds	r3, r7, r3
   24dae:	7819      	ldrb	r1, [r3, #0]
   24db0:	1dbb      	adds	r3, r7, #6
   24db2:	881b      	ldrh	r3, [r3, #0]
   24db4:	68fa      	ldr	r2, [r7, #12]
   24db6:	481f      	ldr	r0, [pc, #124]	; (24e34 <nm_spi_write+0x1a8>)
   24db8:	4c12      	ldr	r4, [pc, #72]	; (24e04 <nm_spi_write+0x178>)
   24dba:	47a0      	blx	r4
   24dbc:	4b13      	ldr	r3, [pc, #76]	; (24e0c <nm_spi_write+0x180>)
   24dbe:	0018      	movs	r0, r3
   24dc0:	4b10      	ldr	r3, [pc, #64]	; (24e04 <nm_spi_write+0x178>)
   24dc2:	4798      	blx	r3
		nm_bsp_sleep(1);
   24dc4:	2001      	movs	r0, #1
   24dc6:	4b17      	ldr	r3, [pc, #92]	; (24e24 <nm_spi_write+0x198>)
   24dc8:	4798      	blx	r3
		retry--;
   24dca:	2316      	movs	r3, #22
   24dcc:	18fb      	adds	r3, r7, r3
   24dce:	781a      	ldrb	r2, [r3, #0]
   24dd0:	2316      	movs	r3, #22
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	3a01      	subs	r2, #1
   24dd6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24dd8:	2316      	movs	r3, #22
   24dda:	18fb      	adds	r3, r7, r3
   24ddc:	781b      	ldrb	r3, [r3, #0]
   24dde:	2b00      	cmp	r3, #0
   24de0:	d000      	beq.n	24de4 <nm_spi_write+0x158>
   24de2:	e762      	b.n	24caa <nm_spi_write+0x1e>
	}


	return result;
   24de4:	2317      	movs	r3, #23
   24de6:	18fb      	adds	r3, r7, r3
   24de8:	781b      	ldrb	r3, [r3, #0]
   24dea:	b25b      	sxtb	r3, r3
}
   24dec:	0018      	movs	r0, r3
   24dee:	46bd      	mov	sp, r7
   24df0:	b007      	add	sp, #28
   24df2:	bd90      	pop	{r4, r7, pc}
   24df4:	00024075 	.word	0x00024075
   24df8:	000003cf 	.word	0x000003cf
   24dfc:	0003bab0 	.word	0x0003bab0
   24e00:	0003b468 	.word	0x0003b468
   24e04:	0001e639 	.word	0x0001e639
   24e08:	0003b81c 	.word	0x0003b81c
   24e0c:	0003b4a8 	.word	0x0003b4a8
   24e10:	00024969 	.word	0x00024969
   24e14:	000003d9 	.word	0x000003d9
   24e18:	0003b84c 	.word	0x0003b84c
   24e1c:	00023e39 	.word	0x00023e39
   24e20:	000003e1 	.word	0x000003e1
   24e24:	00020a8d 	.word	0x00020a8d
   24e28:	00023af9 	.word	0x00023af9
   24e2c:	00023f39 	.word	0x00023f39
   24e30:	000003eb 	.word	0x000003eb
   24e34:	0003b874 	.word	0x0003b874

00024e38 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24e38:	b590      	push	{r4, r7, lr}
   24e3a:	b087      	sub	sp, #28
   24e3c:	af02      	add	r7, sp, #8
   24e3e:	6078      	str	r0, [r7, #4]
   24e40:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24e42:	230f      	movs	r3, #15
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	220a      	movs	r2, #10
   24e48:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24e4a:	230c      	movs	r3, #12
   24e4c:	18fb      	adds	r3, r7, r3
   24e4e:	2201      	movs	r2, #1
   24e50:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   24e52:	230e      	movs	r3, #14
   24e54:	18fb      	adds	r3, r7, r3
   24e56:	22ca      	movs	r2, #202	; 0xca
   24e58:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   24e5a:	230d      	movs	r3, #13
   24e5c:	18fb      	adds	r3, r7, r3
   24e5e:	2200      	movs	r2, #0
   24e60:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   24e62:	687b      	ldr	r3, [r7, #4]
   24e64:	2bff      	cmp	r3, #255	; 0xff
   24e66:	d808      	bhi.n	24e7a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24e68:	230e      	movs	r3, #14
   24e6a:	18fb      	adds	r3, r7, r3
   24e6c:	22c4      	movs	r2, #196	; 0xc4
   24e6e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24e70:	230d      	movs	r3, #13
   24e72:	18fb      	adds	r3, r7, r3
   24e74:	2201      	movs	r2, #1
   24e76:	701a      	strb	r2, [r3, #0]
   24e78:	e007      	b.n	24e8a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24e7a:	230e      	movs	r3, #14
   24e7c:	18fb      	adds	r3, r7, r3
   24e7e:	22ca      	movs	r2, #202	; 0xca
   24e80:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24e82:	230d      	movs	r3, #13
   24e84:	18fb      	adds	r3, r7, r3
   24e86:	2200      	movs	r2, #0
   24e88:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24e8a:	2308      	movs	r3, #8
   24e8c:	18fa      	adds	r2, r7, r3
   24e8e:	6879      	ldr	r1, [r7, #4]
   24e90:	230e      	movs	r3, #14
   24e92:	18fb      	adds	r3, r7, r3
   24e94:	7818      	ldrb	r0, [r3, #0]
   24e96:	230d      	movs	r3, #13
   24e98:	18fb      	adds	r3, r7, r3
   24e9a:	781b      	ldrb	r3, [r3, #0]
   24e9c:	9300      	str	r3, [sp, #0]
   24e9e:	2304      	movs	r3, #4
   24ea0:	4c37      	ldr	r4, [pc, #220]	; (24f80 <spi_read_reg+0x148>)
   24ea2:	47a0      	blx	r4
   24ea4:	0002      	movs	r2, r0
   24ea6:	230c      	movs	r3, #12
   24ea8:	18fb      	adds	r3, r7, r3
   24eaa:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24eac:	230c      	movs	r3, #12
   24eae:	18fb      	adds	r3, r7, r3
   24eb0:	781b      	ldrb	r3, [r3, #0]
   24eb2:	b25b      	sxtb	r3, r3
   24eb4:	2b01      	cmp	r3, #1
   24eb6:	d010      	beq.n	24eda <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24eb8:	4a32      	ldr	r2, [pc, #200]	; (24f84 <spi_read_reg+0x14c>)
   24eba:	4933      	ldr	r1, [pc, #204]	; (24f88 <spi_read_reg+0x150>)
   24ebc:	4b33      	ldr	r3, [pc, #204]	; (24f8c <spi_read_reg+0x154>)
   24ebe:	0018      	movs	r0, r3
   24ec0:	4b33      	ldr	r3, [pc, #204]	; (24f90 <spi_read_reg+0x158>)
   24ec2:	4798      	blx	r3
   24ec4:	687a      	ldr	r2, [r7, #4]
   24ec6:	4b33      	ldr	r3, [pc, #204]	; (24f94 <spi_read_reg+0x15c>)
   24ec8:	0011      	movs	r1, r2
   24eca:	0018      	movs	r0, r3
   24ecc:	4b30      	ldr	r3, [pc, #192]	; (24f90 <spi_read_reg+0x158>)
   24ece:	4798      	blx	r3
   24ed0:	4b31      	ldr	r3, [pc, #196]	; (24f98 <spi_read_reg+0x160>)
   24ed2:	0018      	movs	r0, r3
   24ed4:	4b2e      	ldr	r3, [pc, #184]	; (24f90 <spi_read_reg+0x158>)
   24ed6:	4798      	blx	r3
		goto _FAIL_;
   24ed8:	e014      	b.n	24f04 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24eda:	2308      	movs	r3, #8
   24edc:	18fb      	adds	r3, r7, r3
   24ede:	781b      	ldrb	r3, [r3, #0]
   24ee0:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   24ee2:	2308      	movs	r3, #8
   24ee4:	18fb      	adds	r3, r7, r3
   24ee6:	785b      	ldrb	r3, [r3, #1]
   24ee8:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24eea:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24eec:	2308      	movs	r3, #8
   24eee:	18fb      	adds	r3, r7, r3
   24ef0:	789b      	ldrb	r3, [r3, #2]
   24ef2:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24ef4:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24ef6:	2308      	movs	r3, #8
   24ef8:	18fb      	adds	r3, r7, r3
   24efa:	78db      	ldrb	r3, [r3, #3]
   24efc:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24efe:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24f00:	683b      	ldr	r3, [r7, #0]
   24f02:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24f04:	230c      	movs	r3, #12
   24f06:	18fb      	adds	r3, r7, r3
   24f08:	781b      	ldrb	r3, [r3, #0]
   24f0a:	b25b      	sxtb	r3, r3
   24f0c:	2b01      	cmp	r3, #1
   24f0e:	d02f      	beq.n	24f70 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24f10:	2001      	movs	r0, #1
   24f12:	4b22      	ldr	r3, [pc, #136]	; (24f9c <spi_read_reg+0x164>)
   24f14:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24f16:	2300      	movs	r3, #0
   24f18:	9300      	str	r3, [sp, #0]
   24f1a:	2300      	movs	r3, #0
   24f1c:	2200      	movs	r2, #0
   24f1e:	2100      	movs	r1, #0
   24f20:	20cf      	movs	r0, #207	; 0xcf
   24f22:	4c1f      	ldr	r4, [pc, #124]	; (24fa0 <spi_read_reg+0x168>)
   24f24:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24f26:	20cf      	movs	r0, #207	; 0xcf
   24f28:	4b1e      	ldr	r3, [pc, #120]	; (24fa4 <spi_read_reg+0x16c>)
   24f2a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24f2c:	4a1e      	ldr	r2, [pc, #120]	; (24fa8 <spi_read_reg+0x170>)
   24f2e:	4916      	ldr	r1, [pc, #88]	; (24f88 <spi_read_reg+0x150>)
   24f30:	4b16      	ldr	r3, [pc, #88]	; (24f8c <spi_read_reg+0x154>)
   24f32:	0018      	movs	r0, r3
   24f34:	4b16      	ldr	r3, [pc, #88]	; (24f90 <spi_read_reg+0x158>)
   24f36:	4798      	blx	r3
   24f38:	230f      	movs	r3, #15
   24f3a:	18fb      	adds	r3, r7, r3
   24f3c:	7819      	ldrb	r1, [r3, #0]
   24f3e:	687a      	ldr	r2, [r7, #4]
   24f40:	4b1a      	ldr	r3, [pc, #104]	; (24fac <spi_read_reg+0x174>)
   24f42:	0018      	movs	r0, r3
   24f44:	4b12      	ldr	r3, [pc, #72]	; (24f90 <spi_read_reg+0x158>)
   24f46:	4798      	blx	r3
   24f48:	4b13      	ldr	r3, [pc, #76]	; (24f98 <spi_read_reg+0x160>)
   24f4a:	0018      	movs	r0, r3
   24f4c:	4b10      	ldr	r3, [pc, #64]	; (24f90 <spi_read_reg+0x158>)
   24f4e:	4798      	blx	r3
		nm_bsp_sleep(1);
   24f50:	2001      	movs	r0, #1
   24f52:	4b12      	ldr	r3, [pc, #72]	; (24f9c <spi_read_reg+0x164>)
   24f54:	4798      	blx	r3
		retry--;
   24f56:	230f      	movs	r3, #15
   24f58:	18fb      	adds	r3, r7, r3
   24f5a:	781a      	ldrb	r2, [r3, #0]
   24f5c:	230f      	movs	r3, #15
   24f5e:	18fb      	adds	r3, r7, r3
   24f60:	3a01      	subs	r2, #1
   24f62:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24f64:	230f      	movs	r3, #15
   24f66:	18fb      	adds	r3, r7, r3
   24f68:	781b      	ldrb	r3, [r3, #0]
   24f6a:	2b00      	cmp	r3, #0
   24f6c:	d000      	beq.n	24f70 <spi_read_reg+0x138>
   24f6e:	e778      	b.n	24e62 <spi_read_reg+0x2a>
	}
		
	return result;
   24f70:	230c      	movs	r3, #12
   24f72:	18fb      	adds	r3, r7, r3
   24f74:	781b      	ldrb	r3, [r3, #0]
   24f76:	b25b      	sxtb	r3, r3
}
   24f78:	0018      	movs	r0, r3
   24f7a:	46bd      	mov	sp, r7
   24f7c:	b005      	add	sp, #20
   24f7e:	bd90      	pop	{r4, r7, pc}
   24f80:	00024075 	.word	0x00024075
   24f84:	00000423 	.word	0x00000423
   24f88:	0003bac0 	.word	0x0003bac0
   24f8c:	0003b468 	.word	0x0003b468
   24f90:	0001e639 	.word	0x0001e639
   24f94:	0003b890 	.word	0x0003b890
   24f98:	0003b4a8 	.word	0x0003b4a8
   24f9c:	00020a8d 	.word	0x00020a8d
   24fa0:	00023af9 	.word	0x00023af9
   24fa4:	00023f39 	.word	0x00023f39
   24fa8:	00000435 	.word	0x00000435
   24fac:	0003b8bc 	.word	0x0003b8bc

00024fb0 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   24fb0:	b590      	push	{r4, r7, lr}
   24fb2:	b089      	sub	sp, #36	; 0x24
   24fb4:	af02      	add	r7, sp, #8
   24fb6:	60f8      	str	r0, [r7, #12]
   24fb8:	60b9      	str	r1, [r7, #8]
   24fba:	1dbb      	adds	r3, r7, #6
   24fbc:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24fbe:	2316      	movs	r3, #22
   24fc0:	18fb      	adds	r3, r7, r3
   24fc2:	22c8      	movs	r2, #200	; 0xc8
   24fc4:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24fc6:	2317      	movs	r3, #23
   24fc8:	18fb      	adds	r3, r7, r3
   24fca:	220a      	movs	r2, #10
   24fcc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24fce:	1dbb      	adds	r3, r7, #6
   24fd0:	881c      	ldrh	r4, [r3, #0]
   24fd2:	68ba      	ldr	r2, [r7, #8]
   24fd4:	68f9      	ldr	r1, [r7, #12]
   24fd6:	2316      	movs	r3, #22
   24fd8:	18fb      	adds	r3, r7, r3
   24fda:	7818      	ldrb	r0, [r3, #0]
   24fdc:	2300      	movs	r3, #0
   24fde:	9300      	str	r3, [sp, #0]
   24fe0:	0023      	movs	r3, r4
   24fe2:	4c2e      	ldr	r4, [pc, #184]	; (2509c <nm_spi_read+0xec>)
   24fe4:	47a0      	blx	r4
   24fe6:	0002      	movs	r2, r0
   24fe8:	2315      	movs	r3, #21
   24fea:	18fb      	adds	r3, r7, r3
   24fec:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24fee:	2315      	movs	r3, #21
   24ff0:	18fb      	adds	r3, r7, r3
   24ff2:	781b      	ldrb	r3, [r3, #0]
   24ff4:	b25b      	sxtb	r3, r3
   24ff6:	2b01      	cmp	r3, #1
   24ff8:	d010      	beq.n	2501c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24ffa:	4a29      	ldr	r2, [pc, #164]	; (250a0 <nm_spi_read+0xf0>)
   24ffc:	4929      	ldr	r1, [pc, #164]	; (250a4 <nm_spi_read+0xf4>)
   24ffe:	4b2a      	ldr	r3, [pc, #168]	; (250a8 <nm_spi_read+0xf8>)
   25000:	0018      	movs	r0, r3
   25002:	4b2a      	ldr	r3, [pc, #168]	; (250ac <nm_spi_read+0xfc>)
   25004:	4798      	blx	r3
   25006:	68fa      	ldr	r2, [r7, #12]
   25008:	4b29      	ldr	r3, [pc, #164]	; (250b0 <nm_spi_read+0x100>)
   2500a:	0011      	movs	r1, r2
   2500c:	0018      	movs	r0, r3
   2500e:	4b27      	ldr	r3, [pc, #156]	; (250ac <nm_spi_read+0xfc>)
   25010:	4798      	blx	r3
   25012:	4b28      	ldr	r3, [pc, #160]	; (250b4 <nm_spi_read+0x104>)
   25014:	0018      	movs	r0, r3
   25016:	4b25      	ldr	r3, [pc, #148]	; (250ac <nm_spi_read+0xfc>)
   25018:	4798      	blx	r3
		goto _FAIL_;
   2501a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   2501c:	2315      	movs	r3, #21
   2501e:	18fb      	adds	r3, r7, r3
   25020:	781b      	ldrb	r3, [r3, #0]
   25022:	b25b      	sxtb	r3, r3
   25024:	2b01      	cmp	r3, #1
   25026:	d030      	beq.n	2508a <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   25028:	2001      	movs	r0, #1
   2502a:	4b23      	ldr	r3, [pc, #140]	; (250b8 <nm_spi_read+0x108>)
   2502c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2502e:	2300      	movs	r3, #0
   25030:	9300      	str	r3, [sp, #0]
   25032:	2300      	movs	r3, #0
   25034:	2200      	movs	r2, #0
   25036:	2100      	movs	r1, #0
   25038:	20cf      	movs	r0, #207	; 0xcf
   2503a:	4c20      	ldr	r4, [pc, #128]	; (250bc <nm_spi_read+0x10c>)
   2503c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2503e:	20cf      	movs	r0, #207	; 0xcf
   25040:	4b1f      	ldr	r3, [pc, #124]	; (250c0 <nm_spi_read+0x110>)
   25042:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   25044:	4a1f      	ldr	r2, [pc, #124]	; (250c4 <nm_spi_read+0x114>)
   25046:	4917      	ldr	r1, [pc, #92]	; (250a4 <nm_spi_read+0xf4>)
   25048:	4b17      	ldr	r3, [pc, #92]	; (250a8 <nm_spi_read+0xf8>)
   2504a:	0018      	movs	r0, r3
   2504c:	4b17      	ldr	r3, [pc, #92]	; (250ac <nm_spi_read+0xfc>)
   2504e:	4798      	blx	r3
   25050:	2317      	movs	r3, #23
   25052:	18fb      	adds	r3, r7, r3
   25054:	7819      	ldrb	r1, [r3, #0]
   25056:	1dbb      	adds	r3, r7, #6
   25058:	881b      	ldrh	r3, [r3, #0]
   2505a:	68fa      	ldr	r2, [r7, #12]
   2505c:	481a      	ldr	r0, [pc, #104]	; (250c8 <nm_spi_read+0x118>)
   2505e:	4c13      	ldr	r4, [pc, #76]	; (250ac <nm_spi_read+0xfc>)
   25060:	47a0      	blx	r4
   25062:	4b14      	ldr	r3, [pc, #80]	; (250b4 <nm_spi_read+0x104>)
   25064:	0018      	movs	r0, r3
   25066:	4b11      	ldr	r3, [pc, #68]	; (250ac <nm_spi_read+0xfc>)
   25068:	4798      	blx	r3
		nm_bsp_sleep(1);
   2506a:	2001      	movs	r0, #1
   2506c:	4b12      	ldr	r3, [pc, #72]	; (250b8 <nm_spi_read+0x108>)
   2506e:	4798      	blx	r3
		retry--;
   25070:	2317      	movs	r3, #23
   25072:	18fb      	adds	r3, r7, r3
   25074:	781a      	ldrb	r2, [r3, #0]
   25076:	2317      	movs	r3, #23
   25078:	18fb      	adds	r3, r7, r3
   2507a:	3a01      	subs	r2, #1
   2507c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2507e:	2317      	movs	r3, #23
   25080:	18fb      	adds	r3, r7, r3
   25082:	781b      	ldrb	r3, [r3, #0]
   25084:	2b00      	cmp	r3, #0
   25086:	d000      	beq.n	2508a <nm_spi_read+0xda>
   25088:	e7a1      	b.n	24fce <nm_spi_read+0x1e>
	}

	return result;
   2508a:	2315      	movs	r3, #21
   2508c:	18fb      	adds	r3, r7, r3
   2508e:	781b      	ldrb	r3, [r3, #0]
   25090:	b25b      	sxtb	r3, r3
}
   25092:	0018      	movs	r0, r3
   25094:	46bd      	mov	sp, r7
   25096:	b007      	add	sp, #28
   25098:	bd90      	pop	{r4, r7, pc}
   2509a:	46c0      	nop			; (mov r8, r8)
   2509c:	00024075 	.word	0x00024075
   250a0:	00000472 	.word	0x00000472
   250a4:	0003bad0 	.word	0x0003bad0
   250a8:	0003b468 	.word	0x0003b468
   250ac:	0001e639 	.word	0x0001e639
   250b0:	0003b8d4 	.word	0x0003b8d4
   250b4:	0003b4a8 	.word	0x0003b4a8
   250b8:	00020a8d 	.word	0x00020a8d
   250bc:	00023af9 	.word	0x00023af9
   250c0:	00023f39 	.word	0x00023f39
   250c4:	0000047d 	.word	0x0000047d
   250c8:	0003b874 	.word	0x0003b874

000250cc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   250cc:	b580      	push	{r7, lr}
   250ce:	b082      	sub	sp, #8
   250d0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   250d2:	4b0c      	ldr	r3, [pc, #48]	; (25104 <spi_init_pkt_sz+0x38>)
   250d4:	0018      	movs	r0, r3
   250d6:	4b0c      	ldr	r3, [pc, #48]	; (25108 <spi_init_pkt_sz+0x3c>)
   250d8:	4798      	blx	r3
   250da:	0003      	movs	r3, r0
   250dc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   250de:	687b      	ldr	r3, [r7, #4]
   250e0:	2270      	movs	r2, #112	; 0x70
   250e2:	4393      	bics	r3, r2
   250e4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   250e6:	687b      	ldr	r3, [r7, #4]
   250e8:	2250      	movs	r2, #80	; 0x50
   250ea:	4313      	orrs	r3, r2
   250ec:	607b      	str	r3, [r7, #4]
   250ee:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   250f0:	687b      	ldr	r3, [r7, #4]
   250f2:	4a04      	ldr	r2, [pc, #16]	; (25104 <spi_init_pkt_sz+0x38>)
   250f4:	0019      	movs	r1, r3
   250f6:	0010      	movs	r0, r2
   250f8:	4b04      	ldr	r3, [pc, #16]	; (2510c <spi_init_pkt_sz+0x40>)
   250fa:	4798      	blx	r3
}
   250fc:	46c0      	nop			; (mov r8, r8)
   250fe:	46bd      	mov	sp, r7
   25100:	b002      	add	sp, #8
   25102:	bd80      	pop	{r7, pc}
   25104:	0000e824 	.word	0x0000e824
   25108:	000252a5 	.word	0x000252a5
   2510c:	00025319 	.word	0x00025319

00025110 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   25110:	b590      	push	{r4, r7, lr}
   25112:	b083      	sub	sp, #12
   25114:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25116:	2300      	movs	r3, #0
   25118:	9300      	str	r3, [sp, #0]
   2511a:	2300      	movs	r3, #0
   2511c:	2200      	movs	r2, #0
   2511e:	2100      	movs	r1, #0
   25120:	20cf      	movs	r0, #207	; 0xcf
   25122:	4c05      	ldr	r4, [pc, #20]	; (25138 <nm_spi_reset+0x28>)
   25124:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   25126:	20cf      	movs	r0, #207	; 0xcf
   25128:	4b04      	ldr	r3, [pc, #16]	; (2513c <nm_spi_reset+0x2c>)
   2512a:	4798      	blx	r3
	return M2M_SUCCESS;
   2512c:	2300      	movs	r3, #0
}
   2512e:	0018      	movs	r0, r3
   25130:	46bd      	mov	sp, r7
   25132:	b001      	add	sp, #4
   25134:	bd90      	pop	{r4, r7, pc}
   25136:	46c0      	nop			; (mov r8, r8)
   25138:	00023af9 	.word	0x00023af9
   2513c:	00023f39 	.word	0x00023f39

00025140 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   25140:	b580      	push	{r7, lr}
   25142:	b082      	sub	sp, #8
   25144:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   25146:	2300      	movs	r3, #0
   25148:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   2514a:	4b40      	ldr	r3, [pc, #256]	; (2524c <nm_spi_init+0x10c>)
   2514c:	2200      	movs	r2, #0
   2514e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   25150:	003b      	movs	r3, r7
   25152:	4a3f      	ldr	r2, [pc, #252]	; (25250 <nm_spi_init+0x110>)
   25154:	0019      	movs	r1, r3
   25156:	0010      	movs	r0, r2
   25158:	4b3e      	ldr	r3, [pc, #248]	; (25254 <nm_spi_init+0x114>)
   2515a:	4798      	blx	r3
   2515c:	1e03      	subs	r3, r0, #0
   2515e:	d129      	bne.n	251b4 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   25160:	4b3a      	ldr	r3, [pc, #232]	; (2524c <nm_spi_init+0x10c>)
   25162:	2201      	movs	r2, #1
   25164:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   25166:	2398      	movs	r3, #152	; 0x98
   25168:	00da      	lsls	r2, r3, #3
   2516a:	493b      	ldr	r1, [pc, #236]	; (25258 <nm_spi_init+0x118>)
   2516c:	4b3b      	ldr	r3, [pc, #236]	; (2525c <nm_spi_init+0x11c>)
   2516e:	0018      	movs	r0, r3
   25170:	4b3b      	ldr	r3, [pc, #236]	; (25260 <nm_spi_init+0x120>)
   25172:	4798      	blx	r3
   25174:	4b3b      	ldr	r3, [pc, #236]	; (25264 <nm_spi_init+0x124>)
   25176:	0018      	movs	r0, r3
   25178:	4b39      	ldr	r3, [pc, #228]	; (25260 <nm_spi_init+0x120>)
   2517a:	4798      	blx	r3
   2517c:	4b3a      	ldr	r3, [pc, #232]	; (25268 <nm_spi_init+0x128>)
   2517e:	0018      	movs	r0, r3
   25180:	4b37      	ldr	r3, [pc, #220]	; (25260 <nm_spi_init+0x120>)
   25182:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25184:	003b      	movs	r3, r7
   25186:	4a32      	ldr	r2, [pc, #200]	; (25250 <nm_spi_init+0x110>)
   25188:	0019      	movs	r1, r3
   2518a:	0010      	movs	r0, r2
   2518c:	4b31      	ldr	r3, [pc, #196]	; (25254 <nm_spi_init+0x114>)
   2518e:	4798      	blx	r3
   25190:	1e03      	subs	r3, r0, #0
   25192:	d10f      	bne.n	251b4 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25194:	4a35      	ldr	r2, [pc, #212]	; (2526c <nm_spi_init+0x12c>)
   25196:	4930      	ldr	r1, [pc, #192]	; (25258 <nm_spi_init+0x118>)
   25198:	4b30      	ldr	r3, [pc, #192]	; (2525c <nm_spi_init+0x11c>)
   2519a:	0018      	movs	r0, r3
   2519c:	4b30      	ldr	r3, [pc, #192]	; (25260 <nm_spi_init+0x120>)
   2519e:	4798      	blx	r3
   251a0:	4b33      	ldr	r3, [pc, #204]	; (25270 <nm_spi_init+0x130>)
   251a2:	0018      	movs	r0, r3
   251a4:	4b2e      	ldr	r3, [pc, #184]	; (25260 <nm_spi_init+0x120>)
   251a6:	4798      	blx	r3
   251a8:	4b2f      	ldr	r3, [pc, #188]	; (25268 <nm_spi_init+0x128>)
   251aa:	0018      	movs	r0, r3
   251ac:	4b2c      	ldr	r3, [pc, #176]	; (25260 <nm_spi_init+0x120>)
   251ae:	4798      	blx	r3
			return 0;
   251b0:	2300      	movs	r3, #0
   251b2:	e047      	b.n	25244 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   251b4:	4b25      	ldr	r3, [pc, #148]	; (2524c <nm_spi_init+0x10c>)
   251b6:	781b      	ldrb	r3, [r3, #0]
   251b8:	2b00      	cmp	r3, #0
   251ba:	d126      	bne.n	2520a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   251bc:	683b      	ldr	r3, [r7, #0]
   251be:	220c      	movs	r2, #12
   251c0:	4393      	bics	r3, r2
   251c2:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   251c4:	683b      	ldr	r3, [r7, #0]
   251c6:	2270      	movs	r2, #112	; 0x70
   251c8:	4393      	bics	r3, r2
   251ca:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   251cc:	683b      	ldr	r3, [r7, #0]
   251ce:	2250      	movs	r2, #80	; 0x50
   251d0:	4313      	orrs	r3, r2
   251d2:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   251d4:	683b      	ldr	r3, [r7, #0]
   251d6:	4a1e      	ldr	r2, [pc, #120]	; (25250 <nm_spi_init+0x110>)
   251d8:	0019      	movs	r1, r3
   251da:	0010      	movs	r0, r2
   251dc:	4b25      	ldr	r3, [pc, #148]	; (25274 <nm_spi_init+0x134>)
   251de:	4798      	blx	r3
   251e0:	1e03      	subs	r3, r0, #0
   251e2:	d10f      	bne.n	25204 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   251e4:	4a24      	ldr	r2, [pc, #144]	; (25278 <nm_spi_init+0x138>)
   251e6:	491c      	ldr	r1, [pc, #112]	; (25258 <nm_spi_init+0x118>)
   251e8:	4b1c      	ldr	r3, [pc, #112]	; (2525c <nm_spi_init+0x11c>)
   251ea:	0018      	movs	r0, r3
   251ec:	4b1c      	ldr	r3, [pc, #112]	; (25260 <nm_spi_init+0x120>)
   251ee:	4798      	blx	r3
   251f0:	4b22      	ldr	r3, [pc, #136]	; (2527c <nm_spi_init+0x13c>)
   251f2:	0018      	movs	r0, r3
   251f4:	4b1a      	ldr	r3, [pc, #104]	; (25260 <nm_spi_init+0x120>)
   251f6:	4798      	blx	r3
   251f8:	4b1b      	ldr	r3, [pc, #108]	; (25268 <nm_spi_init+0x128>)
   251fa:	0018      	movs	r0, r3
   251fc:	4b18      	ldr	r3, [pc, #96]	; (25260 <nm_spi_init+0x120>)
   251fe:	4798      	blx	r3
			return 0;
   25200:	2300      	movs	r3, #0
   25202:	e01f      	b.n	25244 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25204:	4b11      	ldr	r3, [pc, #68]	; (2524c <nm_spi_init+0x10c>)
   25206:	2201      	movs	r2, #1
   25208:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   2520a:	1d3a      	adds	r2, r7, #4
   2520c:	2380      	movs	r3, #128	; 0x80
   2520e:	015b      	lsls	r3, r3, #5
   25210:	0011      	movs	r1, r2
   25212:	0018      	movs	r0, r3
   25214:	4b0f      	ldr	r3, [pc, #60]	; (25254 <nm_spi_init+0x114>)
   25216:	4798      	blx	r3
   25218:	1e03      	subs	r3, r0, #0
   2521a:	d110      	bne.n	2523e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   2521c:	4a18      	ldr	r2, [pc, #96]	; (25280 <nm_spi_init+0x140>)
   2521e:	490e      	ldr	r1, [pc, #56]	; (25258 <nm_spi_init+0x118>)
   25220:	4b0e      	ldr	r3, [pc, #56]	; (2525c <nm_spi_init+0x11c>)
   25222:	0018      	movs	r0, r3
   25224:	4b0e      	ldr	r3, [pc, #56]	; (25260 <nm_spi_init+0x120>)
   25226:	4798      	blx	r3
   25228:	4b16      	ldr	r3, [pc, #88]	; (25284 <nm_spi_init+0x144>)
   2522a:	0018      	movs	r0, r3
   2522c:	4b0c      	ldr	r3, [pc, #48]	; (25260 <nm_spi_init+0x120>)
   2522e:	4798      	blx	r3
   25230:	4b0d      	ldr	r3, [pc, #52]	; (25268 <nm_spi_init+0x128>)
   25232:	0018      	movs	r0, r3
   25234:	4b0a      	ldr	r3, [pc, #40]	; (25260 <nm_spi_init+0x120>)
   25236:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25238:	2306      	movs	r3, #6
   2523a:	425b      	negs	r3, r3
   2523c:	e002      	b.n	25244 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2523e:	4b12      	ldr	r3, [pc, #72]	; (25288 <nm_spi_init+0x148>)
   25240:	4798      	blx	r3


	return M2M_SUCCESS;
   25242:	2300      	movs	r3, #0
}
   25244:	0018      	movs	r0, r3
   25246:	46bd      	mov	sp, r7
   25248:	b002      	add	sp, #8
   2524a:	bd80      	pop	{r7, pc}
   2524c:	200042c0 	.word	0x200042c0
   25250:	0000e824 	.word	0x0000e824
   25254:	00024e39 	.word	0x00024e39
   25258:	0003badc 	.word	0x0003badc
   2525c:	0003b468 	.word	0x0003b468
   25260:	0001e639 	.word	0x0001e639
   25264:	0003b904 	.word	0x0003b904
   25268:	0003b4a8 	.word	0x0003b4a8
   2526c:	000004c3 	.word	0x000004c3
   25270:	0003b954 	.word	0x0003b954
   25274:	00024b41 	.word	0x00024b41
   25278:	000004cd 	.word	0x000004cd
   2527c:	0003b984 	.word	0x0003b984
   25280:	000004d7 	.word	0x000004d7
   25284:	0003b9b8 	.word	0x0003b9b8
   25288:	000250cd 	.word	0x000250cd

0002528c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   2528c:	b580      	push	{r7, lr}
   2528e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   25290:	4b03      	ldr	r3, [pc, #12]	; (252a0 <nm_spi_deinit+0x14>)
   25292:	2200      	movs	r2, #0
   25294:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25296:	2300      	movs	r3, #0
}
   25298:	0018      	movs	r0, r3
   2529a:	46bd      	mov	sp, r7
   2529c:	bd80      	pop	{r7, pc}
   2529e:	46c0      	nop			; (mov r8, r8)
   252a0:	200042c0 	.word	0x200042c0

000252a4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   252a4:	b580      	push	{r7, lr}
   252a6:	b084      	sub	sp, #16
   252a8:	af00      	add	r7, sp, #0
   252aa:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   252ac:	230c      	movs	r3, #12
   252ae:	18fa      	adds	r2, r7, r3
   252b0:	687b      	ldr	r3, [r7, #4]
   252b2:	0011      	movs	r1, r2
   252b4:	0018      	movs	r0, r3
   252b6:	4b03      	ldr	r3, [pc, #12]	; (252c4 <nm_spi_read_reg+0x20>)
   252b8:	4798      	blx	r3

	return u32Val;
   252ba:	68fb      	ldr	r3, [r7, #12]
}
   252bc:	0018      	movs	r0, r3
   252be:	46bd      	mov	sp, r7
   252c0:	b004      	add	sp, #16
   252c2:	bd80      	pop	{r7, pc}
   252c4:	00024e39 	.word	0x00024e39

000252c8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   252c8:	b590      	push	{r4, r7, lr}
   252ca:	b085      	sub	sp, #20
   252cc:	af00      	add	r7, sp, #0
   252ce:	6078      	str	r0, [r7, #4]
   252d0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   252d2:	230f      	movs	r3, #15
   252d4:	18fc      	adds	r4, r7, r3
   252d6:	683a      	ldr	r2, [r7, #0]
   252d8:	687b      	ldr	r3, [r7, #4]
   252da:	0011      	movs	r1, r2
   252dc:	0018      	movs	r0, r3
   252de:	4b0d      	ldr	r3, [pc, #52]	; (25314 <nm_spi_read_reg_with_ret+0x4c>)
   252e0:	4798      	blx	r3
   252e2:	0003      	movs	r3, r0
   252e4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   252e6:	230f      	movs	r3, #15
   252e8:	18fb      	adds	r3, r7, r3
   252ea:	781b      	ldrb	r3, [r3, #0]
   252ec:	b25b      	sxtb	r3, r3
   252ee:	2b01      	cmp	r3, #1
   252f0:	d104      	bne.n	252fc <nm_spi_read_reg_with_ret+0x34>
   252f2:	230f      	movs	r3, #15
   252f4:	18fb      	adds	r3, r7, r3
   252f6:	2200      	movs	r2, #0
   252f8:	701a      	strb	r2, [r3, #0]
   252fa:	e003      	b.n	25304 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   252fc:	230f      	movs	r3, #15
   252fe:	18fb      	adds	r3, r7, r3
   25300:	22fa      	movs	r2, #250	; 0xfa
   25302:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25304:	230f      	movs	r3, #15
   25306:	18fb      	adds	r3, r7, r3
   25308:	781b      	ldrb	r3, [r3, #0]
   2530a:	b25b      	sxtb	r3, r3
}
   2530c:	0018      	movs	r0, r3
   2530e:	46bd      	mov	sp, r7
   25310:	b005      	add	sp, #20
   25312:	bd90      	pop	{r4, r7, pc}
   25314:	00024e39 	.word	0x00024e39

00025318 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25318:	b590      	push	{r4, r7, lr}
   2531a:	b085      	sub	sp, #20
   2531c:	af00      	add	r7, sp, #0
   2531e:	6078      	str	r0, [r7, #4]
   25320:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   25322:	230f      	movs	r3, #15
   25324:	18fc      	adds	r4, r7, r3
   25326:	683a      	ldr	r2, [r7, #0]
   25328:	687b      	ldr	r3, [r7, #4]
   2532a:	0011      	movs	r1, r2
   2532c:	0018      	movs	r0, r3
   2532e:	4b0d      	ldr	r3, [pc, #52]	; (25364 <nm_spi_write_reg+0x4c>)
   25330:	4798      	blx	r3
   25332:	0003      	movs	r3, r0
   25334:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25336:	230f      	movs	r3, #15
   25338:	18fb      	adds	r3, r7, r3
   2533a:	781b      	ldrb	r3, [r3, #0]
   2533c:	b25b      	sxtb	r3, r3
   2533e:	2b01      	cmp	r3, #1
   25340:	d104      	bne.n	2534c <nm_spi_write_reg+0x34>
   25342:	230f      	movs	r3, #15
   25344:	18fb      	adds	r3, r7, r3
   25346:	2200      	movs	r2, #0
   25348:	701a      	strb	r2, [r3, #0]
   2534a:	e003      	b.n	25354 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2534c:	230f      	movs	r3, #15
   2534e:	18fb      	adds	r3, r7, r3
   25350:	22fa      	movs	r2, #250	; 0xfa
   25352:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25354:	230f      	movs	r3, #15
   25356:	18fb      	adds	r3, r7, r3
   25358:	781b      	ldrb	r3, [r3, #0]
   2535a:	b25b      	sxtb	r3, r3
}
   2535c:	0018      	movs	r0, r3
   2535e:	46bd      	mov	sp, r7
   25360:	b005      	add	sp, #20
   25362:	bd90      	pop	{r4, r7, pc}
   25364:	00024b41 	.word	0x00024b41

00025368 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25368:	b590      	push	{r4, r7, lr}
   2536a:	b087      	sub	sp, #28
   2536c:	af00      	add	r7, sp, #0
   2536e:	60f8      	str	r0, [r7, #12]
   25370:	60b9      	str	r1, [r7, #8]
   25372:	1dbb      	adds	r3, r7, #6
   25374:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25376:	2317      	movs	r3, #23
   25378:	18fc      	adds	r4, r7, r3
   2537a:	1dbb      	adds	r3, r7, #6
   2537c:	881a      	ldrh	r2, [r3, #0]
   2537e:	68b9      	ldr	r1, [r7, #8]
   25380:	68fb      	ldr	r3, [r7, #12]
   25382:	0018      	movs	r0, r3
   25384:	4b0d      	ldr	r3, [pc, #52]	; (253bc <nm_spi_read_block+0x54>)
   25386:	4798      	blx	r3
   25388:	0003      	movs	r3, r0
   2538a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2538c:	2317      	movs	r3, #23
   2538e:	18fb      	adds	r3, r7, r3
   25390:	781b      	ldrb	r3, [r3, #0]
   25392:	b25b      	sxtb	r3, r3
   25394:	2b01      	cmp	r3, #1
   25396:	d104      	bne.n	253a2 <nm_spi_read_block+0x3a>
   25398:	2317      	movs	r3, #23
   2539a:	18fb      	adds	r3, r7, r3
   2539c:	2200      	movs	r2, #0
   2539e:	701a      	strb	r2, [r3, #0]
   253a0:	e003      	b.n	253aa <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   253a2:	2317      	movs	r3, #23
   253a4:	18fb      	adds	r3, r7, r3
   253a6:	22fa      	movs	r2, #250	; 0xfa
   253a8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   253aa:	2317      	movs	r3, #23
   253ac:	18fb      	adds	r3, r7, r3
   253ae:	781b      	ldrb	r3, [r3, #0]
   253b0:	b25b      	sxtb	r3, r3
}
   253b2:	0018      	movs	r0, r3
   253b4:	46bd      	mov	sp, r7
   253b6:	b007      	add	sp, #28
   253b8:	bd90      	pop	{r4, r7, pc}
   253ba:	46c0      	nop			; (mov r8, r8)
   253bc:	00024fb1 	.word	0x00024fb1

000253c0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   253c0:	b590      	push	{r4, r7, lr}
   253c2:	b087      	sub	sp, #28
   253c4:	af00      	add	r7, sp, #0
   253c6:	60f8      	str	r0, [r7, #12]
   253c8:	60b9      	str	r1, [r7, #8]
   253ca:	1dbb      	adds	r3, r7, #6
   253cc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   253ce:	2317      	movs	r3, #23
   253d0:	18fc      	adds	r4, r7, r3
   253d2:	1dbb      	adds	r3, r7, #6
   253d4:	881a      	ldrh	r2, [r3, #0]
   253d6:	68b9      	ldr	r1, [r7, #8]
   253d8:	68fb      	ldr	r3, [r7, #12]
   253da:	0018      	movs	r0, r3
   253dc:	4b0d      	ldr	r3, [pc, #52]	; (25414 <nm_spi_write_block+0x54>)
   253de:	4798      	blx	r3
   253e0:	0003      	movs	r3, r0
   253e2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   253e4:	2317      	movs	r3, #23
   253e6:	18fb      	adds	r3, r7, r3
   253e8:	781b      	ldrb	r3, [r3, #0]
   253ea:	b25b      	sxtb	r3, r3
   253ec:	2b01      	cmp	r3, #1
   253ee:	d104      	bne.n	253fa <nm_spi_write_block+0x3a>
   253f0:	2317      	movs	r3, #23
   253f2:	18fb      	adds	r3, r7, r3
   253f4:	2200      	movs	r2, #0
   253f6:	701a      	strb	r2, [r3, #0]
   253f8:	e003      	b.n	25402 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   253fa:	2317      	movs	r3, #23
   253fc:	18fb      	adds	r3, r7, r3
   253fe:	22fa      	movs	r2, #250	; 0xfa
   25400:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25402:	2317      	movs	r3, #23
   25404:	18fb      	adds	r3, r7, r3
   25406:	781b      	ldrb	r3, [r3, #0]
   25408:	b25b      	sxtb	r3, r3
}
   2540a:	0018      	movs	r0, r3
   2540c:	46bd      	mov	sp, r7
   2540e:	b007      	add	sp, #28
   25410:	bd90      	pop	{r4, r7, pc}
   25412:	46c0      	nop			; (mov r8, r8)
   25414:	00024c8d 	.word	0x00024c8d

00025418 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25418:	b590      	push	{r4, r7, lr}
   2541a:	b089      	sub	sp, #36	; 0x24
   2541c:	af00      	add	r7, sp, #0
   2541e:	60b9      	str	r1, [r7, #8]
   25420:	0011      	movs	r1, r2
   25422:	607b      	str	r3, [r7, #4]
   25424:	230f      	movs	r3, #15
   25426:	18fb      	adds	r3, r7, r3
   25428:	1c02      	adds	r2, r0, #0
   2542a:	701a      	strb	r2, [r3, #0]
   2542c:	230e      	movs	r3, #14
   2542e:	18fb      	adds	r3, r7, r3
   25430:	1c0a      	adds	r2, r1, #0
   25432:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25434:	2330      	movs	r3, #48	; 0x30
   25436:	18fb      	adds	r3, r7, r3
   25438:	881b      	ldrh	r3, [r3, #0]
   2543a:	2b00      	cmp	r3, #0
   2543c:	d100      	bne.n	25440 <Socket_ReadSocketData+0x28>
   2543e:	e0d7      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
   25440:	230f      	movs	r3, #15
   25442:	18fb      	adds	r3, r7, r3
   25444:	2200      	movs	r2, #0
   25446:	569a      	ldrsb	r2, [r3, r2]
   25448:	4b6b      	ldr	r3, [pc, #428]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   2544a:	0112      	lsls	r2, r2, #4
   2544c:	58d3      	ldr	r3, [r2, r3]
   2544e:	2b00      	cmp	r3, #0
   25450:	d100      	bne.n	25454 <Socket_ReadSocketData+0x3c>
   25452:	e0cd      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
   25454:	230f      	movs	r3, #15
   25456:	18fb      	adds	r3, r7, r3
   25458:	781b      	ldrb	r3, [r3, #0]
   2545a:	b25b      	sxtb	r3, r3
   2545c:	4a66      	ldr	r2, [pc, #408]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   2545e:	011b      	lsls	r3, r3, #4
   25460:	18d3      	adds	r3, r2, r3
   25462:	3304      	adds	r3, #4
   25464:	881b      	ldrh	r3, [r3, #0]
   25466:	b29b      	uxth	r3, r3
   25468:	2b00      	cmp	r3, #0
   2546a:	d100      	bne.n	2546e <Socket_ReadSocketData+0x56>
   2546c:	e0c0      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
   2546e:	230f      	movs	r3, #15
   25470:	18fb      	adds	r3, r7, r3
   25472:	781b      	ldrb	r3, [r3, #0]
   25474:	b25b      	sxtb	r3, r3
   25476:	4a60      	ldr	r2, [pc, #384]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   25478:	011b      	lsls	r3, r3, #4
   2547a:	18d3      	adds	r3, r2, r3
   2547c:	330a      	adds	r3, #10
   2547e:	781b      	ldrb	r3, [r3, #0]
   25480:	b2db      	uxtb	r3, r3
   25482:	2b01      	cmp	r3, #1
   25484:	d000      	beq.n	25488 <Socket_ReadSocketData+0x70>
   25486:	e0b3      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25488:	687b      	ldr	r3, [r7, #4]
   2548a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   2548c:	68bb      	ldr	r3, [r7, #8]
   2548e:	2230      	movs	r2, #48	; 0x30
   25490:	18ba      	adds	r2, r7, r2
   25492:	8812      	ldrh	r2, [r2, #0]
   25494:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25496:	2319      	movs	r3, #25
   25498:	18fb      	adds	r3, r7, r3
   2549a:	2201      	movs	r2, #1
   2549c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2549e:	231a      	movs	r3, #26
   254a0:	18fb      	adds	r3, r7, r3
   254a2:	2230      	movs	r2, #48	; 0x30
   254a4:	18ba      	adds	r2, r7, r2
   254a6:	8812      	ldrh	r2, [r2, #0]
   254a8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   254aa:	230f      	movs	r3, #15
   254ac:	18fb      	adds	r3, r7, r3
   254ae:	781b      	ldrb	r3, [r3, #0]
   254b0:	b25b      	sxtb	r3, r3
   254b2:	4a51      	ldr	r2, [pc, #324]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   254b4:	011b      	lsls	r3, r3, #4
   254b6:	18d3      	adds	r3, r2, r3
   254b8:	3304      	adds	r3, #4
   254ba:	881b      	ldrh	r3, [r3, #0]
   254bc:	b29b      	uxth	r3, r3
   254be:	221a      	movs	r2, #26
   254c0:	18ba      	adds	r2, r7, r2
   254c2:	8812      	ldrh	r2, [r2, #0]
   254c4:	1ad3      	subs	r3, r2, r3
   254c6:	b29a      	uxth	r2, r3
   254c8:	2316      	movs	r3, #22
   254ca:	18fb      	adds	r3, r7, r3
   254cc:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   254ce:	2316      	movs	r3, #22
   254d0:	18fb      	adds	r3, r7, r3
   254d2:	2200      	movs	r2, #0
   254d4:	5e9b      	ldrsh	r3, [r3, r2]
   254d6:	2b00      	cmp	r3, #0
   254d8:	dd0f      	ble.n	254fa <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   254da:	2319      	movs	r3, #25
   254dc:	18fb      	adds	r3, r7, r3
   254de:	2200      	movs	r2, #0
   254e0:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   254e2:	230f      	movs	r3, #15
   254e4:	18fb      	adds	r3, r7, r3
   254e6:	2200      	movs	r2, #0
   254e8:	569a      	ldrsb	r2, [r3, r2]
   254ea:	231a      	movs	r3, #26
   254ec:	18fb      	adds	r3, r7, r3
   254ee:	4942      	ldr	r1, [pc, #264]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   254f0:	0112      	lsls	r2, r2, #4
   254f2:	188a      	adds	r2, r1, r2
   254f4:	3204      	adds	r2, #4
   254f6:	8812      	ldrh	r2, [r2, #0]
   254f8:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   254fa:	230f      	movs	r3, #15
   254fc:	18fb      	adds	r3, r7, r3
   254fe:	2200      	movs	r2, #0
   25500:	569a      	ldrsb	r2, [r3, r2]
   25502:	4b3d      	ldr	r3, [pc, #244]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   25504:	0112      	lsls	r2, r2, #4
   25506:	58d1      	ldr	r1, [r2, r3]
   25508:	2319      	movs	r3, #25
   2550a:	18fb      	adds	r3, r7, r3
   2550c:	781c      	ldrb	r4, [r3, #0]
   2550e:	231a      	movs	r3, #26
   25510:	18fb      	adds	r3, r7, r3
   25512:	881a      	ldrh	r2, [r3, #0]
   25514:	69f8      	ldr	r0, [r7, #28]
   25516:	0023      	movs	r3, r4
   25518:	4c38      	ldr	r4, [pc, #224]	; (255fc <Socket_ReadSocketData+0x1e4>)
   2551a:	47a0      	blx	r4
   2551c:	1e03      	subs	r3, r0, #0
   2551e:	d14f      	bne.n	255c0 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25520:	230f      	movs	r3, #15
   25522:	18fb      	adds	r3, r7, r3
   25524:	2200      	movs	r2, #0
   25526:	569a      	ldrsb	r2, [r3, r2]
   25528:	4b33      	ldr	r3, [pc, #204]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   2552a:	0112      	lsls	r2, r2, #4
   2552c:	58d2      	ldr	r2, [r2, r3]
   2552e:	68bb      	ldr	r3, [r7, #8]
   25530:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25532:	231a      	movs	r3, #26
   25534:	18fb      	adds	r3, r7, r3
   25536:	2200      	movs	r2, #0
   25538:	5e9a      	ldrsh	r2, [r3, r2]
   2553a:	68bb      	ldr	r3, [r7, #8]
   2553c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   2553e:	68bb      	ldr	r3, [r7, #8]
   25540:	88da      	ldrh	r2, [r3, #6]
   25542:	231a      	movs	r3, #26
   25544:	18fb      	adds	r3, r7, r3
   25546:	881b      	ldrh	r3, [r3, #0]
   25548:	1ad3      	subs	r3, r2, r3
   2554a:	b29a      	uxth	r2, r3
   2554c:	68bb      	ldr	r3, [r7, #8]
   2554e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25550:	4b2b      	ldr	r3, [pc, #172]	; (25600 <Socket_ReadSocketData+0x1e8>)
   25552:	681b      	ldr	r3, [r3, #0]
   25554:	2b00      	cmp	r3, #0
   25556:	d00b      	beq.n	25570 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25558:	4b29      	ldr	r3, [pc, #164]	; (25600 <Socket_ReadSocketData+0x1e8>)
   2555a:	681b      	ldr	r3, [r3, #0]
   2555c:	68bc      	ldr	r4, [r7, #8]
   2555e:	220e      	movs	r2, #14
   25560:	18ba      	adds	r2, r7, r2
   25562:	7811      	ldrb	r1, [r2, #0]
   25564:	220f      	movs	r2, #15
   25566:	18ba      	adds	r2, r7, r2
   25568:	2000      	movs	r0, #0
   2556a:	5610      	ldrsb	r0, [r2, r0]
   2556c:	0022      	movs	r2, r4
   2556e:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25570:	2330      	movs	r3, #48	; 0x30
   25572:	18f9      	adds	r1, r7, r3
   25574:	2330      	movs	r3, #48	; 0x30
   25576:	18fa      	adds	r2, r7, r3
   25578:	231a      	movs	r3, #26
   2557a:	18fb      	adds	r3, r7, r3
   2557c:	8812      	ldrh	r2, [r2, #0]
   2557e:	881b      	ldrh	r3, [r3, #0]
   25580:	1ad3      	subs	r3, r2, r3
   25582:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25584:	231a      	movs	r3, #26
   25586:	18fb      	adds	r3, r7, r3
   25588:	881b      	ldrh	r3, [r3, #0]
   2558a:	69fa      	ldr	r2, [r7, #28]
   2558c:	18d3      	adds	r3, r2, r3
   2558e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25590:	230f      	movs	r3, #15
   25592:	18fb      	adds	r3, r7, r3
   25594:	781b      	ldrb	r3, [r3, #0]
   25596:	b25b      	sxtb	r3, r3
   25598:	4a17      	ldr	r2, [pc, #92]	; (255f8 <Socket_ReadSocketData+0x1e0>)
   2559a:	011b      	lsls	r3, r3, #4
   2559c:	18d3      	adds	r3, r2, r3
   2559e:	330a      	adds	r3, #10
   255a0:	781b      	ldrb	r3, [r3, #0]
   255a2:	b2db      	uxtb	r3, r3
   255a4:	2b00      	cmp	r3, #0
   255a6:	d11c      	bne.n	255e2 <Socket_ReadSocketData+0x1ca>
   255a8:	2330      	movs	r3, #48	; 0x30
   255aa:	18fb      	adds	r3, r7, r3
   255ac:	881b      	ldrh	r3, [r3, #0]
   255ae:	2b00      	cmp	r3, #0
   255b0:	d017      	beq.n	255e2 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   255b2:	2301      	movs	r3, #1
   255b4:	2200      	movs	r2, #0
   255b6:	2100      	movs	r1, #0
   255b8:	2000      	movs	r0, #0
   255ba:	4c10      	ldr	r4, [pc, #64]	; (255fc <Socket_ReadSocketData+0x1e4>)
   255bc:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   255be:	e017      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   255c0:	4b10      	ldr	r3, [pc, #64]	; (25604 <Socket_ReadSocketData+0x1ec>)
   255c2:	0018      	movs	r0, r3
   255c4:	4b10      	ldr	r3, [pc, #64]	; (25608 <Socket_ReadSocketData+0x1f0>)
   255c6:	4798      	blx	r3
   255c8:	2330      	movs	r3, #48	; 0x30
   255ca:	18fb      	adds	r3, r7, r3
   255cc:	881a      	ldrh	r2, [r3, #0]
   255ce:	4b0f      	ldr	r3, [pc, #60]	; (2560c <Socket_ReadSocketData+0x1f4>)
   255d0:	0011      	movs	r1, r2
   255d2:	0018      	movs	r0, r3
   255d4:	4b0c      	ldr	r3, [pc, #48]	; (25608 <Socket_ReadSocketData+0x1f0>)
   255d6:	4798      	blx	r3
   255d8:	4b0d      	ldr	r3, [pc, #52]	; (25610 <Socket_ReadSocketData+0x1f8>)
   255da:	0018      	movs	r0, r3
   255dc:	4b0a      	ldr	r3, [pc, #40]	; (25608 <Socket_ReadSocketData+0x1f0>)
   255de:	4798      	blx	r3
				break;
   255e0:	e006      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   255e2:	2330      	movs	r3, #48	; 0x30
   255e4:	18fb      	adds	r3, r7, r3
   255e6:	881b      	ldrh	r3, [r3, #0]
   255e8:	2b00      	cmp	r3, #0
   255ea:	d000      	beq.n	255ee <Socket_ReadSocketData+0x1d6>
   255ec:	e753      	b.n	25496 <Socket_ReadSocketData+0x7e>
	}
}
   255ee:	e7ff      	b.n	255f0 <Socket_ReadSocketData+0x1d8>
   255f0:	46c0      	nop			; (mov r8, r8)
   255f2:	46bd      	mov	sp, r7
   255f4:	b009      	add	sp, #36	; 0x24
   255f6:	bd90      	pop	{r4, r7, pc}
   255f8:	20005ccc 	.word	0x20005ccc
   255fc:	00021ee9 	.word	0x00021ee9
   25600:	20005d7c 	.word	0x20005d7c
   25604:	0003bae8 	.word	0x0003bae8
   25608:	0001e639 	.word	0x0001e639
   2560c:	0003baf4 	.word	0x0003baf4
   25610:	0003bb08 	.word	0x0003bb08

00025614 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25614:	b590      	push	{r4, r7, lr}
   25616:	b0bb      	sub	sp, #236	; 0xec
   25618:	af02      	add	r7, sp, #8
   2561a:	603a      	str	r2, [r7, #0]
   2561c:	1dfb      	adds	r3, r7, #7
   2561e:	1c02      	adds	r2, r0, #0
   25620:	701a      	strb	r2, [r3, #0]
   25622:	1d3b      	adds	r3, r7, #4
   25624:	1c0a      	adds	r2, r1, #0
   25626:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25628:	1dfb      	adds	r3, r7, #7
   2562a:	781b      	ldrb	r3, [r3, #0]
   2562c:	2b41      	cmp	r3, #65	; 0x41
   2562e:	d003      	beq.n	25638 <m2m_ip_cb+0x24>
   25630:	1dfb      	adds	r3, r7, #7
   25632:	781b      	ldrb	r3, [r3, #0]
   25634:	2b54      	cmp	r3, #84	; 0x54
   25636:	d120      	bne.n	2567a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25638:	23cc      	movs	r3, #204	; 0xcc
   2563a:	18f9      	adds	r1, r7, r3
   2563c:	6838      	ldr	r0, [r7, #0]
   2563e:	2300      	movs	r3, #0
   25640:	2204      	movs	r2, #4
   25642:	4c98      	ldr	r4, [pc, #608]	; (258a4 <m2m_ip_cb+0x290>)
   25644:	47a0      	blx	r4
   25646:	1e03      	subs	r3, r0, #0
   25648:	d000      	beq.n	2564c <m2m_ip_cb+0x38>
   2564a:	e275      	b.n	25b38 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   2564c:	23cc      	movs	r3, #204	; 0xcc
   2564e:	18fb      	adds	r3, r7, r3
   25650:	2201      	movs	r2, #1
   25652:	569a      	ldrsb	r2, [r3, r2]
   25654:	23c8      	movs	r3, #200	; 0xc8
   25656:	18fb      	adds	r3, r7, r3
   25658:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   2565a:	4b93      	ldr	r3, [pc, #588]	; (258a8 <m2m_ip_cb+0x294>)
   2565c:	681b      	ldr	r3, [r3, #0]
   2565e:	2b00      	cmp	r3, #0
   25660:	d100      	bne.n	25664 <m2m_ip_cb+0x50>
   25662:	e269      	b.n	25b38 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25664:	4b90      	ldr	r3, [pc, #576]	; (258a8 <m2m_ip_cb+0x294>)
   25666:	681b      	ldr	r3, [r3, #0]
   25668:	22cc      	movs	r2, #204	; 0xcc
   2566a:	18ba      	adds	r2, r7, r2
   2566c:	2000      	movs	r0, #0
   2566e:	5610      	ldrsb	r0, [r2, r0]
   25670:	22c8      	movs	r2, #200	; 0xc8
   25672:	18ba      	adds	r2, r7, r2
   25674:	2101      	movs	r1, #1
   25676:	4798      	blx	r3
	{
   25678:	e25e      	b.n	25b38 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   2567a:	1dfb      	adds	r3, r7, #7
   2567c:	781b      	ldrb	r3, [r3, #0]
   2567e:	2b42      	cmp	r3, #66	; 0x42
   25680:	d120      	bne.n	256c4 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25682:	23c4      	movs	r3, #196	; 0xc4
   25684:	18f9      	adds	r1, r7, r3
   25686:	6838      	ldr	r0, [r7, #0]
   25688:	2300      	movs	r3, #0
   2568a:	2204      	movs	r2, #4
   2568c:	4c85      	ldr	r4, [pc, #532]	; (258a4 <m2m_ip_cb+0x290>)
   2568e:	47a0      	blx	r4
   25690:	1e03      	subs	r3, r0, #0
   25692:	d000      	beq.n	25696 <m2m_ip_cb+0x82>
   25694:	e257      	b.n	25b46 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25696:	23c4      	movs	r3, #196	; 0xc4
   25698:	18fb      	adds	r3, r7, r3
   2569a:	2201      	movs	r2, #1
   2569c:	569a      	ldrsb	r2, [r3, r2]
   2569e:	23c0      	movs	r3, #192	; 0xc0
   256a0:	18fb      	adds	r3, r7, r3
   256a2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   256a4:	4b80      	ldr	r3, [pc, #512]	; (258a8 <m2m_ip_cb+0x294>)
   256a6:	681b      	ldr	r3, [r3, #0]
   256a8:	2b00      	cmp	r3, #0
   256aa:	d100      	bne.n	256ae <m2m_ip_cb+0x9a>
   256ac:	e24b      	b.n	25b46 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   256ae:	4b7e      	ldr	r3, [pc, #504]	; (258a8 <m2m_ip_cb+0x294>)
   256b0:	681b      	ldr	r3, [r3, #0]
   256b2:	22c4      	movs	r2, #196	; 0xc4
   256b4:	18ba      	adds	r2, r7, r2
   256b6:	2000      	movs	r0, #0
   256b8:	5610      	ldrsb	r0, [r2, r0]
   256ba:	22c0      	movs	r2, #192	; 0xc0
   256bc:	18ba      	adds	r2, r7, r2
   256be:	2102      	movs	r1, #2
   256c0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   256c2:	e240      	b.n	25b46 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   256c4:	1dfb      	adds	r3, r7, #7
   256c6:	781b      	ldrb	r3, [r3, #0]
   256c8:	2b43      	cmp	r3, #67	; 0x43
   256ca:	d000      	beq.n	256ce <m2m_ip_cb+0xba>
   256cc:	e086      	b.n	257dc <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   256ce:	23b4      	movs	r3, #180	; 0xb4
   256d0:	18f9      	adds	r1, r7, r3
   256d2:	6838      	ldr	r0, [r7, #0]
   256d4:	2300      	movs	r3, #0
   256d6:	220c      	movs	r2, #12
   256d8:	4c72      	ldr	r4, [pc, #456]	; (258a4 <m2m_ip_cb+0x290>)
   256da:	47a0      	blx	r4
   256dc:	1e03      	subs	r3, r0, #0
   256de:	d000      	beq.n	256e2 <m2m_ip_cb+0xce>
   256e0:	e231      	b.n	25b46 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   256e2:	23b4      	movs	r3, #180	; 0xb4
   256e4:	18fb      	adds	r3, r7, r3
   256e6:	7a5b      	ldrb	r3, [r3, #9]
   256e8:	b25b      	sxtb	r3, r3
   256ea:	2b00      	cmp	r3, #0
   256ec:	db4f      	blt.n	2578e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   256ee:	23b4      	movs	r3, #180	; 0xb4
   256f0:	18fb      	adds	r3, r7, r3
   256f2:	7a5b      	ldrb	r3, [r3, #9]
   256f4:	b25b      	sxtb	r3, r3
   256f6:	0018      	movs	r0, r3
   256f8:	23b4      	movs	r3, #180	; 0xb4
   256fa:	18fb      	adds	r3, r7, r3
   256fc:	7a1b      	ldrb	r3, [r3, #8]
   256fe:	b25b      	sxtb	r3, r3
   25700:	4a6a      	ldr	r2, [pc, #424]	; (258ac <m2m_ip_cb+0x298>)
   25702:	011b      	lsls	r3, r3, #4
   25704:	18d3      	adds	r3, r2, r3
   25706:	330b      	adds	r3, #11
   25708:	781b      	ldrb	r3, [r3, #0]
   2570a:	b2d9      	uxtb	r1, r3
   2570c:	4a67      	ldr	r2, [pc, #412]	; (258ac <m2m_ip_cb+0x298>)
   2570e:	0103      	lsls	r3, r0, #4
   25710:	18d3      	adds	r3, r2, r3
   25712:	330b      	adds	r3, #11
   25714:	1c0a      	adds	r2, r1, #0
   25716:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25718:	23b4      	movs	r3, #180	; 0xb4
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	7a5b      	ldrb	r3, [r3, #9]
   2571e:	b25b      	sxtb	r3, r3
   25720:	4a62      	ldr	r2, [pc, #392]	; (258ac <m2m_ip_cb+0x298>)
   25722:	011b      	lsls	r3, r3, #4
   25724:	18d3      	adds	r3, r2, r3
   25726:	330a      	adds	r3, #10
   25728:	2201      	movs	r2, #1
   2572a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2572c:	23b4      	movs	r3, #180	; 0xb4
   2572e:	18fb      	adds	r3, r7, r3
   25730:	7a5b      	ldrb	r3, [r3, #9]
   25732:	b25b      	sxtb	r3, r3
   25734:	0018      	movs	r0, r3
   25736:	23b4      	movs	r3, #180	; 0xb4
   25738:	18fb      	adds	r3, r7, r3
   2573a:	895b      	ldrh	r3, [r3, #10]
   2573c:	3b08      	subs	r3, #8
   2573e:	b299      	uxth	r1, r3
   25740:	4a5a      	ldr	r2, [pc, #360]	; (258ac <m2m_ip_cb+0x298>)
   25742:	0103      	lsls	r3, r0, #4
   25744:	18d3      	adds	r3, r2, r3
   25746:	3308      	adds	r3, #8
   25748:	1c0a      	adds	r2, r1, #0
   2574a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   2574c:	4b58      	ldr	r3, [pc, #352]	; (258b0 <m2m_ip_cb+0x29c>)
   2574e:	881b      	ldrh	r3, [r3, #0]
   25750:	b29b      	uxth	r3, r3
   25752:	3301      	adds	r3, #1
   25754:	b29a      	uxth	r2, r3
   25756:	4b56      	ldr	r3, [pc, #344]	; (258b0 <m2m_ip_cb+0x29c>)
   25758:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   2575a:	4b55      	ldr	r3, [pc, #340]	; (258b0 <m2m_ip_cb+0x29c>)
   2575c:	881b      	ldrh	r3, [r3, #0]
   2575e:	b29b      	uxth	r3, r3
   25760:	2b00      	cmp	r3, #0
   25762:	d106      	bne.n	25772 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25764:	4b52      	ldr	r3, [pc, #328]	; (258b0 <m2m_ip_cb+0x29c>)
   25766:	881b      	ldrh	r3, [r3, #0]
   25768:	b29b      	uxth	r3, r3
   2576a:	3301      	adds	r3, #1
   2576c:	b29a      	uxth	r2, r3
   2576e:	4b50      	ldr	r3, [pc, #320]	; (258b0 <m2m_ip_cb+0x29c>)
   25770:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25772:	23b4      	movs	r3, #180	; 0xb4
   25774:	18fb      	adds	r3, r7, r3
   25776:	7a5b      	ldrb	r3, [r3, #9]
   25778:	b25b      	sxtb	r3, r3
   2577a:	0018      	movs	r0, r3
   2577c:	4b4c      	ldr	r3, [pc, #304]	; (258b0 <m2m_ip_cb+0x29c>)
   2577e:	881b      	ldrh	r3, [r3, #0]
   25780:	b299      	uxth	r1, r3
   25782:	4a4a      	ldr	r2, [pc, #296]	; (258ac <m2m_ip_cb+0x298>)
   25784:	0103      	lsls	r3, r0, #4
   25786:	18d3      	adds	r3, r2, r3
   25788:	3306      	adds	r3, #6
   2578a:	1c0a      	adds	r2, r1, #0
   2578c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   2578e:	23b4      	movs	r3, #180	; 0xb4
   25790:	18fb      	adds	r3, r7, r3
   25792:	2209      	movs	r2, #9
   25794:	569a      	ldrsb	r2, [r3, r2]
   25796:	23a0      	movs	r3, #160	; 0xa0
   25798:	18fb      	adds	r3, r7, r3
   2579a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   2579c:	23a0      	movs	r3, #160	; 0xa0
   2579e:	18fb      	adds	r3, r7, r3
   257a0:	2202      	movs	r2, #2
   257a2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   257a4:	23b4      	movs	r3, #180	; 0xb4
   257a6:	18fb      	adds	r3, r7, r3
   257a8:	885a      	ldrh	r2, [r3, #2]
   257aa:	23a0      	movs	r3, #160	; 0xa0
   257ac:	18fb      	adds	r3, r7, r3
   257ae:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   257b0:	23b4      	movs	r3, #180	; 0xb4
   257b2:	18fb      	adds	r3, r7, r3
   257b4:	685a      	ldr	r2, [r3, #4]
   257b6:	23a0      	movs	r3, #160	; 0xa0
   257b8:	18fb      	adds	r3, r7, r3
   257ba:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   257bc:	4b3a      	ldr	r3, [pc, #232]	; (258a8 <m2m_ip_cb+0x294>)
   257be:	681b      	ldr	r3, [r3, #0]
   257c0:	2b00      	cmp	r3, #0
   257c2:	d100      	bne.n	257c6 <m2m_ip_cb+0x1b2>
   257c4:	e1bf      	b.n	25b46 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   257c6:	4b38      	ldr	r3, [pc, #224]	; (258a8 <m2m_ip_cb+0x294>)
   257c8:	681b      	ldr	r3, [r3, #0]
   257ca:	22b4      	movs	r2, #180	; 0xb4
   257cc:	18ba      	adds	r2, r7, r2
   257ce:	2008      	movs	r0, #8
   257d0:	5610      	ldrsb	r0, [r2, r0]
   257d2:	22a0      	movs	r2, #160	; 0xa0
   257d4:	18ba      	adds	r2, r7, r2
   257d6:	2104      	movs	r1, #4
   257d8:	4798      	blx	r3
}
   257da:	e1b4      	b.n	25b46 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   257dc:	1dfb      	adds	r3, r7, #7
   257de:	781b      	ldrb	r3, [r3, #0]
   257e0:	2b44      	cmp	r3, #68	; 0x44
   257e2:	d003      	beq.n	257ec <m2m_ip_cb+0x1d8>
   257e4:	1dfb      	adds	r3, r7, #7
   257e6:	781b      	ldrb	r3, [r3, #0]
   257e8:	2b4b      	cmp	r3, #75	; 0x4b
   257ea:	d13d      	bne.n	25868 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   257ec:	239c      	movs	r3, #156	; 0x9c
   257ee:	18f9      	adds	r1, r7, r3
   257f0:	6838      	ldr	r0, [r7, #0]
   257f2:	2300      	movs	r3, #0
   257f4:	2204      	movs	r2, #4
   257f6:	4c2b      	ldr	r4, [pc, #172]	; (258a4 <m2m_ip_cb+0x290>)
   257f8:	47a0      	blx	r4
   257fa:	1e03      	subs	r3, r0, #0
   257fc:	d000      	beq.n	25800 <m2m_ip_cb+0x1ec>
   257fe:	e19d      	b.n	25b3c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25800:	239c      	movs	r3, #156	; 0x9c
   25802:	18fb      	adds	r3, r7, r3
   25804:	2200      	movs	r2, #0
   25806:	569a      	ldrsb	r2, [r3, r2]
   25808:	2398      	movs	r3, #152	; 0x98
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2580e:	239c      	movs	r3, #156	; 0x9c
   25810:	18fb      	adds	r3, r7, r3
   25812:	2201      	movs	r2, #1
   25814:	569a      	ldrsb	r2, [r3, r2]
   25816:	2398      	movs	r3, #152	; 0x98
   25818:	18fb      	adds	r3, r7, r3
   2581a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   2581c:	239c      	movs	r3, #156	; 0x9c
   2581e:	18fb      	adds	r3, r7, r3
   25820:	785b      	ldrb	r3, [r3, #1]
   25822:	b25b      	sxtb	r3, r3
   25824:	2b00      	cmp	r3, #0
   25826:	d10f      	bne.n	25848 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25828:	239c      	movs	r3, #156	; 0x9c
   2582a:	18fb      	adds	r3, r7, r3
   2582c:	781b      	ldrb	r3, [r3, #0]
   2582e:	b25b      	sxtb	r3, r3
   25830:	0018      	movs	r0, r3
   25832:	239c      	movs	r3, #156	; 0x9c
   25834:	18fb      	adds	r3, r7, r3
   25836:	885b      	ldrh	r3, [r3, #2]
   25838:	3b08      	subs	r3, #8
   2583a:	b299      	uxth	r1, r3
   2583c:	4a1b      	ldr	r2, [pc, #108]	; (258ac <m2m_ip_cb+0x298>)
   2583e:	0103      	lsls	r3, r0, #4
   25840:	18d3      	adds	r3, r2, r3
   25842:	3308      	adds	r3, #8
   25844:	1c0a      	adds	r2, r1, #0
   25846:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25848:	4b17      	ldr	r3, [pc, #92]	; (258a8 <m2m_ip_cb+0x294>)
   2584a:	681b      	ldr	r3, [r3, #0]
   2584c:	2b00      	cmp	r3, #0
   2584e:	d100      	bne.n	25852 <m2m_ip_cb+0x23e>
   25850:	e174      	b.n	25b3c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25852:	4b15      	ldr	r3, [pc, #84]	; (258a8 <m2m_ip_cb+0x294>)
   25854:	681b      	ldr	r3, [r3, #0]
   25856:	229c      	movs	r2, #156	; 0x9c
   25858:	18ba      	adds	r2, r7, r2
   2585a:	2000      	movs	r0, #0
   2585c:	5610      	ldrsb	r0, [r2, r0]
   2585e:	2298      	movs	r2, #152	; 0x98
   25860:	18ba      	adds	r2, r7, r2
   25862:	2105      	movs	r1, #5
   25864:	4798      	blx	r3
	{
   25866:	e169      	b.n	25b3c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25868:	1dfb      	adds	r3, r7, #7
   2586a:	781b      	ldrb	r3, [r3, #0]
   2586c:	2b4a      	cmp	r3, #74	; 0x4a
   2586e:	d123      	bne.n	258b8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25870:	230c      	movs	r3, #12
   25872:	18f9      	adds	r1, r7, r3
   25874:	6838      	ldr	r0, [r7, #0]
   25876:	2300      	movs	r3, #0
   25878:	2244      	movs	r2, #68	; 0x44
   2587a:	4c0a      	ldr	r4, [pc, #40]	; (258a4 <m2m_ip_cb+0x290>)
   2587c:	47a0      	blx	r4
   2587e:	1e03      	subs	r3, r0, #0
   25880:	d000      	beq.n	25884 <m2m_ip_cb+0x270>
   25882:	e160      	b.n	25b46 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25884:	4b0b      	ldr	r3, [pc, #44]	; (258b4 <m2m_ip_cb+0x2a0>)
   25886:	681b      	ldr	r3, [r3, #0]
   25888:	2b00      	cmp	r3, #0
   2588a:	d100      	bne.n	2588e <m2m_ip_cb+0x27a>
   2588c:	e15b      	b.n	25b46 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   2588e:	4b09      	ldr	r3, [pc, #36]	; (258b4 <m2m_ip_cb+0x2a0>)
   25890:	681a      	ldr	r2, [r3, #0]
   25892:	230c      	movs	r3, #12
   25894:	18fb      	adds	r3, r7, r3
   25896:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25898:	230c      	movs	r3, #12
   2589a:	18fb      	adds	r3, r7, r3
   2589c:	0018      	movs	r0, r3
   2589e:	4790      	blx	r2
}
   258a0:	e151      	b.n	25b46 <m2m_ip_cb+0x532>
   258a2:	46c0      	nop			; (mov r8, r8)
   258a4:	00021ee9 	.word	0x00021ee9
   258a8:	20005d7c 	.word	0x20005d7c
   258ac:	20005ccc 	.word	0x20005ccc
   258b0:	200042c2 	.word	0x200042c2
   258b4:	20005d84 	.word	0x20005d84
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   258b8:	1dfb      	adds	r3, r7, #7
   258ba:	781b      	ldrb	r3, [r3, #0]
   258bc:	2b46      	cmp	r3, #70	; 0x46
   258be:	d008      	beq.n	258d2 <m2m_ip_cb+0x2be>
   258c0:	1dfb      	adds	r3, r7, #7
   258c2:	781b      	ldrb	r3, [r3, #0]
   258c4:	2b48      	cmp	r3, #72	; 0x48
   258c6:	d004      	beq.n	258d2 <m2m_ip_cb+0x2be>
   258c8:	1dfb      	adds	r3, r7, #7
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	2b4d      	cmp	r3, #77	; 0x4d
   258ce:	d000      	beq.n	258d2 <m2m_ip_cb+0x2be>
   258d0:	e0b4      	b.n	25a3c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   258d2:	23df      	movs	r3, #223	; 0xdf
   258d4:	18fb      	adds	r3, r7, r3
   258d6:	2206      	movs	r2, #6
   258d8:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   258da:	1dfb      	adds	r3, r7, #7
   258dc:	781b      	ldrb	r3, [r3, #0]
   258de:	2b48      	cmp	r3, #72	; 0x48
   258e0:	d103      	bne.n	258ea <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   258e2:	23df      	movs	r3, #223	; 0xdf
   258e4:	18fb      	adds	r3, r7, r3
   258e6:	2209      	movs	r2, #9
   258e8:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   258ea:	23d8      	movs	r3, #216	; 0xd8
   258ec:	18fb      	adds	r3, r7, r3
   258ee:	2210      	movs	r2, #16
   258f0:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   258f2:	23d8      	movs	r3, #216	; 0xd8
   258f4:	18fb      	adds	r3, r7, r3
   258f6:	881a      	ldrh	r2, [r3, #0]
   258f8:	2388      	movs	r3, #136	; 0x88
   258fa:	18f9      	adds	r1, r7, r3
   258fc:	6838      	ldr	r0, [r7, #0]
   258fe:	2300      	movs	r3, #0
   25900:	4c93      	ldr	r4, [pc, #588]	; (25b50 <m2m_ip_cb+0x53c>)
   25902:	47a0      	blx	r4
   25904:	1e03      	subs	r3, r0, #0
   25906:	d000      	beq.n	2590a <m2m_ip_cb+0x2f6>
   25908:	e11a      	b.n	25b40 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2590a:	23d6      	movs	r3, #214	; 0xd6
   2590c:	18fb      	adds	r3, r7, r3
   2590e:	2200      	movs	r2, #0
   25910:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25912:	23d5      	movs	r3, #213	; 0xd5
   25914:	18fb      	adds	r3, r7, r3
   25916:	2288      	movs	r2, #136	; 0x88
   25918:	18ba      	adds	r2, r7, r2
   2591a:	7b12      	ldrb	r2, [r2, #12]
   2591c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2591e:	23d6      	movs	r3, #214	; 0xd6
   25920:	18fb      	adds	r3, r7, r3
   25922:	2288      	movs	r2, #136	; 0x88
   25924:	18ba      	adds	r2, r7, r2
   25926:	89d2      	ldrh	r2, [r2, #14]
   25928:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2592a:	23d5      	movs	r3, #213	; 0xd5
   2592c:	18fb      	adds	r3, r7, r3
   2592e:	781b      	ldrb	r3, [r3, #0]
   25930:	b25b      	sxtb	r3, r3
   25932:	4a88      	ldr	r2, [pc, #544]	; (25b54 <m2m_ip_cb+0x540>)
   25934:	011b      	lsls	r3, r3, #4
   25936:	18d3      	adds	r3, r2, r3
   25938:	330c      	adds	r3, #12
   2593a:	2200      	movs	r2, #0
   2593c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2593e:	23d2      	movs	r3, #210	; 0xd2
   25940:	18fb      	adds	r3, r7, r3
   25942:	2288      	movs	r2, #136	; 0x88
   25944:	18ba      	adds	r2, r7, r2
   25946:	8912      	ldrh	r2, [r2, #8]
   25948:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2594a:	23d0      	movs	r3, #208	; 0xd0
   2594c:	18fb      	adds	r3, r7, r3
   2594e:	2288      	movs	r2, #136	; 0x88
   25950:	18ba      	adds	r2, r7, r2
   25952:	8952      	ldrh	r2, [r2, #10]
   25954:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25956:	2388      	movs	r3, #136	; 0x88
   25958:	18fb      	adds	r3, r7, r3
   2595a:	885a      	ldrh	r2, [r3, #2]
   2595c:	2370      	movs	r3, #112	; 0x70
   2595e:	18fb      	adds	r3, r7, r3
   25960:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25962:	2388      	movs	r3, #136	; 0x88
   25964:	18fb      	adds	r3, r7, r3
   25966:	685a      	ldr	r2, [r3, #4]
   25968:	2370      	movs	r3, #112	; 0x70
   2596a:	18fb      	adds	r3, r7, r3
   2596c:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2596e:	23d5      	movs	r3, #213	; 0xd5
   25970:	18fb      	adds	r3, r7, r3
   25972:	781b      	ldrb	r3, [r3, #0]
   25974:	b25b      	sxtb	r3, r3
   25976:	4a77      	ldr	r2, [pc, #476]	; (25b54 <m2m_ip_cb+0x540>)
   25978:	011b      	lsls	r3, r3, #4
   2597a:	18d3      	adds	r3, r2, r3
   2597c:	3306      	adds	r3, #6
   2597e:	881b      	ldrh	r3, [r3, #0]
   25980:	b29b      	uxth	r3, r3
   25982:	22d6      	movs	r2, #214	; 0xd6
   25984:	18ba      	adds	r2, r7, r2
   25986:	8812      	ldrh	r2, [r2, #0]
   25988:	429a      	cmp	r2, r3
   2598a:	d148      	bne.n	25a1e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   2598c:	23d2      	movs	r3, #210	; 0xd2
   2598e:	18fb      	adds	r3, r7, r3
   25990:	2200      	movs	r2, #0
   25992:	5e9b      	ldrsh	r3, [r3, r2]
   25994:	2b00      	cmp	r3, #0
   25996:	dd25      	ble.n	259e4 <m2m_ip_cb+0x3d0>
   25998:	23d2      	movs	r3, #210	; 0xd2
   2599a:	18fb      	adds	r3, r7, r3
   2599c:	2200      	movs	r2, #0
   2599e:	5e9a      	ldrsh	r2, [r3, r2]
   259a0:	1d3b      	adds	r3, r7, #4
   259a2:	881b      	ldrh	r3, [r3, #0]
   259a4:	429a      	cmp	r2, r3
   259a6:	da1d      	bge.n	259e4 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   259a8:	23d0      	movs	r3, #208	; 0xd0
   259aa:	18fb      	adds	r3, r7, r3
   259ac:	881b      	ldrh	r3, [r3, #0]
   259ae:	683a      	ldr	r2, [r7, #0]
   259b0:	18d3      	adds	r3, r2, r3
   259b2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   259b4:	23d8      	movs	r3, #216	; 0xd8
   259b6:	18fb      	adds	r3, r7, r3
   259b8:	22d2      	movs	r2, #210	; 0xd2
   259ba:	18ba      	adds	r2, r7, r2
   259bc:	8812      	ldrh	r2, [r2, #0]
   259be:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   259c0:	683c      	ldr	r4, [r7, #0]
   259c2:	23df      	movs	r3, #223	; 0xdf
   259c4:	18fb      	adds	r3, r7, r3
   259c6:	781a      	ldrb	r2, [r3, #0]
   259c8:	2370      	movs	r3, #112	; 0x70
   259ca:	18f9      	adds	r1, r7, r3
   259cc:	23d5      	movs	r3, #213	; 0xd5
   259ce:	18fb      	adds	r3, r7, r3
   259d0:	2000      	movs	r0, #0
   259d2:	5618      	ldrsb	r0, [r3, r0]
   259d4:	23d8      	movs	r3, #216	; 0xd8
   259d6:	18fb      	adds	r3, r7, r3
   259d8:	881b      	ldrh	r3, [r3, #0]
   259da:	9300      	str	r3, [sp, #0]
   259dc:	0023      	movs	r3, r4
   259de:	4c5e      	ldr	r4, [pc, #376]	; (25b58 <m2m_ip_cb+0x544>)
   259e0:	47a0      	blx	r4
	{
   259e2:	e0ad      	b.n	25b40 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   259e4:	2370      	movs	r3, #112	; 0x70
   259e6:	18fb      	adds	r3, r7, r3
   259e8:	22d2      	movs	r2, #210	; 0xd2
   259ea:	18ba      	adds	r2, r7, r2
   259ec:	8812      	ldrh	r2, [r2, #0]
   259ee:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   259f0:	2370      	movs	r3, #112	; 0x70
   259f2:	18fb      	adds	r3, r7, r3
   259f4:	2200      	movs	r2, #0
   259f6:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   259f8:	4b58      	ldr	r3, [pc, #352]	; (25b5c <m2m_ip_cb+0x548>)
   259fa:	681b      	ldr	r3, [r3, #0]
   259fc:	2b00      	cmp	r3, #0
   259fe:	d100      	bne.n	25a02 <m2m_ip_cb+0x3ee>
   25a00:	e09e      	b.n	25b40 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25a02:	4b56      	ldr	r3, [pc, #344]	; (25b5c <m2m_ip_cb+0x548>)
   25a04:	681b      	ldr	r3, [r3, #0]
   25a06:	2270      	movs	r2, #112	; 0x70
   25a08:	18bc      	adds	r4, r7, r2
   25a0a:	22df      	movs	r2, #223	; 0xdf
   25a0c:	18ba      	adds	r2, r7, r2
   25a0e:	7811      	ldrb	r1, [r2, #0]
   25a10:	22d5      	movs	r2, #213	; 0xd5
   25a12:	18ba      	adds	r2, r7, r2
   25a14:	2000      	movs	r0, #0
   25a16:	5610      	ldrsb	r0, [r2, r0]
   25a18:	0022      	movs	r2, r4
   25a1a:	4798      	blx	r3
	{
   25a1c:	e090      	b.n	25b40 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25a1e:	23d8      	movs	r3, #216	; 0xd8
   25a20:	18fa      	adds	r2, r7, r3
   25a22:	1d3b      	adds	r3, r7, #4
   25a24:	8812      	ldrh	r2, [r2, #0]
   25a26:	881b      	ldrh	r3, [r3, #0]
   25a28:	429a      	cmp	r2, r3
   25a2a:	d300      	bcc.n	25a2e <m2m_ip_cb+0x41a>
   25a2c:	e088      	b.n	25b40 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25a2e:	2301      	movs	r3, #1
   25a30:	2200      	movs	r2, #0
   25a32:	2100      	movs	r1, #0
   25a34:	2000      	movs	r0, #0
   25a36:	4c46      	ldr	r4, [pc, #280]	; (25b50 <m2m_ip_cb+0x53c>)
   25a38:	47a0      	blx	r4
	{
   25a3a:	e081      	b.n	25b40 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25a3c:	1dfb      	adds	r3, r7, #7
   25a3e:	781b      	ldrb	r3, [r3, #0]
   25a40:	2b45      	cmp	r3, #69	; 0x45
   25a42:	d007      	beq.n	25a54 <m2m_ip_cb+0x440>
   25a44:	1dfb      	adds	r3, r7, #7
   25a46:	781b      	ldrb	r3, [r3, #0]
   25a48:	2b47      	cmp	r3, #71	; 0x47
   25a4a:	d003      	beq.n	25a54 <m2m_ip_cb+0x440>
   25a4c:	1dfb      	adds	r3, r7, #7
   25a4e:	781b      	ldrb	r3, [r3, #0]
   25a50:	2b4c      	cmp	r3, #76	; 0x4c
   25a52:	d14c      	bne.n	25aee <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25a54:	23de      	movs	r3, #222	; 0xde
   25a56:	18fb      	adds	r3, r7, r3
   25a58:	2207      	movs	r2, #7
   25a5a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25a5c:	1dfb      	adds	r3, r7, #7
   25a5e:	781b      	ldrb	r3, [r3, #0]
   25a60:	2b47      	cmp	r3, #71	; 0x47
   25a62:	d103      	bne.n	25a6c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25a64:	23de      	movs	r3, #222	; 0xde
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	2208      	movs	r2, #8
   25a6a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25a6c:	2364      	movs	r3, #100	; 0x64
   25a6e:	18f9      	adds	r1, r7, r3
   25a70:	6838      	ldr	r0, [r7, #0]
   25a72:	2300      	movs	r3, #0
   25a74:	2208      	movs	r2, #8
   25a76:	4c36      	ldr	r4, [pc, #216]	; (25b50 <m2m_ip_cb+0x53c>)
   25a78:	47a0      	blx	r4
   25a7a:	1e03      	subs	r3, r0, #0
   25a7c:	d162      	bne.n	25b44 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25a7e:	23dc      	movs	r3, #220	; 0xdc
   25a80:	18fb      	adds	r3, r7, r3
   25a82:	2200      	movs	r2, #0
   25a84:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25a86:	23db      	movs	r3, #219	; 0xdb
   25a88:	18fb      	adds	r3, r7, r3
   25a8a:	2264      	movs	r2, #100	; 0x64
   25a8c:	18ba      	adds	r2, r7, r2
   25a8e:	7812      	ldrb	r2, [r2, #0]
   25a90:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   25a92:	23dc      	movs	r3, #220	; 0xdc
   25a94:	18fb      	adds	r3, r7, r3
   25a96:	2264      	movs	r2, #100	; 0x64
   25a98:	18ba      	adds	r2, r7, r2
   25a9a:	8892      	ldrh	r2, [r2, #4]
   25a9c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25a9e:	2364      	movs	r3, #100	; 0x64
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	2202      	movs	r2, #2
   25aa4:	5e9a      	ldrsh	r2, [r3, r2]
   25aa6:	236e      	movs	r3, #110	; 0x6e
   25aa8:	18fb      	adds	r3, r7, r3
   25aaa:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25aac:	23db      	movs	r3, #219	; 0xdb
   25aae:	18fb      	adds	r3, r7, r3
   25ab0:	781b      	ldrb	r3, [r3, #0]
   25ab2:	b25b      	sxtb	r3, r3
   25ab4:	4a27      	ldr	r2, [pc, #156]	; (25b54 <m2m_ip_cb+0x540>)
   25ab6:	011b      	lsls	r3, r3, #4
   25ab8:	18d3      	adds	r3, r2, r3
   25aba:	3306      	adds	r3, #6
   25abc:	881b      	ldrh	r3, [r3, #0]
   25abe:	b29b      	uxth	r3, r3
   25ac0:	22dc      	movs	r2, #220	; 0xdc
   25ac2:	18ba      	adds	r2, r7, r2
   25ac4:	8812      	ldrh	r2, [r2, #0]
   25ac6:	429a      	cmp	r2, r3
   25ac8:	d13c      	bne.n	25b44 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25aca:	4b24      	ldr	r3, [pc, #144]	; (25b5c <m2m_ip_cb+0x548>)
   25acc:	681b      	ldr	r3, [r3, #0]
   25ace:	2b00      	cmp	r3, #0
   25ad0:	d038      	beq.n	25b44 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   25ad2:	4b22      	ldr	r3, [pc, #136]	; (25b5c <m2m_ip_cb+0x548>)
   25ad4:	681b      	ldr	r3, [r3, #0]
   25ad6:	226e      	movs	r2, #110	; 0x6e
   25ad8:	18bc      	adds	r4, r7, r2
   25ada:	22de      	movs	r2, #222	; 0xde
   25adc:	18ba      	adds	r2, r7, r2
   25ade:	7811      	ldrb	r1, [r2, #0]
   25ae0:	22db      	movs	r2, #219	; 0xdb
   25ae2:	18ba      	adds	r2, r7, r2
   25ae4:	2000      	movs	r0, #0
   25ae6:	5610      	ldrsb	r0, [r2, r0]
   25ae8:	0022      	movs	r2, r4
   25aea:	4798      	blx	r3
	{
   25aec:	e02a      	b.n	25b44 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   25aee:	1dfb      	adds	r3, r7, #7
   25af0:	781b      	ldrb	r3, [r3, #0]
   25af2:	2b52      	cmp	r3, #82	; 0x52
   25af4:	d127      	bne.n	25b46 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25af6:	2350      	movs	r3, #80	; 0x50
   25af8:	18f9      	adds	r1, r7, r3
   25afa:	6838      	ldr	r0, [r7, #0]
   25afc:	2301      	movs	r3, #1
   25afe:	2214      	movs	r2, #20
   25b00:	4c13      	ldr	r4, [pc, #76]	; (25b50 <m2m_ip_cb+0x53c>)
   25b02:	47a0      	blx	r4
   25b04:	1e03      	subs	r3, r0, #0
   25b06:	d11e      	bne.n	25b46 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25b08:	2350      	movs	r3, #80	; 0x50
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	685b      	ldr	r3, [r3, #4]
   25b0e:	001a      	movs	r2, r3
   25b10:	4b13      	ldr	r3, [pc, #76]	; (25b60 <m2m_ip_cb+0x54c>)
   25b12:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25b14:	4b12      	ldr	r3, [pc, #72]	; (25b60 <m2m_ip_cb+0x54c>)
   25b16:	681b      	ldr	r3, [r3, #0]
   25b18:	2b00      	cmp	r3, #0
   25b1a:	d014      	beq.n	25b46 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25b1c:	4b10      	ldr	r3, [pc, #64]	; (25b60 <m2m_ip_cb+0x54c>)
   25b1e:	681c      	ldr	r4, [r3, #0]
   25b20:	2350      	movs	r3, #80	; 0x50
   25b22:	18fb      	adds	r3, r7, r3
   25b24:	6818      	ldr	r0, [r3, #0]
   25b26:	2350      	movs	r3, #80	; 0x50
   25b28:	18fb      	adds	r3, r7, r3
   25b2a:	6899      	ldr	r1, [r3, #8]
   25b2c:	2350      	movs	r3, #80	; 0x50
   25b2e:	18fb      	adds	r3, r7, r3
   25b30:	7c1b      	ldrb	r3, [r3, #16]
   25b32:	001a      	movs	r2, r3
   25b34:	47a0      	blx	r4
}
   25b36:	e006      	b.n	25b46 <m2m_ip_cb+0x532>
	{
   25b38:	46c0      	nop			; (mov r8, r8)
   25b3a:	e004      	b.n	25b46 <m2m_ip_cb+0x532>
	{
   25b3c:	46c0      	nop			; (mov r8, r8)
   25b3e:	e002      	b.n	25b46 <m2m_ip_cb+0x532>
	{
   25b40:	46c0      	nop			; (mov r8, r8)
   25b42:	e000      	b.n	25b46 <m2m_ip_cb+0x532>
	{
   25b44:	46c0      	nop			; (mov r8, r8)
}
   25b46:	46c0      	nop			; (mov r8, r8)
   25b48:	46bd      	mov	sp, r7
   25b4a:	b039      	add	sp, #228	; 0xe4
   25b4c:	bd90      	pop	{r4, r7, pc}
   25b4e:	46c0      	nop			; (mov r8, r8)
   25b50:	00021ee9 	.word	0x00021ee9
   25b54:	20005ccc 	.word	0x20005ccc
   25b58:	00025419 	.word	0x00025419
   25b5c:	20005d7c 	.word	0x20005d7c
   25b60:	20005d80 	.word	0x20005d80

00025b64 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   25b64:	b580      	push	{r7, lr}
   25b66:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25b68:	4b0c      	ldr	r3, [pc, #48]	; (25b9c <socketInit+0x38>)
   25b6a:	781b      	ldrb	r3, [r3, #0]
   25b6c:	b2db      	uxtb	r3, r3
   25b6e:	2b00      	cmp	r3, #0
   25b70:	d110      	bne.n	25b94 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25b72:	4b0b      	ldr	r3, [pc, #44]	; (25ba0 <socketInit+0x3c>)
   25b74:	22b0      	movs	r2, #176	; 0xb0
   25b76:	2100      	movs	r1, #0
   25b78:	0018      	movs	r0, r3
   25b7a:	4b0a      	ldr	r3, [pc, #40]	; (25ba4 <socketInit+0x40>)
   25b7c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   25b7e:	4b0a      	ldr	r3, [pc, #40]	; (25ba8 <socketInit+0x44>)
   25b80:	0019      	movs	r1, r3
   25b82:	2002      	movs	r0, #2
   25b84:	4b09      	ldr	r3, [pc, #36]	; (25bac <socketInit+0x48>)
   25b86:	4798      	blx	r3
		gbSocketInit	= 1;
   25b88:	4b04      	ldr	r3, [pc, #16]	; (25b9c <socketInit+0x38>)
   25b8a:	2201      	movs	r2, #1
   25b8c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   25b8e:	4b08      	ldr	r3, [pc, #32]	; (25bb0 <socketInit+0x4c>)
   25b90:	2200      	movs	r2, #0
   25b92:	801a      	strh	r2, [r3, #0]
	}
}
   25b94:	46c0      	nop			; (mov r8, r8)
   25b96:	46bd      	mov	sp, r7
   25b98:	bd80      	pop	{r7, pc}
   25b9a:	46c0      	nop			; (mov r8, r8)
   25b9c:	200042c4 	.word	0x200042c4
   25ba0:	20005ccc 	.word	0x20005ccc
   25ba4:	0002136d 	.word	0x0002136d
   25ba8:	00025615 	.word	0x00025615
   25bac:	00022069 	.word	0x00022069
   25bb0:	200042c2 	.word	0x200042c2

00025bb4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   25bb4:	b580      	push	{r7, lr}
   25bb6:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25bb8:	4b0a      	ldr	r3, [pc, #40]	; (25be4 <socketDeinit+0x30>)
   25bba:	22b0      	movs	r2, #176	; 0xb0
   25bbc:	2100      	movs	r1, #0
   25bbe:	0018      	movs	r0, r3
   25bc0:	4b09      	ldr	r3, [pc, #36]	; (25be8 <socketDeinit+0x34>)
   25bc2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   25bc4:	2100      	movs	r1, #0
   25bc6:	2002      	movs	r0, #2
   25bc8:	4b08      	ldr	r3, [pc, #32]	; (25bec <socketDeinit+0x38>)
   25bca:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   25bcc:	4b08      	ldr	r3, [pc, #32]	; (25bf0 <socketDeinit+0x3c>)
   25bce:	2200      	movs	r2, #0
   25bd0:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   25bd2:	4b08      	ldr	r3, [pc, #32]	; (25bf4 <socketDeinit+0x40>)
   25bd4:	2200      	movs	r2, #0
   25bd6:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   25bd8:	4b07      	ldr	r3, [pc, #28]	; (25bf8 <socketDeinit+0x44>)
   25bda:	2200      	movs	r2, #0
   25bdc:	701a      	strb	r2, [r3, #0]
}
   25bde:	46c0      	nop			; (mov r8, r8)
   25be0:	46bd      	mov	sp, r7
   25be2:	bd80      	pop	{r7, pc}
   25be4:	20005ccc 	.word	0x20005ccc
   25be8:	0002136d 	.word	0x0002136d
   25bec:	00022069 	.word	0x00022069
   25bf0:	20005d7c 	.word	0x20005d7c
   25bf4:	20005d84 	.word	0x20005d84
   25bf8:	200042c4 	.word	0x200042c4

00025bfc <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   25bfc:	b580      	push	{r7, lr}
   25bfe:	b082      	sub	sp, #8
   25c00:	af00      	add	r7, sp, #0
   25c02:	6078      	str	r0, [r7, #4]
   25c04:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   25c06:	4b05      	ldr	r3, [pc, #20]	; (25c1c <registerSocketCallback+0x20>)
   25c08:	687a      	ldr	r2, [r7, #4]
   25c0a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   25c0c:	4b04      	ldr	r3, [pc, #16]	; (25c20 <registerSocketCallback+0x24>)
   25c0e:	683a      	ldr	r2, [r7, #0]
   25c10:	601a      	str	r2, [r3, #0]
}
   25c12:	46c0      	nop			; (mov r8, r8)
   25c14:	46bd      	mov	sp, r7
   25c16:	b002      	add	sp, #8
   25c18:	bd80      	pop	{r7, pc}
   25c1a:	46c0      	nop			; (mov r8, r8)
   25c1c:	20005d7c 	.word	0x20005d7c
   25c20:	20005d84 	.word	0x20005d84

00025c24 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   25c24:	b590      	push	{r4, r7, lr}
   25c26:	b08d      	sub	sp, #52	; 0x34
   25c28:	af04      	add	r7, sp, #16
   25c2a:	0004      	movs	r4, r0
   25c2c:	0008      	movs	r0, r1
   25c2e:	0011      	movs	r1, r2
   25c30:	1dbb      	adds	r3, r7, #6
   25c32:	1c22      	adds	r2, r4, #0
   25c34:	801a      	strh	r2, [r3, #0]
   25c36:	1d7b      	adds	r3, r7, #5
   25c38:	1c02      	adds	r2, r0, #0
   25c3a:	701a      	strb	r2, [r3, #0]
   25c3c:	1d3b      	adds	r3, r7, #4
   25c3e:	1c0a      	adds	r2, r1, #0
   25c40:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   25c42:	231f      	movs	r3, #31
   25c44:	18fb      	adds	r3, r7, r3
   25c46:	22ff      	movs	r2, #255	; 0xff
   25c48:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   25c4a:	1dbb      	adds	r3, r7, #6
   25c4c:	881b      	ldrh	r3, [r3, #0]
   25c4e:	2b02      	cmp	r3, #2
   25c50:	d000      	beq.n	25c54 <socket+0x30>
   25c52:	e0ce      	b.n	25df2 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   25c54:	1d7b      	adds	r3, r7, #5
   25c56:	781b      	ldrb	r3, [r3, #0]
   25c58:	2b01      	cmp	r3, #1
   25c5a:	d135      	bne.n	25cc8 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25c5c:	231e      	movs	r3, #30
   25c5e:	18fb      	adds	r3, r7, r3
   25c60:	2200      	movs	r2, #0
   25c62:	701a      	strb	r2, [r3, #0]
   25c64:	e02a      	b.n	25cbc <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   25c66:	2317      	movs	r3, #23
   25c68:	18fb      	adds	r3, r7, r3
   25c6a:	4a66      	ldr	r2, [pc, #408]	; (25e04 <socket+0x1e0>)
   25c6c:	7812      	ldrb	r2, [r2, #0]
   25c6e:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   25c70:	4b64      	ldr	r3, [pc, #400]	; (25e04 <socket+0x1e0>)
   25c72:	781b      	ldrb	r3, [r3, #0]
   25c74:	b2db      	uxtb	r3, r3
   25c76:	011a      	lsls	r2, r3, #4
   25c78:	4b63      	ldr	r3, [pc, #396]	; (25e08 <socket+0x1e4>)
   25c7a:	18d3      	adds	r3, r2, r3
   25c7c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   25c7e:	4b61      	ldr	r3, [pc, #388]	; (25e04 <socket+0x1e0>)
   25c80:	781b      	ldrb	r3, [r3, #0]
   25c82:	b2db      	uxtb	r3, r3
   25c84:	1c5a      	adds	r2, r3, #1
   25c86:	4b61      	ldr	r3, [pc, #388]	; (25e0c <socket+0x1e8>)
   25c88:	2107      	movs	r1, #7
   25c8a:	0010      	movs	r0, r2
   25c8c:	4798      	blx	r3
   25c8e:	000b      	movs	r3, r1
   25c90:	b2da      	uxtb	r2, r3
   25c92:	4b5c      	ldr	r3, [pc, #368]	; (25e04 <socket+0x1e0>)
   25c94:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25c96:	69bb      	ldr	r3, [r7, #24]
   25c98:	7a9b      	ldrb	r3, [r3, #10]
   25c9a:	b2db      	uxtb	r3, r3
   25c9c:	2b00      	cmp	r3, #0
   25c9e:	d106      	bne.n	25cae <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25ca0:	231f      	movs	r3, #31
   25ca2:	18fb      	adds	r3, r7, r3
   25ca4:	2217      	movs	r2, #23
   25ca6:	18ba      	adds	r2, r7, r2
   25ca8:	7812      	ldrb	r2, [r2, #0]
   25caa:	701a      	strb	r2, [r3, #0]
					break;
   25cac:	e04c      	b.n	25d48 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25cae:	231e      	movs	r3, #30
   25cb0:	18fb      	adds	r3, r7, r3
   25cb2:	781a      	ldrb	r2, [r3, #0]
   25cb4:	231e      	movs	r3, #30
   25cb6:	18fb      	adds	r3, r7, r3
   25cb8:	3201      	adds	r2, #1
   25cba:	701a      	strb	r2, [r3, #0]
   25cbc:	231e      	movs	r3, #30
   25cbe:	18fb      	adds	r3, r7, r3
   25cc0:	781b      	ldrb	r3, [r3, #0]
   25cc2:	2b06      	cmp	r3, #6
   25cc4:	d9cf      	bls.n	25c66 <socket+0x42>
   25cc6:	e03f      	b.n	25d48 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25cc8:	1d7b      	adds	r3, r7, #5
   25cca:	781b      	ldrb	r3, [r3, #0]
   25ccc:	2b02      	cmp	r3, #2
   25cce:	d13b      	bne.n	25d48 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   25cd0:	4b4f      	ldr	r3, [pc, #316]	; (25e10 <socket+0x1ec>)
   25cd2:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25cd4:	231e      	movs	r3, #30
   25cd6:	18fb      	adds	r3, r7, r3
   25cd8:	2200      	movs	r2, #0
   25cda:	701a      	strb	r2, [r3, #0]
   25cdc:	e02f      	b.n	25d3e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   25cde:	2317      	movs	r3, #23
   25ce0:	18fb      	adds	r3, r7, r3
   25ce2:	4a4c      	ldr	r2, [pc, #304]	; (25e14 <socket+0x1f0>)
   25ce4:	7812      	ldrb	r2, [r2, #0]
   25ce6:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25ce8:	4b4a      	ldr	r3, [pc, #296]	; (25e14 <socket+0x1f0>)
   25cea:	781b      	ldrb	r3, [r3, #0]
   25cec:	b2db      	uxtb	r3, r3
   25cee:	011b      	lsls	r3, r3, #4
   25cf0:	693a      	ldr	r2, [r7, #16]
   25cf2:	18d3      	adds	r3, r2, r3
   25cf4:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25cf6:	4b47      	ldr	r3, [pc, #284]	; (25e14 <socket+0x1f0>)
   25cf8:	781b      	ldrb	r3, [r3, #0]
   25cfa:	b2db      	uxtb	r3, r3
   25cfc:	3301      	adds	r3, #1
   25cfe:	4a46      	ldr	r2, [pc, #280]	; (25e18 <socket+0x1f4>)
   25d00:	4013      	ands	r3, r2
   25d02:	d504      	bpl.n	25d0e <socket+0xea>
   25d04:	3b01      	subs	r3, #1
   25d06:	2204      	movs	r2, #4
   25d08:	4252      	negs	r2, r2
   25d0a:	4313      	orrs	r3, r2
   25d0c:	3301      	adds	r3, #1
   25d0e:	b2da      	uxtb	r2, r3
   25d10:	4b40      	ldr	r3, [pc, #256]	; (25e14 <socket+0x1f0>)
   25d12:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25d14:	69bb      	ldr	r3, [r7, #24]
   25d16:	7a9b      	ldrb	r3, [r3, #10]
   25d18:	b2db      	uxtb	r3, r3
   25d1a:	2b00      	cmp	r3, #0
   25d1c:	d108      	bne.n	25d30 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   25d1e:	2317      	movs	r3, #23
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	781b      	ldrb	r3, [r3, #0]
   25d24:	3307      	adds	r3, #7
   25d26:	b2da      	uxtb	r2, r3
   25d28:	231f      	movs	r3, #31
   25d2a:	18fb      	adds	r3, r7, r3
   25d2c:	701a      	strb	r2, [r3, #0]
					break;
   25d2e:	e00b      	b.n	25d48 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25d30:	231e      	movs	r3, #30
   25d32:	18fb      	adds	r3, r7, r3
   25d34:	781a      	ldrb	r2, [r3, #0]
   25d36:	231e      	movs	r3, #30
   25d38:	18fb      	adds	r3, r7, r3
   25d3a:	3201      	adds	r2, #1
   25d3c:	701a      	strb	r2, [r3, #0]
   25d3e:	231e      	movs	r3, #30
   25d40:	18fb      	adds	r3, r7, r3
   25d42:	781b      	ldrb	r3, [r3, #0]
   25d44:	2b03      	cmp	r3, #3
   25d46:	d9ca      	bls.n	25cde <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25d48:	231f      	movs	r3, #31
   25d4a:	18fb      	adds	r3, r7, r3
   25d4c:	781b      	ldrb	r3, [r3, #0]
   25d4e:	2b7f      	cmp	r3, #127	; 0x7f
   25d50:	d84f      	bhi.n	25df2 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   25d52:	69bb      	ldr	r3, [r7, #24]
   25d54:	2210      	movs	r2, #16
   25d56:	2100      	movs	r1, #0
   25d58:	0018      	movs	r0, r3
   25d5a:	4b30      	ldr	r3, [pc, #192]	; (25e1c <socket+0x1f8>)
   25d5c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   25d5e:	69bb      	ldr	r3, [r7, #24]
   25d60:	2201      	movs	r2, #1
   25d62:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   25d64:	4b2e      	ldr	r3, [pc, #184]	; (25e20 <socket+0x1fc>)
   25d66:	881b      	ldrh	r3, [r3, #0]
   25d68:	b29b      	uxth	r3, r3
   25d6a:	3301      	adds	r3, #1
   25d6c:	b29a      	uxth	r2, r3
   25d6e:	4b2c      	ldr	r3, [pc, #176]	; (25e20 <socket+0x1fc>)
   25d70:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   25d72:	4b2b      	ldr	r3, [pc, #172]	; (25e20 <socket+0x1fc>)
   25d74:	881b      	ldrh	r3, [r3, #0]
   25d76:	b29b      	uxth	r3, r3
   25d78:	2b00      	cmp	r3, #0
   25d7a:	d106      	bne.n	25d8a <socket+0x166>
				++gu16SessionID;
   25d7c:	4b28      	ldr	r3, [pc, #160]	; (25e20 <socket+0x1fc>)
   25d7e:	881b      	ldrh	r3, [r3, #0]
   25d80:	b29b      	uxth	r3, r3
   25d82:	3301      	adds	r3, #1
   25d84:	b29a      	uxth	r2, r3
   25d86:	4b26      	ldr	r3, [pc, #152]	; (25e20 <socket+0x1fc>)
   25d88:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25d8a:	4b25      	ldr	r3, [pc, #148]	; (25e20 <socket+0x1fc>)
   25d8c:	881b      	ldrh	r3, [r3, #0]
   25d8e:	b29a      	uxth	r2, r3
   25d90:	69bb      	ldr	r3, [r7, #24]
   25d92:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25d94:	4b23      	ldr	r3, [pc, #140]	; (25e24 <socket+0x200>)
   25d96:	0018      	movs	r0, r3
   25d98:	4b23      	ldr	r3, [pc, #140]	; (25e28 <socket+0x204>)
   25d9a:	4798      	blx	r3
   25d9c:	231f      	movs	r3, #31
   25d9e:	18fb      	adds	r3, r7, r3
   25da0:	2100      	movs	r1, #0
   25da2:	5659      	ldrsb	r1, [r3, r1]
   25da4:	4b1e      	ldr	r3, [pc, #120]	; (25e20 <socket+0x1fc>)
   25da6:	881b      	ldrh	r3, [r3, #0]
   25da8:	b29b      	uxth	r3, r3
   25daa:	001a      	movs	r2, r3
   25dac:	4b1f      	ldr	r3, [pc, #124]	; (25e2c <socket+0x208>)
   25dae:	0018      	movs	r0, r3
   25db0:	4b1d      	ldr	r3, [pc, #116]	; (25e28 <socket+0x204>)
   25db2:	4798      	blx	r3
   25db4:	4b1e      	ldr	r3, [pc, #120]	; (25e30 <socket+0x20c>)
   25db6:	0018      	movs	r0, r3
   25db8:	4b1b      	ldr	r3, [pc, #108]	; (25e28 <socket+0x204>)
   25dba:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25dbc:	1d3b      	adds	r3, r7, #4
   25dbe:	781b      	ldrb	r3, [r3, #0]
   25dc0:	2201      	movs	r2, #1
   25dc2:	4013      	ands	r3, r2
   25dc4:	d015      	beq.n	25df2 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   25dc6:	230c      	movs	r3, #12
   25dc8:	18fb      	adds	r3, r7, r3
   25dca:	221f      	movs	r2, #31
   25dcc:	18ba      	adds	r2, r7, r2
   25dce:	7812      	ldrb	r2, [r2, #0]
   25dd0:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   25dd2:	69bb      	ldr	r3, [r7, #24]
   25dd4:	2221      	movs	r2, #33	; 0x21
   25dd6:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25dd8:	230c      	movs	r3, #12
   25dda:	18fa      	adds	r2, r7, r3
   25ddc:	2300      	movs	r3, #0
   25dde:	9302      	str	r3, [sp, #8]
   25de0:	2300      	movs	r3, #0
   25de2:	9301      	str	r3, [sp, #4]
   25de4:	2300      	movs	r3, #0
   25de6:	9300      	str	r3, [sp, #0]
   25de8:	2304      	movs	r3, #4
   25dea:	2150      	movs	r1, #80	; 0x50
   25dec:	2002      	movs	r0, #2
   25dee:	4c11      	ldr	r4, [pc, #68]	; (25e34 <socket+0x210>)
   25df0:	47a0      	blx	r4
			}
		}
	}
	return sock;
   25df2:	231f      	movs	r3, #31
   25df4:	18fb      	adds	r3, r7, r3
   25df6:	781b      	ldrb	r3, [r3, #0]
   25df8:	b25b      	sxtb	r3, r3
}
   25dfa:	0018      	movs	r0, r3
   25dfc:	46bd      	mov	sp, r7
   25dfe:	b009      	add	sp, #36	; 0x24
   25e00:	bd90      	pop	{r4, r7, pc}
   25e02:	46c0      	nop			; (mov r8, r8)
   25e04:	200042c5 	.word	0x200042c5
   25e08:	20005ccc 	.word	0x20005ccc
   25e0c:	00033315 	.word	0x00033315
   25e10:	20005d3c 	.word	0x20005d3c
   25e14:	200042c6 	.word	0x200042c6
   25e18:	80000003 	.word	0x80000003
   25e1c:	0002136d 	.word	0x0002136d
   25e20:	200042c2 	.word	0x200042c2
   25e24:	0003bae8 	.word	0x0003bae8
   25e28:	0001e639 	.word	0x0001e639
   25e2c:	0003bb0c 	.word	0x0003bb0c
   25e30:	0003bb08 	.word	0x0003bb08
   25e34:	000215cd 	.word	0x000215cd

00025e38 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25e38:	b5b0      	push	{r4, r5, r7, lr}
   25e3a:	b08a      	sub	sp, #40	; 0x28
   25e3c:	af04      	add	r7, sp, #16
   25e3e:	6039      	str	r1, [r7, #0]
   25e40:	0011      	movs	r1, r2
   25e42:	1dfb      	adds	r3, r7, #7
   25e44:	1c02      	adds	r2, r0, #0
   25e46:	701a      	strb	r2, [r3, #0]
   25e48:	1dbb      	adds	r3, r7, #6
   25e4a:	1c0a      	adds	r2, r1, #0
   25e4c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25e4e:	2317      	movs	r3, #23
   25e50:	18fb      	adds	r3, r7, r3
   25e52:	22fa      	movs	r2, #250	; 0xfa
   25e54:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   25e56:	1dfb      	adds	r3, r7, #7
   25e58:	781b      	ldrb	r3, [r3, #0]
   25e5a:	2b7f      	cmp	r3, #127	; 0x7f
   25e5c:	d867      	bhi.n	25f2e <connect+0xf6>
   25e5e:	683b      	ldr	r3, [r7, #0]
   25e60:	2b00      	cmp	r3, #0
   25e62:	d064      	beq.n	25f2e <connect+0xf6>
   25e64:	1dfb      	adds	r3, r7, #7
   25e66:	781b      	ldrb	r3, [r3, #0]
   25e68:	b25b      	sxtb	r3, r3
   25e6a:	4a35      	ldr	r2, [pc, #212]	; (25f40 <connect+0x108>)
   25e6c:	011b      	lsls	r3, r3, #4
   25e6e:	18d3      	adds	r3, r2, r3
   25e70:	330a      	adds	r3, #10
   25e72:	781b      	ldrb	r3, [r3, #0]
   25e74:	b2db      	uxtb	r3, r3
   25e76:	2b01      	cmp	r3, #1
   25e78:	d159      	bne.n	25f2e <connect+0xf6>
   25e7a:	1dbb      	adds	r3, r7, #6
   25e7c:	781b      	ldrb	r3, [r3, #0]
   25e7e:	2b00      	cmp	r3, #0
   25e80:	d055      	beq.n	25f2e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   25e82:	2316      	movs	r3, #22
   25e84:	18fb      	adds	r3, r7, r3
   25e86:	2244      	movs	r2, #68	; 0x44
   25e88:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25e8a:	1dfb      	adds	r3, r7, #7
   25e8c:	781b      	ldrb	r3, [r3, #0]
   25e8e:	b25b      	sxtb	r3, r3
   25e90:	4a2b      	ldr	r2, [pc, #172]	; (25f40 <connect+0x108>)
   25e92:	011b      	lsls	r3, r3, #4
   25e94:	18d3      	adds	r3, r2, r3
   25e96:	330b      	adds	r3, #11
   25e98:	781b      	ldrb	r3, [r3, #0]
   25e9a:	b2db      	uxtb	r3, r3
   25e9c:	001a      	movs	r2, r3
   25e9e:	2301      	movs	r3, #1
   25ea0:	4013      	ands	r3, r2
   25ea2:	d00f      	beq.n	25ec4 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25ea4:	2316      	movs	r3, #22
   25ea6:	18fb      	adds	r3, r7, r3
   25ea8:	224b      	movs	r2, #75	; 0x4b
   25eaa:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25eac:	1dfb      	adds	r3, r7, #7
   25eae:	781b      	ldrb	r3, [r3, #0]
   25eb0:	b25b      	sxtb	r3, r3
   25eb2:	4a23      	ldr	r2, [pc, #140]	; (25f40 <connect+0x108>)
   25eb4:	011b      	lsls	r3, r3, #4
   25eb6:	18d3      	adds	r3, r2, r3
   25eb8:	330b      	adds	r3, #11
   25eba:	781b      	ldrb	r3, [r3, #0]
   25ebc:	b2da      	uxtb	r2, r3
   25ebe:	2308      	movs	r3, #8
   25ec0:	18fb      	adds	r3, r7, r3
   25ec2:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25ec4:	2308      	movs	r3, #8
   25ec6:	18fb      	adds	r3, r7, r3
   25ec8:	1dfa      	adds	r2, r7, #7
   25eca:	7812      	ldrb	r2, [r2, #0]
   25ecc:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25ece:	6839      	ldr	r1, [r7, #0]
   25ed0:	2308      	movs	r3, #8
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	2208      	movs	r2, #8
   25ed6:	0018      	movs	r0, r3
   25ed8:	4b1a      	ldr	r3, [pc, #104]	; (25f44 <connect+0x10c>)
   25eda:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25edc:	1dfb      	adds	r3, r7, #7
   25ede:	781b      	ldrb	r3, [r3, #0]
   25ee0:	b25b      	sxtb	r3, r3
   25ee2:	4a17      	ldr	r2, [pc, #92]	; (25f40 <connect+0x108>)
   25ee4:	011b      	lsls	r3, r3, #4
   25ee6:	18d3      	adds	r3, r2, r3
   25ee8:	3306      	adds	r3, #6
   25eea:	881b      	ldrh	r3, [r3, #0]
   25eec:	b29a      	uxth	r2, r3
   25eee:	2308      	movs	r3, #8
   25ef0:	18fb      	adds	r3, r7, r3
   25ef2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25ef4:	2317      	movs	r3, #23
   25ef6:	18fc      	adds	r4, r7, r3
   25ef8:	2308      	movs	r3, #8
   25efa:	18fa      	adds	r2, r7, r3
   25efc:	2316      	movs	r3, #22
   25efe:	18fb      	adds	r3, r7, r3
   25f00:	7819      	ldrb	r1, [r3, #0]
   25f02:	2300      	movs	r3, #0
   25f04:	9302      	str	r3, [sp, #8]
   25f06:	2300      	movs	r3, #0
   25f08:	9301      	str	r3, [sp, #4]
   25f0a:	2300      	movs	r3, #0
   25f0c:	9300      	str	r3, [sp, #0]
   25f0e:	230c      	movs	r3, #12
   25f10:	2002      	movs	r0, #2
   25f12:	4d0d      	ldr	r5, [pc, #52]	; (25f48 <connect+0x110>)
   25f14:	47a8      	blx	r5
   25f16:	0003      	movs	r3, r0
   25f18:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25f1a:	2317      	movs	r3, #23
   25f1c:	18fb      	adds	r3, r7, r3
   25f1e:	781b      	ldrb	r3, [r3, #0]
   25f20:	b25b      	sxtb	r3, r3
   25f22:	2b00      	cmp	r3, #0
   25f24:	d003      	beq.n	25f2e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   25f26:	2317      	movs	r3, #23
   25f28:	18fb      	adds	r3, r7, r3
   25f2a:	22f7      	movs	r2, #247	; 0xf7
   25f2c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25f2e:	2317      	movs	r3, #23
   25f30:	18fb      	adds	r3, r7, r3
   25f32:	781b      	ldrb	r3, [r3, #0]
   25f34:	b25b      	sxtb	r3, r3
}
   25f36:	0018      	movs	r0, r3
   25f38:	46bd      	mov	sp, r7
   25f3a:	b006      	add	sp, #24
   25f3c:	bdb0      	pop	{r4, r5, r7, pc}
   25f3e:	46c0      	nop			; (mov r8, r8)
   25f40:	20005ccc 	.word	0x20005ccc
   25f44:	00021331 	.word	0x00021331
   25f48:	000215cd 	.word	0x000215cd

00025f4c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25f4c:	b590      	push	{r4, r7, lr}
   25f4e:	b08f      	sub	sp, #60	; 0x3c
   25f50:	af04      	add	r7, sp, #16
   25f52:	0004      	movs	r4, r0
   25f54:	60b9      	str	r1, [r7, #8]
   25f56:	0010      	movs	r0, r2
   25f58:	0019      	movs	r1, r3
   25f5a:	230f      	movs	r3, #15
   25f5c:	18fb      	adds	r3, r7, r3
   25f5e:	1c22      	adds	r2, r4, #0
   25f60:	701a      	strb	r2, [r3, #0]
   25f62:	230c      	movs	r3, #12
   25f64:	18fb      	adds	r3, r7, r3
   25f66:	1c02      	adds	r2, r0, #0
   25f68:	801a      	strh	r2, [r3, #0]
   25f6a:	1dbb      	adds	r3, r7, #6
   25f6c:	1c0a      	adds	r2, r1, #0
   25f6e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25f70:	2326      	movs	r3, #38	; 0x26
   25f72:	18fb      	adds	r3, r7, r3
   25f74:	2206      	movs	r2, #6
   25f76:	4252      	negs	r2, r2
   25f78:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25f7a:	230f      	movs	r3, #15
   25f7c:	18fb      	adds	r3, r7, r3
   25f7e:	781b      	ldrb	r3, [r3, #0]
   25f80:	2b7f      	cmp	r3, #127	; 0x7f
   25f82:	d900      	bls.n	25f86 <send+0x3a>
   25f84:	e087      	b.n	26096 <send+0x14a>
   25f86:	68bb      	ldr	r3, [r7, #8]
   25f88:	2b00      	cmp	r3, #0
   25f8a:	d100      	bne.n	25f8e <send+0x42>
   25f8c:	e083      	b.n	26096 <send+0x14a>
   25f8e:	230c      	movs	r3, #12
   25f90:	18fb      	adds	r3, r7, r3
   25f92:	881a      	ldrh	r2, [r3, #0]
   25f94:	23af      	movs	r3, #175	; 0xaf
   25f96:	00db      	lsls	r3, r3, #3
   25f98:	429a      	cmp	r2, r3
   25f9a:	d900      	bls.n	25f9e <send+0x52>
   25f9c:	e07b      	b.n	26096 <send+0x14a>
   25f9e:	230f      	movs	r3, #15
   25fa0:	18fb      	adds	r3, r7, r3
   25fa2:	781b      	ldrb	r3, [r3, #0]
   25fa4:	b25b      	sxtb	r3, r3
   25fa6:	4a40      	ldr	r2, [pc, #256]	; (260a8 <send+0x15c>)
   25fa8:	011b      	lsls	r3, r3, #4
   25faa:	18d3      	adds	r3, r2, r3
   25fac:	330a      	adds	r3, #10
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	b2db      	uxtb	r3, r3
   25fb2:	2b01      	cmp	r3, #1
   25fb4:	d16f      	bne.n	26096 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25fb6:	2323      	movs	r3, #35	; 0x23
   25fb8:	18fb      	adds	r3, r7, r3
   25fba:	2245      	movs	r2, #69	; 0x45
   25fbc:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25fbe:	2324      	movs	r3, #36	; 0x24
   25fc0:	18fb      	adds	r3, r7, r3
   25fc2:	2250      	movs	r2, #80	; 0x50
   25fc4:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25fc6:	2310      	movs	r3, #16
   25fc8:	18fb      	adds	r3, r7, r3
   25fca:	220f      	movs	r2, #15
   25fcc:	18ba      	adds	r2, r7, r2
   25fce:	7812      	ldrb	r2, [r2, #0]
   25fd0:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   25fd2:	2310      	movs	r3, #16
   25fd4:	18fb      	adds	r3, r7, r3
   25fd6:	220c      	movs	r2, #12
   25fd8:	18ba      	adds	r2, r7, r2
   25fda:	8812      	ldrh	r2, [r2, #0]
   25fdc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25fde:	230f      	movs	r3, #15
   25fe0:	18fb      	adds	r3, r7, r3
   25fe2:	781b      	ldrb	r3, [r3, #0]
   25fe4:	b25b      	sxtb	r3, r3
   25fe6:	4a30      	ldr	r2, [pc, #192]	; (260a8 <send+0x15c>)
   25fe8:	011b      	lsls	r3, r3, #4
   25fea:	18d3      	adds	r3, r2, r3
   25fec:	3306      	adds	r3, #6
   25fee:	881b      	ldrh	r3, [r3, #0]
   25ff0:	b29a      	uxth	r2, r3
   25ff2:	2310      	movs	r3, #16
   25ff4:	18fb      	adds	r3, r7, r3
   25ff6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25ff8:	230f      	movs	r3, #15
   25ffa:	18fb      	adds	r3, r7, r3
   25ffc:	781b      	ldrb	r3, [r3, #0]
   25ffe:	b25b      	sxtb	r3, r3
   26000:	2b06      	cmp	r3, #6
   26002:	dd03      	ble.n	2600c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26004:	2324      	movs	r3, #36	; 0x24
   26006:	18fb      	adds	r3, r7, r3
   26008:	2244      	movs	r2, #68	; 0x44
   2600a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2600c:	230f      	movs	r3, #15
   2600e:	18fb      	adds	r3, r7, r3
   26010:	781b      	ldrb	r3, [r3, #0]
   26012:	b25b      	sxtb	r3, r3
   26014:	4a24      	ldr	r2, [pc, #144]	; (260a8 <send+0x15c>)
   26016:	011b      	lsls	r3, r3, #4
   26018:	18d3      	adds	r3, r2, r3
   2601a:	330b      	adds	r3, #11
   2601c:	781b      	ldrb	r3, [r3, #0]
   2601e:	b2db      	uxtb	r3, r3
   26020:	001a      	movs	r2, r3
   26022:	2301      	movs	r3, #1
   26024:	4013      	ands	r3, r2
   26026:	d00f      	beq.n	26048 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   26028:	2323      	movs	r3, #35	; 0x23
   2602a:	18fb      	adds	r3, r7, r3
   2602c:	224c      	movs	r2, #76	; 0x4c
   2602e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   26030:	230f      	movs	r3, #15
   26032:	18fb      	adds	r3, r7, r3
   26034:	2200      	movs	r2, #0
   26036:	569a      	ldrsb	r2, [r3, r2]
   26038:	2324      	movs	r3, #36	; 0x24
   2603a:	18fb      	adds	r3, r7, r3
   2603c:	491a      	ldr	r1, [pc, #104]	; (260a8 <send+0x15c>)
   2603e:	0112      	lsls	r2, r2, #4
   26040:	188a      	adds	r2, r1, r2
   26042:	3208      	adds	r2, #8
   26044:	8812      	ldrh	r2, [r2, #0]
   26046:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   26048:	2323      	movs	r3, #35	; 0x23
   2604a:	18fb      	adds	r3, r7, r3
   2604c:	781b      	ldrb	r3, [r3, #0]
   2604e:	2280      	movs	r2, #128	; 0x80
   26050:	4252      	negs	r2, r2
   26052:	4313      	orrs	r3, r2
   26054:	b2d9      	uxtb	r1, r3
   26056:	2310      	movs	r3, #16
   26058:	18fa      	adds	r2, r7, r3
   2605a:	2324      	movs	r3, #36	; 0x24
   2605c:	18fb      	adds	r3, r7, r3
   2605e:	881b      	ldrh	r3, [r3, #0]
   26060:	9302      	str	r3, [sp, #8]
   26062:	230c      	movs	r3, #12
   26064:	18fb      	adds	r3, r7, r3
   26066:	881b      	ldrh	r3, [r3, #0]
   26068:	9301      	str	r3, [sp, #4]
   2606a:	68bb      	ldr	r3, [r7, #8]
   2606c:	9300      	str	r3, [sp, #0]
   2606e:	2310      	movs	r3, #16
   26070:	2002      	movs	r0, #2
   26072:	4c0e      	ldr	r4, [pc, #56]	; (260ac <send+0x160>)
   26074:	47a0      	blx	r4
   26076:	0003      	movs	r3, r0
   26078:	001a      	movs	r2, r3
   2607a:	2326      	movs	r3, #38	; 0x26
   2607c:	18fb      	adds	r3, r7, r3
   2607e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   26080:	2326      	movs	r3, #38	; 0x26
   26082:	18fb      	adds	r3, r7, r3
   26084:	2200      	movs	r2, #0
   26086:	5e9b      	ldrsh	r3, [r3, r2]
   26088:	2b00      	cmp	r3, #0
   2608a:	d004      	beq.n	26096 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   2608c:	2326      	movs	r3, #38	; 0x26
   2608e:	18fb      	adds	r3, r7, r3
   26090:	220e      	movs	r2, #14
   26092:	4252      	negs	r2, r2
   26094:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   26096:	2326      	movs	r3, #38	; 0x26
   26098:	18fb      	adds	r3, r7, r3
   2609a:	2200      	movs	r2, #0
   2609c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2609e:	0018      	movs	r0, r3
   260a0:	46bd      	mov	sp, r7
   260a2:	b00b      	add	sp, #44	; 0x2c
   260a4:	bd90      	pop	{r4, r7, pc}
   260a6:	46c0      	nop			; (mov r8, r8)
   260a8:	20005ccc 	.word	0x20005ccc
   260ac:	000215cd 	.word	0x000215cd

000260b0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   260b0:	b590      	push	{r4, r7, lr}
   260b2:	b08d      	sub	sp, #52	; 0x34
   260b4:	af04      	add	r7, sp, #16
   260b6:	60b9      	str	r1, [r7, #8]
   260b8:	0011      	movs	r1, r2
   260ba:	607b      	str	r3, [r7, #4]
   260bc:	230f      	movs	r3, #15
   260be:	18fb      	adds	r3, r7, r3
   260c0:	1c02      	adds	r2, r0, #0
   260c2:	701a      	strb	r2, [r3, #0]
   260c4:	230c      	movs	r3, #12
   260c6:	18fb      	adds	r3, r7, r3
   260c8:	1c0a      	adds	r2, r1, #0
   260ca:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   260cc:	231e      	movs	r3, #30
   260ce:	18fb      	adds	r3, r7, r3
   260d0:	2206      	movs	r2, #6
   260d2:	4252      	negs	r2, r2
   260d4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   260d6:	230f      	movs	r3, #15
   260d8:	18fb      	adds	r3, r7, r3
   260da:	781b      	ldrb	r3, [r3, #0]
   260dc:	2b7f      	cmp	r3, #127	; 0x7f
   260de:	d900      	bls.n	260e2 <recv+0x32>
   260e0:	e099      	b.n	26216 <recv+0x166>
   260e2:	68bb      	ldr	r3, [r7, #8]
   260e4:	2b00      	cmp	r3, #0
   260e6:	d100      	bne.n	260ea <recv+0x3a>
   260e8:	e095      	b.n	26216 <recv+0x166>
   260ea:	230c      	movs	r3, #12
   260ec:	18fb      	adds	r3, r7, r3
   260ee:	881b      	ldrh	r3, [r3, #0]
   260f0:	2b00      	cmp	r3, #0
   260f2:	d100      	bne.n	260f6 <recv+0x46>
   260f4:	e08f      	b.n	26216 <recv+0x166>
   260f6:	230f      	movs	r3, #15
   260f8:	18fb      	adds	r3, r7, r3
   260fa:	781b      	ldrb	r3, [r3, #0]
   260fc:	b25b      	sxtb	r3, r3
   260fe:	4a4a      	ldr	r2, [pc, #296]	; (26228 <recv+0x178>)
   26100:	011b      	lsls	r3, r3, #4
   26102:	18d3      	adds	r3, r2, r3
   26104:	330a      	adds	r3, #10
   26106:	781b      	ldrb	r3, [r3, #0]
   26108:	b2db      	uxtb	r3, r3
   2610a:	2b01      	cmp	r3, #1
   2610c:	d000      	beq.n	26110 <recv+0x60>
   2610e:	e082      	b.n	26216 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   26110:	231e      	movs	r3, #30
   26112:	18fb      	adds	r3, r7, r3
   26114:	2200      	movs	r2, #0
   26116:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26118:	230f      	movs	r3, #15
   2611a:	18fb      	adds	r3, r7, r3
   2611c:	2200      	movs	r2, #0
   2611e:	569a      	ldrsb	r2, [r3, r2]
   26120:	4b41      	ldr	r3, [pc, #260]	; (26228 <recv+0x178>)
   26122:	0112      	lsls	r2, r2, #4
   26124:	68b9      	ldr	r1, [r7, #8]
   26126:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   26128:	230f      	movs	r3, #15
   2612a:	18fb      	adds	r3, r7, r3
   2612c:	781b      	ldrb	r3, [r3, #0]
   2612e:	b25b      	sxtb	r3, r3
   26130:	4a3d      	ldr	r2, [pc, #244]	; (26228 <recv+0x178>)
   26132:	011b      	lsls	r3, r3, #4
   26134:	18d3      	adds	r3, r2, r3
   26136:	3304      	adds	r3, #4
   26138:	220c      	movs	r2, #12
   2613a:	18ba      	adds	r2, r7, r2
   2613c:	8812      	ldrh	r2, [r2, #0]
   2613e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   26140:	230f      	movs	r3, #15
   26142:	18fb      	adds	r3, r7, r3
   26144:	781b      	ldrb	r3, [r3, #0]
   26146:	b25b      	sxtb	r3, r3
   26148:	4a37      	ldr	r2, [pc, #220]	; (26228 <recv+0x178>)
   2614a:	011b      	lsls	r3, r3, #4
   2614c:	18d3      	adds	r3, r2, r3
   2614e:	330c      	adds	r3, #12
   26150:	781b      	ldrb	r3, [r3, #0]
   26152:	b2db      	uxtb	r3, r3
   26154:	2b00      	cmp	r3, #0
   26156:	d15e      	bne.n	26216 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26158:	231d      	movs	r3, #29
   2615a:	18fb      	adds	r3, r7, r3
   2615c:	2246      	movs	r2, #70	; 0x46
   2615e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   26160:	230f      	movs	r3, #15
   26162:	18fb      	adds	r3, r7, r3
   26164:	781b      	ldrb	r3, [r3, #0]
   26166:	b25b      	sxtb	r3, r3
   26168:	4a2f      	ldr	r2, [pc, #188]	; (26228 <recv+0x178>)
   2616a:	011b      	lsls	r3, r3, #4
   2616c:	18d3      	adds	r3, r2, r3
   2616e:	330c      	adds	r3, #12
   26170:	2201      	movs	r2, #1
   26172:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26174:	230f      	movs	r3, #15
   26176:	18fb      	adds	r3, r7, r3
   26178:	781b      	ldrb	r3, [r3, #0]
   2617a:	b25b      	sxtb	r3, r3
   2617c:	4a2a      	ldr	r2, [pc, #168]	; (26228 <recv+0x178>)
   2617e:	011b      	lsls	r3, r3, #4
   26180:	18d3      	adds	r3, r2, r3
   26182:	330b      	adds	r3, #11
   26184:	781b      	ldrb	r3, [r3, #0]
   26186:	b2db      	uxtb	r3, r3
   26188:	001a      	movs	r2, r3
   2618a:	2301      	movs	r3, #1
   2618c:	4013      	ands	r3, r2
   2618e:	d003      	beq.n	26198 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   26190:	231d      	movs	r3, #29
   26192:	18fb      	adds	r3, r7, r3
   26194:	224d      	movs	r2, #77	; 0x4d
   26196:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26198:	687b      	ldr	r3, [r7, #4]
   2619a:	2b00      	cmp	r3, #0
   2619c:	d105      	bne.n	261aa <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2619e:	2314      	movs	r3, #20
   261a0:	18fb      	adds	r3, r7, r3
   261a2:	2201      	movs	r2, #1
   261a4:	4252      	negs	r2, r2
   261a6:	601a      	str	r2, [r3, #0]
   261a8:	e003      	b.n	261b2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   261aa:	2314      	movs	r3, #20
   261ac:	18fb      	adds	r3, r7, r3
   261ae:	687a      	ldr	r2, [r7, #4]
   261b0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   261b2:	2314      	movs	r3, #20
   261b4:	18fb      	adds	r3, r7, r3
   261b6:	220f      	movs	r2, #15
   261b8:	18ba      	adds	r2, r7, r2
   261ba:	7812      	ldrb	r2, [r2, #0]
   261bc:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   261be:	230f      	movs	r3, #15
   261c0:	18fb      	adds	r3, r7, r3
   261c2:	781b      	ldrb	r3, [r3, #0]
   261c4:	b25b      	sxtb	r3, r3
   261c6:	4a18      	ldr	r2, [pc, #96]	; (26228 <recv+0x178>)
   261c8:	011b      	lsls	r3, r3, #4
   261ca:	18d3      	adds	r3, r2, r3
   261cc:	3306      	adds	r3, #6
   261ce:	881b      	ldrh	r3, [r3, #0]
   261d0:	b29a      	uxth	r2, r3
   261d2:	2314      	movs	r3, #20
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   261d8:	2314      	movs	r3, #20
   261da:	18fa      	adds	r2, r7, r3
   261dc:	231d      	movs	r3, #29
   261de:	18fb      	adds	r3, r7, r3
   261e0:	7819      	ldrb	r1, [r3, #0]
   261e2:	2300      	movs	r3, #0
   261e4:	9302      	str	r3, [sp, #8]
   261e6:	2300      	movs	r3, #0
   261e8:	9301      	str	r3, [sp, #4]
   261ea:	2300      	movs	r3, #0
   261ec:	9300      	str	r3, [sp, #0]
   261ee:	2308      	movs	r3, #8
   261f0:	2002      	movs	r0, #2
   261f2:	4c0e      	ldr	r4, [pc, #56]	; (2622c <recv+0x17c>)
   261f4:	47a0      	blx	r4
   261f6:	0003      	movs	r3, r0
   261f8:	001a      	movs	r2, r3
   261fa:	231e      	movs	r3, #30
   261fc:	18fb      	adds	r3, r7, r3
   261fe:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   26200:	231e      	movs	r3, #30
   26202:	18fb      	adds	r3, r7, r3
   26204:	2200      	movs	r2, #0
   26206:	5e9b      	ldrsh	r3, [r3, r2]
   26208:	2b00      	cmp	r3, #0
   2620a:	d004      	beq.n	26216 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   2620c:	231e      	movs	r3, #30
   2620e:	18fb      	adds	r3, r7, r3
   26210:	220e      	movs	r2, #14
   26212:	4252      	negs	r2, r2
   26214:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26216:	231e      	movs	r3, #30
   26218:	18fb      	adds	r3, r7, r3
   2621a:	2200      	movs	r2, #0
   2621c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2621e:	0018      	movs	r0, r3
   26220:	46bd      	mov	sp, r7
   26222:	b009      	add	sp, #36	; 0x24
   26224:	bd90      	pop	{r4, r7, pc}
   26226:	46c0      	nop			; (mov r8, r8)
   26228:	20005ccc 	.word	0x20005ccc
   2622c:	000215cd 	.word	0x000215cd

00026230 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   26230:	b5b0      	push	{r4, r5, r7, lr}
   26232:	b088      	sub	sp, #32
   26234:	af04      	add	r7, sp, #16
   26236:	0002      	movs	r2, r0
   26238:	1dfb      	adds	r3, r7, #7
   2623a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2623c:	230f      	movs	r3, #15
   2623e:	18fb      	adds	r3, r7, r3
   26240:	22fa      	movs	r2, #250	; 0xfa
   26242:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26244:	4b43      	ldr	r3, [pc, #268]	; (26354 <close+0x124>)
   26246:	0018      	movs	r0, r3
   26248:	4b43      	ldr	r3, [pc, #268]	; (26358 <close+0x128>)
   2624a:	4798      	blx	r3
   2624c:	1dfb      	adds	r3, r7, #7
   2624e:	2200      	movs	r2, #0
   26250:	569a      	ldrsb	r2, [r3, r2]
   26252:	4b42      	ldr	r3, [pc, #264]	; (2635c <close+0x12c>)
   26254:	0011      	movs	r1, r2
   26256:	0018      	movs	r0, r3
   26258:	4b3f      	ldr	r3, [pc, #252]	; (26358 <close+0x128>)
   2625a:	4798      	blx	r3
   2625c:	4b40      	ldr	r3, [pc, #256]	; (26360 <close+0x130>)
   2625e:	0018      	movs	r0, r3
   26260:	4b3d      	ldr	r3, [pc, #244]	; (26358 <close+0x128>)
   26262:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26264:	1dfb      	adds	r3, r7, #7
   26266:	781b      	ldrb	r3, [r3, #0]
   26268:	2b7f      	cmp	r3, #127	; 0x7f
   2626a:	d86a      	bhi.n	26342 <close+0x112>
   2626c:	1dfb      	adds	r3, r7, #7
   2626e:	781b      	ldrb	r3, [r3, #0]
   26270:	b25b      	sxtb	r3, r3
   26272:	4a3c      	ldr	r2, [pc, #240]	; (26364 <close+0x134>)
   26274:	011b      	lsls	r3, r3, #4
   26276:	18d3      	adds	r3, r2, r3
   26278:	330a      	adds	r3, #10
   2627a:	781b      	ldrb	r3, [r3, #0]
   2627c:	b2db      	uxtb	r3, r3
   2627e:	2b01      	cmp	r3, #1
   26280:	d15f      	bne.n	26342 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   26282:	230e      	movs	r3, #14
   26284:	18fb      	adds	r3, r7, r3
   26286:	2249      	movs	r2, #73	; 0x49
   26288:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   2628a:	2308      	movs	r3, #8
   2628c:	18fb      	adds	r3, r7, r3
   2628e:	1dfa      	adds	r2, r7, #7
   26290:	7812      	ldrb	r2, [r2, #0]
   26292:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26294:	1dfb      	adds	r3, r7, #7
   26296:	781b      	ldrb	r3, [r3, #0]
   26298:	b25b      	sxtb	r3, r3
   2629a:	4a32      	ldr	r2, [pc, #200]	; (26364 <close+0x134>)
   2629c:	011b      	lsls	r3, r3, #4
   2629e:	18d3      	adds	r3, r2, r3
   262a0:	3306      	adds	r3, #6
   262a2:	881b      	ldrh	r3, [r3, #0]
   262a4:	b29a      	uxth	r2, r3
   262a6:	2308      	movs	r3, #8
   262a8:	18fb      	adds	r3, r7, r3
   262aa:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   262ac:	1dfb      	adds	r3, r7, #7
   262ae:	781b      	ldrb	r3, [r3, #0]
   262b0:	b25b      	sxtb	r3, r3
   262b2:	4a2c      	ldr	r2, [pc, #176]	; (26364 <close+0x134>)
   262b4:	011b      	lsls	r3, r3, #4
   262b6:	18d3      	adds	r3, r2, r3
   262b8:	330a      	adds	r3, #10
   262ba:	2200      	movs	r2, #0
   262bc:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   262be:	1dfb      	adds	r3, r7, #7
   262c0:	781b      	ldrb	r3, [r3, #0]
   262c2:	b25b      	sxtb	r3, r3
   262c4:	4a27      	ldr	r2, [pc, #156]	; (26364 <close+0x134>)
   262c6:	011b      	lsls	r3, r3, #4
   262c8:	18d3      	adds	r3, r2, r3
   262ca:	3306      	adds	r3, #6
   262cc:	2200      	movs	r2, #0
   262ce:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   262d0:	1dfb      	adds	r3, r7, #7
   262d2:	781b      	ldrb	r3, [r3, #0]
   262d4:	b25b      	sxtb	r3, r3
   262d6:	4a23      	ldr	r2, [pc, #140]	; (26364 <close+0x134>)
   262d8:	011b      	lsls	r3, r3, #4
   262da:	18d3      	adds	r3, r2, r3
   262dc:	330b      	adds	r3, #11
   262de:	781b      	ldrb	r3, [r3, #0]
   262e0:	b2db      	uxtb	r3, r3
   262e2:	001a      	movs	r2, r3
   262e4:	2301      	movs	r3, #1
   262e6:	4013      	ands	r3, r2
   262e8:	d003      	beq.n	262f2 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   262ea:	230e      	movs	r3, #14
   262ec:	18fb      	adds	r3, r7, r3
   262ee:	224e      	movs	r2, #78	; 0x4e
   262f0:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   262f2:	230f      	movs	r3, #15
   262f4:	18fc      	adds	r4, r7, r3
   262f6:	2308      	movs	r3, #8
   262f8:	18fa      	adds	r2, r7, r3
   262fa:	230e      	movs	r3, #14
   262fc:	18fb      	adds	r3, r7, r3
   262fe:	7819      	ldrb	r1, [r3, #0]
   26300:	2300      	movs	r3, #0
   26302:	9302      	str	r3, [sp, #8]
   26304:	2300      	movs	r3, #0
   26306:	9301      	str	r3, [sp, #4]
   26308:	2300      	movs	r3, #0
   2630a:	9300      	str	r3, [sp, #0]
   2630c:	2304      	movs	r3, #4
   2630e:	2002      	movs	r0, #2
   26310:	4d15      	ldr	r5, [pc, #84]	; (26368 <close+0x138>)
   26312:	47a8      	blx	r5
   26314:	0003      	movs	r3, r0
   26316:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26318:	230f      	movs	r3, #15
   2631a:	18fb      	adds	r3, r7, r3
   2631c:	781b      	ldrb	r3, [r3, #0]
   2631e:	b25b      	sxtb	r3, r3
   26320:	2b00      	cmp	r3, #0
   26322:	d003      	beq.n	2632c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26324:	230f      	movs	r3, #15
   26326:	18fb      	adds	r3, r7, r3
   26328:	22f7      	movs	r2, #247	; 0xf7
   2632a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   2632c:	1dfb      	adds	r3, r7, #7
   2632e:	781b      	ldrb	r3, [r3, #0]
   26330:	b25b      	sxtb	r3, r3
   26332:	011a      	lsls	r2, r3, #4
   26334:	4b0b      	ldr	r3, [pc, #44]	; (26364 <close+0x134>)
   26336:	18d3      	adds	r3, r2, r3
   26338:	2210      	movs	r2, #16
   2633a:	2100      	movs	r1, #0
   2633c:	0018      	movs	r0, r3
   2633e:	4b0b      	ldr	r3, [pc, #44]	; (2636c <close+0x13c>)
   26340:	4798      	blx	r3
	}
	return s8Ret;
   26342:	230f      	movs	r3, #15
   26344:	18fb      	adds	r3, r7, r3
   26346:	781b      	ldrb	r3, [r3, #0]
   26348:	b25b      	sxtb	r3, r3
}
   2634a:	0018      	movs	r0, r3
   2634c:	46bd      	mov	sp, r7
   2634e:	b004      	add	sp, #16
   26350:	bdb0      	pop	{r4, r5, r7, pc}
   26352:	46c0      	nop			; (mov r8, r8)
   26354:	0003bae8 	.word	0x0003bae8
   26358:	0001e639 	.word	0x0001e639
   2635c:	0003bb28 	.word	0x0003bb28
   26360:	0003bb08 	.word	0x0003bb08
   26364:	20005ccc 	.word	0x20005ccc
   26368:	000215cd 	.word	0x000215cd
   2636c:	0002136d 	.word	0x0002136d

00026370 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   26370:	b580      	push	{r7, lr}
   26372:	b086      	sub	sp, #24
   26374:	af00      	add	r7, sp, #0
   26376:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26378:	2300      	movs	r3, #0
   2637a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   2637c:	2317      	movs	r3, #23
   2637e:	18fb      	adds	r3, r7, r3
   26380:	2200      	movs	r2, #0
   26382:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26384:	2316      	movs	r3, #22
   26386:	18fb      	adds	r3, r7, r3
   26388:	2200      	movs	r2, #0
   2638a:	701a      	strb	r2, [r3, #0]
   2638c:	e060      	b.n	26450 <nmi_inet_addr+0xe0>
	{
		j = 0;
   2638e:	2315      	movs	r3, #21
   26390:	18fb      	adds	r3, r7, r3
   26392:	2200      	movs	r2, #0
   26394:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26396:	2314      	movs	r3, #20
   26398:	18fb      	adds	r3, r7, r3
   2639a:	687a      	ldr	r2, [r7, #4]
   2639c:	7812      	ldrb	r2, [r2, #0]
   2639e:	701a      	strb	r2, [r3, #0]
			++j;
   263a0:	2315      	movs	r3, #21
   263a2:	18fb      	adds	r3, r7, r3
   263a4:	2215      	movs	r2, #21
   263a6:	18ba      	adds	r2, r7, r2
   263a8:	7812      	ldrb	r2, [r2, #0]
   263aa:	3201      	adds	r2, #1
   263ac:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   263ae:	2315      	movs	r3, #21
   263b0:	18fb      	adds	r3, r7, r3
   263b2:	781b      	ldrb	r3, [r3, #0]
   263b4:	2b04      	cmp	r3, #4
   263b6:	d901      	bls.n	263bc <nmi_inet_addr+0x4c>
			{
				return 0;
   263b8:	2300      	movs	r3, #0
   263ba:	e057      	b.n	2646c <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   263bc:	2314      	movs	r3, #20
   263be:	18fb      	adds	r3, r7, r3
   263c0:	781b      	ldrb	r3, [r3, #0]
   263c2:	2b2e      	cmp	r3, #46	; 0x2e
   263c4:	d004      	beq.n	263d0 <nmi_inet_addr+0x60>
   263c6:	2314      	movs	r3, #20
   263c8:	18fb      	adds	r3, r7, r3
   263ca:	781b      	ldrb	r3, [r3, #0]
   263cc:	2b00      	cmp	r3, #0
   263ce:	d10d      	bne.n	263ec <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   263d0:	2316      	movs	r3, #22
   263d2:	18fb      	adds	r3, r7, r3
   263d4:	781b      	ldrb	r3, [r3, #0]
   263d6:	220c      	movs	r2, #12
   263d8:	18ba      	adds	r2, r7, r2
   263da:	2117      	movs	r1, #23
   263dc:	1879      	adds	r1, r7, r1
   263de:	7809      	ldrb	r1, [r1, #0]
   263e0:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   263e2:	2317      	movs	r3, #23
   263e4:	18fb      	adds	r3, r7, r3
   263e6:	2200      	movs	r2, #0
   263e8:	701a      	strb	r2, [r3, #0]
   263ea:	e01d      	b.n	26428 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   263ec:	2314      	movs	r3, #20
   263ee:	18fb      	adds	r3, r7, r3
   263f0:	781b      	ldrb	r3, [r3, #0]
   263f2:	2b2f      	cmp	r3, #47	; 0x2f
   263f4:	d916      	bls.n	26424 <nmi_inet_addr+0xb4>
   263f6:	2314      	movs	r3, #20
   263f8:	18fb      	adds	r3, r7, r3
   263fa:	781b      	ldrb	r3, [r3, #0]
   263fc:	2b39      	cmp	r3, #57	; 0x39
   263fe:	d811      	bhi.n	26424 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26400:	2317      	movs	r3, #23
   26402:	18fb      	adds	r3, r7, r3
   26404:	781b      	ldrb	r3, [r3, #0]
   26406:	1c1a      	adds	r2, r3, #0
   26408:	0092      	lsls	r2, r2, #2
   2640a:	18d3      	adds	r3, r2, r3
   2640c:	18db      	adds	r3, r3, r3
   2640e:	b2da      	uxtb	r2, r3
   26410:	2314      	movs	r3, #20
   26412:	18fb      	adds	r3, r7, r3
   26414:	781b      	ldrb	r3, [r3, #0]
   26416:	18d3      	adds	r3, r2, r3
   26418:	b2da      	uxtb	r2, r3
   2641a:	2317      	movs	r3, #23
   2641c:	18fb      	adds	r3, r7, r3
   2641e:	3a30      	subs	r2, #48	; 0x30
   26420:	701a      	strb	r2, [r3, #0]
   26422:	e001      	b.n	26428 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26424:	2300      	movs	r3, #0
   26426:	e021      	b.n	2646c <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26428:	687b      	ldr	r3, [r7, #4]
   2642a:	3301      	adds	r3, #1
   2642c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2642e:	2314      	movs	r3, #20
   26430:	18fb      	adds	r3, r7, r3
   26432:	781b      	ldrb	r3, [r3, #0]
   26434:	2b2e      	cmp	r3, #46	; 0x2e
   26436:	d004      	beq.n	26442 <nmi_inet_addr+0xd2>
   26438:	2314      	movs	r3, #20
   2643a:	18fb      	adds	r3, r7, r3
   2643c:	781b      	ldrb	r3, [r3, #0]
   2643e:	2b00      	cmp	r3, #0
   26440:	d1a9      	bne.n	26396 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   26442:	2316      	movs	r3, #22
   26444:	18fb      	adds	r3, r7, r3
   26446:	2216      	movs	r2, #22
   26448:	18ba      	adds	r2, r7, r2
   2644a:	7812      	ldrb	r2, [r2, #0]
   2644c:	3201      	adds	r2, #1
   2644e:	701a      	strb	r2, [r3, #0]
   26450:	2316      	movs	r3, #22
   26452:	18fb      	adds	r3, r7, r3
   26454:	781b      	ldrb	r3, [r3, #0]
   26456:	2b03      	cmp	r3, #3
   26458:	d999      	bls.n	2638e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   2645a:	230c      	movs	r3, #12
   2645c:	18f9      	adds	r1, r7, r3
   2645e:	2310      	movs	r3, #16
   26460:	18fb      	adds	r3, r7, r3
   26462:	2204      	movs	r2, #4
   26464:	0018      	movs	r0, r3
   26466:	4b03      	ldr	r3, [pc, #12]	; (26474 <nmi_inet_addr+0x104>)
   26468:	4798      	blx	r3
	return u32IP;
   2646a:	693b      	ldr	r3, [r7, #16]
}
   2646c:	0018      	movs	r0, r3
   2646e:	46bd      	mov	sp, r7
   26470:	b006      	add	sp, #24
   26472:	bd80      	pop	{r7, pc}
   26474:	00021331 	.word	0x00021331

00026478 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26478:	b5b0      	push	{r4, r5, r7, lr}
   2647a:	b088      	sub	sp, #32
   2647c:	af04      	add	r7, sp, #16
   2647e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   26480:	230f      	movs	r3, #15
   26482:	18fb      	adds	r3, r7, r3
   26484:	22fa      	movs	r2, #250	; 0xfa
   26486:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26488:	687b      	ldr	r3, [r7, #4]
   2648a:	0018      	movs	r0, r3
   2648c:	4b14      	ldr	r3, [pc, #80]	; (264e0 <gethostbyname+0x68>)
   2648e:	4798      	blx	r3
   26490:	0003      	movs	r3, r0
   26492:	001a      	movs	r2, r3
   26494:	230e      	movs	r3, #14
   26496:	18fb      	adds	r3, r7, r3
   26498:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   2649a:	230e      	movs	r3, #14
   2649c:	18fb      	adds	r3, r7, r3
   2649e:	781b      	ldrb	r3, [r3, #0]
   264a0:	2b40      	cmp	r3, #64	; 0x40
   264a2:	d815      	bhi.n	264d0 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   264a4:	230e      	movs	r3, #14
   264a6:	18fb      	adds	r3, r7, r3
   264a8:	781b      	ldrb	r3, [r3, #0]
   264aa:	b29b      	uxth	r3, r3
   264ac:	3301      	adds	r3, #1
   264ae:	b299      	uxth	r1, r3
   264b0:	230f      	movs	r3, #15
   264b2:	18fc      	adds	r4, r7, r3
   264b4:	687a      	ldr	r2, [r7, #4]
   264b6:	2300      	movs	r3, #0
   264b8:	9302      	str	r3, [sp, #8]
   264ba:	2300      	movs	r3, #0
   264bc:	9301      	str	r3, [sp, #4]
   264be:	2300      	movs	r3, #0
   264c0:	9300      	str	r3, [sp, #0]
   264c2:	000b      	movs	r3, r1
   264c4:	214a      	movs	r1, #74	; 0x4a
   264c6:	2002      	movs	r0, #2
   264c8:	4d06      	ldr	r5, [pc, #24]	; (264e4 <gethostbyname+0x6c>)
   264ca:	47a8      	blx	r5
   264cc:	0003      	movs	r3, r0
   264ce:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   264d0:	230f      	movs	r3, #15
   264d2:	18fb      	adds	r3, r7, r3
   264d4:	781b      	ldrb	r3, [r3, #0]
   264d6:	b25b      	sxtb	r3, r3
}
   264d8:	0018      	movs	r0, r3
   264da:	46bd      	mov	sp, r7
   264dc:	b004      	add	sp, #16
   264de:	bdb0      	pop	{r4, r5, r7, pc}
   264e0:	000213ab 	.word	0x000213ab
   264e4:	000215cd 	.word	0x000215cd

000264e8 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   264e8:	b580      	push	{r7, lr}
   264ea:	b082      	sub	sp, #8
   264ec:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   264ee:	003b      	movs	r3, r7
   264f0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   264f2:	687b      	ldr	r3, [r7, #4]
   264f4:	22b9      	movs	r2, #185	; 0xb9
   264f6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   264f8:	4b13      	ldr	r3, [pc, #76]	; (26548 <spi_flash_enter_low_power_mode+0x60>)
   264fa:	2100      	movs	r1, #0
   264fc:	0018      	movs	r0, r3
   264fe:	4b13      	ldr	r3, [pc, #76]	; (2654c <spi_flash_enter_low_power_mode+0x64>)
   26500:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26502:	687b      	ldr	r3, [r7, #4]
   26504:	781b      	ldrb	r3, [r3, #0]
   26506:	001a      	movs	r2, r3
   26508:	4b11      	ldr	r3, [pc, #68]	; (26550 <spi_flash_enter_low_power_mode+0x68>)
   2650a:	0011      	movs	r1, r2
   2650c:	0018      	movs	r0, r3
   2650e:	4b0f      	ldr	r3, [pc, #60]	; (2654c <spi_flash_enter_low_power_mode+0x64>)
   26510:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26512:	4b10      	ldr	r3, [pc, #64]	; (26554 <spi_flash_enter_low_power_mode+0x6c>)
   26514:	2101      	movs	r1, #1
   26516:	0018      	movs	r0, r3
   26518:	4b0c      	ldr	r3, [pc, #48]	; (2654c <spi_flash_enter_low_power_mode+0x64>)
   2651a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   2651c:	4b0e      	ldr	r3, [pc, #56]	; (26558 <spi_flash_enter_low_power_mode+0x70>)
   2651e:	2100      	movs	r1, #0
   26520:	0018      	movs	r0, r3
   26522:	4b0a      	ldr	r3, [pc, #40]	; (2654c <spi_flash_enter_low_power_mode+0x64>)
   26524:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26526:	4b0d      	ldr	r3, [pc, #52]	; (2655c <spi_flash_enter_low_power_mode+0x74>)
   26528:	2181      	movs	r1, #129	; 0x81
   2652a:	0018      	movs	r0, r3
   2652c:	4b07      	ldr	r3, [pc, #28]	; (2654c <spi_flash_enter_low_power_mode+0x64>)
   2652e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26530:	46c0      	nop			; (mov r8, r8)
   26532:	4b0b      	ldr	r3, [pc, #44]	; (26560 <spi_flash_enter_low_power_mode+0x78>)
   26534:	0018      	movs	r0, r3
   26536:	4b0b      	ldr	r3, [pc, #44]	; (26564 <spi_flash_enter_low_power_mode+0x7c>)
   26538:	4798      	blx	r3
   2653a:	0003      	movs	r3, r0
   2653c:	2b01      	cmp	r3, #1
   2653e:	d1f8      	bne.n	26532 <spi_flash_enter_low_power_mode+0x4a>
}
   26540:	46c0      	nop			; (mov r8, r8)
   26542:	46bd      	mov	sp, r7
   26544:	b002      	add	sp, #8
   26546:	bd80      	pop	{r7, pc}
   26548:	00010208 	.word	0x00010208
   2654c:	00023349 	.word	0x00023349
   26550:	0001020c 	.word	0x0001020c
   26554:	00010214 	.word	0x00010214
   26558:	0001021c 	.word	0x0001021c
   2655c:	00010204 	.word	0x00010204
   26560:	00010218 	.word	0x00010218
   26564:	00023305 	.word	0x00023305

00026568 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26568:	b580      	push	{r7, lr}
   2656a:	b082      	sub	sp, #8
   2656c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2656e:	003b      	movs	r3, r7
   26570:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26572:	687b      	ldr	r3, [r7, #4]
   26574:	22ab      	movs	r2, #171	; 0xab
   26576:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26578:	4b13      	ldr	r3, [pc, #76]	; (265c8 <spi_flash_leave_low_power_mode+0x60>)
   2657a:	2100      	movs	r1, #0
   2657c:	0018      	movs	r0, r3
   2657e:	4b13      	ldr	r3, [pc, #76]	; (265cc <spi_flash_leave_low_power_mode+0x64>)
   26580:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26582:	687b      	ldr	r3, [r7, #4]
   26584:	781b      	ldrb	r3, [r3, #0]
   26586:	001a      	movs	r2, r3
   26588:	4b11      	ldr	r3, [pc, #68]	; (265d0 <spi_flash_leave_low_power_mode+0x68>)
   2658a:	0011      	movs	r1, r2
   2658c:	0018      	movs	r0, r3
   2658e:	4b0f      	ldr	r3, [pc, #60]	; (265cc <spi_flash_leave_low_power_mode+0x64>)
   26590:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26592:	4b10      	ldr	r3, [pc, #64]	; (265d4 <spi_flash_leave_low_power_mode+0x6c>)
   26594:	2101      	movs	r1, #1
   26596:	0018      	movs	r0, r3
   26598:	4b0c      	ldr	r3, [pc, #48]	; (265cc <spi_flash_leave_low_power_mode+0x64>)
   2659a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   2659c:	4b0e      	ldr	r3, [pc, #56]	; (265d8 <spi_flash_leave_low_power_mode+0x70>)
   2659e:	2100      	movs	r1, #0
   265a0:	0018      	movs	r0, r3
   265a2:	4b0a      	ldr	r3, [pc, #40]	; (265cc <spi_flash_leave_low_power_mode+0x64>)
   265a4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   265a6:	4b0d      	ldr	r3, [pc, #52]	; (265dc <spi_flash_leave_low_power_mode+0x74>)
   265a8:	2181      	movs	r1, #129	; 0x81
   265aa:	0018      	movs	r0, r3
   265ac:	4b07      	ldr	r3, [pc, #28]	; (265cc <spi_flash_leave_low_power_mode+0x64>)
   265ae:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   265b0:	46c0      	nop			; (mov r8, r8)
   265b2:	4b0b      	ldr	r3, [pc, #44]	; (265e0 <spi_flash_leave_low_power_mode+0x78>)
   265b4:	0018      	movs	r0, r3
   265b6:	4b0b      	ldr	r3, [pc, #44]	; (265e4 <spi_flash_leave_low_power_mode+0x7c>)
   265b8:	4798      	blx	r3
   265ba:	0003      	movs	r3, r0
   265bc:	2b01      	cmp	r3, #1
   265be:	d1f8      	bne.n	265b2 <spi_flash_leave_low_power_mode+0x4a>
}
   265c0:	46c0      	nop			; (mov r8, r8)
   265c2:	46bd      	mov	sp, r7
   265c4:	b002      	add	sp, #8
   265c6:	bd80      	pop	{r7, pc}
   265c8:	00010208 	.word	0x00010208
   265cc:	00023349 	.word	0x00023349
   265d0:	0001020c 	.word	0x0001020c
   265d4:	00010214 	.word	0x00010214
   265d8:	0001021c 	.word	0x0001021c
   265dc:	00010204 	.word	0x00010204
   265e0:	00010218 	.word	0x00010218
   265e4:	00023305 	.word	0x00023305

000265e8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   265e8:	b590      	push	{r4, r7, lr}
   265ea:	b085      	sub	sp, #20
   265ec:	af00      	add	r7, sp, #0
   265ee:	0002      	movs	r2, r0
   265f0:	1dfb      	adds	r3, r7, #7
   265f2:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   265f4:	230f      	movs	r3, #15
   265f6:	18fb      	adds	r3, r7, r3
   265f8:	2200      	movs	r2, #0
   265fa:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   265fc:	4b24      	ldr	r3, [pc, #144]	; (26690 <spi_flash_enable+0xa8>)
   265fe:	4798      	blx	r3
   26600:	0003      	movs	r3, r0
   26602:	051b      	lsls	r3, r3, #20
   26604:	0d1b      	lsrs	r3, r3, #20
   26606:	4a23      	ldr	r2, [pc, #140]	; (26694 <spi_flash_enable+0xac>)
   26608:	4293      	cmp	r3, r2
   2660a:	d938      	bls.n	2667e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   2660c:	230f      	movs	r3, #15
   2660e:	18fc      	adds	r4, r7, r3
   26610:	2308      	movs	r3, #8
   26612:	18fb      	adds	r3, r7, r3
   26614:	4a20      	ldr	r2, [pc, #128]	; (26698 <spi_flash_enable+0xb0>)
   26616:	0019      	movs	r1, r3
   26618:	0010      	movs	r0, r2
   2661a:	4b20      	ldr	r3, [pc, #128]	; (2669c <spi_flash_enable+0xb4>)
   2661c:	4798      	blx	r3
   2661e:	0003      	movs	r3, r0
   26620:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26622:	230f      	movs	r3, #15
   26624:	18fb      	adds	r3, r7, r3
   26626:	781b      	ldrb	r3, [r3, #0]
   26628:	b25b      	sxtb	r3, r3
   2662a:	2b00      	cmp	r3, #0
   2662c:	d126      	bne.n	2667c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2662e:	68bb      	ldr	r3, [r7, #8]
   26630:	4a1b      	ldr	r2, [pc, #108]	; (266a0 <spi_flash_enable+0xb8>)
   26632:	4013      	ands	r3, r2
   26634:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26636:	68bb      	ldr	r3, [r7, #8]
   26638:	4a1a      	ldr	r2, [pc, #104]	; (266a4 <spi_flash_enable+0xbc>)
   2663a:	4313      	orrs	r3, r2
   2663c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2663e:	68bb      	ldr	r3, [r7, #8]
   26640:	4a15      	ldr	r2, [pc, #84]	; (26698 <spi_flash_enable+0xb0>)
   26642:	0019      	movs	r1, r3
   26644:	0010      	movs	r0, r2
   26646:	4b18      	ldr	r3, [pc, #96]	; (266a8 <spi_flash_enable+0xc0>)
   26648:	4798      	blx	r3
		if(enable) {
   2664a:	1dfb      	adds	r3, r7, #7
   2664c:	781b      	ldrb	r3, [r3, #0]
   2664e:	2b00      	cmp	r3, #0
   26650:	d002      	beq.n	26658 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26652:	4b16      	ldr	r3, [pc, #88]	; (266ac <spi_flash_enable+0xc4>)
   26654:	4798      	blx	r3
   26656:	e001      	b.n	2665c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26658:	4b15      	ldr	r3, [pc, #84]	; (266b0 <spi_flash_enable+0xc8>)
   2665a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   2665c:	68bb      	ldr	r3, [r7, #8]
   2665e:	4a10      	ldr	r2, [pc, #64]	; (266a0 <spi_flash_enable+0xb8>)
   26660:	4013      	ands	r3, r2
   26662:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26664:	68bb      	ldr	r3, [r7, #8]
   26666:	2280      	movs	r2, #128	; 0x80
   26668:	0252      	lsls	r2, r2, #9
   2666a:	4313      	orrs	r3, r2
   2666c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2666e:	68bb      	ldr	r3, [r7, #8]
   26670:	4a09      	ldr	r2, [pc, #36]	; (26698 <spi_flash_enable+0xb0>)
   26672:	0019      	movs	r1, r3
   26674:	0010      	movs	r0, r2
   26676:	4b0c      	ldr	r3, [pc, #48]	; (266a8 <spi_flash_enable+0xc0>)
   26678:	4798      	blx	r3
   2667a:	e000      	b.n	2667e <spi_flash_enable+0x96>
			goto ERR1;
   2667c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2667e:	230f      	movs	r3, #15
   26680:	18fb      	adds	r3, r7, r3
   26682:	781b      	ldrb	r3, [r3, #0]
   26684:	b25b      	sxtb	r3, r3
}
   26686:	0018      	movs	r0, r3
   26688:	46bd      	mov	sp, r7
   2668a:	b005      	add	sp, #20
   2668c:	bd90      	pop	{r4, r7, pc}
   2668e:	46c0      	nop			; (mov r8, r8)
   26690:	00022c25 	.word	0x00022c25
   26694:	0000039f 	.word	0x0000039f
   26698:	00001410 	.word	0x00001410
   2669c:	00023325 	.word	0x00023325
   266a0:	f8888fff 	.word	0xf8888fff
   266a4:	01111000 	.word	0x01111000
   266a8:	00023349 	.word	0x00023349
   266ac:	00026569 	.word	0x00026569
   266b0:	000264e9 	.word	0x000264e9

000266b4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   266b4:	b580      	push	{r7, lr}
   266b6:	b084      	sub	sp, #16
   266b8:	af00      	add	r7, sp, #0
   266ba:	0002      	movs	r2, r0
   266bc:	1dfb      	adds	r3, r7, #7
   266be:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   266c0:	1dfb      	adds	r3, r7, #7
   266c2:	781b      	ldrb	r3, [r3, #0]
   266c4:	2b00      	cmp	r3, #0
   266c6:	d108      	bne.n	266da <mem_test_unit_ready+0x26>
   266c8:	1dfb      	adds	r3, r7, #7
   266ca:	781a      	ldrb	r2, [r3, #0]
   266cc:	4b08      	ldr	r3, [pc, #32]	; (266f0 <mem_test_unit_ready+0x3c>)
   266ce:	0152      	lsls	r2, r2, #5
   266d0:	58d3      	ldr	r3, [r2, r3]
   266d2:	4798      	blx	r3
   266d4:	0003      	movs	r3, r0
   266d6:	001a      	movs	r2, r3
   266d8:	e000      	b.n	266dc <mem_test_unit_ready+0x28>
   266da:	2201      	movs	r2, #1
  status =
   266dc:	230f      	movs	r3, #15
   266de:	18fb      	adds	r3, r7, r3
   266e0:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   266e2:	230f      	movs	r3, #15
   266e4:	18fb      	adds	r3, r7, r3
   266e6:	781b      	ldrb	r3, [r3, #0]
}
   266e8:	0018      	movs	r0, r3
   266ea:	46bd      	mov	sp, r7
   266ec:	b004      	add	sp, #16
   266ee:	bd80      	pop	{r7, pc}
   266f0:	0003bbb4 	.word	0x0003bbb4

000266f4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   266f4:	b580      	push	{r7, lr}
   266f6:	b084      	sub	sp, #16
   266f8:	af00      	add	r7, sp, #0
   266fa:	0002      	movs	r2, r0
   266fc:	6039      	str	r1, [r7, #0]
   266fe:	1dfb      	adds	r3, r7, #7
   26700:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26702:	1dfb      	adds	r3, r7, #7
   26704:	781b      	ldrb	r3, [r3, #0]
   26706:	2b00      	cmp	r3, #0
   26708:	d10c      	bne.n	26724 <mem_read_capacity+0x30>
   2670a:	1dfb      	adds	r3, r7, #7
   2670c:	781b      	ldrb	r3, [r3, #0]
   2670e:	4a0b      	ldr	r2, [pc, #44]	; (2673c <mem_read_capacity+0x48>)
   26710:	015b      	lsls	r3, r3, #5
   26712:	18d3      	adds	r3, r2, r3
   26714:	3304      	adds	r3, #4
   26716:	681b      	ldr	r3, [r3, #0]
   26718:	683a      	ldr	r2, [r7, #0]
   2671a:	0010      	movs	r0, r2
   2671c:	4798      	blx	r3
   2671e:	0003      	movs	r3, r0
   26720:	001a      	movs	r2, r3
   26722:	e000      	b.n	26726 <mem_read_capacity+0x32>
   26724:	2201      	movs	r2, #1
  status =
   26726:	230f      	movs	r3, #15
   26728:	18fb      	adds	r3, r7, r3
   2672a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2672c:	230f      	movs	r3, #15
   2672e:	18fb      	adds	r3, r7, r3
   26730:	781b      	ldrb	r3, [r3, #0]
}
   26732:	0018      	movs	r0, r3
   26734:	46bd      	mov	sp, r7
   26736:	b004      	add	sp, #16
   26738:	bd80      	pop	{r7, pc}
   2673a:	46c0      	nop			; (mov r8, r8)
   2673c:	0003bbb4 	.word	0x0003bbb4

00026740 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26740:	b580      	push	{r7, lr}
   26742:	b084      	sub	sp, #16
   26744:	af00      	add	r7, sp, #0
   26746:	0002      	movs	r2, r0
   26748:	1dfb      	adds	r3, r7, #7
   2674a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   2674c:	1dfb      	adds	r3, r7, #7
   2674e:	781b      	ldrb	r3, [r3, #0]
   26750:	425a      	negs	r2, r3
   26752:	4153      	adcs	r3, r2
   26754:	b2da      	uxtb	r2, r3
  sector_size =
   26756:	230f      	movs	r3, #15
   26758:	18fb      	adds	r3, r7, r3
   2675a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   2675c:	230f      	movs	r3, #15
   2675e:	18fb      	adds	r3, r7, r3
   26760:	781b      	ldrb	r3, [r3, #0]
}
   26762:	0018      	movs	r0, r3
   26764:	46bd      	mov	sp, r7
   26766:	b004      	add	sp, #16
   26768:	bd80      	pop	{r7, pc}
	...

0002676c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   2676c:	b580      	push	{r7, lr}
   2676e:	b084      	sub	sp, #16
   26770:	af00      	add	r7, sp, #0
   26772:	0002      	movs	r2, r0
   26774:	1dfb      	adds	r3, r7, #7
   26776:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26778:	1dfb      	adds	r3, r7, #7
   2677a:	781b      	ldrb	r3, [r3, #0]
   2677c:	2b00      	cmp	r3, #0
   2677e:	d109      	bne.n	26794 <mem_wr_protect+0x28>
   26780:	1dfb      	adds	r3, r7, #7
   26782:	781b      	ldrb	r3, [r3, #0]
   26784:	4a0a      	ldr	r2, [pc, #40]	; (267b0 <mem_wr_protect+0x44>)
   26786:	015b      	lsls	r3, r3, #5
   26788:	18d3      	adds	r3, r2, r3
   2678a:	330c      	adds	r3, #12
   2678c:	681b      	ldr	r3, [r3, #0]
   2678e:	4798      	blx	r3
   26790:	1e03      	subs	r3, r0, #0
   26792:	d001      	beq.n	26798 <mem_wr_protect+0x2c>
   26794:	2201      	movs	r2, #1
   26796:	e000      	b.n	2679a <mem_wr_protect+0x2e>
   26798:	2200      	movs	r2, #0
  wr_protect =
   2679a:	230f      	movs	r3, #15
   2679c:	18fb      	adds	r3, r7, r3
   2679e:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   267a0:	230f      	movs	r3, #15
   267a2:	18fb      	adds	r3, r7, r3
   267a4:	781b      	ldrb	r3, [r3, #0]
}
   267a6:	0018      	movs	r0, r3
   267a8:	46bd      	mov	sp, r7
   267aa:	b004      	add	sp, #16
   267ac:	bd80      	pop	{r7, pc}
   267ae:	46c0      	nop			; (mov r8, r8)
   267b0:	0003bbb4 	.word	0x0003bbb4

000267b4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   267b4:	b580      	push	{r7, lr}
   267b6:	b086      	sub	sp, #24
   267b8:	af00      	add	r7, sp, #0
   267ba:	60b9      	str	r1, [r7, #8]
   267bc:	607a      	str	r2, [r7, #4]
   267be:	230f      	movs	r3, #15
   267c0:	18fb      	adds	r3, r7, r3
   267c2:	1c02      	adds	r2, r0, #0
   267c4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   267c6:	230f      	movs	r3, #15
   267c8:	18fb      	adds	r3, r7, r3
   267ca:	781b      	ldrb	r3, [r3, #0]
   267cc:	2b00      	cmp	r3, #0
   267ce:	d10e      	bne.n	267ee <memory_2_ram+0x3a>
   267d0:	230f      	movs	r3, #15
   267d2:	18fb      	adds	r3, r7, r3
   267d4:	781b      	ldrb	r3, [r3, #0]
   267d6:	4a0b      	ldr	r2, [pc, #44]	; (26804 <memory_2_ram+0x50>)
   267d8:	015b      	lsls	r3, r3, #5
   267da:	18d3      	adds	r3, r2, r3
   267dc:	3314      	adds	r3, #20
   267de:	681b      	ldr	r3, [r3, #0]
   267e0:	6879      	ldr	r1, [r7, #4]
   267e2:	68ba      	ldr	r2, [r7, #8]
   267e4:	0010      	movs	r0, r2
   267e6:	4798      	blx	r3
   267e8:	0003      	movs	r3, r0
   267ea:	001a      	movs	r2, r3
   267ec:	e000      	b.n	267f0 <memory_2_ram+0x3c>
   267ee:	2201      	movs	r2, #1
  status =
   267f0:	2317      	movs	r3, #23
   267f2:	18fb      	adds	r3, r7, r3
   267f4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   267f6:	2317      	movs	r3, #23
   267f8:	18fb      	adds	r3, r7, r3
   267fa:	781b      	ldrb	r3, [r3, #0]
}
   267fc:	0018      	movs	r0, r3
   267fe:	46bd      	mov	sp, r7
   26800:	b006      	add	sp, #24
   26802:	bd80      	pop	{r7, pc}
   26804:	0003bbb4 	.word	0x0003bbb4

00026808 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26808:	b580      	push	{r7, lr}
   2680a:	b086      	sub	sp, #24
   2680c:	af00      	add	r7, sp, #0
   2680e:	60b9      	str	r1, [r7, #8]
   26810:	607a      	str	r2, [r7, #4]
   26812:	230f      	movs	r3, #15
   26814:	18fb      	adds	r3, r7, r3
   26816:	1c02      	adds	r2, r0, #0
   26818:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2681a:	230f      	movs	r3, #15
   2681c:	18fb      	adds	r3, r7, r3
   2681e:	781b      	ldrb	r3, [r3, #0]
   26820:	2b00      	cmp	r3, #0
   26822:	d10e      	bne.n	26842 <ram_2_memory+0x3a>
   26824:	230f      	movs	r3, #15
   26826:	18fb      	adds	r3, r7, r3
   26828:	781b      	ldrb	r3, [r3, #0]
   2682a:	4a0b      	ldr	r2, [pc, #44]	; (26858 <ram_2_memory+0x50>)
   2682c:	015b      	lsls	r3, r3, #5
   2682e:	18d3      	adds	r3, r2, r3
   26830:	3318      	adds	r3, #24
   26832:	681b      	ldr	r3, [r3, #0]
   26834:	6879      	ldr	r1, [r7, #4]
   26836:	68ba      	ldr	r2, [r7, #8]
   26838:	0010      	movs	r0, r2
   2683a:	4798      	blx	r3
   2683c:	0003      	movs	r3, r0
   2683e:	001a      	movs	r2, r3
   26840:	e000      	b.n	26844 <ram_2_memory+0x3c>
   26842:	2201      	movs	r2, #1
  status =
   26844:	2317      	movs	r3, #23
   26846:	18fb      	adds	r3, r7, r3
   26848:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   2684a:	2317      	movs	r3, #23
   2684c:	18fb      	adds	r3, r7, r3
   2684e:	781b      	ldrb	r3, [r3, #0]
}
   26850:	0018      	movs	r0, r3
   26852:	46bd      	mov	sp, r7
   26854:	b006      	add	sp, #24
   26856:	bd80      	pop	{r7, pc}
   26858:	0003bbb4 	.word	0x0003bbb4

0002685c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2685c:	b580      	push	{r7, lr}
   2685e:	b082      	sub	sp, #8
   26860:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26862:	4b10      	ldr	r3, [pc, #64]	; (268a4 <cpu_irq_enter_critical+0x48>)
   26864:	681b      	ldr	r3, [r3, #0]
   26866:	2b00      	cmp	r3, #0
   26868:	d112      	bne.n	26890 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2686a:	f3ef 8310 	mrs	r3, PRIMASK
   2686e:	607b      	str	r3, [r7, #4]
  return(result);
   26870:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26872:	2b00      	cmp	r3, #0
   26874:	d109      	bne.n	2688a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26876:	b672      	cpsid	i
   26878:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2687c:	4b0a      	ldr	r3, [pc, #40]	; (268a8 <cpu_irq_enter_critical+0x4c>)
   2687e:	2200      	movs	r2, #0
   26880:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26882:	4b0a      	ldr	r3, [pc, #40]	; (268ac <cpu_irq_enter_critical+0x50>)
   26884:	2201      	movs	r2, #1
   26886:	701a      	strb	r2, [r3, #0]
   26888:	e002      	b.n	26890 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2688a:	4b08      	ldr	r3, [pc, #32]	; (268ac <cpu_irq_enter_critical+0x50>)
   2688c:	2200      	movs	r2, #0
   2688e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26890:	4b04      	ldr	r3, [pc, #16]	; (268a4 <cpu_irq_enter_critical+0x48>)
   26892:	681b      	ldr	r3, [r3, #0]
   26894:	1c5a      	adds	r2, r3, #1
   26896:	4b03      	ldr	r3, [pc, #12]	; (268a4 <cpu_irq_enter_critical+0x48>)
   26898:	601a      	str	r2, [r3, #0]
}
   2689a:	46c0      	nop			; (mov r8, r8)
   2689c:	46bd      	mov	sp, r7
   2689e:	b002      	add	sp, #8
   268a0:	bd80      	pop	{r7, pc}
   268a2:	46c0      	nop			; (mov r8, r8)
   268a4:	200042c8 	.word	0x200042c8
   268a8:	20000126 	.word	0x20000126
   268ac:	200042cc 	.word	0x200042cc

000268b0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   268b0:	b580      	push	{r7, lr}
   268b2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   268b4:	4b0b      	ldr	r3, [pc, #44]	; (268e4 <cpu_irq_leave_critical+0x34>)
   268b6:	681b      	ldr	r3, [r3, #0]
   268b8:	1e5a      	subs	r2, r3, #1
   268ba:	4b0a      	ldr	r3, [pc, #40]	; (268e4 <cpu_irq_leave_critical+0x34>)
   268bc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   268be:	4b09      	ldr	r3, [pc, #36]	; (268e4 <cpu_irq_leave_critical+0x34>)
   268c0:	681b      	ldr	r3, [r3, #0]
   268c2:	2b00      	cmp	r3, #0
   268c4:	d10a      	bne.n	268dc <cpu_irq_leave_critical+0x2c>
   268c6:	4b08      	ldr	r3, [pc, #32]	; (268e8 <cpu_irq_leave_critical+0x38>)
   268c8:	781b      	ldrb	r3, [r3, #0]
   268ca:	b2db      	uxtb	r3, r3
   268cc:	2b00      	cmp	r3, #0
   268ce:	d005      	beq.n	268dc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   268d0:	4b06      	ldr	r3, [pc, #24]	; (268ec <cpu_irq_leave_critical+0x3c>)
   268d2:	2201      	movs	r2, #1
   268d4:	701a      	strb	r2, [r3, #0]
   268d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   268da:	b662      	cpsie	i
	}
}
   268dc:	46c0      	nop			; (mov r8, r8)
   268de:	46bd      	mov	sp, r7
   268e0:	bd80      	pop	{r7, pc}
   268e2:	46c0      	nop			; (mov r8, r8)
   268e4:	200042c8 	.word	0x200042c8
   268e8:	200042cc 	.word	0x200042cc
   268ec:	20000126 	.word	0x20000126

000268f0 <system_pinmux_get_group_from_gpio_pin>:
{
   268f0:	b580      	push	{r7, lr}
   268f2:	b084      	sub	sp, #16
   268f4:	af00      	add	r7, sp, #0
   268f6:	0002      	movs	r2, r0
   268f8:	1dfb      	adds	r3, r7, #7
   268fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   268fc:	230f      	movs	r3, #15
   268fe:	18fb      	adds	r3, r7, r3
   26900:	1dfa      	adds	r2, r7, #7
   26902:	7812      	ldrb	r2, [r2, #0]
   26904:	09d2      	lsrs	r2, r2, #7
   26906:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26908:	230e      	movs	r3, #14
   2690a:	18fb      	adds	r3, r7, r3
   2690c:	1dfa      	adds	r2, r7, #7
   2690e:	7812      	ldrb	r2, [r2, #0]
   26910:	0952      	lsrs	r2, r2, #5
   26912:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26914:	4b0d      	ldr	r3, [pc, #52]	; (2694c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26916:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26918:	230f      	movs	r3, #15
   2691a:	18fb      	adds	r3, r7, r3
   2691c:	781b      	ldrb	r3, [r3, #0]
   2691e:	2b00      	cmp	r3, #0
   26920:	d10f      	bne.n	26942 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26922:	230f      	movs	r3, #15
   26924:	18fb      	adds	r3, r7, r3
   26926:	781b      	ldrb	r3, [r3, #0]
   26928:	009b      	lsls	r3, r3, #2
   2692a:	2210      	movs	r2, #16
   2692c:	4694      	mov	ip, r2
   2692e:	44bc      	add	ip, r7
   26930:	4463      	add	r3, ip
   26932:	3b08      	subs	r3, #8
   26934:	681a      	ldr	r2, [r3, #0]
   26936:	230e      	movs	r3, #14
   26938:	18fb      	adds	r3, r7, r3
   2693a:	781b      	ldrb	r3, [r3, #0]
   2693c:	01db      	lsls	r3, r3, #7
   2693e:	18d3      	adds	r3, r2, r3
   26940:	e000      	b.n	26944 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26942:	2300      	movs	r3, #0
}
   26944:	0018      	movs	r0, r3
   26946:	46bd      	mov	sp, r7
   26948:	b004      	add	sp, #16
   2694a:	bd80      	pop	{r7, pc}
   2694c:	41004400 	.word	0x41004400

00026950 <port_get_group_from_gpio_pin>:
{
   26950:	b580      	push	{r7, lr}
   26952:	b082      	sub	sp, #8
   26954:	af00      	add	r7, sp, #0
   26956:	0002      	movs	r2, r0
   26958:	1dfb      	adds	r3, r7, #7
   2695a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2695c:	1dfb      	adds	r3, r7, #7
   2695e:	781b      	ldrb	r3, [r3, #0]
   26960:	0018      	movs	r0, r3
   26962:	4b03      	ldr	r3, [pc, #12]	; (26970 <port_get_group_from_gpio_pin+0x20>)
   26964:	4798      	blx	r3
   26966:	0003      	movs	r3, r0
}
   26968:	0018      	movs	r0, r3
   2696a:	46bd      	mov	sp, r7
   2696c:	b002      	add	sp, #8
   2696e:	bd80      	pop	{r7, pc}
   26970:	000268f1 	.word	0x000268f1

00026974 <port_get_config_defaults>:
{
   26974:	b580      	push	{r7, lr}
   26976:	b082      	sub	sp, #8
   26978:	af00      	add	r7, sp, #0
   2697a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2697c:	687b      	ldr	r3, [r7, #4]
   2697e:	2200      	movs	r2, #0
   26980:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26982:	687b      	ldr	r3, [r7, #4]
   26984:	2201      	movs	r2, #1
   26986:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26988:	687b      	ldr	r3, [r7, #4]
   2698a:	2200      	movs	r2, #0
   2698c:	709a      	strb	r2, [r3, #2]
}
   2698e:	46c0      	nop			; (mov r8, r8)
   26990:	46bd      	mov	sp, r7
   26992:	b002      	add	sp, #8
   26994:	bd80      	pop	{r7, pc}
	...

00026998 <port_pin_set_output_level>:
{
   26998:	b580      	push	{r7, lr}
   2699a:	b084      	sub	sp, #16
   2699c:	af00      	add	r7, sp, #0
   2699e:	0002      	movs	r2, r0
   269a0:	1dfb      	adds	r3, r7, #7
   269a2:	701a      	strb	r2, [r3, #0]
   269a4:	1dbb      	adds	r3, r7, #6
   269a6:	1c0a      	adds	r2, r1, #0
   269a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   269aa:	1dfb      	adds	r3, r7, #7
   269ac:	781b      	ldrb	r3, [r3, #0]
   269ae:	0018      	movs	r0, r3
   269b0:	4b0d      	ldr	r3, [pc, #52]	; (269e8 <port_pin_set_output_level+0x50>)
   269b2:	4798      	blx	r3
   269b4:	0003      	movs	r3, r0
   269b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   269b8:	1dfb      	adds	r3, r7, #7
   269ba:	781b      	ldrb	r3, [r3, #0]
   269bc:	221f      	movs	r2, #31
   269be:	4013      	ands	r3, r2
   269c0:	2201      	movs	r2, #1
   269c2:	409a      	lsls	r2, r3
   269c4:	0013      	movs	r3, r2
   269c6:	60bb      	str	r3, [r7, #8]
	if (level) {
   269c8:	1dbb      	adds	r3, r7, #6
   269ca:	781b      	ldrb	r3, [r3, #0]
   269cc:	2b00      	cmp	r3, #0
   269ce:	d003      	beq.n	269d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   269d0:	68fb      	ldr	r3, [r7, #12]
   269d2:	68ba      	ldr	r2, [r7, #8]
   269d4:	619a      	str	r2, [r3, #24]
}
   269d6:	e002      	b.n	269de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   269d8:	68fb      	ldr	r3, [r7, #12]
   269da:	68ba      	ldr	r2, [r7, #8]
   269dc:	615a      	str	r2, [r3, #20]
}
   269de:	46c0      	nop			; (mov r8, r8)
   269e0:	46bd      	mov	sp, r7
   269e2:	b004      	add	sp, #16
   269e4:	bd80      	pop	{r7, pc}
   269e6:	46c0      	nop			; (mov r8, r8)
   269e8:	00026951 	.word	0x00026951

000269ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   269ec:	b580      	push	{r7, lr}
   269ee:	b082      	sub	sp, #8
   269f0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   269f2:	1d3b      	adds	r3, r7, #4
   269f4:	0018      	movs	r0, r3
   269f6:	4b0e      	ldr	r3, [pc, #56]	; (26a30 <system_board_init+0x44>)
   269f8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   269fa:	1d3b      	adds	r3, r7, #4
   269fc:	2201      	movs	r2, #1
   269fe:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26a00:	1d3b      	adds	r3, r7, #4
   26a02:	0019      	movs	r1, r3
   26a04:	2017      	movs	r0, #23
   26a06:	4b0b      	ldr	r3, [pc, #44]	; (26a34 <system_board_init+0x48>)
   26a08:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26a0a:	2101      	movs	r1, #1
   26a0c:	2017      	movs	r0, #23
   26a0e:	4b0a      	ldr	r3, [pc, #40]	; (26a38 <system_board_init+0x4c>)
   26a10:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26a12:	1d3b      	adds	r3, r7, #4
   26a14:	2200      	movs	r2, #0
   26a16:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26a18:	1d3b      	adds	r3, r7, #4
   26a1a:	2201      	movs	r2, #1
   26a1c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26a1e:	1d3b      	adds	r3, r7, #4
   26a20:	0019      	movs	r1, r3
   26a22:	2037      	movs	r0, #55	; 0x37
   26a24:	4b03      	ldr	r3, [pc, #12]	; (26a34 <system_board_init+0x48>)
   26a26:	4798      	blx	r3
}
   26a28:	46c0      	nop			; (mov r8, r8)
   26a2a:	46bd      	mov	sp, r7
   26a2c:	b002      	add	sp, #8
   26a2e:	bd80      	pop	{r7, pc}
   26a30:	00026975 	.word	0x00026975
   26a34:	00027061 	.word	0x00027061
   26a38:	00026999 	.word	0x00026999

00026a3c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26a3c:	b580      	push	{r7, lr}
   26a3e:	b084      	sub	sp, #16
   26a40:	af00      	add	r7, sp, #0
   26a42:	0002      	movs	r2, r0
   26a44:	1dfb      	adds	r3, r7, #7
   26a46:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26a48:	230f      	movs	r3, #15
   26a4a:	18fb      	adds	r3, r7, r3
   26a4c:	1dfa      	adds	r2, r7, #7
   26a4e:	7812      	ldrb	r2, [r2, #0]
   26a50:	0952      	lsrs	r2, r2, #5
   26a52:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26a54:	230f      	movs	r3, #15
   26a56:	18fb      	adds	r3, r7, r3
   26a58:	781b      	ldrb	r3, [r3, #0]
   26a5a:	2b00      	cmp	r3, #0
   26a5c:	d10c      	bne.n	26a78 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26a5e:	4b09      	ldr	r3, [pc, #36]	; (26a84 <_extint_get_eic_from_channel+0x48>)
   26a60:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26a62:	230f      	movs	r3, #15
   26a64:	18fb      	adds	r3, r7, r3
   26a66:	781b      	ldrb	r3, [r3, #0]
   26a68:	009b      	lsls	r3, r3, #2
   26a6a:	2210      	movs	r2, #16
   26a6c:	4694      	mov	ip, r2
   26a6e:	44bc      	add	ip, r7
   26a70:	4463      	add	r3, ip
   26a72:	3b08      	subs	r3, #8
   26a74:	681b      	ldr	r3, [r3, #0]
   26a76:	e000      	b.n	26a7a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26a78:	2300      	movs	r3, #0
	}
}
   26a7a:	0018      	movs	r0, r3
   26a7c:	46bd      	mov	sp, r7
   26a7e:	b004      	add	sp, #16
   26a80:	bd80      	pop	{r7, pc}
   26a82:	46c0      	nop			; (mov r8, r8)
   26a84:	40001800 	.word	0x40001800

00026a88 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26a88:	b580      	push	{r7, lr}
   26a8a:	b084      	sub	sp, #16
   26a8c:	af00      	add	r7, sp, #0
   26a8e:	0002      	movs	r2, r0
   26a90:	1dfb      	adds	r3, r7, #7
   26a92:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26a94:	1dfb      	adds	r3, r7, #7
   26a96:	781b      	ldrb	r3, [r3, #0]
   26a98:	0018      	movs	r0, r3
   26a9a:	4b0b      	ldr	r3, [pc, #44]	; (26ac8 <extint_chan_is_detected+0x40>)
   26a9c:	4798      	blx	r3
   26a9e:	0003      	movs	r3, r0
   26aa0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26aa2:	1dfb      	adds	r3, r7, #7
   26aa4:	781b      	ldrb	r3, [r3, #0]
   26aa6:	221f      	movs	r2, #31
   26aa8:	4013      	ands	r3, r2
   26aaa:	2201      	movs	r2, #1
   26aac:	409a      	lsls	r2, r3
   26aae:	0013      	movs	r3, r2
   26ab0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   26ab2:	68fb      	ldr	r3, [r7, #12]
   26ab4:	691b      	ldr	r3, [r3, #16]
   26ab6:	68ba      	ldr	r2, [r7, #8]
   26ab8:	4013      	ands	r3, r2
   26aba:	1e5a      	subs	r2, r3, #1
   26abc:	4193      	sbcs	r3, r2
   26abe:	b2db      	uxtb	r3, r3
}
   26ac0:	0018      	movs	r0, r3
   26ac2:	46bd      	mov	sp, r7
   26ac4:	b004      	add	sp, #16
   26ac6:	bd80      	pop	{r7, pc}
   26ac8:	00026a3d 	.word	0x00026a3d

00026acc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26acc:	b580      	push	{r7, lr}
   26ace:	b084      	sub	sp, #16
   26ad0:	af00      	add	r7, sp, #0
   26ad2:	0002      	movs	r2, r0
   26ad4:	1dfb      	adds	r3, r7, #7
   26ad6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26ad8:	1dfb      	adds	r3, r7, #7
   26ada:	781b      	ldrb	r3, [r3, #0]
   26adc:	0018      	movs	r0, r3
   26ade:	4b09      	ldr	r3, [pc, #36]	; (26b04 <extint_chan_clear_detected+0x38>)
   26ae0:	4798      	blx	r3
   26ae2:	0003      	movs	r3, r0
   26ae4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26ae6:	1dfb      	adds	r3, r7, #7
   26ae8:	781b      	ldrb	r3, [r3, #0]
   26aea:	221f      	movs	r2, #31
   26aec:	4013      	ands	r3, r2
   26aee:	2201      	movs	r2, #1
   26af0:	409a      	lsls	r2, r3
   26af2:	0013      	movs	r3, r2
   26af4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26af6:	68fb      	ldr	r3, [r7, #12]
   26af8:	68ba      	ldr	r2, [r7, #8]
   26afa:	611a      	str	r2, [r3, #16]
}
   26afc:	46c0      	nop			; (mov r8, r8)
   26afe:	46bd      	mov	sp, r7
   26b00:	b004      	add	sp, #16
   26b02:	bd80      	pop	{r7, pc}
   26b04:	00026a3d 	.word	0x00026a3d

00026b08 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26b08:	b580      	push	{r7, lr}
   26b0a:	b082      	sub	sp, #8
   26b0c:	af00      	add	r7, sp, #0
   26b0e:	6078      	str	r0, [r7, #4]
   26b10:	0008      	movs	r0, r1
   26b12:	0011      	movs	r1, r2
   26b14:	1cfb      	adds	r3, r7, #3
   26b16:	1c02      	adds	r2, r0, #0
   26b18:	701a      	strb	r2, [r3, #0]
   26b1a:	1cbb      	adds	r3, r7, #2
   26b1c:	1c0a      	adds	r2, r1, #0
   26b1e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26b20:	1cbb      	adds	r3, r7, #2
   26b22:	781b      	ldrb	r3, [r3, #0]
   26b24:	2b00      	cmp	r3, #0
   26b26:	d001      	beq.n	26b2c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26b28:	2317      	movs	r3, #23
   26b2a:	e019      	b.n	26b60 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26b2c:	1cfb      	adds	r3, r7, #3
   26b2e:	781a      	ldrb	r2, [r3, #0]
   26b30:	4b0d      	ldr	r3, [pc, #52]	; (26b68 <extint_register_callback+0x60>)
   26b32:	0092      	lsls	r2, r2, #2
   26b34:	58d3      	ldr	r3, [r2, r3]
   26b36:	2b00      	cmp	r3, #0
   26b38:	d107      	bne.n	26b4a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26b3a:	1cfb      	adds	r3, r7, #3
   26b3c:	781a      	ldrb	r2, [r3, #0]
   26b3e:	4b0a      	ldr	r3, [pc, #40]	; (26b68 <extint_register_callback+0x60>)
   26b40:	0092      	lsls	r2, r2, #2
   26b42:	6879      	ldr	r1, [r7, #4]
   26b44:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   26b46:	2300      	movs	r3, #0
   26b48:	e00a      	b.n	26b60 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   26b4a:	1cfb      	adds	r3, r7, #3
   26b4c:	781a      	ldrb	r2, [r3, #0]
   26b4e:	4b06      	ldr	r3, [pc, #24]	; (26b68 <extint_register_callback+0x60>)
   26b50:	0092      	lsls	r2, r2, #2
   26b52:	58d2      	ldr	r2, [r2, r3]
   26b54:	687b      	ldr	r3, [r7, #4]
   26b56:	429a      	cmp	r2, r3
   26b58:	d101      	bne.n	26b5e <extint_register_callback+0x56>
		return STATUS_OK;
   26b5a:	2300      	movs	r3, #0
   26b5c:	e000      	b.n	26b60 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   26b5e:	231d      	movs	r3, #29
}
   26b60:	0018      	movs	r0, r3
   26b62:	46bd      	mov	sp, r7
   26b64:	b002      	add	sp, #8
   26b66:	bd80      	pop	{r7, pc}
   26b68:	20005d8c 	.word	0x20005d8c

00026b6c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26b6c:	b580      	push	{r7, lr}
   26b6e:	b084      	sub	sp, #16
   26b70:	af00      	add	r7, sp, #0
   26b72:	0002      	movs	r2, r0
   26b74:	1dfb      	adds	r3, r7, #7
   26b76:	701a      	strb	r2, [r3, #0]
   26b78:	1dbb      	adds	r3, r7, #6
   26b7a:	1c0a      	adds	r2, r1, #0
   26b7c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26b7e:	1dbb      	adds	r3, r7, #6
   26b80:	781b      	ldrb	r3, [r3, #0]
   26b82:	2b00      	cmp	r3, #0
   26b84:	d10e      	bne.n	26ba4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26b86:	1dfb      	adds	r3, r7, #7
   26b88:	781b      	ldrb	r3, [r3, #0]
   26b8a:	0018      	movs	r0, r3
   26b8c:	4b08      	ldr	r3, [pc, #32]	; (26bb0 <extint_chan_enable_callback+0x44>)
   26b8e:	4798      	blx	r3
   26b90:	0003      	movs	r3, r0
   26b92:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   26b94:	1dfb      	adds	r3, r7, #7
   26b96:	781b      	ldrb	r3, [r3, #0]
   26b98:	2201      	movs	r2, #1
   26b9a:	409a      	lsls	r2, r3
   26b9c:	68fb      	ldr	r3, [r7, #12]
   26b9e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26ba0:	2300      	movs	r3, #0
   26ba2:	e000      	b.n	26ba6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26ba4:	2317      	movs	r3, #23
}
   26ba6:	0018      	movs	r0, r3
   26ba8:	46bd      	mov	sp, r7
   26baa:	b004      	add	sp, #16
   26bac:	bd80      	pop	{r7, pc}
   26bae:	46c0      	nop			; (mov r8, r8)
   26bb0:	00026a3d 	.word	0x00026a3d

00026bb4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26bb4:	b580      	push	{r7, lr}
   26bb6:	b084      	sub	sp, #16
   26bb8:	af00      	add	r7, sp, #0
   26bba:	0002      	movs	r2, r0
   26bbc:	1dfb      	adds	r3, r7, #7
   26bbe:	701a      	strb	r2, [r3, #0]
   26bc0:	1dbb      	adds	r3, r7, #6
   26bc2:	1c0a      	adds	r2, r1, #0
   26bc4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26bc6:	1dbb      	adds	r3, r7, #6
   26bc8:	781b      	ldrb	r3, [r3, #0]
   26bca:	2b00      	cmp	r3, #0
   26bcc:	d10e      	bne.n	26bec <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26bce:	1dfb      	adds	r3, r7, #7
   26bd0:	781b      	ldrb	r3, [r3, #0]
   26bd2:	0018      	movs	r0, r3
   26bd4:	4b08      	ldr	r3, [pc, #32]	; (26bf8 <extint_chan_disable_callback+0x44>)
   26bd6:	4798      	blx	r3
   26bd8:	0003      	movs	r3, r0
   26bda:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   26bdc:	1dfb      	adds	r3, r7, #7
   26bde:	781b      	ldrb	r3, [r3, #0]
   26be0:	2201      	movs	r2, #1
   26be2:	409a      	lsls	r2, r3
   26be4:	68fb      	ldr	r3, [r7, #12]
   26be6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26be8:	2300      	movs	r3, #0
   26bea:	e000      	b.n	26bee <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26bec:	2317      	movs	r3, #23
}
   26bee:	0018      	movs	r0, r3
   26bf0:	46bd      	mov	sp, r7
   26bf2:	b004      	add	sp, #16
   26bf4:	bd80      	pop	{r7, pc}
   26bf6:	46c0      	nop			; (mov r8, r8)
   26bf8:	00026a3d 	.word	0x00026a3d

00026bfc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   26bfc:	b580      	push	{r7, lr}
   26bfe:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26c00:	4b15      	ldr	r3, [pc, #84]	; (26c58 <EIC_Handler+0x5c>)
   26c02:	2200      	movs	r2, #0
   26c04:	701a      	strb	r2, [r3, #0]
   26c06:	e020      	b.n	26c4a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26c08:	4b13      	ldr	r3, [pc, #76]	; (26c58 <EIC_Handler+0x5c>)
   26c0a:	781b      	ldrb	r3, [r3, #0]
   26c0c:	0018      	movs	r0, r3
   26c0e:	4b13      	ldr	r3, [pc, #76]	; (26c5c <EIC_Handler+0x60>)
   26c10:	4798      	blx	r3
   26c12:	1e03      	subs	r3, r0, #0
   26c14:	d013      	beq.n	26c3e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   26c16:	4b10      	ldr	r3, [pc, #64]	; (26c58 <EIC_Handler+0x5c>)
   26c18:	781b      	ldrb	r3, [r3, #0]
   26c1a:	0018      	movs	r0, r3
   26c1c:	4b10      	ldr	r3, [pc, #64]	; (26c60 <EIC_Handler+0x64>)
   26c1e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   26c20:	4b0d      	ldr	r3, [pc, #52]	; (26c58 <EIC_Handler+0x5c>)
   26c22:	781b      	ldrb	r3, [r3, #0]
   26c24:	001a      	movs	r2, r3
   26c26:	4b0f      	ldr	r3, [pc, #60]	; (26c64 <EIC_Handler+0x68>)
   26c28:	0092      	lsls	r2, r2, #2
   26c2a:	58d3      	ldr	r3, [r2, r3]
   26c2c:	2b00      	cmp	r3, #0
   26c2e:	d006      	beq.n	26c3e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   26c30:	4b09      	ldr	r3, [pc, #36]	; (26c58 <EIC_Handler+0x5c>)
   26c32:	781b      	ldrb	r3, [r3, #0]
   26c34:	001a      	movs	r2, r3
   26c36:	4b0b      	ldr	r3, [pc, #44]	; (26c64 <EIC_Handler+0x68>)
   26c38:	0092      	lsls	r2, r2, #2
   26c3a:	58d3      	ldr	r3, [r2, r3]
   26c3c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26c3e:	4b06      	ldr	r3, [pc, #24]	; (26c58 <EIC_Handler+0x5c>)
   26c40:	781b      	ldrb	r3, [r3, #0]
   26c42:	3301      	adds	r3, #1
   26c44:	b2da      	uxtb	r2, r3
   26c46:	4b04      	ldr	r3, [pc, #16]	; (26c58 <EIC_Handler+0x5c>)
   26c48:	701a      	strb	r2, [r3, #0]
   26c4a:	4b03      	ldr	r3, [pc, #12]	; (26c58 <EIC_Handler+0x5c>)
   26c4c:	781b      	ldrb	r3, [r3, #0]
   26c4e:	2b0f      	cmp	r3, #15
   26c50:	d9da      	bls.n	26c08 <EIC_Handler+0xc>
			}
		}
	}
}
   26c52:	46c0      	nop			; (mov r8, r8)
   26c54:	46bd      	mov	sp, r7
   26c56:	bd80      	pop	{r7, pc}
   26c58:	20005d88 	.word	0x20005d88
   26c5c:	00026a89 	.word	0x00026a89
   26c60:	00026acd 	.word	0x00026acd
   26c64:	20005d8c 	.word	0x20005d8c

00026c68 <system_gclk_chan_get_config_defaults>:
{
   26c68:	b580      	push	{r7, lr}
   26c6a:	b082      	sub	sp, #8
   26c6c:	af00      	add	r7, sp, #0
   26c6e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26c70:	687b      	ldr	r3, [r7, #4]
   26c72:	2200      	movs	r2, #0
   26c74:	701a      	strb	r2, [r3, #0]
}
   26c76:	46c0      	nop			; (mov r8, r8)
   26c78:	46bd      	mov	sp, r7
   26c7a:	b002      	add	sp, #8
   26c7c:	bd80      	pop	{r7, pc}
	...

00026c80 <system_apb_clock_set_mask>:
{
   26c80:	b580      	push	{r7, lr}
   26c82:	b082      	sub	sp, #8
   26c84:	af00      	add	r7, sp, #0
   26c86:	0002      	movs	r2, r0
   26c88:	6039      	str	r1, [r7, #0]
   26c8a:	1dfb      	adds	r3, r7, #7
   26c8c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26c8e:	1dfb      	adds	r3, r7, #7
   26c90:	781b      	ldrb	r3, [r3, #0]
   26c92:	2b01      	cmp	r3, #1
   26c94:	d00a      	beq.n	26cac <system_apb_clock_set_mask+0x2c>
   26c96:	2b02      	cmp	r3, #2
   26c98:	d00f      	beq.n	26cba <system_apb_clock_set_mask+0x3a>
   26c9a:	2b00      	cmp	r3, #0
   26c9c:	d114      	bne.n	26cc8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26c9e:	4b0e      	ldr	r3, [pc, #56]	; (26cd8 <system_apb_clock_set_mask+0x58>)
   26ca0:	4a0d      	ldr	r2, [pc, #52]	; (26cd8 <system_apb_clock_set_mask+0x58>)
   26ca2:	6991      	ldr	r1, [r2, #24]
   26ca4:	683a      	ldr	r2, [r7, #0]
   26ca6:	430a      	orrs	r2, r1
   26ca8:	619a      	str	r2, [r3, #24]
			break;
   26caa:	e00f      	b.n	26ccc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26cac:	4b0a      	ldr	r3, [pc, #40]	; (26cd8 <system_apb_clock_set_mask+0x58>)
   26cae:	4a0a      	ldr	r2, [pc, #40]	; (26cd8 <system_apb_clock_set_mask+0x58>)
   26cb0:	69d1      	ldr	r1, [r2, #28]
   26cb2:	683a      	ldr	r2, [r7, #0]
   26cb4:	430a      	orrs	r2, r1
   26cb6:	61da      	str	r2, [r3, #28]
			break;
   26cb8:	e008      	b.n	26ccc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26cba:	4b07      	ldr	r3, [pc, #28]	; (26cd8 <system_apb_clock_set_mask+0x58>)
   26cbc:	4a06      	ldr	r2, [pc, #24]	; (26cd8 <system_apb_clock_set_mask+0x58>)
   26cbe:	6a11      	ldr	r1, [r2, #32]
   26cc0:	683a      	ldr	r2, [r7, #0]
   26cc2:	430a      	orrs	r2, r1
   26cc4:	621a      	str	r2, [r3, #32]
			break;
   26cc6:	e001      	b.n	26ccc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26cc8:	2317      	movs	r3, #23
   26cca:	e000      	b.n	26cce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26ccc:	2300      	movs	r3, #0
}
   26cce:	0018      	movs	r0, r3
   26cd0:	46bd      	mov	sp, r7
   26cd2:	b002      	add	sp, #8
   26cd4:	bd80      	pop	{r7, pc}
   26cd6:	46c0      	nop			; (mov r8, r8)
   26cd8:	40000400 	.word	0x40000400

00026cdc <system_pinmux_get_config_defaults>:
{
   26cdc:	b580      	push	{r7, lr}
   26cde:	b082      	sub	sp, #8
   26ce0:	af00      	add	r7, sp, #0
   26ce2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26ce4:	687b      	ldr	r3, [r7, #4]
   26ce6:	2280      	movs	r2, #128	; 0x80
   26ce8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26cea:	687b      	ldr	r3, [r7, #4]
   26cec:	2200      	movs	r2, #0
   26cee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26cf0:	687b      	ldr	r3, [r7, #4]
   26cf2:	2201      	movs	r2, #1
   26cf4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26cf6:	687b      	ldr	r3, [r7, #4]
   26cf8:	2200      	movs	r2, #0
   26cfa:	70da      	strb	r2, [r3, #3]
}
   26cfc:	46c0      	nop			; (mov r8, r8)
   26cfe:	46bd      	mov	sp, r7
   26d00:	b002      	add	sp, #8
   26d02:	bd80      	pop	{r7, pc}

00026d04 <system_interrupt_enable>:
{
   26d04:	b580      	push	{r7, lr}
   26d06:	b082      	sub	sp, #8
   26d08:	af00      	add	r7, sp, #0
   26d0a:	0002      	movs	r2, r0
   26d0c:	1dfb      	adds	r3, r7, #7
   26d0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26d10:	4b06      	ldr	r3, [pc, #24]	; (26d2c <system_interrupt_enable+0x28>)
   26d12:	1dfa      	adds	r2, r7, #7
   26d14:	7812      	ldrb	r2, [r2, #0]
   26d16:	0011      	movs	r1, r2
   26d18:	221f      	movs	r2, #31
   26d1a:	400a      	ands	r2, r1
   26d1c:	2101      	movs	r1, #1
   26d1e:	4091      	lsls	r1, r2
   26d20:	000a      	movs	r2, r1
   26d22:	601a      	str	r2, [r3, #0]
}
   26d24:	46c0      	nop			; (mov r8, r8)
   26d26:	46bd      	mov	sp, r7
   26d28:	b002      	add	sp, #8
   26d2a:	bd80      	pop	{r7, pc}
   26d2c:	e000e100 	.word	0xe000e100

00026d30 <_extint_get_eic_from_channel>:
{
   26d30:	b580      	push	{r7, lr}
   26d32:	b084      	sub	sp, #16
   26d34:	af00      	add	r7, sp, #0
   26d36:	0002      	movs	r2, r0
   26d38:	1dfb      	adds	r3, r7, #7
   26d3a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26d3c:	230f      	movs	r3, #15
   26d3e:	18fb      	adds	r3, r7, r3
   26d40:	1dfa      	adds	r2, r7, #7
   26d42:	7812      	ldrb	r2, [r2, #0]
   26d44:	0952      	lsrs	r2, r2, #5
   26d46:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26d48:	230f      	movs	r3, #15
   26d4a:	18fb      	adds	r3, r7, r3
   26d4c:	781b      	ldrb	r3, [r3, #0]
   26d4e:	2b00      	cmp	r3, #0
   26d50:	d10c      	bne.n	26d6c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26d52:	4b09      	ldr	r3, [pc, #36]	; (26d78 <_extint_get_eic_from_channel+0x48>)
   26d54:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   26d56:	230f      	movs	r3, #15
   26d58:	18fb      	adds	r3, r7, r3
   26d5a:	781b      	ldrb	r3, [r3, #0]
   26d5c:	009b      	lsls	r3, r3, #2
   26d5e:	2210      	movs	r2, #16
   26d60:	4694      	mov	ip, r2
   26d62:	44bc      	add	ip, r7
   26d64:	4463      	add	r3, ip
   26d66:	3b08      	subs	r3, #8
   26d68:	681b      	ldr	r3, [r3, #0]
   26d6a:	e000      	b.n	26d6e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   26d6c:	2300      	movs	r3, #0
}
   26d6e:	0018      	movs	r0, r3
   26d70:	46bd      	mov	sp, r7
   26d72:	b004      	add	sp, #16
   26d74:	bd80      	pop	{r7, pc}
   26d76:	46c0      	nop			; (mov r8, r8)
   26d78:	40001800 	.word	0x40001800

00026d7c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26d7c:	b580      	push	{r7, lr}
   26d7e:	b082      	sub	sp, #8
   26d80:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26d82:	4b0f      	ldr	r3, [pc, #60]	; (26dc0 <extint_is_syncing+0x44>)
   26d84:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26d86:	2300      	movs	r3, #0
   26d88:	607b      	str	r3, [r7, #4]
   26d8a:	e011      	b.n	26db0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26d8c:	687b      	ldr	r3, [r7, #4]
   26d8e:	009b      	lsls	r3, r3, #2
   26d90:	2208      	movs	r2, #8
   26d92:	4694      	mov	ip, r2
   26d94:	44bc      	add	ip, r7
   26d96:	4463      	add	r3, ip
   26d98:	3b08      	subs	r3, #8
   26d9a:	681b      	ldr	r3, [r3, #0]
   26d9c:	785b      	ldrb	r3, [r3, #1]
   26d9e:	b2db      	uxtb	r3, r3
   26da0:	b25b      	sxtb	r3, r3
   26da2:	2b00      	cmp	r3, #0
   26da4:	da01      	bge.n	26daa <extint_is_syncing+0x2e>
			return true;
   26da6:	2301      	movs	r3, #1
   26da8:	e006      	b.n	26db8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26daa:	687b      	ldr	r3, [r7, #4]
   26dac:	3301      	adds	r3, #1
   26dae:	607b      	str	r3, [r7, #4]
   26db0:	687b      	ldr	r3, [r7, #4]
   26db2:	2b00      	cmp	r3, #0
   26db4:	d0ea      	beq.n	26d8c <extint_is_syncing+0x10>
		}
	}
	return false;
   26db6:	2300      	movs	r3, #0
}
   26db8:	0018      	movs	r0, r3
   26dba:	46bd      	mov	sp, r7
   26dbc:	b002      	add	sp, #8
   26dbe:	bd80      	pop	{r7, pc}
   26dc0:	40001800 	.word	0x40001800

00026dc4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   26dc4:	b580      	push	{r7, lr}
   26dc6:	b084      	sub	sp, #16
   26dc8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26dca:	4b2d      	ldr	r3, [pc, #180]	; (26e80 <_system_extint_init+0xbc>)
   26dcc:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26dce:	2140      	movs	r1, #64	; 0x40
   26dd0:	2000      	movs	r0, #0
   26dd2:	4b2c      	ldr	r3, [pc, #176]	; (26e84 <_system_extint_init+0xc0>)
   26dd4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26dd6:	003b      	movs	r3, r7
   26dd8:	0018      	movs	r0, r3
   26dda:	4b2b      	ldr	r3, [pc, #172]	; (26e88 <_system_extint_init+0xc4>)
   26ddc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   26dde:	003b      	movs	r3, r7
   26de0:	2200      	movs	r2, #0
   26de2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   26de4:	003b      	movs	r3, r7
   26de6:	0019      	movs	r1, r3
   26de8:	2005      	movs	r0, #5
   26dea:	4b28      	ldr	r3, [pc, #160]	; (26e8c <_system_extint_init+0xc8>)
   26dec:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   26dee:	2005      	movs	r0, #5
   26df0:	4b27      	ldr	r3, [pc, #156]	; (26e90 <_system_extint_init+0xcc>)
   26df2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26df4:	2300      	movs	r3, #0
   26df6:	60fb      	str	r3, [r7, #12]
   26df8:	e018      	b.n	26e2c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26dfa:	68fb      	ldr	r3, [r7, #12]
   26dfc:	009b      	lsls	r3, r3, #2
   26dfe:	2210      	movs	r2, #16
   26e00:	4694      	mov	ip, r2
   26e02:	44bc      	add	ip, r7
   26e04:	4463      	add	r3, ip
   26e06:	3b0c      	subs	r3, #12
   26e08:	681a      	ldr	r2, [r3, #0]
   26e0a:	68fb      	ldr	r3, [r7, #12]
   26e0c:	009b      	lsls	r3, r3, #2
   26e0e:	2110      	movs	r1, #16
   26e10:	468c      	mov	ip, r1
   26e12:	44bc      	add	ip, r7
   26e14:	4463      	add	r3, ip
   26e16:	3b0c      	subs	r3, #12
   26e18:	681b      	ldr	r3, [r3, #0]
   26e1a:	781b      	ldrb	r3, [r3, #0]
   26e1c:	b2db      	uxtb	r3, r3
   26e1e:	2101      	movs	r1, #1
   26e20:	430b      	orrs	r3, r1
   26e22:	b2db      	uxtb	r3, r3
   26e24:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26e26:	68fb      	ldr	r3, [r7, #12]
   26e28:	3301      	adds	r3, #1
   26e2a:	60fb      	str	r3, [r7, #12]
   26e2c:	68fb      	ldr	r3, [r7, #12]
   26e2e:	2b00      	cmp	r3, #0
   26e30:	d0e3      	beq.n	26dfa <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   26e32:	46c0      	nop			; (mov r8, r8)
   26e34:	4b17      	ldr	r3, [pc, #92]	; (26e94 <_system_extint_init+0xd0>)
   26e36:	4798      	blx	r3
   26e38:	1e03      	subs	r3, r0, #0
   26e3a:	d1fb      	bne.n	26e34 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26e3c:	230b      	movs	r3, #11
   26e3e:	18fb      	adds	r3, r7, r3
   26e40:	2200      	movs	r2, #0
   26e42:	701a      	strb	r2, [r3, #0]
   26e44:	e00d      	b.n	26e62 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   26e46:	230b      	movs	r3, #11
   26e48:	18fb      	adds	r3, r7, r3
   26e4a:	781a      	ldrb	r2, [r3, #0]
   26e4c:	4b12      	ldr	r3, [pc, #72]	; (26e98 <_system_extint_init+0xd4>)
   26e4e:	0092      	lsls	r2, r2, #2
   26e50:	2100      	movs	r1, #0
   26e52:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26e54:	230b      	movs	r3, #11
   26e56:	18fb      	adds	r3, r7, r3
   26e58:	781a      	ldrb	r2, [r3, #0]
   26e5a:	230b      	movs	r3, #11
   26e5c:	18fb      	adds	r3, r7, r3
   26e5e:	3201      	adds	r2, #1
   26e60:	701a      	strb	r2, [r3, #0]
   26e62:	230b      	movs	r3, #11
   26e64:	18fb      	adds	r3, r7, r3
   26e66:	781b      	ldrb	r3, [r3, #0]
   26e68:	2b0f      	cmp	r3, #15
   26e6a:	d9ec      	bls.n	26e46 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   26e6c:	2004      	movs	r0, #4
   26e6e:	4b0b      	ldr	r3, [pc, #44]	; (26e9c <_system_extint_init+0xd8>)
   26e70:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   26e72:	4b0b      	ldr	r3, [pc, #44]	; (26ea0 <_system_extint_init+0xdc>)
   26e74:	4798      	blx	r3
}
   26e76:	46c0      	nop			; (mov r8, r8)
   26e78:	46bd      	mov	sp, r7
   26e7a:	b004      	add	sp, #16
   26e7c:	bd80      	pop	{r7, pc}
   26e7e:	46c0      	nop			; (mov r8, r8)
   26e80:	40001800 	.word	0x40001800
   26e84:	00026c81 	.word	0x00026c81
   26e88:	00026c69 	.word	0x00026c69
   26e8c:	0002a4f1 	.word	0x0002a4f1
   26e90:	0002a535 	.word	0x0002a535
   26e94:	00026d7d 	.word	0x00026d7d
   26e98:	20005d8c 	.word	0x20005d8c
   26e9c:	00026d05 	.word	0x00026d05
   26ea0:	00026ea5 	.word	0x00026ea5

00026ea4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26ea4:	b580      	push	{r7, lr}
   26ea6:	b082      	sub	sp, #8
   26ea8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26eaa:	4b15      	ldr	r3, [pc, #84]	; (26f00 <_extint_enable+0x5c>)
   26eac:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26eae:	2300      	movs	r3, #0
   26eb0:	607b      	str	r3, [r7, #4]
   26eb2:	e018      	b.n	26ee6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26eb4:	687b      	ldr	r3, [r7, #4]
   26eb6:	009b      	lsls	r3, r3, #2
   26eb8:	2208      	movs	r2, #8
   26eba:	4694      	mov	ip, r2
   26ebc:	44bc      	add	ip, r7
   26ebe:	4463      	add	r3, ip
   26ec0:	3b08      	subs	r3, #8
   26ec2:	681a      	ldr	r2, [r3, #0]
   26ec4:	687b      	ldr	r3, [r7, #4]
   26ec6:	009b      	lsls	r3, r3, #2
   26ec8:	2108      	movs	r1, #8
   26eca:	468c      	mov	ip, r1
   26ecc:	44bc      	add	ip, r7
   26ece:	4463      	add	r3, ip
   26ed0:	3b08      	subs	r3, #8
   26ed2:	681b      	ldr	r3, [r3, #0]
   26ed4:	781b      	ldrb	r3, [r3, #0]
   26ed6:	b2db      	uxtb	r3, r3
   26ed8:	2102      	movs	r1, #2
   26eda:	430b      	orrs	r3, r1
   26edc:	b2db      	uxtb	r3, r3
   26ede:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26ee0:	687b      	ldr	r3, [r7, #4]
   26ee2:	3301      	adds	r3, #1
   26ee4:	607b      	str	r3, [r7, #4]
   26ee6:	687b      	ldr	r3, [r7, #4]
   26ee8:	2b00      	cmp	r3, #0
   26eea:	d0e3      	beq.n	26eb4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26eec:	46c0      	nop			; (mov r8, r8)
   26eee:	4b05      	ldr	r3, [pc, #20]	; (26f04 <_extint_enable+0x60>)
   26ef0:	4798      	blx	r3
   26ef2:	1e03      	subs	r3, r0, #0
   26ef4:	d1fb      	bne.n	26eee <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26ef6:	46c0      	nop			; (mov r8, r8)
   26ef8:	46bd      	mov	sp, r7
   26efa:	b002      	add	sp, #8
   26efc:	bd80      	pop	{r7, pc}
   26efe:	46c0      	nop			; (mov r8, r8)
   26f00:	40001800 	.word	0x40001800
   26f04:	00026d7d 	.word	0x00026d7d

00026f08 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26f08:	b580      	push	{r7, lr}
   26f0a:	b082      	sub	sp, #8
   26f0c:	af00      	add	r7, sp, #0
   26f0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26f10:	687b      	ldr	r3, [r7, #4]
   26f12:	2200      	movs	r2, #0
   26f14:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26f16:	687b      	ldr	r3, [r7, #4]
   26f18:	2200      	movs	r2, #0
   26f1a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26f1c:	687b      	ldr	r3, [r7, #4]
   26f1e:	2201      	movs	r2, #1
   26f20:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   26f22:	687b      	ldr	r3, [r7, #4]
   26f24:	2201      	movs	r2, #1
   26f26:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26f28:	687b      	ldr	r3, [r7, #4]
   26f2a:	2200      	movs	r2, #0
   26f2c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26f2e:	687b      	ldr	r3, [r7, #4]
   26f30:	2202      	movs	r2, #2
   26f32:	72da      	strb	r2, [r3, #11]
}
   26f34:	46c0      	nop			; (mov r8, r8)
   26f36:	46bd      	mov	sp, r7
   26f38:	b002      	add	sp, #8
   26f3a:	bd80      	pop	{r7, pc}

00026f3c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26f3c:	b580      	push	{r7, lr}
   26f3e:	b086      	sub	sp, #24
   26f40:	af00      	add	r7, sp, #0
   26f42:	0002      	movs	r2, r0
   26f44:	6039      	str	r1, [r7, #0]
   26f46:	1dfb      	adds	r3, r7, #7
   26f48:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26f4a:	2308      	movs	r3, #8
   26f4c:	18fb      	adds	r3, r7, r3
   26f4e:	0018      	movs	r0, r3
   26f50:	4b36      	ldr	r3, [pc, #216]	; (2702c <extint_chan_set_config+0xf0>)
   26f52:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   26f54:	683b      	ldr	r3, [r7, #0]
   26f56:	685b      	ldr	r3, [r3, #4]
   26f58:	b2da      	uxtb	r2, r3
   26f5a:	2308      	movs	r3, #8
   26f5c:	18fb      	adds	r3, r7, r3
   26f5e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26f60:	2308      	movs	r3, #8
   26f62:	18fb      	adds	r3, r7, r3
   26f64:	2200      	movs	r2, #0
   26f66:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26f68:	683b      	ldr	r3, [r7, #0]
   26f6a:	7a1a      	ldrb	r2, [r3, #8]
   26f6c:	2308      	movs	r3, #8
   26f6e:	18fb      	adds	r3, r7, r3
   26f70:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   26f72:	683b      	ldr	r3, [r7, #0]
   26f74:	681b      	ldr	r3, [r3, #0]
   26f76:	b2db      	uxtb	r3, r3
   26f78:	2208      	movs	r2, #8
   26f7a:	18ba      	adds	r2, r7, r2
   26f7c:	0011      	movs	r1, r2
   26f7e:	0018      	movs	r0, r3
   26f80:	4b2b      	ldr	r3, [pc, #172]	; (27030 <extint_chan_set_config+0xf4>)
   26f82:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26f84:	1dfb      	adds	r3, r7, #7
   26f86:	781b      	ldrb	r3, [r3, #0]
   26f88:	0018      	movs	r0, r3
   26f8a:	4b2a      	ldr	r3, [pc, #168]	; (27034 <extint_chan_set_config+0xf8>)
   26f8c:	4798      	blx	r3
   26f8e:	0003      	movs	r3, r0
   26f90:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   26f92:	1dfb      	adds	r3, r7, #7
   26f94:	781b      	ldrb	r3, [r3, #0]
   26f96:	2207      	movs	r2, #7
   26f98:	4013      	ands	r3, r2
   26f9a:	009b      	lsls	r3, r3, #2
   26f9c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26f9e:	683b      	ldr	r3, [r7, #0]
   26fa0:	7adb      	ldrb	r3, [r3, #11]
   26fa2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26fa4:	683b      	ldr	r3, [r7, #0]
   26fa6:	7a9b      	ldrb	r3, [r3, #10]
   26fa8:	2b00      	cmp	r3, #0
   26faa:	d003      	beq.n	26fb4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26fac:	697b      	ldr	r3, [r7, #20]
   26fae:	2208      	movs	r2, #8
   26fb0:	4313      	orrs	r3, r2
   26fb2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26fb4:	1dfb      	adds	r3, r7, #7
   26fb6:	781b      	ldrb	r3, [r3, #0]
   26fb8:	08db      	lsrs	r3, r3, #3
   26fba:	b2db      	uxtb	r3, r3
   26fbc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26fbe:	1dfb      	adds	r3, r7, #7
   26fc0:	781b      	ldrb	r3, [r3, #0]
   26fc2:	08db      	lsrs	r3, r3, #3
   26fc4:	b2db      	uxtb	r3, r3
   26fc6:	001a      	movs	r2, r3
   26fc8:	693b      	ldr	r3, [r7, #16]
   26fca:	3206      	adds	r2, #6
   26fcc:	0092      	lsls	r2, r2, #2
   26fce:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26fd0:	210f      	movs	r1, #15
   26fd2:	68fa      	ldr	r2, [r7, #12]
   26fd4:	4091      	lsls	r1, r2
   26fd6:	000a      	movs	r2, r1
   26fd8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26fda:	401a      	ands	r2, r3
			(new_config << config_pos);
   26fdc:	6979      	ldr	r1, [r7, #20]
   26fde:	68fb      	ldr	r3, [r7, #12]
   26fe0:	4099      	lsls	r1, r3
   26fe2:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26fe4:	431a      	orrs	r2, r3
   26fe6:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26fe8:	693b      	ldr	r3, [r7, #16]
   26fea:	1d82      	adds	r2, r0, #6
   26fec:	0092      	lsls	r2, r2, #2
   26fee:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26ff0:	683b      	ldr	r3, [r7, #0]
   26ff2:	7a5b      	ldrb	r3, [r3, #9]
   26ff4:	2b00      	cmp	r3, #0
   26ff6:	d00a      	beq.n	2700e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26ff8:	693b      	ldr	r3, [r7, #16]
   26ffa:	695a      	ldr	r2, [r3, #20]
   26ffc:	1dfb      	adds	r3, r7, #7
   26ffe:	781b      	ldrb	r3, [r3, #0]
   27000:	2101      	movs	r1, #1
   27002:	4099      	lsls	r1, r3
   27004:	000b      	movs	r3, r1
   27006:	431a      	orrs	r2, r3
   27008:	693b      	ldr	r3, [r7, #16]
   2700a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   2700c:	e00a      	b.n	27024 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2700e:	693b      	ldr	r3, [r7, #16]
   27010:	695b      	ldr	r3, [r3, #20]
   27012:	1dfa      	adds	r2, r7, #7
   27014:	7812      	ldrb	r2, [r2, #0]
   27016:	2101      	movs	r1, #1
   27018:	4091      	lsls	r1, r2
   2701a:	000a      	movs	r2, r1
   2701c:	43d2      	mvns	r2, r2
   2701e:	401a      	ands	r2, r3
   27020:	693b      	ldr	r3, [r7, #16]
   27022:	615a      	str	r2, [r3, #20]
}
   27024:	46c0      	nop			; (mov r8, r8)
   27026:	46bd      	mov	sp, r7
   27028:	b006      	add	sp, #24
   2702a:	bd80      	pop	{r7, pc}
   2702c:	00026cdd 	.word	0x00026cdd
   27030:	0002a851 	.word	0x0002a851
   27034:	00026d31 	.word	0x00026d31

00027038 <system_pinmux_get_config_defaults>:
{
   27038:	b580      	push	{r7, lr}
   2703a:	b082      	sub	sp, #8
   2703c:	af00      	add	r7, sp, #0
   2703e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27040:	687b      	ldr	r3, [r7, #4]
   27042:	2280      	movs	r2, #128	; 0x80
   27044:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27046:	687b      	ldr	r3, [r7, #4]
   27048:	2200      	movs	r2, #0
   2704a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2704c:	687b      	ldr	r3, [r7, #4]
   2704e:	2201      	movs	r2, #1
   27050:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27052:	687b      	ldr	r3, [r7, #4]
   27054:	2200      	movs	r2, #0
   27056:	70da      	strb	r2, [r3, #3]
}
   27058:	46c0      	nop			; (mov r8, r8)
   2705a:	46bd      	mov	sp, r7
   2705c:	b002      	add	sp, #8
   2705e:	bd80      	pop	{r7, pc}

00027060 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   27060:	b580      	push	{r7, lr}
   27062:	b084      	sub	sp, #16
   27064:	af00      	add	r7, sp, #0
   27066:	0002      	movs	r2, r0
   27068:	6039      	str	r1, [r7, #0]
   2706a:	1dfb      	adds	r3, r7, #7
   2706c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2706e:	230c      	movs	r3, #12
   27070:	18fb      	adds	r3, r7, r3
   27072:	0018      	movs	r0, r3
   27074:	4b10      	ldr	r3, [pc, #64]	; (270b8 <port_pin_set_config+0x58>)
   27076:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27078:	230c      	movs	r3, #12
   2707a:	18fb      	adds	r3, r7, r3
   2707c:	2280      	movs	r2, #128	; 0x80
   2707e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   27080:	683b      	ldr	r3, [r7, #0]
   27082:	781a      	ldrb	r2, [r3, #0]
   27084:	230c      	movs	r3, #12
   27086:	18fb      	adds	r3, r7, r3
   27088:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2708a:	683b      	ldr	r3, [r7, #0]
   2708c:	785a      	ldrb	r2, [r3, #1]
   2708e:	230c      	movs	r3, #12
   27090:	18fb      	adds	r3, r7, r3
   27092:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   27094:	683b      	ldr	r3, [r7, #0]
   27096:	789a      	ldrb	r2, [r3, #2]
   27098:	230c      	movs	r3, #12
   2709a:	18fb      	adds	r3, r7, r3
   2709c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2709e:	230c      	movs	r3, #12
   270a0:	18fa      	adds	r2, r7, r3
   270a2:	1dfb      	adds	r3, r7, #7
   270a4:	781b      	ldrb	r3, [r3, #0]
   270a6:	0011      	movs	r1, r2
   270a8:	0018      	movs	r0, r3
   270aa:	4b04      	ldr	r3, [pc, #16]	; (270bc <port_pin_set_config+0x5c>)
   270ac:	4798      	blx	r3
}
   270ae:	46c0      	nop			; (mov r8, r8)
   270b0:	46bd      	mov	sp, r7
   270b2:	b004      	add	sp, #16
   270b4:	bd80      	pop	{r7, pc}
   270b6:	46c0      	nop			; (mov r8, r8)
   270b8:	00027039 	.word	0x00027039
   270bc:	0002a851 	.word	0x0002a851

000270c0 <system_gclk_chan_get_config_defaults>:
{
   270c0:	b580      	push	{r7, lr}
   270c2:	b082      	sub	sp, #8
   270c4:	af00      	add	r7, sp, #0
   270c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   270c8:	687b      	ldr	r3, [r7, #4]
   270ca:	2200      	movs	r2, #0
   270cc:	701a      	strb	r2, [r3, #0]
}
   270ce:	46c0      	nop			; (mov r8, r8)
   270d0:	46bd      	mov	sp, r7
   270d2:	b002      	add	sp, #8
   270d4:	bd80      	pop	{r7, pc}
	...

000270d8 <system_apb_clock_set_mask>:
{
   270d8:	b580      	push	{r7, lr}
   270da:	b082      	sub	sp, #8
   270dc:	af00      	add	r7, sp, #0
   270de:	0002      	movs	r2, r0
   270e0:	6039      	str	r1, [r7, #0]
   270e2:	1dfb      	adds	r3, r7, #7
   270e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   270e6:	1dfb      	adds	r3, r7, #7
   270e8:	781b      	ldrb	r3, [r3, #0]
   270ea:	2b01      	cmp	r3, #1
   270ec:	d00a      	beq.n	27104 <system_apb_clock_set_mask+0x2c>
   270ee:	2b02      	cmp	r3, #2
   270f0:	d00f      	beq.n	27112 <system_apb_clock_set_mask+0x3a>
   270f2:	2b00      	cmp	r3, #0
   270f4:	d114      	bne.n	27120 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   270f6:	4b0e      	ldr	r3, [pc, #56]	; (27130 <system_apb_clock_set_mask+0x58>)
   270f8:	4a0d      	ldr	r2, [pc, #52]	; (27130 <system_apb_clock_set_mask+0x58>)
   270fa:	6991      	ldr	r1, [r2, #24]
   270fc:	683a      	ldr	r2, [r7, #0]
   270fe:	430a      	orrs	r2, r1
   27100:	619a      	str	r2, [r3, #24]
			break;
   27102:	e00f      	b.n	27124 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27104:	4b0a      	ldr	r3, [pc, #40]	; (27130 <system_apb_clock_set_mask+0x58>)
   27106:	4a0a      	ldr	r2, [pc, #40]	; (27130 <system_apb_clock_set_mask+0x58>)
   27108:	69d1      	ldr	r1, [r2, #28]
   2710a:	683a      	ldr	r2, [r7, #0]
   2710c:	430a      	orrs	r2, r1
   2710e:	61da      	str	r2, [r3, #28]
			break;
   27110:	e008      	b.n	27124 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27112:	4b07      	ldr	r3, [pc, #28]	; (27130 <system_apb_clock_set_mask+0x58>)
   27114:	4a06      	ldr	r2, [pc, #24]	; (27130 <system_apb_clock_set_mask+0x58>)
   27116:	6a11      	ldr	r1, [r2, #32]
   27118:	683a      	ldr	r2, [r7, #0]
   2711a:	430a      	orrs	r2, r1
   2711c:	621a      	str	r2, [r3, #32]
			break;
   2711e:	e001      	b.n	27124 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27120:	2317      	movs	r3, #23
   27122:	e000      	b.n	27126 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27124:	2300      	movs	r3, #0
}
   27126:	0018      	movs	r0, r3
   27128:	46bd      	mov	sp, r7
   2712a:	b002      	add	sp, #8
   2712c:	bd80      	pop	{r7, pc}
   2712e:	46c0      	nop			; (mov r8, r8)
   27130:	40000400 	.word	0x40000400

00027134 <system_interrupt_enable>:
{
   27134:	b580      	push	{r7, lr}
   27136:	b082      	sub	sp, #8
   27138:	af00      	add	r7, sp, #0
   2713a:	0002      	movs	r2, r0
   2713c:	1dfb      	adds	r3, r7, #7
   2713e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27140:	4b06      	ldr	r3, [pc, #24]	; (2715c <system_interrupt_enable+0x28>)
   27142:	1dfa      	adds	r2, r7, #7
   27144:	7812      	ldrb	r2, [r2, #0]
   27146:	0011      	movs	r1, r2
   27148:	221f      	movs	r2, #31
   2714a:	400a      	ands	r2, r1
   2714c:	2101      	movs	r1, #1
   2714e:	4091      	lsls	r1, r2
   27150:	000a      	movs	r2, r1
   27152:	601a      	str	r2, [r3, #0]
}
   27154:	46c0      	nop			; (mov r8, r8)
   27156:	46bd      	mov	sp, r7
   27158:	b002      	add	sp, #8
   2715a:	bd80      	pop	{r7, pc}
   2715c:	e000e100 	.word	0xe000e100

00027160 <system_interrupt_disable>:
{
   27160:	b580      	push	{r7, lr}
   27162:	b082      	sub	sp, #8
   27164:	af00      	add	r7, sp, #0
   27166:	0002      	movs	r2, r0
   27168:	1dfb      	adds	r3, r7, #7
   2716a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2716c:	4a07      	ldr	r2, [pc, #28]	; (2718c <system_interrupt_disable+0x2c>)
   2716e:	1dfb      	adds	r3, r7, #7
   27170:	781b      	ldrb	r3, [r3, #0]
   27172:	0019      	movs	r1, r3
   27174:	231f      	movs	r3, #31
   27176:	400b      	ands	r3, r1
   27178:	2101      	movs	r1, #1
   2717a:	4099      	lsls	r1, r3
   2717c:	000b      	movs	r3, r1
   2717e:	0019      	movs	r1, r3
   27180:	2380      	movs	r3, #128	; 0x80
   27182:	50d1      	str	r1, [r2, r3]
}
   27184:	46c0      	nop			; (mov r8, r8)
   27186:	46bd      	mov	sp, r7
   27188:	b002      	add	sp, #8
   2718a:	bd80      	pop	{r7, pc}
   2718c:	e000e100 	.word	0xe000e100

00027190 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   27190:	b580      	push	{r7, lr}
   27192:	b084      	sub	sp, #16
   27194:	af00      	add	r7, sp, #0
   27196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27198:	687b      	ldr	r3, [r7, #4]
   2719a:	681b      	ldr	r3, [r3, #0]
   2719c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2719e:	68fb      	ldr	r3, [r7, #12]
   271a0:	7a9b      	ldrb	r3, [r3, #10]
   271a2:	b2db      	uxtb	r3, r3
   271a4:	b25b      	sxtb	r3, r3
   271a6:	2b00      	cmp	r3, #0
   271a8:	da01      	bge.n	271ae <rtc_calendar_is_syncing+0x1e>
                return true;
   271aa:	2301      	movs	r3, #1
   271ac:	e000      	b.n	271b0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   271ae:	2300      	movs	r3, #0
}
   271b0:	0018      	movs	r0, r3
   271b2:	46bd      	mov	sp, r7
   271b4:	b004      	add	sp, #16
   271b6:	bd80      	pop	{r7, pc}

000271b8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   271b8:	b580      	push	{r7, lr}
   271ba:	b084      	sub	sp, #16
   271bc:	af00      	add	r7, sp, #0
   271be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   271c0:	687b      	ldr	r3, [r7, #4]
   271c2:	681b      	ldr	r3, [r3, #0]
   271c4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   271c6:	2003      	movs	r0, #3
   271c8:	4b0a      	ldr	r3, [pc, #40]	; (271f4 <rtc_calendar_enable+0x3c>)
   271ca:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   271cc:	46c0      	nop			; (mov r8, r8)
   271ce:	687b      	ldr	r3, [r7, #4]
   271d0:	0018      	movs	r0, r3
   271d2:	4b09      	ldr	r3, [pc, #36]	; (271f8 <rtc_calendar_enable+0x40>)
   271d4:	4798      	blx	r3
   271d6:	1e03      	subs	r3, r0, #0
   271d8:	d1f9      	bne.n	271ce <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   271da:	68fb      	ldr	r3, [r7, #12]
   271dc:	881b      	ldrh	r3, [r3, #0]
   271de:	b29b      	uxth	r3, r3
   271e0:	2202      	movs	r2, #2
   271e2:	4313      	orrs	r3, r2
   271e4:	b29a      	uxth	r2, r3
   271e6:	68fb      	ldr	r3, [r7, #12]
   271e8:	801a      	strh	r2, [r3, #0]
}
   271ea:	46c0      	nop			; (mov r8, r8)
   271ec:	46bd      	mov	sp, r7
   271ee:	b004      	add	sp, #16
   271f0:	bd80      	pop	{r7, pc}
   271f2:	46c0      	nop			; (mov r8, r8)
   271f4:	00027135 	.word	0x00027135
   271f8:	00027191 	.word	0x00027191

000271fc <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   271fc:	b580      	push	{r7, lr}
   271fe:	b084      	sub	sp, #16
   27200:	af00      	add	r7, sp, #0
   27202:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27204:	687b      	ldr	r3, [r7, #4]
   27206:	681b      	ldr	r3, [r3, #0]
   27208:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   2720a:	2003      	movs	r0, #3
   2720c:	4b0d      	ldr	r3, [pc, #52]	; (27244 <rtc_calendar_disable+0x48>)
   2720e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27210:	46c0      	nop			; (mov r8, r8)
   27212:	687b      	ldr	r3, [r7, #4]
   27214:	0018      	movs	r0, r3
   27216:	4b0c      	ldr	r3, [pc, #48]	; (27248 <rtc_calendar_disable+0x4c>)
   27218:	4798      	blx	r3
   2721a:	1e03      	subs	r3, r0, #0
   2721c:	d1f9      	bne.n	27212 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2721e:	68fb      	ldr	r3, [r7, #12]
   27220:	22c1      	movs	r2, #193	; 0xc1
   27222:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   27224:	68fb      	ldr	r3, [r7, #12]
   27226:	22c1      	movs	r2, #193	; 0xc1
   27228:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   2722a:	68fb      	ldr	r3, [r7, #12]
   2722c:	881b      	ldrh	r3, [r3, #0]
   2722e:	b29b      	uxth	r3, r3
   27230:	2202      	movs	r2, #2
   27232:	4393      	bics	r3, r2
   27234:	b29a      	uxth	r2, r3
   27236:	68fb      	ldr	r3, [r7, #12]
   27238:	801a      	strh	r2, [r3, #0]
}
   2723a:	46c0      	nop			; (mov r8, r8)
   2723c:	46bd      	mov	sp, r7
   2723e:	b004      	add	sp, #16
   27240:	bd80      	pop	{r7, pc}
   27242:	46c0      	nop			; (mov r8, r8)
   27244:	00027161 	.word	0x00027161
   27248:	00027191 	.word	0x00027191

0002724c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   2724c:	b580      	push	{r7, lr}
   2724e:	b084      	sub	sp, #16
   27250:	af00      	add	r7, sp, #0
   27252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27254:	687b      	ldr	r3, [r7, #4]
   27256:	681b      	ldr	r3, [r3, #0]
   27258:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   2725a:	687b      	ldr	r3, [r7, #4]
   2725c:	0018      	movs	r0, r3
   2725e:	4b0d      	ldr	r3, [pc, #52]	; (27294 <rtc_calendar_reset+0x48>)
   27260:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   27262:	687b      	ldr	r3, [r7, #4]
   27264:	2200      	movs	r2, #0
   27266:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27268:	687b      	ldr	r3, [r7, #4]
   2726a:	2200      	movs	r2, #0
   2726c:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2726e:	46c0      	nop			; (mov r8, r8)
   27270:	687b      	ldr	r3, [r7, #4]
   27272:	0018      	movs	r0, r3
   27274:	4b08      	ldr	r3, [pc, #32]	; (27298 <rtc_calendar_reset+0x4c>)
   27276:	4798      	blx	r3
   27278:	1e03      	subs	r3, r0, #0
   2727a:	d1f9      	bne.n	27270 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   2727c:	68fb      	ldr	r3, [r7, #12]
   2727e:	881b      	ldrh	r3, [r3, #0]
   27280:	b29b      	uxth	r3, r3
   27282:	2201      	movs	r2, #1
   27284:	4313      	orrs	r3, r2
   27286:	b29a      	uxth	r2, r3
   27288:	68fb      	ldr	r3, [r7, #12]
   2728a:	801a      	strh	r2, [r3, #0]
}
   2728c:	46c0      	nop			; (mov r8, r8)
   2728e:	46bd      	mov	sp, r7
   27290:	b004      	add	sp, #16
   27292:	bd80      	pop	{r7, pc}
   27294:	000271fd 	.word	0x000271fd
   27298:	00027191 	.word	0x00027191

0002729c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   2729c:	b580      	push	{r7, lr}
   2729e:	b084      	sub	sp, #16
   272a0:	af00      	add	r7, sp, #0
   272a2:	6078      	str	r0, [r7, #4]
   272a4:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   272a6:	683b      	ldr	r3, [r7, #0]
   272a8:	88db      	ldrh	r3, [r3, #6]
   272aa:	001a      	movs	r2, r3
   272ac:	687b      	ldr	r3, [r7, #4]
   272ae:	88db      	ldrh	r3, [r3, #6]
   272b0:	1ad3      	subs	r3, r2, r3
   272b2:	069b      	lsls	r3, r3, #26
   272b4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   272b6:	683b      	ldr	r3, [r7, #0]
   272b8:	795b      	ldrb	r3, [r3, #5]
   272ba:	059b      	lsls	r3, r3, #22
   272bc:	001a      	movs	r2, r3
   272be:	68fb      	ldr	r3, [r7, #12]
   272c0:	4313      	orrs	r3, r2
   272c2:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   272c4:	683b      	ldr	r3, [r7, #0]
   272c6:	791b      	ldrb	r3, [r3, #4]
   272c8:	045b      	lsls	r3, r3, #17
   272ca:	001a      	movs	r2, r3
   272cc:	68fb      	ldr	r3, [r7, #12]
   272ce:	4313      	orrs	r3, r2
   272d0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   272d2:	683b      	ldr	r3, [r7, #0]
   272d4:	789b      	ldrb	r3, [r3, #2]
   272d6:	031b      	lsls	r3, r3, #12
   272d8:	001a      	movs	r2, r3
   272da:	68fb      	ldr	r3, [r7, #12]
   272dc:	4313      	orrs	r3, r2
   272de:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   272e0:	687b      	ldr	r3, [r7, #4]
   272e2:	791b      	ldrb	r3, [r3, #4]
   272e4:	2201      	movs	r2, #1
   272e6:	4053      	eors	r3, r2
   272e8:	b2db      	uxtb	r3, r3
   272ea:	2b00      	cmp	r3, #0
   272ec:	d008      	beq.n	27300 <rtc_calendar_time_to_register_value+0x64>
   272ee:	683b      	ldr	r3, [r7, #0]
   272f0:	78db      	ldrb	r3, [r3, #3]
   272f2:	2b00      	cmp	r3, #0
   272f4:	d004      	beq.n	27300 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   272f6:	68fb      	ldr	r3, [r7, #12]
   272f8:	2280      	movs	r2, #128	; 0x80
   272fa:	0252      	lsls	r2, r2, #9
   272fc:	4313      	orrs	r3, r2
   272fe:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   27300:	683b      	ldr	r3, [r7, #0]
   27302:	785b      	ldrb	r3, [r3, #1]
   27304:	019b      	lsls	r3, r3, #6
   27306:	001a      	movs	r2, r3
   27308:	68fb      	ldr	r3, [r7, #12]
   2730a:	4313      	orrs	r3, r2
   2730c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2730e:	683b      	ldr	r3, [r7, #0]
   27310:	781b      	ldrb	r3, [r3, #0]
   27312:	001a      	movs	r2, r3
   27314:	68fb      	ldr	r3, [r7, #12]
   27316:	4313      	orrs	r3, r2
   27318:	60fb      	str	r3, [r7, #12]

	return register_value;
   2731a:	68fb      	ldr	r3, [r7, #12]
}
   2731c:	0018      	movs	r0, r3
   2731e:	46bd      	mov	sp, r7
   27320:	b004      	add	sp, #16
   27322:	bd80      	pop	{r7, pc}

00027324 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27324:	b580      	push	{r7, lr}
   27326:	b084      	sub	sp, #16
   27328:	af00      	add	r7, sp, #0
   2732a:	60f8      	str	r0, [r7, #12]
   2732c:	60b9      	str	r1, [r7, #8]
   2732e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27330:	68bb      	ldr	r3, [r7, #8]
   27332:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27334:	b29a      	uxth	r2, r3
   27336:	68fb      	ldr	r3, [r7, #12]
   27338:	88db      	ldrh	r3, [r3, #6]
   2733a:	18d3      	adds	r3, r2, r3
   2733c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2733e:	687b      	ldr	r3, [r7, #4]
   27340:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   27342:	68bb      	ldr	r3, [r7, #8]
   27344:	0d9b      	lsrs	r3, r3, #22
   27346:	b2db      	uxtb	r3, r3
   27348:	220f      	movs	r2, #15
   2734a:	4013      	ands	r3, r2
   2734c:	b2da      	uxtb	r2, r3
   2734e:	687b      	ldr	r3, [r7, #4]
   27350:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   27352:	68bb      	ldr	r3, [r7, #8]
   27354:	0c5b      	lsrs	r3, r3, #17
   27356:	b2db      	uxtb	r3, r3
   27358:	221f      	movs	r2, #31
   2735a:	4013      	ands	r3, r2
   2735c:	b2da      	uxtb	r2, r3
   2735e:	687b      	ldr	r3, [r7, #4]
   27360:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   27362:	68fb      	ldr	r3, [r7, #12]
   27364:	791b      	ldrb	r3, [r3, #4]
   27366:	2b00      	cmp	r3, #0
   27368:	d008      	beq.n	2737c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   2736a:	68bb      	ldr	r3, [r7, #8]
   2736c:	0b1b      	lsrs	r3, r3, #12
   2736e:	b2db      	uxtb	r3, r3
   27370:	221f      	movs	r2, #31
   27372:	4013      	ands	r3, r2
   27374:	b2da      	uxtb	r2, r3
   27376:	687b      	ldr	r3, [r7, #4]
   27378:	709a      	strb	r2, [r3, #2]
   2737a:	e010      	b.n	2739e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   2737c:	68bb      	ldr	r3, [r7, #8]
   2737e:	0b1b      	lsrs	r3, r3, #12
   27380:	b2db      	uxtb	r3, r3
   27382:	220f      	movs	r2, #15
   27384:	4013      	ands	r3, r2
   27386:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27388:	687b      	ldr	r3, [r7, #4]
   2738a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   2738c:	68ba      	ldr	r2, [r7, #8]
   2738e:	2380      	movs	r3, #128	; 0x80
   27390:	025b      	lsls	r3, r3, #9
   27392:	4013      	ands	r3, r2
   27394:	1e5a      	subs	r2, r3, #1
   27396:	4193      	sbcs	r3, r2
   27398:	b2da      	uxtb	r2, r3
   2739a:	687b      	ldr	r3, [r7, #4]
   2739c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2739e:	68bb      	ldr	r3, [r7, #8]
   273a0:	099b      	lsrs	r3, r3, #6
   273a2:	b2db      	uxtb	r3, r3
   273a4:	223f      	movs	r2, #63	; 0x3f
   273a6:	4013      	ands	r3, r2
   273a8:	b2da      	uxtb	r2, r3
   273aa:	687b      	ldr	r3, [r7, #4]
   273ac:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   273ae:	68bb      	ldr	r3, [r7, #8]
   273b0:	b2db      	uxtb	r3, r3
   273b2:	223f      	movs	r2, #63	; 0x3f
   273b4:	4013      	ands	r3, r2
   273b6:	b2da      	uxtb	r2, r3
   273b8:	687b      	ldr	r3, [r7, #4]
   273ba:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   273bc:	46c0      	nop			; (mov r8, r8)
   273be:	46bd      	mov	sp, r7
   273c0:	b004      	add	sp, #16
   273c2:	bd80      	pop	{r7, pc}

000273c4 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   273c4:	b580      	push	{r7, lr}
   273c6:	b084      	sub	sp, #16
   273c8:	af00      	add	r7, sp, #0
   273ca:	6078      	str	r0, [r7, #4]
   273cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   273ce:	687b      	ldr	r3, [r7, #4]
   273d0:	681b      	ldr	r3, [r3, #0]
   273d2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   273d4:	683b      	ldr	r3, [r7, #0]
   273d6:	881a      	ldrh	r2, [r3, #0]
   273d8:	230e      	movs	r3, #14
   273da:	18fb      	adds	r3, r7, r3
   273dc:	2108      	movs	r1, #8
   273de:	430a      	orrs	r2, r1
   273e0:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   273e2:	683b      	ldr	r3, [r7, #0]
   273e4:	791b      	ldrb	r3, [r3, #4]
   273e6:	2201      	movs	r2, #1
   273e8:	4053      	eors	r3, r2
   273ea:	b2db      	uxtb	r3, r3
   273ec:	2b00      	cmp	r3, #0
   273ee:	d007      	beq.n	27400 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   273f0:	230e      	movs	r3, #14
   273f2:	18fb      	adds	r3, r7, r3
   273f4:	220e      	movs	r2, #14
   273f6:	18ba      	adds	r2, r7, r2
   273f8:	8812      	ldrh	r2, [r2, #0]
   273fa:	2140      	movs	r1, #64	; 0x40
   273fc:	430a      	orrs	r2, r1
   273fe:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   27400:	683b      	ldr	r3, [r7, #0]
   27402:	789b      	ldrb	r3, [r3, #2]
   27404:	2b00      	cmp	r3, #0
   27406:	d007      	beq.n	27418 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27408:	230e      	movs	r3, #14
   2740a:	18fb      	adds	r3, r7, r3
   2740c:	220e      	movs	r2, #14
   2740e:	18ba      	adds	r2, r7, r2
   27410:	8812      	ldrh	r2, [r2, #0]
   27412:	2180      	movs	r1, #128	; 0x80
   27414:	430a      	orrs	r2, r1
   27416:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27418:	68bb      	ldr	r3, [r7, #8]
   2741a:	220e      	movs	r2, #14
   2741c:	18ba      	adds	r2, r7, r2
   2741e:	8812      	ldrh	r2, [r2, #0]
   27420:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   27422:	683b      	ldr	r3, [r7, #0]
   27424:	78db      	ldrb	r3, [r3, #3]
   27426:	2b00      	cmp	r3, #0
   27428:	d008      	beq.n	2743c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   2742a:	68bb      	ldr	r3, [r7, #8]
   2742c:	885b      	ldrh	r3, [r3, #2]
   2742e:	b29b      	uxth	r3, r3
   27430:	2280      	movs	r2, #128	; 0x80
   27432:	01d2      	lsls	r2, r2, #7
   27434:	4313      	orrs	r3, r2
   27436:	b29a      	uxth	r2, r3
   27438:	68bb      	ldr	r3, [r7, #8]
   2743a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2743c:	230d      	movs	r3, #13
   2743e:	18fb      	adds	r3, r7, r3
   27440:	2200      	movs	r2, #0
   27442:	701a      	strb	r2, [r3, #0]
   27444:	e017      	b.n	27476 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27446:	230d      	movs	r3, #13
   27448:	18fb      	adds	r3, r7, r3
   2744a:	781a      	ldrb	r2, [r3, #0]
   2744c:	0013      	movs	r3, r2
   2744e:	009b      	lsls	r3, r3, #2
   27450:	189b      	adds	r3, r3, r2
   27452:	005b      	lsls	r3, r3, #1
   27454:	3308      	adds	r3, #8
   27456:	683a      	ldr	r2, [r7, #0]
   27458:	18d1      	adds	r1, r2, r3
   2745a:	230d      	movs	r3, #13
   2745c:	18fb      	adds	r3, r7, r3
   2745e:	781a      	ldrb	r2, [r3, #0]
   27460:	687b      	ldr	r3, [r7, #4]
   27462:	0018      	movs	r0, r3
   27464:	4b08      	ldr	r3, [pc, #32]	; (27488 <_rtc_calendar_set_config+0xc4>)
   27466:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27468:	230d      	movs	r3, #13
   2746a:	18fb      	adds	r3, r7, r3
   2746c:	781a      	ldrb	r2, [r3, #0]
   2746e:	230d      	movs	r3, #13
   27470:	18fb      	adds	r3, r7, r3
   27472:	3201      	adds	r2, #1
   27474:	701a      	strb	r2, [r3, #0]
   27476:	230d      	movs	r3, #13
   27478:	18fb      	adds	r3, r7, r3
   2747a:	781b      	ldrb	r3, [r3, #0]
   2747c:	2b00      	cmp	r3, #0
   2747e:	d0e2      	beq.n	27446 <_rtc_calendar_set_config+0x82>
	}
}
   27480:	46c0      	nop			; (mov r8, r8)
   27482:	46bd      	mov	sp, r7
   27484:	b004      	add	sp, #16
   27486:	bd80      	pop	{r7, pc}
   27488:	000275ad 	.word	0x000275ad

0002748c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   2748c:	b580      	push	{r7, lr}
   2748e:	b086      	sub	sp, #24
   27490:	af00      	add	r7, sp, #0
   27492:	60f8      	str	r0, [r7, #12]
   27494:	60b9      	str	r1, [r7, #8]
   27496:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27498:	68fb      	ldr	r3, [r7, #12]
   2749a:	68ba      	ldr	r2, [r7, #8]
   2749c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2749e:	2120      	movs	r1, #32
   274a0:	2000      	movs	r0, #0
   274a2:	4b18      	ldr	r3, [pc, #96]	; (27504 <rtc_calendar_init+0x78>)
   274a4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   274a6:	2314      	movs	r3, #20
   274a8:	18fb      	adds	r3, r7, r3
   274aa:	0018      	movs	r0, r3
   274ac:	4b16      	ldr	r3, [pc, #88]	; (27508 <rtc_calendar_init+0x7c>)
   274ae:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   274b0:	2314      	movs	r3, #20
   274b2:	18fb      	adds	r3, r7, r3
   274b4:	2202      	movs	r2, #2
   274b6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   274b8:	2314      	movs	r3, #20
   274ba:	18fb      	adds	r3, r7, r3
   274bc:	0019      	movs	r1, r3
   274be:	2004      	movs	r0, #4
   274c0:	4b12      	ldr	r3, [pc, #72]	; (2750c <rtc_calendar_init+0x80>)
   274c2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   274c4:	2004      	movs	r0, #4
   274c6:	4b12      	ldr	r3, [pc, #72]	; (27510 <rtc_calendar_init+0x84>)
   274c8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   274ca:	68fb      	ldr	r3, [r7, #12]
   274cc:	0018      	movs	r0, r3
   274ce:	4b11      	ldr	r3, [pc, #68]	; (27514 <rtc_calendar_init+0x88>)
   274d0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   274d2:	687b      	ldr	r3, [r7, #4]
   274d4:	791a      	ldrb	r2, [r3, #4]
   274d6:	68fb      	ldr	r3, [r7, #12]
   274d8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   274da:	687b      	ldr	r3, [r7, #4]
   274dc:	78da      	ldrb	r2, [r3, #3]
   274de:	68fb      	ldr	r3, [r7, #12]
   274e0:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   274e2:	687b      	ldr	r3, [r7, #4]
   274e4:	88da      	ldrh	r2, [r3, #6]
   274e6:	68fb      	ldr	r3, [r7, #12]
   274e8:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   274ea:	4b0b      	ldr	r3, [pc, #44]	; (27518 <rtc_calendar_init+0x8c>)
   274ec:	68fa      	ldr	r2, [r7, #12]
   274ee:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   274f0:	687a      	ldr	r2, [r7, #4]
   274f2:	68fb      	ldr	r3, [r7, #12]
   274f4:	0011      	movs	r1, r2
   274f6:	0018      	movs	r0, r3
   274f8:	4b08      	ldr	r3, [pc, #32]	; (2751c <rtc_calendar_init+0x90>)
   274fa:	4798      	blx	r3
}
   274fc:	46c0      	nop			; (mov r8, r8)
   274fe:	46bd      	mov	sp, r7
   27500:	b006      	add	sp, #24
   27502:	bd80      	pop	{r7, pc}
   27504:	000270d9 	.word	0x000270d9
   27508:	000270c1 	.word	0x000270c1
   2750c:	0002a4f1 	.word	0x0002a4f1
   27510:	0002a535 	.word	0x0002a535
   27514:	0002724d 	.word	0x0002724d
   27518:	20005dcc 	.word	0x20005dcc
   2751c:	000273c5 	.word	0x000273c5

00027520 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27520:	b580      	push	{r7, lr}
   27522:	b084      	sub	sp, #16
   27524:	af00      	add	r7, sp, #0
   27526:	6078      	str	r0, [r7, #4]
   27528:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2752a:	687b      	ldr	r3, [r7, #4]
   2752c:	681b      	ldr	r3, [r3, #0]
   2752e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27530:	687b      	ldr	r3, [r7, #4]
   27532:	795b      	ldrb	r3, [r3, #5]
   27534:	2201      	movs	r2, #1
   27536:	4053      	eors	r3, r2
   27538:	b2db      	uxtb	r3, r3
   2753a:	2b00      	cmp	r3, #0
   2753c:	d00a      	beq.n	27554 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   2753e:	68fb      	ldr	r3, [r7, #12]
   27540:	4a16      	ldr	r2, [pc, #88]	; (2759c <rtc_calendar_get_time+0x7c>)
   27542:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27544:	46c0      	nop			; (mov r8, r8)
   27546:	687b      	ldr	r3, [r7, #4]
   27548:	0018      	movs	r0, r3
   2754a:	4b15      	ldr	r3, [pc, #84]	; (275a0 <rtc_calendar_get_time+0x80>)
   2754c:	4798      	blx	r3
   2754e:	1e03      	subs	r3, r0, #0
   27550:	d1f9      	bne.n	27546 <rtc_calendar_get_time+0x26>
   27552:	e016      	b.n	27582 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27554:	68fb      	ldr	r3, [r7, #12]
   27556:	885b      	ldrh	r3, [r3, #2]
   27558:	b29b      	uxth	r3, r3
   2755a:	001a      	movs	r2, r3
   2755c:	2380      	movs	r3, #128	; 0x80
   2755e:	01db      	lsls	r3, r3, #7
   27560:	4013      	ands	r3, r2
   27562:	d10e      	bne.n	27582 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27564:	68fb      	ldr	r3, [r7, #12]
   27566:	885b      	ldrh	r3, [r3, #2]
   27568:	b29b      	uxth	r3, r3
   2756a:	4a0e      	ldr	r2, [pc, #56]	; (275a4 <rtc_calendar_get_time+0x84>)
   2756c:	4313      	orrs	r3, r2
   2756e:	b29a      	uxth	r2, r3
   27570:	68fb      	ldr	r3, [r7, #12]
   27572:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27574:	46c0      	nop			; (mov r8, r8)
   27576:	687b      	ldr	r3, [r7, #4]
   27578:	0018      	movs	r0, r3
   2757a:	4b09      	ldr	r3, [pc, #36]	; (275a0 <rtc_calendar_get_time+0x80>)
   2757c:	4798      	blx	r3
   2757e:	1e03      	subs	r3, r0, #0
   27580:	d1f9      	bne.n	27576 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27582:	68fb      	ldr	r3, [r7, #12]
   27584:	691b      	ldr	r3, [r3, #16]
   27586:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27588:	683a      	ldr	r2, [r7, #0]
   2758a:	68b9      	ldr	r1, [r7, #8]
   2758c:	687b      	ldr	r3, [r7, #4]
   2758e:	0018      	movs	r0, r3
   27590:	4b05      	ldr	r3, [pc, #20]	; (275a8 <rtc_calendar_get_time+0x88>)
   27592:	4798      	blx	r3
}
   27594:	46c0      	nop			; (mov r8, r8)
   27596:	46bd      	mov	sp, r7
   27598:	b004      	add	sp, #16
   2759a:	bd80      	pop	{r7, pc}
   2759c:	ffff8000 	.word	0xffff8000
   275a0:	00027191 	.word	0x00027191
   275a4:	ffffc000 	.word	0xffffc000
   275a8:	00027325 	.word	0x00027325

000275ac <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   275ac:	b580      	push	{r7, lr}
   275ae:	b086      	sub	sp, #24
   275b0:	af00      	add	r7, sp, #0
   275b2:	60f8      	str	r0, [r7, #12]
   275b4:	60b9      	str	r1, [r7, #8]
   275b6:	1dfb      	adds	r3, r7, #7
   275b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   275ba:	68fb      	ldr	r3, [r7, #12]
   275bc:	681b      	ldr	r3, [r3, #0]
   275be:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   275c0:	1dfb      	adds	r3, r7, #7
   275c2:	781b      	ldrb	r3, [r3, #0]
   275c4:	2b01      	cmp	r3, #1
   275c6:	d901      	bls.n	275cc <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   275c8:	2317      	movs	r3, #23
   275ca:	e021      	b.n	27610 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   275cc:	68ba      	ldr	r2, [r7, #8]
   275ce:	68fb      	ldr	r3, [r7, #12]
   275d0:	0011      	movs	r1, r2
   275d2:	0018      	movs	r0, r3
   275d4:	4b10      	ldr	r3, [pc, #64]	; (27618 <rtc_calendar_set_alarm+0x6c>)
   275d6:	4798      	blx	r3
   275d8:	0003      	movs	r3, r0
   275da:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   275dc:	46c0      	nop			; (mov r8, r8)
   275de:	68fb      	ldr	r3, [r7, #12]
   275e0:	0018      	movs	r0, r3
   275e2:	4b0e      	ldr	r3, [pc, #56]	; (2761c <rtc_calendar_set_alarm+0x70>)
   275e4:	4798      	blx	r3
   275e6:	1e03      	subs	r3, r0, #0
   275e8:	d1f9      	bne.n	275de <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   275ea:	1dfb      	adds	r3, r7, #7
   275ec:	781a      	ldrb	r2, [r3, #0]
   275ee:	697b      	ldr	r3, [r7, #20]
   275f0:	3203      	adds	r2, #3
   275f2:	00d2      	lsls	r2, r2, #3
   275f4:	6939      	ldr	r1, [r7, #16]
   275f6:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   275f8:	1dfb      	adds	r3, r7, #7
   275fa:	781b      	ldrb	r3, [r3, #0]
   275fc:	68ba      	ldr	r2, [r7, #8]
   275fe:	7a11      	ldrb	r1, [r2, #8]
   27600:	697a      	ldr	r2, [r7, #20]
   27602:	3303      	adds	r3, #3
   27604:	00db      	lsls	r3, r3, #3
   27606:	18d3      	adds	r3, r2, r3
   27608:	3304      	adds	r3, #4
   2760a:	1c0a      	adds	r2, r1, #0
   2760c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2760e:	2300      	movs	r3, #0
}
   27610:	0018      	movs	r0, r3
   27612:	46bd      	mov	sp, r7
   27614:	b006      	add	sp, #24
   27616:	bd80      	pop	{r7, pc}
   27618:	0002729d 	.word	0x0002729d
   2761c:	00027191 	.word	0x00027191

00027620 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27620:	b580      	push	{r7, lr}
   27622:	b086      	sub	sp, #24
   27624:	af00      	add	r7, sp, #0
   27626:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27628:	4b28      	ldr	r3, [pc, #160]	; (276cc <_rtc_interrupt_handler+0xac>)
   2762a:	687a      	ldr	r2, [r7, #4]
   2762c:	0092      	lsls	r2, r2, #2
   2762e:	58d3      	ldr	r3, [r2, r3]
   27630:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27632:	697b      	ldr	r3, [r7, #20]
   27634:	681b      	ldr	r3, [r3, #0]
   27636:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27638:	230e      	movs	r3, #14
   2763a:	18fb      	adds	r3, r7, r3
   2763c:	697a      	ldr	r2, [r7, #20]
   2763e:	8a52      	ldrh	r2, [r2, #18]
   27640:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27642:	697b      	ldr	r3, [r7, #20]
   27644:	8a1b      	ldrh	r3, [r3, #16]
   27646:	b29a      	uxth	r2, r3
   27648:	230e      	movs	r3, #14
   2764a:	18fb      	adds	r3, r7, r3
   2764c:	210e      	movs	r1, #14
   2764e:	1879      	adds	r1, r7, r1
   27650:	8809      	ldrh	r1, [r1, #0]
   27652:	400a      	ands	r2, r1
   27654:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27656:	693b      	ldr	r3, [r7, #16]
   27658:	7a1b      	ldrb	r3, [r3, #8]
   2765a:	b2da      	uxtb	r2, r3
   2765c:	230c      	movs	r3, #12
   2765e:	18fb      	adds	r3, r7, r3
   27660:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27662:	693b      	ldr	r3, [r7, #16]
   27664:	79db      	ldrb	r3, [r3, #7]
   27666:	b2db      	uxtb	r3, r3
   27668:	b29a      	uxth	r2, r3
   2766a:	230c      	movs	r3, #12
   2766c:	18fb      	adds	r3, r7, r3
   2766e:	210c      	movs	r1, #12
   27670:	1879      	adds	r1, r7, r1
   27672:	8809      	ldrh	r1, [r1, #0]
   27674:	400a      	ands	r2, r1
   27676:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27678:	230c      	movs	r3, #12
   2767a:	18fb      	adds	r3, r7, r3
   2767c:	881b      	ldrh	r3, [r3, #0]
   2767e:	2280      	movs	r2, #128	; 0x80
   27680:	4013      	ands	r3, r2
   27682:	d00c      	beq.n	2769e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27684:	230e      	movs	r3, #14
   27686:	18fb      	adds	r3, r7, r3
   27688:	881b      	ldrh	r3, [r3, #0]
   2768a:	2202      	movs	r2, #2
   2768c:	4013      	ands	r3, r2
   2768e:	d002      	beq.n	27696 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27690:	697b      	ldr	r3, [r7, #20]
   27692:	68db      	ldr	r3, [r3, #12]
   27694:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27696:	693b      	ldr	r3, [r7, #16]
   27698:	2280      	movs	r2, #128	; 0x80
   2769a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   2769c:	e011      	b.n	276c2 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2769e:	230c      	movs	r3, #12
   276a0:	18fb      	adds	r3, r7, r3
   276a2:	881b      	ldrh	r3, [r3, #0]
   276a4:	2201      	movs	r2, #1
   276a6:	4013      	ands	r3, r2
   276a8:	d00b      	beq.n	276c2 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   276aa:	230e      	movs	r3, #14
   276ac:	18fb      	adds	r3, r7, r3
   276ae:	881b      	ldrh	r3, [r3, #0]
   276b0:	2201      	movs	r2, #1
   276b2:	4013      	ands	r3, r2
   276b4:	d002      	beq.n	276bc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   276b6:	697b      	ldr	r3, [r7, #20]
   276b8:	689b      	ldr	r3, [r3, #8]
   276ba:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   276bc:	693b      	ldr	r3, [r7, #16]
   276be:	2201      	movs	r2, #1
   276c0:	721a      	strb	r2, [r3, #8]
}
   276c2:	46c0      	nop			; (mov r8, r8)
   276c4:	46bd      	mov	sp, r7
   276c6:	b006      	add	sp, #24
   276c8:	bd80      	pop	{r7, pc}
   276ca:	46c0      	nop			; (mov r8, r8)
   276cc:	20005dcc 	.word	0x20005dcc

000276d0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   276d0:	b580      	push	{r7, lr}
   276d2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   276d4:	2000      	movs	r0, #0
   276d6:	4b02      	ldr	r3, [pc, #8]	; (276e0 <RTC_Handler+0x10>)
   276d8:	4798      	blx	r3
}
   276da:	46c0      	nop			; (mov r8, r8)
   276dc:	46bd      	mov	sp, r7
   276de:	bd80      	pop	{r7, pc}
   276e0:	00027621 	.word	0x00027621

000276e4 <system_gclk_chan_get_config_defaults>:
{
   276e4:	b580      	push	{r7, lr}
   276e6:	b082      	sub	sp, #8
   276e8:	af00      	add	r7, sp, #0
   276ea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   276ec:	687b      	ldr	r3, [r7, #4]
   276ee:	2200      	movs	r2, #0
   276f0:	701a      	strb	r2, [r3, #0]
}
   276f2:	46c0      	nop			; (mov r8, r8)
   276f4:	46bd      	mov	sp, r7
   276f6:	b002      	add	sp, #8
   276f8:	bd80      	pop	{r7, pc}

000276fa <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   276fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   276fc:	b08d      	sub	sp, #52	; 0x34
   276fe:	af00      	add	r7, sp, #0
   27700:	60b8      	str	r0, [r7, #8]
   27702:	60f9      	str	r1, [r7, #12]
   27704:	603a      	str	r2, [r7, #0]
   27706:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27708:	2300      	movs	r3, #0
   2770a:	2400      	movs	r4, #0
   2770c:	623b      	str	r3, [r7, #32]
   2770e:	627c      	str	r4, [r7, #36]	; 0x24
   27710:	2300      	movs	r3, #0
   27712:	2400      	movs	r4, #0
   27714:	61bb      	str	r3, [r7, #24]
   27716:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27718:	233f      	movs	r3, #63	; 0x3f
   2771a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2771c:	e053      	b.n	277c6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27720:	3b20      	subs	r3, #32
   27722:	2b00      	cmp	r3, #0
   27724:	db04      	blt.n	27730 <long_division+0x36>
   27726:	2201      	movs	r2, #1
   27728:	409a      	lsls	r2, r3
   2772a:	0013      	movs	r3, r2
   2772c:	617b      	str	r3, [r7, #20]
   2772e:	e00b      	b.n	27748 <long_division+0x4e>
   27730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27732:	2220      	movs	r2, #32
   27734:	1ad3      	subs	r3, r2, r3
   27736:	2201      	movs	r2, #1
   27738:	40da      	lsrs	r2, r3
   2773a:	0013      	movs	r3, r2
   2773c:	2100      	movs	r1, #0
   2773e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27740:	4091      	lsls	r1, r2
   27742:	000a      	movs	r2, r1
   27744:	4313      	orrs	r3, r2
   27746:	617b      	str	r3, [r7, #20]
   27748:	2201      	movs	r2, #1
   2774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2774c:	409a      	lsls	r2, r3
   2774e:	0013      	movs	r3, r2
   27750:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27752:	69bb      	ldr	r3, [r7, #24]
   27754:	69fc      	ldr	r4, [r7, #28]
   27756:	18db      	adds	r3, r3, r3
   27758:	4164      	adcs	r4, r4
   2775a:	61bb      	str	r3, [r7, #24]
   2775c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   2775e:	68bb      	ldr	r3, [r7, #8]
   27760:	693a      	ldr	r2, [r7, #16]
   27762:	401a      	ands	r2, r3
   27764:	0015      	movs	r5, r2
   27766:	68fb      	ldr	r3, [r7, #12]
   27768:	697a      	ldr	r2, [r7, #20]
   2776a:	401a      	ands	r2, r3
   2776c:	0016      	movs	r6, r2
   2776e:	002b      	movs	r3, r5
   27770:	4333      	orrs	r3, r6
   27772:	d007      	beq.n	27784 <long_division+0x8a>
			r |= 0x01;
   27774:	69bb      	ldr	r3, [r7, #24]
   27776:	2201      	movs	r2, #1
   27778:	4313      	orrs	r3, r2
   2777a:	61bb      	str	r3, [r7, #24]
   2777c:	69fb      	ldr	r3, [r7, #28]
   2777e:	2200      	movs	r2, #0
   27780:	4313      	orrs	r3, r2
   27782:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27784:	687a      	ldr	r2, [r7, #4]
   27786:	69fb      	ldr	r3, [r7, #28]
   27788:	429a      	cmp	r2, r3
   2778a:	d819      	bhi.n	277c0 <long_division+0xc6>
   2778c:	687a      	ldr	r2, [r7, #4]
   2778e:	69fb      	ldr	r3, [r7, #28]
   27790:	429a      	cmp	r2, r3
   27792:	d103      	bne.n	2779c <long_division+0xa2>
   27794:	683a      	ldr	r2, [r7, #0]
   27796:	69bb      	ldr	r3, [r7, #24]
   27798:	429a      	cmp	r2, r3
   2779a:	d811      	bhi.n	277c0 <long_division+0xc6>
			r = r - d;
   2779c:	69b9      	ldr	r1, [r7, #24]
   2779e:	69fa      	ldr	r2, [r7, #28]
   277a0:	683b      	ldr	r3, [r7, #0]
   277a2:	687c      	ldr	r4, [r7, #4]
   277a4:	1ac9      	subs	r1, r1, r3
   277a6:	41a2      	sbcs	r2, r4
   277a8:	000b      	movs	r3, r1
   277aa:	0014      	movs	r4, r2
   277ac:	61bb      	str	r3, [r7, #24]
   277ae:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   277b0:	6a3a      	ldr	r2, [r7, #32]
   277b2:	693b      	ldr	r3, [r7, #16]
   277b4:	4313      	orrs	r3, r2
   277b6:	623b      	str	r3, [r7, #32]
   277b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   277ba:	697b      	ldr	r3, [r7, #20]
   277bc:	4313      	orrs	r3, r2
   277be:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   277c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   277c2:	3b01      	subs	r3, #1
   277c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   277c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   277c8:	2b00      	cmp	r3, #0
   277ca:	daa8      	bge.n	2771e <long_division+0x24>
		}
	}

	return q;
   277cc:	6a3b      	ldr	r3, [r7, #32]
   277ce:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   277d0:	0018      	movs	r0, r3
   277d2:	0021      	movs	r1, r4
   277d4:	46bd      	mov	sp, r7
   277d6:	b00d      	add	sp, #52	; 0x34
   277d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000277da <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   277da:	b580      	push	{r7, lr}
   277dc:	b086      	sub	sp, #24
   277de:	af00      	add	r7, sp, #0
   277e0:	60f8      	str	r0, [r7, #12]
   277e2:	60b9      	str	r1, [r7, #8]
   277e4:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   277e6:	2316      	movs	r3, #22
   277e8:	18fb      	adds	r3, r7, r3
   277ea:	2200      	movs	r2, #0
   277ec:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   277ee:	68bb      	ldr	r3, [r7, #8]
   277f0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   277f2:	68bb      	ldr	r3, [r7, #8]
   277f4:	085a      	lsrs	r2, r3, #1
   277f6:	68fb      	ldr	r3, [r7, #12]
   277f8:	429a      	cmp	r2, r3
   277fa:	d201      	bcs.n	27800 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   277fc:	2340      	movs	r3, #64	; 0x40
   277fe:	e026      	b.n	2784e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27800:	68bb      	ldr	r3, [r7, #8]
   27802:	085b      	lsrs	r3, r3, #1
   27804:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27806:	e00a      	b.n	2781e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27808:	693a      	ldr	r2, [r7, #16]
   2780a:	68fb      	ldr	r3, [r7, #12]
   2780c:	1ad3      	subs	r3, r2, r3
   2780e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27810:	2316      	movs	r3, #22
   27812:	18fb      	adds	r3, r7, r3
   27814:	881a      	ldrh	r2, [r3, #0]
   27816:	2316      	movs	r3, #22
   27818:	18fb      	adds	r3, r7, r3
   2781a:	3201      	adds	r2, #1
   2781c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2781e:	693a      	ldr	r2, [r7, #16]
   27820:	68fb      	ldr	r3, [r7, #12]
   27822:	429a      	cmp	r2, r3
   27824:	d2f0      	bcs.n	27808 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27826:	2316      	movs	r3, #22
   27828:	18fb      	adds	r3, r7, r3
   2782a:	2216      	movs	r2, #22
   2782c:	18ba      	adds	r2, r7, r2
   2782e:	8812      	ldrh	r2, [r2, #0]
   27830:	3a01      	subs	r2, #1
   27832:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27834:	2316      	movs	r3, #22
   27836:	18fb      	adds	r3, r7, r3
   27838:	881b      	ldrh	r3, [r3, #0]
   2783a:	2bff      	cmp	r3, #255	; 0xff
   2783c:	d901      	bls.n	27842 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2783e:	2340      	movs	r3, #64	; 0x40
   27840:	e005      	b.n	2784e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27842:	687b      	ldr	r3, [r7, #4]
   27844:	2216      	movs	r2, #22
   27846:	18ba      	adds	r2, r7, r2
   27848:	8812      	ldrh	r2, [r2, #0]
   2784a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   2784c:	2300      	movs	r3, #0
	}
}
   2784e:	0018      	movs	r0, r3
   27850:	46bd      	mov	sp, r7
   27852:	b006      	add	sp, #24
   27854:	bd80      	pop	{r7, pc}
	...

00027858 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27858:	b5f0      	push	{r4, r5, r6, r7, lr}
   2785a:	b0a1      	sub	sp, #132	; 0x84
   2785c:	af00      	add	r7, sp, #0
   2785e:	64f8      	str	r0, [r7, #76]	; 0x4c
   27860:	64b9      	str	r1, [r7, #72]	; 0x48
   27862:	647a      	str	r2, [r7, #68]	; 0x44
   27864:	2243      	movs	r2, #67	; 0x43
   27866:	18ba      	adds	r2, r7, r2
   27868:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   2786a:	2300      	movs	r3, #0
   2786c:	2400      	movs	r4, #0
   2786e:	673b      	str	r3, [r7, #112]	; 0x70
   27870:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27872:	2300      	movs	r3, #0
   27874:	2400      	movs	r4, #0
   27876:	66bb      	str	r3, [r7, #104]	; 0x68
   27878:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   2787a:	2300      	movs	r3, #0
   2787c:	2400      	movs	r4, #0
   2787e:	67bb      	str	r3, [r7, #120]	; 0x78
   27880:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27882:	2300      	movs	r3, #0
   27884:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27886:	2358      	movs	r3, #88	; 0x58
   27888:	2240      	movs	r2, #64	; 0x40
   2788a:	4694      	mov	ip, r2
   2788c:	44bc      	add	ip, r7
   2788e:	4463      	add	r3, ip
   27890:	781a      	ldrb	r2, [r3, #0]
   27892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27894:	435a      	muls	r2, r3
   27896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27898:	429a      	cmp	r2, r3
   2789a:	d901      	bls.n	278a0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2789c:	2340      	movs	r3, #64	; 0x40
   2789e:	e0b3      	b.n	27a08 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   278a0:	2343      	movs	r3, #67	; 0x43
   278a2:	18fb      	adds	r3, r7, r3
   278a4:	781b      	ldrb	r3, [r3, #0]
   278a6:	2b00      	cmp	r3, #0
   278a8:	d13d      	bne.n	27926 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   278aa:	2358      	movs	r3, #88	; 0x58
   278ac:	2240      	movs	r2, #64	; 0x40
   278ae:	4694      	mov	ip, r2
   278b0:	44bc      	add	ip, r7
   278b2:	4463      	add	r3, ip
   278b4:	781b      	ldrb	r3, [r3, #0]
   278b6:	b2db      	uxtb	r3, r3
   278b8:	613b      	str	r3, [r7, #16]
   278ba:	2300      	movs	r3, #0
   278bc:	617b      	str	r3, [r7, #20]
   278be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   278c0:	60bb      	str	r3, [r7, #8]
   278c2:	2300      	movs	r3, #0
   278c4:	60fb      	str	r3, [r7, #12]
   278c6:	4c52      	ldr	r4, [pc, #328]	; (27a10 <_sercom_get_async_baud_val+0x1b8>)
   278c8:	68ba      	ldr	r2, [r7, #8]
   278ca:	68fb      	ldr	r3, [r7, #12]
   278cc:	6938      	ldr	r0, [r7, #16]
   278ce:	6979      	ldr	r1, [r7, #20]
   278d0:	47a0      	blx	r4
   278d2:	0003      	movs	r3, r0
   278d4:	000c      	movs	r4, r1
   278d6:	001b      	movs	r3, r3
   278d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   278da:	2300      	movs	r3, #0
   278dc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   278de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   278e0:	603b      	str	r3, [r7, #0]
   278e2:	2300      	movs	r3, #0
   278e4:	607b      	str	r3, [r7, #4]
   278e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
   278e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   278ea:	683a      	ldr	r2, [r7, #0]
   278ec:	687b      	ldr	r3, [r7, #4]
   278ee:	4c49      	ldr	r4, [pc, #292]	; (27a14 <_sercom_get_async_baud_val+0x1bc>)
   278f0:	47a0      	blx	r4
   278f2:	0003      	movs	r3, r0
   278f4:	000c      	movs	r4, r1
   278f6:	673b      	str	r3, [r7, #112]	; 0x70
   278f8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   278fa:	2100      	movs	r1, #0
   278fc:	2201      	movs	r2, #1
   278fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27900:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27902:	1ac9      	subs	r1, r1, r3
   27904:	41a2      	sbcs	r2, r4
   27906:	000b      	movs	r3, r1
   27908:	0014      	movs	r4, r2
   2790a:	66bb      	str	r3, [r7, #104]	; 0x68
   2790c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2790e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27910:	0c1b      	lsrs	r3, r3, #16
   27912:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27914:	0416      	lsls	r6, r2, #16
   27916:	431e      	orrs	r6, r3
   27918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2791a:	041d      	lsls	r5, r3, #16
   2791c:	0033      	movs	r3, r6
   2791e:	67bb      	str	r3, [r7, #120]	; 0x78
   27920:	2300      	movs	r3, #0
   27922:	67fb      	str	r3, [r7, #124]	; 0x7c
   27924:	e06a      	b.n	279fc <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27926:	2343      	movs	r3, #67	; 0x43
   27928:	18fb      	adds	r3, r7, r3
   2792a:	781b      	ldrb	r3, [r3, #0]
   2792c:	2b01      	cmp	r3, #1
   2792e:	d165      	bne.n	279fc <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27932:	633b      	str	r3, [r7, #48]	; 0x30
   27934:	2300      	movs	r3, #0
   27936:	637b      	str	r3, [r7, #52]	; 0x34
   27938:	2358      	movs	r3, #88	; 0x58
   2793a:	2240      	movs	r2, #64	; 0x40
   2793c:	4694      	mov	ip, r2
   2793e:	44bc      	add	ip, r7
   27940:	4463      	add	r3, ip
   27942:	781b      	ldrb	r3, [r3, #0]
   27944:	b2db      	uxtb	r3, r3
   27946:	62bb      	str	r3, [r7, #40]	; 0x28
   27948:	2300      	movs	r3, #0
   2794a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2794c:	4c30      	ldr	r4, [pc, #192]	; (27a10 <_sercom_get_async_baud_val+0x1b8>)
   2794e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27952:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27954:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27956:	47a0      	blx	r4
   27958:	0003      	movs	r3, r0
   2795a:	000c      	movs	r4, r1
   2795c:	65bb      	str	r3, [r7, #88]	; 0x58
   2795e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27962:	623b      	str	r3, [r7, #32]
   27964:	2300      	movs	r3, #0
   27966:	627b      	str	r3, [r7, #36]	; 0x24
   27968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2796a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2796c:	001a      	movs	r2, r3
   2796e:	0023      	movs	r3, r4
   27970:	6a38      	ldr	r0, [r7, #32]
   27972:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27974:	4c27      	ldr	r4, [pc, #156]	; (27a14 <_sercom_get_async_baud_val+0x1bc>)
   27976:	47a0      	blx	r4
   27978:	0003      	movs	r3, r0
   2797a:	000c      	movs	r4, r1
   2797c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2797e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27980:	2380      	movs	r3, #128	; 0x80
   27982:	019b      	lsls	r3, r3, #6
   27984:	429a      	cmp	r2, r3
   27986:	d901      	bls.n	2798c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27988:	2340      	movs	r3, #64	; 0x40
   2798a:	e03d      	b.n	27a08 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   2798c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2798e:	61bb      	str	r3, [r7, #24]
   27990:	2300      	movs	r3, #0
   27992:	61fb      	str	r3, [r7, #28]
   27994:	69b9      	ldr	r1, [r7, #24]
   27996:	69fa      	ldr	r2, [r7, #28]
   27998:	000b      	movs	r3, r1
   2799a:	0f5b      	lsrs	r3, r3, #29
   2799c:	0010      	movs	r0, r2
   2799e:	00c0      	lsls	r0, r0, #3
   279a0:	63f8      	str	r0, [r7, #60]	; 0x3c
   279a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   279a4:	4318      	orrs	r0, r3
   279a6:	63f8      	str	r0, [r7, #60]	; 0x3c
   279a8:	000b      	movs	r3, r1
   279aa:	00db      	lsls	r3, r3, #3
   279ac:	63bb      	str	r3, [r7, #56]	; 0x38
   279ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   279b0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   279b2:	001a      	movs	r2, r3
   279b4:	0023      	movs	r3, r4
   279b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   279b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   279ba:	4c16      	ldr	r4, [pc, #88]	; (27a14 <_sercom_get_async_baud_val+0x1bc>)
   279bc:	47a0      	blx	r4
   279be:	0003      	movs	r3, r0
   279c0:	000c      	movs	r4, r1
   279c2:	65bb      	str	r3, [r7, #88]	; 0x58
   279c4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   279c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   279c8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   279ca:	b2d9      	uxtb	r1, r3
   279cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   279ce:	b2db      	uxtb	r3, r3
   279d0:	00db      	lsls	r3, r3, #3
   279d2:	b2da      	uxtb	r2, r3
   279d4:	2317      	movs	r3, #23
   279d6:	2040      	movs	r0, #64	; 0x40
   279d8:	4684      	mov	ip, r0
   279da:	44bc      	add	ip, r7
   279dc:	4463      	add	r3, ip
   279de:	1a8a      	subs	r2, r1, r2
   279e0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   279e2:	2317      	movs	r3, #23
   279e4:	2240      	movs	r2, #64	; 0x40
   279e6:	4694      	mov	ip, r2
   279e8:	44bc      	add	ip, r7
   279ea:	4463      	add	r3, ip
   279ec:	781b      	ldrb	r3, [r3, #0]
   279ee:	035b      	lsls	r3, r3, #13
   279f0:	001a      	movs	r2, r3
   279f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   279f4:	4313      	orrs	r3, r2
   279f6:	67bb      	str	r3, [r7, #120]	; 0x78
   279f8:	2300      	movs	r3, #0
   279fa:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   279fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   279fe:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27a00:	b29a      	uxth	r2, r3
   27a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27a04:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27a06:	2300      	movs	r3, #0
}
   27a08:	0018      	movs	r0, r3
   27a0a:	46bd      	mov	sp, r7
   27a0c:	b021      	add	sp, #132	; 0x84
   27a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27a10:	00033321 	.word	0x00033321
   27a14:	000276fb 	.word	0x000276fb

00027a18 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27a18:	b580      	push	{r7, lr}
   27a1a:	b084      	sub	sp, #16
   27a1c:	af00      	add	r7, sp, #0
   27a1e:	0002      	movs	r2, r0
   27a20:	1dfb      	adds	r3, r7, #7
   27a22:	701a      	strb	r2, [r3, #0]
   27a24:	1dbb      	adds	r3, r7, #6
   27a26:	1c0a      	adds	r2, r1, #0
   27a28:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27a2a:	4b1a      	ldr	r3, [pc, #104]	; (27a94 <sercom_set_gclk_generator+0x7c>)
   27a2c:	781b      	ldrb	r3, [r3, #0]
   27a2e:	2201      	movs	r2, #1
   27a30:	4053      	eors	r3, r2
   27a32:	b2db      	uxtb	r3, r3
   27a34:	2b00      	cmp	r3, #0
   27a36:	d103      	bne.n	27a40 <sercom_set_gclk_generator+0x28>
   27a38:	1dbb      	adds	r3, r7, #6
   27a3a:	781b      	ldrb	r3, [r3, #0]
   27a3c:	2b00      	cmp	r3, #0
   27a3e:	d01b      	beq.n	27a78 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27a40:	230c      	movs	r3, #12
   27a42:	18fb      	adds	r3, r7, r3
   27a44:	0018      	movs	r0, r3
   27a46:	4b14      	ldr	r3, [pc, #80]	; (27a98 <sercom_set_gclk_generator+0x80>)
   27a48:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27a4a:	230c      	movs	r3, #12
   27a4c:	18fb      	adds	r3, r7, r3
   27a4e:	1dfa      	adds	r2, r7, #7
   27a50:	7812      	ldrb	r2, [r2, #0]
   27a52:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27a54:	230c      	movs	r3, #12
   27a56:	18fb      	adds	r3, r7, r3
   27a58:	0019      	movs	r1, r3
   27a5a:	2013      	movs	r0, #19
   27a5c:	4b0f      	ldr	r3, [pc, #60]	; (27a9c <sercom_set_gclk_generator+0x84>)
   27a5e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27a60:	2013      	movs	r0, #19
   27a62:	4b0f      	ldr	r3, [pc, #60]	; (27aa0 <sercom_set_gclk_generator+0x88>)
   27a64:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27a66:	4b0b      	ldr	r3, [pc, #44]	; (27a94 <sercom_set_gclk_generator+0x7c>)
   27a68:	1dfa      	adds	r2, r7, #7
   27a6a:	7812      	ldrb	r2, [r2, #0]
   27a6c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27a6e:	4b09      	ldr	r3, [pc, #36]	; (27a94 <sercom_set_gclk_generator+0x7c>)
   27a70:	2201      	movs	r2, #1
   27a72:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27a74:	2300      	movs	r3, #0
   27a76:	e008      	b.n	27a8a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27a78:	4b06      	ldr	r3, [pc, #24]	; (27a94 <sercom_set_gclk_generator+0x7c>)
   27a7a:	785b      	ldrb	r3, [r3, #1]
   27a7c:	1dfa      	adds	r2, r7, #7
   27a7e:	7812      	ldrb	r2, [r2, #0]
   27a80:	429a      	cmp	r2, r3
   27a82:	d101      	bne.n	27a88 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27a84:	2300      	movs	r3, #0
   27a86:	e000      	b.n	27a8a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27a88:	231d      	movs	r3, #29
}
   27a8a:	0018      	movs	r0, r3
   27a8c:	46bd      	mov	sp, r7
   27a8e:	b004      	add	sp, #16
   27a90:	bd80      	pop	{r7, pc}
   27a92:	46c0      	nop			; (mov r8, r8)
   27a94:	200042d0 	.word	0x200042d0
   27a98:	000276e5 	.word	0x000276e5
   27a9c:	0002a4f1 	.word	0x0002a4f1
   27aa0:	0002a535 	.word	0x0002a535

00027aa4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27aa4:	b580      	push	{r7, lr}
   27aa6:	b082      	sub	sp, #8
   27aa8:	af00      	add	r7, sp, #0
   27aaa:	6078      	str	r0, [r7, #4]
   27aac:	000a      	movs	r2, r1
   27aae:	1cfb      	adds	r3, r7, #3
   27ab0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   27ab2:	687b      	ldr	r3, [r7, #4]
   27ab4:	4a4d      	ldr	r2, [pc, #308]	; (27bec <_sercom_get_default_pad+0x148>)
   27ab6:	4293      	cmp	r3, r2
   27ab8:	d03f      	beq.n	27b3a <_sercom_get_default_pad+0x96>
   27aba:	4a4c      	ldr	r2, [pc, #304]	; (27bec <_sercom_get_default_pad+0x148>)
   27abc:	4293      	cmp	r3, r2
   27abe:	d806      	bhi.n	27ace <_sercom_get_default_pad+0x2a>
   27ac0:	4a4b      	ldr	r2, [pc, #300]	; (27bf0 <_sercom_get_default_pad+0x14c>)
   27ac2:	4293      	cmp	r3, r2
   27ac4:	d00f      	beq.n	27ae6 <_sercom_get_default_pad+0x42>
   27ac6:	4a4b      	ldr	r2, [pc, #300]	; (27bf4 <_sercom_get_default_pad+0x150>)
   27ac8:	4293      	cmp	r3, r2
   27aca:	d021      	beq.n	27b10 <_sercom_get_default_pad+0x6c>
   27acc:	e089      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27ace:	4a4a      	ldr	r2, [pc, #296]	; (27bf8 <_sercom_get_default_pad+0x154>)
   27ad0:	4293      	cmp	r3, r2
   27ad2:	d100      	bne.n	27ad6 <_sercom_get_default_pad+0x32>
   27ad4:	e05b      	b.n	27b8e <_sercom_get_default_pad+0xea>
   27ad6:	4a49      	ldr	r2, [pc, #292]	; (27bfc <_sercom_get_default_pad+0x158>)
   27ad8:	4293      	cmp	r3, r2
   27ada:	d100      	bne.n	27ade <_sercom_get_default_pad+0x3a>
   27adc:	e06c      	b.n	27bb8 <_sercom_get_default_pad+0x114>
   27ade:	4a48      	ldr	r2, [pc, #288]	; (27c00 <_sercom_get_default_pad+0x15c>)
   27ae0:	4293      	cmp	r3, r2
   27ae2:	d03f      	beq.n	27b64 <_sercom_get_default_pad+0xc0>
   27ae4:	e07d      	b.n	27be2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   27ae6:	1cfb      	adds	r3, r7, #3
   27ae8:	781b      	ldrb	r3, [r3, #0]
   27aea:	2b01      	cmp	r3, #1
   27aec:	d00a      	beq.n	27b04 <_sercom_get_default_pad+0x60>
   27aee:	dc02      	bgt.n	27af6 <_sercom_get_default_pad+0x52>
   27af0:	2b00      	cmp	r3, #0
   27af2:	d005      	beq.n	27b00 <_sercom_get_default_pad+0x5c>
   27af4:	e075      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27af6:	2b02      	cmp	r3, #2
   27af8:	d006      	beq.n	27b08 <_sercom_get_default_pad+0x64>
   27afa:	2b03      	cmp	r3, #3
   27afc:	d006      	beq.n	27b0c <_sercom_get_default_pad+0x68>
   27afe:	e070      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b00:	4b40      	ldr	r3, [pc, #256]	; (27c04 <_sercom_get_default_pad+0x160>)
   27b02:	e06f      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b04:	4b40      	ldr	r3, [pc, #256]	; (27c08 <_sercom_get_default_pad+0x164>)
   27b06:	e06d      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b08:	4b40      	ldr	r3, [pc, #256]	; (27c0c <_sercom_get_default_pad+0x168>)
   27b0a:	e06b      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b0c:	4b40      	ldr	r3, [pc, #256]	; (27c10 <_sercom_get_default_pad+0x16c>)
   27b0e:	e069      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b10:	1cfb      	adds	r3, r7, #3
   27b12:	781b      	ldrb	r3, [r3, #0]
   27b14:	2b01      	cmp	r3, #1
   27b16:	d00a      	beq.n	27b2e <_sercom_get_default_pad+0x8a>
   27b18:	dc02      	bgt.n	27b20 <_sercom_get_default_pad+0x7c>
   27b1a:	2b00      	cmp	r3, #0
   27b1c:	d005      	beq.n	27b2a <_sercom_get_default_pad+0x86>
   27b1e:	e060      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b20:	2b02      	cmp	r3, #2
   27b22:	d006      	beq.n	27b32 <_sercom_get_default_pad+0x8e>
   27b24:	2b03      	cmp	r3, #3
   27b26:	d006      	beq.n	27b36 <_sercom_get_default_pad+0x92>
   27b28:	e05b      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b2a:	2303      	movs	r3, #3
   27b2c:	e05a      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b2e:	4b39      	ldr	r3, [pc, #228]	; (27c14 <_sercom_get_default_pad+0x170>)
   27b30:	e058      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b32:	4b39      	ldr	r3, [pc, #228]	; (27c18 <_sercom_get_default_pad+0x174>)
   27b34:	e056      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b36:	4b39      	ldr	r3, [pc, #228]	; (27c1c <_sercom_get_default_pad+0x178>)
   27b38:	e054      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b3a:	1cfb      	adds	r3, r7, #3
   27b3c:	781b      	ldrb	r3, [r3, #0]
   27b3e:	2b01      	cmp	r3, #1
   27b40:	d00a      	beq.n	27b58 <_sercom_get_default_pad+0xb4>
   27b42:	dc02      	bgt.n	27b4a <_sercom_get_default_pad+0xa6>
   27b44:	2b00      	cmp	r3, #0
   27b46:	d005      	beq.n	27b54 <_sercom_get_default_pad+0xb0>
   27b48:	e04b      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b4a:	2b02      	cmp	r3, #2
   27b4c:	d006      	beq.n	27b5c <_sercom_get_default_pad+0xb8>
   27b4e:	2b03      	cmp	r3, #3
   27b50:	d006      	beq.n	27b60 <_sercom_get_default_pad+0xbc>
   27b52:	e046      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b54:	4b32      	ldr	r3, [pc, #200]	; (27c20 <_sercom_get_default_pad+0x17c>)
   27b56:	e045      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b58:	4b32      	ldr	r3, [pc, #200]	; (27c24 <_sercom_get_default_pad+0x180>)
   27b5a:	e043      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b5c:	4b32      	ldr	r3, [pc, #200]	; (27c28 <_sercom_get_default_pad+0x184>)
   27b5e:	e041      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b60:	4b32      	ldr	r3, [pc, #200]	; (27c2c <_sercom_get_default_pad+0x188>)
   27b62:	e03f      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b64:	1cfb      	adds	r3, r7, #3
   27b66:	781b      	ldrb	r3, [r3, #0]
   27b68:	2b01      	cmp	r3, #1
   27b6a:	d00a      	beq.n	27b82 <_sercom_get_default_pad+0xde>
   27b6c:	dc02      	bgt.n	27b74 <_sercom_get_default_pad+0xd0>
   27b6e:	2b00      	cmp	r3, #0
   27b70:	d005      	beq.n	27b7e <_sercom_get_default_pad+0xda>
   27b72:	e036      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b74:	2b02      	cmp	r3, #2
   27b76:	d006      	beq.n	27b86 <_sercom_get_default_pad+0xe2>
   27b78:	2b03      	cmp	r3, #3
   27b7a:	d006      	beq.n	27b8a <_sercom_get_default_pad+0xe6>
   27b7c:	e031      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b7e:	4b2c      	ldr	r3, [pc, #176]	; (27c30 <_sercom_get_default_pad+0x18c>)
   27b80:	e030      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b82:	4b2c      	ldr	r3, [pc, #176]	; (27c34 <_sercom_get_default_pad+0x190>)
   27b84:	e02e      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b86:	4b2c      	ldr	r3, [pc, #176]	; (27c38 <_sercom_get_default_pad+0x194>)
   27b88:	e02c      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b8a:	4b2c      	ldr	r3, [pc, #176]	; (27c3c <_sercom_get_default_pad+0x198>)
   27b8c:	e02a      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27b8e:	1cfb      	adds	r3, r7, #3
   27b90:	781b      	ldrb	r3, [r3, #0]
   27b92:	2b01      	cmp	r3, #1
   27b94:	d00a      	beq.n	27bac <_sercom_get_default_pad+0x108>
   27b96:	dc02      	bgt.n	27b9e <_sercom_get_default_pad+0xfa>
   27b98:	2b00      	cmp	r3, #0
   27b9a:	d005      	beq.n	27ba8 <_sercom_get_default_pad+0x104>
   27b9c:	e021      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27b9e:	2b02      	cmp	r3, #2
   27ba0:	d006      	beq.n	27bb0 <_sercom_get_default_pad+0x10c>
   27ba2:	2b03      	cmp	r3, #3
   27ba4:	d006      	beq.n	27bb4 <_sercom_get_default_pad+0x110>
   27ba6:	e01c      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27ba8:	4b25      	ldr	r3, [pc, #148]	; (27c40 <_sercom_get_default_pad+0x19c>)
   27baa:	e01b      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bac:	4b25      	ldr	r3, [pc, #148]	; (27c44 <_sercom_get_default_pad+0x1a0>)
   27bae:	e019      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bb0:	4b25      	ldr	r3, [pc, #148]	; (27c48 <_sercom_get_default_pad+0x1a4>)
   27bb2:	e017      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bb4:	4b25      	ldr	r3, [pc, #148]	; (27c4c <_sercom_get_default_pad+0x1a8>)
   27bb6:	e015      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bb8:	1cfb      	adds	r3, r7, #3
   27bba:	781b      	ldrb	r3, [r3, #0]
   27bbc:	2b01      	cmp	r3, #1
   27bbe:	d00a      	beq.n	27bd6 <_sercom_get_default_pad+0x132>
   27bc0:	dc02      	bgt.n	27bc8 <_sercom_get_default_pad+0x124>
   27bc2:	2b00      	cmp	r3, #0
   27bc4:	d005      	beq.n	27bd2 <_sercom_get_default_pad+0x12e>
   27bc6:	e00c      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27bc8:	2b02      	cmp	r3, #2
   27bca:	d006      	beq.n	27bda <_sercom_get_default_pad+0x136>
   27bcc:	2b03      	cmp	r3, #3
   27bce:	d006      	beq.n	27bde <_sercom_get_default_pad+0x13a>
   27bd0:	e007      	b.n	27be2 <_sercom_get_default_pad+0x13e>
   27bd2:	4b1f      	ldr	r3, [pc, #124]	; (27c50 <_sercom_get_default_pad+0x1ac>)
   27bd4:	e006      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bd6:	4b1f      	ldr	r3, [pc, #124]	; (27c54 <_sercom_get_default_pad+0x1b0>)
   27bd8:	e004      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bda:	4b1f      	ldr	r3, [pc, #124]	; (27c58 <_sercom_get_default_pad+0x1b4>)
   27bdc:	e002      	b.n	27be4 <_sercom_get_default_pad+0x140>
   27bde:	4b1f      	ldr	r3, [pc, #124]	; (27c5c <_sercom_get_default_pad+0x1b8>)
   27be0:	e000      	b.n	27be4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   27be2:	2300      	movs	r3, #0
}
   27be4:	0018      	movs	r0, r3
   27be6:	46bd      	mov	sp, r7
   27be8:	b002      	add	sp, #8
   27bea:	bd80      	pop	{r7, pc}
   27bec:	42001000 	.word	0x42001000
   27bf0:	42000800 	.word	0x42000800
   27bf4:	42000c00 	.word	0x42000c00
   27bf8:	42001800 	.word	0x42001800
   27bfc:	42001c00 	.word	0x42001c00
   27c00:	42001400 	.word	0x42001400
   27c04:	00040003 	.word	0x00040003
   27c08:	00050003 	.word	0x00050003
   27c0c:	00060003 	.word	0x00060003
   27c10:	00070003 	.word	0x00070003
   27c14:	00010003 	.word	0x00010003
   27c18:	001e0003 	.word	0x001e0003
   27c1c:	001f0003 	.word	0x001f0003
   27c20:	00080003 	.word	0x00080003
   27c24:	00090003 	.word	0x00090003
   27c28:	000a0003 	.word	0x000a0003
   27c2c:	000b0003 	.word	0x000b0003
   27c30:	00100003 	.word	0x00100003
   27c34:	00110003 	.word	0x00110003
   27c38:	00120003 	.word	0x00120003
   27c3c:	00130003 	.word	0x00130003
   27c40:	000c0003 	.word	0x000c0003
   27c44:	000d0003 	.word	0x000d0003
   27c48:	000e0003 	.word	0x000e0003
   27c4c:	000f0003 	.word	0x000f0003
   27c50:	00160003 	.word	0x00160003
   27c54:	00170003 	.word	0x00170003
   27c58:	00180003 	.word	0x00180003
   27c5c:	00190003 	.word	0x00190003

00027c60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   27c60:	b590      	push	{r4, r7, lr}
   27c62:	b08b      	sub	sp, #44	; 0x2c
   27c64:	af00      	add	r7, sp, #0
   27c66:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   27c68:	230c      	movs	r3, #12
   27c6a:	18fb      	adds	r3, r7, r3
   27c6c:	4a0f      	ldr	r2, [pc, #60]	; (27cac <_sercom_get_sercom_inst_index+0x4c>)
   27c6e:	ca13      	ldmia	r2!, {r0, r1, r4}
   27c70:	c313      	stmia	r3!, {r0, r1, r4}
   27c72:	ca13      	ldmia	r2!, {r0, r1, r4}
   27c74:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27c76:	2300      	movs	r3, #0
   27c78:	627b      	str	r3, [r7, #36]	; 0x24
   27c7a:	e00e      	b.n	27c9a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   27c7c:	230c      	movs	r3, #12
   27c7e:	18fb      	adds	r3, r7, r3
   27c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27c82:	0092      	lsls	r2, r2, #2
   27c84:	58d3      	ldr	r3, [r2, r3]
   27c86:	001a      	movs	r2, r3
   27c88:	687b      	ldr	r3, [r7, #4]
   27c8a:	429a      	cmp	r2, r3
   27c8c:	d102      	bne.n	27c94 <_sercom_get_sercom_inst_index+0x34>
			return i;
   27c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27c90:	b2db      	uxtb	r3, r3
   27c92:	e006      	b.n	27ca2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27c96:	3301      	adds	r3, #1
   27c98:	627b      	str	r3, [r7, #36]	; 0x24
   27c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27c9c:	2b05      	cmp	r3, #5
   27c9e:	d9ed      	bls.n	27c7c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27ca0:	2300      	movs	r3, #0
}
   27ca2:	0018      	movs	r0, r3
   27ca4:	46bd      	mov	sp, r7
   27ca6:	b00b      	add	sp, #44	; 0x2c
   27ca8:	bd90      	pop	{r4, r7, pc}
   27caa:	46c0      	nop			; (mov r8, r8)
   27cac:	0003bbd4 	.word	0x0003bbd4

00027cb0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   27cb0:	b580      	push	{r7, lr}
   27cb2:	b082      	sub	sp, #8
   27cb4:	af00      	add	r7, sp, #0
   27cb6:	0002      	movs	r2, r0
   27cb8:	1dfb      	adds	r3, r7, #7
   27cba:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27cbc:	46c0      	nop			; (mov r8, r8)
   27cbe:	46bd      	mov	sp, r7
   27cc0:	b002      	add	sp, #8
   27cc2:	bd80      	pop	{r7, pc}

00027cc4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   27cc4:	b580      	push	{r7, lr}
   27cc6:	b084      	sub	sp, #16
   27cc8:	af00      	add	r7, sp, #0
   27cca:	0002      	movs	r2, r0
   27ccc:	6039      	str	r1, [r7, #0]
   27cce:	1dfb      	adds	r3, r7, #7
   27cd0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   27cd2:	4b13      	ldr	r3, [pc, #76]	; (27d20 <_sercom_set_handler+0x5c>)
   27cd4:	781b      	ldrb	r3, [r3, #0]
   27cd6:	2201      	movs	r2, #1
   27cd8:	4053      	eors	r3, r2
   27cda:	b2db      	uxtb	r3, r3
   27cdc:	2b00      	cmp	r3, #0
   27cde:	d015      	beq.n	27d0c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27ce0:	2300      	movs	r3, #0
   27ce2:	60fb      	str	r3, [r7, #12]
   27ce4:	e00c      	b.n	27d00 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   27ce6:	4b0f      	ldr	r3, [pc, #60]	; (27d24 <_sercom_set_handler+0x60>)
   27ce8:	68fa      	ldr	r2, [r7, #12]
   27cea:	0092      	lsls	r2, r2, #2
   27cec:	490e      	ldr	r1, [pc, #56]	; (27d28 <_sercom_set_handler+0x64>)
   27cee:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   27cf0:	4b0e      	ldr	r3, [pc, #56]	; (27d2c <_sercom_set_handler+0x68>)
   27cf2:	68fa      	ldr	r2, [r7, #12]
   27cf4:	0092      	lsls	r2, r2, #2
   27cf6:	2100      	movs	r1, #0
   27cf8:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27cfa:	68fb      	ldr	r3, [r7, #12]
   27cfc:	3301      	adds	r3, #1
   27cfe:	60fb      	str	r3, [r7, #12]
   27d00:	68fb      	ldr	r3, [r7, #12]
   27d02:	2b05      	cmp	r3, #5
   27d04:	d9ef      	bls.n	27ce6 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27d06:	4b06      	ldr	r3, [pc, #24]	; (27d20 <_sercom_set_handler+0x5c>)
   27d08:	2201      	movs	r2, #1
   27d0a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27d0c:	1dfb      	adds	r3, r7, #7
   27d0e:	781a      	ldrb	r2, [r3, #0]
   27d10:	4b04      	ldr	r3, [pc, #16]	; (27d24 <_sercom_set_handler+0x60>)
   27d12:	0092      	lsls	r2, r2, #2
   27d14:	6839      	ldr	r1, [r7, #0]
   27d16:	50d1      	str	r1, [r2, r3]
}
   27d18:	46c0      	nop			; (mov r8, r8)
   27d1a:	46bd      	mov	sp, r7
   27d1c:	b004      	add	sp, #16
   27d1e:	bd80      	pop	{r7, pc}
   27d20:	200042d2 	.word	0x200042d2
   27d24:	200042d4 	.word	0x200042d4
   27d28:	00027cb1 	.word	0x00027cb1
   27d2c:	20005dd0 	.word	0x20005dd0

00027d30 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   27d30:	b590      	push	{r4, r7, lr}
   27d32:	b085      	sub	sp, #20
   27d34:	af00      	add	r7, sp, #0
   27d36:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27d38:	2308      	movs	r3, #8
   27d3a:	18fb      	adds	r3, r7, r3
   27d3c:	4a0b      	ldr	r2, [pc, #44]	; (27d6c <_sercom_get_interrupt_vector+0x3c>)
   27d3e:	6811      	ldr	r1, [r2, #0]
   27d40:	6019      	str	r1, [r3, #0]
   27d42:	8892      	ldrh	r2, [r2, #4]
   27d44:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   27d46:	230f      	movs	r3, #15
   27d48:	18fc      	adds	r4, r7, r3
   27d4a:	687b      	ldr	r3, [r7, #4]
   27d4c:	0018      	movs	r0, r3
   27d4e:	4b08      	ldr	r3, [pc, #32]	; (27d70 <_sercom_get_interrupt_vector+0x40>)
   27d50:	4798      	blx	r3
   27d52:	0003      	movs	r3, r0
   27d54:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   27d56:	230f      	movs	r3, #15
   27d58:	18fb      	adds	r3, r7, r3
   27d5a:	781b      	ldrb	r3, [r3, #0]
   27d5c:	2208      	movs	r2, #8
   27d5e:	18ba      	adds	r2, r7, r2
   27d60:	5cd3      	ldrb	r3, [r2, r3]
   27d62:	b25b      	sxtb	r3, r3
}
   27d64:	0018      	movs	r0, r3
   27d66:	46bd      	mov	sp, r7
   27d68:	b005      	add	sp, #20
   27d6a:	bd90      	pop	{r4, r7, pc}
   27d6c:	0003bbec 	.word	0x0003bbec
   27d70:	00027c61 	.word	0x00027c61

00027d74 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   27d74:	b580      	push	{r7, lr}
   27d76:	af00      	add	r7, sp, #0
   27d78:	4b03      	ldr	r3, [pc, #12]	; (27d88 <SERCOM0_Handler+0x14>)
   27d7a:	681b      	ldr	r3, [r3, #0]
   27d7c:	2000      	movs	r0, #0
   27d7e:	4798      	blx	r3
   27d80:	46c0      	nop			; (mov r8, r8)
   27d82:	46bd      	mov	sp, r7
   27d84:	bd80      	pop	{r7, pc}
   27d86:	46c0      	nop			; (mov r8, r8)
   27d88:	200042d4 	.word	0x200042d4

00027d8c <SERCOM1_Handler>:
   27d8c:	b580      	push	{r7, lr}
   27d8e:	af00      	add	r7, sp, #0
   27d90:	4b03      	ldr	r3, [pc, #12]	; (27da0 <SERCOM1_Handler+0x14>)
   27d92:	685b      	ldr	r3, [r3, #4]
   27d94:	2001      	movs	r0, #1
   27d96:	4798      	blx	r3
   27d98:	46c0      	nop			; (mov r8, r8)
   27d9a:	46bd      	mov	sp, r7
   27d9c:	bd80      	pop	{r7, pc}
   27d9e:	46c0      	nop			; (mov r8, r8)
   27da0:	200042d4 	.word	0x200042d4

00027da4 <SERCOM2_Handler>:
   27da4:	b580      	push	{r7, lr}
   27da6:	af00      	add	r7, sp, #0
   27da8:	4b03      	ldr	r3, [pc, #12]	; (27db8 <SERCOM2_Handler+0x14>)
   27daa:	689b      	ldr	r3, [r3, #8]
   27dac:	2002      	movs	r0, #2
   27dae:	4798      	blx	r3
   27db0:	46c0      	nop			; (mov r8, r8)
   27db2:	46bd      	mov	sp, r7
   27db4:	bd80      	pop	{r7, pc}
   27db6:	46c0      	nop			; (mov r8, r8)
   27db8:	200042d4 	.word	0x200042d4

00027dbc <SERCOM3_Handler>:
   27dbc:	b580      	push	{r7, lr}
   27dbe:	af00      	add	r7, sp, #0
   27dc0:	4b03      	ldr	r3, [pc, #12]	; (27dd0 <SERCOM3_Handler+0x14>)
   27dc2:	68db      	ldr	r3, [r3, #12]
   27dc4:	2003      	movs	r0, #3
   27dc6:	4798      	blx	r3
   27dc8:	46c0      	nop			; (mov r8, r8)
   27dca:	46bd      	mov	sp, r7
   27dcc:	bd80      	pop	{r7, pc}
   27dce:	46c0      	nop			; (mov r8, r8)
   27dd0:	200042d4 	.word	0x200042d4

00027dd4 <SERCOM4_Handler>:
   27dd4:	b580      	push	{r7, lr}
   27dd6:	af00      	add	r7, sp, #0
   27dd8:	4b03      	ldr	r3, [pc, #12]	; (27de8 <SERCOM4_Handler+0x14>)
   27dda:	691b      	ldr	r3, [r3, #16]
   27ddc:	2004      	movs	r0, #4
   27dde:	4798      	blx	r3
   27de0:	46c0      	nop			; (mov r8, r8)
   27de2:	46bd      	mov	sp, r7
   27de4:	bd80      	pop	{r7, pc}
   27de6:	46c0      	nop			; (mov r8, r8)
   27de8:	200042d4 	.word	0x200042d4

00027dec <SERCOM5_Handler>:
   27dec:	b580      	push	{r7, lr}
   27dee:	af00      	add	r7, sp, #0
   27df0:	4b03      	ldr	r3, [pc, #12]	; (27e00 <SERCOM5_Handler+0x14>)
   27df2:	695b      	ldr	r3, [r3, #20]
   27df4:	2005      	movs	r0, #5
   27df6:	4798      	blx	r3
   27df8:	46c0      	nop			; (mov r8, r8)
   27dfa:	46bd      	mov	sp, r7
   27dfc:	bd80      	pop	{r7, pc}
   27dfe:	46c0      	nop			; (mov r8, r8)
   27e00:	200042d4 	.word	0x200042d4

00027e04 <system_pinmux_get_config_defaults>:
{
   27e04:	b580      	push	{r7, lr}
   27e06:	b082      	sub	sp, #8
   27e08:	af00      	add	r7, sp, #0
   27e0a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27e0c:	687b      	ldr	r3, [r7, #4]
   27e0e:	2280      	movs	r2, #128	; 0x80
   27e10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27e12:	687b      	ldr	r3, [r7, #4]
   27e14:	2200      	movs	r2, #0
   27e16:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27e18:	687b      	ldr	r3, [r7, #4]
   27e1a:	2201      	movs	r2, #1
   27e1c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27e1e:	687b      	ldr	r3, [r7, #4]
   27e20:	2200      	movs	r2, #0
   27e22:	70da      	strb	r2, [r3, #3]
}
   27e24:	46c0      	nop			; (mov r8, r8)
   27e26:	46bd      	mov	sp, r7
   27e28:	b002      	add	sp, #8
   27e2a:	bd80      	pop	{r7, pc}

00027e2c <system_pinmux_get_group_from_gpio_pin>:
{
   27e2c:	b580      	push	{r7, lr}
   27e2e:	b084      	sub	sp, #16
   27e30:	af00      	add	r7, sp, #0
   27e32:	0002      	movs	r2, r0
   27e34:	1dfb      	adds	r3, r7, #7
   27e36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27e38:	230f      	movs	r3, #15
   27e3a:	18fb      	adds	r3, r7, r3
   27e3c:	1dfa      	adds	r2, r7, #7
   27e3e:	7812      	ldrb	r2, [r2, #0]
   27e40:	09d2      	lsrs	r2, r2, #7
   27e42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27e44:	230e      	movs	r3, #14
   27e46:	18fb      	adds	r3, r7, r3
   27e48:	1dfa      	adds	r2, r7, #7
   27e4a:	7812      	ldrb	r2, [r2, #0]
   27e4c:	0952      	lsrs	r2, r2, #5
   27e4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27e50:	4b0d      	ldr	r3, [pc, #52]	; (27e88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27e52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27e54:	230f      	movs	r3, #15
   27e56:	18fb      	adds	r3, r7, r3
   27e58:	781b      	ldrb	r3, [r3, #0]
   27e5a:	2b00      	cmp	r3, #0
   27e5c:	d10f      	bne.n	27e7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27e5e:	230f      	movs	r3, #15
   27e60:	18fb      	adds	r3, r7, r3
   27e62:	781b      	ldrb	r3, [r3, #0]
   27e64:	009b      	lsls	r3, r3, #2
   27e66:	2210      	movs	r2, #16
   27e68:	4694      	mov	ip, r2
   27e6a:	44bc      	add	ip, r7
   27e6c:	4463      	add	r3, ip
   27e6e:	3b08      	subs	r3, #8
   27e70:	681a      	ldr	r2, [r3, #0]
   27e72:	230e      	movs	r3, #14
   27e74:	18fb      	adds	r3, r7, r3
   27e76:	781b      	ldrb	r3, [r3, #0]
   27e78:	01db      	lsls	r3, r3, #7
   27e7a:	18d3      	adds	r3, r2, r3
   27e7c:	e000      	b.n	27e80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27e7e:	2300      	movs	r3, #0
}
   27e80:	0018      	movs	r0, r3
   27e82:	46bd      	mov	sp, r7
   27e84:	b004      	add	sp, #16
   27e86:	bd80      	pop	{r7, pc}
   27e88:	41004400 	.word	0x41004400

00027e8c <port_get_group_from_gpio_pin>:
{
   27e8c:	b580      	push	{r7, lr}
   27e8e:	b082      	sub	sp, #8
   27e90:	af00      	add	r7, sp, #0
   27e92:	0002      	movs	r2, r0
   27e94:	1dfb      	adds	r3, r7, #7
   27e96:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27e98:	1dfb      	adds	r3, r7, #7
   27e9a:	781b      	ldrb	r3, [r3, #0]
   27e9c:	0018      	movs	r0, r3
   27e9e:	4b03      	ldr	r3, [pc, #12]	; (27eac <port_get_group_from_gpio_pin+0x20>)
   27ea0:	4798      	blx	r3
   27ea2:	0003      	movs	r3, r0
}
   27ea4:	0018      	movs	r0, r3
   27ea6:	46bd      	mov	sp, r7
   27ea8:	b002      	add	sp, #8
   27eaa:	bd80      	pop	{r7, pc}
   27eac:	00027e2d 	.word	0x00027e2d

00027eb0 <port_pin_set_output_level>:
{
   27eb0:	b580      	push	{r7, lr}
   27eb2:	b084      	sub	sp, #16
   27eb4:	af00      	add	r7, sp, #0
   27eb6:	0002      	movs	r2, r0
   27eb8:	1dfb      	adds	r3, r7, #7
   27eba:	701a      	strb	r2, [r3, #0]
   27ebc:	1dbb      	adds	r3, r7, #6
   27ebe:	1c0a      	adds	r2, r1, #0
   27ec0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   27ec2:	1dfb      	adds	r3, r7, #7
   27ec4:	781b      	ldrb	r3, [r3, #0]
   27ec6:	0018      	movs	r0, r3
   27ec8:	4b0d      	ldr	r3, [pc, #52]	; (27f00 <port_pin_set_output_level+0x50>)
   27eca:	4798      	blx	r3
   27ecc:	0003      	movs	r3, r0
   27ece:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27ed0:	1dfb      	adds	r3, r7, #7
   27ed2:	781b      	ldrb	r3, [r3, #0]
   27ed4:	221f      	movs	r2, #31
   27ed6:	4013      	ands	r3, r2
   27ed8:	2201      	movs	r2, #1
   27eda:	409a      	lsls	r2, r3
   27edc:	0013      	movs	r3, r2
   27ede:	60bb      	str	r3, [r7, #8]
	if (level) {
   27ee0:	1dbb      	adds	r3, r7, #6
   27ee2:	781b      	ldrb	r3, [r3, #0]
   27ee4:	2b00      	cmp	r3, #0
   27ee6:	d003      	beq.n	27ef0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27ee8:	68fb      	ldr	r3, [r7, #12]
   27eea:	68ba      	ldr	r2, [r7, #8]
   27eec:	619a      	str	r2, [r3, #24]
}
   27eee:	e002      	b.n	27ef6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27ef0:	68fb      	ldr	r3, [r7, #12]
   27ef2:	68ba      	ldr	r2, [r7, #8]
   27ef4:	615a      	str	r2, [r3, #20]
}
   27ef6:	46c0      	nop			; (mov r8, r8)
   27ef8:	46bd      	mov	sp, r7
   27efa:	b004      	add	sp, #16
   27efc:	bd80      	pop	{r7, pc}
   27efe:	46c0      	nop			; (mov r8, r8)
   27f00:	00027e8d 	.word	0x00027e8d

00027f04 <system_gclk_chan_get_config_defaults>:
{
   27f04:	b580      	push	{r7, lr}
   27f06:	b082      	sub	sp, #8
   27f08:	af00      	add	r7, sp, #0
   27f0a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27f0c:	687b      	ldr	r3, [r7, #4]
   27f0e:	2200      	movs	r2, #0
   27f10:	701a      	strb	r2, [r3, #0]
}
   27f12:	46c0      	nop			; (mov r8, r8)
   27f14:	46bd      	mov	sp, r7
   27f16:	b002      	add	sp, #8
   27f18:	bd80      	pop	{r7, pc}
	...

00027f1c <system_apb_clock_set_mask>:
{
   27f1c:	b580      	push	{r7, lr}
   27f1e:	b082      	sub	sp, #8
   27f20:	af00      	add	r7, sp, #0
   27f22:	0002      	movs	r2, r0
   27f24:	6039      	str	r1, [r7, #0]
   27f26:	1dfb      	adds	r3, r7, #7
   27f28:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27f2a:	1dfb      	adds	r3, r7, #7
   27f2c:	781b      	ldrb	r3, [r3, #0]
   27f2e:	2b01      	cmp	r3, #1
   27f30:	d00a      	beq.n	27f48 <system_apb_clock_set_mask+0x2c>
   27f32:	2b02      	cmp	r3, #2
   27f34:	d00f      	beq.n	27f56 <system_apb_clock_set_mask+0x3a>
   27f36:	2b00      	cmp	r3, #0
   27f38:	d114      	bne.n	27f64 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27f3a:	4b0e      	ldr	r3, [pc, #56]	; (27f74 <system_apb_clock_set_mask+0x58>)
   27f3c:	4a0d      	ldr	r2, [pc, #52]	; (27f74 <system_apb_clock_set_mask+0x58>)
   27f3e:	6991      	ldr	r1, [r2, #24]
   27f40:	683a      	ldr	r2, [r7, #0]
   27f42:	430a      	orrs	r2, r1
   27f44:	619a      	str	r2, [r3, #24]
			break;
   27f46:	e00f      	b.n	27f68 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27f48:	4b0a      	ldr	r3, [pc, #40]	; (27f74 <system_apb_clock_set_mask+0x58>)
   27f4a:	4a0a      	ldr	r2, [pc, #40]	; (27f74 <system_apb_clock_set_mask+0x58>)
   27f4c:	69d1      	ldr	r1, [r2, #28]
   27f4e:	683a      	ldr	r2, [r7, #0]
   27f50:	430a      	orrs	r2, r1
   27f52:	61da      	str	r2, [r3, #28]
			break;
   27f54:	e008      	b.n	27f68 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27f56:	4b07      	ldr	r3, [pc, #28]	; (27f74 <system_apb_clock_set_mask+0x58>)
   27f58:	4a06      	ldr	r2, [pc, #24]	; (27f74 <system_apb_clock_set_mask+0x58>)
   27f5a:	6a11      	ldr	r1, [r2, #32]
   27f5c:	683a      	ldr	r2, [r7, #0]
   27f5e:	430a      	orrs	r2, r1
   27f60:	621a      	str	r2, [r3, #32]
			break;
   27f62:	e001      	b.n	27f68 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27f64:	2317      	movs	r3, #23
   27f66:	e000      	b.n	27f6a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27f68:	2300      	movs	r3, #0
}
   27f6a:	0018      	movs	r0, r3
   27f6c:	46bd      	mov	sp, r7
   27f6e:	b002      	add	sp, #8
   27f70:	bd80      	pop	{r7, pc}
   27f72:	46c0      	nop			; (mov r8, r8)
   27f74:	40000400 	.word	0x40000400

00027f78 <system_is_debugger_present>:
{
   27f78:	b580      	push	{r7, lr}
   27f7a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27f7c:	4b05      	ldr	r3, [pc, #20]	; (27f94 <system_is_debugger_present+0x1c>)
   27f7e:	789b      	ldrb	r3, [r3, #2]
   27f80:	b2db      	uxtb	r3, r3
   27f82:	001a      	movs	r2, r3
   27f84:	2302      	movs	r3, #2
   27f86:	4013      	ands	r3, r2
   27f88:	1e5a      	subs	r2, r3, #1
   27f8a:	4193      	sbcs	r3, r2
   27f8c:	b2db      	uxtb	r3, r3
}
   27f8e:	0018      	movs	r0, r3
   27f90:	46bd      	mov	sp, r7
   27f92:	bd80      	pop	{r7, pc}
   27f94:	41002000 	.word	0x41002000

00027f98 <system_interrupt_enable>:
{
   27f98:	b580      	push	{r7, lr}
   27f9a:	b082      	sub	sp, #8
   27f9c:	af00      	add	r7, sp, #0
   27f9e:	0002      	movs	r2, r0
   27fa0:	1dfb      	adds	r3, r7, #7
   27fa2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27fa4:	4b06      	ldr	r3, [pc, #24]	; (27fc0 <system_interrupt_enable+0x28>)
   27fa6:	1dfa      	adds	r2, r7, #7
   27fa8:	7812      	ldrb	r2, [r2, #0]
   27faa:	0011      	movs	r1, r2
   27fac:	221f      	movs	r2, #31
   27fae:	400a      	ands	r2, r1
   27fb0:	2101      	movs	r1, #1
   27fb2:	4091      	lsls	r1, r2
   27fb4:	000a      	movs	r2, r1
   27fb6:	601a      	str	r2, [r3, #0]
}
   27fb8:	46c0      	nop			; (mov r8, r8)
   27fba:	46bd      	mov	sp, r7
   27fbc:	b002      	add	sp, #8
   27fbe:	bd80      	pop	{r7, pc}
   27fc0:	e000e100 	.word	0xe000e100

00027fc4 <system_interrupt_disable>:
{
   27fc4:	b580      	push	{r7, lr}
   27fc6:	b082      	sub	sp, #8
   27fc8:	af00      	add	r7, sp, #0
   27fca:	0002      	movs	r2, r0
   27fcc:	1dfb      	adds	r3, r7, #7
   27fce:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27fd0:	4a07      	ldr	r2, [pc, #28]	; (27ff0 <system_interrupt_disable+0x2c>)
   27fd2:	1dfb      	adds	r3, r7, #7
   27fd4:	781b      	ldrb	r3, [r3, #0]
   27fd6:	0019      	movs	r1, r3
   27fd8:	231f      	movs	r3, #31
   27fda:	400b      	ands	r3, r1
   27fdc:	2101      	movs	r1, #1
   27fde:	4099      	lsls	r1, r3
   27fe0:	000b      	movs	r3, r1
   27fe2:	0019      	movs	r1, r3
   27fe4:	2380      	movs	r3, #128	; 0x80
   27fe6:	50d1      	str	r1, [r2, r3]
}
   27fe8:	46c0      	nop			; (mov r8, r8)
   27fea:	46bd      	mov	sp, r7
   27fec:	b002      	add	sp, #8
   27fee:	bd80      	pop	{r7, pc}
   27ff0:	e000e100 	.word	0xe000e100

00027ff4 <spi_is_syncing>:
{
   27ff4:	b580      	push	{r7, lr}
   27ff6:	b084      	sub	sp, #16
   27ff8:	af00      	add	r7, sp, #0
   27ffa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27ffc:	687b      	ldr	r3, [r7, #4]
   27ffe:	681b      	ldr	r3, [r3, #0]
   28000:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   28002:	68fb      	ldr	r3, [r7, #12]
   28004:	69db      	ldr	r3, [r3, #28]
   28006:	1e5a      	subs	r2, r3, #1
   28008:	4193      	sbcs	r3, r2
   2800a:	b2db      	uxtb	r3, r3
}
   2800c:	0018      	movs	r0, r3
   2800e:	46bd      	mov	sp, r7
   28010:	b004      	add	sp, #16
   28012:	bd80      	pop	{r7, pc}

00028014 <spi_enable>:
{
   28014:	b580      	push	{r7, lr}
   28016:	b084      	sub	sp, #16
   28018:	af00      	add	r7, sp, #0
   2801a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2801c:	687b      	ldr	r3, [r7, #4]
   2801e:	681b      	ldr	r3, [r3, #0]
   28020:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   28022:	687b      	ldr	r3, [r7, #4]
   28024:	681b      	ldr	r3, [r3, #0]
   28026:	0018      	movs	r0, r3
   28028:	4b0b      	ldr	r3, [pc, #44]	; (28058 <spi_enable+0x44>)
   2802a:	4798      	blx	r3
   2802c:	0003      	movs	r3, r0
   2802e:	0018      	movs	r0, r3
   28030:	4b0a      	ldr	r3, [pc, #40]	; (2805c <spi_enable+0x48>)
   28032:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28034:	46c0      	nop			; (mov r8, r8)
   28036:	687b      	ldr	r3, [r7, #4]
   28038:	0018      	movs	r0, r3
   2803a:	4b09      	ldr	r3, [pc, #36]	; (28060 <spi_enable+0x4c>)
   2803c:	4798      	blx	r3
   2803e:	1e03      	subs	r3, r0, #0
   28040:	d1f9      	bne.n	28036 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   28042:	68fb      	ldr	r3, [r7, #12]
   28044:	681b      	ldr	r3, [r3, #0]
   28046:	2202      	movs	r2, #2
   28048:	431a      	orrs	r2, r3
   2804a:	68fb      	ldr	r3, [r7, #12]
   2804c:	601a      	str	r2, [r3, #0]
}
   2804e:	46c0      	nop			; (mov r8, r8)
   28050:	46bd      	mov	sp, r7
   28052:	b004      	add	sp, #16
   28054:	bd80      	pop	{r7, pc}
   28056:	46c0      	nop			; (mov r8, r8)
   28058:	00027d31 	.word	0x00027d31
   2805c:	00027f99 	.word	0x00027f99
   28060:	00027ff5 	.word	0x00027ff5

00028064 <spi_disable>:
{
   28064:	b580      	push	{r7, lr}
   28066:	b084      	sub	sp, #16
   28068:	af00      	add	r7, sp, #0
   2806a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2806c:	687b      	ldr	r3, [r7, #4]
   2806e:	681b      	ldr	r3, [r3, #0]
   28070:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   28072:	687b      	ldr	r3, [r7, #4]
   28074:	681b      	ldr	r3, [r3, #0]
   28076:	0018      	movs	r0, r3
   28078:	4b0e      	ldr	r3, [pc, #56]	; (280b4 <spi_disable+0x50>)
   2807a:	4798      	blx	r3
   2807c:	0003      	movs	r3, r0
   2807e:	0018      	movs	r0, r3
   28080:	4b0d      	ldr	r3, [pc, #52]	; (280b8 <spi_disable+0x54>)
   28082:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28084:	46c0      	nop			; (mov r8, r8)
   28086:	687b      	ldr	r3, [r7, #4]
   28088:	0018      	movs	r0, r3
   2808a:	4b0c      	ldr	r3, [pc, #48]	; (280bc <spi_disable+0x58>)
   2808c:	4798      	blx	r3
   2808e:	1e03      	subs	r3, r0, #0
   28090:	d1f9      	bne.n	28086 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   28092:	68fb      	ldr	r3, [r7, #12]
   28094:	228f      	movs	r2, #143	; 0x8f
   28096:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   28098:	68fb      	ldr	r3, [r7, #12]
   2809a:	228f      	movs	r2, #143	; 0x8f
   2809c:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2809e:	68fb      	ldr	r3, [r7, #12]
   280a0:	681b      	ldr	r3, [r3, #0]
   280a2:	2202      	movs	r2, #2
   280a4:	4393      	bics	r3, r2
   280a6:	001a      	movs	r2, r3
   280a8:	68fb      	ldr	r3, [r7, #12]
   280aa:	601a      	str	r2, [r3, #0]
}
   280ac:	46c0      	nop			; (mov r8, r8)
   280ae:	46bd      	mov	sp, r7
   280b0:	b004      	add	sp, #16
   280b2:	bd80      	pop	{r7, pc}
   280b4:	00027d31 	.word	0x00027d31
   280b8:	00027fc5 	.word	0x00027fc5
   280bc:	00027ff5 	.word	0x00027ff5

000280c0 <spi_is_write_complete>:
{
   280c0:	b580      	push	{r7, lr}
   280c2:	b084      	sub	sp, #16
   280c4:	af00      	add	r7, sp, #0
   280c6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   280c8:	687b      	ldr	r3, [r7, #4]
   280ca:	681b      	ldr	r3, [r3, #0]
   280cc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   280ce:	68fb      	ldr	r3, [r7, #12]
   280d0:	7e1b      	ldrb	r3, [r3, #24]
   280d2:	b2db      	uxtb	r3, r3
   280d4:	001a      	movs	r2, r3
   280d6:	2302      	movs	r3, #2
   280d8:	4013      	ands	r3, r2
   280da:	1e5a      	subs	r2, r3, #1
   280dc:	4193      	sbcs	r3, r2
   280de:	b2db      	uxtb	r3, r3
}
   280e0:	0018      	movs	r0, r3
   280e2:	46bd      	mov	sp, r7
   280e4:	b004      	add	sp, #16
   280e6:	bd80      	pop	{r7, pc}

000280e8 <spi_is_ready_to_write>:
{
   280e8:	b580      	push	{r7, lr}
   280ea:	b084      	sub	sp, #16
   280ec:	af00      	add	r7, sp, #0
   280ee:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   280f0:	687b      	ldr	r3, [r7, #4]
   280f2:	681b      	ldr	r3, [r3, #0]
   280f4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   280f6:	68fb      	ldr	r3, [r7, #12]
   280f8:	7e1b      	ldrb	r3, [r3, #24]
   280fa:	b2db      	uxtb	r3, r3
   280fc:	001a      	movs	r2, r3
   280fe:	2301      	movs	r3, #1
   28100:	4013      	ands	r3, r2
   28102:	1e5a      	subs	r2, r3, #1
   28104:	4193      	sbcs	r3, r2
   28106:	b2db      	uxtb	r3, r3
}
   28108:	0018      	movs	r0, r3
   2810a:	46bd      	mov	sp, r7
   2810c:	b004      	add	sp, #16
   2810e:	bd80      	pop	{r7, pc}

00028110 <spi_is_ready_to_read>:
{
   28110:	b580      	push	{r7, lr}
   28112:	b084      	sub	sp, #16
   28114:	af00      	add	r7, sp, #0
   28116:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28118:	687b      	ldr	r3, [r7, #4]
   2811a:	681b      	ldr	r3, [r3, #0]
   2811c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2811e:	68fb      	ldr	r3, [r7, #12]
   28120:	7e1b      	ldrb	r3, [r3, #24]
   28122:	b2db      	uxtb	r3, r3
   28124:	001a      	movs	r2, r3
   28126:	2304      	movs	r3, #4
   28128:	4013      	ands	r3, r2
   2812a:	1e5a      	subs	r2, r3, #1
   2812c:	4193      	sbcs	r3, r2
   2812e:	b2db      	uxtb	r3, r3
}
   28130:	0018      	movs	r0, r3
   28132:	46bd      	mov	sp, r7
   28134:	b004      	add	sp, #16
   28136:	bd80      	pop	{r7, pc}

00028138 <spi_write>:
{
   28138:	b580      	push	{r7, lr}
   2813a:	b084      	sub	sp, #16
   2813c:	af00      	add	r7, sp, #0
   2813e:	6078      	str	r0, [r7, #4]
   28140:	000a      	movs	r2, r1
   28142:	1cbb      	adds	r3, r7, #2
   28144:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28146:	687b      	ldr	r3, [r7, #4]
   28148:	681b      	ldr	r3, [r3, #0]
   2814a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   2814c:	687b      	ldr	r3, [r7, #4]
   2814e:	0018      	movs	r0, r3
   28150:	4b0a      	ldr	r3, [pc, #40]	; (2817c <spi_write+0x44>)
   28152:	4798      	blx	r3
   28154:	0003      	movs	r3, r0
   28156:	001a      	movs	r2, r3
   28158:	2301      	movs	r3, #1
   2815a:	4053      	eors	r3, r2
   2815c:	b2db      	uxtb	r3, r3
   2815e:	2b00      	cmp	r3, #0
   28160:	d001      	beq.n	28166 <spi_write+0x2e>
		return STATUS_BUSY;
   28162:	2305      	movs	r3, #5
   28164:	e006      	b.n	28174 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   28166:	1cbb      	adds	r3, r7, #2
   28168:	881b      	ldrh	r3, [r3, #0]
   2816a:	05db      	lsls	r3, r3, #23
   2816c:	0dda      	lsrs	r2, r3, #23
   2816e:	68fb      	ldr	r3, [r7, #12]
   28170:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   28172:	2300      	movs	r3, #0
}
   28174:	0018      	movs	r0, r3
   28176:	46bd      	mov	sp, r7
   28178:	b004      	add	sp, #16
   2817a:	bd80      	pop	{r7, pc}
   2817c:	000280e9 	.word	0x000280e9

00028180 <spi_read>:
{
   28180:	b580      	push	{r7, lr}
   28182:	b084      	sub	sp, #16
   28184:	af00      	add	r7, sp, #0
   28186:	6078      	str	r0, [r7, #4]
   28188:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2818a:	687b      	ldr	r3, [r7, #4]
   2818c:	681b      	ldr	r3, [r3, #0]
   2818e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   28190:	687b      	ldr	r3, [r7, #4]
   28192:	0018      	movs	r0, r3
   28194:	4b1b      	ldr	r3, [pc, #108]	; (28204 <spi_read+0x84>)
   28196:	4798      	blx	r3
   28198:	0003      	movs	r3, r0
   2819a:	001a      	movs	r2, r3
   2819c:	2301      	movs	r3, #1
   2819e:	4053      	eors	r3, r2
   281a0:	b2db      	uxtb	r3, r3
   281a2:	2b00      	cmp	r3, #0
   281a4:	d001      	beq.n	281aa <spi_read+0x2a>
		return STATUS_ERR_IO;
   281a6:	2310      	movs	r3, #16
   281a8:	e027      	b.n	281fa <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   281aa:	230f      	movs	r3, #15
   281ac:	18fb      	adds	r3, r7, r3
   281ae:	2200      	movs	r2, #0
   281b0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   281b2:	68bb      	ldr	r3, [r7, #8]
   281b4:	8b5b      	ldrh	r3, [r3, #26]
   281b6:	b29b      	uxth	r3, r3
   281b8:	001a      	movs	r2, r3
   281ba:	2304      	movs	r3, #4
   281bc:	4013      	ands	r3, r2
   281be:	d006      	beq.n	281ce <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   281c0:	230f      	movs	r3, #15
   281c2:	18fb      	adds	r3, r7, r3
   281c4:	221e      	movs	r2, #30
   281c6:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   281c8:	68bb      	ldr	r3, [r7, #8]
   281ca:	2204      	movs	r2, #4
   281cc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   281ce:	687b      	ldr	r3, [r7, #4]
   281d0:	799b      	ldrb	r3, [r3, #6]
   281d2:	2b01      	cmp	r3, #1
   281d4:	d108      	bne.n	281e8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   281d6:	68bb      	ldr	r3, [r7, #8]
   281d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   281da:	b29b      	uxth	r3, r3
   281dc:	05db      	lsls	r3, r3, #23
   281de:	0ddb      	lsrs	r3, r3, #23
   281e0:	b29a      	uxth	r2, r3
   281e2:	683b      	ldr	r3, [r7, #0]
   281e4:	801a      	strh	r2, [r3, #0]
   281e6:	e005      	b.n	281f4 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   281e8:	68bb      	ldr	r3, [r7, #8]
   281ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   281ec:	b2db      	uxtb	r3, r3
   281ee:	b29a      	uxth	r2, r3
   281f0:	683b      	ldr	r3, [r7, #0]
   281f2:	801a      	strh	r2, [r3, #0]
	return retval;
   281f4:	230f      	movs	r3, #15
   281f6:	18fb      	adds	r3, r7, r3
   281f8:	781b      	ldrb	r3, [r3, #0]
}
   281fa:	0018      	movs	r0, r3
   281fc:	46bd      	mov	sp, r7
   281fe:	b004      	add	sp, #16
   28200:	bd80      	pop	{r7, pc}
   28202:	46c0      	nop			; (mov r8, r8)
   28204:	00028111 	.word	0x00028111

00028208 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28208:	b590      	push	{r4, r7, lr}
   2820a:	b089      	sub	sp, #36	; 0x24
   2820c:	af00      	add	r7, sp, #0
   2820e:	6078      	str	r0, [r7, #4]
   28210:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   28212:	230c      	movs	r3, #12
   28214:	18fb      	adds	r3, r7, r3
   28216:	2200      	movs	r2, #0
   28218:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2821a:	687b      	ldr	r3, [r7, #4]
   2821c:	681b      	ldr	r3, [r3, #0]
   2821e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   28220:	687b      	ldr	r3, [r7, #4]
   28222:	0018      	movs	r0, r3
   28224:	4b24      	ldr	r3, [pc, #144]	; (282b8 <spi_set_baudrate+0xb0>)
   28226:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28228:	46c0      	nop			; (mov r8, r8)
   2822a:	687b      	ldr	r3, [r7, #4]
   2822c:	0018      	movs	r0, r3
   2822e:	4b23      	ldr	r3, [pc, #140]	; (282bc <spi_set_baudrate+0xb4>)
   28230:	4798      	blx	r3
   28232:	1e03      	subs	r3, r0, #0
   28234:	d1f9      	bne.n	2822a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28236:	687b      	ldr	r3, [r7, #4]
   28238:	681b      	ldr	r3, [r3, #0]
   2823a:	0018      	movs	r0, r3
   2823c:	4b20      	ldr	r3, [pc, #128]	; (282c0 <spi_set_baudrate+0xb8>)
   2823e:	4798      	blx	r3
   28240:	0003      	movs	r3, r0
   28242:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28244:	69bb      	ldr	r3, [r7, #24]
   28246:	3314      	adds	r3, #20
   28248:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2824a:	697b      	ldr	r3, [r7, #20]
   2824c:	b2db      	uxtb	r3, r3
   2824e:	0018      	movs	r0, r3
   28250:	4b1c      	ldr	r3, [pc, #112]	; (282c4 <spi_set_baudrate+0xbc>)
   28252:	4798      	blx	r3
   28254:	0003      	movs	r3, r0
   28256:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28258:	230f      	movs	r3, #15
   2825a:	18fc      	adds	r4, r7, r3
   2825c:	230c      	movs	r3, #12
   2825e:	18fa      	adds	r2, r7, r3
   28260:	6939      	ldr	r1, [r7, #16]
   28262:	683b      	ldr	r3, [r7, #0]
   28264:	0018      	movs	r0, r3
   28266:	4b18      	ldr	r3, [pc, #96]	; (282c8 <spi_set_baudrate+0xc0>)
   28268:	4798      	blx	r3
   2826a:	0003      	movs	r3, r0
   2826c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2826e:	230f      	movs	r3, #15
   28270:	18fb      	adds	r3, r7, r3
   28272:	781b      	ldrb	r3, [r3, #0]
   28274:	2b00      	cmp	r3, #0
   28276:	d001      	beq.n	2827c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28278:	2317      	movs	r3, #23
   2827a:	e018      	b.n	282ae <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   2827c:	230c      	movs	r3, #12
   2827e:	18fb      	adds	r3, r7, r3
   28280:	881b      	ldrh	r3, [r3, #0]
   28282:	b2da      	uxtb	r2, r3
   28284:	69fb      	ldr	r3, [r7, #28]
   28286:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28288:	46c0      	nop			; (mov r8, r8)
   2828a:	687b      	ldr	r3, [r7, #4]
   2828c:	0018      	movs	r0, r3
   2828e:	4b0b      	ldr	r3, [pc, #44]	; (282bc <spi_set_baudrate+0xb4>)
   28290:	4798      	blx	r3
   28292:	1e03      	subs	r3, r0, #0
   28294:	d1f9      	bne.n	2828a <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28296:	687b      	ldr	r3, [r7, #4]
   28298:	0018      	movs	r0, r3
   2829a:	4b0c      	ldr	r3, [pc, #48]	; (282cc <spi_set_baudrate+0xc4>)
   2829c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2829e:	46c0      	nop			; (mov r8, r8)
   282a0:	687b      	ldr	r3, [r7, #4]
   282a2:	0018      	movs	r0, r3
   282a4:	4b05      	ldr	r3, [pc, #20]	; (282bc <spi_set_baudrate+0xb4>)
   282a6:	4798      	blx	r3
   282a8:	1e03      	subs	r3, r0, #0
   282aa:	d1f9      	bne.n	282a0 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   282ac:	2300      	movs	r3, #0
}
   282ae:	0018      	movs	r0, r3
   282b0:	46bd      	mov	sp, r7
   282b2:	b009      	add	sp, #36	; 0x24
   282b4:	bd90      	pop	{r4, r7, pc}
   282b6:	46c0      	nop			; (mov r8, r8)
   282b8:	00028065 	.word	0x00028065
   282bc:	00027ff5 	.word	0x00027ff5
   282c0:	00027c61 	.word	0x00027c61
   282c4:	0002a615 	.word	0x0002a615
   282c8:	000277db 	.word	0x000277db
   282cc:	00028015 	.word	0x00028015

000282d0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   282d0:	b590      	push	{r4, r7, lr}
   282d2:	b093      	sub	sp, #76	; 0x4c
   282d4:	af00      	add	r7, sp, #0
   282d6:	6078      	str	r0, [r7, #4]
   282d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   282da:	687b      	ldr	r3, [r7, #4]
   282dc:	681b      	ldr	r3, [r3, #0]
   282de:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   282e0:	687b      	ldr	r3, [r7, #4]
   282e2:	681b      	ldr	r3, [r3, #0]
   282e4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   282e6:	231c      	movs	r3, #28
   282e8:	18fb      	adds	r3, r7, r3
   282ea:	0018      	movs	r0, r3
   282ec:	4b75      	ldr	r3, [pc, #468]	; (284c4 <_spi_set_config+0x1f4>)
   282ee:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   282f0:	231c      	movs	r3, #28
   282f2:	18fb      	adds	r3, r7, r3
   282f4:	2200      	movs	r2, #0
   282f6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   282f8:	683b      	ldr	r3, [r7, #0]
   282fa:	781b      	ldrb	r3, [r3, #0]
   282fc:	2b00      	cmp	r3, #0
   282fe:	d103      	bne.n	28308 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28300:	231c      	movs	r3, #28
   28302:	18fb      	adds	r3, r7, r3
   28304:	2200      	movs	r2, #0
   28306:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28308:	683b      	ldr	r3, [r7, #0]
   2830a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2830c:	230c      	movs	r3, #12
   2830e:	18fb      	adds	r3, r7, r3
   28310:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28312:	683b      	ldr	r3, [r7, #0]
   28314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28316:	230c      	movs	r3, #12
   28318:	18fb      	adds	r3, r7, r3
   2831a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2831c:	683b      	ldr	r3, [r7, #0]
   2831e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28320:	230c      	movs	r3, #12
   28322:	18fb      	adds	r3, r7, r3
   28324:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28326:	683b      	ldr	r3, [r7, #0]
   28328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2832a:	230c      	movs	r3, #12
   2832c:	18fb      	adds	r3, r7, r3
   2832e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28330:	2347      	movs	r3, #71	; 0x47
   28332:	18fb      	adds	r3, r7, r3
   28334:	2200      	movs	r2, #0
   28336:	701a      	strb	r2, [r3, #0]
   28338:	e02c      	b.n	28394 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2833a:	2347      	movs	r3, #71	; 0x47
   2833c:	18fb      	adds	r3, r7, r3
   2833e:	781a      	ldrb	r2, [r3, #0]
   28340:	230c      	movs	r3, #12
   28342:	18fb      	adds	r3, r7, r3
   28344:	0092      	lsls	r2, r2, #2
   28346:	58d3      	ldr	r3, [r2, r3]
   28348:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2834a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2834c:	2b00      	cmp	r3, #0
   2834e:	d109      	bne.n	28364 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28350:	2347      	movs	r3, #71	; 0x47
   28352:	18fb      	adds	r3, r7, r3
   28354:	781a      	ldrb	r2, [r3, #0]
   28356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28358:	0011      	movs	r1, r2
   2835a:	0018      	movs	r0, r3
   2835c:	4b5a      	ldr	r3, [pc, #360]	; (284c8 <_spi_set_config+0x1f8>)
   2835e:	4798      	blx	r3
   28360:	0003      	movs	r3, r0
   28362:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28366:	3301      	adds	r3, #1
   28368:	d00d      	beq.n	28386 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2836a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2836c:	b2da      	uxtb	r2, r3
   2836e:	231c      	movs	r3, #28
   28370:	18fb      	adds	r3, r7, r3
   28372:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28376:	0c1b      	lsrs	r3, r3, #16
   28378:	b2db      	uxtb	r3, r3
   2837a:	221c      	movs	r2, #28
   2837c:	18ba      	adds	r2, r7, r2
   2837e:	0011      	movs	r1, r2
   28380:	0018      	movs	r0, r3
   28382:	4b52      	ldr	r3, [pc, #328]	; (284cc <_spi_set_config+0x1fc>)
   28384:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28386:	2347      	movs	r3, #71	; 0x47
   28388:	18fb      	adds	r3, r7, r3
   2838a:	781a      	ldrb	r2, [r3, #0]
   2838c:	2347      	movs	r3, #71	; 0x47
   2838e:	18fb      	adds	r3, r7, r3
   28390:	3201      	adds	r2, #1
   28392:	701a      	strb	r2, [r3, #0]
   28394:	2347      	movs	r3, #71	; 0x47
   28396:	18fb      	adds	r3, r7, r3
   28398:	781b      	ldrb	r3, [r3, #0]
   2839a:	2b03      	cmp	r3, #3
   2839c:	d9cd      	bls.n	2833a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2839e:	683b      	ldr	r3, [r7, #0]
   283a0:	781a      	ldrb	r2, [r3, #0]
   283a2:	687b      	ldr	r3, [r7, #4]
   283a4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   283a6:	683b      	ldr	r3, [r7, #0]
   283a8:	7c1a      	ldrb	r2, [r3, #16]
   283aa:	687b      	ldr	r3, [r7, #4]
   283ac:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   283ae:	683b      	ldr	r3, [r7, #0]
   283b0:	7c9a      	ldrb	r2, [r3, #18]
   283b2:	687b      	ldr	r3, [r7, #4]
   283b4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   283b6:	683b      	ldr	r3, [r7, #0]
   283b8:	7d1a      	ldrb	r2, [r3, #20]
   283ba:	687b      	ldr	r3, [r7, #4]
   283bc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   283be:	230a      	movs	r3, #10
   283c0:	18fb      	adds	r3, r7, r3
   283c2:	2200      	movs	r2, #0
   283c4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   283c6:	2300      	movs	r3, #0
   283c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   283ca:	2300      	movs	r3, #0
   283cc:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   283ce:	683b      	ldr	r3, [r7, #0]
   283d0:	781b      	ldrb	r3, [r3, #0]
   283d2:	2b01      	cmp	r3, #1
   283d4:	d129      	bne.n	2842a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   283d6:	687b      	ldr	r3, [r7, #4]
   283d8:	681b      	ldr	r3, [r3, #0]
   283da:	0018      	movs	r0, r3
   283dc:	4b3c      	ldr	r3, [pc, #240]	; (284d0 <_spi_set_config+0x200>)
   283de:	4798      	blx	r3
   283e0:	0003      	movs	r3, r0
   283e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   283e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   283e6:	3314      	adds	r3, #20
   283e8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   283ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   283ec:	b2db      	uxtb	r3, r3
   283ee:	0018      	movs	r0, r3
   283f0:	4b38      	ldr	r3, [pc, #224]	; (284d4 <_spi_set_config+0x204>)
   283f2:	4798      	blx	r3
   283f4:	0003      	movs	r3, r0
   283f6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   283f8:	683b      	ldr	r3, [r7, #0]
   283fa:	699b      	ldr	r3, [r3, #24]
   283fc:	2223      	movs	r2, #35	; 0x23
   283fe:	18bc      	adds	r4, r7, r2
   28400:	220a      	movs	r2, #10
   28402:	18ba      	adds	r2, r7, r2
   28404:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28406:	0018      	movs	r0, r3
   28408:	4b33      	ldr	r3, [pc, #204]	; (284d8 <_spi_set_config+0x208>)
   2840a:	4798      	blx	r3
   2840c:	0003      	movs	r3, r0
   2840e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   28410:	2323      	movs	r3, #35	; 0x23
   28412:	18fb      	adds	r3, r7, r3
   28414:	781b      	ldrb	r3, [r3, #0]
   28416:	2b00      	cmp	r3, #0
   28418:	d001      	beq.n	2841e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2841a:	2317      	movs	r3, #23
   2841c:	e04e      	b.n	284bc <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2841e:	230a      	movs	r3, #10
   28420:	18fb      	adds	r3, r7, r3
   28422:	881b      	ldrh	r3, [r3, #0]
   28424:	b2da      	uxtb	r2, r3
   28426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28428:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2842a:	683b      	ldr	r3, [r7, #0]
   2842c:	685b      	ldr	r3, [r3, #4]
   2842e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28430:	4313      	orrs	r3, r2
   28432:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28434:	683b      	ldr	r3, [r7, #0]
   28436:	689b      	ldr	r3, [r3, #8]
   28438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2843a:	4313      	orrs	r3, r2
   2843c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2843e:	683b      	ldr	r3, [r7, #0]
   28440:	68db      	ldr	r3, [r3, #12]
   28442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28444:	4313      	orrs	r3, r2
   28446:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28448:	683b      	ldr	r3, [r7, #0]
   2844a:	7c1b      	ldrb	r3, [r3, #16]
   2844c:	001a      	movs	r2, r3
   2844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28450:	4313      	orrs	r3, r2
   28452:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28454:	683b      	ldr	r3, [r7, #0]
   28456:	7c5b      	ldrb	r3, [r3, #17]
   28458:	2b00      	cmp	r3, #0
   2845a:	d103      	bne.n	28464 <_spi_set_config+0x194>
   2845c:	4b1f      	ldr	r3, [pc, #124]	; (284dc <_spi_set_config+0x20c>)
   2845e:	4798      	blx	r3
   28460:	1e03      	subs	r3, r0, #0
   28462:	d003      	beq.n	2846c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28466:	2280      	movs	r2, #128	; 0x80
   28468:	4313      	orrs	r3, r2
   2846a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   2846c:	683b      	ldr	r3, [r7, #0]
   2846e:	7c9b      	ldrb	r3, [r3, #18]
   28470:	2b00      	cmp	r3, #0
   28472:	d004      	beq.n	2847e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28476:	2280      	movs	r2, #128	; 0x80
   28478:	0292      	lsls	r2, r2, #10
   2847a:	4313      	orrs	r3, r2
   2847c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2847e:	683b      	ldr	r3, [r7, #0]
   28480:	7cdb      	ldrb	r3, [r3, #19]
   28482:	2b00      	cmp	r3, #0
   28484:	d004      	beq.n	28490 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28488:	2280      	movs	r2, #128	; 0x80
   2848a:	0092      	lsls	r2, r2, #2
   2848c:	4313      	orrs	r3, r2
   2848e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   28490:	683b      	ldr	r3, [r7, #0]
   28492:	7d1b      	ldrb	r3, [r3, #20]
   28494:	2b00      	cmp	r3, #0
   28496:	d004      	beq.n	284a2 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2849a:	2280      	movs	r2, #128	; 0x80
   2849c:	0192      	lsls	r2, r2, #6
   2849e:	4313      	orrs	r3, r2
   284a0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   284a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   284a4:	681a      	ldr	r2, [r3, #0]
   284a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   284a8:	431a      	orrs	r2, r3
   284aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   284ac:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   284ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   284b0:	685a      	ldr	r2, [r3, #4]
   284b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   284b4:	431a      	orrs	r2, r3
   284b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   284b8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   284ba:	2300      	movs	r3, #0
}
   284bc:	0018      	movs	r0, r3
   284be:	46bd      	mov	sp, r7
   284c0:	b013      	add	sp, #76	; 0x4c
   284c2:	bd90      	pop	{r4, r7, pc}
   284c4:	00027e05 	.word	0x00027e05
   284c8:	00027aa5 	.word	0x00027aa5
   284cc:	0002a851 	.word	0x0002a851
   284d0:	00027c61 	.word	0x00027c61
   284d4:	0002a615 	.word	0x0002a615
   284d8:	000277db 	.word	0x000277db
   284dc:	00027f79 	.word	0x00027f79

000284e0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   284e0:	b590      	push	{r4, r7, lr}
   284e2:	b08b      	sub	sp, #44	; 0x2c
   284e4:	af00      	add	r7, sp, #0
   284e6:	60f8      	str	r0, [r7, #12]
   284e8:	60b9      	str	r1, [r7, #8]
   284ea:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   284ec:	68fb      	ldr	r3, [r7, #12]
   284ee:	68ba      	ldr	r2, [r7, #8]
   284f0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   284f2:	68fb      	ldr	r3, [r7, #12]
   284f4:	681b      	ldr	r3, [r3, #0]
   284f6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   284f8:	6a3b      	ldr	r3, [r7, #32]
   284fa:	681b      	ldr	r3, [r3, #0]
   284fc:	2202      	movs	r2, #2
   284fe:	4013      	ands	r3, r2
   28500:	d001      	beq.n	28506 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28502:	231c      	movs	r3, #28
   28504:	e09c      	b.n	28640 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28506:	6a3b      	ldr	r3, [r7, #32]
   28508:	681b      	ldr	r3, [r3, #0]
   2850a:	2201      	movs	r2, #1
   2850c:	4013      	ands	r3, r2
   2850e:	d001      	beq.n	28514 <spi_init+0x34>
		return STATUS_BUSY;
   28510:	2305      	movs	r3, #5
   28512:	e095      	b.n	28640 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28514:	68fb      	ldr	r3, [r7, #12]
   28516:	681b      	ldr	r3, [r3, #0]
   28518:	0018      	movs	r0, r3
   2851a:	4b4b      	ldr	r3, [pc, #300]	; (28648 <spi_init+0x168>)
   2851c:	4798      	blx	r3
   2851e:	0003      	movs	r3, r0
   28520:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28522:	69fb      	ldr	r3, [r7, #28]
   28524:	3302      	adds	r3, #2
   28526:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28528:	69fb      	ldr	r3, [r7, #28]
   2852a:	3314      	adds	r3, #20
   2852c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2852e:	2201      	movs	r2, #1
   28530:	69bb      	ldr	r3, [r7, #24]
   28532:	409a      	lsls	r2, r3
   28534:	0013      	movs	r3, r2
   28536:	0019      	movs	r1, r3
   28538:	2002      	movs	r0, #2
   2853a:	4b44      	ldr	r3, [pc, #272]	; (2864c <spi_init+0x16c>)
   2853c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2853e:	2310      	movs	r3, #16
   28540:	18fb      	adds	r3, r7, r3
   28542:	0018      	movs	r0, r3
   28544:	4b42      	ldr	r3, [pc, #264]	; (28650 <spi_init+0x170>)
   28546:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28548:	687b      	ldr	r3, [r7, #4]
   2854a:	2224      	movs	r2, #36	; 0x24
   2854c:	5c9a      	ldrb	r2, [r3, r2]
   2854e:	2310      	movs	r3, #16
   28550:	18fb      	adds	r3, r7, r3
   28552:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28554:	697b      	ldr	r3, [r7, #20]
   28556:	b2db      	uxtb	r3, r3
   28558:	2210      	movs	r2, #16
   2855a:	18ba      	adds	r2, r7, r2
   2855c:	0011      	movs	r1, r2
   2855e:	0018      	movs	r0, r3
   28560:	4b3c      	ldr	r3, [pc, #240]	; (28654 <spi_init+0x174>)
   28562:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28564:	697b      	ldr	r3, [r7, #20]
   28566:	b2db      	uxtb	r3, r3
   28568:	0018      	movs	r0, r3
   2856a:	4b3b      	ldr	r3, [pc, #236]	; (28658 <spi_init+0x178>)
   2856c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2856e:	687b      	ldr	r3, [r7, #4]
   28570:	2224      	movs	r2, #36	; 0x24
   28572:	5c9b      	ldrb	r3, [r3, r2]
   28574:	2100      	movs	r1, #0
   28576:	0018      	movs	r0, r3
   28578:	4b38      	ldr	r3, [pc, #224]	; (2865c <spi_init+0x17c>)
   2857a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2857c:	687b      	ldr	r3, [r7, #4]
   2857e:	781b      	ldrb	r3, [r3, #0]
   28580:	2b01      	cmp	r3, #1
   28582:	d105      	bne.n	28590 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28584:	6a3b      	ldr	r3, [r7, #32]
   28586:	681b      	ldr	r3, [r3, #0]
   28588:	220c      	movs	r2, #12
   2858a:	431a      	orrs	r2, r3
   2858c:	6a3b      	ldr	r3, [r7, #32]
   2858e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28590:	2327      	movs	r3, #39	; 0x27
   28592:	18fb      	adds	r3, r7, r3
   28594:	2200      	movs	r2, #0
   28596:	701a      	strb	r2, [r3, #0]
   28598:	e010      	b.n	285bc <spi_init+0xdc>
		module->callback[i]        = NULL;
   2859a:	2327      	movs	r3, #39	; 0x27
   2859c:	18fb      	adds	r3, r7, r3
   2859e:	781b      	ldrb	r3, [r3, #0]
   285a0:	68fa      	ldr	r2, [r7, #12]
   285a2:	3302      	adds	r3, #2
   285a4:	009b      	lsls	r3, r3, #2
   285a6:	18d3      	adds	r3, r2, r3
   285a8:	3304      	adds	r3, #4
   285aa:	2200      	movs	r2, #0
   285ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   285ae:	2327      	movs	r3, #39	; 0x27
   285b0:	18fb      	adds	r3, r7, r3
   285b2:	781a      	ldrb	r2, [r3, #0]
   285b4:	2327      	movs	r3, #39	; 0x27
   285b6:	18fb      	adds	r3, r7, r3
   285b8:	3201      	adds	r2, #1
   285ba:	701a      	strb	r2, [r3, #0]
   285bc:	2327      	movs	r3, #39	; 0x27
   285be:	18fb      	adds	r3, r7, r3
   285c0:	781b      	ldrb	r3, [r3, #0]
   285c2:	2b06      	cmp	r3, #6
   285c4:	d9e9      	bls.n	2859a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   285c6:	68fb      	ldr	r3, [r7, #12]
   285c8:	2200      	movs	r2, #0
   285ca:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   285cc:	68fb      	ldr	r3, [r7, #12]
   285ce:	2200      	movs	r2, #0
   285d0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   285d2:	68fb      	ldr	r3, [r7, #12]
   285d4:	2200      	movs	r2, #0
   285d6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   285d8:	68fb      	ldr	r3, [r7, #12]
   285da:	2200      	movs	r2, #0
   285dc:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   285de:	68fb      	ldr	r3, [r7, #12]
   285e0:	2236      	movs	r2, #54	; 0x36
   285e2:	2100      	movs	r1, #0
   285e4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   285e6:	68fb      	ldr	r3, [r7, #12]
   285e8:	2237      	movs	r2, #55	; 0x37
   285ea:	2100      	movs	r1, #0
   285ec:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   285ee:	68fb      	ldr	r3, [r7, #12]
   285f0:	2238      	movs	r2, #56	; 0x38
   285f2:	2100      	movs	r1, #0
   285f4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   285f6:	68fb      	ldr	r3, [r7, #12]
   285f8:	2203      	movs	r2, #3
   285fa:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   285fc:	68fb      	ldr	r3, [r7, #12]
   285fe:	2200      	movs	r2, #0
   28600:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28602:	68fb      	ldr	r3, [r7, #12]
   28604:	681b      	ldr	r3, [r3, #0]
   28606:	2213      	movs	r2, #19
   28608:	18bc      	adds	r4, r7, r2
   2860a:	0018      	movs	r0, r3
   2860c:	4b0e      	ldr	r3, [pc, #56]	; (28648 <spi_init+0x168>)
   2860e:	4798      	blx	r3
   28610:	0003      	movs	r3, r0
   28612:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28614:	4a12      	ldr	r2, [pc, #72]	; (28660 <spi_init+0x180>)
   28616:	2313      	movs	r3, #19
   28618:	18fb      	adds	r3, r7, r3
   2861a:	781b      	ldrb	r3, [r3, #0]
   2861c:	0011      	movs	r1, r2
   2861e:	0018      	movs	r0, r3
   28620:	4b10      	ldr	r3, [pc, #64]	; (28664 <spi_init+0x184>)
   28622:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28624:	2313      	movs	r3, #19
   28626:	18fb      	adds	r3, r7, r3
   28628:	781a      	ldrb	r2, [r3, #0]
   2862a:	4b0f      	ldr	r3, [pc, #60]	; (28668 <spi_init+0x188>)
   2862c:	0092      	lsls	r2, r2, #2
   2862e:	68f9      	ldr	r1, [r7, #12]
   28630:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28632:	687a      	ldr	r2, [r7, #4]
   28634:	68fb      	ldr	r3, [r7, #12]
   28636:	0011      	movs	r1, r2
   28638:	0018      	movs	r0, r3
   2863a:	4b0c      	ldr	r3, [pc, #48]	; (2866c <spi_init+0x18c>)
   2863c:	4798      	blx	r3
   2863e:	0003      	movs	r3, r0
}
   28640:	0018      	movs	r0, r3
   28642:	46bd      	mov	sp, r7
   28644:	b00b      	add	sp, #44	; 0x2c
   28646:	bd90      	pop	{r4, r7, pc}
   28648:	00027c61 	.word	0x00027c61
   2864c:	00027f1d 	.word	0x00027f1d
   28650:	00027f05 	.word	0x00027f05
   28654:	0002a4f1 	.word	0x0002a4f1
   28658:	0002a535 	.word	0x0002a535
   2865c:	00027a19 	.word	0x00027a19
   28660:	00028b39 	.word	0x00028b39
   28664:	00027cc5 	.word	0x00027cc5
   28668:	20005dd0 	.word	0x20005dd0
   2866c:	000282d1 	.word	0x000282d1

00028670 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28670:	b590      	push	{r4, r7, lr}
   28672:	b087      	sub	sp, #28
   28674:	af00      	add	r7, sp, #0
   28676:	60f8      	str	r0, [r7, #12]
   28678:	60b9      	str	r1, [r7, #8]
   2867a:	0019      	movs	r1, r3
   2867c:	1dbb      	adds	r3, r7, #6
   2867e:	801a      	strh	r2, [r3, #0]
   28680:	1d3b      	adds	r3, r7, #4
   28682:	1c0a      	adds	r2, r1, #0
   28684:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28686:	68fb      	ldr	r3, [r7, #12]
   28688:	2238      	movs	r2, #56	; 0x38
   2868a:	5c9b      	ldrb	r3, [r3, r2]
   2868c:	b2db      	uxtb	r3, r3
   2868e:	2b05      	cmp	r3, #5
   28690:	d101      	bne.n	28696 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28692:	2305      	movs	r3, #5
   28694:	e07a      	b.n	2878c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28696:	1dbb      	adds	r3, r7, #6
   28698:	881b      	ldrh	r3, [r3, #0]
   2869a:	2b00      	cmp	r3, #0
   2869c:	d101      	bne.n	286a2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2869e:	2317      	movs	r3, #23
   286a0:	e074      	b.n	2878c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   286a2:	68fb      	ldr	r3, [r7, #12]
   286a4:	79db      	ldrb	r3, [r3, #7]
   286a6:	2201      	movs	r2, #1
   286a8:	4053      	eors	r3, r2
   286aa:	b2db      	uxtb	r3, r3
   286ac:	2b00      	cmp	r3, #0
   286ae:	d001      	beq.n	286b4 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   286b0:	231c      	movs	r3, #28
   286b2:	e06b      	b.n	2878c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   286b4:	2316      	movs	r3, #22
   286b6:	18fb      	adds	r3, r7, r3
   286b8:	2200      	movs	r2, #0
   286ba:	801a      	strh	r2, [r3, #0]

	while (length--) {
   286bc:	e05e      	b.n	2877c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   286be:	68fb      	ldr	r3, [r7, #12]
   286c0:	795b      	ldrb	r3, [r3, #5]
   286c2:	2b01      	cmp	r3, #1
   286c4:	d112      	bne.n	286ec <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   286c6:	46c0      	nop			; (mov r8, r8)
   286c8:	68fb      	ldr	r3, [r7, #12]
   286ca:	0018      	movs	r0, r3
   286cc:	4b31      	ldr	r3, [pc, #196]	; (28794 <spi_read_buffer_wait+0x124>)
   286ce:	4798      	blx	r3
   286d0:	0003      	movs	r3, r0
   286d2:	001a      	movs	r2, r3
   286d4:	2301      	movs	r3, #1
   286d6:	4053      	eors	r3, r2
   286d8:	b2db      	uxtb	r3, r3
   286da:	2b00      	cmp	r3, #0
   286dc:	d1f4      	bne.n	286c8 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   286de:	1d3b      	adds	r3, r7, #4
   286e0:	881a      	ldrh	r2, [r3, #0]
   286e2:	68fb      	ldr	r3, [r7, #12]
   286e4:	0011      	movs	r1, r2
   286e6:	0018      	movs	r0, r3
   286e8:	4b2b      	ldr	r3, [pc, #172]	; (28798 <spi_read_buffer_wait+0x128>)
   286ea:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   286ec:	46c0      	nop			; (mov r8, r8)
   286ee:	68fb      	ldr	r3, [r7, #12]
   286f0:	0018      	movs	r0, r3
   286f2:	4b2a      	ldr	r3, [pc, #168]	; (2879c <spi_read_buffer_wait+0x12c>)
   286f4:	4798      	blx	r3
   286f6:	0003      	movs	r3, r0
   286f8:	001a      	movs	r2, r3
   286fa:	2301      	movs	r3, #1
   286fc:	4053      	eors	r3, r2
   286fe:	b2db      	uxtb	r3, r3
   28700:	2b00      	cmp	r3, #0
   28702:	d1f4      	bne.n	286ee <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28704:	2312      	movs	r3, #18
   28706:	18fb      	adds	r3, r7, r3
   28708:	2200      	movs	r2, #0
   2870a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2870c:	2315      	movs	r3, #21
   2870e:	18fc      	adds	r4, r7, r3
   28710:	2312      	movs	r3, #18
   28712:	18fa      	adds	r2, r7, r3
   28714:	68fb      	ldr	r3, [r7, #12]
   28716:	0011      	movs	r1, r2
   28718:	0018      	movs	r0, r3
   2871a:	4b21      	ldr	r3, [pc, #132]	; (287a0 <spi_read_buffer_wait+0x130>)
   2871c:	4798      	blx	r3
   2871e:	0003      	movs	r3, r0
   28720:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28722:	2315      	movs	r3, #21
   28724:	18fb      	adds	r3, r7, r3
   28726:	781b      	ldrb	r3, [r3, #0]
   28728:	2b00      	cmp	r3, #0
   2872a:	d003      	beq.n	28734 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   2872c:	2315      	movs	r3, #21
   2872e:	18fb      	adds	r3, r7, r3
   28730:	781b      	ldrb	r3, [r3, #0]
   28732:	e02b      	b.n	2878c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28734:	2316      	movs	r3, #22
   28736:	18fb      	adds	r3, r7, r3
   28738:	881b      	ldrh	r3, [r3, #0]
   2873a:	2216      	movs	r2, #22
   2873c:	18ba      	adds	r2, r7, r2
   2873e:	1c59      	adds	r1, r3, #1
   28740:	8011      	strh	r1, [r2, #0]
   28742:	001a      	movs	r2, r3
   28744:	68bb      	ldr	r3, [r7, #8]
   28746:	189b      	adds	r3, r3, r2
   28748:	2212      	movs	r2, #18
   2874a:	18ba      	adds	r2, r7, r2
   2874c:	8812      	ldrh	r2, [r2, #0]
   2874e:	b2d2      	uxtb	r2, r2
   28750:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28752:	68fb      	ldr	r3, [r7, #12]
   28754:	799b      	ldrb	r3, [r3, #6]
   28756:	2b01      	cmp	r3, #1
   28758:	d110      	bne.n	2877c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   2875a:	2316      	movs	r3, #22
   2875c:	18fb      	adds	r3, r7, r3
   2875e:	881b      	ldrh	r3, [r3, #0]
   28760:	2216      	movs	r2, #22
   28762:	18ba      	adds	r2, r7, r2
   28764:	1c59      	adds	r1, r3, #1
   28766:	8011      	strh	r1, [r2, #0]
   28768:	001a      	movs	r2, r3
   2876a:	68bb      	ldr	r3, [r7, #8]
   2876c:	189b      	adds	r3, r3, r2
   2876e:	2212      	movs	r2, #18
   28770:	18ba      	adds	r2, r7, r2
   28772:	8812      	ldrh	r2, [r2, #0]
   28774:	0a12      	lsrs	r2, r2, #8
   28776:	b292      	uxth	r2, r2
   28778:	b2d2      	uxtb	r2, r2
   2877a:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2877c:	1dbb      	adds	r3, r7, #6
   2877e:	881b      	ldrh	r3, [r3, #0]
   28780:	1dba      	adds	r2, r7, #6
   28782:	1e59      	subs	r1, r3, #1
   28784:	8011      	strh	r1, [r2, #0]
   28786:	2b00      	cmp	r3, #0
   28788:	d199      	bne.n	286be <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   2878a:	2300      	movs	r3, #0
}
   2878c:	0018      	movs	r0, r3
   2878e:	46bd      	mov	sp, r7
   28790:	b007      	add	sp, #28
   28792:	bd90      	pop	{r4, r7, pc}
   28794:	000280e9 	.word	0x000280e9
   28798:	00028139 	.word	0x00028139
   2879c:	00028111 	.word	0x00028111
   287a0:	00028181 	.word	0x00028181

000287a4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   287a4:	b580      	push	{r7, lr}
   287a6:	b086      	sub	sp, #24
   287a8:	af00      	add	r7, sp, #0
   287aa:	60f8      	str	r0, [r7, #12]
   287ac:	60b9      	str	r1, [r7, #8]
   287ae:	1dfb      	adds	r3, r7, #7
   287b0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   287b2:	68fb      	ldr	r3, [r7, #12]
   287b4:	795b      	ldrb	r3, [r3, #5]
   287b6:	2b01      	cmp	r3, #1
   287b8:	d001      	beq.n	287be <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   287ba:	2315      	movs	r3, #21
   287bc:	e05c      	b.n	28878 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   287be:	68fb      	ldr	r3, [r7, #12]
   287c0:	7a1b      	ldrb	r3, [r3, #8]
   287c2:	2201      	movs	r2, #1
   287c4:	4053      	eors	r3, r2
   287c6:	b2db      	uxtb	r3, r3
   287c8:	2b00      	cmp	r3, #0
   287ca:	d054      	beq.n	28876 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   287cc:	1dfb      	adds	r3, r7, #7
   287ce:	781b      	ldrb	r3, [r3, #0]
   287d0:	2b00      	cmp	r3, #0
   287d2:	d04a      	beq.n	2886a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   287d4:	68bb      	ldr	r3, [r7, #8]
   287d6:	785b      	ldrb	r3, [r3, #1]
   287d8:	2b00      	cmp	r3, #0
   287da:	d03f      	beq.n	2885c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   287dc:	68fb      	ldr	r3, [r7, #12]
   287de:	0018      	movs	r0, r3
   287e0:	4b27      	ldr	r3, [pc, #156]	; (28880 <spi_select_slave+0xdc>)
   287e2:	4798      	blx	r3
   287e4:	0003      	movs	r3, r0
   287e6:	001a      	movs	r2, r3
   287e8:	2301      	movs	r3, #1
   287ea:	4053      	eors	r3, r2
   287ec:	b2db      	uxtb	r3, r3
   287ee:	2b00      	cmp	r3, #0
   287f0:	d007      	beq.n	28802 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   287f2:	68bb      	ldr	r3, [r7, #8]
   287f4:	781b      	ldrb	r3, [r3, #0]
   287f6:	2101      	movs	r1, #1
   287f8:	0018      	movs	r0, r3
   287fa:	4b22      	ldr	r3, [pc, #136]	; (28884 <spi_select_slave+0xe0>)
   287fc:	4798      	blx	r3
					return STATUS_BUSY;
   287fe:	2305      	movs	r3, #5
   28800:	e03a      	b.n	28878 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28802:	68bb      	ldr	r3, [r7, #8]
   28804:	781b      	ldrb	r3, [r3, #0]
   28806:	2100      	movs	r1, #0
   28808:	0018      	movs	r0, r3
   2880a:	4b1e      	ldr	r3, [pc, #120]	; (28884 <spi_select_slave+0xe0>)
   2880c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2880e:	68bb      	ldr	r3, [r7, #8]
   28810:	789b      	ldrb	r3, [r3, #2]
   28812:	b29a      	uxth	r2, r3
   28814:	68fb      	ldr	r3, [r7, #12]
   28816:	0011      	movs	r1, r2
   28818:	0018      	movs	r0, r3
   2881a:	4b1b      	ldr	r3, [pc, #108]	; (28888 <spi_select_slave+0xe4>)
   2881c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2881e:	68fb      	ldr	r3, [r7, #12]
   28820:	79db      	ldrb	r3, [r3, #7]
   28822:	2201      	movs	r2, #1
   28824:	4053      	eors	r3, r2
   28826:	b2db      	uxtb	r3, r3
   28828:	2b00      	cmp	r3, #0
   2882a:	d024      	beq.n	28876 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2882c:	46c0      	nop			; (mov r8, r8)
   2882e:	68fb      	ldr	r3, [r7, #12]
   28830:	0018      	movs	r0, r3
   28832:	4b16      	ldr	r3, [pc, #88]	; (2888c <spi_select_slave+0xe8>)
   28834:	4798      	blx	r3
   28836:	0003      	movs	r3, r0
   28838:	001a      	movs	r2, r3
   2883a:	2301      	movs	r3, #1
   2883c:	4053      	eors	r3, r2
   2883e:	b2db      	uxtb	r3, r3
   28840:	2b00      	cmp	r3, #0
   28842:	d1f4      	bne.n	2882e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28844:	2316      	movs	r3, #22
   28846:	18fb      	adds	r3, r7, r3
   28848:	2200      	movs	r2, #0
   2884a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2884c:	2316      	movs	r3, #22
   2884e:	18fa      	adds	r2, r7, r3
   28850:	68fb      	ldr	r3, [r7, #12]
   28852:	0011      	movs	r1, r2
   28854:	0018      	movs	r0, r3
   28856:	4b0e      	ldr	r3, [pc, #56]	; (28890 <spi_select_slave+0xec>)
   28858:	4798      	blx	r3
   2885a:	e00c      	b.n	28876 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2885c:	68bb      	ldr	r3, [r7, #8]
   2885e:	781b      	ldrb	r3, [r3, #0]
   28860:	2100      	movs	r1, #0
   28862:	0018      	movs	r0, r3
   28864:	4b07      	ldr	r3, [pc, #28]	; (28884 <spi_select_slave+0xe0>)
   28866:	4798      	blx	r3
   28868:	e005      	b.n	28876 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2886a:	68bb      	ldr	r3, [r7, #8]
   2886c:	781b      	ldrb	r3, [r3, #0]
   2886e:	2101      	movs	r1, #1
   28870:	0018      	movs	r0, r3
   28872:	4b04      	ldr	r3, [pc, #16]	; (28884 <spi_select_slave+0xe0>)
   28874:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28876:	2300      	movs	r3, #0
}
   28878:	0018      	movs	r0, r3
   2887a:	46bd      	mov	sp, r7
   2887c:	b006      	add	sp, #24
   2887e:	bd80      	pop	{r7, pc}
   28880:	000280e9 	.word	0x000280e9
   28884:	00027eb1 	.word	0x00027eb1
   28888:	00028139 	.word	0x00028139
   2888c:	00028111 	.word	0x00028111
   28890:	00028181 	.word	0x00028181

00028894 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28894:	b580      	push	{r7, lr}
   28896:	b086      	sub	sp, #24
   28898:	af00      	add	r7, sp, #0
   2889a:	60f8      	str	r0, [r7, #12]
   2889c:	60b9      	str	r1, [r7, #8]
   2889e:	1dbb      	adds	r3, r7, #6
   288a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   288a2:	68fb      	ldr	r3, [r7, #12]
   288a4:	2238      	movs	r2, #56	; 0x38
   288a6:	5c9b      	ldrb	r3, [r3, r2]
   288a8:	b2db      	uxtb	r3, r3
   288aa:	2b05      	cmp	r3, #5
   288ac:	d101      	bne.n	288b2 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   288ae:	2305      	movs	r3, #5
   288b0:	e087      	b.n	289c2 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   288b2:	1dbb      	adds	r3, r7, #6
   288b4:	881b      	ldrh	r3, [r3, #0]
   288b6:	2b00      	cmp	r3, #0
   288b8:	d101      	bne.n	288be <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   288ba:	2317      	movs	r3, #23
   288bc:	e081      	b.n	289c2 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   288be:	2316      	movs	r3, #22
   288c0:	18fb      	adds	r3, r7, r3
   288c2:	2200      	movs	r2, #0
   288c4:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   288c6:	2314      	movs	r3, #20
   288c8:	18fb      	adds	r3, r7, r3
   288ca:	1dba      	adds	r2, r7, #6
   288cc:	8812      	ldrh	r2, [r2, #0]
   288ce:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   288d0:	e05f      	b.n	28992 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   288d2:	46c0      	nop			; (mov r8, r8)
   288d4:	68fb      	ldr	r3, [r7, #12]
   288d6:	0018      	movs	r0, r3
   288d8:	4b3c      	ldr	r3, [pc, #240]	; (289cc <spi_write_buffer_wait+0x138>)
   288da:	4798      	blx	r3
   288dc:	0003      	movs	r3, r0
   288de:	001a      	movs	r2, r3
   288e0:	2301      	movs	r3, #1
   288e2:	4053      	eors	r3, r2
   288e4:	b2db      	uxtb	r3, r3
   288e6:	2b00      	cmp	r3, #0
   288e8:	d1f4      	bne.n	288d4 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   288ea:	2316      	movs	r3, #22
   288ec:	18fb      	adds	r3, r7, r3
   288ee:	881b      	ldrh	r3, [r3, #0]
   288f0:	2216      	movs	r2, #22
   288f2:	18ba      	adds	r2, r7, r2
   288f4:	1c59      	adds	r1, r3, #1
   288f6:	8011      	strh	r1, [r2, #0]
   288f8:	001a      	movs	r2, r3
   288fa:	68bb      	ldr	r3, [r7, #8]
   288fc:	189b      	adds	r3, r3, r2
   288fe:	781a      	ldrb	r2, [r3, #0]
   28900:	2312      	movs	r3, #18
   28902:	18fb      	adds	r3, r7, r3
   28904:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28906:	68fb      	ldr	r3, [r7, #12]
   28908:	799b      	ldrb	r3, [r3, #6]
   2890a:	2b01      	cmp	r3, #1
   2890c:	d115      	bne.n	2893a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2890e:	2316      	movs	r3, #22
   28910:	18fb      	adds	r3, r7, r3
   28912:	881b      	ldrh	r3, [r3, #0]
   28914:	2216      	movs	r2, #22
   28916:	18ba      	adds	r2, r7, r2
   28918:	1c59      	adds	r1, r3, #1
   2891a:	8011      	strh	r1, [r2, #0]
   2891c:	001a      	movs	r2, r3
   2891e:	68bb      	ldr	r3, [r7, #8]
   28920:	189b      	adds	r3, r3, r2
   28922:	781b      	ldrb	r3, [r3, #0]
   28924:	021b      	lsls	r3, r3, #8
   28926:	b21a      	sxth	r2, r3
   28928:	2312      	movs	r3, #18
   2892a:	18fb      	adds	r3, r7, r3
   2892c:	2100      	movs	r1, #0
   2892e:	5e5b      	ldrsh	r3, [r3, r1]
   28930:	4313      	orrs	r3, r2
   28932:	b21a      	sxth	r2, r3
   28934:	2312      	movs	r3, #18
   28936:	18fb      	adds	r3, r7, r3
   28938:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2893a:	2312      	movs	r3, #18
   2893c:	18fb      	adds	r3, r7, r3
   2893e:	881a      	ldrh	r2, [r3, #0]
   28940:	68fb      	ldr	r3, [r7, #12]
   28942:	0011      	movs	r1, r2
   28944:	0018      	movs	r0, r3
   28946:	4b22      	ldr	r3, [pc, #136]	; (289d0 <spi_write_buffer_wait+0x13c>)
   28948:	4798      	blx	r3

		if (module->receiver_enabled) {
   2894a:	68fb      	ldr	r3, [r7, #12]
   2894c:	79db      	ldrb	r3, [r3, #7]
   2894e:	2214      	movs	r2, #20
   28950:	18ba      	adds	r2, r7, r2
   28952:	2114      	movs	r1, #20
   28954:	1879      	adds	r1, r7, r1
   28956:	8809      	ldrh	r1, [r1, #0]
   28958:	8011      	strh	r1, [r2, #0]
   2895a:	2b00      	cmp	r3, #0
   2895c:	d019      	beq.n	28992 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2895e:	46c0      	nop			; (mov r8, r8)
   28960:	68fb      	ldr	r3, [r7, #12]
   28962:	0018      	movs	r0, r3
   28964:	4b1b      	ldr	r3, [pc, #108]	; (289d4 <spi_write_buffer_wait+0x140>)
   28966:	4798      	blx	r3
   28968:	0003      	movs	r3, r0
   2896a:	001a      	movs	r2, r3
   2896c:	2301      	movs	r3, #1
   2896e:	4053      	eors	r3, r2
   28970:	b2db      	uxtb	r3, r3
   28972:	2b00      	cmp	r3, #0
   28974:	d1f4      	bne.n	28960 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28976:	2310      	movs	r3, #16
   28978:	18fa      	adds	r2, r7, r3
   2897a:	68fb      	ldr	r3, [r7, #12]
   2897c:	0011      	movs	r1, r2
   2897e:	0018      	movs	r0, r3
   28980:	4b15      	ldr	r3, [pc, #84]	; (289d8 <spi_write_buffer_wait+0x144>)
   28982:	4798      	blx	r3
			flush_length--;
   28984:	2314      	movs	r3, #20
   28986:	18fb      	adds	r3, r7, r3
   28988:	881a      	ldrh	r2, [r3, #0]
   2898a:	2314      	movs	r3, #20
   2898c:	18fb      	adds	r3, r7, r3
   2898e:	3a01      	subs	r2, #1
   28990:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28992:	1dbb      	adds	r3, r7, #6
   28994:	881b      	ldrh	r3, [r3, #0]
   28996:	1dba      	adds	r2, r7, #6
   28998:	1e59      	subs	r1, r3, #1
   2899a:	8011      	strh	r1, [r2, #0]
   2899c:	2b00      	cmp	r3, #0
   2899e:	d198      	bne.n	288d2 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   289a0:	68fb      	ldr	r3, [r7, #12]
   289a2:	795b      	ldrb	r3, [r3, #5]
   289a4:	2b01      	cmp	r3, #1
   289a6:	d10b      	bne.n	289c0 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   289a8:	46c0      	nop			; (mov r8, r8)
   289aa:	68fb      	ldr	r3, [r7, #12]
   289ac:	0018      	movs	r0, r3
   289ae:	4b0b      	ldr	r3, [pc, #44]	; (289dc <spi_write_buffer_wait+0x148>)
   289b0:	4798      	blx	r3
   289b2:	0003      	movs	r3, r0
   289b4:	001a      	movs	r2, r3
   289b6:	2301      	movs	r3, #1
   289b8:	4053      	eors	r3, r2
   289ba:	b2db      	uxtb	r3, r3
   289bc:	2b00      	cmp	r3, #0
   289be:	d1f4      	bne.n	289aa <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   289c0:	2300      	movs	r3, #0
}
   289c2:	0018      	movs	r0, r3
   289c4:	46bd      	mov	sp, r7
   289c6:	b006      	add	sp, #24
   289c8:	bd80      	pop	{r7, pc}
   289ca:	46c0      	nop			; (mov r8, r8)
   289cc:	000280e9 	.word	0x000280e9
   289d0:	00028139 	.word	0x00028139
   289d4:	00028111 	.word	0x00028111
   289d8:	00028181 	.word	0x00028181
   289dc:	000280c1 	.word	0x000280c1

000289e0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   289e0:	b580      	push	{r7, lr}
   289e2:	b084      	sub	sp, #16
   289e4:	af00      	add	r7, sp, #0
   289e6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   289e8:	687b      	ldr	r3, [r7, #4]
   289ea:	681b      	ldr	r3, [r3, #0]
   289ec:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   289ee:	687b      	ldr	r3, [r7, #4]
   289f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   289f2:	781b      	ldrb	r3, [r3, #0]
   289f4:	b2da      	uxtb	r2, r3
   289f6:	230e      	movs	r3, #14
   289f8:	18fb      	adds	r3, r7, r3
   289fa:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   289fc:	687b      	ldr	r3, [r7, #4]
   289fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28a00:	1c5a      	adds	r2, r3, #1
   28a02:	687b      	ldr	r3, [r7, #4]
   28a04:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28a06:	687b      	ldr	r3, [r7, #4]
   28a08:	799b      	ldrb	r3, [r3, #6]
   28a0a:	2b01      	cmp	r3, #1
   28a0c:	d113      	bne.n	28a36 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28a0e:	687b      	ldr	r3, [r7, #4]
   28a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28a12:	781b      	ldrb	r3, [r3, #0]
   28a14:	b2db      	uxtb	r3, r3
   28a16:	021b      	lsls	r3, r3, #8
   28a18:	b21a      	sxth	r2, r3
   28a1a:	230e      	movs	r3, #14
   28a1c:	18fb      	adds	r3, r7, r3
   28a1e:	2100      	movs	r1, #0
   28a20:	5e5b      	ldrsh	r3, [r3, r1]
   28a22:	4313      	orrs	r3, r2
   28a24:	b21a      	sxth	r2, r3
   28a26:	230e      	movs	r3, #14
   28a28:	18fb      	adds	r3, r7, r3
   28a2a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28a2c:	687b      	ldr	r3, [r7, #4]
   28a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28a30:	1c5a      	adds	r2, r3, #1
   28a32:	687b      	ldr	r3, [r7, #4]
   28a34:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28a36:	230e      	movs	r3, #14
   28a38:	18fb      	adds	r3, r7, r3
   28a3a:	881b      	ldrh	r3, [r3, #0]
   28a3c:	05db      	lsls	r3, r3, #23
   28a3e:	0dda      	lsrs	r2, r3, #23
   28a40:	68bb      	ldr	r3, [r7, #8]
   28a42:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28a44:	687b      	ldr	r3, [r7, #4]
   28a46:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28a48:	b29b      	uxth	r3, r3
   28a4a:	3b01      	subs	r3, #1
   28a4c:	b29a      	uxth	r2, r3
   28a4e:	687b      	ldr	r3, [r7, #4]
   28a50:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28a52:	46c0      	nop			; (mov r8, r8)
   28a54:	46bd      	mov	sp, r7
   28a56:	b004      	add	sp, #16
   28a58:	bd80      	pop	{r7, pc}
	...

00028a5c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28a5c:	b580      	push	{r7, lr}
   28a5e:	b084      	sub	sp, #16
   28a60:	af00      	add	r7, sp, #0
   28a62:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28a64:	687b      	ldr	r3, [r7, #4]
   28a66:	681b      	ldr	r3, [r3, #0]
   28a68:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28a6a:	4b08      	ldr	r3, [pc, #32]	; (28a8c <_spi_write_dummy+0x30>)
   28a6c:	881b      	ldrh	r3, [r3, #0]
   28a6e:	001a      	movs	r2, r3
   28a70:	68fb      	ldr	r3, [r7, #12]
   28a72:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28a74:	687b      	ldr	r3, [r7, #4]
   28a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28a78:	b29b      	uxth	r3, r3
   28a7a:	3b01      	subs	r3, #1
   28a7c:	b29a      	uxth	r2, r3
   28a7e:	687b      	ldr	r3, [r7, #4]
   28a80:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28a82:	46c0      	nop			; (mov r8, r8)
   28a84:	46bd      	mov	sp, r7
   28a86:	b004      	add	sp, #16
   28a88:	bd80      	pop	{r7, pc}
   28a8a:	46c0      	nop			; (mov r8, r8)
   28a8c:	20005de8 	.word	0x20005de8

00028a90 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28a90:	b580      	push	{r7, lr}
   28a92:	b084      	sub	sp, #16
   28a94:	af00      	add	r7, sp, #0
   28a96:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28a98:	687b      	ldr	r3, [r7, #4]
   28a9a:	681b      	ldr	r3, [r3, #0]
   28a9c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28a9e:	230a      	movs	r3, #10
   28aa0:	18fb      	adds	r3, r7, r3
   28aa2:	2200      	movs	r2, #0
   28aa4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28aa6:	68fb      	ldr	r3, [r7, #12]
   28aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28aaa:	230a      	movs	r3, #10
   28aac:	18fb      	adds	r3, r7, r3
   28aae:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28ab0:	687b      	ldr	r3, [r7, #4]
   28ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28ab4:	b29b      	uxth	r3, r3
   28ab6:	3b01      	subs	r3, #1
   28ab8:	b29a      	uxth	r2, r3
   28aba:	687b      	ldr	r3, [r7, #4]
   28abc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28abe:	46c0      	nop			; (mov r8, r8)
   28ac0:	46bd      	mov	sp, r7
   28ac2:	b004      	add	sp, #16
   28ac4:	bd80      	pop	{r7, pc}

00028ac6 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   28ac6:	b580      	push	{r7, lr}
   28ac8:	b084      	sub	sp, #16
   28aca:	af00      	add	r7, sp, #0
   28acc:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28ace:	687b      	ldr	r3, [r7, #4]
   28ad0:	681b      	ldr	r3, [r3, #0]
   28ad2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   28ad4:	68fb      	ldr	r3, [r7, #12]
   28ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ad8:	b29a      	uxth	r2, r3
   28ada:	230a      	movs	r3, #10
   28adc:	18fb      	adds	r3, r7, r3
   28ade:	05d2      	lsls	r2, r2, #23
   28ae0:	0dd2      	lsrs	r2, r2, #23
   28ae2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   28ae4:	687b      	ldr	r3, [r7, #4]
   28ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ae8:	220a      	movs	r2, #10
   28aea:	18ba      	adds	r2, r7, r2
   28aec:	8812      	ldrh	r2, [r2, #0]
   28aee:	b2d2      	uxtb	r2, r2
   28af0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   28af2:	687b      	ldr	r3, [r7, #4]
   28af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28af6:	1c5a      	adds	r2, r3, #1
   28af8:	687b      	ldr	r3, [r7, #4]
   28afa:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28afc:	687b      	ldr	r3, [r7, #4]
   28afe:	799b      	ldrb	r3, [r3, #6]
   28b00:	2b01      	cmp	r3, #1
   28b02:	d10d      	bne.n	28b20 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28b04:	687b      	ldr	r3, [r7, #4]
   28b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28b08:	220a      	movs	r2, #10
   28b0a:	18ba      	adds	r2, r7, r2
   28b0c:	8812      	ldrh	r2, [r2, #0]
   28b0e:	0a12      	lsrs	r2, r2, #8
   28b10:	b292      	uxth	r2, r2
   28b12:	b2d2      	uxtb	r2, r2
   28b14:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28b16:	687b      	ldr	r3, [r7, #4]
   28b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28b1a:	1c5a      	adds	r2, r3, #1
   28b1c:	687b      	ldr	r3, [r7, #4]
   28b1e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28b20:	687b      	ldr	r3, [r7, #4]
   28b22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28b24:	b29b      	uxth	r3, r3
   28b26:	3b01      	subs	r3, #1
   28b28:	b29a      	uxth	r2, r3
   28b2a:	687b      	ldr	r3, [r7, #4]
   28b2c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   28b2e:	46c0      	nop			; (mov r8, r8)
   28b30:	46bd      	mov	sp, r7
   28b32:	b004      	add	sp, #16
   28b34:	bd80      	pop	{r7, pc}
	...

00028b38 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28b38:	b580      	push	{r7, lr}
   28b3a:	b086      	sub	sp, #24
   28b3c:	af00      	add	r7, sp, #0
   28b3e:	0002      	movs	r2, r0
   28b40:	1dfb      	adds	r3, r7, #7
   28b42:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   28b44:	1dfb      	adds	r3, r7, #7
   28b46:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28b48:	4b96      	ldr	r3, [pc, #600]	; (28da4 <_spi_interrupt_handler+0x26c>)
   28b4a:	0092      	lsls	r2, r2, #2
   28b4c:	58d3      	ldr	r3, [r2, r3]
   28b4e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28b50:	697b      	ldr	r3, [r7, #20]
   28b52:	681b      	ldr	r3, [r3, #0]
   28b54:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   28b56:	697b      	ldr	r3, [r7, #20]
   28b58:	2237      	movs	r2, #55	; 0x37
   28b5a:	5c9a      	ldrb	r2, [r3, r2]
   28b5c:	697b      	ldr	r3, [r7, #20]
   28b5e:	2136      	movs	r1, #54	; 0x36
   28b60:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   28b62:	230f      	movs	r3, #15
   28b64:	18fb      	adds	r3, r7, r3
   28b66:	400a      	ands	r2, r1
   28b68:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   28b6a:	693b      	ldr	r3, [r7, #16]
   28b6c:	7e1b      	ldrb	r3, [r3, #24]
   28b6e:	b2da      	uxtb	r2, r3
   28b70:	230c      	movs	r3, #12
   28b72:	18fb      	adds	r3, r7, r3
   28b74:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   28b76:	693b      	ldr	r3, [r7, #16]
   28b78:	7d9b      	ldrb	r3, [r3, #22]
   28b7a:	b2db      	uxtb	r3, r3
   28b7c:	b29a      	uxth	r2, r3
   28b7e:	230c      	movs	r3, #12
   28b80:	18fb      	adds	r3, r7, r3
   28b82:	210c      	movs	r1, #12
   28b84:	1879      	adds	r1, r7, r1
   28b86:	8809      	ldrh	r1, [r1, #0]
   28b88:	400a      	ands	r2, r1
   28b8a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   28b8c:	230c      	movs	r3, #12
   28b8e:	18fb      	adds	r3, r7, r3
   28b90:	881b      	ldrh	r3, [r3, #0]
   28b92:	2201      	movs	r2, #1
   28b94:	4013      	ands	r3, r2
   28b96:	d038      	beq.n	28c0a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28b98:	697b      	ldr	r3, [r7, #20]
   28b9a:	795b      	ldrb	r3, [r3, #5]
   28b9c:	2b01      	cmp	r3, #1
   28b9e:	d110      	bne.n	28bc2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28ba0:	697b      	ldr	r3, [r7, #20]
   28ba2:	7a5b      	ldrb	r3, [r3, #9]
   28ba4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28ba6:	2b00      	cmp	r3, #0
   28ba8:	d10b      	bne.n	28bc2 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   28baa:	697b      	ldr	r3, [r7, #20]
   28bac:	0018      	movs	r0, r3
   28bae:	4b7e      	ldr	r3, [pc, #504]	; (28da8 <_spi_interrupt_handler+0x270>)
   28bb0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   28bb2:	697b      	ldr	r3, [r7, #20]
   28bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28bb6:	b29b      	uxth	r3, r3
   28bb8:	2b00      	cmp	r3, #0
   28bba:	d102      	bne.n	28bc2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28bbc:	693b      	ldr	r3, [r7, #16]
   28bbe:	2201      	movs	r2, #1
   28bc0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   28bc2:	697b      	ldr	r3, [r7, #20]
   28bc4:	795b      	ldrb	r3, [r3, #5]
		if (0
   28bc6:	2b01      	cmp	r3, #1
   28bc8:	d11f      	bne.n	28c0a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   28bca:	697b      	ldr	r3, [r7, #20]
   28bcc:	7a5b      	ldrb	r3, [r3, #9]
   28bce:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   28bd0:	2b00      	cmp	r3, #0
   28bd2:	d01a      	beq.n	28c0a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   28bd4:	697b      	ldr	r3, [r7, #20]
   28bd6:	0018      	movs	r0, r3
   28bd8:	4b74      	ldr	r3, [pc, #464]	; (28dac <_spi_interrupt_handler+0x274>)
   28bda:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   28bdc:	697b      	ldr	r3, [r7, #20]
   28bde:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28be0:	b29b      	uxth	r3, r3
   28be2:	2b00      	cmp	r3, #0
   28be4:	d111      	bne.n	28c0a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28be6:	693b      	ldr	r3, [r7, #16]
   28be8:	2201      	movs	r2, #1
   28bea:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   28bec:	697b      	ldr	r3, [r7, #20]
   28bee:	7a5b      	ldrb	r3, [r3, #9]
   28bf0:	b2db      	uxtb	r3, r3
   28bf2:	2b01      	cmp	r3, #1
   28bf4:	d109      	bne.n	28c0a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   28bf6:	697b      	ldr	r3, [r7, #20]
   28bf8:	79db      	ldrb	r3, [r3, #7]
   28bfa:	2201      	movs	r2, #1
   28bfc:	4053      	eors	r3, r2
   28bfe:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   28c00:	2b00      	cmp	r3, #0
   28c02:	d002      	beq.n	28c0a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28c04:	693b      	ldr	r3, [r7, #16]
   28c06:	2202      	movs	r2, #2
   28c08:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   28c0a:	230c      	movs	r3, #12
   28c0c:	18fb      	adds	r3, r7, r3
   28c0e:	881b      	ldrh	r3, [r3, #0]
   28c10:	2204      	movs	r2, #4
   28c12:	4013      	ands	r3, r2
   28c14:	d100      	bne.n	28c18 <_spi_interrupt_handler+0xe0>
   28c16:	e07e      	b.n	28d16 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28c18:	693b      	ldr	r3, [r7, #16]
   28c1a:	8b5b      	ldrh	r3, [r3, #26]
   28c1c:	b29b      	uxth	r3, r3
   28c1e:	001a      	movs	r2, r3
   28c20:	2304      	movs	r3, #4
   28c22:	4013      	ands	r3, r2
   28c24:	d022      	beq.n	28c6c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   28c26:	697b      	ldr	r3, [r7, #20]
   28c28:	7a5b      	ldrb	r3, [r3, #9]
   28c2a:	b2db      	uxtb	r3, r3
   28c2c:	2b01      	cmp	r3, #1
   28c2e:	d014      	beq.n	28c5a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   28c30:	697b      	ldr	r3, [r7, #20]
   28c32:	2238      	movs	r2, #56	; 0x38
   28c34:	211e      	movs	r1, #30
   28c36:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28c38:	697b      	ldr	r3, [r7, #20]
   28c3a:	2203      	movs	r2, #3
   28c3c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   28c3e:	693b      	ldr	r3, [r7, #16]
   28c40:	2205      	movs	r2, #5
   28c42:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   28c44:	230f      	movs	r3, #15
   28c46:	18fb      	adds	r3, r7, r3
   28c48:	781b      	ldrb	r3, [r3, #0]
   28c4a:	2208      	movs	r2, #8
   28c4c:	4013      	ands	r3, r2
   28c4e:	d004      	beq.n	28c5a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   28c50:	697b      	ldr	r3, [r7, #20]
   28c52:	699b      	ldr	r3, [r3, #24]
   28c54:	697a      	ldr	r2, [r7, #20]
   28c56:	0010      	movs	r0, r2
   28c58:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   28c5a:	693b      	ldr	r3, [r7, #16]
   28c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28c5e:	230a      	movs	r3, #10
   28c60:	18fb      	adds	r3, r7, r3
   28c62:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28c64:	693b      	ldr	r3, [r7, #16]
   28c66:	2204      	movs	r2, #4
   28c68:	835a      	strh	r2, [r3, #26]
   28c6a:	e054      	b.n	28d16 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   28c6c:	697b      	ldr	r3, [r7, #20]
   28c6e:	7a5b      	ldrb	r3, [r3, #9]
   28c70:	b2db      	uxtb	r3, r3
   28c72:	2b01      	cmp	r3, #1
   28c74:	d11e      	bne.n	28cb4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   28c76:	697b      	ldr	r3, [r7, #20]
   28c78:	0018      	movs	r0, r3
   28c7a:	4b4d      	ldr	r3, [pc, #308]	; (28db0 <_spi_interrupt_handler+0x278>)
   28c7c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   28c7e:	697b      	ldr	r3, [r7, #20]
   28c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28c82:	b29b      	uxth	r3, r3
   28c84:	2b00      	cmp	r3, #0
   28c86:	d146      	bne.n	28d16 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28c88:	693b      	ldr	r3, [r7, #16]
   28c8a:	2204      	movs	r2, #4
   28c8c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   28c8e:	697b      	ldr	r3, [r7, #20]
   28c90:	2238      	movs	r2, #56	; 0x38
   28c92:	2100      	movs	r1, #0
   28c94:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   28c96:	697b      	ldr	r3, [r7, #20]
   28c98:	2203      	movs	r2, #3
   28c9a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28c9c:	230f      	movs	r3, #15
   28c9e:	18fb      	adds	r3, r7, r3
   28ca0:	781b      	ldrb	r3, [r3, #0]
   28ca2:	2201      	movs	r2, #1
   28ca4:	4013      	ands	r3, r2
   28ca6:	d036      	beq.n	28d16 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28ca8:	697b      	ldr	r3, [r7, #20]
   28caa:	68db      	ldr	r3, [r3, #12]
   28cac:	697a      	ldr	r2, [r7, #20]
   28cae:	0010      	movs	r0, r2
   28cb0:	4798      	blx	r3
   28cb2:	e030      	b.n	28d16 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   28cb4:	697b      	ldr	r3, [r7, #20]
   28cb6:	0018      	movs	r0, r3
   28cb8:	4b3e      	ldr	r3, [pc, #248]	; (28db4 <_spi_interrupt_handler+0x27c>)
   28cba:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28cbc:	697b      	ldr	r3, [r7, #20]
   28cbe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28cc0:	b29b      	uxth	r3, r3
   28cc2:	2b00      	cmp	r3, #0
   28cc4:	d127      	bne.n	28d16 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   28cc6:	697b      	ldr	r3, [r7, #20]
   28cc8:	2238      	movs	r2, #56	; 0x38
   28cca:	2100      	movs	r1, #0
   28ccc:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28cce:	693b      	ldr	r3, [r7, #16]
   28cd0:	2204      	movs	r2, #4
   28cd2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   28cd4:	697b      	ldr	r3, [r7, #20]
   28cd6:	7a5b      	ldrb	r3, [r3, #9]
   28cd8:	b2db      	uxtb	r3, r3
   28cda:	2b02      	cmp	r3, #2
   28cdc:	d10b      	bne.n	28cf6 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   28cde:	230f      	movs	r3, #15
   28ce0:	18fb      	adds	r3, r7, r3
   28ce2:	781b      	ldrb	r3, [r3, #0]
   28ce4:	2204      	movs	r2, #4
   28ce6:	4013      	ands	r3, r2
   28ce8:	d015      	beq.n	28d16 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28cea:	697b      	ldr	r3, [r7, #20]
   28cec:	695b      	ldr	r3, [r3, #20]
   28cee:	697a      	ldr	r2, [r7, #20]
   28cf0:	0010      	movs	r0, r2
   28cf2:	4798      	blx	r3
   28cf4:	e00f      	b.n	28d16 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28cf6:	697b      	ldr	r3, [r7, #20]
   28cf8:	7a5b      	ldrb	r3, [r3, #9]
   28cfa:	b2db      	uxtb	r3, r3
   28cfc:	2b00      	cmp	r3, #0
   28cfe:	d10a      	bne.n	28d16 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   28d00:	230f      	movs	r3, #15
   28d02:	18fb      	adds	r3, r7, r3
   28d04:	781b      	ldrb	r3, [r3, #0]
   28d06:	2202      	movs	r2, #2
   28d08:	4013      	ands	r3, r2
   28d0a:	d004      	beq.n	28d16 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28d0c:	697b      	ldr	r3, [r7, #20]
   28d0e:	691b      	ldr	r3, [r3, #16]
   28d10:	697a      	ldr	r2, [r7, #20]
   28d12:	0010      	movs	r0, r2
   28d14:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28d16:	230c      	movs	r3, #12
   28d18:	18fb      	adds	r3, r7, r3
   28d1a:	881b      	ldrh	r3, [r3, #0]
   28d1c:	2202      	movs	r2, #2
   28d1e:	4013      	ands	r3, r2
   28d20:	d024      	beq.n	28d6c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28d22:	697b      	ldr	r3, [r7, #20]
   28d24:	795b      	ldrb	r3, [r3, #5]
   28d26:	2b01      	cmp	r3, #1
   28d28:	d120      	bne.n	28d6c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28d2a:	697b      	ldr	r3, [r7, #20]
   28d2c:	7a5b      	ldrb	r3, [r3, #9]
   28d2e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28d30:	2b01      	cmp	r3, #1
   28d32:	d11b      	bne.n	28d6c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28d34:	697b      	ldr	r3, [r7, #20]
   28d36:	79db      	ldrb	r3, [r3, #7]
   28d38:	2201      	movs	r2, #1
   28d3a:	4053      	eors	r3, r2
   28d3c:	b2db      	uxtb	r3, r3
   28d3e:	2b00      	cmp	r3, #0
   28d40:	d014      	beq.n	28d6c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28d42:	693b      	ldr	r3, [r7, #16]
   28d44:	2202      	movs	r2, #2
   28d46:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28d48:	697b      	ldr	r3, [r7, #20]
   28d4a:	2203      	movs	r2, #3
   28d4c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   28d4e:	697b      	ldr	r3, [r7, #20]
   28d50:	2238      	movs	r2, #56	; 0x38
   28d52:	2100      	movs	r1, #0
   28d54:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   28d56:	230f      	movs	r3, #15
   28d58:	18fb      	adds	r3, r7, r3
   28d5a:	781b      	ldrb	r3, [r3, #0]
   28d5c:	2201      	movs	r2, #1
   28d5e:	4013      	ands	r3, r2
   28d60:	d004      	beq.n	28d6c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   28d62:	697b      	ldr	r3, [r7, #20]
   28d64:	68db      	ldr	r3, [r3, #12]
   28d66:	697a      	ldr	r2, [r7, #20]
   28d68:	0010      	movs	r0, r2
   28d6a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   28d6c:	230c      	movs	r3, #12
   28d6e:	18fb      	adds	r3, r7, r3
   28d70:	881b      	ldrh	r3, [r3, #0]
   28d72:	2280      	movs	r2, #128	; 0x80
   28d74:	4013      	ands	r3, r2
   28d76:	d010      	beq.n	28d9a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28d78:	693b      	ldr	r3, [r7, #16]
   28d7a:	2280      	movs	r2, #128	; 0x80
   28d7c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28d7e:	693b      	ldr	r3, [r7, #16]
   28d80:	2280      	movs	r2, #128	; 0x80
   28d82:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28d84:	230f      	movs	r3, #15
   28d86:	18fb      	adds	r3, r7, r3
   28d88:	781b      	ldrb	r3, [r3, #0]
   28d8a:	2240      	movs	r2, #64	; 0x40
   28d8c:	4013      	ands	r3, r2
   28d8e:	d004      	beq.n	28d9a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28d90:	697b      	ldr	r3, [r7, #20]
   28d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28d94:	697a      	ldr	r2, [r7, #20]
   28d96:	0010      	movs	r0, r2
   28d98:	4798      	blx	r3
		}
	}
#  endif
}
   28d9a:	46c0      	nop			; (mov r8, r8)
   28d9c:	46bd      	mov	sp, r7
   28d9e:	b006      	add	sp, #24
   28da0:	bd80      	pop	{r7, pc}
   28da2:	46c0      	nop			; (mov r8, r8)
   28da4:	20005dd0 	.word	0x20005dd0
   28da8:	00028a5d 	.word	0x00028a5d
   28dac:	000289e1 	.word	0x000289e1
   28db0:	00028a91 	.word	0x00028a91
   28db4:	00028ac7 	.word	0x00028ac7

00028db8 <system_gclk_chan_get_config_defaults>:
{
   28db8:	b580      	push	{r7, lr}
   28dba:	b082      	sub	sp, #8
   28dbc:	af00      	add	r7, sp, #0
   28dbe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28dc0:	687b      	ldr	r3, [r7, #4]
   28dc2:	2200      	movs	r2, #0
   28dc4:	701a      	strb	r2, [r3, #0]
}
   28dc6:	46c0      	nop			; (mov r8, r8)
   28dc8:	46bd      	mov	sp, r7
   28dca:	b002      	add	sp, #8
   28dcc:	bd80      	pop	{r7, pc}
	...

00028dd0 <system_apb_clock_set_mask>:
{
   28dd0:	b580      	push	{r7, lr}
   28dd2:	b082      	sub	sp, #8
   28dd4:	af00      	add	r7, sp, #0
   28dd6:	0002      	movs	r2, r0
   28dd8:	6039      	str	r1, [r7, #0]
   28dda:	1dfb      	adds	r3, r7, #7
   28ddc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28dde:	1dfb      	adds	r3, r7, #7
   28de0:	781b      	ldrb	r3, [r3, #0]
   28de2:	2b01      	cmp	r3, #1
   28de4:	d00a      	beq.n	28dfc <system_apb_clock_set_mask+0x2c>
   28de6:	2b02      	cmp	r3, #2
   28de8:	d00f      	beq.n	28e0a <system_apb_clock_set_mask+0x3a>
   28dea:	2b00      	cmp	r3, #0
   28dec:	d114      	bne.n	28e18 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28dee:	4b0e      	ldr	r3, [pc, #56]	; (28e28 <system_apb_clock_set_mask+0x58>)
   28df0:	4a0d      	ldr	r2, [pc, #52]	; (28e28 <system_apb_clock_set_mask+0x58>)
   28df2:	6991      	ldr	r1, [r2, #24]
   28df4:	683a      	ldr	r2, [r7, #0]
   28df6:	430a      	orrs	r2, r1
   28df8:	619a      	str	r2, [r3, #24]
			break;
   28dfa:	e00f      	b.n	28e1c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28dfc:	4b0a      	ldr	r3, [pc, #40]	; (28e28 <system_apb_clock_set_mask+0x58>)
   28dfe:	4a0a      	ldr	r2, [pc, #40]	; (28e28 <system_apb_clock_set_mask+0x58>)
   28e00:	69d1      	ldr	r1, [r2, #28]
   28e02:	683a      	ldr	r2, [r7, #0]
   28e04:	430a      	orrs	r2, r1
   28e06:	61da      	str	r2, [r3, #28]
			break;
   28e08:	e008      	b.n	28e1c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28e0a:	4b07      	ldr	r3, [pc, #28]	; (28e28 <system_apb_clock_set_mask+0x58>)
   28e0c:	4a06      	ldr	r2, [pc, #24]	; (28e28 <system_apb_clock_set_mask+0x58>)
   28e0e:	6a11      	ldr	r1, [r2, #32]
   28e10:	683a      	ldr	r2, [r7, #0]
   28e12:	430a      	orrs	r2, r1
   28e14:	621a      	str	r2, [r3, #32]
			break;
   28e16:	e001      	b.n	28e1c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28e18:	2317      	movs	r3, #23
   28e1a:	e000      	b.n	28e1e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28e1c:	2300      	movs	r3, #0
}
   28e1e:	0018      	movs	r0, r3
   28e20:	46bd      	mov	sp, r7
   28e22:	b002      	add	sp, #8
   28e24:	bd80      	pop	{r7, pc}
   28e26:	46c0      	nop			; (mov r8, r8)
   28e28:	40000400 	.word	0x40000400

00028e2c <system_pinmux_get_config_defaults>:
{
   28e2c:	b580      	push	{r7, lr}
   28e2e:	b082      	sub	sp, #8
   28e30:	af00      	add	r7, sp, #0
   28e32:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28e34:	687b      	ldr	r3, [r7, #4]
   28e36:	2280      	movs	r2, #128	; 0x80
   28e38:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28e3a:	687b      	ldr	r3, [r7, #4]
   28e3c:	2200      	movs	r2, #0
   28e3e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28e40:	687b      	ldr	r3, [r7, #4]
   28e42:	2201      	movs	r2, #1
   28e44:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28e46:	687b      	ldr	r3, [r7, #4]
   28e48:	2200      	movs	r2, #0
   28e4a:	70da      	strb	r2, [r3, #3]
}
   28e4c:	46c0      	nop			; (mov r8, r8)
   28e4e:	46bd      	mov	sp, r7
   28e50:	b002      	add	sp, #8
   28e52:	bd80      	pop	{r7, pc}

00028e54 <system_is_debugger_present>:
{
   28e54:	b580      	push	{r7, lr}
   28e56:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28e58:	4b05      	ldr	r3, [pc, #20]	; (28e70 <system_is_debugger_present+0x1c>)
   28e5a:	789b      	ldrb	r3, [r3, #2]
   28e5c:	b2db      	uxtb	r3, r3
   28e5e:	001a      	movs	r2, r3
   28e60:	2302      	movs	r3, #2
   28e62:	4013      	ands	r3, r2
   28e64:	1e5a      	subs	r2, r3, #1
   28e66:	4193      	sbcs	r3, r2
   28e68:	b2db      	uxtb	r3, r3
}
   28e6a:	0018      	movs	r0, r3
   28e6c:	46bd      	mov	sp, r7
   28e6e:	bd80      	pop	{r7, pc}
   28e70:	41002000 	.word	0x41002000

00028e74 <usart_is_syncing>:
{
   28e74:	b580      	push	{r7, lr}
   28e76:	b084      	sub	sp, #16
   28e78:	af00      	add	r7, sp, #0
   28e7a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28e7c:	687b      	ldr	r3, [r7, #4]
   28e7e:	681b      	ldr	r3, [r3, #0]
   28e80:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28e82:	68fb      	ldr	r3, [r7, #12]
   28e84:	69db      	ldr	r3, [r3, #28]
   28e86:	1e5a      	subs	r2, r3, #1
   28e88:	4193      	sbcs	r3, r2
   28e8a:	b2db      	uxtb	r3, r3
}
   28e8c:	0018      	movs	r0, r3
   28e8e:	46bd      	mov	sp, r7
   28e90:	b004      	add	sp, #16
   28e92:	bd80      	pop	{r7, pc}

00028e94 <_usart_wait_for_sync>:
{
   28e94:	b580      	push	{r7, lr}
   28e96:	b082      	sub	sp, #8
   28e98:	af00      	add	r7, sp, #0
   28e9a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28e9c:	46c0      	nop			; (mov r8, r8)
   28e9e:	687b      	ldr	r3, [r7, #4]
   28ea0:	0018      	movs	r0, r3
   28ea2:	4b04      	ldr	r3, [pc, #16]	; (28eb4 <_usart_wait_for_sync+0x20>)
   28ea4:	4798      	blx	r3
   28ea6:	1e03      	subs	r3, r0, #0
   28ea8:	d1f9      	bne.n	28e9e <_usart_wait_for_sync+0xa>
}
   28eaa:	46c0      	nop			; (mov r8, r8)
   28eac:	46bd      	mov	sp, r7
   28eae:	b002      	add	sp, #8
   28eb0:	bd80      	pop	{r7, pc}
   28eb2:	46c0      	nop			; (mov r8, r8)
   28eb4:	00028e75 	.word	0x00028e75

00028eb8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28eb8:	b5b0      	push	{r4, r5, r7, lr}
   28eba:	b08c      	sub	sp, #48	; 0x30
   28ebc:	af02      	add	r7, sp, #8
   28ebe:	6078      	str	r0, [r7, #4]
   28ec0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28ec2:	687b      	ldr	r3, [r7, #4]
   28ec4:	681b      	ldr	r3, [r3, #0]
   28ec6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28ec8:	687b      	ldr	r3, [r7, #4]
   28eca:	681b      	ldr	r3, [r3, #0]
   28ecc:	0018      	movs	r0, r3
   28ece:	4bab      	ldr	r3, [pc, #684]	; (2917c <_usart_set_config+0x2c4>)
   28ed0:	4798      	blx	r3
   28ed2:	0003      	movs	r3, r0
   28ed4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28ed6:	697b      	ldr	r3, [r7, #20]
   28ed8:	3314      	adds	r3, #20
   28eda:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28edc:	2300      	movs	r3, #0
   28ede:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28ee0:	2300      	movs	r3, #0
   28ee2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28ee4:	230a      	movs	r3, #10
   28ee6:	18fb      	adds	r3, r7, r3
   28ee8:	2200      	movs	r2, #0
   28eea:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28eec:	231f      	movs	r3, #31
   28eee:	18fb      	adds	r3, r7, r3
   28ef0:	2200      	movs	r2, #0
   28ef2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28ef4:	231e      	movs	r3, #30
   28ef6:	18fb      	adds	r3, r7, r3
   28ef8:	2210      	movs	r2, #16
   28efa:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28efc:	683b      	ldr	r3, [r7, #0]
   28efe:	8a1b      	ldrh	r3, [r3, #16]
   28f00:	2280      	movs	r2, #128	; 0x80
   28f02:	01d2      	lsls	r2, r2, #7
   28f04:	4293      	cmp	r3, r2
   28f06:	d01c      	beq.n	28f42 <_usart_set_config+0x8a>
   28f08:	2280      	movs	r2, #128	; 0x80
   28f0a:	01d2      	lsls	r2, r2, #7
   28f0c:	4293      	cmp	r3, r2
   28f0e:	dc06      	bgt.n	28f1e <_usart_set_config+0x66>
   28f10:	2b00      	cmp	r3, #0
   28f12:	d00d      	beq.n	28f30 <_usart_set_config+0x78>
   28f14:	2280      	movs	r2, #128	; 0x80
   28f16:	0192      	lsls	r2, r2, #6
   28f18:	4293      	cmp	r3, r2
   28f1a:	d024      	beq.n	28f66 <_usart_set_config+0xae>
   28f1c:	e035      	b.n	28f8a <_usart_set_config+0xd2>
   28f1e:	22c0      	movs	r2, #192	; 0xc0
   28f20:	01d2      	lsls	r2, r2, #7
   28f22:	4293      	cmp	r3, r2
   28f24:	d028      	beq.n	28f78 <_usart_set_config+0xc0>
   28f26:	2280      	movs	r2, #128	; 0x80
   28f28:	0212      	lsls	r2, r2, #8
   28f2a:	4293      	cmp	r3, r2
   28f2c:	d012      	beq.n	28f54 <_usart_set_config+0x9c>
   28f2e:	e02c      	b.n	28f8a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28f30:	231f      	movs	r3, #31
   28f32:	18fb      	adds	r3, r7, r3
   28f34:	2200      	movs	r2, #0
   28f36:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28f38:	231e      	movs	r3, #30
   28f3a:	18fb      	adds	r3, r7, r3
   28f3c:	2210      	movs	r2, #16
   28f3e:	701a      	strb	r2, [r3, #0]
			break;
   28f40:	e023      	b.n	28f8a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28f42:	231f      	movs	r3, #31
   28f44:	18fb      	adds	r3, r7, r3
   28f46:	2200      	movs	r2, #0
   28f48:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28f4a:	231e      	movs	r3, #30
   28f4c:	18fb      	adds	r3, r7, r3
   28f4e:	2208      	movs	r2, #8
   28f50:	701a      	strb	r2, [r3, #0]
			break;
   28f52:	e01a      	b.n	28f8a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28f54:	231f      	movs	r3, #31
   28f56:	18fb      	adds	r3, r7, r3
   28f58:	2200      	movs	r2, #0
   28f5a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   28f5c:	231e      	movs	r3, #30
   28f5e:	18fb      	adds	r3, r7, r3
   28f60:	2203      	movs	r2, #3
   28f62:	701a      	strb	r2, [r3, #0]
			break;
   28f64:	e011      	b.n	28f8a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28f66:	231f      	movs	r3, #31
   28f68:	18fb      	adds	r3, r7, r3
   28f6a:	2201      	movs	r2, #1
   28f6c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28f6e:	231e      	movs	r3, #30
   28f70:	18fb      	adds	r3, r7, r3
   28f72:	2210      	movs	r2, #16
   28f74:	701a      	strb	r2, [r3, #0]
			break;
   28f76:	e008      	b.n	28f8a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28f78:	231f      	movs	r3, #31
   28f7a:	18fb      	adds	r3, r7, r3
   28f7c:	2201      	movs	r2, #1
   28f7e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28f80:	231e      	movs	r3, #30
   28f82:	18fb      	adds	r3, r7, r3
   28f84:	2208      	movs	r2, #8
   28f86:	701a      	strb	r2, [r3, #0]
			break;
   28f88:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28f8a:	683b      	ldr	r3, [r7, #0]
   28f8c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28f8e:	683b      	ldr	r3, [r7, #0]
   28f90:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   28f92:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28f94:	683b      	ldr	r3, [r7, #0]
   28f96:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28f98:	4313      	orrs	r3, r2
		config->sample_rate |
   28f9a:	683a      	ldr	r2, [r7, #0]
   28f9c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28f9e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28fa0:	683a      	ldr	r2, [r7, #0]
   28fa2:	7e12      	ldrb	r2, [r2, #24]
   28fa4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28fa6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28fa8:	683a      	ldr	r2, [r7, #0]
   28faa:	2126      	movs	r1, #38	; 0x26
   28fac:	5c52      	ldrb	r2, [r2, r1]
   28fae:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   28fb0:	4313      	orrs	r3, r2
   28fb2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28fb4:	231d      	movs	r3, #29
   28fb6:	18fb      	adds	r3, r7, r3
   28fb8:	2200      	movs	r2, #0
   28fba:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28fbc:	683b      	ldr	r3, [r7, #0]
   28fbe:	685b      	ldr	r3, [r3, #4]
   28fc0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   28fc2:	68fb      	ldr	r3, [r7, #12]
   28fc4:	2b00      	cmp	r3, #0
   28fc6:	d01e      	beq.n	29006 <_usart_set_config+0x14e>
   28fc8:	2280      	movs	r2, #128	; 0x80
   28fca:	0552      	lsls	r2, r2, #21
   28fcc:	4293      	cmp	r3, r2
   28fce:	d14f      	bne.n	29070 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28fd0:	683b      	ldr	r3, [r7, #0]
   28fd2:	2227      	movs	r2, #39	; 0x27
   28fd4:	5c9b      	ldrb	r3, [r3, r2]
   28fd6:	2201      	movs	r2, #1
   28fd8:	4053      	eors	r3, r2
   28fda:	b2db      	uxtb	r3, r3
   28fdc:	2b00      	cmp	r3, #0
   28fde:	d046      	beq.n	2906e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28fe0:	683b      	ldr	r3, [r7, #0]
   28fe2:	6a1d      	ldr	r5, [r3, #32]
   28fe4:	693b      	ldr	r3, [r7, #16]
   28fe6:	b2db      	uxtb	r3, r3
   28fe8:	0018      	movs	r0, r3
   28fea:	4b65      	ldr	r3, [pc, #404]	; (29180 <_usart_set_config+0x2c8>)
   28fec:	4798      	blx	r3
   28fee:	0001      	movs	r1, r0
   28ff0:	231d      	movs	r3, #29
   28ff2:	18fc      	adds	r4, r7, r3
   28ff4:	230a      	movs	r3, #10
   28ff6:	18fb      	adds	r3, r7, r3
   28ff8:	001a      	movs	r2, r3
   28ffa:	0028      	movs	r0, r5
   28ffc:	4b61      	ldr	r3, [pc, #388]	; (29184 <_usart_set_config+0x2cc>)
   28ffe:	4798      	blx	r3
   29000:	0003      	movs	r3, r0
   29002:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   29004:	e033      	b.n	2906e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   29006:	683b      	ldr	r3, [r7, #0]
   29008:	2227      	movs	r2, #39	; 0x27
   2900a:	5c9b      	ldrb	r3, [r3, r2]
   2900c:	2b00      	cmp	r3, #0
   2900e:	d014      	beq.n	2903a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   29010:	683b      	ldr	r3, [r7, #0]
   29012:	6a18      	ldr	r0, [r3, #32]
   29014:	683b      	ldr	r3, [r7, #0]
   29016:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   29018:	231d      	movs	r3, #29
   2901a:	18fc      	adds	r4, r7, r3
   2901c:	231f      	movs	r3, #31
   2901e:	18fb      	adds	r3, r7, r3
   29020:	781d      	ldrb	r5, [r3, #0]
   29022:	230a      	movs	r3, #10
   29024:	18fa      	adds	r2, r7, r3
   29026:	231e      	movs	r3, #30
   29028:	18fb      	adds	r3, r7, r3
   2902a:	781b      	ldrb	r3, [r3, #0]
   2902c:	9300      	str	r3, [sp, #0]
   2902e:	002b      	movs	r3, r5
   29030:	4d55      	ldr	r5, [pc, #340]	; (29188 <_usart_set_config+0x2d0>)
   29032:	47a8      	blx	r5
   29034:	0003      	movs	r3, r0
   29036:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   29038:	e01a      	b.n	29070 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2903a:	683b      	ldr	r3, [r7, #0]
   2903c:	6a1d      	ldr	r5, [r3, #32]
   2903e:	693b      	ldr	r3, [r7, #16]
   29040:	b2db      	uxtb	r3, r3
   29042:	0018      	movs	r0, r3
   29044:	4b4e      	ldr	r3, [pc, #312]	; (29180 <_usart_set_config+0x2c8>)
   29046:	4798      	blx	r3
				status_code =
   29048:	231d      	movs	r3, #29
   2904a:	18fc      	adds	r4, r7, r3
   2904c:	231f      	movs	r3, #31
   2904e:	18fb      	adds	r3, r7, r3
   29050:	7819      	ldrb	r1, [r3, #0]
   29052:	230a      	movs	r3, #10
   29054:	18fa      	adds	r2, r7, r3
   29056:	231e      	movs	r3, #30
   29058:	18fb      	adds	r3, r7, r3
   2905a:	781b      	ldrb	r3, [r3, #0]
   2905c:	9300      	str	r3, [sp, #0]
   2905e:	000b      	movs	r3, r1
   29060:	0001      	movs	r1, r0
   29062:	0028      	movs	r0, r5
   29064:	4d48      	ldr	r5, [pc, #288]	; (29188 <_usart_set_config+0x2d0>)
   29066:	47a8      	blx	r5
   29068:	0003      	movs	r3, r0
   2906a:	7023      	strb	r3, [r4, #0]
			break;
   2906c:	e000      	b.n	29070 <_usart_set_config+0x1b8>
			break;
   2906e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   29070:	231d      	movs	r3, #29
   29072:	18fb      	adds	r3, r7, r3
   29074:	781b      	ldrb	r3, [r3, #0]
   29076:	2b00      	cmp	r3, #0
   29078:	d003      	beq.n	29082 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2907a:	231d      	movs	r3, #29
   2907c:	18fb      	adds	r3, r7, r3
   2907e:	781b      	ldrb	r3, [r3, #0]
   29080:	e077      	b.n	29172 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   29082:	683b      	ldr	r3, [r7, #0]
   29084:	7e5b      	ldrb	r3, [r3, #25]
   29086:	2b00      	cmp	r3, #0
   29088:	d003      	beq.n	29092 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2908a:	683b      	ldr	r3, [r7, #0]
   2908c:	7e9a      	ldrb	r2, [r3, #26]
   2908e:	69bb      	ldr	r3, [r7, #24]
   29090:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29092:	687b      	ldr	r3, [r7, #4]
   29094:	0018      	movs	r0, r3
   29096:	4b3d      	ldr	r3, [pc, #244]	; (2918c <_usart_set_config+0x2d4>)
   29098:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2909a:	230a      	movs	r3, #10
   2909c:	18fb      	adds	r3, r7, r3
   2909e:	881a      	ldrh	r2, [r3, #0]
   290a0:	69bb      	ldr	r3, [r7, #24]
   290a2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   290a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   290a6:	68fb      	ldr	r3, [r7, #12]
   290a8:	4313      	orrs	r3, r2
   290aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   290ac:	683b      	ldr	r3, [r7, #0]
   290ae:	2227      	movs	r2, #39	; 0x27
   290b0:	5c9b      	ldrb	r3, [r3, r2]
   290b2:	2201      	movs	r2, #1
   290b4:	4053      	eors	r3, r2
   290b6:	b2db      	uxtb	r3, r3
   290b8:	2b00      	cmp	r3, #0
   290ba:	d003      	beq.n	290c4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   290bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   290be:	2204      	movs	r2, #4
   290c0:	4313      	orrs	r3, r2
   290c2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   290c4:	683b      	ldr	r3, [r7, #0]
   290c6:	7e5b      	ldrb	r3, [r3, #25]
   290c8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   290ca:	683b      	ldr	r3, [r7, #0]
   290cc:	7f1b      	ldrb	r3, [r3, #28]
   290ce:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   290d0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   290d2:	683b      	ldr	r3, [r7, #0]
   290d4:	7f5b      	ldrb	r3, [r3, #29]
   290d6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   290d8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   290da:	683b      	ldr	r3, [r7, #0]
   290dc:	2124      	movs	r1, #36	; 0x24
   290de:	5c5b      	ldrb	r3, [r3, r1]
   290e0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   290e2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   290e4:	683b      	ldr	r3, [r7, #0]
   290e6:	2125      	movs	r1, #37	; 0x25
   290e8:	5c5b      	ldrb	r3, [r3, r1]
   290ea:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   290ec:	4313      	orrs	r3, r2
	ctrlb =  
   290ee:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   290f0:	683b      	ldr	r3, [r7, #0]
   290f2:	7a9b      	ldrb	r3, [r3, #10]
   290f4:	001a      	movs	r2, r3
   290f6:	6a3b      	ldr	r3, [r7, #32]
   290f8:	4313      	orrs	r3, r2
   290fa:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   290fc:	683b      	ldr	r3, [r7, #0]
   290fe:	7adb      	ldrb	r3, [r3, #11]
   29100:	001a      	movs	r2, r3
   29102:	6a3b      	ldr	r3, [r7, #32]
   29104:	4313      	orrs	r3, r2
   29106:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29108:	683b      	ldr	r3, [r7, #0]
   2910a:	891b      	ldrh	r3, [r3, #8]
   2910c:	2bff      	cmp	r3, #255	; 0xff
   2910e:	d00b      	beq.n	29128 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   29110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29112:	2280      	movs	r2, #128	; 0x80
   29114:	0452      	lsls	r2, r2, #17
   29116:	4313      	orrs	r3, r2
   29118:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2911a:	683b      	ldr	r3, [r7, #0]
   2911c:	891b      	ldrh	r3, [r3, #8]
   2911e:	001a      	movs	r2, r3
   29120:	6a3b      	ldr	r3, [r7, #32]
   29122:	4313      	orrs	r3, r2
   29124:	623b      	str	r3, [r7, #32]
   29126:	e008      	b.n	2913a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   29128:	683b      	ldr	r3, [r7, #0]
   2912a:	7edb      	ldrb	r3, [r3, #27]
   2912c:	2b00      	cmp	r3, #0
   2912e:	d004      	beq.n	2913a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   29130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29132:	2280      	movs	r2, #128	; 0x80
   29134:	04d2      	lsls	r2, r2, #19
   29136:	4313      	orrs	r3, r2
   29138:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2913a:	683b      	ldr	r3, [r7, #0]
   2913c:	222c      	movs	r2, #44	; 0x2c
   2913e:	5c9b      	ldrb	r3, [r3, r2]
   29140:	2b00      	cmp	r3, #0
   29142:	d103      	bne.n	2914c <_usart_set_config+0x294>
   29144:	4b12      	ldr	r3, [pc, #72]	; (29190 <_usart_set_config+0x2d8>)
   29146:	4798      	blx	r3
   29148:	1e03      	subs	r3, r0, #0
   2914a:	d003      	beq.n	29154 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2914e:	2280      	movs	r2, #128	; 0x80
   29150:	4313      	orrs	r3, r2
   29152:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29154:	687b      	ldr	r3, [r7, #4]
   29156:	0018      	movs	r0, r3
   29158:	4b0c      	ldr	r3, [pc, #48]	; (2918c <_usart_set_config+0x2d4>)
   2915a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2915c:	69bb      	ldr	r3, [r7, #24]
   2915e:	6a3a      	ldr	r2, [r7, #32]
   29160:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29162:	687b      	ldr	r3, [r7, #4]
   29164:	0018      	movs	r0, r3
   29166:	4b09      	ldr	r3, [pc, #36]	; (2918c <_usart_set_config+0x2d4>)
   29168:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2916a:	69bb      	ldr	r3, [r7, #24]
   2916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2916e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   29170:	2300      	movs	r3, #0
}
   29172:	0018      	movs	r0, r3
   29174:	46bd      	mov	sp, r7
   29176:	b00a      	add	sp, #40	; 0x28
   29178:	bdb0      	pop	{r4, r5, r7, pc}
   2917a:	46c0      	nop			; (mov r8, r8)
   2917c:	00027c61 	.word	0x00027c61
   29180:	0002a615 	.word	0x0002a615
   29184:	000277db 	.word	0x000277db
   29188:	00027859 	.word	0x00027859
   2918c:	00028e95 	.word	0x00028e95
   29190:	00028e55 	.word	0x00028e55

00029194 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29194:	b590      	push	{r4, r7, lr}
   29196:	b093      	sub	sp, #76	; 0x4c
   29198:	af00      	add	r7, sp, #0
   2919a:	60f8      	str	r0, [r7, #12]
   2919c:	60b9      	str	r1, [r7, #8]
   2919e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   291a0:	233b      	movs	r3, #59	; 0x3b
   291a2:	18fb      	adds	r3, r7, r3
   291a4:	2200      	movs	r2, #0
   291a6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   291a8:	68fb      	ldr	r3, [r7, #12]
   291aa:	68ba      	ldr	r2, [r7, #8]
   291ac:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   291ae:	68fb      	ldr	r3, [r7, #12]
   291b0:	681b      	ldr	r3, [r3, #0]
   291b2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   291b4:	68fb      	ldr	r3, [r7, #12]
   291b6:	681b      	ldr	r3, [r3, #0]
   291b8:	0018      	movs	r0, r3
   291ba:	4b86      	ldr	r3, [pc, #536]	; (293d4 <usart_init+0x240>)
   291bc:	4798      	blx	r3
   291be:	0003      	movs	r3, r0
   291c0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   291c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   291c4:	3302      	adds	r3, #2
   291c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   291c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   291ca:	3314      	adds	r3, #20
   291cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   291ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   291d0:	681b      	ldr	r3, [r3, #0]
   291d2:	2201      	movs	r2, #1
   291d4:	4013      	ands	r3, r2
   291d6:	d001      	beq.n	291dc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   291d8:	2305      	movs	r3, #5
   291da:	e0f6      	b.n	293ca <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   291dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   291de:	681b      	ldr	r3, [r3, #0]
   291e0:	2202      	movs	r2, #2
   291e2:	4013      	ands	r3, r2
   291e4:	d001      	beq.n	291ea <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   291e6:	231c      	movs	r3, #28
   291e8:	e0ef      	b.n	293ca <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   291ea:	2201      	movs	r2, #1
   291ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   291ee:	409a      	lsls	r2, r3
   291f0:	0013      	movs	r3, r2
   291f2:	0019      	movs	r1, r3
   291f4:	2002      	movs	r0, #2
   291f6:	4b78      	ldr	r3, [pc, #480]	; (293d8 <usart_init+0x244>)
   291f8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   291fa:	2324      	movs	r3, #36	; 0x24
   291fc:	18fb      	adds	r3, r7, r3
   291fe:	0018      	movs	r0, r3
   29200:	4b76      	ldr	r3, [pc, #472]	; (293dc <usart_init+0x248>)
   29202:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29204:	687b      	ldr	r3, [r7, #4]
   29206:	222d      	movs	r2, #45	; 0x2d
   29208:	5c9a      	ldrb	r2, [r3, r2]
   2920a:	2324      	movs	r3, #36	; 0x24
   2920c:	18fb      	adds	r3, r7, r3
   2920e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   29210:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29212:	b2db      	uxtb	r3, r3
   29214:	2224      	movs	r2, #36	; 0x24
   29216:	18ba      	adds	r2, r7, r2
   29218:	0011      	movs	r1, r2
   2921a:	0018      	movs	r0, r3
   2921c:	4b70      	ldr	r3, [pc, #448]	; (293e0 <usart_init+0x24c>)
   2921e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   29220:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29222:	b2db      	uxtb	r3, r3
   29224:	0018      	movs	r0, r3
   29226:	4b6f      	ldr	r3, [pc, #444]	; (293e4 <usart_init+0x250>)
   29228:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2922a:	687b      	ldr	r3, [r7, #4]
   2922c:	222d      	movs	r2, #45	; 0x2d
   2922e:	5c9b      	ldrb	r3, [r3, r2]
   29230:	2100      	movs	r1, #0
   29232:	0018      	movs	r0, r3
   29234:	4b6c      	ldr	r3, [pc, #432]	; (293e8 <usart_init+0x254>)
   29236:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29238:	687b      	ldr	r3, [r7, #4]
   2923a:	7ada      	ldrb	r2, [r3, #11]
   2923c:	68fb      	ldr	r3, [r7, #12]
   2923e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   29240:	687b      	ldr	r3, [r7, #4]
   29242:	2224      	movs	r2, #36	; 0x24
   29244:	5c9a      	ldrb	r2, [r3, r2]
   29246:	68fb      	ldr	r3, [r7, #12]
   29248:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2924a:	687b      	ldr	r3, [r7, #4]
   2924c:	2225      	movs	r2, #37	; 0x25
   2924e:	5c9a      	ldrb	r2, [r3, r2]
   29250:	68fb      	ldr	r3, [r7, #12]
   29252:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29254:	687b      	ldr	r3, [r7, #4]
   29256:	7eda      	ldrb	r2, [r3, #27]
   29258:	68fb      	ldr	r3, [r7, #12]
   2925a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2925c:	687b      	ldr	r3, [r7, #4]
   2925e:	7f1a      	ldrb	r2, [r3, #28]
   29260:	68fb      	ldr	r3, [r7, #12]
   29262:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29264:	233b      	movs	r3, #59	; 0x3b
   29266:	18fc      	adds	r4, r7, r3
   29268:	687a      	ldr	r2, [r7, #4]
   2926a:	68fb      	ldr	r3, [r7, #12]
   2926c:	0011      	movs	r1, r2
   2926e:	0018      	movs	r0, r3
   29270:	4b5e      	ldr	r3, [pc, #376]	; (293ec <usart_init+0x258>)
   29272:	4798      	blx	r3
   29274:	0003      	movs	r3, r0
   29276:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29278:	233b      	movs	r3, #59	; 0x3b
   2927a:	18fb      	adds	r3, r7, r3
   2927c:	781b      	ldrb	r3, [r3, #0]
   2927e:	2b00      	cmp	r3, #0
   29280:	d003      	beq.n	2928a <usart_init+0xf6>
		return status_code;
   29282:	233b      	movs	r3, #59	; 0x3b
   29284:	18fb      	adds	r3, r7, r3
   29286:	781b      	ldrb	r3, [r3, #0]
   29288:	e09f      	b.n	293ca <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2928a:	2320      	movs	r3, #32
   2928c:	18fb      	adds	r3, r7, r3
   2928e:	0018      	movs	r0, r3
   29290:	4b57      	ldr	r3, [pc, #348]	; (293f0 <usart_init+0x25c>)
   29292:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29294:	2320      	movs	r3, #32
   29296:	18fb      	adds	r3, r7, r3
   29298:	2200      	movs	r2, #0
   2929a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2929c:	2320      	movs	r3, #32
   2929e:	18fb      	adds	r3, r7, r3
   292a0:	2200      	movs	r2, #0
   292a2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   292a4:	687b      	ldr	r3, [r7, #4]
   292a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   292a8:	2310      	movs	r3, #16
   292aa:	18fb      	adds	r3, r7, r3
   292ac:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   292ae:	687b      	ldr	r3, [r7, #4]
   292b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   292b2:	2310      	movs	r3, #16
   292b4:	18fb      	adds	r3, r7, r3
   292b6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   292b8:	687b      	ldr	r3, [r7, #4]
   292ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   292bc:	2310      	movs	r3, #16
   292be:	18fb      	adds	r3, r7, r3
   292c0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   292c2:	687b      	ldr	r3, [r7, #4]
   292c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   292c6:	2310      	movs	r3, #16
   292c8:	18fb      	adds	r3, r7, r3
   292ca:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   292cc:	2347      	movs	r3, #71	; 0x47
   292ce:	18fb      	adds	r3, r7, r3
   292d0:	2200      	movs	r2, #0
   292d2:	701a      	strb	r2, [r3, #0]
   292d4:	e02c      	b.n	29330 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   292d6:	2347      	movs	r3, #71	; 0x47
   292d8:	18fb      	adds	r3, r7, r3
   292da:	781a      	ldrb	r2, [r3, #0]
   292dc:	2310      	movs	r3, #16
   292de:	18fb      	adds	r3, r7, r3
   292e0:	0092      	lsls	r2, r2, #2
   292e2:	58d3      	ldr	r3, [r2, r3]
   292e4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   292e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   292e8:	2b00      	cmp	r3, #0
   292ea:	d109      	bne.n	29300 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   292ec:	2347      	movs	r3, #71	; 0x47
   292ee:	18fb      	adds	r3, r7, r3
   292f0:	781a      	ldrb	r2, [r3, #0]
   292f2:	68bb      	ldr	r3, [r7, #8]
   292f4:	0011      	movs	r1, r2
   292f6:	0018      	movs	r0, r3
   292f8:	4b3e      	ldr	r3, [pc, #248]	; (293f4 <usart_init+0x260>)
   292fa:	4798      	blx	r3
   292fc:	0003      	movs	r3, r0
   292fe:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29302:	3301      	adds	r3, #1
   29304:	d00d      	beq.n	29322 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29308:	b2da      	uxtb	r2, r3
   2930a:	2320      	movs	r3, #32
   2930c:	18fb      	adds	r3, r7, r3
   2930e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29312:	0c1b      	lsrs	r3, r3, #16
   29314:	b2db      	uxtb	r3, r3
   29316:	2220      	movs	r2, #32
   29318:	18ba      	adds	r2, r7, r2
   2931a:	0011      	movs	r1, r2
   2931c:	0018      	movs	r0, r3
   2931e:	4b36      	ldr	r3, [pc, #216]	; (293f8 <usart_init+0x264>)
   29320:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29322:	2347      	movs	r3, #71	; 0x47
   29324:	18fb      	adds	r3, r7, r3
   29326:	781a      	ldrb	r2, [r3, #0]
   29328:	2347      	movs	r3, #71	; 0x47
   2932a:	18fb      	adds	r3, r7, r3
   2932c:	3201      	adds	r2, #1
   2932e:	701a      	strb	r2, [r3, #0]
   29330:	2347      	movs	r3, #71	; 0x47
   29332:	18fb      	adds	r3, r7, r3
   29334:	781b      	ldrb	r3, [r3, #0]
   29336:	2b03      	cmp	r3, #3
   29338:	d9cd      	bls.n	292d6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2933a:	2300      	movs	r3, #0
   2933c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2933e:	e00a      	b.n	29356 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   29340:	68fa      	ldr	r2, [r7, #12]
   29342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29344:	3302      	adds	r3, #2
   29346:	009b      	lsls	r3, r3, #2
   29348:	18d3      	adds	r3, r2, r3
   2934a:	3304      	adds	r3, #4
   2934c:	2200      	movs	r2, #0
   2934e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29352:	3301      	adds	r3, #1
   29354:	63fb      	str	r3, [r7, #60]	; 0x3c
   29356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29358:	2b05      	cmp	r3, #5
   2935a:	d9f1      	bls.n	29340 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2935c:	68fb      	ldr	r3, [r7, #12]
   2935e:	2200      	movs	r2, #0
   29360:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   29362:	68fb      	ldr	r3, [r7, #12]
   29364:	2200      	movs	r2, #0
   29366:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29368:	68fb      	ldr	r3, [r7, #12]
   2936a:	2200      	movs	r2, #0
   2936c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2936e:	68fb      	ldr	r3, [r7, #12]
   29370:	2200      	movs	r2, #0
   29372:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29374:	68fb      	ldr	r3, [r7, #12]
   29376:	2230      	movs	r2, #48	; 0x30
   29378:	2100      	movs	r1, #0
   2937a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2937c:	68fb      	ldr	r3, [r7, #12]
   2937e:	2231      	movs	r2, #49	; 0x31
   29380:	2100      	movs	r1, #0
   29382:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29384:	68fb      	ldr	r3, [r7, #12]
   29386:	2232      	movs	r2, #50	; 0x32
   29388:	2100      	movs	r1, #0
   2938a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2938c:	68fb      	ldr	r3, [r7, #12]
   2938e:	2233      	movs	r2, #51	; 0x33
   29390:	2100      	movs	r1, #0
   29392:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29394:	68fb      	ldr	r3, [r7, #12]
   29396:	681b      	ldr	r3, [r3, #0]
   29398:	2227      	movs	r2, #39	; 0x27
   2939a:	18bc      	adds	r4, r7, r2
   2939c:	0018      	movs	r0, r3
   2939e:	4b0d      	ldr	r3, [pc, #52]	; (293d4 <usart_init+0x240>)
   293a0:	4798      	blx	r3
   293a2:	0003      	movs	r3, r0
   293a4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   293a6:	4a15      	ldr	r2, [pc, #84]	; (293fc <usart_init+0x268>)
   293a8:	2327      	movs	r3, #39	; 0x27
   293aa:	18fb      	adds	r3, r7, r3
   293ac:	781b      	ldrb	r3, [r3, #0]
   293ae:	0011      	movs	r1, r2
   293b0:	0018      	movs	r0, r3
   293b2:	4b13      	ldr	r3, [pc, #76]	; (29400 <usart_init+0x26c>)
   293b4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   293b6:	2327      	movs	r3, #39	; 0x27
   293b8:	18fb      	adds	r3, r7, r3
   293ba:	781a      	ldrb	r2, [r3, #0]
   293bc:	4b11      	ldr	r3, [pc, #68]	; (29404 <usart_init+0x270>)
   293be:	0092      	lsls	r2, r2, #2
   293c0:	68f9      	ldr	r1, [r7, #12]
   293c2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   293c4:	233b      	movs	r3, #59	; 0x3b
   293c6:	18fb      	adds	r3, r7, r3
   293c8:	781b      	ldrb	r3, [r3, #0]
}
   293ca:	0018      	movs	r0, r3
   293cc:	46bd      	mov	sp, r7
   293ce:	b013      	add	sp, #76	; 0x4c
   293d0:	bd90      	pop	{r4, r7, pc}
   293d2:	46c0      	nop			; (mov r8, r8)
   293d4:	00027c61 	.word	0x00027c61
   293d8:	00028dd1 	.word	0x00028dd1
   293dc:	00028db9 	.word	0x00028db9
   293e0:	0002a4f1 	.word	0x0002a4f1
   293e4:	0002a535 	.word	0x0002a535
   293e8:	00027a19 	.word	0x00027a19
   293ec:	00028eb9 	.word	0x00028eb9
   293f0:	00028e2d 	.word	0x00028e2d
   293f4:	00027aa5 	.word	0x00027aa5
   293f8:	0002a851 	.word	0x0002a851
   293fc:	00029671 	.word	0x00029671
   29400:	00027cc5 	.word	0x00027cc5
   29404:	20005dd0 	.word	0x20005dd0

00029408 <system_interrupt_enter_critical_section>:
{
   29408:	b580      	push	{r7, lr}
   2940a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2940c:	4b02      	ldr	r3, [pc, #8]	; (29418 <system_interrupt_enter_critical_section+0x10>)
   2940e:	4798      	blx	r3
}
   29410:	46c0      	nop			; (mov r8, r8)
   29412:	46bd      	mov	sp, r7
   29414:	bd80      	pop	{r7, pc}
   29416:	46c0      	nop			; (mov r8, r8)
   29418:	0002685d 	.word	0x0002685d

0002941c <system_interrupt_leave_critical_section>:
{
   2941c:	b580      	push	{r7, lr}
   2941e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29420:	4b02      	ldr	r3, [pc, #8]	; (2942c <system_interrupt_leave_critical_section+0x10>)
   29422:	4798      	blx	r3
}
   29424:	46c0      	nop			; (mov r8, r8)
   29426:	46bd      	mov	sp, r7
   29428:	bd80      	pop	{r7, pc}
   2942a:	46c0      	nop			; (mov r8, r8)
   2942c:	000268b1 	.word	0x000268b1

00029430 <usart_is_syncing>:
{
   29430:	b580      	push	{r7, lr}
   29432:	b084      	sub	sp, #16
   29434:	af00      	add	r7, sp, #0
   29436:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29438:	687b      	ldr	r3, [r7, #4]
   2943a:	681b      	ldr	r3, [r3, #0]
   2943c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2943e:	68fb      	ldr	r3, [r7, #12]
   29440:	69db      	ldr	r3, [r3, #28]
   29442:	1e5a      	subs	r2, r3, #1
   29444:	4193      	sbcs	r3, r2
   29446:	b2db      	uxtb	r3, r3
}
   29448:	0018      	movs	r0, r3
   2944a:	46bd      	mov	sp, r7
   2944c:	b004      	add	sp, #16
   2944e:	bd80      	pop	{r7, pc}

00029450 <_usart_wait_for_sync>:
{
   29450:	b580      	push	{r7, lr}
   29452:	b082      	sub	sp, #8
   29454:	af00      	add	r7, sp, #0
   29456:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29458:	46c0      	nop			; (mov r8, r8)
   2945a:	687b      	ldr	r3, [r7, #4]
   2945c:	0018      	movs	r0, r3
   2945e:	4b04      	ldr	r3, [pc, #16]	; (29470 <_usart_wait_for_sync+0x20>)
   29460:	4798      	blx	r3
   29462:	1e03      	subs	r3, r0, #0
   29464:	d1f9      	bne.n	2945a <_usart_wait_for_sync+0xa>
}
   29466:	46c0      	nop			; (mov r8, r8)
   29468:	46bd      	mov	sp, r7
   2946a:	b002      	add	sp, #8
   2946c:	bd80      	pop	{r7, pc}
   2946e:	46c0      	nop			; (mov r8, r8)
   29470:	00029431 	.word	0x00029431

00029474 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29474:	b580      	push	{r7, lr}
   29476:	b086      	sub	sp, #24
   29478:	af00      	add	r7, sp, #0
   2947a:	60f8      	str	r0, [r7, #12]
   2947c:	60b9      	str	r1, [r7, #8]
   2947e:	1dbb      	adds	r3, r7, #6
   29480:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29482:	68fb      	ldr	r3, [r7, #12]
   29484:	681b      	ldr	r3, [r3, #0]
   29486:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29488:	4b0f      	ldr	r3, [pc, #60]	; (294c8 <_usart_write_buffer+0x54>)
   2948a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2948c:	68fb      	ldr	r3, [r7, #12]
   2948e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29490:	b29b      	uxth	r3, r3
   29492:	2b00      	cmp	r3, #0
   29494:	d003      	beq.n	2949e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29496:	4b0d      	ldr	r3, [pc, #52]	; (294cc <_usart_write_buffer+0x58>)
   29498:	4798      	blx	r3
		return STATUS_BUSY;
   2949a:	2305      	movs	r3, #5
   2949c:	e010      	b.n	294c0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2949e:	68fb      	ldr	r3, [r7, #12]
   294a0:	1dba      	adds	r2, r7, #6
   294a2:	8812      	ldrh	r2, [r2, #0]
   294a4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   294a6:	4b09      	ldr	r3, [pc, #36]	; (294cc <_usart_write_buffer+0x58>)
   294a8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   294aa:	68fb      	ldr	r3, [r7, #12]
   294ac:	68ba      	ldr	r2, [r7, #8]
   294ae:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   294b0:	68fb      	ldr	r3, [r7, #12]
   294b2:	2233      	movs	r2, #51	; 0x33
   294b4:	2105      	movs	r1, #5
   294b6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   294b8:	697b      	ldr	r3, [r7, #20]
   294ba:	2201      	movs	r2, #1
   294bc:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   294be:	2300      	movs	r3, #0
}
   294c0:	0018      	movs	r0, r3
   294c2:	46bd      	mov	sp, r7
   294c4:	b006      	add	sp, #24
   294c6:	bd80      	pop	{r7, pc}
   294c8:	00029409 	.word	0x00029409
   294cc:	0002941d 	.word	0x0002941d

000294d0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   294d0:	b580      	push	{r7, lr}
   294d2:	b086      	sub	sp, #24
   294d4:	af00      	add	r7, sp, #0
   294d6:	60f8      	str	r0, [r7, #12]
   294d8:	60b9      	str	r1, [r7, #8]
   294da:	1dbb      	adds	r3, r7, #6
   294dc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   294de:	68fb      	ldr	r3, [r7, #12]
   294e0:	681b      	ldr	r3, [r3, #0]
   294e2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   294e4:	4b16      	ldr	r3, [pc, #88]	; (29540 <_usart_read_buffer+0x70>)
   294e6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   294e8:	68fb      	ldr	r3, [r7, #12]
   294ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   294ec:	b29b      	uxth	r3, r3
   294ee:	2b00      	cmp	r3, #0
   294f0:	d003      	beq.n	294fa <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   294f2:	4b14      	ldr	r3, [pc, #80]	; (29544 <_usart_read_buffer+0x74>)
   294f4:	4798      	blx	r3
		return STATUS_BUSY;
   294f6:	2305      	movs	r3, #5
   294f8:	e01e      	b.n	29538 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   294fa:	68fb      	ldr	r3, [r7, #12]
   294fc:	1dba      	adds	r2, r7, #6
   294fe:	8812      	ldrh	r2, [r2, #0]
   29500:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29502:	4b10      	ldr	r3, [pc, #64]	; (29544 <_usart_read_buffer+0x74>)
   29504:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29506:	68fb      	ldr	r3, [r7, #12]
   29508:	68ba      	ldr	r2, [r7, #8]
   2950a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2950c:	68fb      	ldr	r3, [r7, #12]
   2950e:	2232      	movs	r2, #50	; 0x32
   29510:	2105      	movs	r1, #5
   29512:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29514:	697b      	ldr	r3, [r7, #20]
   29516:	2204      	movs	r2, #4
   29518:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2951a:	68fb      	ldr	r3, [r7, #12]
   2951c:	7a1b      	ldrb	r3, [r3, #8]
   2951e:	2b00      	cmp	r3, #0
   29520:	d002      	beq.n	29528 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29522:	697b      	ldr	r3, [r7, #20]
   29524:	2220      	movs	r2, #32
   29526:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29528:	68fb      	ldr	r3, [r7, #12]
   2952a:	7a5b      	ldrb	r3, [r3, #9]
   2952c:	2b00      	cmp	r3, #0
   2952e:	d002      	beq.n	29536 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29530:	697b      	ldr	r3, [r7, #20]
   29532:	2208      	movs	r2, #8
   29534:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29536:	2300      	movs	r3, #0
}
   29538:	0018      	movs	r0, r3
   2953a:	46bd      	mov	sp, r7
   2953c:	b006      	add	sp, #24
   2953e:	bd80      	pop	{r7, pc}
   29540:	00029409 	.word	0x00029409
   29544:	0002941d 	.word	0x0002941d

00029548 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29548:	b580      	push	{r7, lr}
   2954a:	b084      	sub	sp, #16
   2954c:	af00      	add	r7, sp, #0
   2954e:	60f8      	str	r0, [r7, #12]
   29550:	60b9      	str	r1, [r7, #8]
   29552:	1dfb      	adds	r3, r7, #7
   29554:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29556:	1dfb      	adds	r3, r7, #7
   29558:	781b      	ldrb	r3, [r3, #0]
   2955a:	68fa      	ldr	r2, [r7, #12]
   2955c:	3302      	adds	r3, #2
   2955e:	009b      	lsls	r3, r3, #2
   29560:	18d3      	adds	r3, r2, r3
   29562:	3304      	adds	r3, #4
   29564:	68ba      	ldr	r2, [r7, #8]
   29566:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29568:	68fb      	ldr	r3, [r7, #12]
   2956a:	2230      	movs	r2, #48	; 0x30
   2956c:	5c9b      	ldrb	r3, [r3, r2]
   2956e:	b25a      	sxtb	r2, r3
   29570:	1dfb      	adds	r3, r7, #7
   29572:	781b      	ldrb	r3, [r3, #0]
   29574:	2101      	movs	r1, #1
   29576:	4099      	lsls	r1, r3
   29578:	000b      	movs	r3, r1
   2957a:	b25b      	sxtb	r3, r3
   2957c:	4313      	orrs	r3, r2
   2957e:	b25b      	sxtb	r3, r3
   29580:	b2d9      	uxtb	r1, r3
   29582:	68fb      	ldr	r3, [r7, #12]
   29584:	2230      	movs	r2, #48	; 0x30
   29586:	5499      	strb	r1, [r3, r2]
}
   29588:	46c0      	nop			; (mov r8, r8)
   2958a:	46bd      	mov	sp, r7
   2958c:	b004      	add	sp, #16
   2958e:	bd80      	pop	{r7, pc}

00029590 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29590:	b580      	push	{r7, lr}
   29592:	b084      	sub	sp, #16
   29594:	af00      	add	r7, sp, #0
   29596:	60f8      	str	r0, [r7, #12]
   29598:	60b9      	str	r1, [r7, #8]
   2959a:	1dbb      	adds	r3, r7, #6
   2959c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2959e:	1dbb      	adds	r3, r7, #6
   295a0:	881b      	ldrh	r3, [r3, #0]
   295a2:	2b00      	cmp	r3, #0
   295a4:	d101      	bne.n	295aa <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   295a6:	2317      	movs	r3, #23
   295a8:	e010      	b.n	295cc <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   295aa:	68fb      	ldr	r3, [r7, #12]
   295ac:	79db      	ldrb	r3, [r3, #7]
   295ae:	2201      	movs	r2, #1
   295b0:	4053      	eors	r3, r2
   295b2:	b2db      	uxtb	r3, r3
   295b4:	2b00      	cmp	r3, #0
   295b6:	d001      	beq.n	295bc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   295b8:	231c      	movs	r3, #28
   295ba:	e007      	b.n	295cc <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   295bc:	1dbb      	adds	r3, r7, #6
   295be:	881a      	ldrh	r2, [r3, #0]
   295c0:	68b9      	ldr	r1, [r7, #8]
   295c2:	68fb      	ldr	r3, [r7, #12]
   295c4:	0018      	movs	r0, r3
   295c6:	4b03      	ldr	r3, [pc, #12]	; (295d4 <usart_write_buffer_job+0x44>)
   295c8:	4798      	blx	r3
   295ca:	0003      	movs	r3, r0
}
   295cc:	0018      	movs	r0, r3
   295ce:	46bd      	mov	sp, r7
   295d0:	b004      	add	sp, #16
   295d2:	bd80      	pop	{r7, pc}
   295d4:	00029475 	.word	0x00029475

000295d8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   295d8:	b580      	push	{r7, lr}
   295da:	b084      	sub	sp, #16
   295dc:	af00      	add	r7, sp, #0
   295de:	60f8      	str	r0, [r7, #12]
   295e0:	60b9      	str	r1, [r7, #8]
   295e2:	1dbb      	adds	r3, r7, #6
   295e4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   295e6:	1dbb      	adds	r3, r7, #6
   295e8:	881b      	ldrh	r3, [r3, #0]
   295ea:	2b00      	cmp	r3, #0
   295ec:	d101      	bne.n	295f2 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   295ee:	2317      	movs	r3, #23
   295f0:	e010      	b.n	29614 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   295f2:	68fb      	ldr	r3, [r7, #12]
   295f4:	799b      	ldrb	r3, [r3, #6]
   295f6:	2201      	movs	r2, #1
   295f8:	4053      	eors	r3, r2
   295fa:	b2db      	uxtb	r3, r3
   295fc:	2b00      	cmp	r3, #0
   295fe:	d001      	beq.n	29604 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29600:	231c      	movs	r3, #28
   29602:	e007      	b.n	29614 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29604:	1dbb      	adds	r3, r7, #6
   29606:	881a      	ldrh	r2, [r3, #0]
   29608:	68b9      	ldr	r1, [r7, #8]
   2960a:	68fb      	ldr	r3, [r7, #12]
   2960c:	0018      	movs	r0, r3
   2960e:	4b03      	ldr	r3, [pc, #12]	; (2961c <usart_read_buffer_job+0x44>)
   29610:	4798      	blx	r3
   29612:	0003      	movs	r3, r0
}
   29614:	0018      	movs	r0, r3
   29616:	46bd      	mov	sp, r7
   29618:	b004      	add	sp, #16
   2961a:	bd80      	pop	{r7, pc}
   2961c:	000294d1 	.word	0x000294d1

00029620 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29620:	b580      	push	{r7, lr}
   29622:	b084      	sub	sp, #16
   29624:	af00      	add	r7, sp, #0
   29626:	6078      	str	r0, [r7, #4]
   29628:	000a      	movs	r2, r1
   2962a:	1cfb      	adds	r3, r7, #3
   2962c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2962e:	1cfb      	adds	r3, r7, #3
   29630:	781b      	ldrb	r3, [r3, #0]
   29632:	2b00      	cmp	r3, #0
   29634:	d002      	beq.n	2963c <usart_get_job_status+0x1c>
   29636:	2b01      	cmp	r3, #1
   29638:	d007      	beq.n	2964a <usart_get_job_status+0x2a>
   2963a:	e00d      	b.n	29658 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2963c:	230f      	movs	r3, #15
   2963e:	18fb      	adds	r3, r7, r3
   29640:	687a      	ldr	r2, [r7, #4]
   29642:	2132      	movs	r1, #50	; 0x32
   29644:	5c52      	ldrb	r2, [r2, r1]
   29646:	701a      	strb	r2, [r3, #0]
			break;
   29648:	e00b      	b.n	29662 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2964a:	230f      	movs	r3, #15
   2964c:	18fb      	adds	r3, r7, r3
   2964e:	687a      	ldr	r2, [r7, #4]
   29650:	2133      	movs	r1, #51	; 0x33
   29652:	5c52      	ldrb	r2, [r2, r1]
   29654:	701a      	strb	r2, [r3, #0]
			break;
   29656:	e004      	b.n	29662 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29658:	230f      	movs	r3, #15
   2965a:	18fb      	adds	r3, r7, r3
   2965c:	2217      	movs	r2, #23
   2965e:	701a      	strb	r2, [r3, #0]
			break;
   29660:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29662:	230f      	movs	r3, #15
   29664:	18fb      	adds	r3, r7, r3
   29666:	781b      	ldrb	r3, [r3, #0]
}
   29668:	0018      	movs	r0, r3
   2966a:	46bd      	mov	sp, r7
   2966c:	b004      	add	sp, #16
   2966e:	bd80      	pop	{r7, pc}

00029670 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29670:	b580      	push	{r7, lr}
   29672:	b088      	sub	sp, #32
   29674:	af00      	add	r7, sp, #0
   29676:	0002      	movs	r2, r0
   29678:	1dfb      	adds	r3, r7, #7
   2967a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2967c:	1dfb      	adds	r3, r7, #7
   2967e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29680:	4ba3      	ldr	r3, [pc, #652]	; (29910 <_usart_interrupt_handler+0x2a0>)
   29682:	0092      	lsls	r2, r2, #2
   29684:	58d3      	ldr	r3, [r2, r3]
   29686:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29688:	69bb      	ldr	r3, [r7, #24]
   2968a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2968c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2968e:	69bb      	ldr	r3, [r7, #24]
   29690:	0018      	movs	r0, r3
   29692:	4ba0      	ldr	r3, [pc, #640]	; (29914 <_usart_interrupt_handler+0x2a4>)
   29694:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29696:	697b      	ldr	r3, [r7, #20]
   29698:	7e1b      	ldrb	r3, [r3, #24]
   2969a:	b2da      	uxtb	r2, r3
   2969c:	2312      	movs	r3, #18
   2969e:	18fb      	adds	r3, r7, r3
   296a0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   296a2:	697b      	ldr	r3, [r7, #20]
   296a4:	7d9b      	ldrb	r3, [r3, #22]
   296a6:	b2db      	uxtb	r3, r3
   296a8:	b29a      	uxth	r2, r3
   296aa:	2312      	movs	r3, #18
   296ac:	18fb      	adds	r3, r7, r3
   296ae:	2112      	movs	r1, #18
   296b0:	1879      	adds	r1, r7, r1
   296b2:	8809      	ldrh	r1, [r1, #0]
   296b4:	400a      	ands	r2, r1
   296b6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   296b8:	69bb      	ldr	r3, [r7, #24]
   296ba:	2230      	movs	r2, #48	; 0x30
   296bc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   296be:	69ba      	ldr	r2, [r7, #24]
   296c0:	2131      	movs	r1, #49	; 0x31
   296c2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   296c4:	4013      	ands	r3, r2
   296c6:	b2da      	uxtb	r2, r3
   296c8:	2310      	movs	r3, #16
   296ca:	18fb      	adds	r3, r7, r3
   296cc:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   296ce:	2312      	movs	r3, #18
   296d0:	18fb      	adds	r3, r7, r3
   296d2:	881b      	ldrh	r3, [r3, #0]
   296d4:	2201      	movs	r2, #1
   296d6:	4013      	ands	r3, r2
   296d8:	d044      	beq.n	29764 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   296da:	69bb      	ldr	r3, [r7, #24]
   296dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   296de:	b29b      	uxth	r3, r3
   296e0:	2b00      	cmp	r3, #0
   296e2:	d03c      	beq.n	2975e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   296e4:	69bb      	ldr	r3, [r7, #24]
   296e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   296e8:	781b      	ldrb	r3, [r3, #0]
   296ea:	b2da      	uxtb	r2, r3
   296ec:	231c      	movs	r3, #28
   296ee:	18fb      	adds	r3, r7, r3
   296f0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   296f2:	69bb      	ldr	r3, [r7, #24]
   296f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   296f6:	1c5a      	adds	r2, r3, #1
   296f8:	69bb      	ldr	r3, [r7, #24]
   296fa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   296fc:	69bb      	ldr	r3, [r7, #24]
   296fe:	795b      	ldrb	r3, [r3, #5]
   29700:	2b01      	cmp	r3, #1
   29702:	d113      	bne.n	2972c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29704:	69bb      	ldr	r3, [r7, #24]
   29706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29708:	781b      	ldrb	r3, [r3, #0]
   2970a:	b2db      	uxtb	r3, r3
   2970c:	021b      	lsls	r3, r3, #8
   2970e:	b21a      	sxth	r2, r3
   29710:	231c      	movs	r3, #28
   29712:	18fb      	adds	r3, r7, r3
   29714:	2100      	movs	r1, #0
   29716:	5e5b      	ldrsh	r3, [r3, r1]
   29718:	4313      	orrs	r3, r2
   2971a:	b21a      	sxth	r2, r3
   2971c:	231c      	movs	r3, #28
   2971e:	18fb      	adds	r3, r7, r3
   29720:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29722:	69bb      	ldr	r3, [r7, #24]
   29724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29726:	1c5a      	adds	r2, r3, #1
   29728:	69bb      	ldr	r3, [r7, #24]
   2972a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2972c:	231c      	movs	r3, #28
   2972e:	18fb      	adds	r3, r7, r3
   29730:	881b      	ldrh	r3, [r3, #0]
   29732:	05db      	lsls	r3, r3, #23
   29734:	0ddb      	lsrs	r3, r3, #23
   29736:	b29a      	uxth	r2, r3
   29738:	697b      	ldr	r3, [r7, #20]
   2973a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2973c:	69bb      	ldr	r3, [r7, #24]
   2973e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29740:	b29b      	uxth	r3, r3
   29742:	3b01      	subs	r3, #1
   29744:	b29b      	uxth	r3, r3
   29746:	69ba      	ldr	r2, [r7, #24]
   29748:	1c19      	adds	r1, r3, #0
   2974a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2974c:	2b00      	cmp	r3, #0
   2974e:	d109      	bne.n	29764 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29750:	697b      	ldr	r3, [r7, #20]
   29752:	2201      	movs	r2, #1
   29754:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29756:	697b      	ldr	r3, [r7, #20]
   29758:	2202      	movs	r2, #2
   2975a:	759a      	strb	r2, [r3, #22]
   2975c:	e002      	b.n	29764 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2975e:	697b      	ldr	r3, [r7, #20]
   29760:	2201      	movs	r2, #1
   29762:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29764:	2312      	movs	r3, #18
   29766:	18fb      	adds	r3, r7, r3
   29768:	881b      	ldrh	r3, [r3, #0]
   2976a:	2202      	movs	r2, #2
   2976c:	4013      	ands	r3, r2
   2976e:	d011      	beq.n	29794 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29770:	697b      	ldr	r3, [r7, #20]
   29772:	2202      	movs	r2, #2
   29774:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29776:	69bb      	ldr	r3, [r7, #24]
   29778:	2233      	movs	r2, #51	; 0x33
   2977a:	2100      	movs	r1, #0
   2977c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2977e:	2310      	movs	r3, #16
   29780:	18fb      	adds	r3, r7, r3
   29782:	881b      	ldrh	r3, [r3, #0]
   29784:	2201      	movs	r2, #1
   29786:	4013      	ands	r3, r2
   29788:	d004      	beq.n	29794 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2978a:	69bb      	ldr	r3, [r7, #24]
   2978c:	68db      	ldr	r3, [r3, #12]
   2978e:	69ba      	ldr	r2, [r7, #24]
   29790:	0010      	movs	r0, r2
   29792:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29794:	2312      	movs	r3, #18
   29796:	18fb      	adds	r3, r7, r3
   29798:	881b      	ldrh	r3, [r3, #0]
   2979a:	2204      	movs	r2, #4
   2979c:	4013      	ands	r3, r2
   2979e:	d100      	bne.n	297a2 <_usart_interrupt_handler+0x132>
   297a0:	e0bd      	b.n	2991e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   297a2:	69bb      	ldr	r3, [r7, #24]
   297a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   297a6:	b29b      	uxth	r3, r3
   297a8:	2b00      	cmp	r3, #0
   297aa:	d100      	bne.n	297ae <_usart_interrupt_handler+0x13e>
   297ac:	e0b4      	b.n	29918 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   297ae:	697b      	ldr	r3, [r7, #20]
   297b0:	8b5b      	ldrh	r3, [r3, #26]
   297b2:	b29b      	uxth	r3, r3
   297b4:	b2da      	uxtb	r2, r3
   297b6:	231f      	movs	r3, #31
   297b8:	18fb      	adds	r3, r7, r3
   297ba:	213f      	movs	r1, #63	; 0x3f
   297bc:	400a      	ands	r2, r1
   297be:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   297c0:	231f      	movs	r3, #31
   297c2:	18fb      	adds	r3, r7, r3
   297c4:	781b      	ldrb	r3, [r3, #0]
   297c6:	2208      	movs	r2, #8
   297c8:	4013      	ands	r3, r2
   297ca:	d007      	beq.n	297dc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   297cc:	231f      	movs	r3, #31
   297ce:	18fb      	adds	r3, r7, r3
   297d0:	221f      	movs	r2, #31
   297d2:	18ba      	adds	r2, r7, r2
   297d4:	7812      	ldrb	r2, [r2, #0]
   297d6:	2108      	movs	r1, #8
   297d8:	438a      	bics	r2, r1
   297da:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   297dc:	231f      	movs	r3, #31
   297de:	18fb      	adds	r3, r7, r3
   297e0:	781b      	ldrb	r3, [r3, #0]
   297e2:	2b00      	cmp	r3, #0
   297e4:	d050      	beq.n	29888 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   297e6:	231f      	movs	r3, #31
   297e8:	18fb      	adds	r3, r7, r3
   297ea:	781b      	ldrb	r3, [r3, #0]
   297ec:	2202      	movs	r2, #2
   297ee:	4013      	ands	r3, r2
   297f0:	d007      	beq.n	29802 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   297f2:	69bb      	ldr	r3, [r7, #24]
   297f4:	2232      	movs	r2, #50	; 0x32
   297f6:	211a      	movs	r1, #26
   297f8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   297fa:	697b      	ldr	r3, [r7, #20]
   297fc:	2202      	movs	r2, #2
   297fe:	835a      	strh	r2, [r3, #26]
   29800:	e036      	b.n	29870 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29802:	231f      	movs	r3, #31
   29804:	18fb      	adds	r3, r7, r3
   29806:	781b      	ldrb	r3, [r3, #0]
   29808:	2204      	movs	r2, #4
   2980a:	4013      	ands	r3, r2
   2980c:	d007      	beq.n	2981e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2980e:	69bb      	ldr	r3, [r7, #24]
   29810:	2232      	movs	r2, #50	; 0x32
   29812:	211e      	movs	r1, #30
   29814:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29816:	697b      	ldr	r3, [r7, #20]
   29818:	2204      	movs	r2, #4
   2981a:	835a      	strh	r2, [r3, #26]
   2981c:	e028      	b.n	29870 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2981e:	231f      	movs	r3, #31
   29820:	18fb      	adds	r3, r7, r3
   29822:	781b      	ldrb	r3, [r3, #0]
   29824:	2201      	movs	r2, #1
   29826:	4013      	ands	r3, r2
   29828:	d007      	beq.n	2983a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2982a:	69bb      	ldr	r3, [r7, #24]
   2982c:	2232      	movs	r2, #50	; 0x32
   2982e:	2113      	movs	r1, #19
   29830:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29832:	697b      	ldr	r3, [r7, #20]
   29834:	2201      	movs	r2, #1
   29836:	835a      	strh	r2, [r3, #26]
   29838:	e01a      	b.n	29870 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2983a:	231f      	movs	r3, #31
   2983c:	18fb      	adds	r3, r7, r3
   2983e:	781b      	ldrb	r3, [r3, #0]
   29840:	2210      	movs	r2, #16
   29842:	4013      	ands	r3, r2
   29844:	d007      	beq.n	29856 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29846:	69bb      	ldr	r3, [r7, #24]
   29848:	2232      	movs	r2, #50	; 0x32
   2984a:	2142      	movs	r1, #66	; 0x42
   2984c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2984e:	697b      	ldr	r3, [r7, #20]
   29850:	2210      	movs	r2, #16
   29852:	835a      	strh	r2, [r3, #26]
   29854:	e00c      	b.n	29870 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29856:	231f      	movs	r3, #31
   29858:	18fb      	adds	r3, r7, r3
   2985a:	781b      	ldrb	r3, [r3, #0]
   2985c:	2220      	movs	r2, #32
   2985e:	4013      	ands	r3, r2
   29860:	d006      	beq.n	29870 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29862:	69bb      	ldr	r3, [r7, #24]
   29864:	2232      	movs	r2, #50	; 0x32
   29866:	2141      	movs	r1, #65	; 0x41
   29868:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2986a:	697b      	ldr	r3, [r7, #20]
   2986c:	2220      	movs	r2, #32
   2986e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29870:	2310      	movs	r3, #16
   29872:	18fb      	adds	r3, r7, r3
   29874:	881b      	ldrh	r3, [r3, #0]
   29876:	2204      	movs	r2, #4
   29878:	4013      	ands	r3, r2
				if (callback_status
   2987a:	d050      	beq.n	2991e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2987c:	69bb      	ldr	r3, [r7, #24]
   2987e:	695b      	ldr	r3, [r3, #20]
   29880:	69ba      	ldr	r2, [r7, #24]
   29882:	0010      	movs	r0, r2
   29884:	4798      	blx	r3
   29886:	e04a      	b.n	2991e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29888:	697b      	ldr	r3, [r7, #20]
   2988a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2988c:	b29a      	uxth	r2, r3
   2988e:	230e      	movs	r3, #14
   29890:	18fb      	adds	r3, r7, r3
   29892:	05d2      	lsls	r2, r2, #23
   29894:	0dd2      	lsrs	r2, r2, #23
   29896:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29898:	69bb      	ldr	r3, [r7, #24]
   2989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2989c:	220e      	movs	r2, #14
   2989e:	18ba      	adds	r2, r7, r2
   298a0:	8812      	ldrh	r2, [r2, #0]
   298a2:	b2d2      	uxtb	r2, r2
   298a4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   298a6:	69bb      	ldr	r3, [r7, #24]
   298a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   298aa:	1c5a      	adds	r2, r3, #1
   298ac:	69bb      	ldr	r3, [r7, #24]
   298ae:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   298b0:	69bb      	ldr	r3, [r7, #24]
   298b2:	795b      	ldrb	r3, [r3, #5]
   298b4:	2b01      	cmp	r3, #1
   298b6:	d10d      	bne.n	298d4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   298b8:	69bb      	ldr	r3, [r7, #24]
   298ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   298bc:	220e      	movs	r2, #14
   298be:	18ba      	adds	r2, r7, r2
   298c0:	8812      	ldrh	r2, [r2, #0]
   298c2:	0a12      	lsrs	r2, r2, #8
   298c4:	b292      	uxth	r2, r2
   298c6:	b2d2      	uxtb	r2, r2
   298c8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   298ca:	69bb      	ldr	r3, [r7, #24]
   298cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   298ce:	1c5a      	adds	r2, r3, #1
   298d0:	69bb      	ldr	r3, [r7, #24]
   298d2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   298d4:	69bb      	ldr	r3, [r7, #24]
   298d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   298d8:	b29b      	uxth	r3, r3
   298da:	3b01      	subs	r3, #1
   298dc:	b29b      	uxth	r3, r3
   298de:	69ba      	ldr	r2, [r7, #24]
   298e0:	1c19      	adds	r1, r3, #0
   298e2:	8591      	strh	r1, [r2, #44]	; 0x2c
   298e4:	2b00      	cmp	r3, #0
   298e6:	d11a      	bne.n	2991e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   298e8:	697b      	ldr	r3, [r7, #20]
   298ea:	2204      	movs	r2, #4
   298ec:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   298ee:	69bb      	ldr	r3, [r7, #24]
   298f0:	2232      	movs	r2, #50	; 0x32
   298f2:	2100      	movs	r1, #0
   298f4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   298f6:	2310      	movs	r3, #16
   298f8:	18fb      	adds	r3, r7, r3
   298fa:	881b      	ldrh	r3, [r3, #0]
   298fc:	2202      	movs	r2, #2
   298fe:	4013      	ands	r3, r2
					if (callback_status
   29900:	d00d      	beq.n	2991e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29902:	69bb      	ldr	r3, [r7, #24]
   29904:	691b      	ldr	r3, [r3, #16]
   29906:	69ba      	ldr	r2, [r7, #24]
   29908:	0010      	movs	r0, r2
   2990a:	4798      	blx	r3
   2990c:	e007      	b.n	2991e <_usart_interrupt_handler+0x2ae>
   2990e:	46c0      	nop			; (mov r8, r8)
   29910:	20005dd0 	.word	0x20005dd0
   29914:	00029451 	.word	0x00029451
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29918:	697b      	ldr	r3, [r7, #20]
   2991a:	2204      	movs	r2, #4
   2991c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2991e:	2312      	movs	r3, #18
   29920:	18fb      	adds	r3, r7, r3
   29922:	881b      	ldrh	r3, [r3, #0]
   29924:	2210      	movs	r2, #16
   29926:	4013      	ands	r3, r2
   29928:	d010      	beq.n	2994c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2992a:	697b      	ldr	r3, [r7, #20]
   2992c:	2210      	movs	r2, #16
   2992e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29930:	697b      	ldr	r3, [r7, #20]
   29932:	2210      	movs	r2, #16
   29934:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29936:	2310      	movs	r3, #16
   29938:	18fb      	adds	r3, r7, r3
   2993a:	881b      	ldrh	r3, [r3, #0]
   2993c:	2210      	movs	r2, #16
   2993e:	4013      	ands	r3, r2
   29940:	d004      	beq.n	2994c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29942:	69bb      	ldr	r3, [r7, #24]
   29944:	69db      	ldr	r3, [r3, #28]
   29946:	69ba      	ldr	r2, [r7, #24]
   29948:	0010      	movs	r0, r2
   2994a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2994c:	2312      	movs	r3, #18
   2994e:	18fb      	adds	r3, r7, r3
   29950:	881b      	ldrh	r3, [r3, #0]
   29952:	2220      	movs	r2, #32
   29954:	4013      	ands	r3, r2
   29956:	d010      	beq.n	2997a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29958:	697b      	ldr	r3, [r7, #20]
   2995a:	2220      	movs	r2, #32
   2995c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2995e:	697b      	ldr	r3, [r7, #20]
   29960:	2220      	movs	r2, #32
   29962:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29964:	2310      	movs	r3, #16
   29966:	18fb      	adds	r3, r7, r3
   29968:	881b      	ldrh	r3, [r3, #0]
   2996a:	2208      	movs	r2, #8
   2996c:	4013      	ands	r3, r2
   2996e:	d004      	beq.n	2997a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29970:	69bb      	ldr	r3, [r7, #24]
   29972:	699b      	ldr	r3, [r3, #24]
   29974:	69ba      	ldr	r2, [r7, #24]
   29976:	0010      	movs	r0, r2
   29978:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2997a:	2312      	movs	r3, #18
   2997c:	18fb      	adds	r3, r7, r3
   2997e:	881b      	ldrh	r3, [r3, #0]
   29980:	2208      	movs	r2, #8
   29982:	4013      	ands	r3, r2
   29984:	d010      	beq.n	299a8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29986:	697b      	ldr	r3, [r7, #20]
   29988:	2208      	movs	r2, #8
   2998a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2998c:	697b      	ldr	r3, [r7, #20]
   2998e:	2208      	movs	r2, #8
   29990:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29992:	2310      	movs	r3, #16
   29994:	18fb      	adds	r3, r7, r3
   29996:	881b      	ldrh	r3, [r3, #0]
   29998:	2220      	movs	r2, #32
   2999a:	4013      	ands	r3, r2
   2999c:	d004      	beq.n	299a8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2999e:	69bb      	ldr	r3, [r7, #24]
   299a0:	6a1b      	ldr	r3, [r3, #32]
   299a2:	69ba      	ldr	r2, [r7, #24]
   299a4:	0010      	movs	r0, r2
   299a6:	4798      	blx	r3
		}
	}
#endif
}
   299a8:	46c0      	nop			; (mov r8, r8)
   299aa:	46bd      	mov	sp, r7
   299ac:	b008      	add	sp, #32
   299ae:	bd80      	pop	{r7, pc}

000299b0 <system_gclk_gen_get_config_defaults>:
{
   299b0:	b580      	push	{r7, lr}
   299b2:	b082      	sub	sp, #8
   299b4:	af00      	add	r7, sp, #0
   299b6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   299b8:	687b      	ldr	r3, [r7, #4]
   299ba:	2201      	movs	r2, #1
   299bc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   299be:	687b      	ldr	r3, [r7, #4]
   299c0:	2200      	movs	r2, #0
   299c2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   299c4:	687b      	ldr	r3, [r7, #4]
   299c6:	2206      	movs	r2, #6
   299c8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   299ca:	687b      	ldr	r3, [r7, #4]
   299cc:	2200      	movs	r2, #0
   299ce:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   299d0:	687b      	ldr	r3, [r7, #4]
   299d2:	2200      	movs	r2, #0
   299d4:	725a      	strb	r2, [r3, #9]
}
   299d6:	46c0      	nop			; (mov r8, r8)
   299d8:	46bd      	mov	sp, r7
   299da:	b002      	add	sp, #8
   299dc:	bd80      	pop	{r7, pc}

000299de <system_gclk_chan_get_config_defaults>:
{
   299de:	b580      	push	{r7, lr}
   299e0:	b082      	sub	sp, #8
   299e2:	af00      	add	r7, sp, #0
   299e4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   299e6:	687b      	ldr	r3, [r7, #4]
   299e8:	2200      	movs	r2, #0
   299ea:	701a      	strb	r2, [r3, #0]
}
   299ec:	46c0      	nop			; (mov r8, r8)
   299ee:	46bd      	mov	sp, r7
   299f0:	b002      	add	sp, #8
   299f2:	bd80      	pop	{r7, pc}

000299f4 <system_clock_source_osc8m_get_config_defaults>:
{
   299f4:	b580      	push	{r7, lr}
   299f6:	b082      	sub	sp, #8
   299f8:	af00      	add	r7, sp, #0
   299fa:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   299fc:	687b      	ldr	r3, [r7, #4]
   299fe:	2203      	movs	r2, #3
   29a00:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29a02:	687b      	ldr	r3, [r7, #4]
   29a04:	2200      	movs	r2, #0
   29a06:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29a08:	687b      	ldr	r3, [r7, #4]
   29a0a:	2201      	movs	r2, #1
   29a0c:	709a      	strb	r2, [r3, #2]
}
   29a0e:	46c0      	nop			; (mov r8, r8)
   29a10:	46bd      	mov	sp, r7
   29a12:	b002      	add	sp, #8
   29a14:	bd80      	pop	{r7, pc}
	...

00029a18 <system_cpu_clock_set_divider>:
{
   29a18:	b580      	push	{r7, lr}
   29a1a:	b082      	sub	sp, #8
   29a1c:	af00      	add	r7, sp, #0
   29a1e:	0002      	movs	r2, r0
   29a20:	1dfb      	adds	r3, r7, #7
   29a22:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29a24:	4a03      	ldr	r2, [pc, #12]	; (29a34 <system_cpu_clock_set_divider+0x1c>)
   29a26:	1dfb      	adds	r3, r7, #7
   29a28:	781b      	ldrb	r3, [r3, #0]
   29a2a:	7213      	strb	r3, [r2, #8]
}
   29a2c:	46c0      	nop			; (mov r8, r8)
   29a2e:	46bd      	mov	sp, r7
   29a30:	b002      	add	sp, #8
   29a32:	bd80      	pop	{r7, pc}
   29a34:	40000400 	.word	0x40000400

00029a38 <system_apb_clock_set_divider>:
{
   29a38:	b580      	push	{r7, lr}
   29a3a:	b082      	sub	sp, #8
   29a3c:	af00      	add	r7, sp, #0
   29a3e:	0002      	movs	r2, r0
   29a40:	1dfb      	adds	r3, r7, #7
   29a42:	701a      	strb	r2, [r3, #0]
   29a44:	1dbb      	adds	r3, r7, #6
   29a46:	1c0a      	adds	r2, r1, #0
   29a48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29a4a:	1dfb      	adds	r3, r7, #7
   29a4c:	781b      	ldrb	r3, [r3, #0]
   29a4e:	2b01      	cmp	r3, #1
   29a50:	d008      	beq.n	29a64 <system_apb_clock_set_divider+0x2c>
   29a52:	2b02      	cmp	r3, #2
   29a54:	d00b      	beq.n	29a6e <system_apb_clock_set_divider+0x36>
   29a56:	2b00      	cmp	r3, #0
   29a58:	d10e      	bne.n	29a78 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29a5a:	4a0b      	ldr	r2, [pc, #44]	; (29a88 <system_apb_clock_set_divider+0x50>)
   29a5c:	1dbb      	adds	r3, r7, #6
   29a5e:	781b      	ldrb	r3, [r3, #0]
   29a60:	7253      	strb	r3, [r2, #9]
			break;
   29a62:	e00b      	b.n	29a7c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29a64:	4a08      	ldr	r2, [pc, #32]	; (29a88 <system_apb_clock_set_divider+0x50>)
   29a66:	1dbb      	adds	r3, r7, #6
   29a68:	781b      	ldrb	r3, [r3, #0]
   29a6a:	7293      	strb	r3, [r2, #10]
			break;
   29a6c:	e006      	b.n	29a7c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29a6e:	4a06      	ldr	r2, [pc, #24]	; (29a88 <system_apb_clock_set_divider+0x50>)
   29a70:	1dbb      	adds	r3, r7, #6
   29a72:	781b      	ldrb	r3, [r3, #0]
   29a74:	72d3      	strb	r3, [r2, #11]
			break;
   29a76:	e001      	b.n	29a7c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29a78:	2317      	movs	r3, #23
   29a7a:	e000      	b.n	29a7e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29a7c:	2300      	movs	r3, #0
}
   29a7e:	0018      	movs	r0, r3
   29a80:	46bd      	mov	sp, r7
   29a82:	b002      	add	sp, #8
   29a84:	bd80      	pop	{r7, pc}
   29a86:	46c0      	nop			; (mov r8, r8)
   29a88:	40000400 	.word	0x40000400

00029a8c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29a8c:	b580      	push	{r7, lr}
   29a8e:	b082      	sub	sp, #8
   29a90:	af00      	add	r7, sp, #0
   29a92:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29a94:	687b      	ldr	r3, [r7, #4]
   29a96:	2201      	movs	r2, #1
   29a98:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29a9a:	687b      	ldr	r3, [r7, #4]
   29a9c:	2200      	movs	r2, #0
   29a9e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29aa0:	687b      	ldr	r3, [r7, #4]
   29aa2:	2200      	movs	r2, #0
   29aa4:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29aa6:	687b      	ldr	r3, [r7, #4]
   29aa8:	2200      	movs	r2, #0
   29aaa:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29aac:	687b      	ldr	r3, [r7, #4]
   29aae:	2200      	movs	r2, #0
   29ab0:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   29ab2:	687b      	ldr	r3, [r7, #4]
   29ab4:	4a0a      	ldr	r2, [pc, #40]	; (29ae0 <system_clock_source_dpll_get_config_defaults+0x54>)
   29ab6:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29ab8:	687b      	ldr	r3, [r7, #4]
   29aba:	2280      	movs	r2, #128	; 0x80
   29abc:	0212      	lsls	r2, r2, #8
   29abe:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29ac0:	687b      	ldr	r3, [r7, #4]
   29ac2:	2201      	movs	r2, #1
   29ac4:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   29ac6:	687b      	ldr	r3, [r7, #4]
   29ac8:	2200      	movs	r2, #0
   29aca:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29acc:	687b      	ldr	r3, [r7, #4]
   29ace:	2200      	movs	r2, #0
   29ad0:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   29ad2:	687b      	ldr	r3, [r7, #4]
   29ad4:	2200      	movs	r2, #0
   29ad6:	749a      	strb	r2, [r3, #18]
};
   29ad8:	46c0      	nop			; (mov r8, r8)
   29ada:	46bd      	mov	sp, r7
   29adc:	b002      	add	sp, #8
   29ade:	bd80      	pop	{r7, pc}
   29ae0:	02dc6c00 	.word	0x02dc6c00

00029ae4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   29ae4:	b580      	push	{r7, lr}
   29ae6:	b082      	sub	sp, #8
   29ae8:	af00      	add	r7, sp, #0
   29aea:	0002      	movs	r2, r0
   29aec:	1dfb      	adds	r3, r7, #7
   29aee:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   29af0:	4a08      	ldr	r2, [pc, #32]	; (29b14 <system_flash_set_waitstates+0x30>)
   29af2:	1dfb      	adds	r3, r7, #7
   29af4:	781b      	ldrb	r3, [r3, #0]
   29af6:	210f      	movs	r1, #15
   29af8:	400b      	ands	r3, r1
   29afa:	b2d9      	uxtb	r1, r3
   29afc:	6853      	ldr	r3, [r2, #4]
   29afe:	200f      	movs	r0, #15
   29b00:	4001      	ands	r1, r0
   29b02:	0049      	lsls	r1, r1, #1
   29b04:	201e      	movs	r0, #30
   29b06:	4383      	bics	r3, r0
   29b08:	430b      	orrs	r3, r1
   29b0a:	6053      	str	r3, [r2, #4]
}
   29b0c:	46c0      	nop			; (mov r8, r8)
   29b0e:	46bd      	mov	sp, r7
   29b10:	b002      	add	sp, #8
   29b12:	bd80      	pop	{r7, pc}
   29b14:	41004000 	.word	0x41004000

00029b18 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29b18:	b580      	push	{r7, lr}
   29b1a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29b1c:	46c0      	nop			; (mov r8, r8)
   29b1e:	4b04      	ldr	r3, [pc, #16]	; (29b30 <_system_dfll_wait_for_sync+0x18>)
   29b20:	68db      	ldr	r3, [r3, #12]
   29b22:	2210      	movs	r2, #16
   29b24:	4013      	ands	r3, r2
   29b26:	d0fa      	beq.n	29b1e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29b28:	46c0      	nop			; (mov r8, r8)
   29b2a:	46bd      	mov	sp, r7
   29b2c:	bd80      	pop	{r7, pc}
   29b2e:	46c0      	nop			; (mov r8, r8)
   29b30:	40000800 	.word	0x40000800

00029b34 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29b34:	b580      	push	{r7, lr}
   29b36:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29b38:	4b0c      	ldr	r3, [pc, #48]	; (29b6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29b3a:	2202      	movs	r2, #2
   29b3c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29b3e:	4b0c      	ldr	r3, [pc, #48]	; (29b70 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29b40:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   29b42:	4a0a      	ldr	r2, [pc, #40]	; (29b6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29b44:	4b0b      	ldr	r3, [pc, #44]	; (29b74 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29b46:	689b      	ldr	r3, [r3, #8]
   29b48:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   29b4a:	4a08      	ldr	r2, [pc, #32]	; (29b6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29b4c:	4b09      	ldr	r3, [pc, #36]	; (29b74 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29b4e:	685b      	ldr	r3, [r3, #4]
   29b50:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   29b52:	4b06      	ldr	r3, [pc, #24]	; (29b6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29b54:	2200      	movs	r2, #0
   29b56:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29b58:	4b05      	ldr	r3, [pc, #20]	; (29b70 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29b5a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   29b5c:	4a03      	ldr	r2, [pc, #12]	; (29b6c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29b5e:	4b05      	ldr	r3, [pc, #20]	; (29b74 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29b60:	681b      	ldr	r3, [r3, #0]
   29b62:	b29b      	uxth	r3, r3
   29b64:	8493      	strh	r3, [r2, #36]	; 0x24
}
   29b66:	46c0      	nop			; (mov r8, r8)
   29b68:	46bd      	mov	sp, r7
   29b6a:	bd80      	pop	{r7, pc}
   29b6c:	40000800 	.word	0x40000800
   29b70:	00029b19 	.word	0x00029b19
   29b74:	200042ec 	.word	0x200042ec

00029b78 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29b78:	b580      	push	{r7, lr}
   29b7a:	b082      	sub	sp, #8
   29b7c:	af00      	add	r7, sp, #0
   29b7e:	0002      	movs	r2, r0
   29b80:	1dfb      	adds	r3, r7, #7
   29b82:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29b84:	1dfb      	adds	r3, r7, #7
   29b86:	781b      	ldrb	r3, [r3, #0]
   29b88:	2b08      	cmp	r3, #8
   29b8a:	d841      	bhi.n	29c10 <system_clock_source_get_hz+0x98>
   29b8c:	009a      	lsls	r2, r3, #2
   29b8e:	4b23      	ldr	r3, [pc, #140]	; (29c1c <system_clock_source_get_hz+0xa4>)
   29b90:	18d3      	adds	r3, r2, r3
   29b92:	681b      	ldr	r3, [r3, #0]
   29b94:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   29b96:	4b22      	ldr	r3, [pc, #136]	; (29c20 <system_clock_source_get_hz+0xa8>)
   29b98:	691b      	ldr	r3, [r3, #16]
   29b9a:	e03a      	b.n	29c12 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   29b9c:	4b21      	ldr	r3, [pc, #132]	; (29c24 <system_clock_source_get_hz+0xac>)
   29b9e:	6a1b      	ldr	r3, [r3, #32]
   29ba0:	059b      	lsls	r3, r3, #22
   29ba2:	0f9b      	lsrs	r3, r3, #30
   29ba4:	b2db      	uxtb	r3, r3
   29ba6:	001a      	movs	r2, r3
   29ba8:	4b1f      	ldr	r3, [pc, #124]	; (29c28 <system_clock_source_get_hz+0xb0>)
   29baa:	40d3      	lsrs	r3, r2
   29bac:	e031      	b.n	29c12 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   29bae:	2380      	movs	r3, #128	; 0x80
   29bb0:	021b      	lsls	r3, r3, #8
   29bb2:	e02e      	b.n	29c12 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   29bb4:	2380      	movs	r3, #128	; 0x80
   29bb6:	021b      	lsls	r3, r3, #8
   29bb8:	e02b      	b.n	29c12 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   29bba:	4b19      	ldr	r3, [pc, #100]	; (29c20 <system_clock_source_get_hz+0xa8>)
   29bbc:	695b      	ldr	r3, [r3, #20]
   29bbe:	e028      	b.n	29c12 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   29bc0:	4b17      	ldr	r3, [pc, #92]	; (29c20 <system_clock_source_get_hz+0xa8>)
   29bc2:	681b      	ldr	r3, [r3, #0]
   29bc4:	2202      	movs	r2, #2
   29bc6:	4013      	ands	r3, r2
   29bc8:	d101      	bne.n	29bce <system_clock_source_get_hz+0x56>
			return 0;
   29bca:	2300      	movs	r3, #0
   29bcc:	e021      	b.n	29c12 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   29bce:	4b17      	ldr	r3, [pc, #92]	; (29c2c <system_clock_source_get_hz+0xb4>)
   29bd0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   29bd2:	4b13      	ldr	r3, [pc, #76]	; (29c20 <system_clock_source_get_hz+0xa8>)
   29bd4:	681b      	ldr	r3, [r3, #0]
   29bd6:	2224      	movs	r2, #36	; 0x24
   29bd8:	4013      	ands	r3, r2
   29bda:	2b04      	cmp	r3, #4
   29bdc:	d109      	bne.n	29bf2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   29bde:	2000      	movs	r0, #0
   29be0:	4b13      	ldr	r3, [pc, #76]	; (29c30 <system_clock_source_get_hz+0xb8>)
   29be2:	4798      	blx	r3
   29be4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   29be6:	4b0e      	ldr	r3, [pc, #56]	; (29c20 <system_clock_source_get_hz+0xa8>)
   29be8:	689b      	ldr	r3, [r3, #8]
   29bea:	041b      	lsls	r3, r3, #16
   29bec:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   29bee:	4353      	muls	r3, r2
   29bf0:	e00f      	b.n	29c12 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   29bf2:	4b10      	ldr	r3, [pc, #64]	; (29c34 <system_clock_source_get_hz+0xbc>)
   29bf4:	e00d      	b.n	29c12 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   29bf6:	4a0b      	ldr	r2, [pc, #44]	; (29c24 <system_clock_source_get_hz+0xac>)
   29bf8:	2350      	movs	r3, #80	; 0x50
   29bfa:	5cd3      	ldrb	r3, [r2, r3]
   29bfc:	b2db      	uxtb	r3, r3
   29bfe:	001a      	movs	r2, r3
   29c00:	2304      	movs	r3, #4
   29c02:	4013      	ands	r3, r2
   29c04:	d101      	bne.n	29c0a <system_clock_source_get_hz+0x92>
			return 0;
   29c06:	2300      	movs	r3, #0
   29c08:	e003      	b.n	29c12 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   29c0a:	4b05      	ldr	r3, [pc, #20]	; (29c20 <system_clock_source_get_hz+0xa8>)
   29c0c:	68db      	ldr	r3, [r3, #12]
   29c0e:	e000      	b.n	29c12 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   29c10:	2300      	movs	r3, #0
	}
}
   29c12:	0018      	movs	r0, r3
   29c14:	46bd      	mov	sp, r7
   29c16:	b002      	add	sp, #8
   29c18:	bd80      	pop	{r7, pc}
   29c1a:	46c0      	nop			; (mov r8, r8)
   29c1c:	0003bbf4 	.word	0x0003bbf4
   29c20:	200042ec 	.word	0x200042ec
   29c24:	40000800 	.word	0x40000800
   29c28:	007a1200 	.word	0x007a1200
   29c2c:	00029b19 	.word	0x00029b19
   29c30:	0002a615 	.word	0x0002a615
   29c34:	02dc6c00 	.word	0x02dc6c00

00029c38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29c38:	b580      	push	{r7, lr}
   29c3a:	b084      	sub	sp, #16
   29c3c:	af00      	add	r7, sp, #0
   29c3e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   29c40:	4b1a      	ldr	r3, [pc, #104]	; (29cac <system_clock_source_osc8m_set_config+0x74>)
   29c42:	6a1b      	ldr	r3, [r3, #32]
   29c44:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   29c46:	687b      	ldr	r3, [r7, #4]
   29c48:	781b      	ldrb	r3, [r3, #0]
   29c4a:	1c1a      	adds	r2, r3, #0
   29c4c:	2303      	movs	r3, #3
   29c4e:	4013      	ands	r3, r2
   29c50:	b2da      	uxtb	r2, r3
   29c52:	230d      	movs	r3, #13
   29c54:	18fb      	adds	r3, r7, r3
   29c56:	2103      	movs	r1, #3
   29c58:	400a      	ands	r2, r1
   29c5a:	0010      	movs	r0, r2
   29c5c:	781a      	ldrb	r2, [r3, #0]
   29c5e:	2103      	movs	r1, #3
   29c60:	438a      	bics	r2, r1
   29c62:	1c11      	adds	r1, r2, #0
   29c64:	1c02      	adds	r2, r0, #0
   29c66:	430a      	orrs	r2, r1
   29c68:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   29c6a:	687b      	ldr	r3, [r7, #4]
   29c6c:	789a      	ldrb	r2, [r3, #2]
   29c6e:	230c      	movs	r3, #12
   29c70:	18fb      	adds	r3, r7, r3
   29c72:	01d0      	lsls	r0, r2, #7
   29c74:	781a      	ldrb	r2, [r3, #0]
   29c76:	217f      	movs	r1, #127	; 0x7f
   29c78:	400a      	ands	r2, r1
   29c7a:	1c11      	adds	r1, r2, #0
   29c7c:	1c02      	adds	r2, r0, #0
   29c7e:	430a      	orrs	r2, r1
   29c80:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   29c82:	687b      	ldr	r3, [r7, #4]
   29c84:	785a      	ldrb	r2, [r3, #1]
   29c86:	230c      	movs	r3, #12
   29c88:	18fb      	adds	r3, r7, r3
   29c8a:	2101      	movs	r1, #1
   29c8c:	400a      	ands	r2, r1
   29c8e:	0190      	lsls	r0, r2, #6
   29c90:	781a      	ldrb	r2, [r3, #0]
   29c92:	2140      	movs	r1, #64	; 0x40
   29c94:	438a      	bics	r2, r1
   29c96:	1c11      	adds	r1, r2, #0
   29c98:	1c02      	adds	r2, r0, #0
   29c9a:	430a      	orrs	r2, r1
   29c9c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   29c9e:	4b03      	ldr	r3, [pc, #12]	; (29cac <system_clock_source_osc8m_set_config+0x74>)
   29ca0:	68fa      	ldr	r2, [r7, #12]
   29ca2:	621a      	str	r2, [r3, #32]
}
   29ca4:	46c0      	nop			; (mov r8, r8)
   29ca6:	46bd      	mov	sp, r7
   29ca8:	b004      	add	sp, #16
   29caa:	bd80      	pop	{r7, pc}
   29cac:	40000800 	.word	0x40000800

00029cb0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   29cb0:	b580      	push	{r7, lr}
   29cb2:	b086      	sub	sp, #24
   29cb4:	af00      	add	r7, sp, #0
   29cb6:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29cb8:	687b      	ldr	r3, [r7, #4]
   29cba:	68db      	ldr	r3, [r3, #12]
   29cbc:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   29cbe:	687b      	ldr	r3, [r7, #4]
   29cc0:	7d1b      	ldrb	r3, [r3, #20]
   29cc2:	2b01      	cmp	r3, #1
   29cc4:	d10a      	bne.n	29cdc <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   29cc6:	687b      	ldr	r3, [r7, #4]
   29cc8:	8a1b      	ldrh	r3, [r3, #16]
   29cca:	3301      	adds	r3, #1
   29ccc:	005b      	lsls	r3, r3, #1
   29cce:	001a      	movs	r2, r3
   29cd0:	4b36      	ldr	r3, [pc, #216]	; (29dac <system_clock_source_dpll_set_config+0xfc>)
   29cd2:	0011      	movs	r1, r2
   29cd4:	6978      	ldr	r0, [r7, #20]
   29cd6:	4798      	blx	r3
   29cd8:	0003      	movs	r3, r0
   29cda:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29cdc:	687b      	ldr	r3, [r7, #4]
   29cde:	689b      	ldr	r3, [r3, #8]
   29ce0:	011a      	lsls	r2, r3, #4
   29ce2:	4b32      	ldr	r3, [pc, #200]	; (29dac <system_clock_source_dpll_set_config+0xfc>)
   29ce4:	6979      	ldr	r1, [r7, #20]
   29ce6:	0010      	movs	r0, r2
   29ce8:	4798      	blx	r3
   29cea:	0003      	movs	r3, r0
   29cec:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   29cee:	693b      	ldr	r3, [r7, #16]
   29cf0:	b2da      	uxtb	r2, r3
   29cf2:	230f      	movs	r3, #15
   29cf4:	18fb      	adds	r3, r7, r3
   29cf6:	210f      	movs	r1, #15
   29cf8:	400a      	ands	r2, r1
   29cfa:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29cfc:	693b      	ldr	r3, [r7, #16]
   29cfe:	091b      	lsrs	r3, r3, #4
   29d00:	3b01      	subs	r3, #1
   29d02:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29d04:	492a      	ldr	r1, [pc, #168]	; (29db0 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29d06:	687b      	ldr	r3, [r7, #4]
   29d08:	781b      	ldrb	r3, [r3, #0]
   29d0a:	01db      	lsls	r3, r3, #7
   29d0c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   29d0e:	687b      	ldr	r3, [r7, #4]
   29d10:	785b      	ldrb	r3, [r3, #1]
   29d12:	019b      	lsls	r3, r3, #6
   29d14:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29d16:	4313      	orrs	r3, r2
   29d18:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29d1a:	2344      	movs	r3, #68	; 0x44
   29d1c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   29d1e:	4b24      	ldr	r3, [pc, #144]	; (29db0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29d20:	220f      	movs	r2, #15
   29d22:	18ba      	adds	r2, r7, r2
   29d24:	7812      	ldrb	r2, [r2, #0]
   29d26:	0412      	lsls	r2, r2, #16
   29d28:	0011      	movs	r1, r2
   29d2a:	22f0      	movs	r2, #240	; 0xf0
   29d2c:	0312      	lsls	r2, r2, #12
   29d2e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   29d30:	693a      	ldr	r2, [r7, #16]
   29d32:	0512      	lsls	r2, r2, #20
   29d34:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29d36:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29d38:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29d3a:	4b1d      	ldr	r3, [pc, #116]	; (29db0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29d3c:	687a      	ldr	r2, [r7, #4]
   29d3e:	8a12      	ldrh	r2, [r2, #16]
   29d40:	0412      	lsls	r2, r2, #16
   29d42:	0011      	movs	r1, r2
   29d44:	4a1b      	ldr	r2, [pc, #108]	; (29db4 <system_clock_source_dpll_set_config+0x104>)
   29d46:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29d48:	687a      	ldr	r2, [r7, #4]
   29d4a:	7892      	ldrb	r2, [r2, #2]
   29d4c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29d4e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29d50:	687a      	ldr	r2, [r7, #4]
   29d52:	7cd2      	ldrb	r2, [r2, #19]
   29d54:	0212      	lsls	r2, r2, #8
   29d56:	0010      	movs	r0, r2
   29d58:	22e0      	movs	r2, #224	; 0xe0
   29d5a:	00d2      	lsls	r2, r2, #3
   29d5c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29d5e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29d60:	687a      	ldr	r2, [r7, #4]
   29d62:	7d12      	ldrb	r2, [r2, #20]
   29d64:	0112      	lsls	r2, r2, #4
   29d66:	0010      	movs	r0, r2
   29d68:	2230      	movs	r2, #48	; 0x30
   29d6a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29d6c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29d6e:	687a      	ldr	r2, [r7, #4]
   29d70:	78d2      	ldrb	r2, [r2, #3]
   29d72:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29d74:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29d76:	687a      	ldr	r2, [r7, #4]
   29d78:	7912      	ldrb	r2, [r2, #4]
   29d7a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29d7c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   29d7e:	687a      	ldr	r2, [r7, #4]
   29d80:	7c92      	ldrb	r2, [r2, #18]
   29d82:	0010      	movs	r0, r2
   29d84:	2203      	movs	r2, #3
   29d86:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29d88:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29d8a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29d8c:	693b      	ldr	r3, [r7, #16]
   29d8e:	3301      	adds	r3, #1
   29d90:	011a      	lsls	r2, r3, #4
   29d92:	230f      	movs	r3, #15
   29d94:	18fb      	adds	r3, r7, r3
   29d96:	781b      	ldrb	r3, [r3, #0]
   29d98:	18d3      	adds	r3, r2, r3
   29d9a:	697a      	ldr	r2, [r7, #20]
   29d9c:	4353      	muls	r3, r2
   29d9e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29da0:	4b05      	ldr	r3, [pc, #20]	; (29db8 <system_clock_source_dpll_set_config+0x108>)
   29da2:	60da      	str	r2, [r3, #12]
}
   29da4:	46c0      	nop			; (mov r8, r8)
   29da6:	46bd      	mov	sp, r7
   29da8:	b006      	add	sp, #24
   29daa:	bd80      	pop	{r7, pc}
   29dac:	00033035 	.word	0x00033035
   29db0:	40000800 	.word	0x40000800
   29db4:	07ff0000 	.word	0x07ff0000
   29db8:	200042ec 	.word	0x200042ec

00029dbc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29dbc:	b580      	push	{r7, lr}
   29dbe:	b082      	sub	sp, #8
   29dc0:	af00      	add	r7, sp, #0
   29dc2:	0002      	movs	r2, r0
   29dc4:	1dfb      	adds	r3, r7, #7
   29dc6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29dc8:	1dfb      	adds	r3, r7, #7
   29dca:	781b      	ldrb	r3, [r3, #0]
   29dcc:	2b08      	cmp	r3, #8
   29dce:	d83b      	bhi.n	29e48 <system_clock_source_enable+0x8c>
   29dd0:	009a      	lsls	r2, r3, #2
   29dd2:	4b21      	ldr	r3, [pc, #132]	; (29e58 <system_clock_source_enable+0x9c>)
   29dd4:	18d3      	adds	r3, r2, r3
   29dd6:	681b      	ldr	r3, [r3, #0]
   29dd8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29dda:	4b20      	ldr	r3, [pc, #128]	; (29e5c <system_clock_source_enable+0xa0>)
   29ddc:	4a1f      	ldr	r2, [pc, #124]	; (29e5c <system_clock_source_enable+0xa0>)
   29dde:	6a12      	ldr	r2, [r2, #32]
   29de0:	2102      	movs	r1, #2
   29de2:	430a      	orrs	r2, r1
   29de4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   29de6:	2300      	movs	r3, #0
   29de8:	e031      	b.n	29e4e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29dea:	4b1c      	ldr	r3, [pc, #112]	; (29e5c <system_clock_source_enable+0xa0>)
   29dec:	4a1b      	ldr	r2, [pc, #108]	; (29e5c <system_clock_source_enable+0xa0>)
   29dee:	6992      	ldr	r2, [r2, #24]
   29df0:	2102      	movs	r1, #2
   29df2:	430a      	orrs	r2, r1
   29df4:	619a      	str	r2, [r3, #24]
		break;
   29df6:	e029      	b.n	29e4c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29df8:	4a18      	ldr	r2, [pc, #96]	; (29e5c <system_clock_source_enable+0xa0>)
   29dfa:	4b18      	ldr	r3, [pc, #96]	; (29e5c <system_clock_source_enable+0xa0>)
   29dfc:	8a1b      	ldrh	r3, [r3, #16]
   29dfe:	b29b      	uxth	r3, r3
   29e00:	2102      	movs	r1, #2
   29e02:	430b      	orrs	r3, r1
   29e04:	b29b      	uxth	r3, r3
   29e06:	8213      	strh	r3, [r2, #16]
		break;
   29e08:	e020      	b.n	29e4c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29e0a:	4a14      	ldr	r2, [pc, #80]	; (29e5c <system_clock_source_enable+0xa0>)
   29e0c:	4b13      	ldr	r3, [pc, #76]	; (29e5c <system_clock_source_enable+0xa0>)
   29e0e:	8a9b      	ldrh	r3, [r3, #20]
   29e10:	b29b      	uxth	r3, r3
   29e12:	2102      	movs	r1, #2
   29e14:	430b      	orrs	r3, r1
   29e16:	b29b      	uxth	r3, r3
   29e18:	8293      	strh	r3, [r2, #20]
		break;
   29e1a:	e017      	b.n	29e4c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29e1c:	4b10      	ldr	r3, [pc, #64]	; (29e60 <system_clock_source_enable+0xa4>)
   29e1e:	681b      	ldr	r3, [r3, #0]
   29e20:	2202      	movs	r2, #2
   29e22:	431a      	orrs	r2, r3
   29e24:	4b0e      	ldr	r3, [pc, #56]	; (29e60 <system_clock_source_enable+0xa4>)
   29e26:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29e28:	4b0e      	ldr	r3, [pc, #56]	; (29e64 <system_clock_source_enable+0xa8>)
   29e2a:	4798      	blx	r3
		break;
   29e2c:	e00e      	b.n	29e4c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29e2e:	4a0b      	ldr	r2, [pc, #44]	; (29e5c <system_clock_source_enable+0xa0>)
   29e30:	490a      	ldr	r1, [pc, #40]	; (29e5c <system_clock_source_enable+0xa0>)
   29e32:	2344      	movs	r3, #68	; 0x44
   29e34:	5ccb      	ldrb	r3, [r1, r3]
   29e36:	b2db      	uxtb	r3, r3
   29e38:	2102      	movs	r1, #2
   29e3a:	430b      	orrs	r3, r1
   29e3c:	b2d9      	uxtb	r1, r3
   29e3e:	2344      	movs	r3, #68	; 0x44
   29e40:	54d1      	strb	r1, [r2, r3]
		break;
   29e42:	e003      	b.n	29e4c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   29e44:	2300      	movs	r3, #0
   29e46:	e002      	b.n	29e4e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29e48:	2317      	movs	r3, #23
   29e4a:	e000      	b.n	29e4e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29e4c:	2300      	movs	r3, #0
}
   29e4e:	0018      	movs	r0, r3
   29e50:	46bd      	mov	sp, r7
   29e52:	b002      	add	sp, #8
   29e54:	bd80      	pop	{r7, pc}
   29e56:	46c0      	nop			; (mov r8, r8)
   29e58:	0003bc18 	.word	0x0003bc18
   29e5c:	40000800 	.word	0x40000800
   29e60:	200042ec 	.word	0x200042ec
   29e64:	00029b35 	.word	0x00029b35

00029e68 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29e68:	b580      	push	{r7, lr}
   29e6a:	b084      	sub	sp, #16
   29e6c:	af00      	add	r7, sp, #0
   29e6e:	0002      	movs	r2, r0
   29e70:	1dfb      	adds	r3, r7, #7
   29e72:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   29e74:	2300      	movs	r3, #0
   29e76:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29e78:	1dfb      	adds	r3, r7, #7
   29e7a:	781b      	ldrb	r3, [r3, #0]
   29e7c:	2b08      	cmp	r3, #8
   29e7e:	d821      	bhi.n	29ec4 <system_clock_source_is_ready+0x5c>
   29e80:	009a      	lsls	r2, r3, #2
   29e82:	4b18      	ldr	r3, [pc, #96]	; (29ee4 <system_clock_source_is_ready+0x7c>)
   29e84:	18d3      	adds	r3, r2, r3
   29e86:	681b      	ldr	r3, [r3, #0]
   29e88:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29e8a:	2308      	movs	r3, #8
   29e8c:	60fb      	str	r3, [r7, #12]
		break;
   29e8e:	e01b      	b.n	29ec8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29e90:	2304      	movs	r3, #4
   29e92:	60fb      	str	r3, [r7, #12]
		break;
   29e94:	e018      	b.n	29ec8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29e96:	2301      	movs	r3, #1
   29e98:	60fb      	str	r3, [r7, #12]
		break;
   29e9a:	e015      	b.n	29ec8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29e9c:	2302      	movs	r3, #2
   29e9e:	60fb      	str	r3, [r7, #12]
		break;
   29ea0:	e012      	b.n	29ec8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   29ea2:	2310      	movs	r3, #16
   29ea4:	60fb      	str	r3, [r7, #12]
		}
		break;
   29ea6:	e00f      	b.n	29ec8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29ea8:	4a0f      	ldr	r2, [pc, #60]	; (29ee8 <system_clock_source_is_ready+0x80>)
   29eaa:	2350      	movs	r3, #80	; 0x50
   29eac:	5cd3      	ldrb	r3, [r2, r3]
   29eae:	b2db      	uxtb	r3, r3
   29eb0:	001a      	movs	r2, r3
   29eb2:	2303      	movs	r3, #3
   29eb4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29eb6:	3b03      	subs	r3, #3
   29eb8:	425a      	negs	r2, r3
   29eba:	4153      	adcs	r3, r2
   29ebc:	b2db      	uxtb	r3, r3
   29ebe:	e00c      	b.n	29eda <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29ec0:	2301      	movs	r3, #1
   29ec2:	e00a      	b.n	29eda <system_clock_source_is_ready+0x72>

	default:
		return false;
   29ec4:	2300      	movs	r3, #0
   29ec6:	e008      	b.n	29eda <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29ec8:	4b07      	ldr	r3, [pc, #28]	; (29ee8 <system_clock_source_is_ready+0x80>)
   29eca:	68db      	ldr	r3, [r3, #12]
   29ecc:	68fa      	ldr	r2, [r7, #12]
   29ece:	401a      	ands	r2, r3
   29ed0:	68fb      	ldr	r3, [r7, #12]
   29ed2:	1ad3      	subs	r3, r2, r3
   29ed4:	425a      	negs	r2, r3
   29ed6:	4153      	adcs	r3, r2
   29ed8:	b2db      	uxtb	r3, r3
}
   29eda:	0018      	movs	r0, r3
   29edc:	46bd      	mov	sp, r7
   29ede:	b004      	add	sp, #16
   29ee0:	bd80      	pop	{r7, pc}
   29ee2:	46c0      	nop			; (mov r8, r8)
   29ee4:	0003bc3c 	.word	0x0003bc3c
   29ee8:	40000800 	.word	0x40000800

00029eec <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29eec:	b580      	push	{r7, lr}
   29eee:	b082      	sub	sp, #8
   29ef0:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   29ef2:	003b      	movs	r3, r7
   29ef4:	2203      	movs	r2, #3
   29ef6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29ef8:	2300      	movs	r3, #0
   29efa:	607b      	str	r3, [r7, #4]
   29efc:	e009      	b.n	29f12 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29efe:	687b      	ldr	r3, [r7, #4]
   29f00:	b2db      	uxtb	r3, r3
   29f02:	003a      	movs	r2, r7
   29f04:	0011      	movs	r1, r2
   29f06:	0018      	movs	r0, r3
   29f08:	4b05      	ldr	r3, [pc, #20]	; (29f20 <_switch_peripheral_gclk+0x34>)
   29f0a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29f0c:	687b      	ldr	r3, [r7, #4]
   29f0e:	3301      	adds	r3, #1
   29f10:	607b      	str	r3, [r7, #4]
   29f12:	687b      	ldr	r3, [r7, #4]
   29f14:	2b24      	cmp	r3, #36	; 0x24
   29f16:	d9f2      	bls.n	29efe <_switch_peripheral_gclk+0x12>
	}
}
   29f18:	46c0      	nop			; (mov r8, r8)
   29f1a:	46bd      	mov	sp, r7
   29f1c:	b002      	add	sp, #8
   29f1e:	bd80      	pop	{r7, pc}
   29f20:	0002a4f1 	.word	0x0002a4f1

00029f24 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   29f24:	b580      	push	{r7, lr}
   29f26:	b0a6      	sub	sp, #152	; 0x98
   29f28:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29f2a:	4b92      	ldr	r3, [pc, #584]	; (2a174 <system_clock_init+0x250>)
   29f2c:	22c2      	movs	r2, #194	; 0xc2
   29f2e:	00d2      	lsls	r2, r2, #3
   29f30:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   29f32:	2003      	movs	r0, #3
   29f34:	4b90      	ldr	r3, [pc, #576]	; (2a178 <system_clock_init+0x254>)
   29f36:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29f38:	4b90      	ldr	r3, [pc, #576]	; (2a17c <system_clock_init+0x258>)
   29f3a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29f3c:	2394      	movs	r3, #148	; 0x94
   29f3e:	18fb      	adds	r3, r7, r3
   29f40:	0018      	movs	r0, r3
   29f42:	4b8f      	ldr	r3, [pc, #572]	; (2a180 <system_clock_init+0x25c>)
   29f44:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   29f46:	2394      	movs	r3, #148	; 0x94
   29f48:	18fb      	adds	r3, r7, r3
   29f4a:	2200      	movs	r2, #0
   29f4c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29f4e:	2394      	movs	r3, #148	; 0x94
   29f50:	18fb      	adds	r3, r7, r3
   29f52:	2201      	movs	r2, #1
   29f54:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   29f56:	2394      	movs	r3, #148	; 0x94
   29f58:	18fb      	adds	r3, r7, r3
   29f5a:	2200      	movs	r2, #0
   29f5c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   29f5e:	2394      	movs	r3, #148	; 0x94
   29f60:	18fb      	adds	r3, r7, r3
   29f62:	0018      	movs	r0, r3
   29f64:	4b87      	ldr	r3, [pc, #540]	; (2a184 <system_clock_init+0x260>)
   29f66:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29f68:	2006      	movs	r0, #6
   29f6a:	4b87      	ldr	r3, [pc, #540]	; (2a188 <system_clock_init+0x264>)
   29f6c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   29f6e:	4b87      	ldr	r3, [pc, #540]	; (2a18c <system_clock_init+0x268>)
   29f70:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   29f72:	2360      	movs	r3, #96	; 0x60
   29f74:	18fb      	adds	r3, r7, r3
   29f76:	0018      	movs	r0, r3
   29f78:	4b85      	ldr	r3, [pc, #532]	; (2a190 <system_clock_init+0x26c>)
   29f7a:	4798      	blx	r3
   29f7c:	2360      	movs	r3, #96	; 0x60
   29f7e:	18fb      	adds	r3, r7, r3
   29f80:	2206      	movs	r2, #6
   29f82:	701a      	strb	r2, [r3, #0]
   29f84:	2360      	movs	r3, #96	; 0x60
   29f86:	18fb      	adds	r3, r7, r3
   29f88:	2208      	movs	r2, #8
   29f8a:	605a      	str	r2, [r3, #4]
   29f8c:	2360      	movs	r3, #96	; 0x60
   29f8e:	18fb      	adds	r3, r7, r3
   29f90:	2200      	movs	r2, #0
   29f92:	721a      	strb	r2, [r3, #8]
   29f94:	2360      	movs	r3, #96	; 0x60
   29f96:	18fb      	adds	r3, r7, r3
   29f98:	2200      	movs	r2, #0
   29f9a:	725a      	strb	r2, [r3, #9]
   29f9c:	2360      	movs	r3, #96	; 0x60
   29f9e:	18fb      	adds	r3, r7, r3
   29fa0:	0019      	movs	r1, r3
   29fa2:	2001      	movs	r0, #1
   29fa4:	4b7b      	ldr	r3, [pc, #492]	; (2a194 <system_clock_init+0x270>)
   29fa6:	4798      	blx	r3
   29fa8:	2001      	movs	r0, #1
   29faa:	4b7b      	ldr	r3, [pc, #492]	; (2a198 <system_clock_init+0x274>)
   29fac:	4798      	blx	r3
   29fae:	2354      	movs	r3, #84	; 0x54
   29fb0:	18fb      	adds	r3, r7, r3
   29fb2:	0018      	movs	r0, r3
   29fb4:	4b76      	ldr	r3, [pc, #472]	; (2a190 <system_clock_init+0x26c>)
   29fb6:	4798      	blx	r3
   29fb8:	2354      	movs	r3, #84	; 0x54
   29fba:	18fb      	adds	r3, r7, r3
   29fbc:	2203      	movs	r2, #3
   29fbe:	701a      	strb	r2, [r3, #0]
   29fc0:	2354      	movs	r3, #84	; 0x54
   29fc2:	18fb      	adds	r3, r7, r3
   29fc4:	2201      	movs	r2, #1
   29fc6:	605a      	str	r2, [r3, #4]
   29fc8:	2354      	movs	r3, #84	; 0x54
   29fca:	18fb      	adds	r3, r7, r3
   29fcc:	2201      	movs	r2, #1
   29fce:	721a      	strb	r2, [r3, #8]
   29fd0:	2354      	movs	r3, #84	; 0x54
   29fd2:	18fb      	adds	r3, r7, r3
   29fd4:	2200      	movs	r2, #0
   29fd6:	725a      	strb	r2, [r3, #9]
   29fd8:	2354      	movs	r3, #84	; 0x54
   29fda:	18fb      	adds	r3, r7, r3
   29fdc:	0019      	movs	r1, r3
   29fde:	2002      	movs	r0, #2
   29fe0:	4b6c      	ldr	r3, [pc, #432]	; (2a194 <system_clock_init+0x270>)
   29fe2:	4798      	blx	r3
   29fe4:	2002      	movs	r0, #2
   29fe6:	4b6c      	ldr	r3, [pc, #432]	; (2a198 <system_clock_init+0x274>)
   29fe8:	4798      	blx	r3
   29fea:	233c      	movs	r3, #60	; 0x3c
   29fec:	18fb      	adds	r3, r7, r3
   29fee:	0018      	movs	r0, r3
   29ff0:	4b67      	ldr	r3, [pc, #412]	; (2a190 <system_clock_init+0x26c>)
   29ff2:	4798      	blx	r3
   29ff4:	233c      	movs	r3, #60	; 0x3c
   29ff6:	18fb      	adds	r3, r7, r3
   29ff8:	2203      	movs	r2, #3
   29ffa:	701a      	strb	r2, [r3, #0]
   29ffc:	233c      	movs	r3, #60	; 0x3c
   29ffe:	18fb      	adds	r3, r7, r3
   2a000:	2220      	movs	r2, #32
   2a002:	605a      	str	r2, [r3, #4]
   2a004:	233c      	movs	r3, #60	; 0x3c
   2a006:	18fb      	adds	r3, r7, r3
   2a008:	2200      	movs	r2, #0
   2a00a:	721a      	strb	r2, [r3, #8]
   2a00c:	233c      	movs	r3, #60	; 0x3c
   2a00e:	18fb      	adds	r3, r7, r3
   2a010:	2200      	movs	r2, #0
   2a012:	725a      	strb	r2, [r3, #9]
   2a014:	233c      	movs	r3, #60	; 0x3c
   2a016:	18fb      	adds	r3, r7, r3
   2a018:	0019      	movs	r1, r3
   2a01a:	2004      	movs	r0, #4
   2a01c:	4b5d      	ldr	r3, [pc, #372]	; (2a194 <system_clock_init+0x270>)
   2a01e:	4798      	blx	r3
   2a020:	2004      	movs	r0, #4
   2a022:	4b5d      	ldr	r3, [pc, #372]	; (2a198 <system_clock_init+0x274>)
   2a024:	4798      	blx	r3
   2a026:	2330      	movs	r3, #48	; 0x30
   2a028:	18fb      	adds	r3, r7, r3
   2a02a:	0018      	movs	r0, r3
   2a02c:	4b58      	ldr	r3, [pc, #352]	; (2a190 <system_clock_init+0x26c>)
   2a02e:	4798      	blx	r3
   2a030:	2330      	movs	r3, #48	; 0x30
   2a032:	18fb      	adds	r3, r7, r3
   2a034:	2206      	movs	r2, #6
   2a036:	701a      	strb	r2, [r3, #0]
   2a038:	2330      	movs	r3, #48	; 0x30
   2a03a:	18fb      	adds	r3, r7, r3
   2a03c:	2201      	movs	r2, #1
   2a03e:	605a      	str	r2, [r3, #4]
   2a040:	2330      	movs	r3, #48	; 0x30
   2a042:	18fb      	adds	r3, r7, r3
   2a044:	2200      	movs	r2, #0
   2a046:	721a      	strb	r2, [r3, #8]
   2a048:	2330      	movs	r3, #48	; 0x30
   2a04a:	18fb      	adds	r3, r7, r3
   2a04c:	2200      	movs	r2, #0
   2a04e:	725a      	strb	r2, [r3, #9]
   2a050:	2330      	movs	r3, #48	; 0x30
   2a052:	18fb      	adds	r3, r7, r3
   2a054:	0019      	movs	r1, r3
   2a056:	2005      	movs	r0, #5
   2a058:	4b4e      	ldr	r3, [pc, #312]	; (2a194 <system_clock_init+0x270>)
   2a05a:	4798      	blx	r3
   2a05c:	2005      	movs	r0, #5
   2a05e:	4b4e      	ldr	r3, [pc, #312]	; (2a198 <system_clock_init+0x274>)
   2a060:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a062:	2390      	movs	r3, #144	; 0x90
   2a064:	18fb      	adds	r3, r7, r3
   2a066:	0018      	movs	r0, r3
   2a068:	4b4c      	ldr	r3, [pc, #304]	; (2a19c <system_clock_init+0x278>)
   2a06a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a06c:	2390      	movs	r3, #144	; 0x90
   2a06e:	18fb      	adds	r3, r7, r3
   2a070:	2201      	movs	r2, #1
   2a072:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a074:	2390      	movs	r3, #144	; 0x90
   2a076:	18fb      	adds	r3, r7, r3
   2a078:	0019      	movs	r1, r3
   2a07a:	2001      	movs	r0, #1
   2a07c:	4b48      	ldr	r3, [pc, #288]	; (2a1a0 <system_clock_init+0x27c>)
   2a07e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a080:	2001      	movs	r0, #1
   2a082:	4b48      	ldr	r3, [pc, #288]	; (2a1a4 <system_clock_init+0x280>)
   2a084:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a086:	2378      	movs	r3, #120	; 0x78
   2a088:	18fb      	adds	r3, r7, r3
   2a08a:	0018      	movs	r0, r3
   2a08c:	4b46      	ldr	r3, [pc, #280]	; (2a1a8 <system_clock_init+0x284>)
   2a08e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a090:	2378      	movs	r3, #120	; 0x78
   2a092:	18fb      	adds	r3, r7, r3
   2a094:	2200      	movs	r2, #0
   2a096:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a098:	2378      	movs	r3, #120	; 0x78
   2a09a:	18fb      	adds	r3, r7, r3
   2a09c:	2200      	movs	r2, #0
   2a09e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a0a0:	2378      	movs	r3, #120	; 0x78
   2a0a2:	18fb      	adds	r3, r7, r3
   2a0a4:	2200      	movs	r2, #0
   2a0a6:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a0a8:	2378      	movs	r3, #120	; 0x78
   2a0aa:	18fb      	adds	r3, r7, r3
   2a0ac:	2200      	movs	r2, #0
   2a0ae:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a0b0:	2378      	movs	r3, #120	; 0x78
   2a0b2:	18fb      	adds	r3, r7, r3
   2a0b4:	2200      	movs	r2, #0
   2a0b6:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a0b8:	2378      	movs	r3, #120	; 0x78
   2a0ba:	18fb      	adds	r3, r7, r3
   2a0bc:	2200      	movs	r2, #0
   2a0be:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a0c0:	2378      	movs	r3, #120	; 0x78
   2a0c2:	18fb      	adds	r3, r7, r3
   2a0c4:	2200      	movs	r2, #0
   2a0c6:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a0c8:	2378      	movs	r3, #120	; 0x78
   2a0ca:	18fb      	adds	r3, r7, r3
   2a0cc:	2202      	movs	r2, #2
   2a0ce:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a0d0:	2378      	movs	r3, #120	; 0x78
   2a0d2:	18fb      	adds	r3, r7, r3
   2a0d4:	4a35      	ldr	r2, [pc, #212]	; (2a1ac <system_clock_init+0x288>)
   2a0d6:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a0d8:	2378      	movs	r3, #120	; 0x78
   2a0da:	18fb      	adds	r3, r7, r3
   2a0dc:	2201      	movs	r2, #1
   2a0de:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a0e0:	2378      	movs	r3, #120	; 0x78
   2a0e2:	18fb      	adds	r3, r7, r3
   2a0e4:	4a32      	ldr	r2, [pc, #200]	; (2a1b0 <system_clock_init+0x28c>)
   2a0e6:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a0e8:	2378      	movs	r3, #120	; 0x78
   2a0ea:	18fb      	adds	r3, r7, r3
   2a0ec:	0018      	movs	r0, r3
   2a0ee:	4b31      	ldr	r3, [pc, #196]	; (2a1b4 <system_clock_init+0x290>)
   2a0f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a0f2:	2008      	movs	r0, #8
   2a0f4:	4b24      	ldr	r3, [pc, #144]	; (2a188 <system_clock_init+0x264>)
   2a0f6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a0f8:	46c0      	nop			; (mov r8, r8)
   2a0fa:	2008      	movs	r0, #8
   2a0fc:	4b2e      	ldr	r3, [pc, #184]	; (2a1b8 <system_clock_init+0x294>)
   2a0fe:	4798      	blx	r3
   2a100:	0003      	movs	r3, r0
   2a102:	001a      	movs	r2, r3
   2a104:	2301      	movs	r3, #1
   2a106:	4053      	eors	r3, r2
   2a108:	b2db      	uxtb	r3, r3
   2a10a:	2b00      	cmp	r3, #0
   2a10c:	d1f5      	bne.n	2a0fa <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a10e:	4919      	ldr	r1, [pc, #100]	; (2a174 <system_clock_init+0x250>)
   2a110:	2244      	movs	r2, #68	; 0x44
   2a112:	5c8b      	ldrb	r3, [r1, r2]
   2a114:	2080      	movs	r0, #128	; 0x80
   2a116:	4240      	negs	r0, r0
   2a118:	4303      	orrs	r3, r0
   2a11a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a11c:	2000      	movs	r0, #0
   2a11e:	4b27      	ldr	r3, [pc, #156]	; (2a1bc <system_clock_init+0x298>)
   2a120:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a122:	2100      	movs	r1, #0
   2a124:	2000      	movs	r0, #0
   2a126:	4b26      	ldr	r3, [pc, #152]	; (2a1c0 <system_clock_init+0x29c>)
   2a128:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a12a:	2100      	movs	r1, #0
   2a12c:	2001      	movs	r0, #1
   2a12e:	4b24      	ldr	r3, [pc, #144]	; (2a1c0 <system_clock_init+0x29c>)
   2a130:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a132:	2100      	movs	r1, #0
   2a134:	2002      	movs	r0, #2
   2a136:	4b22      	ldr	r3, [pc, #136]	; (2a1c0 <system_clock_init+0x29c>)
   2a138:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a13a:	003b      	movs	r3, r7
   2a13c:	0018      	movs	r0, r3
   2a13e:	4b14      	ldr	r3, [pc, #80]	; (2a190 <system_clock_init+0x26c>)
   2a140:	4798      	blx	r3
   2a142:	003b      	movs	r3, r7
   2a144:	2208      	movs	r2, #8
   2a146:	701a      	strb	r2, [r3, #0]
   2a148:	003b      	movs	r3, r7
   2a14a:	2201      	movs	r2, #1
   2a14c:	605a      	str	r2, [r3, #4]
   2a14e:	003b      	movs	r3, r7
   2a150:	2200      	movs	r2, #0
   2a152:	721a      	strb	r2, [r3, #8]
   2a154:	003b      	movs	r3, r7
   2a156:	2201      	movs	r2, #1
   2a158:	725a      	strb	r2, [r3, #9]
   2a15a:	003b      	movs	r3, r7
   2a15c:	0019      	movs	r1, r3
   2a15e:	2000      	movs	r0, #0
   2a160:	4b0c      	ldr	r3, [pc, #48]	; (2a194 <system_clock_init+0x270>)
   2a162:	4798      	blx	r3
   2a164:	2000      	movs	r0, #0
   2a166:	4b0c      	ldr	r3, [pc, #48]	; (2a198 <system_clock_init+0x274>)
   2a168:	4798      	blx	r3
#endif
}
   2a16a:	46c0      	nop			; (mov r8, r8)
   2a16c:	46bd      	mov	sp, r7
   2a16e:	b026      	add	sp, #152	; 0x98
   2a170:	bd80      	pop	{r7, pc}
   2a172:	46c0      	nop			; (mov r8, r8)
   2a174:	40000800 	.word	0x40000800
   2a178:	00029ae5 	.word	0x00029ae5
   2a17c:	00029eed 	.word	0x00029eed
   2a180:	000299f5 	.word	0x000299f5
   2a184:	00029c39 	.word	0x00029c39
   2a188:	00029dbd 	.word	0x00029dbd
   2a18c:	0002a269 	.word	0x0002a269
   2a190:	000299b1 	.word	0x000299b1
   2a194:	0002a299 	.word	0x0002a299
   2a198:	0002a3bd 	.word	0x0002a3bd
   2a19c:	000299df 	.word	0x000299df
   2a1a0:	0002a4f1 	.word	0x0002a4f1
   2a1a4:	0002a535 	.word	0x0002a535
   2a1a8:	00029a8d 	.word	0x00029a8d
   2a1ac:	000f4240 	.word	0x000f4240
   2a1b0:	02dc6c00 	.word	0x02dc6c00
   2a1b4:	00029cb1 	.word	0x00029cb1
   2a1b8:	00029e69 	.word	0x00029e69
   2a1bc:	00029a19 	.word	0x00029a19
   2a1c0:	00029a39 	.word	0x00029a39

0002a1c4 <system_apb_clock_set_mask>:
{
   2a1c4:	b580      	push	{r7, lr}
   2a1c6:	b082      	sub	sp, #8
   2a1c8:	af00      	add	r7, sp, #0
   2a1ca:	0002      	movs	r2, r0
   2a1cc:	6039      	str	r1, [r7, #0]
   2a1ce:	1dfb      	adds	r3, r7, #7
   2a1d0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a1d2:	1dfb      	adds	r3, r7, #7
   2a1d4:	781b      	ldrb	r3, [r3, #0]
   2a1d6:	2b01      	cmp	r3, #1
   2a1d8:	d00a      	beq.n	2a1f0 <system_apb_clock_set_mask+0x2c>
   2a1da:	2b02      	cmp	r3, #2
   2a1dc:	d00f      	beq.n	2a1fe <system_apb_clock_set_mask+0x3a>
   2a1de:	2b00      	cmp	r3, #0
   2a1e0:	d114      	bne.n	2a20c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a1e2:	4b0e      	ldr	r3, [pc, #56]	; (2a21c <system_apb_clock_set_mask+0x58>)
   2a1e4:	4a0d      	ldr	r2, [pc, #52]	; (2a21c <system_apb_clock_set_mask+0x58>)
   2a1e6:	6991      	ldr	r1, [r2, #24]
   2a1e8:	683a      	ldr	r2, [r7, #0]
   2a1ea:	430a      	orrs	r2, r1
   2a1ec:	619a      	str	r2, [r3, #24]
			break;
   2a1ee:	e00f      	b.n	2a210 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a1f0:	4b0a      	ldr	r3, [pc, #40]	; (2a21c <system_apb_clock_set_mask+0x58>)
   2a1f2:	4a0a      	ldr	r2, [pc, #40]	; (2a21c <system_apb_clock_set_mask+0x58>)
   2a1f4:	69d1      	ldr	r1, [r2, #28]
   2a1f6:	683a      	ldr	r2, [r7, #0]
   2a1f8:	430a      	orrs	r2, r1
   2a1fa:	61da      	str	r2, [r3, #28]
			break;
   2a1fc:	e008      	b.n	2a210 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a1fe:	4b07      	ldr	r3, [pc, #28]	; (2a21c <system_apb_clock_set_mask+0x58>)
   2a200:	4a06      	ldr	r2, [pc, #24]	; (2a21c <system_apb_clock_set_mask+0x58>)
   2a202:	6a11      	ldr	r1, [r2, #32]
   2a204:	683a      	ldr	r2, [r7, #0]
   2a206:	430a      	orrs	r2, r1
   2a208:	621a      	str	r2, [r3, #32]
			break;
   2a20a:	e001      	b.n	2a210 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a20c:	2317      	movs	r3, #23
   2a20e:	e000      	b.n	2a212 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a210:	2300      	movs	r3, #0
}
   2a212:	0018      	movs	r0, r3
   2a214:	46bd      	mov	sp, r7
   2a216:	b002      	add	sp, #8
   2a218:	bd80      	pop	{r7, pc}
   2a21a:	46c0      	nop			; (mov r8, r8)
   2a21c:	40000400 	.word	0x40000400

0002a220 <system_interrupt_enter_critical_section>:
{
   2a220:	b580      	push	{r7, lr}
   2a222:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a224:	4b02      	ldr	r3, [pc, #8]	; (2a230 <system_interrupt_enter_critical_section+0x10>)
   2a226:	4798      	blx	r3
}
   2a228:	46c0      	nop			; (mov r8, r8)
   2a22a:	46bd      	mov	sp, r7
   2a22c:	bd80      	pop	{r7, pc}
   2a22e:	46c0      	nop			; (mov r8, r8)
   2a230:	0002685d 	.word	0x0002685d

0002a234 <system_interrupt_leave_critical_section>:
{
   2a234:	b580      	push	{r7, lr}
   2a236:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a238:	4b02      	ldr	r3, [pc, #8]	; (2a244 <system_interrupt_leave_critical_section+0x10>)
   2a23a:	4798      	blx	r3
}
   2a23c:	46c0      	nop			; (mov r8, r8)
   2a23e:	46bd      	mov	sp, r7
   2a240:	bd80      	pop	{r7, pc}
   2a242:	46c0      	nop			; (mov r8, r8)
   2a244:	000268b1 	.word	0x000268b1

0002a248 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a248:	b580      	push	{r7, lr}
   2a24a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a24c:	4b05      	ldr	r3, [pc, #20]	; (2a264 <system_gclk_is_syncing+0x1c>)
   2a24e:	785b      	ldrb	r3, [r3, #1]
   2a250:	b2db      	uxtb	r3, r3
   2a252:	b25b      	sxtb	r3, r3
   2a254:	2b00      	cmp	r3, #0
   2a256:	da01      	bge.n	2a25c <system_gclk_is_syncing+0x14>
		return true;
   2a258:	2301      	movs	r3, #1
   2a25a:	e000      	b.n	2a25e <system_gclk_is_syncing+0x16>
	}

	return false;
   2a25c:	2300      	movs	r3, #0
}
   2a25e:	0018      	movs	r0, r3
   2a260:	46bd      	mov	sp, r7
   2a262:	bd80      	pop	{r7, pc}
   2a264:	40000c00 	.word	0x40000c00

0002a268 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a268:	b580      	push	{r7, lr}
   2a26a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a26c:	2108      	movs	r1, #8
   2a26e:	2000      	movs	r0, #0
   2a270:	4b07      	ldr	r3, [pc, #28]	; (2a290 <system_gclk_init+0x28>)
   2a272:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a274:	4b07      	ldr	r3, [pc, #28]	; (2a294 <system_gclk_init+0x2c>)
   2a276:	2201      	movs	r2, #1
   2a278:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a27a:	46c0      	nop			; (mov r8, r8)
   2a27c:	4b05      	ldr	r3, [pc, #20]	; (2a294 <system_gclk_init+0x2c>)
   2a27e:	781b      	ldrb	r3, [r3, #0]
   2a280:	b2db      	uxtb	r3, r3
   2a282:	001a      	movs	r2, r3
   2a284:	2301      	movs	r3, #1
   2a286:	4013      	ands	r3, r2
   2a288:	d1f8      	bne.n	2a27c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a28a:	46c0      	nop			; (mov r8, r8)
   2a28c:	46bd      	mov	sp, r7
   2a28e:	bd80      	pop	{r7, pc}
   2a290:	0002a1c5 	.word	0x0002a1c5
   2a294:	40000c00 	.word	0x40000c00

0002a298 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a298:	b580      	push	{r7, lr}
   2a29a:	b086      	sub	sp, #24
   2a29c:	af00      	add	r7, sp, #0
   2a29e:	0002      	movs	r2, r0
   2a2a0:	6039      	str	r1, [r7, #0]
   2a2a2:	1dfb      	adds	r3, r7, #7
   2a2a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a2a6:	1dfb      	adds	r3, r7, #7
   2a2a8:	781b      	ldrb	r3, [r3, #0]
   2a2aa:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a2ac:	1dfb      	adds	r3, r7, #7
   2a2ae:	781b      	ldrb	r3, [r3, #0]
   2a2b0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a2b2:	683b      	ldr	r3, [r7, #0]
   2a2b4:	781b      	ldrb	r3, [r3, #0]
   2a2b6:	021b      	lsls	r3, r3, #8
   2a2b8:	001a      	movs	r2, r3
   2a2ba:	697b      	ldr	r3, [r7, #20]
   2a2bc:	4313      	orrs	r3, r2
   2a2be:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a2c0:	683b      	ldr	r3, [r7, #0]
   2a2c2:	785b      	ldrb	r3, [r3, #1]
   2a2c4:	2b00      	cmp	r3, #0
   2a2c6:	d004      	beq.n	2a2d2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a2c8:	697b      	ldr	r3, [r7, #20]
   2a2ca:	2280      	movs	r2, #128	; 0x80
   2a2cc:	02d2      	lsls	r2, r2, #11
   2a2ce:	4313      	orrs	r3, r2
   2a2d0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a2d2:	683b      	ldr	r3, [r7, #0]
   2a2d4:	7a5b      	ldrb	r3, [r3, #9]
   2a2d6:	2b00      	cmp	r3, #0
   2a2d8:	d004      	beq.n	2a2e4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a2da:	697b      	ldr	r3, [r7, #20]
   2a2dc:	2280      	movs	r2, #128	; 0x80
   2a2de:	0312      	lsls	r2, r2, #12
   2a2e0:	4313      	orrs	r3, r2
   2a2e2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a2e4:	683b      	ldr	r3, [r7, #0]
   2a2e6:	685b      	ldr	r3, [r3, #4]
   2a2e8:	2b01      	cmp	r3, #1
   2a2ea:	d92c      	bls.n	2a346 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a2ec:	683b      	ldr	r3, [r7, #0]
   2a2ee:	685a      	ldr	r2, [r3, #4]
   2a2f0:	683b      	ldr	r3, [r7, #0]
   2a2f2:	685b      	ldr	r3, [r3, #4]
   2a2f4:	3b01      	subs	r3, #1
   2a2f6:	4013      	ands	r3, r2
   2a2f8:	d11a      	bne.n	2a330 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a2fa:	2300      	movs	r3, #0
   2a2fc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a2fe:	2302      	movs	r3, #2
   2a300:	60bb      	str	r3, [r7, #8]
   2a302:	e005      	b.n	2a310 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a304:	68fb      	ldr	r3, [r7, #12]
   2a306:	3301      	adds	r3, #1
   2a308:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a30a:	68bb      	ldr	r3, [r7, #8]
   2a30c:	005b      	lsls	r3, r3, #1
   2a30e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a310:	683b      	ldr	r3, [r7, #0]
   2a312:	685a      	ldr	r2, [r3, #4]
   2a314:	68bb      	ldr	r3, [r7, #8]
   2a316:	429a      	cmp	r2, r3
   2a318:	d8f4      	bhi.n	2a304 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a31a:	68fb      	ldr	r3, [r7, #12]
   2a31c:	021b      	lsls	r3, r3, #8
   2a31e:	693a      	ldr	r2, [r7, #16]
   2a320:	4313      	orrs	r3, r2
   2a322:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a324:	697b      	ldr	r3, [r7, #20]
   2a326:	2280      	movs	r2, #128	; 0x80
   2a328:	0352      	lsls	r2, r2, #13
   2a32a:	4313      	orrs	r3, r2
   2a32c:	617b      	str	r3, [r7, #20]
   2a32e:	e00a      	b.n	2a346 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a330:	683b      	ldr	r3, [r7, #0]
   2a332:	685b      	ldr	r3, [r3, #4]
   2a334:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a336:	693a      	ldr	r2, [r7, #16]
   2a338:	4313      	orrs	r3, r2
   2a33a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a33c:	697b      	ldr	r3, [r7, #20]
   2a33e:	2280      	movs	r2, #128	; 0x80
   2a340:	0292      	lsls	r2, r2, #10
   2a342:	4313      	orrs	r3, r2
   2a344:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a346:	683b      	ldr	r3, [r7, #0]
   2a348:	7a1b      	ldrb	r3, [r3, #8]
   2a34a:	2b00      	cmp	r3, #0
   2a34c:	d004      	beq.n	2a358 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a34e:	697b      	ldr	r3, [r7, #20]
   2a350:	2280      	movs	r2, #128	; 0x80
   2a352:	0392      	lsls	r2, r2, #14
   2a354:	4313      	orrs	r3, r2
   2a356:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a358:	46c0      	nop			; (mov r8, r8)
   2a35a:	4b13      	ldr	r3, [pc, #76]	; (2a3a8 <system_gclk_gen_set_config+0x110>)
   2a35c:	4798      	blx	r3
   2a35e:	1e03      	subs	r3, r0, #0
   2a360:	d1fb      	bne.n	2a35a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a362:	4b12      	ldr	r3, [pc, #72]	; (2a3ac <system_gclk_gen_set_config+0x114>)
   2a364:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a366:	4a12      	ldr	r2, [pc, #72]	; (2a3b0 <system_gclk_gen_set_config+0x118>)
   2a368:	1dfb      	adds	r3, r7, #7
   2a36a:	781b      	ldrb	r3, [r3, #0]
   2a36c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a36e:	46c0      	nop			; (mov r8, r8)
   2a370:	4b0d      	ldr	r3, [pc, #52]	; (2a3a8 <system_gclk_gen_set_config+0x110>)
   2a372:	4798      	blx	r3
   2a374:	1e03      	subs	r3, r0, #0
   2a376:	d1fb      	bne.n	2a370 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a378:	4b0e      	ldr	r3, [pc, #56]	; (2a3b4 <system_gclk_gen_set_config+0x11c>)
   2a37a:	693a      	ldr	r2, [r7, #16]
   2a37c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a37e:	46c0      	nop			; (mov r8, r8)
   2a380:	4b09      	ldr	r3, [pc, #36]	; (2a3a8 <system_gclk_gen_set_config+0x110>)
   2a382:	4798      	blx	r3
   2a384:	1e03      	subs	r3, r0, #0
   2a386:	d1fb      	bne.n	2a380 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a388:	4b0a      	ldr	r3, [pc, #40]	; (2a3b4 <system_gclk_gen_set_config+0x11c>)
   2a38a:	4a0a      	ldr	r2, [pc, #40]	; (2a3b4 <system_gclk_gen_set_config+0x11c>)
   2a38c:	6851      	ldr	r1, [r2, #4]
   2a38e:	2280      	movs	r2, #128	; 0x80
   2a390:	0252      	lsls	r2, r2, #9
   2a392:	4011      	ands	r1, r2
   2a394:	697a      	ldr	r2, [r7, #20]
   2a396:	430a      	orrs	r2, r1
   2a398:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a39a:	4b07      	ldr	r3, [pc, #28]	; (2a3b8 <system_gclk_gen_set_config+0x120>)
   2a39c:	4798      	blx	r3
}
   2a39e:	46c0      	nop			; (mov r8, r8)
   2a3a0:	46bd      	mov	sp, r7
   2a3a2:	b006      	add	sp, #24
   2a3a4:	bd80      	pop	{r7, pc}
   2a3a6:	46c0      	nop			; (mov r8, r8)
   2a3a8:	0002a249 	.word	0x0002a249
   2a3ac:	0002a221 	.word	0x0002a221
   2a3b0:	40000c08 	.word	0x40000c08
   2a3b4:	40000c00 	.word	0x40000c00
   2a3b8:	0002a235 	.word	0x0002a235

0002a3bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a3bc:	b580      	push	{r7, lr}
   2a3be:	b082      	sub	sp, #8
   2a3c0:	af00      	add	r7, sp, #0
   2a3c2:	0002      	movs	r2, r0
   2a3c4:	1dfb      	adds	r3, r7, #7
   2a3c6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a3c8:	46c0      	nop			; (mov r8, r8)
   2a3ca:	4b0e      	ldr	r3, [pc, #56]	; (2a404 <system_gclk_gen_enable+0x48>)
   2a3cc:	4798      	blx	r3
   2a3ce:	1e03      	subs	r3, r0, #0
   2a3d0:	d1fb      	bne.n	2a3ca <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a3d2:	4b0d      	ldr	r3, [pc, #52]	; (2a408 <system_gclk_gen_enable+0x4c>)
   2a3d4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a3d6:	4a0d      	ldr	r2, [pc, #52]	; (2a40c <system_gclk_gen_enable+0x50>)
   2a3d8:	1dfb      	adds	r3, r7, #7
   2a3da:	781b      	ldrb	r3, [r3, #0]
   2a3dc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a3de:	46c0      	nop			; (mov r8, r8)
   2a3e0:	4b08      	ldr	r3, [pc, #32]	; (2a404 <system_gclk_gen_enable+0x48>)
   2a3e2:	4798      	blx	r3
   2a3e4:	1e03      	subs	r3, r0, #0
   2a3e6:	d1fb      	bne.n	2a3e0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a3e8:	4b09      	ldr	r3, [pc, #36]	; (2a410 <system_gclk_gen_enable+0x54>)
   2a3ea:	4a09      	ldr	r2, [pc, #36]	; (2a410 <system_gclk_gen_enable+0x54>)
   2a3ec:	6852      	ldr	r2, [r2, #4]
   2a3ee:	2180      	movs	r1, #128	; 0x80
   2a3f0:	0249      	lsls	r1, r1, #9
   2a3f2:	430a      	orrs	r2, r1
   2a3f4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a3f6:	4b07      	ldr	r3, [pc, #28]	; (2a414 <system_gclk_gen_enable+0x58>)
   2a3f8:	4798      	blx	r3
}
   2a3fa:	46c0      	nop			; (mov r8, r8)
   2a3fc:	46bd      	mov	sp, r7
   2a3fe:	b002      	add	sp, #8
   2a400:	bd80      	pop	{r7, pc}
   2a402:	46c0      	nop			; (mov r8, r8)
   2a404:	0002a249 	.word	0x0002a249
   2a408:	0002a221 	.word	0x0002a221
   2a40c:	40000c04 	.word	0x40000c04
   2a410:	40000c00 	.word	0x40000c00
   2a414:	0002a235 	.word	0x0002a235

0002a418 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a418:	b580      	push	{r7, lr}
   2a41a:	b086      	sub	sp, #24
   2a41c:	af00      	add	r7, sp, #0
   2a41e:	0002      	movs	r2, r0
   2a420:	1dfb      	adds	r3, r7, #7
   2a422:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a424:	46c0      	nop			; (mov r8, r8)
   2a426:	4b2a      	ldr	r3, [pc, #168]	; (2a4d0 <system_gclk_gen_get_hz+0xb8>)
   2a428:	4798      	blx	r3
   2a42a:	1e03      	subs	r3, r0, #0
   2a42c:	d1fb      	bne.n	2a426 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a42e:	4b29      	ldr	r3, [pc, #164]	; (2a4d4 <system_gclk_gen_get_hz+0xbc>)
   2a430:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a432:	4a29      	ldr	r2, [pc, #164]	; (2a4d8 <system_gclk_gen_get_hz+0xc0>)
   2a434:	1dfb      	adds	r3, r7, #7
   2a436:	781b      	ldrb	r3, [r3, #0]
   2a438:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a43a:	46c0      	nop			; (mov r8, r8)
   2a43c:	4b24      	ldr	r3, [pc, #144]	; (2a4d0 <system_gclk_gen_get_hz+0xb8>)
   2a43e:	4798      	blx	r3
   2a440:	1e03      	subs	r3, r0, #0
   2a442:	d1fb      	bne.n	2a43c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a444:	4b25      	ldr	r3, [pc, #148]	; (2a4dc <system_gclk_gen_get_hz+0xc4>)
   2a446:	685b      	ldr	r3, [r3, #4]
   2a448:	04db      	lsls	r3, r3, #19
   2a44a:	0edb      	lsrs	r3, r3, #27
   2a44c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a44e:	0018      	movs	r0, r3
   2a450:	4b23      	ldr	r3, [pc, #140]	; (2a4e0 <system_gclk_gen_get_hz+0xc8>)
   2a452:	4798      	blx	r3
   2a454:	0003      	movs	r3, r0
   2a456:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a458:	4a1f      	ldr	r2, [pc, #124]	; (2a4d8 <system_gclk_gen_get_hz+0xc0>)
   2a45a:	1dfb      	adds	r3, r7, #7
   2a45c:	781b      	ldrb	r3, [r3, #0]
   2a45e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a460:	4b1e      	ldr	r3, [pc, #120]	; (2a4dc <system_gclk_gen_get_hz+0xc4>)
   2a462:	685b      	ldr	r3, [r3, #4]
   2a464:	02db      	lsls	r3, r3, #11
   2a466:	0fdb      	lsrs	r3, r3, #31
   2a468:	b2da      	uxtb	r2, r3
   2a46a:	2313      	movs	r3, #19
   2a46c:	18fb      	adds	r3, r7, r3
   2a46e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a470:	4a1c      	ldr	r2, [pc, #112]	; (2a4e4 <system_gclk_gen_get_hz+0xcc>)
   2a472:	1dfb      	adds	r3, r7, #7
   2a474:	781b      	ldrb	r3, [r3, #0]
   2a476:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a478:	46c0      	nop			; (mov r8, r8)
   2a47a:	4b15      	ldr	r3, [pc, #84]	; (2a4d0 <system_gclk_gen_get_hz+0xb8>)
   2a47c:	4798      	blx	r3
   2a47e:	1e03      	subs	r3, r0, #0
   2a480:	d1fb      	bne.n	2a47a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a482:	4b16      	ldr	r3, [pc, #88]	; (2a4dc <system_gclk_gen_get_hz+0xc4>)
   2a484:	689b      	ldr	r3, [r3, #8]
   2a486:	021b      	lsls	r3, r3, #8
   2a488:	0c1b      	lsrs	r3, r3, #16
   2a48a:	b29b      	uxth	r3, r3
   2a48c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a48e:	4b16      	ldr	r3, [pc, #88]	; (2a4e8 <system_gclk_gen_get_hz+0xd0>)
   2a490:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a492:	2313      	movs	r3, #19
   2a494:	18fb      	adds	r3, r7, r3
   2a496:	781b      	ldrb	r3, [r3, #0]
   2a498:	2b00      	cmp	r3, #0
   2a49a:	d109      	bne.n	2a4b0 <system_gclk_gen_get_hz+0x98>
   2a49c:	68fb      	ldr	r3, [r7, #12]
   2a49e:	2b01      	cmp	r3, #1
   2a4a0:	d906      	bls.n	2a4b0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a4a2:	4b12      	ldr	r3, [pc, #72]	; (2a4ec <system_gclk_gen_get_hz+0xd4>)
   2a4a4:	68f9      	ldr	r1, [r7, #12]
   2a4a6:	6978      	ldr	r0, [r7, #20]
   2a4a8:	4798      	blx	r3
   2a4aa:	0003      	movs	r3, r0
   2a4ac:	617b      	str	r3, [r7, #20]
   2a4ae:	e00a      	b.n	2a4c6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a4b0:	2313      	movs	r3, #19
   2a4b2:	18fb      	adds	r3, r7, r3
   2a4b4:	781b      	ldrb	r3, [r3, #0]
   2a4b6:	2b00      	cmp	r3, #0
   2a4b8:	d005      	beq.n	2a4c6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a4ba:	68fb      	ldr	r3, [r7, #12]
   2a4bc:	3301      	adds	r3, #1
   2a4be:	697a      	ldr	r2, [r7, #20]
   2a4c0:	40da      	lsrs	r2, r3
   2a4c2:	0013      	movs	r3, r2
   2a4c4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a4c6:	697b      	ldr	r3, [r7, #20]
}
   2a4c8:	0018      	movs	r0, r3
   2a4ca:	46bd      	mov	sp, r7
   2a4cc:	b006      	add	sp, #24
   2a4ce:	bd80      	pop	{r7, pc}
   2a4d0:	0002a249 	.word	0x0002a249
   2a4d4:	0002a221 	.word	0x0002a221
   2a4d8:	40000c04 	.word	0x40000c04
   2a4dc:	40000c00 	.word	0x40000c00
   2a4e0:	00029b79 	.word	0x00029b79
   2a4e4:	40000c08 	.word	0x40000c08
   2a4e8:	0002a235 	.word	0x0002a235
   2a4ec:	00033035 	.word	0x00033035

0002a4f0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a4f0:	b580      	push	{r7, lr}
   2a4f2:	b084      	sub	sp, #16
   2a4f4:	af00      	add	r7, sp, #0
   2a4f6:	0002      	movs	r2, r0
   2a4f8:	6039      	str	r1, [r7, #0]
   2a4fa:	1dfb      	adds	r3, r7, #7
   2a4fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a4fe:	1dfb      	adds	r3, r7, #7
   2a500:	781b      	ldrb	r3, [r3, #0]
   2a502:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a504:	683b      	ldr	r3, [r7, #0]
   2a506:	781b      	ldrb	r3, [r3, #0]
   2a508:	021b      	lsls	r3, r3, #8
   2a50a:	001a      	movs	r2, r3
   2a50c:	68fb      	ldr	r3, [r7, #12]
   2a50e:	4313      	orrs	r3, r2
   2a510:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a512:	1dfb      	adds	r3, r7, #7
   2a514:	781b      	ldrb	r3, [r3, #0]
   2a516:	0018      	movs	r0, r3
   2a518:	4b04      	ldr	r3, [pc, #16]	; (2a52c <system_gclk_chan_set_config+0x3c>)
   2a51a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2a51c:	4b04      	ldr	r3, [pc, #16]	; (2a530 <system_gclk_chan_set_config+0x40>)
   2a51e:	68fa      	ldr	r2, [r7, #12]
   2a520:	b292      	uxth	r2, r2
   2a522:	805a      	strh	r2, [r3, #2]
}
   2a524:	46c0      	nop			; (mov r8, r8)
   2a526:	46bd      	mov	sp, r7
   2a528:	b004      	add	sp, #16
   2a52a:	bd80      	pop	{r7, pc}
   2a52c:	0002a57d 	.word	0x0002a57d
   2a530:	40000c00 	.word	0x40000c00

0002a534 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2a534:	b580      	push	{r7, lr}
   2a536:	b082      	sub	sp, #8
   2a538:	af00      	add	r7, sp, #0
   2a53a:	0002      	movs	r2, r0
   2a53c:	1dfb      	adds	r3, r7, #7
   2a53e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a540:	4b0a      	ldr	r3, [pc, #40]	; (2a56c <system_gclk_chan_enable+0x38>)
   2a542:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a544:	4a0a      	ldr	r2, [pc, #40]	; (2a570 <system_gclk_chan_enable+0x3c>)
   2a546:	1dfb      	adds	r3, r7, #7
   2a548:	781b      	ldrb	r3, [r3, #0]
   2a54a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2a54c:	4909      	ldr	r1, [pc, #36]	; (2a574 <system_gclk_chan_enable+0x40>)
   2a54e:	4b09      	ldr	r3, [pc, #36]	; (2a574 <system_gclk_chan_enable+0x40>)
   2a550:	885b      	ldrh	r3, [r3, #2]
   2a552:	b29b      	uxth	r3, r3
   2a554:	2280      	movs	r2, #128	; 0x80
   2a556:	01d2      	lsls	r2, r2, #7
   2a558:	4313      	orrs	r3, r2
   2a55a:	b29b      	uxth	r3, r3
   2a55c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2a55e:	4b06      	ldr	r3, [pc, #24]	; (2a578 <system_gclk_chan_enable+0x44>)
   2a560:	4798      	blx	r3
}
   2a562:	46c0      	nop			; (mov r8, r8)
   2a564:	46bd      	mov	sp, r7
   2a566:	b002      	add	sp, #8
   2a568:	bd80      	pop	{r7, pc}
   2a56a:	46c0      	nop			; (mov r8, r8)
   2a56c:	0002a221 	.word	0x0002a221
   2a570:	40000c02 	.word	0x40000c02
   2a574:	40000c00 	.word	0x40000c00
   2a578:	0002a235 	.word	0x0002a235

0002a57c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2a57c:	b580      	push	{r7, lr}
   2a57e:	b084      	sub	sp, #16
   2a580:	af00      	add	r7, sp, #0
   2a582:	0002      	movs	r2, r0
   2a584:	1dfb      	adds	r3, r7, #7
   2a586:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a588:	4b1c      	ldr	r3, [pc, #112]	; (2a5fc <system_gclk_chan_disable+0x80>)
   2a58a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a58c:	4a1c      	ldr	r2, [pc, #112]	; (2a600 <system_gclk_chan_disable+0x84>)
   2a58e:	1dfb      	adds	r3, r7, #7
   2a590:	781b      	ldrb	r3, [r3, #0]
   2a592:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2a594:	4b1b      	ldr	r3, [pc, #108]	; (2a604 <system_gclk_chan_disable+0x88>)
   2a596:	885b      	ldrh	r3, [r3, #2]
   2a598:	051b      	lsls	r3, r3, #20
   2a59a:	0f1b      	lsrs	r3, r3, #28
   2a59c:	b2db      	uxtb	r3, r3
   2a59e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2a5a0:	4a18      	ldr	r2, [pc, #96]	; (2a604 <system_gclk_chan_disable+0x88>)
   2a5a2:	8853      	ldrh	r3, [r2, #2]
   2a5a4:	4918      	ldr	r1, [pc, #96]	; (2a608 <system_gclk_chan_disable+0x8c>)
   2a5a6:	400b      	ands	r3, r1
   2a5a8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2a5aa:	4a16      	ldr	r2, [pc, #88]	; (2a604 <system_gclk_chan_disable+0x88>)
   2a5ac:	4b15      	ldr	r3, [pc, #84]	; (2a604 <system_gclk_chan_disable+0x88>)
   2a5ae:	885b      	ldrh	r3, [r3, #2]
   2a5b0:	b29b      	uxth	r3, r3
   2a5b2:	4916      	ldr	r1, [pc, #88]	; (2a60c <system_gclk_chan_disable+0x90>)
   2a5b4:	400b      	ands	r3, r1
   2a5b6:	b29b      	uxth	r3, r3
   2a5b8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2a5ba:	46c0      	nop			; (mov r8, r8)
   2a5bc:	4b11      	ldr	r3, [pc, #68]	; (2a604 <system_gclk_chan_disable+0x88>)
   2a5be:	885b      	ldrh	r3, [r3, #2]
   2a5c0:	b29b      	uxth	r3, r3
   2a5c2:	001a      	movs	r2, r3
   2a5c4:	2380      	movs	r3, #128	; 0x80
   2a5c6:	01db      	lsls	r3, r3, #7
   2a5c8:	4013      	ands	r3, r2
   2a5ca:	d1f7      	bne.n	2a5bc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2a5cc:	4a0d      	ldr	r2, [pc, #52]	; (2a604 <system_gclk_chan_disable+0x88>)
   2a5ce:	68fb      	ldr	r3, [r7, #12]
   2a5d0:	b2db      	uxtb	r3, r3
   2a5d2:	1c19      	adds	r1, r3, #0
   2a5d4:	230f      	movs	r3, #15
   2a5d6:	400b      	ands	r3, r1
   2a5d8:	b2d9      	uxtb	r1, r3
   2a5da:	8853      	ldrh	r3, [r2, #2]
   2a5dc:	1c08      	adds	r0, r1, #0
   2a5de:	210f      	movs	r1, #15
   2a5e0:	4001      	ands	r1, r0
   2a5e2:	0208      	lsls	r0, r1, #8
   2a5e4:	4908      	ldr	r1, [pc, #32]	; (2a608 <system_gclk_chan_disable+0x8c>)
   2a5e6:	400b      	ands	r3, r1
   2a5e8:	1c19      	adds	r1, r3, #0
   2a5ea:	1c03      	adds	r3, r0, #0
   2a5ec:	430b      	orrs	r3, r1
   2a5ee:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2a5f0:	4b07      	ldr	r3, [pc, #28]	; (2a610 <system_gclk_chan_disable+0x94>)
   2a5f2:	4798      	blx	r3
}
   2a5f4:	46c0      	nop			; (mov r8, r8)
   2a5f6:	46bd      	mov	sp, r7
   2a5f8:	b004      	add	sp, #16
   2a5fa:	bd80      	pop	{r7, pc}
   2a5fc:	0002a221 	.word	0x0002a221
   2a600:	40000c02 	.word	0x40000c02
   2a604:	40000c00 	.word	0x40000c00
   2a608:	fffff0ff 	.word	0xfffff0ff
   2a60c:	ffffbfff 	.word	0xffffbfff
   2a610:	0002a235 	.word	0x0002a235

0002a614 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2a614:	b580      	push	{r7, lr}
   2a616:	b084      	sub	sp, #16
   2a618:	af00      	add	r7, sp, #0
   2a61a:	0002      	movs	r2, r0
   2a61c:	1dfb      	adds	r3, r7, #7
   2a61e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2a620:	4b0d      	ldr	r3, [pc, #52]	; (2a658 <system_gclk_chan_get_hz+0x44>)
   2a622:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a624:	4a0d      	ldr	r2, [pc, #52]	; (2a65c <system_gclk_chan_get_hz+0x48>)
   2a626:	1dfb      	adds	r3, r7, #7
   2a628:	781b      	ldrb	r3, [r3, #0]
   2a62a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2a62c:	4b0c      	ldr	r3, [pc, #48]	; (2a660 <system_gclk_chan_get_hz+0x4c>)
   2a62e:	885b      	ldrh	r3, [r3, #2]
   2a630:	051b      	lsls	r3, r3, #20
   2a632:	0f1b      	lsrs	r3, r3, #28
   2a634:	b2da      	uxtb	r2, r3
   2a636:	230f      	movs	r3, #15
   2a638:	18fb      	adds	r3, r7, r3
   2a63a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2a63c:	4b09      	ldr	r3, [pc, #36]	; (2a664 <system_gclk_chan_get_hz+0x50>)
   2a63e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2a640:	230f      	movs	r3, #15
   2a642:	18fb      	adds	r3, r7, r3
   2a644:	781b      	ldrb	r3, [r3, #0]
   2a646:	0018      	movs	r0, r3
   2a648:	4b07      	ldr	r3, [pc, #28]	; (2a668 <system_gclk_chan_get_hz+0x54>)
   2a64a:	4798      	blx	r3
   2a64c:	0003      	movs	r3, r0
}
   2a64e:	0018      	movs	r0, r3
   2a650:	46bd      	mov	sp, r7
   2a652:	b004      	add	sp, #16
   2a654:	bd80      	pop	{r7, pc}
   2a656:	46c0      	nop			; (mov r8, r8)
   2a658:	0002a221 	.word	0x0002a221
   2a65c:	40000c02 	.word	0x40000c02
   2a660:	40000c00 	.word	0x40000c00
   2a664:	0002a235 	.word	0x0002a235
   2a668:	0002a419 	.word	0x0002a419

0002a66c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2a66c:	b580      	push	{r7, lr}
   2a66e:	b084      	sub	sp, #16
   2a670:	af00      	add	r7, sp, #0
   2a672:	0002      	movs	r2, r0
   2a674:	1dfb      	adds	r3, r7, #7
   2a676:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2a678:	230f      	movs	r3, #15
   2a67a:	18fb      	adds	r3, r7, r3
   2a67c:	2200      	movs	r2, #0
   2a67e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2a680:	1dfb      	adds	r3, r7, #7
   2a682:	781b      	ldrb	r3, [r3, #0]
   2a684:	2b7f      	cmp	r3, #127	; 0x7f
   2a686:	d80b      	bhi.n	2a6a0 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2a688:	4a13      	ldr	r2, [pc, #76]	; (2a6d8 <system_interrupt_clear_pending+0x6c>)
   2a68a:	1dfb      	adds	r3, r7, #7
   2a68c:	781b      	ldrb	r3, [r3, #0]
   2a68e:	b25b      	sxtb	r3, r3
   2a690:	2101      	movs	r1, #1
   2a692:	4099      	lsls	r1, r3
   2a694:	000b      	movs	r3, r1
   2a696:	0019      	movs	r1, r3
   2a698:	23c0      	movs	r3, #192	; 0xc0
   2a69a:	005b      	lsls	r3, r3, #1
   2a69c:	50d1      	str	r1, [r2, r3]
   2a69e:	e014      	b.n	2a6ca <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2a6a0:	1dfb      	adds	r3, r7, #7
   2a6a2:	781b      	ldrb	r3, [r3, #0]
   2a6a4:	b25b      	sxtb	r3, r3
   2a6a6:	330e      	adds	r3, #14
   2a6a8:	d101      	bne.n	2a6ae <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2a6aa:	2317      	movs	r3, #23
   2a6ac:	e010      	b.n	2a6d0 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2a6ae:	1dfb      	adds	r3, r7, #7
   2a6b0:	781b      	ldrb	r3, [r3, #0]
   2a6b2:	b25b      	sxtb	r3, r3
   2a6b4:	3301      	adds	r3, #1
   2a6b6:	d104      	bne.n	2a6c2 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2a6b8:	4b08      	ldr	r3, [pc, #32]	; (2a6dc <system_interrupt_clear_pending+0x70>)
   2a6ba:	2280      	movs	r2, #128	; 0x80
   2a6bc:	0492      	lsls	r2, r2, #18
   2a6be:	605a      	str	r2, [r3, #4]
   2a6c0:	e003      	b.n	2a6ca <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2a6c2:	230f      	movs	r3, #15
   2a6c4:	18fb      	adds	r3, r7, r3
   2a6c6:	2217      	movs	r2, #23
   2a6c8:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2a6ca:	230f      	movs	r3, #15
   2a6cc:	18fb      	adds	r3, r7, r3
   2a6ce:	781b      	ldrb	r3, [r3, #0]
}
   2a6d0:	0018      	movs	r0, r3
   2a6d2:	46bd      	mov	sp, r7
   2a6d4:	b004      	add	sp, #16
   2a6d6:	bd80      	pop	{r7, pc}
   2a6d8:	e000e100 	.word	0xe000e100
   2a6dc:	e000ed00 	.word	0xe000ed00

0002a6e0 <system_pinmux_get_group_from_gpio_pin>:
{
   2a6e0:	b580      	push	{r7, lr}
   2a6e2:	b084      	sub	sp, #16
   2a6e4:	af00      	add	r7, sp, #0
   2a6e6:	0002      	movs	r2, r0
   2a6e8:	1dfb      	adds	r3, r7, #7
   2a6ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a6ec:	230f      	movs	r3, #15
   2a6ee:	18fb      	adds	r3, r7, r3
   2a6f0:	1dfa      	adds	r2, r7, #7
   2a6f2:	7812      	ldrb	r2, [r2, #0]
   2a6f4:	09d2      	lsrs	r2, r2, #7
   2a6f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a6f8:	230e      	movs	r3, #14
   2a6fa:	18fb      	adds	r3, r7, r3
   2a6fc:	1dfa      	adds	r2, r7, #7
   2a6fe:	7812      	ldrb	r2, [r2, #0]
   2a700:	0952      	lsrs	r2, r2, #5
   2a702:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a704:	4b0d      	ldr	r3, [pc, #52]	; (2a73c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a706:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a708:	230f      	movs	r3, #15
   2a70a:	18fb      	adds	r3, r7, r3
   2a70c:	781b      	ldrb	r3, [r3, #0]
   2a70e:	2b00      	cmp	r3, #0
   2a710:	d10f      	bne.n	2a732 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a712:	230f      	movs	r3, #15
   2a714:	18fb      	adds	r3, r7, r3
   2a716:	781b      	ldrb	r3, [r3, #0]
   2a718:	009b      	lsls	r3, r3, #2
   2a71a:	2210      	movs	r2, #16
   2a71c:	4694      	mov	ip, r2
   2a71e:	44bc      	add	ip, r7
   2a720:	4463      	add	r3, ip
   2a722:	3b08      	subs	r3, #8
   2a724:	681a      	ldr	r2, [r3, #0]
   2a726:	230e      	movs	r3, #14
   2a728:	18fb      	adds	r3, r7, r3
   2a72a:	781b      	ldrb	r3, [r3, #0]
   2a72c:	01db      	lsls	r3, r3, #7
   2a72e:	18d3      	adds	r3, r2, r3
   2a730:	e000      	b.n	2a734 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a732:	2300      	movs	r3, #0
}
   2a734:	0018      	movs	r0, r3
   2a736:	46bd      	mov	sp, r7
   2a738:	b004      	add	sp, #16
   2a73a:	bd80      	pop	{r7, pc}
   2a73c:	41004400 	.word	0x41004400

0002a740 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2a740:	b580      	push	{r7, lr}
   2a742:	b088      	sub	sp, #32
   2a744:	af00      	add	r7, sp, #0
   2a746:	60f8      	str	r0, [r7, #12]
   2a748:	60b9      	str	r1, [r7, #8]
   2a74a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2a74c:	2300      	movs	r3, #0
   2a74e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2a750:	687b      	ldr	r3, [r7, #4]
   2a752:	78db      	ldrb	r3, [r3, #3]
   2a754:	2201      	movs	r2, #1
   2a756:	4053      	eors	r3, r2
   2a758:	b2db      	uxtb	r3, r3
   2a75a:	2b00      	cmp	r3, #0
   2a75c:	d035      	beq.n	2a7ca <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2a75e:	687b      	ldr	r3, [r7, #4]
   2a760:	781b      	ldrb	r3, [r3, #0]
   2a762:	2b80      	cmp	r3, #128	; 0x80
   2a764:	d00b      	beq.n	2a77e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2a766:	69fb      	ldr	r3, [r7, #28]
   2a768:	2280      	movs	r2, #128	; 0x80
   2a76a:	0252      	lsls	r2, r2, #9
   2a76c:	4313      	orrs	r3, r2
   2a76e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2a770:	687b      	ldr	r3, [r7, #4]
   2a772:	781b      	ldrb	r3, [r3, #0]
   2a774:	061b      	lsls	r3, r3, #24
   2a776:	001a      	movs	r2, r3
   2a778:	69fb      	ldr	r3, [r7, #28]
   2a77a:	4313      	orrs	r3, r2
   2a77c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a77e:	687b      	ldr	r3, [r7, #4]
   2a780:	785b      	ldrb	r3, [r3, #1]
   2a782:	2b00      	cmp	r3, #0
   2a784:	d003      	beq.n	2a78e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a786:	687b      	ldr	r3, [r7, #4]
   2a788:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a78a:	2b02      	cmp	r3, #2
   2a78c:	d110      	bne.n	2a7b0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2a78e:	69fb      	ldr	r3, [r7, #28]
   2a790:	2280      	movs	r2, #128	; 0x80
   2a792:	0292      	lsls	r2, r2, #10
   2a794:	4313      	orrs	r3, r2
   2a796:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2a798:	687b      	ldr	r3, [r7, #4]
   2a79a:	789b      	ldrb	r3, [r3, #2]
   2a79c:	2b00      	cmp	r3, #0
   2a79e:	d004      	beq.n	2a7aa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2a7a0:	69fb      	ldr	r3, [r7, #28]
   2a7a2:	2280      	movs	r2, #128	; 0x80
   2a7a4:	02d2      	lsls	r2, r2, #11
   2a7a6:	4313      	orrs	r3, r2
   2a7a8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2a7aa:	68fb      	ldr	r3, [r7, #12]
   2a7ac:	68ba      	ldr	r2, [r7, #8]
   2a7ae:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a7b0:	687b      	ldr	r3, [r7, #4]
   2a7b2:	785b      	ldrb	r3, [r3, #1]
   2a7b4:	2b01      	cmp	r3, #1
   2a7b6:	d003      	beq.n	2a7c0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a7b8:	687b      	ldr	r3, [r7, #4]
   2a7ba:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a7bc:	2b02      	cmp	r3, #2
   2a7be:	d107      	bne.n	2a7d0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2a7c0:	69fb      	ldr	r3, [r7, #28]
   2a7c2:	4a22      	ldr	r2, [pc, #136]	; (2a84c <_system_pinmux_config+0x10c>)
   2a7c4:	4013      	ands	r3, r2
   2a7c6:	61fb      	str	r3, [r7, #28]
   2a7c8:	e002      	b.n	2a7d0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2a7ca:	68fb      	ldr	r3, [r7, #12]
   2a7cc:	68ba      	ldr	r2, [r7, #8]
   2a7ce:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2a7d0:	68bb      	ldr	r3, [r7, #8]
   2a7d2:	041b      	lsls	r3, r3, #16
   2a7d4:	0c1b      	lsrs	r3, r3, #16
   2a7d6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2a7d8:	68bb      	ldr	r3, [r7, #8]
   2a7da:	0c1b      	lsrs	r3, r3, #16
   2a7dc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a7de:	69ba      	ldr	r2, [r7, #24]
   2a7e0:	69fb      	ldr	r3, [r7, #28]
   2a7e2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2a7e4:	22a0      	movs	r2, #160	; 0xa0
   2a7e6:	05d2      	lsls	r2, r2, #23
   2a7e8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a7ea:	68fb      	ldr	r3, [r7, #12]
   2a7ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a7ee:	697a      	ldr	r2, [r7, #20]
   2a7f0:	69fb      	ldr	r3, [r7, #28]
   2a7f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2a7f4:	22d0      	movs	r2, #208	; 0xd0
   2a7f6:	0612      	lsls	r2, r2, #24
   2a7f8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a7fa:	68fb      	ldr	r3, [r7, #12]
   2a7fc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2a7fe:	687b      	ldr	r3, [r7, #4]
   2a800:	78db      	ldrb	r3, [r3, #3]
   2a802:	2201      	movs	r2, #1
   2a804:	4053      	eors	r3, r2
   2a806:	b2db      	uxtb	r3, r3
   2a808:	2b00      	cmp	r3, #0
   2a80a:	d01a      	beq.n	2a842 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2a80c:	69fa      	ldr	r2, [r7, #28]
   2a80e:	2380      	movs	r3, #128	; 0x80
   2a810:	02db      	lsls	r3, r3, #11
   2a812:	4013      	ands	r3, r2
   2a814:	d00a      	beq.n	2a82c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a816:	687b      	ldr	r3, [r7, #4]
   2a818:	789b      	ldrb	r3, [r3, #2]
   2a81a:	2b01      	cmp	r3, #1
   2a81c:	d103      	bne.n	2a826 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a81e:	68fb      	ldr	r3, [r7, #12]
   2a820:	68ba      	ldr	r2, [r7, #8]
   2a822:	619a      	str	r2, [r3, #24]
   2a824:	e002      	b.n	2a82c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a826:	68fb      	ldr	r3, [r7, #12]
   2a828:	68ba      	ldr	r2, [r7, #8]
   2a82a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a82c:	687b      	ldr	r3, [r7, #4]
   2a82e:	785b      	ldrb	r3, [r3, #1]
   2a830:	2b01      	cmp	r3, #1
   2a832:	d003      	beq.n	2a83c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a834:	687b      	ldr	r3, [r7, #4]
   2a836:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a838:	2b02      	cmp	r3, #2
   2a83a:	d102      	bne.n	2a842 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a83c:	68fb      	ldr	r3, [r7, #12]
   2a83e:	68ba      	ldr	r2, [r7, #8]
   2a840:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a842:	46c0      	nop			; (mov r8, r8)
   2a844:	46bd      	mov	sp, r7
   2a846:	b008      	add	sp, #32
   2a848:	bd80      	pop	{r7, pc}
   2a84a:	46c0      	nop			; (mov r8, r8)
   2a84c:	fffbffff 	.word	0xfffbffff

0002a850 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a850:	b580      	push	{r7, lr}
   2a852:	b084      	sub	sp, #16
   2a854:	af00      	add	r7, sp, #0
   2a856:	0002      	movs	r2, r0
   2a858:	6039      	str	r1, [r7, #0]
   2a85a:	1dfb      	adds	r3, r7, #7
   2a85c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a85e:	1dfb      	adds	r3, r7, #7
   2a860:	781b      	ldrb	r3, [r3, #0]
   2a862:	0018      	movs	r0, r3
   2a864:	4b0a      	ldr	r3, [pc, #40]	; (2a890 <system_pinmux_pin_set_config+0x40>)
   2a866:	4798      	blx	r3
   2a868:	0003      	movs	r3, r0
   2a86a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a86c:	1dfb      	adds	r3, r7, #7
   2a86e:	781b      	ldrb	r3, [r3, #0]
   2a870:	221f      	movs	r2, #31
   2a872:	4013      	ands	r3, r2
   2a874:	2201      	movs	r2, #1
   2a876:	409a      	lsls	r2, r3
   2a878:	0013      	movs	r3, r2
   2a87a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a87c:	683a      	ldr	r2, [r7, #0]
   2a87e:	68b9      	ldr	r1, [r7, #8]
   2a880:	68fb      	ldr	r3, [r7, #12]
   2a882:	0018      	movs	r0, r3
   2a884:	4b03      	ldr	r3, [pc, #12]	; (2a894 <system_pinmux_pin_set_config+0x44>)
   2a886:	4798      	blx	r3
}
   2a888:	46c0      	nop			; (mov r8, r8)
   2a88a:	46bd      	mov	sp, r7
   2a88c:	b004      	add	sp, #16
   2a88e:	bd80      	pop	{r7, pc}
   2a890:	0002a6e1 	.word	0x0002a6e1
   2a894:	0002a741 	.word	0x0002a741

0002a898 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a898:	b580      	push	{r7, lr}
   2a89a:	af00      	add	r7, sp, #0
	return;
   2a89c:	46c0      	nop			; (mov r8, r8)
}
   2a89e:	46bd      	mov	sp, r7
   2a8a0:	bd80      	pop	{r7, pc}
	...

0002a8a4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a8a4:	b580      	push	{r7, lr}
   2a8a6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a8a8:	4b06      	ldr	r3, [pc, #24]	; (2a8c4 <system_init+0x20>)
   2a8aa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a8ac:	4b06      	ldr	r3, [pc, #24]	; (2a8c8 <system_init+0x24>)
   2a8ae:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a8b0:	4b06      	ldr	r3, [pc, #24]	; (2a8cc <system_init+0x28>)
   2a8b2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a8b4:	4b06      	ldr	r3, [pc, #24]	; (2a8d0 <system_init+0x2c>)
   2a8b6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a8b8:	4b06      	ldr	r3, [pc, #24]	; (2a8d4 <system_init+0x30>)
   2a8ba:	4798      	blx	r3
}
   2a8bc:	46c0      	nop			; (mov r8, r8)
   2a8be:	46bd      	mov	sp, r7
   2a8c0:	bd80      	pop	{r7, pc}
   2a8c2:	46c0      	nop			; (mov r8, r8)
   2a8c4:	00029f25 	.word	0x00029f25
   2a8c8:	000269ed 	.word	0x000269ed
   2a8cc:	00013011 	.word	0x00013011
   2a8d0:	00026dc5 	.word	0x00026dc5
   2a8d4:	0002a899 	.word	0x0002a899

0002a8d8 <system_gclk_chan_get_config_defaults>:
{
   2a8d8:	b580      	push	{r7, lr}
   2a8da:	b082      	sub	sp, #8
   2a8dc:	af00      	add	r7, sp, #0
   2a8de:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a8e0:	687b      	ldr	r3, [r7, #4]
   2a8e2:	2200      	movs	r2, #0
   2a8e4:	701a      	strb	r2, [r3, #0]
}
   2a8e6:	46c0      	nop			; (mov r8, r8)
   2a8e8:	46bd      	mov	sp, r7
   2a8ea:	b002      	add	sp, #8
   2a8ec:	bd80      	pop	{r7, pc}
	...

0002a8f0 <system_apb_clock_set_mask>:
{
   2a8f0:	b580      	push	{r7, lr}
   2a8f2:	b082      	sub	sp, #8
   2a8f4:	af00      	add	r7, sp, #0
   2a8f6:	0002      	movs	r2, r0
   2a8f8:	6039      	str	r1, [r7, #0]
   2a8fa:	1dfb      	adds	r3, r7, #7
   2a8fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a8fe:	1dfb      	adds	r3, r7, #7
   2a900:	781b      	ldrb	r3, [r3, #0]
   2a902:	2b01      	cmp	r3, #1
   2a904:	d00a      	beq.n	2a91c <system_apb_clock_set_mask+0x2c>
   2a906:	2b02      	cmp	r3, #2
   2a908:	d00f      	beq.n	2a92a <system_apb_clock_set_mask+0x3a>
   2a90a:	2b00      	cmp	r3, #0
   2a90c:	d114      	bne.n	2a938 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a90e:	4b0e      	ldr	r3, [pc, #56]	; (2a948 <system_apb_clock_set_mask+0x58>)
   2a910:	4a0d      	ldr	r2, [pc, #52]	; (2a948 <system_apb_clock_set_mask+0x58>)
   2a912:	6991      	ldr	r1, [r2, #24]
   2a914:	683a      	ldr	r2, [r7, #0]
   2a916:	430a      	orrs	r2, r1
   2a918:	619a      	str	r2, [r3, #24]
			break;
   2a91a:	e00f      	b.n	2a93c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a91c:	4b0a      	ldr	r3, [pc, #40]	; (2a948 <system_apb_clock_set_mask+0x58>)
   2a91e:	4a0a      	ldr	r2, [pc, #40]	; (2a948 <system_apb_clock_set_mask+0x58>)
   2a920:	69d1      	ldr	r1, [r2, #28]
   2a922:	683a      	ldr	r2, [r7, #0]
   2a924:	430a      	orrs	r2, r1
   2a926:	61da      	str	r2, [r3, #28]
			break;
   2a928:	e008      	b.n	2a93c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a92a:	4b07      	ldr	r3, [pc, #28]	; (2a948 <system_apb_clock_set_mask+0x58>)
   2a92c:	4a06      	ldr	r2, [pc, #24]	; (2a948 <system_apb_clock_set_mask+0x58>)
   2a92e:	6a11      	ldr	r1, [r2, #32]
   2a930:	683a      	ldr	r2, [r7, #0]
   2a932:	430a      	orrs	r2, r1
   2a934:	621a      	str	r2, [r3, #32]
			break;
   2a936:	e001      	b.n	2a93c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a938:	2317      	movs	r3, #23
   2a93a:	e000      	b.n	2a93e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a93c:	2300      	movs	r3, #0
}
   2a93e:	0018      	movs	r0, r3
   2a940:	46bd      	mov	sp, r7
   2a942:	b002      	add	sp, #8
   2a944:	bd80      	pop	{r7, pc}
   2a946:	46c0      	nop			; (mov r8, r8)
   2a948:	40000400 	.word	0x40000400

0002a94c <system_pinmux_get_config_defaults>:
{
   2a94c:	b580      	push	{r7, lr}
   2a94e:	b082      	sub	sp, #8
   2a950:	af00      	add	r7, sp, #0
   2a952:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a954:	687b      	ldr	r3, [r7, #4]
   2a956:	2280      	movs	r2, #128	; 0x80
   2a958:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a95a:	687b      	ldr	r3, [r7, #4]
   2a95c:	2200      	movs	r2, #0
   2a95e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a960:	687b      	ldr	r3, [r7, #4]
   2a962:	2201      	movs	r2, #1
   2a964:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a966:	687b      	ldr	r3, [r7, #4]
   2a968:	2200      	movs	r2, #0
   2a96a:	70da      	strb	r2, [r3, #3]
}
   2a96c:	46c0      	nop			; (mov r8, r8)
   2a96e:	46bd      	mov	sp, r7
   2a970:	b002      	add	sp, #8
   2a972:	bd80      	pop	{r7, pc}

0002a974 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a974:	b580      	push	{r7, lr}
   2a976:	b084      	sub	sp, #16
   2a978:	af00      	add	r7, sp, #0
   2a97a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a97c:	2300      	movs	r3, #0
   2a97e:	60fb      	str	r3, [r7, #12]
   2a980:	e00c      	b.n	2a99c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a982:	4b0a      	ldr	r3, [pc, #40]	; (2a9ac <_tcc_get_inst_index+0x38>)
   2a984:	68fa      	ldr	r2, [r7, #12]
   2a986:	0092      	lsls	r2, r2, #2
   2a988:	58d2      	ldr	r2, [r2, r3]
   2a98a:	687b      	ldr	r3, [r7, #4]
   2a98c:	429a      	cmp	r2, r3
   2a98e:	d102      	bne.n	2a996 <_tcc_get_inst_index+0x22>
			return i;
   2a990:	68fb      	ldr	r3, [r7, #12]
   2a992:	b2db      	uxtb	r3, r3
   2a994:	e006      	b.n	2a9a4 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a996:	68fb      	ldr	r3, [r7, #12]
   2a998:	3301      	adds	r3, #1
   2a99a:	60fb      	str	r3, [r7, #12]
   2a99c:	68fb      	ldr	r3, [r7, #12]
   2a99e:	2b02      	cmp	r3, #2
   2a9a0:	d9ef      	bls.n	2a982 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a9a2:	2300      	movs	r3, #0
}
   2a9a4:	0018      	movs	r0, r3
   2a9a6:	46bd      	mov	sp, r7
   2a9a8:	b004      	add	sp, #16
   2a9aa:	bd80      	pop	{r7, pc}
   2a9ac:	0003bc60 	.word	0x0003bc60

0002a9b0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a9b0:	b590      	push	{r4, r7, lr}
   2a9b2:	b085      	sub	sp, #20
   2a9b4:	af00      	add	r7, sp, #0
   2a9b6:	6078      	str	r0, [r7, #4]
   2a9b8:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a9ba:	230f      	movs	r3, #15
   2a9bc:	18fc      	adds	r4, r7, r3
   2a9be:	683b      	ldr	r3, [r7, #0]
   2a9c0:	0018      	movs	r0, r3
   2a9c2:	4bad      	ldr	r3, [pc, #692]	; (2ac78 <tcc_get_config_defaults+0x2c8>)
   2a9c4:	4798      	blx	r3
   2a9c6:	0003      	movs	r3, r0
   2a9c8:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a9ca:	687b      	ldr	r3, [r7, #4]
   2a9cc:	2200      	movs	r2, #0
   2a9ce:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a9d0:	230f      	movs	r3, #15
   2a9d2:	18fb      	adds	r3, r7, r3
   2a9d4:	781a      	ldrb	r2, [r3, #0]
   2a9d6:	4ba9      	ldr	r3, [pc, #676]	; (2ac7c <tcc_get_config_defaults+0x2cc>)
   2a9d8:	0092      	lsls	r2, r2, #2
   2a9da:	58d2      	ldr	r2, [r2, r3]
   2a9dc:	687b      	ldr	r3, [r7, #4]
   2a9de:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a9e0:	687b      	ldr	r3, [r7, #4]
   2a9e2:	2200      	movs	r2, #0
   2a9e4:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a9e6:	687b      	ldr	r3, [r7, #4]
   2a9e8:	2200      	movs	r2, #0
   2a9ea:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a9ec:	687b      	ldr	r3, [r7, #4]
   2a9ee:	2200      	movs	r2, #0
   2a9f0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a9f2:	687b      	ldr	r3, [r7, #4]
   2a9f4:	2200      	movs	r2, #0
   2a9f6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a9f8:	687b      	ldr	r3, [r7, #4]
   2a9fa:	2200      	movs	r2, #0
   2a9fc:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a9fe:	687b      	ldr	r3, [r7, #4]
   2aa00:	2200      	movs	r2, #0
   2aa02:	61da      	str	r2, [r3, #28]
   2aa04:	687b      	ldr	r3, [r7, #4]
   2aa06:	2200      	movs	r2, #0
   2aa08:	621a      	str	r2, [r3, #32]
   2aa0a:	687b      	ldr	r3, [r7, #4]
   2aa0c:	2200      	movs	r2, #0
   2aa0e:	625a      	str	r2, [r3, #36]	; 0x24
   2aa10:	687b      	ldr	r3, [r7, #4]
   2aa12:	2200      	movs	r2, #0
   2aa14:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aa16:	687b      	ldr	r3, [r7, #4]
   2aa18:	2200      	movs	r2, #0
   2aa1a:	751a      	strb	r2, [r3, #20]
   2aa1c:	687b      	ldr	r3, [r7, #4]
   2aa1e:	2200      	movs	r2, #0
   2aa20:	755a      	strb	r2, [r3, #21]
   2aa22:	687b      	ldr	r3, [r7, #4]
   2aa24:	2200      	movs	r2, #0
   2aa26:	759a      	strb	r2, [r3, #22]
   2aa28:	687b      	ldr	r3, [r7, #4]
   2aa2a:	2200      	movs	r2, #0
   2aa2c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2aa2e:	687b      	ldr	r3, [r7, #4]
   2aa30:	2200      	movs	r2, #0
   2aa32:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2aa34:	687b      	ldr	r3, [r7, #4]
   2aa36:	2200      	movs	r2, #0
   2aa38:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aa3a:	687b      	ldr	r3, [r7, #4]
   2aa3c:	2200      	movs	r2, #0
   2aa3e:	741a      	strb	r2, [r3, #16]
   2aa40:	687b      	ldr	r3, [r7, #4]
   2aa42:	2200      	movs	r2, #0
   2aa44:	745a      	strb	r2, [r3, #17]
   2aa46:	687b      	ldr	r3, [r7, #4]
   2aa48:	2200      	movs	r2, #0
   2aa4a:	749a      	strb	r2, [r3, #18]
   2aa4c:	687b      	ldr	r3, [r7, #4]
   2aa4e:	2200      	movs	r2, #0
   2aa50:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2aa52:	687b      	ldr	r3, [r7, #4]
   2aa54:	222c      	movs	r2, #44	; 0x2c
   2aa56:	2100      	movs	r1, #0
   2aa58:	5499      	strb	r1, [r3, r2]
   2aa5a:	687b      	ldr	r3, [r7, #4]
   2aa5c:	222d      	movs	r2, #45	; 0x2d
   2aa5e:	2100      	movs	r1, #0
   2aa60:	5499      	strb	r1, [r3, r2]
   2aa62:	687b      	ldr	r3, [r7, #4]
   2aa64:	222e      	movs	r2, #46	; 0x2e
   2aa66:	2100      	movs	r1, #0
   2aa68:	5499      	strb	r1, [r3, r2]
   2aa6a:	687b      	ldr	r3, [r7, #4]
   2aa6c:	222f      	movs	r2, #47	; 0x2f
   2aa6e:	2100      	movs	r1, #0
   2aa70:	5499      	strb	r1, [r3, r2]
   2aa72:	687b      	ldr	r3, [r7, #4]
   2aa74:	2230      	movs	r2, #48	; 0x30
   2aa76:	2100      	movs	r1, #0
   2aa78:	5499      	strb	r1, [r3, r2]
   2aa7a:	687b      	ldr	r3, [r7, #4]
   2aa7c:	2231      	movs	r2, #49	; 0x31
   2aa7e:	2100      	movs	r1, #0
   2aa80:	5499      	strb	r1, [r3, r2]
   2aa82:	687b      	ldr	r3, [r7, #4]
   2aa84:	2232      	movs	r2, #50	; 0x32
   2aa86:	2100      	movs	r1, #0
   2aa88:	5499      	strb	r1, [r3, r2]
   2aa8a:	687b      	ldr	r3, [r7, #4]
   2aa8c:	2233      	movs	r2, #51	; 0x33
   2aa8e:	2100      	movs	r1, #0
   2aa90:	5499      	strb	r1, [r3, r2]
   2aa92:	687b      	ldr	r3, [r7, #4]
   2aa94:	2234      	movs	r2, #52	; 0x34
   2aa96:	2100      	movs	r1, #0
   2aa98:	5499      	strb	r1, [r3, r2]
   2aa9a:	687b      	ldr	r3, [r7, #4]
   2aa9c:	2235      	movs	r2, #53	; 0x35
   2aa9e:	2100      	movs	r1, #0
   2aaa0:	5499      	strb	r1, [r3, r2]
   2aaa2:	687b      	ldr	r3, [r7, #4]
   2aaa4:	2236      	movs	r2, #54	; 0x36
   2aaa6:	2100      	movs	r1, #0
   2aaa8:	5499      	strb	r1, [r3, r2]
   2aaaa:	687b      	ldr	r3, [r7, #4]
   2aaac:	2237      	movs	r2, #55	; 0x37
   2aaae:	2100      	movs	r1, #0
   2aab0:	5499      	strb	r1, [r3, r2]
   2aab2:	687b      	ldr	r3, [r7, #4]
   2aab4:	2238      	movs	r2, #56	; 0x38
   2aab6:	2100      	movs	r1, #0
   2aab8:	5499      	strb	r1, [r3, r2]
   2aaba:	687b      	ldr	r3, [r7, #4]
   2aabc:	2239      	movs	r2, #57	; 0x39
   2aabe:	2100      	movs	r1, #0
   2aac0:	5499      	strb	r1, [r3, r2]
   2aac2:	687b      	ldr	r3, [r7, #4]
   2aac4:	223a      	movs	r2, #58	; 0x3a
   2aac6:	2100      	movs	r1, #0
   2aac8:	5499      	strb	r1, [r3, r2]
   2aaca:	687b      	ldr	r3, [r7, #4]
   2aacc:	223b      	movs	r2, #59	; 0x3b
   2aace:	2100      	movs	r1, #0
   2aad0:	5499      	strb	r1, [r3, r2]
   2aad2:	687b      	ldr	r3, [r7, #4]
   2aad4:	223c      	movs	r2, #60	; 0x3c
   2aad6:	2100      	movs	r1, #0
   2aad8:	5499      	strb	r1, [r3, r2]
   2aada:	687b      	ldr	r3, [r7, #4]
   2aadc:	223d      	movs	r2, #61	; 0x3d
   2aade:	2100      	movs	r1, #0
   2aae0:	5499      	strb	r1, [r3, r2]
   2aae2:	687b      	ldr	r3, [r7, #4]
   2aae4:	223e      	movs	r2, #62	; 0x3e
   2aae6:	2100      	movs	r1, #0
   2aae8:	5499      	strb	r1, [r3, r2]
   2aaea:	687b      	ldr	r3, [r7, #4]
   2aaec:	223f      	movs	r2, #63	; 0x3f
   2aaee:	2100      	movs	r1, #0
   2aaf0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2aaf2:	687b      	ldr	r3, [r7, #4]
   2aaf4:	2240      	movs	r2, #64	; 0x40
   2aaf6:	2100      	movs	r1, #0
   2aaf8:	5499      	strb	r1, [r3, r2]
   2aafa:	687b      	ldr	r3, [r7, #4]
   2aafc:	2241      	movs	r2, #65	; 0x41
   2aafe:	2100      	movs	r1, #0
   2ab00:	5499      	strb	r1, [r3, r2]
   2ab02:	687b      	ldr	r3, [r7, #4]
   2ab04:	2242      	movs	r2, #66	; 0x42
   2ab06:	2100      	movs	r1, #0
   2ab08:	5499      	strb	r1, [r3, r2]
   2ab0a:	687b      	ldr	r3, [r7, #4]
   2ab0c:	2243      	movs	r2, #67	; 0x43
   2ab0e:	2100      	movs	r1, #0
   2ab10:	5499      	strb	r1, [r3, r2]
   2ab12:	687b      	ldr	r3, [r7, #4]
   2ab14:	2244      	movs	r2, #68	; 0x44
   2ab16:	2100      	movs	r1, #0
   2ab18:	5499      	strb	r1, [r3, r2]
   2ab1a:	687b      	ldr	r3, [r7, #4]
   2ab1c:	2245      	movs	r2, #69	; 0x45
   2ab1e:	2100      	movs	r1, #0
   2ab20:	5499      	strb	r1, [r3, r2]
   2ab22:	687b      	ldr	r3, [r7, #4]
   2ab24:	2246      	movs	r2, #70	; 0x46
   2ab26:	2100      	movs	r1, #0
   2ab28:	5499      	strb	r1, [r3, r2]
   2ab2a:	687b      	ldr	r3, [r7, #4]
   2ab2c:	2247      	movs	r2, #71	; 0x47
   2ab2e:	2100      	movs	r1, #0
   2ab30:	5499      	strb	r1, [r3, r2]
   2ab32:	687b      	ldr	r3, [r7, #4]
   2ab34:	2248      	movs	r2, #72	; 0x48
   2ab36:	2100      	movs	r1, #0
   2ab38:	5499      	strb	r1, [r3, r2]
   2ab3a:	687b      	ldr	r3, [r7, #4]
   2ab3c:	2249      	movs	r2, #73	; 0x49
   2ab3e:	2100      	movs	r1, #0
   2ab40:	5499      	strb	r1, [r3, r2]
   2ab42:	687b      	ldr	r3, [r7, #4]
   2ab44:	224a      	movs	r2, #74	; 0x4a
   2ab46:	2100      	movs	r1, #0
   2ab48:	5499      	strb	r1, [r3, r2]
   2ab4a:	687b      	ldr	r3, [r7, #4]
   2ab4c:	224b      	movs	r2, #75	; 0x4b
   2ab4e:	2100      	movs	r1, #0
   2ab50:	5499      	strb	r1, [r3, r2]
   2ab52:	687b      	ldr	r3, [r7, #4]
   2ab54:	224c      	movs	r2, #76	; 0x4c
   2ab56:	2100      	movs	r1, #0
   2ab58:	5499      	strb	r1, [r3, r2]
   2ab5a:	687b      	ldr	r3, [r7, #4]
   2ab5c:	224d      	movs	r2, #77	; 0x4d
   2ab5e:	2100      	movs	r1, #0
   2ab60:	5499      	strb	r1, [r3, r2]
   2ab62:	687b      	ldr	r3, [r7, #4]
   2ab64:	224e      	movs	r2, #78	; 0x4e
   2ab66:	2100      	movs	r1, #0
   2ab68:	5499      	strb	r1, [r3, r2]
   2ab6a:	687b      	ldr	r3, [r7, #4]
   2ab6c:	224f      	movs	r2, #79	; 0x4f
   2ab6e:	2100      	movs	r1, #0
   2ab70:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2ab72:	687b      	ldr	r3, [r7, #4]
   2ab74:	2250      	movs	r2, #80	; 0x50
   2ab76:	2100      	movs	r1, #0
   2ab78:	5499      	strb	r1, [r3, r2]
   2ab7a:	687b      	ldr	r3, [r7, #4]
   2ab7c:	2251      	movs	r2, #81	; 0x51
   2ab7e:	2100      	movs	r1, #0
   2ab80:	5499      	strb	r1, [r3, r2]
   2ab82:	687b      	ldr	r3, [r7, #4]
   2ab84:	2252      	movs	r2, #82	; 0x52
   2ab86:	2100      	movs	r1, #0
   2ab88:	5499      	strb	r1, [r3, r2]
   2ab8a:	687b      	ldr	r3, [r7, #4]
   2ab8c:	2253      	movs	r2, #83	; 0x53
   2ab8e:	2100      	movs	r1, #0
   2ab90:	5499      	strb	r1, [r3, r2]
   2ab92:	687b      	ldr	r3, [r7, #4]
   2ab94:	2254      	movs	r2, #84	; 0x54
   2ab96:	2100      	movs	r1, #0
   2ab98:	5499      	strb	r1, [r3, r2]
   2ab9a:	687b      	ldr	r3, [r7, #4]
   2ab9c:	2255      	movs	r2, #85	; 0x55
   2ab9e:	2100      	movs	r1, #0
   2aba0:	5499      	strb	r1, [r3, r2]
   2aba2:	687b      	ldr	r3, [r7, #4]
   2aba4:	2256      	movs	r2, #86	; 0x56
   2aba6:	2100      	movs	r1, #0
   2aba8:	5499      	strb	r1, [r3, r2]
   2abaa:	687b      	ldr	r3, [r7, #4]
   2abac:	2257      	movs	r2, #87	; 0x57
   2abae:	2100      	movs	r1, #0
   2abb0:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2abb2:	687b      	ldr	r3, [r7, #4]
   2abb4:	2298      	movs	r2, #152	; 0x98
   2abb6:	2100      	movs	r1, #0
   2abb8:	5499      	strb	r1, [r3, r2]
   2abba:	687b      	ldr	r3, [r7, #4]
   2abbc:	2200      	movs	r2, #0
   2abbe:	659a      	str	r2, [r3, #88]	; 0x58
   2abc0:	687b      	ldr	r3, [r7, #4]
   2abc2:	2200      	movs	r2, #0
   2abc4:	679a      	str	r2, [r3, #120]	; 0x78
   2abc6:	687b      	ldr	r3, [r7, #4]
   2abc8:	2299      	movs	r2, #153	; 0x99
   2abca:	2100      	movs	r1, #0
   2abcc:	5499      	strb	r1, [r3, r2]
   2abce:	687b      	ldr	r3, [r7, #4]
   2abd0:	2200      	movs	r2, #0
   2abd2:	65da      	str	r2, [r3, #92]	; 0x5c
   2abd4:	687b      	ldr	r3, [r7, #4]
   2abd6:	2200      	movs	r2, #0
   2abd8:	67da      	str	r2, [r3, #124]	; 0x7c
   2abda:	687b      	ldr	r3, [r7, #4]
   2abdc:	229a      	movs	r2, #154	; 0x9a
   2abde:	2100      	movs	r1, #0
   2abe0:	5499      	strb	r1, [r3, r2]
   2abe2:	687b      	ldr	r3, [r7, #4]
   2abe4:	2200      	movs	r2, #0
   2abe6:	661a      	str	r2, [r3, #96]	; 0x60
   2abe8:	687b      	ldr	r3, [r7, #4]
   2abea:	2280      	movs	r2, #128	; 0x80
   2abec:	2100      	movs	r1, #0
   2abee:	5099      	str	r1, [r3, r2]
   2abf0:	687b      	ldr	r3, [r7, #4]
   2abf2:	229b      	movs	r2, #155	; 0x9b
   2abf4:	2100      	movs	r1, #0
   2abf6:	5499      	strb	r1, [r3, r2]
   2abf8:	687b      	ldr	r3, [r7, #4]
   2abfa:	2200      	movs	r2, #0
   2abfc:	665a      	str	r2, [r3, #100]	; 0x64
   2abfe:	687b      	ldr	r3, [r7, #4]
   2ac00:	2284      	movs	r2, #132	; 0x84
   2ac02:	2100      	movs	r1, #0
   2ac04:	5099      	str	r1, [r3, r2]
   2ac06:	687b      	ldr	r3, [r7, #4]
   2ac08:	229c      	movs	r2, #156	; 0x9c
   2ac0a:	2100      	movs	r1, #0
   2ac0c:	5499      	strb	r1, [r3, r2]
   2ac0e:	687b      	ldr	r3, [r7, #4]
   2ac10:	2200      	movs	r2, #0
   2ac12:	669a      	str	r2, [r3, #104]	; 0x68
   2ac14:	687b      	ldr	r3, [r7, #4]
   2ac16:	2288      	movs	r2, #136	; 0x88
   2ac18:	2100      	movs	r1, #0
   2ac1a:	5099      	str	r1, [r3, r2]
   2ac1c:	687b      	ldr	r3, [r7, #4]
   2ac1e:	229d      	movs	r2, #157	; 0x9d
   2ac20:	2100      	movs	r1, #0
   2ac22:	5499      	strb	r1, [r3, r2]
   2ac24:	687b      	ldr	r3, [r7, #4]
   2ac26:	2200      	movs	r2, #0
   2ac28:	66da      	str	r2, [r3, #108]	; 0x6c
   2ac2a:	687b      	ldr	r3, [r7, #4]
   2ac2c:	228c      	movs	r2, #140	; 0x8c
   2ac2e:	2100      	movs	r1, #0
   2ac30:	5099      	str	r1, [r3, r2]
   2ac32:	687b      	ldr	r3, [r7, #4]
   2ac34:	229e      	movs	r2, #158	; 0x9e
   2ac36:	2100      	movs	r1, #0
   2ac38:	5499      	strb	r1, [r3, r2]
   2ac3a:	687b      	ldr	r3, [r7, #4]
   2ac3c:	2200      	movs	r2, #0
   2ac3e:	671a      	str	r2, [r3, #112]	; 0x70
   2ac40:	687b      	ldr	r3, [r7, #4]
   2ac42:	2290      	movs	r2, #144	; 0x90
   2ac44:	2100      	movs	r1, #0
   2ac46:	5099      	str	r1, [r3, r2]
   2ac48:	687b      	ldr	r3, [r7, #4]
   2ac4a:	229f      	movs	r2, #159	; 0x9f
   2ac4c:	2100      	movs	r1, #0
   2ac4e:	5499      	strb	r1, [r3, r2]
   2ac50:	687b      	ldr	r3, [r7, #4]
   2ac52:	2200      	movs	r2, #0
   2ac54:	675a      	str	r2, [r3, #116]	; 0x74
   2ac56:	687b      	ldr	r3, [r7, #4]
   2ac58:	2294      	movs	r2, #148	; 0x94
   2ac5a:	2100      	movs	r1, #0
   2ac5c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2ac5e:	687b      	ldr	r3, [r7, #4]
   2ac60:	22a0      	movs	r2, #160	; 0xa0
   2ac62:	2101      	movs	r1, #1
   2ac64:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2ac66:	687b      	ldr	r3, [r7, #4]
   2ac68:	22a1      	movs	r2, #161	; 0xa1
   2ac6a:	2100      	movs	r1, #0
   2ac6c:	5499      	strb	r1, [r3, r2]
}
   2ac6e:	46c0      	nop			; (mov r8, r8)
   2ac70:	46bd      	mov	sp, r7
   2ac72:	b005      	add	sp, #20
   2ac74:	bd90      	pop	{r4, r7, pc}
   2ac76:	46c0      	nop			; (mov r8, r8)
   2ac78:	0002a975 	.word	0x0002a975
   2ac7c:	0003bc7c 	.word	0x0003bc7c

0002ac80 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ac80:	b580      	push	{r7, lr}
   2ac82:	b086      	sub	sp, #24
   2ac84:	af00      	add	r7, sp, #0
   2ac86:	60b9      	str	r1, [r7, #8]
   2ac88:	607a      	str	r2, [r7, #4]
   2ac8a:	230f      	movs	r3, #15
   2ac8c:	18fb      	adds	r3, r7, r3
   2ac8e:	1c02      	adds	r2, r0, #0
   2ac90:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2ac92:	2300      	movs	r3, #0
   2ac94:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ac96:	2300      	movs	r3, #0
   2ac98:	613b      	str	r3, [r7, #16]
   2ac9a:	e01d      	b.n	2acd8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2ac9c:	68ba      	ldr	r2, [r7, #8]
   2ac9e:	693b      	ldr	r3, [r7, #16]
   2aca0:	18d3      	adds	r3, r2, r3
   2aca2:	3310      	adds	r3, #16
   2aca4:	781b      	ldrb	r3, [r3, #0]
   2aca6:	2b01      	cmp	r3, #1
   2aca8:	d113      	bne.n	2acd2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2acaa:	230f      	movs	r3, #15
   2acac:	18fb      	adds	r3, r7, r3
   2acae:	781b      	ldrb	r3, [r3, #0]
   2acb0:	4a1b      	ldr	r2, [pc, #108]	; (2ad20 <_tcc_build_ctrla+0xa0>)
   2acb2:	5cd3      	ldrb	r3, [r2, r3]
   2acb4:	001a      	movs	r2, r3
   2acb6:	693b      	ldr	r3, [r7, #16]
   2acb8:	429a      	cmp	r2, r3
   2acba:	da01      	bge.n	2acc0 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2acbc:	2317      	movs	r3, #23
   2acbe:	e02a      	b.n	2ad16 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2acc0:	2380      	movs	r3, #128	; 0x80
   2acc2:	045a      	lsls	r2, r3, #17
   2acc4:	693b      	ldr	r3, [r7, #16]
   2acc6:	409a      	lsls	r2, r3
   2acc8:	0013      	movs	r3, r2
   2acca:	001a      	movs	r2, r3
   2accc:	697b      	ldr	r3, [r7, #20]
   2acce:	4313      	orrs	r3, r2
   2acd0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2acd2:	693b      	ldr	r3, [r7, #16]
   2acd4:	3301      	adds	r3, #1
   2acd6:	613b      	str	r3, [r7, #16]
   2acd8:	693b      	ldr	r3, [r7, #16]
   2acda:	2b03      	cmp	r3, #3
   2acdc:	ddde      	ble.n	2ac9c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2acde:	68bb      	ldr	r3, [r7, #8]
   2ace0:	22a1      	movs	r2, #161	; 0xa1
   2ace2:	5c9b      	ldrb	r3, [r3, r2]
   2ace4:	2b00      	cmp	r3, #0
   2ace6:	d004      	beq.n	2acf2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2ace8:	697b      	ldr	r3, [r7, #20]
   2acea:	2280      	movs	r2, #128	; 0x80
   2acec:	0112      	lsls	r2, r2, #4
   2acee:	4313      	orrs	r3, r2
   2acf0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2acf2:	68bb      	ldr	r3, [r7, #8]
   2acf4:	7b1b      	ldrb	r3, [r3, #12]
   2acf6:	031b      	lsls	r3, r3, #12
   2acf8:	001a      	movs	r2, r3
   2acfa:	697b      	ldr	r3, [r7, #20]
   2acfc:	4313      	orrs	r3, r2
   2acfe:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2ad00:	68bb      	ldr	r3, [r7, #8]
   2ad02:	7adb      	ldrb	r3, [r3, #11]
   2ad04:	021b      	lsls	r3, r3, #8
   2ad06:	001a      	movs	r2, r3
   2ad08:	697b      	ldr	r3, [r7, #20]
   2ad0a:	4313      	orrs	r3, r2
   2ad0c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2ad0e:	687b      	ldr	r3, [r7, #4]
   2ad10:	697a      	ldr	r2, [r7, #20]
   2ad12:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2ad14:	2300      	movs	r3, #0
}
   2ad16:	0018      	movs	r0, r3
   2ad18:	46bd      	mov	sp, r7
   2ad1a:	b006      	add	sp, #24
   2ad1c:	bd80      	pop	{r7, pc}
   2ad1e:	46c0      	nop			; (mov r8, r8)
   2ad20:	0003bc88 	.word	0x0003bc88

0002ad24 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2ad24:	b580      	push	{r7, lr}
   2ad26:	b086      	sub	sp, #24
   2ad28:	af00      	add	r7, sp, #0
   2ad2a:	60b9      	str	r1, [r7, #8]
   2ad2c:	607a      	str	r2, [r7, #4]
   2ad2e:	230f      	movs	r3, #15
   2ad30:	18fb      	adds	r3, r7, r3
   2ad32:	1c02      	adds	r2, r0, #0
   2ad34:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2ad36:	2317      	movs	r3, #23
   2ad38:	18fb      	adds	r3, r7, r3
   2ad3a:	2200      	movs	r2, #0
   2ad3c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2ad3e:	68bb      	ldr	r3, [r7, #8]
   2ad40:	7a1b      	ldrb	r3, [r3, #8]
   2ad42:	2b00      	cmp	r3, #0
   2ad44:	d007      	beq.n	2ad56 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2ad46:	2317      	movs	r3, #23
   2ad48:	18fb      	adds	r3, r7, r3
   2ad4a:	2217      	movs	r2, #23
   2ad4c:	18ba      	adds	r2, r7, r2
   2ad4e:	7812      	ldrb	r2, [r2, #0]
   2ad50:	2104      	movs	r1, #4
   2ad52:	430a      	orrs	r2, r1
   2ad54:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2ad56:	68bb      	ldr	r3, [r7, #8]
   2ad58:	7a5b      	ldrb	r3, [r3, #9]
   2ad5a:	2b01      	cmp	r3, #1
   2ad5c:	d107      	bne.n	2ad6e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2ad5e:	2317      	movs	r3, #23
   2ad60:	18fb      	adds	r3, r7, r3
   2ad62:	2217      	movs	r2, #23
   2ad64:	18ba      	adds	r2, r7, r2
   2ad66:	7812      	ldrb	r2, [r2, #0]
   2ad68:	2101      	movs	r1, #1
   2ad6a:	430a      	orrs	r2, r1
   2ad6c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2ad6e:	687b      	ldr	r3, [r7, #4]
   2ad70:	2217      	movs	r2, #23
   2ad72:	18ba      	adds	r2, r7, r2
   2ad74:	7812      	ldrb	r2, [r2, #0]
   2ad76:	701a      	strb	r2, [r3, #0]
}
   2ad78:	46c0      	nop			; (mov r8, r8)
   2ad7a:	46bd      	mov	sp, r7
   2ad7c:	b006      	add	sp, #24
   2ad7e:	bd80      	pop	{r7, pc}

0002ad80 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ad80:	b580      	push	{r7, lr}
   2ad82:	b088      	sub	sp, #32
   2ad84:	af00      	add	r7, sp, #0
   2ad86:	60b9      	str	r1, [r7, #8]
   2ad88:	607a      	str	r2, [r7, #4]
   2ad8a:	230f      	movs	r3, #15
   2ad8c:	18fb      	adds	r3, r7, r3
   2ad8e:	1c02      	adds	r2, r0, #0
   2ad90:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2ad92:	230f      	movs	r3, #15
   2ad94:	18fb      	adds	r3, r7, r3
   2ad96:	781a      	ldrb	r2, [r3, #0]
   2ad98:	231b      	movs	r3, #27
   2ad9a:	18fb      	adds	r3, r7, r3
   2ad9c:	493e      	ldr	r1, [pc, #248]	; (2ae98 <_tcc_build_faults+0x118>)
   2ad9e:	5c8a      	ldrb	r2, [r1, r2]
   2ada0:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2ada2:	2300      	movs	r3, #0
   2ada4:	61fb      	str	r3, [r7, #28]
   2ada6:	e06e      	b.n	2ae86 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2ada8:	69fa      	ldr	r2, [r7, #28]
   2adaa:	0013      	movs	r3, r2
   2adac:	009b      	lsls	r3, r3, #2
   2adae:	189b      	adds	r3, r3, r2
   2adb0:	005b      	lsls	r3, r3, #1
   2adb2:	3328      	adds	r3, #40	; 0x28
   2adb4:	68ba      	ldr	r2, [r7, #8]
   2adb6:	18d3      	adds	r3, r2, r3
   2adb8:	3304      	adds	r3, #4
   2adba:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2adbc:	697b      	ldr	r3, [r7, #20]
   2adbe:	7a5b      	ldrb	r3, [r3, #9]
   2adc0:	221b      	movs	r2, #27
   2adc2:	18ba      	adds	r2, r7, r2
   2adc4:	7812      	ldrb	r2, [r2, #0]
   2adc6:	429a      	cmp	r2, r3
   2adc8:	d801      	bhi.n	2adce <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2adca:	2317      	movs	r3, #23
   2adcc:	e05f      	b.n	2ae8e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2adce:	697b      	ldr	r3, [r7, #20]
   2add0:	781b      	ldrb	r3, [r3, #0]
   2add2:	2b0f      	cmp	r3, #15
   2add4:	d901      	bls.n	2adda <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2add6:	2317      	movs	r3, #23
   2add8:	e059      	b.n	2ae8e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2adda:	697b      	ldr	r3, [r7, #20]
   2addc:	781b      	ldrb	r3, [r3, #0]
   2adde:	061b      	lsls	r3, r3, #24
   2ade0:	001a      	movs	r2, r3
   2ade2:	23f0      	movs	r3, #240	; 0xf0
   2ade4:	051b      	lsls	r3, r3, #20
   2ade6:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2ade8:	697b      	ldr	r3, [r7, #20]
   2adea:	785b      	ldrb	r3, [r3, #1]
   2adec:	041b      	lsls	r3, r3, #16
   2adee:	0019      	movs	r1, r3
   2adf0:	23ff      	movs	r3, #255	; 0xff
   2adf2:	041b      	lsls	r3, r3, #16
   2adf4:	400b      	ands	r3, r1
   2adf6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2adf8:	697b      	ldr	r3, [r7, #20]
   2adfa:	789b      	ldrb	r3, [r3, #2]
   2adfc:	2b00      	cmp	r3, #0
   2adfe:	d001      	beq.n	2ae04 <_tcc_build_faults+0x84>
   2ae00:	2380      	movs	r3, #128	; 0x80
   2ae02:	e000      	b.n	2ae06 <_tcc_build_faults+0x86>
   2ae04:	2300      	movs	r3, #0
   2ae06:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2ae08:	697b      	ldr	r3, [r7, #20]
   2ae0a:	78db      	ldrb	r3, [r3, #3]
   2ae0c:	2b00      	cmp	r3, #0
   2ae0e:	d001      	beq.n	2ae14 <_tcc_build_faults+0x94>
   2ae10:	2308      	movs	r3, #8
   2ae12:	e000      	b.n	2ae16 <_tcc_build_faults+0x96>
   2ae14:	2300      	movs	r3, #0
   2ae16:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2ae18:	697b      	ldr	r3, [r7, #20]
   2ae1a:	791b      	ldrb	r3, [r3, #4]
   2ae1c:	2b00      	cmp	r3, #0
   2ae1e:	d001      	beq.n	2ae24 <_tcc_build_faults+0xa4>
   2ae20:	2310      	movs	r3, #16
   2ae22:	e000      	b.n	2ae26 <_tcc_build_faults+0xa6>
   2ae24:	2300      	movs	r3, #0
   2ae26:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2ae28:	697b      	ldr	r3, [r7, #20]
   2ae2a:	795b      	ldrb	r3, [r3, #5]
   2ae2c:	0019      	movs	r1, r3
   2ae2e:	2303      	movs	r3, #3
   2ae30:	400b      	ands	r3, r1
   2ae32:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2ae34:	697b      	ldr	r3, [r7, #20]
   2ae36:	799b      	ldrb	r3, [r3, #6]
   2ae38:	015b      	lsls	r3, r3, #5
   2ae3a:	0019      	movs	r1, r3
   2ae3c:	2360      	movs	r3, #96	; 0x60
   2ae3e:	400b      	ands	r3, r1
   2ae40:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2ae42:	697b      	ldr	r3, [r7, #20]
   2ae44:	79db      	ldrb	r3, [r3, #7]
   2ae46:	021b      	lsls	r3, r3, #8
   2ae48:	0019      	movs	r1, r3
   2ae4a:	23c0      	movs	r3, #192	; 0xc0
   2ae4c:	009b      	lsls	r3, r3, #2
   2ae4e:	400b      	ands	r3, r1
   2ae50:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2ae52:	697b      	ldr	r3, [r7, #20]
   2ae54:	7a1b      	ldrb	r3, [r3, #8]
   2ae56:	031b      	lsls	r3, r3, #12
   2ae58:	0019      	movs	r1, r3
   2ae5a:	23e0      	movs	r3, #224	; 0xe0
   2ae5c:	01db      	lsls	r3, r3, #7
   2ae5e:	400b      	ands	r3, r1
   2ae60:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2ae62:	697b      	ldr	r3, [r7, #20]
   2ae64:	7a5b      	ldrb	r3, [r3, #9]
   2ae66:	029b      	lsls	r3, r3, #10
   2ae68:	0019      	movs	r1, r3
   2ae6a:	23c0      	movs	r3, #192	; 0xc0
   2ae6c:	011b      	lsls	r3, r3, #4
   2ae6e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2ae70:	4313      	orrs	r3, r2
   2ae72:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2ae74:	69fb      	ldr	r3, [r7, #28]
   2ae76:	009b      	lsls	r3, r3, #2
   2ae78:	687a      	ldr	r2, [r7, #4]
   2ae7a:	18d3      	adds	r3, r2, r3
   2ae7c:	693a      	ldr	r2, [r7, #16]
   2ae7e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2ae80:	69fb      	ldr	r3, [r7, #28]
   2ae82:	3301      	adds	r3, #1
   2ae84:	61fb      	str	r3, [r7, #28]
   2ae86:	69fb      	ldr	r3, [r7, #28]
   2ae88:	2b01      	cmp	r3, #1
   2ae8a:	dd8d      	ble.n	2ada8 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2ae8c:	2300      	movs	r3, #0
}
   2ae8e:	0018      	movs	r0, r3
   2ae90:	46bd      	mov	sp, r7
   2ae92:	b008      	add	sp, #32
   2ae94:	bd80      	pop	{r7, pc}
   2ae96:	46c0      	nop			; (mov r8, r8)
   2ae98:	0003bc88 	.word	0x0003bc88

0002ae9c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ae9c:	b580      	push	{r7, lr}
   2ae9e:	b088      	sub	sp, #32
   2aea0:	af00      	add	r7, sp, #0
   2aea2:	60b9      	str	r1, [r7, #8]
   2aea4:	607a      	str	r2, [r7, #4]
   2aea6:	230f      	movs	r3, #15
   2aea8:	18fb      	adds	r3, r7, r3
   2aeaa:	1c02      	adds	r2, r0, #0
   2aeac:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2aeae:	230f      	movs	r3, #15
   2aeb0:	18fb      	adds	r3, r7, r3
   2aeb2:	781a      	ldrb	r2, [r3, #0]
   2aeb4:	2317      	movs	r3, #23
   2aeb6:	18fb      	adds	r3, r7, r3
   2aeb8:	492d      	ldr	r1, [pc, #180]	; (2af70 <_tcc_build_drvctrl+0xd4>)
   2aeba:	5c8a      	ldrb	r2, [r1, r2]
   2aebc:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2aebe:	2300      	movs	r3, #0
   2aec0:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2aec2:	2300      	movs	r3, #0
   2aec4:	61fb      	str	r3, [r7, #28]
   2aec6:	e048      	b.n	2af5a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2aec8:	68ba      	ldr	r2, [r7, #8]
   2aeca:	2150      	movs	r1, #80	; 0x50
   2aecc:	69fb      	ldr	r3, [r7, #28]
   2aece:	18d3      	adds	r3, r2, r3
   2aed0:	185b      	adds	r3, r3, r1
   2aed2:	781b      	ldrb	r3, [r3, #0]
   2aed4:	2b00      	cmp	r3, #0
   2aed6:	d010      	beq.n	2aefa <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2aed8:	2317      	movs	r3, #23
   2aeda:	18fb      	adds	r3, r7, r3
   2aedc:	781a      	ldrb	r2, [r3, #0]
   2aede:	69fb      	ldr	r3, [r7, #28]
   2aee0:	429a      	cmp	r2, r3
   2aee2:	d801      	bhi.n	2aee8 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2aee4:	2317      	movs	r3, #23
   2aee6:	e03f      	b.n	2af68 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2aee8:	2380      	movs	r3, #128	; 0x80
   2aeea:	025a      	lsls	r2, r3, #9
   2aeec:	69fb      	ldr	r3, [r7, #28]
   2aeee:	409a      	lsls	r2, r3
   2aef0:	0013      	movs	r3, r2
   2aef2:	001a      	movs	r2, r3
   2aef4:	69bb      	ldr	r3, [r7, #24]
   2aef6:	4313      	orrs	r3, r2
   2aef8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2aefa:	68ba      	ldr	r2, [r7, #8]
   2aefc:	69fb      	ldr	r3, [r7, #28]
   2aefe:	331c      	adds	r3, #28
   2af00:	005b      	lsls	r3, r3, #1
   2af02:	18d3      	adds	r3, r2, r3
   2af04:	3309      	adds	r3, #9
   2af06:	781b      	ldrb	r3, [r3, #0]
   2af08:	2b00      	cmp	r3, #0
   2af0a:	d023      	beq.n	2af54 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2af0c:	2317      	movs	r3, #23
   2af0e:	18fb      	adds	r3, r7, r3
   2af10:	781a      	ldrb	r2, [r3, #0]
   2af12:	69fb      	ldr	r3, [r7, #28]
   2af14:	429a      	cmp	r2, r3
   2af16:	d801      	bhi.n	2af1c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2af18:	2317      	movs	r3, #23
   2af1a:	e025      	b.n	2af68 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2af1c:	68ba      	ldr	r2, [r7, #8]
   2af1e:	69fb      	ldr	r3, [r7, #28]
   2af20:	331c      	adds	r3, #28
   2af22:	005b      	lsls	r3, r3, #1
   2af24:	18d3      	adds	r3, r2, r3
   2af26:	3309      	adds	r3, #9
   2af28:	781b      	ldrb	r3, [r3, #0]
   2af2a:	2b02      	cmp	r3, #2
   2af2c:	d10a      	bne.n	2af44 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2af2e:	2302      	movs	r3, #2
   2af30:	33ff      	adds	r3, #255	; 0xff
   2af32:	001a      	movs	r2, r3
   2af34:	69fb      	ldr	r3, [r7, #28]
   2af36:	409a      	lsls	r2, r3
   2af38:	0013      	movs	r3, r2
   2af3a:	001a      	movs	r2, r3
   2af3c:	69bb      	ldr	r3, [r7, #24]
   2af3e:	4313      	orrs	r3, r2
   2af40:	61bb      	str	r3, [r7, #24]
   2af42:	e007      	b.n	2af54 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2af44:	2201      	movs	r2, #1
   2af46:	69fb      	ldr	r3, [r7, #28]
   2af48:	409a      	lsls	r2, r3
   2af4a:	0013      	movs	r3, r2
   2af4c:	001a      	movs	r2, r3
   2af4e:	69bb      	ldr	r3, [r7, #24]
   2af50:	4313      	orrs	r3, r2
   2af52:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2af54:	69fb      	ldr	r3, [r7, #28]
   2af56:	3301      	adds	r3, #1
   2af58:	61fb      	str	r3, [r7, #28]
   2af5a:	69fb      	ldr	r3, [r7, #28]
   2af5c:	2b07      	cmp	r3, #7
   2af5e:	d9b3      	bls.n	2aec8 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2af60:	687b      	ldr	r3, [r7, #4]
   2af62:	69ba      	ldr	r2, [r7, #24]
   2af64:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2af66:	2300      	movs	r3, #0
}
   2af68:	0018      	movs	r0, r3
   2af6a:	46bd      	mov	sp, r7
   2af6c:	b008      	add	sp, #32
   2af6e:	bd80      	pop	{r7, pc}
   2af70:	0003bc8c 	.word	0x0003bc8c

0002af74 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2af74:	b580      	push	{r7, lr}
   2af76:	b088      	sub	sp, #32
   2af78:	af00      	add	r7, sp, #0
   2af7a:	60b9      	str	r1, [r7, #8]
   2af7c:	607a      	str	r2, [r7, #4]
   2af7e:	230f      	movs	r3, #15
   2af80:	18fb      	adds	r3, r7, r3
   2af82:	1c02      	adds	r2, r0, #0
   2af84:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2af86:	230f      	movs	r3, #15
   2af88:	18fb      	adds	r3, r7, r3
   2af8a:	781a      	ldrb	r2, [r3, #0]
   2af8c:	2317      	movs	r3, #23
   2af8e:	18fb      	adds	r3, r7, r3
   2af90:	491d      	ldr	r1, [pc, #116]	; (2b008 <_tcc_build_waves+0x94>)
   2af92:	5c8a      	ldrb	r2, [r1, r2]
   2af94:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2af96:	68bb      	ldr	r3, [r7, #8]
   2af98:	3310      	adds	r3, #16
   2af9a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2af9c:	693b      	ldr	r3, [r7, #16]
   2af9e:	7a5b      	ldrb	r3, [r3, #9]
   2afa0:	011b      	lsls	r3, r3, #4
   2afa2:	001a      	movs	r2, r3
   2afa4:	2330      	movs	r3, #48	; 0x30
   2afa6:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2afa8:	693b      	ldr	r3, [r7, #16]
   2afaa:	7a1b      	ldrb	r3, [r3, #8]
   2afac:	0019      	movs	r1, r3
   2afae:	2307      	movs	r3, #7
   2afb0:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2afb2:	4313      	orrs	r3, r2
   2afb4:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2afb6:	2300      	movs	r3, #0
   2afb8:	61fb      	str	r3, [r7, #28]
   2afba:	e01a      	b.n	2aff2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2afbc:	693a      	ldr	r2, [r7, #16]
   2afbe:	69fb      	ldr	r3, [r7, #28]
   2afc0:	18d3      	adds	r3, r2, r3
   2afc2:	3304      	adds	r3, #4
   2afc4:	781b      	ldrb	r3, [r3, #0]
   2afc6:	2b00      	cmp	r3, #0
   2afc8:	d010      	beq.n	2afec <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2afca:	2317      	movs	r3, #23
   2afcc:	18fb      	adds	r3, r7, r3
   2afce:	781a      	ldrb	r2, [r3, #0]
   2afd0:	69fb      	ldr	r3, [r7, #28]
   2afd2:	429a      	cmp	r2, r3
   2afd4:	dc01      	bgt.n	2afda <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2afd6:	2317      	movs	r3, #23
   2afd8:	e012      	b.n	2b000 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2afda:	2380      	movs	r3, #128	; 0x80
   2afdc:	025a      	lsls	r2, r3, #9
   2afde:	69fb      	ldr	r3, [r7, #28]
   2afe0:	409a      	lsls	r2, r3
   2afe2:	0013      	movs	r3, r2
   2afe4:	001a      	movs	r2, r3
   2afe6:	69bb      	ldr	r3, [r7, #24]
   2afe8:	4313      	orrs	r3, r2
   2afea:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2afec:	69fb      	ldr	r3, [r7, #28]
   2afee:	3301      	adds	r3, #1
   2aff0:	61fb      	str	r3, [r7, #28]
   2aff2:	69fb      	ldr	r3, [r7, #28]
   2aff4:	2b03      	cmp	r3, #3
   2aff6:	dde1      	ble.n	2afbc <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2aff8:	687b      	ldr	r3, [r7, #4]
   2affa:	69ba      	ldr	r2, [r7, #24]
   2affc:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2affe:	2300      	movs	r3, #0
}
   2b000:	0018      	movs	r0, r3
   2b002:	46bd      	mov	sp, r7
   2b004:	b008      	add	sp, #32
   2b006:	bd80      	pop	{r7, pc}
   2b008:	0003bc88 	.word	0x0003bc88

0002b00c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b00c:	b590      	push	{r4, r7, lr}
   2b00e:	b091      	sub	sp, #68	; 0x44
   2b010:	af00      	add	r7, sp, #0
   2b012:	60f8      	str	r0, [r7, #12]
   2b014:	60b9      	str	r1, [r7, #8]
   2b016:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b018:	233b      	movs	r3, #59	; 0x3b
   2b01a:	18fc      	adds	r4, r7, r3
   2b01c:	68bb      	ldr	r3, [r7, #8]
   2b01e:	0018      	movs	r0, r3
   2b020:	4bc4      	ldr	r3, [pc, #784]	; (2b334 <tcc_init+0x328>)
   2b022:	4798      	blx	r3
   2b024:	0003      	movs	r3, r0
   2b026:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b028:	233b      	movs	r3, #59	; 0x3b
   2b02a:	18fb      	adds	r3, r7, r3
   2b02c:	781a      	ldrb	r2, [r3, #0]
   2b02e:	4bc2      	ldr	r3, [pc, #776]	; (2b338 <tcc_init+0x32c>)
   2b030:	0092      	lsls	r2, r2, #2
   2b032:	58d3      	ldr	r3, [r2, r3]
   2b034:	0019      	movs	r1, r3
   2b036:	2002      	movs	r0, #2
   2b038:	4bc0      	ldr	r3, [pc, #768]	; (2b33c <tcc_init+0x330>)
   2b03a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b03c:	68bb      	ldr	r3, [r7, #8]
   2b03e:	681b      	ldr	r3, [r3, #0]
   2b040:	2202      	movs	r2, #2
   2b042:	4013      	ands	r3, r2
   2b044:	d001      	beq.n	2b04a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b046:	231c      	movs	r3, #28
   2b048:	e1be      	b.n	2b3c8 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b04a:	68bb      	ldr	r3, [r7, #8]
   2b04c:	681b      	ldr	r3, [r3, #0]
   2b04e:	2201      	movs	r2, #1
   2b050:	4013      	ands	r3, r2
   2b052:	d001      	beq.n	2b058 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b054:	231c      	movs	r3, #28
   2b056:	e1b7      	b.n	2b3c8 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b058:	233b      	movs	r3, #59	; 0x3b
   2b05a:	18fb      	adds	r3, r7, r3
   2b05c:	781a      	ldrb	r2, [r3, #0]
   2b05e:	4bb8      	ldr	r3, [pc, #736]	; (2b340 <tcc_init+0x334>)
   2b060:	0092      	lsls	r2, r2, #2
   2b062:	58d3      	ldr	r3, [r2, r3]
   2b064:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b066:	687b      	ldr	r3, [r7, #4]
   2b068:	681a      	ldr	r2, [r3, #0]
   2b06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b06c:	429a      	cmp	r2, r3
   2b06e:	d804      	bhi.n	2b07a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b070:	687b      	ldr	r3, [r7, #4]
   2b072:	685a      	ldr	r2, [r3, #4]
   2b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b076:	429a      	cmp	r2, r3
   2b078:	d901      	bls.n	2b07e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b07a:	2317      	movs	r3, #23
   2b07c:	e1a4      	b.n	2b3c8 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b07e:	2300      	movs	r3, #0
   2b080:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b082:	e00e      	b.n	2b0a2 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b084:	687a      	ldr	r2, [r7, #4]
   2b086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b088:	3306      	adds	r3, #6
   2b08a:	009b      	lsls	r3, r3, #2
   2b08c:	18d3      	adds	r3, r2, r3
   2b08e:	3304      	adds	r3, #4
   2b090:	681a      	ldr	r2, [r3, #0]
   2b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b094:	429a      	cmp	r2, r3
   2b096:	d901      	bls.n	2b09c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b098:	2317      	movs	r3, #23
   2b09a:	e195      	b.n	2b3c8 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b09e:	3301      	adds	r3, #1
   2b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0a4:	2b03      	cmp	r3, #3
   2b0a6:	dded      	ble.n	2b084 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b0a8:	2300      	movs	r3, #0
   2b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b0ac:	e019      	b.n	2b0e2 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b0ae:	687a      	ldr	r2, [r7, #4]
   2b0b0:	2198      	movs	r1, #152	; 0x98
   2b0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0b4:	18d3      	adds	r3, r2, r3
   2b0b6:	185b      	adds	r3, r3, r1
   2b0b8:	781b      	ldrb	r3, [r3, #0]
   2b0ba:	2201      	movs	r2, #1
   2b0bc:	4053      	eors	r3, r2
   2b0be:	b2db      	uxtb	r3, r3
   2b0c0:	2b00      	cmp	r3, #0
   2b0c2:	d10a      	bne.n	2b0da <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b0c4:	233b      	movs	r3, #59	; 0x3b
   2b0c6:	18fb      	adds	r3, r7, r3
   2b0c8:	781b      	ldrb	r3, [r3, #0]
   2b0ca:	4a9e      	ldr	r2, [pc, #632]	; (2b344 <tcc_init+0x338>)
   2b0cc:	5cd3      	ldrb	r3, [r2, r3]
   2b0ce:	001a      	movs	r2, r3
   2b0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0d2:	429a      	cmp	r2, r3
   2b0d4:	dc02      	bgt.n	2b0dc <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b0d6:	2317      	movs	r3, #23
   2b0d8:	e176      	b.n	2b3c8 <tcc_init+0x3bc>
			continue;
   2b0da:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0de:	3301      	adds	r3, #1
   2b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0e4:	2b07      	cmp	r3, #7
   2b0e6:	dde2      	ble.n	2b0ae <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b0e8:	2300      	movs	r3, #0
   2b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b0ec:	2333      	movs	r3, #51	; 0x33
   2b0ee:	18fc      	adds	r4, r7, r3
   2b0f0:	232c      	movs	r3, #44	; 0x2c
   2b0f2:	18fa      	adds	r2, r7, r3
   2b0f4:	6879      	ldr	r1, [r7, #4]
   2b0f6:	233b      	movs	r3, #59	; 0x3b
   2b0f8:	18fb      	adds	r3, r7, r3
   2b0fa:	781b      	ldrb	r3, [r3, #0]
   2b0fc:	0018      	movs	r0, r3
   2b0fe:	4b92      	ldr	r3, [pc, #584]	; (2b348 <tcc_init+0x33c>)
   2b100:	4798      	blx	r3
   2b102:	0003      	movs	r3, r0
   2b104:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b106:	2333      	movs	r3, #51	; 0x33
   2b108:	18fb      	adds	r3, r7, r3
   2b10a:	781b      	ldrb	r3, [r3, #0]
   2b10c:	2b00      	cmp	r3, #0
   2b10e:	d003      	beq.n	2b118 <tcc_init+0x10c>
		return status;
   2b110:	2333      	movs	r3, #51	; 0x33
   2b112:	18fb      	adds	r3, r7, r3
   2b114:	781b      	ldrb	r3, [r3, #0]
   2b116:	e157      	b.n	2b3c8 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b118:	232b      	movs	r3, #43	; 0x2b
   2b11a:	18fa      	adds	r2, r7, r3
   2b11c:	6879      	ldr	r1, [r7, #4]
   2b11e:	233b      	movs	r3, #59	; 0x3b
   2b120:	18fb      	adds	r3, r7, r3
   2b122:	781b      	ldrb	r3, [r3, #0]
   2b124:	0018      	movs	r0, r3
   2b126:	4b89      	ldr	r3, [pc, #548]	; (2b34c <tcc_init+0x340>)
   2b128:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b12a:	2333      	movs	r3, #51	; 0x33
   2b12c:	18fc      	adds	r4, r7, r3
   2b12e:	2320      	movs	r3, #32
   2b130:	18fa      	adds	r2, r7, r3
   2b132:	6879      	ldr	r1, [r7, #4]
   2b134:	233b      	movs	r3, #59	; 0x3b
   2b136:	18fb      	adds	r3, r7, r3
   2b138:	781b      	ldrb	r3, [r3, #0]
   2b13a:	0018      	movs	r0, r3
   2b13c:	4b84      	ldr	r3, [pc, #528]	; (2b350 <tcc_init+0x344>)
   2b13e:	4798      	blx	r3
   2b140:	0003      	movs	r3, r0
   2b142:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b144:	2333      	movs	r3, #51	; 0x33
   2b146:	18fb      	adds	r3, r7, r3
   2b148:	781b      	ldrb	r3, [r3, #0]
   2b14a:	2b00      	cmp	r3, #0
   2b14c:	d003      	beq.n	2b156 <tcc_init+0x14a>
		return status;
   2b14e:	2333      	movs	r3, #51	; 0x33
   2b150:	18fb      	adds	r3, r7, r3
   2b152:	781b      	ldrb	r3, [r3, #0]
   2b154:	e138      	b.n	2b3c8 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b156:	2300      	movs	r3, #0
   2b158:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b15a:	2333      	movs	r3, #51	; 0x33
   2b15c:	18fc      	adds	r4, r7, r3
   2b15e:	231c      	movs	r3, #28
   2b160:	18fa      	adds	r2, r7, r3
   2b162:	6879      	ldr	r1, [r7, #4]
   2b164:	233b      	movs	r3, #59	; 0x3b
   2b166:	18fb      	adds	r3, r7, r3
   2b168:	781b      	ldrb	r3, [r3, #0]
   2b16a:	0018      	movs	r0, r3
   2b16c:	4b79      	ldr	r3, [pc, #484]	; (2b354 <tcc_init+0x348>)
   2b16e:	4798      	blx	r3
   2b170:	0003      	movs	r3, r0
   2b172:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b174:	2333      	movs	r3, #51	; 0x33
   2b176:	18fb      	adds	r3, r7, r3
   2b178:	781b      	ldrb	r3, [r3, #0]
   2b17a:	2b00      	cmp	r3, #0
   2b17c:	d003      	beq.n	2b186 <tcc_init+0x17a>
		return status;
   2b17e:	2333      	movs	r3, #51	; 0x33
   2b180:	18fb      	adds	r3, r7, r3
   2b182:	781b      	ldrb	r3, [r3, #0]
   2b184:	e120      	b.n	2b3c8 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b186:	2333      	movs	r3, #51	; 0x33
   2b188:	18fc      	adds	r4, r7, r3
   2b18a:	2318      	movs	r3, #24
   2b18c:	18fa      	adds	r2, r7, r3
   2b18e:	6879      	ldr	r1, [r7, #4]
   2b190:	233b      	movs	r3, #59	; 0x3b
   2b192:	18fb      	adds	r3, r7, r3
   2b194:	781b      	ldrb	r3, [r3, #0]
   2b196:	0018      	movs	r0, r3
   2b198:	4b6f      	ldr	r3, [pc, #444]	; (2b358 <tcc_init+0x34c>)
   2b19a:	4798      	blx	r3
   2b19c:	0003      	movs	r3, r0
   2b19e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b1a0:	2333      	movs	r3, #51	; 0x33
   2b1a2:	18fb      	adds	r3, r7, r3
   2b1a4:	781b      	ldrb	r3, [r3, #0]
   2b1a6:	2b00      	cmp	r3, #0
   2b1a8:	d003      	beq.n	2b1b2 <tcc_init+0x1a6>
		return status;
   2b1aa:	2333      	movs	r3, #51	; 0x33
   2b1ac:	18fb      	adds	r3, r7, r3
   2b1ae:	781b      	ldrb	r3, [r3, #0]
   2b1b0:	e10a      	b.n	2b3c8 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b1b2:	2300      	movs	r3, #0
   2b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b1b6:	e009      	b.n	2b1cc <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b1b8:	68fa      	ldr	r2, [r7, #12]
   2b1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b1bc:	009b      	lsls	r3, r3, #2
   2b1be:	18d3      	adds	r3, r2, r3
   2b1c0:	3304      	adds	r3, #4
   2b1c2:	2200      	movs	r2, #0
   2b1c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b1c8:	3301      	adds	r3, #1
   2b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b1ce:	2b0b      	cmp	r3, #11
   2b1d0:	ddf2      	ble.n	2b1b8 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b1d2:	68fb      	ldr	r3, [r7, #12]
   2b1d4:	2200      	movs	r2, #0
   2b1d6:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b1d8:	68fb      	ldr	r3, [r7, #12]
   2b1da:	2200      	movs	r2, #0
   2b1dc:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b1de:	233b      	movs	r3, #59	; 0x3b
   2b1e0:	18fb      	adds	r3, r7, r3
   2b1e2:	781a      	ldrb	r2, [r3, #0]
   2b1e4:	4b5d      	ldr	r3, [pc, #372]	; (2b35c <tcc_init+0x350>)
   2b1e6:	0092      	lsls	r2, r2, #2
   2b1e8:	68f9      	ldr	r1, [r7, #12]
   2b1ea:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b1ec:	68fb      	ldr	r3, [r7, #12]
   2b1ee:	68ba      	ldr	r2, [r7, #8]
   2b1f0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b1f2:	687b      	ldr	r3, [r7, #4]
   2b1f4:	22a0      	movs	r2, #160	; 0xa0
   2b1f6:	5c99      	ldrb	r1, [r3, r2]
   2b1f8:	68fb      	ldr	r3, [r7, #12]
   2b1fa:	223c      	movs	r2, #60	; 0x3c
   2b1fc:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b1fe:	2314      	movs	r3, #20
   2b200:	18fb      	adds	r3, r7, r3
   2b202:	0018      	movs	r0, r3
   2b204:	4b56      	ldr	r3, [pc, #344]	; (2b360 <tcc_init+0x354>)
   2b206:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b208:	687b      	ldr	r3, [r7, #4]
   2b20a:	7a9a      	ldrb	r2, [r3, #10]
   2b20c:	2314      	movs	r3, #20
   2b20e:	18fb      	adds	r3, r7, r3
   2b210:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b212:	233b      	movs	r3, #59	; 0x3b
   2b214:	18fb      	adds	r3, r7, r3
   2b216:	781b      	ldrb	r3, [r3, #0]
   2b218:	4a52      	ldr	r2, [pc, #328]	; (2b364 <tcc_init+0x358>)
   2b21a:	5cd3      	ldrb	r3, [r2, r3]
   2b21c:	2214      	movs	r2, #20
   2b21e:	18ba      	adds	r2, r7, r2
   2b220:	0011      	movs	r1, r2
   2b222:	0018      	movs	r0, r3
   2b224:	4b50      	ldr	r3, [pc, #320]	; (2b368 <tcc_init+0x35c>)
   2b226:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b228:	233b      	movs	r3, #59	; 0x3b
   2b22a:	18fb      	adds	r3, r7, r3
   2b22c:	781b      	ldrb	r3, [r3, #0]
   2b22e:	4a4d      	ldr	r2, [pc, #308]	; (2b364 <tcc_init+0x358>)
   2b230:	5cd3      	ldrb	r3, [r2, r3]
   2b232:	0018      	movs	r0, r3
   2b234:	4b4d      	ldr	r3, [pc, #308]	; (2b36c <tcc_init+0x360>)
   2b236:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b238:	2300      	movs	r3, #0
   2b23a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b23c:	e02d      	b.n	2b29a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b23e:	687a      	ldr	r2, [r7, #4]
   2b240:	2198      	movs	r1, #152	; 0x98
   2b242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b244:	18d3      	adds	r3, r2, r3
   2b246:	185b      	adds	r3, r3, r1
   2b248:	781b      	ldrb	r3, [r3, #0]
   2b24a:	2201      	movs	r2, #1
   2b24c:	4053      	eors	r3, r2
   2b24e:	b2db      	uxtb	r3, r3
   2b250:	2b00      	cmp	r3, #0
   2b252:	d11e      	bne.n	2b292 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b254:	2310      	movs	r3, #16
   2b256:	18fb      	adds	r3, r7, r3
   2b258:	0018      	movs	r0, r3
   2b25a:	4b45      	ldr	r3, [pc, #276]	; (2b370 <tcc_init+0x364>)
   2b25c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b25e:	687b      	ldr	r3, [r7, #4]
   2b260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b262:	321e      	adds	r2, #30
   2b264:	0092      	lsls	r2, r2, #2
   2b266:	58d3      	ldr	r3, [r2, r3]
   2b268:	b2da      	uxtb	r2, r3
   2b26a:	2310      	movs	r3, #16
   2b26c:	18fb      	adds	r3, r7, r3
   2b26e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b270:	2310      	movs	r3, #16
   2b272:	18fb      	adds	r3, r7, r3
   2b274:	2201      	movs	r2, #1
   2b276:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b278:	687b      	ldr	r3, [r7, #4]
   2b27a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b27c:	3216      	adds	r2, #22
   2b27e:	0092      	lsls	r2, r2, #2
   2b280:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b282:	b2db      	uxtb	r3, r3
   2b284:	2210      	movs	r2, #16
   2b286:	18ba      	adds	r2, r7, r2
   2b288:	0011      	movs	r1, r2
   2b28a:	0018      	movs	r0, r3
   2b28c:	4b39      	ldr	r3, [pc, #228]	; (2b374 <tcc_init+0x368>)
   2b28e:	4798      	blx	r3
   2b290:	e000      	b.n	2b294 <tcc_init+0x288>
			continue;
   2b292:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b296:	3301      	adds	r3, #1
   2b298:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b29a:	233b      	movs	r3, #59	; 0x3b
   2b29c:	18fb      	adds	r3, r7, r3
   2b29e:	781b      	ldrb	r3, [r3, #0]
   2b2a0:	4a28      	ldr	r2, [pc, #160]	; (2b344 <tcc_init+0x338>)
   2b2a2:	5cd3      	ldrb	r3, [r2, r3]
   2b2a4:	001a      	movs	r2, r3
   2b2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b2a8:	429a      	cmp	r2, r3
   2b2aa:	dcc8      	bgt.n	2b23e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b2ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b2ae:	68bb      	ldr	r3, [r7, #8]
   2b2b0:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b2b2:	46c0      	nop			; (mov r8, r8)
   2b2b4:	68bb      	ldr	r3, [r7, #8]
   2b2b6:	689b      	ldr	r3, [r3, #8]
   2b2b8:	2204      	movs	r2, #4
   2b2ba:	4013      	ands	r3, r2
   2b2bc:	d1fa      	bne.n	2b2b4 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b2be:	68bb      	ldr	r3, [r7, #8]
   2b2c0:	22ff      	movs	r2, #255	; 0xff
   2b2c2:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b2c4:	46c0      	nop			; (mov r8, r8)
   2b2c6:	68bb      	ldr	r3, [r7, #8]
   2b2c8:	689b      	ldr	r3, [r3, #8]
   2b2ca:	2204      	movs	r2, #4
   2b2cc:	4013      	ands	r3, r2
   2b2ce:	d1fa      	bne.n	2b2c6 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b2d0:	232b      	movs	r3, #43	; 0x2b
   2b2d2:	18fb      	adds	r3, r7, r3
   2b2d4:	781a      	ldrb	r2, [r3, #0]
   2b2d6:	68bb      	ldr	r3, [r7, #8]
   2b2d8:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b2da:	2320      	movs	r3, #32
   2b2dc:	18fb      	adds	r3, r7, r3
   2b2de:	681a      	ldr	r2, [r3, #0]
   2b2e0:	68bb      	ldr	r3, [r7, #8]
   2b2e2:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b2e4:	2320      	movs	r3, #32
   2b2e6:	18fb      	adds	r3, r7, r3
   2b2e8:	685a      	ldr	r2, [r3, #4]
   2b2ea:	68bb      	ldr	r3, [r7, #8]
   2b2ec:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b2ee:	69fa      	ldr	r2, [r7, #28]
   2b2f0:	68bb      	ldr	r3, [r7, #8]
   2b2f2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b2f4:	46c0      	nop			; (mov r8, r8)
   2b2f6:	68bb      	ldr	r3, [r7, #8]
   2b2f8:	689b      	ldr	r3, [r3, #8]
   2b2fa:	4a1f      	ldr	r2, [pc, #124]	; (2b378 <tcc_init+0x36c>)
   2b2fc:	4013      	ands	r3, r2
   2b2fe:	d1fa      	bne.n	2b2f6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b300:	69ba      	ldr	r2, [r7, #24]
   2b302:	68bb      	ldr	r3, [r7, #8]
   2b304:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b306:	46c0      	nop			; (mov r8, r8)
   2b308:	68bb      	ldr	r3, [r7, #8]
   2b30a:	689b      	ldr	r3, [r3, #8]
   2b30c:	2210      	movs	r2, #16
   2b30e:	4013      	ands	r3, r2
   2b310:	d1fa      	bne.n	2b308 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b312:	687b      	ldr	r3, [r7, #4]
   2b314:	681a      	ldr	r2, [r3, #0]
   2b316:	68bb      	ldr	r3, [r7, #8]
   2b318:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b31a:	46c0      	nop			; (mov r8, r8)
   2b31c:	68bb      	ldr	r3, [r7, #8]
   2b31e:	689b      	ldr	r3, [r3, #8]
   2b320:	4a16      	ldr	r2, [pc, #88]	; (2b37c <tcc_init+0x370>)
   2b322:	4013      	ands	r3, r2
   2b324:	d1fa      	bne.n	2b31c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b326:	687b      	ldr	r3, [r7, #4]
   2b328:	685a      	ldr	r2, [r3, #4]
   2b32a:	68bb      	ldr	r3, [r7, #8]
   2b32c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b32e:	2300      	movs	r3, #0
   2b330:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b332:	e03f      	b.n	2b3b4 <tcc_init+0x3a8>
   2b334:	0002a975 	.word	0x0002a975
   2b338:	0003bc70 	.word	0x0003bc70
   2b33c:	0002a8f1 	.word	0x0002a8f1
   2b340:	0003bc7c 	.word	0x0003bc7c
   2b344:	0003bc8c 	.word	0x0003bc8c
   2b348:	0002ac81 	.word	0x0002ac81
   2b34c:	0002ad25 	.word	0x0002ad25
   2b350:	0002ad81 	.word	0x0002ad81
   2b354:	0002ae9d 	.word	0x0002ae9d
   2b358:	0002af75 	.word	0x0002af75
   2b35c:	20005dec 	.word	0x20005dec
   2b360:	0002a8d9 	.word	0x0002a8d9
   2b364:	0003bc6c 	.word	0x0003bc6c
   2b368:	0002a4f1 	.word	0x0002a4f1
   2b36c:	0002a535 	.word	0x0002a535
   2b370:	0002a94d 	.word	0x0002a94d
   2b374:	0002a851 	.word	0x0002a851
   2b378:	00020040 	.word	0x00020040
   2b37c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b380:	46c0      	nop			; (mov r8, r8)
   2b382:	68bb      	ldr	r3, [r7, #8]
   2b384:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b386:	4912      	ldr	r1, [pc, #72]	; (2b3d0 <tcc_init+0x3c4>)
   2b388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b38a:	4091      	lsls	r1, r2
   2b38c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b38e:	4013      	ands	r3, r2
   2b390:	d1f7      	bne.n	2b382 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b392:	687a      	ldr	r2, [r7, #4]
   2b394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b396:	3306      	adds	r3, #6
   2b398:	009b      	lsls	r3, r3, #2
   2b39a:	18d3      	adds	r3, r2, r3
   2b39c:	3304      	adds	r3, #4
   2b39e:	681a      	ldr	r2, [r3, #0]
   2b3a0:	68b9      	ldr	r1, [r7, #8]
   2b3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b3a4:	3310      	adds	r3, #16
   2b3a6:	009b      	lsls	r3, r3, #2
   2b3a8:	18cb      	adds	r3, r1, r3
   2b3aa:	3304      	adds	r3, #4
   2b3ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b3b0:	3301      	adds	r3, #1
   2b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b3b4:	233b      	movs	r3, #59	; 0x3b
   2b3b6:	18fb      	adds	r3, r7, r3
   2b3b8:	781b      	ldrb	r3, [r3, #0]
   2b3ba:	4a06      	ldr	r2, [pc, #24]	; (2b3d4 <tcc_init+0x3c8>)
   2b3bc:	5cd3      	ldrb	r3, [r2, r3]
   2b3be:	001a      	movs	r2, r3
   2b3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b3c2:	429a      	cmp	r2, r3
   2b3c4:	dcdc      	bgt.n	2b380 <tcc_init+0x374>
	}

	return STATUS_OK;
   2b3c6:	2300      	movs	r3, #0
}
   2b3c8:	0018      	movs	r0, r3
   2b3ca:	46bd      	mov	sp, r7
   2b3cc:	b011      	add	sp, #68	; 0x44
   2b3ce:	bd90      	pop	{r4, r7, pc}
   2b3d0:	00080100 	.word	0x00080100
   2b3d4:	0003bc88 	.word	0x0003bc88

0002b3d8 <system_interrupt_enable>:
{
   2b3d8:	b580      	push	{r7, lr}
   2b3da:	b082      	sub	sp, #8
   2b3dc:	af00      	add	r7, sp, #0
   2b3de:	0002      	movs	r2, r0
   2b3e0:	1dfb      	adds	r3, r7, #7
   2b3e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b3e4:	4b06      	ldr	r3, [pc, #24]	; (2b400 <system_interrupt_enable+0x28>)
   2b3e6:	1dfa      	adds	r2, r7, #7
   2b3e8:	7812      	ldrb	r2, [r2, #0]
   2b3ea:	0011      	movs	r1, r2
   2b3ec:	221f      	movs	r2, #31
   2b3ee:	400a      	ands	r2, r1
   2b3f0:	2101      	movs	r1, #1
   2b3f2:	4091      	lsls	r1, r2
   2b3f4:	000a      	movs	r2, r1
   2b3f6:	601a      	str	r2, [r3, #0]
}
   2b3f8:	46c0      	nop			; (mov r8, r8)
   2b3fa:	46bd      	mov	sp, r7
   2b3fc:	b002      	add	sp, #8
   2b3fe:	bd80      	pop	{r7, pc}
   2b400:	e000e100 	.word	0xe000e100

0002b404 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b404:	b580      	push	{r7, lr}
   2b406:	b082      	sub	sp, #8
   2b408:	af00      	add	r7, sp, #0
   2b40a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b40c:	4a04      	ldr	r2, [pc, #16]	; (2b420 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b40e:	687b      	ldr	r3, [r7, #4]
   2b410:	18d3      	adds	r3, r2, r3
   2b412:	781b      	ldrb	r3, [r3, #0]
   2b414:	b25b      	sxtb	r3, r3
}
   2b416:	0018      	movs	r0, r3
   2b418:	46bd      	mov	sp, r7
   2b41a:	b002      	add	sp, #8
   2b41c:	bd80      	pop	{r7, pc}
   2b41e:	46c0      	nop			; (mov r8, r8)
   2b420:	20000128 	.word	0x20000128

0002b424 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b424:	b580      	push	{r7, lr}
   2b426:	b084      	sub	sp, #16
   2b428:	af00      	add	r7, sp, #0
   2b42a:	60f8      	str	r0, [r7, #12]
   2b42c:	60b9      	str	r1, [r7, #8]
   2b42e:	1dfb      	adds	r3, r7, #7
   2b430:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b432:	1dfb      	adds	r3, r7, #7
   2b434:	781b      	ldrb	r3, [r3, #0]
   2b436:	68fa      	ldr	r2, [r7, #12]
   2b438:	009b      	lsls	r3, r3, #2
   2b43a:	18d3      	adds	r3, r2, r3
   2b43c:	3304      	adds	r3, #4
   2b43e:	68ba      	ldr	r2, [r7, #8]
   2b440:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b442:	68fb      	ldr	r3, [r7, #12]
   2b444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b446:	1dfb      	adds	r3, r7, #7
   2b448:	7819      	ldrb	r1, [r3, #0]
   2b44a:	4b05      	ldr	r3, [pc, #20]	; (2b460 <tcc_register_callback+0x3c>)
   2b44c:	0089      	lsls	r1, r1, #2
   2b44e:	58cb      	ldr	r3, [r1, r3]
   2b450:	431a      	orrs	r2, r3
   2b452:	68fb      	ldr	r3, [r7, #12]
   2b454:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b456:	2300      	movs	r3, #0
}
   2b458:	0018      	movs	r0, r3
   2b45a:	46bd      	mov	sp, r7
   2b45c:	b004      	add	sp, #16
   2b45e:	bd80      	pop	{r7, pc}
   2b460:	0003bc90 	.word	0x0003bc90

0002b464 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2b464:	b580      	push	{r7, lr}
   2b466:	b082      	sub	sp, #8
   2b468:	af00      	add	r7, sp, #0
   2b46a:	6078      	str	r0, [r7, #4]
   2b46c:	000a      	movs	r2, r1
   2b46e:	1cfb      	adds	r3, r7, #3
   2b470:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2b472:	687b      	ldr	r3, [r7, #4]
   2b474:	681b      	ldr	r3, [r3, #0]
   2b476:	0018      	movs	r0, r3
   2b478:	4b0f      	ldr	r3, [pc, #60]	; (2b4b8 <tcc_enable_callback+0x54>)
   2b47a:	4798      	blx	r3
   2b47c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2b47e:	0018      	movs	r0, r3
   2b480:	4b0e      	ldr	r3, [pc, #56]	; (2b4bc <tcc_enable_callback+0x58>)
   2b482:	4798      	blx	r3
   2b484:	0003      	movs	r3, r0
   2b486:	0018      	movs	r0, r3
   2b488:	4b0d      	ldr	r3, [pc, #52]	; (2b4c0 <tcc_enable_callback+0x5c>)
   2b48a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2b48c:	687b      	ldr	r3, [r7, #4]
   2b48e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2b490:	1cfb      	adds	r3, r7, #3
   2b492:	7819      	ldrb	r1, [r3, #0]
   2b494:	4b0b      	ldr	r3, [pc, #44]	; (2b4c4 <tcc_enable_callback+0x60>)
   2b496:	0089      	lsls	r1, r1, #2
   2b498:	58cb      	ldr	r3, [r1, r3]
   2b49a:	431a      	orrs	r2, r3
   2b49c:	687b      	ldr	r3, [r7, #4]
   2b49e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2b4a0:	687b      	ldr	r3, [r7, #4]
   2b4a2:	681b      	ldr	r3, [r3, #0]
   2b4a4:	1cfa      	adds	r2, r7, #3
   2b4a6:	7811      	ldrb	r1, [r2, #0]
   2b4a8:	4a06      	ldr	r2, [pc, #24]	; (2b4c4 <tcc_enable_callback+0x60>)
   2b4aa:	0089      	lsls	r1, r1, #2
   2b4ac:	588a      	ldr	r2, [r1, r2]
   2b4ae:	629a      	str	r2, [r3, #40]	; 0x28
}
   2b4b0:	46c0      	nop			; (mov r8, r8)
   2b4b2:	46bd      	mov	sp, r7
   2b4b4:	b002      	add	sp, #8
   2b4b6:	bd80      	pop	{r7, pc}
   2b4b8:	0002a975 	.word	0x0002a975
   2b4bc:	0002b405 	.word	0x0002b405
   2b4c0:	0002b3d9 	.word	0x0002b3d9
   2b4c4:	0003bc90 	.word	0x0003bc90

0002b4c8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2b4c8:	b580      	push	{r7, lr}
   2b4ca:	af00      	add	r7, sp, #0
   2b4cc:	2000      	movs	r0, #0
   2b4ce:	4b02      	ldr	r3, [pc, #8]	; (2b4d8 <TCC0_Handler+0x10>)
   2b4d0:	4798      	blx	r3
   2b4d2:	46c0      	nop			; (mov r8, r8)
   2b4d4:	46bd      	mov	sp, r7
   2b4d6:	bd80      	pop	{r7, pc}
   2b4d8:	0002b505 	.word	0x0002b505

0002b4dc <TCC1_Handler>:
   2b4dc:	b580      	push	{r7, lr}
   2b4de:	af00      	add	r7, sp, #0
   2b4e0:	2001      	movs	r0, #1
   2b4e2:	4b02      	ldr	r3, [pc, #8]	; (2b4ec <TCC1_Handler+0x10>)
   2b4e4:	4798      	blx	r3
   2b4e6:	46c0      	nop			; (mov r8, r8)
   2b4e8:	46bd      	mov	sp, r7
   2b4ea:	bd80      	pop	{r7, pc}
   2b4ec:	0002b505 	.word	0x0002b505

0002b4f0 <TCC2_Handler>:
   2b4f0:	b580      	push	{r7, lr}
   2b4f2:	af00      	add	r7, sp, #0
   2b4f4:	2002      	movs	r0, #2
   2b4f6:	4b02      	ldr	r3, [pc, #8]	; (2b500 <TCC2_Handler+0x10>)
   2b4f8:	4798      	blx	r3
   2b4fa:	46c0      	nop			; (mov r8, r8)
   2b4fc:	46bd      	mov	sp, r7
   2b4fe:	bd80      	pop	{r7, pc}
   2b500:	0002b505 	.word	0x0002b505

0002b504 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2b504:	b580      	push	{r7, lr}
   2b506:	b086      	sub	sp, #24
   2b508:	af00      	add	r7, sp, #0
   2b50a:	0002      	movs	r2, r0
   2b50c:	1dfb      	adds	r3, r7, #7
   2b50e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2b510:	1dfb      	adds	r3, r7, #7
   2b512:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2b514:	4b18      	ldr	r3, [pc, #96]	; (2b578 <_tcc_interrupt_handler+0x74>)
   2b516:	0092      	lsls	r2, r2, #2
   2b518:	58d3      	ldr	r3, [r2, r3]
   2b51a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b51c:	693b      	ldr	r3, [r7, #16]
   2b51e:	681b      	ldr	r3, [r3, #0]
   2b520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2b522:	693b      	ldr	r3, [r7, #16]
   2b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b526:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2b528:	693b      	ldr	r3, [r7, #16]
   2b52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b52c:	4013      	ands	r3, r2
   2b52e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b530:	2300      	movs	r3, #0
   2b532:	617b      	str	r3, [r7, #20]
   2b534:	e019      	b.n	2b56a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2b536:	4b11      	ldr	r3, [pc, #68]	; (2b57c <_tcc_interrupt_handler+0x78>)
   2b538:	697a      	ldr	r2, [r7, #20]
   2b53a:	0092      	lsls	r2, r2, #2
   2b53c:	58d3      	ldr	r3, [r2, r3]
   2b53e:	68fa      	ldr	r2, [r7, #12]
   2b540:	4013      	ands	r3, r2
   2b542:	d00f      	beq.n	2b564 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2b544:	693a      	ldr	r2, [r7, #16]
   2b546:	697b      	ldr	r3, [r7, #20]
   2b548:	009b      	lsls	r3, r3, #2
   2b54a:	18d3      	adds	r3, r2, r3
   2b54c:	3304      	adds	r3, #4
   2b54e:	681b      	ldr	r3, [r3, #0]
   2b550:	693a      	ldr	r2, [r7, #16]
   2b552:	0010      	movs	r0, r2
   2b554:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2b556:	693b      	ldr	r3, [r7, #16]
   2b558:	681b      	ldr	r3, [r3, #0]
   2b55a:	4a08      	ldr	r2, [pc, #32]	; (2b57c <_tcc_interrupt_handler+0x78>)
   2b55c:	6979      	ldr	r1, [r7, #20]
   2b55e:	0089      	lsls	r1, r1, #2
   2b560:	588a      	ldr	r2, [r1, r2]
   2b562:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b564:	697b      	ldr	r3, [r7, #20]
   2b566:	3301      	adds	r3, #1
   2b568:	617b      	str	r3, [r7, #20]
   2b56a:	697b      	ldr	r3, [r7, #20]
   2b56c:	2b0b      	cmp	r3, #11
   2b56e:	dde2      	ble.n	2b536 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2b570:	46c0      	nop			; (mov r8, r8)
   2b572:	46bd      	mov	sp, r7
   2b574:	b006      	add	sp, #24
   2b576:	bd80      	pop	{r7, pc}
   2b578:	20005dec 	.word	0x20005dec
   2b57c:	0003bc90 	.word	0x0003bc90

0002b580 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2b580:	b580      	push	{r7, lr}
   2b582:	b082      	sub	sp, #8
   2b584:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2b586:	4b2f      	ldr	r3, [pc, #188]	; (2b644 <Reset_Handler+0xc4>)
   2b588:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2b58a:	4b2f      	ldr	r3, [pc, #188]	; (2b648 <Reset_Handler+0xc8>)
   2b58c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2b58e:	687a      	ldr	r2, [r7, #4]
   2b590:	683b      	ldr	r3, [r7, #0]
   2b592:	429a      	cmp	r2, r3
   2b594:	d00c      	beq.n	2b5b0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2b596:	e007      	b.n	2b5a8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2b598:	683b      	ldr	r3, [r7, #0]
   2b59a:	1d1a      	adds	r2, r3, #4
   2b59c:	603a      	str	r2, [r7, #0]
   2b59e:	687a      	ldr	r2, [r7, #4]
   2b5a0:	1d11      	adds	r1, r2, #4
   2b5a2:	6079      	str	r1, [r7, #4]
   2b5a4:	6812      	ldr	r2, [r2, #0]
   2b5a6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2b5a8:	683a      	ldr	r2, [r7, #0]
   2b5aa:	4b28      	ldr	r3, [pc, #160]	; (2b64c <Reset_Handler+0xcc>)
   2b5ac:	429a      	cmp	r2, r3
   2b5ae:	d3f3      	bcc.n	2b598 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2b5b0:	4b27      	ldr	r3, [pc, #156]	; (2b650 <Reset_Handler+0xd0>)
   2b5b2:	603b      	str	r3, [r7, #0]
   2b5b4:	e004      	b.n	2b5c0 <Reset_Handler+0x40>
                *pDest++ = 0;
   2b5b6:	683b      	ldr	r3, [r7, #0]
   2b5b8:	1d1a      	adds	r2, r3, #4
   2b5ba:	603a      	str	r2, [r7, #0]
   2b5bc:	2200      	movs	r2, #0
   2b5be:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2b5c0:	683a      	ldr	r2, [r7, #0]
   2b5c2:	4b24      	ldr	r3, [pc, #144]	; (2b654 <Reset_Handler+0xd4>)
   2b5c4:	429a      	cmp	r2, r3
   2b5c6:	d3f6      	bcc.n	2b5b6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2b5c8:	4b23      	ldr	r3, [pc, #140]	; (2b658 <Reset_Handler+0xd8>)
   2b5ca:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2b5cc:	4b23      	ldr	r3, [pc, #140]	; (2b65c <Reset_Handler+0xdc>)
   2b5ce:	687a      	ldr	r2, [r7, #4]
   2b5d0:	21ff      	movs	r1, #255	; 0xff
   2b5d2:	438a      	bics	r2, r1
   2b5d4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2b5d6:	4a22      	ldr	r2, [pc, #136]	; (2b660 <Reset_Handler+0xe0>)
   2b5d8:	2390      	movs	r3, #144	; 0x90
   2b5da:	005b      	lsls	r3, r3, #1
   2b5dc:	2102      	movs	r1, #2
   2b5de:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2b5e0:	4a20      	ldr	r2, [pc, #128]	; (2b664 <Reset_Handler+0xe4>)
   2b5e2:	78d3      	ldrb	r3, [r2, #3]
   2b5e4:	2103      	movs	r1, #3
   2b5e6:	438b      	bics	r3, r1
   2b5e8:	1c19      	adds	r1, r3, #0
   2b5ea:	2302      	movs	r3, #2
   2b5ec:	430b      	orrs	r3, r1
   2b5ee:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2b5f0:	4a1c      	ldr	r2, [pc, #112]	; (2b664 <Reset_Handler+0xe4>)
   2b5f2:	78d3      	ldrb	r3, [r2, #3]
   2b5f4:	210c      	movs	r1, #12
   2b5f6:	438b      	bics	r3, r1
   2b5f8:	1c19      	adds	r1, r3, #0
   2b5fa:	2308      	movs	r3, #8
   2b5fc:	430b      	orrs	r3, r1
   2b5fe:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2b600:	4a19      	ldr	r2, [pc, #100]	; (2b668 <Reset_Handler+0xe8>)
   2b602:	7b93      	ldrb	r3, [r2, #14]
   2b604:	2130      	movs	r1, #48	; 0x30
   2b606:	438b      	bics	r3, r1
   2b608:	1c19      	adds	r1, r3, #0
   2b60a:	2320      	movs	r3, #32
   2b60c:	430b      	orrs	r3, r1
   2b60e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2b610:	4a15      	ldr	r2, [pc, #84]	; (2b668 <Reset_Handler+0xe8>)
   2b612:	7b93      	ldrb	r3, [r2, #14]
   2b614:	210c      	movs	r1, #12
   2b616:	438b      	bics	r3, r1
   2b618:	1c19      	adds	r1, r3, #0
   2b61a:	2308      	movs	r3, #8
   2b61c:	430b      	orrs	r3, r1
   2b61e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2b620:	4a11      	ldr	r2, [pc, #68]	; (2b668 <Reset_Handler+0xe8>)
   2b622:	7b93      	ldrb	r3, [r2, #14]
   2b624:	2103      	movs	r1, #3
   2b626:	438b      	bics	r3, r1
   2b628:	1c19      	adds	r1, r3, #0
   2b62a:	2302      	movs	r3, #2
   2b62c:	430b      	orrs	r3, r1
   2b62e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2b630:	4a0e      	ldr	r2, [pc, #56]	; (2b66c <Reset_Handler+0xec>)
   2b632:	6853      	ldr	r3, [r2, #4]
   2b634:	2180      	movs	r1, #128	; 0x80
   2b636:	430b      	orrs	r3, r1
   2b638:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2b63a:	4b0d      	ldr	r3, [pc, #52]	; (2b670 <Reset_Handler+0xf0>)
   2b63c:	4798      	blx	r3

        /* Branch to main function */
        main();
   2b63e:	4b0d      	ldr	r3, [pc, #52]	; (2b674 <Reset_Handler+0xf4>)
   2b640:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2b642:	e7fe      	b.n	2b642 <Reset_Handler+0xc2>
   2b644:	0003cb40 	.word	0x0003cb40
   2b648:	20000000 	.word	0x20000000
   2b64c:	20000300 	.word	0x20000300
   2b650:	20000300 	.word	0x20000300
   2b654:	20005e5c 	.word	0x20005e5c
   2b658:	00012000 	.word	0x00012000
   2b65c:	e000ed00 	.word	0xe000ed00
   2b660:	41007000 	.word	0x41007000
   2b664:	41005000 	.word	0x41005000
   2b668:	41004800 	.word	0x41004800
   2b66c:	41004000 	.word	0x41004000
   2b670:	000352d1 	.word	0x000352d1
   2b674:	00032db5 	.word	0x00032db5

0002b678 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2b678:	b580      	push	{r7, lr}
   2b67a:	af00      	add	r7, sp, #0
  __asm volatile (
   2b67c:	2004      	movs	r0, #4
   2b67e:	4671      	mov	r1, lr
   2b680:	4208      	tst	r0, r1
   2b682:	d002      	beq.n	2b68a <_MSP>
   2b684:	f3ef 8009 	mrs	r0, PSP
   2b688:	e001      	b.n	2b68e <_HALT>

0002b68a <_MSP>:
   2b68a:	f3ef 8008 	mrs	r0, MSP

0002b68e <_HALT>:
   2b68e:	6941      	ldr	r1, [r0, #20]
   2b690:	e004      	b.n	2b69c <HardFault_HandlerC>
   2b692:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2b694:	46c0      	nop			; (mov r8, r8)
   2b696:	46bd      	mov	sp, r7
   2b698:	bd80      	pop	{r7, pc}
	...

0002b69c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2b69c:	b580      	push	{r7, lr}
   2b69e:	b090      	sub	sp, #64	; 0x40
   2b6a0:	af00      	add	r7, sp, #0
   2b6a2:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2b6a4:	687b      	ldr	r3, [r7, #4]
   2b6a6:	681b      	ldr	r3, [r3, #0]
   2b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2b6aa:	687b      	ldr	r3, [r7, #4]
   2b6ac:	685b      	ldr	r3, [r3, #4]
   2b6ae:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2b6b0:	687b      	ldr	r3, [r7, #4]
   2b6b2:	689b      	ldr	r3, [r3, #8]
   2b6b4:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2b6b6:	687b      	ldr	r3, [r7, #4]
   2b6b8:	68db      	ldr	r3, [r3, #12]
   2b6ba:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2b6bc:	687b      	ldr	r3, [r7, #4]
   2b6be:	691b      	ldr	r3, [r3, #16]
   2b6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2b6c2:	687b      	ldr	r3, [r7, #4]
   2b6c4:	695b      	ldr	r3, [r3, #20]
   2b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2b6c8:	687b      	ldr	r3, [r7, #4]
   2b6ca:	699b      	ldr	r3, [r3, #24]
   2b6cc:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2b6ce:	687b      	ldr	r3, [r7, #4]
   2b6d0:	69db      	ldr	r3, [r3, #28]
   2b6d2:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2b6d4:	4b0b      	ldr	r3, [pc, #44]	; (2b704 <HardFault_HandlerC+0x68>)
   2b6d6:	681b      	ldr	r3, [r3, #0]
   2b6d8:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2b6da:	4b0b      	ldr	r3, [pc, #44]	; (2b708 <HardFault_HandlerC+0x6c>)
   2b6dc:	681b      	ldr	r3, [r3, #0]
   2b6de:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2b6e0:	4b0a      	ldr	r3, [pc, #40]	; (2b70c <HardFault_HandlerC+0x70>)
   2b6e2:	681b      	ldr	r3, [r3, #0]
   2b6e4:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2b6e6:	4b0a      	ldr	r3, [pc, #40]	; (2b710 <HardFault_HandlerC+0x74>)
   2b6e8:	681b      	ldr	r3, [r3, #0]
   2b6ea:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2b6ec:	4b09      	ldr	r3, [pc, #36]	; (2b714 <HardFault_HandlerC+0x78>)
   2b6ee:	681b      	ldr	r3, [r3, #0]
   2b6f0:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2b6f2:	4b09      	ldr	r3, [pc, #36]	; (2b718 <HardFault_HandlerC+0x7c>)
   2b6f4:	681b      	ldr	r3, [r3, #0]
   2b6f6:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2b6f8:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2b6fa:	46c0      	nop			; (mov r8, r8)
   2b6fc:	46bd      	mov	sp, r7
   2b6fe:	b010      	add	sp, #64	; 0x40
   2b700:	bd80      	pop	{r7, pc}
   2b702:	46c0      	nop			; (mov r8, r8)
   2b704:	e000ed28 	.word	0xe000ed28
   2b708:	e000ed2c 	.word	0xe000ed2c
   2b70c:	e000ed30 	.word	0xe000ed30
   2b710:	e000ed3c 	.word	0xe000ed3c
   2b714:	e000ed34 	.word	0xe000ed34
   2b718:	e000ed38 	.word	0xe000ed38

0002b71c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2b71c:	b580      	push	{r7, lr}
   2b71e:	b086      	sub	sp, #24
   2b720:	af00      	add	r7, sp, #0
   2b722:	60f8      	str	r0, [r7, #12]
   2b724:	60b9      	str	r1, [r7, #8]
   2b726:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b728:	2300      	movs	r3, #0
   2b72a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2b72c:	68fb      	ldr	r3, [r7, #12]
   2b72e:	2b00      	cmp	r3, #0
   2b730:	d012      	beq.n	2b758 <_read+0x3c>
		return -1;
   2b732:	2301      	movs	r3, #1
   2b734:	425b      	negs	r3, r3
   2b736:	e013      	b.n	2b760 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2b738:	4b0b      	ldr	r3, [pc, #44]	; (2b768 <_read+0x4c>)
   2b73a:	681a      	ldr	r2, [r3, #0]
   2b73c:	4b0b      	ldr	r3, [pc, #44]	; (2b76c <_read+0x50>)
   2b73e:	681b      	ldr	r3, [r3, #0]
   2b740:	68b9      	ldr	r1, [r7, #8]
   2b742:	0018      	movs	r0, r3
   2b744:	4790      	blx	r2
		ptr++;
   2b746:	68bb      	ldr	r3, [r7, #8]
   2b748:	3301      	adds	r3, #1
   2b74a:	60bb      	str	r3, [r7, #8]
		nChars++;
   2b74c:	697b      	ldr	r3, [r7, #20]
   2b74e:	3301      	adds	r3, #1
   2b750:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2b752:	687b      	ldr	r3, [r7, #4]
   2b754:	3b01      	subs	r3, #1
   2b756:	607b      	str	r3, [r7, #4]
   2b758:	687b      	ldr	r3, [r7, #4]
   2b75a:	2b00      	cmp	r3, #0
   2b75c:	dcec      	bgt.n	2b738 <_read+0x1c>
	}
	return nChars;
   2b75e:	697b      	ldr	r3, [r7, #20]
}
   2b760:	0018      	movs	r0, r3
   2b762:	46bd      	mov	sp, r7
   2b764:	b006      	add	sp, #24
   2b766:	bd80      	pop	{r7, pc}
   2b768:	20005df8 	.word	0x20005df8
   2b76c:	20005e00 	.word	0x20005e00

0002b770 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2b770:	b580      	push	{r7, lr}
   2b772:	b086      	sub	sp, #24
   2b774:	af00      	add	r7, sp, #0
   2b776:	60f8      	str	r0, [r7, #12]
   2b778:	60b9      	str	r1, [r7, #8]
   2b77a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b77c:	2300      	movs	r3, #0
   2b77e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2b780:	68fb      	ldr	r3, [r7, #12]
   2b782:	2b01      	cmp	r3, #1
   2b784:	d01d      	beq.n	2b7c2 <_write+0x52>
   2b786:	68fb      	ldr	r3, [r7, #12]
   2b788:	2b02      	cmp	r3, #2
   2b78a:	d01a      	beq.n	2b7c2 <_write+0x52>
   2b78c:	68fb      	ldr	r3, [r7, #12]
   2b78e:	2b03      	cmp	r3, #3
   2b790:	d017      	beq.n	2b7c2 <_write+0x52>
		return -1;
   2b792:	2301      	movs	r3, #1
   2b794:	425b      	negs	r3, r3
   2b796:	e018      	b.n	2b7ca <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2b798:	4b0e      	ldr	r3, [pc, #56]	; (2b7d4 <_write+0x64>)
   2b79a:	681a      	ldr	r2, [r3, #0]
   2b79c:	4b0e      	ldr	r3, [pc, #56]	; (2b7d8 <_write+0x68>)
   2b79e:	6818      	ldr	r0, [r3, #0]
   2b7a0:	68bb      	ldr	r3, [r7, #8]
   2b7a2:	1c59      	adds	r1, r3, #1
   2b7a4:	60b9      	str	r1, [r7, #8]
   2b7a6:	781b      	ldrb	r3, [r3, #0]
   2b7a8:	0019      	movs	r1, r3
   2b7aa:	4790      	blx	r2
   2b7ac:	1e03      	subs	r3, r0, #0
   2b7ae:	da02      	bge.n	2b7b6 <_write+0x46>
			return -1;
   2b7b0:	2301      	movs	r3, #1
   2b7b2:	425b      	negs	r3, r3
   2b7b4:	e009      	b.n	2b7ca <_write+0x5a>
		}
		++nChars;
   2b7b6:	697b      	ldr	r3, [r7, #20]
   2b7b8:	3301      	adds	r3, #1
   2b7ba:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2b7bc:	687b      	ldr	r3, [r7, #4]
   2b7be:	3b01      	subs	r3, #1
   2b7c0:	607b      	str	r3, [r7, #4]
   2b7c2:	687b      	ldr	r3, [r7, #4]
   2b7c4:	2b00      	cmp	r3, #0
   2b7c6:	d1e7      	bne.n	2b798 <_write+0x28>
	}
	return nChars;
   2b7c8:	697b      	ldr	r3, [r7, #20]
}
   2b7ca:	0018      	movs	r0, r3
   2b7cc:	46bd      	mov	sp, r7
   2b7ce:	b006      	add	sp, #24
   2b7d0:	bd80      	pop	{r7, pc}
   2b7d2:	46c0      	nop			; (mov r8, r8)
   2b7d4:	20005dfc 	.word	0x20005dfc
   2b7d8:	20005e00 	.word	0x20005e00

0002b7dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2b7dc:	b580      	push	{r7, lr}
   2b7de:	b084      	sub	sp, #16
   2b7e0:	af00      	add	r7, sp, #0
   2b7e2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2b7e4:	4b0a      	ldr	r3, [pc, #40]	; (2b810 <_sbrk+0x34>)
   2b7e6:	681b      	ldr	r3, [r3, #0]
   2b7e8:	2b00      	cmp	r3, #0
   2b7ea:	d102      	bne.n	2b7f2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2b7ec:	4b08      	ldr	r3, [pc, #32]	; (2b810 <_sbrk+0x34>)
   2b7ee:	4a09      	ldr	r2, [pc, #36]	; (2b814 <_sbrk+0x38>)
   2b7f0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2b7f2:	4b07      	ldr	r3, [pc, #28]	; (2b810 <_sbrk+0x34>)
   2b7f4:	681b      	ldr	r3, [r3, #0]
   2b7f6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2b7f8:	4b05      	ldr	r3, [pc, #20]	; (2b810 <_sbrk+0x34>)
   2b7fa:	681a      	ldr	r2, [r3, #0]
   2b7fc:	687b      	ldr	r3, [r7, #4]
   2b7fe:	18d2      	adds	r2, r2, r3
   2b800:	4b03      	ldr	r3, [pc, #12]	; (2b810 <_sbrk+0x34>)
   2b802:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2b804:	68fb      	ldr	r3, [r7, #12]
}
   2b806:	0018      	movs	r0, r3
   2b808:	46bd      	mov	sp, r7
   2b80a:	b004      	add	sp, #16
   2b80c:	bd80      	pop	{r7, pc}
   2b80e:	46c0      	nop			; (mov r8, r8)
   2b810:	20004304 	.word	0x20004304
   2b814:	20007e60 	.word	0x20007e60

0002b818 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b818:	b580      	push	{r7, lr}
   2b81a:	b082      	sub	sp, #8
   2b81c:	af00      	add	r7, sp, #0
   2b81e:	6078      	str	r0, [r7, #4]
	return -1;
   2b820:	2301      	movs	r3, #1
   2b822:	425b      	negs	r3, r3
}
   2b824:	0018      	movs	r0, r3
   2b826:	46bd      	mov	sp, r7
   2b828:	b002      	add	sp, #8
   2b82a:	bd80      	pop	{r7, pc}

0002b82c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b82c:	b580      	push	{r7, lr}
   2b82e:	b082      	sub	sp, #8
   2b830:	af00      	add	r7, sp, #0
   2b832:	6078      	str	r0, [r7, #4]
   2b834:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b836:	683b      	ldr	r3, [r7, #0]
   2b838:	2280      	movs	r2, #128	; 0x80
   2b83a:	0192      	lsls	r2, r2, #6
   2b83c:	605a      	str	r2, [r3, #4]

	return 0;
   2b83e:	2300      	movs	r3, #0
}
   2b840:	0018      	movs	r0, r3
   2b842:	46bd      	mov	sp, r7
   2b844:	b002      	add	sp, #8
   2b846:	bd80      	pop	{r7, pc}

0002b848 <_isatty>:

extern int _isatty(int file)
{
   2b848:	b580      	push	{r7, lr}
   2b84a:	b082      	sub	sp, #8
   2b84c:	af00      	add	r7, sp, #0
   2b84e:	6078      	str	r0, [r7, #4]
	return 1;
   2b850:	2301      	movs	r3, #1
}
   2b852:	0018      	movs	r0, r3
   2b854:	46bd      	mov	sp, r7
   2b856:	b002      	add	sp, #8
   2b858:	bd80      	pop	{r7, pc}

0002b85a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b85a:	b580      	push	{r7, lr}
   2b85c:	b084      	sub	sp, #16
   2b85e:	af00      	add	r7, sp, #0
   2b860:	60f8      	str	r0, [r7, #12]
   2b862:	60b9      	str	r1, [r7, #8]
   2b864:	607a      	str	r2, [r7, #4]
	return 0;
   2b866:	2300      	movs	r3, #0
}
   2b868:	0018      	movs	r0, r3
   2b86a:	46bd      	mov	sp, r7
   2b86c:	b004      	add	sp, #16
   2b86e:	bd80      	pop	{r7, pc}

0002b870 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b870:	b580      	push	{r7, lr}
   2b872:	b082      	sub	sp, #8
   2b874:	af00      	add	r7, sp, #0
   2b876:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b878:	687b      	ldr	r3, [r7, #4]
   2b87a:	2200      	movs	r2, #0
   2b87c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b87e:	687b      	ldr	r3, [r7, #4]
   2b880:	2200      	movs	r2, #0
   2b882:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b884:	687b      	ldr	r3, [r7, #4]
   2b886:	2200      	movs	r2, #0
   2b888:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b88a:	687b      	ldr	r3, [r7, #4]
   2b88c:	2200      	movs	r2, #0
   2b88e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b890:	687b      	ldr	r3, [r7, #4]
   2b892:	2201      	movs	r2, #1
   2b894:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b896:	687b      	ldr	r3, [r7, #4]
   2b898:	2201      	movs	r2, #1
   2b89a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b89c:	687b      	ldr	r3, [r7, #4]
   2b89e:	22fa      	movs	r2, #250	; 0xfa
   2b8a0:	00d2      	lsls	r2, r2, #3
   2b8a2:	80da      	strh	r2, [r3, #6]
}
   2b8a4:	46c0      	nop			; (mov r8, r8)
   2b8a6:	46bd      	mov	sp, r7
   2b8a8:	b002      	add	sp, #8
   2b8aa:	bd80      	pop	{r7, pc}

0002b8ac <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b8ac:	b580      	push	{r7, lr}
   2b8ae:	b086      	sub	sp, #24
   2b8b0:	af00      	add	r7, sp, #0
   2b8b2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b8b4:	230c      	movs	r3, #12
   2b8b6:	18fb      	adds	r3, r7, r3
   2b8b8:	0018      	movs	r0, r3
   2b8ba:	4b23      	ldr	r3, [pc, #140]	; (2b948 <rtc_calendar_get_config_defaults+0x9c>)
   2b8bc:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b8be:	687b      	ldr	r3, [r7, #4]
   2b8c0:	22a0      	movs	r2, #160	; 0xa0
   2b8c2:	0112      	lsls	r2, r2, #4
   2b8c4:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b8c6:	687b      	ldr	r3, [r7, #4]
   2b8c8:	2200      	movs	r2, #0
   2b8ca:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b8cc:	687b      	ldr	r3, [r7, #4]
   2b8ce:	2200      	movs	r2, #0
   2b8d0:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b8d2:	687b      	ldr	r3, [r7, #4]
   2b8d4:	2200      	movs	r2, #0
   2b8d6:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b8d8:	687b      	ldr	r3, [r7, #4]
   2b8da:	22fa      	movs	r2, #250	; 0xfa
   2b8dc:	00d2      	lsls	r2, r2, #3
   2b8de:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b8e0:	2317      	movs	r3, #23
   2b8e2:	18fb      	adds	r3, r7, r3
   2b8e4:	2200      	movs	r2, #0
   2b8e6:	701a      	strb	r2, [r3, #0]
   2b8e8:	e025      	b.n	2b936 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b8ea:	2317      	movs	r3, #23
   2b8ec:	18fb      	adds	r3, r7, r3
   2b8ee:	781a      	ldrb	r2, [r3, #0]
   2b8f0:	6879      	ldr	r1, [r7, #4]
   2b8f2:	2008      	movs	r0, #8
   2b8f4:	0013      	movs	r3, r2
   2b8f6:	009b      	lsls	r3, r3, #2
   2b8f8:	189b      	adds	r3, r3, r2
   2b8fa:	005b      	lsls	r3, r3, #1
   2b8fc:	18cb      	adds	r3, r1, r3
   2b8fe:	181a      	adds	r2, r3, r0
   2b900:	230c      	movs	r3, #12
   2b902:	18fb      	adds	r3, r7, r3
   2b904:	0010      	movs	r0, r2
   2b906:	0019      	movs	r1, r3
   2b908:	2308      	movs	r3, #8
   2b90a:	001a      	movs	r2, r3
   2b90c:	4b0f      	ldr	r3, [pc, #60]	; (2b94c <rtc_calendar_get_config_defaults+0xa0>)
   2b90e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b910:	2317      	movs	r3, #23
   2b912:	18fb      	adds	r3, r7, r3
   2b914:	781a      	ldrb	r2, [r3, #0]
   2b916:	6879      	ldr	r1, [r7, #4]
   2b918:	0013      	movs	r3, r2
   2b91a:	009b      	lsls	r3, r3, #2
   2b91c:	189b      	adds	r3, r3, r2
   2b91e:	005b      	lsls	r3, r3, #1
   2b920:	18cb      	adds	r3, r1, r3
   2b922:	3310      	adds	r3, #16
   2b924:	2206      	movs	r2, #6
   2b926:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b928:	2317      	movs	r3, #23
   2b92a:	18fb      	adds	r3, r7, r3
   2b92c:	781a      	ldrb	r2, [r3, #0]
   2b92e:	2317      	movs	r3, #23
   2b930:	18fb      	adds	r3, r7, r3
   2b932:	3201      	adds	r2, #1
   2b934:	701a      	strb	r2, [r3, #0]
   2b936:	2317      	movs	r3, #23
   2b938:	18fb      	adds	r3, r7, r3
   2b93a:	781b      	ldrb	r3, [r3, #0]
   2b93c:	2b00      	cmp	r3, #0
   2b93e:	d0d4      	beq.n	2b8ea <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b940:	46c0      	nop			; (mov r8, r8)
   2b942:	46bd      	mov	sp, r7
   2b944:	b006      	add	sp, #24
   2b946:	bd80      	pop	{r7, pc}
   2b948:	0002b871 	.word	0x0002b871
   2b94c:	00035341 	.word	0x00035341

0002b950 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b950:	b580      	push	{r7, lr}
   2b952:	b088      	sub	sp, #32
   2b954:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b956:	230c      	movs	r3, #12
   2b958:	18fb      	adds	r3, r7, r3
   2b95a:	0018      	movs	r0, r3
   2b95c:	4b1a      	ldr	r3, [pc, #104]	; (2b9c8 <configure_rtc_calendar+0x78>)
   2b95e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b960:	1d3b      	adds	r3, r7, #4
   2b962:	0018      	movs	r0, r3
   2b964:	4b19      	ldr	r3, [pc, #100]	; (2b9cc <configure_rtc_calendar+0x7c>)
   2b966:	4798      	blx	r3
	init_time.year   = 2014;
   2b968:	1d3b      	adds	r3, r7, #4
   2b96a:	4a19      	ldr	r2, [pc, #100]	; (2b9d0 <configure_rtc_calendar+0x80>)
   2b96c:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b96e:	1d3b      	adds	r3, r7, #4
   2b970:	2201      	movs	r2, #1
   2b972:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b974:	1d3b      	adds	r3, r7, #4
   2b976:	2201      	movs	r2, #1
   2b978:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b97a:	1d3b      	adds	r3, r7, #4
   2b97c:	2200      	movs	r2, #0
   2b97e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b980:	1d3b      	adds	r3, r7, #4
   2b982:	2200      	movs	r2, #0
   2b984:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b986:	1d3b      	adds	r3, r7, #4
   2b988:	2204      	movs	r2, #4
   2b98a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b98c:	230c      	movs	r3, #12
   2b98e:	18fb      	adds	r3, r7, r3
   2b990:	2201      	movs	r2, #1
   2b992:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b994:	230c      	movs	r3, #12
   2b996:	18fb      	adds	r3, r7, r3
   2b998:	1d3a      	adds	r2, r7, #4
   2b99a:	3308      	adds	r3, #8
   2b99c:	ca03      	ldmia	r2!, {r0, r1}
   2b99e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b9a0:	230c      	movs	r3, #12
   2b9a2:	18fb      	adds	r3, r7, r3
   2b9a4:	2206      	movs	r2, #6
   2b9a6:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b9a8:	230c      	movs	r3, #12
   2b9aa:	18fa      	adds	r2, r7, r3
   2b9ac:	4909      	ldr	r1, [pc, #36]	; (2b9d4 <configure_rtc_calendar+0x84>)
   2b9ae:	4b0a      	ldr	r3, [pc, #40]	; (2b9d8 <configure_rtc_calendar+0x88>)
   2b9b0:	0018      	movs	r0, r3
   2b9b2:	4b0a      	ldr	r3, [pc, #40]	; (2b9dc <configure_rtc_calendar+0x8c>)
   2b9b4:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b9b6:	4b08      	ldr	r3, [pc, #32]	; (2b9d8 <configure_rtc_calendar+0x88>)
   2b9b8:	0018      	movs	r0, r3
   2b9ba:	4b09      	ldr	r3, [pc, #36]	; (2b9e0 <configure_rtc_calendar+0x90>)
   2b9bc:	4798      	blx	r3
}
   2b9be:	46c0      	nop			; (mov r8, r8)
   2b9c0:	46bd      	mov	sp, r7
   2b9c2:	b008      	add	sp, #32
   2b9c4:	bd80      	pop	{r7, pc}
   2b9c6:	46c0      	nop			; (mov r8, r8)
   2b9c8:	0002b8ad 	.word	0x0002b8ad
   2b9cc:	0002b871 	.word	0x0002b871
   2b9d0:	000007de 	.word	0x000007de
   2b9d4:	40001400 	.word	0x40001400
   2b9d8:	20005e04 	.word	0x20005e04
   2b9dc:	0002748d 	.word	0x0002748d
   2b9e0:	000271b9 	.word	0x000271b9

0002b9e4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b9e4:	b590      	push	{r4, r7, lr}
   2b9e6:	b085      	sub	sp, #20
   2b9e8:	af00      	add	r7, sp, #0
   2b9ea:	0002      	movs	r2, r0
   2b9ec:	1dfb      	adds	r3, r7, #7
   2b9ee:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b9f0:	4b1a      	ldr	r3, [pc, #104]	; (2ba5c <disk_initialize+0x78>)
   2b9f2:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b9f4:	1dfb      	adds	r3, r7, #7
   2b9f6:	781b      	ldrb	r3, [r3, #0]
   2b9f8:	2b01      	cmp	r3, #1
   2b9fa:	d901      	bls.n	2ba00 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b9fc:	2301      	movs	r3, #1
   2b9fe:	e029      	b.n	2ba54 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2ba00:	2300      	movs	r3, #0
   2ba02:	60fb      	str	r3, [r7, #12]
   2ba04:	e010      	b.n	2ba28 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2ba06:	230b      	movs	r3, #11
   2ba08:	18fc      	adds	r4, r7, r3
   2ba0a:	1dfb      	adds	r3, r7, #7
   2ba0c:	781b      	ldrb	r3, [r3, #0]
   2ba0e:	0018      	movs	r0, r3
   2ba10:	4b13      	ldr	r3, [pc, #76]	; (2ba60 <disk_initialize+0x7c>)
   2ba12:	4798      	blx	r3
   2ba14:	0003      	movs	r3, r0
   2ba16:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2ba18:	230b      	movs	r3, #11
   2ba1a:	18fb      	adds	r3, r7, r3
   2ba1c:	781b      	ldrb	r3, [r3, #0]
   2ba1e:	2b03      	cmp	r3, #3
   2ba20:	d106      	bne.n	2ba30 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2ba22:	68fb      	ldr	r3, [r7, #12]
   2ba24:	3301      	adds	r3, #1
   2ba26:	60fb      	str	r3, [r7, #12]
   2ba28:	68fb      	ldr	r3, [r7, #12]
   2ba2a:	2b01      	cmp	r3, #1
   2ba2c:	ddeb      	ble.n	2ba06 <disk_initialize+0x22>
   2ba2e:	e000      	b.n	2ba32 <disk_initialize+0x4e>
			break;
   2ba30:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2ba32:	230b      	movs	r3, #11
   2ba34:	18fb      	adds	r3, r7, r3
   2ba36:	781b      	ldrb	r3, [r3, #0]
   2ba38:	2b00      	cmp	r3, #0
   2ba3a:	d001      	beq.n	2ba40 <disk_initialize+0x5c>
		return STA_NOINIT;
   2ba3c:	2301      	movs	r3, #1
   2ba3e:	e009      	b.n	2ba54 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2ba40:	1dfb      	adds	r3, r7, #7
   2ba42:	781b      	ldrb	r3, [r3, #0]
   2ba44:	0018      	movs	r0, r3
   2ba46:	4b07      	ldr	r3, [pc, #28]	; (2ba64 <disk_initialize+0x80>)
   2ba48:	4798      	blx	r3
   2ba4a:	1e03      	subs	r3, r0, #0
   2ba4c:	d001      	beq.n	2ba52 <disk_initialize+0x6e>
		return STA_PROTECT;
   2ba4e:	2304      	movs	r3, #4
   2ba50:	e000      	b.n	2ba54 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2ba52:	2300      	movs	r3, #0
}
   2ba54:	0018      	movs	r0, r3
   2ba56:	46bd      	mov	sp, r7
   2ba58:	b005      	add	sp, #20
   2ba5a:	bd90      	pop	{r4, r7, pc}
   2ba5c:	0002b951 	.word	0x0002b951
   2ba60:	000266b5 	.word	0x000266b5
   2ba64:	0002676d 	.word	0x0002676d

0002ba68 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2ba68:	b580      	push	{r7, lr}
   2ba6a:	b082      	sub	sp, #8
   2ba6c:	af00      	add	r7, sp, #0
   2ba6e:	0002      	movs	r2, r0
   2ba70:	1dfb      	adds	r3, r7, #7
   2ba72:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2ba74:	1dfb      	adds	r3, r7, #7
   2ba76:	781b      	ldrb	r3, [r3, #0]
   2ba78:	0018      	movs	r0, r3
   2ba7a:	4b08      	ldr	r3, [pc, #32]	; (2ba9c <disk_status+0x34>)
   2ba7c:	4798      	blx	r3
   2ba7e:	1e03      	subs	r3, r0, #0
   2ba80:	d002      	beq.n	2ba88 <disk_status+0x20>
   2ba82:	2b02      	cmp	r3, #2
   2ba84:	d002      	beq.n	2ba8c <disk_status+0x24>
   2ba86:	e003      	b.n	2ba90 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2ba88:	2300      	movs	r3, #0
   2ba8a:	e002      	b.n	2ba92 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2ba8c:	2303      	movs	r3, #3
   2ba8e:	e000      	b.n	2ba92 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2ba90:	2301      	movs	r3, #1
	}
}
   2ba92:	0018      	movs	r0, r3
   2ba94:	46bd      	mov	sp, r7
   2ba96:	b002      	add	sp, #8
   2ba98:	bd80      	pop	{r7, pc}
   2ba9a:	46c0      	nop			; (mov r8, r8)
   2ba9c:	000266b5 	.word	0x000266b5

0002baa0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2baa0:	b590      	push	{r4, r7, lr}
   2baa2:	b089      	sub	sp, #36	; 0x24
   2baa4:	af00      	add	r7, sp, #0
   2baa6:	60b9      	str	r1, [r7, #8]
   2baa8:	607a      	str	r2, [r7, #4]
   2baaa:	0019      	movs	r1, r3
   2baac:	230f      	movs	r3, #15
   2baae:	18fb      	adds	r3, r7, r3
   2bab0:	1c02      	adds	r2, r0, #0
   2bab2:	701a      	strb	r2, [r3, #0]
   2bab4:	230e      	movs	r3, #14
   2bab6:	18fb      	adds	r3, r7, r3
   2bab8:	1c0a      	adds	r2, r1, #0
   2baba:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2babc:	231b      	movs	r3, #27
   2babe:	18fc      	adds	r4, r7, r3
   2bac0:	230f      	movs	r3, #15
   2bac2:	18fb      	adds	r3, r7, r3
   2bac4:	781b      	ldrb	r3, [r3, #0]
   2bac6:	0018      	movs	r0, r3
   2bac8:	4b28      	ldr	r3, [pc, #160]	; (2bb6c <disk_read+0xcc>)
   2baca:	4798      	blx	r3
   2bacc:	0003      	movs	r3, r0
   2bace:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2bad0:	231b      	movs	r3, #27
   2bad2:	18fb      	adds	r3, r7, r3
   2bad4:	781b      	ldrb	r3, [r3, #0]
   2bad6:	2b00      	cmp	r3, #0
   2bad8:	d101      	bne.n	2bade <disk_read+0x3e>
		return RES_ERROR;
   2bada:	2301      	movs	r3, #1
   2badc:	e042      	b.n	2bb64 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2bade:	2314      	movs	r3, #20
   2bae0:	18fa      	adds	r2, r7, r3
   2bae2:	230f      	movs	r3, #15
   2bae4:	18fb      	adds	r3, r7, r3
   2bae6:	781b      	ldrb	r3, [r3, #0]
   2bae8:	0011      	movs	r1, r2
   2baea:	0018      	movs	r0, r3
   2baec:	4b20      	ldr	r3, [pc, #128]	; (2bb70 <disk_read+0xd0>)
   2baee:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2baf0:	230e      	movs	r3, #14
   2baf2:	18fb      	adds	r3, r7, r3
   2baf4:	781b      	ldrb	r3, [r3, #0]
   2baf6:	221b      	movs	r2, #27
   2baf8:	18ba      	adds	r2, r7, r2
   2bafa:	7812      	ldrb	r2, [r2, #0]
   2bafc:	4353      	muls	r3, r2
   2bafe:	001a      	movs	r2, r3
   2bb00:	687b      	ldr	r3, [r7, #4]
   2bb02:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2bb04:	697b      	ldr	r3, [r7, #20]
   2bb06:	3301      	adds	r3, #1
   2bb08:	211b      	movs	r1, #27
   2bb0a:	1879      	adds	r1, r7, r1
   2bb0c:	7809      	ldrb	r1, [r1, #0]
   2bb0e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2bb10:	429a      	cmp	r2, r3
   2bb12:	d901      	bls.n	2bb18 <disk_read+0x78>
		return RES_PARERR;
   2bb14:	2304      	movs	r3, #4
   2bb16:	e025      	b.n	2bb64 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2bb18:	2300      	movs	r3, #0
   2bb1a:	61fb      	str	r3, [r7, #28]
   2bb1c:	e01b      	b.n	2bb56 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2bb1e:	231b      	movs	r3, #27
   2bb20:	18fb      	adds	r3, r7, r3
   2bb22:	781b      	ldrb	r3, [r3, #0]
   2bb24:	69fa      	ldr	r2, [r7, #28]
   2bb26:	435a      	muls	r2, r3
   2bb28:	687b      	ldr	r3, [r7, #4]
   2bb2a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2bb2c:	231b      	movs	r3, #27
   2bb2e:	18fb      	adds	r3, r7, r3
   2bb30:	781b      	ldrb	r3, [r3, #0]
   2bb32:	69fa      	ldr	r2, [r7, #28]
   2bb34:	4353      	muls	r3, r2
   2bb36:	025b      	lsls	r3, r3, #9
   2bb38:	68ba      	ldr	r2, [r7, #8]
   2bb3a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2bb3c:	230f      	movs	r3, #15
   2bb3e:	18fb      	adds	r3, r7, r3
   2bb40:	781b      	ldrb	r3, [r3, #0]
   2bb42:	0018      	movs	r0, r3
   2bb44:	4b0b      	ldr	r3, [pc, #44]	; (2bb74 <disk_read+0xd4>)
   2bb46:	4798      	blx	r3
   2bb48:	1e03      	subs	r3, r0, #0
   2bb4a:	d001      	beq.n	2bb50 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2bb4c:	2301      	movs	r3, #1
   2bb4e:	e009      	b.n	2bb64 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2bb50:	69fb      	ldr	r3, [r7, #28]
   2bb52:	3301      	adds	r3, #1
   2bb54:	61fb      	str	r3, [r7, #28]
   2bb56:	230e      	movs	r3, #14
   2bb58:	18fb      	adds	r3, r7, r3
   2bb5a:	781a      	ldrb	r2, [r3, #0]
   2bb5c:	69fb      	ldr	r3, [r7, #28]
   2bb5e:	429a      	cmp	r2, r3
   2bb60:	d8dd      	bhi.n	2bb1e <disk_read+0x7e>
		}
	}

	return RES_OK;
   2bb62:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2bb64:	0018      	movs	r0, r3
   2bb66:	46bd      	mov	sp, r7
   2bb68:	b009      	add	sp, #36	; 0x24
   2bb6a:	bd90      	pop	{r4, r7, pc}
   2bb6c:	00026741 	.word	0x00026741
   2bb70:	000266f5 	.word	0x000266f5
   2bb74:	000267b5 	.word	0x000267b5

0002bb78 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2bb78:	b590      	push	{r4, r7, lr}
   2bb7a:	b089      	sub	sp, #36	; 0x24
   2bb7c:	af00      	add	r7, sp, #0
   2bb7e:	60b9      	str	r1, [r7, #8]
   2bb80:	607a      	str	r2, [r7, #4]
   2bb82:	0019      	movs	r1, r3
   2bb84:	230f      	movs	r3, #15
   2bb86:	18fb      	adds	r3, r7, r3
   2bb88:	1c02      	adds	r2, r0, #0
   2bb8a:	701a      	strb	r2, [r3, #0]
   2bb8c:	230e      	movs	r3, #14
   2bb8e:	18fb      	adds	r3, r7, r3
   2bb90:	1c0a      	adds	r2, r1, #0
   2bb92:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2bb94:	231b      	movs	r3, #27
   2bb96:	18fc      	adds	r4, r7, r3
   2bb98:	230f      	movs	r3, #15
   2bb9a:	18fb      	adds	r3, r7, r3
   2bb9c:	781b      	ldrb	r3, [r3, #0]
   2bb9e:	0018      	movs	r0, r3
   2bba0:	4b28      	ldr	r3, [pc, #160]	; (2bc44 <disk_write+0xcc>)
   2bba2:	4798      	blx	r3
   2bba4:	0003      	movs	r3, r0
   2bba6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2bba8:	231b      	movs	r3, #27
   2bbaa:	18fb      	adds	r3, r7, r3
   2bbac:	781b      	ldrb	r3, [r3, #0]
   2bbae:	2b00      	cmp	r3, #0
   2bbb0:	d101      	bne.n	2bbb6 <disk_write+0x3e>
		return RES_ERROR;
   2bbb2:	2301      	movs	r3, #1
   2bbb4:	e042      	b.n	2bc3c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2bbb6:	2314      	movs	r3, #20
   2bbb8:	18fa      	adds	r2, r7, r3
   2bbba:	230f      	movs	r3, #15
   2bbbc:	18fb      	adds	r3, r7, r3
   2bbbe:	781b      	ldrb	r3, [r3, #0]
   2bbc0:	0011      	movs	r1, r2
   2bbc2:	0018      	movs	r0, r3
   2bbc4:	4b20      	ldr	r3, [pc, #128]	; (2bc48 <disk_write+0xd0>)
   2bbc6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2bbc8:	230e      	movs	r3, #14
   2bbca:	18fb      	adds	r3, r7, r3
   2bbcc:	781b      	ldrb	r3, [r3, #0]
   2bbce:	221b      	movs	r2, #27
   2bbd0:	18ba      	adds	r2, r7, r2
   2bbd2:	7812      	ldrb	r2, [r2, #0]
   2bbd4:	4353      	muls	r3, r2
   2bbd6:	001a      	movs	r2, r3
   2bbd8:	687b      	ldr	r3, [r7, #4]
   2bbda:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2bbdc:	697b      	ldr	r3, [r7, #20]
   2bbde:	3301      	adds	r3, #1
   2bbe0:	211b      	movs	r1, #27
   2bbe2:	1879      	adds	r1, r7, r1
   2bbe4:	7809      	ldrb	r1, [r1, #0]
   2bbe6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2bbe8:	429a      	cmp	r2, r3
   2bbea:	d901      	bls.n	2bbf0 <disk_write+0x78>
		return RES_PARERR;
   2bbec:	2304      	movs	r3, #4
   2bbee:	e025      	b.n	2bc3c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2bbf0:	2300      	movs	r3, #0
   2bbf2:	61fb      	str	r3, [r7, #28]
   2bbf4:	e01b      	b.n	2bc2e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2bbf6:	231b      	movs	r3, #27
   2bbf8:	18fb      	adds	r3, r7, r3
   2bbfa:	781b      	ldrb	r3, [r3, #0]
   2bbfc:	69fa      	ldr	r2, [r7, #28]
   2bbfe:	435a      	muls	r2, r3
   2bc00:	687b      	ldr	r3, [r7, #4]
   2bc02:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2bc04:	231b      	movs	r3, #27
   2bc06:	18fb      	adds	r3, r7, r3
   2bc08:	781b      	ldrb	r3, [r3, #0]
   2bc0a:	69fa      	ldr	r2, [r7, #28]
   2bc0c:	4353      	muls	r3, r2
   2bc0e:	025b      	lsls	r3, r3, #9
   2bc10:	68ba      	ldr	r2, [r7, #8]
   2bc12:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2bc14:	230f      	movs	r3, #15
   2bc16:	18fb      	adds	r3, r7, r3
   2bc18:	781b      	ldrb	r3, [r3, #0]
   2bc1a:	0018      	movs	r0, r3
   2bc1c:	4b0b      	ldr	r3, [pc, #44]	; (2bc4c <disk_write+0xd4>)
   2bc1e:	4798      	blx	r3
   2bc20:	1e03      	subs	r3, r0, #0
   2bc22:	d001      	beq.n	2bc28 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2bc24:	2301      	movs	r3, #1
   2bc26:	e009      	b.n	2bc3c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2bc28:	69fb      	ldr	r3, [r7, #28]
   2bc2a:	3301      	adds	r3, #1
   2bc2c:	61fb      	str	r3, [r7, #28]
   2bc2e:	230e      	movs	r3, #14
   2bc30:	18fb      	adds	r3, r7, r3
   2bc32:	781a      	ldrb	r2, [r3, #0]
   2bc34:	69fb      	ldr	r3, [r7, #28]
   2bc36:	429a      	cmp	r2, r3
   2bc38:	d8dd      	bhi.n	2bbf6 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2bc3a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2bc3c:	0018      	movs	r0, r3
   2bc3e:	46bd      	mov	sp, r7
   2bc40:	b009      	add	sp, #36	; 0x24
   2bc42:	bd90      	pop	{r4, r7, pc}
   2bc44:	00026741 	.word	0x00026741
   2bc48:	000266f5 	.word	0x000266f5
   2bc4c:	00026809 	.word	0x00026809

0002bc50 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2bc50:	b590      	push	{r4, r7, lr}
   2bc52:	b085      	sub	sp, #20
   2bc54:	af00      	add	r7, sp, #0
   2bc56:	603a      	str	r2, [r7, #0]
   2bc58:	1dfb      	adds	r3, r7, #7
   2bc5a:	1c02      	adds	r2, r0, #0
   2bc5c:	701a      	strb	r2, [r3, #0]
   2bc5e:	1dbb      	adds	r3, r7, #6
   2bc60:	1c0a      	adds	r2, r1, #0
   2bc62:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2bc64:	230f      	movs	r3, #15
   2bc66:	18fb      	adds	r3, r7, r3
   2bc68:	2204      	movs	r2, #4
   2bc6a:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2bc6c:	1dbb      	adds	r3, r7, #6
   2bc6e:	781b      	ldrb	r3, [r3, #0]
   2bc70:	2b01      	cmp	r3, #1
   2bc72:	d00f      	beq.n	2bc94 <disk_ioctl+0x44>
   2bc74:	dc02      	bgt.n	2bc7c <disk_ioctl+0x2c>
   2bc76:	2b00      	cmp	r3, #0
   2bc78:	d044      	beq.n	2bd04 <disk_ioctl+0xb4>
   2bc7a:	e054      	b.n	2bd26 <disk_ioctl+0xd6>
   2bc7c:	2b02      	cmp	r3, #2
   2bc7e:	d01a      	beq.n	2bcb6 <disk_ioctl+0x66>
   2bc80:	2b03      	cmp	r3, #3
   2bc82:	d150      	bne.n	2bd26 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2bc84:	683b      	ldr	r3, [r7, #0]
   2bc86:	2201      	movs	r2, #1
   2bc88:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2bc8a:	230f      	movs	r3, #15
   2bc8c:	18fb      	adds	r3, r7, r3
   2bc8e:	2200      	movs	r2, #0
   2bc90:	701a      	strb	r2, [r3, #0]
		break;
   2bc92:	e04c      	b.n	2bd2e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2bc94:	2308      	movs	r3, #8
   2bc96:	18fa      	adds	r2, r7, r3
   2bc98:	1dfb      	adds	r3, r7, #7
   2bc9a:	781b      	ldrb	r3, [r3, #0]
   2bc9c:	0011      	movs	r1, r2
   2bc9e:	0018      	movs	r0, r3
   2bca0:	4b26      	ldr	r3, [pc, #152]	; (2bd3c <disk_ioctl+0xec>)
   2bca2:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2bca4:	68bb      	ldr	r3, [r7, #8]
   2bca6:	1c5a      	adds	r2, r3, #1
   2bca8:	683b      	ldr	r3, [r7, #0]
   2bcaa:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2bcac:	230f      	movs	r3, #15
   2bcae:	18fb      	adds	r3, r7, r3
   2bcb0:	2200      	movs	r2, #0
   2bcb2:	701a      	strb	r2, [r3, #0]
	}
	break;
   2bcb4:	e03b      	b.n	2bd2e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2bcb6:	230e      	movs	r3, #14
   2bcb8:	18fc      	adds	r4, r7, r3
   2bcba:	1dfb      	adds	r3, r7, #7
   2bcbc:	781b      	ldrb	r3, [r3, #0]
   2bcbe:	0018      	movs	r0, r3
   2bcc0:	4b1f      	ldr	r3, [pc, #124]	; (2bd40 <disk_ioctl+0xf0>)
   2bcc2:	4798      	blx	r3
   2bcc4:	0003      	movs	r3, r0
   2bcc6:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2bcc8:	230e      	movs	r3, #14
   2bcca:	18fb      	adds	r3, r7, r3
   2bccc:	781b      	ldrb	r3, [r3, #0]
   2bcce:	2b01      	cmp	r3, #1
   2bcd0:	d010      	beq.n	2bcf4 <disk_ioctl+0xa4>
   2bcd2:	230e      	movs	r3, #14
   2bcd4:	18fb      	adds	r3, r7, r3
   2bcd6:	781b      	ldrb	r3, [r3, #0]
   2bcd8:	2b02      	cmp	r3, #2
   2bcda:	d00b      	beq.n	2bcf4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2bcdc:	230e      	movs	r3, #14
   2bcde:	18fb      	adds	r3, r7, r3
   2bce0:	781b      	ldrb	r3, [r3, #0]
   2bce2:	2b04      	cmp	r3, #4
   2bce4:	d006      	beq.n	2bcf4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2bce6:	230e      	movs	r3, #14
   2bce8:	18fb      	adds	r3, r7, r3
   2bcea:	781b      	ldrb	r3, [r3, #0]
   2bcec:	2b08      	cmp	r3, #8
   2bcee:	d001      	beq.n	2bcf4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2bcf0:	2301      	movs	r3, #1
   2bcf2:	e01f      	b.n	2bd34 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2bcf4:	683b      	ldr	r3, [r7, #0]
   2bcf6:	2200      	movs	r2, #0
   2bcf8:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2bcfa:	230f      	movs	r3, #15
   2bcfc:	18fb      	adds	r3, r7, r3
   2bcfe:	2200      	movs	r2, #0
   2bd00:	701a      	strb	r2, [r3, #0]
	}
	break;
   2bd02:	e014      	b.n	2bd2e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2bd04:	1dfb      	adds	r3, r7, #7
   2bd06:	781b      	ldrb	r3, [r3, #0]
   2bd08:	0018      	movs	r0, r3
   2bd0a:	4b0e      	ldr	r3, [pc, #56]	; (2bd44 <disk_ioctl+0xf4>)
   2bd0c:	4798      	blx	r3
   2bd0e:	1e03      	subs	r3, r0, #0
   2bd10:	d104      	bne.n	2bd1c <disk_ioctl+0xcc>
			res = RES_OK;
   2bd12:	230f      	movs	r3, #15
   2bd14:	18fb      	adds	r3, r7, r3
   2bd16:	2200      	movs	r2, #0
   2bd18:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2bd1a:	e008      	b.n	2bd2e <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2bd1c:	230f      	movs	r3, #15
   2bd1e:	18fb      	adds	r3, r7, r3
   2bd20:	2203      	movs	r2, #3
   2bd22:	701a      	strb	r2, [r3, #0]
		break;
   2bd24:	e003      	b.n	2bd2e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2bd26:	230f      	movs	r3, #15
   2bd28:	18fb      	adds	r3, r7, r3
   2bd2a:	2204      	movs	r2, #4
   2bd2c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2bd2e:	230f      	movs	r3, #15
   2bd30:	18fb      	adds	r3, r7, r3
   2bd32:	781b      	ldrb	r3, [r3, #0]
}
   2bd34:	0018      	movs	r0, r3
   2bd36:	46bd      	mov	sp, r7
   2bd38:	b005      	add	sp, #20
   2bd3a:	bd90      	pop	{r4, r7, pc}
   2bd3c:	000266f5 	.word	0x000266f5
   2bd40:	00026741 	.word	0x00026741
   2bd44:	000266b5 	.word	0x000266b5

0002bd48 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2bd48:	b580      	push	{r7, lr}
   2bd4a:	b084      	sub	sp, #16
   2bd4c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2bd4e:	1d3a      	adds	r2, r7, #4
   2bd50:	4b12      	ldr	r3, [pc, #72]	; (2bd9c <get_fattime+0x54>)
   2bd52:	0011      	movs	r1, r2
   2bd54:	0018      	movs	r0, r3
   2bd56:	4b12      	ldr	r3, [pc, #72]	; (2bda0 <get_fattime+0x58>)
   2bd58:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2bd5a:	1d3b      	adds	r3, r7, #4
   2bd5c:	88db      	ldrh	r3, [r3, #6]
   2bd5e:	4a11      	ldr	r2, [pc, #68]	; (2bda4 <get_fattime+0x5c>)
   2bd60:	4694      	mov	ip, r2
   2bd62:	4463      	add	r3, ip
   2bd64:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2bd66:	1d3b      	adds	r3, r7, #4
   2bd68:	795b      	ldrb	r3, [r3, #5]
   2bd6a:	055b      	lsls	r3, r3, #21
   2bd6c:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2bd6e:	1d3b      	adds	r3, r7, #4
   2bd70:	791b      	ldrb	r3, [r3, #4]
   2bd72:	041b      	lsls	r3, r3, #16
   2bd74:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2bd76:	1d3b      	adds	r3, r7, #4
   2bd78:	789b      	ldrb	r3, [r3, #2]
   2bd7a:	02db      	lsls	r3, r3, #11
   2bd7c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2bd7e:	1d3b      	adds	r3, r7, #4
   2bd80:	785b      	ldrb	r3, [r3, #1]
   2bd82:	015b      	lsls	r3, r3, #5
   2bd84:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2bd86:	1d3a      	adds	r2, r7, #4
   2bd88:	7812      	ldrb	r2, [r2, #0]
   2bd8a:	0852      	lsrs	r2, r2, #1
   2bd8c:	b2d2      	uxtb	r2, r2
   2bd8e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2bd90:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2bd92:	68fb      	ldr	r3, [r7, #12]
}
   2bd94:	0018      	movs	r0, r3
   2bd96:	46bd      	mov	sp, r7
   2bd98:	b004      	add	sp, #16
   2bd9a:	bd80      	pop	{r7, pc}
   2bd9c:	20005e04 	.word	0x20005e04
   2bda0:	00027521 	.word	0x00027521
   2bda4:	fffff844 	.word	0xfffff844

0002bda8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2bda8:	b580      	push	{r7, lr}
   2bdaa:	b086      	sub	sp, #24
   2bdac:	af00      	add	r7, sp, #0
   2bdae:	60f8      	str	r0, [r7, #12]
   2bdb0:	60b9      	str	r1, [r7, #8]
   2bdb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2bdb4:	68fb      	ldr	r3, [r7, #12]
   2bdb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2bdb8:	68bb      	ldr	r3, [r7, #8]
   2bdba:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2bdbc:	e007      	b.n	2bdce <mem_cpy+0x26>
		*d++ = *s++;
   2bdbe:	697b      	ldr	r3, [r7, #20]
   2bdc0:	1c5a      	adds	r2, r3, #1
   2bdc2:	617a      	str	r2, [r7, #20]
   2bdc4:	693a      	ldr	r2, [r7, #16]
   2bdc6:	1c51      	adds	r1, r2, #1
   2bdc8:	6139      	str	r1, [r7, #16]
   2bdca:	7812      	ldrb	r2, [r2, #0]
   2bdcc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2bdce:	687b      	ldr	r3, [r7, #4]
   2bdd0:	1e5a      	subs	r2, r3, #1
   2bdd2:	607a      	str	r2, [r7, #4]
   2bdd4:	2b00      	cmp	r3, #0
   2bdd6:	d1f2      	bne.n	2bdbe <mem_cpy+0x16>
}
   2bdd8:	46c0      	nop			; (mov r8, r8)
   2bdda:	46bd      	mov	sp, r7
   2bddc:	b006      	add	sp, #24
   2bdde:	bd80      	pop	{r7, pc}

0002bde0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2bde0:	b580      	push	{r7, lr}
   2bde2:	b086      	sub	sp, #24
   2bde4:	af00      	add	r7, sp, #0
   2bde6:	60f8      	str	r0, [r7, #12]
   2bde8:	60b9      	str	r1, [r7, #8]
   2bdea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2bdec:	68fb      	ldr	r3, [r7, #12]
   2bdee:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2bdf0:	e005      	b.n	2bdfe <mem_set+0x1e>
		*d++ = (BYTE)val;
   2bdf2:	697b      	ldr	r3, [r7, #20]
   2bdf4:	1c5a      	adds	r2, r3, #1
   2bdf6:	617a      	str	r2, [r7, #20]
   2bdf8:	68ba      	ldr	r2, [r7, #8]
   2bdfa:	b2d2      	uxtb	r2, r2
   2bdfc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2bdfe:	687b      	ldr	r3, [r7, #4]
   2be00:	1e5a      	subs	r2, r3, #1
   2be02:	607a      	str	r2, [r7, #4]
   2be04:	2b00      	cmp	r3, #0
   2be06:	d1f4      	bne.n	2bdf2 <mem_set+0x12>
}
   2be08:	46c0      	nop			; (mov r8, r8)
   2be0a:	46bd      	mov	sp, r7
   2be0c:	b006      	add	sp, #24
   2be0e:	bd80      	pop	{r7, pc}

0002be10 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2be10:	b580      	push	{r7, lr}
   2be12:	b088      	sub	sp, #32
   2be14:	af00      	add	r7, sp, #0
   2be16:	60f8      	str	r0, [r7, #12]
   2be18:	60b9      	str	r1, [r7, #8]
   2be1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2be1c:	68fb      	ldr	r3, [r7, #12]
   2be1e:	61fb      	str	r3, [r7, #28]
   2be20:	68bb      	ldr	r3, [r7, #8]
   2be22:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2be24:	2300      	movs	r3, #0
   2be26:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2be28:	46c0      	nop			; (mov r8, r8)
   2be2a:	687b      	ldr	r3, [r7, #4]
   2be2c:	1e5a      	subs	r2, r3, #1
   2be2e:	607a      	str	r2, [r7, #4]
   2be30:	2b00      	cmp	r3, #0
   2be32:	d00d      	beq.n	2be50 <mem_cmp+0x40>
   2be34:	69fb      	ldr	r3, [r7, #28]
   2be36:	1c5a      	adds	r2, r3, #1
   2be38:	61fa      	str	r2, [r7, #28]
   2be3a:	781b      	ldrb	r3, [r3, #0]
   2be3c:	0019      	movs	r1, r3
   2be3e:	69bb      	ldr	r3, [r7, #24]
   2be40:	1c5a      	adds	r2, r3, #1
   2be42:	61ba      	str	r2, [r7, #24]
   2be44:	781b      	ldrb	r3, [r3, #0]
   2be46:	1acb      	subs	r3, r1, r3
   2be48:	617b      	str	r3, [r7, #20]
   2be4a:	697b      	ldr	r3, [r7, #20]
   2be4c:	2b00      	cmp	r3, #0
   2be4e:	d0ec      	beq.n	2be2a <mem_cmp+0x1a>
	return r;
   2be50:	697b      	ldr	r3, [r7, #20]
}
   2be52:	0018      	movs	r0, r3
   2be54:	46bd      	mov	sp, r7
   2be56:	b008      	add	sp, #32
   2be58:	bd80      	pop	{r7, pc}

0002be5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2be5a:	b580      	push	{r7, lr}
   2be5c:	b082      	sub	sp, #8
   2be5e:	af00      	add	r7, sp, #0
   2be60:	6078      	str	r0, [r7, #4]
   2be62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2be64:	e002      	b.n	2be6c <chk_chr+0x12>
   2be66:	687b      	ldr	r3, [r7, #4]
   2be68:	3301      	adds	r3, #1
   2be6a:	607b      	str	r3, [r7, #4]
   2be6c:	687b      	ldr	r3, [r7, #4]
   2be6e:	781b      	ldrb	r3, [r3, #0]
   2be70:	2b00      	cmp	r3, #0
   2be72:	d005      	beq.n	2be80 <chk_chr+0x26>
   2be74:	687b      	ldr	r3, [r7, #4]
   2be76:	781b      	ldrb	r3, [r3, #0]
   2be78:	001a      	movs	r2, r3
   2be7a:	683b      	ldr	r3, [r7, #0]
   2be7c:	429a      	cmp	r2, r3
   2be7e:	d1f2      	bne.n	2be66 <chk_chr+0xc>
	return *str;
   2be80:	687b      	ldr	r3, [r7, #4]
   2be82:	781b      	ldrb	r3, [r3, #0]
}
   2be84:	0018      	movs	r0, r3
   2be86:	46bd      	mov	sp, r7
   2be88:	b002      	add	sp, #8
   2be8a:	bd80      	pop	{r7, pc}

0002be8c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2be8c:	b590      	push	{r4, r7, lr}
   2be8e:	b085      	sub	sp, #20
   2be90:	af00      	add	r7, sp, #0
   2be92:	6078      	str	r0, [r7, #4]
   2be94:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2be96:	687b      	ldr	r3, [r7, #4]
   2be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2be9a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2be9c:	68fa      	ldr	r2, [r7, #12]
   2be9e:	683b      	ldr	r3, [r7, #0]
   2bea0:	429a      	cmp	r2, r3
   2bea2:	d04e      	beq.n	2bf42 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2bea4:	687b      	ldr	r3, [r7, #4]
   2bea6:	791b      	ldrb	r3, [r3, #4]
   2bea8:	2b00      	cmp	r3, #0
   2beaa:	d037      	beq.n	2bf1c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2beac:	687b      	ldr	r3, [r7, #4]
   2beae:	7858      	ldrb	r0, [r3, #1]
   2beb0:	687b      	ldr	r3, [r7, #4]
   2beb2:	3330      	adds	r3, #48	; 0x30
   2beb4:	0019      	movs	r1, r3
   2beb6:	68fa      	ldr	r2, [r7, #12]
   2beb8:	2301      	movs	r3, #1
   2beba:	4c24      	ldr	r4, [pc, #144]	; (2bf4c <move_window+0xc0>)
   2bebc:	47a0      	blx	r4
   2bebe:	1e03      	subs	r3, r0, #0
   2bec0:	d001      	beq.n	2bec6 <move_window+0x3a>
				return FR_DISK_ERR;
   2bec2:	2301      	movs	r3, #1
   2bec4:	e03e      	b.n	2bf44 <move_window+0xb8>
			fs->wflag = 0;
   2bec6:	687b      	ldr	r3, [r7, #4]
   2bec8:	2200      	movs	r2, #0
   2beca:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2becc:	687b      	ldr	r3, [r7, #4]
   2bece:	6a1a      	ldr	r2, [r3, #32]
   2bed0:	687b      	ldr	r3, [r7, #4]
   2bed2:	69db      	ldr	r3, [r3, #28]
   2bed4:	18d2      	adds	r2, r2, r3
   2bed6:	68fb      	ldr	r3, [r7, #12]
   2bed8:	429a      	cmp	r2, r3
   2beda:	d91f      	bls.n	2bf1c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bedc:	230b      	movs	r3, #11
   2bede:	18fb      	adds	r3, r7, r3
   2bee0:	687a      	ldr	r2, [r7, #4]
   2bee2:	78d2      	ldrb	r2, [r2, #3]
   2bee4:	701a      	strb	r2, [r3, #0]
   2bee6:	e014      	b.n	2bf12 <move_window+0x86>
					wsect += fs->fsize;
   2bee8:	687b      	ldr	r3, [r7, #4]
   2beea:	69db      	ldr	r3, [r3, #28]
   2beec:	68fa      	ldr	r2, [r7, #12]
   2beee:	18d3      	adds	r3, r2, r3
   2bef0:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2bef2:	687b      	ldr	r3, [r7, #4]
   2bef4:	7858      	ldrb	r0, [r3, #1]
   2bef6:	687b      	ldr	r3, [r7, #4]
   2bef8:	3330      	adds	r3, #48	; 0x30
   2befa:	0019      	movs	r1, r3
   2befc:	68fa      	ldr	r2, [r7, #12]
   2befe:	2301      	movs	r3, #1
   2bf00:	4c12      	ldr	r4, [pc, #72]	; (2bf4c <move_window+0xc0>)
   2bf02:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bf04:	230b      	movs	r3, #11
   2bf06:	18fb      	adds	r3, r7, r3
   2bf08:	781a      	ldrb	r2, [r3, #0]
   2bf0a:	230b      	movs	r3, #11
   2bf0c:	18fb      	adds	r3, r7, r3
   2bf0e:	3a01      	subs	r2, #1
   2bf10:	701a      	strb	r2, [r3, #0]
   2bf12:	230b      	movs	r3, #11
   2bf14:	18fb      	adds	r3, r7, r3
   2bf16:	781b      	ldrb	r3, [r3, #0]
   2bf18:	2b01      	cmp	r3, #1
   2bf1a:	d8e5      	bhi.n	2bee8 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2bf1c:	683b      	ldr	r3, [r7, #0]
   2bf1e:	2b00      	cmp	r3, #0
   2bf20:	d00f      	beq.n	2bf42 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2bf22:	687b      	ldr	r3, [r7, #4]
   2bf24:	7858      	ldrb	r0, [r3, #1]
   2bf26:	687b      	ldr	r3, [r7, #4]
   2bf28:	3330      	adds	r3, #48	; 0x30
   2bf2a:	0019      	movs	r1, r3
   2bf2c:	683a      	ldr	r2, [r7, #0]
   2bf2e:	2301      	movs	r3, #1
   2bf30:	4c07      	ldr	r4, [pc, #28]	; (2bf50 <move_window+0xc4>)
   2bf32:	47a0      	blx	r4
   2bf34:	1e03      	subs	r3, r0, #0
   2bf36:	d001      	beq.n	2bf3c <move_window+0xb0>
				return FR_DISK_ERR;
   2bf38:	2301      	movs	r3, #1
   2bf3a:	e003      	b.n	2bf44 <move_window+0xb8>
			fs->winsect = sector;
   2bf3c:	687b      	ldr	r3, [r7, #4]
   2bf3e:	683a      	ldr	r2, [r7, #0]
   2bf40:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2bf42:	2300      	movs	r3, #0
}
   2bf44:	0018      	movs	r0, r3
   2bf46:	46bd      	mov	sp, r7
   2bf48:	b005      	add	sp, #20
   2bf4a:	bd90      	pop	{r4, r7, pc}
   2bf4c:	0002bb79 	.word	0x0002bb79
   2bf50:	0002baa1 	.word	0x0002baa1

0002bf54 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2bf54:	b590      	push	{r4, r7, lr}
   2bf56:	b085      	sub	sp, #20
   2bf58:	af00      	add	r7, sp, #0
   2bf5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2bf5c:	230f      	movs	r3, #15
   2bf5e:	18fc      	adds	r4, r7, r3
   2bf60:	687b      	ldr	r3, [r7, #4]
   2bf62:	2100      	movs	r1, #0
   2bf64:	0018      	movs	r0, r3
   2bf66:	4b52      	ldr	r3, [pc, #328]	; (2c0b0 <sync+0x15c>)
   2bf68:	4798      	blx	r3
   2bf6a:	0003      	movs	r3, r0
   2bf6c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2bf6e:	230f      	movs	r3, #15
   2bf70:	18fb      	adds	r3, r7, r3
   2bf72:	781b      	ldrb	r3, [r3, #0]
   2bf74:	2b00      	cmp	r3, #0
   2bf76:	d000      	beq.n	2bf7a <sync+0x26>
   2bf78:	e093      	b.n	2c0a2 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2bf7a:	687b      	ldr	r3, [r7, #4]
   2bf7c:	781b      	ldrb	r3, [r3, #0]
   2bf7e:	2b03      	cmp	r3, #3
   2bf80:	d000      	beq.n	2bf84 <sync+0x30>
   2bf82:	e081      	b.n	2c088 <sync+0x134>
   2bf84:	687b      	ldr	r3, [r7, #4]
   2bf86:	795b      	ldrb	r3, [r3, #5]
   2bf88:	2b00      	cmp	r3, #0
   2bf8a:	d07d      	beq.n	2c088 <sync+0x134>
			fs->winsect = 0;
   2bf8c:	687b      	ldr	r3, [r7, #4]
   2bf8e:	2200      	movs	r2, #0
   2bf90:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2bf92:	687b      	ldr	r3, [r7, #4]
   2bf94:	3330      	adds	r3, #48	; 0x30
   2bf96:	0018      	movs	r0, r3
   2bf98:	2380      	movs	r3, #128	; 0x80
   2bf9a:	009b      	lsls	r3, r3, #2
   2bf9c:	001a      	movs	r2, r3
   2bf9e:	2100      	movs	r1, #0
   2bfa0:	4b44      	ldr	r3, [pc, #272]	; (2c0b4 <sync+0x160>)
   2bfa2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2bfa4:	687b      	ldr	r3, [r7, #4]
   2bfa6:	4a44      	ldr	r2, [pc, #272]	; (2c0b8 <sync+0x164>)
   2bfa8:	2155      	movs	r1, #85	; 0x55
   2bfaa:	5499      	strb	r1, [r3, r2]
   2bfac:	687b      	ldr	r3, [r7, #4]
   2bfae:	4a43      	ldr	r2, [pc, #268]	; (2c0bc <sync+0x168>)
   2bfb0:	21aa      	movs	r1, #170	; 0xaa
   2bfb2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2bfb4:	687b      	ldr	r3, [r7, #4]
   2bfb6:	2230      	movs	r2, #48	; 0x30
   2bfb8:	2152      	movs	r1, #82	; 0x52
   2bfba:	5499      	strb	r1, [r3, r2]
   2bfbc:	687b      	ldr	r3, [r7, #4]
   2bfbe:	2231      	movs	r2, #49	; 0x31
   2bfc0:	2152      	movs	r1, #82	; 0x52
   2bfc2:	5499      	strb	r1, [r3, r2]
   2bfc4:	687b      	ldr	r3, [r7, #4]
   2bfc6:	2232      	movs	r2, #50	; 0x32
   2bfc8:	2161      	movs	r1, #97	; 0x61
   2bfca:	5499      	strb	r1, [r3, r2]
   2bfcc:	687b      	ldr	r3, [r7, #4]
   2bfce:	2233      	movs	r2, #51	; 0x33
   2bfd0:	2141      	movs	r1, #65	; 0x41
   2bfd2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2bfd4:	687a      	ldr	r2, [r7, #4]
   2bfd6:	2385      	movs	r3, #133	; 0x85
   2bfd8:	009b      	lsls	r3, r3, #2
   2bfda:	2172      	movs	r1, #114	; 0x72
   2bfdc:	54d1      	strb	r1, [r2, r3]
   2bfde:	687b      	ldr	r3, [r7, #4]
   2bfe0:	4a37      	ldr	r2, [pc, #220]	; (2c0c0 <sync+0x16c>)
   2bfe2:	2172      	movs	r1, #114	; 0x72
   2bfe4:	5499      	strb	r1, [r3, r2]
   2bfe6:	687b      	ldr	r3, [r7, #4]
   2bfe8:	4a36      	ldr	r2, [pc, #216]	; (2c0c4 <sync+0x170>)
   2bfea:	2141      	movs	r1, #65	; 0x41
   2bfec:	5499      	strb	r1, [r3, r2]
   2bfee:	687b      	ldr	r3, [r7, #4]
   2bff0:	4a35      	ldr	r2, [pc, #212]	; (2c0c8 <sync+0x174>)
   2bff2:	2161      	movs	r1, #97	; 0x61
   2bff4:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2bff6:	687b      	ldr	r3, [r7, #4]
   2bff8:	691b      	ldr	r3, [r3, #16]
   2bffa:	b2d9      	uxtb	r1, r3
   2bffc:	687a      	ldr	r2, [r7, #4]
   2bffe:	2386      	movs	r3, #134	; 0x86
   2c000:	009b      	lsls	r3, r3, #2
   2c002:	54d1      	strb	r1, [r2, r3]
   2c004:	687b      	ldr	r3, [r7, #4]
   2c006:	691b      	ldr	r3, [r3, #16]
   2c008:	b29b      	uxth	r3, r3
   2c00a:	0a1b      	lsrs	r3, r3, #8
   2c00c:	b29b      	uxth	r3, r3
   2c00e:	b2d9      	uxtb	r1, r3
   2c010:	687b      	ldr	r3, [r7, #4]
   2c012:	4a2e      	ldr	r2, [pc, #184]	; (2c0cc <sync+0x178>)
   2c014:	5499      	strb	r1, [r3, r2]
   2c016:	687b      	ldr	r3, [r7, #4]
   2c018:	691b      	ldr	r3, [r3, #16]
   2c01a:	0c1b      	lsrs	r3, r3, #16
   2c01c:	b2d9      	uxtb	r1, r3
   2c01e:	687b      	ldr	r3, [r7, #4]
   2c020:	4a2b      	ldr	r2, [pc, #172]	; (2c0d0 <sync+0x17c>)
   2c022:	5499      	strb	r1, [r3, r2]
   2c024:	687b      	ldr	r3, [r7, #4]
   2c026:	691b      	ldr	r3, [r3, #16]
   2c028:	0e1b      	lsrs	r3, r3, #24
   2c02a:	b2d9      	uxtb	r1, r3
   2c02c:	687b      	ldr	r3, [r7, #4]
   2c02e:	4a29      	ldr	r2, [pc, #164]	; (2c0d4 <sync+0x180>)
   2c030:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c032:	687b      	ldr	r3, [r7, #4]
   2c034:	68db      	ldr	r3, [r3, #12]
   2c036:	b2d9      	uxtb	r1, r3
   2c038:	687a      	ldr	r2, [r7, #4]
   2c03a:	2387      	movs	r3, #135	; 0x87
   2c03c:	009b      	lsls	r3, r3, #2
   2c03e:	54d1      	strb	r1, [r2, r3]
   2c040:	687b      	ldr	r3, [r7, #4]
   2c042:	68db      	ldr	r3, [r3, #12]
   2c044:	b29b      	uxth	r3, r3
   2c046:	0a1b      	lsrs	r3, r3, #8
   2c048:	b29b      	uxth	r3, r3
   2c04a:	b2d9      	uxtb	r1, r3
   2c04c:	687b      	ldr	r3, [r7, #4]
   2c04e:	4a22      	ldr	r2, [pc, #136]	; (2c0d8 <sync+0x184>)
   2c050:	5499      	strb	r1, [r3, r2]
   2c052:	687b      	ldr	r3, [r7, #4]
   2c054:	68db      	ldr	r3, [r3, #12]
   2c056:	0c1b      	lsrs	r3, r3, #16
   2c058:	b2d9      	uxtb	r1, r3
   2c05a:	687b      	ldr	r3, [r7, #4]
   2c05c:	4a1f      	ldr	r2, [pc, #124]	; (2c0dc <sync+0x188>)
   2c05e:	5499      	strb	r1, [r3, r2]
   2c060:	687b      	ldr	r3, [r7, #4]
   2c062:	68db      	ldr	r3, [r3, #12]
   2c064:	0e1b      	lsrs	r3, r3, #24
   2c066:	b2d9      	uxtb	r1, r3
   2c068:	687b      	ldr	r3, [r7, #4]
   2c06a:	4a1d      	ldr	r2, [pc, #116]	; (2c0e0 <sync+0x18c>)
   2c06c:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c06e:	687b      	ldr	r3, [r7, #4]
   2c070:	7858      	ldrb	r0, [r3, #1]
   2c072:	687b      	ldr	r3, [r7, #4]
   2c074:	3330      	adds	r3, #48	; 0x30
   2c076:	0019      	movs	r1, r3
   2c078:	687b      	ldr	r3, [r7, #4]
   2c07a:	695a      	ldr	r2, [r3, #20]
   2c07c:	2301      	movs	r3, #1
   2c07e:	4c19      	ldr	r4, [pc, #100]	; (2c0e4 <sync+0x190>)
   2c080:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c082:	687b      	ldr	r3, [r7, #4]
   2c084:	2200      	movs	r2, #0
   2c086:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c088:	687b      	ldr	r3, [r7, #4]
   2c08a:	785b      	ldrb	r3, [r3, #1]
   2c08c:	2200      	movs	r2, #0
   2c08e:	2100      	movs	r1, #0
   2c090:	0018      	movs	r0, r3
   2c092:	4b15      	ldr	r3, [pc, #84]	; (2c0e8 <sync+0x194>)
   2c094:	4798      	blx	r3
   2c096:	1e03      	subs	r3, r0, #0
   2c098:	d003      	beq.n	2c0a2 <sync+0x14e>
			res = FR_DISK_ERR;
   2c09a:	230f      	movs	r3, #15
   2c09c:	18fb      	adds	r3, r7, r3
   2c09e:	2201      	movs	r2, #1
   2c0a0:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c0a2:	230f      	movs	r3, #15
   2c0a4:	18fb      	adds	r3, r7, r3
   2c0a6:	781b      	ldrb	r3, [r3, #0]
}
   2c0a8:	0018      	movs	r0, r3
   2c0aa:	46bd      	mov	sp, r7
   2c0ac:	b005      	add	sp, #20
   2c0ae:	bd90      	pop	{r4, r7, pc}
   2c0b0:	0002be8d 	.word	0x0002be8d
   2c0b4:	0002bde1 	.word	0x0002bde1
   2c0b8:	0000022e 	.word	0x0000022e
   2c0bc:	0000022f 	.word	0x0000022f
   2c0c0:	00000215 	.word	0x00000215
   2c0c4:	00000216 	.word	0x00000216
   2c0c8:	00000217 	.word	0x00000217
   2c0cc:	00000219 	.word	0x00000219
   2c0d0:	0000021a 	.word	0x0000021a
   2c0d4:	0000021b 	.word	0x0000021b
   2c0d8:	0000021d 	.word	0x0000021d
   2c0dc:	0000021e 	.word	0x0000021e
   2c0e0:	0000021f 	.word	0x0000021f
   2c0e4:	0002bb79 	.word	0x0002bb79
   2c0e8:	0002bc51 	.word	0x0002bc51

0002c0ec <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c0ec:	b580      	push	{r7, lr}
   2c0ee:	b082      	sub	sp, #8
   2c0f0:	af00      	add	r7, sp, #0
   2c0f2:	6078      	str	r0, [r7, #4]
   2c0f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c0f6:	683b      	ldr	r3, [r7, #0]
   2c0f8:	3b02      	subs	r3, #2
   2c0fa:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c0fc:	687b      	ldr	r3, [r7, #4]
   2c0fe:	699b      	ldr	r3, [r3, #24]
   2c100:	1e9a      	subs	r2, r3, #2
   2c102:	683b      	ldr	r3, [r7, #0]
   2c104:	429a      	cmp	r2, r3
   2c106:	d801      	bhi.n	2c10c <clust2sect+0x20>
   2c108:	2300      	movs	r3, #0
   2c10a:	e007      	b.n	2c11c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c10c:	687b      	ldr	r3, [r7, #4]
   2c10e:	789b      	ldrb	r3, [r3, #2]
   2c110:	001a      	movs	r2, r3
   2c112:	683b      	ldr	r3, [r7, #0]
   2c114:	435a      	muls	r2, r3
   2c116:	687b      	ldr	r3, [r7, #4]
   2c118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c11a:	18d3      	adds	r3, r2, r3
}
   2c11c:	0018      	movs	r0, r3
   2c11e:	46bd      	mov	sp, r7
   2c120:	b002      	add	sp, #8
   2c122:	bd80      	pop	{r7, pc}

0002c124 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c124:	b580      	push	{r7, lr}
   2c126:	b086      	sub	sp, #24
   2c128:	af00      	add	r7, sp, #0
   2c12a:	6078      	str	r0, [r7, #4]
   2c12c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c12e:	683b      	ldr	r3, [r7, #0]
   2c130:	2b01      	cmp	r3, #1
   2c132:	d904      	bls.n	2c13e <get_fat+0x1a>
   2c134:	687b      	ldr	r3, [r7, #4]
   2c136:	699a      	ldr	r2, [r3, #24]
   2c138:	683b      	ldr	r3, [r7, #0]
   2c13a:	429a      	cmp	r2, r3
   2c13c:	d801      	bhi.n	2c142 <get_fat+0x1e>
		return 1;
   2c13e:	2301      	movs	r3, #1
   2c140:	e09f      	b.n	2c282 <get_fat+0x15e>

	switch (fs->fs_type) {
   2c142:	687b      	ldr	r3, [r7, #4]
   2c144:	781b      	ldrb	r3, [r3, #0]
   2c146:	2b02      	cmp	r3, #2
   2c148:	d048      	beq.n	2c1dc <get_fat+0xb8>
   2c14a:	2b03      	cmp	r3, #3
   2c14c:	d067      	beq.n	2c21e <get_fat+0xfa>
   2c14e:	2b01      	cmp	r3, #1
   2c150:	d000      	beq.n	2c154 <get_fat+0x30>
   2c152:	e094      	b.n	2c27e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c154:	683b      	ldr	r3, [r7, #0]
   2c156:	617b      	str	r3, [r7, #20]
   2c158:	697b      	ldr	r3, [r7, #20]
   2c15a:	085b      	lsrs	r3, r3, #1
   2c15c:	697a      	ldr	r2, [r7, #20]
   2c15e:	18d3      	adds	r3, r2, r3
   2c160:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c162:	687b      	ldr	r3, [r7, #4]
   2c164:	6a1a      	ldr	r2, [r3, #32]
   2c166:	697b      	ldr	r3, [r7, #20]
   2c168:	0a5b      	lsrs	r3, r3, #9
   2c16a:	18d2      	adds	r2, r2, r3
   2c16c:	687b      	ldr	r3, [r7, #4]
   2c16e:	0011      	movs	r1, r2
   2c170:	0018      	movs	r0, r3
   2c172:	4b46      	ldr	r3, [pc, #280]	; (2c28c <get_fat+0x168>)
   2c174:	4798      	blx	r3
   2c176:	1e03      	subs	r3, r0, #0
   2c178:	d000      	beq.n	2c17c <get_fat+0x58>
   2c17a:	e079      	b.n	2c270 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c17c:	697b      	ldr	r3, [r7, #20]
   2c17e:	05db      	lsls	r3, r3, #23
   2c180:	0ddb      	lsrs	r3, r3, #23
   2c182:	687a      	ldr	r2, [r7, #4]
   2c184:	2130      	movs	r1, #48	; 0x30
   2c186:	18d3      	adds	r3, r2, r3
   2c188:	185b      	adds	r3, r3, r1
   2c18a:	781b      	ldrb	r3, [r3, #0]
   2c18c:	613b      	str	r3, [r7, #16]
   2c18e:	697b      	ldr	r3, [r7, #20]
   2c190:	3301      	adds	r3, #1
   2c192:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c194:	687b      	ldr	r3, [r7, #4]
   2c196:	6a1a      	ldr	r2, [r3, #32]
   2c198:	697b      	ldr	r3, [r7, #20]
   2c19a:	0a5b      	lsrs	r3, r3, #9
   2c19c:	18d2      	adds	r2, r2, r3
   2c19e:	687b      	ldr	r3, [r7, #4]
   2c1a0:	0011      	movs	r1, r2
   2c1a2:	0018      	movs	r0, r3
   2c1a4:	4b39      	ldr	r3, [pc, #228]	; (2c28c <get_fat+0x168>)
   2c1a6:	4798      	blx	r3
   2c1a8:	1e03      	subs	r3, r0, #0
   2c1aa:	d163      	bne.n	2c274 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c1ac:	697b      	ldr	r3, [r7, #20]
   2c1ae:	05db      	lsls	r3, r3, #23
   2c1b0:	0ddb      	lsrs	r3, r3, #23
   2c1b2:	687a      	ldr	r2, [r7, #4]
   2c1b4:	2130      	movs	r1, #48	; 0x30
   2c1b6:	18d3      	adds	r3, r2, r3
   2c1b8:	185b      	adds	r3, r3, r1
   2c1ba:	781b      	ldrb	r3, [r3, #0]
   2c1bc:	021b      	lsls	r3, r3, #8
   2c1be:	001a      	movs	r2, r3
   2c1c0:	693b      	ldr	r3, [r7, #16]
   2c1c2:	4313      	orrs	r3, r2
   2c1c4:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c1c6:	683b      	ldr	r3, [r7, #0]
   2c1c8:	2201      	movs	r2, #1
   2c1ca:	4013      	ands	r3, r2
   2c1cc:	d002      	beq.n	2c1d4 <get_fat+0xb0>
   2c1ce:	693b      	ldr	r3, [r7, #16]
   2c1d0:	091b      	lsrs	r3, r3, #4
   2c1d2:	e056      	b.n	2c282 <get_fat+0x15e>
   2c1d4:	693b      	ldr	r3, [r7, #16]
   2c1d6:	051b      	lsls	r3, r3, #20
   2c1d8:	0d1b      	lsrs	r3, r3, #20
   2c1da:	e052      	b.n	2c282 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c1dc:	687b      	ldr	r3, [r7, #4]
   2c1de:	6a1a      	ldr	r2, [r3, #32]
   2c1e0:	683b      	ldr	r3, [r7, #0]
   2c1e2:	0a1b      	lsrs	r3, r3, #8
   2c1e4:	18d2      	adds	r2, r2, r3
   2c1e6:	687b      	ldr	r3, [r7, #4]
   2c1e8:	0011      	movs	r1, r2
   2c1ea:	0018      	movs	r0, r3
   2c1ec:	4b27      	ldr	r3, [pc, #156]	; (2c28c <get_fat+0x168>)
   2c1ee:	4798      	blx	r3
   2c1f0:	1e03      	subs	r3, r0, #0
   2c1f2:	d141      	bne.n	2c278 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c1f4:	683b      	ldr	r3, [r7, #0]
   2c1f6:	005a      	lsls	r2, r3, #1
   2c1f8:	23ff      	movs	r3, #255	; 0xff
   2c1fa:	005b      	lsls	r3, r3, #1
   2c1fc:	4013      	ands	r3, r2
   2c1fe:	3330      	adds	r3, #48	; 0x30
   2c200:	687a      	ldr	r2, [r7, #4]
   2c202:	18d3      	adds	r3, r2, r3
   2c204:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c206:	68fb      	ldr	r3, [r7, #12]
   2c208:	3301      	adds	r3, #1
   2c20a:	781b      	ldrb	r3, [r3, #0]
   2c20c:	021b      	lsls	r3, r3, #8
   2c20e:	b21a      	sxth	r2, r3
   2c210:	68fb      	ldr	r3, [r7, #12]
   2c212:	781b      	ldrb	r3, [r3, #0]
   2c214:	b21b      	sxth	r3, r3
   2c216:	4313      	orrs	r3, r2
   2c218:	b21b      	sxth	r3, r3
   2c21a:	b29b      	uxth	r3, r3
   2c21c:	e031      	b.n	2c282 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c21e:	687b      	ldr	r3, [r7, #4]
   2c220:	6a1a      	ldr	r2, [r3, #32]
   2c222:	683b      	ldr	r3, [r7, #0]
   2c224:	09db      	lsrs	r3, r3, #7
   2c226:	18d2      	adds	r2, r2, r3
   2c228:	687b      	ldr	r3, [r7, #4]
   2c22a:	0011      	movs	r1, r2
   2c22c:	0018      	movs	r0, r3
   2c22e:	4b17      	ldr	r3, [pc, #92]	; (2c28c <get_fat+0x168>)
   2c230:	4798      	blx	r3
   2c232:	1e03      	subs	r3, r0, #0
   2c234:	d122      	bne.n	2c27c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c236:	683b      	ldr	r3, [r7, #0]
   2c238:	009a      	lsls	r2, r3, #2
   2c23a:	23fe      	movs	r3, #254	; 0xfe
   2c23c:	005b      	lsls	r3, r3, #1
   2c23e:	4013      	ands	r3, r2
   2c240:	3330      	adds	r3, #48	; 0x30
   2c242:	687a      	ldr	r2, [r7, #4]
   2c244:	18d3      	adds	r3, r2, r3
   2c246:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c248:	68fb      	ldr	r3, [r7, #12]
   2c24a:	3303      	adds	r3, #3
   2c24c:	781b      	ldrb	r3, [r3, #0]
   2c24e:	061a      	lsls	r2, r3, #24
   2c250:	68fb      	ldr	r3, [r7, #12]
   2c252:	3302      	adds	r3, #2
   2c254:	781b      	ldrb	r3, [r3, #0]
   2c256:	041b      	lsls	r3, r3, #16
   2c258:	4313      	orrs	r3, r2
   2c25a:	68fa      	ldr	r2, [r7, #12]
   2c25c:	3201      	adds	r2, #1
   2c25e:	7812      	ldrb	r2, [r2, #0]
   2c260:	0212      	lsls	r2, r2, #8
   2c262:	4313      	orrs	r3, r2
   2c264:	68fa      	ldr	r2, [r7, #12]
   2c266:	7812      	ldrb	r2, [r2, #0]
   2c268:	4313      	orrs	r3, r2
   2c26a:	011b      	lsls	r3, r3, #4
   2c26c:	091b      	lsrs	r3, r3, #4
   2c26e:	e008      	b.n	2c282 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c270:	46c0      	nop			; (mov r8, r8)
   2c272:	e004      	b.n	2c27e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c274:	46c0      	nop			; (mov r8, r8)
   2c276:	e002      	b.n	2c27e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c278:	46c0      	nop			; (mov r8, r8)
   2c27a:	e000      	b.n	2c27e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c27c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c27e:	2301      	movs	r3, #1
   2c280:	425b      	negs	r3, r3
}
   2c282:	0018      	movs	r0, r3
   2c284:	46bd      	mov	sp, r7
   2c286:	b006      	add	sp, #24
   2c288:	bd80      	pop	{r7, pc}
   2c28a:	46c0      	nop			; (mov r8, r8)
   2c28c:	0002be8d 	.word	0x0002be8d

0002c290 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c290:	b590      	push	{r4, r7, lr}
   2c292:	b089      	sub	sp, #36	; 0x24
   2c294:	af00      	add	r7, sp, #0
   2c296:	60f8      	str	r0, [r7, #12]
   2c298:	60b9      	str	r1, [r7, #8]
   2c29a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c29c:	68bb      	ldr	r3, [r7, #8]
   2c29e:	2b01      	cmp	r3, #1
   2c2a0:	d904      	bls.n	2c2ac <put_fat+0x1c>
   2c2a2:	68fb      	ldr	r3, [r7, #12]
   2c2a4:	699a      	ldr	r2, [r3, #24]
   2c2a6:	68bb      	ldr	r3, [r7, #8]
   2c2a8:	429a      	cmp	r2, r3
   2c2aa:	d804      	bhi.n	2c2b6 <put_fat+0x26>
		res = FR_INT_ERR;
   2c2ac:	231f      	movs	r3, #31
   2c2ae:	18fb      	adds	r3, r7, r3
   2c2b0:	2202      	movs	r2, #2
   2c2b2:	701a      	strb	r2, [r3, #0]
   2c2b4:	e100      	b.n	2c4b8 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c2b6:	68fb      	ldr	r3, [r7, #12]
   2c2b8:	781b      	ldrb	r3, [r3, #0]
   2c2ba:	2b02      	cmp	r3, #2
   2c2bc:	d100      	bne.n	2c2c0 <put_fat+0x30>
   2c2be:	e078      	b.n	2c3b2 <put_fat+0x122>
   2c2c0:	2b03      	cmp	r3, #3
   2c2c2:	d100      	bne.n	2c2c6 <put_fat+0x36>
   2c2c4:	e09e      	b.n	2c404 <put_fat+0x174>
   2c2c6:	2b01      	cmp	r3, #1
   2c2c8:	d000      	beq.n	2c2cc <put_fat+0x3c>
   2c2ca:	e0e6      	b.n	2c49a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c2cc:	68bb      	ldr	r3, [r7, #8]
   2c2ce:	61bb      	str	r3, [r7, #24]
   2c2d0:	69bb      	ldr	r3, [r7, #24]
   2c2d2:	085b      	lsrs	r3, r3, #1
   2c2d4:	69ba      	ldr	r2, [r7, #24]
   2c2d6:	18d3      	adds	r3, r2, r3
   2c2d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c2da:	68fb      	ldr	r3, [r7, #12]
   2c2dc:	6a1a      	ldr	r2, [r3, #32]
   2c2de:	69bb      	ldr	r3, [r7, #24]
   2c2e0:	0a5b      	lsrs	r3, r3, #9
   2c2e2:	18d2      	adds	r2, r2, r3
   2c2e4:	231f      	movs	r3, #31
   2c2e6:	18fc      	adds	r4, r7, r3
   2c2e8:	68fb      	ldr	r3, [r7, #12]
   2c2ea:	0011      	movs	r1, r2
   2c2ec:	0018      	movs	r0, r3
   2c2ee:	4b76      	ldr	r3, [pc, #472]	; (2c4c8 <put_fat+0x238>)
   2c2f0:	4798      	blx	r3
   2c2f2:	0003      	movs	r3, r0
   2c2f4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c2f6:	231f      	movs	r3, #31
   2c2f8:	18fb      	adds	r3, r7, r3
   2c2fa:	781b      	ldrb	r3, [r3, #0]
   2c2fc:	2b00      	cmp	r3, #0
   2c2fe:	d000      	beq.n	2c302 <put_fat+0x72>
   2c300:	e0d0      	b.n	2c4a4 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c302:	69bb      	ldr	r3, [r7, #24]
   2c304:	05db      	lsls	r3, r3, #23
   2c306:	0ddb      	lsrs	r3, r3, #23
   2c308:	3330      	adds	r3, #48	; 0x30
   2c30a:	68fa      	ldr	r2, [r7, #12]
   2c30c:	18d3      	adds	r3, r2, r3
   2c30e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c310:	68bb      	ldr	r3, [r7, #8]
   2c312:	2201      	movs	r2, #1
   2c314:	4013      	ands	r3, r2
   2c316:	d00d      	beq.n	2c334 <put_fat+0xa4>
   2c318:	697b      	ldr	r3, [r7, #20]
   2c31a:	781b      	ldrb	r3, [r3, #0]
   2c31c:	b25b      	sxtb	r3, r3
   2c31e:	220f      	movs	r2, #15
   2c320:	4013      	ands	r3, r2
   2c322:	b25a      	sxtb	r2, r3
   2c324:	687b      	ldr	r3, [r7, #4]
   2c326:	b2db      	uxtb	r3, r3
   2c328:	011b      	lsls	r3, r3, #4
   2c32a:	b25b      	sxtb	r3, r3
   2c32c:	4313      	orrs	r3, r2
   2c32e:	b25b      	sxtb	r3, r3
   2c330:	b2db      	uxtb	r3, r3
   2c332:	e001      	b.n	2c338 <put_fat+0xa8>
   2c334:	687b      	ldr	r3, [r7, #4]
   2c336:	b2db      	uxtb	r3, r3
   2c338:	697a      	ldr	r2, [r7, #20]
   2c33a:	7013      	strb	r3, [r2, #0]
			bc++;
   2c33c:	69bb      	ldr	r3, [r7, #24]
   2c33e:	3301      	adds	r3, #1
   2c340:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c342:	68fb      	ldr	r3, [r7, #12]
   2c344:	2201      	movs	r2, #1
   2c346:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c348:	68fb      	ldr	r3, [r7, #12]
   2c34a:	6a1a      	ldr	r2, [r3, #32]
   2c34c:	69bb      	ldr	r3, [r7, #24]
   2c34e:	0a5b      	lsrs	r3, r3, #9
   2c350:	18d2      	adds	r2, r2, r3
   2c352:	231f      	movs	r3, #31
   2c354:	18fc      	adds	r4, r7, r3
   2c356:	68fb      	ldr	r3, [r7, #12]
   2c358:	0011      	movs	r1, r2
   2c35a:	0018      	movs	r0, r3
   2c35c:	4b5a      	ldr	r3, [pc, #360]	; (2c4c8 <put_fat+0x238>)
   2c35e:	4798      	blx	r3
   2c360:	0003      	movs	r3, r0
   2c362:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c364:	231f      	movs	r3, #31
   2c366:	18fb      	adds	r3, r7, r3
   2c368:	781b      	ldrb	r3, [r3, #0]
   2c36a:	2b00      	cmp	r3, #0
   2c36c:	d000      	beq.n	2c370 <put_fat+0xe0>
   2c36e:	e09b      	b.n	2c4a8 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c370:	69bb      	ldr	r3, [r7, #24]
   2c372:	05db      	lsls	r3, r3, #23
   2c374:	0ddb      	lsrs	r3, r3, #23
   2c376:	3330      	adds	r3, #48	; 0x30
   2c378:	68fa      	ldr	r2, [r7, #12]
   2c37a:	18d3      	adds	r3, r2, r3
   2c37c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c37e:	68bb      	ldr	r3, [r7, #8]
   2c380:	2201      	movs	r2, #1
   2c382:	4013      	ands	r3, r2
   2c384:	d003      	beq.n	2c38e <put_fat+0xfe>
   2c386:	687b      	ldr	r3, [r7, #4]
   2c388:	091b      	lsrs	r3, r3, #4
   2c38a:	b2db      	uxtb	r3, r3
   2c38c:	e00e      	b.n	2c3ac <put_fat+0x11c>
   2c38e:	697b      	ldr	r3, [r7, #20]
   2c390:	781b      	ldrb	r3, [r3, #0]
   2c392:	b25b      	sxtb	r3, r3
   2c394:	220f      	movs	r2, #15
   2c396:	4393      	bics	r3, r2
   2c398:	b25a      	sxtb	r2, r3
   2c39a:	687b      	ldr	r3, [r7, #4]
   2c39c:	0a1b      	lsrs	r3, r3, #8
   2c39e:	b25b      	sxtb	r3, r3
   2c3a0:	210f      	movs	r1, #15
   2c3a2:	400b      	ands	r3, r1
   2c3a4:	b25b      	sxtb	r3, r3
   2c3a6:	4313      	orrs	r3, r2
   2c3a8:	b25b      	sxtb	r3, r3
   2c3aa:	b2db      	uxtb	r3, r3
   2c3ac:	697a      	ldr	r2, [r7, #20]
   2c3ae:	7013      	strb	r3, [r2, #0]
			break;
   2c3b0:	e07f      	b.n	2c4b2 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c3b2:	68fb      	ldr	r3, [r7, #12]
   2c3b4:	6a1a      	ldr	r2, [r3, #32]
   2c3b6:	68bb      	ldr	r3, [r7, #8]
   2c3b8:	0a1b      	lsrs	r3, r3, #8
   2c3ba:	18d2      	adds	r2, r2, r3
   2c3bc:	231f      	movs	r3, #31
   2c3be:	18fc      	adds	r4, r7, r3
   2c3c0:	68fb      	ldr	r3, [r7, #12]
   2c3c2:	0011      	movs	r1, r2
   2c3c4:	0018      	movs	r0, r3
   2c3c6:	4b40      	ldr	r3, [pc, #256]	; (2c4c8 <put_fat+0x238>)
   2c3c8:	4798      	blx	r3
   2c3ca:	0003      	movs	r3, r0
   2c3cc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c3ce:	231f      	movs	r3, #31
   2c3d0:	18fb      	adds	r3, r7, r3
   2c3d2:	781b      	ldrb	r3, [r3, #0]
   2c3d4:	2b00      	cmp	r3, #0
   2c3d6:	d169      	bne.n	2c4ac <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c3d8:	68bb      	ldr	r3, [r7, #8]
   2c3da:	005a      	lsls	r2, r3, #1
   2c3dc:	23ff      	movs	r3, #255	; 0xff
   2c3de:	005b      	lsls	r3, r3, #1
   2c3e0:	4013      	ands	r3, r2
   2c3e2:	3330      	adds	r3, #48	; 0x30
   2c3e4:	68fa      	ldr	r2, [r7, #12]
   2c3e6:	18d3      	adds	r3, r2, r3
   2c3e8:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2c3ea:	687b      	ldr	r3, [r7, #4]
   2c3ec:	b2da      	uxtb	r2, r3
   2c3ee:	697b      	ldr	r3, [r7, #20]
   2c3f0:	701a      	strb	r2, [r3, #0]
   2c3f2:	697b      	ldr	r3, [r7, #20]
   2c3f4:	3301      	adds	r3, #1
   2c3f6:	687a      	ldr	r2, [r7, #4]
   2c3f8:	b292      	uxth	r2, r2
   2c3fa:	0a12      	lsrs	r2, r2, #8
   2c3fc:	b292      	uxth	r2, r2
   2c3fe:	b2d2      	uxtb	r2, r2
   2c400:	701a      	strb	r2, [r3, #0]
			break;
   2c402:	e056      	b.n	2c4b2 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c404:	68fb      	ldr	r3, [r7, #12]
   2c406:	6a1a      	ldr	r2, [r3, #32]
   2c408:	68bb      	ldr	r3, [r7, #8]
   2c40a:	09db      	lsrs	r3, r3, #7
   2c40c:	18d2      	adds	r2, r2, r3
   2c40e:	231f      	movs	r3, #31
   2c410:	18fc      	adds	r4, r7, r3
   2c412:	68fb      	ldr	r3, [r7, #12]
   2c414:	0011      	movs	r1, r2
   2c416:	0018      	movs	r0, r3
   2c418:	4b2b      	ldr	r3, [pc, #172]	; (2c4c8 <put_fat+0x238>)
   2c41a:	4798      	blx	r3
   2c41c:	0003      	movs	r3, r0
   2c41e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c420:	231f      	movs	r3, #31
   2c422:	18fb      	adds	r3, r7, r3
   2c424:	781b      	ldrb	r3, [r3, #0]
   2c426:	2b00      	cmp	r3, #0
   2c428:	d142      	bne.n	2c4b0 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c42a:	68bb      	ldr	r3, [r7, #8]
   2c42c:	009a      	lsls	r2, r3, #2
   2c42e:	23fe      	movs	r3, #254	; 0xfe
   2c430:	005b      	lsls	r3, r3, #1
   2c432:	4013      	ands	r3, r2
   2c434:	3330      	adds	r3, #48	; 0x30
   2c436:	68fa      	ldr	r2, [r7, #12]
   2c438:	18d3      	adds	r3, r2, r3
   2c43a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c43c:	697b      	ldr	r3, [r7, #20]
   2c43e:	3303      	adds	r3, #3
   2c440:	781b      	ldrb	r3, [r3, #0]
   2c442:	061a      	lsls	r2, r3, #24
   2c444:	697b      	ldr	r3, [r7, #20]
   2c446:	3302      	adds	r3, #2
   2c448:	781b      	ldrb	r3, [r3, #0]
   2c44a:	041b      	lsls	r3, r3, #16
   2c44c:	4313      	orrs	r3, r2
   2c44e:	697a      	ldr	r2, [r7, #20]
   2c450:	3201      	adds	r2, #1
   2c452:	7812      	ldrb	r2, [r2, #0]
   2c454:	0212      	lsls	r2, r2, #8
   2c456:	4313      	orrs	r3, r2
   2c458:	697a      	ldr	r2, [r7, #20]
   2c45a:	7812      	ldrb	r2, [r2, #0]
   2c45c:	4313      	orrs	r3, r2
   2c45e:	0f1b      	lsrs	r3, r3, #28
   2c460:	071b      	lsls	r3, r3, #28
   2c462:	687a      	ldr	r2, [r7, #4]
   2c464:	4313      	orrs	r3, r2
   2c466:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2c468:	687b      	ldr	r3, [r7, #4]
   2c46a:	b2da      	uxtb	r2, r3
   2c46c:	697b      	ldr	r3, [r7, #20]
   2c46e:	701a      	strb	r2, [r3, #0]
   2c470:	697b      	ldr	r3, [r7, #20]
   2c472:	3301      	adds	r3, #1
   2c474:	687a      	ldr	r2, [r7, #4]
   2c476:	b292      	uxth	r2, r2
   2c478:	0a12      	lsrs	r2, r2, #8
   2c47a:	b292      	uxth	r2, r2
   2c47c:	b2d2      	uxtb	r2, r2
   2c47e:	701a      	strb	r2, [r3, #0]
   2c480:	697b      	ldr	r3, [r7, #20]
   2c482:	3302      	adds	r3, #2
   2c484:	687a      	ldr	r2, [r7, #4]
   2c486:	0c12      	lsrs	r2, r2, #16
   2c488:	b2d2      	uxtb	r2, r2
   2c48a:	701a      	strb	r2, [r3, #0]
   2c48c:	697b      	ldr	r3, [r7, #20]
   2c48e:	3303      	adds	r3, #3
   2c490:	687a      	ldr	r2, [r7, #4]
   2c492:	0e12      	lsrs	r2, r2, #24
   2c494:	b2d2      	uxtb	r2, r2
   2c496:	701a      	strb	r2, [r3, #0]
			break;
   2c498:	e00b      	b.n	2c4b2 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2c49a:	231f      	movs	r3, #31
   2c49c:	18fb      	adds	r3, r7, r3
   2c49e:	2202      	movs	r2, #2
   2c4a0:	701a      	strb	r2, [r3, #0]
   2c4a2:	e006      	b.n	2c4b2 <put_fat+0x222>
			if (res != FR_OK) break;
   2c4a4:	46c0      	nop			; (mov r8, r8)
   2c4a6:	e004      	b.n	2c4b2 <put_fat+0x222>
			if (res != FR_OK) break;
   2c4a8:	46c0      	nop			; (mov r8, r8)
   2c4aa:	e002      	b.n	2c4b2 <put_fat+0x222>
			if (res != FR_OK) break;
   2c4ac:	46c0      	nop			; (mov r8, r8)
   2c4ae:	e000      	b.n	2c4b2 <put_fat+0x222>
			if (res != FR_OK) break;
   2c4b0:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2c4b2:	68fb      	ldr	r3, [r7, #12]
   2c4b4:	2201      	movs	r2, #1
   2c4b6:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2c4b8:	231f      	movs	r3, #31
   2c4ba:	18fb      	adds	r3, r7, r3
   2c4bc:	781b      	ldrb	r3, [r3, #0]
}
   2c4be:	0018      	movs	r0, r3
   2c4c0:	46bd      	mov	sp, r7
   2c4c2:	b009      	add	sp, #36	; 0x24
   2c4c4:	bd90      	pop	{r4, r7, pc}
   2c4c6:	46c0      	nop			; (mov r8, r8)
   2c4c8:	0002be8d 	.word	0x0002be8d

0002c4cc <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2c4cc:	b590      	push	{r4, r7, lr}
   2c4ce:	b085      	sub	sp, #20
   2c4d0:	af00      	add	r7, sp, #0
   2c4d2:	6078      	str	r0, [r7, #4]
   2c4d4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c4d6:	683b      	ldr	r3, [r7, #0]
   2c4d8:	2b01      	cmp	r3, #1
   2c4da:	d904      	bls.n	2c4e6 <remove_chain+0x1a>
   2c4dc:	687b      	ldr	r3, [r7, #4]
   2c4de:	699a      	ldr	r2, [r3, #24]
   2c4e0:	683b      	ldr	r3, [r7, #0]
   2c4e2:	429a      	cmp	r2, r3
   2c4e4:	d804      	bhi.n	2c4f0 <remove_chain+0x24>
		res = FR_INT_ERR;
   2c4e6:	230f      	movs	r3, #15
   2c4e8:	18fb      	adds	r3, r7, r3
   2c4ea:	2202      	movs	r2, #2
   2c4ec:	701a      	strb	r2, [r3, #0]
   2c4ee:	e045      	b.n	2c57c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2c4f0:	230f      	movs	r3, #15
   2c4f2:	18fb      	adds	r3, r7, r3
   2c4f4:	2200      	movs	r2, #0
   2c4f6:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c4f8:	e037      	b.n	2c56a <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2c4fa:	683a      	ldr	r2, [r7, #0]
   2c4fc:	687b      	ldr	r3, [r7, #4]
   2c4fe:	0011      	movs	r1, r2
   2c500:	0018      	movs	r0, r3
   2c502:	4b22      	ldr	r3, [pc, #136]	; (2c58c <remove_chain+0xc0>)
   2c504:	4798      	blx	r3
   2c506:	0003      	movs	r3, r0
   2c508:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2c50a:	68bb      	ldr	r3, [r7, #8]
   2c50c:	2b00      	cmp	r3, #0
   2c50e:	d032      	beq.n	2c576 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2c510:	68bb      	ldr	r3, [r7, #8]
   2c512:	2b01      	cmp	r3, #1
   2c514:	d104      	bne.n	2c520 <remove_chain+0x54>
   2c516:	230f      	movs	r3, #15
   2c518:	18fb      	adds	r3, r7, r3
   2c51a:	2202      	movs	r2, #2
   2c51c:	701a      	strb	r2, [r3, #0]
   2c51e:	e02d      	b.n	2c57c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2c520:	68bb      	ldr	r3, [r7, #8]
   2c522:	3301      	adds	r3, #1
   2c524:	d104      	bne.n	2c530 <remove_chain+0x64>
   2c526:	230f      	movs	r3, #15
   2c528:	18fb      	adds	r3, r7, r3
   2c52a:	2201      	movs	r2, #1
   2c52c:	701a      	strb	r2, [r3, #0]
   2c52e:	e025      	b.n	2c57c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2c530:	230f      	movs	r3, #15
   2c532:	18fc      	adds	r4, r7, r3
   2c534:	6839      	ldr	r1, [r7, #0]
   2c536:	687b      	ldr	r3, [r7, #4]
   2c538:	2200      	movs	r2, #0
   2c53a:	0018      	movs	r0, r3
   2c53c:	4b14      	ldr	r3, [pc, #80]	; (2c590 <remove_chain+0xc4>)
   2c53e:	4798      	blx	r3
   2c540:	0003      	movs	r3, r0
   2c542:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c544:	230f      	movs	r3, #15
   2c546:	18fb      	adds	r3, r7, r3
   2c548:	781b      	ldrb	r3, [r3, #0]
   2c54a:	2b00      	cmp	r3, #0
   2c54c:	d115      	bne.n	2c57a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2c54e:	687b      	ldr	r3, [r7, #4]
   2c550:	691b      	ldr	r3, [r3, #16]
   2c552:	3301      	adds	r3, #1
   2c554:	d007      	beq.n	2c566 <remove_chain+0x9a>
				fs->free_clust++;
   2c556:	687b      	ldr	r3, [r7, #4]
   2c558:	691b      	ldr	r3, [r3, #16]
   2c55a:	1c5a      	adds	r2, r3, #1
   2c55c:	687b      	ldr	r3, [r7, #4]
   2c55e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2c560:	687b      	ldr	r3, [r7, #4]
   2c562:	2201      	movs	r2, #1
   2c564:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2c566:	68bb      	ldr	r3, [r7, #8]
   2c568:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c56a:	687b      	ldr	r3, [r7, #4]
   2c56c:	699a      	ldr	r2, [r3, #24]
   2c56e:	683b      	ldr	r3, [r7, #0]
   2c570:	429a      	cmp	r2, r3
   2c572:	d8c2      	bhi.n	2c4fa <remove_chain+0x2e>
   2c574:	e002      	b.n	2c57c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2c576:	46c0      	nop			; (mov r8, r8)
   2c578:	e000      	b.n	2c57c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2c57a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c57c:	230f      	movs	r3, #15
   2c57e:	18fb      	adds	r3, r7, r3
   2c580:	781b      	ldrb	r3, [r3, #0]
}
   2c582:	0018      	movs	r0, r3
   2c584:	46bd      	mov	sp, r7
   2c586:	b005      	add	sp, #20
   2c588:	bd90      	pop	{r4, r7, pc}
   2c58a:	46c0      	nop			; (mov r8, r8)
   2c58c:	0002c125 	.word	0x0002c125
   2c590:	0002c291 	.word	0x0002c291

0002c594 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2c594:	b590      	push	{r4, r7, lr}
   2c596:	b087      	sub	sp, #28
   2c598:	af00      	add	r7, sp, #0
   2c59a:	6078      	str	r0, [r7, #4]
   2c59c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2c59e:	683b      	ldr	r3, [r7, #0]
   2c5a0:	2b00      	cmp	r3, #0
   2c5a2:	d10d      	bne.n	2c5c0 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2c5a4:	687b      	ldr	r3, [r7, #4]
   2c5a6:	68db      	ldr	r3, [r3, #12]
   2c5a8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2c5aa:	693b      	ldr	r3, [r7, #16]
   2c5ac:	2b00      	cmp	r3, #0
   2c5ae:	d004      	beq.n	2c5ba <create_chain+0x26>
   2c5b0:	687b      	ldr	r3, [r7, #4]
   2c5b2:	699a      	ldr	r2, [r3, #24]
   2c5b4:	693b      	ldr	r3, [r7, #16]
   2c5b6:	429a      	cmp	r2, r3
   2c5b8:	d818      	bhi.n	2c5ec <create_chain+0x58>
   2c5ba:	2301      	movs	r3, #1
   2c5bc:	613b      	str	r3, [r7, #16]
   2c5be:	e015      	b.n	2c5ec <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2c5c0:	683a      	ldr	r2, [r7, #0]
   2c5c2:	687b      	ldr	r3, [r7, #4]
   2c5c4:	0011      	movs	r1, r2
   2c5c6:	0018      	movs	r0, r3
   2c5c8:	4b3e      	ldr	r3, [pc, #248]	; (2c6c4 <create_chain+0x130>)
   2c5ca:	4798      	blx	r3
   2c5cc:	0003      	movs	r3, r0
   2c5ce:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2c5d0:	68bb      	ldr	r3, [r7, #8]
   2c5d2:	2b01      	cmp	r3, #1
   2c5d4:	d801      	bhi.n	2c5da <create_chain+0x46>
   2c5d6:	2301      	movs	r3, #1
   2c5d8:	e070      	b.n	2c6bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2c5da:	687b      	ldr	r3, [r7, #4]
   2c5dc:	699a      	ldr	r2, [r3, #24]
   2c5de:	68bb      	ldr	r3, [r7, #8]
   2c5e0:	429a      	cmp	r2, r3
   2c5e2:	d901      	bls.n	2c5e8 <create_chain+0x54>
   2c5e4:	68bb      	ldr	r3, [r7, #8]
   2c5e6:	e069      	b.n	2c6bc <create_chain+0x128>
		scl = clst;
   2c5e8:	683b      	ldr	r3, [r7, #0]
   2c5ea:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2c5ec:	693b      	ldr	r3, [r7, #16]
   2c5ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2c5f0:	697b      	ldr	r3, [r7, #20]
   2c5f2:	3301      	adds	r3, #1
   2c5f4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2c5f6:	687b      	ldr	r3, [r7, #4]
   2c5f8:	699a      	ldr	r2, [r3, #24]
   2c5fa:	697b      	ldr	r3, [r7, #20]
   2c5fc:	429a      	cmp	r2, r3
   2c5fe:	d807      	bhi.n	2c610 <create_chain+0x7c>
			ncl = 2;
   2c600:	2302      	movs	r3, #2
   2c602:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2c604:	697a      	ldr	r2, [r7, #20]
   2c606:	693b      	ldr	r3, [r7, #16]
   2c608:	429a      	cmp	r2, r3
   2c60a:	d901      	bls.n	2c610 <create_chain+0x7c>
   2c60c:	2300      	movs	r3, #0
   2c60e:	e055      	b.n	2c6bc <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2c610:	697a      	ldr	r2, [r7, #20]
   2c612:	687b      	ldr	r3, [r7, #4]
   2c614:	0011      	movs	r1, r2
   2c616:	0018      	movs	r0, r3
   2c618:	4b2a      	ldr	r3, [pc, #168]	; (2c6c4 <create_chain+0x130>)
   2c61a:	4798      	blx	r3
   2c61c:	0003      	movs	r3, r0
   2c61e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2c620:	68bb      	ldr	r3, [r7, #8]
   2c622:	2b00      	cmp	r3, #0
   2c624:	d00d      	beq.n	2c642 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2c626:	68bb      	ldr	r3, [r7, #8]
   2c628:	3301      	adds	r3, #1
   2c62a:	d002      	beq.n	2c632 <create_chain+0x9e>
   2c62c:	68bb      	ldr	r3, [r7, #8]
   2c62e:	2b01      	cmp	r3, #1
   2c630:	d101      	bne.n	2c636 <create_chain+0xa2>
			return cs;
   2c632:	68bb      	ldr	r3, [r7, #8]
   2c634:	e042      	b.n	2c6bc <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2c636:	697a      	ldr	r2, [r7, #20]
   2c638:	693b      	ldr	r3, [r7, #16]
   2c63a:	429a      	cmp	r2, r3
   2c63c:	d1d8      	bne.n	2c5f0 <create_chain+0x5c>
   2c63e:	2300      	movs	r3, #0
   2c640:	e03c      	b.n	2c6bc <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2c642:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2c644:	230f      	movs	r3, #15
   2c646:	18fc      	adds	r4, r7, r3
   2c648:	4a1f      	ldr	r2, [pc, #124]	; (2c6c8 <create_chain+0x134>)
   2c64a:	6979      	ldr	r1, [r7, #20]
   2c64c:	687b      	ldr	r3, [r7, #4]
   2c64e:	0018      	movs	r0, r3
   2c650:	4b1e      	ldr	r3, [pc, #120]	; (2c6cc <create_chain+0x138>)
   2c652:	4798      	blx	r3
   2c654:	0003      	movs	r3, r0
   2c656:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2c658:	230f      	movs	r3, #15
   2c65a:	18fb      	adds	r3, r7, r3
   2c65c:	781b      	ldrb	r3, [r3, #0]
   2c65e:	2b00      	cmp	r3, #0
   2c660:	d10c      	bne.n	2c67c <create_chain+0xe8>
   2c662:	683b      	ldr	r3, [r7, #0]
   2c664:	2b00      	cmp	r3, #0
   2c666:	d009      	beq.n	2c67c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2c668:	230f      	movs	r3, #15
   2c66a:	18fc      	adds	r4, r7, r3
   2c66c:	697a      	ldr	r2, [r7, #20]
   2c66e:	6839      	ldr	r1, [r7, #0]
   2c670:	687b      	ldr	r3, [r7, #4]
   2c672:	0018      	movs	r0, r3
   2c674:	4b15      	ldr	r3, [pc, #84]	; (2c6cc <create_chain+0x138>)
   2c676:	4798      	blx	r3
   2c678:	0003      	movs	r3, r0
   2c67a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2c67c:	230f      	movs	r3, #15
   2c67e:	18fb      	adds	r3, r7, r3
   2c680:	781b      	ldrb	r3, [r3, #0]
   2c682:	2b00      	cmp	r3, #0
   2c684:	d10f      	bne.n	2c6a6 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2c686:	687b      	ldr	r3, [r7, #4]
   2c688:	697a      	ldr	r2, [r7, #20]
   2c68a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2c68c:	687b      	ldr	r3, [r7, #4]
   2c68e:	691b      	ldr	r3, [r3, #16]
   2c690:	3301      	adds	r3, #1
   2c692:	d012      	beq.n	2c6ba <create_chain+0x126>
			fs->free_clust--;
   2c694:	687b      	ldr	r3, [r7, #4]
   2c696:	691b      	ldr	r3, [r3, #16]
   2c698:	1e5a      	subs	r2, r3, #1
   2c69a:	687b      	ldr	r3, [r7, #4]
   2c69c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2c69e:	687b      	ldr	r3, [r7, #4]
   2c6a0:	2201      	movs	r2, #1
   2c6a2:	715a      	strb	r2, [r3, #5]
   2c6a4:	e009      	b.n	2c6ba <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2c6a6:	230f      	movs	r3, #15
   2c6a8:	18fb      	adds	r3, r7, r3
   2c6aa:	781b      	ldrb	r3, [r3, #0]
   2c6ac:	2b01      	cmp	r3, #1
   2c6ae:	d102      	bne.n	2c6b6 <create_chain+0x122>
   2c6b0:	2301      	movs	r3, #1
   2c6b2:	425b      	negs	r3, r3
   2c6b4:	e000      	b.n	2c6b8 <create_chain+0x124>
   2c6b6:	2301      	movs	r3, #1
   2c6b8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2c6ba:	697b      	ldr	r3, [r7, #20]
}
   2c6bc:	0018      	movs	r0, r3
   2c6be:	46bd      	mov	sp, r7
   2c6c0:	b007      	add	sp, #28
   2c6c2:	bd90      	pop	{r4, r7, pc}
   2c6c4:	0002c125 	.word	0x0002c125
   2c6c8:	0fffffff 	.word	0x0fffffff
   2c6cc:	0002c291 	.word	0x0002c291

0002c6d0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2c6d0:	b580      	push	{r7, lr}
   2c6d2:	b084      	sub	sp, #16
   2c6d4:	af00      	add	r7, sp, #0
   2c6d6:	6078      	str	r0, [r7, #4]
   2c6d8:	000a      	movs	r2, r1
   2c6da:	1cbb      	adds	r3, r7, #2
   2c6dc:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2c6de:	687b      	ldr	r3, [r7, #4]
   2c6e0:	1cba      	adds	r2, r7, #2
   2c6e2:	8812      	ldrh	r2, [r2, #0]
   2c6e4:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2c6e6:	687b      	ldr	r3, [r7, #4]
   2c6e8:	689b      	ldr	r3, [r3, #8]
   2c6ea:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2c6ec:	68fb      	ldr	r3, [r7, #12]
   2c6ee:	2b01      	cmp	r3, #1
   2c6f0:	d005      	beq.n	2c6fe <dir_sdi+0x2e>
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	681b      	ldr	r3, [r3, #0]
   2c6f6:	699a      	ldr	r2, [r3, #24]
   2c6f8:	68fb      	ldr	r3, [r7, #12]
   2c6fa:	429a      	cmp	r2, r3
   2c6fc:	d801      	bhi.n	2c702 <dir_sdi+0x32>
		return FR_INT_ERR;
   2c6fe:	2302      	movs	r3, #2
   2c700:	e075      	b.n	2c7ee <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2c702:	68fb      	ldr	r3, [r7, #12]
   2c704:	2b00      	cmp	r3, #0
   2c706:	d108      	bne.n	2c71a <dir_sdi+0x4a>
   2c708:	687b      	ldr	r3, [r7, #4]
   2c70a:	681b      	ldr	r3, [r3, #0]
   2c70c:	781b      	ldrb	r3, [r3, #0]
   2c70e:	2b03      	cmp	r3, #3
   2c710:	d103      	bne.n	2c71a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2c712:	687b      	ldr	r3, [r7, #4]
   2c714:	681b      	ldr	r3, [r3, #0]
   2c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c718:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2c71a:	68fb      	ldr	r3, [r7, #12]
   2c71c:	2b00      	cmp	r3, #0
   2c71e:	d116      	bne.n	2c74e <dir_sdi+0x7e>
		dj->clust = clst;
   2c720:	687b      	ldr	r3, [r7, #4]
   2c722:	68fa      	ldr	r2, [r7, #12]
   2c724:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2c726:	687b      	ldr	r3, [r7, #4]
   2c728:	681b      	ldr	r3, [r3, #0]
   2c72a:	891b      	ldrh	r3, [r3, #8]
   2c72c:	1cba      	adds	r2, r7, #2
   2c72e:	8812      	ldrh	r2, [r2, #0]
   2c730:	429a      	cmp	r2, r3
   2c732:	d301      	bcc.n	2c738 <dir_sdi+0x68>
			return FR_INT_ERR;
   2c734:	2302      	movs	r3, #2
   2c736:	e05a      	b.n	2c7ee <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c738:	687b      	ldr	r3, [r7, #4]
   2c73a:	681b      	ldr	r3, [r3, #0]
   2c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c73e:	1cba      	adds	r2, r7, #2
   2c740:	8812      	ldrh	r2, [r2, #0]
   2c742:	0912      	lsrs	r2, r2, #4
   2c744:	b292      	uxth	r2, r2
   2c746:	189a      	adds	r2, r3, r2
   2c748:	687b      	ldr	r3, [r7, #4]
   2c74a:	611a      	str	r2, [r3, #16]
   2c74c:	e042      	b.n	2c7d4 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2c74e:	687b      	ldr	r3, [r7, #4]
   2c750:	681b      	ldr	r3, [r3, #0]
   2c752:	789b      	ldrb	r3, [r3, #2]
   2c754:	b29a      	uxth	r2, r3
   2c756:	230a      	movs	r3, #10
   2c758:	18fb      	adds	r3, r7, r3
   2c75a:	0112      	lsls	r2, r2, #4
   2c75c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c75e:	e020      	b.n	2c7a2 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2c760:	687b      	ldr	r3, [r7, #4]
   2c762:	681b      	ldr	r3, [r3, #0]
   2c764:	68fa      	ldr	r2, [r7, #12]
   2c766:	0011      	movs	r1, r2
   2c768:	0018      	movs	r0, r3
   2c76a:	4b23      	ldr	r3, [pc, #140]	; (2c7f8 <dir_sdi+0x128>)
   2c76c:	4798      	blx	r3
   2c76e:	0003      	movs	r3, r0
   2c770:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2c772:	68fb      	ldr	r3, [r7, #12]
   2c774:	3301      	adds	r3, #1
   2c776:	d101      	bne.n	2c77c <dir_sdi+0xac>
   2c778:	2301      	movs	r3, #1
   2c77a:	e038      	b.n	2c7ee <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2c77c:	68fb      	ldr	r3, [r7, #12]
   2c77e:	2b01      	cmp	r3, #1
   2c780:	d905      	bls.n	2c78e <dir_sdi+0xbe>
   2c782:	687b      	ldr	r3, [r7, #4]
   2c784:	681b      	ldr	r3, [r3, #0]
   2c786:	699a      	ldr	r2, [r3, #24]
   2c788:	68fb      	ldr	r3, [r7, #12]
   2c78a:	429a      	cmp	r2, r3
   2c78c:	d801      	bhi.n	2c792 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2c78e:	2302      	movs	r3, #2
   2c790:	e02d      	b.n	2c7ee <dir_sdi+0x11e>
			idx -= ic;
   2c792:	1cbb      	adds	r3, r7, #2
   2c794:	1cb9      	adds	r1, r7, #2
   2c796:	220a      	movs	r2, #10
   2c798:	18ba      	adds	r2, r7, r2
   2c79a:	8809      	ldrh	r1, [r1, #0]
   2c79c:	8812      	ldrh	r2, [r2, #0]
   2c79e:	1a8a      	subs	r2, r1, r2
   2c7a0:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c7a2:	1cba      	adds	r2, r7, #2
   2c7a4:	230a      	movs	r3, #10
   2c7a6:	18fb      	adds	r3, r7, r3
   2c7a8:	8812      	ldrh	r2, [r2, #0]
   2c7aa:	881b      	ldrh	r3, [r3, #0]
   2c7ac:	429a      	cmp	r2, r3
   2c7ae:	d2d7      	bcs.n	2c760 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2c7b0:	687b      	ldr	r3, [r7, #4]
   2c7b2:	68fa      	ldr	r2, [r7, #12]
   2c7b4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c7b6:	687b      	ldr	r3, [r7, #4]
   2c7b8:	681b      	ldr	r3, [r3, #0]
   2c7ba:	68fa      	ldr	r2, [r7, #12]
   2c7bc:	0011      	movs	r1, r2
   2c7be:	0018      	movs	r0, r3
   2c7c0:	4b0e      	ldr	r3, [pc, #56]	; (2c7fc <dir_sdi+0x12c>)
   2c7c2:	4798      	blx	r3
   2c7c4:	0002      	movs	r2, r0
   2c7c6:	1cbb      	adds	r3, r7, #2
   2c7c8:	881b      	ldrh	r3, [r3, #0]
   2c7ca:	091b      	lsrs	r3, r3, #4
   2c7cc:	b29b      	uxth	r3, r3
   2c7ce:	18d2      	adds	r2, r2, r3
   2c7d0:	687b      	ldr	r3, [r7, #4]
   2c7d2:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2c7d4:	687b      	ldr	r3, [r7, #4]
   2c7d6:	681b      	ldr	r3, [r3, #0]
   2c7d8:	3330      	adds	r3, #48	; 0x30
   2c7da:	001a      	movs	r2, r3
   2c7dc:	1cbb      	adds	r3, r7, #2
   2c7de:	881b      	ldrh	r3, [r3, #0]
   2c7e0:	210f      	movs	r1, #15
   2c7e2:	400b      	ands	r3, r1
   2c7e4:	015b      	lsls	r3, r3, #5
   2c7e6:	18d2      	adds	r2, r2, r3
   2c7e8:	687b      	ldr	r3, [r7, #4]
   2c7ea:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2c7ec:	2300      	movs	r3, #0
}
   2c7ee:	0018      	movs	r0, r3
   2c7f0:	46bd      	mov	sp, r7
   2c7f2:	b004      	add	sp, #16
   2c7f4:	bd80      	pop	{r7, pc}
   2c7f6:	46c0      	nop			; (mov r8, r8)
   2c7f8:	0002c125 	.word	0x0002c125
   2c7fc:	0002c0ed 	.word	0x0002c0ed

0002c800 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2c800:	b590      	push	{r4, r7, lr}
   2c802:	b085      	sub	sp, #20
   2c804:	af00      	add	r7, sp, #0
   2c806:	6078      	str	r0, [r7, #4]
   2c808:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2c80a:	687b      	ldr	r3, [r7, #4]
   2c80c:	88da      	ldrh	r2, [r3, #6]
   2c80e:	2308      	movs	r3, #8
   2c810:	18fb      	adds	r3, r7, r3
   2c812:	3201      	adds	r2, #1
   2c814:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c816:	2308      	movs	r3, #8
   2c818:	18fb      	adds	r3, r7, r3
   2c81a:	881b      	ldrh	r3, [r3, #0]
   2c81c:	2b00      	cmp	r3, #0
   2c81e:	d003      	beq.n	2c828 <dir_next+0x28>
   2c820:	687b      	ldr	r3, [r7, #4]
   2c822:	691b      	ldr	r3, [r3, #16]
   2c824:	2b00      	cmp	r3, #0
   2c826:	d101      	bne.n	2c82c <dir_next+0x2c>
		return FR_NO_FILE;
   2c828:	2304      	movs	r3, #4
   2c82a:	e0d2      	b.n	2c9d2 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c82c:	2308      	movs	r3, #8
   2c82e:	18fb      	adds	r3, r7, r3
   2c830:	881b      	ldrh	r3, [r3, #0]
   2c832:	220f      	movs	r2, #15
   2c834:	4013      	ands	r3, r2
   2c836:	b29b      	uxth	r3, r3
   2c838:	2b00      	cmp	r3, #0
   2c83a:	d000      	beq.n	2c83e <dir_next+0x3e>
   2c83c:	e0b6      	b.n	2c9ac <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c83e:	687b      	ldr	r3, [r7, #4]
   2c840:	691b      	ldr	r3, [r3, #16]
   2c842:	1c5a      	adds	r2, r3, #1
   2c844:	687b      	ldr	r3, [r7, #4]
   2c846:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c848:	687b      	ldr	r3, [r7, #4]
   2c84a:	68db      	ldr	r3, [r3, #12]
   2c84c:	2b00      	cmp	r3, #0
   2c84e:	d10a      	bne.n	2c866 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c850:	687b      	ldr	r3, [r7, #4]
   2c852:	681b      	ldr	r3, [r3, #0]
   2c854:	891b      	ldrh	r3, [r3, #8]
   2c856:	2208      	movs	r2, #8
   2c858:	18ba      	adds	r2, r7, r2
   2c85a:	8812      	ldrh	r2, [r2, #0]
   2c85c:	429a      	cmp	r2, r3
   2c85e:	d200      	bcs.n	2c862 <dir_next+0x62>
   2c860:	e0a4      	b.n	2c9ac <dir_next+0x1ac>
				return FR_NO_FILE;
   2c862:	2304      	movs	r3, #4
   2c864:	e0b5      	b.n	2c9d2 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c866:	2308      	movs	r3, #8
   2c868:	18fb      	adds	r3, r7, r3
   2c86a:	881b      	ldrh	r3, [r3, #0]
   2c86c:	091b      	lsrs	r3, r3, #4
   2c86e:	b29b      	uxth	r3, r3
   2c870:	001a      	movs	r2, r3
   2c872:	687b      	ldr	r3, [r7, #4]
   2c874:	681b      	ldr	r3, [r3, #0]
   2c876:	789b      	ldrb	r3, [r3, #2]
   2c878:	3b01      	subs	r3, #1
   2c87a:	4013      	ands	r3, r2
   2c87c:	d000      	beq.n	2c880 <dir_next+0x80>
   2c87e:	e095      	b.n	2c9ac <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c880:	687b      	ldr	r3, [r7, #4]
   2c882:	681a      	ldr	r2, [r3, #0]
   2c884:	687b      	ldr	r3, [r7, #4]
   2c886:	68db      	ldr	r3, [r3, #12]
   2c888:	0019      	movs	r1, r3
   2c88a:	0010      	movs	r0, r2
   2c88c:	4b53      	ldr	r3, [pc, #332]	; (2c9dc <dir_next+0x1dc>)
   2c88e:	4798      	blx	r3
   2c890:	0003      	movs	r3, r0
   2c892:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c894:	68fb      	ldr	r3, [r7, #12]
   2c896:	2b01      	cmp	r3, #1
   2c898:	d801      	bhi.n	2c89e <dir_next+0x9e>
   2c89a:	2302      	movs	r3, #2
   2c89c:	e099      	b.n	2c9d2 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c89e:	68fb      	ldr	r3, [r7, #12]
   2c8a0:	3301      	adds	r3, #1
   2c8a2:	d101      	bne.n	2c8a8 <dir_next+0xa8>
   2c8a4:	2301      	movs	r3, #1
   2c8a6:	e094      	b.n	2c9d2 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c8a8:	687b      	ldr	r3, [r7, #4]
   2c8aa:	681b      	ldr	r3, [r3, #0]
   2c8ac:	699a      	ldr	r2, [r3, #24]
   2c8ae:	68fb      	ldr	r3, [r7, #12]
   2c8b0:	429a      	cmp	r2, r3
   2c8b2:	d900      	bls.n	2c8b6 <dir_next+0xb6>
   2c8b4:	e06d      	b.n	2c992 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c8b6:	683b      	ldr	r3, [r7, #0]
   2c8b8:	2b00      	cmp	r3, #0
   2c8ba:	d101      	bne.n	2c8c0 <dir_next+0xc0>
   2c8bc:	2304      	movs	r3, #4
   2c8be:	e088      	b.n	2c9d2 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c8c0:	687b      	ldr	r3, [r7, #4]
   2c8c2:	681a      	ldr	r2, [r3, #0]
   2c8c4:	687b      	ldr	r3, [r7, #4]
   2c8c6:	68db      	ldr	r3, [r3, #12]
   2c8c8:	0019      	movs	r1, r3
   2c8ca:	0010      	movs	r0, r2
   2c8cc:	4b44      	ldr	r3, [pc, #272]	; (2c9e0 <dir_next+0x1e0>)
   2c8ce:	4798      	blx	r3
   2c8d0:	0003      	movs	r3, r0
   2c8d2:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c8d4:	68fb      	ldr	r3, [r7, #12]
   2c8d6:	2b00      	cmp	r3, #0
   2c8d8:	d101      	bne.n	2c8de <dir_next+0xde>
   2c8da:	2307      	movs	r3, #7
   2c8dc:	e079      	b.n	2c9d2 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c8de:	68fb      	ldr	r3, [r7, #12]
   2c8e0:	2b01      	cmp	r3, #1
   2c8e2:	d101      	bne.n	2c8e8 <dir_next+0xe8>
   2c8e4:	2302      	movs	r3, #2
   2c8e6:	e074      	b.n	2c9d2 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c8e8:	68fb      	ldr	r3, [r7, #12]
   2c8ea:	3301      	adds	r3, #1
   2c8ec:	d101      	bne.n	2c8f2 <dir_next+0xf2>
   2c8ee:	2301      	movs	r3, #1
   2c8f0:	e06f      	b.n	2c9d2 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c8f2:	687b      	ldr	r3, [r7, #4]
   2c8f4:	681b      	ldr	r3, [r3, #0]
   2c8f6:	2100      	movs	r1, #0
   2c8f8:	0018      	movs	r0, r3
   2c8fa:	4b3a      	ldr	r3, [pc, #232]	; (2c9e4 <dir_next+0x1e4>)
   2c8fc:	4798      	blx	r3
   2c8fe:	1e03      	subs	r3, r0, #0
   2c900:	d001      	beq.n	2c906 <dir_next+0x106>
   2c902:	2301      	movs	r3, #1
   2c904:	e065      	b.n	2c9d2 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c906:	687b      	ldr	r3, [r7, #4]
   2c908:	681b      	ldr	r3, [r3, #0]
   2c90a:	3330      	adds	r3, #48	; 0x30
   2c90c:	0018      	movs	r0, r3
   2c90e:	2380      	movs	r3, #128	; 0x80
   2c910:	009b      	lsls	r3, r3, #2
   2c912:	001a      	movs	r2, r3
   2c914:	2100      	movs	r1, #0
   2c916:	4b34      	ldr	r3, [pc, #208]	; (2c9e8 <dir_next+0x1e8>)
   2c918:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c91a:	687b      	ldr	r3, [r7, #4]
   2c91c:	681c      	ldr	r4, [r3, #0]
   2c91e:	687b      	ldr	r3, [r7, #4]
   2c920:	681b      	ldr	r3, [r3, #0]
   2c922:	68fa      	ldr	r2, [r7, #12]
   2c924:	0011      	movs	r1, r2
   2c926:	0018      	movs	r0, r3
   2c928:	4b30      	ldr	r3, [pc, #192]	; (2c9ec <dir_next+0x1ec>)
   2c92a:	4798      	blx	r3
   2c92c:	0003      	movs	r3, r0
   2c92e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c930:	230b      	movs	r3, #11
   2c932:	18fb      	adds	r3, r7, r3
   2c934:	2200      	movs	r2, #0
   2c936:	701a      	strb	r2, [r3, #0]
   2c938:	e019      	b.n	2c96e <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c93a:	687b      	ldr	r3, [r7, #4]
   2c93c:	681b      	ldr	r3, [r3, #0]
   2c93e:	2201      	movs	r2, #1
   2c940:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c942:	687b      	ldr	r3, [r7, #4]
   2c944:	681b      	ldr	r3, [r3, #0]
   2c946:	2100      	movs	r1, #0
   2c948:	0018      	movs	r0, r3
   2c94a:	4b26      	ldr	r3, [pc, #152]	; (2c9e4 <dir_next+0x1e4>)
   2c94c:	4798      	blx	r3
   2c94e:	1e03      	subs	r3, r0, #0
   2c950:	d001      	beq.n	2c956 <dir_next+0x156>
   2c952:	2301      	movs	r3, #1
   2c954:	e03d      	b.n	2c9d2 <dir_next+0x1d2>
						dj->fs->winsect++;
   2c956:	687b      	ldr	r3, [r7, #4]
   2c958:	681b      	ldr	r3, [r3, #0]
   2c95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c95c:	3201      	adds	r2, #1
   2c95e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c960:	230b      	movs	r3, #11
   2c962:	18fb      	adds	r3, r7, r3
   2c964:	781a      	ldrb	r2, [r3, #0]
   2c966:	230b      	movs	r3, #11
   2c968:	18fb      	adds	r3, r7, r3
   2c96a:	3201      	adds	r2, #1
   2c96c:	701a      	strb	r2, [r3, #0]
   2c96e:	687b      	ldr	r3, [r7, #4]
   2c970:	681b      	ldr	r3, [r3, #0]
   2c972:	789b      	ldrb	r3, [r3, #2]
   2c974:	220b      	movs	r2, #11
   2c976:	18ba      	adds	r2, r7, r2
   2c978:	7812      	ldrb	r2, [r2, #0]
   2c97a:	429a      	cmp	r2, r3
   2c97c:	d3dd      	bcc.n	2c93a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c97e:	687b      	ldr	r3, [r7, #4]
   2c980:	681b      	ldr	r3, [r3, #0]
   2c982:	687a      	ldr	r2, [r7, #4]
   2c984:	6812      	ldr	r2, [r2, #0]
   2c986:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c988:	220b      	movs	r2, #11
   2c98a:	18ba      	adds	r2, r7, r2
   2c98c:	7812      	ldrb	r2, [r2, #0]
   2c98e:	1a8a      	subs	r2, r1, r2
   2c990:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c992:	687b      	ldr	r3, [r7, #4]
   2c994:	68fa      	ldr	r2, [r7, #12]
   2c996:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c998:	687b      	ldr	r3, [r7, #4]
   2c99a:	681b      	ldr	r3, [r3, #0]
   2c99c:	68fa      	ldr	r2, [r7, #12]
   2c99e:	0011      	movs	r1, r2
   2c9a0:	0018      	movs	r0, r3
   2c9a2:	4b12      	ldr	r3, [pc, #72]	; (2c9ec <dir_next+0x1ec>)
   2c9a4:	4798      	blx	r3
   2c9a6:	0002      	movs	r2, r0
   2c9a8:	687b      	ldr	r3, [r7, #4]
   2c9aa:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c9ac:	687b      	ldr	r3, [r7, #4]
   2c9ae:	2208      	movs	r2, #8
   2c9b0:	18ba      	adds	r2, r7, r2
   2c9b2:	8812      	ldrh	r2, [r2, #0]
   2c9b4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c9b6:	687b      	ldr	r3, [r7, #4]
   2c9b8:	681b      	ldr	r3, [r3, #0]
   2c9ba:	3330      	adds	r3, #48	; 0x30
   2c9bc:	001a      	movs	r2, r3
   2c9be:	2308      	movs	r3, #8
   2c9c0:	18fb      	adds	r3, r7, r3
   2c9c2:	881b      	ldrh	r3, [r3, #0]
   2c9c4:	210f      	movs	r1, #15
   2c9c6:	400b      	ands	r3, r1
   2c9c8:	015b      	lsls	r3, r3, #5
   2c9ca:	18d2      	adds	r2, r2, r3
   2c9cc:	687b      	ldr	r3, [r7, #4]
   2c9ce:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c9d0:	2300      	movs	r3, #0
}
   2c9d2:	0018      	movs	r0, r3
   2c9d4:	46bd      	mov	sp, r7
   2c9d6:	b005      	add	sp, #20
   2c9d8:	bd90      	pop	{r4, r7, pc}
   2c9da:	46c0      	nop			; (mov r8, r8)
   2c9dc:	0002c125 	.word	0x0002c125
   2c9e0:	0002c595 	.word	0x0002c595
   2c9e4:	0002be8d 	.word	0x0002be8d
   2c9e8:	0002bde1 	.word	0x0002bde1
   2c9ec:	0002c0ed 	.word	0x0002c0ed

0002c9f0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c9f0:	b590      	push	{r4, r7, lr}
   2c9f2:	b087      	sub	sp, #28
   2c9f4:	af00      	add	r7, sp, #0
   2c9f6:	6078      	str	r0, [r7, #4]
   2c9f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c9fa:	683b      	ldr	r3, [r7, #0]
   2c9fc:	781b      	ldrb	r3, [r3, #0]
   2c9fe:	001a      	movs	r2, r3
   2ca00:	2340      	movs	r3, #64	; 0x40
   2ca02:	439a      	bics	r2, r3
   2ca04:	0013      	movs	r3, r2
   2ca06:	1e5a      	subs	r2, r3, #1
   2ca08:	0013      	movs	r3, r2
   2ca0a:	005b      	lsls	r3, r3, #1
   2ca0c:	189b      	adds	r3, r3, r2
   2ca0e:	009b      	lsls	r3, r3, #2
   2ca10:	189b      	adds	r3, r3, r2
   2ca12:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2ca14:	2300      	movs	r3, #0
   2ca16:	613b      	str	r3, [r7, #16]
   2ca18:	230e      	movs	r3, #14
   2ca1a:	18fb      	adds	r3, r7, r3
   2ca1c:	2201      	movs	r2, #1
   2ca1e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2ca20:	4a31      	ldr	r2, [pc, #196]	; (2cae8 <cmp_lfn+0xf8>)
   2ca22:	693b      	ldr	r3, [r7, #16]
   2ca24:	18d3      	adds	r3, r2, r3
   2ca26:	781b      	ldrb	r3, [r3, #0]
   2ca28:	3301      	adds	r3, #1
   2ca2a:	683a      	ldr	r2, [r7, #0]
   2ca2c:	18d3      	adds	r3, r2, r3
   2ca2e:	781b      	ldrb	r3, [r3, #0]
   2ca30:	021b      	lsls	r3, r3, #8
   2ca32:	b21a      	sxth	r2, r3
   2ca34:	492c      	ldr	r1, [pc, #176]	; (2cae8 <cmp_lfn+0xf8>)
   2ca36:	693b      	ldr	r3, [r7, #16]
   2ca38:	18cb      	adds	r3, r1, r3
   2ca3a:	781b      	ldrb	r3, [r3, #0]
   2ca3c:	0019      	movs	r1, r3
   2ca3e:	683b      	ldr	r3, [r7, #0]
   2ca40:	185b      	adds	r3, r3, r1
   2ca42:	781b      	ldrb	r3, [r3, #0]
   2ca44:	b21b      	sxth	r3, r3
   2ca46:	4313      	orrs	r3, r2
   2ca48:	b21a      	sxth	r2, r3
   2ca4a:	230c      	movs	r3, #12
   2ca4c:	18fb      	adds	r3, r7, r3
   2ca4e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2ca50:	230e      	movs	r3, #14
   2ca52:	18fb      	adds	r3, r7, r3
   2ca54:	881b      	ldrh	r3, [r3, #0]
   2ca56:	2b00      	cmp	r3, #0
   2ca58:	d01f      	beq.n	2ca9a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2ca5a:	230e      	movs	r3, #14
   2ca5c:	18fc      	adds	r4, r7, r3
   2ca5e:	230c      	movs	r3, #12
   2ca60:	18fb      	adds	r3, r7, r3
   2ca62:	881b      	ldrh	r3, [r3, #0]
   2ca64:	0018      	movs	r0, r3
   2ca66:	4b21      	ldr	r3, [pc, #132]	; (2caec <cmp_lfn+0xfc>)
   2ca68:	4798      	blx	r3
   2ca6a:	0003      	movs	r3, r0
   2ca6c:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2ca6e:	697b      	ldr	r3, [r7, #20]
   2ca70:	2bfe      	cmp	r3, #254	; 0xfe
   2ca72:	d810      	bhi.n	2ca96 <cmp_lfn+0xa6>
   2ca74:	697b      	ldr	r3, [r7, #20]
   2ca76:	1c5a      	adds	r2, r3, #1
   2ca78:	617a      	str	r2, [r7, #20]
   2ca7a:	005b      	lsls	r3, r3, #1
   2ca7c:	687a      	ldr	r2, [r7, #4]
   2ca7e:	18d3      	adds	r3, r2, r3
   2ca80:	881b      	ldrh	r3, [r3, #0]
   2ca82:	0018      	movs	r0, r3
   2ca84:	4b19      	ldr	r3, [pc, #100]	; (2caec <cmp_lfn+0xfc>)
   2ca86:	4798      	blx	r3
   2ca88:	0003      	movs	r3, r0
   2ca8a:	001a      	movs	r2, r3
   2ca8c:	230e      	movs	r3, #14
   2ca8e:	18fb      	adds	r3, r7, r3
   2ca90:	881b      	ldrh	r3, [r3, #0]
   2ca92:	4293      	cmp	r3, r2
   2ca94:	d009      	beq.n	2caaa <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2ca96:	2300      	movs	r3, #0
   2ca98:	e022      	b.n	2cae0 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2ca9a:	230c      	movs	r3, #12
   2ca9c:	18fb      	adds	r3, r7, r3
   2ca9e:	881b      	ldrh	r3, [r3, #0]
   2caa0:	4a13      	ldr	r2, [pc, #76]	; (2caf0 <cmp_lfn+0x100>)
   2caa2:	4293      	cmp	r3, r2
   2caa4:	d001      	beq.n	2caaa <cmp_lfn+0xba>
   2caa6:	2300      	movs	r3, #0
   2caa8:	e01a      	b.n	2cae0 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2caaa:	693b      	ldr	r3, [r7, #16]
   2caac:	3301      	adds	r3, #1
   2caae:	613b      	str	r3, [r7, #16]
   2cab0:	693b      	ldr	r3, [r7, #16]
   2cab2:	2b0c      	cmp	r3, #12
   2cab4:	d9b4      	bls.n	2ca20 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2cab6:	683b      	ldr	r3, [r7, #0]
   2cab8:	781b      	ldrb	r3, [r3, #0]
   2caba:	001a      	movs	r2, r3
   2cabc:	2340      	movs	r3, #64	; 0x40
   2cabe:	4013      	ands	r3, r2
   2cac0:	d00d      	beq.n	2cade <cmp_lfn+0xee>
   2cac2:	230e      	movs	r3, #14
   2cac4:	18fb      	adds	r3, r7, r3
   2cac6:	881b      	ldrh	r3, [r3, #0]
   2cac8:	2b00      	cmp	r3, #0
   2caca:	d008      	beq.n	2cade <cmp_lfn+0xee>
   2cacc:	697b      	ldr	r3, [r7, #20]
   2cace:	005b      	lsls	r3, r3, #1
   2cad0:	687a      	ldr	r2, [r7, #4]
   2cad2:	18d3      	adds	r3, r2, r3
   2cad4:	881b      	ldrh	r3, [r3, #0]
   2cad6:	2b00      	cmp	r3, #0
   2cad8:	d001      	beq.n	2cade <cmp_lfn+0xee>
		return 0;
   2cada:	2300      	movs	r3, #0
   2cadc:	e000      	b.n	2cae0 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2cade:	2301      	movs	r3, #1
}
   2cae0:	0018      	movs	r0, r3
   2cae2:	46bd      	mov	sp, r7
   2cae4:	b007      	add	sp, #28
   2cae6:	bd90      	pop	{r4, r7, pc}
   2cae8:	0003bcc0 	.word	0x0003bcc0
   2caec:	0002ea9d 	.word	0x0002ea9d
   2caf0:	0000ffff 	.word	0x0000ffff

0002caf4 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2caf4:	b580      	push	{r7, lr}
   2caf6:	b088      	sub	sp, #32
   2caf8:	af00      	add	r7, sp, #0
   2cafa:	60f8      	str	r0, [r7, #12]
   2cafc:	60b9      	str	r1, [r7, #8]
   2cafe:	0019      	movs	r1, r3
   2cb00:	1dfb      	adds	r3, r7, #7
   2cb02:	701a      	strb	r2, [r3, #0]
   2cb04:	1dbb      	adds	r3, r7, #6
   2cb06:	1c0a      	adds	r2, r1, #0
   2cb08:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2cb0a:	68bb      	ldr	r3, [r7, #8]
   2cb0c:	330d      	adds	r3, #13
   2cb0e:	1dba      	adds	r2, r7, #6
   2cb10:	7812      	ldrb	r2, [r2, #0]
   2cb12:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2cb14:	68bb      	ldr	r3, [r7, #8]
   2cb16:	330b      	adds	r3, #11
   2cb18:	220f      	movs	r2, #15
   2cb1a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2cb1c:	68bb      	ldr	r3, [r7, #8]
   2cb1e:	330c      	adds	r3, #12
   2cb20:	2200      	movs	r2, #0
   2cb22:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2cb24:	68bb      	ldr	r3, [r7, #8]
   2cb26:	331a      	adds	r3, #26
   2cb28:	2200      	movs	r2, #0
   2cb2a:	701a      	strb	r2, [r3, #0]
   2cb2c:	68bb      	ldr	r3, [r7, #8]
   2cb2e:	331b      	adds	r3, #27
   2cb30:	2200      	movs	r2, #0
   2cb32:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2cb34:	1dfb      	adds	r3, r7, #7
   2cb36:	781b      	ldrb	r3, [r3, #0]
   2cb38:	1e5a      	subs	r2, r3, #1
   2cb3a:	0013      	movs	r3, r2
   2cb3c:	005b      	lsls	r3, r3, #1
   2cb3e:	189b      	adds	r3, r3, r2
   2cb40:	009b      	lsls	r3, r3, #2
   2cb42:	189b      	adds	r3, r3, r2
   2cb44:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2cb46:	2316      	movs	r3, #22
   2cb48:	18fb      	adds	r3, r7, r3
   2cb4a:	2200      	movs	r2, #0
   2cb4c:	801a      	strh	r2, [r3, #0]
   2cb4e:	2300      	movs	r3, #0
   2cb50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2cb52:	2316      	movs	r3, #22
   2cb54:	18fb      	adds	r3, r7, r3
   2cb56:	881b      	ldrh	r3, [r3, #0]
   2cb58:	4a28      	ldr	r2, [pc, #160]	; (2cbfc <fit_lfn+0x108>)
   2cb5a:	4293      	cmp	r3, r2
   2cb5c:	d009      	beq.n	2cb72 <fit_lfn+0x7e>
   2cb5e:	69fb      	ldr	r3, [r7, #28]
   2cb60:	1c5a      	adds	r2, r3, #1
   2cb62:	61fa      	str	r2, [r7, #28]
   2cb64:	005b      	lsls	r3, r3, #1
   2cb66:	68fa      	ldr	r2, [r7, #12]
   2cb68:	18d2      	adds	r2, r2, r3
   2cb6a:	2316      	movs	r3, #22
   2cb6c:	18fb      	adds	r3, r7, r3
   2cb6e:	8812      	ldrh	r2, [r2, #0]
   2cb70:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2cb72:	4a23      	ldr	r2, [pc, #140]	; (2cc00 <fit_lfn+0x10c>)
   2cb74:	69bb      	ldr	r3, [r7, #24]
   2cb76:	18d3      	adds	r3, r2, r3
   2cb78:	781b      	ldrb	r3, [r3, #0]
   2cb7a:	001a      	movs	r2, r3
   2cb7c:	68bb      	ldr	r3, [r7, #8]
   2cb7e:	189b      	adds	r3, r3, r2
   2cb80:	2216      	movs	r2, #22
   2cb82:	18ba      	adds	r2, r7, r2
   2cb84:	8812      	ldrh	r2, [r2, #0]
   2cb86:	b2d2      	uxtb	r2, r2
   2cb88:	701a      	strb	r2, [r3, #0]
   2cb8a:	4a1d      	ldr	r2, [pc, #116]	; (2cc00 <fit_lfn+0x10c>)
   2cb8c:	69bb      	ldr	r3, [r7, #24]
   2cb8e:	18d3      	adds	r3, r2, r3
   2cb90:	781b      	ldrb	r3, [r3, #0]
   2cb92:	3301      	adds	r3, #1
   2cb94:	68ba      	ldr	r2, [r7, #8]
   2cb96:	18d3      	adds	r3, r2, r3
   2cb98:	2216      	movs	r2, #22
   2cb9a:	18ba      	adds	r2, r7, r2
   2cb9c:	8812      	ldrh	r2, [r2, #0]
   2cb9e:	0a12      	lsrs	r2, r2, #8
   2cba0:	b292      	uxth	r2, r2
   2cba2:	b2d2      	uxtb	r2, r2
   2cba4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2cba6:	2316      	movs	r3, #22
   2cba8:	18fb      	adds	r3, r7, r3
   2cbaa:	881b      	ldrh	r3, [r3, #0]
   2cbac:	2b00      	cmp	r3, #0
   2cbae:	d104      	bne.n	2cbba <fit_lfn+0xc6>
   2cbb0:	2316      	movs	r3, #22
   2cbb2:	18fb      	adds	r3, r7, r3
   2cbb4:	2201      	movs	r2, #1
   2cbb6:	4252      	negs	r2, r2
   2cbb8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2cbba:	69bb      	ldr	r3, [r7, #24]
   2cbbc:	3301      	adds	r3, #1
   2cbbe:	61bb      	str	r3, [r7, #24]
   2cbc0:	69bb      	ldr	r3, [r7, #24]
   2cbc2:	2b0c      	cmp	r3, #12
   2cbc4:	d9c5      	bls.n	2cb52 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2cbc6:	2316      	movs	r3, #22
   2cbc8:	18fb      	adds	r3, r7, r3
   2cbca:	881b      	ldrh	r3, [r3, #0]
   2cbcc:	4a0b      	ldr	r2, [pc, #44]	; (2cbfc <fit_lfn+0x108>)
   2cbce:	4293      	cmp	r3, r2
   2cbd0:	d006      	beq.n	2cbe0 <fit_lfn+0xec>
   2cbd2:	69fb      	ldr	r3, [r7, #28]
   2cbd4:	005b      	lsls	r3, r3, #1
   2cbd6:	68fa      	ldr	r2, [r7, #12]
   2cbd8:	18d3      	adds	r3, r2, r3
   2cbda:	881b      	ldrh	r3, [r3, #0]
   2cbdc:	2b00      	cmp	r3, #0
   2cbde:	d105      	bne.n	2cbec <fit_lfn+0xf8>
   2cbe0:	1dfb      	adds	r3, r7, #7
   2cbe2:	1dfa      	adds	r2, r7, #7
   2cbe4:	7812      	ldrb	r2, [r2, #0]
   2cbe6:	2140      	movs	r1, #64	; 0x40
   2cbe8:	430a      	orrs	r2, r1
   2cbea:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2cbec:	68bb      	ldr	r3, [r7, #8]
   2cbee:	1dfa      	adds	r2, r7, #7
   2cbf0:	7812      	ldrb	r2, [r2, #0]
   2cbf2:	701a      	strb	r2, [r3, #0]
}
   2cbf4:	46c0      	nop			; (mov r8, r8)
   2cbf6:	46bd      	mov	sp, r7
   2cbf8:	b008      	add	sp, #32
   2cbfa:	bd80      	pop	{r7, pc}
   2cbfc:	0000ffff 	.word	0x0000ffff
   2cc00:	0003bcc0 	.word	0x0003bcc0

0002cc04 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2cc04:	b580      	push	{r7, lr}
   2cc06:	b08a      	sub	sp, #40	; 0x28
   2cc08:	af00      	add	r7, sp, #0
   2cc0a:	60f8      	str	r0, [r7, #12]
   2cc0c:	60b9      	str	r1, [r7, #8]
   2cc0e:	607a      	str	r2, [r7, #4]
   2cc10:	001a      	movs	r2, r3
   2cc12:	1cbb      	adds	r3, r7, #2
   2cc14:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2cc16:	68b9      	ldr	r1, [r7, #8]
   2cc18:	68fb      	ldr	r3, [r7, #12]
   2cc1a:	220b      	movs	r2, #11
   2cc1c:	0018      	movs	r0, r3
   2cc1e:	4b38      	ldr	r3, [pc, #224]	; (2cd00 <gen_numname+0xfc>)
   2cc20:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2cc22:	1cbb      	adds	r3, r7, #2
   2cc24:	881b      	ldrh	r3, [r3, #0]
   2cc26:	2b05      	cmp	r3, #5
   2cc28:	d911      	bls.n	2cc4e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2cc2a:	1cbb      	adds	r3, r7, #2
   2cc2c:	881b      	ldrh	r3, [r3, #0]
   2cc2e:	b29a      	uxth	r2, r3
   2cc30:	0852      	lsrs	r2, r2, #1
   2cc32:	03db      	lsls	r3, r3, #15
   2cc34:	4313      	orrs	r3, r2
   2cc36:	b299      	uxth	r1, r3
   2cc38:	687b      	ldr	r3, [r7, #4]
   2cc3a:	1c9a      	adds	r2, r3, #2
   2cc3c:	607a      	str	r2, [r7, #4]
   2cc3e:	881a      	ldrh	r2, [r3, #0]
   2cc40:	1cbb      	adds	r3, r7, #2
   2cc42:	188a      	adds	r2, r1, r2
   2cc44:	801a      	strh	r2, [r3, #0]
   2cc46:	687b      	ldr	r3, [r7, #4]
   2cc48:	881b      	ldrh	r3, [r3, #0]
   2cc4a:	2b00      	cmp	r3, #0
   2cc4c:	d1ed      	bne.n	2cc2a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2cc4e:	2307      	movs	r3, #7
   2cc50:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2cc52:	1cbb      	adds	r3, r7, #2
   2cc54:	881b      	ldrh	r3, [r3, #0]
   2cc56:	b2db      	uxtb	r3, r3
   2cc58:	220f      	movs	r2, #15
   2cc5a:	4013      	ands	r3, r2
   2cc5c:	b2da      	uxtb	r2, r3
   2cc5e:	2327      	movs	r3, #39	; 0x27
   2cc60:	18fb      	adds	r3, r7, r3
   2cc62:	3230      	adds	r2, #48	; 0x30
   2cc64:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2cc66:	2327      	movs	r3, #39	; 0x27
   2cc68:	18fb      	adds	r3, r7, r3
   2cc6a:	781b      	ldrb	r3, [r3, #0]
   2cc6c:	2b39      	cmp	r3, #57	; 0x39
   2cc6e:	d906      	bls.n	2cc7e <gen_numname+0x7a>
   2cc70:	2327      	movs	r3, #39	; 0x27
   2cc72:	18fb      	adds	r3, r7, r3
   2cc74:	2227      	movs	r2, #39	; 0x27
   2cc76:	18ba      	adds	r2, r7, r2
   2cc78:	7812      	ldrb	r2, [r2, #0]
   2cc7a:	3207      	adds	r2, #7
   2cc7c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2cc7e:	6a3b      	ldr	r3, [r7, #32]
   2cc80:	1e5a      	subs	r2, r3, #1
   2cc82:	623a      	str	r2, [r7, #32]
   2cc84:	2214      	movs	r2, #20
   2cc86:	18ba      	adds	r2, r7, r2
   2cc88:	2127      	movs	r1, #39	; 0x27
   2cc8a:	1879      	adds	r1, r7, r1
   2cc8c:	7809      	ldrb	r1, [r1, #0]
   2cc8e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2cc90:	1cbb      	adds	r3, r7, #2
   2cc92:	1cba      	adds	r2, r7, #2
   2cc94:	8812      	ldrh	r2, [r2, #0]
   2cc96:	0912      	lsrs	r2, r2, #4
   2cc98:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2cc9a:	1cbb      	adds	r3, r7, #2
   2cc9c:	881b      	ldrh	r3, [r3, #0]
   2cc9e:	2b00      	cmp	r3, #0
   2cca0:	d1d7      	bne.n	2cc52 <gen_numname+0x4e>
	ns[i] = '~';
   2cca2:	2314      	movs	r3, #20
   2cca4:	18fa      	adds	r2, r7, r3
   2cca6:	6a3b      	ldr	r3, [r7, #32]
   2cca8:	18d3      	adds	r3, r2, r3
   2ccaa:	227e      	movs	r2, #126	; 0x7e
   2ccac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2ccae:	2300      	movs	r3, #0
   2ccb0:	61fb      	str	r3, [r7, #28]
   2ccb2:	e002      	b.n	2ccba <gen_numname+0xb6>
   2ccb4:	69fb      	ldr	r3, [r7, #28]
   2ccb6:	3301      	adds	r3, #1
   2ccb8:	61fb      	str	r3, [r7, #28]
   2ccba:	69fa      	ldr	r2, [r7, #28]
   2ccbc:	6a3b      	ldr	r3, [r7, #32]
   2ccbe:	429a      	cmp	r2, r3
   2ccc0:	d205      	bcs.n	2ccce <gen_numname+0xca>
   2ccc2:	68fa      	ldr	r2, [r7, #12]
   2ccc4:	69fb      	ldr	r3, [r7, #28]
   2ccc6:	18d3      	adds	r3, r2, r3
   2ccc8:	781b      	ldrb	r3, [r3, #0]
   2ccca:	2b20      	cmp	r3, #32
   2cccc:	d1f2      	bne.n	2ccb4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2ccce:	69fb      	ldr	r3, [r7, #28]
   2ccd0:	1c5a      	adds	r2, r3, #1
   2ccd2:	61fa      	str	r2, [r7, #28]
   2ccd4:	68fa      	ldr	r2, [r7, #12]
   2ccd6:	18d2      	adds	r2, r2, r3
   2ccd8:	6a3b      	ldr	r3, [r7, #32]
   2ccda:	2b07      	cmp	r3, #7
   2ccdc:	d806      	bhi.n	2ccec <gen_numname+0xe8>
   2ccde:	6a3b      	ldr	r3, [r7, #32]
   2cce0:	1c59      	adds	r1, r3, #1
   2cce2:	6239      	str	r1, [r7, #32]
   2cce4:	2114      	movs	r1, #20
   2cce6:	1879      	adds	r1, r7, r1
   2cce8:	5ccb      	ldrb	r3, [r1, r3]
   2ccea:	e000      	b.n	2ccee <gen_numname+0xea>
   2ccec:	2320      	movs	r3, #32
   2ccee:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2ccf0:	69fb      	ldr	r3, [r7, #28]
   2ccf2:	2b07      	cmp	r3, #7
   2ccf4:	d9eb      	bls.n	2ccce <gen_numname+0xca>
}
   2ccf6:	46c0      	nop			; (mov r8, r8)
   2ccf8:	46bd      	mov	sp, r7
   2ccfa:	b00a      	add	sp, #40	; 0x28
   2ccfc:	bd80      	pop	{r7, pc}
   2ccfe:	46c0      	nop			; (mov r8, r8)
   2cd00:	0002bda9 	.word	0x0002bda9

0002cd04 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2cd04:	b580      	push	{r7, lr}
   2cd06:	b084      	sub	sp, #16
   2cd08:	af00      	add	r7, sp, #0
   2cd0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2cd0c:	230f      	movs	r3, #15
   2cd0e:	18fb      	adds	r3, r7, r3
   2cd10:	2200      	movs	r2, #0
   2cd12:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2cd14:	230b      	movs	r3, #11
   2cd16:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2cd18:	230f      	movs	r3, #15
   2cd1a:	18fb      	adds	r3, r7, r3
   2cd1c:	781b      	ldrb	r3, [r3, #0]
   2cd1e:	b2da      	uxtb	r2, r3
   2cd20:	0852      	lsrs	r2, r2, #1
   2cd22:	01db      	lsls	r3, r3, #7
   2cd24:	4313      	orrs	r3, r2
   2cd26:	b2d9      	uxtb	r1, r3
   2cd28:	687b      	ldr	r3, [r7, #4]
   2cd2a:	1c5a      	adds	r2, r3, #1
   2cd2c:	607a      	str	r2, [r7, #4]
   2cd2e:	781a      	ldrb	r2, [r3, #0]
   2cd30:	230f      	movs	r3, #15
   2cd32:	18fb      	adds	r3, r7, r3
   2cd34:	188a      	adds	r2, r1, r2
   2cd36:	701a      	strb	r2, [r3, #0]
   2cd38:	68bb      	ldr	r3, [r7, #8]
   2cd3a:	3b01      	subs	r3, #1
   2cd3c:	60bb      	str	r3, [r7, #8]
   2cd3e:	68bb      	ldr	r3, [r7, #8]
   2cd40:	2b00      	cmp	r3, #0
   2cd42:	d1e9      	bne.n	2cd18 <sum_sfn+0x14>
	return sum;
   2cd44:	230f      	movs	r3, #15
   2cd46:	18fb      	adds	r3, r7, r3
   2cd48:	781b      	ldrb	r3, [r3, #0]
}
   2cd4a:	0018      	movs	r0, r3
   2cd4c:	46bd      	mov	sp, r7
   2cd4e:	b004      	add	sp, #16
   2cd50:	bd80      	pop	{r7, pc}
	...

0002cd54 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2cd54:	b590      	push	{r4, r7, lr}
   2cd56:	b087      	sub	sp, #28
   2cd58:	af00      	add	r7, sp, #0
   2cd5a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2cd5c:	2317      	movs	r3, #23
   2cd5e:	18fc      	adds	r4, r7, r3
   2cd60:	687b      	ldr	r3, [r7, #4]
   2cd62:	2100      	movs	r1, #0
   2cd64:	0018      	movs	r0, r3
   2cd66:	4b74      	ldr	r3, [pc, #464]	; (2cf38 <dir_find+0x1e4>)
   2cd68:	4798      	blx	r3
   2cd6a:	0003      	movs	r3, r0
   2cd6c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2cd6e:	2317      	movs	r3, #23
   2cd70:	18fb      	adds	r3, r7, r3
   2cd72:	781b      	ldrb	r3, [r3, #0]
   2cd74:	2b00      	cmp	r3, #0
   2cd76:	d003      	beq.n	2cd80 <dir_find+0x2c>
   2cd78:	2317      	movs	r3, #23
   2cd7a:	18fb      	adds	r3, r7, r3
   2cd7c:	781b      	ldrb	r3, [r3, #0]
   2cd7e:	e0d6      	b.n	2cf2e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2cd80:	2314      	movs	r3, #20
   2cd82:	18fb      	adds	r3, r7, r3
   2cd84:	22ff      	movs	r2, #255	; 0xff
   2cd86:	701a      	strb	r2, [r3, #0]
   2cd88:	2315      	movs	r3, #21
   2cd8a:	18fb      	adds	r3, r7, r3
   2cd8c:	2214      	movs	r2, #20
   2cd8e:	18ba      	adds	r2, r7, r2
   2cd90:	7812      	ldrb	r2, [r2, #0]
   2cd92:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2cd94:	687b      	ldr	r3, [r7, #4]
   2cd96:	681a      	ldr	r2, [r3, #0]
   2cd98:	687b      	ldr	r3, [r7, #4]
   2cd9a:	691b      	ldr	r3, [r3, #16]
   2cd9c:	2117      	movs	r1, #23
   2cd9e:	187c      	adds	r4, r7, r1
   2cda0:	0019      	movs	r1, r3
   2cda2:	0010      	movs	r0, r2
   2cda4:	4b65      	ldr	r3, [pc, #404]	; (2cf3c <dir_find+0x1e8>)
   2cda6:	4798      	blx	r3
   2cda8:	0003      	movs	r3, r0
   2cdaa:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2cdac:	2317      	movs	r3, #23
   2cdae:	18fb      	adds	r3, r7, r3
   2cdb0:	781b      	ldrb	r3, [r3, #0]
   2cdb2:	2b00      	cmp	r3, #0
   2cdb4:	d000      	beq.n	2cdb8 <dir_find+0x64>
   2cdb6:	e0b2      	b.n	2cf1e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2cdb8:	687b      	ldr	r3, [r7, #4]
   2cdba:	695b      	ldr	r3, [r3, #20]
   2cdbc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2cdbe:	2316      	movs	r3, #22
   2cdc0:	18fb      	adds	r3, r7, r3
   2cdc2:	693a      	ldr	r2, [r7, #16]
   2cdc4:	7812      	ldrb	r2, [r2, #0]
   2cdc6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2cdc8:	2316      	movs	r3, #22
   2cdca:	18fb      	adds	r3, r7, r3
   2cdcc:	781b      	ldrb	r3, [r3, #0]
   2cdce:	2b00      	cmp	r3, #0
   2cdd0:	d104      	bne.n	2cddc <dir_find+0x88>
   2cdd2:	2317      	movs	r3, #23
   2cdd4:	18fb      	adds	r3, r7, r3
   2cdd6:	2204      	movs	r2, #4
   2cdd8:	701a      	strb	r2, [r3, #0]
   2cdda:	e0a5      	b.n	2cf28 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2cddc:	693b      	ldr	r3, [r7, #16]
   2cdde:	330b      	adds	r3, #11
   2cde0:	781a      	ldrb	r2, [r3, #0]
   2cde2:	230f      	movs	r3, #15
   2cde4:	18fb      	adds	r3, r7, r3
   2cde6:	213f      	movs	r1, #63	; 0x3f
   2cde8:	400a      	ands	r2, r1
   2cdea:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2cdec:	2316      	movs	r3, #22
   2cdee:	18fb      	adds	r3, r7, r3
   2cdf0:	781b      	ldrb	r3, [r3, #0]
   2cdf2:	2be5      	cmp	r3, #229	; 0xe5
   2cdf4:	d00a      	beq.n	2ce0c <dir_find+0xb8>
   2cdf6:	230f      	movs	r3, #15
   2cdf8:	18fb      	adds	r3, r7, r3
   2cdfa:	781b      	ldrb	r3, [r3, #0]
   2cdfc:	2208      	movs	r2, #8
   2cdfe:	4013      	ands	r3, r2
   2ce00:	d009      	beq.n	2ce16 <dir_find+0xc2>
   2ce02:	230f      	movs	r3, #15
   2ce04:	18fb      	adds	r3, r7, r3
   2ce06:	781b      	ldrb	r3, [r3, #0]
   2ce08:	2b0f      	cmp	r3, #15
   2ce0a:	d004      	beq.n	2ce16 <dir_find+0xc2>
			ord = 0xFF;
   2ce0c:	2315      	movs	r3, #21
   2ce0e:	18fb      	adds	r3, r7, r3
   2ce10:	22ff      	movs	r2, #255	; 0xff
   2ce12:	701a      	strb	r2, [r3, #0]
   2ce14:	e073      	b.n	2cefe <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2ce16:	230f      	movs	r3, #15
   2ce18:	18fb      	adds	r3, r7, r3
   2ce1a:	781b      	ldrb	r3, [r3, #0]
   2ce1c:	2b0f      	cmp	r3, #15
   2ce1e:	d145      	bne.n	2ceac <dir_find+0x158>
				if (dj->lfn) {
   2ce20:	687b      	ldr	r3, [r7, #4]
   2ce22:	69db      	ldr	r3, [r3, #28]
   2ce24:	2b00      	cmp	r3, #0
   2ce26:	d100      	bne.n	2ce2a <dir_find+0xd6>
   2ce28:	e069      	b.n	2cefe <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2ce2a:	2316      	movs	r3, #22
   2ce2c:	18fb      	adds	r3, r7, r3
   2ce2e:	781b      	ldrb	r3, [r3, #0]
   2ce30:	2240      	movs	r2, #64	; 0x40
   2ce32:	4013      	ands	r3, r2
   2ce34:	d016      	beq.n	2ce64 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2ce36:	2314      	movs	r3, #20
   2ce38:	18fb      	adds	r3, r7, r3
   2ce3a:	693a      	ldr	r2, [r7, #16]
   2ce3c:	7b52      	ldrb	r2, [r2, #13]
   2ce3e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2ce40:	2316      	movs	r3, #22
   2ce42:	18fb      	adds	r3, r7, r3
   2ce44:	2216      	movs	r2, #22
   2ce46:	18ba      	adds	r2, r7, r2
   2ce48:	7812      	ldrb	r2, [r2, #0]
   2ce4a:	2140      	movs	r1, #64	; 0x40
   2ce4c:	438a      	bics	r2, r1
   2ce4e:	701a      	strb	r2, [r3, #0]
   2ce50:	2315      	movs	r3, #21
   2ce52:	18fb      	adds	r3, r7, r3
   2ce54:	2216      	movs	r2, #22
   2ce56:	18ba      	adds	r2, r7, r2
   2ce58:	7812      	ldrb	r2, [r2, #0]
   2ce5a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2ce5c:	687b      	ldr	r3, [r7, #4]
   2ce5e:	88da      	ldrh	r2, [r3, #6]
   2ce60:	687b      	ldr	r3, [r7, #4]
   2ce62:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2ce64:	2316      	movs	r3, #22
   2ce66:	18fa      	adds	r2, r7, r3
   2ce68:	2315      	movs	r3, #21
   2ce6a:	18fb      	adds	r3, r7, r3
   2ce6c:	7812      	ldrb	r2, [r2, #0]
   2ce6e:	781b      	ldrb	r3, [r3, #0]
   2ce70:	429a      	cmp	r2, r3
   2ce72:	d116      	bne.n	2cea2 <dir_find+0x14e>
   2ce74:	693b      	ldr	r3, [r7, #16]
   2ce76:	330d      	adds	r3, #13
   2ce78:	781b      	ldrb	r3, [r3, #0]
   2ce7a:	2214      	movs	r2, #20
   2ce7c:	18ba      	adds	r2, r7, r2
   2ce7e:	7812      	ldrb	r2, [r2, #0]
   2ce80:	429a      	cmp	r2, r3
   2ce82:	d10e      	bne.n	2cea2 <dir_find+0x14e>
   2ce84:	687b      	ldr	r3, [r7, #4]
   2ce86:	69db      	ldr	r3, [r3, #28]
   2ce88:	693a      	ldr	r2, [r7, #16]
   2ce8a:	0011      	movs	r1, r2
   2ce8c:	0018      	movs	r0, r3
   2ce8e:	4b2c      	ldr	r3, [pc, #176]	; (2cf40 <dir_find+0x1ec>)
   2ce90:	4798      	blx	r3
   2ce92:	1e03      	subs	r3, r0, #0
   2ce94:	d005      	beq.n	2cea2 <dir_find+0x14e>
   2ce96:	2315      	movs	r3, #21
   2ce98:	18fb      	adds	r3, r7, r3
   2ce9a:	781b      	ldrb	r3, [r3, #0]
   2ce9c:	3b01      	subs	r3, #1
   2ce9e:	b2da      	uxtb	r2, r3
   2cea0:	e000      	b.n	2cea4 <dir_find+0x150>
   2cea2:	22ff      	movs	r2, #255	; 0xff
   2cea4:	2315      	movs	r3, #21
   2cea6:	18fb      	adds	r3, r7, r3
   2cea8:	701a      	strb	r2, [r3, #0]
   2ceaa:	e028      	b.n	2cefe <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ceac:	2315      	movs	r3, #21
   2ceae:	18fb      	adds	r3, r7, r3
   2ceb0:	781b      	ldrb	r3, [r3, #0]
   2ceb2:	2b00      	cmp	r3, #0
   2ceb4:	d10a      	bne.n	2cecc <dir_find+0x178>
   2ceb6:	693b      	ldr	r3, [r7, #16]
   2ceb8:	0018      	movs	r0, r3
   2ceba:	4b22      	ldr	r3, [pc, #136]	; (2cf44 <dir_find+0x1f0>)
   2cebc:	4798      	blx	r3
   2cebe:	0003      	movs	r3, r0
   2cec0:	001a      	movs	r2, r3
   2cec2:	2314      	movs	r3, #20
   2cec4:	18fb      	adds	r3, r7, r3
   2cec6:	781b      	ldrb	r3, [r3, #0]
   2cec8:	4293      	cmp	r3, r2
   2ceca:	d02a      	beq.n	2cf22 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2cecc:	2315      	movs	r3, #21
   2cece:	18fb      	adds	r3, r7, r3
   2ced0:	22ff      	movs	r2, #255	; 0xff
   2ced2:	701a      	strb	r2, [r3, #0]
   2ced4:	687b      	ldr	r3, [r7, #4]
   2ced6:	2201      	movs	r2, #1
   2ced8:	4252      	negs	r2, r2
   2ceda:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cedc:	687b      	ldr	r3, [r7, #4]
   2cede:	699b      	ldr	r3, [r3, #24]
   2cee0:	330b      	adds	r3, #11
   2cee2:	781b      	ldrb	r3, [r3, #0]
   2cee4:	001a      	movs	r2, r3
   2cee6:	2301      	movs	r3, #1
   2cee8:	4013      	ands	r3, r2
   2ceea:	d108      	bne.n	2cefe <dir_find+0x1aa>
   2ceec:	687b      	ldr	r3, [r7, #4]
   2ceee:	6999      	ldr	r1, [r3, #24]
   2cef0:	693b      	ldr	r3, [r7, #16]
   2cef2:	220b      	movs	r2, #11
   2cef4:	0018      	movs	r0, r3
   2cef6:	4b14      	ldr	r3, [pc, #80]	; (2cf48 <dir_find+0x1f4>)
   2cef8:	4798      	blx	r3
   2cefa:	1e03      	subs	r3, r0, #0
   2cefc:	d013      	beq.n	2cf26 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2cefe:	2317      	movs	r3, #23
   2cf00:	18fc      	adds	r4, r7, r3
   2cf02:	687b      	ldr	r3, [r7, #4]
   2cf04:	2100      	movs	r1, #0
   2cf06:	0018      	movs	r0, r3
   2cf08:	4b10      	ldr	r3, [pc, #64]	; (2cf4c <dir_find+0x1f8>)
   2cf0a:	4798      	blx	r3
   2cf0c:	0003      	movs	r3, r0
   2cf0e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2cf10:	2317      	movs	r3, #23
   2cf12:	18fb      	adds	r3, r7, r3
   2cf14:	781b      	ldrb	r3, [r3, #0]
   2cf16:	2b00      	cmp	r3, #0
   2cf18:	d100      	bne.n	2cf1c <dir_find+0x1c8>
   2cf1a:	e73b      	b.n	2cd94 <dir_find+0x40>
   2cf1c:	e004      	b.n	2cf28 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2cf1e:	46c0      	nop			; (mov r8, r8)
   2cf20:	e002      	b.n	2cf28 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2cf22:	46c0      	nop			; (mov r8, r8)
   2cf24:	e000      	b.n	2cf28 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cf26:	46c0      	nop			; (mov r8, r8)

	return res;
   2cf28:	2317      	movs	r3, #23
   2cf2a:	18fb      	adds	r3, r7, r3
   2cf2c:	781b      	ldrb	r3, [r3, #0]
}
   2cf2e:	0018      	movs	r0, r3
   2cf30:	46bd      	mov	sp, r7
   2cf32:	b007      	add	sp, #28
   2cf34:	bd90      	pop	{r4, r7, pc}
   2cf36:	46c0      	nop			; (mov r8, r8)
   2cf38:	0002c6d1 	.word	0x0002c6d1
   2cf3c:	0002be8d 	.word	0x0002be8d
   2cf40:	0002c9f1 	.word	0x0002c9f1
   2cf44:	0002cd05 	.word	0x0002cd05
   2cf48:	0002be11 	.word	0x0002be11
   2cf4c:	0002c801 	.word	0x0002c801

0002cf50 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2cf50:	b590      	push	{r4, r7, lr}
   2cf52:	b08d      	sub	sp, #52	; 0x34
   2cf54:	af00      	add	r7, sp, #0
   2cf56:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2cf58:	687b      	ldr	r3, [r7, #4]
   2cf5a:	699b      	ldr	r3, [r3, #24]
   2cf5c:	627b      	str	r3, [r7, #36]	; 0x24
   2cf5e:	687b      	ldr	r3, [r7, #4]
   2cf60:	69db      	ldr	r3, [r3, #28]
   2cf62:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2cf64:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2cf66:	230c      	movs	r3, #12
   2cf68:	18fb      	adds	r3, r7, r3
   2cf6a:	220c      	movs	r2, #12
   2cf6c:	0018      	movs	r0, r3
   2cf6e:	4bc8      	ldr	r3, [pc, #800]	; (2d290 <dir_register+0x340>)
   2cf70:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2cf72:	230c      	movs	r3, #12
   2cf74:	18fb      	adds	r3, r7, r3
   2cf76:	7adb      	ldrb	r3, [r3, #11]
   2cf78:	001a      	movs	r2, r3
   2cf7a:	2301      	movs	r3, #1
   2cf7c:	4013      	ands	r3, r2
   2cf7e:	d048      	beq.n	2d012 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cf82:	330b      	adds	r3, #11
   2cf84:	2200      	movs	r2, #0
   2cf86:	701a      	strb	r2, [r3, #0]
   2cf88:	687b      	ldr	r3, [r7, #4]
   2cf8a:	2200      	movs	r2, #0
   2cf8c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2cf8e:	232c      	movs	r3, #44	; 0x2c
   2cf90:	18fb      	adds	r3, r7, r3
   2cf92:	2201      	movs	r2, #1
   2cf94:	801a      	strh	r2, [r3, #0]
   2cf96:	e01c      	b.n	2cfd2 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2cf98:	232c      	movs	r3, #44	; 0x2c
   2cf9a:	18fb      	adds	r3, r7, r3
   2cf9c:	881b      	ldrh	r3, [r3, #0]
   2cf9e:	6a3a      	ldr	r2, [r7, #32]
   2cfa0:	210c      	movs	r1, #12
   2cfa2:	1879      	adds	r1, r7, r1
   2cfa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2cfa6:	4cbb      	ldr	r4, [pc, #748]	; (2d294 <dir_register+0x344>)
   2cfa8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2cfaa:	232f      	movs	r3, #47	; 0x2f
   2cfac:	18fc      	adds	r4, r7, r3
   2cfae:	687b      	ldr	r3, [r7, #4]
   2cfb0:	0018      	movs	r0, r3
   2cfb2:	4bb9      	ldr	r3, [pc, #740]	; (2d298 <dir_register+0x348>)
   2cfb4:	4798      	blx	r3
   2cfb6:	0003      	movs	r3, r0
   2cfb8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cfba:	232f      	movs	r3, #47	; 0x2f
   2cfbc:	18fb      	adds	r3, r7, r3
   2cfbe:	781b      	ldrb	r3, [r3, #0]
   2cfc0:	2b00      	cmp	r3, #0
   2cfc2:	d10c      	bne.n	2cfde <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2cfc4:	232c      	movs	r3, #44	; 0x2c
   2cfc6:	18fb      	adds	r3, r7, r3
   2cfc8:	881a      	ldrh	r2, [r3, #0]
   2cfca:	232c      	movs	r3, #44	; 0x2c
   2cfcc:	18fb      	adds	r3, r7, r3
   2cfce:	3201      	adds	r2, #1
   2cfd0:	801a      	strh	r2, [r3, #0]
   2cfd2:	232c      	movs	r3, #44	; 0x2c
   2cfd4:	18fb      	adds	r3, r7, r3
   2cfd6:	881b      	ldrh	r3, [r3, #0]
   2cfd8:	2b63      	cmp	r3, #99	; 0x63
   2cfda:	d9dd      	bls.n	2cf98 <dir_register+0x48>
   2cfdc:	e000      	b.n	2cfe0 <dir_register+0x90>
			if (res != FR_OK) break;
   2cfde:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2cfe0:	232c      	movs	r3, #44	; 0x2c
   2cfe2:	18fb      	adds	r3, r7, r3
   2cfe4:	881b      	ldrh	r3, [r3, #0]
   2cfe6:	2b64      	cmp	r3, #100	; 0x64
   2cfe8:	d101      	bne.n	2cfee <dir_register+0x9e>
   2cfea:	2307      	movs	r3, #7
   2cfec:	e14c      	b.n	2d288 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2cfee:	232f      	movs	r3, #47	; 0x2f
   2cff0:	18fb      	adds	r3, r7, r3
   2cff2:	781b      	ldrb	r3, [r3, #0]
   2cff4:	2b04      	cmp	r3, #4
   2cff6:	d003      	beq.n	2d000 <dir_register+0xb0>
   2cff8:	232f      	movs	r3, #47	; 0x2f
   2cffa:	18fb      	adds	r3, r7, r3
   2cffc:	781b      	ldrb	r3, [r3, #0]
   2cffe:	e143      	b.n	2d288 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d002:	330b      	adds	r3, #11
   2d004:	220c      	movs	r2, #12
   2d006:	18ba      	adds	r2, r7, r2
   2d008:	7ad2      	ldrb	r2, [r2, #11]
   2d00a:	701a      	strb	r2, [r3, #0]
   2d00c:	687b      	ldr	r3, [r7, #4]
   2d00e:	6a3a      	ldr	r2, [r7, #32]
   2d010:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d012:	230c      	movs	r3, #12
   2d014:	18fb      	adds	r3, r7, r3
   2d016:	7adb      	ldrb	r3, [r3, #11]
   2d018:	001a      	movs	r2, r3
   2d01a:	2302      	movs	r3, #2
   2d01c:	4013      	ands	r3, r2
   2d01e:	d023      	beq.n	2d068 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d020:	232a      	movs	r3, #42	; 0x2a
   2d022:	18fb      	adds	r3, r7, r3
   2d024:	2200      	movs	r2, #0
   2d026:	801a      	strh	r2, [r3, #0]
   2d028:	e006      	b.n	2d038 <dir_register+0xe8>
   2d02a:	232a      	movs	r3, #42	; 0x2a
   2d02c:	18fb      	adds	r3, r7, r3
   2d02e:	881a      	ldrh	r2, [r3, #0]
   2d030:	232a      	movs	r3, #42	; 0x2a
   2d032:	18fb      	adds	r3, r7, r3
   2d034:	3201      	adds	r2, #1
   2d036:	801a      	strh	r2, [r3, #0]
   2d038:	232a      	movs	r3, #42	; 0x2a
   2d03a:	18fb      	adds	r3, r7, r3
   2d03c:	881b      	ldrh	r3, [r3, #0]
   2d03e:	005b      	lsls	r3, r3, #1
   2d040:	6a3a      	ldr	r2, [r7, #32]
   2d042:	18d3      	adds	r3, r2, r3
   2d044:	881b      	ldrh	r3, [r3, #0]
   2d046:	2b00      	cmp	r3, #0
   2d048:	d1ef      	bne.n	2d02a <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d04a:	232a      	movs	r3, #42	; 0x2a
   2d04c:	18fb      	adds	r3, r7, r3
   2d04e:	881b      	ldrh	r3, [r3, #0]
   2d050:	3319      	adds	r3, #25
   2d052:	001a      	movs	r2, r3
   2d054:	4b91      	ldr	r3, [pc, #580]	; (2d29c <dir_register+0x34c>)
   2d056:	210d      	movs	r1, #13
   2d058:	0010      	movs	r0, r2
   2d05a:	4798      	blx	r3
   2d05c:	0003      	movs	r3, r0
   2d05e:	001a      	movs	r2, r3
   2d060:	232a      	movs	r3, #42	; 0x2a
   2d062:	18fb      	adds	r3, r7, r3
   2d064:	801a      	strh	r2, [r3, #0]
   2d066:	e003      	b.n	2d070 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d068:	232a      	movs	r3, #42	; 0x2a
   2d06a:	18fb      	adds	r3, r7, r3
   2d06c:	2201      	movs	r2, #1
   2d06e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d070:	232f      	movs	r3, #47	; 0x2f
   2d072:	18fc      	adds	r4, r7, r3
   2d074:	687b      	ldr	r3, [r7, #4]
   2d076:	2100      	movs	r1, #0
   2d078:	0018      	movs	r0, r3
   2d07a:	4b89      	ldr	r3, [pc, #548]	; (2d2a0 <dir_register+0x350>)
   2d07c:	4798      	blx	r3
   2d07e:	0003      	movs	r3, r0
   2d080:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d082:	232f      	movs	r3, #47	; 0x2f
   2d084:	18fb      	adds	r3, r7, r3
   2d086:	781b      	ldrb	r3, [r3, #0]
   2d088:	2b00      	cmp	r3, #0
   2d08a:	d003      	beq.n	2d094 <dir_register+0x144>
   2d08c:	232f      	movs	r3, #47	; 0x2f
   2d08e:	18fb      	adds	r3, r7, r3
   2d090:	781b      	ldrb	r3, [r3, #0]
   2d092:	e0f9      	b.n	2d288 <dir_register+0x338>
	n = is = 0;
   2d094:	2328      	movs	r3, #40	; 0x28
   2d096:	18fb      	adds	r3, r7, r3
   2d098:	2200      	movs	r2, #0
   2d09a:	801a      	strh	r2, [r3, #0]
   2d09c:	232c      	movs	r3, #44	; 0x2c
   2d09e:	18fb      	adds	r3, r7, r3
   2d0a0:	2228      	movs	r2, #40	; 0x28
   2d0a2:	18ba      	adds	r2, r7, r2
   2d0a4:	8812      	ldrh	r2, [r2, #0]
   2d0a6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d0a8:	687b      	ldr	r3, [r7, #4]
   2d0aa:	681a      	ldr	r2, [r3, #0]
   2d0ac:	687b      	ldr	r3, [r7, #4]
   2d0ae:	691b      	ldr	r3, [r3, #16]
   2d0b0:	212f      	movs	r1, #47	; 0x2f
   2d0b2:	187c      	adds	r4, r7, r1
   2d0b4:	0019      	movs	r1, r3
   2d0b6:	0010      	movs	r0, r2
   2d0b8:	4b7a      	ldr	r3, [pc, #488]	; (2d2a4 <dir_register+0x354>)
   2d0ba:	4798      	blx	r3
   2d0bc:	0003      	movs	r3, r0
   2d0be:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d0c0:	232f      	movs	r3, #47	; 0x2f
   2d0c2:	18fb      	adds	r3, r7, r3
   2d0c4:	781b      	ldrb	r3, [r3, #0]
   2d0c6:	2b00      	cmp	r3, #0
   2d0c8:	d13c      	bne.n	2d144 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d0ca:	687b      	ldr	r3, [r7, #4]
   2d0cc:	695a      	ldr	r2, [r3, #20]
   2d0ce:	231f      	movs	r3, #31
   2d0d0:	18fb      	adds	r3, r7, r3
   2d0d2:	7812      	ldrb	r2, [r2, #0]
   2d0d4:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d0d6:	231f      	movs	r3, #31
   2d0d8:	18fb      	adds	r3, r7, r3
   2d0da:	781b      	ldrb	r3, [r3, #0]
   2d0dc:	2be5      	cmp	r3, #229	; 0xe5
   2d0de:	d004      	beq.n	2d0ea <dir_register+0x19a>
   2d0e0:	231f      	movs	r3, #31
   2d0e2:	18fb      	adds	r3, r7, r3
   2d0e4:	781b      	ldrb	r3, [r3, #0]
   2d0e6:	2b00      	cmp	r3, #0
   2d0e8:	d119      	bne.n	2d11e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d0ea:	232c      	movs	r3, #44	; 0x2c
   2d0ec:	18fb      	adds	r3, r7, r3
   2d0ee:	881b      	ldrh	r3, [r3, #0]
   2d0f0:	2b00      	cmp	r3, #0
   2d0f2:	d104      	bne.n	2d0fe <dir_register+0x1ae>
   2d0f4:	2328      	movs	r3, #40	; 0x28
   2d0f6:	18fb      	adds	r3, r7, r3
   2d0f8:	687a      	ldr	r2, [r7, #4]
   2d0fa:	88d2      	ldrh	r2, [r2, #6]
   2d0fc:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d0fe:	232c      	movs	r3, #44	; 0x2c
   2d100:	18fb      	adds	r3, r7, r3
   2d102:	222c      	movs	r2, #44	; 0x2c
   2d104:	18ba      	adds	r2, r7, r2
   2d106:	8812      	ldrh	r2, [r2, #0]
   2d108:	3201      	adds	r2, #1
   2d10a:	801a      	strh	r2, [r3, #0]
   2d10c:	232c      	movs	r3, #44	; 0x2c
   2d10e:	18fa      	adds	r2, r7, r3
   2d110:	232a      	movs	r3, #42	; 0x2a
   2d112:	18fb      	adds	r3, r7, r3
   2d114:	8812      	ldrh	r2, [r2, #0]
   2d116:	881b      	ldrh	r3, [r3, #0]
   2d118:	429a      	cmp	r2, r3
   2d11a:	d104      	bne.n	2d126 <dir_register+0x1d6>
   2d11c:	e013      	b.n	2d146 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d11e:	232c      	movs	r3, #44	; 0x2c
   2d120:	18fb      	adds	r3, r7, r3
   2d122:	2200      	movs	r2, #0
   2d124:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d126:	232f      	movs	r3, #47	; 0x2f
   2d128:	18fc      	adds	r4, r7, r3
   2d12a:	687b      	ldr	r3, [r7, #4]
   2d12c:	2101      	movs	r1, #1
   2d12e:	0018      	movs	r0, r3
   2d130:	4b5d      	ldr	r3, [pc, #372]	; (2d2a8 <dir_register+0x358>)
   2d132:	4798      	blx	r3
   2d134:	0003      	movs	r3, r0
   2d136:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d138:	232f      	movs	r3, #47	; 0x2f
   2d13a:	18fb      	adds	r3, r7, r3
   2d13c:	781b      	ldrb	r3, [r3, #0]
   2d13e:	2b00      	cmp	r3, #0
   2d140:	d0b2      	beq.n	2d0a8 <dir_register+0x158>
   2d142:	e000      	b.n	2d146 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d144:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d146:	232f      	movs	r3, #47	; 0x2f
   2d148:	18fb      	adds	r3, r7, r3
   2d14a:	781b      	ldrb	r3, [r3, #0]
   2d14c:	2b00      	cmp	r3, #0
   2d14e:	d163      	bne.n	2d218 <dir_register+0x2c8>
   2d150:	232a      	movs	r3, #42	; 0x2a
   2d152:	18fb      	adds	r3, r7, r3
   2d154:	881b      	ldrh	r3, [r3, #0]
   2d156:	2b01      	cmp	r3, #1
   2d158:	d95e      	bls.n	2d218 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d15a:	232f      	movs	r3, #47	; 0x2f
   2d15c:	18fc      	adds	r4, r7, r3
   2d15e:	2328      	movs	r3, #40	; 0x28
   2d160:	18fb      	adds	r3, r7, r3
   2d162:	881a      	ldrh	r2, [r3, #0]
   2d164:	687b      	ldr	r3, [r7, #4]
   2d166:	0011      	movs	r1, r2
   2d168:	0018      	movs	r0, r3
   2d16a:	4b4d      	ldr	r3, [pc, #308]	; (2d2a0 <dir_register+0x350>)
   2d16c:	4798      	blx	r3
   2d16e:	0003      	movs	r3, r0
   2d170:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d172:	232f      	movs	r3, #47	; 0x2f
   2d174:	18fb      	adds	r3, r7, r3
   2d176:	781b      	ldrb	r3, [r3, #0]
   2d178:	2b00      	cmp	r3, #0
   2d17a:	d14d      	bne.n	2d218 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d17c:	687b      	ldr	r3, [r7, #4]
   2d17e:	699b      	ldr	r3, [r3, #24]
   2d180:	221e      	movs	r2, #30
   2d182:	18bc      	adds	r4, r7, r2
   2d184:	0018      	movs	r0, r3
   2d186:	4b49      	ldr	r3, [pc, #292]	; (2d2ac <dir_register+0x35c>)
   2d188:	4798      	blx	r3
   2d18a:	0003      	movs	r3, r0
   2d18c:	7023      	strb	r3, [r4, #0]
			ne--;
   2d18e:	232a      	movs	r3, #42	; 0x2a
   2d190:	18fb      	adds	r3, r7, r3
   2d192:	881a      	ldrh	r2, [r3, #0]
   2d194:	232a      	movs	r3, #42	; 0x2a
   2d196:	18fb      	adds	r3, r7, r3
   2d198:	3a01      	subs	r2, #1
   2d19a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d19c:	687b      	ldr	r3, [r7, #4]
   2d19e:	681a      	ldr	r2, [r3, #0]
   2d1a0:	687b      	ldr	r3, [r7, #4]
   2d1a2:	691b      	ldr	r3, [r3, #16]
   2d1a4:	212f      	movs	r1, #47	; 0x2f
   2d1a6:	187c      	adds	r4, r7, r1
   2d1a8:	0019      	movs	r1, r3
   2d1aa:	0010      	movs	r0, r2
   2d1ac:	4b3d      	ldr	r3, [pc, #244]	; (2d2a4 <dir_register+0x354>)
   2d1ae:	4798      	blx	r3
   2d1b0:	0003      	movs	r3, r0
   2d1b2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d1b4:	232f      	movs	r3, #47	; 0x2f
   2d1b6:	18fb      	adds	r3, r7, r3
   2d1b8:	781b      	ldrb	r3, [r3, #0]
   2d1ba:	2b00      	cmp	r3, #0
   2d1bc:	d12b      	bne.n	2d216 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d1be:	687b      	ldr	r3, [r7, #4]
   2d1c0:	69d8      	ldr	r0, [r3, #28]
   2d1c2:	687b      	ldr	r3, [r7, #4]
   2d1c4:	6959      	ldr	r1, [r3, #20]
   2d1c6:	232a      	movs	r3, #42	; 0x2a
   2d1c8:	18fb      	adds	r3, r7, r3
   2d1ca:	881b      	ldrh	r3, [r3, #0]
   2d1cc:	b2da      	uxtb	r2, r3
   2d1ce:	231e      	movs	r3, #30
   2d1d0:	18fb      	adds	r3, r7, r3
   2d1d2:	781b      	ldrb	r3, [r3, #0]
   2d1d4:	4c36      	ldr	r4, [pc, #216]	; (2d2b0 <dir_register+0x360>)
   2d1d6:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d1d8:	687b      	ldr	r3, [r7, #4]
   2d1da:	681b      	ldr	r3, [r3, #0]
   2d1dc:	2201      	movs	r2, #1
   2d1de:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d1e0:	232f      	movs	r3, #47	; 0x2f
   2d1e2:	18fc      	adds	r4, r7, r3
   2d1e4:	687b      	ldr	r3, [r7, #4]
   2d1e6:	2100      	movs	r1, #0
   2d1e8:	0018      	movs	r0, r3
   2d1ea:	4b2f      	ldr	r3, [pc, #188]	; (2d2a8 <dir_register+0x358>)
   2d1ec:	4798      	blx	r3
   2d1ee:	0003      	movs	r3, r0
   2d1f0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d1f2:	232f      	movs	r3, #47	; 0x2f
   2d1f4:	18fb      	adds	r3, r7, r3
   2d1f6:	781b      	ldrb	r3, [r3, #0]
   2d1f8:	2b00      	cmp	r3, #0
   2d1fa:	d10d      	bne.n	2d218 <dir_register+0x2c8>
   2d1fc:	232a      	movs	r3, #42	; 0x2a
   2d1fe:	18fb      	adds	r3, r7, r3
   2d200:	222a      	movs	r2, #42	; 0x2a
   2d202:	18ba      	adds	r2, r7, r2
   2d204:	8812      	ldrh	r2, [r2, #0]
   2d206:	3a01      	subs	r2, #1
   2d208:	801a      	strh	r2, [r3, #0]
   2d20a:	232a      	movs	r3, #42	; 0x2a
   2d20c:	18fb      	adds	r3, r7, r3
   2d20e:	881b      	ldrh	r3, [r3, #0]
   2d210:	2b00      	cmp	r3, #0
   2d212:	d1c3      	bne.n	2d19c <dir_register+0x24c>
   2d214:	e000      	b.n	2d218 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d216:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d218:	232f      	movs	r3, #47	; 0x2f
   2d21a:	18fb      	adds	r3, r7, r3
   2d21c:	781b      	ldrb	r3, [r3, #0]
   2d21e:	2b00      	cmp	r3, #0
   2d220:	d12f      	bne.n	2d282 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d222:	687b      	ldr	r3, [r7, #4]
   2d224:	681a      	ldr	r2, [r3, #0]
   2d226:	687b      	ldr	r3, [r7, #4]
   2d228:	691b      	ldr	r3, [r3, #16]
   2d22a:	212f      	movs	r1, #47	; 0x2f
   2d22c:	187c      	adds	r4, r7, r1
   2d22e:	0019      	movs	r1, r3
   2d230:	0010      	movs	r0, r2
   2d232:	4b1c      	ldr	r3, [pc, #112]	; (2d2a4 <dir_register+0x354>)
   2d234:	4798      	blx	r3
   2d236:	0003      	movs	r3, r0
   2d238:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d23a:	232f      	movs	r3, #47	; 0x2f
   2d23c:	18fb      	adds	r3, r7, r3
   2d23e:	781b      	ldrb	r3, [r3, #0]
   2d240:	2b00      	cmp	r3, #0
   2d242:	d11e      	bne.n	2d282 <dir_register+0x332>
			dir = dj->dir;
   2d244:	687b      	ldr	r3, [r7, #4]
   2d246:	695b      	ldr	r3, [r3, #20]
   2d248:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d24a:	69bb      	ldr	r3, [r7, #24]
   2d24c:	2220      	movs	r2, #32
   2d24e:	2100      	movs	r1, #0
   2d250:	0018      	movs	r0, r3
   2d252:	4b18      	ldr	r3, [pc, #96]	; (2d2b4 <dir_register+0x364>)
   2d254:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d256:	687b      	ldr	r3, [r7, #4]
   2d258:	6999      	ldr	r1, [r3, #24]
   2d25a:	69bb      	ldr	r3, [r7, #24]
   2d25c:	220b      	movs	r2, #11
   2d25e:	0018      	movs	r0, r3
   2d260:	4b0b      	ldr	r3, [pc, #44]	; (2d290 <dir_register+0x340>)
   2d262:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d264:	69bb      	ldr	r3, [r7, #24]
   2d266:	330c      	adds	r3, #12
   2d268:	001a      	movs	r2, r3
   2d26a:	687b      	ldr	r3, [r7, #4]
   2d26c:	699b      	ldr	r3, [r3, #24]
   2d26e:	330b      	adds	r3, #11
   2d270:	781b      	ldrb	r3, [r3, #0]
   2d272:	2118      	movs	r1, #24
   2d274:	400b      	ands	r3, r1
   2d276:	b2db      	uxtb	r3, r3
   2d278:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d27a:	687b      	ldr	r3, [r7, #4]
   2d27c:	681b      	ldr	r3, [r3, #0]
   2d27e:	2201      	movs	r2, #1
   2d280:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d282:	232f      	movs	r3, #47	; 0x2f
   2d284:	18fb      	adds	r3, r7, r3
   2d286:	781b      	ldrb	r3, [r3, #0]
}
   2d288:	0018      	movs	r0, r3
   2d28a:	46bd      	mov	sp, r7
   2d28c:	b00d      	add	sp, #52	; 0x34
   2d28e:	bd90      	pop	{r4, r7, pc}
   2d290:	0002bda9 	.word	0x0002bda9
   2d294:	0002cc05 	.word	0x0002cc05
   2d298:	0002cd55 	.word	0x0002cd55
   2d29c:	00033149 	.word	0x00033149
   2d2a0:	0002c6d1 	.word	0x0002c6d1
   2d2a4:	0002be8d 	.word	0x0002be8d
   2d2a8:	0002c801 	.word	0x0002c801
   2d2ac:	0002cd05 	.word	0x0002cd05
   2d2b0:	0002caf5 	.word	0x0002caf5
   2d2b4:	0002bde1 	.word	0x0002bde1

0002d2b8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d2b8:	b590      	push	{r4, r7, lr}
   2d2ba:	b08b      	sub	sp, #44	; 0x2c
   2d2bc:	af00      	add	r7, sp, #0
   2d2be:	6078      	str	r0, [r7, #4]
   2d2c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d2c2:	683b      	ldr	r3, [r7, #0]
   2d2c4:	681b      	ldr	r3, [r3, #0]
   2d2c6:	613b      	str	r3, [r7, #16]
   2d2c8:	e002      	b.n	2d2d0 <create_name+0x18>
   2d2ca:	693b      	ldr	r3, [r7, #16]
   2d2cc:	3301      	adds	r3, #1
   2d2ce:	613b      	str	r3, [r7, #16]
   2d2d0:	693b      	ldr	r3, [r7, #16]
   2d2d2:	781b      	ldrb	r3, [r3, #0]
   2d2d4:	2b2f      	cmp	r3, #47	; 0x2f
   2d2d6:	d0f8      	beq.n	2d2ca <create_name+0x12>
   2d2d8:	693b      	ldr	r3, [r7, #16]
   2d2da:	781b      	ldrb	r3, [r3, #0]
   2d2dc:	2b5c      	cmp	r3, #92	; 0x5c
   2d2de:	d0f4      	beq.n	2d2ca <create_name+0x12>
	lfn = dj->lfn;
   2d2e0:	687b      	ldr	r3, [r7, #4]
   2d2e2:	69db      	ldr	r3, [r3, #28]
   2d2e4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d2e6:	2300      	movs	r3, #0
   2d2e8:	617b      	str	r3, [r7, #20]
   2d2ea:	697b      	ldr	r3, [r7, #20]
   2d2ec:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d2ee:	69bb      	ldr	r3, [r7, #24]
   2d2f0:	1c5a      	adds	r2, r3, #1
   2d2f2:	61ba      	str	r2, [r7, #24]
   2d2f4:	693a      	ldr	r2, [r7, #16]
   2d2f6:	18d3      	adds	r3, r2, r3
   2d2f8:	781a      	ldrb	r2, [r3, #0]
   2d2fa:	2324      	movs	r3, #36	; 0x24
   2d2fc:	18fb      	adds	r3, r7, r3
   2d2fe:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d300:	2324      	movs	r3, #36	; 0x24
   2d302:	18fb      	adds	r3, r7, r3
   2d304:	881b      	ldrh	r3, [r3, #0]
   2d306:	2b1f      	cmp	r3, #31
   2d308:	d944      	bls.n	2d394 <create_name+0xdc>
   2d30a:	2324      	movs	r3, #36	; 0x24
   2d30c:	18fb      	adds	r3, r7, r3
   2d30e:	881b      	ldrh	r3, [r3, #0]
   2d310:	2b2f      	cmp	r3, #47	; 0x2f
   2d312:	d03f      	beq.n	2d394 <create_name+0xdc>
   2d314:	2324      	movs	r3, #36	; 0x24
   2d316:	18fb      	adds	r3, r7, r3
   2d318:	881b      	ldrh	r3, [r3, #0]
   2d31a:	2b5c      	cmp	r3, #92	; 0x5c
   2d31c:	d03a      	beq.n	2d394 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d31e:	697b      	ldr	r3, [r7, #20]
   2d320:	2bfe      	cmp	r3, #254	; 0xfe
   2d322:	d901      	bls.n	2d328 <create_name+0x70>
			return FR_INVALID_NAME;
   2d324:	2306      	movs	r3, #6
   2d326:	e1e7      	b.n	2d6f8 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d328:	2324      	movs	r3, #36	; 0x24
   2d32a:	18fb      	adds	r3, r7, r3
   2d32c:	2224      	movs	r2, #36	; 0x24
   2d32e:	18ba      	adds	r2, r7, r2
   2d330:	8812      	ldrh	r2, [r2, #0]
   2d332:	21ff      	movs	r1, #255	; 0xff
   2d334:	400a      	ands	r2, r1
   2d336:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d338:	2324      	movs	r3, #36	; 0x24
   2d33a:	18fc      	adds	r4, r7, r3
   2d33c:	2324      	movs	r3, #36	; 0x24
   2d33e:	18fb      	adds	r3, r7, r3
   2d340:	881b      	ldrh	r3, [r3, #0]
   2d342:	2101      	movs	r1, #1
   2d344:	0018      	movs	r0, r3
   2d346:	4bba      	ldr	r3, [pc, #744]	; (2d630 <create_name+0x378>)
   2d348:	4798      	blx	r3
   2d34a:	0003      	movs	r3, r0
   2d34c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d34e:	2324      	movs	r3, #36	; 0x24
   2d350:	18fb      	adds	r3, r7, r3
   2d352:	881b      	ldrh	r3, [r3, #0]
   2d354:	2b00      	cmp	r3, #0
   2d356:	d101      	bne.n	2d35c <create_name+0xa4>
   2d358:	2306      	movs	r3, #6
   2d35a:	e1cd      	b.n	2d6f8 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d35c:	2324      	movs	r3, #36	; 0x24
   2d35e:	18fb      	adds	r3, r7, r3
   2d360:	881b      	ldrh	r3, [r3, #0]
   2d362:	2b7f      	cmp	r3, #127	; 0x7f
   2d364:	d80b      	bhi.n	2d37e <create_name+0xc6>
   2d366:	2324      	movs	r3, #36	; 0x24
   2d368:	18fb      	adds	r3, r7, r3
   2d36a:	881a      	ldrh	r2, [r3, #0]
   2d36c:	4bb1      	ldr	r3, [pc, #708]	; (2d634 <create_name+0x37c>)
   2d36e:	0011      	movs	r1, r2
   2d370:	0018      	movs	r0, r3
   2d372:	4bb1      	ldr	r3, [pc, #708]	; (2d638 <create_name+0x380>)
   2d374:	4798      	blx	r3
   2d376:	1e03      	subs	r3, r0, #0
   2d378:	d001      	beq.n	2d37e <create_name+0xc6>
			return FR_INVALID_NAME;
   2d37a:	2306      	movs	r3, #6
   2d37c:	e1bc      	b.n	2d6f8 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d37e:	697b      	ldr	r3, [r7, #20]
   2d380:	1c5a      	adds	r2, r3, #1
   2d382:	617a      	str	r2, [r7, #20]
   2d384:	005b      	lsls	r3, r3, #1
   2d386:	68fa      	ldr	r2, [r7, #12]
   2d388:	18d3      	adds	r3, r2, r3
   2d38a:	2224      	movs	r2, #36	; 0x24
   2d38c:	18ba      	adds	r2, r7, r2
   2d38e:	8812      	ldrh	r2, [r2, #0]
   2d390:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d392:	e7ac      	b.n	2d2ee <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d394:	693a      	ldr	r2, [r7, #16]
   2d396:	69bb      	ldr	r3, [r7, #24]
   2d398:	18d2      	adds	r2, r2, r3
   2d39a:	683b      	ldr	r3, [r7, #0]
   2d39c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d39e:	2324      	movs	r3, #36	; 0x24
   2d3a0:	18fb      	adds	r3, r7, r3
   2d3a2:	881b      	ldrh	r3, [r3, #0]
   2d3a4:	2b1f      	cmp	r3, #31
   2d3a6:	d801      	bhi.n	2d3ac <create_name+0xf4>
   2d3a8:	2204      	movs	r2, #4
   2d3aa:	e000      	b.n	2d3ae <create_name+0xf6>
   2d3ac:	2200      	movs	r2, #0
   2d3ae:	2326      	movs	r3, #38	; 0x26
   2d3b0:	18fb      	adds	r3, r7, r3
   2d3b2:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d3b4:	e017      	b.n	2d3e6 <create_name+0x12e>
		w = lfn[di-1];
   2d3b6:	697b      	ldr	r3, [r7, #20]
   2d3b8:	4aa0      	ldr	r2, [pc, #640]	; (2d63c <create_name+0x384>)
   2d3ba:	4694      	mov	ip, r2
   2d3bc:	4463      	add	r3, ip
   2d3be:	005b      	lsls	r3, r3, #1
   2d3c0:	68fa      	ldr	r2, [r7, #12]
   2d3c2:	18d2      	adds	r2, r2, r3
   2d3c4:	2324      	movs	r3, #36	; 0x24
   2d3c6:	18fb      	adds	r3, r7, r3
   2d3c8:	8812      	ldrh	r2, [r2, #0]
   2d3ca:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d3cc:	2324      	movs	r3, #36	; 0x24
   2d3ce:	18fb      	adds	r3, r7, r3
   2d3d0:	881b      	ldrh	r3, [r3, #0]
   2d3d2:	2b20      	cmp	r3, #32
   2d3d4:	d004      	beq.n	2d3e0 <create_name+0x128>
   2d3d6:	2324      	movs	r3, #36	; 0x24
   2d3d8:	18fb      	adds	r3, r7, r3
   2d3da:	881b      	ldrh	r3, [r3, #0]
   2d3dc:	2b2e      	cmp	r3, #46	; 0x2e
   2d3de:	d106      	bne.n	2d3ee <create_name+0x136>
		di--;
   2d3e0:	697b      	ldr	r3, [r7, #20]
   2d3e2:	3b01      	subs	r3, #1
   2d3e4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d3e6:	697b      	ldr	r3, [r7, #20]
   2d3e8:	2b00      	cmp	r3, #0
   2d3ea:	d1e4      	bne.n	2d3b6 <create_name+0xfe>
   2d3ec:	e000      	b.n	2d3f0 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2d3ee:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2d3f0:	697b      	ldr	r3, [r7, #20]
   2d3f2:	2b00      	cmp	r3, #0
   2d3f4:	d101      	bne.n	2d3fa <create_name+0x142>
   2d3f6:	2306      	movs	r3, #6
   2d3f8:	e17e      	b.n	2d6f8 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d3fa:	697b      	ldr	r3, [r7, #20]
   2d3fc:	005b      	lsls	r3, r3, #1
   2d3fe:	68fa      	ldr	r2, [r7, #12]
   2d400:	18d3      	adds	r3, r2, r3
   2d402:	2200      	movs	r2, #0
   2d404:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d406:	687b      	ldr	r3, [r7, #4]
   2d408:	699b      	ldr	r3, [r3, #24]
   2d40a:	220b      	movs	r2, #11
   2d40c:	2120      	movs	r1, #32
   2d40e:	0018      	movs	r0, r3
   2d410:	4b8b      	ldr	r3, [pc, #556]	; (2d640 <create_name+0x388>)
   2d412:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d414:	2300      	movs	r3, #0
   2d416:	61bb      	str	r3, [r7, #24]
   2d418:	e002      	b.n	2d420 <create_name+0x168>
   2d41a:	69bb      	ldr	r3, [r7, #24]
   2d41c:	3301      	adds	r3, #1
   2d41e:	61bb      	str	r3, [r7, #24]
   2d420:	69bb      	ldr	r3, [r7, #24]
   2d422:	005b      	lsls	r3, r3, #1
   2d424:	68fa      	ldr	r2, [r7, #12]
   2d426:	18d3      	adds	r3, r2, r3
   2d428:	881b      	ldrh	r3, [r3, #0]
   2d42a:	2b20      	cmp	r3, #32
   2d42c:	d0f5      	beq.n	2d41a <create_name+0x162>
   2d42e:	69bb      	ldr	r3, [r7, #24]
   2d430:	005b      	lsls	r3, r3, #1
   2d432:	68fa      	ldr	r2, [r7, #12]
   2d434:	18d3      	adds	r3, r2, r3
   2d436:	881b      	ldrh	r3, [r3, #0]
   2d438:	2b2e      	cmp	r3, #46	; 0x2e
   2d43a:	d0ee      	beq.n	2d41a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d43c:	69bb      	ldr	r3, [r7, #24]
   2d43e:	2b00      	cmp	r3, #0
   2d440:	d00b      	beq.n	2d45a <create_name+0x1a2>
   2d442:	2326      	movs	r3, #38	; 0x26
   2d444:	18fb      	adds	r3, r7, r3
   2d446:	2226      	movs	r2, #38	; 0x26
   2d448:	18ba      	adds	r2, r7, r2
   2d44a:	7812      	ldrb	r2, [r2, #0]
   2d44c:	2103      	movs	r1, #3
   2d44e:	430a      	orrs	r2, r1
   2d450:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d452:	e002      	b.n	2d45a <create_name+0x1a2>
   2d454:	697b      	ldr	r3, [r7, #20]
   2d456:	3b01      	subs	r3, #1
   2d458:	617b      	str	r3, [r7, #20]
   2d45a:	697b      	ldr	r3, [r7, #20]
   2d45c:	2b00      	cmp	r3, #0
   2d45e:	d009      	beq.n	2d474 <create_name+0x1bc>
   2d460:	697b      	ldr	r3, [r7, #20]
   2d462:	4a76      	ldr	r2, [pc, #472]	; (2d63c <create_name+0x384>)
   2d464:	4694      	mov	ip, r2
   2d466:	4463      	add	r3, ip
   2d468:	005b      	lsls	r3, r3, #1
   2d46a:	68fa      	ldr	r2, [r7, #12]
   2d46c:	18d3      	adds	r3, r2, r3
   2d46e:	881b      	ldrh	r3, [r3, #0]
   2d470:	2b2e      	cmp	r3, #46	; 0x2e
   2d472:	d1ef      	bne.n	2d454 <create_name+0x19c>

	b = i = 0; ni = 8;
   2d474:	2300      	movs	r3, #0
   2d476:	623b      	str	r3, [r7, #32]
   2d478:	2327      	movs	r3, #39	; 0x27
   2d47a:	18fb      	adds	r3, r7, r3
   2d47c:	2200      	movs	r2, #0
   2d47e:	701a      	strb	r2, [r3, #0]
   2d480:	2308      	movs	r3, #8
   2d482:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2d484:	69bb      	ldr	r3, [r7, #24]
   2d486:	1c5a      	adds	r2, r3, #1
   2d488:	61ba      	str	r2, [r7, #24]
   2d48a:	005b      	lsls	r3, r3, #1
   2d48c:	68fa      	ldr	r2, [r7, #12]
   2d48e:	18d2      	adds	r2, r2, r3
   2d490:	2324      	movs	r3, #36	; 0x24
   2d492:	18fb      	adds	r3, r7, r3
   2d494:	8812      	ldrh	r2, [r2, #0]
   2d496:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2d498:	2324      	movs	r3, #36	; 0x24
   2d49a:	18fb      	adds	r3, r7, r3
   2d49c:	881b      	ldrh	r3, [r3, #0]
   2d49e:	2b00      	cmp	r3, #0
   2d4a0:	d100      	bne.n	2d4a4 <create_name+0x1ec>
   2d4a2:	e0c3      	b.n	2d62c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2d4a4:	2324      	movs	r3, #36	; 0x24
   2d4a6:	18fb      	adds	r3, r7, r3
   2d4a8:	881b      	ldrh	r3, [r3, #0]
   2d4aa:	2b20      	cmp	r3, #32
   2d4ac:	d008      	beq.n	2d4c0 <create_name+0x208>
   2d4ae:	2324      	movs	r3, #36	; 0x24
   2d4b0:	18fb      	adds	r3, r7, r3
   2d4b2:	881b      	ldrh	r3, [r3, #0]
   2d4b4:	2b2e      	cmp	r3, #46	; 0x2e
   2d4b6:	d10c      	bne.n	2d4d2 <create_name+0x21a>
   2d4b8:	69ba      	ldr	r2, [r7, #24]
   2d4ba:	697b      	ldr	r3, [r7, #20]
   2d4bc:	429a      	cmp	r2, r3
   2d4be:	d008      	beq.n	2d4d2 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2d4c0:	2326      	movs	r3, #38	; 0x26
   2d4c2:	18fb      	adds	r3, r7, r3
   2d4c4:	2226      	movs	r2, #38	; 0x26
   2d4c6:	18ba      	adds	r2, r7, r2
   2d4c8:	7812      	ldrb	r2, [r2, #0]
   2d4ca:	2103      	movs	r1, #3
   2d4cc:	430a      	orrs	r2, r1
   2d4ce:	701a      	strb	r2, [r3, #0]
   2d4d0:	e0ab      	b.n	2d62a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2d4d2:	6a3a      	ldr	r2, [r7, #32]
   2d4d4:	69fb      	ldr	r3, [r7, #28]
   2d4d6:	429a      	cmp	r2, r3
   2d4d8:	d203      	bcs.n	2d4e2 <create_name+0x22a>
   2d4da:	69ba      	ldr	r2, [r7, #24]
   2d4dc:	697b      	ldr	r3, [r7, #20]
   2d4de:	429a      	cmp	r2, r3
   2d4e0:	d12a      	bne.n	2d538 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2d4e2:	69fb      	ldr	r3, [r7, #28]
   2d4e4:	2b0b      	cmp	r3, #11
   2d4e6:	d108      	bne.n	2d4fa <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2d4e8:	2326      	movs	r3, #38	; 0x26
   2d4ea:	18fb      	adds	r3, r7, r3
   2d4ec:	2226      	movs	r2, #38	; 0x26
   2d4ee:	18ba      	adds	r2, r7, r2
   2d4f0:	7812      	ldrb	r2, [r2, #0]
   2d4f2:	2103      	movs	r1, #3
   2d4f4:	430a      	orrs	r2, r1
   2d4f6:	701a      	strb	r2, [r3, #0]
   2d4f8:	e0a9      	b.n	2d64e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2d4fa:	69ba      	ldr	r2, [r7, #24]
   2d4fc:	697b      	ldr	r3, [r7, #20]
   2d4fe:	429a      	cmp	r2, r3
   2d500:	d007      	beq.n	2d512 <create_name+0x25a>
   2d502:	2326      	movs	r3, #38	; 0x26
   2d504:	18fb      	adds	r3, r7, r3
   2d506:	2226      	movs	r2, #38	; 0x26
   2d508:	18ba      	adds	r2, r7, r2
   2d50a:	7812      	ldrb	r2, [r2, #0]
   2d50c:	2103      	movs	r1, #3
   2d50e:	430a      	orrs	r2, r1
   2d510:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2d512:	69ba      	ldr	r2, [r7, #24]
   2d514:	697b      	ldr	r3, [r7, #20]
   2d516:	429a      	cmp	r2, r3
   2d518:	d900      	bls.n	2d51c <create_name+0x264>
   2d51a:	e097      	b.n	2d64c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2d51c:	697b      	ldr	r3, [r7, #20]
   2d51e:	61bb      	str	r3, [r7, #24]
   2d520:	2308      	movs	r3, #8
   2d522:	623b      	str	r3, [r7, #32]
   2d524:	230b      	movs	r3, #11
   2d526:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2d528:	2327      	movs	r3, #39	; 0x27
   2d52a:	18fb      	adds	r3, r7, r3
   2d52c:	2227      	movs	r2, #39	; 0x27
   2d52e:	18ba      	adds	r2, r7, r2
   2d530:	7812      	ldrb	r2, [r2, #0]
   2d532:	0092      	lsls	r2, r2, #2
   2d534:	701a      	strb	r2, [r3, #0]
   2d536:	e078      	b.n	2d62a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2d538:	2324      	movs	r3, #36	; 0x24
   2d53a:	18fb      	adds	r3, r7, r3
   2d53c:	881b      	ldrh	r3, [r3, #0]
   2d53e:	2b7f      	cmp	r3, #127	; 0x7f
   2d540:	d920      	bls.n	2d584 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2d542:	2324      	movs	r3, #36	; 0x24
   2d544:	18fc      	adds	r4, r7, r3
   2d546:	2324      	movs	r3, #36	; 0x24
   2d548:	18fb      	adds	r3, r7, r3
   2d54a:	881b      	ldrh	r3, [r3, #0]
   2d54c:	2100      	movs	r1, #0
   2d54e:	0018      	movs	r0, r3
   2d550:	4b37      	ldr	r3, [pc, #220]	; (2d630 <create_name+0x378>)
   2d552:	4798      	blx	r3
   2d554:	0003      	movs	r3, r0
   2d556:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2d558:	2324      	movs	r3, #36	; 0x24
   2d55a:	18fb      	adds	r3, r7, r3
   2d55c:	881b      	ldrh	r3, [r3, #0]
   2d55e:	2b00      	cmp	r3, #0
   2d560:	d008      	beq.n	2d574 <create_name+0x2bc>
   2d562:	2324      	movs	r3, #36	; 0x24
   2d564:	18fb      	adds	r3, r7, r3
   2d566:	881b      	ldrh	r3, [r3, #0]
   2d568:	3b80      	subs	r3, #128	; 0x80
   2d56a:	4a36      	ldr	r2, [pc, #216]	; (2d644 <create_name+0x38c>)
   2d56c:	5cd2      	ldrb	r2, [r2, r3]
   2d56e:	2324      	movs	r3, #36	; 0x24
   2d570:	18fb      	adds	r3, r7, r3
   2d572:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2d574:	2326      	movs	r3, #38	; 0x26
   2d576:	18fb      	adds	r3, r7, r3
   2d578:	2226      	movs	r2, #38	; 0x26
   2d57a:	18ba      	adds	r2, r7, r2
   2d57c:	7812      	ldrb	r2, [r2, #0]
   2d57e:	2102      	movs	r1, #2
   2d580:	430a      	orrs	r2, r1
   2d582:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2d584:	2324      	movs	r3, #36	; 0x24
   2d586:	18fb      	adds	r3, r7, r3
   2d588:	881b      	ldrh	r3, [r3, #0]
   2d58a:	2b00      	cmp	r3, #0
   2d58c:	d009      	beq.n	2d5a2 <create_name+0x2ea>
   2d58e:	2324      	movs	r3, #36	; 0x24
   2d590:	18fb      	adds	r3, r7, r3
   2d592:	881a      	ldrh	r2, [r3, #0]
   2d594:	4b2c      	ldr	r3, [pc, #176]	; (2d648 <create_name+0x390>)
   2d596:	0011      	movs	r1, r2
   2d598:	0018      	movs	r0, r3
   2d59a:	4b27      	ldr	r3, [pc, #156]	; (2d638 <create_name+0x380>)
   2d59c:	4798      	blx	r3
   2d59e:	1e03      	subs	r3, r0, #0
   2d5a0:	d00c      	beq.n	2d5bc <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2d5a2:	2324      	movs	r3, #36	; 0x24
   2d5a4:	18fb      	adds	r3, r7, r3
   2d5a6:	225f      	movs	r2, #95	; 0x5f
   2d5a8:	801a      	strh	r2, [r3, #0]
   2d5aa:	2326      	movs	r3, #38	; 0x26
   2d5ac:	18fb      	adds	r3, r7, r3
   2d5ae:	2226      	movs	r2, #38	; 0x26
   2d5b0:	18ba      	adds	r2, r7, r2
   2d5b2:	7812      	ldrb	r2, [r2, #0]
   2d5b4:	2103      	movs	r1, #3
   2d5b6:	430a      	orrs	r2, r1
   2d5b8:	701a      	strb	r2, [r3, #0]
   2d5ba:	e02b      	b.n	2d614 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2d5bc:	2324      	movs	r3, #36	; 0x24
   2d5be:	18fb      	adds	r3, r7, r3
   2d5c0:	881b      	ldrh	r3, [r3, #0]
   2d5c2:	2b40      	cmp	r3, #64	; 0x40
   2d5c4:	d90d      	bls.n	2d5e2 <create_name+0x32a>
   2d5c6:	2324      	movs	r3, #36	; 0x24
   2d5c8:	18fb      	adds	r3, r7, r3
   2d5ca:	881b      	ldrh	r3, [r3, #0]
   2d5cc:	2b5a      	cmp	r3, #90	; 0x5a
   2d5ce:	d808      	bhi.n	2d5e2 <create_name+0x32a>
					b |= 2;
   2d5d0:	2327      	movs	r3, #39	; 0x27
   2d5d2:	18fb      	adds	r3, r7, r3
   2d5d4:	2227      	movs	r2, #39	; 0x27
   2d5d6:	18ba      	adds	r2, r7, r2
   2d5d8:	7812      	ldrb	r2, [r2, #0]
   2d5da:	2102      	movs	r1, #2
   2d5dc:	430a      	orrs	r2, r1
   2d5de:	701a      	strb	r2, [r3, #0]
   2d5e0:	e018      	b.n	2d614 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2d5e2:	2324      	movs	r3, #36	; 0x24
   2d5e4:	18fb      	adds	r3, r7, r3
   2d5e6:	881b      	ldrh	r3, [r3, #0]
   2d5e8:	2b60      	cmp	r3, #96	; 0x60
   2d5ea:	d913      	bls.n	2d614 <create_name+0x35c>
   2d5ec:	2324      	movs	r3, #36	; 0x24
   2d5ee:	18fb      	adds	r3, r7, r3
   2d5f0:	881b      	ldrh	r3, [r3, #0]
   2d5f2:	2b7a      	cmp	r3, #122	; 0x7a
   2d5f4:	d80e      	bhi.n	2d614 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2d5f6:	2327      	movs	r3, #39	; 0x27
   2d5f8:	18fb      	adds	r3, r7, r3
   2d5fa:	2227      	movs	r2, #39	; 0x27
   2d5fc:	18ba      	adds	r2, r7, r2
   2d5fe:	7812      	ldrb	r2, [r2, #0]
   2d600:	2101      	movs	r1, #1
   2d602:	430a      	orrs	r2, r1
   2d604:	701a      	strb	r2, [r3, #0]
   2d606:	2324      	movs	r3, #36	; 0x24
   2d608:	18fb      	adds	r3, r7, r3
   2d60a:	2224      	movs	r2, #36	; 0x24
   2d60c:	18ba      	adds	r2, r7, r2
   2d60e:	8812      	ldrh	r2, [r2, #0]
   2d610:	3a20      	subs	r2, #32
   2d612:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2d614:	687b      	ldr	r3, [r7, #4]
   2d616:	699a      	ldr	r2, [r3, #24]
   2d618:	6a3b      	ldr	r3, [r7, #32]
   2d61a:	1c59      	adds	r1, r3, #1
   2d61c:	6239      	str	r1, [r7, #32]
   2d61e:	18d3      	adds	r3, r2, r3
   2d620:	2224      	movs	r2, #36	; 0x24
   2d622:	18ba      	adds	r2, r7, r2
   2d624:	8812      	ldrh	r2, [r2, #0]
   2d626:	b2d2      	uxtb	r2, r2
   2d628:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2d62a:	e72b      	b.n	2d484 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2d62c:	46c0      	nop			; (mov r8, r8)
   2d62e:	e00e      	b.n	2d64e <create_name+0x396>
   2d630:	0002e9f1 	.word	0x0002e9f1
   2d634:	0003bcd0 	.word	0x0003bcd0
   2d638:	0002be5b 	.word	0x0002be5b
   2d63c:	7fffffff 	.word	0x7fffffff
   2d640:	0002bde1 	.word	0x0002bde1
   2d644:	0003bd18 	.word	0x0003bd18
   2d648:	0003bcdc 	.word	0x0003bcdc
			if (si > di) break;			/* No extension */
   2d64c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2d64e:	687b      	ldr	r3, [r7, #4]
   2d650:	699b      	ldr	r3, [r3, #24]
   2d652:	781b      	ldrb	r3, [r3, #0]
   2d654:	2be5      	cmp	r3, #229	; 0xe5
   2d656:	d103      	bne.n	2d660 <create_name+0x3a8>
   2d658:	687b      	ldr	r3, [r7, #4]
   2d65a:	699b      	ldr	r3, [r3, #24]
   2d65c:	2205      	movs	r2, #5
   2d65e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2d660:	69fb      	ldr	r3, [r7, #28]
   2d662:	2b08      	cmp	r3, #8
   2d664:	d106      	bne.n	2d674 <create_name+0x3bc>
   2d666:	2327      	movs	r3, #39	; 0x27
   2d668:	18fb      	adds	r3, r7, r3
   2d66a:	2227      	movs	r2, #39	; 0x27
   2d66c:	18ba      	adds	r2, r7, r2
   2d66e:	7812      	ldrb	r2, [r2, #0]
   2d670:	0092      	lsls	r2, r2, #2
   2d672:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2d674:	2327      	movs	r3, #39	; 0x27
   2d676:	18fb      	adds	r3, r7, r3
   2d678:	781b      	ldrb	r3, [r3, #0]
   2d67a:	220c      	movs	r2, #12
   2d67c:	4013      	ands	r3, r2
   2d67e:	2b0c      	cmp	r3, #12
   2d680:	d006      	beq.n	2d690 <create_name+0x3d8>
   2d682:	2327      	movs	r3, #39	; 0x27
   2d684:	18fb      	adds	r3, r7, r3
   2d686:	781b      	ldrb	r3, [r3, #0]
   2d688:	2203      	movs	r2, #3
   2d68a:	4013      	ands	r3, r2
   2d68c:	2b03      	cmp	r3, #3
   2d68e:	d107      	bne.n	2d6a0 <create_name+0x3e8>
		cf |= NS_LFN;
   2d690:	2326      	movs	r3, #38	; 0x26
   2d692:	18fb      	adds	r3, r7, r3
   2d694:	2226      	movs	r2, #38	; 0x26
   2d696:	18ba      	adds	r2, r7, r2
   2d698:	7812      	ldrb	r2, [r2, #0]
   2d69a:	2102      	movs	r1, #2
   2d69c:	430a      	orrs	r2, r1
   2d69e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2d6a0:	2326      	movs	r3, #38	; 0x26
   2d6a2:	18fb      	adds	r3, r7, r3
   2d6a4:	781b      	ldrb	r3, [r3, #0]
   2d6a6:	2202      	movs	r2, #2
   2d6a8:	4013      	ands	r3, r2
   2d6aa:	d11d      	bne.n	2d6e8 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2d6ac:	2327      	movs	r3, #39	; 0x27
   2d6ae:	18fb      	adds	r3, r7, r3
   2d6b0:	781b      	ldrb	r3, [r3, #0]
   2d6b2:	2203      	movs	r2, #3
   2d6b4:	4013      	ands	r3, r2
   2d6b6:	2b01      	cmp	r3, #1
   2d6b8:	d107      	bne.n	2d6ca <create_name+0x412>
   2d6ba:	2326      	movs	r3, #38	; 0x26
   2d6bc:	18fb      	adds	r3, r7, r3
   2d6be:	2226      	movs	r2, #38	; 0x26
   2d6c0:	18ba      	adds	r2, r7, r2
   2d6c2:	7812      	ldrb	r2, [r2, #0]
   2d6c4:	2110      	movs	r1, #16
   2d6c6:	430a      	orrs	r2, r1
   2d6c8:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2d6ca:	2327      	movs	r3, #39	; 0x27
   2d6cc:	18fb      	adds	r3, r7, r3
   2d6ce:	781b      	ldrb	r3, [r3, #0]
   2d6d0:	220c      	movs	r2, #12
   2d6d2:	4013      	ands	r3, r2
   2d6d4:	2b04      	cmp	r3, #4
   2d6d6:	d107      	bne.n	2d6e8 <create_name+0x430>
   2d6d8:	2326      	movs	r3, #38	; 0x26
   2d6da:	18fb      	adds	r3, r7, r3
   2d6dc:	2226      	movs	r2, #38	; 0x26
   2d6de:	18ba      	adds	r2, r7, r2
   2d6e0:	7812      	ldrb	r2, [r2, #0]
   2d6e2:	2108      	movs	r1, #8
   2d6e4:	430a      	orrs	r2, r1
   2d6e6:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2d6e8:	687b      	ldr	r3, [r7, #4]
   2d6ea:	699b      	ldr	r3, [r3, #24]
   2d6ec:	330b      	adds	r3, #11
   2d6ee:	2226      	movs	r2, #38	; 0x26
   2d6f0:	18ba      	adds	r2, r7, r2
   2d6f2:	7812      	ldrb	r2, [r2, #0]
   2d6f4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2d6f6:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2d6f8:	0018      	movs	r0, r3
   2d6fa:	46bd      	mov	sp, r7
   2d6fc:	b00b      	add	sp, #44	; 0x2c
   2d6fe:	bd90      	pop	{r4, r7, pc}

0002d700 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2d700:	b590      	push	{r4, r7, lr}
   2d702:	b085      	sub	sp, #20
   2d704:	af00      	add	r7, sp, #0
   2d706:	6078      	str	r0, [r7, #4]
   2d708:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2d70a:	683b      	ldr	r3, [r7, #0]
   2d70c:	781b      	ldrb	r3, [r3, #0]
   2d70e:	2b2f      	cmp	r3, #47	; 0x2f
   2d710:	d003      	beq.n	2d71a <follow_path+0x1a>
   2d712:	683b      	ldr	r3, [r7, #0]
   2d714:	781b      	ldrb	r3, [r3, #0]
   2d716:	2b5c      	cmp	r3, #92	; 0x5c
   2d718:	d102      	bne.n	2d720 <follow_path+0x20>
		path++;
   2d71a:	683b      	ldr	r3, [r7, #0]
   2d71c:	3301      	adds	r3, #1
   2d71e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2d720:	687b      	ldr	r3, [r7, #4]
   2d722:	2200      	movs	r2, #0
   2d724:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2d726:	683b      	ldr	r3, [r7, #0]
   2d728:	781b      	ldrb	r3, [r3, #0]
   2d72a:	2b1f      	cmp	r3, #31
   2d72c:	d80c      	bhi.n	2d748 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2d72e:	230f      	movs	r3, #15
   2d730:	18fc      	adds	r4, r7, r3
   2d732:	687b      	ldr	r3, [r7, #4]
   2d734:	2100      	movs	r1, #0
   2d736:	0018      	movs	r0, r3
   2d738:	4b3c      	ldr	r3, [pc, #240]	; (2d82c <follow_path+0x12c>)
   2d73a:	4798      	blx	r3
   2d73c:	0003      	movs	r3, r0
   2d73e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2d740:	687b      	ldr	r3, [r7, #4]
   2d742:	2200      	movs	r2, #0
   2d744:	615a      	str	r2, [r3, #20]
   2d746:	e06a      	b.n	2d81e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2d748:	230f      	movs	r3, #15
   2d74a:	18fc      	adds	r4, r7, r3
   2d74c:	003a      	movs	r2, r7
   2d74e:	687b      	ldr	r3, [r7, #4]
   2d750:	0011      	movs	r1, r2
   2d752:	0018      	movs	r0, r3
   2d754:	4b36      	ldr	r3, [pc, #216]	; (2d830 <follow_path+0x130>)
   2d756:	4798      	blx	r3
   2d758:	0003      	movs	r3, r0
   2d75a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d75c:	230f      	movs	r3, #15
   2d75e:	18fb      	adds	r3, r7, r3
   2d760:	781b      	ldrb	r3, [r3, #0]
   2d762:	2b00      	cmp	r3, #0
   2d764:	d154      	bne.n	2d810 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2d766:	230f      	movs	r3, #15
   2d768:	18fc      	adds	r4, r7, r3
   2d76a:	687b      	ldr	r3, [r7, #4]
   2d76c:	0018      	movs	r0, r3
   2d76e:	4b31      	ldr	r3, [pc, #196]	; (2d834 <follow_path+0x134>)
   2d770:	4798      	blx	r3
   2d772:	0003      	movs	r3, r0
   2d774:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2d776:	687b      	ldr	r3, [r7, #4]
   2d778:	699a      	ldr	r2, [r3, #24]
   2d77a:	230e      	movs	r3, #14
   2d77c:	18fb      	adds	r3, r7, r3
   2d77e:	7ad2      	ldrb	r2, [r2, #11]
   2d780:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2d782:	230f      	movs	r3, #15
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	781b      	ldrb	r3, [r3, #0]
   2d788:	2b00      	cmp	r3, #0
   2d78a:	d00f      	beq.n	2d7ac <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d78c:	230f      	movs	r3, #15
   2d78e:	18fb      	adds	r3, r7, r3
   2d790:	781b      	ldrb	r3, [r3, #0]
   2d792:	2b04      	cmp	r3, #4
   2d794:	d13e      	bne.n	2d814 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2d796:	230e      	movs	r3, #14
   2d798:	18fb      	adds	r3, r7, r3
   2d79a:	781b      	ldrb	r3, [r3, #0]
   2d79c:	2204      	movs	r2, #4
   2d79e:	4013      	ands	r3, r2
   2d7a0:	d13a      	bne.n	2d818 <follow_path+0x118>
   2d7a2:	230f      	movs	r3, #15
   2d7a4:	18fb      	adds	r3, r7, r3
   2d7a6:	2205      	movs	r2, #5
   2d7a8:	701a      	strb	r2, [r3, #0]
				}
				break;
   2d7aa:	e035      	b.n	2d818 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d7ac:	230e      	movs	r3, #14
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	781b      	ldrb	r3, [r3, #0]
   2d7b2:	2204      	movs	r2, #4
   2d7b4:	4013      	ands	r3, r2
   2d7b6:	d131      	bne.n	2d81c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2d7b8:	687b      	ldr	r3, [r7, #4]
   2d7ba:	695b      	ldr	r3, [r3, #20]
   2d7bc:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2d7be:	68bb      	ldr	r3, [r7, #8]
   2d7c0:	330b      	adds	r3, #11
   2d7c2:	781b      	ldrb	r3, [r3, #0]
   2d7c4:	001a      	movs	r2, r3
   2d7c6:	2310      	movs	r3, #16
   2d7c8:	4013      	ands	r3, r2
   2d7ca:	d104      	bne.n	2d7d6 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2d7cc:	230f      	movs	r3, #15
   2d7ce:	18fb      	adds	r3, r7, r3
   2d7d0:	2205      	movs	r2, #5
   2d7d2:	701a      	strb	r2, [r3, #0]
   2d7d4:	e023      	b.n	2d81e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2d7d6:	68bb      	ldr	r3, [r7, #8]
   2d7d8:	3315      	adds	r3, #21
   2d7da:	781b      	ldrb	r3, [r3, #0]
   2d7dc:	021b      	lsls	r3, r3, #8
   2d7de:	b21a      	sxth	r2, r3
   2d7e0:	68bb      	ldr	r3, [r7, #8]
   2d7e2:	3314      	adds	r3, #20
   2d7e4:	781b      	ldrb	r3, [r3, #0]
   2d7e6:	b21b      	sxth	r3, r3
   2d7e8:	4313      	orrs	r3, r2
   2d7ea:	b21b      	sxth	r3, r3
   2d7ec:	b29b      	uxth	r3, r3
   2d7ee:	041b      	lsls	r3, r3, #16
   2d7f0:	68ba      	ldr	r2, [r7, #8]
   2d7f2:	321b      	adds	r2, #27
   2d7f4:	7812      	ldrb	r2, [r2, #0]
   2d7f6:	0212      	lsls	r2, r2, #8
   2d7f8:	b211      	sxth	r1, r2
   2d7fa:	68ba      	ldr	r2, [r7, #8]
   2d7fc:	321a      	adds	r2, #26
   2d7fe:	7812      	ldrb	r2, [r2, #0]
   2d800:	b212      	sxth	r2, r2
   2d802:	430a      	orrs	r2, r1
   2d804:	b212      	sxth	r2, r2
   2d806:	b292      	uxth	r2, r2
   2d808:	431a      	orrs	r2, r3
   2d80a:	687b      	ldr	r3, [r7, #4]
   2d80c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2d80e:	e79b      	b.n	2d748 <follow_path+0x48>
			if (res != FR_OK) break;
   2d810:	46c0      	nop			; (mov r8, r8)
   2d812:	e004      	b.n	2d81e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d814:	46c0      	nop			; (mov r8, r8)
   2d816:	e002      	b.n	2d81e <follow_path+0x11e>
				break;
   2d818:	46c0      	nop			; (mov r8, r8)
   2d81a:	e000      	b.n	2d81e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d81c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d81e:	230f      	movs	r3, #15
   2d820:	18fb      	adds	r3, r7, r3
   2d822:	781b      	ldrb	r3, [r3, #0]
}
   2d824:	0018      	movs	r0, r3
   2d826:	46bd      	mov	sp, r7
   2d828:	b005      	add	sp, #20
   2d82a:	bd90      	pop	{r4, r7, pc}
   2d82c:	0002c6d1 	.word	0x0002c6d1
   2d830:	0002d2b9 	.word	0x0002d2b9
   2d834:	0002cd55 	.word	0x0002cd55

0002d838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d838:	b590      	push	{r4, r7, lr}
   2d83a:	b083      	sub	sp, #12
   2d83c:	af00      	add	r7, sp, #0
   2d83e:	6078      	str	r0, [r7, #4]
   2d840:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d842:	687b      	ldr	r3, [r7, #4]
   2d844:	7858      	ldrb	r0, [r3, #1]
   2d846:	687b      	ldr	r3, [r7, #4]
   2d848:	3330      	adds	r3, #48	; 0x30
   2d84a:	0019      	movs	r1, r3
   2d84c:	683a      	ldr	r2, [r7, #0]
   2d84e:	2301      	movs	r3, #1
   2d850:	4c2a      	ldr	r4, [pc, #168]	; (2d8fc <check_fs+0xc4>)
   2d852:	47a0      	blx	r4
   2d854:	1e03      	subs	r3, r0, #0
   2d856:	d001      	beq.n	2d85c <check_fs+0x24>
		return 3;
   2d858:	2303      	movs	r3, #3
   2d85a:	e04b      	b.n	2d8f4 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d85c:	687b      	ldr	r3, [r7, #4]
   2d85e:	4a28      	ldr	r2, [pc, #160]	; (2d900 <check_fs+0xc8>)
   2d860:	4694      	mov	ip, r2
   2d862:	4463      	add	r3, ip
   2d864:	3301      	adds	r3, #1
   2d866:	781b      	ldrb	r3, [r3, #0]
   2d868:	021b      	lsls	r3, r3, #8
   2d86a:	b21a      	sxth	r2, r3
   2d86c:	687b      	ldr	r3, [r7, #4]
   2d86e:	4924      	ldr	r1, [pc, #144]	; (2d900 <check_fs+0xc8>)
   2d870:	5c5b      	ldrb	r3, [r3, r1]
   2d872:	b21b      	sxth	r3, r3
   2d874:	4313      	orrs	r3, r2
   2d876:	b21b      	sxth	r3, r3
   2d878:	4a22      	ldr	r2, [pc, #136]	; (2d904 <check_fs+0xcc>)
   2d87a:	4293      	cmp	r3, r2
   2d87c:	d001      	beq.n	2d882 <check_fs+0x4a>
		return 2;
   2d87e:	2302      	movs	r3, #2
   2d880:	e038      	b.n	2d8f4 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d882:	687b      	ldr	r3, [r7, #4]
   2d884:	3366      	adds	r3, #102	; 0x66
   2d886:	3303      	adds	r3, #3
   2d888:	781b      	ldrb	r3, [r3, #0]
   2d88a:	061a      	lsls	r2, r3, #24
   2d88c:	687b      	ldr	r3, [r7, #4]
   2d88e:	3366      	adds	r3, #102	; 0x66
   2d890:	3302      	adds	r3, #2
   2d892:	781b      	ldrb	r3, [r3, #0]
   2d894:	041b      	lsls	r3, r3, #16
   2d896:	4313      	orrs	r3, r2
   2d898:	687a      	ldr	r2, [r7, #4]
   2d89a:	3266      	adds	r2, #102	; 0x66
   2d89c:	3201      	adds	r2, #1
   2d89e:	7812      	ldrb	r2, [r2, #0]
   2d8a0:	0212      	lsls	r2, r2, #8
   2d8a2:	4313      	orrs	r3, r2
   2d8a4:	687a      	ldr	r2, [r7, #4]
   2d8a6:	2166      	movs	r1, #102	; 0x66
   2d8a8:	5c52      	ldrb	r2, [r2, r1]
   2d8aa:	4313      	orrs	r3, r2
   2d8ac:	021b      	lsls	r3, r3, #8
   2d8ae:	0a1b      	lsrs	r3, r3, #8
   2d8b0:	4a15      	ldr	r2, [pc, #84]	; (2d908 <check_fs+0xd0>)
   2d8b2:	4293      	cmp	r3, r2
   2d8b4:	d101      	bne.n	2d8ba <check_fs+0x82>
		return 0;
   2d8b6:	2300      	movs	r3, #0
   2d8b8:	e01c      	b.n	2d8f4 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d8ba:	687b      	ldr	r3, [r7, #4]
   2d8bc:	3382      	adds	r3, #130	; 0x82
   2d8be:	3303      	adds	r3, #3
   2d8c0:	781b      	ldrb	r3, [r3, #0]
   2d8c2:	061a      	lsls	r2, r3, #24
   2d8c4:	687b      	ldr	r3, [r7, #4]
   2d8c6:	3382      	adds	r3, #130	; 0x82
   2d8c8:	3302      	adds	r3, #2
   2d8ca:	781b      	ldrb	r3, [r3, #0]
   2d8cc:	041b      	lsls	r3, r3, #16
   2d8ce:	4313      	orrs	r3, r2
   2d8d0:	687a      	ldr	r2, [r7, #4]
   2d8d2:	3282      	adds	r2, #130	; 0x82
   2d8d4:	3201      	adds	r2, #1
   2d8d6:	7812      	ldrb	r2, [r2, #0]
   2d8d8:	0212      	lsls	r2, r2, #8
   2d8da:	4313      	orrs	r3, r2
   2d8dc:	687a      	ldr	r2, [r7, #4]
   2d8de:	2182      	movs	r1, #130	; 0x82
   2d8e0:	5c52      	ldrb	r2, [r2, r1]
   2d8e2:	4313      	orrs	r3, r2
   2d8e4:	021b      	lsls	r3, r3, #8
   2d8e6:	0a1b      	lsrs	r3, r3, #8
   2d8e8:	4a07      	ldr	r2, [pc, #28]	; (2d908 <check_fs+0xd0>)
   2d8ea:	4293      	cmp	r3, r2
   2d8ec:	d101      	bne.n	2d8f2 <check_fs+0xba>
		return 0;
   2d8ee:	2300      	movs	r3, #0
   2d8f0:	e000      	b.n	2d8f4 <check_fs+0xbc>

	return 1;
   2d8f2:	2301      	movs	r3, #1
}
   2d8f4:	0018      	movs	r0, r3
   2d8f6:	46bd      	mov	sp, r7
   2d8f8:	b003      	add	sp, #12
   2d8fa:	bd90      	pop	{r4, r7, pc}
   2d8fc:	0002baa1 	.word	0x0002baa1
   2d900:	0000022e 	.word	0x0000022e
   2d904:	ffffaa55 	.word	0xffffaa55
   2d908:	00544146 	.word	0x00544146

0002d90c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d90c:	b590      	push	{r4, r7, lr}
   2d90e:	b093      	sub	sp, #76	; 0x4c
   2d910:	af00      	add	r7, sp, #0
   2d912:	60f8      	str	r0, [r7, #12]
   2d914:	60b9      	str	r1, [r7, #8]
   2d916:	1dfb      	adds	r3, r7, #7
   2d918:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d91a:	68fb      	ldr	r3, [r7, #12]
   2d91c:	681b      	ldr	r3, [r3, #0]
   2d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d922:	781b      	ldrb	r3, [r3, #0]
   2d924:	3b30      	subs	r3, #48	; 0x30
   2d926:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d92a:	2b09      	cmp	r3, #9
   2d92c:	d80b      	bhi.n	2d946 <chk_mounted+0x3a>
   2d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d930:	3301      	adds	r3, #1
   2d932:	781b      	ldrb	r3, [r3, #0]
   2d934:	2b3a      	cmp	r3, #58	; 0x3a
   2d936:	d106      	bne.n	2d946 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d93a:	3302      	adds	r3, #2
   2d93c:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d93e:	68fb      	ldr	r3, [r7, #12]
   2d940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d942:	601a      	str	r2, [r3, #0]
   2d944:	e001      	b.n	2d94a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d946:	2300      	movs	r3, #0
   2d948:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d94c:	2b07      	cmp	r3, #7
   2d94e:	d901      	bls.n	2d954 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d950:	230b      	movs	r3, #11
   2d952:	e2af      	b.n	2deb4 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d954:	4bc5      	ldr	r3, [pc, #788]	; (2dc6c <chk_mounted+0x360>)
   2d956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d958:	0092      	lsls	r2, r2, #2
   2d95a:	58d3      	ldr	r3, [r2, r3]
   2d95c:	62bb      	str	r3, [r7, #40]	; 0x28
   2d95e:	68bb      	ldr	r3, [r7, #8]
   2d960:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d962:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d966:	2b00      	cmp	r3, #0
   2d968:	d101      	bne.n	2d96e <chk_mounted+0x62>
   2d96a:	230c      	movs	r3, #12
   2d96c:	e2a2      	b.n	2deb4 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d970:	781b      	ldrb	r3, [r3, #0]
   2d972:	2b00      	cmp	r3, #0
   2d974:	d01c      	beq.n	2d9b0 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d978:	785b      	ldrb	r3, [r3, #1]
   2d97a:	2227      	movs	r2, #39	; 0x27
   2d97c:	18bc      	adds	r4, r7, r2
   2d97e:	0018      	movs	r0, r3
   2d980:	4bbb      	ldr	r3, [pc, #748]	; (2dc70 <chk_mounted+0x364>)
   2d982:	4798      	blx	r3
   2d984:	0003      	movs	r3, r0
   2d986:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d988:	2327      	movs	r3, #39	; 0x27
   2d98a:	18fb      	adds	r3, r7, r3
   2d98c:	781b      	ldrb	r3, [r3, #0]
   2d98e:	2201      	movs	r2, #1
   2d990:	4013      	ands	r3, r2
   2d992:	d10d      	bne.n	2d9b0 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d994:	1dfb      	adds	r3, r7, #7
   2d996:	781b      	ldrb	r3, [r3, #0]
   2d998:	2b00      	cmp	r3, #0
   2d99a:	d007      	beq.n	2d9ac <chk_mounted+0xa0>
   2d99c:	2327      	movs	r3, #39	; 0x27
   2d99e:	18fb      	adds	r3, r7, r3
   2d9a0:	781b      	ldrb	r3, [r3, #0]
   2d9a2:	2204      	movs	r2, #4
   2d9a4:	4013      	ands	r3, r2
   2d9a6:	d001      	beq.n	2d9ac <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d9a8:	230a      	movs	r3, #10
   2d9aa:	e283      	b.n	2deb4 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d9ac:	2300      	movs	r3, #0
   2d9ae:	e281      	b.n	2deb4 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9b2:	2200      	movs	r2, #0
   2d9b4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d9b8:	b2da      	uxtb	r2, r3
   2d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9bc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9c0:	785b      	ldrb	r3, [r3, #1]
   2d9c2:	2227      	movs	r2, #39	; 0x27
   2d9c4:	18bc      	adds	r4, r7, r2
   2d9c6:	0018      	movs	r0, r3
   2d9c8:	4baa      	ldr	r3, [pc, #680]	; (2dc74 <chk_mounted+0x368>)
   2d9ca:	4798      	blx	r3
   2d9cc:	0003      	movs	r3, r0
   2d9ce:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d9d0:	2327      	movs	r3, #39	; 0x27
   2d9d2:	18fb      	adds	r3, r7, r3
   2d9d4:	781b      	ldrb	r3, [r3, #0]
   2d9d6:	2201      	movs	r2, #1
   2d9d8:	4013      	ands	r3, r2
   2d9da:	d001      	beq.n	2d9e0 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d9dc:	2303      	movs	r3, #3
   2d9de:	e269      	b.n	2deb4 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d9e0:	1dfb      	adds	r3, r7, #7
   2d9e2:	781b      	ldrb	r3, [r3, #0]
   2d9e4:	2b00      	cmp	r3, #0
   2d9e6:	d007      	beq.n	2d9f8 <chk_mounted+0xec>
   2d9e8:	2327      	movs	r3, #39	; 0x27
   2d9ea:	18fb      	adds	r3, r7, r3
   2d9ec:	781b      	ldrb	r3, [r3, #0]
   2d9ee:	2204      	movs	r2, #4
   2d9f0:	4013      	ands	r3, r2
   2d9f2:	d001      	beq.n	2d9f8 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d9f4:	230a      	movs	r3, #10
   2d9f6:	e25d      	b.n	2deb4 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d9f8:	2300      	movs	r3, #0
   2d9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d9fc:	2347      	movs	r3, #71	; 0x47
   2d9fe:	18fc      	adds	r4, r7, r3
   2da00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da04:	0011      	movs	r1, r2
   2da06:	0018      	movs	r0, r3
   2da08:	4b9b      	ldr	r3, [pc, #620]	; (2dc78 <chk_mounted+0x36c>)
   2da0a:	4798      	blx	r3
   2da0c:	0003      	movs	r3, r0
   2da0e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2da10:	2347      	movs	r3, #71	; 0x47
   2da12:	18fb      	adds	r3, r7, r3
   2da14:	781b      	ldrb	r3, [r3, #0]
   2da16:	2b01      	cmp	r3, #1
   2da18:	d13b      	bne.n	2da92 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2da1a:	2346      	movs	r3, #70	; 0x46
   2da1c:	18fb      	adds	r3, r7, r3
   2da1e:	2200      	movs	r2, #0
   2da20:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2da22:	2346      	movs	r3, #70	; 0x46
   2da24:	18fb      	adds	r3, r7, r3
   2da26:	781b      	ldrb	r3, [r3, #0]
   2da28:	2b00      	cmp	r3, #0
   2da2a:	d006      	beq.n	2da3a <chk_mounted+0x12e>
   2da2c:	2346      	movs	r3, #70	; 0x46
   2da2e:	18fb      	adds	r3, r7, r3
   2da30:	781a      	ldrb	r2, [r3, #0]
   2da32:	2346      	movs	r3, #70	; 0x46
   2da34:	18fb      	adds	r3, r7, r3
   2da36:	3a01      	subs	r2, #1
   2da38:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2da3a:	2346      	movs	r3, #70	; 0x46
   2da3c:	18fb      	adds	r3, r7, r3
   2da3e:	781b      	ldrb	r3, [r3, #0]
   2da40:	011b      	lsls	r3, r3, #4
   2da42:	33bf      	adds	r3, #191	; 0xbf
   2da44:	33ff      	adds	r3, #255	; 0xff
   2da46:	3330      	adds	r3, #48	; 0x30
   2da48:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da4a:	18d3      	adds	r3, r2, r3
   2da4c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2da4e:	6a3b      	ldr	r3, [r7, #32]
   2da50:	3304      	adds	r3, #4
   2da52:	781b      	ldrb	r3, [r3, #0]
   2da54:	2b00      	cmp	r3, #0
   2da56:	d01c      	beq.n	2da92 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2da58:	6a3b      	ldr	r3, [r7, #32]
   2da5a:	330b      	adds	r3, #11
   2da5c:	781b      	ldrb	r3, [r3, #0]
   2da5e:	061a      	lsls	r2, r3, #24
   2da60:	6a3b      	ldr	r3, [r7, #32]
   2da62:	330a      	adds	r3, #10
   2da64:	781b      	ldrb	r3, [r3, #0]
   2da66:	041b      	lsls	r3, r3, #16
   2da68:	4313      	orrs	r3, r2
   2da6a:	6a3a      	ldr	r2, [r7, #32]
   2da6c:	3209      	adds	r2, #9
   2da6e:	7812      	ldrb	r2, [r2, #0]
   2da70:	0212      	lsls	r2, r2, #8
   2da72:	4313      	orrs	r3, r2
   2da74:	6a3a      	ldr	r2, [r7, #32]
   2da76:	3208      	adds	r2, #8
   2da78:	7812      	ldrb	r2, [r2, #0]
   2da7a:	4313      	orrs	r3, r2
   2da7c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2da7e:	2347      	movs	r3, #71	; 0x47
   2da80:	18fc      	adds	r4, r7, r3
   2da82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da86:	0011      	movs	r1, r2
   2da88:	0018      	movs	r0, r3
   2da8a:	4b7b      	ldr	r3, [pc, #492]	; (2dc78 <chk_mounted+0x36c>)
   2da8c:	4798      	blx	r3
   2da8e:	0003      	movs	r3, r0
   2da90:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2da92:	2347      	movs	r3, #71	; 0x47
   2da94:	18fb      	adds	r3, r7, r3
   2da96:	781b      	ldrb	r3, [r3, #0]
   2da98:	2b03      	cmp	r3, #3
   2da9a:	d101      	bne.n	2daa0 <chk_mounted+0x194>
   2da9c:	2301      	movs	r3, #1
   2da9e:	e209      	b.n	2deb4 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2daa0:	2347      	movs	r3, #71	; 0x47
   2daa2:	18fb      	adds	r3, r7, r3
   2daa4:	781b      	ldrb	r3, [r3, #0]
   2daa6:	2b00      	cmp	r3, #0
   2daa8:	d001      	beq.n	2daae <chk_mounted+0x1a2>
   2daaa:	230d      	movs	r3, #13
   2daac:	e202      	b.n	2deb4 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dab0:	223c      	movs	r2, #60	; 0x3c
   2dab2:	5c9b      	ldrb	r3, [r3, r2]
   2dab4:	021b      	lsls	r3, r3, #8
   2dab6:	b21a      	sxth	r2, r3
   2dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daba:	213b      	movs	r1, #59	; 0x3b
   2dabc:	5c5b      	ldrb	r3, [r3, r1]
   2dabe:	b21b      	sxth	r3, r3
   2dac0:	4313      	orrs	r3, r2
   2dac2:	b21a      	sxth	r2, r3
   2dac4:	2380      	movs	r3, #128	; 0x80
   2dac6:	009b      	lsls	r3, r3, #2
   2dac8:	429a      	cmp	r2, r3
   2daca:	d001      	beq.n	2dad0 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2dacc:	230d      	movs	r3, #13
   2dace:	e1f1      	b.n	2deb4 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dad2:	2247      	movs	r2, #71	; 0x47
   2dad4:	5c9b      	ldrb	r3, [r3, r2]
   2dad6:	021b      	lsls	r3, r3, #8
   2dad8:	b21a      	sxth	r2, r3
   2dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dadc:	2146      	movs	r1, #70	; 0x46
   2dade:	5c5b      	ldrb	r3, [r3, r1]
   2dae0:	b21b      	sxth	r3, r3
   2dae2:	4313      	orrs	r3, r2
   2dae4:	b21b      	sxth	r3, r3
   2dae6:	b29b      	uxth	r3, r3
   2dae8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2daea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2daec:	2b00      	cmp	r3, #0
   2daee:	d112      	bne.n	2db16 <chk_mounted+0x20a>
   2daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daf2:	2257      	movs	r2, #87	; 0x57
   2daf4:	5c9b      	ldrb	r3, [r3, r2]
   2daf6:	061a      	lsls	r2, r3, #24
   2daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dafa:	2156      	movs	r1, #86	; 0x56
   2dafc:	5c5b      	ldrb	r3, [r3, r1]
   2dafe:	041b      	lsls	r3, r3, #16
   2db00:	4313      	orrs	r3, r2
   2db02:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db04:	2155      	movs	r1, #85	; 0x55
   2db06:	5c52      	ldrb	r2, [r2, r1]
   2db08:	0212      	lsls	r2, r2, #8
   2db0a:	4313      	orrs	r3, r2
   2db0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db0e:	2154      	movs	r1, #84	; 0x54
   2db10:	5c52      	ldrb	r2, [r2, r1]
   2db12:	4313      	orrs	r3, r2
   2db14:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db18:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2db1a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2db1c:	231f      	movs	r3, #31
   2db1e:	18fb      	adds	r3, r7, r3
   2db20:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db22:	2140      	movs	r1, #64	; 0x40
   2db24:	5c52      	ldrb	r2, [r2, r1]
   2db26:	701a      	strb	r2, [r3, #0]
   2db28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db2a:	221f      	movs	r2, #31
   2db2c:	18ba      	adds	r2, r7, r2
   2db2e:	7812      	ldrb	r2, [r2, #0]
   2db30:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2db32:	231f      	movs	r3, #31
   2db34:	18fb      	adds	r3, r7, r3
   2db36:	781b      	ldrb	r3, [r3, #0]
   2db38:	2b01      	cmp	r3, #1
   2db3a:	d006      	beq.n	2db4a <chk_mounted+0x23e>
   2db3c:	231f      	movs	r3, #31
   2db3e:	18fb      	adds	r3, r7, r3
   2db40:	781b      	ldrb	r3, [r3, #0]
   2db42:	2b02      	cmp	r3, #2
   2db44:	d001      	beq.n	2db4a <chk_mounted+0x23e>
   2db46:	230d      	movs	r3, #13
   2db48:	e1b4      	b.n	2deb4 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2db4a:	231f      	movs	r3, #31
   2db4c:	18fb      	adds	r3, r7, r3
   2db4e:	781a      	ldrb	r2, [r3, #0]
   2db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2db52:	4353      	muls	r3, r2
   2db54:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2db56:	231f      	movs	r3, #31
   2db58:	18fb      	adds	r3, r7, r3
   2db5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db5c:	213d      	movs	r1, #61	; 0x3d
   2db5e:	5c52      	ldrb	r2, [r2, r1]
   2db60:	701a      	strb	r2, [r3, #0]
   2db62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db64:	221f      	movs	r2, #31
   2db66:	18ba      	adds	r2, r7, r2
   2db68:	7812      	ldrb	r2, [r2, #0]
   2db6a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2db6c:	231f      	movs	r3, #31
   2db6e:	18fb      	adds	r3, r7, r3
   2db70:	781b      	ldrb	r3, [r3, #0]
   2db72:	2b00      	cmp	r3, #0
   2db74:	d008      	beq.n	2db88 <chk_mounted+0x27c>
   2db76:	231f      	movs	r3, #31
   2db78:	18fb      	adds	r3, r7, r3
   2db7a:	781b      	ldrb	r3, [r3, #0]
   2db7c:	221f      	movs	r2, #31
   2db7e:	18ba      	adds	r2, r7, r2
   2db80:	7812      	ldrb	r2, [r2, #0]
   2db82:	3a01      	subs	r2, #1
   2db84:	4013      	ands	r3, r2
   2db86:	d001      	beq.n	2db8c <chk_mounted+0x280>
   2db88:	230d      	movs	r3, #13
   2db8a:	e193      	b.n	2deb4 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db8e:	2242      	movs	r2, #66	; 0x42
   2db90:	5c9b      	ldrb	r3, [r3, r2]
   2db92:	021b      	lsls	r3, r3, #8
   2db94:	b21a      	sxth	r2, r3
   2db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db98:	2141      	movs	r1, #65	; 0x41
   2db9a:	5c5b      	ldrb	r3, [r3, r1]
   2db9c:	b21b      	sxth	r3, r3
   2db9e:	4313      	orrs	r3, r2
   2dba0:	b21b      	sxth	r3, r3
   2dba2:	b29a      	uxth	r2, r3
   2dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dba6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbaa:	891b      	ldrh	r3, [r3, #8]
   2dbac:	220f      	movs	r2, #15
   2dbae:	4013      	ands	r3, r2
   2dbb0:	b29b      	uxth	r3, r3
   2dbb2:	2b00      	cmp	r3, #0
   2dbb4:	d001      	beq.n	2dbba <chk_mounted+0x2ae>
   2dbb6:	230d      	movs	r3, #13
   2dbb8:	e17c      	b.n	2deb4 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbbc:	2244      	movs	r2, #68	; 0x44
   2dbbe:	5c9b      	ldrb	r3, [r3, r2]
   2dbc0:	021b      	lsls	r3, r3, #8
   2dbc2:	b21a      	sxth	r2, r3
   2dbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbc6:	2143      	movs	r1, #67	; 0x43
   2dbc8:	5c5b      	ldrb	r3, [r3, r1]
   2dbca:	b21b      	sxth	r3, r3
   2dbcc:	4313      	orrs	r3, r2
   2dbce:	b21b      	sxth	r3, r3
   2dbd0:	b29b      	uxth	r3, r3
   2dbd2:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2dbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dbd6:	2b00      	cmp	r3, #0
   2dbd8:	d112      	bne.n	2dc00 <chk_mounted+0x2f4>
   2dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbdc:	2253      	movs	r2, #83	; 0x53
   2dbde:	5c9b      	ldrb	r3, [r3, r2]
   2dbe0:	061a      	lsls	r2, r3, #24
   2dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbe4:	2152      	movs	r1, #82	; 0x52
   2dbe6:	5c5b      	ldrb	r3, [r3, r1]
   2dbe8:	041b      	lsls	r3, r3, #16
   2dbea:	4313      	orrs	r3, r2
   2dbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dbee:	2151      	movs	r1, #81	; 0x51
   2dbf0:	5c52      	ldrb	r2, [r2, r1]
   2dbf2:	0212      	lsls	r2, r2, #8
   2dbf4:	4313      	orrs	r3, r2
   2dbf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dbf8:	2150      	movs	r1, #80	; 0x50
   2dbfa:	5c52      	ldrb	r2, [r2, r1]
   2dbfc:	4313      	orrs	r3, r2
   2dbfe:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc02:	223f      	movs	r2, #63	; 0x3f
   2dc04:	5c9b      	ldrb	r3, [r3, r2]
   2dc06:	021b      	lsls	r3, r3, #8
   2dc08:	b21a      	sxth	r2, r3
   2dc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc0c:	213e      	movs	r1, #62	; 0x3e
   2dc0e:	5c5b      	ldrb	r3, [r3, r1]
   2dc10:	b21b      	sxth	r3, r3
   2dc12:	4313      	orrs	r3, r2
   2dc14:	b21a      	sxth	r2, r3
   2dc16:	231c      	movs	r3, #28
   2dc18:	18fb      	adds	r3, r7, r3
   2dc1a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2dc1c:	231c      	movs	r3, #28
   2dc1e:	18fb      	adds	r3, r7, r3
   2dc20:	881b      	ldrh	r3, [r3, #0]
   2dc22:	2b00      	cmp	r3, #0
   2dc24:	d101      	bne.n	2dc2a <chk_mounted+0x31e>
   2dc26:	230d      	movs	r3, #13
   2dc28:	e144      	b.n	2deb4 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2dc2a:	231c      	movs	r3, #28
   2dc2c:	18fb      	adds	r3, r7, r3
   2dc2e:	881a      	ldrh	r2, [r3, #0]
   2dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dc32:	18d3      	adds	r3, r2, r3
   2dc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dc36:	8912      	ldrh	r2, [r2, #8]
   2dc38:	0912      	lsrs	r2, r2, #4
   2dc3a:	b292      	uxth	r2, r2
   2dc3c:	189b      	adds	r3, r3, r2
   2dc3e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2dc40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2dc42:	69bb      	ldr	r3, [r7, #24]
   2dc44:	429a      	cmp	r2, r3
   2dc46:	d201      	bcs.n	2dc4c <chk_mounted+0x340>
   2dc48:	230d      	movs	r3, #13
   2dc4a:	e133      	b.n	2deb4 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2dc4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2dc4e:	69bb      	ldr	r3, [r7, #24]
   2dc50:	1ad2      	subs	r2, r2, r3
   2dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc54:	789b      	ldrb	r3, [r3, #2]
   2dc56:	0019      	movs	r1, r3
   2dc58:	4b08      	ldr	r3, [pc, #32]	; (2dc7c <chk_mounted+0x370>)
   2dc5a:	0010      	movs	r0, r2
   2dc5c:	4798      	blx	r3
   2dc5e:	0003      	movs	r3, r0
   2dc60:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2dc62:	697b      	ldr	r3, [r7, #20]
   2dc64:	2b00      	cmp	r3, #0
   2dc66:	d10b      	bne.n	2dc80 <chk_mounted+0x374>
   2dc68:	230d      	movs	r3, #13
   2dc6a:	e123      	b.n	2deb4 <chk_mounted+0x5a8>
   2dc6c:	20004308 	.word	0x20004308
   2dc70:	0002ba69 	.word	0x0002ba69
   2dc74:	0002b9e5 	.word	0x0002b9e5
   2dc78:	0002d839 	.word	0x0002d839
   2dc7c:	00033035 	.word	0x00033035
	fmt = FS_FAT12;
   2dc80:	2347      	movs	r3, #71	; 0x47
   2dc82:	18fb      	adds	r3, r7, r3
   2dc84:	2201      	movs	r2, #1
   2dc86:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2dc88:	697b      	ldr	r3, [r7, #20]
   2dc8a:	4a8c      	ldr	r2, [pc, #560]	; (2debc <chk_mounted+0x5b0>)
   2dc8c:	4293      	cmp	r3, r2
   2dc8e:	d903      	bls.n	2dc98 <chk_mounted+0x38c>
   2dc90:	2347      	movs	r3, #71	; 0x47
   2dc92:	18fb      	adds	r3, r7, r3
   2dc94:	2202      	movs	r2, #2
   2dc96:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2dc98:	697b      	ldr	r3, [r7, #20]
   2dc9a:	4a89      	ldr	r2, [pc, #548]	; (2dec0 <chk_mounted+0x5b4>)
   2dc9c:	4293      	cmp	r3, r2
   2dc9e:	d903      	bls.n	2dca8 <chk_mounted+0x39c>
   2dca0:	2347      	movs	r3, #71	; 0x47
   2dca2:	18fb      	adds	r3, r7, r3
   2dca4:	2203      	movs	r2, #3
   2dca6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2dca8:	697b      	ldr	r3, [r7, #20]
   2dcaa:	1c9a      	adds	r2, r3, #2
   2dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcae:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2dcb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dcb2:	69bb      	ldr	r3, [r7, #24]
   2dcb4:	18d2      	adds	r2, r2, r3
   2dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcb8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2dcba:	231c      	movs	r3, #28
   2dcbc:	18fb      	adds	r3, r7, r3
   2dcbe:	881a      	ldrh	r2, [r3, #0]
   2dcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dcc2:	18d2      	adds	r2, r2, r3
   2dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcc6:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2dcc8:	2347      	movs	r3, #71	; 0x47
   2dcca:	18fb      	adds	r3, r7, r3
   2dccc:	781b      	ldrb	r3, [r3, #0]
   2dcce:	2b03      	cmp	r3, #3
   2dcd0:	d11e      	bne.n	2dd10 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dcd4:	891b      	ldrh	r3, [r3, #8]
   2dcd6:	2b00      	cmp	r3, #0
   2dcd8:	d001      	beq.n	2dcde <chk_mounted+0x3d2>
   2dcda:	230d      	movs	r3, #13
   2dcdc:	e0ea      	b.n	2deb4 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dce0:	225f      	movs	r2, #95	; 0x5f
   2dce2:	5c9b      	ldrb	r3, [r3, r2]
   2dce4:	061a      	lsls	r2, r3, #24
   2dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dce8:	215e      	movs	r1, #94	; 0x5e
   2dcea:	5c5b      	ldrb	r3, [r3, r1]
   2dcec:	041b      	lsls	r3, r3, #16
   2dcee:	4313      	orrs	r3, r2
   2dcf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dcf2:	215d      	movs	r1, #93	; 0x5d
   2dcf4:	5c52      	ldrb	r2, [r2, r1]
   2dcf6:	0212      	lsls	r2, r2, #8
   2dcf8:	4313      	orrs	r3, r2
   2dcfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dcfc:	215c      	movs	r1, #92	; 0x5c
   2dcfe:	5c52      	ldrb	r2, [r2, r1]
   2dd00:	431a      	orrs	r2, r3
   2dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd04:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2dd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd08:	699b      	ldr	r3, [r3, #24]
   2dd0a:	009b      	lsls	r3, r3, #2
   2dd0c:	633b      	str	r3, [r7, #48]	; 0x30
   2dd0e:	e020      	b.n	2dd52 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd12:	891b      	ldrh	r3, [r3, #8]
   2dd14:	2b00      	cmp	r3, #0
   2dd16:	d101      	bne.n	2dd1c <chk_mounted+0x410>
   2dd18:	230d      	movs	r3, #13
   2dd1a:	e0cb      	b.n	2deb4 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd1e:	6a1a      	ldr	r2, [r3, #32]
   2dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dd22:	18d2      	adds	r2, r2, r3
   2dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd26:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2dd28:	2347      	movs	r3, #71	; 0x47
   2dd2a:	18fb      	adds	r3, r7, r3
   2dd2c:	781b      	ldrb	r3, [r3, #0]
   2dd2e:	2b02      	cmp	r3, #2
   2dd30:	d103      	bne.n	2dd3a <chk_mounted+0x42e>
   2dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd34:	699b      	ldr	r3, [r3, #24]
   2dd36:	005b      	lsls	r3, r3, #1
   2dd38:	e00a      	b.n	2dd50 <chk_mounted+0x444>
   2dd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd3c:	699a      	ldr	r2, [r3, #24]
   2dd3e:	0013      	movs	r3, r2
   2dd40:	005b      	lsls	r3, r3, #1
   2dd42:	189b      	adds	r3, r3, r2
   2dd44:	085a      	lsrs	r2, r3, #1
   2dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd48:	699b      	ldr	r3, [r3, #24]
   2dd4a:	2101      	movs	r1, #1
   2dd4c:	400b      	ands	r3, r1
   2dd4e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2dd50:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2dd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd54:	69da      	ldr	r2, [r3, #28]
   2dd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd58:	495a      	ldr	r1, [pc, #360]	; (2dec4 <chk_mounted+0x5b8>)
   2dd5a:	468c      	mov	ip, r1
   2dd5c:	4463      	add	r3, ip
   2dd5e:	0a5b      	lsrs	r3, r3, #9
   2dd60:	429a      	cmp	r2, r3
   2dd62:	d201      	bcs.n	2dd68 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2dd64:	230d      	movs	r3, #13
   2dd66:	e0a5      	b.n	2deb4 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd6a:	2201      	movs	r2, #1
   2dd6c:	4252      	negs	r2, r2
   2dd6e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd72:	2200      	movs	r2, #0
   2dd74:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2dd76:	2347      	movs	r3, #71	; 0x47
   2dd78:	18fb      	adds	r3, r7, r3
   2dd7a:	781b      	ldrb	r3, [r3, #0]
   2dd7c:	2b03      	cmp	r3, #3
   2dd7e:	d000      	beq.n	2dd82 <chk_mounted+0x476>
   2dd80:	e082      	b.n	2de88 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd84:	2200      	movs	r2, #0
   2dd86:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2dd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd8a:	2261      	movs	r2, #97	; 0x61
   2dd8c:	5c9b      	ldrb	r3, [r3, r2]
   2dd8e:	021b      	lsls	r3, r3, #8
   2dd90:	b21a      	sxth	r2, r3
   2dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dd94:	2160      	movs	r1, #96	; 0x60
   2dd96:	5c5b      	ldrb	r3, [r3, r1]
   2dd98:	b21b      	sxth	r3, r3
   2dd9a:	4313      	orrs	r3, r2
   2dd9c:	b21b      	sxth	r3, r3
   2dd9e:	b29b      	uxth	r3, r3
   2dda0:	001a      	movs	r2, r3
   2dda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dda4:	18d2      	adds	r2, r2, r3
   2dda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dda8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2ddaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ddac:	7858      	ldrb	r0, [r3, #1]
   2ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ddb0:	3330      	adds	r3, #48	; 0x30
   2ddb2:	0019      	movs	r1, r3
   2ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ddb6:	695a      	ldr	r2, [r3, #20]
   2ddb8:	2301      	movs	r3, #1
   2ddba:	4c43      	ldr	r4, [pc, #268]	; (2dec8 <chk_mounted+0x5bc>)
   2ddbc:	47a0      	blx	r4
   2ddbe:	1e03      	subs	r3, r0, #0
   2ddc0:	d162      	bne.n	2de88 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ddc4:	4a41      	ldr	r2, [pc, #260]	; (2decc <chk_mounted+0x5c0>)
   2ddc6:	5c9b      	ldrb	r3, [r3, r2]
   2ddc8:	021b      	lsls	r3, r3, #8
   2ddca:	b21a      	sxth	r2, r3
   2ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ddce:	4940      	ldr	r1, [pc, #256]	; (2ded0 <chk_mounted+0x5c4>)
   2ddd0:	5c5b      	ldrb	r3, [r3, r1]
   2ddd2:	b21b      	sxth	r3, r3
   2ddd4:	4313      	orrs	r3, r2
   2ddd6:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2ddd8:	4a3e      	ldr	r2, [pc, #248]	; (2ded4 <chk_mounted+0x5c8>)
   2ddda:	4293      	cmp	r3, r2
   2dddc:	d154      	bne.n	2de88 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dde0:	2233      	movs	r2, #51	; 0x33
   2dde2:	5c9b      	ldrb	r3, [r3, r2]
   2dde4:	061a      	lsls	r2, r3, #24
   2dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dde8:	2132      	movs	r1, #50	; 0x32
   2ddea:	5c5b      	ldrb	r3, [r3, r1]
   2ddec:	041b      	lsls	r3, r3, #16
   2ddee:	4313      	orrs	r3, r2
   2ddf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ddf2:	2131      	movs	r1, #49	; 0x31
   2ddf4:	5c52      	ldrb	r2, [r2, r1]
   2ddf6:	0212      	lsls	r2, r2, #8
   2ddf8:	4313      	orrs	r3, r2
   2ddfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ddfc:	2130      	movs	r1, #48	; 0x30
   2ddfe:	5c52      	ldrb	r2, [r2, r1]
   2de00:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2de02:	4a35      	ldr	r2, [pc, #212]	; (2ded8 <chk_mounted+0x5cc>)
   2de04:	4293      	cmp	r3, r2
   2de06:	d13f      	bne.n	2de88 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de0a:	4a34      	ldr	r2, [pc, #208]	; (2dedc <chk_mounted+0x5d0>)
   2de0c:	5c9b      	ldrb	r3, [r3, r2]
   2de0e:	061a      	lsls	r2, r3, #24
   2de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de12:	4933      	ldr	r1, [pc, #204]	; (2dee0 <chk_mounted+0x5d4>)
   2de14:	5c5b      	ldrb	r3, [r3, r1]
   2de16:	041b      	lsls	r3, r3, #16
   2de18:	4313      	orrs	r3, r2
   2de1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2de1c:	4931      	ldr	r1, [pc, #196]	; (2dee4 <chk_mounted+0x5d8>)
   2de1e:	5c52      	ldrb	r2, [r2, r1]
   2de20:	0212      	lsls	r2, r2, #8
   2de22:	4313      	orrs	r3, r2
   2de24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2de26:	2285      	movs	r2, #133	; 0x85
   2de28:	0092      	lsls	r2, r2, #2
   2de2a:	5c8a      	ldrb	r2, [r1, r2]
   2de2c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2de2e:	4a2e      	ldr	r2, [pc, #184]	; (2dee8 <chk_mounted+0x5dc>)
   2de30:	4293      	cmp	r3, r2
   2de32:	d129      	bne.n	2de88 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de36:	4a2d      	ldr	r2, [pc, #180]	; (2deec <chk_mounted+0x5e0>)
   2de38:	5c9b      	ldrb	r3, [r3, r2]
   2de3a:	061a      	lsls	r2, r3, #24
   2de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de3e:	492c      	ldr	r1, [pc, #176]	; (2def0 <chk_mounted+0x5e4>)
   2de40:	5c5b      	ldrb	r3, [r3, r1]
   2de42:	041b      	lsls	r3, r3, #16
   2de44:	4313      	orrs	r3, r2
   2de46:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2de48:	492a      	ldr	r1, [pc, #168]	; (2def4 <chk_mounted+0x5e8>)
   2de4a:	5c52      	ldrb	r2, [r2, r1]
   2de4c:	0212      	lsls	r2, r2, #8
   2de4e:	4313      	orrs	r3, r2
   2de50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2de52:	2287      	movs	r2, #135	; 0x87
   2de54:	0092      	lsls	r2, r2, #2
   2de56:	5c8a      	ldrb	r2, [r1, r2]
   2de58:	431a      	orrs	r2, r3
   2de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de5c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de60:	4a25      	ldr	r2, [pc, #148]	; (2def8 <chk_mounted+0x5ec>)
   2de62:	5c9b      	ldrb	r3, [r3, r2]
   2de64:	061a      	lsls	r2, r3, #24
   2de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de68:	4924      	ldr	r1, [pc, #144]	; (2defc <chk_mounted+0x5f0>)
   2de6a:	5c5b      	ldrb	r3, [r3, r1]
   2de6c:	041b      	lsls	r3, r3, #16
   2de6e:	4313      	orrs	r3, r2
   2de70:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2de72:	4923      	ldr	r1, [pc, #140]	; (2df00 <chk_mounted+0x5f4>)
   2de74:	5c52      	ldrb	r2, [r2, r1]
   2de76:	0212      	lsls	r2, r2, #8
   2de78:	4313      	orrs	r3, r2
   2de7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2de7c:	2286      	movs	r2, #134	; 0x86
   2de7e:	0092      	lsls	r2, r2, #2
   2de80:	5c8a      	ldrb	r2, [r1, r2]
   2de82:	431a      	orrs	r2, r3
   2de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de86:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de8a:	2247      	movs	r2, #71	; 0x47
   2de8c:	18ba      	adds	r2, r7, r2
   2de8e:	7812      	ldrb	r2, [r2, #0]
   2de90:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2de92:	4b1c      	ldr	r3, [pc, #112]	; (2df04 <chk_mounted+0x5f8>)
   2de94:	881b      	ldrh	r3, [r3, #0]
   2de96:	3301      	adds	r3, #1
   2de98:	b29a      	uxth	r2, r3
   2de9a:	4b1a      	ldr	r3, [pc, #104]	; (2df04 <chk_mounted+0x5f8>)
   2de9c:	801a      	strh	r2, [r3, #0]
   2de9e:	4b19      	ldr	r3, [pc, #100]	; (2df04 <chk_mounted+0x5f8>)
   2dea0:	881a      	ldrh	r2, [r3, #0]
   2dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dea4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dea8:	2200      	movs	r2, #0
   2deaa:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2deae:	2200      	movs	r2, #0
   2deb0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2deb2:	2300      	movs	r3, #0
}
   2deb4:	0018      	movs	r0, r3
   2deb6:	46bd      	mov	sp, r7
   2deb8:	b013      	add	sp, #76	; 0x4c
   2deba:	bd90      	pop	{r4, r7, pc}
   2debc:	00000ff5 	.word	0x00000ff5
   2dec0:	0000fff5 	.word	0x0000fff5
   2dec4:	000001ff 	.word	0x000001ff
   2dec8:	0002baa1 	.word	0x0002baa1
   2decc:	0000022f 	.word	0x0000022f
   2ded0:	0000022e 	.word	0x0000022e
   2ded4:	ffffaa55 	.word	0xffffaa55
   2ded8:	41615252 	.word	0x41615252
   2dedc:	00000217 	.word	0x00000217
   2dee0:	00000216 	.word	0x00000216
   2dee4:	00000215 	.word	0x00000215
   2dee8:	61417272 	.word	0x61417272
   2deec:	0000021f 	.word	0x0000021f
   2def0:	0000021e 	.word	0x0000021e
   2def4:	0000021d 	.word	0x0000021d
   2def8:	0000021b 	.word	0x0000021b
   2defc:	0000021a 	.word	0x0000021a
   2df00:	00000219 	.word	0x00000219
   2df04:	20004328 	.word	0x20004328

0002df08 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2df08:	b580      	push	{r7, lr}
   2df0a:	b082      	sub	sp, #8
   2df0c:	af00      	add	r7, sp, #0
   2df0e:	6078      	str	r0, [r7, #4]
   2df10:	000a      	movs	r2, r1
   2df12:	1cbb      	adds	r3, r7, #2
   2df14:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2df16:	687b      	ldr	r3, [r7, #4]
   2df18:	2b00      	cmp	r3, #0
   2df1a:	d009      	beq.n	2df30 <validate+0x28>
   2df1c:	687b      	ldr	r3, [r7, #4]
   2df1e:	781b      	ldrb	r3, [r3, #0]
   2df20:	2b00      	cmp	r3, #0
   2df22:	d005      	beq.n	2df30 <validate+0x28>
   2df24:	687b      	ldr	r3, [r7, #4]
   2df26:	88db      	ldrh	r3, [r3, #6]
   2df28:	1cba      	adds	r2, r7, #2
   2df2a:	8812      	ldrh	r2, [r2, #0]
   2df2c:	429a      	cmp	r2, r3
   2df2e:	d001      	beq.n	2df34 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2df30:	2309      	movs	r3, #9
   2df32:	e00c      	b.n	2df4e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2df34:	687b      	ldr	r3, [r7, #4]
   2df36:	785b      	ldrb	r3, [r3, #1]
   2df38:	0018      	movs	r0, r3
   2df3a:	4b07      	ldr	r3, [pc, #28]	; (2df58 <validate+0x50>)
   2df3c:	4798      	blx	r3
   2df3e:	0003      	movs	r3, r0
   2df40:	001a      	movs	r2, r3
   2df42:	2301      	movs	r3, #1
   2df44:	4013      	ands	r3, r2
   2df46:	d001      	beq.n	2df4c <validate+0x44>
		return FR_NOT_READY;
   2df48:	2303      	movs	r3, #3
   2df4a:	e000      	b.n	2df4e <validate+0x46>

	return FR_OK;
   2df4c:	2300      	movs	r3, #0
}
   2df4e:	0018      	movs	r0, r3
   2df50:	46bd      	mov	sp, r7
   2df52:	b002      	add	sp, #8
   2df54:	bd80      	pop	{r7, pc}
   2df56:	46c0      	nop			; (mov r8, r8)
   2df58:	0002ba69 	.word	0x0002ba69

0002df5c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2df5c:	b580      	push	{r7, lr}
   2df5e:	b084      	sub	sp, #16
   2df60:	af00      	add	r7, sp, #0
   2df62:	0002      	movs	r2, r0
   2df64:	6039      	str	r1, [r7, #0]
   2df66:	1dfb      	adds	r3, r7, #7
   2df68:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2df6a:	1dfb      	adds	r3, r7, #7
   2df6c:	781b      	ldrb	r3, [r3, #0]
   2df6e:	2b07      	cmp	r3, #7
   2df70:	d901      	bls.n	2df76 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2df72:	230b      	movs	r3, #11
   2df74:	e018      	b.n	2dfa8 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2df76:	1dfb      	adds	r3, r7, #7
   2df78:	781a      	ldrb	r2, [r3, #0]
   2df7a:	4b0d      	ldr	r3, [pc, #52]	; (2dfb0 <f_mount+0x54>)
   2df7c:	0092      	lsls	r2, r2, #2
   2df7e:	58d3      	ldr	r3, [r2, r3]
   2df80:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2df82:	68fb      	ldr	r3, [r7, #12]
   2df84:	2b00      	cmp	r3, #0
   2df86:	d002      	beq.n	2df8e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2df88:	68fb      	ldr	r3, [r7, #12]
   2df8a:	2200      	movs	r2, #0
   2df8c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2df8e:	683b      	ldr	r3, [r7, #0]
   2df90:	2b00      	cmp	r3, #0
   2df92:	d002      	beq.n	2df9a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2df94:	683b      	ldr	r3, [r7, #0]
   2df96:	2200      	movs	r2, #0
   2df98:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2df9a:	1dfb      	adds	r3, r7, #7
   2df9c:	781a      	ldrb	r2, [r3, #0]
   2df9e:	4b04      	ldr	r3, [pc, #16]	; (2dfb0 <f_mount+0x54>)
   2dfa0:	0092      	lsls	r2, r2, #2
   2dfa2:	6839      	ldr	r1, [r7, #0]
   2dfa4:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2dfa6:	2300      	movs	r3, #0
}
   2dfa8:	0018      	movs	r0, r3
   2dfaa:	46bd      	mov	sp, r7
   2dfac:	b004      	add	sp, #16
   2dfae:	bd80      	pop	{r7, pc}
   2dfb0:	20004308 	.word	0x20004308

0002dfb4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2dfb4:	b590      	push	{r4, r7, lr}
   2dfb6:	4ce5      	ldr	r4, [pc, #916]	; (2e34c <f_open+0x398>)
   2dfb8:	44a5      	add	sp, r4
   2dfba:	af00      	add	r7, sp, #0
   2dfbc:	60f8      	str	r0, [r7, #12]
   2dfbe:	60b9      	str	r1, [r7, #8]
   2dfc0:	4be3      	ldr	r3, [pc, #908]	; (2e350 <f_open+0x39c>)
   2dfc2:	2194      	movs	r1, #148	; 0x94
   2dfc4:	0089      	lsls	r1, r1, #2
   2dfc6:	468c      	mov	ip, r1
   2dfc8:	44bc      	add	ip, r7
   2dfca:	4463      	add	r3, ip
   2dfcc:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2dfce:	68fb      	ldr	r3, [r7, #12]
   2dfd0:	2200      	movs	r2, #0
   2dfd2:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2dfd4:	4bde      	ldr	r3, [pc, #888]	; (2e350 <f_open+0x39c>)
   2dfd6:	2294      	movs	r2, #148	; 0x94
   2dfd8:	0092      	lsls	r2, r2, #2
   2dfda:	4694      	mov	ip, r2
   2dfdc:	44bc      	add	ip, r7
   2dfde:	4463      	add	r3, ip
   2dfe0:	4adb      	ldr	r2, [pc, #876]	; (2e350 <f_open+0x39c>)
   2dfe2:	2194      	movs	r1, #148	; 0x94
   2dfe4:	0089      	lsls	r1, r1, #2
   2dfe6:	468c      	mov	ip, r1
   2dfe8:	44bc      	add	ip, r7
   2dfea:	4462      	add	r2, ip
   2dfec:	7812      	ldrb	r2, [r2, #0]
   2dfee:	211f      	movs	r1, #31
   2dff0:	400a      	ands	r2, r1
   2dff2:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2dff4:	4bd6      	ldr	r3, [pc, #856]	; (2e350 <f_open+0x39c>)
   2dff6:	2294      	movs	r2, #148	; 0x94
   2dff8:	0092      	lsls	r2, r2, #2
   2dffa:	4694      	mov	ip, r2
   2dffc:	44bc      	add	ip, r7
   2dffe:	4463      	add	r3, ip
   2e000:	781b      	ldrb	r3, [r3, #0]
   2e002:	2201      	movs	r2, #1
   2e004:	4393      	bics	r3, r2
   2e006:	b2da      	uxtb	r2, r3
   2e008:	4bd2      	ldr	r3, [pc, #840]	; (2e354 <f_open+0x3a0>)
   2e00a:	18fc      	adds	r4, r7, r3
   2e00c:	2387      	movs	r3, #135	; 0x87
   2e00e:	009b      	lsls	r3, r3, #2
   2e010:	18f9      	adds	r1, r7, r3
   2e012:	2308      	movs	r3, #8
   2e014:	18fb      	adds	r3, r7, r3
   2e016:	0018      	movs	r0, r3
   2e018:	4bcf      	ldr	r3, [pc, #828]	; (2e358 <f_open+0x3a4>)
   2e01a:	4798      	blx	r3
   2e01c:	0003      	movs	r3, r0
   2e01e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e020:	2387      	movs	r3, #135	; 0x87
   2e022:	009b      	lsls	r3, r3, #2
   2e024:	18fb      	adds	r3, r7, r3
   2e026:	2284      	movs	r2, #132	; 0x84
   2e028:	0092      	lsls	r2, r2, #2
   2e02a:	18ba      	adds	r2, r7, r2
   2e02c:	619a      	str	r2, [r3, #24]
   2e02e:	2387      	movs	r3, #135	; 0x87
   2e030:	009b      	lsls	r3, r3, #2
   2e032:	18fb      	adds	r3, r7, r3
   2e034:	2210      	movs	r2, #16
   2e036:	18ba      	adds	r2, r7, r2
   2e038:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e03a:	4bc6      	ldr	r3, [pc, #792]	; (2e354 <f_open+0x3a0>)
   2e03c:	18fb      	adds	r3, r7, r3
   2e03e:	781b      	ldrb	r3, [r3, #0]
   2e040:	2b00      	cmp	r3, #0
   2e042:	d10b      	bne.n	2e05c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e044:	68ba      	ldr	r2, [r7, #8]
   2e046:	4bc3      	ldr	r3, [pc, #780]	; (2e354 <f_open+0x3a0>)
   2e048:	18fc      	adds	r4, r7, r3
   2e04a:	2387      	movs	r3, #135	; 0x87
   2e04c:	009b      	lsls	r3, r3, #2
   2e04e:	18fb      	adds	r3, r7, r3
   2e050:	0011      	movs	r1, r2
   2e052:	0018      	movs	r0, r3
   2e054:	4bc1      	ldr	r3, [pc, #772]	; (2e35c <f_open+0x3a8>)
   2e056:	4798      	blx	r3
   2e058:	0003      	movs	r3, r0
   2e05a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e05c:	2387      	movs	r3, #135	; 0x87
   2e05e:	009b      	lsls	r3, r3, #2
   2e060:	18fb      	adds	r3, r7, r3
   2e062:	695b      	ldr	r3, [r3, #20]
   2e064:	2292      	movs	r2, #146	; 0x92
   2e066:	0092      	lsls	r2, r2, #2
   2e068:	18ba      	adds	r2, r7, r2
   2e06a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e06c:	4bb9      	ldr	r3, [pc, #740]	; (2e354 <f_open+0x3a0>)
   2e06e:	18fb      	adds	r3, r7, r3
   2e070:	781b      	ldrb	r3, [r3, #0]
   2e072:	2b00      	cmp	r3, #0
   2e074:	d109      	bne.n	2e08a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e076:	2392      	movs	r3, #146	; 0x92
   2e078:	009b      	lsls	r3, r3, #2
   2e07a:	18fb      	adds	r3, r7, r3
   2e07c:	681b      	ldr	r3, [r3, #0]
   2e07e:	2b00      	cmp	r3, #0
   2e080:	d103      	bne.n	2e08a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e082:	4bb4      	ldr	r3, [pc, #720]	; (2e354 <f_open+0x3a0>)
   2e084:	18fb      	adds	r3, r7, r3
   2e086:	2206      	movs	r2, #6
   2e088:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e08a:	4bb1      	ldr	r3, [pc, #708]	; (2e350 <f_open+0x39c>)
   2e08c:	2294      	movs	r2, #148	; 0x94
   2e08e:	0092      	lsls	r2, r2, #2
   2e090:	4694      	mov	ip, r2
   2e092:	44bc      	add	ip, r7
   2e094:	4463      	add	r3, ip
   2e096:	781b      	ldrb	r3, [r3, #0]
   2e098:	221c      	movs	r2, #28
   2e09a:	4013      	ands	r3, r2
   2e09c:	d100      	bne.n	2e0a0 <f_open+0xec>
   2e09e:	e141      	b.n	2e324 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e0a0:	4bac      	ldr	r3, [pc, #688]	; (2e354 <f_open+0x3a0>)
   2e0a2:	18fb      	adds	r3, r7, r3
   2e0a4:	781b      	ldrb	r3, [r3, #0]
   2e0a6:	2b00      	cmp	r3, #0
   2e0a8:	d027      	beq.n	2e0fa <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e0aa:	4baa      	ldr	r3, [pc, #680]	; (2e354 <f_open+0x3a0>)
   2e0ac:	18fb      	adds	r3, r7, r3
   2e0ae:	781b      	ldrb	r3, [r3, #0]
   2e0b0:	2b04      	cmp	r3, #4
   2e0b2:	d109      	bne.n	2e0c8 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e0b4:	4ba7      	ldr	r3, [pc, #668]	; (2e354 <f_open+0x3a0>)
   2e0b6:	18fc      	adds	r4, r7, r3
   2e0b8:	2387      	movs	r3, #135	; 0x87
   2e0ba:	009b      	lsls	r3, r3, #2
   2e0bc:	18fb      	adds	r3, r7, r3
   2e0be:	0018      	movs	r0, r3
   2e0c0:	4ba7      	ldr	r3, [pc, #668]	; (2e360 <f_open+0x3ac>)
   2e0c2:	4798      	blx	r3
   2e0c4:	0003      	movs	r3, r0
   2e0c6:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e0c8:	4ba1      	ldr	r3, [pc, #644]	; (2e350 <f_open+0x39c>)
   2e0ca:	2294      	movs	r2, #148	; 0x94
   2e0cc:	0092      	lsls	r2, r2, #2
   2e0ce:	4694      	mov	ip, r2
   2e0d0:	44bc      	add	ip, r7
   2e0d2:	4463      	add	r3, ip
   2e0d4:	4a9e      	ldr	r2, [pc, #632]	; (2e350 <f_open+0x39c>)
   2e0d6:	2194      	movs	r1, #148	; 0x94
   2e0d8:	0089      	lsls	r1, r1, #2
   2e0da:	468c      	mov	ip, r1
   2e0dc:	44bc      	add	ip, r7
   2e0de:	4462      	add	r2, ip
   2e0e0:	7812      	ldrb	r2, [r2, #0]
   2e0e2:	2108      	movs	r1, #8
   2e0e4:	430a      	orrs	r2, r1
   2e0e6:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e0e8:	2387      	movs	r3, #135	; 0x87
   2e0ea:	009b      	lsls	r3, r3, #2
   2e0ec:	18fb      	adds	r3, r7, r3
   2e0ee:	695b      	ldr	r3, [r3, #20]
   2e0f0:	2292      	movs	r2, #146	; 0x92
   2e0f2:	0092      	lsls	r2, r2, #2
   2e0f4:	18ba      	adds	r2, r7, r2
   2e0f6:	6013      	str	r3, [r2, #0]
   2e0f8:	e01c      	b.n	2e134 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e0fa:	2392      	movs	r3, #146	; 0x92
   2e0fc:	009b      	lsls	r3, r3, #2
   2e0fe:	18fb      	adds	r3, r7, r3
   2e100:	681b      	ldr	r3, [r3, #0]
   2e102:	330b      	adds	r3, #11
   2e104:	781b      	ldrb	r3, [r3, #0]
   2e106:	001a      	movs	r2, r3
   2e108:	2311      	movs	r3, #17
   2e10a:	4013      	ands	r3, r2
   2e10c:	d004      	beq.n	2e118 <f_open+0x164>
				res = FR_DENIED;
   2e10e:	4b91      	ldr	r3, [pc, #580]	; (2e354 <f_open+0x3a0>)
   2e110:	18fb      	adds	r3, r7, r3
   2e112:	2207      	movs	r2, #7
   2e114:	701a      	strb	r2, [r3, #0]
   2e116:	e00d      	b.n	2e134 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e118:	4b8d      	ldr	r3, [pc, #564]	; (2e350 <f_open+0x39c>)
   2e11a:	2294      	movs	r2, #148	; 0x94
   2e11c:	0092      	lsls	r2, r2, #2
   2e11e:	4694      	mov	ip, r2
   2e120:	44bc      	add	ip, r7
   2e122:	4463      	add	r3, ip
   2e124:	781b      	ldrb	r3, [r3, #0]
   2e126:	2204      	movs	r2, #4
   2e128:	4013      	ands	r3, r2
   2e12a:	d003      	beq.n	2e134 <f_open+0x180>
					res = FR_EXIST;
   2e12c:	4b89      	ldr	r3, [pc, #548]	; (2e354 <f_open+0x3a0>)
   2e12e:	18fb      	adds	r3, r7, r3
   2e130:	2208      	movs	r2, #8
   2e132:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e134:	4b87      	ldr	r3, [pc, #540]	; (2e354 <f_open+0x3a0>)
   2e136:	18fb      	adds	r3, r7, r3
   2e138:	781b      	ldrb	r3, [r3, #0]
   2e13a:	2b00      	cmp	r3, #0
   2e13c:	d000      	beq.n	2e140 <f_open+0x18c>
   2e13e:	e12f      	b.n	2e3a0 <f_open+0x3ec>
   2e140:	4b83      	ldr	r3, [pc, #524]	; (2e350 <f_open+0x39c>)
   2e142:	2294      	movs	r2, #148	; 0x94
   2e144:	0092      	lsls	r2, r2, #2
   2e146:	4694      	mov	ip, r2
   2e148:	44bc      	add	ip, r7
   2e14a:	4463      	add	r3, ip
   2e14c:	781b      	ldrb	r3, [r3, #0]
   2e14e:	2208      	movs	r2, #8
   2e150:	4013      	ands	r3, r2
   2e152:	d100      	bne.n	2e156 <f_open+0x1a2>
   2e154:	e124      	b.n	2e3a0 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e156:	4b83      	ldr	r3, [pc, #524]	; (2e364 <f_open+0x3b0>)
   2e158:	4798      	blx	r3
   2e15a:	0003      	movs	r3, r0
   2e15c:	2291      	movs	r2, #145	; 0x91
   2e15e:	0092      	lsls	r2, r2, #2
   2e160:	18ba      	adds	r2, r7, r2
   2e162:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e164:	2392      	movs	r3, #146	; 0x92
   2e166:	009b      	lsls	r3, r3, #2
   2e168:	18fb      	adds	r3, r7, r3
   2e16a:	681b      	ldr	r3, [r3, #0]
   2e16c:	330e      	adds	r3, #14
   2e16e:	2291      	movs	r2, #145	; 0x91
   2e170:	0092      	lsls	r2, r2, #2
   2e172:	18ba      	adds	r2, r7, r2
   2e174:	6812      	ldr	r2, [r2, #0]
   2e176:	b2d2      	uxtb	r2, r2
   2e178:	701a      	strb	r2, [r3, #0]
   2e17a:	2392      	movs	r3, #146	; 0x92
   2e17c:	009b      	lsls	r3, r3, #2
   2e17e:	18fb      	adds	r3, r7, r3
   2e180:	681b      	ldr	r3, [r3, #0]
   2e182:	330f      	adds	r3, #15
   2e184:	2291      	movs	r2, #145	; 0x91
   2e186:	0092      	lsls	r2, r2, #2
   2e188:	18ba      	adds	r2, r7, r2
   2e18a:	6812      	ldr	r2, [r2, #0]
   2e18c:	b292      	uxth	r2, r2
   2e18e:	0a12      	lsrs	r2, r2, #8
   2e190:	b292      	uxth	r2, r2
   2e192:	b2d2      	uxtb	r2, r2
   2e194:	701a      	strb	r2, [r3, #0]
   2e196:	2392      	movs	r3, #146	; 0x92
   2e198:	009b      	lsls	r3, r3, #2
   2e19a:	18fb      	adds	r3, r7, r3
   2e19c:	681b      	ldr	r3, [r3, #0]
   2e19e:	3310      	adds	r3, #16
   2e1a0:	2291      	movs	r2, #145	; 0x91
   2e1a2:	0092      	lsls	r2, r2, #2
   2e1a4:	18ba      	adds	r2, r7, r2
   2e1a6:	6812      	ldr	r2, [r2, #0]
   2e1a8:	0c12      	lsrs	r2, r2, #16
   2e1aa:	b2d2      	uxtb	r2, r2
   2e1ac:	701a      	strb	r2, [r3, #0]
   2e1ae:	2392      	movs	r3, #146	; 0x92
   2e1b0:	009b      	lsls	r3, r3, #2
   2e1b2:	18fb      	adds	r3, r7, r3
   2e1b4:	681b      	ldr	r3, [r3, #0]
   2e1b6:	3311      	adds	r3, #17
   2e1b8:	2291      	movs	r2, #145	; 0x91
   2e1ba:	0092      	lsls	r2, r2, #2
   2e1bc:	18ba      	adds	r2, r7, r2
   2e1be:	6812      	ldr	r2, [r2, #0]
   2e1c0:	0e12      	lsrs	r2, r2, #24
   2e1c2:	b2d2      	uxtb	r2, r2
   2e1c4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e1c6:	2392      	movs	r3, #146	; 0x92
   2e1c8:	009b      	lsls	r3, r3, #2
   2e1ca:	18fb      	adds	r3, r7, r3
   2e1cc:	681b      	ldr	r3, [r3, #0]
   2e1ce:	330b      	adds	r3, #11
   2e1d0:	2200      	movs	r2, #0
   2e1d2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e1d4:	2392      	movs	r3, #146	; 0x92
   2e1d6:	009b      	lsls	r3, r3, #2
   2e1d8:	18fb      	adds	r3, r7, r3
   2e1da:	681b      	ldr	r3, [r3, #0]
   2e1dc:	331c      	adds	r3, #28
   2e1de:	2200      	movs	r2, #0
   2e1e0:	701a      	strb	r2, [r3, #0]
   2e1e2:	2392      	movs	r3, #146	; 0x92
   2e1e4:	009b      	lsls	r3, r3, #2
   2e1e6:	18fb      	adds	r3, r7, r3
   2e1e8:	681b      	ldr	r3, [r3, #0]
   2e1ea:	331d      	adds	r3, #29
   2e1ec:	2200      	movs	r2, #0
   2e1ee:	701a      	strb	r2, [r3, #0]
   2e1f0:	2392      	movs	r3, #146	; 0x92
   2e1f2:	009b      	lsls	r3, r3, #2
   2e1f4:	18fb      	adds	r3, r7, r3
   2e1f6:	681b      	ldr	r3, [r3, #0]
   2e1f8:	331e      	adds	r3, #30
   2e1fa:	2200      	movs	r2, #0
   2e1fc:	701a      	strb	r2, [r3, #0]
   2e1fe:	2392      	movs	r3, #146	; 0x92
   2e200:	009b      	lsls	r3, r3, #2
   2e202:	18fb      	adds	r3, r7, r3
   2e204:	681b      	ldr	r3, [r3, #0]
   2e206:	331f      	adds	r3, #31
   2e208:	2200      	movs	r2, #0
   2e20a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e20c:	2392      	movs	r3, #146	; 0x92
   2e20e:	009b      	lsls	r3, r3, #2
   2e210:	18fb      	adds	r3, r7, r3
   2e212:	681b      	ldr	r3, [r3, #0]
   2e214:	3315      	adds	r3, #21
   2e216:	781b      	ldrb	r3, [r3, #0]
   2e218:	021b      	lsls	r3, r3, #8
   2e21a:	b21a      	sxth	r2, r3
   2e21c:	2392      	movs	r3, #146	; 0x92
   2e21e:	009b      	lsls	r3, r3, #2
   2e220:	18fb      	adds	r3, r7, r3
   2e222:	681b      	ldr	r3, [r3, #0]
   2e224:	3314      	adds	r3, #20
   2e226:	781b      	ldrb	r3, [r3, #0]
   2e228:	b21b      	sxth	r3, r3
   2e22a:	4313      	orrs	r3, r2
   2e22c:	b21b      	sxth	r3, r3
   2e22e:	b29b      	uxth	r3, r3
   2e230:	041b      	lsls	r3, r3, #16
   2e232:	2292      	movs	r2, #146	; 0x92
   2e234:	0092      	lsls	r2, r2, #2
   2e236:	18ba      	adds	r2, r7, r2
   2e238:	6812      	ldr	r2, [r2, #0]
   2e23a:	321b      	adds	r2, #27
   2e23c:	7812      	ldrb	r2, [r2, #0]
   2e23e:	0212      	lsls	r2, r2, #8
   2e240:	b211      	sxth	r1, r2
   2e242:	2292      	movs	r2, #146	; 0x92
   2e244:	0092      	lsls	r2, r2, #2
   2e246:	18ba      	adds	r2, r7, r2
   2e248:	6812      	ldr	r2, [r2, #0]
   2e24a:	321a      	adds	r2, #26
   2e24c:	7812      	ldrb	r2, [r2, #0]
   2e24e:	b212      	sxth	r2, r2
   2e250:	430a      	orrs	r2, r1
   2e252:	b212      	sxth	r2, r2
   2e254:	b292      	uxth	r2, r2
   2e256:	4313      	orrs	r3, r2
   2e258:	2290      	movs	r2, #144	; 0x90
   2e25a:	0092      	lsls	r2, r2, #2
   2e25c:	18ba      	adds	r2, r7, r2
   2e25e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e260:	2392      	movs	r3, #146	; 0x92
   2e262:	009b      	lsls	r3, r3, #2
   2e264:	18fb      	adds	r3, r7, r3
   2e266:	681b      	ldr	r3, [r3, #0]
   2e268:	331a      	adds	r3, #26
   2e26a:	2200      	movs	r2, #0
   2e26c:	701a      	strb	r2, [r3, #0]
   2e26e:	2392      	movs	r3, #146	; 0x92
   2e270:	009b      	lsls	r3, r3, #2
   2e272:	18fb      	adds	r3, r7, r3
   2e274:	681b      	ldr	r3, [r3, #0]
   2e276:	331b      	adds	r3, #27
   2e278:	2200      	movs	r2, #0
   2e27a:	701a      	strb	r2, [r3, #0]
   2e27c:	2392      	movs	r3, #146	; 0x92
   2e27e:	009b      	lsls	r3, r3, #2
   2e280:	18fb      	adds	r3, r7, r3
   2e282:	681b      	ldr	r3, [r3, #0]
   2e284:	3314      	adds	r3, #20
   2e286:	2200      	movs	r2, #0
   2e288:	701a      	strb	r2, [r3, #0]
   2e28a:	2392      	movs	r3, #146	; 0x92
   2e28c:	009b      	lsls	r3, r3, #2
   2e28e:	18fb      	adds	r3, r7, r3
   2e290:	681b      	ldr	r3, [r3, #0]
   2e292:	3315      	adds	r3, #21
   2e294:	2200      	movs	r2, #0
   2e296:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e298:	2387      	movs	r3, #135	; 0x87
   2e29a:	009b      	lsls	r3, r3, #2
   2e29c:	18fb      	adds	r3, r7, r3
   2e29e:	681b      	ldr	r3, [r3, #0]
   2e2a0:	2201      	movs	r2, #1
   2e2a2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e2a4:	2390      	movs	r3, #144	; 0x90
   2e2a6:	009b      	lsls	r3, r3, #2
   2e2a8:	18fb      	adds	r3, r7, r3
   2e2aa:	681b      	ldr	r3, [r3, #0]
   2e2ac:	2b00      	cmp	r3, #0
   2e2ae:	d100      	bne.n	2e2b2 <f_open+0x2fe>
   2e2b0:	e076      	b.n	2e3a0 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e2b2:	2387      	movs	r3, #135	; 0x87
   2e2b4:	009b      	lsls	r3, r3, #2
   2e2b6:	18fb      	adds	r3, r7, r3
   2e2b8:	681b      	ldr	r3, [r3, #0]
   2e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e2bc:	2291      	movs	r2, #145	; 0x91
   2e2be:	0092      	lsls	r2, r2, #2
   2e2c0:	18ba      	adds	r2, r7, r2
   2e2c2:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e2c4:	2387      	movs	r3, #135	; 0x87
   2e2c6:	009b      	lsls	r3, r3, #2
   2e2c8:	18fb      	adds	r3, r7, r3
   2e2ca:	681b      	ldr	r3, [r3, #0]
   2e2cc:	4a21      	ldr	r2, [pc, #132]	; (2e354 <f_open+0x3a0>)
   2e2ce:	18bc      	adds	r4, r7, r2
   2e2d0:	2290      	movs	r2, #144	; 0x90
   2e2d2:	0092      	lsls	r2, r2, #2
   2e2d4:	18ba      	adds	r2, r7, r2
   2e2d6:	6812      	ldr	r2, [r2, #0]
   2e2d8:	0011      	movs	r1, r2
   2e2da:	0018      	movs	r0, r3
   2e2dc:	4b22      	ldr	r3, [pc, #136]	; (2e368 <f_open+0x3b4>)
   2e2de:	4798      	blx	r3
   2e2e0:	0003      	movs	r3, r0
   2e2e2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e2e4:	4b1b      	ldr	r3, [pc, #108]	; (2e354 <f_open+0x3a0>)
   2e2e6:	18fb      	adds	r3, r7, r3
   2e2e8:	781b      	ldrb	r3, [r3, #0]
   2e2ea:	2b00      	cmp	r3, #0
   2e2ec:	d158      	bne.n	2e3a0 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e2ee:	2387      	movs	r3, #135	; 0x87
   2e2f0:	009b      	lsls	r3, r3, #2
   2e2f2:	18fb      	adds	r3, r7, r3
   2e2f4:	681b      	ldr	r3, [r3, #0]
   2e2f6:	2290      	movs	r2, #144	; 0x90
   2e2f8:	0092      	lsls	r2, r2, #2
   2e2fa:	18ba      	adds	r2, r7, r2
   2e2fc:	6812      	ldr	r2, [r2, #0]
   2e2fe:	3a01      	subs	r2, #1
   2e300:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e302:	2387      	movs	r3, #135	; 0x87
   2e304:	009b      	lsls	r3, r3, #2
   2e306:	18fb      	adds	r3, r7, r3
   2e308:	681b      	ldr	r3, [r3, #0]
   2e30a:	4a12      	ldr	r2, [pc, #72]	; (2e354 <f_open+0x3a0>)
   2e30c:	18bc      	adds	r4, r7, r2
   2e30e:	2291      	movs	r2, #145	; 0x91
   2e310:	0092      	lsls	r2, r2, #2
   2e312:	18ba      	adds	r2, r7, r2
   2e314:	6812      	ldr	r2, [r2, #0]
   2e316:	0011      	movs	r1, r2
   2e318:	0018      	movs	r0, r3
   2e31a:	4b14      	ldr	r3, [pc, #80]	; (2e36c <f_open+0x3b8>)
   2e31c:	4798      	blx	r3
   2e31e:	0003      	movs	r3, r0
   2e320:	7023      	strb	r3, [r4, #0]
   2e322:	e03d      	b.n	2e3a0 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e324:	4b0b      	ldr	r3, [pc, #44]	; (2e354 <f_open+0x3a0>)
   2e326:	18fb      	adds	r3, r7, r3
   2e328:	781b      	ldrb	r3, [r3, #0]
   2e32a:	2b00      	cmp	r3, #0
   2e32c:	d138      	bne.n	2e3a0 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e32e:	2392      	movs	r3, #146	; 0x92
   2e330:	009b      	lsls	r3, r3, #2
   2e332:	18fb      	adds	r3, r7, r3
   2e334:	681b      	ldr	r3, [r3, #0]
   2e336:	330b      	adds	r3, #11
   2e338:	781b      	ldrb	r3, [r3, #0]
   2e33a:	001a      	movs	r2, r3
   2e33c:	2310      	movs	r3, #16
   2e33e:	4013      	ands	r3, r2
   2e340:	d016      	beq.n	2e370 <f_open+0x3bc>
				res = FR_NO_FILE;
   2e342:	4b04      	ldr	r3, [pc, #16]	; (2e354 <f_open+0x3a0>)
   2e344:	18fb      	adds	r3, r7, r3
   2e346:	2204      	movs	r2, #4
   2e348:	701a      	strb	r2, [r3, #0]
   2e34a:	e029      	b.n	2e3a0 <f_open+0x3ec>
   2e34c:	fffffdac 	.word	0xfffffdac
   2e350:	fffffdb7 	.word	0xfffffdb7
   2e354:	0000024f 	.word	0x0000024f
   2e358:	0002d90d 	.word	0x0002d90d
   2e35c:	0002d701 	.word	0x0002d701
   2e360:	0002cf51 	.word	0x0002cf51
   2e364:	0002bd49 	.word	0x0002bd49
   2e368:	0002c4cd 	.word	0x0002c4cd
   2e36c:	0002be8d 	.word	0x0002be8d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e370:	4b5a      	ldr	r3, [pc, #360]	; (2e4dc <f_open+0x528>)
   2e372:	2294      	movs	r2, #148	; 0x94
   2e374:	0092      	lsls	r2, r2, #2
   2e376:	4694      	mov	ip, r2
   2e378:	44bc      	add	ip, r7
   2e37a:	4463      	add	r3, ip
   2e37c:	781b      	ldrb	r3, [r3, #0]
   2e37e:	2202      	movs	r2, #2
   2e380:	4013      	ands	r3, r2
   2e382:	d00d      	beq.n	2e3a0 <f_open+0x3ec>
   2e384:	2392      	movs	r3, #146	; 0x92
   2e386:	009b      	lsls	r3, r3, #2
   2e388:	18fb      	adds	r3, r7, r3
   2e38a:	681b      	ldr	r3, [r3, #0]
   2e38c:	330b      	adds	r3, #11
   2e38e:	781b      	ldrb	r3, [r3, #0]
   2e390:	001a      	movs	r2, r3
   2e392:	2301      	movs	r3, #1
   2e394:	4013      	ands	r3, r2
   2e396:	d003      	beq.n	2e3a0 <f_open+0x3ec>
					res = FR_DENIED;
   2e398:	4b51      	ldr	r3, [pc, #324]	; (2e4e0 <f_open+0x52c>)
   2e39a:	18fb      	adds	r3, r7, r3
   2e39c:	2207      	movs	r2, #7
   2e39e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e3a0:	4b4f      	ldr	r3, [pc, #316]	; (2e4e0 <f_open+0x52c>)
   2e3a2:	18fb      	adds	r3, r7, r3
   2e3a4:	781b      	ldrb	r3, [r3, #0]
   2e3a6:	2b00      	cmp	r3, #0
   2e3a8:	d126      	bne.n	2e3f8 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e3aa:	4b4c      	ldr	r3, [pc, #304]	; (2e4dc <f_open+0x528>)
   2e3ac:	2294      	movs	r2, #148	; 0x94
   2e3ae:	0092      	lsls	r2, r2, #2
   2e3b0:	4694      	mov	ip, r2
   2e3b2:	44bc      	add	ip, r7
   2e3b4:	4463      	add	r3, ip
   2e3b6:	781b      	ldrb	r3, [r3, #0]
   2e3b8:	2208      	movs	r2, #8
   2e3ba:	4013      	ands	r3, r2
   2e3bc:	d00f      	beq.n	2e3de <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e3be:	4b47      	ldr	r3, [pc, #284]	; (2e4dc <f_open+0x528>)
   2e3c0:	2294      	movs	r2, #148	; 0x94
   2e3c2:	0092      	lsls	r2, r2, #2
   2e3c4:	4694      	mov	ip, r2
   2e3c6:	44bc      	add	ip, r7
   2e3c8:	4463      	add	r3, ip
   2e3ca:	4a44      	ldr	r2, [pc, #272]	; (2e4dc <f_open+0x528>)
   2e3cc:	2194      	movs	r1, #148	; 0x94
   2e3ce:	0089      	lsls	r1, r1, #2
   2e3d0:	468c      	mov	ip, r1
   2e3d2:	44bc      	add	ip, r7
   2e3d4:	4462      	add	r2, ip
   2e3d6:	7812      	ldrb	r2, [r2, #0]
   2e3d8:	2120      	movs	r1, #32
   2e3da:	430a      	orrs	r2, r1
   2e3dc:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e3de:	2387      	movs	r3, #135	; 0x87
   2e3e0:	009b      	lsls	r3, r3, #2
   2e3e2:	18fb      	adds	r3, r7, r3
   2e3e4:	681b      	ldr	r3, [r3, #0]
   2e3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e3e8:	68fb      	ldr	r3, [r7, #12]
   2e3ea:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2e3ec:	68fb      	ldr	r3, [r7, #12]
   2e3ee:	2292      	movs	r2, #146	; 0x92
   2e3f0:	0092      	lsls	r2, r2, #2
   2e3f2:	18ba      	adds	r2, r7, r2
   2e3f4:	6812      	ldr	r2, [r2, #0]
   2e3f6:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2e3f8:	4b39      	ldr	r3, [pc, #228]	; (2e4e0 <f_open+0x52c>)
   2e3fa:	18fb      	adds	r3, r7, r3
   2e3fc:	781b      	ldrb	r3, [r3, #0]
   2e3fe:	2b00      	cmp	r3, #0
   2e400:	d163      	bne.n	2e4ca <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2e402:	68fb      	ldr	r3, [r7, #12]
   2e404:	4a35      	ldr	r2, [pc, #212]	; (2e4dc <f_open+0x528>)
   2e406:	2194      	movs	r1, #148	; 0x94
   2e408:	0089      	lsls	r1, r1, #2
   2e40a:	468c      	mov	ip, r1
   2e40c:	44bc      	add	ip, r7
   2e40e:	4462      	add	r2, ip
   2e410:	7812      	ldrb	r2, [r2, #0]
   2e412:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2e414:	2392      	movs	r3, #146	; 0x92
   2e416:	009b      	lsls	r3, r3, #2
   2e418:	18fb      	adds	r3, r7, r3
   2e41a:	681b      	ldr	r3, [r3, #0]
   2e41c:	3315      	adds	r3, #21
   2e41e:	781b      	ldrb	r3, [r3, #0]
   2e420:	021b      	lsls	r3, r3, #8
   2e422:	b21a      	sxth	r2, r3
   2e424:	2392      	movs	r3, #146	; 0x92
   2e426:	009b      	lsls	r3, r3, #2
   2e428:	18fb      	adds	r3, r7, r3
   2e42a:	681b      	ldr	r3, [r3, #0]
   2e42c:	3314      	adds	r3, #20
   2e42e:	781b      	ldrb	r3, [r3, #0]
   2e430:	b21b      	sxth	r3, r3
   2e432:	4313      	orrs	r3, r2
   2e434:	b21b      	sxth	r3, r3
   2e436:	b29b      	uxth	r3, r3
   2e438:	041b      	lsls	r3, r3, #16
   2e43a:	2292      	movs	r2, #146	; 0x92
   2e43c:	0092      	lsls	r2, r2, #2
   2e43e:	18ba      	adds	r2, r7, r2
   2e440:	6812      	ldr	r2, [r2, #0]
   2e442:	321b      	adds	r2, #27
   2e444:	7812      	ldrb	r2, [r2, #0]
   2e446:	0212      	lsls	r2, r2, #8
   2e448:	b211      	sxth	r1, r2
   2e44a:	2292      	movs	r2, #146	; 0x92
   2e44c:	0092      	lsls	r2, r2, #2
   2e44e:	18ba      	adds	r2, r7, r2
   2e450:	6812      	ldr	r2, [r2, #0]
   2e452:	321a      	adds	r2, #26
   2e454:	7812      	ldrb	r2, [r2, #0]
   2e456:	b212      	sxth	r2, r2
   2e458:	430a      	orrs	r2, r1
   2e45a:	b212      	sxth	r2, r2
   2e45c:	b292      	uxth	r2, r2
   2e45e:	431a      	orrs	r2, r3
   2e460:	68fb      	ldr	r3, [r7, #12]
   2e462:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2e464:	2392      	movs	r3, #146	; 0x92
   2e466:	009b      	lsls	r3, r3, #2
   2e468:	18fb      	adds	r3, r7, r3
   2e46a:	681b      	ldr	r3, [r3, #0]
   2e46c:	331f      	adds	r3, #31
   2e46e:	781b      	ldrb	r3, [r3, #0]
   2e470:	061a      	lsls	r2, r3, #24
   2e472:	2392      	movs	r3, #146	; 0x92
   2e474:	009b      	lsls	r3, r3, #2
   2e476:	18fb      	adds	r3, r7, r3
   2e478:	681b      	ldr	r3, [r3, #0]
   2e47a:	331e      	adds	r3, #30
   2e47c:	781b      	ldrb	r3, [r3, #0]
   2e47e:	041b      	lsls	r3, r3, #16
   2e480:	4313      	orrs	r3, r2
   2e482:	2292      	movs	r2, #146	; 0x92
   2e484:	0092      	lsls	r2, r2, #2
   2e486:	18ba      	adds	r2, r7, r2
   2e488:	6812      	ldr	r2, [r2, #0]
   2e48a:	321d      	adds	r2, #29
   2e48c:	7812      	ldrb	r2, [r2, #0]
   2e48e:	0212      	lsls	r2, r2, #8
   2e490:	4313      	orrs	r3, r2
   2e492:	2292      	movs	r2, #146	; 0x92
   2e494:	0092      	lsls	r2, r2, #2
   2e496:	18ba      	adds	r2, r7, r2
   2e498:	6812      	ldr	r2, [r2, #0]
   2e49a:	321c      	adds	r2, #28
   2e49c:	7812      	ldrb	r2, [r2, #0]
   2e49e:	431a      	orrs	r2, r3
   2e4a0:	68fb      	ldr	r3, [r7, #12]
   2e4a2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2e4a4:	68fb      	ldr	r3, [r7, #12]
   2e4a6:	2200      	movs	r2, #0
   2e4a8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2e4aa:	68fb      	ldr	r3, [r7, #12]
   2e4ac:	2200      	movs	r2, #0
   2e4ae:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2e4b0:	2387      	movs	r3, #135	; 0x87
   2e4b2:	009b      	lsls	r3, r3, #2
   2e4b4:	18fb      	adds	r3, r7, r3
   2e4b6:	681a      	ldr	r2, [r3, #0]
   2e4b8:	68fb      	ldr	r3, [r7, #12]
   2e4ba:	601a      	str	r2, [r3, #0]
   2e4bc:	2387      	movs	r3, #135	; 0x87
   2e4be:	009b      	lsls	r3, r3, #2
   2e4c0:	18fb      	adds	r3, r7, r3
   2e4c2:	681b      	ldr	r3, [r3, #0]
   2e4c4:	88da      	ldrh	r2, [r3, #6]
   2e4c6:	68fb      	ldr	r3, [r7, #12]
   2e4c8:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2e4ca:	4b05      	ldr	r3, [pc, #20]	; (2e4e0 <f_open+0x52c>)
   2e4cc:	18fb      	adds	r3, r7, r3
   2e4ce:	781b      	ldrb	r3, [r3, #0]
}
   2e4d0:	0018      	movs	r0, r3
   2e4d2:	46bd      	mov	sp, r7
   2e4d4:	2395      	movs	r3, #149	; 0x95
   2e4d6:	009b      	lsls	r3, r3, #2
   2e4d8:	449d      	add	sp, r3
   2e4da:	bd90      	pop	{r4, r7, pc}
   2e4dc:	fffffdb7 	.word	0xfffffdb7
   2e4e0:	0000024f 	.word	0x0000024f

0002e4e4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2e4e4:	b590      	push	{r4, r7, lr}
   2e4e6:	b08b      	sub	sp, #44	; 0x2c
   2e4e8:	af00      	add	r7, sp, #0
   2e4ea:	60f8      	str	r0, [r7, #12]
   2e4ec:	60b9      	str	r1, [r7, #8]
   2e4ee:	607a      	str	r2, [r7, #4]
   2e4f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2e4f2:	68bb      	ldr	r3, [r7, #8]
   2e4f4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2e4f6:	683b      	ldr	r3, [r7, #0]
   2e4f8:	2200      	movs	r2, #0
   2e4fa:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2e4fc:	68fb      	ldr	r3, [r7, #12]
   2e4fe:	681a      	ldr	r2, [r3, #0]
   2e500:	68fb      	ldr	r3, [r7, #12]
   2e502:	889b      	ldrh	r3, [r3, #4]
   2e504:	2117      	movs	r1, #23
   2e506:	187c      	adds	r4, r7, r1
   2e508:	0019      	movs	r1, r3
   2e50a:	0010      	movs	r0, r2
   2e50c:	4bc3      	ldr	r3, [pc, #780]	; (2e81c <f_write+0x338>)
   2e50e:	4798      	blx	r3
   2e510:	0003      	movs	r3, r0
   2e512:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2e514:	2317      	movs	r3, #23
   2e516:	18fb      	adds	r3, r7, r3
   2e518:	781b      	ldrb	r3, [r3, #0]
   2e51a:	2b00      	cmp	r3, #0
   2e51c:	d003      	beq.n	2e526 <f_write+0x42>
   2e51e:	2317      	movs	r3, #23
   2e520:	18fb      	adds	r3, r7, r3
   2e522:	781b      	ldrb	r3, [r3, #0]
   2e524:	e176      	b.n	2e814 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2e526:	68fb      	ldr	r3, [r7, #12]
   2e528:	799b      	ldrb	r3, [r3, #6]
   2e52a:	b25b      	sxtb	r3, r3
   2e52c:	2b00      	cmp	r3, #0
   2e52e:	da01      	bge.n	2e534 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2e530:	2302      	movs	r3, #2
   2e532:	e16f      	b.n	2e814 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2e534:	68fb      	ldr	r3, [r7, #12]
   2e536:	799b      	ldrb	r3, [r3, #6]
   2e538:	001a      	movs	r2, r3
   2e53a:	2302      	movs	r3, #2
   2e53c:	4013      	ands	r3, r2
   2e53e:	d101      	bne.n	2e544 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2e540:	2307      	movs	r3, #7
   2e542:	e167      	b.n	2e814 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2e544:	68fb      	ldr	r3, [r7, #12]
   2e546:	68da      	ldr	r2, [r3, #12]
   2e548:	687b      	ldr	r3, [r7, #4]
   2e54a:	18d2      	adds	r2, r2, r3
   2e54c:	68fb      	ldr	r3, [r7, #12]
   2e54e:	68db      	ldr	r3, [r3, #12]
   2e550:	429a      	cmp	r2, r3
   2e552:	d300      	bcc.n	2e556 <f_write+0x72>
   2e554:	e146      	b.n	2e7e4 <f_write+0x300>
   2e556:	2300      	movs	r3, #0
   2e558:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2e55a:	e143      	b.n	2e7e4 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2e55c:	68fb      	ldr	r3, [r7, #12]
   2e55e:	689b      	ldr	r3, [r3, #8]
   2e560:	05db      	lsls	r3, r3, #23
   2e562:	0ddb      	lsrs	r3, r3, #23
   2e564:	d000      	beq.n	2e568 <f_write+0x84>
   2e566:	e0f6      	b.n	2e756 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2e568:	68fb      	ldr	r3, [r7, #12]
   2e56a:	689b      	ldr	r3, [r3, #8]
   2e56c:	0a5b      	lsrs	r3, r3, #9
   2e56e:	b2da      	uxtb	r2, r3
   2e570:	68fb      	ldr	r3, [r7, #12]
   2e572:	681b      	ldr	r3, [r3, #0]
   2e574:	789b      	ldrb	r3, [r3, #2]
   2e576:	3b01      	subs	r3, #1
   2e578:	b2d9      	uxtb	r1, r3
   2e57a:	2316      	movs	r3, #22
   2e57c:	18fb      	adds	r3, r7, r3
   2e57e:	400a      	ands	r2, r1
   2e580:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2e582:	2316      	movs	r3, #22
   2e584:	18fb      	adds	r3, r7, r3
   2e586:	781b      	ldrb	r3, [r3, #0]
   2e588:	2b00      	cmp	r3, #0
   2e58a:	d140      	bne.n	2e60e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2e58c:	68fb      	ldr	r3, [r7, #12]
   2e58e:	689b      	ldr	r3, [r3, #8]
   2e590:	2b00      	cmp	r3, #0
   2e592:	d111      	bne.n	2e5b8 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2e594:	68fb      	ldr	r3, [r7, #12]
   2e596:	691b      	ldr	r3, [r3, #16]
   2e598:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e59c:	2b00      	cmp	r3, #0
   2e59e:	d115      	bne.n	2e5cc <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2e5a0:	68fb      	ldr	r3, [r7, #12]
   2e5a2:	681b      	ldr	r3, [r3, #0]
   2e5a4:	2100      	movs	r1, #0
   2e5a6:	0018      	movs	r0, r3
   2e5a8:	4b9d      	ldr	r3, [pc, #628]	; (2e820 <f_write+0x33c>)
   2e5aa:	4798      	blx	r3
   2e5ac:	0003      	movs	r3, r0
   2e5ae:	627b      	str	r3, [r7, #36]	; 0x24
   2e5b0:	68fb      	ldr	r3, [r7, #12]
   2e5b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e5b4:	611a      	str	r2, [r3, #16]
   2e5b6:	e009      	b.n	2e5cc <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2e5b8:	68fb      	ldr	r3, [r7, #12]
   2e5ba:	681a      	ldr	r2, [r3, #0]
   2e5bc:	68fb      	ldr	r3, [r7, #12]
   2e5be:	695b      	ldr	r3, [r3, #20]
   2e5c0:	0019      	movs	r1, r3
   2e5c2:	0010      	movs	r0, r2
   2e5c4:	4b96      	ldr	r3, [pc, #600]	; (2e820 <f_write+0x33c>)
   2e5c6:	4798      	blx	r3
   2e5c8:	0003      	movs	r3, r0
   2e5ca:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5ce:	2b00      	cmp	r3, #0
   2e5d0:	d100      	bne.n	2e5d4 <f_write+0xf0>
   2e5d2:	e10c      	b.n	2e7ee <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5d6:	2b01      	cmp	r3, #1
   2e5d8:	d109      	bne.n	2e5ee <f_write+0x10a>
   2e5da:	68fb      	ldr	r3, [r7, #12]
   2e5dc:	799b      	ldrb	r3, [r3, #6]
   2e5de:	2280      	movs	r2, #128	; 0x80
   2e5e0:	4252      	negs	r2, r2
   2e5e2:	4313      	orrs	r3, r2
   2e5e4:	b2da      	uxtb	r2, r3
   2e5e6:	68fb      	ldr	r3, [r7, #12]
   2e5e8:	719a      	strb	r2, [r3, #6]
   2e5ea:	2302      	movs	r3, #2
   2e5ec:	e112      	b.n	2e814 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2e5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5f0:	3301      	adds	r3, #1
   2e5f2:	d109      	bne.n	2e608 <f_write+0x124>
   2e5f4:	68fb      	ldr	r3, [r7, #12]
   2e5f6:	799b      	ldrb	r3, [r3, #6]
   2e5f8:	2280      	movs	r2, #128	; 0x80
   2e5fa:	4252      	negs	r2, r2
   2e5fc:	4313      	orrs	r3, r2
   2e5fe:	b2da      	uxtb	r2, r3
   2e600:	68fb      	ldr	r3, [r7, #12]
   2e602:	719a      	strb	r2, [r3, #6]
   2e604:	2301      	movs	r3, #1
   2e606:	e105      	b.n	2e814 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2e608:	68fb      	ldr	r3, [r7, #12]
   2e60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e60c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2e60e:	68fb      	ldr	r3, [r7, #12]
   2e610:	681b      	ldr	r3, [r3, #0]
   2e612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e614:	68fb      	ldr	r3, [r7, #12]
   2e616:	699b      	ldr	r3, [r3, #24]
   2e618:	429a      	cmp	r2, r3
   2e61a:	d111      	bne.n	2e640 <f_write+0x15c>
   2e61c:	68fb      	ldr	r3, [r7, #12]
   2e61e:	681b      	ldr	r3, [r3, #0]
   2e620:	2100      	movs	r1, #0
   2e622:	0018      	movs	r0, r3
   2e624:	4b7f      	ldr	r3, [pc, #508]	; (2e824 <f_write+0x340>)
   2e626:	4798      	blx	r3
   2e628:	1e03      	subs	r3, r0, #0
   2e62a:	d009      	beq.n	2e640 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2e62c:	68fb      	ldr	r3, [r7, #12]
   2e62e:	799b      	ldrb	r3, [r3, #6]
   2e630:	2280      	movs	r2, #128	; 0x80
   2e632:	4252      	negs	r2, r2
   2e634:	4313      	orrs	r3, r2
   2e636:	b2da      	uxtb	r2, r3
   2e638:	68fb      	ldr	r3, [r7, #12]
   2e63a:	719a      	strb	r2, [r3, #6]
   2e63c:	2301      	movs	r3, #1
   2e63e:	e0e9      	b.n	2e814 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2e640:	68fb      	ldr	r3, [r7, #12]
   2e642:	681a      	ldr	r2, [r3, #0]
   2e644:	68fb      	ldr	r3, [r7, #12]
   2e646:	695b      	ldr	r3, [r3, #20]
   2e648:	0019      	movs	r1, r3
   2e64a:	0010      	movs	r0, r2
   2e64c:	4b76      	ldr	r3, [pc, #472]	; (2e828 <f_write+0x344>)
   2e64e:	4798      	blx	r3
   2e650:	0003      	movs	r3, r0
   2e652:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2e654:	693b      	ldr	r3, [r7, #16]
   2e656:	2b00      	cmp	r3, #0
   2e658:	d109      	bne.n	2e66e <f_write+0x18a>
   2e65a:	68fb      	ldr	r3, [r7, #12]
   2e65c:	799b      	ldrb	r3, [r3, #6]
   2e65e:	2280      	movs	r2, #128	; 0x80
   2e660:	4252      	negs	r2, r2
   2e662:	4313      	orrs	r3, r2
   2e664:	b2da      	uxtb	r2, r3
   2e666:	68fb      	ldr	r3, [r7, #12]
   2e668:	719a      	strb	r2, [r3, #6]
   2e66a:	2302      	movs	r3, #2
   2e66c:	e0d2      	b.n	2e814 <f_write+0x330>
			sect += csect;
   2e66e:	2316      	movs	r3, #22
   2e670:	18fb      	adds	r3, r7, r3
   2e672:	781b      	ldrb	r3, [r3, #0]
   2e674:	693a      	ldr	r2, [r7, #16]
   2e676:	18d3      	adds	r3, r2, r3
   2e678:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2e67a:	687b      	ldr	r3, [r7, #4]
   2e67c:	0a5b      	lsrs	r3, r3, #9
   2e67e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2e680:	69fb      	ldr	r3, [r7, #28]
   2e682:	2b00      	cmp	r3, #0
   2e684:	d048      	beq.n	2e718 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2e686:	2316      	movs	r3, #22
   2e688:	18fb      	adds	r3, r7, r3
   2e68a:	781a      	ldrb	r2, [r3, #0]
   2e68c:	69fb      	ldr	r3, [r7, #28]
   2e68e:	18d2      	adds	r2, r2, r3
   2e690:	68fb      	ldr	r3, [r7, #12]
   2e692:	681b      	ldr	r3, [r3, #0]
   2e694:	789b      	ldrb	r3, [r3, #2]
   2e696:	429a      	cmp	r2, r3
   2e698:	d908      	bls.n	2e6ac <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2e69a:	68fb      	ldr	r3, [r7, #12]
   2e69c:	681b      	ldr	r3, [r3, #0]
   2e69e:	789b      	ldrb	r3, [r3, #2]
   2e6a0:	001a      	movs	r2, r3
   2e6a2:	2316      	movs	r3, #22
   2e6a4:	18fb      	adds	r3, r7, r3
   2e6a6:	781b      	ldrb	r3, [r3, #0]
   2e6a8:	1ad3      	subs	r3, r2, r3
   2e6aa:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2e6ac:	68fb      	ldr	r3, [r7, #12]
   2e6ae:	681b      	ldr	r3, [r3, #0]
   2e6b0:	7858      	ldrb	r0, [r3, #1]
   2e6b2:	69fb      	ldr	r3, [r7, #28]
   2e6b4:	b2db      	uxtb	r3, r3
   2e6b6:	693a      	ldr	r2, [r7, #16]
   2e6b8:	69b9      	ldr	r1, [r7, #24]
   2e6ba:	4c5c      	ldr	r4, [pc, #368]	; (2e82c <f_write+0x348>)
   2e6bc:	47a0      	blx	r4
   2e6be:	1e03      	subs	r3, r0, #0
   2e6c0:	d009      	beq.n	2e6d6 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2e6c2:	68fb      	ldr	r3, [r7, #12]
   2e6c4:	799b      	ldrb	r3, [r3, #6]
   2e6c6:	2280      	movs	r2, #128	; 0x80
   2e6c8:	4252      	negs	r2, r2
   2e6ca:	4313      	orrs	r3, r2
   2e6cc:	b2da      	uxtb	r2, r3
   2e6ce:	68fb      	ldr	r3, [r7, #12]
   2e6d0:	719a      	strb	r2, [r3, #6]
   2e6d2:	2301      	movs	r3, #1
   2e6d4:	e09e      	b.n	2e814 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2e6d6:	68fb      	ldr	r3, [r7, #12]
   2e6d8:	681b      	ldr	r3, [r3, #0]
   2e6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e6dc:	693b      	ldr	r3, [r7, #16]
   2e6de:	1ad2      	subs	r2, r2, r3
   2e6e0:	69fb      	ldr	r3, [r7, #28]
   2e6e2:	429a      	cmp	r2, r3
   2e6e4:	d214      	bcs.n	2e710 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2e6e6:	68fb      	ldr	r3, [r7, #12]
   2e6e8:	681b      	ldr	r3, [r3, #0]
   2e6ea:	3330      	adds	r3, #48	; 0x30
   2e6ec:	0018      	movs	r0, r3
   2e6ee:	68fb      	ldr	r3, [r7, #12]
   2e6f0:	681b      	ldr	r3, [r3, #0]
   2e6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e6f4:	693b      	ldr	r3, [r7, #16]
   2e6f6:	1ad3      	subs	r3, r2, r3
   2e6f8:	025b      	lsls	r3, r3, #9
   2e6fa:	69ba      	ldr	r2, [r7, #24]
   2e6fc:	18d1      	adds	r1, r2, r3
   2e6fe:	2380      	movs	r3, #128	; 0x80
   2e700:	009b      	lsls	r3, r3, #2
   2e702:	001a      	movs	r2, r3
   2e704:	4b4a      	ldr	r3, [pc, #296]	; (2e830 <f_write+0x34c>)
   2e706:	4798      	blx	r3
					fp->fs->wflag = 0;
   2e708:	68fb      	ldr	r3, [r7, #12]
   2e70a:	681b      	ldr	r3, [r3, #0]
   2e70c:	2200      	movs	r2, #0
   2e70e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2e710:	69fb      	ldr	r3, [r7, #28]
   2e712:	025b      	lsls	r3, r3, #9
   2e714:	623b      	str	r3, [r7, #32]
				continue;
   2e716:	e051      	b.n	2e7bc <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2e718:	68fb      	ldr	r3, [r7, #12]
   2e71a:	689a      	ldr	r2, [r3, #8]
   2e71c:	68fb      	ldr	r3, [r7, #12]
   2e71e:	68db      	ldr	r3, [r3, #12]
   2e720:	429a      	cmp	r2, r3
   2e722:	d315      	bcc.n	2e750 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2e724:	68fb      	ldr	r3, [r7, #12]
   2e726:	681b      	ldr	r3, [r3, #0]
   2e728:	2100      	movs	r1, #0
   2e72a:	0018      	movs	r0, r3
   2e72c:	4b3d      	ldr	r3, [pc, #244]	; (2e824 <f_write+0x340>)
   2e72e:	4798      	blx	r3
   2e730:	1e03      	subs	r3, r0, #0
   2e732:	d009      	beq.n	2e748 <f_write+0x264>
   2e734:	68fb      	ldr	r3, [r7, #12]
   2e736:	799b      	ldrb	r3, [r3, #6]
   2e738:	2280      	movs	r2, #128	; 0x80
   2e73a:	4252      	negs	r2, r2
   2e73c:	4313      	orrs	r3, r2
   2e73e:	b2da      	uxtb	r2, r3
   2e740:	68fb      	ldr	r3, [r7, #12]
   2e742:	719a      	strb	r2, [r3, #6]
   2e744:	2301      	movs	r3, #1
   2e746:	e065      	b.n	2e814 <f_write+0x330>
				fp->fs->winsect = sect;
   2e748:	68fb      	ldr	r3, [r7, #12]
   2e74a:	681b      	ldr	r3, [r3, #0]
   2e74c:	693a      	ldr	r2, [r7, #16]
   2e74e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2e750:	68fb      	ldr	r3, [r7, #12]
   2e752:	693a      	ldr	r2, [r7, #16]
   2e754:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2e756:	68fb      	ldr	r3, [r7, #12]
   2e758:	689b      	ldr	r3, [r3, #8]
   2e75a:	05db      	lsls	r3, r3, #23
   2e75c:	0ddb      	lsrs	r3, r3, #23
   2e75e:	2280      	movs	r2, #128	; 0x80
   2e760:	0092      	lsls	r2, r2, #2
   2e762:	1ad3      	subs	r3, r2, r3
   2e764:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2e766:	6a3a      	ldr	r2, [r7, #32]
   2e768:	687b      	ldr	r3, [r7, #4]
   2e76a:	429a      	cmp	r2, r3
   2e76c:	d901      	bls.n	2e772 <f_write+0x28e>
   2e76e:	687b      	ldr	r3, [r7, #4]
   2e770:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2e772:	68fb      	ldr	r3, [r7, #12]
   2e774:	681a      	ldr	r2, [r3, #0]
   2e776:	68fb      	ldr	r3, [r7, #12]
   2e778:	699b      	ldr	r3, [r3, #24]
   2e77a:	0019      	movs	r1, r3
   2e77c:	0010      	movs	r0, r2
   2e77e:	4b29      	ldr	r3, [pc, #164]	; (2e824 <f_write+0x340>)
   2e780:	4798      	blx	r3
   2e782:	1e03      	subs	r3, r0, #0
   2e784:	d009      	beq.n	2e79a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2e786:	68fb      	ldr	r3, [r7, #12]
   2e788:	799b      	ldrb	r3, [r3, #6]
   2e78a:	2280      	movs	r2, #128	; 0x80
   2e78c:	4252      	negs	r2, r2
   2e78e:	4313      	orrs	r3, r2
   2e790:	b2da      	uxtb	r2, r3
   2e792:	68fb      	ldr	r3, [r7, #12]
   2e794:	719a      	strb	r2, [r3, #6]
   2e796:	2301      	movs	r3, #1
   2e798:	e03c      	b.n	2e814 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2e79a:	68fb      	ldr	r3, [r7, #12]
   2e79c:	681a      	ldr	r2, [r3, #0]
   2e79e:	68fb      	ldr	r3, [r7, #12]
   2e7a0:	689b      	ldr	r3, [r3, #8]
   2e7a2:	05db      	lsls	r3, r3, #23
   2e7a4:	0ddb      	lsrs	r3, r3, #23
   2e7a6:	3330      	adds	r3, #48	; 0x30
   2e7a8:	18d3      	adds	r3, r2, r3
   2e7aa:	6a3a      	ldr	r2, [r7, #32]
   2e7ac:	69b9      	ldr	r1, [r7, #24]
   2e7ae:	0018      	movs	r0, r3
   2e7b0:	4b1f      	ldr	r3, [pc, #124]	; (2e830 <f_write+0x34c>)
   2e7b2:	4798      	blx	r3
		fp->fs->wflag = 1;
   2e7b4:	68fb      	ldr	r3, [r7, #12]
   2e7b6:	681b      	ldr	r3, [r3, #0]
   2e7b8:	2201      	movs	r2, #1
   2e7ba:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2e7bc:	69ba      	ldr	r2, [r7, #24]
   2e7be:	6a3b      	ldr	r3, [r7, #32]
   2e7c0:	18d3      	adds	r3, r2, r3
   2e7c2:	61bb      	str	r3, [r7, #24]
   2e7c4:	68fb      	ldr	r3, [r7, #12]
   2e7c6:	689a      	ldr	r2, [r3, #8]
   2e7c8:	6a3b      	ldr	r3, [r7, #32]
   2e7ca:	18d2      	adds	r2, r2, r3
   2e7cc:	68fb      	ldr	r3, [r7, #12]
   2e7ce:	609a      	str	r2, [r3, #8]
   2e7d0:	683b      	ldr	r3, [r7, #0]
   2e7d2:	681a      	ldr	r2, [r3, #0]
   2e7d4:	6a3b      	ldr	r3, [r7, #32]
   2e7d6:	18d2      	adds	r2, r2, r3
   2e7d8:	683b      	ldr	r3, [r7, #0]
   2e7da:	601a      	str	r2, [r3, #0]
   2e7dc:	687a      	ldr	r2, [r7, #4]
   2e7de:	6a3b      	ldr	r3, [r7, #32]
   2e7e0:	1ad3      	subs	r3, r2, r3
   2e7e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2e7e4:	687b      	ldr	r3, [r7, #4]
   2e7e6:	2b00      	cmp	r3, #0
   2e7e8:	d000      	beq.n	2e7ec <f_write+0x308>
   2e7ea:	e6b7      	b.n	2e55c <f_write+0x78>
   2e7ec:	e000      	b.n	2e7f0 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e7ee:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2e7f0:	68fb      	ldr	r3, [r7, #12]
   2e7f2:	689a      	ldr	r2, [r3, #8]
   2e7f4:	68fb      	ldr	r3, [r7, #12]
   2e7f6:	68db      	ldr	r3, [r3, #12]
   2e7f8:	429a      	cmp	r2, r3
   2e7fa:	d903      	bls.n	2e804 <f_write+0x320>
   2e7fc:	68fb      	ldr	r3, [r7, #12]
   2e7fe:	689a      	ldr	r2, [r3, #8]
   2e800:	68fb      	ldr	r3, [r7, #12]
   2e802:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2e804:	68fb      	ldr	r3, [r7, #12]
   2e806:	799b      	ldrb	r3, [r3, #6]
   2e808:	2220      	movs	r2, #32
   2e80a:	4313      	orrs	r3, r2
   2e80c:	b2da      	uxtb	r2, r3
   2e80e:	68fb      	ldr	r3, [r7, #12]
   2e810:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e812:	2300      	movs	r3, #0
}
   2e814:	0018      	movs	r0, r3
   2e816:	46bd      	mov	sp, r7
   2e818:	b00b      	add	sp, #44	; 0x2c
   2e81a:	bd90      	pop	{r4, r7, pc}
   2e81c:	0002df09 	.word	0x0002df09
   2e820:	0002c595 	.word	0x0002c595
   2e824:	0002be8d 	.word	0x0002be8d
   2e828:	0002c0ed 	.word	0x0002c0ed
   2e82c:	0002bb79 	.word	0x0002bb79
   2e830:	0002bda9 	.word	0x0002bda9

0002e834 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e834:	b590      	push	{r4, r7, lr}
   2e836:	b087      	sub	sp, #28
   2e838:	af00      	add	r7, sp, #0
   2e83a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e83c:	687b      	ldr	r3, [r7, #4]
   2e83e:	681a      	ldr	r2, [r3, #0]
   2e840:	687b      	ldr	r3, [r7, #4]
   2e842:	889b      	ldrh	r3, [r3, #4]
   2e844:	2117      	movs	r1, #23
   2e846:	187c      	adds	r4, r7, r1
   2e848:	0019      	movs	r1, r3
   2e84a:	0010      	movs	r0, r2
   2e84c:	4b55      	ldr	r3, [pc, #340]	; (2e9a4 <f_sync+0x170>)
   2e84e:	4798      	blx	r3
   2e850:	0003      	movs	r3, r0
   2e852:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e854:	2317      	movs	r3, #23
   2e856:	18fb      	adds	r3, r7, r3
   2e858:	781b      	ldrb	r3, [r3, #0]
   2e85a:	2b00      	cmp	r3, #0
   2e85c:	d000      	beq.n	2e860 <f_sync+0x2c>
   2e85e:	e09a      	b.n	2e996 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e860:	687b      	ldr	r3, [r7, #4]
   2e862:	799b      	ldrb	r3, [r3, #6]
   2e864:	001a      	movs	r2, r3
   2e866:	2320      	movs	r3, #32
   2e868:	4013      	ands	r3, r2
   2e86a:	d100      	bne.n	2e86e <f_sync+0x3a>
   2e86c:	e093      	b.n	2e996 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e86e:	687b      	ldr	r3, [r7, #4]
   2e870:	681a      	ldr	r2, [r3, #0]
   2e872:	687b      	ldr	r3, [r7, #4]
   2e874:	69db      	ldr	r3, [r3, #28]
   2e876:	2117      	movs	r1, #23
   2e878:	187c      	adds	r4, r7, r1
   2e87a:	0019      	movs	r1, r3
   2e87c:	0010      	movs	r0, r2
   2e87e:	4b4a      	ldr	r3, [pc, #296]	; (2e9a8 <f_sync+0x174>)
   2e880:	4798      	blx	r3
   2e882:	0003      	movs	r3, r0
   2e884:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e886:	2317      	movs	r3, #23
   2e888:	18fb      	adds	r3, r7, r3
   2e88a:	781b      	ldrb	r3, [r3, #0]
   2e88c:	2b00      	cmp	r3, #0
   2e88e:	d000      	beq.n	2e892 <f_sync+0x5e>
   2e890:	e081      	b.n	2e996 <f_sync+0x162>
				dir = fp->dir_ptr;
   2e892:	687b      	ldr	r3, [r7, #4]
   2e894:	6a1b      	ldr	r3, [r3, #32]
   2e896:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e898:	693b      	ldr	r3, [r7, #16]
   2e89a:	330b      	adds	r3, #11
   2e89c:	693a      	ldr	r2, [r7, #16]
   2e89e:	320b      	adds	r2, #11
   2e8a0:	7812      	ldrb	r2, [r2, #0]
   2e8a2:	2120      	movs	r1, #32
   2e8a4:	430a      	orrs	r2, r1
   2e8a6:	b2d2      	uxtb	r2, r2
   2e8a8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e8aa:	693b      	ldr	r3, [r7, #16]
   2e8ac:	331c      	adds	r3, #28
   2e8ae:	001a      	movs	r2, r3
   2e8b0:	687b      	ldr	r3, [r7, #4]
   2e8b2:	68db      	ldr	r3, [r3, #12]
   2e8b4:	b2db      	uxtb	r3, r3
   2e8b6:	7013      	strb	r3, [r2, #0]
   2e8b8:	693b      	ldr	r3, [r7, #16]
   2e8ba:	331d      	adds	r3, #29
   2e8bc:	001a      	movs	r2, r3
   2e8be:	687b      	ldr	r3, [r7, #4]
   2e8c0:	68db      	ldr	r3, [r3, #12]
   2e8c2:	b29b      	uxth	r3, r3
   2e8c4:	0a1b      	lsrs	r3, r3, #8
   2e8c6:	b29b      	uxth	r3, r3
   2e8c8:	b2db      	uxtb	r3, r3
   2e8ca:	7013      	strb	r3, [r2, #0]
   2e8cc:	693b      	ldr	r3, [r7, #16]
   2e8ce:	331e      	adds	r3, #30
   2e8d0:	001a      	movs	r2, r3
   2e8d2:	687b      	ldr	r3, [r7, #4]
   2e8d4:	68db      	ldr	r3, [r3, #12]
   2e8d6:	0c1b      	lsrs	r3, r3, #16
   2e8d8:	b2db      	uxtb	r3, r3
   2e8da:	7013      	strb	r3, [r2, #0]
   2e8dc:	693b      	ldr	r3, [r7, #16]
   2e8de:	331f      	adds	r3, #31
   2e8e0:	001a      	movs	r2, r3
   2e8e2:	687b      	ldr	r3, [r7, #4]
   2e8e4:	68db      	ldr	r3, [r3, #12]
   2e8e6:	0e1b      	lsrs	r3, r3, #24
   2e8e8:	b2db      	uxtb	r3, r3
   2e8ea:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e8ec:	693b      	ldr	r3, [r7, #16]
   2e8ee:	331a      	adds	r3, #26
   2e8f0:	001a      	movs	r2, r3
   2e8f2:	687b      	ldr	r3, [r7, #4]
   2e8f4:	691b      	ldr	r3, [r3, #16]
   2e8f6:	b2db      	uxtb	r3, r3
   2e8f8:	7013      	strb	r3, [r2, #0]
   2e8fa:	693b      	ldr	r3, [r7, #16]
   2e8fc:	331b      	adds	r3, #27
   2e8fe:	001a      	movs	r2, r3
   2e900:	687b      	ldr	r3, [r7, #4]
   2e902:	691b      	ldr	r3, [r3, #16]
   2e904:	b29b      	uxth	r3, r3
   2e906:	0a1b      	lsrs	r3, r3, #8
   2e908:	b29b      	uxth	r3, r3
   2e90a:	b2db      	uxtb	r3, r3
   2e90c:	7013      	strb	r3, [r2, #0]
   2e90e:	693b      	ldr	r3, [r7, #16]
   2e910:	3314      	adds	r3, #20
   2e912:	001a      	movs	r2, r3
   2e914:	687b      	ldr	r3, [r7, #4]
   2e916:	691b      	ldr	r3, [r3, #16]
   2e918:	0c1b      	lsrs	r3, r3, #16
   2e91a:	b2db      	uxtb	r3, r3
   2e91c:	7013      	strb	r3, [r2, #0]
   2e91e:	693b      	ldr	r3, [r7, #16]
   2e920:	3315      	adds	r3, #21
   2e922:	001a      	movs	r2, r3
   2e924:	687b      	ldr	r3, [r7, #4]
   2e926:	691b      	ldr	r3, [r3, #16]
   2e928:	0c1b      	lsrs	r3, r3, #16
   2e92a:	b29b      	uxth	r3, r3
   2e92c:	0a1b      	lsrs	r3, r3, #8
   2e92e:	b29b      	uxth	r3, r3
   2e930:	b2db      	uxtb	r3, r3
   2e932:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e934:	4b1d      	ldr	r3, [pc, #116]	; (2e9ac <f_sync+0x178>)
   2e936:	4798      	blx	r3
   2e938:	0003      	movs	r3, r0
   2e93a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e93c:	693b      	ldr	r3, [r7, #16]
   2e93e:	3316      	adds	r3, #22
   2e940:	68fa      	ldr	r2, [r7, #12]
   2e942:	b2d2      	uxtb	r2, r2
   2e944:	701a      	strb	r2, [r3, #0]
   2e946:	693b      	ldr	r3, [r7, #16]
   2e948:	3317      	adds	r3, #23
   2e94a:	68fa      	ldr	r2, [r7, #12]
   2e94c:	b292      	uxth	r2, r2
   2e94e:	0a12      	lsrs	r2, r2, #8
   2e950:	b292      	uxth	r2, r2
   2e952:	b2d2      	uxtb	r2, r2
   2e954:	701a      	strb	r2, [r3, #0]
   2e956:	693b      	ldr	r3, [r7, #16]
   2e958:	3318      	adds	r3, #24
   2e95a:	68fa      	ldr	r2, [r7, #12]
   2e95c:	0c12      	lsrs	r2, r2, #16
   2e95e:	b2d2      	uxtb	r2, r2
   2e960:	701a      	strb	r2, [r3, #0]
   2e962:	693b      	ldr	r3, [r7, #16]
   2e964:	3319      	adds	r3, #25
   2e966:	68fa      	ldr	r2, [r7, #12]
   2e968:	0e12      	lsrs	r2, r2, #24
   2e96a:	b2d2      	uxtb	r2, r2
   2e96c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e96e:	687b      	ldr	r3, [r7, #4]
   2e970:	799b      	ldrb	r3, [r3, #6]
   2e972:	2220      	movs	r2, #32
   2e974:	4393      	bics	r3, r2
   2e976:	b2da      	uxtb	r2, r3
   2e978:	687b      	ldr	r3, [r7, #4]
   2e97a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e97c:	687b      	ldr	r3, [r7, #4]
   2e97e:	681b      	ldr	r3, [r3, #0]
   2e980:	2201      	movs	r2, #1
   2e982:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e984:	687b      	ldr	r3, [r7, #4]
   2e986:	681b      	ldr	r3, [r3, #0]
   2e988:	2217      	movs	r2, #23
   2e98a:	18bc      	adds	r4, r7, r2
   2e98c:	0018      	movs	r0, r3
   2e98e:	4b08      	ldr	r3, [pc, #32]	; (2e9b0 <f_sync+0x17c>)
   2e990:	4798      	blx	r3
   2e992:	0003      	movs	r3, r0
   2e994:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e996:	2317      	movs	r3, #23
   2e998:	18fb      	adds	r3, r7, r3
   2e99a:	781b      	ldrb	r3, [r3, #0]
}
   2e99c:	0018      	movs	r0, r3
   2e99e:	46bd      	mov	sp, r7
   2e9a0:	b007      	add	sp, #28
   2e9a2:	bd90      	pop	{r4, r7, pc}
   2e9a4:	0002df09 	.word	0x0002df09
   2e9a8:	0002be8d 	.word	0x0002be8d
   2e9ac:	0002bd49 	.word	0x0002bd49
   2e9b0:	0002bf55 	.word	0x0002bf55

0002e9b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e9b4:	b590      	push	{r4, r7, lr}
   2e9b6:	b085      	sub	sp, #20
   2e9b8:	af00      	add	r7, sp, #0
   2e9ba:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e9bc:	230f      	movs	r3, #15
   2e9be:	18fc      	adds	r4, r7, r3
   2e9c0:	687b      	ldr	r3, [r7, #4]
   2e9c2:	0018      	movs	r0, r3
   2e9c4:	4b09      	ldr	r3, [pc, #36]	; (2e9ec <f_close+0x38>)
   2e9c6:	4798      	blx	r3
   2e9c8:	0003      	movs	r3, r0
   2e9ca:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e9cc:	230f      	movs	r3, #15
   2e9ce:	18fb      	adds	r3, r7, r3
   2e9d0:	781b      	ldrb	r3, [r3, #0]
   2e9d2:	2b00      	cmp	r3, #0
   2e9d4:	d102      	bne.n	2e9dc <f_close+0x28>
   2e9d6:	687b      	ldr	r3, [r7, #4]
   2e9d8:	2200      	movs	r2, #0
   2e9da:	601a      	str	r2, [r3, #0]
	return res;
   2e9dc:	230f      	movs	r3, #15
   2e9de:	18fb      	adds	r3, r7, r3
   2e9e0:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e9e2:	0018      	movs	r0, r3
   2e9e4:	46bd      	mov	sp, r7
   2e9e6:	b005      	add	sp, #20
   2e9e8:	bd90      	pop	{r4, r7, pc}
   2e9ea:	46c0      	nop			; (mov r8, r8)
   2e9ec:	0002e835 	.word	0x0002e835

0002e9f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2e9f0:	b580      	push	{r7, lr}
   2e9f2:	b084      	sub	sp, #16
   2e9f4:	af00      	add	r7, sp, #0
   2e9f6:	0002      	movs	r2, r0
   2e9f8:	6039      	str	r1, [r7, #0]
   2e9fa:	1dbb      	adds	r3, r7, #6
   2e9fc:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2e9fe:	1dbb      	adds	r3, r7, #6
   2ea00:	881b      	ldrh	r3, [r3, #0]
   2ea02:	2b7f      	cmp	r3, #127	; 0x7f
   2ea04:	d805      	bhi.n	2ea12 <ff_convert+0x22>
		c = src;
   2ea06:	230e      	movs	r3, #14
   2ea08:	18fb      	adds	r3, r7, r3
   2ea0a:	1dba      	adds	r2, r7, #6
   2ea0c:	8812      	ldrh	r2, [r2, #0]
   2ea0e:	801a      	strh	r2, [r3, #0]
   2ea10:	e03a      	b.n	2ea88 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2ea12:	683b      	ldr	r3, [r7, #0]
   2ea14:	2b00      	cmp	r3, #0
   2ea16:	d010      	beq.n	2ea3a <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2ea18:	1dbb      	adds	r3, r7, #6
   2ea1a:	881b      	ldrh	r3, [r3, #0]
   2ea1c:	2bff      	cmp	r3, #255	; 0xff
   2ea1e:	d807      	bhi.n	2ea30 <ff_convert+0x40>
   2ea20:	1dbb      	adds	r3, r7, #6
   2ea22:	881b      	ldrh	r3, [r3, #0]
   2ea24:	3b80      	subs	r3, #128	; 0x80
   2ea26:	001a      	movs	r2, r3
   2ea28:	4b1b      	ldr	r3, [pc, #108]	; (2ea98 <ff_convert+0xa8>)
   2ea2a:	0052      	lsls	r2, r2, #1
   2ea2c:	5ad2      	ldrh	r2, [r2, r3]
   2ea2e:	e000      	b.n	2ea32 <ff_convert+0x42>
   2ea30:	2200      	movs	r2, #0
   2ea32:	230e      	movs	r3, #14
   2ea34:	18fb      	adds	r3, r7, r3
   2ea36:	801a      	strh	r2, [r3, #0]
   2ea38:	e026      	b.n	2ea88 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2ea3a:	230e      	movs	r3, #14
   2ea3c:	18fb      	adds	r3, r7, r3
   2ea3e:	2200      	movs	r2, #0
   2ea40:	801a      	strh	r2, [r3, #0]
   2ea42:	e010      	b.n	2ea66 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2ea44:	230e      	movs	r3, #14
   2ea46:	18fb      	adds	r3, r7, r3
   2ea48:	881a      	ldrh	r2, [r3, #0]
   2ea4a:	4b13      	ldr	r3, [pc, #76]	; (2ea98 <ff_convert+0xa8>)
   2ea4c:	0052      	lsls	r2, r2, #1
   2ea4e:	5ad3      	ldrh	r3, [r2, r3]
   2ea50:	1dba      	adds	r2, r7, #6
   2ea52:	8812      	ldrh	r2, [r2, #0]
   2ea54:	429a      	cmp	r2, r3
   2ea56:	d00c      	beq.n	2ea72 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2ea58:	230e      	movs	r3, #14
   2ea5a:	18fb      	adds	r3, r7, r3
   2ea5c:	881a      	ldrh	r2, [r3, #0]
   2ea5e:	230e      	movs	r3, #14
   2ea60:	18fb      	adds	r3, r7, r3
   2ea62:	3201      	adds	r2, #1
   2ea64:	801a      	strh	r2, [r3, #0]
   2ea66:	230e      	movs	r3, #14
   2ea68:	18fb      	adds	r3, r7, r3
   2ea6a:	881b      	ldrh	r3, [r3, #0]
   2ea6c:	2b7f      	cmp	r3, #127	; 0x7f
   2ea6e:	d9e9      	bls.n	2ea44 <ff_convert+0x54>
   2ea70:	e000      	b.n	2ea74 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2ea72:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2ea74:	230e      	movs	r3, #14
   2ea76:	18fb      	adds	r3, r7, r3
   2ea78:	881b      	ldrh	r3, [r3, #0]
   2ea7a:	3380      	adds	r3, #128	; 0x80
   2ea7c:	b29a      	uxth	r2, r3
   2ea7e:	230e      	movs	r3, #14
   2ea80:	18fb      	adds	r3, r7, r3
   2ea82:	21ff      	movs	r1, #255	; 0xff
   2ea84:	400a      	ands	r2, r1
   2ea86:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2ea88:	230e      	movs	r3, #14
   2ea8a:	18fb      	adds	r3, r7, r3
   2ea8c:	881b      	ldrh	r3, [r3, #0]
}
   2ea8e:	0018      	movs	r0, r3
   2ea90:	46bd      	mov	sp, r7
   2ea92:	b004      	add	sp, #16
   2ea94:	bd80      	pop	{r7, pc}
   2ea96:	46c0      	nop			; (mov r8, r8)
   2ea98:	0003bd98 	.word	0x0003bd98

0002ea9c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2ea9c:	b580      	push	{r7, lr}
   2ea9e:	b084      	sub	sp, #16
   2eaa0:	af00      	add	r7, sp, #0
   2eaa2:	0002      	movs	r2, r0
   2eaa4:	1dbb      	adds	r3, r7, #6
   2eaa6:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2eaa8:	2300      	movs	r3, #0
   2eaaa:	60fb      	str	r3, [r7, #12]
   2eaac:	e002      	b.n	2eab4 <ff_wtoupper+0x18>
   2eaae:	68fb      	ldr	r3, [r7, #12]
   2eab0:	3301      	adds	r3, #1
   2eab2:	60fb      	str	r3, [r7, #12]
   2eab4:	4b0f      	ldr	r3, [pc, #60]	; (2eaf4 <ff_wtoupper+0x58>)
   2eab6:	68fa      	ldr	r2, [r7, #12]
   2eab8:	0052      	lsls	r2, r2, #1
   2eaba:	5ad3      	ldrh	r3, [r2, r3]
   2eabc:	2b00      	cmp	r3, #0
   2eabe:	d007      	beq.n	2ead0 <ff_wtoupper+0x34>
   2eac0:	4b0c      	ldr	r3, [pc, #48]	; (2eaf4 <ff_wtoupper+0x58>)
   2eac2:	68fa      	ldr	r2, [r7, #12]
   2eac4:	0052      	lsls	r2, r2, #1
   2eac6:	5ad3      	ldrh	r3, [r2, r3]
   2eac8:	1dba      	adds	r2, r7, #6
   2eaca:	8812      	ldrh	r2, [r2, #0]
   2eacc:	429a      	cmp	r2, r3
   2eace:	d1ee      	bne.n	2eaae <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2ead0:	4b08      	ldr	r3, [pc, #32]	; (2eaf4 <ff_wtoupper+0x58>)
   2ead2:	68fa      	ldr	r2, [r7, #12]
   2ead4:	0052      	lsls	r2, r2, #1
   2ead6:	5ad3      	ldrh	r3, [r2, r3]
   2ead8:	2b00      	cmp	r3, #0
   2eada:	d004      	beq.n	2eae6 <ff_wtoupper+0x4a>
   2eadc:	4b06      	ldr	r3, [pc, #24]	; (2eaf8 <ff_wtoupper+0x5c>)
   2eade:	68fa      	ldr	r2, [r7, #12]
   2eae0:	0052      	lsls	r2, r2, #1
   2eae2:	5ad3      	ldrh	r3, [r2, r3]
   2eae4:	e001      	b.n	2eaea <ff_wtoupper+0x4e>
   2eae6:	1dbb      	adds	r3, r7, #6
   2eae8:	881b      	ldrh	r3, [r3, #0]
}
   2eaea:	0018      	movs	r0, r3
   2eaec:	46bd      	mov	sp, r7
   2eaee:	b004      	add	sp, #16
   2eaf0:	bd80      	pop	{r7, pc}
   2eaf2:	46c0      	nop			; (mov r8, r8)
   2eaf4:	0003be98 	.word	0x0003be98
   2eaf8:	0003c078 	.word	0x0003c078

0002eafc <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2eafc:	b580      	push	{r7, lr}
   2eafe:	b084      	sub	sp, #16
   2eb00:	af00      	add	r7, sp, #0
   2eb02:	60f8      	str	r0, [r7, #12]
   2eb04:	60b9      	str	r1, [r7, #8]
   2eb06:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2eb08:	68fb      	ldr	r3, [r7, #12]
   2eb0a:	68ba      	ldr	r2, [r7, #8]
   2eb0c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2eb0e:	68fb      	ldr	r3, [r7, #12]
   2eb10:	687a      	ldr	r2, [r7, #4]
   2eb12:	601a      	str	r2, [r3, #0]
}
   2eb14:	46c0      	nop			; (mov r8, r8)
   2eb16:	46bd      	mov	sp, r7
   2eb18:	b004      	add	sp, #16
   2eb1a:	bd80      	pop	{r7, pc}

0002eb1c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2eb1c:	b580      	push	{r7, lr}
   2eb1e:	b082      	sub	sp, #8
   2eb20:	af00      	add	r7, sp, #0
   2eb22:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2eb24:	687b      	ldr	r3, [r7, #4]
   2eb26:	681b      	ldr	r3, [r3, #0]
   2eb28:	4a07      	ldr	r2, [pc, #28]	; (2eb48 <getNextPacketId+0x2c>)
   2eb2a:	4293      	cmp	r3, r2
   2eb2c:	d003      	beq.n	2eb36 <getNextPacketId+0x1a>
   2eb2e:	687b      	ldr	r3, [r7, #4]
   2eb30:	681b      	ldr	r3, [r3, #0]
   2eb32:	1c5a      	adds	r2, r3, #1
   2eb34:	e000      	b.n	2eb38 <getNextPacketId+0x1c>
   2eb36:	2201      	movs	r2, #1
   2eb38:	687b      	ldr	r3, [r7, #4]
   2eb3a:	601a      	str	r2, [r3, #0]
   2eb3c:	687b      	ldr	r3, [r7, #4]
   2eb3e:	681b      	ldr	r3, [r3, #0]
}
   2eb40:	0018      	movs	r0, r3
   2eb42:	46bd      	mov	sp, r7
   2eb44:	b002      	add	sp, #8
   2eb46:	bd80      	pop	{r7, pc}
   2eb48:	0000ffff 	.word	0x0000ffff

0002eb4c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2eb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eb4e:	b087      	sub	sp, #28
   2eb50:	af00      	add	r7, sp, #0
   2eb52:	60f8      	str	r0, [r7, #12]
   2eb54:	60b9      	str	r1, [r7, #8]
   2eb56:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2eb58:	2301      	movs	r3, #1
   2eb5a:	425b      	negs	r3, r3
   2eb5c:	617b      	str	r3, [r7, #20]
        sent = 0;
   2eb5e:	2300      	movs	r3, #0
   2eb60:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2eb62:	e01a      	b.n	2eb9a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2eb64:	68fb      	ldr	r3, [r7, #12]
   2eb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2eb68:	68dc      	ldr	r4, [r3, #12]
   2eb6a:	68fb      	ldr	r3, [r7, #12]
   2eb6c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2eb6e:	68fb      	ldr	r3, [r7, #12]
   2eb70:	691a      	ldr	r2, [r3, #16]
   2eb72:	693b      	ldr	r3, [r7, #16]
   2eb74:	18d6      	adds	r6, r2, r3
   2eb76:	687b      	ldr	r3, [r7, #4]
   2eb78:	0018      	movs	r0, r3
   2eb7a:	4b1a      	ldr	r3, [pc, #104]	; (2ebe4 <sendPacket+0x98>)
   2eb7c:	4798      	blx	r3
   2eb7e:	0003      	movs	r3, r0
   2eb80:	68ba      	ldr	r2, [r7, #8]
   2eb82:	0031      	movs	r1, r6
   2eb84:	0028      	movs	r0, r5
   2eb86:	47a0      	blx	r4
   2eb88:	0003      	movs	r3, r0
   2eb8a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2eb8c:	697b      	ldr	r3, [r7, #20]
   2eb8e:	2b00      	cmp	r3, #0
   2eb90:	db0e      	blt.n	2ebb0 <sendPacket+0x64>
            break;
        sent += rc;
   2eb92:	693a      	ldr	r2, [r7, #16]
   2eb94:	697b      	ldr	r3, [r7, #20]
   2eb96:	18d3      	adds	r3, r2, r3
   2eb98:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2eb9a:	693a      	ldr	r2, [r7, #16]
   2eb9c:	68bb      	ldr	r3, [r7, #8]
   2eb9e:	429a      	cmp	r2, r3
   2eba0:	da07      	bge.n	2ebb2 <sendPacket+0x66>
   2eba2:	687b      	ldr	r3, [r7, #4]
   2eba4:	0018      	movs	r0, r3
   2eba6:	4b10      	ldr	r3, [pc, #64]	; (2ebe8 <sendPacket+0x9c>)
   2eba8:	4798      	blx	r3
   2ebaa:	1e03      	subs	r3, r0, #0
   2ebac:	d0da      	beq.n	2eb64 <sendPacket+0x18>
   2ebae:	e000      	b.n	2ebb2 <sendPacket+0x66>
            break;
   2ebb0:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2ebb2:	693a      	ldr	r2, [r7, #16]
   2ebb4:	68bb      	ldr	r3, [r7, #8]
   2ebb6:	429a      	cmp	r2, r3
   2ebb8:	d10b      	bne.n	2ebd2 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2ebba:	68fb      	ldr	r3, [r7, #12]
   2ebbc:	3354      	adds	r3, #84	; 0x54
   2ebbe:	001a      	movs	r2, r3
   2ebc0:	68fb      	ldr	r3, [r7, #12]
   2ebc2:	699b      	ldr	r3, [r3, #24]
   2ebc4:	0019      	movs	r1, r3
   2ebc6:	0010      	movs	r0, r2
   2ebc8:	4b08      	ldr	r3, [pc, #32]	; (2ebec <sendPacket+0xa0>)
   2ebca:	4798      	blx	r3
        rc = SUCCESS;
   2ebcc:	2300      	movs	r3, #0
   2ebce:	617b      	str	r3, [r7, #20]
   2ebd0:	e002      	b.n	2ebd8 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2ebd2:	2301      	movs	r3, #1
   2ebd4:	425b      	negs	r3, r3
   2ebd6:	617b      	str	r3, [r7, #20]
    return rc;
   2ebd8:	697b      	ldr	r3, [r7, #20]
}
   2ebda:	0018      	movs	r0, r3
   2ebdc:	46bd      	mov	sp, r7
   2ebde:	b007      	add	sp, #28
   2ebe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ebe2:	46c0      	nop			; (mov r8, r8)
   2ebe4:	0002f9ad 	.word	0x0002f9ad
   2ebe8:	0002f931 	.word	0x0002f931
   2ebec:	0002f985 	.word	0x0002f985

0002ebf0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2ebf0:	b580      	push	{r7, lr}
   2ebf2:	b086      	sub	sp, #24
   2ebf4:	af00      	add	r7, sp, #0
   2ebf6:	60f8      	str	r0, [r7, #12]
   2ebf8:	60b9      	str	r1, [r7, #8]
   2ebfa:	607a      	str	r2, [r7, #4]
   2ebfc:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2ebfe:	68fb      	ldr	r3, [r7, #12]
   2ec00:	68ba      	ldr	r2, [r7, #8]
   2ec02:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ec04:	2300      	movs	r3, #0
   2ec06:	617b      	str	r3, [r7, #20]
   2ec08:	e00a      	b.n	2ec20 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2ec0a:	68fa      	ldr	r2, [r7, #12]
   2ec0c:	697b      	ldr	r3, [r7, #20]
   2ec0e:	3304      	adds	r3, #4
   2ec10:	00db      	lsls	r3, r3, #3
   2ec12:	18d3      	adds	r3, r2, r3
   2ec14:	3304      	adds	r3, #4
   2ec16:	2200      	movs	r2, #0
   2ec18:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ec1a:	697b      	ldr	r3, [r7, #20]
   2ec1c:	3301      	adds	r3, #1
   2ec1e:	617b      	str	r3, [r7, #20]
   2ec20:	697b      	ldr	r3, [r7, #20]
   2ec22:	2b04      	cmp	r3, #4
   2ec24:	ddf1      	ble.n	2ec0a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2ec26:	68fb      	ldr	r3, [r7, #12]
   2ec28:	687a      	ldr	r2, [r7, #4]
   2ec2a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2ec2c:	68fb      	ldr	r3, [r7, #12]
   2ec2e:	683a      	ldr	r2, [r7, #0]
   2ec30:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2ec32:	68fb      	ldr	r3, [r7, #12]
   2ec34:	6a3a      	ldr	r2, [r7, #32]
   2ec36:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2ec38:	68fb      	ldr	r3, [r7, #12]
   2ec3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ec3c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2ec3e:	68fb      	ldr	r3, [r7, #12]
   2ec40:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ec42:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2ec44:	68fb      	ldr	r3, [r7, #12]
   2ec46:	2200      	movs	r2, #0
   2ec48:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2ec4a:	68fb      	ldr	r3, [r7, #12]
   2ec4c:	2200      	movs	r2, #0
   2ec4e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2ec50:	68fb      	ldr	r3, [r7, #12]
   2ec52:	2200      	movs	r2, #0
   2ec54:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2ec56:	68fb      	ldr	r3, [r7, #12]
   2ec58:	2201      	movs	r2, #1
   2ec5a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2ec5c:	68fb      	ldr	r3, [r7, #12]
   2ec5e:	3354      	adds	r3, #84	; 0x54
   2ec60:	0018      	movs	r0, r3
   2ec62:	4b03      	ldr	r3, [pc, #12]	; (2ec70 <MQTTClientInit+0x80>)
   2ec64:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2ec66:	46c0      	nop			; (mov r8, r8)
   2ec68:	46bd      	mov	sp, r7
   2ec6a:	b006      	add	sp, #24
   2ec6c:	bd80      	pop	{r7, pc}
   2ec6e:	46c0      	nop			; (mov r8, r8)
   2ec70:	0002f9d5 	.word	0x0002f9d5

0002ec74 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2ec74:	b590      	push	{r4, r7, lr}
   2ec76:	b08b      	sub	sp, #44	; 0x2c
   2ec78:	af00      	add	r7, sp, #0
   2ec7a:	60f8      	str	r0, [r7, #12]
   2ec7c:	60b9      	str	r1, [r7, #8]
   2ec7e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2ec80:	2301      	movs	r3, #1
   2ec82:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2ec84:	2300      	movs	r3, #0
   2ec86:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2ec88:	2304      	movs	r3, #4
   2ec8a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2ec8c:	68bb      	ldr	r3, [r7, #8]
   2ec8e:	2200      	movs	r2, #0
   2ec90:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2ec92:	2301      	movs	r3, #1
   2ec94:	425b      	negs	r3, r3
   2ec96:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2ec98:	6a3b      	ldr	r3, [r7, #32]
   2ec9a:	3301      	adds	r3, #1
   2ec9c:	623b      	str	r3, [r7, #32]
   2ec9e:	6a3a      	ldr	r2, [r7, #32]
   2eca0:	69fb      	ldr	r3, [r7, #28]
   2eca2:	429a      	cmp	r2, r3
   2eca4:	dd03      	ble.n	2ecae <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2eca6:	2301      	movs	r3, #1
   2eca8:	425b      	negs	r3, r3
   2ecaa:	61bb      	str	r3, [r7, #24]
            goto exit;
   2ecac:	e026      	b.n	2ecfc <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2ecae:	68fb      	ldr	r3, [r7, #12]
   2ecb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ecb2:	689c      	ldr	r4, [r3, #8]
   2ecb4:	68fb      	ldr	r3, [r7, #12]
   2ecb6:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2ecb8:	687b      	ldr	r3, [r7, #4]
   2ecba:	2217      	movs	r2, #23
   2ecbc:	18b9      	adds	r1, r7, r2
   2ecbe:	2201      	movs	r2, #1
   2ecc0:	47a0      	blx	r4
   2ecc2:	0003      	movs	r3, r0
   2ecc4:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2ecc6:	69bb      	ldr	r3, [r7, #24]
   2ecc8:	2b01      	cmp	r3, #1
   2ecca:	d116      	bne.n	2ecfa <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2eccc:	68bb      	ldr	r3, [r7, #8]
   2ecce:	681a      	ldr	r2, [r3, #0]
   2ecd0:	2317      	movs	r3, #23
   2ecd2:	18fb      	adds	r3, r7, r3
   2ecd4:	781b      	ldrb	r3, [r3, #0]
   2ecd6:	0019      	movs	r1, r3
   2ecd8:	237f      	movs	r3, #127	; 0x7f
   2ecda:	400b      	ands	r3, r1
   2ecdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ecde:	434b      	muls	r3, r1
   2ece0:	18d2      	adds	r2, r2, r3
   2ece2:	68bb      	ldr	r3, [r7, #8]
   2ece4:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2ece6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ece8:	01db      	lsls	r3, r3, #7
   2ecea:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2ecec:	2317      	movs	r3, #23
   2ecee:	18fb      	adds	r3, r7, r3
   2ecf0:	781b      	ldrb	r3, [r3, #0]
   2ecf2:	b25b      	sxtb	r3, r3
   2ecf4:	2b00      	cmp	r3, #0
   2ecf6:	dbcc      	blt.n	2ec92 <decodePacket+0x1e>
   2ecf8:	e000      	b.n	2ecfc <decodePacket+0x88>
            goto exit;
   2ecfa:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2ecfc:	6a3b      	ldr	r3, [r7, #32]
}
   2ecfe:	0018      	movs	r0, r3
   2ed00:	46bd      	mov	sp, r7
   2ed02:	b00b      	add	sp, #44	; 0x2c
   2ed04:	bd90      	pop	{r4, r7, pc}
	...

0002ed08 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2ed08:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ed0a:	46c6      	mov	lr, r8
   2ed0c:	b500      	push	{lr}
   2ed0e:	b086      	sub	sp, #24
   2ed10:	af00      	add	r7, sp, #0
   2ed12:	6078      	str	r0, [r7, #4]
   2ed14:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2ed16:	2301      	movs	r3, #1
   2ed18:	425b      	negs	r3, r3
   2ed1a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2ed1c:	2300      	movs	r3, #0
   2ed1e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2ed20:	2300      	movs	r3, #0
   2ed22:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2ed24:	2300      	movs	r3, #0
   2ed26:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2ed28:	687b      	ldr	r3, [r7, #4]
   2ed2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ed2c:	689c      	ldr	r4, [r3, #8]
   2ed2e:	687b      	ldr	r3, [r7, #4]
   2ed30:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ed32:	687b      	ldr	r3, [r7, #4]
   2ed34:	695e      	ldr	r6, [r3, #20]
   2ed36:	683b      	ldr	r3, [r7, #0]
   2ed38:	0018      	movs	r0, r3
   2ed3a:	4b2b      	ldr	r3, [pc, #172]	; (2ede8 <readPacket+0xe0>)
   2ed3c:	4798      	blx	r3
   2ed3e:	0003      	movs	r3, r0
   2ed40:	2201      	movs	r2, #1
   2ed42:	0031      	movs	r1, r6
   2ed44:	0028      	movs	r0, r5
   2ed46:	47a0      	blx	r4
   2ed48:	0003      	movs	r3, r0
   2ed4a:	2b01      	cmp	r3, #1
   2ed4c:	d141      	bne.n	2edd2 <readPacket+0xca>
        goto exit;

    len = 1;
   2ed4e:	2301      	movs	r3, #1
   2ed50:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2ed52:	683b      	ldr	r3, [r7, #0]
   2ed54:	0018      	movs	r0, r3
   2ed56:	4b24      	ldr	r3, [pc, #144]	; (2ede8 <readPacket+0xe0>)
   2ed58:	4798      	blx	r3
   2ed5a:	0002      	movs	r2, r0
   2ed5c:	2308      	movs	r3, #8
   2ed5e:	18f9      	adds	r1, r7, r3
   2ed60:	687b      	ldr	r3, [r7, #4]
   2ed62:	0018      	movs	r0, r3
   2ed64:	4b21      	ldr	r3, [pc, #132]	; (2edec <readPacket+0xe4>)
   2ed66:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2ed68:	687b      	ldr	r3, [r7, #4]
   2ed6a:	695b      	ldr	r3, [r3, #20]
   2ed6c:	3301      	adds	r3, #1
   2ed6e:	68ba      	ldr	r2, [r7, #8]
   2ed70:	0011      	movs	r1, r2
   2ed72:	0018      	movs	r0, r3
   2ed74:	4b1e      	ldr	r3, [pc, #120]	; (2edf0 <readPacket+0xe8>)
   2ed76:	4798      	blx	r3
   2ed78:	0002      	movs	r2, r0
   2ed7a:	693b      	ldr	r3, [r7, #16]
   2ed7c:	189b      	adds	r3, r3, r2
   2ed7e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2ed80:	68bb      	ldr	r3, [r7, #8]
   2ed82:	2b00      	cmp	r3, #0
   2ed84:	dd17      	ble.n	2edb6 <readPacket+0xae>
   2ed86:	687b      	ldr	r3, [r7, #4]
   2ed88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ed8a:	689c      	ldr	r4, [r3, #8]
   2ed8c:	687b      	ldr	r3, [r7, #4]
   2ed8e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ed90:	687b      	ldr	r3, [r7, #4]
   2ed92:	695a      	ldr	r2, [r3, #20]
   2ed94:	693b      	ldr	r3, [r7, #16]
   2ed96:	18d6      	adds	r6, r2, r3
   2ed98:	68bb      	ldr	r3, [r7, #8]
   2ed9a:	4698      	mov	r8, r3
   2ed9c:	683b      	ldr	r3, [r7, #0]
   2ed9e:	0018      	movs	r0, r3
   2eda0:	4b11      	ldr	r3, [pc, #68]	; (2ede8 <readPacket+0xe0>)
   2eda2:	4798      	blx	r3
   2eda4:	0003      	movs	r3, r0
   2eda6:	4642      	mov	r2, r8
   2eda8:	0031      	movs	r1, r6
   2edaa:	0028      	movs	r0, r5
   2edac:	47a0      	blx	r4
   2edae:	0002      	movs	r2, r0
   2edb0:	68bb      	ldr	r3, [r7, #8]
   2edb2:	429a      	cmp	r2, r3
   2edb4:	d10f      	bne.n	2edd6 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2edb6:	687b      	ldr	r3, [r7, #4]
   2edb8:	695b      	ldr	r3, [r3, #20]
   2edba:	781a      	ldrb	r2, [r3, #0]
   2edbc:	230c      	movs	r3, #12
   2edbe:	18fb      	adds	r3, r7, r3
   2edc0:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2edc2:	230c      	movs	r3, #12
   2edc4:	18fb      	adds	r3, r7, r3
   2edc6:	781b      	ldrb	r3, [r3, #0]
   2edc8:	061b      	lsls	r3, r3, #24
   2edca:	0f1b      	lsrs	r3, r3, #28
   2edcc:	b2db      	uxtb	r3, r3
   2edce:	617b      	str	r3, [r7, #20]
   2edd0:	e002      	b.n	2edd8 <readPacket+0xd0>
        goto exit;
   2edd2:	46c0      	nop			; (mov r8, r8)
   2edd4:	e000      	b.n	2edd8 <readPacket+0xd0>
        goto exit;
   2edd6:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2edd8:	697b      	ldr	r3, [r7, #20]
}
   2edda:	0018      	movs	r0, r3
   2eddc:	46bd      	mov	sp, r7
   2edde:	b006      	add	sp, #24
   2ede0:	bc04      	pop	{r2}
   2ede2:	4690      	mov	r8, r2
   2ede4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ede6:	46c0      	nop			; (mov r8, r8)
   2ede8:	0002f9ad 	.word	0x0002f9ad
   2edec:	0002ec75 	.word	0x0002ec75
   2edf0:	00030785 	.word	0x00030785

0002edf4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2edf4:	b580      	push	{r7, lr}
   2edf6:	b086      	sub	sp, #24
   2edf8:	af00      	add	r7, sp, #0
   2edfa:	6078      	str	r0, [r7, #4]
   2edfc:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2edfe:	687b      	ldr	r3, [r7, #4]
   2ee00:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2ee02:	683b      	ldr	r3, [r7, #0]
   2ee04:	689b      	ldr	r3, [r3, #8]
   2ee06:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2ee08:	683b      	ldr	r3, [r7, #0]
   2ee0a:	685b      	ldr	r3, [r3, #4]
   2ee0c:	001a      	movs	r2, r3
   2ee0e:	693b      	ldr	r3, [r7, #16]
   2ee10:	189b      	adds	r3, r3, r2
   2ee12:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2ee14:	e039      	b.n	2ee8a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2ee16:	693b      	ldr	r3, [r7, #16]
   2ee18:	781b      	ldrb	r3, [r3, #0]
   2ee1a:	2b2f      	cmp	r3, #47	; 0x2f
   2ee1c:	d103      	bne.n	2ee26 <isTopicMatched+0x32>
   2ee1e:	697b      	ldr	r3, [r7, #20]
   2ee20:	781b      	ldrb	r3, [r3, #0]
   2ee22:	2b2f      	cmp	r3, #47	; 0x2f
   2ee24:	d13a      	bne.n	2ee9c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2ee26:	697b      	ldr	r3, [r7, #20]
   2ee28:	781b      	ldrb	r3, [r3, #0]
   2ee2a:	2b2b      	cmp	r3, #43	; 0x2b
   2ee2c:	d009      	beq.n	2ee42 <isTopicMatched+0x4e>
   2ee2e:	697b      	ldr	r3, [r7, #20]
   2ee30:	781b      	ldrb	r3, [r3, #0]
   2ee32:	2b23      	cmp	r3, #35	; 0x23
   2ee34:	d005      	beq.n	2ee42 <isTopicMatched+0x4e>
   2ee36:	697b      	ldr	r3, [r7, #20]
   2ee38:	781a      	ldrb	r2, [r3, #0]
   2ee3a:	693b      	ldr	r3, [r7, #16]
   2ee3c:	781b      	ldrb	r3, [r3, #0]
   2ee3e:	429a      	cmp	r2, r3
   2ee40:	d12e      	bne.n	2eea0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2ee42:	697b      	ldr	r3, [r7, #20]
   2ee44:	781b      	ldrb	r3, [r3, #0]
   2ee46:	2b2b      	cmp	r3, #43	; 0x2b
   2ee48:	d112      	bne.n	2ee70 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2ee4a:	693b      	ldr	r3, [r7, #16]
   2ee4c:	3301      	adds	r3, #1
   2ee4e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ee50:	e005      	b.n	2ee5e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2ee52:	693b      	ldr	r3, [r7, #16]
   2ee54:	3301      	adds	r3, #1
   2ee56:	613b      	str	r3, [r7, #16]
   2ee58:	693b      	ldr	r3, [r7, #16]
   2ee5a:	3301      	adds	r3, #1
   2ee5c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ee5e:	68fa      	ldr	r2, [r7, #12]
   2ee60:	68bb      	ldr	r3, [r7, #8]
   2ee62:	429a      	cmp	r2, r3
   2ee64:	d20b      	bcs.n	2ee7e <isTopicMatched+0x8a>
   2ee66:	68fb      	ldr	r3, [r7, #12]
   2ee68:	781b      	ldrb	r3, [r3, #0]
   2ee6a:	2b2f      	cmp	r3, #47	; 0x2f
   2ee6c:	d1f1      	bne.n	2ee52 <isTopicMatched+0x5e>
   2ee6e:	e006      	b.n	2ee7e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2ee70:	697b      	ldr	r3, [r7, #20]
   2ee72:	781b      	ldrb	r3, [r3, #0]
   2ee74:	2b23      	cmp	r3, #35	; 0x23
   2ee76:	d102      	bne.n	2ee7e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2ee78:	68bb      	ldr	r3, [r7, #8]
   2ee7a:	3b01      	subs	r3, #1
   2ee7c:	613b      	str	r3, [r7, #16]
        curf++;
   2ee7e:	697b      	ldr	r3, [r7, #20]
   2ee80:	3301      	adds	r3, #1
   2ee82:	617b      	str	r3, [r7, #20]
        curn++;
   2ee84:	693b      	ldr	r3, [r7, #16]
   2ee86:	3301      	adds	r3, #1
   2ee88:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2ee8a:	697b      	ldr	r3, [r7, #20]
   2ee8c:	781b      	ldrb	r3, [r3, #0]
   2ee8e:	2b00      	cmp	r3, #0
   2ee90:	d007      	beq.n	2eea2 <isTopicMatched+0xae>
   2ee92:	693a      	ldr	r2, [r7, #16]
   2ee94:	68bb      	ldr	r3, [r7, #8]
   2ee96:	429a      	cmp	r2, r3
   2ee98:	d3bd      	bcc.n	2ee16 <isTopicMatched+0x22>
   2ee9a:	e002      	b.n	2eea2 <isTopicMatched+0xae>
            break;
   2ee9c:	46c0      	nop			; (mov r8, r8)
   2ee9e:	e000      	b.n	2eea2 <isTopicMatched+0xae>
            break;
   2eea0:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2eea2:	693a      	ldr	r2, [r7, #16]
   2eea4:	68bb      	ldr	r3, [r7, #8]
   2eea6:	429a      	cmp	r2, r3
   2eea8:	d105      	bne.n	2eeb6 <isTopicMatched+0xc2>
   2eeaa:	697b      	ldr	r3, [r7, #20]
   2eeac:	781b      	ldrb	r3, [r3, #0]
   2eeae:	2b00      	cmp	r3, #0
   2eeb0:	d101      	bne.n	2eeb6 <isTopicMatched+0xc2>
   2eeb2:	2301      	movs	r3, #1
   2eeb4:	e000      	b.n	2eeb8 <isTopicMatched+0xc4>
   2eeb6:	2300      	movs	r3, #0
   2eeb8:	b2db      	uxtb	r3, r3
}
   2eeba:	0018      	movs	r0, r3
   2eebc:	46bd      	mov	sp, r7
   2eebe:	b006      	add	sp, #24
   2eec0:	bd80      	pop	{r7, pc}
	...

0002eec4 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2eec4:	b580      	push	{r7, lr}
   2eec6:	b08a      	sub	sp, #40	; 0x28
   2eec8:	af00      	add	r7, sp, #0
   2eeca:	60f8      	str	r0, [r7, #12]
   2eecc:	60b9      	str	r1, [r7, #8]
   2eece:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2eed0:	2301      	movs	r3, #1
   2eed2:	425b      	negs	r3, r3
   2eed4:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2eed6:	2300      	movs	r3, #0
   2eed8:	627b      	str	r3, [r7, #36]	; 0x24
   2eeda:	e044      	b.n	2ef66 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2eedc:	68fa      	ldr	r2, [r7, #12]
   2eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eee0:	3304      	adds	r3, #4
   2eee2:	00db      	lsls	r3, r3, #3
   2eee4:	18d3      	adds	r3, r2, r3
   2eee6:	3304      	adds	r3, #4
   2eee8:	681b      	ldr	r3, [r3, #0]
   2eeea:	2b00      	cmp	r3, #0
   2eeec:	d038      	beq.n	2ef60 <deliverMessage+0x9c>
   2eeee:	68fa      	ldr	r2, [r7, #12]
   2eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eef2:	3304      	adds	r3, #4
   2eef4:	00db      	lsls	r3, r3, #3
   2eef6:	18d3      	adds	r3, r2, r3
   2eef8:	3304      	adds	r3, #4
   2eefa:	681a      	ldr	r2, [r3, #0]
   2eefc:	68bb      	ldr	r3, [r7, #8]
   2eefe:	0011      	movs	r1, r2
   2ef00:	0018      	movs	r0, r3
   2ef02:	4b28      	ldr	r3, [pc, #160]	; (2efa4 <deliverMessage+0xe0>)
   2ef04:	4798      	blx	r3
   2ef06:	1e03      	subs	r3, r0, #0
   2ef08:	d10d      	bne.n	2ef26 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2ef0a:	68fa      	ldr	r2, [r7, #12]
   2ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ef0e:	3304      	adds	r3, #4
   2ef10:	00db      	lsls	r3, r3, #3
   2ef12:	18d3      	adds	r3, r2, r3
   2ef14:	3304      	adds	r3, #4
   2ef16:	681b      	ldr	r3, [r3, #0]
   2ef18:	68ba      	ldr	r2, [r7, #8]
   2ef1a:	0011      	movs	r1, r2
   2ef1c:	0018      	movs	r0, r3
   2ef1e:	4b22      	ldr	r3, [pc, #136]	; (2efa8 <deliverMessage+0xe4>)
   2ef20:	4798      	blx	r3
   2ef22:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2ef24:	d01c      	beq.n	2ef60 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2ef26:	68fa      	ldr	r2, [r7, #12]
   2ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ef2a:	3304      	adds	r3, #4
   2ef2c:	00db      	lsls	r3, r3, #3
   2ef2e:	18d3      	adds	r3, r2, r3
   2ef30:	3308      	adds	r3, #8
   2ef32:	681b      	ldr	r3, [r3, #0]
   2ef34:	2b00      	cmp	r3, #0
   2ef36:	d013      	beq.n	2ef60 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2ef38:	687a      	ldr	r2, [r7, #4]
   2ef3a:	68b9      	ldr	r1, [r7, #8]
   2ef3c:	2318      	movs	r3, #24
   2ef3e:	18fb      	adds	r3, r7, r3
   2ef40:	0018      	movs	r0, r3
   2ef42:	4b1a      	ldr	r3, [pc, #104]	; (2efac <deliverMessage+0xe8>)
   2ef44:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2ef46:	68fa      	ldr	r2, [r7, #12]
   2ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ef4a:	3304      	adds	r3, #4
   2ef4c:	00db      	lsls	r3, r3, #3
   2ef4e:	18d3      	adds	r3, r2, r3
   2ef50:	3308      	adds	r3, #8
   2ef52:	681b      	ldr	r3, [r3, #0]
   2ef54:	2218      	movs	r2, #24
   2ef56:	18ba      	adds	r2, r7, r2
   2ef58:	0010      	movs	r0, r2
   2ef5a:	4798      	blx	r3
                rc = SUCCESS;
   2ef5c:	2300      	movs	r3, #0
   2ef5e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ef62:	3301      	adds	r3, #1
   2ef64:	627b      	str	r3, [r7, #36]	; 0x24
   2ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ef68:	2b04      	cmp	r3, #4
   2ef6a:	ddb7      	ble.n	2eedc <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2ef6c:	6a3b      	ldr	r3, [r7, #32]
   2ef6e:	3301      	adds	r3, #1
   2ef70:	d112      	bne.n	2ef98 <deliverMessage+0xd4>
   2ef72:	68fb      	ldr	r3, [r7, #12]
   2ef74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef76:	2b00      	cmp	r3, #0
   2ef78:	d00e      	beq.n	2ef98 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2ef7a:	687a      	ldr	r2, [r7, #4]
   2ef7c:	68b9      	ldr	r1, [r7, #8]
   2ef7e:	2310      	movs	r3, #16
   2ef80:	18fb      	adds	r3, r7, r3
   2ef82:	0018      	movs	r0, r3
   2ef84:	4b09      	ldr	r3, [pc, #36]	; (2efac <deliverMessage+0xe8>)
   2ef86:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2ef88:	68fb      	ldr	r3, [r7, #12]
   2ef8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef8c:	2210      	movs	r2, #16
   2ef8e:	18ba      	adds	r2, r7, r2
   2ef90:	0010      	movs	r0, r2
   2ef92:	4798      	blx	r3
        rc = SUCCESS;
   2ef94:	2300      	movs	r3, #0
   2ef96:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2ef98:	6a3b      	ldr	r3, [r7, #32]
}
   2ef9a:	0018      	movs	r0, r3
   2ef9c:	46bd      	mov	sp, r7
   2ef9e:	b00a      	add	sp, #40	; 0x28
   2efa0:	bd80      	pop	{r7, pc}
   2efa2:	46c0      	nop			; (mov r8, r8)
   2efa4:	00030b99 	.word	0x00030b99
   2efa8:	0002edf5 	.word	0x0002edf5
   2efac:	0002eafd 	.word	0x0002eafd

0002efb0 <keepalive>:


int keepalive(MQTTClient* c)
{
   2efb0:	b580      	push	{r7, lr}
   2efb2:	b088      	sub	sp, #32
   2efb4:	af00      	add	r7, sp, #0
   2efb6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2efb8:	2301      	movs	r3, #1
   2efba:	425b      	negs	r3, r3
   2efbc:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2efbe:	687b      	ldr	r3, [r7, #4]
   2efc0:	699b      	ldr	r3, [r3, #24]
   2efc2:	2b00      	cmp	r3, #0
   2efc4:	d102      	bne.n	2efcc <keepalive+0x1c>
    {
        rc = SUCCESS;
   2efc6:	2300      	movs	r3, #0
   2efc8:	61fb      	str	r3, [r7, #28]
        goto exit;
   2efca:	e033      	b.n	2f034 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2efcc:	687b      	ldr	r3, [r7, #4]
   2efce:	3354      	adds	r3, #84	; 0x54
   2efd0:	0018      	movs	r0, r3
   2efd2:	4b1b      	ldr	r3, [pc, #108]	; (2f040 <keepalive+0x90>)
   2efd4:	4798      	blx	r3
   2efd6:	1e03      	subs	r3, r0, #0
   2efd8:	d02c      	beq.n	2f034 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2efda:	687b      	ldr	r3, [r7, #4]
   2efdc:	7f1b      	ldrb	r3, [r3, #28]
   2efde:	2b00      	cmp	r3, #0
   2efe0:	d128      	bne.n	2f034 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2efe2:	230c      	movs	r3, #12
   2efe4:	18fb      	adds	r3, r7, r3
   2efe6:	0018      	movs	r0, r3
   2efe8:	4b16      	ldr	r3, [pc, #88]	; (2f044 <keepalive+0x94>)
   2efea:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2efec:	23fa      	movs	r3, #250	; 0xfa
   2efee:	009a      	lsls	r2, r3, #2
   2eff0:	230c      	movs	r3, #12
   2eff2:	18fb      	adds	r3, r7, r3
   2eff4:	0011      	movs	r1, r2
   2eff6:	0018      	movs	r0, r3
   2eff8:	4b13      	ldr	r3, [pc, #76]	; (2f048 <keepalive+0x98>)
   2effa:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2effc:	687b      	ldr	r3, [r7, #4]
   2effe:	691a      	ldr	r2, [r3, #16]
   2f000:	687b      	ldr	r3, [r7, #4]
   2f002:	689b      	ldr	r3, [r3, #8]
   2f004:	0019      	movs	r1, r3
   2f006:	0010      	movs	r0, r2
   2f008:	4b10      	ldr	r3, [pc, #64]	; (2f04c <keepalive+0x9c>)
   2f00a:	4798      	blx	r3
   2f00c:	0003      	movs	r3, r0
   2f00e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f010:	69bb      	ldr	r3, [r7, #24]
   2f012:	2b00      	cmp	r3, #0
   2f014:	dd0e      	ble.n	2f034 <keepalive+0x84>
   2f016:	230c      	movs	r3, #12
   2f018:	18fa      	adds	r2, r7, r3
   2f01a:	69b9      	ldr	r1, [r7, #24]
   2f01c:	687b      	ldr	r3, [r7, #4]
   2f01e:	0018      	movs	r0, r3
   2f020:	4b0b      	ldr	r3, [pc, #44]	; (2f050 <keepalive+0xa0>)
   2f022:	4798      	blx	r3
   2f024:	0003      	movs	r3, r0
   2f026:	61fb      	str	r3, [r7, #28]
   2f028:	69fb      	ldr	r3, [r7, #28]
   2f02a:	2b00      	cmp	r3, #0
   2f02c:	d102      	bne.n	2f034 <keepalive+0x84>
                c->ping_outstanding = 1;
   2f02e:	687b      	ldr	r3, [r7, #4]
   2f030:	2201      	movs	r2, #1
   2f032:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f034:	69fb      	ldr	r3, [r7, #28]
}
   2f036:	0018      	movs	r0, r3
   2f038:	46bd      	mov	sp, r7
   2f03a:	b008      	add	sp, #32
   2f03c:	bd80      	pop	{r7, pc}
   2f03e:	46c0      	nop			; (mov r8, r8)
   2f040:	0002f931 	.word	0x0002f931
   2f044:	0002f9d5 	.word	0x0002f9d5
   2f048:	0002f95d 	.word	0x0002f95d
   2f04c:	000305a9 	.word	0x000305a9
   2f050:	0002eb4d 	.word	0x0002eb4d

0002f054 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f054:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f056:	b095      	sub	sp, #84	; 0x54
   2f058:	af06      	add	r7, sp, #24
   2f05a:	6078      	str	r0, [r7, #4]
   2f05c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f05e:	683a      	ldr	r2, [r7, #0]
   2f060:	687b      	ldr	r3, [r7, #4]
   2f062:	0011      	movs	r1, r2
   2f064:	0018      	movs	r0, r3
   2f066:	4b70      	ldr	r3, [pc, #448]	; (2f228 <cycle+0x1d4>)
   2f068:	4798      	blx	r3
   2f06a:	0002      	movs	r2, r0
   2f06c:	232e      	movs	r3, #46	; 0x2e
   2f06e:	18fb      	adds	r3, r7, r3
   2f070:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f072:	2300      	movs	r3, #0
   2f074:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f076:	2300      	movs	r3, #0
   2f078:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f07a:	232e      	movs	r3, #46	; 0x2e
   2f07c:	18fb      	adds	r3, r7, r3
   2f07e:	881b      	ldrh	r3, [r3, #0]
   2f080:	2b0d      	cmp	r3, #13
   2f082:	d900      	bls.n	2f086 <cycle+0x32>
   2f084:	e0bd      	b.n	2f202 <cycle+0x1ae>
   2f086:	009a      	lsls	r2, r3, #2
   2f088:	4b68      	ldr	r3, [pc, #416]	; (2f22c <cycle+0x1d8>)
   2f08a:	18d3      	adds	r3, r2, r3
   2f08c:	681b      	ldr	r3, [r3, #0]
   2f08e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f090:	687b      	ldr	r3, [r7, #4]
   2f092:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f094:	687b      	ldr	r3, [r7, #4]
   2f096:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f098:	001e      	movs	r6, r3
   2f09a:	2310      	movs	r3, #16
   2f09c:	18fb      	adds	r3, r7, r3
   2f09e:	1d1d      	adds	r5, r3, #4
   2f0a0:	2310      	movs	r3, #16
   2f0a2:	18fb      	adds	r3, r7, r3
   2f0a4:	1c5c      	adds	r4, r3, #1
   2f0a6:	230c      	movs	r3, #12
   2f0a8:	18f9      	adds	r1, r7, r3
   2f0aa:	2310      	movs	r3, #16
   2f0ac:	18fb      	adds	r3, r7, r3
   2f0ae:	1c98      	adds	r0, r3, #2
   2f0b0:	9604      	str	r6, [sp, #16]
   2f0b2:	9203      	str	r2, [sp, #12]
   2f0b4:	2310      	movs	r3, #16
   2f0b6:	18fb      	adds	r3, r7, r3
   2f0b8:	330c      	adds	r3, #12
   2f0ba:	9302      	str	r3, [sp, #8]
   2f0bc:	2310      	movs	r3, #16
   2f0be:	18fb      	adds	r3, r7, r3
   2f0c0:	3308      	adds	r3, #8
   2f0c2:	9301      	str	r3, [sp, #4]
   2f0c4:	2320      	movs	r3, #32
   2f0c6:	18fb      	adds	r3, r7, r3
   2f0c8:	9300      	str	r3, [sp, #0]
   2f0ca:	002b      	movs	r3, r5
   2f0cc:	0022      	movs	r2, r4
   2f0ce:	4c58      	ldr	r4, [pc, #352]	; (2f230 <cycle+0x1dc>)
   2f0d0:	47a0      	blx	r4
   2f0d2:	0003      	movs	r3, r0
   2f0d4:	2b01      	cmp	r3, #1
   2f0d6:	d000      	beq.n	2f0da <cycle+0x86>
   2f0d8:	e098      	b.n	2f20c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f0da:	68fb      	ldr	r3, [r7, #12]
   2f0dc:	b2da      	uxtb	r2, r3
   2f0de:	2310      	movs	r3, #16
   2f0e0:	18fb      	adds	r3, r7, r3
   2f0e2:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f0e4:	2310      	movs	r3, #16
   2f0e6:	18fa      	adds	r2, r7, r3
   2f0e8:	2320      	movs	r3, #32
   2f0ea:	18f9      	adds	r1, r7, r3
   2f0ec:	687b      	ldr	r3, [r7, #4]
   2f0ee:	0018      	movs	r0, r3
   2f0f0:	4b50      	ldr	r3, [pc, #320]	; (2f234 <cycle+0x1e0>)
   2f0f2:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f0f4:	2310      	movs	r3, #16
   2f0f6:	18fb      	adds	r3, r7, r3
   2f0f8:	781b      	ldrb	r3, [r3, #0]
   2f0fa:	2b00      	cmp	r3, #0
   2f0fc:	d100      	bne.n	2f100 <cycle+0xac>
   2f0fe:	e07d      	b.n	2f1fc <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f100:	2310      	movs	r3, #16
   2f102:	18fb      	adds	r3, r7, r3
   2f104:	781b      	ldrb	r3, [r3, #0]
   2f106:	2b01      	cmp	r3, #1
   2f108:	d10f      	bne.n	2f12a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f10a:	687b      	ldr	r3, [r7, #4]
   2f10c:	6918      	ldr	r0, [r3, #16]
   2f10e:	687b      	ldr	r3, [r7, #4]
   2f110:	689b      	ldr	r3, [r3, #8]
   2f112:	0019      	movs	r1, r3
   2f114:	2310      	movs	r3, #16
   2f116:	18fb      	adds	r3, r7, r3
   2f118:	889b      	ldrh	r3, [r3, #4]
   2f11a:	9300      	str	r3, [sp, #0]
   2f11c:	2300      	movs	r3, #0
   2f11e:	2204      	movs	r2, #4
   2f120:	4c45      	ldr	r4, [pc, #276]	; (2f238 <cycle+0x1e4>)
   2f122:	47a0      	blx	r4
   2f124:	0003      	movs	r3, r0
   2f126:	637b      	str	r3, [r7, #52]	; 0x34
   2f128:	e013      	b.n	2f152 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f12a:	2310      	movs	r3, #16
   2f12c:	18fb      	adds	r3, r7, r3
   2f12e:	781b      	ldrb	r3, [r3, #0]
   2f130:	2b02      	cmp	r3, #2
   2f132:	d10e      	bne.n	2f152 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f134:	687b      	ldr	r3, [r7, #4]
   2f136:	6918      	ldr	r0, [r3, #16]
   2f138:	687b      	ldr	r3, [r7, #4]
   2f13a:	689b      	ldr	r3, [r3, #8]
   2f13c:	0019      	movs	r1, r3
   2f13e:	2310      	movs	r3, #16
   2f140:	18fb      	adds	r3, r7, r3
   2f142:	889b      	ldrh	r3, [r3, #4]
   2f144:	9300      	str	r3, [sp, #0]
   2f146:	2300      	movs	r3, #0
   2f148:	2205      	movs	r2, #5
   2f14a:	4c3b      	ldr	r4, [pc, #236]	; (2f238 <cycle+0x1e4>)
   2f14c:	47a0      	blx	r4
   2f14e:	0003      	movs	r3, r0
   2f150:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f154:	2b00      	cmp	r3, #0
   2f156:	dc03      	bgt.n	2f160 <cycle+0x10c>
                    rc = FAILURE;
   2f158:	2301      	movs	r3, #1
   2f15a:	425b      	negs	r3, r3
   2f15c:	633b      	str	r3, [r7, #48]	; 0x30
   2f15e:	e007      	b.n	2f170 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f160:	683a      	ldr	r2, [r7, #0]
   2f162:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f164:	687b      	ldr	r3, [r7, #4]
   2f166:	0018      	movs	r0, r3
   2f168:	4b34      	ldr	r3, [pc, #208]	; (2f23c <cycle+0x1e8>)
   2f16a:	4798      	blx	r3
   2f16c:	0003      	movs	r3, r0
   2f16e:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f172:	3301      	adds	r3, #1
   2f174:	d142      	bne.n	2f1fc <cycle+0x1a8>
                    goto exit; // there was a problem
   2f176:	46c0      	nop			; (mov r8, r8)
   2f178:	e049      	b.n	2f20e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f17a:	687b      	ldr	r3, [r7, #4]
   2f17c:	695c      	ldr	r4, [r3, #20]
   2f17e:	687b      	ldr	r3, [r7, #4]
   2f180:	68db      	ldr	r3, [r3, #12]
   2f182:	220a      	movs	r2, #10
   2f184:	18ba      	adds	r2, r7, r2
   2f186:	2109      	movs	r1, #9
   2f188:	1879      	adds	r1, r7, r1
   2f18a:	2008      	movs	r0, #8
   2f18c:	1838      	adds	r0, r7, r0
   2f18e:	9300      	str	r3, [sp, #0]
   2f190:	0023      	movs	r3, r4
   2f192:	4c2b      	ldr	r4, [pc, #172]	; (2f240 <cycle+0x1ec>)
   2f194:	47a0      	blx	r4
   2f196:	0003      	movs	r3, r0
   2f198:	2b01      	cmp	r3, #1
   2f19a:	d003      	beq.n	2f1a4 <cycle+0x150>
                rc = FAILURE;
   2f19c:	2301      	movs	r3, #1
   2f19e:	425b      	negs	r3, r3
   2f1a0:	633b      	str	r3, [r7, #48]	; 0x30
   2f1a2:	e023      	b.n	2f1ec <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f1a4:	687b      	ldr	r3, [r7, #4]
   2f1a6:	6918      	ldr	r0, [r3, #16]
   2f1a8:	687b      	ldr	r3, [r7, #4]
   2f1aa:	689b      	ldr	r3, [r3, #8]
   2f1ac:	0019      	movs	r1, r3
   2f1ae:	230a      	movs	r3, #10
   2f1b0:	18fb      	adds	r3, r7, r3
   2f1b2:	881b      	ldrh	r3, [r3, #0]
   2f1b4:	9300      	str	r3, [sp, #0]
   2f1b6:	2300      	movs	r3, #0
   2f1b8:	2206      	movs	r2, #6
   2f1ba:	4c1f      	ldr	r4, [pc, #124]	; (2f238 <cycle+0x1e4>)
   2f1bc:	47a0      	blx	r4
   2f1be:	0003      	movs	r3, r0
   2f1c0:	637b      	str	r3, [r7, #52]	; 0x34
   2f1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f1c4:	2b00      	cmp	r3, #0
   2f1c6:	dc03      	bgt.n	2f1d0 <cycle+0x17c>
                rc = FAILURE;
   2f1c8:	2301      	movs	r3, #1
   2f1ca:	425b      	negs	r3, r3
   2f1cc:	633b      	str	r3, [r7, #48]	; 0x30
   2f1ce:	e00d      	b.n	2f1ec <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f1d0:	683a      	ldr	r2, [r7, #0]
   2f1d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f1d4:	687b      	ldr	r3, [r7, #4]
   2f1d6:	0018      	movs	r0, r3
   2f1d8:	4b18      	ldr	r3, [pc, #96]	; (2f23c <cycle+0x1e8>)
   2f1da:	4798      	blx	r3
   2f1dc:	0003      	movs	r3, r0
   2f1de:	633b      	str	r3, [r7, #48]	; 0x30
   2f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f1e2:	2b00      	cmp	r3, #0
   2f1e4:	d002      	beq.n	2f1ec <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f1e6:	2301      	movs	r3, #1
   2f1e8:	425b      	negs	r3, r3
   2f1ea:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f1ee:	3301      	adds	r3, #1
   2f1f0:	d106      	bne.n	2f200 <cycle+0x1ac>
                goto exit; // there was a problem
   2f1f2:	e00c      	b.n	2f20e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f1f4:	687b      	ldr	r3, [r7, #4]
   2f1f6:	2200      	movs	r2, #0
   2f1f8:	771a      	strb	r2, [r3, #28]
            break;
   2f1fa:	e002      	b.n	2f202 <cycle+0x1ae>
            break;
   2f1fc:	46c0      	nop			; (mov r8, r8)
   2f1fe:	e000      	b.n	2f202 <cycle+0x1ae>
            break;
   2f200:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f202:	687b      	ldr	r3, [r7, #4]
   2f204:	0018      	movs	r0, r3
   2f206:	4b0f      	ldr	r3, [pc, #60]	; (2f244 <cycle+0x1f0>)
   2f208:	4798      	blx	r3
   2f20a:	e000      	b.n	2f20e <cycle+0x1ba>
                goto exit;
   2f20c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f210:	2b00      	cmp	r3, #0
   2f212:	d103      	bne.n	2f21c <cycle+0x1c8>
        rc = packet_type;
   2f214:	232e      	movs	r3, #46	; 0x2e
   2f216:	18fb      	adds	r3, r7, r3
   2f218:	881b      	ldrh	r3, [r3, #0]
   2f21a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f21e:	0018      	movs	r0, r3
   2f220:	46bd      	mov	sp, r7
   2f222:	b00f      	add	sp, #60	; 0x3c
   2f224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f226:	46c0      	nop			; (mov r8, r8)
   2f228:	0002ed09 	.word	0x0002ed09
   2f22c:	0003c258 	.word	0x0003c258
   2f230:	000305cd 	.word	0x000305cd
   2f234:	0002eec5 	.word	0x0002eec5
   2f238:	00030dc5 	.word	0x00030dc5
   2f23c:	0002eb4d 	.word	0x0002eb4d
   2f240:	000306d1 	.word	0x000306d1
   2f244:	0002efb1 	.word	0x0002efb1

0002f248 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f248:	b580      	push	{r7, lr}
   2f24a:	b086      	sub	sp, #24
   2f24c:	af00      	add	r7, sp, #0
   2f24e:	6078      	str	r0, [r7, #4]
   2f250:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f252:	2300      	movs	r3, #0
   2f254:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f256:	2308      	movs	r3, #8
   2f258:	18fb      	adds	r3, r7, r3
   2f25a:	0018      	movs	r0, r3
   2f25c:	4b11      	ldr	r3, [pc, #68]	; (2f2a4 <MQTTYield+0x5c>)
   2f25e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f260:	683a      	ldr	r2, [r7, #0]
   2f262:	2308      	movs	r3, #8
   2f264:	18fb      	adds	r3, r7, r3
   2f266:	0011      	movs	r1, r2
   2f268:	0018      	movs	r0, r3
   2f26a:	4b0f      	ldr	r3, [pc, #60]	; (2f2a8 <MQTTYield+0x60>)
   2f26c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f26e:	2308      	movs	r3, #8
   2f270:	18fa      	adds	r2, r7, r3
   2f272:	687b      	ldr	r3, [r7, #4]
   2f274:	0011      	movs	r1, r2
   2f276:	0018      	movs	r0, r3
   2f278:	4b0c      	ldr	r3, [pc, #48]	; (2f2ac <MQTTYield+0x64>)
   2f27a:	4798      	blx	r3
   2f27c:	0003      	movs	r3, r0
   2f27e:	3301      	adds	r3, #1
   2f280:	d103      	bne.n	2f28a <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f282:	2301      	movs	r3, #1
   2f284:	425b      	negs	r3, r3
   2f286:	617b      	str	r3, [r7, #20]
            break;
   2f288:	e006      	b.n	2f298 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f28a:	2308      	movs	r3, #8
   2f28c:	18fb      	adds	r3, r7, r3
   2f28e:	0018      	movs	r0, r3
   2f290:	4b07      	ldr	r3, [pc, #28]	; (2f2b0 <MQTTYield+0x68>)
   2f292:	4798      	blx	r3
   2f294:	1e03      	subs	r3, r0, #0
   2f296:	d0ea      	beq.n	2f26e <MQTTYield+0x26>
        
    return rc;
   2f298:	697b      	ldr	r3, [r7, #20]
}
   2f29a:	0018      	movs	r0, r3
   2f29c:	46bd      	mov	sp, r7
   2f29e:	b006      	add	sp, #24
   2f2a0:	bd80      	pop	{r7, pc}
   2f2a2:	46c0      	nop			; (mov r8, r8)
   2f2a4:	0002f9d5 	.word	0x0002f9d5
   2f2a8:	0002f95d 	.word	0x0002f95d
   2f2ac:	0002f055 	.word	0x0002f055
   2f2b0:	0002f931 	.word	0x0002f931

0002f2b4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f2b4:	b580      	push	{r7, lr}
   2f2b6:	b086      	sub	sp, #24
   2f2b8:	af00      	add	r7, sp, #0
   2f2ba:	60f8      	str	r0, [r7, #12]
   2f2bc:	60b9      	str	r1, [r7, #8]
   2f2be:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f2c0:	2301      	movs	r3, #1
   2f2c2:	425b      	negs	r3, r3
   2f2c4:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f2c6:	687b      	ldr	r3, [r7, #4]
   2f2c8:	0018      	movs	r0, r3
   2f2ca:	4b0b      	ldr	r3, [pc, #44]	; (2f2f8 <waitfor+0x44>)
   2f2cc:	4798      	blx	r3
   2f2ce:	1e03      	subs	r3, r0, #0
   2f2d0:	d10c      	bne.n	2f2ec <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f2d2:	687a      	ldr	r2, [r7, #4]
   2f2d4:	68fb      	ldr	r3, [r7, #12]
   2f2d6:	0011      	movs	r1, r2
   2f2d8:	0018      	movs	r0, r3
   2f2da:	4b08      	ldr	r3, [pc, #32]	; (2f2fc <waitfor+0x48>)
   2f2dc:	4798      	blx	r3
   2f2de:	0003      	movs	r3, r0
   2f2e0:	617b      	str	r3, [r7, #20]
   2f2e2:	697a      	ldr	r2, [r7, #20]
   2f2e4:	68bb      	ldr	r3, [r7, #8]
   2f2e6:	429a      	cmp	r2, r3
   2f2e8:	d1ed      	bne.n	2f2c6 <waitfor+0x12>
   2f2ea:	e000      	b.n	2f2ee <waitfor+0x3a>
            break; // we timed out
   2f2ec:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f2ee:	697b      	ldr	r3, [r7, #20]
}
   2f2f0:	0018      	movs	r0, r3
   2f2f2:	46bd      	mov	sp, r7
   2f2f4:	b006      	add	sp, #24
   2f2f6:	bd80      	pop	{r7, pc}
   2f2f8:	0002f931 	.word	0x0002f931
   2f2fc:	0002f055 	.word	0x0002f055

0002f300 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f300:	b590      	push	{r4, r7, lr}
   2f302:	b09f      	sub	sp, #124	; 0x7c
   2f304:	af00      	add	r7, sp, #0
   2f306:	6078      	str	r0, [r7, #4]
   2f308:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f30a:	2301      	movs	r3, #1
   2f30c:	425b      	negs	r3, r3
   2f30e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f310:	230c      	movs	r3, #12
   2f312:	18fa      	adds	r2, r7, r3
   2f314:	4b41      	ldr	r3, [pc, #260]	; (2f41c <MQTTConnect+0x11c>)
   2f316:	0010      	movs	r0, r2
   2f318:	0019      	movs	r1, r3
   2f31a:	2358      	movs	r3, #88	; 0x58
   2f31c:	001a      	movs	r2, r3
   2f31e:	4b40      	ldr	r3, [pc, #256]	; (2f420 <MQTTConnect+0x120>)
   2f320:	4798      	blx	r3
    int len = 0;
   2f322:	2300      	movs	r3, #0
   2f324:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f326:	687b      	ldr	r3, [r7, #4]
   2f328:	6a1b      	ldr	r3, [r3, #32]
   2f32a:	2b00      	cmp	r3, #0
   2f32c:	d166      	bne.n	2f3fc <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f32e:	2364      	movs	r3, #100	; 0x64
   2f330:	18fb      	adds	r3, r7, r3
   2f332:	0018      	movs	r0, r3
   2f334:	4b3b      	ldr	r3, [pc, #236]	; (2f424 <MQTTConnect+0x124>)
   2f336:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f338:	687b      	ldr	r3, [r7, #4]
   2f33a:	685a      	ldr	r2, [r3, #4]
   2f33c:	2364      	movs	r3, #100	; 0x64
   2f33e:	18fb      	adds	r3, r7, r3
   2f340:	0011      	movs	r1, r2
   2f342:	0018      	movs	r0, r3
   2f344:	4b38      	ldr	r3, [pc, #224]	; (2f428 <MQTTConnect+0x128>)
   2f346:	4798      	blx	r3

    if (options == 0)
   2f348:	683b      	ldr	r3, [r7, #0]
   2f34a:	2b00      	cmp	r3, #0
   2f34c:	d102      	bne.n	2f354 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f34e:	230c      	movs	r3, #12
   2f350:	18fb      	adds	r3, r7, r3
   2f352:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f354:	683b      	ldr	r3, [r7, #0]
   2f356:	8b1b      	ldrh	r3, [r3, #24]
   2f358:	001a      	movs	r2, r3
   2f35a:	687b      	ldr	r3, [r7, #4]
   2f35c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f35e:	687b      	ldr	r3, [r7, #4]
   2f360:	3354      	adds	r3, #84	; 0x54
   2f362:	001a      	movs	r2, r3
   2f364:	687b      	ldr	r3, [r7, #4]
   2f366:	699b      	ldr	r3, [r3, #24]
   2f368:	0019      	movs	r1, r3
   2f36a:	0010      	movs	r0, r2
   2f36c:	4b2f      	ldr	r3, [pc, #188]	; (2f42c <MQTTConnect+0x12c>)
   2f36e:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f370:	687b      	ldr	r3, [r7, #4]
   2f372:	6918      	ldr	r0, [r3, #16]
   2f374:	687b      	ldr	r3, [r7, #4]
   2f376:	689b      	ldr	r3, [r3, #8]
   2f378:	0019      	movs	r1, r3
   2f37a:	683b      	ldr	r3, [r7, #0]
   2f37c:	001a      	movs	r2, r3
   2f37e:	4b2c      	ldr	r3, [pc, #176]	; (2f430 <MQTTConnect+0x130>)
   2f380:	4798      	blx	r3
   2f382:	0003      	movs	r3, r0
   2f384:	673b      	str	r3, [r7, #112]	; 0x70
   2f386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f388:	2b00      	cmp	r3, #0
   2f38a:	dd39      	ble.n	2f400 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f38c:	2364      	movs	r3, #100	; 0x64
   2f38e:	18fa      	adds	r2, r7, r3
   2f390:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f392:	687b      	ldr	r3, [r7, #4]
   2f394:	0018      	movs	r0, r3
   2f396:	4b27      	ldr	r3, [pc, #156]	; (2f434 <MQTTConnect+0x134>)
   2f398:	4798      	blx	r3
   2f39a:	0003      	movs	r3, r0
   2f39c:	677b      	str	r3, [r7, #116]	; 0x74
   2f39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f3a0:	2b00      	cmp	r3, #0
   2f3a2:	d12f      	bne.n	2f404 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f3a4:	2364      	movs	r3, #100	; 0x64
   2f3a6:	18fa      	adds	r2, r7, r3
   2f3a8:	687b      	ldr	r3, [r7, #4]
   2f3aa:	2102      	movs	r1, #2
   2f3ac:	0018      	movs	r0, r3
   2f3ae:	4b22      	ldr	r3, [pc, #136]	; (2f438 <MQTTConnect+0x138>)
   2f3b0:	4798      	blx	r3
   2f3b2:	0003      	movs	r3, r0
   2f3b4:	2b02      	cmp	r3, #2
   2f3b6:	d11d      	bne.n	2f3f4 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f3b8:	230b      	movs	r3, #11
   2f3ba:	18fb      	adds	r3, r7, r3
   2f3bc:	22ff      	movs	r2, #255	; 0xff
   2f3be:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f3c0:	230a      	movs	r3, #10
   2f3c2:	18fb      	adds	r3, r7, r3
   2f3c4:	2200      	movs	r2, #0
   2f3c6:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f3c8:	687b      	ldr	r3, [r7, #4]
   2f3ca:	695a      	ldr	r2, [r3, #20]
   2f3cc:	687b      	ldr	r3, [r7, #4]
   2f3ce:	68db      	ldr	r3, [r3, #12]
   2f3d0:	210b      	movs	r1, #11
   2f3d2:	1879      	adds	r1, r7, r1
   2f3d4:	200a      	movs	r0, #10
   2f3d6:	1838      	adds	r0, r7, r0
   2f3d8:	4c18      	ldr	r4, [pc, #96]	; (2f43c <MQTTConnect+0x13c>)
   2f3da:	47a0      	blx	r4
   2f3dc:	0003      	movs	r3, r0
   2f3de:	2b01      	cmp	r3, #1
   2f3e0:	d104      	bne.n	2f3ec <MQTTConnect+0xec>
            rc = connack_rc;
   2f3e2:	230b      	movs	r3, #11
   2f3e4:	18fb      	adds	r3, r7, r3
   2f3e6:	781b      	ldrb	r3, [r3, #0]
   2f3e8:	677b      	str	r3, [r7, #116]	; 0x74
   2f3ea:	e00c      	b.n	2f406 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2f3ec:	2301      	movs	r3, #1
   2f3ee:	425b      	negs	r3, r3
   2f3f0:	677b      	str	r3, [r7, #116]	; 0x74
   2f3f2:	e008      	b.n	2f406 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2f3f4:	2301      	movs	r3, #1
   2f3f6:	425b      	negs	r3, r3
   2f3f8:	677b      	str	r3, [r7, #116]	; 0x74
   2f3fa:	e004      	b.n	2f406 <MQTTConnect+0x106>
		goto exit;
   2f3fc:	46c0      	nop			; (mov r8, r8)
   2f3fe:	e002      	b.n	2f406 <MQTTConnect+0x106>
        goto exit;
   2f400:	46c0      	nop			; (mov r8, r8)
   2f402:	e000      	b.n	2f406 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2f404:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2f406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f408:	2b00      	cmp	r3, #0
   2f40a:	d102      	bne.n	2f412 <MQTTConnect+0x112>
        c->isconnected = 1;
   2f40c:	687b      	ldr	r3, [r7, #4]
   2f40e:	2201      	movs	r2, #1
   2f410:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2f412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2f414:	0018      	movs	r0, r3
   2f416:	46bd      	mov	sp, r7
   2f418:	b01f      	add	sp, #124	; 0x7c
   2f41a:	bd90      	pop	{r4, r7, pc}
   2f41c:	0003c290 	.word	0x0003c290
   2f420:	00035341 	.word	0x00035341
   2f424:	0002f9d5 	.word	0x0002f9d5
   2f428:	0002f95d 	.word	0x0002f95d
   2f42c:	0002f985 	.word	0x0002f985
   2f430:	000301b1 	.word	0x000301b1
   2f434:	0002eb4d 	.word	0x0002eb4d
   2f438:	0002f2b5 	.word	0x0002f2b5
   2f43c:	0003042d 	.word	0x0003042d

0002f440 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2f440:	b5b0      	push	{r4, r5, r7, lr}
   2f442:	b096      	sub	sp, #88	; 0x58
   2f444:	af04      	add	r7, sp, #16
   2f446:	60f8      	str	r0, [r7, #12]
   2f448:	60b9      	str	r1, [r7, #8]
   2f44a:	603b      	str	r3, [r7, #0]
   2f44c:	1dfb      	adds	r3, r7, #7
   2f44e:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f450:	2301      	movs	r3, #1
   2f452:	425b      	negs	r3, r3
   2f454:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f456:	2300      	movs	r3, #0
   2f458:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2f45a:	2324      	movs	r3, #36	; 0x24
   2f45c:	18fb      	adds	r3, r7, r3
   2f45e:	2200      	movs	r2, #0
   2f460:	601a      	str	r2, [r3, #0]
   2f462:	2324      	movs	r3, #36	; 0x24
   2f464:	18fb      	adds	r3, r7, r3
   2f466:	2200      	movs	r2, #0
   2f468:	605a      	str	r2, [r3, #4]
   2f46a:	2324      	movs	r3, #36	; 0x24
   2f46c:	18fb      	adds	r3, r7, r3
   2f46e:	2200      	movs	r2, #0
   2f470:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2f472:	1dfb      	adds	r3, r7, #7
   2f474:	781b      	ldrb	r3, [r3, #0]
   2f476:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2f478:	2324      	movs	r3, #36	; 0x24
   2f47a:	18fb      	adds	r3, r7, r3
   2f47c:	68ba      	ldr	r2, [r7, #8]
   2f47e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f480:	68fb      	ldr	r3, [r7, #12]
   2f482:	6a1b      	ldr	r3, [r3, #32]
   2f484:	2b00      	cmp	r3, #0
   2f486:	d100      	bne.n	2f48a <MQTTSubscribe+0x4a>
   2f488:	e088      	b.n	2f59c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2f48a:	2330      	movs	r3, #48	; 0x30
   2f48c:	18fb      	adds	r3, r7, r3
   2f48e:	0018      	movs	r0, r3
   2f490:	4b47      	ldr	r3, [pc, #284]	; (2f5b0 <MQTTSubscribe+0x170>)
   2f492:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f494:	68fb      	ldr	r3, [r7, #12]
   2f496:	685a      	ldr	r2, [r3, #4]
   2f498:	2330      	movs	r3, #48	; 0x30
   2f49a:	18fb      	adds	r3, r7, r3
   2f49c:	0011      	movs	r1, r2
   2f49e:	0018      	movs	r0, r3
   2f4a0:	4b44      	ldr	r3, [pc, #272]	; (2f5b4 <MQTTSubscribe+0x174>)
   2f4a2:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2f4a4:	68fb      	ldr	r3, [r7, #12]
   2f4a6:	691c      	ldr	r4, [r3, #16]
   2f4a8:	68fb      	ldr	r3, [r7, #12]
   2f4aa:	689b      	ldr	r3, [r3, #8]
   2f4ac:	001d      	movs	r5, r3
   2f4ae:	68fb      	ldr	r3, [r7, #12]
   2f4b0:	0018      	movs	r0, r3
   2f4b2:	4b41      	ldr	r3, [pc, #260]	; (2f5b8 <MQTTSubscribe+0x178>)
   2f4b4:	4798      	blx	r3
   2f4b6:	0003      	movs	r3, r0
   2f4b8:	b29a      	uxth	r2, r3
   2f4ba:	2320      	movs	r3, #32
   2f4bc:	18fb      	adds	r3, r7, r3
   2f4be:	9302      	str	r3, [sp, #8]
   2f4c0:	2324      	movs	r3, #36	; 0x24
   2f4c2:	18fb      	adds	r3, r7, r3
   2f4c4:	9301      	str	r3, [sp, #4]
   2f4c6:	2301      	movs	r3, #1
   2f4c8:	9300      	str	r3, [sp, #0]
   2f4ca:	0013      	movs	r3, r2
   2f4cc:	2200      	movs	r2, #0
   2f4ce:	0029      	movs	r1, r5
   2f4d0:	0020      	movs	r0, r4
   2f4d2:	4c3a      	ldr	r4, [pc, #232]	; (2f5bc <MQTTSubscribe+0x17c>)
   2f4d4:	47a0      	blx	r4
   2f4d6:	0003      	movs	r3, r0
   2f4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2f4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f4dc:	2b00      	cmp	r3, #0
   2f4de:	dd5f      	ble.n	2f5a0 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f4e0:	2330      	movs	r3, #48	; 0x30
   2f4e2:	18fa      	adds	r2, r7, r3
   2f4e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2f4e6:	68fb      	ldr	r3, [r7, #12]
   2f4e8:	0018      	movs	r0, r3
   2f4ea:	4b35      	ldr	r3, [pc, #212]	; (2f5c0 <MQTTSubscribe+0x180>)
   2f4ec:	4798      	blx	r3
   2f4ee:	0003      	movs	r3, r0
   2f4f0:	647b      	str	r3, [r7, #68]	; 0x44
   2f4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f4f4:	2b00      	cmp	r3, #0
   2f4f6:	d155      	bne.n	2f5a4 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2f4f8:	2330      	movs	r3, #48	; 0x30
   2f4fa:	18fa      	adds	r2, r7, r3
   2f4fc:	68fb      	ldr	r3, [r7, #12]
   2f4fe:	2109      	movs	r1, #9
   2f500:	0018      	movs	r0, r3
   2f502:	4b30      	ldr	r3, [pc, #192]	; (2f5c4 <MQTTSubscribe+0x184>)
   2f504:	4798      	blx	r3
   2f506:	0003      	movs	r3, r0
   2f508:	2b09      	cmp	r3, #9
   2f50a:	d143      	bne.n	2f594 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2f50c:	2300      	movs	r3, #0
   2f50e:	61fb      	str	r3, [r7, #28]
   2f510:	2301      	movs	r3, #1
   2f512:	425b      	negs	r3, r3
   2f514:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2f516:	68fb      	ldr	r3, [r7, #12]
   2f518:	695a      	ldr	r2, [r3, #20]
   2f51a:	68fb      	ldr	r3, [r7, #12]
   2f51c:	68db      	ldr	r3, [r3, #12]
   2f51e:	001c      	movs	r4, r3
   2f520:	2318      	movs	r3, #24
   2f522:	18fb      	adds	r3, r7, r3
   2f524:	211c      	movs	r1, #28
   2f526:	1879      	adds	r1, r7, r1
   2f528:	2016      	movs	r0, #22
   2f52a:	1838      	adds	r0, r7, r0
   2f52c:	9401      	str	r4, [sp, #4]
   2f52e:	9200      	str	r2, [sp, #0]
   2f530:	000a      	movs	r2, r1
   2f532:	2101      	movs	r1, #1
   2f534:	4c24      	ldr	r4, [pc, #144]	; (2f5c8 <MQTTSubscribe+0x188>)
   2f536:	47a0      	blx	r4
   2f538:	0003      	movs	r3, r0
   2f53a:	2b01      	cmp	r3, #1
   2f53c:	d101      	bne.n	2f542 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2f53e:	69bb      	ldr	r3, [r7, #24]
   2f540:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2f542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f544:	2b80      	cmp	r3, #128	; 0x80
   2f546:	d02e      	beq.n	2f5a6 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f548:	2300      	movs	r3, #0
   2f54a:	643b      	str	r3, [r7, #64]	; 0x40
   2f54c:	e01e      	b.n	2f58c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2f54e:	68fa      	ldr	r2, [r7, #12]
   2f550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f552:	3304      	adds	r3, #4
   2f554:	00db      	lsls	r3, r3, #3
   2f556:	18d3      	adds	r3, r2, r3
   2f558:	3304      	adds	r3, #4
   2f55a:	681b      	ldr	r3, [r3, #0]
   2f55c:	2b00      	cmp	r3, #0
   2f55e:	d112      	bne.n	2f586 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2f560:	68fa      	ldr	r2, [r7, #12]
   2f562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f564:	3304      	adds	r3, #4
   2f566:	00db      	lsls	r3, r3, #3
   2f568:	18d3      	adds	r3, r2, r3
   2f56a:	3304      	adds	r3, #4
   2f56c:	68ba      	ldr	r2, [r7, #8]
   2f56e:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2f570:	68fa      	ldr	r2, [r7, #12]
   2f572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f574:	3304      	adds	r3, #4
   2f576:	00db      	lsls	r3, r3, #3
   2f578:	18d3      	adds	r3, r2, r3
   2f57a:	3308      	adds	r3, #8
   2f57c:	683a      	ldr	r2, [r7, #0]
   2f57e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2f580:	2300      	movs	r3, #0
   2f582:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2f584:	e00f      	b.n	2f5a6 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f588:	3301      	adds	r3, #1
   2f58a:	643b      	str	r3, [r7, #64]	; 0x40
   2f58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f58e:	2b04      	cmp	r3, #4
   2f590:	dddd      	ble.n	2f54e <MQTTSubscribe+0x10e>
   2f592:	e008      	b.n	2f5a6 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2f594:	2301      	movs	r3, #1
   2f596:	425b      	negs	r3, r3
   2f598:	647b      	str	r3, [r7, #68]	; 0x44
   2f59a:	e004      	b.n	2f5a6 <MQTTSubscribe+0x166>
		goto exit;
   2f59c:	46c0      	nop			; (mov r8, r8)
   2f59e:	e002      	b.n	2f5a6 <MQTTSubscribe+0x166>
        goto exit;
   2f5a0:	46c0      	nop			; (mov r8, r8)
   2f5a2:	e000      	b.n	2f5a6 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2f5a4:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f5a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2f5a8:	0018      	movs	r0, r3
   2f5aa:	46bd      	mov	sp, r7
   2f5ac:	b012      	add	sp, #72	; 0x48
   2f5ae:	bdb0      	pop	{r4, r5, r7, pc}
   2f5b0:	0002f9d5 	.word	0x0002f9d5
   2f5b4:	0002f95d 	.word	0x0002f95d
   2f5b8:	0002eb1d 	.word	0x0002eb1d
   2f5bc:	00030f0d 	.word	0x00030f0d
   2f5c0:	0002eb4d 	.word	0x0002eb4d
   2f5c4:	0002f2b5 	.word	0x0002f2b5
   2f5c8:	0003105d 	.word	0x0003105d

0002f5cc <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f5ce:	46ce      	mov	lr, r9
   2f5d0:	4647      	mov	r7, r8
   2f5d2:	b580      	push	{r7, lr}
   2f5d4:	b097      	sub	sp, #92	; 0x5c
   2f5d6:	af08      	add	r7, sp, #32
   2f5d8:	60f8      	str	r0, [r7, #12]
   2f5da:	60b9      	str	r1, [r7, #8]
   2f5dc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f5de:	2301      	movs	r3, #1
   2f5e0:	425b      	negs	r3, r3
   2f5e2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2f5e4:	2318      	movs	r3, #24
   2f5e6:	18fb      	adds	r3, r7, r3
   2f5e8:	2200      	movs	r2, #0
   2f5ea:	601a      	str	r2, [r3, #0]
   2f5ec:	2318      	movs	r3, #24
   2f5ee:	18fb      	adds	r3, r7, r3
   2f5f0:	2200      	movs	r2, #0
   2f5f2:	605a      	str	r2, [r3, #4]
   2f5f4:	2318      	movs	r3, #24
   2f5f6:	18fb      	adds	r3, r7, r3
   2f5f8:	2200      	movs	r2, #0
   2f5fa:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2f5fc:	2318      	movs	r3, #24
   2f5fe:	18fb      	adds	r3, r7, r3
   2f600:	68ba      	ldr	r2, [r7, #8]
   2f602:	601a      	str	r2, [r3, #0]
    int len = 0;
   2f604:	2300      	movs	r3, #0
   2f606:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f608:	68fb      	ldr	r3, [r7, #12]
   2f60a:	6a1b      	ldr	r3, [r3, #32]
   2f60c:	2b00      	cmp	r3, #0
   2f60e:	d100      	bne.n	2f612 <MQTTPublish+0x46>
   2f610:	e0a0      	b.n	2f754 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2f612:	2324      	movs	r3, #36	; 0x24
   2f614:	18fb      	adds	r3, r7, r3
   2f616:	0018      	movs	r0, r3
   2f618:	4b55      	ldr	r3, [pc, #340]	; (2f770 <MQTTPublish+0x1a4>)
   2f61a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f61c:	68fb      	ldr	r3, [r7, #12]
   2f61e:	685a      	ldr	r2, [r3, #4]
   2f620:	2324      	movs	r3, #36	; 0x24
   2f622:	18fb      	adds	r3, r7, r3
   2f624:	0011      	movs	r1, r2
   2f626:	0018      	movs	r0, r3
   2f628:	4b52      	ldr	r3, [pc, #328]	; (2f774 <MQTTPublish+0x1a8>)
   2f62a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2f62c:	687b      	ldr	r3, [r7, #4]
   2f62e:	781b      	ldrb	r3, [r3, #0]
   2f630:	2b01      	cmp	r3, #1
   2f632:	d003      	beq.n	2f63c <MQTTPublish+0x70>
   2f634:	687b      	ldr	r3, [r7, #4]
   2f636:	781b      	ldrb	r3, [r3, #0]
   2f638:	2b02      	cmp	r3, #2
   2f63a:	d107      	bne.n	2f64c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2f63c:	68fb      	ldr	r3, [r7, #12]
   2f63e:	0018      	movs	r0, r3
   2f640:	4b4d      	ldr	r3, [pc, #308]	; (2f778 <MQTTPublish+0x1ac>)
   2f642:	4798      	blx	r3
   2f644:	0003      	movs	r3, r0
   2f646:	b29a      	uxth	r2, r3
   2f648:	687b      	ldr	r3, [r7, #4]
   2f64a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f64c:	68fb      	ldr	r3, [r7, #12]
   2f64e:	691b      	ldr	r3, [r3, #16]
   2f650:	469c      	mov	ip, r3
   2f652:	68fb      	ldr	r3, [r7, #12]
   2f654:	689b      	ldr	r3, [r3, #8]
   2f656:	001d      	movs	r5, r3
   2f658:	687b      	ldr	r3, [r7, #4]
   2f65a:	781b      	ldrb	r3, [r3, #0]
   2f65c:	001e      	movs	r6, r3
   2f65e:	687b      	ldr	r3, [r7, #4]
   2f660:	785b      	ldrb	r3, [r3, #1]
   2f662:	4698      	mov	r8, r3
   2f664:	687b      	ldr	r3, [r7, #4]
   2f666:	889b      	ldrh	r3, [r3, #4]
   2f668:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2f66a:	687b      	ldr	r3, [r7, #4]
   2f66c:	689a      	ldr	r2, [r3, #8]
   2f66e:	687b      	ldr	r3, [r7, #4]
   2f670:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f672:	9306      	str	r3, [sp, #24]
   2f674:	9205      	str	r2, [sp, #20]
   2f676:	2318      	movs	r3, #24
   2f678:	18fa      	adds	r2, r7, r3
   2f67a:	2308      	movs	r3, #8
   2f67c:	446b      	add	r3, sp
   2f67e:	ca13      	ldmia	r2!, {r0, r1, r4}
   2f680:	c313      	stmia	r3!, {r0, r1, r4}
   2f682:	464b      	mov	r3, r9
   2f684:	9301      	str	r3, [sp, #4]
   2f686:	4643      	mov	r3, r8
   2f688:	9300      	str	r3, [sp, #0]
   2f68a:	0033      	movs	r3, r6
   2f68c:	2200      	movs	r2, #0
   2f68e:	0029      	movs	r1, r5
   2f690:	4660      	mov	r0, ip
   2f692:	4c3a      	ldr	r4, [pc, #232]	; (2f77c <MQTTPublish+0x1b0>)
   2f694:	47a0      	blx	r4
   2f696:	0003      	movs	r3, r0
   2f698:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2f69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f69c:	2b00      	cmp	r3, #0
   2f69e:	dd5b      	ble.n	2f758 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f6a0:	2324      	movs	r3, #36	; 0x24
   2f6a2:	18fa      	adds	r2, r7, r3
   2f6a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2f6a6:	68fb      	ldr	r3, [r7, #12]
   2f6a8:	0018      	movs	r0, r3
   2f6aa:	4b35      	ldr	r3, [pc, #212]	; (2f780 <MQTTPublish+0x1b4>)
   2f6ac:	4798      	blx	r3
   2f6ae:	0003      	movs	r3, r0
   2f6b0:	637b      	str	r3, [r7, #52]	; 0x34
   2f6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f6b4:	2b00      	cmp	r3, #0
   2f6b6:	d151      	bne.n	2f75c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2f6b8:	687b      	ldr	r3, [r7, #4]
   2f6ba:	781b      	ldrb	r3, [r3, #0]
   2f6bc:	2b01      	cmp	r3, #1
   2f6be:	d122      	bne.n	2f706 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2f6c0:	2324      	movs	r3, #36	; 0x24
   2f6c2:	18fa      	adds	r2, r7, r3
   2f6c4:	68fb      	ldr	r3, [r7, #12]
   2f6c6:	2104      	movs	r1, #4
   2f6c8:	0018      	movs	r0, r3
   2f6ca:	4b2e      	ldr	r3, [pc, #184]	; (2f784 <MQTTPublish+0x1b8>)
   2f6cc:	4798      	blx	r3
   2f6ce:	0003      	movs	r3, r0
   2f6d0:	2b04      	cmp	r3, #4
   2f6d2:	d114      	bne.n	2f6fe <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f6d4:	68fb      	ldr	r3, [r7, #12]
   2f6d6:	695c      	ldr	r4, [r3, #20]
   2f6d8:	68fb      	ldr	r3, [r7, #12]
   2f6da:	68db      	ldr	r3, [r3, #12]
   2f6dc:	2216      	movs	r2, #22
   2f6de:	18ba      	adds	r2, r7, r2
   2f6e0:	2115      	movs	r1, #21
   2f6e2:	1879      	adds	r1, r7, r1
   2f6e4:	2014      	movs	r0, #20
   2f6e6:	1838      	adds	r0, r7, r0
   2f6e8:	9300      	str	r3, [sp, #0]
   2f6ea:	0023      	movs	r3, r4
   2f6ec:	4c26      	ldr	r4, [pc, #152]	; (2f788 <MQTTPublish+0x1bc>)
   2f6ee:	47a0      	blx	r4
   2f6f0:	0003      	movs	r3, r0
   2f6f2:	2b01      	cmp	r3, #1
   2f6f4:	d033      	beq.n	2f75e <MQTTPublish+0x192>
                rc = FAILURE;
   2f6f6:	2301      	movs	r3, #1
   2f6f8:	425b      	negs	r3, r3
   2f6fa:	637b      	str	r3, [r7, #52]	; 0x34
   2f6fc:	e02f      	b.n	2f75e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f6fe:	2301      	movs	r3, #1
   2f700:	425b      	negs	r3, r3
   2f702:	637b      	str	r3, [r7, #52]	; 0x34
   2f704:	e02b      	b.n	2f75e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2f706:	687b      	ldr	r3, [r7, #4]
   2f708:	781b      	ldrb	r3, [r3, #0]
   2f70a:	2b02      	cmp	r3, #2
   2f70c:	d127      	bne.n	2f75e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2f70e:	2324      	movs	r3, #36	; 0x24
   2f710:	18fa      	adds	r2, r7, r3
   2f712:	68fb      	ldr	r3, [r7, #12]
   2f714:	2107      	movs	r1, #7
   2f716:	0018      	movs	r0, r3
   2f718:	4b1a      	ldr	r3, [pc, #104]	; (2f784 <MQTTPublish+0x1b8>)
   2f71a:	4798      	blx	r3
   2f71c:	0003      	movs	r3, r0
   2f71e:	2b07      	cmp	r3, #7
   2f720:	d114      	bne.n	2f74c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f722:	68fb      	ldr	r3, [r7, #12]
   2f724:	695c      	ldr	r4, [r3, #20]
   2f726:	68fb      	ldr	r3, [r7, #12]
   2f728:	68db      	ldr	r3, [r3, #12]
   2f72a:	2212      	movs	r2, #18
   2f72c:	18ba      	adds	r2, r7, r2
   2f72e:	2111      	movs	r1, #17
   2f730:	1879      	adds	r1, r7, r1
   2f732:	2010      	movs	r0, #16
   2f734:	1838      	adds	r0, r7, r0
   2f736:	9300      	str	r3, [sp, #0]
   2f738:	0023      	movs	r3, r4
   2f73a:	4c13      	ldr	r4, [pc, #76]	; (2f788 <MQTTPublish+0x1bc>)
   2f73c:	47a0      	blx	r4
   2f73e:	0003      	movs	r3, r0
   2f740:	2b01      	cmp	r3, #1
   2f742:	d00c      	beq.n	2f75e <MQTTPublish+0x192>
                rc = FAILURE;
   2f744:	2301      	movs	r3, #1
   2f746:	425b      	negs	r3, r3
   2f748:	637b      	str	r3, [r7, #52]	; 0x34
   2f74a:	e008      	b.n	2f75e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f74c:	2301      	movs	r3, #1
   2f74e:	425b      	negs	r3, r3
   2f750:	637b      	str	r3, [r7, #52]	; 0x34
   2f752:	e004      	b.n	2f75e <MQTTPublish+0x192>
		goto exit;
   2f754:	46c0      	nop			; (mov r8, r8)
   2f756:	e002      	b.n	2f75e <MQTTPublish+0x192>
        goto exit;
   2f758:	46c0      	nop			; (mov r8, r8)
   2f75a:	e000      	b.n	2f75e <MQTTPublish+0x192>
        goto exit; // there was a problem
   2f75c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2f760:	0018      	movs	r0, r3
   2f762:	46bd      	mov	sp, r7
   2f764:	b00f      	add	sp, #60	; 0x3c
   2f766:	bc0c      	pop	{r2, r3}
   2f768:	4690      	mov	r8, r2
   2f76a:	4699      	mov	r9, r3
   2f76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f76e:	46c0      	nop			; (mov r8, r8)
   2f770:	0002f9d5 	.word	0x0002f9d5
   2f774:	0002f95d 	.word	0x0002f95d
   2f778:	0002eb1d 	.word	0x0002eb1d
   2f77c:	00030c59 	.word	0x00030c59
   2f780:	0002eb4d 	.word	0x0002eb4d
   2f784:	0002f2b5 	.word	0x0002f2b5
   2f788:	000306d1 	.word	0x000306d1

0002f78c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2f78c:	b580      	push	{r7, lr}
   2f78e:	b088      	sub	sp, #32
   2f790:	af00      	add	r7, sp, #0
   2f792:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f794:	2301      	movs	r3, #1
   2f796:	425b      	negs	r3, r3
   2f798:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2f79a:	2300      	movs	r3, #0
   2f79c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2f79e:	230c      	movs	r3, #12
   2f7a0:	18fb      	adds	r3, r7, r3
   2f7a2:	0018      	movs	r0, r3
   2f7a4:	4b13      	ldr	r3, [pc, #76]	; (2f7f4 <MQTTDisconnect+0x68>)
   2f7a6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f7a8:	687b      	ldr	r3, [r7, #4]
   2f7aa:	685a      	ldr	r2, [r3, #4]
   2f7ac:	230c      	movs	r3, #12
   2f7ae:	18fb      	adds	r3, r7, r3
   2f7b0:	0011      	movs	r1, r2
   2f7b2:	0018      	movs	r0, r3
   2f7b4:	4b10      	ldr	r3, [pc, #64]	; (2f7f8 <MQTTDisconnect+0x6c>)
   2f7b6:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2f7b8:	687b      	ldr	r3, [r7, #4]
   2f7ba:	691a      	ldr	r2, [r3, #16]
   2f7bc:	687b      	ldr	r3, [r7, #4]
   2f7be:	689b      	ldr	r3, [r3, #8]
   2f7c0:	0019      	movs	r1, r3
   2f7c2:	0010      	movs	r0, r2
   2f7c4:	4b0d      	ldr	r3, [pc, #52]	; (2f7fc <MQTTDisconnect+0x70>)
   2f7c6:	4798      	blx	r3
   2f7c8:	0003      	movs	r3, r0
   2f7ca:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2f7cc:	69bb      	ldr	r3, [r7, #24]
   2f7ce:	2b00      	cmp	r3, #0
   2f7d0:	dd08      	ble.n	2f7e4 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2f7d2:	230c      	movs	r3, #12
   2f7d4:	18fa      	adds	r2, r7, r3
   2f7d6:	69b9      	ldr	r1, [r7, #24]
   2f7d8:	687b      	ldr	r3, [r7, #4]
   2f7da:	0018      	movs	r0, r3
   2f7dc:	4b08      	ldr	r3, [pc, #32]	; (2f800 <MQTTDisconnect+0x74>)
   2f7de:	4798      	blx	r3
   2f7e0:	0003      	movs	r3, r0
   2f7e2:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2f7e4:	687b      	ldr	r3, [r7, #4]
   2f7e6:	2200      	movs	r2, #0
   2f7e8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f7ea:	69fb      	ldr	r3, [r7, #28]
}
   2f7ec:	0018      	movs	r0, r3
   2f7ee:	46bd      	mov	sp, r7
   2f7f0:	b008      	add	sp, #32
   2f7f2:	bd80      	pop	{r7, pc}
   2f7f4:	0002f9d5 	.word	0x0002f9d5
   2f7f8:	0002f95d 	.word	0x0002f95d
   2f7fc:	00030585 	.word	0x00030585
   2f800:	0002eb4d 	.word	0x0002eb4d

0002f804 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2f804:	b580      	push	{r7, lr}
   2f806:	b084      	sub	sp, #16
   2f808:	af00      	add	r7, sp, #0
   2f80a:	0002      	movs	r2, r0
   2f80c:	1dfb      	adds	r3, r7, #7
   2f80e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f810:	2300      	movs	r3, #0
   2f812:	60fb      	str	r3, [r7, #12]
   2f814:	e01c      	b.n	2f850 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f816:	4a12      	ldr	r2, [pc, #72]	; (2f860 <isMQTTSocket+0x5c>)
   2f818:	68fb      	ldr	r3, [r7, #12]
   2f81a:	2164      	movs	r1, #100	; 0x64
   2f81c:	434b      	muls	r3, r1
   2f81e:	18d3      	adds	r3, r2, r3
   2f820:	3360      	adds	r3, #96	; 0x60
   2f822:	681b      	ldr	r3, [r3, #0]
   2f824:	2b00      	cmp	r3, #0
   2f826:	d010      	beq.n	2f84a <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f828:	4a0d      	ldr	r2, [pc, #52]	; (2f860 <isMQTTSocket+0x5c>)
   2f82a:	68fb      	ldr	r3, [r7, #12]
   2f82c:	2164      	movs	r1, #100	; 0x64
   2f82e:	434b      	muls	r3, r1
   2f830:	18d3      	adds	r3, r2, r3
   2f832:	3360      	adds	r3, #96	; 0x60
   2f834:	681b      	ldr	r3, [r3, #0]
   2f836:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f838:	68bb      	ldr	r3, [r7, #8]
   2f83a:	6a1a      	ldr	r2, [r3, #32]
   2f83c:	1dfb      	adds	r3, r7, #7
   2f83e:	781b      	ldrb	r3, [r3, #0]
   2f840:	b25b      	sxtb	r3, r3
   2f842:	429a      	cmp	r2, r3
   2f844:	d101      	bne.n	2f84a <isMQTTSocket+0x46>
				return true;
   2f846:	2301      	movs	r3, #1
   2f848:	e006      	b.n	2f858 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f84a:	68fb      	ldr	r3, [r7, #12]
   2f84c:	3301      	adds	r3, #1
   2f84e:	60fb      	str	r3, [r7, #12]
   2f850:	68fb      	ldr	r3, [r7, #12]
   2f852:	2b06      	cmp	r3, #6
   2f854:	d9df      	bls.n	2f816 <isMQTTSocket+0x12>
		}
	}
	return false;
   2f856:	2300      	movs	r3, #0
}
   2f858:	0018      	movs	r0, r3
   2f85a:	46bd      	mov	sp, r7
   2f85c:	b004      	add	sp, #16
   2f85e:	bd80      	pop	{r7, pc}
   2f860:	20004444 	.word	0x20004444

0002f864 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f864:	b580      	push	{r7, lr}
   2f866:	b082      	sub	sp, #8
   2f868:	af00      	add	r7, sp, #0
   2f86a:	6078      	str	r0, [r7, #4]
   2f86c:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f86e:	4b0d      	ldr	r3, [pc, #52]	; (2f8a4 <dnsResolveCallback+0x40>)
   2f870:	781b      	ldrb	r3, [r3, #0]
   2f872:	2201      	movs	r2, #1
   2f874:	4053      	eors	r3, r2
   2f876:	b2db      	uxtb	r3, r3
   2f878:	2b00      	cmp	r3, #0
   2f87a:	d00e      	beq.n	2f89a <dnsResolveCallback+0x36>
   2f87c:	4b0a      	ldr	r3, [pc, #40]	; (2f8a8 <dnsResolveCallback+0x44>)
   2f87e:	681b      	ldr	r3, [r3, #0]
   2f880:	687a      	ldr	r2, [r7, #4]
   2f882:	0011      	movs	r1, r2
   2f884:	0018      	movs	r0, r3
   2f886:	4b09      	ldr	r3, [pc, #36]	; (2f8ac <dnsResolveCallback+0x48>)
   2f888:	4798      	blx	r3
   2f88a:	1e03      	subs	r3, r0, #0
   2f88c:	d105      	bne.n	2f89a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f88e:	683a      	ldr	r2, [r7, #0]
   2f890:	4b07      	ldr	r3, [pc, #28]	; (2f8b0 <dnsResolveCallback+0x4c>)
   2f892:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f894:	4b03      	ldr	r3, [pc, #12]	; (2f8a4 <dnsResolveCallback+0x40>)
   2f896:	2201      	movs	r2, #1
   2f898:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f89a:	46c0      	nop			; (mov r8, r8)
   2f89c:	46bd      	mov	sp, r7
   2f89e:	b002      	add	sp, #8
   2f8a0:	bd80      	pop	{r7, pc}
   2f8a2:	46c0      	nop			; (mov r8, r8)
   2f8a4:	20004334 	.word	0x20004334
   2f8a8:	20004440 	.word	0x20004440
   2f8ac:	000356cf 	.word	0x000356cf
   2f8b0:	2000432c 	.word	0x2000432c

0002f8b4 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f8b4:	b580      	push	{r7, lr}
   2f8b6:	b084      	sub	sp, #16
   2f8b8:	af00      	add	r7, sp, #0
   2f8ba:	603a      	str	r2, [r7, #0]
   2f8bc:	1dfb      	adds	r3, r7, #7
   2f8be:	1c02      	adds	r2, r0, #0
   2f8c0:	701a      	strb	r2, [r3, #0]
   2f8c2:	1dbb      	adds	r3, r7, #6
   2f8c4:	1c0a      	adds	r2, r1, #0
   2f8c6:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f8c8:	1dfb      	adds	r3, r7, #7
   2f8ca:	781b      	ldrb	r3, [r3, #0]
   2f8cc:	b25b      	sxtb	r3, r3
   2f8ce:	0018      	movs	r0, r3
   2f8d0:	4b12      	ldr	r3, [pc, #72]	; (2f91c <tcpClientSocketEventHandler+0x68>)
   2f8d2:	4798      	blx	r3
   2f8d4:	1e03      	subs	r3, r0, #0
   2f8d6:	d01c      	beq.n	2f912 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f8d8:	1dbb      	adds	r3, r7, #6
   2f8da:	781b      	ldrb	r3, [r3, #0]
   2f8dc:	2b06      	cmp	r3, #6
   2f8de:	d00c      	beq.n	2f8fa <tcpClientSocketEventHandler+0x46>
   2f8e0:	2b07      	cmp	r3, #7
   2f8e2:	d006      	beq.n	2f8f2 <tcpClientSocketEventHandler+0x3e>
   2f8e4:	2b05      	cmp	r3, #5
   2f8e6:	d000      	beq.n	2f8ea <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f8e8:	e013      	b.n	2f912 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f8ea:	4b0d      	ldr	r3, [pc, #52]	; (2f920 <tcpClientSocketEventHandler+0x6c>)
   2f8ec:	2201      	movs	r2, #1
   2f8ee:	701a      	strb	r2, [r3, #0]
			break;
   2f8f0:	e00f      	b.n	2f912 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f8f2:	4b0c      	ldr	r3, [pc, #48]	; (2f924 <tcpClientSocketEventHandler+0x70>)
   2f8f4:	2201      	movs	r2, #1
   2f8f6:	701a      	strb	r2, [r3, #0]
			break;
   2f8f8:	e00b      	b.n	2f912 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f8fa:	683b      	ldr	r3, [r7, #0]
   2f8fc:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f8fe:	68fb      	ldr	r3, [r7, #12]
   2f900:	2204      	movs	r2, #4
   2f902:	5e9b      	ldrsh	r3, [r3, r2]
   2f904:	001a      	movs	r2, r3
   2f906:	4b08      	ldr	r3, [pc, #32]	; (2f928 <tcpClientSocketEventHandler+0x74>)
   2f908:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f90a:	4b08      	ldr	r3, [pc, #32]	; (2f92c <tcpClientSocketEventHandler+0x78>)
   2f90c:	2201      	movs	r2, #1
   2f90e:	701a      	strb	r2, [r3, #0]
			break;
   2f910:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f912:	46c0      	nop			; (mov r8, r8)
   2f914:	46bd      	mov	sp, r7
   2f916:	b004      	add	sp, #16
   2f918:	bd80      	pop	{r7, pc}
   2f91a:	46c0      	nop			; (mov r8, r8)
   2f91c:	0002f805 	.word	0x0002f805
   2f920:	20004335 	.word	0x20004335
   2f924:	20004336 	.word	0x20004336
   2f928:	20004330 	.word	0x20004330
   2f92c:	20004337 	.word	0x20004337

0002f930 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f930:	b580      	push	{r7, lr}
   2f932:	b082      	sub	sp, #8
   2f934:	af00      	add	r7, sp, #0
   2f936:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f938:	687b      	ldr	r3, [r7, #4]
   2f93a:	3304      	adds	r3, #4
   2f93c:	687a      	ldr	r2, [r7, #4]
   2f93e:	0011      	movs	r1, r2
   2f940:	0018      	movs	r0, r3
   2f942:	4b05      	ldr	r3, [pc, #20]	; (2f958 <TimerIsExpired+0x28>)
   2f944:	4798      	blx	r3
   2f946:	0003      	movs	r3, r0
   2f948:	3b01      	subs	r3, #1
   2f94a:	425a      	negs	r2, r3
   2f94c:	4153      	adcs	r3, r2
   2f94e:	b2db      	uxtb	r3, r3
}
   2f950:	0018      	movs	r0, r3
   2f952:	46bd      	mov	sp, r7
   2f954:	b002      	add	sp, #8
   2f956:	bd80      	pop	{r7, pc}
   2f958:	0001d2a1 	.word	0x0001d2a1

0002f95c <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f95c:	b580      	push	{r7, lr}
   2f95e:	b082      	sub	sp, #8
   2f960:	af00      	add	r7, sp, #0
   2f962:	6078      	str	r0, [r7, #4]
   2f964:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f966:	687b      	ldr	r3, [r7, #4]
   2f968:	683a      	ldr	r2, [r7, #0]
   2f96a:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f96c:	687b      	ldr	r3, [r7, #4]
   2f96e:	3304      	adds	r3, #4
   2f970:	0018      	movs	r0, r3
   2f972:	4b03      	ldr	r3, [pc, #12]	; (2f980 <TimerCountdownMS+0x24>)
   2f974:	4798      	blx	r3
}
   2f976:	46c0      	nop			; (mov r8, r8)
   2f978:	46bd      	mov	sp, r7
   2f97a:	b002      	add	sp, #8
   2f97c:	bd80      	pop	{r7, pc}
   2f97e:	46c0      	nop			; (mov r8, r8)
   2f980:	0001d235 	.word	0x0001d235

0002f984 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f984:	b580      	push	{r7, lr}
   2f986:	b082      	sub	sp, #8
   2f988:	af00      	add	r7, sp, #0
   2f98a:	6078      	str	r0, [r7, #4]
   2f98c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f98e:	683b      	ldr	r3, [r7, #0]
   2f990:	22fa      	movs	r2, #250	; 0xfa
   2f992:	0092      	lsls	r2, r2, #2
   2f994:	435a      	muls	r2, r3
   2f996:	687b      	ldr	r3, [r7, #4]
   2f998:	0011      	movs	r1, r2
   2f99a:	0018      	movs	r0, r3
   2f99c:	4b02      	ldr	r3, [pc, #8]	; (2f9a8 <TimerCountdown+0x24>)
   2f99e:	4798      	blx	r3
}
   2f9a0:	46c0      	nop			; (mov r8, r8)
   2f9a2:	46bd      	mov	sp, r7
   2f9a4:	b002      	add	sp, #8
   2f9a6:	bd80      	pop	{r7, pc}
   2f9a8:	0002f95d 	.word	0x0002f95d

0002f9ac <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f9ac:	b580      	push	{r7, lr}
   2f9ae:	b082      	sub	sp, #8
   2f9b0:	af00      	add	r7, sp, #0
   2f9b2:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f9b4:	687b      	ldr	r3, [r7, #4]
   2f9b6:	3304      	adds	r3, #4
   2f9b8:	687a      	ldr	r2, [r7, #4]
   2f9ba:	0011      	movs	r1, r2
   2f9bc:	0018      	movs	r0, r3
   2f9be:	4b04      	ldr	r3, [pc, #16]	; (2f9d0 <TimerLeftMS+0x24>)
   2f9c0:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f9c2:	687b      	ldr	r3, [r7, #4]
   2f9c4:	681b      	ldr	r3, [r3, #0]
}
   2f9c6:	0018      	movs	r0, r3
   2f9c8:	46bd      	mov	sp, r7
   2f9ca:	b002      	add	sp, #8
   2f9cc:	bd80      	pop	{r7, pc}
   2f9ce:	46c0      	nop			; (mov r8, r8)
   2f9d0:	0001d2a1 	.word	0x0001d2a1

0002f9d4 <TimerInit>:


void TimerInit(Timer* timer) {
   2f9d4:	b580      	push	{r7, lr}
   2f9d6:	b082      	sub	sp, #8
   2f9d8:	af00      	add	r7, sp, #0
   2f9da:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f9dc:	687b      	ldr	r3, [r7, #4]
   2f9de:	2200      	movs	r2, #0
   2f9e0:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f9e2:	687b      	ldr	r3, [r7, #4]
   2f9e4:	3304      	adds	r3, #4
   2f9e6:	2208      	movs	r2, #8
   2f9e8:	2100      	movs	r1, #0
   2f9ea:	0018      	movs	r0, r3
   2f9ec:	4b02      	ldr	r3, [pc, #8]	; (2f9f8 <TimerInit+0x24>)
   2f9ee:	4798      	blx	r3
}
   2f9f0:	46c0      	nop			; (mov r8, r8)
   2f9f2:	46bd      	mov	sp, r7
   2f9f4:	b002      	add	sp, #8
   2f9f6:	bd80      	pop	{r7, pc}
   2f9f8:	00035377 	.word	0x00035377

0002f9fc <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f9fc:	b590      	push	{r4, r7, lr}
   2f9fe:	b085      	sub	sp, #20
   2fa00:	af00      	add	r7, sp, #0
   2fa02:	60f8      	str	r0, [r7, #12]
   2fa04:	60b9      	str	r1, [r7, #8]
   2fa06:	607a      	str	r2, [r7, #4]
   2fa08:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2fa0a:	683b      	ldr	r3, [r7, #0]
   2fa0c:	2b00      	cmp	r3, #0
   2fa0e:	d101      	bne.n	2fa14 <WINC1500_read+0x18>
   2fa10:	230a      	movs	r3, #10
   2fa12:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2fa14:	4b2c      	ldr	r3, [pc, #176]	; (2fac8 <WINC1500_read+0xcc>)
   2fa16:	681b      	ldr	r3, [r3, #0]
   2fa18:	2b00      	cmp	r3, #0
   2fa1a:	d131      	bne.n	2fa80 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2fa1c:	4b2b      	ldr	r3, [pc, #172]	; (2facc <WINC1500_read+0xd0>)
   2fa1e:	2200      	movs	r2, #0
   2fa20:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2fa22:	68fb      	ldr	r3, [r7, #12]
   2fa24:	681b      	ldr	r3, [r3, #0]
   2fa26:	b258      	sxtb	r0, r3
   2fa28:	683c      	ldr	r4, [r7, #0]
   2fa2a:	2380      	movs	r3, #128	; 0x80
   2fa2c:	005a      	lsls	r2, r3, #1
   2fa2e:	4928      	ldr	r1, [pc, #160]	; (2fad0 <WINC1500_read+0xd4>)
   2fa30:	0023      	movs	r3, r4
   2fa32:	4c28      	ldr	r4, [pc, #160]	; (2fad4 <WINC1500_read+0xd8>)
   2fa34:	47a0      	blx	r4
   2fa36:	1e03      	subs	r3, r0, #0
   2fa38:	d005      	beq.n	2fa46 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2fa3a:	2301      	movs	r3, #1
   2fa3c:	425b      	negs	r3, r3
   2fa3e:	e03e      	b.n	2fabe <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2fa40:	2000      	movs	r0, #0
   2fa42:	4b25      	ldr	r3, [pc, #148]	; (2fad8 <WINC1500_read+0xdc>)
   2fa44:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2fa46:	4b21      	ldr	r3, [pc, #132]	; (2facc <WINC1500_read+0xd0>)
   2fa48:	781b      	ldrb	r3, [r3, #0]
   2fa4a:	2201      	movs	r2, #1
   2fa4c:	4053      	eors	r3, r2
   2fa4e:	b2db      	uxtb	r3, r3
   2fa50:	2b00      	cmp	r3, #0
   2fa52:	d1f5      	bne.n	2fa40 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2fa54:	4b21      	ldr	r3, [pc, #132]	; (2fadc <WINC1500_read+0xe0>)
   2fa56:	681b      	ldr	r3, [r3, #0]
   2fa58:	2b00      	cmp	r3, #0
   2fa5a:	dd08      	ble.n	2fa6e <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2fa5c:	4b1f      	ldr	r3, [pc, #124]	; (2fadc <WINC1500_read+0xe0>)
   2fa5e:	681b      	ldr	r3, [r3, #0]
   2fa60:	001a      	movs	r2, r3
   2fa62:	4b19      	ldr	r3, [pc, #100]	; (2fac8 <WINC1500_read+0xcc>)
   2fa64:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2fa66:	4b1e      	ldr	r3, [pc, #120]	; (2fae0 <WINC1500_read+0xe4>)
   2fa68:	2200      	movs	r2, #0
   2fa6a:	601a      	str	r2, [r3, #0]
   2fa6c:	e008      	b.n	2fa80 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2fa6e:	4b16      	ldr	r3, [pc, #88]	; (2fac8 <WINC1500_read+0xcc>)
   2fa70:	2200      	movs	r2, #0
   2fa72:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2fa74:	4b1a      	ldr	r3, [pc, #104]	; (2fae0 <WINC1500_read+0xe4>)
   2fa76:	2200      	movs	r2, #0
   2fa78:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2fa7a:	4b18      	ldr	r3, [pc, #96]	; (2fadc <WINC1500_read+0xe0>)
   2fa7c:	681b      	ldr	r3, [r3, #0]
   2fa7e:	e01e      	b.n	2fabe <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2fa80:	4b11      	ldr	r3, [pc, #68]	; (2fac8 <WINC1500_read+0xcc>)
   2fa82:	681b      	ldr	r3, [r3, #0]
   2fa84:	001a      	movs	r2, r3
   2fa86:	687b      	ldr	r3, [r7, #4]
   2fa88:	4293      	cmp	r3, r2
   2fa8a:	dd02      	ble.n	2fa92 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2fa8c:	2301      	movs	r3, #1
   2fa8e:	425b      	negs	r3, r3
   2fa90:	e015      	b.n	2fabe <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2fa92:	4b13      	ldr	r3, [pc, #76]	; (2fae0 <WINC1500_read+0xe4>)
   2fa94:	681a      	ldr	r2, [r3, #0]
   2fa96:	4b0e      	ldr	r3, [pc, #56]	; (2fad0 <WINC1500_read+0xd4>)
   2fa98:	18d1      	adds	r1, r2, r3
   2fa9a:	687a      	ldr	r2, [r7, #4]
   2fa9c:	68bb      	ldr	r3, [r7, #8]
   2fa9e:	0018      	movs	r0, r3
   2faa0:	4b10      	ldr	r3, [pc, #64]	; (2fae4 <WINC1500_read+0xe8>)
   2faa2:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2faa4:	4b08      	ldr	r3, [pc, #32]	; (2fac8 <WINC1500_read+0xcc>)
   2faa6:	681a      	ldr	r2, [r3, #0]
   2faa8:	687b      	ldr	r3, [r7, #4]
   2faaa:	1ad2      	subs	r2, r2, r3
   2faac:	4b06      	ldr	r3, [pc, #24]	; (2fac8 <WINC1500_read+0xcc>)
   2faae:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2fab0:	4b0b      	ldr	r3, [pc, #44]	; (2fae0 <WINC1500_read+0xe4>)
   2fab2:	681a      	ldr	r2, [r3, #0]
   2fab4:	687b      	ldr	r3, [r7, #4]
   2fab6:	18d2      	adds	r2, r2, r3
   2fab8:	4b09      	ldr	r3, [pc, #36]	; (2fae0 <WINC1500_read+0xe4>)
   2faba:	601a      	str	r2, [r3, #0]
  
  return len;
   2fabc:	687b      	ldr	r3, [r7, #4]
}
   2fabe:	0018      	movs	r0, r3
   2fac0:	46bd      	mov	sp, r7
   2fac2:	b005      	add	sp, #20
   2fac4:	bd90      	pop	{r4, r7, pc}
   2fac6:	46c0      	nop			; (mov r8, r8)
   2fac8:	2000443c 	.word	0x2000443c
   2facc:	20004337 	.word	0x20004337
   2fad0:	20004338 	.word	0x20004338
   2fad4:	000260b1 	.word	0x000260b1
   2fad8:	000225f9 	.word	0x000225f9
   2fadc:	20004330 	.word	0x20004330
   2fae0:	20004438 	.word	0x20004438
   2fae4:	00035341 	.word	0x00035341

0002fae8 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2fae8:	b590      	push	{r4, r7, lr}
   2faea:	b085      	sub	sp, #20
   2faec:	af00      	add	r7, sp, #0
   2faee:	60f8      	str	r0, [r7, #12]
   2faf0:	60b9      	str	r1, [r7, #8]
   2faf2:	607a      	str	r2, [r7, #4]
   2faf4:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2faf6:	4b10      	ldr	r3, [pc, #64]	; (2fb38 <WINC1500_write+0x50>)
   2faf8:	2200      	movs	r2, #0
   2fafa:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2fafc:	68fb      	ldr	r3, [r7, #12]
   2fafe:	681b      	ldr	r3, [r3, #0]
   2fb00:	b258      	sxtb	r0, r3
   2fb02:	687b      	ldr	r3, [r7, #4]
   2fb04:	b29a      	uxth	r2, r3
   2fb06:	68b9      	ldr	r1, [r7, #8]
   2fb08:	2300      	movs	r3, #0
   2fb0a:	4c0c      	ldr	r4, [pc, #48]	; (2fb3c <WINC1500_write+0x54>)
   2fb0c:	47a0      	blx	r4
   2fb0e:	1e03      	subs	r3, r0, #0
   2fb10:	d005      	beq.n	2fb1e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2fb12:	2301      	movs	r3, #1
   2fb14:	425b      	negs	r3, r3
   2fb16:	e00a      	b.n	2fb2e <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2fb18:	2000      	movs	r0, #0
   2fb1a:	4b09      	ldr	r3, [pc, #36]	; (2fb40 <WINC1500_write+0x58>)
   2fb1c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2fb1e:	4b06      	ldr	r3, [pc, #24]	; (2fb38 <WINC1500_write+0x50>)
   2fb20:	781b      	ldrb	r3, [r3, #0]
   2fb22:	2201      	movs	r2, #1
   2fb24:	4053      	eors	r3, r2
   2fb26:	b2db      	uxtb	r3, r3
   2fb28:	2b00      	cmp	r3, #0
   2fb2a:	d1f5      	bne.n	2fb18 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2fb2c:	687b      	ldr	r3, [r7, #4]
}
   2fb2e:	0018      	movs	r0, r3
   2fb30:	46bd      	mov	sp, r7
   2fb32:	b005      	add	sp, #20
   2fb34:	bd90      	pop	{r4, r7, pc}
   2fb36:	46c0      	nop			; (mov r8, r8)
   2fb38:	20004336 	.word	0x20004336
   2fb3c:	00025f4d 	.word	0x00025f4d
   2fb40:	000225f9 	.word	0x000225f9

0002fb44 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2fb44:	b580      	push	{r7, lr}
   2fb46:	b082      	sub	sp, #8
   2fb48:	af00      	add	r7, sp, #0
   2fb4a:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2fb4c:	687b      	ldr	r3, [r7, #4]
   2fb4e:	681b      	ldr	r3, [r3, #0]
   2fb50:	b25b      	sxtb	r3, r3
   2fb52:	0018      	movs	r0, r3
   2fb54:	4b06      	ldr	r3, [pc, #24]	; (2fb70 <WINC1500_disconnect+0x2c>)
   2fb56:	4798      	blx	r3
	n->socket=-1;
   2fb58:	687b      	ldr	r3, [r7, #4]
   2fb5a:	2201      	movs	r2, #1
   2fb5c:	4252      	negs	r2, r2
   2fb5e:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2fb60:	4b04      	ldr	r3, [pc, #16]	; (2fb74 <WINC1500_disconnect+0x30>)
   2fb62:	2200      	movs	r2, #0
   2fb64:	701a      	strb	r2, [r3, #0]
}
   2fb66:	46c0      	nop			; (mov r8, r8)
   2fb68:	46bd      	mov	sp, r7
   2fb6a:	b002      	add	sp, #8
   2fb6c:	bd80      	pop	{r7, pc}
   2fb6e:	46c0      	nop			; (mov r8, r8)
   2fb70:	00026231 	.word	0x00026231
   2fb74:	20004335 	.word	0x20004335

0002fb78 <NetworkInit>:


void NetworkInit(Network* n) {
   2fb78:	b580      	push	{r7, lr}
   2fb7a:	b082      	sub	sp, #8
   2fb7c:	af00      	add	r7, sp, #0
   2fb7e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2fb80:	687b      	ldr	r3, [r7, #4]
   2fb82:	2201      	movs	r2, #1
   2fb84:	4252      	negs	r2, r2
   2fb86:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2fb88:	687b      	ldr	r3, [r7, #4]
   2fb8a:	4a06      	ldr	r2, [pc, #24]	; (2fba4 <NetworkInit+0x2c>)
   2fb8c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2fb8e:	687b      	ldr	r3, [r7, #4]
   2fb90:	4a05      	ldr	r2, [pc, #20]	; (2fba8 <NetworkInit+0x30>)
   2fb92:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2fb94:	687b      	ldr	r3, [r7, #4]
   2fb96:	4a05      	ldr	r2, [pc, #20]	; (2fbac <NetworkInit+0x34>)
   2fb98:	611a      	str	r2, [r3, #16]
}
   2fb9a:	46c0      	nop			; (mov r8, r8)
   2fb9c:	46bd      	mov	sp, r7
   2fb9e:	b002      	add	sp, #8
   2fba0:	bd80      	pop	{r7, pc}
   2fba2:	46c0      	nop			; (mov r8, r8)
   2fba4:	0002f9fd 	.word	0x0002f9fd
   2fba8:	0002fae9 	.word	0x0002fae9
   2fbac:	0002fb45 	.word	0x0002fb45

0002fbb0 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2fbb0:	b580      	push	{r7, lr}
   2fbb2:	b088      	sub	sp, #32
   2fbb4:	af00      	add	r7, sp, #0
   2fbb6:	60f8      	str	r0, [r7, #12]
   2fbb8:	60b9      	str	r1, [r7, #8]
   2fbba:	607a      	str	r2, [r7, #4]
   2fbbc:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2fbbe:	4b37      	ldr	r3, [pc, #220]	; (2fc9c <ConnectNetwork+0xec>)
   2fbc0:	2200      	movs	r2, #0
   2fbc2:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2fbc4:	4b36      	ldr	r3, [pc, #216]	; (2fca0 <ConnectNetwork+0xf0>)
   2fbc6:	68ba      	ldr	r2, [r7, #8]
   2fbc8:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2fbca:	68bb      	ldr	r3, [r7, #8]
   2fbcc:	0018      	movs	r0, r3
   2fbce:	4b35      	ldr	r3, [pc, #212]	; (2fca4 <ConnectNetwork+0xf4>)
   2fbd0:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2fbd2:	e002      	b.n	2fbda <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2fbd4:	2000      	movs	r0, #0
   2fbd6:	4b34      	ldr	r3, [pc, #208]	; (2fca8 <ConnectNetwork+0xf8>)
   2fbd8:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2fbda:	4b30      	ldr	r3, [pc, #192]	; (2fc9c <ConnectNetwork+0xec>)
   2fbdc:	781b      	ldrb	r3, [r3, #0]
   2fbde:	2201      	movs	r2, #1
   2fbe0:	4053      	eors	r3, r2
   2fbe2:	b2db      	uxtb	r3, r3
   2fbe4:	2b00      	cmp	r3, #0
   2fbe6:	d1f5      	bne.n	2fbd4 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2fbe8:	4b30      	ldr	r3, [pc, #192]	; (2fcac <ConnectNetwork+0xfc>)
   2fbea:	681a      	ldr	r2, [r3, #0]
   2fbec:	68fb      	ldr	r3, [r7, #12]
   2fbee:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2fbf0:	2310      	movs	r3, #16
   2fbf2:	18fb      	adds	r3, r7, r3
   2fbf4:	2202      	movs	r2, #2
   2fbf6:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2fbf8:	687b      	ldr	r3, [r7, #4]
   2fbfa:	b29b      	uxth	r3, r3
   2fbfc:	021b      	lsls	r3, r3, #8
   2fbfe:	b21a      	sxth	r2, r3
   2fc00:	687b      	ldr	r3, [r7, #4]
   2fc02:	b29b      	uxth	r3, r3
   2fc04:	0a1b      	lsrs	r3, r3, #8
   2fc06:	b29b      	uxth	r3, r3
   2fc08:	b21b      	sxth	r3, r3
   2fc0a:	4313      	orrs	r3, r2
   2fc0c:	b21b      	sxth	r3, r3
   2fc0e:	b29a      	uxth	r2, r3
   2fc10:	2310      	movs	r3, #16
   2fc12:	18fb      	adds	r3, r7, r3
   2fc14:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2fc16:	4b25      	ldr	r3, [pc, #148]	; (2fcac <ConnectNetwork+0xfc>)
   2fc18:	681b      	ldr	r3, [r3, #0]
   2fc1a:	001a      	movs	r2, r3
   2fc1c:	2310      	movs	r3, #16
   2fc1e:	18fb      	adds	r3, r7, r3
   2fc20:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2fc22:	68fb      	ldr	r3, [r7, #12]
   2fc24:	681b      	ldr	r3, [r3, #0]
   2fc26:	2b00      	cmp	r3, #0
   2fc28:	da0a      	bge.n	2fc40 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2fc2a:	683b      	ldr	r3, [r7, #0]
   2fc2c:	b2db      	uxtb	r3, r3
   2fc2e:	001a      	movs	r2, r3
   2fc30:	2101      	movs	r1, #1
   2fc32:	2002      	movs	r0, #2
   2fc34:	4b1e      	ldr	r3, [pc, #120]	; (2fcb0 <ConnectNetwork+0x100>)
   2fc36:	4798      	blx	r3
   2fc38:	0003      	movs	r3, r0
   2fc3a:	001a      	movs	r2, r3
   2fc3c:	68fb      	ldr	r3, [r7, #12]
   2fc3e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2fc40:	68fb      	ldr	r3, [r7, #12]
   2fc42:	681b      	ldr	r3, [r3, #0]
   2fc44:	3301      	adds	r3, #1
   2fc46:	d108      	bne.n	2fc5a <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2fc48:	68fb      	ldr	r3, [r7, #12]
   2fc4a:	681b      	ldr	r3, [r3, #0]
   2fc4c:	b25b      	sxtb	r3, r3
   2fc4e:	0018      	movs	r0, r3
   2fc50:	4b18      	ldr	r3, [pc, #96]	; (2fcb4 <ConnectNetwork+0x104>)
   2fc52:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2fc54:	2309      	movs	r3, #9
   2fc56:	425b      	negs	r3, r3
   2fc58:	e01c      	b.n	2fc94 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2fc5a:	68fb      	ldr	r3, [r7, #12]
   2fc5c:	681b      	ldr	r3, [r3, #0]
   2fc5e:	b25b      	sxtb	r3, r3
   2fc60:	2210      	movs	r2, #16
   2fc62:	18b9      	adds	r1, r7, r2
   2fc64:	2210      	movs	r2, #16
   2fc66:	0018      	movs	r0, r3
   2fc68:	4b13      	ldr	r3, [pc, #76]	; (2fcb8 <ConnectNetwork+0x108>)
   2fc6a:	4798      	blx	r3
   2fc6c:	1e03      	subs	r3, r0, #0
   2fc6e:	d002      	beq.n	2fc76 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2fc70:	2309      	movs	r3, #9
   2fc72:	425b      	negs	r3, r3
   2fc74:	e00e      	b.n	2fc94 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2fc76:	4b11      	ldr	r3, [pc, #68]	; (2fcbc <ConnectNetwork+0x10c>)
   2fc78:	2200      	movs	r2, #0
   2fc7a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2fc7c:	e002      	b.n	2fc84 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2fc7e:	2000      	movs	r0, #0
   2fc80:	4b09      	ldr	r3, [pc, #36]	; (2fca8 <ConnectNetwork+0xf8>)
   2fc82:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2fc84:	4b0d      	ldr	r3, [pc, #52]	; (2fcbc <ConnectNetwork+0x10c>)
   2fc86:	781b      	ldrb	r3, [r3, #0]
   2fc88:	2201      	movs	r2, #1
   2fc8a:	4053      	eors	r3, r2
   2fc8c:	b2db      	uxtb	r3, r3
   2fc8e:	2b00      	cmp	r3, #0
   2fc90:	d1f5      	bne.n	2fc7e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2fc92:	2300      	movs	r3, #0
   2fc94:	0018      	movs	r0, r3
   2fc96:	46bd      	mov	sp, r7
   2fc98:	b008      	add	sp, #32
   2fc9a:	bd80      	pop	{r7, pc}
   2fc9c:	20004334 	.word	0x20004334
   2fca0:	20004440 	.word	0x20004440
   2fca4:	00026479 	.word	0x00026479
   2fca8:	000225f9 	.word	0x000225f9
   2fcac:	2000432c 	.word	0x2000432c
   2fcb0:	00025c25 	.word	0x00025c25
   2fcb4:	00026231 	.word	0x00026231
   2fcb8:	00025e39 	.word	0x00025e39
   2fcbc:	20004335 	.word	0x20004335

0002fcc0 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2fcc0:	b580      	push	{r7, lr}
   2fcc2:	b084      	sub	sp, #16
   2fcc4:	af00      	add	r7, sp, #0
   2fcc6:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2fcc8:	687b      	ldr	r3, [r7, #4]
   2fcca:	2b00      	cmp	r3, #0
   2fccc:	d022      	beq.n	2fd14 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fcce:	2300      	movs	r3, #0
   2fcd0:	60fb      	str	r3, [r7, #12]
   2fcd2:	e01b      	b.n	2fd0c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2fcd4:	4a11      	ldr	r2, [pc, #68]	; (2fd1c <allocateClient+0x5c>)
   2fcd6:	68fb      	ldr	r3, [r7, #12]
   2fcd8:	2164      	movs	r1, #100	; 0x64
   2fcda:	434b      	muls	r3, r1
   2fcdc:	18d3      	adds	r3, r2, r3
   2fcde:	3360      	adds	r3, #96	; 0x60
   2fce0:	681b      	ldr	r3, [r3, #0]
   2fce2:	2b00      	cmp	r3, #0
   2fce4:	d10f      	bne.n	2fd06 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2fce6:	4a0d      	ldr	r2, [pc, #52]	; (2fd1c <allocateClient+0x5c>)
   2fce8:	68fb      	ldr	r3, [r7, #12]
   2fcea:	2164      	movs	r1, #100	; 0x64
   2fcec:	434b      	muls	r3, r1
   2fcee:	18d3      	adds	r3, r2, r3
   2fcf0:	3360      	adds	r3, #96	; 0x60
   2fcf2:	687a      	ldr	r2, [r7, #4]
   2fcf4:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2fcf6:	68fb      	ldr	r3, [r7, #12]
   2fcf8:	2264      	movs	r2, #100	; 0x64
   2fcfa:	435a      	muls	r2, r3
   2fcfc:	4b07      	ldr	r3, [pc, #28]	; (2fd1c <allocateClient+0x5c>)
   2fcfe:	18d2      	adds	r2, r2, r3
   2fd00:	687b      	ldr	r3, [r7, #4]
   2fd02:	61da      	str	r2, [r3, #28]
			return;
   2fd04:	e007      	b.n	2fd16 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fd06:	68fb      	ldr	r3, [r7, #12]
   2fd08:	3301      	adds	r3, #1
   2fd0a:	60fb      	str	r3, [r7, #12]
   2fd0c:	68fb      	ldr	r3, [r7, #12]
   2fd0e:	2b06      	cmp	r3, #6
   2fd10:	d9e0      	bls.n	2fcd4 <allocateClient+0x14>
   2fd12:	e000      	b.n	2fd16 <allocateClient+0x56>
		return;
   2fd14:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2fd16:	46bd      	mov	sp, r7
   2fd18:	b004      	add	sp, #16
   2fd1a:	bd80      	pop	{r7, pc}
   2fd1c:	20004444 	.word	0x20004444

0002fd20 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2fd20:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fd22:	b089      	sub	sp, #36	; 0x24
   2fd24:	af04      	add	r7, sp, #16
   2fd26:	6078      	str	r0, [r7, #4]
   2fd28:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2fd2a:	687b      	ldr	r3, [r7, #4]
   2fd2c:	2b00      	cmp	r3, #0
   2fd2e:	d00a      	beq.n	2fd46 <mqtt_init+0x26>
   2fd30:	683b      	ldr	r3, [r7, #0]
   2fd32:	2b00      	cmp	r3, #0
   2fd34:	d007      	beq.n	2fd46 <mqtt_init+0x26>
   2fd36:	683b      	ldr	r3, [r7, #0]
   2fd38:	691b      	ldr	r3, [r3, #16]
   2fd3a:	2b00      	cmp	r3, #0
   2fd3c:	d003      	beq.n	2fd46 <mqtt_init+0x26>
   2fd3e:	683b      	ldr	r3, [r7, #0]
   2fd40:	689b      	ldr	r3, [r3, #8]
   2fd42:	2b00      	cmp	r3, #0
   2fd44:	d102      	bne.n	2fd4c <mqtt_init+0x2c>
		return FAILURE;
   2fd46:	2301      	movs	r3, #1
   2fd48:	425b      	negs	r3, r3
   2fd4a:	e034      	b.n	2fdb6 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2fd4c:	683b      	ldr	r3, [r7, #0]
   2fd4e:	889b      	ldrh	r3, [r3, #4]
   2fd50:	001a      	movs	r2, r3
   2fd52:	23fa      	movs	r3, #250	; 0xfa
   2fd54:	009b      	lsls	r3, r3, #2
   2fd56:	4353      	muls	r3, r2
   2fd58:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2fd5a:	687b      	ldr	r3, [r7, #4]
   2fd5c:	3320      	adds	r3, #32
   2fd5e:	0018      	movs	r0, r3
   2fd60:	4b17      	ldr	r3, [pc, #92]	; (2fdc0 <mqtt_init+0xa0>)
   2fd62:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2fd64:	687b      	ldr	r3, [r7, #4]
   2fd66:	3304      	adds	r3, #4
   2fd68:	6839      	ldr	r1, [r7, #0]
   2fd6a:	2218      	movs	r2, #24
   2fd6c:	0018      	movs	r0, r3
   2fd6e:	4b15      	ldr	r3, [pc, #84]	; (2fdc4 <mqtt_init+0xa4>)
   2fd70:	4798      	blx	r3
	allocateClient(module);
   2fd72:	687b      	ldr	r3, [r7, #4]
   2fd74:	0018      	movs	r0, r3
   2fd76:	4b14      	ldr	r3, [pc, #80]	; (2fdc8 <mqtt_init+0xa8>)
   2fd78:	4798      	blx	r3
	
	if(module->client)
   2fd7a:	687b      	ldr	r3, [r7, #4]
   2fd7c:	69db      	ldr	r3, [r3, #28]
   2fd7e:	2b00      	cmp	r3, #0
   2fd80:	d017      	beq.n	2fdb2 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2fd82:	687b      	ldr	r3, [r7, #4]
   2fd84:	69d8      	ldr	r0, [r3, #28]
   2fd86:	687b      	ldr	r3, [r7, #4]
   2fd88:	3320      	adds	r3, #32
   2fd8a:	001c      	movs	r4, r3
   2fd8c:	683b      	ldr	r3, [r7, #0]
   2fd8e:	691e      	ldr	r6, [r3, #16]
   2fd90:	683b      	ldr	r3, [r7, #0]
   2fd92:	695a      	ldr	r2, [r3, #20]
   2fd94:	683b      	ldr	r3, [r7, #0]
   2fd96:	6899      	ldr	r1, [r3, #8]
   2fd98:	683b      	ldr	r3, [r7, #0]
   2fd9a:	68db      	ldr	r3, [r3, #12]
   2fd9c:	68fd      	ldr	r5, [r7, #12]
   2fd9e:	9302      	str	r3, [sp, #8]
   2fda0:	9101      	str	r1, [sp, #4]
   2fda2:	9200      	str	r2, [sp, #0]
   2fda4:	0033      	movs	r3, r6
   2fda6:	002a      	movs	r2, r5
   2fda8:	0021      	movs	r1, r4
   2fdaa:	4c08      	ldr	r4, [pc, #32]	; (2fdcc <mqtt_init+0xac>)
   2fdac:	47a0      	blx	r4
		return SUCCESS;
   2fdae:	2300      	movs	r3, #0
   2fdb0:	e001      	b.n	2fdb6 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2fdb2:	2301      	movs	r3, #1
   2fdb4:	425b      	negs	r3, r3
}
   2fdb6:	0018      	movs	r0, r3
   2fdb8:	46bd      	mov	sp, r7
   2fdba:	b005      	add	sp, #20
   2fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fdbe:	46c0      	nop			; (mov r8, r8)
   2fdc0:	0002fb79 	.word	0x0002fb79
   2fdc4:	00035341 	.word	0x00035341
   2fdc8:	0002fcc1 	.word	0x0002fcc1
   2fdcc:	0002ebf1 	.word	0x0002ebf1

0002fdd0 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2fdd0:	b580      	push	{r7, lr}
   2fdd2:	b082      	sub	sp, #8
   2fdd4:	af00      	add	r7, sp, #0
   2fdd6:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2fdd8:	687b      	ldr	r3, [r7, #4]
   2fdda:	4a0c      	ldr	r2, [pc, #48]	; (2fe0c <mqtt_get_config_defaults+0x3c>)
   2fddc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fdde:	687b      	ldr	r3, [r7, #4]
   2fde0:	2200      	movs	r2, #0
   2fde2:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2fde4:	687b      	ldr	r3, [r7, #4]
   2fde6:	223c      	movs	r2, #60	; 0x3c
   2fde8:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2fdea:	687b      	ldr	r3, [r7, #4]
   2fdec:	2200      	movs	r2, #0
   2fdee:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2fdf0:	687b      	ldr	r3, [r7, #4]
   2fdf2:	2200      	movs	r2, #0
   2fdf4:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2fdf6:	687b      	ldr	r3, [r7, #4]
   2fdf8:	2200      	movs	r2, #0
   2fdfa:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2fdfc:	687b      	ldr	r3, [r7, #4]
   2fdfe:	2200      	movs	r2, #0
   2fe00:	615a      	str	r2, [r3, #20]
}
   2fe02:	46c0      	nop			; (mov r8, r8)
   2fe04:	46bd      	mov	sp, r7
   2fe06:	b002      	add	sp, #8
   2fe08:	bd80      	pop	{r7, pc}
   2fe0a:	46c0      	nop			; (mov r8, r8)
   2fe0c:	0000075b 	.word	0x0000075b

0002fe10 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2fe10:	b580      	push	{r7, lr}
   2fe12:	b082      	sub	sp, #8
   2fe14:	af00      	add	r7, sp, #0
   2fe16:	6078      	str	r0, [r7, #4]
   2fe18:	6039      	str	r1, [r7, #0]
	if(module)
   2fe1a:	687b      	ldr	r3, [r7, #4]
   2fe1c:	2b00      	cmp	r3, #0
   2fe1e:	d004      	beq.n	2fe2a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2fe20:	687b      	ldr	r3, [r7, #4]
   2fe22:	683a      	ldr	r2, [r7, #0]
   2fe24:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2fe26:	2300      	movs	r3, #0
   2fe28:	e001      	b.n	2fe2e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2fe2a:	2301      	movs	r3, #1
   2fe2c:	425b      	negs	r3, r3
}
   2fe2e:	0018      	movs	r0, r3
   2fe30:	46bd      	mov	sp, r7
   2fe32:	b002      	add	sp, #8
   2fe34:	bd80      	pop	{r7, pc}
	...

0002fe38 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2fe38:	b580      	push	{r7, lr}
   2fe3a:	b082      	sub	sp, #8
   2fe3c:	af00      	add	r7, sp, #0
   2fe3e:	603a      	str	r2, [r7, #0]
   2fe40:	1dfb      	adds	r3, r7, #7
   2fe42:	1c02      	adds	r2, r0, #0
   2fe44:	701a      	strb	r2, [r3, #0]
   2fe46:	1dbb      	adds	r3, r7, #6
   2fe48:	1c0a      	adds	r2, r1, #0
   2fe4a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2fe4c:	683a      	ldr	r2, [r7, #0]
   2fe4e:	1dbb      	adds	r3, r7, #6
   2fe50:	7819      	ldrb	r1, [r3, #0]
   2fe52:	1dfb      	adds	r3, r7, #7
   2fe54:	781b      	ldrb	r3, [r3, #0]
   2fe56:	b25b      	sxtb	r3, r3
   2fe58:	0018      	movs	r0, r3
   2fe5a:	4b03      	ldr	r3, [pc, #12]	; (2fe68 <mqtt_socket_event_handler+0x30>)
   2fe5c:	4798      	blx	r3
}
   2fe5e:	46c0      	nop			; (mov r8, r8)
   2fe60:	46bd      	mov	sp, r7
   2fe62:	b002      	add	sp, #8
   2fe64:	bd80      	pop	{r7, pc}
   2fe66:	46c0      	nop			; (mov r8, r8)
   2fe68:	0002f8b5 	.word	0x0002f8b5

0002fe6c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2fe6c:	b580      	push	{r7, lr}
   2fe6e:	b082      	sub	sp, #8
   2fe70:	af00      	add	r7, sp, #0
   2fe72:	6078      	str	r0, [r7, #4]
   2fe74:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2fe76:	683a      	ldr	r2, [r7, #0]
   2fe78:	687b      	ldr	r3, [r7, #4]
   2fe7a:	0011      	movs	r1, r2
   2fe7c:	0018      	movs	r0, r3
   2fe7e:	4b03      	ldr	r3, [pc, #12]	; (2fe8c <mqtt_socket_resolve_handler+0x20>)
   2fe80:	4798      	blx	r3
}
   2fe82:	46c0      	nop			; (mov r8, r8)
   2fe84:	46bd      	mov	sp, r7
   2fe86:	b002      	add	sp, #8
   2fe88:	bd80      	pop	{r7, pc}
   2fe8a:	46c0      	nop			; (mov r8, r8)
   2fe8c:	0002f865 	.word	0x0002f865

0002fe90 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2fe90:	b590      	push	{r4, r7, lr}
   2fe92:	b085      	sub	sp, #20
   2fe94:	af00      	add	r7, sp, #0
   2fe96:	6078      	str	r0, [r7, #4]
   2fe98:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2fe9a:	687b      	ldr	r3, [r7, #4]
   2fe9c:	3320      	adds	r3, #32
   2fe9e:	0018      	movs	r0, r3
   2fea0:	687b      	ldr	r3, [r7, #4]
   2fea2:	889b      	ldrh	r3, [r3, #4]
   2fea4:	001a      	movs	r2, r3
   2fea6:	687b      	ldr	r3, [r7, #4]
   2fea8:	799b      	ldrb	r3, [r3, #6]
   2feaa:	6839      	ldr	r1, [r7, #0]
   2feac:	4c09      	ldr	r4, [pc, #36]	; (2fed4 <mqtt_connect+0x44>)
   2feae:	47a0      	blx	r4
   2feb0:	0003      	movs	r3, r0
   2feb2:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2feb4:	687b      	ldr	r3, [r7, #4]
   2feb6:	681b      	ldr	r3, [r3, #0]
   2feb8:	2b00      	cmp	r3, #0
   2feba:	d006      	beq.n	2feca <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2febc:	687b      	ldr	r3, [r7, #4]
   2febe:	681b      	ldr	r3, [r3, #0]
   2fec0:	220c      	movs	r2, #12
   2fec2:	18ba      	adds	r2, r7, r2
   2fec4:	6878      	ldr	r0, [r7, #4]
   2fec6:	2100      	movs	r1, #0
   2fec8:	4798      	blx	r3
	return connResult.sock_connected.result;
   2feca:	68fb      	ldr	r3, [r7, #12]
}
   2fecc:	0018      	movs	r0, r3
   2fece:	46bd      	mov	sp, r7
   2fed0:	b005      	add	sp, #20
   2fed2:	bd90      	pop	{r4, r7, pc}
   2fed4:	0002fbb1 	.word	0x0002fbb1

0002fed8 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2fed8:	b580      	push	{r7, lr}
   2feda:	b09c      	sub	sp, #112	; 0x70
   2fedc:	af00      	add	r7, sp, #0
   2fede:	60f8      	str	r0, [r7, #12]
   2fee0:	607a      	str	r2, [r7, #4]
   2fee2:	603b      	str	r3, [r7, #0]
   2fee4:	230b      	movs	r3, #11
   2fee6:	18fb      	adds	r3, r7, r3
   2fee8:	1c0a      	adds	r2, r1, #0
   2feea:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2feec:	2310      	movs	r3, #16
   2feee:	18fa      	adds	r2, r7, r3
   2fef0:	4b31      	ldr	r3, [pc, #196]	; (2ffb8 <mqtt_connect_broker+0xe0>)
   2fef2:	0010      	movs	r0, r2
   2fef4:	0019      	movs	r1, r3
   2fef6:	2358      	movs	r3, #88	; 0x58
   2fef8:	001a      	movs	r2, r3
   2fefa:	4b30      	ldr	r3, [pc, #192]	; (2ffbc <mqtt_connect_broker+0xe4>)
   2fefc:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2fefe:	2310      	movs	r3, #16
   2ff00:	18fb      	adds	r3, r7, r3
   2ff02:	2204      	movs	r2, #4
   2ff04:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2ff06:	2310      	movs	r3, #16
   2ff08:	18fb      	adds	r3, r7, r3
   2ff0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2ff0c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2ff0e:	2310      	movs	r3, #16
   2ff10:	18fb      	adds	r3, r7, r3
   2ff12:	687a      	ldr	r2, [r7, #4]
   2ff14:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2ff16:	2310      	movs	r3, #16
   2ff18:	18fb      	adds	r3, r7, r3
   2ff1a:	683a      	ldr	r2, [r7, #0]
   2ff1c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2ff1e:	2310      	movs	r3, #16
   2ff20:	18fb      	adds	r3, r7, r3
   2ff22:	220b      	movs	r2, #11
   2ff24:	18ba      	adds	r2, r7, r2
   2ff26:	7812      	ldrb	r2, [r2, #0]
   2ff28:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2ff2a:	2310      	movs	r3, #16
   2ff2c:	18fb      	adds	r3, r7, r3
   2ff2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2ff30:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2ff32:	2310      	movs	r3, #16
   2ff34:	18fb      	adds	r3, r7, r3
   2ff36:	2280      	movs	r2, #128	; 0x80
   2ff38:	18ba      	adds	r2, r7, r2
   2ff3a:	6812      	ldr	r2, [r2, #0]
   2ff3c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2ff3e:	2310      	movs	r3, #16
   2ff40:	18fb      	adds	r3, r7, r3
   2ff42:	228c      	movs	r2, #140	; 0x8c
   2ff44:	18ba      	adds	r2, r7, r2
   2ff46:	213c      	movs	r1, #60	; 0x3c
   2ff48:	7812      	ldrb	r2, [r2, #0]
   2ff4a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2ff4c:	2310      	movs	r3, #16
   2ff4e:	18fb      	adds	r3, r7, r3
   2ff50:	2288      	movs	r2, #136	; 0x88
   2ff52:	18ba      	adds	r2, r7, r2
   2ff54:	213d      	movs	r1, #61	; 0x3d
   2ff56:	7812      	ldrb	r2, [r2, #0]
   2ff58:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2ff5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2ff5c:	2b00      	cmp	r3, #0
   2ff5e:	d008      	beq.n	2ff72 <mqtt_connect_broker+0x9a>
   2ff60:	2380      	movs	r3, #128	; 0x80
   2ff62:	18fb      	adds	r3, r7, r3
   2ff64:	681b      	ldr	r3, [r3, #0]
   2ff66:	2b00      	cmp	r3, #0
   2ff68:	d003      	beq.n	2ff72 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2ff6a:	2310      	movs	r3, #16
   2ff6c:	18fb      	adds	r3, r7, r3
   2ff6e:	2201      	movs	r2, #1
   2ff70:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2ff72:	68fb      	ldr	r3, [r7, #12]
   2ff74:	69db      	ldr	r3, [r3, #28]
   2ff76:	2210      	movs	r2, #16
   2ff78:	18ba      	adds	r2, r7, r2
   2ff7a:	0011      	movs	r1, r2
   2ff7c:	0018      	movs	r0, r3
   2ff7e:	4b10      	ldr	r3, [pc, #64]	; (2ffc0 <mqtt_connect_broker+0xe8>)
   2ff80:	4798      	blx	r3
   2ff82:	0003      	movs	r3, r0
   2ff84:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2ff86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2ff88:	b2da      	uxtb	r2, r3
   2ff8a:	2368      	movs	r3, #104	; 0x68
   2ff8c:	18fb      	adds	r3, r7, r3
   2ff8e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2ff90:	68fb      	ldr	r3, [r7, #12]
   2ff92:	681b      	ldr	r3, [r3, #0]
   2ff94:	2b00      	cmp	r3, #0
   2ff96:	d006      	beq.n	2ffa6 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2ff98:	68fb      	ldr	r3, [r7, #12]
   2ff9a:	681b      	ldr	r3, [r3, #0]
   2ff9c:	2268      	movs	r2, #104	; 0x68
   2ff9e:	18ba      	adds	r2, r7, r2
   2ffa0:	68f8      	ldr	r0, [r7, #12]
   2ffa2:	2101      	movs	r1, #1
   2ffa4:	4798      	blx	r3
	
	module->isConnected = true;
   2ffa6:	68fb      	ldr	r3, [r7, #12]
   2ffa8:	2234      	movs	r2, #52	; 0x34
   2ffaa:	2101      	movs	r1, #1
   2ffac:	5499      	strb	r1, [r3, r2]
	return rc;
   2ffae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2ffb0:	0018      	movs	r0, r3
   2ffb2:	46bd      	mov	sp, r7
   2ffb4:	b01c      	add	sp, #112	; 0x70
   2ffb6:	bd80      	pop	{r7, pc}
   2ffb8:	0003c2e8 	.word	0x0003c2e8
   2ffbc:	00035341 	.word	0x00035341
   2ffc0:	0002f301 	.word	0x0002f301

0002ffc4 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2ffc4:	b580      	push	{r7, lr}
   2ffc6:	b084      	sub	sp, #16
   2ffc8:	af00      	add	r7, sp, #0
   2ffca:	6078      	str	r0, [r7, #4]
   2ffcc:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2ffce:	687b      	ldr	r3, [r7, #4]
   2ffd0:	69db      	ldr	r3, [r3, #28]
   2ffd2:	0018      	movs	r0, r3
   2ffd4:	4b0c      	ldr	r3, [pc, #48]	; (30008 <mqtt_disconnect+0x44>)
   2ffd6:	4798      	blx	r3
   2ffd8:	0003      	movs	r3, r0
   2ffda:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2ffdc:	68fb      	ldr	r3, [r7, #12]
   2ffde:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2ffe0:	687b      	ldr	r3, [r7, #4]
   2ffe2:	681b      	ldr	r3, [r3, #0]
   2ffe4:	2b00      	cmp	r3, #0
   2ffe6:	d006      	beq.n	2fff6 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2ffe8:	687b      	ldr	r3, [r7, #4]
   2ffea:	681b      	ldr	r3, [r3, #0]
   2ffec:	2208      	movs	r2, #8
   2ffee:	18ba      	adds	r2, r7, r2
   2fff0:	6878      	ldr	r0, [r7, #4]
   2fff2:	2105      	movs	r1, #5
   2fff4:	4798      	blx	r3
	
	module->isConnected = false;
   2fff6:	687b      	ldr	r3, [r7, #4]
   2fff8:	2234      	movs	r2, #52	; 0x34
   2fffa:	2100      	movs	r1, #0
   2fffc:	5499      	strb	r1, [r3, r2]
	return rc;
   2fffe:	68fb      	ldr	r3, [r7, #12]
}
   30000:	0018      	movs	r0, r3
   30002:	46bd      	mov	sp, r7
   30004:	b004      	add	sp, #16
   30006:	bd80      	pop	{r7, pc}
   30008:	0002f78d 	.word	0x0002f78d

0003000c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   3000c:	b580      	push	{r7, lr}
   3000e:	b08a      	sub	sp, #40	; 0x28
   30010:	af00      	add	r7, sp, #0
   30012:	60f8      	str	r0, [r7, #12]
   30014:	60b9      	str	r1, [r7, #8]
   30016:	607a      	str	r2, [r7, #4]
   30018:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   3001a:	2314      	movs	r3, #20
   3001c:	18fb      	adds	r3, r7, r3
   3001e:	2230      	movs	r2, #48	; 0x30
   30020:	18ba      	adds	r2, r7, r2
   30022:	7812      	ldrb	r2, [r2, #0]
   30024:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   30026:	2314      	movs	r3, #20
   30028:	18fb      	adds	r3, r7, r3
   3002a:	687a      	ldr	r2, [r7, #4]
   3002c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   3002e:	2314      	movs	r3, #20
   30030:	18fb      	adds	r3, r7, r3
   30032:	683a      	ldr	r2, [r7, #0]
   30034:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   30036:	2314      	movs	r3, #20
   30038:	18fb      	adds	r3, r7, r3
   3003a:	2234      	movs	r2, #52	; 0x34
   3003c:	18ba      	adds	r2, r7, r2
   3003e:	7812      	ldrb	r2, [r2, #0]
   30040:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   30042:	68fb      	ldr	r3, [r7, #12]
   30044:	69db      	ldr	r3, [r3, #28]
   30046:	2214      	movs	r2, #20
   30048:	18ba      	adds	r2, r7, r2
   3004a:	68b9      	ldr	r1, [r7, #8]
   3004c:	0018      	movs	r0, r3
   3004e:	4b09      	ldr	r3, [pc, #36]	; (30074 <mqtt_publish+0x68>)
   30050:	4798      	blx	r3
   30052:	0003      	movs	r3, r0
   30054:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   30056:	68fb      	ldr	r3, [r7, #12]
   30058:	681b      	ldr	r3, [r3, #0]
   3005a:	2b00      	cmp	r3, #0
   3005c:	d005      	beq.n	3006a <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   3005e:	68fb      	ldr	r3, [r7, #12]
   30060:	681b      	ldr	r3, [r3, #0]
   30062:	68f8      	ldr	r0, [r7, #12]
   30064:	2200      	movs	r2, #0
   30066:	2102      	movs	r1, #2
   30068:	4798      	blx	r3
	
	return rc;
   3006a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3006c:	0018      	movs	r0, r3
   3006e:	46bd      	mov	sp, r7
   30070:	b00a      	add	sp, #40	; 0x28
   30072:	bd80      	pop	{r7, pc}
   30074:	0002f5cd 	.word	0x0002f5cd

00030078 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30078:	b590      	push	{r4, r7, lr}
   3007a:	b087      	sub	sp, #28
   3007c:	af00      	add	r7, sp, #0
   3007e:	60f8      	str	r0, [r7, #12]
   30080:	60b9      	str	r1, [r7, #8]
   30082:	603b      	str	r3, [r7, #0]
   30084:	1dfb      	adds	r3, r7, #7
   30086:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30088:	68fb      	ldr	r3, [r7, #12]
   3008a:	69d8      	ldr	r0, [r3, #28]
   3008c:	683c      	ldr	r4, [r7, #0]
   3008e:	1dfb      	adds	r3, r7, #7
   30090:	781a      	ldrb	r2, [r3, #0]
   30092:	68b9      	ldr	r1, [r7, #8]
   30094:	0023      	movs	r3, r4
   30096:	4c09      	ldr	r4, [pc, #36]	; (300bc <mqtt_subscribe+0x44>)
   30098:	47a0      	blx	r4
   3009a:	0003      	movs	r3, r0
   3009c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   3009e:	68fb      	ldr	r3, [r7, #12]
   300a0:	681b      	ldr	r3, [r3, #0]
   300a2:	2b00      	cmp	r3, #0
   300a4:	d005      	beq.n	300b2 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   300a6:	68fb      	ldr	r3, [r7, #12]
   300a8:	681b      	ldr	r3, [r3, #0]
   300aa:	68f8      	ldr	r0, [r7, #12]
   300ac:	2200      	movs	r2, #0
   300ae:	2103      	movs	r1, #3
   300b0:	4798      	blx	r3
	
	return rc;
   300b2:	697b      	ldr	r3, [r7, #20]
}
   300b4:	0018      	movs	r0, r3
   300b6:	46bd      	mov	sp, r7
   300b8:	b007      	add	sp, #28
   300ba:	bd90      	pop	{r4, r7, pc}
   300bc:	0002f441 	.word	0x0002f441

000300c0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   300c0:	b580      	push	{r7, lr}
   300c2:	b082      	sub	sp, #8
   300c4:	af00      	add	r7, sp, #0
   300c6:	6078      	str	r0, [r7, #4]
   300c8:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   300ca:	687b      	ldr	r3, [r7, #4]
   300cc:	69db      	ldr	r3, [r3, #28]
   300ce:	683a      	ldr	r2, [r7, #0]
   300d0:	0011      	movs	r1, r2
   300d2:	0018      	movs	r0, r3
   300d4:	4b03      	ldr	r3, [pc, #12]	; (300e4 <mqtt_yield+0x24>)
   300d6:	4798      	blx	r3
   300d8:	0003      	movs	r3, r0
   300da:	0018      	movs	r0, r3
   300dc:	46bd      	mov	sp, r7
   300de:	b002      	add	sp, #8
   300e0:	bd80      	pop	{r7, pc}
   300e2:	46c0      	nop			; (mov r8, r8)
   300e4:	0002f249 	.word	0x0002f249

000300e8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   300e8:	b590      	push	{r4, r7, lr}
   300ea:	b085      	sub	sp, #20
   300ec:	af00      	add	r7, sp, #0
   300ee:	6078      	str	r0, [r7, #4]
	int len = 0;
   300f0:	2300      	movs	r3, #0
   300f2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   300f4:	687b      	ldr	r3, [r7, #4]
   300f6:	7a1b      	ldrb	r3, [r3, #8]
   300f8:	2b03      	cmp	r3, #3
   300fa:	d102      	bne.n	30102 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   300fc:	230c      	movs	r3, #12
   300fe:	60fb      	str	r3, [r7, #12]
   30100:	e005      	b.n	3010e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   30102:	687b      	ldr	r3, [r7, #4]
   30104:	7a1b      	ldrb	r3, [r3, #8]
   30106:	2b04      	cmp	r3, #4
   30108:	d101      	bne.n	3010e <MQTTSerialize_connectLength+0x26>
		len = 10;
   3010a:	230a      	movs	r3, #10
   3010c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   3010e:	687b      	ldr	r3, [r7, #4]
   30110:	68d8      	ldr	r0, [r3, #12]
   30112:	6919      	ldr	r1, [r3, #16]
   30114:	695a      	ldr	r2, [r3, #20]
   30116:	4b25      	ldr	r3, [pc, #148]	; (301ac <MQTTSerialize_connectLength+0xc4>)
   30118:	4798      	blx	r3
   3011a:	0003      	movs	r3, r0
   3011c:	3302      	adds	r3, #2
   3011e:	68fa      	ldr	r2, [r7, #12]
   30120:	18d3      	adds	r3, r2, r3
   30122:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   30124:	687b      	ldr	r3, [r7, #4]
   30126:	7edb      	ldrb	r3, [r3, #27]
   30128:	2b00      	cmp	r3, #0
   3012a:	d013      	beq.n	30154 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   3012c:	687b      	ldr	r3, [r7, #4]
   3012e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   30130:	6a99      	ldr	r1, [r3, #40]	; 0x28
   30132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30134:	4b1d      	ldr	r3, [pc, #116]	; (301ac <MQTTSerialize_connectLength+0xc4>)
   30136:	4798      	blx	r3
   30138:	0003      	movs	r3, r0
   3013a:	1c9c      	adds	r4, r3, #2
   3013c:	687b      	ldr	r3, [r7, #4]
   3013e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   30140:	6b59      	ldr	r1, [r3, #52]	; 0x34
   30142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30144:	4b19      	ldr	r3, [pc, #100]	; (301ac <MQTTSerialize_connectLength+0xc4>)
   30146:	4798      	blx	r3
   30148:	0003      	movs	r3, r0
   3014a:	18e3      	adds	r3, r4, r3
   3014c:	3302      	adds	r3, #2
   3014e:	68fa      	ldr	r2, [r7, #12]
   30150:	18d3      	adds	r3, r2, r3
   30152:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   30154:	687b      	ldr	r3, [r7, #4]
   30156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30158:	2b00      	cmp	r3, #0
   3015a:	d103      	bne.n	30164 <MQTTSerialize_connectLength+0x7c>
   3015c:	687b      	ldr	r3, [r7, #4]
   3015e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30160:	2b00      	cmp	r3, #0
   30162:	d00a      	beq.n	3017a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   30164:	687b      	ldr	r3, [r7, #4]
   30166:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30168:	6c59      	ldr	r1, [r3, #68]	; 0x44
   3016a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   3016c:	4b0f      	ldr	r3, [pc, #60]	; (301ac <MQTTSerialize_connectLength+0xc4>)
   3016e:	4798      	blx	r3
   30170:	0003      	movs	r3, r0
   30172:	3302      	adds	r3, #2
   30174:	68fa      	ldr	r2, [r7, #12]
   30176:	18d3      	adds	r3, r2, r3
   30178:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   3017a:	687b      	ldr	r3, [r7, #4]
   3017c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3017e:	2b00      	cmp	r3, #0
   30180:	d103      	bne.n	3018a <MQTTSerialize_connectLength+0xa2>
   30182:	687b      	ldr	r3, [r7, #4]
   30184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30186:	2b00      	cmp	r3, #0
   30188:	d00a      	beq.n	301a0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   3018a:	687b      	ldr	r3, [r7, #4]
   3018c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3018e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30192:	4b06      	ldr	r3, [pc, #24]	; (301ac <MQTTSerialize_connectLength+0xc4>)
   30194:	4798      	blx	r3
   30196:	0003      	movs	r3, r0
   30198:	3302      	adds	r3, #2
   3019a:	68fa      	ldr	r2, [r7, #12]
   3019c:	18d3      	adds	r3, r2, r3
   3019e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   301a0:	68fb      	ldr	r3, [r7, #12]
}
   301a2:	0018      	movs	r0, r3
   301a4:	46bd      	mov	sp, r7
   301a6:	b005      	add	sp, #20
   301a8:	bd90      	pop	{r4, r7, pc}
   301aa:	46c0      	nop			; (mov r8, r8)
   301ac:	00030b59 	.word	0x00030b59

000301b0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   301b0:	b590      	push	{r4, r7, lr}
   301b2:	b08b      	sub	sp, #44	; 0x2c
   301b4:	af00      	add	r7, sp, #0
   301b6:	60f8      	str	r0, [r7, #12]
   301b8:	60b9      	str	r1, [r7, #8]
   301ba:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   301bc:	68fb      	ldr	r3, [r7, #12]
   301be:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   301c0:	2300      	movs	r3, #0
   301c2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   301c4:	2300      	movs	r3, #0
   301c6:	617b      	str	r3, [r7, #20]
	int len = 0;
   301c8:	2300      	movs	r3, #0
   301ca:	623b      	str	r3, [r7, #32]
	int rc = -1;
   301cc:	2301      	movs	r3, #1
   301ce:	425b      	negs	r3, r3
   301d0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   301d2:	687b      	ldr	r3, [r7, #4]
   301d4:	0018      	movs	r0, r3
   301d6:	4b8c      	ldr	r3, [pc, #560]	; (30408 <MQTTSerialize_connect+0x258>)
   301d8:	4798      	blx	r3
   301da:	0003      	movs	r3, r0
   301dc:	623b      	str	r3, [r7, #32]
   301de:	6a3b      	ldr	r3, [r7, #32]
   301e0:	0018      	movs	r0, r3
   301e2:	4b8a      	ldr	r3, [pc, #552]	; (3040c <MQTTSerialize_connect+0x25c>)
   301e4:	4798      	blx	r3
   301e6:	0002      	movs	r2, r0
   301e8:	68bb      	ldr	r3, [r7, #8]
   301ea:	429a      	cmp	r2, r3
   301ec:	dd03      	ble.n	301f6 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   301ee:	2302      	movs	r3, #2
   301f0:	425b      	negs	r3, r3
   301f2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   301f4:	e103      	b.n	303fe <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   301f6:	2318      	movs	r3, #24
   301f8:	18fb      	adds	r3, r7, r3
   301fa:	2200      	movs	r2, #0
   301fc:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   301fe:	2318      	movs	r3, #24
   30200:	18fb      	adds	r3, r7, r3
   30202:	781a      	ldrb	r2, [r3, #0]
   30204:	210f      	movs	r1, #15
   30206:	400a      	ands	r2, r1
   30208:	1c11      	adds	r1, r2, #0
   3020a:	2210      	movs	r2, #16
   3020c:	430a      	orrs	r2, r1
   3020e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30210:	2318      	movs	r3, #24
   30212:	18fb      	adds	r3, r7, r3
   30214:	781a      	ldrb	r2, [r3, #0]
   30216:	231c      	movs	r3, #28
   30218:	18fb      	adds	r3, r7, r3
   3021a:	0011      	movs	r1, r2
   3021c:	0018      	movs	r0, r3
   3021e:	4b7c      	ldr	r3, [pc, #496]	; (30410 <MQTTSerialize_connect+0x260>)
   30220:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   30222:	69fb      	ldr	r3, [r7, #28]
   30224:	6a3a      	ldr	r2, [r7, #32]
   30226:	0011      	movs	r1, r2
   30228:	0018      	movs	r0, r3
   3022a:	4b7a      	ldr	r3, [pc, #488]	; (30414 <MQTTSerialize_connect+0x264>)
   3022c:	4798      	blx	r3
   3022e:	0002      	movs	r2, r0
   30230:	69fb      	ldr	r3, [r7, #28]
   30232:	189b      	adds	r3, r3, r2
   30234:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   30236:	687b      	ldr	r3, [r7, #4]
   30238:	7a1b      	ldrb	r3, [r3, #8]
   3023a:	2b04      	cmp	r3, #4
   3023c:	d10d      	bne.n	3025a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   3023e:	4a76      	ldr	r2, [pc, #472]	; (30418 <MQTTSerialize_connect+0x268>)
   30240:	231c      	movs	r3, #28
   30242:	18fb      	adds	r3, r7, r3
   30244:	0011      	movs	r1, r2
   30246:	0018      	movs	r0, r3
   30248:	4b74      	ldr	r3, [pc, #464]	; (3041c <MQTTSerialize_connect+0x26c>)
   3024a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   3024c:	231c      	movs	r3, #28
   3024e:	18fb      	adds	r3, r7, r3
   30250:	2104      	movs	r1, #4
   30252:	0018      	movs	r0, r3
   30254:	4b6e      	ldr	r3, [pc, #440]	; (30410 <MQTTSerialize_connect+0x260>)
   30256:	4798      	blx	r3
   30258:	e00c      	b.n	30274 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   3025a:	4a71      	ldr	r2, [pc, #452]	; (30420 <MQTTSerialize_connect+0x270>)
   3025c:	231c      	movs	r3, #28
   3025e:	18fb      	adds	r3, r7, r3
   30260:	0011      	movs	r1, r2
   30262:	0018      	movs	r0, r3
   30264:	4b6d      	ldr	r3, [pc, #436]	; (3041c <MQTTSerialize_connect+0x26c>)
   30266:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30268:	231c      	movs	r3, #28
   3026a:	18fb      	adds	r3, r7, r3
   3026c:	2103      	movs	r1, #3
   3026e:	0018      	movs	r0, r3
   30270:	4b67      	ldr	r3, [pc, #412]	; (30410 <MQTTSerialize_connect+0x260>)
   30272:	4798      	blx	r3
	}

	flags.all = 0;
   30274:	2314      	movs	r3, #20
   30276:	18fb      	adds	r3, r7, r3
   30278:	2200      	movs	r2, #0
   3027a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   3027c:	687b      	ldr	r3, [r7, #4]
   3027e:	7e9b      	ldrb	r3, [r3, #26]
   30280:	1c1a      	adds	r2, r3, #0
   30282:	2301      	movs	r3, #1
   30284:	4013      	ands	r3, r2
   30286:	b2da      	uxtb	r2, r3
   30288:	2314      	movs	r3, #20
   3028a:	18fb      	adds	r3, r7, r3
   3028c:	2101      	movs	r1, #1
   3028e:	400a      	ands	r2, r1
   30290:	1890      	adds	r0, r2, r2
   30292:	781a      	ldrb	r2, [r3, #0]
   30294:	2102      	movs	r1, #2
   30296:	438a      	bics	r2, r1
   30298:	1c11      	adds	r1, r2, #0
   3029a:	1c02      	adds	r2, r0, #0
   3029c:	430a      	orrs	r2, r1
   3029e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   302a0:	687b      	ldr	r3, [r7, #4]
   302a2:	7edb      	ldrb	r3, [r3, #27]
   302a4:	1e5a      	subs	r2, r3, #1
   302a6:	4193      	sbcs	r3, r2
   302a8:	b2da      	uxtb	r2, r3
   302aa:	2314      	movs	r3, #20
   302ac:	18fb      	adds	r3, r7, r3
   302ae:	2101      	movs	r1, #1
   302b0:	400a      	ands	r2, r1
   302b2:	0090      	lsls	r0, r2, #2
   302b4:	781a      	ldrb	r2, [r3, #0]
   302b6:	2104      	movs	r1, #4
   302b8:	438a      	bics	r2, r1
   302ba:	1c11      	adds	r1, r2, #0
   302bc:	1c02      	adds	r2, r0, #0
   302be:	430a      	orrs	r2, r1
   302c0:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   302c2:	2314      	movs	r3, #20
   302c4:	18fb      	adds	r3, r7, r3
   302c6:	781b      	ldrb	r3, [r3, #0]
   302c8:	2204      	movs	r2, #4
   302ca:	4013      	ands	r3, r2
   302cc:	b2db      	uxtb	r3, r3
   302ce:	2b00      	cmp	r3, #0
   302d0:	d025      	beq.n	3031e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   302d2:	687b      	ldr	r3, [r7, #4]
   302d4:	223d      	movs	r2, #61	; 0x3d
   302d6:	5c9b      	ldrb	r3, [r3, r2]
   302d8:	1c1a      	adds	r2, r3, #0
   302da:	2303      	movs	r3, #3
   302dc:	4013      	ands	r3, r2
   302de:	b2da      	uxtb	r2, r3
   302e0:	2314      	movs	r3, #20
   302e2:	18fb      	adds	r3, r7, r3
   302e4:	2103      	movs	r1, #3
   302e6:	400a      	ands	r2, r1
   302e8:	00d0      	lsls	r0, r2, #3
   302ea:	781a      	ldrb	r2, [r3, #0]
   302ec:	2118      	movs	r1, #24
   302ee:	438a      	bics	r2, r1
   302f0:	1c11      	adds	r1, r2, #0
   302f2:	1c02      	adds	r2, r0, #0
   302f4:	430a      	orrs	r2, r1
   302f6:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   302f8:	687b      	ldr	r3, [r7, #4]
   302fa:	223c      	movs	r2, #60	; 0x3c
   302fc:	5c9b      	ldrb	r3, [r3, r2]
   302fe:	1c1a      	adds	r2, r3, #0
   30300:	2301      	movs	r3, #1
   30302:	4013      	ands	r3, r2
   30304:	b2da      	uxtb	r2, r3
   30306:	2314      	movs	r3, #20
   30308:	18fb      	adds	r3, r7, r3
   3030a:	2101      	movs	r1, #1
   3030c:	400a      	ands	r2, r1
   3030e:	0150      	lsls	r0, r2, #5
   30310:	781a      	ldrb	r2, [r3, #0]
   30312:	2120      	movs	r1, #32
   30314:	438a      	bics	r2, r1
   30316:	1c11      	adds	r1, r2, #0
   30318:	1c02      	adds	r2, r0, #0
   3031a:	430a      	orrs	r2, r1
   3031c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   3031e:	687b      	ldr	r3, [r7, #4]
   30320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30322:	2b00      	cmp	r3, #0
   30324:	d103      	bne.n	3032e <MQTTSerialize_connect+0x17e>
   30326:	687b      	ldr	r3, [r7, #4]
   30328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3032a:	2b00      	cmp	r3, #0
   3032c:	d006      	beq.n	3033c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   3032e:	2314      	movs	r3, #20
   30330:	18fb      	adds	r3, r7, r3
   30332:	781a      	ldrb	r2, [r3, #0]
   30334:	2180      	movs	r1, #128	; 0x80
   30336:	4249      	negs	r1, r1
   30338:	430a      	orrs	r2, r1
   3033a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   3033c:	687b      	ldr	r3, [r7, #4]
   3033e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30340:	2b00      	cmp	r3, #0
   30342:	d103      	bne.n	3034c <MQTTSerialize_connect+0x19c>
   30344:	687b      	ldr	r3, [r7, #4]
   30346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30348:	2b00      	cmp	r3, #0
   3034a:	d005      	beq.n	30358 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   3034c:	2314      	movs	r3, #20
   3034e:	18fb      	adds	r3, r7, r3
   30350:	781a      	ldrb	r2, [r3, #0]
   30352:	2140      	movs	r1, #64	; 0x40
   30354:	430a      	orrs	r2, r1
   30356:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30358:	2314      	movs	r3, #20
   3035a:	18fb      	adds	r3, r7, r3
   3035c:	781a      	ldrb	r2, [r3, #0]
   3035e:	231c      	movs	r3, #28
   30360:	18fb      	adds	r3, r7, r3
   30362:	0011      	movs	r1, r2
   30364:	0018      	movs	r0, r3
   30366:	4b2a      	ldr	r3, [pc, #168]	; (30410 <MQTTSerialize_connect+0x260>)
   30368:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   3036a:	687b      	ldr	r3, [r7, #4]
   3036c:	8b1b      	ldrh	r3, [r3, #24]
   3036e:	001a      	movs	r2, r3
   30370:	231c      	movs	r3, #28
   30372:	18fb      	adds	r3, r7, r3
   30374:	0011      	movs	r1, r2
   30376:	0018      	movs	r0, r3
   30378:	4b2a      	ldr	r3, [pc, #168]	; (30424 <MQTTSerialize_connect+0x274>)
   3037a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   3037c:	687b      	ldr	r3, [r7, #4]
   3037e:	221c      	movs	r2, #28
   30380:	18b8      	adds	r0, r7, r2
   30382:	68d9      	ldr	r1, [r3, #12]
   30384:	691a      	ldr	r2, [r3, #16]
   30386:	695b      	ldr	r3, [r3, #20]
   30388:	4c27      	ldr	r4, [pc, #156]	; (30428 <MQTTSerialize_connect+0x278>)
   3038a:	47a0      	blx	r4
	if (options->willFlag)
   3038c:	687b      	ldr	r3, [r7, #4]
   3038e:	7edb      	ldrb	r3, [r3, #27]
   30390:	2b00      	cmp	r3, #0
   30392:	d00f      	beq.n	303b4 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30394:	687b      	ldr	r3, [r7, #4]
   30396:	221c      	movs	r2, #28
   30398:	18b8      	adds	r0, r7, r2
   3039a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   3039c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3039e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   303a0:	4c21      	ldr	r4, [pc, #132]	; (30428 <MQTTSerialize_connect+0x278>)
   303a2:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   303a4:	687b      	ldr	r3, [r7, #4]
   303a6:	221c      	movs	r2, #28
   303a8:	18b8      	adds	r0, r7, r2
   303aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   303ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   303ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   303b0:	4c1d      	ldr	r4, [pc, #116]	; (30428 <MQTTSerialize_connect+0x278>)
   303b2:	47a0      	blx	r4
	}
	if (flags.bits.username)
   303b4:	2314      	movs	r3, #20
   303b6:	18fb      	adds	r3, r7, r3
   303b8:	781b      	ldrb	r3, [r3, #0]
   303ba:	227f      	movs	r2, #127	; 0x7f
   303bc:	4393      	bics	r3, r2
   303be:	b2db      	uxtb	r3, r3
   303c0:	2b00      	cmp	r3, #0
   303c2:	d007      	beq.n	303d4 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   303c4:	687b      	ldr	r3, [r7, #4]
   303c6:	221c      	movs	r2, #28
   303c8:	18b8      	adds	r0, r7, r2
   303ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
   303cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   303ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   303d0:	4c15      	ldr	r4, [pc, #84]	; (30428 <MQTTSerialize_connect+0x278>)
   303d2:	47a0      	blx	r4
	if (flags.bits.password)
   303d4:	2314      	movs	r3, #20
   303d6:	18fb      	adds	r3, r7, r3
   303d8:	781b      	ldrb	r3, [r3, #0]
   303da:	2240      	movs	r2, #64	; 0x40
   303dc:	4013      	ands	r3, r2
   303de:	b2db      	uxtb	r3, r3
   303e0:	2b00      	cmp	r3, #0
   303e2:	d007      	beq.n	303f4 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   303e4:	687b      	ldr	r3, [r7, #4]
   303e6:	221c      	movs	r2, #28
   303e8:	18b8      	adds	r0, r7, r2
   303ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   303ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   303ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   303f0:	4c0d      	ldr	r4, [pc, #52]	; (30428 <MQTTSerialize_connect+0x278>)
   303f2:	47a0      	blx	r4

	rc = ptr - buf;
   303f4:	69fb      	ldr	r3, [r7, #28]
   303f6:	001a      	movs	r2, r3
   303f8:	68fb      	ldr	r3, [r7, #12]
   303fa:	1ad3      	subs	r3, r2, r3
   303fc:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   303fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30400:	0018      	movs	r0, r3
   30402:	46bd      	mov	sp, r7
   30404:	b00b      	add	sp, #44	; 0x2c
   30406:	bd90      	pop	{r4, r7, pc}
   30408:	000300e9 	.word	0x000300e9
   3040c:	0003087d 	.word	0x0003087d
   30410:	0003099f 	.word	0x0003099f
   30414:	00030785 	.word	0x00030785
   30418:	0003c340 	.word	0x0003c340
   3041c:	00030a21 	.word	0x00030a21
   30420:	0003c348 	.word	0x0003c348
   30424:	000309c9 	.word	0x000309c9
   30428:	00030a71 	.word	0x00030a71

0003042c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   3042c:	b580      	push	{r7, lr}
   3042e:	b08a      	sub	sp, #40	; 0x28
   30430:	af00      	add	r7, sp, #0
   30432:	60f8      	str	r0, [r7, #12]
   30434:	60b9      	str	r1, [r7, #8]
   30436:	607a      	str	r2, [r7, #4]
   30438:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3043a:	2300      	movs	r3, #0
   3043c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3043e:	687b      	ldr	r3, [r7, #4]
   30440:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30442:	2300      	movs	r3, #0
   30444:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30446:	2300      	movs	r3, #0
   30448:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   3044a:	2300      	movs	r3, #0
   3044c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3044e:	2318      	movs	r3, #24
   30450:	18fb      	adds	r3, r7, r3
   30452:	0018      	movs	r0, r3
   30454:	4b25      	ldr	r3, [pc, #148]	; (304ec <MQTTDeserialize_connack+0xc0>)
   30456:	4798      	blx	r3
   30458:	0003      	movs	r3, r0
   3045a:	001a      	movs	r2, r3
   3045c:	231c      	movs	r3, #28
   3045e:	18fb      	adds	r3, r7, r3
   30460:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30462:	231c      	movs	r3, #28
   30464:	18fb      	adds	r3, r7, r3
   30466:	781b      	ldrb	r3, [r3, #0]
   30468:	220f      	movs	r2, #15
   3046a:	4393      	bics	r3, r2
   3046c:	b2db      	uxtb	r3, r3
   3046e:	2b20      	cmp	r3, #32
   30470:	d134      	bne.n	304dc <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30472:	69bb      	ldr	r3, [r7, #24]
   30474:	2214      	movs	r2, #20
   30476:	18ba      	adds	r2, r7, r2
   30478:	0011      	movs	r1, r2
   3047a:	0018      	movs	r0, r3
   3047c:	4b1c      	ldr	r3, [pc, #112]	; (304f0 <MQTTDeserialize_connack+0xc4>)
   3047e:	4798      	blx	r3
   30480:	0003      	movs	r3, r0
   30482:	627b      	str	r3, [r7, #36]	; 0x24
   30484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30486:	69bb      	ldr	r3, [r7, #24]
   30488:	189b      	adds	r3, r3, r2
   3048a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3048c:	69bb      	ldr	r3, [r7, #24]
   3048e:	697a      	ldr	r2, [r7, #20]
   30490:	189b      	adds	r3, r3, r2
   30492:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30494:	6a3b      	ldr	r3, [r7, #32]
   30496:	69ba      	ldr	r2, [r7, #24]
   30498:	1a9b      	subs	r3, r3, r2
   3049a:	2b01      	cmp	r3, #1
   3049c:	dd20      	ble.n	304e0 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3049e:	2318      	movs	r3, #24
   304a0:	18fb      	adds	r3, r7, r3
   304a2:	0018      	movs	r0, r3
   304a4:	4b11      	ldr	r3, [pc, #68]	; (304ec <MQTTDeserialize_connack+0xc0>)
   304a6:	4798      	blx	r3
   304a8:	0003      	movs	r3, r0
   304aa:	001a      	movs	r2, r3
   304ac:	2310      	movs	r3, #16
   304ae:	18fb      	adds	r3, r7, r3
   304b0:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   304b2:	2310      	movs	r3, #16
   304b4:	18fb      	adds	r3, r7, r3
   304b6:	781b      	ldrb	r3, [r3, #0]
   304b8:	061b      	lsls	r3, r3, #24
   304ba:	0fdb      	lsrs	r3, r3, #31
   304bc:	b2db      	uxtb	r3, r3
   304be:	001a      	movs	r2, r3
   304c0:	68fb      	ldr	r3, [r7, #12]
   304c2:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   304c4:	2318      	movs	r3, #24
   304c6:	18fb      	adds	r3, r7, r3
   304c8:	0018      	movs	r0, r3
   304ca:	4b08      	ldr	r3, [pc, #32]	; (304ec <MQTTDeserialize_connack+0xc0>)
   304cc:	4798      	blx	r3
   304ce:	0003      	movs	r3, r0
   304d0:	001a      	movs	r2, r3
   304d2:	68bb      	ldr	r3, [r7, #8]
   304d4:	701a      	strb	r2, [r3, #0]

	rc = 1;
   304d6:	2301      	movs	r3, #1
   304d8:	627b      	str	r3, [r7, #36]	; 0x24
   304da:	e002      	b.n	304e2 <MQTTDeserialize_connack+0xb6>
		goto exit;
   304dc:	46c0      	nop			; (mov r8, r8)
   304de:	e000      	b.n	304e2 <MQTTDeserialize_connack+0xb6>
		goto exit;
   304e0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   304e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   304e4:	0018      	movs	r0, r3
   304e6:	46bd      	mov	sp, r7
   304e8:	b00a      	add	sp, #40	; 0x28
   304ea:	bd80      	pop	{r7, pc}
   304ec:	00030973 	.word	0x00030973
   304f0:	0003090d 	.word	0x0003090d

000304f4 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   304f4:	b580      	push	{r7, lr}
   304f6:	b088      	sub	sp, #32
   304f8:	af00      	add	r7, sp, #0
   304fa:	60f8      	str	r0, [r7, #12]
   304fc:	60b9      	str	r1, [r7, #8]
   304fe:	1dfb      	adds	r3, r7, #7
   30500:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30502:	2300      	movs	r3, #0
   30504:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30506:	2301      	movs	r3, #1
   30508:	425b      	negs	r3, r3
   3050a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3050c:	68fb      	ldr	r3, [r7, #12]
   3050e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30510:	68bb      	ldr	r3, [r7, #8]
   30512:	2b01      	cmp	r3, #1
   30514:	dc03      	bgt.n	3051e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30516:	2302      	movs	r3, #2
   30518:	425b      	negs	r3, r3
   3051a:	61fb      	str	r3, [r7, #28]
		goto exit;
   3051c:	e029      	b.n	30572 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   3051e:	2318      	movs	r3, #24
   30520:	18fb      	adds	r3, r7, r3
   30522:	2200      	movs	r2, #0
   30524:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30526:	1dfb      	adds	r3, r7, #7
   30528:	781b      	ldrb	r3, [r3, #0]
   3052a:	220f      	movs	r2, #15
   3052c:	4013      	ands	r3, r2
   3052e:	b2da      	uxtb	r2, r3
   30530:	2318      	movs	r3, #24
   30532:	18fb      	adds	r3, r7, r3
   30534:	0110      	lsls	r0, r2, #4
   30536:	781a      	ldrb	r2, [r3, #0]
   30538:	210f      	movs	r1, #15
   3053a:	400a      	ands	r2, r1
   3053c:	1c11      	adds	r1, r2, #0
   3053e:	1c02      	adds	r2, r0, #0
   30540:	430a      	orrs	r2, r1
   30542:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30544:	2318      	movs	r3, #24
   30546:	18fb      	adds	r3, r7, r3
   30548:	781a      	ldrb	r2, [r3, #0]
   3054a:	2314      	movs	r3, #20
   3054c:	18fb      	adds	r3, r7, r3
   3054e:	0011      	movs	r1, r2
   30550:	0018      	movs	r0, r3
   30552:	4b0a      	ldr	r3, [pc, #40]	; (3057c <MQTTSerialize_zero+0x88>)
   30554:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30556:	697b      	ldr	r3, [r7, #20]
   30558:	2100      	movs	r1, #0
   3055a:	0018      	movs	r0, r3
   3055c:	4b08      	ldr	r3, [pc, #32]	; (30580 <MQTTSerialize_zero+0x8c>)
   3055e:	4798      	blx	r3
   30560:	0002      	movs	r2, r0
   30562:	697b      	ldr	r3, [r7, #20]
   30564:	189b      	adds	r3, r3, r2
   30566:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30568:	697b      	ldr	r3, [r7, #20]
   3056a:	001a      	movs	r2, r3
   3056c:	68fb      	ldr	r3, [r7, #12]
   3056e:	1ad3      	subs	r3, r2, r3
   30570:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30572:	69fb      	ldr	r3, [r7, #28]
}
   30574:	0018      	movs	r0, r3
   30576:	46bd      	mov	sp, r7
   30578:	b008      	add	sp, #32
   3057a:	bd80      	pop	{r7, pc}
   3057c:	0003099f 	.word	0x0003099f
   30580:	00030785 	.word	0x00030785

00030584 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30584:	b580      	push	{r7, lr}
   30586:	b082      	sub	sp, #8
   30588:	af00      	add	r7, sp, #0
   3058a:	6078      	str	r0, [r7, #4]
   3058c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   3058e:	6839      	ldr	r1, [r7, #0]
   30590:	687b      	ldr	r3, [r7, #4]
   30592:	220e      	movs	r2, #14
   30594:	0018      	movs	r0, r3
   30596:	4b03      	ldr	r3, [pc, #12]	; (305a4 <MQTTSerialize_disconnect+0x20>)
   30598:	4798      	blx	r3
   3059a:	0003      	movs	r3, r0
}
   3059c:	0018      	movs	r0, r3
   3059e:	46bd      	mov	sp, r7
   305a0:	b002      	add	sp, #8
   305a2:	bd80      	pop	{r7, pc}
   305a4:	000304f5 	.word	0x000304f5

000305a8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   305a8:	b580      	push	{r7, lr}
   305aa:	b082      	sub	sp, #8
   305ac:	af00      	add	r7, sp, #0
   305ae:	6078      	str	r0, [r7, #4]
   305b0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   305b2:	6839      	ldr	r1, [r7, #0]
   305b4:	687b      	ldr	r3, [r7, #4]
   305b6:	220c      	movs	r2, #12
   305b8:	0018      	movs	r0, r3
   305ba:	4b03      	ldr	r3, [pc, #12]	; (305c8 <MQTTSerialize_pingreq+0x20>)
   305bc:	4798      	blx	r3
   305be:	0003      	movs	r3, r0
}
   305c0:	0018      	movs	r0, r3
   305c2:	46bd      	mov	sp, r7
   305c4:	b002      	add	sp, #8
   305c6:	bd80      	pop	{r7, pc}
   305c8:	000304f5 	.word	0x000304f5

000305cc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   305cc:	b580      	push	{r7, lr}
   305ce:	b08a      	sub	sp, #40	; 0x28
   305d0:	af00      	add	r7, sp, #0
   305d2:	60f8      	str	r0, [r7, #12]
   305d4:	60b9      	str	r1, [r7, #8]
   305d6:	607a      	str	r2, [r7, #4]
   305d8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   305da:	2300      	movs	r3, #0
   305dc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   305de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   305e0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   305e2:	2300      	movs	r3, #0
   305e4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   305e6:	2300      	movs	r3, #0
   305e8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   305ea:	2300      	movs	r3, #0
   305ec:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   305ee:	2318      	movs	r3, #24
   305f0:	18fb      	adds	r3, r7, r3
   305f2:	0018      	movs	r0, r3
   305f4:	4b32      	ldr	r3, [pc, #200]	; (306c0 <MQTTDeserialize_publish+0xf4>)
   305f6:	4798      	blx	r3
   305f8:	0003      	movs	r3, r0
   305fa:	001a      	movs	r2, r3
   305fc:	231c      	movs	r3, #28
   305fe:	18fb      	adds	r3, r7, r3
   30600:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30602:	231c      	movs	r3, #28
   30604:	18fb      	adds	r3, r7, r3
   30606:	781b      	ldrb	r3, [r3, #0]
   30608:	220f      	movs	r2, #15
   3060a:	4393      	bics	r3, r2
   3060c:	b2db      	uxtb	r3, r3
   3060e:	2b30      	cmp	r3, #48	; 0x30
   30610:	d150      	bne.n	306b4 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30612:	231c      	movs	r3, #28
   30614:	18fb      	adds	r3, r7, r3
   30616:	781b      	ldrb	r3, [r3, #0]
   30618:	071b      	lsls	r3, r3, #28
   3061a:	0fdb      	lsrs	r3, r3, #31
   3061c:	b2db      	uxtb	r3, r3
   3061e:	001a      	movs	r2, r3
   30620:	68fb      	ldr	r3, [r7, #12]
   30622:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30624:	231c      	movs	r3, #28
   30626:	18fb      	adds	r3, r7, r3
   30628:	781b      	ldrb	r3, [r3, #0]
   3062a:	075b      	lsls	r3, r3, #29
   3062c:	0f9b      	lsrs	r3, r3, #30
   3062e:	b2db      	uxtb	r3, r3
   30630:	001a      	movs	r2, r3
   30632:	68bb      	ldr	r3, [r7, #8]
   30634:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30636:	231c      	movs	r3, #28
   30638:	18fb      	adds	r3, r7, r3
   3063a:	781b      	ldrb	r3, [r3, #0]
   3063c:	07db      	lsls	r3, r3, #31
   3063e:	0fdb      	lsrs	r3, r3, #31
   30640:	b2db      	uxtb	r3, r3
   30642:	001a      	movs	r2, r3
   30644:	687b      	ldr	r3, [r7, #4]
   30646:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30648:	69bb      	ldr	r3, [r7, #24]
   3064a:	2214      	movs	r2, #20
   3064c:	18ba      	adds	r2, r7, r2
   3064e:	0011      	movs	r1, r2
   30650:	0018      	movs	r0, r3
   30652:	4b1c      	ldr	r3, [pc, #112]	; (306c4 <MQTTDeserialize_publish+0xf8>)
   30654:	4798      	blx	r3
   30656:	0003      	movs	r3, r0
   30658:	627b      	str	r3, [r7, #36]	; 0x24
   3065a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3065c:	69bb      	ldr	r3, [r7, #24]
   3065e:	189b      	adds	r3, r3, r2
   30660:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30662:	69bb      	ldr	r3, [r7, #24]
   30664:	697a      	ldr	r2, [r7, #20]
   30666:	189b      	adds	r3, r3, r2
   30668:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   3066a:	6a3a      	ldr	r2, [r7, #32]
   3066c:	2318      	movs	r3, #24
   3066e:	18f9      	adds	r1, r7, r3
   30670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30672:	0018      	movs	r0, r3
   30674:	4b14      	ldr	r3, [pc, #80]	; (306c8 <MQTTDeserialize_publish+0xfc>)
   30676:	4798      	blx	r3
   30678:	1e03      	subs	r3, r0, #0
   3067a:	d01c      	beq.n	306b6 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   3067c:	6a3b      	ldr	r3, [r7, #32]
   3067e:	69ba      	ldr	r2, [r7, #24]
   30680:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30682:	d418      	bmi.n	306b6 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30684:	68bb      	ldr	r3, [r7, #8]
   30686:	681b      	ldr	r3, [r3, #0]
   30688:	2b00      	cmp	r3, #0
   3068a:	dd08      	ble.n	3069e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   3068c:	2318      	movs	r3, #24
   3068e:	18fb      	adds	r3, r7, r3
   30690:	0018      	movs	r0, r3
   30692:	4b0e      	ldr	r3, [pc, #56]	; (306cc <MQTTDeserialize_publish+0x100>)
   30694:	4798      	blx	r3
   30696:	0003      	movs	r3, r0
   30698:	b29a      	uxth	r2, r3
   3069a:	683b      	ldr	r3, [r7, #0]
   3069c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   3069e:	6a3b      	ldr	r3, [r7, #32]
   306a0:	69ba      	ldr	r2, [r7, #24]
   306a2:	1a9a      	subs	r2, r3, r2
   306a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   306a6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   306a8:	69ba      	ldr	r2, [r7, #24]
   306aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   306ac:	601a      	str	r2, [r3, #0]
	rc = 1;
   306ae:	2301      	movs	r3, #1
   306b0:	627b      	str	r3, [r7, #36]	; 0x24
   306b2:	e000      	b.n	306b6 <MQTTDeserialize_publish+0xea>
		goto exit;
   306b4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   306b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   306b8:	0018      	movs	r0, r3
   306ba:	46bd      	mov	sp, r7
   306bc:	b00a      	add	sp, #40	; 0x28
   306be:	bd80      	pop	{r7, pc}
   306c0:	00030973 	.word	0x00030973
   306c4:	0003090d 	.word	0x0003090d
   306c8:	00030af1 	.word	0x00030af1
   306cc:	00030941 	.word	0x00030941

000306d0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   306d0:	b580      	push	{r7, lr}
   306d2:	b08a      	sub	sp, #40	; 0x28
   306d4:	af00      	add	r7, sp, #0
   306d6:	60f8      	str	r0, [r7, #12]
   306d8:	60b9      	str	r1, [r7, #8]
   306da:	607a      	str	r2, [r7, #4]
   306dc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   306de:	2300      	movs	r3, #0
   306e0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   306e2:	683b      	ldr	r3, [r7, #0]
   306e4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   306e6:	2300      	movs	r3, #0
   306e8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   306ea:	2300      	movs	r3, #0
   306ec:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   306ee:	2318      	movs	r3, #24
   306f0:	18fb      	adds	r3, r7, r3
   306f2:	0018      	movs	r0, r3
   306f4:	4b20      	ldr	r3, [pc, #128]	; (30778 <MQTTDeserialize_ack+0xa8>)
   306f6:	4798      	blx	r3
   306f8:	0003      	movs	r3, r0
   306fa:	001a      	movs	r2, r3
   306fc:	231c      	movs	r3, #28
   306fe:	18fb      	adds	r3, r7, r3
   30700:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30702:	231c      	movs	r3, #28
   30704:	18fb      	adds	r3, r7, r3
   30706:	781b      	ldrb	r3, [r3, #0]
   30708:	071b      	lsls	r3, r3, #28
   3070a:	0fdb      	lsrs	r3, r3, #31
   3070c:	b2db      	uxtb	r3, r3
   3070e:	001a      	movs	r2, r3
   30710:	68bb      	ldr	r3, [r7, #8]
   30712:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30714:	231c      	movs	r3, #28
   30716:	18fb      	adds	r3, r7, r3
   30718:	781b      	ldrb	r3, [r3, #0]
   3071a:	061b      	lsls	r3, r3, #24
   3071c:	0f1b      	lsrs	r3, r3, #28
   3071e:	b2db      	uxtb	r3, r3
   30720:	001a      	movs	r2, r3
   30722:	68fb      	ldr	r3, [r7, #12]
   30724:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30726:	69bb      	ldr	r3, [r7, #24]
   30728:	2214      	movs	r2, #20
   3072a:	18ba      	adds	r2, r7, r2
   3072c:	0011      	movs	r1, r2
   3072e:	0018      	movs	r0, r3
   30730:	4b12      	ldr	r3, [pc, #72]	; (3077c <MQTTDeserialize_ack+0xac>)
   30732:	4798      	blx	r3
   30734:	0003      	movs	r3, r0
   30736:	627b      	str	r3, [r7, #36]	; 0x24
   30738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3073a:	69bb      	ldr	r3, [r7, #24]
   3073c:	189b      	adds	r3, r3, r2
   3073e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30740:	69bb      	ldr	r3, [r7, #24]
   30742:	697a      	ldr	r2, [r7, #20]
   30744:	189b      	adds	r3, r3, r2
   30746:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30748:	6a3b      	ldr	r3, [r7, #32]
   3074a:	69ba      	ldr	r2, [r7, #24]
   3074c:	1a9b      	subs	r3, r3, r2
   3074e:	2b01      	cmp	r3, #1
   30750:	dd0b      	ble.n	3076a <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30752:	2318      	movs	r3, #24
   30754:	18fb      	adds	r3, r7, r3
   30756:	0018      	movs	r0, r3
   30758:	4b09      	ldr	r3, [pc, #36]	; (30780 <MQTTDeserialize_ack+0xb0>)
   3075a:	4798      	blx	r3
   3075c:	0003      	movs	r3, r0
   3075e:	b29a      	uxth	r2, r3
   30760:	687b      	ldr	r3, [r7, #4]
   30762:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30764:	2301      	movs	r3, #1
   30766:	627b      	str	r3, [r7, #36]	; 0x24
   30768:	e000      	b.n	3076c <MQTTDeserialize_ack+0x9c>
		goto exit;
   3076a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3076e:	0018      	movs	r0, r3
   30770:	46bd      	mov	sp, r7
   30772:	b00a      	add	sp, #40	; 0x28
   30774:	bd80      	pop	{r7, pc}
   30776:	46c0      	nop			; (mov r8, r8)
   30778:	00030973 	.word	0x00030973
   3077c:	0003090d 	.word	0x0003090d
   30780:	00030941 	.word	0x00030941

00030784 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30784:	b580      	push	{r7, lr}
   30786:	b084      	sub	sp, #16
   30788:	af00      	add	r7, sp, #0
   3078a:	6078      	str	r0, [r7, #4]
   3078c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   3078e:	2300      	movs	r3, #0
   30790:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30792:	683b      	ldr	r3, [r7, #0]
   30794:	4a17      	ldr	r2, [pc, #92]	; (307f4 <MQTTPacket_encode+0x70>)
   30796:	4013      	ands	r3, r2
   30798:	d504      	bpl.n	307a4 <MQTTPacket_encode+0x20>
   3079a:	3b01      	subs	r3, #1
   3079c:	2280      	movs	r2, #128	; 0x80
   3079e:	4252      	negs	r2, r2
   307a0:	4313      	orrs	r3, r2
   307a2:	3301      	adds	r3, #1
   307a4:	001a      	movs	r2, r3
   307a6:	230b      	movs	r3, #11
   307a8:	18fb      	adds	r3, r7, r3
   307aa:	701a      	strb	r2, [r3, #0]
		length /= 128;
   307ac:	683b      	ldr	r3, [r7, #0]
   307ae:	2b00      	cmp	r3, #0
   307b0:	da00      	bge.n	307b4 <MQTTPacket_encode+0x30>
   307b2:	337f      	adds	r3, #127	; 0x7f
   307b4:	11db      	asrs	r3, r3, #7
   307b6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   307b8:	683b      	ldr	r3, [r7, #0]
   307ba:	2b00      	cmp	r3, #0
   307bc:	dd08      	ble.n	307d0 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   307be:	230b      	movs	r3, #11
   307c0:	18fb      	adds	r3, r7, r3
   307c2:	220b      	movs	r2, #11
   307c4:	18ba      	adds	r2, r7, r2
   307c6:	7812      	ldrb	r2, [r2, #0]
   307c8:	2180      	movs	r1, #128	; 0x80
   307ca:	4249      	negs	r1, r1
   307cc:	430a      	orrs	r2, r1
   307ce:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   307d0:	68fb      	ldr	r3, [r7, #12]
   307d2:	1c5a      	adds	r2, r3, #1
   307d4:	60fa      	str	r2, [r7, #12]
   307d6:	001a      	movs	r2, r3
   307d8:	687b      	ldr	r3, [r7, #4]
   307da:	189b      	adds	r3, r3, r2
   307dc:	220b      	movs	r2, #11
   307de:	18ba      	adds	r2, r7, r2
   307e0:	7812      	ldrb	r2, [r2, #0]
   307e2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   307e4:	683b      	ldr	r3, [r7, #0]
   307e6:	2b00      	cmp	r3, #0
   307e8:	dcd3      	bgt.n	30792 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   307ea:	68fb      	ldr	r3, [r7, #12]
}
   307ec:	0018      	movs	r0, r3
   307ee:	46bd      	mov	sp, r7
   307f0:	b004      	add	sp, #16
   307f2:	bd80      	pop	{r7, pc}
   307f4:	8000007f 	.word	0x8000007f

000307f8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   307f8:	b580      	push	{r7, lr}
   307fa:	b086      	sub	sp, #24
   307fc:	af00      	add	r7, sp, #0
   307fe:	6078      	str	r0, [r7, #4]
   30800:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30802:	2301      	movs	r3, #1
   30804:	617b      	str	r3, [r7, #20]
	int len = 0;
   30806:	2300      	movs	r3, #0
   30808:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   3080a:	683b      	ldr	r3, [r7, #0]
   3080c:	2200      	movs	r2, #0
   3080e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30810:	2301      	movs	r3, #1
   30812:	425b      	negs	r3, r3
   30814:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30816:	693b      	ldr	r3, [r7, #16]
   30818:	3301      	adds	r3, #1
   3081a:	613b      	str	r3, [r7, #16]
   3081c:	693b      	ldr	r3, [r7, #16]
   3081e:	2b04      	cmp	r3, #4
   30820:	dd03      	ble.n	3082a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30822:	2301      	movs	r3, #1
   30824:	425b      	negs	r3, r3
   30826:	60fb      	str	r3, [r7, #12]
			goto exit;
   30828:	e022      	b.n	30870 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   3082a:	230b      	movs	r3, #11
   3082c:	18fa      	adds	r2, r7, r3
   3082e:	687b      	ldr	r3, [r7, #4]
   30830:	2101      	movs	r1, #1
   30832:	0010      	movs	r0, r2
   30834:	4798      	blx	r3
   30836:	0003      	movs	r3, r0
   30838:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   3083a:	68fb      	ldr	r3, [r7, #12]
   3083c:	2b01      	cmp	r3, #1
   3083e:	d116      	bne.n	3086e <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30840:	683b      	ldr	r3, [r7, #0]
   30842:	681a      	ldr	r2, [r3, #0]
   30844:	230b      	movs	r3, #11
   30846:	18fb      	adds	r3, r7, r3
   30848:	781b      	ldrb	r3, [r3, #0]
   3084a:	0019      	movs	r1, r3
   3084c:	237f      	movs	r3, #127	; 0x7f
   3084e:	400b      	ands	r3, r1
   30850:	6979      	ldr	r1, [r7, #20]
   30852:	434b      	muls	r3, r1
   30854:	18d2      	adds	r2, r2, r3
   30856:	683b      	ldr	r3, [r7, #0]
   30858:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3085a:	697b      	ldr	r3, [r7, #20]
   3085c:	01db      	lsls	r3, r3, #7
   3085e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30860:	230b      	movs	r3, #11
   30862:	18fb      	adds	r3, r7, r3
   30864:	781b      	ldrb	r3, [r3, #0]
   30866:	b25b      	sxtb	r3, r3
   30868:	2b00      	cmp	r3, #0
   3086a:	dbd1      	blt.n	30810 <MQTTPacket_decode+0x18>
   3086c:	e000      	b.n	30870 <MQTTPacket_decode+0x78>
			goto exit;
   3086e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30870:	693b      	ldr	r3, [r7, #16]
}
   30872:	0018      	movs	r0, r3
   30874:	46bd      	mov	sp, r7
   30876:	b006      	add	sp, #24
   30878:	bd80      	pop	{r7, pc}
	...

0003087c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   3087c:	b580      	push	{r7, lr}
   3087e:	b082      	sub	sp, #8
   30880:	af00      	add	r7, sp, #0
   30882:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30884:	687b      	ldr	r3, [r7, #4]
   30886:	3301      	adds	r3, #1
   30888:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3088a:	687b      	ldr	r3, [r7, #4]
   3088c:	2b7f      	cmp	r3, #127	; 0x7f
   3088e:	dc03      	bgt.n	30898 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30890:	687b      	ldr	r3, [r7, #4]
   30892:	3301      	adds	r3, #1
   30894:	607b      	str	r3, [r7, #4]
   30896:	e012      	b.n	308be <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30898:	687b      	ldr	r3, [r7, #4]
   3089a:	4a0b      	ldr	r2, [pc, #44]	; (308c8 <MQTTPacket_len+0x4c>)
   3089c:	4293      	cmp	r3, r2
   3089e:	dc03      	bgt.n	308a8 <MQTTPacket_len+0x2c>
		rem_len += 2;
   308a0:	687b      	ldr	r3, [r7, #4]
   308a2:	3302      	adds	r3, #2
   308a4:	607b      	str	r3, [r7, #4]
   308a6:	e00a      	b.n	308be <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   308a8:	687b      	ldr	r3, [r7, #4]
   308aa:	4a08      	ldr	r2, [pc, #32]	; (308cc <MQTTPacket_len+0x50>)
   308ac:	4293      	cmp	r3, r2
   308ae:	dc03      	bgt.n	308b8 <MQTTPacket_len+0x3c>
		rem_len += 3;
   308b0:	687b      	ldr	r3, [r7, #4]
   308b2:	3303      	adds	r3, #3
   308b4:	607b      	str	r3, [r7, #4]
   308b6:	e002      	b.n	308be <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   308b8:	687b      	ldr	r3, [r7, #4]
   308ba:	3304      	adds	r3, #4
   308bc:	607b      	str	r3, [r7, #4]
	return rem_len;
   308be:	687b      	ldr	r3, [r7, #4]
}
   308c0:	0018      	movs	r0, r3
   308c2:	46bd      	mov	sp, r7
   308c4:	b002      	add	sp, #8
   308c6:	bd80      	pop	{r7, pc}
   308c8:	00003fff 	.word	0x00003fff
   308cc:	001ffffe 	.word	0x001ffffe

000308d0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   308d0:	b580      	push	{r7, lr}
   308d2:	b084      	sub	sp, #16
   308d4:	af00      	add	r7, sp, #0
   308d6:	6078      	str	r0, [r7, #4]
   308d8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   308da:	2300      	movs	r3, #0
   308dc:	60fb      	str	r3, [r7, #12]
   308de:	e00a      	b.n	308f6 <bufchar+0x26>
		*c = *bufptr++;
   308e0:	4b09      	ldr	r3, [pc, #36]	; (30908 <bufchar+0x38>)
   308e2:	681b      	ldr	r3, [r3, #0]
   308e4:	1c59      	adds	r1, r3, #1
   308e6:	4a08      	ldr	r2, [pc, #32]	; (30908 <bufchar+0x38>)
   308e8:	6011      	str	r1, [r2, #0]
   308ea:	781a      	ldrb	r2, [r3, #0]
   308ec:	687b      	ldr	r3, [r7, #4]
   308ee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   308f0:	68fb      	ldr	r3, [r7, #12]
   308f2:	3301      	adds	r3, #1
   308f4:	60fb      	str	r3, [r7, #12]
   308f6:	68fa      	ldr	r2, [r7, #12]
   308f8:	683b      	ldr	r3, [r7, #0]
   308fa:	429a      	cmp	r2, r3
   308fc:	dbf0      	blt.n	308e0 <bufchar+0x10>
	return count;
   308fe:	683b      	ldr	r3, [r7, #0]
}
   30900:	0018      	movs	r0, r3
   30902:	46bd      	mov	sp, r7
   30904:	b004      	add	sp, #16
   30906:	bd80      	pop	{r7, pc}
   30908:	20004700 	.word	0x20004700

0003090c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   3090c:	b580      	push	{r7, lr}
   3090e:	b082      	sub	sp, #8
   30910:	af00      	add	r7, sp, #0
   30912:	6078      	str	r0, [r7, #4]
   30914:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30916:	4b07      	ldr	r3, [pc, #28]	; (30934 <MQTTPacket_decodeBuf+0x28>)
   30918:	687a      	ldr	r2, [r7, #4]
   3091a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   3091c:	683a      	ldr	r2, [r7, #0]
   3091e:	4b06      	ldr	r3, [pc, #24]	; (30938 <MQTTPacket_decodeBuf+0x2c>)
   30920:	0011      	movs	r1, r2
   30922:	0018      	movs	r0, r3
   30924:	4b05      	ldr	r3, [pc, #20]	; (3093c <MQTTPacket_decodeBuf+0x30>)
   30926:	4798      	blx	r3
   30928:	0003      	movs	r3, r0
}
   3092a:	0018      	movs	r0, r3
   3092c:	46bd      	mov	sp, r7
   3092e:	b002      	add	sp, #8
   30930:	bd80      	pop	{r7, pc}
   30932:	46c0      	nop			; (mov r8, r8)
   30934:	20004700 	.word	0x20004700
   30938:	000308d1 	.word	0x000308d1
   3093c:	000307f9 	.word	0x000307f9

00030940 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30940:	b580      	push	{r7, lr}
   30942:	b084      	sub	sp, #16
   30944:	af00      	add	r7, sp, #0
   30946:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30948:	687b      	ldr	r3, [r7, #4]
   3094a:	681b      	ldr	r3, [r3, #0]
   3094c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   3094e:	68fb      	ldr	r3, [r7, #12]
   30950:	781b      	ldrb	r3, [r3, #0]
   30952:	021b      	lsls	r3, r3, #8
   30954:	68fa      	ldr	r2, [r7, #12]
   30956:	3201      	adds	r2, #1
   30958:	7812      	ldrb	r2, [r2, #0]
   3095a:	189b      	adds	r3, r3, r2
   3095c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3095e:	687b      	ldr	r3, [r7, #4]
   30960:	681b      	ldr	r3, [r3, #0]
   30962:	1c9a      	adds	r2, r3, #2
   30964:	687b      	ldr	r3, [r7, #4]
   30966:	601a      	str	r2, [r3, #0]
	return len;
   30968:	68bb      	ldr	r3, [r7, #8]
}
   3096a:	0018      	movs	r0, r3
   3096c:	46bd      	mov	sp, r7
   3096e:	b004      	add	sp, #16
   30970:	bd80      	pop	{r7, pc}

00030972 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30972:	b580      	push	{r7, lr}
   30974:	b084      	sub	sp, #16
   30976:	af00      	add	r7, sp, #0
   30978:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3097a:	687b      	ldr	r3, [r7, #4]
   3097c:	681a      	ldr	r2, [r3, #0]
   3097e:	230f      	movs	r3, #15
   30980:	18fb      	adds	r3, r7, r3
   30982:	7812      	ldrb	r2, [r2, #0]
   30984:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30986:	687b      	ldr	r3, [r7, #4]
   30988:	681b      	ldr	r3, [r3, #0]
   3098a:	1c5a      	adds	r2, r3, #1
   3098c:	687b      	ldr	r3, [r7, #4]
   3098e:	601a      	str	r2, [r3, #0]
	return c;
   30990:	230f      	movs	r3, #15
   30992:	18fb      	adds	r3, r7, r3
   30994:	781b      	ldrb	r3, [r3, #0]
}
   30996:	0018      	movs	r0, r3
   30998:	46bd      	mov	sp, r7
   3099a:	b004      	add	sp, #16
   3099c:	bd80      	pop	{r7, pc}

0003099e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   3099e:	b580      	push	{r7, lr}
   309a0:	b082      	sub	sp, #8
   309a2:	af00      	add	r7, sp, #0
   309a4:	6078      	str	r0, [r7, #4]
   309a6:	000a      	movs	r2, r1
   309a8:	1cfb      	adds	r3, r7, #3
   309aa:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   309ac:	687b      	ldr	r3, [r7, #4]
   309ae:	681b      	ldr	r3, [r3, #0]
   309b0:	1cfa      	adds	r2, r7, #3
   309b2:	7812      	ldrb	r2, [r2, #0]
   309b4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   309b6:	687b      	ldr	r3, [r7, #4]
   309b8:	681b      	ldr	r3, [r3, #0]
   309ba:	1c5a      	adds	r2, r3, #1
   309bc:	687b      	ldr	r3, [r7, #4]
   309be:	601a      	str	r2, [r3, #0]
}
   309c0:	46c0      	nop			; (mov r8, r8)
   309c2:	46bd      	mov	sp, r7
   309c4:	b002      	add	sp, #8
   309c6:	bd80      	pop	{r7, pc}

000309c8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   309c8:	b580      	push	{r7, lr}
   309ca:	b082      	sub	sp, #8
   309cc:	af00      	add	r7, sp, #0
   309ce:	6078      	str	r0, [r7, #4]
   309d0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   309d2:	687b      	ldr	r3, [r7, #4]
   309d4:	681a      	ldr	r2, [r3, #0]
   309d6:	683b      	ldr	r3, [r7, #0]
   309d8:	2b00      	cmp	r3, #0
   309da:	da00      	bge.n	309de <writeInt+0x16>
   309dc:	33ff      	adds	r3, #255	; 0xff
   309de:	121b      	asrs	r3, r3, #8
   309e0:	b2db      	uxtb	r3, r3
   309e2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   309e4:	687b      	ldr	r3, [r7, #4]
   309e6:	681b      	ldr	r3, [r3, #0]
   309e8:	1c5a      	adds	r2, r3, #1
   309ea:	687b      	ldr	r3, [r7, #4]
   309ec:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   309ee:	687b      	ldr	r3, [r7, #4]
   309f0:	681a      	ldr	r2, [r3, #0]
   309f2:	683b      	ldr	r3, [r7, #0]
   309f4:	4908      	ldr	r1, [pc, #32]	; (30a18 <writeInt+0x50>)
   309f6:	400b      	ands	r3, r1
   309f8:	d503      	bpl.n	30a02 <writeInt+0x3a>
   309fa:	3b01      	subs	r3, #1
   309fc:	4907      	ldr	r1, [pc, #28]	; (30a1c <writeInt+0x54>)
   309fe:	430b      	orrs	r3, r1
   30a00:	3301      	adds	r3, #1
   30a02:	b2db      	uxtb	r3, r3
   30a04:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30a06:	687b      	ldr	r3, [r7, #4]
   30a08:	681b      	ldr	r3, [r3, #0]
   30a0a:	1c5a      	adds	r2, r3, #1
   30a0c:	687b      	ldr	r3, [r7, #4]
   30a0e:	601a      	str	r2, [r3, #0]
}
   30a10:	46c0      	nop			; (mov r8, r8)
   30a12:	46bd      	mov	sp, r7
   30a14:	b002      	add	sp, #8
   30a16:	bd80      	pop	{r7, pc}
   30a18:	800000ff 	.word	0x800000ff
   30a1c:	ffffff00 	.word	0xffffff00

00030a20 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30a20:	b580      	push	{r7, lr}
   30a22:	b084      	sub	sp, #16
   30a24:	af00      	add	r7, sp, #0
   30a26:	6078      	str	r0, [r7, #4]
   30a28:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   30a2a:	683b      	ldr	r3, [r7, #0]
   30a2c:	0018      	movs	r0, r3
   30a2e:	4b0d      	ldr	r3, [pc, #52]	; (30a64 <writeCString+0x44>)
   30a30:	4798      	blx	r3
   30a32:	0003      	movs	r3, r0
   30a34:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30a36:	68fa      	ldr	r2, [r7, #12]
   30a38:	687b      	ldr	r3, [r7, #4]
   30a3a:	0011      	movs	r1, r2
   30a3c:	0018      	movs	r0, r3
   30a3e:	4b0a      	ldr	r3, [pc, #40]	; (30a68 <writeCString+0x48>)
   30a40:	4798      	blx	r3
	memcpy(*pptr, string, len);
   30a42:	687b      	ldr	r3, [r7, #4]
   30a44:	681b      	ldr	r3, [r3, #0]
   30a46:	68fa      	ldr	r2, [r7, #12]
   30a48:	6839      	ldr	r1, [r7, #0]
   30a4a:	0018      	movs	r0, r3
   30a4c:	4b07      	ldr	r3, [pc, #28]	; (30a6c <writeCString+0x4c>)
   30a4e:	4798      	blx	r3
	*pptr += len;
   30a50:	687b      	ldr	r3, [r7, #4]
   30a52:	681a      	ldr	r2, [r3, #0]
   30a54:	68fb      	ldr	r3, [r7, #12]
   30a56:	18d2      	adds	r2, r2, r3
   30a58:	687b      	ldr	r3, [r7, #4]
   30a5a:	601a      	str	r2, [r3, #0]
}
   30a5c:	46c0      	nop			; (mov r8, r8)
   30a5e:	46bd      	mov	sp, r7
   30a60:	b004      	add	sp, #16
   30a62:	bd80      	pop	{r7, pc}
   30a64:	0003572f 	.word	0x0003572f
   30a68:	000309c9 	.word	0x000309c9
   30a6c:	00035341 	.word	0x00035341

00030a70 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30a70:	b580      	push	{r7, lr}
   30a72:	b084      	sub	sp, #16
   30a74:	af00      	add	r7, sp, #0
   30a76:	60f8      	str	r0, [r7, #12]
   30a78:	0038      	movs	r0, r7
   30a7a:	6001      	str	r1, [r0, #0]
   30a7c:	6042      	str	r2, [r0, #4]
   30a7e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30a80:	003b      	movs	r3, r7
   30a82:	685b      	ldr	r3, [r3, #4]
   30a84:	2b00      	cmp	r3, #0
   30a86:	dd17      	ble.n	30ab8 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30a88:	003b      	movs	r3, r7
   30a8a:	685a      	ldr	r2, [r3, #4]
   30a8c:	68fb      	ldr	r3, [r7, #12]
   30a8e:	0011      	movs	r1, r2
   30a90:	0018      	movs	r0, r3
   30a92:	4b14      	ldr	r3, [pc, #80]	; (30ae4 <writeMQTTString+0x74>)
   30a94:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   30a96:	68fb      	ldr	r3, [r7, #12]
   30a98:	6818      	ldr	r0, [r3, #0]
   30a9a:	003b      	movs	r3, r7
   30a9c:	6899      	ldr	r1, [r3, #8]
   30a9e:	003b      	movs	r3, r7
   30aa0:	685b      	ldr	r3, [r3, #4]
   30aa2:	001a      	movs	r2, r3
   30aa4:	4b10      	ldr	r3, [pc, #64]	; (30ae8 <writeMQTTString+0x78>)
   30aa6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   30aa8:	68fb      	ldr	r3, [r7, #12]
   30aaa:	681a      	ldr	r2, [r3, #0]
   30aac:	003b      	movs	r3, r7
   30aae:	685b      	ldr	r3, [r3, #4]
   30ab0:	18d2      	adds	r2, r2, r3
   30ab2:	68fb      	ldr	r3, [r7, #12]
   30ab4:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   30ab6:	e010      	b.n	30ada <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   30ab8:	003b      	movs	r3, r7
   30aba:	681b      	ldr	r3, [r3, #0]
   30abc:	2b00      	cmp	r3, #0
   30abe:	d007      	beq.n	30ad0 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   30ac0:	003b      	movs	r3, r7
   30ac2:	681a      	ldr	r2, [r3, #0]
   30ac4:	68fb      	ldr	r3, [r7, #12]
   30ac6:	0011      	movs	r1, r2
   30ac8:	0018      	movs	r0, r3
   30aca:	4b08      	ldr	r3, [pc, #32]	; (30aec <writeMQTTString+0x7c>)
   30acc:	4798      	blx	r3
}
   30ace:	e004      	b.n	30ada <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   30ad0:	68fb      	ldr	r3, [r7, #12]
   30ad2:	2100      	movs	r1, #0
   30ad4:	0018      	movs	r0, r3
   30ad6:	4b03      	ldr	r3, [pc, #12]	; (30ae4 <writeMQTTString+0x74>)
   30ad8:	4798      	blx	r3
}
   30ada:	46c0      	nop			; (mov r8, r8)
   30adc:	46bd      	mov	sp, r7
   30ade:	b004      	add	sp, #16
   30ae0:	bd80      	pop	{r7, pc}
   30ae2:	46c0      	nop			; (mov r8, r8)
   30ae4:	000309c9 	.word	0x000309c9
   30ae8:	00035341 	.word	0x00035341
   30aec:	00030a21 	.word	0x00030a21

00030af0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   30af0:	b580      	push	{r7, lr}
   30af2:	b086      	sub	sp, #24
   30af4:	af00      	add	r7, sp, #0
   30af6:	60f8      	str	r0, [r7, #12]
   30af8:	60b9      	str	r1, [r7, #8]
   30afa:	607a      	str	r2, [r7, #4]
	int rc = 0;
   30afc:	2300      	movs	r3, #0
   30afe:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   30b00:	687a      	ldr	r2, [r7, #4]
   30b02:	68bb      	ldr	r3, [r7, #8]
   30b04:	681b      	ldr	r3, [r3, #0]
   30b06:	1ad3      	subs	r3, r2, r3
   30b08:	2b01      	cmp	r3, #1
   30b0a:	dd1b      	ble.n	30b44 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   30b0c:	68bb      	ldr	r3, [r7, #8]
   30b0e:	0018      	movs	r0, r3
   30b10:	4b10      	ldr	r3, [pc, #64]	; (30b54 <readMQTTLenString+0x64>)
   30b12:	4798      	blx	r3
   30b14:	0002      	movs	r2, r0
   30b16:	68fb      	ldr	r3, [r7, #12]
   30b18:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   30b1a:	68bb      	ldr	r3, [r7, #8]
   30b1c:	681a      	ldr	r2, [r3, #0]
   30b1e:	68fb      	ldr	r3, [r7, #12]
   30b20:	685b      	ldr	r3, [r3, #4]
   30b22:	18d2      	adds	r2, r2, r3
   30b24:	687b      	ldr	r3, [r7, #4]
   30b26:	429a      	cmp	r2, r3
   30b28:	d80c      	bhi.n	30b44 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   30b2a:	68bb      	ldr	r3, [r7, #8]
   30b2c:	681a      	ldr	r2, [r3, #0]
   30b2e:	68fb      	ldr	r3, [r7, #12]
   30b30:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   30b32:	68bb      	ldr	r3, [r7, #8]
   30b34:	681a      	ldr	r2, [r3, #0]
   30b36:	68fb      	ldr	r3, [r7, #12]
   30b38:	685b      	ldr	r3, [r3, #4]
   30b3a:	18d2      	adds	r2, r2, r3
   30b3c:	68bb      	ldr	r3, [r7, #8]
   30b3e:	601a      	str	r2, [r3, #0]
			rc = 1;
   30b40:	2301      	movs	r3, #1
   30b42:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   30b44:	68fb      	ldr	r3, [r7, #12]
   30b46:	2200      	movs	r2, #0
   30b48:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   30b4a:	697b      	ldr	r3, [r7, #20]
}
   30b4c:	0018      	movs	r0, r3
   30b4e:	46bd      	mov	sp, r7
   30b50:	b006      	add	sp, #24
   30b52:	bd80      	pop	{r7, pc}
   30b54:	00030941 	.word	0x00030941

00030b58 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   30b58:	b580      	push	{r7, lr}
   30b5a:	b086      	sub	sp, #24
   30b5c:	af00      	add	r7, sp, #0
   30b5e:	1d3b      	adds	r3, r7, #4
   30b60:	6018      	str	r0, [r3, #0]
   30b62:	6059      	str	r1, [r3, #4]
   30b64:	609a      	str	r2, [r3, #8]
	int rc = 0;
   30b66:	2300      	movs	r3, #0
   30b68:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   30b6a:	1d3b      	adds	r3, r7, #4
   30b6c:	681b      	ldr	r3, [r3, #0]
   30b6e:	2b00      	cmp	r3, #0
   30b70:	d007      	beq.n	30b82 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   30b72:	1d3b      	adds	r3, r7, #4
   30b74:	681b      	ldr	r3, [r3, #0]
   30b76:	0018      	movs	r0, r3
   30b78:	4b06      	ldr	r3, [pc, #24]	; (30b94 <MQTTstrlen+0x3c>)
   30b7a:	4798      	blx	r3
   30b7c:	0003      	movs	r3, r0
   30b7e:	617b      	str	r3, [r7, #20]
   30b80:	e002      	b.n	30b88 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   30b82:	1d3b      	adds	r3, r7, #4
   30b84:	685b      	ldr	r3, [r3, #4]
   30b86:	617b      	str	r3, [r7, #20]
	return rc;
   30b88:	697b      	ldr	r3, [r7, #20]
}
   30b8a:	0018      	movs	r0, r3
   30b8c:	46bd      	mov	sp, r7
   30b8e:	b006      	add	sp, #24
   30b90:	bd80      	pop	{r7, pc}
   30b92:	46c0      	nop			; (mov r8, r8)
   30b94:	0003572f 	.word	0x0003572f

00030b98 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   30b98:	b580      	push	{r7, lr}
   30b9a:	b086      	sub	sp, #24
   30b9c:	af00      	add	r7, sp, #0
   30b9e:	6078      	str	r0, [r7, #4]
   30ba0:	6039      	str	r1, [r7, #0]
	int alen = 0,
   30ba2:	2300      	movs	r3, #0
   30ba4:	617b      	str	r3, [r7, #20]
		blen = 0;
   30ba6:	2300      	movs	r3, #0
   30ba8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   30baa:	687b      	ldr	r3, [r7, #4]
   30bac:	681b      	ldr	r3, [r3, #0]
   30bae:	2b00      	cmp	r3, #0
   30bb0:	d00a      	beq.n	30bc8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   30bb2:	687b      	ldr	r3, [r7, #4]
   30bb4:	681b      	ldr	r3, [r3, #0]
   30bb6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   30bb8:	687b      	ldr	r3, [r7, #4]
   30bba:	681b      	ldr	r3, [r3, #0]
   30bbc:	0018      	movs	r0, r3
   30bbe:	4b12      	ldr	r3, [pc, #72]	; (30c08 <MQTTPacket_equals+0x70>)
   30bc0:	4798      	blx	r3
   30bc2:	0003      	movs	r3, r0
   30bc4:	617b      	str	r3, [r7, #20]
   30bc6:	e005      	b.n	30bd4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   30bc8:	687b      	ldr	r3, [r7, #4]
   30bca:	689b      	ldr	r3, [r3, #8]
   30bcc:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   30bce:	687b      	ldr	r3, [r7, #4]
   30bd0:	685b      	ldr	r3, [r3, #4]
   30bd2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   30bd4:	683b      	ldr	r3, [r7, #0]
   30bd6:	0018      	movs	r0, r3
   30bd8:	4b0b      	ldr	r3, [pc, #44]	; (30c08 <MQTTPacket_equals+0x70>)
   30bda:	4798      	blx	r3
   30bdc:	0003      	movs	r3, r0
   30bde:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   30be0:	697a      	ldr	r2, [r7, #20]
   30be2:	68fb      	ldr	r3, [r7, #12]
   30be4:	429a      	cmp	r2, r3
   30be6:	d109      	bne.n	30bfc <MQTTPacket_equals+0x64>
   30be8:	697a      	ldr	r2, [r7, #20]
   30bea:	6839      	ldr	r1, [r7, #0]
   30bec:	693b      	ldr	r3, [r7, #16]
   30bee:	0018      	movs	r0, r3
   30bf0:	4b06      	ldr	r3, [pc, #24]	; (30c0c <MQTTPacket_equals+0x74>)
   30bf2:	4798      	blx	r3
   30bf4:	1e03      	subs	r3, r0, #0
   30bf6:	d101      	bne.n	30bfc <MQTTPacket_equals+0x64>
   30bf8:	2301      	movs	r3, #1
   30bfa:	e000      	b.n	30bfe <MQTTPacket_equals+0x66>
   30bfc:	2300      	movs	r3, #0
}
   30bfe:	0018      	movs	r0, r3
   30c00:	46bd      	mov	sp, r7
   30c02:	b006      	add	sp, #24
   30c04:	bd80      	pop	{r7, pc}
   30c06:	46c0      	nop			; (mov r8, r8)
   30c08:	0003572f 	.word	0x0003572f
   30c0c:	0003573d 	.word	0x0003573d

00030c10 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30c10:	b580      	push	{r7, lr}
   30c12:	b086      	sub	sp, #24
   30c14:	af00      	add	r7, sp, #0
   30c16:	60f8      	str	r0, [r7, #12]
   30c18:	0038      	movs	r0, r7
   30c1a:	6001      	str	r1, [r0, #0]
   30c1c:	6042      	str	r2, [r0, #4]
   30c1e:	6083      	str	r3, [r0, #8]
	int len = 0;
   30c20:	2300      	movs	r3, #0
   30c22:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   30c24:	003b      	movs	r3, r7
   30c26:	6818      	ldr	r0, [r3, #0]
   30c28:	6859      	ldr	r1, [r3, #4]
   30c2a:	689a      	ldr	r2, [r3, #8]
   30c2c:	4b09      	ldr	r3, [pc, #36]	; (30c54 <MQTTSerialize_publishLength+0x44>)
   30c2e:	4798      	blx	r3
   30c30:	0003      	movs	r3, r0
   30c32:	1c9a      	adds	r2, r3, #2
   30c34:	6a3b      	ldr	r3, [r7, #32]
   30c36:	18d3      	adds	r3, r2, r3
   30c38:	697a      	ldr	r2, [r7, #20]
   30c3a:	18d3      	adds	r3, r2, r3
   30c3c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   30c3e:	68fb      	ldr	r3, [r7, #12]
   30c40:	2b00      	cmp	r3, #0
   30c42:	dd02      	ble.n	30c4a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   30c44:	697b      	ldr	r3, [r7, #20]
   30c46:	3302      	adds	r3, #2
   30c48:	617b      	str	r3, [r7, #20]
	return len;
   30c4a:	697b      	ldr	r3, [r7, #20]
}
   30c4c:	0018      	movs	r0, r3
   30c4e:	46bd      	mov	sp, r7
   30c50:	b006      	add	sp, #24
   30c52:	bd80      	pop	{r7, pc}
   30c54:	00030b59 	.word	0x00030b59

00030c58 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   30c58:	b590      	push	{r4, r7, lr}
   30c5a:	b08b      	sub	sp, #44	; 0x2c
   30c5c:	af02      	add	r7, sp, #8
   30c5e:	60f8      	str	r0, [r7, #12]
   30c60:	60b9      	str	r1, [r7, #8]
   30c62:	603b      	str	r3, [r7, #0]
   30c64:	1dfb      	adds	r3, r7, #7
   30c66:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   30c68:	68fb      	ldr	r3, [r7, #12]
   30c6a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   30c6c:	2300      	movs	r3, #0
   30c6e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30c70:	2300      	movs	r3, #0
   30c72:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30c74:	2300      	movs	r3, #0
   30c76:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   30c78:	2308      	movs	r3, #8
   30c7a:	2230      	movs	r2, #48	; 0x30
   30c7c:	4694      	mov	ip, r2
   30c7e:	44bc      	add	ip, r7
   30c80:	4463      	add	r3, ip
   30c82:	6838      	ldr	r0, [r7, #0]
   30c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30c86:	9200      	str	r2, [sp, #0]
   30c88:	6819      	ldr	r1, [r3, #0]
   30c8a:	685a      	ldr	r2, [r3, #4]
   30c8c:	689b      	ldr	r3, [r3, #8]
   30c8e:	4c46      	ldr	r4, [pc, #280]	; (30da8 <MQTTSerialize_publish+0x150>)
   30c90:	47a0      	blx	r4
   30c92:	0003      	movs	r3, r0
   30c94:	61bb      	str	r3, [r7, #24]
   30c96:	69bb      	ldr	r3, [r7, #24]
   30c98:	0018      	movs	r0, r3
   30c9a:	4b44      	ldr	r3, [pc, #272]	; (30dac <MQTTSerialize_publish+0x154>)
   30c9c:	4798      	blx	r3
   30c9e:	0002      	movs	r2, r0
   30ca0:	68bb      	ldr	r3, [r7, #8]
   30ca2:	429a      	cmp	r2, r3
   30ca4:	dd03      	ble.n	30cae <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30ca6:	2302      	movs	r3, #2
   30ca8:	425b      	negs	r3, r3
   30caa:	61fb      	str	r3, [r7, #28]
		goto exit;
   30cac:	e077      	b.n	30d9e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   30cae:	2310      	movs	r3, #16
   30cb0:	18fb      	adds	r3, r7, r3
   30cb2:	781a      	ldrb	r2, [r3, #0]
   30cb4:	210f      	movs	r1, #15
   30cb6:	400a      	ands	r2, r1
   30cb8:	1c11      	adds	r1, r2, #0
   30cba:	2230      	movs	r2, #48	; 0x30
   30cbc:	430a      	orrs	r2, r1
   30cbe:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30cc0:	1dfb      	adds	r3, r7, #7
   30cc2:	781b      	ldrb	r3, [r3, #0]
   30cc4:	2201      	movs	r2, #1
   30cc6:	4013      	ands	r3, r2
   30cc8:	b2da      	uxtb	r2, r3
   30cca:	2310      	movs	r3, #16
   30ccc:	18fb      	adds	r3, r7, r3
   30cce:	2101      	movs	r1, #1
   30cd0:	400a      	ands	r2, r1
   30cd2:	00d0      	lsls	r0, r2, #3
   30cd4:	781a      	ldrb	r2, [r3, #0]
   30cd6:	2108      	movs	r1, #8
   30cd8:	438a      	bics	r2, r1
   30cda:	1c11      	adds	r1, r2, #0
   30cdc:	1c02      	adds	r2, r0, #0
   30cde:	430a      	orrs	r2, r1
   30ce0:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   30ce2:	683b      	ldr	r3, [r7, #0]
   30ce4:	b2db      	uxtb	r3, r3
   30ce6:	1c1a      	adds	r2, r3, #0
   30ce8:	2303      	movs	r3, #3
   30cea:	4013      	ands	r3, r2
   30cec:	b2da      	uxtb	r2, r3
   30cee:	2310      	movs	r3, #16
   30cf0:	18fb      	adds	r3, r7, r3
   30cf2:	2103      	movs	r1, #3
   30cf4:	400a      	ands	r2, r1
   30cf6:	1890      	adds	r0, r2, r2
   30cf8:	781a      	ldrb	r2, [r3, #0]
   30cfa:	2106      	movs	r1, #6
   30cfc:	438a      	bics	r2, r1
   30cfe:	1c11      	adds	r1, r2, #0
   30d00:	1c02      	adds	r2, r0, #0
   30d02:	430a      	orrs	r2, r1
   30d04:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   30d06:	2330      	movs	r3, #48	; 0x30
   30d08:	18fb      	adds	r3, r7, r3
   30d0a:	781b      	ldrb	r3, [r3, #0]
   30d0c:	2201      	movs	r2, #1
   30d0e:	4013      	ands	r3, r2
   30d10:	b2da      	uxtb	r2, r3
   30d12:	2310      	movs	r3, #16
   30d14:	18fb      	adds	r3, r7, r3
   30d16:	2101      	movs	r1, #1
   30d18:	400a      	ands	r2, r1
   30d1a:	0010      	movs	r0, r2
   30d1c:	781a      	ldrb	r2, [r3, #0]
   30d1e:	2101      	movs	r1, #1
   30d20:	438a      	bics	r2, r1
   30d22:	1c11      	adds	r1, r2, #0
   30d24:	1c02      	adds	r2, r0, #0
   30d26:	430a      	orrs	r2, r1
   30d28:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30d2a:	2310      	movs	r3, #16
   30d2c:	18fb      	adds	r3, r7, r3
   30d2e:	781a      	ldrb	r2, [r3, #0]
   30d30:	2314      	movs	r3, #20
   30d32:	18fb      	adds	r3, r7, r3
   30d34:	0011      	movs	r1, r2
   30d36:	0018      	movs	r0, r3
   30d38:	4b1d      	ldr	r3, [pc, #116]	; (30db0 <MQTTSerialize_publish+0x158>)
   30d3a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30d3c:	697b      	ldr	r3, [r7, #20]
   30d3e:	69ba      	ldr	r2, [r7, #24]
   30d40:	0011      	movs	r1, r2
   30d42:	0018      	movs	r0, r3
   30d44:	4b1b      	ldr	r3, [pc, #108]	; (30db4 <MQTTSerialize_publish+0x15c>)
   30d46:	4798      	blx	r3
   30d48:	0002      	movs	r2, r0
   30d4a:	697b      	ldr	r3, [r7, #20]
   30d4c:	189b      	adds	r3, r3, r2
   30d4e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30d50:	2308      	movs	r3, #8
   30d52:	2230      	movs	r2, #48	; 0x30
   30d54:	4694      	mov	ip, r2
   30d56:	44bc      	add	ip, r7
   30d58:	4463      	add	r3, ip
   30d5a:	2214      	movs	r2, #20
   30d5c:	18b8      	adds	r0, r7, r2
   30d5e:	6819      	ldr	r1, [r3, #0]
   30d60:	685a      	ldr	r2, [r3, #4]
   30d62:	689b      	ldr	r3, [r3, #8]
   30d64:	4c14      	ldr	r4, [pc, #80]	; (30db8 <MQTTSerialize_publish+0x160>)
   30d66:	47a0      	blx	r4

	if (qos > 0)
   30d68:	683b      	ldr	r3, [r7, #0]
   30d6a:	2b00      	cmp	r3, #0
   30d6c:	dd08      	ble.n	30d80 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30d6e:	2334      	movs	r3, #52	; 0x34
   30d70:	18fb      	adds	r3, r7, r3
   30d72:	881a      	ldrh	r2, [r3, #0]
   30d74:	2314      	movs	r3, #20
   30d76:	18fb      	adds	r3, r7, r3
   30d78:	0011      	movs	r1, r2
   30d7a:	0018      	movs	r0, r3
   30d7c:	4b0f      	ldr	r3, [pc, #60]	; (30dbc <MQTTSerialize_publish+0x164>)
   30d7e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30d80:	697b      	ldr	r3, [r7, #20]
   30d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30d84:	6c79      	ldr	r1, [r7, #68]	; 0x44
   30d86:	0018      	movs	r0, r3
   30d88:	4b0d      	ldr	r3, [pc, #52]	; (30dc0 <MQTTSerialize_publish+0x168>)
   30d8a:	4798      	blx	r3
	ptr += payloadlen;
   30d8c:	697a      	ldr	r2, [r7, #20]
   30d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30d90:	18d3      	adds	r3, r2, r3
   30d92:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   30d94:	697b      	ldr	r3, [r7, #20]
   30d96:	001a      	movs	r2, r3
   30d98:	68fb      	ldr	r3, [r7, #12]
   30d9a:	1ad3      	subs	r3, r2, r3
   30d9c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d9e:	69fb      	ldr	r3, [r7, #28]
}
   30da0:	0018      	movs	r0, r3
   30da2:	46bd      	mov	sp, r7
   30da4:	b009      	add	sp, #36	; 0x24
   30da6:	bd90      	pop	{r4, r7, pc}
   30da8:	00030c11 	.word	0x00030c11
   30dac:	0003087d 	.word	0x0003087d
   30db0:	0003099f 	.word	0x0003099f
   30db4:	00030785 	.word	0x00030785
   30db8:	00030a71 	.word	0x00030a71
   30dbc:	000309c9 	.word	0x000309c9
   30dc0:	00035341 	.word	0x00035341

00030dc4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   30dc4:	b580      	push	{r7, lr}
   30dc6:	b088      	sub	sp, #32
   30dc8:	af00      	add	r7, sp, #0
   30dca:	60f8      	str	r0, [r7, #12]
   30dcc:	60b9      	str	r1, [r7, #8]
   30dce:	0019      	movs	r1, r3
   30dd0:	1dfb      	adds	r3, r7, #7
   30dd2:	701a      	strb	r2, [r3, #0]
   30dd4:	1dbb      	adds	r3, r7, #6
   30dd6:	1c0a      	adds	r2, r1, #0
   30dd8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30dda:	2300      	movs	r3, #0
   30ddc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30dde:	2300      	movs	r3, #0
   30de0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30de2:	68fb      	ldr	r3, [r7, #12]
   30de4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   30de6:	68bb      	ldr	r3, [r7, #8]
   30de8:	2b03      	cmp	r3, #3
   30dea:	dc03      	bgt.n	30df4 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30dec:	2302      	movs	r3, #2
   30dee:	425b      	negs	r3, r3
   30df0:	61fb      	str	r3, [r7, #28]
		goto exit;
   30df2:	e055      	b.n	30ea0 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   30df4:	1dfb      	adds	r3, r7, #7
   30df6:	781b      	ldrb	r3, [r3, #0]
   30df8:	220f      	movs	r2, #15
   30dfa:	4013      	ands	r3, r2
   30dfc:	b2da      	uxtb	r2, r3
   30dfe:	2318      	movs	r3, #24
   30e00:	18fb      	adds	r3, r7, r3
   30e02:	0110      	lsls	r0, r2, #4
   30e04:	781a      	ldrb	r2, [r3, #0]
   30e06:	210f      	movs	r1, #15
   30e08:	400a      	ands	r2, r1
   30e0a:	1c11      	adds	r1, r2, #0
   30e0c:	1c02      	adds	r2, r0, #0
   30e0e:	430a      	orrs	r2, r1
   30e10:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30e12:	1dbb      	adds	r3, r7, #6
   30e14:	781b      	ldrb	r3, [r3, #0]
   30e16:	2201      	movs	r2, #1
   30e18:	4013      	ands	r3, r2
   30e1a:	b2da      	uxtb	r2, r3
   30e1c:	2318      	movs	r3, #24
   30e1e:	18fb      	adds	r3, r7, r3
   30e20:	2101      	movs	r1, #1
   30e22:	400a      	ands	r2, r1
   30e24:	00d0      	lsls	r0, r2, #3
   30e26:	781a      	ldrb	r2, [r3, #0]
   30e28:	2108      	movs	r1, #8
   30e2a:	438a      	bics	r2, r1
   30e2c:	1c11      	adds	r1, r2, #0
   30e2e:	1c02      	adds	r2, r0, #0
   30e30:	430a      	orrs	r2, r1
   30e32:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30e34:	1dfb      	adds	r3, r7, #7
   30e36:	781b      	ldrb	r3, [r3, #0]
   30e38:	3b06      	subs	r3, #6
   30e3a:	425a      	negs	r2, r3
   30e3c:	4153      	adcs	r3, r2
   30e3e:	b2db      	uxtb	r3, r3
   30e40:	1c1a      	adds	r2, r3, #0
   30e42:	2303      	movs	r3, #3
   30e44:	4013      	ands	r3, r2
   30e46:	b2da      	uxtb	r2, r3
   30e48:	2318      	movs	r3, #24
   30e4a:	18fb      	adds	r3, r7, r3
   30e4c:	2103      	movs	r1, #3
   30e4e:	400a      	ands	r2, r1
   30e50:	1890      	adds	r0, r2, r2
   30e52:	781a      	ldrb	r2, [r3, #0]
   30e54:	2106      	movs	r1, #6
   30e56:	438a      	bics	r2, r1
   30e58:	1c11      	adds	r1, r2, #0
   30e5a:	1c02      	adds	r2, r0, #0
   30e5c:	430a      	orrs	r2, r1
   30e5e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30e60:	2318      	movs	r3, #24
   30e62:	18fb      	adds	r3, r7, r3
   30e64:	781a      	ldrb	r2, [r3, #0]
   30e66:	2314      	movs	r3, #20
   30e68:	18fb      	adds	r3, r7, r3
   30e6a:	0011      	movs	r1, r2
   30e6c:	0018      	movs	r0, r3
   30e6e:	4b0f      	ldr	r3, [pc, #60]	; (30eac <MQTTSerialize_ack+0xe8>)
   30e70:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30e72:	697b      	ldr	r3, [r7, #20]
   30e74:	2102      	movs	r1, #2
   30e76:	0018      	movs	r0, r3
   30e78:	4b0d      	ldr	r3, [pc, #52]	; (30eb0 <MQTTSerialize_ack+0xec>)
   30e7a:	4798      	blx	r3
   30e7c:	0002      	movs	r2, r0
   30e7e:	697b      	ldr	r3, [r7, #20]
   30e80:	189b      	adds	r3, r3, r2
   30e82:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   30e84:	2328      	movs	r3, #40	; 0x28
   30e86:	18fb      	adds	r3, r7, r3
   30e88:	881a      	ldrh	r2, [r3, #0]
   30e8a:	2314      	movs	r3, #20
   30e8c:	18fb      	adds	r3, r7, r3
   30e8e:	0011      	movs	r1, r2
   30e90:	0018      	movs	r0, r3
   30e92:	4b08      	ldr	r3, [pc, #32]	; (30eb4 <MQTTSerialize_ack+0xf0>)
   30e94:	4798      	blx	r3
	rc = ptr - buf;
   30e96:	697b      	ldr	r3, [r7, #20]
   30e98:	001a      	movs	r2, r3
   30e9a:	68fb      	ldr	r3, [r7, #12]
   30e9c:	1ad3      	subs	r3, r2, r3
   30e9e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30ea0:	69fb      	ldr	r3, [r7, #28]
}
   30ea2:	0018      	movs	r0, r3
   30ea4:	46bd      	mov	sp, r7
   30ea6:	b008      	add	sp, #32
   30ea8:	bd80      	pop	{r7, pc}
   30eaa:	46c0      	nop			; (mov r8, r8)
   30eac:	0003099f 	.word	0x0003099f
   30eb0:	00030785 	.word	0x00030785
   30eb4:	000309c9 	.word	0x000309c9

00030eb8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30eb8:	b580      	push	{r7, lr}
   30eba:	b084      	sub	sp, #16
   30ebc:	af00      	add	r7, sp, #0
   30ebe:	6078      	str	r0, [r7, #4]
   30ec0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   30ec2:	2302      	movs	r3, #2
   30ec4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   30ec6:	2300      	movs	r3, #0
   30ec8:	60fb      	str	r3, [r7, #12]
   30eca:	e014      	b.n	30ef6 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30ecc:	68fa      	ldr	r2, [r7, #12]
   30ece:	0013      	movs	r3, r2
   30ed0:	005b      	lsls	r3, r3, #1
   30ed2:	189b      	adds	r3, r3, r2
   30ed4:	009b      	lsls	r3, r3, #2
   30ed6:	001a      	movs	r2, r3
   30ed8:	683b      	ldr	r3, [r7, #0]
   30eda:	189b      	adds	r3, r3, r2
   30edc:	6818      	ldr	r0, [r3, #0]
   30ede:	6859      	ldr	r1, [r3, #4]
   30ee0:	689a      	ldr	r2, [r3, #8]
   30ee2:	4b09      	ldr	r3, [pc, #36]	; (30f08 <MQTTSerialize_subscribeLength+0x50>)
   30ee4:	4798      	blx	r3
   30ee6:	0003      	movs	r3, r0
   30ee8:	3303      	adds	r3, #3
   30eea:	68ba      	ldr	r2, [r7, #8]
   30eec:	18d3      	adds	r3, r2, r3
   30eee:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30ef0:	68fb      	ldr	r3, [r7, #12]
   30ef2:	3301      	adds	r3, #1
   30ef4:	60fb      	str	r3, [r7, #12]
   30ef6:	68fa      	ldr	r2, [r7, #12]
   30ef8:	687b      	ldr	r3, [r7, #4]
   30efa:	429a      	cmp	r2, r3
   30efc:	dbe6      	blt.n	30ecc <MQTTSerialize_subscribeLength+0x14>
	return len;
   30efe:	68bb      	ldr	r3, [r7, #8]
}
   30f00:	0018      	movs	r0, r3
   30f02:	46bd      	mov	sp, r7
   30f04:	b004      	add	sp, #16
   30f06:	bd80      	pop	{r7, pc}
   30f08:	00030b59 	.word	0x00030b59

00030f0c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30f0c:	b590      	push	{r4, r7, lr}
   30f0e:	b08b      	sub	sp, #44	; 0x2c
   30f10:	af00      	add	r7, sp, #0
   30f12:	60f8      	str	r0, [r7, #12]
   30f14:	60b9      	str	r1, [r7, #8]
   30f16:	0019      	movs	r1, r3
   30f18:	1dfb      	adds	r3, r7, #7
   30f1a:	701a      	strb	r2, [r3, #0]
   30f1c:	1d3b      	adds	r3, r7, #4
   30f1e:	1c0a      	adds	r2, r1, #0
   30f20:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30f22:	68fb      	ldr	r3, [r7, #12]
   30f24:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   30f26:	2300      	movs	r3, #0
   30f28:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30f2a:	2300      	movs	r3, #0
   30f2c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30f2e:	2300      	movs	r3, #0
   30f30:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30f32:	2300      	movs	r3, #0
   30f34:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   30f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30f3a:	0011      	movs	r1, r2
   30f3c:	0018      	movs	r0, r3
   30f3e:	4b41      	ldr	r3, [pc, #260]	; (31044 <MQTTSerialize_subscribe+0x138>)
   30f40:	4798      	blx	r3
   30f42:	0003      	movs	r3, r0
   30f44:	61fb      	str	r3, [r7, #28]
   30f46:	69fb      	ldr	r3, [r7, #28]
   30f48:	0018      	movs	r0, r3
   30f4a:	4b3f      	ldr	r3, [pc, #252]	; (31048 <MQTTSerialize_subscribe+0x13c>)
   30f4c:	4798      	blx	r3
   30f4e:	0002      	movs	r2, r0
   30f50:	68bb      	ldr	r3, [r7, #8]
   30f52:	429a      	cmp	r2, r3
   30f54:	dd03      	ble.n	30f5e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30f56:	2302      	movs	r3, #2
   30f58:	425b      	negs	r3, r3
   30f5a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30f5c:	e06c      	b.n	31038 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30f5e:	2314      	movs	r3, #20
   30f60:	18fb      	adds	r3, r7, r3
   30f62:	2200      	movs	r2, #0
   30f64:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   30f66:	2314      	movs	r3, #20
   30f68:	18fb      	adds	r3, r7, r3
   30f6a:	781a      	ldrb	r2, [r3, #0]
   30f6c:	210f      	movs	r1, #15
   30f6e:	400a      	ands	r2, r1
   30f70:	1c11      	adds	r1, r2, #0
   30f72:	2280      	movs	r2, #128	; 0x80
   30f74:	4252      	negs	r2, r2
   30f76:	430a      	orrs	r2, r1
   30f78:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30f7a:	1dfb      	adds	r3, r7, #7
   30f7c:	781b      	ldrb	r3, [r3, #0]
   30f7e:	2201      	movs	r2, #1
   30f80:	4013      	ands	r3, r2
   30f82:	b2da      	uxtb	r2, r3
   30f84:	2314      	movs	r3, #20
   30f86:	18fb      	adds	r3, r7, r3
   30f88:	2101      	movs	r1, #1
   30f8a:	400a      	ands	r2, r1
   30f8c:	00d0      	lsls	r0, r2, #3
   30f8e:	781a      	ldrb	r2, [r3, #0]
   30f90:	2108      	movs	r1, #8
   30f92:	438a      	bics	r2, r1
   30f94:	1c11      	adds	r1, r2, #0
   30f96:	1c02      	adds	r2, r0, #0
   30f98:	430a      	orrs	r2, r1
   30f9a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30f9c:	2314      	movs	r3, #20
   30f9e:	18fb      	adds	r3, r7, r3
   30fa0:	781a      	ldrb	r2, [r3, #0]
   30fa2:	2106      	movs	r1, #6
   30fa4:	438a      	bics	r2, r1
   30fa6:	1c11      	adds	r1, r2, #0
   30fa8:	2202      	movs	r2, #2
   30faa:	430a      	orrs	r2, r1
   30fac:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30fae:	2314      	movs	r3, #20
   30fb0:	18fb      	adds	r3, r7, r3
   30fb2:	781a      	ldrb	r2, [r3, #0]
   30fb4:	2318      	movs	r3, #24
   30fb6:	18fb      	adds	r3, r7, r3
   30fb8:	0011      	movs	r1, r2
   30fba:	0018      	movs	r0, r3
   30fbc:	4b23      	ldr	r3, [pc, #140]	; (3104c <MQTTSerialize_subscribe+0x140>)
   30fbe:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30fc0:	69bb      	ldr	r3, [r7, #24]
   30fc2:	69fa      	ldr	r2, [r7, #28]
   30fc4:	0011      	movs	r1, r2
   30fc6:	0018      	movs	r0, r3
   30fc8:	4b21      	ldr	r3, [pc, #132]	; (31050 <MQTTSerialize_subscribe+0x144>)
   30fca:	4798      	blx	r3
   30fcc:	0002      	movs	r2, r0
   30fce:	69bb      	ldr	r3, [r7, #24]
   30fd0:	189b      	adds	r3, r3, r2
   30fd2:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   30fd4:	1d3b      	adds	r3, r7, #4
   30fd6:	881a      	ldrh	r2, [r3, #0]
   30fd8:	2318      	movs	r3, #24
   30fda:	18fb      	adds	r3, r7, r3
   30fdc:	0011      	movs	r1, r2
   30fde:	0018      	movs	r0, r3
   30fe0:	4b1c      	ldr	r3, [pc, #112]	; (31054 <MQTTSerialize_subscribe+0x148>)
   30fe2:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   30fe4:	2300      	movs	r3, #0
   30fe6:	623b      	str	r3, [r7, #32]
   30fe8:	e01d      	b.n	31026 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30fea:	6a3a      	ldr	r2, [r7, #32]
   30fec:	0013      	movs	r3, r2
   30fee:	005b      	lsls	r3, r3, #1
   30ff0:	189b      	adds	r3, r3, r2
   30ff2:	009b      	lsls	r3, r3, #2
   30ff4:	001a      	movs	r2, r3
   30ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30ff8:	189b      	adds	r3, r3, r2
   30ffa:	2218      	movs	r2, #24
   30ffc:	18b8      	adds	r0, r7, r2
   30ffe:	6819      	ldr	r1, [r3, #0]
   31000:	685a      	ldr	r2, [r3, #4]
   31002:	689b      	ldr	r3, [r3, #8]
   31004:	4c14      	ldr	r4, [pc, #80]	; (31058 <MQTTSerialize_subscribe+0x14c>)
   31006:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   31008:	6a3b      	ldr	r3, [r7, #32]
   3100a:	009b      	lsls	r3, r3, #2
   3100c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3100e:	18d3      	adds	r3, r2, r3
   31010:	681b      	ldr	r3, [r3, #0]
   31012:	b2da      	uxtb	r2, r3
   31014:	2318      	movs	r3, #24
   31016:	18fb      	adds	r3, r7, r3
   31018:	0011      	movs	r1, r2
   3101a:	0018      	movs	r0, r3
   3101c:	4b0b      	ldr	r3, [pc, #44]	; (3104c <MQTTSerialize_subscribe+0x140>)
   3101e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   31020:	6a3b      	ldr	r3, [r7, #32]
   31022:	3301      	adds	r3, #1
   31024:	623b      	str	r3, [r7, #32]
   31026:	6a3a      	ldr	r2, [r7, #32]
   31028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3102a:	429a      	cmp	r2, r3
   3102c:	dbdd      	blt.n	30fea <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   3102e:	69bb      	ldr	r3, [r7, #24]
   31030:	001a      	movs	r2, r3
   31032:	68fb      	ldr	r3, [r7, #12]
   31034:	1ad3      	subs	r3, r2, r3
   31036:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3103a:	0018      	movs	r0, r3
   3103c:	46bd      	mov	sp, r7
   3103e:	b00b      	add	sp, #44	; 0x2c
   31040:	bd90      	pop	{r4, r7, pc}
   31042:	46c0      	nop			; (mov r8, r8)
   31044:	00030eb9 	.word	0x00030eb9
   31048:	0003087d 	.word	0x0003087d
   3104c:	0003099f 	.word	0x0003099f
   31050:	00030785 	.word	0x00030785
   31054:	000309c9 	.word	0x000309c9
   31058:	00030a71 	.word	0x00030a71

0003105c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   3105c:	b590      	push	{r4, r7, lr}
   3105e:	b08b      	sub	sp, #44	; 0x2c
   31060:	af00      	add	r7, sp, #0
   31062:	60f8      	str	r0, [r7, #12]
   31064:	60b9      	str	r1, [r7, #8]
   31066:	607a      	str	r2, [r7, #4]
   31068:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3106a:	2300      	movs	r3, #0
   3106c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31070:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31072:	2300      	movs	r3, #0
   31074:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31076:	2300      	movs	r3, #0
   31078:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3107a:	2318      	movs	r3, #24
   3107c:	18fb      	adds	r3, r7, r3
   3107e:	0018      	movs	r0, r3
   31080:	4b2c      	ldr	r3, [pc, #176]	; (31134 <MQTTDeserialize_suback+0xd8>)
   31082:	4798      	blx	r3
   31084:	0003      	movs	r3, r0
   31086:	001a      	movs	r2, r3
   31088:	231c      	movs	r3, #28
   3108a:	18fb      	adds	r3, r7, r3
   3108c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   3108e:	231c      	movs	r3, #28
   31090:	18fb      	adds	r3, r7, r3
   31092:	781b      	ldrb	r3, [r3, #0]
   31094:	220f      	movs	r2, #15
   31096:	4393      	bics	r3, r2
   31098:	b2db      	uxtb	r3, r3
   3109a:	2b90      	cmp	r3, #144	; 0x90
   3109c:	d142      	bne.n	31124 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3109e:	69bb      	ldr	r3, [r7, #24]
   310a0:	2214      	movs	r2, #20
   310a2:	18ba      	adds	r2, r7, r2
   310a4:	0011      	movs	r1, r2
   310a6:	0018      	movs	r0, r3
   310a8:	4b23      	ldr	r3, [pc, #140]	; (31138 <MQTTDeserialize_suback+0xdc>)
   310aa:	4798      	blx	r3
   310ac:	0003      	movs	r3, r0
   310ae:	627b      	str	r3, [r7, #36]	; 0x24
   310b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   310b2:	69bb      	ldr	r3, [r7, #24]
   310b4:	189b      	adds	r3, r3, r2
   310b6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   310b8:	69bb      	ldr	r3, [r7, #24]
   310ba:	697a      	ldr	r2, [r7, #20]
   310bc:	189b      	adds	r3, r3, r2
   310be:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   310c0:	6a3b      	ldr	r3, [r7, #32]
   310c2:	69ba      	ldr	r2, [r7, #24]
   310c4:	1a9b      	subs	r3, r3, r2
   310c6:	2b01      	cmp	r3, #1
   310c8:	dd2e      	ble.n	31128 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   310ca:	2318      	movs	r3, #24
   310cc:	18fb      	adds	r3, r7, r3
   310ce:	0018      	movs	r0, r3
   310d0:	4b1a      	ldr	r3, [pc, #104]	; (3113c <MQTTDeserialize_suback+0xe0>)
   310d2:	4798      	blx	r3
   310d4:	0003      	movs	r3, r0
   310d6:	b29a      	uxth	r2, r3
   310d8:	68fb      	ldr	r3, [r7, #12]
   310da:	801a      	strh	r2, [r3, #0]

	*count = 0;
   310dc:	687b      	ldr	r3, [r7, #4]
   310de:	2200      	movs	r2, #0
   310e0:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   310e2:	e018      	b.n	31116 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   310e4:	687b      	ldr	r3, [r7, #4]
   310e6:	681a      	ldr	r2, [r3, #0]
   310e8:	68bb      	ldr	r3, [r7, #8]
   310ea:	429a      	cmp	r2, r3
   310ec:	dd03      	ble.n	310f6 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   310ee:	2301      	movs	r3, #1
   310f0:	425b      	negs	r3, r3
   310f2:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   310f4:	e019      	b.n	3112a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   310f6:	687b      	ldr	r3, [r7, #4]
   310f8:	681a      	ldr	r2, [r3, #0]
   310fa:	1c51      	adds	r1, r2, #1
   310fc:	687b      	ldr	r3, [r7, #4]
   310fe:	6019      	str	r1, [r3, #0]
   31100:	0013      	movs	r3, r2
   31102:	009b      	lsls	r3, r3, #2
   31104:	683a      	ldr	r2, [r7, #0]
   31106:	18d4      	adds	r4, r2, r3
   31108:	2318      	movs	r3, #24
   3110a:	18fb      	adds	r3, r7, r3
   3110c:	0018      	movs	r0, r3
   3110e:	4b09      	ldr	r3, [pc, #36]	; (31134 <MQTTDeserialize_suback+0xd8>)
   31110:	4798      	blx	r3
   31112:	0003      	movs	r3, r0
   31114:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   31116:	69ba      	ldr	r2, [r7, #24]
   31118:	6a3b      	ldr	r3, [r7, #32]
   3111a:	429a      	cmp	r2, r3
   3111c:	d3e2      	bcc.n	310e4 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   3111e:	2301      	movs	r3, #1
   31120:	627b      	str	r3, [r7, #36]	; 0x24
   31122:	e002      	b.n	3112a <MQTTDeserialize_suback+0xce>
		goto exit;
   31124:	46c0      	nop			; (mov r8, r8)
   31126:	e000      	b.n	3112a <MQTTDeserialize_suback+0xce>
		goto exit;
   31128:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3112c:	0018      	movs	r0, r3
   3112e:	46bd      	mov	sp, r7
   31130:	b00b      	add	sp, #44	; 0x2c
   31132:	bd90      	pop	{r4, r7, pc}
   31134:	00030973 	.word	0x00030973
   31138:	0003090d 	.word	0x0003090d
   3113c:	00030941 	.word	0x00030941

00031140 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   31140:	b580      	push	{r7, lr}
   31142:	b082      	sub	sp, #8
   31144:	af00      	add	r7, sp, #0
   31146:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31148:	687b      	ldr	r3, [r7, #4]
   3114a:	2250      	movs	r2, #80	; 0x50
   3114c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3114e:	687b      	ldr	r3, [r7, #4]
   31150:	2200      	movs	r2, #0
   31152:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   31154:	687b      	ldr	r3, [r7, #4]
   31156:	4a0b      	ldr	r2, [pc, #44]	; (31184 <http_client_get_config_defaults+0x44>)
   31158:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   3115a:	687b      	ldr	r3, [r7, #4]
   3115c:	2200      	movs	r2, #0
   3115e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   31160:	687b      	ldr	r3, [r7, #4]
   31162:	2200      	movs	r2, #0
   31164:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   31166:	687b      	ldr	r3, [r7, #4]
   31168:	2280      	movs	r2, #128	; 0x80
   3116a:	0052      	lsls	r2, r2, #1
   3116c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   3116e:	687b      	ldr	r3, [r7, #4]
   31170:	2252      	movs	r2, #82	; 0x52
   31172:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   31174:	687b      	ldr	r3, [r7, #4]
   31176:	4a04      	ldr	r2, [pc, #16]	; (31188 <http_client_get_config_defaults+0x48>)
   31178:	619a      	str	r2, [r3, #24]
}
   3117a:	46c0      	nop			; (mov r8, r8)
   3117c:	46bd      	mov	sp, r7
   3117e:	b002      	add	sp, #8
   31180:	bd80      	pop	{r7, pc}
   31182:	46c0      	nop			; (mov r8, r8)
   31184:	00004e20 	.word	0x00004e20
   31188:	0003c350 	.word	0x0003c350

0003118c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   3118c:	b590      	push	{r4, r7, lr}
   3118e:	b083      	sub	sp, #12
   31190:	af00      	add	r7, sp, #0
   31192:	6078      	str	r0, [r7, #4]
   31194:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   31196:	687b      	ldr	r3, [r7, #4]
   31198:	2b00      	cmp	r3, #0
   3119a:	d002      	beq.n	311a2 <http_client_init+0x16>
   3119c:	683b      	ldr	r3, [r7, #0]
   3119e:	2b00      	cmp	r3, #0
   311a0:	d102      	bne.n	311a8 <http_client_init+0x1c>
		return -EINVAL;
   311a2:	2316      	movs	r3, #22
   311a4:	425b      	negs	r3, r3
   311a6:	e058      	b.n	3125a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   311a8:	683b      	ldr	r3, [r7, #0]
   311aa:	691b      	ldr	r3, [r3, #16]
   311ac:	2b00      	cmp	r3, #0
   311ae:	d102      	bne.n	311b6 <http_client_init+0x2a>
		return -EINVAL;
   311b0:	2316      	movs	r3, #22
   311b2:	425b      	negs	r3, r3
   311b4:	e051      	b.n	3125a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   311b6:	683b      	ldr	r3, [r7, #0]
   311b8:	685b      	ldr	r3, [r3, #4]
   311ba:	2b00      	cmp	r3, #0
   311bc:	d102      	bne.n	311c4 <http_client_init+0x38>
		return -EINVAL;
   311be:	2316      	movs	r3, #22
   311c0:	425b      	negs	r3, r3
   311c2:	e04a      	b.n	3125a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   311c4:	683b      	ldr	r3, [r7, #0]
   311c6:	695b      	ldr	r3, [r3, #20]
   311c8:	2b51      	cmp	r3, #81	; 0x51
   311ca:	d802      	bhi.n	311d2 <http_client_init+0x46>
		return -EINVAL;
   311cc:	2316      	movs	r3, #22
   311ce:	425b      	negs	r3, r3
   311d0:	e043      	b.n	3125a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   311d2:	687b      	ldr	r3, [r7, #4]
   311d4:	22e8      	movs	r2, #232	; 0xe8
   311d6:	2100      	movs	r1, #0
   311d8:	0018      	movs	r0, r3
   311da:	4b22      	ldr	r3, [pc, #136]	; (31264 <http_client_init+0xd8>)
   311dc:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   311de:	687b      	ldr	r3, [r7, #4]
   311e0:	3350      	adds	r3, #80	; 0x50
   311e2:	6839      	ldr	r1, [r7, #0]
   311e4:	221c      	movs	r2, #28
   311e6:	0018      	movs	r0, r3
   311e8:	4b1f      	ldr	r3, [pc, #124]	; (31268 <http_client_init+0xdc>)
   311ea:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   311ec:	687b      	ldr	r3, [r7, #4]
   311ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   311f0:	2b00      	cmp	r3, #0
   311f2:	d115      	bne.n	31220 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   311f4:	683b      	ldr	r3, [r7, #0]
   311f6:	691b      	ldr	r3, [r3, #16]
   311f8:	0018      	movs	r0, r3
   311fa:	4b1c      	ldr	r3, [pc, #112]	; (3126c <http_client_init+0xe0>)
   311fc:	4798      	blx	r3
   311fe:	0003      	movs	r3, r0
   31200:	001a      	movs	r2, r3
   31202:	687b      	ldr	r3, [r7, #4]
   31204:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   31206:	687b      	ldr	r3, [r7, #4]
   31208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3120a:	2b00      	cmp	r3, #0
   3120c:	d102      	bne.n	31214 <http_client_init+0x88>
			return -ENOMEM;
   3120e:	230c      	movs	r3, #12
   31210:	425b      	negs	r3, r3
   31212:	e022      	b.n	3125a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   31214:	687b      	ldr	r3, [r7, #4]
   31216:	2241      	movs	r2, #65	; 0x41
   31218:	5c99      	ldrb	r1, [r3, r2]
   3121a:	2004      	movs	r0, #4
   3121c:	4301      	orrs	r1, r0
   3121e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   31220:	683b      	ldr	r3, [r7, #0]
   31222:	891b      	ldrh	r3, [r3, #8]
   31224:	2b00      	cmp	r3, #0
   31226:	d010      	beq.n	3124a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   31228:	683b      	ldr	r3, [r7, #0]
   3122a:	6858      	ldr	r0, [r3, #4]
   3122c:	687a      	ldr	r2, [r7, #4]
   3122e:	4910      	ldr	r1, [pc, #64]	; (31270 <http_client_init+0xe4>)
   31230:	2300      	movs	r3, #0
   31232:	4c10      	ldr	r4, [pc, #64]	; (31274 <http_client_init+0xe8>)
   31234:	47a0      	blx	r4
   31236:	0002      	movs	r2, r0
   31238:	687b      	ldr	r3, [r7, #4]
   3123a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   3123c:	687b      	ldr	r3, [r7, #4]
   3123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31240:	2b00      	cmp	r3, #0
   31242:	da02      	bge.n	3124a <http_client_init+0xbe>
			return -ENOSPC;
   31244:	231c      	movs	r3, #28
   31246:	425b      	negs	r3, r3
   31248:	e007      	b.n	3125a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   3124a:	687b      	ldr	r3, [r7, #4]
   3124c:	2200      	movs	r2, #0
   3124e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31250:	687b      	ldr	r3, [r7, #4]
   31252:	22d8      	movs	r2, #216	; 0xd8
   31254:	2100      	movs	r1, #0
   31256:	5099      	str	r1, [r3, r2]

	return 0;
   31258:	2300      	movs	r3, #0
}
   3125a:	0018      	movs	r0, r3
   3125c:	46bd      	mov	sp, r7
   3125e:	b003      	add	sp, #12
   31260:	bd90      	pop	{r4, r7, pc}
   31262:	46c0      	nop			; (mov r8, r8)
   31264:	00035377 	.word	0x00035377
   31268:	00035341 	.word	0x00035341
   3126c:	00035319 	.word	0x00035319
   31270:	0003153d 	.word	0x0003153d
   31274:	00032be1 	.word	0x00032be1

00031278 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31278:	b580      	push	{r7, lr}
   3127a:	b082      	sub	sp, #8
   3127c:	af00      	add	r7, sp, #0
   3127e:	6078      	str	r0, [r7, #4]
   31280:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   31282:	687b      	ldr	r3, [r7, #4]
   31284:	2b00      	cmp	r3, #0
   31286:	d102      	bne.n	3128e <http_client_register_callback+0x16>
		return -EINVAL;
   31288:	2316      	movs	r3, #22
   3128a:	425b      	negs	r3, r3
   3128c:	e003      	b.n	31296 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3128e:	687b      	ldr	r3, [r7, #4]
   31290:	683a      	ldr	r2, [r7, #0]
   31292:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31294:	2300      	movs	r3, #0
}
   31296:	0018      	movs	r0, r3
   31298:	46bd      	mov	sp, r7
   3129a:	b002      	add	sp, #8
   3129c:	bd80      	pop	{r7, pc}
	...

000312a0 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   312a0:	b580      	push	{r7, lr}
   312a2:	b082      	sub	sp, #8
   312a4:	af00      	add	r7, sp, #0
   312a6:	6078      	str	r0, [r7, #4]
	switch (err) {
   312a8:	687b      	ldr	r3, [r7, #4]
   312aa:	330e      	adds	r3, #14
   312ac:	2b0e      	cmp	r3, #14
   312ae:	d825      	bhi.n	312fc <_hwerr_to_stderr+0x5c>
   312b0:	009a      	lsls	r2, r3, #2
   312b2:	4b18      	ldr	r3, [pc, #96]	; (31314 <_hwerr_to_stderr+0x74>)
   312b4:	18d3      	adds	r3, r2, r3
   312b6:	681b      	ldr	r3, [r3, #0]
   312b8:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   312ba:	2305      	movs	r3, #5
   312bc:	425b      	negs	r3, r3
   312be:	e024      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   312c0:	2302      	movs	r3, #2
   312c2:	425b      	negs	r3, r3
   312c4:	e021      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   312c6:	2370      	movs	r3, #112	; 0x70
   312c8:	425b      	negs	r3, r3
   312ca:	e01e      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   312cc:	230c      	movs	r3, #12
   312ce:	425b      	negs	r3, r3
   312d0:	e01b      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   312d2:	2316      	movs	r3, #22
   312d4:	425b      	negs	r3, r3
   312d6:	e018      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   312d8:	230c      	movs	r3, #12
   312da:	425b      	negs	r3, r3
   312dc:	e015      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   312de:	2305      	movs	r3, #5
   312e0:	425b      	negs	r3, r3
   312e2:	e012      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   312e4:	2379      	movs	r3, #121	; 0x79
   312e6:	425b      	negs	r3, r3
   312e8:	e00f      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   312ea:	2368      	movs	r3, #104	; 0x68
   312ec:	425b      	negs	r3, r3
   312ee:	e00c      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   312f0:	230b      	movs	r3, #11
   312f2:	425b      	negs	r3, r3
   312f4:	e009      	b.n	3130a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   312f6:	2310      	movs	r3, #16
   312f8:	425b      	negs	r3, r3
   312fa:	e006      	b.n	3130a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   312fc:	687b      	ldr	r3, [r7, #4]
   312fe:	2b00      	cmp	r3, #0
   31300:	da02      	bge.n	31308 <_hwerr_to_stderr+0x68>
				return -EIO;
   31302:	2305      	movs	r3, #5
   31304:	425b      	negs	r3, r3
   31306:	e000      	b.n	3130a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31308:	2300      	movs	r3, #0
	}
}
   3130a:	0018      	movs	r0, r3
   3130c:	46bd      	mov	sp, r7
   3130e:	b002      	add	sp, #8
   31310:	bd80      	pop	{r7, pc}
   31312:	46c0      	nop			; (mov r8, r8)
   31314:	0003c48c 	.word	0x0003c48c

00031318 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31318:	b580      	push	{r7, lr}
   3131a:	b08a      	sub	sp, #40	; 0x28
   3131c:	af00      	add	r7, sp, #0
   3131e:	603a      	str	r2, [r7, #0]
   31320:	1dfb      	adds	r3, r7, #7
   31322:	1c02      	adds	r2, r0, #0
   31324:	701a      	strb	r2, [r3, #0]
   31326:	1dbb      	adds	r3, r7, #6
   31328:	1c0a      	adds	r2, r1, #0
   3132a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   3132c:	1dfb      	adds	r3, r7, #7
   3132e:	2200      	movs	r2, #0
   31330:	569a      	ldrsb	r2, [r3, r2]
   31332:	4b4b      	ldr	r3, [pc, #300]	; (31460 <http_client_socket_event_handler+0x148>)
   31334:	0092      	lsls	r2, r2, #2
   31336:	58d3      	ldr	r3, [r2, r3]
   31338:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   3133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3133c:	2b00      	cmp	r3, #0
   3133e:	d100      	bne.n	31342 <http_client_socket_event_handler+0x2a>
   31340:	e08a      	b.n	31458 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   31342:	1dbb      	adds	r3, r7, #6
   31344:	781b      	ldrb	r3, [r3, #0]
   31346:	2b06      	cmp	r3, #6
   31348:	d040      	beq.n	313cc <http_client_socket_event_handler+0xb4>
   3134a:	2b07      	cmp	r3, #7
   3134c:	d060      	beq.n	31410 <http_client_socket_event_handler+0xf8>
   3134e:	2b05      	cmp	r3, #5
   31350:	d000      	beq.n	31354 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   31352:	e082      	b.n	3145a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   31354:	683b      	ldr	r3, [r7, #0]
   31356:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31358:	6a3b      	ldr	r3, [r7, #32]
   3135a:	785b      	ldrb	r3, [r3, #1]
   3135c:	b25b      	sxtb	r3, r3
   3135e:	001a      	movs	r2, r3
   31360:	230c      	movs	r3, #12
   31362:	18fb      	adds	r3, r7, r3
   31364:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   31366:	6a3b      	ldr	r3, [r7, #32]
   31368:	785b      	ldrb	r3, [r3, #1]
   3136a:	b25b      	sxtb	r3, r3
   3136c:	2b00      	cmp	r3, #0
   3136e:	da0c      	bge.n	3138a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31370:	6a3b      	ldr	r3, [r7, #32]
   31372:	785b      	ldrb	r3, [r3, #1]
   31374:	b25b      	sxtb	r3, r3
   31376:	0018      	movs	r0, r3
   31378:	4b3a      	ldr	r3, [pc, #232]	; (31464 <http_client_socket_event_handler+0x14c>)
   3137a:	4798      	blx	r3
   3137c:	0002      	movs	r2, r0
   3137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31380:	0011      	movs	r1, r2
   31382:	0018      	movs	r0, r3
   31384:	4b38      	ldr	r3, [pc, #224]	; (31468 <http_client_socket_event_handler+0x150>)
   31386:	4798      	blx	r3
    	break;
   31388:	e067      	b.n	3145a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   3138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3138e:	2b00      	cmp	r3, #0
   31390:	d006      	beq.n	313a0 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31396:	220c      	movs	r2, #12
   31398:	18ba      	adds	r2, r7, r2
   3139a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   3139c:	2100      	movs	r1, #0
   3139e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   313a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313a2:	2203      	movs	r2, #3
   313a4:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   313a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   313aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313ac:	6c99      	ldr	r1, [r3, #72]	; 0x48
   313ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313b0:	2258      	movs	r2, #88	; 0x58
   313b2:	5a9b      	ldrh	r3, [r3, r2]
   313b4:	001a      	movs	r2, r3
   313b6:	4b2d      	ldr	r3, [pc, #180]	; (3146c <http_client_socket_event_handler+0x154>)
   313b8:	4798      	blx	r3
    		_http_client_recv_packet(module);
   313ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313bc:	0018      	movs	r0, r3
   313be:	4b2c      	ldr	r3, [pc, #176]	; (31470 <http_client_socket_event_handler+0x158>)
   313c0:	4798      	blx	r3
			_http_client_request(module);
   313c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313c4:	0018      	movs	r0, r3
   313c6:	4b2b      	ldr	r3, [pc, #172]	; (31474 <http_client_socket_event_handler+0x15c>)
   313c8:	4798      	blx	r3
    	break;
   313ca:	e046      	b.n	3145a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   313cc:	683b      	ldr	r3, [r7, #0]
   313ce:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   313d0:	69fb      	ldr	r3, [r7, #28]
   313d2:	2204      	movs	r2, #4
   313d4:	5e9b      	ldrsh	r3, [r3, r2]
   313d6:	2b00      	cmp	r3, #0
   313d8:	dd09      	ble.n	313ee <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   313da:	69fb      	ldr	r3, [r7, #28]
   313dc:	2204      	movs	r2, #4
   313de:	5e9b      	ldrsh	r3, [r3, r2]
   313e0:	001a      	movs	r2, r3
   313e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313e4:	0011      	movs	r1, r2
   313e6:	0018      	movs	r0, r3
   313e8:	4b23      	ldr	r3, [pc, #140]	; (31478 <http_client_socket_event_handler+0x160>)
   313ea:	4798      	blx	r3
   313ec:	e00b      	b.n	31406 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   313ee:	69fb      	ldr	r3, [r7, #28]
   313f0:	2204      	movs	r2, #4
   313f2:	5e9b      	ldrsh	r3, [r3, r2]
   313f4:	0018      	movs	r0, r3
   313f6:	4b1b      	ldr	r3, [pc, #108]	; (31464 <http_client_socket_event_handler+0x14c>)
   313f8:	4798      	blx	r3
   313fa:	0002      	movs	r2, r0
   313fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   313fe:	0011      	movs	r1, r2
   31400:	0018      	movs	r0, r3
   31402:	4b19      	ldr	r3, [pc, #100]	; (31468 <http_client_socket_event_handler+0x150>)
   31404:	4798      	blx	r3
		_http_client_recv_packet(module);
   31406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31408:	0018      	movs	r0, r3
   3140a:	4b19      	ldr	r3, [pc, #100]	; (31470 <http_client_socket_event_handler+0x158>)
   3140c:	4798      	blx	r3
		break;
   3140e:	e024      	b.n	3145a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31410:	231a      	movs	r3, #26
   31412:	18fb      	adds	r3, r7, r3
   31414:	683a      	ldr	r2, [r7, #0]
   31416:	8812      	ldrh	r2, [r2, #0]
   31418:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   3141a:	231a      	movs	r3, #26
   3141c:	18fb      	adds	r3, r7, r3
   3141e:	2200      	movs	r2, #0
   31420:	5e9b      	ldrsh	r3, [r3, r2]
   31422:	2b00      	cmp	r3, #0
   31424:	da0d      	bge.n	31442 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31426:	231a      	movs	r3, #26
   31428:	18fb      	adds	r3, r7, r3
   3142a:	2200      	movs	r2, #0
   3142c:	5e9b      	ldrsh	r3, [r3, r2]
   3142e:	0018      	movs	r0, r3
   31430:	4b0c      	ldr	r3, [pc, #48]	; (31464 <http_client_socket_event_handler+0x14c>)
   31432:	4798      	blx	r3
   31434:	0002      	movs	r2, r0
   31436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31438:	0011      	movs	r1, r2
   3143a:	0018      	movs	r0, r3
   3143c:	4b0a      	ldr	r3, [pc, #40]	; (31468 <http_client_socket_event_handler+0x150>)
   3143e:	4798      	blx	r3
   31440:	e003      	b.n	3144a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31444:	0018      	movs	r0, r3
   31446:	4b0b      	ldr	r3, [pc, #44]	; (31474 <http_client_socket_event_handler+0x15c>)
   31448:	4798      	blx	r3
		module->sending = 0;
   3144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3144c:	2241      	movs	r2, #65	; 0x41
   3144e:	5c99      	ldrb	r1, [r3, r2]
   31450:	2001      	movs	r0, #1
   31452:	4381      	bics	r1, r0
   31454:	5499      	strb	r1, [r3, r2]
    	break;
   31456:	e000      	b.n	3145a <http_client_socket_event_handler+0x142>
		return;
   31458:	46c0      	nop			; (mov r8, r8)
	}

}
   3145a:	46bd      	mov	sp, r7
   3145c:	b00a      	add	sp, #40	; 0x28
   3145e:	bd80      	pop	{r7, pc}
   31460:	20004704 	.word	0x20004704
   31464:	000312a1 	.word	0x000312a1
   31468:	00031915 	.word	0x00031915
   3146c:	00032c71 	.word	0x00032c71
   31470:	000321a1 	.word	0x000321a1
   31474:	00031a69 	.word	0x00031a69
   31478:	00032205 	.word	0x00032205

0003147c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   3147c:	b580      	push	{r7, lr}
   3147e:	b088      	sub	sp, #32
   31480:	af00      	add	r7, sp, #0
   31482:	6078      	str	r0, [r7, #4]
   31484:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31486:	2300      	movs	r3, #0
   31488:	61fb      	str	r3, [r7, #28]
   3148a:	e048      	b.n	3151e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   3148c:	4b27      	ldr	r3, [pc, #156]	; (3152c <http_client_socket_resolve_handler+0xb0>)
   3148e:	69fa      	ldr	r2, [r7, #28]
   31490:	0092      	lsls	r2, r2, #2
   31492:	58d3      	ldr	r3, [r2, r3]
   31494:	2b00      	cmp	r3, #0
   31496:	d03f      	beq.n	31518 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31498:	4b24      	ldr	r3, [pc, #144]	; (3152c <http_client_socket_resolve_handler+0xb0>)
   3149a:	69fa      	ldr	r2, [r7, #28]
   3149c:	0092      	lsls	r2, r2, #2
   3149e:	58d3      	ldr	r3, [r2, r3]
   314a0:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   314a2:	69bb      	ldr	r3, [r7, #24]
   314a4:	1c5a      	adds	r2, r3, #1
   314a6:	687b      	ldr	r3, [r7, #4]
   314a8:	0011      	movs	r1, r2
   314aa:	0018      	movs	r0, r3
   314ac:	4b20      	ldr	r3, [pc, #128]	; (31530 <http_client_socket_resolve_handler+0xb4>)
   314ae:	4798      	blx	r3
   314b0:	1e03      	subs	r3, r0, #0
   314b2:	d131      	bne.n	31518 <http_client_socket_resolve_handler+0x9c>
   314b4:	69bb      	ldr	r3, [r7, #24]
   314b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   314b8:	2b01      	cmp	r3, #1
   314ba:	d12d      	bne.n	31518 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   314bc:	683b      	ldr	r3, [r7, #0]
   314be:	2b00      	cmp	r3, #0
   314c0:	d107      	bne.n	314d2 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   314c2:	2376      	movs	r3, #118	; 0x76
   314c4:	425a      	negs	r2, r3
   314c6:	69bb      	ldr	r3, [r7, #24]
   314c8:	0011      	movs	r1, r2
   314ca:	0018      	movs	r0, r3
   314cc:	4b19      	ldr	r3, [pc, #100]	; (31534 <http_client_socket_resolve_handler+0xb8>)
   314ce:	4798      	blx	r3
					return;
   314d0:	e028      	b.n	31524 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   314d2:	2308      	movs	r3, #8
   314d4:	18fb      	adds	r3, r7, r3
   314d6:	2202      	movs	r2, #2
   314d8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   314da:	69bb      	ldr	r3, [r7, #24]
   314dc:	2250      	movs	r2, #80	; 0x50
   314de:	5a9b      	ldrh	r3, [r3, r2]
   314e0:	021b      	lsls	r3, r3, #8
   314e2:	b21a      	sxth	r2, r3
   314e4:	69bb      	ldr	r3, [r7, #24]
   314e6:	2150      	movs	r1, #80	; 0x50
   314e8:	5a5b      	ldrh	r3, [r3, r1]
   314ea:	0a1b      	lsrs	r3, r3, #8
   314ec:	b29b      	uxth	r3, r3
   314ee:	b21b      	sxth	r3, r3
   314f0:	4313      	orrs	r3, r2
   314f2:	b21b      	sxth	r3, r3
   314f4:	b29a      	uxth	r2, r3
   314f6:	2308      	movs	r3, #8
   314f8:	18fb      	adds	r3, r7, r3
   314fa:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   314fc:	2308      	movs	r3, #8
   314fe:	18fb      	adds	r3, r7, r3
   31500:	683a      	ldr	r2, [r7, #0]
   31502:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31504:	69bb      	ldr	r3, [r7, #24]
   31506:	781b      	ldrb	r3, [r3, #0]
   31508:	b25b      	sxtb	r3, r3
   3150a:	2208      	movs	r2, #8
   3150c:	18b9      	adds	r1, r7, r2
   3150e:	2210      	movs	r2, #16
   31510:	0018      	movs	r0, r3
   31512:	4b09      	ldr	r3, [pc, #36]	; (31538 <http_client_socket_resolve_handler+0xbc>)
   31514:	4798      	blx	r3
				return;
   31516:	e005      	b.n	31524 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31518:	69fb      	ldr	r3, [r7, #28]
   3151a:	3301      	adds	r3, #1
   3151c:	61fb      	str	r3, [r7, #28]
   3151e:	69fb      	ldr	r3, [r7, #28]
   31520:	2b06      	cmp	r3, #6
   31522:	ddb3      	ble.n	3148c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31524:	46bd      	mov	sp, r7
   31526:	b008      	add	sp, #32
   31528:	bd80      	pop	{r7, pc}
   3152a:	46c0      	nop			; (mov r8, r8)
   3152c:	20004704 	.word	0x20004704
   31530:	000356cf 	.word	0x000356cf
   31534:	00031915 	.word	0x00031915
   31538:	00025e39 	.word	0x00025e39

0003153c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   3153c:	b580      	push	{r7, lr}
   3153e:	b086      	sub	sp, #24
   31540:	af00      	add	r7, sp, #0
   31542:	60f8      	str	r0, [r7, #12]
   31544:	60b9      	str	r1, [r7, #8]
   31546:	607a      	str	r2, [r7, #4]
   31548:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   3154a:	687b      	ldr	r3, [r7, #4]
   3154c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   3154e:	697b      	ldr	r3, [r7, #20]
   31550:	2b00      	cmp	r3, #0
   31552:	d007      	beq.n	31564 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31554:	233e      	movs	r3, #62	; 0x3e
   31556:	425a      	negs	r2, r3
   31558:	697b      	ldr	r3, [r7, #20]
   3155a:	0011      	movs	r1, r2
   3155c:	0018      	movs	r0, r3
   3155e:	4b03      	ldr	r3, [pc, #12]	; (3156c <http_client_timer_callback+0x30>)
   31560:	4798      	blx	r3
   31562:	e000      	b.n	31566 <http_client_timer_callback+0x2a>
		return;
   31564:	46c0      	nop			; (mov r8, r8)
}
   31566:	46bd      	mov	sp, r7
   31568:	b006      	add	sp, #24
   3156a:	bd80      	pop	{r7, pc}
   3156c:	00031915 	.word	0x00031915

00031570 <_is_ip>:

static int _is_ip(const char *host)
{
   31570:	b580      	push	{r7, lr}
   31572:	b084      	sub	sp, #16
   31574:	af00      	add	r7, sp, #0
   31576:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31578:	2300      	movs	r3, #0
   3157a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   3157c:	e03a      	b.n	315f4 <_is_ip+0x84>
		ch = *host++;
   3157e:	687b      	ldr	r3, [r7, #4]
   31580:	1c5a      	adds	r2, r3, #1
   31582:	607a      	str	r2, [r7, #4]
   31584:	220b      	movs	r2, #11
   31586:	18ba      	adds	r2, r7, r2
   31588:	781b      	ldrb	r3, [r3, #0]
   3158a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   3158c:	230b      	movs	r3, #11
   3158e:	18fb      	adds	r3, r7, r3
   31590:	781b      	ldrb	r3, [r3, #0]
   31592:	2b60      	cmp	r3, #96	; 0x60
   31594:	d904      	bls.n	315a0 <_is_ip+0x30>
   31596:	230b      	movs	r3, #11
   31598:	18fb      	adds	r3, r7, r3
   3159a:	781b      	ldrb	r3, [r3, #0]
   3159c:	2b66      	cmp	r3, #102	; 0x66
   3159e:	d913      	bls.n	315c8 <_is_ip+0x58>
   315a0:	230b      	movs	r3, #11
   315a2:	18fb      	adds	r3, r7, r3
   315a4:	781b      	ldrb	r3, [r3, #0]
   315a6:	2b40      	cmp	r3, #64	; 0x40
   315a8:	d904      	bls.n	315b4 <_is_ip+0x44>
   315aa:	230b      	movs	r3, #11
   315ac:	18fb      	adds	r3, r7, r3
   315ae:	781b      	ldrb	r3, [r3, #0]
   315b0:	2b46      	cmp	r3, #70	; 0x46
   315b2:	d909      	bls.n	315c8 <_is_ip+0x58>
   315b4:	230b      	movs	r3, #11
   315b6:	18fb      	adds	r3, r7, r3
   315b8:	781b      	ldrb	r3, [r3, #0]
   315ba:	2b3a      	cmp	r3, #58	; 0x3a
   315bc:	d004      	beq.n	315c8 <_is_ip+0x58>
   315be:	230b      	movs	r3, #11
   315c0:	18fb      	adds	r3, r7, r3
   315c2:	781b      	ldrb	r3, [r3, #0]
   315c4:	2b2f      	cmp	r3, #47	; 0x2f
   315c6:	d102      	bne.n	315ce <_is_ip+0x5e>
			isv6 = 1;
   315c8:	2301      	movs	r3, #1
   315ca:	60fb      	str	r3, [r7, #12]
   315cc:	e012      	b.n	315f4 <_is_ip+0x84>
		} else if (ch == '.') {
   315ce:	230b      	movs	r3, #11
   315d0:	18fb      	adds	r3, r7, r3
   315d2:	781b      	ldrb	r3, [r3, #0]
   315d4:	2b2e      	cmp	r3, #46	; 0x2e
   315d6:	d104      	bne.n	315e2 <_is_ip+0x72>
			if (isv6) {
   315d8:	68fb      	ldr	r3, [r7, #12]
   315da:	2b00      	cmp	r3, #0
   315dc:	d00a      	beq.n	315f4 <_is_ip+0x84>
				return 0;
   315de:	2300      	movs	r3, #0
   315e0:	e00d      	b.n	315fe <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   315e2:	230b      	movs	r3, #11
   315e4:	18fb      	adds	r3, r7, r3
   315e6:	781b      	ldrb	r3, [r3, #0]
   315e8:	2230      	movs	r2, #48	; 0x30
   315ea:	4013      	ands	r3, r2
   315ec:	2b30      	cmp	r3, #48	; 0x30
   315ee:	d001      	beq.n	315f4 <_is_ip+0x84>
			return 0;
   315f0:	2300      	movs	r3, #0
   315f2:	e004      	b.n	315fe <_is_ip+0x8e>
	while (*host != '\0') {
   315f4:	687b      	ldr	r3, [r7, #4]
   315f6:	781b      	ldrb	r3, [r3, #0]
   315f8:	2b00      	cmp	r3, #0
   315fa:	d1c0      	bne.n	3157e <_is_ip+0xe>
		}
	}
	return 1;
   315fc:	2301      	movs	r3, #1
}
   315fe:	0018      	movs	r0, r3
   31600:	46bd      	mov	sp, r7
   31602:	b004      	add	sp, #16
   31604:	bd80      	pop	{r7, pc}
	...

00031608 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31608:	b5b0      	push	{r4, r5, r7, lr}
   3160a:	b08e      	sub	sp, #56	; 0x38
   3160c:	af00      	add	r7, sp, #0
   3160e:	60f8      	str	r0, [r7, #12]
   31610:	60b9      	str	r1, [r7, #8]
   31612:	603b      	str	r3, [r7, #0]
   31614:	1dfb      	adds	r3, r7, #7
   31616:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31618:	2337      	movs	r3, #55	; 0x37
   3161a:	18fb      	adds	r3, r7, r3
   3161c:	2200      	movs	r2, #0
   3161e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31620:	2300      	movs	r3, #0
   31622:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31624:	2300      	movs	r3, #0
   31626:	633b      	str	r3, [r7, #48]	; 0x30
   31628:	2300      	movs	r3, #0
   3162a:	62fb      	str	r3, [r7, #44]	; 0x2c
   3162c:	2300      	movs	r3, #0
   3162e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31630:	68fb      	ldr	r3, [r7, #12]
   31632:	2b00      	cmp	r3, #0
   31634:	d102      	bne.n	3163c <http_client_send_request+0x34>
		return -EINVAL;
   31636:	2316      	movs	r3, #22
   31638:	425b      	negs	r3, r3
   3163a:	e145      	b.n	318c8 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   3163c:	68fb      	ldr	r3, [r7, #12]
   3163e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31640:	2b02      	cmp	r3, #2
   31642:	d902      	bls.n	3164a <http_client_send_request+0x42>
		return -EBUSY;
   31644:	2310      	movs	r3, #16
   31646:	425b      	negs	r3, r3
   31648:	e13e      	b.n	318c8 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   3164a:	49a1      	ldr	r1, [pc, #644]	; (318d0 <http_client_send_request+0x2c8>)
   3164c:	68bb      	ldr	r3, [r7, #8]
   3164e:	2207      	movs	r2, #7
   31650:	0018      	movs	r0, r3
   31652:	4ba0      	ldr	r3, [pc, #640]	; (318d4 <http_client_send_request+0x2cc>)
   31654:	4798      	blx	r3
   31656:	1e03      	subs	r3, r0, #0
   31658:	d102      	bne.n	31660 <http_client_send_request+0x58>
		i = 7;
   3165a:	2307      	movs	r3, #7
   3165c:	633b      	str	r3, [r7, #48]	; 0x30
   3165e:	e009      	b.n	31674 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31660:	499d      	ldr	r1, [pc, #628]	; (318d8 <http_client_send_request+0x2d0>)
   31662:	68bb      	ldr	r3, [r7, #8]
   31664:	2208      	movs	r2, #8
   31666:	0018      	movs	r0, r3
   31668:	4b9a      	ldr	r3, [pc, #616]	; (318d4 <http_client_send_request+0x2cc>)
   3166a:	4798      	blx	r3
   3166c:	1e03      	subs	r3, r0, #0
   3166e:	d101      	bne.n	31674 <http_client_send_request+0x6c>
		i = 8;
   31670:	2308      	movs	r3, #8
   31672:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31674:	68fb      	ldr	r3, [r7, #12]
   31676:	1c5c      	adds	r4, r3, #1
   31678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3167a:	68ba      	ldr	r2, [r7, #8]
   3167c:	18d5      	adds	r5, r2, r3
   3167e:	68fb      	ldr	r3, [r7, #12]
   31680:	3301      	adds	r3, #1
   31682:	0018      	movs	r0, r3
   31684:	4b95      	ldr	r3, [pc, #596]	; (318dc <http_client_send_request+0x2d4>)
   31686:	4798      	blx	r3
   31688:	0003      	movs	r3, r0
   3168a:	001a      	movs	r2, r3
   3168c:	0029      	movs	r1, r5
   3168e:	0020      	movs	r0, r4
   31690:	4b90      	ldr	r3, [pc, #576]	; (318d4 <http_client_send_request+0x2cc>)
   31692:	4798      	blx	r3
   31694:	0003      	movs	r3, r0
   31696:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31698:	e00d      	b.n	316b6 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   3169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3169c:	1c5a      	adds	r2, r3, #1
   3169e:	62fa      	str	r2, [r7, #44]	; 0x2c
   316a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   316a2:	68b9      	ldr	r1, [r7, #8]
   316a4:	188a      	adds	r2, r1, r2
   316a6:	7811      	ldrb	r1, [r2, #0]
   316a8:	68fa      	ldr	r2, [r7, #12]
   316aa:	18d3      	adds	r3, r2, r3
   316ac:	1c0a      	adds	r2, r1, #0
   316ae:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   316b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   316b2:	3301      	adds	r3, #1
   316b4:	633b      	str	r3, [r7, #48]	; 0x30
   316b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   316b8:	68ba      	ldr	r2, [r7, #8]
   316ba:	18d3      	adds	r3, r2, r3
   316bc:	781b      	ldrb	r3, [r3, #0]
   316be:	2b00      	cmp	r3, #0
   316c0:	d005      	beq.n	316ce <http_client_send_request+0xc6>
   316c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   316c4:	68ba      	ldr	r2, [r7, #8]
   316c6:	18d3      	adds	r3, r2, r3
   316c8:	781b      	ldrb	r3, [r3, #0]
   316ca:	2b2f      	cmp	r3, #47	; 0x2f
   316cc:	d1e5      	bne.n	3169a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   316ce:	68fa      	ldr	r2, [r7, #12]
   316d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   316d2:	18d3      	adds	r3, r2, r3
   316d4:	3301      	adds	r3, #1
   316d6:	2200      	movs	r2, #0
   316d8:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   316da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   316dc:	68ba      	ldr	r2, [r7, #8]
   316de:	18d3      	adds	r3, r2, r3
   316e0:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   316e2:	68fb      	ldr	r3, [r7, #12]
   316e4:	3301      	adds	r3, #1
   316e6:	781b      	ldrb	r3, [r3, #0]
   316e8:	2b00      	cmp	r3, #0
   316ea:	d102      	bne.n	316f2 <http_client_send_request+0xea>
		return -EINVAL;
   316ec:	2316      	movs	r3, #22
   316ee:	425b      	negs	r3, r3
   316f0:	e0ea      	b.n	318c8 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   316f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   316f4:	0018      	movs	r0, r3
   316f6:	4b79      	ldr	r3, [pc, #484]	; (318dc <http_client_send_request+0x2d4>)
   316f8:	4798      	blx	r3
   316fa:	0003      	movs	r3, r0
   316fc:	2b3f      	cmp	r3, #63	; 0x3f
   316fe:	d902      	bls.n	31706 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31700:	235b      	movs	r3, #91	; 0x5b
   31702:	425b      	negs	r3, r3
   31704:	e0e0      	b.n	318c8 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31706:	68fb      	ldr	r3, [r7, #12]
   31708:	22d4      	movs	r2, #212	; 0xd4
   3170a:	589b      	ldr	r3, [r3, r2]
   3170c:	2b00      	cmp	r3, #0
   3170e:	d005      	beq.n	3171c <http_client_send_request+0x114>
		free(module->req.ext_header);
   31710:	68fb      	ldr	r3, [r7, #12]
   31712:	22d4      	movs	r2, #212	; 0xd4
   31714:	589b      	ldr	r3, [r3, r2]
   31716:	0018      	movs	r0, r3
   31718:	4b71      	ldr	r3, [pc, #452]	; (318e0 <http_client_send_request+0x2d8>)
   3171a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   3171c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3171e:	2b00      	cmp	r3, #0
   31720:	d010      	beq.n	31744 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31724:	0018      	movs	r0, r3
   31726:	4b6f      	ldr	r3, [pc, #444]	; (318e4 <http_client_send_request+0x2dc>)
   31728:	4798      	blx	r3
   3172a:	0003      	movs	r3, r0
   3172c:	0019      	movs	r1, r3
   3172e:	68fb      	ldr	r3, [r7, #12]
   31730:	22d4      	movs	r2, #212	; 0xd4
   31732:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31734:	68fb      	ldr	r3, [r7, #12]
   31736:	22d4      	movs	r2, #212	; 0xd4
   31738:	589b      	ldr	r3, [r3, r2]
   3173a:	2b00      	cmp	r3, #0
   3173c:	d106      	bne.n	3174c <http_client_send_request+0x144>
			return -ENOMEM;
   3173e:	230c      	movs	r3, #12
   31740:	425b      	negs	r3, r3
   31742:	e0c1      	b.n	318c8 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31744:	68fb      	ldr	r3, [r7, #12]
   31746:	22d4      	movs	r2, #212	; 0xd4
   31748:	2100      	movs	r1, #0
   3174a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   3174c:	68fb      	ldr	r3, [r7, #12]
   3174e:	2241      	movs	r2, #65	; 0x41
   31750:	5c99      	ldrb	r1, [r3, r2]
   31752:	2001      	movs	r0, #1
   31754:	4381      	bics	r1, r0
   31756:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31758:	68fb      	ldr	r3, [r7, #12]
   3175a:	2200      	movs	r2, #0
   3175c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   3175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31760:	781b      	ldrb	r3, [r3, #0]
   31762:	2b2f      	cmp	r3, #47	; 0x2f
   31764:	d107      	bne.n	31776 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31766:	68fb      	ldr	r3, [r7, #12]
   31768:	3370      	adds	r3, #112	; 0x70
   3176a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3176c:	0011      	movs	r1, r2
   3176e:	0018      	movs	r0, r3
   31770:	4b5d      	ldr	r3, [pc, #372]	; (318e8 <http_client_send_request+0x2e0>)
   31772:	4798      	blx	r3
   31774:	e00f      	b.n	31796 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31776:	68fb      	ldr	r3, [r7, #12]
   31778:	2270      	movs	r2, #112	; 0x70
   3177a:	212f      	movs	r1, #47	; 0x2f
   3177c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   3177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31780:	781b      	ldrb	r3, [r3, #0]
   31782:	2b00      	cmp	r3, #0
   31784:	d007      	beq.n	31796 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31786:	68fb      	ldr	r3, [r7, #12]
   31788:	3370      	adds	r3, #112	; 0x70
   3178a:	3301      	adds	r3, #1
   3178c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3178e:	0011      	movs	r1, r2
   31790:	0018      	movs	r0, r3
   31792:	4b55      	ldr	r3, [pc, #340]	; (318e8 <http_client_send_request+0x2e0>)
   31794:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31796:	683b      	ldr	r3, [r7, #0]
   31798:	2b00      	cmp	r3, #0
   3179a:	d007      	beq.n	317ac <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   3179c:	68fb      	ldr	r3, [r7, #12]
   3179e:	33b0      	adds	r3, #176	; 0xb0
   317a0:	6839      	ldr	r1, [r7, #0]
   317a2:	2218      	movs	r2, #24
   317a4:	0018      	movs	r0, r3
   317a6:	4b51      	ldr	r3, [pc, #324]	; (318ec <http_client_send_request+0x2e4>)
   317a8:	4798      	blx	r3
   317aa:	e006      	b.n	317ba <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   317ac:	68fb      	ldr	r3, [r7, #12]
   317ae:	33b0      	adds	r3, #176	; 0xb0
   317b0:	2218      	movs	r2, #24
   317b2:	2100      	movs	r1, #0
   317b4:	0018      	movs	r0, r3
   317b6:	4b4e      	ldr	r3, [pc, #312]	; (318f0 <http_client_send_request+0x2e8>)
   317b8:	4798      	blx	r3
	}

	module->req.method = method;
   317ba:	68fb      	ldr	r3, [r7, #12]
   317bc:	1dfa      	adds	r2, r7, #7
   317be:	21c8      	movs	r1, #200	; 0xc8
   317c0:	7812      	ldrb	r2, [r2, #0]
   317c2:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   317c4:	68fb      	ldr	r3, [r7, #12]
   317c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   317c8:	2b01      	cmp	r3, #1
   317ca:	d003      	beq.n	317d4 <http_client_send_request+0x1cc>
   317cc:	d316      	bcc.n	317fc <http_client_send_request+0x1f4>
   317ce:	2b02      	cmp	r3, #2
   317d0:	d004      	beq.n	317dc <http_client_send_request+0x1d4>
   317d2:	e074      	b.n	318be <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   317d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317d6:	2b00      	cmp	r3, #0
   317d8:	d100      	bne.n	317dc <http_client_send_request+0x1d4>
   317da:	e073      	b.n	318c4 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   317dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317de:	2b00      	cmp	r3, #0
   317e0:	d107      	bne.n	317f2 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   317e2:	68fb      	ldr	r3, [r7, #12]
   317e4:	2203      	movs	r2, #3
   317e6:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   317e8:	68fb      	ldr	r3, [r7, #12]
   317ea:	0018      	movs	r0, r3
   317ec:	4b41      	ldr	r3, [pc, #260]	; (318f4 <http_client_send_request+0x2ec>)
   317ee:	4798      	blx	r3
			break;
   317f0:	e069      	b.n	318c6 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   317f2:	68fb      	ldr	r3, [r7, #12]
   317f4:	2100      	movs	r1, #0
   317f6:	0018      	movs	r0, r3
   317f8:	4b3f      	ldr	r3, [pc, #252]	; (318f8 <http_client_send_request+0x2f0>)
   317fa:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   317fc:	68fb      	ldr	r3, [r7, #12]
   317fe:	2252      	movs	r2, #82	; 0x52
   31800:	5c9b      	ldrb	r3, [r3, r2]
   31802:	2b00      	cmp	r3, #0
   31804:	d007      	beq.n	31816 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31806:	2337      	movs	r3, #55	; 0x37
   31808:	18fb      	adds	r3, r7, r3
   3180a:	2237      	movs	r2, #55	; 0x37
   3180c:	18ba      	adds	r2, r7, r2
   3180e:	7812      	ldrb	r2, [r2, #0]
   31810:	2101      	movs	r1, #1
   31812:	430a      	orrs	r2, r1
   31814:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31816:	2337      	movs	r3, #55	; 0x37
   31818:	18fb      	adds	r3, r7, r3
   3181a:	781b      	ldrb	r3, [r3, #0]
   3181c:	001a      	movs	r2, r3
   3181e:	2101      	movs	r1, #1
   31820:	2002      	movs	r0, #2
   31822:	4b36      	ldr	r3, [pc, #216]	; (318fc <http_client_send_request+0x2f4>)
   31824:	4798      	blx	r3
   31826:	0003      	movs	r3, r0
   31828:	001a      	movs	r2, r3
   3182a:	68fb      	ldr	r3, [r7, #12]
   3182c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   3182e:	68fb      	ldr	r3, [r7, #12]
   31830:	781b      	ldrb	r3, [r3, #0]
   31832:	b25b      	sxtb	r3, r3
   31834:	2b00      	cmp	r3, #0
   31836:	db3f      	blt.n	318b8 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31838:	68fb      	ldr	r3, [r7, #12]
   3183a:	781b      	ldrb	r3, [r3, #0]
   3183c:	b25b      	sxtb	r3, r3
   3183e:	001a      	movs	r2, r3
   31840:	4b2f      	ldr	r3, [pc, #188]	; (31900 <http_client_send_request+0x2f8>)
   31842:	0092      	lsls	r2, r2, #2
   31844:	68f9      	ldr	r1, [r7, #12]
   31846:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31848:	68fb      	ldr	r3, [r7, #12]
   3184a:	3301      	adds	r3, #1
   3184c:	0018      	movs	r0, r3
   3184e:	4b2d      	ldr	r3, [pc, #180]	; (31904 <http_client_send_request+0x2fc>)
   31850:	4798      	blx	r3
   31852:	1e03      	subs	r3, r0, #0
   31854:	d027      	beq.n	318a6 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31856:	2314      	movs	r3, #20
   31858:	18fb      	adds	r3, r7, r3
   3185a:	2202      	movs	r2, #2
   3185c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3185e:	68fb      	ldr	r3, [r7, #12]
   31860:	2250      	movs	r2, #80	; 0x50
   31862:	5a9b      	ldrh	r3, [r3, r2]
   31864:	021b      	lsls	r3, r3, #8
   31866:	b21a      	sxth	r2, r3
   31868:	68fb      	ldr	r3, [r7, #12]
   3186a:	2150      	movs	r1, #80	; 0x50
   3186c:	5a5b      	ldrh	r3, [r3, r1]
   3186e:	0a1b      	lsrs	r3, r3, #8
   31870:	b29b      	uxth	r3, r3
   31872:	b21b      	sxth	r3, r3
   31874:	4313      	orrs	r3, r2
   31876:	b21b      	sxth	r3, r3
   31878:	b29a      	uxth	r2, r3
   3187a:	2314      	movs	r3, #20
   3187c:	18fb      	adds	r3, r7, r3
   3187e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31880:	68fb      	ldr	r3, [r7, #12]
   31882:	3301      	adds	r3, #1
   31884:	0018      	movs	r0, r3
   31886:	4b20      	ldr	r3, [pc, #128]	; (31908 <http_client_send_request+0x300>)
   31888:	4798      	blx	r3
   3188a:	0002      	movs	r2, r0
   3188c:	2314      	movs	r3, #20
   3188e:	18fb      	adds	r3, r7, r3
   31890:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31892:	68fb      	ldr	r3, [r7, #12]
   31894:	781b      	ldrb	r3, [r3, #0]
   31896:	b25b      	sxtb	r3, r3
   31898:	2214      	movs	r2, #20
   3189a:	18b9      	adds	r1, r7, r2
   3189c:	2210      	movs	r2, #16
   3189e:	0018      	movs	r0, r3
   318a0:	4b1a      	ldr	r3, [pc, #104]	; (3190c <http_client_send_request+0x304>)
   318a2:	4798      	blx	r3
   318a4:	e004      	b.n	318b0 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   318a6:	68fb      	ldr	r3, [r7, #12]
   318a8:	3301      	adds	r3, #1
   318aa:	0018      	movs	r0, r3
   318ac:	4b18      	ldr	r3, [pc, #96]	; (31910 <http_client_send_request+0x308>)
   318ae:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   318b0:	68fb      	ldr	r3, [r7, #12]
   318b2:	2201      	movs	r2, #1
   318b4:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   318b6:	e006      	b.n	318c6 <http_client_send_request+0x2be>
			return -ENOSPC;
   318b8:	231c      	movs	r3, #28
   318ba:	425b      	negs	r3, r3
   318bc:	e004      	b.n	318c8 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   318be:	230b      	movs	r3, #11
   318c0:	425b      	negs	r3, r3
   318c2:	e001      	b.n	318c8 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   318c4:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   318c6:	2300      	movs	r3, #0
}
   318c8:	0018      	movs	r0, r3
   318ca:	46bd      	mov	sp, r7
   318cc:	b00e      	add	sp, #56	; 0x38
   318ce:	bdb0      	pop	{r4, r5, r7, pc}
   318d0:	0003c35c 	.word	0x0003c35c
   318d4:	0003573d 	.word	0x0003573d
   318d8:	0003c364 	.word	0x0003c364
   318dc:	0003572f 	.word	0x0003572f
   318e0:	0003532d 	.word	0x0003532d
   318e4:	000356f5 	.word	0x000356f5
   318e8:	000356e3 	.word	0x000356e3
   318ec:	00035341 	.word	0x00035341
   318f0:	00035377 	.word	0x00035377
   318f4:	00031a69 	.word	0x00031a69
   318f8:	00031915 	.word	0x00031915
   318fc:	00025c25 	.word	0x00025c25
   31900:	20004704 	.word	0x20004704
   31904:	00031571 	.word	0x00031571
   31908:	00026371 	.word	0x00026371
   3190c:	00025e39 	.word	0x00025e39
   31910:	00026479 	.word	0x00026479

00031914 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31914:	b580      	push	{r7, lr}
   31916:	b086      	sub	sp, #24
   31918:	af00      	add	r7, sp, #0
   3191a:	6078      	str	r0, [r7, #4]
   3191c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   3191e:	687b      	ldr	r3, [r7, #4]
   31920:	22c0      	movs	r2, #192	; 0xc0
   31922:	589b      	ldr	r3, [r3, r2]
   31924:	2b00      	cmp	r3, #0
   31926:	d007      	beq.n	31938 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31928:	687b      	ldr	r3, [r7, #4]
   3192a:	22c0      	movs	r2, #192	; 0xc0
   3192c:	589b      	ldr	r3, [r3, r2]
   3192e:	687a      	ldr	r2, [r7, #4]
   31930:	21c4      	movs	r1, #196	; 0xc4
   31932:	5852      	ldr	r2, [r2, r1]
   31934:	0010      	movs	r0, r2
   31936:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31938:	687b      	ldr	r3, [r7, #4]
   3193a:	33b0      	adds	r3, #176	; 0xb0
   3193c:	2218      	movs	r2, #24
   3193e:	2100      	movs	r1, #0
   31940:	0018      	movs	r0, r3
   31942:	4b24      	ldr	r3, [pc, #144]	; (319d4 <_http_client_clear_conn+0xc0>)
   31944:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31946:	687b      	ldr	r3, [r7, #4]
   31948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3194a:	2b00      	cmp	r3, #0
   3194c:	d005      	beq.n	3195a <_http_client_clear_conn+0x46>
		close(module->sock);
   3194e:	687b      	ldr	r3, [r7, #4]
   31950:	781b      	ldrb	r3, [r3, #0]
   31952:	b25b      	sxtb	r3, r3
   31954:	0018      	movs	r0, r3
   31956:	4b20      	ldr	r3, [pc, #128]	; (319d8 <_http_client_clear_conn+0xc4>)
   31958:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3195a:	687b      	ldr	r3, [r7, #4]
   3195c:	781b      	ldrb	r3, [r3, #0]
   3195e:	b25b      	sxtb	r3, r3
   31960:	001a      	movs	r2, r3
   31962:	4b1e      	ldr	r3, [pc, #120]	; (319dc <_http_client_clear_conn+0xc8>)
   31964:	0092      	lsls	r2, r2, #2
   31966:	2100      	movs	r1, #0
   31968:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3196a:	687b      	ldr	r3, [r7, #4]
   3196c:	336c      	adds	r3, #108	; 0x6c
   3196e:	226c      	movs	r2, #108	; 0x6c
   31970:	2100      	movs	r1, #0
   31972:	0018      	movs	r0, r3
   31974:	4b17      	ldr	r3, [pc, #92]	; (319d4 <_http_client_clear_conn+0xc0>)
   31976:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31978:	687b      	ldr	r3, [r7, #4]
   3197a:	33d8      	adds	r3, #216	; 0xd8
   3197c:	2210      	movs	r2, #16
   3197e:	2100      	movs	r1, #0
   31980:	0018      	movs	r0, r3
   31982:	4b14      	ldr	r3, [pc, #80]	; (319d4 <_http_client_clear_conn+0xc0>)
   31984:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31986:	687b      	ldr	r3, [r7, #4]
   31988:	2200      	movs	r2, #0
   3198a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3198c:	687b      	ldr	r3, [r7, #4]
   3198e:	22d8      	movs	r2, #216	; 0xd8
   31990:	2100      	movs	r1, #0
   31992:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31994:	687b      	ldr	r3, [r7, #4]
   31996:	2241      	movs	r2, #65	; 0x41
   31998:	5c99      	ldrb	r1, [r3, r2]
   3199a:	2001      	movs	r0, #1
   3199c:	4381      	bics	r1, r0
   3199e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   319a0:	687b      	ldr	r3, [r7, #4]
   319a2:	2241      	movs	r2, #65	; 0x41
   319a4:	5c99      	ldrb	r1, [r3, r2]
   319a6:	2002      	movs	r0, #2
   319a8:	4381      	bics	r1, r0
   319aa:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   319ac:	230c      	movs	r3, #12
   319ae:	18fb      	adds	r3, r7, r3
   319b0:	683a      	ldr	r2, [r7, #0]
   319b2:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   319b4:	687b      	ldr	r3, [r7, #4]
   319b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   319b8:	2b00      	cmp	r3, #0
   319ba:	d006      	beq.n	319ca <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   319bc:	687b      	ldr	r3, [r7, #4]
   319be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   319c0:	220c      	movs	r2, #12
   319c2:	18ba      	adds	r2, r7, r2
   319c4:	6878      	ldr	r0, [r7, #4]
   319c6:	2104      	movs	r1, #4
   319c8:	4798      	blx	r3
	}
}
   319ca:	46c0      	nop			; (mov r8, r8)
   319cc:	46bd      	mov	sp, r7
   319ce:	b006      	add	sp, #24
   319d0:	bd80      	pop	{r7, pc}
   319d2:	46c0      	nop			; (mov r8, r8)
   319d4:	00035377 	.word	0x00035377
   319d8:	00026231 	.word	0x00026231
   319dc:	20004704 	.word	0x20004704

000319e0 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   319e0:	b590      	push	{r4, r7, lr}
   319e2:	b087      	sub	sp, #28
   319e4:	af00      	add	r7, sp, #0
   319e6:	60f8      	str	r0, [r7, #12]
   319e8:	60b9      	str	r1, [r7, #8]
   319ea:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   319ec:	68fb      	ldr	r3, [r7, #12]
   319ee:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   319f0:	697b      	ldr	r3, [r7, #20]
   319f2:	2241      	movs	r2, #65	; 0x41
   319f4:	5c99      	ldrb	r1, [r3, r2]
   319f6:	2001      	movs	r0, #1
   319f8:	4301      	orrs	r1, r0
   319fa:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   319fc:	697b      	ldr	r3, [r7, #20]
   319fe:	2000      	movs	r0, #0
   31a00:	5618      	ldrsb	r0, [r3, r0]
   31a02:	687b      	ldr	r3, [r7, #4]
   31a04:	b29a      	uxth	r2, r3
   31a06:	68b9      	ldr	r1, [r7, #8]
   31a08:	2300      	movs	r3, #0
   31a0a:	4c14      	ldr	r4, [pc, #80]	; (31a5c <_http_client_send_wait+0x7c>)
   31a0c:	47a0      	blx	r4
   31a0e:	0003      	movs	r3, r0
   31a10:	613b      	str	r3, [r7, #16]
   31a12:	693b      	ldr	r3, [r7, #16]
   31a14:	2b00      	cmp	r3, #0
   31a16:	da0f      	bge.n	31a38 <_http_client_send_wait+0x58>
		module->sending = 0;
   31a18:	697b      	ldr	r3, [r7, #20]
   31a1a:	2241      	movs	r2, #65	; 0x41
   31a1c:	5c99      	ldrb	r1, [r3, r2]
   31a1e:	2001      	movs	r0, #1
   31a20:	4381      	bics	r1, r0
   31a22:	5499      	strb	r1, [r3, r2]
		return result;
   31a24:	693b      	ldr	r3, [r7, #16]
   31a26:	e014      	b.n	31a52 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31a28:	2000      	movs	r0, #0
   31a2a:	4b0d      	ldr	r3, [pc, #52]	; (31a60 <_http_client_send_wait+0x80>)
   31a2c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   31a2e:	697b      	ldr	r3, [r7, #20]
   31a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31a32:	0018      	movs	r0, r3
   31a34:	4b0b      	ldr	r3, [pc, #44]	; (31a64 <_http_client_send_wait+0x84>)
   31a36:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31a38:	697b      	ldr	r3, [r7, #20]
   31a3a:	2241      	movs	r2, #65	; 0x41
   31a3c:	5c9b      	ldrb	r3, [r3, r2]
   31a3e:	2201      	movs	r2, #1
   31a40:	4013      	ands	r3, r2
   31a42:	b2db      	uxtb	r3, r3
   31a44:	2b00      	cmp	r3, #0
   31a46:	d003      	beq.n	31a50 <_http_client_send_wait+0x70>
   31a48:	697b      	ldr	r3, [r7, #20]
   31a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31a4c:	2b02      	cmp	r3, #2
   31a4e:	d8eb      	bhi.n	31a28 <_http_client_send_wait+0x48>
	}

	return 0;
   31a50:	2300      	movs	r3, #0
}
   31a52:	0018      	movs	r0, r3
   31a54:	46bd      	mov	sp, r7
   31a56:	b007      	add	sp, #28
   31a58:	bd90      	pop	{r4, r7, pc}
   31a5a:	46c0      	nop			; (mov r8, r8)
   31a5c:	00025f4d 	.word	0x00025f4d
   31a60:	000225f9 	.word	0x000225f9
   31a64:	00032ced 	.word	0x00032ced

00031a68 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   31a6a:	46c6      	mov	lr, r8
   31a6c:	b500      	push	{lr}
   31a6e:	b0a0      	sub	sp, #128	; 0x80
   31a70:	af02      	add	r7, sp, #8
   31a72:	61f8      	str	r0, [r7, #28]
   31a74:	4668      	mov	r0, sp
   31a76:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   31a78:	2318      	movs	r3, #24
   31a7a:	2218      	movs	r2, #24
   31a7c:	18ba      	adds	r2, r7, r2
   31a7e:	18d0      	adds	r0, r2, r3
   31a80:	4bbd      	ldr	r3, [pc, #756]	; (31d78 <_http_client_request+0x310>)
   31a82:	469c      	mov	ip, r3
   31a84:	4663      	mov	r3, ip
   31a86:	cb16      	ldmia	r3!, {r1, r2, r4}
   31a88:	c016      	stmia	r0!, {r1, r2, r4}
   31a8a:	469c      	mov	ip, r3
   31a8c:	4663      	mov	r3, ip
   31a8e:	681b      	ldr	r3, [r3, #0]
   31a90:	469c      	mov	ip, r3
   31a92:	4663      	mov	r3, ip
   31a94:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   31a96:	69f8      	ldr	r0, [r7, #28]
   31a98:	6e40      	ldr	r0, [r0, #100]	; 0x64
   31a9a:	4684      	mov	ip, r0
   31a9c:	2301      	movs	r3, #1
   31a9e:	425b      	negs	r3, r3
   31aa0:	4698      	mov	r8, r3
   31aa2:	44c4      	add	ip, r8
   31aa4:	4663      	mov	r3, ip
   31aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
   31aa8:	6038      	str	r0, [r7, #0]
   31aaa:	2300      	movs	r3, #0
   31aac:	607b      	str	r3, [r7, #4]
   31aae:	6839      	ldr	r1, [r7, #0]
   31ab0:	687a      	ldr	r2, [r7, #4]
   31ab2:	000b      	movs	r3, r1
   31ab4:	0f5b      	lsrs	r3, r3, #29
   31ab6:	469c      	mov	ip, r3
   31ab8:	0013      	movs	r3, r2
   31aba:	00db      	lsls	r3, r3, #3
   31abc:	617b      	str	r3, [r7, #20]
   31abe:	4663      	mov	r3, ip
   31ac0:	697c      	ldr	r4, [r7, #20]
   31ac2:	431c      	orrs	r4, r3
   31ac4:	617c      	str	r4, [r7, #20]
   31ac6:	000b      	movs	r3, r1
   31ac8:	00db      	lsls	r3, r3, #3
   31aca:	613b      	str	r3, [r7, #16]
   31acc:	0005      	movs	r5, r0
   31ace:	2200      	movs	r2, #0
   31ad0:	0016      	movs	r6, r2
   31ad2:	0f6a      	lsrs	r2, r5, #29
   31ad4:	00f3      	lsls	r3, r6, #3
   31ad6:	60fb      	str	r3, [r7, #12]
   31ad8:	68fb      	ldr	r3, [r7, #12]
   31ada:	4313      	orrs	r3, r2
   31adc:	60fb      	str	r3, [r7, #12]
   31ade:	00eb      	lsls	r3, r5, #3
   31ae0:	60bb      	str	r3, [r7, #8]
   31ae2:	1dc3      	adds	r3, r0, #7
   31ae4:	08db      	lsrs	r3, r3, #3
   31ae6:	00db      	lsls	r3, r3, #3
   31ae8:	466a      	mov	r2, sp
   31aea:	1ad3      	subs	r3, r2, r3
   31aec:	469d      	mov	sp, r3
   31aee:	ab02      	add	r3, sp, #8
   31af0:	3300      	adds	r3, #0
   31af2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   31af4:	69fb      	ldr	r3, [r7, #28]
   31af6:	2b00      	cmp	r3, #0
   31af8:	d100      	bne.n	31afc <_http_client_request+0x94>
   31afa:	e346      	b.n	3218a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   31afc:	69fb      	ldr	r3, [r7, #28]
   31afe:	2241      	movs	r2, #65	; 0x41
   31b00:	5c9b      	ldrb	r3, [r3, r2]
   31b02:	2201      	movs	r2, #1
   31b04:	4013      	ands	r3, r2
   31b06:	b2db      	uxtb	r3, r3
   31b08:	2b00      	cmp	r3, #0
   31b0a:	d000      	beq.n	31b0e <_http_client_request+0xa6>
   31b0c:	e33f      	b.n	3218e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   31b0e:	69fb      	ldr	r3, [r7, #28]
   31b10:	33b0      	adds	r3, #176	; 0xb0
   31b12:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   31b14:	69fb      	ldr	r3, [r7, #28]
   31b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31b18:	2b03      	cmp	r3, #3
   31b1a:	d003      	beq.n	31b24 <_http_client_request+0xbc>
   31b1c:	2b04      	cmp	r3, #4
   31b1e:	d100      	bne.n	31b22 <_http_client_request+0xba>
   31b20:	e1b3      	b.n	31e8a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   31b22:	e32f      	b.n	32184 <_http_client_request+0x71c>
		module->req.content_length = 0;
   31b24:	69fb      	ldr	r3, [r7, #28]
   31b26:	22cc      	movs	r2, #204	; 0xcc
   31b28:	2100      	movs	r1, #0
   31b2a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   31b2c:	69fb      	ldr	r3, [r7, #28]
   31b2e:	22d0      	movs	r2, #208	; 0xd0
   31b30:	2100      	movs	r1, #0
   31b32:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   31b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31b36:	69fb      	ldr	r3, [r7, #28]
   31b38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   31b3a:	4c90      	ldr	r4, [pc, #576]	; (31d7c <_http_client_request+0x314>)
   31b3c:	2334      	movs	r3, #52	; 0x34
   31b3e:	2018      	movs	r0, #24
   31b40:	1838      	adds	r0, r7, r0
   31b42:	18c0      	adds	r0, r0, r3
   31b44:	69fb      	ldr	r3, [r7, #28]
   31b46:	9300      	str	r3, [sp, #0]
   31b48:	0023      	movs	r3, r4
   31b4a:	4c8d      	ldr	r4, [pc, #564]	; (31d80 <_http_client_request+0x318>)
   31b4c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   31b4e:	69fb      	ldr	r3, [r7, #28]
   31b50:	22c8      	movs	r2, #200	; 0xc8
   31b52:	5c9b      	ldrb	r3, [r3, r2]
   31b54:	2b01      	cmp	r3, #1
   31b56:	d10a      	bne.n	31b6e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   31b58:	498a      	ldr	r1, [pc, #552]	; (31d84 <_http_client_request+0x31c>)
   31b5a:	2334      	movs	r3, #52	; 0x34
   31b5c:	2218      	movs	r2, #24
   31b5e:	4694      	mov	ip, r2
   31b60:	44bc      	add	ip, r7
   31b62:	4463      	add	r3, ip
   31b64:	2204      	movs	r2, #4
   31b66:	0018      	movs	r0, r3
   31b68:	4b87      	ldr	r3, [pc, #540]	; (31d88 <_http_client_request+0x320>)
   31b6a:	4798      	blx	r3
   31b6c:	e04e      	b.n	31c0c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   31b6e:	69fb      	ldr	r3, [r7, #28]
   31b70:	22c8      	movs	r2, #200	; 0xc8
   31b72:	5c9b      	ldrb	r3, [r3, r2]
   31b74:	2b02      	cmp	r3, #2
   31b76:	d10a      	bne.n	31b8e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   31b78:	4984      	ldr	r1, [pc, #528]	; (31d8c <_http_client_request+0x324>)
   31b7a:	2334      	movs	r3, #52	; 0x34
   31b7c:	2218      	movs	r2, #24
   31b7e:	4694      	mov	ip, r2
   31b80:	44bc      	add	ip, r7
   31b82:	4463      	add	r3, ip
   31b84:	2205      	movs	r2, #5
   31b86:	0018      	movs	r0, r3
   31b88:	4b7f      	ldr	r3, [pc, #508]	; (31d88 <_http_client_request+0x320>)
   31b8a:	4798      	blx	r3
   31b8c:	e03e      	b.n	31c0c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   31b8e:	69fb      	ldr	r3, [r7, #28]
   31b90:	22c8      	movs	r2, #200	; 0xc8
   31b92:	5c9b      	ldrb	r3, [r3, r2]
   31b94:	2b03      	cmp	r3, #3
   31b96:	d10a      	bne.n	31bae <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   31b98:	497d      	ldr	r1, [pc, #500]	; (31d90 <_http_client_request+0x328>)
   31b9a:	2334      	movs	r3, #52	; 0x34
   31b9c:	2218      	movs	r2, #24
   31b9e:	4694      	mov	ip, r2
   31ba0:	44bc      	add	ip, r7
   31ba2:	4463      	add	r3, ip
   31ba4:	2207      	movs	r2, #7
   31ba6:	0018      	movs	r0, r3
   31ba8:	4b77      	ldr	r3, [pc, #476]	; (31d88 <_http_client_request+0x320>)
   31baa:	4798      	blx	r3
   31bac:	e02e      	b.n	31c0c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   31bae:	69fb      	ldr	r3, [r7, #28]
   31bb0:	22c8      	movs	r2, #200	; 0xc8
   31bb2:	5c9b      	ldrb	r3, [r3, r2]
   31bb4:	2b04      	cmp	r3, #4
   31bb6:	d10a      	bne.n	31bce <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   31bb8:	4976      	ldr	r1, [pc, #472]	; (31d94 <_http_client_request+0x32c>)
   31bba:	2334      	movs	r3, #52	; 0x34
   31bbc:	2218      	movs	r2, #24
   31bbe:	4694      	mov	ip, r2
   31bc0:	44bc      	add	ip, r7
   31bc2:	4463      	add	r3, ip
   31bc4:	2204      	movs	r2, #4
   31bc6:	0018      	movs	r0, r3
   31bc8:	4b6f      	ldr	r3, [pc, #444]	; (31d88 <_http_client_request+0x320>)
   31bca:	4798      	blx	r3
   31bcc:	e01e      	b.n	31c0c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   31bce:	69fb      	ldr	r3, [r7, #28]
   31bd0:	22c8      	movs	r2, #200	; 0xc8
   31bd2:	5c9b      	ldrb	r3, [r3, r2]
   31bd4:	2b05      	cmp	r3, #5
   31bd6:	d10a      	bne.n	31bee <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   31bd8:	496f      	ldr	r1, [pc, #444]	; (31d98 <_http_client_request+0x330>)
   31bda:	2334      	movs	r3, #52	; 0x34
   31bdc:	2218      	movs	r2, #24
   31bde:	4694      	mov	ip, r2
   31be0:	44bc      	add	ip, r7
   31be2:	4463      	add	r3, ip
   31be4:	2208      	movs	r2, #8
   31be6:	0018      	movs	r0, r3
   31be8:	4b67      	ldr	r3, [pc, #412]	; (31d88 <_http_client_request+0x320>)
   31bea:	4798      	blx	r3
   31bec:	e00e      	b.n	31c0c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   31bee:	69fb      	ldr	r3, [r7, #28]
   31bf0:	22c8      	movs	r2, #200	; 0xc8
   31bf2:	5c9b      	ldrb	r3, [r3, r2]
   31bf4:	2b06      	cmp	r3, #6
   31bf6:	d109      	bne.n	31c0c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   31bf8:	4968      	ldr	r1, [pc, #416]	; (31d9c <_http_client_request+0x334>)
   31bfa:	2334      	movs	r3, #52	; 0x34
   31bfc:	2218      	movs	r2, #24
   31bfe:	4694      	mov	ip, r2
   31c00:	44bc      	add	ip, r7
   31c02:	4463      	add	r3, ip
   31c04:	2205      	movs	r2, #5
   31c06:	0018      	movs	r0, r3
   31c08:	4b5f      	ldr	r3, [pc, #380]	; (31d88 <_http_client_request+0x320>)
   31c0a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   31c0c:	69fb      	ldr	r3, [r7, #28]
   31c0e:	3370      	adds	r3, #112	; 0x70
   31c10:	001c      	movs	r4, r3
   31c12:	69fb      	ldr	r3, [r7, #28]
   31c14:	3370      	adds	r3, #112	; 0x70
   31c16:	0018      	movs	r0, r3
   31c18:	4b61      	ldr	r3, [pc, #388]	; (31da0 <_http_client_request+0x338>)
   31c1a:	4798      	blx	r3
   31c1c:	0002      	movs	r2, r0
   31c1e:	2334      	movs	r3, #52	; 0x34
   31c20:	2118      	movs	r1, #24
   31c22:	468c      	mov	ip, r1
   31c24:	44bc      	add	ip, r7
   31c26:	4463      	add	r3, ip
   31c28:	0021      	movs	r1, r4
   31c2a:	0018      	movs	r0, r3
   31c2c:	4b56      	ldr	r3, [pc, #344]	; (31d88 <_http_client_request+0x320>)
   31c2e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   31c30:	495c      	ldr	r1, [pc, #368]	; (31da4 <_http_client_request+0x33c>)
   31c32:	2334      	movs	r3, #52	; 0x34
   31c34:	2218      	movs	r2, #24
   31c36:	4694      	mov	ip, r2
   31c38:	44bc      	add	ip, r7
   31c3a:	4463      	add	r3, ip
   31c3c:	220b      	movs	r2, #11
   31c3e:	0018      	movs	r0, r3
   31c40:	4b51      	ldr	r3, [pc, #324]	; (31d88 <_http_client_request+0x320>)
   31c42:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   31c44:	4958      	ldr	r1, [pc, #352]	; (31da8 <_http_client_request+0x340>)
   31c46:	2334      	movs	r3, #52	; 0x34
   31c48:	2218      	movs	r2, #24
   31c4a:	4694      	mov	ip, r2
   31c4c:	44bc      	add	ip, r7
   31c4e:	4463      	add	r3, ip
   31c50:	220c      	movs	r2, #12
   31c52:	0018      	movs	r0, r3
   31c54:	4b4c      	ldr	r3, [pc, #304]	; (31d88 <_http_client_request+0x320>)
   31c56:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   31c58:	69fb      	ldr	r3, [r7, #28]
   31c5a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   31c5c:	69fb      	ldr	r3, [r7, #28]
   31c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31c60:	0018      	movs	r0, r3
   31c62:	4b4f      	ldr	r3, [pc, #316]	; (31da0 <_http_client_request+0x338>)
   31c64:	4798      	blx	r3
   31c66:	0002      	movs	r2, r0
   31c68:	2334      	movs	r3, #52	; 0x34
   31c6a:	2118      	movs	r1, #24
   31c6c:	468c      	mov	ip, r1
   31c6e:	44bc      	add	ip, r7
   31c70:	4463      	add	r3, ip
   31c72:	0021      	movs	r1, r4
   31c74:	0018      	movs	r0, r3
   31c76:	4b44      	ldr	r3, [pc, #272]	; (31d88 <_http_client_request+0x320>)
   31c78:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31c7a:	494c      	ldr	r1, [pc, #304]	; (31dac <_http_client_request+0x344>)
   31c7c:	2334      	movs	r3, #52	; 0x34
   31c7e:	2218      	movs	r2, #24
   31c80:	4694      	mov	ip, r2
   31c82:	44bc      	add	ip, r7
   31c84:	4463      	add	r3, ip
   31c86:	2202      	movs	r2, #2
   31c88:	0018      	movs	r0, r3
   31c8a:	4b3f      	ldr	r3, [pc, #252]	; (31d88 <_http_client_request+0x320>)
   31c8c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   31c8e:	4948      	ldr	r1, [pc, #288]	; (31db0 <_http_client_request+0x348>)
   31c90:	2334      	movs	r3, #52	; 0x34
   31c92:	2218      	movs	r2, #24
   31c94:	4694      	mov	ip, r2
   31c96:	44bc      	add	ip, r7
   31c98:	4463      	add	r3, ip
   31c9a:	2206      	movs	r2, #6
   31c9c:	0018      	movs	r0, r3
   31c9e:	4b3a      	ldr	r3, [pc, #232]	; (31d88 <_http_client_request+0x320>)
   31ca0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   31ca2:	69fb      	ldr	r3, [r7, #28]
   31ca4:	1c5c      	adds	r4, r3, #1
   31ca6:	69fb      	ldr	r3, [r7, #28]
   31ca8:	3301      	adds	r3, #1
   31caa:	0018      	movs	r0, r3
   31cac:	4b3c      	ldr	r3, [pc, #240]	; (31da0 <_http_client_request+0x338>)
   31cae:	4798      	blx	r3
   31cb0:	0002      	movs	r2, r0
   31cb2:	2334      	movs	r3, #52	; 0x34
   31cb4:	2118      	movs	r1, #24
   31cb6:	468c      	mov	ip, r1
   31cb8:	44bc      	add	ip, r7
   31cba:	4463      	add	r3, ip
   31cbc:	0021      	movs	r1, r4
   31cbe:	0018      	movs	r0, r3
   31cc0:	4b31      	ldr	r3, [pc, #196]	; (31d88 <_http_client_request+0x320>)
   31cc2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31cc4:	4939      	ldr	r1, [pc, #228]	; (31dac <_http_client_request+0x344>)
   31cc6:	2334      	movs	r3, #52	; 0x34
   31cc8:	2218      	movs	r2, #24
   31cca:	4694      	mov	ip, r2
   31ccc:	44bc      	add	ip, r7
   31cce:	4463      	add	r3, ip
   31cd0:	2202      	movs	r2, #2
   31cd2:	0018      	movs	r0, r3
   31cd4:	4b2c      	ldr	r3, [pc, #176]	; (31d88 <_http_client_request+0x320>)
   31cd6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   31cd8:	4936      	ldr	r1, [pc, #216]	; (31db4 <_http_client_request+0x34c>)
   31cda:	2334      	movs	r3, #52	; 0x34
   31cdc:	2218      	movs	r2, #24
   31cde:	4694      	mov	ip, r2
   31ce0:	44bc      	add	ip, r7
   31ce2:	4463      	add	r3, ip
   31ce4:	2218      	movs	r2, #24
   31ce6:	0018      	movs	r0, r3
   31ce8:	4b27      	ldr	r3, [pc, #156]	; (31d88 <_http_client_request+0x320>)
   31cea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31cec:	4932      	ldr	r1, [pc, #200]	; (31db8 <_http_client_request+0x350>)
   31cee:	2334      	movs	r3, #52	; 0x34
   31cf0:	2218      	movs	r2, #24
   31cf2:	4694      	mov	ip, r2
   31cf4:	44bc      	add	ip, r7
   31cf6:	4463      	add	r3, ip
   31cf8:	2213      	movs	r2, #19
   31cfa:	0018      	movs	r0, r3
   31cfc:	4b22      	ldr	r3, [pc, #136]	; (31d88 <_http_client_request+0x320>)
   31cfe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31d00:	492e      	ldr	r1, [pc, #184]	; (31dbc <_http_client_request+0x354>)
   31d02:	2334      	movs	r3, #52	; 0x34
   31d04:	2218      	movs	r2, #24
   31d06:	4694      	mov	ip, r2
   31d08:	44bc      	add	ip, r7
   31d0a:	4463      	add	r3, ip
   31d0c:	2217      	movs	r2, #23
   31d0e:	0018      	movs	r0, r3
   31d10:	4b1d      	ldr	r3, [pc, #116]	; (31d88 <_http_client_request+0x320>)
   31d12:	4798      	blx	r3
		if (entity->read != NULL) {
   31d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d16:	68db      	ldr	r3, [r3, #12]
   31d18:	2b00      	cmp	r3, #0
   31d1a:	d100      	bne.n	31d1e <_http_client_request+0x2b6>
   31d1c:	e088      	b.n	31e30 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d20:	781b      	ldrb	r3, [r3, #0]
   31d22:	2b00      	cmp	r3, #0
   31d24:	d00f      	beq.n	31d46 <_http_client_request+0x2de>
				module->req.content_length = -1;
   31d26:	69fb      	ldr	r3, [r7, #28]
   31d28:	21cc      	movs	r1, #204	; 0xcc
   31d2a:	2201      	movs	r2, #1
   31d2c:	4252      	negs	r2, r2
   31d2e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31d30:	4923      	ldr	r1, [pc, #140]	; (31dc0 <_http_client_request+0x358>)
   31d32:	2334      	movs	r3, #52	; 0x34
   31d34:	2218      	movs	r2, #24
   31d36:	4694      	mov	ip, r2
   31d38:	44bc      	add	ip, r7
   31d3a:	4463      	add	r3, ip
   31d3c:	221c      	movs	r2, #28
   31d3e:	0018      	movs	r0, r3
   31d40:	4b11      	ldr	r3, [pc, #68]	; (31d88 <_http_client_request+0x320>)
   31d42:	4798      	blx	r3
   31d44:	e074      	b.n	31e30 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   31d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d48:	689b      	ldr	r3, [r3, #8]
   31d4a:	2b00      	cmp	r3, #0
   31d4c:	d070      	beq.n	31e30 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d50:	689a      	ldr	r2, [r3, #8]
   31d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d54:	695b      	ldr	r3, [r3, #20]
   31d56:	0018      	movs	r0, r3
   31d58:	4790      	blx	r2
   31d5a:	0001      	movs	r1, r0
   31d5c:	69fb      	ldr	r3, [r7, #28]
   31d5e:	22cc      	movs	r2, #204	; 0xcc
   31d60:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   31d62:	69fb      	ldr	r3, [r7, #28]
   31d64:	22cc      	movs	r2, #204	; 0xcc
   31d66:	589b      	ldr	r3, [r3, r2]
   31d68:	2b00      	cmp	r3, #0
   31d6a:	da2b      	bge.n	31dc4 <_http_client_request+0x35c>
					module->req.content_length = 0;
   31d6c:	69fb      	ldr	r3, [r7, #28]
   31d6e:	22cc      	movs	r2, #204	; 0xcc
   31d70:	2100      	movs	r1, #0
   31d72:	5099      	str	r1, [r3, r2]
   31d74:	e05c      	b.n	31e30 <_http_client_request+0x3c8>
   31d76:	46c0      	nop			; (mov r8, r8)
   31d78:	0003c44c 	.word	0x0003c44c
   31d7c:	000319e1 	.word	0x000319e1
   31d80:	00032949 	.word	0x00032949
   31d84:	0003c370 	.word	0x0003c370
   31d88:	000329c9 	.word	0x000329c9
   31d8c:	0003c378 	.word	0x0003c378
   31d90:	0003c380 	.word	0x0003c380
   31d94:	0003c388 	.word	0x0003c388
   31d98:	0003c390 	.word	0x0003c390
   31d9c:	0003c39c 	.word	0x0003c39c
   31da0:	0003572f 	.word	0x0003572f
   31da4:	0003c3a4 	.word	0x0003c3a4
   31da8:	0003c3b0 	.word	0x0003c3b0
   31dac:	0003c3c0 	.word	0x0003c3c0
   31db0:	0003c3c4 	.word	0x0003c3c4
   31db4:	0003c3cc 	.word	0x0003c3cc
   31db8:	0003c3e8 	.word	0x0003c3e8
   31dbc:	0003c3fc 	.word	0x0003c3fc
   31dc0:	0003c414 	.word	0x0003c414
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   31dc4:	69fb      	ldr	r3, [r7, #28]
   31dc6:	22cc      	movs	r2, #204	; 0xcc
   31dc8:	589b      	ldr	r3, [r3, r2]
   31dca:	001a      	movs	r2, r3
   31dcc:	49e0      	ldr	r1, [pc, #896]	; (32150 <_http_client_request+0x6e8>)
   31dce:	2328      	movs	r3, #40	; 0x28
   31dd0:	2018      	movs	r0, #24
   31dd2:	4684      	mov	ip, r0
   31dd4:	44bc      	add	ip, r7
   31dd6:	4463      	add	r3, ip
   31dd8:	0018      	movs	r0, r3
   31dda:	4bde      	ldr	r3, [pc, #888]	; (32154 <_http_client_request+0x6ec>)
   31ddc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31dde:	49de      	ldr	r1, [pc, #888]	; (32158 <_http_client_request+0x6f0>)
   31de0:	2334      	movs	r3, #52	; 0x34
   31de2:	2218      	movs	r2, #24
   31de4:	4694      	mov	ip, r2
   31de6:	44bc      	add	ip, r7
   31de8:	4463      	add	r3, ip
   31dea:	2210      	movs	r2, #16
   31dec:	0018      	movs	r0, r3
   31dee:	4bdb      	ldr	r3, [pc, #876]	; (3215c <_http_client_request+0x6f4>)
   31df0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   31df2:	2328      	movs	r3, #40	; 0x28
   31df4:	2218      	movs	r2, #24
   31df6:	4694      	mov	ip, r2
   31df8:	44bc      	add	ip, r7
   31dfa:	4463      	add	r3, ip
   31dfc:	0018      	movs	r0, r3
   31dfe:	4bd8      	ldr	r3, [pc, #864]	; (32160 <_http_client_request+0x6f8>)
   31e00:	4798      	blx	r3
   31e02:	0002      	movs	r2, r0
   31e04:	2328      	movs	r3, #40	; 0x28
   31e06:	2118      	movs	r1, #24
   31e08:	1879      	adds	r1, r7, r1
   31e0a:	18c9      	adds	r1, r1, r3
   31e0c:	2334      	movs	r3, #52	; 0x34
   31e0e:	2018      	movs	r0, #24
   31e10:	4684      	mov	ip, r0
   31e12:	44bc      	add	ip, r7
   31e14:	4463      	add	r3, ip
   31e16:	0018      	movs	r0, r3
   31e18:	4bd0      	ldr	r3, [pc, #832]	; (3215c <_http_client_request+0x6f4>)
   31e1a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31e1c:	49d1      	ldr	r1, [pc, #836]	; (32164 <_http_client_request+0x6fc>)
   31e1e:	2334      	movs	r3, #52	; 0x34
   31e20:	2218      	movs	r2, #24
   31e22:	4694      	mov	ip, r2
   31e24:	44bc      	add	ip, r7
   31e26:	4463      	add	r3, ip
   31e28:	2202      	movs	r2, #2
   31e2a:	0018      	movs	r0, r3
   31e2c:	4bcb      	ldr	r3, [pc, #812]	; (3215c <_http_client_request+0x6f4>)
   31e2e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31e30:	69fb      	ldr	r3, [r7, #28]
   31e32:	22d4      	movs	r2, #212	; 0xd4
   31e34:	589b      	ldr	r3, [r3, r2]
   31e36:	2b00      	cmp	r3, #0
   31e38:	d012      	beq.n	31e60 <_http_client_request+0x3f8>
				module->req.ext_header,
   31e3a:	69fb      	ldr	r3, [r7, #28]
   31e3c:	22d4      	movs	r2, #212	; 0xd4
   31e3e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31e40:	69fb      	ldr	r3, [r7, #28]
   31e42:	22d4      	movs	r2, #212	; 0xd4
   31e44:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   31e46:	0018      	movs	r0, r3
   31e48:	4bc5      	ldr	r3, [pc, #788]	; (32160 <_http_client_request+0x6f8>)
   31e4a:	4798      	blx	r3
   31e4c:	0002      	movs	r2, r0
   31e4e:	2334      	movs	r3, #52	; 0x34
   31e50:	2118      	movs	r1, #24
   31e52:	468c      	mov	ip, r1
   31e54:	44bc      	add	ip, r7
   31e56:	4463      	add	r3, ip
   31e58:	0021      	movs	r1, r4
   31e5a:	0018      	movs	r0, r3
   31e5c:	4bbf      	ldr	r3, [pc, #764]	; (3215c <_http_client_request+0x6f4>)
   31e5e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31e60:	49c0      	ldr	r1, [pc, #768]	; (32164 <_http_client_request+0x6fc>)
   31e62:	2334      	movs	r3, #52	; 0x34
   31e64:	2218      	movs	r2, #24
   31e66:	4694      	mov	ip, r2
   31e68:	44bc      	add	ip, r7
   31e6a:	4463      	add	r3, ip
   31e6c:	2202      	movs	r2, #2
   31e6e:	0018      	movs	r0, r3
   31e70:	4bba      	ldr	r3, [pc, #744]	; (3215c <_http_client_request+0x6f4>)
   31e72:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   31e74:	2334      	movs	r3, #52	; 0x34
   31e76:	2218      	movs	r2, #24
   31e78:	4694      	mov	ip, r2
   31e7a:	44bc      	add	ip, r7
   31e7c:	4463      	add	r3, ip
   31e7e:	0018      	movs	r0, r3
   31e80:	4bb9      	ldr	r3, [pc, #740]	; (32168 <_http_client_request+0x700>)
   31e82:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   31e84:	69fb      	ldr	r3, [r7, #28]
   31e86:	2204      	movs	r2, #4
   31e88:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   31e8a:	69fb      	ldr	r3, [r7, #28]
   31e8c:	22cc      	movs	r2, #204	; 0xcc
   31e8e:	589b      	ldr	r3, [r3, r2]
   31e90:	2b00      	cmp	r3, #0
   31e92:	db00      	blt.n	31e96 <_http_client_request+0x42e>
   31e94:	e0c6      	b.n	32024 <_http_client_request+0x5bc>
   31e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31e98:	68db      	ldr	r3, [r3, #12]
   31e9a:	2b00      	cmp	r3, #0
   31e9c:	d100      	bne.n	31ea0 <_http_client_request+0x438>
   31e9e:	e0c1      	b.n	32024 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31ea2:	68dc      	ldr	r4, [r3, #12]
   31ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31ea6:	6958      	ldr	r0, [r3, #20]
   31ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31eaa:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31eac:	69fb      	ldr	r3, [r7, #28]
   31eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31eb0:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31eb2:	69fb      	ldr	r3, [r7, #28]
   31eb4:	22d0      	movs	r2, #208	; 0xd0
   31eb6:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31eb8:	002a      	movs	r2, r5
   31eba:	47a0      	blx	r4
   31ebc:	0003      	movs	r3, r0
   31ebe:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ec2:	2b00      	cmp	r3, #0
   31ec4:	da01      	bge.n	31eca <_http_client_request+0x462>
				size = 0;
   31ec6:	2300      	movs	r3, #0
   31ec8:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31ecc:	220a      	movs	r2, #10
   31ece:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31ed2:	220d      	movs	r2, #13
   31ed4:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   31ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ed8:	3305      	adds	r3, #5
   31eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31edc:	210d      	movs	r1, #13
   31ede:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ee2:	3306      	adds	r3, #6
   31ee4:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31ee6:	210a      	movs	r1, #10
   31ee8:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   31eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31eec:	2b00      	cmp	r3, #0
   31eee:	db14      	blt.n	31f1a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31ef2:	3302      	adds	r3, #2
   31ef4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   31ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ef8:	4a9c      	ldr	r2, [pc, #624]	; (3216c <_http_client_request+0x704>)
   31efa:	4013      	ands	r3, r2
   31efc:	d504      	bpl.n	31f08 <_http_client_request+0x4a0>
   31efe:	3b01      	subs	r3, #1
   31f00:	2210      	movs	r2, #16
   31f02:	4252      	negs	r2, r2
   31f04:	4313      	orrs	r3, r2
   31f06:	3301      	adds	r3, #1
   31f08:	001a      	movs	r2, r3
   31f0a:	2318      	movs	r3, #24
   31f0c:	2118      	movs	r1, #24
   31f0e:	468c      	mov	ip, r1
   31f10:	44bc      	add	ip, r7
   31f12:	4463      	add	r3, ip
   31f14:	5c9a      	ldrb	r2, [r3, r2]
   31f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31f18:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31f1c:	2b0f      	cmp	r3, #15
   31f1e:	dd19      	ble.n	31f54 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31f22:	3301      	adds	r3, #1
   31f24:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   31f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31f28:	2b00      	cmp	r3, #0
   31f2a:	da00      	bge.n	31f2e <_http_client_request+0x4c6>
   31f2c:	330f      	adds	r3, #15
   31f2e:	111b      	asrs	r3, r3, #4
   31f30:	001a      	movs	r2, r3
   31f32:	4b8e      	ldr	r3, [pc, #568]	; (3216c <_http_client_request+0x704>)
   31f34:	4013      	ands	r3, r2
   31f36:	d504      	bpl.n	31f42 <_http_client_request+0x4da>
   31f38:	3b01      	subs	r3, #1
   31f3a:	2210      	movs	r2, #16
   31f3c:	4252      	negs	r2, r2
   31f3e:	4313      	orrs	r3, r2
   31f40:	3301      	adds	r3, #1
   31f42:	001a      	movs	r2, r3
   31f44:	2318      	movs	r3, #24
   31f46:	2118      	movs	r1, #24
   31f48:	468c      	mov	ip, r1
   31f4a:	44bc      	add	ip, r7
   31f4c:	4463      	add	r3, ip
   31f4e:	5c9a      	ldrb	r2, [r3, r2]
   31f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31f52:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   31f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31f56:	2bff      	cmp	r3, #255	; 0xff
   31f58:	dd18      	ble.n	31f8c <_http_client_request+0x524>
				ptr = buffer;
   31f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31f5c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31f60:	2b00      	cmp	r3, #0
   31f62:	da00      	bge.n	31f66 <_http_client_request+0x4fe>
   31f64:	33ff      	adds	r3, #255	; 0xff
   31f66:	121b      	asrs	r3, r3, #8
   31f68:	001a      	movs	r2, r3
   31f6a:	4b80      	ldr	r3, [pc, #512]	; (3216c <_http_client_request+0x704>)
   31f6c:	4013      	ands	r3, r2
   31f6e:	d504      	bpl.n	31f7a <_http_client_request+0x512>
   31f70:	3b01      	subs	r3, #1
   31f72:	2210      	movs	r2, #16
   31f74:	4252      	negs	r2, r2
   31f76:	4313      	orrs	r3, r2
   31f78:	3301      	adds	r3, #1
   31f7a:	001a      	movs	r2, r3
   31f7c:	2318      	movs	r3, #24
   31f7e:	2118      	movs	r1, #24
   31f80:	468c      	mov	ip, r1
   31f82:	44bc      	add	ip, r7
   31f84:	4463      	add	r3, ip
   31f86:	5c9a      	ldrb	r2, [r3, r2]
   31f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31f8a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   31f8c:	69fb      	ldr	r3, [r7, #28]
   31f8e:	2000      	movs	r0, #0
   31f90:	5618      	ldrsb	r0, [r3, r0]
   31f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31f94:	3303      	adds	r3, #3
   31f96:	001a      	movs	r2, r3
   31f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31f9a:	1ad3      	subs	r3, r2, r3
   31f9c:	b29a      	uxth	r2, r3
   31f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31fa0:	b29b      	uxth	r3, r3
   31fa2:	18d3      	adds	r3, r2, r3
   31fa4:	b29b      	uxth	r3, r3
   31fa6:	3304      	adds	r3, #4
   31fa8:	b29a      	uxth	r2, r3
   31faa:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31fac:	2300      	movs	r3, #0
   31fae:	4c70      	ldr	r4, [pc, #448]	; (32170 <_http_client_request+0x708>)
   31fb0:	47a0      	blx	r4
   31fb2:	0003      	movs	r3, r0
   31fb4:	663b      	str	r3, [r7, #96]	; 0x60
   31fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31fb8:	2b00      	cmp	r3, #0
   31fba:	da07      	bge.n	31fcc <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31fbc:	2305      	movs	r3, #5
   31fbe:	425a      	negs	r2, r3
   31fc0:	69fb      	ldr	r3, [r7, #28]
   31fc2:	0011      	movs	r1, r2
   31fc4:	0018      	movs	r0, r3
   31fc6:	4b6b      	ldr	r3, [pc, #428]	; (32174 <_http_client_request+0x70c>)
   31fc8:	4798      	blx	r3
				return;
   31fca:	e0e1      	b.n	32190 <_http_client_request+0x728>
			module->req.sent_length += size;
   31fcc:	69fb      	ldr	r3, [r7, #28]
   31fce:	22d0      	movs	r2, #208	; 0xd0
   31fd0:	589a      	ldr	r2, [r3, r2]
   31fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31fd4:	18d2      	adds	r2, r2, r3
   31fd6:	69fb      	ldr	r3, [r7, #28]
   31fd8:	21d0      	movs	r1, #208	; 0xd0
   31fda:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31fde:	2b00      	cmp	r3, #0
   31fe0:	d000      	beq.n	31fe4 <_http_client_request+0x57c>
   31fe2:	e0c9      	b.n	32178 <_http_client_request+0x710>
				if (module->req.entity.close) {
   31fe4:	69fb      	ldr	r3, [r7, #28]
   31fe6:	22c0      	movs	r2, #192	; 0xc0
   31fe8:	589b      	ldr	r3, [r3, r2]
   31fea:	2b00      	cmp	r3, #0
   31fec:	d007      	beq.n	31ffe <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31fee:	69fb      	ldr	r3, [r7, #28]
   31ff0:	22c0      	movs	r2, #192	; 0xc0
   31ff2:	589b      	ldr	r3, [r3, r2]
   31ff4:	69fa      	ldr	r2, [r7, #28]
   31ff6:	21c4      	movs	r1, #196	; 0xc4
   31ff8:	5852      	ldr	r2, [r2, r1]
   31ffa:	0010      	movs	r0, r2
   31ffc:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31ffe:	69fb      	ldr	r3, [r7, #28]
   32000:	2202      	movs	r2, #2
   32002:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32004:	69fb      	ldr	r3, [r7, #28]
   32006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32008:	2b00      	cmp	r3, #0
   3200a:	d100      	bne.n	3200e <_http_client_request+0x5a6>
   3200c:	e0b5      	b.n	3217a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3200e:	69fb      	ldr	r3, [r7, #28]
   32010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32012:	220c      	movs	r2, #12
   32014:	2118      	movs	r1, #24
   32016:	468c      	mov	ip, r1
   32018:	44bc      	add	ip, r7
   3201a:	4462      	add	r2, ip
   3201c:	69f8      	ldr	r0, [r7, #28]
   3201e:	2101      	movs	r1, #1
   32020:	4798      	blx	r3
				break;
   32022:	e0aa      	b.n	3217a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   32024:	69fb      	ldr	r3, [r7, #28]
   32026:	22cc      	movs	r2, #204	; 0xcc
   32028:	589b      	ldr	r3, [r3, r2]
   3202a:	2b00      	cmp	r3, #0
   3202c:	dc00      	bgt.n	32030 <_http_client_request+0x5c8>
   3202e:	e07c      	b.n	3212a <_http_client_request+0x6c2>
   32030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32032:	68db      	ldr	r3, [r3, #12]
   32034:	2b00      	cmp	r3, #0
   32036:	d100      	bne.n	3203a <_http_client_request+0x5d2>
   32038:	e077      	b.n	3212a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3203a:	69fb      	ldr	r3, [r7, #28]
   3203c:	22d0      	movs	r2, #208	; 0xd0
   3203e:	589a      	ldr	r2, [r3, r2]
   32040:	69fb      	ldr	r3, [r7, #28]
   32042:	21cc      	movs	r1, #204	; 0xcc
   32044:	585b      	ldr	r3, [r3, r1]
   32046:	429a      	cmp	r2, r3
   32048:	db1f      	blt.n	3208a <_http_client_request+0x622>
				if (module->req.entity.close) {
   3204a:	69fb      	ldr	r3, [r7, #28]
   3204c:	22c0      	movs	r2, #192	; 0xc0
   3204e:	589b      	ldr	r3, [r3, r2]
   32050:	2b00      	cmp	r3, #0
   32052:	d007      	beq.n	32064 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   32054:	69fb      	ldr	r3, [r7, #28]
   32056:	22c0      	movs	r2, #192	; 0xc0
   32058:	589b      	ldr	r3, [r3, r2]
   3205a:	69fa      	ldr	r2, [r7, #28]
   3205c:	21c4      	movs	r1, #196	; 0xc4
   3205e:	5852      	ldr	r2, [r2, r1]
   32060:	0010      	movs	r0, r2
   32062:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32064:	69fb      	ldr	r3, [r7, #28]
   32066:	2202      	movs	r2, #2
   32068:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3206a:	69fb      	ldr	r3, [r7, #28]
   3206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3206e:	2b00      	cmp	r3, #0
   32070:	d100      	bne.n	32074 <_http_client_request+0x60c>
   32072:	e084      	b.n	3217e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32074:	69fb      	ldr	r3, [r7, #28]
   32076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32078:	220c      	movs	r2, #12
   3207a:	2118      	movs	r1, #24
   3207c:	468c      	mov	ip, r1
   3207e:	44bc      	add	ip, r7
   32080:	4462      	add	r2, ip
   32082:	69f8      	ldr	r0, [r7, #28]
   32084:	2101      	movs	r1, #1
   32086:	4798      	blx	r3
				break;
   32088:	e079      	b.n	3217e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   3208a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3208c:	68dc      	ldr	r4, [r3, #12]
   3208e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32090:	6958      	ldr	r0, [r3, #20]
   32092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32094:	69fb      	ldr	r3, [r7, #28]
   32096:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32098:	69fb      	ldr	r3, [r7, #28]
   3209a:	22d0      	movs	r2, #208	; 0xd0
   3209c:	589b      	ldr	r3, [r3, r2]
   3209e:	002a      	movs	r2, r5
   320a0:	47a0      	blx	r4
   320a2:	0003      	movs	r3, r0
   320a4:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   320a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   320a8:	2b00      	cmp	r3, #0
   320aa:	da0d      	bge.n	320c8 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   320ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   320ae:	2b00      	cmp	r3, #0
   320b0:	d102      	bne.n	320b8 <_http_client_request+0x650>
   320b2:	234d      	movs	r3, #77	; 0x4d
   320b4:	425b      	negs	r3, r3
   320b6:	e001      	b.n	320bc <_http_client_request+0x654>
   320b8:	2305      	movs	r3, #5
   320ba:	425b      	negs	r3, r3
   320bc:	69fa      	ldr	r2, [r7, #28]
   320be:	0019      	movs	r1, r3
   320c0:	0010      	movs	r0, r2
   320c2:	4b2c      	ldr	r3, [pc, #176]	; (32174 <_http_client_request+0x70c>)
   320c4:	4798      	blx	r3
			if (size < 0) {
   320c6:	e057      	b.n	32178 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   320c8:	69fb      	ldr	r3, [r7, #28]
   320ca:	22cc      	movs	r2, #204	; 0xcc
   320cc:	589a      	ldr	r2, [r3, r2]
   320ce:	69fb      	ldr	r3, [r7, #28]
   320d0:	21d0      	movs	r1, #208	; 0xd0
   320d2:	585b      	ldr	r3, [r3, r1]
   320d4:	1ad2      	subs	r2, r2, r3
   320d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   320d8:	429a      	cmp	r2, r3
   320da:	da07      	bge.n	320ec <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   320dc:	69fb      	ldr	r3, [r7, #28]
   320de:	22cc      	movs	r2, #204	; 0xcc
   320e0:	589a      	ldr	r2, [r3, r2]
   320e2:	69fb      	ldr	r3, [r7, #28]
   320e4:	21d0      	movs	r1, #208	; 0xd0
   320e6:	585b      	ldr	r3, [r3, r1]
   320e8:	1ad3      	subs	r3, r2, r3
   320ea:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   320ec:	69fb      	ldr	r3, [r7, #28]
   320ee:	2000      	movs	r0, #0
   320f0:	5618      	ldrsb	r0, [r3, r0]
   320f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   320f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   320f6:	b29a      	uxth	r2, r3
   320f8:	2300      	movs	r3, #0
   320fa:	4c1d      	ldr	r4, [pc, #116]	; (32170 <_http_client_request+0x708>)
   320fc:	47a0      	blx	r4
   320fe:	0003      	movs	r3, r0
   32100:	663b      	str	r3, [r7, #96]	; 0x60
   32102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32104:	2b00      	cmp	r3, #0
   32106:	da07      	bge.n	32118 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32108:	2305      	movs	r3, #5
   3210a:	425a      	negs	r2, r3
   3210c:	69fb      	ldr	r3, [r7, #28]
   3210e:	0011      	movs	r1, r2
   32110:	0018      	movs	r0, r3
   32112:	4b18      	ldr	r3, [pc, #96]	; (32174 <_http_client_request+0x70c>)
   32114:	4798      	blx	r3
					return;
   32116:	e03b      	b.n	32190 <_http_client_request+0x728>
				module->req.sent_length += size;
   32118:	69fb      	ldr	r3, [r7, #28]
   3211a:	22d0      	movs	r2, #208	; 0xd0
   3211c:	589a      	ldr	r2, [r3, r2]
   3211e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32120:	18d2      	adds	r2, r2, r3
   32122:	69fb      	ldr	r3, [r7, #28]
   32124:	21d0      	movs	r1, #208	; 0xd0
   32126:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   32128:	e026      	b.n	32178 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   3212a:	69fb      	ldr	r3, [r7, #28]
   3212c:	2202      	movs	r2, #2
   3212e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   32130:	69fb      	ldr	r3, [r7, #28]
   32132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32134:	2b00      	cmp	r3, #0
   32136:	d024      	beq.n	32182 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32138:	69fb      	ldr	r3, [r7, #28]
   3213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3213c:	220c      	movs	r2, #12
   3213e:	2118      	movs	r1, #24
   32140:	468c      	mov	ip, r1
   32142:	44bc      	add	ip, r7
   32144:	4462      	add	r2, ip
   32146:	69f8      	ldr	r0, [r7, #28]
   32148:	2101      	movs	r1, #1
   3214a:	4798      	blx	r3
			break;
   3214c:	e019      	b.n	32182 <_http_client_request+0x71a>
   3214e:	46c0      	nop			; (mov r8, r8)
   32150:	0003c434 	.word	0x0003c434
   32154:	00035635 	.word	0x00035635
   32158:	0003c438 	.word	0x0003c438
   3215c:	000329c9 	.word	0x000329c9
   32160:	0003572f 	.word	0x0003572f
   32164:	0003c3c0 	.word	0x0003c3c0
   32168:	00032a05 	.word	0x00032a05
   3216c:	8000000f 	.word	0x8000000f
   32170:	00025f4d 	.word	0x00025f4d
   32174:	00031915 	.word	0x00031915
		break;
   32178:	e004      	b.n	32184 <_http_client_request+0x71c>
				break;
   3217a:	46c0      	nop			; (mov r8, r8)
   3217c:	e002      	b.n	32184 <_http_client_request+0x71c>
				break;
   3217e:	46c0      	nop			; (mov r8, r8)
   32180:	e000      	b.n	32184 <_http_client_request+0x71c>
			break;
   32182:	46c0      	nop			; (mov r8, r8)
   32184:	69bb      	ldr	r3, [r7, #24]
   32186:	469d      	mov	sp, r3
   32188:	e004      	b.n	32194 <_http_client_request+0x72c>
		return;
   3218a:	46c0      	nop			; (mov r8, r8)
   3218c:	e000      	b.n	32190 <_http_client_request+0x728>
		return;
   3218e:	46c0      	nop			; (mov r8, r8)
   32190:	69bb      	ldr	r3, [r7, #24]
   32192:	469d      	mov	sp, r3
	}
}
   32194:	46bd      	mov	sp, r7
   32196:	b01e      	add	sp, #120	; 0x78
   32198:	bc04      	pop	{r2}
   3219a:	4690      	mov	r8, r2
   3219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3219e:	46c0      	nop			; (mov r8, r8)

000321a0 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   321a0:	b590      	push	{r4, r7, lr}
   321a2:	b083      	sub	sp, #12
   321a4:	af00      	add	r7, sp, #0
   321a6:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   321a8:	687b      	ldr	r3, [r7, #4]
   321aa:	2b00      	cmp	r3, #0
   321ac:	d021      	beq.n	321f2 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   321ae:	687b      	ldr	r3, [r7, #4]
   321b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   321b2:	687b      	ldr	r3, [r7, #4]
   321b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   321b6:	429a      	cmp	r2, r3
   321b8:	d307      	bcc.n	321ca <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   321ba:	238b      	movs	r3, #139	; 0x8b
   321bc:	425a      	negs	r2, r3
   321be:	687b      	ldr	r3, [r7, #4]
   321c0:	0011      	movs	r1, r2
   321c2:	0018      	movs	r0, r3
   321c4:	4b0d      	ldr	r3, [pc, #52]	; (321fc <_http_client_recv_packet+0x5c>)
   321c6:	4798      	blx	r3
		return;
   321c8:	e014      	b.n	321f4 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   321ca:	687b      	ldr	r3, [r7, #4]
   321cc:	2000      	movs	r0, #0
   321ce:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   321d0:	687b      	ldr	r3, [r7, #4]
   321d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   321d4:	687b      	ldr	r3, [r7, #4]
   321d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   321d8:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   321da:	687b      	ldr	r3, [r7, #4]
   321dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   321de:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   321e0:	687b      	ldr	r3, [r7, #4]
   321e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   321e4:	b29b      	uxth	r3, r3
   321e6:	1ad3      	subs	r3, r2, r3
   321e8:	b29a      	uxth	r2, r3
   321ea:	2300      	movs	r3, #0
   321ec:	4c04      	ldr	r4, [pc, #16]	; (32200 <_http_client_recv_packet+0x60>)
   321ee:	47a0      	blx	r4
   321f0:	e000      	b.n	321f4 <_http_client_recv_packet+0x54>
		return;
   321f2:	46c0      	nop			; (mov r8, r8)
}
   321f4:	46bd      	mov	sp, r7
   321f6:	b003      	add	sp, #12
   321f8:	bd90      	pop	{r4, r7, pc}
   321fa:	46c0      	nop			; (mov r8, r8)
   321fc:	00031915 	.word	0x00031915
   32200:	000260b1 	.word	0x000260b1

00032204 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   32204:	b580      	push	{r7, lr}
   32206:	b082      	sub	sp, #8
   32208:	af00      	add	r7, sp, #0
   3220a:	6078      	str	r0, [r7, #4]
   3220c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   3220e:	687b      	ldr	r3, [r7, #4]
   32210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32212:	683b      	ldr	r3, [r7, #0]
   32214:	18d2      	adds	r2, r2, r3
   32216:	687b      	ldr	r3, [r7, #4]
   32218:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   3221a:	687b      	ldr	r3, [r7, #4]
   3221c:	2258      	movs	r2, #88	; 0x58
   3221e:	5a9b      	ldrh	r3, [r3, r2]
   32220:	2b00      	cmp	r3, #0
   32222:	d007      	beq.n	32234 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   32224:	687b      	ldr	r3, [r7, #4]
   32226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32228:	687b      	ldr	r3, [r7, #4]
   3222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3222c:	0019      	movs	r1, r3
   3222e:	0010      	movs	r0, r2
   32230:	4b06      	ldr	r3, [pc, #24]	; (3224c <_http_client_recved_packet+0x48>)
   32232:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   32234:	46c0      	nop			; (mov r8, r8)
   32236:	687b      	ldr	r3, [r7, #4]
   32238:	0018      	movs	r0, r3
   3223a:	4b05      	ldr	r3, [pc, #20]	; (32250 <_http_client_recved_packet+0x4c>)
   3223c:	4798      	blx	r3
   3223e:	1e03      	subs	r3, r0, #0
   32240:	d1f9      	bne.n	32236 <_http_client_recved_packet+0x32>
}
   32242:	46c0      	nop			; (mov r8, r8)
   32244:	46bd      	mov	sp, r7
   32246:	b002      	add	sp, #8
   32248:	bd80      	pop	{r7, pc}
   3224a:	46c0      	nop			; (mov r8, r8)
   3224c:	00032cc1 	.word	0x00032cc1
   32250:	00032255 	.word	0x00032255

00032254 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   32254:	b580      	push	{r7, lr}
   32256:	b082      	sub	sp, #8
   32258:	af00      	add	r7, sp, #0
   3225a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   3225c:	687b      	ldr	r3, [r7, #4]
   3225e:	22d8      	movs	r2, #216	; 0xd8
   32260:	589b      	ldr	r3, [r3, r2]
   32262:	2b00      	cmp	r3, #0
   32264:	d002      	beq.n	3226c <_http_client_handle_response+0x18>
   32266:	2b01      	cmp	r3, #1
   32268:	d006      	beq.n	32278 <_http_client_handle_response+0x24>
   3226a:	e00b      	b.n	32284 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   3226c:	687b      	ldr	r3, [r7, #4]
   3226e:	0018      	movs	r0, r3
   32270:	4b07      	ldr	r3, [pc, #28]	; (32290 <_http_client_handle_response+0x3c>)
   32272:	4798      	blx	r3
   32274:	0003      	movs	r3, r0
   32276:	e006      	b.n	32286 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32278:	687b      	ldr	r3, [r7, #4]
   3227a:	0018      	movs	r0, r3
   3227c:	4b05      	ldr	r3, [pc, #20]	; (32294 <_http_client_handle_response+0x40>)
   3227e:	4798      	blx	r3
   32280:	0003      	movs	r3, r0
   32282:	e000      	b.n	32286 <_http_client_handle_response+0x32>
	}
	return 0;
   32284:	2300      	movs	r3, #0
}
   32286:	0018      	movs	r0, r3
   32288:	46bd      	mov	sp, r7
   3228a:	b002      	add	sp, #8
   3228c:	bd80      	pop	{r7, pc}
   3228e:	46c0      	nop			; (mov r8, r8)
   32290:	00032299 	.word	0x00032299
   32294:	00032751 	.word	0x00032751

00032298 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32298:	b590      	push	{r4, r7, lr}
   3229a:	b08b      	sub	sp, #44	; 0x2c
   3229c:	af00      	add	r7, sp, #0
   3229e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   322a0:	687b      	ldr	r3, [r7, #4]
   322a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   322a4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   322a6:	4b9a      	ldr	r3, [pc, #616]	; (32510 <_http_client_handle_header+0x278>)
   322a8:	681a      	ldr	r2, [r3, #0]
   322aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   322ac:	0011      	movs	r1, r2
   322ae:	0018      	movs	r0, r3
   322b0:	4b98      	ldr	r3, [pc, #608]	; (32514 <_http_client_handle_header+0x27c>)
   322b2:	4798      	blx	r3
   322b4:	0003      	movs	r3, r0
   322b6:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   322b8:	69bb      	ldr	r3, [r7, #24]
   322ba:	2b00      	cmp	r3, #0
   322bc:	d007      	beq.n	322ce <_http_client_handle_header+0x36>
   322be:	687b      	ldr	r3, [r7, #4]
   322c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   322c2:	687b      	ldr	r3, [r7, #4]
   322c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   322c6:	18d2      	adds	r2, r2, r3
   322c8:	69bb      	ldr	r3, [r7, #24]
   322ca:	429a      	cmp	r2, r3
   322cc:	d807      	bhi.n	322de <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   322ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   322d0:	687b      	ldr	r3, [r7, #4]
   322d2:	0011      	movs	r1, r2
   322d4:	0018      	movs	r0, r3
   322d6:	4b90      	ldr	r3, [pc, #576]	; (32518 <_http_client_handle_header+0x280>)
   322d8:	4798      	blx	r3
			return 0;
   322da:	2300      	movs	r3, #0
   322dc:	e114      	b.n	32508 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   322de:	4b8c      	ldr	r3, [pc, #560]	; (32510 <_http_client_handle_header+0x278>)
   322e0:	681c      	ldr	r4, [r3, #0]
   322e2:	4b8b      	ldr	r3, [pc, #556]	; (32510 <_http_client_handle_header+0x278>)
   322e4:	681b      	ldr	r3, [r3, #0]
   322e6:	0018      	movs	r0, r3
   322e8:	4b8c      	ldr	r3, [pc, #560]	; (3251c <_http_client_handle_header+0x284>)
   322ea:	4798      	blx	r3
   322ec:	0002      	movs	r2, r0
   322ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   322f0:	0021      	movs	r1, r4
   322f2:	0018      	movs	r0, r3
   322f4:	4b8a      	ldr	r3, [pc, #552]	; (32520 <_http_client_handle_header+0x288>)
   322f6:	4798      	blx	r3
   322f8:	1e03      	subs	r3, r0, #0
   322fa:	d15d      	bne.n	323b8 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   322fc:	4b84      	ldr	r3, [pc, #528]	; (32510 <_http_client_handle_header+0x278>)
   322fe:	681b      	ldr	r3, [r3, #0]
   32300:	0018      	movs	r0, r3
   32302:	4b86      	ldr	r3, [pc, #536]	; (3251c <_http_client_handle_header+0x284>)
   32304:	4798      	blx	r3
   32306:	0002      	movs	r2, r0
   32308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3230a:	189a      	adds	r2, r3, r2
   3230c:	687b      	ldr	r3, [r7, #4]
   3230e:	0011      	movs	r1, r2
   32310:	0018      	movs	r0, r3
   32312:	4b81      	ldr	r3, [pc, #516]	; (32518 <_http_client_handle_header+0x280>)
   32314:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32316:	687b      	ldr	r3, [r7, #4]
   32318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3231a:	2b00      	cmp	r3, #0
   3231c:	d046      	beq.n	323ac <_http_client_handle_header+0x114>
   3231e:	687b      	ldr	r3, [r7, #4]
   32320:	22e4      	movs	r2, #228	; 0xe4
   32322:	5a9b      	ldrh	r3, [r3, r2]
   32324:	2b00      	cmp	r3, #0
   32326:	d041      	beq.n	323ac <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32328:	687b      	ldr	r3, [r7, #4]
   3232a:	22dc      	movs	r2, #220	; 0xdc
   3232c:	589b      	ldr	r3, [r3, r2]
   3232e:	2b00      	cmp	r3, #0
   32330:	da19      	bge.n	32366 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   32332:	687b      	ldr	r3, [r7, #4]
   32334:	22e4      	movs	r2, #228	; 0xe4
   32336:	5a9a      	ldrh	r2, [r3, r2]
   32338:	230c      	movs	r3, #12
   3233a:	18fb      	adds	r3, r7, r3
   3233c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   3233e:	230c      	movs	r3, #12
   32340:	18fb      	adds	r3, r7, r3
   32342:	2201      	movs	r2, #1
   32344:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   32346:	687b      	ldr	r3, [r7, #4]
   32348:	22e0      	movs	r2, #224	; 0xe0
   3234a:	2100      	movs	r1, #0
   3234c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   3234e:	230c      	movs	r3, #12
   32350:	18fb      	adds	r3, r7, r3
   32352:	2200      	movs	r2, #0
   32354:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32356:	687b      	ldr	r3, [r7, #4]
   32358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3235a:	220c      	movs	r2, #12
   3235c:	18ba      	adds	r2, r7, r2
   3235e:	6878      	ldr	r0, [r7, #4]
   32360:	2102      	movs	r1, #2
   32362:	4798      	blx	r3
   32364:	e022      	b.n	323ac <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   32366:	687b      	ldr	r3, [r7, #4]
   32368:	22dc      	movs	r2, #220	; 0xdc
   3236a:	589a      	ldr	r2, [r3, r2]
   3236c:	687b      	ldr	r3, [r7, #4]
   3236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32370:	429a      	cmp	r2, r3
   32372:	dd1b      	ble.n	323ac <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32374:	687b      	ldr	r3, [r7, #4]
   32376:	22e4      	movs	r2, #228	; 0xe4
   32378:	5a9a      	ldrh	r2, [r3, r2]
   3237a:	230c      	movs	r3, #12
   3237c:	18fb      	adds	r3, r7, r3
   3237e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32380:	687b      	ldr	r3, [r7, #4]
   32382:	22dc      	movs	r2, #220	; 0xdc
   32384:	589b      	ldr	r3, [r3, r2]
   32386:	001a      	movs	r2, r3
   32388:	230c      	movs	r3, #12
   3238a:	18fb      	adds	r3, r7, r3
   3238c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3238e:	230c      	movs	r3, #12
   32390:	18fb      	adds	r3, r7, r3
   32392:	2200      	movs	r2, #0
   32394:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32396:	687b      	ldr	r3, [r7, #4]
   32398:	22e0      	movs	r2, #224	; 0xe0
   3239a:	2100      	movs	r1, #0
   3239c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3239e:	687b      	ldr	r3, [r7, #4]
   323a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   323a2:	220c      	movs	r2, #12
   323a4:	18ba      	adds	r2, r7, r2
   323a6:	6878      	ldr	r0, [r7, #4]
   323a8:	2102      	movs	r1, #2
   323aa:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   323ac:	687b      	ldr	r3, [r7, #4]
   323ae:	22d8      	movs	r2, #216	; 0xd8
   323b0:	2101      	movs	r1, #1
   323b2:	5099      	str	r1, [r3, r2]
			return 1;
   323b4:	2301      	movs	r3, #1
   323b6:	e0a7      	b.n	32508 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   323b8:	495a      	ldr	r1, [pc, #360]	; (32524 <_http_client_handle_header+0x28c>)
   323ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323bc:	2210      	movs	r2, #16
   323be:	0018      	movs	r0, r3
   323c0:	4b57      	ldr	r3, [pc, #348]	; (32520 <_http_client_handle_header+0x288>)
   323c2:	4798      	blx	r3
   323c4:	1e03      	subs	r3, r0, #0
   323c6:	d109      	bne.n	323dc <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   323c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323ca:	3310      	adds	r3, #16
   323cc:	0018      	movs	r0, r3
   323ce:	4b56      	ldr	r3, [pc, #344]	; (32528 <_http_client_handle_header+0x290>)
   323d0:	4798      	blx	r3
   323d2:	0001      	movs	r1, r0
   323d4:	687b      	ldr	r3, [r7, #4]
   323d6:	22dc      	movs	r2, #220	; 0xdc
   323d8:	5099      	str	r1, [r3, r2]
   323da:	e08b      	b.n	324f4 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   323dc:	4953      	ldr	r1, [pc, #332]	; (3252c <_http_client_handle_header+0x294>)
   323de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323e0:	2213      	movs	r2, #19
   323e2:	0018      	movs	r0, r3
   323e4:	4b4e      	ldr	r3, [pc, #312]	; (32520 <_http_client_handle_header+0x288>)
   323e6:	4798      	blx	r3
   323e8:	1e03      	subs	r3, r0, #0
   323ea:	d127      	bne.n	3243c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   323ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   323ee:	3313      	adds	r3, #19
   323f0:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   323f2:	e01e      	b.n	32432 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   323f4:	6a3b      	ldr	r3, [r7, #32]
   323f6:	781b      	ldrb	r3, [r3, #0]
   323f8:	2b20      	cmp	r3, #32
   323fa:	d103      	bne.n	32404 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   323fc:	6a3b      	ldr	r3, [r7, #32]
   323fe:	3301      	adds	r3, #1
   32400:	623b      	str	r3, [r7, #32]
   32402:	e016      	b.n	32432 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32404:	6a3b      	ldr	r3, [r7, #32]
   32406:	781b      	ldrb	r3, [r3, #0]
   32408:	2b43      	cmp	r3, #67	; 0x43
   3240a:	d003      	beq.n	32414 <_http_client_handle_header+0x17c>
   3240c:	6a3b      	ldr	r3, [r7, #32]
   3240e:	781b      	ldrb	r3, [r3, #0]
   32410:	2b63      	cmp	r3, #99	; 0x63
   32412:	d105      	bne.n	32420 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32414:	687b      	ldr	r3, [r7, #4]
   32416:	21cc      	movs	r1, #204	; 0xcc
   32418:	2201      	movs	r2, #1
   3241a:	4252      	negs	r2, r2
   3241c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   3241e:	e069      	b.n	324f4 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32420:	2386      	movs	r3, #134	; 0x86
   32422:	425a      	negs	r2, r3
   32424:	687b      	ldr	r3, [r7, #4]
   32426:	0011      	movs	r1, r2
   32428:	0018      	movs	r0, r3
   3242a:	4b41      	ldr	r3, [pc, #260]	; (32530 <_http_client_handle_header+0x298>)
   3242c:	4798      	blx	r3
					return 0;
   3242e:	2300      	movs	r3, #0
   32430:	e06a      	b.n	32508 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32432:	69ba      	ldr	r2, [r7, #24]
   32434:	6a3b      	ldr	r3, [r7, #32]
   32436:	429a      	cmp	r2, r3
   32438:	d8dc      	bhi.n	323f4 <_http_client_handle_header+0x15c>
   3243a:	e05b      	b.n	324f4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   3243c:	493d      	ldr	r1, [pc, #244]	; (32534 <_http_client_handle_header+0x29c>)
   3243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32440:	220c      	movs	r2, #12
   32442:	0018      	movs	r0, r3
   32444:	4b36      	ldr	r3, [pc, #216]	; (32520 <_http_client_handle_header+0x288>)
   32446:	4798      	blx	r3
   32448:	1e03      	subs	r3, r0, #0
   3244a:	d126      	bne.n	3249a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   3244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3244e:	330c      	adds	r3, #12
   32450:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32452:	e01d      	b.n	32490 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32454:	69fb      	ldr	r3, [r7, #28]
   32456:	781b      	ldrb	r3, [r3, #0]
   32458:	2b20      	cmp	r3, #32
   3245a:	d103      	bne.n	32464 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3245c:	69fb      	ldr	r3, [r7, #28]
   3245e:	3301      	adds	r3, #1
   32460:	61fb      	str	r3, [r7, #28]
   32462:	e015      	b.n	32490 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32464:	69fb      	ldr	r3, [r7, #28]
   32466:	781b      	ldrb	r3, [r3, #0]
   32468:	2b4b      	cmp	r3, #75	; 0x4b
   3246a:	d003      	beq.n	32474 <_http_client_handle_header+0x1dc>
   3246c:	69fb      	ldr	r3, [r7, #28]
   3246e:	781b      	ldrb	r3, [r3, #0]
   32470:	2b6b      	cmp	r3, #107	; 0x6b
   32472:	d106      	bne.n	32482 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32474:	687b      	ldr	r3, [r7, #4]
   32476:	2241      	movs	r2, #65	; 0x41
   32478:	5c99      	ldrb	r1, [r3, r2]
   3247a:	2002      	movs	r0, #2
   3247c:	4301      	orrs	r1, r0
   3247e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32480:	e038      	b.n	324f4 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32482:	687b      	ldr	r3, [r7, #4]
   32484:	2241      	movs	r2, #65	; 0x41
   32486:	5c99      	ldrb	r1, [r3, r2]
   32488:	2002      	movs	r0, #2
   3248a:	4381      	bics	r1, r0
   3248c:	5499      	strb	r1, [r3, r2]
				break;
   3248e:	e031      	b.n	324f4 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32490:	69ba      	ldr	r2, [r7, #24]
   32492:	69fb      	ldr	r3, [r7, #28]
   32494:	429a      	cmp	r2, r3
   32496:	d8dd      	bhi.n	32454 <_http_client_handle_header+0x1bc>
   32498:	e02c      	b.n	324f4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   3249a:	4927      	ldr	r1, [pc, #156]	; (32538 <_http_client_handle_header+0x2a0>)
   3249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3249e:	2205      	movs	r2, #5
   324a0:	0018      	movs	r0, r3
   324a2:	4b1f      	ldr	r3, [pc, #124]	; (32520 <_http_client_handle_header+0x288>)
   324a4:	4798      	blx	r3
   324a6:	1e03      	subs	r3, r0, #0
   324a8:	d124      	bne.n	324f4 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   324aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   324ac:	3309      	adds	r3, #9
   324ae:	0018      	movs	r0, r3
   324b0:	4b1d      	ldr	r3, [pc, #116]	; (32528 <_http_client_handle_header+0x290>)
   324b2:	4798      	blx	r3
   324b4:	0003      	movs	r3, r0
   324b6:	b299      	uxth	r1, r3
   324b8:	687b      	ldr	r3, [r7, #4]
   324ba:	22e4      	movs	r2, #228	; 0xe4
   324bc:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   324be:	687b      	ldr	r3, [r7, #4]
   324c0:	22dc      	movs	r2, #220	; 0xdc
   324c2:	2100      	movs	r1, #0
   324c4:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   324c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   324c8:	3305      	adds	r3, #5
   324ca:	781b      	ldrb	r3, [r3, #0]
   324cc:	2b31      	cmp	r3, #49	; 0x31
   324ce:	d804      	bhi.n	324da <_http_client_handle_header+0x242>
   324d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   324d2:	3307      	adds	r3, #7
   324d4:	781b      	ldrb	r3, [r3, #0]
   324d6:	2b30      	cmp	r3, #48	; 0x30
   324d8:	d906      	bls.n	324e8 <_http_client_handle_header+0x250>
				module->permanent = 1;
   324da:	687b      	ldr	r3, [r7, #4]
   324dc:	2241      	movs	r2, #65	; 0x41
   324de:	5c99      	ldrb	r1, [r3, r2]
   324e0:	2002      	movs	r0, #2
   324e2:	4301      	orrs	r1, r0
   324e4:	5499      	strb	r1, [r3, r2]
   324e6:	e005      	b.n	324f4 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   324e8:	687b      	ldr	r3, [r7, #4]
   324ea:	2241      	movs	r2, #65	; 0x41
   324ec:	5c99      	ldrb	r1, [r3, r2]
   324ee:	2002      	movs	r0, #2
   324f0:	4381      	bics	r1, r0
   324f2:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   324f4:	4b06      	ldr	r3, [pc, #24]	; (32510 <_http_client_handle_header+0x278>)
   324f6:	681b      	ldr	r3, [r3, #0]
   324f8:	0018      	movs	r0, r3
   324fa:	4b08      	ldr	r3, [pc, #32]	; (3251c <_http_client_handle_header+0x284>)
   324fc:	4798      	blx	r3
   324fe:	0002      	movs	r2, r0
   32500:	69bb      	ldr	r3, [r7, #24]
   32502:	189b      	adds	r3, r3, r2
   32504:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32506:	e6ce      	b.n	322a6 <_http_client_handle_header+0xe>
	}
}
   32508:	0018      	movs	r0, r3
   3250a:	46bd      	mov	sp, r7
   3250c:	b00b      	add	sp, #44	; 0x2c
   3250e:	bd90      	pop	{r4, r7, pc}
   32510:	2000012c 	.word	0x2000012c
   32514:	000357ad 	.word	0x000357ad
   32518:	000328fd 	.word	0x000328fd
   3251c:	0003572f 	.word	0x0003572f
   32520:	0003573d 	.word	0x0003573d
   32524:	0003c438 	.word	0x0003c438
   32528:	000352c3 	.word	0x000352c3
   3252c:	0003c45c 	.word	0x0003c45c
   32530:	00031915 	.word	0x00031915
   32534:	0003c470 	.word	0x0003c470
   32538:	0003c480 	.word	0x0003c480

0003253c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   3253c:	b580      	push	{r7, lr}
   3253e:	b088      	sub	sp, #32
   32540:	af00      	add	r7, sp, #0
   32542:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32544:	687b      	ldr	r3, [r7, #4]
   32546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32548:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   3254a:	2300      	movs	r3, #0
   3254c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   3254e:	687b      	ldr	r3, [r7, #4]
   32550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32552:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32554:	687b      	ldr	r3, [r7, #4]
   32556:	22e0      	movs	r2, #224	; 0xe0
   32558:	589b      	ldr	r3, [r3, r2]
   3255a:	2b00      	cmp	r3, #0
   3255c:	db71      	blt.n	32642 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   3255e:	687b      	ldr	r3, [r7, #4]
   32560:	22e0      	movs	r2, #224	; 0xe0
   32562:	589b      	ldr	r3, [r3, r2]
   32564:	2b00      	cmp	r3, #0
   32566:	d134      	bne.n	325d2 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32568:	687b      	ldr	r3, [r7, #4]
   3256a:	22d8      	movs	r2, #216	; 0xd8
   3256c:	2100      	movs	r1, #0
   3256e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32570:	687b      	ldr	r3, [r7, #4]
   32572:	22e4      	movs	r2, #228	; 0xe4
   32574:	2100      	movs	r1, #0
   32576:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32578:	2308      	movs	r3, #8
   3257a:	18fb      	adds	r3, r7, r3
   3257c:	2201      	movs	r2, #1
   3257e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32580:	2308      	movs	r3, #8
   32582:	18fb      	adds	r3, r7, r3
   32584:	2200      	movs	r2, #0
   32586:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32588:	2308      	movs	r3, #8
   3258a:	18fb      	adds	r3, r7, r3
   3258c:	2200      	movs	r2, #0
   3258e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32590:	687b      	ldr	r3, [r7, #4]
   32592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32594:	2b00      	cmp	r3, #0
   32596:	d006      	beq.n	325a6 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32598:	687b      	ldr	r3, [r7, #4]
   3259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3259c:	2208      	movs	r2, #8
   3259e:	18ba      	adds	r2, r7, r2
   325a0:	6878      	ldr	r0, [r7, #4]
   325a2:	2103      	movs	r1, #3
   325a4:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   325a6:	687b      	ldr	r3, [r7, #4]
   325a8:	2241      	movs	r2, #65	; 0x41
   325aa:	5c9b      	ldrb	r3, [r3, r2]
   325ac:	2202      	movs	r2, #2
   325ae:	4013      	ands	r3, r2
   325b0:	b2db      	uxtb	r3, r3
   325b2:	2b00      	cmp	r3, #0
   325b4:	d105      	bne.n	325c2 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   325b6:	687b      	ldr	r3, [r7, #4]
   325b8:	2100      	movs	r1, #0
   325ba:	0018      	movs	r0, r3
   325bc:	4b62      	ldr	r3, [pc, #392]	; (32748 <_http_client_read_chuked_entity+0x20c>)
   325be:	4798      	blx	r3
					return;
   325c0:	e0bf      	b.n	32742 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   325c2:	697b      	ldr	r3, [r7, #20]
   325c4:	1c9a      	adds	r2, r3, #2
   325c6:	687b      	ldr	r3, [r7, #4]
   325c8:	0011      	movs	r1, r2
   325ca:	0018      	movs	r0, r3
   325cc:	4b5f      	ldr	r3, [pc, #380]	; (3274c <_http_client_read_chuked_entity+0x210>)
   325ce:	4798      	blx	r3
   325d0:	e0b2      	b.n	32738 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   325d2:	687b      	ldr	r3, [r7, #4]
   325d4:	22e0      	movs	r2, #224	; 0xe0
   325d6:	589a      	ldr	r2, [r3, r2]
   325d8:	69fb      	ldr	r3, [r7, #28]
   325da:	429a      	cmp	r2, r3
   325dc:	dd00      	ble.n	325e0 <_http_client_read_chuked_entity+0xa4>
   325de:	e0ab      	b.n	32738 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   325e0:	687b      	ldr	r3, [r7, #4]
   325e2:	22e0      	movs	r2, #224	; 0xe0
   325e4:	589b      	ldr	r3, [r3, r2]
   325e6:	001a      	movs	r2, r3
   325e8:	2308      	movs	r3, #8
   325ea:	18fb      	adds	r3, r7, r3
   325ec:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   325ee:	2308      	movs	r3, #8
   325f0:	18fb      	adds	r3, r7, r3
   325f2:	697a      	ldr	r2, [r7, #20]
   325f4:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   325f6:	2308      	movs	r3, #8
   325f8:	18fb      	adds	r3, r7, r3
   325fa:	2200      	movs	r2, #0
   325fc:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   325fe:	687b      	ldr	r3, [r7, #4]
   32600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32602:	2b00      	cmp	r3, #0
   32604:	d006      	beq.n	32614 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32606:	687b      	ldr	r3, [r7, #4]
   32608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3260a:	2208      	movs	r2, #8
   3260c:	18ba      	adds	r2, r7, r2
   3260e:	6878      	ldr	r0, [r7, #4]
   32610:	2103      	movs	r1, #3
   32612:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32614:	687b      	ldr	r3, [r7, #4]
   32616:	22e0      	movs	r2, #224	; 0xe0
   32618:	589b      	ldr	r3, [r3, r2]
   3261a:	3302      	adds	r3, #2
   3261c:	697a      	ldr	r2, [r7, #20]
   3261e:	18d2      	adds	r2, r2, r3
   32620:	687b      	ldr	r3, [r7, #4]
   32622:	0011      	movs	r1, r2
   32624:	0018      	movs	r0, r3
   32626:	4b49      	ldr	r3, [pc, #292]	; (3274c <_http_client_read_chuked_entity+0x210>)
   32628:	4798      	blx	r3
				length = (int)module->recved_size;
   3262a:	687b      	ldr	r3, [r7, #4]
   3262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3262e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32630:	687b      	ldr	r3, [r7, #4]
   32632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32634:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32636:	687b      	ldr	r3, [r7, #4]
   32638:	21e0      	movs	r1, #224	; 0xe0
   3263a:	2201      	movs	r2, #1
   3263c:	4252      	negs	r2, r2
   3263e:	505a      	str	r2, [r3, r1]
   32640:	e07a      	b.n	32738 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32642:	687b      	ldr	r3, [r7, #4]
   32644:	22e0      	movs	r2, #224	; 0xe0
   32646:	2100      	movs	r1, #0
   32648:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   3264a:	e05a      	b.n	32702 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   3264c:	697b      	ldr	r3, [r7, #20]
   3264e:	781b      	ldrb	r3, [r3, #0]
   32650:	2b0a      	cmp	r3, #10
   32652:	d106      	bne.n	32662 <_http_client_read_chuked_entity+0x126>
					buffer++;
   32654:	697b      	ldr	r3, [r7, #20]
   32656:	3301      	adds	r3, #1
   32658:	617b      	str	r3, [r7, #20]
					length--;
   3265a:	69fb      	ldr	r3, [r7, #28]
   3265c:	3b01      	subs	r3, #1
   3265e:	61fb      	str	r3, [r7, #28]
					break;
   32660:	e052      	b.n	32708 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32662:	69bb      	ldr	r3, [r7, #24]
   32664:	2b00      	cmp	r3, #0
   32666:	d145      	bne.n	326f4 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32668:	697b      	ldr	r3, [r7, #20]
   3266a:	781b      	ldrb	r3, [r3, #0]
   3266c:	2b2f      	cmp	r3, #47	; 0x2f
   3266e:	d910      	bls.n	32692 <_http_client_read_chuked_entity+0x156>
   32670:	697b      	ldr	r3, [r7, #20]
   32672:	781b      	ldrb	r3, [r3, #0]
   32674:	2b39      	cmp	r3, #57	; 0x39
   32676:	d80c      	bhi.n	32692 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32678:	687b      	ldr	r3, [r7, #4]
   3267a:	22e0      	movs	r2, #224	; 0xe0
   3267c:	589b      	ldr	r3, [r3, r2]
   3267e:	011b      	lsls	r3, r3, #4
   32680:	697a      	ldr	r2, [r7, #20]
   32682:	7812      	ldrb	r2, [r2, #0]
   32684:	189b      	adds	r3, r3, r2
   32686:	3b30      	subs	r3, #48	; 0x30
   32688:	001a      	movs	r2, r3
   3268a:	687b      	ldr	r3, [r7, #4]
   3268c:	21e0      	movs	r1, #224	; 0xe0
   3268e:	505a      	str	r2, [r3, r1]
   32690:	e031      	b.n	326f6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32692:	697b      	ldr	r3, [r7, #20]
   32694:	781b      	ldrb	r3, [r3, #0]
   32696:	2b60      	cmp	r3, #96	; 0x60
   32698:	d910      	bls.n	326bc <_http_client_read_chuked_entity+0x180>
   3269a:	697b      	ldr	r3, [r7, #20]
   3269c:	781b      	ldrb	r3, [r3, #0]
   3269e:	2b66      	cmp	r3, #102	; 0x66
   326a0:	d80c      	bhi.n	326bc <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   326a2:	687b      	ldr	r3, [r7, #4]
   326a4:	22e0      	movs	r2, #224	; 0xe0
   326a6:	589b      	ldr	r3, [r3, r2]
   326a8:	011b      	lsls	r3, r3, #4
   326aa:	697a      	ldr	r2, [r7, #20]
   326ac:	7812      	ldrb	r2, [r2, #0]
   326ae:	189b      	adds	r3, r3, r2
   326b0:	3b61      	subs	r3, #97	; 0x61
   326b2:	001a      	movs	r2, r3
   326b4:	687b      	ldr	r3, [r7, #4]
   326b6:	21e0      	movs	r1, #224	; 0xe0
   326b8:	505a      	str	r2, [r3, r1]
   326ba:	e01c      	b.n	326f6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   326bc:	697b      	ldr	r3, [r7, #20]
   326be:	781b      	ldrb	r3, [r3, #0]
   326c0:	2b40      	cmp	r3, #64	; 0x40
   326c2:	d910      	bls.n	326e6 <_http_client_read_chuked_entity+0x1aa>
   326c4:	697b      	ldr	r3, [r7, #20]
   326c6:	781b      	ldrb	r3, [r3, #0]
   326c8:	2b46      	cmp	r3, #70	; 0x46
   326ca:	d80c      	bhi.n	326e6 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   326cc:	687b      	ldr	r3, [r7, #4]
   326ce:	22e0      	movs	r2, #224	; 0xe0
   326d0:	589b      	ldr	r3, [r3, r2]
   326d2:	011b      	lsls	r3, r3, #4
   326d4:	697a      	ldr	r2, [r7, #20]
   326d6:	7812      	ldrb	r2, [r2, #0]
   326d8:	189b      	adds	r3, r3, r2
   326da:	3b41      	subs	r3, #65	; 0x41
   326dc:	001a      	movs	r2, r3
   326de:	687b      	ldr	r3, [r7, #4]
   326e0:	21e0      	movs	r1, #224	; 0xe0
   326e2:	505a      	str	r2, [r3, r1]
   326e4:	e007      	b.n	326f6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   326e6:	697b      	ldr	r3, [r7, #20]
   326e8:	781b      	ldrb	r3, [r3, #0]
   326ea:	2b3b      	cmp	r3, #59	; 0x3b
   326ec:	d103      	bne.n	326f6 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   326ee:	2301      	movs	r3, #1
   326f0:	61bb      	str	r3, [r7, #24]
   326f2:	e000      	b.n	326f6 <_http_client_read_chuked_entity+0x1ba>
					continue;
   326f4:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   326f6:	697b      	ldr	r3, [r7, #20]
   326f8:	3301      	adds	r3, #1
   326fa:	617b      	str	r3, [r7, #20]
   326fc:	69fb      	ldr	r3, [r7, #28]
   326fe:	3b01      	subs	r3, #1
   32700:	61fb      	str	r3, [r7, #28]
   32702:	69fb      	ldr	r3, [r7, #28]
   32704:	2b00      	cmp	r3, #0
   32706:	dca1      	bgt.n	3264c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32708:	687b      	ldr	r3, [r7, #4]
   3270a:	22e0      	movs	r2, #224	; 0xe0
   3270c:	589a      	ldr	r2, [r3, r2]
   3270e:	687b      	ldr	r3, [r7, #4]
   32710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32712:	429a      	cmp	r2, r3
   32714:	dd07      	ble.n	32726 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32716:	238b      	movs	r3, #139	; 0x8b
   32718:	425a      	negs	r2, r3
   3271a:	687b      	ldr	r3, [r7, #4]
   3271c:	0011      	movs	r1, r2
   3271e:	0018      	movs	r0, r3
   32720:	4b09      	ldr	r3, [pc, #36]	; (32748 <_http_client_read_chuked_entity+0x20c>)
   32722:	4798      	blx	r3
				return;
   32724:	e00d      	b.n	32742 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32726:	69fb      	ldr	r3, [r7, #28]
   32728:	2b00      	cmp	r3, #0
   3272a:	d105      	bne.n	32738 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   3272c:	687b      	ldr	r3, [r7, #4]
   3272e:	21e0      	movs	r1, #224	; 0xe0
   32730:	2201      	movs	r2, #1
   32732:	4252      	negs	r2, r2
   32734:	505a      	str	r2, [r3, r1]
				return;
   32736:	e004      	b.n	32742 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32738:	687b      	ldr	r3, [r7, #4]
   3273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3273c:	2b00      	cmp	r3, #0
   3273e:	d000      	beq.n	32742 <_http_client_read_chuked_entity+0x206>
   32740:	e708      	b.n	32554 <_http_client_read_chuked_entity+0x18>
}
   32742:	46bd      	mov	sp, r7
   32744:	b008      	add	sp, #32
   32746:	bd80      	pop	{r7, pc}
   32748:	00031915 	.word	0x00031915
   3274c:	000328fd 	.word	0x000328fd

00032750 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32750:	b580      	push	{r7, lr}
   32752:	b086      	sub	sp, #24
   32754:	af00      	add	r7, sp, #0
   32756:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32758:	687b      	ldr	r3, [r7, #4]
   3275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3275c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   3275e:	687b      	ldr	r3, [r7, #4]
   32760:	22dc      	movs	r2, #220	; 0xdc
   32762:	589b      	ldr	r3, [r3, r2]
   32764:	2b00      	cmp	r3, #0
   32766:	db58      	blt.n	3281a <_http_client_handle_entity+0xca>
   32768:	687b      	ldr	r3, [r7, #4]
   3276a:	22dc      	movs	r2, #220	; 0xdc
   3276c:	589a      	ldr	r2, [r3, r2]
   3276e:	687b      	ldr	r3, [r7, #4]
   32770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32772:	429a      	cmp	r2, r3
   32774:	dc51      	bgt.n	3281a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32776:	687b      	ldr	r3, [r7, #4]
   32778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3277a:	0019      	movs	r1, r3
   3277c:	687b      	ldr	r3, [r7, #4]
   3277e:	22dc      	movs	r2, #220	; 0xdc
   32780:	589b      	ldr	r3, [r3, r2]
   32782:	4299      	cmp	r1, r3
   32784:	da00      	bge.n	32788 <_http_client_handle_entity+0x38>
   32786:	e0a9      	b.n	328dc <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32788:	687b      	ldr	r3, [r7, #4]
   3278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3278c:	2b00      	cmp	r3, #0
   3278e:	d020      	beq.n	327d2 <_http_client_handle_entity+0x82>
   32790:	687b      	ldr	r3, [r7, #4]
   32792:	22e4      	movs	r2, #228	; 0xe4
   32794:	5a9b      	ldrh	r3, [r3, r2]
   32796:	2b00      	cmp	r3, #0
   32798:	d01b      	beq.n	327d2 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   3279a:	687b      	ldr	r3, [r7, #4]
   3279c:	22e4      	movs	r2, #228	; 0xe4
   3279e:	5a9a      	ldrh	r2, [r3, r2]
   327a0:	2308      	movs	r3, #8
   327a2:	18fb      	adds	r3, r7, r3
   327a4:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   327a6:	2308      	movs	r3, #8
   327a8:	18fb      	adds	r3, r7, r3
   327aa:	2200      	movs	r2, #0
   327ac:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   327ae:	687b      	ldr	r3, [r7, #4]
   327b0:	22dc      	movs	r2, #220	; 0xdc
   327b2:	589b      	ldr	r3, [r3, r2]
   327b4:	001a      	movs	r2, r3
   327b6:	2308      	movs	r3, #8
   327b8:	18fb      	adds	r3, r7, r3
   327ba:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   327bc:	2308      	movs	r3, #8
   327be:	18fb      	adds	r3, r7, r3
   327c0:	697a      	ldr	r2, [r7, #20]
   327c2:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   327c4:	687b      	ldr	r3, [r7, #4]
   327c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327c8:	2208      	movs	r2, #8
   327ca:	18ba      	adds	r2, r7, r2
   327cc:	6878      	ldr	r0, [r7, #4]
   327ce:	2102      	movs	r1, #2
   327d0:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   327d2:	687b      	ldr	r3, [r7, #4]
   327d4:	22d8      	movs	r2, #216	; 0xd8
   327d6:	2100      	movs	r1, #0
   327d8:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   327da:	687b      	ldr	r3, [r7, #4]
   327dc:	22e4      	movs	r2, #228	; 0xe4
   327de:	2100      	movs	r1, #0
   327e0:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   327e2:	687b      	ldr	r3, [r7, #4]
   327e4:	2241      	movs	r2, #65	; 0x41
   327e6:	5c9b      	ldrb	r3, [r3, r2]
   327e8:	2202      	movs	r2, #2
   327ea:	4013      	ands	r3, r2
   327ec:	b2db      	uxtb	r3, r3
   327ee:	2b00      	cmp	r3, #0
   327f0:	d105      	bne.n	327fe <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   327f2:	687b      	ldr	r3, [r7, #4]
   327f4:	2100      	movs	r1, #0
   327f6:	0018      	movs	r0, r3
   327f8:	4b3b      	ldr	r3, [pc, #236]	; (328e8 <_http_client_handle_entity+0x198>)
   327fa:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   327fc:	e06e      	b.n	328dc <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   327fe:	687b      	ldr	r3, [r7, #4]
   32800:	22dc      	movs	r2, #220	; 0xdc
   32802:	589b      	ldr	r3, [r3, r2]
   32804:	001a      	movs	r2, r3
   32806:	697b      	ldr	r3, [r7, #20]
   32808:	189a      	adds	r2, r3, r2
   3280a:	687b      	ldr	r3, [r7, #4]
   3280c:	0011      	movs	r1, r2
   3280e:	0018      	movs	r0, r3
   32810:	4b36      	ldr	r3, [pc, #216]	; (328ec <_http_client_handle_entity+0x19c>)
   32812:	4798      	blx	r3
				return module->recved_size;
   32814:	687b      	ldr	r3, [r7, #4]
   32816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32818:	e061      	b.n	328de <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   3281a:	687b      	ldr	r3, [r7, #4]
   3281c:	22dc      	movs	r2, #220	; 0xdc
   3281e:	589b      	ldr	r3, [r3, r2]
   32820:	2b00      	cmp	r3, #0
   32822:	db57      	blt.n	328d4 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32824:	687b      	ldr	r3, [r7, #4]
   32826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32828:	2308      	movs	r3, #8
   3282a:	18fb      	adds	r3, r7, r3
   3282c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   3282e:	2308      	movs	r3, #8
   32830:	18fb      	adds	r3, r7, r3
   32832:	697a      	ldr	r2, [r7, #20]
   32834:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32836:	687b      	ldr	r3, [r7, #4]
   32838:	22e0      	movs	r2, #224	; 0xe0
   3283a:	589a      	ldr	r2, [r3, r2]
   3283c:	687b      	ldr	r3, [r7, #4]
   3283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32840:	18d2      	adds	r2, r2, r3
   32842:	687b      	ldr	r3, [r7, #4]
   32844:	21e0      	movs	r1, #224	; 0xe0
   32846:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32848:	687b      	ldr	r3, [r7, #4]
   3284a:	22dc      	movs	r2, #220	; 0xdc
   3284c:	589a      	ldr	r2, [r3, r2]
   3284e:	687b      	ldr	r3, [r7, #4]
   32850:	21e0      	movs	r1, #224	; 0xe0
   32852:	585b      	ldr	r3, [r3, r1]
   32854:	429a      	cmp	r2, r3
   32856:	dc0c      	bgt.n	32872 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32858:	687b      	ldr	r3, [r7, #4]
   3285a:	22d8      	movs	r2, #216	; 0xd8
   3285c:	2100      	movs	r1, #0
   3285e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32860:	687b      	ldr	r3, [r7, #4]
   32862:	22e4      	movs	r2, #228	; 0xe4
   32864:	2100      	movs	r1, #0
   32866:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32868:	2308      	movs	r3, #8
   3286a:	18fb      	adds	r3, r7, r3
   3286c:	2201      	movs	r2, #1
   3286e:	721a      	strb	r2, [r3, #8]
   32870:	e003      	b.n	3287a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32872:	2308      	movs	r3, #8
   32874:	18fb      	adds	r3, r7, r3
   32876:	2200      	movs	r2, #0
   32878:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   3287a:	687b      	ldr	r3, [r7, #4]
   3287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3287e:	2b00      	cmp	r3, #0
   32880:	d006      	beq.n	32890 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32882:	687b      	ldr	r3, [r7, #4]
   32884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32886:	2208      	movs	r2, #8
   32888:	18ba      	adds	r2, r7, r2
   3288a:	6878      	ldr	r0, [r7, #4]
   3288c:	2103      	movs	r1, #3
   3288e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32890:	2308      	movs	r3, #8
   32892:	18fb      	adds	r3, r7, r3
   32894:	7a1b      	ldrb	r3, [r3, #8]
   32896:	2b01      	cmp	r3, #1
   32898:	d112      	bne.n	328c0 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   3289a:	687b      	ldr	r3, [r7, #4]
   3289c:	2241      	movs	r2, #65	; 0x41
   3289e:	5c9b      	ldrb	r3, [r3, r2]
   328a0:	2202      	movs	r2, #2
   328a2:	4013      	ands	r3, r2
   328a4:	b2db      	uxtb	r3, r3
   328a6:	2b00      	cmp	r3, #0
   328a8:	d10a      	bne.n	328c0 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   328aa:	4b11      	ldr	r3, [pc, #68]	; (328f0 <_http_client_handle_entity+0x1a0>)
   328ac:	0018      	movs	r0, r3
   328ae:	4b11      	ldr	r3, [pc, #68]	; (328f4 <_http_client_handle_entity+0x1a4>)
   328b0:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   328b2:	687b      	ldr	r3, [r7, #4]
   328b4:	2100      	movs	r1, #0
   328b6:	0018      	movs	r0, r3
   328b8:	4b0b      	ldr	r3, [pc, #44]	; (328e8 <_http_client_handle_entity+0x198>)
   328ba:	4798      	blx	r3
					return 0;
   328bc:	2300      	movs	r3, #0
   328be:	e00e      	b.n	328de <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   328c0:	687b      	ldr	r3, [r7, #4]
   328c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   328c4:	697a      	ldr	r2, [r7, #20]
   328c6:	18d2      	adds	r2, r2, r3
   328c8:	687b      	ldr	r3, [r7, #4]
   328ca:	0011      	movs	r1, r2
   328cc:	0018      	movs	r0, r3
   328ce:	4b07      	ldr	r3, [pc, #28]	; (328ec <_http_client_handle_entity+0x19c>)
   328d0:	4798      	blx	r3
   328d2:	e003      	b.n	328dc <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   328d4:	687b      	ldr	r3, [r7, #4]
   328d6:	0018      	movs	r0, r3
   328d8:	4b07      	ldr	r3, [pc, #28]	; (328f8 <_http_client_handle_entity+0x1a8>)
   328da:	4798      	blx	r3
		}
	}

	return 0;
   328dc:	2300      	movs	r3, #0
}
   328de:	0018      	movs	r0, r3
   328e0:	46bd      	mov	sp, r7
   328e2:	b006      	add	sp, #24
   328e4:	bd80      	pop	{r7, pc}
   328e6:	46c0      	nop			; (mov r8, r8)
   328e8:	00031915 	.word	0x00031915
   328ec:	000328fd 	.word	0x000328fd
   328f0:	0003c488 	.word	0x0003c488
   328f4:	00035599 	.word	0x00035599
   328f8:	0003253d 	.word	0x0003253d

000328fc <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   328fc:	b580      	push	{r7, lr}
   328fe:	b084      	sub	sp, #16
   32900:	af00      	add	r7, sp, #0
   32902:	6078      	str	r0, [r7, #4]
   32904:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32906:	687b      	ldr	r3, [r7, #4]
   32908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3290a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   3290c:	687b      	ldr	r3, [r7, #4]
   3290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32910:	001a      	movs	r2, r3
   32912:	683b      	ldr	r3, [r7, #0]
   32914:	1ad2      	subs	r2, r2, r3
   32916:	68fb      	ldr	r3, [r7, #12]
   32918:	18d3      	adds	r3, r2, r3
   3291a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   3291c:	68bb      	ldr	r3, [r7, #8]
   3291e:	2b00      	cmp	r3, #0
   32920:	dd09      	ble.n	32936 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32922:	68ba      	ldr	r2, [r7, #8]
   32924:	6839      	ldr	r1, [r7, #0]
   32926:	68fb      	ldr	r3, [r7, #12]
   32928:	0018      	movs	r0, r3
   3292a:	4b06      	ldr	r3, [pc, #24]	; (32944 <_http_client_move_buffer+0x48>)
   3292c:	4798      	blx	r3
		module->recved_size = remain;
   3292e:	68ba      	ldr	r2, [r7, #8]
   32930:	687b      	ldr	r3, [r7, #4]
   32932:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32934:	e002      	b.n	3293c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32936:	687b      	ldr	r3, [r7, #4]
   32938:	2200      	movs	r2, #0
   3293a:	645a      	str	r2, [r3, #68]	; 0x44
}
   3293c:	46c0      	nop			; (mov r8, r8)
   3293e:	46bd      	mov	sp, r7
   32940:	b004      	add	sp, #16
   32942:	bd80      	pop	{r7, pc}
   32944:	00035353 	.word	0x00035353

00032948 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32948:	b580      	push	{r7, lr}
   3294a:	b084      	sub	sp, #16
   3294c:	af00      	add	r7, sp, #0
   3294e:	60f8      	str	r0, [r7, #12]
   32950:	60b9      	str	r1, [r7, #8]
   32952:	607a      	str	r2, [r7, #4]
   32954:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32956:	68fb      	ldr	r3, [r7, #12]
   32958:	687a      	ldr	r2, [r7, #4]
   3295a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   3295c:	68fb      	ldr	r3, [r7, #12]
   3295e:	68ba      	ldr	r2, [r7, #8]
   32960:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32962:	68fb      	ldr	r3, [r7, #12]
   32964:	2200      	movs	r2, #0
   32966:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32968:	68fb      	ldr	r3, [r7, #12]
   3296a:	683a      	ldr	r2, [r7, #0]
   3296c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   3296e:	68fb      	ldr	r3, [r7, #12]
   32970:	69ba      	ldr	r2, [r7, #24]
   32972:	60da      	str	r2, [r3, #12]
}
   32974:	46c0      	nop			; (mov r8, r8)
   32976:	46bd      	mov	sp, r7
   32978:	b004      	add	sp, #16
   3297a:	bd80      	pop	{r7, pc}

0003297c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   3297c:	b580      	push	{r7, lr}
   3297e:	b084      	sub	sp, #16
   32980:	af00      	add	r7, sp, #0
   32982:	6078      	str	r0, [r7, #4]
   32984:	000a      	movs	r2, r1
   32986:	1cfb      	adds	r3, r7, #3
   32988:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3298a:	687b      	ldr	r3, [r7, #4]
   3298c:	681a      	ldr	r2, [r3, #0]
   3298e:	687b      	ldr	r3, [r7, #4]
   32990:	685b      	ldr	r3, [r3, #4]
   32992:	1ad3      	subs	r3, r2, r3
   32994:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32996:	68fb      	ldr	r3, [r7, #12]
   32998:	2b00      	cmp	r3, #0
   3299a:	dc03      	bgt.n	329a4 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   3299c:	687b      	ldr	r3, [r7, #4]
   3299e:	0018      	movs	r0, r3
   329a0:	4b08      	ldr	r3, [pc, #32]	; (329c4 <stream_writer_send_8+0x48>)
   329a2:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   329a4:	687b      	ldr	r3, [r7, #4]
   329a6:	6919      	ldr	r1, [r3, #16]
   329a8:	687b      	ldr	r3, [r7, #4]
   329aa:	685b      	ldr	r3, [r3, #4]
   329ac:	1c58      	adds	r0, r3, #1
   329ae:	687a      	ldr	r2, [r7, #4]
   329b0:	6050      	str	r0, [r2, #4]
   329b2:	18cb      	adds	r3, r1, r3
   329b4:	1cfa      	adds	r2, r7, #3
   329b6:	7812      	ldrb	r2, [r2, #0]
   329b8:	701a      	strb	r2, [r3, #0]
}
   329ba:	46c0      	nop			; (mov r8, r8)
   329bc:	46bd      	mov	sp, r7
   329be:	b004      	add	sp, #16
   329c0:	bd80      	pop	{r7, pc}
   329c2:	46c0      	nop			; (mov r8, r8)
   329c4:	00032a05 	.word	0x00032a05

000329c8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   329c8:	b580      	push	{r7, lr}
   329ca:	b084      	sub	sp, #16
   329cc:	af00      	add	r7, sp, #0
   329ce:	60f8      	str	r0, [r7, #12]
   329d0:	60b9      	str	r1, [r7, #8]
   329d2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   329d4:	e00d      	b.n	329f2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   329d6:	68bb      	ldr	r3, [r7, #8]
   329d8:	781b      	ldrb	r3, [r3, #0]
   329da:	b25a      	sxtb	r2, r3
   329dc:	68fb      	ldr	r3, [r7, #12]
   329de:	0011      	movs	r1, r2
   329e0:	0018      	movs	r0, r3
   329e2:	4b07      	ldr	r3, [pc, #28]	; (32a00 <stream_writer_send_buffer+0x38>)
   329e4:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   329e6:	687b      	ldr	r3, [r7, #4]
   329e8:	3b01      	subs	r3, #1
   329ea:	607b      	str	r3, [r7, #4]
   329ec:	68bb      	ldr	r3, [r7, #8]
   329ee:	3301      	adds	r3, #1
   329f0:	60bb      	str	r3, [r7, #8]
   329f2:	687b      	ldr	r3, [r7, #4]
   329f4:	2b00      	cmp	r3, #0
   329f6:	d1ee      	bne.n	329d6 <stream_writer_send_buffer+0xe>
	}
}
   329f8:	46c0      	nop			; (mov r8, r8)
   329fa:	46bd      	mov	sp, r7
   329fc:	b004      	add	sp, #16
   329fe:	bd80      	pop	{r7, pc}
   32a00:	0003297d 	.word	0x0003297d

00032a04 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   32a04:	b590      	push	{r4, r7, lr}
   32a06:	b083      	sub	sp, #12
   32a08:	af00      	add	r7, sp, #0
   32a0a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32a0c:	687b      	ldr	r3, [r7, #4]
   32a0e:	685b      	ldr	r3, [r3, #4]
   32a10:	2b00      	cmp	r3, #0
   32a12:	d00c      	beq.n	32a2e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32a14:	687b      	ldr	r3, [r7, #4]
   32a16:	689c      	ldr	r4, [r3, #8]
   32a18:	687b      	ldr	r3, [r7, #4]
   32a1a:	68d8      	ldr	r0, [r3, #12]
   32a1c:	687b      	ldr	r3, [r7, #4]
   32a1e:	6919      	ldr	r1, [r3, #16]
   32a20:	687b      	ldr	r3, [r7, #4]
   32a22:	685b      	ldr	r3, [r3, #4]
   32a24:	001a      	movs	r2, r3
   32a26:	47a0      	blx	r4
		writer->written = 0;
   32a28:	687b      	ldr	r3, [r7, #4]
   32a2a:	2200      	movs	r2, #0
   32a2c:	605a      	str	r2, [r3, #4]
	}
}
   32a2e:	46c0      	nop			; (mov r8, r8)
   32a30:	46bd      	mov	sp, r7
   32a32:	b003      	add	sp, #12
   32a34:	bd90      	pop	{r4, r7, pc}
	...

00032a38 <system_cpu_clock_get_hz>:
{
   32a38:	b580      	push	{r7, lr}
   32a3a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32a3c:	2000      	movs	r0, #0
   32a3e:	4b05      	ldr	r3, [pc, #20]	; (32a54 <system_cpu_clock_get_hz+0x1c>)
   32a40:	4798      	blx	r3
   32a42:	0002      	movs	r2, r0
   32a44:	4b04      	ldr	r3, [pc, #16]	; (32a58 <system_cpu_clock_get_hz+0x20>)
   32a46:	7a1b      	ldrb	r3, [r3, #8]
   32a48:	b2db      	uxtb	r3, r3
   32a4a:	40da      	lsrs	r2, r3
   32a4c:	0013      	movs	r3, r2
}
   32a4e:	0018      	movs	r0, r3
   32a50:	46bd      	mov	sp, r7
   32a52:	bd80      	pop	{r7, pc}
   32a54:	0002a419 	.word	0x0002a419
   32a58:	40000400 	.word	0x40000400

00032a5c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   32a5c:	b580      	push	{r7, lr}
   32a5e:	b084      	sub	sp, #16
   32a60:	af00      	add	r7, sp, #0
   32a62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   32a64:	687b      	ldr	r3, [r7, #4]
   32a66:	681b      	ldr	r3, [r3, #0]
   32a68:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   32a6a:	46c0      	nop			; (mov r8, r8)
   32a6c:	68fb      	ldr	r3, [r7, #12]
   32a6e:	689b      	ldr	r3, [r3, #8]
   32a70:	2202      	movs	r2, #2
   32a72:	4013      	ands	r3, r2
   32a74:	d1fa      	bne.n	32a6c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   32a76:	68fb      	ldr	r3, [r7, #12]
   32a78:	681b      	ldr	r3, [r3, #0]
   32a7a:	2202      	movs	r2, #2
   32a7c:	431a      	orrs	r2, r3
   32a7e:	68fb      	ldr	r3, [r7, #12]
   32a80:	601a      	str	r2, [r3, #0]
}
   32a82:	46c0      	nop			; (mov r8, r8)
   32a84:	46bd      	mov	sp, r7
   32a86:	b004      	add	sp, #16
   32a88:	bd80      	pop	{r7, pc}
	...

00032a8c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   32a8c:	b580      	push	{r7, lr}
   32a8e:	b082      	sub	sp, #8
   32a90:	af00      	add	r7, sp, #0
   32a92:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   32a94:	4b04      	ldr	r3, [pc, #16]	; (32aa8 <sw_timer_tcc_callback+0x1c>)
   32a96:	681b      	ldr	r3, [r3, #0]
   32a98:	1c5a      	adds	r2, r3, #1
   32a9a:	4b03      	ldr	r3, [pc, #12]	; (32aa8 <sw_timer_tcc_callback+0x1c>)
   32a9c:	601a      	str	r2, [r3, #0]
}
   32a9e:	46c0      	nop			; (mov r8, r8)
   32aa0:	46bd      	mov	sp, r7
   32aa2:	b002      	add	sp, #8
   32aa4:	bd80      	pop	{r7, pc}
   32aa6:	46c0      	nop			; (mov r8, r8)
   32aa8:	20004720 	.word	0x20004720

00032aac <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   32aac:	b580      	push	{r7, lr}
   32aae:	b082      	sub	sp, #8
   32ab0:	af00      	add	r7, sp, #0
   32ab2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   32ab4:	687b      	ldr	r3, [r7, #4]
   32ab6:	2264      	movs	r2, #100	; 0x64
   32ab8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   32aba:	687b      	ldr	r3, [r7, #4]
   32abc:	2200      	movs	r2, #0
   32abe:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   32ac0:	687b      	ldr	r3, [r7, #4]
   32ac2:	2200      	movs	r2, #0
   32ac4:	705a      	strb	r2, [r3, #1]
}
   32ac6:	46c0      	nop			; (mov r8, r8)
   32ac8:	46bd      	mov	sp, r7
   32aca:	b002      	add	sp, #8
   32acc:	bd80      	pop	{r7, pc}
	...

00032ad0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   32ad0:	b590      	push	{r4, r7, lr}
   32ad2:	b0b1      	sub	sp, #196	; 0xc4
   32ad4:	af00      	add	r7, sp, #0
   32ad6:	6078      	str	r0, [r7, #4]
   32ad8:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   32ada:	230c      	movs	r3, #12
   32adc:	18fb      	adds	r3, r7, r3
   32ade:	4a2e      	ldr	r2, [pc, #184]	; (32b98 <sw_timer_init+0xc8>)
   32ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
   32ae2:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   32ae4:	683b      	ldr	r3, [r7, #0]
   32ae6:	885b      	ldrh	r3, [r3, #2]
   32ae8:	001a      	movs	r2, r3
   32aea:	687b      	ldr	r3, [r7, #4]
   32aec:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   32aee:	687b      	ldr	r3, [r7, #4]
   32af0:	3314      	adds	r3, #20
   32af2:	22bc      	movs	r2, #188	; 0xbc
   32af4:	18ba      	adds	r2, r7, r2
   32af6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   32af8:	683b      	ldr	r3, [r7, #0]
   32afa:	781b      	ldrb	r3, [r3, #0]
   32afc:	001a      	movs	r2, r3
   32afe:	230c      	movs	r3, #12
   32b00:	18fb      	adds	r3, r7, r3
   32b02:	0092      	lsls	r2, r2, #2
   32b04:	58d2      	ldr	r2, [r2, r3]
   32b06:	2318      	movs	r3, #24
   32b08:	18fb      	adds	r3, r7, r3
   32b0a:	0011      	movs	r1, r2
   32b0c:	0018      	movs	r0, r3
   32b0e:	4b23      	ldr	r3, [pc, #140]	; (32b9c <sw_timer_init+0xcc>)
   32b10:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   32b12:	4b23      	ldr	r3, [pc, #140]	; (32ba0 <sw_timer_init+0xd0>)
   32b14:	4798      	blx	r3
   32b16:	0004      	movs	r4, r0
   32b18:	683b      	ldr	r3, [r7, #0]
   32b1a:	885b      	ldrh	r3, [r3, #2]
   32b1c:	001a      	movs	r2, r3
   32b1e:	4b21      	ldr	r3, [pc, #132]	; (32ba4 <sw_timer_init+0xd4>)
   32b20:	0011      	movs	r1, r2
   32b22:	22fa      	movs	r2, #250	; 0xfa
   32b24:	0210      	lsls	r0, r2, #8
   32b26:	4798      	blx	r3
   32b28:	0003      	movs	r3, r0
   32b2a:	001a      	movs	r2, r3
   32b2c:	4b1e      	ldr	r3, [pc, #120]	; (32ba8 <sw_timer_init+0xd8>)
   32b2e:	0011      	movs	r1, r2
   32b30:	0020      	movs	r0, r4
   32b32:	4798      	blx	r3
   32b34:	0003      	movs	r3, r0
   32b36:	001a      	movs	r2, r3
   32b38:	2318      	movs	r3, #24
   32b3a:	18fb      	adds	r3, r7, r3
   32b3c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   32b3e:	2318      	movs	r3, #24
   32b40:	18fb      	adds	r3, r7, r3
   32b42:	2205      	movs	r2, #5
   32b44:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   32b46:	683b      	ldr	r3, [r7, #0]
   32b48:	781b      	ldrb	r3, [r3, #0]
   32b4a:	001a      	movs	r2, r3
   32b4c:	230c      	movs	r3, #12
   32b4e:	18fb      	adds	r3, r7, r3
   32b50:	0092      	lsls	r2, r2, #2
   32b52:	58d1      	ldr	r1, [r2, r3]
   32b54:	2318      	movs	r3, #24
   32b56:	18fa      	adds	r2, r7, r3
   32b58:	23bc      	movs	r3, #188	; 0xbc
   32b5a:	18fb      	adds	r3, r7, r3
   32b5c:	681b      	ldr	r3, [r3, #0]
   32b5e:	0018      	movs	r0, r3
   32b60:	4b12      	ldr	r3, [pc, #72]	; (32bac <sw_timer_init+0xdc>)
   32b62:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32b64:	683b      	ldr	r3, [r7, #0]
   32b66:	785b      	ldrb	r3, [r3, #1]
   32b68:	3308      	adds	r3, #8
   32b6a:	b2da      	uxtb	r2, r3
   32b6c:	4910      	ldr	r1, [pc, #64]	; (32bb0 <sw_timer_init+0xe0>)
   32b6e:	23bc      	movs	r3, #188	; 0xbc
   32b70:	18fb      	adds	r3, r7, r3
   32b72:	681b      	ldr	r3, [r3, #0]
   32b74:	0018      	movs	r0, r3
   32b76:	4b0f      	ldr	r3, [pc, #60]	; (32bb4 <sw_timer_init+0xe4>)
   32b78:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32b7a:	683b      	ldr	r3, [r7, #0]
   32b7c:	785b      	ldrb	r3, [r3, #1]
   32b7e:	3308      	adds	r3, #8
   32b80:	b2da      	uxtb	r2, r3
   32b82:	23bc      	movs	r3, #188	; 0xbc
   32b84:	18fb      	adds	r3, r7, r3
   32b86:	681b      	ldr	r3, [r3, #0]
   32b88:	0011      	movs	r1, r2
   32b8a:	0018      	movs	r0, r3
   32b8c:	4b0a      	ldr	r3, [pc, #40]	; (32bb8 <sw_timer_init+0xe8>)
   32b8e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   32b90:	46c0      	nop			; (mov r8, r8)
   32b92:	46bd      	mov	sp, r7
   32b94:	b031      	add	sp, #196	; 0xc4
   32b96:	bd90      	pop	{r4, r7, pc}
   32b98:	0003c4c8 	.word	0x0003c4c8
   32b9c:	0002a9b1 	.word	0x0002a9b1
   32ba0:	00032a39 	.word	0x00032a39
   32ba4:	00033149 	.word	0x00033149
   32ba8:	00033035 	.word	0x00033035
   32bac:	0002b00d 	.word	0x0002b00d
   32bb0:	00032a8d 	.word	0x00032a8d
   32bb4:	0002b425 	.word	0x0002b425
   32bb8:	0002b465 	.word	0x0002b465

00032bbc <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   32bbc:	b580      	push	{r7, lr}
   32bbe:	b084      	sub	sp, #16
   32bc0:	af00      	add	r7, sp, #0
   32bc2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   32bc4:	687b      	ldr	r3, [r7, #4]
   32bc6:	3314      	adds	r3, #20
   32bc8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   32bca:	68fb      	ldr	r3, [r7, #12]
   32bcc:	0018      	movs	r0, r3
   32bce:	4b03      	ldr	r3, [pc, #12]	; (32bdc <sw_timer_enable+0x20>)
   32bd0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   32bd2:	46c0      	nop			; (mov r8, r8)
   32bd4:	46bd      	mov	sp, r7
   32bd6:	b004      	add	sp, #16
   32bd8:	bd80      	pop	{r7, pc}
   32bda:	46c0      	nop			; (mov r8, r8)
   32bdc:	00032a5d 	.word	0x00032a5d

00032be0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   32be0:	b580      	push	{r7, lr}
   32be2:	b086      	sub	sp, #24
   32be4:	af00      	add	r7, sp, #0
   32be6:	60f8      	str	r0, [r7, #12]
   32be8:	60b9      	str	r1, [r7, #8]
   32bea:	607a      	str	r2, [r7, #4]
   32bec:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32bee:	2300      	movs	r3, #0
   32bf0:	617b      	str	r3, [r7, #20]
   32bf2:	e032      	b.n	32c5a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   32bf4:	68f9      	ldr	r1, [r7, #12]
   32bf6:	697a      	ldr	r2, [r7, #20]
   32bf8:	0013      	movs	r3, r2
   32bfa:	009b      	lsls	r3, r3, #2
   32bfc:	189b      	adds	r3, r3, r2
   32bfe:	009b      	lsls	r3, r3, #2
   32c00:	5c5b      	ldrb	r3, [r3, r1]
   32c02:	07db      	lsls	r3, r3, #31
   32c04:	0fdb      	lsrs	r3, r3, #31
   32c06:	b2db      	uxtb	r3, r3
   32c08:	2b00      	cmp	r3, #0
   32c0a:	d123      	bne.n	32c54 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   32c0c:	697a      	ldr	r2, [r7, #20]
   32c0e:	0013      	movs	r3, r2
   32c10:	009b      	lsls	r3, r3, #2
   32c12:	189b      	adds	r3, r3, r2
   32c14:	009b      	lsls	r3, r3, #2
   32c16:	68fa      	ldr	r2, [r7, #12]
   32c18:	18d3      	adds	r3, r2, r3
   32c1a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   32c1c:	693b      	ldr	r3, [r7, #16]
   32c1e:	68ba      	ldr	r2, [r7, #8]
   32c20:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   32c22:	693b      	ldr	r3, [r7, #16]
   32c24:	781a      	ldrb	r2, [r3, #0]
   32c26:	2102      	movs	r1, #2
   32c28:	438a      	bics	r2, r1
   32c2a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   32c2c:	693b      	ldr	r3, [r7, #16]
   32c2e:	687a      	ldr	r2, [r7, #4]
   32c30:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   32c32:	68fb      	ldr	r3, [r7, #12]
   32c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32c36:	4b0d      	ldr	r3, [pc, #52]	; (32c6c <sw_timer_register_callback+0x8c>)
   32c38:	0011      	movs	r1, r2
   32c3a:	6838      	ldr	r0, [r7, #0]
   32c3c:	4798      	blx	r3
   32c3e:	0003      	movs	r3, r0
   32c40:	001a      	movs	r2, r3
   32c42:	693b      	ldr	r3, [r7, #16]
   32c44:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   32c46:	693b      	ldr	r3, [r7, #16]
   32c48:	781a      	ldrb	r2, [r3, #0]
   32c4a:	2101      	movs	r1, #1
   32c4c:	430a      	orrs	r2, r1
   32c4e:	701a      	strb	r2, [r3, #0]
			return index;
   32c50:	697b      	ldr	r3, [r7, #20]
   32c52:	e007      	b.n	32c64 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32c54:	697b      	ldr	r3, [r7, #20]
   32c56:	3301      	adds	r3, #1
   32c58:	617b      	str	r3, [r7, #20]
   32c5a:	697b      	ldr	r3, [r7, #20]
   32c5c:	2b00      	cmp	r3, #0
   32c5e:	ddc9      	ble.n	32bf4 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   32c60:	2301      	movs	r3, #1
   32c62:	425b      	negs	r3, r3
}
   32c64:	0018      	movs	r0, r3
   32c66:	46bd      	mov	sp, r7
   32c68:	b006      	add	sp, #24
   32c6a:	bd80      	pop	{r7, pc}
   32c6c:	00033035 	.word	0x00033035

00032c70 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   32c70:	b580      	push	{r7, lr}
   32c72:	b086      	sub	sp, #24
   32c74:	af00      	add	r7, sp, #0
   32c76:	60f8      	str	r0, [r7, #12]
   32c78:	60b9      	str	r1, [r7, #8]
   32c7a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32c7c:	68ba      	ldr	r2, [r7, #8]
   32c7e:	0013      	movs	r3, r2
   32c80:	009b      	lsls	r3, r3, #2
   32c82:	189b      	adds	r3, r3, r2
   32c84:	009b      	lsls	r3, r3, #2
   32c86:	68fa      	ldr	r2, [r7, #12]
   32c88:	18d3      	adds	r3, r2, r3
   32c8a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   32c8c:	697b      	ldr	r3, [r7, #20]
   32c8e:	781a      	ldrb	r2, [r3, #0]
   32c90:	2102      	movs	r1, #2
   32c92:	430a      	orrs	r2, r1
   32c94:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   32c96:	68fb      	ldr	r3, [r7, #12]
   32c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32c9a:	4b07      	ldr	r3, [pc, #28]	; (32cb8 <sw_timer_enable_callback+0x48>)
   32c9c:	0011      	movs	r1, r2
   32c9e:	6878      	ldr	r0, [r7, #4]
   32ca0:	4798      	blx	r3
   32ca2:	0003      	movs	r3, r0
   32ca4:	001a      	movs	r2, r3
   32ca6:	4b05      	ldr	r3, [pc, #20]	; (32cbc <sw_timer_enable_callback+0x4c>)
   32ca8:	681b      	ldr	r3, [r3, #0]
   32caa:	18d2      	adds	r2, r2, r3
   32cac:	697b      	ldr	r3, [r7, #20]
   32cae:	611a      	str	r2, [r3, #16]
}
   32cb0:	46c0      	nop			; (mov r8, r8)
   32cb2:	46bd      	mov	sp, r7
   32cb4:	b006      	add	sp, #24
   32cb6:	bd80      	pop	{r7, pc}
   32cb8:	00033035 	.word	0x00033035
   32cbc:	20004720 	.word	0x20004720

00032cc0 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   32cc0:	b580      	push	{r7, lr}
   32cc2:	b084      	sub	sp, #16
   32cc4:	af00      	add	r7, sp, #0
   32cc6:	6078      	str	r0, [r7, #4]
   32cc8:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32cca:	683a      	ldr	r2, [r7, #0]
   32ccc:	0013      	movs	r3, r2
   32cce:	009b      	lsls	r3, r3, #2
   32cd0:	189b      	adds	r3, r3, r2
   32cd2:	009b      	lsls	r3, r3, #2
   32cd4:	687a      	ldr	r2, [r7, #4]
   32cd6:	18d3      	adds	r3, r2, r3
   32cd8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   32cda:	68fb      	ldr	r3, [r7, #12]
   32cdc:	781a      	ldrb	r2, [r3, #0]
   32cde:	2102      	movs	r1, #2
   32ce0:	438a      	bics	r2, r1
   32ce2:	701a      	strb	r2, [r3, #0]
}
   32ce4:	46c0      	nop			; (mov r8, r8)
   32ce6:	46bd      	mov	sp, r7
   32ce8:	b004      	add	sp, #16
   32cea:	bd80      	pop	{r7, pc}

00032cec <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32cec:	b590      	push	{r4, r7, lr}
   32cee:	b085      	sub	sp, #20
   32cf0:	af00      	add	r7, sp, #0
   32cf2:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32cf4:	2300      	movs	r3, #0
   32cf6:	60fb      	str	r3, [r7, #12]
   32cf8:	e053      	b.n	32da2 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   32cfa:	6879      	ldr	r1, [r7, #4]
   32cfc:	68fa      	ldr	r2, [r7, #12]
   32cfe:	0013      	movs	r3, r2
   32d00:	009b      	lsls	r3, r3, #2
   32d02:	189b      	adds	r3, r3, r2
   32d04:	009b      	lsls	r3, r3, #2
   32d06:	5c5b      	ldrb	r3, [r3, r1]
   32d08:	07db      	lsls	r3, r3, #31
   32d0a:	0fdb      	lsrs	r3, r3, #31
   32d0c:	b2db      	uxtb	r3, r3
   32d0e:	2b00      	cmp	r3, #0
   32d10:	d044      	beq.n	32d9c <sw_timer_task+0xb0>
   32d12:	6879      	ldr	r1, [r7, #4]
   32d14:	68fa      	ldr	r2, [r7, #12]
   32d16:	0013      	movs	r3, r2
   32d18:	009b      	lsls	r3, r3, #2
   32d1a:	189b      	adds	r3, r3, r2
   32d1c:	009b      	lsls	r3, r3, #2
   32d1e:	5c5b      	ldrb	r3, [r3, r1]
   32d20:	079b      	lsls	r3, r3, #30
   32d22:	0fdb      	lsrs	r3, r3, #31
   32d24:	b2db      	uxtb	r3, r3
   32d26:	2b00      	cmp	r3, #0
   32d28:	d038      	beq.n	32d9c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   32d2a:	68fa      	ldr	r2, [r7, #12]
   32d2c:	0013      	movs	r3, r2
   32d2e:	009b      	lsls	r3, r3, #2
   32d30:	189b      	adds	r3, r3, r2
   32d32:	009b      	lsls	r3, r3, #2
   32d34:	687a      	ldr	r2, [r7, #4]
   32d36:	18d3      	adds	r3, r2, r3
   32d38:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   32d3a:	68bb      	ldr	r3, [r7, #8]
   32d3c:	691a      	ldr	r2, [r3, #16]
   32d3e:	4b1c      	ldr	r3, [pc, #112]	; (32db0 <sw_timer_task+0xc4>)
   32d40:	681b      	ldr	r3, [r3, #0]
   32d42:	1ad3      	subs	r3, r2, r3
   32d44:	d52a      	bpl.n	32d9c <sw_timer_task+0xb0>
   32d46:	68bb      	ldr	r3, [r7, #8]
   32d48:	781b      	ldrb	r3, [r3, #0]
   32d4a:	2204      	movs	r2, #4
   32d4c:	4013      	ands	r3, r2
   32d4e:	b2db      	uxtb	r3, r3
   32d50:	2b00      	cmp	r3, #0
   32d52:	d123      	bne.n	32d9c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   32d54:	68bb      	ldr	r3, [r7, #8]
   32d56:	781a      	ldrb	r2, [r3, #0]
   32d58:	2104      	movs	r1, #4
   32d5a:	430a      	orrs	r2, r1
   32d5c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32d5e:	68bb      	ldr	r3, [r7, #8]
   32d60:	68db      	ldr	r3, [r3, #12]
   32d62:	2b00      	cmp	r3, #0
   32d64:	d007      	beq.n	32d76 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   32d66:	68bb      	ldr	r3, [r7, #8]
   32d68:	68da      	ldr	r2, [r3, #12]
   32d6a:	4b11      	ldr	r3, [pc, #68]	; (32db0 <sw_timer_task+0xc4>)
   32d6c:	681b      	ldr	r3, [r3, #0]
   32d6e:	18d2      	adds	r2, r2, r3
   32d70:	68bb      	ldr	r3, [r7, #8]
   32d72:	611a      	str	r2, [r3, #16]
   32d74:	e004      	b.n	32d80 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   32d76:	68bb      	ldr	r3, [r7, #8]
   32d78:	781a      	ldrb	r2, [r3, #0]
   32d7a:	2102      	movs	r1, #2
   32d7c:	438a      	bics	r2, r1
   32d7e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   32d80:	68bb      	ldr	r3, [r7, #8]
   32d82:	685c      	ldr	r4, [r3, #4]
   32d84:	68bb      	ldr	r3, [r7, #8]
   32d86:	689a      	ldr	r2, [r3, #8]
   32d88:	68bb      	ldr	r3, [r7, #8]
   32d8a:	68db      	ldr	r3, [r3, #12]
   32d8c:	68f9      	ldr	r1, [r7, #12]
   32d8e:	6878      	ldr	r0, [r7, #4]
   32d90:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   32d92:	68bb      	ldr	r3, [r7, #8]
   32d94:	781a      	ldrb	r2, [r3, #0]
   32d96:	2104      	movs	r1, #4
   32d98:	438a      	bics	r2, r1
   32d9a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32d9c:	68fb      	ldr	r3, [r7, #12]
   32d9e:	3301      	adds	r3, #1
   32da0:	60fb      	str	r3, [r7, #12]
   32da2:	68fb      	ldr	r3, [r7, #12]
   32da4:	2b00      	cmp	r3, #0
   32da6:	dda8      	ble.n	32cfa <sw_timer_task+0xe>
			}
		}
	}
}
   32da8:	46c0      	nop			; (mov r8, r8)
   32daa:	46bd      	mov	sp, r7
   32dac:	b005      	add	sp, #20
   32dae:	bd90      	pop	{r4, r7, pc}
   32db0:	20004720 	.word	0x20004720

00032db4 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   32db4:	b580      	push	{r7, lr}
   32db6:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32db8:	4b06      	ldr	r3, [pc, #24]	; (32dd4 <main+0x20>)
   32dba:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   32dbc:	4b06      	ldr	r3, [pc, #24]	; (32dd8 <main+0x24>)
   32dbe:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32dc0:	2001      	movs	r0, #1
   32dc2:	4b06      	ldr	r3, [pc, #24]	; (32ddc <main+0x28>)
   32dc4:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   32dc6:	4b06      	ldr	r3, [pc, #24]	; (32de0 <main+0x2c>)
   32dc8:	4798      	blx	r3

    return 0;  // Will not get here
   32dca:	2300      	movs	r3, #0
}
   32dcc:	0018      	movs	r0, r3
   32dce:	46bd      	mov	sp, r7
   32dd0:	bd80      	pop	{r7, pc}
   32dd2:	46c0      	nop			; (mov r8, r8)
   32dd4:	0002a8a5 	.word	0x0002a8a5
   32dd8:	0001e485 	.word	0x0001e485
   32ddc:	00018b59 	.word	0x00018b59
   32de0:	0001cadd 	.word	0x0001cadd

00032de4 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   32de4:	b580      	push	{r7, lr}
   32de6:	b082      	sub	sp, #8
   32de8:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n-----ESE516 Main Program-----\r\n");
   32dea:	4b27      	ldr	r3, [pc, #156]	; (32e88 <vApplicationDaemonTaskStartupHook+0xa4>)
   32dec:	0018      	movs	r0, r3
   32dee:	4b27      	ldr	r3, [pc, #156]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32df0:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\nInitialize HW...\r\n");
   32df2:	4b27      	ldr	r3, [pc, #156]	; (32e90 <vApplicationDaemonTaskStartupHook+0xac>)
   32df4:	0018      	movs	r0, r3
   32df6:	4b25      	ldr	r3, [pc, #148]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32df8:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   32dfa:	4b26      	ldr	r3, [pc, #152]	; (32e94 <vApplicationDaemonTaskStartupHook+0xb0>)
   32dfc:	4798      	blx	r3
   32dfe:	1e03      	subs	r3, r0, #0
   32e00:	d004      	beq.n	32e0c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32e02:	4b25      	ldr	r3, [pc, #148]	; (32e98 <vApplicationDaemonTaskStartupHook+0xb4>)
   32e04:	0018      	movs	r0, r3
   32e06:	4b21      	ldr	r3, [pc, #132]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e08:	4798      	blx	r3
   32e0a:	e003      	b.n	32e14 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32e0c:	4b23      	ldr	r3, [pc, #140]	; (32e9c <vApplicationDaemonTaskStartupHook+0xb8>)
   32e0e:	0018      	movs	r0, r3
   32e10:	4b1e      	ldr	r3, [pc, #120]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e12:	4798      	blx	r3
        //SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    //} else {
        //SerialConsoleWriteString("Initialized Seesaw!\r\n");
    //}

    uint8_t whoamI = 0;
   32e14:	1dfb      	adds	r3, r7, #7
   32e16:	2200      	movs	r2, #0
   32e18:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   32e1a:	4b21      	ldr	r3, [pc, #132]	; (32ea0 <vApplicationDaemonTaskStartupHook+0xbc>)
   32e1c:	4798      	blx	r3
   32e1e:	0002      	movs	r2, r0
   32e20:	1dfb      	adds	r3, r7, #7
   32e22:	0019      	movs	r1, r3
   32e24:	0010      	movs	r0, r2
   32e26:	4b1f      	ldr	r3, [pc, #124]	; (32ea4 <vApplicationDaemonTaskStartupHook+0xc0>)
   32e28:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   32e2a:	1dfb      	adds	r3, r7, #7
   32e2c:	781b      	ldrb	r3, [r3, #0]
   32e2e:	2b6c      	cmp	r3, #108	; 0x6c
   32e30:	d004      	beq.n	32e3c <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32e32:	4b1d      	ldr	r3, [pc, #116]	; (32ea8 <vApplicationDaemonTaskStartupHook+0xc4>)
   32e34:	0018      	movs	r0, r3
   32e36:	4b15      	ldr	r3, [pc, #84]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e38:	4798      	blx	r3
   32e3a:	e010      	b.n	32e5e <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   32e3c:	4b1b      	ldr	r3, [pc, #108]	; (32eac <vApplicationDaemonTaskStartupHook+0xc8>)
   32e3e:	0018      	movs	r0, r3
   32e40:	4b12      	ldr	r3, [pc, #72]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e42:	4798      	blx	r3
        if (InitImu() == 0) {
   32e44:	4b1a      	ldr	r3, [pc, #104]	; (32eb0 <vApplicationDaemonTaskStartupHook+0xcc>)
   32e46:	4798      	blx	r3
   32e48:	1e03      	subs	r3, r0, #0
   32e4a:	d104      	bne.n	32e56 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   32e4c:	4b19      	ldr	r3, [pc, #100]	; (32eb4 <vApplicationDaemonTaskStartupHook+0xd0>)
   32e4e:	0018      	movs	r0, r3
   32e50:	4b0e      	ldr	r3, [pc, #56]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e52:	4798      	blx	r3
   32e54:	e003      	b.n	32e5e <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32e56:	4b18      	ldr	r3, [pc, #96]	; (32eb8 <vApplicationDaemonTaskStartupHook+0xd4>)
   32e58:	0018      	movs	r0, r3
   32e5a:	4b0c      	ldr	r3, [pc, #48]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e5c:	4798      	blx	r3
        }
    }

	//commented by Derek
    SerialConsoleWriteString("Initializing distance sensor\r\n");
   32e5e:	4b17      	ldr	r3, [pc, #92]	; (32ebc <vApplicationDaemonTaskStartupHook+0xd8>)
   32e60:	0018      	movs	r0, r3
   32e62:	4b0a      	ldr	r3, [pc, #40]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e64:	4798      	blx	r3
    InitializeDistanceSensor();
   32e66:	4b16      	ldr	r3, [pc, #88]	; (32ec0 <vApplicationDaemonTaskStartupHook+0xdc>)
   32e68:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   32e6a:	4b16      	ldr	r3, [pc, #88]	; (32ec4 <vApplicationDaemonTaskStartupHook+0xe0>)
   32e6c:	0018      	movs	r0, r3
   32e6e:	4b07      	ldr	r3, [pc, #28]	; (32e8c <vApplicationDaemonTaskStartupHook+0xa8>)
   32e70:	4798      	blx	r3

    StartTasks();
   32e72:	4b15      	ldr	r3, [pc, #84]	; (32ec8 <vApplicationDaemonTaskStartupHook+0xe4>)
   32e74:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32e76:	4b15      	ldr	r3, [pc, #84]	; (32ecc <vApplicationDaemonTaskStartupHook+0xe8>)
   32e78:	681b      	ldr	r3, [r3, #0]
   32e7a:	0018      	movs	r0, r3
   32e7c:	4b14      	ldr	r3, [pc, #80]	; (32ed0 <vApplicationDaemonTaskStartupHook+0xec>)
   32e7e:	4798      	blx	r3
}
   32e80:	46c0      	nop			; (mov r8, r8)
   32e82:	46bd      	mov	sp, r7
   32e84:	b002      	add	sp, #8
   32e86:	bd80      	pop	{r7, pc}
   32e88:	0003c4d4 	.word	0x0003c4d4
   32e8c:	0001e4f5 	.word	0x0001e4f5
   32e90:	0003c4f8 	.word	0x0003c4f8
   32e94:	00014aa1 	.word	0x00014aa1
   32e98:	0003c510 	.word	0x0003c510
   32e9c:	0003c534 	.word	0x0003c534
   32ea0:	00015cc9 	.word	0x00015cc9
   32ea4:	0001580d 	.word	0x0001580d
   32ea8:	0003c550 	.word	0x0003c550
   32eac:	0003c564 	.word	0x0003c564
   32eb0:	00015cd9 	.word	0x00015cd9
   32eb4:	0003c574 	.word	0x0003c574
   32eb8:	0003c588 	.word	0x0003c588
   32ebc:	0003c5a4 	.word	0x0003c5a4
   32ec0:	000141d5 	.word	0x000141d5
   32ec4:	0003c5c4 	.word	0x0003c5c4
   32ec8:	00032ed5 	.word	0x00032ed5
   32ecc:	20004728 	.word	0x20004728
   32ed0:	0001c981 	.word	0x0001c981

00032ed4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32ed4:	b590      	push	{r4, r7, lr}
   32ed6:	b083      	sub	sp, #12
   32ed8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d", xPortGetFreeHeapSize());
   32eda:	4b35      	ldr	r3, [pc, #212]	; (32fb0 <StartTasks+0xdc>)
   32edc:	4798      	blx	r3
   32ede:	0003      	movs	r3, r0
   32ee0:	4a34      	ldr	r2, [pc, #208]	; (32fb4 <StartTasks+0xe0>)
   32ee2:	4835      	ldr	r0, [pc, #212]	; (32fb8 <StartTasks+0xe4>)
   32ee4:	2140      	movs	r1, #64	; 0x40
   32ee6:	4c35      	ldr	r4, [pc, #212]	; (32fbc <StartTasks+0xe8>)
   32ee8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32eea:	4b33      	ldr	r3, [pc, #204]	; (32fb8 <StartTasks+0xe4>)
   32eec:	0018      	movs	r0, r3
   32eee:	4b34      	ldr	r3, [pc, #208]	; (32fc0 <StartTasks+0xec>)
   32ef0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   32ef2:	23c8      	movs	r3, #200	; 0xc8
   32ef4:	005a      	lsls	r2, r3, #1
   32ef6:	4933      	ldr	r1, [pc, #204]	; (32fc4 <StartTasks+0xf0>)
   32ef8:	4833      	ldr	r0, [pc, #204]	; (32fc8 <StartTasks+0xf4>)
   32efa:	4b34      	ldr	r3, [pc, #208]	; (32fcc <StartTasks+0xf8>)
   32efc:	9301      	str	r3, [sp, #4]
   32efe:	2304      	movs	r3, #4
   32f00:	9300      	str	r3, [sp, #0]
   32f02:	2300      	movs	r3, #0
   32f04:	4c32      	ldr	r4, [pc, #200]	; (32fd0 <StartTasks+0xfc>)
   32f06:	47a0      	blx	r4
   32f08:	0003      	movs	r3, r0
   32f0a:	2b01      	cmp	r3, #1
   32f0c:	d003      	beq.n	32f16 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32f0e:	4b31      	ldr	r3, [pc, #196]	; (32fd4 <StartTasks+0x100>)
   32f10:	0018      	movs	r0, r3
   32f12:	4b2b      	ldr	r3, [pc, #172]	; (32fc0 <StartTasks+0xec>)
   32f14:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n\r\n", xPortGetFreeHeapSize());
   32f16:	4b26      	ldr	r3, [pc, #152]	; (32fb0 <StartTasks+0xdc>)
   32f18:	4798      	blx	r3
   32f1a:	0003      	movs	r3, r0
   32f1c:	4a2e      	ldr	r2, [pc, #184]	; (32fd8 <StartTasks+0x104>)
   32f1e:	4826      	ldr	r0, [pc, #152]	; (32fb8 <StartTasks+0xe4>)
   32f20:	2140      	movs	r1, #64	; 0x40
   32f22:	4c26      	ldr	r4, [pc, #152]	; (32fbc <StartTasks+0xe8>)
   32f24:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32f26:	4b24      	ldr	r3, [pc, #144]	; (32fb8 <StartTasks+0xe4>)
   32f28:	0018      	movs	r0, r3
   32f2a:	4b25      	ldr	r3, [pc, #148]	; (32fc0 <StartTasks+0xec>)
   32f2c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   32f2e:	23c8      	movs	r3, #200	; 0xc8
   32f30:	005a      	lsls	r2, r3, #1
   32f32:	492a      	ldr	r1, [pc, #168]	; (32fdc <StartTasks+0x108>)
   32f34:	482a      	ldr	r0, [pc, #168]	; (32fe0 <StartTasks+0x10c>)
   32f36:	4b2b      	ldr	r3, [pc, #172]	; (32fe4 <StartTasks+0x110>)
   32f38:	9301      	str	r3, [sp, #4]
   32f3a:	2304      	movs	r3, #4
   32f3c:	9300      	str	r3, [sp, #0]
   32f3e:	2300      	movs	r3, #0
   32f40:	4c23      	ldr	r4, [pc, #140]	; (32fd0 <StartTasks+0xfc>)
   32f42:	47a0      	blx	r4
   32f44:	0003      	movs	r3, r0
   32f46:	2b01      	cmp	r3, #1
   32f48:	d003      	beq.n	32f52 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32f4a:	4b27      	ldr	r3, [pc, #156]	; (32fe8 <StartTasks+0x114>)
   32f4c:	0018      	movs	r0, r3
   32f4e:	4b1c      	ldr	r3, [pc, #112]	; (32fc0 <StartTasks+0xec>)
   32f50:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   32f52:	4b17      	ldr	r3, [pc, #92]	; (32fb0 <StartTasks+0xdc>)
   32f54:	4798      	blx	r3
   32f56:	0003      	movs	r3, r0
   32f58:	4a24      	ldr	r2, [pc, #144]	; (32fec <StartTasks+0x118>)
   32f5a:	4817      	ldr	r0, [pc, #92]	; (32fb8 <StartTasks+0xe4>)
   32f5c:	2140      	movs	r1, #64	; 0x40
   32f5e:	4c17      	ldr	r4, [pc, #92]	; (32fbc <StartTasks+0xe8>)
   32f60:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32f62:	4b15      	ldr	r3, [pc, #84]	; (32fb8 <StartTasks+0xe4>)
   32f64:	0018      	movs	r0, r3
   32f66:	4b16      	ldr	r3, [pc, #88]	; (32fc0 <StartTasks+0xec>)
   32f68:	4798      	blx	r3
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
	
	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32f6a:	23fa      	movs	r3, #250	; 0xfa
   32f6c:	009a      	lsls	r2, r3, #2
   32f6e:	4920      	ldr	r1, [pc, #128]	; (32ff0 <StartTasks+0x11c>)
   32f70:	4820      	ldr	r0, [pc, #128]	; (32ff4 <StartTasks+0x120>)
   32f72:	4b21      	ldr	r3, [pc, #132]	; (32ff8 <StartTasks+0x124>)
   32f74:	9301      	str	r3, [sp, #4]
   32f76:	2303      	movs	r3, #3
   32f78:	9300      	str	r3, [sp, #0]
   32f7a:	2300      	movs	r3, #0
   32f7c:	4c14      	ldr	r4, [pc, #80]	; (32fd0 <StartTasks+0xfc>)
   32f7e:	47a0      	blx	r4
   32f80:	0003      	movs	r3, r0
   32f82:	2b01      	cmp	r3, #1
   32f84:	d003      	beq.n	32f8e <StartTasks+0xba>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32f86:	4b1d      	ldr	r3, [pc, #116]	; (32ffc <StartTasks+0x128>)
   32f88:	0018      	movs	r0, r3
   32f8a:	4b0d      	ldr	r3, [pc, #52]	; (32fc0 <StartTasks+0xec>)
   32f8c:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32f8e:	4b08      	ldr	r3, [pc, #32]	; (32fb0 <StartTasks+0xdc>)
   32f90:	4798      	blx	r3
   32f92:	0003      	movs	r3, r0
   32f94:	4a1a      	ldr	r2, [pc, #104]	; (33000 <StartTasks+0x12c>)
   32f96:	4808      	ldr	r0, [pc, #32]	; (32fb8 <StartTasks+0xe4>)
   32f98:	2140      	movs	r1, #64	; 0x40
   32f9a:	4c08      	ldr	r4, [pc, #32]	; (32fbc <StartTasks+0xe8>)
   32f9c:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   32f9e:	4b06      	ldr	r3, [pc, #24]	; (32fb8 <StartTasks+0xe4>)
   32fa0:	0018      	movs	r0, r3
   32fa2:	4b07      	ldr	r3, [pc, #28]	; (32fc0 <StartTasks+0xec>)
   32fa4:	4798      	blx	r3
}
   32fa6:	46c0      	nop			; (mov r8, r8)
   32fa8:	46bd      	mov	sp, r7
   32faa:	b001      	add	sp, #4
   32fac:	bd90      	pop	{r4, r7, pc}
   32fae:	46c0      	nop			; (mov r8, r8)
   32fb0:	0001aac1 	.word	0x0001aac1
   32fb4:	0003c5e4 	.word	0x0003c5e4
   32fb8:	20005e18 	.word	0x20005e18
   32fbc:	000355d1 	.word	0x000355d1
   32fc0:	0001e4f5 	.word	0x0001e4f5
   32fc4:	0003c604 	.word	0x0003c604
   32fc8:	00013819 	.word	0x00013819
   32fcc:	20004724 	.word	0x20004724
   32fd0:	0001c505 	.word	0x0001c505
   32fd4:	0003c610 	.word	0x0003c610
   32fd8:	0003c63c 	.word	0x0003c63c
   32fdc:	0003c65c 	.word	0x0003c65c
   32fe0:	00015f95 	.word	0x00015f95
   32fe4:	20004730 	.word	0x20004730
   32fe8:	0003c664 	.word	0x0003c664
   32fec:	0003c690 	.word	0x0003c690
   32ff0:	0003c6b4 	.word	0x0003c6b4
   32ff4:	00017939 	.word	0x00017939
   32ff8:	2000472c 	.word	0x2000472c
   32ffc:	0003c6c0 	.word	0x0003c6c0
   33000:	0003c6ec 	.word	0x0003c6ec

00033004 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   33004:	b580      	push	{r7, lr}
   33006:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   33008:	4b02      	ldr	r3, [pc, #8]	; (33014 <vApplicationMallocFailedHook+0x10>)
   3300a:	0018      	movs	r0, r3
   3300c:	4b02      	ldr	r3, [pc, #8]	; (33018 <vApplicationMallocFailedHook+0x14>)
   3300e:	4798      	blx	r3
    while (1)
   33010:	e7fe      	b.n	33010 <vApplicationMallocFailedHook+0xc>
   33012:	46c0      	nop			; (mov r8, r8)
   33014:	0003c70c 	.word	0x0003c70c
   33018:	0001e4f5 	.word	0x0001e4f5

0003301c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   3301c:	b580      	push	{r7, lr}
   3301e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33020:	4b02      	ldr	r3, [pc, #8]	; (3302c <vApplicationStackOverflowHook+0x10>)
   33022:	0018      	movs	r0, r3
   33024:	4b02      	ldr	r3, [pc, #8]	; (33030 <vApplicationStackOverflowHook+0x14>)
   33026:	4798      	blx	r3
    while (1)
   33028:	e7fe      	b.n	33028 <vApplicationStackOverflowHook+0xc>
   3302a:	46c0      	nop			; (mov r8, r8)
   3302c:	0003c738 	.word	0x0003c738
   33030:	0001e4f5 	.word	0x0001e4f5

00033034 <__udivsi3>:
   33034:	2200      	movs	r2, #0
   33036:	0843      	lsrs	r3, r0, #1
   33038:	428b      	cmp	r3, r1
   3303a:	d374      	bcc.n	33126 <__udivsi3+0xf2>
   3303c:	0903      	lsrs	r3, r0, #4
   3303e:	428b      	cmp	r3, r1
   33040:	d35f      	bcc.n	33102 <__udivsi3+0xce>
   33042:	0a03      	lsrs	r3, r0, #8
   33044:	428b      	cmp	r3, r1
   33046:	d344      	bcc.n	330d2 <__udivsi3+0x9e>
   33048:	0b03      	lsrs	r3, r0, #12
   3304a:	428b      	cmp	r3, r1
   3304c:	d328      	bcc.n	330a0 <__udivsi3+0x6c>
   3304e:	0c03      	lsrs	r3, r0, #16
   33050:	428b      	cmp	r3, r1
   33052:	d30d      	bcc.n	33070 <__udivsi3+0x3c>
   33054:	22ff      	movs	r2, #255	; 0xff
   33056:	0209      	lsls	r1, r1, #8
   33058:	ba12      	rev	r2, r2
   3305a:	0c03      	lsrs	r3, r0, #16
   3305c:	428b      	cmp	r3, r1
   3305e:	d302      	bcc.n	33066 <__udivsi3+0x32>
   33060:	1212      	asrs	r2, r2, #8
   33062:	0209      	lsls	r1, r1, #8
   33064:	d065      	beq.n	33132 <__udivsi3+0xfe>
   33066:	0b03      	lsrs	r3, r0, #12
   33068:	428b      	cmp	r3, r1
   3306a:	d319      	bcc.n	330a0 <__udivsi3+0x6c>
   3306c:	e000      	b.n	33070 <__udivsi3+0x3c>
   3306e:	0a09      	lsrs	r1, r1, #8
   33070:	0bc3      	lsrs	r3, r0, #15
   33072:	428b      	cmp	r3, r1
   33074:	d301      	bcc.n	3307a <__udivsi3+0x46>
   33076:	03cb      	lsls	r3, r1, #15
   33078:	1ac0      	subs	r0, r0, r3
   3307a:	4152      	adcs	r2, r2
   3307c:	0b83      	lsrs	r3, r0, #14
   3307e:	428b      	cmp	r3, r1
   33080:	d301      	bcc.n	33086 <__udivsi3+0x52>
   33082:	038b      	lsls	r3, r1, #14
   33084:	1ac0      	subs	r0, r0, r3
   33086:	4152      	adcs	r2, r2
   33088:	0b43      	lsrs	r3, r0, #13
   3308a:	428b      	cmp	r3, r1
   3308c:	d301      	bcc.n	33092 <__udivsi3+0x5e>
   3308e:	034b      	lsls	r3, r1, #13
   33090:	1ac0      	subs	r0, r0, r3
   33092:	4152      	adcs	r2, r2
   33094:	0b03      	lsrs	r3, r0, #12
   33096:	428b      	cmp	r3, r1
   33098:	d301      	bcc.n	3309e <__udivsi3+0x6a>
   3309a:	030b      	lsls	r3, r1, #12
   3309c:	1ac0      	subs	r0, r0, r3
   3309e:	4152      	adcs	r2, r2
   330a0:	0ac3      	lsrs	r3, r0, #11
   330a2:	428b      	cmp	r3, r1
   330a4:	d301      	bcc.n	330aa <__udivsi3+0x76>
   330a6:	02cb      	lsls	r3, r1, #11
   330a8:	1ac0      	subs	r0, r0, r3
   330aa:	4152      	adcs	r2, r2
   330ac:	0a83      	lsrs	r3, r0, #10
   330ae:	428b      	cmp	r3, r1
   330b0:	d301      	bcc.n	330b6 <__udivsi3+0x82>
   330b2:	028b      	lsls	r3, r1, #10
   330b4:	1ac0      	subs	r0, r0, r3
   330b6:	4152      	adcs	r2, r2
   330b8:	0a43      	lsrs	r3, r0, #9
   330ba:	428b      	cmp	r3, r1
   330bc:	d301      	bcc.n	330c2 <__udivsi3+0x8e>
   330be:	024b      	lsls	r3, r1, #9
   330c0:	1ac0      	subs	r0, r0, r3
   330c2:	4152      	adcs	r2, r2
   330c4:	0a03      	lsrs	r3, r0, #8
   330c6:	428b      	cmp	r3, r1
   330c8:	d301      	bcc.n	330ce <__udivsi3+0x9a>
   330ca:	020b      	lsls	r3, r1, #8
   330cc:	1ac0      	subs	r0, r0, r3
   330ce:	4152      	adcs	r2, r2
   330d0:	d2cd      	bcs.n	3306e <__udivsi3+0x3a>
   330d2:	09c3      	lsrs	r3, r0, #7
   330d4:	428b      	cmp	r3, r1
   330d6:	d301      	bcc.n	330dc <__udivsi3+0xa8>
   330d8:	01cb      	lsls	r3, r1, #7
   330da:	1ac0      	subs	r0, r0, r3
   330dc:	4152      	adcs	r2, r2
   330de:	0983      	lsrs	r3, r0, #6
   330e0:	428b      	cmp	r3, r1
   330e2:	d301      	bcc.n	330e8 <__udivsi3+0xb4>
   330e4:	018b      	lsls	r3, r1, #6
   330e6:	1ac0      	subs	r0, r0, r3
   330e8:	4152      	adcs	r2, r2
   330ea:	0943      	lsrs	r3, r0, #5
   330ec:	428b      	cmp	r3, r1
   330ee:	d301      	bcc.n	330f4 <__udivsi3+0xc0>
   330f0:	014b      	lsls	r3, r1, #5
   330f2:	1ac0      	subs	r0, r0, r3
   330f4:	4152      	adcs	r2, r2
   330f6:	0903      	lsrs	r3, r0, #4
   330f8:	428b      	cmp	r3, r1
   330fa:	d301      	bcc.n	33100 <__udivsi3+0xcc>
   330fc:	010b      	lsls	r3, r1, #4
   330fe:	1ac0      	subs	r0, r0, r3
   33100:	4152      	adcs	r2, r2
   33102:	08c3      	lsrs	r3, r0, #3
   33104:	428b      	cmp	r3, r1
   33106:	d301      	bcc.n	3310c <__udivsi3+0xd8>
   33108:	00cb      	lsls	r3, r1, #3
   3310a:	1ac0      	subs	r0, r0, r3
   3310c:	4152      	adcs	r2, r2
   3310e:	0883      	lsrs	r3, r0, #2
   33110:	428b      	cmp	r3, r1
   33112:	d301      	bcc.n	33118 <__udivsi3+0xe4>
   33114:	008b      	lsls	r3, r1, #2
   33116:	1ac0      	subs	r0, r0, r3
   33118:	4152      	adcs	r2, r2
   3311a:	0843      	lsrs	r3, r0, #1
   3311c:	428b      	cmp	r3, r1
   3311e:	d301      	bcc.n	33124 <__udivsi3+0xf0>
   33120:	004b      	lsls	r3, r1, #1
   33122:	1ac0      	subs	r0, r0, r3
   33124:	4152      	adcs	r2, r2
   33126:	1a41      	subs	r1, r0, r1
   33128:	d200      	bcs.n	3312c <__udivsi3+0xf8>
   3312a:	4601      	mov	r1, r0
   3312c:	4152      	adcs	r2, r2
   3312e:	4610      	mov	r0, r2
   33130:	4770      	bx	lr
   33132:	e7ff      	b.n	33134 <__udivsi3+0x100>
   33134:	b501      	push	{r0, lr}
   33136:	2000      	movs	r0, #0
   33138:	f000 f8f0 	bl	3331c <__aeabi_idiv0>
   3313c:	bd02      	pop	{r1, pc}
   3313e:	46c0      	nop			; (mov r8, r8)

00033140 <__aeabi_uidivmod>:
   33140:	2900      	cmp	r1, #0
   33142:	d0f7      	beq.n	33134 <__udivsi3+0x100>
   33144:	e776      	b.n	33034 <__udivsi3>
   33146:	4770      	bx	lr

00033148 <__divsi3>:
   33148:	4603      	mov	r3, r0
   3314a:	430b      	orrs	r3, r1
   3314c:	d47f      	bmi.n	3324e <__divsi3+0x106>
   3314e:	2200      	movs	r2, #0
   33150:	0843      	lsrs	r3, r0, #1
   33152:	428b      	cmp	r3, r1
   33154:	d374      	bcc.n	33240 <__divsi3+0xf8>
   33156:	0903      	lsrs	r3, r0, #4
   33158:	428b      	cmp	r3, r1
   3315a:	d35f      	bcc.n	3321c <__divsi3+0xd4>
   3315c:	0a03      	lsrs	r3, r0, #8
   3315e:	428b      	cmp	r3, r1
   33160:	d344      	bcc.n	331ec <__divsi3+0xa4>
   33162:	0b03      	lsrs	r3, r0, #12
   33164:	428b      	cmp	r3, r1
   33166:	d328      	bcc.n	331ba <__divsi3+0x72>
   33168:	0c03      	lsrs	r3, r0, #16
   3316a:	428b      	cmp	r3, r1
   3316c:	d30d      	bcc.n	3318a <__divsi3+0x42>
   3316e:	22ff      	movs	r2, #255	; 0xff
   33170:	0209      	lsls	r1, r1, #8
   33172:	ba12      	rev	r2, r2
   33174:	0c03      	lsrs	r3, r0, #16
   33176:	428b      	cmp	r3, r1
   33178:	d302      	bcc.n	33180 <__divsi3+0x38>
   3317a:	1212      	asrs	r2, r2, #8
   3317c:	0209      	lsls	r1, r1, #8
   3317e:	d065      	beq.n	3324c <__divsi3+0x104>
   33180:	0b03      	lsrs	r3, r0, #12
   33182:	428b      	cmp	r3, r1
   33184:	d319      	bcc.n	331ba <__divsi3+0x72>
   33186:	e000      	b.n	3318a <__divsi3+0x42>
   33188:	0a09      	lsrs	r1, r1, #8
   3318a:	0bc3      	lsrs	r3, r0, #15
   3318c:	428b      	cmp	r3, r1
   3318e:	d301      	bcc.n	33194 <__divsi3+0x4c>
   33190:	03cb      	lsls	r3, r1, #15
   33192:	1ac0      	subs	r0, r0, r3
   33194:	4152      	adcs	r2, r2
   33196:	0b83      	lsrs	r3, r0, #14
   33198:	428b      	cmp	r3, r1
   3319a:	d301      	bcc.n	331a0 <__divsi3+0x58>
   3319c:	038b      	lsls	r3, r1, #14
   3319e:	1ac0      	subs	r0, r0, r3
   331a0:	4152      	adcs	r2, r2
   331a2:	0b43      	lsrs	r3, r0, #13
   331a4:	428b      	cmp	r3, r1
   331a6:	d301      	bcc.n	331ac <__divsi3+0x64>
   331a8:	034b      	lsls	r3, r1, #13
   331aa:	1ac0      	subs	r0, r0, r3
   331ac:	4152      	adcs	r2, r2
   331ae:	0b03      	lsrs	r3, r0, #12
   331b0:	428b      	cmp	r3, r1
   331b2:	d301      	bcc.n	331b8 <__divsi3+0x70>
   331b4:	030b      	lsls	r3, r1, #12
   331b6:	1ac0      	subs	r0, r0, r3
   331b8:	4152      	adcs	r2, r2
   331ba:	0ac3      	lsrs	r3, r0, #11
   331bc:	428b      	cmp	r3, r1
   331be:	d301      	bcc.n	331c4 <__divsi3+0x7c>
   331c0:	02cb      	lsls	r3, r1, #11
   331c2:	1ac0      	subs	r0, r0, r3
   331c4:	4152      	adcs	r2, r2
   331c6:	0a83      	lsrs	r3, r0, #10
   331c8:	428b      	cmp	r3, r1
   331ca:	d301      	bcc.n	331d0 <__divsi3+0x88>
   331cc:	028b      	lsls	r3, r1, #10
   331ce:	1ac0      	subs	r0, r0, r3
   331d0:	4152      	adcs	r2, r2
   331d2:	0a43      	lsrs	r3, r0, #9
   331d4:	428b      	cmp	r3, r1
   331d6:	d301      	bcc.n	331dc <__divsi3+0x94>
   331d8:	024b      	lsls	r3, r1, #9
   331da:	1ac0      	subs	r0, r0, r3
   331dc:	4152      	adcs	r2, r2
   331de:	0a03      	lsrs	r3, r0, #8
   331e0:	428b      	cmp	r3, r1
   331e2:	d301      	bcc.n	331e8 <__divsi3+0xa0>
   331e4:	020b      	lsls	r3, r1, #8
   331e6:	1ac0      	subs	r0, r0, r3
   331e8:	4152      	adcs	r2, r2
   331ea:	d2cd      	bcs.n	33188 <__divsi3+0x40>
   331ec:	09c3      	lsrs	r3, r0, #7
   331ee:	428b      	cmp	r3, r1
   331f0:	d301      	bcc.n	331f6 <__divsi3+0xae>
   331f2:	01cb      	lsls	r3, r1, #7
   331f4:	1ac0      	subs	r0, r0, r3
   331f6:	4152      	adcs	r2, r2
   331f8:	0983      	lsrs	r3, r0, #6
   331fa:	428b      	cmp	r3, r1
   331fc:	d301      	bcc.n	33202 <__divsi3+0xba>
   331fe:	018b      	lsls	r3, r1, #6
   33200:	1ac0      	subs	r0, r0, r3
   33202:	4152      	adcs	r2, r2
   33204:	0943      	lsrs	r3, r0, #5
   33206:	428b      	cmp	r3, r1
   33208:	d301      	bcc.n	3320e <__divsi3+0xc6>
   3320a:	014b      	lsls	r3, r1, #5
   3320c:	1ac0      	subs	r0, r0, r3
   3320e:	4152      	adcs	r2, r2
   33210:	0903      	lsrs	r3, r0, #4
   33212:	428b      	cmp	r3, r1
   33214:	d301      	bcc.n	3321a <__divsi3+0xd2>
   33216:	010b      	lsls	r3, r1, #4
   33218:	1ac0      	subs	r0, r0, r3
   3321a:	4152      	adcs	r2, r2
   3321c:	08c3      	lsrs	r3, r0, #3
   3321e:	428b      	cmp	r3, r1
   33220:	d301      	bcc.n	33226 <__divsi3+0xde>
   33222:	00cb      	lsls	r3, r1, #3
   33224:	1ac0      	subs	r0, r0, r3
   33226:	4152      	adcs	r2, r2
   33228:	0883      	lsrs	r3, r0, #2
   3322a:	428b      	cmp	r3, r1
   3322c:	d301      	bcc.n	33232 <__divsi3+0xea>
   3322e:	008b      	lsls	r3, r1, #2
   33230:	1ac0      	subs	r0, r0, r3
   33232:	4152      	adcs	r2, r2
   33234:	0843      	lsrs	r3, r0, #1
   33236:	428b      	cmp	r3, r1
   33238:	d301      	bcc.n	3323e <__divsi3+0xf6>
   3323a:	004b      	lsls	r3, r1, #1
   3323c:	1ac0      	subs	r0, r0, r3
   3323e:	4152      	adcs	r2, r2
   33240:	1a41      	subs	r1, r0, r1
   33242:	d200      	bcs.n	33246 <__divsi3+0xfe>
   33244:	4601      	mov	r1, r0
   33246:	4152      	adcs	r2, r2
   33248:	4610      	mov	r0, r2
   3324a:	4770      	bx	lr
   3324c:	e05d      	b.n	3330a <__divsi3+0x1c2>
   3324e:	0fca      	lsrs	r2, r1, #31
   33250:	d000      	beq.n	33254 <__divsi3+0x10c>
   33252:	4249      	negs	r1, r1
   33254:	1003      	asrs	r3, r0, #32
   33256:	d300      	bcc.n	3325a <__divsi3+0x112>
   33258:	4240      	negs	r0, r0
   3325a:	4053      	eors	r3, r2
   3325c:	2200      	movs	r2, #0
   3325e:	469c      	mov	ip, r3
   33260:	0903      	lsrs	r3, r0, #4
   33262:	428b      	cmp	r3, r1
   33264:	d32d      	bcc.n	332c2 <__divsi3+0x17a>
   33266:	0a03      	lsrs	r3, r0, #8
   33268:	428b      	cmp	r3, r1
   3326a:	d312      	bcc.n	33292 <__divsi3+0x14a>
   3326c:	22fc      	movs	r2, #252	; 0xfc
   3326e:	0189      	lsls	r1, r1, #6
   33270:	ba12      	rev	r2, r2
   33272:	0a03      	lsrs	r3, r0, #8
   33274:	428b      	cmp	r3, r1
   33276:	d30c      	bcc.n	33292 <__divsi3+0x14a>
   33278:	0189      	lsls	r1, r1, #6
   3327a:	1192      	asrs	r2, r2, #6
   3327c:	428b      	cmp	r3, r1
   3327e:	d308      	bcc.n	33292 <__divsi3+0x14a>
   33280:	0189      	lsls	r1, r1, #6
   33282:	1192      	asrs	r2, r2, #6
   33284:	428b      	cmp	r3, r1
   33286:	d304      	bcc.n	33292 <__divsi3+0x14a>
   33288:	0189      	lsls	r1, r1, #6
   3328a:	d03a      	beq.n	33302 <__divsi3+0x1ba>
   3328c:	1192      	asrs	r2, r2, #6
   3328e:	e000      	b.n	33292 <__divsi3+0x14a>
   33290:	0989      	lsrs	r1, r1, #6
   33292:	09c3      	lsrs	r3, r0, #7
   33294:	428b      	cmp	r3, r1
   33296:	d301      	bcc.n	3329c <__divsi3+0x154>
   33298:	01cb      	lsls	r3, r1, #7
   3329a:	1ac0      	subs	r0, r0, r3
   3329c:	4152      	adcs	r2, r2
   3329e:	0983      	lsrs	r3, r0, #6
   332a0:	428b      	cmp	r3, r1
   332a2:	d301      	bcc.n	332a8 <__divsi3+0x160>
   332a4:	018b      	lsls	r3, r1, #6
   332a6:	1ac0      	subs	r0, r0, r3
   332a8:	4152      	adcs	r2, r2
   332aa:	0943      	lsrs	r3, r0, #5
   332ac:	428b      	cmp	r3, r1
   332ae:	d301      	bcc.n	332b4 <__divsi3+0x16c>
   332b0:	014b      	lsls	r3, r1, #5
   332b2:	1ac0      	subs	r0, r0, r3
   332b4:	4152      	adcs	r2, r2
   332b6:	0903      	lsrs	r3, r0, #4
   332b8:	428b      	cmp	r3, r1
   332ba:	d301      	bcc.n	332c0 <__divsi3+0x178>
   332bc:	010b      	lsls	r3, r1, #4
   332be:	1ac0      	subs	r0, r0, r3
   332c0:	4152      	adcs	r2, r2
   332c2:	08c3      	lsrs	r3, r0, #3
   332c4:	428b      	cmp	r3, r1
   332c6:	d301      	bcc.n	332cc <__divsi3+0x184>
   332c8:	00cb      	lsls	r3, r1, #3
   332ca:	1ac0      	subs	r0, r0, r3
   332cc:	4152      	adcs	r2, r2
   332ce:	0883      	lsrs	r3, r0, #2
   332d0:	428b      	cmp	r3, r1
   332d2:	d301      	bcc.n	332d8 <__divsi3+0x190>
   332d4:	008b      	lsls	r3, r1, #2
   332d6:	1ac0      	subs	r0, r0, r3
   332d8:	4152      	adcs	r2, r2
   332da:	d2d9      	bcs.n	33290 <__divsi3+0x148>
   332dc:	0843      	lsrs	r3, r0, #1
   332de:	428b      	cmp	r3, r1
   332e0:	d301      	bcc.n	332e6 <__divsi3+0x19e>
   332e2:	004b      	lsls	r3, r1, #1
   332e4:	1ac0      	subs	r0, r0, r3
   332e6:	4152      	adcs	r2, r2
   332e8:	1a41      	subs	r1, r0, r1
   332ea:	d200      	bcs.n	332ee <__divsi3+0x1a6>
   332ec:	4601      	mov	r1, r0
   332ee:	4663      	mov	r3, ip
   332f0:	4152      	adcs	r2, r2
   332f2:	105b      	asrs	r3, r3, #1
   332f4:	4610      	mov	r0, r2
   332f6:	d301      	bcc.n	332fc <__divsi3+0x1b4>
   332f8:	4240      	negs	r0, r0
   332fa:	2b00      	cmp	r3, #0
   332fc:	d500      	bpl.n	33300 <__divsi3+0x1b8>
   332fe:	4249      	negs	r1, r1
   33300:	4770      	bx	lr
   33302:	4663      	mov	r3, ip
   33304:	105b      	asrs	r3, r3, #1
   33306:	d300      	bcc.n	3330a <__divsi3+0x1c2>
   33308:	4240      	negs	r0, r0
   3330a:	b501      	push	{r0, lr}
   3330c:	2000      	movs	r0, #0
   3330e:	f000 f805 	bl	3331c <__aeabi_idiv0>
   33312:	bd02      	pop	{r1, pc}

00033314 <__aeabi_idivmod>:
   33314:	2900      	cmp	r1, #0
   33316:	d0f8      	beq.n	3330a <__divsi3+0x1c2>
   33318:	e716      	b.n	33148 <__divsi3>
   3331a:	4770      	bx	lr

0003331c <__aeabi_idiv0>:
   3331c:	4770      	bx	lr
   3331e:	46c0      	nop			; (mov r8, r8)

00033320 <__aeabi_lmul>:
   33320:	b5f0      	push	{r4, r5, r6, r7, lr}
   33322:	46ce      	mov	lr, r9
   33324:	4647      	mov	r7, r8
   33326:	0415      	lsls	r5, r2, #16
   33328:	0c2d      	lsrs	r5, r5, #16
   3332a:	002e      	movs	r6, r5
   3332c:	b580      	push	{r7, lr}
   3332e:	0407      	lsls	r7, r0, #16
   33330:	0c14      	lsrs	r4, r2, #16
   33332:	0c3f      	lsrs	r7, r7, #16
   33334:	4699      	mov	r9, r3
   33336:	0c03      	lsrs	r3, r0, #16
   33338:	437e      	muls	r6, r7
   3333a:	435d      	muls	r5, r3
   3333c:	4367      	muls	r7, r4
   3333e:	4363      	muls	r3, r4
   33340:	197f      	adds	r7, r7, r5
   33342:	0c34      	lsrs	r4, r6, #16
   33344:	19e4      	adds	r4, r4, r7
   33346:	469c      	mov	ip, r3
   33348:	42a5      	cmp	r5, r4
   3334a:	d903      	bls.n	33354 <__aeabi_lmul+0x34>
   3334c:	2380      	movs	r3, #128	; 0x80
   3334e:	025b      	lsls	r3, r3, #9
   33350:	4698      	mov	r8, r3
   33352:	44c4      	add	ip, r8
   33354:	464b      	mov	r3, r9
   33356:	4351      	muls	r1, r2
   33358:	4343      	muls	r3, r0
   3335a:	0436      	lsls	r6, r6, #16
   3335c:	0c36      	lsrs	r6, r6, #16
   3335e:	0c25      	lsrs	r5, r4, #16
   33360:	0424      	lsls	r4, r4, #16
   33362:	4465      	add	r5, ip
   33364:	19a4      	adds	r4, r4, r6
   33366:	1859      	adds	r1, r3, r1
   33368:	1949      	adds	r1, r1, r5
   3336a:	0020      	movs	r0, r4
   3336c:	bc0c      	pop	{r2, r3}
   3336e:	4690      	mov	r8, r2
   33370:	4699      	mov	r9, r3
   33372:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033374 <__aeabi_d2uiz>:
   33374:	b570      	push	{r4, r5, r6, lr}
   33376:	2200      	movs	r2, #0
   33378:	4b0c      	ldr	r3, [pc, #48]	; (333ac <__aeabi_d2uiz+0x38>)
   3337a:	0004      	movs	r4, r0
   3337c:	000d      	movs	r5, r1
   3337e:	f001 fe73 	bl	35068 <__aeabi_dcmpge>
   33382:	2800      	cmp	r0, #0
   33384:	d104      	bne.n	33390 <__aeabi_d2uiz+0x1c>
   33386:	0020      	movs	r0, r4
   33388:	0029      	movs	r1, r5
   3338a:	f001 fd7b 	bl	34e84 <__aeabi_d2iz>
   3338e:	bd70      	pop	{r4, r5, r6, pc}
   33390:	4b06      	ldr	r3, [pc, #24]	; (333ac <__aeabi_d2uiz+0x38>)
   33392:	2200      	movs	r2, #0
   33394:	0020      	movs	r0, r4
   33396:	0029      	movs	r1, r5
   33398:	f001 fa5e 	bl	34858 <__aeabi_dsub>
   3339c:	f001 fd72 	bl	34e84 <__aeabi_d2iz>
   333a0:	2380      	movs	r3, #128	; 0x80
   333a2:	061b      	lsls	r3, r3, #24
   333a4:	469c      	mov	ip, r3
   333a6:	4460      	add	r0, ip
   333a8:	e7f1      	b.n	3338e <__aeabi_d2uiz+0x1a>
   333aa:	46c0      	nop			; (mov r8, r8)
   333ac:	41e00000 	.word	0x41e00000

000333b0 <__aeabi_fmul>:
   333b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   333b2:	4657      	mov	r7, sl
   333b4:	464e      	mov	r6, r9
   333b6:	4645      	mov	r5, r8
   333b8:	46de      	mov	lr, fp
   333ba:	b5e0      	push	{r5, r6, r7, lr}
   333bc:	0247      	lsls	r7, r0, #9
   333be:	0046      	lsls	r6, r0, #1
   333c0:	4688      	mov	r8, r1
   333c2:	0a7f      	lsrs	r7, r7, #9
   333c4:	0e36      	lsrs	r6, r6, #24
   333c6:	0fc4      	lsrs	r4, r0, #31
   333c8:	2e00      	cmp	r6, #0
   333ca:	d047      	beq.n	3345c <__aeabi_fmul+0xac>
   333cc:	2eff      	cmp	r6, #255	; 0xff
   333ce:	d024      	beq.n	3341a <__aeabi_fmul+0x6a>
   333d0:	00fb      	lsls	r3, r7, #3
   333d2:	2780      	movs	r7, #128	; 0x80
   333d4:	04ff      	lsls	r7, r7, #19
   333d6:	431f      	orrs	r7, r3
   333d8:	2300      	movs	r3, #0
   333da:	4699      	mov	r9, r3
   333dc:	469a      	mov	sl, r3
   333de:	3e7f      	subs	r6, #127	; 0x7f
   333e0:	4643      	mov	r3, r8
   333e2:	025d      	lsls	r5, r3, #9
   333e4:	0058      	lsls	r0, r3, #1
   333e6:	0fdb      	lsrs	r3, r3, #31
   333e8:	0a6d      	lsrs	r5, r5, #9
   333ea:	0e00      	lsrs	r0, r0, #24
   333ec:	4698      	mov	r8, r3
   333ee:	d043      	beq.n	33478 <__aeabi_fmul+0xc8>
   333f0:	28ff      	cmp	r0, #255	; 0xff
   333f2:	d03b      	beq.n	3346c <__aeabi_fmul+0xbc>
   333f4:	00eb      	lsls	r3, r5, #3
   333f6:	2580      	movs	r5, #128	; 0x80
   333f8:	2200      	movs	r2, #0
   333fa:	04ed      	lsls	r5, r5, #19
   333fc:	431d      	orrs	r5, r3
   333fe:	387f      	subs	r0, #127	; 0x7f
   33400:	1836      	adds	r6, r6, r0
   33402:	1c73      	adds	r3, r6, #1
   33404:	4641      	mov	r1, r8
   33406:	469b      	mov	fp, r3
   33408:	464b      	mov	r3, r9
   3340a:	4061      	eors	r1, r4
   3340c:	4313      	orrs	r3, r2
   3340e:	2b0f      	cmp	r3, #15
   33410:	d864      	bhi.n	334dc <__aeabi_fmul+0x12c>
   33412:	4875      	ldr	r0, [pc, #468]	; (335e8 <__aeabi_fmul+0x238>)
   33414:	009b      	lsls	r3, r3, #2
   33416:	58c3      	ldr	r3, [r0, r3]
   33418:	469f      	mov	pc, r3
   3341a:	2f00      	cmp	r7, #0
   3341c:	d142      	bne.n	334a4 <__aeabi_fmul+0xf4>
   3341e:	2308      	movs	r3, #8
   33420:	4699      	mov	r9, r3
   33422:	3b06      	subs	r3, #6
   33424:	26ff      	movs	r6, #255	; 0xff
   33426:	469a      	mov	sl, r3
   33428:	e7da      	b.n	333e0 <__aeabi_fmul+0x30>
   3342a:	4641      	mov	r1, r8
   3342c:	2a02      	cmp	r2, #2
   3342e:	d028      	beq.n	33482 <__aeabi_fmul+0xd2>
   33430:	2a03      	cmp	r2, #3
   33432:	d100      	bne.n	33436 <__aeabi_fmul+0x86>
   33434:	e0ce      	b.n	335d4 <__aeabi_fmul+0x224>
   33436:	2a01      	cmp	r2, #1
   33438:	d000      	beq.n	3343c <__aeabi_fmul+0x8c>
   3343a:	e0ac      	b.n	33596 <__aeabi_fmul+0x1e6>
   3343c:	4011      	ands	r1, r2
   3343e:	2000      	movs	r0, #0
   33440:	2200      	movs	r2, #0
   33442:	b2cc      	uxtb	r4, r1
   33444:	0240      	lsls	r0, r0, #9
   33446:	05d2      	lsls	r2, r2, #23
   33448:	0a40      	lsrs	r0, r0, #9
   3344a:	07e4      	lsls	r4, r4, #31
   3344c:	4310      	orrs	r0, r2
   3344e:	4320      	orrs	r0, r4
   33450:	bc3c      	pop	{r2, r3, r4, r5}
   33452:	4690      	mov	r8, r2
   33454:	4699      	mov	r9, r3
   33456:	46a2      	mov	sl, r4
   33458:	46ab      	mov	fp, r5
   3345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3345c:	2f00      	cmp	r7, #0
   3345e:	d115      	bne.n	3348c <__aeabi_fmul+0xdc>
   33460:	2304      	movs	r3, #4
   33462:	4699      	mov	r9, r3
   33464:	3b03      	subs	r3, #3
   33466:	2600      	movs	r6, #0
   33468:	469a      	mov	sl, r3
   3346a:	e7b9      	b.n	333e0 <__aeabi_fmul+0x30>
   3346c:	20ff      	movs	r0, #255	; 0xff
   3346e:	2202      	movs	r2, #2
   33470:	2d00      	cmp	r5, #0
   33472:	d0c5      	beq.n	33400 <__aeabi_fmul+0x50>
   33474:	2203      	movs	r2, #3
   33476:	e7c3      	b.n	33400 <__aeabi_fmul+0x50>
   33478:	2d00      	cmp	r5, #0
   3347a:	d119      	bne.n	334b0 <__aeabi_fmul+0x100>
   3347c:	2000      	movs	r0, #0
   3347e:	2201      	movs	r2, #1
   33480:	e7be      	b.n	33400 <__aeabi_fmul+0x50>
   33482:	2401      	movs	r4, #1
   33484:	22ff      	movs	r2, #255	; 0xff
   33486:	400c      	ands	r4, r1
   33488:	2000      	movs	r0, #0
   3348a:	e7db      	b.n	33444 <__aeabi_fmul+0x94>
   3348c:	0038      	movs	r0, r7
   3348e:	f001 fdf5 	bl	3507c <__clzsi2>
   33492:	2676      	movs	r6, #118	; 0x76
   33494:	1f43      	subs	r3, r0, #5
   33496:	409f      	lsls	r7, r3
   33498:	2300      	movs	r3, #0
   3349a:	4276      	negs	r6, r6
   3349c:	1a36      	subs	r6, r6, r0
   3349e:	4699      	mov	r9, r3
   334a0:	469a      	mov	sl, r3
   334a2:	e79d      	b.n	333e0 <__aeabi_fmul+0x30>
   334a4:	230c      	movs	r3, #12
   334a6:	4699      	mov	r9, r3
   334a8:	3b09      	subs	r3, #9
   334aa:	26ff      	movs	r6, #255	; 0xff
   334ac:	469a      	mov	sl, r3
   334ae:	e797      	b.n	333e0 <__aeabi_fmul+0x30>
   334b0:	0028      	movs	r0, r5
   334b2:	f001 fde3 	bl	3507c <__clzsi2>
   334b6:	1f43      	subs	r3, r0, #5
   334b8:	409d      	lsls	r5, r3
   334ba:	2376      	movs	r3, #118	; 0x76
   334bc:	425b      	negs	r3, r3
   334be:	1a18      	subs	r0, r3, r0
   334c0:	2200      	movs	r2, #0
   334c2:	e79d      	b.n	33400 <__aeabi_fmul+0x50>
   334c4:	2080      	movs	r0, #128	; 0x80
   334c6:	2400      	movs	r4, #0
   334c8:	03c0      	lsls	r0, r0, #15
   334ca:	22ff      	movs	r2, #255	; 0xff
   334cc:	e7ba      	b.n	33444 <__aeabi_fmul+0x94>
   334ce:	003d      	movs	r5, r7
   334d0:	4652      	mov	r2, sl
   334d2:	e7ab      	b.n	3342c <__aeabi_fmul+0x7c>
   334d4:	003d      	movs	r5, r7
   334d6:	0021      	movs	r1, r4
   334d8:	4652      	mov	r2, sl
   334da:	e7a7      	b.n	3342c <__aeabi_fmul+0x7c>
   334dc:	0c3b      	lsrs	r3, r7, #16
   334de:	469c      	mov	ip, r3
   334e0:	042a      	lsls	r2, r5, #16
   334e2:	0c12      	lsrs	r2, r2, #16
   334e4:	0c2b      	lsrs	r3, r5, #16
   334e6:	0014      	movs	r4, r2
   334e8:	4660      	mov	r0, ip
   334ea:	4665      	mov	r5, ip
   334ec:	043f      	lsls	r7, r7, #16
   334ee:	0c3f      	lsrs	r7, r7, #16
   334f0:	437c      	muls	r4, r7
   334f2:	4342      	muls	r2, r0
   334f4:	435d      	muls	r5, r3
   334f6:	437b      	muls	r3, r7
   334f8:	0c27      	lsrs	r7, r4, #16
   334fa:	189b      	adds	r3, r3, r2
   334fc:	18ff      	adds	r7, r7, r3
   334fe:	42ba      	cmp	r2, r7
   33500:	d903      	bls.n	3350a <__aeabi_fmul+0x15a>
   33502:	2380      	movs	r3, #128	; 0x80
   33504:	025b      	lsls	r3, r3, #9
   33506:	469c      	mov	ip, r3
   33508:	4465      	add	r5, ip
   3350a:	0424      	lsls	r4, r4, #16
   3350c:	043a      	lsls	r2, r7, #16
   3350e:	0c24      	lsrs	r4, r4, #16
   33510:	1912      	adds	r2, r2, r4
   33512:	0193      	lsls	r3, r2, #6
   33514:	1e5c      	subs	r4, r3, #1
   33516:	41a3      	sbcs	r3, r4
   33518:	0c3f      	lsrs	r7, r7, #16
   3351a:	0e92      	lsrs	r2, r2, #26
   3351c:	197d      	adds	r5, r7, r5
   3351e:	431a      	orrs	r2, r3
   33520:	01ad      	lsls	r5, r5, #6
   33522:	4315      	orrs	r5, r2
   33524:	012b      	lsls	r3, r5, #4
   33526:	d504      	bpl.n	33532 <__aeabi_fmul+0x182>
   33528:	2301      	movs	r3, #1
   3352a:	465e      	mov	r6, fp
   3352c:	086a      	lsrs	r2, r5, #1
   3352e:	401d      	ands	r5, r3
   33530:	4315      	orrs	r5, r2
   33532:	0032      	movs	r2, r6
   33534:	327f      	adds	r2, #127	; 0x7f
   33536:	2a00      	cmp	r2, #0
   33538:	dd25      	ble.n	33586 <__aeabi_fmul+0x1d6>
   3353a:	076b      	lsls	r3, r5, #29
   3353c:	d004      	beq.n	33548 <__aeabi_fmul+0x198>
   3353e:	230f      	movs	r3, #15
   33540:	402b      	ands	r3, r5
   33542:	2b04      	cmp	r3, #4
   33544:	d000      	beq.n	33548 <__aeabi_fmul+0x198>
   33546:	3504      	adds	r5, #4
   33548:	012b      	lsls	r3, r5, #4
   3354a:	d503      	bpl.n	33554 <__aeabi_fmul+0x1a4>
   3354c:	0032      	movs	r2, r6
   3354e:	4b27      	ldr	r3, [pc, #156]	; (335ec <__aeabi_fmul+0x23c>)
   33550:	3280      	adds	r2, #128	; 0x80
   33552:	401d      	ands	r5, r3
   33554:	2afe      	cmp	r2, #254	; 0xfe
   33556:	dc94      	bgt.n	33482 <__aeabi_fmul+0xd2>
   33558:	2401      	movs	r4, #1
   3355a:	01a8      	lsls	r0, r5, #6
   3355c:	0a40      	lsrs	r0, r0, #9
   3355e:	b2d2      	uxtb	r2, r2
   33560:	400c      	ands	r4, r1
   33562:	e76f      	b.n	33444 <__aeabi_fmul+0x94>
   33564:	2080      	movs	r0, #128	; 0x80
   33566:	03c0      	lsls	r0, r0, #15
   33568:	4207      	tst	r7, r0
   3356a:	d007      	beq.n	3357c <__aeabi_fmul+0x1cc>
   3356c:	4205      	tst	r5, r0
   3356e:	d105      	bne.n	3357c <__aeabi_fmul+0x1cc>
   33570:	4328      	orrs	r0, r5
   33572:	0240      	lsls	r0, r0, #9
   33574:	0a40      	lsrs	r0, r0, #9
   33576:	4644      	mov	r4, r8
   33578:	22ff      	movs	r2, #255	; 0xff
   3357a:	e763      	b.n	33444 <__aeabi_fmul+0x94>
   3357c:	4338      	orrs	r0, r7
   3357e:	0240      	lsls	r0, r0, #9
   33580:	0a40      	lsrs	r0, r0, #9
   33582:	22ff      	movs	r2, #255	; 0xff
   33584:	e75e      	b.n	33444 <__aeabi_fmul+0x94>
   33586:	2401      	movs	r4, #1
   33588:	1aa3      	subs	r3, r4, r2
   3358a:	2b1b      	cmp	r3, #27
   3358c:	dd05      	ble.n	3359a <__aeabi_fmul+0x1ea>
   3358e:	400c      	ands	r4, r1
   33590:	2200      	movs	r2, #0
   33592:	2000      	movs	r0, #0
   33594:	e756      	b.n	33444 <__aeabi_fmul+0x94>
   33596:	465e      	mov	r6, fp
   33598:	e7cb      	b.n	33532 <__aeabi_fmul+0x182>
   3359a:	002a      	movs	r2, r5
   3359c:	2020      	movs	r0, #32
   3359e:	40da      	lsrs	r2, r3
   335a0:	1ac3      	subs	r3, r0, r3
   335a2:	409d      	lsls	r5, r3
   335a4:	002b      	movs	r3, r5
   335a6:	1e5d      	subs	r5, r3, #1
   335a8:	41ab      	sbcs	r3, r5
   335aa:	4313      	orrs	r3, r2
   335ac:	075a      	lsls	r2, r3, #29
   335ae:	d004      	beq.n	335ba <__aeabi_fmul+0x20a>
   335b0:	220f      	movs	r2, #15
   335b2:	401a      	ands	r2, r3
   335b4:	2a04      	cmp	r2, #4
   335b6:	d000      	beq.n	335ba <__aeabi_fmul+0x20a>
   335b8:	3304      	adds	r3, #4
   335ba:	015a      	lsls	r2, r3, #5
   335bc:	d504      	bpl.n	335c8 <__aeabi_fmul+0x218>
   335be:	2401      	movs	r4, #1
   335c0:	2201      	movs	r2, #1
   335c2:	400c      	ands	r4, r1
   335c4:	2000      	movs	r0, #0
   335c6:	e73d      	b.n	33444 <__aeabi_fmul+0x94>
   335c8:	2401      	movs	r4, #1
   335ca:	019b      	lsls	r3, r3, #6
   335cc:	0a58      	lsrs	r0, r3, #9
   335ce:	400c      	ands	r4, r1
   335d0:	2200      	movs	r2, #0
   335d2:	e737      	b.n	33444 <__aeabi_fmul+0x94>
   335d4:	2080      	movs	r0, #128	; 0x80
   335d6:	2401      	movs	r4, #1
   335d8:	03c0      	lsls	r0, r0, #15
   335da:	4328      	orrs	r0, r5
   335dc:	0240      	lsls	r0, r0, #9
   335de:	0a40      	lsrs	r0, r0, #9
   335e0:	400c      	ands	r4, r1
   335e2:	22ff      	movs	r2, #255	; 0xff
   335e4:	e72e      	b.n	33444 <__aeabi_fmul+0x94>
   335e6:	46c0      	nop			; (mov r8, r8)
   335e8:	0003c760 	.word	0x0003c760
   335ec:	f7ffffff 	.word	0xf7ffffff

000335f0 <__aeabi_f2iz>:
   335f0:	0241      	lsls	r1, r0, #9
   335f2:	0043      	lsls	r3, r0, #1
   335f4:	0fc2      	lsrs	r2, r0, #31
   335f6:	0a49      	lsrs	r1, r1, #9
   335f8:	0e1b      	lsrs	r3, r3, #24
   335fa:	2000      	movs	r0, #0
   335fc:	2b7e      	cmp	r3, #126	; 0x7e
   335fe:	dd0d      	ble.n	3361c <__aeabi_f2iz+0x2c>
   33600:	2b9d      	cmp	r3, #157	; 0x9d
   33602:	dc0c      	bgt.n	3361e <__aeabi_f2iz+0x2e>
   33604:	2080      	movs	r0, #128	; 0x80
   33606:	0400      	lsls	r0, r0, #16
   33608:	4301      	orrs	r1, r0
   3360a:	2b95      	cmp	r3, #149	; 0x95
   3360c:	dc0a      	bgt.n	33624 <__aeabi_f2iz+0x34>
   3360e:	2096      	movs	r0, #150	; 0x96
   33610:	1ac3      	subs	r3, r0, r3
   33612:	40d9      	lsrs	r1, r3
   33614:	4248      	negs	r0, r1
   33616:	2a00      	cmp	r2, #0
   33618:	d100      	bne.n	3361c <__aeabi_f2iz+0x2c>
   3361a:	0008      	movs	r0, r1
   3361c:	4770      	bx	lr
   3361e:	4b03      	ldr	r3, [pc, #12]	; (3362c <__aeabi_f2iz+0x3c>)
   33620:	18d0      	adds	r0, r2, r3
   33622:	e7fb      	b.n	3361c <__aeabi_f2iz+0x2c>
   33624:	3b96      	subs	r3, #150	; 0x96
   33626:	4099      	lsls	r1, r3
   33628:	e7f4      	b.n	33614 <__aeabi_f2iz+0x24>
   3362a:	46c0      	nop			; (mov r8, r8)
   3362c:	7fffffff 	.word	0x7fffffff

00033630 <__aeabi_i2f>:
   33630:	b570      	push	{r4, r5, r6, lr}
   33632:	2800      	cmp	r0, #0
   33634:	d030      	beq.n	33698 <__aeabi_i2f+0x68>
   33636:	17c3      	asrs	r3, r0, #31
   33638:	18c4      	adds	r4, r0, r3
   3363a:	405c      	eors	r4, r3
   3363c:	0fc5      	lsrs	r5, r0, #31
   3363e:	0020      	movs	r0, r4
   33640:	f001 fd1c 	bl	3507c <__clzsi2>
   33644:	239e      	movs	r3, #158	; 0x9e
   33646:	1a1b      	subs	r3, r3, r0
   33648:	2b96      	cmp	r3, #150	; 0x96
   3364a:	dc0d      	bgt.n	33668 <__aeabi_i2f+0x38>
   3364c:	2296      	movs	r2, #150	; 0x96
   3364e:	1ad2      	subs	r2, r2, r3
   33650:	4094      	lsls	r4, r2
   33652:	002a      	movs	r2, r5
   33654:	0264      	lsls	r4, r4, #9
   33656:	0a64      	lsrs	r4, r4, #9
   33658:	b2db      	uxtb	r3, r3
   3365a:	0264      	lsls	r4, r4, #9
   3365c:	05db      	lsls	r3, r3, #23
   3365e:	0a60      	lsrs	r0, r4, #9
   33660:	07d2      	lsls	r2, r2, #31
   33662:	4318      	orrs	r0, r3
   33664:	4310      	orrs	r0, r2
   33666:	bd70      	pop	{r4, r5, r6, pc}
   33668:	2b99      	cmp	r3, #153	; 0x99
   3366a:	dc19      	bgt.n	336a0 <__aeabi_i2f+0x70>
   3366c:	2299      	movs	r2, #153	; 0x99
   3366e:	1ad2      	subs	r2, r2, r3
   33670:	2a00      	cmp	r2, #0
   33672:	dd29      	ble.n	336c8 <__aeabi_i2f+0x98>
   33674:	4094      	lsls	r4, r2
   33676:	0022      	movs	r2, r4
   33678:	4c14      	ldr	r4, [pc, #80]	; (336cc <__aeabi_i2f+0x9c>)
   3367a:	4014      	ands	r4, r2
   3367c:	0751      	lsls	r1, r2, #29
   3367e:	d004      	beq.n	3368a <__aeabi_i2f+0x5a>
   33680:	210f      	movs	r1, #15
   33682:	400a      	ands	r2, r1
   33684:	2a04      	cmp	r2, #4
   33686:	d000      	beq.n	3368a <__aeabi_i2f+0x5a>
   33688:	3404      	adds	r4, #4
   3368a:	0162      	lsls	r2, r4, #5
   3368c:	d413      	bmi.n	336b6 <__aeabi_i2f+0x86>
   3368e:	01a4      	lsls	r4, r4, #6
   33690:	0a64      	lsrs	r4, r4, #9
   33692:	b2db      	uxtb	r3, r3
   33694:	002a      	movs	r2, r5
   33696:	e7e0      	b.n	3365a <__aeabi_i2f+0x2a>
   33698:	2200      	movs	r2, #0
   3369a:	2300      	movs	r3, #0
   3369c:	2400      	movs	r4, #0
   3369e:	e7dc      	b.n	3365a <__aeabi_i2f+0x2a>
   336a0:	2205      	movs	r2, #5
   336a2:	0021      	movs	r1, r4
   336a4:	1a12      	subs	r2, r2, r0
   336a6:	40d1      	lsrs	r1, r2
   336a8:	22b9      	movs	r2, #185	; 0xb9
   336aa:	1ad2      	subs	r2, r2, r3
   336ac:	4094      	lsls	r4, r2
   336ae:	1e62      	subs	r2, r4, #1
   336b0:	4194      	sbcs	r4, r2
   336b2:	430c      	orrs	r4, r1
   336b4:	e7da      	b.n	3366c <__aeabi_i2f+0x3c>
   336b6:	4b05      	ldr	r3, [pc, #20]	; (336cc <__aeabi_i2f+0x9c>)
   336b8:	002a      	movs	r2, r5
   336ba:	401c      	ands	r4, r3
   336bc:	239f      	movs	r3, #159	; 0x9f
   336be:	01a4      	lsls	r4, r4, #6
   336c0:	1a1b      	subs	r3, r3, r0
   336c2:	0a64      	lsrs	r4, r4, #9
   336c4:	b2db      	uxtb	r3, r3
   336c6:	e7c8      	b.n	3365a <__aeabi_i2f+0x2a>
   336c8:	0022      	movs	r2, r4
   336ca:	e7d5      	b.n	33678 <__aeabi_i2f+0x48>
   336cc:	fbffffff 	.word	0xfbffffff

000336d0 <__aeabi_dadd>:
   336d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   336d2:	4645      	mov	r5, r8
   336d4:	46de      	mov	lr, fp
   336d6:	4657      	mov	r7, sl
   336d8:	464e      	mov	r6, r9
   336da:	030c      	lsls	r4, r1, #12
   336dc:	b5e0      	push	{r5, r6, r7, lr}
   336de:	004e      	lsls	r6, r1, #1
   336e0:	0fc9      	lsrs	r1, r1, #31
   336e2:	4688      	mov	r8, r1
   336e4:	000d      	movs	r5, r1
   336e6:	0a61      	lsrs	r1, r4, #9
   336e8:	0f44      	lsrs	r4, r0, #29
   336ea:	430c      	orrs	r4, r1
   336ec:	00c7      	lsls	r7, r0, #3
   336ee:	0319      	lsls	r1, r3, #12
   336f0:	0058      	lsls	r0, r3, #1
   336f2:	0fdb      	lsrs	r3, r3, #31
   336f4:	469b      	mov	fp, r3
   336f6:	0a4b      	lsrs	r3, r1, #9
   336f8:	0f51      	lsrs	r1, r2, #29
   336fa:	430b      	orrs	r3, r1
   336fc:	0d76      	lsrs	r6, r6, #21
   336fe:	0d40      	lsrs	r0, r0, #21
   33700:	0019      	movs	r1, r3
   33702:	00d2      	lsls	r2, r2, #3
   33704:	45d8      	cmp	r8, fp
   33706:	d100      	bne.n	3370a <__aeabi_dadd+0x3a>
   33708:	e0ae      	b.n	33868 <__aeabi_dadd+0x198>
   3370a:	1a35      	subs	r5, r6, r0
   3370c:	2d00      	cmp	r5, #0
   3370e:	dc00      	bgt.n	33712 <__aeabi_dadd+0x42>
   33710:	e0f6      	b.n	33900 <__aeabi_dadd+0x230>
   33712:	2800      	cmp	r0, #0
   33714:	d10f      	bne.n	33736 <__aeabi_dadd+0x66>
   33716:	4313      	orrs	r3, r2
   33718:	d100      	bne.n	3371c <__aeabi_dadd+0x4c>
   3371a:	e0db      	b.n	338d4 <__aeabi_dadd+0x204>
   3371c:	1e6b      	subs	r3, r5, #1
   3371e:	2b00      	cmp	r3, #0
   33720:	d000      	beq.n	33724 <__aeabi_dadd+0x54>
   33722:	e137      	b.n	33994 <__aeabi_dadd+0x2c4>
   33724:	1aba      	subs	r2, r7, r2
   33726:	4297      	cmp	r7, r2
   33728:	41bf      	sbcs	r7, r7
   3372a:	1a64      	subs	r4, r4, r1
   3372c:	427f      	negs	r7, r7
   3372e:	1be4      	subs	r4, r4, r7
   33730:	2601      	movs	r6, #1
   33732:	0017      	movs	r7, r2
   33734:	e024      	b.n	33780 <__aeabi_dadd+0xb0>
   33736:	4bc6      	ldr	r3, [pc, #792]	; (33a50 <__aeabi_dadd+0x380>)
   33738:	429e      	cmp	r6, r3
   3373a:	d04d      	beq.n	337d8 <__aeabi_dadd+0x108>
   3373c:	2380      	movs	r3, #128	; 0x80
   3373e:	041b      	lsls	r3, r3, #16
   33740:	4319      	orrs	r1, r3
   33742:	2d38      	cmp	r5, #56	; 0x38
   33744:	dd00      	ble.n	33748 <__aeabi_dadd+0x78>
   33746:	e107      	b.n	33958 <__aeabi_dadd+0x288>
   33748:	2d1f      	cmp	r5, #31
   3374a:	dd00      	ble.n	3374e <__aeabi_dadd+0x7e>
   3374c:	e138      	b.n	339c0 <__aeabi_dadd+0x2f0>
   3374e:	2020      	movs	r0, #32
   33750:	1b43      	subs	r3, r0, r5
   33752:	469a      	mov	sl, r3
   33754:	000b      	movs	r3, r1
   33756:	4650      	mov	r0, sl
   33758:	4083      	lsls	r3, r0
   3375a:	4699      	mov	r9, r3
   3375c:	0013      	movs	r3, r2
   3375e:	4648      	mov	r0, r9
   33760:	40eb      	lsrs	r3, r5
   33762:	4318      	orrs	r0, r3
   33764:	0003      	movs	r3, r0
   33766:	4650      	mov	r0, sl
   33768:	4082      	lsls	r2, r0
   3376a:	1e50      	subs	r0, r2, #1
   3376c:	4182      	sbcs	r2, r0
   3376e:	40e9      	lsrs	r1, r5
   33770:	431a      	orrs	r2, r3
   33772:	1aba      	subs	r2, r7, r2
   33774:	1a61      	subs	r1, r4, r1
   33776:	4297      	cmp	r7, r2
   33778:	41a4      	sbcs	r4, r4
   3377a:	0017      	movs	r7, r2
   3377c:	4264      	negs	r4, r4
   3377e:	1b0c      	subs	r4, r1, r4
   33780:	0223      	lsls	r3, r4, #8
   33782:	d562      	bpl.n	3384a <__aeabi_dadd+0x17a>
   33784:	0264      	lsls	r4, r4, #9
   33786:	0a65      	lsrs	r5, r4, #9
   33788:	2d00      	cmp	r5, #0
   3378a:	d100      	bne.n	3378e <__aeabi_dadd+0xbe>
   3378c:	e0df      	b.n	3394e <__aeabi_dadd+0x27e>
   3378e:	0028      	movs	r0, r5
   33790:	f001 fc74 	bl	3507c <__clzsi2>
   33794:	0003      	movs	r3, r0
   33796:	3b08      	subs	r3, #8
   33798:	2b1f      	cmp	r3, #31
   3379a:	dd00      	ble.n	3379e <__aeabi_dadd+0xce>
   3379c:	e0d2      	b.n	33944 <__aeabi_dadd+0x274>
   3379e:	2220      	movs	r2, #32
   337a0:	003c      	movs	r4, r7
   337a2:	1ad2      	subs	r2, r2, r3
   337a4:	409d      	lsls	r5, r3
   337a6:	40d4      	lsrs	r4, r2
   337a8:	409f      	lsls	r7, r3
   337aa:	4325      	orrs	r5, r4
   337ac:	429e      	cmp	r6, r3
   337ae:	dd00      	ble.n	337b2 <__aeabi_dadd+0xe2>
   337b0:	e0c4      	b.n	3393c <__aeabi_dadd+0x26c>
   337b2:	1b9e      	subs	r6, r3, r6
   337b4:	1c73      	adds	r3, r6, #1
   337b6:	2b1f      	cmp	r3, #31
   337b8:	dd00      	ble.n	337bc <__aeabi_dadd+0xec>
   337ba:	e0f1      	b.n	339a0 <__aeabi_dadd+0x2d0>
   337bc:	2220      	movs	r2, #32
   337be:	0038      	movs	r0, r7
   337c0:	0029      	movs	r1, r5
   337c2:	1ad2      	subs	r2, r2, r3
   337c4:	40d8      	lsrs	r0, r3
   337c6:	4091      	lsls	r1, r2
   337c8:	4097      	lsls	r7, r2
   337ca:	002c      	movs	r4, r5
   337cc:	4301      	orrs	r1, r0
   337ce:	1e78      	subs	r0, r7, #1
   337d0:	4187      	sbcs	r7, r0
   337d2:	40dc      	lsrs	r4, r3
   337d4:	2600      	movs	r6, #0
   337d6:	430f      	orrs	r7, r1
   337d8:	077b      	lsls	r3, r7, #29
   337da:	d009      	beq.n	337f0 <__aeabi_dadd+0x120>
   337dc:	230f      	movs	r3, #15
   337de:	403b      	ands	r3, r7
   337e0:	2b04      	cmp	r3, #4
   337e2:	d005      	beq.n	337f0 <__aeabi_dadd+0x120>
   337e4:	1d3b      	adds	r3, r7, #4
   337e6:	42bb      	cmp	r3, r7
   337e8:	41bf      	sbcs	r7, r7
   337ea:	427f      	negs	r7, r7
   337ec:	19e4      	adds	r4, r4, r7
   337ee:	001f      	movs	r7, r3
   337f0:	0223      	lsls	r3, r4, #8
   337f2:	d52c      	bpl.n	3384e <__aeabi_dadd+0x17e>
   337f4:	4b96      	ldr	r3, [pc, #600]	; (33a50 <__aeabi_dadd+0x380>)
   337f6:	3601      	adds	r6, #1
   337f8:	429e      	cmp	r6, r3
   337fa:	d100      	bne.n	337fe <__aeabi_dadd+0x12e>
   337fc:	e09a      	b.n	33934 <__aeabi_dadd+0x264>
   337fe:	4645      	mov	r5, r8
   33800:	4b94      	ldr	r3, [pc, #592]	; (33a54 <__aeabi_dadd+0x384>)
   33802:	08ff      	lsrs	r7, r7, #3
   33804:	401c      	ands	r4, r3
   33806:	0760      	lsls	r0, r4, #29
   33808:	0576      	lsls	r6, r6, #21
   3380a:	0264      	lsls	r4, r4, #9
   3380c:	4307      	orrs	r7, r0
   3380e:	0b24      	lsrs	r4, r4, #12
   33810:	0d76      	lsrs	r6, r6, #21
   33812:	2100      	movs	r1, #0
   33814:	0324      	lsls	r4, r4, #12
   33816:	0b23      	lsrs	r3, r4, #12
   33818:	0d0c      	lsrs	r4, r1, #20
   3381a:	4a8f      	ldr	r2, [pc, #572]	; (33a58 <__aeabi_dadd+0x388>)
   3381c:	0524      	lsls	r4, r4, #20
   3381e:	431c      	orrs	r4, r3
   33820:	4014      	ands	r4, r2
   33822:	0533      	lsls	r3, r6, #20
   33824:	4323      	orrs	r3, r4
   33826:	005b      	lsls	r3, r3, #1
   33828:	07ed      	lsls	r5, r5, #31
   3382a:	085b      	lsrs	r3, r3, #1
   3382c:	432b      	orrs	r3, r5
   3382e:	0038      	movs	r0, r7
   33830:	0019      	movs	r1, r3
   33832:	bc3c      	pop	{r2, r3, r4, r5}
   33834:	4690      	mov	r8, r2
   33836:	4699      	mov	r9, r3
   33838:	46a2      	mov	sl, r4
   3383a:	46ab      	mov	fp, r5
   3383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3383e:	4664      	mov	r4, ip
   33840:	4304      	orrs	r4, r0
   33842:	d100      	bne.n	33846 <__aeabi_dadd+0x176>
   33844:	e211      	b.n	33c6a <__aeabi_dadd+0x59a>
   33846:	0004      	movs	r4, r0
   33848:	4667      	mov	r7, ip
   3384a:	077b      	lsls	r3, r7, #29
   3384c:	d1c6      	bne.n	337dc <__aeabi_dadd+0x10c>
   3384e:	4645      	mov	r5, r8
   33850:	0760      	lsls	r0, r4, #29
   33852:	08ff      	lsrs	r7, r7, #3
   33854:	4307      	orrs	r7, r0
   33856:	08e4      	lsrs	r4, r4, #3
   33858:	4b7d      	ldr	r3, [pc, #500]	; (33a50 <__aeabi_dadd+0x380>)
   3385a:	429e      	cmp	r6, r3
   3385c:	d030      	beq.n	338c0 <__aeabi_dadd+0x1f0>
   3385e:	0324      	lsls	r4, r4, #12
   33860:	0576      	lsls	r6, r6, #21
   33862:	0b24      	lsrs	r4, r4, #12
   33864:	0d76      	lsrs	r6, r6, #21
   33866:	e7d4      	b.n	33812 <__aeabi_dadd+0x142>
   33868:	1a33      	subs	r3, r6, r0
   3386a:	469a      	mov	sl, r3
   3386c:	2b00      	cmp	r3, #0
   3386e:	dd78      	ble.n	33962 <__aeabi_dadd+0x292>
   33870:	2800      	cmp	r0, #0
   33872:	d031      	beq.n	338d8 <__aeabi_dadd+0x208>
   33874:	4876      	ldr	r0, [pc, #472]	; (33a50 <__aeabi_dadd+0x380>)
   33876:	4286      	cmp	r6, r0
   33878:	d0ae      	beq.n	337d8 <__aeabi_dadd+0x108>
   3387a:	2080      	movs	r0, #128	; 0x80
   3387c:	0400      	lsls	r0, r0, #16
   3387e:	4301      	orrs	r1, r0
   33880:	4653      	mov	r3, sl
   33882:	2b38      	cmp	r3, #56	; 0x38
   33884:	dc00      	bgt.n	33888 <__aeabi_dadd+0x1b8>
   33886:	e0e9      	b.n	33a5c <__aeabi_dadd+0x38c>
   33888:	430a      	orrs	r2, r1
   3388a:	1e51      	subs	r1, r2, #1
   3388c:	418a      	sbcs	r2, r1
   3388e:	2100      	movs	r1, #0
   33890:	19d2      	adds	r2, r2, r7
   33892:	42ba      	cmp	r2, r7
   33894:	41bf      	sbcs	r7, r7
   33896:	1909      	adds	r1, r1, r4
   33898:	427c      	negs	r4, r7
   3389a:	0017      	movs	r7, r2
   3389c:	190c      	adds	r4, r1, r4
   3389e:	0223      	lsls	r3, r4, #8
   338a0:	d5d3      	bpl.n	3384a <__aeabi_dadd+0x17a>
   338a2:	4b6b      	ldr	r3, [pc, #428]	; (33a50 <__aeabi_dadd+0x380>)
   338a4:	3601      	adds	r6, #1
   338a6:	429e      	cmp	r6, r3
   338a8:	d100      	bne.n	338ac <__aeabi_dadd+0x1dc>
   338aa:	e13a      	b.n	33b22 <__aeabi_dadd+0x452>
   338ac:	2001      	movs	r0, #1
   338ae:	4b69      	ldr	r3, [pc, #420]	; (33a54 <__aeabi_dadd+0x384>)
   338b0:	401c      	ands	r4, r3
   338b2:	087b      	lsrs	r3, r7, #1
   338b4:	4007      	ands	r7, r0
   338b6:	431f      	orrs	r7, r3
   338b8:	07e0      	lsls	r0, r4, #31
   338ba:	4307      	orrs	r7, r0
   338bc:	0864      	lsrs	r4, r4, #1
   338be:	e78b      	b.n	337d8 <__aeabi_dadd+0x108>
   338c0:	0023      	movs	r3, r4
   338c2:	433b      	orrs	r3, r7
   338c4:	d100      	bne.n	338c8 <__aeabi_dadd+0x1f8>
   338c6:	e1cb      	b.n	33c60 <__aeabi_dadd+0x590>
   338c8:	2280      	movs	r2, #128	; 0x80
   338ca:	0312      	lsls	r2, r2, #12
   338cc:	4314      	orrs	r4, r2
   338ce:	0324      	lsls	r4, r4, #12
   338d0:	0b24      	lsrs	r4, r4, #12
   338d2:	e79e      	b.n	33812 <__aeabi_dadd+0x142>
   338d4:	002e      	movs	r6, r5
   338d6:	e77f      	b.n	337d8 <__aeabi_dadd+0x108>
   338d8:	0008      	movs	r0, r1
   338da:	4310      	orrs	r0, r2
   338dc:	d100      	bne.n	338e0 <__aeabi_dadd+0x210>
   338de:	e0b4      	b.n	33a4a <__aeabi_dadd+0x37a>
   338e0:	1e58      	subs	r0, r3, #1
   338e2:	2800      	cmp	r0, #0
   338e4:	d000      	beq.n	338e8 <__aeabi_dadd+0x218>
   338e6:	e0de      	b.n	33aa6 <__aeabi_dadd+0x3d6>
   338e8:	18ba      	adds	r2, r7, r2
   338ea:	42ba      	cmp	r2, r7
   338ec:	419b      	sbcs	r3, r3
   338ee:	1864      	adds	r4, r4, r1
   338f0:	425b      	negs	r3, r3
   338f2:	18e4      	adds	r4, r4, r3
   338f4:	0017      	movs	r7, r2
   338f6:	2601      	movs	r6, #1
   338f8:	0223      	lsls	r3, r4, #8
   338fa:	d5a6      	bpl.n	3384a <__aeabi_dadd+0x17a>
   338fc:	2602      	movs	r6, #2
   338fe:	e7d5      	b.n	338ac <__aeabi_dadd+0x1dc>
   33900:	2d00      	cmp	r5, #0
   33902:	d16e      	bne.n	339e2 <__aeabi_dadd+0x312>
   33904:	1c70      	adds	r0, r6, #1
   33906:	0540      	lsls	r0, r0, #21
   33908:	0d40      	lsrs	r0, r0, #21
   3390a:	2801      	cmp	r0, #1
   3390c:	dc00      	bgt.n	33910 <__aeabi_dadd+0x240>
   3390e:	e0f9      	b.n	33b04 <__aeabi_dadd+0x434>
   33910:	1ab8      	subs	r0, r7, r2
   33912:	4684      	mov	ip, r0
   33914:	4287      	cmp	r7, r0
   33916:	4180      	sbcs	r0, r0
   33918:	1ae5      	subs	r5, r4, r3
   3391a:	4240      	negs	r0, r0
   3391c:	1a2d      	subs	r5, r5, r0
   3391e:	0228      	lsls	r0, r5, #8
   33920:	d400      	bmi.n	33924 <__aeabi_dadd+0x254>
   33922:	e089      	b.n	33a38 <__aeabi_dadd+0x368>
   33924:	1bd7      	subs	r7, r2, r7
   33926:	42ba      	cmp	r2, r7
   33928:	4192      	sbcs	r2, r2
   3392a:	1b1c      	subs	r4, r3, r4
   3392c:	4252      	negs	r2, r2
   3392e:	1aa5      	subs	r5, r4, r2
   33930:	46d8      	mov	r8, fp
   33932:	e729      	b.n	33788 <__aeabi_dadd+0xb8>
   33934:	4645      	mov	r5, r8
   33936:	2400      	movs	r4, #0
   33938:	2700      	movs	r7, #0
   3393a:	e76a      	b.n	33812 <__aeabi_dadd+0x142>
   3393c:	4c45      	ldr	r4, [pc, #276]	; (33a54 <__aeabi_dadd+0x384>)
   3393e:	1af6      	subs	r6, r6, r3
   33940:	402c      	ands	r4, r5
   33942:	e749      	b.n	337d8 <__aeabi_dadd+0x108>
   33944:	003d      	movs	r5, r7
   33946:	3828      	subs	r0, #40	; 0x28
   33948:	4085      	lsls	r5, r0
   3394a:	2700      	movs	r7, #0
   3394c:	e72e      	b.n	337ac <__aeabi_dadd+0xdc>
   3394e:	0038      	movs	r0, r7
   33950:	f001 fb94 	bl	3507c <__clzsi2>
   33954:	3020      	adds	r0, #32
   33956:	e71d      	b.n	33794 <__aeabi_dadd+0xc4>
   33958:	430a      	orrs	r2, r1
   3395a:	1e51      	subs	r1, r2, #1
   3395c:	418a      	sbcs	r2, r1
   3395e:	2100      	movs	r1, #0
   33960:	e707      	b.n	33772 <__aeabi_dadd+0xa2>
   33962:	2b00      	cmp	r3, #0
   33964:	d000      	beq.n	33968 <__aeabi_dadd+0x298>
   33966:	e0f3      	b.n	33b50 <__aeabi_dadd+0x480>
   33968:	1c70      	adds	r0, r6, #1
   3396a:	0543      	lsls	r3, r0, #21
   3396c:	0d5b      	lsrs	r3, r3, #21
   3396e:	2b01      	cmp	r3, #1
   33970:	dc00      	bgt.n	33974 <__aeabi_dadd+0x2a4>
   33972:	e0ad      	b.n	33ad0 <__aeabi_dadd+0x400>
   33974:	4b36      	ldr	r3, [pc, #216]	; (33a50 <__aeabi_dadd+0x380>)
   33976:	4298      	cmp	r0, r3
   33978:	d100      	bne.n	3397c <__aeabi_dadd+0x2ac>
   3397a:	e0d1      	b.n	33b20 <__aeabi_dadd+0x450>
   3397c:	18ba      	adds	r2, r7, r2
   3397e:	42ba      	cmp	r2, r7
   33980:	41bf      	sbcs	r7, r7
   33982:	1864      	adds	r4, r4, r1
   33984:	427f      	negs	r7, r7
   33986:	19e4      	adds	r4, r4, r7
   33988:	07e7      	lsls	r7, r4, #31
   3398a:	0852      	lsrs	r2, r2, #1
   3398c:	4317      	orrs	r7, r2
   3398e:	0864      	lsrs	r4, r4, #1
   33990:	0006      	movs	r6, r0
   33992:	e721      	b.n	337d8 <__aeabi_dadd+0x108>
   33994:	482e      	ldr	r0, [pc, #184]	; (33a50 <__aeabi_dadd+0x380>)
   33996:	4285      	cmp	r5, r0
   33998:	d100      	bne.n	3399c <__aeabi_dadd+0x2cc>
   3399a:	e093      	b.n	33ac4 <__aeabi_dadd+0x3f4>
   3399c:	001d      	movs	r5, r3
   3399e:	e6d0      	b.n	33742 <__aeabi_dadd+0x72>
   339a0:	0029      	movs	r1, r5
   339a2:	3e1f      	subs	r6, #31
   339a4:	40f1      	lsrs	r1, r6
   339a6:	2b20      	cmp	r3, #32
   339a8:	d100      	bne.n	339ac <__aeabi_dadd+0x2dc>
   339aa:	e08d      	b.n	33ac8 <__aeabi_dadd+0x3f8>
   339ac:	2240      	movs	r2, #64	; 0x40
   339ae:	1ad3      	subs	r3, r2, r3
   339b0:	409d      	lsls	r5, r3
   339b2:	432f      	orrs	r7, r5
   339b4:	1e7d      	subs	r5, r7, #1
   339b6:	41af      	sbcs	r7, r5
   339b8:	2400      	movs	r4, #0
   339ba:	430f      	orrs	r7, r1
   339bc:	2600      	movs	r6, #0
   339be:	e744      	b.n	3384a <__aeabi_dadd+0x17a>
   339c0:	002b      	movs	r3, r5
   339c2:	0008      	movs	r0, r1
   339c4:	3b20      	subs	r3, #32
   339c6:	40d8      	lsrs	r0, r3
   339c8:	0003      	movs	r3, r0
   339ca:	2d20      	cmp	r5, #32
   339cc:	d100      	bne.n	339d0 <__aeabi_dadd+0x300>
   339ce:	e07d      	b.n	33acc <__aeabi_dadd+0x3fc>
   339d0:	2040      	movs	r0, #64	; 0x40
   339d2:	1b45      	subs	r5, r0, r5
   339d4:	40a9      	lsls	r1, r5
   339d6:	430a      	orrs	r2, r1
   339d8:	1e51      	subs	r1, r2, #1
   339da:	418a      	sbcs	r2, r1
   339dc:	2100      	movs	r1, #0
   339de:	431a      	orrs	r2, r3
   339e0:	e6c7      	b.n	33772 <__aeabi_dadd+0xa2>
   339e2:	2e00      	cmp	r6, #0
   339e4:	d050      	beq.n	33a88 <__aeabi_dadd+0x3b8>
   339e6:	4e1a      	ldr	r6, [pc, #104]	; (33a50 <__aeabi_dadd+0x380>)
   339e8:	42b0      	cmp	r0, r6
   339ea:	d057      	beq.n	33a9c <__aeabi_dadd+0x3cc>
   339ec:	2680      	movs	r6, #128	; 0x80
   339ee:	426b      	negs	r3, r5
   339f0:	4699      	mov	r9, r3
   339f2:	0436      	lsls	r6, r6, #16
   339f4:	4334      	orrs	r4, r6
   339f6:	464b      	mov	r3, r9
   339f8:	2b38      	cmp	r3, #56	; 0x38
   339fa:	dd00      	ble.n	339fe <__aeabi_dadd+0x32e>
   339fc:	e0d6      	b.n	33bac <__aeabi_dadd+0x4dc>
   339fe:	2b1f      	cmp	r3, #31
   33a00:	dd00      	ble.n	33a04 <__aeabi_dadd+0x334>
   33a02:	e135      	b.n	33c70 <__aeabi_dadd+0x5a0>
   33a04:	2620      	movs	r6, #32
   33a06:	1af5      	subs	r5, r6, r3
   33a08:	0026      	movs	r6, r4
   33a0a:	40ae      	lsls	r6, r5
   33a0c:	46b2      	mov	sl, r6
   33a0e:	003e      	movs	r6, r7
   33a10:	40de      	lsrs	r6, r3
   33a12:	46ac      	mov	ip, r5
   33a14:	0035      	movs	r5, r6
   33a16:	4656      	mov	r6, sl
   33a18:	432e      	orrs	r6, r5
   33a1a:	4665      	mov	r5, ip
   33a1c:	40af      	lsls	r7, r5
   33a1e:	1e7d      	subs	r5, r7, #1
   33a20:	41af      	sbcs	r7, r5
   33a22:	40dc      	lsrs	r4, r3
   33a24:	4337      	orrs	r7, r6
   33a26:	1bd7      	subs	r7, r2, r7
   33a28:	42ba      	cmp	r2, r7
   33a2a:	4192      	sbcs	r2, r2
   33a2c:	1b0c      	subs	r4, r1, r4
   33a2e:	4252      	negs	r2, r2
   33a30:	1aa4      	subs	r4, r4, r2
   33a32:	0006      	movs	r6, r0
   33a34:	46d8      	mov	r8, fp
   33a36:	e6a3      	b.n	33780 <__aeabi_dadd+0xb0>
   33a38:	4664      	mov	r4, ip
   33a3a:	4667      	mov	r7, ip
   33a3c:	432c      	orrs	r4, r5
   33a3e:	d000      	beq.n	33a42 <__aeabi_dadd+0x372>
   33a40:	e6a2      	b.n	33788 <__aeabi_dadd+0xb8>
   33a42:	2500      	movs	r5, #0
   33a44:	2600      	movs	r6, #0
   33a46:	2700      	movs	r7, #0
   33a48:	e706      	b.n	33858 <__aeabi_dadd+0x188>
   33a4a:	001e      	movs	r6, r3
   33a4c:	e6c4      	b.n	337d8 <__aeabi_dadd+0x108>
   33a4e:	46c0      	nop			; (mov r8, r8)
   33a50:	000007ff 	.word	0x000007ff
   33a54:	ff7fffff 	.word	0xff7fffff
   33a58:	800fffff 	.word	0x800fffff
   33a5c:	2b1f      	cmp	r3, #31
   33a5e:	dc63      	bgt.n	33b28 <__aeabi_dadd+0x458>
   33a60:	2020      	movs	r0, #32
   33a62:	1ac3      	subs	r3, r0, r3
   33a64:	0008      	movs	r0, r1
   33a66:	4098      	lsls	r0, r3
   33a68:	469c      	mov	ip, r3
   33a6a:	4683      	mov	fp, r0
   33a6c:	4653      	mov	r3, sl
   33a6e:	0010      	movs	r0, r2
   33a70:	40d8      	lsrs	r0, r3
   33a72:	0003      	movs	r3, r0
   33a74:	4658      	mov	r0, fp
   33a76:	4318      	orrs	r0, r3
   33a78:	4663      	mov	r3, ip
   33a7a:	409a      	lsls	r2, r3
   33a7c:	1e53      	subs	r3, r2, #1
   33a7e:	419a      	sbcs	r2, r3
   33a80:	4653      	mov	r3, sl
   33a82:	4302      	orrs	r2, r0
   33a84:	40d9      	lsrs	r1, r3
   33a86:	e703      	b.n	33890 <__aeabi_dadd+0x1c0>
   33a88:	0026      	movs	r6, r4
   33a8a:	433e      	orrs	r6, r7
   33a8c:	d006      	beq.n	33a9c <__aeabi_dadd+0x3cc>
   33a8e:	43eb      	mvns	r3, r5
   33a90:	4699      	mov	r9, r3
   33a92:	2b00      	cmp	r3, #0
   33a94:	d0c7      	beq.n	33a26 <__aeabi_dadd+0x356>
   33a96:	4e94      	ldr	r6, [pc, #592]	; (33ce8 <__aeabi_dadd+0x618>)
   33a98:	42b0      	cmp	r0, r6
   33a9a:	d1ac      	bne.n	339f6 <__aeabi_dadd+0x326>
   33a9c:	000c      	movs	r4, r1
   33a9e:	0017      	movs	r7, r2
   33aa0:	0006      	movs	r6, r0
   33aa2:	46d8      	mov	r8, fp
   33aa4:	e698      	b.n	337d8 <__aeabi_dadd+0x108>
   33aa6:	4b90      	ldr	r3, [pc, #576]	; (33ce8 <__aeabi_dadd+0x618>)
   33aa8:	459a      	cmp	sl, r3
   33aaa:	d00b      	beq.n	33ac4 <__aeabi_dadd+0x3f4>
   33aac:	4682      	mov	sl, r0
   33aae:	e6e7      	b.n	33880 <__aeabi_dadd+0x1b0>
   33ab0:	2800      	cmp	r0, #0
   33ab2:	d000      	beq.n	33ab6 <__aeabi_dadd+0x3e6>
   33ab4:	e09e      	b.n	33bf4 <__aeabi_dadd+0x524>
   33ab6:	0018      	movs	r0, r3
   33ab8:	4310      	orrs	r0, r2
   33aba:	d100      	bne.n	33abe <__aeabi_dadd+0x3ee>
   33abc:	e0e9      	b.n	33c92 <__aeabi_dadd+0x5c2>
   33abe:	001c      	movs	r4, r3
   33ac0:	0017      	movs	r7, r2
   33ac2:	46d8      	mov	r8, fp
   33ac4:	4e88      	ldr	r6, [pc, #544]	; (33ce8 <__aeabi_dadd+0x618>)
   33ac6:	e687      	b.n	337d8 <__aeabi_dadd+0x108>
   33ac8:	2500      	movs	r5, #0
   33aca:	e772      	b.n	339b2 <__aeabi_dadd+0x2e2>
   33acc:	2100      	movs	r1, #0
   33ace:	e782      	b.n	339d6 <__aeabi_dadd+0x306>
   33ad0:	0023      	movs	r3, r4
   33ad2:	433b      	orrs	r3, r7
   33ad4:	2e00      	cmp	r6, #0
   33ad6:	d000      	beq.n	33ada <__aeabi_dadd+0x40a>
   33ad8:	e0ab      	b.n	33c32 <__aeabi_dadd+0x562>
   33ada:	2b00      	cmp	r3, #0
   33adc:	d100      	bne.n	33ae0 <__aeabi_dadd+0x410>
   33ade:	e0e7      	b.n	33cb0 <__aeabi_dadd+0x5e0>
   33ae0:	000b      	movs	r3, r1
   33ae2:	4313      	orrs	r3, r2
   33ae4:	d100      	bne.n	33ae8 <__aeabi_dadd+0x418>
   33ae6:	e677      	b.n	337d8 <__aeabi_dadd+0x108>
   33ae8:	18ba      	adds	r2, r7, r2
   33aea:	42ba      	cmp	r2, r7
   33aec:	41bf      	sbcs	r7, r7
   33aee:	1864      	adds	r4, r4, r1
   33af0:	427f      	negs	r7, r7
   33af2:	19e4      	adds	r4, r4, r7
   33af4:	0223      	lsls	r3, r4, #8
   33af6:	d400      	bmi.n	33afa <__aeabi_dadd+0x42a>
   33af8:	e0f2      	b.n	33ce0 <__aeabi_dadd+0x610>
   33afa:	4b7c      	ldr	r3, [pc, #496]	; (33cec <__aeabi_dadd+0x61c>)
   33afc:	0017      	movs	r7, r2
   33afe:	401c      	ands	r4, r3
   33b00:	0006      	movs	r6, r0
   33b02:	e669      	b.n	337d8 <__aeabi_dadd+0x108>
   33b04:	0020      	movs	r0, r4
   33b06:	4338      	orrs	r0, r7
   33b08:	2e00      	cmp	r6, #0
   33b0a:	d1d1      	bne.n	33ab0 <__aeabi_dadd+0x3e0>
   33b0c:	2800      	cmp	r0, #0
   33b0e:	d15b      	bne.n	33bc8 <__aeabi_dadd+0x4f8>
   33b10:	001c      	movs	r4, r3
   33b12:	4314      	orrs	r4, r2
   33b14:	d100      	bne.n	33b18 <__aeabi_dadd+0x448>
   33b16:	e0a8      	b.n	33c6a <__aeabi_dadd+0x59a>
   33b18:	001c      	movs	r4, r3
   33b1a:	0017      	movs	r7, r2
   33b1c:	46d8      	mov	r8, fp
   33b1e:	e65b      	b.n	337d8 <__aeabi_dadd+0x108>
   33b20:	0006      	movs	r6, r0
   33b22:	2400      	movs	r4, #0
   33b24:	2700      	movs	r7, #0
   33b26:	e697      	b.n	33858 <__aeabi_dadd+0x188>
   33b28:	4650      	mov	r0, sl
   33b2a:	000b      	movs	r3, r1
   33b2c:	3820      	subs	r0, #32
   33b2e:	40c3      	lsrs	r3, r0
   33b30:	4699      	mov	r9, r3
   33b32:	4653      	mov	r3, sl
   33b34:	2b20      	cmp	r3, #32
   33b36:	d100      	bne.n	33b3a <__aeabi_dadd+0x46a>
   33b38:	e095      	b.n	33c66 <__aeabi_dadd+0x596>
   33b3a:	2340      	movs	r3, #64	; 0x40
   33b3c:	4650      	mov	r0, sl
   33b3e:	1a1b      	subs	r3, r3, r0
   33b40:	4099      	lsls	r1, r3
   33b42:	430a      	orrs	r2, r1
   33b44:	1e51      	subs	r1, r2, #1
   33b46:	418a      	sbcs	r2, r1
   33b48:	464b      	mov	r3, r9
   33b4a:	2100      	movs	r1, #0
   33b4c:	431a      	orrs	r2, r3
   33b4e:	e69f      	b.n	33890 <__aeabi_dadd+0x1c0>
   33b50:	2e00      	cmp	r6, #0
   33b52:	d130      	bne.n	33bb6 <__aeabi_dadd+0x4e6>
   33b54:	0026      	movs	r6, r4
   33b56:	433e      	orrs	r6, r7
   33b58:	d067      	beq.n	33c2a <__aeabi_dadd+0x55a>
   33b5a:	43db      	mvns	r3, r3
   33b5c:	469a      	mov	sl, r3
   33b5e:	2b00      	cmp	r3, #0
   33b60:	d01c      	beq.n	33b9c <__aeabi_dadd+0x4cc>
   33b62:	4e61      	ldr	r6, [pc, #388]	; (33ce8 <__aeabi_dadd+0x618>)
   33b64:	42b0      	cmp	r0, r6
   33b66:	d060      	beq.n	33c2a <__aeabi_dadd+0x55a>
   33b68:	4653      	mov	r3, sl
   33b6a:	2b38      	cmp	r3, #56	; 0x38
   33b6c:	dd00      	ble.n	33b70 <__aeabi_dadd+0x4a0>
   33b6e:	e096      	b.n	33c9e <__aeabi_dadd+0x5ce>
   33b70:	2b1f      	cmp	r3, #31
   33b72:	dd00      	ble.n	33b76 <__aeabi_dadd+0x4a6>
   33b74:	e09f      	b.n	33cb6 <__aeabi_dadd+0x5e6>
   33b76:	2620      	movs	r6, #32
   33b78:	1af3      	subs	r3, r6, r3
   33b7a:	0026      	movs	r6, r4
   33b7c:	409e      	lsls	r6, r3
   33b7e:	469c      	mov	ip, r3
   33b80:	46b3      	mov	fp, r6
   33b82:	4653      	mov	r3, sl
   33b84:	003e      	movs	r6, r7
   33b86:	40de      	lsrs	r6, r3
   33b88:	0033      	movs	r3, r6
   33b8a:	465e      	mov	r6, fp
   33b8c:	431e      	orrs	r6, r3
   33b8e:	4663      	mov	r3, ip
   33b90:	409f      	lsls	r7, r3
   33b92:	1e7b      	subs	r3, r7, #1
   33b94:	419f      	sbcs	r7, r3
   33b96:	4653      	mov	r3, sl
   33b98:	40dc      	lsrs	r4, r3
   33b9a:	4337      	orrs	r7, r6
   33b9c:	18bf      	adds	r7, r7, r2
   33b9e:	4297      	cmp	r7, r2
   33ba0:	4192      	sbcs	r2, r2
   33ba2:	1864      	adds	r4, r4, r1
   33ba4:	4252      	negs	r2, r2
   33ba6:	18a4      	adds	r4, r4, r2
   33ba8:	0006      	movs	r6, r0
   33baa:	e678      	b.n	3389e <__aeabi_dadd+0x1ce>
   33bac:	4327      	orrs	r7, r4
   33bae:	1e7c      	subs	r4, r7, #1
   33bb0:	41a7      	sbcs	r7, r4
   33bb2:	2400      	movs	r4, #0
   33bb4:	e737      	b.n	33a26 <__aeabi_dadd+0x356>
   33bb6:	4e4c      	ldr	r6, [pc, #304]	; (33ce8 <__aeabi_dadd+0x618>)
   33bb8:	42b0      	cmp	r0, r6
   33bba:	d036      	beq.n	33c2a <__aeabi_dadd+0x55a>
   33bbc:	2680      	movs	r6, #128	; 0x80
   33bbe:	425b      	negs	r3, r3
   33bc0:	0436      	lsls	r6, r6, #16
   33bc2:	469a      	mov	sl, r3
   33bc4:	4334      	orrs	r4, r6
   33bc6:	e7cf      	b.n	33b68 <__aeabi_dadd+0x498>
   33bc8:	0018      	movs	r0, r3
   33bca:	4310      	orrs	r0, r2
   33bcc:	d100      	bne.n	33bd0 <__aeabi_dadd+0x500>
   33bce:	e603      	b.n	337d8 <__aeabi_dadd+0x108>
   33bd0:	1ab8      	subs	r0, r7, r2
   33bd2:	4684      	mov	ip, r0
   33bd4:	4567      	cmp	r7, ip
   33bd6:	41ad      	sbcs	r5, r5
   33bd8:	1ae0      	subs	r0, r4, r3
   33bda:	426d      	negs	r5, r5
   33bdc:	1b40      	subs	r0, r0, r5
   33bde:	0205      	lsls	r5, r0, #8
   33be0:	d400      	bmi.n	33be4 <__aeabi_dadd+0x514>
   33be2:	e62c      	b.n	3383e <__aeabi_dadd+0x16e>
   33be4:	1bd7      	subs	r7, r2, r7
   33be6:	42ba      	cmp	r2, r7
   33be8:	4192      	sbcs	r2, r2
   33bea:	1b1c      	subs	r4, r3, r4
   33bec:	4252      	negs	r2, r2
   33bee:	1aa4      	subs	r4, r4, r2
   33bf0:	46d8      	mov	r8, fp
   33bf2:	e5f1      	b.n	337d8 <__aeabi_dadd+0x108>
   33bf4:	0018      	movs	r0, r3
   33bf6:	4310      	orrs	r0, r2
   33bf8:	d100      	bne.n	33bfc <__aeabi_dadd+0x52c>
   33bfa:	e763      	b.n	33ac4 <__aeabi_dadd+0x3f4>
   33bfc:	08f8      	lsrs	r0, r7, #3
   33bfe:	0767      	lsls	r7, r4, #29
   33c00:	4307      	orrs	r7, r0
   33c02:	2080      	movs	r0, #128	; 0x80
   33c04:	08e4      	lsrs	r4, r4, #3
   33c06:	0300      	lsls	r0, r0, #12
   33c08:	4204      	tst	r4, r0
   33c0a:	d008      	beq.n	33c1e <__aeabi_dadd+0x54e>
   33c0c:	08dd      	lsrs	r5, r3, #3
   33c0e:	4205      	tst	r5, r0
   33c10:	d105      	bne.n	33c1e <__aeabi_dadd+0x54e>
   33c12:	08d2      	lsrs	r2, r2, #3
   33c14:	0759      	lsls	r1, r3, #29
   33c16:	4311      	orrs	r1, r2
   33c18:	000f      	movs	r7, r1
   33c1a:	002c      	movs	r4, r5
   33c1c:	46d8      	mov	r8, fp
   33c1e:	0f7b      	lsrs	r3, r7, #29
   33c20:	00e4      	lsls	r4, r4, #3
   33c22:	431c      	orrs	r4, r3
   33c24:	00ff      	lsls	r7, r7, #3
   33c26:	4e30      	ldr	r6, [pc, #192]	; (33ce8 <__aeabi_dadd+0x618>)
   33c28:	e5d6      	b.n	337d8 <__aeabi_dadd+0x108>
   33c2a:	000c      	movs	r4, r1
   33c2c:	0017      	movs	r7, r2
   33c2e:	0006      	movs	r6, r0
   33c30:	e5d2      	b.n	337d8 <__aeabi_dadd+0x108>
   33c32:	2b00      	cmp	r3, #0
   33c34:	d038      	beq.n	33ca8 <__aeabi_dadd+0x5d8>
   33c36:	000b      	movs	r3, r1
   33c38:	4313      	orrs	r3, r2
   33c3a:	d100      	bne.n	33c3e <__aeabi_dadd+0x56e>
   33c3c:	e742      	b.n	33ac4 <__aeabi_dadd+0x3f4>
   33c3e:	08f8      	lsrs	r0, r7, #3
   33c40:	0767      	lsls	r7, r4, #29
   33c42:	4307      	orrs	r7, r0
   33c44:	2080      	movs	r0, #128	; 0x80
   33c46:	08e4      	lsrs	r4, r4, #3
   33c48:	0300      	lsls	r0, r0, #12
   33c4a:	4204      	tst	r4, r0
   33c4c:	d0e7      	beq.n	33c1e <__aeabi_dadd+0x54e>
   33c4e:	08cb      	lsrs	r3, r1, #3
   33c50:	4203      	tst	r3, r0
   33c52:	d1e4      	bne.n	33c1e <__aeabi_dadd+0x54e>
   33c54:	08d2      	lsrs	r2, r2, #3
   33c56:	0749      	lsls	r1, r1, #29
   33c58:	4311      	orrs	r1, r2
   33c5a:	000f      	movs	r7, r1
   33c5c:	001c      	movs	r4, r3
   33c5e:	e7de      	b.n	33c1e <__aeabi_dadd+0x54e>
   33c60:	2700      	movs	r7, #0
   33c62:	2400      	movs	r4, #0
   33c64:	e5d5      	b.n	33812 <__aeabi_dadd+0x142>
   33c66:	2100      	movs	r1, #0
   33c68:	e76b      	b.n	33b42 <__aeabi_dadd+0x472>
   33c6a:	2500      	movs	r5, #0
   33c6c:	2700      	movs	r7, #0
   33c6e:	e5f3      	b.n	33858 <__aeabi_dadd+0x188>
   33c70:	464e      	mov	r6, r9
   33c72:	0025      	movs	r5, r4
   33c74:	3e20      	subs	r6, #32
   33c76:	40f5      	lsrs	r5, r6
   33c78:	464b      	mov	r3, r9
   33c7a:	002e      	movs	r6, r5
   33c7c:	2b20      	cmp	r3, #32
   33c7e:	d02d      	beq.n	33cdc <__aeabi_dadd+0x60c>
   33c80:	2540      	movs	r5, #64	; 0x40
   33c82:	1aed      	subs	r5, r5, r3
   33c84:	40ac      	lsls	r4, r5
   33c86:	4327      	orrs	r7, r4
   33c88:	1e7c      	subs	r4, r7, #1
   33c8a:	41a7      	sbcs	r7, r4
   33c8c:	2400      	movs	r4, #0
   33c8e:	4337      	orrs	r7, r6
   33c90:	e6c9      	b.n	33a26 <__aeabi_dadd+0x356>
   33c92:	2480      	movs	r4, #128	; 0x80
   33c94:	2500      	movs	r5, #0
   33c96:	0324      	lsls	r4, r4, #12
   33c98:	4e13      	ldr	r6, [pc, #76]	; (33ce8 <__aeabi_dadd+0x618>)
   33c9a:	2700      	movs	r7, #0
   33c9c:	e5dc      	b.n	33858 <__aeabi_dadd+0x188>
   33c9e:	4327      	orrs	r7, r4
   33ca0:	1e7c      	subs	r4, r7, #1
   33ca2:	41a7      	sbcs	r7, r4
   33ca4:	2400      	movs	r4, #0
   33ca6:	e779      	b.n	33b9c <__aeabi_dadd+0x4cc>
   33ca8:	000c      	movs	r4, r1
   33caa:	0017      	movs	r7, r2
   33cac:	4e0e      	ldr	r6, [pc, #56]	; (33ce8 <__aeabi_dadd+0x618>)
   33cae:	e593      	b.n	337d8 <__aeabi_dadd+0x108>
   33cb0:	000c      	movs	r4, r1
   33cb2:	0017      	movs	r7, r2
   33cb4:	e590      	b.n	337d8 <__aeabi_dadd+0x108>
   33cb6:	4656      	mov	r6, sl
   33cb8:	0023      	movs	r3, r4
   33cba:	3e20      	subs	r6, #32
   33cbc:	40f3      	lsrs	r3, r6
   33cbe:	4699      	mov	r9, r3
   33cc0:	4653      	mov	r3, sl
   33cc2:	2b20      	cmp	r3, #32
   33cc4:	d00e      	beq.n	33ce4 <__aeabi_dadd+0x614>
   33cc6:	2340      	movs	r3, #64	; 0x40
   33cc8:	4656      	mov	r6, sl
   33cca:	1b9b      	subs	r3, r3, r6
   33ccc:	409c      	lsls	r4, r3
   33cce:	4327      	orrs	r7, r4
   33cd0:	1e7c      	subs	r4, r7, #1
   33cd2:	41a7      	sbcs	r7, r4
   33cd4:	464b      	mov	r3, r9
   33cd6:	2400      	movs	r4, #0
   33cd8:	431f      	orrs	r7, r3
   33cda:	e75f      	b.n	33b9c <__aeabi_dadd+0x4cc>
   33cdc:	2400      	movs	r4, #0
   33cde:	e7d2      	b.n	33c86 <__aeabi_dadd+0x5b6>
   33ce0:	0017      	movs	r7, r2
   33ce2:	e5b2      	b.n	3384a <__aeabi_dadd+0x17a>
   33ce4:	2400      	movs	r4, #0
   33ce6:	e7f2      	b.n	33cce <__aeabi_dadd+0x5fe>
   33ce8:	000007ff 	.word	0x000007ff
   33cec:	ff7fffff 	.word	0xff7fffff

00033cf0 <__aeabi_ddiv>:
   33cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   33cf2:	4657      	mov	r7, sl
   33cf4:	4645      	mov	r5, r8
   33cf6:	46de      	mov	lr, fp
   33cf8:	464e      	mov	r6, r9
   33cfa:	b5e0      	push	{r5, r6, r7, lr}
   33cfc:	004c      	lsls	r4, r1, #1
   33cfe:	030e      	lsls	r6, r1, #12
   33d00:	b087      	sub	sp, #28
   33d02:	4683      	mov	fp, r0
   33d04:	4692      	mov	sl, r2
   33d06:	001d      	movs	r5, r3
   33d08:	4680      	mov	r8, r0
   33d0a:	0b36      	lsrs	r6, r6, #12
   33d0c:	0d64      	lsrs	r4, r4, #21
   33d0e:	0fcf      	lsrs	r7, r1, #31
   33d10:	2c00      	cmp	r4, #0
   33d12:	d04f      	beq.n	33db4 <__aeabi_ddiv+0xc4>
   33d14:	4b6f      	ldr	r3, [pc, #444]	; (33ed4 <__aeabi_ddiv+0x1e4>)
   33d16:	429c      	cmp	r4, r3
   33d18:	d035      	beq.n	33d86 <__aeabi_ddiv+0x96>
   33d1a:	2380      	movs	r3, #128	; 0x80
   33d1c:	0f42      	lsrs	r2, r0, #29
   33d1e:	041b      	lsls	r3, r3, #16
   33d20:	00f6      	lsls	r6, r6, #3
   33d22:	4313      	orrs	r3, r2
   33d24:	4333      	orrs	r3, r6
   33d26:	4699      	mov	r9, r3
   33d28:	00c3      	lsls	r3, r0, #3
   33d2a:	4698      	mov	r8, r3
   33d2c:	4b6a      	ldr	r3, [pc, #424]	; (33ed8 <__aeabi_ddiv+0x1e8>)
   33d2e:	2600      	movs	r6, #0
   33d30:	469c      	mov	ip, r3
   33d32:	2300      	movs	r3, #0
   33d34:	4464      	add	r4, ip
   33d36:	9303      	str	r3, [sp, #12]
   33d38:	032b      	lsls	r3, r5, #12
   33d3a:	0b1b      	lsrs	r3, r3, #12
   33d3c:	469b      	mov	fp, r3
   33d3e:	006b      	lsls	r3, r5, #1
   33d40:	0fed      	lsrs	r5, r5, #31
   33d42:	4650      	mov	r0, sl
   33d44:	0d5b      	lsrs	r3, r3, #21
   33d46:	9501      	str	r5, [sp, #4]
   33d48:	d05e      	beq.n	33e08 <__aeabi_ddiv+0x118>
   33d4a:	4a62      	ldr	r2, [pc, #392]	; (33ed4 <__aeabi_ddiv+0x1e4>)
   33d4c:	4293      	cmp	r3, r2
   33d4e:	d053      	beq.n	33df8 <__aeabi_ddiv+0x108>
   33d50:	465a      	mov	r2, fp
   33d52:	00d1      	lsls	r1, r2, #3
   33d54:	2280      	movs	r2, #128	; 0x80
   33d56:	0f40      	lsrs	r0, r0, #29
   33d58:	0412      	lsls	r2, r2, #16
   33d5a:	4302      	orrs	r2, r0
   33d5c:	430a      	orrs	r2, r1
   33d5e:	4693      	mov	fp, r2
   33d60:	4652      	mov	r2, sl
   33d62:	00d1      	lsls	r1, r2, #3
   33d64:	4a5c      	ldr	r2, [pc, #368]	; (33ed8 <__aeabi_ddiv+0x1e8>)
   33d66:	4694      	mov	ip, r2
   33d68:	2200      	movs	r2, #0
   33d6a:	4463      	add	r3, ip
   33d6c:	0038      	movs	r0, r7
   33d6e:	4068      	eors	r0, r5
   33d70:	4684      	mov	ip, r0
   33d72:	9002      	str	r0, [sp, #8]
   33d74:	1ae4      	subs	r4, r4, r3
   33d76:	4316      	orrs	r6, r2
   33d78:	2e0f      	cmp	r6, #15
   33d7a:	d900      	bls.n	33d7e <__aeabi_ddiv+0x8e>
   33d7c:	e0b4      	b.n	33ee8 <__aeabi_ddiv+0x1f8>
   33d7e:	4b57      	ldr	r3, [pc, #348]	; (33edc <__aeabi_ddiv+0x1ec>)
   33d80:	00b6      	lsls	r6, r6, #2
   33d82:	599b      	ldr	r3, [r3, r6]
   33d84:	469f      	mov	pc, r3
   33d86:	0003      	movs	r3, r0
   33d88:	4333      	orrs	r3, r6
   33d8a:	4699      	mov	r9, r3
   33d8c:	d16c      	bne.n	33e68 <__aeabi_ddiv+0x178>
   33d8e:	2300      	movs	r3, #0
   33d90:	4698      	mov	r8, r3
   33d92:	3302      	adds	r3, #2
   33d94:	2608      	movs	r6, #8
   33d96:	9303      	str	r3, [sp, #12]
   33d98:	e7ce      	b.n	33d38 <__aeabi_ddiv+0x48>
   33d9a:	46cb      	mov	fp, r9
   33d9c:	4641      	mov	r1, r8
   33d9e:	9a03      	ldr	r2, [sp, #12]
   33da0:	9701      	str	r7, [sp, #4]
   33da2:	2a02      	cmp	r2, #2
   33da4:	d165      	bne.n	33e72 <__aeabi_ddiv+0x182>
   33da6:	9b01      	ldr	r3, [sp, #4]
   33da8:	4c4a      	ldr	r4, [pc, #296]	; (33ed4 <__aeabi_ddiv+0x1e4>)
   33daa:	469c      	mov	ip, r3
   33dac:	2300      	movs	r3, #0
   33dae:	2200      	movs	r2, #0
   33db0:	4698      	mov	r8, r3
   33db2:	e06b      	b.n	33e8c <__aeabi_ddiv+0x19c>
   33db4:	0003      	movs	r3, r0
   33db6:	4333      	orrs	r3, r6
   33db8:	4699      	mov	r9, r3
   33dba:	d04e      	beq.n	33e5a <__aeabi_ddiv+0x16a>
   33dbc:	2e00      	cmp	r6, #0
   33dbe:	d100      	bne.n	33dc2 <__aeabi_ddiv+0xd2>
   33dc0:	e1bc      	b.n	3413c <__aeabi_ddiv+0x44c>
   33dc2:	0030      	movs	r0, r6
   33dc4:	f001 f95a 	bl	3507c <__clzsi2>
   33dc8:	0003      	movs	r3, r0
   33dca:	3b0b      	subs	r3, #11
   33dcc:	2b1c      	cmp	r3, #28
   33dce:	dd00      	ble.n	33dd2 <__aeabi_ddiv+0xe2>
   33dd0:	e1ac      	b.n	3412c <__aeabi_ddiv+0x43c>
   33dd2:	221d      	movs	r2, #29
   33dd4:	1ad3      	subs	r3, r2, r3
   33dd6:	465a      	mov	r2, fp
   33dd8:	0001      	movs	r1, r0
   33dda:	40da      	lsrs	r2, r3
   33ddc:	3908      	subs	r1, #8
   33dde:	408e      	lsls	r6, r1
   33de0:	0013      	movs	r3, r2
   33de2:	4333      	orrs	r3, r6
   33de4:	4699      	mov	r9, r3
   33de6:	465b      	mov	r3, fp
   33de8:	408b      	lsls	r3, r1
   33dea:	4698      	mov	r8, r3
   33dec:	2300      	movs	r3, #0
   33dee:	4c3c      	ldr	r4, [pc, #240]	; (33ee0 <__aeabi_ddiv+0x1f0>)
   33df0:	2600      	movs	r6, #0
   33df2:	1a24      	subs	r4, r4, r0
   33df4:	9303      	str	r3, [sp, #12]
   33df6:	e79f      	b.n	33d38 <__aeabi_ddiv+0x48>
   33df8:	4651      	mov	r1, sl
   33dfa:	465a      	mov	r2, fp
   33dfc:	4311      	orrs	r1, r2
   33dfe:	d129      	bne.n	33e54 <__aeabi_ddiv+0x164>
   33e00:	2200      	movs	r2, #0
   33e02:	4693      	mov	fp, r2
   33e04:	3202      	adds	r2, #2
   33e06:	e7b1      	b.n	33d6c <__aeabi_ddiv+0x7c>
   33e08:	4659      	mov	r1, fp
   33e0a:	4301      	orrs	r1, r0
   33e0c:	d01e      	beq.n	33e4c <__aeabi_ddiv+0x15c>
   33e0e:	465b      	mov	r3, fp
   33e10:	2b00      	cmp	r3, #0
   33e12:	d100      	bne.n	33e16 <__aeabi_ddiv+0x126>
   33e14:	e19e      	b.n	34154 <__aeabi_ddiv+0x464>
   33e16:	4658      	mov	r0, fp
   33e18:	f001 f930 	bl	3507c <__clzsi2>
   33e1c:	0003      	movs	r3, r0
   33e1e:	3b0b      	subs	r3, #11
   33e20:	2b1c      	cmp	r3, #28
   33e22:	dd00      	ble.n	33e26 <__aeabi_ddiv+0x136>
   33e24:	e18f      	b.n	34146 <__aeabi_ddiv+0x456>
   33e26:	0002      	movs	r2, r0
   33e28:	4659      	mov	r1, fp
   33e2a:	3a08      	subs	r2, #8
   33e2c:	4091      	lsls	r1, r2
   33e2e:	468b      	mov	fp, r1
   33e30:	211d      	movs	r1, #29
   33e32:	1acb      	subs	r3, r1, r3
   33e34:	4651      	mov	r1, sl
   33e36:	40d9      	lsrs	r1, r3
   33e38:	000b      	movs	r3, r1
   33e3a:	4659      	mov	r1, fp
   33e3c:	430b      	orrs	r3, r1
   33e3e:	4651      	mov	r1, sl
   33e40:	469b      	mov	fp, r3
   33e42:	4091      	lsls	r1, r2
   33e44:	4b26      	ldr	r3, [pc, #152]	; (33ee0 <__aeabi_ddiv+0x1f0>)
   33e46:	2200      	movs	r2, #0
   33e48:	1a1b      	subs	r3, r3, r0
   33e4a:	e78f      	b.n	33d6c <__aeabi_ddiv+0x7c>
   33e4c:	2300      	movs	r3, #0
   33e4e:	2201      	movs	r2, #1
   33e50:	469b      	mov	fp, r3
   33e52:	e78b      	b.n	33d6c <__aeabi_ddiv+0x7c>
   33e54:	4651      	mov	r1, sl
   33e56:	2203      	movs	r2, #3
   33e58:	e788      	b.n	33d6c <__aeabi_ddiv+0x7c>
   33e5a:	2300      	movs	r3, #0
   33e5c:	4698      	mov	r8, r3
   33e5e:	3301      	adds	r3, #1
   33e60:	2604      	movs	r6, #4
   33e62:	2400      	movs	r4, #0
   33e64:	9303      	str	r3, [sp, #12]
   33e66:	e767      	b.n	33d38 <__aeabi_ddiv+0x48>
   33e68:	2303      	movs	r3, #3
   33e6a:	46b1      	mov	r9, r6
   33e6c:	9303      	str	r3, [sp, #12]
   33e6e:	260c      	movs	r6, #12
   33e70:	e762      	b.n	33d38 <__aeabi_ddiv+0x48>
   33e72:	2a03      	cmp	r2, #3
   33e74:	d100      	bne.n	33e78 <__aeabi_ddiv+0x188>
   33e76:	e25c      	b.n	34332 <__aeabi_ddiv+0x642>
   33e78:	9b01      	ldr	r3, [sp, #4]
   33e7a:	2a01      	cmp	r2, #1
   33e7c:	d000      	beq.n	33e80 <__aeabi_ddiv+0x190>
   33e7e:	e1e4      	b.n	3424a <__aeabi_ddiv+0x55a>
   33e80:	4013      	ands	r3, r2
   33e82:	469c      	mov	ip, r3
   33e84:	2300      	movs	r3, #0
   33e86:	2400      	movs	r4, #0
   33e88:	2200      	movs	r2, #0
   33e8a:	4698      	mov	r8, r3
   33e8c:	2100      	movs	r1, #0
   33e8e:	0312      	lsls	r2, r2, #12
   33e90:	0b13      	lsrs	r3, r2, #12
   33e92:	0d0a      	lsrs	r2, r1, #20
   33e94:	0512      	lsls	r2, r2, #20
   33e96:	431a      	orrs	r2, r3
   33e98:	0523      	lsls	r3, r4, #20
   33e9a:	4c12      	ldr	r4, [pc, #72]	; (33ee4 <__aeabi_ddiv+0x1f4>)
   33e9c:	4640      	mov	r0, r8
   33e9e:	4022      	ands	r2, r4
   33ea0:	4313      	orrs	r3, r2
   33ea2:	4662      	mov	r2, ip
   33ea4:	005b      	lsls	r3, r3, #1
   33ea6:	07d2      	lsls	r2, r2, #31
   33ea8:	085b      	lsrs	r3, r3, #1
   33eaa:	4313      	orrs	r3, r2
   33eac:	0019      	movs	r1, r3
   33eae:	b007      	add	sp, #28
   33eb0:	bc3c      	pop	{r2, r3, r4, r5}
   33eb2:	4690      	mov	r8, r2
   33eb4:	4699      	mov	r9, r3
   33eb6:	46a2      	mov	sl, r4
   33eb8:	46ab      	mov	fp, r5
   33eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ebc:	2300      	movs	r3, #0
   33ebe:	2280      	movs	r2, #128	; 0x80
   33ec0:	469c      	mov	ip, r3
   33ec2:	0312      	lsls	r2, r2, #12
   33ec4:	4698      	mov	r8, r3
   33ec6:	4c03      	ldr	r4, [pc, #12]	; (33ed4 <__aeabi_ddiv+0x1e4>)
   33ec8:	e7e0      	b.n	33e8c <__aeabi_ddiv+0x19c>
   33eca:	2300      	movs	r3, #0
   33ecc:	4c01      	ldr	r4, [pc, #4]	; (33ed4 <__aeabi_ddiv+0x1e4>)
   33ece:	2200      	movs	r2, #0
   33ed0:	4698      	mov	r8, r3
   33ed2:	e7db      	b.n	33e8c <__aeabi_ddiv+0x19c>
   33ed4:	000007ff 	.word	0x000007ff
   33ed8:	fffffc01 	.word	0xfffffc01
   33edc:	0003c7a0 	.word	0x0003c7a0
   33ee0:	fffffc0d 	.word	0xfffffc0d
   33ee4:	800fffff 	.word	0x800fffff
   33ee8:	45d9      	cmp	r9, fp
   33eea:	d900      	bls.n	33eee <__aeabi_ddiv+0x1fe>
   33eec:	e139      	b.n	34162 <__aeabi_ddiv+0x472>
   33eee:	d100      	bne.n	33ef2 <__aeabi_ddiv+0x202>
   33ef0:	e134      	b.n	3415c <__aeabi_ddiv+0x46c>
   33ef2:	2300      	movs	r3, #0
   33ef4:	4646      	mov	r6, r8
   33ef6:	464d      	mov	r5, r9
   33ef8:	469a      	mov	sl, r3
   33efa:	3c01      	subs	r4, #1
   33efc:	465b      	mov	r3, fp
   33efe:	0e0a      	lsrs	r2, r1, #24
   33f00:	021b      	lsls	r3, r3, #8
   33f02:	431a      	orrs	r2, r3
   33f04:	020b      	lsls	r3, r1, #8
   33f06:	0c17      	lsrs	r7, r2, #16
   33f08:	9303      	str	r3, [sp, #12]
   33f0a:	0413      	lsls	r3, r2, #16
   33f0c:	0c1b      	lsrs	r3, r3, #16
   33f0e:	0039      	movs	r1, r7
   33f10:	0028      	movs	r0, r5
   33f12:	4690      	mov	r8, r2
   33f14:	9301      	str	r3, [sp, #4]
   33f16:	f7ff f88d 	bl	33034 <__udivsi3>
   33f1a:	0002      	movs	r2, r0
   33f1c:	9b01      	ldr	r3, [sp, #4]
   33f1e:	4683      	mov	fp, r0
   33f20:	435a      	muls	r2, r3
   33f22:	0028      	movs	r0, r5
   33f24:	0039      	movs	r1, r7
   33f26:	4691      	mov	r9, r2
   33f28:	f7ff f90a 	bl	33140 <__aeabi_uidivmod>
   33f2c:	0c35      	lsrs	r5, r6, #16
   33f2e:	0409      	lsls	r1, r1, #16
   33f30:	430d      	orrs	r5, r1
   33f32:	45a9      	cmp	r9, r5
   33f34:	d90d      	bls.n	33f52 <__aeabi_ddiv+0x262>
   33f36:	465b      	mov	r3, fp
   33f38:	4445      	add	r5, r8
   33f3a:	3b01      	subs	r3, #1
   33f3c:	45a8      	cmp	r8, r5
   33f3e:	d900      	bls.n	33f42 <__aeabi_ddiv+0x252>
   33f40:	e13a      	b.n	341b8 <__aeabi_ddiv+0x4c8>
   33f42:	45a9      	cmp	r9, r5
   33f44:	d800      	bhi.n	33f48 <__aeabi_ddiv+0x258>
   33f46:	e137      	b.n	341b8 <__aeabi_ddiv+0x4c8>
   33f48:	2302      	movs	r3, #2
   33f4a:	425b      	negs	r3, r3
   33f4c:	469c      	mov	ip, r3
   33f4e:	4445      	add	r5, r8
   33f50:	44e3      	add	fp, ip
   33f52:	464b      	mov	r3, r9
   33f54:	1aeb      	subs	r3, r5, r3
   33f56:	0039      	movs	r1, r7
   33f58:	0018      	movs	r0, r3
   33f5a:	9304      	str	r3, [sp, #16]
   33f5c:	f7ff f86a 	bl	33034 <__udivsi3>
   33f60:	9b01      	ldr	r3, [sp, #4]
   33f62:	0005      	movs	r5, r0
   33f64:	4343      	muls	r3, r0
   33f66:	0039      	movs	r1, r7
   33f68:	9804      	ldr	r0, [sp, #16]
   33f6a:	4699      	mov	r9, r3
   33f6c:	f7ff f8e8 	bl	33140 <__aeabi_uidivmod>
   33f70:	0433      	lsls	r3, r6, #16
   33f72:	0409      	lsls	r1, r1, #16
   33f74:	0c1b      	lsrs	r3, r3, #16
   33f76:	430b      	orrs	r3, r1
   33f78:	4599      	cmp	r9, r3
   33f7a:	d909      	bls.n	33f90 <__aeabi_ddiv+0x2a0>
   33f7c:	4443      	add	r3, r8
   33f7e:	1e6a      	subs	r2, r5, #1
   33f80:	4598      	cmp	r8, r3
   33f82:	d900      	bls.n	33f86 <__aeabi_ddiv+0x296>
   33f84:	e11a      	b.n	341bc <__aeabi_ddiv+0x4cc>
   33f86:	4599      	cmp	r9, r3
   33f88:	d800      	bhi.n	33f8c <__aeabi_ddiv+0x29c>
   33f8a:	e117      	b.n	341bc <__aeabi_ddiv+0x4cc>
   33f8c:	3d02      	subs	r5, #2
   33f8e:	4443      	add	r3, r8
   33f90:	464a      	mov	r2, r9
   33f92:	1a9b      	subs	r3, r3, r2
   33f94:	465a      	mov	r2, fp
   33f96:	0412      	lsls	r2, r2, #16
   33f98:	432a      	orrs	r2, r5
   33f9a:	9903      	ldr	r1, [sp, #12]
   33f9c:	4693      	mov	fp, r2
   33f9e:	0c10      	lsrs	r0, r2, #16
   33fa0:	0c0a      	lsrs	r2, r1, #16
   33fa2:	4691      	mov	r9, r2
   33fa4:	0409      	lsls	r1, r1, #16
   33fa6:	465a      	mov	r2, fp
   33fa8:	0c09      	lsrs	r1, r1, #16
   33faa:	464e      	mov	r6, r9
   33fac:	000d      	movs	r5, r1
   33fae:	0412      	lsls	r2, r2, #16
   33fb0:	0c12      	lsrs	r2, r2, #16
   33fb2:	4345      	muls	r5, r0
   33fb4:	9105      	str	r1, [sp, #20]
   33fb6:	4351      	muls	r1, r2
   33fb8:	4372      	muls	r2, r6
   33fba:	4370      	muls	r0, r6
   33fbc:	1952      	adds	r2, r2, r5
   33fbe:	0c0e      	lsrs	r6, r1, #16
   33fc0:	18b2      	adds	r2, r6, r2
   33fc2:	4295      	cmp	r5, r2
   33fc4:	d903      	bls.n	33fce <__aeabi_ddiv+0x2de>
   33fc6:	2580      	movs	r5, #128	; 0x80
   33fc8:	026d      	lsls	r5, r5, #9
   33fca:	46ac      	mov	ip, r5
   33fcc:	4460      	add	r0, ip
   33fce:	0c15      	lsrs	r5, r2, #16
   33fd0:	0409      	lsls	r1, r1, #16
   33fd2:	0412      	lsls	r2, r2, #16
   33fd4:	0c09      	lsrs	r1, r1, #16
   33fd6:	1828      	adds	r0, r5, r0
   33fd8:	1852      	adds	r2, r2, r1
   33fda:	4283      	cmp	r3, r0
   33fdc:	d200      	bcs.n	33fe0 <__aeabi_ddiv+0x2f0>
   33fde:	e0ce      	b.n	3417e <__aeabi_ddiv+0x48e>
   33fe0:	d100      	bne.n	33fe4 <__aeabi_ddiv+0x2f4>
   33fe2:	e0c8      	b.n	34176 <__aeabi_ddiv+0x486>
   33fe4:	1a1d      	subs	r5, r3, r0
   33fe6:	4653      	mov	r3, sl
   33fe8:	1a9e      	subs	r6, r3, r2
   33fea:	45b2      	cmp	sl, r6
   33fec:	4192      	sbcs	r2, r2
   33fee:	4252      	negs	r2, r2
   33ff0:	1aab      	subs	r3, r5, r2
   33ff2:	469a      	mov	sl, r3
   33ff4:	4598      	cmp	r8, r3
   33ff6:	d100      	bne.n	33ffa <__aeabi_ddiv+0x30a>
   33ff8:	e117      	b.n	3422a <__aeabi_ddiv+0x53a>
   33ffa:	0039      	movs	r1, r7
   33ffc:	0018      	movs	r0, r3
   33ffe:	f7ff f819 	bl	33034 <__udivsi3>
   34002:	9b01      	ldr	r3, [sp, #4]
   34004:	0005      	movs	r5, r0
   34006:	4343      	muls	r3, r0
   34008:	0039      	movs	r1, r7
   3400a:	4650      	mov	r0, sl
   3400c:	9304      	str	r3, [sp, #16]
   3400e:	f7ff f897 	bl	33140 <__aeabi_uidivmod>
   34012:	9804      	ldr	r0, [sp, #16]
   34014:	040b      	lsls	r3, r1, #16
   34016:	0c31      	lsrs	r1, r6, #16
   34018:	4319      	orrs	r1, r3
   3401a:	4288      	cmp	r0, r1
   3401c:	d909      	bls.n	34032 <__aeabi_ddiv+0x342>
   3401e:	4441      	add	r1, r8
   34020:	1e6b      	subs	r3, r5, #1
   34022:	4588      	cmp	r8, r1
   34024:	d900      	bls.n	34028 <__aeabi_ddiv+0x338>
   34026:	e107      	b.n	34238 <__aeabi_ddiv+0x548>
   34028:	4288      	cmp	r0, r1
   3402a:	d800      	bhi.n	3402e <__aeabi_ddiv+0x33e>
   3402c:	e104      	b.n	34238 <__aeabi_ddiv+0x548>
   3402e:	3d02      	subs	r5, #2
   34030:	4441      	add	r1, r8
   34032:	9b04      	ldr	r3, [sp, #16]
   34034:	1acb      	subs	r3, r1, r3
   34036:	0018      	movs	r0, r3
   34038:	0039      	movs	r1, r7
   3403a:	9304      	str	r3, [sp, #16]
   3403c:	f7fe fffa 	bl	33034 <__udivsi3>
   34040:	9b01      	ldr	r3, [sp, #4]
   34042:	4682      	mov	sl, r0
   34044:	4343      	muls	r3, r0
   34046:	0039      	movs	r1, r7
   34048:	9804      	ldr	r0, [sp, #16]
   3404a:	9301      	str	r3, [sp, #4]
   3404c:	f7ff f878 	bl	33140 <__aeabi_uidivmod>
   34050:	9801      	ldr	r0, [sp, #4]
   34052:	040b      	lsls	r3, r1, #16
   34054:	0431      	lsls	r1, r6, #16
   34056:	0c09      	lsrs	r1, r1, #16
   34058:	4319      	orrs	r1, r3
   3405a:	4288      	cmp	r0, r1
   3405c:	d90d      	bls.n	3407a <__aeabi_ddiv+0x38a>
   3405e:	4653      	mov	r3, sl
   34060:	4441      	add	r1, r8
   34062:	3b01      	subs	r3, #1
   34064:	4588      	cmp	r8, r1
   34066:	d900      	bls.n	3406a <__aeabi_ddiv+0x37a>
   34068:	e0e8      	b.n	3423c <__aeabi_ddiv+0x54c>
   3406a:	4288      	cmp	r0, r1
   3406c:	d800      	bhi.n	34070 <__aeabi_ddiv+0x380>
   3406e:	e0e5      	b.n	3423c <__aeabi_ddiv+0x54c>
   34070:	2302      	movs	r3, #2
   34072:	425b      	negs	r3, r3
   34074:	469c      	mov	ip, r3
   34076:	4441      	add	r1, r8
   34078:	44e2      	add	sl, ip
   3407a:	9b01      	ldr	r3, [sp, #4]
   3407c:	042d      	lsls	r5, r5, #16
   3407e:	1ace      	subs	r6, r1, r3
   34080:	4651      	mov	r1, sl
   34082:	4329      	orrs	r1, r5
   34084:	9d05      	ldr	r5, [sp, #20]
   34086:	464f      	mov	r7, r9
   34088:	002a      	movs	r2, r5
   3408a:	040b      	lsls	r3, r1, #16
   3408c:	0c08      	lsrs	r0, r1, #16
   3408e:	0c1b      	lsrs	r3, r3, #16
   34090:	435a      	muls	r2, r3
   34092:	4345      	muls	r5, r0
   34094:	437b      	muls	r3, r7
   34096:	4378      	muls	r0, r7
   34098:	195b      	adds	r3, r3, r5
   3409a:	0c17      	lsrs	r7, r2, #16
   3409c:	18fb      	adds	r3, r7, r3
   3409e:	429d      	cmp	r5, r3
   340a0:	d903      	bls.n	340aa <__aeabi_ddiv+0x3ba>
   340a2:	2580      	movs	r5, #128	; 0x80
   340a4:	026d      	lsls	r5, r5, #9
   340a6:	46ac      	mov	ip, r5
   340a8:	4460      	add	r0, ip
   340aa:	0c1d      	lsrs	r5, r3, #16
   340ac:	0412      	lsls	r2, r2, #16
   340ae:	041b      	lsls	r3, r3, #16
   340b0:	0c12      	lsrs	r2, r2, #16
   340b2:	1828      	adds	r0, r5, r0
   340b4:	189b      	adds	r3, r3, r2
   340b6:	4286      	cmp	r6, r0
   340b8:	d200      	bcs.n	340bc <__aeabi_ddiv+0x3cc>
   340ba:	e093      	b.n	341e4 <__aeabi_ddiv+0x4f4>
   340bc:	d100      	bne.n	340c0 <__aeabi_ddiv+0x3d0>
   340be:	e08e      	b.n	341de <__aeabi_ddiv+0x4ee>
   340c0:	2301      	movs	r3, #1
   340c2:	4319      	orrs	r1, r3
   340c4:	4ba0      	ldr	r3, [pc, #640]	; (34348 <__aeabi_ddiv+0x658>)
   340c6:	18e3      	adds	r3, r4, r3
   340c8:	2b00      	cmp	r3, #0
   340ca:	dc00      	bgt.n	340ce <__aeabi_ddiv+0x3de>
   340cc:	e099      	b.n	34202 <__aeabi_ddiv+0x512>
   340ce:	074a      	lsls	r2, r1, #29
   340d0:	d000      	beq.n	340d4 <__aeabi_ddiv+0x3e4>
   340d2:	e09e      	b.n	34212 <__aeabi_ddiv+0x522>
   340d4:	465a      	mov	r2, fp
   340d6:	01d2      	lsls	r2, r2, #7
   340d8:	d506      	bpl.n	340e8 <__aeabi_ddiv+0x3f8>
   340da:	465a      	mov	r2, fp
   340dc:	4b9b      	ldr	r3, [pc, #620]	; (3434c <__aeabi_ddiv+0x65c>)
   340de:	401a      	ands	r2, r3
   340e0:	2380      	movs	r3, #128	; 0x80
   340e2:	4693      	mov	fp, r2
   340e4:	00db      	lsls	r3, r3, #3
   340e6:	18e3      	adds	r3, r4, r3
   340e8:	4a99      	ldr	r2, [pc, #612]	; (34350 <__aeabi_ddiv+0x660>)
   340ea:	4293      	cmp	r3, r2
   340ec:	dd68      	ble.n	341c0 <__aeabi_ddiv+0x4d0>
   340ee:	2301      	movs	r3, #1
   340f0:	9a02      	ldr	r2, [sp, #8]
   340f2:	4c98      	ldr	r4, [pc, #608]	; (34354 <__aeabi_ddiv+0x664>)
   340f4:	401a      	ands	r2, r3
   340f6:	2300      	movs	r3, #0
   340f8:	4694      	mov	ip, r2
   340fa:	4698      	mov	r8, r3
   340fc:	2200      	movs	r2, #0
   340fe:	e6c5      	b.n	33e8c <__aeabi_ddiv+0x19c>
   34100:	2280      	movs	r2, #128	; 0x80
   34102:	464b      	mov	r3, r9
   34104:	0312      	lsls	r2, r2, #12
   34106:	4213      	tst	r3, r2
   34108:	d00a      	beq.n	34120 <__aeabi_ddiv+0x430>
   3410a:	465b      	mov	r3, fp
   3410c:	4213      	tst	r3, r2
   3410e:	d106      	bne.n	3411e <__aeabi_ddiv+0x42e>
   34110:	431a      	orrs	r2, r3
   34112:	0312      	lsls	r2, r2, #12
   34114:	0b12      	lsrs	r2, r2, #12
   34116:	46ac      	mov	ip, r5
   34118:	4688      	mov	r8, r1
   3411a:	4c8e      	ldr	r4, [pc, #568]	; (34354 <__aeabi_ddiv+0x664>)
   3411c:	e6b6      	b.n	33e8c <__aeabi_ddiv+0x19c>
   3411e:	464b      	mov	r3, r9
   34120:	431a      	orrs	r2, r3
   34122:	0312      	lsls	r2, r2, #12
   34124:	0b12      	lsrs	r2, r2, #12
   34126:	46bc      	mov	ip, r7
   34128:	4c8a      	ldr	r4, [pc, #552]	; (34354 <__aeabi_ddiv+0x664>)
   3412a:	e6af      	b.n	33e8c <__aeabi_ddiv+0x19c>
   3412c:	0003      	movs	r3, r0
   3412e:	465a      	mov	r2, fp
   34130:	3b28      	subs	r3, #40	; 0x28
   34132:	409a      	lsls	r2, r3
   34134:	2300      	movs	r3, #0
   34136:	4691      	mov	r9, r2
   34138:	4698      	mov	r8, r3
   3413a:	e657      	b.n	33dec <__aeabi_ddiv+0xfc>
   3413c:	4658      	mov	r0, fp
   3413e:	f000 ff9d 	bl	3507c <__clzsi2>
   34142:	3020      	adds	r0, #32
   34144:	e640      	b.n	33dc8 <__aeabi_ddiv+0xd8>
   34146:	0003      	movs	r3, r0
   34148:	4652      	mov	r2, sl
   3414a:	3b28      	subs	r3, #40	; 0x28
   3414c:	409a      	lsls	r2, r3
   3414e:	2100      	movs	r1, #0
   34150:	4693      	mov	fp, r2
   34152:	e677      	b.n	33e44 <__aeabi_ddiv+0x154>
   34154:	f000 ff92 	bl	3507c <__clzsi2>
   34158:	3020      	adds	r0, #32
   3415a:	e65f      	b.n	33e1c <__aeabi_ddiv+0x12c>
   3415c:	4588      	cmp	r8, r1
   3415e:	d200      	bcs.n	34162 <__aeabi_ddiv+0x472>
   34160:	e6c7      	b.n	33ef2 <__aeabi_ddiv+0x202>
   34162:	464b      	mov	r3, r9
   34164:	07de      	lsls	r6, r3, #31
   34166:	085d      	lsrs	r5, r3, #1
   34168:	4643      	mov	r3, r8
   3416a:	085b      	lsrs	r3, r3, #1
   3416c:	431e      	orrs	r6, r3
   3416e:	4643      	mov	r3, r8
   34170:	07db      	lsls	r3, r3, #31
   34172:	469a      	mov	sl, r3
   34174:	e6c2      	b.n	33efc <__aeabi_ddiv+0x20c>
   34176:	2500      	movs	r5, #0
   34178:	4592      	cmp	sl, r2
   3417a:	d300      	bcc.n	3417e <__aeabi_ddiv+0x48e>
   3417c:	e733      	b.n	33fe6 <__aeabi_ddiv+0x2f6>
   3417e:	9e03      	ldr	r6, [sp, #12]
   34180:	4659      	mov	r1, fp
   34182:	46b4      	mov	ip, r6
   34184:	44e2      	add	sl, ip
   34186:	45b2      	cmp	sl, r6
   34188:	41ad      	sbcs	r5, r5
   3418a:	426d      	negs	r5, r5
   3418c:	4445      	add	r5, r8
   3418e:	18eb      	adds	r3, r5, r3
   34190:	3901      	subs	r1, #1
   34192:	4598      	cmp	r8, r3
   34194:	d207      	bcs.n	341a6 <__aeabi_ddiv+0x4b6>
   34196:	4298      	cmp	r0, r3
   34198:	d900      	bls.n	3419c <__aeabi_ddiv+0x4ac>
   3419a:	e07f      	b.n	3429c <__aeabi_ddiv+0x5ac>
   3419c:	d100      	bne.n	341a0 <__aeabi_ddiv+0x4b0>
   3419e:	e0bc      	b.n	3431a <__aeabi_ddiv+0x62a>
   341a0:	1a1d      	subs	r5, r3, r0
   341a2:	468b      	mov	fp, r1
   341a4:	e71f      	b.n	33fe6 <__aeabi_ddiv+0x2f6>
   341a6:	4598      	cmp	r8, r3
   341a8:	d1fa      	bne.n	341a0 <__aeabi_ddiv+0x4b0>
   341aa:	9d03      	ldr	r5, [sp, #12]
   341ac:	4555      	cmp	r5, sl
   341ae:	d9f2      	bls.n	34196 <__aeabi_ddiv+0x4a6>
   341b0:	4643      	mov	r3, r8
   341b2:	468b      	mov	fp, r1
   341b4:	1a1d      	subs	r5, r3, r0
   341b6:	e716      	b.n	33fe6 <__aeabi_ddiv+0x2f6>
   341b8:	469b      	mov	fp, r3
   341ba:	e6ca      	b.n	33f52 <__aeabi_ddiv+0x262>
   341bc:	0015      	movs	r5, r2
   341be:	e6e7      	b.n	33f90 <__aeabi_ddiv+0x2a0>
   341c0:	465a      	mov	r2, fp
   341c2:	08c9      	lsrs	r1, r1, #3
   341c4:	0752      	lsls	r2, r2, #29
   341c6:	430a      	orrs	r2, r1
   341c8:	055b      	lsls	r3, r3, #21
   341ca:	4690      	mov	r8, r2
   341cc:	0d5c      	lsrs	r4, r3, #21
   341ce:	465a      	mov	r2, fp
   341d0:	2301      	movs	r3, #1
   341d2:	9902      	ldr	r1, [sp, #8]
   341d4:	0252      	lsls	r2, r2, #9
   341d6:	4019      	ands	r1, r3
   341d8:	0b12      	lsrs	r2, r2, #12
   341da:	468c      	mov	ip, r1
   341dc:	e656      	b.n	33e8c <__aeabi_ddiv+0x19c>
   341de:	2b00      	cmp	r3, #0
   341e0:	d100      	bne.n	341e4 <__aeabi_ddiv+0x4f4>
   341e2:	e76f      	b.n	340c4 <__aeabi_ddiv+0x3d4>
   341e4:	4446      	add	r6, r8
   341e6:	1e4a      	subs	r2, r1, #1
   341e8:	45b0      	cmp	r8, r6
   341ea:	d929      	bls.n	34240 <__aeabi_ddiv+0x550>
   341ec:	0011      	movs	r1, r2
   341ee:	4286      	cmp	r6, r0
   341f0:	d000      	beq.n	341f4 <__aeabi_ddiv+0x504>
   341f2:	e765      	b.n	340c0 <__aeabi_ddiv+0x3d0>
   341f4:	9a03      	ldr	r2, [sp, #12]
   341f6:	4293      	cmp	r3, r2
   341f8:	d000      	beq.n	341fc <__aeabi_ddiv+0x50c>
   341fa:	e761      	b.n	340c0 <__aeabi_ddiv+0x3d0>
   341fc:	e762      	b.n	340c4 <__aeabi_ddiv+0x3d4>
   341fe:	2101      	movs	r1, #1
   34200:	4249      	negs	r1, r1
   34202:	2001      	movs	r0, #1
   34204:	1ac2      	subs	r2, r0, r3
   34206:	2a38      	cmp	r2, #56	; 0x38
   34208:	dd21      	ble.n	3424e <__aeabi_ddiv+0x55e>
   3420a:	9b02      	ldr	r3, [sp, #8]
   3420c:	4003      	ands	r3, r0
   3420e:	469c      	mov	ip, r3
   34210:	e638      	b.n	33e84 <__aeabi_ddiv+0x194>
   34212:	220f      	movs	r2, #15
   34214:	400a      	ands	r2, r1
   34216:	2a04      	cmp	r2, #4
   34218:	d100      	bne.n	3421c <__aeabi_ddiv+0x52c>
   3421a:	e75b      	b.n	340d4 <__aeabi_ddiv+0x3e4>
   3421c:	000a      	movs	r2, r1
   3421e:	1d11      	adds	r1, r2, #4
   34220:	4291      	cmp	r1, r2
   34222:	4192      	sbcs	r2, r2
   34224:	4252      	negs	r2, r2
   34226:	4493      	add	fp, r2
   34228:	e754      	b.n	340d4 <__aeabi_ddiv+0x3e4>
   3422a:	4b47      	ldr	r3, [pc, #284]	; (34348 <__aeabi_ddiv+0x658>)
   3422c:	18e3      	adds	r3, r4, r3
   3422e:	2b00      	cmp	r3, #0
   34230:	dde5      	ble.n	341fe <__aeabi_ddiv+0x50e>
   34232:	2201      	movs	r2, #1
   34234:	4252      	negs	r2, r2
   34236:	e7f2      	b.n	3421e <__aeabi_ddiv+0x52e>
   34238:	001d      	movs	r5, r3
   3423a:	e6fa      	b.n	34032 <__aeabi_ddiv+0x342>
   3423c:	469a      	mov	sl, r3
   3423e:	e71c      	b.n	3407a <__aeabi_ddiv+0x38a>
   34240:	42b0      	cmp	r0, r6
   34242:	d839      	bhi.n	342b8 <__aeabi_ddiv+0x5c8>
   34244:	d06e      	beq.n	34324 <__aeabi_ddiv+0x634>
   34246:	0011      	movs	r1, r2
   34248:	e73a      	b.n	340c0 <__aeabi_ddiv+0x3d0>
   3424a:	9302      	str	r3, [sp, #8]
   3424c:	e73a      	b.n	340c4 <__aeabi_ddiv+0x3d4>
   3424e:	2a1f      	cmp	r2, #31
   34250:	dc3c      	bgt.n	342cc <__aeabi_ddiv+0x5dc>
   34252:	2320      	movs	r3, #32
   34254:	1a9b      	subs	r3, r3, r2
   34256:	000c      	movs	r4, r1
   34258:	4658      	mov	r0, fp
   3425a:	4099      	lsls	r1, r3
   3425c:	4098      	lsls	r0, r3
   3425e:	1e4b      	subs	r3, r1, #1
   34260:	4199      	sbcs	r1, r3
   34262:	465b      	mov	r3, fp
   34264:	40d4      	lsrs	r4, r2
   34266:	40d3      	lsrs	r3, r2
   34268:	4320      	orrs	r0, r4
   3426a:	4308      	orrs	r0, r1
   3426c:	001a      	movs	r2, r3
   3426e:	0743      	lsls	r3, r0, #29
   34270:	d009      	beq.n	34286 <__aeabi_ddiv+0x596>
   34272:	230f      	movs	r3, #15
   34274:	4003      	ands	r3, r0
   34276:	2b04      	cmp	r3, #4
   34278:	d005      	beq.n	34286 <__aeabi_ddiv+0x596>
   3427a:	0001      	movs	r1, r0
   3427c:	1d08      	adds	r0, r1, #4
   3427e:	4288      	cmp	r0, r1
   34280:	419b      	sbcs	r3, r3
   34282:	425b      	negs	r3, r3
   34284:	18d2      	adds	r2, r2, r3
   34286:	0213      	lsls	r3, r2, #8
   34288:	d53a      	bpl.n	34300 <__aeabi_ddiv+0x610>
   3428a:	2301      	movs	r3, #1
   3428c:	9a02      	ldr	r2, [sp, #8]
   3428e:	2401      	movs	r4, #1
   34290:	401a      	ands	r2, r3
   34292:	2300      	movs	r3, #0
   34294:	4694      	mov	ip, r2
   34296:	4698      	mov	r8, r3
   34298:	2200      	movs	r2, #0
   3429a:	e5f7      	b.n	33e8c <__aeabi_ddiv+0x19c>
   3429c:	2102      	movs	r1, #2
   3429e:	4249      	negs	r1, r1
   342a0:	468c      	mov	ip, r1
   342a2:	9d03      	ldr	r5, [sp, #12]
   342a4:	44e3      	add	fp, ip
   342a6:	46ac      	mov	ip, r5
   342a8:	44e2      	add	sl, ip
   342aa:	45aa      	cmp	sl, r5
   342ac:	41ad      	sbcs	r5, r5
   342ae:	426d      	negs	r5, r5
   342b0:	4445      	add	r5, r8
   342b2:	18ed      	adds	r5, r5, r3
   342b4:	1a2d      	subs	r5, r5, r0
   342b6:	e696      	b.n	33fe6 <__aeabi_ddiv+0x2f6>
   342b8:	1e8a      	subs	r2, r1, #2
   342ba:	9903      	ldr	r1, [sp, #12]
   342bc:	004d      	lsls	r5, r1, #1
   342be:	428d      	cmp	r5, r1
   342c0:	4189      	sbcs	r1, r1
   342c2:	4249      	negs	r1, r1
   342c4:	4441      	add	r1, r8
   342c6:	1876      	adds	r6, r6, r1
   342c8:	9503      	str	r5, [sp, #12]
   342ca:	e78f      	b.n	341ec <__aeabi_ddiv+0x4fc>
   342cc:	201f      	movs	r0, #31
   342ce:	4240      	negs	r0, r0
   342d0:	1ac3      	subs	r3, r0, r3
   342d2:	4658      	mov	r0, fp
   342d4:	40d8      	lsrs	r0, r3
   342d6:	0003      	movs	r3, r0
   342d8:	2a20      	cmp	r2, #32
   342da:	d028      	beq.n	3432e <__aeabi_ddiv+0x63e>
   342dc:	2040      	movs	r0, #64	; 0x40
   342de:	465d      	mov	r5, fp
   342e0:	1a82      	subs	r2, r0, r2
   342e2:	4095      	lsls	r5, r2
   342e4:	4329      	orrs	r1, r5
   342e6:	1e4a      	subs	r2, r1, #1
   342e8:	4191      	sbcs	r1, r2
   342ea:	4319      	orrs	r1, r3
   342ec:	2307      	movs	r3, #7
   342ee:	2200      	movs	r2, #0
   342f0:	400b      	ands	r3, r1
   342f2:	d009      	beq.n	34308 <__aeabi_ddiv+0x618>
   342f4:	230f      	movs	r3, #15
   342f6:	2200      	movs	r2, #0
   342f8:	400b      	ands	r3, r1
   342fa:	0008      	movs	r0, r1
   342fc:	2b04      	cmp	r3, #4
   342fe:	d1bd      	bne.n	3427c <__aeabi_ddiv+0x58c>
   34300:	0001      	movs	r1, r0
   34302:	0753      	lsls	r3, r2, #29
   34304:	0252      	lsls	r2, r2, #9
   34306:	0b12      	lsrs	r2, r2, #12
   34308:	08c9      	lsrs	r1, r1, #3
   3430a:	4319      	orrs	r1, r3
   3430c:	2301      	movs	r3, #1
   3430e:	4688      	mov	r8, r1
   34310:	9902      	ldr	r1, [sp, #8]
   34312:	2400      	movs	r4, #0
   34314:	4019      	ands	r1, r3
   34316:	468c      	mov	ip, r1
   34318:	e5b8      	b.n	33e8c <__aeabi_ddiv+0x19c>
   3431a:	4552      	cmp	r2, sl
   3431c:	d8be      	bhi.n	3429c <__aeabi_ddiv+0x5ac>
   3431e:	468b      	mov	fp, r1
   34320:	2500      	movs	r5, #0
   34322:	e660      	b.n	33fe6 <__aeabi_ddiv+0x2f6>
   34324:	9d03      	ldr	r5, [sp, #12]
   34326:	429d      	cmp	r5, r3
   34328:	d3c6      	bcc.n	342b8 <__aeabi_ddiv+0x5c8>
   3432a:	0011      	movs	r1, r2
   3432c:	e762      	b.n	341f4 <__aeabi_ddiv+0x504>
   3432e:	2500      	movs	r5, #0
   34330:	e7d8      	b.n	342e4 <__aeabi_ddiv+0x5f4>
   34332:	2280      	movs	r2, #128	; 0x80
   34334:	465b      	mov	r3, fp
   34336:	0312      	lsls	r2, r2, #12
   34338:	431a      	orrs	r2, r3
   3433a:	9b01      	ldr	r3, [sp, #4]
   3433c:	0312      	lsls	r2, r2, #12
   3433e:	0b12      	lsrs	r2, r2, #12
   34340:	469c      	mov	ip, r3
   34342:	4688      	mov	r8, r1
   34344:	4c03      	ldr	r4, [pc, #12]	; (34354 <__aeabi_ddiv+0x664>)
   34346:	e5a1      	b.n	33e8c <__aeabi_ddiv+0x19c>
   34348:	000003ff 	.word	0x000003ff
   3434c:	feffffff 	.word	0xfeffffff
   34350:	000007fe 	.word	0x000007fe
   34354:	000007ff 	.word	0x000007ff

00034358 <__aeabi_dmul>:
   34358:	b5f0      	push	{r4, r5, r6, r7, lr}
   3435a:	4657      	mov	r7, sl
   3435c:	4645      	mov	r5, r8
   3435e:	46de      	mov	lr, fp
   34360:	464e      	mov	r6, r9
   34362:	b5e0      	push	{r5, r6, r7, lr}
   34364:	030c      	lsls	r4, r1, #12
   34366:	4698      	mov	r8, r3
   34368:	004e      	lsls	r6, r1, #1
   3436a:	0b23      	lsrs	r3, r4, #12
   3436c:	b087      	sub	sp, #28
   3436e:	0007      	movs	r7, r0
   34370:	4692      	mov	sl, r2
   34372:	469b      	mov	fp, r3
   34374:	0d76      	lsrs	r6, r6, #21
   34376:	0fcd      	lsrs	r5, r1, #31
   34378:	2e00      	cmp	r6, #0
   3437a:	d06b      	beq.n	34454 <__aeabi_dmul+0xfc>
   3437c:	4b6d      	ldr	r3, [pc, #436]	; (34534 <__aeabi_dmul+0x1dc>)
   3437e:	429e      	cmp	r6, r3
   34380:	d035      	beq.n	343ee <__aeabi_dmul+0x96>
   34382:	2480      	movs	r4, #128	; 0x80
   34384:	465b      	mov	r3, fp
   34386:	0f42      	lsrs	r2, r0, #29
   34388:	0424      	lsls	r4, r4, #16
   3438a:	00db      	lsls	r3, r3, #3
   3438c:	4314      	orrs	r4, r2
   3438e:	431c      	orrs	r4, r3
   34390:	00c3      	lsls	r3, r0, #3
   34392:	4699      	mov	r9, r3
   34394:	4b68      	ldr	r3, [pc, #416]	; (34538 <__aeabi_dmul+0x1e0>)
   34396:	46a3      	mov	fp, r4
   34398:	469c      	mov	ip, r3
   3439a:	2300      	movs	r3, #0
   3439c:	2700      	movs	r7, #0
   3439e:	4466      	add	r6, ip
   343a0:	9302      	str	r3, [sp, #8]
   343a2:	4643      	mov	r3, r8
   343a4:	031c      	lsls	r4, r3, #12
   343a6:	005a      	lsls	r2, r3, #1
   343a8:	0fdb      	lsrs	r3, r3, #31
   343aa:	4650      	mov	r0, sl
   343ac:	0b24      	lsrs	r4, r4, #12
   343ae:	0d52      	lsrs	r2, r2, #21
   343b0:	4698      	mov	r8, r3
   343b2:	d100      	bne.n	343b6 <__aeabi_dmul+0x5e>
   343b4:	e076      	b.n	344a4 <__aeabi_dmul+0x14c>
   343b6:	4b5f      	ldr	r3, [pc, #380]	; (34534 <__aeabi_dmul+0x1dc>)
   343b8:	429a      	cmp	r2, r3
   343ba:	d06d      	beq.n	34498 <__aeabi_dmul+0x140>
   343bc:	2380      	movs	r3, #128	; 0x80
   343be:	0f41      	lsrs	r1, r0, #29
   343c0:	041b      	lsls	r3, r3, #16
   343c2:	430b      	orrs	r3, r1
   343c4:	495c      	ldr	r1, [pc, #368]	; (34538 <__aeabi_dmul+0x1e0>)
   343c6:	00e4      	lsls	r4, r4, #3
   343c8:	468c      	mov	ip, r1
   343ca:	431c      	orrs	r4, r3
   343cc:	00c3      	lsls	r3, r0, #3
   343ce:	2000      	movs	r0, #0
   343d0:	4462      	add	r2, ip
   343d2:	4641      	mov	r1, r8
   343d4:	18b6      	adds	r6, r6, r2
   343d6:	4069      	eors	r1, r5
   343d8:	1c72      	adds	r2, r6, #1
   343da:	9101      	str	r1, [sp, #4]
   343dc:	4694      	mov	ip, r2
   343de:	4307      	orrs	r7, r0
   343e0:	2f0f      	cmp	r7, #15
   343e2:	d900      	bls.n	343e6 <__aeabi_dmul+0x8e>
   343e4:	e0b0      	b.n	34548 <__aeabi_dmul+0x1f0>
   343e6:	4a55      	ldr	r2, [pc, #340]	; (3453c <__aeabi_dmul+0x1e4>)
   343e8:	00bf      	lsls	r7, r7, #2
   343ea:	59d2      	ldr	r2, [r2, r7]
   343ec:	4697      	mov	pc, r2
   343ee:	465b      	mov	r3, fp
   343f0:	4303      	orrs	r3, r0
   343f2:	4699      	mov	r9, r3
   343f4:	d000      	beq.n	343f8 <__aeabi_dmul+0xa0>
   343f6:	e087      	b.n	34508 <__aeabi_dmul+0x1b0>
   343f8:	2300      	movs	r3, #0
   343fa:	469b      	mov	fp, r3
   343fc:	3302      	adds	r3, #2
   343fe:	2708      	movs	r7, #8
   34400:	9302      	str	r3, [sp, #8]
   34402:	e7ce      	b.n	343a2 <__aeabi_dmul+0x4a>
   34404:	4642      	mov	r2, r8
   34406:	9201      	str	r2, [sp, #4]
   34408:	2802      	cmp	r0, #2
   3440a:	d067      	beq.n	344dc <__aeabi_dmul+0x184>
   3440c:	2803      	cmp	r0, #3
   3440e:	d100      	bne.n	34412 <__aeabi_dmul+0xba>
   34410:	e20e      	b.n	34830 <__aeabi_dmul+0x4d8>
   34412:	2801      	cmp	r0, #1
   34414:	d000      	beq.n	34418 <__aeabi_dmul+0xc0>
   34416:	e162      	b.n	346de <__aeabi_dmul+0x386>
   34418:	2300      	movs	r3, #0
   3441a:	2400      	movs	r4, #0
   3441c:	2200      	movs	r2, #0
   3441e:	4699      	mov	r9, r3
   34420:	9901      	ldr	r1, [sp, #4]
   34422:	4001      	ands	r1, r0
   34424:	b2cd      	uxtb	r5, r1
   34426:	2100      	movs	r1, #0
   34428:	0312      	lsls	r2, r2, #12
   3442a:	0d0b      	lsrs	r3, r1, #20
   3442c:	0b12      	lsrs	r2, r2, #12
   3442e:	051b      	lsls	r3, r3, #20
   34430:	4313      	orrs	r3, r2
   34432:	4a43      	ldr	r2, [pc, #268]	; (34540 <__aeabi_dmul+0x1e8>)
   34434:	0524      	lsls	r4, r4, #20
   34436:	4013      	ands	r3, r2
   34438:	431c      	orrs	r4, r3
   3443a:	0064      	lsls	r4, r4, #1
   3443c:	07ed      	lsls	r5, r5, #31
   3443e:	0864      	lsrs	r4, r4, #1
   34440:	432c      	orrs	r4, r5
   34442:	4648      	mov	r0, r9
   34444:	0021      	movs	r1, r4
   34446:	b007      	add	sp, #28
   34448:	bc3c      	pop	{r2, r3, r4, r5}
   3444a:	4690      	mov	r8, r2
   3444c:	4699      	mov	r9, r3
   3444e:	46a2      	mov	sl, r4
   34450:	46ab      	mov	fp, r5
   34452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34454:	4303      	orrs	r3, r0
   34456:	4699      	mov	r9, r3
   34458:	d04f      	beq.n	344fa <__aeabi_dmul+0x1a2>
   3445a:	465b      	mov	r3, fp
   3445c:	2b00      	cmp	r3, #0
   3445e:	d100      	bne.n	34462 <__aeabi_dmul+0x10a>
   34460:	e189      	b.n	34776 <__aeabi_dmul+0x41e>
   34462:	4658      	mov	r0, fp
   34464:	f000 fe0a 	bl	3507c <__clzsi2>
   34468:	0003      	movs	r3, r0
   3446a:	3b0b      	subs	r3, #11
   3446c:	2b1c      	cmp	r3, #28
   3446e:	dd00      	ble.n	34472 <__aeabi_dmul+0x11a>
   34470:	e17a      	b.n	34768 <__aeabi_dmul+0x410>
   34472:	221d      	movs	r2, #29
   34474:	1ad3      	subs	r3, r2, r3
   34476:	003a      	movs	r2, r7
   34478:	0001      	movs	r1, r0
   3447a:	465c      	mov	r4, fp
   3447c:	40da      	lsrs	r2, r3
   3447e:	3908      	subs	r1, #8
   34480:	408c      	lsls	r4, r1
   34482:	0013      	movs	r3, r2
   34484:	408f      	lsls	r7, r1
   34486:	4323      	orrs	r3, r4
   34488:	469b      	mov	fp, r3
   3448a:	46b9      	mov	r9, r7
   3448c:	2300      	movs	r3, #0
   3448e:	4e2d      	ldr	r6, [pc, #180]	; (34544 <__aeabi_dmul+0x1ec>)
   34490:	2700      	movs	r7, #0
   34492:	1a36      	subs	r6, r6, r0
   34494:	9302      	str	r3, [sp, #8]
   34496:	e784      	b.n	343a2 <__aeabi_dmul+0x4a>
   34498:	4653      	mov	r3, sl
   3449a:	4323      	orrs	r3, r4
   3449c:	d12a      	bne.n	344f4 <__aeabi_dmul+0x19c>
   3449e:	2400      	movs	r4, #0
   344a0:	2002      	movs	r0, #2
   344a2:	e796      	b.n	343d2 <__aeabi_dmul+0x7a>
   344a4:	4653      	mov	r3, sl
   344a6:	4323      	orrs	r3, r4
   344a8:	d020      	beq.n	344ec <__aeabi_dmul+0x194>
   344aa:	2c00      	cmp	r4, #0
   344ac:	d100      	bne.n	344b0 <__aeabi_dmul+0x158>
   344ae:	e157      	b.n	34760 <__aeabi_dmul+0x408>
   344b0:	0020      	movs	r0, r4
   344b2:	f000 fde3 	bl	3507c <__clzsi2>
   344b6:	0003      	movs	r3, r0
   344b8:	3b0b      	subs	r3, #11
   344ba:	2b1c      	cmp	r3, #28
   344bc:	dd00      	ble.n	344c0 <__aeabi_dmul+0x168>
   344be:	e149      	b.n	34754 <__aeabi_dmul+0x3fc>
   344c0:	211d      	movs	r1, #29
   344c2:	1acb      	subs	r3, r1, r3
   344c4:	4651      	mov	r1, sl
   344c6:	0002      	movs	r2, r0
   344c8:	40d9      	lsrs	r1, r3
   344ca:	4653      	mov	r3, sl
   344cc:	3a08      	subs	r2, #8
   344ce:	4094      	lsls	r4, r2
   344d0:	4093      	lsls	r3, r2
   344d2:	430c      	orrs	r4, r1
   344d4:	4a1b      	ldr	r2, [pc, #108]	; (34544 <__aeabi_dmul+0x1ec>)
   344d6:	1a12      	subs	r2, r2, r0
   344d8:	2000      	movs	r0, #0
   344da:	e77a      	b.n	343d2 <__aeabi_dmul+0x7a>
   344dc:	2501      	movs	r5, #1
   344de:	9b01      	ldr	r3, [sp, #4]
   344e0:	4c14      	ldr	r4, [pc, #80]	; (34534 <__aeabi_dmul+0x1dc>)
   344e2:	401d      	ands	r5, r3
   344e4:	2300      	movs	r3, #0
   344e6:	2200      	movs	r2, #0
   344e8:	4699      	mov	r9, r3
   344ea:	e79c      	b.n	34426 <__aeabi_dmul+0xce>
   344ec:	2400      	movs	r4, #0
   344ee:	2200      	movs	r2, #0
   344f0:	2001      	movs	r0, #1
   344f2:	e76e      	b.n	343d2 <__aeabi_dmul+0x7a>
   344f4:	4653      	mov	r3, sl
   344f6:	2003      	movs	r0, #3
   344f8:	e76b      	b.n	343d2 <__aeabi_dmul+0x7a>
   344fa:	2300      	movs	r3, #0
   344fc:	469b      	mov	fp, r3
   344fe:	3301      	adds	r3, #1
   34500:	2704      	movs	r7, #4
   34502:	2600      	movs	r6, #0
   34504:	9302      	str	r3, [sp, #8]
   34506:	e74c      	b.n	343a2 <__aeabi_dmul+0x4a>
   34508:	2303      	movs	r3, #3
   3450a:	4681      	mov	r9, r0
   3450c:	270c      	movs	r7, #12
   3450e:	9302      	str	r3, [sp, #8]
   34510:	e747      	b.n	343a2 <__aeabi_dmul+0x4a>
   34512:	2280      	movs	r2, #128	; 0x80
   34514:	2300      	movs	r3, #0
   34516:	2500      	movs	r5, #0
   34518:	0312      	lsls	r2, r2, #12
   3451a:	4699      	mov	r9, r3
   3451c:	4c05      	ldr	r4, [pc, #20]	; (34534 <__aeabi_dmul+0x1dc>)
   3451e:	e782      	b.n	34426 <__aeabi_dmul+0xce>
   34520:	465c      	mov	r4, fp
   34522:	464b      	mov	r3, r9
   34524:	9802      	ldr	r0, [sp, #8]
   34526:	e76f      	b.n	34408 <__aeabi_dmul+0xb0>
   34528:	465c      	mov	r4, fp
   3452a:	464b      	mov	r3, r9
   3452c:	9501      	str	r5, [sp, #4]
   3452e:	9802      	ldr	r0, [sp, #8]
   34530:	e76a      	b.n	34408 <__aeabi_dmul+0xb0>
   34532:	46c0      	nop			; (mov r8, r8)
   34534:	000007ff 	.word	0x000007ff
   34538:	fffffc01 	.word	0xfffffc01
   3453c:	0003c7e0 	.word	0x0003c7e0
   34540:	800fffff 	.word	0x800fffff
   34544:	fffffc0d 	.word	0xfffffc0d
   34548:	464a      	mov	r2, r9
   3454a:	4649      	mov	r1, r9
   3454c:	0c17      	lsrs	r7, r2, #16
   3454e:	0c1a      	lsrs	r2, r3, #16
   34550:	041b      	lsls	r3, r3, #16
   34552:	0c1b      	lsrs	r3, r3, #16
   34554:	0408      	lsls	r0, r1, #16
   34556:	0019      	movs	r1, r3
   34558:	0c00      	lsrs	r0, r0, #16
   3455a:	4341      	muls	r1, r0
   3455c:	0015      	movs	r5, r2
   3455e:	4688      	mov	r8, r1
   34560:	0019      	movs	r1, r3
   34562:	437d      	muls	r5, r7
   34564:	4379      	muls	r1, r7
   34566:	9503      	str	r5, [sp, #12]
   34568:	4689      	mov	r9, r1
   3456a:	0029      	movs	r1, r5
   3456c:	0015      	movs	r5, r2
   3456e:	4345      	muls	r5, r0
   34570:	444d      	add	r5, r9
   34572:	9502      	str	r5, [sp, #8]
   34574:	4645      	mov	r5, r8
   34576:	0c2d      	lsrs	r5, r5, #16
   34578:	46aa      	mov	sl, r5
   3457a:	9d02      	ldr	r5, [sp, #8]
   3457c:	4455      	add	r5, sl
   3457e:	45a9      	cmp	r9, r5
   34580:	d906      	bls.n	34590 <__aeabi_dmul+0x238>
   34582:	468a      	mov	sl, r1
   34584:	2180      	movs	r1, #128	; 0x80
   34586:	0249      	lsls	r1, r1, #9
   34588:	4689      	mov	r9, r1
   3458a:	44ca      	add	sl, r9
   3458c:	4651      	mov	r1, sl
   3458e:	9103      	str	r1, [sp, #12]
   34590:	0c29      	lsrs	r1, r5, #16
   34592:	9104      	str	r1, [sp, #16]
   34594:	4641      	mov	r1, r8
   34596:	0409      	lsls	r1, r1, #16
   34598:	042d      	lsls	r5, r5, #16
   3459a:	0c09      	lsrs	r1, r1, #16
   3459c:	4688      	mov	r8, r1
   3459e:	0029      	movs	r1, r5
   345a0:	0c25      	lsrs	r5, r4, #16
   345a2:	0424      	lsls	r4, r4, #16
   345a4:	4441      	add	r1, r8
   345a6:	0c24      	lsrs	r4, r4, #16
   345a8:	9105      	str	r1, [sp, #20]
   345aa:	0021      	movs	r1, r4
   345ac:	4341      	muls	r1, r0
   345ae:	4688      	mov	r8, r1
   345b0:	0021      	movs	r1, r4
   345b2:	4379      	muls	r1, r7
   345b4:	468a      	mov	sl, r1
   345b6:	4368      	muls	r0, r5
   345b8:	4641      	mov	r1, r8
   345ba:	4450      	add	r0, sl
   345bc:	4681      	mov	r9, r0
   345be:	0c08      	lsrs	r0, r1, #16
   345c0:	4448      	add	r0, r9
   345c2:	436f      	muls	r7, r5
   345c4:	4582      	cmp	sl, r0
   345c6:	d903      	bls.n	345d0 <__aeabi_dmul+0x278>
   345c8:	2180      	movs	r1, #128	; 0x80
   345ca:	0249      	lsls	r1, r1, #9
   345cc:	4689      	mov	r9, r1
   345ce:	444f      	add	r7, r9
   345d0:	0c01      	lsrs	r1, r0, #16
   345d2:	4689      	mov	r9, r1
   345d4:	0039      	movs	r1, r7
   345d6:	4449      	add	r1, r9
   345d8:	9102      	str	r1, [sp, #8]
   345da:	4641      	mov	r1, r8
   345dc:	040f      	lsls	r7, r1, #16
   345de:	9904      	ldr	r1, [sp, #16]
   345e0:	0c3f      	lsrs	r7, r7, #16
   345e2:	4688      	mov	r8, r1
   345e4:	0400      	lsls	r0, r0, #16
   345e6:	19c0      	adds	r0, r0, r7
   345e8:	4480      	add	r8, r0
   345ea:	4641      	mov	r1, r8
   345ec:	9104      	str	r1, [sp, #16]
   345ee:	4659      	mov	r1, fp
   345f0:	0c0f      	lsrs	r7, r1, #16
   345f2:	0409      	lsls	r1, r1, #16
   345f4:	0c09      	lsrs	r1, r1, #16
   345f6:	4688      	mov	r8, r1
   345f8:	4359      	muls	r1, r3
   345fa:	468a      	mov	sl, r1
   345fc:	0039      	movs	r1, r7
   345fe:	4351      	muls	r1, r2
   34600:	4689      	mov	r9, r1
   34602:	4641      	mov	r1, r8
   34604:	434a      	muls	r2, r1
   34606:	4651      	mov	r1, sl
   34608:	0c09      	lsrs	r1, r1, #16
   3460a:	468b      	mov	fp, r1
   3460c:	437b      	muls	r3, r7
   3460e:	18d2      	adds	r2, r2, r3
   34610:	445a      	add	r2, fp
   34612:	4293      	cmp	r3, r2
   34614:	d903      	bls.n	3461e <__aeabi_dmul+0x2c6>
   34616:	2380      	movs	r3, #128	; 0x80
   34618:	025b      	lsls	r3, r3, #9
   3461a:	469b      	mov	fp, r3
   3461c:	44d9      	add	r9, fp
   3461e:	4651      	mov	r1, sl
   34620:	0409      	lsls	r1, r1, #16
   34622:	0c09      	lsrs	r1, r1, #16
   34624:	468a      	mov	sl, r1
   34626:	4641      	mov	r1, r8
   34628:	4361      	muls	r1, r4
   3462a:	437c      	muls	r4, r7
   3462c:	0c13      	lsrs	r3, r2, #16
   3462e:	0412      	lsls	r2, r2, #16
   34630:	444b      	add	r3, r9
   34632:	4452      	add	r2, sl
   34634:	46a1      	mov	r9, r4
   34636:	468a      	mov	sl, r1
   34638:	003c      	movs	r4, r7
   3463a:	4641      	mov	r1, r8
   3463c:	436c      	muls	r4, r5
   3463e:	434d      	muls	r5, r1
   34640:	4651      	mov	r1, sl
   34642:	444d      	add	r5, r9
   34644:	0c0f      	lsrs	r7, r1, #16
   34646:	197d      	adds	r5, r7, r5
   34648:	45a9      	cmp	r9, r5
   3464a:	d903      	bls.n	34654 <__aeabi_dmul+0x2fc>
   3464c:	2180      	movs	r1, #128	; 0x80
   3464e:	0249      	lsls	r1, r1, #9
   34650:	4688      	mov	r8, r1
   34652:	4444      	add	r4, r8
   34654:	9f04      	ldr	r7, [sp, #16]
   34656:	9903      	ldr	r1, [sp, #12]
   34658:	46b8      	mov	r8, r7
   3465a:	4441      	add	r1, r8
   3465c:	468b      	mov	fp, r1
   3465e:	4583      	cmp	fp, r0
   34660:	4180      	sbcs	r0, r0
   34662:	4241      	negs	r1, r0
   34664:	4688      	mov	r8, r1
   34666:	4651      	mov	r1, sl
   34668:	0408      	lsls	r0, r1, #16
   3466a:	042f      	lsls	r7, r5, #16
   3466c:	0c00      	lsrs	r0, r0, #16
   3466e:	183f      	adds	r7, r7, r0
   34670:	4658      	mov	r0, fp
   34672:	9902      	ldr	r1, [sp, #8]
   34674:	1810      	adds	r0, r2, r0
   34676:	4689      	mov	r9, r1
   34678:	4290      	cmp	r0, r2
   3467a:	4192      	sbcs	r2, r2
   3467c:	444f      	add	r7, r9
   3467e:	46ba      	mov	sl, r7
   34680:	4252      	negs	r2, r2
   34682:	4699      	mov	r9, r3
   34684:	4693      	mov	fp, r2
   34686:	44c2      	add	sl, r8
   34688:	44d1      	add	r9, sl
   3468a:	44cb      	add	fp, r9
   3468c:	428f      	cmp	r7, r1
   3468e:	41bf      	sbcs	r7, r7
   34690:	45c2      	cmp	sl, r8
   34692:	4189      	sbcs	r1, r1
   34694:	4599      	cmp	r9, r3
   34696:	419b      	sbcs	r3, r3
   34698:	4593      	cmp	fp, r2
   3469a:	4192      	sbcs	r2, r2
   3469c:	427f      	negs	r7, r7
   3469e:	4249      	negs	r1, r1
   346a0:	0c2d      	lsrs	r5, r5, #16
   346a2:	4252      	negs	r2, r2
   346a4:	430f      	orrs	r7, r1
   346a6:	425b      	negs	r3, r3
   346a8:	4313      	orrs	r3, r2
   346aa:	197f      	adds	r7, r7, r5
   346ac:	18ff      	adds	r7, r7, r3
   346ae:	465b      	mov	r3, fp
   346b0:	193c      	adds	r4, r7, r4
   346b2:	0ddb      	lsrs	r3, r3, #23
   346b4:	9a05      	ldr	r2, [sp, #20]
   346b6:	0264      	lsls	r4, r4, #9
   346b8:	431c      	orrs	r4, r3
   346ba:	0243      	lsls	r3, r0, #9
   346bc:	4313      	orrs	r3, r2
   346be:	1e5d      	subs	r5, r3, #1
   346c0:	41ab      	sbcs	r3, r5
   346c2:	465a      	mov	r2, fp
   346c4:	0dc0      	lsrs	r0, r0, #23
   346c6:	4303      	orrs	r3, r0
   346c8:	0252      	lsls	r2, r2, #9
   346ca:	4313      	orrs	r3, r2
   346cc:	01e2      	lsls	r2, r4, #7
   346ce:	d556      	bpl.n	3477e <__aeabi_dmul+0x426>
   346d0:	2001      	movs	r0, #1
   346d2:	085a      	lsrs	r2, r3, #1
   346d4:	4003      	ands	r3, r0
   346d6:	4313      	orrs	r3, r2
   346d8:	07e2      	lsls	r2, r4, #31
   346da:	4313      	orrs	r3, r2
   346dc:	0864      	lsrs	r4, r4, #1
   346de:	485a      	ldr	r0, [pc, #360]	; (34848 <__aeabi_dmul+0x4f0>)
   346e0:	4460      	add	r0, ip
   346e2:	2800      	cmp	r0, #0
   346e4:	dd4d      	ble.n	34782 <__aeabi_dmul+0x42a>
   346e6:	075a      	lsls	r2, r3, #29
   346e8:	d009      	beq.n	346fe <__aeabi_dmul+0x3a6>
   346ea:	220f      	movs	r2, #15
   346ec:	401a      	ands	r2, r3
   346ee:	2a04      	cmp	r2, #4
   346f0:	d005      	beq.n	346fe <__aeabi_dmul+0x3a6>
   346f2:	1d1a      	adds	r2, r3, #4
   346f4:	429a      	cmp	r2, r3
   346f6:	419b      	sbcs	r3, r3
   346f8:	425b      	negs	r3, r3
   346fa:	18e4      	adds	r4, r4, r3
   346fc:	0013      	movs	r3, r2
   346fe:	01e2      	lsls	r2, r4, #7
   34700:	d504      	bpl.n	3470c <__aeabi_dmul+0x3b4>
   34702:	2080      	movs	r0, #128	; 0x80
   34704:	4a51      	ldr	r2, [pc, #324]	; (3484c <__aeabi_dmul+0x4f4>)
   34706:	00c0      	lsls	r0, r0, #3
   34708:	4014      	ands	r4, r2
   3470a:	4460      	add	r0, ip
   3470c:	4a50      	ldr	r2, [pc, #320]	; (34850 <__aeabi_dmul+0x4f8>)
   3470e:	4290      	cmp	r0, r2
   34710:	dd00      	ble.n	34714 <__aeabi_dmul+0x3bc>
   34712:	e6e3      	b.n	344dc <__aeabi_dmul+0x184>
   34714:	2501      	movs	r5, #1
   34716:	08db      	lsrs	r3, r3, #3
   34718:	0762      	lsls	r2, r4, #29
   3471a:	431a      	orrs	r2, r3
   3471c:	0264      	lsls	r4, r4, #9
   3471e:	9b01      	ldr	r3, [sp, #4]
   34720:	4691      	mov	r9, r2
   34722:	0b22      	lsrs	r2, r4, #12
   34724:	0544      	lsls	r4, r0, #21
   34726:	0d64      	lsrs	r4, r4, #21
   34728:	401d      	ands	r5, r3
   3472a:	e67c      	b.n	34426 <__aeabi_dmul+0xce>
   3472c:	2280      	movs	r2, #128	; 0x80
   3472e:	4659      	mov	r1, fp
   34730:	0312      	lsls	r2, r2, #12
   34732:	4211      	tst	r1, r2
   34734:	d008      	beq.n	34748 <__aeabi_dmul+0x3f0>
   34736:	4214      	tst	r4, r2
   34738:	d106      	bne.n	34748 <__aeabi_dmul+0x3f0>
   3473a:	4322      	orrs	r2, r4
   3473c:	0312      	lsls	r2, r2, #12
   3473e:	0b12      	lsrs	r2, r2, #12
   34740:	4645      	mov	r5, r8
   34742:	4699      	mov	r9, r3
   34744:	4c43      	ldr	r4, [pc, #268]	; (34854 <__aeabi_dmul+0x4fc>)
   34746:	e66e      	b.n	34426 <__aeabi_dmul+0xce>
   34748:	465b      	mov	r3, fp
   3474a:	431a      	orrs	r2, r3
   3474c:	0312      	lsls	r2, r2, #12
   3474e:	0b12      	lsrs	r2, r2, #12
   34750:	4c40      	ldr	r4, [pc, #256]	; (34854 <__aeabi_dmul+0x4fc>)
   34752:	e668      	b.n	34426 <__aeabi_dmul+0xce>
   34754:	0003      	movs	r3, r0
   34756:	4654      	mov	r4, sl
   34758:	3b28      	subs	r3, #40	; 0x28
   3475a:	409c      	lsls	r4, r3
   3475c:	2300      	movs	r3, #0
   3475e:	e6b9      	b.n	344d4 <__aeabi_dmul+0x17c>
   34760:	f000 fc8c 	bl	3507c <__clzsi2>
   34764:	3020      	adds	r0, #32
   34766:	e6a6      	b.n	344b6 <__aeabi_dmul+0x15e>
   34768:	0003      	movs	r3, r0
   3476a:	3b28      	subs	r3, #40	; 0x28
   3476c:	409f      	lsls	r7, r3
   3476e:	2300      	movs	r3, #0
   34770:	46bb      	mov	fp, r7
   34772:	4699      	mov	r9, r3
   34774:	e68a      	b.n	3448c <__aeabi_dmul+0x134>
   34776:	f000 fc81 	bl	3507c <__clzsi2>
   3477a:	3020      	adds	r0, #32
   3477c:	e674      	b.n	34468 <__aeabi_dmul+0x110>
   3477e:	46b4      	mov	ip, r6
   34780:	e7ad      	b.n	346de <__aeabi_dmul+0x386>
   34782:	2501      	movs	r5, #1
   34784:	1a2a      	subs	r2, r5, r0
   34786:	2a38      	cmp	r2, #56	; 0x38
   34788:	dd06      	ble.n	34798 <__aeabi_dmul+0x440>
   3478a:	9b01      	ldr	r3, [sp, #4]
   3478c:	2400      	movs	r4, #0
   3478e:	401d      	ands	r5, r3
   34790:	2300      	movs	r3, #0
   34792:	2200      	movs	r2, #0
   34794:	4699      	mov	r9, r3
   34796:	e646      	b.n	34426 <__aeabi_dmul+0xce>
   34798:	2a1f      	cmp	r2, #31
   3479a:	dc21      	bgt.n	347e0 <__aeabi_dmul+0x488>
   3479c:	2520      	movs	r5, #32
   3479e:	0020      	movs	r0, r4
   347a0:	1aad      	subs	r5, r5, r2
   347a2:	001e      	movs	r6, r3
   347a4:	40ab      	lsls	r3, r5
   347a6:	40a8      	lsls	r0, r5
   347a8:	40d6      	lsrs	r6, r2
   347aa:	1e5d      	subs	r5, r3, #1
   347ac:	41ab      	sbcs	r3, r5
   347ae:	4330      	orrs	r0, r6
   347b0:	4318      	orrs	r0, r3
   347b2:	40d4      	lsrs	r4, r2
   347b4:	0743      	lsls	r3, r0, #29
   347b6:	d009      	beq.n	347cc <__aeabi_dmul+0x474>
   347b8:	230f      	movs	r3, #15
   347ba:	4003      	ands	r3, r0
   347bc:	2b04      	cmp	r3, #4
   347be:	d005      	beq.n	347cc <__aeabi_dmul+0x474>
   347c0:	0003      	movs	r3, r0
   347c2:	1d18      	adds	r0, r3, #4
   347c4:	4298      	cmp	r0, r3
   347c6:	419b      	sbcs	r3, r3
   347c8:	425b      	negs	r3, r3
   347ca:	18e4      	adds	r4, r4, r3
   347cc:	0223      	lsls	r3, r4, #8
   347ce:	d521      	bpl.n	34814 <__aeabi_dmul+0x4bc>
   347d0:	2501      	movs	r5, #1
   347d2:	9b01      	ldr	r3, [sp, #4]
   347d4:	2401      	movs	r4, #1
   347d6:	401d      	ands	r5, r3
   347d8:	2300      	movs	r3, #0
   347da:	2200      	movs	r2, #0
   347dc:	4699      	mov	r9, r3
   347de:	e622      	b.n	34426 <__aeabi_dmul+0xce>
   347e0:	251f      	movs	r5, #31
   347e2:	0021      	movs	r1, r4
   347e4:	426d      	negs	r5, r5
   347e6:	1a28      	subs	r0, r5, r0
   347e8:	40c1      	lsrs	r1, r0
   347ea:	0008      	movs	r0, r1
   347ec:	2a20      	cmp	r2, #32
   347ee:	d01d      	beq.n	3482c <__aeabi_dmul+0x4d4>
   347f0:	355f      	adds	r5, #95	; 0x5f
   347f2:	1aaa      	subs	r2, r5, r2
   347f4:	4094      	lsls	r4, r2
   347f6:	4323      	orrs	r3, r4
   347f8:	1e5c      	subs	r4, r3, #1
   347fa:	41a3      	sbcs	r3, r4
   347fc:	2507      	movs	r5, #7
   347fe:	4303      	orrs	r3, r0
   34800:	401d      	ands	r5, r3
   34802:	2200      	movs	r2, #0
   34804:	2d00      	cmp	r5, #0
   34806:	d009      	beq.n	3481c <__aeabi_dmul+0x4c4>
   34808:	220f      	movs	r2, #15
   3480a:	2400      	movs	r4, #0
   3480c:	401a      	ands	r2, r3
   3480e:	0018      	movs	r0, r3
   34810:	2a04      	cmp	r2, #4
   34812:	d1d6      	bne.n	347c2 <__aeabi_dmul+0x46a>
   34814:	0003      	movs	r3, r0
   34816:	0765      	lsls	r5, r4, #29
   34818:	0264      	lsls	r4, r4, #9
   3481a:	0b22      	lsrs	r2, r4, #12
   3481c:	08db      	lsrs	r3, r3, #3
   3481e:	432b      	orrs	r3, r5
   34820:	2501      	movs	r5, #1
   34822:	4699      	mov	r9, r3
   34824:	9b01      	ldr	r3, [sp, #4]
   34826:	2400      	movs	r4, #0
   34828:	401d      	ands	r5, r3
   3482a:	e5fc      	b.n	34426 <__aeabi_dmul+0xce>
   3482c:	2400      	movs	r4, #0
   3482e:	e7e2      	b.n	347f6 <__aeabi_dmul+0x49e>
   34830:	2280      	movs	r2, #128	; 0x80
   34832:	2501      	movs	r5, #1
   34834:	0312      	lsls	r2, r2, #12
   34836:	4322      	orrs	r2, r4
   34838:	9901      	ldr	r1, [sp, #4]
   3483a:	0312      	lsls	r2, r2, #12
   3483c:	0b12      	lsrs	r2, r2, #12
   3483e:	400d      	ands	r5, r1
   34840:	4699      	mov	r9, r3
   34842:	4c04      	ldr	r4, [pc, #16]	; (34854 <__aeabi_dmul+0x4fc>)
   34844:	e5ef      	b.n	34426 <__aeabi_dmul+0xce>
   34846:	46c0      	nop			; (mov r8, r8)
   34848:	000003ff 	.word	0x000003ff
   3484c:	feffffff 	.word	0xfeffffff
   34850:	000007fe 	.word	0x000007fe
   34854:	000007ff 	.word	0x000007ff

00034858 <__aeabi_dsub>:
   34858:	b5f0      	push	{r4, r5, r6, r7, lr}
   3485a:	4646      	mov	r6, r8
   3485c:	46d6      	mov	lr, sl
   3485e:	464f      	mov	r7, r9
   34860:	030c      	lsls	r4, r1, #12
   34862:	b5c0      	push	{r6, r7, lr}
   34864:	0fcd      	lsrs	r5, r1, #31
   34866:	004e      	lsls	r6, r1, #1
   34868:	0a61      	lsrs	r1, r4, #9
   3486a:	0f44      	lsrs	r4, r0, #29
   3486c:	430c      	orrs	r4, r1
   3486e:	00c1      	lsls	r1, r0, #3
   34870:	0058      	lsls	r0, r3, #1
   34872:	0d40      	lsrs	r0, r0, #21
   34874:	4684      	mov	ip, r0
   34876:	468a      	mov	sl, r1
   34878:	000f      	movs	r7, r1
   3487a:	0319      	lsls	r1, r3, #12
   3487c:	0f50      	lsrs	r0, r2, #29
   3487e:	0a49      	lsrs	r1, r1, #9
   34880:	4301      	orrs	r1, r0
   34882:	48c6      	ldr	r0, [pc, #792]	; (34b9c <__aeabi_dsub+0x344>)
   34884:	0d76      	lsrs	r6, r6, #21
   34886:	46a8      	mov	r8, r5
   34888:	0fdb      	lsrs	r3, r3, #31
   3488a:	00d2      	lsls	r2, r2, #3
   3488c:	4584      	cmp	ip, r0
   3488e:	d100      	bne.n	34892 <__aeabi_dsub+0x3a>
   34890:	e0d8      	b.n	34a44 <__aeabi_dsub+0x1ec>
   34892:	2001      	movs	r0, #1
   34894:	4043      	eors	r3, r0
   34896:	42ab      	cmp	r3, r5
   34898:	d100      	bne.n	3489c <__aeabi_dsub+0x44>
   3489a:	e0a6      	b.n	349ea <__aeabi_dsub+0x192>
   3489c:	4660      	mov	r0, ip
   3489e:	1a35      	subs	r5, r6, r0
   348a0:	2d00      	cmp	r5, #0
   348a2:	dc00      	bgt.n	348a6 <__aeabi_dsub+0x4e>
   348a4:	e105      	b.n	34ab2 <__aeabi_dsub+0x25a>
   348a6:	2800      	cmp	r0, #0
   348a8:	d110      	bne.n	348cc <__aeabi_dsub+0x74>
   348aa:	000b      	movs	r3, r1
   348ac:	4313      	orrs	r3, r2
   348ae:	d100      	bne.n	348b2 <__aeabi_dsub+0x5a>
   348b0:	e0d7      	b.n	34a62 <__aeabi_dsub+0x20a>
   348b2:	1e6b      	subs	r3, r5, #1
   348b4:	2b00      	cmp	r3, #0
   348b6:	d000      	beq.n	348ba <__aeabi_dsub+0x62>
   348b8:	e14b      	b.n	34b52 <__aeabi_dsub+0x2fa>
   348ba:	4653      	mov	r3, sl
   348bc:	1a9f      	subs	r7, r3, r2
   348be:	45ba      	cmp	sl, r7
   348c0:	4180      	sbcs	r0, r0
   348c2:	1a64      	subs	r4, r4, r1
   348c4:	4240      	negs	r0, r0
   348c6:	1a24      	subs	r4, r4, r0
   348c8:	2601      	movs	r6, #1
   348ca:	e01e      	b.n	3490a <__aeabi_dsub+0xb2>
   348cc:	4bb3      	ldr	r3, [pc, #716]	; (34b9c <__aeabi_dsub+0x344>)
   348ce:	429e      	cmp	r6, r3
   348d0:	d048      	beq.n	34964 <__aeabi_dsub+0x10c>
   348d2:	2380      	movs	r3, #128	; 0x80
   348d4:	041b      	lsls	r3, r3, #16
   348d6:	4319      	orrs	r1, r3
   348d8:	2d38      	cmp	r5, #56	; 0x38
   348da:	dd00      	ble.n	348de <__aeabi_dsub+0x86>
   348dc:	e119      	b.n	34b12 <__aeabi_dsub+0x2ba>
   348de:	2d1f      	cmp	r5, #31
   348e0:	dd00      	ble.n	348e4 <__aeabi_dsub+0x8c>
   348e2:	e14c      	b.n	34b7e <__aeabi_dsub+0x326>
   348e4:	2320      	movs	r3, #32
   348e6:	000f      	movs	r7, r1
   348e8:	1b5b      	subs	r3, r3, r5
   348ea:	0010      	movs	r0, r2
   348ec:	409a      	lsls	r2, r3
   348ee:	409f      	lsls	r7, r3
   348f0:	40e8      	lsrs	r0, r5
   348f2:	1e53      	subs	r3, r2, #1
   348f4:	419a      	sbcs	r2, r3
   348f6:	40e9      	lsrs	r1, r5
   348f8:	4307      	orrs	r7, r0
   348fa:	4317      	orrs	r7, r2
   348fc:	4653      	mov	r3, sl
   348fe:	1bdf      	subs	r7, r3, r7
   34900:	1a61      	subs	r1, r4, r1
   34902:	45ba      	cmp	sl, r7
   34904:	41a4      	sbcs	r4, r4
   34906:	4264      	negs	r4, r4
   34908:	1b0c      	subs	r4, r1, r4
   3490a:	0223      	lsls	r3, r4, #8
   3490c:	d400      	bmi.n	34910 <__aeabi_dsub+0xb8>
   3490e:	e0c5      	b.n	34a9c <__aeabi_dsub+0x244>
   34910:	0264      	lsls	r4, r4, #9
   34912:	0a65      	lsrs	r5, r4, #9
   34914:	2d00      	cmp	r5, #0
   34916:	d100      	bne.n	3491a <__aeabi_dsub+0xc2>
   34918:	e0f6      	b.n	34b08 <__aeabi_dsub+0x2b0>
   3491a:	0028      	movs	r0, r5
   3491c:	f000 fbae 	bl	3507c <__clzsi2>
   34920:	0003      	movs	r3, r0
   34922:	3b08      	subs	r3, #8
   34924:	2b1f      	cmp	r3, #31
   34926:	dd00      	ble.n	3492a <__aeabi_dsub+0xd2>
   34928:	e0e9      	b.n	34afe <__aeabi_dsub+0x2a6>
   3492a:	2220      	movs	r2, #32
   3492c:	003c      	movs	r4, r7
   3492e:	1ad2      	subs	r2, r2, r3
   34930:	409d      	lsls	r5, r3
   34932:	40d4      	lsrs	r4, r2
   34934:	409f      	lsls	r7, r3
   34936:	4325      	orrs	r5, r4
   34938:	429e      	cmp	r6, r3
   3493a:	dd00      	ble.n	3493e <__aeabi_dsub+0xe6>
   3493c:	e0db      	b.n	34af6 <__aeabi_dsub+0x29e>
   3493e:	1b9e      	subs	r6, r3, r6
   34940:	1c73      	adds	r3, r6, #1
   34942:	2b1f      	cmp	r3, #31
   34944:	dd00      	ble.n	34948 <__aeabi_dsub+0xf0>
   34946:	e10a      	b.n	34b5e <__aeabi_dsub+0x306>
   34948:	2220      	movs	r2, #32
   3494a:	0038      	movs	r0, r7
   3494c:	1ad2      	subs	r2, r2, r3
   3494e:	0029      	movs	r1, r5
   34950:	4097      	lsls	r7, r2
   34952:	002c      	movs	r4, r5
   34954:	4091      	lsls	r1, r2
   34956:	40d8      	lsrs	r0, r3
   34958:	1e7a      	subs	r2, r7, #1
   3495a:	4197      	sbcs	r7, r2
   3495c:	40dc      	lsrs	r4, r3
   3495e:	2600      	movs	r6, #0
   34960:	4301      	orrs	r1, r0
   34962:	430f      	orrs	r7, r1
   34964:	077b      	lsls	r3, r7, #29
   34966:	d009      	beq.n	3497c <__aeabi_dsub+0x124>
   34968:	230f      	movs	r3, #15
   3496a:	403b      	ands	r3, r7
   3496c:	2b04      	cmp	r3, #4
   3496e:	d005      	beq.n	3497c <__aeabi_dsub+0x124>
   34970:	1d3b      	adds	r3, r7, #4
   34972:	42bb      	cmp	r3, r7
   34974:	41bf      	sbcs	r7, r7
   34976:	427f      	negs	r7, r7
   34978:	19e4      	adds	r4, r4, r7
   3497a:	001f      	movs	r7, r3
   3497c:	0223      	lsls	r3, r4, #8
   3497e:	d525      	bpl.n	349cc <__aeabi_dsub+0x174>
   34980:	4b86      	ldr	r3, [pc, #536]	; (34b9c <__aeabi_dsub+0x344>)
   34982:	3601      	adds	r6, #1
   34984:	429e      	cmp	r6, r3
   34986:	d100      	bne.n	3498a <__aeabi_dsub+0x132>
   34988:	e0af      	b.n	34aea <__aeabi_dsub+0x292>
   3498a:	4b85      	ldr	r3, [pc, #532]	; (34ba0 <__aeabi_dsub+0x348>)
   3498c:	2501      	movs	r5, #1
   3498e:	401c      	ands	r4, r3
   34990:	4643      	mov	r3, r8
   34992:	0762      	lsls	r2, r4, #29
   34994:	08ff      	lsrs	r7, r7, #3
   34996:	0264      	lsls	r4, r4, #9
   34998:	0576      	lsls	r6, r6, #21
   3499a:	4317      	orrs	r7, r2
   3499c:	0b24      	lsrs	r4, r4, #12
   3499e:	0d76      	lsrs	r6, r6, #21
   349a0:	401d      	ands	r5, r3
   349a2:	2100      	movs	r1, #0
   349a4:	0324      	lsls	r4, r4, #12
   349a6:	0b23      	lsrs	r3, r4, #12
   349a8:	0d0c      	lsrs	r4, r1, #20
   349aa:	4a7e      	ldr	r2, [pc, #504]	; (34ba4 <__aeabi_dsub+0x34c>)
   349ac:	0524      	lsls	r4, r4, #20
   349ae:	431c      	orrs	r4, r3
   349b0:	4014      	ands	r4, r2
   349b2:	0533      	lsls	r3, r6, #20
   349b4:	4323      	orrs	r3, r4
   349b6:	005b      	lsls	r3, r3, #1
   349b8:	07ed      	lsls	r5, r5, #31
   349ba:	085b      	lsrs	r3, r3, #1
   349bc:	432b      	orrs	r3, r5
   349be:	0038      	movs	r0, r7
   349c0:	0019      	movs	r1, r3
   349c2:	bc1c      	pop	{r2, r3, r4}
   349c4:	4690      	mov	r8, r2
   349c6:	4699      	mov	r9, r3
   349c8:	46a2      	mov	sl, r4
   349ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   349cc:	2501      	movs	r5, #1
   349ce:	4643      	mov	r3, r8
   349d0:	0762      	lsls	r2, r4, #29
   349d2:	08ff      	lsrs	r7, r7, #3
   349d4:	4317      	orrs	r7, r2
   349d6:	08e4      	lsrs	r4, r4, #3
   349d8:	401d      	ands	r5, r3
   349da:	4b70      	ldr	r3, [pc, #448]	; (34b9c <__aeabi_dsub+0x344>)
   349dc:	429e      	cmp	r6, r3
   349de:	d036      	beq.n	34a4e <__aeabi_dsub+0x1f6>
   349e0:	0324      	lsls	r4, r4, #12
   349e2:	0576      	lsls	r6, r6, #21
   349e4:	0b24      	lsrs	r4, r4, #12
   349e6:	0d76      	lsrs	r6, r6, #21
   349e8:	e7db      	b.n	349a2 <__aeabi_dsub+0x14a>
   349ea:	4663      	mov	r3, ip
   349ec:	1af3      	subs	r3, r6, r3
   349ee:	2b00      	cmp	r3, #0
   349f0:	dc00      	bgt.n	349f4 <__aeabi_dsub+0x19c>
   349f2:	e094      	b.n	34b1e <__aeabi_dsub+0x2c6>
   349f4:	4660      	mov	r0, ip
   349f6:	2800      	cmp	r0, #0
   349f8:	d035      	beq.n	34a66 <__aeabi_dsub+0x20e>
   349fa:	4868      	ldr	r0, [pc, #416]	; (34b9c <__aeabi_dsub+0x344>)
   349fc:	4286      	cmp	r6, r0
   349fe:	d0b1      	beq.n	34964 <__aeabi_dsub+0x10c>
   34a00:	2780      	movs	r7, #128	; 0x80
   34a02:	043f      	lsls	r7, r7, #16
   34a04:	4339      	orrs	r1, r7
   34a06:	2b38      	cmp	r3, #56	; 0x38
   34a08:	dc00      	bgt.n	34a0c <__aeabi_dsub+0x1b4>
   34a0a:	e0fd      	b.n	34c08 <__aeabi_dsub+0x3b0>
   34a0c:	430a      	orrs	r2, r1
   34a0e:	0017      	movs	r7, r2
   34a10:	2100      	movs	r1, #0
   34a12:	1e7a      	subs	r2, r7, #1
   34a14:	4197      	sbcs	r7, r2
   34a16:	4457      	add	r7, sl
   34a18:	4557      	cmp	r7, sl
   34a1a:	4180      	sbcs	r0, r0
   34a1c:	1909      	adds	r1, r1, r4
   34a1e:	4244      	negs	r4, r0
   34a20:	190c      	adds	r4, r1, r4
   34a22:	0223      	lsls	r3, r4, #8
   34a24:	d53a      	bpl.n	34a9c <__aeabi_dsub+0x244>
   34a26:	4b5d      	ldr	r3, [pc, #372]	; (34b9c <__aeabi_dsub+0x344>)
   34a28:	3601      	adds	r6, #1
   34a2a:	429e      	cmp	r6, r3
   34a2c:	d100      	bne.n	34a30 <__aeabi_dsub+0x1d8>
   34a2e:	e14b      	b.n	34cc8 <__aeabi_dsub+0x470>
   34a30:	2201      	movs	r2, #1
   34a32:	4b5b      	ldr	r3, [pc, #364]	; (34ba0 <__aeabi_dsub+0x348>)
   34a34:	401c      	ands	r4, r3
   34a36:	087b      	lsrs	r3, r7, #1
   34a38:	4017      	ands	r7, r2
   34a3a:	431f      	orrs	r7, r3
   34a3c:	07e2      	lsls	r2, r4, #31
   34a3e:	4317      	orrs	r7, r2
   34a40:	0864      	lsrs	r4, r4, #1
   34a42:	e78f      	b.n	34964 <__aeabi_dsub+0x10c>
   34a44:	0008      	movs	r0, r1
   34a46:	4310      	orrs	r0, r2
   34a48:	d000      	beq.n	34a4c <__aeabi_dsub+0x1f4>
   34a4a:	e724      	b.n	34896 <__aeabi_dsub+0x3e>
   34a4c:	e721      	b.n	34892 <__aeabi_dsub+0x3a>
   34a4e:	0023      	movs	r3, r4
   34a50:	433b      	orrs	r3, r7
   34a52:	d100      	bne.n	34a56 <__aeabi_dsub+0x1fe>
   34a54:	e1b9      	b.n	34dca <__aeabi_dsub+0x572>
   34a56:	2280      	movs	r2, #128	; 0x80
   34a58:	0312      	lsls	r2, r2, #12
   34a5a:	4314      	orrs	r4, r2
   34a5c:	0324      	lsls	r4, r4, #12
   34a5e:	0b24      	lsrs	r4, r4, #12
   34a60:	e79f      	b.n	349a2 <__aeabi_dsub+0x14a>
   34a62:	002e      	movs	r6, r5
   34a64:	e77e      	b.n	34964 <__aeabi_dsub+0x10c>
   34a66:	0008      	movs	r0, r1
   34a68:	4310      	orrs	r0, r2
   34a6a:	d100      	bne.n	34a6e <__aeabi_dsub+0x216>
   34a6c:	e0ca      	b.n	34c04 <__aeabi_dsub+0x3ac>
   34a6e:	1e58      	subs	r0, r3, #1
   34a70:	4684      	mov	ip, r0
   34a72:	2800      	cmp	r0, #0
   34a74:	d000      	beq.n	34a78 <__aeabi_dsub+0x220>
   34a76:	e0e7      	b.n	34c48 <__aeabi_dsub+0x3f0>
   34a78:	4452      	add	r2, sl
   34a7a:	4552      	cmp	r2, sl
   34a7c:	4180      	sbcs	r0, r0
   34a7e:	1864      	adds	r4, r4, r1
   34a80:	4240      	negs	r0, r0
   34a82:	1824      	adds	r4, r4, r0
   34a84:	0017      	movs	r7, r2
   34a86:	2601      	movs	r6, #1
   34a88:	0223      	lsls	r3, r4, #8
   34a8a:	d507      	bpl.n	34a9c <__aeabi_dsub+0x244>
   34a8c:	2602      	movs	r6, #2
   34a8e:	e7cf      	b.n	34a30 <__aeabi_dsub+0x1d8>
   34a90:	4664      	mov	r4, ip
   34a92:	432c      	orrs	r4, r5
   34a94:	d100      	bne.n	34a98 <__aeabi_dsub+0x240>
   34a96:	e1b3      	b.n	34e00 <__aeabi_dsub+0x5a8>
   34a98:	002c      	movs	r4, r5
   34a9a:	4667      	mov	r7, ip
   34a9c:	077b      	lsls	r3, r7, #29
   34a9e:	d000      	beq.n	34aa2 <__aeabi_dsub+0x24a>
   34aa0:	e762      	b.n	34968 <__aeabi_dsub+0x110>
   34aa2:	0763      	lsls	r3, r4, #29
   34aa4:	08ff      	lsrs	r7, r7, #3
   34aa6:	431f      	orrs	r7, r3
   34aa8:	2501      	movs	r5, #1
   34aaa:	4643      	mov	r3, r8
   34aac:	08e4      	lsrs	r4, r4, #3
   34aae:	401d      	ands	r5, r3
   34ab0:	e793      	b.n	349da <__aeabi_dsub+0x182>
   34ab2:	2d00      	cmp	r5, #0
   34ab4:	d178      	bne.n	34ba8 <__aeabi_dsub+0x350>
   34ab6:	1c75      	adds	r5, r6, #1
   34ab8:	056d      	lsls	r5, r5, #21
   34aba:	0d6d      	lsrs	r5, r5, #21
   34abc:	2d01      	cmp	r5, #1
   34abe:	dc00      	bgt.n	34ac2 <__aeabi_dsub+0x26a>
   34ac0:	e0f2      	b.n	34ca8 <__aeabi_dsub+0x450>
   34ac2:	4650      	mov	r0, sl
   34ac4:	1a80      	subs	r0, r0, r2
   34ac6:	4582      	cmp	sl, r0
   34ac8:	41bf      	sbcs	r7, r7
   34aca:	1a65      	subs	r5, r4, r1
   34acc:	427f      	negs	r7, r7
   34ace:	1bed      	subs	r5, r5, r7
   34ad0:	4684      	mov	ip, r0
   34ad2:	0228      	lsls	r0, r5, #8
   34ad4:	d400      	bmi.n	34ad8 <__aeabi_dsub+0x280>
   34ad6:	e08c      	b.n	34bf2 <__aeabi_dsub+0x39a>
   34ad8:	4650      	mov	r0, sl
   34ada:	1a17      	subs	r7, r2, r0
   34adc:	42ba      	cmp	r2, r7
   34ade:	4192      	sbcs	r2, r2
   34ae0:	1b0c      	subs	r4, r1, r4
   34ae2:	4255      	negs	r5, r2
   34ae4:	1b65      	subs	r5, r4, r5
   34ae6:	4698      	mov	r8, r3
   34ae8:	e714      	b.n	34914 <__aeabi_dsub+0xbc>
   34aea:	2501      	movs	r5, #1
   34aec:	4643      	mov	r3, r8
   34aee:	2400      	movs	r4, #0
   34af0:	401d      	ands	r5, r3
   34af2:	2700      	movs	r7, #0
   34af4:	e755      	b.n	349a2 <__aeabi_dsub+0x14a>
   34af6:	4c2a      	ldr	r4, [pc, #168]	; (34ba0 <__aeabi_dsub+0x348>)
   34af8:	1af6      	subs	r6, r6, r3
   34afa:	402c      	ands	r4, r5
   34afc:	e732      	b.n	34964 <__aeabi_dsub+0x10c>
   34afe:	003d      	movs	r5, r7
   34b00:	3828      	subs	r0, #40	; 0x28
   34b02:	4085      	lsls	r5, r0
   34b04:	2700      	movs	r7, #0
   34b06:	e717      	b.n	34938 <__aeabi_dsub+0xe0>
   34b08:	0038      	movs	r0, r7
   34b0a:	f000 fab7 	bl	3507c <__clzsi2>
   34b0e:	3020      	adds	r0, #32
   34b10:	e706      	b.n	34920 <__aeabi_dsub+0xc8>
   34b12:	430a      	orrs	r2, r1
   34b14:	0017      	movs	r7, r2
   34b16:	2100      	movs	r1, #0
   34b18:	1e7a      	subs	r2, r7, #1
   34b1a:	4197      	sbcs	r7, r2
   34b1c:	e6ee      	b.n	348fc <__aeabi_dsub+0xa4>
   34b1e:	2b00      	cmp	r3, #0
   34b20:	d000      	beq.n	34b24 <__aeabi_dsub+0x2cc>
   34b22:	e0e5      	b.n	34cf0 <__aeabi_dsub+0x498>
   34b24:	1c73      	adds	r3, r6, #1
   34b26:	469c      	mov	ip, r3
   34b28:	055b      	lsls	r3, r3, #21
   34b2a:	0d5b      	lsrs	r3, r3, #21
   34b2c:	2b01      	cmp	r3, #1
   34b2e:	dc00      	bgt.n	34b32 <__aeabi_dsub+0x2da>
   34b30:	e09f      	b.n	34c72 <__aeabi_dsub+0x41a>
   34b32:	4b1a      	ldr	r3, [pc, #104]	; (34b9c <__aeabi_dsub+0x344>)
   34b34:	459c      	cmp	ip, r3
   34b36:	d100      	bne.n	34b3a <__aeabi_dsub+0x2e2>
   34b38:	e0c5      	b.n	34cc6 <__aeabi_dsub+0x46e>
   34b3a:	4452      	add	r2, sl
   34b3c:	4552      	cmp	r2, sl
   34b3e:	4180      	sbcs	r0, r0
   34b40:	1864      	adds	r4, r4, r1
   34b42:	4240      	negs	r0, r0
   34b44:	1824      	adds	r4, r4, r0
   34b46:	07e7      	lsls	r7, r4, #31
   34b48:	0852      	lsrs	r2, r2, #1
   34b4a:	4317      	orrs	r7, r2
   34b4c:	0864      	lsrs	r4, r4, #1
   34b4e:	4666      	mov	r6, ip
   34b50:	e708      	b.n	34964 <__aeabi_dsub+0x10c>
   34b52:	4812      	ldr	r0, [pc, #72]	; (34b9c <__aeabi_dsub+0x344>)
   34b54:	4285      	cmp	r5, r0
   34b56:	d100      	bne.n	34b5a <__aeabi_dsub+0x302>
   34b58:	e085      	b.n	34c66 <__aeabi_dsub+0x40e>
   34b5a:	001d      	movs	r5, r3
   34b5c:	e6bc      	b.n	348d8 <__aeabi_dsub+0x80>
   34b5e:	0029      	movs	r1, r5
   34b60:	3e1f      	subs	r6, #31
   34b62:	40f1      	lsrs	r1, r6
   34b64:	2b20      	cmp	r3, #32
   34b66:	d100      	bne.n	34b6a <__aeabi_dsub+0x312>
   34b68:	e07f      	b.n	34c6a <__aeabi_dsub+0x412>
   34b6a:	2240      	movs	r2, #64	; 0x40
   34b6c:	1ad3      	subs	r3, r2, r3
   34b6e:	409d      	lsls	r5, r3
   34b70:	432f      	orrs	r7, r5
   34b72:	1e7d      	subs	r5, r7, #1
   34b74:	41af      	sbcs	r7, r5
   34b76:	2400      	movs	r4, #0
   34b78:	430f      	orrs	r7, r1
   34b7a:	2600      	movs	r6, #0
   34b7c:	e78e      	b.n	34a9c <__aeabi_dsub+0x244>
   34b7e:	002b      	movs	r3, r5
   34b80:	000f      	movs	r7, r1
   34b82:	3b20      	subs	r3, #32
   34b84:	40df      	lsrs	r7, r3
   34b86:	2d20      	cmp	r5, #32
   34b88:	d071      	beq.n	34c6e <__aeabi_dsub+0x416>
   34b8a:	2340      	movs	r3, #64	; 0x40
   34b8c:	1b5d      	subs	r5, r3, r5
   34b8e:	40a9      	lsls	r1, r5
   34b90:	430a      	orrs	r2, r1
   34b92:	1e51      	subs	r1, r2, #1
   34b94:	418a      	sbcs	r2, r1
   34b96:	2100      	movs	r1, #0
   34b98:	4317      	orrs	r7, r2
   34b9a:	e6af      	b.n	348fc <__aeabi_dsub+0xa4>
   34b9c:	000007ff 	.word	0x000007ff
   34ba0:	ff7fffff 	.word	0xff7fffff
   34ba4:	800fffff 	.word	0x800fffff
   34ba8:	2e00      	cmp	r6, #0
   34baa:	d03e      	beq.n	34c2a <__aeabi_dsub+0x3d2>
   34bac:	4eb3      	ldr	r6, [pc, #716]	; (34e7c <__aeabi_dsub+0x624>)
   34bae:	45b4      	cmp	ip, r6
   34bb0:	d045      	beq.n	34c3e <__aeabi_dsub+0x3e6>
   34bb2:	2680      	movs	r6, #128	; 0x80
   34bb4:	0436      	lsls	r6, r6, #16
   34bb6:	426d      	negs	r5, r5
   34bb8:	4334      	orrs	r4, r6
   34bba:	2d38      	cmp	r5, #56	; 0x38
   34bbc:	dd00      	ble.n	34bc0 <__aeabi_dsub+0x368>
   34bbe:	e0a8      	b.n	34d12 <__aeabi_dsub+0x4ba>
   34bc0:	2d1f      	cmp	r5, #31
   34bc2:	dd00      	ble.n	34bc6 <__aeabi_dsub+0x36e>
   34bc4:	e11f      	b.n	34e06 <__aeabi_dsub+0x5ae>
   34bc6:	2620      	movs	r6, #32
   34bc8:	0027      	movs	r7, r4
   34bca:	4650      	mov	r0, sl
   34bcc:	1b76      	subs	r6, r6, r5
   34bce:	40b7      	lsls	r7, r6
   34bd0:	40e8      	lsrs	r0, r5
   34bd2:	4307      	orrs	r7, r0
   34bd4:	4650      	mov	r0, sl
   34bd6:	40b0      	lsls	r0, r6
   34bd8:	1e46      	subs	r6, r0, #1
   34bda:	41b0      	sbcs	r0, r6
   34bdc:	40ec      	lsrs	r4, r5
   34bde:	4338      	orrs	r0, r7
   34be0:	1a17      	subs	r7, r2, r0
   34be2:	42ba      	cmp	r2, r7
   34be4:	4192      	sbcs	r2, r2
   34be6:	1b0c      	subs	r4, r1, r4
   34be8:	4252      	negs	r2, r2
   34bea:	1aa4      	subs	r4, r4, r2
   34bec:	4666      	mov	r6, ip
   34bee:	4698      	mov	r8, r3
   34bf0:	e68b      	b.n	3490a <__aeabi_dsub+0xb2>
   34bf2:	4664      	mov	r4, ip
   34bf4:	4667      	mov	r7, ip
   34bf6:	432c      	orrs	r4, r5
   34bf8:	d000      	beq.n	34bfc <__aeabi_dsub+0x3a4>
   34bfa:	e68b      	b.n	34914 <__aeabi_dsub+0xbc>
   34bfc:	2500      	movs	r5, #0
   34bfe:	2600      	movs	r6, #0
   34c00:	2700      	movs	r7, #0
   34c02:	e6ea      	b.n	349da <__aeabi_dsub+0x182>
   34c04:	001e      	movs	r6, r3
   34c06:	e6ad      	b.n	34964 <__aeabi_dsub+0x10c>
   34c08:	2b1f      	cmp	r3, #31
   34c0a:	dc60      	bgt.n	34cce <__aeabi_dsub+0x476>
   34c0c:	2720      	movs	r7, #32
   34c0e:	1af8      	subs	r0, r7, r3
   34c10:	000f      	movs	r7, r1
   34c12:	4684      	mov	ip, r0
   34c14:	4087      	lsls	r7, r0
   34c16:	0010      	movs	r0, r2
   34c18:	40d8      	lsrs	r0, r3
   34c1a:	4307      	orrs	r7, r0
   34c1c:	4660      	mov	r0, ip
   34c1e:	4082      	lsls	r2, r0
   34c20:	1e50      	subs	r0, r2, #1
   34c22:	4182      	sbcs	r2, r0
   34c24:	40d9      	lsrs	r1, r3
   34c26:	4317      	orrs	r7, r2
   34c28:	e6f5      	b.n	34a16 <__aeabi_dsub+0x1be>
   34c2a:	0026      	movs	r6, r4
   34c2c:	4650      	mov	r0, sl
   34c2e:	4306      	orrs	r6, r0
   34c30:	d005      	beq.n	34c3e <__aeabi_dsub+0x3e6>
   34c32:	43ed      	mvns	r5, r5
   34c34:	2d00      	cmp	r5, #0
   34c36:	d0d3      	beq.n	34be0 <__aeabi_dsub+0x388>
   34c38:	4e90      	ldr	r6, [pc, #576]	; (34e7c <__aeabi_dsub+0x624>)
   34c3a:	45b4      	cmp	ip, r6
   34c3c:	d1bd      	bne.n	34bba <__aeabi_dsub+0x362>
   34c3e:	000c      	movs	r4, r1
   34c40:	0017      	movs	r7, r2
   34c42:	4666      	mov	r6, ip
   34c44:	4698      	mov	r8, r3
   34c46:	e68d      	b.n	34964 <__aeabi_dsub+0x10c>
   34c48:	488c      	ldr	r0, [pc, #560]	; (34e7c <__aeabi_dsub+0x624>)
   34c4a:	4283      	cmp	r3, r0
   34c4c:	d00b      	beq.n	34c66 <__aeabi_dsub+0x40e>
   34c4e:	4663      	mov	r3, ip
   34c50:	e6d9      	b.n	34a06 <__aeabi_dsub+0x1ae>
   34c52:	2d00      	cmp	r5, #0
   34c54:	d000      	beq.n	34c58 <__aeabi_dsub+0x400>
   34c56:	e096      	b.n	34d86 <__aeabi_dsub+0x52e>
   34c58:	0008      	movs	r0, r1
   34c5a:	4310      	orrs	r0, r2
   34c5c:	d100      	bne.n	34c60 <__aeabi_dsub+0x408>
   34c5e:	e0e2      	b.n	34e26 <__aeabi_dsub+0x5ce>
   34c60:	000c      	movs	r4, r1
   34c62:	0017      	movs	r7, r2
   34c64:	4698      	mov	r8, r3
   34c66:	4e85      	ldr	r6, [pc, #532]	; (34e7c <__aeabi_dsub+0x624>)
   34c68:	e67c      	b.n	34964 <__aeabi_dsub+0x10c>
   34c6a:	2500      	movs	r5, #0
   34c6c:	e780      	b.n	34b70 <__aeabi_dsub+0x318>
   34c6e:	2100      	movs	r1, #0
   34c70:	e78e      	b.n	34b90 <__aeabi_dsub+0x338>
   34c72:	0023      	movs	r3, r4
   34c74:	4650      	mov	r0, sl
   34c76:	4303      	orrs	r3, r0
   34c78:	2e00      	cmp	r6, #0
   34c7a:	d000      	beq.n	34c7e <__aeabi_dsub+0x426>
   34c7c:	e0a8      	b.n	34dd0 <__aeabi_dsub+0x578>
   34c7e:	2b00      	cmp	r3, #0
   34c80:	d100      	bne.n	34c84 <__aeabi_dsub+0x42c>
   34c82:	e0de      	b.n	34e42 <__aeabi_dsub+0x5ea>
   34c84:	000b      	movs	r3, r1
   34c86:	4313      	orrs	r3, r2
   34c88:	d100      	bne.n	34c8c <__aeabi_dsub+0x434>
   34c8a:	e66b      	b.n	34964 <__aeabi_dsub+0x10c>
   34c8c:	4452      	add	r2, sl
   34c8e:	4552      	cmp	r2, sl
   34c90:	4180      	sbcs	r0, r0
   34c92:	1864      	adds	r4, r4, r1
   34c94:	4240      	negs	r0, r0
   34c96:	1824      	adds	r4, r4, r0
   34c98:	0017      	movs	r7, r2
   34c9a:	0223      	lsls	r3, r4, #8
   34c9c:	d400      	bmi.n	34ca0 <__aeabi_dsub+0x448>
   34c9e:	e6fd      	b.n	34a9c <__aeabi_dsub+0x244>
   34ca0:	4b77      	ldr	r3, [pc, #476]	; (34e80 <__aeabi_dsub+0x628>)
   34ca2:	4666      	mov	r6, ip
   34ca4:	401c      	ands	r4, r3
   34ca6:	e65d      	b.n	34964 <__aeabi_dsub+0x10c>
   34ca8:	0025      	movs	r5, r4
   34caa:	4650      	mov	r0, sl
   34cac:	4305      	orrs	r5, r0
   34cae:	2e00      	cmp	r6, #0
   34cb0:	d1cf      	bne.n	34c52 <__aeabi_dsub+0x3fa>
   34cb2:	2d00      	cmp	r5, #0
   34cb4:	d14f      	bne.n	34d56 <__aeabi_dsub+0x4fe>
   34cb6:	000c      	movs	r4, r1
   34cb8:	4314      	orrs	r4, r2
   34cba:	d100      	bne.n	34cbe <__aeabi_dsub+0x466>
   34cbc:	e0a0      	b.n	34e00 <__aeabi_dsub+0x5a8>
   34cbe:	000c      	movs	r4, r1
   34cc0:	0017      	movs	r7, r2
   34cc2:	4698      	mov	r8, r3
   34cc4:	e64e      	b.n	34964 <__aeabi_dsub+0x10c>
   34cc6:	4666      	mov	r6, ip
   34cc8:	2400      	movs	r4, #0
   34cca:	2700      	movs	r7, #0
   34ccc:	e685      	b.n	349da <__aeabi_dsub+0x182>
   34cce:	001f      	movs	r7, r3
   34cd0:	0008      	movs	r0, r1
   34cd2:	3f20      	subs	r7, #32
   34cd4:	40f8      	lsrs	r0, r7
   34cd6:	0007      	movs	r7, r0
   34cd8:	2b20      	cmp	r3, #32
   34cda:	d100      	bne.n	34cde <__aeabi_dsub+0x486>
   34cdc:	e08e      	b.n	34dfc <__aeabi_dsub+0x5a4>
   34cde:	2040      	movs	r0, #64	; 0x40
   34ce0:	1ac3      	subs	r3, r0, r3
   34ce2:	4099      	lsls	r1, r3
   34ce4:	430a      	orrs	r2, r1
   34ce6:	1e51      	subs	r1, r2, #1
   34ce8:	418a      	sbcs	r2, r1
   34cea:	2100      	movs	r1, #0
   34cec:	4317      	orrs	r7, r2
   34cee:	e692      	b.n	34a16 <__aeabi_dsub+0x1be>
   34cf0:	2e00      	cmp	r6, #0
   34cf2:	d114      	bne.n	34d1e <__aeabi_dsub+0x4c6>
   34cf4:	0026      	movs	r6, r4
   34cf6:	4650      	mov	r0, sl
   34cf8:	4306      	orrs	r6, r0
   34cfa:	d062      	beq.n	34dc2 <__aeabi_dsub+0x56a>
   34cfc:	43db      	mvns	r3, r3
   34cfe:	2b00      	cmp	r3, #0
   34d00:	d15c      	bne.n	34dbc <__aeabi_dsub+0x564>
   34d02:	1887      	adds	r7, r0, r2
   34d04:	4297      	cmp	r7, r2
   34d06:	4192      	sbcs	r2, r2
   34d08:	1864      	adds	r4, r4, r1
   34d0a:	4252      	negs	r2, r2
   34d0c:	18a4      	adds	r4, r4, r2
   34d0e:	4666      	mov	r6, ip
   34d10:	e687      	b.n	34a22 <__aeabi_dsub+0x1ca>
   34d12:	4650      	mov	r0, sl
   34d14:	4320      	orrs	r0, r4
   34d16:	1e44      	subs	r4, r0, #1
   34d18:	41a0      	sbcs	r0, r4
   34d1a:	2400      	movs	r4, #0
   34d1c:	e760      	b.n	34be0 <__aeabi_dsub+0x388>
   34d1e:	4e57      	ldr	r6, [pc, #348]	; (34e7c <__aeabi_dsub+0x624>)
   34d20:	45b4      	cmp	ip, r6
   34d22:	d04e      	beq.n	34dc2 <__aeabi_dsub+0x56a>
   34d24:	2680      	movs	r6, #128	; 0x80
   34d26:	0436      	lsls	r6, r6, #16
   34d28:	425b      	negs	r3, r3
   34d2a:	4334      	orrs	r4, r6
   34d2c:	2b38      	cmp	r3, #56	; 0x38
   34d2e:	dd00      	ble.n	34d32 <__aeabi_dsub+0x4da>
   34d30:	e07f      	b.n	34e32 <__aeabi_dsub+0x5da>
   34d32:	2b1f      	cmp	r3, #31
   34d34:	dd00      	ble.n	34d38 <__aeabi_dsub+0x4e0>
   34d36:	e08b      	b.n	34e50 <__aeabi_dsub+0x5f8>
   34d38:	2620      	movs	r6, #32
   34d3a:	0027      	movs	r7, r4
   34d3c:	4650      	mov	r0, sl
   34d3e:	1af6      	subs	r6, r6, r3
   34d40:	40b7      	lsls	r7, r6
   34d42:	40d8      	lsrs	r0, r3
   34d44:	4307      	orrs	r7, r0
   34d46:	4650      	mov	r0, sl
   34d48:	40b0      	lsls	r0, r6
   34d4a:	1e46      	subs	r6, r0, #1
   34d4c:	41b0      	sbcs	r0, r6
   34d4e:	4307      	orrs	r7, r0
   34d50:	40dc      	lsrs	r4, r3
   34d52:	18bf      	adds	r7, r7, r2
   34d54:	e7d6      	b.n	34d04 <__aeabi_dsub+0x4ac>
   34d56:	000d      	movs	r5, r1
   34d58:	4315      	orrs	r5, r2
   34d5a:	d100      	bne.n	34d5e <__aeabi_dsub+0x506>
   34d5c:	e602      	b.n	34964 <__aeabi_dsub+0x10c>
   34d5e:	4650      	mov	r0, sl
   34d60:	1a80      	subs	r0, r0, r2
   34d62:	4582      	cmp	sl, r0
   34d64:	41bf      	sbcs	r7, r7
   34d66:	1a65      	subs	r5, r4, r1
   34d68:	427f      	negs	r7, r7
   34d6a:	1bed      	subs	r5, r5, r7
   34d6c:	4684      	mov	ip, r0
   34d6e:	0228      	lsls	r0, r5, #8
   34d70:	d400      	bmi.n	34d74 <__aeabi_dsub+0x51c>
   34d72:	e68d      	b.n	34a90 <__aeabi_dsub+0x238>
   34d74:	4650      	mov	r0, sl
   34d76:	1a17      	subs	r7, r2, r0
   34d78:	42ba      	cmp	r2, r7
   34d7a:	4192      	sbcs	r2, r2
   34d7c:	1b0c      	subs	r4, r1, r4
   34d7e:	4252      	negs	r2, r2
   34d80:	1aa4      	subs	r4, r4, r2
   34d82:	4698      	mov	r8, r3
   34d84:	e5ee      	b.n	34964 <__aeabi_dsub+0x10c>
   34d86:	000d      	movs	r5, r1
   34d88:	4315      	orrs	r5, r2
   34d8a:	d100      	bne.n	34d8e <__aeabi_dsub+0x536>
   34d8c:	e76b      	b.n	34c66 <__aeabi_dsub+0x40e>
   34d8e:	4650      	mov	r0, sl
   34d90:	0767      	lsls	r7, r4, #29
   34d92:	08c0      	lsrs	r0, r0, #3
   34d94:	4307      	orrs	r7, r0
   34d96:	2080      	movs	r0, #128	; 0x80
   34d98:	08e4      	lsrs	r4, r4, #3
   34d9a:	0300      	lsls	r0, r0, #12
   34d9c:	4204      	tst	r4, r0
   34d9e:	d007      	beq.n	34db0 <__aeabi_dsub+0x558>
   34da0:	08cd      	lsrs	r5, r1, #3
   34da2:	4205      	tst	r5, r0
   34da4:	d104      	bne.n	34db0 <__aeabi_dsub+0x558>
   34da6:	002c      	movs	r4, r5
   34da8:	4698      	mov	r8, r3
   34daa:	08d7      	lsrs	r7, r2, #3
   34dac:	0749      	lsls	r1, r1, #29
   34dae:	430f      	orrs	r7, r1
   34db0:	0f7b      	lsrs	r3, r7, #29
   34db2:	00e4      	lsls	r4, r4, #3
   34db4:	431c      	orrs	r4, r3
   34db6:	00ff      	lsls	r7, r7, #3
   34db8:	4e30      	ldr	r6, [pc, #192]	; (34e7c <__aeabi_dsub+0x624>)
   34dba:	e5d3      	b.n	34964 <__aeabi_dsub+0x10c>
   34dbc:	4e2f      	ldr	r6, [pc, #188]	; (34e7c <__aeabi_dsub+0x624>)
   34dbe:	45b4      	cmp	ip, r6
   34dc0:	d1b4      	bne.n	34d2c <__aeabi_dsub+0x4d4>
   34dc2:	000c      	movs	r4, r1
   34dc4:	0017      	movs	r7, r2
   34dc6:	4666      	mov	r6, ip
   34dc8:	e5cc      	b.n	34964 <__aeabi_dsub+0x10c>
   34dca:	2700      	movs	r7, #0
   34dcc:	2400      	movs	r4, #0
   34dce:	e5e8      	b.n	349a2 <__aeabi_dsub+0x14a>
   34dd0:	2b00      	cmp	r3, #0
   34dd2:	d039      	beq.n	34e48 <__aeabi_dsub+0x5f0>
   34dd4:	000b      	movs	r3, r1
   34dd6:	4313      	orrs	r3, r2
   34dd8:	d100      	bne.n	34ddc <__aeabi_dsub+0x584>
   34dda:	e744      	b.n	34c66 <__aeabi_dsub+0x40e>
   34ddc:	08c0      	lsrs	r0, r0, #3
   34dde:	0767      	lsls	r7, r4, #29
   34de0:	4307      	orrs	r7, r0
   34de2:	2080      	movs	r0, #128	; 0x80
   34de4:	08e4      	lsrs	r4, r4, #3
   34de6:	0300      	lsls	r0, r0, #12
   34de8:	4204      	tst	r4, r0
   34dea:	d0e1      	beq.n	34db0 <__aeabi_dsub+0x558>
   34dec:	08cb      	lsrs	r3, r1, #3
   34dee:	4203      	tst	r3, r0
   34df0:	d1de      	bne.n	34db0 <__aeabi_dsub+0x558>
   34df2:	08d7      	lsrs	r7, r2, #3
   34df4:	0749      	lsls	r1, r1, #29
   34df6:	430f      	orrs	r7, r1
   34df8:	001c      	movs	r4, r3
   34dfa:	e7d9      	b.n	34db0 <__aeabi_dsub+0x558>
   34dfc:	2100      	movs	r1, #0
   34dfe:	e771      	b.n	34ce4 <__aeabi_dsub+0x48c>
   34e00:	2500      	movs	r5, #0
   34e02:	2700      	movs	r7, #0
   34e04:	e5e9      	b.n	349da <__aeabi_dsub+0x182>
   34e06:	002e      	movs	r6, r5
   34e08:	0027      	movs	r7, r4
   34e0a:	3e20      	subs	r6, #32
   34e0c:	40f7      	lsrs	r7, r6
   34e0e:	2d20      	cmp	r5, #32
   34e10:	d02f      	beq.n	34e72 <__aeabi_dsub+0x61a>
   34e12:	2640      	movs	r6, #64	; 0x40
   34e14:	1b75      	subs	r5, r6, r5
   34e16:	40ac      	lsls	r4, r5
   34e18:	4650      	mov	r0, sl
   34e1a:	4320      	orrs	r0, r4
   34e1c:	1e44      	subs	r4, r0, #1
   34e1e:	41a0      	sbcs	r0, r4
   34e20:	2400      	movs	r4, #0
   34e22:	4338      	orrs	r0, r7
   34e24:	e6dc      	b.n	34be0 <__aeabi_dsub+0x388>
   34e26:	2480      	movs	r4, #128	; 0x80
   34e28:	2500      	movs	r5, #0
   34e2a:	0324      	lsls	r4, r4, #12
   34e2c:	4e13      	ldr	r6, [pc, #76]	; (34e7c <__aeabi_dsub+0x624>)
   34e2e:	2700      	movs	r7, #0
   34e30:	e5d3      	b.n	349da <__aeabi_dsub+0x182>
   34e32:	4650      	mov	r0, sl
   34e34:	4320      	orrs	r0, r4
   34e36:	0007      	movs	r7, r0
   34e38:	1e78      	subs	r0, r7, #1
   34e3a:	4187      	sbcs	r7, r0
   34e3c:	2400      	movs	r4, #0
   34e3e:	18bf      	adds	r7, r7, r2
   34e40:	e760      	b.n	34d04 <__aeabi_dsub+0x4ac>
   34e42:	000c      	movs	r4, r1
   34e44:	0017      	movs	r7, r2
   34e46:	e58d      	b.n	34964 <__aeabi_dsub+0x10c>
   34e48:	000c      	movs	r4, r1
   34e4a:	0017      	movs	r7, r2
   34e4c:	4e0b      	ldr	r6, [pc, #44]	; (34e7c <__aeabi_dsub+0x624>)
   34e4e:	e589      	b.n	34964 <__aeabi_dsub+0x10c>
   34e50:	001e      	movs	r6, r3
   34e52:	0027      	movs	r7, r4
   34e54:	3e20      	subs	r6, #32
   34e56:	40f7      	lsrs	r7, r6
   34e58:	2b20      	cmp	r3, #32
   34e5a:	d00c      	beq.n	34e76 <__aeabi_dsub+0x61e>
   34e5c:	2640      	movs	r6, #64	; 0x40
   34e5e:	1af3      	subs	r3, r6, r3
   34e60:	409c      	lsls	r4, r3
   34e62:	4650      	mov	r0, sl
   34e64:	4320      	orrs	r0, r4
   34e66:	1e44      	subs	r4, r0, #1
   34e68:	41a0      	sbcs	r0, r4
   34e6a:	4307      	orrs	r7, r0
   34e6c:	2400      	movs	r4, #0
   34e6e:	18bf      	adds	r7, r7, r2
   34e70:	e748      	b.n	34d04 <__aeabi_dsub+0x4ac>
   34e72:	2400      	movs	r4, #0
   34e74:	e7d0      	b.n	34e18 <__aeabi_dsub+0x5c0>
   34e76:	2400      	movs	r4, #0
   34e78:	e7f3      	b.n	34e62 <__aeabi_dsub+0x60a>
   34e7a:	46c0      	nop			; (mov r8, r8)
   34e7c:	000007ff 	.word	0x000007ff
   34e80:	ff7fffff 	.word	0xff7fffff

00034e84 <__aeabi_d2iz>:
   34e84:	b530      	push	{r4, r5, lr}
   34e86:	4d13      	ldr	r5, [pc, #76]	; (34ed4 <__aeabi_d2iz+0x50>)
   34e88:	030a      	lsls	r2, r1, #12
   34e8a:	004b      	lsls	r3, r1, #1
   34e8c:	0b12      	lsrs	r2, r2, #12
   34e8e:	0d5b      	lsrs	r3, r3, #21
   34e90:	0fc9      	lsrs	r1, r1, #31
   34e92:	2400      	movs	r4, #0
   34e94:	42ab      	cmp	r3, r5
   34e96:	dd10      	ble.n	34eba <__aeabi_d2iz+0x36>
   34e98:	4c0f      	ldr	r4, [pc, #60]	; (34ed8 <__aeabi_d2iz+0x54>)
   34e9a:	42a3      	cmp	r3, r4
   34e9c:	dc0f      	bgt.n	34ebe <__aeabi_d2iz+0x3a>
   34e9e:	2480      	movs	r4, #128	; 0x80
   34ea0:	4d0e      	ldr	r5, [pc, #56]	; (34edc <__aeabi_d2iz+0x58>)
   34ea2:	0364      	lsls	r4, r4, #13
   34ea4:	4322      	orrs	r2, r4
   34ea6:	1aed      	subs	r5, r5, r3
   34ea8:	2d1f      	cmp	r5, #31
   34eaa:	dd0b      	ble.n	34ec4 <__aeabi_d2iz+0x40>
   34eac:	480c      	ldr	r0, [pc, #48]	; (34ee0 <__aeabi_d2iz+0x5c>)
   34eae:	1ac3      	subs	r3, r0, r3
   34eb0:	40da      	lsrs	r2, r3
   34eb2:	4254      	negs	r4, r2
   34eb4:	2900      	cmp	r1, #0
   34eb6:	d100      	bne.n	34eba <__aeabi_d2iz+0x36>
   34eb8:	0014      	movs	r4, r2
   34eba:	0020      	movs	r0, r4
   34ebc:	bd30      	pop	{r4, r5, pc}
   34ebe:	4b09      	ldr	r3, [pc, #36]	; (34ee4 <__aeabi_d2iz+0x60>)
   34ec0:	18cc      	adds	r4, r1, r3
   34ec2:	e7fa      	b.n	34eba <__aeabi_d2iz+0x36>
   34ec4:	4c08      	ldr	r4, [pc, #32]	; (34ee8 <__aeabi_d2iz+0x64>)
   34ec6:	40e8      	lsrs	r0, r5
   34ec8:	46a4      	mov	ip, r4
   34eca:	4463      	add	r3, ip
   34ecc:	409a      	lsls	r2, r3
   34ece:	4302      	orrs	r2, r0
   34ed0:	e7ef      	b.n	34eb2 <__aeabi_d2iz+0x2e>
   34ed2:	46c0      	nop			; (mov r8, r8)
   34ed4:	000003fe 	.word	0x000003fe
   34ed8:	0000041d 	.word	0x0000041d
   34edc:	00000433 	.word	0x00000433
   34ee0:	00000413 	.word	0x00000413
   34ee4:	7fffffff 	.word	0x7fffffff
   34ee8:	fffffbed 	.word	0xfffffbed

00034eec <__aeabi_ui2d>:
   34eec:	b510      	push	{r4, lr}
   34eee:	1e04      	subs	r4, r0, #0
   34ef0:	d028      	beq.n	34f44 <__aeabi_ui2d+0x58>
   34ef2:	f000 f8c3 	bl	3507c <__clzsi2>
   34ef6:	4b15      	ldr	r3, [pc, #84]	; (34f4c <__aeabi_ui2d+0x60>)
   34ef8:	4a15      	ldr	r2, [pc, #84]	; (34f50 <__aeabi_ui2d+0x64>)
   34efa:	1a1b      	subs	r3, r3, r0
   34efc:	1ad2      	subs	r2, r2, r3
   34efe:	2a1f      	cmp	r2, #31
   34f00:	dd15      	ble.n	34f2e <__aeabi_ui2d+0x42>
   34f02:	4a14      	ldr	r2, [pc, #80]	; (34f54 <__aeabi_ui2d+0x68>)
   34f04:	1ad2      	subs	r2, r2, r3
   34f06:	4094      	lsls	r4, r2
   34f08:	2200      	movs	r2, #0
   34f0a:	0324      	lsls	r4, r4, #12
   34f0c:	055b      	lsls	r3, r3, #21
   34f0e:	0b24      	lsrs	r4, r4, #12
   34f10:	0d5b      	lsrs	r3, r3, #21
   34f12:	2100      	movs	r1, #0
   34f14:	0010      	movs	r0, r2
   34f16:	0324      	lsls	r4, r4, #12
   34f18:	0d0a      	lsrs	r2, r1, #20
   34f1a:	0b24      	lsrs	r4, r4, #12
   34f1c:	0512      	lsls	r2, r2, #20
   34f1e:	4322      	orrs	r2, r4
   34f20:	4c0d      	ldr	r4, [pc, #52]	; (34f58 <__aeabi_ui2d+0x6c>)
   34f22:	051b      	lsls	r3, r3, #20
   34f24:	4022      	ands	r2, r4
   34f26:	4313      	orrs	r3, r2
   34f28:	005b      	lsls	r3, r3, #1
   34f2a:	0859      	lsrs	r1, r3, #1
   34f2c:	bd10      	pop	{r4, pc}
   34f2e:	0021      	movs	r1, r4
   34f30:	4091      	lsls	r1, r2
   34f32:	000a      	movs	r2, r1
   34f34:	210b      	movs	r1, #11
   34f36:	1a08      	subs	r0, r1, r0
   34f38:	40c4      	lsrs	r4, r0
   34f3a:	055b      	lsls	r3, r3, #21
   34f3c:	0324      	lsls	r4, r4, #12
   34f3e:	0b24      	lsrs	r4, r4, #12
   34f40:	0d5b      	lsrs	r3, r3, #21
   34f42:	e7e6      	b.n	34f12 <__aeabi_ui2d+0x26>
   34f44:	2300      	movs	r3, #0
   34f46:	2400      	movs	r4, #0
   34f48:	2200      	movs	r2, #0
   34f4a:	e7e2      	b.n	34f12 <__aeabi_ui2d+0x26>
   34f4c:	0000041e 	.word	0x0000041e
   34f50:	00000433 	.word	0x00000433
   34f54:	00000413 	.word	0x00000413
   34f58:	800fffff 	.word	0x800fffff

00034f5c <__aeabi_f2d>:
   34f5c:	0041      	lsls	r1, r0, #1
   34f5e:	0e09      	lsrs	r1, r1, #24
   34f60:	1c4b      	adds	r3, r1, #1
   34f62:	b570      	push	{r4, r5, r6, lr}
   34f64:	b2db      	uxtb	r3, r3
   34f66:	0246      	lsls	r6, r0, #9
   34f68:	0a75      	lsrs	r5, r6, #9
   34f6a:	0fc4      	lsrs	r4, r0, #31
   34f6c:	2b01      	cmp	r3, #1
   34f6e:	dd14      	ble.n	34f9a <__aeabi_f2d+0x3e>
   34f70:	23e0      	movs	r3, #224	; 0xe0
   34f72:	009b      	lsls	r3, r3, #2
   34f74:	076d      	lsls	r5, r5, #29
   34f76:	0b36      	lsrs	r6, r6, #12
   34f78:	18cb      	adds	r3, r1, r3
   34f7a:	2100      	movs	r1, #0
   34f7c:	0d0a      	lsrs	r2, r1, #20
   34f7e:	0028      	movs	r0, r5
   34f80:	0512      	lsls	r2, r2, #20
   34f82:	4d1c      	ldr	r5, [pc, #112]	; (34ff4 <__aeabi_f2d+0x98>)
   34f84:	4332      	orrs	r2, r6
   34f86:	055b      	lsls	r3, r3, #21
   34f88:	402a      	ands	r2, r5
   34f8a:	085b      	lsrs	r3, r3, #1
   34f8c:	4313      	orrs	r3, r2
   34f8e:	005b      	lsls	r3, r3, #1
   34f90:	07e4      	lsls	r4, r4, #31
   34f92:	085b      	lsrs	r3, r3, #1
   34f94:	4323      	orrs	r3, r4
   34f96:	0019      	movs	r1, r3
   34f98:	bd70      	pop	{r4, r5, r6, pc}
   34f9a:	2900      	cmp	r1, #0
   34f9c:	d114      	bne.n	34fc8 <__aeabi_f2d+0x6c>
   34f9e:	2d00      	cmp	r5, #0
   34fa0:	d01e      	beq.n	34fe0 <__aeabi_f2d+0x84>
   34fa2:	0028      	movs	r0, r5
   34fa4:	f000 f86a 	bl	3507c <__clzsi2>
   34fa8:	280a      	cmp	r0, #10
   34faa:	dc1c      	bgt.n	34fe6 <__aeabi_f2d+0x8a>
   34fac:	230b      	movs	r3, #11
   34fae:	002a      	movs	r2, r5
   34fb0:	1a1b      	subs	r3, r3, r0
   34fb2:	40da      	lsrs	r2, r3
   34fb4:	0003      	movs	r3, r0
   34fb6:	3315      	adds	r3, #21
   34fb8:	409d      	lsls	r5, r3
   34fba:	4b0f      	ldr	r3, [pc, #60]	; (34ff8 <__aeabi_f2d+0x9c>)
   34fbc:	0312      	lsls	r2, r2, #12
   34fbe:	1a1b      	subs	r3, r3, r0
   34fc0:	055b      	lsls	r3, r3, #21
   34fc2:	0b16      	lsrs	r6, r2, #12
   34fc4:	0d5b      	lsrs	r3, r3, #21
   34fc6:	e7d8      	b.n	34f7a <__aeabi_f2d+0x1e>
   34fc8:	2d00      	cmp	r5, #0
   34fca:	d006      	beq.n	34fda <__aeabi_f2d+0x7e>
   34fcc:	0b32      	lsrs	r2, r6, #12
   34fce:	2680      	movs	r6, #128	; 0x80
   34fd0:	0336      	lsls	r6, r6, #12
   34fd2:	076d      	lsls	r5, r5, #29
   34fd4:	4316      	orrs	r6, r2
   34fd6:	4b09      	ldr	r3, [pc, #36]	; (34ffc <__aeabi_f2d+0xa0>)
   34fd8:	e7cf      	b.n	34f7a <__aeabi_f2d+0x1e>
   34fda:	4b08      	ldr	r3, [pc, #32]	; (34ffc <__aeabi_f2d+0xa0>)
   34fdc:	2600      	movs	r6, #0
   34fde:	e7cc      	b.n	34f7a <__aeabi_f2d+0x1e>
   34fe0:	2300      	movs	r3, #0
   34fe2:	2600      	movs	r6, #0
   34fe4:	e7c9      	b.n	34f7a <__aeabi_f2d+0x1e>
   34fe6:	0003      	movs	r3, r0
   34fe8:	002a      	movs	r2, r5
   34fea:	3b0b      	subs	r3, #11
   34fec:	409a      	lsls	r2, r3
   34fee:	2500      	movs	r5, #0
   34ff0:	e7e3      	b.n	34fba <__aeabi_f2d+0x5e>
   34ff2:	46c0      	nop			; (mov r8, r8)
   34ff4:	800fffff 	.word	0x800fffff
   34ff8:	00000389 	.word	0x00000389
   34ffc:	000007ff 	.word	0x000007ff

00035000 <__aeabi_cdrcmple>:
   35000:	4684      	mov	ip, r0
   35002:	1c10      	adds	r0, r2, #0
   35004:	4662      	mov	r2, ip
   35006:	468c      	mov	ip, r1
   35008:	1c19      	adds	r1, r3, #0
   3500a:	4663      	mov	r3, ip
   3500c:	e000      	b.n	35010 <__aeabi_cdcmpeq>
   3500e:	46c0      	nop			; (mov r8, r8)

00035010 <__aeabi_cdcmpeq>:
   35010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   35012:	f000 f8ef 	bl	351f4 <__ledf2>
   35016:	2800      	cmp	r0, #0
   35018:	d401      	bmi.n	3501e <__aeabi_cdcmpeq+0xe>
   3501a:	2100      	movs	r1, #0
   3501c:	42c8      	cmn	r0, r1
   3501e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00035020 <__aeabi_dcmpeq>:
   35020:	b510      	push	{r4, lr}
   35022:	f000 f849 	bl	350b8 <__eqdf2>
   35026:	4240      	negs	r0, r0
   35028:	3001      	adds	r0, #1
   3502a:	bd10      	pop	{r4, pc}

0003502c <__aeabi_dcmplt>:
   3502c:	b510      	push	{r4, lr}
   3502e:	f000 f8e1 	bl	351f4 <__ledf2>
   35032:	2800      	cmp	r0, #0
   35034:	db01      	blt.n	3503a <__aeabi_dcmplt+0xe>
   35036:	2000      	movs	r0, #0
   35038:	bd10      	pop	{r4, pc}
   3503a:	2001      	movs	r0, #1
   3503c:	bd10      	pop	{r4, pc}
   3503e:	46c0      	nop			; (mov r8, r8)

00035040 <__aeabi_dcmple>:
   35040:	b510      	push	{r4, lr}
   35042:	f000 f8d7 	bl	351f4 <__ledf2>
   35046:	2800      	cmp	r0, #0
   35048:	dd01      	ble.n	3504e <__aeabi_dcmple+0xe>
   3504a:	2000      	movs	r0, #0
   3504c:	bd10      	pop	{r4, pc}
   3504e:	2001      	movs	r0, #1
   35050:	bd10      	pop	{r4, pc}
   35052:	46c0      	nop			; (mov r8, r8)

00035054 <__aeabi_dcmpgt>:
   35054:	b510      	push	{r4, lr}
   35056:	f000 f869 	bl	3512c <__gedf2>
   3505a:	2800      	cmp	r0, #0
   3505c:	dc01      	bgt.n	35062 <__aeabi_dcmpgt+0xe>
   3505e:	2000      	movs	r0, #0
   35060:	bd10      	pop	{r4, pc}
   35062:	2001      	movs	r0, #1
   35064:	bd10      	pop	{r4, pc}
   35066:	46c0      	nop			; (mov r8, r8)

00035068 <__aeabi_dcmpge>:
   35068:	b510      	push	{r4, lr}
   3506a:	f000 f85f 	bl	3512c <__gedf2>
   3506e:	2800      	cmp	r0, #0
   35070:	da01      	bge.n	35076 <__aeabi_dcmpge+0xe>
   35072:	2000      	movs	r0, #0
   35074:	bd10      	pop	{r4, pc}
   35076:	2001      	movs	r0, #1
   35078:	bd10      	pop	{r4, pc}
   3507a:	46c0      	nop			; (mov r8, r8)

0003507c <__clzsi2>:
   3507c:	211c      	movs	r1, #28
   3507e:	2301      	movs	r3, #1
   35080:	041b      	lsls	r3, r3, #16
   35082:	4298      	cmp	r0, r3
   35084:	d301      	bcc.n	3508a <__clzsi2+0xe>
   35086:	0c00      	lsrs	r0, r0, #16
   35088:	3910      	subs	r1, #16
   3508a:	0a1b      	lsrs	r3, r3, #8
   3508c:	4298      	cmp	r0, r3
   3508e:	d301      	bcc.n	35094 <__clzsi2+0x18>
   35090:	0a00      	lsrs	r0, r0, #8
   35092:	3908      	subs	r1, #8
   35094:	091b      	lsrs	r3, r3, #4
   35096:	4298      	cmp	r0, r3
   35098:	d301      	bcc.n	3509e <__clzsi2+0x22>
   3509a:	0900      	lsrs	r0, r0, #4
   3509c:	3904      	subs	r1, #4
   3509e:	a202      	add	r2, pc, #8	; (adr r2, 350a8 <__clzsi2+0x2c>)
   350a0:	5c10      	ldrb	r0, [r2, r0]
   350a2:	1840      	adds	r0, r0, r1
   350a4:	4770      	bx	lr
   350a6:	46c0      	nop			; (mov r8, r8)
   350a8:	02020304 	.word	0x02020304
   350ac:	01010101 	.word	0x01010101
	...

000350b8 <__eqdf2>:
   350b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   350ba:	464f      	mov	r7, r9
   350bc:	4646      	mov	r6, r8
   350be:	46d6      	mov	lr, sl
   350c0:	005c      	lsls	r4, r3, #1
   350c2:	b5c0      	push	{r6, r7, lr}
   350c4:	031f      	lsls	r7, r3, #12
   350c6:	0fdb      	lsrs	r3, r3, #31
   350c8:	469a      	mov	sl, r3
   350ca:	4b17      	ldr	r3, [pc, #92]	; (35128 <__eqdf2+0x70>)
   350cc:	030e      	lsls	r6, r1, #12
   350ce:	004d      	lsls	r5, r1, #1
   350d0:	4684      	mov	ip, r0
   350d2:	4680      	mov	r8, r0
   350d4:	0b36      	lsrs	r6, r6, #12
   350d6:	0d6d      	lsrs	r5, r5, #21
   350d8:	0fc9      	lsrs	r1, r1, #31
   350da:	4691      	mov	r9, r2
   350dc:	0b3f      	lsrs	r7, r7, #12
   350de:	0d64      	lsrs	r4, r4, #21
   350e0:	2001      	movs	r0, #1
   350e2:	429d      	cmp	r5, r3
   350e4:	d008      	beq.n	350f8 <__eqdf2+0x40>
   350e6:	429c      	cmp	r4, r3
   350e8:	d001      	beq.n	350ee <__eqdf2+0x36>
   350ea:	42a5      	cmp	r5, r4
   350ec:	d00b      	beq.n	35106 <__eqdf2+0x4e>
   350ee:	bc1c      	pop	{r2, r3, r4}
   350f0:	4690      	mov	r8, r2
   350f2:	4699      	mov	r9, r3
   350f4:	46a2      	mov	sl, r4
   350f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   350f8:	4663      	mov	r3, ip
   350fa:	4333      	orrs	r3, r6
   350fc:	d1f7      	bne.n	350ee <__eqdf2+0x36>
   350fe:	42ac      	cmp	r4, r5
   35100:	d1f5      	bne.n	350ee <__eqdf2+0x36>
   35102:	433a      	orrs	r2, r7
   35104:	d1f3      	bne.n	350ee <__eqdf2+0x36>
   35106:	2001      	movs	r0, #1
   35108:	42be      	cmp	r6, r7
   3510a:	d1f0      	bne.n	350ee <__eqdf2+0x36>
   3510c:	45c8      	cmp	r8, r9
   3510e:	d1ee      	bne.n	350ee <__eqdf2+0x36>
   35110:	4551      	cmp	r1, sl
   35112:	d007      	beq.n	35124 <__eqdf2+0x6c>
   35114:	2d00      	cmp	r5, #0
   35116:	d1ea      	bne.n	350ee <__eqdf2+0x36>
   35118:	4663      	mov	r3, ip
   3511a:	431e      	orrs	r6, r3
   3511c:	0030      	movs	r0, r6
   3511e:	1e46      	subs	r6, r0, #1
   35120:	41b0      	sbcs	r0, r6
   35122:	e7e4      	b.n	350ee <__eqdf2+0x36>
   35124:	2000      	movs	r0, #0
   35126:	e7e2      	b.n	350ee <__eqdf2+0x36>
   35128:	000007ff 	.word	0x000007ff

0003512c <__gedf2>:
   3512c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3512e:	4645      	mov	r5, r8
   35130:	46de      	mov	lr, fp
   35132:	4657      	mov	r7, sl
   35134:	464e      	mov	r6, r9
   35136:	b5e0      	push	{r5, r6, r7, lr}
   35138:	031f      	lsls	r7, r3, #12
   3513a:	0b3d      	lsrs	r5, r7, #12
   3513c:	4f2c      	ldr	r7, [pc, #176]	; (351f0 <__gedf2+0xc4>)
   3513e:	030e      	lsls	r6, r1, #12
   35140:	004c      	lsls	r4, r1, #1
   35142:	46ab      	mov	fp, r5
   35144:	005d      	lsls	r5, r3, #1
   35146:	4684      	mov	ip, r0
   35148:	0b36      	lsrs	r6, r6, #12
   3514a:	0d64      	lsrs	r4, r4, #21
   3514c:	0fc9      	lsrs	r1, r1, #31
   3514e:	4690      	mov	r8, r2
   35150:	0d6d      	lsrs	r5, r5, #21
   35152:	0fdb      	lsrs	r3, r3, #31
   35154:	42bc      	cmp	r4, r7
   35156:	d02a      	beq.n	351ae <__gedf2+0x82>
   35158:	4f25      	ldr	r7, [pc, #148]	; (351f0 <__gedf2+0xc4>)
   3515a:	42bd      	cmp	r5, r7
   3515c:	d02d      	beq.n	351ba <__gedf2+0x8e>
   3515e:	2c00      	cmp	r4, #0
   35160:	d10f      	bne.n	35182 <__gedf2+0x56>
   35162:	4330      	orrs	r0, r6
   35164:	0007      	movs	r7, r0
   35166:	4681      	mov	r9, r0
   35168:	4278      	negs	r0, r7
   3516a:	4178      	adcs	r0, r7
   3516c:	b2c0      	uxtb	r0, r0
   3516e:	2d00      	cmp	r5, #0
   35170:	d117      	bne.n	351a2 <__gedf2+0x76>
   35172:	465f      	mov	r7, fp
   35174:	433a      	orrs	r2, r7
   35176:	d114      	bne.n	351a2 <__gedf2+0x76>
   35178:	464b      	mov	r3, r9
   3517a:	2000      	movs	r0, #0
   3517c:	2b00      	cmp	r3, #0
   3517e:	d00a      	beq.n	35196 <__gedf2+0x6a>
   35180:	e006      	b.n	35190 <__gedf2+0x64>
   35182:	2d00      	cmp	r5, #0
   35184:	d102      	bne.n	3518c <__gedf2+0x60>
   35186:	4658      	mov	r0, fp
   35188:	4302      	orrs	r2, r0
   3518a:	d001      	beq.n	35190 <__gedf2+0x64>
   3518c:	4299      	cmp	r1, r3
   3518e:	d018      	beq.n	351c2 <__gedf2+0x96>
   35190:	4248      	negs	r0, r1
   35192:	2101      	movs	r1, #1
   35194:	4308      	orrs	r0, r1
   35196:	bc3c      	pop	{r2, r3, r4, r5}
   35198:	4690      	mov	r8, r2
   3519a:	4699      	mov	r9, r3
   3519c:	46a2      	mov	sl, r4
   3519e:	46ab      	mov	fp, r5
   351a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   351a2:	2800      	cmp	r0, #0
   351a4:	d0f2      	beq.n	3518c <__gedf2+0x60>
   351a6:	2001      	movs	r0, #1
   351a8:	3b01      	subs	r3, #1
   351aa:	4318      	orrs	r0, r3
   351ac:	e7f3      	b.n	35196 <__gedf2+0x6a>
   351ae:	0037      	movs	r7, r6
   351b0:	4307      	orrs	r7, r0
   351b2:	d0d1      	beq.n	35158 <__gedf2+0x2c>
   351b4:	2002      	movs	r0, #2
   351b6:	4240      	negs	r0, r0
   351b8:	e7ed      	b.n	35196 <__gedf2+0x6a>
   351ba:	465f      	mov	r7, fp
   351bc:	4317      	orrs	r7, r2
   351be:	d0ce      	beq.n	3515e <__gedf2+0x32>
   351c0:	e7f8      	b.n	351b4 <__gedf2+0x88>
   351c2:	42ac      	cmp	r4, r5
   351c4:	dce4      	bgt.n	35190 <__gedf2+0x64>
   351c6:	da03      	bge.n	351d0 <__gedf2+0xa4>
   351c8:	1e48      	subs	r0, r1, #1
   351ca:	2101      	movs	r1, #1
   351cc:	4308      	orrs	r0, r1
   351ce:	e7e2      	b.n	35196 <__gedf2+0x6a>
   351d0:	455e      	cmp	r6, fp
   351d2:	d8dd      	bhi.n	35190 <__gedf2+0x64>
   351d4:	d006      	beq.n	351e4 <__gedf2+0xb8>
   351d6:	2000      	movs	r0, #0
   351d8:	455e      	cmp	r6, fp
   351da:	d2dc      	bcs.n	35196 <__gedf2+0x6a>
   351dc:	2301      	movs	r3, #1
   351de:	1e48      	subs	r0, r1, #1
   351e0:	4318      	orrs	r0, r3
   351e2:	e7d8      	b.n	35196 <__gedf2+0x6a>
   351e4:	45c4      	cmp	ip, r8
   351e6:	d8d3      	bhi.n	35190 <__gedf2+0x64>
   351e8:	2000      	movs	r0, #0
   351ea:	45c4      	cmp	ip, r8
   351ec:	d3f6      	bcc.n	351dc <__gedf2+0xb0>
   351ee:	e7d2      	b.n	35196 <__gedf2+0x6a>
   351f0:	000007ff 	.word	0x000007ff

000351f4 <__ledf2>:
   351f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   351f6:	464e      	mov	r6, r9
   351f8:	4645      	mov	r5, r8
   351fa:	46de      	mov	lr, fp
   351fc:	4657      	mov	r7, sl
   351fe:	005c      	lsls	r4, r3, #1
   35200:	b5e0      	push	{r5, r6, r7, lr}
   35202:	031f      	lsls	r7, r3, #12
   35204:	0fdb      	lsrs	r3, r3, #31
   35206:	4699      	mov	r9, r3
   35208:	4b2a      	ldr	r3, [pc, #168]	; (352b4 <__ledf2+0xc0>)
   3520a:	030e      	lsls	r6, r1, #12
   3520c:	004d      	lsls	r5, r1, #1
   3520e:	0fc9      	lsrs	r1, r1, #31
   35210:	4684      	mov	ip, r0
   35212:	0b36      	lsrs	r6, r6, #12
   35214:	0d6d      	lsrs	r5, r5, #21
   35216:	468b      	mov	fp, r1
   35218:	4690      	mov	r8, r2
   3521a:	0b3f      	lsrs	r7, r7, #12
   3521c:	0d64      	lsrs	r4, r4, #21
   3521e:	429d      	cmp	r5, r3
   35220:	d020      	beq.n	35264 <__ledf2+0x70>
   35222:	4b24      	ldr	r3, [pc, #144]	; (352b4 <__ledf2+0xc0>)
   35224:	429c      	cmp	r4, r3
   35226:	d022      	beq.n	3526e <__ledf2+0x7a>
   35228:	2d00      	cmp	r5, #0
   3522a:	d112      	bne.n	35252 <__ledf2+0x5e>
   3522c:	4330      	orrs	r0, r6
   3522e:	4243      	negs	r3, r0
   35230:	4143      	adcs	r3, r0
   35232:	b2db      	uxtb	r3, r3
   35234:	2c00      	cmp	r4, #0
   35236:	d01f      	beq.n	35278 <__ledf2+0x84>
   35238:	2b00      	cmp	r3, #0
   3523a:	d00c      	beq.n	35256 <__ledf2+0x62>
   3523c:	464b      	mov	r3, r9
   3523e:	2001      	movs	r0, #1
   35240:	3b01      	subs	r3, #1
   35242:	4303      	orrs	r3, r0
   35244:	0018      	movs	r0, r3
   35246:	bc3c      	pop	{r2, r3, r4, r5}
   35248:	4690      	mov	r8, r2
   3524a:	4699      	mov	r9, r3
   3524c:	46a2      	mov	sl, r4
   3524e:	46ab      	mov	fp, r5
   35250:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35252:	2c00      	cmp	r4, #0
   35254:	d016      	beq.n	35284 <__ledf2+0x90>
   35256:	45cb      	cmp	fp, r9
   35258:	d017      	beq.n	3528a <__ledf2+0x96>
   3525a:	465b      	mov	r3, fp
   3525c:	4259      	negs	r1, r3
   3525e:	2301      	movs	r3, #1
   35260:	430b      	orrs	r3, r1
   35262:	e7ef      	b.n	35244 <__ledf2+0x50>
   35264:	0031      	movs	r1, r6
   35266:	2302      	movs	r3, #2
   35268:	4301      	orrs	r1, r0
   3526a:	d1eb      	bne.n	35244 <__ledf2+0x50>
   3526c:	e7d9      	b.n	35222 <__ledf2+0x2e>
   3526e:	0039      	movs	r1, r7
   35270:	2302      	movs	r3, #2
   35272:	4311      	orrs	r1, r2
   35274:	d1e6      	bne.n	35244 <__ledf2+0x50>
   35276:	e7d7      	b.n	35228 <__ledf2+0x34>
   35278:	433a      	orrs	r2, r7
   3527a:	d1dd      	bne.n	35238 <__ledf2+0x44>
   3527c:	2300      	movs	r3, #0
   3527e:	2800      	cmp	r0, #0
   35280:	d0e0      	beq.n	35244 <__ledf2+0x50>
   35282:	e7ea      	b.n	3525a <__ledf2+0x66>
   35284:	433a      	orrs	r2, r7
   35286:	d1e6      	bne.n	35256 <__ledf2+0x62>
   35288:	e7e7      	b.n	3525a <__ledf2+0x66>
   3528a:	42a5      	cmp	r5, r4
   3528c:	dce5      	bgt.n	3525a <__ledf2+0x66>
   3528e:	db05      	blt.n	3529c <__ledf2+0xa8>
   35290:	42be      	cmp	r6, r7
   35292:	d8e2      	bhi.n	3525a <__ledf2+0x66>
   35294:	d007      	beq.n	352a6 <__ledf2+0xb2>
   35296:	2300      	movs	r3, #0
   35298:	42be      	cmp	r6, r7
   3529a:	d2d3      	bcs.n	35244 <__ledf2+0x50>
   3529c:	4659      	mov	r1, fp
   3529e:	2301      	movs	r3, #1
   352a0:	3901      	subs	r1, #1
   352a2:	430b      	orrs	r3, r1
   352a4:	e7ce      	b.n	35244 <__ledf2+0x50>
   352a6:	45c4      	cmp	ip, r8
   352a8:	d8d7      	bhi.n	3525a <__ledf2+0x66>
   352aa:	2300      	movs	r3, #0
   352ac:	45c4      	cmp	ip, r8
   352ae:	d3f5      	bcc.n	3529c <__ledf2+0xa8>
   352b0:	e7c8      	b.n	35244 <__ledf2+0x50>
   352b2:	46c0      	nop			; (mov r8, r8)
   352b4:	000007ff 	.word	0x000007ff

000352b8 <atof>:
   352b8:	b510      	push	{r4, lr}
   352ba:	2100      	movs	r1, #0
   352bc:	f001 f8ae 	bl	3641c <strtod>
   352c0:	bd10      	pop	{r4, pc}

000352c2 <atoi>:
   352c2:	b510      	push	{r4, lr}
   352c4:	220a      	movs	r2, #10
   352c6:	2100      	movs	r1, #0
   352c8:	f001 f940 	bl	3654c <strtol>
   352cc:	bd10      	pop	{r4, pc}
	...

000352d0 <__libc_init_array>:
   352d0:	b570      	push	{r4, r5, r6, lr}
   352d2:	2600      	movs	r6, #0
   352d4:	4d0c      	ldr	r5, [pc, #48]	; (35308 <__libc_init_array+0x38>)
   352d6:	4c0d      	ldr	r4, [pc, #52]	; (3530c <__libc_init_array+0x3c>)
   352d8:	1b64      	subs	r4, r4, r5
   352da:	10a4      	asrs	r4, r4, #2
   352dc:	42a6      	cmp	r6, r4
   352de:	d109      	bne.n	352f4 <__libc_init_array+0x24>
   352e0:	2600      	movs	r6, #0
   352e2:	f007 fc1d 	bl	3cb20 <_init>
   352e6:	4d0a      	ldr	r5, [pc, #40]	; (35310 <__libc_init_array+0x40>)
   352e8:	4c0a      	ldr	r4, [pc, #40]	; (35314 <__libc_init_array+0x44>)
   352ea:	1b64      	subs	r4, r4, r5
   352ec:	10a4      	asrs	r4, r4, #2
   352ee:	42a6      	cmp	r6, r4
   352f0:	d105      	bne.n	352fe <__libc_init_array+0x2e>
   352f2:	bd70      	pop	{r4, r5, r6, pc}
   352f4:	00b3      	lsls	r3, r6, #2
   352f6:	58eb      	ldr	r3, [r5, r3]
   352f8:	4798      	blx	r3
   352fa:	3601      	adds	r6, #1
   352fc:	e7ee      	b.n	352dc <__libc_init_array+0xc>
   352fe:	00b3      	lsls	r3, r6, #2
   35300:	58eb      	ldr	r3, [r5, r3]
   35302:	4798      	blx	r3
   35304:	3601      	adds	r6, #1
   35306:	e7f2      	b.n	352ee <__libc_init_array+0x1e>
   35308:	0003cb2c 	.word	0x0003cb2c
   3530c:	0003cb2c 	.word	0x0003cb2c
   35310:	0003cb2c 	.word	0x0003cb2c
   35314:	0003cb30 	.word	0x0003cb30

00035318 <malloc>:
   35318:	b510      	push	{r4, lr}
   3531a:	4b03      	ldr	r3, [pc, #12]	; (35328 <malloc+0x10>)
   3531c:	0001      	movs	r1, r0
   3531e:	6818      	ldr	r0, [r3, #0]
   35320:	f000 f87c 	bl	3541c <_malloc_r>
   35324:	bd10      	pop	{r4, pc}
   35326:	46c0      	nop			; (mov r8, r8)
   35328:	20000130 	.word	0x20000130

0003532c <free>:
   3532c:	b510      	push	{r4, lr}
   3532e:	4b03      	ldr	r3, [pc, #12]	; (3533c <free+0x10>)
   35330:	0001      	movs	r1, r0
   35332:	6818      	ldr	r0, [r3, #0]
   35334:	f000 f828 	bl	35388 <_free_r>
   35338:	bd10      	pop	{r4, pc}
   3533a:	46c0      	nop			; (mov r8, r8)
   3533c:	20000130 	.word	0x20000130

00035340 <memcpy>:
   35340:	2300      	movs	r3, #0
   35342:	b510      	push	{r4, lr}
   35344:	429a      	cmp	r2, r3
   35346:	d100      	bne.n	3534a <memcpy+0xa>
   35348:	bd10      	pop	{r4, pc}
   3534a:	5ccc      	ldrb	r4, [r1, r3]
   3534c:	54c4      	strb	r4, [r0, r3]
   3534e:	3301      	adds	r3, #1
   35350:	e7f8      	b.n	35344 <memcpy+0x4>

00035352 <memmove>:
   35352:	b510      	push	{r4, lr}
   35354:	4288      	cmp	r0, r1
   35356:	d902      	bls.n	3535e <memmove+0xc>
   35358:	188b      	adds	r3, r1, r2
   3535a:	4298      	cmp	r0, r3
   3535c:	d308      	bcc.n	35370 <memmove+0x1e>
   3535e:	2300      	movs	r3, #0
   35360:	429a      	cmp	r2, r3
   35362:	d007      	beq.n	35374 <memmove+0x22>
   35364:	5ccc      	ldrb	r4, [r1, r3]
   35366:	54c4      	strb	r4, [r0, r3]
   35368:	3301      	adds	r3, #1
   3536a:	e7f9      	b.n	35360 <memmove+0xe>
   3536c:	5c8b      	ldrb	r3, [r1, r2]
   3536e:	5483      	strb	r3, [r0, r2]
   35370:	3a01      	subs	r2, #1
   35372:	d2fb      	bcs.n	3536c <memmove+0x1a>
   35374:	bd10      	pop	{r4, pc}

00035376 <memset>:
   35376:	0003      	movs	r3, r0
   35378:	1882      	adds	r2, r0, r2
   3537a:	4293      	cmp	r3, r2
   3537c:	d100      	bne.n	35380 <memset+0xa>
   3537e:	4770      	bx	lr
   35380:	7019      	strb	r1, [r3, #0]
   35382:	3301      	adds	r3, #1
   35384:	e7f9      	b.n	3537a <memset+0x4>
	...

00035388 <_free_r>:
   35388:	b570      	push	{r4, r5, r6, lr}
   3538a:	0005      	movs	r5, r0
   3538c:	2900      	cmp	r1, #0
   3538e:	d010      	beq.n	353b2 <_free_r+0x2a>
   35390:	1f0c      	subs	r4, r1, #4
   35392:	6823      	ldr	r3, [r4, #0]
   35394:	2b00      	cmp	r3, #0
   35396:	da00      	bge.n	3539a <_free_r+0x12>
   35398:	18e4      	adds	r4, r4, r3
   3539a:	0028      	movs	r0, r5
   3539c:	f001 ff38 	bl	37210 <__malloc_lock>
   353a0:	4a1d      	ldr	r2, [pc, #116]	; (35418 <_free_r+0x90>)
   353a2:	6813      	ldr	r3, [r2, #0]
   353a4:	2b00      	cmp	r3, #0
   353a6:	d105      	bne.n	353b4 <_free_r+0x2c>
   353a8:	6063      	str	r3, [r4, #4]
   353aa:	6014      	str	r4, [r2, #0]
   353ac:	0028      	movs	r0, r5
   353ae:	f001 ff30 	bl	37212 <__malloc_unlock>
   353b2:	bd70      	pop	{r4, r5, r6, pc}
   353b4:	42a3      	cmp	r3, r4
   353b6:	d909      	bls.n	353cc <_free_r+0x44>
   353b8:	6821      	ldr	r1, [r4, #0]
   353ba:	1860      	adds	r0, r4, r1
   353bc:	4283      	cmp	r3, r0
   353be:	d1f3      	bne.n	353a8 <_free_r+0x20>
   353c0:	6818      	ldr	r0, [r3, #0]
   353c2:	685b      	ldr	r3, [r3, #4]
   353c4:	1841      	adds	r1, r0, r1
   353c6:	6021      	str	r1, [r4, #0]
   353c8:	e7ee      	b.n	353a8 <_free_r+0x20>
   353ca:	0013      	movs	r3, r2
   353cc:	685a      	ldr	r2, [r3, #4]
   353ce:	2a00      	cmp	r2, #0
   353d0:	d001      	beq.n	353d6 <_free_r+0x4e>
   353d2:	42a2      	cmp	r2, r4
   353d4:	d9f9      	bls.n	353ca <_free_r+0x42>
   353d6:	6819      	ldr	r1, [r3, #0]
   353d8:	1858      	adds	r0, r3, r1
   353da:	42a0      	cmp	r0, r4
   353dc:	d10b      	bne.n	353f6 <_free_r+0x6e>
   353de:	6820      	ldr	r0, [r4, #0]
   353e0:	1809      	adds	r1, r1, r0
   353e2:	1858      	adds	r0, r3, r1
   353e4:	6019      	str	r1, [r3, #0]
   353e6:	4282      	cmp	r2, r0
   353e8:	d1e0      	bne.n	353ac <_free_r+0x24>
   353ea:	6810      	ldr	r0, [r2, #0]
   353ec:	6852      	ldr	r2, [r2, #4]
   353ee:	1841      	adds	r1, r0, r1
   353f0:	6019      	str	r1, [r3, #0]
   353f2:	605a      	str	r2, [r3, #4]
   353f4:	e7da      	b.n	353ac <_free_r+0x24>
   353f6:	42a0      	cmp	r0, r4
   353f8:	d902      	bls.n	35400 <_free_r+0x78>
   353fa:	230c      	movs	r3, #12
   353fc:	602b      	str	r3, [r5, #0]
   353fe:	e7d5      	b.n	353ac <_free_r+0x24>
   35400:	6821      	ldr	r1, [r4, #0]
   35402:	1860      	adds	r0, r4, r1
   35404:	4282      	cmp	r2, r0
   35406:	d103      	bne.n	35410 <_free_r+0x88>
   35408:	6810      	ldr	r0, [r2, #0]
   3540a:	6852      	ldr	r2, [r2, #4]
   3540c:	1841      	adds	r1, r0, r1
   3540e:	6021      	str	r1, [r4, #0]
   35410:	6062      	str	r2, [r4, #4]
   35412:	605c      	str	r4, [r3, #4]
   35414:	e7ca      	b.n	353ac <_free_r+0x24>
   35416:	46c0      	nop			; (mov r8, r8)
   35418:	20004734 	.word	0x20004734

0003541c <_malloc_r>:
   3541c:	2303      	movs	r3, #3
   3541e:	b570      	push	{r4, r5, r6, lr}
   35420:	1ccd      	adds	r5, r1, #3
   35422:	439d      	bics	r5, r3
   35424:	3508      	adds	r5, #8
   35426:	0006      	movs	r6, r0
   35428:	2d0c      	cmp	r5, #12
   3542a:	d21e      	bcs.n	3546a <_malloc_r+0x4e>
   3542c:	250c      	movs	r5, #12
   3542e:	42a9      	cmp	r1, r5
   35430:	d81d      	bhi.n	3546e <_malloc_r+0x52>
   35432:	0030      	movs	r0, r6
   35434:	f001 feec 	bl	37210 <__malloc_lock>
   35438:	4a25      	ldr	r2, [pc, #148]	; (354d0 <_malloc_r+0xb4>)
   3543a:	6814      	ldr	r4, [r2, #0]
   3543c:	0021      	movs	r1, r4
   3543e:	2900      	cmp	r1, #0
   35440:	d119      	bne.n	35476 <_malloc_r+0x5a>
   35442:	4c24      	ldr	r4, [pc, #144]	; (354d4 <_malloc_r+0xb8>)
   35444:	6823      	ldr	r3, [r4, #0]
   35446:	2b00      	cmp	r3, #0
   35448:	d103      	bne.n	35452 <_malloc_r+0x36>
   3544a:	0030      	movs	r0, r6
   3544c:	f000 f8ae 	bl	355ac <_sbrk_r>
   35450:	6020      	str	r0, [r4, #0]
   35452:	0029      	movs	r1, r5
   35454:	0030      	movs	r0, r6
   35456:	f000 f8a9 	bl	355ac <_sbrk_r>
   3545a:	1c43      	adds	r3, r0, #1
   3545c:	d12c      	bne.n	354b8 <_malloc_r+0x9c>
   3545e:	230c      	movs	r3, #12
   35460:	0030      	movs	r0, r6
   35462:	6033      	str	r3, [r6, #0]
   35464:	f001 fed5 	bl	37212 <__malloc_unlock>
   35468:	e003      	b.n	35472 <_malloc_r+0x56>
   3546a:	2d00      	cmp	r5, #0
   3546c:	dadf      	bge.n	3542e <_malloc_r+0x12>
   3546e:	230c      	movs	r3, #12
   35470:	6033      	str	r3, [r6, #0]
   35472:	2000      	movs	r0, #0
   35474:	bd70      	pop	{r4, r5, r6, pc}
   35476:	680b      	ldr	r3, [r1, #0]
   35478:	1b5b      	subs	r3, r3, r5
   3547a:	d41a      	bmi.n	354b2 <_malloc_r+0x96>
   3547c:	2b0b      	cmp	r3, #11
   3547e:	d903      	bls.n	35488 <_malloc_r+0x6c>
   35480:	600b      	str	r3, [r1, #0]
   35482:	18cc      	adds	r4, r1, r3
   35484:	6025      	str	r5, [r4, #0]
   35486:	e003      	b.n	35490 <_malloc_r+0x74>
   35488:	428c      	cmp	r4, r1
   3548a:	d10e      	bne.n	354aa <_malloc_r+0x8e>
   3548c:	6863      	ldr	r3, [r4, #4]
   3548e:	6013      	str	r3, [r2, #0]
   35490:	0030      	movs	r0, r6
   35492:	f001 febe 	bl	37212 <__malloc_unlock>
   35496:	0020      	movs	r0, r4
   35498:	2207      	movs	r2, #7
   3549a:	300b      	adds	r0, #11
   3549c:	1d23      	adds	r3, r4, #4
   3549e:	4390      	bics	r0, r2
   354a0:	1ac3      	subs	r3, r0, r3
   354a2:	d0e7      	beq.n	35474 <_malloc_r+0x58>
   354a4:	425a      	negs	r2, r3
   354a6:	50e2      	str	r2, [r4, r3]
   354a8:	e7e4      	b.n	35474 <_malloc_r+0x58>
   354aa:	684b      	ldr	r3, [r1, #4]
   354ac:	6063      	str	r3, [r4, #4]
   354ae:	000c      	movs	r4, r1
   354b0:	e7ee      	b.n	35490 <_malloc_r+0x74>
   354b2:	000c      	movs	r4, r1
   354b4:	6849      	ldr	r1, [r1, #4]
   354b6:	e7c2      	b.n	3543e <_malloc_r+0x22>
   354b8:	2303      	movs	r3, #3
   354ba:	1cc4      	adds	r4, r0, #3
   354bc:	439c      	bics	r4, r3
   354be:	42a0      	cmp	r0, r4
   354c0:	d0e0      	beq.n	35484 <_malloc_r+0x68>
   354c2:	1a21      	subs	r1, r4, r0
   354c4:	0030      	movs	r0, r6
   354c6:	f000 f871 	bl	355ac <_sbrk_r>
   354ca:	1c43      	adds	r3, r0, #1
   354cc:	d1da      	bne.n	35484 <_malloc_r+0x68>
   354ce:	e7c6      	b.n	3545e <_malloc_r+0x42>
   354d0:	20004734 	.word	0x20004734
   354d4:	20004738 	.word	0x20004738

000354d8 <_puts_r>:
   354d8:	b570      	push	{r4, r5, r6, lr}
   354da:	0005      	movs	r5, r0
   354dc:	000e      	movs	r6, r1
   354de:	2800      	cmp	r0, #0
   354e0:	d004      	beq.n	354ec <_puts_r+0x14>
   354e2:	6983      	ldr	r3, [r0, #24]
   354e4:	2b00      	cmp	r3, #0
   354e6:	d101      	bne.n	354ec <_puts_r+0x14>
   354e8:	f001 fa40 	bl	3696c <__sinit>
   354ec:	69ab      	ldr	r3, [r5, #24]
   354ee:	68ac      	ldr	r4, [r5, #8]
   354f0:	2b00      	cmp	r3, #0
   354f2:	d102      	bne.n	354fa <_puts_r+0x22>
   354f4:	0028      	movs	r0, r5
   354f6:	f001 fa39 	bl	3696c <__sinit>
   354fa:	4b24      	ldr	r3, [pc, #144]	; (3558c <_puts_r+0xb4>)
   354fc:	429c      	cmp	r4, r3
   354fe:	d10f      	bne.n	35520 <_puts_r+0x48>
   35500:	686c      	ldr	r4, [r5, #4]
   35502:	89a3      	ldrh	r3, [r4, #12]
   35504:	071b      	lsls	r3, r3, #28
   35506:	d502      	bpl.n	3550e <_puts_r+0x36>
   35508:	6923      	ldr	r3, [r4, #16]
   3550a:	2b00      	cmp	r3, #0
   3550c:	d120      	bne.n	35550 <_puts_r+0x78>
   3550e:	0021      	movs	r1, r4
   35510:	0028      	movs	r0, r5
   35512:	f001 f8bd 	bl	36690 <__swsetup_r>
   35516:	2800      	cmp	r0, #0
   35518:	d01a      	beq.n	35550 <_puts_r+0x78>
   3551a:	2001      	movs	r0, #1
   3551c:	4240      	negs	r0, r0
   3551e:	bd70      	pop	{r4, r5, r6, pc}
   35520:	4b1b      	ldr	r3, [pc, #108]	; (35590 <_puts_r+0xb8>)
   35522:	429c      	cmp	r4, r3
   35524:	d101      	bne.n	3552a <_puts_r+0x52>
   35526:	68ac      	ldr	r4, [r5, #8]
   35528:	e7eb      	b.n	35502 <_puts_r+0x2a>
   3552a:	4b1a      	ldr	r3, [pc, #104]	; (35594 <_puts_r+0xbc>)
   3552c:	429c      	cmp	r4, r3
   3552e:	d1e8      	bne.n	35502 <_puts_r+0x2a>
   35530:	68ec      	ldr	r4, [r5, #12]
   35532:	e7e6      	b.n	35502 <_puts_r+0x2a>
   35534:	3b01      	subs	r3, #1
   35536:	3601      	adds	r6, #1
   35538:	60a3      	str	r3, [r4, #8]
   3553a:	2b00      	cmp	r3, #0
   3553c:	da04      	bge.n	35548 <_puts_r+0x70>
   3553e:	69a2      	ldr	r2, [r4, #24]
   35540:	4293      	cmp	r3, r2
   35542:	db16      	blt.n	35572 <_puts_r+0x9a>
   35544:	290a      	cmp	r1, #10
   35546:	d014      	beq.n	35572 <_puts_r+0x9a>
   35548:	6823      	ldr	r3, [r4, #0]
   3554a:	1c5a      	adds	r2, r3, #1
   3554c:	6022      	str	r2, [r4, #0]
   3554e:	7019      	strb	r1, [r3, #0]
   35550:	7831      	ldrb	r1, [r6, #0]
   35552:	68a3      	ldr	r3, [r4, #8]
   35554:	2900      	cmp	r1, #0
   35556:	d1ed      	bne.n	35534 <_puts_r+0x5c>
   35558:	3b01      	subs	r3, #1
   3555a:	60a3      	str	r3, [r4, #8]
   3555c:	2b00      	cmp	r3, #0
   3555e:	da0f      	bge.n	35580 <_puts_r+0xa8>
   35560:	0022      	movs	r2, r4
   35562:	310a      	adds	r1, #10
   35564:	0028      	movs	r0, r5
   35566:	f001 f83d 	bl	365e4 <__swbuf_r>
   3556a:	1c43      	adds	r3, r0, #1
   3556c:	d0d5      	beq.n	3551a <_puts_r+0x42>
   3556e:	200a      	movs	r0, #10
   35570:	e7d5      	b.n	3551e <_puts_r+0x46>
   35572:	0022      	movs	r2, r4
   35574:	0028      	movs	r0, r5
   35576:	f001 f835 	bl	365e4 <__swbuf_r>
   3557a:	1c43      	adds	r3, r0, #1
   3557c:	d1e8      	bne.n	35550 <_puts_r+0x78>
   3557e:	e7cc      	b.n	3551a <_puts_r+0x42>
   35580:	200a      	movs	r0, #10
   35582:	6823      	ldr	r3, [r4, #0]
   35584:	1c5a      	adds	r2, r3, #1
   35586:	6022      	str	r2, [r4, #0]
   35588:	7018      	strb	r0, [r3, #0]
   3558a:	e7c8      	b.n	3551e <_puts_r+0x46>
   3558c:	0003c8a0 	.word	0x0003c8a0
   35590:	0003c8c0 	.word	0x0003c8c0
   35594:	0003c880 	.word	0x0003c880

00035598 <puts>:
   35598:	b510      	push	{r4, lr}
   3559a:	4b03      	ldr	r3, [pc, #12]	; (355a8 <puts+0x10>)
   3559c:	0001      	movs	r1, r0
   3559e:	6818      	ldr	r0, [r3, #0]
   355a0:	f7ff ff9a 	bl	354d8 <_puts_r>
   355a4:	bd10      	pop	{r4, pc}
   355a6:	46c0      	nop			; (mov r8, r8)
   355a8:	20000130 	.word	0x20000130

000355ac <_sbrk_r>:
   355ac:	2300      	movs	r3, #0
   355ae:	b570      	push	{r4, r5, r6, lr}
   355b0:	4c06      	ldr	r4, [pc, #24]	; (355cc <_sbrk_r+0x20>)
   355b2:	0005      	movs	r5, r0
   355b4:	0008      	movs	r0, r1
   355b6:	6023      	str	r3, [r4, #0]
   355b8:	f7f6 f910 	bl	2b7dc <_sbrk>
   355bc:	1c43      	adds	r3, r0, #1
   355be:	d103      	bne.n	355c8 <_sbrk_r+0x1c>
   355c0:	6823      	ldr	r3, [r4, #0]
   355c2:	2b00      	cmp	r3, #0
   355c4:	d000      	beq.n	355c8 <_sbrk_r+0x1c>
   355c6:	602b      	str	r3, [r5, #0]
   355c8:	bd70      	pop	{r4, r5, r6, pc}
   355ca:	46c0      	nop			; (mov r8, r8)
   355cc:	20005e58 	.word	0x20005e58

000355d0 <sniprintf>:
   355d0:	b40c      	push	{r2, r3}
   355d2:	b530      	push	{r4, r5, lr}
   355d4:	4b16      	ldr	r3, [pc, #88]	; (35630 <sniprintf+0x60>)
   355d6:	b09d      	sub	sp, #116	; 0x74
   355d8:	1e0c      	subs	r4, r1, #0
   355da:	681d      	ldr	r5, [r3, #0]
   355dc:	da08      	bge.n	355f0 <sniprintf+0x20>
   355de:	238b      	movs	r3, #139	; 0x8b
   355e0:	2001      	movs	r0, #1
   355e2:	602b      	str	r3, [r5, #0]
   355e4:	4240      	negs	r0, r0
   355e6:	b01d      	add	sp, #116	; 0x74
   355e8:	bc30      	pop	{r4, r5}
   355ea:	bc08      	pop	{r3}
   355ec:	b002      	add	sp, #8
   355ee:	4718      	bx	r3
   355f0:	2382      	movs	r3, #130	; 0x82
   355f2:	a902      	add	r1, sp, #8
   355f4:	009b      	lsls	r3, r3, #2
   355f6:	818b      	strh	r3, [r1, #12]
   355f8:	2300      	movs	r3, #0
   355fa:	9002      	str	r0, [sp, #8]
   355fc:	6108      	str	r0, [r1, #16]
   355fe:	429c      	cmp	r4, r3
   35600:	d000      	beq.n	35604 <sniprintf+0x34>
   35602:	1e63      	subs	r3, r4, #1
   35604:	608b      	str	r3, [r1, #8]
   35606:	614b      	str	r3, [r1, #20]
   35608:	2301      	movs	r3, #1
   3560a:	425b      	negs	r3, r3
   3560c:	81cb      	strh	r3, [r1, #14]
   3560e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   35610:	ab21      	add	r3, sp, #132	; 0x84
   35612:	0028      	movs	r0, r5
   35614:	9301      	str	r3, [sp, #4]
   35616:	f002 fa61 	bl	37adc <_svfiprintf_r>
   3561a:	1c43      	adds	r3, r0, #1
   3561c:	da01      	bge.n	35622 <sniprintf+0x52>
   3561e:	238b      	movs	r3, #139	; 0x8b
   35620:	602b      	str	r3, [r5, #0]
   35622:	2c00      	cmp	r4, #0
   35624:	d0df      	beq.n	355e6 <sniprintf+0x16>
   35626:	2300      	movs	r3, #0
   35628:	9a02      	ldr	r2, [sp, #8]
   3562a:	7013      	strb	r3, [r2, #0]
   3562c:	e7db      	b.n	355e6 <sniprintf+0x16>
   3562e:	46c0      	nop			; (mov r8, r8)
   35630:	20000130 	.word	0x20000130

00035634 <siprintf>:
   35634:	b40e      	push	{r1, r2, r3}
   35636:	b510      	push	{r4, lr}
   35638:	b09d      	sub	sp, #116	; 0x74
   3563a:	a902      	add	r1, sp, #8
   3563c:	9002      	str	r0, [sp, #8]
   3563e:	6108      	str	r0, [r1, #16]
   35640:	480b      	ldr	r0, [pc, #44]	; (35670 <siprintf+0x3c>)
   35642:	2482      	movs	r4, #130	; 0x82
   35644:	6088      	str	r0, [r1, #8]
   35646:	6148      	str	r0, [r1, #20]
   35648:	2001      	movs	r0, #1
   3564a:	4240      	negs	r0, r0
   3564c:	ab1f      	add	r3, sp, #124	; 0x7c
   3564e:	81c8      	strh	r0, [r1, #14]
   35650:	4808      	ldr	r0, [pc, #32]	; (35674 <siprintf+0x40>)
   35652:	cb04      	ldmia	r3!, {r2}
   35654:	00a4      	lsls	r4, r4, #2
   35656:	6800      	ldr	r0, [r0, #0]
   35658:	9301      	str	r3, [sp, #4]
   3565a:	818c      	strh	r4, [r1, #12]
   3565c:	f002 fa3e 	bl	37adc <_svfiprintf_r>
   35660:	2300      	movs	r3, #0
   35662:	9a02      	ldr	r2, [sp, #8]
   35664:	7013      	strb	r3, [r2, #0]
   35666:	b01d      	add	sp, #116	; 0x74
   35668:	bc10      	pop	{r4}
   3566a:	bc08      	pop	{r3}
   3566c:	b003      	add	sp, #12
   3566e:	4718      	bx	r3
   35670:	7fffffff 	.word	0x7fffffff
   35674:	20000130 	.word	0x20000130

00035678 <strcasecmp>:
   35678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3567a:	0007      	movs	r7, r0
   3567c:	000e      	movs	r6, r1
   3567e:	783c      	ldrb	r4, [r7, #0]
   35680:	f001 fd38 	bl	370f4 <__locale_ctype_ptr>
   35684:	2203      	movs	r2, #3
   35686:	1900      	adds	r0, r0, r4
   35688:	7843      	ldrb	r3, [r0, #1]
   3568a:	4013      	ands	r3, r2
   3568c:	2b01      	cmp	r3, #1
   3568e:	d100      	bne.n	35692 <strcasecmp+0x1a>
   35690:	3420      	adds	r4, #32
   35692:	7835      	ldrb	r5, [r6, #0]
   35694:	f001 fd2e 	bl	370f4 <__locale_ctype_ptr>
   35698:	2203      	movs	r2, #3
   3569a:	1940      	adds	r0, r0, r5
   3569c:	7843      	ldrb	r3, [r0, #1]
   3569e:	4013      	ands	r3, r2
   356a0:	2b01      	cmp	r3, #1
   356a2:	d100      	bne.n	356a6 <strcasecmp+0x2e>
   356a4:	3520      	adds	r5, #32
   356a6:	1b60      	subs	r0, r4, r5
   356a8:	d103      	bne.n	356b2 <strcasecmp+0x3a>
   356aa:	3701      	adds	r7, #1
   356ac:	3601      	adds	r6, #1
   356ae:	2d00      	cmp	r5, #0
   356b0:	d1e5      	bne.n	3567e <strcasecmp+0x6>
   356b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000356b4 <strcat>:
   356b4:	0002      	movs	r2, r0
   356b6:	b510      	push	{r4, lr}
   356b8:	7813      	ldrb	r3, [r2, #0]
   356ba:	2b00      	cmp	r3, #0
   356bc:	d105      	bne.n	356ca <strcat+0x16>
   356be:	5ccc      	ldrb	r4, [r1, r3]
   356c0:	54d4      	strb	r4, [r2, r3]
   356c2:	3301      	adds	r3, #1
   356c4:	2c00      	cmp	r4, #0
   356c6:	d1fa      	bne.n	356be <strcat+0xa>
   356c8:	bd10      	pop	{r4, pc}
   356ca:	3201      	adds	r2, #1
   356cc:	e7f4      	b.n	356b8 <strcat+0x4>

000356ce <strcmp>:
   356ce:	7802      	ldrb	r2, [r0, #0]
   356d0:	780b      	ldrb	r3, [r1, #0]
   356d2:	2a00      	cmp	r2, #0
   356d4:	d003      	beq.n	356de <strcmp+0x10>
   356d6:	3001      	adds	r0, #1
   356d8:	3101      	adds	r1, #1
   356da:	429a      	cmp	r2, r3
   356dc:	d0f7      	beq.n	356ce <strcmp>
   356de:	1ad0      	subs	r0, r2, r3
   356e0:	4770      	bx	lr

000356e2 <strcpy>:
   356e2:	1c03      	adds	r3, r0, #0
   356e4:	780a      	ldrb	r2, [r1, #0]
   356e6:	3101      	adds	r1, #1
   356e8:	701a      	strb	r2, [r3, #0]
   356ea:	3301      	adds	r3, #1
   356ec:	2a00      	cmp	r2, #0
   356ee:	d1f9      	bne.n	356e4 <strcpy+0x2>
   356f0:	4770      	bx	lr
	...

000356f4 <strdup>:
   356f4:	b510      	push	{r4, lr}
   356f6:	4b03      	ldr	r3, [pc, #12]	; (35704 <strdup+0x10>)
   356f8:	0001      	movs	r1, r0
   356fa:	6818      	ldr	r0, [r3, #0]
   356fc:	f000 f804 	bl	35708 <_strdup_r>
   35700:	bd10      	pop	{r4, pc}
   35702:	46c0      	nop			; (mov r8, r8)
   35704:	20000130 	.word	0x20000130

00035708 <_strdup_r>:
   35708:	b570      	push	{r4, r5, r6, lr}
   3570a:	0005      	movs	r5, r0
   3570c:	0008      	movs	r0, r1
   3570e:	000e      	movs	r6, r1
   35710:	f000 f80d 	bl	3572e <strlen>
   35714:	1c44      	adds	r4, r0, #1
   35716:	0021      	movs	r1, r4
   35718:	0028      	movs	r0, r5
   3571a:	f7ff fe7f 	bl	3541c <_malloc_r>
   3571e:	1e05      	subs	r5, r0, #0
   35720:	d003      	beq.n	3572a <_strdup_r+0x22>
   35722:	0022      	movs	r2, r4
   35724:	0031      	movs	r1, r6
   35726:	f7ff fe0b 	bl	35340 <memcpy>
   3572a:	0028      	movs	r0, r5
   3572c:	bd70      	pop	{r4, r5, r6, pc}

0003572e <strlen>:
   3572e:	2300      	movs	r3, #0
   35730:	5cc2      	ldrb	r2, [r0, r3]
   35732:	3301      	adds	r3, #1
   35734:	2a00      	cmp	r2, #0
   35736:	d1fb      	bne.n	35730 <strlen+0x2>
   35738:	1e58      	subs	r0, r3, #1
   3573a:	4770      	bx	lr

0003573c <strncmp>:
   3573c:	2300      	movs	r3, #0
   3573e:	b530      	push	{r4, r5, lr}
   35740:	429a      	cmp	r2, r3
   35742:	d00a      	beq.n	3575a <strncmp+0x1e>
   35744:	3a01      	subs	r2, #1
   35746:	5cc4      	ldrb	r4, [r0, r3]
   35748:	5ccd      	ldrb	r5, [r1, r3]
   3574a:	42ac      	cmp	r4, r5
   3574c:	d104      	bne.n	35758 <strncmp+0x1c>
   3574e:	429a      	cmp	r2, r3
   35750:	d002      	beq.n	35758 <strncmp+0x1c>
   35752:	3301      	adds	r3, #1
   35754:	2c00      	cmp	r4, #0
   35756:	d1f6      	bne.n	35746 <strncmp+0xa>
   35758:	1b63      	subs	r3, r4, r5
   3575a:	0018      	movs	r0, r3
   3575c:	bd30      	pop	{r4, r5, pc}

0003575e <strncpy>:
   3575e:	b570      	push	{r4, r5, r6, lr}
   35760:	0004      	movs	r4, r0
   35762:	2a00      	cmp	r2, #0
   35764:	d100      	bne.n	35768 <strncpy+0xa>
   35766:	bd70      	pop	{r4, r5, r6, pc}
   35768:	780d      	ldrb	r5, [r1, #0]
   3576a:	1e56      	subs	r6, r2, #1
   3576c:	1c63      	adds	r3, r4, #1
   3576e:	7025      	strb	r5, [r4, #0]
   35770:	3101      	adds	r1, #1
   35772:	2d00      	cmp	r5, #0
   35774:	d105      	bne.n	35782 <strncpy+0x24>
   35776:	18a4      	adds	r4, r4, r2
   35778:	429c      	cmp	r4, r3
   3577a:	d0f4      	beq.n	35766 <strncpy+0x8>
   3577c:	701d      	strb	r5, [r3, #0]
   3577e:	3301      	adds	r3, #1
   35780:	e7fa      	b.n	35778 <strncpy+0x1a>
   35782:	001c      	movs	r4, r3
   35784:	0032      	movs	r2, r6
   35786:	e7ec      	b.n	35762 <strncpy+0x4>

00035788 <strrchr>:
   35788:	b570      	push	{r4, r5, r6, lr}
   3578a:	000d      	movs	r5, r1
   3578c:	2400      	movs	r4, #0
   3578e:	2900      	cmp	r1, #0
   35790:	d105      	bne.n	3579e <strrchr+0x16>
   35792:	f002 fc7b 	bl	3808c <strchr>
   35796:	0004      	movs	r4, r0
   35798:	e006      	b.n	357a8 <strrchr+0x20>
   3579a:	001c      	movs	r4, r3
   3579c:	1c58      	adds	r0, r3, #1
   3579e:	0029      	movs	r1, r5
   357a0:	f002 fc74 	bl	3808c <strchr>
   357a4:	1e03      	subs	r3, r0, #0
   357a6:	d1f8      	bne.n	3579a <strrchr+0x12>
   357a8:	0020      	movs	r0, r4
   357aa:	bd70      	pop	{r4, r5, r6, pc}

000357ac <strstr>:
   357ac:	b510      	push	{r4, lr}
   357ae:	0002      	movs	r2, r0
   357b0:	7800      	ldrb	r0, [r0, #0]
   357b2:	2800      	cmp	r0, #0
   357b4:	d104      	bne.n	357c0 <strstr+0x14>
   357b6:	7809      	ldrb	r1, [r1, #0]
   357b8:	2900      	cmp	r1, #0
   357ba:	d00d      	beq.n	357d8 <strstr+0x2c>
   357bc:	bd10      	pop	{r4, pc}
   357be:	3201      	adds	r2, #1
   357c0:	7810      	ldrb	r0, [r2, #0]
   357c2:	2800      	cmp	r0, #0
   357c4:	d0fa      	beq.n	357bc <strstr+0x10>
   357c6:	2300      	movs	r3, #0
   357c8:	5cc8      	ldrb	r0, [r1, r3]
   357ca:	2800      	cmp	r0, #0
   357cc:	d004      	beq.n	357d8 <strstr+0x2c>
   357ce:	5cd4      	ldrb	r4, [r2, r3]
   357d0:	4284      	cmp	r4, r0
   357d2:	d1f4      	bne.n	357be <strstr+0x12>
   357d4:	3301      	adds	r3, #1
   357d6:	e7f7      	b.n	357c8 <strstr+0x1c>
   357d8:	0010      	movs	r0, r2
   357da:	e7ef      	b.n	357bc <strstr+0x10>

000357dc <sulp>:
   357dc:	b570      	push	{r4, r5, r6, lr}
   357de:	0016      	movs	r6, r2
   357e0:	000d      	movs	r5, r1
   357e2:	f001 ffe5 	bl	377b0 <__ulp>
   357e6:	2e00      	cmp	r6, #0
   357e8:	d00d      	beq.n	35806 <sulp+0x2a>
   357ea:	236b      	movs	r3, #107	; 0x6b
   357ec:	006a      	lsls	r2, r5, #1
   357ee:	0d52      	lsrs	r2, r2, #21
   357f0:	1a9b      	subs	r3, r3, r2
   357f2:	2b00      	cmp	r3, #0
   357f4:	dd07      	ble.n	35806 <sulp+0x2a>
   357f6:	2400      	movs	r4, #0
   357f8:	4a03      	ldr	r2, [pc, #12]	; (35808 <sulp+0x2c>)
   357fa:	051b      	lsls	r3, r3, #20
   357fc:	189d      	adds	r5, r3, r2
   357fe:	002b      	movs	r3, r5
   35800:	0022      	movs	r2, r4
   35802:	f7fe fda9 	bl	34358 <__aeabi_dmul>
   35806:	bd70      	pop	{r4, r5, r6, pc}
   35808:	3ff00000 	.word	0x3ff00000

0003580c <_strtod_l>:
   3580c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3580e:	b0a5      	sub	sp, #148	; 0x94
   35810:	9307      	str	r3, [sp, #28]
   35812:	2300      	movs	r3, #0
   35814:	9004      	str	r0, [sp, #16]
   35816:	9807      	ldr	r0, [sp, #28]
   35818:	9320      	str	r3, [sp, #128]	; 0x80
   3581a:	9106      	str	r1, [sp, #24]
   3581c:	921a      	str	r2, [sp, #104]	; 0x68
   3581e:	f001 fc77 	bl	37110 <__localeconv_l>
   35822:	0005      	movs	r5, r0
   35824:	6800      	ldr	r0, [r0, #0]
   35826:	f7ff ff82 	bl	3572e <strlen>
   3582a:	2600      	movs	r6, #0
   3582c:	2700      	movs	r7, #0
   3582e:	9b06      	ldr	r3, [sp, #24]
   35830:	9005      	str	r0, [sp, #20]
   35832:	931f      	str	r3, [sp, #124]	; 0x7c
   35834:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35836:	781a      	ldrb	r2, [r3, #0]
   35838:	2a0d      	cmp	r2, #13
   3583a:	d839      	bhi.n	358b0 <_strtod_l+0xa4>
   3583c:	2a09      	cmp	r2, #9
   3583e:	d23d      	bcs.n	358bc <_strtod_l+0xb0>
   35840:	2a00      	cmp	r2, #0
   35842:	d044      	beq.n	358ce <_strtod_l+0xc2>
   35844:	2300      	movs	r3, #0
   35846:	9312      	str	r3, [sp, #72]	; 0x48
   35848:	2200      	movs	r2, #0
   3584a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   3584c:	920c      	str	r2, [sp, #48]	; 0x30
   3584e:	7823      	ldrb	r3, [r4, #0]
   35850:	2b30      	cmp	r3, #48	; 0x30
   35852:	d000      	beq.n	35856 <_strtod_l+0x4a>
   35854:	e07e      	b.n	35954 <_strtod_l+0x148>
   35856:	7863      	ldrb	r3, [r4, #1]
   35858:	2b58      	cmp	r3, #88	; 0x58
   3585a:	d002      	beq.n	35862 <_strtod_l+0x56>
   3585c:	2b78      	cmp	r3, #120	; 0x78
   3585e:	d000      	beq.n	35862 <_strtod_l+0x56>
   35860:	e06e      	b.n	35940 <_strtod_l+0x134>
   35862:	9b07      	ldr	r3, [sp, #28]
   35864:	4ab7      	ldr	r2, [pc, #732]	; (35b44 <_strtod_l+0x338>)
   35866:	9302      	str	r3, [sp, #8]
   35868:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3586a:	a91f      	add	r1, sp, #124	; 0x7c
   3586c:	9301      	str	r3, [sp, #4]
   3586e:	ab20      	add	r3, sp, #128	; 0x80
   35870:	9300      	str	r3, [sp, #0]
   35872:	9804      	ldr	r0, [sp, #16]
   35874:	ab21      	add	r3, sp, #132	; 0x84
   35876:	f001 f955 	bl	36b24 <__gethex>
   3587a:	2507      	movs	r5, #7
   3587c:	9005      	str	r0, [sp, #20]
   3587e:	4005      	ands	r5, r0
   35880:	d005      	beq.n	3588e <_strtod_l+0x82>
   35882:	2d06      	cmp	r5, #6
   35884:	d12f      	bne.n	358e6 <_strtod_l+0xda>
   35886:	2300      	movs	r3, #0
   35888:	3401      	adds	r4, #1
   3588a:	941f      	str	r4, [sp, #124]	; 0x7c
   3588c:	9312      	str	r3, [sp, #72]	; 0x48
   3588e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   35890:	2b00      	cmp	r3, #0
   35892:	d002      	beq.n	3589a <_strtod_l+0x8e>
   35894:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   35896:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   35898:	601a      	str	r2, [r3, #0]
   3589a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3589c:	2b00      	cmp	r3, #0
   3589e:	d01d      	beq.n	358dc <_strtod_l+0xd0>
   358a0:	2380      	movs	r3, #128	; 0x80
   358a2:	0032      	movs	r2, r6
   358a4:	061b      	lsls	r3, r3, #24
   358a6:	18fb      	adds	r3, r7, r3
   358a8:	0010      	movs	r0, r2
   358aa:	0019      	movs	r1, r3
   358ac:	b025      	add	sp, #148	; 0x94
   358ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   358b0:	2a2b      	cmp	r2, #43	; 0x2b
   358b2:	d005      	beq.n	358c0 <_strtod_l+0xb4>
   358b4:	2a2d      	cmp	r2, #45	; 0x2d
   358b6:	d014      	beq.n	358e2 <_strtod_l+0xd6>
   358b8:	2a20      	cmp	r2, #32
   358ba:	d1c3      	bne.n	35844 <_strtod_l+0x38>
   358bc:	3301      	adds	r3, #1
   358be:	e7b8      	b.n	35832 <_strtod_l+0x26>
   358c0:	2200      	movs	r2, #0
   358c2:	9212      	str	r2, [sp, #72]	; 0x48
   358c4:	1c5a      	adds	r2, r3, #1
   358c6:	921f      	str	r2, [sp, #124]	; 0x7c
   358c8:	785b      	ldrb	r3, [r3, #1]
   358ca:	2b00      	cmp	r3, #0
   358cc:	d1bc      	bne.n	35848 <_strtod_l+0x3c>
   358ce:	9b06      	ldr	r3, [sp, #24]
   358d0:	931f      	str	r3, [sp, #124]	; 0x7c
   358d2:	2300      	movs	r3, #0
   358d4:	9312      	str	r3, [sp, #72]	; 0x48
   358d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   358d8:	2b00      	cmp	r3, #0
   358da:	d1db      	bne.n	35894 <_strtod_l+0x88>
   358dc:	0032      	movs	r2, r6
   358de:	003b      	movs	r3, r7
   358e0:	e7e2      	b.n	358a8 <_strtod_l+0x9c>
   358e2:	2201      	movs	r2, #1
   358e4:	e7ed      	b.n	358c2 <_strtod_l+0xb6>
   358e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   358e8:	2a00      	cmp	r2, #0
   358ea:	d007      	beq.n	358fc <_strtod_l+0xf0>
   358ec:	2135      	movs	r1, #53	; 0x35
   358ee:	a822      	add	r0, sp, #136	; 0x88
   358f0:	f002 f84b 	bl	3798a <__copybits>
   358f4:	9920      	ldr	r1, [sp, #128]	; 0x80
   358f6:	9804      	ldr	r0, [sp, #16]
   358f8:	f001 fcc4 	bl	37284 <_Bfree>
   358fc:	1e68      	subs	r0, r5, #1
   358fe:	2804      	cmp	r0, #4
   35900:	d806      	bhi.n	35910 <_strtod_l+0x104>
   35902:	f002 fc89 	bl	38218 <__gnu_thumb1_case_uqi>
   35906:	030c      	.short	0x030c
   35908:	1917      	.short	0x1917
   3590a:	0c          	.byte	0x0c
   3590b:	00          	.byte	0x00
   3590c:	9e22      	ldr	r6, [sp, #136]	; 0x88
   3590e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
   35910:	9b05      	ldr	r3, [sp, #20]
   35912:	071b      	lsls	r3, r3, #28
   35914:	d5bb      	bpl.n	3588e <_strtod_l+0x82>
   35916:	2380      	movs	r3, #128	; 0x80
   35918:	061b      	lsls	r3, r3, #24
   3591a:	431f      	orrs	r7, r3
   3591c:	e7b7      	b.n	3588e <_strtod_l+0x82>
   3591e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   35920:	4a89      	ldr	r2, [pc, #548]	; (35b48 <_strtod_l+0x33c>)
   35922:	498a      	ldr	r1, [pc, #552]	; (35b4c <_strtod_l+0x340>)
   35924:	401a      	ands	r2, r3
   35926:	9b21      	ldr	r3, [sp, #132]	; 0x84
   35928:	9e22      	ldr	r6, [sp, #136]	; 0x88
   3592a:	185b      	adds	r3, r3, r1
   3592c:	051b      	lsls	r3, r3, #20
   3592e:	431a      	orrs	r2, r3
   35930:	0017      	movs	r7, r2
   35932:	e7ed      	b.n	35910 <_strtod_l+0x104>
   35934:	4f86      	ldr	r7, [pc, #536]	; (35b50 <_strtod_l+0x344>)
   35936:	e7eb      	b.n	35910 <_strtod_l+0x104>
   35938:	2601      	movs	r6, #1
   3593a:	4f86      	ldr	r7, [pc, #536]	; (35b54 <_strtod_l+0x348>)
   3593c:	4276      	negs	r6, r6
   3593e:	e7e7      	b.n	35910 <_strtod_l+0x104>
   35940:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35942:	1c5a      	adds	r2, r3, #1
   35944:	921f      	str	r2, [sp, #124]	; 0x7c
   35946:	785b      	ldrb	r3, [r3, #1]
   35948:	2b30      	cmp	r3, #48	; 0x30
   3594a:	d0f9      	beq.n	35940 <_strtod_l+0x134>
   3594c:	2b00      	cmp	r3, #0
   3594e:	d09e      	beq.n	3588e <_strtod_l+0x82>
   35950:	2301      	movs	r3, #1
   35952:	930c      	str	r3, [sp, #48]	; 0x30
   35954:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35956:	220a      	movs	r2, #10
   35958:	9313      	str	r3, [sp, #76]	; 0x4c
   3595a:	2300      	movs	r3, #0
   3595c:	930b      	str	r3, [sp, #44]	; 0x2c
   3595e:	930a      	str	r3, [sp, #40]	; 0x28
   35960:	9308      	str	r3, [sp, #32]
   35962:	981f      	ldr	r0, [sp, #124]	; 0x7c
   35964:	7804      	ldrb	r4, [r0, #0]
   35966:	0023      	movs	r3, r4
   35968:	3b30      	subs	r3, #48	; 0x30
   3596a:	b2d9      	uxtb	r1, r3
   3596c:	2909      	cmp	r1, #9
   3596e:	d926      	bls.n	359be <_strtod_l+0x1b2>
   35970:	9a05      	ldr	r2, [sp, #20]
   35972:	6829      	ldr	r1, [r5, #0]
   35974:	f7ff fee2 	bl	3573c <strncmp>
   35978:	2800      	cmp	r0, #0
   3597a:	d032      	beq.n	359e2 <_strtod_l+0x1d6>
   3597c:	2000      	movs	r0, #0
   3597e:	0023      	movs	r3, r4
   35980:	4684      	mov	ip, r0
   35982:	9a08      	ldr	r2, [sp, #32]
   35984:	9007      	str	r0, [sp, #28]
   35986:	9205      	str	r2, [sp, #20]
   35988:	2220      	movs	r2, #32
   3598a:	0019      	movs	r1, r3
   3598c:	4391      	bics	r1, r2
   3598e:	000a      	movs	r2, r1
   35990:	2100      	movs	r1, #0
   35992:	2a45      	cmp	r2, #69	; 0x45
   35994:	d000      	beq.n	35998 <_strtod_l+0x18c>
   35996:	e0a8      	b.n	35aea <_strtod_l+0x2de>
   35998:	9b05      	ldr	r3, [sp, #20]
   3599a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   3599c:	4303      	orrs	r3, r0
   3599e:	4313      	orrs	r3, r2
   359a0:	428b      	cmp	r3, r1
   359a2:	d094      	beq.n	358ce <_strtod_l+0xc2>
   359a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   359a6:	9306      	str	r3, [sp, #24]
   359a8:	3301      	adds	r3, #1
   359aa:	931f      	str	r3, [sp, #124]	; 0x7c
   359ac:	9b06      	ldr	r3, [sp, #24]
   359ae:	785b      	ldrb	r3, [r3, #1]
   359b0:	2b2b      	cmp	r3, #43	; 0x2b
   359b2:	d072      	beq.n	35a9a <_strtod_l+0x28e>
   359b4:	000c      	movs	r4, r1
   359b6:	2b2d      	cmp	r3, #45	; 0x2d
   359b8:	d175      	bne.n	35aa6 <_strtod_l+0x29a>
   359ba:	2401      	movs	r4, #1
   359bc:	e06e      	b.n	35a9c <_strtod_l+0x290>
   359be:	9908      	ldr	r1, [sp, #32]
   359c0:	2908      	cmp	r1, #8
   359c2:	dc09      	bgt.n	359d8 <_strtod_l+0x1cc>
   359c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   359c6:	4351      	muls	r1, r2
   359c8:	185b      	adds	r3, r3, r1
   359ca:	930a      	str	r3, [sp, #40]	; 0x28
   359cc:	9b08      	ldr	r3, [sp, #32]
   359ce:	3001      	adds	r0, #1
   359d0:	3301      	adds	r3, #1
   359d2:	9308      	str	r3, [sp, #32]
   359d4:	901f      	str	r0, [sp, #124]	; 0x7c
   359d6:	e7c4      	b.n	35962 <_strtod_l+0x156>
   359d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   359da:	4351      	muls	r1, r2
   359dc:	185b      	adds	r3, r3, r1
   359de:	930b      	str	r3, [sp, #44]	; 0x2c
   359e0:	e7f4      	b.n	359cc <_strtod_l+0x1c0>
   359e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   359e4:	9b05      	ldr	r3, [sp, #20]
   359e6:	4694      	mov	ip, r2
   359e8:	9a08      	ldr	r2, [sp, #32]
   359ea:	4463      	add	r3, ip
   359ec:	931f      	str	r3, [sp, #124]	; 0x7c
   359ee:	781b      	ldrb	r3, [r3, #0]
   359f0:	2a00      	cmp	r2, #0
   359f2:	d149      	bne.n	35a88 <_strtod_l+0x27c>
   359f4:	0010      	movs	r0, r2
   359f6:	2b30      	cmp	r3, #48	; 0x30
   359f8:	d028      	beq.n	35a4c <_strtod_l+0x240>
   359fa:	001a      	movs	r2, r3
   359fc:	3a31      	subs	r2, #49	; 0x31
   359fe:	2a08      	cmp	r2, #8
   35a00:	d846      	bhi.n	35a90 <_strtod_l+0x284>
   35a02:	4684      	mov	ip, r0
   35a04:	2000      	movs	r0, #0
   35a06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   35a08:	9005      	str	r0, [sp, #20]
   35a0a:	9213      	str	r2, [sp, #76]	; 0x4c
   35a0c:	3b30      	subs	r3, #48	; 0x30
   35a0e:	1c42      	adds	r2, r0, #1
   35a10:	2b00      	cmp	r3, #0
   35a12:	d00f      	beq.n	35a34 <_strtod_l+0x228>
   35a14:	210a      	movs	r1, #10
   35a16:	4494      	add	ip, r2
   35a18:	9a05      	ldr	r2, [sp, #20]
   35a1a:	1810      	adds	r0, r2, r0
   35a1c:	4282      	cmp	r2, r0
   35a1e:	d11b      	bne.n	35a58 <_strtod_l+0x24c>
   35a20:	1c51      	adds	r1, r2, #1
   35a22:	9105      	str	r1, [sp, #20]
   35a24:	2a08      	cmp	r2, #8
   35a26:	dc25      	bgt.n	35a74 <_strtod_l+0x268>
   35a28:	220a      	movs	r2, #10
   35a2a:	990a      	ldr	r1, [sp, #40]	; 0x28
   35a2c:	434a      	muls	r2, r1
   35a2e:	189b      	adds	r3, r3, r2
   35a30:	2200      	movs	r2, #0
   35a32:	930a      	str	r3, [sp, #40]	; 0x28
   35a34:	0010      	movs	r0, r2
   35a36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35a38:	1c59      	adds	r1, r3, #1
   35a3a:	911f      	str	r1, [sp, #124]	; 0x7c
   35a3c:	785b      	ldrb	r3, [r3, #1]
   35a3e:	001a      	movs	r2, r3
   35a40:	3a30      	subs	r2, #48	; 0x30
   35a42:	2a09      	cmp	r2, #9
   35a44:	d9e2      	bls.n	35a0c <_strtod_l+0x200>
   35a46:	2201      	movs	r2, #1
   35a48:	9207      	str	r2, [sp, #28]
   35a4a:	e79d      	b.n	35988 <_strtod_l+0x17c>
   35a4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35a4e:	3001      	adds	r0, #1
   35a50:	1c5a      	adds	r2, r3, #1
   35a52:	921f      	str	r2, [sp, #124]	; 0x7c
   35a54:	785b      	ldrb	r3, [r3, #1]
   35a56:	e7ce      	b.n	359f6 <_strtod_l+0x1ea>
   35a58:	3201      	adds	r2, #1
   35a5a:	1e54      	subs	r4, r2, #1
   35a5c:	2c08      	cmp	r4, #8
   35a5e:	dc03      	bgt.n	35a68 <_strtod_l+0x25c>
   35a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   35a62:	434c      	muls	r4, r1
   35a64:	940a      	str	r4, [sp, #40]	; 0x28
   35a66:	e7d9      	b.n	35a1c <_strtod_l+0x210>
   35a68:	2a10      	cmp	r2, #16
   35a6a:	dcd7      	bgt.n	35a1c <_strtod_l+0x210>
   35a6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   35a6e:	434c      	muls	r4, r1
   35a70:	940b      	str	r4, [sp, #44]	; 0x2c
   35a72:	e7d3      	b.n	35a1c <_strtod_l+0x210>
   35a74:	9905      	ldr	r1, [sp, #20]
   35a76:	2200      	movs	r2, #0
   35a78:	2910      	cmp	r1, #16
   35a7a:	dcdb      	bgt.n	35a34 <_strtod_l+0x228>
   35a7c:	210a      	movs	r1, #10
   35a7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35a80:	4341      	muls	r1, r0
   35a82:	185b      	adds	r3, r3, r1
   35a84:	930b      	str	r3, [sp, #44]	; 0x2c
   35a86:	e7d5      	b.n	35a34 <_strtod_l+0x228>
   35a88:	9a08      	ldr	r2, [sp, #32]
   35a8a:	4684      	mov	ip, r0
   35a8c:	9205      	str	r2, [sp, #20]
   35a8e:	e7d6      	b.n	35a3e <_strtod_l+0x232>
   35a90:	2200      	movs	r2, #0
   35a92:	4694      	mov	ip, r2
   35a94:	9205      	str	r2, [sp, #20]
   35a96:	3201      	adds	r2, #1
   35a98:	e7d6      	b.n	35a48 <_strtod_l+0x23c>
   35a9a:	000c      	movs	r4, r1
   35a9c:	9b06      	ldr	r3, [sp, #24]
   35a9e:	3302      	adds	r3, #2
   35aa0:	931f      	str	r3, [sp, #124]	; 0x7c
   35aa2:	9b06      	ldr	r3, [sp, #24]
   35aa4:	789b      	ldrb	r3, [r3, #2]
   35aa6:	001a      	movs	r2, r3
   35aa8:	3a30      	subs	r2, #48	; 0x30
   35aaa:	2a09      	cmp	r2, #9
   35aac:	d861      	bhi.n	35b72 <_strtod_l+0x366>
   35aae:	2b30      	cmp	r3, #48	; 0x30
   35ab0:	d042      	beq.n	35b38 <_strtod_l+0x32c>
   35ab2:	001a      	movs	r2, r3
   35ab4:	3a31      	subs	r2, #49	; 0x31
   35ab6:	2100      	movs	r1, #0
   35ab8:	2a08      	cmp	r2, #8
   35aba:	d816      	bhi.n	35aea <_strtod_l+0x2de>
   35abc:	3b30      	subs	r3, #48	; 0x30
   35abe:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   35ac0:	930e      	str	r3, [sp, #56]	; 0x38
   35ac2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35ac4:	1c59      	adds	r1, r3, #1
   35ac6:	911f      	str	r1, [sp, #124]	; 0x7c
   35ac8:	785b      	ldrb	r3, [r3, #1]
   35aca:	001a      	movs	r2, r3
   35acc:	3a30      	subs	r2, #48	; 0x30
   35ace:	2a09      	cmp	r2, #9
   35ad0:	d948      	bls.n	35b64 <_strtod_l+0x358>
   35ad2:	1b4a      	subs	r2, r1, r5
   35ad4:	4d20      	ldr	r5, [pc, #128]	; (35b58 <_strtod_l+0x34c>)
   35ad6:	0029      	movs	r1, r5
   35ad8:	2a08      	cmp	r2, #8
   35ada:	dc03      	bgt.n	35ae4 <_strtod_l+0x2d8>
   35adc:	990e      	ldr	r1, [sp, #56]	; 0x38
   35ade:	42a9      	cmp	r1, r5
   35ae0:	dd00      	ble.n	35ae4 <_strtod_l+0x2d8>
   35ae2:	0029      	movs	r1, r5
   35ae4:	2c00      	cmp	r4, #0
   35ae6:	d000      	beq.n	35aea <_strtod_l+0x2de>
   35ae8:	4249      	negs	r1, r1
   35aea:	9a05      	ldr	r2, [sp, #20]
   35aec:	2a00      	cmp	r2, #0
   35aee:	d163      	bne.n	35bb8 <_strtod_l+0x3ac>
   35af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   35af2:	4310      	orrs	r0, r2
   35af4:	d000      	beq.n	35af8 <_strtod_l+0x2ec>
   35af6:	e6ca      	b.n	3588e <_strtod_l+0x82>
   35af8:	9a07      	ldr	r2, [sp, #28]
   35afa:	2a00      	cmp	r2, #0
   35afc:	d000      	beq.n	35b00 <_strtod_l+0x2f4>
   35afe:	e6e6      	b.n	358ce <_strtod_l+0xc2>
   35b00:	2b4e      	cmp	r3, #78	; 0x4e
   35b02:	d03f      	beq.n	35b84 <_strtod_l+0x378>
   35b04:	dc39      	bgt.n	35b7a <_strtod_l+0x36e>
   35b06:	2b49      	cmp	r3, #73	; 0x49
   35b08:	d000      	beq.n	35b0c <_strtod_l+0x300>
   35b0a:	e6e0      	b.n	358ce <_strtod_l+0xc2>
   35b0c:	4913      	ldr	r1, [pc, #76]	; (35b5c <_strtod_l+0x350>)
   35b0e:	a81f      	add	r0, sp, #124	; 0x7c
   35b10:	f001 fa41 	bl	36f96 <__match>
   35b14:	2800      	cmp	r0, #0
   35b16:	d100      	bne.n	35b1a <_strtod_l+0x30e>
   35b18:	e6d9      	b.n	358ce <_strtod_l+0xc2>
   35b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35b1c:	4910      	ldr	r1, [pc, #64]	; (35b60 <_strtod_l+0x354>)
   35b1e:	3b01      	subs	r3, #1
   35b20:	a81f      	add	r0, sp, #124	; 0x7c
   35b22:	931f      	str	r3, [sp, #124]	; 0x7c
   35b24:	f001 fa37 	bl	36f96 <__match>
   35b28:	2800      	cmp	r0, #0
   35b2a:	d102      	bne.n	35b32 <_strtod_l+0x326>
   35b2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35b2e:	3301      	adds	r3, #1
   35b30:	931f      	str	r3, [sp, #124]	; 0x7c
   35b32:	4f07      	ldr	r7, [pc, #28]	; (35b50 <_strtod_l+0x344>)
   35b34:	2600      	movs	r6, #0
   35b36:	e6aa      	b.n	3588e <_strtod_l+0x82>
   35b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35b3a:	1c5a      	adds	r2, r3, #1
   35b3c:	921f      	str	r2, [sp, #124]	; 0x7c
   35b3e:	785b      	ldrb	r3, [r3, #1]
   35b40:	e7b5      	b.n	35aae <_strtod_l+0x2a2>
   35b42:	46c0      	nop			; (mov r8, r8)
   35b44:	0003c830 	.word	0x0003c830
   35b48:	ffefffff 	.word	0xffefffff
   35b4c:	00000433 	.word	0x00000433
   35b50:	7ff00000 	.word	0x7ff00000
   35b54:	7fffffff 	.word	0x7fffffff
   35b58:	00004e1f 	.word	0x00004e1f
   35b5c:	0003c824 	.word	0x0003c824
   35b60:	0003c827 	.word	0x0003c827
   35b64:	220a      	movs	r2, #10
   35b66:	990e      	ldr	r1, [sp, #56]	; 0x38
   35b68:	434a      	muls	r2, r1
   35b6a:	18d2      	adds	r2, r2, r3
   35b6c:	3a30      	subs	r2, #48	; 0x30
   35b6e:	920e      	str	r2, [sp, #56]	; 0x38
   35b70:	e7a7      	b.n	35ac2 <_strtod_l+0x2b6>
   35b72:	9a06      	ldr	r2, [sp, #24]
   35b74:	2100      	movs	r1, #0
   35b76:	921f      	str	r2, [sp, #124]	; 0x7c
   35b78:	e7b7      	b.n	35aea <_strtod_l+0x2de>
   35b7a:	2b69      	cmp	r3, #105	; 0x69
   35b7c:	d0c6      	beq.n	35b0c <_strtod_l+0x300>
   35b7e:	2b6e      	cmp	r3, #110	; 0x6e
   35b80:	d000      	beq.n	35b84 <_strtod_l+0x378>
   35b82:	e6a4      	b.n	358ce <_strtod_l+0xc2>
   35b84:	498b      	ldr	r1, [pc, #556]	; (35db4 <_strtod_l+0x5a8>)
   35b86:	a81f      	add	r0, sp, #124	; 0x7c
   35b88:	f001 fa05 	bl	36f96 <__match>
   35b8c:	2800      	cmp	r0, #0
   35b8e:	d100      	bne.n	35b92 <_strtod_l+0x386>
   35b90:	e69d      	b.n	358ce <_strtod_l+0xc2>
   35b92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   35b94:	781b      	ldrb	r3, [r3, #0]
   35b96:	2b28      	cmp	r3, #40	; 0x28
   35b98:	d10c      	bne.n	35bb4 <_strtod_l+0x3a8>
   35b9a:	aa22      	add	r2, sp, #136	; 0x88
   35b9c:	4986      	ldr	r1, [pc, #536]	; (35db8 <_strtod_l+0x5ac>)
   35b9e:	a81f      	add	r0, sp, #124	; 0x7c
   35ba0:	f001 fa0d 	bl	36fbe <__hexnan>
   35ba4:	2805      	cmp	r0, #5
   35ba6:	d105      	bne.n	35bb4 <_strtod_l+0x3a8>
   35ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   35baa:	4a84      	ldr	r2, [pc, #528]	; (35dbc <_strtod_l+0x5b0>)
   35bac:	9e22      	ldr	r6, [sp, #136]	; 0x88
   35bae:	431a      	orrs	r2, r3
   35bb0:	0017      	movs	r7, r2
   35bb2:	e66c      	b.n	3588e <_strtod_l+0x82>
   35bb4:	4f82      	ldr	r7, [pc, #520]	; (35dc0 <_strtod_l+0x5b4>)
   35bb6:	e7bd      	b.n	35b34 <_strtod_l+0x328>
   35bb8:	4663      	mov	r3, ip
   35bba:	1acb      	subs	r3, r1, r3
   35bbc:	9307      	str	r3, [sp, #28]
   35bbe:	9b08      	ldr	r3, [sp, #32]
   35bc0:	2b00      	cmp	r3, #0
   35bc2:	d101      	bne.n	35bc8 <_strtod_l+0x3bc>
   35bc4:	9b05      	ldr	r3, [sp, #20]
   35bc6:	9308      	str	r3, [sp, #32]
   35bc8:	9c05      	ldr	r4, [sp, #20]
   35bca:	2c10      	cmp	r4, #16
   35bcc:	dd00      	ble.n	35bd0 <_strtod_l+0x3c4>
   35bce:	2410      	movs	r4, #16
   35bd0:	980a      	ldr	r0, [sp, #40]	; 0x28
   35bd2:	f7ff f98b 	bl	34eec <__aeabi_ui2d>
   35bd6:	0006      	movs	r6, r0
   35bd8:	000f      	movs	r7, r1
   35bda:	2c09      	cmp	r4, #9
   35bdc:	dd15      	ble.n	35c0a <_strtod_l+0x3fe>
   35bde:	0022      	movs	r2, r4
   35be0:	4b78      	ldr	r3, [pc, #480]	; (35dc4 <_strtod_l+0x5b8>)
   35be2:	3a09      	subs	r2, #9
   35be4:	00d2      	lsls	r2, r2, #3
   35be6:	189b      	adds	r3, r3, r2
   35be8:	681a      	ldr	r2, [r3, #0]
   35bea:	685b      	ldr	r3, [r3, #4]
   35bec:	f7fe fbb4 	bl	34358 <__aeabi_dmul>
   35bf0:	0006      	movs	r6, r0
   35bf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35bf4:	000f      	movs	r7, r1
   35bf6:	f7ff f979 	bl	34eec <__aeabi_ui2d>
   35bfa:	0002      	movs	r2, r0
   35bfc:	000b      	movs	r3, r1
   35bfe:	0030      	movs	r0, r6
   35c00:	0039      	movs	r1, r7
   35c02:	f7fd fd65 	bl	336d0 <__aeabi_dadd>
   35c06:	0006      	movs	r6, r0
   35c08:	000f      	movs	r7, r1
   35c0a:	9b05      	ldr	r3, [sp, #20]
   35c0c:	2b0f      	cmp	r3, #15
   35c0e:	dc39      	bgt.n	35c84 <_strtod_l+0x478>
   35c10:	9b07      	ldr	r3, [sp, #28]
   35c12:	2b00      	cmp	r3, #0
   35c14:	d100      	bne.n	35c18 <_strtod_l+0x40c>
   35c16:	e63a      	b.n	3588e <_strtod_l+0x82>
   35c18:	dd26      	ble.n	35c68 <_strtod_l+0x45c>
   35c1a:	2b16      	cmp	r3, #22
   35c1c:	dc0b      	bgt.n	35c36 <_strtod_l+0x42a>
   35c1e:	4969      	ldr	r1, [pc, #420]	; (35dc4 <_strtod_l+0x5b8>)
   35c20:	00db      	lsls	r3, r3, #3
   35c22:	18c9      	adds	r1, r1, r3
   35c24:	0032      	movs	r2, r6
   35c26:	6808      	ldr	r0, [r1, #0]
   35c28:	6849      	ldr	r1, [r1, #4]
   35c2a:	003b      	movs	r3, r7
   35c2c:	f7fe fb94 	bl	34358 <__aeabi_dmul>
   35c30:	0006      	movs	r6, r0
   35c32:	000f      	movs	r7, r1
   35c34:	e62b      	b.n	3588e <_strtod_l+0x82>
   35c36:	2325      	movs	r3, #37	; 0x25
   35c38:	9a05      	ldr	r2, [sp, #20]
   35c3a:	1a9b      	subs	r3, r3, r2
   35c3c:	9a07      	ldr	r2, [sp, #28]
   35c3e:	429a      	cmp	r2, r3
   35c40:	dc20      	bgt.n	35c84 <_strtod_l+0x478>
   35c42:	240f      	movs	r4, #15
   35c44:	9b05      	ldr	r3, [sp, #20]
   35c46:	4d5f      	ldr	r5, [pc, #380]	; (35dc4 <_strtod_l+0x5b8>)
   35c48:	1ae4      	subs	r4, r4, r3
   35c4a:	00e1      	lsls	r1, r4, #3
   35c4c:	1869      	adds	r1, r5, r1
   35c4e:	0032      	movs	r2, r6
   35c50:	6808      	ldr	r0, [r1, #0]
   35c52:	6849      	ldr	r1, [r1, #4]
   35c54:	003b      	movs	r3, r7
   35c56:	f7fe fb7f 	bl	34358 <__aeabi_dmul>
   35c5a:	9b07      	ldr	r3, [sp, #28]
   35c5c:	1b1c      	subs	r4, r3, r4
   35c5e:	00e4      	lsls	r4, r4, #3
   35c60:	192c      	adds	r4, r5, r4
   35c62:	6822      	ldr	r2, [r4, #0]
   35c64:	6863      	ldr	r3, [r4, #4]
   35c66:	e7e1      	b.n	35c2c <_strtod_l+0x420>
   35c68:	9b07      	ldr	r3, [sp, #28]
   35c6a:	3316      	adds	r3, #22
   35c6c:	db0a      	blt.n	35c84 <_strtod_l+0x478>
   35c6e:	9b07      	ldr	r3, [sp, #28]
   35c70:	0030      	movs	r0, r6
   35c72:	00da      	lsls	r2, r3, #3
   35c74:	4b53      	ldr	r3, [pc, #332]	; (35dc4 <_strtod_l+0x5b8>)
   35c76:	0039      	movs	r1, r7
   35c78:	1a9b      	subs	r3, r3, r2
   35c7a:	681a      	ldr	r2, [r3, #0]
   35c7c:	685b      	ldr	r3, [r3, #4]
   35c7e:	f7fe f837 	bl	33cf0 <__aeabi_ddiv>
   35c82:	e7d5      	b.n	35c30 <_strtod_l+0x424>
   35c84:	9b05      	ldr	r3, [sp, #20]
   35c86:	1b1c      	subs	r4, r3, r4
   35c88:	9b07      	ldr	r3, [sp, #28]
   35c8a:	18e4      	adds	r4, r4, r3
   35c8c:	2c00      	cmp	r4, #0
   35c8e:	dd6e      	ble.n	35d6e <_strtod_l+0x562>
   35c90:	230f      	movs	r3, #15
   35c92:	4023      	ands	r3, r4
   35c94:	d00a      	beq.n	35cac <_strtod_l+0x4a0>
   35c96:	494b      	ldr	r1, [pc, #300]	; (35dc4 <_strtod_l+0x5b8>)
   35c98:	00db      	lsls	r3, r3, #3
   35c9a:	18c9      	adds	r1, r1, r3
   35c9c:	0032      	movs	r2, r6
   35c9e:	6808      	ldr	r0, [r1, #0]
   35ca0:	6849      	ldr	r1, [r1, #4]
   35ca2:	003b      	movs	r3, r7
   35ca4:	f7fe fb58 	bl	34358 <__aeabi_dmul>
   35ca8:	0006      	movs	r6, r0
   35caa:	000f      	movs	r7, r1
   35cac:	230f      	movs	r3, #15
   35cae:	439c      	bics	r4, r3
   35cb0:	d048      	beq.n	35d44 <_strtod_l+0x538>
   35cb2:	3326      	adds	r3, #38	; 0x26
   35cb4:	33ff      	adds	r3, #255	; 0xff
   35cb6:	429c      	cmp	r4, r3
   35cb8:	dd21      	ble.n	35cfe <_strtod_l+0x4f2>
   35cba:	2400      	movs	r4, #0
   35cbc:	9405      	str	r4, [sp, #20]
   35cbe:	940a      	str	r4, [sp, #40]	; 0x28
   35cc0:	9407      	str	r4, [sp, #28]
   35cc2:	2322      	movs	r3, #34	; 0x22
   35cc4:	2600      	movs	r6, #0
   35cc6:	9a04      	ldr	r2, [sp, #16]
   35cc8:	4f3c      	ldr	r7, [pc, #240]	; (35dbc <_strtod_l+0x5b0>)
   35cca:	6013      	str	r3, [r2, #0]
   35ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35cce:	42b3      	cmp	r3, r6
   35cd0:	d100      	bne.n	35cd4 <_strtod_l+0x4c8>
   35cd2:	e5dc      	b.n	3588e <_strtod_l+0x82>
   35cd4:	9920      	ldr	r1, [sp, #128]	; 0x80
   35cd6:	9804      	ldr	r0, [sp, #16]
   35cd8:	f001 fad4 	bl	37284 <_Bfree>
   35cdc:	9907      	ldr	r1, [sp, #28]
   35cde:	9804      	ldr	r0, [sp, #16]
   35ce0:	f001 fad0 	bl	37284 <_Bfree>
   35ce4:	9905      	ldr	r1, [sp, #20]
   35ce6:	9804      	ldr	r0, [sp, #16]
   35ce8:	f001 facc 	bl	37284 <_Bfree>
   35cec:	990a      	ldr	r1, [sp, #40]	; 0x28
   35cee:	9804      	ldr	r0, [sp, #16]
   35cf0:	f001 fac8 	bl	37284 <_Bfree>
   35cf4:	0021      	movs	r1, r4
   35cf6:	9804      	ldr	r0, [sp, #16]
   35cf8:	f001 fac4 	bl	37284 <_Bfree>
   35cfc:	e5c7      	b.n	3588e <_strtod_l+0x82>
   35cfe:	2300      	movs	r3, #0
   35d00:	0030      	movs	r0, r6
   35d02:	0039      	movs	r1, r7
   35d04:	001d      	movs	r5, r3
   35d06:	1124      	asrs	r4, r4, #4
   35d08:	2c01      	cmp	r4, #1
   35d0a:	dc1e      	bgt.n	35d4a <_strtod_l+0x53e>
   35d0c:	2b00      	cmp	r3, #0
   35d0e:	d001      	beq.n	35d14 <_strtod_l+0x508>
   35d10:	0006      	movs	r6, r0
   35d12:	000f      	movs	r7, r1
   35d14:	4b2c      	ldr	r3, [pc, #176]	; (35dc8 <_strtod_l+0x5bc>)
   35d16:	00ed      	lsls	r5, r5, #3
   35d18:	18ff      	adds	r7, r7, r3
   35d1a:	4b2c      	ldr	r3, [pc, #176]	; (35dcc <_strtod_l+0x5c0>)
   35d1c:	0032      	movs	r2, r6
   35d1e:	195d      	adds	r5, r3, r5
   35d20:	6828      	ldr	r0, [r5, #0]
   35d22:	6869      	ldr	r1, [r5, #4]
   35d24:	003b      	movs	r3, r7
   35d26:	f7fe fb17 	bl	34358 <__aeabi_dmul>
   35d2a:	4b24      	ldr	r3, [pc, #144]	; (35dbc <_strtod_l+0x5b0>)
   35d2c:	000f      	movs	r7, r1
   35d2e:	400b      	ands	r3, r1
   35d30:	4927      	ldr	r1, [pc, #156]	; (35dd0 <_strtod_l+0x5c4>)
   35d32:	0006      	movs	r6, r0
   35d34:	428b      	cmp	r3, r1
   35d36:	d8c0      	bhi.n	35cba <_strtod_l+0x4ae>
   35d38:	4926      	ldr	r1, [pc, #152]	; (35dd4 <_strtod_l+0x5c8>)
   35d3a:	428b      	cmp	r3, r1
   35d3c:	d913      	bls.n	35d66 <_strtod_l+0x55a>
   35d3e:	2601      	movs	r6, #1
   35d40:	4f25      	ldr	r7, [pc, #148]	; (35dd8 <_strtod_l+0x5cc>)
   35d42:	4276      	negs	r6, r6
   35d44:	2300      	movs	r3, #0
   35d46:	9306      	str	r3, [sp, #24]
   35d48:	e074      	b.n	35e34 <_strtod_l+0x628>
   35d4a:	2201      	movs	r2, #1
   35d4c:	4214      	tst	r4, r2
   35d4e:	d007      	beq.n	35d60 <_strtod_l+0x554>
   35d50:	4a1e      	ldr	r2, [pc, #120]	; (35dcc <_strtod_l+0x5c0>)
   35d52:	00eb      	lsls	r3, r5, #3
   35d54:	189b      	adds	r3, r3, r2
   35d56:	681a      	ldr	r2, [r3, #0]
   35d58:	685b      	ldr	r3, [r3, #4]
   35d5a:	f7fe fafd 	bl	34358 <__aeabi_dmul>
   35d5e:	2301      	movs	r3, #1
   35d60:	3501      	adds	r5, #1
   35d62:	1064      	asrs	r4, r4, #1
   35d64:	e7d0      	b.n	35d08 <_strtod_l+0x4fc>
   35d66:	23d4      	movs	r3, #212	; 0xd4
   35d68:	049b      	lsls	r3, r3, #18
   35d6a:	18ff      	adds	r7, r7, r3
   35d6c:	e7ea      	b.n	35d44 <_strtod_l+0x538>
   35d6e:	2c00      	cmp	r4, #0
   35d70:	d0e8      	beq.n	35d44 <_strtod_l+0x538>
   35d72:	230f      	movs	r3, #15
   35d74:	4264      	negs	r4, r4
   35d76:	4023      	ands	r3, r4
   35d78:	d00a      	beq.n	35d90 <_strtod_l+0x584>
   35d7a:	4a12      	ldr	r2, [pc, #72]	; (35dc4 <_strtod_l+0x5b8>)
   35d7c:	00db      	lsls	r3, r3, #3
   35d7e:	18d3      	adds	r3, r2, r3
   35d80:	0030      	movs	r0, r6
   35d82:	681a      	ldr	r2, [r3, #0]
   35d84:	685b      	ldr	r3, [r3, #4]
   35d86:	0039      	movs	r1, r7
   35d88:	f7fd ffb2 	bl	33cf0 <__aeabi_ddiv>
   35d8c:	0006      	movs	r6, r0
   35d8e:	000f      	movs	r7, r1
   35d90:	1124      	asrs	r4, r4, #4
   35d92:	d0d7      	beq.n	35d44 <_strtod_l+0x538>
   35d94:	2c1f      	cmp	r4, #31
   35d96:	dd21      	ble.n	35ddc <_strtod_l+0x5d0>
   35d98:	2400      	movs	r4, #0
   35d9a:	9405      	str	r4, [sp, #20]
   35d9c:	940a      	str	r4, [sp, #40]	; 0x28
   35d9e:	9407      	str	r4, [sp, #28]
   35da0:	2322      	movs	r3, #34	; 0x22
   35da2:	9a04      	ldr	r2, [sp, #16]
   35da4:	2600      	movs	r6, #0
   35da6:	6013      	str	r3, [r2, #0]
   35da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35daa:	2700      	movs	r7, #0
   35dac:	2b00      	cmp	r3, #0
   35dae:	d191      	bne.n	35cd4 <_strtod_l+0x4c8>
   35db0:	e56d      	b.n	3588e <_strtod_l+0x82>
   35db2:	46c0      	nop			; (mov r8, r8)
   35db4:	0003c82d 	.word	0x0003c82d
   35db8:	0003c844 	.word	0x0003c844
   35dbc:	7ff00000 	.word	0x7ff00000
   35dc0:	fff80000 	.word	0xfff80000
   35dc4:	0003c918 	.word	0x0003c918
   35dc8:	fcb00000 	.word	0xfcb00000
   35dcc:	0003c8f0 	.word	0x0003c8f0
   35dd0:	7ca00000 	.word	0x7ca00000
   35dd4:	7c900000 	.word	0x7c900000
   35dd8:	7fefffff 	.word	0x7fefffff
   35ddc:	2310      	movs	r3, #16
   35dde:	4023      	ands	r3, r4
   35de0:	9306      	str	r3, [sp, #24]
   35de2:	d001      	beq.n	35de8 <_strtod_l+0x5dc>
   35de4:	236a      	movs	r3, #106	; 0x6a
   35de6:	9306      	str	r3, [sp, #24]
   35de8:	0030      	movs	r0, r6
   35dea:	0039      	movs	r1, r7
   35dec:	2300      	movs	r3, #0
   35dee:	4dca      	ldr	r5, [pc, #808]	; (36118 <_strtod_l+0x90c>)
   35df0:	2c00      	cmp	r4, #0
   35df2:	dd00      	ble.n	35df6 <_strtod_l+0x5ea>
   35df4:	e103      	b.n	35ffe <_strtod_l+0x7f2>
   35df6:	2b00      	cmp	r3, #0
   35df8:	d001      	beq.n	35dfe <_strtod_l+0x5f2>
   35dfa:	0006      	movs	r6, r0
   35dfc:	000f      	movs	r7, r1
   35dfe:	9b06      	ldr	r3, [sp, #24]
   35e00:	2b00      	cmp	r3, #0
   35e02:	d00f      	beq.n	35e24 <_strtod_l+0x618>
   35e04:	236b      	movs	r3, #107	; 0x6b
   35e06:	0079      	lsls	r1, r7, #1
   35e08:	0d49      	lsrs	r1, r1, #21
   35e0a:	003a      	movs	r2, r7
   35e0c:	1a5b      	subs	r3, r3, r1
   35e0e:	2b00      	cmp	r3, #0
   35e10:	dd08      	ble.n	35e24 <_strtod_l+0x618>
   35e12:	2b1f      	cmp	r3, #31
   35e14:	dc00      	bgt.n	35e18 <_strtod_l+0x60c>
   35e16:	e104      	b.n	36022 <_strtod_l+0x816>
   35e18:	2600      	movs	r6, #0
   35e1a:	2b34      	cmp	r3, #52	; 0x34
   35e1c:	dc00      	bgt.n	35e20 <_strtod_l+0x614>
   35e1e:	e0f9      	b.n	36014 <_strtod_l+0x808>
   35e20:	27dc      	movs	r7, #220	; 0xdc
   35e22:	04bf      	lsls	r7, r7, #18
   35e24:	2200      	movs	r2, #0
   35e26:	2300      	movs	r3, #0
   35e28:	0030      	movs	r0, r6
   35e2a:	0039      	movs	r1, r7
   35e2c:	f7ff f8f8 	bl	35020 <__aeabi_dcmpeq>
   35e30:	2800      	cmp	r0, #0
   35e32:	d1b1      	bne.n	35d98 <_strtod_l+0x58c>
   35e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35e36:	9a08      	ldr	r2, [sp, #32]
   35e38:	9300      	str	r3, [sp, #0]
   35e3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   35e3c:	9b05      	ldr	r3, [sp, #20]
   35e3e:	9804      	ldr	r0, [sp, #16]
   35e40:	f001 fa75 	bl	3732e <__s2b>
   35e44:	900a      	str	r0, [sp, #40]	; 0x28
   35e46:	2800      	cmp	r0, #0
   35e48:	d100      	bne.n	35e4c <_strtod_l+0x640>
   35e4a:	e736      	b.n	35cba <_strtod_l+0x4ae>
   35e4c:	9b07      	ldr	r3, [sp, #28]
   35e4e:	2400      	movs	r4, #0
   35e50:	17da      	asrs	r2, r3, #31
   35e52:	425b      	negs	r3, r3
   35e54:	401a      	ands	r2, r3
   35e56:	9b07      	ldr	r3, [sp, #28]
   35e58:	9215      	str	r2, [sp, #84]	; 0x54
   35e5a:	43db      	mvns	r3, r3
   35e5c:	9a07      	ldr	r2, [sp, #28]
   35e5e:	17db      	asrs	r3, r3, #31
   35e60:	401a      	ands	r2, r3
   35e62:	9213      	str	r2, [sp, #76]	; 0x4c
   35e64:	9405      	str	r4, [sp, #20]
   35e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35e68:	9804      	ldr	r0, [sp, #16]
   35e6a:	6859      	ldr	r1, [r3, #4]
   35e6c:	f001 f9d2 	bl	37214 <_Balloc>
   35e70:	9007      	str	r0, [sp, #28]
   35e72:	2800      	cmp	r0, #0
   35e74:	d100      	bne.n	35e78 <_strtod_l+0x66c>
   35e76:	e724      	b.n	35cc2 <_strtod_l+0x4b6>
   35e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
   35e7c:	691b      	ldr	r3, [r3, #16]
   35e7e:	310c      	adds	r1, #12
   35e80:	1c9a      	adds	r2, r3, #2
   35e82:	0092      	lsls	r2, r2, #2
   35e84:	300c      	adds	r0, #12
   35e86:	9308      	str	r3, [sp, #32]
   35e88:	f7ff fa5a 	bl	35340 <memcpy>
   35e8c:	ab22      	add	r3, sp, #136	; 0x88
   35e8e:	9301      	str	r3, [sp, #4]
   35e90:	ab21      	add	r3, sp, #132	; 0x84
   35e92:	9300      	str	r3, [sp, #0]
   35e94:	0032      	movs	r2, r6
   35e96:	003b      	movs	r3, r7
   35e98:	9804      	ldr	r0, [sp, #16]
   35e9a:	960e      	str	r6, [sp, #56]	; 0x38
   35e9c:	970f      	str	r7, [sp, #60]	; 0x3c
   35e9e:	f001 fcf9 	bl	37894 <__d2b>
   35ea2:	9020      	str	r0, [sp, #128]	; 0x80
   35ea4:	2800      	cmp	r0, #0
   35ea6:	d100      	bne.n	35eaa <_strtod_l+0x69e>
   35ea8:	e70b      	b.n	35cc2 <_strtod_l+0x4b6>
   35eaa:	2101      	movs	r1, #1
   35eac:	9804      	ldr	r0, [sp, #16]
   35eae:	f001 fac6 	bl	3743e <__i2b>
   35eb2:	9005      	str	r0, [sp, #20]
   35eb4:	2800      	cmp	r0, #0
   35eb6:	d100      	bne.n	35eba <_strtod_l+0x6ae>
   35eb8:	e703      	b.n	35cc2 <_strtod_l+0x4b6>
   35eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
   35ebc:	2b00      	cmp	r3, #0
   35ebe:	da00      	bge.n	35ec2 <_strtod_l+0x6b6>
   35ec0:	e0b4      	b.n	3602c <_strtod_l+0x820>
   35ec2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   35ec4:	18d5      	adds	r5, r2, r3
   35ec6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   35ec8:	4694      	mov	ip, r2
   35eca:	9906      	ldr	r1, [sp, #24]
   35ecc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   35ece:	1a5b      	subs	r3, r3, r1
   35ed0:	2136      	movs	r1, #54	; 0x36
   35ed2:	189b      	adds	r3, r3, r2
   35ed4:	1a8a      	subs	r2, r1, r2
   35ed6:	4991      	ldr	r1, [pc, #580]	; (3611c <_strtod_l+0x910>)
   35ed8:	3b01      	subs	r3, #1
   35eda:	2001      	movs	r0, #1
   35edc:	428b      	cmp	r3, r1
   35ede:	db00      	blt.n	35ee2 <_strtod_l+0x6d6>
   35ee0:	e0b0      	b.n	36044 <_strtod_l+0x838>
   35ee2:	1ac9      	subs	r1, r1, r3
   35ee4:	1a52      	subs	r2, r2, r1
   35ee6:	291f      	cmp	r1, #31
   35ee8:	dd00      	ble.n	35eec <_strtod_l+0x6e0>
   35eea:	e0a4      	b.n	36036 <_strtod_l+0x82a>
   35eec:	4088      	lsls	r0, r1
   35eee:	2300      	movs	r3, #0
   35ef0:	9014      	str	r0, [sp, #80]	; 0x50
   35ef2:	930c      	str	r3, [sp, #48]	; 0x30
   35ef4:	18ab      	adds	r3, r5, r2
   35ef6:	9308      	str	r3, [sp, #32]
   35ef8:	0013      	movs	r3, r2
   35efa:	9a06      	ldr	r2, [sp, #24]
   35efc:	4463      	add	r3, ip
   35efe:	18d3      	adds	r3, r2, r3
   35f00:	9a08      	ldr	r2, [sp, #32]
   35f02:	930b      	str	r3, [sp, #44]	; 0x2c
   35f04:	002b      	movs	r3, r5
   35f06:	4295      	cmp	r5, r2
   35f08:	dd00      	ble.n	35f0c <_strtod_l+0x700>
   35f0a:	0013      	movs	r3, r2
   35f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   35f0e:	4293      	cmp	r3, r2
   35f10:	dd00      	ble.n	35f14 <_strtod_l+0x708>
   35f12:	0013      	movs	r3, r2
   35f14:	2b00      	cmp	r3, #0
   35f16:	dd06      	ble.n	35f26 <_strtod_l+0x71a>
   35f18:	9a08      	ldr	r2, [sp, #32]
   35f1a:	1aed      	subs	r5, r5, r3
   35f1c:	1ad2      	subs	r2, r2, r3
   35f1e:	9208      	str	r2, [sp, #32]
   35f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   35f22:	1ad2      	subs	r2, r2, r3
   35f24:	920b      	str	r2, [sp, #44]	; 0x2c
   35f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   35f28:	2b00      	cmp	r3, #0
   35f2a:	d017      	beq.n	35f5c <_strtod_l+0x750>
   35f2c:	001a      	movs	r2, r3
   35f2e:	9905      	ldr	r1, [sp, #20]
   35f30:	9804      	ldr	r0, [sp, #16]
   35f32:	f001 fb1d 	bl	37570 <__pow5mult>
   35f36:	9005      	str	r0, [sp, #20]
   35f38:	2800      	cmp	r0, #0
   35f3a:	d100      	bne.n	35f3e <_strtod_l+0x732>
   35f3c:	e6c1      	b.n	35cc2 <_strtod_l+0x4b6>
   35f3e:	0001      	movs	r1, r0
   35f40:	9a20      	ldr	r2, [sp, #128]	; 0x80
   35f42:	9804      	ldr	r0, [sp, #16]
   35f44:	f001 fa84 	bl	37450 <__multiply>
   35f48:	901b      	str	r0, [sp, #108]	; 0x6c
   35f4a:	2800      	cmp	r0, #0
   35f4c:	d100      	bne.n	35f50 <_strtod_l+0x744>
   35f4e:	e6b8      	b.n	35cc2 <_strtod_l+0x4b6>
   35f50:	9920      	ldr	r1, [sp, #128]	; 0x80
   35f52:	9804      	ldr	r0, [sp, #16]
   35f54:	f001 f996 	bl	37284 <_Bfree>
   35f58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   35f5a:	9320      	str	r3, [sp, #128]	; 0x80
   35f5c:	9b08      	ldr	r3, [sp, #32]
   35f5e:	2b00      	cmp	r3, #0
   35f60:	dc73      	bgt.n	3604a <_strtod_l+0x83e>
   35f62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   35f64:	2b00      	cmp	r3, #0
   35f66:	d179      	bne.n	3605c <_strtod_l+0x850>
   35f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35f6a:	2b00      	cmp	r3, #0
   35f6c:	dd08      	ble.n	35f80 <_strtod_l+0x774>
   35f6e:	001a      	movs	r2, r3
   35f70:	9907      	ldr	r1, [sp, #28]
   35f72:	9804      	ldr	r0, [sp, #16]
   35f74:	f001 fb4e 	bl	37614 <__lshift>
   35f78:	9007      	str	r0, [sp, #28]
   35f7a:	2800      	cmp	r0, #0
   35f7c:	d100      	bne.n	35f80 <_strtod_l+0x774>
   35f7e:	e6a0      	b.n	35cc2 <_strtod_l+0x4b6>
   35f80:	2d00      	cmp	r5, #0
   35f82:	dd08      	ble.n	35f96 <_strtod_l+0x78a>
   35f84:	002a      	movs	r2, r5
   35f86:	9905      	ldr	r1, [sp, #20]
   35f88:	9804      	ldr	r0, [sp, #16]
   35f8a:	f001 fb43 	bl	37614 <__lshift>
   35f8e:	9005      	str	r0, [sp, #20]
   35f90:	2800      	cmp	r0, #0
   35f92:	d100      	bne.n	35f96 <_strtod_l+0x78a>
   35f94:	e695      	b.n	35cc2 <_strtod_l+0x4b6>
   35f96:	9a07      	ldr	r2, [sp, #28]
   35f98:	9920      	ldr	r1, [sp, #128]	; 0x80
   35f9a:	9804      	ldr	r0, [sp, #16]
   35f9c:	f001 fba4 	bl	376e8 <__mdiff>
   35fa0:	1e04      	subs	r4, r0, #0
   35fa2:	d100      	bne.n	35fa6 <_strtod_l+0x79a>
   35fa4:	e68d      	b.n	35cc2 <_strtod_l+0x4b6>
   35fa6:	2500      	movs	r5, #0
   35fa8:	68c3      	ldr	r3, [r0, #12]
   35faa:	9905      	ldr	r1, [sp, #20]
   35fac:	60c5      	str	r5, [r0, #12]
   35fae:	930b      	str	r3, [sp, #44]	; 0x2c
   35fb0:	f001 fb81 	bl	376b6 <__mcmp>
   35fb4:	42a8      	cmp	r0, r5
   35fb6:	da5b      	bge.n	36070 <_strtod_l+0x864>
   35fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35fba:	42ab      	cmp	r3, r5
   35fbc:	d11b      	bne.n	35ff6 <_strtod_l+0x7ea>
   35fbe:	42ae      	cmp	r6, r5
   35fc0:	d119      	bne.n	35ff6 <_strtod_l+0x7ea>
   35fc2:	033b      	lsls	r3, r7, #12
   35fc4:	42ab      	cmp	r3, r5
   35fc6:	d116      	bne.n	35ff6 <_strtod_l+0x7ea>
   35fc8:	22d6      	movs	r2, #214	; 0xd6
   35fca:	4b55      	ldr	r3, [pc, #340]	; (36120 <_strtod_l+0x914>)
   35fcc:	04d2      	lsls	r2, r2, #19
   35fce:	403b      	ands	r3, r7
   35fd0:	4293      	cmp	r3, r2
   35fd2:	d910      	bls.n	35ff6 <_strtod_l+0x7ea>
   35fd4:	6963      	ldr	r3, [r4, #20]
   35fd6:	42ab      	cmp	r3, r5
   35fd8:	d102      	bne.n	35fe0 <_strtod_l+0x7d4>
   35fda:	6923      	ldr	r3, [r4, #16]
   35fdc:	2b01      	cmp	r3, #1
   35fde:	dd0a      	ble.n	35ff6 <_strtod_l+0x7ea>
   35fe0:	0021      	movs	r1, r4
   35fe2:	2201      	movs	r2, #1
   35fe4:	9804      	ldr	r0, [sp, #16]
   35fe6:	f001 fb15 	bl	37614 <__lshift>
   35fea:	9905      	ldr	r1, [sp, #20]
   35fec:	0004      	movs	r4, r0
   35fee:	f001 fb62 	bl	376b6 <__mcmp>
   35ff2:	2800      	cmp	r0, #0
   35ff4:	dc6c      	bgt.n	360d0 <_strtod_l+0x8c4>
   35ff6:	9b06      	ldr	r3, [sp, #24]
   35ff8:	2b00      	cmp	r3, #0
   35ffa:	d178      	bne.n	360ee <_strtod_l+0x8e2>
   35ffc:	e66a      	b.n	35cd4 <_strtod_l+0x4c8>
   35ffe:	2201      	movs	r2, #1
   36000:	4214      	tst	r4, r2
   36002:	d004      	beq.n	3600e <_strtod_l+0x802>
   36004:	682a      	ldr	r2, [r5, #0]
   36006:	686b      	ldr	r3, [r5, #4]
   36008:	f7fe f9a6 	bl	34358 <__aeabi_dmul>
   3600c:	2301      	movs	r3, #1
   3600e:	1064      	asrs	r4, r4, #1
   36010:	3508      	adds	r5, #8
   36012:	e6ed      	b.n	35df0 <_strtod_l+0x5e4>
   36014:	2101      	movs	r1, #1
   36016:	3b20      	subs	r3, #32
   36018:	4249      	negs	r1, r1
   3601a:	4099      	lsls	r1, r3
   3601c:	400a      	ands	r2, r1
   3601e:	0017      	movs	r7, r2
   36020:	e700      	b.n	35e24 <_strtod_l+0x618>
   36022:	2201      	movs	r2, #1
   36024:	4252      	negs	r2, r2
   36026:	409a      	lsls	r2, r3
   36028:	4016      	ands	r6, r2
   3602a:	e6fb      	b.n	35e24 <_strtod_l+0x618>
   3602c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3602e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   36030:	1ad2      	subs	r2, r2, r3
   36032:	4694      	mov	ip, r2
   36034:	e749      	b.n	35eca <_strtod_l+0x6be>
   36036:	493b      	ldr	r1, [pc, #236]	; (36124 <_strtod_l+0x918>)
   36038:	1acb      	subs	r3, r1, r3
   3603a:	0001      	movs	r1, r0
   3603c:	4099      	lsls	r1, r3
   3603e:	910c      	str	r1, [sp, #48]	; 0x30
   36040:	9014      	str	r0, [sp, #80]	; 0x50
   36042:	e757      	b.n	35ef4 <_strtod_l+0x6e8>
   36044:	2300      	movs	r3, #0
   36046:	930c      	str	r3, [sp, #48]	; 0x30
   36048:	e7fa      	b.n	36040 <_strtod_l+0x834>
   3604a:	9a08      	ldr	r2, [sp, #32]
   3604c:	9920      	ldr	r1, [sp, #128]	; 0x80
   3604e:	9804      	ldr	r0, [sp, #16]
   36050:	f001 fae0 	bl	37614 <__lshift>
   36054:	9020      	str	r0, [sp, #128]	; 0x80
   36056:	2800      	cmp	r0, #0
   36058:	d183      	bne.n	35f62 <_strtod_l+0x756>
   3605a:	e632      	b.n	35cc2 <_strtod_l+0x4b6>
   3605c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3605e:	9907      	ldr	r1, [sp, #28]
   36060:	9804      	ldr	r0, [sp, #16]
   36062:	f001 fa85 	bl	37570 <__pow5mult>
   36066:	9007      	str	r0, [sp, #28]
   36068:	2800      	cmp	r0, #0
   3606a:	d000      	beq.n	3606e <_strtod_l+0x862>
   3606c:	e77c      	b.n	35f68 <_strtod_l+0x75c>
   3606e:	e628      	b.n	35cc2 <_strtod_l+0x4b6>
   36070:	2800      	cmp	r0, #0
   36072:	d000      	beq.n	36076 <_strtod_l+0x86a>
   36074:	e095      	b.n	361a2 <_strtod_l+0x996>
   36076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   36078:	033b      	lsls	r3, r7, #12
   3607a:	2a00      	cmp	r2, #0
   3607c:	d024      	beq.n	360c8 <_strtod_l+0x8bc>
   3607e:	492a      	ldr	r1, [pc, #168]	; (36128 <_strtod_l+0x91c>)
   36080:	003a      	movs	r2, r7
   36082:	0b1b      	lsrs	r3, r3, #12
   36084:	428b      	cmp	r3, r1
   36086:	d15e      	bne.n	36146 <_strtod_l+0x93a>
   36088:	9b06      	ldr	r3, [sp, #24]
   3608a:	3801      	subs	r0, #1
   3608c:	46b4      	mov	ip, r6
   3608e:	0001      	movs	r1, r0
   36090:	2b00      	cmp	r3, #0
   36092:	d00a      	beq.n	360aa <_strtod_l+0x89e>
   36094:	25d4      	movs	r5, #212	; 0xd4
   36096:	4b22      	ldr	r3, [pc, #136]	; (36120 <_strtod_l+0x914>)
   36098:	04ed      	lsls	r5, r5, #19
   3609a:	403b      	ands	r3, r7
   3609c:	42ab      	cmp	r3, r5
   3609e:	d804      	bhi.n	360aa <_strtod_l+0x89e>
   360a0:	316c      	adds	r1, #108	; 0x6c
   360a2:	0d1b      	lsrs	r3, r3, #20
   360a4:	1acb      	subs	r3, r1, r3
   360a6:	0001      	movs	r1, r0
   360a8:	4099      	lsls	r1, r3
   360aa:	4561      	cmp	r1, ip
   360ac:	d14b      	bne.n	36146 <_strtod_l+0x93a>
   360ae:	4b1f      	ldr	r3, [pc, #124]	; (3612c <_strtod_l+0x920>)
   360b0:	429a      	cmp	r2, r3
   360b2:	d102      	bne.n	360ba <_strtod_l+0x8ae>
   360b4:	1c4b      	adds	r3, r1, #1
   360b6:	d100      	bne.n	360ba <_strtod_l+0x8ae>
   360b8:	e603      	b.n	35cc2 <_strtod_l+0x4b6>
   360ba:	4b19      	ldr	r3, [pc, #100]	; (36120 <_strtod_l+0x914>)
   360bc:	2600      	movs	r6, #0
   360be:	401a      	ands	r2, r3
   360c0:	2380      	movs	r3, #128	; 0x80
   360c2:	035b      	lsls	r3, r3, #13
   360c4:	18d7      	adds	r7, r2, r3
   360c6:	e796      	b.n	35ff6 <_strtod_l+0x7ea>
   360c8:	2b00      	cmp	r3, #0
   360ca:	d13c      	bne.n	36146 <_strtod_l+0x93a>
   360cc:	2e00      	cmp	r6, #0
   360ce:	d13a      	bne.n	36146 <_strtod_l+0x93a>
   360d0:	9a06      	ldr	r2, [sp, #24]
   360d2:	4b13      	ldr	r3, [pc, #76]	; (36120 <_strtod_l+0x914>)
   360d4:	2a00      	cmp	r2, #0
   360d6:	d02d      	beq.n	36134 <_strtod_l+0x928>
   360d8:	001a      	movs	r2, r3
   360da:	21d6      	movs	r1, #214	; 0xd6
   360dc:	403a      	ands	r2, r7
   360de:	04c9      	lsls	r1, r1, #19
   360e0:	428a      	cmp	r2, r1
   360e2:	dc27      	bgt.n	36134 <_strtod_l+0x928>
   360e4:	23dc      	movs	r3, #220	; 0xdc
   360e6:	049b      	lsls	r3, r3, #18
   360e8:	429a      	cmp	r2, r3
   360ea:	dc00      	bgt.n	360ee <_strtod_l+0x8e2>
   360ec:	e658      	b.n	35da0 <_strtod_l+0x594>
   360ee:	4b10      	ldr	r3, [pc, #64]	; (36130 <_strtod_l+0x924>)
   360f0:	0030      	movs	r0, r6
   360f2:	9311      	str	r3, [sp, #68]	; 0x44
   360f4:	2300      	movs	r3, #0
   360f6:	9310      	str	r3, [sp, #64]	; 0x40
   360f8:	0039      	movs	r1, r7
   360fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   360fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   360fe:	f7fe f92b 	bl	34358 <__aeabi_dmul>
   36102:	0006      	movs	r6, r0
   36104:	1e0f      	subs	r7, r1, #0
   36106:	d000      	beq.n	3610a <_strtod_l+0x8fe>
   36108:	e5e4      	b.n	35cd4 <_strtod_l+0x4c8>
   3610a:	2800      	cmp	r0, #0
   3610c:	d000      	beq.n	36110 <_strtod_l+0x904>
   3610e:	e5e1      	b.n	35cd4 <_strtod_l+0x4c8>
   36110:	2322      	movs	r3, #34	; 0x22
   36112:	9a04      	ldr	r2, [sp, #16]
   36114:	6013      	str	r3, [r2, #0]
   36116:	e5dd      	b.n	35cd4 <_strtod_l+0x4c8>
   36118:	0003c858 	.word	0x0003c858
   3611c:	fffffc02 	.word	0xfffffc02
   36120:	7ff00000 	.word	0x7ff00000
   36124:	fffffbe2 	.word	0xfffffbe2
   36128:	000fffff 	.word	0x000fffff
   3612c:	7fefffff 	.word	0x7fefffff
   36130:	39500000 	.word	0x39500000
   36134:	2601      	movs	r6, #1
   36136:	4aa9      	ldr	r2, [pc, #676]	; (363dc <_strtod_l+0xbd0>)
   36138:	403b      	ands	r3, r7
   3613a:	189b      	adds	r3, r3, r2
   3613c:	4aa8      	ldr	r2, [pc, #672]	; (363e0 <_strtod_l+0xbd4>)
   3613e:	4276      	negs	r6, r6
   36140:	431a      	orrs	r2, r3
   36142:	0017      	movs	r7, r2
   36144:	e757      	b.n	35ff6 <_strtod_l+0x7ea>
   36146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   36148:	2b00      	cmp	r3, #0
   3614a:	d013      	beq.n	36174 <_strtod_l+0x968>
   3614c:	423b      	tst	r3, r7
   3614e:	d100      	bne.n	36152 <_strtod_l+0x946>
   36150:	e751      	b.n	35ff6 <_strtod_l+0x7ea>
   36152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   36154:	9a06      	ldr	r2, [sp, #24]
   36156:	0030      	movs	r0, r6
   36158:	0039      	movs	r1, r7
   3615a:	2b00      	cmp	r3, #0
   3615c:	d00f      	beq.n	3617e <_strtod_l+0x972>
   3615e:	f7ff fb3d 	bl	357dc <sulp>
   36162:	0002      	movs	r2, r0
   36164:	000b      	movs	r3, r1
   36166:	980e      	ldr	r0, [sp, #56]	; 0x38
   36168:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3616a:	f7fd fab1 	bl	336d0 <__aeabi_dadd>
   3616e:	0006      	movs	r6, r0
   36170:	000f      	movs	r7, r1
   36172:	e740      	b.n	35ff6 <_strtod_l+0x7ea>
   36174:	9b14      	ldr	r3, [sp, #80]	; 0x50
   36176:	4233      	tst	r3, r6
   36178:	d100      	bne.n	3617c <_strtod_l+0x970>
   3617a:	e73c      	b.n	35ff6 <_strtod_l+0x7ea>
   3617c:	e7e9      	b.n	36152 <_strtod_l+0x946>
   3617e:	f7ff fb2d 	bl	357dc <sulp>
   36182:	0002      	movs	r2, r0
   36184:	000b      	movs	r3, r1
   36186:	980e      	ldr	r0, [sp, #56]	; 0x38
   36188:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3618a:	f7fe fb65 	bl	34858 <__aeabi_dsub>
   3618e:	2200      	movs	r2, #0
   36190:	2300      	movs	r3, #0
   36192:	0006      	movs	r6, r0
   36194:	000f      	movs	r7, r1
   36196:	f7fe ff43 	bl	35020 <__aeabi_dcmpeq>
   3619a:	2800      	cmp	r0, #0
   3619c:	d000      	beq.n	361a0 <_strtod_l+0x994>
   3619e:	e5ff      	b.n	35da0 <_strtod_l+0x594>
   361a0:	e729      	b.n	35ff6 <_strtod_l+0x7ea>
   361a2:	9905      	ldr	r1, [sp, #20]
   361a4:	0020      	movs	r0, r4
   361a6:	f001 fbc9 	bl	3793c <__ratio>
   361aa:	2380      	movs	r3, #128	; 0x80
   361ac:	2200      	movs	r2, #0
   361ae:	05db      	lsls	r3, r3, #23
   361b0:	9008      	str	r0, [sp, #32]
   361b2:	9109      	str	r1, [sp, #36]	; 0x24
   361b4:	f7fe ff44 	bl	35040 <__aeabi_dcmple>
   361b8:	2800      	cmp	r0, #0
   361ba:	d075      	beq.n	362a8 <_strtod_l+0xa9c>
   361bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   361be:	2b00      	cmp	r3, #0
   361c0:	d043      	beq.n	3624a <_strtod_l+0xa3e>
   361c2:	2200      	movs	r2, #0
   361c4:	4b87      	ldr	r3, [pc, #540]	; (363e4 <_strtod_l+0xbd8>)
   361c6:	920c      	str	r2, [sp, #48]	; 0x30
   361c8:	930d      	str	r3, [sp, #52]	; 0x34
   361ca:	4b86      	ldr	r3, [pc, #536]	; (363e4 <_strtod_l+0xbd8>)
   361cc:	9308      	str	r3, [sp, #32]
   361ce:	4b86      	ldr	r3, [pc, #536]	; (363e8 <_strtod_l+0xbdc>)
   361d0:	403b      	ands	r3, r7
   361d2:	9314      	str	r3, [sp, #80]	; 0x50
   361d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   361d6:	4b85      	ldr	r3, [pc, #532]	; (363ec <_strtod_l+0xbe0>)
   361d8:	429a      	cmp	r2, r3
   361da:	d000      	beq.n	361de <_strtod_l+0x9d2>
   361dc:	e0b1      	b.n	36342 <_strtod_l+0xb36>
   361de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   361e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   361e2:	9210      	str	r2, [sp, #64]	; 0x40
   361e4:	9311      	str	r3, [sp, #68]	; 0x44
   361e6:	4b82      	ldr	r3, [pc, #520]	; (363f0 <_strtod_l+0xbe4>)
   361e8:	0030      	movs	r0, r6
   361ea:	18ff      	adds	r7, r7, r3
   361ec:	0039      	movs	r1, r7
   361ee:	f001 fadf 	bl	377b0 <__ulp>
   361f2:	0002      	movs	r2, r0
   361f4:	000b      	movs	r3, r1
   361f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   361f8:	990d      	ldr	r1, [sp, #52]	; 0x34
   361fa:	f7fe f8ad 	bl	34358 <__aeabi_dmul>
   361fe:	0032      	movs	r2, r6
   36200:	003b      	movs	r3, r7
   36202:	f7fd fa65 	bl	336d0 <__aeabi_dadd>
   36206:	4a78      	ldr	r2, [pc, #480]	; (363e8 <_strtod_l+0xbdc>)
   36208:	4b7a      	ldr	r3, [pc, #488]	; (363f4 <_strtod_l+0xbe8>)
   3620a:	0006      	movs	r6, r0
   3620c:	400a      	ands	r2, r1
   3620e:	429a      	cmp	r2, r3
   36210:	d962      	bls.n	362d8 <_strtod_l+0xacc>
   36212:	4b79      	ldr	r3, [pc, #484]	; (363f8 <_strtod_l+0xbec>)
   36214:	9a11      	ldr	r2, [sp, #68]	; 0x44
   36216:	429a      	cmp	r2, r3
   36218:	d103      	bne.n	36222 <_strtod_l+0xa16>
   3621a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3621c:	3301      	adds	r3, #1
   3621e:	d100      	bne.n	36222 <_strtod_l+0xa16>
   36220:	e54f      	b.n	35cc2 <_strtod_l+0x4b6>
   36222:	2601      	movs	r6, #1
   36224:	4f74      	ldr	r7, [pc, #464]	; (363f8 <_strtod_l+0xbec>)
   36226:	4276      	negs	r6, r6
   36228:	9920      	ldr	r1, [sp, #128]	; 0x80
   3622a:	9804      	ldr	r0, [sp, #16]
   3622c:	f001 f82a 	bl	37284 <_Bfree>
   36230:	9907      	ldr	r1, [sp, #28]
   36232:	9804      	ldr	r0, [sp, #16]
   36234:	f001 f826 	bl	37284 <_Bfree>
   36238:	9905      	ldr	r1, [sp, #20]
   3623a:	9804      	ldr	r0, [sp, #16]
   3623c:	f001 f822 	bl	37284 <_Bfree>
   36240:	0021      	movs	r1, r4
   36242:	9804      	ldr	r0, [sp, #16]
   36244:	f001 f81e 	bl	37284 <_Bfree>
   36248:	e60d      	b.n	35e66 <_strtod_l+0x65a>
   3624a:	2e00      	cmp	r6, #0
   3624c:	d11d      	bne.n	3628a <_strtod_l+0xa7e>
   3624e:	033b      	lsls	r3, r7, #12
   36250:	d120      	bne.n	36294 <_strtod_l+0xa88>
   36252:	9808      	ldr	r0, [sp, #32]
   36254:	9909      	ldr	r1, [sp, #36]	; 0x24
   36256:	2200      	movs	r2, #0
   36258:	4b62      	ldr	r3, [pc, #392]	; (363e4 <_strtod_l+0xbd8>)
   3625a:	f7fe fee7 	bl	3502c <__aeabi_dcmplt>
   3625e:	2800      	cmp	r0, #0
   36260:	d11e      	bne.n	362a0 <_strtod_l+0xa94>
   36262:	9808      	ldr	r0, [sp, #32]
   36264:	9909      	ldr	r1, [sp, #36]	; 0x24
   36266:	2200      	movs	r2, #0
   36268:	4b64      	ldr	r3, [pc, #400]	; (363fc <_strtod_l+0xbf0>)
   3626a:	f7fe f875 	bl	34358 <__aeabi_dmul>
   3626e:	0005      	movs	r5, r0
   36270:	9108      	str	r1, [sp, #32]
   36272:	2280      	movs	r2, #128	; 0x80
   36274:	0612      	lsls	r2, r2, #24
   36276:	4694      	mov	ip, r2
   36278:	9b08      	ldr	r3, [sp, #32]
   3627a:	951c      	str	r5, [sp, #112]	; 0x70
   3627c:	4463      	add	r3, ip
   3627e:	931d      	str	r3, [sp, #116]	; 0x74
   36280:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   36282:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   36284:	920c      	str	r2, [sp, #48]	; 0x30
   36286:	930d      	str	r3, [sp, #52]	; 0x34
   36288:	e7a1      	b.n	361ce <_strtod_l+0x9c2>
   3628a:	2e01      	cmp	r6, #1
   3628c:	d102      	bne.n	36294 <_strtod_l+0xa88>
   3628e:	2f00      	cmp	r7, #0
   36290:	d100      	bne.n	36294 <_strtod_l+0xa88>
   36292:	e585      	b.n	35da0 <_strtod_l+0x594>
   36294:	2200      	movs	r2, #0
   36296:	4b5a      	ldr	r3, [pc, #360]	; (36400 <_strtod_l+0xbf4>)
   36298:	2500      	movs	r5, #0
   3629a:	920c      	str	r2, [sp, #48]	; 0x30
   3629c:	930d      	str	r3, [sp, #52]	; 0x34
   3629e:	e794      	b.n	361ca <_strtod_l+0x9be>
   362a0:	4b56      	ldr	r3, [pc, #344]	; (363fc <_strtod_l+0xbf0>)
   362a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   362a4:	9308      	str	r3, [sp, #32]
   362a6:	e7e4      	b.n	36272 <_strtod_l+0xa66>
   362a8:	4b54      	ldr	r3, [pc, #336]	; (363fc <_strtod_l+0xbf0>)
   362aa:	9808      	ldr	r0, [sp, #32]
   362ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   362ae:	2200      	movs	r2, #0
   362b0:	f7fe f852 	bl	34358 <__aeabi_dmul>
   362b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   362b6:	0005      	movs	r5, r0
   362b8:	9108      	str	r1, [sp, #32]
   362ba:	2b00      	cmp	r3, #0
   362bc:	d107      	bne.n	362ce <_strtod_l+0xac2>
   362be:	2380      	movs	r3, #128	; 0x80
   362c0:	061b      	lsls	r3, r3, #24
   362c2:	18cb      	adds	r3, r1, r3
   362c4:	9016      	str	r0, [sp, #88]	; 0x58
   362c6:	9317      	str	r3, [sp, #92]	; 0x5c
   362c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   362ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   362cc:	e7da      	b.n	36284 <_strtod_l+0xa78>
   362ce:	0002      	movs	r2, r0
   362d0:	9b08      	ldr	r3, [sp, #32]
   362d2:	9216      	str	r2, [sp, #88]	; 0x58
   362d4:	9317      	str	r3, [sp, #92]	; 0x5c
   362d6:	e7f7      	b.n	362c8 <_strtod_l+0xabc>
   362d8:	23d4      	movs	r3, #212	; 0xd4
   362da:	049b      	lsls	r3, r3, #18
   362dc:	18cf      	adds	r7, r1, r3
   362de:	9b06      	ldr	r3, [sp, #24]
   362e0:	2b00      	cmp	r3, #0
   362e2:	d1a1      	bne.n	36228 <_strtod_l+0xa1c>
   362e4:	4b40      	ldr	r3, [pc, #256]	; (363e8 <_strtod_l+0xbdc>)
   362e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   362e8:	970c      	str	r7, [sp, #48]	; 0x30
   362ea:	403b      	ands	r3, r7
   362ec:	429a      	cmp	r2, r3
   362ee:	d19b      	bne.n	36228 <_strtod_l+0xa1c>
   362f0:	9908      	ldr	r1, [sp, #32]
   362f2:	0028      	movs	r0, r5
   362f4:	f7fe fdc6 	bl	34e84 <__aeabi_d2iz>
   362f8:	f001 ff98 	bl	3822c <__aeabi_i2d>
   362fc:	000b      	movs	r3, r1
   362fe:	0002      	movs	r2, r0
   36300:	9908      	ldr	r1, [sp, #32]
   36302:	0028      	movs	r0, r5
   36304:	f7fe faa8 	bl	34858 <__aeabi_dsub>
   36308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3630a:	9008      	str	r0, [sp, #32]
   3630c:	9109      	str	r1, [sp, #36]	; 0x24
   3630e:	2b00      	cmp	r3, #0
   36310:	d104      	bne.n	3631c <_strtod_l+0xb10>
   36312:	2e00      	cmp	r6, #0
   36314:	d102      	bne.n	3631c <_strtod_l+0xb10>
   36316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   36318:	031b      	lsls	r3, r3, #12
   3631a:	d058      	beq.n	363ce <_strtod_l+0xbc2>
   3631c:	9808      	ldr	r0, [sp, #32]
   3631e:	9909      	ldr	r1, [sp, #36]	; 0x24
   36320:	4a38      	ldr	r2, [pc, #224]	; (36404 <_strtod_l+0xbf8>)
   36322:	4b39      	ldr	r3, [pc, #228]	; (36408 <_strtod_l+0xbfc>)
   36324:	f7fe fe82 	bl	3502c <__aeabi_dcmplt>
   36328:	2800      	cmp	r0, #0
   3632a:	d000      	beq.n	3632e <_strtod_l+0xb22>
   3632c:	e4d2      	b.n	35cd4 <_strtod_l+0x4c8>
   3632e:	9808      	ldr	r0, [sp, #32]
   36330:	9909      	ldr	r1, [sp, #36]	; 0x24
   36332:	4a36      	ldr	r2, [pc, #216]	; (3640c <_strtod_l+0xc00>)
   36334:	4b31      	ldr	r3, [pc, #196]	; (363fc <_strtod_l+0xbf0>)
   36336:	f7fe fe8d 	bl	35054 <__aeabi_dcmpgt>
   3633a:	2800      	cmp	r0, #0
   3633c:	d100      	bne.n	36340 <_strtod_l+0xb34>
   3633e:	e773      	b.n	36228 <_strtod_l+0xa1c>
   36340:	e4c8      	b.n	35cd4 <_strtod_l+0x4c8>
   36342:	9b06      	ldr	r3, [sp, #24]
   36344:	2b00      	cmp	r3, #0
   36346:	d02a      	beq.n	3639e <_strtod_l+0xb92>
   36348:	23d4      	movs	r3, #212	; 0xd4
   3634a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3634c:	04db      	lsls	r3, r3, #19
   3634e:	429a      	cmp	r2, r3
   36350:	d825      	bhi.n	3639e <_strtod_l+0xb92>
   36352:	4a2f      	ldr	r2, [pc, #188]	; (36410 <_strtod_l+0xc04>)
   36354:	4b2f      	ldr	r3, [pc, #188]	; (36414 <_strtod_l+0xc08>)
   36356:	0028      	movs	r0, r5
   36358:	9908      	ldr	r1, [sp, #32]
   3635a:	f7fe fe71 	bl	35040 <__aeabi_dcmple>
   3635e:	2800      	cmp	r0, #0
   36360:	d016      	beq.n	36390 <_strtod_l+0xb84>
   36362:	0028      	movs	r0, r5
   36364:	9908      	ldr	r1, [sp, #32]
   36366:	f7fd f805 	bl	33374 <__aeabi_d2uiz>
   3636a:	2800      	cmp	r0, #0
   3636c:	d100      	bne.n	36370 <_strtod_l+0xb64>
   3636e:	3001      	adds	r0, #1
   36370:	f7fe fdbc 	bl	34eec <__aeabi_ui2d>
   36374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   36376:	0005      	movs	r5, r0
   36378:	9108      	str	r1, [sp, #32]
   3637a:	2b00      	cmp	r3, #0
   3637c:	d122      	bne.n	363c4 <_strtod_l+0xbb8>
   3637e:	2380      	movs	r3, #128	; 0x80
   36380:	061b      	lsls	r3, r3, #24
   36382:	18cb      	adds	r3, r1, r3
   36384:	9018      	str	r0, [sp, #96]	; 0x60
   36386:	9319      	str	r3, [sp, #100]	; 0x64
   36388:	9a18      	ldr	r2, [sp, #96]	; 0x60
   3638a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   3638c:	920c      	str	r2, [sp, #48]	; 0x30
   3638e:	930d      	str	r3, [sp, #52]	; 0x34
   36390:	22d6      	movs	r2, #214	; 0xd6
   36392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   36394:	04d2      	lsls	r2, r2, #19
   36396:	189b      	adds	r3, r3, r2
   36398:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3639a:	1a9b      	subs	r3, r3, r2
   3639c:	930d      	str	r3, [sp, #52]	; 0x34
   3639e:	980e      	ldr	r0, [sp, #56]	; 0x38
   363a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   363a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   363a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   363a6:	f001 fa03 	bl	377b0 <__ulp>
   363aa:	0002      	movs	r2, r0
   363ac:	000b      	movs	r3, r1
   363ae:	0030      	movs	r0, r6
   363b0:	0039      	movs	r1, r7
   363b2:	f7fd ffd1 	bl	34358 <__aeabi_dmul>
   363b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   363b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   363ba:	f7fd f989 	bl	336d0 <__aeabi_dadd>
   363be:	0006      	movs	r6, r0
   363c0:	000f      	movs	r7, r1
   363c2:	e78c      	b.n	362de <_strtod_l+0xad2>
   363c4:	0002      	movs	r2, r0
   363c6:	9b08      	ldr	r3, [sp, #32]
   363c8:	9218      	str	r2, [sp, #96]	; 0x60
   363ca:	9319      	str	r3, [sp, #100]	; 0x64
   363cc:	e7dc      	b.n	36388 <_strtod_l+0xb7c>
   363ce:	4a0d      	ldr	r2, [pc, #52]	; (36404 <_strtod_l+0xbf8>)
   363d0:	4b11      	ldr	r3, [pc, #68]	; (36418 <_strtod_l+0xc0c>)
   363d2:	9808      	ldr	r0, [sp, #32]
   363d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   363d6:	f7fe fe29 	bl	3502c <__aeabi_dcmplt>
   363da:	e7ae      	b.n	3633a <_strtod_l+0xb2e>
   363dc:	fff00000 	.word	0xfff00000
   363e0:	000fffff 	.word	0x000fffff
   363e4:	3ff00000 	.word	0x3ff00000
   363e8:	7ff00000 	.word	0x7ff00000
   363ec:	7fe00000 	.word	0x7fe00000
   363f0:	fcb00000 	.word	0xfcb00000
   363f4:	7c9fffff 	.word	0x7c9fffff
   363f8:	7fefffff 	.word	0x7fefffff
   363fc:	3fe00000 	.word	0x3fe00000
   36400:	bff00000 	.word	0xbff00000
   36404:	94a03595 	.word	0x94a03595
   36408:	3fdfffff 	.word	0x3fdfffff
   3640c:	35afe535 	.word	0x35afe535
   36410:	ffc00000 	.word	0xffc00000
   36414:	41dfffff 	.word	0x41dfffff
   36418:	3fcfffff 	.word	0x3fcfffff

0003641c <strtod>:
   3641c:	4b06      	ldr	r3, [pc, #24]	; (36438 <strtod+0x1c>)
   3641e:	b510      	push	{r4, lr}
   36420:	0004      	movs	r4, r0
   36422:	6818      	ldr	r0, [r3, #0]
   36424:	000a      	movs	r2, r1
   36426:	6a03      	ldr	r3, [r0, #32]
   36428:	2b00      	cmp	r3, #0
   3642a:	d100      	bne.n	3642e <strtod+0x12>
   3642c:	4b03      	ldr	r3, [pc, #12]	; (3643c <strtod+0x20>)
   3642e:	0021      	movs	r1, r4
   36430:	f7ff f9ec 	bl	3580c <_strtod_l>
   36434:	bd10      	pop	{r4, pc}
   36436:	46c0      	nop			; (mov r8, r8)
   36438:	20000130 	.word	0x20000130
   3643c:	20000194 	.word	0x20000194

00036440 <_strtol_l.isra.0>:
   36440:	b5f0      	push	{r4, r5, r6, r7, lr}
   36442:	001f      	movs	r7, r3
   36444:	000e      	movs	r6, r1
   36446:	b087      	sub	sp, #28
   36448:	9005      	str	r0, [sp, #20]
   3644a:	9103      	str	r1, [sp, #12]
   3644c:	9202      	str	r2, [sp, #8]
   3644e:	980c      	ldr	r0, [sp, #48]	; 0x30
   36450:	7834      	ldrb	r4, [r6, #0]
   36452:	f000 fe4b 	bl	370ec <__locale_ctype_ptr_l>
   36456:	2208      	movs	r2, #8
   36458:	1900      	adds	r0, r0, r4
   3645a:	7843      	ldrb	r3, [r0, #1]
   3645c:	1c75      	adds	r5, r6, #1
   3645e:	4013      	ands	r3, r2
   36460:	d10c      	bne.n	3647c <_strtol_l.isra.0+0x3c>
   36462:	2c2d      	cmp	r4, #45	; 0x2d
   36464:	d10c      	bne.n	36480 <_strtol_l.isra.0+0x40>
   36466:	3301      	adds	r3, #1
   36468:	782c      	ldrb	r4, [r5, #0]
   3646a:	9301      	str	r3, [sp, #4]
   3646c:	1cb5      	adds	r5, r6, #2
   3646e:	2f00      	cmp	r7, #0
   36470:	d00c      	beq.n	3648c <_strtol_l.isra.0+0x4c>
   36472:	2f10      	cmp	r7, #16
   36474:	d114      	bne.n	364a0 <_strtol_l.isra.0+0x60>
   36476:	2c30      	cmp	r4, #48	; 0x30
   36478:	d00a      	beq.n	36490 <_strtol_l.isra.0+0x50>
   3647a:	e011      	b.n	364a0 <_strtol_l.isra.0+0x60>
   3647c:	002e      	movs	r6, r5
   3647e:	e7e6      	b.n	3644e <_strtol_l.isra.0+0xe>
   36480:	9301      	str	r3, [sp, #4]
   36482:	2c2b      	cmp	r4, #43	; 0x2b
   36484:	d1f3      	bne.n	3646e <_strtol_l.isra.0+0x2e>
   36486:	782c      	ldrb	r4, [r5, #0]
   36488:	1cb5      	adds	r5, r6, #2
   3648a:	e7f0      	b.n	3646e <_strtol_l.isra.0+0x2e>
   3648c:	2c30      	cmp	r4, #48	; 0x30
   3648e:	d12f      	bne.n	364f0 <_strtol_l.isra.0+0xb0>
   36490:	2220      	movs	r2, #32
   36492:	782b      	ldrb	r3, [r5, #0]
   36494:	4393      	bics	r3, r2
   36496:	2b58      	cmp	r3, #88	; 0x58
   36498:	d151      	bne.n	3653e <_strtol_l.isra.0+0xfe>
   3649a:	2710      	movs	r7, #16
   3649c:	786c      	ldrb	r4, [r5, #1]
   3649e:	3502      	adds	r5, #2
   364a0:	9b01      	ldr	r3, [sp, #4]
   364a2:	4a29      	ldr	r2, [pc, #164]	; (36548 <_strtol_l.isra.0+0x108>)
   364a4:	0039      	movs	r1, r7
   364a6:	189e      	adds	r6, r3, r2
   364a8:	0030      	movs	r0, r6
   364aa:	f7fc fe49 	bl	33140 <__aeabi_uidivmod>
   364ae:	0030      	movs	r0, r6
   364b0:	9104      	str	r1, [sp, #16]
   364b2:	0039      	movs	r1, r7
   364b4:	f7fc fdbe 	bl	33034 <__udivsi3>
   364b8:	2101      	movs	r1, #1
   364ba:	2300      	movs	r3, #0
   364bc:	4249      	negs	r1, r1
   364be:	0002      	movs	r2, r0
   364c0:	468c      	mov	ip, r1
   364c2:	0018      	movs	r0, r3
   364c4:	0021      	movs	r1, r4
   364c6:	3930      	subs	r1, #48	; 0x30
   364c8:	2909      	cmp	r1, #9
   364ca:	d813      	bhi.n	364f4 <_strtol_l.isra.0+0xb4>
   364cc:	000c      	movs	r4, r1
   364ce:	42a7      	cmp	r7, r4
   364d0:	dd1c      	ble.n	3650c <_strtol_l.isra.0+0xcc>
   364d2:	1c59      	adds	r1, r3, #1
   364d4:	d009      	beq.n	364ea <_strtol_l.isra.0+0xaa>
   364d6:	4663      	mov	r3, ip
   364d8:	4282      	cmp	r2, r0
   364da:	d306      	bcc.n	364ea <_strtol_l.isra.0+0xaa>
   364dc:	d102      	bne.n	364e4 <_strtol_l.isra.0+0xa4>
   364de:	9904      	ldr	r1, [sp, #16]
   364e0:	42a1      	cmp	r1, r4
   364e2:	db02      	blt.n	364ea <_strtol_l.isra.0+0xaa>
   364e4:	2301      	movs	r3, #1
   364e6:	4378      	muls	r0, r7
   364e8:	1820      	adds	r0, r4, r0
   364ea:	782c      	ldrb	r4, [r5, #0]
   364ec:	3501      	adds	r5, #1
   364ee:	e7e9      	b.n	364c4 <_strtol_l.isra.0+0x84>
   364f0:	270a      	movs	r7, #10
   364f2:	e7d5      	b.n	364a0 <_strtol_l.isra.0+0x60>
   364f4:	0021      	movs	r1, r4
   364f6:	3941      	subs	r1, #65	; 0x41
   364f8:	2919      	cmp	r1, #25
   364fa:	d801      	bhi.n	36500 <_strtol_l.isra.0+0xc0>
   364fc:	3c37      	subs	r4, #55	; 0x37
   364fe:	e7e6      	b.n	364ce <_strtol_l.isra.0+0x8e>
   36500:	0021      	movs	r1, r4
   36502:	3961      	subs	r1, #97	; 0x61
   36504:	2919      	cmp	r1, #25
   36506:	d801      	bhi.n	3650c <_strtol_l.isra.0+0xcc>
   36508:	3c57      	subs	r4, #87	; 0x57
   3650a:	e7e0      	b.n	364ce <_strtol_l.isra.0+0x8e>
   3650c:	1c5a      	adds	r2, r3, #1
   3650e:	d108      	bne.n	36522 <_strtol_l.isra.0+0xe2>
   36510:	9a05      	ldr	r2, [sp, #20]
   36512:	3323      	adds	r3, #35	; 0x23
   36514:	6013      	str	r3, [r2, #0]
   36516:	9b02      	ldr	r3, [sp, #8]
   36518:	0030      	movs	r0, r6
   3651a:	2b00      	cmp	r3, #0
   3651c:	d10b      	bne.n	36536 <_strtol_l.isra.0+0xf6>
   3651e:	b007      	add	sp, #28
   36520:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36522:	9a01      	ldr	r2, [sp, #4]
   36524:	2a00      	cmp	r2, #0
   36526:	d000      	beq.n	3652a <_strtol_l.isra.0+0xea>
   36528:	4240      	negs	r0, r0
   3652a:	9a02      	ldr	r2, [sp, #8]
   3652c:	2a00      	cmp	r2, #0
   3652e:	d0f6      	beq.n	3651e <_strtol_l.isra.0+0xde>
   36530:	9a03      	ldr	r2, [sp, #12]
   36532:	2b00      	cmp	r3, #0
   36534:	d000      	beq.n	36538 <_strtol_l.isra.0+0xf8>
   36536:	1e6a      	subs	r2, r5, #1
   36538:	9b02      	ldr	r3, [sp, #8]
   3653a:	601a      	str	r2, [r3, #0]
   3653c:	e7ef      	b.n	3651e <_strtol_l.isra.0+0xde>
   3653e:	2430      	movs	r4, #48	; 0x30
   36540:	2f00      	cmp	r7, #0
   36542:	d1ad      	bne.n	364a0 <_strtol_l.isra.0+0x60>
   36544:	3708      	adds	r7, #8
   36546:	e7ab      	b.n	364a0 <_strtol_l.isra.0+0x60>
   36548:	7fffffff 	.word	0x7fffffff

0003654c <strtol>:
   3654c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3654e:	0013      	movs	r3, r2
   36550:	4a06      	ldr	r2, [pc, #24]	; (3656c <strtol+0x20>)
   36552:	0005      	movs	r5, r0
   36554:	6810      	ldr	r0, [r2, #0]
   36556:	6a04      	ldr	r4, [r0, #32]
   36558:	2c00      	cmp	r4, #0
   3655a:	d100      	bne.n	3655e <strtol+0x12>
   3655c:	4c04      	ldr	r4, [pc, #16]	; (36570 <strtol+0x24>)
   3655e:	000a      	movs	r2, r1
   36560:	9400      	str	r4, [sp, #0]
   36562:	0029      	movs	r1, r5
   36564:	f7ff ff6c 	bl	36440 <_strtol_l.isra.0>
   36568:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   3656a:	46c0      	nop			; (mov r8, r8)
   3656c:	20000130 	.word	0x20000130
   36570:	20000194 	.word	0x20000194

00036574 <_vsniprintf_r>:
   36574:	b530      	push	{r4, r5, lr}
   36576:	0014      	movs	r4, r2
   36578:	b09b      	sub	sp, #108	; 0x6c
   3657a:	0005      	movs	r5, r0
   3657c:	001a      	movs	r2, r3
   3657e:	2c00      	cmp	r4, #0
   36580:	da05      	bge.n	3658e <_vsniprintf_r+0x1a>
   36582:	238b      	movs	r3, #139	; 0x8b
   36584:	6003      	str	r3, [r0, #0]
   36586:	2001      	movs	r0, #1
   36588:	4240      	negs	r0, r0
   3658a:	b01b      	add	sp, #108	; 0x6c
   3658c:	bd30      	pop	{r4, r5, pc}
   3658e:	2382      	movs	r3, #130	; 0x82
   36590:	4668      	mov	r0, sp
   36592:	009b      	lsls	r3, r3, #2
   36594:	8183      	strh	r3, [r0, #12]
   36596:	2300      	movs	r3, #0
   36598:	9100      	str	r1, [sp, #0]
   3659a:	9104      	str	r1, [sp, #16]
   3659c:	429c      	cmp	r4, r3
   3659e:	d000      	beq.n	365a2 <_vsniprintf_r+0x2e>
   365a0:	1e63      	subs	r3, r4, #1
   365a2:	9302      	str	r3, [sp, #8]
   365a4:	9305      	str	r3, [sp, #20]
   365a6:	2301      	movs	r3, #1
   365a8:	4669      	mov	r1, sp
   365aa:	425b      	negs	r3, r3
   365ac:	81cb      	strh	r3, [r1, #14]
   365ae:	0028      	movs	r0, r5
   365b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   365b2:	f001 fa93 	bl	37adc <_svfiprintf_r>
   365b6:	1c43      	adds	r3, r0, #1
   365b8:	da01      	bge.n	365be <_vsniprintf_r+0x4a>
   365ba:	238b      	movs	r3, #139	; 0x8b
   365bc:	602b      	str	r3, [r5, #0]
   365be:	2c00      	cmp	r4, #0
   365c0:	d0e3      	beq.n	3658a <_vsniprintf_r+0x16>
   365c2:	2300      	movs	r3, #0
   365c4:	9a00      	ldr	r2, [sp, #0]
   365c6:	7013      	strb	r3, [r2, #0]
   365c8:	e7df      	b.n	3658a <_vsniprintf_r+0x16>
	...

000365cc <vsniprintf>:
   365cc:	b507      	push	{r0, r1, r2, lr}
   365ce:	9300      	str	r3, [sp, #0]
   365d0:	0013      	movs	r3, r2
   365d2:	000a      	movs	r2, r1
   365d4:	0001      	movs	r1, r0
   365d6:	4802      	ldr	r0, [pc, #8]	; (365e0 <vsniprintf+0x14>)
   365d8:	6800      	ldr	r0, [r0, #0]
   365da:	f7ff ffcb 	bl	36574 <_vsniprintf_r>
   365de:	bd0e      	pop	{r1, r2, r3, pc}
   365e0:	20000130 	.word	0x20000130

000365e4 <__swbuf_r>:
   365e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   365e6:	0005      	movs	r5, r0
   365e8:	000e      	movs	r6, r1
   365ea:	0014      	movs	r4, r2
   365ec:	2800      	cmp	r0, #0
   365ee:	d004      	beq.n	365fa <__swbuf_r+0x16>
   365f0:	6983      	ldr	r3, [r0, #24]
   365f2:	2b00      	cmp	r3, #0
   365f4:	d101      	bne.n	365fa <__swbuf_r+0x16>
   365f6:	f000 f9b9 	bl	3696c <__sinit>
   365fa:	4b22      	ldr	r3, [pc, #136]	; (36684 <__swbuf_r+0xa0>)
   365fc:	429c      	cmp	r4, r3
   365fe:	d12d      	bne.n	3665c <__swbuf_r+0x78>
   36600:	686c      	ldr	r4, [r5, #4]
   36602:	69a3      	ldr	r3, [r4, #24]
   36604:	60a3      	str	r3, [r4, #8]
   36606:	89a3      	ldrh	r3, [r4, #12]
   36608:	071b      	lsls	r3, r3, #28
   3660a:	d531      	bpl.n	36670 <__swbuf_r+0x8c>
   3660c:	6923      	ldr	r3, [r4, #16]
   3660e:	2b00      	cmp	r3, #0
   36610:	d02e      	beq.n	36670 <__swbuf_r+0x8c>
   36612:	6823      	ldr	r3, [r4, #0]
   36614:	6922      	ldr	r2, [r4, #16]
   36616:	b2f7      	uxtb	r7, r6
   36618:	1a98      	subs	r0, r3, r2
   3661a:	6963      	ldr	r3, [r4, #20]
   3661c:	b2f6      	uxtb	r6, r6
   3661e:	4298      	cmp	r0, r3
   36620:	db05      	blt.n	3662e <__swbuf_r+0x4a>
   36622:	0021      	movs	r1, r4
   36624:	0028      	movs	r0, r5
   36626:	f000 f933 	bl	36890 <_fflush_r>
   3662a:	2800      	cmp	r0, #0
   3662c:	d126      	bne.n	3667c <__swbuf_r+0x98>
   3662e:	68a3      	ldr	r3, [r4, #8]
   36630:	3001      	adds	r0, #1
   36632:	3b01      	subs	r3, #1
   36634:	60a3      	str	r3, [r4, #8]
   36636:	6823      	ldr	r3, [r4, #0]
   36638:	1c5a      	adds	r2, r3, #1
   3663a:	6022      	str	r2, [r4, #0]
   3663c:	701f      	strb	r7, [r3, #0]
   3663e:	6963      	ldr	r3, [r4, #20]
   36640:	4298      	cmp	r0, r3
   36642:	d004      	beq.n	3664e <__swbuf_r+0x6a>
   36644:	89a3      	ldrh	r3, [r4, #12]
   36646:	07db      	lsls	r3, r3, #31
   36648:	d51a      	bpl.n	36680 <__swbuf_r+0x9c>
   3664a:	2e0a      	cmp	r6, #10
   3664c:	d118      	bne.n	36680 <__swbuf_r+0x9c>
   3664e:	0021      	movs	r1, r4
   36650:	0028      	movs	r0, r5
   36652:	f000 f91d 	bl	36890 <_fflush_r>
   36656:	2800      	cmp	r0, #0
   36658:	d012      	beq.n	36680 <__swbuf_r+0x9c>
   3665a:	e00f      	b.n	3667c <__swbuf_r+0x98>
   3665c:	4b0a      	ldr	r3, [pc, #40]	; (36688 <__swbuf_r+0xa4>)
   3665e:	429c      	cmp	r4, r3
   36660:	d101      	bne.n	36666 <__swbuf_r+0x82>
   36662:	68ac      	ldr	r4, [r5, #8]
   36664:	e7cd      	b.n	36602 <__swbuf_r+0x1e>
   36666:	4b09      	ldr	r3, [pc, #36]	; (3668c <__swbuf_r+0xa8>)
   36668:	429c      	cmp	r4, r3
   3666a:	d1ca      	bne.n	36602 <__swbuf_r+0x1e>
   3666c:	68ec      	ldr	r4, [r5, #12]
   3666e:	e7c8      	b.n	36602 <__swbuf_r+0x1e>
   36670:	0021      	movs	r1, r4
   36672:	0028      	movs	r0, r5
   36674:	f000 f80c 	bl	36690 <__swsetup_r>
   36678:	2800      	cmp	r0, #0
   3667a:	d0ca      	beq.n	36612 <__swbuf_r+0x2e>
   3667c:	2601      	movs	r6, #1
   3667e:	4276      	negs	r6, r6
   36680:	0030      	movs	r0, r6
   36682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36684:	0003c8a0 	.word	0x0003c8a0
   36688:	0003c8c0 	.word	0x0003c8c0
   3668c:	0003c880 	.word	0x0003c880

00036690 <__swsetup_r>:
   36690:	4b36      	ldr	r3, [pc, #216]	; (3676c <__swsetup_r+0xdc>)
   36692:	b570      	push	{r4, r5, r6, lr}
   36694:	681d      	ldr	r5, [r3, #0]
   36696:	0006      	movs	r6, r0
   36698:	000c      	movs	r4, r1
   3669a:	2d00      	cmp	r5, #0
   3669c:	d005      	beq.n	366aa <__swsetup_r+0x1a>
   3669e:	69ab      	ldr	r3, [r5, #24]
   366a0:	2b00      	cmp	r3, #0
   366a2:	d102      	bne.n	366aa <__swsetup_r+0x1a>
   366a4:	0028      	movs	r0, r5
   366a6:	f000 f961 	bl	3696c <__sinit>
   366aa:	4b31      	ldr	r3, [pc, #196]	; (36770 <__swsetup_r+0xe0>)
   366ac:	429c      	cmp	r4, r3
   366ae:	d10f      	bne.n	366d0 <__swsetup_r+0x40>
   366b0:	686c      	ldr	r4, [r5, #4]
   366b2:	230c      	movs	r3, #12
   366b4:	5ee2      	ldrsh	r2, [r4, r3]
   366b6:	b293      	uxth	r3, r2
   366b8:	0719      	lsls	r1, r3, #28
   366ba:	d42d      	bmi.n	36718 <__swsetup_r+0x88>
   366bc:	06d9      	lsls	r1, r3, #27
   366be:	d411      	bmi.n	366e4 <__swsetup_r+0x54>
   366c0:	2309      	movs	r3, #9
   366c2:	2001      	movs	r0, #1
   366c4:	6033      	str	r3, [r6, #0]
   366c6:	3337      	adds	r3, #55	; 0x37
   366c8:	4313      	orrs	r3, r2
   366ca:	81a3      	strh	r3, [r4, #12]
   366cc:	4240      	negs	r0, r0
   366ce:	bd70      	pop	{r4, r5, r6, pc}
   366d0:	4b28      	ldr	r3, [pc, #160]	; (36774 <__swsetup_r+0xe4>)
   366d2:	429c      	cmp	r4, r3
   366d4:	d101      	bne.n	366da <__swsetup_r+0x4a>
   366d6:	68ac      	ldr	r4, [r5, #8]
   366d8:	e7eb      	b.n	366b2 <__swsetup_r+0x22>
   366da:	4b27      	ldr	r3, [pc, #156]	; (36778 <__swsetup_r+0xe8>)
   366dc:	429c      	cmp	r4, r3
   366de:	d1e8      	bne.n	366b2 <__swsetup_r+0x22>
   366e0:	68ec      	ldr	r4, [r5, #12]
   366e2:	e7e6      	b.n	366b2 <__swsetup_r+0x22>
   366e4:	075b      	lsls	r3, r3, #29
   366e6:	d513      	bpl.n	36710 <__swsetup_r+0x80>
   366e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   366ea:	2900      	cmp	r1, #0
   366ec:	d008      	beq.n	36700 <__swsetup_r+0x70>
   366ee:	0023      	movs	r3, r4
   366f0:	3344      	adds	r3, #68	; 0x44
   366f2:	4299      	cmp	r1, r3
   366f4:	d002      	beq.n	366fc <__swsetup_r+0x6c>
   366f6:	0030      	movs	r0, r6
   366f8:	f7fe fe46 	bl	35388 <_free_r>
   366fc:	2300      	movs	r3, #0
   366fe:	6363      	str	r3, [r4, #52]	; 0x34
   36700:	2224      	movs	r2, #36	; 0x24
   36702:	89a3      	ldrh	r3, [r4, #12]
   36704:	4393      	bics	r3, r2
   36706:	81a3      	strh	r3, [r4, #12]
   36708:	2300      	movs	r3, #0
   3670a:	6063      	str	r3, [r4, #4]
   3670c:	6923      	ldr	r3, [r4, #16]
   3670e:	6023      	str	r3, [r4, #0]
   36710:	2308      	movs	r3, #8
   36712:	89a2      	ldrh	r2, [r4, #12]
   36714:	4313      	orrs	r3, r2
   36716:	81a3      	strh	r3, [r4, #12]
   36718:	6923      	ldr	r3, [r4, #16]
   3671a:	2b00      	cmp	r3, #0
   3671c:	d10b      	bne.n	36736 <__swsetup_r+0xa6>
   3671e:	21a0      	movs	r1, #160	; 0xa0
   36720:	2280      	movs	r2, #128	; 0x80
   36722:	89a3      	ldrh	r3, [r4, #12]
   36724:	0089      	lsls	r1, r1, #2
   36726:	0092      	lsls	r2, r2, #2
   36728:	400b      	ands	r3, r1
   3672a:	4293      	cmp	r3, r2
   3672c:	d003      	beq.n	36736 <__swsetup_r+0xa6>
   3672e:	0021      	movs	r1, r4
   36730:	0030      	movs	r0, r6
   36732:	f000 fd17 	bl	37164 <__smakebuf_r>
   36736:	2301      	movs	r3, #1
   36738:	89a2      	ldrh	r2, [r4, #12]
   3673a:	4013      	ands	r3, r2
   3673c:	d011      	beq.n	36762 <__swsetup_r+0xd2>
   3673e:	2300      	movs	r3, #0
   36740:	60a3      	str	r3, [r4, #8]
   36742:	6963      	ldr	r3, [r4, #20]
   36744:	425b      	negs	r3, r3
   36746:	61a3      	str	r3, [r4, #24]
   36748:	2000      	movs	r0, #0
   3674a:	6923      	ldr	r3, [r4, #16]
   3674c:	4283      	cmp	r3, r0
   3674e:	d1be      	bne.n	366ce <__swsetup_r+0x3e>
   36750:	230c      	movs	r3, #12
   36752:	5ee2      	ldrsh	r2, [r4, r3]
   36754:	0613      	lsls	r3, r2, #24
   36756:	d5ba      	bpl.n	366ce <__swsetup_r+0x3e>
   36758:	2340      	movs	r3, #64	; 0x40
   3675a:	4313      	orrs	r3, r2
   3675c:	81a3      	strh	r3, [r4, #12]
   3675e:	3801      	subs	r0, #1
   36760:	e7b5      	b.n	366ce <__swsetup_r+0x3e>
   36762:	0792      	lsls	r2, r2, #30
   36764:	d400      	bmi.n	36768 <__swsetup_r+0xd8>
   36766:	6963      	ldr	r3, [r4, #20]
   36768:	60a3      	str	r3, [r4, #8]
   3676a:	e7ed      	b.n	36748 <__swsetup_r+0xb8>
   3676c:	20000130 	.word	0x20000130
   36770:	0003c8a0 	.word	0x0003c8a0
   36774:	0003c8c0 	.word	0x0003c8c0
   36778:	0003c880 	.word	0x0003c880

0003677c <__sflush_r>:
   3677c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3677e:	898a      	ldrh	r2, [r1, #12]
   36780:	0005      	movs	r5, r0
   36782:	000c      	movs	r4, r1
   36784:	0713      	lsls	r3, r2, #28
   36786:	d460      	bmi.n	3684a <__sflush_r+0xce>
   36788:	684b      	ldr	r3, [r1, #4]
   3678a:	2b00      	cmp	r3, #0
   3678c:	dc04      	bgt.n	36798 <__sflush_r+0x1c>
   3678e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   36790:	2b00      	cmp	r3, #0
   36792:	dc01      	bgt.n	36798 <__sflush_r+0x1c>
   36794:	2000      	movs	r0, #0
   36796:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36798:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3679a:	2f00      	cmp	r7, #0
   3679c:	d0fa      	beq.n	36794 <__sflush_r+0x18>
   3679e:	2300      	movs	r3, #0
   367a0:	682e      	ldr	r6, [r5, #0]
   367a2:	602b      	str	r3, [r5, #0]
   367a4:	2380      	movs	r3, #128	; 0x80
   367a6:	015b      	lsls	r3, r3, #5
   367a8:	401a      	ands	r2, r3
   367aa:	d034      	beq.n	36816 <__sflush_r+0x9a>
   367ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
   367ae:	89a3      	ldrh	r3, [r4, #12]
   367b0:	075b      	lsls	r3, r3, #29
   367b2:	d506      	bpl.n	367c2 <__sflush_r+0x46>
   367b4:	6863      	ldr	r3, [r4, #4]
   367b6:	1ac0      	subs	r0, r0, r3
   367b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   367ba:	2b00      	cmp	r3, #0
   367bc:	d001      	beq.n	367c2 <__sflush_r+0x46>
   367be:	6c23      	ldr	r3, [r4, #64]	; 0x40
   367c0:	1ac0      	subs	r0, r0, r3
   367c2:	0002      	movs	r2, r0
   367c4:	6a21      	ldr	r1, [r4, #32]
   367c6:	2300      	movs	r3, #0
   367c8:	0028      	movs	r0, r5
   367ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   367cc:	47b8      	blx	r7
   367ce:	89a1      	ldrh	r1, [r4, #12]
   367d0:	1c43      	adds	r3, r0, #1
   367d2:	d106      	bne.n	367e2 <__sflush_r+0x66>
   367d4:	682b      	ldr	r3, [r5, #0]
   367d6:	2b1d      	cmp	r3, #29
   367d8:	d831      	bhi.n	3683e <__sflush_r+0xc2>
   367da:	4a2c      	ldr	r2, [pc, #176]	; (3688c <__sflush_r+0x110>)
   367dc:	40da      	lsrs	r2, r3
   367de:	07d3      	lsls	r3, r2, #31
   367e0:	d52d      	bpl.n	3683e <__sflush_r+0xc2>
   367e2:	2300      	movs	r3, #0
   367e4:	6063      	str	r3, [r4, #4]
   367e6:	6923      	ldr	r3, [r4, #16]
   367e8:	6023      	str	r3, [r4, #0]
   367ea:	04cb      	lsls	r3, r1, #19
   367ec:	d505      	bpl.n	367fa <__sflush_r+0x7e>
   367ee:	1c43      	adds	r3, r0, #1
   367f0:	d102      	bne.n	367f8 <__sflush_r+0x7c>
   367f2:	682b      	ldr	r3, [r5, #0]
   367f4:	2b00      	cmp	r3, #0
   367f6:	d100      	bne.n	367fa <__sflush_r+0x7e>
   367f8:	6560      	str	r0, [r4, #84]	; 0x54
   367fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   367fc:	602e      	str	r6, [r5, #0]
   367fe:	2900      	cmp	r1, #0
   36800:	d0c8      	beq.n	36794 <__sflush_r+0x18>
   36802:	0023      	movs	r3, r4
   36804:	3344      	adds	r3, #68	; 0x44
   36806:	4299      	cmp	r1, r3
   36808:	d002      	beq.n	36810 <__sflush_r+0x94>
   3680a:	0028      	movs	r0, r5
   3680c:	f7fe fdbc 	bl	35388 <_free_r>
   36810:	2000      	movs	r0, #0
   36812:	6360      	str	r0, [r4, #52]	; 0x34
   36814:	e7bf      	b.n	36796 <__sflush_r+0x1a>
   36816:	2301      	movs	r3, #1
   36818:	6a21      	ldr	r1, [r4, #32]
   3681a:	0028      	movs	r0, r5
   3681c:	47b8      	blx	r7
   3681e:	1c43      	adds	r3, r0, #1
   36820:	d1c5      	bne.n	367ae <__sflush_r+0x32>
   36822:	682b      	ldr	r3, [r5, #0]
   36824:	2b00      	cmp	r3, #0
   36826:	d0c2      	beq.n	367ae <__sflush_r+0x32>
   36828:	2b1d      	cmp	r3, #29
   3682a:	d001      	beq.n	36830 <__sflush_r+0xb4>
   3682c:	2b16      	cmp	r3, #22
   3682e:	d101      	bne.n	36834 <__sflush_r+0xb8>
   36830:	602e      	str	r6, [r5, #0]
   36832:	e7af      	b.n	36794 <__sflush_r+0x18>
   36834:	2340      	movs	r3, #64	; 0x40
   36836:	89a2      	ldrh	r2, [r4, #12]
   36838:	4313      	orrs	r3, r2
   3683a:	81a3      	strh	r3, [r4, #12]
   3683c:	e7ab      	b.n	36796 <__sflush_r+0x1a>
   3683e:	2340      	movs	r3, #64	; 0x40
   36840:	430b      	orrs	r3, r1
   36842:	2001      	movs	r0, #1
   36844:	81a3      	strh	r3, [r4, #12]
   36846:	4240      	negs	r0, r0
   36848:	e7a5      	b.n	36796 <__sflush_r+0x1a>
   3684a:	690f      	ldr	r7, [r1, #16]
   3684c:	2f00      	cmp	r7, #0
   3684e:	d0a1      	beq.n	36794 <__sflush_r+0x18>
   36850:	680b      	ldr	r3, [r1, #0]
   36852:	600f      	str	r7, [r1, #0]
   36854:	1bdb      	subs	r3, r3, r7
   36856:	9301      	str	r3, [sp, #4]
   36858:	2300      	movs	r3, #0
   3685a:	0792      	lsls	r2, r2, #30
   3685c:	d100      	bne.n	36860 <__sflush_r+0xe4>
   3685e:	694b      	ldr	r3, [r1, #20]
   36860:	60a3      	str	r3, [r4, #8]
   36862:	9b01      	ldr	r3, [sp, #4]
   36864:	2b00      	cmp	r3, #0
   36866:	dc00      	bgt.n	3686a <__sflush_r+0xee>
   36868:	e794      	b.n	36794 <__sflush_r+0x18>
   3686a:	9b01      	ldr	r3, [sp, #4]
   3686c:	003a      	movs	r2, r7
   3686e:	6a21      	ldr	r1, [r4, #32]
   36870:	0028      	movs	r0, r5
   36872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   36874:	47b0      	blx	r6
   36876:	2800      	cmp	r0, #0
   36878:	dc03      	bgt.n	36882 <__sflush_r+0x106>
   3687a:	2340      	movs	r3, #64	; 0x40
   3687c:	89a2      	ldrh	r2, [r4, #12]
   3687e:	4313      	orrs	r3, r2
   36880:	e7df      	b.n	36842 <__sflush_r+0xc6>
   36882:	9b01      	ldr	r3, [sp, #4]
   36884:	183f      	adds	r7, r7, r0
   36886:	1a1b      	subs	r3, r3, r0
   36888:	9301      	str	r3, [sp, #4]
   3688a:	e7ea      	b.n	36862 <__sflush_r+0xe6>
   3688c:	20400001 	.word	0x20400001

00036890 <_fflush_r>:
   36890:	690b      	ldr	r3, [r1, #16]
   36892:	b570      	push	{r4, r5, r6, lr}
   36894:	0005      	movs	r5, r0
   36896:	000c      	movs	r4, r1
   36898:	2b00      	cmp	r3, #0
   3689a:	d101      	bne.n	368a0 <_fflush_r+0x10>
   3689c:	2000      	movs	r0, #0
   3689e:	bd70      	pop	{r4, r5, r6, pc}
   368a0:	2800      	cmp	r0, #0
   368a2:	d004      	beq.n	368ae <_fflush_r+0x1e>
   368a4:	6983      	ldr	r3, [r0, #24]
   368a6:	2b00      	cmp	r3, #0
   368a8:	d101      	bne.n	368ae <_fflush_r+0x1e>
   368aa:	f000 f85f 	bl	3696c <__sinit>
   368ae:	4b0b      	ldr	r3, [pc, #44]	; (368dc <_fflush_r+0x4c>)
   368b0:	429c      	cmp	r4, r3
   368b2:	d109      	bne.n	368c8 <_fflush_r+0x38>
   368b4:	686c      	ldr	r4, [r5, #4]
   368b6:	220c      	movs	r2, #12
   368b8:	5ea3      	ldrsh	r3, [r4, r2]
   368ba:	2b00      	cmp	r3, #0
   368bc:	d0ee      	beq.n	3689c <_fflush_r+0xc>
   368be:	0021      	movs	r1, r4
   368c0:	0028      	movs	r0, r5
   368c2:	f7ff ff5b 	bl	3677c <__sflush_r>
   368c6:	e7ea      	b.n	3689e <_fflush_r+0xe>
   368c8:	4b05      	ldr	r3, [pc, #20]	; (368e0 <_fflush_r+0x50>)
   368ca:	429c      	cmp	r4, r3
   368cc:	d101      	bne.n	368d2 <_fflush_r+0x42>
   368ce:	68ac      	ldr	r4, [r5, #8]
   368d0:	e7f1      	b.n	368b6 <_fflush_r+0x26>
   368d2:	4b04      	ldr	r3, [pc, #16]	; (368e4 <_fflush_r+0x54>)
   368d4:	429c      	cmp	r4, r3
   368d6:	d1ee      	bne.n	368b6 <_fflush_r+0x26>
   368d8:	68ec      	ldr	r4, [r5, #12]
   368da:	e7ec      	b.n	368b6 <_fflush_r+0x26>
   368dc:	0003c8a0 	.word	0x0003c8a0
   368e0:	0003c8c0 	.word	0x0003c8c0
   368e4:	0003c880 	.word	0x0003c880

000368e8 <_cleanup_r>:
   368e8:	b510      	push	{r4, lr}
   368ea:	4902      	ldr	r1, [pc, #8]	; (368f4 <_cleanup_r+0xc>)
   368ec:	f000 f8b2 	bl	36a54 <_fwalk_reent>
   368f0:	bd10      	pop	{r4, pc}
   368f2:	46c0      	nop			; (mov r8, r8)
   368f4:	00036891 	.word	0x00036891

000368f8 <std.isra.0>:
   368f8:	2300      	movs	r3, #0
   368fa:	b510      	push	{r4, lr}
   368fc:	0004      	movs	r4, r0
   368fe:	6003      	str	r3, [r0, #0]
   36900:	6043      	str	r3, [r0, #4]
   36902:	6083      	str	r3, [r0, #8]
   36904:	8181      	strh	r1, [r0, #12]
   36906:	6643      	str	r3, [r0, #100]	; 0x64
   36908:	81c2      	strh	r2, [r0, #14]
   3690a:	6103      	str	r3, [r0, #16]
   3690c:	6143      	str	r3, [r0, #20]
   3690e:	6183      	str	r3, [r0, #24]
   36910:	0019      	movs	r1, r3
   36912:	2208      	movs	r2, #8
   36914:	305c      	adds	r0, #92	; 0x5c
   36916:	f7fe fd2e 	bl	35376 <memset>
   3691a:	4b05      	ldr	r3, [pc, #20]	; (36930 <std.isra.0+0x38>)
   3691c:	6224      	str	r4, [r4, #32]
   3691e:	6263      	str	r3, [r4, #36]	; 0x24
   36920:	4b04      	ldr	r3, [pc, #16]	; (36934 <std.isra.0+0x3c>)
   36922:	62a3      	str	r3, [r4, #40]	; 0x28
   36924:	4b04      	ldr	r3, [pc, #16]	; (36938 <std.isra.0+0x40>)
   36926:	62e3      	str	r3, [r4, #44]	; 0x2c
   36928:	4b04      	ldr	r3, [pc, #16]	; (3693c <std.isra.0+0x44>)
   3692a:	6323      	str	r3, [r4, #48]	; 0x30
   3692c:	bd10      	pop	{r4, pc}
   3692e:	46c0      	nop			; (mov r8, r8)
   36930:	00037ff5 	.word	0x00037ff5
   36934:	0003801d 	.word	0x0003801d
   36938:	00038055 	.word	0x00038055
   3693c:	00038081 	.word	0x00038081

00036940 <__sfmoreglue>:
   36940:	b570      	push	{r4, r5, r6, lr}
   36942:	2568      	movs	r5, #104	; 0x68
   36944:	1e4a      	subs	r2, r1, #1
   36946:	4355      	muls	r5, r2
   36948:	000e      	movs	r6, r1
   3694a:	0029      	movs	r1, r5
   3694c:	3174      	adds	r1, #116	; 0x74
   3694e:	f7fe fd65 	bl	3541c <_malloc_r>
   36952:	1e04      	subs	r4, r0, #0
   36954:	d008      	beq.n	36968 <__sfmoreglue+0x28>
   36956:	2100      	movs	r1, #0
   36958:	002a      	movs	r2, r5
   3695a:	6001      	str	r1, [r0, #0]
   3695c:	6046      	str	r6, [r0, #4]
   3695e:	300c      	adds	r0, #12
   36960:	60a0      	str	r0, [r4, #8]
   36962:	3268      	adds	r2, #104	; 0x68
   36964:	f7fe fd07 	bl	35376 <memset>
   36968:	0020      	movs	r0, r4
   3696a:	bd70      	pop	{r4, r5, r6, pc}

0003696c <__sinit>:
   3696c:	6983      	ldr	r3, [r0, #24]
   3696e:	b513      	push	{r0, r1, r4, lr}
   36970:	0004      	movs	r4, r0
   36972:	2b00      	cmp	r3, #0
   36974:	d128      	bne.n	369c8 <__sinit+0x5c>
   36976:	6483      	str	r3, [r0, #72]	; 0x48
   36978:	64c3      	str	r3, [r0, #76]	; 0x4c
   3697a:	6503      	str	r3, [r0, #80]	; 0x50
   3697c:	4b13      	ldr	r3, [pc, #76]	; (369cc <__sinit+0x60>)
   3697e:	4a14      	ldr	r2, [pc, #80]	; (369d0 <__sinit+0x64>)
   36980:	681b      	ldr	r3, [r3, #0]
   36982:	6282      	str	r2, [r0, #40]	; 0x28
   36984:	9301      	str	r3, [sp, #4]
   36986:	4298      	cmp	r0, r3
   36988:	d101      	bne.n	3698e <__sinit+0x22>
   3698a:	2301      	movs	r3, #1
   3698c:	6183      	str	r3, [r0, #24]
   3698e:	0020      	movs	r0, r4
   36990:	f000 f820 	bl	369d4 <__sfp>
   36994:	6060      	str	r0, [r4, #4]
   36996:	0020      	movs	r0, r4
   36998:	f000 f81c 	bl	369d4 <__sfp>
   3699c:	60a0      	str	r0, [r4, #8]
   3699e:	0020      	movs	r0, r4
   369a0:	f000 f818 	bl	369d4 <__sfp>
   369a4:	2200      	movs	r2, #0
   369a6:	60e0      	str	r0, [r4, #12]
   369a8:	2104      	movs	r1, #4
   369aa:	6860      	ldr	r0, [r4, #4]
   369ac:	f7ff ffa4 	bl	368f8 <std.isra.0>
   369b0:	2201      	movs	r2, #1
   369b2:	2109      	movs	r1, #9
   369b4:	68a0      	ldr	r0, [r4, #8]
   369b6:	f7ff ff9f 	bl	368f8 <std.isra.0>
   369ba:	2202      	movs	r2, #2
   369bc:	2112      	movs	r1, #18
   369be:	68e0      	ldr	r0, [r4, #12]
   369c0:	f7ff ff9a 	bl	368f8 <std.isra.0>
   369c4:	2301      	movs	r3, #1
   369c6:	61a3      	str	r3, [r4, #24]
   369c8:	bd13      	pop	{r0, r1, r4, pc}
   369ca:	46c0      	nop			; (mov r8, r8)
   369cc:	0003c820 	.word	0x0003c820
   369d0:	000368e9 	.word	0x000368e9

000369d4 <__sfp>:
   369d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   369d6:	4b1e      	ldr	r3, [pc, #120]	; (36a50 <__sfp+0x7c>)
   369d8:	0007      	movs	r7, r0
   369da:	681e      	ldr	r6, [r3, #0]
   369dc:	69b3      	ldr	r3, [r6, #24]
   369de:	2b00      	cmp	r3, #0
   369e0:	d102      	bne.n	369e8 <__sfp+0x14>
   369e2:	0030      	movs	r0, r6
   369e4:	f7ff ffc2 	bl	3696c <__sinit>
   369e8:	3648      	adds	r6, #72	; 0x48
   369ea:	68b4      	ldr	r4, [r6, #8]
   369ec:	6873      	ldr	r3, [r6, #4]
   369ee:	3b01      	subs	r3, #1
   369f0:	d504      	bpl.n	369fc <__sfp+0x28>
   369f2:	6833      	ldr	r3, [r6, #0]
   369f4:	2b00      	cmp	r3, #0
   369f6:	d007      	beq.n	36a08 <__sfp+0x34>
   369f8:	6836      	ldr	r6, [r6, #0]
   369fa:	e7f6      	b.n	369ea <__sfp+0x16>
   369fc:	220c      	movs	r2, #12
   369fe:	5ea5      	ldrsh	r5, [r4, r2]
   36a00:	2d00      	cmp	r5, #0
   36a02:	d00d      	beq.n	36a20 <__sfp+0x4c>
   36a04:	3468      	adds	r4, #104	; 0x68
   36a06:	e7f2      	b.n	369ee <__sfp+0x1a>
   36a08:	2104      	movs	r1, #4
   36a0a:	0038      	movs	r0, r7
   36a0c:	f7ff ff98 	bl	36940 <__sfmoreglue>
   36a10:	6030      	str	r0, [r6, #0]
   36a12:	2800      	cmp	r0, #0
   36a14:	d1f0      	bne.n	369f8 <__sfp+0x24>
   36a16:	230c      	movs	r3, #12
   36a18:	0004      	movs	r4, r0
   36a1a:	603b      	str	r3, [r7, #0]
   36a1c:	0020      	movs	r0, r4
   36a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36a20:	2301      	movs	r3, #1
   36a22:	0020      	movs	r0, r4
   36a24:	425b      	negs	r3, r3
   36a26:	81e3      	strh	r3, [r4, #14]
   36a28:	3302      	adds	r3, #2
   36a2a:	81a3      	strh	r3, [r4, #12]
   36a2c:	6665      	str	r5, [r4, #100]	; 0x64
   36a2e:	6025      	str	r5, [r4, #0]
   36a30:	60a5      	str	r5, [r4, #8]
   36a32:	6065      	str	r5, [r4, #4]
   36a34:	6125      	str	r5, [r4, #16]
   36a36:	6165      	str	r5, [r4, #20]
   36a38:	61a5      	str	r5, [r4, #24]
   36a3a:	2208      	movs	r2, #8
   36a3c:	0029      	movs	r1, r5
   36a3e:	305c      	adds	r0, #92	; 0x5c
   36a40:	f7fe fc99 	bl	35376 <memset>
   36a44:	6365      	str	r5, [r4, #52]	; 0x34
   36a46:	63a5      	str	r5, [r4, #56]	; 0x38
   36a48:	64a5      	str	r5, [r4, #72]	; 0x48
   36a4a:	64e5      	str	r5, [r4, #76]	; 0x4c
   36a4c:	e7e6      	b.n	36a1c <__sfp+0x48>
   36a4e:	46c0      	nop			; (mov r8, r8)
   36a50:	0003c820 	.word	0x0003c820

00036a54 <_fwalk_reent>:
   36a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36a56:	0004      	movs	r4, r0
   36a58:	0007      	movs	r7, r0
   36a5a:	2600      	movs	r6, #0
   36a5c:	9101      	str	r1, [sp, #4]
   36a5e:	3448      	adds	r4, #72	; 0x48
   36a60:	2c00      	cmp	r4, #0
   36a62:	d101      	bne.n	36a68 <_fwalk_reent+0x14>
   36a64:	0030      	movs	r0, r6
   36a66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36a68:	6863      	ldr	r3, [r4, #4]
   36a6a:	68a5      	ldr	r5, [r4, #8]
   36a6c:	9300      	str	r3, [sp, #0]
   36a6e:	9b00      	ldr	r3, [sp, #0]
   36a70:	3b01      	subs	r3, #1
   36a72:	9300      	str	r3, [sp, #0]
   36a74:	d501      	bpl.n	36a7a <_fwalk_reent+0x26>
   36a76:	6824      	ldr	r4, [r4, #0]
   36a78:	e7f2      	b.n	36a60 <_fwalk_reent+0xc>
   36a7a:	89ab      	ldrh	r3, [r5, #12]
   36a7c:	2b01      	cmp	r3, #1
   36a7e:	d908      	bls.n	36a92 <_fwalk_reent+0x3e>
   36a80:	220e      	movs	r2, #14
   36a82:	5eab      	ldrsh	r3, [r5, r2]
   36a84:	3301      	adds	r3, #1
   36a86:	d004      	beq.n	36a92 <_fwalk_reent+0x3e>
   36a88:	0029      	movs	r1, r5
   36a8a:	0038      	movs	r0, r7
   36a8c:	9b01      	ldr	r3, [sp, #4]
   36a8e:	4798      	blx	r3
   36a90:	4306      	orrs	r6, r0
   36a92:	3568      	adds	r5, #104	; 0x68
   36a94:	e7eb      	b.n	36a6e <_fwalk_reent+0x1a>

00036a96 <rshift>:
   36a96:	b5f0      	push	{r4, r5, r6, r7, lr}
   36a98:	0006      	movs	r6, r0
   36a9a:	6905      	ldr	r5, [r0, #16]
   36a9c:	3614      	adds	r6, #20
   36a9e:	114b      	asrs	r3, r1, #5
   36aa0:	0034      	movs	r4, r6
   36aa2:	42ab      	cmp	r3, r5
   36aa4:	da1a      	bge.n	36adc <rshift+0x46>
   36aa6:	221f      	movs	r2, #31
   36aa8:	00ad      	lsls	r5, r5, #2
   36aaa:	009b      	lsls	r3, r3, #2
   36aac:	1975      	adds	r5, r6, r5
   36aae:	18f3      	adds	r3, r6, r3
   36ab0:	4011      	ands	r1, r2
   36ab2:	d107      	bne.n	36ac4 <rshift+0x2e>
   36ab4:	001a      	movs	r2, r3
   36ab6:	0033      	movs	r3, r6
   36ab8:	001c      	movs	r4, r3
   36aba:	4295      	cmp	r5, r2
   36abc:	d90e      	bls.n	36adc <rshift+0x46>
   36abe:	ca02      	ldmia	r2!, {r1}
   36ac0:	c302      	stmia	r3!, {r1}
   36ac2:	e7f9      	b.n	36ab8 <rshift+0x22>
   36ac4:	cb04      	ldmia	r3!, {r2}
   36ac6:	2720      	movs	r7, #32
   36ac8:	40ca      	lsrs	r2, r1
   36aca:	46b4      	mov	ip, r6
   36acc:	1a7f      	subs	r7, r7, r1
   36ace:	4664      	mov	r4, ip
   36ad0:	429d      	cmp	r5, r3
   36ad2:	d809      	bhi.n	36ae8 <rshift+0x52>
   36ad4:	6022      	str	r2, [r4, #0]
   36ad6:	2a00      	cmp	r2, #0
   36ad8:	d000      	beq.n	36adc <rshift+0x46>
   36ada:	3404      	adds	r4, #4
   36adc:	1ba3      	subs	r3, r4, r6
   36ade:	109b      	asrs	r3, r3, #2
   36ae0:	6103      	str	r3, [r0, #16]
   36ae2:	d100      	bne.n	36ae6 <rshift+0x50>
   36ae4:	6143      	str	r3, [r0, #20]
   36ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36ae8:	681c      	ldr	r4, [r3, #0]
   36aea:	40bc      	lsls	r4, r7
   36aec:	4322      	orrs	r2, r4
   36aee:	4664      	mov	r4, ip
   36af0:	c404      	stmia	r4!, {r2}
   36af2:	cb04      	ldmia	r3!, {r2}
   36af4:	46a4      	mov	ip, r4
   36af6:	40ca      	lsrs	r2, r1
   36af8:	e7e9      	b.n	36ace <rshift+0x38>

00036afa <__hexdig_fun>:
   36afa:	0003      	movs	r3, r0
   36afc:	3b30      	subs	r3, #48	; 0x30
   36afe:	2b09      	cmp	r3, #9
   36b00:	d803      	bhi.n	36b0a <__hexdig_fun+0x10>
   36b02:	3820      	subs	r0, #32
   36b04:	b2c3      	uxtb	r3, r0
   36b06:	0018      	movs	r0, r3
   36b08:	4770      	bx	lr
   36b0a:	0003      	movs	r3, r0
   36b0c:	3b61      	subs	r3, #97	; 0x61
   36b0e:	2b05      	cmp	r3, #5
   36b10:	d801      	bhi.n	36b16 <__hexdig_fun+0x1c>
   36b12:	3847      	subs	r0, #71	; 0x47
   36b14:	e7f6      	b.n	36b04 <__hexdig_fun+0xa>
   36b16:	0002      	movs	r2, r0
   36b18:	3a41      	subs	r2, #65	; 0x41
   36b1a:	2300      	movs	r3, #0
   36b1c:	2a05      	cmp	r2, #5
   36b1e:	d8f2      	bhi.n	36b06 <__hexdig_fun+0xc>
   36b20:	3827      	subs	r0, #39	; 0x27
   36b22:	e7ef      	b.n	36b04 <__hexdig_fun+0xa>

00036b24 <__gethex>:
   36b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   36b26:	b08d      	sub	sp, #52	; 0x34
   36b28:	9005      	str	r0, [sp, #20]
   36b2a:	9814      	ldr	r0, [sp, #80]	; 0x50
   36b2c:	9109      	str	r1, [sp, #36]	; 0x24
   36b2e:	9202      	str	r2, [sp, #8]
   36b30:	930a      	str	r3, [sp, #40]	; 0x28
   36b32:	f000 faed 	bl	37110 <__localeconv_l>
   36b36:	6803      	ldr	r3, [r0, #0]
   36b38:	0018      	movs	r0, r3
   36b3a:	9307      	str	r3, [sp, #28]
   36b3c:	f7fe fdf7 	bl	3572e <strlen>
   36b40:	2202      	movs	r2, #2
   36b42:	9b07      	ldr	r3, [sp, #28]
   36b44:	4252      	negs	r2, r2
   36b46:	181b      	adds	r3, r3, r0
   36b48:	3b01      	subs	r3, #1
   36b4a:	781b      	ldrb	r3, [r3, #0]
   36b4c:	9004      	str	r0, [sp, #16]
   36b4e:	930b      	str	r3, [sp, #44]	; 0x2c
   36b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36b52:	6819      	ldr	r1, [r3, #0]
   36b54:	1c8b      	adds	r3, r1, #2
   36b56:	1a52      	subs	r2, r2, r1
   36b58:	18d1      	adds	r1, r2, r3
   36b5a:	9301      	str	r3, [sp, #4]
   36b5c:	9108      	str	r1, [sp, #32]
   36b5e:	9901      	ldr	r1, [sp, #4]
   36b60:	3301      	adds	r3, #1
   36b62:	7808      	ldrb	r0, [r1, #0]
   36b64:	2830      	cmp	r0, #48	; 0x30
   36b66:	d0f7      	beq.n	36b58 <__gethex+0x34>
   36b68:	f7ff ffc7 	bl	36afa <__hexdig_fun>
   36b6c:	1e07      	subs	r7, r0, #0
   36b6e:	d000      	beq.n	36b72 <__gethex+0x4e>
   36b70:	e06b      	b.n	36c4a <__gethex+0x126>
   36b72:	9a04      	ldr	r2, [sp, #16]
   36b74:	9907      	ldr	r1, [sp, #28]
   36b76:	9801      	ldr	r0, [sp, #4]
   36b78:	f7fe fde0 	bl	3573c <strncmp>
   36b7c:	2800      	cmp	r0, #0
   36b7e:	d000      	beq.n	36b82 <__gethex+0x5e>
   36b80:	e06b      	b.n	36c5a <__gethex+0x136>
   36b82:	9b01      	ldr	r3, [sp, #4]
   36b84:	9a04      	ldr	r2, [sp, #16]
   36b86:	189c      	adds	r4, r3, r2
   36b88:	7820      	ldrb	r0, [r4, #0]
   36b8a:	f7ff ffb6 	bl	36afa <__hexdig_fun>
   36b8e:	2800      	cmp	r0, #0
   36b90:	d067      	beq.n	36c62 <__gethex+0x13e>
   36b92:	9401      	str	r4, [sp, #4]
   36b94:	9b01      	ldr	r3, [sp, #4]
   36b96:	7818      	ldrb	r0, [r3, #0]
   36b98:	2830      	cmp	r0, #48	; 0x30
   36b9a:	d052      	beq.n	36c42 <__gethex+0x11e>
   36b9c:	f7ff ffad 	bl	36afa <__hexdig_fun>
   36ba0:	4243      	negs	r3, r0
   36ba2:	4143      	adcs	r3, r0
   36ba4:	9303      	str	r3, [sp, #12]
   36ba6:	2301      	movs	r3, #1
   36ba8:	0026      	movs	r6, r4
   36baa:	9308      	str	r3, [sp, #32]
   36bac:	9c01      	ldr	r4, [sp, #4]
   36bae:	7820      	ldrb	r0, [r4, #0]
   36bb0:	f7ff ffa3 	bl	36afa <__hexdig_fun>
   36bb4:	2800      	cmp	r0, #0
   36bb6:	d14c      	bne.n	36c52 <__gethex+0x12e>
   36bb8:	9a04      	ldr	r2, [sp, #16]
   36bba:	9907      	ldr	r1, [sp, #28]
   36bbc:	0020      	movs	r0, r4
   36bbe:	f7fe fdbd 	bl	3573c <strncmp>
   36bc2:	2800      	cmp	r0, #0
   36bc4:	d109      	bne.n	36bda <__gethex+0xb6>
   36bc6:	2e00      	cmp	r6, #0
   36bc8:	d109      	bne.n	36bde <__gethex+0xba>
   36bca:	9b04      	ldr	r3, [sp, #16]
   36bcc:	18e4      	adds	r4, r4, r3
   36bce:	0026      	movs	r6, r4
   36bd0:	7820      	ldrb	r0, [r4, #0]
   36bd2:	f7ff ff92 	bl	36afa <__hexdig_fun>
   36bd6:	2800      	cmp	r0, #0
   36bd8:	d13d      	bne.n	36c56 <__gethex+0x132>
   36bda:	1e37      	subs	r7, r6, #0
   36bdc:	d001      	beq.n	36be2 <__gethex+0xbe>
   36bde:	1b37      	subs	r7, r6, r4
   36be0:	00bf      	lsls	r7, r7, #2
   36be2:	7823      	ldrb	r3, [r4, #0]
   36be4:	2b50      	cmp	r3, #80	; 0x50
   36be6:	d001      	beq.n	36bec <__gethex+0xc8>
   36be8:	2b70      	cmp	r3, #112	; 0x70
   36bea:	d147      	bne.n	36c7c <__gethex+0x158>
   36bec:	7863      	ldrb	r3, [r4, #1]
   36bee:	2b2b      	cmp	r3, #43	; 0x2b
   36bf0:	d03d      	beq.n	36c6e <__gethex+0x14a>
   36bf2:	2b2d      	cmp	r3, #45	; 0x2d
   36bf4:	d037      	beq.n	36c66 <__gethex+0x142>
   36bf6:	2300      	movs	r3, #0
   36bf8:	1c66      	adds	r6, r4, #1
   36bfa:	9306      	str	r3, [sp, #24]
   36bfc:	7830      	ldrb	r0, [r6, #0]
   36bfe:	f7ff ff7c 	bl	36afa <__hexdig_fun>
   36c02:	1e43      	subs	r3, r0, #1
   36c04:	b2db      	uxtb	r3, r3
   36c06:	2b18      	cmp	r3, #24
   36c08:	d838      	bhi.n	36c7c <__gethex+0x158>
   36c0a:	3810      	subs	r0, #16
   36c0c:	0005      	movs	r5, r0
   36c0e:	3601      	adds	r6, #1
   36c10:	7830      	ldrb	r0, [r6, #0]
   36c12:	f7ff ff72 	bl	36afa <__hexdig_fun>
   36c16:	1e43      	subs	r3, r0, #1
   36c18:	b2db      	uxtb	r3, r3
   36c1a:	2b18      	cmp	r3, #24
   36c1c:	d929      	bls.n	36c72 <__gethex+0x14e>
   36c1e:	9b06      	ldr	r3, [sp, #24]
   36c20:	2b00      	cmp	r3, #0
   36c22:	d000      	beq.n	36c26 <__gethex+0x102>
   36c24:	426d      	negs	r5, r5
   36c26:	197f      	adds	r7, r7, r5
   36c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36c2a:	601e      	str	r6, [r3, #0]
   36c2c:	9b03      	ldr	r3, [sp, #12]
   36c2e:	2b00      	cmp	r3, #0
   36c30:	d026      	beq.n	36c80 <__gethex+0x15c>
   36c32:	2600      	movs	r6, #0
   36c34:	9b08      	ldr	r3, [sp, #32]
   36c36:	42b3      	cmp	r3, r6
   36c38:	d100      	bne.n	36c3c <__gethex+0x118>
   36c3a:	3606      	adds	r6, #6
   36c3c:	0030      	movs	r0, r6
   36c3e:	b00d      	add	sp, #52	; 0x34
   36c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36c42:	9b01      	ldr	r3, [sp, #4]
   36c44:	3301      	adds	r3, #1
   36c46:	9301      	str	r3, [sp, #4]
   36c48:	e7a4      	b.n	36b94 <__gethex+0x70>
   36c4a:	2300      	movs	r3, #0
   36c4c:	9303      	str	r3, [sp, #12]
   36c4e:	001e      	movs	r6, r3
   36c50:	e7ac      	b.n	36bac <__gethex+0x88>
   36c52:	3401      	adds	r4, #1
   36c54:	e7ab      	b.n	36bae <__gethex+0x8a>
   36c56:	3401      	adds	r4, #1
   36c58:	e7ba      	b.n	36bd0 <__gethex+0xac>
   36c5a:	9c01      	ldr	r4, [sp, #4]
   36c5c:	2301      	movs	r3, #1
   36c5e:	9303      	str	r3, [sp, #12]
   36c60:	e7bf      	b.n	36be2 <__gethex+0xbe>
   36c62:	0007      	movs	r7, r0
   36c64:	e7fa      	b.n	36c5c <__gethex+0x138>
   36c66:	2301      	movs	r3, #1
   36c68:	9306      	str	r3, [sp, #24]
   36c6a:	1ca6      	adds	r6, r4, #2
   36c6c:	e7c6      	b.n	36bfc <__gethex+0xd8>
   36c6e:	2300      	movs	r3, #0
   36c70:	e7fa      	b.n	36c68 <__gethex+0x144>
   36c72:	230a      	movs	r3, #10
   36c74:	435d      	muls	r5, r3
   36c76:	182d      	adds	r5, r5, r0
   36c78:	3d10      	subs	r5, #16
   36c7a:	e7c8      	b.n	36c0e <__gethex+0xea>
   36c7c:	0026      	movs	r6, r4
   36c7e:	e7d3      	b.n	36c28 <__gethex+0x104>
   36c80:	9b01      	ldr	r3, [sp, #4]
   36c82:	9903      	ldr	r1, [sp, #12]
   36c84:	1ae3      	subs	r3, r4, r3
   36c86:	3b01      	subs	r3, #1
   36c88:	2b07      	cmp	r3, #7
   36c8a:	dc47      	bgt.n	36d1c <__gethex+0x1f8>
   36c8c:	9805      	ldr	r0, [sp, #20]
   36c8e:	f000 fac1 	bl	37214 <_Balloc>
   36c92:	0003      	movs	r3, r0
   36c94:	3314      	adds	r3, #20
   36c96:	9303      	str	r3, [sp, #12]
   36c98:	9308      	str	r3, [sp, #32]
   36c9a:	2300      	movs	r3, #0
   36c9c:	0005      	movs	r5, r0
   36c9e:	001e      	movs	r6, r3
   36ca0:	9306      	str	r3, [sp, #24]
   36ca2:	9b01      	ldr	r3, [sp, #4]
   36ca4:	42a3      	cmp	r3, r4
   36ca6:	d33c      	bcc.n	36d22 <__gethex+0x1fe>
   36ca8:	9c08      	ldr	r4, [sp, #32]
   36caa:	9b03      	ldr	r3, [sp, #12]
   36cac:	c440      	stmia	r4!, {r6}
   36cae:	1ae4      	subs	r4, r4, r3
   36cb0:	10a4      	asrs	r4, r4, #2
   36cb2:	612c      	str	r4, [r5, #16]
   36cb4:	0030      	movs	r0, r6
   36cb6:	f000 fb79 	bl	373ac <__hi0bits>
   36cba:	9b02      	ldr	r3, [sp, #8]
   36cbc:	0164      	lsls	r4, r4, #5
   36cbe:	681b      	ldr	r3, [r3, #0]
   36cc0:	1a26      	subs	r6, r4, r0
   36cc2:	9301      	str	r3, [sp, #4]
   36cc4:	429e      	cmp	r6, r3
   36cc6:	dd5f      	ble.n	36d88 <__gethex+0x264>
   36cc8:	1af6      	subs	r6, r6, r3
   36cca:	0031      	movs	r1, r6
   36ccc:	0028      	movs	r0, r5
   36cce:	f000 fe72 	bl	379b6 <__any_on>
   36cd2:	1e04      	subs	r4, r0, #0
   36cd4:	d00f      	beq.n	36cf6 <__gethex+0x1d2>
   36cd6:	2401      	movs	r4, #1
   36cd8:	211f      	movs	r1, #31
   36cda:	0020      	movs	r0, r4
   36cdc:	1e73      	subs	r3, r6, #1
   36cde:	4019      	ands	r1, r3
   36ce0:	4088      	lsls	r0, r1
   36ce2:	0001      	movs	r1, r0
   36ce4:	115a      	asrs	r2, r3, #5
   36ce6:	9803      	ldr	r0, [sp, #12]
   36ce8:	0092      	lsls	r2, r2, #2
   36cea:	5812      	ldr	r2, [r2, r0]
   36cec:	420a      	tst	r2, r1
   36cee:	d002      	beq.n	36cf6 <__gethex+0x1d2>
   36cf0:	42a3      	cmp	r3, r4
   36cf2:	dc41      	bgt.n	36d78 <__gethex+0x254>
   36cf4:	2402      	movs	r4, #2
   36cf6:	0031      	movs	r1, r6
   36cf8:	0028      	movs	r0, r5
   36cfa:	f7ff fecc 	bl	36a96 <rshift>
   36cfe:	19bf      	adds	r7, r7, r6
   36d00:	9b02      	ldr	r3, [sp, #8]
   36d02:	689b      	ldr	r3, [r3, #8]
   36d04:	9304      	str	r3, [sp, #16]
   36d06:	429f      	cmp	r7, r3
   36d08:	dd4e      	ble.n	36da8 <__gethex+0x284>
   36d0a:	0029      	movs	r1, r5
   36d0c:	9805      	ldr	r0, [sp, #20]
   36d0e:	f000 fab9 	bl	37284 <_Bfree>
   36d12:	2300      	movs	r3, #0
   36d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   36d16:	26a3      	movs	r6, #163	; 0xa3
   36d18:	6013      	str	r3, [r2, #0]
   36d1a:	e78f      	b.n	36c3c <__gethex+0x118>
   36d1c:	3101      	adds	r1, #1
   36d1e:	105b      	asrs	r3, r3, #1
   36d20:	e7b2      	b.n	36c88 <__gethex+0x164>
   36d22:	1e63      	subs	r3, r4, #1
   36d24:	9309      	str	r3, [sp, #36]	; 0x24
   36d26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   36d28:	781b      	ldrb	r3, [r3, #0]
   36d2a:	4293      	cmp	r3, r2
   36d2c:	d015      	beq.n	36d5a <__gethex+0x236>
   36d2e:	9b06      	ldr	r3, [sp, #24]
   36d30:	2b20      	cmp	r3, #32
   36d32:	d105      	bne.n	36d40 <__gethex+0x21c>
   36d34:	9b08      	ldr	r3, [sp, #32]
   36d36:	601e      	str	r6, [r3, #0]
   36d38:	2600      	movs	r6, #0
   36d3a:	3304      	adds	r3, #4
   36d3c:	9308      	str	r3, [sp, #32]
   36d3e:	9606      	str	r6, [sp, #24]
   36d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36d42:	7818      	ldrb	r0, [r3, #0]
   36d44:	f7ff fed9 	bl	36afa <__hexdig_fun>
   36d48:	230f      	movs	r3, #15
   36d4a:	4018      	ands	r0, r3
   36d4c:	9b06      	ldr	r3, [sp, #24]
   36d4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36d50:	4098      	lsls	r0, r3
   36d52:	3304      	adds	r3, #4
   36d54:	4306      	orrs	r6, r0
   36d56:	9306      	str	r3, [sp, #24]
   36d58:	e7a3      	b.n	36ca2 <__gethex+0x17e>
   36d5a:	2301      	movs	r3, #1
   36d5c:	9a04      	ldr	r2, [sp, #16]
   36d5e:	1a9c      	subs	r4, r3, r2
   36d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36d62:	191c      	adds	r4, r3, r4
   36d64:	9b01      	ldr	r3, [sp, #4]
   36d66:	42a3      	cmp	r3, r4
   36d68:	d8e1      	bhi.n	36d2e <__gethex+0x20a>
   36d6a:	9907      	ldr	r1, [sp, #28]
   36d6c:	0020      	movs	r0, r4
   36d6e:	f7fe fce5 	bl	3573c <strncmp>
   36d72:	2800      	cmp	r0, #0
   36d74:	d095      	beq.n	36ca2 <__gethex+0x17e>
   36d76:	e7da      	b.n	36d2e <__gethex+0x20a>
   36d78:	1eb1      	subs	r1, r6, #2
   36d7a:	0028      	movs	r0, r5
   36d7c:	f000 fe1b 	bl	379b6 <__any_on>
   36d80:	2800      	cmp	r0, #0
   36d82:	d0b7      	beq.n	36cf4 <__gethex+0x1d0>
   36d84:	2403      	movs	r4, #3
   36d86:	e7b6      	b.n	36cf6 <__gethex+0x1d2>
   36d88:	9b01      	ldr	r3, [sp, #4]
   36d8a:	2400      	movs	r4, #0
   36d8c:	429e      	cmp	r6, r3
   36d8e:	dab7      	bge.n	36d00 <__gethex+0x1dc>
   36d90:	1b9e      	subs	r6, r3, r6
   36d92:	0029      	movs	r1, r5
   36d94:	0032      	movs	r2, r6
   36d96:	9805      	ldr	r0, [sp, #20]
   36d98:	f000 fc3c 	bl	37614 <__lshift>
   36d9c:	0003      	movs	r3, r0
   36d9e:	3314      	adds	r3, #20
   36da0:	0005      	movs	r5, r0
   36da2:	1bbf      	subs	r7, r7, r6
   36da4:	9303      	str	r3, [sp, #12]
   36da6:	e7ab      	b.n	36d00 <__gethex+0x1dc>
   36da8:	9b02      	ldr	r3, [sp, #8]
   36daa:	685e      	ldr	r6, [r3, #4]
   36dac:	42b7      	cmp	r7, r6
   36dae:	da6b      	bge.n	36e88 <__gethex+0x364>
   36db0:	9b01      	ldr	r3, [sp, #4]
   36db2:	1bf6      	subs	r6, r6, r7
   36db4:	42b3      	cmp	r3, r6
   36db6:	dc32      	bgt.n	36e1e <__gethex+0x2fa>
   36db8:	9b02      	ldr	r3, [sp, #8]
   36dba:	68db      	ldr	r3, [r3, #12]
   36dbc:	2b02      	cmp	r3, #2
   36dbe:	d026      	beq.n	36e0e <__gethex+0x2ea>
   36dc0:	2b03      	cmp	r3, #3
   36dc2:	d028      	beq.n	36e16 <__gethex+0x2f2>
   36dc4:	2b01      	cmp	r3, #1
   36dc6:	d119      	bne.n	36dfc <__gethex+0x2d8>
   36dc8:	9b01      	ldr	r3, [sp, #4]
   36dca:	42b3      	cmp	r3, r6
   36dcc:	d116      	bne.n	36dfc <__gethex+0x2d8>
   36dce:	2b01      	cmp	r3, #1
   36dd0:	dc0d      	bgt.n	36dee <__gethex+0x2ca>
   36dd2:	9b02      	ldr	r3, [sp, #8]
   36dd4:	2662      	movs	r6, #98	; 0x62
   36dd6:	685b      	ldr	r3, [r3, #4]
   36dd8:	9301      	str	r3, [sp, #4]
   36dda:	9a01      	ldr	r2, [sp, #4]
   36ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36dde:	601a      	str	r2, [r3, #0]
   36de0:	2301      	movs	r3, #1
   36de2:	9a03      	ldr	r2, [sp, #12]
   36de4:	612b      	str	r3, [r5, #16]
   36de6:	6013      	str	r3, [r2, #0]
   36de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   36dea:	601d      	str	r5, [r3, #0]
   36dec:	e726      	b.n	36c3c <__gethex+0x118>
   36dee:	9901      	ldr	r1, [sp, #4]
   36df0:	0028      	movs	r0, r5
   36df2:	3901      	subs	r1, #1
   36df4:	f000 fddf 	bl	379b6 <__any_on>
   36df8:	2800      	cmp	r0, #0
   36dfa:	d1ea      	bne.n	36dd2 <__gethex+0x2ae>
   36dfc:	0029      	movs	r1, r5
   36dfe:	9805      	ldr	r0, [sp, #20]
   36e00:	f000 fa40 	bl	37284 <_Bfree>
   36e04:	2300      	movs	r3, #0
   36e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
   36e08:	2650      	movs	r6, #80	; 0x50
   36e0a:	6013      	str	r3, [r2, #0]
   36e0c:	e716      	b.n	36c3c <__gethex+0x118>
   36e0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   36e10:	2b00      	cmp	r3, #0
   36e12:	d0de      	beq.n	36dd2 <__gethex+0x2ae>
   36e14:	e7f2      	b.n	36dfc <__gethex+0x2d8>
   36e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   36e18:	2b00      	cmp	r3, #0
   36e1a:	d1da      	bne.n	36dd2 <__gethex+0x2ae>
   36e1c:	e7ee      	b.n	36dfc <__gethex+0x2d8>
   36e1e:	1e77      	subs	r7, r6, #1
   36e20:	2c00      	cmp	r4, #0
   36e22:	d12f      	bne.n	36e84 <__gethex+0x360>
   36e24:	2f00      	cmp	r7, #0
   36e26:	d004      	beq.n	36e32 <__gethex+0x30e>
   36e28:	0039      	movs	r1, r7
   36e2a:	0028      	movs	r0, r5
   36e2c:	f000 fdc3 	bl	379b6 <__any_on>
   36e30:	0004      	movs	r4, r0
   36e32:	231f      	movs	r3, #31
   36e34:	117a      	asrs	r2, r7, #5
   36e36:	401f      	ands	r7, r3
   36e38:	3b1e      	subs	r3, #30
   36e3a:	40bb      	lsls	r3, r7
   36e3c:	9903      	ldr	r1, [sp, #12]
   36e3e:	0092      	lsls	r2, r2, #2
   36e40:	5852      	ldr	r2, [r2, r1]
   36e42:	421a      	tst	r2, r3
   36e44:	d001      	beq.n	36e4a <__gethex+0x326>
   36e46:	2302      	movs	r3, #2
   36e48:	431c      	orrs	r4, r3
   36e4a:	9b01      	ldr	r3, [sp, #4]
   36e4c:	0031      	movs	r1, r6
   36e4e:	1b9b      	subs	r3, r3, r6
   36e50:	2602      	movs	r6, #2
   36e52:	0028      	movs	r0, r5
   36e54:	9301      	str	r3, [sp, #4]
   36e56:	f7ff fe1e 	bl	36a96 <rshift>
   36e5a:	9b02      	ldr	r3, [sp, #8]
   36e5c:	685f      	ldr	r7, [r3, #4]
   36e5e:	2c00      	cmp	r4, #0
   36e60:	d041      	beq.n	36ee6 <__gethex+0x3c2>
   36e62:	9b02      	ldr	r3, [sp, #8]
   36e64:	68db      	ldr	r3, [r3, #12]
   36e66:	2b02      	cmp	r3, #2
   36e68:	d010      	beq.n	36e8c <__gethex+0x368>
   36e6a:	2b03      	cmp	r3, #3
   36e6c:	d012      	beq.n	36e94 <__gethex+0x370>
   36e6e:	2b01      	cmp	r3, #1
   36e70:	d106      	bne.n	36e80 <__gethex+0x35c>
   36e72:	07a2      	lsls	r2, r4, #30
   36e74:	d504      	bpl.n	36e80 <__gethex+0x35c>
   36e76:	9a03      	ldr	r2, [sp, #12]
   36e78:	6812      	ldr	r2, [r2, #0]
   36e7a:	4314      	orrs	r4, r2
   36e7c:	421c      	tst	r4, r3
   36e7e:	d10c      	bne.n	36e9a <__gethex+0x376>
   36e80:	2310      	movs	r3, #16
   36e82:	e02f      	b.n	36ee4 <__gethex+0x3c0>
   36e84:	2401      	movs	r4, #1
   36e86:	e7d4      	b.n	36e32 <__gethex+0x30e>
   36e88:	2601      	movs	r6, #1
   36e8a:	e7e8      	b.n	36e5e <__gethex+0x33a>
   36e8c:	2301      	movs	r3, #1
   36e8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   36e90:	1a9b      	subs	r3, r3, r2
   36e92:	9313      	str	r3, [sp, #76]	; 0x4c
   36e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   36e96:	2b00      	cmp	r3, #0
   36e98:	d0f2      	beq.n	36e80 <__gethex+0x35c>
   36e9a:	692c      	ldr	r4, [r5, #16]
   36e9c:	00a3      	lsls	r3, r4, #2
   36e9e:	9304      	str	r3, [sp, #16]
   36ea0:	002b      	movs	r3, r5
   36ea2:	00a2      	lsls	r2, r4, #2
   36ea4:	3314      	adds	r3, #20
   36ea6:	1899      	adds	r1, r3, r2
   36ea8:	2200      	movs	r2, #0
   36eaa:	4694      	mov	ip, r2
   36eac:	681a      	ldr	r2, [r3, #0]
   36eae:	1c50      	adds	r0, r2, #1
   36eb0:	d01e      	beq.n	36ef0 <__gethex+0x3cc>
   36eb2:	3201      	adds	r2, #1
   36eb4:	601a      	str	r2, [r3, #0]
   36eb6:	002b      	movs	r3, r5
   36eb8:	3314      	adds	r3, #20
   36eba:	2e02      	cmp	r6, #2
   36ebc:	d13b      	bne.n	36f36 <__gethex+0x412>
   36ebe:	9a02      	ldr	r2, [sp, #8]
   36ec0:	9901      	ldr	r1, [sp, #4]
   36ec2:	6812      	ldr	r2, [r2, #0]
   36ec4:	3a01      	subs	r2, #1
   36ec6:	4291      	cmp	r1, r2
   36ec8:	d10b      	bne.n	36ee2 <__gethex+0x3be>
   36eca:	114a      	asrs	r2, r1, #5
   36ecc:	211f      	movs	r1, #31
   36ece:	9801      	ldr	r0, [sp, #4]
   36ed0:	0092      	lsls	r2, r2, #2
   36ed2:	4001      	ands	r1, r0
   36ed4:	2001      	movs	r0, #1
   36ed6:	0004      	movs	r4, r0
   36ed8:	408c      	lsls	r4, r1
   36eda:	58d3      	ldr	r3, [r2, r3]
   36edc:	4223      	tst	r3, r4
   36ede:	d000      	beq.n	36ee2 <__gethex+0x3be>
   36ee0:	2601      	movs	r6, #1
   36ee2:	2320      	movs	r3, #32
   36ee4:	431e      	orrs	r6, r3
   36ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   36ee8:	601d      	str	r5, [r3, #0]
   36eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   36eec:	601f      	str	r7, [r3, #0]
   36eee:	e6a5      	b.n	36c3c <__gethex+0x118>
   36ef0:	4662      	mov	r2, ip
   36ef2:	c304      	stmia	r3!, {r2}
   36ef4:	4299      	cmp	r1, r3
   36ef6:	d8d9      	bhi.n	36eac <__gethex+0x388>
   36ef8:	68ab      	ldr	r3, [r5, #8]
   36efa:	429c      	cmp	r4, r3
   36efc:	db12      	blt.n	36f24 <__gethex+0x400>
   36efe:	686b      	ldr	r3, [r5, #4]
   36f00:	9805      	ldr	r0, [sp, #20]
   36f02:	1c59      	adds	r1, r3, #1
   36f04:	f000 f986 	bl	37214 <_Balloc>
   36f08:	0029      	movs	r1, r5
   36f0a:	692b      	ldr	r3, [r5, #16]
   36f0c:	9003      	str	r0, [sp, #12]
   36f0e:	1c9a      	adds	r2, r3, #2
   36f10:	0092      	lsls	r2, r2, #2
   36f12:	310c      	adds	r1, #12
   36f14:	300c      	adds	r0, #12
   36f16:	f7fe fa13 	bl	35340 <memcpy>
   36f1a:	0029      	movs	r1, r5
   36f1c:	9805      	ldr	r0, [sp, #20]
   36f1e:	f000 f9b1 	bl	37284 <_Bfree>
   36f22:	9d03      	ldr	r5, [sp, #12]
   36f24:	692b      	ldr	r3, [r5, #16]
   36f26:	1c5a      	adds	r2, r3, #1
   36f28:	612a      	str	r2, [r5, #16]
   36f2a:	2201      	movs	r2, #1
   36f2c:	3304      	adds	r3, #4
   36f2e:	009b      	lsls	r3, r3, #2
   36f30:	18eb      	adds	r3, r5, r3
   36f32:	605a      	str	r2, [r3, #4]
   36f34:	e7bf      	b.n	36eb6 <__gethex+0x392>
   36f36:	692a      	ldr	r2, [r5, #16]
   36f38:	4294      	cmp	r4, r2
   36f3a:	da0a      	bge.n	36f52 <__gethex+0x42e>
   36f3c:	2101      	movs	r1, #1
   36f3e:	0028      	movs	r0, r5
   36f40:	f7ff fda9 	bl	36a96 <rshift>
   36f44:	9b02      	ldr	r3, [sp, #8]
   36f46:	3701      	adds	r7, #1
   36f48:	689b      	ldr	r3, [r3, #8]
   36f4a:	429f      	cmp	r7, r3
   36f4c:	dd00      	ble.n	36f50 <__gethex+0x42c>
   36f4e:	e6dc      	b.n	36d0a <__gethex+0x1e6>
   36f50:	e7c6      	b.n	36ee0 <__gethex+0x3bc>
   36f52:	241f      	movs	r4, #31
   36f54:	9a01      	ldr	r2, [sp, #4]
   36f56:	2601      	movs	r6, #1
   36f58:	4022      	ands	r2, r4
   36f5a:	1e14      	subs	r4, r2, #0
   36f5c:	d0c1      	beq.n	36ee2 <__gethex+0x3be>
   36f5e:	9a04      	ldr	r2, [sp, #16]
   36f60:	189b      	adds	r3, r3, r2
   36f62:	3b04      	subs	r3, #4
   36f64:	6818      	ldr	r0, [r3, #0]
   36f66:	f000 fa21 	bl	373ac <__hi0bits>
   36f6a:	2120      	movs	r1, #32
   36f6c:	1b0c      	subs	r4, r1, r4
   36f6e:	42a0      	cmp	r0, r4
   36f70:	dbe4      	blt.n	36f3c <__gethex+0x418>
   36f72:	e7b6      	b.n	36ee2 <__gethex+0x3be>

00036f74 <L_shift>:
   36f74:	2308      	movs	r3, #8
   36f76:	b570      	push	{r4, r5, r6, lr}
   36f78:	2520      	movs	r5, #32
   36f7a:	1a9a      	subs	r2, r3, r2
   36f7c:	0092      	lsls	r2, r2, #2
   36f7e:	1aad      	subs	r5, r5, r2
   36f80:	6843      	ldr	r3, [r0, #4]
   36f82:	6806      	ldr	r6, [r0, #0]
   36f84:	001c      	movs	r4, r3
   36f86:	40ac      	lsls	r4, r5
   36f88:	40d3      	lsrs	r3, r2
   36f8a:	4334      	orrs	r4, r6
   36f8c:	c010      	stmia	r0!, {r4}
   36f8e:	6003      	str	r3, [r0, #0]
   36f90:	4288      	cmp	r0, r1
   36f92:	d3f5      	bcc.n	36f80 <L_shift+0xc>
   36f94:	bd70      	pop	{r4, r5, r6, pc}

00036f96 <__match>:
   36f96:	b530      	push	{r4, r5, lr}
   36f98:	6803      	ldr	r3, [r0, #0]
   36f9a:	780c      	ldrb	r4, [r1, #0]
   36f9c:	3301      	adds	r3, #1
   36f9e:	2c00      	cmp	r4, #0
   36fa0:	d102      	bne.n	36fa8 <__match+0x12>
   36fa2:	6003      	str	r3, [r0, #0]
   36fa4:	2001      	movs	r0, #1
   36fa6:	bd30      	pop	{r4, r5, pc}
   36fa8:	781a      	ldrb	r2, [r3, #0]
   36faa:	0015      	movs	r5, r2
   36fac:	3d41      	subs	r5, #65	; 0x41
   36fae:	2d19      	cmp	r5, #25
   36fb0:	d800      	bhi.n	36fb4 <__match+0x1e>
   36fb2:	3220      	adds	r2, #32
   36fb4:	3101      	adds	r1, #1
   36fb6:	42a2      	cmp	r2, r4
   36fb8:	d0ef      	beq.n	36f9a <__match+0x4>
   36fba:	2000      	movs	r0, #0
   36fbc:	e7f3      	b.n	36fa6 <__match+0x10>

00036fbe <__hexnan>:
   36fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   36fc0:	b08b      	sub	sp, #44	; 0x2c
   36fc2:	9201      	str	r2, [sp, #4]
   36fc4:	680a      	ldr	r2, [r1, #0]
   36fc6:	9901      	ldr	r1, [sp, #4]
   36fc8:	1153      	asrs	r3, r2, #5
   36fca:	009b      	lsls	r3, r3, #2
   36fcc:	18cb      	adds	r3, r1, r3
   36fce:	9303      	str	r3, [sp, #12]
   36fd0:	231f      	movs	r3, #31
   36fd2:	401a      	ands	r2, r3
   36fd4:	9008      	str	r0, [sp, #32]
   36fd6:	9206      	str	r2, [sp, #24]
   36fd8:	d002      	beq.n	36fe0 <__hexnan+0x22>
   36fda:	9b03      	ldr	r3, [sp, #12]
   36fdc:	3304      	adds	r3, #4
   36fde:	9303      	str	r3, [sp, #12]
   36fe0:	9b03      	ldr	r3, [sp, #12]
   36fe2:	2500      	movs	r5, #0
   36fe4:	1f1e      	subs	r6, r3, #4
   36fe6:	0037      	movs	r7, r6
   36fe8:	0034      	movs	r4, r6
   36fea:	9b08      	ldr	r3, [sp, #32]
   36fec:	6035      	str	r5, [r6, #0]
   36fee:	681b      	ldr	r3, [r3, #0]
   36ff0:	9507      	str	r5, [sp, #28]
   36ff2:	9304      	str	r3, [sp, #16]
   36ff4:	9502      	str	r5, [sp, #8]
   36ff6:	9b04      	ldr	r3, [sp, #16]
   36ff8:	3301      	adds	r3, #1
   36ffa:	9309      	str	r3, [sp, #36]	; 0x24
   36ffc:	9b04      	ldr	r3, [sp, #16]
   36ffe:	785b      	ldrb	r3, [r3, #1]
   37000:	9305      	str	r3, [sp, #20]
   37002:	2b00      	cmp	r3, #0
   37004:	d028      	beq.n	37058 <__hexnan+0x9a>
   37006:	9805      	ldr	r0, [sp, #20]
   37008:	f7ff fd77 	bl	36afa <__hexdig_fun>
   3700c:	2800      	cmp	r0, #0
   3700e:	d145      	bne.n	3709c <__hexnan+0xde>
   37010:	9b05      	ldr	r3, [sp, #20]
   37012:	2b20      	cmp	r3, #32
   37014:	d819      	bhi.n	3704a <__hexnan+0x8c>
   37016:	9b02      	ldr	r3, [sp, #8]
   37018:	9a07      	ldr	r2, [sp, #28]
   3701a:	4293      	cmp	r3, r2
   3701c:	dd12      	ble.n	37044 <__hexnan+0x86>
   3701e:	42bc      	cmp	r4, r7
   37020:	d206      	bcs.n	37030 <__hexnan+0x72>
   37022:	2d07      	cmp	r5, #7
   37024:	dc04      	bgt.n	37030 <__hexnan+0x72>
   37026:	002a      	movs	r2, r5
   37028:	0039      	movs	r1, r7
   3702a:	0020      	movs	r0, r4
   3702c:	f7ff ffa2 	bl	36f74 <L_shift>
   37030:	9b01      	ldr	r3, [sp, #4]
   37032:	2508      	movs	r5, #8
   37034:	429c      	cmp	r4, r3
   37036:	d905      	bls.n	37044 <__hexnan+0x86>
   37038:	1f27      	subs	r7, r4, #4
   3703a:	2500      	movs	r5, #0
   3703c:	003c      	movs	r4, r7
   3703e:	9b02      	ldr	r3, [sp, #8]
   37040:	603d      	str	r5, [r7, #0]
   37042:	9307      	str	r3, [sp, #28]
   37044:	9b09      	ldr	r3, [sp, #36]	; 0x24
   37046:	9304      	str	r3, [sp, #16]
   37048:	e7d5      	b.n	36ff6 <__hexnan+0x38>
   3704a:	9b05      	ldr	r3, [sp, #20]
   3704c:	2b29      	cmp	r3, #41	; 0x29
   3704e:	d14a      	bne.n	370e6 <__hexnan+0x128>
   37050:	9b04      	ldr	r3, [sp, #16]
   37052:	9a08      	ldr	r2, [sp, #32]
   37054:	3302      	adds	r3, #2
   37056:	6013      	str	r3, [r2, #0]
   37058:	9b02      	ldr	r3, [sp, #8]
   3705a:	2b00      	cmp	r3, #0
   3705c:	d043      	beq.n	370e6 <__hexnan+0x128>
   3705e:	42bc      	cmp	r4, r7
   37060:	d206      	bcs.n	37070 <__hexnan+0xb2>
   37062:	2d07      	cmp	r5, #7
   37064:	dc04      	bgt.n	37070 <__hexnan+0xb2>
   37066:	002a      	movs	r2, r5
   37068:	0039      	movs	r1, r7
   3706a:	0020      	movs	r0, r4
   3706c:	f7ff ff82 	bl	36f74 <L_shift>
   37070:	9b01      	ldr	r3, [sp, #4]
   37072:	429c      	cmp	r4, r3
   37074:	d926      	bls.n	370c4 <__hexnan+0x106>
   37076:	cc04      	ldmia	r4!, {r2}
   37078:	601a      	str	r2, [r3, #0]
   3707a:	3304      	adds	r3, #4
   3707c:	42a6      	cmp	r6, r4
   3707e:	d2fa      	bcs.n	37076 <__hexnan+0xb8>
   37080:	2200      	movs	r2, #0
   37082:	c304      	stmia	r3!, {r2}
   37084:	429e      	cmp	r6, r3
   37086:	d2fc      	bcs.n	37082 <__hexnan+0xc4>
   37088:	6833      	ldr	r3, [r6, #0]
   3708a:	2b00      	cmp	r3, #0
   3708c:	d104      	bne.n	37098 <__hexnan+0xda>
   3708e:	9b01      	ldr	r3, [sp, #4]
   37090:	429e      	cmp	r6, r3
   37092:	d126      	bne.n	370e2 <__hexnan+0x124>
   37094:	2301      	movs	r3, #1
   37096:	6033      	str	r3, [r6, #0]
   37098:	2005      	movs	r0, #5
   3709a:	e025      	b.n	370e8 <__hexnan+0x12a>
   3709c:	9b02      	ldr	r3, [sp, #8]
   3709e:	3501      	adds	r5, #1
   370a0:	3301      	adds	r3, #1
   370a2:	9302      	str	r3, [sp, #8]
   370a4:	2d08      	cmp	r5, #8
   370a6:	dd06      	ble.n	370b6 <__hexnan+0xf8>
   370a8:	9b01      	ldr	r3, [sp, #4]
   370aa:	429c      	cmp	r4, r3
   370ac:	d9ca      	bls.n	37044 <__hexnan+0x86>
   370ae:	2300      	movs	r3, #0
   370b0:	2501      	movs	r5, #1
   370b2:	3c04      	subs	r4, #4
   370b4:	6023      	str	r3, [r4, #0]
   370b6:	220f      	movs	r2, #15
   370b8:	6823      	ldr	r3, [r4, #0]
   370ba:	4010      	ands	r0, r2
   370bc:	011b      	lsls	r3, r3, #4
   370be:	4318      	orrs	r0, r3
   370c0:	6020      	str	r0, [r4, #0]
   370c2:	e7bf      	b.n	37044 <__hexnan+0x86>
   370c4:	9b06      	ldr	r3, [sp, #24]
   370c6:	2b00      	cmp	r3, #0
   370c8:	d0de      	beq.n	37088 <__hexnan+0xca>
   370ca:	2120      	movs	r1, #32
   370cc:	9a06      	ldr	r2, [sp, #24]
   370ce:	9b03      	ldr	r3, [sp, #12]
   370d0:	1a89      	subs	r1, r1, r2
   370d2:	2201      	movs	r2, #1
   370d4:	4252      	negs	r2, r2
   370d6:	40ca      	lsrs	r2, r1
   370d8:	3b04      	subs	r3, #4
   370da:	6819      	ldr	r1, [r3, #0]
   370dc:	400a      	ands	r2, r1
   370de:	601a      	str	r2, [r3, #0]
   370e0:	e7d2      	b.n	37088 <__hexnan+0xca>
   370e2:	3e04      	subs	r6, #4
   370e4:	e7d0      	b.n	37088 <__hexnan+0xca>
   370e6:	2004      	movs	r0, #4
   370e8:	b00b      	add	sp, #44	; 0x2c
   370ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000370ec <__locale_ctype_ptr_l>:
   370ec:	30ec      	adds	r0, #236	; 0xec
   370ee:	6800      	ldr	r0, [r0, #0]
   370f0:	4770      	bx	lr
	...

000370f4 <__locale_ctype_ptr>:
   370f4:	4b04      	ldr	r3, [pc, #16]	; (37108 <__locale_ctype_ptr+0x14>)
   370f6:	681b      	ldr	r3, [r3, #0]
   370f8:	6a1b      	ldr	r3, [r3, #32]
   370fa:	2b00      	cmp	r3, #0
   370fc:	d100      	bne.n	37100 <__locale_ctype_ptr+0xc>
   370fe:	4b03      	ldr	r3, [pc, #12]	; (3710c <__locale_ctype_ptr+0x18>)
   37100:	33ec      	adds	r3, #236	; 0xec
   37102:	6818      	ldr	r0, [r3, #0]
   37104:	4770      	bx	lr
   37106:	46c0      	nop			; (mov r8, r8)
   37108:	20000130 	.word	0x20000130
   3710c:	20000194 	.word	0x20000194

00037110 <__localeconv_l>:
   37110:	30f0      	adds	r0, #240	; 0xf0
   37112:	4770      	bx	lr

00037114 <__swhatbuf_r>:
   37114:	b570      	push	{r4, r5, r6, lr}
   37116:	000e      	movs	r6, r1
   37118:	001d      	movs	r5, r3
   3711a:	230e      	movs	r3, #14
   3711c:	5ec9      	ldrsh	r1, [r1, r3]
   3711e:	b090      	sub	sp, #64	; 0x40
   37120:	0014      	movs	r4, r2
   37122:	2900      	cmp	r1, #0
   37124:	da07      	bge.n	37136 <__swhatbuf_r+0x22>
   37126:	2300      	movs	r3, #0
   37128:	602b      	str	r3, [r5, #0]
   3712a:	89b3      	ldrh	r3, [r6, #12]
   3712c:	061b      	lsls	r3, r3, #24
   3712e:	d411      	bmi.n	37154 <__swhatbuf_r+0x40>
   37130:	2380      	movs	r3, #128	; 0x80
   37132:	00db      	lsls	r3, r3, #3
   37134:	e00f      	b.n	37156 <__swhatbuf_r+0x42>
   37136:	aa01      	add	r2, sp, #4
   37138:	f000 ffe8 	bl	3810c <_fstat_r>
   3713c:	2800      	cmp	r0, #0
   3713e:	dbf2      	blt.n	37126 <__swhatbuf_r+0x12>
   37140:	22f0      	movs	r2, #240	; 0xf0
   37142:	9b02      	ldr	r3, [sp, #8]
   37144:	0212      	lsls	r2, r2, #8
   37146:	4013      	ands	r3, r2
   37148:	4a05      	ldr	r2, [pc, #20]	; (37160 <__swhatbuf_r+0x4c>)
   3714a:	189b      	adds	r3, r3, r2
   3714c:	425a      	negs	r2, r3
   3714e:	4153      	adcs	r3, r2
   37150:	602b      	str	r3, [r5, #0]
   37152:	e7ed      	b.n	37130 <__swhatbuf_r+0x1c>
   37154:	2340      	movs	r3, #64	; 0x40
   37156:	2000      	movs	r0, #0
   37158:	6023      	str	r3, [r4, #0]
   3715a:	b010      	add	sp, #64	; 0x40
   3715c:	bd70      	pop	{r4, r5, r6, pc}
   3715e:	46c0      	nop			; (mov r8, r8)
   37160:	ffffe000 	.word	0xffffe000

00037164 <__smakebuf_r>:
   37164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37166:	2602      	movs	r6, #2
   37168:	898b      	ldrh	r3, [r1, #12]
   3716a:	0005      	movs	r5, r0
   3716c:	000c      	movs	r4, r1
   3716e:	4233      	tst	r3, r6
   37170:	d006      	beq.n	37180 <__smakebuf_r+0x1c>
   37172:	0023      	movs	r3, r4
   37174:	3347      	adds	r3, #71	; 0x47
   37176:	6023      	str	r3, [r4, #0]
   37178:	6123      	str	r3, [r4, #16]
   3717a:	2301      	movs	r3, #1
   3717c:	6163      	str	r3, [r4, #20]
   3717e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   37180:	ab01      	add	r3, sp, #4
   37182:	466a      	mov	r2, sp
   37184:	f7ff ffc6 	bl	37114 <__swhatbuf_r>
   37188:	9900      	ldr	r1, [sp, #0]
   3718a:	0007      	movs	r7, r0
   3718c:	0028      	movs	r0, r5
   3718e:	f7fe f945 	bl	3541c <_malloc_r>
   37192:	2800      	cmp	r0, #0
   37194:	d108      	bne.n	371a8 <__smakebuf_r+0x44>
   37196:	220c      	movs	r2, #12
   37198:	5ea3      	ldrsh	r3, [r4, r2]
   3719a:	059a      	lsls	r2, r3, #22
   3719c:	d4ef      	bmi.n	3717e <__smakebuf_r+0x1a>
   3719e:	2203      	movs	r2, #3
   371a0:	4393      	bics	r3, r2
   371a2:	431e      	orrs	r6, r3
   371a4:	81a6      	strh	r6, [r4, #12]
   371a6:	e7e4      	b.n	37172 <__smakebuf_r+0xe>
   371a8:	4b0f      	ldr	r3, [pc, #60]	; (371e8 <__smakebuf_r+0x84>)
   371aa:	62ab      	str	r3, [r5, #40]	; 0x28
   371ac:	2380      	movs	r3, #128	; 0x80
   371ae:	89a2      	ldrh	r2, [r4, #12]
   371b0:	6020      	str	r0, [r4, #0]
   371b2:	4313      	orrs	r3, r2
   371b4:	81a3      	strh	r3, [r4, #12]
   371b6:	9b00      	ldr	r3, [sp, #0]
   371b8:	6120      	str	r0, [r4, #16]
   371ba:	6163      	str	r3, [r4, #20]
   371bc:	9b01      	ldr	r3, [sp, #4]
   371be:	2b00      	cmp	r3, #0
   371c0:	d00d      	beq.n	371de <__smakebuf_r+0x7a>
   371c2:	230e      	movs	r3, #14
   371c4:	5ee1      	ldrsh	r1, [r4, r3]
   371c6:	0028      	movs	r0, r5
   371c8:	f000 ffb2 	bl	38130 <_isatty_r>
   371cc:	2800      	cmp	r0, #0
   371ce:	d006      	beq.n	371de <__smakebuf_r+0x7a>
   371d0:	2203      	movs	r2, #3
   371d2:	89a3      	ldrh	r3, [r4, #12]
   371d4:	4393      	bics	r3, r2
   371d6:	001a      	movs	r2, r3
   371d8:	2301      	movs	r3, #1
   371da:	4313      	orrs	r3, r2
   371dc:	81a3      	strh	r3, [r4, #12]
   371de:	89a0      	ldrh	r0, [r4, #12]
   371e0:	4338      	orrs	r0, r7
   371e2:	81a0      	strh	r0, [r4, #12]
   371e4:	e7cb      	b.n	3717e <__smakebuf_r+0x1a>
   371e6:	46c0      	nop			; (mov r8, r8)
   371e8:	000368e9 	.word	0x000368e9

000371ec <__ascii_mbtowc>:
   371ec:	b082      	sub	sp, #8
   371ee:	2900      	cmp	r1, #0
   371f0:	d100      	bne.n	371f4 <__ascii_mbtowc+0x8>
   371f2:	a901      	add	r1, sp, #4
   371f4:	1e10      	subs	r0, r2, #0
   371f6:	d006      	beq.n	37206 <__ascii_mbtowc+0x1a>
   371f8:	2b00      	cmp	r3, #0
   371fa:	d006      	beq.n	3720a <__ascii_mbtowc+0x1e>
   371fc:	7813      	ldrb	r3, [r2, #0]
   371fe:	600b      	str	r3, [r1, #0]
   37200:	7810      	ldrb	r0, [r2, #0]
   37202:	1e43      	subs	r3, r0, #1
   37204:	4198      	sbcs	r0, r3
   37206:	b002      	add	sp, #8
   37208:	4770      	bx	lr
   3720a:	2002      	movs	r0, #2
   3720c:	4240      	negs	r0, r0
   3720e:	e7fa      	b.n	37206 <__ascii_mbtowc+0x1a>

00037210 <__malloc_lock>:
   37210:	4770      	bx	lr

00037212 <__malloc_unlock>:
   37212:	4770      	bx	lr

00037214 <_Balloc>:
   37214:	b570      	push	{r4, r5, r6, lr}
   37216:	6a46      	ldr	r6, [r0, #36]	; 0x24
   37218:	0004      	movs	r4, r0
   3721a:	000d      	movs	r5, r1
   3721c:	2e00      	cmp	r6, #0
   3721e:	d107      	bne.n	37230 <_Balloc+0x1c>
   37220:	2010      	movs	r0, #16
   37222:	f7fe f879 	bl	35318 <malloc>
   37226:	6260      	str	r0, [r4, #36]	; 0x24
   37228:	6046      	str	r6, [r0, #4]
   3722a:	6086      	str	r6, [r0, #8]
   3722c:	6006      	str	r6, [r0, #0]
   3722e:	60c6      	str	r6, [r0, #12]
   37230:	6a66      	ldr	r6, [r4, #36]	; 0x24
   37232:	68f3      	ldr	r3, [r6, #12]
   37234:	2b00      	cmp	r3, #0
   37236:	d013      	beq.n	37260 <_Balloc+0x4c>
   37238:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3723a:	00aa      	lsls	r2, r5, #2
   3723c:	68db      	ldr	r3, [r3, #12]
   3723e:	189b      	adds	r3, r3, r2
   37240:	6818      	ldr	r0, [r3, #0]
   37242:	2800      	cmp	r0, #0
   37244:	d118      	bne.n	37278 <_Balloc+0x64>
   37246:	2101      	movs	r1, #1
   37248:	000e      	movs	r6, r1
   3724a:	40ae      	lsls	r6, r5
   3724c:	1d72      	adds	r2, r6, #5
   3724e:	0092      	lsls	r2, r2, #2
   37250:	0020      	movs	r0, r4
   37252:	f000 fbd2 	bl	379fa <_calloc_r>
   37256:	2800      	cmp	r0, #0
   37258:	d00c      	beq.n	37274 <_Balloc+0x60>
   3725a:	6045      	str	r5, [r0, #4]
   3725c:	6086      	str	r6, [r0, #8]
   3725e:	e00d      	b.n	3727c <_Balloc+0x68>
   37260:	2221      	movs	r2, #33	; 0x21
   37262:	2104      	movs	r1, #4
   37264:	0020      	movs	r0, r4
   37266:	f000 fbc8 	bl	379fa <_calloc_r>
   3726a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3726c:	60f0      	str	r0, [r6, #12]
   3726e:	68db      	ldr	r3, [r3, #12]
   37270:	2b00      	cmp	r3, #0
   37272:	d1e1      	bne.n	37238 <_Balloc+0x24>
   37274:	2000      	movs	r0, #0
   37276:	bd70      	pop	{r4, r5, r6, pc}
   37278:	6802      	ldr	r2, [r0, #0]
   3727a:	601a      	str	r2, [r3, #0]
   3727c:	2300      	movs	r3, #0
   3727e:	6103      	str	r3, [r0, #16]
   37280:	60c3      	str	r3, [r0, #12]
   37282:	e7f8      	b.n	37276 <_Balloc+0x62>

00037284 <_Bfree>:
   37284:	b570      	push	{r4, r5, r6, lr}
   37286:	6a44      	ldr	r4, [r0, #36]	; 0x24
   37288:	0006      	movs	r6, r0
   3728a:	000d      	movs	r5, r1
   3728c:	2c00      	cmp	r4, #0
   3728e:	d107      	bne.n	372a0 <_Bfree+0x1c>
   37290:	2010      	movs	r0, #16
   37292:	f7fe f841 	bl	35318 <malloc>
   37296:	6270      	str	r0, [r6, #36]	; 0x24
   37298:	6044      	str	r4, [r0, #4]
   3729a:	6084      	str	r4, [r0, #8]
   3729c:	6004      	str	r4, [r0, #0]
   3729e:	60c4      	str	r4, [r0, #12]
   372a0:	2d00      	cmp	r5, #0
   372a2:	d007      	beq.n	372b4 <_Bfree+0x30>
   372a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   372a6:	686a      	ldr	r2, [r5, #4]
   372a8:	68db      	ldr	r3, [r3, #12]
   372aa:	0092      	lsls	r2, r2, #2
   372ac:	189b      	adds	r3, r3, r2
   372ae:	681a      	ldr	r2, [r3, #0]
   372b0:	602a      	str	r2, [r5, #0]
   372b2:	601d      	str	r5, [r3, #0]
   372b4:	bd70      	pop	{r4, r5, r6, pc}

000372b6 <__multadd>:
   372b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   372b8:	001e      	movs	r6, r3
   372ba:	2314      	movs	r3, #20
   372bc:	469c      	mov	ip, r3
   372be:	0007      	movs	r7, r0
   372c0:	000c      	movs	r4, r1
   372c2:	2000      	movs	r0, #0
   372c4:	690d      	ldr	r5, [r1, #16]
   372c6:	448c      	add	ip, r1
   372c8:	4663      	mov	r3, ip
   372ca:	8819      	ldrh	r1, [r3, #0]
   372cc:	681b      	ldr	r3, [r3, #0]
   372ce:	4351      	muls	r1, r2
   372d0:	0c1b      	lsrs	r3, r3, #16
   372d2:	4353      	muls	r3, r2
   372d4:	1989      	adds	r1, r1, r6
   372d6:	0c0e      	lsrs	r6, r1, #16
   372d8:	199b      	adds	r3, r3, r6
   372da:	b289      	uxth	r1, r1
   372dc:	0c1e      	lsrs	r6, r3, #16
   372de:	041b      	lsls	r3, r3, #16
   372e0:	185b      	adds	r3, r3, r1
   372e2:	4661      	mov	r1, ip
   372e4:	3001      	adds	r0, #1
   372e6:	c108      	stmia	r1!, {r3}
   372e8:	468c      	mov	ip, r1
   372ea:	4285      	cmp	r5, r0
   372ec:	dcec      	bgt.n	372c8 <__multadd+0x12>
   372ee:	2e00      	cmp	r6, #0
   372f0:	d01b      	beq.n	3732a <__multadd+0x74>
   372f2:	68a3      	ldr	r3, [r4, #8]
   372f4:	429d      	cmp	r5, r3
   372f6:	db12      	blt.n	3731e <__multadd+0x68>
   372f8:	6863      	ldr	r3, [r4, #4]
   372fa:	0038      	movs	r0, r7
   372fc:	1c59      	adds	r1, r3, #1
   372fe:	f7ff ff89 	bl	37214 <_Balloc>
   37302:	0021      	movs	r1, r4
   37304:	6923      	ldr	r3, [r4, #16]
   37306:	9001      	str	r0, [sp, #4]
   37308:	1c9a      	adds	r2, r3, #2
   3730a:	0092      	lsls	r2, r2, #2
   3730c:	310c      	adds	r1, #12
   3730e:	300c      	adds	r0, #12
   37310:	f7fe f816 	bl	35340 <memcpy>
   37314:	0021      	movs	r1, r4
   37316:	0038      	movs	r0, r7
   37318:	f7ff ffb4 	bl	37284 <_Bfree>
   3731c:	9c01      	ldr	r4, [sp, #4]
   3731e:	1d2b      	adds	r3, r5, #4
   37320:	009b      	lsls	r3, r3, #2
   37322:	18e3      	adds	r3, r4, r3
   37324:	3501      	adds	r5, #1
   37326:	605e      	str	r6, [r3, #4]
   37328:	6125      	str	r5, [r4, #16]
   3732a:	0020      	movs	r0, r4
   3732c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0003732e <__s2b>:
   3732e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37330:	0006      	movs	r6, r0
   37332:	0018      	movs	r0, r3
   37334:	000c      	movs	r4, r1
   37336:	3008      	adds	r0, #8
   37338:	2109      	movs	r1, #9
   3733a:	9301      	str	r3, [sp, #4]
   3733c:	0015      	movs	r5, r2
   3733e:	f7fb ff03 	bl	33148 <__divsi3>
   37342:	2301      	movs	r3, #1
   37344:	2100      	movs	r1, #0
   37346:	4283      	cmp	r3, r0
   37348:	db20      	blt.n	3738c <__s2b+0x5e>
   3734a:	0030      	movs	r0, r6
   3734c:	f7ff ff62 	bl	37214 <_Balloc>
   37350:	9b08      	ldr	r3, [sp, #32]
   37352:	6143      	str	r3, [r0, #20]
   37354:	2301      	movs	r3, #1
   37356:	6103      	str	r3, [r0, #16]
   37358:	2d09      	cmp	r5, #9
   3735a:	dd1a      	ble.n	37392 <__s2b+0x64>
   3735c:	0023      	movs	r3, r4
   3735e:	3309      	adds	r3, #9
   37360:	001f      	movs	r7, r3
   37362:	9300      	str	r3, [sp, #0]
   37364:	1964      	adds	r4, r4, r5
   37366:	783b      	ldrb	r3, [r7, #0]
   37368:	0001      	movs	r1, r0
   3736a:	3b30      	subs	r3, #48	; 0x30
   3736c:	220a      	movs	r2, #10
   3736e:	0030      	movs	r0, r6
   37370:	3701      	adds	r7, #1
   37372:	f7ff ffa0 	bl	372b6 <__multadd>
   37376:	42a7      	cmp	r7, r4
   37378:	d1f5      	bne.n	37366 <__s2b+0x38>
   3737a:	002c      	movs	r4, r5
   3737c:	9b00      	ldr	r3, [sp, #0]
   3737e:	3c08      	subs	r4, #8
   37380:	191c      	adds	r4, r3, r4
   37382:	002f      	movs	r7, r5
   37384:	9b01      	ldr	r3, [sp, #4]
   37386:	429f      	cmp	r7, r3
   37388:	db06      	blt.n	37398 <__s2b+0x6a>
   3738a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3738c:	005b      	lsls	r3, r3, #1
   3738e:	3101      	adds	r1, #1
   37390:	e7d9      	b.n	37346 <__s2b+0x18>
   37392:	340a      	adds	r4, #10
   37394:	2509      	movs	r5, #9
   37396:	e7f4      	b.n	37382 <__s2b+0x54>
   37398:	1b63      	subs	r3, r4, r5
   3739a:	5ddb      	ldrb	r3, [r3, r7]
   3739c:	0001      	movs	r1, r0
   3739e:	3b30      	subs	r3, #48	; 0x30
   373a0:	220a      	movs	r2, #10
   373a2:	0030      	movs	r0, r6
   373a4:	f7ff ff87 	bl	372b6 <__multadd>
   373a8:	3701      	adds	r7, #1
   373aa:	e7eb      	b.n	37384 <__s2b+0x56>

000373ac <__hi0bits>:
   373ac:	0003      	movs	r3, r0
   373ae:	0c02      	lsrs	r2, r0, #16
   373b0:	2000      	movs	r0, #0
   373b2:	4282      	cmp	r2, r0
   373b4:	d101      	bne.n	373ba <__hi0bits+0xe>
   373b6:	041b      	lsls	r3, r3, #16
   373b8:	3010      	adds	r0, #16
   373ba:	0e1a      	lsrs	r2, r3, #24
   373bc:	d101      	bne.n	373c2 <__hi0bits+0x16>
   373be:	3008      	adds	r0, #8
   373c0:	021b      	lsls	r3, r3, #8
   373c2:	0f1a      	lsrs	r2, r3, #28
   373c4:	d101      	bne.n	373ca <__hi0bits+0x1e>
   373c6:	3004      	adds	r0, #4
   373c8:	011b      	lsls	r3, r3, #4
   373ca:	0f9a      	lsrs	r2, r3, #30
   373cc:	d101      	bne.n	373d2 <__hi0bits+0x26>
   373ce:	3002      	adds	r0, #2
   373d0:	009b      	lsls	r3, r3, #2
   373d2:	2b00      	cmp	r3, #0
   373d4:	db03      	blt.n	373de <__hi0bits+0x32>
   373d6:	3001      	adds	r0, #1
   373d8:	005b      	lsls	r3, r3, #1
   373da:	d400      	bmi.n	373de <__hi0bits+0x32>
   373dc:	2020      	movs	r0, #32
   373de:	4770      	bx	lr

000373e0 <__lo0bits>:
   373e0:	2207      	movs	r2, #7
   373e2:	6803      	ldr	r3, [r0, #0]
   373e4:	b510      	push	{r4, lr}
   373e6:	0001      	movs	r1, r0
   373e8:	401a      	ands	r2, r3
   373ea:	d00d      	beq.n	37408 <__lo0bits+0x28>
   373ec:	2401      	movs	r4, #1
   373ee:	2000      	movs	r0, #0
   373f0:	4223      	tst	r3, r4
   373f2:	d105      	bne.n	37400 <__lo0bits+0x20>
   373f4:	3002      	adds	r0, #2
   373f6:	4203      	tst	r3, r0
   373f8:	d003      	beq.n	37402 <__lo0bits+0x22>
   373fa:	40e3      	lsrs	r3, r4
   373fc:	0020      	movs	r0, r4
   373fe:	600b      	str	r3, [r1, #0]
   37400:	bd10      	pop	{r4, pc}
   37402:	089b      	lsrs	r3, r3, #2
   37404:	600b      	str	r3, [r1, #0]
   37406:	e7fb      	b.n	37400 <__lo0bits+0x20>
   37408:	b29c      	uxth	r4, r3
   3740a:	0010      	movs	r0, r2
   3740c:	2c00      	cmp	r4, #0
   3740e:	d101      	bne.n	37414 <__lo0bits+0x34>
   37410:	2010      	movs	r0, #16
   37412:	0c1b      	lsrs	r3, r3, #16
   37414:	b2da      	uxtb	r2, r3
   37416:	2a00      	cmp	r2, #0
   37418:	d101      	bne.n	3741e <__lo0bits+0x3e>
   3741a:	3008      	adds	r0, #8
   3741c:	0a1b      	lsrs	r3, r3, #8
   3741e:	071a      	lsls	r2, r3, #28
   37420:	d101      	bne.n	37426 <__lo0bits+0x46>
   37422:	3004      	adds	r0, #4
   37424:	091b      	lsrs	r3, r3, #4
   37426:	079a      	lsls	r2, r3, #30
   37428:	d101      	bne.n	3742e <__lo0bits+0x4e>
   3742a:	3002      	adds	r0, #2
   3742c:	089b      	lsrs	r3, r3, #2
   3742e:	07da      	lsls	r2, r3, #31
   37430:	d4e8      	bmi.n	37404 <__lo0bits+0x24>
   37432:	085b      	lsrs	r3, r3, #1
   37434:	d001      	beq.n	3743a <__lo0bits+0x5a>
   37436:	3001      	adds	r0, #1
   37438:	e7e4      	b.n	37404 <__lo0bits+0x24>
   3743a:	2020      	movs	r0, #32
   3743c:	e7e0      	b.n	37400 <__lo0bits+0x20>

0003743e <__i2b>:
   3743e:	b510      	push	{r4, lr}
   37440:	000c      	movs	r4, r1
   37442:	2101      	movs	r1, #1
   37444:	f7ff fee6 	bl	37214 <_Balloc>
   37448:	2301      	movs	r3, #1
   3744a:	6144      	str	r4, [r0, #20]
   3744c:	6103      	str	r3, [r0, #16]
   3744e:	bd10      	pop	{r4, pc}

00037450 <__multiply>:
   37450:	b5f0      	push	{r4, r5, r6, r7, lr}
   37452:	690b      	ldr	r3, [r1, #16]
   37454:	0015      	movs	r5, r2
   37456:	6912      	ldr	r2, [r2, #16]
   37458:	b089      	sub	sp, #36	; 0x24
   3745a:	000c      	movs	r4, r1
   3745c:	4293      	cmp	r3, r2
   3745e:	da01      	bge.n	37464 <__multiply+0x14>
   37460:	002c      	movs	r4, r5
   37462:	000d      	movs	r5, r1
   37464:	6927      	ldr	r7, [r4, #16]
   37466:	692e      	ldr	r6, [r5, #16]
   37468:	68a2      	ldr	r2, [r4, #8]
   3746a:	19bb      	adds	r3, r7, r6
   3746c:	6861      	ldr	r1, [r4, #4]
   3746e:	9301      	str	r3, [sp, #4]
   37470:	4293      	cmp	r3, r2
   37472:	dd00      	ble.n	37476 <__multiply+0x26>
   37474:	3101      	adds	r1, #1
   37476:	f7ff fecd 	bl	37214 <_Balloc>
   3747a:	0003      	movs	r3, r0
   3747c:	3314      	adds	r3, #20
   3747e:	9300      	str	r3, [sp, #0]
   37480:	9a00      	ldr	r2, [sp, #0]
   37482:	19bb      	adds	r3, r7, r6
   37484:	4694      	mov	ip, r2
   37486:	009b      	lsls	r3, r3, #2
   37488:	449c      	add	ip, r3
   3748a:	0013      	movs	r3, r2
   3748c:	2200      	movs	r2, #0
   3748e:	9004      	str	r0, [sp, #16]
   37490:	4563      	cmp	r3, ip
   37492:	d31c      	bcc.n	374ce <__multiply+0x7e>
   37494:	002a      	movs	r2, r5
   37496:	3414      	adds	r4, #20
   37498:	00bf      	lsls	r7, r7, #2
   3749a:	19e3      	adds	r3, r4, r7
   3749c:	3214      	adds	r2, #20
   3749e:	00b6      	lsls	r6, r6, #2
   374a0:	9305      	str	r3, [sp, #20]
   374a2:	1993      	adds	r3, r2, r6
   374a4:	9402      	str	r4, [sp, #8]
   374a6:	9306      	str	r3, [sp, #24]
   374a8:	9b06      	ldr	r3, [sp, #24]
   374aa:	429a      	cmp	r2, r3
   374ac:	d311      	bcc.n	374d2 <__multiply+0x82>
   374ae:	9b01      	ldr	r3, [sp, #4]
   374b0:	2b00      	cmp	r3, #0
   374b2:	dd06      	ble.n	374c2 <__multiply+0x72>
   374b4:	2304      	movs	r3, #4
   374b6:	425b      	negs	r3, r3
   374b8:	449c      	add	ip, r3
   374ba:	4663      	mov	r3, ip
   374bc:	681b      	ldr	r3, [r3, #0]
   374be:	2b00      	cmp	r3, #0
   374c0:	d051      	beq.n	37566 <__multiply+0x116>
   374c2:	9b04      	ldr	r3, [sp, #16]
   374c4:	9a01      	ldr	r2, [sp, #4]
   374c6:	0018      	movs	r0, r3
   374c8:	611a      	str	r2, [r3, #16]
   374ca:	b009      	add	sp, #36	; 0x24
   374cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   374ce:	c304      	stmia	r3!, {r2}
   374d0:	e7de      	b.n	37490 <__multiply+0x40>
   374d2:	8814      	ldrh	r4, [r2, #0]
   374d4:	2c00      	cmp	r4, #0
   374d6:	d01e      	beq.n	37516 <__multiply+0xc6>
   374d8:	2600      	movs	r6, #0
   374da:	9d00      	ldr	r5, [sp, #0]
   374dc:	9f02      	ldr	r7, [sp, #8]
   374de:	cf01      	ldmia	r7!, {r0}
   374e0:	9507      	str	r5, [sp, #28]
   374e2:	cd08      	ldmia	r5!, {r3}
   374e4:	9303      	str	r3, [sp, #12]
   374e6:	b283      	uxth	r3, r0
   374e8:	4363      	muls	r3, r4
   374ea:	0019      	movs	r1, r3
   374ec:	466b      	mov	r3, sp
   374ee:	0c00      	lsrs	r0, r0, #16
   374f0:	899b      	ldrh	r3, [r3, #12]
   374f2:	4360      	muls	r0, r4
   374f4:	18cb      	adds	r3, r1, r3
   374f6:	9903      	ldr	r1, [sp, #12]
   374f8:	199b      	adds	r3, r3, r6
   374fa:	0c09      	lsrs	r1, r1, #16
   374fc:	1841      	adds	r1, r0, r1
   374fe:	0c18      	lsrs	r0, r3, #16
   37500:	1809      	adds	r1, r1, r0
   37502:	0c0e      	lsrs	r6, r1, #16
   37504:	b29b      	uxth	r3, r3
   37506:	0409      	lsls	r1, r1, #16
   37508:	430b      	orrs	r3, r1
   3750a:	9907      	ldr	r1, [sp, #28]
   3750c:	600b      	str	r3, [r1, #0]
   3750e:	9b05      	ldr	r3, [sp, #20]
   37510:	42bb      	cmp	r3, r7
   37512:	d8e4      	bhi.n	374de <__multiply+0x8e>
   37514:	602e      	str	r6, [r5, #0]
   37516:	6813      	ldr	r3, [r2, #0]
   37518:	0c1b      	lsrs	r3, r3, #16
   3751a:	9303      	str	r3, [sp, #12]
   3751c:	d01e      	beq.n	3755c <__multiply+0x10c>
   3751e:	2600      	movs	r6, #0
   37520:	9b00      	ldr	r3, [sp, #0]
   37522:	9c02      	ldr	r4, [sp, #8]
   37524:	681b      	ldr	r3, [r3, #0]
   37526:	9800      	ldr	r0, [sp, #0]
   37528:	0007      	movs	r7, r0
   3752a:	8821      	ldrh	r1, [r4, #0]
   3752c:	9d03      	ldr	r5, [sp, #12]
   3752e:	b29b      	uxth	r3, r3
   37530:	4369      	muls	r1, r5
   37532:	c820      	ldmia	r0!, {r5}
   37534:	0c2d      	lsrs	r5, r5, #16
   37536:	1949      	adds	r1, r1, r5
   37538:	198e      	adds	r6, r1, r6
   3753a:	0431      	lsls	r1, r6, #16
   3753c:	430b      	orrs	r3, r1
   3753e:	603b      	str	r3, [r7, #0]
   37540:	cc08      	ldmia	r4!, {r3}
   37542:	9903      	ldr	r1, [sp, #12]
   37544:	0c1b      	lsrs	r3, r3, #16
   37546:	434b      	muls	r3, r1
   37548:	6879      	ldr	r1, [r7, #4]
   3754a:	0c36      	lsrs	r6, r6, #16
   3754c:	b289      	uxth	r1, r1
   3754e:	185b      	adds	r3, r3, r1
   37550:	9905      	ldr	r1, [sp, #20]
   37552:	199b      	adds	r3, r3, r6
   37554:	0c1e      	lsrs	r6, r3, #16
   37556:	42a1      	cmp	r1, r4
   37558:	d8e6      	bhi.n	37528 <__multiply+0xd8>
   3755a:	6003      	str	r3, [r0, #0]
   3755c:	9b00      	ldr	r3, [sp, #0]
   3755e:	3204      	adds	r2, #4
   37560:	3304      	adds	r3, #4
   37562:	9300      	str	r3, [sp, #0]
   37564:	e7a0      	b.n	374a8 <__multiply+0x58>
   37566:	9b01      	ldr	r3, [sp, #4]
   37568:	3b01      	subs	r3, #1
   3756a:	9301      	str	r3, [sp, #4]
   3756c:	e79f      	b.n	374ae <__multiply+0x5e>
	...

00037570 <__pow5mult>:
   37570:	2303      	movs	r3, #3
   37572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37574:	4013      	ands	r3, r2
   37576:	0005      	movs	r5, r0
   37578:	000e      	movs	r6, r1
   3757a:	0014      	movs	r4, r2
   3757c:	2b00      	cmp	r3, #0
   3757e:	d008      	beq.n	37592 <__pow5mult+0x22>
   37580:	4922      	ldr	r1, [pc, #136]	; (3760c <__pow5mult+0x9c>)
   37582:	3b01      	subs	r3, #1
   37584:	009a      	lsls	r2, r3, #2
   37586:	5852      	ldr	r2, [r2, r1]
   37588:	2300      	movs	r3, #0
   3758a:	0031      	movs	r1, r6
   3758c:	f7ff fe93 	bl	372b6 <__multadd>
   37590:	0006      	movs	r6, r0
   37592:	10a3      	asrs	r3, r4, #2
   37594:	9301      	str	r3, [sp, #4]
   37596:	d036      	beq.n	37606 <__pow5mult+0x96>
   37598:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   3759a:	2c00      	cmp	r4, #0
   3759c:	d107      	bne.n	375ae <__pow5mult+0x3e>
   3759e:	2010      	movs	r0, #16
   375a0:	f7fd feba 	bl	35318 <malloc>
   375a4:	6268      	str	r0, [r5, #36]	; 0x24
   375a6:	6044      	str	r4, [r0, #4]
   375a8:	6084      	str	r4, [r0, #8]
   375aa:	6004      	str	r4, [r0, #0]
   375ac:	60c4      	str	r4, [r0, #12]
   375ae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   375b0:	68bc      	ldr	r4, [r7, #8]
   375b2:	2c00      	cmp	r4, #0
   375b4:	d107      	bne.n	375c6 <__pow5mult+0x56>
   375b6:	4916      	ldr	r1, [pc, #88]	; (37610 <__pow5mult+0xa0>)
   375b8:	0028      	movs	r0, r5
   375ba:	f7ff ff40 	bl	3743e <__i2b>
   375be:	2300      	movs	r3, #0
   375c0:	0004      	movs	r4, r0
   375c2:	60b8      	str	r0, [r7, #8]
   375c4:	6003      	str	r3, [r0, #0]
   375c6:	2201      	movs	r2, #1
   375c8:	9b01      	ldr	r3, [sp, #4]
   375ca:	4213      	tst	r3, r2
   375cc:	d00a      	beq.n	375e4 <__pow5mult+0x74>
   375ce:	0031      	movs	r1, r6
   375d0:	0022      	movs	r2, r4
   375d2:	0028      	movs	r0, r5
   375d4:	f7ff ff3c 	bl	37450 <__multiply>
   375d8:	0007      	movs	r7, r0
   375da:	0031      	movs	r1, r6
   375dc:	0028      	movs	r0, r5
   375de:	f7ff fe51 	bl	37284 <_Bfree>
   375e2:	003e      	movs	r6, r7
   375e4:	9b01      	ldr	r3, [sp, #4]
   375e6:	105b      	asrs	r3, r3, #1
   375e8:	9301      	str	r3, [sp, #4]
   375ea:	d00c      	beq.n	37606 <__pow5mult+0x96>
   375ec:	6820      	ldr	r0, [r4, #0]
   375ee:	2800      	cmp	r0, #0
   375f0:	d107      	bne.n	37602 <__pow5mult+0x92>
   375f2:	0022      	movs	r2, r4
   375f4:	0021      	movs	r1, r4
   375f6:	0028      	movs	r0, r5
   375f8:	f7ff ff2a 	bl	37450 <__multiply>
   375fc:	2300      	movs	r3, #0
   375fe:	6020      	str	r0, [r4, #0]
   37600:	6003      	str	r3, [r0, #0]
   37602:	0004      	movs	r4, r0
   37604:	e7df      	b.n	375c6 <__pow5mult+0x56>
   37606:	0030      	movs	r0, r6
   37608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3760a:	46c0      	nop			; (mov r8, r8)
   3760c:	0003c9e0 	.word	0x0003c9e0
   37610:	00000271 	.word	0x00000271

00037614 <__lshift>:
   37614:	b5f0      	push	{r4, r5, r6, r7, lr}
   37616:	000d      	movs	r5, r1
   37618:	0017      	movs	r7, r2
   3761a:	692b      	ldr	r3, [r5, #16]
   3761c:	1154      	asrs	r4, r2, #5
   3761e:	b085      	sub	sp, #20
   37620:	18e3      	adds	r3, r4, r3
   37622:	9302      	str	r3, [sp, #8]
   37624:	3301      	adds	r3, #1
   37626:	9301      	str	r3, [sp, #4]
   37628:	6849      	ldr	r1, [r1, #4]
   3762a:	68ab      	ldr	r3, [r5, #8]
   3762c:	9003      	str	r0, [sp, #12]
   3762e:	9a01      	ldr	r2, [sp, #4]
   37630:	4293      	cmp	r3, r2
   37632:	db34      	blt.n	3769e <__lshift+0x8a>
   37634:	9803      	ldr	r0, [sp, #12]
   37636:	f7ff fded 	bl	37214 <_Balloc>
   3763a:	2300      	movs	r3, #0
   3763c:	0002      	movs	r2, r0
   3763e:	0006      	movs	r6, r0
   37640:	0019      	movs	r1, r3
   37642:	3214      	adds	r2, #20
   37644:	42a3      	cmp	r3, r4
   37646:	db2d      	blt.n	376a4 <__lshift+0x90>
   37648:	43e3      	mvns	r3, r4
   3764a:	17db      	asrs	r3, r3, #31
   3764c:	401c      	ands	r4, r3
   3764e:	002b      	movs	r3, r5
   37650:	211f      	movs	r1, #31
   37652:	00a4      	lsls	r4, r4, #2
   37654:	1914      	adds	r4, r2, r4
   37656:	692a      	ldr	r2, [r5, #16]
   37658:	3314      	adds	r3, #20
   3765a:	0092      	lsls	r2, r2, #2
   3765c:	189a      	adds	r2, r3, r2
   3765e:	400f      	ands	r7, r1
   37660:	d024      	beq.n	376ac <__lshift+0x98>
   37662:	3101      	adds	r1, #1
   37664:	1bc9      	subs	r1, r1, r7
   37666:	468c      	mov	ip, r1
   37668:	2100      	movs	r1, #0
   3766a:	6818      	ldr	r0, [r3, #0]
   3766c:	40b8      	lsls	r0, r7
   3766e:	4301      	orrs	r1, r0
   37670:	4660      	mov	r0, ip
   37672:	6021      	str	r1, [r4, #0]
   37674:	cb02      	ldmia	r3!, {r1}
   37676:	3404      	adds	r4, #4
   37678:	40c1      	lsrs	r1, r0
   3767a:	429a      	cmp	r2, r3
   3767c:	d8f5      	bhi.n	3766a <__lshift+0x56>
   3767e:	6021      	str	r1, [r4, #0]
   37680:	2900      	cmp	r1, #0
   37682:	d002      	beq.n	3768a <__lshift+0x76>
   37684:	9b02      	ldr	r3, [sp, #8]
   37686:	3302      	adds	r3, #2
   37688:	9301      	str	r3, [sp, #4]
   3768a:	9b01      	ldr	r3, [sp, #4]
   3768c:	9803      	ldr	r0, [sp, #12]
   3768e:	3b01      	subs	r3, #1
   37690:	6133      	str	r3, [r6, #16]
   37692:	0029      	movs	r1, r5
   37694:	f7ff fdf6 	bl	37284 <_Bfree>
   37698:	0030      	movs	r0, r6
   3769a:	b005      	add	sp, #20
   3769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3769e:	3101      	adds	r1, #1
   376a0:	005b      	lsls	r3, r3, #1
   376a2:	e7c4      	b.n	3762e <__lshift+0x1a>
   376a4:	0098      	lsls	r0, r3, #2
   376a6:	5011      	str	r1, [r2, r0]
   376a8:	3301      	adds	r3, #1
   376aa:	e7cb      	b.n	37644 <__lshift+0x30>
   376ac:	cb02      	ldmia	r3!, {r1}
   376ae:	c402      	stmia	r4!, {r1}
   376b0:	429a      	cmp	r2, r3
   376b2:	d8fb      	bhi.n	376ac <__lshift+0x98>
   376b4:	e7e9      	b.n	3768a <__lshift+0x76>

000376b6 <__mcmp>:
   376b6:	690a      	ldr	r2, [r1, #16]
   376b8:	6903      	ldr	r3, [r0, #16]
   376ba:	b530      	push	{r4, r5, lr}
   376bc:	1a9b      	subs	r3, r3, r2
   376be:	d10e      	bne.n	376de <__mcmp+0x28>
   376c0:	0092      	lsls	r2, r2, #2
   376c2:	3014      	adds	r0, #20
   376c4:	3114      	adds	r1, #20
   376c6:	1884      	adds	r4, r0, r2
   376c8:	1889      	adds	r1, r1, r2
   376ca:	3c04      	subs	r4, #4
   376cc:	3904      	subs	r1, #4
   376ce:	6822      	ldr	r2, [r4, #0]
   376d0:	680d      	ldr	r5, [r1, #0]
   376d2:	42aa      	cmp	r2, r5
   376d4:	d005      	beq.n	376e2 <__mcmp+0x2c>
   376d6:	42aa      	cmp	r2, r5
   376d8:	4192      	sbcs	r2, r2
   376da:	2301      	movs	r3, #1
   376dc:	4313      	orrs	r3, r2
   376de:	0018      	movs	r0, r3
   376e0:	bd30      	pop	{r4, r5, pc}
   376e2:	42a0      	cmp	r0, r4
   376e4:	d3f1      	bcc.n	376ca <__mcmp+0x14>
   376e6:	e7fa      	b.n	376de <__mcmp+0x28>

000376e8 <__mdiff>:
   376e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   376ea:	000d      	movs	r5, r1
   376ec:	b085      	sub	sp, #20
   376ee:	0007      	movs	r7, r0
   376f0:	0011      	movs	r1, r2
   376f2:	0028      	movs	r0, r5
   376f4:	0014      	movs	r4, r2
   376f6:	f7ff ffde 	bl	376b6 <__mcmp>
   376fa:	1e06      	subs	r6, r0, #0
   376fc:	d108      	bne.n	37710 <__mdiff+0x28>
   376fe:	0001      	movs	r1, r0
   37700:	0038      	movs	r0, r7
   37702:	f7ff fd87 	bl	37214 <_Balloc>
   37706:	2301      	movs	r3, #1
   37708:	6146      	str	r6, [r0, #20]
   3770a:	6103      	str	r3, [r0, #16]
   3770c:	b005      	add	sp, #20
   3770e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37710:	2301      	movs	r3, #1
   37712:	9301      	str	r3, [sp, #4]
   37714:	2800      	cmp	r0, #0
   37716:	db04      	blt.n	37722 <__mdiff+0x3a>
   37718:	0023      	movs	r3, r4
   3771a:	002c      	movs	r4, r5
   3771c:	001d      	movs	r5, r3
   3771e:	2300      	movs	r3, #0
   37720:	9301      	str	r3, [sp, #4]
   37722:	6861      	ldr	r1, [r4, #4]
   37724:	0038      	movs	r0, r7
   37726:	f7ff fd75 	bl	37214 <_Balloc>
   3772a:	002f      	movs	r7, r5
   3772c:	2200      	movs	r2, #0
   3772e:	9b01      	ldr	r3, [sp, #4]
   37730:	6926      	ldr	r6, [r4, #16]
   37732:	60c3      	str	r3, [r0, #12]
   37734:	3414      	adds	r4, #20
   37736:	00b3      	lsls	r3, r6, #2
   37738:	18e3      	adds	r3, r4, r3
   3773a:	9302      	str	r3, [sp, #8]
   3773c:	692b      	ldr	r3, [r5, #16]
   3773e:	3714      	adds	r7, #20
   37740:	009b      	lsls	r3, r3, #2
   37742:	18fb      	adds	r3, r7, r3
   37744:	9303      	str	r3, [sp, #12]
   37746:	0003      	movs	r3, r0
   37748:	4694      	mov	ip, r2
   3774a:	3314      	adds	r3, #20
   3774c:	cc20      	ldmia	r4!, {r5}
   3774e:	cf04      	ldmia	r7!, {r2}
   37750:	9201      	str	r2, [sp, #4]
   37752:	b2aa      	uxth	r2, r5
   37754:	4494      	add	ip, r2
   37756:	466a      	mov	r2, sp
   37758:	4661      	mov	r1, ip
   3775a:	8892      	ldrh	r2, [r2, #4]
   3775c:	0c2d      	lsrs	r5, r5, #16
   3775e:	1a8a      	subs	r2, r1, r2
   37760:	9901      	ldr	r1, [sp, #4]
   37762:	0c09      	lsrs	r1, r1, #16
   37764:	1a69      	subs	r1, r5, r1
   37766:	1415      	asrs	r5, r2, #16
   37768:	1949      	adds	r1, r1, r5
   3776a:	140d      	asrs	r5, r1, #16
   3776c:	b292      	uxth	r2, r2
   3776e:	0409      	lsls	r1, r1, #16
   37770:	430a      	orrs	r2, r1
   37772:	601a      	str	r2, [r3, #0]
   37774:	9a03      	ldr	r2, [sp, #12]
   37776:	46ac      	mov	ip, r5
   37778:	3304      	adds	r3, #4
   3777a:	42ba      	cmp	r2, r7
   3777c:	d8e6      	bhi.n	3774c <__mdiff+0x64>
   3777e:	9902      	ldr	r1, [sp, #8]
   37780:	001a      	movs	r2, r3
   37782:	428c      	cmp	r4, r1
   37784:	d305      	bcc.n	37792 <__mdiff+0xaa>
   37786:	3a04      	subs	r2, #4
   37788:	6813      	ldr	r3, [r2, #0]
   3778a:	2b00      	cmp	r3, #0
   3778c:	d00e      	beq.n	377ac <__mdiff+0xc4>
   3778e:	6106      	str	r6, [r0, #16]
   37790:	e7bc      	b.n	3770c <__mdiff+0x24>
   37792:	cc04      	ldmia	r4!, {r2}
   37794:	b291      	uxth	r1, r2
   37796:	4461      	add	r1, ip
   37798:	140d      	asrs	r5, r1, #16
   3779a:	0c12      	lsrs	r2, r2, #16
   3779c:	1952      	adds	r2, r2, r5
   3779e:	1415      	asrs	r5, r2, #16
   377a0:	b289      	uxth	r1, r1
   377a2:	0412      	lsls	r2, r2, #16
   377a4:	430a      	orrs	r2, r1
   377a6:	46ac      	mov	ip, r5
   377a8:	c304      	stmia	r3!, {r2}
   377aa:	e7e8      	b.n	3777e <__mdiff+0x96>
   377ac:	3e01      	subs	r6, #1
   377ae:	e7ea      	b.n	37786 <__mdiff+0x9e>

000377b0 <__ulp>:
   377b0:	000b      	movs	r3, r1
   377b2:	4910      	ldr	r1, [pc, #64]	; (377f4 <__ulp+0x44>)
   377b4:	b510      	push	{r4, lr}
   377b6:	4019      	ands	r1, r3
   377b8:	4b0f      	ldr	r3, [pc, #60]	; (377f8 <__ulp+0x48>)
   377ba:	18c9      	adds	r1, r1, r3
   377bc:	2900      	cmp	r1, #0
   377be:	dd04      	ble.n	377ca <__ulp+0x1a>
   377c0:	2200      	movs	r2, #0
   377c2:	000b      	movs	r3, r1
   377c4:	0010      	movs	r0, r2
   377c6:	0019      	movs	r1, r3
   377c8:	bd10      	pop	{r4, pc}
   377ca:	4249      	negs	r1, r1
   377cc:	1509      	asrs	r1, r1, #20
   377ce:	2200      	movs	r2, #0
   377d0:	2300      	movs	r3, #0
   377d2:	2913      	cmp	r1, #19
   377d4:	dc04      	bgt.n	377e0 <__ulp+0x30>
   377d6:	2080      	movs	r0, #128	; 0x80
   377d8:	0300      	lsls	r0, r0, #12
   377da:	4108      	asrs	r0, r1
   377dc:	0003      	movs	r3, r0
   377de:	e7f1      	b.n	377c4 <__ulp+0x14>
   377e0:	3914      	subs	r1, #20
   377e2:	2001      	movs	r0, #1
   377e4:	291e      	cmp	r1, #30
   377e6:	dc02      	bgt.n	377ee <__ulp+0x3e>
   377e8:	241f      	movs	r4, #31
   377ea:	1a61      	subs	r1, r4, r1
   377ec:	4088      	lsls	r0, r1
   377ee:	0002      	movs	r2, r0
   377f0:	e7e8      	b.n	377c4 <__ulp+0x14>
   377f2:	46c0      	nop			; (mov r8, r8)
   377f4:	7ff00000 	.word	0x7ff00000
   377f8:	fcc00000 	.word	0xfcc00000

000377fc <__b2d>:
   377fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   377fe:	0006      	movs	r6, r0
   37800:	6903      	ldr	r3, [r0, #16]
   37802:	3614      	adds	r6, #20
   37804:	009b      	lsls	r3, r3, #2
   37806:	18f3      	adds	r3, r6, r3
   37808:	1f1d      	subs	r5, r3, #4
   3780a:	682c      	ldr	r4, [r5, #0]
   3780c:	000f      	movs	r7, r1
   3780e:	0020      	movs	r0, r4
   37810:	9301      	str	r3, [sp, #4]
   37812:	f7ff fdcb 	bl	373ac <__hi0bits>
   37816:	2320      	movs	r3, #32
   37818:	1a1b      	subs	r3, r3, r0
   3781a:	603b      	str	r3, [r7, #0]
   3781c:	491c      	ldr	r1, [pc, #112]	; (37890 <__b2d+0x94>)
   3781e:	280a      	cmp	r0, #10
   37820:	dc16      	bgt.n	37850 <__b2d+0x54>
   37822:	230b      	movs	r3, #11
   37824:	0027      	movs	r7, r4
   37826:	1a1b      	subs	r3, r3, r0
   37828:	40df      	lsrs	r7, r3
   3782a:	4339      	orrs	r1, r7
   3782c:	469c      	mov	ip, r3
   3782e:	000b      	movs	r3, r1
   37830:	2100      	movs	r1, #0
   37832:	42ae      	cmp	r6, r5
   37834:	d202      	bcs.n	3783c <__b2d+0x40>
   37836:	9901      	ldr	r1, [sp, #4]
   37838:	3908      	subs	r1, #8
   3783a:	6809      	ldr	r1, [r1, #0]
   3783c:	3015      	adds	r0, #21
   3783e:	4084      	lsls	r4, r0
   37840:	4660      	mov	r0, ip
   37842:	40c1      	lsrs	r1, r0
   37844:	430c      	orrs	r4, r1
   37846:	0022      	movs	r2, r4
   37848:	0010      	movs	r0, r2
   3784a:	0019      	movs	r1, r3
   3784c:	b003      	add	sp, #12
   3784e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37850:	2700      	movs	r7, #0
   37852:	42ae      	cmp	r6, r5
   37854:	d202      	bcs.n	3785c <__b2d+0x60>
   37856:	9d01      	ldr	r5, [sp, #4]
   37858:	3d08      	subs	r5, #8
   3785a:	682f      	ldr	r7, [r5, #0]
   3785c:	380b      	subs	r0, #11
   3785e:	4684      	mov	ip, r0
   37860:	1e03      	subs	r3, r0, #0
   37862:	d012      	beq.n	3788a <__b2d+0x8e>
   37864:	409c      	lsls	r4, r3
   37866:	2020      	movs	r0, #32
   37868:	4321      	orrs	r1, r4
   3786a:	003c      	movs	r4, r7
   3786c:	1ac0      	subs	r0, r0, r3
   3786e:	40c4      	lsrs	r4, r0
   37870:	4321      	orrs	r1, r4
   37872:	000b      	movs	r3, r1
   37874:	2100      	movs	r1, #0
   37876:	42b5      	cmp	r5, r6
   37878:	d901      	bls.n	3787e <__b2d+0x82>
   3787a:	3d04      	subs	r5, #4
   3787c:	6829      	ldr	r1, [r5, #0]
   3787e:	4664      	mov	r4, ip
   37880:	40c1      	lsrs	r1, r0
   37882:	40a7      	lsls	r7, r4
   37884:	430f      	orrs	r7, r1
   37886:	003a      	movs	r2, r7
   37888:	e7de      	b.n	37848 <__b2d+0x4c>
   3788a:	4321      	orrs	r1, r4
   3788c:	000b      	movs	r3, r1
   3788e:	e7fa      	b.n	37886 <__b2d+0x8a>
   37890:	3ff00000 	.word	0x3ff00000

00037894 <__d2b>:
   37894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37896:	001d      	movs	r5, r3
   37898:	2101      	movs	r1, #1
   3789a:	9f08      	ldr	r7, [sp, #32]
   3789c:	0014      	movs	r4, r2
   3789e:	f7ff fcb9 	bl	37214 <_Balloc>
   378a2:	032b      	lsls	r3, r5, #12
   378a4:	006d      	lsls	r5, r5, #1
   378a6:	0006      	movs	r6, r0
   378a8:	0b1b      	lsrs	r3, r3, #12
   378aa:	0d6d      	lsrs	r5, r5, #21
   378ac:	d124      	bne.n	378f8 <__d2b+0x64>
   378ae:	9301      	str	r3, [sp, #4]
   378b0:	2c00      	cmp	r4, #0
   378b2:	d027      	beq.n	37904 <__d2b+0x70>
   378b4:	4668      	mov	r0, sp
   378b6:	9400      	str	r4, [sp, #0]
   378b8:	f7ff fd92 	bl	373e0 <__lo0bits>
   378bc:	9c00      	ldr	r4, [sp, #0]
   378be:	2800      	cmp	r0, #0
   378c0:	d01e      	beq.n	37900 <__d2b+0x6c>
   378c2:	9b01      	ldr	r3, [sp, #4]
   378c4:	2120      	movs	r1, #32
   378c6:	001a      	movs	r2, r3
   378c8:	1a09      	subs	r1, r1, r0
   378ca:	408a      	lsls	r2, r1
   378cc:	40c3      	lsrs	r3, r0
   378ce:	4322      	orrs	r2, r4
   378d0:	6172      	str	r2, [r6, #20]
   378d2:	9301      	str	r3, [sp, #4]
   378d4:	9c01      	ldr	r4, [sp, #4]
   378d6:	61b4      	str	r4, [r6, #24]
   378d8:	1e63      	subs	r3, r4, #1
   378da:	419c      	sbcs	r4, r3
   378dc:	3401      	adds	r4, #1
   378de:	6134      	str	r4, [r6, #16]
   378e0:	2d00      	cmp	r5, #0
   378e2:	d018      	beq.n	37916 <__d2b+0x82>
   378e4:	4b12      	ldr	r3, [pc, #72]	; (37930 <__d2b+0x9c>)
   378e6:	18ed      	adds	r5, r5, r3
   378e8:	2335      	movs	r3, #53	; 0x35
   378ea:	182d      	adds	r5, r5, r0
   378ec:	603d      	str	r5, [r7, #0]
   378ee:	1a18      	subs	r0, r3, r0
   378f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   378f2:	6018      	str	r0, [r3, #0]
   378f4:	0030      	movs	r0, r6
   378f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   378f8:	2280      	movs	r2, #128	; 0x80
   378fa:	0352      	lsls	r2, r2, #13
   378fc:	4313      	orrs	r3, r2
   378fe:	e7d6      	b.n	378ae <__d2b+0x1a>
   37900:	6174      	str	r4, [r6, #20]
   37902:	e7e7      	b.n	378d4 <__d2b+0x40>
   37904:	a801      	add	r0, sp, #4
   37906:	f7ff fd6b 	bl	373e0 <__lo0bits>
   3790a:	2401      	movs	r4, #1
   3790c:	9b01      	ldr	r3, [sp, #4]
   3790e:	6134      	str	r4, [r6, #16]
   37910:	6173      	str	r3, [r6, #20]
   37912:	3020      	adds	r0, #32
   37914:	e7e4      	b.n	378e0 <__d2b+0x4c>
   37916:	4b07      	ldr	r3, [pc, #28]	; (37934 <__d2b+0xa0>)
   37918:	18c0      	adds	r0, r0, r3
   3791a:	4b07      	ldr	r3, [pc, #28]	; (37938 <__d2b+0xa4>)
   3791c:	6038      	str	r0, [r7, #0]
   3791e:	18e3      	adds	r3, r4, r3
   37920:	009b      	lsls	r3, r3, #2
   37922:	18f3      	adds	r3, r6, r3
   37924:	6958      	ldr	r0, [r3, #20]
   37926:	f7ff fd41 	bl	373ac <__hi0bits>
   3792a:	0164      	lsls	r4, r4, #5
   3792c:	1a20      	subs	r0, r4, r0
   3792e:	e7df      	b.n	378f0 <__d2b+0x5c>
   37930:	fffffbcd 	.word	0xfffffbcd
   37934:	fffffbce 	.word	0xfffffbce
   37938:	3fffffff 	.word	0x3fffffff

0003793c <__ratio>:
   3793c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3793e:	b085      	sub	sp, #20
   37940:	000f      	movs	r7, r1
   37942:	a902      	add	r1, sp, #8
   37944:	0006      	movs	r6, r0
   37946:	f7ff ff59 	bl	377fc <__b2d>
   3794a:	0004      	movs	r4, r0
   3794c:	000d      	movs	r5, r1
   3794e:	0038      	movs	r0, r7
   37950:	a903      	add	r1, sp, #12
   37952:	9400      	str	r4, [sp, #0]
   37954:	9501      	str	r5, [sp, #4]
   37956:	f7ff ff51 	bl	377fc <__b2d>
   3795a:	6936      	ldr	r6, [r6, #16]
   3795c:	693f      	ldr	r7, [r7, #16]
   3795e:	0002      	movs	r2, r0
   37960:	1bf7      	subs	r7, r6, r7
   37962:	017e      	lsls	r6, r7, #5
   37964:	46b4      	mov	ip, r6
   37966:	9f03      	ldr	r7, [sp, #12]
   37968:	9e02      	ldr	r6, [sp, #8]
   3796a:	000b      	movs	r3, r1
   3796c:	1bf6      	subs	r6, r6, r7
   3796e:	4466      	add	r6, ip
   37970:	0537      	lsls	r7, r6, #20
   37972:	2e00      	cmp	r6, #0
   37974:	dd07      	ble.n	37986 <__ratio+0x4a>
   37976:	1979      	adds	r1, r7, r5
   37978:	9101      	str	r1, [sp, #4]
   3797a:	9800      	ldr	r0, [sp, #0]
   3797c:	9901      	ldr	r1, [sp, #4]
   3797e:	f7fc f9b7 	bl	33cf0 <__aeabi_ddiv>
   37982:	b005      	add	sp, #20
   37984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37986:	1bcb      	subs	r3, r1, r7
   37988:	e7f7      	b.n	3797a <__ratio+0x3e>

0003798a <__copybits>:
   3798a:	0013      	movs	r3, r2
   3798c:	3901      	subs	r1, #1
   3798e:	b510      	push	{r4, lr}
   37990:	1149      	asrs	r1, r1, #5
   37992:	6912      	ldr	r2, [r2, #16]
   37994:	3101      	adds	r1, #1
   37996:	0089      	lsls	r1, r1, #2
   37998:	3314      	adds	r3, #20
   3799a:	0092      	lsls	r2, r2, #2
   3799c:	1841      	adds	r1, r0, r1
   3799e:	189a      	adds	r2, r3, r2
   379a0:	429a      	cmp	r2, r3
   379a2:	d803      	bhi.n	379ac <__copybits+0x22>
   379a4:	2300      	movs	r3, #0
   379a6:	4281      	cmp	r1, r0
   379a8:	d803      	bhi.n	379b2 <__copybits+0x28>
   379aa:	bd10      	pop	{r4, pc}
   379ac:	cb10      	ldmia	r3!, {r4}
   379ae:	c010      	stmia	r0!, {r4}
   379b0:	e7f6      	b.n	379a0 <__copybits+0x16>
   379b2:	c008      	stmia	r0!, {r3}
   379b4:	e7f7      	b.n	379a6 <__copybits+0x1c>

000379b6 <__any_on>:
   379b6:	0002      	movs	r2, r0
   379b8:	6900      	ldr	r0, [r0, #16]
   379ba:	b510      	push	{r4, lr}
   379bc:	3214      	adds	r2, #20
   379be:	114b      	asrs	r3, r1, #5
   379c0:	4298      	cmp	r0, r3
   379c2:	db12      	blt.n	379ea <__any_on+0x34>
   379c4:	dd0b      	ble.n	379de <__any_on+0x28>
   379c6:	201f      	movs	r0, #31
   379c8:	4001      	ands	r1, r0
   379ca:	d008      	beq.n	379de <__any_on+0x28>
   379cc:	0098      	lsls	r0, r3, #2
   379ce:	5884      	ldr	r4, [r0, r2]
   379d0:	0020      	movs	r0, r4
   379d2:	40c8      	lsrs	r0, r1
   379d4:	4088      	lsls	r0, r1
   379d6:	0001      	movs	r1, r0
   379d8:	2001      	movs	r0, #1
   379da:	428c      	cmp	r4, r1
   379dc:	d104      	bne.n	379e8 <__any_on+0x32>
   379de:	009b      	lsls	r3, r3, #2
   379e0:	18d3      	adds	r3, r2, r3
   379e2:	4293      	cmp	r3, r2
   379e4:	d803      	bhi.n	379ee <__any_on+0x38>
   379e6:	2000      	movs	r0, #0
   379e8:	bd10      	pop	{r4, pc}
   379ea:	0003      	movs	r3, r0
   379ec:	e7f7      	b.n	379de <__any_on+0x28>
   379ee:	3b04      	subs	r3, #4
   379f0:	6819      	ldr	r1, [r3, #0]
   379f2:	2900      	cmp	r1, #0
   379f4:	d0f5      	beq.n	379e2 <__any_on+0x2c>
   379f6:	2001      	movs	r0, #1
   379f8:	e7f6      	b.n	379e8 <__any_on+0x32>

000379fa <_calloc_r>:
   379fa:	434a      	muls	r2, r1
   379fc:	b570      	push	{r4, r5, r6, lr}
   379fe:	0011      	movs	r1, r2
   37a00:	0014      	movs	r4, r2
   37a02:	f7fd fd0b 	bl	3541c <_malloc_r>
   37a06:	1e05      	subs	r5, r0, #0
   37a08:	d003      	beq.n	37a12 <_calloc_r+0x18>
   37a0a:	0022      	movs	r2, r4
   37a0c:	2100      	movs	r1, #0
   37a0e:	f7fd fcb2 	bl	35376 <memset>
   37a12:	0028      	movs	r0, r5
   37a14:	bd70      	pop	{r4, r5, r6, pc}
	...

00037a18 <__ssputs_r>:
   37a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   37a1a:	688e      	ldr	r6, [r1, #8]
   37a1c:	b085      	sub	sp, #20
   37a1e:	0007      	movs	r7, r0
   37a20:	000c      	movs	r4, r1
   37a22:	9203      	str	r2, [sp, #12]
   37a24:	9301      	str	r3, [sp, #4]
   37a26:	429e      	cmp	r6, r3
   37a28:	d839      	bhi.n	37a9e <__ssputs_r+0x86>
   37a2a:	2390      	movs	r3, #144	; 0x90
   37a2c:	898a      	ldrh	r2, [r1, #12]
   37a2e:	00db      	lsls	r3, r3, #3
   37a30:	421a      	tst	r2, r3
   37a32:	d034      	beq.n	37a9e <__ssputs_r+0x86>
   37a34:	2503      	movs	r5, #3
   37a36:	6909      	ldr	r1, [r1, #16]
   37a38:	6823      	ldr	r3, [r4, #0]
   37a3a:	1a5b      	subs	r3, r3, r1
   37a3c:	9302      	str	r3, [sp, #8]
   37a3e:	6963      	ldr	r3, [r4, #20]
   37a40:	9802      	ldr	r0, [sp, #8]
   37a42:	435d      	muls	r5, r3
   37a44:	0feb      	lsrs	r3, r5, #31
   37a46:	195d      	adds	r5, r3, r5
   37a48:	9b01      	ldr	r3, [sp, #4]
   37a4a:	106d      	asrs	r5, r5, #1
   37a4c:	3301      	adds	r3, #1
   37a4e:	181b      	adds	r3, r3, r0
   37a50:	42ab      	cmp	r3, r5
   37a52:	d900      	bls.n	37a56 <__ssputs_r+0x3e>
   37a54:	001d      	movs	r5, r3
   37a56:	0553      	lsls	r3, r2, #21
   37a58:	d532      	bpl.n	37ac0 <__ssputs_r+0xa8>
   37a5a:	0029      	movs	r1, r5
   37a5c:	0038      	movs	r0, r7
   37a5e:	f7fd fcdd 	bl	3541c <_malloc_r>
   37a62:	1e06      	subs	r6, r0, #0
   37a64:	d109      	bne.n	37a7a <__ssputs_r+0x62>
   37a66:	230c      	movs	r3, #12
   37a68:	603b      	str	r3, [r7, #0]
   37a6a:	2340      	movs	r3, #64	; 0x40
   37a6c:	2001      	movs	r0, #1
   37a6e:	89a2      	ldrh	r2, [r4, #12]
   37a70:	4240      	negs	r0, r0
   37a72:	4313      	orrs	r3, r2
   37a74:	81a3      	strh	r3, [r4, #12]
   37a76:	b005      	add	sp, #20
   37a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37a7a:	9a02      	ldr	r2, [sp, #8]
   37a7c:	6921      	ldr	r1, [r4, #16]
   37a7e:	f7fd fc5f 	bl	35340 <memcpy>
   37a82:	89a3      	ldrh	r3, [r4, #12]
   37a84:	4a14      	ldr	r2, [pc, #80]	; (37ad8 <__ssputs_r+0xc0>)
   37a86:	401a      	ands	r2, r3
   37a88:	2380      	movs	r3, #128	; 0x80
   37a8a:	4313      	orrs	r3, r2
   37a8c:	81a3      	strh	r3, [r4, #12]
   37a8e:	9b02      	ldr	r3, [sp, #8]
   37a90:	6126      	str	r6, [r4, #16]
   37a92:	18f6      	adds	r6, r6, r3
   37a94:	6026      	str	r6, [r4, #0]
   37a96:	6165      	str	r5, [r4, #20]
   37a98:	9e01      	ldr	r6, [sp, #4]
   37a9a:	1aed      	subs	r5, r5, r3
   37a9c:	60a5      	str	r5, [r4, #8]
   37a9e:	9b01      	ldr	r3, [sp, #4]
   37aa0:	42b3      	cmp	r3, r6
   37aa2:	d200      	bcs.n	37aa6 <__ssputs_r+0x8e>
   37aa4:	001e      	movs	r6, r3
   37aa6:	0032      	movs	r2, r6
   37aa8:	9903      	ldr	r1, [sp, #12]
   37aaa:	6820      	ldr	r0, [r4, #0]
   37aac:	f7fd fc51 	bl	35352 <memmove>
   37ab0:	68a3      	ldr	r3, [r4, #8]
   37ab2:	2000      	movs	r0, #0
   37ab4:	1b9b      	subs	r3, r3, r6
   37ab6:	60a3      	str	r3, [r4, #8]
   37ab8:	6823      	ldr	r3, [r4, #0]
   37aba:	199e      	adds	r6, r3, r6
   37abc:	6026      	str	r6, [r4, #0]
   37abe:	e7da      	b.n	37a76 <__ssputs_r+0x5e>
   37ac0:	002a      	movs	r2, r5
   37ac2:	0038      	movs	r0, r7
   37ac4:	f000 fb65 	bl	38192 <_realloc_r>
   37ac8:	1e06      	subs	r6, r0, #0
   37aca:	d1e0      	bne.n	37a8e <__ssputs_r+0x76>
   37acc:	6921      	ldr	r1, [r4, #16]
   37ace:	0038      	movs	r0, r7
   37ad0:	f7fd fc5a 	bl	35388 <_free_r>
   37ad4:	e7c7      	b.n	37a66 <__ssputs_r+0x4e>
   37ad6:	46c0      	nop			; (mov r8, r8)
   37ad8:	fffffb7f 	.word	0xfffffb7f

00037adc <_svfiprintf_r>:
   37adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   37ade:	b09f      	sub	sp, #124	; 0x7c
   37ae0:	9002      	str	r0, [sp, #8]
   37ae2:	9305      	str	r3, [sp, #20]
   37ae4:	898b      	ldrh	r3, [r1, #12]
   37ae6:	000f      	movs	r7, r1
   37ae8:	0016      	movs	r6, r2
   37aea:	061b      	lsls	r3, r3, #24
   37aec:	d511      	bpl.n	37b12 <_svfiprintf_r+0x36>
   37aee:	690b      	ldr	r3, [r1, #16]
   37af0:	2b00      	cmp	r3, #0
   37af2:	d10e      	bne.n	37b12 <_svfiprintf_r+0x36>
   37af4:	2140      	movs	r1, #64	; 0x40
   37af6:	f7fd fc91 	bl	3541c <_malloc_r>
   37afa:	6038      	str	r0, [r7, #0]
   37afc:	6138      	str	r0, [r7, #16]
   37afe:	2800      	cmp	r0, #0
   37b00:	d105      	bne.n	37b0e <_svfiprintf_r+0x32>
   37b02:	230c      	movs	r3, #12
   37b04:	9a02      	ldr	r2, [sp, #8]
   37b06:	3801      	subs	r0, #1
   37b08:	6013      	str	r3, [r2, #0]
   37b0a:	b01f      	add	sp, #124	; 0x7c
   37b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37b0e:	2340      	movs	r3, #64	; 0x40
   37b10:	617b      	str	r3, [r7, #20]
   37b12:	2300      	movs	r3, #0
   37b14:	ad06      	add	r5, sp, #24
   37b16:	616b      	str	r3, [r5, #20]
   37b18:	3320      	adds	r3, #32
   37b1a:	766b      	strb	r3, [r5, #25]
   37b1c:	3310      	adds	r3, #16
   37b1e:	76ab      	strb	r3, [r5, #26]
   37b20:	0034      	movs	r4, r6
   37b22:	7823      	ldrb	r3, [r4, #0]
   37b24:	2b00      	cmp	r3, #0
   37b26:	d147      	bne.n	37bb8 <_svfiprintf_r+0xdc>
   37b28:	1ba3      	subs	r3, r4, r6
   37b2a:	9304      	str	r3, [sp, #16]
   37b2c:	d00d      	beq.n	37b4a <_svfiprintf_r+0x6e>
   37b2e:	1ba3      	subs	r3, r4, r6
   37b30:	0032      	movs	r2, r6
   37b32:	0039      	movs	r1, r7
   37b34:	9802      	ldr	r0, [sp, #8]
   37b36:	f7ff ff6f 	bl	37a18 <__ssputs_r>
   37b3a:	1c43      	adds	r3, r0, #1
   37b3c:	d100      	bne.n	37b40 <_svfiprintf_r+0x64>
   37b3e:	e0b5      	b.n	37cac <_svfiprintf_r+0x1d0>
   37b40:	696a      	ldr	r2, [r5, #20]
   37b42:	9b04      	ldr	r3, [sp, #16]
   37b44:	4694      	mov	ip, r2
   37b46:	4463      	add	r3, ip
   37b48:	616b      	str	r3, [r5, #20]
   37b4a:	7823      	ldrb	r3, [r4, #0]
   37b4c:	2b00      	cmp	r3, #0
   37b4e:	d100      	bne.n	37b52 <_svfiprintf_r+0x76>
   37b50:	e0ac      	b.n	37cac <_svfiprintf_r+0x1d0>
   37b52:	2201      	movs	r2, #1
   37b54:	2300      	movs	r3, #0
   37b56:	4252      	negs	r2, r2
   37b58:	606a      	str	r2, [r5, #4]
   37b5a:	a902      	add	r1, sp, #8
   37b5c:	3254      	adds	r2, #84	; 0x54
   37b5e:	1852      	adds	r2, r2, r1
   37b60:	3401      	adds	r4, #1
   37b62:	602b      	str	r3, [r5, #0]
   37b64:	60eb      	str	r3, [r5, #12]
   37b66:	60ab      	str	r3, [r5, #8]
   37b68:	7013      	strb	r3, [r2, #0]
   37b6a:	65ab      	str	r3, [r5, #88]	; 0x58
   37b6c:	4e58      	ldr	r6, [pc, #352]	; (37cd0 <_svfiprintf_r+0x1f4>)
   37b6e:	2205      	movs	r2, #5
   37b70:	7821      	ldrb	r1, [r4, #0]
   37b72:	0030      	movs	r0, r6
   37b74:	f000 fb02 	bl	3817c <memchr>
   37b78:	1c62      	adds	r2, r4, #1
   37b7a:	2800      	cmp	r0, #0
   37b7c:	d120      	bne.n	37bc0 <_svfiprintf_r+0xe4>
   37b7e:	6829      	ldr	r1, [r5, #0]
   37b80:	06cb      	lsls	r3, r1, #27
   37b82:	d504      	bpl.n	37b8e <_svfiprintf_r+0xb2>
   37b84:	2353      	movs	r3, #83	; 0x53
   37b86:	ae02      	add	r6, sp, #8
   37b88:	3020      	adds	r0, #32
   37b8a:	199b      	adds	r3, r3, r6
   37b8c:	7018      	strb	r0, [r3, #0]
   37b8e:	070b      	lsls	r3, r1, #28
   37b90:	d504      	bpl.n	37b9c <_svfiprintf_r+0xc0>
   37b92:	2353      	movs	r3, #83	; 0x53
   37b94:	202b      	movs	r0, #43	; 0x2b
   37b96:	ae02      	add	r6, sp, #8
   37b98:	199b      	adds	r3, r3, r6
   37b9a:	7018      	strb	r0, [r3, #0]
   37b9c:	7823      	ldrb	r3, [r4, #0]
   37b9e:	2b2a      	cmp	r3, #42	; 0x2a
   37ba0:	d016      	beq.n	37bd0 <_svfiprintf_r+0xf4>
   37ba2:	2000      	movs	r0, #0
   37ba4:	210a      	movs	r1, #10
   37ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   37ba8:	7822      	ldrb	r2, [r4, #0]
   37baa:	3a30      	subs	r2, #48	; 0x30
   37bac:	2a09      	cmp	r2, #9
   37bae:	d955      	bls.n	37c5c <_svfiprintf_r+0x180>
   37bb0:	2800      	cmp	r0, #0
   37bb2:	d015      	beq.n	37be0 <_svfiprintf_r+0x104>
   37bb4:	9309      	str	r3, [sp, #36]	; 0x24
   37bb6:	e013      	b.n	37be0 <_svfiprintf_r+0x104>
   37bb8:	2b25      	cmp	r3, #37	; 0x25
   37bba:	d0b5      	beq.n	37b28 <_svfiprintf_r+0x4c>
   37bbc:	3401      	adds	r4, #1
   37bbe:	e7b0      	b.n	37b22 <_svfiprintf_r+0x46>
   37bc0:	2301      	movs	r3, #1
   37bc2:	1b80      	subs	r0, r0, r6
   37bc4:	4083      	lsls	r3, r0
   37bc6:	6829      	ldr	r1, [r5, #0]
   37bc8:	0014      	movs	r4, r2
   37bca:	430b      	orrs	r3, r1
   37bcc:	602b      	str	r3, [r5, #0]
   37bce:	e7cd      	b.n	37b6c <_svfiprintf_r+0x90>
   37bd0:	9b05      	ldr	r3, [sp, #20]
   37bd2:	1d18      	adds	r0, r3, #4
   37bd4:	681b      	ldr	r3, [r3, #0]
   37bd6:	9005      	str	r0, [sp, #20]
   37bd8:	2b00      	cmp	r3, #0
   37bda:	db39      	blt.n	37c50 <_svfiprintf_r+0x174>
   37bdc:	9309      	str	r3, [sp, #36]	; 0x24
   37bde:	0014      	movs	r4, r2
   37be0:	7823      	ldrb	r3, [r4, #0]
   37be2:	2b2e      	cmp	r3, #46	; 0x2e
   37be4:	d10b      	bne.n	37bfe <_svfiprintf_r+0x122>
   37be6:	7863      	ldrb	r3, [r4, #1]
   37be8:	1c62      	adds	r2, r4, #1
   37bea:	2b2a      	cmp	r3, #42	; 0x2a
   37bec:	d13e      	bne.n	37c6c <_svfiprintf_r+0x190>
   37bee:	9b05      	ldr	r3, [sp, #20]
   37bf0:	3402      	adds	r4, #2
   37bf2:	1d1a      	adds	r2, r3, #4
   37bf4:	681b      	ldr	r3, [r3, #0]
   37bf6:	9205      	str	r2, [sp, #20]
   37bf8:	2b00      	cmp	r3, #0
   37bfa:	db34      	blt.n	37c66 <_svfiprintf_r+0x18a>
   37bfc:	9307      	str	r3, [sp, #28]
   37bfe:	4e35      	ldr	r6, [pc, #212]	; (37cd4 <_svfiprintf_r+0x1f8>)
   37c00:	7821      	ldrb	r1, [r4, #0]
   37c02:	2203      	movs	r2, #3
   37c04:	0030      	movs	r0, r6
   37c06:	f000 fab9 	bl	3817c <memchr>
   37c0a:	2800      	cmp	r0, #0
   37c0c:	d006      	beq.n	37c1c <_svfiprintf_r+0x140>
   37c0e:	2340      	movs	r3, #64	; 0x40
   37c10:	1b80      	subs	r0, r0, r6
   37c12:	4083      	lsls	r3, r0
   37c14:	682a      	ldr	r2, [r5, #0]
   37c16:	3401      	adds	r4, #1
   37c18:	4313      	orrs	r3, r2
   37c1a:	602b      	str	r3, [r5, #0]
   37c1c:	7821      	ldrb	r1, [r4, #0]
   37c1e:	2206      	movs	r2, #6
   37c20:	482d      	ldr	r0, [pc, #180]	; (37cd8 <_svfiprintf_r+0x1fc>)
   37c22:	1c66      	adds	r6, r4, #1
   37c24:	7629      	strb	r1, [r5, #24]
   37c26:	f000 faa9 	bl	3817c <memchr>
   37c2a:	2800      	cmp	r0, #0
   37c2c:	d046      	beq.n	37cbc <_svfiprintf_r+0x1e0>
   37c2e:	4b2b      	ldr	r3, [pc, #172]	; (37cdc <_svfiprintf_r+0x200>)
   37c30:	2b00      	cmp	r3, #0
   37c32:	d12f      	bne.n	37c94 <_svfiprintf_r+0x1b8>
   37c34:	6829      	ldr	r1, [r5, #0]
   37c36:	9b05      	ldr	r3, [sp, #20]
   37c38:	2207      	movs	r2, #7
   37c3a:	05c9      	lsls	r1, r1, #23
   37c3c:	d528      	bpl.n	37c90 <_svfiprintf_r+0x1b4>
   37c3e:	189b      	adds	r3, r3, r2
   37c40:	4393      	bics	r3, r2
   37c42:	3308      	adds	r3, #8
   37c44:	9305      	str	r3, [sp, #20]
   37c46:	696b      	ldr	r3, [r5, #20]
   37c48:	9a03      	ldr	r2, [sp, #12]
   37c4a:	189b      	adds	r3, r3, r2
   37c4c:	616b      	str	r3, [r5, #20]
   37c4e:	e767      	b.n	37b20 <_svfiprintf_r+0x44>
   37c50:	425b      	negs	r3, r3
   37c52:	60eb      	str	r3, [r5, #12]
   37c54:	2302      	movs	r3, #2
   37c56:	430b      	orrs	r3, r1
   37c58:	602b      	str	r3, [r5, #0]
   37c5a:	e7c0      	b.n	37bde <_svfiprintf_r+0x102>
   37c5c:	434b      	muls	r3, r1
   37c5e:	3401      	adds	r4, #1
   37c60:	189b      	adds	r3, r3, r2
   37c62:	2001      	movs	r0, #1
   37c64:	e7a0      	b.n	37ba8 <_svfiprintf_r+0xcc>
   37c66:	2301      	movs	r3, #1
   37c68:	425b      	negs	r3, r3
   37c6a:	e7c7      	b.n	37bfc <_svfiprintf_r+0x120>
   37c6c:	2300      	movs	r3, #0
   37c6e:	0014      	movs	r4, r2
   37c70:	200a      	movs	r0, #10
   37c72:	001a      	movs	r2, r3
   37c74:	606b      	str	r3, [r5, #4]
   37c76:	7821      	ldrb	r1, [r4, #0]
   37c78:	3930      	subs	r1, #48	; 0x30
   37c7a:	2909      	cmp	r1, #9
   37c7c:	d903      	bls.n	37c86 <_svfiprintf_r+0x1aa>
   37c7e:	2b00      	cmp	r3, #0
   37c80:	d0bd      	beq.n	37bfe <_svfiprintf_r+0x122>
   37c82:	9207      	str	r2, [sp, #28]
   37c84:	e7bb      	b.n	37bfe <_svfiprintf_r+0x122>
   37c86:	4342      	muls	r2, r0
   37c88:	3401      	adds	r4, #1
   37c8a:	1852      	adds	r2, r2, r1
   37c8c:	2301      	movs	r3, #1
   37c8e:	e7f2      	b.n	37c76 <_svfiprintf_r+0x19a>
   37c90:	3307      	adds	r3, #7
   37c92:	e7d5      	b.n	37c40 <_svfiprintf_r+0x164>
   37c94:	ab05      	add	r3, sp, #20
   37c96:	9300      	str	r3, [sp, #0]
   37c98:	003a      	movs	r2, r7
   37c9a:	4b11      	ldr	r3, [pc, #68]	; (37ce0 <_svfiprintf_r+0x204>)
   37c9c:	0029      	movs	r1, r5
   37c9e:	9802      	ldr	r0, [sp, #8]
   37ca0:	e000      	b.n	37ca4 <_svfiprintf_r+0x1c8>
   37ca2:	bf00      	nop
   37ca4:	9003      	str	r0, [sp, #12]
   37ca6:	9b03      	ldr	r3, [sp, #12]
   37ca8:	3301      	adds	r3, #1
   37caa:	d1cc      	bne.n	37c46 <_svfiprintf_r+0x16a>
   37cac:	89bb      	ldrh	r3, [r7, #12]
   37cae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   37cb0:	065b      	lsls	r3, r3, #25
   37cb2:	d400      	bmi.n	37cb6 <_svfiprintf_r+0x1da>
   37cb4:	e729      	b.n	37b0a <_svfiprintf_r+0x2e>
   37cb6:	2001      	movs	r0, #1
   37cb8:	4240      	negs	r0, r0
   37cba:	e726      	b.n	37b0a <_svfiprintf_r+0x2e>
   37cbc:	ab05      	add	r3, sp, #20
   37cbe:	9300      	str	r3, [sp, #0]
   37cc0:	003a      	movs	r2, r7
   37cc2:	4b07      	ldr	r3, [pc, #28]	; (37ce0 <_svfiprintf_r+0x204>)
   37cc4:	0029      	movs	r1, r5
   37cc6:	9802      	ldr	r0, [sp, #8]
   37cc8:	f000 f87a 	bl	37dc0 <_printf_i>
   37ccc:	e7ea      	b.n	37ca4 <_svfiprintf_r+0x1c8>
   37cce:	46c0      	nop			; (mov r8, r8)
   37cd0:	0003c9ec 	.word	0x0003c9ec
   37cd4:	0003c9f2 	.word	0x0003c9f2
   37cd8:	0003c9f6 	.word	0x0003c9f6
   37cdc:	00000000 	.word	0x00000000
   37ce0:	00037a19 	.word	0x00037a19

00037ce4 <_printf_common>:
   37ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37ce6:	0015      	movs	r5, r2
   37ce8:	9301      	str	r3, [sp, #4]
   37cea:	688a      	ldr	r2, [r1, #8]
   37cec:	690b      	ldr	r3, [r1, #16]
   37cee:	9000      	str	r0, [sp, #0]
   37cf0:	000c      	movs	r4, r1
   37cf2:	4293      	cmp	r3, r2
   37cf4:	da00      	bge.n	37cf8 <_printf_common+0x14>
   37cf6:	0013      	movs	r3, r2
   37cf8:	0022      	movs	r2, r4
   37cfa:	602b      	str	r3, [r5, #0]
   37cfc:	3243      	adds	r2, #67	; 0x43
   37cfe:	7812      	ldrb	r2, [r2, #0]
   37d00:	2a00      	cmp	r2, #0
   37d02:	d001      	beq.n	37d08 <_printf_common+0x24>
   37d04:	3301      	adds	r3, #1
   37d06:	602b      	str	r3, [r5, #0]
   37d08:	6823      	ldr	r3, [r4, #0]
   37d0a:	069b      	lsls	r3, r3, #26
   37d0c:	d502      	bpl.n	37d14 <_printf_common+0x30>
   37d0e:	682b      	ldr	r3, [r5, #0]
   37d10:	3302      	adds	r3, #2
   37d12:	602b      	str	r3, [r5, #0]
   37d14:	2706      	movs	r7, #6
   37d16:	6823      	ldr	r3, [r4, #0]
   37d18:	401f      	ands	r7, r3
   37d1a:	d027      	beq.n	37d6c <_printf_common+0x88>
   37d1c:	0023      	movs	r3, r4
   37d1e:	3343      	adds	r3, #67	; 0x43
   37d20:	781b      	ldrb	r3, [r3, #0]
   37d22:	1e5a      	subs	r2, r3, #1
   37d24:	4193      	sbcs	r3, r2
   37d26:	6822      	ldr	r2, [r4, #0]
   37d28:	0692      	lsls	r2, r2, #26
   37d2a:	d430      	bmi.n	37d8e <_printf_common+0xaa>
   37d2c:	0022      	movs	r2, r4
   37d2e:	9901      	ldr	r1, [sp, #4]
   37d30:	3243      	adds	r2, #67	; 0x43
   37d32:	9800      	ldr	r0, [sp, #0]
   37d34:	9e08      	ldr	r6, [sp, #32]
   37d36:	47b0      	blx	r6
   37d38:	1c43      	adds	r3, r0, #1
   37d3a:	d025      	beq.n	37d88 <_printf_common+0xa4>
   37d3c:	2306      	movs	r3, #6
   37d3e:	6820      	ldr	r0, [r4, #0]
   37d40:	682a      	ldr	r2, [r5, #0]
   37d42:	68e1      	ldr	r1, [r4, #12]
   37d44:	4003      	ands	r3, r0
   37d46:	2500      	movs	r5, #0
   37d48:	2b04      	cmp	r3, #4
   37d4a:	d103      	bne.n	37d54 <_printf_common+0x70>
   37d4c:	1a8d      	subs	r5, r1, r2
   37d4e:	43eb      	mvns	r3, r5
   37d50:	17db      	asrs	r3, r3, #31
   37d52:	401d      	ands	r5, r3
   37d54:	68a3      	ldr	r3, [r4, #8]
   37d56:	6922      	ldr	r2, [r4, #16]
   37d58:	4293      	cmp	r3, r2
   37d5a:	dd01      	ble.n	37d60 <_printf_common+0x7c>
   37d5c:	1a9b      	subs	r3, r3, r2
   37d5e:	18ed      	adds	r5, r5, r3
   37d60:	2700      	movs	r7, #0
   37d62:	42bd      	cmp	r5, r7
   37d64:	d120      	bne.n	37da8 <_printf_common+0xc4>
   37d66:	2000      	movs	r0, #0
   37d68:	e010      	b.n	37d8c <_printf_common+0xa8>
   37d6a:	3701      	adds	r7, #1
   37d6c:	68e3      	ldr	r3, [r4, #12]
   37d6e:	682a      	ldr	r2, [r5, #0]
   37d70:	1a9b      	subs	r3, r3, r2
   37d72:	429f      	cmp	r7, r3
   37d74:	dad2      	bge.n	37d1c <_printf_common+0x38>
   37d76:	0022      	movs	r2, r4
   37d78:	2301      	movs	r3, #1
   37d7a:	3219      	adds	r2, #25
   37d7c:	9901      	ldr	r1, [sp, #4]
   37d7e:	9800      	ldr	r0, [sp, #0]
   37d80:	9e08      	ldr	r6, [sp, #32]
   37d82:	47b0      	blx	r6
   37d84:	1c43      	adds	r3, r0, #1
   37d86:	d1f0      	bne.n	37d6a <_printf_common+0x86>
   37d88:	2001      	movs	r0, #1
   37d8a:	4240      	negs	r0, r0
   37d8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   37d8e:	2030      	movs	r0, #48	; 0x30
   37d90:	18e1      	adds	r1, r4, r3
   37d92:	3143      	adds	r1, #67	; 0x43
   37d94:	7008      	strb	r0, [r1, #0]
   37d96:	0021      	movs	r1, r4
   37d98:	1c5a      	adds	r2, r3, #1
   37d9a:	3145      	adds	r1, #69	; 0x45
   37d9c:	7809      	ldrb	r1, [r1, #0]
   37d9e:	18a2      	adds	r2, r4, r2
   37da0:	3243      	adds	r2, #67	; 0x43
   37da2:	3302      	adds	r3, #2
   37da4:	7011      	strb	r1, [r2, #0]
   37da6:	e7c1      	b.n	37d2c <_printf_common+0x48>
   37da8:	0022      	movs	r2, r4
   37daa:	2301      	movs	r3, #1
   37dac:	321a      	adds	r2, #26
   37dae:	9901      	ldr	r1, [sp, #4]
   37db0:	9800      	ldr	r0, [sp, #0]
   37db2:	9e08      	ldr	r6, [sp, #32]
   37db4:	47b0      	blx	r6
   37db6:	1c43      	adds	r3, r0, #1
   37db8:	d0e6      	beq.n	37d88 <_printf_common+0xa4>
   37dba:	3701      	adds	r7, #1
   37dbc:	e7d1      	b.n	37d62 <_printf_common+0x7e>
	...

00037dc0 <_printf_i>:
   37dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   37dc2:	b08b      	sub	sp, #44	; 0x2c
   37dc4:	9206      	str	r2, [sp, #24]
   37dc6:	000a      	movs	r2, r1
   37dc8:	3243      	adds	r2, #67	; 0x43
   37dca:	9307      	str	r3, [sp, #28]
   37dcc:	9005      	str	r0, [sp, #20]
   37dce:	9204      	str	r2, [sp, #16]
   37dd0:	7e0a      	ldrb	r2, [r1, #24]
   37dd2:	000c      	movs	r4, r1
   37dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37dd6:	2a6e      	cmp	r2, #110	; 0x6e
   37dd8:	d100      	bne.n	37ddc <_printf_i+0x1c>
   37dda:	e08f      	b.n	37efc <_printf_i+0x13c>
   37ddc:	d817      	bhi.n	37e0e <_printf_i+0x4e>
   37dde:	2a63      	cmp	r2, #99	; 0x63
   37de0:	d02c      	beq.n	37e3c <_printf_i+0x7c>
   37de2:	d808      	bhi.n	37df6 <_printf_i+0x36>
   37de4:	2a00      	cmp	r2, #0
   37de6:	d100      	bne.n	37dea <_printf_i+0x2a>
   37de8:	e099      	b.n	37f1e <_printf_i+0x15e>
   37dea:	2a58      	cmp	r2, #88	; 0x58
   37dec:	d054      	beq.n	37e98 <_printf_i+0xd8>
   37dee:	0026      	movs	r6, r4
   37df0:	3642      	adds	r6, #66	; 0x42
   37df2:	7032      	strb	r2, [r6, #0]
   37df4:	e029      	b.n	37e4a <_printf_i+0x8a>
   37df6:	2a64      	cmp	r2, #100	; 0x64
   37df8:	d001      	beq.n	37dfe <_printf_i+0x3e>
   37dfa:	2a69      	cmp	r2, #105	; 0x69
   37dfc:	d1f7      	bne.n	37dee <_printf_i+0x2e>
   37dfe:	6821      	ldr	r1, [r4, #0]
   37e00:	681a      	ldr	r2, [r3, #0]
   37e02:	0608      	lsls	r0, r1, #24
   37e04:	d523      	bpl.n	37e4e <_printf_i+0x8e>
   37e06:	1d11      	adds	r1, r2, #4
   37e08:	6019      	str	r1, [r3, #0]
   37e0a:	6815      	ldr	r5, [r2, #0]
   37e0c:	e025      	b.n	37e5a <_printf_i+0x9a>
   37e0e:	2a73      	cmp	r2, #115	; 0x73
   37e10:	d100      	bne.n	37e14 <_printf_i+0x54>
   37e12:	e088      	b.n	37f26 <_printf_i+0x166>
   37e14:	d808      	bhi.n	37e28 <_printf_i+0x68>
   37e16:	2a6f      	cmp	r2, #111	; 0x6f
   37e18:	d029      	beq.n	37e6e <_printf_i+0xae>
   37e1a:	2a70      	cmp	r2, #112	; 0x70
   37e1c:	d1e7      	bne.n	37dee <_printf_i+0x2e>
   37e1e:	2220      	movs	r2, #32
   37e20:	6809      	ldr	r1, [r1, #0]
   37e22:	430a      	orrs	r2, r1
   37e24:	6022      	str	r2, [r4, #0]
   37e26:	e003      	b.n	37e30 <_printf_i+0x70>
   37e28:	2a75      	cmp	r2, #117	; 0x75
   37e2a:	d020      	beq.n	37e6e <_printf_i+0xae>
   37e2c:	2a78      	cmp	r2, #120	; 0x78
   37e2e:	d1de      	bne.n	37dee <_printf_i+0x2e>
   37e30:	0022      	movs	r2, r4
   37e32:	2178      	movs	r1, #120	; 0x78
   37e34:	3245      	adds	r2, #69	; 0x45
   37e36:	7011      	strb	r1, [r2, #0]
   37e38:	4a6c      	ldr	r2, [pc, #432]	; (37fec <_printf_i+0x22c>)
   37e3a:	e030      	b.n	37e9e <_printf_i+0xde>
   37e3c:	000e      	movs	r6, r1
   37e3e:	681a      	ldr	r2, [r3, #0]
   37e40:	3642      	adds	r6, #66	; 0x42
   37e42:	1d11      	adds	r1, r2, #4
   37e44:	6019      	str	r1, [r3, #0]
   37e46:	6813      	ldr	r3, [r2, #0]
   37e48:	7033      	strb	r3, [r6, #0]
   37e4a:	2301      	movs	r3, #1
   37e4c:	e079      	b.n	37f42 <_printf_i+0x182>
   37e4e:	0649      	lsls	r1, r1, #25
   37e50:	d5d9      	bpl.n	37e06 <_printf_i+0x46>
   37e52:	1d11      	adds	r1, r2, #4
   37e54:	6019      	str	r1, [r3, #0]
   37e56:	2300      	movs	r3, #0
   37e58:	5ed5      	ldrsh	r5, [r2, r3]
   37e5a:	2d00      	cmp	r5, #0
   37e5c:	da03      	bge.n	37e66 <_printf_i+0xa6>
   37e5e:	232d      	movs	r3, #45	; 0x2d
   37e60:	9a04      	ldr	r2, [sp, #16]
   37e62:	426d      	negs	r5, r5
   37e64:	7013      	strb	r3, [r2, #0]
   37e66:	4b62      	ldr	r3, [pc, #392]	; (37ff0 <_printf_i+0x230>)
   37e68:	270a      	movs	r7, #10
   37e6a:	9303      	str	r3, [sp, #12]
   37e6c:	e02f      	b.n	37ece <_printf_i+0x10e>
   37e6e:	6820      	ldr	r0, [r4, #0]
   37e70:	6819      	ldr	r1, [r3, #0]
   37e72:	0605      	lsls	r5, r0, #24
   37e74:	d503      	bpl.n	37e7e <_printf_i+0xbe>
   37e76:	1d08      	adds	r0, r1, #4
   37e78:	6018      	str	r0, [r3, #0]
   37e7a:	680d      	ldr	r5, [r1, #0]
   37e7c:	e005      	b.n	37e8a <_printf_i+0xca>
   37e7e:	0640      	lsls	r0, r0, #25
   37e80:	d5f9      	bpl.n	37e76 <_printf_i+0xb6>
   37e82:	680d      	ldr	r5, [r1, #0]
   37e84:	1d08      	adds	r0, r1, #4
   37e86:	6018      	str	r0, [r3, #0]
   37e88:	b2ad      	uxth	r5, r5
   37e8a:	4b59      	ldr	r3, [pc, #356]	; (37ff0 <_printf_i+0x230>)
   37e8c:	2708      	movs	r7, #8
   37e8e:	9303      	str	r3, [sp, #12]
   37e90:	2a6f      	cmp	r2, #111	; 0x6f
   37e92:	d018      	beq.n	37ec6 <_printf_i+0x106>
   37e94:	270a      	movs	r7, #10
   37e96:	e016      	b.n	37ec6 <_printf_i+0x106>
   37e98:	3145      	adds	r1, #69	; 0x45
   37e9a:	700a      	strb	r2, [r1, #0]
   37e9c:	4a54      	ldr	r2, [pc, #336]	; (37ff0 <_printf_i+0x230>)
   37e9e:	9203      	str	r2, [sp, #12]
   37ea0:	681a      	ldr	r2, [r3, #0]
   37ea2:	6821      	ldr	r1, [r4, #0]
   37ea4:	1d10      	adds	r0, r2, #4
   37ea6:	6018      	str	r0, [r3, #0]
   37ea8:	6815      	ldr	r5, [r2, #0]
   37eaa:	0608      	lsls	r0, r1, #24
   37eac:	d522      	bpl.n	37ef4 <_printf_i+0x134>
   37eae:	07cb      	lsls	r3, r1, #31
   37eb0:	d502      	bpl.n	37eb8 <_printf_i+0xf8>
   37eb2:	2320      	movs	r3, #32
   37eb4:	4319      	orrs	r1, r3
   37eb6:	6021      	str	r1, [r4, #0]
   37eb8:	2710      	movs	r7, #16
   37eba:	2d00      	cmp	r5, #0
   37ebc:	d103      	bne.n	37ec6 <_printf_i+0x106>
   37ebe:	2320      	movs	r3, #32
   37ec0:	6822      	ldr	r2, [r4, #0]
   37ec2:	439a      	bics	r2, r3
   37ec4:	6022      	str	r2, [r4, #0]
   37ec6:	0023      	movs	r3, r4
   37ec8:	2200      	movs	r2, #0
   37eca:	3343      	adds	r3, #67	; 0x43
   37ecc:	701a      	strb	r2, [r3, #0]
   37ece:	6863      	ldr	r3, [r4, #4]
   37ed0:	60a3      	str	r3, [r4, #8]
   37ed2:	2b00      	cmp	r3, #0
   37ed4:	db5c      	blt.n	37f90 <_printf_i+0x1d0>
   37ed6:	2204      	movs	r2, #4
   37ed8:	6821      	ldr	r1, [r4, #0]
   37eda:	4391      	bics	r1, r2
   37edc:	6021      	str	r1, [r4, #0]
   37ede:	2d00      	cmp	r5, #0
   37ee0:	d158      	bne.n	37f94 <_printf_i+0x1d4>
   37ee2:	9e04      	ldr	r6, [sp, #16]
   37ee4:	2b00      	cmp	r3, #0
   37ee6:	d064      	beq.n	37fb2 <_printf_i+0x1f2>
   37ee8:	0026      	movs	r6, r4
   37eea:	9b03      	ldr	r3, [sp, #12]
   37eec:	3642      	adds	r6, #66	; 0x42
   37eee:	781b      	ldrb	r3, [r3, #0]
   37ef0:	7033      	strb	r3, [r6, #0]
   37ef2:	e05e      	b.n	37fb2 <_printf_i+0x1f2>
   37ef4:	0648      	lsls	r0, r1, #25
   37ef6:	d5da      	bpl.n	37eae <_printf_i+0xee>
   37ef8:	b2ad      	uxth	r5, r5
   37efa:	e7d8      	b.n	37eae <_printf_i+0xee>
   37efc:	6809      	ldr	r1, [r1, #0]
   37efe:	681a      	ldr	r2, [r3, #0]
   37f00:	0608      	lsls	r0, r1, #24
   37f02:	d505      	bpl.n	37f10 <_printf_i+0x150>
   37f04:	1d11      	adds	r1, r2, #4
   37f06:	6019      	str	r1, [r3, #0]
   37f08:	6813      	ldr	r3, [r2, #0]
   37f0a:	6962      	ldr	r2, [r4, #20]
   37f0c:	601a      	str	r2, [r3, #0]
   37f0e:	e006      	b.n	37f1e <_printf_i+0x15e>
   37f10:	0649      	lsls	r1, r1, #25
   37f12:	d5f7      	bpl.n	37f04 <_printf_i+0x144>
   37f14:	1d11      	adds	r1, r2, #4
   37f16:	6019      	str	r1, [r3, #0]
   37f18:	6813      	ldr	r3, [r2, #0]
   37f1a:	8aa2      	ldrh	r2, [r4, #20]
   37f1c:	801a      	strh	r2, [r3, #0]
   37f1e:	2300      	movs	r3, #0
   37f20:	9e04      	ldr	r6, [sp, #16]
   37f22:	6123      	str	r3, [r4, #16]
   37f24:	e054      	b.n	37fd0 <_printf_i+0x210>
   37f26:	681a      	ldr	r2, [r3, #0]
   37f28:	1d11      	adds	r1, r2, #4
   37f2a:	6019      	str	r1, [r3, #0]
   37f2c:	6816      	ldr	r6, [r2, #0]
   37f2e:	2100      	movs	r1, #0
   37f30:	6862      	ldr	r2, [r4, #4]
   37f32:	0030      	movs	r0, r6
   37f34:	f000 f922 	bl	3817c <memchr>
   37f38:	2800      	cmp	r0, #0
   37f3a:	d001      	beq.n	37f40 <_printf_i+0x180>
   37f3c:	1b80      	subs	r0, r0, r6
   37f3e:	6060      	str	r0, [r4, #4]
   37f40:	6863      	ldr	r3, [r4, #4]
   37f42:	6123      	str	r3, [r4, #16]
   37f44:	2300      	movs	r3, #0
   37f46:	9a04      	ldr	r2, [sp, #16]
   37f48:	7013      	strb	r3, [r2, #0]
   37f4a:	e041      	b.n	37fd0 <_printf_i+0x210>
   37f4c:	6923      	ldr	r3, [r4, #16]
   37f4e:	0032      	movs	r2, r6
   37f50:	9906      	ldr	r1, [sp, #24]
   37f52:	9805      	ldr	r0, [sp, #20]
   37f54:	9d07      	ldr	r5, [sp, #28]
   37f56:	47a8      	blx	r5
   37f58:	1c43      	adds	r3, r0, #1
   37f5a:	d043      	beq.n	37fe4 <_printf_i+0x224>
   37f5c:	6823      	ldr	r3, [r4, #0]
   37f5e:	2500      	movs	r5, #0
   37f60:	079b      	lsls	r3, r3, #30
   37f62:	d40f      	bmi.n	37f84 <_printf_i+0x1c4>
   37f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   37f66:	68e0      	ldr	r0, [r4, #12]
   37f68:	4298      	cmp	r0, r3
   37f6a:	da3d      	bge.n	37fe8 <_printf_i+0x228>
   37f6c:	0018      	movs	r0, r3
   37f6e:	e03b      	b.n	37fe8 <_printf_i+0x228>
   37f70:	0022      	movs	r2, r4
   37f72:	2301      	movs	r3, #1
   37f74:	3219      	adds	r2, #25
   37f76:	9906      	ldr	r1, [sp, #24]
   37f78:	9805      	ldr	r0, [sp, #20]
   37f7a:	9e07      	ldr	r6, [sp, #28]
   37f7c:	47b0      	blx	r6
   37f7e:	1c43      	adds	r3, r0, #1
   37f80:	d030      	beq.n	37fe4 <_printf_i+0x224>
   37f82:	3501      	adds	r5, #1
   37f84:	68e3      	ldr	r3, [r4, #12]
   37f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   37f88:	1a9b      	subs	r3, r3, r2
   37f8a:	429d      	cmp	r5, r3
   37f8c:	dbf0      	blt.n	37f70 <_printf_i+0x1b0>
   37f8e:	e7e9      	b.n	37f64 <_printf_i+0x1a4>
   37f90:	2d00      	cmp	r5, #0
   37f92:	d0a9      	beq.n	37ee8 <_printf_i+0x128>
   37f94:	9e04      	ldr	r6, [sp, #16]
   37f96:	0028      	movs	r0, r5
   37f98:	0039      	movs	r1, r7
   37f9a:	f7fb f8d1 	bl	33140 <__aeabi_uidivmod>
   37f9e:	9b03      	ldr	r3, [sp, #12]
   37fa0:	3e01      	subs	r6, #1
   37fa2:	5c5b      	ldrb	r3, [r3, r1]
   37fa4:	0028      	movs	r0, r5
   37fa6:	7033      	strb	r3, [r6, #0]
   37fa8:	0039      	movs	r1, r7
   37faa:	f7fb f843 	bl	33034 <__udivsi3>
   37fae:	1e05      	subs	r5, r0, #0
   37fb0:	d1f1      	bne.n	37f96 <_printf_i+0x1d6>
   37fb2:	2f08      	cmp	r7, #8
   37fb4:	d109      	bne.n	37fca <_printf_i+0x20a>
   37fb6:	6823      	ldr	r3, [r4, #0]
   37fb8:	07db      	lsls	r3, r3, #31
   37fba:	d506      	bpl.n	37fca <_printf_i+0x20a>
   37fbc:	6863      	ldr	r3, [r4, #4]
   37fbe:	6922      	ldr	r2, [r4, #16]
   37fc0:	4293      	cmp	r3, r2
   37fc2:	dc02      	bgt.n	37fca <_printf_i+0x20a>
   37fc4:	2330      	movs	r3, #48	; 0x30
   37fc6:	3e01      	subs	r6, #1
   37fc8:	7033      	strb	r3, [r6, #0]
   37fca:	9b04      	ldr	r3, [sp, #16]
   37fcc:	1b9b      	subs	r3, r3, r6
   37fce:	6123      	str	r3, [r4, #16]
   37fd0:	9b07      	ldr	r3, [sp, #28]
   37fd2:	aa09      	add	r2, sp, #36	; 0x24
   37fd4:	9300      	str	r3, [sp, #0]
   37fd6:	0021      	movs	r1, r4
   37fd8:	9b06      	ldr	r3, [sp, #24]
   37fda:	9805      	ldr	r0, [sp, #20]
   37fdc:	f7ff fe82 	bl	37ce4 <_printf_common>
   37fe0:	1c43      	adds	r3, r0, #1
   37fe2:	d1b3      	bne.n	37f4c <_printf_i+0x18c>
   37fe4:	2001      	movs	r0, #1
   37fe6:	4240      	negs	r0, r0
   37fe8:	b00b      	add	sp, #44	; 0x2c
   37fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37fec:	0003ca0e 	.word	0x0003ca0e
   37ff0:	0003c9fd 	.word	0x0003c9fd

00037ff4 <__sread>:
   37ff4:	b570      	push	{r4, r5, r6, lr}
   37ff6:	000c      	movs	r4, r1
   37ff8:	250e      	movs	r5, #14
   37ffa:	5f49      	ldrsh	r1, [r1, r5]
   37ffc:	f000 f8f0 	bl	381e0 <_read_r>
   38000:	2800      	cmp	r0, #0
   38002:	db03      	blt.n	3800c <__sread+0x18>
   38004:	6d63      	ldr	r3, [r4, #84]	; 0x54
   38006:	181b      	adds	r3, r3, r0
   38008:	6563      	str	r3, [r4, #84]	; 0x54
   3800a:	bd70      	pop	{r4, r5, r6, pc}
   3800c:	89a3      	ldrh	r3, [r4, #12]
   3800e:	4a02      	ldr	r2, [pc, #8]	; (38018 <__sread+0x24>)
   38010:	4013      	ands	r3, r2
   38012:	81a3      	strh	r3, [r4, #12]
   38014:	e7f9      	b.n	3800a <__sread+0x16>
   38016:	46c0      	nop			; (mov r8, r8)
   38018:	ffffefff 	.word	0xffffefff

0003801c <__swrite>:
   3801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3801e:	001f      	movs	r7, r3
   38020:	898b      	ldrh	r3, [r1, #12]
   38022:	0005      	movs	r5, r0
   38024:	000c      	movs	r4, r1
   38026:	0016      	movs	r6, r2
   38028:	05db      	lsls	r3, r3, #23
   3802a:	d505      	bpl.n	38038 <__swrite+0x1c>
   3802c:	230e      	movs	r3, #14
   3802e:	5ec9      	ldrsh	r1, [r1, r3]
   38030:	2200      	movs	r2, #0
   38032:	2302      	movs	r3, #2
   38034:	f000 f88e 	bl	38154 <_lseek_r>
   38038:	89a3      	ldrh	r3, [r4, #12]
   3803a:	4a05      	ldr	r2, [pc, #20]	; (38050 <__swrite+0x34>)
   3803c:	0028      	movs	r0, r5
   3803e:	4013      	ands	r3, r2
   38040:	81a3      	strh	r3, [r4, #12]
   38042:	0032      	movs	r2, r6
   38044:	230e      	movs	r3, #14
   38046:	5ee1      	ldrsh	r1, [r4, r3]
   38048:	003b      	movs	r3, r7
   3804a:	f000 f839 	bl	380c0 <_write_r>
   3804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38050:	ffffefff 	.word	0xffffefff

00038054 <__sseek>:
   38054:	b570      	push	{r4, r5, r6, lr}
   38056:	000c      	movs	r4, r1
   38058:	250e      	movs	r5, #14
   3805a:	5f49      	ldrsh	r1, [r1, r5]
   3805c:	f000 f87a 	bl	38154 <_lseek_r>
   38060:	89a3      	ldrh	r3, [r4, #12]
   38062:	1c42      	adds	r2, r0, #1
   38064:	d103      	bne.n	3806e <__sseek+0x1a>
   38066:	4a05      	ldr	r2, [pc, #20]	; (3807c <__sseek+0x28>)
   38068:	4013      	ands	r3, r2
   3806a:	81a3      	strh	r3, [r4, #12]
   3806c:	bd70      	pop	{r4, r5, r6, pc}
   3806e:	2280      	movs	r2, #128	; 0x80
   38070:	0152      	lsls	r2, r2, #5
   38072:	4313      	orrs	r3, r2
   38074:	81a3      	strh	r3, [r4, #12]
   38076:	6560      	str	r0, [r4, #84]	; 0x54
   38078:	e7f8      	b.n	3806c <__sseek+0x18>
   3807a:	46c0      	nop			; (mov r8, r8)
   3807c:	ffffefff 	.word	0xffffefff

00038080 <__sclose>:
   38080:	b510      	push	{r4, lr}
   38082:	230e      	movs	r3, #14
   38084:	5ec9      	ldrsh	r1, [r1, r3]
   38086:	f000 f82f 	bl	380e8 <_close_r>
   3808a:	bd10      	pop	{r4, pc}

0003808c <strchr>:
   3808c:	b2c9      	uxtb	r1, r1
   3808e:	7803      	ldrb	r3, [r0, #0]
   38090:	2b00      	cmp	r3, #0
   38092:	d004      	beq.n	3809e <strchr+0x12>
   38094:	4299      	cmp	r1, r3
   38096:	d100      	bne.n	3809a <strchr+0xe>
   38098:	4770      	bx	lr
   3809a:	3001      	adds	r0, #1
   3809c:	e7f7      	b.n	3808e <strchr+0x2>
   3809e:	424b      	negs	r3, r1
   380a0:	4159      	adcs	r1, r3
   380a2:	4249      	negs	r1, r1
   380a4:	4008      	ands	r0, r1
   380a6:	e7f7      	b.n	38098 <strchr+0xc>

000380a8 <__ascii_wctomb>:
   380a8:	1e0b      	subs	r3, r1, #0
   380aa:	d004      	beq.n	380b6 <__ascii_wctomb+0xe>
   380ac:	2aff      	cmp	r2, #255	; 0xff
   380ae:	d904      	bls.n	380ba <__ascii_wctomb+0x12>
   380b0:	238a      	movs	r3, #138	; 0x8a
   380b2:	6003      	str	r3, [r0, #0]
   380b4:	3b8b      	subs	r3, #139	; 0x8b
   380b6:	0018      	movs	r0, r3
   380b8:	4770      	bx	lr
   380ba:	700a      	strb	r2, [r1, #0]
   380bc:	2301      	movs	r3, #1
   380be:	e7fa      	b.n	380b6 <__ascii_wctomb+0xe>

000380c0 <_write_r>:
   380c0:	b570      	push	{r4, r5, r6, lr}
   380c2:	0005      	movs	r5, r0
   380c4:	0008      	movs	r0, r1
   380c6:	0011      	movs	r1, r2
   380c8:	2200      	movs	r2, #0
   380ca:	4c06      	ldr	r4, [pc, #24]	; (380e4 <_write_r+0x24>)
   380cc:	6022      	str	r2, [r4, #0]
   380ce:	001a      	movs	r2, r3
   380d0:	f7f3 fb4e 	bl	2b770 <_write>
   380d4:	1c43      	adds	r3, r0, #1
   380d6:	d103      	bne.n	380e0 <_write_r+0x20>
   380d8:	6823      	ldr	r3, [r4, #0]
   380da:	2b00      	cmp	r3, #0
   380dc:	d000      	beq.n	380e0 <_write_r+0x20>
   380de:	602b      	str	r3, [r5, #0]
   380e0:	bd70      	pop	{r4, r5, r6, pc}
   380e2:	46c0      	nop			; (mov r8, r8)
   380e4:	20005e58 	.word	0x20005e58

000380e8 <_close_r>:
   380e8:	2300      	movs	r3, #0
   380ea:	b570      	push	{r4, r5, r6, lr}
   380ec:	4c06      	ldr	r4, [pc, #24]	; (38108 <_close_r+0x20>)
   380ee:	0005      	movs	r5, r0
   380f0:	0008      	movs	r0, r1
   380f2:	6023      	str	r3, [r4, #0]
   380f4:	f7f3 fb90 	bl	2b818 <_close>
   380f8:	1c43      	adds	r3, r0, #1
   380fa:	d103      	bne.n	38104 <_close_r+0x1c>
   380fc:	6823      	ldr	r3, [r4, #0]
   380fe:	2b00      	cmp	r3, #0
   38100:	d000      	beq.n	38104 <_close_r+0x1c>
   38102:	602b      	str	r3, [r5, #0]
   38104:	bd70      	pop	{r4, r5, r6, pc}
   38106:	46c0      	nop			; (mov r8, r8)
   38108:	20005e58 	.word	0x20005e58

0003810c <_fstat_r>:
   3810c:	2300      	movs	r3, #0
   3810e:	b570      	push	{r4, r5, r6, lr}
   38110:	4c06      	ldr	r4, [pc, #24]	; (3812c <_fstat_r+0x20>)
   38112:	0005      	movs	r5, r0
   38114:	0008      	movs	r0, r1
   38116:	0011      	movs	r1, r2
   38118:	6023      	str	r3, [r4, #0]
   3811a:	f7f3 fb87 	bl	2b82c <_fstat>
   3811e:	1c43      	adds	r3, r0, #1
   38120:	d103      	bne.n	3812a <_fstat_r+0x1e>
   38122:	6823      	ldr	r3, [r4, #0]
   38124:	2b00      	cmp	r3, #0
   38126:	d000      	beq.n	3812a <_fstat_r+0x1e>
   38128:	602b      	str	r3, [r5, #0]
   3812a:	bd70      	pop	{r4, r5, r6, pc}
   3812c:	20005e58 	.word	0x20005e58

00038130 <_isatty_r>:
   38130:	2300      	movs	r3, #0
   38132:	b570      	push	{r4, r5, r6, lr}
   38134:	4c06      	ldr	r4, [pc, #24]	; (38150 <_isatty_r+0x20>)
   38136:	0005      	movs	r5, r0
   38138:	0008      	movs	r0, r1
   3813a:	6023      	str	r3, [r4, #0]
   3813c:	f7f3 fb84 	bl	2b848 <_isatty>
   38140:	1c43      	adds	r3, r0, #1
   38142:	d103      	bne.n	3814c <_isatty_r+0x1c>
   38144:	6823      	ldr	r3, [r4, #0]
   38146:	2b00      	cmp	r3, #0
   38148:	d000      	beq.n	3814c <_isatty_r+0x1c>
   3814a:	602b      	str	r3, [r5, #0]
   3814c:	bd70      	pop	{r4, r5, r6, pc}
   3814e:	46c0      	nop			; (mov r8, r8)
   38150:	20005e58 	.word	0x20005e58

00038154 <_lseek_r>:
   38154:	b570      	push	{r4, r5, r6, lr}
   38156:	0005      	movs	r5, r0
   38158:	0008      	movs	r0, r1
   3815a:	0011      	movs	r1, r2
   3815c:	2200      	movs	r2, #0
   3815e:	4c06      	ldr	r4, [pc, #24]	; (38178 <_lseek_r+0x24>)
   38160:	6022      	str	r2, [r4, #0]
   38162:	001a      	movs	r2, r3
   38164:	f7f3 fb79 	bl	2b85a <_lseek>
   38168:	1c43      	adds	r3, r0, #1
   3816a:	d103      	bne.n	38174 <_lseek_r+0x20>
   3816c:	6823      	ldr	r3, [r4, #0]
   3816e:	2b00      	cmp	r3, #0
   38170:	d000      	beq.n	38174 <_lseek_r+0x20>
   38172:	602b      	str	r3, [r5, #0]
   38174:	bd70      	pop	{r4, r5, r6, pc}
   38176:	46c0      	nop			; (mov r8, r8)
   38178:	20005e58 	.word	0x20005e58

0003817c <memchr>:
   3817c:	b2c9      	uxtb	r1, r1
   3817e:	1882      	adds	r2, r0, r2
   38180:	4290      	cmp	r0, r2
   38182:	d101      	bne.n	38188 <memchr+0xc>
   38184:	2000      	movs	r0, #0
   38186:	4770      	bx	lr
   38188:	7803      	ldrb	r3, [r0, #0]
   3818a:	428b      	cmp	r3, r1
   3818c:	d0fb      	beq.n	38186 <memchr+0xa>
   3818e:	3001      	adds	r0, #1
   38190:	e7f6      	b.n	38180 <memchr+0x4>

00038192 <_realloc_r>:
   38192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38194:	0007      	movs	r7, r0
   38196:	000d      	movs	r5, r1
   38198:	0016      	movs	r6, r2
   3819a:	2900      	cmp	r1, #0
   3819c:	d105      	bne.n	381aa <_realloc_r+0x18>
   3819e:	0011      	movs	r1, r2
   381a0:	f7fd f93c 	bl	3541c <_malloc_r>
   381a4:	0004      	movs	r4, r0
   381a6:	0020      	movs	r0, r4
   381a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   381aa:	2a00      	cmp	r2, #0
   381ac:	d103      	bne.n	381b6 <_realloc_r+0x24>
   381ae:	f7fd f8eb 	bl	35388 <_free_r>
   381b2:	0034      	movs	r4, r6
   381b4:	e7f7      	b.n	381a6 <_realloc_r+0x14>
   381b6:	f000 f827 	bl	38208 <_malloc_usable_size_r>
   381ba:	002c      	movs	r4, r5
   381bc:	4286      	cmp	r6, r0
   381be:	d9f2      	bls.n	381a6 <_realloc_r+0x14>
   381c0:	0031      	movs	r1, r6
   381c2:	0038      	movs	r0, r7
   381c4:	f7fd f92a 	bl	3541c <_malloc_r>
   381c8:	1e04      	subs	r4, r0, #0
   381ca:	d0ec      	beq.n	381a6 <_realloc_r+0x14>
   381cc:	0029      	movs	r1, r5
   381ce:	0032      	movs	r2, r6
   381d0:	f7fd f8b6 	bl	35340 <memcpy>
   381d4:	0029      	movs	r1, r5
   381d6:	0038      	movs	r0, r7
   381d8:	f7fd f8d6 	bl	35388 <_free_r>
   381dc:	e7e3      	b.n	381a6 <_realloc_r+0x14>
	...

000381e0 <_read_r>:
   381e0:	b570      	push	{r4, r5, r6, lr}
   381e2:	0005      	movs	r5, r0
   381e4:	0008      	movs	r0, r1
   381e6:	0011      	movs	r1, r2
   381e8:	2200      	movs	r2, #0
   381ea:	4c06      	ldr	r4, [pc, #24]	; (38204 <_read_r+0x24>)
   381ec:	6022      	str	r2, [r4, #0]
   381ee:	001a      	movs	r2, r3
   381f0:	f7f3 fa94 	bl	2b71c <_read>
   381f4:	1c43      	adds	r3, r0, #1
   381f6:	d103      	bne.n	38200 <_read_r+0x20>
   381f8:	6823      	ldr	r3, [r4, #0]
   381fa:	2b00      	cmp	r3, #0
   381fc:	d000      	beq.n	38200 <_read_r+0x20>
   381fe:	602b      	str	r3, [r5, #0]
   38200:	bd70      	pop	{r4, r5, r6, pc}
   38202:	46c0      	nop			; (mov r8, r8)
   38204:	20005e58 	.word	0x20005e58

00038208 <_malloc_usable_size_r>:
   38208:	1f0b      	subs	r3, r1, #4
   3820a:	681b      	ldr	r3, [r3, #0]
   3820c:	1f18      	subs	r0, r3, #4
   3820e:	2b00      	cmp	r3, #0
   38210:	da01      	bge.n	38216 <_malloc_usable_size_r+0xe>
   38212:	580b      	ldr	r3, [r1, r0]
   38214:	18c0      	adds	r0, r0, r3
   38216:	4770      	bx	lr

00038218 <__gnu_thumb1_case_uqi>:
   38218:	b402      	push	{r1}
   3821a:	4671      	mov	r1, lr
   3821c:	0849      	lsrs	r1, r1, #1
   3821e:	0049      	lsls	r1, r1, #1
   38220:	5c09      	ldrb	r1, [r1, r0]
   38222:	0049      	lsls	r1, r1, #1
   38224:	448e      	add	lr, r1
   38226:	bc02      	pop	{r1}
   38228:	4770      	bx	lr
   3822a:	46c0      	nop			; (mov r8, r8)

0003822c <__aeabi_i2d>:
   3822c:	b570      	push	{r4, r5, r6, lr}
   3822e:	2800      	cmp	r0, #0
   38230:	d030      	beq.n	38294 <__aeabi_i2d+0x68>
   38232:	17c3      	asrs	r3, r0, #31
   38234:	18c4      	adds	r4, r0, r3
   38236:	405c      	eors	r4, r3
   38238:	0fc5      	lsrs	r5, r0, #31
   3823a:	0020      	movs	r0, r4
   3823c:	f7fc ff1e 	bl	3507c <__clzsi2>
   38240:	4b17      	ldr	r3, [pc, #92]	; (382a0 <__aeabi_i2d+0x74>)
   38242:	4a18      	ldr	r2, [pc, #96]	; (382a4 <__aeabi_i2d+0x78>)
   38244:	1a1b      	subs	r3, r3, r0
   38246:	1ad2      	subs	r2, r2, r3
   38248:	2a1f      	cmp	r2, #31
   3824a:	dd18      	ble.n	3827e <__aeabi_i2d+0x52>
   3824c:	4a16      	ldr	r2, [pc, #88]	; (382a8 <__aeabi_i2d+0x7c>)
   3824e:	1ad2      	subs	r2, r2, r3
   38250:	4094      	lsls	r4, r2
   38252:	2200      	movs	r2, #0
   38254:	0324      	lsls	r4, r4, #12
   38256:	055b      	lsls	r3, r3, #21
   38258:	0b24      	lsrs	r4, r4, #12
   3825a:	0d5b      	lsrs	r3, r3, #21
   3825c:	2100      	movs	r1, #0
   3825e:	0010      	movs	r0, r2
   38260:	0324      	lsls	r4, r4, #12
   38262:	0d0a      	lsrs	r2, r1, #20
   38264:	0b24      	lsrs	r4, r4, #12
   38266:	0512      	lsls	r2, r2, #20
   38268:	4322      	orrs	r2, r4
   3826a:	4c10      	ldr	r4, [pc, #64]	; (382ac <__aeabi_i2d+0x80>)
   3826c:	051b      	lsls	r3, r3, #20
   3826e:	4022      	ands	r2, r4
   38270:	4313      	orrs	r3, r2
   38272:	005b      	lsls	r3, r3, #1
   38274:	07ed      	lsls	r5, r5, #31
   38276:	085b      	lsrs	r3, r3, #1
   38278:	432b      	orrs	r3, r5
   3827a:	0019      	movs	r1, r3
   3827c:	bd70      	pop	{r4, r5, r6, pc}
   3827e:	0021      	movs	r1, r4
   38280:	4091      	lsls	r1, r2
   38282:	000a      	movs	r2, r1
   38284:	210b      	movs	r1, #11
   38286:	1a08      	subs	r0, r1, r0
   38288:	40c4      	lsrs	r4, r0
   3828a:	055b      	lsls	r3, r3, #21
   3828c:	0324      	lsls	r4, r4, #12
   3828e:	0b24      	lsrs	r4, r4, #12
   38290:	0d5b      	lsrs	r3, r3, #21
   38292:	e7e3      	b.n	3825c <__aeabi_i2d+0x30>
   38294:	2500      	movs	r5, #0
   38296:	2300      	movs	r3, #0
   38298:	2400      	movs	r4, #0
   3829a:	2200      	movs	r2, #0
   3829c:	e7de      	b.n	3825c <__aeabi_i2d+0x30>
   3829e:	46c0      	nop			; (mov r8, r8)
   382a0:	0000041e 	.word	0x0000041e
   382a4:	00000433 	.word	0x00000433
   382a8:	00000413 	.word	0x00000413
   382ac:	800fffff 	.word	0x800fffff

000382b0 <sysfont_glyphs>:
   382b0:	00000000 20000000 20202020 50502000     .......     . PP
   382c0:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
   382d0:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
   382e0:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
   382f0:	10101020 50004020 5020f820 20200000      ... @.P . P..  
   38300:	002020f8 00000000 00402060 00f80000     .  .....` @.....
   38310:	00000000 60000000 10080060 00804020     .......``... @..
   38320:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
   38330:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
   38340:	f81010f8 0808f080 40307088 8888f080     .........p0@....
   38350:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
   38360:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
   38370:	40206000 40201008 00081020 f800f800     .` @.. @ .......
   38380:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
   38390:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
   383a0:	8888f088 808870f0 70888080 888890e0     .....p.....p....
   383b0:	f8e09088 80f08080 80f8f880 8080e080     ................
   383c0:	80887080 70889880 f8888888 70888888     .p.....p.......p
   383d0:	20202020 10387020 90101010 a0908860          p8.....`...
   383e0:	8890a0c0 80808080 88f88080 8888a8d8     ................
   383f0:	88888888 8898a8c8 88887088 70888888     .........p.....p
   38400:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
   38410:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
   38420:	88202020 88888888 88887088 50888888        ......p.....P
   38430:	88888820 88d8a8a8 20508888 88888850      .........P P...
   38440:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
   38450:	38202020 20408000 e0000810 20202020        8..@ ....    
   38460:	5020e020 00000088 00000000 f8000000      . P............
   38470:	00102040 00000000 78087000 80807888     @ .......p.x.x..
   38480:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
   38490:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
   384a0:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
   384b0:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
   384c0:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
   384d0:	00008888 8888c8b0 70000088 70888888     ...........p...p
   384e0:	88f00000 008080f0 78986800 00000808     .........h.x....
   384f0:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
   38500:	00304840 88888800 00006898 50888888     @H0......h.....P
   38510:	88000020 50a8a888 50880000 00885020      ......P...P P..
   38520:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
   38530:	10202040 20202020 40202020 20102020     @  .       @  . 
   38540:	00004020                                 @..

00038544 <pcWelcomeMessage>:
   38544:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   38554:	20657079 706c6548 206f7420 77656976     ype Help to view
   38564:	6c206120 20747369 7220666f 73696765      a list of regis
   38574:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   38584:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   38594:	736e7275 72756320 746e6572 202c7820     urns current x, 
   385a4:	7a202c79 63636120 72656c65 6f697461     y, z acceleratio
   385b4:	7266206e 74206d6f 49206568 0a0d554d     n from the IMU..
   385c4:	00000000 00007766 203a7766 6e776f44     ....fw..fw: Down
   385d4:	64616f6c 66206120 20656c69 20646e61     load a file and 
   385e4:	66726570 206d726f 46206e61 70752057     perform an FW up
   385f4:	65746164 00000a0d 65736572 00000074     date....reset...
   38604:	65736572 52203a74 74657365 68742073     reset: Resets th
   38614:	65642065 65636976 00000a0d 64746567     e device....getd
   38624:	61747369 0065636e 64746567 61747369     istance.getdista
   38634:	3a65636e 74655220 736e7275 65687420     nce: Returns the
   38644:	73696420 636e6174 72662065 74206d6f      distance from t
   38654:	55206568 30312d53 65532030 726f736e     he US-100 Sensor
   38664:	000a0d2e 00633269 3a633269 61635320     ....i2c.i2c: Sca
   38674:	4920736e 62204332 0a0d7375 00000000     ns I2C bus......
   38684:	00737067 3a737067 74655220 736e7275     gps.gps: Returns
   38694:	72756320 746e6572 74616c20 64757469      current latitud
   386a4:	6e612065 6f6c2064 7469676e 20656475     e and longitude 
   386b4:	6d6f7266 65687420 53504720 0a0d0a0d     from the GPS....
   386c4:	00000000 00736c63 3a736c63 656c4320     ....cls.cls: Cle
   386d4:	20737261 20656874 6d726574 6c616e69     ars the terminal
   386e4:	72637320 0d6e6565 0000000a 6c756f43      screen.....Coul
   386f4:	6f6e2064 6c612074 61636f6c 73206574     d not allocate s
   38704:	70616d65 65726f68 00000a0d 00000a0d     emaphore........
   38714:	0000616f 325b6325 003e0d4b 00082008     oa..%c[2K.>.. ..
   38724:	65636341 6172656c 6e6f6974 676d5b20     Acceleration [mg
   38734:	20583a5d 59096425 09642520 6425205a     ]:X %d.Y %d.Z %d
   38744:	00000a0d 64206f4e 20617461 64616572     ....No data read
   38754:	53202179 69646e65 6420676e 796d6d75     y! Sending dummy
   38764:	74616420 0a0d2061 00000000 325b6325      data ......%c[2
   38774:	0000004a 64757453 73746e65 206f7420     J...Students to 
   38784:	6c6c6966 74756f20 00000021 74747542     fill out!...Butt
   38794:	23206e6f 69206425 65722073 7361656c     on #%d is releas
   387a4:	0a0d6465 00000000 74747542 23206e6f     ed......Button #
   387b4:	69206425 72702073 65737365 000a0d64     %d is pressed...
   387c4:	736e6553 4520726f 726f7272 21642520     Sensor Error %d!
   387d4:	00000a0d 50470a0d 756f2053 74757074     ......GPS output
   387e4:	20646574 00000a0d 74736944 65636e61     ted ....Distance
   387f4:	74614420 514d2061 50205454 0d74736f      Data MQTT Post.
   38804:	0000000a 6d6d7544 61472079 4420656d     ....Dummy Game D
   38814:	20617461 5454514d 736f5020 000a0d74     ata MQTT Post...
   38824:	31202030 20322020 20203320 35202034     0  1  2  3  4  5
   38834:	20362020 20203720 39202038 20612020       6  7  8  9  a 
   38844:	20206220 64202063 20652020 0a0d6620      b  c  d  e  f..
   38854:	00000000 78323025 0000203a 78323025     ....%02x: ..%02x
   38864:	00000020 65646441 79622064 72654420      ...Added by Der
   38874:	202c6b65 21444254 0a0d0a0d 00000000     ek, TBD!........

00038884 <xImuGetCommand>:
   38884:	00038588 0003858c 00013b99 00000000     .........;......

00038894 <xOTAUCommand>:
   38894:	000385c8 000385cc 00013d45 00000000     ........E=......

000388a4 <xResetCommand>:
   388a4:	000385fc 00038604 00013d65 00000000     ........e=......

000388b4 <xDistanceSensorGetDistance>:
   388b4:	00038620 0003862c 00013d85 00000000      ...,....=......

000388c4 <xI2cScan>:
   388c4:	00038668 0003866c 00013e29 00000000     h...l...)>......

000388d4 <xGpsGetCommand>:
   388d4:	00038684 00038688 00013f51 00000000     ........Q?......

000388e4 <xClearScreen>:
   388e4:	000386c8 000386cc 00013cfd 00000000     .........<......
   388f4:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   38904:	657a696c 73694420 636e6174 65532065     lize Distance Se
   38914:	726f736e 00000021 50470a0d 73692053     nsor!.....GPS is
   38924:	6e6f6320 7463656e 0d206465 0000000a      connected .....
   38934:	00006325 6e697270 676e6974 76617320     %c..printing sav
   38944:	52206465 0a0d434d 00000000 0a0d7325     ed RMC......%s..
   38954:	00000000 50470a0d 614c2053 75746974     ......GPS Latitu
   38964:	3d206564 20662520 00000a0d 50470a0d     de = %f ......GP
   38974:	6f4c2053 7469676e 20656475 6625203d     S Longitude = %f
   38984:	000a0d20                                 ...

00038988 <msgKeypadGetCount>:
   38988:	00000410 6f727245 6e692072 61697469     ....Error initia
   38998:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   389a8:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   389b8:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   389c8:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   389d8:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   389e8:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   389f8:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   38a08:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   38a18:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   38a28:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   38a38:	7265626d 20666f20 69766564 2f736563     mber of devices/
   38a48:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   38a58:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   38a68:	6e2f722f 00000000 00001010 0000050e     /r/n............
   38a78:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   38a88:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   38a98:	00000000 54204955 206b7361 72617453     ....UI Task Star
   38aa8:	21646574 00000a0d 35455345 00003631     ted!....ESE516..
   38ab8:	72546f49 696b6361 0000676e 65726544     IoTracking..Dere
   38ac8:	685a206b 0000756f 68696557 48206f61     k Zhou..Weihao H
   38ad8:	0000002e                                ....

00038adc <main_mqtt_broker>:
   38adc:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   38aec:	0000006d 64333025 00000000 72617473     m...%03d....star
   38afc:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   38b0c:	726f7473 20656761 20746f6e 64616572     storage not read
   38b1c:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   38b2c:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   38b3c:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   38b4c:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   38b5c:	203a6461 75716572 20747365 73207369     ad: request is s
   38b6c:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   38b7c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   38b8c:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   38b9c:	726c6120 79646165 000a0d2e 72617473      already....star
   38bac:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   38bbc:	20676e69 50545448 71657220 74736575     ing HTTP request
   38bcc:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   38bdc:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   38bec:	7e2f7564 65726564 796d7a6b 7061432f     du/~derekzmy/Cap
   38bfc:	65727574 474e502e 00000000 726f7473     ture.PNG....stor
   38c0c:	69665f65 705f656c 656b6361 65203a74     e_file_packet: e
   38c1c:	7974706d 74616420 0a0d2e61 00000000     mpty data.......
   38c2c:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   38c3c:	66203a74 20656c69 656d616e 20736920     t: file name is 
   38c4c:	61766e69 2e64696c 776f4420 616f6c6e     invalid. Downloa
   38c5c:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   38c6c:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   38c7c:	63203a74 74616572 20676e69 656c6966     t: creating file
   38c8c:	73255b20 000a0d5d 726f7473 69665f65      [%s]...store_fi
   38c9c:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   38cac:	61657263 6e6f6974 72726520 2021726f     creation error! 
   38cbc:	3a746572 0a0d6425 00000000 726f7473     ret:%d......stor
   38ccc:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   38cdc:	20656c69 74697277 72652065 2c726f72     ile write error,
   38cec:	776f6420 616f6c6e 61632064 6c65636e      download cancel
   38cfc:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   38d0c:	705f656c 656b6361 72203a74 69656365     le_packet: recei
   38d1c:	5b646576 5d756c25 6966202c 7320656c     ved[%lu], file s
   38d2c:	5b657a69 5d756c25 00000a0d 726f7473     ize[%lu]....stor
   38d3c:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   38d4c:	20656c69 6e776f64 64616f6c 73206465     ile downloaded s
   38d5c:	65636375 75667373 2e796c6c 00000a0d     uccessfully.....
   38d6c:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   38d7c:	6b636162 5448203a 63205054 6e65696c     back: HTTP clien
   38d8c:	6f732074 74656b63 6e6f6320 7463656e     t socket connect
   38d9c:	0d2e6465 0000000a 70747468 696c635f     ed......http_cli
   38dac:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
   38dbc:	73657571 6f632074 656c706d 2e646574     quest completed.
   38dcc:	00000a0d 70747468 696c635f 5f746e65     ....http_client_
   38ddc:	6c6c6163 6b636162 6572203a 76696563     callback: receiv
   38dec:	72206465 6f707365 2065736e 64207525     ed response %u d
   38dfc:	20617461 657a6973 0d752520 0000000a     ata size %u.....
   38e0c:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   38e1c:	6b636162 6964203a 6e6f6373 7463656e     back: disconnect
   38e2c:	206e6f69 73616572 253a6e6f 000a0d64     ion reason:%d...
   38e3c:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
   38e4c:	64612050 73657264 73692073 2e642520     P address is %d.
   38e5c:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
   38e6c:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   38e7c:	4f435f49 43454e4e 0d444554 0000000a     I_CONNECTED.....
   38e8c:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   38e9c:	49445f49 4e4f4353 5443454e 0a0d4445     I_DISCONNECTED..
   38eac:	00000000 74736574 31676e69 00003332     ....testing123..
   38ebc:	74656559 00000000 69666977 3a62635f     Yeet....wifi_cb:
   38ecc:	20504920 72646461 20737365 25207369      IP address is %
   38edc:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   38eec:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   38efc:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   38f0c:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   38f1c:	6c70203a 65736165 756c7020 6e612067     : please plug an
   38f2c:	2f445320 20434d4d 64726163 206e6920      SD/MMC card in 
   38f3c:	746f6c73 0d2e2e2e 0000000a 74696e69     slot........init
   38f4c:	6f74735f 65676172 4453203a 72614320     _storage: SD Car
   38f5c:	6e692064 6c617473 6166206c 64656c69     d install failed
   38f6c:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   38f7c:	7274203a 6e752079 67756c70 646e6120     : try unplug and
   38f8c:	2d657220 67756c70 65687420 72616320      re-plug the car
   38f9c:	0a0d2e64 00000000 74696e69 6f74735f     d.......init_sto
   38fac:	65676172 6f6d203a 69746e75 5320676e     rage: mounting S
   38fbc:	61632044 2e2e6472 000a0d2e 74696e69     D card......init
   38fcc:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   38fdc:	6f6d2064 20746e75 6c696166 20216465     d mount failed! 
   38fec:	73657228 29642520 00000a0d 74696e69     (res %d)....init
   38ffc:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   3900c:	6f6d2064 20746e75 0d2e4b4f 0000000a     d mount OK......
   3901c:	666e6f63 72756769 74685f65 635f7074     configure_http_c
   3902c:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
   3903c:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
   3904c:	6166206e 64656c69 72282021 25207365     n failed! (res %
   3905c:	0a0d2964 00000000 25200a0d 00732a2e     d)........ %.*s.
   3906c:	28626772 00000000 47520a0d 64252042     rgb(......RGB %d
   3907c:	20642520 0a0d6425 00000000 6167227b      %d %d......{"ga
   3908c:	3a22656d 0000005b 61470a0d 6d20656d     me":[.....Game m
   3909c:	61737365 72206567 69656365 21646576     essage received!
   390ac:	00000a0d 732a2e25 00000000 61500a0d     ....%.*s......Pa
   390bc:	64657372 6d6f4320 646e616d 0000203a     rsed Command: ..
   390cc:	002c6425 65530a0d 7020746e 2079616c     %d,...Sent play 
   390dc:	63206f74 72746e6f 0d216c6f 0000000a     to control!.....
   390ec:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   390fc:	69656365 20646576 20747562 20746f6e     eceived but not 
   3910c:	65646e75 6f747372 0d21646f 0000000a     understood!.....
   3911c:	20554d49 69706f74 65722063 76696563     IMU topic receiv
   3912c:	20216465 0000002d 732a2e25 0d0a0d20     ed! -...%.*s ...
   3913c:	0000000a 69440a0d 6e617473 74206563     ......Distance t
   3914c:	6369706f 63657220 65766965 0a0d2164     opic received!..
   3915c:	00000000 20535047 69706f74 65722063     ....GPS topic re
   3916c:	76696563 20216465 0000002d 732a2e25     ceived! -...%.*s
   3917c:	000a0d20 203e3e20 00000000 4c5f3150      ... >> ....P1_L
   3918c:	455f4445 31354553 36545f36 00000000     ED_ESE516_T6....
   3919c:	736c6166 00000065 65757274 00000000     false...true....
   391ac:	6f430a0d 63656e6e 676e6974 206f7420     ..Connecting to 
   391bc:	6b6f7242 2e2e7265 0000002e 4a737242     Broker......BrsJ
   391cc:	6f564e42 376c4251 00000000 79747472     BNVoQBl7....rtty
   391dc:	6a65626f 00000000 5454514d 72452020     obej....MQTT  Er
   391ec:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   391fc:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   3920c:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   3921c:	7262206f 72656b6f 0a0d0a0d 00000000     o broker........
   3922c:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   3923c:	76726573 25287265 20212973 72746572     server(%s)! retr
   3924c:	74692079 74756120 74616d6f 6c616369     y it automatical
   3925c:	0d2e796c 0000000a 475f3150 5f454d41     ly......P1_GAME_
   3926c:	35455345 545f3631 00000036 72746f49     ESE516_T6...Iotr
   3927c:	696b6361 495f676e 545f554d 00000036     acking_IMU_T6...
   3928c:	72746f49 696b6361 475f676e 545f5350     Iotracking_GPS_T
   3929c:	00000036 5454514d 6e6f4320 7463656e     6...MQTT Connect
   392ac:	0a0d6465 00000000 5454514d 6f726220     ed......MQTT bro
   392bc:	2072656b 6c636564 20656e69 72756f79     ker decline your
   392cc:	63636120 21737365 72726520 6320726f      access! error c
   392dc:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   392ec:	73696420 6e6e6f63 65746365 000a0d64      disconnected...
   392fc:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   3930c:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   3931c:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   3932c:	00000000 5454514d 67657220 65747369     ....MQTT registe
   3933c:	61632072 61626c6c 66206b63 656c6961     r callback faile
   3934c:	45202e64 726f7272 646f6320 73692065     d. Error code is
   3935c:	64252820 000a0d29 2264227b 74227b3a      (%d)...{"d":{"t
   3936c:	22706d65 7d64253a 0000007d 4941465b     emp":%d}}...[FAI
   3937c:	72205d4c 25207365 000a0d64 67616c46     L] res %d...Flag
   3938c:	78742e41 64612074 21646564 00000a0d     A.txt added!....
   3939c:	6c463a30 2e416761 00747874 6e6e6f43     0:FlagA.txt.Conn
   393ac:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   393bc:	72656b6f 0d0a0d21 0000000a 6d69227b     oker!.......{"im
   393cc:	3a227875 202c6425 756d6922 203a2279     ux":%d, "imuy": 
   393dc:	202c6425 756d6922 203a227a 007d6425     %d, "imuz": %d}.
   393ec:	616e227b 3a22656d 72656422 2c226b65     {"name":"derek",
   393fc:	616c2220 203a2274 202c6625 6e6f6c22      "lat": %f, "lon
   3940c:	25203a22 00007d66 00006425 00007d5d     ": %f}..%d..]}..
   3941c:	00000a0d 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   3942c:	545f3631 00000036 4f525245 6e492052     16_T6...ERROR In
   3943c:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   3944c:	61746144 65757120 21736575 00000a0d     Data queues!....
   3945c:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   3946c:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   3947c:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   3948c:	6c6c6163 72726520 2021726f 73657228     call error! (res
   3949c:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   394ac:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   394bc:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   394cc:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   394dc:	36545f36 00000000 5454514d 6e657320     6_T6....MQTT sen
   394ec:	73252064 00000a0d 000169d4 000169e0     d %s.....i...i..
   394fc:	000169f2 00016a48 00016a68 706c6568     .i..Hj..hj..help
   3950c:	00000000 706c6568 694c203a 20737473     ....help: Lists 
   3951c:	206c6c61 20656874 69676572 72657473     all the register
   3952c:	63206465 616d6d6f 0d73646e 000a0d0a     ed commands.....
   3953c:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
   3954c:	61702064 656d6172 28726574 202e2973     d parameter(s). 
   3955c:	746e4520 22207265 706c6568 6f742022      Enter "help" to
   3956c:	65697620 20612077 7473696c 20666f20      view a list of 
   3957c:	69617661 6c62616c 6f632065 6e616d6d     available comman
   3958c:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
   3959c:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
   395ac:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
   395bc:	65697620 20612077 7473696c 20666f20      view a list of 
   395cc:	69617661 6c62616c 6f632065 6e616d6d     available comman
   395dc:	0d2e7364 000a0d0a                       ds......

000395e4 <xHelpCommand>:
   395e4:	00039508 00039510 0001876d 00000000     ........m.......
   395f4:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   39604:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   39614:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   39624:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   39634:	78656e55 74636570 61206465 6d756772     Unexpected argum
   39644:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   39654:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   39664:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   39674:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   39684:	2073656c 6e69202d 61657263 54206573     les - increase T
   39694:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   396a4:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   396b4:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   396c4:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   396d4:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   396e4:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   396f4:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   39704:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   39714:	6e616820 73656c64 69202d20 6572636e      handles - incre
   39724:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   39734:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   39744:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   39754:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   39764:	6e616820 73656c64 69202d20 6572636e      handles - incre
   39774:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   39784:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   39794:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   397a4:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   397b4:	73656c64 69202d20 6572636e 20657361     dles - increase 
   397c4:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   397d4:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   397e4:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   397f4:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   39804:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   39814:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   39824:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   39834:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   39844:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   39854:	202d2073 72636e69 65736165 43525420     s - increase TRC
   39864:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   39874:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   39884:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   39894:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   398a4:	646e6168 2073656c 6e69202d 61657263     handles - increa
   398b4:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   398c4:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   398d4:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   398e4:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   398f4:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   39904:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   39914:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   39924:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   39934:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   39944:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   39954:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   39964:	63746365 7373616c 00000021 00018e92     ectclass!.......
   39974:	00018e8a 00018e8e 00018e82 00018e86     ................
   39984:	00018e96 00018e9a 00018e9e 00018ea2     ................
   39994:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   399a4:	64726f63 6e207265 6920746f 6974696e     corder not initi
   399b4:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   399c4:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   399d4:	00216461 61747328 70757472 00000029     ad!.(startup)...
   399e4:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   399f4:	64726f63 6e207265 6920746f 6974696e     corder not initi
   39a04:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   39a14:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   39a24:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   39a34:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   39a44:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   39a54:	61762064 2065756c 20726f66 646e6168     d value for hand
   39a64:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   39a74:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   39a84:	7265706f 73656974 616e203a 3d20656d     operties: name =
   39a94:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   39aa4:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   39ab4:	64726f63 62207265 21797375 65655320     corder busy! See
   39ac4:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   39ad4:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   39ae4:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   39af4:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   39b04:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   39b14:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   39b24:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   39b34:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   39b44:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   39b54:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   39b64:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   39b74:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   39b84:	6f636572 72656472 73756220 53202179     recorder busy! S
   39b94:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   39ba4:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   39bb4:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   39bc4:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   39bd4:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   39be4:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   39bf4:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   39c04:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   39c14:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   39c24:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   39c34:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   39c44:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   39c54:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   39c64:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   39c74:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   39c84:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   39c94:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   39ca4:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   39cb4:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   39cc4:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   39cd4:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   39ce4:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   39cf4:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   39d04:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   39d14:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   39d24:	72657473 69727453 203a676e 6562616c     sterString: labe
   39d34:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   39d44:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39d54:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   39d64:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   39d74:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   39d84:	72656472 73756220 202d2079 68676968     rder busy - high
   39d94:	69727020 7469726f 53492079 73752052      priority ISR us
   39da4:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   39db4:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   39dc4:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   39dd4:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   39de4:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   39df4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39e04:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39e14:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   39e24:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   39e34:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   39e44:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   39e54:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   39e64:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   39e74:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39e84:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39e94:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   39ea4:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   39eb4:	00000072 6f636552 72656472 73756220     r...Recorder bus
   39ec4:	202d2079 68676968 69727020 7469726f     y - high priorit
   39ed4:	53492079 73752052 20676e69 63737973     y ISR using sysc
   39ee4:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   39ef4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39f04:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39f14:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   39f24:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   39f34:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39f44:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39f54:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   39f64:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   39f74:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   39f84:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39f94:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39fa4:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   39fb4:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   39fc4:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   39fd4:	72656472 73756220 202d2079 68676968     rder busy - high
   39fe4:	69727020 7469726f 53492079 73752052      priority ISR us
   39ff4:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   3a004:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a014:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   3a024:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   3a034:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   3a044:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a054:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   3a064:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   3a074:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   3a084:	76206469 65756c61 726f6620 74766520     id value for evt
   3a094:	65646f63 00000000 6f636552 72656472     code....Recorder
   3a0a4:	73756220 202d2079 68676968 69727020      busy - high pri
   3a0b4:	7469726f 53492079 73752052 20676e69     ority ISR using 
   3a0c4:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   3a0d4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a0e4:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   3a0f4:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   3a104:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   3a114:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   3a124:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3a134:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   3a144:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   3a154:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3a164:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a174:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a184:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   3a194:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   3a1a4:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3a1b4:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   3a1c4:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3a1d4:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   3a1e4:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   3a1f4:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   3a204:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   3a214:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a224:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   3a234:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   3a244:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   3a254:	6c617620 66206575 6820726f 6c646e61      value for handl
   3a264:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   3a274:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   3a284:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   3a294:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   3a2a4:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   3a2b4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a2c4:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   3a2d4:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   3a2e4:	76206469 65756c61 726f6620 00646920     id value for id.
   3a2f4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a304:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   3a314:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   3a324:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3a334:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a344:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a354:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   3a364:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   3a374:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   3a384:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a394:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   3a3a4:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3a3b4:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3a3c4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a3d4:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   3a3e4:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3a3f4:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3a404:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a414:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   3a424:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3a434:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3a444:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a454:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   3a464:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3a474:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3a484:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a494:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   3a4a4:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   3a4b4:	76206469 65756c61 726f6620 6e616820     id value for han
   3a4c4:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   3a4d4:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   3a4e4:	69206f74 7865646e 74756f20 65646973     to index outside
   3a4f4:	65766520 6220746e 65666675 00002172      event buffer!..
   3a504:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3a514:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3a524:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3a534:	6a626f20 63746365 7373616c 00000000      objectclass....
   3a544:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3a554:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3a564:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3a574:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   3a584:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   3a594:	2070756b 68746977 766e6920 64696c61     kup with invalid
   3a5a4:	6a626f20 20746365 646e6168 6f20656c      object handle o
   3a5b4:	626f2072 7463656a 616c6320 00217373     r object class!.
   3a5c4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a5d4:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   3a5e4:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   3a5f4:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   3a604:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   3a614:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   3a624:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   3a634:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   3a644:	626f2072 7463656a 73616c63 00000073     r objectclass...
   3a654:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a664:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   3a674:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   3a684:	756c6176 6f662065 61682072 656c646e     value for handle
   3a694:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   3a6a4:	20656572 65726f6d 6e616820 73656c64     ree more handles
   3a6b4:	61687420 6c61206e 61636f6c 21646574      than allocated!
   3a6c4:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a6d4:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   3a6e4:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   3a6f4:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   3a704:	656a626f 63207463 7373616c 206e6920     object class in 
   3a714:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   3a724:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   3a734:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   3a744:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   3a754:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   3a764:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   3a774:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   3a784:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3a794:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   3a7a4:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   3a7b4:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   3a7c4:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   3a7d4:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   3a7e4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a7f4:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   3a804:	696c6176 61762064 2065756c 20726f66     valid value for 
   3a814:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   3a824:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   3a834:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   3a844:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   3a854:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   3a864:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3a874:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   3a884:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a894:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   3a8a4:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   3a8b4:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   3a8c4:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   3a8d4:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   3a8e4:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   3a8f4:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   3a904:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   3a914:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3a924:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   3a934:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   3a944:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   3a954:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   3a964:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   3a974:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a984:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   3a994:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   3a9a4:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   3a9b4:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3a9c4:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   3a9d4:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   3a9e4:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3a9f4:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   3aa04:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   3aa14:	00000000 20726d54 00637653 0001df28     ....Tmr Svc.(...
   3aa24:	0001df28 0001df28 0001dfb6 0001df80     (...(...........
   3aa34:	0001dfaa 0001df28 0001df28 0001dfb6     ....(...(.......
   3aa44:	0001df80                                ....

0003aa48 <sd_mmc_trans_units>:
   3aa48:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0003aa64 <sd_trans_multipliers>:
   3aa64:	00000000 0000000a 0000000c 0000000d     ................
   3aa74:	0000000f 00000014 00000019 0000001e     ................
   3aa84:	00000023 00000028 0000002d 00000032     #...(...-...2...
   3aa94:	00000037 0000003c 00000046 00000050     7...<...F...P...

0003aaa4 <mmc_trans_multipliers>:
   3aaa4:	00000000 0000000a 0000000c 0000000d     ................
   3aab4:	0000000f 00000014 0000001a 0000001e     ................
   3aac4:	00000023 00000028 0000002d 00000034     #...(...-...4...
   3aad4:	00000037 0000003c 00000046 00000050     7...<...F...P...
   3aae4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3aaf4:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   3ab04:	6320746c 000a646d 0000000d              lt cmd......

0003ab10 <__FUNCTION__.17099>:
   3ab10:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   3ab20:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   3ab30:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   3ab40:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3ab50:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   3ab60:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   3ab70:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3ab80:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3ab90:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3aba0:	66696828 64612029 73657264 75622073     (hif) address bu
   3abb0:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3abc0:	70757272 20646574 6b636170 53207465     rrupted packet S
   3abd0:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3abe0:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3abf0:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3ac00:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3ac10:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   3ac20:	63207465 626c6c61 206b6361 6e207369     et callback is n
   3ac30:	7220746f 73696765 65726574 00000a64     ot registered...
   3ac40:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   3ac50:	20746f6e 69676572 72657473 000a6465     not registered..
   3ac60:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   3ac70:	6e207369 7220746f 73696765 65726574     is not registere
   3ac80:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3ac90:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3aca0:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3acb0:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3acc0:	66696828 6f682029 61207473 64207070     (hif) host app d
   3acd0:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3ace0:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3acf0:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3ad00:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3ad10:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   3ad20:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   3ad30:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   3ad40:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   3ad50:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   3ad60:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   3ad70:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3ad80:	696c6176 72612064 656d7567 000a746e     valid argument..
   3ad90:	20505041 75716552 65747365 69532064     APP Requested Si
   3ada0:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3adb0:	6874206e 65722065 65766963 75622064     n the recived bu
   3adc0:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3add0:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3ade0:	65747365 64412064 73657264 65622073     ested Address be
   3adf0:	646e6f79 65687420 63657220 64657669     yond the recived
   3ae00:	66756220 20726566 72646461 20737365      buffer address 
   3ae10:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3ae20:	6425203f 0000000a 000220c8 00022098     ? %d..... ... ..
   3ae30:	00022090 000220a8 000220a0 000220c0     . ... ... ... ..
   3ae40:	000220b0 000220b8                       . ... ..

0003ae48 <__FUNCTION__.17967>:
   3ae48:	5f666968 646e6573 00000000              hif_send....

0003ae54 <__FUNCTION__.17977>:
   3ae54:	5f666968 00727369                       hif_isr.

0003ae5c <__FUNCTION__.17986>:
   3ae5c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0003ae6c <__FUNCTION__.17998>:
   3ae6c:	5f666968 65636572 00657669              hif_receive.

0003ae78 <__FUNCTION__.18014>:
   3ae78:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   3ae88:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   3ae98:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   3aea8:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   3aeb8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3aec8:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   3aed8:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   3aee8:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   3aef8:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   3af08:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   3af18:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   3af28:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   3af38:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   3af48:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   3af58:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   3af68:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   3af78:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   3af88:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   3af98:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   3afa8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   3afb8:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   3afc8:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   3afd8:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   3afe8:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   3aff8:	73747365 72657020 61637320 6c73206e     ests per scan sl
   3b008:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   3b018:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   3b028:	000a2064 00000a0d 6d73694d 68637461     d ......Mismatch
   3b038:	72694620 7277616d 65562065 6f697372      Firmawre Versio
   3b048:	00000a6e 2079654b 6e207369 7620746f     n...Key is not v
   3b058:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
   3b068:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
   3b078:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
   3b088:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
   3b098:	20706557 2079656b 65646e69 64252078     Wep key index %d
   3b0a8:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   3b0b8:	2079656b 676e656c 25206874 00000a64     key length %d...
   3b0c8:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   3b0d8:	656c2079 6874676e 0000000a 65646e75     y length....unde
   3b0e8:	656e6966 65732064 79742063 000a6570     fined sec type..
   3b0f8:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
   3b108:	6420746f 6e696665 000a6465 7473694c     ot defined..List
   3b118:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
   3b128:	6e6f2064 6220796c 324d2065 49575f4d     d only be M2M_WI
   3b138:	435f4946 2f315f48 31312f36 00000a20     FI_CH_1/6/11 ...
   3b148:	45574f50 41532052 25204556 00000a64     POWER SAVE %d...
   3b158:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
   3b168:	0a454d41 00000000 474e5250 66754220     AME.....PRNG Buf
   3b178:	20726566 65637865 64656465 78616d20     fer exceeded max
   3b188:	6d756d69 7a697320 64252065 20726f20     imum size %d or 
   3b198:	4c4c554e 66754220 0a726566 00000000     NULL Buffer.....

0003b1a8 <__FUNCTION__.17949>:
   3b1a8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003b1b4 <__FUNCTION__.17978>:
   3b1b4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003b1c4 <__FUNCTION__.18009>:
   3b1c4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3b1d4:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3b1e4:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3b1f4:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3b204:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3b214:	2070756b 20656874 70696863 0000000a     kup the chip....
   3b224:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3b234:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3b244:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3b254:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003b264 <__FUNCTION__.17806>:
   3b264:	70696863 6b61775f 00000065              chip_wake...

0003b270 <__FUNCTION__.17855>:
   3b270:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3b280:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3b290:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3b2a0:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3b2b0:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3b2c0:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3b2d0:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3b2e0:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   3b2f0:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   3b300:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   3b310:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   3b320:	69642068 6c626173 61662065 000a6c69     h disable fail..
   3b330:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   3b340:	696e6920 75622074 00000a73               init bus...

0003b34c <__FUNCTION__.17853>:
   3b34c:	645f6d6e 695f7672 0074696e              nm_drv_init.

0003b358 <__FUNCTION__.17860>:
   3b358:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0003b368 <crc7_syndrome_table>:
   3b368:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   3b378:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   3b388:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   3b398:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   3b3a8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   3b3b8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   3b3c8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   3b3d8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   3b3e8:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   3b3f8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   3b408:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   3b418:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   3b428:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   3b438:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   3b448:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   3b458:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   3b468:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b478:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   3b488:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   3b498:	73756220 72726520 2e2e726f 00000a2e      bus error......
   3b4a8:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b4b8:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   3b4c8:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b4d8:	656c6961 61642064 72206174 6f707365     ailed data respo
   3b4e8:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   3b4f8:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   3b508:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   3b518:	72206573 2c646165 73756220 72726520     se read, bus err
   3b528:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   3b538:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   3b548:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   3b558:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   3b568:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   3b578:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   3b588:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   3b598:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b5a8:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   3b5b8:	70736572 65736e6f 61747320 28206574     response state (
   3b5c8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3b5d8:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   3b5e8:	20646165 70736572 65736e6f 30252820     ead response (%0
   3b5f8:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   3b608:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3b618:	6877206e 72206e65 69646165 6420676e     n when reading d
   3b628:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   3b638:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3b648:	6877206e 72206e65 69646165 6320676e     n when reading c
   3b658:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   3b668:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3b678:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   3b688:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   3b698:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   3b6a8:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   3b6b8:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   3b6c8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b6d8:	656c6961 61642064 72206174 6f707365     ailed data respo
   3b6e8:	2065736e 64616572 7562202c 72652073     nse read, bus er
   3b6f8:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   3b708:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   3b718:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   3b728:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3b738:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3b748:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   3b758:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   3b768:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   3b778:	61642064 62206174 6b636f6c 69727720     d data block wri
   3b788:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   3b798:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b7a8:	656c6961 61642064 62206174 6b636f6c     ailed data block
   3b7b8:	63726320 69727720 202c6574 20737562      crc write, bus 
   3b7c8:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   3b7d8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3b7e8:	77202c64 65746972 67657220 30252820     d, write reg (%0
   3b7f8:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   3b808:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   3b818:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   3b828:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   3b838:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   3b848:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b858:	656c6961 6c622064 206b636f 61746164     ailed block data
   3b868:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   3b878:	6e612074 65722064 20797274 25206425     t and retry %d %
   3b888:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   3b898:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   3b8a8:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   3b8b8:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   3b8c8:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   3b8d8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3b8e8:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   3b8f8:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   3b908:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3b918:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3b928:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   3b938:	6572202c 69727974 7720676e 20687469     , retyring with 
   3b948:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   3b958:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3b968:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3b978:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   3b988:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3b998:	6e726574 77206c61 65746972 6f727020     ternal write pro
   3b9a8:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   3b9b8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   3b9c8:	20646d63 64616572 69686320 64692070     cmd read chip id
   3b9d8:	0a2e2e2e 00000000 00023c18 00023c18     .........<...<..
   3b9e8:	00023ca8 00023b6c 00023bb2 00023bd4     .<..l;...;...;..
   3b9f8:	00023c5a 00023c5a 00023d14 00023b40     Z<..Z<...=..@;..
   3ba08:	00023d6e 00023d6e 00023d6e 00023d6e     n=..n=..n=..n=..
   3ba18:	00023bf6 00024178 00024178 00024200     .;..xA..xA...B..
   3ba28:	000240dc 0002411e 0002413c 000241b6     .@...A..<A...A..
   3ba38:	000241b6 00024262 000240b4 000242b2     .A..bB...@...B..
   3ba48:	000242b2 000242b2 000242b2 0002415a     .B...B...B..ZA..

0003ba58 <__FUNCTION__.17128>:
   3ba58:	5f697073 00646d63                       spi_cmd.

0003ba60 <__FUNCTION__.17135>:
   3ba60:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0003ba70 <__FUNCTION__.17144>:
   3ba70:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0003ba7c <__FUNCTION__.17177>:
   3ba7c:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   3ba8c:	00000000                                ....

0003ba90 <__FUNCTION__.17223>:
   3ba90:	5f697073 61746164 6972775f 00006574     spi_data_write..

0003baa0 <__FUNCTION__.17235>:
   3baa0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0003bab0 <__FUNCTION__.17246>:
   3bab0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0003bac0 <__FUNCTION__.17258>:
   3bac0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0003bad0 <__FUNCTION__.17269>:
   3bad0:	735f6d6e 725f6970 00646165              nm_spi_read.

0003badc <__FUNCTION__.17290>:
   3badc:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3baec:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3bafc:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3bb0c:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3bb1c:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3bb2c:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   3bb3c:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3bb4c:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   3bb5c:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   3bb6c:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   3bb7c:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   3bb8c:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3bb9c:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3bbac:	22302074 00000000                       t 0"....

0003bbb4 <lun_desc>:
   3bbb4:	0001f94d 0001f9a5 0001f9f1 0001fa3d     M...........=...
   3bbc4:	0001fa6d 0001faf1 0001fb81 0003bb9c     m...............
   3bbd4:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3bbe4:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3bbf4:	00029b96 00029c10 00029c10 00029bb4     ................
   3bc04:	00029bae 00029bba 00029b9c 00029bc0     ................
   3bc14:	00029bf6 00029df8 00029e48 00029e48     ........H...H...
   3bc24:	00029e44 00029dea 00029e0a 00029dda     D...............
   3bc34:	00029e1c 00029e2e 00029e96 00029ec4     ................
   3bc44:	00029ec4 00029ec0 00029e90 00029e9c     ................
   3bc54:	00029e8a 00029ea2 00029ea8              ............

0003bc60 <tcc_modules>:
   3bc60:	42002000 42002400 42002800              . .B.$.B.(.B

0003bc6c <_tcc_gclk_ids>:
   3bc6c:	001b1a1a                                ....

0003bc70 <_tcc_apbcmasks>:
   3bc70:	00000100 00000200 00000400              ............

0003bc7c <_tcc_maxs>:
   3bc7c:	00ffffff 00ffffff 0000ffff              ............

0003bc88 <_tcc_cc_nums>:
   3bc88:	00020204                                ....

0003bc8c <_tcc_ow_nums>:
   3bc8c:	00020408                                ....

0003bc90 <_tcc_intflag>:
   3bc90:	00000001 00000002 00000004 00000008     ................
   3bca0:	00001000 00002000 00004000 00008000     ..... ...@......
   3bcb0:	00010000 00020000 00040000 00080000     ................

0003bcc0 <LfnOfs>:
   3bcc0:	07050301 12100e09 1c181614 0000001e     ................
   3bcd0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   3bce0:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   3bcf0:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   3bd00:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3bd10:	20205441 00202020                       AT     .

0003bd18 <excvt.4558>:
   3bd18:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3bd28:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3bd38:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3bd48:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3bd58:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3bd68:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3bd78:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3bd88:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003bd98 <Tbl>:
   3bd98:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3bda8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3bdb8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3bdc8:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3bdd8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3bde8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3bdf8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3be08:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3be18:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3be28:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3be38:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3be48:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3be58:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3be68:	00da00de 00d900db 00dd00fd 00b400af     ................
   3be78:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3be88:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003be98 <tbl_lower.4308>:
   3be98:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3bea8:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3beb8:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3bec8:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3bed8:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3bee8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3bef8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3bf08:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3bf18:	01050103 01090107 010d010b 0111010f     ................
   3bf28:	01150113 01190117 011d011b 0121011f     ..............!.
   3bf38:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3bf48:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3bf58:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3bf68:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3bf78:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3bf88:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3bf98:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3bfa8:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3bfb8:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3bfc8:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3bfd8:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3bfe8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3bff8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3c008:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3c018:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3c028:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3c038:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3c048:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3c058:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3c068:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003c078 <tbl_upper.4309>:
   3c078:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3c088:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3c098:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3c0a8:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3c0b8:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3c0c8:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3c0d8:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3c0e8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3c0f8:	01040102 01080106 010c010a 0110010e     ................
   3c108:	01140112 01180116 011c011a 0120011e     .............. .
   3c118:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3c128:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3c138:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3c148:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3c158:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3c168:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3c178:	03940393 03960395 03980397 039a0399     ................
   3c188:	039c039b 039e039d 03a0039f 03a303a1     ................
   3c198:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3c1a8:	04120411 04140413 04160415 04180417     ................
   3c1b8:	041a0419 041c041b 041e041d 0420041f     .............. .
   3c1c8:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3c1d8:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3c1e8:	04030402 04050404 04070406 04090408     ................
   3c1f8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3c208:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3c218:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3c228:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3c238:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3c248:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3c258:	0002f202 0002f202 0002f202 0002f090     ................
   3c268:	0002f202 0002f17a 0002f202 0002f202     ....z...........
   3c278:	0002f202 0002f202 0002f202 0002f202     ................
   3c288:	0002f202 0002f1f4 4354514d 00000000     ........MQTC....
   3c298:	00000004 00000000 00000000 00000000     ................
   3c2a8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3c2e8:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3c300:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3c340:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3c350:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3c360:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3c370:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3c380:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3c390:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3c3a0:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3c3b0:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3c3c0:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3c3d0:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3c3e0:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3c3f0:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3c400:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3c410:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3c420:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3c430:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3c440:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3c450:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3c460:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3c470:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3c480:	50545448 0000002f 00000d31 000312f6     HTTP/...1.......
   3c490:	000312f0 000312ea 000312e4 000312fc     ................
   3c4a0:	000312de 000312fc 000312d8 000312d2     ................
   3c4b0:	000312fc 000312cc 000312cc 000312c6     ................
   3c4c0:	000312c0 000312ba 42002000 42002400     ......... .B.$.B
   3c4d0:	42002800 2d2d0a0d 452d2d2d 31354553     .(.B..-----ESE51
   3c4e0:	614d2036 50206e69 72676f72 2d2d6d61     6 Main Program--
   3c4f0:	0d2d2d2d 0000000a 6e490a0d 61697469     ---.......Initia
   3c500:	657a696c 2e574820 0a0d2e2e 00000000     lize HW.........
   3c510:	6f727245 6e692072 61697469 697a696c     Error initializi
   3c520:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3c530:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3c540:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3c550:	6e6e6143 6620746f 20646e69 21554d49     Cannot find IMU!
   3c560:	00000a0d 20554d49 6e756f66 0a0d2164     ....IMU found!..
   3c570:	00000000 20554d49 74696e69 696c6169     ....IMU initiali
   3c580:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
   3c590:	6e692074 61697469 657a696c 554d4920     t initialize IMU
   3c5a0:	00000a0d 74696e49 696c6169 676e697a     ....Initializing
   3c5b0:	73696420 636e6174 65732065 726f736e      distance sensor
   3c5c0:	00000a0d 74736944 65636e61 6e657320     ....Distance sen
   3c5d0:	20726f73 74696e69 696c6169 0d64657a     sor initialized.
   3c5e0:	0000000a 70616548 66656220 2065726f     ....Heap before 
   3c5f0:	72617473 676e6974 73617420 203a736b     starting tasks: 
   3c600:	00006425 5f494c43 4b534154 00000000     %d..CLI_TASK....
   3c610:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   3c620:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   3c630:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   3c640:	74666120 73207265 74726174 20676e69      after starting 
   3c650:	3a494c43 0d642520 000a0d0a 54204955     CLI: %d.....UI T
   3c660:	006b7361 3a525245 20495520 6b736174     ask.ERR: UI task
   3c670:	756f6320 6e20646c 6220746f 6e692065      could not be in
   3c680:	61697469 657a696c 0a0d2164 00000000     itialized!......
   3c690:	70616548 74666120 73207265 74726174     Heap after start
   3c6a0:	20676e69 54204955 3a6b7361 0d642520     ing UI Task: %d.
   3c6b0:	000a0d0a 49464957 5341545f 0000004b     ....WIFI_TASK...
   3c6c0:	3a525245 46495720 61742049 63206b73     ERR: WIFI task c
   3c6d0:	646c756f 746f6e20 20656220 74696e69     ould not be init
   3c6e0:	696c6169 2164657a 00000a0d 70616548     ialized!....Heap
   3c6f0:	74666120 73207265 74726174 20676e69      after starting 
   3c700:	49464957 6425203a 00000a0d 6f727245     WIFI: %d....Erro
   3c710:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   3c720:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   3c730:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   3c740:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   3c750:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   3c760:	000334dc 0003342c 0003342c 0003342a     .4..,4..,4..*4..
   3c770:	000334ce 000334ce 000334c4 0003342a     .4...4...4..*4..
   3c780:	000334ce 000334c4 000334ce 0003342a     .4...4...4..*4..
   3c790:	000334d4 000334d4 000334d4 00033564     .4...4...4..d5..
   3c7a0:	00033ee8 00033eca 00033e84 00033da2     .>...>...>...=..
   3c7b0:	00033e84 00033ebc 00033e84 00033da2     .>...>...>...=..
   3c7c0:	00033eca 00033eca 00033ebc 00033da2     .>...>...>...=..
   3c7d0:	00033d9a 00033d9a 00033d9a 00034100     .=...=...=...A..
   3c7e0:	00034548 00034408 00034408 00034404     HE...D...D...D..
   3c7f0:	00034520 00034520 00034512 00034404      E.. E...E...D..
   3c800:	00034520 00034512 00034520 00034404      E...E.. E...D..
   3c810:	00034528 00034528 00034528 0003472c     (E..(E..(E..,G..

0003c820 <_global_impure_ptr>:
   3c820:	20000134 6900666e 7974696e 006e6100     4.. nf.inity.an.

0003c830 <fpi.6129>:
   3c830:	00000035 fffffbce 000003cb 00000001     5...............
   3c840:	00000000                                ....

0003c844 <fpinan.6165>:
   3c844:	00000034 fffffbce 000003cb 00000001     4...............
   3c854:	00000000                                ....

0003c858 <tinytens>:
   3c858:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   3c868:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   3c878:	64ac6f43 11680628                       Co.d(.h.

0003c880 <__sf_fake_stderr>:
	...

0003c8a0 <__sf_fake_stdin>:
	...

0003c8c0 <__sf_fake_stdout>:
	...
   3c8e0:	4f500043 00584953 0000002e 00000000     C.POSIX.........

0003c8f0 <__mprec_bigtens>:
   3c8f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   3c900:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   3c910:	7f73bf3c 75154fdd                       <.s..O.u

0003c918 <__mprec_tens>:
   3c918:	00000000 3ff00000 00000000 40240000     .......?......$@
   3c928:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   3c938:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   3c948:	00000000 412e8480 00000000 416312d0     .......A......cA
   3c958:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   3c968:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   3c978:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   3c988:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   3c998:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   3c9a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   3c9b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   3c9c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   3c9d8:	79d99db4 44ea7843                       ...yCx.D

0003c9e0 <p05.6047>:
   3c9e0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   3c9f0:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
   3ca00:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
   3ca10:	35343332 39383736 64636261 00006665              23456789abcdef.

0003ca1f <_ctype_>:
   3ca1f:	20202000 20202020 28282020 20282828     .         ((((( 
   3ca2f:	20202020 20202020 20202020 20202020                     
   3ca3f:	10108820 10101010 10101010 10101010      ...............
   3ca4f:	04040410 04040404 10040404 10101010     ................
   3ca5f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3ca6f:	01010101 01010101 01010101 10101010     ................
   3ca7f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3ca8f:	02020202 02020202 02020202 10101010     ................
   3ca9f:	00000020 00000000 00000000 00000000      ...............
	...

0003cb20 <_init>:
   3cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cb22:	46c0      	nop			; (mov r8, r8)
   3cb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3cb26:	bc08      	pop	{r3}
   3cb28:	469e      	mov	lr, r3
   3cb2a:	4770      	bx	lr

0003cb2c <__init_array_start>:
   3cb2c:	000120dd 	.word	0x000120dd

0003cb30 <_fini>:
   3cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cb32:	46c0      	nop			; (mov r8, r8)
   3cb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3cb36:	bc08      	pop	{r3}
   3cb38:	469e      	mov	lr, r3
   3cb3a:	4770      	bx	lr

0003cb3c <__fini_array_start>:
   3cb3c:	000120b5 	.word	0x000120b5
