
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000288b8  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003a8b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000059d0  20000300  0003abc0  00030300  2**4
                  ALLOC
  3 .stack        00002000  20005cd0  00040590  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0013a51a  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011759  00000000  00000000  0016a89b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000172c9  00000000  00000000  0017bff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003e50  00000000  00000000  001932bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a80  00000000  00000000  0019710d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00042733  00000000  00000000  0019ab8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005fa89  00000000  00000000  001dd2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c4155  00000000  00000000  0023cd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000eab8  00000000  00000000  00300ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	d0 7c 00 20 e1 b2 02 00 d9 b3 02 00 d9 b3 02 00     .|. ............
	...
   1202c:	51 a5 01 00 00 00 00 00 00 00 00 00 71 a6 01 00     Q...........q...
   1203c:	b9 a6 01 00 d9 b3 02 00 d9 b3 02 00 d9 b3 02 00     ................
   1204c:	31 74 02 00 5d 69 02 00 d9 b3 02 00 09 2e 01 00     1t..]i..........
   1205c:	d9 b3 02 00 4d 2f 01 00 d5 7a 02 00 ed 7a 02 00     ....M/...z...z..
   1206c:	05 7b 02 00 1d 7b 02 00 35 7b 02 00 4d 7b 02 00     .{...{..5{..M{..
   1207c:	29 b2 02 00 3d b2 02 00 51 b2 02 00 3d 82 01 00     )...=...Q...=...
   1208c:	51 82 01 00 65 82 01 00 00 00 00 00 00 00 00 00     Q...e...........
   1209c:	91 2c 01 00 d9 b3 02 00 cd 2d 01 00 d9 b3 02 00     .,.......-......
   120ac:	d9 b3 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003a8b8 	.word	0x0003a8b8

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003a8b8 	.word	0x0003a8b8
   1210c:	0003a8b8 	.word	0x0003a8b8
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223d      	movs	r2, #61	; 0x3d
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004764 	.word	0x20004764
   12224:	00014a29 	.word	0x00014a29

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223d      	movs	r2, #61	; 0x3d
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004764 	.word	0x20004764
   1227c:	00014a29 	.word	0x00014a29

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004778 	.word	0x20004778
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000477c 	.word	0x2000477c
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	000265bd 	.word	0x000265bd

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	00026611 	.word	0x00026611

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004780 	.word	0x20004780
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	000181e9 	.word	0x000181e9
   13444:	fffbffff 	.word	0xfffbffff
   13448:	0001818b 	.word	0x0001818b
   1344c:	0001812d 	.word	0x0001812d

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	000181e9 	.word	0x000181e9
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c44 	.word	0x20005c44
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b9a      	ldr	r3, [pc, #616]	; (13a8c <vCommandConsoleTask+0x274>)
   13822:	0018      	movs	r0, r3
   13824:	4b9a      	ldr	r3, [pc, #616]	; (13a90 <vCommandConsoleTask+0x278>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4b9a      	ldr	r3, [pc, #616]	; (13a94 <vCommandConsoleTask+0x27c>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b98      	ldr	r3, [pc, #608]	; (13a90 <vCommandConsoleTask+0x278>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4b99      	ldr	r3, [pc, #612]	; (13a98 <vCommandConsoleTask+0x280>)
   13832:	0018      	movs	r0, r3
   13834:	4b96      	ldr	r3, [pc, #600]	; (13a90 <vCommandConsoleTask+0x278>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4b98      	ldr	r3, [pc, #608]	; (13a9c <vCommandConsoleTask+0x284>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b94      	ldr	r3, [pc, #592]	; (13a90 <vCommandConsoleTask+0x278>)
   1383e:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13840:	4b97      	ldr	r3, [pc, #604]	; (13aa0 <vCommandConsoleTask+0x288>)
   13842:	0018      	movs	r0, r3
   13844:	4b92      	ldr	r3, [pc, #584]	; (13a90 <vCommandConsoleTask+0x278>)
   13846:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13848:	4b96      	ldr	r3, [pc, #600]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b90      	ldr	r3, [pc, #576]	; (13a90 <vCommandConsoleTask+0x278>)
   1384e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xGpsGetCommand); //added by Derek
   13850:	4b95      	ldr	r3, [pc, #596]	; (13aa8 <vCommandConsoleTask+0x290>)
   13852:	0018      	movs	r0, r3
   13854:	4b8e      	ldr	r3, [pc, #568]	; (13a90 <vCommandConsoleTask+0x278>)
   13856:	4798      	blx	r3
	
    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13858:	2317      	movs	r3, #23
   1385a:	18fb      	adds	r3, r7, r3
   1385c:	2200      	movs	r2, #0
   1385e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13860:	4b92      	ldr	r3, [pc, #584]	; (13aac <vCommandConsoleTask+0x294>)
   13862:	0018      	movs	r0, r3
   13864:	4b92      	ldr	r3, [pc, #584]	; (13ab0 <vCommandConsoleTask+0x298>)
   13866:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13868:	2203      	movs	r2, #3
   1386a:	2100      	movs	r1, #0
   1386c:	2001      	movs	r0, #1
   1386e:	4b91      	ldr	r3, [pc, #580]	; (13ab4 <vCommandConsoleTask+0x29c>)
   13870:	4798      	blx	r3
   13872:	0002      	movs	r2, r0
   13874:	4b90      	ldr	r3, [pc, #576]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13876:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13878:	4b8f      	ldr	r3, [pc, #572]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1387a:	681b      	ldr	r3, [r3, #0]
   1387c:	2b00      	cmp	r3, #0
   1387e:	d107      	bne.n	13890 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13880:	4b8e      	ldr	r3, [pc, #568]	; (13abc <vCommandConsoleTask+0x2a4>)
   13882:	0019      	movs	r1, r3
   13884:	2003      	movs	r0, #3
   13886:	4b8e      	ldr	r3, [pc, #568]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13888:	4798      	blx	r3
        vTaskSuspend(NULL);
   1388a:	2000      	movs	r0, #0
   1388c:	4b8d      	ldr	r3, [pc, #564]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1388e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13890:	230c      	movs	r3, #12
   13892:	18fb      	adds	r3, r7, r3
   13894:	0018      	movs	r0, r3
   13896:	4b8c      	ldr	r3, [pc, #560]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13898:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   1389a:	230c      	movs	r3, #12
   1389c:	18fb      	adds	r3, r7, r3
   1389e:	781b      	ldrb	r3, [r3, #0]
   138a0:	2b0a      	cmp	r3, #10
   138a2:	d004      	beq.n	138ae <vCommandConsoleTask+0x96>
   138a4:	230c      	movs	r3, #12
   138a6:	18fb      	adds	r3, r7, r3
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	2b0d      	cmp	r3, #13
   138ac:	d137      	bne.n	1391e <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138ae:	4b87      	ldr	r3, [pc, #540]	; (13acc <vCommandConsoleTask+0x2b4>)
   138b0:	0018      	movs	r0, r3
   138b2:	4b7f      	ldr	r3, [pc, #508]	; (13ab0 <vCommandConsoleTask+0x298>)
   138b4:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138b6:	4b86      	ldr	r3, [pc, #536]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   138b8:	2200      	movs	r2, #0
   138ba:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138bc:	4b85      	ldr	r3, [pc, #532]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138be:	2200      	movs	r2, #0
   138c0:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138c2:	4985      	ldr	r1, [pc, #532]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138c4:	4b85      	ldr	r3, [pc, #532]	; (13adc <vCommandConsoleTask+0x2c4>)
   138c6:	2231      	movs	r2, #49	; 0x31
   138c8:	0018      	movs	r0, r3
   138ca:	4b85      	ldr	r3, [pc, #532]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   138cc:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138ce:	4b83      	ldr	r3, [pc, #524]	; (13adc <vCommandConsoleTask+0x2c4>)
   138d0:	2231      	movs	r2, #49	; 0x31
   138d2:	2100      	movs	r1, #0
   138d4:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138d6:	4983      	ldr	r1, [pc, #524]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138d8:	4b7f      	ldr	r3, [pc, #508]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138da:	2264      	movs	r2, #100	; 0x64
   138dc:	0018      	movs	r0, r3
   138de:	4b82      	ldr	r3, [pc, #520]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138e0:	4798      	blx	r3
   138e2:	0003      	movs	r3, r0
   138e4:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138e6:	4b7f      	ldr	r3, [pc, #508]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138e8:	2263      	movs	r2, #99	; 0x63
   138ea:	2100      	movs	r1, #0
   138ec:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138ee:	4b7d      	ldr	r3, [pc, #500]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138f0:	0018      	movs	r0, r3
   138f2:	4b6f      	ldr	r3, [pc, #444]	; (13ab0 <vCommandConsoleTask+0x298>)
   138f4:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138f6:	693b      	ldr	r3, [r7, #16]
   138f8:	2b00      	cmp	r3, #0
   138fa:	d1ec      	bne.n	138d6 <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   138fc:	2317      	movs	r3, #23
   138fe:	18fb      	adds	r3, r7, r3
   13900:	2200      	movs	r2, #0
   13902:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13904:	4b74      	ldr	r3, [pc, #464]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13906:	2232      	movs	r2, #50	; 0x32
   13908:	2100      	movs	r1, #0
   1390a:	0018      	movs	r0, r3
   1390c:	4b77      	ldr	r3, [pc, #476]	; (13aec <vCommandConsoleTask+0x2d4>)
   1390e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13910:	4b74      	ldr	r3, [pc, #464]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13912:	2264      	movs	r2, #100	; 0x64
   13914:	2100      	movs	r1, #0
   13916:	0018      	movs	r0, r3
   13918:	4b74      	ldr	r3, [pc, #464]	; (13aec <vCommandConsoleTask+0x2d4>)
   1391a:	4798      	blx	r3
   1391c:	e0b5      	b.n	13a8a <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   1391e:	4b6c      	ldr	r3, [pc, #432]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	2b00      	cmp	r3, #0
   13924:	d059      	beq.n	139da <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13926:	4b6b      	ldr	r3, [pc, #428]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b03      	cmp	r3, #3
   1392c:	d80c      	bhi.n	13948 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   1392e:	4b69      	ldr	r3, [pc, #420]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	1c5a      	adds	r2, r3, #1
   13934:	b2d1      	uxtb	r1, r2
   13936:	4a67      	ldr	r2, [pc, #412]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13938:	7011      	strb	r1, [r2, #0]
   1393a:	001a      	movs	r2, r3
   1393c:	230c      	movs	r3, #12
   1393e:	18fb      	adds	r3, r7, r3
   13940:	7819      	ldrb	r1, [r3, #0]
   13942:	4b6b      	ldr	r3, [pc, #428]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13944:	5499      	strb	r1, [r3, r2]
   13946:	e005      	b.n	13954 <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   13948:	4b61      	ldr	r3, [pc, #388]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   1394a:	2200      	movs	r2, #0
   1394c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1394e:	4b61      	ldr	r3, [pc, #388]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13950:	2200      	movs	r2, #0
   13952:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13954:	4b5f      	ldr	r3, [pc, #380]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13956:	781b      	ldrb	r3, [r3, #0]
   13958:	2b01      	cmp	r3, #1
   1395a:	d999      	bls.n	13890 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   1395c:	4a65      	ldr	r2, [pc, #404]	; (13af4 <vCommandConsoleTask+0x2dc>)
   1395e:	4b64      	ldr	r3, [pc, #400]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13960:	0011      	movs	r1, r2
   13962:	0018      	movs	r0, r3
   13964:	4b64      	ldr	r3, [pc, #400]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13966:	4798      	blx	r3
   13968:	1e03      	subs	r3, r0, #0
   1396a:	d02f      	beq.n	139cc <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   1396c:	4963      	ldr	r1, [pc, #396]	; (13afc <vCommandConsoleTask+0x2e4>)
   1396e:	4b5a      	ldr	r3, [pc, #360]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13970:	221b      	movs	r2, #27
   13972:	0018      	movs	r0, r3
   13974:	4b62      	ldr	r3, [pc, #392]	; (13b00 <vCommandConsoleTask+0x2e8>)
   13976:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13978:	4b57      	ldr	r3, [pc, #348]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   1397a:	0018      	movs	r0, r3
   1397c:	4b4c      	ldr	r3, [pc, #304]	; (13ab0 <vCommandConsoleTask+0x298>)
   1397e:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13980:	2317      	movs	r3, #23
   13982:	18fb      	adds	r3, r7, r3
   13984:	2200      	movs	r2, #0
   13986:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13988:	4b53      	ldr	r3, [pc, #332]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   1398a:	2232      	movs	r2, #50	; 0x32
   1398c:	2100      	movs	r1, #0
   1398e:	0018      	movs	r0, r3
   13990:	4b56      	ldr	r3, [pc, #344]	; (13aec <vCommandConsoleTask+0x2d4>)
   13992:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   13994:	4951      	ldr	r1, [pc, #324]	; (13adc <vCommandConsoleTask+0x2c4>)
   13996:	4b50      	ldr	r3, [pc, #320]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13998:	2231      	movs	r2, #49	; 0x31
   1399a:	0018      	movs	r0, r3
   1399c:	4b50      	ldr	r3, [pc, #320]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1399e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139a0:	4b4d      	ldr	r3, [pc, #308]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   139a2:	0018      	movs	r0, r3
   139a4:	4b57      	ldr	r3, [pc, #348]	; (13b04 <vCommandConsoleTask+0x2ec>)
   139a6:	4798      	blx	r3
   139a8:	0003      	movs	r3, r0
   139aa:	2b30      	cmp	r3, #48	; 0x30
   139ac:	d806      	bhi.n	139bc <vCommandConsoleTask+0x1a4>
   139ae:	4b4b      	ldr	r3, [pc, #300]	; (13adc <vCommandConsoleTask+0x2c4>)
   139b0:	0018      	movs	r0, r3
   139b2:	4b54      	ldr	r3, [pc, #336]	; (13b04 <vCommandConsoleTask+0x2ec>)
   139b4:	4798      	blx	r3
   139b6:	0003      	movs	r3, r0
   139b8:	b2da      	uxtb	r2, r3
   139ba:	e000      	b.n	139be <vCommandConsoleTask+0x1a6>
   139bc:	2231      	movs	r2, #49	; 0x31
   139be:	2317      	movs	r3, #23
   139c0:	18fb      	adds	r3, r7, r3
   139c2:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139c4:	4b44      	ldr	r3, [pc, #272]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   139c6:	0018      	movs	r0, r3
   139c8:	4b39      	ldr	r3, [pc, #228]	; (13ab0 <vCommandConsoleTask+0x298>)
   139ca:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139cc:	4b40      	ldr	r3, [pc, #256]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   139ce:	2200      	movs	r2, #0
   139d0:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139d2:	4b40      	ldr	r3, [pc, #256]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   139d4:	2200      	movs	r2, #0
   139d6:	701a      	strb	r2, [r3, #0]
   139d8:	e75a      	b.n	13890 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139da:	230c      	movs	r3, #12
   139dc:	18fb      	adds	r3, r7, r3
   139de:	781b      	ldrb	r3, [r3, #0]
   139e0:	2b0d      	cmp	r3, #13
   139e2:	d100      	bne.n	139e6 <vCommandConsoleTask+0x1ce>
   139e4:	e754      	b.n	13890 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139e6:	230c      	movs	r3, #12
   139e8:	18fb      	adds	r3, r7, r3
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	2b08      	cmp	r3, #8
   139ee:	d004      	beq.n	139fa <vCommandConsoleTask+0x1e2>
   139f0:	230c      	movs	r3, #12
   139f2:	18fb      	adds	r3, r7, r3
   139f4:	781b      	ldrb	r3, [r3, #0]
   139f6:	2b7f      	cmp	r3, #127	; 0x7f
   139f8:	d11c      	bne.n	13a34 <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   139fa:	2308      	movs	r3, #8
   139fc:	18fb      	adds	r3, r7, r3
   139fe:	4a42      	ldr	r2, [pc, #264]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13a00:	6812      	ldr	r2, [r2, #0]
   13a02:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a04:	2308      	movs	r3, #8
   13a06:	18fb      	adds	r3, r7, r3
   13a08:	0018      	movs	r0, r3
   13a0a:	4b29      	ldr	r3, [pc, #164]	; (13ab0 <vCommandConsoleTask+0x298>)
   13a0c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a0e:	2317      	movs	r3, #23
   13a10:	18fb      	adds	r3, r7, r3
   13a12:	781b      	ldrb	r3, [r3, #0]
   13a14:	2b00      	cmp	r3, #0
   13a16:	d037      	beq.n	13a88 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   13a18:	2317      	movs	r3, #23
   13a1a:	18fb      	adds	r3, r7, r3
   13a1c:	781a      	ldrb	r2, [r3, #0]
   13a1e:	2317      	movs	r3, #23
   13a20:	18fb      	adds	r3, r7, r3
   13a22:	3a01      	subs	r2, #1
   13a24:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	4a2a      	ldr	r2, [pc, #168]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13a2e:	2100      	movs	r1, #0
   13a30:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a32:	e029      	b.n	13a88 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a34:	230c      	movs	r3, #12
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	781b      	ldrb	r3, [r3, #0]
   13a3a:	2b1b      	cmp	r3, #27
   13a3c:	d106      	bne.n	13a4c <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   13a3e:	4b24      	ldr	r3, [pc, #144]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13a40:	2201      	movs	r2, #1
   13a42:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a44:	4b23      	ldr	r3, [pc, #140]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13a46:	2200      	movs	r2, #0
   13a48:	701a      	strb	r2, [r3, #0]
   13a4a:	e721      	b.n	13890 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a4c:	2317      	movs	r3, #23
   13a4e:	18fb      	adds	r3, r7, r3
   13a50:	781b      	ldrb	r3, [r3, #0]
   13a52:	2b31      	cmp	r3, #49	; 0x31
   13a54:	d80e      	bhi.n	13a74 <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a56:	2317      	movs	r3, #23
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	781b      	ldrb	r3, [r3, #0]
   13a5c:	220c      	movs	r2, #12
   13a5e:	18ba      	adds	r2, r7, r2
   13a60:	7811      	ldrb	r1, [r2, #0]
   13a62:	4a1d      	ldr	r2, [pc, #116]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13a64:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a66:	2317      	movs	r3, #23
   13a68:	18fb      	adds	r3, r7, r3
   13a6a:	781a      	ldrb	r2, [r3, #0]
   13a6c:	2317      	movs	r3, #23
   13a6e:	18fb      	adds	r3, r7, r3
   13a70:	3201      	adds	r2, #1
   13a72:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a74:	230c      	movs	r3, #12
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	2200      	movs	r2, #0
   13a7a:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a7c:	230c      	movs	r3, #12
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	0018      	movs	r0, r3
   13a82:	4b0b      	ldr	r3, [pc, #44]	; (13ab0 <vCommandConsoleTask+0x298>)
   13a84:	4798      	blx	r3
   13a86:	e703      	b.n	13890 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a88:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a8a:	e701      	b.n	13890 <vCommandConsoleTask+0x78>
   13a8c:	000367d4 	.word	0x000367d4
   13a90:	00018331 	.word	0x00018331
   13a94:	000367c4 	.word	0x000367c4
   13a98:	00036824 	.word	0x00036824
   13a9c:	000367e4 	.word	0x000367e4
   13aa0:	000367f4 	.word	0x000367f4
   13aa4:	00036804 	.word	0x00036804
   13aa8:	00036814 	.word	0x00036814
   13aac:	00036484 	.word	0x00036484
   13ab0:	0001e255 	.word	0x0001e255
   13ab4:	0001a8f5 	.word	0x0001a8f5
   13ab8:	200047d0 	.word	0x200047d0
   13abc:	00036630 	.word	0x00036630
   13ac0:	0001e341 	.word	0x0001e341
   13ac4:	0001c6e1 	.word	0x0001c6e1
   13ac8:	00013b0d 	.word	0x00013b0d
   13acc:	00036650 	.word	0x00036650
   13ad0:	20000514 	.word	0x20000514
   13ad4:	20000515 	.word	0x20000515
   13ad8:	2000054c 	.word	0x2000054c
   13adc:	20000518 	.word	0x20000518
   13ae0:	000351fb 	.word	0x000351fb
   13ae4:	20000580 	.word	0x20000580
   13ae8:	000183a1 	.word	0x000183a1
   13aec:	00034e13 	.word	0x00034e13
   13af0:	200005e4 	.word	0x200005e4
   13af4:	00036654 	.word	0x00036654
   13af8:	00035115 	.word	0x00035115
   13afc:	00036658 	.word	0x00036658
   13b00:	000350d1 	.word	0x000350d1
   13b04:	000351cb 	.word	0x000351cb
   13b08:	00036660 	.word	0x00036660

00013b0c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b0c:	b580      	push	{r7, lr}
   13b0e:	b084      	sub	sp, #16
   13b10:	af00      	add	r7, sp, #0
   13b12:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b14:	687b      	ldr	r3, [r7, #4]
   13b16:	0018      	movs	r0, r3
   13b18:	4b0c      	ldr	r3, [pc, #48]	; (13b4c <FreeRTOS_read+0x40>)
   13b1a:	4798      	blx	r3
   13b1c:	0003      	movs	r3, r0
   13b1e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b20:	e00d      	b.n	13b3e <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b22:	4b0b      	ldr	r3, [pc, #44]	; (13b50 <FreeRTOS_read+0x44>)
   13b24:	681a      	ldr	r2, [r3, #0]
   13b26:	2301      	movs	r3, #1
   13b28:	425b      	negs	r3, r3
   13b2a:	0019      	movs	r1, r3
   13b2c:	0010      	movs	r0, r2
   13b2e:	4b09      	ldr	r3, [pc, #36]	; (13b54 <FreeRTOS_read+0x48>)
   13b30:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b32:	687b      	ldr	r3, [r7, #4]
   13b34:	0018      	movs	r0, r3
   13b36:	4b05      	ldr	r3, [pc, #20]	; (13b4c <FreeRTOS_read+0x40>)
   13b38:	4798      	blx	r3
   13b3a:	0003      	movs	r3, r0
   13b3c:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b3e:	68fb      	ldr	r3, [r7, #12]
   13b40:	3301      	adds	r3, #1
   13b42:	d0ee      	beq.n	13b22 <FreeRTOS_read+0x16>
    }
}
   13b44:	46c0      	nop			; (mov r8, r8)
   13b46:	46bd      	mov	sp, r7
   13b48:	b004      	add	sp, #16
   13b4a:	bd80      	pop	{r7, pc}
   13b4c:	0001e2f1 	.word	0x0001e2f1
   13b50:	200047d0 	.word	0x200047d0
   13b54:	0001b8ad 	.word	0x0001b8ad

00013b58 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b58:	b580      	push	{r7, lr}
   13b5a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b5c:	4b0a      	ldr	r3, [pc, #40]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b5e:	2200      	movs	r2, #0
   13b60:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b62:	4b0a      	ldr	r3, [pc, #40]	; (13b8c <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b64:	681b      	ldr	r3, [r3, #0]
   13b66:	4a08      	ldr	r2, [pc, #32]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b68:	0011      	movs	r1, r2
   13b6a:	0018      	movs	r0, r3
   13b6c:	4b08      	ldr	r3, [pc, #32]	; (13b90 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b6e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b70:	4b05      	ldr	r3, [pc, #20]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b72:	681b      	ldr	r3, [r3, #0]
   13b74:	2b00      	cmp	r3, #0
   13b76:	d003      	beq.n	13b80 <CliCharReadySemaphoreGiveFromISR+0x28>
   13b78:	4b06      	ldr	r3, [pc, #24]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b7a:	2280      	movs	r2, #128	; 0x80
   13b7c:	0552      	lsls	r2, r2, #21
   13b7e:	601a      	str	r2, [r3, #0]
}
   13b80:	46c0      	nop			; (mov r8, r8)
   13b82:	46bd      	mov	sp, r7
   13b84:	bd80      	pop	{r7, pc}
   13b86:	46c0      	nop			; (mov r8, r8)
   13b88:	200005e8 	.word	0x200005e8
   13b8c:	200047d0 	.word	0x200047d0
   13b90:	0001b225 	.word	0x0001b225
   13b94:	e000ed04 	.word	0xe000ed04

00013b98 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b98:	b5b0      	push	{r4, r5, r7, lr}
   13b9a:	b08a      	sub	sp, #40	; 0x28
   13b9c:	af02      	add	r7, sp, #8
   13b9e:	60f8      	str	r0, [r7, #12]
   13ba0:	60b9      	str	r1, [r7, #8]
   13ba2:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13ba4:	4b49      	ldr	r3, [pc, #292]	; (13ccc <CLI_GetImuData+0x134>)
   13ba6:	4798      	blx	r3
   13ba8:	0003      	movs	r3, r0
   13baa:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13bac:	231b      	movs	r3, #27
   13bae:	18fa      	adds	r2, r7, r3
   13bb0:	69fb      	ldr	r3, [r7, #28]
   13bb2:	0011      	movs	r1, r2
   13bb4:	0018      	movs	r0, r3
   13bb6:	4b46      	ldr	r3, [pc, #280]	; (13cd0 <CLI_GetImuData+0x138>)
   13bb8:	4798      	blx	r3

    if (reg) {
   13bba:	231b      	movs	r3, #27
   13bbc:	18fb      	adds	r3, r7, r3
   13bbe:	781b      	ldrb	r3, [r3, #0]
   13bc0:	2b00      	cmp	r3, #0
   13bc2:	d064      	beq.n	13c8e <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13bc4:	4b43      	ldr	r3, [pc, #268]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bc6:	2206      	movs	r2, #6
   13bc8:	2100      	movs	r1, #0
   13bca:	0018      	movs	r0, r3
   13bcc:	4b42      	ldr	r3, [pc, #264]	; (13cd8 <CLI_GetImuData+0x140>)
   13bce:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13bd0:	4a40      	ldr	r2, [pc, #256]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bd2:	69fb      	ldr	r3, [r7, #28]
   13bd4:	0011      	movs	r1, r2
   13bd6:	0018      	movs	r0, r3
   13bd8:	4b40      	ldr	r3, [pc, #256]	; (13cdc <CLI_GetImuData+0x144>)
   13bda:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13bdc:	4b3d      	ldr	r3, [pc, #244]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bde:	2200      	movs	r2, #0
   13be0:	5e9b      	ldrsh	r3, [r3, r2]
   13be2:	0018      	movs	r0, r3
   13be4:	4b3e      	ldr	r3, [pc, #248]	; (13ce0 <CLI_GetImuData+0x148>)
   13be6:	4798      	blx	r3
   13be8:	1c02      	adds	r2, r0, #0
   13bea:	4b3e      	ldr	r3, [pc, #248]	; (13ce4 <CLI_GetImuData+0x14c>)
   13bec:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13bee:	4b39      	ldr	r3, [pc, #228]	; (13cd4 <CLI_GetImuData+0x13c>)
   13bf0:	2202      	movs	r2, #2
   13bf2:	5e9b      	ldrsh	r3, [r3, r2]
   13bf4:	0018      	movs	r0, r3
   13bf6:	4b3a      	ldr	r3, [pc, #232]	; (13ce0 <CLI_GetImuData+0x148>)
   13bf8:	4798      	blx	r3
   13bfa:	1c02      	adds	r2, r0, #0
   13bfc:	4b39      	ldr	r3, [pc, #228]	; (13ce4 <CLI_GetImuData+0x14c>)
   13bfe:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c00:	4b34      	ldr	r3, [pc, #208]	; (13cd4 <CLI_GetImuData+0x13c>)
   13c02:	2204      	movs	r2, #4
   13c04:	5e9b      	ldrsh	r3, [r3, r2]
   13c06:	0018      	movs	r0, r3
   13c08:	4b35      	ldr	r3, [pc, #212]	; (13ce0 <CLI_GetImuData+0x148>)
   13c0a:	4798      	blx	r3
   13c0c:	1c02      	adds	r2, r0, #0
   13c0e:	4b35      	ldr	r3, [pc, #212]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c10:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c12:	4b34      	ldr	r3, [pc, #208]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c14:	681a      	ldr	r2, [r3, #0]
   13c16:	4b34      	ldr	r3, [pc, #208]	; (13ce8 <CLI_GetImuData+0x150>)
   13c18:	1c10      	adds	r0, r2, #0
   13c1a:	4798      	blx	r3
   13c1c:	0005      	movs	r5, r0
   13c1e:	4b31      	ldr	r3, [pc, #196]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c20:	685a      	ldr	r2, [r3, #4]
   13c22:	4b31      	ldr	r3, [pc, #196]	; (13ce8 <CLI_GetImuData+0x150>)
   13c24:	1c10      	adds	r0, r2, #0
   13c26:	4798      	blx	r3
   13c28:	0004      	movs	r4, r0
   13c2a:	4b2e      	ldr	r3, [pc, #184]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c2c:	689a      	ldr	r2, [r3, #8]
   13c2e:	4b2e      	ldr	r3, [pc, #184]	; (13ce8 <CLI_GetImuData+0x150>)
   13c30:	1c10      	adds	r0, r2, #0
   13c32:	4798      	blx	r3
   13c34:	0003      	movs	r3, r0
   13c36:	4a2d      	ldr	r2, [pc, #180]	; (13cec <CLI_GetImuData+0x154>)
   13c38:	68b9      	ldr	r1, [r7, #8]
   13c3a:	68f8      	ldr	r0, [r7, #12]
   13c3c:	9301      	str	r3, [sp, #4]
   13c3e:	9400      	str	r4, [sp, #0]
   13c40:	002b      	movs	r3, r5
   13c42:	4c2b      	ldr	r4, [pc, #172]	; (13cf0 <CLI_GetImuData+0x158>)
   13c44:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   13c46:	4b27      	ldr	r3, [pc, #156]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c48:	681a      	ldr	r2, [r3, #0]
   13c4a:	4b27      	ldr	r3, [pc, #156]	; (13ce8 <CLI_GetImuData+0x150>)
   13c4c:	1c10      	adds	r0, r2, #0
   13c4e:	4798      	blx	r3
   13c50:	0003      	movs	r3, r0
   13c52:	b21a      	sxth	r2, r3
   13c54:	2314      	movs	r3, #20
   13c56:	18fb      	adds	r3, r7, r3
   13c58:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   13c5a:	4b22      	ldr	r3, [pc, #136]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c5c:	685a      	ldr	r2, [r3, #4]
   13c5e:	4b22      	ldr	r3, [pc, #136]	; (13ce8 <CLI_GetImuData+0x150>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	0003      	movs	r3, r0
   13c66:	b21a      	sxth	r2, r3
   13c68:	2314      	movs	r3, #20
   13c6a:	18fb      	adds	r3, r7, r3
   13c6c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   13c6e:	4b1d      	ldr	r3, [pc, #116]	; (13ce4 <CLI_GetImuData+0x14c>)
   13c70:	689a      	ldr	r2, [r3, #8]
   13c72:	4b1d      	ldr	r3, [pc, #116]	; (13ce8 <CLI_GetImuData+0x150>)
   13c74:	1c10      	adds	r0, r2, #0
   13c76:	4798      	blx	r3
   13c78:	0003      	movs	r3, r0
   13c7a:	b21a      	sxth	r2, r3
   13c7c:	2314      	movs	r3, #20
   13c7e:	18fb      	adds	r3, r7, r3
   13c80:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13c82:	2314      	movs	r3, #20
   13c84:	18fb      	adds	r3, r7, r3
   13c86:	0018      	movs	r0, r3
   13c88:	4b1a      	ldr	r3, [pc, #104]	; (13cf4 <CLI_GetImuData+0x15c>)
   13c8a:	4798      	blx	r3
   13c8c:	e019      	b.n	13cc2 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   13c8e:	4a1a      	ldr	r2, [pc, #104]	; (13cf8 <CLI_GetImuData+0x160>)
   13c90:	68b9      	ldr	r1, [r7, #8]
   13c92:	68fb      	ldr	r3, [r7, #12]
   13c94:	0018      	movs	r0, r3
   13c96:	4b16      	ldr	r3, [pc, #88]	; (13cf0 <CLI_GetImuData+0x158>)
   13c98:	4798      	blx	r3
		imuPacket.xmg = -1;
   13c9a:	2314      	movs	r3, #20
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	2201      	movs	r2, #1
   13ca0:	4252      	negs	r2, r2
   13ca2:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   13ca4:	2314      	movs	r3, #20
   13ca6:	18fb      	adds	r3, r7, r3
   13ca8:	2202      	movs	r2, #2
   13caa:	4252      	negs	r2, r2
   13cac:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   13cae:	2314      	movs	r3, #20
   13cb0:	18fb      	adds	r3, r7, r3
   13cb2:	2203      	movs	r2, #3
   13cb4:	4252      	negs	r2, r2
   13cb6:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13cb8:	2314      	movs	r3, #20
   13cba:	18fb      	adds	r3, r7, r3
   13cbc:	0018      	movs	r0, r3
   13cbe:	4b0d      	ldr	r3, [pc, #52]	; (13cf4 <CLI_GetImuData+0x15c>)
   13cc0:	4798      	blx	r3
    }
    return pdFALSE;
   13cc2:	2300      	movs	r3, #0
}
   13cc4:	0018      	movs	r0, r3
   13cc6:	46bd      	mov	sp, r7
   13cc8:	b008      	add	sp, #32
   13cca:	bdb0      	pop	{r4, r5, r7, pc}
   13ccc:	00015a25 	.word	0x00015a25
   13cd0:	00015411 	.word	0x00015411
   13cd4:	200005ec 	.word	0x200005ec
   13cd8:	00034e13 	.word	0x00034e13
   13cdc:	0001544d 	.word	0x0001544d
   13ce0:	00014ca1 	.word	0x00014ca1
   13ce4:	200005f4 	.word	0x200005f4
   13ce8:	00033315 	.word	0x00033315
   13cec:	00036664 	.word	0x00036664
   13cf0:	0003506d 	.word	0x0003506d
   13cf4:	00017975 	.word	0x00017975
   13cf8:	00036688 	.word	0x00036688

00013cfc <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cfc:	b590      	push	{r4, r7, lr}
   13cfe:	b087      	sub	sp, #28
   13d00:	af00      	add	r7, sp, #0
   13d02:	60f8      	str	r0, [r7, #12]
   13d04:	60b9      	str	r1, [r7, #8]
   13d06:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13d08:	2317      	movs	r3, #23
   13d0a:	18fb      	adds	r3, r7, r3
   13d0c:	221b      	movs	r2, #27
   13d0e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13d10:	2317      	movs	r3, #23
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	4a08      	ldr	r2, [pc, #32]	; (13d38 <xCliClearTerminalScreen+0x3c>)
   13d18:	4808      	ldr	r0, [pc, #32]	; (13d3c <xCliClearTerminalScreen+0x40>)
   13d1a:	210f      	movs	r1, #15
   13d1c:	4c08      	ldr	r4, [pc, #32]	; (13d40 <xCliClearTerminalScreen+0x44>)
   13d1e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13d20:	4a06      	ldr	r2, [pc, #24]	; (13d3c <xCliClearTerminalScreen+0x40>)
   13d22:	68b9      	ldr	r1, [r7, #8]
   13d24:	68fb      	ldr	r3, [r7, #12]
   13d26:	0018      	movs	r0, r3
   13d28:	4b05      	ldr	r3, [pc, #20]	; (13d40 <xCliClearTerminalScreen+0x44>)
   13d2a:	4798      	blx	r3
    return pdFALSE;
   13d2c:	2300      	movs	r3, #0
}
   13d2e:	0018      	movs	r0, r3
   13d30:	46bd      	mov	sp, r7
   13d32:	b007      	add	sp, #28
   13d34:	bd90      	pop	{r4, r7, pc}
   13d36:	46c0      	nop			; (mov r8, r8)
   13d38:	000366b0 	.word	0x000366b0
   13d3c:	20000504 	.word	0x20000504
   13d40:	0003506d 	.word	0x0003506d

00013d44 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d44:	b580      	push	{r7, lr}
   13d46:	b084      	sub	sp, #16
   13d48:	af00      	add	r7, sp, #0
   13d4a:	60f8      	str	r0, [r7, #12]
   13d4c:	60b9      	str	r1, [r7, #8]
   13d4e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d50:	2002      	movs	r0, #2
   13d52:	4b03      	ldr	r3, [pc, #12]	; (13d60 <CLI_OTAU+0x1c>)
   13d54:	4798      	blx	r3

    return pdFALSE;
   13d56:	2300      	movs	r3, #0
}
   13d58:	0018      	movs	r0, r3
   13d5a:	46bd      	mov	sp, r7
   13d5c:	b004      	add	sp, #16
   13d5e:	bd80      	pop	{r7, pc}
   13d60:	00017941 	.word	0x00017941

00013d64 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d64:	b580      	push	{r7, lr}
   13d66:	b084      	sub	sp, #16
   13d68:	af00      	add	r7, sp, #0
   13d6a:	60f8      	str	r0, [r7, #12]
   13d6c:	60b9      	str	r1, [r7, #8]
   13d6e:	607a      	str	r2, [r7, #4]
    system_reset();
   13d70:	4b03      	ldr	r3, [pc, #12]	; (13d80 <CLI_ResetDevice+0x1c>)
   13d72:	4798      	blx	r3
    return pdFALSE;
   13d74:	2300      	movs	r3, #0
}
   13d76:	0018      	movs	r0, r3
   13d78:	46bd      	mov	sp, r7
   13d7a:	b004      	add	sp, #16
   13d7c:	bd80      	pop	{r7, pc}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	00013805 	.word	0x00013805

00013d84 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d84:	b590      	push	{r4, r7, lr}
   13d86:	b087      	sub	sp, #28
   13d88:	af00      	add	r7, sp, #0
   13d8a:	60f8      	str	r0, [r7, #12]
   13d8c:	60b9      	str	r1, [r7, #8]
   13d8e:	607a      	str	r2, [r7, #4]
    char distance = 0;
   13d90:	2313      	movs	r3, #19
   13d92:	18fb      	adds	r3, r7, r3
   13d94:	2200      	movs	r2, #0
   13d96:	701a      	strb	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 1000);
   13d98:	23fa      	movs	r3, #250	; 0xfa
   13d9a:	009a      	lsls	r2, r3, #2
   13d9c:	2313      	movs	r3, #19
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	0011      	movs	r1, r2
   13da2:	0018      	movs	r0, r3
   13da4:	4b19      	ldr	r3, [pc, #100]	; (13e0c <CLI_DistanceSensorGetDistance+0x88>)
   13da6:	4798      	blx	r3
   13da8:	0003      	movs	r3, r0
   13daa:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13dac:	697b      	ldr	r3, [r7, #20]
   13dae:	2b00      	cmp	r3, #0
   13db0:	d006      	beq.n	13dc0 <CLI_DistanceSensorGetDistance+0x3c>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13db2:	697b      	ldr	r3, [r7, #20]
   13db4:	4a16      	ldr	r2, [pc, #88]	; (13e10 <CLI_DistanceSensorGetDistance+0x8c>)
   13db6:	68b9      	ldr	r1, [r7, #8]
   13db8:	68f8      	ldr	r0, [r7, #12]
   13dba:	4c16      	ldr	r4, [pc, #88]	; (13e14 <CLI_DistanceSensorGetDistance+0x90>)
   13dbc:	47a0      	blx	r4
   13dbe:	e007      	b.n	13dd0 <CLI_DistanceSensorGetDistance+0x4c>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13dc0:	2313      	movs	r3, #19
   13dc2:	18fb      	adds	r3, r7, r3
   13dc4:	781b      	ldrb	r3, [r3, #0]
   13dc6:	4a14      	ldr	r2, [pc, #80]	; (13e18 <CLI_DistanceSensorGetDistance+0x94>)
   13dc8:	68b9      	ldr	r1, [r7, #8]
   13dca:	68f8      	ldr	r0, [r7, #12]
   13dcc:	4c11      	ldr	r4, [pc, #68]	; (13e14 <CLI_DistanceSensorGetDistance+0x90>)
   13dce:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13dd0:	2313      	movs	r3, #19
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	0018      	movs	r0, r3
   13dd6:	4b11      	ldr	r3, [pc, #68]	; (13e1c <CLI_DistanceSensorGetDistance+0x98>)
   13dd8:	4798      	blx	r3
   13dda:	0003      	movs	r3, r0
   13ddc:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13dde:	697b      	ldr	r3, [r7, #20]
   13de0:	2b01      	cmp	r3, #1
   13de2:	d10e      	bne.n	13e02 <CLI_DistanceSensorGetDistance+0x7e>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13de4:	68fb      	ldr	r3, [r7, #12]
   13de6:	0018      	movs	r0, r3
   13de8:	4b0d      	ldr	r3, [pc, #52]	; (13e20 <CLI_DistanceSensorGetDistance+0x9c>)
   13dea:	4798      	blx	r3
   13dec:	0003      	movs	r3, r0
   13dee:	001a      	movs	r2, r3
   13df0:	68fb      	ldr	r3, [r7, #12]
   13df2:	189a      	adds	r2, r3, r2
   13df4:	4b0b      	ldr	r3, [pc, #44]	; (13e24 <CLI_DistanceSensorGetDistance+0xa0>)
   13df6:	0010      	movs	r0, r2
   13df8:	0019      	movs	r1, r3
   13dfa:	231a      	movs	r3, #26
   13dfc:	001a      	movs	r2, r3
   13dfe:	4b0a      	ldr	r3, [pc, #40]	; (13e28 <CLI_DistanceSensorGetDistance+0xa4>)
   13e00:	4798      	blx	r3
    }
    return pdFALSE;
   13e02:	2300      	movs	r3, #0
}
   13e04:	0018      	movs	r0, r3
   13e06:	46bd      	mov	sp, r7
   13e08:	b007      	add	sp, #28
   13e0a:	bd90      	pop	{r4, r7, pc}
   13e0c:	00014241 	.word	0x00014241
   13e10:	00036704 	.word	0x00036704
   13e14:	0003506d 	.word	0x0003506d
   13e18:	00036718 	.word	0x00036718
   13e1c:	000179a1 	.word	0x000179a1
   13e20:	000351cb 	.word	0x000351cb
   13e24:	0003672c 	.word	0x0003672c
   13e28:	00034ddd 	.word	0x00034ddd

00013e2c <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e2c:	b590      	push	{r4, r7, lr}
   13e2e:	b08f      	sub	sp, #60	; 0x3c
   13e30:	af00      	add	r7, sp, #0
   13e32:	60f8      	str	r0, [r7, #12]
   13e34:	60b9      	str	r1, [r7, #8]
   13e36:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13e38:	2318      	movs	r3, #24
   13e3a:	18fb      	adds	r3, r7, r3
   13e3c:	2200      	movs	r2, #0
   13e3e:	701a      	strb	r2, [r3, #0]
   13e40:	2318      	movs	r3, #24
   13e42:	18fb      	adds	r3, r7, r3
   13e44:	2200      	movs	r2, #0
   13e46:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13e48:	2318      	movs	r3, #24
   13e4a:	18fb      	adds	r3, r7, r3
   13e4c:	2200      	movs	r2, #0
   13e4e:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13e50:	2318      	movs	r3, #24
   13e52:	18fb      	adds	r3, r7, r3
   13e54:	2200      	movs	r2, #0
   13e56:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13e58:	231c      	movs	r3, #28
   13e5a:	18fb      	adds	r3, r7, r3
   13e5c:	2200      	movs	r2, #0
   13e5e:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13e60:	231c      	movs	r3, #28
   13e62:	18fb      	adds	r3, r7, r3
   13e64:	2214      	movs	r2, #20
   13e66:	18ba      	adds	r2, r7, r2
   13e68:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13e6a:	231c      	movs	r3, #28
   13e6c:	18fb      	adds	r3, r7, r3
   13e6e:	2201      	movs	r2, #1
   13e70:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13e72:	231c      	movs	r3, #28
   13e74:	18fb      	adds	r3, r7, r3
   13e76:	2218      	movs	r2, #24
   13e78:	18ba      	adds	r2, r7, r2
   13e7a:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13e7c:	231c      	movs	r3, #28
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	2201      	movs	r2, #1
   13e82:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13e84:	4b2a      	ldr	r3, [pc, #168]	; (13f30 <CLI_i2cScan+0x104>)
   13e86:	0018      	movs	r0, r3
   13e88:	4b2a      	ldr	r3, [pc, #168]	; (13f34 <CLI_i2cScan+0x108>)
   13e8a:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e8c:	2300      	movs	r3, #0
   13e8e:	637b      	str	r3, [r7, #52]	; 0x34
   13e90:	e042      	b.n	13f18 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e94:	4a28      	ldr	r2, [pc, #160]	; (13f38 <CLI_i2cScan+0x10c>)
   13e96:	4829      	ldr	r0, [pc, #164]	; (13f3c <CLI_i2cScan+0x110>)
   13e98:	210f      	movs	r1, #15
   13e9a:	4c29      	ldr	r4, [pc, #164]	; (13f40 <CLI_i2cScan+0x114>)
   13e9c:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13e9e:	4b27      	ldr	r3, [pc, #156]	; (13f3c <CLI_i2cScan+0x110>)
   13ea0:	0018      	movs	r0, r3
   13ea2:	4b24      	ldr	r3, [pc, #144]	; (13f34 <CLI_i2cScan+0x108>)
   13ea4:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13ea6:	2300      	movs	r3, #0
   13ea8:	633b      	str	r3, [r7, #48]	; 0x30
   13eaa:	e02b      	b.n	13f04 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13eae:	b2da      	uxtb	r2, r3
   13eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eb2:	b2db      	uxtb	r3, r3
   13eb4:	18d3      	adds	r3, r2, r3
   13eb6:	b2da      	uxtb	r2, r3
   13eb8:	231c      	movs	r3, #28
   13eba:	18fb      	adds	r3, r7, r3
   13ebc:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   13ebe:	231c      	movs	r3, #28
   13ec0:	18fb      	adds	r3, r7, r3
   13ec2:	2264      	movs	r2, #100	; 0x64
   13ec4:	2164      	movs	r1, #100	; 0x64
   13ec6:	0018      	movs	r0, r3
   13ec8:	4b1e      	ldr	r3, [pc, #120]	; (13f44 <CLI_i2cScan+0x118>)
   13eca:	4798      	blx	r3
   13ecc:	0003      	movs	r3, r0
   13ece:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13ed2:	2b00      	cmp	r3, #0
   13ed4:	d10c      	bne.n	13ef0 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   13ed6:	231c      	movs	r3, #28
   13ed8:	18fb      	adds	r3, r7, r3
   13eda:	781b      	ldrb	r3, [r3, #0]
   13edc:	4a1a      	ldr	r2, [pc, #104]	; (13f48 <CLI_i2cScan+0x11c>)
   13ede:	4817      	ldr	r0, [pc, #92]	; (13f3c <CLI_i2cScan+0x110>)
   13ee0:	210f      	movs	r1, #15
   13ee2:	4c17      	ldr	r4, [pc, #92]	; (13f40 <CLI_i2cScan+0x114>)
   13ee4:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13ee6:	4b15      	ldr	r3, [pc, #84]	; (13f3c <CLI_i2cScan+0x110>)
   13ee8:	0018      	movs	r0, r3
   13eea:	4b12      	ldr	r3, [pc, #72]	; (13f34 <CLI_i2cScan+0x108>)
   13eec:	4798      	blx	r3
   13eee:	e006      	b.n	13efe <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13ef0:	4b12      	ldr	r3, [pc, #72]	; (13f3c <CLI_i2cScan+0x110>)
   13ef2:	4a16      	ldr	r2, [pc, #88]	; (13f4c <CLI_i2cScan+0x120>)
   13ef4:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   13ef6:	4b11      	ldr	r3, [pc, #68]	; (13f3c <CLI_i2cScan+0x110>)
   13ef8:	0018      	movs	r0, r3
   13efa:	4b0e      	ldr	r3, [pc, #56]	; (13f34 <CLI_i2cScan+0x108>)
   13efc:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13f00:	3301      	adds	r3, #1
   13f02:	633b      	str	r3, [r7, #48]	; 0x30
   13f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13f06:	2b0f      	cmp	r3, #15
   13f08:	ddd0      	ble.n	13eac <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13f0a:	4b11      	ldr	r3, [pc, #68]	; (13f50 <CLI_i2cScan+0x124>)
   13f0c:	0018      	movs	r0, r3
   13f0e:	4b09      	ldr	r3, [pc, #36]	; (13f34 <CLI_i2cScan+0x108>)
   13f10:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13f14:	3310      	adds	r3, #16
   13f16:	637b      	str	r3, [r7, #52]	; 0x34
   13f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13f1a:	2b7f      	cmp	r3, #127	; 0x7f
   13f1c:	ddb9      	ble.n	13e92 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13f1e:	4b0c      	ldr	r3, [pc, #48]	; (13f50 <CLI_i2cScan+0x124>)
   13f20:	0018      	movs	r0, r3
   13f22:	4b04      	ldr	r3, [pc, #16]	; (13f34 <CLI_i2cScan+0x108>)
   13f24:	4798      	blx	r3
			return pdFALSE;
   13f26:	2300      	movs	r3, #0

}
   13f28:	0018      	movs	r0, r3
   13f2a:	46bd      	mov	sp, r7
   13f2c:	b00f      	add	sp, #60	; 0x3c
   13f2e:	bd90      	pop	{r4, r7, pc}
   13f30:	00036764 	.word	0x00036764
   13f34:	0001e255 	.word	0x0001e255
   13f38:	00036798 	.word	0x00036798
   13f3c:	20000504 	.word	0x20000504
   13f40:	0003506d 	.word	0x0003506d
   13f44:	00014b01 	.word	0x00014b01
   13f48:	000367a0 	.word	0x000367a0
   13f4c:	00202058 	.word	0x00202058
   13f50:	00036650 	.word	0x00036650

00013f54 <CLI_GetGpsData>:

// CLI Command added by Derek. Reads from the GPS and returns data.
BaseType_t CLI_GetGpsData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13f54:	b580      	push	{r7, lr}
   13f56:	b084      	sub	sp, #16
   13f58:	af00      	add	r7, sp, #0
   13f5a:	60f8      	str	r0, [r7, #12]
   13f5c:	60b9      	str	r1, [r7, #8]
   13f5e:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("Added by Derek, TBD!\r\n\r\n");
   13f60:	4b04      	ldr	r3, [pc, #16]	; (13f74 <CLI_GetGpsData+0x20>)
   13f62:	0018      	movs	r0, r3
   13f64:	4b04      	ldr	r3, [pc, #16]	; (13f78 <CLI_GetGpsData+0x24>)
   13f66:	4798      	blx	r3
		gpsPacket.lat = 0;
		gpsPacket.lon = 0;
		WifiAddGpsDataToQueue(&gpsPacket);
	}
	*/
	return pdFALSE;
   13f68:	2300      	movs	r3, #0
}
   13f6a:	0018      	movs	r0, r3
   13f6c:	46bd      	mov	sp, r7
   13f6e:	b004      	add	sp, #16
   13f70:	bd80      	pop	{r7, pc}
   13f72:	46c0      	nop			; (mov r8, r8)
   13f74:	000367a8 	.word	0x000367a8
   13f78:	0001e255 	.word	0x0001e255

00013f7c <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13f7c:	b590      	push	{r4, r7, lr}
   13f7e:	b085      	sub	sp, #20
   13f80:	af00      	add	r7, sp, #0
   13f82:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   13f84:	4b06      	ldr	r3, [pc, #24]	; (13fa0 <ControlAddGameData+0x24>)
   13f86:	6818      	ldr	r0, [r3, #0]
   13f88:	6879      	ldr	r1, [r7, #4]
   13f8a:	2300      	movs	r3, #0
   13f8c:	220a      	movs	r2, #10
   13f8e:	4c05      	ldr	r4, [pc, #20]	; (13fa4 <ControlAddGameData+0x28>)
   13f90:	47a0      	blx	r4
   13f92:	0003      	movs	r3, r0
   13f94:	60fb      	str	r3, [r7, #12]
    return error;
   13f96:	68fb      	ldr	r3, [r7, #12]
}
   13f98:	0018      	movs	r0, r3
   13f9a:	46bd      	mov	sp, r7
   13f9c:	b005      	add	sp, #20
   13f9e:	bd90      	pop	{r4, r7, pc}
   13fa0:	20000600 	.word	0x20000600
   13fa4:	0001ab9d 	.word	0x0001ab9d

00013fa8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   13fa8:	b580      	push	{r7, lr}
   13faa:	b082      	sub	sp, #8
   13fac:	af00      	add	r7, sp, #0
   13fae:	0002      	movs	r2, r0
   13fb0:	1dfb      	adds	r3, r7, #7
   13fb2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13fb4:	4b06      	ldr	r3, [pc, #24]	; (13fd0 <system_interrupt_enable+0x28>)
   13fb6:	1dfa      	adds	r2, r7, #7
   13fb8:	7812      	ldrb	r2, [r2, #0]
   13fba:	0011      	movs	r1, r2
   13fbc:	221f      	movs	r2, #31
   13fbe:	400a      	ands	r2, r1
   13fc0:	2101      	movs	r1, #1
   13fc2:	4091      	lsls	r1, r2
   13fc4:	000a      	movs	r2, r1
   13fc6:	601a      	str	r2, [r3, #0]
}
   13fc8:	46c0      	nop			; (mov r8, r8)
   13fca:	46bd      	mov	sp, r7
   13fcc:	b002      	add	sp, #8
   13fce:	bd80      	pop	{r7, pc}
   13fd0:	e000e100 	.word	0xe000e100

00013fd4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   13fd4:	b580      	push	{r7, lr}
   13fd6:	b084      	sub	sp, #16
   13fd8:	af00      	add	r7, sp, #0
   13fda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   13fdc:	687b      	ldr	r3, [r7, #4]
   13fde:	681b      	ldr	r3, [r3, #0]
   13fe0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   13fe2:	68fb      	ldr	r3, [r7, #12]
   13fe4:	69db      	ldr	r3, [r3, #28]
   13fe6:	1e5a      	subs	r2, r3, #1
   13fe8:	4193      	sbcs	r3, r2
   13fea:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   13fec:	0018      	movs	r0, r3
   13fee:	46bd      	mov	sp, r7
   13ff0:	b004      	add	sp, #16
   13ff2:	bd80      	pop	{r7, pc}

00013ff4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b082      	sub	sp, #8
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   13ffc:	46c0      	nop			; (mov r8, r8)
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	0018      	movs	r0, r3
   14002:	4b04      	ldr	r3, [pc, #16]	; (14014 <_usart_wait_for_sync+0x20>)
   14004:	4798      	blx	r3
   14006:	1e03      	subs	r3, r0, #0
   14008:	d1f9      	bne.n	13ffe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	46bd      	mov	sp, r7
   1400e:	b002      	add	sp, #8
   14010:	bd80      	pop	{r7, pc}
   14012:	46c0      	nop			; (mov r8, r8)
   14014:	00013fd5 	.word	0x00013fd5

00014018 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   14018:	b580      	push	{r7, lr}
   1401a:	b082      	sub	sp, #8
   1401c:	af00      	add	r7, sp, #0
   1401e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   14020:	687b      	ldr	r3, [r7, #4]
   14022:	2280      	movs	r2, #128	; 0x80
   14024:	05d2      	lsls	r2, r2, #23
   14026:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   14028:	687b      	ldr	r3, [r7, #4]
   1402a:	2200      	movs	r2, #0
   1402c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1402e:	687b      	ldr	r3, [r7, #4]
   14030:	22ff      	movs	r2, #255	; 0xff
   14032:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	2200      	movs	r2, #0
   14038:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1403a:	687b      	ldr	r3, [r7, #4]
   1403c:	2200      	movs	r2, #0
   1403e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   14040:	687b      	ldr	r3, [r7, #4]
   14042:	2296      	movs	r2, #150	; 0x96
   14044:	0192      	lsls	r2, r2, #6
   14046:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   14048:	687b      	ldr	r3, [r7, #4]
   1404a:	2224      	movs	r2, #36	; 0x24
   1404c:	2101      	movs	r1, #1
   1404e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   14050:	687b      	ldr	r3, [r7, #4]
   14052:	2225      	movs	r2, #37	; 0x25
   14054:	2101      	movs	r1, #1
   14056:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   14058:	687b      	ldr	r3, [r7, #4]
   1405a:	2226      	movs	r2, #38	; 0x26
   1405c:	2100      	movs	r1, #0
   1405e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   14060:	687b      	ldr	r3, [r7, #4]
   14062:	2227      	movs	r2, #39	; 0x27
   14064:	2100      	movs	r1, #0
   14066:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   14068:	687b      	ldr	r3, [r7, #4]
   1406a:	2200      	movs	r2, #0
   1406c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1406e:	687b      	ldr	r3, [r7, #4]
   14070:	2288      	movs	r2, #136	; 0x88
   14072:	0352      	lsls	r2, r2, #13
   14074:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   14076:	687b      	ldr	r3, [r7, #4]
   14078:	222c      	movs	r2, #44	; 0x2c
   1407a:	2100      	movs	r1, #0
   1407c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1407e:	687b      	ldr	r3, [r7, #4]
   14080:	222d      	movs	r2, #45	; 0x2d
   14082:	2100      	movs	r1, #0
   14084:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14086:	687b      	ldr	r3, [r7, #4]
   14088:	2200      	movs	r2, #0
   1408a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1408c:	687b      	ldr	r3, [r7, #4]
   1408e:	2200      	movs	r2, #0
   14090:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   14092:	687b      	ldr	r3, [r7, #4]
   14094:	2200      	movs	r2, #0
   14096:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   14098:	687b      	ldr	r3, [r7, #4]
   1409a:	2200      	movs	r2, #0
   1409c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1409e:	687b      	ldr	r3, [r7, #4]
   140a0:	2200      	movs	r2, #0
   140a2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   140a4:	687b      	ldr	r3, [r7, #4]
   140a6:	2200      	movs	r2, #0
   140a8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   140aa:	687b      	ldr	r3, [r7, #4]
   140ac:	2200      	movs	r2, #0
   140ae:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   140b0:	687b      	ldr	r3, [r7, #4]
   140b2:	2200      	movs	r2, #0
   140b4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   140b6:	687b      	ldr	r3, [r7, #4]
   140b8:	2200      	movs	r2, #0
   140ba:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   140bc:	687b      	ldr	r3, [r7, #4]
   140be:	2200      	movs	r2, #0
   140c0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   140c2:	687b      	ldr	r3, [r7, #4]
   140c4:	2213      	movs	r2, #19
   140c6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   140c8:	687b      	ldr	r3, [r7, #4]
   140ca:	2200      	movs	r2, #0
   140cc:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   140ce:	46c0      	nop			; (mov r8, r8)
   140d0:	46bd      	mov	sp, r7
   140d2:	b002      	add	sp, #8
   140d4:	bd80      	pop	{r7, pc}
	...

000140d8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   140d8:	b580      	push	{r7, lr}
   140da:	b084      	sub	sp, #16
   140dc:	af00      	add	r7, sp, #0
   140de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   140e0:	687b      	ldr	r3, [r7, #4]
   140e2:	681b      	ldr	r3, [r3, #0]
   140e4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   140e6:	687b      	ldr	r3, [r7, #4]
   140e8:	681b      	ldr	r3, [r3, #0]
   140ea:	0018      	movs	r0, r3
   140ec:	4b09      	ldr	r3, [pc, #36]	; (14114 <usart_enable+0x3c>)
   140ee:	4798      	blx	r3
   140f0:	0003      	movs	r3, r0
   140f2:	0018      	movs	r0, r3
   140f4:	4b08      	ldr	r3, [pc, #32]	; (14118 <usart_enable+0x40>)
   140f6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   140f8:	687b      	ldr	r3, [r7, #4]
   140fa:	0018      	movs	r0, r3
   140fc:	4b07      	ldr	r3, [pc, #28]	; (1411c <usart_enable+0x44>)
   140fe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   14100:	68fb      	ldr	r3, [r7, #12]
   14102:	681b      	ldr	r3, [r3, #0]
   14104:	2202      	movs	r2, #2
   14106:	431a      	orrs	r2, r3
   14108:	68fb      	ldr	r3, [r7, #12]
   1410a:	601a      	str	r2, [r3, #0]
}
   1410c:	46c0      	nop			; (mov r8, r8)
   1410e:	46bd      	mov	sp, r7
   14110:	b004      	add	sp, #16
   14112:	bd80      	pop	{r7, pc}
   14114:	00027a91 	.word	0x00027a91
   14118:	00013fa9 	.word	0x00013fa9
   1411c:	00013ff5 	.word	0x00013ff5

00014120 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   14120:	b580      	push	{r7, lr}
   14122:	b082      	sub	sp, #8
   14124:	af00      	add	r7, sp, #0
   14126:	6078      	str	r0, [r7, #4]
   14128:	000a      	movs	r2, r1
   1412a:	1cfb      	adds	r3, r7, #3
   1412c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1412e:	687b      	ldr	r3, [r7, #4]
   14130:	2231      	movs	r2, #49	; 0x31
   14132:	5c9b      	ldrb	r3, [r3, r2]
   14134:	b25a      	sxtb	r2, r3
   14136:	1cfb      	adds	r3, r7, #3
   14138:	781b      	ldrb	r3, [r3, #0]
   1413a:	2101      	movs	r1, #1
   1413c:	4099      	lsls	r1, r3
   1413e:	000b      	movs	r3, r1
   14140:	b25b      	sxtb	r3, r3
   14142:	4313      	orrs	r3, r2
   14144:	b25b      	sxtb	r3, r3
   14146:	b2d9      	uxtb	r1, r3
   14148:	687b      	ldr	r3, [r7, #4]
   1414a:	2231      	movs	r2, #49	; 0x31
   1414c:	5499      	strb	r1, [r3, r2]

}
   1414e:	46c0      	nop			; (mov r8, r8)
   14150:	46bd      	mov	sp, r7
   14152:	b002      	add	sp, #8
   14154:	bd80      	pop	{r7, pc}
	...

00014158 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   14158:	b580      	push	{r7, lr}
   1415a:	b084      	sub	sp, #16
   1415c:	af00      	add	r7, sp, #0
   1415e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14160:	2300      	movs	r3, #0
   14162:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14164:	4b09      	ldr	r3, [pc, #36]	; (1418c <distUsartWritecallback+0x34>)
   14166:	681b      	ldr	r3, [r3, #0]
   14168:	220c      	movs	r2, #12
   1416a:	18ba      	adds	r2, r7, r2
   1416c:	0011      	movs	r1, r2
   1416e:	0018      	movs	r0, r3
   14170:	4b07      	ldr	r3, [pc, #28]	; (14190 <distUsartWritecallback+0x38>)
   14172:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	2b00      	cmp	r3, #0
   14178:	d003      	beq.n	14182 <distUsartWritecallback+0x2a>
   1417a:	4b06      	ldr	r3, [pc, #24]	; (14194 <distUsartWritecallback+0x3c>)
   1417c:	2280      	movs	r2, #128	; 0x80
   1417e:	0552      	lsls	r2, r2, #21
   14180:	601a      	str	r2, [r3, #0]
}
   14182:	46c0      	nop			; (mov r8, r8)
   14184:	46bd      	mov	sp, r7
   14186:	b004      	add	sp, #16
   14188:	bd80      	pop	{r7, pc}
   1418a:	46c0      	nop			; (mov r8, r8)
   1418c:	200047d8 	.word	0x200047d8
   14190:	0001b225 	.word	0x0001b225
   14194:	e000ed04 	.word	0xe000ed04

00014198 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   14198:	b580      	push	{r7, lr}
   1419a:	b084      	sub	sp, #16
   1419c:	af00      	add	r7, sp, #0
   1419e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   141a0:	2300      	movs	r3, #0
   141a2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   141a4:	4b09      	ldr	r3, [pc, #36]	; (141cc <distUsartReadcallback+0x34>)
   141a6:	681b      	ldr	r3, [r3, #0]
   141a8:	220c      	movs	r2, #12
   141aa:	18ba      	adds	r2, r7, r2
   141ac:	0011      	movs	r1, r2
   141ae:	0018      	movs	r0, r3
   141b0:	4b07      	ldr	r3, [pc, #28]	; (141d0 <distUsartReadcallback+0x38>)
   141b2:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141b4:	68fb      	ldr	r3, [r7, #12]
   141b6:	2b00      	cmp	r3, #0
   141b8:	d003      	beq.n	141c2 <distUsartReadcallback+0x2a>
   141ba:	4b06      	ldr	r3, [pc, #24]	; (141d4 <distUsartReadcallback+0x3c>)
   141bc:	2280      	movs	r2, #128	; 0x80
   141be:	0552      	lsls	r2, r2, #21
   141c0:	601a      	str	r2, [r3, #0]
}
   141c2:	46c0      	nop			; (mov r8, r8)
   141c4:	46bd      	mov	sp, r7
   141c6:	b004      	add	sp, #16
   141c8:	bd80      	pop	{r7, pc}
   141ca:	46c0      	nop			; (mov r8, r8)
   141cc:	200047d8 	.word	0x200047d8
   141d0:	0001b225 	.word	0x0001b225
   141d4:	e000ed04 	.word	0xe000ed04

000141d8 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
   141d8:	b580      	push	{r7, lr}
   141da:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
   141dc:	4b10      	ldr	r3, [pc, #64]	; (14220 <InitializeDistanceSensor+0x48>)
   141de:	4798      	blx	r3
    configure_usart_callbacks();
   141e0:	4b10      	ldr	r3, [pc, #64]	; (14224 <InitializeDistanceSensor+0x4c>)
   141e2:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   141e4:	2001      	movs	r0, #1
   141e6:	4b10      	ldr	r3, [pc, #64]	; (14228 <InitializeDistanceSensor+0x50>)
   141e8:	4798      	blx	r3
   141ea:	0002      	movs	r2, r0
   141ec:	4b0f      	ldr	r3, [pc, #60]	; (1422c <InitializeDistanceSensor+0x54>)
   141ee:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   141f0:	2203      	movs	r2, #3
   141f2:	2100      	movs	r1, #0
   141f4:	2001      	movs	r0, #1
   141f6:	4b0e      	ldr	r3, [pc, #56]	; (14230 <InitializeDistanceSensor+0x58>)
   141f8:	4798      	blx	r3
   141fa:	0002      	movs	r2, r0
   141fc:	4b0d      	ldr	r3, [pc, #52]	; (14234 <InitializeDistanceSensor+0x5c>)
   141fe:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
   14200:	4b0a      	ldr	r3, [pc, #40]	; (1422c <InitializeDistanceSensor+0x54>)
   14202:	681b      	ldr	r3, [r3, #0]
   14204:	2b00      	cmp	r3, #0
   14206:	d003      	beq.n	14210 <InitializeDistanceSensor+0x38>
   14208:	4b0a      	ldr	r3, [pc, #40]	; (14234 <InitializeDistanceSensor+0x5c>)
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	2b00      	cmp	r3, #0
   1420e:	d103      	bne.n	14218 <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
   14210:	4b09      	ldr	r3, [pc, #36]	; (14238 <InitializeDistanceSensor+0x60>)
   14212:	0018      	movs	r0, r3
   14214:	4b09      	ldr	r3, [pc, #36]	; (1423c <InitializeDistanceSensor+0x64>)
   14216:	4798      	blx	r3
    }
}
   14218:	46c0      	nop			; (mov r8, r8)
   1421a:	46bd      	mov	sp, r7
   1421c:	bd80      	pop	{r7, pc}
   1421e:	46c0      	nop			; (mov r8, r8)
   14220:	00014301 	.word	0x00014301
   14224:	00014379 	.word	0x00014379
   14228:	0001ab5d 	.word	0x0001ab5d
   1422c:	200047dc 	.word	0x200047dc
   14230:	0001a8f5 	.word	0x0001a8f5
   14234:	200047d8 	.word	0x200047d8
   14238:	00036834 	.word	0x00036834
   1423c:	0001e255 	.word	0x0001e255

00014240 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (char *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(char *distance, const TickType_t xMaxBlockTime)
{
   14240:	b580      	push	{r7, lr}
   14242:	b084      	sub	sp, #16
   14244:	af00      	add	r7, sp, #0
   14246:	6078      	str	r0, [r7, #4]
   14248:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   1424a:	2300      	movs	r3, #0
   1424c:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   1424e:	2396      	movs	r3, #150	; 0x96
   14250:	005b      	lsls	r3, r3, #1
   14252:	0018      	movs	r0, r3
   14254:	4b21      	ldr	r3, [pc, #132]	; (142dc <DistanceSensorGetDistance+0x9c>)
   14256:	4798      	blx	r3
   14258:	0003      	movs	r3, r0
   1425a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   1425c:	68fb      	ldr	r3, [r7, #12]
   1425e:	2b00      	cmp	r3, #0
   14260:	d131      	bne.n	142c6 <DistanceSensorGetDistance+0x86>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   14262:	4b1f      	ldr	r3, [pc, #124]	; (142e0 <DistanceSensorGetDistance+0xa0>)
   14264:	2255      	movs	r2, #85	; 0x55
   14266:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14268:	491d      	ldr	r1, [pc, #116]	; (142e0 <DistanceSensorGetDistance+0xa0>)
   1426a:	4b1e      	ldr	r3, [pc, #120]	; (142e4 <DistanceSensorGetDistance+0xa4>)
   1426c:	2201      	movs	r2, #1
   1426e:	0018      	movs	r0, r3
   14270:	4b1d      	ldr	r3, [pc, #116]	; (142e8 <DistanceSensorGetDistance+0xa8>)
   14272:	4798      	blx	r3
   14274:	1e03      	subs	r3, r0, #0
   14276:	d128      	bne.n	142ca <DistanceSensorGetDistance+0x8a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14278:	4b1c      	ldr	r3, [pc, #112]	; (142ec <DistanceSensorGetDistance+0xac>)
   1427a:	681b      	ldr	r3, [r3, #0]
   1427c:	683a      	ldr	r2, [r7, #0]
   1427e:	0011      	movs	r1, r2
   14280:	0018      	movs	r0, r3
   14282:	4b1b      	ldr	r3, [pc, #108]	; (142f0 <DistanceSensorGetDistance+0xb0>)
   14284:	4798      	blx	r3
   14286:	0003      	movs	r3, r0
   14288:	2b01      	cmp	r3, #1
   1428a:	d003      	beq.n	14294 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1428c:	2303      	movs	r3, #3
   1428e:	425b      	negs	r3, r3
   14290:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14292:	e01b      	b.n	142cc <DistanceSensorGetDistance+0x8c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    //usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
	usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 1);
   14294:	4917      	ldr	r1, [pc, #92]	; (142f4 <DistanceSensorGetDistance+0xb4>)
   14296:	4b13      	ldr	r3, [pc, #76]	; (142e4 <DistanceSensorGetDistance+0xa4>)
   14298:	2201      	movs	r2, #1
   1429a:	0018      	movs	r0, r3
   1429c:	4b16      	ldr	r3, [pc, #88]	; (142f8 <DistanceSensorGetDistance+0xb8>)
   1429e:	4798      	blx	r3
	
    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   142a0:	4b12      	ldr	r3, [pc, #72]	; (142ec <DistanceSensorGetDistance+0xac>)
   142a2:	681b      	ldr	r3, [r3, #0]
   142a4:	683a      	ldr	r2, [r7, #0]
   142a6:	0011      	movs	r1, r2
   142a8:	0018      	movs	r0, r3
   142aa:	4b11      	ldr	r3, [pc, #68]	; (142f0 <DistanceSensorGetDistance+0xb0>)
   142ac:	4798      	blx	r3
   142ae:	0003      	movs	r3, r0
   142b0:	2b01      	cmp	r3, #1
   142b2:	d104      	bne.n	142be <DistanceSensorGetDistance+0x7e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        //*distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
		*distance = latestRxDistance[0]; //Derek-@628
   142b4:	4b0f      	ldr	r3, [pc, #60]	; (142f4 <DistanceSensorGetDistance+0xb4>)
   142b6:	781a      	ldrb	r2, [r3, #0]
   142b8:	687b      	ldr	r3, [r7, #4]
   142ba:	701a      	strb	r2, [r3, #0]
   142bc:	e006      	b.n	142cc <DistanceSensorGetDistance+0x8c>
		{
			//SerialConsoleWriteString("hi");
		}
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   142be:	2303      	movs	r3, #3
   142c0:	425b      	negs	r3, r3
   142c2:	60fb      	str	r3, [r7, #12]
        goto exitf;
   142c4:	e002      	b.n	142cc <DistanceSensorGetDistance+0x8c>
    if (ERROR_NONE != error) goto exitf;
   142c6:	46c0      	nop			; (mov r8, r8)
   142c8:	e000      	b.n	142cc <DistanceSensorGetDistance+0x8c>
        goto exitf;
   142ca:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   142cc:	4b0b      	ldr	r3, [pc, #44]	; (142fc <DistanceSensorGetDistance+0xbc>)
   142ce:	4798      	blx	r3

    return error;
   142d0:	68fb      	ldr	r3, [r7, #12]
}
   142d2:	0018      	movs	r0, r3
   142d4:	46bd      	mov	sp, r7
   142d6:	b004      	add	sp, #16
   142d8:	bd80      	pop	{r7, pc}
   142da:	46c0      	nop			; (mov r8, r8)
   142dc:	000143fd 	.word	0x000143fd
   142e0:	200047d6 	.word	0x200047d6
   142e4:	200047e0 	.word	0x200047e0
   142e8:	000292f1 	.word	0x000292f1
   142ec:	200047d8 	.word	0x200047d8
   142f0:	0001b8ad 	.word	0x0001b8ad
   142f4:	200047d4 	.word	0x200047d4
   142f8:	00029339 	.word	0x00029339
   142fc:	000143c5 	.word	0x000143c5

00014300 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   14300:	b580      	push	{r7, lr}
   14302:	b090      	sub	sp, #64	; 0x40
   14304:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   14306:	003b      	movs	r3, r7
   14308:	0018      	movs	r0, r3
   1430a:	4b14      	ldr	r3, [pc, #80]	; (1435c <configure_usart+0x5c>)
   1430c:	4798      	blx	r3

    config_usart.baudrate = 9600;
   1430e:	003b      	movs	r3, r7
   14310:	2296      	movs	r2, #150	; 0x96
   14312:	0192      	lsls	r2, r2, #6
   14314:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   14316:	003b      	movs	r3, r7
   14318:	2280      	movs	r2, #128	; 0x80
   1431a:	0352      	lsls	r2, r2, #13
   1431c:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
   1431e:	003b      	movs	r3, r7
   14320:	4a0f      	ldr	r2, [pc, #60]	; (14360 <configure_usart+0x60>)
   14322:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
   14324:	003b      	movs	r3, r7
   14326:	4a0f      	ldr	r2, [pc, #60]	; (14364 <configure_usart+0x64>)
   14328:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
   1432a:	003b      	movs	r3, r7
   1432c:	2201      	movs	r2, #1
   1432e:	4252      	negs	r2, r2
   14330:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
   14332:	003b      	movs	r3, r7
   14334:	2201      	movs	r2, #1
   14336:	4252      	negs	r2, r2
   14338:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
   1433a:	46c0      	nop			; (mov r8, r8)
   1433c:	003a      	movs	r2, r7
   1433e:	490a      	ldr	r1, [pc, #40]	; (14368 <configure_usart+0x68>)
   14340:	4b0a      	ldr	r3, [pc, #40]	; (1436c <configure_usart+0x6c>)
   14342:	0018      	movs	r0, r3
   14344:	4b0a      	ldr	r3, [pc, #40]	; (14370 <configure_usart+0x70>)
   14346:	4798      	blx	r3
   14348:	1e03      	subs	r3, r0, #0
   1434a:	d1f7      	bne.n	1433c <configure_usart+0x3c>
    }

    usart_enable(&usart_instance_dist);
   1434c:	4b07      	ldr	r3, [pc, #28]	; (1436c <configure_usart+0x6c>)
   1434e:	0018      	movs	r0, r3
   14350:	4b08      	ldr	r3, [pc, #32]	; (14374 <configure_usart+0x74>)
   14352:	4798      	blx	r3
}
   14354:	46c0      	nop			; (mov r8, r8)
   14356:	46bd      	mov	sp, r7
   14358:	b010      	add	sp, #64	; 0x40
   1435a:	bd80      	pop	{r7, pc}
   1435c:	00014019 	.word	0x00014019
   14360:	00220003 	.word	0x00220003
   14364:	00230003 	.word	0x00230003
   14368:	42001c00 	.word	0x42001c00
   1436c:	200047e0 	.word	0x200047e0
   14370:	00028ef5 	.word	0x00028ef5
   14374:	000140d9 	.word	0x000140d9

00014378 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   14378:	b580      	push	{r7, lr}
   1437a:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1437c:	490c      	ldr	r1, [pc, #48]	; (143b0 <configure_usart_callbacks+0x38>)
   1437e:	4b0d      	ldr	r3, [pc, #52]	; (143b4 <configure_usart_callbacks+0x3c>)
   14380:	2200      	movs	r2, #0
   14382:	0018      	movs	r0, r3
   14384:	4b0c      	ldr	r3, [pc, #48]	; (143b8 <configure_usart_callbacks+0x40>)
   14386:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   14388:	490c      	ldr	r1, [pc, #48]	; (143bc <configure_usart_callbacks+0x44>)
   1438a:	4b0a      	ldr	r3, [pc, #40]	; (143b4 <configure_usart_callbacks+0x3c>)
   1438c:	2201      	movs	r2, #1
   1438e:	0018      	movs	r0, r3
   14390:	4b09      	ldr	r3, [pc, #36]	; (143b8 <configure_usart_callbacks+0x40>)
   14392:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
   14394:	4b07      	ldr	r3, [pc, #28]	; (143b4 <configure_usart_callbacks+0x3c>)
   14396:	2100      	movs	r1, #0
   14398:	0018      	movs	r0, r3
   1439a:	4b09      	ldr	r3, [pc, #36]	; (143c0 <configure_usart_callbacks+0x48>)
   1439c:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
   1439e:	4b05      	ldr	r3, [pc, #20]	; (143b4 <configure_usart_callbacks+0x3c>)
   143a0:	2101      	movs	r1, #1
   143a2:	0018      	movs	r0, r3
   143a4:	4b06      	ldr	r3, [pc, #24]	; (143c0 <configure_usart_callbacks+0x48>)
   143a6:	4798      	blx	r3
}
   143a8:	46c0      	nop			; (mov r8, r8)
   143aa:	46bd      	mov	sp, r7
   143ac:	bd80      	pop	{r7, pc}
   143ae:	46c0      	nop			; (mov r8, r8)
   143b0:	00014159 	.word	0x00014159
   143b4:	200047e0 	.word	0x200047e0
   143b8:	000292a9 	.word	0x000292a9
   143bc:	00014199 	.word	0x00014199
   143c0:	00014121 	.word	0x00014121

000143c4 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   143c4:	b590      	push	{r4, r7, lr}
   143c6:	b083      	sub	sp, #12
   143c8:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   143ca:	2300      	movs	r3, #0
   143cc:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   143ce:	4b09      	ldr	r3, [pc, #36]	; (143f4 <DistanceSensorFreeMutex+0x30>)
   143d0:	6818      	ldr	r0, [r3, #0]
   143d2:	2300      	movs	r3, #0
   143d4:	2200      	movs	r2, #0
   143d6:	2100      	movs	r1, #0
   143d8:	4c07      	ldr	r4, [pc, #28]	; (143f8 <DistanceSensorFreeMutex+0x34>)
   143da:	47a0      	blx	r4
   143dc:	0003      	movs	r3, r0
   143de:	2b01      	cmp	r3, #1
   143e0:	d002      	beq.n	143e8 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   143e2:	2314      	movs	r3, #20
   143e4:	425b      	negs	r3, r3
   143e6:	607b      	str	r3, [r7, #4]
    }
    return error;
   143e8:	687b      	ldr	r3, [r7, #4]
}
   143ea:	0018      	movs	r0, r3
   143ec:	46bd      	mov	sp, r7
   143ee:	b003      	add	sp, #12
   143f0:	bd90      	pop	{r4, r7, pc}
   143f2:	46c0      	nop			; (mov r8, r8)
   143f4:	200047dc 	.word	0x200047dc
   143f8:	0001ab9d 	.word	0x0001ab9d

000143fc <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   143fc:	b580      	push	{r7, lr}
   143fe:	b084      	sub	sp, #16
   14400:	af00      	add	r7, sp, #0
   14402:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14404:	2300      	movs	r3, #0
   14406:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14408:	4b08      	ldr	r3, [pc, #32]	; (1442c <DistanceSensorGetMutex+0x30>)
   1440a:	681b      	ldr	r3, [r3, #0]
   1440c:	687a      	ldr	r2, [r7, #4]
   1440e:	0011      	movs	r1, r2
   14410:	0018      	movs	r0, r3
   14412:	4b07      	ldr	r3, [pc, #28]	; (14430 <DistanceSensorGetMutex+0x34>)
   14414:	4798      	blx	r3
   14416:	0003      	movs	r3, r0
   14418:	2b01      	cmp	r3, #1
   1441a:	d002      	beq.n	14422 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   1441c:	231d      	movs	r3, #29
   1441e:	425b      	negs	r3, r3
   14420:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14422:	68fb      	ldr	r3, [r7, #12]
   14424:	0018      	movs	r0, r3
   14426:	46bd      	mov	sp, r7
   14428:	b004      	add	sp, #16
   1442a:	bd80      	pop	{r7, pc}
   1442c:	200047dc 	.word	0x200047dc
   14430:	0001b8ad 	.word	0x0001b8ad

00014434 <system_interrupt_enable>:
{
   14434:	b580      	push	{r7, lr}
   14436:	b082      	sub	sp, #8
   14438:	af00      	add	r7, sp, #0
   1443a:	0002      	movs	r2, r0
   1443c:	1dfb      	adds	r3, r7, #7
   1443e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14440:	4b06      	ldr	r3, [pc, #24]	; (1445c <system_interrupt_enable+0x28>)
   14442:	1dfa      	adds	r2, r7, #7
   14444:	7812      	ldrb	r2, [r2, #0]
   14446:	0011      	movs	r1, r2
   14448:	221f      	movs	r2, #31
   1444a:	400a      	ands	r2, r1
   1444c:	2101      	movs	r1, #1
   1444e:	4091      	lsls	r1, r2
   14450:	000a      	movs	r2, r1
   14452:	601a      	str	r2, [r3, #0]
}
   14454:	46c0      	nop			; (mov r8, r8)
   14456:	46bd      	mov	sp, r7
   14458:	b002      	add	sp, #8
   1445a:	bd80      	pop	{r7, pc}
   1445c:	e000e100 	.word	0xe000e100

00014460 <i2c_master_is_syncing>:
{
   14460:	b580      	push	{r7, lr}
   14462:	b084      	sub	sp, #16
   14464:	af00      	add	r7, sp, #0
   14466:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14468:	687b      	ldr	r3, [r7, #4]
   1446a:	681b      	ldr	r3, [r3, #0]
   1446c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1446e:	68fb      	ldr	r3, [r7, #12]
   14470:	69db      	ldr	r3, [r3, #28]
   14472:	2207      	movs	r2, #7
   14474:	4013      	ands	r3, r2
   14476:	1e5a      	subs	r2, r3, #1
   14478:	4193      	sbcs	r3, r2
   1447a:	b2db      	uxtb	r3, r3
}
   1447c:	0018      	movs	r0, r3
   1447e:	46bd      	mov	sp, r7
   14480:	b004      	add	sp, #16
   14482:	bd80      	pop	{r7, pc}

00014484 <_i2c_master_wait_for_sync>:
{
   14484:	b580      	push	{r7, lr}
   14486:	b082      	sub	sp, #8
   14488:	af00      	add	r7, sp, #0
   1448a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1448c:	46c0      	nop			; (mov r8, r8)
   1448e:	687b      	ldr	r3, [r7, #4]
   14490:	0018      	movs	r0, r3
   14492:	4b04      	ldr	r3, [pc, #16]	; (144a4 <_i2c_master_wait_for_sync+0x20>)
   14494:	4798      	blx	r3
   14496:	1e03      	subs	r3, r0, #0
   14498:	d1f9      	bne.n	1448e <_i2c_master_wait_for_sync+0xa>
}
   1449a:	46c0      	nop			; (mov r8, r8)
   1449c:	46bd      	mov	sp, r7
   1449e:	b002      	add	sp, #8
   144a0:	bd80      	pop	{r7, pc}
   144a2:	46c0      	nop			; (mov r8, r8)
   144a4:	00014461 	.word	0x00014461

000144a8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   144a8:	b580      	push	{r7, lr}
   144aa:	b082      	sub	sp, #8
   144ac:	af00      	add	r7, sp, #0
   144ae:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   144b0:	687b      	ldr	r3, [r7, #4]
   144b2:	2264      	movs	r2, #100	; 0x64
   144b4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   144b6:	687b      	ldr	r3, [r7, #4]
   144b8:	4a1b      	ldr	r2, [pc, #108]	; (14528 <i2c_master_get_config_defaults+0x80>)
   144ba:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   144bc:	687b      	ldr	r3, [r7, #4]
   144be:	2200      	movs	r2, #0
   144c0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	2200      	movs	r2, #0
   144c6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   144c8:	687b      	ldr	r3, [r7, #4]
   144ca:	2200      	movs	r2, #0
   144cc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   144ce:	687b      	ldr	r3, [r7, #4]
   144d0:	2280      	movs	r2, #128	; 0x80
   144d2:	0392      	lsls	r2, r2, #14
   144d4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   144d6:	687b      	ldr	r3, [r7, #4]
   144d8:	2201      	movs	r2, #1
   144da:	4252      	negs	r2, r2
   144dc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   144de:	687b      	ldr	r3, [r7, #4]
   144e0:	2201      	movs	r2, #1
   144e2:	4252      	negs	r2, r2
   144e4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   144e6:	687b      	ldr	r3, [r7, #4]
   144e8:	2200      	movs	r2, #0
   144ea:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   144ec:	687b      	ldr	r3, [r7, #4]
   144ee:	2200      	movs	r2, #0
   144f0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   144f2:	687b      	ldr	r3, [r7, #4]
   144f4:	2224      	movs	r2, #36	; 0x24
   144f6:	2100      	movs	r1, #0
   144f8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   144fa:	687b      	ldr	r3, [r7, #4]
   144fc:	2200      	movs	r2, #0
   144fe:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14500:	687b      	ldr	r3, [r7, #4]
   14502:	222c      	movs	r2, #44	; 0x2c
   14504:	2100      	movs	r1, #0
   14506:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14508:	687b      	ldr	r3, [r7, #4]
   1450a:	222d      	movs	r2, #45	; 0x2d
   1450c:	2100      	movs	r1, #0
   1450e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14510:	687b      	ldr	r3, [r7, #4]
   14512:	222e      	movs	r2, #46	; 0x2e
   14514:	2100      	movs	r1, #0
   14516:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14518:	687b      	ldr	r3, [r7, #4]
   1451a:	22d7      	movs	r2, #215	; 0xd7
   1451c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1451e:	46c0      	nop			; (mov r8, r8)
   14520:	46bd      	mov	sp, r7
   14522:	b002      	add	sp, #8
   14524:	bd80      	pop	{r7, pc}
   14526:	46c0      	nop			; (mov r8, r8)
   14528:	00000d48 	.word	0x00000d48

0001452c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   1452c:	b580      	push	{r7, lr}
   1452e:	b084      	sub	sp, #16
   14530:	af00      	add	r7, sp, #0
   14532:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14534:	687b      	ldr	r3, [r7, #4]
   14536:	681b      	ldr	r3, [r3, #0]
   14538:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   1453a:	2300      	movs	r3, #0
   1453c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1453e:	687b      	ldr	r3, [r7, #4]
   14540:	0018      	movs	r0, r3
   14542:	4b14      	ldr	r3, [pc, #80]	; (14594 <i2c_master_enable+0x68>)
   14544:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14546:	68bb      	ldr	r3, [r7, #8]
   14548:	681b      	ldr	r3, [r3, #0]
   1454a:	2202      	movs	r2, #2
   1454c:	431a      	orrs	r2, r3
   1454e:	68bb      	ldr	r3, [r7, #8]
   14550:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14552:	687b      	ldr	r3, [r7, #4]
   14554:	681b      	ldr	r3, [r3, #0]
   14556:	0018      	movs	r0, r3
   14558:	4b0f      	ldr	r3, [pc, #60]	; (14598 <i2c_master_enable+0x6c>)
   1455a:	4798      	blx	r3
   1455c:	0003      	movs	r3, r0
   1455e:	0018      	movs	r0, r3
   14560:	4b0e      	ldr	r3, [pc, #56]	; (1459c <i2c_master_enable+0x70>)
   14562:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14564:	e00c      	b.n	14580 <i2c_master_enable+0x54>
		timeout_counter++;
   14566:	68fb      	ldr	r3, [r7, #12]
   14568:	3301      	adds	r3, #1
   1456a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1456c:	687b      	ldr	r3, [r7, #4]
   1456e:	88db      	ldrh	r3, [r3, #6]
   14570:	001a      	movs	r2, r3
   14572:	68fb      	ldr	r3, [r7, #12]
   14574:	429a      	cmp	r2, r3
   14576:	d803      	bhi.n	14580 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14578:	68bb      	ldr	r3, [r7, #8]
   1457a:	2210      	movs	r2, #16
   1457c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   1457e:	e006      	b.n	1458e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14580:	68bb      	ldr	r3, [r7, #8]
   14582:	8b5b      	ldrh	r3, [r3, #26]
   14584:	b29b      	uxth	r3, r3
   14586:	001a      	movs	r2, r3
   14588:	2310      	movs	r3, #16
   1458a:	4013      	ands	r3, r2
   1458c:	d0eb      	beq.n	14566 <i2c_master_enable+0x3a>
		}
	}
}
   1458e:	46bd      	mov	sp, r7
   14590:	b004      	add	sp, #16
   14592:	bd80      	pop	{r7, pc}
   14594:	00014485 	.word	0x00014485
   14598:	00027a91 	.word	0x00027a91
   1459c:	00014435 	.word	0x00014435

000145a0 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   145a0:	b580      	push	{r7, lr}
   145a2:	b082      	sub	sp, #8
   145a4:	af00      	add	r7, sp, #0
   145a6:	6078      	str	r0, [r7, #4]
   145a8:	000a      	movs	r2, r1
   145aa:	1cfb      	adds	r3, r7, #3
   145ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   145ae:	687b      	ldr	r3, [r7, #4]
   145b0:	7e5b      	ldrb	r3, [r3, #25]
   145b2:	b2db      	uxtb	r3, r3
   145b4:	b25a      	sxtb	r2, r3
   145b6:	1cfb      	adds	r3, r7, #3
   145b8:	781b      	ldrb	r3, [r3, #0]
   145ba:	2101      	movs	r1, #1
   145bc:	4099      	lsls	r1, r3
   145be:	000b      	movs	r3, r1
   145c0:	b25b      	sxtb	r3, r3
   145c2:	4313      	orrs	r3, r2
   145c4:	b25b      	sxtb	r3, r3
   145c6:	b2da      	uxtb	r2, r3
   145c8:	687b      	ldr	r3, [r7, #4]
   145ca:	765a      	strb	r2, [r3, #25]
}
   145cc:	46c0      	nop			; (mov r8, r8)
   145ce:	46bd      	mov	sp, r7
   145d0:	b002      	add	sp, #8
   145d2:	bd80      	pop	{r7, pc}

000145d4 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   145d4:	b590      	push	{r4, r7, lr}
   145d6:	b091      	sub	sp, #68	; 0x44
   145d8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   145da:	2300      	movs	r3, #0
   145dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   145de:	233a      	movs	r3, #58	; 0x3a
   145e0:	18fb      	adds	r3, r7, r3
   145e2:	2200      	movs	r2, #0
   145e4:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   145e6:	1d3b      	adds	r3, r7, #4
   145e8:	0018      	movs	r0, r3
   145ea:	4b21      	ldr	r3, [pc, #132]	; (14670 <I2cDriverConfigureSensorBus+0x9c>)
   145ec:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   145ee:	1d3b      	adds	r3, r7, #4
   145f0:	4a20      	ldr	r2, [pc, #128]	; (14674 <I2cDriverConfigureSensorBus+0xa0>)
   145f2:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   145f4:	1d3b      	adds	r3, r7, #4
   145f6:	4a20      	ldr	r2, [pc, #128]	; (14678 <I2cDriverConfigureSensorBus+0xa4>)
   145f8:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   145fa:	1d3b      	adds	r3, r7, #4
   145fc:	22fa      	movs	r2, #250	; 0xfa
   145fe:	0092      	lsls	r2, r2, #2
   14600:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14602:	233b      	movs	r3, #59	; 0x3b
   14604:	18fb      	adds	r3, r7, r3
   14606:	2203      	movs	r2, #3
   14608:	701a      	strb	r2, [r3, #0]
   1460a:	e01e      	b.n	1464a <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   1460c:	233a      	movs	r3, #58	; 0x3a
   1460e:	18fc      	adds	r4, r7, r3
   14610:	1d3a      	adds	r2, r7, #4
   14612:	491a      	ldr	r1, [pc, #104]	; (1467c <I2cDriverConfigureSensorBus+0xa8>)
   14614:	4b1a      	ldr	r3, [pc, #104]	; (14680 <I2cDriverConfigureSensorBus+0xac>)
   14616:	0018      	movs	r0, r3
   14618:	4b1a      	ldr	r3, [pc, #104]	; (14684 <I2cDriverConfigureSensorBus+0xb0>)
   1461a:	4798      	blx	r3
   1461c:	0003      	movs	r3, r0
   1461e:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14620:	233a      	movs	r3, #58	; 0x3a
   14622:	18fb      	adds	r3, r7, r3
   14624:	781b      	ldrb	r3, [r3, #0]
   14626:	2b00      	cmp	r3, #0
   14628:	d104      	bne.n	14634 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   1462a:	233a      	movs	r3, #58	; 0x3a
   1462c:	18fb      	adds	r3, r7, r3
   1462e:	781b      	ldrb	r3, [r3, #0]
   14630:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14632:	e00f      	b.n	14654 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14634:	4b12      	ldr	r3, [pc, #72]	; (14680 <I2cDriverConfigureSensorBus+0xac>)
   14636:	0018      	movs	r0, r3
   14638:	4b13      	ldr	r3, [pc, #76]	; (14688 <I2cDriverConfigureSensorBus+0xb4>)
   1463a:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1463c:	233b      	movs	r3, #59	; 0x3b
   1463e:	18fb      	adds	r3, r7, r3
   14640:	781a      	ldrb	r2, [r3, #0]
   14642:	233b      	movs	r3, #59	; 0x3b
   14644:	18fb      	adds	r3, r7, r3
   14646:	3a01      	subs	r2, #1
   14648:	701a      	strb	r2, [r3, #0]
   1464a:	233b      	movs	r3, #59	; 0x3b
   1464c:	18fb      	adds	r3, r7, r3
   1464e:	781b      	ldrb	r3, [r3, #0]
   14650:	2b00      	cmp	r3, #0
   14652:	d1db      	bne.n	1460c <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14656:	2b00      	cmp	r3, #0
   14658:	d104      	bne.n	14664 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   1465a:	4b09      	ldr	r3, [pc, #36]	; (14680 <I2cDriverConfigureSensorBus+0xac>)
   1465c:	0018      	movs	r0, r3
   1465e:	4b0b      	ldr	r3, [pc, #44]	; (1468c <I2cDriverConfigureSensorBus+0xb8>)
   14660:	4798      	blx	r3
   14662:	e000      	b.n	14666 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14664:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14668:	0018      	movs	r0, r3
   1466a:	46bd      	mov	sp, r7
   1466c:	b011      	add	sp, #68	; 0x44
   1466e:	bd90      	pop	{r4, r7, pc}
   14670:	000144a9 	.word	0x000144a9
   14674:	00080002 	.word	0x00080002
   14678:	00090002 	.word	0x00090002
   1467c:	42000800 	.word	0x42000800
   14680:	20004818 	.word	0x20004818
   14684:	00017f91 	.word	0x00017f91
   14688:	000180c5 	.word	0x000180c5
   1468c:	0001452d 	.word	0x0001452d

00014690 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14690:	b580      	push	{r7, lr}
   14692:	b084      	sub	sp, #16
   14694:	af00      	add	r7, sp, #0
   14696:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14698:	4b0e      	ldr	r3, [pc, #56]	; (146d4 <I2cSensorsTxComplete+0x44>)
   1469a:	2200      	movs	r2, #0
   1469c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1469e:	4b0d      	ldr	r3, [pc, #52]	; (146d4 <I2cSensorsTxComplete+0x44>)
   146a0:	2201      	movs	r2, #1
   146a2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   146a4:	2300      	movs	r3, #0
   146a6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   146a8:	4b0b      	ldr	r3, [pc, #44]	; (146d8 <I2cSensorsTxComplete+0x48>)
   146aa:	681b      	ldr	r3, [r3, #0]
   146ac:	220c      	movs	r2, #12
   146ae:	18ba      	adds	r2, r7, r2
   146b0:	0011      	movs	r1, r2
   146b2:	0018      	movs	r0, r3
   146b4:	4b09      	ldr	r3, [pc, #36]	; (146dc <I2cSensorsTxComplete+0x4c>)
   146b6:	4798      	blx	r3
    sensorTransmitError = false;
   146b8:	4b09      	ldr	r3, [pc, #36]	; (146e0 <I2cSensorsTxComplete+0x50>)
   146ba:	2200      	movs	r2, #0
   146bc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   146be:	68fb      	ldr	r3, [r7, #12]
   146c0:	2b00      	cmp	r3, #0
   146c2:	d003      	beq.n	146cc <I2cSensorsTxComplete+0x3c>
   146c4:	4b07      	ldr	r3, [pc, #28]	; (146e4 <I2cSensorsTxComplete+0x54>)
   146c6:	2280      	movs	r2, #128	; 0x80
   146c8:	0552      	lsls	r2, r2, #21
   146ca:	601a      	str	r2, [r3, #0]
}
   146cc:	46c0      	nop			; (mov r8, r8)
   146ce:	46bd      	mov	sp, r7
   146d0:	b004      	add	sp, #16
   146d2:	bd80      	pop	{r7, pc}
   146d4:	20000608 	.word	0x20000608
   146d8:	20004840 	.word	0x20004840
   146dc:	0001b225 	.word	0x0001b225
   146e0:	20000604 	.word	0x20000604
   146e4:	e000ed04 	.word	0xe000ed04

000146e8 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   146e8:	b580      	push	{r7, lr}
   146ea:	b084      	sub	sp, #16
   146ec:	af00      	add	r7, sp, #0
   146ee:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   146f0:	4b0e      	ldr	r3, [pc, #56]	; (1472c <I2cSensorsRxComplete+0x44>)
   146f2:	2200      	movs	r2, #0
   146f4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   146f6:	4b0d      	ldr	r3, [pc, #52]	; (1472c <I2cSensorsRxComplete+0x44>)
   146f8:	2201      	movs	r2, #1
   146fa:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   146fc:	2300      	movs	r3, #0
   146fe:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14700:	4b0b      	ldr	r3, [pc, #44]	; (14730 <I2cSensorsRxComplete+0x48>)
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	220c      	movs	r2, #12
   14706:	18ba      	adds	r2, r7, r2
   14708:	0011      	movs	r1, r2
   1470a:	0018      	movs	r0, r3
   1470c:	4b09      	ldr	r3, [pc, #36]	; (14734 <I2cSensorsRxComplete+0x4c>)
   1470e:	4798      	blx	r3
    sensorTransmitError = false;
   14710:	4b09      	ldr	r3, [pc, #36]	; (14738 <I2cSensorsRxComplete+0x50>)
   14712:	2200      	movs	r2, #0
   14714:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14716:	68fb      	ldr	r3, [r7, #12]
   14718:	2b00      	cmp	r3, #0
   1471a:	d003      	beq.n	14724 <I2cSensorsRxComplete+0x3c>
   1471c:	4b07      	ldr	r3, [pc, #28]	; (1473c <I2cSensorsRxComplete+0x54>)
   1471e:	2280      	movs	r2, #128	; 0x80
   14720:	0552      	lsls	r2, r2, #21
   14722:	601a      	str	r2, [r3, #0]
}
   14724:	46c0      	nop			; (mov r8, r8)
   14726:	46bd      	mov	sp, r7
   14728:	b004      	add	sp, #16
   1472a:	bd80      	pop	{r7, pc}
   1472c:	20000608 	.word	0x20000608
   14730:	20004840 	.word	0x20004840
   14734:	0001b225 	.word	0x0001b225
   14738:	20000604 	.word	0x20000604
   1473c:	e000ed04 	.word	0xe000ed04

00014740 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14740:	b580      	push	{r7, lr}
   14742:	b084      	sub	sp, #16
   14744:	af00      	add	r7, sp, #0
   14746:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14748:	4b0e      	ldr	r3, [pc, #56]	; (14784 <I2cSensorsError+0x44>)
   1474a:	2200      	movs	r2, #0
   1474c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   1474e:	4b0d      	ldr	r3, [pc, #52]	; (14784 <I2cSensorsError+0x44>)
   14750:	2201      	movs	r2, #1
   14752:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14754:	2300      	movs	r3, #0
   14756:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14758:	4b0b      	ldr	r3, [pc, #44]	; (14788 <I2cSensorsError+0x48>)
   1475a:	681b      	ldr	r3, [r3, #0]
   1475c:	220c      	movs	r2, #12
   1475e:	18ba      	adds	r2, r7, r2
   14760:	0011      	movs	r1, r2
   14762:	0018      	movs	r0, r3
   14764:	4b09      	ldr	r3, [pc, #36]	; (1478c <I2cSensorsError+0x4c>)
   14766:	4798      	blx	r3
    sensorTransmitError = true;
   14768:	4b09      	ldr	r3, [pc, #36]	; (14790 <I2cSensorsError+0x50>)
   1476a:	2201      	movs	r2, #1
   1476c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1476e:	68fb      	ldr	r3, [r7, #12]
   14770:	2b00      	cmp	r3, #0
   14772:	d003      	beq.n	1477c <I2cSensorsError+0x3c>
   14774:	4b07      	ldr	r3, [pc, #28]	; (14794 <I2cSensorsError+0x54>)
   14776:	2280      	movs	r2, #128	; 0x80
   14778:	0552      	lsls	r2, r2, #21
   1477a:	601a      	str	r2, [r3, #0]
}
   1477c:	46c0      	nop			; (mov r8, r8)
   1477e:	46bd      	mov	sp, r7
   14780:	b004      	add	sp, #16
   14782:	bd80      	pop	{r7, pc}
   14784:	20000608 	.word	0x20000608
   14788:	20004840 	.word	0x20004840
   1478c:	0001b225 	.word	0x0001b225
   14790:	20000604 	.word	0x20000604
   14794:	e000ed04 	.word	0xe000ed04

00014798 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14798:	b580      	push	{r7, lr}
   1479a:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1479c:	4911      	ldr	r1, [pc, #68]	; (147e4 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   1479e:	4b12      	ldr	r3, [pc, #72]	; (147e8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147a0:	2200      	movs	r2, #0
   147a2:	0018      	movs	r0, r3
   147a4:	4b11      	ldr	r3, [pc, #68]	; (147ec <I2cDriverRegisterSensorBusCallbacks+0x54>)
   147a6:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   147a8:	4b0f      	ldr	r3, [pc, #60]	; (147e8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147aa:	2100      	movs	r1, #0
   147ac:	0018      	movs	r0, r3
   147ae:	4b10      	ldr	r3, [pc, #64]	; (147f0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   147b0:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   147b2:	4910      	ldr	r1, [pc, #64]	; (147f4 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   147b4:	4b0c      	ldr	r3, [pc, #48]	; (147e8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147b6:	2201      	movs	r2, #1
   147b8:	0018      	movs	r0, r3
   147ba:	4b0c      	ldr	r3, [pc, #48]	; (147ec <I2cDriverRegisterSensorBusCallbacks+0x54>)
   147bc:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   147be:	4b0a      	ldr	r3, [pc, #40]	; (147e8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147c0:	2101      	movs	r1, #1
   147c2:	0018      	movs	r0, r3
   147c4:	4b0a      	ldr	r3, [pc, #40]	; (147f0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   147c6:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   147c8:	490b      	ldr	r1, [pc, #44]	; (147f8 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   147ca:	4b07      	ldr	r3, [pc, #28]	; (147e8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147cc:	2202      	movs	r2, #2
   147ce:	0018      	movs	r0, r3
   147d0:	4b06      	ldr	r3, [pc, #24]	; (147ec <I2cDriverRegisterSensorBusCallbacks+0x54>)
   147d2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   147d4:	4b04      	ldr	r3, [pc, #16]	; (147e8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   147d6:	2102      	movs	r1, #2
   147d8:	0018      	movs	r0, r3
   147da:	4b05      	ldr	r3, [pc, #20]	; (147f0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   147dc:	4798      	blx	r3
}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	46bd      	mov	sp, r7
   147e2:	bd80      	pop	{r7, pc}
   147e4:	00014691 	.word	0x00014691
   147e8:	20004818 	.word	0x20004818
   147ec:	000132b1 	.word	0x000132b1
   147f0:	000145a1 	.word	0x000145a1
   147f4:	000146e9 	.word	0x000146e9
   147f8:	00014741 	.word	0x00014741

000147fc <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   147fc:	b580      	push	{r7, lr}
   147fe:	b082      	sub	sp, #8
   14800:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14802:	2300      	movs	r3, #0
   14804:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14806:	4b14      	ldr	r3, [pc, #80]	; (14858 <I2cInitializeDriver+0x5c>)
   14808:	4798      	blx	r3
   1480a:	0003      	movs	r3, r0
   1480c:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	2b00      	cmp	r3, #0
   14812:	d11a      	bne.n	1484a <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14814:	4b11      	ldr	r3, [pc, #68]	; (1485c <I2cInitializeDriver+0x60>)
   14816:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14818:	2001      	movs	r0, #1
   1481a:	4b11      	ldr	r3, [pc, #68]	; (14860 <I2cInitializeDriver+0x64>)
   1481c:	4798      	blx	r3
   1481e:	0002      	movs	r2, r0
   14820:	4b10      	ldr	r3, [pc, #64]	; (14864 <I2cInitializeDriver+0x68>)
   14822:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14824:	2203      	movs	r2, #3
   14826:	2100      	movs	r1, #0
   14828:	2001      	movs	r0, #1
   1482a:	4b0f      	ldr	r3, [pc, #60]	; (14868 <I2cInitializeDriver+0x6c>)
   1482c:	4798      	blx	r3
   1482e:	0002      	movs	r2, r0
   14830:	4b0e      	ldr	r3, [pc, #56]	; (1486c <I2cInitializeDriver+0x70>)
   14832:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14834:	4b0b      	ldr	r3, [pc, #44]	; (14864 <I2cInitializeDriver+0x68>)
   14836:	681b      	ldr	r3, [r3, #0]
   14838:	2b00      	cmp	r3, #0
   1483a:	d003      	beq.n	14844 <I2cInitializeDriver+0x48>
   1483c:	4b0b      	ldr	r3, [pc, #44]	; (1486c <I2cInitializeDriver+0x70>)
   1483e:	681b      	ldr	r3, [r3, #0]
   14840:	2b00      	cmp	r3, #0
   14842:	d103      	bne.n	1484c <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14844:	2306      	movs	r3, #6
   14846:	607b      	str	r3, [r7, #4]
        goto exit;
   14848:	e000      	b.n	1484c <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   1484a:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1484c:	687b      	ldr	r3, [r7, #4]
}
   1484e:	0018      	movs	r0, r3
   14850:	46bd      	mov	sp, r7
   14852:	b002      	add	sp, #8
   14854:	bd80      	pop	{r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	000145d5 	.word	0x000145d5
   1485c:	00014799 	.word	0x00014799
   14860:	0001ab5d 	.word	0x0001ab5d
   14864:	20004814 	.word	0x20004814
   14868:	0001a8f5 	.word	0x0001a8f5
   1486c:	20004840 	.word	0x20004840

00014870 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14870:	b590      	push	{r4, r7, lr}
   14872:	b085      	sub	sp, #20
   14874:	af00      	add	r7, sp, #0
   14876:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14878:	2300      	movs	r3, #0
   1487a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1487c:	687b      	ldr	r3, [r7, #4]
   1487e:	2b00      	cmp	r3, #0
   14880:	d003      	beq.n	1488a <I2cWriteData+0x1a>
   14882:	687b      	ldr	r3, [r7, #4]
   14884:	685b      	ldr	r3, [r3, #4]
   14886:	2b00      	cmp	r3, #0
   14888:	d103      	bne.n	14892 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1488a:	2308      	movs	r3, #8
   1488c:	425b      	negs	r3, r3
   1488e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14890:	e01f      	b.n	148d2 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14892:	687b      	ldr	r3, [r7, #4]
   14894:	781b      	ldrb	r3, [r3, #0]
   14896:	b29a      	uxth	r2, r3
   14898:	4b10      	ldr	r3, [pc, #64]	; (148dc <I2cWriteData+0x6c>)
   1489a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   1489c:	687b      	ldr	r3, [r7, #4]
   1489e:	685a      	ldr	r2, [r3, #4]
   148a0:	4b0e      	ldr	r3, [pc, #56]	; (148dc <I2cWriteData+0x6c>)
   148a2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   148a4:	687b      	ldr	r3, [r7, #4]
   148a6:	89da      	ldrh	r2, [r3, #14]
   148a8:	4b0c      	ldr	r3, [pc, #48]	; (148dc <I2cWriteData+0x6c>)
   148aa:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   148ac:	230b      	movs	r3, #11
   148ae:	18fc      	adds	r4, r7, r3
   148b0:	4a0a      	ldr	r2, [pc, #40]	; (148dc <I2cWriteData+0x6c>)
   148b2:	4b0b      	ldr	r3, [pc, #44]	; (148e0 <I2cWriteData+0x70>)
   148b4:	0011      	movs	r1, r2
   148b6:	0018      	movs	r0, r3
   148b8:	4b0a      	ldr	r3, [pc, #40]	; (148e4 <I2cWriteData+0x74>)
   148ba:	4798      	blx	r3
   148bc:	0003      	movs	r3, r0
   148be:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   148c0:	230b      	movs	r3, #11
   148c2:	18fb      	adds	r3, r7, r3
   148c4:	781b      	ldrb	r3, [r3, #0]
   148c6:	2b00      	cmp	r3, #0
   148c8:	d003      	beq.n	148d2 <I2cWriteData+0x62>
        error = ERROR_IO;
   148ca:	2306      	movs	r3, #6
   148cc:	425b      	negs	r3, r3
   148ce:	60fb      	str	r3, [r7, #12]
        goto exit;
   148d0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   148d2:	68fb      	ldr	r3, [r7, #12]
}
   148d4:	0018      	movs	r0, r3
   148d6:	46bd      	mov	sp, r7
   148d8:	b005      	add	sp, #20
   148da:	bd90      	pop	{r4, r7, pc}
   148dc:	20004844 	.word	0x20004844
   148e0:	20004818 	.word	0x20004818
   148e4:	00013535 	.word	0x00013535

000148e8 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   148e8:	b590      	push	{r4, r7, lr}
   148ea:	b085      	sub	sp, #20
   148ec:	af00      	add	r7, sp, #0
   148ee:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   148f0:	2300      	movs	r3, #0
   148f2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   148f4:	687b      	ldr	r3, [r7, #4]
   148f6:	2b00      	cmp	r3, #0
   148f8:	d003      	beq.n	14902 <I2cReadData+0x1a>
   148fa:	687b      	ldr	r3, [r7, #4]
   148fc:	685b      	ldr	r3, [r3, #4]
   148fe:	2b00      	cmp	r3, #0
   14900:	d103      	bne.n	1490a <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14902:	2308      	movs	r3, #8
   14904:	425b      	negs	r3, r3
   14906:	60fb      	str	r3, [r7, #12]
        goto exit;
   14908:	e01f      	b.n	1494a <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   1490a:	687b      	ldr	r3, [r7, #4]
   1490c:	781b      	ldrb	r3, [r3, #0]
   1490e:	b29a      	uxth	r2, r3
   14910:	4b10      	ldr	r3, [pc, #64]	; (14954 <I2cReadData+0x6c>)
   14912:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14914:	687b      	ldr	r3, [r7, #4]
   14916:	689a      	ldr	r2, [r3, #8]
   14918:	4b0e      	ldr	r3, [pc, #56]	; (14954 <I2cReadData+0x6c>)
   1491a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   1491c:	687b      	ldr	r3, [r7, #4]
   1491e:	899a      	ldrh	r2, [r3, #12]
   14920:	4b0c      	ldr	r3, [pc, #48]	; (14954 <I2cReadData+0x6c>)
   14922:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14924:	230b      	movs	r3, #11
   14926:	18fc      	adds	r4, r7, r3
   14928:	4a0a      	ldr	r2, [pc, #40]	; (14954 <I2cReadData+0x6c>)
   1492a:	4b0b      	ldr	r3, [pc, #44]	; (14958 <I2cReadData+0x70>)
   1492c:	0011      	movs	r1, r2
   1492e:	0018      	movs	r0, r3
   14930:	4b0a      	ldr	r3, [pc, #40]	; (1495c <I2cReadData+0x74>)
   14932:	4798      	blx	r3
   14934:	0003      	movs	r3, r0
   14936:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14938:	230b      	movs	r3, #11
   1493a:	18fb      	adds	r3, r7, r3
   1493c:	781b      	ldrb	r3, [r3, #0]
   1493e:	2b00      	cmp	r3, #0
   14940:	d003      	beq.n	1494a <I2cReadData+0x62>
        error = ERROR_IO;
   14942:	2306      	movs	r3, #6
   14944:	425b      	negs	r3, r3
   14946:	60fb      	str	r3, [r7, #12]
        goto exit;
   14948:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1494a:	68fb      	ldr	r3, [r7, #12]
}
   1494c:	0018      	movs	r0, r3
   1494e:	46bd      	mov	sp, r7
   14950:	b005      	add	sp, #20
   14952:	bd90      	pop	{r4, r7, pc}
   14954:	20004844 	.word	0x20004844
   14958:	20004818 	.word	0x20004818
   1495c:	00013451 	.word	0x00013451

00014960 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14960:	b590      	push	{r4, r7, lr}
   14962:	b083      	sub	sp, #12
   14964:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14966:	2300      	movs	r3, #0
   14968:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   1496a:	4b09      	ldr	r3, [pc, #36]	; (14990 <I2cFreeMutex+0x30>)
   1496c:	6818      	ldr	r0, [r3, #0]
   1496e:	2300      	movs	r3, #0
   14970:	2200      	movs	r2, #0
   14972:	2100      	movs	r1, #0
   14974:	4c07      	ldr	r4, [pc, #28]	; (14994 <I2cFreeMutex+0x34>)
   14976:	47a0      	blx	r4
   14978:	0003      	movs	r3, r0
   1497a:	2b01      	cmp	r3, #1
   1497c:	d002      	beq.n	14984 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1497e:	2314      	movs	r3, #20
   14980:	425b      	negs	r3, r3
   14982:	607b      	str	r3, [r7, #4]
    }
    return error;
   14984:	687b      	ldr	r3, [r7, #4]
}
   14986:	0018      	movs	r0, r3
   14988:	46bd      	mov	sp, r7
   1498a:	b003      	add	sp, #12
   1498c:	bd90      	pop	{r4, r7, pc}
   1498e:	46c0      	nop			; (mov r8, r8)
   14990:	20004814 	.word	0x20004814
   14994:	0001ab9d 	.word	0x0001ab9d

00014998 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14998:	b580      	push	{r7, lr}
   1499a:	b084      	sub	sp, #16
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   149a0:	2300      	movs	r3, #0
   149a2:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   149a4:	4b08      	ldr	r3, [pc, #32]	; (149c8 <I2cGetMutex+0x30>)
   149a6:	681b      	ldr	r3, [r3, #0]
   149a8:	687a      	ldr	r2, [r7, #4]
   149aa:	0011      	movs	r1, r2
   149ac:	0018      	movs	r0, r3
   149ae:	4b07      	ldr	r3, [pc, #28]	; (149cc <I2cGetMutex+0x34>)
   149b0:	4798      	blx	r3
   149b2:	0003      	movs	r3, r0
   149b4:	2b01      	cmp	r3, #1
   149b6:	d002      	beq.n	149be <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   149b8:	231d      	movs	r3, #29
   149ba:	425b      	negs	r3, r3
   149bc:	60fb      	str	r3, [r7, #12]
    }
    return error;
   149be:	68fb      	ldr	r3, [r7, #12]
}
   149c0:	0018      	movs	r0, r3
   149c2:	46bd      	mov	sp, r7
   149c4:	b004      	add	sp, #16
   149c6:	bd80      	pop	{r7, pc}
   149c8:	20004814 	.word	0x20004814
   149cc:	0001b8ad 	.word	0x0001b8ad

000149d0 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   149d0:	b580      	push	{r7, lr}
   149d2:	b084      	sub	sp, #16
   149d4:	af00      	add	r7, sp, #0
   149d6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   149d8:	2300      	movs	r3, #0
   149da:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   149dc:	4b04      	ldr	r3, [pc, #16]	; (149f0 <I2cGetSemaphoreHandle+0x20>)
   149de:	681a      	ldr	r2, [r3, #0]
   149e0:	687b      	ldr	r3, [r7, #4]
   149e2:	601a      	str	r2, [r3, #0]
    return error;
   149e4:	68fb      	ldr	r3, [r7, #12]
}
   149e6:	0018      	movs	r0, r3
   149e8:	46bd      	mov	sp, r7
   149ea:	b004      	add	sp, #16
   149ec:	bd80      	pop	{r7, pc}
   149ee:	46c0      	nop			; (mov r8, r8)
   149f0:	20004840 	.word	0x20004840

000149f4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   149f4:	b580      	push	{r7, lr}
   149f6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   149f8:	4b02      	ldr	r3, [pc, #8]	; (14a04 <I2cGetTaskErrorStatus+0x10>)
   149fa:	781b      	ldrb	r3, [r3, #0]
}
   149fc:	0018      	movs	r0, r3
   149fe:	46bd      	mov	sp, r7
   14a00:	bd80      	pop	{r7, pc}
   14a02:	46c0      	nop			; (mov r8, r8)
   14a04:	20000604 	.word	0x20000604

00014a08 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14a08:	b580      	push	{r7, lr}
   14a0a:	b082      	sub	sp, #8
   14a0c:	af00      	add	r7, sp, #0
   14a0e:	0002      	movs	r2, r0
   14a10:	1dfb      	adds	r3, r7, #7
   14a12:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14a14:	4b03      	ldr	r3, [pc, #12]	; (14a24 <I2cSetTaskErrorStatus+0x1c>)
   14a16:	1dfa      	adds	r2, r7, #7
   14a18:	7812      	ldrb	r2, [r2, #0]
   14a1a:	701a      	strb	r2, [r3, #0]
}
   14a1c:	46c0      	nop			; (mov r8, r8)
   14a1e:	46bd      	mov	sp, r7
   14a20:	b002      	add	sp, #8
   14a22:	bd80      	pop	{r7, pc}
   14a24:	20000604 	.word	0x20000604

00014a28 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14a28:	b580      	push	{r7, lr}
   14a2a:	b084      	sub	sp, #16
   14a2c:	af00      	add	r7, sp, #0
   14a2e:	6078      	str	r0, [r7, #4]
   14a30:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14a32:	2300      	movs	r3, #0
   14a34:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14a36:	2300      	movs	r3, #0
   14a38:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14a3a:	2396      	movs	r3, #150	; 0x96
   14a3c:	005b      	lsls	r3, r3, #1
   14a3e:	0018      	movs	r0, r3
   14a40:	4b28      	ldr	r3, [pc, #160]	; (14ae4 <I2cWriteDataWait+0xbc>)
   14a42:	4798      	blx	r3
   14a44:	0003      	movs	r3, r0
   14a46:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14a48:	68fb      	ldr	r3, [r7, #12]
   14a4a:	2b00      	cmp	r3, #0
   14a4c:	d138      	bne.n	14ac0 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14a4e:	2308      	movs	r3, #8
   14a50:	18fb      	adds	r3, r7, r3
   14a52:	0018      	movs	r0, r3
   14a54:	4b24      	ldr	r3, [pc, #144]	; (14ae8 <I2cWriteDataWait+0xc0>)
   14a56:	4798      	blx	r3
   14a58:	0003      	movs	r3, r0
   14a5a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14a5c:	68fb      	ldr	r3, [r7, #12]
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d130      	bne.n	14ac4 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	0018      	movs	r0, r3
   14a66:	4b21      	ldr	r3, [pc, #132]	; (14aec <I2cWriteDataWait+0xc4>)
   14a68:	4798      	blx	r3
   14a6a:	0003      	movs	r3, r0
   14a6c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14a6e:	68fb      	ldr	r3, [r7, #12]
   14a70:	2b00      	cmp	r3, #0
   14a72:	d12a      	bne.n	14aca <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14a74:	68bb      	ldr	r3, [r7, #8]
   14a76:	683a      	ldr	r2, [r7, #0]
   14a78:	0011      	movs	r1, r2
   14a7a:	0018      	movs	r0, r3
   14a7c:	4b1c      	ldr	r3, [pc, #112]	; (14af0 <I2cWriteDataWait+0xc8>)
   14a7e:	4798      	blx	r3
   14a80:	0003      	movs	r3, r0
   14a82:	2b01      	cmp	r3, #1
   14a84:	d111      	bne.n	14aaa <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14a86:	4b1b      	ldr	r3, [pc, #108]	; (14af4 <I2cWriteDataWait+0xcc>)
   14a88:	4798      	blx	r3
   14a8a:	1e03      	subs	r3, r0, #0
   14a8c:	d011      	beq.n	14ab2 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14a8e:	2000      	movs	r0, #0
   14a90:	4b19      	ldr	r3, [pc, #100]	; (14af8 <I2cWriteDataWait+0xd0>)
   14a92:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14a94:	68fb      	ldr	r3, [r7, #12]
   14a96:	2b00      	cmp	r3, #0
   14a98:	d003      	beq.n	14aa2 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14a9a:	2321      	movs	r3, #33	; 0x21
   14a9c:	425b      	negs	r3, r3
   14a9e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14aa0:	e014      	b.n	14acc <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14aa2:	2303      	movs	r3, #3
   14aa4:	425b      	negs	r3, r3
   14aa6:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14aa8:	e010      	b.n	14acc <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14aaa:	2303      	movs	r3, #3
   14aac:	425b      	negs	r3, r3
   14aae:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14ab0:	e00c      	b.n	14acc <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14ab2:	4b12      	ldr	r3, [pc, #72]	; (14afc <I2cWriteDataWait+0xd4>)
   14ab4:	4798      	blx	r3
   14ab6:	0002      	movs	r2, r0
   14ab8:	68fb      	ldr	r3, [r7, #12]
   14aba:	4313      	orrs	r3, r2
   14abc:	60fb      	str	r3, [r7, #12]
   14abe:	e002      	b.n	14ac6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14ac0:	46c0      	nop			; (mov r8, r8)
   14ac2:	e000      	b.n	14ac6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14ac4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14ac6:	68fb      	ldr	r3, [r7, #12]
   14ac8:	e007      	b.n	14ada <I2cWriteDataWait+0xb2>
        goto exitError0;
   14aca:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14acc:	4b0b      	ldr	r3, [pc, #44]	; (14afc <I2cWriteDataWait+0xd4>)
   14ace:	4798      	blx	r3
   14ad0:	0002      	movs	r2, r0
   14ad2:	68fb      	ldr	r3, [r7, #12]
   14ad4:	4313      	orrs	r3, r2
   14ad6:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14ad8:	68fb      	ldr	r3, [r7, #12]
}
   14ada:	0018      	movs	r0, r3
   14adc:	46bd      	mov	sp, r7
   14ade:	b004      	add	sp, #16
   14ae0:	bd80      	pop	{r7, pc}
   14ae2:	46c0      	nop			; (mov r8, r8)
   14ae4:	00014999 	.word	0x00014999
   14ae8:	000149d1 	.word	0x000149d1
   14aec:	00014871 	.word	0x00014871
   14af0:	0001b8ad 	.word	0x0001b8ad
   14af4:	000149f5 	.word	0x000149f5
   14af8:	00014a09 	.word	0x00014a09
   14afc:	00014961 	.word	0x00014961

00014b00 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14b00:	b580      	push	{r7, lr}
   14b02:	b086      	sub	sp, #24
   14b04:	af00      	add	r7, sp, #0
   14b06:	60f8      	str	r0, [r7, #12]
   14b08:	60b9      	str	r1, [r7, #8]
   14b0a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14b0c:	2300      	movs	r3, #0
   14b0e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14b10:	2300      	movs	r3, #0
   14b12:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14b14:	2396      	movs	r3, #150	; 0x96
   14b16:	005b      	lsls	r3, r3, #1
   14b18:	0018      	movs	r0, r3
   14b1a:	4b35      	ldr	r3, [pc, #212]	; (14bf0 <I2cReadDataWait+0xf0>)
   14b1c:	4798      	blx	r3
   14b1e:	0003      	movs	r3, r0
   14b20:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14b22:	697b      	ldr	r3, [r7, #20]
   14b24:	2b00      	cmp	r3, #0
   14b26:	d155      	bne.n	14bd4 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14b28:	2310      	movs	r3, #16
   14b2a:	18fb      	adds	r3, r7, r3
   14b2c:	0018      	movs	r0, r3
   14b2e:	4b31      	ldr	r3, [pc, #196]	; (14bf4 <I2cReadDataWait+0xf4>)
   14b30:	4798      	blx	r3
   14b32:	0003      	movs	r3, r0
   14b34:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14b36:	697b      	ldr	r3, [r7, #20]
   14b38:	2b00      	cmp	r3, #0
   14b3a:	d14d      	bne.n	14bd8 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14b3c:	68fb      	ldr	r3, [r7, #12]
   14b3e:	0018      	movs	r0, r3
   14b40:	4b2d      	ldr	r3, [pc, #180]	; (14bf8 <I2cReadDataWait+0xf8>)
   14b42:	4798      	blx	r3
   14b44:	0003      	movs	r3, r0
   14b46:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14b48:	697b      	ldr	r3, [r7, #20]
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d147      	bne.n	14bde <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14b4e:	693b      	ldr	r3, [r7, #16]
   14b50:	687a      	ldr	r2, [r7, #4]
   14b52:	0011      	movs	r1, r2
   14b54:	0018      	movs	r0, r3
   14b56:	4b29      	ldr	r3, [pc, #164]	; (14bfc <I2cReadDataWait+0xfc>)
   14b58:	4798      	blx	r3
   14b5a:	0003      	movs	r3, r0
   14b5c:	2b01      	cmp	r3, #1
   14b5e:	d118      	bne.n	14b92 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14b60:	4b27      	ldr	r3, [pc, #156]	; (14c00 <I2cReadDataWait+0x100>)
   14b62:	4798      	blx	r3
   14b64:	1e03      	subs	r3, r0, #0
   14b66:	d006      	beq.n	14b76 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14b68:	2000      	movs	r0, #0
   14b6a:	4b26      	ldr	r3, [pc, #152]	; (14c04 <I2cReadDataWait+0x104>)
   14b6c:	4798      	blx	r3
            error = ERROR_ABORTED;
   14b6e:	2303      	movs	r3, #3
   14b70:	425b      	negs	r3, r3
   14b72:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14b74:	e034      	b.n	14be0 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14b76:	68bb      	ldr	r3, [r7, #8]
   14b78:	0018      	movs	r0, r3
   14b7a:	4b23      	ldr	r3, [pc, #140]	; (14c08 <I2cReadDataWait+0x108>)
   14b7c:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14b7e:	68fb      	ldr	r3, [r7, #12]
   14b80:	0018      	movs	r0, r3
   14b82:	4b22      	ldr	r3, [pc, #136]	; (14c0c <I2cReadDataWait+0x10c>)
   14b84:	4798      	blx	r3
   14b86:	0003      	movs	r3, r0
   14b88:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14b8a:	697b      	ldr	r3, [r7, #20]
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d004      	beq.n	14b9a <I2cReadDataWait+0x9a>
        goto exitError0;
   14b90:	e026      	b.n	14be0 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14b92:	2303      	movs	r3, #3
   14b94:	425b      	negs	r3, r3
   14b96:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14b98:	e022      	b.n	14be0 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14b9a:	693b      	ldr	r3, [r7, #16]
   14b9c:	687a      	ldr	r2, [r7, #4]
   14b9e:	0011      	movs	r1, r2
   14ba0:	0018      	movs	r0, r3
   14ba2:	4b16      	ldr	r3, [pc, #88]	; (14bfc <I2cReadDataWait+0xfc>)
   14ba4:	4798      	blx	r3
   14ba6:	0003      	movs	r3, r0
   14ba8:	2b01      	cmp	r3, #1
   14baa:	d10a      	bne.n	14bc2 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14bac:	4b14      	ldr	r3, [pc, #80]	; (14c00 <I2cReadDataWait+0x100>)
   14bae:	4798      	blx	r3
   14bb0:	1e03      	subs	r3, r0, #0
   14bb2:	d00a      	beq.n	14bca <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14bb4:	2000      	movs	r0, #0
   14bb6:	4b13      	ldr	r3, [pc, #76]	; (14c04 <I2cReadDataWait+0x104>)
   14bb8:	4798      	blx	r3
            error = ERROR_ABORTED;
   14bba:	2303      	movs	r3, #3
   14bbc:	425b      	negs	r3, r3
   14bbe:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14bc0:	e00e      	b.n	14be0 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14bc2:	2303      	movs	r3, #3
   14bc4:	425b      	negs	r3, r3
   14bc6:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14bc8:	e00a      	b.n	14be0 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14bca:	4b11      	ldr	r3, [pc, #68]	; (14c10 <I2cReadDataWait+0x110>)
   14bcc:	4798      	blx	r3
   14bce:	0003      	movs	r3, r0
   14bd0:	617b      	str	r3, [r7, #20]
   14bd2:	e002      	b.n	14bda <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14bd4:	46c0      	nop			; (mov r8, r8)
   14bd6:	e000      	b.n	14bda <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14bd8:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14bda:	697b      	ldr	r3, [r7, #20]
   14bdc:	e003      	b.n	14be6 <I2cReadDataWait+0xe6>
        goto exitError0;
   14bde:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14be0:	4b0b      	ldr	r3, [pc, #44]	; (14c10 <I2cReadDataWait+0x110>)
   14be2:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14be4:	697b      	ldr	r3, [r7, #20]
}
   14be6:	0018      	movs	r0, r3
   14be8:	46bd      	mov	sp, r7
   14bea:	b006      	add	sp, #24
   14bec:	bd80      	pop	{r7, pc}
   14bee:	46c0      	nop			; (mov r8, r8)
   14bf0:	00014999 	.word	0x00014999
   14bf4:	000149d1 	.word	0x000149d1
   14bf8:	00014871 	.word	0x00014871
   14bfc:	0001b8ad 	.word	0x0001b8ad
   14c00:	000149f5 	.word	0x000149f5
   14c04:	00014a09 	.word	0x00014a09
   14c08:	0001c601 	.word	0x0001c601
   14c0c:	000148e9 	.word	0x000148e9
   14c10:	00014961 	.word	0x00014961

00014c14 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14c14:	b5b0      	push	{r4, r5, r7, lr}
   14c16:	b086      	sub	sp, #24
   14c18:	af00      	add	r7, sp, #0
   14c1a:	60f8      	str	r0, [r7, #12]
   14c1c:	0008      	movs	r0, r1
   14c1e:	607a      	str	r2, [r7, #4]
   14c20:	0019      	movs	r1, r3
   14c22:	230b      	movs	r3, #11
   14c24:	18fb      	adds	r3, r7, r3
   14c26:	1c02      	adds	r2, r0, #0
   14c28:	701a      	strb	r2, [r3, #0]
   14c2a:	2308      	movs	r3, #8
   14c2c:	18fb      	adds	r3, r7, r3
   14c2e:	1c0a      	adds	r2, r1, #0
   14c30:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14c32:	68fb      	ldr	r3, [r7, #12]
   14c34:	685c      	ldr	r4, [r3, #4]
   14c36:	68fb      	ldr	r3, [r7, #12]
   14c38:	6898      	ldr	r0, [r3, #8]
   14c3a:	2308      	movs	r3, #8
   14c3c:	18fb      	adds	r3, r7, r3
   14c3e:	881d      	ldrh	r5, [r3, #0]
   14c40:	687a      	ldr	r2, [r7, #4]
   14c42:	230b      	movs	r3, #11
   14c44:	18fb      	adds	r3, r7, r3
   14c46:	7819      	ldrb	r1, [r3, #0]
   14c48:	002b      	movs	r3, r5
   14c4a:	47a0      	blx	r4
   14c4c:	0003      	movs	r3, r0
   14c4e:	617b      	str	r3, [r7, #20]

  return ret;
   14c50:	697b      	ldr	r3, [r7, #20]
}
   14c52:	0018      	movs	r0, r3
   14c54:	46bd      	mov	sp, r7
   14c56:	b006      	add	sp, #24
   14c58:	bdb0      	pop	{r4, r5, r7, pc}

00014c5a <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14c5a:	b5b0      	push	{r4, r5, r7, lr}
   14c5c:	b086      	sub	sp, #24
   14c5e:	af00      	add	r7, sp, #0
   14c60:	60f8      	str	r0, [r7, #12]
   14c62:	0008      	movs	r0, r1
   14c64:	607a      	str	r2, [r7, #4]
   14c66:	0019      	movs	r1, r3
   14c68:	230b      	movs	r3, #11
   14c6a:	18fb      	adds	r3, r7, r3
   14c6c:	1c02      	adds	r2, r0, #0
   14c6e:	701a      	strb	r2, [r3, #0]
   14c70:	2308      	movs	r3, #8
   14c72:	18fb      	adds	r3, r7, r3
   14c74:	1c0a      	adds	r2, r1, #0
   14c76:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14c78:	68fb      	ldr	r3, [r7, #12]
   14c7a:	681c      	ldr	r4, [r3, #0]
   14c7c:	68fb      	ldr	r3, [r7, #12]
   14c7e:	6898      	ldr	r0, [r3, #8]
   14c80:	2308      	movs	r3, #8
   14c82:	18fb      	adds	r3, r7, r3
   14c84:	881d      	ldrh	r5, [r3, #0]
   14c86:	687a      	ldr	r2, [r7, #4]
   14c88:	230b      	movs	r3, #11
   14c8a:	18fb      	adds	r3, r7, r3
   14c8c:	7819      	ldrb	r1, [r3, #0]
   14c8e:	002b      	movs	r3, r5
   14c90:	47a0      	blx	r4
   14c92:	0003      	movs	r3, r0
   14c94:	617b      	str	r3, [r7, #20]

  return ret;
   14c96:	697b      	ldr	r3, [r7, #20]
}
   14c98:	0018      	movs	r0, r3
   14c9a:	46bd      	mov	sp, r7
   14c9c:	b006      	add	sp, #24
   14c9e:	bdb0      	pop	{r4, r5, r7, pc}

00014ca0 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14ca0:	b580      	push	{r7, lr}
   14ca2:	b082      	sub	sp, #8
   14ca4:	af00      	add	r7, sp, #0
   14ca6:	0002      	movs	r2, r0
   14ca8:	1dbb      	adds	r3, r7, #6
   14caa:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14cac:	1dbb      	adds	r3, r7, #6
   14cae:	2200      	movs	r2, #0
   14cb0:	5e9a      	ldrsh	r2, [r3, r2]
   14cb2:	4b06      	ldr	r3, [pc, #24]	; (14ccc <lsm6dso_from_fs2_to_mg+0x2c>)
   14cb4:	0010      	movs	r0, r2
   14cb6:	4798      	blx	r3
   14cb8:	1c02      	adds	r2, r0, #0
   14cba:	4b05      	ldr	r3, [pc, #20]	; (14cd0 <lsm6dso_from_fs2_to_mg+0x30>)
   14cbc:	4905      	ldr	r1, [pc, #20]	; (14cd4 <lsm6dso_from_fs2_to_mg+0x34>)
   14cbe:	1c10      	adds	r0, r2, #0
   14cc0:	4798      	blx	r3
   14cc2:	1c03      	adds	r3, r0, #0
}
   14cc4:	1c18      	adds	r0, r3, #0
   14cc6:	46bd      	mov	sp, r7
   14cc8:	b002      	add	sp, #8
   14cca:	bd80      	pop	{r7, pc}
   14ccc:	00033355 	.word	0x00033355
   14cd0:	000330d5 	.word	0x000330d5
   14cd4:	3d79db23 	.word	0x3d79db23

00014cd8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14cd8:	b590      	push	{r4, r7, lr}
   14cda:	b085      	sub	sp, #20
   14cdc:	af00      	add	r7, sp, #0
   14cde:	6078      	str	r0, [r7, #4]
   14ce0:	000a      	movs	r2, r1
   14ce2:	1cfb      	adds	r3, r7, #3
   14ce4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14ce6:	2308      	movs	r3, #8
   14ce8:	18fa      	adds	r2, r7, r3
   14cea:	6878      	ldr	r0, [r7, #4]
   14cec:	2301      	movs	r3, #1
   14cee:	2110      	movs	r1, #16
   14cf0:	4c12      	ldr	r4, [pc, #72]	; (14d3c <lsm6dso_xl_full_scale_set+0x64>)
   14cf2:	47a0      	blx	r4
   14cf4:	0003      	movs	r3, r0
   14cf6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14cf8:	68fb      	ldr	r3, [r7, #12]
   14cfa:	2b00      	cmp	r3, #0
   14cfc:	d119      	bne.n	14d32 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14cfe:	1cfb      	adds	r3, r7, #3
   14d00:	781b      	ldrb	r3, [r3, #0]
   14d02:	2203      	movs	r2, #3
   14d04:	4013      	ands	r3, r2
   14d06:	b2da      	uxtb	r2, r3
   14d08:	2308      	movs	r3, #8
   14d0a:	18fb      	adds	r3, r7, r3
   14d0c:	2103      	movs	r1, #3
   14d0e:	400a      	ands	r2, r1
   14d10:	0090      	lsls	r0, r2, #2
   14d12:	781a      	ldrb	r2, [r3, #0]
   14d14:	210c      	movs	r1, #12
   14d16:	438a      	bics	r2, r1
   14d18:	1c11      	adds	r1, r2, #0
   14d1a:	1c02      	adds	r2, r0, #0
   14d1c:	430a      	orrs	r2, r1
   14d1e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14d20:	2308      	movs	r3, #8
   14d22:	18fa      	adds	r2, r7, r3
   14d24:	6878      	ldr	r0, [r7, #4]
   14d26:	2301      	movs	r3, #1
   14d28:	2110      	movs	r1, #16
   14d2a:	4c05      	ldr	r4, [pc, #20]	; (14d40 <lsm6dso_xl_full_scale_set+0x68>)
   14d2c:	47a0      	blx	r4
   14d2e:	0003      	movs	r3, r0
   14d30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14d32:	68fb      	ldr	r3, [r7, #12]
}
   14d34:	0018      	movs	r0, r3
   14d36:	46bd      	mov	sp, r7
   14d38:	b005      	add	sp, #20
   14d3a:	bd90      	pop	{r4, r7, pc}
   14d3c:	00014c15 	.word	0x00014c15
   14d40:	00014c5b 	.word	0x00014c5b

00014d44 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14d44:	b590      	push	{r4, r7, lr}
   14d46:	b087      	sub	sp, #28
   14d48:	af00      	add	r7, sp, #0
   14d4a:	6078      	str	r0, [r7, #4]
   14d4c:	000a      	movs	r2, r1
   14d4e:	1cfb      	adds	r3, r7, #3
   14d50:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14d52:	2317      	movs	r3, #23
   14d54:	18fb      	adds	r3, r7, r3
   14d56:	1cfa      	adds	r2, r7, #3
   14d58:	7812      	ldrb	r2, [r2, #0]
   14d5a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14d5c:	230c      	movs	r3, #12
   14d5e:	18fa      	adds	r2, r7, r3
   14d60:	687b      	ldr	r3, [r7, #4]
   14d62:	0011      	movs	r1, r2
   14d64:	0018      	movs	r0, r3
   14d66:	4ba4      	ldr	r3, [pc, #656]	; (14ff8 <lsm6dso_xl_data_rate_set+0x2b4>)
   14d68:	4798      	blx	r3
   14d6a:	0003      	movs	r3, r0
   14d6c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14d6e:	693b      	ldr	r3, [r7, #16]
   14d70:	2b00      	cmp	r3, #0
   14d72:	d000      	beq.n	14d76 <lsm6dso_xl_data_rate_set+0x32>
   14d74:	e113      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14d76:	230c      	movs	r3, #12
   14d78:	18fb      	adds	r3, r7, r3
   14d7a:	781b      	ldrb	r3, [r3, #0]
   14d7c:	07db      	lsls	r3, r3, #31
   14d7e:	0fdb      	lsrs	r3, r3, #31
   14d80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14d82:	230c      	movs	r3, #12
   14d84:	18fb      	adds	r3, r7, r3
   14d86:	781b      	ldrb	r3, [r3, #0]
   14d88:	079b      	lsls	r3, r3, #30
   14d8a:	0fdb      	lsrs	r3, r3, #31
   14d8c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14d8e:	4313      	orrs	r3, r2
   14d90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14d92:	230c      	movs	r3, #12
   14d94:	18fb      	adds	r3, r7, r3
   14d96:	781b      	ldrb	r3, [r3, #0]
   14d98:	075b      	lsls	r3, r3, #29
   14d9a:	0fdb      	lsrs	r3, r3, #31
   14d9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14d9e:	4313      	orrs	r3, r2
   14da0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14da2:	230c      	movs	r3, #12
   14da4:	18fb      	adds	r3, r7, r3
   14da6:	781b      	ldrb	r3, [r3, #0]
   14da8:	071b      	lsls	r3, r3, #28
   14daa:	0fdb      	lsrs	r3, r3, #31
   14dac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14dae:	4313      	orrs	r3, r2
   14db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14db2:	230c      	movs	r3, #12
   14db4:	18fb      	adds	r3, r7, r3
   14db6:	781b      	ldrb	r3, [r3, #0]
   14db8:	06db      	lsls	r3, r3, #27
   14dba:	0fdb      	lsrs	r3, r3, #31
   14dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14dbe:	4313      	orrs	r3, r2
   14dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14dc2:	230c      	movs	r3, #12
   14dc4:	18fb      	adds	r3, r7, r3
   14dc6:	781b      	ldrb	r3, [r3, #0]
   14dc8:	069b      	lsls	r3, r3, #26
   14dca:	0fdb      	lsrs	r3, r3, #31
   14dcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14dce:	4313      	orrs	r3, r2
   14dd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14dd2:	230c      	movs	r3, #12
   14dd4:	18fb      	adds	r3, r7, r3
   14dd6:	781b      	ldrb	r3, [r3, #0]
   14dd8:	065b      	lsls	r3, r3, #25
   14dda:	0fdb      	lsrs	r3, r3, #31
   14ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14dde:	4313      	orrs	r3, r2
   14de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14de2:	230c      	movs	r3, #12
   14de4:	18fb      	adds	r3, r7, r3
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	061b      	lsls	r3, r3, #24
   14dea:	0fdb      	lsrs	r3, r3, #31
   14dec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14dee:	4313      	orrs	r3, r2
   14df0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14df2:	230c      	movs	r3, #12
   14df4:	18fb      	adds	r3, r7, r3
   14df6:	785b      	ldrb	r3, [r3, #1]
   14df8:	07db      	lsls	r3, r3, #31
   14dfa:	0fdb      	lsrs	r3, r3, #31
   14dfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14dfe:	4313      	orrs	r3, r2
   14e00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14e02:	230c      	movs	r3, #12
   14e04:	18fb      	adds	r3, r7, r3
   14e06:	785b      	ldrb	r3, [r3, #1]
   14e08:	079b      	lsls	r3, r3, #30
   14e0a:	0fdb      	lsrs	r3, r3, #31
   14e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14e0e:	4313      	orrs	r3, r2
   14e10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14e12:	230c      	movs	r3, #12
   14e14:	18fb      	adds	r3, r7, r3
   14e16:	785b      	ldrb	r3, [r3, #1]
   14e18:	075b      	lsls	r3, r3, #29
   14e1a:	0fdb      	lsrs	r3, r3, #31
   14e1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14e1e:	4313      	orrs	r3, r2
   14e20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14e22:	230c      	movs	r3, #12
   14e24:	18fb      	adds	r3, r7, r3
   14e26:	785b      	ldrb	r3, [r3, #1]
   14e28:	071b      	lsls	r3, r3, #28
   14e2a:	0fdb      	lsrs	r3, r3, #31
   14e2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14e2e:	4313      	orrs	r3, r2
   14e30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14e32:	230c      	movs	r3, #12
   14e34:	18fb      	adds	r3, r7, r3
   14e36:	785b      	ldrb	r3, [r3, #1]
   14e38:	06db      	lsls	r3, r3, #27
   14e3a:	0fdb      	lsrs	r3, r3, #31
   14e3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14e3e:	4313      	orrs	r3, r2
   14e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14e42:	230c      	movs	r3, #12
   14e44:	18fb      	adds	r3, r7, r3
   14e46:	785b      	ldrb	r3, [r3, #1]
   14e48:	069b      	lsls	r3, r3, #26
   14e4a:	0fdb      	lsrs	r3, r3, #31
   14e4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14e4e:	4313      	orrs	r3, r2
   14e50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14e52:	230c      	movs	r3, #12
   14e54:	18fb      	adds	r3, r7, r3
   14e56:	785b      	ldrb	r3, [r3, #1]
   14e58:	065b      	lsls	r3, r3, #25
   14e5a:	0fdb      	lsrs	r3, r3, #31
   14e5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14e5e:	4313      	orrs	r3, r2
   14e60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14e62:	230c      	movs	r3, #12
   14e64:	18fb      	adds	r3, r7, r3
   14e66:	785b      	ldrb	r3, [r3, #1]
   14e68:	061b      	lsls	r3, r3, #24
   14e6a:	0fdb      	lsrs	r3, r3, #31
   14e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14e6e:	4313      	orrs	r3, r2
   14e70:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14e72:	2b01      	cmp	r3, #1
   14e74:	d000      	beq.n	14e78 <lsm6dso_xl_data_rate_set+0x134>
   14e76:	e092      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14e78:	230b      	movs	r3, #11
   14e7a:	18fa      	adds	r2, r7, r3
   14e7c:	687b      	ldr	r3, [r7, #4]
   14e7e:	0011      	movs	r1, r2
   14e80:	0018      	movs	r0, r3
   14e82:	4b5e      	ldr	r3, [pc, #376]	; (14ffc <lsm6dso_xl_data_rate_set+0x2b8>)
   14e84:	4798      	blx	r3
   14e86:	0003      	movs	r3, r0
   14e88:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14e8a:	693b      	ldr	r3, [r7, #16]
   14e8c:	2b00      	cmp	r3, #0
   14e8e:	d000      	beq.n	14e92 <lsm6dso_xl_data_rate_set+0x14e>
   14e90:	e085      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14e92:	230b      	movs	r3, #11
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	781b      	ldrb	r3, [r3, #0]
   14e98:	2b01      	cmp	r3, #1
   14e9a:	d017      	beq.n	14ecc <lsm6dso_xl_data_rate_set+0x188>
   14e9c:	dc02      	bgt.n	14ea4 <lsm6dso_xl_data_rate_set+0x160>
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	d005      	beq.n	14eae <lsm6dso_xl_data_rate_set+0x16a>
   14ea2:	e076      	b.n	14f92 <lsm6dso_xl_data_rate_set+0x24e>
   14ea4:	2b02      	cmp	r3, #2
   14ea6:	d029      	beq.n	14efc <lsm6dso_xl_data_rate_set+0x1b8>
   14ea8:	2b03      	cmp	r3, #3
   14eaa:	d048      	beq.n	14f3e <lsm6dso_xl_data_rate_set+0x1fa>
   14eac:	e071      	b.n	14f92 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   14eae:	1cfb      	adds	r3, r7, #3
   14eb0:	781b      	ldrb	r3, [r3, #0]
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	d104      	bne.n	14ec0 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14eb6:	2317      	movs	r3, #23
   14eb8:	18fb      	adds	r3, r7, r3
   14eba:	2201      	movs	r2, #1
   14ebc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14ebe:	e06e      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14ec0:	2317      	movs	r3, #23
   14ec2:	18fb      	adds	r3, r7, r3
   14ec4:	1cfa      	adds	r2, r7, #3
   14ec6:	7812      	ldrb	r2, [r2, #0]
   14ec8:	701a      	strb	r2, [r3, #0]
            break;
   14eca:	e068      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14ecc:	1cfb      	adds	r3, r7, #3
   14ece:	781b      	ldrb	r3, [r3, #0]
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d104      	bne.n	14ede <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14ed4:	2317      	movs	r3, #23
   14ed6:	18fb      	adds	r3, r7, r3
   14ed8:	2202      	movs	r2, #2
   14eda:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14edc:	e05f      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14ede:	1cfb      	adds	r3, r7, #3
   14ee0:	781b      	ldrb	r3, [r3, #0]
   14ee2:	2b01      	cmp	r3, #1
   14ee4:	d104      	bne.n	14ef0 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14ee6:	2317      	movs	r3, #23
   14ee8:	18fb      	adds	r3, r7, r3
   14eea:	2202      	movs	r2, #2
   14eec:	701a      	strb	r2, [r3, #0]
            break;
   14eee:	e056      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14ef0:	2317      	movs	r3, #23
   14ef2:	18fb      	adds	r3, r7, r3
   14ef4:	1cfa      	adds	r2, r7, #3
   14ef6:	7812      	ldrb	r2, [r2, #0]
   14ef8:	701a      	strb	r2, [r3, #0]
            break;
   14efa:	e050      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14efc:	1cfb      	adds	r3, r7, #3
   14efe:	781b      	ldrb	r3, [r3, #0]
   14f00:	2b00      	cmp	r3, #0
   14f02:	d104      	bne.n	14f0e <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f04:	2317      	movs	r3, #23
   14f06:	18fb      	adds	r3, r7, r3
   14f08:	2203      	movs	r2, #3
   14f0a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f0c:	e047      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14f0e:	1cfb      	adds	r3, r7, #3
   14f10:	781b      	ldrb	r3, [r3, #0]
   14f12:	2b01      	cmp	r3, #1
   14f14:	d104      	bne.n	14f20 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f16:	2317      	movs	r3, #23
   14f18:	18fb      	adds	r3, r7, r3
   14f1a:	2203      	movs	r2, #3
   14f1c:	701a      	strb	r2, [r3, #0]
            break;
   14f1e:	e03e      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14f20:	1cfb      	adds	r3, r7, #3
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	2b02      	cmp	r3, #2
   14f26:	d104      	bne.n	14f32 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f28:	2317      	movs	r3, #23
   14f2a:	18fb      	adds	r3, r7, r3
   14f2c:	2203      	movs	r2, #3
   14f2e:	701a      	strb	r2, [r3, #0]
            break;
   14f30:	e035      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f32:	2317      	movs	r3, #23
   14f34:	18fb      	adds	r3, r7, r3
   14f36:	1cfa      	adds	r2, r7, #3
   14f38:	7812      	ldrb	r2, [r2, #0]
   14f3a:	701a      	strb	r2, [r3, #0]
            break;
   14f3c:	e02f      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f3e:	1cfb      	adds	r3, r7, #3
   14f40:	781b      	ldrb	r3, [r3, #0]
   14f42:	2b00      	cmp	r3, #0
   14f44:	d104      	bne.n	14f50 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14f46:	2317      	movs	r3, #23
   14f48:	18fb      	adds	r3, r7, r3
   14f4a:	2204      	movs	r2, #4
   14f4c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f4e:	e026      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14f50:	1cfb      	adds	r3, r7, #3
   14f52:	781b      	ldrb	r3, [r3, #0]
   14f54:	2b01      	cmp	r3, #1
   14f56:	d104      	bne.n	14f62 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14f58:	2317      	movs	r3, #23
   14f5a:	18fb      	adds	r3, r7, r3
   14f5c:	2204      	movs	r2, #4
   14f5e:	701a      	strb	r2, [r3, #0]
            break;
   14f60:	e01d      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14f62:	1cfb      	adds	r3, r7, #3
   14f64:	781b      	ldrb	r3, [r3, #0]
   14f66:	2b02      	cmp	r3, #2
   14f68:	d104      	bne.n	14f74 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14f6a:	2317      	movs	r3, #23
   14f6c:	18fb      	adds	r3, r7, r3
   14f6e:	2204      	movs	r2, #4
   14f70:	701a      	strb	r2, [r3, #0]
            break;
   14f72:	e014      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14f74:	1cfb      	adds	r3, r7, #3
   14f76:	781b      	ldrb	r3, [r3, #0]
   14f78:	2b03      	cmp	r3, #3
   14f7a:	d104      	bne.n	14f86 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14f7c:	2317      	movs	r3, #23
   14f7e:	18fb      	adds	r3, r7, r3
   14f80:	2204      	movs	r2, #4
   14f82:	701a      	strb	r2, [r3, #0]
            break;
   14f84:	e00b      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f86:	2317      	movs	r3, #23
   14f88:	18fb      	adds	r3, r7, r3
   14f8a:	1cfa      	adds	r2, r7, #3
   14f8c:	7812      	ldrb	r2, [r2, #0]
   14f8e:	701a      	strb	r2, [r3, #0]
            break;
   14f90:	e005      	b.n	14f9e <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   14f92:	2317      	movs	r3, #23
   14f94:	18fb      	adds	r3, r7, r3
   14f96:	1cfa      	adds	r2, r7, #3
   14f98:	7812      	ldrb	r2, [r2, #0]
   14f9a:	701a      	strb	r2, [r3, #0]
            break;
   14f9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14f9e:	693b      	ldr	r3, [r7, #16]
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	d108      	bne.n	14fb6 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14fa4:	2308      	movs	r3, #8
   14fa6:	18fa      	adds	r2, r7, r3
   14fa8:	6878      	ldr	r0, [r7, #4]
   14faa:	2301      	movs	r3, #1
   14fac:	2110      	movs	r1, #16
   14fae:	4c14      	ldr	r4, [pc, #80]	; (15000 <lsm6dso_xl_data_rate_set+0x2bc>)
   14fb0:	47a0      	blx	r4
   14fb2:	0003      	movs	r3, r0
   14fb4:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14fb6:	693b      	ldr	r3, [r7, #16]
   14fb8:	2b00      	cmp	r3, #0
   14fba:	d118      	bne.n	14fee <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   14fbc:	2317      	movs	r3, #23
   14fbe:	18fb      	adds	r3, r7, r3
   14fc0:	781b      	ldrb	r3, [r3, #0]
   14fc2:	220f      	movs	r2, #15
   14fc4:	4013      	ands	r3, r2
   14fc6:	b2da      	uxtb	r2, r3
   14fc8:	2308      	movs	r3, #8
   14fca:	18fb      	adds	r3, r7, r3
   14fcc:	0110      	lsls	r0, r2, #4
   14fce:	781a      	ldrb	r2, [r3, #0]
   14fd0:	210f      	movs	r1, #15
   14fd2:	400a      	ands	r2, r1
   14fd4:	1c11      	adds	r1, r2, #0
   14fd6:	1c02      	adds	r2, r0, #0
   14fd8:	430a      	orrs	r2, r1
   14fda:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14fdc:	2308      	movs	r3, #8
   14fde:	18fa      	adds	r2, r7, r3
   14fe0:	6878      	ldr	r0, [r7, #4]
   14fe2:	2301      	movs	r3, #1
   14fe4:	2110      	movs	r1, #16
   14fe6:	4c07      	ldr	r4, [pc, #28]	; (15004 <lsm6dso_xl_data_rate_set+0x2c0>)
   14fe8:	47a0      	blx	r4
   14fea:	0003      	movs	r3, r0
   14fec:	613b      	str	r3, [r7, #16]
  }

  return ret;
   14fee:	693b      	ldr	r3, [r7, #16]
}
   14ff0:	0018      	movs	r0, r3
   14ff2:	46bd      	mov	sp, r7
   14ff4:	b007      	add	sp, #28
   14ff6:	bd90      	pop	{r4, r7, pc}
   14ff8:	00015821 	.word	0x00015821
   14ffc:	00015875 	.word	0x00015875
   15000:	00014c15 	.word	0x00014c15
   15004:	00014c5b 	.word	0x00014c5b

00015008 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   15008:	b590      	push	{r4, r7, lr}
   1500a:	b085      	sub	sp, #20
   1500c:	af00      	add	r7, sp, #0
   1500e:	6078      	str	r0, [r7, #4]
   15010:	000a      	movs	r2, r1
   15012:	1cfb      	adds	r3, r7, #3
   15014:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15016:	2308      	movs	r3, #8
   15018:	18fa      	adds	r2, r7, r3
   1501a:	6878      	ldr	r0, [r7, #4]
   1501c:	2301      	movs	r3, #1
   1501e:	2111      	movs	r1, #17
   15020:	4c12      	ldr	r4, [pc, #72]	; (1506c <lsm6dso_gy_full_scale_set+0x64>)
   15022:	47a0      	blx	r4
   15024:	0003      	movs	r3, r0
   15026:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15028:	68fb      	ldr	r3, [r7, #12]
   1502a:	2b00      	cmp	r3, #0
   1502c:	d119      	bne.n	15062 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1502e:	1cfb      	adds	r3, r7, #3
   15030:	781b      	ldrb	r3, [r3, #0]
   15032:	2207      	movs	r2, #7
   15034:	4013      	ands	r3, r2
   15036:	b2da      	uxtb	r2, r3
   15038:	2308      	movs	r3, #8
   1503a:	18fb      	adds	r3, r7, r3
   1503c:	2107      	movs	r1, #7
   1503e:	400a      	ands	r2, r1
   15040:	1890      	adds	r0, r2, r2
   15042:	781a      	ldrb	r2, [r3, #0]
   15044:	210e      	movs	r1, #14
   15046:	438a      	bics	r2, r1
   15048:	1c11      	adds	r1, r2, #0
   1504a:	1c02      	adds	r2, r0, #0
   1504c:	430a      	orrs	r2, r1
   1504e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15050:	2308      	movs	r3, #8
   15052:	18fa      	adds	r2, r7, r3
   15054:	6878      	ldr	r0, [r7, #4]
   15056:	2301      	movs	r3, #1
   15058:	2111      	movs	r1, #17
   1505a:	4c05      	ldr	r4, [pc, #20]	; (15070 <lsm6dso_gy_full_scale_set+0x68>)
   1505c:	47a0      	blx	r4
   1505e:	0003      	movs	r3, r0
   15060:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15062:	68fb      	ldr	r3, [r7, #12]
}
   15064:	0018      	movs	r0, r3
   15066:	46bd      	mov	sp, r7
   15068:	b005      	add	sp, #20
   1506a:	bd90      	pop	{r4, r7, pc}
   1506c:	00014c15 	.word	0x00014c15
   15070:	00014c5b 	.word	0x00014c5b

00015074 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   15074:	b590      	push	{r4, r7, lr}
   15076:	b087      	sub	sp, #28
   15078:	af00      	add	r7, sp, #0
   1507a:	6078      	str	r0, [r7, #4]
   1507c:	000a      	movs	r2, r1
   1507e:	1cfb      	adds	r3, r7, #3
   15080:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   15082:	2317      	movs	r3, #23
   15084:	18fb      	adds	r3, r7, r3
   15086:	1cfa      	adds	r2, r7, #3
   15088:	7812      	ldrb	r2, [r2, #0]
   1508a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   1508c:	230c      	movs	r3, #12
   1508e:	18fa      	adds	r2, r7, r3
   15090:	687b      	ldr	r3, [r7, #4]
   15092:	0011      	movs	r1, r2
   15094:	0018      	movs	r0, r3
   15096:	4ba4      	ldr	r3, [pc, #656]	; (15328 <lsm6dso_gy_data_rate_set+0x2b4>)
   15098:	4798      	blx	r3
   1509a:	0003      	movs	r3, r0
   1509c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1509e:	693b      	ldr	r3, [r7, #16]
   150a0:	2b00      	cmp	r3, #0
   150a2:	d000      	beq.n	150a6 <lsm6dso_gy_data_rate_set+0x32>
   150a4:	e113      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   150a6:	230c      	movs	r3, #12
   150a8:	18fb      	adds	r3, r7, r3
   150aa:	781b      	ldrb	r3, [r3, #0]
   150ac:	07db      	lsls	r3, r3, #31
   150ae:	0fdb      	lsrs	r3, r3, #31
   150b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   150b2:	230c      	movs	r3, #12
   150b4:	18fb      	adds	r3, r7, r3
   150b6:	781b      	ldrb	r3, [r3, #0]
   150b8:	079b      	lsls	r3, r3, #30
   150ba:	0fdb      	lsrs	r3, r3, #31
   150bc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   150be:	4313      	orrs	r3, r2
   150c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   150c2:	230c      	movs	r3, #12
   150c4:	18fb      	adds	r3, r7, r3
   150c6:	781b      	ldrb	r3, [r3, #0]
   150c8:	075b      	lsls	r3, r3, #29
   150ca:	0fdb      	lsrs	r3, r3, #31
   150cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   150ce:	4313      	orrs	r3, r2
   150d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   150d2:	230c      	movs	r3, #12
   150d4:	18fb      	adds	r3, r7, r3
   150d6:	781b      	ldrb	r3, [r3, #0]
   150d8:	071b      	lsls	r3, r3, #28
   150da:	0fdb      	lsrs	r3, r3, #31
   150dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   150de:	4313      	orrs	r3, r2
   150e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   150e2:	230c      	movs	r3, #12
   150e4:	18fb      	adds	r3, r7, r3
   150e6:	781b      	ldrb	r3, [r3, #0]
   150e8:	06db      	lsls	r3, r3, #27
   150ea:	0fdb      	lsrs	r3, r3, #31
   150ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   150ee:	4313      	orrs	r3, r2
   150f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   150f2:	230c      	movs	r3, #12
   150f4:	18fb      	adds	r3, r7, r3
   150f6:	781b      	ldrb	r3, [r3, #0]
   150f8:	069b      	lsls	r3, r3, #26
   150fa:	0fdb      	lsrs	r3, r3, #31
   150fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   150fe:	4313      	orrs	r3, r2
   15100:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15102:	230c      	movs	r3, #12
   15104:	18fb      	adds	r3, r7, r3
   15106:	781b      	ldrb	r3, [r3, #0]
   15108:	065b      	lsls	r3, r3, #25
   1510a:	0fdb      	lsrs	r3, r3, #31
   1510c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1510e:	4313      	orrs	r3, r2
   15110:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15112:	230c      	movs	r3, #12
   15114:	18fb      	adds	r3, r7, r3
   15116:	781b      	ldrb	r3, [r3, #0]
   15118:	061b      	lsls	r3, r3, #24
   1511a:	0fdb      	lsrs	r3, r3, #31
   1511c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1511e:	4313      	orrs	r3, r2
   15120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15122:	230c      	movs	r3, #12
   15124:	18fb      	adds	r3, r7, r3
   15126:	785b      	ldrb	r3, [r3, #1]
   15128:	07db      	lsls	r3, r3, #31
   1512a:	0fdb      	lsrs	r3, r3, #31
   1512c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1512e:	4313      	orrs	r3, r2
   15130:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15132:	230c      	movs	r3, #12
   15134:	18fb      	adds	r3, r7, r3
   15136:	785b      	ldrb	r3, [r3, #1]
   15138:	079b      	lsls	r3, r3, #30
   1513a:	0fdb      	lsrs	r3, r3, #31
   1513c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1513e:	4313      	orrs	r3, r2
   15140:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15142:	230c      	movs	r3, #12
   15144:	18fb      	adds	r3, r7, r3
   15146:	785b      	ldrb	r3, [r3, #1]
   15148:	075b      	lsls	r3, r3, #29
   1514a:	0fdb      	lsrs	r3, r3, #31
   1514c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1514e:	4313      	orrs	r3, r2
   15150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15152:	230c      	movs	r3, #12
   15154:	18fb      	adds	r3, r7, r3
   15156:	785b      	ldrb	r3, [r3, #1]
   15158:	071b      	lsls	r3, r3, #28
   1515a:	0fdb      	lsrs	r3, r3, #31
   1515c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1515e:	4313      	orrs	r3, r2
   15160:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15162:	230c      	movs	r3, #12
   15164:	18fb      	adds	r3, r7, r3
   15166:	785b      	ldrb	r3, [r3, #1]
   15168:	06db      	lsls	r3, r3, #27
   1516a:	0fdb      	lsrs	r3, r3, #31
   1516c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1516e:	4313      	orrs	r3, r2
   15170:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15172:	230c      	movs	r3, #12
   15174:	18fb      	adds	r3, r7, r3
   15176:	785b      	ldrb	r3, [r3, #1]
   15178:	069b      	lsls	r3, r3, #26
   1517a:	0fdb      	lsrs	r3, r3, #31
   1517c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1517e:	4313      	orrs	r3, r2
   15180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15182:	230c      	movs	r3, #12
   15184:	18fb      	adds	r3, r7, r3
   15186:	785b      	ldrb	r3, [r3, #1]
   15188:	065b      	lsls	r3, r3, #25
   1518a:	0fdb      	lsrs	r3, r3, #31
   1518c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1518e:	4313      	orrs	r3, r2
   15190:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15192:	230c      	movs	r3, #12
   15194:	18fb      	adds	r3, r7, r3
   15196:	785b      	ldrb	r3, [r3, #1]
   15198:	061b      	lsls	r3, r3, #24
   1519a:	0fdb      	lsrs	r3, r3, #31
   1519c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1519e:	4313      	orrs	r3, r2
   151a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   151a2:	2b01      	cmp	r3, #1
   151a4:	d000      	beq.n	151a8 <lsm6dso_gy_data_rate_set+0x134>
   151a6:	e092      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   151a8:	230b      	movs	r3, #11
   151aa:	18fa      	adds	r2, r7, r3
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	0011      	movs	r1, r2
   151b0:	0018      	movs	r0, r3
   151b2:	4b5e      	ldr	r3, [pc, #376]	; (1532c <lsm6dso_gy_data_rate_set+0x2b8>)
   151b4:	4798      	blx	r3
   151b6:	0003      	movs	r3, r0
   151b8:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   151ba:	693b      	ldr	r3, [r7, #16]
   151bc:	2b00      	cmp	r3, #0
   151be:	d000      	beq.n	151c2 <lsm6dso_gy_data_rate_set+0x14e>
   151c0:	e085      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   151c2:	230b      	movs	r3, #11
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	781b      	ldrb	r3, [r3, #0]
   151c8:	2b01      	cmp	r3, #1
   151ca:	d017      	beq.n	151fc <lsm6dso_gy_data_rate_set+0x188>
   151cc:	dc02      	bgt.n	151d4 <lsm6dso_gy_data_rate_set+0x160>
   151ce:	2b00      	cmp	r3, #0
   151d0:	d005      	beq.n	151de <lsm6dso_gy_data_rate_set+0x16a>
   151d2:	e076      	b.n	152c2 <lsm6dso_gy_data_rate_set+0x24e>
   151d4:	2b02      	cmp	r3, #2
   151d6:	d029      	beq.n	1522c <lsm6dso_gy_data_rate_set+0x1b8>
   151d8:	2b03      	cmp	r3, #3
   151da:	d048      	beq.n	1526e <lsm6dso_gy_data_rate_set+0x1fa>
   151dc:	e071      	b.n	152c2 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   151de:	1cfb      	adds	r3, r7, #3
   151e0:	781b      	ldrb	r3, [r3, #0]
   151e2:	2b00      	cmp	r3, #0
   151e4:	d104      	bne.n	151f0 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   151e6:	2317      	movs	r3, #23
   151e8:	18fb      	adds	r3, r7, r3
   151ea:	2201      	movs	r2, #1
   151ec:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   151ee:	e06e      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   151f0:	2317      	movs	r3, #23
   151f2:	18fb      	adds	r3, r7, r3
   151f4:	1cfa      	adds	r2, r7, #3
   151f6:	7812      	ldrb	r2, [r2, #0]
   151f8:	701a      	strb	r2, [r3, #0]
            break;
   151fa:	e068      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   151fc:	1cfb      	adds	r3, r7, #3
   151fe:	781b      	ldrb	r3, [r3, #0]
   15200:	2b00      	cmp	r3, #0
   15202:	d104      	bne.n	1520e <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15204:	2317      	movs	r3, #23
   15206:	18fb      	adds	r3, r7, r3
   15208:	2202      	movs	r2, #2
   1520a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1520c:	e05f      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1520e:	1cfb      	adds	r3, r7, #3
   15210:	781b      	ldrb	r3, [r3, #0]
   15212:	2b01      	cmp	r3, #1
   15214:	d104      	bne.n	15220 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15216:	2317      	movs	r3, #23
   15218:	18fb      	adds	r3, r7, r3
   1521a:	2202      	movs	r2, #2
   1521c:	701a      	strb	r2, [r3, #0]
            break;
   1521e:	e056      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15220:	2317      	movs	r3, #23
   15222:	18fb      	adds	r3, r7, r3
   15224:	1cfa      	adds	r2, r7, #3
   15226:	7812      	ldrb	r2, [r2, #0]
   15228:	701a      	strb	r2, [r3, #0]
            break;
   1522a:	e050      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1522c:	1cfb      	adds	r3, r7, #3
   1522e:	781b      	ldrb	r3, [r3, #0]
   15230:	2b00      	cmp	r3, #0
   15232:	d104      	bne.n	1523e <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15234:	2317      	movs	r3, #23
   15236:	18fb      	adds	r3, r7, r3
   15238:	2203      	movs	r2, #3
   1523a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1523c:	e047      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1523e:	1cfb      	adds	r3, r7, #3
   15240:	781b      	ldrb	r3, [r3, #0]
   15242:	2b01      	cmp	r3, #1
   15244:	d104      	bne.n	15250 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15246:	2317      	movs	r3, #23
   15248:	18fb      	adds	r3, r7, r3
   1524a:	2203      	movs	r2, #3
   1524c:	701a      	strb	r2, [r3, #0]
            break;
   1524e:	e03e      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15250:	1cfb      	adds	r3, r7, #3
   15252:	781b      	ldrb	r3, [r3, #0]
   15254:	2b02      	cmp	r3, #2
   15256:	d104      	bne.n	15262 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15258:	2317      	movs	r3, #23
   1525a:	18fb      	adds	r3, r7, r3
   1525c:	2203      	movs	r2, #3
   1525e:	701a      	strb	r2, [r3, #0]
            break;
   15260:	e035      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15262:	2317      	movs	r3, #23
   15264:	18fb      	adds	r3, r7, r3
   15266:	1cfa      	adds	r2, r7, #3
   15268:	7812      	ldrb	r2, [r2, #0]
   1526a:	701a      	strb	r2, [r3, #0]
            break;
   1526c:	e02f      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1526e:	1cfb      	adds	r3, r7, #3
   15270:	781b      	ldrb	r3, [r3, #0]
   15272:	2b00      	cmp	r3, #0
   15274:	d104      	bne.n	15280 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15276:	2317      	movs	r3, #23
   15278:	18fb      	adds	r3, r7, r3
   1527a:	2204      	movs	r2, #4
   1527c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1527e:	e026      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15280:	1cfb      	adds	r3, r7, #3
   15282:	781b      	ldrb	r3, [r3, #0]
   15284:	2b01      	cmp	r3, #1
   15286:	d104      	bne.n	15292 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15288:	2317      	movs	r3, #23
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	2204      	movs	r2, #4
   1528e:	701a      	strb	r2, [r3, #0]
            break;
   15290:	e01d      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15292:	1cfb      	adds	r3, r7, #3
   15294:	781b      	ldrb	r3, [r3, #0]
   15296:	2b02      	cmp	r3, #2
   15298:	d104      	bne.n	152a4 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1529a:	2317      	movs	r3, #23
   1529c:	18fb      	adds	r3, r7, r3
   1529e:	2204      	movs	r2, #4
   152a0:	701a      	strb	r2, [r3, #0]
            break;
   152a2:	e014      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   152a4:	1cfb      	adds	r3, r7, #3
   152a6:	781b      	ldrb	r3, [r3, #0]
   152a8:	2b03      	cmp	r3, #3
   152aa:	d104      	bne.n	152b6 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   152ac:	2317      	movs	r3, #23
   152ae:	18fb      	adds	r3, r7, r3
   152b0:	2204      	movs	r2, #4
   152b2:	701a      	strb	r2, [r3, #0]
            break;
   152b4:	e00b      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   152b6:	2317      	movs	r3, #23
   152b8:	18fb      	adds	r3, r7, r3
   152ba:	1cfa      	adds	r2, r7, #3
   152bc:	7812      	ldrb	r2, [r2, #0]
   152be:	701a      	strb	r2, [r3, #0]
            break;
   152c0:	e005      	b.n	152ce <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   152c2:	2317      	movs	r3, #23
   152c4:	18fb      	adds	r3, r7, r3
   152c6:	1cfa      	adds	r2, r7, #3
   152c8:	7812      	ldrb	r2, [r2, #0]
   152ca:	701a      	strb	r2, [r3, #0]
            break;
   152cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   152ce:	693b      	ldr	r3, [r7, #16]
   152d0:	2b00      	cmp	r3, #0
   152d2:	d108      	bne.n	152e6 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   152d4:	2308      	movs	r3, #8
   152d6:	18fa      	adds	r2, r7, r3
   152d8:	6878      	ldr	r0, [r7, #4]
   152da:	2301      	movs	r3, #1
   152dc:	2111      	movs	r1, #17
   152de:	4c14      	ldr	r4, [pc, #80]	; (15330 <lsm6dso_gy_data_rate_set+0x2bc>)
   152e0:	47a0      	blx	r4
   152e2:	0003      	movs	r3, r0
   152e4:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   152e6:	693b      	ldr	r3, [r7, #16]
   152e8:	2b00      	cmp	r3, #0
   152ea:	d118      	bne.n	1531e <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   152ec:	2317      	movs	r3, #23
   152ee:	18fb      	adds	r3, r7, r3
   152f0:	781b      	ldrb	r3, [r3, #0]
   152f2:	220f      	movs	r2, #15
   152f4:	4013      	ands	r3, r2
   152f6:	b2da      	uxtb	r2, r3
   152f8:	2308      	movs	r3, #8
   152fa:	18fb      	adds	r3, r7, r3
   152fc:	0110      	lsls	r0, r2, #4
   152fe:	781a      	ldrb	r2, [r3, #0]
   15300:	210f      	movs	r1, #15
   15302:	400a      	ands	r2, r1
   15304:	1c11      	adds	r1, r2, #0
   15306:	1c02      	adds	r2, r0, #0
   15308:	430a      	orrs	r2, r1
   1530a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1530c:	2308      	movs	r3, #8
   1530e:	18fa      	adds	r2, r7, r3
   15310:	6878      	ldr	r0, [r7, #4]
   15312:	2301      	movs	r3, #1
   15314:	2111      	movs	r1, #17
   15316:	4c07      	ldr	r4, [pc, #28]	; (15334 <lsm6dso_gy_data_rate_set+0x2c0>)
   15318:	47a0      	blx	r4
   1531a:	0003      	movs	r3, r0
   1531c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1531e:	693b      	ldr	r3, [r7, #16]
}
   15320:	0018      	movs	r0, r3
   15322:	46bd      	mov	sp, r7
   15324:	b007      	add	sp, #28
   15326:	bd90      	pop	{r4, r7, pc}
   15328:	00015821 	.word	0x00015821
   1532c:	00015875 	.word	0x00015875
   15330:	00014c15 	.word	0x00014c15
   15334:	00014c5b 	.word	0x00014c5b

00015338 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15338:	b590      	push	{r4, r7, lr}
   1533a:	b085      	sub	sp, #20
   1533c:	af00      	add	r7, sp, #0
   1533e:	6078      	str	r0, [r7, #4]
   15340:	000a      	movs	r2, r1
   15342:	1cfb      	adds	r3, r7, #3
   15344:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15346:	2308      	movs	r3, #8
   15348:	18fa      	adds	r2, r7, r3
   1534a:	6878      	ldr	r0, [r7, #4]
   1534c:	2301      	movs	r3, #1
   1534e:	2112      	movs	r1, #18
   15350:	4c12      	ldr	r4, [pc, #72]	; (1539c <lsm6dso_block_data_update_set+0x64>)
   15352:	47a0      	blx	r4
   15354:	0003      	movs	r3, r0
   15356:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15358:	68fb      	ldr	r3, [r7, #12]
   1535a:	2b00      	cmp	r3, #0
   1535c:	d119      	bne.n	15392 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   1535e:	1cfb      	adds	r3, r7, #3
   15360:	781b      	ldrb	r3, [r3, #0]
   15362:	2201      	movs	r2, #1
   15364:	4013      	ands	r3, r2
   15366:	b2da      	uxtb	r2, r3
   15368:	2308      	movs	r3, #8
   1536a:	18fb      	adds	r3, r7, r3
   1536c:	2101      	movs	r1, #1
   1536e:	400a      	ands	r2, r1
   15370:	0190      	lsls	r0, r2, #6
   15372:	781a      	ldrb	r2, [r3, #0]
   15374:	2140      	movs	r1, #64	; 0x40
   15376:	438a      	bics	r2, r1
   15378:	1c11      	adds	r1, r2, #0
   1537a:	1c02      	adds	r2, r0, #0
   1537c:	430a      	orrs	r2, r1
   1537e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15380:	2308      	movs	r3, #8
   15382:	18fa      	adds	r2, r7, r3
   15384:	6878      	ldr	r0, [r7, #4]
   15386:	2301      	movs	r3, #1
   15388:	2112      	movs	r1, #18
   1538a:	4c05      	ldr	r4, [pc, #20]	; (153a0 <lsm6dso_block_data_update_set+0x68>)
   1538c:	47a0      	blx	r4
   1538e:	0003      	movs	r3, r0
   15390:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15392:	68fb      	ldr	r3, [r7, #12]
}
   15394:	0018      	movs	r0, r3
   15396:	46bd      	mov	sp, r7
   15398:	b005      	add	sp, #20
   1539a:	bd90      	pop	{r4, r7, pc}
   1539c:	00014c15 	.word	0x00014c15
   153a0:	00014c5b 	.word	0x00014c5b

000153a4 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   153a4:	b590      	push	{r4, r7, lr}
   153a6:	b085      	sub	sp, #20
   153a8:	af00      	add	r7, sp, #0
   153aa:	6078      	str	r0, [r7, #4]
   153ac:	000a      	movs	r2, r1
   153ae:	1cfb      	adds	r3, r7, #3
   153b0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   153b2:	2308      	movs	r3, #8
   153b4:	18fa      	adds	r2, r7, r3
   153b6:	6878      	ldr	r0, [r7, #4]
   153b8:	2301      	movs	r3, #1
   153ba:	2115      	movs	r1, #21
   153bc:	4c12      	ldr	r4, [pc, #72]	; (15408 <lsm6dso_xl_offset_weight_set+0x64>)
   153be:	47a0      	blx	r4
   153c0:	0003      	movs	r3, r0
   153c2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   153c4:	68fb      	ldr	r3, [r7, #12]
   153c6:	2b00      	cmp	r3, #0
   153c8:	d119      	bne.n	153fe <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   153ca:	1cfb      	adds	r3, r7, #3
   153cc:	781b      	ldrb	r3, [r3, #0]
   153ce:	2201      	movs	r2, #1
   153d0:	4013      	ands	r3, r2
   153d2:	b2da      	uxtb	r2, r3
   153d4:	2308      	movs	r3, #8
   153d6:	18fb      	adds	r3, r7, r3
   153d8:	2101      	movs	r1, #1
   153da:	400a      	ands	r2, r1
   153dc:	00d0      	lsls	r0, r2, #3
   153de:	781a      	ldrb	r2, [r3, #0]
   153e0:	2108      	movs	r1, #8
   153e2:	438a      	bics	r2, r1
   153e4:	1c11      	adds	r1, r2, #0
   153e6:	1c02      	adds	r2, r0, #0
   153e8:	430a      	orrs	r2, r1
   153ea:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   153ec:	2308      	movs	r3, #8
   153ee:	18fa      	adds	r2, r7, r3
   153f0:	6878      	ldr	r0, [r7, #4]
   153f2:	2301      	movs	r3, #1
   153f4:	2115      	movs	r1, #21
   153f6:	4c05      	ldr	r4, [pc, #20]	; (1540c <lsm6dso_xl_offset_weight_set+0x68>)
   153f8:	47a0      	blx	r4
   153fa:	0003      	movs	r3, r0
   153fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   153fe:	68fb      	ldr	r3, [r7, #12]
}
   15400:	0018      	movs	r0, r3
   15402:	46bd      	mov	sp, r7
   15404:	b005      	add	sp, #20
   15406:	bd90      	pop	{r4, r7, pc}
   15408:	00014c15 	.word	0x00014c15
   1540c:	00014c5b 	.word	0x00014c5b

00015410 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15410:	b590      	push	{r4, r7, lr}
   15412:	b085      	sub	sp, #20
   15414:	af00      	add	r7, sp, #0
   15416:	6078      	str	r0, [r7, #4]
   15418:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1541a:	2308      	movs	r3, #8
   1541c:	18fa      	adds	r2, r7, r3
   1541e:	6878      	ldr	r0, [r7, #4]
   15420:	2301      	movs	r3, #1
   15422:	211e      	movs	r1, #30
   15424:	4c08      	ldr	r4, [pc, #32]	; (15448 <lsm6dso_xl_flag_data_ready_get+0x38>)
   15426:	47a0      	blx	r4
   15428:	0003      	movs	r3, r0
   1542a:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   1542c:	2308      	movs	r3, #8
   1542e:	18fb      	adds	r3, r7, r3
   15430:	781b      	ldrb	r3, [r3, #0]
   15432:	07db      	lsls	r3, r3, #31
   15434:	0fdb      	lsrs	r3, r3, #31
   15436:	b2db      	uxtb	r3, r3
   15438:	001a      	movs	r2, r3
   1543a:	683b      	ldr	r3, [r7, #0]
   1543c:	701a      	strb	r2, [r3, #0]

  return ret;
   1543e:	68fb      	ldr	r3, [r7, #12]
}
   15440:	0018      	movs	r0, r3
   15442:	46bd      	mov	sp, r7
   15444:	b005      	add	sp, #20
   15446:	bd90      	pop	{r4, r7, pc}
   15448:	00014c15 	.word	0x00014c15

0001544c <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   1544c:	b590      	push	{r4, r7, lr}
   1544e:	b087      	sub	sp, #28
   15450:	af00      	add	r7, sp, #0
   15452:	6078      	str	r0, [r7, #4]
   15454:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   15456:	230c      	movs	r3, #12
   15458:	18fa      	adds	r2, r7, r3
   1545a:	6878      	ldr	r0, [r7, #4]
   1545c:	2306      	movs	r3, #6
   1545e:	2128      	movs	r1, #40	; 0x28
   15460:	4c26      	ldr	r4, [pc, #152]	; (154fc <lsm6dso_acceleration_raw_get+0xb0>)
   15462:	47a0      	blx	r4
   15464:	0003      	movs	r3, r0
   15466:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   15468:	230c      	movs	r3, #12
   1546a:	18fb      	adds	r3, r7, r3
   1546c:	785b      	ldrb	r3, [r3, #1]
   1546e:	b21a      	sxth	r2, r3
   15470:	683b      	ldr	r3, [r7, #0]
   15472:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15474:	683b      	ldr	r3, [r7, #0]
   15476:	2200      	movs	r2, #0
   15478:	5e9b      	ldrsh	r3, [r3, r2]
   1547a:	b29b      	uxth	r3, r3
   1547c:	021b      	lsls	r3, r3, #8
   1547e:	b29a      	uxth	r2, r3
   15480:	230c      	movs	r3, #12
   15482:	18fb      	adds	r3, r7, r3
   15484:	781b      	ldrb	r3, [r3, #0]
   15486:	b29b      	uxth	r3, r3
   15488:	18d3      	adds	r3, r2, r3
   1548a:	b29b      	uxth	r3, r3
   1548c:	b21a      	sxth	r2, r3
   1548e:	683b      	ldr	r3, [r7, #0]
   15490:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15492:	683b      	ldr	r3, [r7, #0]
   15494:	3302      	adds	r3, #2
   15496:	220c      	movs	r2, #12
   15498:	18ba      	adds	r2, r7, r2
   1549a:	78d2      	ldrb	r2, [r2, #3]
   1549c:	b212      	sxth	r2, r2
   1549e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   154a0:	683b      	ldr	r3, [r7, #0]
   154a2:	3302      	adds	r3, #2
   154a4:	683a      	ldr	r2, [r7, #0]
   154a6:	3202      	adds	r2, #2
   154a8:	2100      	movs	r1, #0
   154aa:	5e52      	ldrsh	r2, [r2, r1]
   154ac:	b292      	uxth	r2, r2
   154ae:	0212      	lsls	r2, r2, #8
   154b0:	b291      	uxth	r1, r2
   154b2:	220c      	movs	r2, #12
   154b4:	18ba      	adds	r2, r7, r2
   154b6:	7892      	ldrb	r2, [r2, #2]
   154b8:	b292      	uxth	r2, r2
   154ba:	188a      	adds	r2, r1, r2
   154bc:	b292      	uxth	r2, r2
   154be:	b212      	sxth	r2, r2
   154c0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   154c2:	683b      	ldr	r3, [r7, #0]
   154c4:	3304      	adds	r3, #4
   154c6:	220c      	movs	r2, #12
   154c8:	18ba      	adds	r2, r7, r2
   154ca:	7952      	ldrb	r2, [r2, #5]
   154cc:	b212      	sxth	r2, r2
   154ce:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   154d0:	683b      	ldr	r3, [r7, #0]
   154d2:	3304      	adds	r3, #4
   154d4:	683a      	ldr	r2, [r7, #0]
   154d6:	3204      	adds	r2, #4
   154d8:	2100      	movs	r1, #0
   154da:	5e52      	ldrsh	r2, [r2, r1]
   154dc:	b292      	uxth	r2, r2
   154de:	0212      	lsls	r2, r2, #8
   154e0:	b291      	uxth	r1, r2
   154e2:	220c      	movs	r2, #12
   154e4:	18ba      	adds	r2, r7, r2
   154e6:	7912      	ldrb	r2, [r2, #4]
   154e8:	b292      	uxth	r2, r2
   154ea:	188a      	adds	r2, r1, r2
   154ec:	b292      	uxth	r2, r2
   154ee:	b212      	sxth	r2, r2
   154f0:	801a      	strh	r2, [r3, #0]

  return ret;
   154f2:	697b      	ldr	r3, [r7, #20]
}
   154f4:	0018      	movs	r0, r3
   154f6:	46bd      	mov	sp, r7
   154f8:	b007      	add	sp, #28
   154fa:	bd90      	pop	{r4, r7, pc}
   154fc:	00014c15 	.word	0x00014c15

00015500 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15500:	b590      	push	{r4, r7, lr}
   15502:	b085      	sub	sp, #20
   15504:	af00      	add	r7, sp, #0
   15506:	6078      	str	r0, [r7, #4]
   15508:	000a      	movs	r2, r1
   1550a:	1cfb      	adds	r3, r7, #3
   1550c:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   1550e:	2308      	movs	r3, #8
   15510:	18fa      	adds	r2, r7, r3
   15512:	6878      	ldr	r0, [r7, #4]
   15514:	2301      	movs	r3, #1
   15516:	2101      	movs	r1, #1
   15518:	4c11      	ldr	r4, [pc, #68]	; (15560 <lsm6dso_mem_bank_set+0x60>)
   1551a:	47a0      	blx	r4
   1551c:	0003      	movs	r3, r0
   1551e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15520:	68fb      	ldr	r3, [r7, #12]
   15522:	2b00      	cmp	r3, #0
   15524:	d117      	bne.n	15556 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15526:	1cfb      	adds	r3, r7, #3
   15528:	781b      	ldrb	r3, [r3, #0]
   1552a:	2203      	movs	r2, #3
   1552c:	4013      	ands	r3, r2
   1552e:	b2da      	uxtb	r2, r3
   15530:	2308      	movs	r3, #8
   15532:	18fb      	adds	r3, r7, r3
   15534:	0190      	lsls	r0, r2, #6
   15536:	781a      	ldrb	r2, [r3, #0]
   15538:	213f      	movs	r1, #63	; 0x3f
   1553a:	400a      	ands	r2, r1
   1553c:	1c11      	adds	r1, r2, #0
   1553e:	1c02      	adds	r2, r0, #0
   15540:	430a      	orrs	r2, r1
   15542:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15544:	2308      	movs	r3, #8
   15546:	18fa      	adds	r2, r7, r3
   15548:	6878      	ldr	r0, [r7, #4]
   1554a:	2301      	movs	r3, #1
   1554c:	2101      	movs	r1, #1
   1554e:	4c05      	ldr	r4, [pc, #20]	; (15564 <lsm6dso_mem_bank_set+0x64>)
   15550:	47a0      	blx	r4
   15552:	0003      	movs	r3, r0
   15554:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15556:	68fb      	ldr	r3, [r7, #12]
}
   15558:	0018      	movs	r0, r3
   1555a:	46bd      	mov	sp, r7
   1555c:	b005      	add	sp, #20
   1555e:	bd90      	pop	{r4, r7, pc}
   15560:	00014c15 	.word	0x00014c15
   15564:	00014c5b 	.word	0x00014c5b

00015568 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15568:	b590      	push	{r4, r7, lr}
   1556a:	b085      	sub	sp, #20
   1556c:	af00      	add	r7, sp, #0
   1556e:	6078      	str	r0, [r7, #4]
   15570:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15572:	683a      	ldr	r2, [r7, #0]
   15574:	6878      	ldr	r0, [r7, #4]
   15576:	2301      	movs	r3, #1
   15578:	210f      	movs	r1, #15
   1557a:	4c04      	ldr	r4, [pc, #16]	; (1558c <lsm6dso_device_id_get+0x24>)
   1557c:	47a0      	blx	r4
   1557e:	0003      	movs	r3, r0
   15580:	60fb      	str	r3, [r7, #12]

  return ret;
   15582:	68fb      	ldr	r3, [r7, #12]
}
   15584:	0018      	movs	r0, r3
   15586:	46bd      	mov	sp, r7
   15588:	b005      	add	sp, #20
   1558a:	bd90      	pop	{r4, r7, pc}
   1558c:	00014c15 	.word	0x00014c15

00015590 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15590:	b590      	push	{r4, r7, lr}
   15592:	b085      	sub	sp, #20
   15594:	af00      	add	r7, sp, #0
   15596:	6078      	str	r0, [r7, #4]
   15598:	000a      	movs	r2, r1
   1559a:	1cfb      	adds	r3, r7, #3
   1559c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1559e:	2308      	movs	r3, #8
   155a0:	18fa      	adds	r2, r7, r3
   155a2:	6878      	ldr	r0, [r7, #4]
   155a4:	2301      	movs	r3, #1
   155a6:	2112      	movs	r1, #18
   155a8:	4c12      	ldr	r4, [pc, #72]	; (155f4 <lsm6dso_reset_set+0x64>)
   155aa:	47a0      	blx	r4
   155ac:	0003      	movs	r3, r0
   155ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   155b0:	68fb      	ldr	r3, [r7, #12]
   155b2:	2b00      	cmp	r3, #0
   155b4:	d119      	bne.n	155ea <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   155b6:	1cfb      	adds	r3, r7, #3
   155b8:	781b      	ldrb	r3, [r3, #0]
   155ba:	2201      	movs	r2, #1
   155bc:	4013      	ands	r3, r2
   155be:	b2da      	uxtb	r2, r3
   155c0:	2308      	movs	r3, #8
   155c2:	18fb      	adds	r3, r7, r3
   155c4:	2101      	movs	r1, #1
   155c6:	400a      	ands	r2, r1
   155c8:	0010      	movs	r0, r2
   155ca:	781a      	ldrb	r2, [r3, #0]
   155cc:	2101      	movs	r1, #1
   155ce:	438a      	bics	r2, r1
   155d0:	1c11      	adds	r1, r2, #0
   155d2:	1c02      	adds	r2, r0, #0
   155d4:	430a      	orrs	r2, r1
   155d6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   155d8:	2308      	movs	r3, #8
   155da:	18fa      	adds	r2, r7, r3
   155dc:	6878      	ldr	r0, [r7, #4]
   155de:	2301      	movs	r3, #1
   155e0:	2112      	movs	r1, #18
   155e2:	4c05      	ldr	r4, [pc, #20]	; (155f8 <lsm6dso_reset_set+0x68>)
   155e4:	47a0      	blx	r4
   155e6:	0003      	movs	r3, r0
   155e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   155ea:	68fb      	ldr	r3, [r7, #12]
}
   155ec:	0018      	movs	r0, r3
   155ee:	46bd      	mov	sp, r7
   155f0:	b005      	add	sp, #20
   155f2:	bd90      	pop	{r4, r7, pc}
   155f4:	00014c15 	.word	0x00014c15
   155f8:	00014c5b 	.word	0x00014c5b

000155fc <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   155fc:	b590      	push	{r4, r7, lr}
   155fe:	b085      	sub	sp, #20
   15600:	af00      	add	r7, sp, #0
   15602:	6078      	str	r0, [r7, #4]
   15604:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15606:	2308      	movs	r3, #8
   15608:	18fa      	adds	r2, r7, r3
   1560a:	6878      	ldr	r0, [r7, #4]
   1560c:	2301      	movs	r3, #1
   1560e:	2112      	movs	r1, #18
   15610:	4c08      	ldr	r4, [pc, #32]	; (15634 <lsm6dso_reset_get+0x38>)
   15612:	47a0      	blx	r4
   15614:	0003      	movs	r3, r0
   15616:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15618:	2308      	movs	r3, #8
   1561a:	18fb      	adds	r3, r7, r3
   1561c:	781b      	ldrb	r3, [r3, #0]
   1561e:	07db      	lsls	r3, r3, #31
   15620:	0fdb      	lsrs	r3, r3, #31
   15622:	b2db      	uxtb	r3, r3
   15624:	001a      	movs	r2, r3
   15626:	683b      	ldr	r3, [r7, #0]
   15628:	701a      	strb	r2, [r3, #0]

  return ret;
   1562a:	68fb      	ldr	r3, [r7, #12]
}
   1562c:	0018      	movs	r0, r3
   1562e:	46bd      	mov	sp, r7
   15630:	b005      	add	sp, #20
   15632:	bd90      	pop	{r4, r7, pc}
   15634:	00014c15 	.word	0x00014c15

00015638 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15638:	b590      	push	{r4, r7, lr}
   1563a:	b085      	sub	sp, #20
   1563c:	af00      	add	r7, sp, #0
   1563e:	6078      	str	r0, [r7, #4]
   15640:	000a      	movs	r2, r1
   15642:	1cfb      	adds	r3, r7, #3
   15644:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15646:	2308      	movs	r3, #8
   15648:	18fa      	adds	r2, r7, r3
   1564a:	6878      	ldr	r0, [r7, #4]
   1564c:	2301      	movs	r3, #1
   1564e:	2110      	movs	r1, #16
   15650:	4c12      	ldr	r4, [pc, #72]	; (1569c <lsm6dso_xl_filter_lp2_set+0x64>)
   15652:	47a0      	blx	r4
   15654:	0003      	movs	r3, r0
   15656:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15658:	68fb      	ldr	r3, [r7, #12]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d119      	bne.n	15692 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   1565e:	1cfb      	adds	r3, r7, #3
   15660:	781b      	ldrb	r3, [r3, #0]
   15662:	2201      	movs	r2, #1
   15664:	4013      	ands	r3, r2
   15666:	b2da      	uxtb	r2, r3
   15668:	2308      	movs	r3, #8
   1566a:	18fb      	adds	r3, r7, r3
   1566c:	2101      	movs	r1, #1
   1566e:	400a      	ands	r2, r1
   15670:	1890      	adds	r0, r2, r2
   15672:	781a      	ldrb	r2, [r3, #0]
   15674:	2102      	movs	r1, #2
   15676:	438a      	bics	r2, r1
   15678:	1c11      	adds	r1, r2, #0
   1567a:	1c02      	adds	r2, r0, #0
   1567c:	430a      	orrs	r2, r1
   1567e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15680:	2308      	movs	r3, #8
   15682:	18fa      	adds	r2, r7, r3
   15684:	6878      	ldr	r0, [r7, #4]
   15686:	2301      	movs	r3, #1
   15688:	2110      	movs	r1, #16
   1568a:	4c05      	ldr	r4, [pc, #20]	; (156a0 <lsm6dso_xl_filter_lp2_set+0x68>)
   1568c:	47a0      	blx	r4
   1568e:	0003      	movs	r3, r0
   15690:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15692:	68fb      	ldr	r3, [r7, #12]
}
   15694:	0018      	movs	r0, r3
   15696:	46bd      	mov	sp, r7
   15698:	b005      	add	sp, #20
   1569a:	bd90      	pop	{r4, r7, pc}
   1569c:	00014c15 	.word	0x00014c15
   156a0:	00014c5b 	.word	0x00014c5b

000156a4 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   156a4:	b590      	push	{r4, r7, lr}
   156a6:	b085      	sub	sp, #20
   156a8:	af00      	add	r7, sp, #0
   156aa:	6078      	str	r0, [r7, #4]
   156ac:	000a      	movs	r2, r1
   156ae:	1cfb      	adds	r3, r7, #3
   156b0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   156b2:	2308      	movs	r3, #8
   156b4:	18fa      	adds	r2, r7, r3
   156b6:	6878      	ldr	r0, [r7, #4]
   156b8:	2301      	movs	r3, #1
   156ba:	2117      	movs	r1, #23
   156bc:	4c25      	ldr	r4, [pc, #148]	; (15754 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   156be:	47a0      	blx	r4
   156c0:	0003      	movs	r3, r0
   156c2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   156c4:	68fb      	ldr	r3, [r7, #12]
   156c6:	2b00      	cmp	r3, #0
   156c8:	d13f      	bne.n	1574a <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   156ca:	1cfb      	adds	r3, r7, #3
   156cc:	781b      	ldrb	r3, [r3, #0]
   156ce:	091b      	lsrs	r3, r3, #4
   156d0:	b2db      	uxtb	r3, r3
   156d2:	1c1a      	adds	r2, r3, #0
   156d4:	2301      	movs	r3, #1
   156d6:	4013      	ands	r3, r2
   156d8:	b2da      	uxtb	r2, r3
   156da:	2308      	movs	r3, #8
   156dc:	18fb      	adds	r3, r7, r3
   156de:	2101      	movs	r1, #1
   156e0:	400a      	ands	r2, r1
   156e2:	0090      	lsls	r0, r2, #2
   156e4:	781a      	ldrb	r2, [r3, #0]
   156e6:	2104      	movs	r1, #4
   156e8:	438a      	bics	r2, r1
   156ea:	1c11      	adds	r1, r2, #0
   156ec:	1c02      	adds	r2, r0, #0
   156ee:	430a      	orrs	r2, r1
   156f0:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   156f2:	1cfb      	adds	r3, r7, #3
   156f4:	781b      	ldrb	r3, [r3, #0]
   156f6:	095b      	lsrs	r3, r3, #5
   156f8:	b2db      	uxtb	r3, r3
   156fa:	1c1a      	adds	r2, r3, #0
   156fc:	2301      	movs	r3, #1
   156fe:	4013      	ands	r3, r2
   15700:	b2da      	uxtb	r2, r3
   15702:	2308      	movs	r3, #8
   15704:	18fb      	adds	r3, r7, r3
   15706:	2101      	movs	r1, #1
   15708:	400a      	ands	r2, r1
   1570a:	0110      	lsls	r0, r2, #4
   1570c:	781a      	ldrb	r2, [r3, #0]
   1570e:	2110      	movs	r1, #16
   15710:	438a      	bics	r2, r1
   15712:	1c11      	adds	r1, r2, #0
   15714:	1c02      	adds	r2, r0, #0
   15716:	430a      	orrs	r2, r1
   15718:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   1571a:	1cfb      	adds	r3, r7, #3
   1571c:	781b      	ldrb	r3, [r3, #0]
   1571e:	2207      	movs	r2, #7
   15720:	4013      	ands	r3, r2
   15722:	b2da      	uxtb	r2, r3
   15724:	2308      	movs	r3, #8
   15726:	18fb      	adds	r3, r7, r3
   15728:	0150      	lsls	r0, r2, #5
   1572a:	781a      	ldrb	r2, [r3, #0]
   1572c:	211f      	movs	r1, #31
   1572e:	400a      	ands	r2, r1
   15730:	1c11      	adds	r1, r2, #0
   15732:	1c02      	adds	r2, r0, #0
   15734:	430a      	orrs	r2, r1
   15736:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15738:	2308      	movs	r3, #8
   1573a:	18fa      	adds	r2, r7, r3
   1573c:	6878      	ldr	r0, [r7, #4]
   1573e:	2301      	movs	r3, #1
   15740:	2117      	movs	r1, #23
   15742:	4c05      	ldr	r4, [pc, #20]	; (15758 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15744:	47a0      	blx	r4
   15746:	0003      	movs	r3, r0
   15748:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1574a:	68fb      	ldr	r3, [r7, #12]
}
   1574c:	0018      	movs	r0, r3
   1574e:	46bd      	mov	sp, r7
   15750:	b005      	add	sp, #20
   15752:	bd90      	pop	{r4, r7, pc}
   15754:	00014c15 	.word	0x00014c15
   15758:	00014c5b 	.word	0x00014c5b

0001575c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   1575c:	b590      	push	{r4, r7, lr}
   1575e:	b087      	sub	sp, #28
   15760:	af00      	add	r7, sp, #0
   15762:	6078      	str	r0, [r7, #4]
   15764:	000a      	movs	r2, r1
   15766:	1cfb      	adds	r3, r7, #3
   15768:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1576a:	230c      	movs	r3, #12
   1576c:	18fa      	adds	r2, r7, r3
   1576e:	6878      	ldr	r0, [r7, #4]
   15770:	2301      	movs	r3, #1
   15772:	2118      	movs	r1, #24
   15774:	4c28      	ldr	r4, [pc, #160]	; (15818 <lsm6dso_i3c_disable_set+0xbc>)
   15776:	47a0      	blx	r4
   15778:	0003      	movs	r3, r0
   1577a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   1577c:	697b      	ldr	r3, [r7, #20]
   1577e:	2b00      	cmp	r3, #0
   15780:	d11c      	bne.n	157bc <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15782:	1cfb      	adds	r3, r7, #3
   15784:	781b      	ldrb	r3, [r3, #0]
   15786:	09db      	lsrs	r3, r3, #7
   15788:	b2db      	uxtb	r3, r3
   1578a:	1c1a      	adds	r2, r3, #0
   1578c:	2301      	movs	r3, #1
   1578e:	4013      	ands	r3, r2
   15790:	b2da      	uxtb	r2, r3
   15792:	230c      	movs	r3, #12
   15794:	18fb      	adds	r3, r7, r3
   15796:	2101      	movs	r1, #1
   15798:	400a      	ands	r2, r1
   1579a:	1890      	adds	r0, r2, r2
   1579c:	781a      	ldrb	r2, [r3, #0]
   1579e:	2102      	movs	r1, #2
   157a0:	438a      	bics	r2, r1
   157a2:	1c11      	adds	r1, r2, #0
   157a4:	1c02      	adds	r2, r0, #0
   157a6:	430a      	orrs	r2, r1
   157a8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   157aa:	230c      	movs	r3, #12
   157ac:	18fa      	adds	r2, r7, r3
   157ae:	6878      	ldr	r0, [r7, #4]
   157b0:	2301      	movs	r3, #1
   157b2:	2118      	movs	r1, #24
   157b4:	4c19      	ldr	r4, [pc, #100]	; (1581c <lsm6dso_i3c_disable_set+0xc0>)
   157b6:	47a0      	blx	r4
   157b8:	0003      	movs	r3, r0
   157ba:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   157bc:	697b      	ldr	r3, [r7, #20]
   157be:	2b00      	cmp	r3, #0
   157c0:	d108      	bne.n	157d4 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   157c2:	2310      	movs	r3, #16
   157c4:	18fa      	adds	r2, r7, r3
   157c6:	6878      	ldr	r0, [r7, #4]
   157c8:	2301      	movs	r3, #1
   157ca:	2162      	movs	r1, #98	; 0x62
   157cc:	4c12      	ldr	r4, [pc, #72]	; (15818 <lsm6dso_i3c_disable_set+0xbc>)
   157ce:	47a0      	blx	r4
   157d0:	0003      	movs	r3, r0
   157d2:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   157d4:	697b      	ldr	r3, [r7, #20]
   157d6:	2b00      	cmp	r3, #0
   157d8:	d119      	bne.n	1580e <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   157da:	1cfb      	adds	r3, r7, #3
   157dc:	781b      	ldrb	r3, [r3, #0]
   157de:	2203      	movs	r2, #3
   157e0:	4013      	ands	r3, r2
   157e2:	b2da      	uxtb	r2, r3
   157e4:	2310      	movs	r3, #16
   157e6:	18fb      	adds	r3, r7, r3
   157e8:	2103      	movs	r1, #3
   157ea:	400a      	ands	r2, r1
   157ec:	00d0      	lsls	r0, r2, #3
   157ee:	781a      	ldrb	r2, [r3, #0]
   157f0:	2118      	movs	r1, #24
   157f2:	438a      	bics	r2, r1
   157f4:	1c11      	adds	r1, r2, #0
   157f6:	1c02      	adds	r2, r0, #0
   157f8:	430a      	orrs	r2, r1
   157fa:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   157fc:	2310      	movs	r3, #16
   157fe:	18fa      	adds	r2, r7, r3
   15800:	6878      	ldr	r0, [r7, #4]
   15802:	2301      	movs	r3, #1
   15804:	2162      	movs	r1, #98	; 0x62
   15806:	4c05      	ldr	r4, [pc, #20]	; (1581c <lsm6dso_i3c_disable_set+0xc0>)
   15808:	47a0      	blx	r4
   1580a:	0003      	movs	r3, r0
   1580c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   1580e:	697b      	ldr	r3, [r7, #20]
}
   15810:	0018      	movs	r0, r3
   15812:	46bd      	mov	sp, r7
   15814:	b007      	add	sp, #28
   15816:	bd90      	pop	{r4, r7, pc}
   15818:	00014c15 	.word	0x00014c15
   1581c:	00014c5b 	.word	0x00014c5b

00015820 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15820:	b590      	push	{r4, r7, lr}
   15822:	b085      	sub	sp, #20
   15824:	af00      	add	r7, sp, #0
   15826:	6078      	str	r0, [r7, #4]
   15828:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1582a:	687b      	ldr	r3, [r7, #4]
   1582c:	2102      	movs	r1, #2
   1582e:	0018      	movs	r0, r3
   15830:	4b0e      	ldr	r3, [pc, #56]	; (1586c <lsm6dso_fsm_enable_get+0x4c>)
   15832:	4798      	blx	r3
   15834:	0003      	movs	r3, r0
   15836:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15838:	68fb      	ldr	r3, [r7, #12]
   1583a:	2b00      	cmp	r3, #0
   1583c:	d107      	bne.n	1584e <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   1583e:	683a      	ldr	r2, [r7, #0]
   15840:	6878      	ldr	r0, [r7, #4]
   15842:	2302      	movs	r3, #2
   15844:	2146      	movs	r1, #70	; 0x46
   15846:	4c0a      	ldr	r4, [pc, #40]	; (15870 <lsm6dso_fsm_enable_get+0x50>)
   15848:	47a0      	blx	r4
   1584a:	0003      	movs	r3, r0
   1584c:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   1584e:	68fb      	ldr	r3, [r7, #12]
   15850:	2b00      	cmp	r3, #0
   15852:	d106      	bne.n	15862 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15854:	687b      	ldr	r3, [r7, #4]
   15856:	2100      	movs	r1, #0
   15858:	0018      	movs	r0, r3
   1585a:	4b04      	ldr	r3, [pc, #16]	; (1586c <lsm6dso_fsm_enable_get+0x4c>)
   1585c:	4798      	blx	r3
   1585e:	0003      	movs	r3, r0
   15860:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15862:	68fb      	ldr	r3, [r7, #12]
}
   15864:	0018      	movs	r0, r3
   15866:	46bd      	mov	sp, r7
   15868:	b005      	add	sp, #20
   1586a:	bd90      	pop	{r4, r7, pc}
   1586c:	00015501 	.word	0x00015501
   15870:	00014c15 	.word	0x00014c15

00015874 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15874:	b590      	push	{r4, r7, lr}
   15876:	b085      	sub	sp, #20
   15878:	af00      	add	r7, sp, #0
   1587a:	6078      	str	r0, [r7, #4]
   1587c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1587e:	687b      	ldr	r3, [r7, #4]
   15880:	2102      	movs	r1, #2
   15882:	0018      	movs	r0, r3
   15884:	4b21      	ldr	r3, [pc, #132]	; (1590c <lsm6dso_fsm_data_rate_get+0x98>)
   15886:	4798      	blx	r3
   15888:	0003      	movs	r3, r0
   1588a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1588c:	68fb      	ldr	r3, [r7, #12]
   1588e:	2b00      	cmp	r3, #0
   15890:	d108      	bne.n	158a4 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15892:	2308      	movs	r3, #8
   15894:	18fa      	adds	r2, r7, r3
   15896:	6878      	ldr	r0, [r7, #4]
   15898:	2301      	movs	r3, #1
   1589a:	215f      	movs	r1, #95	; 0x5f
   1589c:	4c1c      	ldr	r4, [pc, #112]	; (15910 <lsm6dso_fsm_data_rate_get+0x9c>)
   1589e:	47a0      	blx	r4
   158a0:	0003      	movs	r3, r0
   158a2:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   158a4:	68fb      	ldr	r3, [r7, #12]
   158a6:	2b00      	cmp	r3, #0
   158a8:	d12b      	bne.n	15902 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   158aa:	2308      	movs	r3, #8
   158ac:	18fb      	adds	r3, r7, r3
   158ae:	781b      	ldrb	r3, [r3, #0]
   158b0:	06db      	lsls	r3, r3, #27
   158b2:	0f9b      	lsrs	r3, r3, #30
   158b4:	b2db      	uxtb	r3, r3
   158b6:	2b01      	cmp	r3, #1
   158b8:	d00c      	beq.n	158d4 <lsm6dso_fsm_data_rate_get+0x60>
   158ba:	dc02      	bgt.n	158c2 <lsm6dso_fsm_data_rate_get+0x4e>
   158bc:	2b00      	cmp	r3, #0
   158be:	d005      	beq.n	158cc <lsm6dso_fsm_data_rate_get+0x58>
   158c0:	e014      	b.n	158ec <lsm6dso_fsm_data_rate_get+0x78>
   158c2:	2b02      	cmp	r3, #2
   158c4:	d00a      	beq.n	158dc <lsm6dso_fsm_data_rate_get+0x68>
   158c6:	2b03      	cmp	r3, #3
   158c8:	d00c      	beq.n	158e4 <lsm6dso_fsm_data_rate_get+0x70>
   158ca:	e00f      	b.n	158ec <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   158cc:	683b      	ldr	r3, [r7, #0]
   158ce:	2200      	movs	r2, #0
   158d0:	701a      	strb	r2, [r3, #0]
        break;
   158d2:	e00f      	b.n	158f4 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   158d4:	683b      	ldr	r3, [r7, #0]
   158d6:	2201      	movs	r2, #1
   158d8:	701a      	strb	r2, [r3, #0]
        break;
   158da:	e00b      	b.n	158f4 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   158dc:	683b      	ldr	r3, [r7, #0]
   158de:	2202      	movs	r2, #2
   158e0:	701a      	strb	r2, [r3, #0]
        break;
   158e2:	e007      	b.n	158f4 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   158e4:	683b      	ldr	r3, [r7, #0]
   158e6:	2203      	movs	r2, #3
   158e8:	701a      	strb	r2, [r3, #0]
        break;
   158ea:	e003      	b.n	158f4 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   158ec:	683b      	ldr	r3, [r7, #0]
   158ee:	2200      	movs	r2, #0
   158f0:	701a      	strb	r2, [r3, #0]
        break;
   158f2:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   158f4:	687b      	ldr	r3, [r7, #4]
   158f6:	2100      	movs	r1, #0
   158f8:	0018      	movs	r0, r3
   158fa:	4b04      	ldr	r3, [pc, #16]	; (1590c <lsm6dso_fsm_data_rate_get+0x98>)
   158fc:	4798      	blx	r3
   158fe:	0003      	movs	r3, r0
   15900:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15902:	68fb      	ldr	r3, [r7, #12]
}
   15904:	0018      	movs	r0, r3
   15906:	46bd      	mov	sp, r7
   15908:	b005      	add	sp, #20
   1590a:	bd90      	pop	{r4, r7, pc}
   1590c:	00015501 	.word	0x00015501
   15910:	00014c15 	.word	0x00014c15

00015914 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15914:	b580      	push	{r7, lr}
   15916:	b086      	sub	sp, #24
   15918:	af00      	add	r7, sp, #0
   1591a:	60f8      	str	r0, [r7, #12]
   1591c:	0008      	movs	r0, r1
   1591e:	607a      	str	r2, [r7, #4]
   15920:	0019      	movs	r1, r3
   15922:	230b      	movs	r3, #11
   15924:	18fb      	adds	r3, r7, r3
   15926:	1c02      	adds	r2, r0, #0
   15928:	701a      	strb	r2, [r3, #0]
   1592a:	2308      	movs	r3, #8
   1592c:	18fb      	adds	r3, r7, r3
   1592e:	1c0a      	adds	r2, r1, #0
   15930:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   15932:	2300      	movs	r3, #0
   15934:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
   15936:	4b19      	ldr	r3, [pc, #100]	; (1599c <platform_write+0x88>)
   15938:	220b      	movs	r2, #11
   1593a:	18ba      	adds	r2, r7, r2
   1593c:	7812      	ldrb	r2, [r2, #0]
   1593e:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
   15940:	2300      	movs	r3, #0
   15942:	617b      	str	r3, [r7, #20]
   15944:	e00a      	b.n	1595c <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
   15946:	697b      	ldr	r3, [r7, #20]
   15948:	3301      	adds	r3, #1
   1594a:	697a      	ldr	r2, [r7, #20]
   1594c:	6879      	ldr	r1, [r7, #4]
   1594e:	188a      	adds	r2, r1, r2
   15950:	7811      	ldrb	r1, [r2, #0]
   15952:	4a12      	ldr	r2, [pc, #72]	; (1599c <platform_write+0x88>)
   15954:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
   15956:	697b      	ldr	r3, [r7, #20]
   15958:	3301      	adds	r3, #1
   1595a:	617b      	str	r3, [r7, #20]
   1595c:	2308      	movs	r3, #8
   1595e:	18fb      	adds	r3, r7, r3
   15960:	881a      	ldrh	r2, [r3, #0]
   15962:	697b      	ldr	r3, [r7, #20]
   15964:	429a      	cmp	r2, r3
   15966:	dcee      	bgt.n	15946 <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
   15968:	4b0d      	ldr	r3, [pc, #52]	; (159a0 <platform_write+0x8c>)
   1596a:	226b      	movs	r2, #107	; 0x6b
   1596c:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
   1596e:	2308      	movs	r3, #8
   15970:	18fb      	adds	r3, r7, r3
   15972:	881b      	ldrh	r3, [r3, #0]
   15974:	3301      	adds	r3, #1
   15976:	b29a      	uxth	r2, r3
   15978:	4b09      	ldr	r3, [pc, #36]	; (159a0 <platform_write+0x8c>)
   1597a:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   1597c:	4b08      	ldr	r3, [pc, #32]	; (159a0 <platform_write+0x8c>)
   1597e:	4a07      	ldr	r2, [pc, #28]	; (1599c <platform_write+0x88>)
   15980:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
   15982:	4b07      	ldr	r3, [pc, #28]	; (159a0 <platform_write+0x8c>)
   15984:	2164      	movs	r1, #100	; 0x64
   15986:	0018      	movs	r0, r3
   15988:	4b06      	ldr	r3, [pc, #24]	; (159a4 <platform_write+0x90>)
   1598a:	4798      	blx	r3
   1598c:	0003      	movs	r3, r0
   1598e:	613b      	str	r3, [r7, #16]
	return error;
   15990:	693b      	ldr	r3, [r7, #16]

}
   15992:	0018      	movs	r0, r3
   15994:	46bd      	mov	sp, r7
   15996:	b006      	add	sp, #24
   15998:	bd80      	pop	{r7, pc}
   1599a:	46c0      	nop			; (mov r8, r8)
   1599c:	20004850 	.word	0x20004850
   159a0:	20004890 	.word	0x20004890
   159a4:	00014a29 	.word	0x00014a29

000159a8 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   159a8:	b580      	push	{r7, lr}
   159aa:	b086      	sub	sp, #24
   159ac:	af00      	add	r7, sp, #0
   159ae:	60f8      	str	r0, [r7, #12]
   159b0:	0008      	movs	r0, r1
   159b2:	607a      	str	r2, [r7, #4]
   159b4:	0019      	movs	r1, r3
   159b6:	230b      	movs	r3, #11
   159b8:	18fb      	adds	r3, r7, r3
   159ba:	1c02      	adds	r2, r0, #0
   159bc:	701a      	strb	r2, [r3, #0]
   159be:	2308      	movs	r3, #8
   159c0:	18fb      	adds	r3, r7, r3
   159c2:	1c0a      	adds	r2, r1, #0
   159c4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   159c6:	2300      	movs	r3, #0
   159c8:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
   159ca:	4b13      	ldr	r3, [pc, #76]	; (15a18 <platform_read+0x70>)
   159cc:	226b      	movs	r2, #107	; 0x6b
   159ce:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   159d0:	4b11      	ldr	r3, [pc, #68]	; (15a18 <platform_read+0x70>)
   159d2:	2208      	movs	r2, #8
   159d4:	18ba      	adds	r2, r7, r2
   159d6:	8812      	ldrh	r2, [r2, #0]
   159d8:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   159da:	4b0f      	ldr	r3, [pc, #60]	; (15a18 <platform_read+0x70>)
   159dc:	687a      	ldr	r2, [r7, #4]
   159de:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
   159e0:	4b0d      	ldr	r3, [pc, #52]	; (15a18 <platform_read+0x70>)
   159e2:	2201      	movs	r2, #1
   159e4:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   159e6:	4b0d      	ldr	r3, [pc, #52]	; (15a1c <platform_read+0x74>)
   159e8:	220b      	movs	r2, #11
   159ea:	18ba      	adds	r2, r7, r2
   159ec:	7812      	ldrb	r2, [r2, #0]
   159ee:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   159f0:	4b0a      	ldr	r3, [pc, #40]	; (15a1c <platform_read+0x74>)
   159f2:	2200      	movs	r2, #0
   159f4:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
   159f6:	4b08      	ldr	r3, [pc, #32]	; (15a18 <platform_read+0x70>)
   159f8:	4a08      	ldr	r2, [pc, #32]	; (15a1c <platform_read+0x74>)
   159fa:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
   159fc:	4b06      	ldr	r3, [pc, #24]	; (15a18 <platform_read+0x70>)
   159fe:	2264      	movs	r2, #100	; 0x64
   15a00:	2105      	movs	r1, #5
   15a02:	0018      	movs	r0, r3
   15a04:	4b06      	ldr	r3, [pc, #24]	; (15a20 <platform_read+0x78>)
   15a06:	4798      	blx	r3
   15a08:	0003      	movs	r3, r0
   15a0a:	617b      	str	r3, [r7, #20]
	
	return error;
   15a0c:	697b      	ldr	r3, [r7, #20]

}
   15a0e:	0018      	movs	r0, r3
   15a10:	46bd      	mov	sp, r7
   15a12:	b006      	add	sp, #24
   15a14:	bd80      	pop	{r7, pc}
   15a16:	46c0      	nop			; (mov r8, r8)
   15a18:	20004890 	.word	0x20004890
   15a1c:	20004850 	.word	0x20004850
   15a20:	00014b01 	.word	0x00014b01

00015a24 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15a24:	b580      	push	{r7, lr}
   15a26:	af00      	add	r7, sp, #0
return &dev_ctx;
   15a28:	4b01      	ldr	r3, [pc, #4]	; (15a30 <GetImuStruct+0xc>)
}
   15a2a:	0018      	movs	r0, r3
   15a2c:	46bd      	mov	sp, r7
   15a2e:	bd80      	pop	{r7, pc}
   15a30:	20000020 	.word	0x20000020

00015a34 <InitImu>:



int32_t InitImu(void)
{
   15a34:	b580      	push	{r7, lr}
   15a36:	b082      	sub	sp, #8
   15a38:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   15a3a:	2300      	movs	r3, #0
   15a3c:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15a3e:	4b23      	ldr	r3, [pc, #140]	; (15acc <InitImu+0x98>)
   15a40:	2101      	movs	r1, #1
   15a42:	0018      	movs	r0, r3
   15a44:	4b22      	ldr	r3, [pc, #136]	; (15ad0 <InitImu+0x9c>)
   15a46:	4798      	blx	r3
   15a48:	0003      	movs	r3, r0
   15a4a:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   15a4c:	1cfa      	adds	r2, r7, #3
   15a4e:	4b1f      	ldr	r3, [pc, #124]	; (15acc <InitImu+0x98>)
   15a50:	0011      	movs	r1, r2
   15a52:	0018      	movs	r0, r3
   15a54:	4b1f      	ldr	r3, [pc, #124]	; (15ad4 <InitImu+0xa0>)
   15a56:	4798      	blx	r3
   15a58:	0002      	movs	r2, r0
   15a5a:	687b      	ldr	r3, [r7, #4]
   15a5c:	4313      	orrs	r3, r2
   15a5e:	607b      	str	r3, [r7, #4]
  } while (rst);
   15a60:	1cfb      	adds	r3, r7, #3
   15a62:	781b      	ldrb	r3, [r3, #0]
   15a64:	2b00      	cmp	r3, #0
   15a66:	d1f1      	bne.n	15a4c <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15a68:	4b18      	ldr	r3, [pc, #96]	; (15acc <InitImu+0x98>)
   15a6a:	2180      	movs	r1, #128	; 0x80
   15a6c:	0018      	movs	r0, r3
   15a6e:	4b1a      	ldr	r3, [pc, #104]	; (15ad8 <InitImu+0xa4>)
   15a70:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15a72:	4b16      	ldr	r3, [pc, #88]	; (15acc <InitImu+0x98>)
   15a74:	2101      	movs	r1, #1
   15a76:	0018      	movs	r0, r3
   15a78:	4b18      	ldr	r3, [pc, #96]	; (15adc <InitImu+0xa8>)
   15a7a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15a7c:	4b13      	ldr	r3, [pc, #76]	; (15acc <InitImu+0x98>)
   15a7e:	2100      	movs	r1, #0
   15a80:	0018      	movs	r0, r3
   15a82:	4b17      	ldr	r3, [pc, #92]	; (15ae0 <InitImu+0xac>)
   15a84:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15a86:	4b11      	ldr	r3, [pc, #68]	; (15acc <InitImu+0x98>)
   15a88:	2101      	movs	r1, #1
   15a8a:	0018      	movs	r0, r3
   15a8c:	4b15      	ldr	r3, [pc, #84]	; (15ae4 <InitImu+0xb0>)
   15a8e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15a90:	4b0e      	ldr	r3, [pc, #56]	; (15acc <InitImu+0x98>)
   15a92:	2101      	movs	r1, #1
   15a94:	0018      	movs	r0, r3
   15a96:	4b14      	ldr	r3, [pc, #80]	; (15ae8 <InitImu+0xb4>)
   15a98:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15a9a:	4b0c      	ldr	r3, [pc, #48]	; (15acc <InitImu+0x98>)
   15a9c:	2100      	movs	r1, #0
   15a9e:	0018      	movs	r0, r3
   15aa0:	4b12      	ldr	r3, [pc, #72]	; (15aec <InitImu+0xb8>)
   15aa2:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15aa4:	4b09      	ldr	r3, [pc, #36]	; (15acc <InitImu+0x98>)
   15aa6:	2106      	movs	r1, #6
   15aa8:	0018      	movs	r0, r3
   15aaa:	4b11      	ldr	r3, [pc, #68]	; (15af0 <InitImu+0xbc>)
   15aac:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15aae:	4b07      	ldr	r3, [pc, #28]	; (15acc <InitImu+0x98>)
   15ab0:	2104      	movs	r1, #4
   15ab2:	0018      	movs	r0, r3
   15ab4:	4b0f      	ldr	r3, [pc, #60]	; (15af4 <InitImu+0xc0>)
   15ab6:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15ab8:	4b04      	ldr	r3, [pc, #16]	; (15acc <InitImu+0x98>)
   15aba:	2101      	movs	r1, #1
   15abc:	0018      	movs	r0, r3
   15abe:	4b0e      	ldr	r3, [pc, #56]	; (15af8 <InitImu+0xc4>)
   15ac0:	4798      	blx	r3

  return error;
   15ac2:	687b      	ldr	r3, [r7, #4]
}
   15ac4:	0018      	movs	r0, r3
   15ac6:	46bd      	mov	sp, r7
   15ac8:	b002      	add	sp, #8
   15aca:	bd80      	pop	{r7, pc}
   15acc:	20000020 	.word	0x20000020
   15ad0:	00015591 	.word	0x00015591
   15ad4:	000155fd 	.word	0x000155fd
   15ad8:	0001575d 	.word	0x0001575d
   15adc:	00015339 	.word	0x00015339
   15ae0:	000153a5 	.word	0x000153a5
   15ae4:	00014d45 	.word	0x00014d45
   15ae8:	00015075 	.word	0x00015075
   15aec:	00014cd9 	.word	0x00014cd9
   15af0:	00015009 	.word	0x00015009
   15af4:	000156a5 	.word	0x000156a5
   15af8:	00015639 	.word	0x00015639

00015afc <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15afc:	b580      	push	{r7, lr}
   15afe:	b082      	sub	sp, #8
   15b00:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15b02:	1cfb      	adds	r3, r7, #3
   15b04:	2200      	movs	r2, #0
   15b06:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15b08:	4b11      	ldr	r3, [pc, #68]	; (15b50 <SeesawGetKeypadCount+0x54>)
   15b0a:	222e      	movs	r2, #46	; 0x2e
   15b0c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15b0e:	4b10      	ldr	r3, [pc, #64]	; (15b50 <SeesawGetKeypadCount+0x54>)
   15b10:	4a10      	ldr	r2, [pc, #64]	; (15b54 <SeesawGetKeypadCount+0x58>)
   15b12:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15b14:	4b0e      	ldr	r3, [pc, #56]	; (15b50 <SeesawGetKeypadCount+0x54>)
   15b16:	2202      	movs	r2, #2
   15b18:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15b1a:	4b0d      	ldr	r3, [pc, #52]	; (15b50 <SeesawGetKeypadCount+0x54>)
   15b1c:	1cfa      	adds	r2, r7, #3
   15b1e:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15b20:	4b0b      	ldr	r3, [pc, #44]	; (15b50 <SeesawGetKeypadCount+0x54>)
   15b22:	2201      	movs	r2, #1
   15b24:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15b26:	4b0a      	ldr	r3, [pc, #40]	; (15b50 <SeesawGetKeypadCount+0x54>)
   15b28:	2264      	movs	r2, #100	; 0x64
   15b2a:	2100      	movs	r1, #0
   15b2c:	0018      	movs	r0, r3
   15b2e:	4b0a      	ldr	r3, [pc, #40]	; (15b58 <SeesawGetKeypadCount+0x5c>)
   15b30:	4798      	blx	r3
   15b32:	0003      	movs	r3, r0
   15b34:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15b36:	687b      	ldr	r3, [r7, #4]
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d003      	beq.n	15b44 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15b3c:	4b07      	ldr	r3, [pc, #28]	; (15b5c <SeesawGetKeypadCount+0x60>)
   15b3e:	0018      	movs	r0, r3
   15b40:	4b07      	ldr	r3, [pc, #28]	; (15b60 <SeesawGetKeypadCount+0x64>)
   15b42:	4798      	blx	r3
    }
    return count;
   15b44:	1cfb      	adds	r3, r7, #3
   15b46:	781b      	ldrb	r3, [r3, #0]
}
   15b48:	0018      	movs	r0, r3
   15b4a:	46bd      	mov	sp, r7
   15b4c:	b002      	add	sp, #8
   15b4e:	bd80      	pop	{r7, pc}
   15b50:	200048a0 	.word	0x200048a0
   15b54:	0003685c 	.word	0x0003685c
   15b58:	00014b01 	.word	0x00014b01
   15b5c:	00036920 	.word	0x00036920
   15b60:	0001e255 	.word	0x0001e255

00015b64 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   15b64:	b580      	push	{r7, lr}
   15b66:	b084      	sub	sp, #16
   15b68:	af00      	add	r7, sp, #0
   15b6a:	6078      	str	r0, [r7, #4]
   15b6c:	000a      	movs	r2, r1
   15b6e:	1cfb      	adds	r3, r7, #3
   15b70:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   15b72:	1cfb      	adds	r3, r7, #3
   15b74:	781b      	ldrb	r3, [r3, #0]
   15b76:	2b00      	cmp	r3, #0
   15b78:	d101      	bne.n	15b7e <SeesawReadKeypad+0x1a>
   15b7a:	2300      	movs	r3, #0
   15b7c:	e026      	b.n	15bcc <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15b7e:	2308      	movs	r3, #8
   15b80:	18fb      	adds	r3, r7, r3
   15b82:	4a14      	ldr	r2, [pc, #80]	; (15bd4 <SeesawReadKeypad+0x70>)
   15b84:	8812      	ldrh	r2, [r2, #0]
   15b86:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15b88:	4b13      	ldr	r3, [pc, #76]	; (15bd8 <SeesawReadKeypad+0x74>)
   15b8a:	222e      	movs	r2, #46	; 0x2e
   15b8c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15b8e:	4b12      	ldr	r3, [pc, #72]	; (15bd8 <SeesawReadKeypad+0x74>)
   15b90:	2208      	movs	r2, #8
   15b92:	18ba      	adds	r2, r7, r2
   15b94:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15b96:	4b10      	ldr	r3, [pc, #64]	; (15bd8 <SeesawReadKeypad+0x74>)
   15b98:	2202      	movs	r2, #2
   15b9a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   15b9c:	4b0e      	ldr	r3, [pc, #56]	; (15bd8 <SeesawReadKeypad+0x74>)
   15b9e:	687a      	ldr	r2, [r7, #4]
   15ba0:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   15ba2:	1cfb      	adds	r3, r7, #3
   15ba4:	781b      	ldrb	r3, [r3, #0]
   15ba6:	b29a      	uxth	r2, r3
   15ba8:	4b0b      	ldr	r3, [pc, #44]	; (15bd8 <SeesawReadKeypad+0x74>)
   15baa:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15bac:	4b0a      	ldr	r3, [pc, #40]	; (15bd8 <SeesawReadKeypad+0x74>)
   15bae:	2264      	movs	r2, #100	; 0x64
   15bb0:	2100      	movs	r1, #0
   15bb2:	0018      	movs	r0, r3
   15bb4:	4b09      	ldr	r3, [pc, #36]	; (15bdc <SeesawReadKeypad+0x78>)
   15bb6:	4798      	blx	r3
   15bb8:	0003      	movs	r3, r0
   15bba:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15bbc:	68fb      	ldr	r3, [r7, #12]
   15bbe:	2b00      	cmp	r3, #0
   15bc0:	d003      	beq.n	15bca <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15bc2:	4b07      	ldr	r3, [pc, #28]	; (15be0 <SeesawReadKeypad+0x7c>)
   15bc4:	0018      	movs	r0, r3
   15bc6:	4b07      	ldr	r3, [pc, #28]	; (15be4 <SeesawReadKeypad+0x80>)
   15bc8:	4798      	blx	r3
    }
    return error;
   15bca:	68fb      	ldr	r3, [r7, #12]
}
   15bcc:	0018      	movs	r0, r3
   15bce:	46bd      	mov	sp, r7
   15bd0:	b004      	add	sp, #16
   15bd2:	bd80      	pop	{r7, pc}
   15bd4:	00036944 	.word	0x00036944
   15bd8:	200048a0 	.word	0x200048a0
   15bdc:	00014b01 	.word	0x00014b01
   15be0:	00036920 	.word	0x00036920
   15be4:	0001e255 	.word	0x0001e255

00015be8 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   15be8:	b5b0      	push	{r4, r5, r7, lr}
   15bea:	b086      	sub	sp, #24
   15bec:	af00      	add	r7, sp, #0
   15bee:	0005      	movs	r5, r0
   15bf0:	000c      	movs	r4, r1
   15bf2:	0010      	movs	r0, r2
   15bf4:	0019      	movs	r1, r3
   15bf6:	1dfb      	adds	r3, r7, #7
   15bf8:	1c2a      	adds	r2, r5, #0
   15bfa:	701a      	strb	r2, [r3, #0]
   15bfc:	1dbb      	adds	r3, r7, #6
   15bfe:	1c22      	adds	r2, r4, #0
   15c00:	701a      	strb	r2, [r3, #0]
   15c02:	1d7b      	adds	r3, r7, #5
   15c04:	1c02      	adds	r2, r0, #0
   15c06:	701a      	strb	r2, [r3, #0]
   15c08:	1d3b      	adds	r3, r7, #4
   15c0a:	1c0a      	adds	r2, r1, #0
   15c0c:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   15c0e:	2308      	movs	r3, #8
   15c10:	18fb      	adds	r3, r7, r3
   15c12:	220e      	movs	r2, #14
   15c14:	701a      	strb	r2, [r3, #0]
   15c16:	2308      	movs	r3, #8
   15c18:	18fb      	adds	r3, r7, r3
   15c1a:	2204      	movs	r2, #4
   15c1c:	705a      	strb	r2, [r3, #1]
   15c1e:	2308      	movs	r3, #8
   15c20:	18fb      	adds	r3, r7, r3
   15c22:	2200      	movs	r2, #0
   15c24:	709a      	strb	r2, [r3, #2]
   15c26:	2308      	movs	r3, #8
   15c28:	18fb      	adds	r3, r7, r3
   15c2a:	2200      	movs	r2, #0
   15c2c:	70da      	strb	r2, [r3, #3]
   15c2e:	2308      	movs	r3, #8
   15c30:	18fb      	adds	r3, r7, r3
   15c32:	1d7a      	adds	r2, r7, #5
   15c34:	7812      	ldrb	r2, [r2, #0]
   15c36:	711a      	strb	r2, [r3, #4]
   15c38:	2308      	movs	r3, #8
   15c3a:	18fb      	adds	r3, r7, r3
   15c3c:	1dba      	adds	r2, r7, #6
   15c3e:	7812      	ldrb	r2, [r2, #0]
   15c40:	715a      	strb	r2, [r3, #5]
   15c42:	2308      	movs	r3, #8
   15c44:	18fb      	adds	r3, r7, r3
   15c46:	1d3a      	adds	r2, r7, #4
   15c48:	7812      	ldrb	r2, [r2, #0]
   15c4a:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   15c4c:	1dfb      	adds	r3, r7, #7
   15c4e:	781b      	ldrb	r3, [r3, #0]
   15c50:	b29b      	uxth	r3, r3
   15c52:	2216      	movs	r2, #22
   15c54:	18ba      	adds	r2, r7, r2
   15c56:	1c19      	adds	r1, r3, #0
   15c58:	1c0b      	adds	r3, r1, #0
   15c5a:	18db      	adds	r3, r3, r3
   15c5c:	185b      	adds	r3, r3, r1
   15c5e:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   15c60:	2316      	movs	r3, #22
   15c62:	18fb      	adds	r3, r7, r3
   15c64:	881b      	ldrh	r3, [r3, #0]
   15c66:	0a1b      	lsrs	r3, r3, #8
   15c68:	b29b      	uxth	r3, r3
   15c6a:	b2da      	uxtb	r2, r3
   15c6c:	2308      	movs	r3, #8
   15c6e:	18fb      	adds	r3, r7, r3
   15c70:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15c72:	2316      	movs	r3, #22
   15c74:	18fb      	adds	r3, r7, r3
   15c76:	881b      	ldrh	r3, [r3, #0]
   15c78:	b2da      	uxtb	r2, r3
   15c7a:	2308      	movs	r3, #8
   15c7c:	18fb      	adds	r3, r7, r3
   15c7e:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   15c80:	4b09      	ldr	r3, [pc, #36]	; (15ca8 <SeesawSetLed+0xc0>)
   15c82:	2208      	movs	r2, #8
   15c84:	18ba      	adds	r2, r7, r2
   15c86:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15c88:	4b07      	ldr	r3, [pc, #28]	; (15ca8 <SeesawSetLed+0xc0>)
   15c8a:	2207      	movs	r2, #7
   15c8c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15c8e:	4b06      	ldr	r3, [pc, #24]	; (15ca8 <SeesawSetLed+0xc0>)
   15c90:	2164      	movs	r1, #100	; 0x64
   15c92:	0018      	movs	r0, r3
   15c94:	4b05      	ldr	r3, [pc, #20]	; (15cac <SeesawSetLed+0xc4>)
   15c96:	4798      	blx	r3
   15c98:	0003      	movs	r3, r0
   15c9a:	613b      	str	r3, [r7, #16]
    return error;
   15c9c:	693b      	ldr	r3, [r7, #16]
}
   15c9e:	0018      	movs	r0, r3
   15ca0:	46bd      	mov	sp, r7
   15ca2:	b006      	add	sp, #24
   15ca4:	bdb0      	pop	{r4, r5, r7, pc}
   15ca6:	46c0      	nop			; (mov r8, r8)
   15ca8:	200048a0 	.word	0x200048a0
   15cac:	00014a29 	.word	0x00014a29

00015cb0 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   15cb0:	b580      	push	{r7, lr}
   15cb2:	b082      	sub	sp, #8
   15cb4:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15cb6:	003b      	movs	r3, r7
   15cb8:	4a0a      	ldr	r2, [pc, #40]	; (15ce4 <SeesawOrderLedUpdate+0x34>)
   15cba:	8812      	ldrh	r2, [r2, #0]
   15cbc:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   15cbe:	4b0a      	ldr	r3, [pc, #40]	; (15ce8 <SeesawOrderLedUpdate+0x38>)
   15cc0:	003a      	movs	r2, r7
   15cc2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   15cc4:	4b08      	ldr	r3, [pc, #32]	; (15ce8 <SeesawOrderLedUpdate+0x38>)
   15cc6:	2202      	movs	r2, #2
   15cc8:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   15cca:	4b07      	ldr	r3, [pc, #28]	; (15ce8 <SeesawOrderLedUpdate+0x38>)
   15ccc:	2164      	movs	r1, #100	; 0x64
   15cce:	0018      	movs	r0, r3
   15cd0:	4b06      	ldr	r3, [pc, #24]	; (15cec <SeesawOrderLedUpdate+0x3c>)
   15cd2:	4798      	blx	r3
   15cd4:	0003      	movs	r3, r0
   15cd6:	607b      	str	r3, [r7, #4]
    return error;
   15cd8:	687b      	ldr	r3, [r7, #4]
}
   15cda:	0018      	movs	r0, r3
   15cdc:	46bd      	mov	sp, r7
   15cde:	b002      	add	sp, #8
   15ce0:	bd80      	pop	{r7, pc}
   15ce2:	46c0      	nop			; (mov r8, r8)
   15ce4:	00036948 	.word	0x00036948
   15ce8:	200048a0 	.word	0x200048a0
   15cec:	00014a29 	.word	0x00014a29

00015cf0 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   15cf0:	b590      	push	{r4, r7, lr}
   15cf2:	b087      	sub	sp, #28
   15cf4:	af00      	add	r7, sp, #0
   15cf6:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!\r\n");
   15cf8:	4b9a      	ldr	r3, [pc, #616]	; (15f64 <vUiHandlerTask+0x274>)
   15cfa:	0018      	movs	r0, r3
   15cfc:	4b9a      	ldr	r3, [pc, #616]	; (15f68 <vUiHandlerTask+0x278>)
   15cfe:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   15d00:	4b9a      	ldr	r3, [pc, #616]	; (15f6c <vUiHandlerTask+0x27c>)
   15d02:	2201      	movs	r2, #1
   15d04:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   15d06:	4b9a      	ldr	r3, [pc, #616]	; (15f70 <vUiHandlerTask+0x280>)
   15d08:	4798      	blx	r3
    //gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
    //gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
	gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   15d0a:	4b9a      	ldr	r3, [pc, #616]	; (15f74 <vUiHandlerTask+0x284>)
   15d0c:	489a      	ldr	r0, [pc, #616]	; (15f78 <vUiHandlerTask+0x288>)
   15d0e:	2208      	movs	r2, #8
   15d10:	2100      	movs	r1, #0
   15d12:	4c9a      	ldr	r4, [pc, #616]	; (15f7c <vUiHandlerTask+0x28c>)
   15d14:	47a0      	blx	r4
	gfx_mono_draw_string("IoTracking", 0, 18, &sysfont);
   15d16:	4b97      	ldr	r3, [pc, #604]	; (15f74 <vUiHandlerTask+0x284>)
   15d18:	4899      	ldr	r0, [pc, #612]	; (15f80 <vUiHandlerTask+0x290>)
   15d1a:	2212      	movs	r2, #18
   15d1c:	2100      	movs	r1, #0
   15d1e:	4c97      	ldr	r4, [pc, #604]	; (15f7c <vUiHandlerTask+0x28c>)
   15d20:	47a0      	blx	r4
	gfx_mono_draw_string("Derek Zhou", 0, 28, &sysfont);
   15d22:	4b94      	ldr	r3, [pc, #592]	; (15f74 <vUiHandlerTask+0x284>)
   15d24:	4897      	ldr	r0, [pc, #604]	; (15f84 <vUiHandlerTask+0x294>)
   15d26:	221c      	movs	r2, #28
   15d28:	2100      	movs	r1, #0
   15d2a:	4c94      	ldr	r4, [pc, #592]	; (15f7c <vUiHandlerTask+0x28c>)
   15d2c:	47a0      	blx	r4
	gfx_mono_draw_string("Weihao H.", 0, 38, &sysfont);
   15d2e:	4b91      	ldr	r3, [pc, #580]	; (15f74 <vUiHandlerTask+0x284>)
   15d30:	4895      	ldr	r0, [pc, #596]	; (15f88 <vUiHandlerTask+0x298>)
   15d32:	2226      	movs	r2, #38	; 0x26
   15d34:	2100      	movs	r1, #0
   15d36:	4c91      	ldr	r4, [pc, #580]	; (15f7c <vUiHandlerTask+0x28c>)
   15d38:	47a0      	blx	r4

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   15d3a:	4b8c      	ldr	r3, [pc, #560]	; (15f6c <vUiHandlerTask+0x27c>)
   15d3c:	781b      	ldrb	r3, [r3, #0]
   15d3e:	2b01      	cmp	r3, #1
   15d40:	d100      	bne.n	15d44 <vUiHandlerTask+0x54>
   15d42:	e107      	b.n	15f54 <vUiHandlerTask+0x264>
   15d44:	2b02      	cmp	r3, #2
   15d46:	d002      	beq.n	15d4e <vUiHandlerTask+0x5e>
   15d48:	2b00      	cmp	r3, #0
   15d4a:	d06e      	beq.n	15e2a <vUiHandlerTask+0x13a>
   15d4c:	e0fe      	b.n	15f4c <vUiHandlerTask+0x25c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   15d4e:	4b8f      	ldr	r3, [pc, #572]	; (15f8c <vUiHandlerTask+0x29c>)
   15d50:	2200      	movs	r2, #0
   15d52:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   15d54:	4b8e      	ldr	r3, [pc, #568]	; (15f90 <vUiHandlerTask+0x2a0>)
   15d56:	2201      	movs	r2, #1
   15d58:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   15d5a:	4b8e      	ldr	r3, [pc, #568]	; (15f94 <vUiHandlerTask+0x2a4>)
   15d5c:	2214      	movs	r2, #20
   15d5e:	21ff      	movs	r1, #255	; 0xff
   15d60:	0018      	movs	r0, r3
   15d62:	4b8d      	ldr	r3, [pc, #564]	; (15f98 <vUiHandlerTask+0x2a8>)
   15d64:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   15d66:	4b8d      	ldr	r3, [pc, #564]	; (15f9c <vUiHandlerTask+0x2ac>)
   15d68:	2200      	movs	r2, #0
   15d6a:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   15d6c:	2317      	movs	r3, #23
   15d6e:	18fc      	adds	r4, r7, r3
   15d70:	4b8b      	ldr	r3, [pc, #556]	; (15fa0 <vUiHandlerTask+0x2b0>)
   15d72:	4798      	blx	r3
   15d74:	0003      	movs	r3, r0
   15d76:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   15d78:	2317      	movs	r3, #23
   15d7a:	18fb      	adds	r3, r7, r3
   15d7c:	781b      	ldrb	r3, [r3, #0]
   15d7e:	2b0f      	cmp	r3, #15
   15d80:	d903      	bls.n	15d8a <vUiHandlerTask+0x9a>
   15d82:	2317      	movs	r3, #23
   15d84:	18fb      	adds	r3, r7, r3
   15d86:	2210      	movs	r2, #16
   15d88:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   15d8a:	2317      	movs	r3, #23
   15d8c:	18fb      	adds	r3, r7, r3
   15d8e:	781b      	ldrb	r3, [r3, #0]
   15d90:	2b00      	cmp	r3, #0
   15d92:	d007      	beq.n	15da4 <vUiHandlerTask+0xb4>
                    SeesawReadKeypad(buttons,
   15d94:	2317      	movs	r3, #23
   15d96:	18fb      	adds	r3, r7, r3
   15d98:	781a      	ldrb	r2, [r3, #0]
   15d9a:	4b82      	ldr	r3, [pc, #520]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15d9c:	0011      	movs	r1, r2
   15d9e:	0018      	movs	r0, r3
   15da0:	4b81      	ldr	r3, [pc, #516]	; (15fa8 <vUiHandlerTask+0x2b8>)
   15da2:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   15da4:	4b7f      	ldr	r3, [pc, #508]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15da6:	2210      	movs	r2, #16
   15da8:	2100      	movs	r1, #0
   15daa:	0018      	movs	r0, r3
   15dac:	4b7a      	ldr	r3, [pc, #488]	; (15f98 <vUiHandlerTask+0x2a8>)
   15dae:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   15db0:	4b7e      	ldr	r3, [pc, #504]	; (15fac <vUiHandlerTask+0x2bc>)
   15db2:	781b      	ldrb	r3, [r3, #0]
   15db4:	b2d9      	uxtb	r1, r3
   15db6:	4b7e      	ldr	r3, [pc, #504]	; (15fb0 <vUiHandlerTask+0x2c0>)
   15db8:	781b      	ldrb	r3, [r3, #0]
   15dba:	b2da      	uxtb	r2, r3
   15dbc:	4b7d      	ldr	r3, [pc, #500]	; (15fb4 <vUiHandlerTask+0x2c4>)
   15dbe:	781b      	ldrb	r3, [r3, #0]
   15dc0:	b2db      	uxtb	r3, r3
   15dc2:	2000      	movs	r0, #0
   15dc4:	4c7c      	ldr	r4, [pc, #496]	; (15fb8 <vUiHandlerTask+0x2c8>)
   15dc6:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   15dc8:	4b7c      	ldr	r3, [pc, #496]	; (15fbc <vUiHandlerTask+0x2cc>)
   15dca:	4798      	blx	r3
                vTaskDelay(1000);
   15dcc:	23fa      	movs	r3, #250	; 0xfa
   15dce:	009b      	lsls	r3, r3, #2
   15dd0:	0018      	movs	r0, r3
   15dd2:	4b7b      	ldr	r3, [pc, #492]	; (15fc0 <vUiHandlerTask+0x2d0>)
   15dd4:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   15dd6:	2300      	movs	r3, #0
   15dd8:	2200      	movs	r2, #0
   15dda:	2100      	movs	r1, #0
   15ddc:	2000      	movs	r0, #0
   15dde:	4c76      	ldr	r4, [pc, #472]	; (15fb8 <vUiHandlerTask+0x2c8>)
   15de0:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   15de2:	4b72      	ldr	r3, [pc, #456]	; (15fac <vUiHandlerTask+0x2bc>)
   15de4:	781b      	ldrb	r3, [r3, #0]
   15de6:	b2d9      	uxtb	r1, r3
   15de8:	4b71      	ldr	r3, [pc, #452]	; (15fb0 <vUiHandlerTask+0x2c0>)
   15dea:	781b      	ldrb	r3, [r3, #0]
   15dec:	b2da      	uxtb	r2, r3
   15dee:	4b71      	ldr	r3, [pc, #452]	; (15fb4 <vUiHandlerTask+0x2c4>)
   15df0:	781b      	ldrb	r3, [r3, #0]
   15df2:	b2db      	uxtb	r3, r3
   15df4:	200f      	movs	r0, #15
   15df6:	4c70      	ldr	r4, [pc, #448]	; (15fb8 <vUiHandlerTask+0x2c8>)
   15df8:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   15dfa:	4b70      	ldr	r3, [pc, #448]	; (15fbc <vUiHandlerTask+0x2cc>)
   15dfc:	4798      	blx	r3
                vTaskDelay(1000);
   15dfe:	23fa      	movs	r3, #250	; 0xfa
   15e00:	009b      	lsls	r3, r3, #2
   15e02:	0018      	movs	r0, r3
   15e04:	4b6e      	ldr	r3, [pc, #440]	; (15fc0 <vUiHandlerTask+0x2d0>)
   15e06:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   15e08:	2300      	movs	r3, #0
   15e0a:	2200      	movs	r2, #0
   15e0c:	2100      	movs	r1, #0
   15e0e:	200f      	movs	r0, #15
   15e10:	4c69      	ldr	r4, [pc, #420]	; (15fb8 <vUiHandlerTask+0x2c8>)
   15e12:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   15e14:	4b69      	ldr	r3, [pc, #420]	; (15fbc <vUiHandlerTask+0x2cc>)
   15e16:	4798      	blx	r3
                vTaskDelay(1000);
   15e18:	23fa      	movs	r3, #250	; 0xfa
   15e1a:	009b      	lsls	r3, r3, #2
   15e1c:	0018      	movs	r0, r3
   15e1e:	4b68      	ldr	r3, [pc, #416]	; (15fc0 <vUiHandlerTask+0x2d0>)
   15e20:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   15e22:	4b52      	ldr	r3, [pc, #328]	; (15f6c <vUiHandlerTask+0x27c>)
   15e24:	2200      	movs	r2, #0
   15e26:	701a      	strb	r2, [r3, #0]

                break;
   15e28:	e097      	b.n	15f5a <vUiHandlerTask+0x26a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   15e2a:	2316      	movs	r3, #22
   15e2c:	18fc      	adds	r4, r7, r3
   15e2e:	4b5c      	ldr	r3, [pc, #368]	; (15fa0 <vUiHandlerTask+0x2b0>)
   15e30:	4798      	blx	r3
   15e32:	0003      	movs	r3, r0
   15e34:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   15e36:	4b5b      	ldr	r3, [pc, #364]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15e38:	2210      	movs	r2, #16
   15e3a:	2100      	movs	r1, #0
   15e3c:	0018      	movs	r0, r3
   15e3e:	4b56      	ldr	r3, [pc, #344]	; (15f98 <vUiHandlerTask+0x2a8>)
   15e40:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   15e42:	2316      	movs	r3, #22
   15e44:	18fb      	adds	r3, r7, r3
   15e46:	781b      	ldrb	r3, [r3, #0]
   15e48:	2b0f      	cmp	r3, #15
   15e4a:	d903      	bls.n	15e54 <vUiHandlerTask+0x164>
                    numPresses = BUTTON_PRESSES_MAX;
   15e4c:	2316      	movs	r3, #22
   15e4e:	18fb      	adds	r3, r7, r3
   15e50:	2210      	movs	r2, #16
   15e52:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   15e54:	2316      	movs	r3, #22
   15e56:	18fb      	adds	r3, r7, r3
   15e58:	781b      	ldrb	r3, [r3, #0]
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d065      	beq.n	15f2a <vUiHandlerTask+0x23a>
   15e5e:	2316      	movs	r3, #22
   15e60:	18fb      	adds	r3, r7, r3
   15e62:	781a      	ldrb	r2, [r3, #0]
   15e64:	4b4f      	ldr	r3, [pc, #316]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15e66:	0011      	movs	r1, r2
   15e68:	0018      	movs	r0, r3
   15e6a:	4b4f      	ldr	r3, [pc, #316]	; (15fa8 <vUiHandlerTask+0x2b8>)
   15e6c:	4798      	blx	r3
   15e6e:	1e03      	subs	r3, r0, #0
   15e70:	d15b      	bne.n	15f2a <vUiHandlerTask+0x23a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   15e72:	2300      	movs	r3, #0
   15e74:	613b      	str	r3, [r7, #16]
   15e76:	e050      	b.n	15f1a <vUiHandlerTask+0x22a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   15e78:	4a4a      	ldr	r2, [pc, #296]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15e7a:	693b      	ldr	r3, [r7, #16]
   15e7c:	18d3      	adds	r3, r2, r3
   15e7e:	781b      	ldrb	r3, [r3, #0]
   15e80:	089b      	lsrs	r3, r3, #2
   15e82:	b2db      	uxtb	r3, r3
   15e84:	2b00      	cmp	r3, #0
   15e86:	da00      	bge.n	15e8a <vUiHandlerTask+0x19a>
   15e88:	3307      	adds	r3, #7
   15e8a:	10db      	asrs	r3, r3, #3
   15e8c:	b2db      	uxtb	r3, r3
   15e8e:	009b      	lsls	r3, r3, #2
   15e90:	b2d9      	uxtb	r1, r3
   15e92:	4a44      	ldr	r2, [pc, #272]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15e94:	693b      	ldr	r3, [r7, #16]
   15e96:	18d3      	adds	r3, r2, r3
   15e98:	781b      	ldrb	r3, [r3, #0]
   15e9a:	089b      	lsrs	r3, r3, #2
   15e9c:	b2db      	uxtb	r3, r3
   15e9e:	2207      	movs	r2, #7
   15ea0:	4013      	ands	r3, r2
   15ea2:	b2da      	uxtb	r2, r3
   15ea4:	230f      	movs	r3, #15
   15ea6:	18fb      	adds	r3, r7, r3
   15ea8:	188a      	adds	r2, r1, r2
   15eaa:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   15eac:	4a3d      	ldr	r2, [pc, #244]	; (15fa4 <vUiHandlerTask+0x2b4>)
   15eae:	693b      	ldr	r3, [r7, #16]
   15eb0:	18d3      	adds	r3, r2, r3
   15eb2:	781a      	ldrb	r2, [r3, #0]
   15eb4:	230e      	movs	r3, #14
   15eb6:	18fb      	adds	r3, r7, r3
   15eb8:	2103      	movs	r1, #3
   15eba:	400a      	ands	r2, r1
   15ebc:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   15ebe:	230e      	movs	r3, #14
   15ec0:	18fb      	adds	r3, r7, r3
   15ec2:	781b      	ldrb	r3, [r3, #0]
   15ec4:	2b03      	cmp	r3, #3
   15ec6:	d10f      	bne.n	15ee8 <vUiHandlerTask+0x1f8>
                            SeesawSetLed(keynum, red, green, blue);
   15ec8:	4b38      	ldr	r3, [pc, #224]	; (15fac <vUiHandlerTask+0x2bc>)
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	b2d9      	uxtb	r1, r3
   15ece:	4b38      	ldr	r3, [pc, #224]	; (15fb0 <vUiHandlerTask+0x2c0>)
   15ed0:	781b      	ldrb	r3, [r3, #0]
   15ed2:	b2da      	uxtb	r2, r3
   15ed4:	4b37      	ldr	r3, [pc, #220]	; (15fb4 <vUiHandlerTask+0x2c4>)
   15ed6:	781b      	ldrb	r3, [r3, #0]
   15ed8:	b2dc      	uxtb	r4, r3
   15eda:	230f      	movs	r3, #15
   15edc:	18fb      	adds	r3, r7, r3
   15ede:	7818      	ldrb	r0, [r3, #0]
   15ee0:	0023      	movs	r3, r4
   15ee2:	4c35      	ldr	r4, [pc, #212]	; (15fb8 <vUiHandlerTask+0x2c8>)
   15ee4:	47a0      	blx	r4
   15ee6:	e015      	b.n	15f14 <vUiHandlerTask+0x224>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   15ee8:	230f      	movs	r3, #15
   15eea:	18fb      	adds	r3, r7, r3
   15eec:	7818      	ldrb	r0, [r3, #0]
   15eee:	2300      	movs	r3, #0
   15ef0:	2200      	movs	r2, #0
   15ef2:	2100      	movs	r1, #0
   15ef4:	4c30      	ldr	r4, [pc, #192]	; (15fb8 <vUiHandlerTask+0x2c8>)
   15ef6:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   15ef8:	4b24      	ldr	r3, [pc, #144]	; (15f8c <vUiHandlerTask+0x29c>)
   15efa:	781b      	ldrb	r3, [r3, #0]
   15efc:	0019      	movs	r1, r3
   15efe:	4b25      	ldr	r3, [pc, #148]	; (15f94 <vUiHandlerTask+0x2a4>)
   15f00:	220f      	movs	r2, #15
   15f02:	18ba      	adds	r2, r7, r2
   15f04:	7812      	ldrb	r2, [r2, #0]
   15f06:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   15f08:	4b20      	ldr	r3, [pc, #128]	; (15f8c <vUiHandlerTask+0x29c>)
   15f0a:	781b      	ldrb	r3, [r3, #0]
   15f0c:	3301      	adds	r3, #1
   15f0e:	b2da      	uxtb	r2, r3
   15f10:	4b1e      	ldr	r3, [pc, #120]	; (15f8c <vUiHandlerTask+0x29c>)
   15f12:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   15f14:	693b      	ldr	r3, [r7, #16]
   15f16:	3301      	adds	r3, #1
   15f18:	613b      	str	r3, [r7, #16]
   15f1a:	2316      	movs	r3, #22
   15f1c:	18fb      	adds	r3, r7, r3
   15f1e:	781a      	ldrb	r2, [r3, #0]
   15f20:	693b      	ldr	r3, [r7, #16]
   15f22:	429a      	cmp	r2, r3
   15f24:	dca8      	bgt.n	15e78 <vUiHandlerTask+0x188>
                        }
                    }
                    SeesawOrderLedUpdate();
   15f26:	4b25      	ldr	r3, [pc, #148]	; (15fbc <vUiHandlerTask+0x2cc>)
   15f28:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   15f2a:	4b18      	ldr	r3, [pc, #96]	; (15f8c <vUiHandlerTask+0x29c>)
   15f2c:	781a      	ldrb	r2, [r3, #0]
   15f2e:	4b18      	ldr	r3, [pc, #96]	; (15f90 <vUiHandlerTask+0x2a0>)
   15f30:	781b      	ldrb	r3, [r3, #0]
   15f32:	429a      	cmp	r2, r3
   15f34:	d203      	bcs.n	15f3e <vUiHandlerTask+0x24e>
   15f36:	4b15      	ldr	r3, [pc, #84]	; (15f8c <vUiHandlerTask+0x29c>)
   15f38:	781b      	ldrb	r3, [r3, #0]
   15f3a:	2b13      	cmp	r3, #19
   15f3c:	d90c      	bls.n	15f58 <vUiHandlerTask+0x268>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   15f3e:	4b17      	ldr	r3, [pc, #92]	; (15f9c <vUiHandlerTask+0x2ac>)
   15f40:	2201      	movs	r2, #1
   15f42:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   15f44:	4b09      	ldr	r3, [pc, #36]	; (15f6c <vUiHandlerTask+0x27c>)
   15f46:	2201      	movs	r2, #1
   15f48:	701a      	strb	r2, [r3, #0]
                }

                break;
   15f4a:	e005      	b.n	15f58 <vUiHandlerTask+0x268>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   15f4c:	4b07      	ldr	r3, [pc, #28]	; (15f6c <vUiHandlerTask+0x27c>)
   15f4e:	2200      	movs	r2, #0
   15f50:	701a      	strb	r2, [r3, #0]
                break;
   15f52:	e002      	b.n	15f5a <vUiHandlerTask+0x26a>
                break;
   15f54:	46c0      	nop			; (mov r8, r8)
   15f56:	e000      	b.n	15f5a <vUiHandlerTask+0x26a>
                break;
   15f58:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15f5a:	2032      	movs	r0, #50	; 0x32
   15f5c:	4b18      	ldr	r3, [pc, #96]	; (15fc0 <vUiHandlerTask+0x2d0>)
   15f5e:	4798      	blx	r3
        switch (uiState) {
   15f60:	e6eb      	b.n	15d3a <vUiHandlerTask+0x4a>
   15f62:	46c0      	nop			; (mov r8, r8)
   15f64:	00036970 	.word	0x00036970
   15f68:	0001e255 	.word	0x0001e255
   15f6c:	200048e8 	.word	0x200048e8
   15f70:	0001287d 	.word	0x0001287d
   15f74:	20000000 	.word	0x20000000
   15f78:	00036984 	.word	0x00036984
   15f7c:	00012721 	.word	0x00012721
   15f80:	0003698c 	.word	0x0003698c
   15f84:	00036998 	.word	0x00036998
   15f88:	000369a4 	.word	0x000369a4
   15f8c:	2000061d 	.word	0x2000061d
   15f90:	2000061e 	.word	0x2000061e
   15f94:	200048b0 	.word	0x200048b0
   15f98:	00034e13 	.word	0x00034e13
   15f9c:	2000061f 	.word	0x2000061f
   15fa0:	00015afd 	.word	0x00015afd
   15fa4:	200048d8 	.word	0x200048d8
   15fa8:	00015b65 	.word	0x00015b65
   15fac:	2000061c 	.word	0x2000061c
   15fb0:	2000002c 	.word	0x2000002c
   15fb4:	2000002d 	.word	0x2000002d
   15fb8:	00015be9 	.word	0x00015be9
   15fbc:	00015cb1 	.word	0x00015cb1
   15fc0:	0001c601 	.word	0x0001c601

00015fc4 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15fc4:	b590      	push	{r4, r7, lr}
   15fc6:	b083      	sub	sp, #12
   15fc8:	af00      	add	r7, sp, #0
   15fca:	0004      	movs	r4, r0
   15fcc:	0008      	movs	r0, r1
   15fce:	0011      	movs	r1, r2
   15fd0:	1dfb      	adds	r3, r7, #7
   15fd2:	1c22      	adds	r2, r4, #0
   15fd4:	701a      	strb	r2, [r3, #0]
   15fd6:	1dbb      	adds	r3, r7, #6
   15fd8:	1c02      	adds	r2, r0, #0
   15fda:	701a      	strb	r2, [r3, #0]
   15fdc:	1d7b      	adds	r3, r7, #5
   15fde:	1c0a      	adds	r2, r1, #0
   15fe0:	701a      	strb	r2, [r3, #0]
    red = r;
   15fe2:	4b08      	ldr	r3, [pc, #32]	; (16004 <UIChangeColors+0x40>)
   15fe4:	1dfa      	adds	r2, r7, #7
   15fe6:	7812      	ldrb	r2, [r2, #0]
   15fe8:	701a      	strb	r2, [r3, #0]
    green = g;
   15fea:	4b07      	ldr	r3, [pc, #28]	; (16008 <UIChangeColors+0x44>)
   15fec:	1dba      	adds	r2, r7, #6
   15fee:	7812      	ldrb	r2, [r2, #0]
   15ff0:	701a      	strb	r2, [r3, #0]
    blue = b;
   15ff2:	4b06      	ldr	r3, [pc, #24]	; (1600c <UIChangeColors+0x48>)
   15ff4:	1d7a      	adds	r2, r7, #5
   15ff6:	7812      	ldrb	r2, [r2, #0]
   15ff8:	701a      	strb	r2, [r3, #0]
}
   15ffa:	46c0      	nop			; (mov r8, r8)
   15ffc:	46bd      	mov	sp, r7
   15ffe:	b003      	add	sp, #12
   16000:	bd90      	pop	{r4, r7, pc}
   16002:	46c0      	nop			; (mov r8, r8)
   16004:	2000061c 	.word	0x2000061c
   16008:	2000002c 	.word	0x2000002c
   1600c:	2000002d 	.word	0x2000002d

00016010 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16010:	b580      	push	{r7, lr}
   16012:	b084      	sub	sp, #16
   16014:	af00      	add	r7, sp, #0
   16016:	0002      	movs	r2, r0
   16018:	1dfb      	adds	r3, r7, #7
   1601a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1601c:	230f      	movs	r3, #15
   1601e:	18fb      	adds	r3, r7, r3
   16020:	1dfa      	adds	r2, r7, #7
   16022:	7812      	ldrb	r2, [r2, #0]
   16024:	09d2      	lsrs	r2, r2, #7
   16026:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16028:	230e      	movs	r3, #14
   1602a:	18fb      	adds	r3, r7, r3
   1602c:	1dfa      	adds	r2, r7, #7
   1602e:	7812      	ldrb	r2, [r2, #0]
   16030:	0952      	lsrs	r2, r2, #5
   16032:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16034:	4b0d      	ldr	r3, [pc, #52]	; (1606c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16036:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16038:	230f      	movs	r3, #15
   1603a:	18fb      	adds	r3, r7, r3
   1603c:	781b      	ldrb	r3, [r3, #0]
   1603e:	2b00      	cmp	r3, #0
   16040:	d10f      	bne.n	16062 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16042:	230f      	movs	r3, #15
   16044:	18fb      	adds	r3, r7, r3
   16046:	781b      	ldrb	r3, [r3, #0]
   16048:	009b      	lsls	r3, r3, #2
   1604a:	2210      	movs	r2, #16
   1604c:	4694      	mov	ip, r2
   1604e:	44bc      	add	ip, r7
   16050:	4463      	add	r3, ip
   16052:	3b08      	subs	r3, #8
   16054:	681a      	ldr	r2, [r3, #0]
   16056:	230e      	movs	r3, #14
   16058:	18fb      	adds	r3, r7, r3
   1605a:	781b      	ldrb	r3, [r3, #0]
   1605c:	01db      	lsls	r3, r3, #7
   1605e:	18d3      	adds	r3, r2, r3
   16060:	e000      	b.n	16064 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16062:	2300      	movs	r3, #0
	}
}
   16064:	0018      	movs	r0, r3
   16066:	46bd      	mov	sp, r7
   16068:	b004      	add	sp, #16
   1606a:	bd80      	pop	{r7, pc}
   1606c:	41004400 	.word	0x41004400

00016070 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16070:	b580      	push	{r7, lr}
   16072:	b082      	sub	sp, #8
   16074:	af00      	add	r7, sp, #0
   16076:	0002      	movs	r2, r0
   16078:	1dfb      	adds	r3, r7, #7
   1607a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1607c:	1dfb      	adds	r3, r7, #7
   1607e:	781b      	ldrb	r3, [r3, #0]
   16080:	0018      	movs	r0, r3
   16082:	4b03      	ldr	r3, [pc, #12]	; (16090 <port_get_group_from_gpio_pin+0x20>)
   16084:	4798      	blx	r3
   16086:	0003      	movs	r3, r0
}
   16088:	0018      	movs	r0, r3
   1608a:	46bd      	mov	sp, r7
   1608c:	b002      	add	sp, #8
   1608e:	bd80      	pop	{r7, pc}
   16090:	00016011 	.word	0x00016011

00016094 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16094:	b580      	push	{r7, lr}
   16096:	b084      	sub	sp, #16
   16098:	af00      	add	r7, sp, #0
   1609a:	0002      	movs	r2, r0
   1609c:	1dfb      	adds	r3, r7, #7
   1609e:	701a      	strb	r2, [r3, #0]
   160a0:	1dbb      	adds	r3, r7, #6
   160a2:	1c0a      	adds	r2, r1, #0
   160a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   160a6:	1dfb      	adds	r3, r7, #7
   160a8:	781b      	ldrb	r3, [r3, #0]
   160aa:	0018      	movs	r0, r3
   160ac:	4b0d      	ldr	r3, [pc, #52]	; (160e4 <port_pin_set_output_level+0x50>)
   160ae:	4798      	blx	r3
   160b0:	0003      	movs	r3, r0
   160b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   160b4:	1dfb      	adds	r3, r7, #7
   160b6:	781b      	ldrb	r3, [r3, #0]
   160b8:	221f      	movs	r2, #31
   160ba:	4013      	ands	r3, r2
   160bc:	2201      	movs	r2, #1
   160be:	409a      	lsls	r2, r3
   160c0:	0013      	movs	r3, r2
   160c2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   160c4:	1dbb      	adds	r3, r7, #6
   160c6:	781b      	ldrb	r3, [r3, #0]
   160c8:	2b00      	cmp	r3, #0
   160ca:	d003      	beq.n	160d4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   160cc:	68fb      	ldr	r3, [r7, #12]
   160ce:	68ba      	ldr	r2, [r7, #8]
   160d0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   160d2:	e002      	b.n	160da <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   160d4:	68fb      	ldr	r3, [r7, #12]
   160d6:	68ba      	ldr	r2, [r7, #8]
   160d8:	615a      	str	r2, [r3, #20]
}
   160da:	46c0      	nop			; (mov r8, r8)
   160dc:	46bd      	mov	sp, r7
   160de:	b004      	add	sp, #16
   160e0:	bd80      	pop	{r7, pc}
   160e2:	46c0      	nop			; (mov r8, r8)
   160e4:	00016071 	.word	0x00016071

000160e8 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   160e8:	b580      	push	{r7, lr}
   160ea:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   160ec:	4b02      	ldr	r3, [pc, #8]	; (160f8 <init_state+0x10>)
   160ee:	2200      	movs	r2, #0
   160f0:	701a      	strb	r2, [r3, #0]
}
   160f2:	46c0      	nop			; (mov r8, r8)
   160f4:	46bd      	mov	sp, r7
   160f6:	bd80      	pop	{r7, pc}
   160f8:	20000635 	.word	0x20000635

000160fc <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   160fc:	b580      	push	{r7, lr}
   160fe:	b082      	sub	sp, #8
   16100:	af00      	add	r7, sp, #0
   16102:	0002      	movs	r2, r0
   16104:	1dfb      	adds	r3, r7, #7
   16106:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16108:	1dfb      	adds	r3, r7, #7
   1610a:	781b      	ldrb	r3, [r3, #0]
   1610c:	b25b      	sxtb	r3, r3
   1610e:	43db      	mvns	r3, r3
   16110:	b25b      	sxtb	r3, r3
   16112:	4a06      	ldr	r2, [pc, #24]	; (1612c <clear_state+0x30>)
   16114:	7812      	ldrb	r2, [r2, #0]
   16116:	b252      	sxtb	r2, r2
   16118:	4013      	ands	r3, r2
   1611a:	b25b      	sxtb	r3, r3
   1611c:	b2da      	uxtb	r2, r3
   1611e:	4b03      	ldr	r3, [pc, #12]	; (1612c <clear_state+0x30>)
   16120:	701a      	strb	r2, [r3, #0]
}
   16122:	46c0      	nop			; (mov r8, r8)
   16124:	46bd      	mov	sp, r7
   16126:	b002      	add	sp, #8
   16128:	bd80      	pop	{r7, pc}
   1612a:	46c0      	nop			; (mov r8, r8)
   1612c:	20000635 	.word	0x20000635

00016130 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16130:	b580      	push	{r7, lr}
   16132:	b082      	sub	sp, #8
   16134:	af00      	add	r7, sp, #0
   16136:	0002      	movs	r2, r0
   16138:	1dfb      	adds	r3, r7, #7
   1613a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   1613c:	4b05      	ldr	r3, [pc, #20]	; (16154 <add_state+0x24>)
   1613e:	781a      	ldrb	r2, [r3, #0]
   16140:	1dfb      	adds	r3, r7, #7
   16142:	781b      	ldrb	r3, [r3, #0]
   16144:	4313      	orrs	r3, r2
   16146:	b2da      	uxtb	r2, r3
   16148:	4b02      	ldr	r3, [pc, #8]	; (16154 <add_state+0x24>)
   1614a:	701a      	strb	r2, [r3, #0]
}
   1614c:	46c0      	nop			; (mov r8, r8)
   1614e:	46bd      	mov	sp, r7
   16150:	b002      	add	sp, #8
   16152:	bd80      	pop	{r7, pc}
   16154:	20000635 	.word	0x20000635

00016158 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16158:	b580      	push	{r7, lr}
   1615a:	b082      	sub	sp, #8
   1615c:	af00      	add	r7, sp, #0
   1615e:	0002      	movs	r2, r0
   16160:	1dfb      	adds	r3, r7, #7
   16162:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16164:	4b06      	ldr	r3, [pc, #24]	; (16180 <is_state_set+0x28>)
   16166:	781b      	ldrb	r3, [r3, #0]
   16168:	1dfa      	adds	r2, r7, #7
   1616a:	7812      	ldrb	r2, [r2, #0]
   1616c:	4013      	ands	r3, r2
   1616e:	b2db      	uxtb	r3, r3
   16170:	1e5a      	subs	r2, r3, #1
   16172:	4193      	sbcs	r3, r2
   16174:	b2db      	uxtb	r3, r3
}
   16176:	0018      	movs	r0, r3
   16178:	46bd      	mov	sp, r7
   1617a:	b002      	add	sp, #8
   1617c:	bd80      	pop	{r7, pc}
   1617e:	46c0      	nop			; (mov r8, r8)
   16180:	20000635 	.word	0x20000635

00016184 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16184:	b590      	push	{r4, r7, lr}
   16186:	b085      	sub	sp, #20
   16188:	af00      	add	r7, sp, #0
   1618a:	6078      	str	r0, [r7, #4]
   1618c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   1618e:	687b      	ldr	r3, [r7, #4]
   16190:	2b00      	cmp	r3, #0
   16192:	d002      	beq.n	1619a <is_exist_file+0x16>
   16194:	683b      	ldr	r3, [r7, #0]
   16196:	2b00      	cmp	r3, #0
   16198:	d101      	bne.n	1619e <is_exist_file+0x1a>
        return false;
   1619a:	2300      	movs	r3, #0
   1619c:	e013      	b.n	161c6 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1619e:	230f      	movs	r3, #15
   161a0:	18fc      	adds	r4, r7, r3
   161a2:	6839      	ldr	r1, [r7, #0]
   161a4:	4b0a      	ldr	r3, [pc, #40]	; (161d0 <is_exist_file+0x4c>)
   161a6:	2200      	movs	r2, #0
   161a8:	0018      	movs	r0, r3
   161aa:	4b0a      	ldr	r3, [pc, #40]	; (161d4 <is_exist_file+0x50>)
   161ac:	4798      	blx	r3
   161ae:	0003      	movs	r3, r0
   161b0:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   161b2:	4b07      	ldr	r3, [pc, #28]	; (161d0 <is_exist_file+0x4c>)
   161b4:	0018      	movs	r0, r3
   161b6:	4b08      	ldr	r3, [pc, #32]	; (161d8 <is_exist_file+0x54>)
   161b8:	4798      	blx	r3
    return (ret == FR_OK);
   161ba:	230f      	movs	r3, #15
   161bc:	18fb      	adds	r3, r7, r3
   161be:	781b      	ldrb	r3, [r3, #0]
   161c0:	425a      	negs	r2, r3
   161c2:	4153      	adcs	r3, r2
   161c4:	b2db      	uxtb	r3, r3
}
   161c6:	0018      	movs	r0, r3
   161c8:	46bd      	mov	sp, r7
   161ca:	b005      	add	sp, #20
   161cc:	bd90      	pop	{r4, r7, pc}
   161ce:	46c0      	nop			; (mov r8, r8)
   161d0:	20000868 	.word	0x20000868
   161d4:	0002dd15 	.word	0x0002dd15
   161d8:	0002e715 	.word	0x0002e715

000161dc <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   161dc:	b580      	push	{r7, lr}
   161de:	b09e      	sub	sp, #120	; 0x78
   161e0:	af00      	add	r7, sp, #0
   161e2:	60f8      	str	r0, [r7, #12]
   161e4:	60b9      	str	r1, [r7, #8]
   161e6:	1dfb      	adds	r3, r7, #7
   161e8:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   161ea:	2376      	movs	r3, #118	; 0x76
   161ec:	18fb      	adds	r3, r7, r3
   161ee:	2201      	movs	r2, #1
   161f0:	801a      	strh	r2, [r3, #0]
   161f2:	2374      	movs	r3, #116	; 0x74
   161f4:	18fb      	adds	r3, r7, r3
   161f6:	2200      	movs	r2, #0
   161f8:	801a      	strh	r2, [r3, #0]
   161fa:	236e      	movs	r3, #110	; 0x6e
   161fc:	18fb      	adds	r3, r7, r3
   161fe:	2200      	movs	r2, #0
   16200:	801a      	strh	r2, [r3, #0]
   16202:	2372      	movs	r3, #114	; 0x72
   16204:	18fb      	adds	r3, r7, r3
   16206:	2200      	movs	r2, #0
   16208:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1620a:	2324      	movs	r3, #36	; 0x24
   1620c:	18fb      	adds	r3, r7, r3
   1620e:	0018      	movs	r0, r3
   16210:	2341      	movs	r3, #65	; 0x41
   16212:	001a      	movs	r2, r3
   16214:	2100      	movs	r1, #0
   16216:	4b92      	ldr	r3, [pc, #584]	; (16460 <rename_to_unique+0x284>)
   16218:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1621a:	2318      	movs	r3, #24
   1621c:	18fb      	adds	r3, r7, r3
   1621e:	0018      	movs	r0, r3
   16220:	2309      	movs	r3, #9
   16222:	001a      	movs	r2, r3
   16224:	2100      	movs	r1, #0
   16226:	4b8e      	ldr	r3, [pc, #568]	; (16460 <rename_to_unique+0x284>)
   16228:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   1622a:	2314      	movs	r3, #20
   1622c:	18fb      	adds	r3, r7, r3
   1622e:	2200      	movs	r2, #0
   16230:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16232:	2300      	movs	r3, #0
   16234:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16236:	2371      	movs	r3, #113	; 0x71
   16238:	18fb      	adds	r3, r7, r3
   1623a:	2200      	movs	r2, #0
   1623c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   1623e:	68bb      	ldr	r3, [r7, #8]
   16240:	2b00      	cmp	r3, #0
   16242:	d101      	bne.n	16248 <rename_to_unique+0x6c>
        return false;
   16244:	2300      	movs	r3, #0
   16246:	e106      	b.n	16456 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16248:	68ba      	ldr	r2, [r7, #8]
   1624a:	68fb      	ldr	r3, [r7, #12]
   1624c:	0011      	movs	r1, r2
   1624e:	0018      	movs	r0, r3
   16250:	4b84      	ldr	r3, [pc, #528]	; (16464 <rename_to_unique+0x288>)
   16252:	4798      	blx	r3
   16254:	0003      	movs	r3, r0
   16256:	001a      	movs	r2, r3
   16258:	2301      	movs	r3, #1
   1625a:	4053      	eors	r3, r2
   1625c:	b2db      	uxtb	r3, r3
   1625e:	2b00      	cmp	r3, #0
   16260:	d001      	beq.n	16266 <rename_to_unique+0x8a>
        return true;
   16262:	2301      	movs	r3, #1
   16264:	e0f7      	b.n	16456 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16266:	68bb      	ldr	r3, [r7, #8]
   16268:	0018      	movs	r0, r3
   1626a:	4b7f      	ldr	r3, [pc, #508]	; (16468 <rename_to_unique+0x28c>)
   1626c:	4798      	blx	r3
   1626e:	0003      	movs	r3, r0
   16270:	2b40      	cmp	r3, #64	; 0x40
   16272:	d901      	bls.n	16278 <rename_to_unique+0x9c>
        return false;
   16274:	2300      	movs	r3, #0
   16276:	e0ee      	b.n	16456 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16278:	68bb      	ldr	r3, [r7, #8]
   1627a:	212e      	movs	r1, #46	; 0x2e
   1627c:	0018      	movs	r0, r3
   1627e:	4b7b      	ldr	r3, [pc, #492]	; (1646c <rename_to_unique+0x290>)
   16280:	4798      	blx	r3
   16282:	0003      	movs	r3, r0
   16284:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16288:	2b00      	cmp	r3, #0
   1628a:	d052      	beq.n	16332 <rename_to_unique+0x156>
        ext_len = strlen(p);
   1628c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1628e:	0018      	movs	r0, r3
   16290:	4b75      	ldr	r3, [pc, #468]	; (16468 <rename_to_unique+0x28c>)
   16292:	4798      	blx	r3
   16294:	0002      	movs	r2, r0
   16296:	236e      	movs	r3, #110	; 0x6e
   16298:	18fb      	adds	r3, r7, r3
   1629a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   1629c:	236e      	movs	r3, #110	; 0x6e
   1629e:	18fb      	adds	r3, r7, r3
   162a0:	881b      	ldrh	r3, [r3, #0]
   162a2:	2b07      	cmp	r3, #7
   162a4:	d837      	bhi.n	16316 <rename_to_unique+0x13a>
            valid_ext = true;
   162a6:	2371      	movs	r3, #113	; 0x71
   162a8:	18fb      	adds	r3, r7, r3
   162aa:	2201      	movs	r2, #1
   162ac:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   162ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
   162b0:	2318      	movs	r3, #24
   162b2:	18fb      	adds	r3, r7, r3
   162b4:	0011      	movs	r1, r2
   162b6:	0018      	movs	r0, r3
   162b8:	4b6d      	ldr	r3, [pc, #436]	; (16470 <rename_to_unique+0x294>)
   162ba:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   162bc:	68bb      	ldr	r3, [r7, #8]
   162be:	0018      	movs	r0, r3
   162c0:	4b69      	ldr	r3, [pc, #420]	; (16468 <rename_to_unique+0x28c>)
   162c2:	4798      	blx	r3
   162c4:	0002      	movs	r2, r0
   162c6:	236e      	movs	r3, #110	; 0x6e
   162c8:	18fb      	adds	r3, r7, r3
   162ca:	881b      	ldrh	r3, [r3, #0]
   162cc:	1ad3      	subs	r3, r2, r3
   162ce:	2b3c      	cmp	r3, #60	; 0x3c
   162d0:	d911      	bls.n	162f6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   162d2:	2374      	movs	r3, #116	; 0x74
   162d4:	18fb      	adds	r3, r7, r3
   162d6:	226e      	movs	r2, #110	; 0x6e
   162d8:	18ba      	adds	r2, r7, r2
   162da:	8812      	ldrh	r2, [r2, #0]
   162dc:	213c      	movs	r1, #60	; 0x3c
   162de:	1a8a      	subs	r2, r1, r2
   162e0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   162e2:	2374      	movs	r3, #116	; 0x74
   162e4:	18fb      	adds	r3, r7, r3
   162e6:	881a      	ldrh	r2, [r3, #0]
   162e8:	68b9      	ldr	r1, [r7, #8]
   162ea:	2324      	movs	r3, #36	; 0x24
   162ec:	18fb      	adds	r3, r7, r3
   162ee:	0018      	movs	r0, r3
   162f0:	4b60      	ldr	r3, [pc, #384]	; (16474 <rename_to_unique+0x298>)
   162f2:	4798      	blx	r3
   162f4:	e02a      	b.n	1634c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   162f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   162f8:	68bb      	ldr	r3, [r7, #8]
   162fa:	1ad2      	subs	r2, r2, r3
   162fc:	2374      	movs	r3, #116	; 0x74
   162fe:	18fb      	adds	r3, r7, r3
   16300:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16302:	2374      	movs	r3, #116	; 0x74
   16304:	18fb      	adds	r3, r7, r3
   16306:	881a      	ldrh	r2, [r3, #0]
   16308:	68b9      	ldr	r1, [r7, #8]
   1630a:	2324      	movs	r3, #36	; 0x24
   1630c:	18fb      	adds	r3, r7, r3
   1630e:	0018      	movs	r0, r3
   16310:	4b58      	ldr	r3, [pc, #352]	; (16474 <rename_to_unique+0x298>)
   16312:	4798      	blx	r3
   16314:	e01a      	b.n	1634c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16316:	2374      	movs	r3, #116	; 0x74
   16318:	18fb      	adds	r3, r7, r3
   1631a:	223c      	movs	r2, #60	; 0x3c
   1631c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   1631e:	2374      	movs	r3, #116	; 0x74
   16320:	18fb      	adds	r3, r7, r3
   16322:	881a      	ldrh	r2, [r3, #0]
   16324:	68b9      	ldr	r1, [r7, #8]
   16326:	2324      	movs	r3, #36	; 0x24
   16328:	18fb      	adds	r3, r7, r3
   1632a:	0018      	movs	r0, r3
   1632c:	4b51      	ldr	r3, [pc, #324]	; (16474 <rename_to_unique+0x298>)
   1632e:	4798      	blx	r3
   16330:	e00c      	b.n	1634c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16332:	2374      	movs	r3, #116	; 0x74
   16334:	18fb      	adds	r3, r7, r3
   16336:	223c      	movs	r2, #60	; 0x3c
   16338:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   1633a:	2374      	movs	r3, #116	; 0x74
   1633c:	18fb      	adds	r3, r7, r3
   1633e:	881a      	ldrh	r2, [r3, #0]
   16340:	68b9      	ldr	r1, [r7, #8]
   16342:	2324      	movs	r3, #36	; 0x24
   16344:	18fb      	adds	r3, r7, r3
   16346:	0018      	movs	r0, r3
   16348:	4b4a      	ldr	r3, [pc, #296]	; (16474 <rename_to_unique+0x298>)
   1634a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   1634c:	2374      	movs	r3, #116	; 0x74
   1634e:	18fb      	adds	r3, r7, r3
   16350:	881b      	ldrh	r3, [r3, #0]
   16352:	2274      	movs	r2, #116	; 0x74
   16354:	18ba      	adds	r2, r7, r2
   16356:	1c59      	adds	r1, r3, #1
   16358:	8011      	strh	r1, [r2, #0]
   1635a:	001a      	movs	r2, r3
   1635c:	2324      	movs	r3, #36	; 0x24
   1635e:	18fb      	adds	r3, r7, r3
   16360:	212d      	movs	r1, #45	; 0x2d
   16362:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16364:	2376      	movs	r3, #118	; 0x76
   16366:	18fb      	adds	r3, r7, r3
   16368:	2200      	movs	r2, #0
   1636a:	801a      	strh	r2, [r3, #0]
   1636c:	2372      	movs	r3, #114	; 0x72
   1636e:	18fb      	adds	r3, r7, r3
   16370:	2201      	movs	r2, #1
   16372:	801a      	strh	r2, [r3, #0]
   16374:	e010      	b.n	16398 <rename_to_unique+0x1bc>
        count *= 10;
   16376:	2372      	movs	r3, #114	; 0x72
   16378:	18fa      	adds	r2, r7, r3
   1637a:	2372      	movs	r3, #114	; 0x72
   1637c:	18fb      	adds	r3, r7, r3
   1637e:	881b      	ldrh	r3, [r3, #0]
   16380:	1c19      	adds	r1, r3, #0
   16382:	0089      	lsls	r1, r1, #2
   16384:	18cb      	adds	r3, r1, r3
   16386:	18db      	adds	r3, r3, r3
   16388:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1638a:	2376      	movs	r3, #118	; 0x76
   1638c:	18fb      	adds	r3, r7, r3
   1638e:	881a      	ldrh	r2, [r3, #0]
   16390:	2376      	movs	r3, #118	; 0x76
   16392:	18fb      	adds	r3, r7, r3
   16394:	3201      	adds	r2, #1
   16396:	801a      	strh	r2, [r3, #0]
   16398:	2376      	movs	r3, #118	; 0x76
   1639a:	18fb      	adds	r3, r7, r3
   1639c:	881b      	ldrh	r3, [r3, #0]
   1639e:	2b02      	cmp	r3, #2
   163a0:	d9e9      	bls.n	16376 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   163a2:	2376      	movs	r3, #118	; 0x76
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	2201      	movs	r2, #1
   163a8:	801a      	strh	r2, [r3, #0]
   163aa:	e04b      	b.n	16444 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   163ac:	2376      	movs	r3, #118	; 0x76
   163ae:	18fb      	adds	r3, r7, r3
   163b0:	881a      	ldrh	r2, [r3, #0]
   163b2:	4931      	ldr	r1, [pc, #196]	; (16478 <rename_to_unique+0x29c>)
   163b4:	2314      	movs	r3, #20
   163b6:	18fb      	adds	r3, r7, r3
   163b8:	0018      	movs	r0, r3
   163ba:	4b30      	ldr	r3, [pc, #192]	; (1647c <rename_to_unique+0x2a0>)
   163bc:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   163be:	2374      	movs	r3, #116	; 0x74
   163c0:	18fb      	adds	r3, r7, r3
   163c2:	881b      	ldrh	r3, [r3, #0]
   163c4:	2224      	movs	r2, #36	; 0x24
   163c6:	18ba      	adds	r2, r7, r2
   163c8:	18d3      	adds	r3, r2, r3
   163ca:	2214      	movs	r2, #20
   163cc:	18b9      	adds	r1, r7, r2
   163ce:	2203      	movs	r2, #3
   163d0:	0018      	movs	r0, r3
   163d2:	4b28      	ldr	r3, [pc, #160]	; (16474 <rename_to_unique+0x298>)
   163d4:	4798      	blx	r3
        if (valid_ext) {
   163d6:	2371      	movs	r3, #113	; 0x71
   163d8:	18fb      	adds	r3, r7, r3
   163da:	781b      	ldrb	r3, [r3, #0]
   163dc:	2b00      	cmp	r3, #0
   163de:	d00c      	beq.n	163fa <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   163e0:	2374      	movs	r3, #116	; 0x74
   163e2:	18fb      	adds	r3, r7, r3
   163e4:	881b      	ldrh	r3, [r3, #0]
   163e6:	3303      	adds	r3, #3
   163e8:	2224      	movs	r2, #36	; 0x24
   163ea:	18ba      	adds	r2, r7, r2
   163ec:	18d3      	adds	r3, r2, r3
   163ee:	2218      	movs	r2, #24
   163f0:	18ba      	adds	r2, r7, r2
   163f2:	0011      	movs	r1, r2
   163f4:	0018      	movs	r0, r3
   163f6:	4b1e      	ldr	r3, [pc, #120]	; (16470 <rename_to_unique+0x294>)
   163f8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   163fa:	2324      	movs	r3, #36	; 0x24
   163fc:	18fa      	adds	r2, r7, r3
   163fe:	68fb      	ldr	r3, [r7, #12]
   16400:	0011      	movs	r1, r2
   16402:	0018      	movs	r0, r3
   16404:	4b17      	ldr	r3, [pc, #92]	; (16464 <rename_to_unique+0x288>)
   16406:	4798      	blx	r3
   16408:	0003      	movs	r3, r0
   1640a:	001a      	movs	r2, r3
   1640c:	2301      	movs	r3, #1
   1640e:	4053      	eors	r3, r2
   16410:	b2db      	uxtb	r3, r3
   16412:	2b00      	cmp	r3, #0
   16414:	d00f      	beq.n	16436 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16416:	1dfb      	adds	r3, r7, #7
   16418:	781a      	ldrb	r2, [r3, #0]
   1641a:	68bb      	ldr	r3, [r7, #8]
   1641c:	2100      	movs	r1, #0
   1641e:	0018      	movs	r0, r3
   16420:	4b0f      	ldr	r3, [pc, #60]	; (16460 <rename_to_unique+0x284>)
   16422:	4798      	blx	r3
            strcpy(file_path_name, name);
   16424:	2324      	movs	r3, #36	; 0x24
   16426:	18fa      	adds	r2, r7, r3
   16428:	68bb      	ldr	r3, [r7, #8]
   1642a:	0011      	movs	r1, r2
   1642c:	0018      	movs	r0, r3
   1642e:	4b10      	ldr	r3, [pc, #64]	; (16470 <rename_to_unique+0x294>)
   16430:	4798      	blx	r3
            return true;
   16432:	2301      	movs	r3, #1
   16434:	e00f      	b.n	16456 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16436:	2376      	movs	r3, #118	; 0x76
   16438:	18fb      	adds	r3, r7, r3
   1643a:	881a      	ldrh	r2, [r3, #0]
   1643c:	2376      	movs	r3, #118	; 0x76
   1643e:	18fb      	adds	r3, r7, r3
   16440:	3201      	adds	r2, #1
   16442:	801a      	strh	r2, [r3, #0]
   16444:	2376      	movs	r3, #118	; 0x76
   16446:	18fa      	adds	r2, r7, r3
   16448:	2372      	movs	r3, #114	; 0x72
   1644a:	18fb      	adds	r3, r7, r3
   1644c:	8812      	ldrh	r2, [r2, #0]
   1644e:	881b      	ldrh	r3, [r3, #0]
   16450:	429a      	cmp	r2, r3
   16452:	d3ab      	bcc.n	163ac <rename_to_unique+0x1d0>
        }
    }
    return false;
   16454:	2300      	movs	r3, #0
}
   16456:	0018      	movs	r0, r3
   16458:	46bd      	mov	sp, r7
   1645a:	b01e      	add	sp, #120	; 0x78
   1645c:	bd80      	pop	{r7, pc}
   1645e:	46c0      	nop			; (mov r8, r8)
   16460:	00034e13 	.word	0x00034e13
   16464:	00016185 	.word	0x00016185
   16468:	000351cb 	.word	0x000351cb
   1646c:	00035225 	.word	0x00035225
   16470:	0003517f 	.word	0x0003517f
   16474:	000351fb 	.word	0x000351fb
   16478:	000369c4 	.word	0x000369c4
   1647c:	000350d1 	.word	0x000350d1

00016480 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16480:	b590      	push	{r4, r7, lr}
   16482:	b083      	sub	sp, #12
   16484:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16486:	2001      	movs	r0, #1
   16488:	4b22      	ldr	r3, [pc, #136]	; (16514 <start_download+0x94>)
   1648a:	4798      	blx	r3
   1648c:	0003      	movs	r3, r0
   1648e:	001a      	movs	r2, r3
   16490:	2301      	movs	r3, #1
   16492:	4053      	eors	r3, r2
   16494:	b2db      	uxtb	r3, r3
   16496:	2b00      	cmp	r3, #0
   16498:	d005      	beq.n	164a6 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1649a:	4b1f      	ldr	r3, [pc, #124]	; (16518 <start_download+0x98>)
   1649c:	0019      	movs	r1, r3
   1649e:	2001      	movs	r0, #1
   164a0:	4b1e      	ldr	r3, [pc, #120]	; (1651c <start_download+0x9c>)
   164a2:	4798      	blx	r3
        return;
   164a4:	e032      	b.n	1650c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   164a6:	2002      	movs	r0, #2
   164a8:	4b1a      	ldr	r3, [pc, #104]	; (16514 <start_download+0x94>)
   164aa:	4798      	blx	r3
   164ac:	0003      	movs	r3, r0
   164ae:	001a      	movs	r2, r3
   164b0:	2301      	movs	r3, #1
   164b2:	4053      	eors	r3, r2
   164b4:	b2db      	uxtb	r3, r3
   164b6:	2b00      	cmp	r3, #0
   164b8:	d005      	beq.n	164c6 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   164ba:	4b19      	ldr	r3, [pc, #100]	; (16520 <start_download+0xa0>)
   164bc:	0019      	movs	r1, r3
   164be:	2001      	movs	r0, #1
   164c0:	4b16      	ldr	r3, [pc, #88]	; (1651c <start_download+0x9c>)
   164c2:	4798      	blx	r3
        return;
   164c4:	e022      	b.n	1650c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   164c6:	2004      	movs	r0, #4
   164c8:	4b12      	ldr	r3, [pc, #72]	; (16514 <start_download+0x94>)
   164ca:	4798      	blx	r3
   164cc:	1e03      	subs	r3, r0, #0
   164ce:	d005      	beq.n	164dc <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   164d0:	4b14      	ldr	r3, [pc, #80]	; (16524 <start_download+0xa4>)
   164d2:	0019      	movs	r1, r3
   164d4:	2001      	movs	r0, #1
   164d6:	4b11      	ldr	r3, [pc, #68]	; (1651c <start_download+0x9c>)
   164d8:	4798      	blx	r3
        return;
   164da:	e017      	b.n	1650c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   164dc:	2008      	movs	r0, #8
   164de:	4b0d      	ldr	r3, [pc, #52]	; (16514 <start_download+0x94>)
   164e0:	4798      	blx	r3
   164e2:	1e03      	subs	r3, r0, #0
   164e4:	d005      	beq.n	164f2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   164e6:	4b10      	ldr	r3, [pc, #64]	; (16528 <start_download+0xa8>)
   164e8:	0019      	movs	r1, r3
   164ea:	2001      	movs	r0, #1
   164ec:	4b0b      	ldr	r3, [pc, #44]	; (1651c <start_download+0x9c>)
   164ee:	4798      	blx	r3
        return;
   164f0:	e00c      	b.n	1650c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   164f2:	4b0e      	ldr	r3, [pc, #56]	; (1652c <start_download+0xac>)
   164f4:	0019      	movs	r1, r3
   164f6:	2001      	movs	r0, #1
   164f8:	4b08      	ldr	r3, [pc, #32]	; (1651c <start_download+0x9c>)
   164fa:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   164fc:	490c      	ldr	r1, [pc, #48]	; (16530 <start_download+0xb0>)
   164fe:	480d      	ldr	r0, [pc, #52]	; (16534 <start_download+0xb4>)
   16500:	2300      	movs	r3, #0
   16502:	9300      	str	r3, [sp, #0]
   16504:	2300      	movs	r3, #0
   16506:	2201      	movs	r2, #1
   16508:	4c0b      	ldr	r4, [pc, #44]	; (16538 <start_download+0xb8>)
   1650a:	47a0      	blx	r4
}
   1650c:	46bd      	mov	sp, r7
   1650e:	b001      	add	sp, #4
   16510:	bd90      	pop	{r4, r7, pc}
   16512:	46c0      	nop			; (mov r8, r8)
   16514:	00016159 	.word	0x00016159
   16518:	000369cc 	.word	0x000369cc
   1651c:	0001e341 	.word	0x0001e341
   16520:	000369f8 	.word	0x000369f8
   16524:	00036a24 	.word	0x00036a24
   16528:	00036a50 	.word	0x00036a50
   1652c:	00036a7c 	.word	0x00036a7c
   16530:	00036aa8 	.word	0x00036aa8
   16534:	20004944 	.word	0x20004944
   16538:	00031369 	.word	0x00031369

0001653c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   1653c:	b5b0      	push	{r4, r5, r7, lr}
   1653e:	b086      	sub	sp, #24
   16540:	af00      	add	r7, sp, #0
   16542:	6078      	str	r0, [r7, #4]
   16544:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16546:	687b      	ldr	r3, [r7, #4]
   16548:	2b00      	cmp	r3, #0
   1654a:	d002      	beq.n	16552 <store_file_packet+0x16>
   1654c:	683b      	ldr	r3, [r7, #0]
   1654e:	2b00      	cmp	r3, #0
   16550:	d105      	bne.n	1655e <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16552:	4b58      	ldr	r3, [pc, #352]	; (166b4 <store_file_packet+0x178>)
   16554:	0019      	movs	r1, r3
   16556:	2001      	movs	r0, #1
   16558:	4b57      	ldr	r3, [pc, #348]	; (166b8 <store_file_packet+0x17c>)
   1655a:	4798      	blx	r3
        return;
   1655c:	e0a6      	b.n	166ac <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   1655e:	2008      	movs	r0, #8
   16560:	4b56      	ldr	r3, [pc, #344]	; (166bc <store_file_packet+0x180>)
   16562:	4798      	blx	r3
   16564:	0003      	movs	r3, r0
   16566:	001a      	movs	r2, r3
   16568:	2301      	movs	r3, #1
   1656a:	4053      	eors	r3, r2
   1656c:	b2db      	uxtb	r3, r3
   1656e:	2b00      	cmp	r3, #0
   16570:	d055      	beq.n	1661e <store_file_packet+0xe2>
        char *cp = NULL;
   16572:	2300      	movs	r3, #0
   16574:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16576:	4b52      	ldr	r3, [pc, #328]	; (166c0 <store_file_packet+0x184>)
   16578:	2230      	movs	r2, #48	; 0x30
   1657a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   1657c:	4b50      	ldr	r3, [pc, #320]	; (166c0 <store_file_packet+0x184>)
   1657e:	223a      	movs	r2, #58	; 0x3a
   16580:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16582:	4b50      	ldr	r3, [pc, #320]	; (166c4 <store_file_packet+0x188>)
   16584:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16586:	e002      	b.n	1658e <store_file_packet+0x52>
            cp--;
   16588:	697b      	ldr	r3, [r7, #20]
   1658a:	3b01      	subs	r3, #1
   1658c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1658e:	697b      	ldr	r3, [r7, #20]
   16590:	781b      	ldrb	r3, [r3, #0]
   16592:	2b2f      	cmp	r3, #47	; 0x2f
   16594:	d1f8      	bne.n	16588 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16596:	697b      	ldr	r3, [r7, #20]
   16598:	0018      	movs	r0, r3
   1659a:	4b4b      	ldr	r3, [pc, #300]	; (166c8 <store_file_packet+0x18c>)
   1659c:	4798      	blx	r3
   1659e:	0003      	movs	r3, r0
   165a0:	2b01      	cmp	r3, #1
   165a2:	d924      	bls.n	165ee <store_file_packet+0xb2>
            cp++;
   165a4:	697b      	ldr	r3, [r7, #20]
   165a6:	3301      	adds	r3, #1
   165a8:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   165aa:	697a      	ldr	r2, [r7, #20]
   165ac:	4b47      	ldr	r3, [pc, #284]	; (166cc <store_file_packet+0x190>)
   165ae:	0011      	movs	r1, r2
   165b0:	0018      	movs	r0, r3
   165b2:	4b47      	ldr	r3, [pc, #284]	; (166d0 <store_file_packet+0x194>)
   165b4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   165b6:	4942      	ldr	r1, [pc, #264]	; (166c0 <store_file_packet+0x184>)
   165b8:	4b46      	ldr	r3, [pc, #280]	; (166d4 <store_file_packet+0x198>)
   165ba:	2240      	movs	r2, #64	; 0x40
   165bc:	0018      	movs	r0, r3
   165be:	4b46      	ldr	r3, [pc, #280]	; (166d8 <store_file_packet+0x19c>)
   165c0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   165c2:	4a3f      	ldr	r2, [pc, #252]	; (166c0 <store_file_packet+0x184>)
   165c4:	4b45      	ldr	r3, [pc, #276]	; (166dc <store_file_packet+0x1a0>)
   165c6:	0019      	movs	r1, r3
   165c8:	2001      	movs	r0, #1
   165ca:	4b3b      	ldr	r3, [pc, #236]	; (166b8 <store_file_packet+0x17c>)
   165cc:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   165ce:	2313      	movs	r3, #19
   165d0:	18fc      	adds	r4, r7, r3
   165d2:	493b      	ldr	r1, [pc, #236]	; (166c0 <store_file_packet+0x184>)
   165d4:	4b3f      	ldr	r3, [pc, #252]	; (166d4 <store_file_packet+0x198>)
   165d6:	220a      	movs	r2, #10
   165d8:	0018      	movs	r0, r3
   165da:	4b41      	ldr	r3, [pc, #260]	; (166e0 <store_file_packet+0x1a4>)
   165dc:	4798      	blx	r3
   165de:	0003      	movs	r3, r0
   165e0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   165e2:	2313      	movs	r3, #19
   165e4:	18fb      	adds	r3, r7, r3
   165e6:	781b      	ldrb	r3, [r3, #0]
   165e8:	2b00      	cmp	r3, #0
   165ea:	d012      	beq.n	16612 <store_file_packet+0xd6>
   165ec:	e008      	b.n	16600 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   165ee:	4b3d      	ldr	r3, [pc, #244]	; (166e4 <store_file_packet+0x1a8>)
   165f0:	0019      	movs	r1, r3
   165f2:	2001      	movs	r0, #1
   165f4:	4b30      	ldr	r3, [pc, #192]	; (166b8 <store_file_packet+0x17c>)
   165f6:	4798      	blx	r3
            add_state(CANCELED);
   165f8:	2020      	movs	r0, #32
   165fa:	4b3b      	ldr	r3, [pc, #236]	; (166e8 <store_file_packet+0x1ac>)
   165fc:	4798      	blx	r3
            return;
   165fe:	e055      	b.n	166ac <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16600:	2313      	movs	r3, #19
   16602:	18fb      	adds	r3, r7, r3
   16604:	781a      	ldrb	r2, [r3, #0]
   16606:	4b39      	ldr	r3, [pc, #228]	; (166ec <store_file_packet+0x1b0>)
   16608:	0019      	movs	r1, r3
   1660a:	2001      	movs	r0, #1
   1660c:	4b2a      	ldr	r3, [pc, #168]	; (166b8 <store_file_packet+0x17c>)
   1660e:	4798      	blx	r3
            return;
   16610:	e04c      	b.n	166ac <store_file_packet+0x170>
        }

        received_file_size = 0;
   16612:	4b37      	ldr	r3, [pc, #220]	; (166f0 <store_file_packet+0x1b4>)
   16614:	2200      	movs	r2, #0
   16616:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16618:	2008      	movs	r0, #8
   1661a:	4b33      	ldr	r3, [pc, #204]	; (166e8 <store_file_packet+0x1ac>)
   1661c:	4798      	blx	r3
    }

    if (data != NULL) {
   1661e:	687b      	ldr	r3, [r7, #4]
   16620:	2b00      	cmp	r3, #0
   16622:	d043      	beq.n	166ac <store_file_packet+0x170>
        UINT wsize = 0;
   16624:	2300      	movs	r3, #0
   16626:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16628:	2313      	movs	r3, #19
   1662a:	18fc      	adds	r4, r7, r3
   1662c:	230c      	movs	r3, #12
   1662e:	18fb      	adds	r3, r7, r3
   16630:	683a      	ldr	r2, [r7, #0]
   16632:	6879      	ldr	r1, [r7, #4]
   16634:	4827      	ldr	r0, [pc, #156]	; (166d4 <store_file_packet+0x198>)
   16636:	4d2f      	ldr	r5, [pc, #188]	; (166f4 <store_file_packet+0x1b8>)
   16638:	47a8      	blx	r5
   1663a:	0003      	movs	r3, r0
   1663c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1663e:	2313      	movs	r3, #19
   16640:	18fb      	adds	r3, r7, r3
   16642:	781b      	ldrb	r3, [r3, #0]
   16644:	2b00      	cmp	r3, #0
   16646:	d00c      	beq.n	16662 <store_file_packet+0x126>
            f_close(&file_object);
   16648:	4b22      	ldr	r3, [pc, #136]	; (166d4 <store_file_packet+0x198>)
   1664a:	0018      	movs	r0, r3
   1664c:	4b2a      	ldr	r3, [pc, #168]	; (166f8 <store_file_packet+0x1bc>)
   1664e:	4798      	blx	r3
            add_state(CANCELED);
   16650:	2020      	movs	r0, #32
   16652:	4b25      	ldr	r3, [pc, #148]	; (166e8 <store_file_packet+0x1ac>)
   16654:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16656:	4b29      	ldr	r3, [pc, #164]	; (166fc <store_file_packet+0x1c0>)
   16658:	0019      	movs	r1, r3
   1665a:	2001      	movs	r0, #1
   1665c:	4b16      	ldr	r3, [pc, #88]	; (166b8 <store_file_packet+0x17c>)
   1665e:	4798      	blx	r3
            return;
   16660:	e024      	b.n	166ac <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16662:	4b23      	ldr	r3, [pc, #140]	; (166f0 <store_file_packet+0x1b4>)
   16664:	681a      	ldr	r2, [r3, #0]
   16666:	68fb      	ldr	r3, [r7, #12]
   16668:	18d2      	adds	r2, r2, r3
   1666a:	4b21      	ldr	r3, [pc, #132]	; (166f0 <store_file_packet+0x1b4>)
   1666c:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1666e:	4b20      	ldr	r3, [pc, #128]	; (166f0 <store_file_packet+0x1b4>)
   16670:	681a      	ldr	r2, [r3, #0]
   16672:	4b23      	ldr	r3, [pc, #140]	; (16700 <store_file_packet+0x1c4>)
   16674:	681b      	ldr	r3, [r3, #0]
   16676:	4923      	ldr	r1, [pc, #140]	; (16704 <store_file_packet+0x1c8>)
   16678:	2001      	movs	r0, #1
   1667a:	4c0f      	ldr	r4, [pc, #60]	; (166b8 <store_file_packet+0x17c>)
   1667c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1667e:	4b1c      	ldr	r3, [pc, #112]	; (166f0 <store_file_packet+0x1b4>)
   16680:	681a      	ldr	r2, [r3, #0]
   16682:	4b1f      	ldr	r3, [pc, #124]	; (16700 <store_file_packet+0x1c4>)
   16684:	681b      	ldr	r3, [r3, #0]
   16686:	429a      	cmp	r2, r3
   16688:	d310      	bcc.n	166ac <store_file_packet+0x170>
            f_close(&file_object);
   1668a:	4b12      	ldr	r3, [pc, #72]	; (166d4 <store_file_packet+0x198>)
   1668c:	0018      	movs	r0, r3
   1668e:	4b1a      	ldr	r3, [pc, #104]	; (166f8 <store_file_packet+0x1bc>)
   16690:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16692:	4b1d      	ldr	r3, [pc, #116]	; (16708 <store_file_packet+0x1cc>)
   16694:	0019      	movs	r1, r3
   16696:	2001      	movs	r0, #1
   16698:	4b07      	ldr	r3, [pc, #28]	; (166b8 <store_file_packet+0x17c>)
   1669a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1669c:	2100      	movs	r1, #0
   1669e:	2017      	movs	r0, #23
   166a0:	4b1a      	ldr	r3, [pc, #104]	; (1670c <store_file_packet+0x1d0>)
   166a2:	4798      	blx	r3
            add_state(COMPLETED);
   166a4:	2010      	movs	r0, #16
   166a6:	4b10      	ldr	r3, [pc, #64]	; (166e8 <store_file_packet+0x1ac>)
   166a8:	4798      	blx	r3
            return;
   166aa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   166ac:	46bd      	mov	sp, r7
   166ae:	b006      	add	sp, #24
   166b0:	bdb0      	pop	{r4, r5, r7, pc}
   166b2:	46c0      	nop			; (mov r8, r8)
   166b4:	00036adc 	.word	0x00036adc
   166b8:	0001e341 	.word	0x0001e341
   166bc:	00016159 	.word	0x00016159
   166c0:	200000b4 	.word	0x200000b4
   166c4:	00036ad8 	.word	0x00036ad8
   166c8:	000351cb 	.word	0x000351cb
   166cc:	200000b6 	.word	0x200000b6
   166d0:	0003517f 	.word	0x0003517f
   166d4:	20000868 	.word	0x20000868
   166d8:	000161dd 	.word	0x000161dd
   166dc:	00036b40 	.word	0x00036b40
   166e0:	0002dd15 	.word	0x0002dd15
   166e4:	00036b00 	.word	0x00036b00
   166e8:	00016131 	.word	0x00016131
   166ec:	00036b68 	.word	0x00036b68
   166f0:	20000890 	.word	0x20000890
   166f4:	0002e245 	.word	0x0002e245
   166f8:	0002e715 	.word	0x0002e715
   166fc:	00036b9c 	.word	0x00036b9c
   16700:	2000088c 	.word	0x2000088c
   16704:	00036bd8 	.word	0x00036bd8
   16708:	00036c0c 	.word	0x00036c0c
   1670c:	00016095 	.word	0x00016095

00016710 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16710:	b590      	push	{r4, r7, lr}
   16712:	b085      	sub	sp, #20
   16714:	af00      	add	r7, sp, #0
   16716:	60f8      	str	r0, [r7, #12]
   16718:	60b9      	str	r1, [r7, #8]
   1671a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1671c:	68bb      	ldr	r3, [r7, #8]
   1671e:	2b04      	cmp	r3, #4
   16720:	d900      	bls.n	16724 <http_client_callback+0x14>
   16722:	e077      	b.n	16814 <http_client_callback+0x104>
   16724:	68bb      	ldr	r3, [r7, #8]
   16726:	009a      	lsls	r2, r3, #2
   16728:	4b3c      	ldr	r3, [pc, #240]	; (1681c <http_client_callback+0x10c>)
   1672a:	18d3      	adds	r3, r2, r3
   1672c:	681b      	ldr	r3, [r3, #0]
   1672e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16730:	4b3b      	ldr	r3, [pc, #236]	; (16820 <http_client_callback+0x110>)
   16732:	0019      	movs	r1, r3
   16734:	2001      	movs	r0, #1
   16736:	4b3b      	ldr	r3, [pc, #236]	; (16824 <http_client_callback+0x114>)
   16738:	4798      	blx	r3
            break;
   1673a:	e06b      	b.n	16814 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   1673c:	4b3a      	ldr	r3, [pc, #232]	; (16828 <http_client_callback+0x118>)
   1673e:	0019      	movs	r1, r3
   16740:	2001      	movs	r0, #1
   16742:	4b38      	ldr	r3, [pc, #224]	; (16824 <http_client_callback+0x114>)
   16744:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16746:	2004      	movs	r0, #4
   16748:	4b38      	ldr	r3, [pc, #224]	; (1682c <http_client_callback+0x11c>)
   1674a:	4798      	blx	r3
            break;
   1674c:	e062      	b.n	16814 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1674e:	687b      	ldr	r3, [r7, #4]
   16750:	881b      	ldrh	r3, [r3, #0]
   16752:	001a      	movs	r2, r3
   16754:	687b      	ldr	r3, [r7, #4]
   16756:	685b      	ldr	r3, [r3, #4]
   16758:	4935      	ldr	r1, [pc, #212]	; (16830 <http_client_callback+0x120>)
   1675a:	2001      	movs	r0, #1
   1675c:	4c31      	ldr	r4, [pc, #196]	; (16824 <http_client_callback+0x114>)
   1675e:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16760:	687b      	ldr	r3, [r7, #4]
   16762:	881b      	ldrh	r3, [r3, #0]
   16764:	2bc8      	cmp	r3, #200	; 0xc8
   16766:	d10d      	bne.n	16784 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16768:	687b      	ldr	r3, [r7, #4]
   1676a:	685a      	ldr	r2, [r3, #4]
   1676c:	4b31      	ldr	r3, [pc, #196]	; (16834 <http_client_callback+0x124>)
   1676e:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16770:	4b31      	ldr	r3, [pc, #196]	; (16838 <http_client_callback+0x128>)
   16772:	2200      	movs	r2, #0
   16774:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16776:	687b      	ldr	r3, [r7, #4]
   16778:	685a      	ldr	r2, [r3, #4]
   1677a:	2380      	movs	r3, #128	; 0x80
   1677c:	009b      	lsls	r3, r3, #2
   1677e:	429a      	cmp	r2, r3
   16780:	d843      	bhi.n	1680a <http_client_callback+0xfa>
   16782:	e003      	b.n	1678c <http_client_callback+0x7c>
                add_state(CANCELED);
   16784:	2020      	movs	r0, #32
   16786:	4b29      	ldr	r3, [pc, #164]	; (1682c <http_client_callback+0x11c>)
   16788:	4798      	blx	r3
                return;
   1678a:	e043      	b.n	16814 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1678c:	687b      	ldr	r3, [r7, #4]
   1678e:	689a      	ldr	r2, [r3, #8]
   16790:	687b      	ldr	r3, [r7, #4]
   16792:	685b      	ldr	r3, [r3, #4]
   16794:	0019      	movs	r1, r3
   16796:	0010      	movs	r0, r2
   16798:	4b28      	ldr	r3, [pc, #160]	; (1683c <http_client_callback+0x12c>)
   1679a:	4798      	blx	r3
                add_state(COMPLETED);
   1679c:	2010      	movs	r0, #16
   1679e:	4b23      	ldr	r3, [pc, #140]	; (1682c <http_client_callback+0x11c>)
   167a0:	4798      	blx	r3
            }
            break;
   167a2:	e032      	b.n	1680a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   167a4:	687b      	ldr	r3, [r7, #4]
   167a6:	685a      	ldr	r2, [r3, #4]
   167a8:	687b      	ldr	r3, [r7, #4]
   167aa:	681b      	ldr	r3, [r3, #0]
   167ac:	0019      	movs	r1, r3
   167ae:	0010      	movs	r0, r2
   167b0:	4b22      	ldr	r3, [pc, #136]	; (1683c <http_client_callback+0x12c>)
   167b2:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   167b4:	687b      	ldr	r3, [r7, #4]
   167b6:	7a1b      	ldrb	r3, [r3, #8]
   167b8:	2b00      	cmp	r3, #0
   167ba:	d028      	beq.n	1680e <http_client_callback+0xfe>
                add_state(COMPLETED);
   167bc:	2010      	movs	r0, #16
   167be:	4b1b      	ldr	r3, [pc, #108]	; (1682c <http_client_callback+0x11c>)
   167c0:	4798      	blx	r3
            }

            break;
   167c2:	e024      	b.n	1680e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   167c4:	687b      	ldr	r3, [r7, #4]
   167c6:	681a      	ldr	r2, [r3, #0]
   167c8:	4b1d      	ldr	r3, [pc, #116]	; (16840 <http_client_callback+0x130>)
   167ca:	0019      	movs	r1, r3
   167cc:	2001      	movs	r0, #1
   167ce:	4b15      	ldr	r3, [pc, #84]	; (16824 <http_client_callback+0x114>)
   167d0:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   167d2:	687b      	ldr	r3, [r7, #4]
   167d4:	681b      	ldr	r3, [r3, #0]
   167d6:	330b      	adds	r3, #11
   167d8:	d11b      	bne.n	16812 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   167da:	2008      	movs	r0, #8
   167dc:	4b19      	ldr	r3, [pc, #100]	; (16844 <http_client_callback+0x134>)
   167de:	4798      	blx	r3
   167e0:	1e03      	subs	r3, r0, #0
   167e2:	d006      	beq.n	167f2 <http_client_callback+0xe2>
                    f_close(&file_object);
   167e4:	4b18      	ldr	r3, [pc, #96]	; (16848 <http_client_callback+0x138>)
   167e6:	0018      	movs	r0, r3
   167e8:	4b18      	ldr	r3, [pc, #96]	; (1684c <http_client_callback+0x13c>)
   167ea:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   167ec:	2008      	movs	r0, #8
   167ee:	4b18      	ldr	r3, [pc, #96]	; (16850 <http_client_callback+0x140>)
   167f0:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   167f2:	2004      	movs	r0, #4
   167f4:	4b13      	ldr	r3, [pc, #76]	; (16844 <http_client_callback+0x134>)
   167f6:	4798      	blx	r3
   167f8:	1e03      	subs	r3, r0, #0
   167fa:	d002      	beq.n	16802 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   167fc:	2004      	movs	r0, #4
   167fe:	4b14      	ldr	r3, [pc, #80]	; (16850 <http_client_callback+0x140>)
   16800:	4798      	blx	r3
                }

                start_download();
   16802:	4b14      	ldr	r3, [pc, #80]	; (16854 <http_client_callback+0x144>)
   16804:	4798      	blx	r3
            }

            break;
   16806:	46c0      	nop			; (mov r8, r8)
   16808:	e003      	b.n	16812 <http_client_callback+0x102>
            break;
   1680a:	46c0      	nop			; (mov r8, r8)
   1680c:	e002      	b.n	16814 <http_client_callback+0x104>
            break;
   1680e:	46c0      	nop			; (mov r8, r8)
   16810:	e000      	b.n	16814 <http_client_callback+0x104>
            break;
   16812:	46c0      	nop			; (mov r8, r8)
    }
}
   16814:	46bd      	mov	sp, r7
   16816:	b005      	add	sp, #20
   16818:	bd90      	pop	{r4, r7, pc}
   1681a:	46c0      	nop			; (mov r8, r8)
   1681c:	000373c8 	.word	0x000373c8
   16820:	00036c40 	.word	0x00036c40
   16824:	0001e341 	.word	0x0001e341
   16828:	00036c78 	.word	0x00036c78
   1682c:	00016131 	.word	0x00016131
   16830:	00036ca4 	.word	0x00036ca4
   16834:	2000088c 	.word	0x2000088c
   16838:	20000890 	.word	0x20000890
   1683c:	0001653d 	.word	0x0001653d
   16840:	00036ce0 	.word	0x00036ce0
   16844:	00016159 	.word	0x00016159
   16848:	20000868 	.word	0x20000868
   1684c:	0002e715 	.word	0x0002e715
   16850:	000160fd 	.word	0x000160fd
   16854:	00016481 	.word	0x00016481

00016858 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16858:	b580      	push	{r7, lr}
   1685a:	b082      	sub	sp, #8
   1685c:	af00      	add	r7, sp, #0
   1685e:	603a      	str	r2, [r7, #0]
   16860:	1dfb      	adds	r3, r7, #7
   16862:	1c02      	adds	r2, r0, #0
   16864:	701a      	strb	r2, [r3, #0]
   16866:	1dbb      	adds	r3, r7, #6
   16868:	1c0a      	adds	r2, r1, #0
   1686a:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1686c:	683a      	ldr	r2, [r7, #0]
   1686e:	1dbb      	adds	r3, r7, #6
   16870:	7819      	ldrb	r1, [r3, #0]
   16872:	1dfb      	adds	r3, r7, #7
   16874:	781b      	ldrb	r3, [r3, #0]
   16876:	b25b      	sxtb	r3, r3
   16878:	0018      	movs	r0, r3
   1687a:	4b03      	ldr	r3, [pc, #12]	; (16888 <socket_cb+0x30>)
   1687c:	4798      	blx	r3
}
   1687e:	46c0      	nop			; (mov r8, r8)
   16880:	46bd      	mov	sp, r7
   16882:	b002      	add	sp, #8
   16884:	bd80      	pop	{r7, pc}
   16886:	46c0      	nop			; (mov r8, r8)
   16888:	00031079 	.word	0x00031079

0001688c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1688c:	b5b0      	push	{r4, r5, r7, lr}
   1688e:	b086      	sub	sp, #24
   16890:	af04      	add	r7, sp, #16
   16892:	6078      	str	r0, [r7, #4]
   16894:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16896:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16898:	22ff      	movs	r2, #255	; 0xff
   1689a:	4013      	ands	r3, r2
   1689c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1689e:	683b      	ldr	r3, [r7, #0]
   168a0:	0a1b      	lsrs	r3, r3, #8
   168a2:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   168a4:	23ff      	movs	r3, #255	; 0xff
   168a6:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   168a8:	683a      	ldr	r2, [r7, #0]
   168aa:	0c12      	lsrs	r2, r2, #16
   168ac:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   168ae:	22ff      	movs	r2, #255	; 0xff
   168b0:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   168b2:	6839      	ldr	r1, [r7, #0]
   168b4:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   168b6:	000d      	movs	r5, r1
   168b8:	6878      	ldr	r0, [r7, #4]
   168ba:	4909      	ldr	r1, [pc, #36]	; (168e0 <resolve_cb+0x54>)
   168bc:	9502      	str	r5, [sp, #8]
   168be:	9201      	str	r2, [sp, #4]
   168c0:	9300      	str	r3, [sp, #0]
   168c2:	0023      	movs	r3, r4
   168c4:	0002      	movs	r2, r0
   168c6:	2001      	movs	r0, #1
   168c8:	4c06      	ldr	r4, [pc, #24]	; (168e4 <resolve_cb+0x58>)
   168ca:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   168cc:	683a      	ldr	r2, [r7, #0]
   168ce:	687b      	ldr	r3, [r7, #4]
   168d0:	0011      	movs	r1, r2
   168d2:	0018      	movs	r0, r3
   168d4:	4b04      	ldr	r3, [pc, #16]	; (168e8 <resolve_cb+0x5c>)
   168d6:	4798      	blx	r3
}
   168d8:	46c0      	nop			; (mov r8, r8)
   168da:	46bd      	mov	sp, r7
   168dc:	b002      	add	sp, #8
   168de:	bdb0      	pop	{r4, r5, r7, pc}
   168e0:	00036d10 	.word	0x00036d10
   168e4:	0001e341 	.word	0x0001e341
   168e8:	000311dd 	.word	0x000311dd

000168ec <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   168ec:	b590      	push	{r4, r7, lr}
   168ee:	b087      	sub	sp, #28
   168f0:	af02      	add	r7, sp, #8
   168f2:	0002      	movs	r2, r0
   168f4:	6039      	str	r1, [r7, #0]
   168f6:	1dfb      	adds	r3, r7, #7
   168f8:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   168fa:	1dfb      	adds	r3, r7, #7
   168fc:	781b      	ldrb	r3, [r3, #0]
   168fe:	2b2c      	cmp	r3, #44	; 0x2c
   16900:	d002      	beq.n	16908 <wifi_cb+0x1c>
   16902:	2b32      	cmp	r3, #50	; 0x32
   16904:	d03d      	beq.n	16982 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16906:	e06f      	b.n	169e8 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16908:	683b      	ldr	r3, [r7, #0]
   1690a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1690c:	68fb      	ldr	r3, [r7, #12]
   1690e:	781b      	ldrb	r3, [r3, #0]
   16910:	2b01      	cmp	r3, #1
   16912:	d107      	bne.n	16924 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16914:	4b36      	ldr	r3, [pc, #216]	; (169f0 <wifi_cb+0x104>)
   16916:	0019      	movs	r1, r3
   16918:	2001      	movs	r0, #1
   1691a:	4b36      	ldr	r3, [pc, #216]	; (169f4 <wifi_cb+0x108>)
   1691c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1691e:	4b36      	ldr	r3, [pc, #216]	; (169f8 <wifi_cb+0x10c>)
   16920:	4798      	blx	r3
            break;
   16922:	e05e      	b.n	169e2 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16924:	68fb      	ldr	r3, [r7, #12]
   16926:	781b      	ldrb	r3, [r3, #0]
   16928:	2b00      	cmp	r3, #0
   1692a:	d15a      	bne.n	169e2 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1692c:	4b33      	ldr	r3, [pc, #204]	; (169fc <wifi_cb+0x110>)
   1692e:	0019      	movs	r1, r3
   16930:	2001      	movs	r0, #1
   16932:	4b30      	ldr	r3, [pc, #192]	; (169f4 <wifi_cb+0x108>)
   16934:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16936:	2002      	movs	r0, #2
   16938:	4b31      	ldr	r3, [pc, #196]	; (16a00 <wifi_cb+0x114>)
   1693a:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   1693c:	2008      	movs	r0, #8
   1693e:	4b31      	ldr	r3, [pc, #196]	; (16a04 <wifi_cb+0x118>)
   16940:	4798      	blx	r3
   16942:	1e03      	subs	r3, r0, #0
   16944:	d006      	beq.n	16954 <wifi_cb+0x68>
                    f_close(&file_object);
   16946:	4b30      	ldr	r3, [pc, #192]	; (16a08 <wifi_cb+0x11c>)
   16948:	0018      	movs	r0, r3
   1694a:	4b30      	ldr	r3, [pc, #192]	; (16a0c <wifi_cb+0x120>)
   1694c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1694e:	2008      	movs	r0, #8
   16950:	4b2b      	ldr	r3, [pc, #172]	; (16a00 <wifi_cb+0x114>)
   16952:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16954:	2004      	movs	r0, #4
   16956:	4b2b      	ldr	r3, [pc, #172]	; (16a04 <wifi_cb+0x118>)
   16958:	4798      	blx	r3
   1695a:	1e03      	subs	r3, r0, #0
   1695c:	d002      	beq.n	16964 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1695e:	2004      	movs	r0, #4
   16960:	4b27      	ldr	r3, [pc, #156]	; (16a00 <wifi_cb+0x114>)
   16962:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16964:	4b2a      	ldr	r3, [pc, #168]	; (16a10 <wifi_cb+0x124>)
   16966:	2101      	movs	r1, #1
   16968:	0018      	movs	r0, r3
   1696a:	4b2a      	ldr	r3, [pc, #168]	; (16a14 <wifi_cb+0x128>)
   1696c:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1696e:	4a2a      	ldr	r2, [pc, #168]	; (16a18 <wifi_cb+0x12c>)
   16970:	482a      	ldr	r0, [pc, #168]	; (16a1c <wifi_cb+0x130>)
   16972:	23ff      	movs	r3, #255	; 0xff
   16974:	9300      	str	r3, [sp, #0]
   16976:	0013      	movs	r3, r2
   16978:	2202      	movs	r2, #2
   1697a:	2106      	movs	r1, #6
   1697c:	4c28      	ldr	r4, [pc, #160]	; (16a20 <wifi_cb+0x134>)
   1697e:	47a0      	blx	r4
            break;
   16980:	e02f      	b.n	169e2 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16982:	683b      	ldr	r3, [r7, #0]
   16984:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16986:	68bb      	ldr	r3, [r7, #8]
   16988:	781b      	ldrb	r3, [r3, #0]
   1698a:	0018      	movs	r0, r3
   1698c:	68bb      	ldr	r3, [r7, #8]
   1698e:	3301      	adds	r3, #1
   16990:	781b      	ldrb	r3, [r3, #0]
   16992:	001c      	movs	r4, r3
   16994:	68bb      	ldr	r3, [r7, #8]
   16996:	3302      	adds	r3, #2
   16998:	781b      	ldrb	r3, [r3, #0]
   1699a:	001a      	movs	r2, r3
   1699c:	68bb      	ldr	r3, [r7, #8]
   1699e:	3303      	adds	r3, #3
   169a0:	781b      	ldrb	r3, [r3, #0]
   169a2:	4920      	ldr	r1, [pc, #128]	; (16a24 <wifi_cb+0x138>)
   169a4:	9301      	str	r3, [sp, #4]
   169a6:	9200      	str	r2, [sp, #0]
   169a8:	0023      	movs	r3, r4
   169aa:	0002      	movs	r2, r0
   169ac:	2001      	movs	r0, #1
   169ae:	4c11      	ldr	r4, [pc, #68]	; (169f4 <wifi_cb+0x108>)
   169b0:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   169b2:	2002      	movs	r0, #2
   169b4:	4b1c      	ldr	r3, [pc, #112]	; (16a28 <wifi_cb+0x13c>)
   169b6:	4798      	blx	r3
            if (do_download_flag == 1) {
   169b8:	4b1c      	ldr	r3, [pc, #112]	; (16a2c <wifi_cb+0x140>)
   169ba:	781b      	ldrb	r3, [r3, #0]
   169bc:	2b01      	cmp	r3, #1
   169be:	d102      	bne.n	169c6 <wifi_cb+0xda>
                start_download();
   169c0:	4b1b      	ldr	r3, [pc, #108]	; (16a30 <wifi_cb+0x144>)
   169c2:	4798      	blx	r3
        } break;
   169c4:	e00f      	b.n	169e6 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   169c6:	4a1b      	ldr	r2, [pc, #108]	; (16a34 <wifi_cb+0x148>)
   169c8:	4b11      	ldr	r3, [pc, #68]	; (16a10 <wifi_cb+0x124>)
   169ca:	0011      	movs	r1, r2
   169cc:	0018      	movs	r0, r3
   169ce:	4b1a      	ldr	r3, [pc, #104]	; (16a38 <wifi_cb+0x14c>)
   169d0:	4798      	blx	r3
   169d2:	1e03      	subs	r3, r0, #0
   169d4:	d007      	beq.n	169e6 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   169d6:	4b19      	ldr	r3, [pc, #100]	; (16a3c <wifi_cb+0x150>)
   169d8:	0019      	movs	r1, r3
   169da:	2001      	movs	r0, #1
   169dc:	4b05      	ldr	r3, [pc, #20]	; (169f4 <wifi_cb+0x108>)
   169de:	4798      	blx	r3
        } break;
   169e0:	e001      	b.n	169e6 <wifi_cb+0xfa>
            break;
   169e2:	46c0      	nop			; (mov r8, r8)
   169e4:	e000      	b.n	169e8 <wifi_cb+0xfc>
        } break;
   169e6:	46c0      	nop			; (mov r8, r8)
    }
}
   169e8:	46c0      	nop			; (mov r8, r8)
   169ea:	46bd      	mov	sp, r7
   169ec:	b005      	add	sp, #20
   169ee:	bd90      	pop	{r4, r7, pc}
   169f0:	00036d40 	.word	0x00036d40
   169f4:	0001e341 	.word	0x0001e341
   169f8:	00022849 	.word	0x00022849
   169fc:	00036d60 	.word	0x00036d60
   16a00:	000160fd 	.word	0x000160fd
   16a04:	00016159 	.word	0x00016159
   16a08:	20000868 	.word	0x20000868
   16a0c:	0002e715 	.word	0x0002e715
   16a10:	20000894 	.word	0x20000894
   16a14:	0002fd25 	.word	0x0002fd25
   16a18:	00036d84 	.word	0x00036d84
   16a1c:	00036d90 	.word	0x00036d90
   16a20:	00022375 	.word	0x00022375
   16a24:	00036d98 	.word	0x00036d98
   16a28:	00016131 	.word	0x00016131
   16a2c:	20000634 	.word	0x20000634
   16a30:	00016481 	.word	0x00016481
   16a34:	000369b0 	.word	0x000369b0
   16a38:	0002fbf1 	.word	0x0002fbf1
   16a3c:	00036dc0 	.word	0x00036dc0

00016a40 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16a40:	b590      	push	{r4, r7, lr}
   16a42:	b083      	sub	sp, #12
   16a44:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16a46:	4b29      	ldr	r3, [pc, #164]	; (16aec <init_storage+0xac>)
   16a48:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16a4a:	4b29      	ldr	r3, [pc, #164]	; (16af0 <init_storage+0xb0>)
   16a4c:	0019      	movs	r1, r3
   16a4e:	2001      	movs	r0, #1
   16a50:	4b28      	ldr	r3, [pc, #160]	; (16af4 <init_storage+0xb4>)
   16a52:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16a54:	1dfc      	adds	r4, r7, #7
   16a56:	2000      	movs	r0, #0
   16a58:	4b27      	ldr	r3, [pc, #156]	; (16af8 <init_storage+0xb8>)
   16a5a:	4798      	blx	r3
   16a5c:	0003      	movs	r3, r0
   16a5e:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   16a60:	1dfb      	adds	r3, r7, #7
   16a62:	781b      	ldrb	r3, [r3, #0]
   16a64:	2b01      	cmp	r3, #1
   16a66:	d110      	bne.n	16a8a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16a68:	4b24      	ldr	r3, [pc, #144]	; (16afc <init_storage+0xbc>)
   16a6a:	0019      	movs	r1, r3
   16a6c:	2001      	movs	r0, #1
   16a6e:	4b21      	ldr	r3, [pc, #132]	; (16af4 <init_storage+0xb4>)
   16a70:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   16a72:	4b23      	ldr	r3, [pc, #140]	; (16b00 <init_storage+0xc0>)
   16a74:	0019      	movs	r1, r3
   16a76:	2001      	movs	r0, #1
   16a78:	4b1e      	ldr	r3, [pc, #120]	; (16af4 <init_storage+0xb4>)
   16a7a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   16a7c:	46c0      	nop			; (mov r8, r8)
   16a7e:	2000      	movs	r0, #0
   16a80:	4b20      	ldr	r3, [pc, #128]	; (16b04 <init_storage+0xc4>)
   16a82:	4798      	blx	r3
   16a84:	0003      	movs	r3, r0
   16a86:	2b02      	cmp	r3, #2
   16a88:	d1f9      	bne.n	16a7e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   16a8a:	1dfb      	adds	r3, r7, #7
   16a8c:	781b      	ldrb	r3, [r3, #0]
   16a8e:	2b00      	cmp	r3, #0
   16a90:	d1e0      	bne.n	16a54 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   16a92:	4b1d      	ldr	r3, [pc, #116]	; (16b08 <init_storage+0xc8>)
   16a94:	0019      	movs	r1, r3
   16a96:	2001      	movs	r0, #1
   16a98:	4b16      	ldr	r3, [pc, #88]	; (16af4 <init_storage+0xb4>)
   16a9a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   16a9c:	238c      	movs	r3, #140	; 0x8c
   16a9e:	009a      	lsls	r2, r3, #2
   16aa0:	4b1a      	ldr	r3, [pc, #104]	; (16b0c <init_storage+0xcc>)
   16aa2:	2100      	movs	r1, #0
   16aa4:	0018      	movs	r0, r3
   16aa6:	4b1a      	ldr	r3, [pc, #104]	; (16b10 <init_storage+0xd0>)
   16aa8:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16aaa:	1dbc      	adds	r4, r7, #6
   16aac:	4b17      	ldr	r3, [pc, #92]	; (16b0c <init_storage+0xcc>)
   16aae:	0019      	movs	r1, r3
   16ab0:	2000      	movs	r0, #0
   16ab2:	4b18      	ldr	r3, [pc, #96]	; (16b14 <init_storage+0xd4>)
   16ab4:	4798      	blx	r3
   16ab6:	0003      	movs	r3, r0
   16ab8:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   16aba:	1dbb      	adds	r3, r7, #6
   16abc:	781b      	ldrb	r3, [r3, #0]
   16abe:	2b0b      	cmp	r3, #11
   16ac0:	d107      	bne.n	16ad2 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   16ac2:	1dbb      	adds	r3, r7, #6
   16ac4:	781a      	ldrb	r2, [r3, #0]
   16ac6:	4b14      	ldr	r3, [pc, #80]	; (16b18 <init_storage+0xd8>)
   16ac8:	0019      	movs	r1, r3
   16aca:	2001      	movs	r0, #1
   16acc:	4b09      	ldr	r3, [pc, #36]	; (16af4 <init_storage+0xb4>)
   16ace:	4798      	blx	r3
            return;
   16ad0:	e008      	b.n	16ae4 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   16ad2:	4b12      	ldr	r3, [pc, #72]	; (16b1c <init_storage+0xdc>)
   16ad4:	0019      	movs	r1, r3
   16ad6:	2001      	movs	r0, #1
   16ad8:	4b06      	ldr	r3, [pc, #24]	; (16af4 <init_storage+0xb4>)
   16ada:	4798      	blx	r3
        add_state(STORAGE_READY);
   16adc:	2001      	movs	r0, #1
   16ade:	4b10      	ldr	r3, [pc, #64]	; (16b20 <init_storage+0xe0>)
   16ae0:	4798      	blx	r3
        return;
   16ae2:	46c0      	nop			; (mov r8, r8)
    }
}
   16ae4:	46bd      	mov	sp, r7
   16ae6:	b003      	add	sp, #12
   16ae8:	bd90      	pop	{r4, r7, pc}
   16aea:	46c0      	nop			; (mov r8, r8)
   16aec:	0001f159 	.word	0x0001f159
   16af0:	00036de4 	.word	0x00036de4
   16af4:	0001e341 	.word	0x0001e341
   16af8:	0001f635 	.word	0x0001f635
   16afc:	00036e1c 	.word	0x00036e1c
   16b00:	00036e44 	.word	0x00036e44
   16b04:	0001f1a9 	.word	0x0001f1a9
   16b08:	00036e78 	.word	0x00036e78
   16b0c:	20000638 	.word	0x20000638
   16b10:	00034e13 	.word	0x00034e13
   16b14:	0002dcbd 	.word	0x0002dcbd
   16b18:	00036e9c 	.word	0x00036e9c
   16b1c:	00036ecc 	.word	0x00036ecc
   16b20:	00016131 	.word	0x00016131

00016b24 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16b24:	b580      	push	{r7, lr}
   16b26:	b082      	sub	sp, #8
   16b28:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16b2a:	1d3b      	adds	r3, r7, #4
   16b2c:	0018      	movs	r0, r3
   16b2e:	4b08      	ldr	r3, [pc, #32]	; (16b50 <configure_timer+0x2c>)
   16b30:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   16b32:	1d3a      	adds	r2, r7, #4
   16b34:	4b07      	ldr	r3, [pc, #28]	; (16b54 <configure_timer+0x30>)
   16b36:	0011      	movs	r1, r2
   16b38:	0018      	movs	r0, r3
   16b3a:	4b07      	ldr	r3, [pc, #28]	; (16b58 <configure_timer+0x34>)
   16b3c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   16b3e:	4b05      	ldr	r3, [pc, #20]	; (16b54 <configure_timer+0x30>)
   16b40:	0018      	movs	r0, r3
   16b42:	4b06      	ldr	r3, [pc, #24]	; (16b5c <configure_timer+0x38>)
   16b44:	4798      	blx	r3
}
   16b46:	46c0      	nop			; (mov r8, r8)
   16b48:	46bd      	mov	sp, r7
   16b4a:	b002      	add	sp, #8
   16b4c:	bd80      	pop	{r7, pc}
   16b4e:	46c0      	nop			; (mov r8, r8)
   16b50:	0003280d 	.word	0x0003280d
   16b54:	200048ec 	.word	0x200048ec
   16b58:	00032831 	.word	0x00032831
   16b5c:	0003291d 	.word	0x0003291d

00016b60 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16b60:	b580      	push	{r7, lr}
   16b62:	b088      	sub	sp, #32
   16b64:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16b66:	003b      	movs	r3, r7
   16b68:	0018      	movs	r0, r3
   16b6a:	4b16      	ldr	r3, [pc, #88]	; (16bc4 <configure_http_client+0x64>)
   16b6c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16b6e:	003b      	movs	r3, r7
   16b70:	2280      	movs	r2, #128	; 0x80
   16b72:	0092      	lsls	r2, r2, #2
   16b74:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16b76:	003b      	movs	r3, r7
   16b78:	4a13      	ldr	r2, [pc, #76]	; (16bc8 <configure_http_client+0x68>)
   16b7a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   16b7c:	003b      	movs	r3, r7
   16b7e:	22bc      	movs	r2, #188	; 0xbc
   16b80:	32ff      	adds	r2, #255	; 0xff
   16b82:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16b84:	003b      	movs	r3, r7
   16b86:	2201      	movs	r2, #1
   16b88:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16b8a:	003a      	movs	r2, r7
   16b8c:	4b0f      	ldr	r3, [pc, #60]	; (16bcc <configure_http_client+0x6c>)
   16b8e:	0011      	movs	r1, r2
   16b90:	0018      	movs	r0, r3
   16b92:	4b0f      	ldr	r3, [pc, #60]	; (16bd0 <configure_http_client+0x70>)
   16b94:	4798      	blx	r3
   16b96:	0003      	movs	r3, r0
   16b98:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   16b9a:	69fb      	ldr	r3, [r7, #28]
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	da06      	bge.n	16bae <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16ba0:	69fa      	ldr	r2, [r7, #28]
   16ba2:	4b0c      	ldr	r3, [pc, #48]	; (16bd4 <configure_http_client+0x74>)
   16ba4:	0019      	movs	r1, r3
   16ba6:	2001      	movs	r0, #1
   16ba8:	4b0b      	ldr	r3, [pc, #44]	; (16bd8 <configure_http_client+0x78>)
   16baa:	4798      	blx	r3
        while (1) {
   16bac:	e7fe      	b.n	16bac <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16bae:	4a0b      	ldr	r2, [pc, #44]	; (16bdc <configure_http_client+0x7c>)
   16bb0:	4b06      	ldr	r3, [pc, #24]	; (16bcc <configure_http_client+0x6c>)
   16bb2:	0011      	movs	r1, r2
   16bb4:	0018      	movs	r0, r3
   16bb6:	4b0a      	ldr	r3, [pc, #40]	; (16be0 <configure_http_client+0x80>)
   16bb8:	4798      	blx	r3
}
   16bba:	46c0      	nop			; (mov r8, r8)
   16bbc:	46bd      	mov	sp, r7
   16bbe:	b008      	add	sp, #32
   16bc0:	bd80      	pop	{r7, pc}
   16bc2:	46c0      	nop			; (mov r8, r8)
   16bc4:	00030ea1 	.word	0x00030ea1
   16bc8:	200048ec 	.word	0x200048ec
   16bcc:	20004944 	.word	0x20004944
   16bd0:	00030eed 	.word	0x00030eed
   16bd4:	00036ef0 	.word	0x00036ef0
   16bd8:	0001e341 	.word	0x0001e341
   16bdc:	00016711 	.word	0x00016711
   16be0:	00030fd9 	.word	0x00030fd9

00016be4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16be4:	b580      	push	{r7, lr}
   16be6:	b082      	sub	sp, #8
   16be8:	af00      	add	r7, sp, #0
   16bea:	603a      	str	r2, [r7, #0]
   16bec:	1dfb      	adds	r3, r7, #7
   16bee:	1c02      	adds	r2, r0, #0
   16bf0:	701a      	strb	r2, [r3, #0]
   16bf2:	1dbb      	adds	r3, r7, #6
   16bf4:	1c0a      	adds	r2, r1, #0
   16bf6:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16bf8:	683a      	ldr	r2, [r7, #0]
   16bfa:	1dbb      	adds	r3, r7, #6
   16bfc:	7819      	ldrb	r1, [r3, #0]
   16bfe:	1dfb      	adds	r3, r7, #7
   16c00:	781b      	ldrb	r3, [r3, #0]
   16c02:	b25b      	sxtb	r3, r3
   16c04:	0018      	movs	r0, r3
   16c06:	4b03      	ldr	r3, [pc, #12]	; (16c14 <socket_event_handler+0x30>)
   16c08:	4798      	blx	r3
}
   16c0a:	46c0      	nop			; (mov r8, r8)
   16c0c:	46bd      	mov	sp, r7
   16c0e:	b002      	add	sp, #8
   16c10:	bd80      	pop	{r7, pc}
   16c12:	46c0      	nop			; (mov r8, r8)
   16c14:	0002fb99 	.word	0x0002fb99

00016c18 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16c18:	b580      	push	{r7, lr}
   16c1a:	b082      	sub	sp, #8
   16c1c:	af00      	add	r7, sp, #0
   16c1e:	6078      	str	r0, [r7, #4]
   16c20:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   16c22:	683a      	ldr	r2, [r7, #0]
   16c24:	687b      	ldr	r3, [r7, #4]
   16c26:	0011      	movs	r1, r2
   16c28:	0018      	movs	r0, r3
   16c2a:	4b03      	ldr	r3, [pc, #12]	; (16c38 <socket_resolve_handler+0x20>)
   16c2c:	4798      	blx	r3
}
   16c2e:	46c0      	nop			; (mov r8, r8)
   16c30:	46bd      	mov	sp, r7
   16c32:	b002      	add	sp, #8
   16c34:	bd80      	pop	{r7, pc}
   16c36:	46c0      	nop			; (mov r8, r8)
   16c38:	0002fbcd 	.word	0x0002fbcd

00016c3c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   16c3c:	b590      	push	{r4, r7, lr}
   16c3e:	b089      	sub	sp, #36	; 0x24
   16c40:	af02      	add	r7, sp, #8
   16c42:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16c44:	2310      	movs	r3, #16
   16c46:	18fb      	adds	r3, r7, r3
   16c48:	2200      	movs	r2, #0
   16c4a:	701a      	strb	r2, [r3, #0]
   16c4c:	2310      	movs	r3, #16
   16c4e:	18fb      	adds	r3, r7, r3
   16c50:	2200      	movs	r2, #0
   16c52:	705a      	strb	r2, [r3, #1]
   16c54:	2310      	movs	r3, #16
   16c56:	18fb      	adds	r3, r7, r3
   16c58:	2200      	movs	r2, #0
   16c5a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16c5c:	687b      	ldr	r3, [r7, #4]
   16c5e:	685b      	ldr	r3, [r3, #4]
   16c60:	685a      	ldr	r2, [r3, #4]
   16c62:	687b      	ldr	r3, [r7, #4]
   16c64:	685b      	ldr	r3, [r3, #4]
   16c66:	689b      	ldr	r3, [r3, #8]
   16c68:	492a      	ldr	r1, [pc, #168]	; (16d14 <SubscribeHandlerLedTopic+0xd8>)
   16c6a:	2001      	movs	r0, #1
   16c6c:	4c2a      	ldr	r4, [pc, #168]	; (16d18 <SubscribeHandlerLedTopic+0xdc>)
   16c6e:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   16c70:	687b      	ldr	r3, [r7, #4]
   16c72:	681b      	ldr	r3, [r3, #0]
   16c74:	689b      	ldr	r3, [r3, #8]
   16c76:	4929      	ldr	r1, [pc, #164]	; (16d1c <SubscribeHandlerLedTopic+0xe0>)
   16c78:	2204      	movs	r2, #4
   16c7a:	0018      	movs	r0, r3
   16c7c:	4b28      	ldr	r3, [pc, #160]	; (16d20 <SubscribeHandlerLedTopic+0xe4>)
   16c7e:	4798      	blx	r3
   16c80:	1e03      	subs	r3, r0, #0
   16c82:	d143      	bne.n	16d0c <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   16c84:	687b      	ldr	r3, [r7, #4]
   16c86:	681b      	ldr	r3, [r3, #0]
   16c88:	689b      	ldr	r3, [r3, #8]
   16c8a:	3304      	adds	r3, #4
   16c8c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   16c8e:	2300      	movs	r3, #0
   16c90:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   16c92:	e015      	b.n	16cc0 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   16c94:	697c      	ldr	r4, [r7, #20]
   16c96:	1c63      	adds	r3, r4, #1
   16c98:	617b      	str	r3, [r7, #20]
   16c9a:	68fb      	ldr	r3, [r7, #12]
   16c9c:	220c      	movs	r2, #12
   16c9e:	18b9      	adds	r1, r7, r2
   16ca0:	220a      	movs	r2, #10
   16ca2:	0018      	movs	r0, r3
   16ca4:	4b1f      	ldr	r3, [pc, #124]	; (16d24 <SubscribeHandlerLedTopic+0xe8>)
   16ca6:	4798      	blx	r3
   16ca8:	0003      	movs	r3, r0
   16caa:	b2da      	uxtb	r2, r3
   16cac:	2310      	movs	r3, #16
   16cae:	18fb      	adds	r3, r7, r3
   16cb0:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16cb2:	68fb      	ldr	r3, [r7, #12]
   16cb4:	781b      	ldrb	r3, [r3, #0]
   16cb6:	2b2c      	cmp	r3, #44	; 0x2c
   16cb8:	d10a      	bne.n	16cd0 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   16cba:	68fb      	ldr	r3, [r7, #12]
   16cbc:	3301      	adds	r3, #1
   16cbe:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   16cc0:	697b      	ldr	r3, [r7, #20]
   16cc2:	2b02      	cmp	r3, #2
   16cc4:	dc05      	bgt.n	16cd2 <SubscribeHandlerLedTopic+0x96>
   16cc6:	68fb      	ldr	r3, [r7, #12]
   16cc8:	781b      	ldrb	r3, [r3, #0]
   16cca:	2b00      	cmp	r3, #0
   16ccc:	d1e2      	bne.n	16c94 <SubscribeHandlerLedTopic+0x58>
   16cce:	e000      	b.n	16cd2 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   16cd0:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   16cd2:	2310      	movs	r3, #16
   16cd4:	18fb      	adds	r3, r7, r3
   16cd6:	781b      	ldrb	r3, [r3, #0]
   16cd8:	001a      	movs	r2, r3
   16cda:	2310      	movs	r3, #16
   16cdc:	18fb      	adds	r3, r7, r3
   16cde:	785b      	ldrb	r3, [r3, #1]
   16ce0:	0018      	movs	r0, r3
   16ce2:	2310      	movs	r3, #16
   16ce4:	18fb      	adds	r3, r7, r3
   16ce6:	789b      	ldrb	r3, [r3, #2]
   16ce8:	490f      	ldr	r1, [pc, #60]	; (16d28 <SubscribeHandlerLedTopic+0xec>)
   16cea:	9300      	str	r3, [sp, #0]
   16cec:	0003      	movs	r3, r0
   16cee:	2001      	movs	r0, #1
   16cf0:	4c09      	ldr	r4, [pc, #36]	; (16d18 <SubscribeHandlerLedTopic+0xdc>)
   16cf2:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   16cf4:	2310      	movs	r3, #16
   16cf6:	18fb      	adds	r3, r7, r3
   16cf8:	7818      	ldrb	r0, [r3, #0]
   16cfa:	2310      	movs	r3, #16
   16cfc:	18fb      	adds	r3, r7, r3
   16cfe:	7859      	ldrb	r1, [r3, #1]
   16d00:	2310      	movs	r3, #16
   16d02:	18fb      	adds	r3, r7, r3
   16d04:	789b      	ldrb	r3, [r3, #2]
   16d06:	001a      	movs	r2, r3
   16d08:	4b08      	ldr	r3, [pc, #32]	; (16d2c <SubscribeHandlerLedTopic+0xf0>)
   16d0a:	4798      	blx	r3
    }
}
   16d0c:	46c0      	nop			; (mov r8, r8)
   16d0e:	46bd      	mov	sp, r7
   16d10:	b007      	add	sp, #28
   16d12:	bd90      	pop	{r4, r7, pc}
   16d14:	00036f38 	.word	0x00036f38
   16d18:	0001e341 	.word	0x0001e341
   16d1c:	00036f40 	.word	0x00036f40
   16d20:	000351d9 	.word	0x000351d9
   16d24:	00035385 	.word	0x00035385
   16d28:	00036f48 	.word	0x00036f48
   16d2c:	00015fc5 	.word	0x00015fc5

00016d30 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   16d30:	b590      	push	{r4, r7, lr}
   16d32:	b08b      	sub	sp, #44	; 0x2c
   16d34:	af00      	add	r7, sp, #0
   16d36:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   16d38:	230c      	movs	r3, #12
   16d3a:	18fb      	adds	r3, r7, r3
   16d3c:	2214      	movs	r2, #20
   16d3e:	21ff      	movs	r1, #255	; 0xff
   16d40:	0018      	movs	r0, r3
   16d42:	4b48      	ldr	r3, [pc, #288]	; (16e64 <SubscribeHandlerGameTopic+0x134>)
   16d44:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16d46:	687b      	ldr	r3, [r7, #4]
   16d48:	681b      	ldr	r3, [r3, #0]
   16d4a:	689b      	ldr	r3, [r3, #8]
   16d4c:	4946      	ldr	r1, [pc, #280]	; (16e68 <SubscribeHandlerGameTopic+0x138>)
   16d4e:	2209      	movs	r2, #9
   16d50:	0018      	movs	r0, r3
   16d52:	4b46      	ldr	r3, [pc, #280]	; (16e6c <SubscribeHandlerGameTopic+0x13c>)
   16d54:	4798      	blx	r3
   16d56:	1e03      	subs	r3, r0, #0
   16d58:	d166      	bne.n	16e28 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   16d5a:	4b45      	ldr	r3, [pc, #276]	; (16e70 <SubscribeHandlerGameTopic+0x140>)
   16d5c:	0019      	movs	r1, r3
   16d5e:	2001      	movs	r0, #1
   16d60:	4b44      	ldr	r3, [pc, #272]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16d62:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16d64:	687b      	ldr	r3, [r7, #4]
   16d66:	685b      	ldr	r3, [r3, #4]
   16d68:	685a      	ldr	r2, [r3, #4]
   16d6a:	687b      	ldr	r3, [r7, #4]
   16d6c:	685b      	ldr	r3, [r3, #4]
   16d6e:	689b      	ldr	r3, [r3, #8]
   16d70:	4941      	ldr	r1, [pc, #260]	; (16e78 <SubscribeHandlerGameTopic+0x148>)
   16d72:	2001      	movs	r0, #1
   16d74:	4c3f      	ldr	r4, [pc, #252]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16d76:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16d78:	687b      	ldr	r3, [r7, #4]
   16d7a:	681b      	ldr	r3, [r3, #0]
   16d7c:	68da      	ldr	r2, [r3, #12]
   16d7e:	687b      	ldr	r3, [r7, #4]
   16d80:	681b      	ldr	r3, [r3, #0]
   16d82:	689b      	ldr	r3, [r3, #8]
   16d84:	493d      	ldr	r1, [pc, #244]	; (16e7c <SubscribeHandlerGameTopic+0x14c>)
   16d86:	2001      	movs	r0, #1
   16d88:	4c3a      	ldr	r4, [pc, #232]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16d8a:	47a0      	blx	r4

        int nb = 0;
   16d8c:	2300      	movs	r3, #0
   16d8e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   16d90:	687b      	ldr	r3, [r7, #4]
   16d92:	681b      	ldr	r3, [r3, #0]
   16d94:	689b      	ldr	r3, [r3, #8]
   16d96:	3309      	adds	r3, #9
   16d98:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16d9a:	e015      	b.n	16dc8 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   16d9c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   16d9e:	1c63      	adds	r3, r4, #1
   16da0:	627b      	str	r3, [r7, #36]	; 0x24
   16da2:	68bb      	ldr	r3, [r7, #8]
   16da4:	2208      	movs	r2, #8
   16da6:	18b9      	adds	r1, r7, r2
   16da8:	220a      	movs	r2, #10
   16daa:	0018      	movs	r0, r3
   16dac:	4b34      	ldr	r3, [pc, #208]	; (16e80 <SubscribeHandlerGameTopic+0x150>)
   16dae:	4798      	blx	r3
   16db0:	0003      	movs	r3, r0
   16db2:	b2da      	uxtb	r2, r3
   16db4:	230c      	movs	r3, #12
   16db6:	18fb      	adds	r3, r7, r3
   16db8:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16dba:	68bb      	ldr	r3, [r7, #8]
   16dbc:	781b      	ldrb	r3, [r3, #0]
   16dbe:	2b2c      	cmp	r3, #44	; 0x2c
   16dc0:	d10a      	bne.n	16dd8 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   16dc2:	68bb      	ldr	r3, [r7, #8]
   16dc4:	3301      	adds	r3, #1
   16dc6:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16dca:	2b13      	cmp	r3, #19
   16dcc:	dc05      	bgt.n	16dda <SubscribeHandlerGameTopic+0xaa>
   16dce:	68bb      	ldr	r3, [r7, #8]
   16dd0:	781b      	ldrb	r3, [r3, #0]
   16dd2:	2b00      	cmp	r3, #0
   16dd4:	d1e2      	bne.n	16d9c <SubscribeHandlerGameTopic+0x6c>
   16dd6:	e000      	b.n	16dda <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   16dd8:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   16dda:	4b2a      	ldr	r3, [pc, #168]	; (16e84 <SubscribeHandlerGameTopic+0x154>)
   16ddc:	0019      	movs	r1, r3
   16dde:	2001      	movs	r0, #1
   16de0:	4b24      	ldr	r3, [pc, #144]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16de2:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16de4:	2300      	movs	r3, #0
   16de6:	623b      	str	r3, [r7, #32]
   16de8:	e00d      	b.n	16e06 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   16dea:	230c      	movs	r3, #12
   16dec:	18fa      	adds	r2, r7, r3
   16dee:	6a3b      	ldr	r3, [r7, #32]
   16df0:	18d3      	adds	r3, r2, r3
   16df2:	781b      	ldrb	r3, [r3, #0]
   16df4:	001a      	movs	r2, r3
   16df6:	4b24      	ldr	r3, [pc, #144]	; (16e88 <SubscribeHandlerGameTopic+0x158>)
   16df8:	0019      	movs	r1, r3
   16dfa:	2001      	movs	r0, #1
   16dfc:	4b1d      	ldr	r3, [pc, #116]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16dfe:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16e00:	6a3b      	ldr	r3, [r7, #32]
   16e02:	3301      	adds	r3, #1
   16e04:	623b      	str	r3, [r7, #32]
   16e06:	6a3b      	ldr	r3, [r7, #32]
   16e08:	2b13      	cmp	r3, #19
   16e0a:	ddee      	ble.n	16dea <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   16e0c:	230c      	movs	r3, #12
   16e0e:	18fb      	adds	r3, r7, r3
   16e10:	0018      	movs	r0, r3
   16e12:	4b1e      	ldr	r3, [pc, #120]	; (16e8c <SubscribeHandlerGameTopic+0x15c>)
   16e14:	4798      	blx	r3
   16e16:	0003      	movs	r3, r0
   16e18:	2b01      	cmp	r3, #1
   16e1a:	d11e      	bne.n	16e5a <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   16e1c:	4b1c      	ldr	r3, [pc, #112]	; (16e90 <SubscribeHandlerGameTopic+0x160>)
   16e1e:	0019      	movs	r1, r3
   16e20:	2001      	movs	r0, #1
   16e22:	4b14      	ldr	r3, [pc, #80]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16e24:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   16e26:	e018      	b.n	16e5a <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   16e28:	4b1a      	ldr	r3, [pc, #104]	; (16e94 <SubscribeHandlerGameTopic+0x164>)
   16e2a:	0019      	movs	r1, r3
   16e2c:	2001      	movs	r0, #1
   16e2e:	4b11      	ldr	r3, [pc, #68]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16e30:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16e32:	687b      	ldr	r3, [r7, #4]
   16e34:	685b      	ldr	r3, [r3, #4]
   16e36:	685a      	ldr	r2, [r3, #4]
   16e38:	687b      	ldr	r3, [r7, #4]
   16e3a:	685b      	ldr	r3, [r3, #4]
   16e3c:	689b      	ldr	r3, [r3, #8]
   16e3e:	490e      	ldr	r1, [pc, #56]	; (16e78 <SubscribeHandlerGameTopic+0x148>)
   16e40:	2001      	movs	r0, #1
   16e42:	4c0c      	ldr	r4, [pc, #48]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16e44:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16e46:	687b      	ldr	r3, [r7, #4]
   16e48:	681b      	ldr	r3, [r3, #0]
   16e4a:	68da      	ldr	r2, [r3, #12]
   16e4c:	687b      	ldr	r3, [r7, #4]
   16e4e:	681b      	ldr	r3, [r3, #0]
   16e50:	689b      	ldr	r3, [r3, #8]
   16e52:	490a      	ldr	r1, [pc, #40]	; (16e7c <SubscribeHandlerGameTopic+0x14c>)
   16e54:	2001      	movs	r0, #1
   16e56:	4c07      	ldr	r4, [pc, #28]	; (16e74 <SubscribeHandlerGameTopic+0x144>)
   16e58:	47a0      	blx	r4
}
   16e5a:	46c0      	nop			; (mov r8, r8)
   16e5c:	46bd      	mov	sp, r7
   16e5e:	b00b      	add	sp, #44	; 0x2c
   16e60:	bd90      	pop	{r4, r7, pc}
   16e62:	46c0      	nop			; (mov r8, r8)
   16e64:	00034e13 	.word	0x00034e13
   16e68:	00036f5c 	.word	0x00036f5c
   16e6c:	000351d9 	.word	0x000351d9
   16e70:	00036f68 	.word	0x00036f68
   16e74:	0001e341 	.word	0x0001e341
   16e78:	00036f38 	.word	0x00036f38
   16e7c:	00036f84 	.word	0x00036f84
   16e80:	00035385 	.word	0x00035385
   16e84:	00036f8c 	.word	0x00036f8c
   16e88:	00036fa0 	.word	0x00036fa0
   16e8c:	00013f7d 	.word	0x00013f7d
   16e90:	00036fa4 	.word	0x00036fa4
   16e94:	00036fc0 	.word	0x00036fc0

00016e98 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   16e98:	b590      	push	{r4, r7, lr}
   16e9a:	b083      	sub	sp, #12
   16e9c:	af00      	add	r7, sp, #0
   16e9e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "IMU topic received! -"); //changed by Derek
   16ea0:	4b09      	ldr	r3, [pc, #36]	; (16ec8 <SubscribeHandlerImuTopic+0x30>)
   16ea2:	0019      	movs	r1, r3
   16ea4:	2001      	movs	r0, #1
   16ea6:	4b09      	ldr	r3, [pc, #36]	; (16ecc <SubscribeHandlerImuTopic+0x34>)
   16ea8:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s \r\n\r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16eaa:	687b      	ldr	r3, [r7, #4]
   16eac:	685b      	ldr	r3, [r3, #4]
   16eae:	685a      	ldr	r2, [r3, #4]
   16eb0:	687b      	ldr	r3, [r7, #4]
   16eb2:	685b      	ldr	r3, [r3, #4]
   16eb4:	689b      	ldr	r3, [r3, #8]
   16eb6:	4906      	ldr	r1, [pc, #24]	; (16ed0 <SubscribeHandlerImuTopic+0x38>)
   16eb8:	2001      	movs	r0, #1
   16eba:	4c04      	ldr	r4, [pc, #16]	; (16ecc <SubscribeHandlerImuTopic+0x34>)
   16ebc:	47a0      	blx	r4
}
   16ebe:	46c0      	nop			; (mov r8, r8)
   16ec0:	46bd      	mov	sp, r7
   16ec2:	b003      	add	sp, #12
   16ec4:	bd90      	pop	{r4, r7, pc}
   16ec6:	46c0      	nop			; (mov r8, r8)
   16ec8:	00036ff0 	.word	0x00036ff0
   16ecc:	0001e341 	.word	0x0001e341
   16ed0:	00037008 	.word	0x00037008

00016ed4 <SubscribeHandlerGpsTopic>:
	LogMessage(LOG_DEBUG_LVL, "\r\nDistance topic received!\r\n");
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandlerGpsTopic(MessageData *msgData) //Derek-GPS, used in mqtt_callback()
{
   16ed4:	b590      	push	{r4, r7, lr}
   16ed6:	b083      	sub	sp, #12
   16ed8:	af00      	add	r7, sp, #0
   16eda:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "GPS topic received! -");
   16edc:	4b09      	ldr	r3, [pc, #36]	; (16f04 <SubscribeHandlerGpsTopic+0x30>)
   16ede:	0019      	movs	r1, r3
   16ee0:	2001      	movs	r0, #1
   16ee2:	4b09      	ldr	r3, [pc, #36]	; (16f08 <SubscribeHandlerGpsTopic+0x34>)
   16ee4:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "%.*s \r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16ee6:	687b      	ldr	r3, [r7, #4]
   16ee8:	685b      	ldr	r3, [r3, #4]
   16eea:	685a      	ldr	r2, [r3, #4]
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	685b      	ldr	r3, [r3, #4]
   16ef0:	689b      	ldr	r3, [r3, #8]
   16ef2:	4906      	ldr	r1, [pc, #24]	; (16f0c <SubscribeHandlerGpsTopic+0x38>)
   16ef4:	2001      	movs	r0, #1
   16ef6:	4c04      	ldr	r4, [pc, #16]	; (16f08 <SubscribeHandlerGpsTopic+0x34>)
   16ef8:	47a0      	blx	r4
}
   16efa:	46c0      	nop			; (mov r8, r8)
   16efc:	46bd      	mov	sp, r7
   16efe:	b003      	add	sp, #12
   16f00:	bd90      	pop	{r4, r7, pc}
   16f02:	46c0      	nop			; (mov r8, r8)
   16f04:	00037034 	.word	0x00037034
   16f08:	0001e341 	.word	0x0001e341
   16f0c:	0003704c 	.word	0x0003704c

00016f10 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16f10:	b590      	push	{r4, r7, lr}
   16f12:	b08b      	sub	sp, #44	; 0x2c
   16f14:	af06      	add	r7, sp, #24
   16f16:	60f8      	str	r0, [r7, #12]
   16f18:	60b9      	str	r1, [r7, #8]
   16f1a:	607a      	str	r2, [r7, #4]
    switch (type) {
   16f1c:	68bb      	ldr	r3, [r7, #8]
   16f1e:	2b01      	cmp	r3, #1
   16f20:	d03b      	beq.n	16f9a <mqtt_callback+0x8a>
   16f22:	2b05      	cmp	r3, #5
   16f24:	d064      	beq.n	16ff0 <mqtt_callback+0xe0>
   16f26:	2b00      	cmp	r3, #0
   16f28:	d000      	beq.n	16f2c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   16f2a:	e067      	b.n	16ffc <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   16f2c:	687b      	ldr	r3, [r7, #4]
   16f2e:	681b      	ldr	r3, [r3, #0]
   16f30:	2b00      	cmp	r3, #0
   16f32:	db25      	blt.n	16f80 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16f34:	4b33      	ldr	r3, [pc, #204]	; (17004 <mqtt_callback+0xf4>)
   16f36:	0019      	movs	r1, r3
   16f38:	2001      	movs	r0, #1
   16f3a:	4b33      	ldr	r3, [pc, #204]	; (17008 <mqtt_callback+0xf8>)
   16f3c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   16f3e:	4933      	ldr	r1, [pc, #204]	; (1700c <mqtt_callback+0xfc>)
   16f40:	4a33      	ldr	r2, [pc, #204]	; (17010 <mqtt_callback+0x100>)
   16f42:	68f8      	ldr	r0, [r7, #12]
   16f44:	2300      	movs	r3, #0
   16f46:	9305      	str	r3, [sp, #20]
   16f48:	2300      	movs	r3, #0
   16f4a:	9304      	str	r3, [sp, #16]
   16f4c:	2300      	movs	r3, #0
   16f4e:	9303      	str	r3, [sp, #12]
   16f50:	2300      	movs	r3, #0
   16f52:	9302      	str	r3, [sp, #8]
   16f54:	2300      	movs	r3, #0
   16f56:	9301      	str	r3, [sp, #4]
   16f58:	4b2d      	ldr	r3, [pc, #180]	; (17010 <mqtt_callback+0x100>)
   16f5a:	9300      	str	r3, [sp, #0]
   16f5c:	000b      	movs	r3, r1
   16f5e:	2101      	movs	r1, #1
   16f60:	4c2c      	ldr	r4, [pc, #176]	; (17014 <mqtt_callback+0x104>)
   16f62:	47a0      	blx	r4
   16f64:	1e03      	subs	r3, r0, #0
   16f66:	d005      	beq.n	16f74 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16f68:	4b2b      	ldr	r3, [pc, #172]	; (17018 <mqtt_callback+0x108>)
   16f6a:	0019      	movs	r1, r3
   16f6c:	2001      	movs	r0, #1
   16f6e:	4b26      	ldr	r3, [pc, #152]	; (17008 <mqtt_callback+0xf8>)
   16f70:	4798      	blx	r3
        } break;
   16f72:	e043      	b.n	16ffc <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n\r\n");
   16f74:	4b29      	ldr	r3, [pc, #164]	; (1701c <mqtt_callback+0x10c>)
   16f76:	0019      	movs	r1, r3
   16f78:	2001      	movs	r0, #1
   16f7a:	4b23      	ldr	r3, [pc, #140]	; (17008 <mqtt_callback+0xf8>)
   16f7c:	4798      	blx	r3
        } break;
   16f7e:	e03d      	b.n	16ffc <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16f80:	4a27      	ldr	r2, [pc, #156]	; (17020 <mqtt_callback+0x110>)
   16f82:	4b28      	ldr	r3, [pc, #160]	; (17024 <mqtt_callback+0x114>)
   16f84:	0019      	movs	r1, r3
   16f86:	2001      	movs	r0, #1
   16f88:	4b1f      	ldr	r3, [pc, #124]	; (17008 <mqtt_callback+0xf8>)
   16f8a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16f8c:	4a24      	ldr	r2, [pc, #144]	; (17020 <mqtt_callback+0x110>)
   16f8e:	68fb      	ldr	r3, [r7, #12]
   16f90:	0011      	movs	r1, r2
   16f92:	0018      	movs	r0, r3
   16f94:	4b24      	ldr	r3, [pc, #144]	; (17028 <mqtt_callback+0x118>)
   16f96:	4798      	blx	r3
        } break;
   16f98:	e030      	b.n	16ffc <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16f9a:	687b      	ldr	r3, [r7, #4]
   16f9c:	781b      	ldrb	r3, [r3, #0]
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	d11d      	bne.n	16fde <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16fa2:	4b22      	ldr	r3, [pc, #136]	; (1702c <mqtt_callback+0x11c>)
   16fa4:	4922      	ldr	r1, [pc, #136]	; (17030 <mqtt_callback+0x120>)
   16fa6:	68f8      	ldr	r0, [r7, #12]
   16fa8:	2202      	movs	r2, #2
   16faa:	4c22      	ldr	r4, [pc, #136]	; (17034 <mqtt_callback+0x124>)
   16fac:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   16fae:	4b22      	ldr	r3, [pc, #136]	; (17038 <mqtt_callback+0x128>)
   16fb0:	4922      	ldr	r1, [pc, #136]	; (1703c <mqtt_callback+0x12c>)
   16fb2:	68f8      	ldr	r0, [r7, #12]
   16fb4:	2202      	movs	r2, #2
   16fb6:	4c1f      	ldr	r4, [pc, #124]	; (17034 <mqtt_callback+0x124>)
   16fb8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   16fba:	4b21      	ldr	r3, [pc, #132]	; (17040 <mqtt_callback+0x130>)
   16fbc:	4921      	ldr	r1, [pc, #132]	; (17044 <mqtt_callback+0x134>)
   16fbe:	68f8      	ldr	r0, [r7, #12]
   16fc0:	2202      	movs	r2, #2
   16fc2:	4c1c      	ldr	r4, [pc, #112]	; (17034 <mqtt_callback+0x124>)
   16fc4:	47a0      	blx	r4
				mqtt_subscribe(module_inst, GPS_TOPIC, 2, SubscribeHandlerGpsTopic); //Derek-GPS
   16fc6:	4b20      	ldr	r3, [pc, #128]	; (17048 <mqtt_callback+0x138>)
   16fc8:	4920      	ldr	r1, [pc, #128]	; (1704c <mqtt_callback+0x13c>)
   16fca:	68f8      	ldr	r0, [r7, #12]
   16fcc:	2202      	movs	r2, #2
   16fce:	4c19      	ldr	r4, [pc, #100]	; (17034 <mqtt_callback+0x124>)
   16fd0:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   16fd2:	4b1f      	ldr	r3, [pc, #124]	; (17050 <mqtt_callback+0x140>)
   16fd4:	0019      	movs	r1, r3
   16fd6:	2001      	movs	r0, #1
   16fd8:	4b0b      	ldr	r3, [pc, #44]	; (17008 <mqtt_callback+0xf8>)
   16fda:	4798      	blx	r3
            break;
   16fdc:	e00e      	b.n	16ffc <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16fde:	687b      	ldr	r3, [r7, #4]
   16fe0:	781b      	ldrb	r3, [r3, #0]
   16fe2:	001a      	movs	r2, r3
   16fe4:	4b1b      	ldr	r3, [pc, #108]	; (17054 <mqtt_callback+0x144>)
   16fe6:	0019      	movs	r1, r3
   16fe8:	2001      	movs	r0, #1
   16fea:	4b07      	ldr	r3, [pc, #28]	; (17008 <mqtt_callback+0xf8>)
   16fec:	4798      	blx	r3
            break;
   16fee:	e005      	b.n	16ffc <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   16ff0:	4b19      	ldr	r3, [pc, #100]	; (17058 <mqtt_callback+0x148>)
   16ff2:	0019      	movs	r1, r3
   16ff4:	2001      	movs	r0, #1
   16ff6:	4b04      	ldr	r3, [pc, #16]	; (17008 <mqtt_callback+0xf8>)
   16ff8:	4798      	blx	r3
            break;
   16ffa:	46c0      	nop			; (mov r8, r8)
}
   16ffc:	46c0      	nop			; (mov r8, r8)
   16ffe:	46bd      	mov	sp, r7
   17000:	b005      	add	sp, #20
   17002:	bd90      	pop	{r4, r7, pc}
   17004:	00037080 	.word	0x00037080
   17008:	0001e341 	.word	0x0001e341
   1700c:	0003709c 	.word	0x0003709c
   17010:	000370ac 	.word	0x000370ac
   17014:	0002fc39 	.word	0x0002fc39
   17018:	000370b8 	.word	0x000370b8
   1701c:	000370e0 	.word	0x000370e0
   17020:	000369b0 	.word	0x000369b0
   17024:	00037100 	.word	0x00037100
   17028:	0002fbf1 	.word	0x0002fbf1
   1702c:	00016d31 	.word	0x00016d31
   17030:	00037138 	.word	0x00037138
   17034:	0002fdd9 	.word	0x0002fdd9
   17038:	00016c3d 	.word	0x00016c3d
   1703c:	0003705c 	.word	0x0003705c
   17040:	00016e99 	.word	0x00016e99
   17044:	0003714c 	.word	0x0003714c
   17048:	00016ed5 	.word	0x00016ed5
   1704c:	00037160 	.word	0x00037160
   17050:	00037174 	.word	0x00037174
   17054:	00037188 	.word	0x00037188
   17058:	000371bc 	.word	0x000371bc

0001705c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   1705c:	b580      	push	{r7, lr}
   1705e:	b088      	sub	sp, #32
   17060:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17062:	1d3b      	adds	r3, r7, #4
   17064:	0018      	movs	r0, r3
   17066:	4b1f      	ldr	r3, [pc, #124]	; (170e4 <configure_mqtt+0x88>)
   17068:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1706a:	1d3b      	adds	r3, r7, #4
   1706c:	4a1e      	ldr	r2, [pc, #120]	; (170e8 <configure_mqtt+0x8c>)
   1706e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17070:	1d3b      	adds	r3, r7, #4
   17072:	2280      	movs	r2, #128	; 0x80
   17074:	0092      	lsls	r2, r2, #2
   17076:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17078:	1d3b      	adds	r3, r7, #4
   1707a:	4a1c      	ldr	r2, [pc, #112]	; (170ec <configure_mqtt+0x90>)
   1707c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1707e:	1d3b      	adds	r3, r7, #4
   17080:	2280      	movs	r2, #128	; 0x80
   17082:	0092      	lsls	r2, r2, #2
   17084:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   17086:	1d3b      	adds	r3, r7, #4
   17088:	4a19      	ldr	r2, [pc, #100]	; (170f0 <configure_mqtt+0x94>)
   1708a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   1708c:	1d3b      	adds	r3, r7, #4
   1708e:	4a19      	ldr	r2, [pc, #100]	; (170f4 <configure_mqtt+0x98>)
   17090:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17092:	1d3a      	adds	r2, r7, #4
   17094:	4b18      	ldr	r3, [pc, #96]	; (170f8 <configure_mqtt+0x9c>)
   17096:	0011      	movs	r1, r2
   17098:	0018      	movs	r0, r3
   1709a:	4b18      	ldr	r3, [pc, #96]	; (170fc <configure_mqtt+0xa0>)
   1709c:	4798      	blx	r3
   1709e:	0003      	movs	r3, r0
   170a0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   170a2:	69fb      	ldr	r3, [r7, #28]
   170a4:	2b00      	cmp	r3, #0
   170a6:	da06      	bge.n	170b6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   170a8:	69fa      	ldr	r2, [r7, #28]
   170aa:	4b15      	ldr	r3, [pc, #84]	; (17100 <configure_mqtt+0xa4>)
   170ac:	0019      	movs	r1, r3
   170ae:	2001      	movs	r0, #1
   170b0:	4b14      	ldr	r3, [pc, #80]	; (17104 <configure_mqtt+0xa8>)
   170b2:	4798      	blx	r3
        while (1) {
   170b4:	e7fe      	b.n	170b4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   170b6:	4a14      	ldr	r2, [pc, #80]	; (17108 <configure_mqtt+0xac>)
   170b8:	4b0f      	ldr	r3, [pc, #60]	; (170f8 <configure_mqtt+0x9c>)
   170ba:	0011      	movs	r1, r2
   170bc:	0018      	movs	r0, r3
   170be:	4b13      	ldr	r3, [pc, #76]	; (1710c <configure_mqtt+0xb0>)
   170c0:	4798      	blx	r3
   170c2:	0003      	movs	r3, r0
   170c4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   170c6:	69fb      	ldr	r3, [r7, #28]
   170c8:	2b00      	cmp	r3, #0
   170ca:	da06      	bge.n	170da <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   170cc:	69fa      	ldr	r2, [r7, #28]
   170ce:	4b10      	ldr	r3, [pc, #64]	; (17110 <configure_mqtt+0xb4>)
   170d0:	0019      	movs	r1, r3
   170d2:	2001      	movs	r0, #1
   170d4:	4b0b      	ldr	r3, [pc, #44]	; (17104 <configure_mqtt+0xa8>)
   170d6:	4798      	blx	r3
        while (1) {
   170d8:	e7fe      	b.n	170d8 <configure_mqtt+0x7c>
        }
    }
}
   170da:	46c0      	nop			; (mov r8, r8)
   170dc:	46bd      	mov	sp, r7
   170de:	b008      	add	sp, #32
   170e0:	bd80      	pop	{r7, pc}
   170e2:	46c0      	nop			; (mov r8, r8)
   170e4:	0002fb31 	.word	0x0002fb31
   170e8:	200008cc 	.word	0x200008cc
   170ec:	20000acc 	.word	0x20000acc
   170f0:	0000075b 	.word	0x0000075b
   170f4:	00001770 	.word	0x00001770
   170f8:	20000894 	.word	0x20000894
   170fc:	0002fa81 	.word	0x0002fa81
   17100:	000371d0 	.word	0x000371d0
   17104:	0001e341 	.word	0x0001e341
   17108:	00016f11 	.word	0x00016f11
   1710c:	0002fb71 	.word	0x0002fb71
   17110:	00037204 	.word	0x00037204

00017114 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   17114:	b580      	push	{r7, lr}
   17116:	b084      	sub	sp, #16
   17118:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   1711a:	1d3b      	adds	r3, r7, #4
   1711c:	0018      	movs	r0, r3
   1711e:	4b0b      	ldr	r3, [pc, #44]	; (1714c <configure_extint_channel+0x38>)
   17120:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   17122:	1d3b      	adds	r3, r7, #4
   17124:	2237      	movs	r2, #55	; 0x37
   17126:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17128:	1d3b      	adds	r3, r7, #4
   1712a:	2200      	movs	r2, #0
   1712c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1712e:	1d3b      	adds	r3, r7, #4
   17130:	2201      	movs	r2, #1
   17132:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   17134:	1d3b      	adds	r3, r7, #4
   17136:	2202      	movs	r2, #2
   17138:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   1713a:	1d3b      	adds	r3, r7, #4
   1713c:	0019      	movs	r1, r3
   1713e:	2007      	movs	r0, #7
   17140:	4b03      	ldr	r3, [pc, #12]	; (17150 <configure_extint_channel+0x3c>)
   17142:	4798      	blx	r3
}
   17144:	46c0      	nop			; (mov r8, r8)
   17146:	46bd      	mov	sp, r7
   17148:	b004      	add	sp, #16
   1714a:	bd80      	pop	{r7, pc}
   1714c:	00026c69 	.word	0x00026c69
   17150:	00026c9d 	.word	0x00026c9d

00017154 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   17154:	b580      	push	{r7, lr}
   17156:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17158:	4b06      	ldr	r3, [pc, #24]	; (17174 <configure_extint_callbacks+0x20>)
   1715a:	2200      	movs	r2, #0
   1715c:	2107      	movs	r1, #7
   1715e:	0018      	movs	r0, r3
   17160:	4b05      	ldr	r3, [pc, #20]	; (17178 <configure_extint_callbacks+0x24>)
   17162:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17164:	2100      	movs	r1, #0
   17166:	2007      	movs	r0, #7
   17168:	4b04      	ldr	r3, [pc, #16]	; (1717c <configure_extint_callbacks+0x28>)
   1716a:	4798      	blx	r3
}
   1716c:	46c0      	nop			; (mov r8, r8)
   1716e:	46bd      	mov	sp, r7
   17170:	bd80      	pop	{r7, pc}
   17172:	46c0      	nop			; (mov r8, r8)
   17174:	00017181 	.word	0x00017181
   17178:	00026869 	.word	0x00026869
   1717c:	000268cd 	.word	0x000268cd

00017180 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17180:	b5b0      	push	{r4, r5, r7, lr}
   17182:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17184:	4b0c      	ldr	r3, [pc, #48]	; (171b8 <extint_detection_callback+0x38>)
   17186:	681b      	ldr	r3, [r3, #0]
   17188:	1c5a      	adds	r2, r3, #1
   1718a:	4b0b      	ldr	r3, [pc, #44]	; (171b8 <extint_detection_callback+0x38>)
   1718c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   1718e:	4b0a      	ldr	r3, [pc, #40]	; (171b8 <extint_detection_callback+0x38>)
   17190:	681b      	ldr	r3, [r3, #0]
   17192:	2b28      	cmp	r3, #40	; 0x28
   17194:	d902      	bls.n	1719c <extint_detection_callback+0x1c>
   17196:	4b08      	ldr	r3, [pc, #32]	; (171b8 <extint_detection_callback+0x38>)
   17198:	2201      	movs	r2, #1
   1719a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1719c:	4b06      	ldr	r3, [pc, #24]	; (171b8 <extint_detection_callback+0x38>)
   1719e:	681b      	ldr	r3, [r3, #0]
   171a0:	4a06      	ldr	r2, [pc, #24]	; (171bc <extint_detection_callback+0x3c>)
   171a2:	4807      	ldr	r0, [pc, #28]	; (171c0 <extint_detection_callback+0x40>)
   171a4:	213f      	movs	r1, #63	; 0x3f
   171a6:	4c07      	ldr	r4, [pc, #28]	; (171c4 <extint_detection_callback+0x44>)
   171a8:	47a0      	blx	r4
    isPressed = true;
   171aa:	4b07      	ldr	r3, [pc, #28]	; (171c8 <extint_detection_callback+0x48>)
   171ac:	2201      	movs	r2, #1
   171ae:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   171b0:	46c0      	nop			; (mov r8, r8)
   171b2:	46bd      	mov	sp, r7
   171b4:	bdb0      	pop	{r4, r5, r7, pc}
   171b6:	46c0      	nop			; (mov r8, r8)
   171b8:	200000b0 	.word	0x200000b0
   171bc:	00037238 	.word	0x00037238
   171c0:	20000070 	.word	0x20000070
   171c4:	0003506d 	.word	0x0003506d
   171c8:	20000ccc 	.word	0x20000ccc

000171cc <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   171cc:	b580      	push	{r7, lr}
   171ce:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   171d0:	4a15      	ldr	r2, [pc, #84]	; (17228 <HTTP_DownloadFileInit+0x5c>)
   171d2:	4b16      	ldr	r3, [pc, #88]	; (1722c <HTTP_DownloadFileInit+0x60>)
   171d4:	0011      	movs	r1, r2
   171d6:	0018      	movs	r0, r3
   171d8:	4b15      	ldr	r3, [pc, #84]	; (17230 <HTTP_DownloadFileInit+0x64>)
   171da:	4798      	blx	r3
   171dc:	1e03      	subs	r3, r0, #0
   171de:	d008      	beq.n	171f2 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   171e0:	4b14      	ldr	r3, [pc, #80]	; (17234 <HTTP_DownloadFileInit+0x68>)
   171e2:	0019      	movs	r1, r3
   171e4:	2001      	movs	r0, #1
   171e6:	4b14      	ldr	r3, [pc, #80]	; (17238 <HTTP_DownloadFileInit+0x6c>)
   171e8:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   171ea:	e002      	b.n	171f2 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   171ec:	2000      	movs	r0, #0
   171ee:	4b13      	ldr	r3, [pc, #76]	; (1723c <HTTP_DownloadFileInit+0x70>)
   171f0:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   171f2:	4b0e      	ldr	r3, [pc, #56]	; (1722c <HTTP_DownloadFileInit+0x60>)
   171f4:	2234      	movs	r2, #52	; 0x34
   171f6:	5c9b      	ldrb	r3, [r3, r2]
   171f8:	2b00      	cmp	r3, #0
   171fa:	d1f7      	bne.n	171ec <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   171fc:	4b10      	ldr	r3, [pc, #64]	; (17240 <HTTP_DownloadFileInit+0x74>)
   171fe:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17200:	4b10      	ldr	r3, [pc, #64]	; (17244 <HTTP_DownloadFileInit+0x78>)
   17202:	2201      	movs	r2, #1
   17204:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17206:	4a10      	ldr	r2, [pc, #64]	; (17248 <HTTP_DownloadFileInit+0x7c>)
   17208:	4b10      	ldr	r3, [pc, #64]	; (1724c <HTTP_DownloadFileInit+0x80>)
   1720a:	0011      	movs	r1, r2
   1720c:	0018      	movs	r0, r3
   1720e:	4b10      	ldr	r3, [pc, #64]	; (17250 <HTTP_DownloadFileInit+0x84>)
   17210:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17212:	4b10      	ldr	r3, [pc, #64]	; (17254 <HTTP_DownloadFileInit+0x88>)
   17214:	4798      	blx	r3

    start_download();
   17216:	4b10      	ldr	r3, [pc, #64]	; (17258 <HTTP_DownloadFileInit+0x8c>)
   17218:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1721a:	4b10      	ldr	r3, [pc, #64]	; (1725c <HTTP_DownloadFileInit+0x90>)
   1721c:	2203      	movs	r2, #3
   1721e:	701a      	strb	r2, [r3, #0]
}
   17220:	46c0      	nop			; (mov r8, r8)
   17222:	46bd      	mov	sp, r7
   17224:	bd80      	pop	{r7, pc}
   17226:	46c0      	nop			; (mov r8, r8)
   17228:	000369b0 	.word	0x000369b0
   1722c:	20000894 	.word	0x20000894
   17230:	0002fd25 	.word	0x0002fd25
   17234:	00036dc0 	.word	0x00036dc0
   17238:	0001e341 	.word	0x0001e341
   1723c:	00022359 	.word	0x00022359
   17240:	00025915 	.word	0x00025915
   17244:	20000634 	.word	0x20000634
   17248:	0001688d 	.word	0x0001688d
   1724c:	00016859 	.word	0x00016859
   17250:	0002595d 	.word	0x0002595d
   17254:	000258c5 	.word	0x000258c5
   17258:	00016481 	.word	0x00016481
   1725c:	20000620 	.word	0x20000620

00017260 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17260:	b590      	push	{r4, r7, lr}
   17262:	b085      	sub	sp, #20
   17264:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17266:	e009      	b.n	1727c <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17268:	2000      	movs	r0, #0
   1726a:	4b2a      	ldr	r3, [pc, #168]	; (17314 <HTTP_DownloadFileTransaction+0xb4>)
   1726c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1726e:	4b2a      	ldr	r3, [pc, #168]	; (17318 <HTTP_DownloadFileTransaction+0xb8>)
   17270:	0018      	movs	r0, r3
   17272:	4b2a      	ldr	r3, [pc, #168]	; (1731c <HTTP_DownloadFileTransaction+0xbc>)
   17274:	4798      	blx	r3
        vTaskDelay(5);
   17276:	2005      	movs	r0, #5
   17278:	4b29      	ldr	r3, [pc, #164]	; (17320 <HTTP_DownloadFileTransaction+0xc0>)
   1727a:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1727c:	2010      	movs	r0, #16
   1727e:	4b29      	ldr	r3, [pc, #164]	; (17324 <HTTP_DownloadFileTransaction+0xc4>)
   17280:	4798      	blx	r3
   17282:	0003      	movs	r3, r0
   17284:	001a      	movs	r2, r3
   17286:	2301      	movs	r3, #1
   17288:	4053      	eors	r3, r2
   1728a:	b2db      	uxtb	r3, r3
   1728c:	2b00      	cmp	r3, #0
   1728e:	d009      	beq.n	172a4 <HTTP_DownloadFileTransaction+0x44>
   17290:	2020      	movs	r0, #32
   17292:	4b24      	ldr	r3, [pc, #144]	; (17324 <HTTP_DownloadFileTransaction+0xc4>)
   17294:	4798      	blx	r3
   17296:	0003      	movs	r3, r0
   17298:	001a      	movs	r2, r3
   1729a:	2301      	movs	r3, #1
   1729c:	4053      	eors	r3, r2
   1729e:	b2db      	uxtb	r3, r3
   172a0:	2b00      	cmp	r3, #0
   172a2:	d1e1      	bne.n	17268 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   172a4:	4b20      	ldr	r3, [pc, #128]	; (17328 <HTTP_DownloadFileTransaction+0xc8>)
   172a6:	4798      	blx	r3
    vTaskDelay(1000);
   172a8:	23fa      	movs	r3, #250	; 0xfa
   172aa:	009b      	lsls	r3, r3, #2
   172ac:	0018      	movs	r0, r3
   172ae:	4b1c      	ldr	r3, [pc, #112]	; (17320 <HTTP_DownloadFileTransaction+0xc0>)
   172b0:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   172b2:	4b1e      	ldr	r3, [pc, #120]	; (1732c <HTTP_DownloadFileTransaction+0xcc>)
   172b4:	2200      	movs	r2, #0
   172b6:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   172b8:	003b      	movs	r3, r7
   172ba:	4a1d      	ldr	r2, [pc, #116]	; (17330 <HTTP_DownloadFileTransaction+0xd0>)
   172bc:	ca13      	ldmia	r2!, {r0, r1, r4}
   172be:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   172c0:	003b      	movs	r3, r7
   172c2:	2230      	movs	r2, #48	; 0x30
   172c4:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   172c6:	230f      	movs	r3, #15
   172c8:	18fc      	adds	r4, r7, r3
   172ca:	0039      	movs	r1, r7
   172cc:	4b19      	ldr	r3, [pc, #100]	; (17334 <HTTP_DownloadFileTransaction+0xd4>)
   172ce:	220a      	movs	r2, #10
   172d0:	0018      	movs	r0, r3
   172d2:	4b19      	ldr	r3, [pc, #100]	; (17338 <HTTP_DownloadFileTransaction+0xd8>)
   172d4:	4798      	blx	r3
   172d6:	0003      	movs	r3, r0
   172d8:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   172da:	230f      	movs	r3, #15
   172dc:	18fb      	adds	r3, r7, r3
   172de:	781b      	ldrb	r3, [r3, #0]
   172e0:	2b00      	cmp	r3, #0
   172e2:	d008      	beq.n	172f6 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   172e4:	230f      	movs	r3, #15
   172e6:	18fb      	adds	r3, r7, r3
   172e8:	781a      	ldrb	r2, [r3, #0]
   172ea:	4b14      	ldr	r3, [pc, #80]	; (1733c <HTTP_DownloadFileTransaction+0xdc>)
   172ec:	0019      	movs	r1, r3
   172ee:	2000      	movs	r0, #0
   172f0:	4b13      	ldr	r3, [pc, #76]	; (17340 <HTTP_DownloadFileTransaction+0xe0>)
   172f2:	4798      	blx	r3
   172f4:	e003      	b.n	172fe <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   172f6:	4b13      	ldr	r3, [pc, #76]	; (17344 <HTTP_DownloadFileTransaction+0xe4>)
   172f8:	0018      	movs	r0, r3
   172fa:	4b13      	ldr	r3, [pc, #76]	; (17348 <HTTP_DownloadFileTransaction+0xe8>)
   172fc:	4798      	blx	r3
    }
	
	f_close(&file_object);
   172fe:	4b0d      	ldr	r3, [pc, #52]	; (17334 <HTTP_DownloadFileTransaction+0xd4>)
   17300:	0018      	movs	r0, r3
   17302:	4b12      	ldr	r3, [pc, #72]	; (1734c <HTTP_DownloadFileTransaction+0xec>)
   17304:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17306:	4b12      	ldr	r3, [pc, #72]	; (17350 <HTTP_DownloadFileTransaction+0xf0>)
   17308:	2200      	movs	r2, #0
   1730a:	701a      	strb	r2, [r3, #0]
}
   1730c:	46c0      	nop			; (mov r8, r8)
   1730e:	46bd      	mov	sp, r7
   17310:	b005      	add	sp, #20
   17312:	bd90      	pop	{r4, r7, pc}
   17314:	00022359 	.word	0x00022359
   17318:	200048ec 	.word	0x200048ec
   1731c:	00032a4d 	.word	0x00032a4d
   17320:	0001c601 	.word	0x0001c601
   17324:	00016159 	.word	0x00016159
   17328:	00025915 	.word	0x00025915
   1732c:	20000634 	.word	0x20000634
   17330:	00037270 	.word	0x00037270
   17334:	20000868 	.word	0x20000868
   17338:	0002dd15 	.word	0x0002dd15
   1733c:	0003724c 	.word	0x0003724c
   17340:	0001e341 	.word	0x0001e341
   17344:	0003725c 	.word	0x0003725c
   17348:	0001e255 	.word	0x0001e255
   1734c:	0002e715 	.word	0x0002e715
   17350:	20000620 	.word	0x20000620

00017354 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17354:	b580      	push	{r7, lr}
   17356:	af00      	add	r7, sp, #0
    socketDeinit();
   17358:	4b18      	ldr	r3, [pc, #96]	; (173bc <MQTT_InitRoutine+0x68>)
   1735a:	4798      	blx	r3
    configure_mqtt();
   1735c:	4b18      	ldr	r3, [pc, #96]	; (173c0 <MQTT_InitRoutine+0x6c>)
   1735e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17360:	4a18      	ldr	r2, [pc, #96]	; (173c4 <MQTT_InitRoutine+0x70>)
   17362:	4b19      	ldr	r3, [pc, #100]	; (173c8 <MQTT_InitRoutine+0x74>)
   17364:	0011      	movs	r1, r2
   17366:	0018      	movs	r0, r3
   17368:	4b18      	ldr	r3, [pc, #96]	; (173cc <MQTT_InitRoutine+0x78>)
   1736a:	4798      	blx	r3
    socketInit();
   1736c:	4b18      	ldr	r3, [pc, #96]	; (173d0 <MQTT_InitRoutine+0x7c>)
   1736e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17370:	4b18      	ldr	r3, [pc, #96]	; (173d4 <MQTT_InitRoutine+0x80>)
   17372:	2234      	movs	r2, #52	; 0x34
   17374:	5c9b      	ldrb	r3, [r3, r2]
   17376:	2201      	movs	r2, #1
   17378:	4053      	eors	r3, r2
   1737a:	b2db      	uxtb	r3, r3
   1737c:	2b00      	cmp	r3, #0
   1737e:	d00c      	beq.n	1739a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17380:	4a15      	ldr	r2, [pc, #84]	; (173d8 <MQTT_InitRoutine+0x84>)
   17382:	4b14      	ldr	r3, [pc, #80]	; (173d4 <MQTT_InitRoutine+0x80>)
   17384:	0011      	movs	r1, r2
   17386:	0018      	movs	r0, r3
   17388:	4b14      	ldr	r3, [pc, #80]	; (173dc <MQTT_InitRoutine+0x88>)
   1738a:	4798      	blx	r3
   1738c:	1e03      	subs	r3, r0, #0
   1738e:	d004      	beq.n	1739a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17390:	4b13      	ldr	r3, [pc, #76]	; (173e0 <MQTT_InitRoutine+0x8c>)
   17392:	0019      	movs	r1, r3
   17394:	2001      	movs	r0, #1
   17396:	4b13      	ldr	r3, [pc, #76]	; (173e4 <MQTT_InitRoutine+0x90>)
   17398:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1739a:	4b0e      	ldr	r3, [pc, #56]	; (173d4 <MQTT_InitRoutine+0x80>)
   1739c:	2234      	movs	r2, #52	; 0x34
   1739e:	5c9b      	ldrb	r3, [r3, r2]
   173a0:	2b00      	cmp	r3, #0
   173a2:	d004      	beq.n	173ae <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n\r\n");
   173a4:	4b10      	ldr	r3, [pc, #64]	; (173e8 <MQTT_InitRoutine+0x94>)
   173a6:	0019      	movs	r1, r3
   173a8:	2001      	movs	r0, #1
   173aa:	4b0e      	ldr	r3, [pc, #56]	; (173e4 <MQTT_InitRoutine+0x90>)
   173ac:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   173ae:	4b0f      	ldr	r3, [pc, #60]	; (173ec <MQTT_InitRoutine+0x98>)
   173b0:	2201      	movs	r2, #1
   173b2:	701a      	strb	r2, [r3, #0]
}
   173b4:	46c0      	nop			; (mov r8, r8)
   173b6:	46bd      	mov	sp, r7
   173b8:	bd80      	pop	{r7, pc}
   173ba:	46c0      	nop			; (mov r8, r8)
   173bc:	00025915 	.word	0x00025915
   173c0:	0001705d 	.word	0x0001705d
   173c4:	00016c19 	.word	0x00016c19
   173c8:	00016be5 	.word	0x00016be5
   173cc:	0002595d 	.word	0x0002595d
   173d0:	000258c5 	.word	0x000258c5
   173d4:	20000894 	.word	0x20000894
   173d8:	000369b0 	.word	0x000369b0
   173dc:	0002fbf1 	.word	0x0002fbf1
   173e0:	00036dc0 	.word	0x00036dc0
   173e4:	0001e341 	.word	0x0001e341
   173e8:	0003727c 	.word	0x0003727c
   173ec:	20000620 	.word	0x20000620

000173f0 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   173f0:	b580      	push	{r7, lr}
   173f2:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   173f4:	2000      	movs	r0, #0
   173f6:	4b0c      	ldr	r3, [pc, #48]	; (17428 <MQTT_HandleTransactions+0x38>)
   173f8:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   173fa:	4b0c      	ldr	r3, [pc, #48]	; (1742c <MQTT_HandleTransactions+0x3c>)
   173fc:	0018      	movs	r0, r3
   173fe:	4b0c      	ldr	r3, [pc, #48]	; (17430 <MQTT_HandleTransactions+0x40>)
   17400:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17402:	4b0c      	ldr	r3, [pc, #48]	; (17434 <MQTT_HandleTransactions+0x44>)
   17404:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17406:	4b0c      	ldr	r3, [pc, #48]	; (17438 <MQTT_HandleTransactions+0x48>)
   17408:	4798      	blx	r3
	MQTT_HandleGpsMessages(); //Derek-GPS
   1740a:	4b0c      	ldr	r3, [pc, #48]	; (1743c <MQTT_HandleTransactions+0x4c>)
   1740c:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1740e:	4b0c      	ldr	r3, [pc, #48]	; (17440 <MQTT_HandleTransactions+0x50>)
   17410:	2234      	movs	r2, #52	; 0x34
   17412:	5c9b      	ldrb	r3, [r3, r2]
   17414:	2b00      	cmp	r3, #0
   17416:	d004      	beq.n	17422 <MQTT_HandleTransactions+0x32>
   17418:	4b09      	ldr	r3, [pc, #36]	; (17440 <MQTT_HandleTransactions+0x50>)
   1741a:	2164      	movs	r1, #100	; 0x64
   1741c:	0018      	movs	r0, r3
   1741e:	4b09      	ldr	r3, [pc, #36]	; (17444 <MQTT_HandleTransactions+0x54>)
   17420:	4798      	blx	r3
}
   17422:	46c0      	nop			; (mov r8, r8)
   17424:	46bd      	mov	sp, r7
   17426:	bd80      	pop	{r7, pc}
   17428:	00022359 	.word	0x00022359
   1742c:	200048ec 	.word	0x200048ec
   17430:	00032a4d 	.word	0x00032a4d
   17434:	0001756d 	.word	0x0001756d
   17438:	00017449 	.word	0x00017449
   1743c:	000174d5 	.word	0x000174d5
   17440:	20000894 	.word	0x20000894
   17444:	0002fe21 	.word	0x0002fe21

00017448 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17448:	b590      	push	{r4, r7, lr}
   1744a:	b085      	sub	sp, #20
   1744c:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   1744e:	4b18      	ldr	r3, [pc, #96]	; (174b0 <MQTT_HandleImuMessages+0x68>)
   17450:	681b      	ldr	r3, [r3, #0]
   17452:	0039      	movs	r1, r7
   17454:	2200      	movs	r2, #0
   17456:	0018      	movs	r0, r3
   17458:	4b16      	ldr	r3, [pc, #88]	; (174b4 <MQTT_HandleImuMessages+0x6c>)
   1745a:	4798      	blx	r3
   1745c:	0003      	movs	r3, r0
   1745e:	2b01      	cmp	r3, #1
   17460:	d121      	bne.n	174a6 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17462:	003b      	movs	r3, r7
   17464:	2200      	movs	r2, #0
   17466:	5e9b      	ldrsh	r3, [r3, r2]
   17468:	001c      	movs	r4, r3
   1746a:	003b      	movs	r3, r7
   1746c:	2202      	movs	r2, #2
   1746e:	5e9b      	ldrsh	r3, [r3, r2]
   17470:	0019      	movs	r1, r3
   17472:	003b      	movs	r3, r7
   17474:	2204      	movs	r2, #4
   17476:	5e9b      	ldrsh	r3, [r3, r2]
   17478:	4a0f      	ldr	r2, [pc, #60]	; (174b8 <MQTT_HandleImuMessages+0x70>)
   1747a:	4810      	ldr	r0, [pc, #64]	; (174bc <MQTT_HandleImuMessages+0x74>)
   1747c:	9301      	str	r3, [sp, #4]
   1747e:	9100      	str	r1, [sp, #0]
   17480:	0023      	movs	r3, r4
   17482:	213f      	movs	r1, #63	; 0x3f
   17484:	4c0e      	ldr	r4, [pc, #56]	; (174c0 <MQTT_HandleImuMessages+0x78>)
   17486:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17488:	4b0c      	ldr	r3, [pc, #48]	; (174bc <MQTT_HandleImuMessages+0x74>)
   1748a:	0018      	movs	r0, r3
   1748c:	4b0d      	ldr	r3, [pc, #52]	; (174c4 <MQTT_HandleImuMessages+0x7c>)
   1748e:	4798      	blx	r3
   17490:	0004      	movs	r4, r0
   17492:	4a0a      	ldr	r2, [pc, #40]	; (174bc <MQTT_HandleImuMessages+0x74>)
   17494:	490c      	ldr	r1, [pc, #48]	; (174c8 <MQTT_HandleImuMessages+0x80>)
   17496:	480d      	ldr	r0, [pc, #52]	; (174cc <MQTT_HandleImuMessages+0x84>)
   17498:	2300      	movs	r3, #0
   1749a:	9301      	str	r3, [sp, #4]
   1749c:	2301      	movs	r3, #1
   1749e:	9300      	str	r3, [sp, #0]
   174a0:	0023      	movs	r3, r4
   174a2:	4c0b      	ldr	r4, [pc, #44]	; (174d0 <MQTT_HandleImuMessages+0x88>)
   174a4:	47a0      	blx	r4
    }
}
   174a6:	46c0      	nop			; (mov r8, r8)
   174a8:	46bd      	mov	sp, r7
   174aa:	b003      	add	sp, #12
   174ac:	bd90      	pop	{r4, r7, pc}
   174ae:	46c0      	nop			; (mov r8, r8)
   174b0:	2000062c 	.word	0x2000062c
   174b4:	0001b455 	.word	0x0001b455
   174b8:	0003729c 	.word	0x0003729c
   174bc:	20000030 	.word	0x20000030
   174c0:	0003506d 	.word	0x0003506d
   174c4:	000351cb 	.word	0x000351cb
   174c8:	0003714c 	.word	0x0003714c
   174cc:	20000894 	.word	0x20000894
   174d0:	0002fd6d 	.word	0x0002fd6d

000174d4 <MQTT_HandleGpsMessages>:

static void MQTT_HandleGpsMessages(void) //Derek-GPS, used in MQTT_HandleTransactions()
{
   174d4:	b5b0      	push	{r4, r5, r7, lr}
   174d6:	b086      	sub	sp, #24
   174d8:	af04      	add	r7, sp, #16
	struct GpsDataPacket gpsDataVar;
	if (pdPASS == xQueueReceive(xQueueImuBuffer, &gpsDataVar, 0)) {
   174da:	4b1a      	ldr	r3, [pc, #104]	; (17544 <MQTT_HandleGpsMessages+0x70>)
   174dc:	681b      	ldr	r3, [r3, #0]
   174de:	0039      	movs	r1, r7
   174e0:	2200      	movs	r2, #0
   174e2:	0018      	movs	r0, r3
   174e4:	4b18      	ldr	r3, [pc, #96]	; (17548 <MQTT_HandleGpsMessages+0x74>)
   174e6:	4798      	blx	r3
   174e8:	0003      	movs	r3, r0
   174ea:	2b01      	cmp	r3, #1
   174ec:	d126      	bne.n	1753c <MQTT_HandleGpsMessages+0x68>
		snprintf(mqtt_msg, 63, "{\"name\":\"derek\", \"lat\": %f, \"lon\": %f}", gpsDataVar.lat, gpsDataVar.lon);
   174ee:	003b      	movs	r3, r7
   174f0:	681a      	ldr	r2, [r3, #0]
   174f2:	4b16      	ldr	r3, [pc, #88]	; (1754c <MQTT_HandleGpsMessages+0x78>)
   174f4:	1c10      	adds	r0, r2, #0
   174f6:	4798      	blx	r3
   174f8:	0004      	movs	r4, r0
   174fa:	000d      	movs	r5, r1
   174fc:	003b      	movs	r3, r7
   174fe:	685a      	ldr	r2, [r3, #4]
   17500:	4b12      	ldr	r3, [pc, #72]	; (1754c <MQTT_HandleGpsMessages+0x78>)
   17502:	1c10      	adds	r0, r2, #0
   17504:	4798      	blx	r3
   17506:	0002      	movs	r2, r0
   17508:	000b      	movs	r3, r1
   1750a:	4911      	ldr	r1, [pc, #68]	; (17550 <MQTT_HandleGpsMessages+0x7c>)
   1750c:	4811      	ldr	r0, [pc, #68]	; (17554 <MQTT_HandleGpsMessages+0x80>)
   1750e:	9202      	str	r2, [sp, #8]
   17510:	9303      	str	r3, [sp, #12]
   17512:	9400      	str	r4, [sp, #0]
   17514:	9501      	str	r5, [sp, #4]
   17516:	000a      	movs	r2, r1
   17518:	213f      	movs	r1, #63	; 0x3f
   1751a:	4b0f      	ldr	r3, [pc, #60]	; (17558 <MQTT_HandleGpsMessages+0x84>)
   1751c:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, GPS_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1751e:	4b0d      	ldr	r3, [pc, #52]	; (17554 <MQTT_HandleGpsMessages+0x80>)
   17520:	0018      	movs	r0, r3
   17522:	4b0e      	ldr	r3, [pc, #56]	; (1755c <MQTT_HandleGpsMessages+0x88>)
   17524:	4798      	blx	r3
   17526:	0004      	movs	r4, r0
   17528:	4a0a      	ldr	r2, [pc, #40]	; (17554 <MQTT_HandleGpsMessages+0x80>)
   1752a:	490d      	ldr	r1, [pc, #52]	; (17560 <MQTT_HandleGpsMessages+0x8c>)
   1752c:	480d      	ldr	r0, [pc, #52]	; (17564 <MQTT_HandleGpsMessages+0x90>)
   1752e:	2300      	movs	r3, #0
   17530:	9301      	str	r3, [sp, #4]
   17532:	2301      	movs	r3, #1
   17534:	9300      	str	r3, [sp, #0]
   17536:	0023      	movs	r3, r4
   17538:	4c0b      	ldr	r4, [pc, #44]	; (17568 <MQTT_HandleGpsMessages+0x94>)
   1753a:	47a0      	blx	r4
	}
}
   1753c:	46c0      	nop			; (mov r8, r8)
   1753e:	46bd      	mov	sp, r7
   17540:	b002      	add	sp, #8
   17542:	bdb0      	pop	{r4, r5, r7, pc}
   17544:	2000062c 	.word	0x2000062c
   17548:	0001b455 	.word	0x0001b455
   1754c:	00034c81 	.word	0x00034c81
   17550:	000372c0 	.word	0x000372c0
   17554:	20000030 	.word	0x20000030
   17558:	0003506d 	.word	0x0003506d
   1755c:	000351cb 	.word	0x000351cb
   17560:	00037160 	.word	0x00037160
   17564:	20000894 	.word	0x20000894
   17568:	0002fd6d 	.word	0x0002fd6d

0001756c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   1756c:	b590      	push	{r4, r7, lr}
   1756e:	b08b      	sub	sp, #44	; 0x2c
   17570:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17572:	4b39      	ldr	r3, [pc, #228]	; (17658 <MQTT_HandleGameMessages+0xec>)
   17574:	681b      	ldr	r3, [r3, #0]
   17576:	2208      	movs	r2, #8
   17578:	18b9      	adds	r1, r7, r2
   1757a:	2200      	movs	r2, #0
   1757c:	0018      	movs	r0, r3
   1757e:	4b37      	ldr	r3, [pc, #220]	; (1765c <MQTT_HandleGameMessages+0xf0>)
   17580:	4798      	blx	r3
   17582:	0003      	movs	r3, r0
   17584:	2b01      	cmp	r3, #1
   17586:	d163      	bne.n	17650 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17588:	4b35      	ldr	r3, [pc, #212]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   1758a:	4a36      	ldr	r2, [pc, #216]	; (17664 <MQTT_HandleGameMessages+0xf8>)
   1758c:	ca03      	ldmia	r2!, {r0, r1}
   1758e:	c303      	stmia	r3!, {r0, r1}
   17590:	8812      	ldrh	r2, [r2, #0]
   17592:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17594:	2300      	movs	r3, #0
   17596:	61fb      	str	r3, [r7, #28]
   17598:	e02d      	b.n	175f6 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   1759a:	2308      	movs	r3, #8
   1759c:	18fa      	adds	r2, r7, r3
   1759e:	69fb      	ldr	r3, [r7, #28]
   175a0:	18d3      	adds	r3, r2, r3
   175a2:	781b      	ldrb	r3, [r3, #0]
   175a4:	2bff      	cmp	r3, #255	; 0xff
   175a6:	d02a      	beq.n	175fe <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   175a8:	2308      	movs	r3, #8
   175aa:	18fa      	adds	r2, r7, r3
   175ac:	69fb      	ldr	r3, [r7, #28]
   175ae:	18d3      	adds	r3, r2, r3
   175b0:	781b      	ldrb	r3, [r3, #0]
   175b2:	4a2d      	ldr	r2, [pc, #180]	; (17668 <MQTT_HandleGameMessages+0xfc>)
   175b4:	0038      	movs	r0, r7
   175b6:	2103      	movs	r1, #3
   175b8:	4c2c      	ldr	r4, [pc, #176]	; (1766c <MQTT_HandleGameMessages+0x100>)
   175ba:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   175bc:	003a      	movs	r2, r7
   175be:	4b28      	ldr	r3, [pc, #160]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   175c0:	0011      	movs	r1, r2
   175c2:	0018      	movs	r0, r3
   175c4:	4b2a      	ldr	r3, [pc, #168]	; (17670 <MQTT_HandleGameMessages+0x104>)
   175c6:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   175c8:	69fb      	ldr	r3, [r7, #28]
   175ca:	3301      	adds	r3, #1
   175cc:	2208      	movs	r2, #8
   175ce:	18ba      	adds	r2, r7, r2
   175d0:	5cd3      	ldrb	r3, [r2, r3]
   175d2:	2bff      	cmp	r3, #255	; 0xff
   175d4:	d00c      	beq.n	175f0 <MQTT_HandleGameMessages+0x84>
   175d6:	69fb      	ldr	r3, [r7, #28]
   175d8:	3301      	adds	r3, #1
   175da:	2b13      	cmp	r3, #19
   175dc:	dc08      	bgt.n	175f0 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   175de:	003b      	movs	r3, r7
   175e0:	222c      	movs	r2, #44	; 0x2c
   175e2:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   175e4:	003a      	movs	r2, r7
   175e6:	4b1e      	ldr	r3, [pc, #120]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   175e8:	0011      	movs	r1, r2
   175ea:	0018      	movs	r0, r3
   175ec:	4b20      	ldr	r3, [pc, #128]	; (17670 <MQTT_HandleGameMessages+0x104>)
   175ee:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   175f0:	69fb      	ldr	r3, [r7, #28]
   175f2:	3301      	adds	r3, #1
   175f4:	61fb      	str	r3, [r7, #28]
   175f6:	69fb      	ldr	r3, [r7, #28]
   175f8:	2b13      	cmp	r3, #19
   175fa:	ddce      	ble.n	1759a <MQTT_HandleGameMessages+0x2e>
   175fc:	e000      	b.n	17600 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   175fe:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17600:	4b17      	ldr	r3, [pc, #92]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   17602:	0018      	movs	r0, r3
   17604:	4b1b      	ldr	r3, [pc, #108]	; (17674 <MQTT_HandleGameMessages+0x108>)
   17606:	4798      	blx	r3
   17608:	0003      	movs	r3, r0
   1760a:	001a      	movs	r2, r3
   1760c:	4b14      	ldr	r3, [pc, #80]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   1760e:	18d2      	adds	r2, r2, r3
   17610:	4b19      	ldr	r3, [pc, #100]	; (17678 <MQTT_HandleGameMessages+0x10c>)
   17612:	0010      	movs	r0, r2
   17614:	0019      	movs	r1, r3
   17616:	2303      	movs	r3, #3
   17618:	001a      	movs	r2, r3
   1761a:	4b18      	ldr	r3, [pc, #96]	; (1767c <MQTT_HandleGameMessages+0x110>)
   1761c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   1761e:	4b10      	ldr	r3, [pc, #64]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   17620:	0019      	movs	r1, r3
   17622:	2001      	movs	r0, #1
   17624:	4b16      	ldr	r3, [pc, #88]	; (17680 <MQTT_HandleGameMessages+0x114>)
   17626:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17628:	4b16      	ldr	r3, [pc, #88]	; (17684 <MQTT_HandleGameMessages+0x118>)
   1762a:	0019      	movs	r1, r3
   1762c:	2001      	movs	r0, #1
   1762e:	4b14      	ldr	r3, [pc, #80]	; (17680 <MQTT_HandleGameMessages+0x114>)
   17630:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17632:	4b0b      	ldr	r3, [pc, #44]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   17634:	0018      	movs	r0, r3
   17636:	4b0f      	ldr	r3, [pc, #60]	; (17674 <MQTT_HandleGameMessages+0x108>)
   17638:	4798      	blx	r3
   1763a:	0004      	movs	r4, r0
   1763c:	4a08      	ldr	r2, [pc, #32]	; (17660 <MQTT_HandleGameMessages+0xf4>)
   1763e:	4912      	ldr	r1, [pc, #72]	; (17688 <MQTT_HandleGameMessages+0x11c>)
   17640:	4812      	ldr	r0, [pc, #72]	; (1768c <MQTT_HandleGameMessages+0x120>)
   17642:	2300      	movs	r3, #0
   17644:	9301      	str	r3, [sp, #4]
   17646:	2301      	movs	r3, #1
   17648:	9300      	str	r3, [sp, #0]
   1764a:	0023      	movs	r3, r4
   1764c:	4c10      	ldr	r4, [pc, #64]	; (17690 <MQTT_HandleGameMessages+0x124>)
   1764e:	47a0      	blx	r4
    }
}
   17650:	46c0      	nop			; (mov r8, r8)
   17652:	46bd      	mov	sp, r7
   17654:	b009      	add	sp, #36	; 0x24
   17656:	bd90      	pop	{r4, r7, pc}
   17658:	20000628 	.word	0x20000628
   1765c:	0001b455 	.word	0x0001b455
   17660:	20000030 	.word	0x20000030
   17664:	00036f5c 	.word	0x00036f5c
   17668:	000372e8 	.word	0x000372e8
   1766c:	0003506d 	.word	0x0003506d
   17670:	00035151 	.word	0x00035151
   17674:	000351cb 	.word	0x000351cb
   17678:	000372ec 	.word	0x000372ec
   1767c:	00034ddd 	.word	0x00034ddd
   17680:	0001e341 	.word	0x0001e341
   17684:	000372f0 	.word	0x000372f0
   17688:	000372f4 	.word	0x000372f4
   1768c:	20000894 	.word	0x20000894
   17690:	0002fd6d 	.word	0x0002fd6d

00017694 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17694:	b590      	push	{r4, r7, lr}
   17696:	b08d      	sub	sp, #52	; 0x34
   17698:	af02      	add	r7, sp, #8
   1769a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1769c:	2064      	movs	r0, #100	; 0x64
   1769e:	4b79      	ldr	r3, [pc, #484]	; (17884 <vWifiTask+0x1f0>)
   176a0:	4798      	blx	r3
    init_state();
   176a2:	4b79      	ldr	r3, [pc, #484]	; (17888 <vWifiTask+0x1f4>)
   176a4:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   176a6:	2200      	movs	r2, #0
   176a8:	2104      	movs	r1, #4
   176aa:	2005      	movs	r0, #5
   176ac:	4b77      	ldr	r3, [pc, #476]	; (1788c <vWifiTask+0x1f8>)
   176ae:	4798      	blx	r3
   176b0:	0002      	movs	r2, r0
   176b2:	4b77      	ldr	r3, [pc, #476]	; (17890 <vWifiTask+0x1fc>)
   176b4:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   176b6:	2200      	movs	r2, #0
   176b8:	2106      	movs	r1, #6
   176ba:	2005      	movs	r0, #5
   176bc:	4b73      	ldr	r3, [pc, #460]	; (1788c <vWifiTask+0x1f8>)
   176be:	4798      	blx	r3
   176c0:	0002      	movs	r2, r0
   176c2:	4b74      	ldr	r3, [pc, #464]	; (17894 <vWifiTask+0x200>)
   176c4:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   176c6:	2200      	movs	r2, #0
   176c8:	2114      	movs	r1, #20
   176ca:	2002      	movs	r0, #2
   176cc:	4b6f      	ldr	r3, [pc, #444]	; (1788c <vWifiTask+0x1f8>)
   176ce:	4798      	blx	r3
   176d0:	0002      	movs	r2, r0
   176d2:	4b71      	ldr	r3, [pc, #452]	; (17898 <vWifiTask+0x204>)
   176d4:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   176d6:	2200      	movs	r2, #0
   176d8:	2102      	movs	r1, #2
   176da:	2005      	movs	r0, #5
   176dc:	4b6b      	ldr	r3, [pc, #428]	; (1788c <vWifiTask+0x1f8>)
   176de:	4798      	blx	r3
   176e0:	0002      	movs	r2, r0
   176e2:	4b6e      	ldr	r3, [pc, #440]	; (1789c <vWifiTask+0x208>)
   176e4:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   176e6:	4b6a      	ldr	r3, [pc, #424]	; (17890 <vWifiTask+0x1fc>)
   176e8:	681b      	ldr	r3, [r3, #0]
   176ea:	2b00      	cmp	r3, #0
   176ec:	d00b      	beq.n	17706 <vWifiTask+0x72>
   176ee:	4b69      	ldr	r3, [pc, #420]	; (17894 <vWifiTask+0x200>)
   176f0:	681b      	ldr	r3, [r3, #0]
   176f2:	2b00      	cmp	r3, #0
   176f4:	d007      	beq.n	17706 <vWifiTask+0x72>
   176f6:	4b68      	ldr	r3, [pc, #416]	; (17898 <vWifiTask+0x204>)
   176f8:	681b      	ldr	r3, [r3, #0]
   176fa:	2b00      	cmp	r3, #0
   176fc:	d003      	beq.n	17706 <vWifiTask+0x72>
   176fe:	4b67      	ldr	r3, [pc, #412]	; (1789c <vWifiTask+0x208>)
   17700:	681b      	ldr	r3, [r3, #0]
   17702:	2b00      	cmp	r3, #0
   17704:	d103      	bne.n	1770e <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17706:	4b66      	ldr	r3, [pc, #408]	; (178a0 <vWifiTask+0x20c>)
   17708:	0018      	movs	r0, r3
   1770a:	4b66      	ldr	r3, [pc, #408]	; (178a4 <vWifiTask+0x210>)
   1770c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1770e:	4b66      	ldr	r3, [pc, #408]	; (178a8 <vWifiTask+0x214>)
   17710:	0018      	movs	r0, r3
   17712:	4b64      	ldr	r3, [pc, #400]	; (178a4 <vWifiTask+0x210>)
   17714:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17716:	4b65      	ldr	r3, [pc, #404]	; (178ac <vWifiTask+0x218>)
   17718:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   1771a:	4b65      	ldr	r3, [pc, #404]	; (178b0 <vWifiTask+0x21c>)
   1771c:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1771e:	4b65      	ldr	r3, [pc, #404]	; (178b4 <vWifiTask+0x220>)
   17720:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17722:	4b65      	ldr	r3, [pc, #404]	; (178b8 <vWifiTask+0x224>)
   17724:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17726:	4b65      	ldr	r3, [pc, #404]	; (178bc <vWifiTask+0x228>)
   17728:	4798      	blx	r3
    configure_extint_callbacks();
   1772a:	4b65      	ldr	r3, [pc, #404]	; (178c0 <vWifiTask+0x22c>)
   1772c:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1772e:	230c      	movs	r3, #12
   17730:	18fb      	adds	r3, r7, r3
   17732:	2218      	movs	r2, #24
   17734:	2100      	movs	r1, #0
   17736:	0018      	movs	r0, r3
   17738:	4b62      	ldr	r3, [pc, #392]	; (178c4 <vWifiTask+0x230>)
   1773a:	4798      	blx	r3

    nm_bsp_init();
   1773c:	4b62      	ldr	r3, [pc, #392]	; (178c8 <vWifiTask+0x234>)
   1773e:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17740:	230c      	movs	r3, #12
   17742:	18fb      	adds	r3, r7, r3
   17744:	4a61      	ldr	r2, [pc, #388]	; (178cc <vWifiTask+0x238>)
   17746:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17748:	2327      	movs	r3, #39	; 0x27
   1774a:	18fc      	adds	r4, r7, r3
   1774c:	230c      	movs	r3, #12
   1774e:	18fb      	adds	r3, r7, r3
   17750:	0018      	movs	r0, r3
   17752:	4b5f      	ldr	r3, [pc, #380]	; (178d0 <vWifiTask+0x23c>)
   17754:	4798      	blx	r3
   17756:	0003      	movs	r3, r0
   17758:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1775a:	2327      	movs	r3, #39	; 0x27
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	781b      	ldrb	r3, [r3, #0]
   17760:	b25b      	sxtb	r3, r3
   17762:	2b00      	cmp	r3, #0
   17764:	d009      	beq.n	1777a <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17766:	2327      	movs	r3, #39	; 0x27
   17768:	18fb      	adds	r3, r7, r3
   1776a:	2200      	movs	r2, #0
   1776c:	569a      	ldrsb	r2, [r3, r2]
   1776e:	4b59      	ldr	r3, [pc, #356]	; (178d4 <vWifiTask+0x240>)
   17770:	0019      	movs	r1, r3
   17772:	2001      	movs	r0, #1
   17774:	4b58      	ldr	r3, [pc, #352]	; (178d8 <vWifiTask+0x244>)
   17776:	4798      	blx	r3
        while (1) {
   17778:	e7fe      	b.n	17778 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1777a:	4a58      	ldr	r2, [pc, #352]	; (178dc <vWifiTask+0x248>)
   1777c:	4b58      	ldr	r3, [pc, #352]	; (178e0 <vWifiTask+0x24c>)
   1777e:	0019      	movs	r1, r3
   17780:	2001      	movs	r0, #1
   17782:	4b55      	ldr	r3, [pc, #340]	; (178d8 <vWifiTask+0x244>)
   17784:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17786:	4b57      	ldr	r3, [pc, #348]	; (178e4 <vWifiTask+0x250>)
   17788:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1778a:	4a57      	ldr	r2, [pc, #348]	; (178e8 <vWifiTask+0x254>)
   1778c:	4b57      	ldr	r3, [pc, #348]	; (178ec <vWifiTask+0x258>)
   1778e:	0011      	movs	r1, r2
   17790:	0018      	movs	r0, r3
   17792:	4b57      	ldr	r3, [pc, #348]	; (178f0 <vWifiTask+0x25c>)
   17794:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17796:	4a57      	ldr	r2, [pc, #348]	; (178f4 <vWifiTask+0x260>)
   17798:	4850      	ldr	r0, [pc, #320]	; (178dc <vWifiTask+0x248>)
   1779a:	23ff      	movs	r3, #255	; 0xff
   1779c:	9300      	str	r3, [sp, #0]
   1779e:	0013      	movs	r3, r2
   177a0:	2202      	movs	r2, #2
   177a2:	2106      	movs	r1, #6
   177a4:	4c54      	ldr	r4, [pc, #336]	; (178f8 <vWifiTask+0x264>)
   177a6:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   177a8:	e006      	b.n	177b8 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   177aa:	2000      	movs	r0, #0
   177ac:	4b53      	ldr	r3, [pc, #332]	; (178fc <vWifiTask+0x268>)
   177ae:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   177b0:	4b53      	ldr	r3, [pc, #332]	; (17900 <vWifiTask+0x26c>)
   177b2:	0018      	movs	r0, r3
   177b4:	4b53      	ldr	r3, [pc, #332]	; (17904 <vWifiTask+0x270>)
   177b6:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   177b8:	2002      	movs	r0, #2
   177ba:	4b53      	ldr	r3, [pc, #332]	; (17908 <vWifiTask+0x274>)
   177bc:	4798      	blx	r3
   177be:	0003      	movs	r3, r0
   177c0:	001a      	movs	r2, r3
   177c2:	2301      	movs	r3, #1
   177c4:	4053      	eors	r3, r2
   177c6:	b2db      	uxtb	r3, r3
   177c8:	2b00      	cmp	r3, #0
   177ca:	d1ee      	bne.n	177aa <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   177cc:	23fa      	movs	r3, #250	; 0xfa
   177ce:	009b      	lsls	r3, r3, #2
   177d0:	0018      	movs	r0, r3
   177d2:	4b2c      	ldr	r3, [pc, #176]	; (17884 <vWifiTask+0x1f0>)
   177d4:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   177d6:	4b4d      	ldr	r3, [pc, #308]	; (1790c <vWifiTask+0x278>)
   177d8:	2201      	movs	r2, #1
   177da:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   177dc:	4b4b      	ldr	r3, [pc, #300]	; (1790c <vWifiTask+0x278>)
   177de:	781b      	ldrb	r3, [r3, #0]
   177e0:	b25b      	sxtb	r3, r3
   177e2:	2b01      	cmp	r3, #1
   177e4:	d00b      	beq.n	177fe <vWifiTask+0x16a>
   177e6:	dc02      	bgt.n	177ee <vWifiTask+0x15a>
   177e8:	2b00      	cmp	r3, #0
   177ea:	d005      	beq.n	177f8 <vWifiTask+0x164>
   177ec:	e010      	b.n	17810 <vWifiTask+0x17c>
   177ee:	2b02      	cmp	r3, #2
   177f0:	d008      	beq.n	17804 <vWifiTask+0x170>
   177f2:	2b03      	cmp	r3, #3
   177f4:	d009      	beq.n	1780a <vWifiTask+0x176>
   177f6:	e00b      	b.n	17810 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   177f8:	4b45      	ldr	r3, [pc, #276]	; (17910 <vWifiTask+0x27c>)
   177fa:	4798      	blx	r3

                break;
   177fc:	e00c      	b.n	17818 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   177fe:	4b45      	ldr	r3, [pc, #276]	; (17914 <vWifiTask+0x280>)
   17800:	4798      	blx	r3
                break;
   17802:	e009      	b.n	17818 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17804:	4b44      	ldr	r3, [pc, #272]	; (17918 <vWifiTask+0x284>)
   17806:	4798      	blx	r3
                break;
   17808:	e006      	b.n	17818 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1780a:	4b44      	ldr	r3, [pc, #272]	; (1791c <vWifiTask+0x288>)
   1780c:	4798      	blx	r3
                break;
   1780e:	e003      	b.n	17818 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   17810:	4b3e      	ldr	r3, [pc, #248]	; (1790c <vWifiTask+0x278>)
   17812:	2200      	movs	r2, #0
   17814:	701a      	strb	r2, [r3, #0]
                break;
   17816:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17818:	230b      	movs	r3, #11
   1781a:	18fb      	adds	r3, r7, r3
   1781c:	2200      	movs	r2, #0
   1781e:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17820:	4b1b      	ldr	r3, [pc, #108]	; (17890 <vWifiTask+0x1fc>)
   17822:	681b      	ldr	r3, [r3, #0]
   17824:	220b      	movs	r2, #11
   17826:	18b9      	adds	r1, r7, r2
   17828:	2200      	movs	r2, #0
   1782a:	0018      	movs	r0, r3
   1782c:	4b3c      	ldr	r3, [pc, #240]	; (17920 <vWifiTask+0x28c>)
   1782e:	4798      	blx	r3
   17830:	0003      	movs	r3, r0
   17832:	2b01      	cmp	r3, #1
   17834:	d105      	bne.n	17842 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   17836:	230b      	movs	r3, #11
   17838:	18fb      	adds	r3, r7, r3
   1783a:	781b      	ldrb	r3, [r3, #0]
   1783c:	b25a      	sxtb	r2, r3
   1783e:	4b33      	ldr	r3, [pc, #204]	; (1790c <vWifiTask+0x278>)
   17840:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17842:	4b38      	ldr	r3, [pc, #224]	; (17924 <vWifiTask+0x290>)
   17844:	781b      	ldrb	r3, [r3, #0]
   17846:	b2db      	uxtb	r3, r3
   17848:	2b00      	cmp	r3, #0
   1784a:	d017      	beq.n	1787c <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1784c:	4b36      	ldr	r3, [pc, #216]	; (17928 <vWifiTask+0x294>)
   1784e:	0018      	movs	r0, r3
   17850:	4b36      	ldr	r3, [pc, #216]	; (1792c <vWifiTask+0x298>)
   17852:	4798      	blx	r3
   17854:	0004      	movs	r4, r0
   17856:	4a34      	ldr	r2, [pc, #208]	; (17928 <vWifiTask+0x294>)
   17858:	4935      	ldr	r1, [pc, #212]	; (17930 <vWifiTask+0x29c>)
   1785a:	4836      	ldr	r0, [pc, #216]	; (17934 <vWifiTask+0x2a0>)
   1785c:	2300      	movs	r3, #0
   1785e:	9301      	str	r3, [sp, #4]
   17860:	2301      	movs	r3, #1
   17862:	9300      	str	r3, [sp, #0]
   17864:	0023      	movs	r3, r4
   17866:	4c34      	ldr	r4, [pc, #208]	; (17938 <vWifiTask+0x2a4>)
   17868:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1786a:	4a2f      	ldr	r2, [pc, #188]	; (17928 <vWifiTask+0x294>)
   1786c:	4b33      	ldr	r3, [pc, #204]	; (1793c <vWifiTask+0x2a8>)
   1786e:	0019      	movs	r1, r3
   17870:	2001      	movs	r0, #1
   17872:	4b19      	ldr	r3, [pc, #100]	; (178d8 <vWifiTask+0x244>)
   17874:	4798      	blx	r3
            isPressed = false;
   17876:	4b2b      	ldr	r3, [pc, #172]	; (17924 <vWifiTask+0x290>)
   17878:	2200      	movs	r2, #0
   1787a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1787c:	2064      	movs	r0, #100	; 0x64
   1787e:	4b01      	ldr	r3, [pc, #4]	; (17884 <vWifiTask+0x1f0>)
   17880:	4798      	blx	r3
    while (1) {
   17882:	e7ab      	b.n	177dc <vWifiTask+0x148>
   17884:	0001c601 	.word	0x0001c601
   17888:	000160e9 	.word	0x000160e9
   1788c:	0001a8f5 	.word	0x0001a8f5
   17890:	20000624 	.word	0x20000624
   17894:	2000062c 	.word	0x2000062c
   17898:	20000628 	.word	0x20000628
   1789c:	20000630 	.word	0x20000630
   178a0:	00037308 	.word	0x00037308
   178a4:	0001e255 	.word	0x0001e255
   178a8:	00037330 	.word	0x00037330
   178ac:	00016b25 	.word	0x00016b25
   178b0:	00016b61 	.word	0x00016b61
   178b4:	0001705d 	.word	0x0001705d
   178b8:	00016a41 	.word	0x00016a41
   178bc:	00017115 	.word	0x00017115
   178c0:	00017155 	.word	0x00017155
   178c4:	00034e13 	.word	0x00034e13
   178c8:	00020765 	.word	0x00020765
   178cc:	000168ed 	.word	0x000168ed
   178d0:	0002223d 	.word	0x0002223d
   178d4:	0003734c 	.word	0x0003734c
   178d8:	0001e341 	.word	0x0001e341
   178dc:	00036d90 	.word	0x00036d90
   178e0:	00037378 	.word	0x00037378
   178e4:	000258c5 	.word	0x000258c5
   178e8:	00016c19 	.word	0x00016c19
   178ec:	00016be5 	.word	0x00016be5
   178f0:	0002595d 	.word	0x0002595d
   178f4:	00036d84 	.word	0x00036d84
   178f8:	00022375 	.word	0x00022375
   178fc:	00022359 	.word	0x00022359
   17900:	200048ec 	.word	0x200048ec
   17904:	00032a4d 	.word	0x00032a4d
   17908:	00016159 	.word	0x00016159
   1790c:	20000620 	.word	0x20000620
   17910:	00017355 	.word	0x00017355
   17914:	000173f1 	.word	0x000173f1
   17918:	000171cd 	.word	0x000171cd
   1791c:	00017261 	.word	0x00017261
   17920:	0001b455 	.word	0x0001b455
   17924:	20000ccc 	.word	0x20000ccc
   17928:	20000070 	.word	0x20000070
   1792c:	000351cb 	.word	0x000351cb
   17930:	0003739c 	.word	0x0003739c
   17934:	20000894 	.word	0x20000894
   17938:	0002fd6d 	.word	0x0002fd6d
   1793c:	000373b8 	.word	0x000373b8

00017940 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17940:	b590      	push	{r4, r7, lr}
   17942:	b083      	sub	sp, #12
   17944:	af00      	add	r7, sp, #0
   17946:	0002      	movs	r2, r0
   17948:	1dfb      	adds	r3, r7, #7
   1794a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1794c:	1dfb      	adds	r3, r7, #7
   1794e:	781b      	ldrb	r3, [r3, #0]
   17950:	2b03      	cmp	r3, #3
   17952:	d806      	bhi.n	17962 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17954:	4b05      	ldr	r3, [pc, #20]	; (1796c <WifiHandlerSetState+0x2c>)
   17956:	6818      	ldr	r0, [r3, #0]
   17958:	1df9      	adds	r1, r7, #7
   1795a:	2300      	movs	r3, #0
   1795c:	220a      	movs	r2, #10
   1795e:	4c04      	ldr	r4, [pc, #16]	; (17970 <WifiHandlerSetState+0x30>)
   17960:	47a0      	blx	r4
    }
}
   17962:	46c0      	nop			; (mov r8, r8)
   17964:	46bd      	mov	sp, r7
   17966:	b003      	add	sp, #12
   17968:	bd90      	pop	{r4, r7, pc}
   1796a:	46c0      	nop			; (mov r8, r8)
   1796c:	20000624 	.word	0x20000624
   17970:	0001ab9d 	.word	0x0001ab9d

00017974 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   17974:	b590      	push	{r4, r7, lr}
   17976:	b085      	sub	sp, #20
   17978:	af00      	add	r7, sp, #0
   1797a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1797c:	4b06      	ldr	r3, [pc, #24]	; (17998 <WifiAddImuDataToQueue+0x24>)
   1797e:	6818      	ldr	r0, [r3, #0]
   17980:	6879      	ldr	r1, [r7, #4]
   17982:	2300      	movs	r3, #0
   17984:	220a      	movs	r2, #10
   17986:	4c05      	ldr	r4, [pc, #20]	; (1799c <WifiAddImuDataToQueue+0x28>)
   17988:	47a0      	blx	r4
   1798a:	0003      	movs	r3, r0
   1798c:	60fb      	str	r3, [r7, #12]
    return error;
   1798e:	68fb      	ldr	r3, [r7, #12]
}
   17990:	0018      	movs	r0, r3
   17992:	46bd      	mov	sp, r7
   17994:	b005      	add	sp, #20
   17996:	bd90      	pop	{r4, r7, pc}
   17998:	2000062c 	.word	0x2000062c
   1799c:	0001ab9d 	.word	0x0001ab9d

000179a0 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   179a0:	b590      	push	{r4, r7, lr}
   179a2:	b085      	sub	sp, #20
   179a4:	af00      	add	r7, sp, #0
   179a6:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   179a8:	4b06      	ldr	r3, [pc, #24]	; (179c4 <WifiAddDistanceDataToQueue+0x24>)
   179aa:	6818      	ldr	r0, [r3, #0]
   179ac:	6879      	ldr	r1, [r7, #4]
   179ae:	2300      	movs	r3, #0
   179b0:	220a      	movs	r2, #10
   179b2:	4c05      	ldr	r4, [pc, #20]	; (179c8 <WifiAddDistanceDataToQueue+0x28>)
   179b4:	47a0      	blx	r4
   179b6:	0003      	movs	r3, r0
   179b8:	60fb      	str	r3, [r7, #12]
	return error;
   179ba:	68fb      	ldr	r3, [r7, #12]
}
   179bc:	0018      	movs	r0, r3
   179be:	46bd      	mov	sp, r7
   179c0:	b005      	add	sp, #20
   179c2:	bd90      	pop	{r4, r7, pc}
   179c4:	20000630 	.word	0x20000630
   179c8:	0001ab9d 	.word	0x0001ab9d

000179cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   179cc:	b580      	push	{r7, lr}
   179ce:	b082      	sub	sp, #8
   179d0:	af00      	add	r7, sp, #0
   179d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   179d4:	687b      	ldr	r3, [r7, #4]
   179d6:	2200      	movs	r2, #0
   179d8:	701a      	strb	r2, [r3, #0]
}
   179da:	46c0      	nop			; (mov r8, r8)
   179dc:	46bd      	mov	sp, r7
   179de:	b002      	add	sp, #8
   179e0:	bd80      	pop	{r7, pc}
	...

000179e4 <system_apb_clock_set_mask>:
{
   179e4:	b580      	push	{r7, lr}
   179e6:	b082      	sub	sp, #8
   179e8:	af00      	add	r7, sp, #0
   179ea:	0002      	movs	r2, r0
   179ec:	6039      	str	r1, [r7, #0]
   179ee:	1dfb      	adds	r3, r7, #7
   179f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   179f2:	1dfb      	adds	r3, r7, #7
   179f4:	781b      	ldrb	r3, [r3, #0]
   179f6:	2b01      	cmp	r3, #1
   179f8:	d00a      	beq.n	17a10 <system_apb_clock_set_mask+0x2c>
   179fa:	2b02      	cmp	r3, #2
   179fc:	d00f      	beq.n	17a1e <system_apb_clock_set_mask+0x3a>
   179fe:	2b00      	cmp	r3, #0
   17a00:	d114      	bne.n	17a2c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17a02:	4b0e      	ldr	r3, [pc, #56]	; (17a3c <system_apb_clock_set_mask+0x58>)
   17a04:	4a0d      	ldr	r2, [pc, #52]	; (17a3c <system_apb_clock_set_mask+0x58>)
   17a06:	6991      	ldr	r1, [r2, #24]
   17a08:	683a      	ldr	r2, [r7, #0]
   17a0a:	430a      	orrs	r2, r1
   17a0c:	619a      	str	r2, [r3, #24]
			break;
   17a0e:	e00f      	b.n	17a30 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17a10:	4b0a      	ldr	r3, [pc, #40]	; (17a3c <system_apb_clock_set_mask+0x58>)
   17a12:	4a0a      	ldr	r2, [pc, #40]	; (17a3c <system_apb_clock_set_mask+0x58>)
   17a14:	69d1      	ldr	r1, [r2, #28]
   17a16:	683a      	ldr	r2, [r7, #0]
   17a18:	430a      	orrs	r2, r1
   17a1a:	61da      	str	r2, [r3, #28]
			break;
   17a1c:	e008      	b.n	17a30 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17a1e:	4b07      	ldr	r3, [pc, #28]	; (17a3c <system_apb_clock_set_mask+0x58>)
   17a20:	4a06      	ldr	r2, [pc, #24]	; (17a3c <system_apb_clock_set_mask+0x58>)
   17a22:	6a11      	ldr	r1, [r2, #32]
   17a24:	683a      	ldr	r2, [r7, #0]
   17a26:	430a      	orrs	r2, r1
   17a28:	621a      	str	r2, [r3, #32]
			break;
   17a2a:	e001      	b.n	17a30 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17a2c:	2317      	movs	r3, #23
   17a2e:	e000      	b.n	17a32 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17a30:	2300      	movs	r3, #0
}
   17a32:	0018      	movs	r0, r3
   17a34:	46bd      	mov	sp, r7
   17a36:	b002      	add	sp, #8
   17a38:	bd80      	pop	{r7, pc}
   17a3a:	46c0      	nop			; (mov r8, r8)
   17a3c:	40000400 	.word	0x40000400

00017a40 <system_pinmux_get_config_defaults>:
{
   17a40:	b580      	push	{r7, lr}
   17a42:	b082      	sub	sp, #8
   17a44:	af00      	add	r7, sp, #0
   17a46:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17a48:	687b      	ldr	r3, [r7, #4]
   17a4a:	2280      	movs	r2, #128	; 0x80
   17a4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17a4e:	687b      	ldr	r3, [r7, #4]
   17a50:	2200      	movs	r2, #0
   17a52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17a54:	687b      	ldr	r3, [r7, #4]
   17a56:	2201      	movs	r2, #1
   17a58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	2200      	movs	r2, #0
   17a5e:	70da      	strb	r2, [r3, #3]
}
   17a60:	46c0      	nop			; (mov r8, r8)
   17a62:	46bd      	mov	sp, r7
   17a64:	b002      	add	sp, #8
   17a66:	bd80      	pop	{r7, pc}

00017a68 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   17a68:	b580      	push	{r7, lr}
   17a6a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17a6c:	4b05      	ldr	r3, [pc, #20]	; (17a84 <system_is_debugger_present+0x1c>)
   17a6e:	789b      	ldrb	r3, [r3, #2]
   17a70:	b2db      	uxtb	r3, r3
   17a72:	001a      	movs	r2, r3
   17a74:	2302      	movs	r3, #2
   17a76:	4013      	ands	r3, r2
   17a78:	1e5a      	subs	r2, r3, #1
   17a7a:	4193      	sbcs	r3, r2
   17a7c:	b2db      	uxtb	r3, r3
}
   17a7e:	0018      	movs	r0, r3
   17a80:	46bd      	mov	sp, r7
   17a82:	bd80      	pop	{r7, pc}
   17a84:	41002000 	.word	0x41002000

00017a88 <system_interrupt_enter_critical_section>:
{
   17a88:	b580      	push	{r7, lr}
   17a8a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17a8c:	4b02      	ldr	r3, [pc, #8]	; (17a98 <system_interrupt_enter_critical_section+0x10>)
   17a8e:	4798      	blx	r3
}
   17a90:	46c0      	nop			; (mov r8, r8)
   17a92:	46bd      	mov	sp, r7
   17a94:	bd80      	pop	{r7, pc}
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	000265bd 	.word	0x000265bd

00017a9c <system_interrupt_leave_critical_section>:
{
   17a9c:	b580      	push	{r7, lr}
   17a9e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17aa0:	4b02      	ldr	r3, [pc, #8]	; (17aac <system_interrupt_leave_critical_section+0x10>)
   17aa2:	4798      	blx	r3
}
   17aa4:	46c0      	nop			; (mov r8, r8)
   17aa6:	46bd      	mov	sp, r7
   17aa8:	bd80      	pop	{r7, pc}
   17aaa:	46c0      	nop			; (mov r8, r8)
   17aac:	00026611 	.word	0x00026611

00017ab0 <system_interrupt_disable>:
{
   17ab0:	b580      	push	{r7, lr}
   17ab2:	b082      	sub	sp, #8
   17ab4:	af00      	add	r7, sp, #0
   17ab6:	0002      	movs	r2, r0
   17ab8:	1dfb      	adds	r3, r7, #7
   17aba:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17abc:	4a07      	ldr	r2, [pc, #28]	; (17adc <system_interrupt_disable+0x2c>)
   17abe:	1dfb      	adds	r3, r7, #7
   17ac0:	781b      	ldrb	r3, [r3, #0]
   17ac2:	0019      	movs	r1, r3
   17ac4:	231f      	movs	r3, #31
   17ac6:	400b      	ands	r3, r1
   17ac8:	2101      	movs	r1, #1
   17aca:	4099      	lsls	r1, r3
   17acc:	000b      	movs	r3, r1
   17ace:	0019      	movs	r1, r3
   17ad0:	2380      	movs	r3, #128	; 0x80
   17ad2:	50d1      	str	r1, [r2, r3]
}
   17ad4:	46c0      	nop			; (mov r8, r8)
   17ad6:	46bd      	mov	sp, r7
   17ad8:	b002      	add	sp, #8
   17ada:	bd80      	pop	{r7, pc}
   17adc:	e000e100 	.word	0xe000e100

00017ae0 <i2c_master_is_syncing>:
{
   17ae0:	b580      	push	{r7, lr}
   17ae2:	b084      	sub	sp, #16
   17ae4:	af00      	add	r7, sp, #0
   17ae6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17ae8:	687b      	ldr	r3, [r7, #4]
   17aea:	681b      	ldr	r3, [r3, #0]
   17aec:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17aee:	68fb      	ldr	r3, [r7, #12]
   17af0:	69db      	ldr	r3, [r3, #28]
   17af2:	2207      	movs	r2, #7
   17af4:	4013      	ands	r3, r2
   17af6:	1e5a      	subs	r2, r3, #1
   17af8:	4193      	sbcs	r3, r2
   17afa:	b2db      	uxtb	r3, r3
}
   17afc:	0018      	movs	r0, r3
   17afe:	46bd      	mov	sp, r7
   17b00:	b004      	add	sp, #16
   17b02:	bd80      	pop	{r7, pc}

00017b04 <_i2c_master_wait_for_sync>:
{
   17b04:	b580      	push	{r7, lr}
   17b06:	b082      	sub	sp, #8
   17b08:	af00      	add	r7, sp, #0
   17b0a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17b0c:	46c0      	nop			; (mov r8, r8)
   17b0e:	687b      	ldr	r3, [r7, #4]
   17b10:	0018      	movs	r0, r3
   17b12:	4b04      	ldr	r3, [pc, #16]	; (17b24 <_i2c_master_wait_for_sync+0x20>)
   17b14:	4798      	blx	r3
   17b16:	1e03      	subs	r3, r0, #0
   17b18:	d1f9      	bne.n	17b0e <_i2c_master_wait_for_sync+0xa>
}
   17b1a:	46c0      	nop			; (mov r8, r8)
   17b1c:	46bd      	mov	sp, r7
   17b1e:	b002      	add	sp, #8
   17b20:	bd80      	pop	{r7, pc}
   17b22:	46c0      	nop			; (mov r8, r8)
   17b24:	00017ae1 	.word	0x00017ae1

00017b28 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17b28:	b580      	push	{r7, lr}
   17b2a:	b084      	sub	sp, #16
   17b2c:	af00      	add	r7, sp, #0
   17b2e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17b30:	687b      	ldr	r3, [r7, #4]
   17b32:	681b      	ldr	r3, [r3, #0]
   17b34:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17b36:	687b      	ldr	r3, [r7, #4]
   17b38:	681b      	ldr	r3, [r3, #0]
   17b3a:	0018      	movs	r0, r3
   17b3c:	4b0d      	ldr	r3, [pc, #52]	; (17b74 <i2c_master_disable+0x4c>)
   17b3e:	4798      	blx	r3
   17b40:	0003      	movs	r3, r0
   17b42:	0018      	movs	r0, r3
   17b44:	4b0c      	ldr	r3, [pc, #48]	; (17b78 <i2c_master_disable+0x50>)
   17b46:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17b48:	687b      	ldr	r3, [r7, #4]
   17b4a:	0018      	movs	r0, r3
   17b4c:	4b0b      	ldr	r3, [pc, #44]	; (17b7c <i2c_master_disable+0x54>)
   17b4e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17b50:	68fb      	ldr	r3, [r7, #12]
   17b52:	2283      	movs	r2, #131	; 0x83
   17b54:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17b56:	68fb      	ldr	r3, [r7, #12]
   17b58:	2283      	movs	r2, #131	; 0x83
   17b5a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17b5c:	68fb      	ldr	r3, [r7, #12]
   17b5e:	681b      	ldr	r3, [r3, #0]
   17b60:	2202      	movs	r2, #2
   17b62:	4393      	bics	r3, r2
   17b64:	001a      	movs	r2, r3
   17b66:	68fb      	ldr	r3, [r7, #12]
   17b68:	601a      	str	r2, [r3, #0]

}
   17b6a:	46c0      	nop			; (mov r8, r8)
   17b6c:	46bd      	mov	sp, r7
   17b6e:	b004      	add	sp, #16
   17b70:	bd80      	pop	{r7, pc}
   17b72:	46c0      	nop			; (mov r8, r8)
   17b74:	00027a91 	.word	0x00027a91
   17b78:	00017ab1 	.word	0x00017ab1
   17b7c:	00017b05 	.word	0x00017b05

00017b80 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b82:	b097      	sub	sp, #92	; 0x5c
   17b84:	af00      	add	r7, sp, #0
   17b86:	6178      	str	r0, [r7, #20]
   17b88:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   17b8a:	2300      	movs	r3, #0
   17b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17b8e:	2300      	movs	r3, #0
   17b90:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   17b92:	2300      	movs	r3, #0
   17b94:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   17b96:	233b      	movs	r3, #59	; 0x3b
   17b98:	2210      	movs	r2, #16
   17b9a:	4694      	mov	ip, r2
   17b9c:	44bc      	add	ip, r7
   17b9e:	4463      	add	r3, ip
   17ba0:	2200      	movs	r2, #0
   17ba2:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17ba4:	697b      	ldr	r3, [r7, #20]
   17ba6:	681b      	ldr	r3, [r3, #0]
   17ba8:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   17baa:	697b      	ldr	r3, [r7, #20]
   17bac:	681b      	ldr	r3, [r3, #0]
   17bae:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17bb0:	2323      	movs	r3, #35	; 0x23
   17bb2:	2210      	movs	r2, #16
   17bb4:	18ba      	adds	r2, r7, r2
   17bb6:	18d4      	adds	r4, r2, r3
   17bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17bba:	0018      	movs	r0, r3
   17bbc:	4bc0      	ldr	r3, [pc, #768]	; (17ec0 <_i2c_master_set_config+0x340>)
   17bbe:	4798      	blx	r3
   17bc0:	0003      	movs	r3, r0
   17bc2:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17bc4:	230c      	movs	r3, #12
   17bc6:	2210      	movs	r2, #16
   17bc8:	4694      	mov	ip, r2
   17bca:	44bc      	add	ip, r7
   17bcc:	4463      	add	r3, ip
   17bce:	0018      	movs	r0, r3
   17bd0:	4bbc      	ldr	r3, [pc, #752]	; (17ec4 <_i2c_master_set_config+0x344>)
   17bd2:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17bd4:	693b      	ldr	r3, [r7, #16]
   17bd6:	69db      	ldr	r3, [r3, #28]
   17bd8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17bda:	693b      	ldr	r3, [r7, #16]
   17bdc:	6a1b      	ldr	r3, [r3, #32]
   17bde:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17be2:	2b00      	cmp	r3, #0
   17be4:	d106      	bne.n	17bf4 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   17be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17be8:	2100      	movs	r1, #0
   17bea:	0018      	movs	r0, r3
   17bec:	4bb6      	ldr	r3, [pc, #728]	; (17ec8 <_i2c_master_set_config+0x348>)
   17bee:	4798      	blx	r3
   17bf0:	0003      	movs	r3, r0
   17bf2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17bf6:	b2da      	uxtb	r2, r3
   17bf8:	230c      	movs	r3, #12
   17bfa:	2110      	movs	r1, #16
   17bfc:	468c      	mov	ip, r1
   17bfe:	44bc      	add	ip, r7
   17c00:	4463      	add	r3, ip
   17c02:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17c04:	230c      	movs	r3, #12
   17c06:	2210      	movs	r2, #16
   17c08:	4694      	mov	ip, r2
   17c0a:	44bc      	add	ip, r7
   17c0c:	4463      	add	r3, ip
   17c0e:	2202      	movs	r2, #2
   17c10:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   17c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c14:	0c1b      	lsrs	r3, r3, #16
   17c16:	b2db      	uxtb	r3, r3
   17c18:	220c      	movs	r2, #12
   17c1a:	2110      	movs	r1, #16
   17c1c:	468c      	mov	ip, r1
   17c1e:	44bc      	add	ip, r7
   17c20:	4462      	add	r2, ip
   17c22:	0011      	movs	r1, r2
   17c24:	0018      	movs	r0, r3
   17c26:	4ba9      	ldr	r3, [pc, #676]	; (17ecc <_i2c_master_set_config+0x34c>)
   17c28:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	d106      	bne.n	17c3e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17c32:	2101      	movs	r1, #1
   17c34:	0018      	movs	r0, r3
   17c36:	4ba4      	ldr	r3, [pc, #656]	; (17ec8 <_i2c_master_set_config+0x348>)
   17c38:	4798      	blx	r3
   17c3a:	0003      	movs	r3, r0
   17c3c:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   17c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17c40:	b2da      	uxtb	r2, r3
   17c42:	230c      	movs	r3, #12
   17c44:	2110      	movs	r1, #16
   17c46:	468c      	mov	ip, r1
   17c48:	44bc      	add	ip, r7
   17c4a:	4463      	add	r3, ip
   17c4c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17c4e:	230c      	movs	r3, #12
   17c50:	2210      	movs	r2, #16
   17c52:	4694      	mov	ip, r2
   17c54:	44bc      	add	ip, r7
   17c56:	4463      	add	r3, ip
   17c58:	2202      	movs	r2, #2
   17c5a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17c5e:	0c1b      	lsrs	r3, r3, #16
   17c60:	b2db      	uxtb	r3, r3
   17c62:	220c      	movs	r2, #12
   17c64:	2110      	movs	r1, #16
   17c66:	468c      	mov	ip, r1
   17c68:	44bc      	add	ip, r7
   17c6a:	4462      	add	r2, ip
   17c6c:	0011      	movs	r1, r2
   17c6e:	0018      	movs	r0, r3
   17c70:	4b96      	ldr	r3, [pc, #600]	; (17ecc <_i2c_master_set_config+0x34c>)
   17c72:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17c74:	693b      	ldr	r3, [r7, #16]
   17c76:	8a9a      	ldrh	r2, [r3, #20]
   17c78:	697b      	ldr	r3, [r7, #20]
   17c7a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17c7c:	693b      	ldr	r3, [r7, #16]
   17c7e:	8ada      	ldrh	r2, [r3, #22]
   17c80:	697b      	ldr	r3, [r7, #20]
   17c82:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17c84:	693b      	ldr	r3, [r7, #16]
   17c86:	7e1b      	ldrb	r3, [r3, #24]
   17c88:	2b00      	cmp	r3, #0
   17c8a:	d103      	bne.n	17c94 <_i2c_master_set_config+0x114>
   17c8c:	4b90      	ldr	r3, [pc, #576]	; (17ed0 <_i2c_master_set_config+0x350>)
   17c8e:	4798      	blx	r3
   17c90:	1e03      	subs	r3, r0, #0
   17c92:	d002      	beq.n	17c9a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   17c94:	2380      	movs	r3, #128	; 0x80
   17c96:	657b      	str	r3, [r7, #84]	; 0x54
   17c98:	e001      	b.n	17c9e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   17c9a:	2300      	movs	r3, #0
   17c9c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17c9e:	693b      	ldr	r3, [r7, #16]
   17ca0:	691b      	ldr	r3, [r3, #16]
   17ca2:	2b00      	cmp	r3, #0
   17ca4:	d004      	beq.n	17cb0 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   17ca6:	693b      	ldr	r3, [r7, #16]
   17ca8:	691b      	ldr	r3, [r3, #16]
   17caa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17cac:	4313      	orrs	r3, r2
   17cae:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17cb0:	693b      	ldr	r3, [r7, #16]
   17cb2:	689b      	ldr	r3, [r3, #8]
   17cb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17cb6:	4313      	orrs	r3, r2
   17cb8:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   17cba:	693b      	ldr	r3, [r7, #16]
   17cbc:	2224      	movs	r2, #36	; 0x24
   17cbe:	5c9b      	ldrb	r3, [r3, r2]
   17cc0:	2b00      	cmp	r3, #0
   17cc2:	d004      	beq.n	17cce <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17cc6:	2280      	movs	r2, #128	; 0x80
   17cc8:	05d2      	lsls	r2, r2, #23
   17cca:	4313      	orrs	r3, r2
   17ccc:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17cce:	693b      	ldr	r3, [r7, #16]
   17cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17cd2:	2b00      	cmp	r3, #0
   17cd4:	d004      	beq.n	17ce0 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17cd6:	693b      	ldr	r3, [r7, #16]
   17cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17cda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17cdc:	4313      	orrs	r3, r2
   17cde:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17ce0:	693b      	ldr	r3, [r7, #16]
   17ce2:	222c      	movs	r2, #44	; 0x2c
   17ce4:	5c9b      	ldrb	r3, [r3, r2]
   17ce6:	2b00      	cmp	r3, #0
   17ce8:	d105      	bne.n	17cf6 <_i2c_master_set_config+0x176>
   17cea:	693b      	ldr	r3, [r7, #16]
   17cec:	689a      	ldr	r2, [r3, #8]
   17cee:	2380      	movs	r3, #128	; 0x80
   17cf0:	049b      	lsls	r3, r3, #18
   17cf2:	429a      	cmp	r2, r3
   17cf4:	d104      	bne.n	17d00 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17cf8:	2280      	movs	r2, #128	; 0x80
   17cfa:	0512      	lsls	r2, r2, #20
   17cfc:	4313      	orrs	r3, r2
   17cfe:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17d00:	693b      	ldr	r3, [r7, #16]
   17d02:	222d      	movs	r2, #45	; 0x2d
   17d04:	5c9b      	ldrb	r3, [r3, r2]
   17d06:	2b00      	cmp	r3, #0
   17d08:	d004      	beq.n	17d14 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d0c:	2280      	movs	r2, #128	; 0x80
   17d0e:	0412      	lsls	r2, r2, #16
   17d10:	4313      	orrs	r3, r2
   17d12:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17d14:	693b      	ldr	r3, [r7, #16]
   17d16:	222e      	movs	r2, #46	; 0x2e
   17d18:	5c9b      	ldrb	r3, [r3, r2]
   17d1a:	2b00      	cmp	r3, #0
   17d1c:	d004      	beq.n	17d28 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   17d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d20:	2280      	movs	r2, #128	; 0x80
   17d22:	03d2      	lsls	r2, r2, #15
   17d24:	4313      	orrs	r3, r2
   17d26:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d2a:	681a      	ldr	r2, [r3, #0]
   17d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17d2e:	431a      	orrs	r2, r3
   17d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d32:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17d36:	2280      	movs	r2, #128	; 0x80
   17d38:	0052      	lsls	r2, r2, #1
   17d3a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17d3c:	2323      	movs	r3, #35	; 0x23
   17d3e:	2210      	movs	r2, #16
   17d40:	4694      	mov	ip, r2
   17d42:	44bc      	add	ip, r7
   17d44:	4463      	add	r3, ip
   17d46:	781b      	ldrb	r3, [r3, #0]
   17d48:	3314      	adds	r3, #20
   17d4a:	b2db      	uxtb	r3, r3
   17d4c:	0018      	movs	r0, r3
   17d4e:	4b61      	ldr	r3, [pc, #388]	; (17ed4 <_i2c_master_set_config+0x354>)
   17d50:	4798      	blx	r3
   17d52:	0003      	movs	r3, r0
   17d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17d56:	693b      	ldr	r3, [r7, #16]
   17d58:	681b      	ldr	r3, [r3, #0]
   17d5a:	22fa      	movs	r2, #250	; 0xfa
   17d5c:	0092      	lsls	r2, r2, #2
   17d5e:	4353      	muls	r3, r2
   17d60:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17d62:	693b      	ldr	r3, [r7, #16]
   17d64:	685b      	ldr	r3, [r3, #4]
   17d66:	22fa      	movs	r2, #250	; 0xfa
   17d68:	0092      	lsls	r2, r2, #2
   17d6a:	4353      	muls	r3, r2
   17d6c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   17d6e:	693b      	ldr	r3, [r7, #16]
   17d70:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17d72:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17d74:	4b58      	ldr	r3, [pc, #352]	; (17ed8 <_i2c_master_set_config+0x358>)
   17d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17d78:	4798      	blx	r3
   17d7a:	0005      	movs	r5, r0
   17d7c:	000e      	movs	r6, r1
   17d7e:	4b56      	ldr	r3, [pc, #344]	; (17ed8 <_i2c_master_set_config+0x358>)
   17d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17d82:	4798      	blx	r3
   17d84:	60b8      	str	r0, [r7, #8]
   17d86:	60f9      	str	r1, [r7, #12]
   17d88:	4b53      	ldr	r3, [pc, #332]	; (17ed8 <_i2c_master_set_config+0x358>)
   17d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17d8c:	4798      	blx	r3
   17d8e:	4c53      	ldr	r4, [pc, #332]	; (17edc <_i2c_master_set_config+0x35c>)
   17d90:	4a53      	ldr	r2, [pc, #332]	; (17ee0 <_i2c_master_set_config+0x360>)
   17d92:	4b54      	ldr	r3, [pc, #336]	; (17ee4 <_i2c_master_set_config+0x364>)
   17d94:	47a0      	blx	r4
   17d96:	0003      	movs	r3, r0
   17d98:	000c      	movs	r4, r1
   17d9a:	603b      	str	r3, [r7, #0]
   17d9c:	607c      	str	r4, [r7, #4]
   17d9e:	4b4e      	ldr	r3, [pc, #312]	; (17ed8 <_i2c_master_set_config+0x358>)
   17da0:	6a38      	ldr	r0, [r7, #32]
   17da2:	4798      	blx	r3
   17da4:	0002      	movs	r2, r0
   17da6:	000b      	movs	r3, r1
   17da8:	4c4c      	ldr	r4, [pc, #304]	; (17edc <_i2c_master_set_config+0x35c>)
   17daa:	6838      	ldr	r0, [r7, #0]
   17dac:	6879      	ldr	r1, [r7, #4]
   17dae:	47a0      	blx	r4
   17db0:	0003      	movs	r3, r0
   17db2:	000c      	movs	r4, r1
   17db4:	0018      	movs	r0, r3
   17db6:	0021      	movs	r1, r4
   17db8:	4c4b      	ldr	r4, [pc, #300]	; (17ee8 <_i2c_master_set_config+0x368>)
   17dba:	2200      	movs	r2, #0
   17dbc:	4b4b      	ldr	r3, [pc, #300]	; (17eec <_i2c_master_set_config+0x36c>)
   17dbe:	47a0      	blx	r4
   17dc0:	0003      	movs	r3, r0
   17dc2:	000c      	movs	r4, r1
   17dc4:	001a      	movs	r2, r3
   17dc6:	0023      	movs	r3, r4
   17dc8:	4c44      	ldr	r4, [pc, #272]	; (17edc <_i2c_master_set_config+0x35c>)
   17dca:	68b8      	ldr	r0, [r7, #8]
   17dcc:	68f9      	ldr	r1, [r7, #12]
   17dce:	47a0      	blx	r4
   17dd0:	0003      	movs	r3, r0
   17dd2:	000c      	movs	r4, r1
   17dd4:	001a      	movs	r2, r3
   17dd6:	0023      	movs	r3, r4
   17dd8:	4c45      	ldr	r4, [pc, #276]	; (17ef0 <_i2c_master_set_config+0x370>)
   17dda:	0028      	movs	r0, r5
   17ddc:	0031      	movs	r1, r6
   17dde:	47a0      	blx	r4
   17de0:	0003      	movs	r3, r0
   17de2:	000c      	movs	r4, r1
   17de4:	001d      	movs	r5, r3
   17de6:	0026      	movs	r6, r4
   17de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17dea:	005a      	lsls	r2, r3, #1
   17dec:	4b3a      	ldr	r3, [pc, #232]	; (17ed8 <_i2c_master_set_config+0x358>)
   17dee:	0010      	movs	r0, r2
   17df0:	4798      	blx	r3
   17df2:	0002      	movs	r2, r0
   17df4:	000b      	movs	r3, r1
   17df6:	4c3c      	ldr	r4, [pc, #240]	; (17ee8 <_i2c_master_set_config+0x368>)
   17df8:	0028      	movs	r0, r5
   17dfa:	0031      	movs	r1, r6
   17dfc:	47a0      	blx	r4
   17dfe:	0003      	movs	r3, r0
   17e00:	000c      	movs	r4, r1
   17e02:	0018      	movs	r0, r3
   17e04:	0021      	movs	r1, r4
   17e06:	4c3a      	ldr	r4, [pc, #232]	; (17ef0 <_i2c_master_set_config+0x370>)
   17e08:	2200      	movs	r2, #0
   17e0a:	4b3a      	ldr	r3, [pc, #232]	; (17ef4 <_i2c_master_set_config+0x374>)
   17e0c:	47a0      	blx	r4
   17e0e:	0003      	movs	r3, r0
   17e10:	000c      	movs	r4, r1
   17e12:	001d      	movs	r5, r3
   17e14:	0026      	movs	r6, r4
   17e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e18:	005a      	lsls	r2, r3, #1
   17e1a:	4b2f      	ldr	r3, [pc, #188]	; (17ed8 <_i2c_master_set_config+0x358>)
   17e1c:	0010      	movs	r0, r2
   17e1e:	4798      	blx	r3
   17e20:	0002      	movs	r2, r0
   17e22:	000b      	movs	r3, r1
   17e24:	4c34      	ldr	r4, [pc, #208]	; (17ef8 <_i2c_master_set_config+0x378>)
   17e26:	0028      	movs	r0, r5
   17e28:	0031      	movs	r1, r6
   17e2a:	47a0      	blx	r4
   17e2c:	0003      	movs	r3, r0
   17e2e:	000c      	movs	r4, r1
   17e30:	0019      	movs	r1, r3
   17e32:	0022      	movs	r2, r4
   17e34:	4b31      	ldr	r3, [pc, #196]	; (17efc <_i2c_master_set_config+0x37c>)
   17e36:	0008      	movs	r0, r1
   17e38:	0011      	movs	r1, r2
   17e3a:	4798      	blx	r3
   17e3c:	0003      	movs	r3, r0
   17e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   17e40:	693b      	ldr	r3, [r7, #16]
   17e42:	689a      	ldr	r2, [r3, #8]
   17e44:	2380      	movs	r3, #128	; 0x80
   17e46:	049b      	lsls	r3, r3, #18
   17e48:	429a      	cmp	r2, r3
   17e4a:	d16a      	bne.n	17f22 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17e4c:	4b22      	ldr	r3, [pc, #136]	; (17ed8 <_i2c_master_set_config+0x358>)
   17e4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17e50:	4798      	blx	r3
   17e52:	4c25      	ldr	r4, [pc, #148]	; (17ee8 <_i2c_master_set_config+0x368>)
   17e54:	0002      	movs	r2, r0
   17e56:	000b      	movs	r3, r1
   17e58:	47a0      	blx	r4
   17e5a:	0003      	movs	r3, r0
   17e5c:	000c      	movs	r4, r1
   17e5e:	001d      	movs	r5, r3
   17e60:	0026      	movs	r6, r4
   17e62:	4b1d      	ldr	r3, [pc, #116]	; (17ed8 <_i2c_master_set_config+0x358>)
   17e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17e66:	4798      	blx	r3
   17e68:	4c1c      	ldr	r4, [pc, #112]	; (17edc <_i2c_master_set_config+0x35c>)
   17e6a:	2200      	movs	r2, #0
   17e6c:	4b24      	ldr	r3, [pc, #144]	; (17f00 <_i2c_master_set_config+0x380>)
   17e6e:	47a0      	blx	r4
   17e70:	0003      	movs	r3, r0
   17e72:	000c      	movs	r4, r1
   17e74:	001a      	movs	r2, r3
   17e76:	0023      	movs	r3, r4
   17e78:	4c1f      	ldr	r4, [pc, #124]	; (17ef8 <_i2c_master_set_config+0x378>)
   17e7a:	0028      	movs	r0, r5
   17e7c:	0031      	movs	r1, r6
   17e7e:	47a0      	blx	r4
   17e80:	0003      	movs	r3, r0
   17e82:	000c      	movs	r4, r1
   17e84:	0018      	movs	r0, r3
   17e86:	0021      	movs	r1, r4
   17e88:	4c19      	ldr	r4, [pc, #100]	; (17ef0 <_i2c_master_set_config+0x370>)
   17e8a:	2200      	movs	r2, #0
   17e8c:	4b19      	ldr	r3, [pc, #100]	; (17ef4 <_i2c_master_set_config+0x374>)
   17e8e:	47a0      	blx	r4
   17e90:	0003      	movs	r3, r0
   17e92:	000c      	movs	r4, r1
   17e94:	0019      	movs	r1, r3
   17e96:	0022      	movs	r2, r4
   17e98:	4b18      	ldr	r3, [pc, #96]	; (17efc <_i2c_master_set_config+0x37c>)
   17e9a:	0008      	movs	r0, r1
   17e9c:	0011      	movs	r1, r2
   17e9e:	4798      	blx	r3
   17ea0:	0003      	movs	r3, r0
   17ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   17ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17ea6:	2b00      	cmp	r3, #0
   17ea8:	d02e      	beq.n	17f08 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   17eaa:	4b16      	ldr	r3, [pc, #88]	; (17f04 <_i2c_master_set_config+0x384>)
   17eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17eb0:	4798      	blx	r3
   17eb2:	0003      	movs	r3, r0
   17eb4:	1e9a      	subs	r2, r3, #2
   17eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17eb8:	1ad3      	subs	r3, r2, r3
   17eba:	653b      	str	r3, [r7, #80]	; 0x50
   17ebc:	e031      	b.n	17f22 <_i2c_master_set_config+0x3a2>
   17ebe:	46c0      	nop			; (mov r8, r8)
   17ec0:	000279c1 	.word	0x000279c1
   17ec4:	00017a41 	.word	0x00017a41
   17ec8:	00027805 	.word	0x00027805
   17ecc:	0002a5b1 	.word	0x0002a5b1
   17ed0:	00017a69 	.word	0x00017a69
   17ed4:	0002a375 	.word	0x0002a375
   17ed8:	00034c11 	.word	0x00034c11
   17edc:	0003407d 	.word	0x0003407d
   17ee0:	e826d695 	.word	0xe826d695
   17ee4:	3e112e0b 	.word	0x3e112e0b
   17ee8:	000333f5 	.word	0x000333f5
   17eec:	40240000 	.word	0x40240000
   17ef0:	0003457d 	.word	0x0003457d
   17ef4:	3ff00000 	.word	0x3ff00000
   17ef8:	00033a15 	.word	0x00033a15
   17efc:	00034ba9 	.word	0x00034ba9
   17f00:	40080000 	.word	0x40080000
   17f04:	00032d95 	.word	0x00032d95
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f0a:	005a      	lsls	r2, r3, #1
   17f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17f0e:	18d3      	adds	r3, r2, r3
   17f10:	1e5a      	subs	r2, r3, #1
   17f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f14:	0059      	lsls	r1, r3, #1
   17f16:	4b1d      	ldr	r3, [pc, #116]	; (17f8c <_i2c_master_set_config+0x40c>)
   17f18:	0010      	movs	r0, r2
   17f1a:	4798      	blx	r3
   17f1c:	0003      	movs	r3, r0
   17f1e:	3b01      	subs	r3, #1
   17f20:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   17f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17f24:	2bff      	cmp	r3, #255	; 0xff
   17f26:	dc08      	bgt.n	17f3a <_i2c_master_set_config+0x3ba>
   17f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17f2a:	2b00      	cmp	r3, #0
   17f2c:	db05      	blt.n	17f3a <_i2c_master_set_config+0x3ba>
   17f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17f30:	2bff      	cmp	r3, #255	; 0xff
   17f32:	dc02      	bgt.n	17f3a <_i2c_master_set_config+0x3ba>
   17f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17f36:	2b00      	cmp	r3, #0
   17f38:	da06      	bge.n	17f48 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17f3a:	233b      	movs	r3, #59	; 0x3b
   17f3c:	2210      	movs	r2, #16
   17f3e:	4694      	mov	ip, r2
   17f40:	44bc      	add	ip, r7
   17f42:	4463      	add	r3, ip
   17f44:	2240      	movs	r2, #64	; 0x40
   17f46:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17f48:	233b      	movs	r3, #59	; 0x3b
   17f4a:	2210      	movs	r2, #16
   17f4c:	4694      	mov	ip, r2
   17f4e:	44bc      	add	ip, r7
   17f50:	4463      	add	r3, ip
   17f52:	781b      	ldrb	r3, [r3, #0]
   17f54:	2b40      	cmp	r3, #64	; 0x40
   17f56:	d00e      	beq.n	17f76 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17f5a:	22ff      	movs	r2, #255	; 0xff
   17f5c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17f60:	041b      	lsls	r3, r3, #16
   17f62:	0019      	movs	r1, r3
   17f64:	23ff      	movs	r3, #255	; 0xff
   17f66:	041b      	lsls	r3, r3, #16
   17f68:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17f6a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   17f6e:	0612      	lsls	r2, r2, #24
   17f70:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17f74:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17f76:	233b      	movs	r3, #59	; 0x3b
   17f78:	2210      	movs	r2, #16
   17f7a:	4694      	mov	ip, r2
   17f7c:	44bc      	add	ip, r7
   17f7e:	4463      	add	r3, ip
   17f80:	781b      	ldrb	r3, [r3, #0]
}
   17f82:	0018      	movs	r0, r3
   17f84:	46bd      	mov	sp, r7
   17f86:	b017      	add	sp, #92	; 0x5c
   17f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f8a:	46c0      	nop			; (mov r8, r8)
   17f8c:	00032d95 	.word	0x00032d95

00017f90 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17f90:	b590      	push	{r4, r7, lr}
   17f92:	b08b      	sub	sp, #44	; 0x2c
   17f94:	af00      	add	r7, sp, #0
   17f96:	60f8      	str	r0, [r7, #12]
   17f98:	60b9      	str	r1, [r7, #8]
   17f9a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17f9c:	68fb      	ldr	r3, [r7, #12]
   17f9e:	68ba      	ldr	r2, [r7, #8]
   17fa0:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17fa2:	68fb      	ldr	r3, [r7, #12]
   17fa4:	681b      	ldr	r3, [r3, #0]
   17fa6:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17fa8:	68fb      	ldr	r3, [r7, #12]
   17faa:	681b      	ldr	r3, [r3, #0]
   17fac:	0018      	movs	r0, r3
   17fae:	4b3b      	ldr	r3, [pc, #236]	; (1809c <i2c_master_init+0x10c>)
   17fb0:	4798      	blx	r3
   17fb2:	0003      	movs	r3, r0
   17fb4:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17fb6:	6a3b      	ldr	r3, [r7, #32]
   17fb8:	3302      	adds	r3, #2
   17fba:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17fbc:	6a3b      	ldr	r3, [r7, #32]
   17fbe:	3314      	adds	r3, #20
   17fc0:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17fc2:	2201      	movs	r2, #1
   17fc4:	69fb      	ldr	r3, [r7, #28]
   17fc6:	409a      	lsls	r2, r3
   17fc8:	0013      	movs	r3, r2
   17fca:	0019      	movs	r1, r3
   17fcc:	2002      	movs	r0, #2
   17fce:	4b34      	ldr	r3, [pc, #208]	; (180a0 <i2c_master_init+0x110>)
   17fd0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17fd2:	2314      	movs	r3, #20
   17fd4:	18fb      	adds	r3, r7, r3
   17fd6:	0018      	movs	r0, r3
   17fd8:	4b32      	ldr	r3, [pc, #200]	; (180a4 <i2c_master_init+0x114>)
   17fda:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17fdc:	687b      	ldr	r3, [r7, #4]
   17fde:	7b1a      	ldrb	r2, [r3, #12]
   17fe0:	2314      	movs	r3, #20
   17fe2:	18fb      	adds	r3, r7, r3
   17fe4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17fe6:	69bb      	ldr	r3, [r7, #24]
   17fe8:	b2db      	uxtb	r3, r3
   17fea:	2214      	movs	r2, #20
   17fec:	18ba      	adds	r2, r7, r2
   17fee:	0011      	movs	r1, r2
   17ff0:	0018      	movs	r0, r3
   17ff2:	4b2d      	ldr	r3, [pc, #180]	; (180a8 <i2c_master_init+0x118>)
   17ff4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17ff6:	69bb      	ldr	r3, [r7, #24]
   17ff8:	b2db      	uxtb	r3, r3
   17ffa:	0018      	movs	r0, r3
   17ffc:	4b2b      	ldr	r3, [pc, #172]	; (180ac <i2c_master_init+0x11c>)
   17ffe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   18000:	687b      	ldr	r3, [r7, #4]
   18002:	7b1b      	ldrb	r3, [r3, #12]
   18004:	2100      	movs	r1, #0
   18006:	0018      	movs	r0, r3
   18008:	4b29      	ldr	r3, [pc, #164]	; (180b0 <i2c_master_init+0x120>)
   1800a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1800e:	681b      	ldr	r3, [r3, #0]
   18010:	2202      	movs	r2, #2
   18012:	4013      	ands	r3, r2
   18014:	d001      	beq.n	1801a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   18016:	231c      	movs	r3, #28
   18018:	e03b      	b.n	18092 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   1801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1801c:	681b      	ldr	r3, [r3, #0]
   1801e:	2201      	movs	r2, #1
   18020:	4013      	ands	r3, r2
   18022:	d001      	beq.n	18028 <i2c_master_init+0x98>
		return STATUS_BUSY;
   18024:	2305      	movs	r3, #5
   18026:	e034      	b.n	18092 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18028:	68fb      	ldr	r3, [r7, #12]
   1802a:	681b      	ldr	r3, [r3, #0]
   1802c:	2217      	movs	r2, #23
   1802e:	18bc      	adds	r4, r7, r2
   18030:	0018      	movs	r0, r3
   18032:	4b1a      	ldr	r3, [pc, #104]	; (1809c <i2c_master_init+0x10c>)
   18034:	4798      	blx	r3
   18036:	0003      	movs	r3, r0
   18038:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1803a:	4a1e      	ldr	r2, [pc, #120]	; (180b4 <i2c_master_init+0x124>)
   1803c:	2317      	movs	r3, #23
   1803e:	18fb      	adds	r3, r7, r3
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	0011      	movs	r1, r2
   18044:	0018      	movs	r0, r3
   18046:	4b1c      	ldr	r3, [pc, #112]	; (180b8 <i2c_master_init+0x128>)
   18048:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1804a:	2317      	movs	r3, #23
   1804c:	18fb      	adds	r3, r7, r3
   1804e:	781a      	ldrb	r2, [r3, #0]
   18050:	4b1a      	ldr	r3, [pc, #104]	; (180bc <i2c_master_init+0x12c>)
   18052:	0092      	lsls	r2, r2, #2
   18054:	68f9      	ldr	r1, [r7, #12]
   18056:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   18058:	68fb      	ldr	r3, [r7, #12]
   1805a:	2200      	movs	r2, #0
   1805c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1805e:	68fb      	ldr	r3, [r7, #12]
   18060:	2200      	movs	r2, #0
   18062:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18064:	68fb      	ldr	r3, [r7, #12]
   18066:	2200      	movs	r2, #0
   18068:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1806a:	68fb      	ldr	r3, [r7, #12]
   1806c:	2200      	movs	r2, #0
   1806e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18070:	68fb      	ldr	r3, [r7, #12]
   18072:	2225      	movs	r2, #37	; 0x25
   18074:	2100      	movs	r1, #0
   18076:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   18078:	68fb      	ldr	r3, [r7, #12]
   1807a:	2200      	movs	r2, #0
   1807c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18080:	2214      	movs	r2, #20
   18082:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18084:	687a      	ldr	r2, [r7, #4]
   18086:	68fb      	ldr	r3, [r7, #12]
   18088:	0011      	movs	r1, r2
   1808a:	0018      	movs	r0, r3
   1808c:	4b0c      	ldr	r3, [pc, #48]	; (180c0 <i2c_master_init+0x130>)
   1808e:	4798      	blx	r3
   18090:	0003      	movs	r3, r0
}
   18092:	0018      	movs	r0, r3
   18094:	46bd      	mov	sp, r7
   18096:	b00b      	add	sp, #44	; 0x2c
   18098:	bd90      	pop	{r4, r7, pc}
   1809a:	46c0      	nop			; (mov r8, r8)
   1809c:	000279c1 	.word	0x000279c1
   180a0:	000179e5 	.word	0x000179e5
   180a4:	000179cd 	.word	0x000179cd
   180a8:	0002a251 	.word	0x0002a251
   180ac:	0002a295 	.word	0x0002a295
   180b0:	00027779 	.word	0x00027779
   180b4:	00013575 	.word	0x00013575
   180b8:	00027a25 	.word	0x00027a25
   180bc:	20005c44 	.word	0x20005c44
   180c0:	00017b81 	.word	0x00017b81

000180c4 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   180c4:	b580      	push	{r7, lr}
   180c6:	b084      	sub	sp, #16
   180c8:	af00      	add	r7, sp, #0
   180ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   180cc:	687b      	ldr	r3, [r7, #4]
   180ce:	681b      	ldr	r3, [r3, #0]
   180d0:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   180d2:	687b      	ldr	r3, [r7, #4]
   180d4:	0018      	movs	r0, r3
   180d6:	4b0f      	ldr	r3, [pc, #60]	; (18114 <i2c_master_reset+0x50>)
   180d8:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   180da:	687b      	ldr	r3, [r7, #4]
   180dc:	0018      	movs	r0, r3
   180de:	4b0e      	ldr	r3, [pc, #56]	; (18118 <i2c_master_reset+0x54>)
   180e0:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   180e2:	4b0e      	ldr	r3, [pc, #56]	; (1811c <i2c_master_reset+0x58>)
   180e4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   180e6:	687b      	ldr	r3, [r7, #4]
   180e8:	681b      	ldr	r3, [r3, #0]
   180ea:	0018      	movs	r0, r3
   180ec:	4b0c      	ldr	r3, [pc, #48]	; (18120 <i2c_master_reset+0x5c>)
   180ee:	4798      	blx	r3
   180f0:	0003      	movs	r3, r0
   180f2:	0018      	movs	r0, r3
   180f4:	4b0b      	ldr	r3, [pc, #44]	; (18124 <i2c_master_reset+0x60>)
   180f6:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   180f8:	4b0b      	ldr	r3, [pc, #44]	; (18128 <i2c_master_reset+0x64>)
   180fa:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   180fc:	687b      	ldr	r3, [r7, #4]
   180fe:	0018      	movs	r0, r3
   18100:	4b04      	ldr	r3, [pc, #16]	; (18114 <i2c_master_reset+0x50>)
   18102:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18104:	68fb      	ldr	r3, [r7, #12]
   18106:	2201      	movs	r2, #1
   18108:	601a      	str	r2, [r3, #0]
}
   1810a:	46c0      	nop			; (mov r8, r8)
   1810c:	46bd      	mov	sp, r7
   1810e:	b004      	add	sp, #16
   18110:	bd80      	pop	{r7, pc}
   18112:	46c0      	nop			; (mov r8, r8)
   18114:	00017b05 	.word	0x00017b05
   18118:	00017b29 	.word	0x00017b29
   1811c:	00017a89 	.word	0x00017a89
   18120:	00027a91 	.word	0x00027a91
   18124:	0002a3cd 	.word	0x0002a3cd
   18128:	00017a9d 	.word	0x00017a9d

0001812c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1812c:	b580      	push	{r7, lr}
   1812e:	b084      	sub	sp, #16
   18130:	af00      	add	r7, sp, #0
   18132:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18134:	687b      	ldr	r3, [r7, #4]
   18136:	681b      	ldr	r3, [r3, #0]
   18138:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1813a:	68fb      	ldr	r3, [r7, #12]
   1813c:	7e1b      	ldrb	r3, [r3, #24]
   1813e:	b2db      	uxtb	r3, r3
   18140:	001a      	movs	r2, r3
   18142:	2302      	movs	r3, #2
   18144:	4013      	ands	r3, r2
   18146:	d00b      	beq.n	18160 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18148:	68fb      	ldr	r3, [r7, #12]
   1814a:	2202      	movs	r2, #2
   1814c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1814e:	68fb      	ldr	r3, [r7, #12]
   18150:	8b5b      	ldrh	r3, [r3, #26]
   18152:	b29b      	uxth	r3, r3
   18154:	001a      	movs	r2, r3
   18156:	2302      	movs	r3, #2
   18158:	4013      	ands	r3, r2
   1815a:	d011      	beq.n	18180 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1815c:	2341      	movs	r3, #65	; 0x41
   1815e:	e010      	b.n	18182 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18160:	68fb      	ldr	r3, [r7, #12]
   18162:	8b5b      	ldrh	r3, [r3, #26]
   18164:	b29b      	uxth	r3, r3
   18166:	001a      	movs	r2, r3
   18168:	2304      	movs	r3, #4
   1816a:	4013      	ands	r3, r2
   1816c:	d008      	beq.n	18180 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1816e:	68fb      	ldr	r3, [r7, #12]
   18170:	685b      	ldr	r3, [r3, #4]
   18172:	22c0      	movs	r2, #192	; 0xc0
   18174:	0292      	lsls	r2, r2, #10
   18176:	431a      	orrs	r2, r3
   18178:	68fb      	ldr	r3, [r7, #12]
   1817a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1817c:	2318      	movs	r3, #24
   1817e:	e000      	b.n	18182 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18180:	2300      	movs	r3, #0
}
   18182:	0018      	movs	r0, r3
   18184:	46bd      	mov	sp, r7
   18186:	b004      	add	sp, #16
   18188:	bd80      	pop	{r7, pc}

0001818a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1818a:	b580      	push	{r7, lr}
   1818c:	b084      	sub	sp, #16
   1818e:	af00      	add	r7, sp, #0
   18190:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18192:	687b      	ldr	r3, [r7, #4]
   18194:	681b      	ldr	r3, [r3, #0]
   18196:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18198:	230e      	movs	r3, #14
   1819a:	18fb      	adds	r3, r7, r3
   1819c:	2200      	movs	r2, #0
   1819e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   181a0:	e00f      	b.n	181c2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   181a2:	230e      	movs	r3, #14
   181a4:	18fb      	adds	r3, r7, r3
   181a6:	220e      	movs	r2, #14
   181a8:	18ba      	adds	r2, r7, r2
   181aa:	8812      	ldrh	r2, [r2, #0]
   181ac:	3201      	adds	r2, #1
   181ae:	801a      	strh	r2, [r3, #0]
   181b0:	687b      	ldr	r3, [r7, #4]
   181b2:	891b      	ldrh	r3, [r3, #8]
   181b4:	220e      	movs	r2, #14
   181b6:	18ba      	adds	r2, r7, r2
   181b8:	8812      	ldrh	r2, [r2, #0]
   181ba:	429a      	cmp	r2, r3
   181bc:	d301      	bcc.n	181c2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   181be:	2312      	movs	r3, #18
   181c0:	e00e      	b.n	181e0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   181c2:	68bb      	ldr	r3, [r7, #8]
   181c4:	7e1b      	ldrb	r3, [r3, #24]
   181c6:	b2db      	uxtb	r3, r3
   181c8:	001a      	movs	r2, r3
   181ca:	2301      	movs	r3, #1
   181cc:	4013      	ands	r3, r2
   181ce:	d106      	bne.n	181de <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   181d0:	68bb      	ldr	r3, [r7, #8]
   181d2:	7e1b      	ldrb	r3, [r3, #24]
   181d4:	b2db      	uxtb	r3, r3
   181d6:	001a      	movs	r2, r3
   181d8:	2302      	movs	r3, #2
   181da:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   181dc:	d0e1      	beq.n	181a2 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   181de:	2300      	movs	r3, #0
}
   181e0:	0018      	movs	r0, r3
   181e2:	46bd      	mov	sp, r7
   181e4:	b004      	add	sp, #16
   181e6:	bd80      	pop	{r7, pc}

000181e8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   181e8:	b590      	push	{r4, r7, lr}
   181ea:	b085      	sub	sp, #20
   181ec:	af00      	add	r7, sp, #0
   181ee:	6078      	str	r0, [r7, #4]
   181f0:	000a      	movs	r2, r1
   181f2:	1cfb      	adds	r3, r7, #3
   181f4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   181f6:	687b      	ldr	r3, [r7, #4]
   181f8:	681b      	ldr	r3, [r3, #0]
   181fa:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   181fc:	68fb      	ldr	r3, [r7, #12]
   181fe:	685b      	ldr	r3, [r3, #4]
   18200:	2280      	movs	r2, #128	; 0x80
   18202:	02d2      	lsls	r2, r2, #11
   18204:	431a      	orrs	r2, r3
   18206:	68fb      	ldr	r3, [r7, #12]
   18208:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1820a:	1cfb      	adds	r3, r7, #3
   1820c:	781a      	ldrb	r2, [r3, #0]
   1820e:	68fb      	ldr	r3, [r7, #12]
   18210:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   18212:	230b      	movs	r3, #11
   18214:	18fc      	adds	r4, r7, r3
   18216:	687b      	ldr	r3, [r7, #4]
   18218:	0018      	movs	r0, r3
   1821a:	4b07      	ldr	r3, [pc, #28]	; (18238 <_i2c_master_send_hs_master_code+0x50>)
   1821c:	4798      	blx	r3
   1821e:	0003      	movs	r3, r0
   18220:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18222:	68fb      	ldr	r3, [r7, #12]
   18224:	2201      	movs	r2, #1
   18226:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18228:	230b      	movs	r3, #11
   1822a:	18fb      	adds	r3, r7, r3
   1822c:	781b      	ldrb	r3, [r3, #0]
}
   1822e:	0018      	movs	r0, r3
   18230:	46bd      	mov	sp, r7
   18232:	b005      	add	sp, #20
   18234:	bd90      	pop	{r4, r7, pc}
   18236:	46c0      	nop			; (mov r8, r8)
   18238:	0001818b 	.word	0x0001818b

0001823c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1823c:	b580      	push	{r7, lr}
   1823e:	af00      	add	r7, sp, #0
   18240:	2000      	movs	r0, #0
   18242:	4b02      	ldr	r3, [pc, #8]	; (1824c <TC3_Handler+0x10>)
   18244:	4798      	blx	r3
   18246:	46c0      	nop			; (mov r8, r8)
   18248:	46bd      	mov	sp, r7
   1824a:	bd80      	pop	{r7, pc}
   1824c:	00018279 	.word	0x00018279

00018250 <TC4_Handler>:
   18250:	b580      	push	{r7, lr}
   18252:	af00      	add	r7, sp, #0
   18254:	2001      	movs	r0, #1
   18256:	4b02      	ldr	r3, [pc, #8]	; (18260 <TC4_Handler+0x10>)
   18258:	4798      	blx	r3
   1825a:	46c0      	nop			; (mov r8, r8)
   1825c:	46bd      	mov	sp, r7
   1825e:	bd80      	pop	{r7, pc}
   18260:	00018279 	.word	0x00018279

00018264 <TC5_Handler>:
   18264:	b580      	push	{r7, lr}
   18266:	af00      	add	r7, sp, #0
   18268:	2002      	movs	r0, #2
   1826a:	4b02      	ldr	r3, [pc, #8]	; (18274 <TC5_Handler+0x10>)
   1826c:	4798      	blx	r3
   1826e:	46c0      	nop			; (mov r8, r8)
   18270:	46bd      	mov	sp, r7
   18272:	bd80      	pop	{r7, pc}
   18274:	00018279 	.word	0x00018279

00018278 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18278:	b580      	push	{r7, lr}
   1827a:	b084      	sub	sp, #16
   1827c:	af00      	add	r7, sp, #0
   1827e:	0002      	movs	r2, r0
   18280:	1dfb      	adds	r3, r7, #7
   18282:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18284:	1dfb      	adds	r3, r7, #7
   18286:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18288:	4b28      	ldr	r3, [pc, #160]	; (1832c <_tc_interrupt_handler+0xb4>)
   1828a:	0092      	lsls	r2, r2, #2
   1828c:	58d3      	ldr	r3, [r2, r3]
   1828e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18290:	68fb      	ldr	r3, [r7, #12]
   18292:	681b      	ldr	r3, [r3, #0]
   18294:	7b9b      	ldrb	r3, [r3, #14]
   18296:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18298:	68fa      	ldr	r2, [r7, #12]
   1829a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1829c:	4013      	ands	r3, r2
   1829e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   182a0:	68fb      	ldr	r3, [r7, #12]
   182a2:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   182a4:	230b      	movs	r3, #11
   182a6:	18fb      	adds	r3, r7, r3
   182a8:	400a      	ands	r2, r1
   182aa:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   182ac:	230b      	movs	r3, #11
   182ae:	18fb      	adds	r3, r7, r3
   182b0:	781b      	ldrb	r3, [r3, #0]
   182b2:	2201      	movs	r2, #1
   182b4:	4013      	ands	r3, r2
   182b6:	d008      	beq.n	182ca <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   182b8:	68fb      	ldr	r3, [r7, #12]
   182ba:	689b      	ldr	r3, [r3, #8]
   182bc:	68fa      	ldr	r2, [r7, #12]
   182be:	0010      	movs	r0, r2
   182c0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   182c2:	68fb      	ldr	r3, [r7, #12]
   182c4:	681b      	ldr	r3, [r3, #0]
   182c6:	2201      	movs	r2, #1
   182c8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   182ca:	230b      	movs	r3, #11
   182cc:	18fb      	adds	r3, r7, r3
   182ce:	781b      	ldrb	r3, [r3, #0]
   182d0:	2202      	movs	r2, #2
   182d2:	4013      	ands	r3, r2
   182d4:	d008      	beq.n	182e8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   182d6:	68fb      	ldr	r3, [r7, #12]
   182d8:	68db      	ldr	r3, [r3, #12]
   182da:	68fa      	ldr	r2, [r7, #12]
   182dc:	0010      	movs	r0, r2
   182de:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   182e0:	68fb      	ldr	r3, [r7, #12]
   182e2:	681b      	ldr	r3, [r3, #0]
   182e4:	2202      	movs	r2, #2
   182e6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   182e8:	230b      	movs	r3, #11
   182ea:	18fb      	adds	r3, r7, r3
   182ec:	781b      	ldrb	r3, [r3, #0]
   182ee:	2210      	movs	r2, #16
   182f0:	4013      	ands	r3, r2
   182f2:	d008      	beq.n	18306 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   182f4:	68fb      	ldr	r3, [r7, #12]
   182f6:	691b      	ldr	r3, [r3, #16]
   182f8:	68fa      	ldr	r2, [r7, #12]
   182fa:	0010      	movs	r0, r2
   182fc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   182fe:	68fb      	ldr	r3, [r7, #12]
   18300:	681b      	ldr	r3, [r3, #0]
   18302:	2210      	movs	r2, #16
   18304:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18306:	230b      	movs	r3, #11
   18308:	18fb      	adds	r3, r7, r3
   1830a:	781b      	ldrb	r3, [r3, #0]
   1830c:	2220      	movs	r2, #32
   1830e:	4013      	ands	r3, r2
   18310:	d008      	beq.n	18324 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   18312:	68fb      	ldr	r3, [r7, #12]
   18314:	695b      	ldr	r3, [r3, #20]
   18316:	68fa      	ldr	r2, [r7, #12]
   18318:	0010      	movs	r0, r2
   1831a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1831c:	68fb      	ldr	r3, [r7, #12]
   1831e:	681b      	ldr	r3, [r3, #0]
   18320:	2220      	movs	r2, #32
   18322:	739a      	strb	r2, [r3, #14]
	}
}
   18324:	46c0      	nop			; (mov r8, r8)
   18326:	46bd      	mov	sp, r7
   18328:	b004      	add	sp, #16
   1832a:	bd80      	pop	{r7, pc}
   1832c:	20004a2c 	.word	0x20004a2c

00018330 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18330:	b580      	push	{r7, lr}
   18332:	b084      	sub	sp, #16
   18334:	af00      	add	r7, sp, #0
   18336:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18338:	2300      	movs	r3, #0
   1833a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1833c:	687b      	ldr	r3, [r7, #4]
   1833e:	2b00      	cmp	r3, #0
   18340:	d101      	bne.n	18346 <FreeRTOS_CLIRegisterCommand+0x16>
   18342:	b672      	cpsid	i
   18344:	e7fe      	b.n	18344 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18346:	2008      	movs	r0, #8
   18348:	4b11      	ldr	r3, [pc, #68]	; (18390 <FreeRTOS_CLIRegisterCommand+0x60>)
   1834a:	4798      	blx	r3
   1834c:	0003      	movs	r3, r0
   1834e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18350:	68bb      	ldr	r3, [r7, #8]
   18352:	2b00      	cmp	r3, #0
   18354:	d101      	bne.n	1835a <FreeRTOS_CLIRegisterCommand+0x2a>
   18356:	b672      	cpsid	i
   18358:	e7fe      	b.n	18358 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1835a:	68bb      	ldr	r3, [r7, #8]
   1835c:	2b00      	cmp	r3, #0
   1835e:	d012      	beq.n	18386 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18360:	4b0c      	ldr	r3, [pc, #48]	; (18394 <FreeRTOS_CLIRegisterCommand+0x64>)
   18362:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18364:	68bb      	ldr	r3, [r7, #8]
   18366:	687a      	ldr	r2, [r7, #4]
   18368:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1836a:	68bb      	ldr	r3, [r7, #8]
   1836c:	2200      	movs	r2, #0
   1836e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18370:	4b09      	ldr	r3, [pc, #36]	; (18398 <FreeRTOS_CLIRegisterCommand+0x68>)
   18372:	681b      	ldr	r3, [r3, #0]
   18374:	68ba      	ldr	r2, [r7, #8]
   18376:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18378:	4b07      	ldr	r3, [pc, #28]	; (18398 <FreeRTOS_CLIRegisterCommand+0x68>)
   1837a:	68ba      	ldr	r2, [r7, #8]
   1837c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1837e:	4b07      	ldr	r3, [pc, #28]	; (1839c <FreeRTOS_CLIRegisterCommand+0x6c>)
   18380:	4798      	blx	r3

		xReturn = pdPASS;
   18382:	2301      	movs	r3, #1
   18384:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18386:	68fb      	ldr	r3, [r7, #12]
}
   18388:	0018      	movs	r0, r3
   1838a:	46bd      	mov	sp, r7
   1838c:	b004      	add	sp, #16
   1838e:	bd80      	pop	{r7, pc}
   18390:	0001a741 	.word	0x0001a741
   18394:	0001a609 	.word	0x0001a609
   18398:	20000100 	.word	0x20000100
   1839c:	0001a62d 	.word	0x0001a62d

000183a0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   183a0:	b580      	push	{r7, lr}
   183a2:	b088      	sub	sp, #32
   183a4:	af00      	add	r7, sp, #0
   183a6:	60f8      	str	r0, [r7, #12]
   183a8:	60b9      	str	r1, [r7, #8]
   183aa:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   183ac:	2301      	movs	r3, #1
   183ae:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   183b0:	4b3d      	ldr	r3, [pc, #244]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   183b2:	681b      	ldr	r3, [r3, #0]
   183b4:	2b00      	cmp	r3, #0
   183b6:	d144      	bne.n	18442 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   183b8:	4b3b      	ldr	r3, [pc, #236]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   183ba:	4a3c      	ldr	r2, [pc, #240]	; (184ac <FreeRTOS_CLIProcessCommand+0x10c>)
   183bc:	601a      	str	r2, [r3, #0]
   183be:	e03a      	b.n	18436 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   183c0:	4b39      	ldr	r3, [pc, #228]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   183c2:	681b      	ldr	r3, [r3, #0]
   183c4:	681b      	ldr	r3, [r3, #0]
   183c6:	681b      	ldr	r3, [r3, #0]
   183c8:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   183ca:	69bb      	ldr	r3, [r7, #24]
   183cc:	0018      	movs	r0, r3
   183ce:	4b38      	ldr	r3, [pc, #224]	; (184b0 <FreeRTOS_CLIProcessCommand+0x110>)
   183d0:	4798      	blx	r3
   183d2:	0003      	movs	r3, r0
   183d4:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   183d6:	68fa      	ldr	r2, [r7, #12]
   183d8:	697b      	ldr	r3, [r7, #20]
   183da:	18d3      	adds	r3, r2, r3
   183dc:	781b      	ldrb	r3, [r3, #0]
   183de:	2b20      	cmp	r3, #32
   183e0:	d005      	beq.n	183ee <FreeRTOS_CLIProcessCommand+0x4e>
   183e2:	68fa      	ldr	r2, [r7, #12]
   183e4:	697b      	ldr	r3, [r7, #20]
   183e6:	18d3      	adds	r3, r2, r3
   183e8:	781b      	ldrb	r3, [r3, #0]
   183ea:	2b00      	cmp	r3, #0
   183ec:	d11e      	bne.n	1842c <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   183ee:	697a      	ldr	r2, [r7, #20]
   183f0:	69b9      	ldr	r1, [r7, #24]
   183f2:	68fb      	ldr	r3, [r7, #12]
   183f4:	0018      	movs	r0, r3
   183f6:	4b2f      	ldr	r3, [pc, #188]	; (184b4 <FreeRTOS_CLIProcessCommand+0x114>)
   183f8:	4798      	blx	r3
   183fa:	1e03      	subs	r3, r0, #0
   183fc:	d116      	bne.n	1842c <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   183fe:	4b2a      	ldr	r3, [pc, #168]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   18400:	681b      	ldr	r3, [r3, #0]
   18402:	681b      	ldr	r3, [r3, #0]
   18404:	7b1b      	ldrb	r3, [r3, #12]
   18406:	b25b      	sxtb	r3, r3
   18408:	2b00      	cmp	r3, #0
   1840a:	db19      	blt.n	18440 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1840c:	68fb      	ldr	r3, [r7, #12]
   1840e:	0018      	movs	r0, r3
   18410:	4b29      	ldr	r3, [pc, #164]	; (184b8 <FreeRTOS_CLIProcessCommand+0x118>)
   18412:	4798      	blx	r3
   18414:	0003      	movs	r3, r0
   18416:	001a      	movs	r2, r3
   18418:	4b23      	ldr	r3, [pc, #140]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   1841a:	681b      	ldr	r3, [r3, #0]
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	7b1b      	ldrb	r3, [r3, #12]
   18420:	b25b      	sxtb	r3, r3
   18422:	429a      	cmp	r2, r3
   18424:	d00c      	beq.n	18440 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18426:	2300      	movs	r3, #0
   18428:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1842a:	e009      	b.n	18440 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1842c:	4b1e      	ldr	r3, [pc, #120]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   1842e:	681b      	ldr	r3, [r3, #0]
   18430:	685a      	ldr	r2, [r3, #4]
   18432:	4b1d      	ldr	r3, [pc, #116]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   18434:	601a      	str	r2, [r3, #0]
   18436:	4b1c      	ldr	r3, [pc, #112]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   18438:	681b      	ldr	r3, [r3, #0]
   1843a:	2b00      	cmp	r3, #0
   1843c:	d1c0      	bne.n	183c0 <FreeRTOS_CLIProcessCommand+0x20>
   1843e:	e000      	b.n	18442 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18440:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18442:	4b19      	ldr	r3, [pc, #100]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   18444:	681b      	ldr	r3, [r3, #0]
   18446:	2b00      	cmp	r3, #0
   18448:	d00c      	beq.n	18464 <FreeRTOS_CLIProcessCommand+0xc4>
   1844a:	69fb      	ldr	r3, [r7, #28]
   1844c:	2b00      	cmp	r3, #0
   1844e:	d109      	bne.n	18464 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18450:	687a      	ldr	r2, [r7, #4]
   18452:	491a      	ldr	r1, [pc, #104]	; (184bc <FreeRTOS_CLIProcessCommand+0x11c>)
   18454:	68bb      	ldr	r3, [r7, #8]
   18456:	0018      	movs	r0, r3
   18458:	4b19      	ldr	r3, [pc, #100]	; (184c0 <FreeRTOS_CLIProcessCommand+0x120>)
   1845a:	4798      	blx	r3
		pxCommand = NULL;
   1845c:	4b12      	ldr	r3, [pc, #72]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   1845e:	2200      	movs	r2, #0
   18460:	601a      	str	r2, [r3, #0]
   18462:	e01c      	b.n	1849e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18464:	4b10      	ldr	r3, [pc, #64]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   18466:	681b      	ldr	r3, [r3, #0]
   18468:	2b00      	cmp	r3, #0
   1846a:	d010      	beq.n	1848e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1846c:	4b0e      	ldr	r3, [pc, #56]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   1846e:	681b      	ldr	r3, [r3, #0]
   18470:	681b      	ldr	r3, [r3, #0]
   18472:	689b      	ldr	r3, [r3, #8]
   18474:	68fa      	ldr	r2, [r7, #12]
   18476:	6879      	ldr	r1, [r7, #4]
   18478:	68b8      	ldr	r0, [r7, #8]
   1847a:	4798      	blx	r3
   1847c:	0003      	movs	r3, r0
   1847e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18480:	69fb      	ldr	r3, [r7, #28]
   18482:	2b00      	cmp	r3, #0
   18484:	d10b      	bne.n	1849e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18486:	4b08      	ldr	r3, [pc, #32]	; (184a8 <FreeRTOS_CLIProcessCommand+0x108>)
   18488:	2200      	movs	r2, #0
   1848a:	601a      	str	r2, [r3, #0]
   1848c:	e007      	b.n	1849e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1848e:	687a      	ldr	r2, [r7, #4]
   18490:	490c      	ldr	r1, [pc, #48]	; (184c4 <FreeRTOS_CLIProcessCommand+0x124>)
   18492:	68bb      	ldr	r3, [r7, #8]
   18494:	0018      	movs	r0, r3
   18496:	4b0a      	ldr	r3, [pc, #40]	; (184c0 <FreeRTOS_CLIProcessCommand+0x120>)
   18498:	4798      	blx	r3
		xReturn = pdFALSE;
   1849a:	2300      	movs	r3, #0
   1849c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1849e:	69fb      	ldr	r3, [r7, #28]
}
   184a0:	0018      	movs	r0, r3
   184a2:	46bd      	mov	sp, r7
   184a4:	b008      	add	sp, #32
   184a6:	bd80      	pop	{r7, pc}
   184a8:	20000cd0 	.word	0x20000cd0
   184ac:	200000f8 	.word	0x200000f8
   184b0:	000351cb 	.word	0x000351cb
   184b4:	000351d9 	.word	0x000351d9
   184b8:	00018529 	.word	0x00018529
   184bc:	00037410 	.word	0x00037410
   184c0:	000351fb 	.word	0x000351fb
   184c4:	00037468 	.word	0x00037468

000184c8 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   184c8:	b580      	push	{r7, lr}
   184ca:	b086      	sub	sp, #24
   184cc:	af00      	add	r7, sp, #0
   184ce:	60f8      	str	r0, [r7, #12]
   184d0:	60b9      	str	r1, [r7, #8]
   184d2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   184d4:	4b11      	ldr	r3, [pc, #68]	; (1851c <prvHelpCommand+0x54>)
   184d6:	681b      	ldr	r3, [r3, #0]
   184d8:	2b00      	cmp	r3, #0
   184da:	d102      	bne.n	184e2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   184dc:	4b0f      	ldr	r3, [pc, #60]	; (1851c <prvHelpCommand+0x54>)
   184de:	4a10      	ldr	r2, [pc, #64]	; (18520 <prvHelpCommand+0x58>)
   184e0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   184e2:	4b0e      	ldr	r3, [pc, #56]	; (1851c <prvHelpCommand+0x54>)
   184e4:	681b      	ldr	r3, [r3, #0]
   184e6:	681b      	ldr	r3, [r3, #0]
   184e8:	6859      	ldr	r1, [r3, #4]
   184ea:	68ba      	ldr	r2, [r7, #8]
   184ec:	68fb      	ldr	r3, [r7, #12]
   184ee:	0018      	movs	r0, r3
   184f0:	4b0c      	ldr	r3, [pc, #48]	; (18524 <prvHelpCommand+0x5c>)
   184f2:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   184f4:	4b09      	ldr	r3, [pc, #36]	; (1851c <prvHelpCommand+0x54>)
   184f6:	681b      	ldr	r3, [r3, #0]
   184f8:	685a      	ldr	r2, [r3, #4]
   184fa:	4b08      	ldr	r3, [pc, #32]	; (1851c <prvHelpCommand+0x54>)
   184fc:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   184fe:	4b07      	ldr	r3, [pc, #28]	; (1851c <prvHelpCommand+0x54>)
   18500:	681b      	ldr	r3, [r3, #0]
   18502:	2b00      	cmp	r3, #0
   18504:	d102      	bne.n	1850c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18506:	2300      	movs	r3, #0
   18508:	617b      	str	r3, [r7, #20]
   1850a:	e001      	b.n	18510 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1850c:	2301      	movs	r3, #1
   1850e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18510:	697b      	ldr	r3, [r7, #20]
}
   18512:	0018      	movs	r0, r3
   18514:	46bd      	mov	sp, r7
   18516:	b006      	add	sp, #24
   18518:	bd80      	pop	{r7, pc}
   1851a:	46c0      	nop			; (mov r8, r8)
   1851c:	20000cd4 	.word	0x20000cd4
   18520:	200000f8 	.word	0x200000f8
   18524:	000351fb 	.word	0x000351fb

00018528 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18528:	b580      	push	{r7, lr}
   1852a:	b084      	sub	sp, #16
   1852c:	af00      	add	r7, sp, #0
   1852e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18530:	230f      	movs	r3, #15
   18532:	18fb      	adds	r3, r7, r3
   18534:	2200      	movs	r2, #0
   18536:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18538:	2300      	movs	r3, #0
   1853a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1853c:	e018      	b.n	18570 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1853e:	687b      	ldr	r3, [r7, #4]
   18540:	781b      	ldrb	r3, [r3, #0]
   18542:	2b20      	cmp	r3, #32
   18544:	d10f      	bne.n	18566 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18546:	68bb      	ldr	r3, [r7, #8]
   18548:	2b01      	cmp	r3, #1
   1854a:	d00e      	beq.n	1856a <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1854c:	230f      	movs	r3, #15
   1854e:	18fb      	adds	r3, r7, r3
   18550:	781b      	ldrb	r3, [r3, #0]
   18552:	b25b      	sxtb	r3, r3
   18554:	b2db      	uxtb	r3, r3
   18556:	3301      	adds	r3, #1
   18558:	b2da      	uxtb	r2, r3
   1855a:	230f      	movs	r3, #15
   1855c:	18fb      	adds	r3, r7, r3
   1855e:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18560:	2301      	movs	r3, #1
   18562:	60bb      	str	r3, [r7, #8]
   18564:	e001      	b.n	1856a <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18566:	2300      	movs	r3, #0
   18568:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1856a:	687b      	ldr	r3, [r7, #4]
   1856c:	3301      	adds	r3, #1
   1856e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18570:	687b      	ldr	r3, [r7, #4]
   18572:	781b      	ldrb	r3, [r3, #0]
   18574:	2b00      	cmp	r3, #0
   18576:	d1e2      	bne.n	1853e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18578:	68bb      	ldr	r3, [r7, #8]
   1857a:	2b01      	cmp	r3, #1
   1857c:	d109      	bne.n	18592 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1857e:	230f      	movs	r3, #15
   18580:	18fb      	adds	r3, r7, r3
   18582:	781b      	ldrb	r3, [r3, #0]
   18584:	b25b      	sxtb	r3, r3
   18586:	b2db      	uxtb	r3, r3
   18588:	3b01      	subs	r3, #1
   1858a:	b2da      	uxtb	r2, r3
   1858c:	230f      	movs	r3, #15
   1858e:	18fb      	adds	r3, r7, r3
   18590:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18592:	230f      	movs	r3, #15
   18594:	18fb      	adds	r3, r7, r3
   18596:	781b      	ldrb	r3, [r3, #0]
   18598:	b25b      	sxtb	r3, r3
}
   1859a:	0018      	movs	r0, r3
   1859c:	46bd      	mov	sp, r7
   1859e:	b004      	add	sp, #16
   185a0:	bd80      	pop	{r7, pc}
	...

000185a4 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   185a4:	b580      	push	{r7, lr}
   185a6:	b082      	sub	sp, #8
   185a8:	af00      	add	r7, sp, #0
   185aa:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   185ac:	687b      	ldr	r3, [r7, #4]
   185ae:	0018      	movs	r0, r3
   185b0:	4b03      	ldr	r3, [pc, #12]	; (185c0 <prvTraceGetQueueNumber+0x1c>)
   185b2:	4798      	blx	r3
   185b4:	0003      	movs	r3, r0
}
   185b6:	0018      	movs	r0, r3
   185b8:	46bd      	mov	sp, r7
   185ba:	b002      	add	sp, #8
   185bc:	bd80      	pop	{r7, pc}
   185be:	46c0      	nop			; (mov r8, r8)
   185c0:	0001bd65 	.word	0x0001bd65

000185c4 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   185c4:	b580      	push	{r7, lr}
   185c6:	b082      	sub	sp, #8
   185c8:	af00      	add	r7, sp, #0
   185ca:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   185cc:	687b      	ldr	r3, [r7, #4]
   185ce:	0018      	movs	r0, r3
   185d0:	4b03      	ldr	r3, [pc, #12]	; (185e0 <prvTraceGetQueueType+0x1c>)
   185d2:	4798      	blx	r3
   185d4:	0003      	movs	r3, r0
}
   185d6:	0018      	movs	r0, r3
   185d8:	46bd      	mov	sp, r7
   185da:	b002      	add	sp, #8
   185dc:	bd80      	pop	{r7, pc}
   185de:	46c0      	nop			; (mov r8, r8)
   185e0:	0001bd91 	.word	0x0001bd91

000185e4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   185e4:	b580      	push	{r7, lr}
   185e6:	b082      	sub	sp, #8
   185e8:	af00      	add	r7, sp, #0
   185ea:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   185ec:	687b      	ldr	r3, [r7, #4]
   185ee:	0018      	movs	r0, r3
   185f0:	4b03      	ldr	r3, [pc, #12]	; (18600 <prvTraceGetTaskNumberLow16+0x1c>)
   185f2:	4798      	blx	r3
   185f4:	0003      	movs	r3, r0
   185f6:	b29b      	uxth	r3, r3
}
   185f8:	0018      	movs	r0, r3
   185fa:	46bd      	mov	sp, r7
   185fc:	b002      	add	sp, #8
   185fe:	bd80      	pop	{r7, pc}
   18600:	0001d0c1 	.word	0x0001d0c1

00018604 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18604:	b580      	push	{r7, lr}
   18606:	b082      	sub	sp, #8
   18608:	af00      	add	r7, sp, #0
   1860a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1860c:	687b      	ldr	r3, [r7, #4]
   1860e:	0018      	movs	r0, r3
   18610:	4b04      	ldr	r3, [pc, #16]	; (18624 <prvTraceGetTaskNumberHigh16+0x20>)
   18612:	4798      	blx	r3
   18614:	0003      	movs	r3, r0
   18616:	0c1b      	lsrs	r3, r3, #16
   18618:	b29b      	uxth	r3, r3
}
   1861a:	0018      	movs	r0, r3
   1861c:	46bd      	mov	sp, r7
   1861e:	b002      	add	sp, #8
   18620:	bd80      	pop	{r7, pc}
   18622:	46c0      	nop			; (mov r8, r8)
   18624:	0001d0c1 	.word	0x0001d0c1

00018628 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18628:	b580      	push	{r7, lr}
   1862a:	b082      	sub	sp, #8
   1862c:	af00      	add	r7, sp, #0
   1862e:	6078      	str	r0, [r7, #4]
   18630:	000a      	movs	r2, r1
   18632:	1cbb      	adds	r3, r7, #2
   18634:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18636:	687b      	ldr	r3, [r7, #4]
   18638:	0018      	movs	r0, r3
   1863a:	4b08      	ldr	r3, [pc, #32]	; (1865c <prvTraceSetTaskNumberLow16+0x34>)
   1863c:	4798      	blx	r3
   1863e:	0003      	movs	r3, r0
   18640:	0c1b      	lsrs	r3, r3, #16
   18642:	041a      	lsls	r2, r3, #16
   18644:	1cbb      	adds	r3, r7, #2
   18646:	881b      	ldrh	r3, [r3, #0]
   18648:	431a      	orrs	r2, r3
   1864a:	687b      	ldr	r3, [r7, #4]
   1864c:	0011      	movs	r1, r2
   1864e:	0018      	movs	r0, r3
   18650:	4b03      	ldr	r3, [pc, #12]	; (18660 <prvTraceSetTaskNumberLow16+0x38>)
   18652:	4798      	blx	r3
}
   18654:	46c0      	nop			; (mov r8, r8)
   18656:	46bd      	mov	sp, r7
   18658:	b002      	add	sp, #8
   1865a:	bd80      	pop	{r7, pc}
   1865c:	0001d0c1 	.word	0x0001d0c1
   18660:	0001d0e9 	.word	0x0001d0e9

00018664 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18664:	b580      	push	{r7, lr}
   18666:	b082      	sub	sp, #8
   18668:	af00      	add	r7, sp, #0
   1866a:	6078      	str	r0, [r7, #4]
   1866c:	000a      	movs	r2, r1
   1866e:	1cbb      	adds	r3, r7, #2
   18670:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18672:	687b      	ldr	r3, [r7, #4]
   18674:	0018      	movs	r0, r3
   18676:	4b09      	ldr	r3, [pc, #36]	; (1869c <prvTraceSetTaskNumberHigh16+0x38>)
   18678:	4798      	blx	r3
   1867a:	0003      	movs	r3, r0
   1867c:	041b      	lsls	r3, r3, #16
   1867e:	0c1a      	lsrs	r2, r3, #16
   18680:	1cbb      	adds	r3, r7, #2
   18682:	881b      	ldrh	r3, [r3, #0]
   18684:	041b      	lsls	r3, r3, #16
   18686:	431a      	orrs	r2, r3
   18688:	687b      	ldr	r3, [r7, #4]
   1868a:	0011      	movs	r1, r2
   1868c:	0018      	movs	r0, r3
   1868e:	4b04      	ldr	r3, [pc, #16]	; (186a0 <prvTraceSetTaskNumberHigh16+0x3c>)
   18690:	4798      	blx	r3
}
   18692:	46c0      	nop			; (mov r8, r8)
   18694:	46bd      	mov	sp, r7
   18696:	b002      	add	sp, #8
   18698:	bd80      	pop	{r7, pc}
   1869a:	46c0      	nop			; (mov r8, r8)
   1869c:	0001d0c1 	.word	0x0001d0c1
   186a0:	0001d0e9 	.word	0x0001d0e9

000186a4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   186a4:	b580      	push	{r7, lr}
   186a6:	b082      	sub	sp, #8
   186a8:	af00      	add	r7, sp, #0
   186aa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   186ac:	687b      	ldr	r3, [r7, #4]
   186ae:	0018      	movs	r0, r3
   186b0:	4b03      	ldr	r3, [pc, #12]	; (186c0 <prvTraceGetQueueNumberLow16+0x1c>)
   186b2:	4798      	blx	r3
   186b4:	0003      	movs	r3, r0
   186b6:	b29b      	uxth	r3, r3
}
   186b8:	0018      	movs	r0, r3
   186ba:	46bd      	mov	sp, r7
   186bc:	b002      	add	sp, #8
   186be:	bd80      	pop	{r7, pc}
   186c0:	000185a5 	.word	0x000185a5

000186c4 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   186c4:	b580      	push	{r7, lr}
   186c6:	b082      	sub	sp, #8
   186c8:	af00      	add	r7, sp, #0
   186ca:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   186cc:	687b      	ldr	r3, [r7, #4]
   186ce:	0018      	movs	r0, r3
   186d0:	4b04      	ldr	r3, [pc, #16]	; (186e4 <prvTraceGetQueueNumberHigh16+0x20>)
   186d2:	4798      	blx	r3
   186d4:	0003      	movs	r3, r0
   186d6:	0c1b      	lsrs	r3, r3, #16
   186d8:	b29b      	uxth	r3, r3
}
   186da:	0018      	movs	r0, r3
   186dc:	46bd      	mov	sp, r7
   186de:	b002      	add	sp, #8
   186e0:	bd80      	pop	{r7, pc}
   186e2:	46c0      	nop			; (mov r8, r8)
   186e4:	000185a5 	.word	0x000185a5

000186e8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   186e8:	b580      	push	{r7, lr}
   186ea:	b082      	sub	sp, #8
   186ec:	af00      	add	r7, sp, #0
   186ee:	6078      	str	r0, [r7, #4]
   186f0:	000a      	movs	r2, r1
   186f2:	1cbb      	adds	r3, r7, #2
   186f4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   186f6:	687b      	ldr	r3, [r7, #4]
   186f8:	0018      	movs	r0, r3
   186fa:	4b08      	ldr	r3, [pc, #32]	; (1871c <prvTraceSetQueueNumberLow16+0x34>)
   186fc:	4798      	blx	r3
   186fe:	0003      	movs	r3, r0
   18700:	0c1b      	lsrs	r3, r3, #16
   18702:	041a      	lsls	r2, r3, #16
   18704:	1cbb      	adds	r3, r7, #2
   18706:	881b      	ldrh	r3, [r3, #0]
   18708:	431a      	orrs	r2, r3
   1870a:	687b      	ldr	r3, [r7, #4]
   1870c:	0011      	movs	r1, r2
   1870e:	0018      	movs	r0, r3
   18710:	4b03      	ldr	r3, [pc, #12]	; (18720 <prvTraceSetQueueNumberLow16+0x38>)
   18712:	4798      	blx	r3
}
   18714:	46c0      	nop			; (mov r8, r8)
   18716:	46bd      	mov	sp, r7
   18718:	b002      	add	sp, #8
   1871a:	bd80      	pop	{r7, pc}
   1871c:	000185a5 	.word	0x000185a5
   18720:	0001bd79 	.word	0x0001bd79

00018724 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18724:	b580      	push	{r7, lr}
   18726:	b082      	sub	sp, #8
   18728:	af00      	add	r7, sp, #0
   1872a:	6078      	str	r0, [r7, #4]
   1872c:	000a      	movs	r2, r1
   1872e:	1cbb      	adds	r3, r7, #2
   18730:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   18732:	687b      	ldr	r3, [r7, #4]
   18734:	0018      	movs	r0, r3
   18736:	4b09      	ldr	r3, [pc, #36]	; (1875c <prvTraceSetQueueNumberHigh16+0x38>)
   18738:	4798      	blx	r3
   1873a:	0003      	movs	r3, r0
   1873c:	041b      	lsls	r3, r3, #16
   1873e:	0c1a      	lsrs	r2, r3, #16
   18740:	1cbb      	adds	r3, r7, #2
   18742:	881b      	ldrh	r3, [r3, #0]
   18744:	041b      	lsls	r3, r3, #16
   18746:	431a      	orrs	r2, r3
   18748:	687b      	ldr	r3, [r7, #4]
   1874a:	0011      	movs	r1, r2
   1874c:	0018      	movs	r0, r3
   1874e:	4b04      	ldr	r3, [pc, #16]	; (18760 <prvTraceSetQueueNumberHigh16+0x3c>)
   18750:	4798      	blx	r3
}
   18752:	46c0      	nop			; (mov r8, r8)
   18754:	46bd      	mov	sp, r7
   18756:	b002      	add	sp, #8
   18758:	bd80      	pop	{r7, pc}
   1875a:	46c0      	nop			; (mov r8, r8)
   1875c:	000185a5 	.word	0x000185a5
   18760:	0001bd79 	.word	0x0001bd79

00018764 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18764:	b580      	push	{r7, lr}
   18766:	b084      	sub	sp, #16
   18768:	af00      	add	r7, sp, #0
   1876a:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1876c:	2300      	movs	r3, #0
   1876e:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18770:	2300      	movs	r3, #0
   18772:	60bb      	str	r3, [r7, #8]
   18774:	e018      	b.n	187a8 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18776:	4b14      	ldr	r3, [pc, #80]	; (187c8 <prvAddTaskToStackMonitor+0x64>)
   18778:	68ba      	ldr	r2, [r7, #8]
   1877a:	00d2      	lsls	r2, r2, #3
   1877c:	58d3      	ldr	r3, [r2, r3]
   1877e:	2b00      	cmp	r3, #0
   18780:	d10f      	bne.n	187a2 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18782:	4b11      	ldr	r3, [pc, #68]	; (187c8 <prvAddTaskToStackMonitor+0x64>)
   18784:	68ba      	ldr	r2, [r7, #8]
   18786:	00d2      	lsls	r2, r2, #3
   18788:	6879      	ldr	r1, [r7, #4]
   1878a:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1878c:	4a0e      	ldr	r2, [pc, #56]	; (187c8 <prvAddTaskToStackMonitor+0x64>)
   1878e:	68bb      	ldr	r3, [r7, #8]
   18790:	00db      	lsls	r3, r3, #3
   18792:	18d3      	adds	r3, r2, r3
   18794:	3304      	adds	r3, #4
   18796:	2201      	movs	r2, #1
   18798:	4252      	negs	r2, r2
   1879a:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1879c:	2301      	movs	r3, #1
   1879e:	60fb      	str	r3, [r7, #12]
			break;
   187a0:	e005      	b.n	187ae <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   187a2:	68bb      	ldr	r3, [r7, #8]
   187a4:	3301      	adds	r3, #1
   187a6:	60bb      	str	r3, [r7, #8]
   187a8:	68bb      	ldr	r3, [r7, #8]
   187aa:	2b09      	cmp	r3, #9
   187ac:	dde3      	ble.n	18776 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   187ae:	68fb      	ldr	r3, [r7, #12]
   187b0:	2b00      	cmp	r3, #0
   187b2:	d104      	bne.n	187be <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   187b4:	4b05      	ldr	r3, [pc, #20]	; (187cc <prvAddTaskToStackMonitor+0x68>)
   187b6:	681b      	ldr	r3, [r3, #0]
   187b8:	1c5a      	adds	r2, r3, #1
   187ba:	4b04      	ldr	r3, [pc, #16]	; (187cc <prvAddTaskToStackMonitor+0x68>)
   187bc:	601a      	str	r2, [r3, #0]
	}
}
   187be:	46c0      	nop			; (mov r8, r8)
   187c0:	46bd      	mov	sp, r7
   187c2:	b004      	add	sp, #16
   187c4:	bd80      	pop	{r7, pc}
   187c6:	46c0      	nop			; (mov r8, r8)
   187c8:	20000cdc 	.word	0x20000cdc
   187cc:	20000d2c 	.word	0x20000d2c

000187d0 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   187d0:	b590      	push	{r4, r7, lr}
   187d2:	b085      	sub	sp, #20
   187d4:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   187d6:	2300      	movs	r3, #0
   187d8:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   187da:	4b2b      	ldr	r3, [pc, #172]	; (18888 <prvReportStackUsage+0xb8>)
   187dc:	681b      	ldr	r3, [r3, #0]
   187de:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   187e0:	4b29      	ldr	r3, [pc, #164]	; (18888 <prvReportStackUsage+0xb8>)
   187e2:	681a      	ldr	r2, [r3, #0]
   187e4:	4b29      	ldr	r3, [pc, #164]	; (1888c <prvReportStackUsage+0xbc>)
   187e6:	00d2      	lsls	r2, r2, #3
   187e8:	58d3      	ldr	r3, [r2, r3]
   187ea:	2b00      	cmp	r3, #0
   187ec:	d035      	beq.n	1885a <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   187ee:	4b26      	ldr	r3, [pc, #152]	; (18888 <prvReportStackUsage+0xb8>)
   187f0:	681a      	ldr	r2, [r3, #0]
   187f2:	4b26      	ldr	r3, [pc, #152]	; (1888c <prvReportStackUsage+0xbc>)
   187f4:	00d2      	lsls	r2, r2, #3
   187f6:	58d3      	ldr	r3, [r2, r3]
   187f8:	0018      	movs	r0, r3
   187fa:	4b25      	ldr	r3, [pc, #148]	; (18890 <prvReportStackUsage+0xc0>)
   187fc:	4798      	blx	r3
   187fe:	0003      	movs	r3, r0
   18800:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18802:	4b21      	ldr	r3, [pc, #132]	; (18888 <prvReportStackUsage+0xb8>)
   18804:	681b      	ldr	r3, [r3, #0]
   18806:	4a21      	ldr	r2, [pc, #132]	; (1888c <prvReportStackUsage+0xbc>)
   18808:	00db      	lsls	r3, r3, #3
   1880a:	18d3      	adds	r3, r2, r3
   1880c:	3304      	adds	r3, #4
   1880e:	681a      	ldr	r2, [r3, #0]
   18810:	687b      	ldr	r3, [r7, #4]
   18812:	429a      	cmp	r2, r3
   18814:	d907      	bls.n	18826 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18816:	4b1c      	ldr	r3, [pc, #112]	; (18888 <prvReportStackUsage+0xb8>)
   18818:	681b      	ldr	r3, [r3, #0]
   1881a:	4a1c      	ldr	r2, [pc, #112]	; (1888c <prvReportStackUsage+0xbc>)
   1881c:	00db      	lsls	r3, r3, #3
   1881e:	18d3      	adds	r3, r2, r3
   18820:	3304      	adds	r3, #4
   18822:	687a      	ldr	r2, [r7, #4]
   18824:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18826:	4b18      	ldr	r3, [pc, #96]	; (18888 <prvReportStackUsage+0xb8>)
   18828:	681a      	ldr	r2, [r3, #0]
   1882a:	4b18      	ldr	r3, [pc, #96]	; (1888c <prvReportStackUsage+0xbc>)
   1882c:	00d2      	lsls	r2, r2, #3
   1882e:	58d3      	ldr	r3, [r2, r3]
   18830:	0018      	movs	r0, r3
   18832:	4b18      	ldr	r3, [pc, #96]	; (18894 <prvReportStackUsage+0xc4>)
   18834:	4798      	blx	r3
   18836:	0003      	movs	r3, r0
   18838:	b2db      	uxtb	r3, r3
   1883a:	0019      	movs	r1, r3
   1883c:	4b12      	ldr	r3, [pc, #72]	; (18888 <prvReportStackUsage+0xb8>)
   1883e:	681b      	ldr	r3, [r3, #0]
   18840:	4a12      	ldr	r2, [pc, #72]	; (1888c <prvReportStackUsage+0xbc>)
   18842:	00db      	lsls	r3, r3, #3
   18844:	18d3      	adds	r3, r2, r3
   18846:	3304      	adds	r3, #4
   18848:	681b      	ldr	r3, [r3, #0]
   1884a:	000a      	movs	r2, r1
   1884c:	2103      	movs	r1, #3
   1884e:	20ea      	movs	r0, #234	; 0xea
   18850:	4c11      	ldr	r4, [pc, #68]	; (18898 <prvReportStackUsage+0xc8>)
   18852:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18854:	68fb      	ldr	r3, [r7, #12]
   18856:	3301      	adds	r3, #1
   18858:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1885a:	4b0b      	ldr	r3, [pc, #44]	; (18888 <prvReportStackUsage+0xb8>)
   1885c:	681b      	ldr	r3, [r3, #0]
   1885e:	1c5a      	adds	r2, r3, #1
   18860:	4b0e      	ldr	r3, [pc, #56]	; (1889c <prvReportStackUsage+0xcc>)
   18862:	210a      	movs	r1, #10
   18864:	0010      	movs	r0, r2
   18866:	4798      	blx	r3
   18868:	000b      	movs	r3, r1
   1886a:	001a      	movs	r2, r3
   1886c:	4b06      	ldr	r3, [pc, #24]	; (18888 <prvReportStackUsage+0xb8>)
   1886e:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18870:	68fb      	ldr	r3, [r7, #12]
   18872:	2b00      	cmp	r3, #0
   18874:	dc04      	bgt.n	18880 <prvReportStackUsage+0xb0>
   18876:	4b04      	ldr	r3, [pc, #16]	; (18888 <prvReportStackUsage+0xb8>)
   18878:	681a      	ldr	r2, [r3, #0]
   1887a:	68bb      	ldr	r3, [r7, #8]
   1887c:	429a      	cmp	r2, r3
   1887e:	d1af      	bne.n	187e0 <prvReportStackUsage+0x10>
}
   18880:	46c0      	nop			; (mov r8, r8)
   18882:	46bd      	mov	sp, r7
   18884:	b005      	add	sp, #20
   18886:	bd90      	pop	{r4, r7, pc}
   18888:	20000d30 	.word	0x20000d30
   1888c:	20000cdc 	.word	0x20000cdc
   18890:	0001d261 	.word	0x0001d261
   18894:	000185e5 	.word	0x000185e5
   18898:	0001912d 	.word	0x0001912d
   1889c:	00033075 	.word	0x00033075

000188a0 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   188a0:	b580      	push	{r7, lr}
   188a2:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   188a4:	4b02      	ldr	r3, [pc, #8]	; (188b0 <prvTraceGetCurrentTaskHandle+0x10>)
   188a6:	4798      	blx	r3
   188a8:	0003      	movs	r3, r0
}
   188aa:	0018      	movs	r0, r3
   188ac:	46bd      	mov	sp, r7
   188ae:	bd80      	pop	{r7, pc}
   188b0:	0001d30d 	.word	0x0001d30d

000188b4 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   188b4:	b590      	push	{r4, r7, lr}
   188b6:	b085      	sub	sp, #20
   188b8:	af02      	add	r7, sp, #8
   188ba:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   188bc:	4b14      	ldr	r3, [pc, #80]	; (18910 <vTraceEnable+0x5c>)
   188be:	4798      	blx	r3

	if (startOption == TRC_START)
   188c0:	687b      	ldr	r3, [r7, #4]
   188c2:	2b01      	cmp	r3, #1
   188c4:	d102      	bne.n	188cc <vTraceEnable+0x18>
	{
		vTraceStart();
   188c6:	4b13      	ldr	r3, [pc, #76]	; (18914 <vTraceEnable+0x60>)
   188c8:	4798      	blx	r3
   188ca:	e00e      	b.n	188ea <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   188cc:	687b      	ldr	r3, [r7, #4]
   188ce:	2b02      	cmp	r3, #2
   188d0:	d104      	bne.n	188dc <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   188d2:	4b11      	ldr	r3, [pc, #68]	; (18918 <vTraceEnable+0x64>)
   188d4:	0018      	movs	r0, r3
   188d6:	4b11      	ldr	r3, [pc, #68]	; (1891c <vTraceEnable+0x68>)
   188d8:	4798      	blx	r3
   188da:	e006      	b.n	188ea <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   188dc:	687b      	ldr	r3, [r7, #4]
   188de:	2b00      	cmp	r3, #0
   188e0:	d003      	beq.n	188ea <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   188e2:	4b0f      	ldr	r3, [pc, #60]	; (18920 <vTraceEnable+0x6c>)
   188e4:	0018      	movs	r0, r3
   188e6:	4b0d      	ldr	r3, [pc, #52]	; (1891c <vTraceEnable+0x68>)
   188e8:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   188ea:	4b0e      	ldr	r3, [pc, #56]	; (18924 <vTraceEnable+0x70>)
   188ec:	681b      	ldr	r3, [r3, #0]
   188ee:	2b00      	cmp	r3, #0
   188f0:	d10a      	bne.n	18908 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   188f2:	2396      	movs	r3, #150	; 0x96
   188f4:	005a      	lsls	r2, r3, #1
   188f6:	490c      	ldr	r1, [pc, #48]	; (18928 <vTraceEnable+0x74>)
   188f8:	480c      	ldr	r0, [pc, #48]	; (1892c <vTraceEnable+0x78>)
   188fa:	4b0a      	ldr	r3, [pc, #40]	; (18924 <vTraceEnable+0x70>)
   188fc:	9301      	str	r3, [sp, #4]
   188fe:	2304      	movs	r3, #4
   18900:	9300      	str	r3, [sp, #0]
   18902:	2300      	movs	r3, #0
   18904:	4c0a      	ldr	r4, [pc, #40]	; (18930 <vTraceEnable+0x7c>)
   18906:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18908:	46c0      	nop			; (mov r8, r8)
   1890a:	46bd      	mov	sp, r7
   1890c:	b003      	add	sp, #12
   1890e:	bd90      	pop	{r4, r7, pc}
   18910:	000197f9 	.word	0x000197f9
   18914:	00018d51 	.word	0x00018d51
   18918:	000374c8 	.word	0x000374c8
   1891c:	00019ea1 	.word	0x00019ea1
   18920:	00037508 	.word	0x00037508
   18924:	20000cd8 	.word	0x20000cd8
   18928:	0003753c 	.word	0x0003753c
   1892c:	00018935 	.word	0x00018935
   18930:	0001c265 	.word	0x0001c265

00018934 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18934:	b580      	push	{r7, lr}
   18936:	b082      	sub	sp, #8
   18938:	af00      	add	r7, sp, #0
   1893a:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1893c:	4b04      	ldr	r3, [pc, #16]	; (18950 <TzCtrl+0x1c>)
   1893e:	4798      	blx	r3
   18940:	1e03      	subs	r3, r0, #0
   18942:	d001      	beq.n	18948 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18944:	4b03      	ldr	r3, [pc, #12]	; (18954 <TzCtrl+0x20>)
   18946:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18948:	2004      	movs	r0, #4
   1894a:	4b03      	ldr	r3, [pc, #12]	; (18958 <TzCtrl+0x24>)
   1894c:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1894e:	e7f5      	b.n	1893c <TzCtrl+0x8>
   18950:	00018d95 	.word	0x00018d95
   18954:	000187d1 	.word	0x000187d1
   18958:	0001c601 	.word	0x0001c601

0001895c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1895c:	b580      	push	{r7, lr}
   1895e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18960:	4b60      	ldr	r3, [pc, #384]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18962:	681b      	ldr	r3, [r3, #0]
   18964:	2209      	movs	r2, #9
   18966:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18968:	4b5e      	ldr	r3, [pc, #376]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   1896a:	681b      	ldr	r3, [r3, #0]
   1896c:	2264      	movs	r2, #100	; 0x64
   1896e:	210a      	movs	r1, #10
   18970:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18972:	4b5c      	ldr	r3, [pc, #368]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18974:	681b      	ldr	r3, [r3, #0]
   18976:	2265      	movs	r2, #101	; 0x65
   18978:	210a      	movs	r1, #10
   1897a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1897c:	4b59      	ldr	r3, [pc, #356]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   1897e:	681b      	ldr	r3, [r3, #0]
   18980:	2266      	movs	r2, #102	; 0x66
   18982:	210a      	movs	r1, #10
   18984:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18986:	4b57      	ldr	r3, [pc, #348]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18988:	681b      	ldr	r3, [r3, #0]
   1898a:	2267      	movs	r2, #103	; 0x67
   1898c:	210f      	movs	r1, #15
   1898e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18990:	4b54      	ldr	r3, [pc, #336]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18992:	681b      	ldr	r3, [r3, #0]
   18994:	2268      	movs	r2, #104	; 0x68
   18996:	2105      	movs	r1, #5
   18998:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1899a:	4b52      	ldr	r3, [pc, #328]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   1899c:	681b      	ldr	r3, [r3, #0]
   1899e:	2269      	movs	r2, #105	; 0x69
   189a0:	2105      	movs	r1, #5
   189a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   189a4:	4b4f      	ldr	r3, [pc, #316]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189a6:	681b      	ldr	r3, [r3, #0]
   189a8:	226a      	movs	r2, #106	; 0x6a
   189aa:	2105      	movs	r1, #5
   189ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   189ae:	4b4d      	ldr	r3, [pc, #308]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189b0:	681b      	ldr	r3, [r3, #0]
   189b2:	226b      	movs	r2, #107	; 0x6b
   189b4:	2105      	movs	r1, #5
   189b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   189b8:	4b4a      	ldr	r3, [pc, #296]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189ba:	681b      	ldr	r3, [r3, #0]
   189bc:	226c      	movs	r2, #108	; 0x6c
   189be:	2105      	movs	r1, #5
   189c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   189c2:	4b48      	ldr	r3, [pc, #288]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189c4:	681b      	ldr	r3, [r3, #0]
   189c6:	2270      	movs	r2, #112	; 0x70
   189c8:	210f      	movs	r1, #15
   189ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   189cc:	4b45      	ldr	r3, [pc, #276]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189ce:	681b      	ldr	r3, [r3, #0]
   189d0:	2271      	movs	r2, #113	; 0x71
   189d2:	210f      	movs	r1, #15
   189d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   189d6:	4b43      	ldr	r3, [pc, #268]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189d8:	681b      	ldr	r3, [r3, #0]
   189da:	2272      	movs	r2, #114	; 0x72
   189dc:	210f      	movs	r1, #15
   189de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   189e0:	4b40      	ldr	r3, [pc, #256]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189e2:	681b      	ldr	r3, [r3, #0]
   189e4:	2273      	movs	r2, #115	; 0x73
   189e6:	210f      	movs	r1, #15
   189e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   189ea:	4b3e      	ldr	r3, [pc, #248]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189ec:	681b      	ldr	r3, [r3, #0]
   189ee:	2274      	movs	r2, #116	; 0x74
   189f0:	210f      	movs	r1, #15
   189f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   189f4:	4b3b      	ldr	r3, [pc, #236]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   189f6:	681b      	ldr	r3, [r3, #0]
   189f8:	2275      	movs	r2, #117	; 0x75
   189fa:	210f      	movs	r1, #15
   189fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   189fe:	4b39      	ldr	r3, [pc, #228]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a00:	681b      	ldr	r3, [r3, #0]
   18a02:	2276      	movs	r2, #118	; 0x76
   18a04:	210f      	movs	r1, #15
   18a06:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18a08:	4b36      	ldr	r3, [pc, #216]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a0a:	681b      	ldr	r3, [r3, #0]
   18a0c:	2277      	movs	r2, #119	; 0x77
   18a0e:	210f      	movs	r1, #15
   18a10:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   18a12:	4b34      	ldr	r3, [pc, #208]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a14:	681b      	ldr	r3, [r3, #0]
   18a16:	2278      	movs	r2, #120	; 0x78
   18a18:	210f      	movs	r1, #15
   18a1a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18a1c:	4b31      	ldr	r3, [pc, #196]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a1e:	681b      	ldr	r3, [r3, #0]
   18a20:	227c      	movs	r2, #124	; 0x7c
   18a22:	2110      	movs	r1, #16
   18a24:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18a26:	4b2f      	ldr	r3, [pc, #188]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a28:	681b      	ldr	r3, [r3, #0]
   18a2a:	227d      	movs	r2, #125	; 0x7d
   18a2c:	2110      	movs	r1, #16
   18a2e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   18a30:	4b2c      	ldr	r3, [pc, #176]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a32:	681b      	ldr	r3, [r3, #0]
   18a34:	227e      	movs	r2, #126	; 0x7e
   18a36:	2110      	movs	r1, #16
   18a38:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18a3a:	4b2a      	ldr	r3, [pc, #168]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a3c:	681b      	ldr	r3, [r3, #0]
   18a3e:	227f      	movs	r2, #127	; 0x7f
   18a40:	2113      	movs	r1, #19
   18a42:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18a44:	4b27      	ldr	r3, [pc, #156]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a46:	681b      	ldr	r3, [r3, #0]
   18a48:	2280      	movs	r2, #128	; 0x80
   18a4a:	2111      	movs	r1, #17
   18a4c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   18a4e:	4b25      	ldr	r3, [pc, #148]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a50:	681b      	ldr	r3, [r3, #0]
   18a52:	2281      	movs	r2, #129	; 0x81
   18a54:	2110      	movs	r1, #16
   18a56:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18a58:	4b22      	ldr	r3, [pc, #136]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a5a:	681b      	ldr	r3, [r3, #0]
   18a5c:	2282      	movs	r2, #130	; 0x82
   18a5e:	2113      	movs	r1, #19
   18a60:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   18a62:	4b20      	ldr	r3, [pc, #128]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a64:	681b      	ldr	r3, [r3, #0]
   18a66:	2283      	movs	r2, #131	; 0x83
   18a68:	2113      	movs	r1, #19
   18a6a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18a6c:	4b1d      	ldr	r3, [pc, #116]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a6e:	681b      	ldr	r3, [r3, #0]
   18a70:	2284      	movs	r2, #132	; 0x84
   18a72:	2113      	movs	r1, #19
   18a74:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   18a76:	4b1b      	ldr	r3, [pc, #108]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a78:	681b      	ldr	r3, [r3, #0]
   18a7a:	2288      	movs	r2, #136	; 0x88
   18a7c:	2100      	movs	r1, #0
   18a7e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18a80:	4b18      	ldr	r3, [pc, #96]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a82:	681b      	ldr	r3, [r3, #0]
   18a84:	228a      	movs	r2, #138	; 0x8a
   18a86:	21a0      	movs	r1, #160	; 0xa0
   18a88:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18a8a:	4b16      	ldr	r3, [pc, #88]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a8c:	681b      	ldr	r3, [r3, #0]
   18a8e:	228c      	movs	r2, #140	; 0x8c
   18a90:	21a0      	movs	r1, #160	; 0xa0
   18a92:	0049      	lsls	r1, r1, #1
   18a94:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   18a96:	4b13      	ldr	r3, [pc, #76]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18a98:	681b      	ldr	r3, [r3, #0]
   18a9a:	228e      	movs	r2, #142	; 0x8e
   18a9c:	21f0      	movs	r1, #240	; 0xf0
   18a9e:	0049      	lsls	r1, r1, #1
   18aa0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   18aa2:	4b10      	ldr	r3, [pc, #64]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18aa4:	681b      	ldr	r3, [r3, #0]
   18aa6:	2290      	movs	r2, #144	; 0x90
   18aa8:	490f      	ldr	r1, [pc, #60]	; (18ae8 <vTraceInitObjectPropertyTable+0x18c>)
   18aaa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18aac:	4b0d      	ldr	r3, [pc, #52]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18aae:	681b      	ldr	r3, [r3, #0]
   18ab0:	2292      	movs	r2, #146	; 0x92
   18ab2:	490e      	ldr	r1, [pc, #56]	; (18aec <vTraceInitObjectPropertyTable+0x190>)
   18ab4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   18ab6:	4b0b      	ldr	r3, [pc, #44]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18ab8:	681b      	ldr	r3, [r3, #0]
   18aba:	2294      	movs	r2, #148	; 0x94
   18abc:	490c      	ldr	r1, [pc, #48]	; (18af0 <vTraceInitObjectPropertyTable+0x194>)
   18abe:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18ac0:	4b08      	ldr	r3, [pc, #32]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18ac2:	681b      	ldr	r3, [r3, #0]
   18ac4:	2296      	movs	r2, #150	; 0x96
   18ac6:	490b      	ldr	r1, [pc, #44]	; (18af4 <vTraceInitObjectPropertyTable+0x198>)
   18ac8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18aca:	4b06      	ldr	r3, [pc, #24]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18acc:	681b      	ldr	r3, [r3, #0]
   18ace:	2298      	movs	r2, #152	; 0x98
   18ad0:	218c      	movs	r1, #140	; 0x8c
   18ad2:	00c9      	lsls	r1, r1, #3
   18ad4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   18ad6:	4b03      	ldr	r3, [pc, #12]	; (18ae4 <vTraceInitObjectPropertyTable+0x188>)
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	4a07      	ldr	r2, [pc, #28]	; (18af8 <vTraceInitObjectPropertyTable+0x19c>)
   18adc:	661a      	str	r2, [r3, #96]	; 0x60
}
   18ade:	46c0      	nop			; (mov r8, r8)
   18ae0:	46bd      	mov	sp, r7
   18ae2:	bd80      	pop	{r7, pc}
   18ae4:	20000df0 	.word	0x20000df0
   18ae8:	000002fd 	.word	0x000002fd
   18aec:	00000352 	.word	0x00000352
   18af0:	000003a2 	.word	0x000003a2
   18af4:	00000401 	.word	0x00000401
   18af8:	000004bf 	.word	0x000004bf

00018afc <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18afc:	b580      	push	{r7, lr}
   18afe:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18b00:	4b2e      	ldr	r3, [pc, #184]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b02:	2200      	movs	r2, #0
   18b04:	825a      	strh	r2, [r3, #18]
   18b06:	4b2d      	ldr	r3, [pc, #180]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b08:	8a5a      	ldrh	r2, [r3, #18]
   18b0a:	4b2c      	ldr	r3, [pc, #176]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b0c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   18b0e:	4b2b      	ldr	r3, [pc, #172]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b10:	220a      	movs	r2, #10
   18b12:	829a      	strh	r2, [r3, #20]
   18b14:	4b29      	ldr	r3, [pc, #164]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b16:	8a9a      	ldrh	r2, [r3, #20]
   18b18:	4b28      	ldr	r3, [pc, #160]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b1a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18b1c:	4b27      	ldr	r3, [pc, #156]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b1e:	2214      	movs	r2, #20
   18b20:	82da      	strh	r2, [r3, #22]
   18b22:	4b26      	ldr	r3, [pc, #152]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b24:	8ada      	ldrh	r2, [r3, #22]
   18b26:	4b25      	ldr	r3, [pc, #148]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b28:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18b2a:	4b24      	ldr	r3, [pc, #144]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b2c:	221e      	movs	r2, #30
   18b2e:	831a      	strh	r2, [r3, #24]
   18b30:	4b22      	ldr	r3, [pc, #136]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b32:	8b1a      	ldrh	r2, [r3, #24]
   18b34:	4b21      	ldr	r3, [pc, #132]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b36:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18b38:	4b20      	ldr	r3, [pc, #128]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b3a:	222d      	movs	r2, #45	; 0x2d
   18b3c:	835a      	strh	r2, [r3, #26]
   18b3e:	4b1f      	ldr	r3, [pc, #124]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b40:	8b5a      	ldrh	r2, [r3, #26]
   18b42:	4b1e      	ldr	r3, [pc, #120]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b44:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18b46:	4b1d      	ldr	r3, [pc, #116]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b48:	2232      	movs	r2, #50	; 0x32
   18b4a:	839a      	strh	r2, [r3, #28]
   18b4c:	4b1b      	ldr	r3, [pc, #108]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b4e:	8b9a      	ldrh	r2, [r3, #28]
   18b50:	4b1a      	ldr	r3, [pc, #104]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b52:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18b54:	4b19      	ldr	r3, [pc, #100]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b56:	2237      	movs	r2, #55	; 0x37
   18b58:	83da      	strh	r2, [r3, #30]
   18b5a:	4b18      	ldr	r3, [pc, #96]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b5c:	8bda      	ldrh	r2, [r3, #30]
   18b5e:	4b17      	ldr	r3, [pc, #92]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b60:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   18b62:	4b16      	ldr	r3, [pc, #88]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b64:	223c      	movs	r2, #60	; 0x3c
   18b66:	841a      	strh	r2, [r3, #32]
   18b68:	4b14      	ldr	r3, [pc, #80]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b6a:	8c1a      	ldrh	r2, [r3, #32]
   18b6c:	4b13      	ldr	r3, [pc, #76]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b6e:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18b70:	4b12      	ldr	r3, [pc, #72]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b72:	2241      	movs	r2, #65	; 0x41
   18b74:	845a      	strh	r2, [r3, #34]	; 0x22
   18b76:	4b11      	ldr	r3, [pc, #68]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b78:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18b7a:	4b10      	ldr	r3, [pc, #64]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b7c:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18b7e:	4b0f      	ldr	r3, [pc, #60]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b80:	2209      	movs	r2, #9
   18b82:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18b84:	4b0d      	ldr	r3, [pc, #52]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b86:	2213      	movs	r2, #19
   18b88:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18b8a:	4b0c      	ldr	r3, [pc, #48]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b8c:	221d      	movs	r2, #29
   18b8e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18b90:	4b0a      	ldr	r3, [pc, #40]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b92:	222c      	movs	r2, #44	; 0x2c
   18b94:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   18b96:	4b09      	ldr	r3, [pc, #36]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b98:	2231      	movs	r2, #49	; 0x31
   18b9a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18b9c:	4b07      	ldr	r3, [pc, #28]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18b9e:	2236      	movs	r2, #54	; 0x36
   18ba0:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   18ba2:	4b06      	ldr	r3, [pc, #24]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18ba4:	223b      	movs	r2, #59	; 0x3b
   18ba6:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18ba8:	4b04      	ldr	r3, [pc, #16]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18baa:	2240      	movs	r2, #64	; 0x40
   18bac:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18bae:	4b03      	ldr	r3, [pc, #12]	; (18bbc <vTraceInitObjectHandleStack+0xc0>)
   18bb0:	2245      	movs	r2, #69	; 0x45
   18bb2:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18bb4:	46c0      	nop			; (mov r8, r8)
   18bb6:	46bd      	mov	sp, r7
   18bb8:	bd80      	pop	{r7, pc}
   18bba:	46c0      	nop			; (mov r8, r8)
   18bbc:	20000d60 	.word	0x20000d60

00018bc0 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18bc0:	b580      	push	{r7, lr}
   18bc2:	b082      	sub	sp, #8
   18bc4:	af00      	add	r7, sp, #0
   18bc6:	0002      	movs	r2, r0
   18bc8:	1dfb      	adds	r3, r7, #7
   18bca:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18bcc:	1dfb      	adds	r3, r7, #7
   18bce:	781b      	ldrb	r3, [r3, #0]
   18bd0:	2b08      	cmp	r3, #8
   18bd2:	d816      	bhi.n	18c02 <pszTraceGetErrorNotEnoughHandles+0x42>
   18bd4:	009a      	lsls	r2, r3, #2
   18bd6:	4b0d      	ldr	r3, [pc, #52]	; (18c0c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18bd8:	18d3      	adds	r3, r2, r3
   18bda:	681b      	ldr	r3, [r3, #0]
   18bdc:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18bde:	4b0c      	ldr	r3, [pc, #48]	; (18c10 <pszTraceGetErrorNotEnoughHandles+0x50>)
   18be0:	e010      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   18be2:	4b0c      	ldr	r3, [pc, #48]	; (18c14 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18be4:	e00e      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   18be6:	4b0c      	ldr	r3, [pc, #48]	; (18c18 <pszTraceGetErrorNotEnoughHandles+0x58>)
   18be8:	e00c      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   18bea:	4b0c      	ldr	r3, [pc, #48]	; (18c1c <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18bec:	e00a      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   18bee:	4b0c      	ldr	r3, [pc, #48]	; (18c20 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18bf0:	e008      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18bf2:	4b0c      	ldr	r3, [pc, #48]	; (18c24 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18bf4:	e006      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18bf6:	4b0c      	ldr	r3, [pc, #48]	; (18c28 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18bf8:	e004      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   18bfa:	4b0c      	ldr	r3, [pc, #48]	; (18c2c <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18bfc:	e002      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   18bfe:	4b0c      	ldr	r3, [pc, #48]	; (18c30 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18c00:	e000      	b.n	18c04 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18c02:	4b0c      	ldr	r3, [pc, #48]	; (18c34 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18c04:	0018      	movs	r0, r3
   18c06:	46bd      	mov	sp, r7
   18c08:	b002      	add	sp, #8
   18c0a:	bd80      	pop	{r7, pc}
   18c0c:	00037844 	.word	0x00037844
   18c10:	00037544 	.word	0x00037544
   18c14:	0003758c 	.word	0x0003758c
   18c18:	000375d4 	.word	0x000375d4
   18c1c:	00037628 	.word	0x00037628
   18c20:	00037674 	.word	0x00037674
   18c24:	000376c0 	.word	0x000376c0
   18c28:	0003770c 	.word	0x0003770c
   18c2c:	00037760 	.word	0x00037760
   18c30:	000377b8 	.word	0x000377b8
   18c34:	00037814 	.word	0x00037814

00018c38 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18c38:	b590      	push	{r4, r7, lr}
   18c3a:	b087      	sub	sp, #28
   18c3c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   18c3e:	2317      	movs	r3, #23
   18c40:	18fb      	adds	r3, r7, r3
   18c42:	2200      	movs	r2, #0
   18c44:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18c46:	4b36      	ldr	r3, [pc, #216]	; (18d20 <uiTraceStart+0xe8>)
   18c48:	681b      	ldr	r3, [r3, #0]
   18c4a:	2b00      	cmp	r3, #0
   18c4c:	d10b      	bne.n	18c66 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   18c4e:	4b34      	ldr	r3, [pc, #208]	; (18d20 <uiTraceStart+0xe8>)
   18c50:	681b      	ldr	r3, [r3, #0]
   18c52:	2b00      	cmp	r3, #0
   18c54:	d105      	bne.n	18c62 <uiTraceStart+0x2a>
   18c56:	4b33      	ldr	r3, [pc, #204]	; (18d24 <uiTraceStart+0xec>)
   18c58:	0018      	movs	r0, r3
   18c5a:	4b33      	ldr	r3, [pc, #204]	; (18d28 <uiTraceStart+0xf0>)
   18c5c:	4798      	blx	r3
   18c5e:	2300      	movs	r3, #0
   18c60:	e059      	b.n	18d16 <uiTraceStart+0xde>
		return 0;
   18c62:	2300      	movs	r3, #0
   18c64:	e057      	b.n	18d16 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18c66:	4b2e      	ldr	r3, [pc, #184]	; (18d20 <uiTraceStart+0xe8>)
   18c68:	681b      	ldr	r3, [r3, #0]
   18c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c6c:	2b01      	cmp	r3, #1
   18c6e:	d101      	bne.n	18c74 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18c70:	2301      	movs	r3, #1
   18c72:	e050      	b.n	18d16 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18c74:	4b2d      	ldr	r3, [pc, #180]	; (18d2c <uiTraceStart+0xf4>)
   18c76:	681b      	ldr	r3, [r3, #0]
   18c78:	2b00      	cmp	r3, #0
   18c7a:	d149      	bne.n	18d10 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18c7c:	f3ef 8310 	mrs	r3, PRIMASK
   18c80:	60bb      	str	r3, [r7, #8]
  return(result);
   18c82:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18c84:	613b      	str	r3, [r7, #16]
   18c86:	2301      	movs	r3, #1
   18c88:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18c8a:	68fb      	ldr	r3, [r7, #12]
   18c8c:	f383 8810 	msr	PRIMASK, r3
   18c90:	4b27      	ldr	r3, [pc, #156]	; (18d30 <uiTraceStart+0xf8>)
   18c92:	681b      	ldr	r3, [r3, #0]
   18c94:	1c5a      	adds	r2, r3, #1
   18c96:	4b26      	ldr	r3, [pc, #152]	; (18d30 <uiTraceStart+0xf8>)
   18c98:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18c9a:	4b21      	ldr	r3, [pc, #132]	; (18d20 <uiTraceStart+0xe8>)
   18c9c:	681b      	ldr	r3, [r3, #0]
   18c9e:	2201      	movs	r2, #1
   18ca0:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18ca2:	4b24      	ldr	r3, [pc, #144]	; (18d34 <uiTraceStart+0xfc>)
   18ca4:	4798      	blx	r3
   18ca6:	0003      	movs	r3, r0
   18ca8:	0018      	movs	r0, r3
   18caa:	4b23      	ldr	r3, [pc, #140]	; (18d38 <uiTraceStart+0x100>)
   18cac:	4798      	blx	r3
   18cae:	0003      	movs	r3, r0
   18cb0:	001a      	movs	r2, r3
   18cb2:	2317      	movs	r3, #23
   18cb4:	18fb      	adds	r3, r7, r3
   18cb6:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18cb8:	2317      	movs	r3, #23
   18cba:	18fb      	adds	r3, r7, r3
   18cbc:	781b      	ldrb	r3, [r3, #0]
   18cbe:	2b00      	cmp	r3, #0
   18cc0:	d116      	bne.n	18cf0 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18cc2:	2317      	movs	r3, #23
   18cc4:	18fc      	adds	r4, r7, r3
   18cc6:	2003      	movs	r0, #3
   18cc8:	4b1c      	ldr	r3, [pc, #112]	; (18d3c <uiTraceStart+0x104>)
   18cca:	4798      	blx	r3
   18ccc:	0003      	movs	r3, r0
   18cce:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18cd0:	4a1b      	ldr	r2, [pc, #108]	; (18d40 <uiTraceStart+0x108>)
   18cd2:	2317      	movs	r3, #23
   18cd4:	18fb      	adds	r3, r7, r3
   18cd6:	781b      	ldrb	r3, [r3, #0]
   18cd8:	0019      	movs	r1, r3
   18cda:	2003      	movs	r0, #3
   18cdc:	4b19      	ldr	r3, [pc, #100]	; (18d44 <uiTraceStart+0x10c>)
   18cde:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18ce0:	2317      	movs	r3, #23
   18ce2:	18fb      	adds	r3, r7, r3
   18ce4:	781b      	ldrb	r3, [r3, #0]
   18ce6:	2200      	movs	r2, #0
   18ce8:	0019      	movs	r1, r3
   18cea:	2003      	movs	r0, #3
   18cec:	4b16      	ldr	r3, [pc, #88]	; (18d48 <uiTraceStart+0x110>)
   18cee:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18cf0:	2317      	movs	r3, #23
   18cf2:	18fb      	adds	r3, r7, r3
   18cf4:	781b      	ldrb	r3, [r3, #0]
   18cf6:	0018      	movs	r0, r3
   18cf8:	4b14      	ldr	r3, [pc, #80]	; (18d4c <uiTraceStart+0x114>)
   18cfa:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18cfc:	4b0c      	ldr	r3, [pc, #48]	; (18d30 <uiTraceStart+0xf8>)
   18cfe:	681b      	ldr	r3, [r3, #0]
   18d00:	1e5a      	subs	r2, r3, #1
   18d02:	4b0b      	ldr	r3, [pc, #44]	; (18d30 <uiTraceStart+0xf8>)
   18d04:	601a      	str	r2, [r3, #0]
   18d06:	693b      	ldr	r3, [r7, #16]
   18d08:	607b      	str	r3, [r7, #4]
   18d0a:	687b      	ldr	r3, [r7, #4]
   18d0c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18d10:	4b03      	ldr	r3, [pc, #12]	; (18d20 <uiTraceStart+0xe8>)
   18d12:	681b      	ldr	r3, [r3, #0]
   18d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18d16:	0018      	movs	r0, r3
   18d18:	46bd      	mov	sp, r7
   18d1a:	b007      	add	sp, #28
   18d1c:	bd90      	pop	{r4, r7, pc}
   18d1e:	46c0      	nop			; (mov r8, r8)
   18d20:	20000df0 	.word	0x20000df0
   18d24:	00037868 	.word	0x00037868
   18d28:	00019ea1 	.word	0x00019ea1
   18d2c:	20000d50 	.word	0x20000d50
   18d30:	20000d48 	.word	0x20000d48
   18d34:	000188a1 	.word	0x000188a1
   18d38:	000185e5 	.word	0x000185e5
   18d3c:	00019b85 	.word	0x00019b85
   18d40:	000378ac 	.word	0x000378ac
   18d44:	00019db5 	.word	0x00019db5
   18d48:	00019519 	.word	0x00019519
   18d4c:	00019401 	.word	0x00019401

00018d50 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18d50:	b580      	push	{r7, lr}
   18d52:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18d54:	4b02      	ldr	r3, [pc, #8]	; (18d60 <vTraceStart+0x10>)
   18d56:	4798      	blx	r3
}
   18d58:	46c0      	nop			; (mov r8, r8)
   18d5a:	46bd      	mov	sp, r7
   18d5c:	bd80      	pop	{r7, pc}
   18d5e:	46c0      	nop			; (mov r8, r8)
   18d60:	00018c39 	.word	0x00018c39

00018d64 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18d64:	b580      	push	{r7, lr}
   18d66:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18d68:	4b08      	ldr	r3, [pc, #32]	; (18d8c <vTraceStop+0x28>)
   18d6a:	681b      	ldr	r3, [r3, #0]
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	d003      	beq.n	18d78 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18d70:	4b06      	ldr	r3, [pc, #24]	; (18d8c <vTraceStop+0x28>)
   18d72:	681b      	ldr	r3, [r3, #0]
   18d74:	2200      	movs	r2, #0
   18d76:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18d78:	4b05      	ldr	r3, [pc, #20]	; (18d90 <vTraceStop+0x2c>)
   18d7a:	681b      	ldr	r3, [r3, #0]
   18d7c:	2b00      	cmp	r3, #0
   18d7e:	d002      	beq.n	18d86 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18d80:	4b03      	ldr	r3, [pc, #12]	; (18d90 <vTraceStop+0x2c>)
   18d82:	681b      	ldr	r3, [r3, #0]
   18d84:	4798      	blx	r3
	}
}
   18d86:	46c0      	nop			; (mov r8, r8)
   18d88:	46bd      	mov	sp, r7
   18d8a:	bd80      	pop	{r7, pc}
   18d8c:	20000df0 	.word	0x20000df0
   18d90:	20000d58 	.word	0x20000d58

00018d94 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18d94:	b580      	push	{r7, lr}
   18d96:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18d98:	4b05      	ldr	r3, [pc, #20]	; (18db0 <xTraceIsRecordingEnabled+0x1c>)
   18d9a:	681b      	ldr	r3, [r3, #0]
   18d9c:	2b00      	cmp	r3, #0
   18d9e:	d003      	beq.n	18da8 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18da0:	4b03      	ldr	r3, [pc, #12]	; (18db0 <xTraceIsRecordingEnabled+0x1c>)
   18da2:	681b      	ldr	r3, [r3, #0]
   18da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18da6:	e000      	b.n	18daa <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   18da8:	2300      	movs	r3, #0
	}
}
   18daa:	0018      	movs	r0, r3
   18dac:	46bd      	mov	sp, r7
   18dae:	bd80      	pop	{r7, pc}
   18db0:	20000df0 	.word	0x20000df0

00018db4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18db4:	b590      	push	{r4, r7, lr}
   18db6:	b089      	sub	sp, #36	; 0x24
   18db8:	af00      	add	r7, sp, #0
   18dba:	0002      	movs	r2, r0
   18dbc:	1dfb      	adds	r3, r7, #7
   18dbe:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18dc0:	1dfb      	adds	r3, r7, #7
   18dc2:	781b      	ldrb	r3, [r3, #0]
   18dc4:	2b00      	cmp	r3, #0
   18dc6:	d057      	beq.n	18e78 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18dc8:	4b2e      	ldr	r3, [pc, #184]	; (18e84 <prvTraceStoreTaskReady+0xd0>)
   18dca:	681b      	ldr	r3, [r3, #0]
   18dcc:	2b00      	cmp	r3, #0
   18dce:	d055      	beq.n	18e7c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18dd0:	1dfb      	adds	r3, r7, #7
   18dd2:	781b      	ldrb	r3, [r3, #0]
   18dd4:	2b0f      	cmp	r3, #15
   18dd6:	d904      	bls.n	18de2 <prvTraceStoreTaskReady+0x2e>
   18dd8:	4b2b      	ldr	r3, [pc, #172]	; (18e88 <prvTraceStoreTaskReady+0xd4>)
   18dda:	0018      	movs	r0, r3
   18ddc:	4b2b      	ldr	r3, [pc, #172]	; (18e8c <prvTraceStoreTaskReady+0xd8>)
   18dde:	4798      	blx	r3
   18de0:	e04d      	b.n	18e7e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   18de2:	4b2b      	ldr	r3, [pc, #172]	; (18e90 <prvTraceStoreTaskReady+0xdc>)
   18de4:	681b      	ldr	r3, [r3, #0]
   18de6:	2b00      	cmp	r3, #0
   18de8:	d004      	beq.n	18df4 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   18dea:	4b2a      	ldr	r3, [pc, #168]	; (18e94 <prvTraceStoreTaskReady+0xe0>)
   18dec:	0018      	movs	r0, r3
   18dee:	4b27      	ldr	r3, [pc, #156]	; (18e8c <prvTraceStoreTaskReady+0xd8>)
   18df0:	4798      	blx	r3
		return;
   18df2:	e044      	b.n	18e7e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18df4:	f3ef 8310 	mrs	r3, PRIMASK
   18df8:	60fb      	str	r3, [r7, #12]
  return(result);
   18dfa:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18dfc:	61fb      	str	r3, [r7, #28]
   18dfe:	2301      	movs	r3, #1
   18e00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18e02:	693b      	ldr	r3, [r7, #16]
   18e04:	f383 8810 	msr	PRIMASK, r3
   18e08:	4b21      	ldr	r3, [pc, #132]	; (18e90 <prvTraceStoreTaskReady+0xdc>)
   18e0a:	681b      	ldr	r3, [r3, #0]
   18e0c:	1c5a      	adds	r2, r3, #1
   18e0e:	4b20      	ldr	r3, [pc, #128]	; (18e90 <prvTraceStoreTaskReady+0xdc>)
   18e10:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   18e12:	4b21      	ldr	r3, [pc, #132]	; (18e98 <prvTraceStoreTaskReady+0xe4>)
   18e14:	681b      	ldr	r3, [r3, #0]
   18e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18e18:	2b00      	cmp	r3, #0
   18e1a:	d022      	beq.n	18e62 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18e1c:	231a      	movs	r3, #26
   18e1e:	18fc      	adds	r4, r7, r3
   18e20:	4b1e      	ldr	r3, [pc, #120]	; (18e9c <prvTraceStoreTaskReady+0xe8>)
   18e22:	0018      	movs	r0, r3
   18e24:	4b1e      	ldr	r3, [pc, #120]	; (18ea0 <prvTraceStoreTaskReady+0xec>)
   18e26:	4798      	blx	r3
   18e28:	0003      	movs	r3, r0
   18e2a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   18e2c:	2319      	movs	r3, #25
   18e2e:	18fb      	adds	r3, r7, r3
   18e30:	1dfa      	adds	r2, r7, #7
   18e32:	7812      	ldrb	r2, [r2, #0]
   18e34:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18e36:	4b1b      	ldr	r3, [pc, #108]	; (18ea4 <prvTraceStoreTaskReady+0xf0>)
   18e38:	4798      	blx	r3
   18e3a:	0003      	movs	r3, r0
   18e3c:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   18e3e:	697b      	ldr	r3, [r7, #20]
   18e40:	2b00      	cmp	r3, #0
   18e42:	d00e      	beq.n	18e62 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18e44:	697b      	ldr	r3, [r7, #20]
   18e46:	2202      	movs	r2, #2
   18e48:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18e4a:	697b      	ldr	r3, [r7, #20]
   18e4c:	221a      	movs	r2, #26
   18e4e:	18ba      	adds	r2, r7, r2
   18e50:	8812      	ldrh	r2, [r2, #0]
   18e52:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18e54:	697b      	ldr	r3, [r7, #20]
   18e56:	2219      	movs	r2, #25
   18e58:	18ba      	adds	r2, r7, r2
   18e5a:	7812      	ldrb	r2, [r2, #0]
   18e5c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18e5e:	4b12      	ldr	r3, [pc, #72]	; (18ea8 <prvTraceStoreTaskReady+0xf4>)
   18e60:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18e62:	4b0b      	ldr	r3, [pc, #44]	; (18e90 <prvTraceStoreTaskReady+0xdc>)
   18e64:	681b      	ldr	r3, [r3, #0]
   18e66:	1e5a      	subs	r2, r3, #1
   18e68:	4b09      	ldr	r3, [pc, #36]	; (18e90 <prvTraceStoreTaskReady+0xdc>)
   18e6a:	601a      	str	r2, [r3, #0]
   18e6c:	69fb      	ldr	r3, [r7, #28]
   18e6e:	60bb      	str	r3, [r7, #8]
   18e70:	68bb      	ldr	r3, [r7, #8]
   18e72:	f383 8810 	msr	PRIMASK, r3
   18e76:	e002      	b.n	18e7e <prvTraceStoreTaskReady+0xca>
		return;
   18e78:	46c0      	nop			; (mov r8, r8)
   18e7a:	e000      	b.n	18e7e <prvTraceStoreTaskReady+0xca>
		return;
   18e7c:	46c0      	nop			; (mov r8, r8)
}
   18e7e:	46bd      	mov	sp, r7
   18e80:	b009      	add	sp, #36	; 0x24
   18e82:	bd90      	pop	{r4, r7, pc}
   18e84:	2000010c 	.word	0x2000010c
   18e88:	00037c14 	.word	0x00037c14
   18e8c:	00019ea1 	.word	0x00019ea1
   18e90:	20000d48 	.word	0x20000d48
   18e94:	00037c54 	.word	0x00037c54
   18e98:	20000df0 	.word	0x20000df0
   18e9c:	0000ffff 	.word	0x0000ffff
   18ea0:	0001a0b5 	.word	0x0001a0b5
   18ea4:	00019a59 	.word	0x00019a59
   18ea8:	0001a05d 	.word	0x0001a05d

00018eac <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18eac:	b580      	push	{r7, lr}
   18eae:	b08e      	sub	sp, #56	; 0x38
   18eb0:	af00      	add	r7, sp, #0
   18eb2:	60f8      	str	r0, [r7, #12]
   18eb4:	60b9      	str	r1, [r7, #8]
   18eb6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   18eb8:	4b48      	ldr	r3, [pc, #288]	; (18fdc <vTraceStoreMemMangEvent+0x130>)
   18eba:	681b      	ldr	r3, [r3, #0]
   18ebc:	2b00      	cmp	r3, #0
   18ebe:	d100      	bne.n	18ec2 <vTraceStoreMemMangEvent+0x16>
   18ec0:	e088      	b.n	18fd4 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   18ec2:	687b      	ldr	r3, [r7, #4]
   18ec4:	2b00      	cmp	r3, #0
   18ec6:	da03      	bge.n	18ed0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   18ec8:	687b      	ldr	r3, [r7, #4]
   18eca:	425b      	negs	r3, r3
   18ecc:	637b      	str	r3, [r7, #52]	; 0x34
   18ece:	e001      	b.n	18ed4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18ed0:	687b      	ldr	r3, [r7, #4]
   18ed2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18ed4:	f3ef 8310 	mrs	r3, PRIMASK
   18ed8:	61bb      	str	r3, [r7, #24]
  return(result);
   18eda:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18edc:	633b      	str	r3, [r7, #48]	; 0x30
   18ede:	2301      	movs	r3, #1
   18ee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ee2:	69fb      	ldr	r3, [r7, #28]
   18ee4:	f383 8810 	msr	PRIMASK, r3
   18ee8:	4b3d      	ldr	r3, [pc, #244]	; (18fe0 <vTraceStoreMemMangEvent+0x134>)
   18eea:	681b      	ldr	r3, [r3, #0]
   18eec:	1c5a      	adds	r2, r3, #1
   18eee:	4b3c      	ldr	r3, [pc, #240]	; (18fe0 <vTraceStoreMemMangEvent+0x134>)
   18ef0:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18ef2:	68bb      	ldr	r3, [r7, #8]
   18ef4:	2b00      	cmp	r3, #0
   18ef6:	d005      	beq.n	18f04 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18ef8:	4b3a      	ldr	r3, [pc, #232]	; (18fe4 <vTraceStoreMemMangEvent+0x138>)
   18efa:	681a      	ldr	r2, [r3, #0]
   18efc:	687b      	ldr	r3, [r7, #4]
   18efe:	18d2      	adds	r2, r2, r3
   18f00:	4b38      	ldr	r3, [pc, #224]	; (18fe4 <vTraceStoreMemMangEvent+0x138>)
   18f02:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18f04:	4b35      	ldr	r3, [pc, #212]	; (18fdc <vTraceStoreMemMangEvent+0x130>)
   18f06:	681b      	ldr	r3, [r3, #0]
   18f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f0a:	2b00      	cmp	r3, #0
   18f0c:	d057      	beq.n	18fbe <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   18f0e:	20ff      	movs	r0, #255	; 0xff
   18f10:	4b35      	ldr	r3, [pc, #212]	; (18fe8 <vTraceStoreMemMangEvent+0x13c>)
   18f12:	4798      	blx	r3
   18f14:	0003      	movs	r3, r0
   18f16:	001a      	movs	r2, r3
   18f18:	232f      	movs	r3, #47	; 0x2f
   18f1a:	18fb      	adds	r3, r7, r3
   18f1c:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   18f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18f20:	4a32      	ldr	r2, [pc, #200]	; (18fec <vTraceStoreMemMangEvent+0x140>)
   18f22:	0019      	movs	r1, r3
   18f24:	0010      	movs	r0, r2
   18f26:	4b32      	ldr	r3, [pc, #200]	; (18ff0 <vTraceStoreMemMangEvent+0x144>)
   18f28:	4798      	blx	r3
   18f2a:	0002      	movs	r2, r0
   18f2c:	232c      	movs	r3, #44	; 0x2c
   18f2e:	18fb      	adds	r3, r7, r3
   18f30:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   18f32:	4b30      	ldr	r3, [pc, #192]	; (18ff4 <vTraceStoreMemMangEvent+0x148>)
   18f34:	4798      	blx	r3
   18f36:	0003      	movs	r3, r0
   18f38:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   18f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f3c:	2b00      	cmp	r3, #0
   18f3e:	d03e      	beq.n	18fbe <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   18f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f42:	222f      	movs	r2, #47	; 0x2f
   18f44:	18ba      	adds	r2, r7, r2
   18f46:	7812      	ldrb	r2, [r2, #0]
   18f48:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   18f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f4c:	2200      	movs	r2, #0
   18f4e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f52:	222c      	movs	r2, #44	; 0x2c
   18f54:	18ba      	adds	r2, r7, r2
   18f56:	8812      	ldrh	r2, [r2, #0]
   18f58:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18f5a:	4b27      	ldr	r3, [pc, #156]	; (18ff8 <vTraceStoreMemMangEvent+0x14c>)
   18f5c:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   18f5e:	68bb      	ldr	r3, [r7, #8]
   18f60:	4a22      	ldr	r2, [pc, #136]	; (18fec <vTraceStoreMemMangEvent+0x140>)
   18f62:	0019      	movs	r1, r3
   18f64:	0010      	movs	r0, r2
   18f66:	4b22      	ldr	r3, [pc, #136]	; (18ff0 <vTraceStoreMemMangEvent+0x144>)
   18f68:	4798      	blx	r3
   18f6a:	0002      	movs	r2, r0
   18f6c:	2326      	movs	r3, #38	; 0x26
   18f6e:	18fb      	adds	r3, r7, r3
   18f70:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18f72:	2325      	movs	r3, #37	; 0x25
   18f74:	18fb      	adds	r3, r7, r3
   18f76:	2200      	movs	r2, #0
   18f78:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18f7a:	4b1e      	ldr	r3, [pc, #120]	; (18ff4 <vTraceStoreMemMangEvent+0x148>)
   18f7c:	4798      	blx	r3
   18f7e:	0003      	movs	r3, r0
   18f80:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18f82:	6a3b      	ldr	r3, [r7, #32]
   18f84:	2b00      	cmp	r3, #0
   18f86:	d01a      	beq.n	18fbe <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18f88:	6a3b      	ldr	r3, [r7, #32]
   18f8a:	2226      	movs	r2, #38	; 0x26
   18f8c:	18ba      	adds	r2, r7, r2
   18f8e:	8812      	ldrh	r2, [r2, #0]
   18f90:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   18f92:	6a3b      	ldr	r3, [r7, #32]
   18f94:	2225      	movs	r2, #37	; 0x25
   18f96:	18ba      	adds	r2, r7, r2
   18f98:	7812      	ldrb	r2, [r2, #0]
   18f9a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18f9c:	68fb      	ldr	r3, [r7, #12]
   18f9e:	b2db      	uxtb	r3, r3
   18fa0:	3301      	adds	r3, #1
   18fa2:	b2da      	uxtb	r2, r3
   18fa4:	6a3b      	ldr	r3, [r7, #32]
   18fa6:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   18fa8:	68fb      	ldr	r3, [r7, #12]
   18faa:	b2da      	uxtb	r2, r3
   18fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fae:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   18fb0:	4b11      	ldr	r3, [pc, #68]	; (18ff8 <vTraceStoreMemMangEvent+0x14c>)
   18fb2:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   18fb4:	4b09      	ldr	r3, [pc, #36]	; (18fdc <vTraceStoreMemMangEvent+0x130>)
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	4a0a      	ldr	r2, [pc, #40]	; (18fe4 <vTraceStoreMemMangEvent+0x138>)
   18fba:	6812      	ldr	r2, [r2, #0]
   18fbc:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   18fbe:	4b08      	ldr	r3, [pc, #32]	; (18fe0 <vTraceStoreMemMangEvent+0x134>)
   18fc0:	681b      	ldr	r3, [r3, #0]
   18fc2:	1e5a      	subs	r2, r3, #1
   18fc4:	4b06      	ldr	r3, [pc, #24]	; (18fe0 <vTraceStoreMemMangEvent+0x134>)
   18fc6:	601a      	str	r2, [r3, #0]
   18fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18fca:	617b      	str	r3, [r7, #20]
   18fcc:	697b      	ldr	r3, [r7, #20]
   18fce:	f383 8810 	msr	PRIMASK, r3
   18fd2:	e000      	b.n	18fd6 <vTraceStoreMemMangEvent+0x12a>
		return;
   18fd4:	46c0      	nop			; (mov r8, r8)
}
   18fd6:	46bd      	mov	sp, r7
   18fd8:	b00e      	add	sp, #56	; 0x38
   18fda:	bd80      	pop	{r7, pc}
   18fdc:	20000df0 	.word	0x20000df0
   18fe0:	20000d48 	.word	0x20000d48
   18fe4:	20000d5c 	.word	0x20000d5c
   18fe8:	0001a0b5 	.word	0x0001a0b5
   18fec:	0000ffff 	.word	0x0000ffff
   18ff0:	00019279 	.word	0x00019279
   18ff4:	00019a59 	.word	0x00019a59
   18ff8:	0001a05d 	.word	0x0001a05d

00018ffc <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   18ffc:	b590      	push	{r4, r7, lr}
   18ffe:	b08b      	sub	sp, #44	; 0x2c
   19000:	af00      	add	r7, sp, #0
   19002:	60f8      	str	r0, [r7, #12]
   19004:	607a      	str	r2, [r7, #4]
   19006:	230b      	movs	r3, #11
   19008:	18fb      	adds	r3, r7, r3
   1900a:	1c0a      	adds	r2, r1, #0
   1900c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1900e:	68fb      	ldr	r3, [r7, #12]
   19010:	2bfe      	cmp	r3, #254	; 0xfe
   19012:	d904      	bls.n	1901e <prvTraceStoreKernelCall+0x22>
   19014:	4b39      	ldr	r3, [pc, #228]	; (190fc <prvTraceStoreKernelCall+0x100>)
   19016:	0018      	movs	r0, r3
   19018:	4b39      	ldr	r3, [pc, #228]	; (19100 <prvTraceStoreKernelCall+0x104>)
   1901a:	4798      	blx	r3
   1901c:	e06b      	b.n	190f6 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1901e:	230b      	movs	r3, #11
   19020:	18fb      	adds	r3, r7, r3
   19022:	781b      	ldrb	r3, [r3, #0]
   19024:	2b08      	cmp	r3, #8
   19026:	d904      	bls.n	19032 <prvTraceStoreKernelCall+0x36>
   19028:	4b36      	ldr	r3, [pc, #216]	; (19104 <prvTraceStoreKernelCall+0x108>)
   1902a:	0018      	movs	r0, r3
   1902c:	4b34      	ldr	r3, [pc, #208]	; (19100 <prvTraceStoreKernelCall+0x104>)
   1902e:	4798      	blx	r3
   19030:	e061      	b.n	190f6 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   19032:	4b35      	ldr	r3, [pc, #212]	; (19108 <prvTraceStoreKernelCall+0x10c>)
   19034:	681a      	ldr	r2, [r3, #0]
   19036:	230b      	movs	r3, #11
   19038:	18fb      	adds	r3, r7, r3
   1903a:	781b      	ldrb	r3, [r3, #0]
   1903c:	2164      	movs	r1, #100	; 0x64
   1903e:	18d3      	adds	r3, r2, r3
   19040:	185b      	adds	r3, r3, r1
   19042:	781b      	ldrb	r3, [r3, #0]
   19044:	001a      	movs	r2, r3
   19046:	687b      	ldr	r3, [r7, #4]
   19048:	429a      	cmp	r2, r3
   1904a:	d204      	bcs.n	19056 <prvTraceStoreKernelCall+0x5a>
   1904c:	4b2f      	ldr	r3, [pc, #188]	; (1910c <prvTraceStoreKernelCall+0x110>)
   1904e:	0018      	movs	r0, r3
   19050:	4b2b      	ldr	r3, [pc, #172]	; (19100 <prvTraceStoreKernelCall+0x104>)
   19052:	4798      	blx	r3
   19054:	e04f      	b.n	190f6 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   19056:	4b2e      	ldr	r3, [pc, #184]	; (19110 <prvTraceStoreKernelCall+0x114>)
   19058:	681b      	ldr	r3, [r3, #0]
   1905a:	2b00      	cmp	r3, #0
   1905c:	d004      	beq.n	19068 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1905e:	4b2d      	ldr	r3, [pc, #180]	; (19114 <prvTraceStoreKernelCall+0x118>)
   19060:	0018      	movs	r0, r3
   19062:	4b27      	ldr	r3, [pc, #156]	; (19100 <prvTraceStoreKernelCall+0x104>)
   19064:	4798      	blx	r3
		return;
   19066:	e046      	b.n	190f6 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   19068:	4b2b      	ldr	r3, [pc, #172]	; (19118 <prvTraceStoreKernelCall+0x11c>)
   1906a:	781b      	ldrb	r3, [r3, #0]
   1906c:	2b00      	cmp	r3, #0
   1906e:	d041      	beq.n	190f4 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19070:	f3ef 8310 	mrs	r3, PRIMASK
   19074:	617b      	str	r3, [r7, #20]
  return(result);
   19076:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   19078:	627b      	str	r3, [r7, #36]	; 0x24
   1907a:	2301      	movs	r3, #1
   1907c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1907e:	69bb      	ldr	r3, [r7, #24]
   19080:	f383 8810 	msr	PRIMASK, r3
   19084:	4b22      	ldr	r3, [pc, #136]	; (19110 <prvTraceStoreKernelCall+0x114>)
   19086:	681b      	ldr	r3, [r3, #0]
   19088:	1c5a      	adds	r2, r3, #1
   1908a:	4b21      	ldr	r3, [pc, #132]	; (19110 <prvTraceStoreKernelCall+0x114>)
   1908c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1908e:	4b1e      	ldr	r3, [pc, #120]	; (19108 <prvTraceStoreKernelCall+0x10c>)
   19090:	681b      	ldr	r3, [r3, #0]
   19092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19094:	2b00      	cmp	r3, #0
   19096:	d022      	beq.n	190de <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19098:	2322      	movs	r3, #34	; 0x22
   1909a:	18fc      	adds	r4, r7, r3
   1909c:	4b1f      	ldr	r3, [pc, #124]	; (1911c <prvTraceStoreKernelCall+0x120>)
   1909e:	0018      	movs	r0, r3
   190a0:	4b1f      	ldr	r3, [pc, #124]	; (19120 <prvTraceStoreKernelCall+0x124>)
   190a2:	4798      	blx	r3
   190a4:	0003      	movs	r3, r0
   190a6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   190a8:	2321      	movs	r3, #33	; 0x21
   190aa:	18fb      	adds	r3, r7, r3
   190ac:	687a      	ldr	r2, [r7, #4]
   190ae:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   190b0:	4b1c      	ldr	r3, [pc, #112]	; (19124 <prvTraceStoreKernelCall+0x128>)
   190b2:	4798      	blx	r3
   190b4:	0003      	movs	r3, r0
   190b6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   190b8:	69fb      	ldr	r3, [r7, #28]
   190ba:	2b00      	cmp	r3, #0
   190bc:	d00f      	beq.n	190de <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   190be:	69fb      	ldr	r3, [r7, #28]
   190c0:	2222      	movs	r2, #34	; 0x22
   190c2:	18ba      	adds	r2, r7, r2
   190c4:	8812      	ldrh	r2, [r2, #0]
   190c6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   190c8:	68fb      	ldr	r3, [r7, #12]
   190ca:	b2da      	uxtb	r2, r3
   190cc:	69fb      	ldr	r3, [r7, #28]
   190ce:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   190d0:	69fb      	ldr	r3, [r7, #28]
   190d2:	2221      	movs	r2, #33	; 0x21
   190d4:	18ba      	adds	r2, r7, r2
   190d6:	7812      	ldrb	r2, [r2, #0]
   190d8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   190da:	4b13      	ldr	r3, [pc, #76]	; (19128 <prvTraceStoreKernelCall+0x12c>)
   190dc:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   190de:	4b0c      	ldr	r3, [pc, #48]	; (19110 <prvTraceStoreKernelCall+0x114>)
   190e0:	681b      	ldr	r3, [r3, #0]
   190e2:	1e5a      	subs	r2, r3, #1
   190e4:	4b0a      	ldr	r3, [pc, #40]	; (19110 <prvTraceStoreKernelCall+0x114>)
   190e6:	601a      	str	r2, [r3, #0]
   190e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   190ea:	613b      	str	r3, [r7, #16]
   190ec:	693b      	ldr	r3, [r7, #16]
   190ee:	f383 8810 	msr	PRIMASK, r3
   190f2:	e000      	b.n	190f6 <prvTraceStoreKernelCall+0xfa>
		return;
   190f4:	46c0      	nop			; (mov r8, r8)
}
   190f6:	46bd      	mov	sp, r7
   190f8:	b00b      	add	sp, #44	; 0x2c
   190fa:	bd90      	pop	{r4, r7, pc}
   190fc:	00037cc4 	.word	0x00037cc4
   19100:	00019ea1 	.word	0x00019ea1
   19104:	00037cfc 	.word	0x00037cfc
   19108:	20000df0 	.word	0x20000df0
   1910c:	00037d44 	.word	0x00037d44
   19110:	20000d48 	.word	0x20000d48
   19114:	00037d8c 	.word	0x00037d8c
   19118:	20000d54 	.word	0x20000d54
   1911c:	0000ffff 	.word	0x0000ffff
   19120:	0001a0b5 	.word	0x0001a0b5
   19124:	00019a59 	.word	0x00019a59
   19128:	0001a05d 	.word	0x0001a05d

0001912c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1912c:	b580      	push	{r7, lr}
   1912e:	b08a      	sub	sp, #40	; 0x28
   19130:	af00      	add	r7, sp, #0
   19132:	60f8      	str	r0, [r7, #12]
   19134:	607a      	str	r2, [r7, #4]
   19136:	603b      	str	r3, [r7, #0]
   19138:	230b      	movs	r3, #11
   1913a:	18fb      	adds	r3, r7, r3
   1913c:	1c0a      	adds	r2, r1, #0
   1913e:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   19140:	68fb      	ldr	r3, [r7, #12]
   19142:	2bfe      	cmp	r3, #254	; 0xfe
   19144:	d904      	bls.n	19150 <prvTraceStoreKernelCallWithParam+0x24>
   19146:	4b40      	ldr	r3, [pc, #256]	; (19248 <prvTraceStoreKernelCallWithParam+0x11c>)
   19148:	0018      	movs	r0, r3
   1914a:	4b40      	ldr	r3, [pc, #256]	; (1924c <prvTraceStoreKernelCallWithParam+0x120>)
   1914c:	4798      	blx	r3
   1914e:	e077      	b.n	19240 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19150:	230b      	movs	r3, #11
   19152:	18fb      	adds	r3, r7, r3
   19154:	781b      	ldrb	r3, [r3, #0]
   19156:	2b08      	cmp	r3, #8
   19158:	d904      	bls.n	19164 <prvTraceStoreKernelCallWithParam+0x38>
   1915a:	4b3d      	ldr	r3, [pc, #244]	; (19250 <prvTraceStoreKernelCallWithParam+0x124>)
   1915c:	0018      	movs	r0, r3
   1915e:	4b3b      	ldr	r3, [pc, #236]	; (1924c <prvTraceStoreKernelCallWithParam+0x120>)
   19160:	4798      	blx	r3
   19162:	e06d      	b.n	19240 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19164:	4b3b      	ldr	r3, [pc, #236]	; (19254 <prvTraceStoreKernelCallWithParam+0x128>)
   19166:	681a      	ldr	r2, [r3, #0]
   19168:	230b      	movs	r3, #11
   1916a:	18fb      	adds	r3, r7, r3
   1916c:	781b      	ldrb	r3, [r3, #0]
   1916e:	2164      	movs	r1, #100	; 0x64
   19170:	18d3      	adds	r3, r2, r3
   19172:	185b      	adds	r3, r3, r1
   19174:	781b      	ldrb	r3, [r3, #0]
   19176:	001a      	movs	r2, r3
   19178:	687b      	ldr	r3, [r7, #4]
   1917a:	429a      	cmp	r2, r3
   1917c:	d204      	bcs.n	19188 <prvTraceStoreKernelCallWithParam+0x5c>
   1917e:	4b36      	ldr	r3, [pc, #216]	; (19258 <prvTraceStoreKernelCallWithParam+0x12c>)
   19180:	0018      	movs	r0, r3
   19182:	4b32      	ldr	r3, [pc, #200]	; (1924c <prvTraceStoreKernelCallWithParam+0x120>)
   19184:	4798      	blx	r3
   19186:	e05b      	b.n	19240 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19188:	4b34      	ldr	r3, [pc, #208]	; (1925c <prvTraceStoreKernelCallWithParam+0x130>)
   1918a:	681b      	ldr	r3, [r3, #0]
   1918c:	2b00      	cmp	r3, #0
   1918e:	d004      	beq.n	1919a <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19190:	4b33      	ldr	r3, [pc, #204]	; (19260 <prvTraceStoreKernelCallWithParam+0x134>)
   19192:	0018      	movs	r0, r3
   19194:	4b2d      	ldr	r3, [pc, #180]	; (1924c <prvTraceStoreKernelCallWithParam+0x120>)
   19196:	4798      	blx	r3
		return;
   19198:	e052      	b.n	19240 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1919a:	f3ef 8310 	mrs	r3, PRIMASK
   1919e:	617b      	str	r3, [r7, #20]
  return(result);
   191a0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   191a2:	627b      	str	r3, [r7, #36]	; 0x24
   191a4:	2301      	movs	r3, #1
   191a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   191a8:	69bb      	ldr	r3, [r7, #24]
   191aa:	f383 8810 	msr	PRIMASK, r3
   191ae:	4b2b      	ldr	r3, [pc, #172]	; (1925c <prvTraceStoreKernelCallWithParam+0x130>)
   191b0:	681b      	ldr	r3, [r3, #0]
   191b2:	1c5a      	adds	r2, r3, #1
   191b4:	4b29      	ldr	r3, [pc, #164]	; (1925c <prvTraceStoreKernelCallWithParam+0x130>)
   191b6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   191b8:	4b26      	ldr	r3, [pc, #152]	; (19254 <prvTraceStoreKernelCallWithParam+0x128>)
   191ba:	681b      	ldr	r3, [r3, #0]
   191bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   191be:	2b00      	cmp	r3, #0
   191c0:	d034      	beq.n	1922c <prvTraceStoreKernelCallWithParam+0x100>
   191c2:	4b28      	ldr	r3, [pc, #160]	; (19264 <prvTraceStoreKernelCallWithParam+0x138>)
   191c4:	781b      	ldrb	r3, [r3, #0]
   191c6:	2b00      	cmp	r3, #0
   191c8:	d030      	beq.n	1922c <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   191ca:	20ff      	movs	r0, #255	; 0xff
   191cc:	4b26      	ldr	r3, [pc, #152]	; (19268 <prvTraceStoreKernelCallWithParam+0x13c>)
   191ce:	4798      	blx	r3
   191d0:	0003      	movs	r3, r0
   191d2:	001a      	movs	r2, r3
   191d4:	2323      	movs	r3, #35	; 0x23
   191d6:	18fb      	adds	r3, r7, r3
   191d8:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   191da:	683b      	ldr	r3, [r7, #0]
   191dc:	0019      	movs	r1, r3
   191de:	20ff      	movs	r0, #255	; 0xff
   191e0:	4b22      	ldr	r3, [pc, #136]	; (1926c <prvTraceStoreKernelCallWithParam+0x140>)
   191e2:	4798      	blx	r3
   191e4:	0002      	movs	r2, r0
   191e6:	2322      	movs	r3, #34	; 0x22
   191e8:	18fb      	adds	r3, r7, r3
   191ea:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   191ec:	2321      	movs	r3, #33	; 0x21
   191ee:	18fb      	adds	r3, r7, r3
   191f0:	687a      	ldr	r2, [r7, #4]
   191f2:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   191f4:	4b1e      	ldr	r3, [pc, #120]	; (19270 <prvTraceStoreKernelCallWithParam+0x144>)
   191f6:	4798      	blx	r3
   191f8:	0003      	movs	r3, r0
   191fa:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   191fc:	69fb      	ldr	r3, [r7, #28]
   191fe:	2b00      	cmp	r3, #0
   19200:	d014      	beq.n	1922c <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   19202:	69fb      	ldr	r3, [r7, #28]
   19204:	2223      	movs	r2, #35	; 0x23
   19206:	18ba      	adds	r2, r7, r2
   19208:	7812      	ldrb	r2, [r2, #0]
   1920a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1920c:	68fb      	ldr	r3, [r7, #12]
   1920e:	b2da      	uxtb	r2, r3
   19210:	69fb      	ldr	r3, [r7, #28]
   19212:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19214:	69fb      	ldr	r3, [r7, #28]
   19216:	2221      	movs	r2, #33	; 0x21
   19218:	18ba      	adds	r2, r7, r2
   1921a:	7812      	ldrb	r2, [r2, #0]
   1921c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1921e:	69fb      	ldr	r3, [r7, #28]
   19220:	2222      	movs	r2, #34	; 0x22
   19222:	18ba      	adds	r2, r7, r2
   19224:	7812      	ldrb	r2, [r2, #0]
   19226:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19228:	4b12      	ldr	r3, [pc, #72]	; (19274 <prvTraceStoreKernelCallWithParam+0x148>)
   1922a:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1922c:	4b0b      	ldr	r3, [pc, #44]	; (1925c <prvTraceStoreKernelCallWithParam+0x130>)
   1922e:	681b      	ldr	r3, [r3, #0]
   19230:	1e5a      	subs	r2, r3, #1
   19232:	4b0a      	ldr	r3, [pc, #40]	; (1925c <prvTraceStoreKernelCallWithParam+0x130>)
   19234:	601a      	str	r2, [r3, #0]
   19236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19238:	613b      	str	r3, [r7, #16]
   1923a:	693b      	ldr	r3, [r7, #16]
   1923c:	f383 8810 	msr	PRIMASK, r3
}
   19240:	46bd      	mov	sp, r7
   19242:	b00a      	add	sp, #40	; 0x28
   19244:	bd80      	pop	{r7, pc}
   19246:	46c0      	nop			; (mov r8, r8)
   19248:	00037dc4 	.word	0x00037dc4
   1924c:	00019ea1 	.word	0x00019ea1
   19250:	00037e04 	.word	0x00037e04
   19254:	20000df0 	.word	0x20000df0
   19258:	00037e54 	.word	0x00037e54
   1925c:	20000d48 	.word	0x20000d48
   19260:	00037ea4 	.word	0x00037ea4
   19264:	20000d54 	.word	0x20000d54
   19268:	0001a0b5 	.word	0x0001a0b5
   1926c:	00019279 	.word	0x00019279
   19270:	00019a59 	.word	0x00019a59
   19274:	0001a05d 	.word	0x0001a05d

00019278 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19278:	b580      	push	{r7, lr}
   1927a:	b084      	sub	sp, #16
   1927c:	af00      	add	r7, sp, #0
   1927e:	6078      	str	r0, [r7, #4]
   19280:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19282:	687b      	ldr	r3, [r7, #4]
   19284:	2bff      	cmp	r3, #255	; 0xff
   19286:	d009      	beq.n	1929c <prvTraceGetParam+0x24>
   19288:	687b      	ldr	r3, [r7, #4]
   1928a:	4a19      	ldr	r2, [pc, #100]	; (192f0 <prvTraceGetParam+0x78>)
   1928c:	4293      	cmp	r3, r2
   1928e:	d005      	beq.n	1929c <prvTraceGetParam+0x24>
   19290:	4b18      	ldr	r3, [pc, #96]	; (192f4 <prvTraceGetParam+0x7c>)
   19292:	0018      	movs	r0, r3
   19294:	4b18      	ldr	r3, [pc, #96]	; (192f8 <prvTraceGetParam+0x80>)
   19296:	4798      	blx	r3
   19298:	683b      	ldr	r3, [r7, #0]
   1929a:	e024      	b.n	192e6 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1929c:	683a      	ldr	r2, [r7, #0]
   1929e:	687b      	ldr	r3, [r7, #4]
   192a0:	429a      	cmp	r2, r3
   192a2:	d801      	bhi.n	192a8 <prvTraceGetParam+0x30>
	{
		return param;
   192a4:	683b      	ldr	r3, [r7, #0]
   192a6:	e01e      	b.n	192e6 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   192a8:	4b14      	ldr	r3, [pc, #80]	; (192fc <prvTraceGetParam+0x84>)
   192aa:	4798      	blx	r3
   192ac:	0003      	movs	r3, r0
   192ae:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   192b0:	68fb      	ldr	r3, [r7, #12]
   192b2:	2b00      	cmp	r3, #0
   192b4:	d014      	beq.n	192e0 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   192b6:	68fb      	ldr	r3, [r7, #12]
   192b8:	2201      	movs	r2, #1
   192ba:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   192bc:	687b      	ldr	r3, [r7, #4]
   192be:	43db      	mvns	r3, r3
   192c0:	683a      	ldr	r2, [r7, #0]
   192c2:	4013      	ands	r3, r2
   192c4:	0a1b      	lsrs	r3, r3, #8
   192c6:	b2da      	uxtb	r2, r3
   192c8:	68fb      	ldr	r3, [r7, #12]
   192ca:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   192cc:	687b      	ldr	r3, [r7, #4]
   192ce:	43db      	mvns	r3, r3
   192d0:	683a      	ldr	r2, [r7, #0]
   192d2:	4013      	ands	r3, r2
   192d4:	0c1b      	lsrs	r3, r3, #16
   192d6:	b29a      	uxth	r2, r3
   192d8:	68fb      	ldr	r3, [r7, #12]
   192da:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   192dc:	4b08      	ldr	r3, [pc, #32]	; (19300 <prvTraceGetParam+0x88>)
   192de:	4798      	blx	r3
		}

		return param & param_max;
   192e0:	683b      	ldr	r3, [r7, #0]
   192e2:	687a      	ldr	r2, [r7, #4]
   192e4:	4013      	ands	r3, r2
	}
}
   192e6:	0018      	movs	r0, r3
   192e8:	46bd      	mov	sp, r7
   192ea:	b004      	add	sp, #16
   192ec:	bd80      	pop	{r7, pc}
   192ee:	46c0      	nop			; (mov r8, r8)
   192f0:	0000ffff 	.word	0x0000ffff
   192f4:	00037edc 	.word	0x00037edc
   192f8:	00019ea1 	.word	0x00019ea1
   192fc:	00019a59 	.word	0x00019a59
   19300:	0001a05d 	.word	0x0001a05d

00019304 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19304:	b580      	push	{r7, lr}
   19306:	b08a      	sub	sp, #40	; 0x28
   19308:	af00      	add	r7, sp, #0
   1930a:	6078      	str	r0, [r7, #4]
   1930c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1930e:	2326      	movs	r3, #38	; 0x26
   19310:	18fb      	adds	r3, r7, r3
   19312:	2200      	movs	r2, #0
   19314:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19316:	687b      	ldr	r3, [r7, #4]
   19318:	2bfe      	cmp	r3, #254	; 0xfe
   1931a:	d904      	bls.n	19326 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1931c:	4b2d      	ldr	r3, [pc, #180]	; (193d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1931e:	0018      	movs	r0, r3
   19320:	4b2d      	ldr	r3, [pc, #180]	; (193d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19322:	4798      	blx	r3
   19324:	e053      	b.n	193ce <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19326:	4b2d      	ldr	r3, [pc, #180]	; (193dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19328:	681b      	ldr	r3, [r3, #0]
   1932a:	2b00      	cmp	r3, #0
   1932c:	d004      	beq.n	19338 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1932e:	4b2c      	ldr	r3, [pc, #176]	; (193e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19330:	0018      	movs	r0, r3
   19332:	4b29      	ldr	r3, [pc, #164]	; (193d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19334:	4798      	blx	r3
		return;
   19336:	e04a      	b.n	193ce <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19338:	f3ef 8310 	mrs	r3, PRIMASK
   1933c:	613b      	str	r3, [r7, #16]
  return(result);
   1933e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19340:	623b      	str	r3, [r7, #32]
   19342:	2301      	movs	r3, #1
   19344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19346:	697b      	ldr	r3, [r7, #20]
   19348:	f383 8810 	msr	PRIMASK, r3
   1934c:	4b23      	ldr	r3, [pc, #140]	; (193dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1934e:	681b      	ldr	r3, [r3, #0]
   19350:	1c5a      	adds	r2, r3, #1
   19352:	4b22      	ldr	r3, [pc, #136]	; (193dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19354:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19356:	4b23      	ldr	r3, [pc, #140]	; (193e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19358:	681b      	ldr	r3, [r3, #0]
   1935a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1935c:	2b00      	cmp	r3, #0
   1935e:	d02c      	beq.n	193ba <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19360:	4b21      	ldr	r3, [pc, #132]	; (193e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19362:	781b      	ldrb	r3, [r3, #0]
   19364:	2b00      	cmp	r3, #0
   19366:	d028      	beq.n	193ba <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19368:	20ff      	movs	r0, #255	; 0xff
   1936a:	4b20      	ldr	r3, [pc, #128]	; (193ec <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1936c:	4798      	blx	r3
   1936e:	0003      	movs	r3, r0
   19370:	001a      	movs	r2, r3
   19372:	231f      	movs	r3, #31
   19374:	18fb      	adds	r3, r7, r3
   19376:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19378:	683b      	ldr	r3, [r7, #0]
   1937a:	4a1d      	ldr	r2, [pc, #116]	; (193f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1937c:	0019      	movs	r1, r3
   1937e:	0010      	movs	r0, r2
   19380:	4b1c      	ldr	r3, [pc, #112]	; (193f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19382:	4798      	blx	r3
   19384:	0002      	movs	r2, r0
   19386:	2326      	movs	r3, #38	; 0x26
   19388:	18fb      	adds	r3, r7, r3
   1938a:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1938c:	4b1a      	ldr	r3, [pc, #104]	; (193f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1938e:	4798      	blx	r3
   19390:	0003      	movs	r3, r0
   19392:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19394:	69bb      	ldr	r3, [r7, #24]
   19396:	2b00      	cmp	r3, #0
   19398:	d00f      	beq.n	193ba <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1939a:	69bb      	ldr	r3, [r7, #24]
   1939c:	221f      	movs	r2, #31
   1939e:	18ba      	adds	r2, r7, r2
   193a0:	7812      	ldrb	r2, [r2, #0]
   193a2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   193a4:	687b      	ldr	r3, [r7, #4]
   193a6:	b2da      	uxtb	r2, r3
   193a8:	69bb      	ldr	r3, [r7, #24]
   193aa:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   193ac:	69bb      	ldr	r3, [r7, #24]
   193ae:	2226      	movs	r2, #38	; 0x26
   193b0:	18ba      	adds	r2, r7, r2
   193b2:	8812      	ldrh	r2, [r2, #0]
   193b4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   193b6:	4b11      	ldr	r3, [pc, #68]	; (193fc <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   193b8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   193ba:	4b08      	ldr	r3, [pc, #32]	; (193dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   193bc:	681b      	ldr	r3, [r3, #0]
   193be:	1e5a      	subs	r2, r3, #1
   193c0:	4b06      	ldr	r3, [pc, #24]	; (193dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   193c2:	601a      	str	r2, [r3, #0]
   193c4:	6a3b      	ldr	r3, [r7, #32]
   193c6:	60fb      	str	r3, [r7, #12]
   193c8:	68fb      	ldr	r3, [r7, #12]
   193ca:	f383 8810 	msr	PRIMASK, r3
}
   193ce:	46bd      	mov	sp, r7
   193d0:	b00a      	add	sp, #40	; 0x28
   193d2:	bd80      	pop	{r7, pc}
   193d4:	00037f18 	.word	0x00037f18
   193d8:	00019ea1 	.word	0x00019ea1
   193dc:	20000d48 	.word	0x20000d48
   193e0:	00037f70 	.word	0x00037f70
   193e4:	20000df0 	.word	0x20000df0
   193e8:	20000d54 	.word	0x20000d54
   193ec:	0001a0b5 	.word	0x0001a0b5
   193f0:	0000ffff 	.word	0x0000ffff
   193f4:	00019279 	.word	0x00019279
   193f8:	00019a59 	.word	0x00019a59
   193fc:	0001a05d 	.word	0x0001a05d

00019400 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19400:	b590      	push	{r4, r7, lr}
   19402:	b089      	sub	sp, #36	; 0x24
   19404:	af00      	add	r7, sp, #0
   19406:	0002      	movs	r2, r0
   19408:	1dfb      	adds	r3, r7, #7
   1940a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1940c:	1dfb      	adds	r3, r7, #7
   1940e:	781b      	ldrb	r3, [r3, #0]
   19410:	2b0f      	cmp	r3, #15
   19412:	d904      	bls.n	1941e <prvTraceStoreTaskswitch+0x1e>
   19414:	4b34      	ldr	r3, [pc, #208]	; (194e8 <prvTraceStoreTaskswitch+0xe8>)
   19416:	0018      	movs	r0, r3
   19418:	4b34      	ldr	r3, [pc, #208]	; (194ec <prvTraceStoreTaskswitch+0xec>)
   1941a:	4798      	blx	r3
   1941c:	e061      	b.n	194e2 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1941e:	f3ef 8310 	mrs	r3, PRIMASK
   19422:	60fb      	str	r3, [r7, #12]
  return(result);
   19424:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19426:	61fb      	str	r3, [r7, #28]
   19428:	2301      	movs	r3, #1
   1942a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1942c:	693b      	ldr	r3, [r7, #16]
   1942e:	f383 8810 	msr	PRIMASK, r3
   19432:	4b2f      	ldr	r3, [pc, #188]	; (194f0 <prvTraceStoreTaskswitch+0xf0>)
   19434:	681b      	ldr	r3, [r3, #0]
   19436:	1c5a      	adds	r2, r3, #1
   19438:	4b2d      	ldr	r3, [pc, #180]	; (194f0 <prvTraceStoreTaskswitch+0xf0>)
   1943a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1943c:	4b2d      	ldr	r3, [pc, #180]	; (194f4 <prvTraceStoreTaskswitch+0xf4>)
   1943e:	781b      	ldrb	r3, [r3, #0]
   19440:	1dfa      	adds	r2, r7, #7
   19442:	7812      	ldrb	r2, [r2, #0]
   19444:	429a      	cmp	r2, r3
   19446:	d042      	beq.n	194ce <prvTraceStoreTaskswitch+0xce>
   19448:	4b2b      	ldr	r3, [pc, #172]	; (194f8 <prvTraceStoreTaskswitch+0xf8>)
   1944a:	681b      	ldr	r3, [r3, #0]
   1944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1944e:	2b00      	cmp	r3, #0
   19450:	d03d      	beq.n	194ce <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19452:	4b2a      	ldr	r3, [pc, #168]	; (194fc <prvTraceStoreTaskswitch+0xfc>)
   19454:	2200      	movs	r2, #0
   19456:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19458:	231a      	movs	r3, #26
   1945a:	18fc      	adds	r4, r7, r3
   1945c:	4b28      	ldr	r3, [pc, #160]	; (19500 <prvTraceStoreTaskswitch+0x100>)
   1945e:	0018      	movs	r0, r3
   19460:	4b28      	ldr	r3, [pc, #160]	; (19504 <prvTraceStoreTaskswitch+0x104>)
   19462:	4798      	blx	r3
   19464:	0003      	movs	r3, r0
   19466:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19468:	4b22      	ldr	r3, [pc, #136]	; (194f4 <prvTraceStoreTaskswitch+0xf4>)
   1946a:	1dfa      	adds	r2, r7, #7
   1946c:	7812      	ldrb	r2, [r2, #0]
   1946e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19470:	2319      	movs	r3, #25
   19472:	18fb      	adds	r3, r7, r3
   19474:	4a1f      	ldr	r2, [pc, #124]	; (194f4 <prvTraceStoreTaskswitch+0xf4>)
   19476:	7812      	ldrb	r2, [r2, #0]
   19478:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1947a:	4b23      	ldr	r3, [pc, #140]	; (19508 <prvTraceStoreTaskswitch+0x108>)
   1947c:	4798      	blx	r3
   1947e:	0003      	movs	r3, r0
   19480:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19482:	697b      	ldr	r3, [r7, #20]
   19484:	2b00      	cmp	r3, #0
   19486:	d022      	beq.n	194ce <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19488:	4b1a      	ldr	r3, [pc, #104]	; (194f4 <prvTraceStoreTaskswitch+0xf4>)
   1948a:	781b      	ldrb	r3, [r3, #0]
   1948c:	0019      	movs	r1, r3
   1948e:	2003      	movs	r0, #3
   19490:	4b1e      	ldr	r3, [pc, #120]	; (1950c <prvTraceStoreTaskswitch+0x10c>)
   19492:	4798      	blx	r3
   19494:	0003      	movs	r3, r0
   19496:	2b01      	cmp	r3, #1
   19498:	d103      	bne.n	194a2 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1949a:	697b      	ldr	r3, [r7, #20]
   1949c:	2207      	movs	r2, #7
   1949e:	701a      	strb	r2, [r3, #0]
   194a0:	e002      	b.n	194a8 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   194a2:	697b      	ldr	r3, [r7, #20]
   194a4:	2206      	movs	r2, #6
   194a6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   194a8:	697b      	ldr	r3, [r7, #20]
   194aa:	221a      	movs	r2, #26
   194ac:	18ba      	adds	r2, r7, r2
   194ae:	8812      	ldrh	r2, [r2, #0]
   194b0:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   194b2:	697b      	ldr	r3, [r7, #20]
   194b4:	2219      	movs	r2, #25
   194b6:	18ba      	adds	r2, r7, r2
   194b8:	7812      	ldrb	r2, [r2, #0]
   194ba:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   194bc:	4b0d      	ldr	r3, [pc, #52]	; (194f4 <prvTraceStoreTaskswitch+0xf4>)
   194be:	781b      	ldrb	r3, [r3, #0]
   194c0:	2201      	movs	r2, #1
   194c2:	0019      	movs	r1, r3
   194c4:	2003      	movs	r0, #3
   194c6:	4b12      	ldr	r3, [pc, #72]	; (19510 <prvTraceStoreTaskswitch+0x110>)
   194c8:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   194ca:	4b12      	ldr	r3, [pc, #72]	; (19514 <prvTraceStoreTaskswitch+0x114>)
   194cc:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   194ce:	4b08      	ldr	r3, [pc, #32]	; (194f0 <prvTraceStoreTaskswitch+0xf0>)
   194d0:	681b      	ldr	r3, [r3, #0]
   194d2:	1e5a      	subs	r2, r3, #1
   194d4:	4b06      	ldr	r3, [pc, #24]	; (194f0 <prvTraceStoreTaskswitch+0xf0>)
   194d6:	601a      	str	r2, [r3, #0]
   194d8:	69fb      	ldr	r3, [r7, #28]
   194da:	60bb      	str	r3, [r7, #8]
   194dc:	68bb      	ldr	r3, [r7, #8]
   194de:	f383 8810 	msr	PRIMASK, r3
}
   194e2:	46bd      	mov	sp, r7
   194e4:	b009      	add	sp, #36	; 0x24
   194e6:	bd90      	pop	{r4, r7, pc}
   194e8:	00037fa8 	.word	0x00037fa8
   194ec:	00019ea1 	.word	0x00019ea1
   194f0:	20000d48 	.word	0x20000d48
   194f4:	20000d54 	.word	0x20000d54
   194f8:	20000df0 	.word	0x20000df0
   194fc:	20000d34 	.word	0x20000d34
   19500:	0000ffff 	.word	0x0000ffff
   19504:	0001a0b5 	.word	0x0001a0b5
   19508:	00019a59 	.word	0x00019a59
   1950c:	000196fd 	.word	0x000196fd
   19510:	00019659 	.word	0x00019659
   19514:	0001a05d 	.word	0x0001a05d

00019518 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19518:	b590      	push	{r4, r7, lr}
   1951a:	b083      	sub	sp, #12
   1951c:	af00      	add	r7, sp, #0
   1951e:	0004      	movs	r4, r0
   19520:	0008      	movs	r0, r1
   19522:	0011      	movs	r1, r2
   19524:	1dfb      	adds	r3, r7, #7
   19526:	1c22      	adds	r2, r4, #0
   19528:	701a      	strb	r2, [r3, #0]
   1952a:	1dbb      	adds	r3, r7, #6
   1952c:	1c02      	adds	r2, r0, #0
   1952e:	701a      	strb	r2, [r3, #0]
   19530:	1d7b      	adds	r3, r7, #5
   19532:	1c0a      	adds	r2, r1, #0
   19534:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19536:	1dfb      	adds	r3, r7, #7
   19538:	781b      	ldrb	r3, [r3, #0]
   1953a:	2b08      	cmp	r3, #8
   1953c:	d904      	bls.n	19548 <prvTraceSetPriorityProperty+0x30>
   1953e:	4b1a      	ldr	r3, [pc, #104]	; (195a8 <prvTraceSetPriorityProperty+0x90>)
   19540:	0018      	movs	r0, r3
   19542:	4b1a      	ldr	r3, [pc, #104]	; (195ac <prvTraceSetPriorityProperty+0x94>)
   19544:	4798      	blx	r3
   19546:	e02c      	b.n	195a2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19548:	4b19      	ldr	r3, [pc, #100]	; (195b0 <prvTraceSetPriorityProperty+0x98>)
   1954a:	681a      	ldr	r2, [r3, #0]
   1954c:	1dfb      	adds	r3, r7, #7
   1954e:	781b      	ldrb	r3, [r3, #0]
   19550:	2164      	movs	r1, #100	; 0x64
   19552:	18d3      	adds	r3, r2, r3
   19554:	185b      	adds	r3, r3, r1
   19556:	781b      	ldrb	r3, [r3, #0]
   19558:	1dba      	adds	r2, r7, #6
   1955a:	7812      	ldrb	r2, [r2, #0]
   1955c:	429a      	cmp	r2, r3
   1955e:	d904      	bls.n	1956a <prvTraceSetPriorityProperty+0x52>
   19560:	4b14      	ldr	r3, [pc, #80]	; (195b4 <prvTraceSetPriorityProperty+0x9c>)
   19562:	0018      	movs	r0, r3
   19564:	4b11      	ldr	r3, [pc, #68]	; (195ac <prvTraceSetPriorityProperty+0x94>)
   19566:	4798      	blx	r3
   19568:	e01b      	b.n	195a2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1956a:	4b11      	ldr	r3, [pc, #68]	; (195b0 <prvTraceSetPriorityProperty+0x98>)
   1956c:	681c      	ldr	r4, [r3, #0]
   1956e:	1dfb      	adds	r3, r7, #7
   19570:	781a      	ldrb	r2, [r3, #0]
   19572:	1dbb      	adds	r3, r7, #6
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	0011      	movs	r1, r2
   19578:	0018      	movs	r0, r3
   1957a:	4b0f      	ldr	r3, [pc, #60]	; (195b8 <prvTraceSetPriorityProperty+0xa0>)
   1957c:	4798      	blx	r3
   1957e:	0003      	movs	r3, r0
   19580:	0018      	movs	r0, r3
   19582:	4b0b      	ldr	r3, [pc, #44]	; (195b0 <prvTraceSetPriorityProperty+0x98>)
   19584:	681a      	ldr	r2, [r3, #0]
   19586:	1dfb      	adds	r3, r7, #7
   19588:	781b      	ldrb	r3, [r3, #0]
   1958a:	2170      	movs	r1, #112	; 0x70
   1958c:	18d3      	adds	r3, r2, r3
   1958e:	185b      	adds	r3, r3, r1
   19590:	781b      	ldrb	r3, [r3, #0]
   19592:	18c3      	adds	r3, r0, r3
   19594:	3301      	adds	r3, #1
   19596:	229c      	movs	r2, #156	; 0x9c
   19598:	18e3      	adds	r3, r4, r3
   1959a:	189b      	adds	r3, r3, r2
   1959c:	1d7a      	adds	r2, r7, #5
   1959e:	7812      	ldrb	r2, [r2, #0]
   195a0:	701a      	strb	r2, [r3, #0]
}
   195a2:	46bd      	mov	sp, r7
   195a4:	b003      	add	sp, #12
   195a6:	bd90      	pop	{r4, r7, pc}
   195a8:	0003813c 	.word	0x0003813c
   195ac:	00019ea1 	.word	0x00019ea1
   195b0:	20000df0 	.word	0x20000df0
   195b4:	00038188 	.word	0x00038188
   195b8:	00019aad 	.word	0x00019aad

000195bc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   195bc:	b590      	push	{r4, r7, lr}
   195be:	b083      	sub	sp, #12
   195c0:	af00      	add	r7, sp, #0
   195c2:	0002      	movs	r2, r0
   195c4:	1dfb      	adds	r3, r7, #7
   195c6:	701a      	strb	r2, [r3, #0]
   195c8:	1dbb      	adds	r3, r7, #6
   195ca:	1c0a      	adds	r2, r1, #0
   195cc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   195ce:	1dfb      	adds	r3, r7, #7
   195d0:	781b      	ldrb	r3, [r3, #0]
   195d2:	2b08      	cmp	r3, #8
   195d4:	d905      	bls.n	195e2 <prvTraceGetPriorityProperty+0x26>
   195d6:	4b1b      	ldr	r3, [pc, #108]	; (19644 <prvTraceGetPriorityProperty+0x88>)
   195d8:	0018      	movs	r0, r3
   195da:	4b1b      	ldr	r3, [pc, #108]	; (19648 <prvTraceGetPriorityProperty+0x8c>)
   195dc:	4798      	blx	r3
   195de:	2300      	movs	r3, #0
   195e0:	e02b      	b.n	1963a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   195e2:	4b1a      	ldr	r3, [pc, #104]	; (1964c <prvTraceGetPriorityProperty+0x90>)
   195e4:	681a      	ldr	r2, [r3, #0]
   195e6:	1dfb      	adds	r3, r7, #7
   195e8:	781b      	ldrb	r3, [r3, #0]
   195ea:	2164      	movs	r1, #100	; 0x64
   195ec:	18d3      	adds	r3, r2, r3
   195ee:	185b      	adds	r3, r3, r1
   195f0:	781b      	ldrb	r3, [r3, #0]
   195f2:	1dba      	adds	r2, r7, #6
   195f4:	7812      	ldrb	r2, [r2, #0]
   195f6:	429a      	cmp	r2, r3
   195f8:	d905      	bls.n	19606 <prvTraceGetPriorityProperty+0x4a>
   195fa:	4b15      	ldr	r3, [pc, #84]	; (19650 <prvTraceGetPriorityProperty+0x94>)
   195fc:	0018      	movs	r0, r3
   195fe:	4b12      	ldr	r3, [pc, #72]	; (19648 <prvTraceGetPriorityProperty+0x8c>)
   19600:	4798      	blx	r3
   19602:	2300      	movs	r3, #0
   19604:	e019      	b.n	1963a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19606:	4b11      	ldr	r3, [pc, #68]	; (1964c <prvTraceGetPriorityProperty+0x90>)
   19608:	681c      	ldr	r4, [r3, #0]
   1960a:	1dfb      	adds	r3, r7, #7
   1960c:	781a      	ldrb	r2, [r3, #0]
   1960e:	1dbb      	adds	r3, r7, #6
   19610:	781b      	ldrb	r3, [r3, #0]
   19612:	0011      	movs	r1, r2
   19614:	0018      	movs	r0, r3
   19616:	4b0f      	ldr	r3, [pc, #60]	; (19654 <prvTraceGetPriorityProperty+0x98>)
   19618:	4798      	blx	r3
   1961a:	0003      	movs	r3, r0
   1961c:	0018      	movs	r0, r3
   1961e:	4b0b      	ldr	r3, [pc, #44]	; (1964c <prvTraceGetPriorityProperty+0x90>)
   19620:	681a      	ldr	r2, [r3, #0]
   19622:	1dfb      	adds	r3, r7, #7
   19624:	781b      	ldrb	r3, [r3, #0]
   19626:	2170      	movs	r1, #112	; 0x70
   19628:	18d3      	adds	r3, r2, r3
   1962a:	185b      	adds	r3, r3, r1
   1962c:	781b      	ldrb	r3, [r3, #0]
   1962e:	18c3      	adds	r3, r0, r3
   19630:	3301      	adds	r3, #1
   19632:	229c      	movs	r2, #156	; 0x9c
   19634:	18e3      	adds	r3, r4, r3
   19636:	189b      	adds	r3, r3, r2
   19638:	781b      	ldrb	r3, [r3, #0]
}
   1963a:	0018      	movs	r0, r3
   1963c:	46bd      	mov	sp, r7
   1963e:	b003      	add	sp, #12
   19640:	bd90      	pop	{r4, r7, pc}
   19642:	46c0      	nop			; (mov r8, r8)
   19644:	000381c8 	.word	0x000381c8
   19648:	00019ea1 	.word	0x00019ea1
   1964c:	20000df0 	.word	0x20000df0
   19650:	00038214 	.word	0x00038214
   19654:	00019aad 	.word	0x00019aad

00019658 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19658:	b590      	push	{r4, r7, lr}
   1965a:	b083      	sub	sp, #12
   1965c:	af00      	add	r7, sp, #0
   1965e:	0004      	movs	r4, r0
   19660:	0008      	movs	r0, r1
   19662:	0011      	movs	r1, r2
   19664:	1dfb      	adds	r3, r7, #7
   19666:	1c22      	adds	r2, r4, #0
   19668:	701a      	strb	r2, [r3, #0]
   1966a:	1dbb      	adds	r3, r7, #6
   1966c:	1c02      	adds	r2, r0, #0
   1966e:	701a      	strb	r2, [r3, #0]
   19670:	1d7b      	adds	r3, r7, #5
   19672:	1c0a      	adds	r2, r1, #0
   19674:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19676:	1dfb      	adds	r3, r7, #7
   19678:	781b      	ldrb	r3, [r3, #0]
   1967a:	2b08      	cmp	r3, #8
   1967c:	d904      	bls.n	19688 <prvTraceSetObjectState+0x30>
   1967e:	4b1a      	ldr	r3, [pc, #104]	; (196e8 <prvTraceSetObjectState+0x90>)
   19680:	0018      	movs	r0, r3
   19682:	4b1a      	ldr	r3, [pc, #104]	; (196ec <prvTraceSetObjectState+0x94>)
   19684:	4798      	blx	r3
   19686:	e02b      	b.n	196e0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19688:	4b19      	ldr	r3, [pc, #100]	; (196f0 <prvTraceSetObjectState+0x98>)
   1968a:	681a      	ldr	r2, [r3, #0]
   1968c:	1dfb      	adds	r3, r7, #7
   1968e:	781b      	ldrb	r3, [r3, #0]
   19690:	2164      	movs	r1, #100	; 0x64
   19692:	18d3      	adds	r3, r2, r3
   19694:	185b      	adds	r3, r3, r1
   19696:	781b      	ldrb	r3, [r3, #0]
   19698:	1dba      	adds	r2, r7, #6
   1969a:	7812      	ldrb	r2, [r2, #0]
   1969c:	429a      	cmp	r2, r3
   1969e:	d904      	bls.n	196aa <prvTraceSetObjectState+0x52>
   196a0:	4b14      	ldr	r3, [pc, #80]	; (196f4 <prvTraceSetObjectState+0x9c>)
   196a2:	0018      	movs	r0, r3
   196a4:	4b11      	ldr	r3, [pc, #68]	; (196ec <prvTraceSetObjectState+0x94>)
   196a6:	4798      	blx	r3
   196a8:	e01a      	b.n	196e0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   196aa:	4b11      	ldr	r3, [pc, #68]	; (196f0 <prvTraceSetObjectState+0x98>)
   196ac:	681c      	ldr	r4, [r3, #0]
   196ae:	1dfb      	adds	r3, r7, #7
   196b0:	781a      	ldrb	r2, [r3, #0]
   196b2:	1dbb      	adds	r3, r7, #6
   196b4:	781b      	ldrb	r3, [r3, #0]
   196b6:	0011      	movs	r1, r2
   196b8:	0018      	movs	r0, r3
   196ba:	4b0f      	ldr	r3, [pc, #60]	; (196f8 <prvTraceSetObjectState+0xa0>)
   196bc:	4798      	blx	r3
   196be:	0003      	movs	r3, r0
   196c0:	0018      	movs	r0, r3
   196c2:	4b0b      	ldr	r3, [pc, #44]	; (196f0 <prvTraceSetObjectState+0x98>)
   196c4:	681a      	ldr	r2, [r3, #0]
   196c6:	1dfb      	adds	r3, r7, #7
   196c8:	781b      	ldrb	r3, [r3, #0]
   196ca:	2170      	movs	r1, #112	; 0x70
   196cc:	18d3      	adds	r3, r2, r3
   196ce:	185b      	adds	r3, r3, r1
   196d0:	781b      	ldrb	r3, [r3, #0]
   196d2:	18c3      	adds	r3, r0, r3
   196d4:	229c      	movs	r2, #156	; 0x9c
   196d6:	18e3      	adds	r3, r4, r3
   196d8:	189b      	adds	r3, r3, r2
   196da:	1d7a      	adds	r2, r7, #5
   196dc:	7812      	ldrb	r2, [r2, #0]
   196de:	701a      	strb	r2, [r3, #0]
}
   196e0:	46bd      	mov	sp, r7
   196e2:	b003      	add	sp, #12
   196e4:	bd90      	pop	{r4, r7, pc}
   196e6:	46c0      	nop			; (mov r8, r8)
   196e8:	00038254 	.word	0x00038254
   196ec:	00019ea1 	.word	0x00019ea1
   196f0:	20000df0 	.word	0x20000df0
   196f4:	00038298 	.word	0x00038298
   196f8:	00019aad 	.word	0x00019aad

000196fc <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   196fc:	b590      	push	{r4, r7, lr}
   196fe:	b083      	sub	sp, #12
   19700:	af00      	add	r7, sp, #0
   19702:	0002      	movs	r2, r0
   19704:	1dfb      	adds	r3, r7, #7
   19706:	701a      	strb	r2, [r3, #0]
   19708:	1dbb      	adds	r3, r7, #6
   1970a:	1c0a      	adds	r2, r1, #0
   1970c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1970e:	1dfb      	adds	r3, r7, #7
   19710:	781b      	ldrb	r3, [r3, #0]
   19712:	2b08      	cmp	r3, #8
   19714:	d905      	bls.n	19722 <prvTraceGetObjectState+0x26>
   19716:	4b1a      	ldr	r3, [pc, #104]	; (19780 <prvTraceGetObjectState+0x84>)
   19718:	0018      	movs	r0, r3
   1971a:	4b1a      	ldr	r3, [pc, #104]	; (19784 <prvTraceGetObjectState+0x88>)
   1971c:	4798      	blx	r3
   1971e:	2300      	movs	r3, #0
   19720:	e02a      	b.n	19778 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19722:	4b19      	ldr	r3, [pc, #100]	; (19788 <prvTraceGetObjectState+0x8c>)
   19724:	681a      	ldr	r2, [r3, #0]
   19726:	1dfb      	adds	r3, r7, #7
   19728:	781b      	ldrb	r3, [r3, #0]
   1972a:	2164      	movs	r1, #100	; 0x64
   1972c:	18d3      	adds	r3, r2, r3
   1972e:	185b      	adds	r3, r3, r1
   19730:	781b      	ldrb	r3, [r3, #0]
   19732:	1dba      	adds	r2, r7, #6
   19734:	7812      	ldrb	r2, [r2, #0]
   19736:	429a      	cmp	r2, r3
   19738:	d905      	bls.n	19746 <prvTraceGetObjectState+0x4a>
   1973a:	4b14      	ldr	r3, [pc, #80]	; (1978c <prvTraceGetObjectState+0x90>)
   1973c:	0018      	movs	r0, r3
   1973e:	4b11      	ldr	r3, [pc, #68]	; (19784 <prvTraceGetObjectState+0x88>)
   19740:	4798      	blx	r3
   19742:	2300      	movs	r3, #0
   19744:	e018      	b.n	19778 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19746:	4b10      	ldr	r3, [pc, #64]	; (19788 <prvTraceGetObjectState+0x8c>)
   19748:	681c      	ldr	r4, [r3, #0]
   1974a:	1dfb      	adds	r3, r7, #7
   1974c:	781a      	ldrb	r2, [r3, #0]
   1974e:	1dbb      	adds	r3, r7, #6
   19750:	781b      	ldrb	r3, [r3, #0]
   19752:	0011      	movs	r1, r2
   19754:	0018      	movs	r0, r3
   19756:	4b0e      	ldr	r3, [pc, #56]	; (19790 <prvTraceGetObjectState+0x94>)
   19758:	4798      	blx	r3
   1975a:	0003      	movs	r3, r0
   1975c:	0018      	movs	r0, r3
   1975e:	4b0a      	ldr	r3, [pc, #40]	; (19788 <prvTraceGetObjectState+0x8c>)
   19760:	681a      	ldr	r2, [r3, #0]
   19762:	1dfb      	adds	r3, r7, #7
   19764:	781b      	ldrb	r3, [r3, #0]
   19766:	2170      	movs	r1, #112	; 0x70
   19768:	18d3      	adds	r3, r2, r3
   1976a:	185b      	adds	r3, r3, r1
   1976c:	781b      	ldrb	r3, [r3, #0]
   1976e:	18c3      	adds	r3, r0, r3
   19770:	229c      	movs	r2, #156	; 0x9c
   19772:	18e3      	adds	r3, r4, r3
   19774:	189b      	adds	r3, r3, r2
   19776:	781b      	ldrb	r3, [r3, #0]
}
   19778:	0018      	movs	r0, r3
   1977a:	46bd      	mov	sp, r7
   1977c:	b003      	add	sp, #12
   1977e:	bd90      	pop	{r4, r7, pc}
   19780:	000382d4 	.word	0x000382d4
   19784:	00019ea1 	.word	0x00019ea1
   19788:	20000df0 	.word	0x20000df0
   1978c:	00038318 	.word	0x00038318
   19790:	00019aad 	.word	0x00019aad

00019794 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19794:	b590      	push	{r4, r7, lr}
   19796:	b083      	sub	sp, #12
   19798:	af00      	add	r7, sp, #0
   1979a:	0002      	movs	r2, r0
   1979c:	1dfb      	adds	r3, r7, #7
   1979e:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   197a0:	4b11      	ldr	r3, [pc, #68]	; (197e8 <prvTraceSetTaskInstanceFinished+0x54>)
   197a2:	681b      	ldr	r3, [r3, #0]
   197a4:	2267      	movs	r2, #103	; 0x67
   197a6:	5c9b      	ldrb	r3, [r3, r2]
   197a8:	1dfa      	adds	r2, r7, #7
   197aa:	7812      	ldrb	r2, [r2, #0]
   197ac:	429a      	cmp	r2, r3
   197ae:	d904      	bls.n	197ba <prvTraceSetTaskInstanceFinished+0x26>
   197b0:	4b0e      	ldr	r3, [pc, #56]	; (197ec <prvTraceSetTaskInstanceFinished+0x58>)
   197b2:	0018      	movs	r0, r3
   197b4:	4b0e      	ldr	r3, [pc, #56]	; (197f0 <prvTraceSetTaskInstanceFinished+0x5c>)
   197b6:	4798      	blx	r3
   197b8:	e013      	b.n	197e2 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   197ba:	4b0b      	ldr	r3, [pc, #44]	; (197e8 <prvTraceSetTaskInstanceFinished+0x54>)
   197bc:	681c      	ldr	r4, [r3, #0]
   197be:	1dfb      	adds	r3, r7, #7
   197c0:	781b      	ldrb	r3, [r3, #0]
   197c2:	2103      	movs	r1, #3
   197c4:	0018      	movs	r0, r3
   197c6:	4b0b      	ldr	r3, [pc, #44]	; (197f4 <prvTraceSetTaskInstanceFinished+0x60>)
   197c8:	4798      	blx	r3
   197ca:	0003      	movs	r3, r0
   197cc:	0019      	movs	r1, r3
   197ce:	4b06      	ldr	r3, [pc, #24]	; (197e8 <prvTraceSetTaskInstanceFinished+0x54>)
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	2273      	movs	r2, #115	; 0x73
   197d4:	5c9b      	ldrb	r3, [r3, r2]
   197d6:	18cb      	adds	r3, r1, r3
   197d8:	229c      	movs	r2, #156	; 0x9c
   197da:	18e3      	adds	r3, r4, r3
   197dc:	189b      	adds	r3, r3, r2
   197de:	2200      	movs	r2, #0
   197e0:	701a      	strb	r2, [r3, #0]
#endif
}
   197e2:	46bd      	mov	sp, r7
   197e4:	b003      	add	sp, #12
   197e6:	bd90      	pop	{r4, r7, pc}
   197e8:	20000df0 	.word	0x20000df0
   197ec:	00038354 	.word	0x00038354
   197f0:	00019ea1 	.word	0x00019ea1
   197f4:	00019aad 	.word	0x00019aad

000197f8 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   197f8:	b580      	push	{r7, lr}
   197fa:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   197fc:	4b75      	ldr	r3, [pc, #468]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   197fe:	681b      	ldr	r3, [r3, #0]
   19800:	2b00      	cmp	r3, #0
   19802:	d103      	bne.n	1980c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19804:	4b73      	ldr	r3, [pc, #460]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19806:	4a74      	ldr	r2, [pc, #464]	; (199d8 <prvTraceInitTraceData+0x1e0>)
   19808:	601a      	str	r2, [r3, #0]
   1980a:	e006      	b.n	1981a <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1980c:	4b71      	ldr	r3, [pc, #452]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1980e:	681b      	ldr	r3, [r3, #0]
   19810:	781b      	ldrb	r3, [r3, #0]
   19812:	b2db      	uxtb	r3, r3
   19814:	2b01      	cmp	r3, #1
   19816:	d100      	bne.n	1981a <prvTraceInitTraceData+0x22>
   19818:	e0d8      	b.n	199cc <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1981a:	4b70      	ldr	r3, [pc, #448]	; (199dc <prvTraceInitTraceData+0x1e4>)
   1981c:	681a      	ldr	r2, [r3, #0]
   1981e:	4b70      	ldr	r3, [pc, #448]	; (199e0 <prvTraceInitTraceData+0x1e8>)
   19820:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   19822:	4b6c      	ldr	r3, [pc, #432]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19824:	6818      	ldr	r0, [r3, #0]
   19826:	23bd      	movs	r3, #189	; 0xbd
   19828:	011b      	lsls	r3, r3, #4
   1982a:	001a      	movs	r2, r3
   1982c:	2100      	movs	r1, #0
   1982e:	4b6d      	ldr	r3, [pc, #436]	; (199e4 <prvTraceInitTraceData+0x1ec>)
   19830:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   19832:	4b68      	ldr	r3, [pc, #416]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19834:	681b      	ldr	r3, [r3, #0]
   19836:	4a6c      	ldr	r2, [pc, #432]	; (199e8 <prvTraceInitTraceData+0x1f0>)
   19838:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1983a:	4b66      	ldr	r3, [pc, #408]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1983c:	681b      	ldr	r3, [r3, #0]
   1983e:	2205      	movs	r2, #5
   19840:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   19842:	4b64      	ldr	r3, [pc, #400]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19844:	681b      	ldr	r3, [r3, #0]
   19846:	2200      	movs	r2, #0
   19848:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1984a:	4b62      	ldr	r3, [pc, #392]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1984c:	681b      	ldr	r3, [r3, #0]
   1984e:	22bd      	movs	r2, #189	; 0xbd
   19850:	0112      	lsls	r2, r2, #4
   19852:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19854:	4b5f      	ldr	r3, [pc, #380]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19856:	681b      	ldr	r3, [r3, #0]
   19858:	2296      	movs	r2, #150	; 0x96
   1985a:	0052      	lsls	r2, r2, #1
   1985c:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1985e:	4b5d      	ldr	r3, [pc, #372]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19860:	681b      	ldr	r3, [r3, #0]
   19862:	4a62      	ldr	r2, [pc, #392]	; (199ec <prvTraceInitTraceData+0x1f4>)
   19864:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19866:	4b5b      	ldr	r3, [pc, #364]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19868:	681b      	ldr	r3, [r3, #0]
   1986a:	2200      	movs	r2, #0
   1986c:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1986e:	4b59      	ldr	r3, [pc, #356]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19870:	681b      	ldr	r3, [r3, #0]
   19872:	2200      	movs	r2, #0
   19874:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19876:	4b5e      	ldr	r3, [pc, #376]	; (199f0 <prvTraceInitTraceData+0x1f8>)
   19878:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1987a:	4b56      	ldr	r3, [pc, #344]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1987c:	681b      	ldr	r3, [r3, #0]
   1987e:	4a5d      	ldr	r2, [pc, #372]	; (199f4 <prvTraceInitTraceData+0x1fc>)
   19880:	495d      	ldr	r1, [pc, #372]	; (199f8 <prvTraceInitTraceData+0x200>)
   19882:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19884:	4b53      	ldr	r3, [pc, #332]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19886:	681a      	ldr	r2, [r3, #0]
   19888:	23ac      	movs	r3, #172	; 0xac
   1988a:	00db      	lsls	r3, r3, #3
   1988c:	21c8      	movs	r1, #200	; 0xc8
   1988e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19890:	4b50      	ldr	r3, [pc, #320]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19892:	681b      	ldr	r3, [r3, #0]
   19894:	4a59      	ldr	r2, [pc, #356]	; (199fc <prvTraceInitTraceData+0x204>)
   19896:	2101      	movs	r1, #1
   19898:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1989a:	4b4e      	ldr	r3, [pc, #312]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1989c:	681a      	ldr	r2, [r3, #0]
   1989e:	23d7      	movs	r3, #215	; 0xd7
   198a0:	00db      	lsls	r3, r3, #3
   198a2:	4957      	ldr	r1, [pc, #348]	; (19a00 <prvTraceInitTraceData+0x208>)
   198a4:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   198a6:	4b4b      	ldr	r3, [pc, #300]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198a8:	681b      	ldr	r3, [r3, #0]
   198aa:	4a56      	ldr	r2, [pc, #344]	; (19a04 <prvTraceInitTraceData+0x20c>)
   198ac:	4694      	mov	ip, r2
   198ae:	4463      	add	r3, ip
   198b0:	4955      	ldr	r1, [pc, #340]	; (19a08 <prvTraceInitTraceData+0x210>)
   198b2:	2250      	movs	r2, #80	; 0x50
   198b4:	0018      	movs	r0, r3
   198b6:	4b55      	ldr	r3, [pc, #340]	; (19a0c <prvTraceInitTraceData+0x214>)
   198b8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   198ba:	4b46      	ldr	r3, [pc, #280]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	4a54      	ldr	r2, [pc, #336]	; (19a10 <prvTraceInitTraceData+0x218>)
   198c0:	4954      	ldr	r1, [pc, #336]	; (19a14 <prvTraceInitTraceData+0x21c>)
   198c2:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   198c4:	4b43      	ldr	r3, [pc, #268]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198c6:	681b      	ldr	r3, [r3, #0]
   198c8:	4a53      	ldr	r2, [pc, #332]	; (19a18 <prvTraceInitTraceData+0x220>)
   198ca:	210a      	movs	r1, #10
   198cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   198ce:	4b41      	ldr	r3, [pc, #260]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198d0:	681b      	ldr	r3, [r3, #0]
   198d2:	4a52      	ldr	r2, [pc, #328]	; (19a1c <prvTraceInitTraceData+0x224>)
   198d4:	210b      	movs	r1, #11
   198d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   198d8:	4b3e      	ldr	r3, [pc, #248]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198da:	681b      	ldr	r3, [r3, #0]
   198dc:	4a50      	ldr	r2, [pc, #320]	; (19a20 <prvTraceInitTraceData+0x228>)
   198de:	210c      	movs	r1, #12
   198e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   198e2:	4b3c      	ldr	r3, [pc, #240]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198e4:	681b      	ldr	r3, [r3, #0]
   198e6:	4a4f      	ldr	r2, [pc, #316]	; (19a24 <prvTraceInitTraceData+0x22c>)
   198e8:	210d      	movs	r1, #13
   198ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   198ec:	4b39      	ldr	r3, [pc, #228]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198ee:	681b      	ldr	r3, [r3, #0]
   198f0:	4a4d      	ldr	r2, [pc, #308]	; (19a28 <prvTraceInitTraceData+0x230>)
   198f2:	2171      	movs	r1, #113	; 0x71
   198f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   198f6:	4b37      	ldr	r3, [pc, #220]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   198f8:	681b      	ldr	r3, [r3, #0]
   198fa:	4a4c      	ldr	r2, [pc, #304]	; (19a2c <prvTraceInitTraceData+0x234>)
   198fc:	2172      	movs	r1, #114	; 0x72
   198fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19900:	4b34      	ldr	r3, [pc, #208]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19902:	681b      	ldr	r3, [r3, #0]
   19904:	4a4a      	ldr	r2, [pc, #296]	; (19a30 <prvTraceInitTraceData+0x238>)
   19906:	2173      	movs	r1, #115	; 0x73
   19908:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1990a:	4b32      	ldr	r3, [pc, #200]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1990c:	681b      	ldr	r3, [r3, #0]
   1990e:	4a49      	ldr	r2, [pc, #292]	; (19a34 <prvTraceInitTraceData+0x23c>)
   19910:	2174      	movs	r1, #116	; 0x74
   19912:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19914:	4b2f      	ldr	r3, [pc, #188]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19916:	681b      	ldr	r3, [r3, #0]
   19918:	4a47      	ldr	r2, [pc, #284]	; (19a38 <prvTraceInitTraceData+0x240>)
   1991a:	21f1      	movs	r1, #241	; 0xf1
   1991c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1991e:	4b2d      	ldr	r3, [pc, #180]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19920:	681b      	ldr	r3, [r3, #0]
   19922:	4a46      	ldr	r2, [pc, #280]	; (19a3c <prvTraceInitTraceData+0x244>)
   19924:	21f2      	movs	r1, #242	; 0xf2
   19926:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19928:	4b2a      	ldr	r3, [pc, #168]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1992a:	681b      	ldr	r3, [r3, #0]
   1992c:	4a44      	ldr	r2, [pc, #272]	; (19a40 <prvTraceInitTraceData+0x248>)
   1992e:	21f3      	movs	r1, #243	; 0xf3
   19930:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19932:	4b28      	ldr	r3, [pc, #160]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19934:	681b      	ldr	r3, [r3, #0]
   19936:	4a43      	ldr	r2, [pc, #268]	; (19a44 <prvTraceInitTraceData+0x24c>)
   19938:	21f4      	movs	r1, #244	; 0xf4
   1993a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1993c:	4b42      	ldr	r3, [pc, #264]	; (19a48 <prvTraceInitTraceData+0x250>)
   1993e:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19940:	4b24      	ldr	r3, [pc, #144]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19942:	681b      	ldr	r3, [r3, #0]
   19944:	22f4      	movs	r2, #244	; 0xf4
   19946:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19948:	4b22      	ldr	r3, [pc, #136]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1994a:	681b      	ldr	r3, [r3, #0]
   1994c:	22f3      	movs	r2, #243	; 0xf3
   1994e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19950:	4b20      	ldr	r3, [pc, #128]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19952:	681b      	ldr	r3, [r3, #0]
   19954:	22f2      	movs	r2, #242	; 0xf2
   19956:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19958:	4b1e      	ldr	r3, [pc, #120]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1995a:	681b      	ldr	r3, [r3, #0]
   1995c:	22f1      	movs	r2, #241	; 0xf1
   1995e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19960:	4b1c      	ldr	r3, [pc, #112]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19962:	681b      	ldr	r3, [r3, #0]
   19964:	2274      	movs	r2, #116	; 0x74
   19966:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19968:	4b1a      	ldr	r3, [pc, #104]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1996a:	681b      	ldr	r3, [r3, #0]
   1996c:	2273      	movs	r2, #115	; 0x73
   1996e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19970:	4b18      	ldr	r3, [pc, #96]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19972:	681b      	ldr	r3, [r3, #0]
   19974:	2272      	movs	r2, #114	; 0x72
   19976:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19978:	4b16      	ldr	r3, [pc, #88]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1997a:	681b      	ldr	r3, [r3, #0]
   1997c:	2271      	movs	r2, #113	; 0x71
   1997e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19980:	4b14      	ldr	r3, [pc, #80]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19982:	681b      	ldr	r3, [r3, #0]
   19984:	2204      	movs	r2, #4
   19986:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19988:	4b12      	ldr	r3, [pc, #72]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1998a:	681b      	ldr	r3, [r3, #0]
   1998c:	2203      	movs	r2, #3
   1998e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19990:	4b10      	ldr	r3, [pc, #64]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   19992:	681b      	ldr	r3, [r3, #0]
   19994:	2202      	movs	r2, #2
   19996:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19998:	4b0e      	ldr	r3, [pc, #56]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   1999a:	681b      	ldr	r3, [r3, #0]
   1999c:	2201      	movs	r2, #1
   1999e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   199a0:	4b2a      	ldr	r3, [pc, #168]	; (19a4c <prvTraceInitTraceData+0x254>)
   199a2:	681b      	ldr	r3, [r3, #0]
   199a4:	2b00      	cmp	r3, #0
   199a6:	d012      	beq.n	199ce <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   199a8:	4b0a      	ldr	r3, [pc, #40]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   199aa:	681b      	ldr	r3, [r3, #0]
   199ac:	4a15      	ldr	r2, [pc, #84]	; (19a04 <prvTraceInitTraceData+0x20c>)
   199ae:	1898      	adds	r0, r3, r2
   199b0:	4b26      	ldr	r3, [pc, #152]	; (19a4c <prvTraceInitTraceData+0x254>)
   199b2:	681b      	ldr	r3, [r3, #0]
   199b4:	2250      	movs	r2, #80	; 0x50
   199b6:	0019      	movs	r1, r3
   199b8:	4b14      	ldr	r3, [pc, #80]	; (19a0c <prvTraceInitTraceData+0x214>)
   199ba:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   199bc:	4b05      	ldr	r3, [pc, #20]	; (199d4 <prvTraceInitTraceData+0x1dc>)
   199be:	681b      	ldr	r3, [r3, #0]
   199c0:	4a23      	ldr	r2, [pc, #140]	; (19a50 <prvTraceInitTraceData+0x258>)
   199c2:	2101      	movs	r1, #1
   199c4:	5099      	str	r1, [r3, r2]
		vTraceStop();
   199c6:	4b23      	ldr	r3, [pc, #140]	; (19a54 <prvTraceInitTraceData+0x25c>)
   199c8:	4798      	blx	r3
   199ca:	e000      	b.n	199ce <prvTraceInitTraceData+0x1d6>
			return;
   199cc:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   199ce:	46bd      	mov	sp, r7
   199d0:	bd80      	pop	{r7, pc}
   199d2:	46c0      	nop			; (mov r8, r8)
   199d4:	20000df0 	.word	0x20000df0
   199d8:	20004a38 	.word	0x20004a38
   199dc:	e000e018 	.word	0xe000e018
   199e0:	20005608 	.word	0x20005608
   199e4:	00034e13 	.word	0x00034e13
   199e8:	00001aa1 	.word	0x00001aa1
   199ec:	f0f0f0f0 	.word	0xf0f0f0f0
   199f0:	0001895d 	.word	0x0001895d
   199f4:	0000055c 	.word	0x0000055c
   199f8:	f1f1f1f1 	.word	0xf1f1f1f1
   199fc:	00000564 	.word	0x00000564
   19a00:	f2f2f2f2 	.word	0xf2f2f2f2
   19a04:	000006bc 	.word	0x000006bc
   19a08:	0003839c 	.word	0x0003839c
   19a0c:	00019d6d 	.word	0x00019d6d
   19a10:	0000070c 	.word	0x0000070c
   19a14:	f3f3f3f3 	.word	0xf3f3f3f3
   19a18:	00000bc4 	.word	0x00000bc4
   19a1c:	00000bc5 	.word	0x00000bc5
   19a20:	00000bc6 	.word	0x00000bc6
   19a24:	00000bc7 	.word	0x00000bc7
   19a28:	00000bc8 	.word	0x00000bc8
   19a2c:	00000bc9 	.word	0x00000bc9
   19a30:	00000bca 	.word	0x00000bca
   19a34:	00000bcb 	.word	0x00000bcb
   19a38:	00000bcc 	.word	0x00000bcc
   19a3c:	00000bcd 	.word	0x00000bcd
   19a40:	00000bce 	.word	0x00000bce
   19a44:	00000bcf 	.word	0x00000bcf
   19a48:	00018afd 	.word	0x00018afd
   19a4c:	20000d50 	.word	0x20000d50
   19a50:	000006b4 	.word	0x000006b4
   19a54:	00018d65 	.word	0x00018d65

00019a58 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19a58:	b580      	push	{r7, lr}
   19a5a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19a5c:	4b10      	ldr	r3, [pc, #64]	; (19aa0 <prvTraceNextFreeEventBufferSlot+0x48>)
   19a5e:	681b      	ldr	r3, [r3, #0]
   19a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19a62:	2b00      	cmp	r3, #0
   19a64:	d101      	bne.n	19a6a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   19a66:	2300      	movs	r3, #0
   19a68:	e017      	b.n	19a9a <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19a6a:	4b0d      	ldr	r3, [pc, #52]	; (19aa0 <prvTraceNextFreeEventBufferSlot+0x48>)
   19a6c:	681b      	ldr	r3, [r3, #0]
   19a6e:	69da      	ldr	r2, [r3, #28]
   19a70:	232c      	movs	r3, #44	; 0x2c
   19a72:	33ff      	adds	r3, #255	; 0xff
   19a74:	429a      	cmp	r2, r3
   19a76:	d905      	bls.n	19a84 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19a78:	4b0a      	ldr	r3, [pc, #40]	; (19aa4 <prvTraceNextFreeEventBufferSlot+0x4c>)
   19a7a:	0018      	movs	r0, r3
   19a7c:	4b0a      	ldr	r3, [pc, #40]	; (19aa8 <prvTraceNextFreeEventBufferSlot+0x50>)
   19a7e:	4798      	blx	r3
		return NULL;
   19a80:	2300      	movs	r3, #0
   19a82:	e00a      	b.n	19a9a <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19a84:	4b06      	ldr	r3, [pc, #24]	; (19aa0 <prvTraceNextFreeEventBufferSlot+0x48>)
   19a86:	681a      	ldr	r2, [r3, #0]
   19a88:	4b05      	ldr	r3, [pc, #20]	; (19aa0 <prvTraceNextFreeEventBufferSlot+0x48>)
   19a8a:	681b      	ldr	r3, [r3, #0]
   19a8c:	69db      	ldr	r3, [r3, #28]
   19a8e:	009b      	lsls	r3, r3, #2
   19a90:	21e2      	movs	r1, #226	; 0xe2
   19a92:	00c9      	lsls	r1, r1, #3
   19a94:	468c      	mov	ip, r1
   19a96:	4463      	add	r3, ip
   19a98:	18d3      	adds	r3, r2, r3
}
   19a9a:	0018      	movs	r0, r3
   19a9c:	46bd      	mov	sp, r7
   19a9e:	bd80      	pop	{r7, pc}
   19aa0:	20000df0 	.word	0x20000df0
   19aa4:	000383b0 	.word	0x000383b0
   19aa8:	00019ea1 	.word	0x00019ea1

00019aac <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19aac:	b580      	push	{r7, lr}
   19aae:	b082      	sub	sp, #8
   19ab0:	af00      	add	r7, sp, #0
   19ab2:	0002      	movs	r2, r0
   19ab4:	1dfb      	adds	r3, r7, #7
   19ab6:	701a      	strb	r2, [r3, #0]
   19ab8:	1dbb      	adds	r3, r7, #6
   19aba:	1c0a      	adds	r2, r1, #0
   19abc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19abe:	1dbb      	adds	r3, r7, #6
   19ac0:	781b      	ldrb	r3, [r3, #0]
   19ac2:	2b08      	cmp	r3, #8
   19ac4:	d905      	bls.n	19ad2 <uiIndexOfObject+0x26>
   19ac6:	4b2a      	ldr	r3, [pc, #168]	; (19b70 <uiIndexOfObject+0xc4>)
   19ac8:	0018      	movs	r0, r3
   19aca:	4b2a      	ldr	r3, [pc, #168]	; (19b74 <uiIndexOfObject+0xc8>)
   19acc:	4798      	blx	r3
   19ace:	2300      	movs	r3, #0
   19ad0:	e049      	b.n	19b66 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   19ad2:	1dfb      	adds	r3, r7, #7
   19ad4:	781b      	ldrb	r3, [r3, #0]
   19ad6:	2b00      	cmp	r3, #0
   19ad8:	d00b      	beq.n	19af2 <uiIndexOfObject+0x46>
   19ada:	4b27      	ldr	r3, [pc, #156]	; (19b78 <uiIndexOfObject+0xcc>)
   19adc:	681a      	ldr	r2, [r3, #0]
   19ade:	1dbb      	adds	r3, r7, #6
   19ae0:	781b      	ldrb	r3, [r3, #0]
   19ae2:	2164      	movs	r1, #100	; 0x64
   19ae4:	18d3      	adds	r3, r2, r3
   19ae6:	185b      	adds	r3, r3, r1
   19ae8:	781b      	ldrb	r3, [r3, #0]
   19aea:	1dfa      	adds	r2, r7, #7
   19aec:	7812      	ldrb	r2, [r2, #0]
   19aee:	429a      	cmp	r2, r3
   19af0:	d905      	bls.n	19afe <uiIndexOfObject+0x52>
   19af2:	4b22      	ldr	r3, [pc, #136]	; (19b7c <uiIndexOfObject+0xd0>)
   19af4:	0018      	movs	r0, r3
   19af6:	4b1f      	ldr	r3, [pc, #124]	; (19b74 <uiIndexOfObject+0xc8>)
   19af8:	4798      	blx	r3
   19afa:	2300      	movs	r3, #0
   19afc:	e033      	b.n	19b66 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19afe:	1dbb      	adds	r3, r7, #6
   19b00:	781b      	ldrb	r3, [r3, #0]
   19b02:	2b08      	cmp	r3, #8
   19b04:	d82a      	bhi.n	19b5c <uiIndexOfObject+0xb0>
   19b06:	1dfb      	adds	r3, r7, #7
   19b08:	781b      	ldrb	r3, [r3, #0]
   19b0a:	2b00      	cmp	r3, #0
   19b0c:	d026      	beq.n	19b5c <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   19b0e:	4b1a      	ldr	r3, [pc, #104]	; (19b78 <uiIndexOfObject+0xcc>)
   19b10:	681a      	ldr	r2, [r3, #0]
   19b12:	1dbb      	adds	r3, r7, #6
   19b14:	781b      	ldrb	r3, [r3, #0]
   19b16:	2164      	movs	r1, #100	; 0x64
   19b18:	18d3      	adds	r3, r2, r3
   19b1a:	185b      	adds	r3, r3, r1
   19b1c:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19b1e:	1dfa      	adds	r2, r7, #7
   19b20:	7812      	ldrb	r2, [r2, #0]
   19b22:	429a      	cmp	r2, r3
   19b24:	d81a      	bhi.n	19b5c <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19b26:	4b14      	ldr	r3, [pc, #80]	; (19b78 <uiIndexOfObject+0xcc>)
   19b28:	681a      	ldr	r2, [r3, #0]
   19b2a:	1dbb      	adds	r3, r7, #6
   19b2c:	781b      	ldrb	r3, [r3, #0]
   19b2e:	3340      	adds	r3, #64	; 0x40
   19b30:	005b      	lsls	r3, r3, #1
   19b32:	18d3      	adds	r3, r2, r3
   19b34:	3308      	adds	r3, #8
   19b36:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19b38:	4b0f      	ldr	r3, [pc, #60]	; (19b78 <uiIndexOfObject+0xcc>)
   19b3a:	6819      	ldr	r1, [r3, #0]
   19b3c:	1dbb      	adds	r3, r7, #6
   19b3e:	781b      	ldrb	r3, [r3, #0]
   19b40:	207c      	movs	r0, #124	; 0x7c
   19b42:	18cb      	adds	r3, r1, r3
   19b44:	181b      	adds	r3, r3, r0
   19b46:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19b48:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19b4a:	1df9      	adds	r1, r7, #7
   19b4c:	7809      	ldrb	r1, [r1, #0]
   19b4e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19b50:	b289      	uxth	r1, r1
   19b52:	434b      	muls	r3, r1
   19b54:	b29b      	uxth	r3, r3
   19b56:	18d3      	adds	r3, r2, r3
   19b58:	b29b      	uxth	r3, r3
   19b5a:	e004      	b.n	19b66 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19b5c:	4b08      	ldr	r3, [pc, #32]	; (19b80 <uiIndexOfObject+0xd4>)
   19b5e:	0018      	movs	r0, r3
   19b60:	4b04      	ldr	r3, [pc, #16]	; (19b74 <uiIndexOfObject+0xc8>)
   19b62:	4798      	blx	r3
	return 0;
   19b64:	2300      	movs	r3, #0
}
   19b66:	0018      	movs	r0, r3
   19b68:	46bd      	mov	sp, r7
   19b6a:	b002      	add	sp, #8
   19b6c:	bd80      	pop	{r7, pc}
   19b6e:	46c0      	nop			; (mov r8, r8)
   19b70:	000383d8 	.word	0x000383d8
   19b74:	00019ea1 	.word	0x00019ea1
   19b78:	20000df0 	.word	0x20000df0
   19b7c:	00038418 	.word	0x00038418
   19b80:	00038458 	.word	0x00038458

00019b84 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19b84:	b580      	push	{r7, lr}
   19b86:	b088      	sub	sp, #32
   19b88:	af00      	add	r7, sp, #0
   19b8a:	0002      	movs	r2, r0
   19b8c:	1dfb      	adds	r3, r7, #7
   19b8e:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19b90:	4b5a      	ldr	r3, [pc, #360]	; (19cfc <prvTraceGetObjectHandle+0x178>)
   19b92:	681b      	ldr	r3, [r3, #0]
   19b94:	2b00      	cmp	r3, #0
   19b96:	d105      	bne.n	19ba4 <prvTraceGetObjectHandle+0x20>
   19b98:	4b59      	ldr	r3, [pc, #356]	; (19d00 <prvTraceGetObjectHandle+0x17c>)
   19b9a:	0018      	movs	r0, r3
   19b9c:	4b59      	ldr	r3, [pc, #356]	; (19d04 <prvTraceGetObjectHandle+0x180>)
   19b9e:	4798      	blx	r3
   19ba0:	2300      	movs	r3, #0
   19ba2:	e0a7      	b.n	19cf4 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19ba4:	1dfb      	adds	r3, r7, #7
   19ba6:	781b      	ldrb	r3, [r3, #0]
   19ba8:	2b08      	cmp	r3, #8
   19baa:	d905      	bls.n	19bb8 <prvTraceGetObjectHandle+0x34>
   19bac:	4b56      	ldr	r3, [pc, #344]	; (19d08 <prvTraceGetObjectHandle+0x184>)
   19bae:	0018      	movs	r0, r3
   19bb0:	4b54      	ldr	r3, [pc, #336]	; (19d04 <prvTraceGetObjectHandle+0x180>)
   19bb2:	4798      	blx	r3
   19bb4:	2300      	movs	r3, #0
   19bb6:	e09d      	b.n	19cf4 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19bb8:	f3ef 8310 	mrs	r3, PRIMASK
   19bbc:	60fb      	str	r3, [r7, #12]
  return(result);
   19bbe:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19bc0:	61bb      	str	r3, [r7, #24]
   19bc2:	2301      	movs	r3, #1
   19bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19bc6:	693b      	ldr	r3, [r7, #16]
   19bc8:	f383 8810 	msr	PRIMASK, r3
   19bcc:	4b4f      	ldr	r3, [pc, #316]	; (19d0c <prvTraceGetObjectHandle+0x188>)
   19bce:	681b      	ldr	r3, [r3, #0]
   19bd0:	1c5a      	adds	r2, r3, #1
   19bd2:	4b4e      	ldr	r3, [pc, #312]	; (19d0c <prvTraceGetObjectHandle+0x188>)
   19bd4:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   19bd6:	1dfb      	adds	r3, r7, #7
   19bd8:	781a      	ldrb	r2, [r3, #0]
   19bda:	4b4d      	ldr	r3, [pc, #308]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19bdc:	0052      	lsls	r2, r2, #1
   19bde:	5ad3      	ldrh	r3, [r2, r3]
   19be0:	001a      	movs	r2, r3
   19be2:	4b4c      	ldr	r3, [pc, #304]	; (19d14 <prvTraceGetObjectHandle+0x190>)
   19be4:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   19be6:	4b4b      	ldr	r3, [pc, #300]	; (19d14 <prvTraceGetObjectHandle+0x190>)
   19be8:	681b      	ldr	r3, [r3, #0]
   19bea:	4a49      	ldr	r2, [pc, #292]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19bec:	2148      	movs	r1, #72	; 0x48
   19bee:	18d3      	adds	r3, r2, r3
   19bf0:	185b      	adds	r3, r3, r1
   19bf2:	781b      	ldrb	r3, [r3, #0]
   19bf4:	2b00      	cmp	r3, #0
   19bf6:	d117      	bne.n	19c28 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19bf8:	4b46      	ldr	r3, [pc, #280]	; (19d14 <prvTraceGetObjectHandle+0x190>)
   19bfa:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19bfc:	4b45      	ldr	r3, [pc, #276]	; (19d14 <prvTraceGetObjectHandle+0x190>)
   19bfe:	681b      	ldr	r3, [r3, #0]
   19c00:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19c02:	1dfb      	adds	r3, r7, #7
   19c04:	781b      	ldrb	r3, [r3, #0]
   19c06:	4842      	ldr	r0, [pc, #264]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c08:	3308      	adds	r3, #8
   19c0a:	005b      	lsls	r3, r3, #1
   19c0c:	18c3      	adds	r3, r0, r3
   19c0e:	3302      	adds	r3, #2
   19c10:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19c12:	b2db      	uxtb	r3, r3
   19c14:	1acb      	subs	r3, r1, r3
   19c16:	b2db      	uxtb	r3, r3
   19c18:	3301      	adds	r3, #1
   19c1a:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19c1c:	4b3c      	ldr	r3, [pc, #240]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c1e:	2148      	movs	r1, #72	; 0x48
   19c20:	189b      	adds	r3, r3, r2
   19c22:	185b      	adds	r3, r3, r1
   19c24:	1c02      	adds	r2, r0, #0
   19c26:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19c28:	4b3a      	ldr	r3, [pc, #232]	; (19d14 <prvTraceGetObjectHandle+0x190>)
   19c2a:	681a      	ldr	r2, [r3, #0]
   19c2c:	231f      	movs	r3, #31
   19c2e:	18fb      	adds	r3, r7, r3
   19c30:	4937      	ldr	r1, [pc, #220]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c32:	2048      	movs	r0, #72	; 0x48
   19c34:	188a      	adds	r2, r1, r2
   19c36:	1812      	adds	r2, r2, r0
   19c38:	7812      	ldrb	r2, [r2, #0]
   19c3a:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19c3c:	1dfb      	adds	r3, r7, #7
   19c3e:	781a      	ldrb	r2, [r3, #0]
   19c40:	4b33      	ldr	r3, [pc, #204]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c42:	0052      	lsls	r2, r2, #1
   19c44:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19c46:	1dfb      	adds	r3, r7, #7
   19c48:	781b      	ldrb	r3, [r3, #0]
   19c4a:	4931      	ldr	r1, [pc, #196]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c4c:	3310      	adds	r3, #16
   19c4e:	005b      	lsls	r3, r3, #1
   19c50:	18cb      	adds	r3, r1, r3
   19c52:	3304      	adds	r3, #4
   19c54:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19c56:	429a      	cmp	r2, r3
   19c58:	d90d      	bls.n	19c76 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19c5a:	1dfb      	adds	r3, r7, #7
   19c5c:	781b      	ldrb	r3, [r3, #0]
   19c5e:	0018      	movs	r0, r3
   19c60:	4b2d      	ldr	r3, [pc, #180]	; (19d18 <prvTraceGetObjectHandle+0x194>)
   19c62:	4798      	blx	r3
   19c64:	0003      	movs	r3, r0
   19c66:	0018      	movs	r0, r3
   19c68:	4b26      	ldr	r3, [pc, #152]	; (19d04 <prvTraceGetObjectHandle+0x180>)
   19c6a:	4798      	blx	r3
		handle = 0;
   19c6c:	231f      	movs	r3, #31
   19c6e:	18fb      	adds	r3, r7, r3
   19c70:	2200      	movs	r2, #0
   19c72:	701a      	strb	r2, [r3, #0]
   19c74:	e031      	b.n	19cda <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19c76:	1dfb      	adds	r3, r7, #7
   19c78:	781b      	ldrb	r3, [r3, #0]
   19c7a:	4a25      	ldr	r2, [pc, #148]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c7c:	0059      	lsls	r1, r3, #1
   19c7e:	5a8a      	ldrh	r2, [r1, r2]
   19c80:	3201      	adds	r2, #1
   19c82:	b291      	uxth	r1, r2
   19c84:	4a22      	ldr	r2, [pc, #136]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c86:	005b      	lsls	r3, r3, #1
   19c88:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19c8a:	1dfb      	adds	r3, r7, #7
   19c8c:	781a      	ldrb	r2, [r3, #0]
   19c8e:	4b20      	ldr	r3, [pc, #128]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c90:	0052      	lsls	r2, r2, #1
   19c92:	5ad3      	ldrh	r3, [r2, r3]
   19c94:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19c96:	1dfb      	adds	r3, r7, #7
   19c98:	781b      	ldrb	r3, [r3, #0]
   19c9a:	4a1d      	ldr	r2, [pc, #116]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19c9c:	3308      	adds	r3, #8
   19c9e:	005b      	lsls	r3, r3, #1
   19ca0:	18d3      	adds	r3, r2, r3
   19ca2:	3302      	adds	r3, #2
   19ca4:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19ca6:	1acb      	subs	r3, r1, r3
   19ca8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19caa:	1dfb      	adds	r3, r7, #7
   19cac:	781b      	ldrb	r3, [r3, #0]
   19cae:	4a18      	ldr	r2, [pc, #96]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19cb0:	3318      	adds	r3, #24
   19cb2:	005b      	lsls	r3, r3, #1
   19cb4:	18d3      	adds	r3, r2, r3
   19cb6:	3306      	adds	r3, #6
   19cb8:	881b      	ldrh	r3, [r3, #0]
   19cba:	001a      	movs	r2, r3
		if (hndCount >
   19cbc:	697b      	ldr	r3, [r7, #20]
   19cbe:	429a      	cmp	r2, r3
   19cc0:	da0b      	bge.n	19cda <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19cc2:	1dfb      	adds	r3, r7, #7
   19cc4:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19cc6:	697a      	ldr	r2, [r7, #20]
   19cc8:	b2d2      	uxtb	r2, r2
   19cca:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19ccc:	4a10      	ldr	r2, [pc, #64]	; (19d10 <prvTraceGetObjectHandle+0x18c>)
   19cce:	3318      	adds	r3, #24
   19cd0:	005b      	lsls	r3, r3, #1
   19cd2:	18d3      	adds	r3, r2, r3
   19cd4:	3306      	adds	r3, #6
   19cd6:	1c0a      	adds	r2, r1, #0
   19cd8:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19cda:	4b0c      	ldr	r3, [pc, #48]	; (19d0c <prvTraceGetObjectHandle+0x188>)
   19cdc:	681b      	ldr	r3, [r3, #0]
   19cde:	1e5a      	subs	r2, r3, #1
   19ce0:	4b0a      	ldr	r3, [pc, #40]	; (19d0c <prvTraceGetObjectHandle+0x188>)
   19ce2:	601a      	str	r2, [r3, #0]
   19ce4:	69bb      	ldr	r3, [r7, #24]
   19ce6:	60bb      	str	r3, [r7, #8]
   19ce8:	68bb      	ldr	r3, [r7, #8]
   19cea:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19cee:	231f      	movs	r3, #31
   19cf0:	18fb      	adds	r3, r7, r3
   19cf2:	781b      	ldrb	r3, [r3, #0]
}
   19cf4:	0018      	movs	r0, r3
   19cf6:	46bd      	mov	sp, r7
   19cf8:	b008      	add	sp, #32
   19cfa:	bd80      	pop	{r7, pc}
   19cfc:	20000df0 	.word	0x20000df0
   19d00:	000378b8 	.word	0x000378b8
   19d04:	00019ea1 	.word	0x00019ea1
   19d08:	00038498 	.word	0x00038498
   19d0c:	20000d48 	.word	0x20000d48
   19d10:	20000d60 	.word	0x20000d60
   19d14:	20000df4 	.word	0x20000df4
   19d18:	00018bc1 	.word	0x00018bc1

00019d1c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19d1c:	b590      	push	{r4, r7, lr}
   19d1e:	b085      	sub	sp, #20
   19d20:	af00      	add	r7, sp, #0
   19d22:	0002      	movs	r2, r0
   19d24:	1dfb      	adds	r3, r7, #7
   19d26:	701a      	strb	r2, [r3, #0]
   19d28:	1dbb      	adds	r3, r7, #6
   19d2a:	1c0a      	adds	r2, r1, #0
   19d2c:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   19d2e:	230e      	movs	r3, #14
   19d30:	18fc      	adds	r4, r7, r3
   19d32:	1dfb      	adds	r3, r7, #7
   19d34:	781a      	ldrb	r2, [r3, #0]
   19d36:	1dbb      	adds	r3, r7, #6
   19d38:	781b      	ldrb	r3, [r3, #0]
   19d3a:	0011      	movs	r1, r2
   19d3c:	0018      	movs	r0, r3
   19d3e:	4b09      	ldr	r3, [pc, #36]	; (19d64 <prvMarkObjectAsUsed+0x48>)
   19d40:	4798      	blx	r3
   19d42:	0003      	movs	r3, r0
   19d44:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19d46:	4b08      	ldr	r3, [pc, #32]	; (19d68 <prvMarkObjectAsUsed+0x4c>)
   19d48:	681a      	ldr	r2, [r3, #0]
   19d4a:	230e      	movs	r3, #14
   19d4c:	18fb      	adds	r3, r7, r3
   19d4e:	881b      	ldrh	r3, [r3, #0]
   19d50:	219c      	movs	r1, #156	; 0x9c
   19d52:	18d3      	adds	r3, r2, r3
   19d54:	185b      	adds	r3, r3, r1
   19d56:	2201      	movs	r2, #1
   19d58:	701a      	strb	r2, [r3, #0]
}
   19d5a:	46c0      	nop			; (mov r8, r8)
   19d5c:	46bd      	mov	sp, r7
   19d5e:	b005      	add	sp, #20
   19d60:	bd90      	pop	{r4, r7, pc}
   19d62:	46c0      	nop			; (mov r8, r8)
   19d64:	00019aad 	.word	0x00019aad
   19d68:	20000df0 	.word	0x20000df0

00019d6c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19d6c:	b580      	push	{r7, lr}
   19d6e:	b086      	sub	sp, #24
   19d70:	af00      	add	r7, sp, #0
   19d72:	60f8      	str	r0, [r7, #12]
   19d74:	60b9      	str	r1, [r7, #8]
   19d76:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19d78:	2300      	movs	r3, #0
   19d7a:	617b      	str	r3, [r7, #20]
   19d7c:	e010      	b.n	19da0 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19d7e:	68fa      	ldr	r2, [r7, #12]
   19d80:	697b      	ldr	r3, [r7, #20]
   19d82:	18d3      	adds	r3, r2, r3
   19d84:	68b9      	ldr	r1, [r7, #8]
   19d86:	697a      	ldr	r2, [r7, #20]
   19d88:	188a      	adds	r2, r1, r2
   19d8a:	7812      	ldrb	r2, [r2, #0]
   19d8c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19d8e:	68ba      	ldr	r2, [r7, #8]
   19d90:	697b      	ldr	r3, [r7, #20]
   19d92:	18d3      	adds	r3, r2, r3
   19d94:	781b      	ldrb	r3, [r3, #0]
   19d96:	2b00      	cmp	r3, #0
   19d98:	d007      	beq.n	19daa <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19d9a:	697b      	ldr	r3, [r7, #20]
   19d9c:	3301      	adds	r3, #1
   19d9e:	617b      	str	r3, [r7, #20]
   19da0:	697a      	ldr	r2, [r7, #20]
   19da2:	687b      	ldr	r3, [r7, #4]
   19da4:	429a      	cmp	r2, r3
   19da6:	d3ea      	bcc.n	19d7e <prvStrncpy+0x12>
			break;
	}
}
   19da8:	e000      	b.n	19dac <prvStrncpy+0x40>
			break;
   19daa:	46c0      	nop			; (mov r8, r8)
}
   19dac:	46c0      	nop			; (mov r8, r8)
   19dae:	46bd      	mov	sp, r7
   19db0:	b006      	add	sp, #24
   19db2:	bd80      	pop	{r7, pc}

00019db4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19db4:	b580      	push	{r7, lr}
   19db6:	b082      	sub	sp, #8
   19db8:	af00      	add	r7, sp, #0
   19dba:	603a      	str	r2, [r7, #0]
   19dbc:	1dfb      	adds	r3, r7, #7
   19dbe:	1c02      	adds	r2, r0, #0
   19dc0:	701a      	strb	r2, [r3, #0]
   19dc2:	1dbb      	adds	r3, r7, #6
   19dc4:	1c0a      	adds	r2, r1, #0
   19dc6:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19dc8:	683b      	ldr	r3, [r7, #0]
   19dca:	2b00      	cmp	r3, #0
   19dcc:	d104      	bne.n	19dd8 <prvTraceSetObjectName+0x24>
   19dce:	4b2a      	ldr	r3, [pc, #168]	; (19e78 <prvTraceSetObjectName+0xc4>)
   19dd0:	0018      	movs	r0, r3
   19dd2:	4b2a      	ldr	r3, [pc, #168]	; (19e7c <prvTraceSetObjectName+0xc8>)
   19dd4:	4798      	blx	r3
   19dd6:	e04b      	b.n	19e70 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19dd8:	1dfb      	adds	r3, r7, #7
   19dda:	781b      	ldrb	r3, [r3, #0]
   19ddc:	2b08      	cmp	r3, #8
   19dde:	d904      	bls.n	19dea <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19de0:	4b27      	ldr	r3, [pc, #156]	; (19e80 <prvTraceSetObjectName+0xcc>)
   19de2:	0018      	movs	r0, r3
   19de4:	4b25      	ldr	r3, [pc, #148]	; (19e7c <prvTraceSetObjectName+0xc8>)
   19de6:	4798      	blx	r3
		return;
   19de8:	e042      	b.n	19e70 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   19dea:	1dbb      	adds	r3, r7, #6
   19dec:	781b      	ldrb	r3, [r3, #0]
   19dee:	2b00      	cmp	r3, #0
   19df0:	d104      	bne.n	19dfc <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19df2:	4b24      	ldr	r3, [pc, #144]	; (19e84 <prvTraceSetObjectName+0xd0>)
   19df4:	0018      	movs	r0, r3
   19df6:	4b21      	ldr	r3, [pc, #132]	; (19e7c <prvTraceSetObjectName+0xc8>)
   19df8:	4798      	blx	r3
		return;
   19dfa:	e039      	b.n	19e70 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19dfc:	4b22      	ldr	r3, [pc, #136]	; (19e88 <prvTraceSetObjectName+0xd4>)
   19dfe:	681a      	ldr	r2, [r3, #0]
   19e00:	1dfb      	adds	r3, r7, #7
   19e02:	781b      	ldrb	r3, [r3, #0]
   19e04:	2164      	movs	r1, #100	; 0x64
   19e06:	18d3      	adds	r3, r2, r3
   19e08:	185b      	adds	r3, r3, r1
   19e0a:	781b      	ldrb	r3, [r3, #0]
   19e0c:	1dba      	adds	r2, r7, #6
   19e0e:	7812      	ldrb	r2, [r2, #0]
   19e10:	429a      	cmp	r2, r3
   19e12:	d909      	bls.n	19e28 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19e14:	1dfb      	adds	r3, r7, #7
   19e16:	781b      	ldrb	r3, [r3, #0]
   19e18:	0018      	movs	r0, r3
   19e1a:	4b1c      	ldr	r3, [pc, #112]	; (19e8c <prvTraceSetObjectName+0xd8>)
   19e1c:	4798      	blx	r3
   19e1e:	0003      	movs	r3, r0
   19e20:	0018      	movs	r0, r3
   19e22:	4b16      	ldr	r3, [pc, #88]	; (19e7c <prvTraceSetObjectName+0xc8>)
   19e24:	4798      	blx	r3
   19e26:	e023      	b.n	19e70 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19e28:	1dfb      	adds	r3, r7, #7
   19e2a:	781a      	ldrb	r2, [r3, #0]
   19e2c:	1dbb      	adds	r3, r7, #6
   19e2e:	781b      	ldrb	r3, [r3, #0]
   19e30:	0011      	movs	r1, r2
   19e32:	0018      	movs	r0, r3
   19e34:	4b16      	ldr	r3, [pc, #88]	; (19e90 <prvTraceSetObjectName+0xdc>)
   19e36:	4798      	blx	r3
   19e38:	0003      	movs	r3, r0
   19e3a:	001a      	movs	r2, r3
   19e3c:	4b15      	ldr	r3, [pc, #84]	; (19e94 <prvTraceSetObjectName+0xe0>)
   19e3e:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   19e40:	4b15      	ldr	r3, [pc, #84]	; (19e98 <prvTraceSetObjectName+0xe4>)
   19e42:	681b      	ldr	r3, [r3, #0]
   19e44:	2b00      	cmp	r3, #0
   19e46:	d113      	bne.n	19e70 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19e48:	4b0f      	ldr	r3, [pc, #60]	; (19e88 <prvTraceSetObjectName+0xd4>)
   19e4a:	681a      	ldr	r2, [r3, #0]
   19e4c:	4b11      	ldr	r3, [pc, #68]	; (19e94 <prvTraceSetObjectName+0xe0>)
   19e4e:	881b      	ldrh	r3, [r3, #0]
   19e50:	3398      	adds	r3, #152	; 0x98
   19e52:	18d3      	adds	r3, r2, r3
   19e54:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19e56:	4b0c      	ldr	r3, [pc, #48]	; (19e88 <prvTraceSetObjectName+0xd4>)
   19e58:	681a      	ldr	r2, [r3, #0]
   19e5a:	1dfb      	adds	r3, r7, #7
   19e5c:	781b      	ldrb	r3, [r3, #0]
   19e5e:	2170      	movs	r1, #112	; 0x70
   19e60:	18d3      	adds	r3, r2, r3
   19e62:	185b      	adds	r3, r3, r1
   19e64:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19e66:	001a      	movs	r2, r3
   19e68:	683b      	ldr	r3, [r7, #0]
   19e6a:	0019      	movs	r1, r3
   19e6c:	4b0b      	ldr	r3, [pc, #44]	; (19e9c <prvTraceSetObjectName+0xe8>)
   19e6e:	4798      	blx	r3
		}
	}
}
   19e70:	46bd      	mov	sp, r7
   19e72:	b002      	add	sp, #8
   19e74:	bd80      	pop	{r7, pc}
   19e76:	46c0      	nop			; (mov r8, r8)
   19e78:	0003859c 	.word	0x0003859c
   19e7c:	00019ea1 	.word	0x00019ea1
   19e80:	000385d0 	.word	0x000385d0
   19e84:	00038600 	.word	0x00038600
   19e88:	20000df0 	.word	0x20000df0
   19e8c:	00018bc1 	.word	0x00018bc1
   19e90:	00019aad 	.word	0x00019aad
   19e94:	20000df8 	.word	0x20000df8
   19e98:	20000d50 	.word	0x20000d50
   19e9c:	00019d6d 	.word	0x00019d6d

00019ea0 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19ea0:	b580      	push	{r7, lr}
   19ea2:	b082      	sub	sp, #8
   19ea4:	af00      	add	r7, sp, #0
   19ea6:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   19ea8:	4b11      	ldr	r3, [pc, #68]	; (19ef0 <prvTraceError+0x50>)
   19eaa:	681b      	ldr	r3, [r3, #0]
   19eac:	2b00      	cmp	r3, #0
   19eae:	d001      	beq.n	19eb4 <prvTraceError+0x14>
	{
		vTraceStop();
   19eb0:	4b10      	ldr	r3, [pc, #64]	; (19ef4 <prvTraceError+0x54>)
   19eb2:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   19eb4:	4b10      	ldr	r3, [pc, #64]	; (19ef8 <prvTraceError+0x58>)
   19eb6:	681b      	ldr	r3, [r3, #0]
   19eb8:	2b00      	cmp	r3, #0
   19eba:	d115      	bne.n	19ee8 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19ebc:	4b0e      	ldr	r3, [pc, #56]	; (19ef8 <prvTraceError+0x58>)
   19ebe:	687a      	ldr	r2, [r7, #4]
   19ec0:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   19ec2:	4b0b      	ldr	r3, [pc, #44]	; (19ef0 <prvTraceError+0x50>)
   19ec4:	681b      	ldr	r3, [r3, #0]
   19ec6:	2b00      	cmp	r3, #0
   19ec8:	d00e      	beq.n	19ee8 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19eca:	4b09      	ldr	r3, [pc, #36]	; (19ef0 <prvTraceError+0x50>)
   19ecc:	681b      	ldr	r3, [r3, #0]
   19ece:	4a0b      	ldr	r2, [pc, #44]	; (19efc <prvTraceError+0x5c>)
   19ed0:	1898      	adds	r0, r3, r2
   19ed2:	4b09      	ldr	r3, [pc, #36]	; (19ef8 <prvTraceError+0x58>)
   19ed4:	681b      	ldr	r3, [r3, #0]
   19ed6:	2250      	movs	r2, #80	; 0x50
   19ed8:	0019      	movs	r1, r3
   19eda:	4b09      	ldr	r3, [pc, #36]	; (19f00 <prvTraceError+0x60>)
   19edc:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19ede:	4b04      	ldr	r3, [pc, #16]	; (19ef0 <prvTraceError+0x50>)
   19ee0:	681b      	ldr	r3, [r3, #0]
   19ee2:	4a08      	ldr	r2, [pc, #32]	; (19f04 <prvTraceError+0x64>)
   19ee4:	2101      	movs	r1, #1
   19ee6:	5099      	str	r1, [r3, r2]
		}
	}
}
   19ee8:	46c0      	nop			; (mov r8, r8)
   19eea:	46bd      	mov	sp, r7
   19eec:	b002      	add	sp, #8
   19eee:	bd80      	pop	{r7, pc}
   19ef0:	20000df0 	.word	0x20000df0
   19ef4:	00018d65 	.word	0x00018d65
   19ef8:	20000d50 	.word	0x20000d50
   19efc:	000006bc 	.word	0x000006bc
   19f00:	00019d6d 	.word	0x00019d6d
   19f04:	000006b4 	.word	0x000006b4

00019f08 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19f08:	b580      	push	{r7, lr}
   19f0a:	b086      	sub	sp, #24
   19f0c:	af00      	add	r7, sp, #0
   19f0e:	0002      	movs	r2, r0
   19f10:	1dfb      	adds	r3, r7, #7
   19f12:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19f14:	2300      	movs	r3, #0
   19f16:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19f18:	2300      	movs	r3, #0
   19f1a:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   19f1c:	1dfb      	adds	r3, r7, #7
   19f1e:	781b      	ldrb	r3, [r3, #0]
   19f20:	2b00      	cmp	r3, #0
   19f22:	d000      	beq.n	19f26 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19f24:	e089      	b.n	1a03a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19f26:	4b49      	ldr	r3, [pc, #292]	; (1a04c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19f28:	0018      	movs	r0, r3
   19f2a:	4b49      	ldr	r3, [pc, #292]	; (1a050 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   19f2c:	4798      	blx	r3
   19f2e:	e08a      	b.n	1a046 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   19f30:	4b48      	ldr	r3, [pc, #288]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f32:	681b      	ldr	r3, [r3, #0]
   19f34:	69da      	ldr	r2, [r3, #28]
   19f36:	697b      	ldr	r3, [r7, #20]
   19f38:	18d3      	adds	r3, r2, r3
   19f3a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19f3c:	4b45      	ldr	r3, [pc, #276]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f3e:	6819      	ldr	r1, [r3, #0]
   19f40:	693b      	ldr	r3, [r7, #16]
   19f42:	009a      	lsls	r2, r3, #2
   19f44:	23e2      	movs	r3, #226	; 0xe2
   19f46:	00db      	lsls	r3, r3, #3
   19f48:	188a      	adds	r2, r1, r2
   19f4a:	18d3      	adds	r3, r2, r3
   19f4c:	781b      	ldrb	r3, [r3, #0]
   19f4e:	2b98      	cmp	r3, #152	; 0x98
   19f50:	d934      	bls.n	19fbc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19f52:	4b40      	ldr	r3, [pc, #256]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f54:	6819      	ldr	r1, [r3, #0]
   19f56:	693b      	ldr	r3, [r7, #16]
   19f58:	009a      	lsls	r2, r3, #2
   19f5a:	23e2      	movs	r3, #226	; 0xe2
   19f5c:	00db      	lsls	r3, r3, #3
   19f5e:	188a      	adds	r2, r1, r2
   19f60:	18d3      	adds	r3, r2, r3
   19f62:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19f64:	2ba7      	cmp	r3, #167	; 0xa7
   19f66:	d829      	bhi.n	19fbc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19f68:	4b3a      	ldr	r3, [pc, #232]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f6a:	6819      	ldr	r1, [r3, #0]
   19f6c:	693b      	ldr	r3, [r7, #16]
   19f6e:	009a      	lsls	r2, r3, #2
   19f70:	23e2      	movs	r3, #226	; 0xe2
   19f72:	00db      	lsls	r3, r3, #3
   19f74:	188a      	adds	r2, r1, r2
   19f76:	18d3      	adds	r3, r2, r3
   19f78:	781a      	ldrb	r2, [r3, #0]
   19f7a:	230f      	movs	r3, #15
   19f7c:	18fb      	adds	r3, r7, r3
   19f7e:	3268      	adds	r2, #104	; 0x68
   19f80:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19f82:	230f      	movs	r3, #15
   19f84:	18fb      	adds	r3, r7, r3
   19f86:	781a      	ldrb	r2, [r3, #0]
   19f88:	693b      	ldr	r3, [r7, #16]
   19f8a:	18d2      	adds	r2, r2, r3
   19f8c:	4b31      	ldr	r3, [pc, #196]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f8e:	681b      	ldr	r3, [r3, #0]
   19f90:	699b      	ldr	r3, [r3, #24]
   19f92:	429a      	cmp	r2, r3
   19f94:	d24d      	bcs.n	1a032 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   19f96:	4b2f      	ldr	r3, [pc, #188]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19f98:	681a      	ldr	r2, [r3, #0]
   19f9a:	693b      	ldr	r3, [r7, #16]
   19f9c:	009b      	lsls	r3, r3, #2
   19f9e:	21e2      	movs	r1, #226	; 0xe2
   19fa0:	00c9      	lsls	r1, r1, #3
   19fa2:	468c      	mov	ip, r1
   19fa4:	4463      	add	r3, ip
   19fa6:	18d0      	adds	r0, r2, r3
   19fa8:	230f      	movs	r3, #15
   19faa:	18fb      	adds	r3, r7, r3
   19fac:	781b      	ldrb	r3, [r3, #0]
   19fae:	3301      	adds	r3, #1
   19fb0:	009b      	lsls	r3, r3, #2
   19fb2:	001a      	movs	r2, r3
   19fb4:	2100      	movs	r1, #0
   19fb6:	4b28      	ldr	r3, [pc, #160]	; (1a058 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19fb8:	4798      	blx	r3
		{
   19fba:	e03a      	b.n	1a032 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   19fbc:	4b25      	ldr	r3, [pc, #148]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19fbe:	6819      	ldr	r1, [r3, #0]
   19fc0:	693b      	ldr	r3, [r7, #16]
   19fc2:	009a      	lsls	r2, r3, #2
   19fc4:	23e2      	movs	r3, #226	; 0xe2
   19fc6:	00db      	lsls	r3, r3, #3
   19fc8:	188a      	adds	r2, r1, r2
   19fca:	18d3      	adds	r3, r2, r3
   19fcc:	781b      	ldrb	r3, [r3, #0]
   19fce:	2b01      	cmp	r3, #1
   19fd0:	d130      	bne.n	1a034 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   19fd2:	693b      	ldr	r3, [r7, #16]
   19fd4:	1c5a      	adds	r2, r3, #1
   19fd6:	4b1f      	ldr	r3, [pc, #124]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19fd8:	681b      	ldr	r3, [r3, #0]
   19fda:	699b      	ldr	r3, [r3, #24]
   19fdc:	429a      	cmp	r2, r3
   19fde:	d20e      	bcs.n	19ffe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   19fe0:	4b1c      	ldr	r3, [pc, #112]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19fe2:	681a      	ldr	r2, [r3, #0]
   19fe4:	693b      	ldr	r3, [r7, #16]
   19fe6:	009b      	lsls	r3, r3, #2
   19fe8:	21e2      	movs	r1, #226	; 0xe2
   19fea:	00c9      	lsls	r1, r1, #3
   19fec:	468c      	mov	ip, r1
   19fee:	4463      	add	r3, ip
   19ff0:	18d3      	adds	r3, r2, r3
   19ff2:	2208      	movs	r2, #8
   19ff4:	2100      	movs	r1, #0
   19ff6:	0018      	movs	r0, r3
   19ff8:	4b17      	ldr	r3, [pc, #92]	; (1a058 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19ffa:	4798      	blx	r3
   19ffc:	e01a      	b.n	1a034 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   19ffe:	4b15      	ldr	r3, [pc, #84]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a000:	681b      	ldr	r3, [r3, #0]
   1a002:	22e2      	movs	r2, #226	; 0xe2
   1a004:	00d2      	lsls	r2, r2, #3
   1a006:	4694      	mov	ip, r2
   1a008:	4463      	add	r3, ip
   1a00a:	2204      	movs	r2, #4
   1a00c:	2100      	movs	r1, #0
   1a00e:	0018      	movs	r0, r3
   1a010:	4b11      	ldr	r3, [pc, #68]	; (1a058 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a012:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a014:	4b0f      	ldr	r3, [pc, #60]	; (1a054 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a016:	681a      	ldr	r2, [r3, #0]
   1a018:	693b      	ldr	r3, [r7, #16]
   1a01a:	009b      	lsls	r3, r3, #2
   1a01c:	21e2      	movs	r1, #226	; 0xe2
   1a01e:	00c9      	lsls	r1, r1, #3
   1a020:	468c      	mov	ip, r1
   1a022:	4463      	add	r3, ip
   1a024:	18d3      	adds	r3, r2, r3
   1a026:	2204      	movs	r2, #4
   1a028:	2100      	movs	r1, #0
   1a02a:	0018      	movs	r0, r3
   1a02c:	4b0a      	ldr	r3, [pc, #40]	; (1a058 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a02e:	4798      	blx	r3
   1a030:	e000      	b.n	1a034 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a032:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a034:	697b      	ldr	r3, [r7, #20]
   1a036:	3301      	adds	r3, #1
   1a038:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a03a:	1dfb      	adds	r3, r7, #7
   1a03c:	781a      	ldrb	r2, [r3, #0]
   1a03e:	697b      	ldr	r3, [r7, #20]
   1a040:	429a      	cmp	r2, r3
   1a042:	d900      	bls.n	1a046 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a044:	e774      	b.n	19f30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a046:	46bd      	mov	sp, r7
   1a048:	b006      	add	sp, #24
   1a04a:	bd80      	pop	{r7, pc}
   1a04c:	00038660 	.word	0x00038660
   1a050:	00019ea1 	.word	0x00019ea1
   1a054:	20000df0 	.word	0x20000df0
   1a058:	00034e13 	.word	0x00034e13

0001a05c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a05c:	b580      	push	{r7, lr}
   1a05e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a060:	4b12      	ldr	r3, [pc, #72]	; (1a0ac <prvTraceUpdateCounters+0x50>)
   1a062:	681b      	ldr	r3, [r3, #0]
   1a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a066:	2b00      	cmp	r3, #0
   1a068:	d01c      	beq.n	1a0a4 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a06a:	4b10      	ldr	r3, [pc, #64]	; (1a0ac <prvTraceUpdateCounters+0x50>)
   1a06c:	681b      	ldr	r3, [r3, #0]
   1a06e:	695a      	ldr	r2, [r3, #20]
   1a070:	3201      	adds	r2, #1
   1a072:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a074:	4b0d      	ldr	r3, [pc, #52]	; (1a0ac <prvTraceUpdateCounters+0x50>)
   1a076:	681b      	ldr	r3, [r3, #0]
   1a078:	69da      	ldr	r2, [r3, #28]
   1a07a:	3201      	adds	r2, #1
   1a07c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a07e:	4b0b      	ldr	r3, [pc, #44]	; (1a0ac <prvTraceUpdateCounters+0x50>)
   1a080:	681b      	ldr	r3, [r3, #0]
   1a082:	69da      	ldr	r2, [r3, #28]
   1a084:	232c      	movs	r3, #44	; 0x2c
   1a086:	33ff      	adds	r3, #255	; 0xff
   1a088:	429a      	cmp	r2, r3
   1a08a:	d907      	bls.n	1a09c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a08c:	4b07      	ldr	r3, [pc, #28]	; (1a0ac <prvTraceUpdateCounters+0x50>)
   1a08e:	681b      	ldr	r3, [r3, #0]
   1a090:	2201      	movs	r2, #1
   1a092:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a094:	4b05      	ldr	r3, [pc, #20]	; (1a0ac <prvTraceUpdateCounters+0x50>)
   1a096:	681b      	ldr	r3, [r3, #0]
   1a098:	2200      	movs	r2, #0
   1a09a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a09c:	2001      	movs	r0, #1
   1a09e:	4b04      	ldr	r3, [pc, #16]	; (1a0b0 <prvTraceUpdateCounters+0x54>)
   1a0a0:	4798      	blx	r3
   1a0a2:	e000      	b.n	1a0a6 <prvTraceUpdateCounters+0x4a>
		return;
   1a0a4:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a0a6:	46bd      	mov	sp, r7
   1a0a8:	bd80      	pop	{r7, pc}
   1a0aa:	46c0      	nop			; (mov r8, r8)
   1a0ac:	20000df0 	.word	0x20000df0
   1a0b0:	00019f09 	.word	0x00019f09

0001a0b4 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a0b4:	b5b0      	push	{r4, r5, r7, lr}
   1a0b6:	b086      	sub	sp, #24
   1a0b8:	af00      	add	r7, sp, #0
   1a0ba:	0002      	movs	r2, r0
   1a0bc:	1dbb      	adds	r3, r7, #6
   1a0be:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a0c0:	2300      	movs	r3, #0
   1a0c2:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a0c4:	2300      	movs	r3, #0
   1a0c6:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a0c8:	2300      	movs	r3, #0
   1a0ca:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a0cc:	1dbb      	adds	r3, r7, #6
   1a0ce:	881b      	ldrh	r3, [r3, #0]
   1a0d0:	2bff      	cmp	r3, #255	; 0xff
   1a0d2:	d00a      	beq.n	1a0ea <prvTraceGetDTS+0x36>
   1a0d4:	1dbb      	adds	r3, r7, #6
   1a0d6:	881b      	ldrh	r3, [r3, #0]
   1a0d8:	4a60      	ldr	r2, [pc, #384]	; (1a25c <prvTraceGetDTS+0x1a8>)
   1a0da:	4293      	cmp	r3, r2
   1a0dc:	d005      	beq.n	1a0ea <prvTraceGetDTS+0x36>
   1a0de:	4b60      	ldr	r3, [pc, #384]	; (1a260 <prvTraceGetDTS+0x1ac>)
   1a0e0:	0018      	movs	r0, r3
   1a0e2:	4b60      	ldr	r3, [pc, #384]	; (1a264 <prvTraceGetDTS+0x1b0>)
   1a0e4:	4798      	blx	r3
   1a0e6:	2300      	movs	r3, #0
   1a0e8:	e0b3      	b.n	1a252 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a0ea:	4b5f      	ldr	r3, [pc, #380]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a0ec:	681b      	ldr	r3, [r3, #0]
   1a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a0f0:	2b00      	cmp	r3, #0
   1a0f2:	d118      	bne.n	1a126 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a0f4:	4b5d      	ldr	r3, [pc, #372]	; (1a26c <prvTraceGetDTS+0x1b8>)
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	2b00      	cmp	r3, #0
   1a0fa:	d006      	beq.n	1a10a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a0fc:	4b5a      	ldr	r3, [pc, #360]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a0fe:	681b      	ldr	r3, [r3, #0]
   1a100:	4a5a      	ldr	r2, [pc, #360]	; (1a26c <prvTraceGetDTS+0x1b8>)
   1a102:	6812      	ldr	r2, [r2, #0]
   1a104:	0892      	lsrs	r2, r2, #2
   1a106:	625a      	str	r2, [r3, #36]	; 0x24
   1a108:	e00d      	b.n	1a126 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a10a:	4b59      	ldr	r3, [pc, #356]	; (1a270 <prvTraceGetDTS+0x1bc>)
   1a10c:	681a      	ldr	r2, [r3, #0]
   1a10e:	4b59      	ldr	r3, [pc, #356]	; (1a274 <prvTraceGetDTS+0x1c0>)
   1a110:	681b      	ldr	r3, [r3, #0]
   1a112:	429a      	cmp	r2, r3
   1a114:	d007      	beq.n	1a126 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a116:	4b54      	ldr	r3, [pc, #336]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a118:	681c      	ldr	r4, [r3, #0]
   1a11a:	2000      	movs	r0, #0
   1a11c:	4b56      	ldr	r3, [pc, #344]	; (1a278 <prvTraceGetDTS+0x1c4>)
   1a11e:	4798      	blx	r3
   1a120:	0003      	movs	r3, r0
   1a122:	089b      	lsrs	r3, r3, #2
   1a124:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a126:	230c      	movs	r3, #12
   1a128:	18fb      	adds	r3, r7, r3
   1a12a:	0018      	movs	r0, r3
   1a12c:	4b53      	ldr	r3, [pc, #332]	; (1a27c <prvTraceGetDTS+0x1c8>)
   1a12e:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a130:	68fa      	ldr	r2, [r7, #12]
   1a132:	4b53      	ldr	r3, [pc, #332]	; (1a280 <prvTraceGetDTS+0x1cc>)
   1a134:	681b      	ldr	r3, [r3, #0]
   1a136:	1ad3      	subs	r3, r2, r3
   1a138:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a13a:	68fa      	ldr	r2, [r7, #12]
   1a13c:	4b50      	ldr	r3, [pc, #320]	; (1a280 <prvTraceGetDTS+0x1cc>)
   1a13e:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a140:	4b49      	ldr	r3, [pc, #292]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a142:	681b      	ldr	r3, [r3, #0]
   1a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a146:	2b00      	cmp	r3, #0
   1a148:	d044      	beq.n	1a1d4 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a14a:	4b47      	ldr	r3, [pc, #284]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a14c:	681b      	ldr	r3, [r3, #0]
   1a14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a150:	693b      	ldr	r3, [r7, #16]
   1a152:	429a      	cmp	r2, r3
   1a154:	d21e      	bcs.n	1a194 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a156:	4b44      	ldr	r3, [pc, #272]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a158:	681c      	ldr	r4, [r3, #0]
   1a15a:	4b43      	ldr	r3, [pc, #268]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a15c:	681b      	ldr	r3, [r3, #0]
   1a15e:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a160:	4b41      	ldr	r3, [pc, #260]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a162:	681b      	ldr	r3, [r3, #0]
   1a164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a166:	4b47      	ldr	r3, [pc, #284]	; (1a284 <prvTraceGetDTS+0x1d0>)
   1a168:	0011      	movs	r1, r2
   1a16a:	6938      	ldr	r0, [r7, #16]
   1a16c:	4798      	blx	r3
   1a16e:	0003      	movs	r3, r0
   1a170:	18eb      	adds	r3, r5, r3
   1a172:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a174:	4b3c      	ldr	r3, [pc, #240]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a176:	681c      	ldr	r4, [r3, #0]
   1a178:	4b3b      	ldr	r3, [pc, #236]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a17a:	681b      	ldr	r3, [r3, #0]
   1a17c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a17e:	4b3a      	ldr	r3, [pc, #232]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a180:	681b      	ldr	r3, [r3, #0]
   1a182:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a184:	693a      	ldr	r2, [r7, #16]
   1a186:	4b40      	ldr	r3, [pc, #256]	; (1a288 <prvTraceGetDTS+0x1d4>)
   1a188:	0010      	movs	r0, r2
   1a18a:	4798      	blx	r3
   1a18c:	000b      	movs	r3, r1
   1a18e:	18eb      	adds	r3, r5, r3
   1a190:	62a3      	str	r3, [r4, #40]	; 0x28
   1a192:	e007      	b.n	1a1a4 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a194:	4b34      	ldr	r3, [pc, #208]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a196:	681b      	ldr	r3, [r3, #0]
   1a198:	4a33      	ldr	r2, [pc, #204]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a19a:	6812      	ldr	r2, [r2, #0]
   1a19c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a19e:	693a      	ldr	r2, [r7, #16]
   1a1a0:	188a      	adds	r2, r1, r2
   1a1a2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a1a4:	4b30      	ldr	r3, [pc, #192]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1a6:	681b      	ldr	r3, [r3, #0]
   1a1a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a1aa:	4b2f      	ldr	r3, [pc, #188]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1ac:	681b      	ldr	r3, [r3, #0]
   1a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a1b0:	429a      	cmp	r2, r3
   1a1b2:	d313      	bcc.n	1a1dc <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a1b4:	4b2c      	ldr	r3, [pc, #176]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1b6:	681b      	ldr	r3, [r3, #0]
   1a1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a1ba:	3201      	adds	r2, #1
   1a1bc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a1be:	4b2a      	ldr	r3, [pc, #168]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1c0:	681b      	ldr	r3, [r3, #0]
   1a1c2:	4a29      	ldr	r2, [pc, #164]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1c4:	6812      	ldr	r2, [r2, #0]
   1a1c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a1c8:	4a27      	ldr	r2, [pc, #156]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1ca:	6812      	ldr	r2, [r2, #0]
   1a1cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a1ce:	1a8a      	subs	r2, r1, r2
   1a1d0:	629a      	str	r2, [r3, #40]	; 0x28
   1a1d2:	e003      	b.n	1a1dc <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a1d4:	4b24      	ldr	r3, [pc, #144]	; (1a268 <prvTraceGetDTS+0x1b4>)
   1a1d6:	681b      	ldr	r3, [r3, #0]
   1a1d8:	68fa      	ldr	r2, [r7, #12]
   1a1da:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a1dc:	1dbb      	adds	r3, r7, #6
   1a1de:	881a      	ldrh	r2, [r3, #0]
   1a1e0:	693b      	ldr	r3, [r7, #16]
   1a1e2:	429a      	cmp	r2, r3
   1a1e4:	d22f      	bcs.n	1a246 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a1e6:	4b29      	ldr	r3, [pc, #164]	; (1a28c <prvTraceGetDTS+0x1d8>)
   1a1e8:	4798      	blx	r3
   1a1ea:	0003      	movs	r3, r0
   1a1ec:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a1ee:	697b      	ldr	r3, [r7, #20]
   1a1f0:	2b00      	cmp	r3, #0
   1a1f2:	d028      	beq.n	1a246 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a1f4:	1dbb      	adds	r3, r7, #6
   1a1f6:	881b      	ldrh	r3, [r3, #0]
   1a1f8:	4a18      	ldr	r2, [pc, #96]	; (1a25c <prvTraceGetDTS+0x1a8>)
   1a1fa:	4293      	cmp	r3, r2
   1a1fc:	d10b      	bne.n	1a216 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a1fe:	697b      	ldr	r3, [r7, #20]
   1a200:	22a9      	movs	r2, #169	; 0xa9
   1a202:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a204:	693b      	ldr	r3, [r7, #16]
   1a206:	0c1b      	lsrs	r3, r3, #16
   1a208:	b29a      	uxth	r2, r3
   1a20a:	697b      	ldr	r3, [r7, #20]
   1a20c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a20e:	697b      	ldr	r3, [r7, #20]
   1a210:	2200      	movs	r2, #0
   1a212:	705a      	strb	r2, [r3, #1]
   1a214:	e015      	b.n	1a242 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a216:	1dbb      	adds	r3, r7, #6
   1a218:	881b      	ldrh	r3, [r3, #0]
   1a21a:	2bff      	cmp	r3, #255	; 0xff
   1a21c:	d10d      	bne.n	1a23a <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a21e:	697b      	ldr	r3, [r7, #20]
   1a220:	22a8      	movs	r2, #168	; 0xa8
   1a222:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a224:	693b      	ldr	r3, [r7, #16]
   1a226:	0a1b      	lsrs	r3, r3, #8
   1a228:	b29a      	uxth	r2, r3
   1a22a:	697b      	ldr	r3, [r7, #20]
   1a22c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a22e:	693b      	ldr	r3, [r7, #16]
   1a230:	0e1b      	lsrs	r3, r3, #24
   1a232:	b2da      	uxtb	r2, r3
   1a234:	697b      	ldr	r3, [r7, #20]
   1a236:	705a      	strb	r2, [r3, #1]
   1a238:	e003      	b.n	1a242 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a23a:	4b15      	ldr	r3, [pc, #84]	; (1a290 <prvTraceGetDTS+0x1dc>)
   1a23c:	0018      	movs	r0, r3
   1a23e:	4b09      	ldr	r3, [pc, #36]	; (1a264 <prvTraceGetDTS+0x1b0>)
   1a240:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a242:	4b14      	ldr	r3, [pc, #80]	; (1a294 <prvTraceGetDTS+0x1e0>)
   1a244:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a246:	693b      	ldr	r3, [r7, #16]
   1a248:	b29b      	uxth	r3, r3
   1a24a:	1dba      	adds	r2, r7, #6
   1a24c:	8812      	ldrh	r2, [r2, #0]
   1a24e:	4013      	ands	r3, r2
   1a250:	b29b      	uxth	r3, r3
}
   1a252:	0018      	movs	r0, r3
   1a254:	46bd      	mov	sp, r7
   1a256:	b006      	add	sp, #24
   1a258:	bdb0      	pop	{r4, r5, r7, pc}
   1a25a:	46c0      	nop			; (mov r8, r8)
   1a25c:	0000ffff 	.word	0x0000ffff
   1a260:	000386b8 	.word	0x000386b8
   1a264:	00019ea1 	.word	0x00019ea1
   1a268:	20000df0 	.word	0x20000df0
   1a26c:	20000d4c 	.word	0x20000d4c
   1a270:	e000e018 	.word	0xe000e018
   1a274:	20005608 	.word	0x20005608
   1a278:	0002a179 	.word	0x0002a179
   1a27c:	0001a299 	.word	0x0001a299
   1a280:	20000dfc 	.word	0x20000dfc
   1a284:	00032d95 	.word	0x00032d95
   1a288:	00032ea1 	.word	0x00032ea1
   1a28c:	00019a59 	.word	0x00019a59
   1a290:	000386f8 	.word	0x000386f8
   1a294:	0001a05d 	.word	0x0001a05d

0001a298 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a298:	b580      	push	{r7, lr}
   1a29a:	b084      	sub	sp, #16
   1a29c:	af00      	add	r7, sp, #0
   1a29e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a2a0:	2300      	movs	r3, #0
   1a2a2:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a2a4:	2300      	movs	r3, #0
   1a2a6:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a2a8:	4b2d      	ldr	r3, [pc, #180]	; (1a360 <prvTracePortGetTimeStamp+0xc8>)
   1a2aa:	681b      	ldr	r3, [r3, #0]
   1a2ac:	2b01      	cmp	r3, #1
   1a2ae:	d107      	bne.n	1a2c0 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a2b0:	687b      	ldr	r3, [r7, #4]
   1a2b2:	2b00      	cmp	r3, #0
   1a2b4:	d04f      	beq.n	1a356 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a2b6:	4b2b      	ldr	r3, [pc, #172]	; (1a364 <prvTracePortGetTimeStamp+0xcc>)
   1a2b8:	681a      	ldr	r2, [r3, #0]
   1a2ba:	687b      	ldr	r3, [r7, #4]
   1a2bc:	601a      	str	r2, [r3, #0]
		return;
   1a2be:	e04a      	b.n	1a356 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a2c0:	4b29      	ldr	r3, [pc, #164]	; (1a368 <prvTracePortGetTimeStamp+0xd0>)
   1a2c2:	681a      	ldr	r2, [r3, #0]
   1a2c4:	4b29      	ldr	r3, [pc, #164]	; (1a36c <prvTracePortGetTimeStamp+0xd4>)
   1a2c6:	681b      	ldr	r3, [r3, #0]
   1a2c8:	1ad3      	subs	r3, r2, r3
   1a2ca:	3301      	adds	r3, #1
   1a2cc:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a2ce:	4b28      	ldr	r3, [pc, #160]	; (1a370 <prvTracePortGetTimeStamp+0xd8>)
   1a2d0:	681a      	ldr	r2, [r3, #0]
   1a2d2:	4b28      	ldr	r3, [pc, #160]	; (1a374 <prvTracePortGetTimeStamp+0xdc>)
   1a2d4:	681b      	ldr	r3, [r3, #0]
   1a2d6:	1ad3      	subs	r3, r2, r3
   1a2d8:	3b01      	subs	r3, #1
   1a2da:	2b00      	cmp	r3, #0
   1a2dc:	db03      	blt.n	1a2e6 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a2de:	4b24      	ldr	r3, [pc, #144]	; (1a370 <prvTracePortGetTimeStamp+0xd8>)
   1a2e0:	681b      	ldr	r3, [r3, #0]
   1a2e2:	60fb      	str	r3, [r7, #12]
   1a2e4:	e002      	b.n	1a2ec <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a2e6:	4b23      	ldr	r3, [pc, #140]	; (1a374 <prvTracePortGetTimeStamp+0xdc>)
   1a2e8:	681b      	ldr	r3, [r3, #0]
   1a2ea:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a2ec:	4b20      	ldr	r3, [pc, #128]	; (1a370 <prvTracePortGetTimeStamp+0xd8>)
   1a2ee:	681b      	ldr	r3, [r3, #0]
   1a2f0:	68fa      	ldr	r2, [r7, #12]
   1a2f2:	429a      	cmp	r2, r3
   1a2f4:	d107      	bne.n	1a306 <prvTracePortGetTimeStamp+0x6e>
   1a2f6:	4b20      	ldr	r3, [pc, #128]	; (1a378 <prvTracePortGetTimeStamp+0xe0>)
   1a2f8:	681b      	ldr	r3, [r3, #0]
   1a2fa:	68ba      	ldr	r2, [r7, #8]
   1a2fc:	429a      	cmp	r2, r3
   1a2fe:	d202      	bcs.n	1a306 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a300:	68fb      	ldr	r3, [r7, #12]
   1a302:	3301      	adds	r3, #1
   1a304:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a306:	687b      	ldr	r3, [r7, #4]
   1a308:	2b00      	cmp	r3, #0
   1a30a:	d016      	beq.n	1a33a <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a30c:	4b16      	ldr	r3, [pc, #88]	; (1a368 <prvTracePortGetTimeStamp+0xd0>)
   1a30e:	681b      	ldr	r3, [r3, #0]
   1a310:	3301      	adds	r3, #1
   1a312:	089b      	lsrs	r3, r3, #2
   1a314:	68fa      	ldr	r2, [r7, #12]
   1a316:	435a      	muls	r2, r3
   1a318:	4b12      	ldr	r3, [pc, #72]	; (1a364 <prvTracePortGetTimeStamp+0xcc>)
   1a31a:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a31c:	4b12      	ldr	r3, [pc, #72]	; (1a368 <prvTracePortGetTimeStamp+0xd0>)
   1a31e:	681b      	ldr	r3, [r3, #0]
   1a320:	3301      	adds	r3, #1
   1a322:	2203      	movs	r2, #3
   1a324:	4013      	ands	r3, r2
   1a326:	68fa      	ldr	r2, [r7, #12]
   1a328:	435a      	muls	r2, r3
   1a32a:	68bb      	ldr	r3, [r7, #8]
   1a32c:	18d3      	adds	r3, r2, r3
   1a32e:	089a      	lsrs	r2, r3, #2
   1a330:	4b0c      	ldr	r3, [pc, #48]	; (1a364 <prvTracePortGetTimeStamp+0xcc>)
   1a332:	681b      	ldr	r3, [r3, #0]
   1a334:	18d2      	adds	r2, r2, r3
   1a336:	4b0b      	ldr	r3, [pc, #44]	; (1a364 <prvTracePortGetTimeStamp+0xcc>)
   1a338:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a33a:	4b0d      	ldr	r3, [pc, #52]	; (1a370 <prvTracePortGetTimeStamp+0xd8>)
   1a33c:	68fa      	ldr	r2, [r7, #12]
   1a33e:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a340:	687b      	ldr	r3, [r7, #4]
   1a342:	2b00      	cmp	r3, #0
   1a344:	d003      	beq.n	1a34e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a346:	4b07      	ldr	r3, [pc, #28]	; (1a364 <prvTracePortGetTimeStamp+0xcc>)
   1a348:	681a      	ldr	r2, [r3, #0]
   1a34a:	687b      	ldr	r3, [r7, #4]
   1a34c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a34e:	4b0a      	ldr	r3, [pc, #40]	; (1a378 <prvTracePortGetTimeStamp+0xe0>)
   1a350:	68ba      	ldr	r2, [r7, #8]
   1a352:	601a      	str	r2, [r3, #0]
   1a354:	e000      	b.n	1a358 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a356:	46c0      	nop			; (mov r8, r8)
}
   1a358:	46bd      	mov	sp, r7
   1a35a:	b004      	add	sp, #16
   1a35c:	bd80      	pop	{r7, pc}
   1a35e:	46c0      	nop			; (mov r8, r8)
   1a360:	20000d3c 	.word	0x20000d3c
   1a364:	20000d40 	.word	0x20000d40
   1a368:	e000e014 	.word	0xe000e014
   1a36c:	e000e018 	.word	0xe000e018
   1a370:	20000e00 	.word	0x20000e00
   1a374:	20000d38 	.word	0x20000d38
   1a378:	20000e04 	.word	0x20000e04

0001a37c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a37c:	b580      	push	{r7, lr}
   1a37e:	b082      	sub	sp, #8
   1a380:	af00      	add	r7, sp, #0
   1a382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a384:	687b      	ldr	r3, [r7, #4]
   1a386:	3308      	adds	r3, #8
   1a388:	001a      	movs	r2, r3
   1a38a:	687b      	ldr	r3, [r7, #4]
   1a38c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a38e:	687b      	ldr	r3, [r7, #4]
   1a390:	2201      	movs	r2, #1
   1a392:	4252      	negs	r2, r2
   1a394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a396:	687b      	ldr	r3, [r7, #4]
   1a398:	3308      	adds	r3, #8
   1a39a:	001a      	movs	r2, r3
   1a39c:	687b      	ldr	r3, [r7, #4]
   1a39e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a3a0:	687b      	ldr	r3, [r7, #4]
   1a3a2:	3308      	adds	r3, #8
   1a3a4:	001a      	movs	r2, r3
   1a3a6:	687b      	ldr	r3, [r7, #4]
   1a3a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a3aa:	687b      	ldr	r3, [r7, #4]
   1a3ac:	2200      	movs	r2, #0
   1a3ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a3b0:	46c0      	nop			; (mov r8, r8)
   1a3b2:	46bd      	mov	sp, r7
   1a3b4:	b002      	add	sp, #8
   1a3b6:	bd80      	pop	{r7, pc}

0001a3b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1a3b8:	b580      	push	{r7, lr}
   1a3ba:	b082      	sub	sp, #8
   1a3bc:	af00      	add	r7, sp, #0
   1a3be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1a3c0:	687b      	ldr	r3, [r7, #4]
   1a3c2:	2200      	movs	r2, #0
   1a3c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a3c6:	46c0      	nop			; (mov r8, r8)
   1a3c8:	46bd      	mov	sp, r7
   1a3ca:	b002      	add	sp, #8
   1a3cc:	bd80      	pop	{r7, pc}

0001a3ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a3ce:	b580      	push	{r7, lr}
   1a3d0:	b084      	sub	sp, #16
   1a3d2:	af00      	add	r7, sp, #0
   1a3d4:	6078      	str	r0, [r7, #4]
   1a3d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1a3d8:	687b      	ldr	r3, [r7, #4]
   1a3da:	685b      	ldr	r3, [r3, #4]
   1a3dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1a3de:	683b      	ldr	r3, [r7, #0]
   1a3e0:	68fa      	ldr	r2, [r7, #12]
   1a3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a3e4:	68fb      	ldr	r3, [r7, #12]
   1a3e6:	689a      	ldr	r2, [r3, #8]
   1a3e8:	683b      	ldr	r3, [r7, #0]
   1a3ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a3ec:	68fb      	ldr	r3, [r7, #12]
   1a3ee:	689b      	ldr	r3, [r3, #8]
   1a3f0:	683a      	ldr	r2, [r7, #0]
   1a3f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a3f4:	68fb      	ldr	r3, [r7, #12]
   1a3f6:	683a      	ldr	r2, [r7, #0]
   1a3f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a3fa:	683b      	ldr	r3, [r7, #0]
   1a3fc:	687a      	ldr	r2, [r7, #4]
   1a3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a400:	687b      	ldr	r3, [r7, #4]
   1a402:	681b      	ldr	r3, [r3, #0]
   1a404:	1c5a      	adds	r2, r3, #1
   1a406:	687b      	ldr	r3, [r7, #4]
   1a408:	601a      	str	r2, [r3, #0]
}
   1a40a:	46c0      	nop			; (mov r8, r8)
   1a40c:	46bd      	mov	sp, r7
   1a40e:	b004      	add	sp, #16
   1a410:	bd80      	pop	{r7, pc}

0001a412 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a412:	b580      	push	{r7, lr}
   1a414:	b084      	sub	sp, #16
   1a416:	af00      	add	r7, sp, #0
   1a418:	6078      	str	r0, [r7, #4]
   1a41a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a41c:	683b      	ldr	r3, [r7, #0]
   1a41e:	681b      	ldr	r3, [r3, #0]
   1a420:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a422:	68bb      	ldr	r3, [r7, #8]
   1a424:	3301      	adds	r3, #1
   1a426:	d103      	bne.n	1a430 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1a428:	687b      	ldr	r3, [r7, #4]
   1a42a:	691b      	ldr	r3, [r3, #16]
   1a42c:	60fb      	str	r3, [r7, #12]
   1a42e:	e00c      	b.n	1a44a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a430:	687b      	ldr	r3, [r7, #4]
   1a432:	3308      	adds	r3, #8
   1a434:	60fb      	str	r3, [r7, #12]
   1a436:	e002      	b.n	1a43e <vListInsert+0x2c>
   1a438:	68fb      	ldr	r3, [r7, #12]
   1a43a:	685b      	ldr	r3, [r3, #4]
   1a43c:	60fb      	str	r3, [r7, #12]
   1a43e:	68fb      	ldr	r3, [r7, #12]
   1a440:	685b      	ldr	r3, [r3, #4]
   1a442:	681a      	ldr	r2, [r3, #0]
   1a444:	68bb      	ldr	r3, [r7, #8]
   1a446:	429a      	cmp	r2, r3
   1a448:	d9f6      	bls.n	1a438 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1a44a:	68fb      	ldr	r3, [r7, #12]
   1a44c:	685a      	ldr	r2, [r3, #4]
   1a44e:	683b      	ldr	r3, [r7, #0]
   1a450:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a452:	683b      	ldr	r3, [r7, #0]
   1a454:	685b      	ldr	r3, [r3, #4]
   1a456:	683a      	ldr	r2, [r7, #0]
   1a458:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a45a:	683b      	ldr	r3, [r7, #0]
   1a45c:	68fa      	ldr	r2, [r7, #12]
   1a45e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1a460:	68fb      	ldr	r3, [r7, #12]
   1a462:	683a      	ldr	r2, [r7, #0]
   1a464:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a466:	683b      	ldr	r3, [r7, #0]
   1a468:	687a      	ldr	r2, [r7, #4]
   1a46a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a46c:	687b      	ldr	r3, [r7, #4]
   1a46e:	681b      	ldr	r3, [r3, #0]
   1a470:	1c5a      	adds	r2, r3, #1
   1a472:	687b      	ldr	r3, [r7, #4]
   1a474:	601a      	str	r2, [r3, #0]
}
   1a476:	46c0      	nop			; (mov r8, r8)
   1a478:	46bd      	mov	sp, r7
   1a47a:	b004      	add	sp, #16
   1a47c:	bd80      	pop	{r7, pc}

0001a47e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1a47e:	b580      	push	{r7, lr}
   1a480:	b084      	sub	sp, #16
   1a482:	af00      	add	r7, sp, #0
   1a484:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1a486:	687b      	ldr	r3, [r7, #4]
   1a488:	691b      	ldr	r3, [r3, #16]
   1a48a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a48c:	687b      	ldr	r3, [r7, #4]
   1a48e:	685b      	ldr	r3, [r3, #4]
   1a490:	687a      	ldr	r2, [r7, #4]
   1a492:	6892      	ldr	r2, [r2, #8]
   1a494:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a496:	687b      	ldr	r3, [r7, #4]
   1a498:	689b      	ldr	r3, [r3, #8]
   1a49a:	687a      	ldr	r2, [r7, #4]
   1a49c:	6852      	ldr	r2, [r2, #4]
   1a49e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a4a0:	68fb      	ldr	r3, [r7, #12]
   1a4a2:	685a      	ldr	r2, [r3, #4]
   1a4a4:	687b      	ldr	r3, [r7, #4]
   1a4a6:	429a      	cmp	r2, r3
   1a4a8:	d103      	bne.n	1a4b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a4aa:	687b      	ldr	r3, [r7, #4]
   1a4ac:	689a      	ldr	r2, [r3, #8]
   1a4ae:	68fb      	ldr	r3, [r7, #12]
   1a4b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1a4b2:	687b      	ldr	r3, [r7, #4]
   1a4b4:	2200      	movs	r2, #0
   1a4b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1a4b8:	68fb      	ldr	r3, [r7, #12]
   1a4ba:	681b      	ldr	r3, [r3, #0]
   1a4bc:	1e5a      	subs	r2, r3, #1
   1a4be:	68fb      	ldr	r3, [r7, #12]
   1a4c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1a4c2:	68fb      	ldr	r3, [r7, #12]
   1a4c4:	681b      	ldr	r3, [r3, #0]
}
   1a4c6:	0018      	movs	r0, r3
   1a4c8:	46bd      	mov	sp, r7
   1a4ca:	b004      	add	sp, #16
   1a4cc:	bd80      	pop	{r7, pc}
	...

0001a4d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1a4d0:	b580      	push	{r7, lr}
   1a4d2:	b084      	sub	sp, #16
   1a4d4:	af00      	add	r7, sp, #0
   1a4d6:	60f8      	str	r0, [r7, #12]
   1a4d8:	60b9      	str	r1, [r7, #8]
   1a4da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1a4dc:	68fb      	ldr	r3, [r7, #12]
   1a4de:	3b04      	subs	r3, #4
   1a4e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1a4e2:	68fb      	ldr	r3, [r7, #12]
   1a4e4:	2280      	movs	r2, #128	; 0x80
   1a4e6:	0452      	lsls	r2, r2, #17
   1a4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a4ea:	68fb      	ldr	r3, [r7, #12]
   1a4ec:	3b04      	subs	r3, #4
   1a4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1a4f0:	68ba      	ldr	r2, [r7, #8]
   1a4f2:	68fb      	ldr	r3, [r7, #12]
   1a4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a4f6:	68fb      	ldr	r3, [r7, #12]
   1a4f8:	3b04      	subs	r3, #4
   1a4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1a4fc:	4a08      	ldr	r2, [pc, #32]	; (1a520 <pxPortInitialiseStack+0x50>)
   1a4fe:	68fb      	ldr	r3, [r7, #12]
   1a500:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1a502:	68fb      	ldr	r3, [r7, #12]
   1a504:	3b14      	subs	r3, #20
   1a506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1a508:	687a      	ldr	r2, [r7, #4]
   1a50a:	68fb      	ldr	r3, [r7, #12]
   1a50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1a50e:	68fb      	ldr	r3, [r7, #12]
   1a510:	3b20      	subs	r3, #32
   1a512:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1a514:	68fb      	ldr	r3, [r7, #12]
}
   1a516:	0018      	movs	r0, r3
   1a518:	46bd      	mov	sp, r7
   1a51a:	b004      	add	sp, #16
   1a51c:	bd80      	pop	{r7, pc}
   1a51e:	46c0      	nop			; (mov r8, r8)
   1a520:	0001a525 	.word	0x0001a525

0001a524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1a524:	b580      	push	{r7, lr}
   1a526:	b082      	sub	sp, #8
   1a528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1a52a:	2300      	movs	r3, #0
   1a52c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1a52e:	4b07      	ldr	r3, [pc, #28]	; (1a54c <prvTaskExitError+0x28>)
   1a530:	681b      	ldr	r3, [r3, #0]
   1a532:	3301      	adds	r3, #1
   1a534:	d001      	beq.n	1a53a <prvTaskExitError+0x16>
   1a536:	b672      	cpsid	i
   1a538:	e7fe      	b.n	1a538 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1a53a:	b672      	cpsid	i
	while( ulDummy == 0 )
   1a53c:	46c0      	nop			; (mov r8, r8)
   1a53e:	687b      	ldr	r3, [r7, #4]
   1a540:	2b00      	cmp	r3, #0
   1a542:	d0fc      	beq.n	1a53e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1a544:	46c0      	nop			; (mov r8, r8)
   1a546:	46bd      	mov	sp, r7
   1a548:	b002      	add	sp, #8
   1a54a:	bd80      	pop	{r7, pc}
   1a54c:	20000114 	.word	0x20000114

0001a550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1a550:	b580      	push	{r7, lr}
   1a552:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1a554:	46c0      	nop			; (mov r8, r8)
   1a556:	46bd      	mov	sp, r7
   1a558:	bd80      	pop	{r7, pc}
   1a55a:	0000      	movs	r0, r0
   1a55c:	0000      	movs	r0, r0
	...

0001a560 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1a560:	4a0b      	ldr	r2, [pc, #44]	; (1a590 <pxCurrentTCBConst2>)
   1a562:	6813      	ldr	r3, [r2, #0]
   1a564:	6818      	ldr	r0, [r3, #0]
   1a566:	3020      	adds	r0, #32
   1a568:	f380 8809 	msr	PSP, r0
   1a56c:	2002      	movs	r0, #2
   1a56e:	f380 8814 	msr	CONTROL, r0
   1a572:	f3bf 8f6f 	isb	sy
   1a576:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a578:	46ae      	mov	lr, r5
   1a57a:	bc08      	pop	{r3}
   1a57c:	bc04      	pop	{r2}
   1a57e:	b662      	cpsie	i
   1a580:	4718      	bx	r3
   1a582:	46c0      	nop			; (mov r8, r8)
   1a584:	46c0      	nop			; (mov r8, r8)
   1a586:	46c0      	nop			; (mov r8, r8)
   1a588:	46c0      	nop			; (mov r8, r8)
   1a58a:	46c0      	nop			; (mov r8, r8)
   1a58c:	46c0      	nop			; (mov r8, r8)
   1a58e:	46c0      	nop			; (mov r8, r8)

0001a590 <pxCurrentTCBConst2>:
   1a590:	200040d8 	.word	0x200040d8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a594:	46c0      	nop			; (mov r8, r8)
   1a596:	46c0      	nop			; (mov r8, r8)

0001a598 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a598:	b580      	push	{r7, lr}
   1a59a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a59c:	4b0e      	ldr	r3, [pc, #56]	; (1a5d8 <xPortStartScheduler+0x40>)
   1a59e:	4a0e      	ldr	r2, [pc, #56]	; (1a5d8 <xPortStartScheduler+0x40>)
   1a5a0:	6812      	ldr	r2, [r2, #0]
   1a5a2:	21ff      	movs	r1, #255	; 0xff
   1a5a4:	0409      	lsls	r1, r1, #16
   1a5a6:	430a      	orrs	r2, r1
   1a5a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a5aa:	4b0b      	ldr	r3, [pc, #44]	; (1a5d8 <xPortStartScheduler+0x40>)
   1a5ac:	4a0a      	ldr	r2, [pc, #40]	; (1a5d8 <xPortStartScheduler+0x40>)
   1a5ae:	6812      	ldr	r2, [r2, #0]
   1a5b0:	21ff      	movs	r1, #255	; 0xff
   1a5b2:	0609      	lsls	r1, r1, #24
   1a5b4:	430a      	orrs	r2, r1
   1a5b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a5b8:	4b08      	ldr	r3, [pc, #32]	; (1a5dc <xPortStartScheduler+0x44>)
   1a5ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a5bc:	4b08      	ldr	r3, [pc, #32]	; (1a5e0 <xPortStartScheduler+0x48>)
   1a5be:	2200      	movs	r2, #0
   1a5c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a5c2:	4b08      	ldr	r3, [pc, #32]	; (1a5e4 <xPortStartScheduler+0x4c>)
   1a5c4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a5c6:	4b08      	ldr	r3, [pc, #32]	; (1a5e8 <xPortStartScheduler+0x50>)
   1a5c8:	4798      	blx	r3
	prvTaskExitError();
   1a5ca:	4b08      	ldr	r3, [pc, #32]	; (1a5ec <xPortStartScheduler+0x54>)
   1a5cc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a5ce:	2300      	movs	r3, #0
}
   1a5d0:	0018      	movs	r0, r3
   1a5d2:	46bd      	mov	sp, r7
   1a5d4:	bd80      	pop	{r7, pc}
   1a5d6:	46c0      	nop			; (mov r8, r8)
   1a5d8:	e000ed20 	.word	0xe000ed20
   1a5dc:	0001a6f9 	.word	0x0001a6f9
   1a5e0:	20000114 	.word	0x20000114
   1a5e4:	0001a561 	.word	0x0001a561
   1a5e8:	0001cc55 	.word	0x0001cc55
   1a5ec:	0001a525 	.word	0x0001a525

0001a5f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a5f0:	b580      	push	{r7, lr}
   1a5f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a5f4:	4b03      	ldr	r3, [pc, #12]	; (1a604 <vPortYield+0x14>)
   1a5f6:	2280      	movs	r2, #128	; 0x80
   1a5f8:	0552      	lsls	r2, r2, #21
   1a5fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a5fc:	46c0      	nop			; (mov r8, r8)
   1a5fe:	46bd      	mov	sp, r7
   1a600:	bd80      	pop	{r7, pc}
   1a602:	46c0      	nop			; (mov r8, r8)
   1a604:	e000ed04 	.word	0xe000ed04

0001a608 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a608:	b580      	push	{r7, lr}
   1a60a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a60c:	b672      	cpsid	i
    uxCriticalNesting++;
   1a60e:	4b06      	ldr	r3, [pc, #24]	; (1a628 <vPortEnterCritical+0x20>)
   1a610:	681b      	ldr	r3, [r3, #0]
   1a612:	1c5a      	adds	r2, r3, #1
   1a614:	4b04      	ldr	r3, [pc, #16]	; (1a628 <vPortEnterCritical+0x20>)
   1a616:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a618:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a61c:	f3bf 8f6f 	isb	sy
}
   1a620:	46c0      	nop			; (mov r8, r8)
   1a622:	46bd      	mov	sp, r7
   1a624:	bd80      	pop	{r7, pc}
   1a626:	46c0      	nop			; (mov r8, r8)
   1a628:	20000114 	.word	0x20000114

0001a62c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a62c:	b580      	push	{r7, lr}
   1a62e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a630:	4b09      	ldr	r3, [pc, #36]	; (1a658 <vPortExitCritical+0x2c>)
   1a632:	681b      	ldr	r3, [r3, #0]
   1a634:	2b00      	cmp	r3, #0
   1a636:	d101      	bne.n	1a63c <vPortExitCritical+0x10>
   1a638:	b672      	cpsid	i
   1a63a:	e7fe      	b.n	1a63a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a63c:	4b06      	ldr	r3, [pc, #24]	; (1a658 <vPortExitCritical+0x2c>)
   1a63e:	681b      	ldr	r3, [r3, #0]
   1a640:	1e5a      	subs	r2, r3, #1
   1a642:	4b05      	ldr	r3, [pc, #20]	; (1a658 <vPortExitCritical+0x2c>)
   1a644:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a646:	4b04      	ldr	r3, [pc, #16]	; (1a658 <vPortExitCritical+0x2c>)
   1a648:	681b      	ldr	r3, [r3, #0]
   1a64a:	2b00      	cmp	r3, #0
   1a64c:	d100      	bne.n	1a650 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a64e:	b662      	cpsie	i
    }
}
   1a650:	46c0      	nop			; (mov r8, r8)
   1a652:	46bd      	mov	sp, r7
   1a654:	bd80      	pop	{r7, pc}
   1a656:	46c0      	nop			; (mov r8, r8)
   1a658:	20000114 	.word	0x20000114

0001a65c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a65c:	f3ef 8010 	mrs	r0, PRIMASK
   1a660:	b672      	cpsid	i
   1a662:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a664:	46c0      	nop			; (mov r8, r8)
   1a666:	0018      	movs	r0, r3

0001a668 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a668:	f380 8810 	msr	PRIMASK, r0
   1a66c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a66e:	46c0      	nop			; (mov r8, r8)

0001a670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a670:	f3ef 8009 	mrs	r0, PSP
   1a674:	4b0e      	ldr	r3, [pc, #56]	; (1a6b0 <pxCurrentTCBConst>)
   1a676:	681a      	ldr	r2, [r3, #0]
   1a678:	3820      	subs	r0, #32
   1a67a:	6010      	str	r0, [r2, #0]
   1a67c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a67e:	4644      	mov	r4, r8
   1a680:	464d      	mov	r5, r9
   1a682:	4656      	mov	r6, sl
   1a684:	465f      	mov	r7, fp
   1a686:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a688:	b508      	push	{r3, lr}
   1a68a:	b672      	cpsid	i
   1a68c:	f002 fae2 	bl	1cc54 <vTaskSwitchContext>
   1a690:	b662      	cpsie	i
   1a692:	bc0c      	pop	{r2, r3}
   1a694:	6811      	ldr	r1, [r2, #0]
   1a696:	6808      	ldr	r0, [r1, #0]
   1a698:	3010      	adds	r0, #16
   1a69a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a69c:	46a0      	mov	r8, r4
   1a69e:	46a9      	mov	r9, r5
   1a6a0:	46b2      	mov	sl, r6
   1a6a2:	46bb      	mov	fp, r7
   1a6a4:	f380 8809 	msr	PSP, r0
   1a6a8:	3820      	subs	r0, #32
   1a6aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a6ac:	4718      	bx	r3
   1a6ae:	46c0      	nop			; (mov r8, r8)

0001a6b0 <pxCurrentTCBConst>:
   1a6b0:	200040d8 	.word	0x200040d8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a6b4:	46c0      	nop			; (mov r8, r8)
   1a6b6:	46c0      	nop			; (mov r8, r8)

0001a6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a6b8:	b580      	push	{r7, lr}
   1a6ba:	b082      	sub	sp, #8
   1a6bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a6be:	4b0a      	ldr	r3, [pc, #40]	; (1a6e8 <SysTick_Handler+0x30>)
   1a6c0:	4798      	blx	r3
   1a6c2:	0003      	movs	r3, r0
   1a6c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a6c6:	4b09      	ldr	r3, [pc, #36]	; (1a6ec <SysTick_Handler+0x34>)
   1a6c8:	4798      	blx	r3
   1a6ca:	1e03      	subs	r3, r0, #0
   1a6cc:	d003      	beq.n	1a6d6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a6ce:	4b08      	ldr	r3, [pc, #32]	; (1a6f0 <SysTick_Handler+0x38>)
   1a6d0:	2280      	movs	r2, #128	; 0x80
   1a6d2:	0552      	lsls	r2, r2, #21
   1a6d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a6d6:	687b      	ldr	r3, [r7, #4]
   1a6d8:	0018      	movs	r0, r3
   1a6da:	4b06      	ldr	r3, [pc, #24]	; (1a6f4 <SysTick_Handler+0x3c>)
   1a6dc:	4798      	blx	r3
}
   1a6de:	46c0      	nop			; (mov r8, r8)
   1a6e0:	46bd      	mov	sp, r7
   1a6e2:	b002      	add	sp, #8
   1a6e4:	bd80      	pop	{r7, pc}
   1a6e6:	46c0      	nop			; (mov r8, r8)
   1a6e8:	0001a65d 	.word	0x0001a65d
   1a6ec:	0001ca65 	.word	0x0001ca65
   1a6f0:	e000ed04 	.word	0xe000ed04
   1a6f4:	0001a669 	.word	0x0001a669

0001a6f8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a6f8:	b5b0      	push	{r4, r5, r7, lr}
   1a6fa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a6fc:	4b0b      	ldr	r3, [pc, #44]	; (1a72c <prvSetupTimerInterrupt+0x34>)
   1a6fe:	2200      	movs	r2, #0
   1a700:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a702:	4b0b      	ldr	r3, [pc, #44]	; (1a730 <prvSetupTimerInterrupt+0x38>)
   1a704:	2200      	movs	r2, #0
   1a706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a708:	4c0a      	ldr	r4, [pc, #40]	; (1a734 <prvSetupTimerInterrupt+0x3c>)
   1a70a:	2000      	movs	r0, #0
   1a70c:	4b0a      	ldr	r3, [pc, #40]	; (1a738 <prvSetupTimerInterrupt+0x40>)
   1a70e:	4798      	blx	r3
   1a710:	4b0a      	ldr	r3, [pc, #40]	; (1a73c <prvSetupTimerInterrupt+0x44>)
   1a712:	22fa      	movs	r2, #250	; 0xfa
   1a714:	0091      	lsls	r1, r2, #2
   1a716:	4798      	blx	r3
   1a718:	0003      	movs	r3, r0
   1a71a:	3b01      	subs	r3, #1
   1a71c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a71e:	4b03      	ldr	r3, [pc, #12]	; (1a72c <prvSetupTimerInterrupt+0x34>)
   1a720:	2207      	movs	r2, #7
   1a722:	601a      	str	r2, [r3, #0]
}
   1a724:	46c0      	nop			; (mov r8, r8)
   1a726:	46bd      	mov	sp, r7
   1a728:	bdb0      	pop	{r4, r5, r7, pc}
   1a72a:	46c0      	nop			; (mov r8, r8)
   1a72c:	e000e010 	.word	0xe000e010
   1a730:	e000e018 	.word	0xe000e018
   1a734:	e000e014 	.word	0xe000e014
   1a738:	0002a179 	.word	0x0002a179
   1a73c:	00032d95 	.word	0x00032d95

0001a740 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a740:	b580      	push	{r7, lr}
   1a742:	b084      	sub	sp, #16
   1a744:	af00      	add	r7, sp, #0
   1a746:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a748:	2300      	movs	r3, #0
   1a74a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a74c:	687b      	ldr	r3, [r7, #4]
   1a74e:	2207      	movs	r2, #7
   1a750:	4013      	ands	r3, r2
   1a752:	d004      	beq.n	1a75e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a754:	687b      	ldr	r3, [r7, #4]
   1a756:	2207      	movs	r2, #7
   1a758:	4393      	bics	r3, r2
   1a75a:	3308      	adds	r3, #8
   1a75c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a75e:	4b21      	ldr	r3, [pc, #132]	; (1a7e4 <pvPortMalloc+0xa4>)
   1a760:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a762:	4b21      	ldr	r3, [pc, #132]	; (1a7e8 <pvPortMalloc+0xa8>)
   1a764:	681b      	ldr	r3, [r3, #0]
   1a766:	2b00      	cmp	r3, #0
   1a768:	d105      	bne.n	1a776 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a76a:	4b20      	ldr	r3, [pc, #128]	; (1a7ec <pvPortMalloc+0xac>)
   1a76c:	2207      	movs	r2, #7
   1a76e:	4393      	bics	r3, r2
   1a770:	001a      	movs	r2, r3
   1a772:	4b1d      	ldr	r3, [pc, #116]	; (1a7e8 <pvPortMalloc+0xa8>)
   1a774:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a776:	4b1e      	ldr	r3, [pc, #120]	; (1a7f0 <pvPortMalloc+0xb0>)
   1a778:	681a      	ldr	r2, [r3, #0]
   1a77a:	687b      	ldr	r3, [r7, #4]
   1a77c:	18d3      	adds	r3, r2, r3
   1a77e:	4a1d      	ldr	r2, [pc, #116]	; (1a7f4 <pvPortMalloc+0xb4>)
   1a780:	4293      	cmp	r3, r2
   1a782:	d813      	bhi.n	1a7ac <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a784:	4b1a      	ldr	r3, [pc, #104]	; (1a7f0 <pvPortMalloc+0xb0>)
   1a786:	681a      	ldr	r2, [r3, #0]
   1a788:	687b      	ldr	r3, [r7, #4]
   1a78a:	18d2      	adds	r2, r2, r3
   1a78c:	4b18      	ldr	r3, [pc, #96]	; (1a7f0 <pvPortMalloc+0xb0>)
   1a78e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a790:	429a      	cmp	r2, r3
   1a792:	d90b      	bls.n	1a7ac <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a794:	4b14      	ldr	r3, [pc, #80]	; (1a7e8 <pvPortMalloc+0xa8>)
   1a796:	681a      	ldr	r2, [r3, #0]
   1a798:	4b15      	ldr	r3, [pc, #84]	; (1a7f0 <pvPortMalloc+0xb0>)
   1a79a:	681b      	ldr	r3, [r3, #0]
   1a79c:	18d3      	adds	r3, r2, r3
   1a79e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a7a0:	4b13      	ldr	r3, [pc, #76]	; (1a7f0 <pvPortMalloc+0xb0>)
   1a7a2:	681a      	ldr	r2, [r3, #0]
   1a7a4:	687b      	ldr	r3, [r7, #4]
   1a7a6:	18d2      	adds	r2, r2, r3
   1a7a8:	4b11      	ldr	r3, [pc, #68]	; (1a7f0 <pvPortMalloc+0xb0>)
   1a7aa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a7ac:	68fb      	ldr	r3, [r7, #12]
   1a7ae:	2b00      	cmp	r3, #0
   1a7b0:	d006      	beq.n	1a7c0 <pvPortMalloc+0x80>
   1a7b2:	68fb      	ldr	r3, [r7, #12]
   1a7b4:	687a      	ldr	r2, [r7, #4]
   1a7b6:	0019      	movs	r1, r3
   1a7b8:	2094      	movs	r0, #148	; 0x94
   1a7ba:	4b0f      	ldr	r3, [pc, #60]	; (1a7f8 <pvPortMalloc+0xb8>)
   1a7bc:	4798      	blx	r3
   1a7be:	e005      	b.n	1a7cc <pvPortMalloc+0x8c>
   1a7c0:	68fb      	ldr	r3, [r7, #12]
   1a7c2:	687a      	ldr	r2, [r7, #4]
   1a7c4:	0019      	movs	r1, r3
   1a7c6:	20e8      	movs	r0, #232	; 0xe8
   1a7c8:	4b0b      	ldr	r3, [pc, #44]	; (1a7f8 <pvPortMalloc+0xb8>)
   1a7ca:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a7cc:	4b0b      	ldr	r3, [pc, #44]	; (1a7fc <pvPortMalloc+0xbc>)
   1a7ce:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a7d0:	68fb      	ldr	r3, [r7, #12]
   1a7d2:	2b00      	cmp	r3, #0
   1a7d4:	d101      	bne.n	1a7da <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a7d6:	4b0a      	ldr	r3, [pc, #40]	; (1a800 <pvPortMalloc+0xc0>)
   1a7d8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a7da:	68fb      	ldr	r3, [r7, #12]
}
   1a7dc:	0018      	movs	r0, r3
   1a7de:	46bd      	mov	sp, r7
   1a7e0:	b004      	add	sp, #16
   1a7e2:	bd80      	pop	{r7, pc}
   1a7e4:	0001c8c1 	.word	0x0001c8c1
   1a7e8:	200040d4 	.word	0x200040d4
   1a7ec:	20000e10 	.word	0x20000e10
   1a7f0:	200040d0 	.word	0x200040d0
   1a7f4:	000032bf 	.word	0x000032bf
   1a7f8:	00018ead 	.word	0x00018ead
   1a7fc:	0001c8d9 	.word	0x0001c8d9
   1a800:	00032d65 	.word	0x00032d65

0001a804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a804:	b580      	push	{r7, lr}
   1a806:	b082      	sub	sp, #8
   1a808:	af00      	add	r7, sp, #0
   1a80a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a80c:	687b      	ldr	r3, [r7, #4]
   1a80e:	2b00      	cmp	r3, #0
   1a810:	d001      	beq.n	1a816 <vPortFree+0x12>
   1a812:	b672      	cpsid	i
   1a814:	e7fe      	b.n	1a814 <vPortFree+0x10>
}
   1a816:	46c0      	nop			; (mov r8, r8)
   1a818:	46bd      	mov	sp, r7
   1a81a:	b002      	add	sp, #8
   1a81c:	bd80      	pop	{r7, pc}
	...

0001a820 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a820:	b580      	push	{r7, lr}
   1a822:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a824:	4b03      	ldr	r3, [pc, #12]	; (1a834 <xPortGetFreeHeapSize+0x14>)
   1a826:	681b      	ldr	r3, [r3, #0]
   1a828:	22cb      	movs	r2, #203	; 0xcb
   1a82a:	0192      	lsls	r2, r2, #6
   1a82c:	1ad3      	subs	r3, r2, r3
}
   1a82e:	0018      	movs	r0, r3
   1a830:	46bd      	mov	sp, r7
   1a832:	bd80      	pop	{r7, pc}
   1a834:	200040d0 	.word	0x200040d0

0001a838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a838:	b580      	push	{r7, lr}
   1a83a:	b084      	sub	sp, #16
   1a83c:	af00      	add	r7, sp, #0
   1a83e:	6078      	str	r0, [r7, #4]
   1a840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a842:	687b      	ldr	r3, [r7, #4]
   1a844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a846:	68fb      	ldr	r3, [r7, #12]
   1a848:	2b00      	cmp	r3, #0
   1a84a:	d101      	bne.n	1a850 <xQueueGenericReset+0x18>
   1a84c:	b672      	cpsid	i
   1a84e:	e7fe      	b.n	1a84e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a850:	4b23      	ldr	r3, [pc, #140]	; (1a8e0 <xQueueGenericReset+0xa8>)
   1a852:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a854:	68fb      	ldr	r3, [r7, #12]
   1a856:	681a      	ldr	r2, [r3, #0]
   1a858:	68fb      	ldr	r3, [r7, #12]
   1a85a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a85c:	68fb      	ldr	r3, [r7, #12]
   1a85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a860:	434b      	muls	r3, r1
   1a862:	18d2      	adds	r2, r2, r3
   1a864:	68fb      	ldr	r3, [r7, #12]
   1a866:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a868:	68fb      	ldr	r3, [r7, #12]
   1a86a:	2200      	movs	r2, #0
   1a86c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a86e:	68fb      	ldr	r3, [r7, #12]
   1a870:	681a      	ldr	r2, [r3, #0]
   1a872:	68fb      	ldr	r3, [r7, #12]
   1a874:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a876:	68fb      	ldr	r3, [r7, #12]
   1a878:	681a      	ldr	r2, [r3, #0]
   1a87a:	68fb      	ldr	r3, [r7, #12]
   1a87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a87e:	1e59      	subs	r1, r3, #1
   1a880:	68fb      	ldr	r3, [r7, #12]
   1a882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a884:	434b      	muls	r3, r1
   1a886:	18d2      	adds	r2, r2, r3
   1a888:	68fb      	ldr	r3, [r7, #12]
   1a88a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a88c:	68fb      	ldr	r3, [r7, #12]
   1a88e:	2244      	movs	r2, #68	; 0x44
   1a890:	21ff      	movs	r1, #255	; 0xff
   1a892:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a894:	68fb      	ldr	r3, [r7, #12]
   1a896:	2245      	movs	r2, #69	; 0x45
   1a898:	21ff      	movs	r1, #255	; 0xff
   1a89a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a89c:	683b      	ldr	r3, [r7, #0]
   1a89e:	2b00      	cmp	r3, #0
   1a8a0:	d10d      	bne.n	1a8be <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a8a2:	68fb      	ldr	r3, [r7, #12]
   1a8a4:	691b      	ldr	r3, [r3, #16]
   1a8a6:	2b00      	cmp	r3, #0
   1a8a8:	d013      	beq.n	1a8d2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a8aa:	68fb      	ldr	r3, [r7, #12]
   1a8ac:	3310      	adds	r3, #16
   1a8ae:	0018      	movs	r0, r3
   1a8b0:	4b0c      	ldr	r3, [pc, #48]	; (1a8e4 <xQueueGenericReset+0xac>)
   1a8b2:	4798      	blx	r3
   1a8b4:	1e03      	subs	r3, r0, #0
   1a8b6:	d00c      	beq.n	1a8d2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a8b8:	4b0b      	ldr	r3, [pc, #44]	; (1a8e8 <xQueueGenericReset+0xb0>)
   1a8ba:	4798      	blx	r3
   1a8bc:	e009      	b.n	1a8d2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a8be:	68fb      	ldr	r3, [r7, #12]
   1a8c0:	3310      	adds	r3, #16
   1a8c2:	0018      	movs	r0, r3
   1a8c4:	4b09      	ldr	r3, [pc, #36]	; (1a8ec <xQueueGenericReset+0xb4>)
   1a8c6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a8c8:	68fb      	ldr	r3, [r7, #12]
   1a8ca:	3324      	adds	r3, #36	; 0x24
   1a8cc:	0018      	movs	r0, r3
   1a8ce:	4b07      	ldr	r3, [pc, #28]	; (1a8ec <xQueueGenericReset+0xb4>)
   1a8d0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a8d2:	4b07      	ldr	r3, [pc, #28]	; (1a8f0 <xQueueGenericReset+0xb8>)
   1a8d4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a8d6:	2301      	movs	r3, #1
}
   1a8d8:	0018      	movs	r0, r3
   1a8da:	46bd      	mov	sp, r7
   1a8dc:	b004      	add	sp, #16
   1a8de:	bd80      	pop	{r7, pc}
   1a8e0:	0001a609 	.word	0x0001a609
   1a8e4:	0001ce99 	.word	0x0001ce99
   1a8e8:	0001a5f1 	.word	0x0001a5f1
   1a8ec:	0001a37d 	.word	0x0001a37d
   1a8f0:	0001a62d 	.word	0x0001a62d

0001a8f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a8f4:	b590      	push	{r4, r7, lr}
   1a8f6:	b08b      	sub	sp, #44	; 0x2c
   1a8f8:	af02      	add	r7, sp, #8
   1a8fa:	60f8      	str	r0, [r7, #12]
   1a8fc:	60b9      	str	r1, [r7, #8]
   1a8fe:	1dfb      	adds	r3, r7, #7
   1a900:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a902:	68fb      	ldr	r3, [r7, #12]
   1a904:	2b00      	cmp	r3, #0
   1a906:	d101      	bne.n	1a90c <xQueueGenericCreate+0x18>
   1a908:	b672      	cpsid	i
   1a90a:	e7fe      	b.n	1a90a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a90c:	68bb      	ldr	r3, [r7, #8]
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d102      	bne.n	1a918 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a912:	2300      	movs	r3, #0
   1a914:	61fb      	str	r3, [r7, #28]
   1a916:	e003      	b.n	1a920 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a918:	68fb      	ldr	r3, [r7, #12]
   1a91a:	68ba      	ldr	r2, [r7, #8]
   1a91c:	4353      	muls	r3, r2
   1a91e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a920:	69fb      	ldr	r3, [r7, #28]
   1a922:	3354      	adds	r3, #84	; 0x54
   1a924:	0018      	movs	r0, r3
   1a926:	4b19      	ldr	r3, [pc, #100]	; (1a98c <xQueueGenericCreate+0x98>)
   1a928:	4798      	blx	r3
   1a92a:	0003      	movs	r3, r0
   1a92c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a92e:	69bb      	ldr	r3, [r7, #24]
   1a930:	2b00      	cmp	r3, #0
   1a932:	d00d      	beq.n	1a950 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a934:	69bb      	ldr	r3, [r7, #24]
   1a936:	3354      	adds	r3, #84	; 0x54
   1a938:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a93a:	1dfb      	adds	r3, r7, #7
   1a93c:	781c      	ldrb	r4, [r3, #0]
   1a93e:	697a      	ldr	r2, [r7, #20]
   1a940:	68b9      	ldr	r1, [r7, #8]
   1a942:	68f8      	ldr	r0, [r7, #12]
   1a944:	69bb      	ldr	r3, [r7, #24]
   1a946:	9300      	str	r3, [sp, #0]
   1a948:	0023      	movs	r3, r4
   1a94a:	4c11      	ldr	r4, [pc, #68]	; (1a990 <xQueueGenericCreate+0x9c>)
   1a94c:	47a0      	blx	r4
   1a94e:	e017      	b.n	1a980 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a950:	4b10      	ldr	r3, [pc, #64]	; (1a994 <xQueueGenericCreate+0xa0>)
   1a952:	4798      	blx	r3
   1a954:	0003      	movs	r3, r0
   1a956:	0018      	movs	r0, r3
   1a958:	4b0f      	ldr	r3, [pc, #60]	; (1a998 <xQueueGenericCreate+0xa4>)
   1a95a:	4798      	blx	r3
   1a95c:	0003      	movs	r3, r0
   1a95e:	001a      	movs	r2, r3
   1a960:	4b0e      	ldr	r3, [pc, #56]	; (1a99c <xQueueGenericCreate+0xa8>)
   1a962:	881b      	ldrh	r3, [r3, #0]
   1a964:	4013      	ands	r3, r2
   1a966:	b29b      	uxth	r3, r3
   1a968:	2b00      	cmp	r3, #0
   1a96a:	d009      	beq.n	1a980 <xQueueGenericCreate+0x8c>
   1a96c:	1dfb      	adds	r3, r7, #7
   1a96e:	781b      	ldrb	r3, [r3, #0]
   1a970:	4a0b      	ldr	r2, [pc, #44]	; (1a9a0 <xQueueGenericCreate+0xac>)
   1a972:	5cd3      	ldrb	r3, [r2, r3]
   1a974:	3340      	adds	r3, #64	; 0x40
   1a976:	b2db      	uxtb	r3, r3
   1a978:	2100      	movs	r1, #0
   1a97a:	0018      	movs	r0, r3
   1a97c:	4b09      	ldr	r3, [pc, #36]	; (1a9a4 <xQueueGenericCreate+0xb0>)
   1a97e:	4798      	blx	r3
		}

		return pxNewQueue;
   1a980:	69bb      	ldr	r3, [r7, #24]
	}
   1a982:	0018      	movs	r0, r3
   1a984:	46bd      	mov	sp, r7
   1a986:	b009      	add	sp, #36	; 0x24
   1a988:	bd90      	pop	{r4, r7, pc}
   1a98a:	46c0      	nop			; (mov r8, r8)
   1a98c:	0001a741 	.word	0x0001a741
   1a990:	0001a9a9 	.word	0x0001a9a9
   1a994:	000188a1 	.word	0x000188a1
   1a998:	00018605 	.word	0x00018605
   1a99c:	20000110 	.word	0x20000110
   1a9a0:	20000104 	.word	0x20000104
   1a9a4:	00019305 	.word	0x00019305

0001a9a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a9a8:	b5b0      	push	{r4, r5, r7, lr}
   1a9aa:	b084      	sub	sp, #16
   1a9ac:	af00      	add	r7, sp, #0
   1a9ae:	60f8      	str	r0, [r7, #12]
   1a9b0:	60b9      	str	r1, [r7, #8]
   1a9b2:	607a      	str	r2, [r7, #4]
   1a9b4:	001a      	movs	r2, r3
   1a9b6:	1cfb      	adds	r3, r7, #3
   1a9b8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a9ba:	68bb      	ldr	r3, [r7, #8]
   1a9bc:	2b00      	cmp	r3, #0
   1a9be:	d103      	bne.n	1a9c8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a9c0:	6a3b      	ldr	r3, [r7, #32]
   1a9c2:	6a3a      	ldr	r2, [r7, #32]
   1a9c4:	601a      	str	r2, [r3, #0]
   1a9c6:	e002      	b.n	1a9ce <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a9c8:	6a3b      	ldr	r3, [r7, #32]
   1a9ca:	687a      	ldr	r2, [r7, #4]
   1a9cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a9ce:	6a3b      	ldr	r3, [r7, #32]
   1a9d0:	68fa      	ldr	r2, [r7, #12]
   1a9d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a9d4:	6a3b      	ldr	r3, [r7, #32]
   1a9d6:	68ba      	ldr	r2, [r7, #8]
   1a9d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a9da:	6a3b      	ldr	r3, [r7, #32]
   1a9dc:	2101      	movs	r1, #1
   1a9de:	0018      	movs	r0, r3
   1a9e0:	4b41      	ldr	r3, [pc, #260]	; (1aae8 <prvInitialiseNewQueue+0x140>)
   1a9e2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a9e4:	6a3b      	ldr	r3, [r7, #32]
   1a9e6:	1cfa      	adds	r2, r7, #3
   1a9e8:	2150      	movs	r1, #80	; 0x50
   1a9ea:	7812      	ldrb	r2, [r2, #0]
   1a9ec:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a9ee:	6a3b      	ldr	r3, [r7, #32]
   1a9f0:	2200      	movs	r2, #0
   1a9f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a9f4:	6a3b      	ldr	r3, [r7, #32]
   1a9f6:	0018      	movs	r0, r3
   1a9f8:	4b3c      	ldr	r3, [pc, #240]	; (1aaec <prvInitialiseNewQueue+0x144>)
   1a9fa:	4798      	blx	r3
   1a9fc:	0003      	movs	r3, r0
   1a9fe:	001a      	movs	r2, r3
   1aa00:	4b3b      	ldr	r3, [pc, #236]	; (1aaf0 <prvInitialiseNewQueue+0x148>)
   1aa02:	5c9b      	ldrb	r3, [r3, r2]
   1aa04:	0018      	movs	r0, r3
   1aa06:	4b3b      	ldr	r3, [pc, #236]	; (1aaf4 <prvInitialiseNewQueue+0x14c>)
   1aa08:	4798      	blx	r3
   1aa0a:	0003      	movs	r3, r0
   1aa0c:	b29a      	uxth	r2, r3
   1aa0e:	6a3b      	ldr	r3, [r7, #32]
   1aa10:	0011      	movs	r1, r2
   1aa12:	0018      	movs	r0, r3
   1aa14:	4b38      	ldr	r3, [pc, #224]	; (1aaf8 <prvInitialiseNewQueue+0x150>)
   1aa16:	4798      	blx	r3
   1aa18:	4b38      	ldr	r3, [pc, #224]	; (1aafc <prvInitialiseNewQueue+0x154>)
   1aa1a:	881a      	ldrh	r2, [r3, #0]
   1aa1c:	6a3b      	ldr	r3, [r7, #32]
   1aa1e:	0011      	movs	r1, r2
   1aa20:	0018      	movs	r0, r3
   1aa22:	4b37      	ldr	r3, [pc, #220]	; (1ab00 <prvInitialiseNewQueue+0x158>)
   1aa24:	4798      	blx	r3
   1aa26:	6a3b      	ldr	r3, [r7, #32]
   1aa28:	0018      	movs	r0, r3
   1aa2a:	4b30      	ldr	r3, [pc, #192]	; (1aaec <prvInitialiseNewQueue+0x144>)
   1aa2c:	4798      	blx	r3
   1aa2e:	0003      	movs	r3, r0
   1aa30:	001a      	movs	r2, r3
   1aa32:	4b2f      	ldr	r3, [pc, #188]	; (1aaf0 <prvInitialiseNewQueue+0x148>)
   1aa34:	5c9c      	ldrb	r4, [r3, r2]
   1aa36:	6a3b      	ldr	r3, [r7, #32]
   1aa38:	0018      	movs	r0, r3
   1aa3a:	4b32      	ldr	r3, [pc, #200]	; (1ab04 <prvInitialiseNewQueue+0x15c>)
   1aa3c:	4798      	blx	r3
   1aa3e:	0003      	movs	r3, r0
   1aa40:	b2db      	uxtb	r3, r3
   1aa42:	0019      	movs	r1, r3
   1aa44:	0020      	movs	r0, r4
   1aa46:	4b30      	ldr	r3, [pc, #192]	; (1ab08 <prvInitialiseNewQueue+0x160>)
   1aa48:	4798      	blx	r3
   1aa4a:	4b30      	ldr	r3, [pc, #192]	; (1ab0c <prvInitialiseNewQueue+0x164>)
   1aa4c:	4798      	blx	r3
   1aa4e:	0003      	movs	r3, r0
   1aa50:	0018      	movs	r0, r3
   1aa52:	4b2f      	ldr	r3, [pc, #188]	; (1ab10 <prvInitialiseNewQueue+0x168>)
   1aa54:	4798      	blx	r3
   1aa56:	0003      	movs	r3, r0
   1aa58:	001a      	movs	r2, r3
   1aa5a:	4b2e      	ldr	r3, [pc, #184]	; (1ab14 <prvInitialiseNewQueue+0x16c>)
   1aa5c:	881b      	ldrh	r3, [r3, #0]
   1aa5e:	4013      	ands	r3, r2
   1aa60:	b29b      	uxth	r3, r3
   1aa62:	2b00      	cmp	r3, #0
   1aa64:	d029      	beq.n	1aaba <prvInitialiseNewQueue+0x112>
   1aa66:	6a3b      	ldr	r3, [r7, #32]
   1aa68:	0018      	movs	r0, r3
   1aa6a:	4b2b      	ldr	r3, [pc, #172]	; (1ab18 <prvInitialiseNewQueue+0x170>)
   1aa6c:	4798      	blx	r3
   1aa6e:	0003      	movs	r3, r0
   1aa70:	001a      	movs	r2, r3
   1aa72:	4b28      	ldr	r3, [pc, #160]	; (1ab14 <prvInitialiseNewQueue+0x16c>)
   1aa74:	881b      	ldrh	r3, [r3, #0]
   1aa76:	4013      	ands	r3, r2
   1aa78:	b29b      	uxth	r3, r3
   1aa7a:	2b00      	cmp	r3, #0
   1aa7c:	d01d      	beq.n	1aaba <prvInitialiseNewQueue+0x112>
   1aa7e:	6a3b      	ldr	r3, [r7, #32]
   1aa80:	0018      	movs	r0, r3
   1aa82:	4b1a      	ldr	r3, [pc, #104]	; (1aaec <prvInitialiseNewQueue+0x144>)
   1aa84:	4798      	blx	r3
   1aa86:	0003      	movs	r3, r0
   1aa88:	001a      	movs	r2, r3
   1aa8a:	4b19      	ldr	r3, [pc, #100]	; (1aaf0 <prvInitialiseNewQueue+0x148>)
   1aa8c:	5c9b      	ldrb	r3, [r3, r2]
   1aa8e:	3318      	adds	r3, #24
   1aa90:	b2db      	uxtb	r3, r3
   1aa92:	001d      	movs	r5, r3
   1aa94:	6a3b      	ldr	r3, [r7, #32]
   1aa96:	0018      	movs	r0, r3
   1aa98:	4b14      	ldr	r3, [pc, #80]	; (1aaec <prvInitialiseNewQueue+0x144>)
   1aa9a:	4798      	blx	r3
   1aa9c:	0003      	movs	r3, r0
   1aa9e:	001a      	movs	r2, r3
   1aaa0:	4b13      	ldr	r3, [pc, #76]	; (1aaf0 <prvInitialiseNewQueue+0x148>)
   1aaa2:	5c9c      	ldrb	r4, [r3, r2]
   1aaa4:	6a3b      	ldr	r3, [r7, #32]
   1aaa6:	0018      	movs	r0, r3
   1aaa8:	4b16      	ldr	r3, [pc, #88]	; (1ab04 <prvInitialiseNewQueue+0x15c>)
   1aaaa:	4798      	blx	r3
   1aaac:	0003      	movs	r3, r0
   1aaae:	b2db      	uxtb	r3, r3
   1aab0:	001a      	movs	r2, r3
   1aab2:	0021      	movs	r1, r4
   1aab4:	0028      	movs	r0, r5
   1aab6:	4b19      	ldr	r3, [pc, #100]	; (1ab1c <prvInitialiseNewQueue+0x174>)
   1aab8:	4798      	blx	r3
   1aaba:	6a3b      	ldr	r3, [r7, #32]
   1aabc:	0018      	movs	r0, r3
   1aabe:	4b0b      	ldr	r3, [pc, #44]	; (1aaec <prvInitialiseNewQueue+0x144>)
   1aac0:	4798      	blx	r3
   1aac2:	0003      	movs	r3, r0
   1aac4:	001a      	movs	r2, r3
   1aac6:	4b0a      	ldr	r3, [pc, #40]	; (1aaf0 <prvInitialiseNewQueue+0x148>)
   1aac8:	5c9c      	ldrb	r4, [r3, r2]
   1aaca:	6a3b      	ldr	r3, [r7, #32]
   1aacc:	0018      	movs	r0, r3
   1aace:	4b0d      	ldr	r3, [pc, #52]	; (1ab04 <prvInitialiseNewQueue+0x15c>)
   1aad0:	4798      	blx	r3
   1aad2:	0003      	movs	r3, r0
   1aad4:	b2db      	uxtb	r3, r3
   1aad6:	2200      	movs	r2, #0
   1aad8:	0019      	movs	r1, r3
   1aada:	0020      	movs	r0, r4
   1aadc:	4b10      	ldr	r3, [pc, #64]	; (1ab20 <prvInitialiseNewQueue+0x178>)
   1aade:	4798      	blx	r3
}
   1aae0:	46c0      	nop			; (mov r8, r8)
   1aae2:	46bd      	mov	sp, r7
   1aae4:	b004      	add	sp, #16
   1aae6:	bdb0      	pop	{r4, r5, r7, pc}
   1aae8:	0001a839 	.word	0x0001a839
   1aaec:	000185c5 	.word	0x000185c5
   1aaf0:	20000104 	.word	0x20000104
   1aaf4:	00019b85 	.word	0x00019b85
   1aaf8:	000186e9 	.word	0x000186e9
   1aafc:	20000112 	.word	0x20000112
   1ab00:	00018725 	.word	0x00018725
   1ab04:	000186a5 	.word	0x000186a5
   1ab08:	00019d1d 	.word	0x00019d1d
   1ab0c:	000188a1 	.word	0x000188a1
   1ab10:	00018605 	.word	0x00018605
   1ab14:	20000110 	.word	0x20000110
   1ab18:	000186c5 	.word	0x000186c5
   1ab1c:	00018ffd 	.word	0x00018ffd
   1ab20:	00019659 	.word	0x00019659

0001ab24 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1ab24:	b590      	push	{r4, r7, lr}
   1ab26:	b083      	sub	sp, #12
   1ab28:	af00      	add	r7, sp, #0
   1ab2a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1ab2c:	687b      	ldr	r3, [r7, #4]
   1ab2e:	2b00      	cmp	r3, #0
   1ab30:	d00e      	beq.n	1ab50 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1ab32:	687b      	ldr	r3, [r7, #4]
   1ab34:	2200      	movs	r2, #0
   1ab36:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1ab38:	687b      	ldr	r3, [r7, #4]
   1ab3a:	2200      	movs	r2, #0
   1ab3c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1ab3e:	687b      	ldr	r3, [r7, #4]
   1ab40:	2200      	movs	r2, #0
   1ab42:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1ab44:	6878      	ldr	r0, [r7, #4]
   1ab46:	2300      	movs	r3, #0
   1ab48:	2200      	movs	r2, #0
   1ab4a:	2100      	movs	r1, #0
   1ab4c:	4c02      	ldr	r4, [pc, #8]	; (1ab58 <prvInitialiseMutex+0x34>)
   1ab4e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1ab50:	46c0      	nop			; (mov r8, r8)
   1ab52:	46bd      	mov	sp, r7
   1ab54:	b003      	add	sp, #12
   1ab56:	bd90      	pop	{r4, r7, pc}
   1ab58:	0001ab9d 	.word	0x0001ab9d

0001ab5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1ab5c:	b580      	push	{r7, lr}
   1ab5e:	b086      	sub	sp, #24
   1ab60:	af00      	add	r7, sp, #0
   1ab62:	0002      	movs	r2, r0
   1ab64:	1dfb      	adds	r3, r7, #7
   1ab66:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1ab68:	2301      	movs	r3, #1
   1ab6a:	617b      	str	r3, [r7, #20]
   1ab6c:	2300      	movs	r3, #0
   1ab6e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1ab70:	1dfb      	adds	r3, r7, #7
   1ab72:	781a      	ldrb	r2, [r3, #0]
   1ab74:	6939      	ldr	r1, [r7, #16]
   1ab76:	697b      	ldr	r3, [r7, #20]
   1ab78:	0018      	movs	r0, r3
   1ab7a:	4b06      	ldr	r3, [pc, #24]	; (1ab94 <xQueueCreateMutex+0x38>)
   1ab7c:	4798      	blx	r3
   1ab7e:	0003      	movs	r3, r0
   1ab80:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1ab82:	68fb      	ldr	r3, [r7, #12]
   1ab84:	0018      	movs	r0, r3
   1ab86:	4b04      	ldr	r3, [pc, #16]	; (1ab98 <xQueueCreateMutex+0x3c>)
   1ab88:	4798      	blx	r3

		return pxNewQueue;
   1ab8a:	68fb      	ldr	r3, [r7, #12]
	}
   1ab8c:	0018      	movs	r0, r3
   1ab8e:	46bd      	mov	sp, r7
   1ab90:	b006      	add	sp, #24
   1ab92:	bd80      	pop	{r7, pc}
   1ab94:	0001a8f5 	.word	0x0001a8f5
   1ab98:	0001ab25 	.word	0x0001ab25

0001ab9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1ab9c:	b5b0      	push	{r4, r5, r7, lr}
   1ab9e:	b08a      	sub	sp, #40	; 0x28
   1aba0:	af00      	add	r7, sp, #0
   1aba2:	60f8      	str	r0, [r7, #12]
   1aba4:	60b9      	str	r1, [r7, #8]
   1aba6:	607a      	str	r2, [r7, #4]
   1aba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1abaa:	2300      	movs	r3, #0
   1abac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1abae:	68fb      	ldr	r3, [r7, #12]
   1abb0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1abb2:	6a3b      	ldr	r3, [r7, #32]
   1abb4:	2b00      	cmp	r3, #0
   1abb6:	d101      	bne.n	1abbc <xQueueGenericSend+0x20>
   1abb8:	b672      	cpsid	i
   1abba:	e7fe      	b.n	1abba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1abbc:	68bb      	ldr	r3, [r7, #8]
   1abbe:	2b00      	cmp	r3, #0
   1abc0:	d103      	bne.n	1abca <xQueueGenericSend+0x2e>
   1abc2:	6a3b      	ldr	r3, [r7, #32]
   1abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1abc6:	2b00      	cmp	r3, #0
   1abc8:	d101      	bne.n	1abce <xQueueGenericSend+0x32>
   1abca:	2301      	movs	r3, #1
   1abcc:	e000      	b.n	1abd0 <xQueueGenericSend+0x34>
   1abce:	2300      	movs	r3, #0
   1abd0:	2b00      	cmp	r3, #0
   1abd2:	d101      	bne.n	1abd8 <xQueueGenericSend+0x3c>
   1abd4:	b672      	cpsid	i
   1abd6:	e7fe      	b.n	1abd6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1abd8:	683b      	ldr	r3, [r7, #0]
   1abda:	2b02      	cmp	r3, #2
   1abdc:	d103      	bne.n	1abe6 <xQueueGenericSend+0x4a>
   1abde:	6a3b      	ldr	r3, [r7, #32]
   1abe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1abe2:	2b01      	cmp	r3, #1
   1abe4:	d101      	bne.n	1abea <xQueueGenericSend+0x4e>
   1abe6:	2301      	movs	r3, #1
   1abe8:	e000      	b.n	1abec <xQueueGenericSend+0x50>
   1abea:	2300      	movs	r3, #0
   1abec:	2b00      	cmp	r3, #0
   1abee:	d101      	bne.n	1abf4 <xQueueGenericSend+0x58>
   1abf0:	b672      	cpsid	i
   1abf2:	e7fe      	b.n	1abf2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1abf4:	4bbc      	ldr	r3, [pc, #752]	; (1aee8 <xQueueGenericSend+0x34c>)
   1abf6:	4798      	blx	r3
   1abf8:	1e03      	subs	r3, r0, #0
   1abfa:	d102      	bne.n	1ac02 <xQueueGenericSend+0x66>
   1abfc:	687b      	ldr	r3, [r7, #4]
   1abfe:	2b00      	cmp	r3, #0
   1ac00:	d101      	bne.n	1ac06 <xQueueGenericSend+0x6a>
   1ac02:	2301      	movs	r3, #1
   1ac04:	e000      	b.n	1ac08 <xQueueGenericSend+0x6c>
   1ac06:	2300      	movs	r3, #0
   1ac08:	2b00      	cmp	r3, #0
   1ac0a:	d101      	bne.n	1ac10 <xQueueGenericSend+0x74>
   1ac0c:	b672      	cpsid	i
   1ac0e:	e7fe      	b.n	1ac0e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1ac10:	4bb6      	ldr	r3, [pc, #728]	; (1aeec <xQueueGenericSend+0x350>)
   1ac12:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ac14:	6a3b      	ldr	r3, [r7, #32]
   1ac16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ac18:	6a3b      	ldr	r3, [r7, #32]
   1ac1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac1c:	429a      	cmp	r2, r3
   1ac1e:	d303      	bcc.n	1ac28 <xQueueGenericSend+0x8c>
   1ac20:	683b      	ldr	r3, [r7, #0]
   1ac22:	2b02      	cmp	r3, #2
   1ac24:	d000      	beq.n	1ac28 <xQueueGenericSend+0x8c>
   1ac26:	e08e      	b.n	1ad46 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1ac28:	4bb1      	ldr	r3, [pc, #708]	; (1aef0 <xQueueGenericSend+0x354>)
   1ac2a:	4798      	blx	r3
   1ac2c:	0003      	movs	r3, r0
   1ac2e:	0018      	movs	r0, r3
   1ac30:	4bb0      	ldr	r3, [pc, #704]	; (1aef4 <xQueueGenericSend+0x358>)
   1ac32:	4798      	blx	r3
   1ac34:	0003      	movs	r3, r0
   1ac36:	001a      	movs	r2, r3
   1ac38:	4baf      	ldr	r3, [pc, #700]	; (1aef8 <xQueueGenericSend+0x35c>)
   1ac3a:	881b      	ldrh	r3, [r3, #0]
   1ac3c:	4013      	ands	r3, r2
   1ac3e:	b29b      	uxth	r3, r3
   1ac40:	2b00      	cmp	r3, #0
   1ac42:	d02e      	beq.n	1aca2 <xQueueGenericSend+0x106>
   1ac44:	6a3b      	ldr	r3, [r7, #32]
   1ac46:	0018      	movs	r0, r3
   1ac48:	4bac      	ldr	r3, [pc, #688]	; (1aefc <xQueueGenericSend+0x360>)
   1ac4a:	4798      	blx	r3
   1ac4c:	0003      	movs	r3, r0
   1ac4e:	001a      	movs	r2, r3
   1ac50:	4ba9      	ldr	r3, [pc, #676]	; (1aef8 <xQueueGenericSend+0x35c>)
   1ac52:	881b      	ldrh	r3, [r3, #0]
   1ac54:	4013      	ands	r3, r2
   1ac56:	b29b      	uxth	r3, r3
   1ac58:	2b00      	cmp	r3, #0
   1ac5a:	d022      	beq.n	1aca2 <xQueueGenericSend+0x106>
   1ac5c:	683b      	ldr	r3, [r7, #0]
   1ac5e:	2b00      	cmp	r3, #0
   1ac60:	d10b      	bne.n	1ac7a <xQueueGenericSend+0xde>
   1ac62:	6a3b      	ldr	r3, [r7, #32]
   1ac64:	0018      	movs	r0, r3
   1ac66:	4ba6      	ldr	r3, [pc, #664]	; (1af00 <xQueueGenericSend+0x364>)
   1ac68:	4798      	blx	r3
   1ac6a:	0003      	movs	r3, r0
   1ac6c:	001a      	movs	r2, r3
   1ac6e:	4ba5      	ldr	r3, [pc, #660]	; (1af04 <xQueueGenericSend+0x368>)
   1ac70:	5c9b      	ldrb	r3, [r3, r2]
   1ac72:	3320      	adds	r3, #32
   1ac74:	b2db      	uxtb	r3, r3
   1ac76:	001d      	movs	r5, r3
   1ac78:	e000      	b.n	1ac7c <xQueueGenericSend+0xe0>
   1ac7a:	2525      	movs	r5, #37	; 0x25
   1ac7c:	6a3b      	ldr	r3, [r7, #32]
   1ac7e:	0018      	movs	r0, r3
   1ac80:	4b9f      	ldr	r3, [pc, #636]	; (1af00 <xQueueGenericSend+0x364>)
   1ac82:	4798      	blx	r3
   1ac84:	0003      	movs	r3, r0
   1ac86:	001a      	movs	r2, r3
   1ac88:	4b9e      	ldr	r3, [pc, #632]	; (1af04 <xQueueGenericSend+0x368>)
   1ac8a:	5c9c      	ldrb	r4, [r3, r2]
   1ac8c:	6a3b      	ldr	r3, [r7, #32]
   1ac8e:	0018      	movs	r0, r3
   1ac90:	4b9d      	ldr	r3, [pc, #628]	; (1af08 <xQueueGenericSend+0x36c>)
   1ac92:	4798      	blx	r3
   1ac94:	0003      	movs	r3, r0
   1ac96:	b2db      	uxtb	r3, r3
   1ac98:	001a      	movs	r2, r3
   1ac9a:	0021      	movs	r1, r4
   1ac9c:	0028      	movs	r0, r5
   1ac9e:	4b9b      	ldr	r3, [pc, #620]	; (1af0c <xQueueGenericSend+0x370>)
   1aca0:	4798      	blx	r3
   1aca2:	6a3b      	ldr	r3, [r7, #32]
   1aca4:	0018      	movs	r0, r3
   1aca6:	4b96      	ldr	r3, [pc, #600]	; (1af00 <xQueueGenericSend+0x364>)
   1aca8:	4798      	blx	r3
   1acaa:	0003      	movs	r3, r0
   1acac:	001a      	movs	r2, r3
   1acae:	4b95      	ldr	r3, [pc, #596]	; (1af04 <xQueueGenericSend+0x368>)
   1acb0:	5c9c      	ldrb	r4, [r3, r2]
   1acb2:	6a3b      	ldr	r3, [r7, #32]
   1acb4:	0018      	movs	r0, r3
   1acb6:	4b94      	ldr	r3, [pc, #592]	; (1af08 <xQueueGenericSend+0x36c>)
   1acb8:	4798      	blx	r3
   1acba:	0003      	movs	r3, r0
   1acbc:	b2dd      	uxtb	r5, r3
   1acbe:	6a3b      	ldr	r3, [r7, #32]
   1acc0:	0018      	movs	r0, r3
   1acc2:	4b8f      	ldr	r3, [pc, #572]	; (1af00 <xQueueGenericSend+0x364>)
   1acc4:	4798      	blx	r3
   1acc6:	0003      	movs	r3, r0
   1acc8:	001a      	movs	r2, r3
   1acca:	4b8e      	ldr	r3, [pc, #568]	; (1af04 <xQueueGenericSend+0x368>)
   1accc:	5c9b      	ldrb	r3, [r3, r2]
   1acce:	2b02      	cmp	r3, #2
   1acd0:	d005      	beq.n	1acde <xQueueGenericSend+0x142>
   1acd2:	6a3b      	ldr	r3, [r7, #32]
   1acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1acd6:	b2db      	uxtb	r3, r3
   1acd8:	3301      	adds	r3, #1
   1acda:	b2db      	uxtb	r3, r3
   1acdc:	e000      	b.n	1ace0 <xQueueGenericSend+0x144>
   1acde:	2300      	movs	r3, #0
   1ace0:	001a      	movs	r2, r3
   1ace2:	0029      	movs	r1, r5
   1ace4:	0020      	movs	r0, r4
   1ace6:	4b8a      	ldr	r3, [pc, #552]	; (1af10 <xQueueGenericSend+0x374>)
   1ace8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1acea:	683a      	ldr	r2, [r7, #0]
   1acec:	68b9      	ldr	r1, [r7, #8]
   1acee:	6a3b      	ldr	r3, [r7, #32]
   1acf0:	0018      	movs	r0, r3
   1acf2:	4b88      	ldr	r3, [pc, #544]	; (1af14 <xQueueGenericSend+0x378>)
   1acf4:	4798      	blx	r3
   1acf6:	0003      	movs	r3, r0
   1acf8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1acfa:	6a3b      	ldr	r3, [r7, #32]
   1acfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1acfe:	2b00      	cmp	r3, #0
   1ad00:	d00a      	beq.n	1ad18 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ad02:	683a      	ldr	r2, [r7, #0]
   1ad04:	6a3b      	ldr	r3, [r7, #32]
   1ad06:	0011      	movs	r1, r2
   1ad08:	0018      	movs	r0, r3
   1ad0a:	4b83      	ldr	r3, [pc, #524]	; (1af18 <xQueueGenericSend+0x37c>)
   1ad0c:	4798      	blx	r3
   1ad0e:	1e03      	subs	r3, r0, #0
   1ad10:	d015      	beq.n	1ad3e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1ad12:	4b82      	ldr	r3, [pc, #520]	; (1af1c <xQueueGenericSend+0x380>)
   1ad14:	4798      	blx	r3
   1ad16:	e012      	b.n	1ad3e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ad18:	6a3b      	ldr	r3, [r7, #32]
   1ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad1c:	2b00      	cmp	r3, #0
   1ad1e:	d009      	beq.n	1ad34 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ad20:	6a3b      	ldr	r3, [r7, #32]
   1ad22:	3324      	adds	r3, #36	; 0x24
   1ad24:	0018      	movs	r0, r3
   1ad26:	4b7e      	ldr	r3, [pc, #504]	; (1af20 <xQueueGenericSend+0x384>)
   1ad28:	4798      	blx	r3
   1ad2a:	1e03      	subs	r3, r0, #0
   1ad2c:	d007      	beq.n	1ad3e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1ad2e:	4b7b      	ldr	r3, [pc, #492]	; (1af1c <xQueueGenericSend+0x380>)
   1ad30:	4798      	blx	r3
   1ad32:	e004      	b.n	1ad3e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1ad34:	69fb      	ldr	r3, [r7, #28]
   1ad36:	2b00      	cmp	r3, #0
   1ad38:	d001      	beq.n	1ad3e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1ad3a:	4b78      	ldr	r3, [pc, #480]	; (1af1c <xQueueGenericSend+0x380>)
   1ad3c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1ad3e:	4b79      	ldr	r3, [pc, #484]	; (1af24 <xQueueGenericSend+0x388>)
   1ad40:	4798      	blx	r3
				return pdPASS;
   1ad42:	2301      	movs	r3, #1
   1ad44:	e142      	b.n	1afcc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ad46:	687b      	ldr	r3, [r7, #4]
   1ad48:	2b00      	cmp	r3, #0
   1ad4a:	d140      	bne.n	1adce <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ad4c:	4b75      	ldr	r3, [pc, #468]	; (1af24 <xQueueGenericSend+0x388>)
   1ad4e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1ad50:	4b67      	ldr	r3, [pc, #412]	; (1aef0 <xQueueGenericSend+0x354>)
   1ad52:	4798      	blx	r3
   1ad54:	0003      	movs	r3, r0
   1ad56:	0018      	movs	r0, r3
   1ad58:	4b66      	ldr	r3, [pc, #408]	; (1aef4 <xQueueGenericSend+0x358>)
   1ad5a:	4798      	blx	r3
   1ad5c:	0003      	movs	r3, r0
   1ad5e:	001a      	movs	r2, r3
   1ad60:	4b65      	ldr	r3, [pc, #404]	; (1aef8 <xQueueGenericSend+0x35c>)
   1ad62:	881b      	ldrh	r3, [r3, #0]
   1ad64:	4013      	ands	r3, r2
   1ad66:	b29b      	uxth	r3, r3
   1ad68:	2b00      	cmp	r3, #0
   1ad6a:	d02e      	beq.n	1adca <xQueueGenericSend+0x22e>
   1ad6c:	6a3b      	ldr	r3, [r7, #32]
   1ad6e:	0018      	movs	r0, r3
   1ad70:	4b62      	ldr	r3, [pc, #392]	; (1aefc <xQueueGenericSend+0x360>)
   1ad72:	4798      	blx	r3
   1ad74:	0003      	movs	r3, r0
   1ad76:	001a      	movs	r2, r3
   1ad78:	4b5f      	ldr	r3, [pc, #380]	; (1aef8 <xQueueGenericSend+0x35c>)
   1ad7a:	881b      	ldrh	r3, [r3, #0]
   1ad7c:	4013      	ands	r3, r2
   1ad7e:	b29b      	uxth	r3, r3
   1ad80:	2b00      	cmp	r3, #0
   1ad82:	d022      	beq.n	1adca <xQueueGenericSend+0x22e>
   1ad84:	683b      	ldr	r3, [r7, #0]
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	d10b      	bne.n	1ada2 <xQueueGenericSend+0x206>
   1ad8a:	6a3b      	ldr	r3, [r7, #32]
   1ad8c:	0018      	movs	r0, r3
   1ad8e:	4b5c      	ldr	r3, [pc, #368]	; (1af00 <xQueueGenericSend+0x364>)
   1ad90:	4798      	blx	r3
   1ad92:	0003      	movs	r3, r0
   1ad94:	001a      	movs	r2, r3
   1ad96:	4b5b      	ldr	r3, [pc, #364]	; (1af04 <xQueueGenericSend+0x368>)
   1ad98:	5c9b      	ldrb	r3, [r3, r2]
   1ad9a:	3348      	adds	r3, #72	; 0x48
   1ad9c:	b2db      	uxtb	r3, r3
   1ad9e:	001d      	movs	r5, r3
   1ada0:	e000      	b.n	1ada4 <xQueueGenericSend+0x208>
   1ada2:	254d      	movs	r5, #77	; 0x4d
   1ada4:	6a3b      	ldr	r3, [r7, #32]
   1ada6:	0018      	movs	r0, r3
   1ada8:	4b55      	ldr	r3, [pc, #340]	; (1af00 <xQueueGenericSend+0x364>)
   1adaa:	4798      	blx	r3
   1adac:	0003      	movs	r3, r0
   1adae:	001a      	movs	r2, r3
   1adb0:	4b54      	ldr	r3, [pc, #336]	; (1af04 <xQueueGenericSend+0x368>)
   1adb2:	5c9c      	ldrb	r4, [r3, r2]
   1adb4:	6a3b      	ldr	r3, [r7, #32]
   1adb6:	0018      	movs	r0, r3
   1adb8:	4b53      	ldr	r3, [pc, #332]	; (1af08 <xQueueGenericSend+0x36c>)
   1adba:	4798      	blx	r3
   1adbc:	0003      	movs	r3, r0
   1adbe:	b2db      	uxtb	r3, r3
   1adc0:	001a      	movs	r2, r3
   1adc2:	0021      	movs	r1, r4
   1adc4:	0028      	movs	r0, r5
   1adc6:	4b51      	ldr	r3, [pc, #324]	; (1af0c <xQueueGenericSend+0x370>)
   1adc8:	4798      	blx	r3
					return errQUEUE_FULL;
   1adca:	2300      	movs	r3, #0
   1adcc:	e0fe      	b.n	1afcc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1add0:	2b00      	cmp	r3, #0
   1add2:	d106      	bne.n	1ade2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1add4:	2314      	movs	r3, #20
   1add6:	18fb      	adds	r3, r7, r3
   1add8:	0018      	movs	r0, r3
   1adda:	4b53      	ldr	r3, [pc, #332]	; (1af28 <xQueueGenericSend+0x38c>)
   1addc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1adde:	2301      	movs	r3, #1
   1ade0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ade2:	4b50      	ldr	r3, [pc, #320]	; (1af24 <xQueueGenericSend+0x388>)
   1ade4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ade6:	4b51      	ldr	r3, [pc, #324]	; (1af2c <xQueueGenericSend+0x390>)
   1ade8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1adea:	4b40      	ldr	r3, [pc, #256]	; (1aeec <xQueueGenericSend+0x350>)
   1adec:	4798      	blx	r3
   1adee:	6a3b      	ldr	r3, [r7, #32]
   1adf0:	2244      	movs	r2, #68	; 0x44
   1adf2:	5c9b      	ldrb	r3, [r3, r2]
   1adf4:	b25b      	sxtb	r3, r3
   1adf6:	3301      	adds	r3, #1
   1adf8:	d103      	bne.n	1ae02 <xQueueGenericSend+0x266>
   1adfa:	6a3b      	ldr	r3, [r7, #32]
   1adfc:	2244      	movs	r2, #68	; 0x44
   1adfe:	2100      	movs	r1, #0
   1ae00:	5499      	strb	r1, [r3, r2]
   1ae02:	6a3b      	ldr	r3, [r7, #32]
   1ae04:	2245      	movs	r2, #69	; 0x45
   1ae06:	5c9b      	ldrb	r3, [r3, r2]
   1ae08:	b25b      	sxtb	r3, r3
   1ae0a:	3301      	adds	r3, #1
   1ae0c:	d103      	bne.n	1ae16 <xQueueGenericSend+0x27a>
   1ae0e:	6a3b      	ldr	r3, [r7, #32]
   1ae10:	2245      	movs	r2, #69	; 0x45
   1ae12:	2100      	movs	r1, #0
   1ae14:	5499      	strb	r1, [r3, r2]
   1ae16:	4b43      	ldr	r3, [pc, #268]	; (1af24 <xQueueGenericSend+0x388>)
   1ae18:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ae1a:	1d3a      	adds	r2, r7, #4
   1ae1c:	2314      	movs	r3, #20
   1ae1e:	18fb      	adds	r3, r7, r3
   1ae20:	0011      	movs	r1, r2
   1ae22:	0018      	movs	r0, r3
   1ae24:	4b42      	ldr	r3, [pc, #264]	; (1af30 <xQueueGenericSend+0x394>)
   1ae26:	4798      	blx	r3
   1ae28:	1e03      	subs	r3, r0, #0
   1ae2a:	d000      	beq.n	1ae2e <xQueueGenericSend+0x292>
   1ae2c:	e08a      	b.n	1af44 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1ae2e:	6a3b      	ldr	r3, [r7, #32]
   1ae30:	0018      	movs	r0, r3
   1ae32:	4b40      	ldr	r3, [pc, #256]	; (1af34 <xQueueGenericSend+0x398>)
   1ae34:	4798      	blx	r3
   1ae36:	1e03      	subs	r3, r0, #0
   1ae38:	d04f      	beq.n	1aeda <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1ae3a:	4b2d      	ldr	r3, [pc, #180]	; (1aef0 <xQueueGenericSend+0x354>)
   1ae3c:	4798      	blx	r3
   1ae3e:	0003      	movs	r3, r0
   1ae40:	0018      	movs	r0, r3
   1ae42:	4b2c      	ldr	r3, [pc, #176]	; (1aef4 <xQueueGenericSend+0x358>)
   1ae44:	4798      	blx	r3
   1ae46:	0003      	movs	r3, r0
   1ae48:	001a      	movs	r2, r3
   1ae4a:	4b2b      	ldr	r3, [pc, #172]	; (1aef8 <xQueueGenericSend+0x35c>)
   1ae4c:	881b      	ldrh	r3, [r3, #0]
   1ae4e:	4013      	ands	r3, r2
   1ae50:	b29b      	uxth	r3, r3
   1ae52:	2b00      	cmp	r3, #0
   1ae54:	d02e      	beq.n	1aeb4 <xQueueGenericSend+0x318>
   1ae56:	6a3b      	ldr	r3, [r7, #32]
   1ae58:	0018      	movs	r0, r3
   1ae5a:	4b28      	ldr	r3, [pc, #160]	; (1aefc <xQueueGenericSend+0x360>)
   1ae5c:	4798      	blx	r3
   1ae5e:	0003      	movs	r3, r0
   1ae60:	001a      	movs	r2, r3
   1ae62:	4b25      	ldr	r3, [pc, #148]	; (1aef8 <xQueueGenericSend+0x35c>)
   1ae64:	881b      	ldrh	r3, [r3, #0]
   1ae66:	4013      	ands	r3, r2
   1ae68:	b29b      	uxth	r3, r3
   1ae6a:	2b00      	cmp	r3, #0
   1ae6c:	d022      	beq.n	1aeb4 <xQueueGenericSend+0x318>
   1ae6e:	683b      	ldr	r3, [r7, #0]
   1ae70:	2b00      	cmp	r3, #0
   1ae72:	d10b      	bne.n	1ae8c <xQueueGenericSend+0x2f0>
   1ae74:	6a3b      	ldr	r3, [r7, #32]
   1ae76:	0018      	movs	r0, r3
   1ae78:	4b21      	ldr	r3, [pc, #132]	; (1af00 <xQueueGenericSend+0x364>)
   1ae7a:	4798      	blx	r3
   1ae7c:	0003      	movs	r3, r0
   1ae7e:	001a      	movs	r2, r3
   1ae80:	4b20      	ldr	r3, [pc, #128]	; (1af04 <xQueueGenericSend+0x368>)
   1ae82:	5c9b      	ldrb	r3, [r3, r2]
   1ae84:	3370      	adds	r3, #112	; 0x70
   1ae86:	b2db      	uxtb	r3, r3
   1ae88:	001d      	movs	r5, r3
   1ae8a:	e000      	b.n	1ae8e <xQueueGenericSend+0x2f2>
   1ae8c:	2575      	movs	r5, #117	; 0x75
   1ae8e:	6a3b      	ldr	r3, [r7, #32]
   1ae90:	0018      	movs	r0, r3
   1ae92:	4b1b      	ldr	r3, [pc, #108]	; (1af00 <xQueueGenericSend+0x364>)
   1ae94:	4798      	blx	r3
   1ae96:	0003      	movs	r3, r0
   1ae98:	001a      	movs	r2, r3
   1ae9a:	4b1a      	ldr	r3, [pc, #104]	; (1af04 <xQueueGenericSend+0x368>)
   1ae9c:	5c9c      	ldrb	r4, [r3, r2]
   1ae9e:	6a3b      	ldr	r3, [r7, #32]
   1aea0:	0018      	movs	r0, r3
   1aea2:	4b19      	ldr	r3, [pc, #100]	; (1af08 <xQueueGenericSend+0x36c>)
   1aea4:	4798      	blx	r3
   1aea6:	0003      	movs	r3, r0
   1aea8:	b2db      	uxtb	r3, r3
   1aeaa:	001a      	movs	r2, r3
   1aeac:	0021      	movs	r1, r4
   1aeae:	0028      	movs	r0, r5
   1aeb0:	4b16      	ldr	r3, [pc, #88]	; (1af0c <xQueueGenericSend+0x370>)
   1aeb2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1aeb4:	6a3b      	ldr	r3, [r7, #32]
   1aeb6:	3310      	adds	r3, #16
   1aeb8:	687a      	ldr	r2, [r7, #4]
   1aeba:	0011      	movs	r1, r2
   1aebc:	0018      	movs	r0, r3
   1aebe:	4b1e      	ldr	r3, [pc, #120]	; (1af38 <xQueueGenericSend+0x39c>)
   1aec0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1aec2:	6a3b      	ldr	r3, [r7, #32]
   1aec4:	0018      	movs	r0, r3
   1aec6:	4b1d      	ldr	r3, [pc, #116]	; (1af3c <xQueueGenericSend+0x3a0>)
   1aec8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1aeca:	4b1d      	ldr	r3, [pc, #116]	; (1af40 <xQueueGenericSend+0x3a4>)
   1aecc:	4798      	blx	r3
   1aece:	1e03      	subs	r3, r0, #0
   1aed0:	d000      	beq.n	1aed4 <xQueueGenericSend+0x338>
   1aed2:	e69d      	b.n	1ac10 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1aed4:	4b11      	ldr	r3, [pc, #68]	; (1af1c <xQueueGenericSend+0x380>)
   1aed6:	4798      	blx	r3
   1aed8:	e69a      	b.n	1ac10 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1aeda:	6a3b      	ldr	r3, [r7, #32]
   1aedc:	0018      	movs	r0, r3
   1aede:	4b17      	ldr	r3, [pc, #92]	; (1af3c <xQueueGenericSend+0x3a0>)
   1aee0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1aee2:	4b17      	ldr	r3, [pc, #92]	; (1af40 <xQueueGenericSend+0x3a4>)
   1aee4:	4798      	blx	r3
   1aee6:	e693      	b.n	1ac10 <xQueueGenericSend+0x74>
   1aee8:	0001d329 	.word	0x0001d329
   1aeec:	0001a609 	.word	0x0001a609
   1aef0:	000188a1 	.word	0x000188a1
   1aef4:	00018605 	.word	0x00018605
   1aef8:	20000110 	.word	0x20000110
   1aefc:	000186c5 	.word	0x000186c5
   1af00:	000185c5 	.word	0x000185c5
   1af04:	20000104 	.word	0x20000104
   1af08:	000186a5 	.word	0x000186a5
   1af0c:	00018ffd 	.word	0x00018ffd
   1af10:	00019659 	.word	0x00019659
   1af14:	0001bdd5 	.word	0x0001bdd5
   1af18:	0001c0d9 	.word	0x0001c0d9
   1af1c:	0001a5f1 	.word	0x0001a5f1
   1af20:	0001ce99 	.word	0x0001ce99
   1af24:	0001a62d 	.word	0x0001a62d
   1af28:	0001cfd9 	.word	0x0001cfd9
   1af2c:	0001c8c1 	.word	0x0001c8c1
   1af30:	0001d001 	.word	0x0001d001
   1af34:	0001c029 	.word	0x0001c029
   1af38:	0001cd75 	.word	0x0001cd75
   1af3c:	0001bf05 	.word	0x0001bf05
   1af40:	0001c8d9 	.word	0x0001c8d9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1af44:	6a3b      	ldr	r3, [r7, #32]
   1af46:	0018      	movs	r0, r3
   1af48:	4b22      	ldr	r3, [pc, #136]	; (1afd4 <xQueueGenericSend+0x438>)
   1af4a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1af4c:	4b22      	ldr	r3, [pc, #136]	; (1afd8 <xQueueGenericSend+0x43c>)
   1af4e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1af50:	4b22      	ldr	r3, [pc, #136]	; (1afdc <xQueueGenericSend+0x440>)
   1af52:	4798      	blx	r3
   1af54:	0003      	movs	r3, r0
   1af56:	0018      	movs	r0, r3
   1af58:	4b21      	ldr	r3, [pc, #132]	; (1afe0 <xQueueGenericSend+0x444>)
   1af5a:	4798      	blx	r3
   1af5c:	0003      	movs	r3, r0
   1af5e:	001a      	movs	r2, r3
   1af60:	4b20      	ldr	r3, [pc, #128]	; (1afe4 <xQueueGenericSend+0x448>)
   1af62:	881b      	ldrh	r3, [r3, #0]
   1af64:	4013      	ands	r3, r2
   1af66:	b29b      	uxth	r3, r3
   1af68:	2b00      	cmp	r3, #0
   1af6a:	d02e      	beq.n	1afca <xQueueGenericSend+0x42e>
   1af6c:	6a3b      	ldr	r3, [r7, #32]
   1af6e:	0018      	movs	r0, r3
   1af70:	4b1d      	ldr	r3, [pc, #116]	; (1afe8 <xQueueGenericSend+0x44c>)
   1af72:	4798      	blx	r3
   1af74:	0003      	movs	r3, r0
   1af76:	001a      	movs	r2, r3
   1af78:	4b1a      	ldr	r3, [pc, #104]	; (1afe4 <xQueueGenericSend+0x448>)
   1af7a:	881b      	ldrh	r3, [r3, #0]
   1af7c:	4013      	ands	r3, r2
   1af7e:	b29b      	uxth	r3, r3
   1af80:	2b00      	cmp	r3, #0
   1af82:	d022      	beq.n	1afca <xQueueGenericSend+0x42e>
   1af84:	683b      	ldr	r3, [r7, #0]
   1af86:	2b00      	cmp	r3, #0
   1af88:	d10b      	bne.n	1afa2 <xQueueGenericSend+0x406>
   1af8a:	6a3b      	ldr	r3, [r7, #32]
   1af8c:	0018      	movs	r0, r3
   1af8e:	4b17      	ldr	r3, [pc, #92]	; (1afec <xQueueGenericSend+0x450>)
   1af90:	4798      	blx	r3
   1af92:	0003      	movs	r3, r0
   1af94:	001a      	movs	r2, r3
   1af96:	4b16      	ldr	r3, [pc, #88]	; (1aff0 <xQueueGenericSend+0x454>)
   1af98:	5c9b      	ldrb	r3, [r3, r2]
   1af9a:	3348      	adds	r3, #72	; 0x48
   1af9c:	b2db      	uxtb	r3, r3
   1af9e:	001d      	movs	r5, r3
   1afa0:	e000      	b.n	1afa4 <xQueueGenericSend+0x408>
   1afa2:	254d      	movs	r5, #77	; 0x4d
   1afa4:	6a3b      	ldr	r3, [r7, #32]
   1afa6:	0018      	movs	r0, r3
   1afa8:	4b10      	ldr	r3, [pc, #64]	; (1afec <xQueueGenericSend+0x450>)
   1afaa:	4798      	blx	r3
   1afac:	0003      	movs	r3, r0
   1afae:	001a      	movs	r2, r3
   1afb0:	4b0f      	ldr	r3, [pc, #60]	; (1aff0 <xQueueGenericSend+0x454>)
   1afb2:	5c9c      	ldrb	r4, [r3, r2]
   1afb4:	6a3b      	ldr	r3, [r7, #32]
   1afb6:	0018      	movs	r0, r3
   1afb8:	4b0e      	ldr	r3, [pc, #56]	; (1aff4 <xQueueGenericSend+0x458>)
   1afba:	4798      	blx	r3
   1afbc:	0003      	movs	r3, r0
   1afbe:	b2db      	uxtb	r3, r3
   1afc0:	001a      	movs	r2, r3
   1afc2:	0021      	movs	r1, r4
   1afc4:	0028      	movs	r0, r5
   1afc6:	4b0c      	ldr	r3, [pc, #48]	; (1aff8 <xQueueGenericSend+0x45c>)
   1afc8:	4798      	blx	r3
			return errQUEUE_FULL;
   1afca:	2300      	movs	r3, #0
		}
	}
}
   1afcc:	0018      	movs	r0, r3
   1afce:	46bd      	mov	sp, r7
   1afd0:	b00a      	add	sp, #40	; 0x28
   1afd2:	bdb0      	pop	{r4, r5, r7, pc}
   1afd4:	0001bf05 	.word	0x0001bf05
   1afd8:	0001c8d9 	.word	0x0001c8d9
   1afdc:	000188a1 	.word	0x000188a1
   1afe0:	00018605 	.word	0x00018605
   1afe4:	20000110 	.word	0x20000110
   1afe8:	000186c5 	.word	0x000186c5
   1afec:	000185c5 	.word	0x000185c5
   1aff0:	20000104 	.word	0x20000104
   1aff4:	000186a5 	.word	0x000186a5
   1aff8:	00018ffd 	.word	0x00018ffd

0001affc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1affc:	b5b0      	push	{r4, r5, r7, lr}
   1affe:	b088      	sub	sp, #32
   1b000:	af00      	add	r7, sp, #0
   1b002:	60f8      	str	r0, [r7, #12]
   1b004:	60b9      	str	r1, [r7, #8]
   1b006:	607a      	str	r2, [r7, #4]
   1b008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b00a:	68fb      	ldr	r3, [r7, #12]
   1b00c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b00e:	69bb      	ldr	r3, [r7, #24]
   1b010:	2b00      	cmp	r3, #0
   1b012:	d101      	bne.n	1b018 <xQueueGenericSendFromISR+0x1c>
   1b014:	b672      	cpsid	i
   1b016:	e7fe      	b.n	1b016 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b018:	68bb      	ldr	r3, [r7, #8]
   1b01a:	2b00      	cmp	r3, #0
   1b01c:	d103      	bne.n	1b026 <xQueueGenericSendFromISR+0x2a>
   1b01e:	69bb      	ldr	r3, [r7, #24]
   1b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b022:	2b00      	cmp	r3, #0
   1b024:	d101      	bne.n	1b02a <xQueueGenericSendFromISR+0x2e>
   1b026:	2301      	movs	r3, #1
   1b028:	e000      	b.n	1b02c <xQueueGenericSendFromISR+0x30>
   1b02a:	2300      	movs	r3, #0
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d101      	bne.n	1b034 <xQueueGenericSendFromISR+0x38>
   1b030:	b672      	cpsid	i
   1b032:	e7fe      	b.n	1b032 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b034:	683b      	ldr	r3, [r7, #0]
   1b036:	2b02      	cmp	r3, #2
   1b038:	d103      	bne.n	1b042 <xQueueGenericSendFromISR+0x46>
   1b03a:	69bb      	ldr	r3, [r7, #24]
   1b03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b03e:	2b01      	cmp	r3, #1
   1b040:	d101      	bne.n	1b046 <xQueueGenericSendFromISR+0x4a>
   1b042:	2301      	movs	r3, #1
   1b044:	e000      	b.n	1b048 <xQueueGenericSendFromISR+0x4c>
   1b046:	2300      	movs	r3, #0
   1b048:	2b00      	cmp	r3, #0
   1b04a:	d101      	bne.n	1b050 <xQueueGenericSendFromISR+0x54>
   1b04c:	b672      	cpsid	i
   1b04e:	e7fe      	b.n	1b04e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b050:	4b68      	ldr	r3, [pc, #416]	; (1b1f4 <xQueueGenericSendFromISR+0x1f8>)
   1b052:	4798      	blx	r3
   1b054:	0003      	movs	r3, r0
   1b056:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b058:	69bb      	ldr	r3, [r7, #24]
   1b05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b05c:	69bb      	ldr	r3, [r7, #24]
   1b05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b060:	429a      	cmp	r2, r3
   1b062:	d303      	bcc.n	1b06c <xQueueGenericSendFromISR+0x70>
   1b064:	683b      	ldr	r3, [r7, #0]
   1b066:	2b02      	cmp	r3, #2
   1b068:	d000      	beq.n	1b06c <xQueueGenericSendFromISR+0x70>
   1b06a:	e088      	b.n	1b17e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b06c:	2313      	movs	r3, #19
   1b06e:	18fb      	adds	r3, r7, r3
   1b070:	69ba      	ldr	r2, [r7, #24]
   1b072:	2145      	movs	r1, #69	; 0x45
   1b074:	5c52      	ldrb	r2, [r2, r1]
   1b076:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b078:	69bb      	ldr	r3, [r7, #24]
   1b07a:	0018      	movs	r0, r3
   1b07c:	4b5e      	ldr	r3, [pc, #376]	; (1b1f8 <xQueueGenericSendFromISR+0x1fc>)
   1b07e:	4798      	blx	r3
   1b080:	0003      	movs	r3, r0
   1b082:	001a      	movs	r2, r3
   1b084:	4b5d      	ldr	r3, [pc, #372]	; (1b1fc <xQueueGenericSendFromISR+0x200>)
   1b086:	881b      	ldrh	r3, [r3, #0]
   1b088:	4013      	ands	r3, r2
   1b08a:	b29b      	uxth	r3, r3
   1b08c:	2b00      	cmp	r3, #0
   1b08e:	d022      	beq.n	1b0d6 <xQueueGenericSendFromISR+0xda>
   1b090:	683b      	ldr	r3, [r7, #0]
   1b092:	2b00      	cmp	r3, #0
   1b094:	d10b      	bne.n	1b0ae <xQueueGenericSendFromISR+0xb2>
   1b096:	69bb      	ldr	r3, [r7, #24]
   1b098:	0018      	movs	r0, r3
   1b09a:	4b59      	ldr	r3, [pc, #356]	; (1b200 <xQueueGenericSendFromISR+0x204>)
   1b09c:	4798      	blx	r3
   1b09e:	0003      	movs	r3, r0
   1b0a0:	001a      	movs	r2, r3
   1b0a2:	4b58      	ldr	r3, [pc, #352]	; (1b204 <xQueueGenericSendFromISR+0x208>)
   1b0a4:	5c9b      	ldrb	r3, [r3, r2]
   1b0a6:	3330      	adds	r3, #48	; 0x30
   1b0a8:	b2db      	uxtb	r3, r3
   1b0aa:	001d      	movs	r5, r3
   1b0ac:	e000      	b.n	1b0b0 <xQueueGenericSendFromISR+0xb4>
   1b0ae:	2535      	movs	r5, #53	; 0x35
   1b0b0:	69bb      	ldr	r3, [r7, #24]
   1b0b2:	0018      	movs	r0, r3
   1b0b4:	4b52      	ldr	r3, [pc, #328]	; (1b200 <xQueueGenericSendFromISR+0x204>)
   1b0b6:	4798      	blx	r3
   1b0b8:	0003      	movs	r3, r0
   1b0ba:	001a      	movs	r2, r3
   1b0bc:	4b51      	ldr	r3, [pc, #324]	; (1b204 <xQueueGenericSendFromISR+0x208>)
   1b0be:	5c9c      	ldrb	r4, [r3, r2]
   1b0c0:	69bb      	ldr	r3, [r7, #24]
   1b0c2:	0018      	movs	r0, r3
   1b0c4:	4b50      	ldr	r3, [pc, #320]	; (1b208 <xQueueGenericSendFromISR+0x20c>)
   1b0c6:	4798      	blx	r3
   1b0c8:	0003      	movs	r3, r0
   1b0ca:	b2db      	uxtb	r3, r3
   1b0cc:	001a      	movs	r2, r3
   1b0ce:	0021      	movs	r1, r4
   1b0d0:	0028      	movs	r0, r5
   1b0d2:	4b4e      	ldr	r3, [pc, #312]	; (1b20c <xQueueGenericSendFromISR+0x210>)
   1b0d4:	4798      	blx	r3
   1b0d6:	69bb      	ldr	r3, [r7, #24]
   1b0d8:	0018      	movs	r0, r3
   1b0da:	4b49      	ldr	r3, [pc, #292]	; (1b200 <xQueueGenericSendFromISR+0x204>)
   1b0dc:	4798      	blx	r3
   1b0de:	0003      	movs	r3, r0
   1b0e0:	001a      	movs	r2, r3
   1b0e2:	4b48      	ldr	r3, [pc, #288]	; (1b204 <xQueueGenericSendFromISR+0x208>)
   1b0e4:	5c9c      	ldrb	r4, [r3, r2]
   1b0e6:	69bb      	ldr	r3, [r7, #24]
   1b0e8:	0018      	movs	r0, r3
   1b0ea:	4b47      	ldr	r3, [pc, #284]	; (1b208 <xQueueGenericSendFromISR+0x20c>)
   1b0ec:	4798      	blx	r3
   1b0ee:	0003      	movs	r3, r0
   1b0f0:	b2d9      	uxtb	r1, r3
   1b0f2:	69bb      	ldr	r3, [r7, #24]
   1b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b0f6:	b2db      	uxtb	r3, r3
   1b0f8:	3301      	adds	r3, #1
   1b0fa:	b2db      	uxtb	r3, r3
   1b0fc:	001a      	movs	r2, r3
   1b0fe:	0020      	movs	r0, r4
   1b100:	4b43      	ldr	r3, [pc, #268]	; (1b210 <xQueueGenericSendFromISR+0x214>)
   1b102:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b104:	683a      	ldr	r2, [r7, #0]
   1b106:	68b9      	ldr	r1, [r7, #8]
   1b108:	69bb      	ldr	r3, [r7, #24]
   1b10a:	0018      	movs	r0, r3
   1b10c:	4b41      	ldr	r3, [pc, #260]	; (1b214 <xQueueGenericSendFromISR+0x218>)
   1b10e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b110:	2313      	movs	r3, #19
   1b112:	18fb      	adds	r3, r7, r3
   1b114:	781b      	ldrb	r3, [r3, #0]
   1b116:	b25b      	sxtb	r3, r3
   1b118:	3301      	adds	r3, #1
   1b11a:	d124      	bne.n	1b166 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b11c:	69bb      	ldr	r3, [r7, #24]
   1b11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b120:	2b00      	cmp	r3, #0
   1b122:	d00e      	beq.n	1b142 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b124:	683a      	ldr	r2, [r7, #0]
   1b126:	69bb      	ldr	r3, [r7, #24]
   1b128:	0011      	movs	r1, r2
   1b12a:	0018      	movs	r0, r3
   1b12c:	4b3a      	ldr	r3, [pc, #232]	; (1b218 <xQueueGenericSendFromISR+0x21c>)
   1b12e:	4798      	blx	r3
   1b130:	1e03      	subs	r3, r0, #0
   1b132:	d021      	beq.n	1b178 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b134:	687b      	ldr	r3, [r7, #4]
   1b136:	2b00      	cmp	r3, #0
   1b138:	d01e      	beq.n	1b178 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b13a:	687b      	ldr	r3, [r7, #4]
   1b13c:	2201      	movs	r2, #1
   1b13e:	601a      	str	r2, [r3, #0]
   1b140:	e01a      	b.n	1b178 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b142:	69bb      	ldr	r3, [r7, #24]
   1b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b146:	2b00      	cmp	r3, #0
   1b148:	d016      	beq.n	1b178 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b14a:	69bb      	ldr	r3, [r7, #24]
   1b14c:	3324      	adds	r3, #36	; 0x24
   1b14e:	0018      	movs	r0, r3
   1b150:	4b32      	ldr	r3, [pc, #200]	; (1b21c <xQueueGenericSendFromISR+0x220>)
   1b152:	4798      	blx	r3
   1b154:	1e03      	subs	r3, r0, #0
   1b156:	d00f      	beq.n	1b178 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b158:	687b      	ldr	r3, [r7, #4]
   1b15a:	2b00      	cmp	r3, #0
   1b15c:	d00c      	beq.n	1b178 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b15e:	687b      	ldr	r3, [r7, #4]
   1b160:	2201      	movs	r2, #1
   1b162:	601a      	str	r2, [r3, #0]
   1b164:	e008      	b.n	1b178 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b166:	2313      	movs	r3, #19
   1b168:	18fb      	adds	r3, r7, r3
   1b16a:	781b      	ldrb	r3, [r3, #0]
   1b16c:	3301      	adds	r3, #1
   1b16e:	b2db      	uxtb	r3, r3
   1b170:	b259      	sxtb	r1, r3
   1b172:	69bb      	ldr	r3, [r7, #24]
   1b174:	2245      	movs	r2, #69	; 0x45
   1b176:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b178:	2301      	movs	r3, #1
   1b17a:	61fb      	str	r3, [r7, #28]
		{
   1b17c:	e030      	b.n	1b1e0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b17e:	69bb      	ldr	r3, [r7, #24]
   1b180:	0018      	movs	r0, r3
   1b182:	4b1d      	ldr	r3, [pc, #116]	; (1b1f8 <xQueueGenericSendFromISR+0x1fc>)
   1b184:	4798      	blx	r3
   1b186:	0003      	movs	r3, r0
   1b188:	001a      	movs	r2, r3
   1b18a:	4b1c      	ldr	r3, [pc, #112]	; (1b1fc <xQueueGenericSendFromISR+0x200>)
   1b18c:	881b      	ldrh	r3, [r3, #0]
   1b18e:	4013      	ands	r3, r2
   1b190:	b29b      	uxth	r3, r3
   1b192:	2b00      	cmp	r3, #0
   1b194:	d022      	beq.n	1b1dc <xQueueGenericSendFromISR+0x1e0>
   1b196:	683b      	ldr	r3, [r7, #0]
   1b198:	2b00      	cmp	r3, #0
   1b19a:	d10b      	bne.n	1b1b4 <xQueueGenericSendFromISR+0x1b8>
   1b19c:	69bb      	ldr	r3, [r7, #24]
   1b19e:	0018      	movs	r0, r3
   1b1a0:	4b17      	ldr	r3, [pc, #92]	; (1b200 <xQueueGenericSendFromISR+0x204>)
   1b1a2:	4798      	blx	r3
   1b1a4:	0003      	movs	r3, r0
   1b1a6:	001a      	movs	r2, r3
   1b1a8:	4b16      	ldr	r3, [pc, #88]	; (1b204 <xQueueGenericSendFromISR+0x208>)
   1b1aa:	5c9b      	ldrb	r3, [r3, r2]
   1b1ac:	3358      	adds	r3, #88	; 0x58
   1b1ae:	b2db      	uxtb	r3, r3
   1b1b0:	001d      	movs	r5, r3
   1b1b2:	e000      	b.n	1b1b6 <xQueueGenericSendFromISR+0x1ba>
   1b1b4:	255d      	movs	r5, #93	; 0x5d
   1b1b6:	69bb      	ldr	r3, [r7, #24]
   1b1b8:	0018      	movs	r0, r3
   1b1ba:	4b11      	ldr	r3, [pc, #68]	; (1b200 <xQueueGenericSendFromISR+0x204>)
   1b1bc:	4798      	blx	r3
   1b1be:	0003      	movs	r3, r0
   1b1c0:	001a      	movs	r2, r3
   1b1c2:	4b10      	ldr	r3, [pc, #64]	; (1b204 <xQueueGenericSendFromISR+0x208>)
   1b1c4:	5c9c      	ldrb	r4, [r3, r2]
   1b1c6:	69bb      	ldr	r3, [r7, #24]
   1b1c8:	0018      	movs	r0, r3
   1b1ca:	4b0f      	ldr	r3, [pc, #60]	; (1b208 <xQueueGenericSendFromISR+0x20c>)
   1b1cc:	4798      	blx	r3
   1b1ce:	0003      	movs	r3, r0
   1b1d0:	b2db      	uxtb	r3, r3
   1b1d2:	001a      	movs	r2, r3
   1b1d4:	0021      	movs	r1, r4
   1b1d6:	0028      	movs	r0, r5
   1b1d8:	4b0c      	ldr	r3, [pc, #48]	; (1b20c <xQueueGenericSendFromISR+0x210>)
   1b1da:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b1dc:	2300      	movs	r3, #0
   1b1de:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b1e0:	697b      	ldr	r3, [r7, #20]
   1b1e2:	0018      	movs	r0, r3
   1b1e4:	4b0e      	ldr	r3, [pc, #56]	; (1b220 <xQueueGenericSendFromISR+0x224>)
   1b1e6:	4798      	blx	r3

	return xReturn;
   1b1e8:	69fb      	ldr	r3, [r7, #28]
}
   1b1ea:	0018      	movs	r0, r3
   1b1ec:	46bd      	mov	sp, r7
   1b1ee:	b008      	add	sp, #32
   1b1f0:	bdb0      	pop	{r4, r5, r7, pc}
   1b1f2:	46c0      	nop			; (mov r8, r8)
   1b1f4:	0001a65d 	.word	0x0001a65d
   1b1f8:	000186c5 	.word	0x000186c5
   1b1fc:	20000110 	.word	0x20000110
   1b200:	000185c5 	.word	0x000185c5
   1b204:	20000104 	.word	0x20000104
   1b208:	000186a5 	.word	0x000186a5
   1b20c:	00018ffd 	.word	0x00018ffd
   1b210:	00019659 	.word	0x00019659
   1b214:	0001bdd5 	.word	0x0001bdd5
   1b218:	0001c0d9 	.word	0x0001c0d9
   1b21c:	0001ce99 	.word	0x0001ce99
   1b220:	0001a669 	.word	0x0001a669

0001b224 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b224:	b580      	push	{r7, lr}
   1b226:	b082      	sub	sp, #8
   1b228:	af00      	add	r7, sp, #0
   1b22a:	6078      	str	r0, [r7, #4]
   1b22c:	6039      	str	r1, [r7, #0]
   1b22e:	6839      	ldr	r1, [r7, #0]
   1b230:	687b      	ldr	r3, [r7, #4]
   1b232:	2200      	movs	r2, #0
   1b234:	0018      	movs	r0, r3
   1b236:	4b03      	ldr	r3, [pc, #12]	; (1b244 <xQueueGiveFromISR+0x20>)
   1b238:	4798      	blx	r3
   1b23a:	0003      	movs	r3, r0
   1b23c:	0018      	movs	r0, r3
   1b23e:	46bd      	mov	sp, r7
   1b240:	b002      	add	sp, #8
   1b242:	bd80      	pop	{r7, pc}
   1b244:	0001b249 	.word	0x0001b249

0001b248 <MyWrapper>:
{
   1b248:	b5b0      	push	{r4, r5, r7, lr}
   1b24a:	b08a      	sub	sp, #40	; 0x28
   1b24c:	af00      	add	r7, sp, #0
   1b24e:	60f8      	str	r0, [r7, #12]
   1b250:	60b9      	str	r1, [r7, #8]
   1b252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b254:	68fb      	ldr	r3, [r7, #12]
   1b256:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b258:	6a3b      	ldr	r3, [r7, #32]
   1b25a:	2b00      	cmp	r3, #0
   1b25c:	d101      	bne.n	1b262 <MyWrapper+0x1a>
   1b25e:	b672      	cpsid	i
   1b260:	e7fe      	b.n	1b260 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b262:	6a3b      	ldr	r3, [r7, #32]
   1b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b266:	2b00      	cmp	r3, #0
   1b268:	d001      	beq.n	1b26e <MyWrapper+0x26>
   1b26a:	b672      	cpsid	i
   1b26c:	e7fe      	b.n	1b26c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b26e:	6a3b      	ldr	r3, [r7, #32]
   1b270:	681b      	ldr	r3, [r3, #0]
   1b272:	2b00      	cmp	r3, #0
   1b274:	d103      	bne.n	1b27e <MyWrapper+0x36>
   1b276:	6a3b      	ldr	r3, [r7, #32]
   1b278:	685b      	ldr	r3, [r3, #4]
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d101      	bne.n	1b282 <MyWrapper+0x3a>
   1b27e:	2301      	movs	r3, #1
   1b280:	e000      	b.n	1b284 <MyWrapper+0x3c>
   1b282:	2300      	movs	r3, #0
   1b284:	2b00      	cmp	r3, #0
   1b286:	d101      	bne.n	1b28c <MyWrapper+0x44>
   1b288:	b672      	cpsid	i
   1b28a:	e7fe      	b.n	1b28a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b28c:	4b66      	ldr	r3, [pc, #408]	; (1b428 <MyWrapper+0x1e0>)
   1b28e:	4798      	blx	r3
   1b290:	0003      	movs	r3, r0
   1b292:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b294:	6a3b      	ldr	r3, [r7, #32]
   1b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b298:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b29a:	6a3b      	ldr	r3, [r7, #32]
   1b29c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b29e:	69bb      	ldr	r3, [r7, #24]
   1b2a0:	429a      	cmp	r2, r3
   1b2a2:	d800      	bhi.n	1b2a6 <MyWrapper+0x5e>
   1b2a4:	e085      	b.n	1b3b2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b2a6:	2317      	movs	r3, #23
   1b2a8:	18fb      	adds	r3, r7, r3
   1b2aa:	6a3a      	ldr	r2, [r7, #32]
   1b2ac:	2145      	movs	r1, #69	; 0x45
   1b2ae:	5c52      	ldrb	r2, [r2, r1]
   1b2b0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b2b2:	6a3b      	ldr	r3, [r7, #32]
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	4b5d      	ldr	r3, [pc, #372]	; (1b42c <MyWrapper+0x1e4>)
   1b2b8:	4798      	blx	r3
   1b2ba:	0003      	movs	r3, r0
   1b2bc:	001a      	movs	r2, r3
   1b2be:	4b5c      	ldr	r3, [pc, #368]	; (1b430 <MyWrapper+0x1e8>)
   1b2c0:	881b      	ldrh	r3, [r3, #0]
   1b2c2:	4013      	ands	r3, r2
   1b2c4:	b29b      	uxth	r3, r3
   1b2c6:	2b00      	cmp	r3, #0
   1b2c8:	d022      	beq.n	1b310 <MyWrapper+0xc8>
   1b2ca:	687b      	ldr	r3, [r7, #4]
   1b2cc:	2b00      	cmp	r3, #0
   1b2ce:	d10b      	bne.n	1b2e8 <MyWrapper+0xa0>
   1b2d0:	6a3b      	ldr	r3, [r7, #32]
   1b2d2:	0018      	movs	r0, r3
   1b2d4:	4b57      	ldr	r3, [pc, #348]	; (1b434 <MyWrapper+0x1ec>)
   1b2d6:	4798      	blx	r3
   1b2d8:	0003      	movs	r3, r0
   1b2da:	001a      	movs	r2, r3
   1b2dc:	4b56      	ldr	r3, [pc, #344]	; (1b438 <MyWrapper+0x1f0>)
   1b2de:	5c9b      	ldrb	r3, [r3, r2]
   1b2e0:	3330      	adds	r3, #48	; 0x30
   1b2e2:	b2db      	uxtb	r3, r3
   1b2e4:	001d      	movs	r5, r3
   1b2e6:	e000      	b.n	1b2ea <MyWrapper+0xa2>
   1b2e8:	2535      	movs	r5, #53	; 0x35
   1b2ea:	6a3b      	ldr	r3, [r7, #32]
   1b2ec:	0018      	movs	r0, r3
   1b2ee:	4b51      	ldr	r3, [pc, #324]	; (1b434 <MyWrapper+0x1ec>)
   1b2f0:	4798      	blx	r3
   1b2f2:	0003      	movs	r3, r0
   1b2f4:	001a      	movs	r2, r3
   1b2f6:	4b50      	ldr	r3, [pc, #320]	; (1b438 <MyWrapper+0x1f0>)
   1b2f8:	5c9c      	ldrb	r4, [r3, r2]
   1b2fa:	6a3b      	ldr	r3, [r7, #32]
   1b2fc:	0018      	movs	r0, r3
   1b2fe:	4b4f      	ldr	r3, [pc, #316]	; (1b43c <MyWrapper+0x1f4>)
   1b300:	4798      	blx	r3
   1b302:	0003      	movs	r3, r0
   1b304:	b2db      	uxtb	r3, r3
   1b306:	001a      	movs	r2, r3
   1b308:	0021      	movs	r1, r4
   1b30a:	0028      	movs	r0, r5
   1b30c:	4b4c      	ldr	r3, [pc, #304]	; (1b440 <MyWrapper+0x1f8>)
   1b30e:	4798      	blx	r3
   1b310:	6a3b      	ldr	r3, [r7, #32]
   1b312:	0018      	movs	r0, r3
   1b314:	4b47      	ldr	r3, [pc, #284]	; (1b434 <MyWrapper+0x1ec>)
   1b316:	4798      	blx	r3
   1b318:	0003      	movs	r3, r0
   1b31a:	001a      	movs	r2, r3
   1b31c:	4b46      	ldr	r3, [pc, #280]	; (1b438 <MyWrapper+0x1f0>)
   1b31e:	5c9c      	ldrb	r4, [r3, r2]
   1b320:	6a3b      	ldr	r3, [r7, #32]
   1b322:	0018      	movs	r0, r3
   1b324:	4b45      	ldr	r3, [pc, #276]	; (1b43c <MyWrapper+0x1f4>)
   1b326:	4798      	blx	r3
   1b328:	0003      	movs	r3, r0
   1b32a:	b2d9      	uxtb	r1, r3
   1b32c:	6a3b      	ldr	r3, [r7, #32]
   1b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b330:	b2db      	uxtb	r3, r3
   1b332:	3301      	adds	r3, #1
   1b334:	b2db      	uxtb	r3, r3
   1b336:	001a      	movs	r2, r3
   1b338:	0020      	movs	r0, r4
   1b33a:	4b42      	ldr	r3, [pc, #264]	; (1b444 <MyWrapper+0x1fc>)
   1b33c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b33e:	69bb      	ldr	r3, [r7, #24]
   1b340:	1c5a      	adds	r2, r3, #1
   1b342:	6a3b      	ldr	r3, [r7, #32]
   1b344:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b346:	2317      	movs	r3, #23
   1b348:	18fb      	adds	r3, r7, r3
   1b34a:	781b      	ldrb	r3, [r3, #0]
   1b34c:	b25b      	sxtb	r3, r3
   1b34e:	3301      	adds	r3, #1
   1b350:	d123      	bne.n	1b39a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b352:	6a3b      	ldr	r3, [r7, #32]
   1b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b356:	2b00      	cmp	r3, #0
   1b358:	d00d      	beq.n	1b376 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b35a:	6a3b      	ldr	r3, [r7, #32]
   1b35c:	2100      	movs	r1, #0
   1b35e:	0018      	movs	r0, r3
   1b360:	4b39      	ldr	r3, [pc, #228]	; (1b448 <MyWrapper+0x200>)
   1b362:	4798      	blx	r3
   1b364:	1e03      	subs	r3, r0, #0
   1b366:	d021      	beq.n	1b3ac <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b368:	68bb      	ldr	r3, [r7, #8]
   1b36a:	2b00      	cmp	r3, #0
   1b36c:	d01e      	beq.n	1b3ac <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b36e:	68bb      	ldr	r3, [r7, #8]
   1b370:	2201      	movs	r2, #1
   1b372:	601a      	str	r2, [r3, #0]
   1b374:	e01a      	b.n	1b3ac <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b376:	6a3b      	ldr	r3, [r7, #32]
   1b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b37a:	2b00      	cmp	r3, #0
   1b37c:	d016      	beq.n	1b3ac <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b37e:	6a3b      	ldr	r3, [r7, #32]
   1b380:	3324      	adds	r3, #36	; 0x24
   1b382:	0018      	movs	r0, r3
   1b384:	4b31      	ldr	r3, [pc, #196]	; (1b44c <MyWrapper+0x204>)
   1b386:	4798      	blx	r3
   1b388:	1e03      	subs	r3, r0, #0
   1b38a:	d00f      	beq.n	1b3ac <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b38c:	68bb      	ldr	r3, [r7, #8]
   1b38e:	2b00      	cmp	r3, #0
   1b390:	d00c      	beq.n	1b3ac <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b392:	68bb      	ldr	r3, [r7, #8]
   1b394:	2201      	movs	r2, #1
   1b396:	601a      	str	r2, [r3, #0]
   1b398:	e008      	b.n	1b3ac <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b39a:	2317      	movs	r3, #23
   1b39c:	18fb      	adds	r3, r7, r3
   1b39e:	781b      	ldrb	r3, [r3, #0]
   1b3a0:	3301      	adds	r3, #1
   1b3a2:	b2db      	uxtb	r3, r3
   1b3a4:	b259      	sxtb	r1, r3
   1b3a6:	6a3b      	ldr	r3, [r7, #32]
   1b3a8:	2245      	movs	r2, #69	; 0x45
   1b3aa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b3ac:	2301      	movs	r3, #1
   1b3ae:	627b      	str	r3, [r7, #36]	; 0x24
   1b3b0:	e030      	b.n	1b414 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b3b2:	6a3b      	ldr	r3, [r7, #32]
   1b3b4:	0018      	movs	r0, r3
   1b3b6:	4b1d      	ldr	r3, [pc, #116]	; (1b42c <MyWrapper+0x1e4>)
   1b3b8:	4798      	blx	r3
   1b3ba:	0003      	movs	r3, r0
   1b3bc:	001a      	movs	r2, r3
   1b3be:	4b1c      	ldr	r3, [pc, #112]	; (1b430 <MyWrapper+0x1e8>)
   1b3c0:	881b      	ldrh	r3, [r3, #0]
   1b3c2:	4013      	ands	r3, r2
   1b3c4:	b29b      	uxth	r3, r3
   1b3c6:	2b00      	cmp	r3, #0
   1b3c8:	d022      	beq.n	1b410 <MyWrapper+0x1c8>
   1b3ca:	687b      	ldr	r3, [r7, #4]
   1b3cc:	2b00      	cmp	r3, #0
   1b3ce:	d10b      	bne.n	1b3e8 <MyWrapper+0x1a0>
   1b3d0:	6a3b      	ldr	r3, [r7, #32]
   1b3d2:	0018      	movs	r0, r3
   1b3d4:	4b17      	ldr	r3, [pc, #92]	; (1b434 <MyWrapper+0x1ec>)
   1b3d6:	4798      	blx	r3
   1b3d8:	0003      	movs	r3, r0
   1b3da:	001a      	movs	r2, r3
   1b3dc:	4b16      	ldr	r3, [pc, #88]	; (1b438 <MyWrapper+0x1f0>)
   1b3de:	5c9b      	ldrb	r3, [r3, r2]
   1b3e0:	3358      	adds	r3, #88	; 0x58
   1b3e2:	b2db      	uxtb	r3, r3
   1b3e4:	001d      	movs	r5, r3
   1b3e6:	e000      	b.n	1b3ea <MyWrapper+0x1a2>
   1b3e8:	255d      	movs	r5, #93	; 0x5d
   1b3ea:	6a3b      	ldr	r3, [r7, #32]
   1b3ec:	0018      	movs	r0, r3
   1b3ee:	4b11      	ldr	r3, [pc, #68]	; (1b434 <MyWrapper+0x1ec>)
   1b3f0:	4798      	blx	r3
   1b3f2:	0003      	movs	r3, r0
   1b3f4:	001a      	movs	r2, r3
   1b3f6:	4b10      	ldr	r3, [pc, #64]	; (1b438 <MyWrapper+0x1f0>)
   1b3f8:	5c9c      	ldrb	r4, [r3, r2]
   1b3fa:	6a3b      	ldr	r3, [r7, #32]
   1b3fc:	0018      	movs	r0, r3
   1b3fe:	4b0f      	ldr	r3, [pc, #60]	; (1b43c <MyWrapper+0x1f4>)
   1b400:	4798      	blx	r3
   1b402:	0003      	movs	r3, r0
   1b404:	b2db      	uxtb	r3, r3
   1b406:	001a      	movs	r2, r3
   1b408:	0021      	movs	r1, r4
   1b40a:	0028      	movs	r0, r5
   1b40c:	4b0c      	ldr	r3, [pc, #48]	; (1b440 <MyWrapper+0x1f8>)
   1b40e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b410:	2300      	movs	r3, #0
   1b412:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b414:	69fb      	ldr	r3, [r7, #28]
   1b416:	0018      	movs	r0, r3
   1b418:	4b0d      	ldr	r3, [pc, #52]	; (1b450 <MyWrapper+0x208>)
   1b41a:	4798      	blx	r3

	return xReturn;
   1b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b41e:	0018      	movs	r0, r3
   1b420:	46bd      	mov	sp, r7
   1b422:	b00a      	add	sp, #40	; 0x28
   1b424:	bdb0      	pop	{r4, r5, r7, pc}
   1b426:	46c0      	nop			; (mov r8, r8)
   1b428:	0001a65d 	.word	0x0001a65d
   1b42c:	000186c5 	.word	0x000186c5
   1b430:	20000110 	.word	0x20000110
   1b434:	000185c5 	.word	0x000185c5
   1b438:	20000104 	.word	0x20000104
   1b43c:	000186a5 	.word	0x000186a5
   1b440:	00018ffd 	.word	0x00018ffd
   1b444:	00019659 	.word	0x00019659
   1b448:	0001c0d9 	.word	0x0001c0d9
   1b44c:	0001ce99 	.word	0x0001ce99
   1b450:	0001a669 	.word	0x0001a669

0001b454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b454:	b5b0      	push	{r4, r5, r7, lr}
   1b456:	b08a      	sub	sp, #40	; 0x28
   1b458:	af00      	add	r7, sp, #0
   1b45a:	60f8      	str	r0, [r7, #12]
   1b45c:	60b9      	str	r1, [r7, #8]
   1b45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b460:	2300      	movs	r3, #0
   1b462:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b464:	68fb      	ldr	r3, [r7, #12]
   1b466:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b468:	6a3b      	ldr	r3, [r7, #32]
   1b46a:	2b00      	cmp	r3, #0
   1b46c:	d101      	bne.n	1b472 <xQueueReceive+0x1e>
   1b46e:	b672      	cpsid	i
   1b470:	e7fe      	b.n	1b470 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b472:	68bb      	ldr	r3, [r7, #8]
   1b474:	2b00      	cmp	r3, #0
   1b476:	d103      	bne.n	1b480 <xQueueReceive+0x2c>
   1b478:	6a3b      	ldr	r3, [r7, #32]
   1b47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b47c:	2b00      	cmp	r3, #0
   1b47e:	d101      	bne.n	1b484 <xQueueReceive+0x30>
   1b480:	2301      	movs	r3, #1
   1b482:	e000      	b.n	1b486 <xQueueReceive+0x32>
   1b484:	2300      	movs	r3, #0
   1b486:	2b00      	cmp	r3, #0
   1b488:	d101      	bne.n	1b48e <xQueueReceive+0x3a>
   1b48a:	b672      	cpsid	i
   1b48c:	e7fe      	b.n	1b48c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b48e:	4bbf      	ldr	r3, [pc, #764]	; (1b78c <xQueueReceive+0x338>)
   1b490:	4798      	blx	r3
   1b492:	1e03      	subs	r3, r0, #0
   1b494:	d102      	bne.n	1b49c <xQueueReceive+0x48>
   1b496:	687b      	ldr	r3, [r7, #4]
   1b498:	2b00      	cmp	r3, #0
   1b49a:	d101      	bne.n	1b4a0 <xQueueReceive+0x4c>
   1b49c:	2301      	movs	r3, #1
   1b49e:	e000      	b.n	1b4a2 <xQueueReceive+0x4e>
   1b4a0:	2300      	movs	r3, #0
   1b4a2:	2b00      	cmp	r3, #0
   1b4a4:	d101      	bne.n	1b4aa <xQueueReceive+0x56>
   1b4a6:	b672      	cpsid	i
   1b4a8:	e7fe      	b.n	1b4a8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b4aa:	4bb9      	ldr	r3, [pc, #740]	; (1b790 <xQueueReceive+0x33c>)
   1b4ac:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b4ae:	6a3b      	ldr	r3, [r7, #32]
   1b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b4b2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b4b4:	69fb      	ldr	r3, [r7, #28]
   1b4b6:	2b00      	cmp	r3, #0
   1b4b8:	d100      	bne.n	1b4bc <xQueueReceive+0x68>
   1b4ba:	e07d      	b.n	1b5b8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b4bc:	68ba      	ldr	r2, [r7, #8]
   1b4be:	6a3b      	ldr	r3, [r7, #32]
   1b4c0:	0011      	movs	r1, r2
   1b4c2:	0018      	movs	r0, r3
   1b4c4:	4bb3      	ldr	r3, [pc, #716]	; (1b794 <xQueueReceive+0x340>)
   1b4c6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1b4c8:	4bb3      	ldr	r3, [pc, #716]	; (1b798 <xQueueReceive+0x344>)
   1b4ca:	4798      	blx	r3
   1b4cc:	0003      	movs	r3, r0
   1b4ce:	0018      	movs	r0, r3
   1b4d0:	4bb2      	ldr	r3, [pc, #712]	; (1b79c <xQueueReceive+0x348>)
   1b4d2:	4798      	blx	r3
   1b4d4:	0003      	movs	r3, r0
   1b4d6:	001a      	movs	r2, r3
   1b4d8:	4bb1      	ldr	r3, [pc, #708]	; (1b7a0 <xQueueReceive+0x34c>)
   1b4da:	881b      	ldrh	r3, [r3, #0]
   1b4dc:	4013      	ands	r3, r2
   1b4de:	b29b      	uxth	r3, r3
   1b4e0:	2b00      	cmp	r3, #0
   1b4e2:	d029      	beq.n	1b538 <xQueueReceive+0xe4>
   1b4e4:	6a3b      	ldr	r3, [r7, #32]
   1b4e6:	0018      	movs	r0, r3
   1b4e8:	4bae      	ldr	r3, [pc, #696]	; (1b7a4 <xQueueReceive+0x350>)
   1b4ea:	4798      	blx	r3
   1b4ec:	0003      	movs	r3, r0
   1b4ee:	001a      	movs	r2, r3
   1b4f0:	4bab      	ldr	r3, [pc, #684]	; (1b7a0 <xQueueReceive+0x34c>)
   1b4f2:	881b      	ldrh	r3, [r3, #0]
   1b4f4:	4013      	ands	r3, r2
   1b4f6:	b29b      	uxth	r3, r3
   1b4f8:	2b00      	cmp	r3, #0
   1b4fa:	d01d      	beq.n	1b538 <xQueueReceive+0xe4>
   1b4fc:	6a3b      	ldr	r3, [r7, #32]
   1b4fe:	0018      	movs	r0, r3
   1b500:	4ba9      	ldr	r3, [pc, #676]	; (1b7a8 <xQueueReceive+0x354>)
   1b502:	4798      	blx	r3
   1b504:	0003      	movs	r3, r0
   1b506:	001a      	movs	r2, r3
   1b508:	4ba8      	ldr	r3, [pc, #672]	; (1b7ac <xQueueReceive+0x358>)
   1b50a:	5c9b      	ldrb	r3, [r3, r2]
   1b50c:	3328      	adds	r3, #40	; 0x28
   1b50e:	b2db      	uxtb	r3, r3
   1b510:	001d      	movs	r5, r3
   1b512:	6a3b      	ldr	r3, [r7, #32]
   1b514:	0018      	movs	r0, r3
   1b516:	4ba4      	ldr	r3, [pc, #656]	; (1b7a8 <xQueueReceive+0x354>)
   1b518:	4798      	blx	r3
   1b51a:	0003      	movs	r3, r0
   1b51c:	001a      	movs	r2, r3
   1b51e:	4ba3      	ldr	r3, [pc, #652]	; (1b7ac <xQueueReceive+0x358>)
   1b520:	5c9c      	ldrb	r4, [r3, r2]
   1b522:	6a3b      	ldr	r3, [r7, #32]
   1b524:	0018      	movs	r0, r3
   1b526:	4ba2      	ldr	r3, [pc, #648]	; (1b7b0 <xQueueReceive+0x35c>)
   1b528:	4798      	blx	r3
   1b52a:	0003      	movs	r3, r0
   1b52c:	b2db      	uxtb	r3, r3
   1b52e:	001a      	movs	r2, r3
   1b530:	0021      	movs	r1, r4
   1b532:	0028      	movs	r0, r5
   1b534:	4b9f      	ldr	r3, [pc, #636]	; (1b7b4 <xQueueReceive+0x360>)
   1b536:	4798      	blx	r3
   1b538:	6a3b      	ldr	r3, [r7, #32]
   1b53a:	0018      	movs	r0, r3
   1b53c:	4b9a      	ldr	r3, [pc, #616]	; (1b7a8 <xQueueReceive+0x354>)
   1b53e:	4798      	blx	r3
   1b540:	0003      	movs	r3, r0
   1b542:	001a      	movs	r2, r3
   1b544:	4b99      	ldr	r3, [pc, #612]	; (1b7ac <xQueueReceive+0x358>)
   1b546:	5c9c      	ldrb	r4, [r3, r2]
   1b548:	6a3b      	ldr	r3, [r7, #32]
   1b54a:	0018      	movs	r0, r3
   1b54c:	4b98      	ldr	r3, [pc, #608]	; (1b7b0 <xQueueReceive+0x35c>)
   1b54e:	4798      	blx	r3
   1b550:	0003      	movs	r3, r0
   1b552:	b2dd      	uxtb	r5, r3
   1b554:	6a3b      	ldr	r3, [r7, #32]
   1b556:	0018      	movs	r0, r3
   1b558:	4b93      	ldr	r3, [pc, #588]	; (1b7a8 <xQueueReceive+0x354>)
   1b55a:	4798      	blx	r3
   1b55c:	0003      	movs	r3, r0
   1b55e:	001a      	movs	r2, r3
   1b560:	4b92      	ldr	r3, [pc, #584]	; (1b7ac <xQueueReceive+0x358>)
   1b562:	5c9b      	ldrb	r3, [r3, r2]
   1b564:	2b02      	cmp	r3, #2
   1b566:	d108      	bne.n	1b57a <xQueueReceive+0x126>
   1b568:	4b8b      	ldr	r3, [pc, #556]	; (1b798 <xQueueReceive+0x344>)
   1b56a:	4798      	blx	r3
   1b56c:	0003      	movs	r3, r0
   1b56e:	0018      	movs	r0, r3
   1b570:	4b91      	ldr	r3, [pc, #580]	; (1b7b8 <xQueueReceive+0x364>)
   1b572:	4798      	blx	r3
   1b574:	0003      	movs	r3, r0
   1b576:	b2db      	uxtb	r3, r3
   1b578:	e004      	b.n	1b584 <xQueueReceive+0x130>
   1b57a:	6a3b      	ldr	r3, [r7, #32]
   1b57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b57e:	b2db      	uxtb	r3, r3
   1b580:	3b01      	subs	r3, #1
   1b582:	b2db      	uxtb	r3, r3
   1b584:	001a      	movs	r2, r3
   1b586:	0029      	movs	r1, r5
   1b588:	0020      	movs	r0, r4
   1b58a:	4b8c      	ldr	r3, [pc, #560]	; (1b7bc <xQueueReceive+0x368>)
   1b58c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b58e:	69fb      	ldr	r3, [r7, #28]
   1b590:	1e5a      	subs	r2, r3, #1
   1b592:	6a3b      	ldr	r3, [r7, #32]
   1b594:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b596:	6a3b      	ldr	r3, [r7, #32]
   1b598:	691b      	ldr	r3, [r3, #16]
   1b59a:	2b00      	cmp	r3, #0
   1b59c:	d008      	beq.n	1b5b0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b59e:	6a3b      	ldr	r3, [r7, #32]
   1b5a0:	3310      	adds	r3, #16
   1b5a2:	0018      	movs	r0, r3
   1b5a4:	4b86      	ldr	r3, [pc, #536]	; (1b7c0 <xQueueReceive+0x36c>)
   1b5a6:	4798      	blx	r3
   1b5a8:	1e03      	subs	r3, r0, #0
   1b5aa:	d001      	beq.n	1b5b0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b5ac:	4b85      	ldr	r3, [pc, #532]	; (1b7c4 <xQueueReceive+0x370>)
   1b5ae:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b5b0:	4b85      	ldr	r3, [pc, #532]	; (1b7c8 <xQueueReceive+0x374>)
   1b5b2:	4798      	blx	r3
				return pdPASS;
   1b5b4:	2301      	movs	r3, #1
   1b5b6:	e15f      	b.n	1b878 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b5b8:	687b      	ldr	r3, [r7, #4]
   1b5ba:	2b00      	cmp	r3, #0
   1b5bc:	d13b      	bne.n	1b636 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b5be:	4b82      	ldr	r3, [pc, #520]	; (1b7c8 <xQueueReceive+0x374>)
   1b5c0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b5c2:	4b75      	ldr	r3, [pc, #468]	; (1b798 <xQueueReceive+0x344>)
   1b5c4:	4798      	blx	r3
   1b5c6:	0003      	movs	r3, r0
   1b5c8:	0018      	movs	r0, r3
   1b5ca:	4b74      	ldr	r3, [pc, #464]	; (1b79c <xQueueReceive+0x348>)
   1b5cc:	4798      	blx	r3
   1b5ce:	0003      	movs	r3, r0
   1b5d0:	001a      	movs	r2, r3
   1b5d2:	4b73      	ldr	r3, [pc, #460]	; (1b7a0 <xQueueReceive+0x34c>)
   1b5d4:	881b      	ldrh	r3, [r3, #0]
   1b5d6:	4013      	ands	r3, r2
   1b5d8:	b29b      	uxth	r3, r3
   1b5da:	2b00      	cmp	r3, #0
   1b5dc:	d029      	beq.n	1b632 <xQueueReceive+0x1de>
   1b5de:	6a3b      	ldr	r3, [r7, #32]
   1b5e0:	0018      	movs	r0, r3
   1b5e2:	4b70      	ldr	r3, [pc, #448]	; (1b7a4 <xQueueReceive+0x350>)
   1b5e4:	4798      	blx	r3
   1b5e6:	0003      	movs	r3, r0
   1b5e8:	001a      	movs	r2, r3
   1b5ea:	4b6d      	ldr	r3, [pc, #436]	; (1b7a0 <xQueueReceive+0x34c>)
   1b5ec:	881b      	ldrh	r3, [r3, #0]
   1b5ee:	4013      	ands	r3, r2
   1b5f0:	b29b      	uxth	r3, r3
   1b5f2:	2b00      	cmp	r3, #0
   1b5f4:	d01d      	beq.n	1b632 <xQueueReceive+0x1de>
   1b5f6:	6a3b      	ldr	r3, [r7, #32]
   1b5f8:	0018      	movs	r0, r3
   1b5fa:	4b6b      	ldr	r3, [pc, #428]	; (1b7a8 <xQueueReceive+0x354>)
   1b5fc:	4798      	blx	r3
   1b5fe:	0003      	movs	r3, r0
   1b600:	001a      	movs	r2, r3
   1b602:	4b6a      	ldr	r3, [pc, #424]	; (1b7ac <xQueueReceive+0x358>)
   1b604:	5c9b      	ldrb	r3, [r3, r2]
   1b606:	3350      	adds	r3, #80	; 0x50
   1b608:	b2db      	uxtb	r3, r3
   1b60a:	001d      	movs	r5, r3
   1b60c:	6a3b      	ldr	r3, [r7, #32]
   1b60e:	0018      	movs	r0, r3
   1b610:	4b65      	ldr	r3, [pc, #404]	; (1b7a8 <xQueueReceive+0x354>)
   1b612:	4798      	blx	r3
   1b614:	0003      	movs	r3, r0
   1b616:	001a      	movs	r2, r3
   1b618:	4b64      	ldr	r3, [pc, #400]	; (1b7ac <xQueueReceive+0x358>)
   1b61a:	5c9c      	ldrb	r4, [r3, r2]
   1b61c:	6a3b      	ldr	r3, [r7, #32]
   1b61e:	0018      	movs	r0, r3
   1b620:	4b63      	ldr	r3, [pc, #396]	; (1b7b0 <xQueueReceive+0x35c>)
   1b622:	4798      	blx	r3
   1b624:	0003      	movs	r3, r0
   1b626:	b2db      	uxtb	r3, r3
   1b628:	001a      	movs	r2, r3
   1b62a:	0021      	movs	r1, r4
   1b62c:	0028      	movs	r0, r5
   1b62e:	4b61      	ldr	r3, [pc, #388]	; (1b7b4 <xQueueReceive+0x360>)
   1b630:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b632:	2300      	movs	r3, #0
   1b634:	e120      	b.n	1b878 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b638:	2b00      	cmp	r3, #0
   1b63a:	d106      	bne.n	1b64a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b63c:	2314      	movs	r3, #20
   1b63e:	18fb      	adds	r3, r7, r3
   1b640:	0018      	movs	r0, r3
   1b642:	4b62      	ldr	r3, [pc, #392]	; (1b7cc <xQueueReceive+0x378>)
   1b644:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b646:	2301      	movs	r3, #1
   1b648:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b64a:	4b5f      	ldr	r3, [pc, #380]	; (1b7c8 <xQueueReceive+0x374>)
   1b64c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b64e:	4b60      	ldr	r3, [pc, #384]	; (1b7d0 <xQueueReceive+0x37c>)
   1b650:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b652:	4b4f      	ldr	r3, [pc, #316]	; (1b790 <xQueueReceive+0x33c>)
   1b654:	4798      	blx	r3
   1b656:	6a3b      	ldr	r3, [r7, #32]
   1b658:	2244      	movs	r2, #68	; 0x44
   1b65a:	5c9b      	ldrb	r3, [r3, r2]
   1b65c:	b25b      	sxtb	r3, r3
   1b65e:	3301      	adds	r3, #1
   1b660:	d103      	bne.n	1b66a <xQueueReceive+0x216>
   1b662:	6a3b      	ldr	r3, [r7, #32]
   1b664:	2244      	movs	r2, #68	; 0x44
   1b666:	2100      	movs	r1, #0
   1b668:	5499      	strb	r1, [r3, r2]
   1b66a:	6a3b      	ldr	r3, [r7, #32]
   1b66c:	2245      	movs	r2, #69	; 0x45
   1b66e:	5c9b      	ldrb	r3, [r3, r2]
   1b670:	b25b      	sxtb	r3, r3
   1b672:	3301      	adds	r3, #1
   1b674:	d103      	bne.n	1b67e <xQueueReceive+0x22a>
   1b676:	6a3b      	ldr	r3, [r7, #32]
   1b678:	2245      	movs	r2, #69	; 0x45
   1b67a:	2100      	movs	r1, #0
   1b67c:	5499      	strb	r1, [r3, r2]
   1b67e:	4b52      	ldr	r3, [pc, #328]	; (1b7c8 <xQueueReceive+0x374>)
   1b680:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b682:	1d3a      	adds	r2, r7, #4
   1b684:	2314      	movs	r3, #20
   1b686:	18fb      	adds	r3, r7, r3
   1b688:	0011      	movs	r1, r2
   1b68a:	0018      	movs	r0, r3
   1b68c:	4b51      	ldr	r3, [pc, #324]	; (1b7d4 <xQueueReceive+0x380>)
   1b68e:	4798      	blx	r3
   1b690:	1e03      	subs	r3, r0, #0
   1b692:	d000      	beq.n	1b696 <xQueueReceive+0x242>
   1b694:	e0aa      	b.n	1b7ec <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b696:	6a3b      	ldr	r3, [r7, #32]
   1b698:	0018      	movs	r0, r3
   1b69a:	4b4f      	ldr	r3, [pc, #316]	; (1b7d8 <xQueueReceive+0x384>)
   1b69c:	4798      	blx	r3
   1b69e:	1e03      	subs	r3, r0, #0
   1b6a0:	d06d      	beq.n	1b77e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b6a2:	4b3d      	ldr	r3, [pc, #244]	; (1b798 <xQueueReceive+0x344>)
   1b6a4:	4798      	blx	r3
   1b6a6:	0003      	movs	r3, r0
   1b6a8:	0018      	movs	r0, r3
   1b6aa:	4b3c      	ldr	r3, [pc, #240]	; (1b79c <xQueueReceive+0x348>)
   1b6ac:	4798      	blx	r3
   1b6ae:	0003      	movs	r3, r0
   1b6b0:	001a      	movs	r2, r3
   1b6b2:	4b3b      	ldr	r3, [pc, #236]	; (1b7a0 <xQueueReceive+0x34c>)
   1b6b4:	881b      	ldrh	r3, [r3, #0]
   1b6b6:	4013      	ands	r3, r2
   1b6b8:	b29b      	uxth	r3, r3
   1b6ba:	2b00      	cmp	r3, #0
   1b6bc:	d029      	beq.n	1b712 <xQueueReceive+0x2be>
   1b6be:	6a3b      	ldr	r3, [r7, #32]
   1b6c0:	0018      	movs	r0, r3
   1b6c2:	4b38      	ldr	r3, [pc, #224]	; (1b7a4 <xQueueReceive+0x350>)
   1b6c4:	4798      	blx	r3
   1b6c6:	0003      	movs	r3, r0
   1b6c8:	001a      	movs	r2, r3
   1b6ca:	4b35      	ldr	r3, [pc, #212]	; (1b7a0 <xQueueReceive+0x34c>)
   1b6cc:	881b      	ldrh	r3, [r3, #0]
   1b6ce:	4013      	ands	r3, r2
   1b6d0:	b29b      	uxth	r3, r3
   1b6d2:	2b00      	cmp	r3, #0
   1b6d4:	d01d      	beq.n	1b712 <xQueueReceive+0x2be>
   1b6d6:	6a3b      	ldr	r3, [r7, #32]
   1b6d8:	0018      	movs	r0, r3
   1b6da:	4b33      	ldr	r3, [pc, #204]	; (1b7a8 <xQueueReceive+0x354>)
   1b6dc:	4798      	blx	r3
   1b6de:	0003      	movs	r3, r0
   1b6e0:	001a      	movs	r2, r3
   1b6e2:	4b32      	ldr	r3, [pc, #200]	; (1b7ac <xQueueReceive+0x358>)
   1b6e4:	5c9b      	ldrb	r3, [r3, r2]
   1b6e6:	3368      	adds	r3, #104	; 0x68
   1b6e8:	b2db      	uxtb	r3, r3
   1b6ea:	001d      	movs	r5, r3
   1b6ec:	6a3b      	ldr	r3, [r7, #32]
   1b6ee:	0018      	movs	r0, r3
   1b6f0:	4b2d      	ldr	r3, [pc, #180]	; (1b7a8 <xQueueReceive+0x354>)
   1b6f2:	4798      	blx	r3
   1b6f4:	0003      	movs	r3, r0
   1b6f6:	001a      	movs	r2, r3
   1b6f8:	4b2c      	ldr	r3, [pc, #176]	; (1b7ac <xQueueReceive+0x358>)
   1b6fa:	5c9c      	ldrb	r4, [r3, r2]
   1b6fc:	6a3b      	ldr	r3, [r7, #32]
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b2b      	ldr	r3, [pc, #172]	; (1b7b0 <xQueueReceive+0x35c>)
   1b702:	4798      	blx	r3
   1b704:	0003      	movs	r3, r0
   1b706:	b2db      	uxtb	r3, r3
   1b708:	001a      	movs	r2, r3
   1b70a:	0021      	movs	r1, r4
   1b70c:	0028      	movs	r0, r5
   1b70e:	4b29      	ldr	r3, [pc, #164]	; (1b7b4 <xQueueReceive+0x360>)
   1b710:	4798      	blx	r3
   1b712:	6a3b      	ldr	r3, [r7, #32]
   1b714:	0018      	movs	r0, r3
   1b716:	4b24      	ldr	r3, [pc, #144]	; (1b7a8 <xQueueReceive+0x354>)
   1b718:	4798      	blx	r3
   1b71a:	0003      	movs	r3, r0
   1b71c:	001a      	movs	r2, r3
   1b71e:	4b23      	ldr	r3, [pc, #140]	; (1b7ac <xQueueReceive+0x358>)
   1b720:	5c9b      	ldrb	r3, [r3, r2]
   1b722:	2b02      	cmp	r3, #2
   1b724:	d018      	beq.n	1b758 <xQueueReceive+0x304>
   1b726:	4b1c      	ldr	r3, [pc, #112]	; (1b798 <xQueueReceive+0x344>)
   1b728:	4798      	blx	r3
   1b72a:	0003      	movs	r3, r0
   1b72c:	0018      	movs	r0, r3
   1b72e:	4b1b      	ldr	r3, [pc, #108]	; (1b79c <xQueueReceive+0x348>)
   1b730:	4798      	blx	r3
   1b732:	0003      	movs	r3, r0
   1b734:	001a      	movs	r2, r3
   1b736:	4b1a      	ldr	r3, [pc, #104]	; (1b7a0 <xQueueReceive+0x34c>)
   1b738:	881b      	ldrh	r3, [r3, #0]
   1b73a:	4013      	ands	r3, r2
   1b73c:	b29b      	uxth	r3, r3
   1b73e:	2b00      	cmp	r3, #0
   1b740:	d00a      	beq.n	1b758 <xQueueReceive+0x304>
   1b742:	4b15      	ldr	r3, [pc, #84]	; (1b798 <xQueueReceive+0x344>)
   1b744:	4798      	blx	r3
   1b746:	0003      	movs	r3, r0
   1b748:	0018      	movs	r0, r3
   1b74a:	4b1b      	ldr	r3, [pc, #108]	; (1b7b8 <xQueueReceive+0x364>)
   1b74c:	4798      	blx	r3
   1b74e:	0003      	movs	r3, r0
   1b750:	b2db      	uxtb	r3, r3
   1b752:	0018      	movs	r0, r3
   1b754:	4b21      	ldr	r3, [pc, #132]	; (1b7dc <xQueueReceive+0x388>)
   1b756:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b758:	6a3b      	ldr	r3, [r7, #32]
   1b75a:	3324      	adds	r3, #36	; 0x24
   1b75c:	687a      	ldr	r2, [r7, #4]
   1b75e:	0011      	movs	r1, r2
   1b760:	0018      	movs	r0, r3
   1b762:	4b1f      	ldr	r3, [pc, #124]	; (1b7e0 <xQueueReceive+0x38c>)
   1b764:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b766:	6a3b      	ldr	r3, [r7, #32]
   1b768:	0018      	movs	r0, r3
   1b76a:	4b1e      	ldr	r3, [pc, #120]	; (1b7e4 <xQueueReceive+0x390>)
   1b76c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b76e:	4b1e      	ldr	r3, [pc, #120]	; (1b7e8 <xQueueReceive+0x394>)
   1b770:	4798      	blx	r3
   1b772:	1e03      	subs	r3, r0, #0
   1b774:	d000      	beq.n	1b778 <xQueueReceive+0x324>
   1b776:	e698      	b.n	1b4aa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b778:	4b12      	ldr	r3, [pc, #72]	; (1b7c4 <xQueueReceive+0x370>)
   1b77a:	4798      	blx	r3
   1b77c:	e695      	b.n	1b4aa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b77e:	6a3b      	ldr	r3, [r7, #32]
   1b780:	0018      	movs	r0, r3
   1b782:	4b18      	ldr	r3, [pc, #96]	; (1b7e4 <xQueueReceive+0x390>)
   1b784:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b786:	4b18      	ldr	r3, [pc, #96]	; (1b7e8 <xQueueReceive+0x394>)
   1b788:	4798      	blx	r3
   1b78a:	e68e      	b.n	1b4aa <xQueueReceive+0x56>
   1b78c:	0001d329 	.word	0x0001d329
   1b790:	0001a609 	.word	0x0001a609
   1b794:	0001beb5 	.word	0x0001beb5
   1b798:	000188a1 	.word	0x000188a1
   1b79c:	00018605 	.word	0x00018605
   1b7a0:	20000110 	.word	0x20000110
   1b7a4:	000186c5 	.word	0x000186c5
   1b7a8:	000185c5 	.word	0x000185c5
   1b7ac:	20000104 	.word	0x20000104
   1b7b0:	000186a5 	.word	0x000186a5
   1b7b4:	00018ffd 	.word	0x00018ffd
   1b7b8:	000185e5 	.word	0x000185e5
   1b7bc:	00019659 	.word	0x00019659
   1b7c0:	0001ce99 	.word	0x0001ce99
   1b7c4:	0001a5f1 	.word	0x0001a5f1
   1b7c8:	0001a62d 	.word	0x0001a62d
   1b7cc:	0001cfd9 	.word	0x0001cfd9
   1b7d0:	0001c8c1 	.word	0x0001c8c1
   1b7d4:	0001d001 	.word	0x0001d001
   1b7d8:	0001bff5 	.word	0x0001bff5
   1b7dc:	00019795 	.word	0x00019795
   1b7e0:	0001cd75 	.word	0x0001cd75
   1b7e4:	0001bf05 	.word	0x0001bf05
   1b7e8:	0001c8d9 	.word	0x0001c8d9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b7ec:	6a3b      	ldr	r3, [r7, #32]
   1b7ee:	0018      	movs	r0, r3
   1b7f0:	4b23      	ldr	r3, [pc, #140]	; (1b880 <xQueueReceive+0x42c>)
   1b7f2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b7f4:	4b23      	ldr	r3, [pc, #140]	; (1b884 <xQueueReceive+0x430>)
   1b7f6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b7f8:	6a3b      	ldr	r3, [r7, #32]
   1b7fa:	0018      	movs	r0, r3
   1b7fc:	4b22      	ldr	r3, [pc, #136]	; (1b888 <xQueueReceive+0x434>)
   1b7fe:	4798      	blx	r3
   1b800:	1e03      	subs	r3, r0, #0
   1b802:	d100      	bne.n	1b806 <xQueueReceive+0x3b2>
   1b804:	e651      	b.n	1b4aa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b806:	4b21      	ldr	r3, [pc, #132]	; (1b88c <xQueueReceive+0x438>)
   1b808:	4798      	blx	r3
   1b80a:	0003      	movs	r3, r0
   1b80c:	0018      	movs	r0, r3
   1b80e:	4b20      	ldr	r3, [pc, #128]	; (1b890 <xQueueReceive+0x43c>)
   1b810:	4798      	blx	r3
   1b812:	0003      	movs	r3, r0
   1b814:	001a      	movs	r2, r3
   1b816:	4b1f      	ldr	r3, [pc, #124]	; (1b894 <xQueueReceive+0x440>)
   1b818:	881b      	ldrh	r3, [r3, #0]
   1b81a:	4013      	ands	r3, r2
   1b81c:	b29b      	uxth	r3, r3
   1b81e:	2b00      	cmp	r3, #0
   1b820:	d029      	beq.n	1b876 <xQueueReceive+0x422>
   1b822:	6a3b      	ldr	r3, [r7, #32]
   1b824:	0018      	movs	r0, r3
   1b826:	4b1c      	ldr	r3, [pc, #112]	; (1b898 <xQueueReceive+0x444>)
   1b828:	4798      	blx	r3
   1b82a:	0003      	movs	r3, r0
   1b82c:	001a      	movs	r2, r3
   1b82e:	4b19      	ldr	r3, [pc, #100]	; (1b894 <xQueueReceive+0x440>)
   1b830:	881b      	ldrh	r3, [r3, #0]
   1b832:	4013      	ands	r3, r2
   1b834:	b29b      	uxth	r3, r3
   1b836:	2b00      	cmp	r3, #0
   1b838:	d01d      	beq.n	1b876 <xQueueReceive+0x422>
   1b83a:	6a3b      	ldr	r3, [r7, #32]
   1b83c:	0018      	movs	r0, r3
   1b83e:	4b17      	ldr	r3, [pc, #92]	; (1b89c <xQueueReceive+0x448>)
   1b840:	4798      	blx	r3
   1b842:	0003      	movs	r3, r0
   1b844:	001a      	movs	r2, r3
   1b846:	4b16      	ldr	r3, [pc, #88]	; (1b8a0 <xQueueReceive+0x44c>)
   1b848:	5c9b      	ldrb	r3, [r3, r2]
   1b84a:	3350      	adds	r3, #80	; 0x50
   1b84c:	b2db      	uxtb	r3, r3
   1b84e:	001d      	movs	r5, r3
   1b850:	6a3b      	ldr	r3, [r7, #32]
   1b852:	0018      	movs	r0, r3
   1b854:	4b11      	ldr	r3, [pc, #68]	; (1b89c <xQueueReceive+0x448>)
   1b856:	4798      	blx	r3
   1b858:	0003      	movs	r3, r0
   1b85a:	001a      	movs	r2, r3
   1b85c:	4b10      	ldr	r3, [pc, #64]	; (1b8a0 <xQueueReceive+0x44c>)
   1b85e:	5c9c      	ldrb	r4, [r3, r2]
   1b860:	6a3b      	ldr	r3, [r7, #32]
   1b862:	0018      	movs	r0, r3
   1b864:	4b0f      	ldr	r3, [pc, #60]	; (1b8a4 <xQueueReceive+0x450>)
   1b866:	4798      	blx	r3
   1b868:	0003      	movs	r3, r0
   1b86a:	b2db      	uxtb	r3, r3
   1b86c:	001a      	movs	r2, r3
   1b86e:	0021      	movs	r1, r4
   1b870:	0028      	movs	r0, r5
   1b872:	4b0d      	ldr	r3, [pc, #52]	; (1b8a8 <xQueueReceive+0x454>)
   1b874:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b876:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b878:	0018      	movs	r0, r3
   1b87a:	46bd      	mov	sp, r7
   1b87c:	b00a      	add	sp, #40	; 0x28
   1b87e:	bdb0      	pop	{r4, r5, r7, pc}
   1b880:	0001bf05 	.word	0x0001bf05
   1b884:	0001c8d9 	.word	0x0001c8d9
   1b888:	0001bff5 	.word	0x0001bff5
   1b88c:	000188a1 	.word	0x000188a1
   1b890:	00018605 	.word	0x00018605
   1b894:	20000110 	.word	0x20000110
   1b898:	000186c5 	.word	0x000186c5
   1b89c:	000185c5 	.word	0x000185c5
   1b8a0:	20000104 	.word	0x20000104
   1b8a4:	000186a5 	.word	0x000186a5
   1b8a8:	00018ffd 	.word	0x00018ffd

0001b8ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b8ac:	b5b0      	push	{r4, r5, r7, lr}
   1b8ae:	b08a      	sub	sp, #40	; 0x28
   1b8b0:	af00      	add	r7, sp, #0
   1b8b2:	6078      	str	r0, [r7, #4]
   1b8b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b8b6:	2300      	movs	r3, #0
   1b8b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b8ba:	687b      	ldr	r3, [r7, #4]
   1b8bc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b8be:	2300      	movs	r3, #0
   1b8c0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b8c2:	69fb      	ldr	r3, [r7, #28]
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	d101      	bne.n	1b8cc <xQueueSemaphoreTake+0x20>
   1b8c8:	b672      	cpsid	i
   1b8ca:	e7fe      	b.n	1b8ca <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b8cc:	69fb      	ldr	r3, [r7, #28]
   1b8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b8d0:	2b00      	cmp	r3, #0
   1b8d2:	d001      	beq.n	1b8d8 <xQueueSemaphoreTake+0x2c>
   1b8d4:	b672      	cpsid	i
   1b8d6:	e7fe      	b.n	1b8d6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b8d8:	4bcb      	ldr	r3, [pc, #812]	; (1bc08 <xQueueSemaphoreTake+0x35c>)
   1b8da:	4798      	blx	r3
   1b8dc:	1e03      	subs	r3, r0, #0
   1b8de:	d102      	bne.n	1b8e6 <xQueueSemaphoreTake+0x3a>
   1b8e0:	683b      	ldr	r3, [r7, #0]
   1b8e2:	2b00      	cmp	r3, #0
   1b8e4:	d101      	bne.n	1b8ea <xQueueSemaphoreTake+0x3e>
   1b8e6:	2301      	movs	r3, #1
   1b8e8:	e000      	b.n	1b8ec <xQueueSemaphoreTake+0x40>
   1b8ea:	2300      	movs	r3, #0
   1b8ec:	2b00      	cmp	r3, #0
   1b8ee:	d101      	bne.n	1b8f4 <xQueueSemaphoreTake+0x48>
   1b8f0:	b672      	cpsid	i
   1b8f2:	e7fe      	b.n	1b8f2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b8f4:	4bc5      	ldr	r3, [pc, #788]	; (1bc0c <xQueueSemaphoreTake+0x360>)
   1b8f6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b8f8:	69fb      	ldr	r3, [r7, #28]
   1b8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b8fc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b8fe:	69bb      	ldr	r3, [r7, #24]
   1b900:	2b00      	cmp	r3, #0
   1b902:	d100      	bne.n	1b906 <xQueueSemaphoreTake+0x5a>
   1b904:	e080      	b.n	1ba08 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b906:	4bc2      	ldr	r3, [pc, #776]	; (1bc10 <xQueueSemaphoreTake+0x364>)
   1b908:	4798      	blx	r3
   1b90a:	0003      	movs	r3, r0
   1b90c:	0018      	movs	r0, r3
   1b90e:	4bc1      	ldr	r3, [pc, #772]	; (1bc14 <xQueueSemaphoreTake+0x368>)
   1b910:	4798      	blx	r3
   1b912:	0003      	movs	r3, r0
   1b914:	001a      	movs	r2, r3
   1b916:	4bc0      	ldr	r3, [pc, #768]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1b918:	881b      	ldrh	r3, [r3, #0]
   1b91a:	4013      	ands	r3, r2
   1b91c:	b29b      	uxth	r3, r3
   1b91e:	2b00      	cmp	r3, #0
   1b920:	d029      	beq.n	1b976 <xQueueSemaphoreTake+0xca>
   1b922:	69fb      	ldr	r3, [r7, #28]
   1b924:	0018      	movs	r0, r3
   1b926:	4bbd      	ldr	r3, [pc, #756]	; (1bc1c <xQueueSemaphoreTake+0x370>)
   1b928:	4798      	blx	r3
   1b92a:	0003      	movs	r3, r0
   1b92c:	001a      	movs	r2, r3
   1b92e:	4bba      	ldr	r3, [pc, #744]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1b930:	881b      	ldrh	r3, [r3, #0]
   1b932:	4013      	ands	r3, r2
   1b934:	b29b      	uxth	r3, r3
   1b936:	2b00      	cmp	r3, #0
   1b938:	d01d      	beq.n	1b976 <xQueueSemaphoreTake+0xca>
   1b93a:	69fb      	ldr	r3, [r7, #28]
   1b93c:	0018      	movs	r0, r3
   1b93e:	4bb8      	ldr	r3, [pc, #736]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1b940:	4798      	blx	r3
   1b942:	0003      	movs	r3, r0
   1b944:	001a      	movs	r2, r3
   1b946:	4bb7      	ldr	r3, [pc, #732]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1b948:	5c9b      	ldrb	r3, [r3, r2]
   1b94a:	3328      	adds	r3, #40	; 0x28
   1b94c:	b2db      	uxtb	r3, r3
   1b94e:	001d      	movs	r5, r3
   1b950:	69fb      	ldr	r3, [r7, #28]
   1b952:	0018      	movs	r0, r3
   1b954:	4bb2      	ldr	r3, [pc, #712]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1b956:	4798      	blx	r3
   1b958:	0003      	movs	r3, r0
   1b95a:	001a      	movs	r2, r3
   1b95c:	4bb1      	ldr	r3, [pc, #708]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1b95e:	5c9c      	ldrb	r4, [r3, r2]
   1b960:	69fb      	ldr	r3, [r7, #28]
   1b962:	0018      	movs	r0, r3
   1b964:	4bb0      	ldr	r3, [pc, #704]	; (1bc28 <xQueueSemaphoreTake+0x37c>)
   1b966:	4798      	blx	r3
   1b968:	0003      	movs	r3, r0
   1b96a:	b2db      	uxtb	r3, r3
   1b96c:	001a      	movs	r2, r3
   1b96e:	0021      	movs	r1, r4
   1b970:	0028      	movs	r0, r5
   1b972:	4bae      	ldr	r3, [pc, #696]	; (1bc2c <xQueueSemaphoreTake+0x380>)
   1b974:	4798      	blx	r3
   1b976:	69fb      	ldr	r3, [r7, #28]
   1b978:	0018      	movs	r0, r3
   1b97a:	4ba9      	ldr	r3, [pc, #676]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1b97c:	4798      	blx	r3
   1b97e:	0003      	movs	r3, r0
   1b980:	001a      	movs	r2, r3
   1b982:	4ba8      	ldr	r3, [pc, #672]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1b984:	5c9c      	ldrb	r4, [r3, r2]
   1b986:	69fb      	ldr	r3, [r7, #28]
   1b988:	0018      	movs	r0, r3
   1b98a:	4ba7      	ldr	r3, [pc, #668]	; (1bc28 <xQueueSemaphoreTake+0x37c>)
   1b98c:	4798      	blx	r3
   1b98e:	0003      	movs	r3, r0
   1b990:	b2dd      	uxtb	r5, r3
   1b992:	69fb      	ldr	r3, [r7, #28]
   1b994:	0018      	movs	r0, r3
   1b996:	4ba2      	ldr	r3, [pc, #648]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1b998:	4798      	blx	r3
   1b99a:	0003      	movs	r3, r0
   1b99c:	001a      	movs	r2, r3
   1b99e:	4ba1      	ldr	r3, [pc, #644]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1b9a0:	5c9b      	ldrb	r3, [r3, r2]
   1b9a2:	2b02      	cmp	r3, #2
   1b9a4:	d108      	bne.n	1b9b8 <xQueueSemaphoreTake+0x10c>
   1b9a6:	4b9a      	ldr	r3, [pc, #616]	; (1bc10 <xQueueSemaphoreTake+0x364>)
   1b9a8:	4798      	blx	r3
   1b9aa:	0003      	movs	r3, r0
   1b9ac:	0018      	movs	r0, r3
   1b9ae:	4ba0      	ldr	r3, [pc, #640]	; (1bc30 <xQueueSemaphoreTake+0x384>)
   1b9b0:	4798      	blx	r3
   1b9b2:	0003      	movs	r3, r0
   1b9b4:	b2db      	uxtb	r3, r3
   1b9b6:	e004      	b.n	1b9c2 <xQueueSemaphoreTake+0x116>
   1b9b8:	69fb      	ldr	r3, [r7, #28]
   1b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b9bc:	b2db      	uxtb	r3, r3
   1b9be:	3b01      	subs	r3, #1
   1b9c0:	b2db      	uxtb	r3, r3
   1b9c2:	001a      	movs	r2, r3
   1b9c4:	0029      	movs	r1, r5
   1b9c6:	0020      	movs	r0, r4
   1b9c8:	4b9a      	ldr	r3, [pc, #616]	; (1bc34 <xQueueSemaphoreTake+0x388>)
   1b9ca:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b9cc:	69bb      	ldr	r3, [r7, #24]
   1b9ce:	1e5a      	subs	r2, r3, #1
   1b9d0:	69fb      	ldr	r3, [r7, #28]
   1b9d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b9d4:	69fb      	ldr	r3, [r7, #28]
   1b9d6:	681b      	ldr	r3, [r3, #0]
   1b9d8:	2b00      	cmp	r3, #0
   1b9da:	d104      	bne.n	1b9e6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b9dc:	4b96      	ldr	r3, [pc, #600]	; (1bc38 <xQueueSemaphoreTake+0x38c>)
   1b9de:	4798      	blx	r3
   1b9e0:	0002      	movs	r2, r0
   1b9e2:	69fb      	ldr	r3, [r7, #28]
   1b9e4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b9e6:	69fb      	ldr	r3, [r7, #28]
   1b9e8:	691b      	ldr	r3, [r3, #16]
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	d008      	beq.n	1ba00 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b9ee:	69fb      	ldr	r3, [r7, #28]
   1b9f0:	3310      	adds	r3, #16
   1b9f2:	0018      	movs	r0, r3
   1b9f4:	4b91      	ldr	r3, [pc, #580]	; (1bc3c <xQueueSemaphoreTake+0x390>)
   1b9f6:	4798      	blx	r3
   1b9f8:	1e03      	subs	r3, r0, #0
   1b9fa:	d001      	beq.n	1ba00 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b9fc:	4b90      	ldr	r3, [pc, #576]	; (1bc40 <xQueueSemaphoreTake+0x394>)
   1b9fe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ba00:	4b90      	ldr	r3, [pc, #576]	; (1bc44 <xQueueSemaphoreTake+0x398>)
   1ba02:	4798      	blx	r3
				return pdPASS;
   1ba04:	2301      	movs	r3, #1
   1ba06:	e18b      	b.n	1bd20 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ba08:	683b      	ldr	r3, [r7, #0]
   1ba0a:	2b00      	cmp	r3, #0
   1ba0c:	d140      	bne.n	1ba90 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1ba0e:	6a3b      	ldr	r3, [r7, #32]
   1ba10:	2b00      	cmp	r3, #0
   1ba12:	d001      	beq.n	1ba18 <xQueueSemaphoreTake+0x16c>
   1ba14:	b672      	cpsid	i
   1ba16:	e7fe      	b.n	1ba16 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1ba18:	4b8a      	ldr	r3, [pc, #552]	; (1bc44 <xQueueSemaphoreTake+0x398>)
   1ba1a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ba1c:	4b7c      	ldr	r3, [pc, #496]	; (1bc10 <xQueueSemaphoreTake+0x364>)
   1ba1e:	4798      	blx	r3
   1ba20:	0003      	movs	r3, r0
   1ba22:	0018      	movs	r0, r3
   1ba24:	4b7b      	ldr	r3, [pc, #492]	; (1bc14 <xQueueSemaphoreTake+0x368>)
   1ba26:	4798      	blx	r3
   1ba28:	0003      	movs	r3, r0
   1ba2a:	001a      	movs	r2, r3
   1ba2c:	4b7a      	ldr	r3, [pc, #488]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1ba2e:	881b      	ldrh	r3, [r3, #0]
   1ba30:	4013      	ands	r3, r2
   1ba32:	b29b      	uxth	r3, r3
   1ba34:	2b00      	cmp	r3, #0
   1ba36:	d029      	beq.n	1ba8c <xQueueSemaphoreTake+0x1e0>
   1ba38:	69fb      	ldr	r3, [r7, #28]
   1ba3a:	0018      	movs	r0, r3
   1ba3c:	4b77      	ldr	r3, [pc, #476]	; (1bc1c <xQueueSemaphoreTake+0x370>)
   1ba3e:	4798      	blx	r3
   1ba40:	0003      	movs	r3, r0
   1ba42:	001a      	movs	r2, r3
   1ba44:	4b74      	ldr	r3, [pc, #464]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1ba46:	881b      	ldrh	r3, [r3, #0]
   1ba48:	4013      	ands	r3, r2
   1ba4a:	b29b      	uxth	r3, r3
   1ba4c:	2b00      	cmp	r3, #0
   1ba4e:	d01d      	beq.n	1ba8c <xQueueSemaphoreTake+0x1e0>
   1ba50:	69fb      	ldr	r3, [r7, #28]
   1ba52:	0018      	movs	r0, r3
   1ba54:	4b72      	ldr	r3, [pc, #456]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1ba56:	4798      	blx	r3
   1ba58:	0003      	movs	r3, r0
   1ba5a:	001a      	movs	r2, r3
   1ba5c:	4b71      	ldr	r3, [pc, #452]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1ba5e:	5c9b      	ldrb	r3, [r3, r2]
   1ba60:	3350      	adds	r3, #80	; 0x50
   1ba62:	b2db      	uxtb	r3, r3
   1ba64:	001d      	movs	r5, r3
   1ba66:	69fb      	ldr	r3, [r7, #28]
   1ba68:	0018      	movs	r0, r3
   1ba6a:	4b6d      	ldr	r3, [pc, #436]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1ba6c:	4798      	blx	r3
   1ba6e:	0003      	movs	r3, r0
   1ba70:	001a      	movs	r2, r3
   1ba72:	4b6c      	ldr	r3, [pc, #432]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1ba74:	5c9c      	ldrb	r4, [r3, r2]
   1ba76:	69fb      	ldr	r3, [r7, #28]
   1ba78:	0018      	movs	r0, r3
   1ba7a:	4b6b      	ldr	r3, [pc, #428]	; (1bc28 <xQueueSemaphoreTake+0x37c>)
   1ba7c:	4798      	blx	r3
   1ba7e:	0003      	movs	r3, r0
   1ba80:	b2db      	uxtb	r3, r3
   1ba82:	001a      	movs	r2, r3
   1ba84:	0021      	movs	r1, r4
   1ba86:	0028      	movs	r0, r5
   1ba88:	4b68      	ldr	r3, [pc, #416]	; (1bc2c <xQueueSemaphoreTake+0x380>)
   1ba8a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1ba8c:	2300      	movs	r3, #0
   1ba8e:	e147      	b.n	1bd20 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba92:	2b00      	cmp	r3, #0
   1ba94:	d106      	bne.n	1baa4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ba96:	230c      	movs	r3, #12
   1ba98:	18fb      	adds	r3, r7, r3
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	4b6a      	ldr	r3, [pc, #424]	; (1bc48 <xQueueSemaphoreTake+0x39c>)
   1ba9e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1baa0:	2301      	movs	r3, #1
   1baa2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1baa4:	4b67      	ldr	r3, [pc, #412]	; (1bc44 <xQueueSemaphoreTake+0x398>)
   1baa6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1baa8:	4b68      	ldr	r3, [pc, #416]	; (1bc4c <xQueueSemaphoreTake+0x3a0>)
   1baaa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1baac:	4b57      	ldr	r3, [pc, #348]	; (1bc0c <xQueueSemaphoreTake+0x360>)
   1baae:	4798      	blx	r3
   1bab0:	69fb      	ldr	r3, [r7, #28]
   1bab2:	2244      	movs	r2, #68	; 0x44
   1bab4:	5c9b      	ldrb	r3, [r3, r2]
   1bab6:	b25b      	sxtb	r3, r3
   1bab8:	3301      	adds	r3, #1
   1baba:	d103      	bne.n	1bac4 <xQueueSemaphoreTake+0x218>
   1babc:	69fb      	ldr	r3, [r7, #28]
   1babe:	2244      	movs	r2, #68	; 0x44
   1bac0:	2100      	movs	r1, #0
   1bac2:	5499      	strb	r1, [r3, r2]
   1bac4:	69fb      	ldr	r3, [r7, #28]
   1bac6:	2245      	movs	r2, #69	; 0x45
   1bac8:	5c9b      	ldrb	r3, [r3, r2]
   1baca:	b25b      	sxtb	r3, r3
   1bacc:	3301      	adds	r3, #1
   1bace:	d103      	bne.n	1bad8 <xQueueSemaphoreTake+0x22c>
   1bad0:	69fb      	ldr	r3, [r7, #28]
   1bad2:	2245      	movs	r2, #69	; 0x45
   1bad4:	2100      	movs	r1, #0
   1bad6:	5499      	strb	r1, [r3, r2]
   1bad8:	4b5a      	ldr	r3, [pc, #360]	; (1bc44 <xQueueSemaphoreTake+0x398>)
   1bada:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1badc:	003a      	movs	r2, r7
   1bade:	230c      	movs	r3, #12
   1bae0:	18fb      	adds	r3, r7, r3
   1bae2:	0011      	movs	r1, r2
   1bae4:	0018      	movs	r0, r3
   1bae6:	4b5a      	ldr	r3, [pc, #360]	; (1bc50 <xQueueSemaphoreTake+0x3a4>)
   1bae8:	4798      	blx	r3
   1baea:	1e03      	subs	r3, r0, #0
   1baec:	d000      	beq.n	1baf0 <xQueueSemaphoreTake+0x244>
   1baee:	e0bd      	b.n	1bc6c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1baf0:	69fb      	ldr	r3, [r7, #28]
   1baf2:	0018      	movs	r0, r3
   1baf4:	4b57      	ldr	r3, [pc, #348]	; (1bc54 <xQueueSemaphoreTake+0x3a8>)
   1baf6:	4798      	blx	r3
   1baf8:	1e03      	subs	r3, r0, #0
   1bafa:	d100      	bne.n	1bafe <xQueueSemaphoreTake+0x252>
   1bafc:	e07c      	b.n	1bbf8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bafe:	4b44      	ldr	r3, [pc, #272]	; (1bc10 <xQueueSemaphoreTake+0x364>)
   1bb00:	4798      	blx	r3
   1bb02:	0003      	movs	r3, r0
   1bb04:	0018      	movs	r0, r3
   1bb06:	4b43      	ldr	r3, [pc, #268]	; (1bc14 <xQueueSemaphoreTake+0x368>)
   1bb08:	4798      	blx	r3
   1bb0a:	0003      	movs	r3, r0
   1bb0c:	001a      	movs	r2, r3
   1bb0e:	4b42      	ldr	r3, [pc, #264]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1bb10:	881b      	ldrh	r3, [r3, #0]
   1bb12:	4013      	ands	r3, r2
   1bb14:	b29b      	uxth	r3, r3
   1bb16:	2b00      	cmp	r3, #0
   1bb18:	d029      	beq.n	1bb6e <xQueueSemaphoreTake+0x2c2>
   1bb1a:	69fb      	ldr	r3, [r7, #28]
   1bb1c:	0018      	movs	r0, r3
   1bb1e:	4b3f      	ldr	r3, [pc, #252]	; (1bc1c <xQueueSemaphoreTake+0x370>)
   1bb20:	4798      	blx	r3
   1bb22:	0003      	movs	r3, r0
   1bb24:	001a      	movs	r2, r3
   1bb26:	4b3c      	ldr	r3, [pc, #240]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1bb28:	881b      	ldrh	r3, [r3, #0]
   1bb2a:	4013      	ands	r3, r2
   1bb2c:	b29b      	uxth	r3, r3
   1bb2e:	2b00      	cmp	r3, #0
   1bb30:	d01d      	beq.n	1bb6e <xQueueSemaphoreTake+0x2c2>
   1bb32:	69fb      	ldr	r3, [r7, #28]
   1bb34:	0018      	movs	r0, r3
   1bb36:	4b3a      	ldr	r3, [pc, #232]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1bb38:	4798      	blx	r3
   1bb3a:	0003      	movs	r3, r0
   1bb3c:	001a      	movs	r2, r3
   1bb3e:	4b39      	ldr	r3, [pc, #228]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1bb40:	5c9b      	ldrb	r3, [r3, r2]
   1bb42:	3368      	adds	r3, #104	; 0x68
   1bb44:	b2db      	uxtb	r3, r3
   1bb46:	001d      	movs	r5, r3
   1bb48:	69fb      	ldr	r3, [r7, #28]
   1bb4a:	0018      	movs	r0, r3
   1bb4c:	4b34      	ldr	r3, [pc, #208]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1bb4e:	4798      	blx	r3
   1bb50:	0003      	movs	r3, r0
   1bb52:	001a      	movs	r2, r3
   1bb54:	4b33      	ldr	r3, [pc, #204]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1bb56:	5c9c      	ldrb	r4, [r3, r2]
   1bb58:	69fb      	ldr	r3, [r7, #28]
   1bb5a:	0018      	movs	r0, r3
   1bb5c:	4b32      	ldr	r3, [pc, #200]	; (1bc28 <xQueueSemaphoreTake+0x37c>)
   1bb5e:	4798      	blx	r3
   1bb60:	0003      	movs	r3, r0
   1bb62:	b2db      	uxtb	r3, r3
   1bb64:	001a      	movs	r2, r3
   1bb66:	0021      	movs	r1, r4
   1bb68:	0028      	movs	r0, r5
   1bb6a:	4b30      	ldr	r3, [pc, #192]	; (1bc2c <xQueueSemaphoreTake+0x380>)
   1bb6c:	4798      	blx	r3
   1bb6e:	69fb      	ldr	r3, [r7, #28]
   1bb70:	0018      	movs	r0, r3
   1bb72:	4b2b      	ldr	r3, [pc, #172]	; (1bc20 <xQueueSemaphoreTake+0x374>)
   1bb74:	4798      	blx	r3
   1bb76:	0003      	movs	r3, r0
   1bb78:	001a      	movs	r2, r3
   1bb7a:	4b2a      	ldr	r3, [pc, #168]	; (1bc24 <xQueueSemaphoreTake+0x378>)
   1bb7c:	5c9b      	ldrb	r3, [r3, r2]
   1bb7e:	2b02      	cmp	r3, #2
   1bb80:	d018      	beq.n	1bbb4 <xQueueSemaphoreTake+0x308>
   1bb82:	4b23      	ldr	r3, [pc, #140]	; (1bc10 <xQueueSemaphoreTake+0x364>)
   1bb84:	4798      	blx	r3
   1bb86:	0003      	movs	r3, r0
   1bb88:	0018      	movs	r0, r3
   1bb8a:	4b22      	ldr	r3, [pc, #136]	; (1bc14 <xQueueSemaphoreTake+0x368>)
   1bb8c:	4798      	blx	r3
   1bb8e:	0003      	movs	r3, r0
   1bb90:	001a      	movs	r2, r3
   1bb92:	4b21      	ldr	r3, [pc, #132]	; (1bc18 <xQueueSemaphoreTake+0x36c>)
   1bb94:	881b      	ldrh	r3, [r3, #0]
   1bb96:	4013      	ands	r3, r2
   1bb98:	b29b      	uxth	r3, r3
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	d00a      	beq.n	1bbb4 <xQueueSemaphoreTake+0x308>
   1bb9e:	4b1c      	ldr	r3, [pc, #112]	; (1bc10 <xQueueSemaphoreTake+0x364>)
   1bba0:	4798      	blx	r3
   1bba2:	0003      	movs	r3, r0
   1bba4:	0018      	movs	r0, r3
   1bba6:	4b22      	ldr	r3, [pc, #136]	; (1bc30 <xQueueSemaphoreTake+0x384>)
   1bba8:	4798      	blx	r3
   1bbaa:	0003      	movs	r3, r0
   1bbac:	b2db      	uxtb	r3, r3
   1bbae:	0018      	movs	r0, r3
   1bbb0:	4b29      	ldr	r3, [pc, #164]	; (1bc58 <xQueueSemaphoreTake+0x3ac>)
   1bbb2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bbb4:	69fb      	ldr	r3, [r7, #28]
   1bbb6:	681b      	ldr	r3, [r3, #0]
   1bbb8:	2b00      	cmp	r3, #0
   1bbba:	d10a      	bne.n	1bbd2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1bbbc:	4b13      	ldr	r3, [pc, #76]	; (1bc0c <xQueueSemaphoreTake+0x360>)
   1bbbe:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1bbc0:	69fb      	ldr	r3, [r7, #28]
   1bbc2:	685b      	ldr	r3, [r3, #4]
   1bbc4:	0018      	movs	r0, r3
   1bbc6:	4b25      	ldr	r3, [pc, #148]	; (1bc5c <xQueueSemaphoreTake+0x3b0>)
   1bbc8:	4798      	blx	r3
   1bbca:	0003      	movs	r3, r0
   1bbcc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1bbce:	4b1d      	ldr	r3, [pc, #116]	; (1bc44 <xQueueSemaphoreTake+0x398>)
   1bbd0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bbd2:	69fb      	ldr	r3, [r7, #28]
   1bbd4:	3324      	adds	r3, #36	; 0x24
   1bbd6:	683a      	ldr	r2, [r7, #0]
   1bbd8:	0011      	movs	r1, r2
   1bbda:	0018      	movs	r0, r3
   1bbdc:	4b20      	ldr	r3, [pc, #128]	; (1bc60 <xQueueSemaphoreTake+0x3b4>)
   1bbde:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bbe0:	69fb      	ldr	r3, [r7, #28]
   1bbe2:	0018      	movs	r0, r3
   1bbe4:	4b1f      	ldr	r3, [pc, #124]	; (1bc64 <xQueueSemaphoreTake+0x3b8>)
   1bbe6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bbe8:	4b1f      	ldr	r3, [pc, #124]	; (1bc68 <xQueueSemaphoreTake+0x3bc>)
   1bbea:	4798      	blx	r3
   1bbec:	1e03      	subs	r3, r0, #0
   1bbee:	d000      	beq.n	1bbf2 <xQueueSemaphoreTake+0x346>
   1bbf0:	e680      	b.n	1b8f4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1bbf2:	4b13      	ldr	r3, [pc, #76]	; (1bc40 <xQueueSemaphoreTake+0x394>)
   1bbf4:	4798      	blx	r3
   1bbf6:	e67d      	b.n	1b8f4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1bbf8:	69fb      	ldr	r3, [r7, #28]
   1bbfa:	0018      	movs	r0, r3
   1bbfc:	4b19      	ldr	r3, [pc, #100]	; (1bc64 <xQueueSemaphoreTake+0x3b8>)
   1bbfe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bc00:	4b19      	ldr	r3, [pc, #100]	; (1bc68 <xQueueSemaphoreTake+0x3bc>)
   1bc02:	4798      	blx	r3
   1bc04:	e676      	b.n	1b8f4 <xQueueSemaphoreTake+0x48>
   1bc06:	46c0      	nop			; (mov r8, r8)
   1bc08:	0001d329 	.word	0x0001d329
   1bc0c:	0001a609 	.word	0x0001a609
   1bc10:	000188a1 	.word	0x000188a1
   1bc14:	00018605 	.word	0x00018605
   1bc18:	20000110 	.word	0x20000110
   1bc1c:	000186c5 	.word	0x000186c5
   1bc20:	000185c5 	.word	0x000185c5
   1bc24:	20000104 	.word	0x20000104
   1bc28:	000186a5 	.word	0x000186a5
   1bc2c:	00018ffd 	.word	0x00018ffd
   1bc30:	000185e5 	.word	0x000185e5
   1bc34:	00019659 	.word	0x00019659
   1bc38:	0001d7f5 	.word	0x0001d7f5
   1bc3c:	0001ce99 	.word	0x0001ce99
   1bc40:	0001a5f1 	.word	0x0001a5f1
   1bc44:	0001a62d 	.word	0x0001a62d
   1bc48:	0001cfd9 	.word	0x0001cfd9
   1bc4c:	0001c8c1 	.word	0x0001c8c1
   1bc50:	0001d001 	.word	0x0001d001
   1bc54:	0001bff5 	.word	0x0001bff5
   1bc58:	00019795 	.word	0x00019795
   1bc5c:	0001d361 	.word	0x0001d361
   1bc60:	0001cd75 	.word	0x0001cd75
   1bc64:	0001bf05 	.word	0x0001bf05
   1bc68:	0001c8d9 	.word	0x0001c8d9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1bc6c:	69fb      	ldr	r3, [r7, #28]
   1bc6e:	0018      	movs	r0, r3
   1bc70:	4b2d      	ldr	r3, [pc, #180]	; (1bd28 <xQueueSemaphoreTake+0x47c>)
   1bc72:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1bc74:	4b2d      	ldr	r3, [pc, #180]	; (1bd2c <xQueueSemaphoreTake+0x480>)
   1bc76:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bc78:	69fb      	ldr	r3, [r7, #28]
   1bc7a:	0018      	movs	r0, r3
   1bc7c:	4b2c      	ldr	r3, [pc, #176]	; (1bd30 <xQueueSemaphoreTake+0x484>)
   1bc7e:	4798      	blx	r3
   1bc80:	1e03      	subs	r3, r0, #0
   1bc82:	d100      	bne.n	1bc86 <xQueueSemaphoreTake+0x3da>
   1bc84:	e636      	b.n	1b8f4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1bc86:	6a3b      	ldr	r3, [r7, #32]
   1bc88:	2b00      	cmp	r3, #0
   1bc8a:	d010      	beq.n	1bcae <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1bc8c:	4b29      	ldr	r3, [pc, #164]	; (1bd34 <xQueueSemaphoreTake+0x488>)
   1bc8e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1bc90:	69fb      	ldr	r3, [r7, #28]
   1bc92:	0018      	movs	r0, r3
   1bc94:	4b28      	ldr	r3, [pc, #160]	; (1bd38 <xQueueSemaphoreTake+0x48c>)
   1bc96:	4798      	blx	r3
   1bc98:	0003      	movs	r3, r0
   1bc9a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1bc9c:	69fb      	ldr	r3, [r7, #28]
   1bc9e:	685b      	ldr	r3, [r3, #4]
   1bca0:	697a      	ldr	r2, [r7, #20]
   1bca2:	0011      	movs	r1, r2
   1bca4:	0018      	movs	r0, r3
   1bca6:	4b25      	ldr	r3, [pc, #148]	; (1bd3c <xQueueSemaphoreTake+0x490>)
   1bca8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1bcaa:	4b25      	ldr	r3, [pc, #148]	; (1bd40 <xQueueSemaphoreTake+0x494>)
   1bcac:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bcae:	4b25      	ldr	r3, [pc, #148]	; (1bd44 <xQueueSemaphoreTake+0x498>)
   1bcb0:	4798      	blx	r3
   1bcb2:	0003      	movs	r3, r0
   1bcb4:	0018      	movs	r0, r3
   1bcb6:	4b24      	ldr	r3, [pc, #144]	; (1bd48 <xQueueSemaphoreTake+0x49c>)
   1bcb8:	4798      	blx	r3
   1bcba:	0003      	movs	r3, r0
   1bcbc:	001a      	movs	r2, r3
   1bcbe:	4b23      	ldr	r3, [pc, #140]	; (1bd4c <xQueueSemaphoreTake+0x4a0>)
   1bcc0:	881b      	ldrh	r3, [r3, #0]
   1bcc2:	4013      	ands	r3, r2
   1bcc4:	b29b      	uxth	r3, r3
   1bcc6:	2b00      	cmp	r3, #0
   1bcc8:	d029      	beq.n	1bd1e <xQueueSemaphoreTake+0x472>
   1bcca:	69fb      	ldr	r3, [r7, #28]
   1bccc:	0018      	movs	r0, r3
   1bcce:	4b20      	ldr	r3, [pc, #128]	; (1bd50 <xQueueSemaphoreTake+0x4a4>)
   1bcd0:	4798      	blx	r3
   1bcd2:	0003      	movs	r3, r0
   1bcd4:	001a      	movs	r2, r3
   1bcd6:	4b1d      	ldr	r3, [pc, #116]	; (1bd4c <xQueueSemaphoreTake+0x4a0>)
   1bcd8:	881b      	ldrh	r3, [r3, #0]
   1bcda:	4013      	ands	r3, r2
   1bcdc:	b29b      	uxth	r3, r3
   1bcde:	2b00      	cmp	r3, #0
   1bce0:	d01d      	beq.n	1bd1e <xQueueSemaphoreTake+0x472>
   1bce2:	69fb      	ldr	r3, [r7, #28]
   1bce4:	0018      	movs	r0, r3
   1bce6:	4b1b      	ldr	r3, [pc, #108]	; (1bd54 <xQueueSemaphoreTake+0x4a8>)
   1bce8:	4798      	blx	r3
   1bcea:	0003      	movs	r3, r0
   1bcec:	001a      	movs	r2, r3
   1bcee:	4b1a      	ldr	r3, [pc, #104]	; (1bd58 <xQueueSemaphoreTake+0x4ac>)
   1bcf0:	5c9b      	ldrb	r3, [r3, r2]
   1bcf2:	3350      	adds	r3, #80	; 0x50
   1bcf4:	b2db      	uxtb	r3, r3
   1bcf6:	001d      	movs	r5, r3
   1bcf8:	69fb      	ldr	r3, [r7, #28]
   1bcfa:	0018      	movs	r0, r3
   1bcfc:	4b15      	ldr	r3, [pc, #84]	; (1bd54 <xQueueSemaphoreTake+0x4a8>)
   1bcfe:	4798      	blx	r3
   1bd00:	0003      	movs	r3, r0
   1bd02:	001a      	movs	r2, r3
   1bd04:	4b14      	ldr	r3, [pc, #80]	; (1bd58 <xQueueSemaphoreTake+0x4ac>)
   1bd06:	5c9c      	ldrb	r4, [r3, r2]
   1bd08:	69fb      	ldr	r3, [r7, #28]
   1bd0a:	0018      	movs	r0, r3
   1bd0c:	4b13      	ldr	r3, [pc, #76]	; (1bd5c <xQueueSemaphoreTake+0x4b0>)
   1bd0e:	4798      	blx	r3
   1bd10:	0003      	movs	r3, r0
   1bd12:	b2db      	uxtb	r3, r3
   1bd14:	001a      	movs	r2, r3
   1bd16:	0021      	movs	r1, r4
   1bd18:	0028      	movs	r0, r5
   1bd1a:	4b11      	ldr	r3, [pc, #68]	; (1bd60 <xQueueSemaphoreTake+0x4b4>)
   1bd1c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bd1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bd20:	0018      	movs	r0, r3
   1bd22:	46bd      	mov	sp, r7
   1bd24:	b00a      	add	sp, #40	; 0x28
   1bd26:	bdb0      	pop	{r4, r5, r7, pc}
   1bd28:	0001bf05 	.word	0x0001bf05
   1bd2c:	0001c8d9 	.word	0x0001c8d9
   1bd30:	0001bff5 	.word	0x0001bff5
   1bd34:	0001a609 	.word	0x0001a609
   1bd38:	0001bda7 	.word	0x0001bda7
   1bd3c:	0001d659 	.word	0x0001d659
   1bd40:	0001a62d 	.word	0x0001a62d
   1bd44:	000188a1 	.word	0x000188a1
   1bd48:	00018605 	.word	0x00018605
   1bd4c:	20000110 	.word	0x20000110
   1bd50:	000186c5 	.word	0x000186c5
   1bd54:	000185c5 	.word	0x000185c5
   1bd58:	20000104 	.word	0x20000104
   1bd5c:	000186a5 	.word	0x000186a5
   1bd60:	00018ffd 	.word	0x00018ffd

0001bd64 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1bd64:	b580      	push	{r7, lr}
   1bd66:	b082      	sub	sp, #8
   1bd68:	af00      	add	r7, sp, #0
   1bd6a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1bd6c:	687b      	ldr	r3, [r7, #4]
   1bd6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1bd70:	0018      	movs	r0, r3
   1bd72:	46bd      	mov	sp, r7
   1bd74:	b002      	add	sp, #8
   1bd76:	bd80      	pop	{r7, pc}

0001bd78 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1bd78:	b580      	push	{r7, lr}
   1bd7a:	b082      	sub	sp, #8
   1bd7c:	af00      	add	r7, sp, #0
   1bd7e:	6078      	str	r0, [r7, #4]
   1bd80:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1bd82:	687b      	ldr	r3, [r7, #4]
   1bd84:	683a      	ldr	r2, [r7, #0]
   1bd86:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1bd88:	46c0      	nop			; (mov r8, r8)
   1bd8a:	46bd      	mov	sp, r7
   1bd8c:	b002      	add	sp, #8
   1bd8e:	bd80      	pop	{r7, pc}

0001bd90 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1bd90:	b580      	push	{r7, lr}
   1bd92:	b082      	sub	sp, #8
   1bd94:	af00      	add	r7, sp, #0
   1bd96:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1bd98:	687b      	ldr	r3, [r7, #4]
   1bd9a:	2250      	movs	r2, #80	; 0x50
   1bd9c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1bd9e:	0018      	movs	r0, r3
   1bda0:	46bd      	mov	sp, r7
   1bda2:	b002      	add	sp, #8
   1bda4:	bd80      	pop	{r7, pc}

0001bda6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1bda6:	b580      	push	{r7, lr}
   1bda8:	b084      	sub	sp, #16
   1bdaa:	af00      	add	r7, sp, #0
   1bdac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1bdae:	687b      	ldr	r3, [r7, #4]
   1bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bdb2:	2b00      	cmp	r3, #0
   1bdb4:	d006      	beq.n	1bdc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1bdb6:	687b      	ldr	r3, [r7, #4]
   1bdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bdba:	681b      	ldr	r3, [r3, #0]
   1bdbc:	2205      	movs	r2, #5
   1bdbe:	1ad3      	subs	r3, r2, r3
   1bdc0:	60fb      	str	r3, [r7, #12]
   1bdc2:	e001      	b.n	1bdc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1bdc4:	2300      	movs	r3, #0
   1bdc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1bdc8:	68fb      	ldr	r3, [r7, #12]
	}
   1bdca:	0018      	movs	r0, r3
   1bdcc:	46bd      	mov	sp, r7
   1bdce:	b004      	add	sp, #16
   1bdd0:	bd80      	pop	{r7, pc}
	...

0001bdd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1bdd4:	b580      	push	{r7, lr}
   1bdd6:	b086      	sub	sp, #24
   1bdd8:	af00      	add	r7, sp, #0
   1bdda:	60f8      	str	r0, [r7, #12]
   1bddc:	60b9      	str	r1, [r7, #8]
   1bdde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1bde0:	2300      	movs	r3, #0
   1bde2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bde4:	68fb      	ldr	r3, [r7, #12]
   1bde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bde8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1bdea:	68fb      	ldr	r3, [r7, #12]
   1bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bdee:	2b00      	cmp	r3, #0
   1bdf0:	d10e      	bne.n	1be10 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bdf2:	68fb      	ldr	r3, [r7, #12]
   1bdf4:	681b      	ldr	r3, [r3, #0]
   1bdf6:	2b00      	cmp	r3, #0
   1bdf8:	d14e      	bne.n	1be98 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1bdfa:	68fb      	ldr	r3, [r7, #12]
   1bdfc:	685b      	ldr	r3, [r3, #4]
   1bdfe:	0018      	movs	r0, r3
   1be00:	4b2a      	ldr	r3, [pc, #168]	; (1beac <prvCopyDataToQueue+0xd8>)
   1be02:	4798      	blx	r3
   1be04:	0003      	movs	r3, r0
   1be06:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1be08:	68fb      	ldr	r3, [r7, #12]
   1be0a:	2200      	movs	r2, #0
   1be0c:	605a      	str	r2, [r3, #4]
   1be0e:	e043      	b.n	1be98 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1be10:	687b      	ldr	r3, [r7, #4]
   1be12:	2b00      	cmp	r3, #0
   1be14:	d119      	bne.n	1be4a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1be16:	68fb      	ldr	r3, [r7, #12]
   1be18:	6898      	ldr	r0, [r3, #8]
   1be1a:	68fb      	ldr	r3, [r7, #12]
   1be1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1be1e:	68bb      	ldr	r3, [r7, #8]
   1be20:	0019      	movs	r1, r3
   1be22:	4b23      	ldr	r3, [pc, #140]	; (1beb0 <prvCopyDataToQueue+0xdc>)
   1be24:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1be26:	68fb      	ldr	r3, [r7, #12]
   1be28:	689a      	ldr	r2, [r3, #8]
   1be2a:	68fb      	ldr	r3, [r7, #12]
   1be2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be2e:	18d2      	adds	r2, r2, r3
   1be30:	68fb      	ldr	r3, [r7, #12]
   1be32:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1be34:	68fb      	ldr	r3, [r7, #12]
   1be36:	689a      	ldr	r2, [r3, #8]
   1be38:	68fb      	ldr	r3, [r7, #12]
   1be3a:	685b      	ldr	r3, [r3, #4]
   1be3c:	429a      	cmp	r2, r3
   1be3e:	d32b      	bcc.n	1be98 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1be40:	68fb      	ldr	r3, [r7, #12]
   1be42:	681a      	ldr	r2, [r3, #0]
   1be44:	68fb      	ldr	r3, [r7, #12]
   1be46:	609a      	str	r2, [r3, #8]
   1be48:	e026      	b.n	1be98 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1be4a:	68fb      	ldr	r3, [r7, #12]
   1be4c:	68d8      	ldr	r0, [r3, #12]
   1be4e:	68fb      	ldr	r3, [r7, #12]
   1be50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1be52:	68bb      	ldr	r3, [r7, #8]
   1be54:	0019      	movs	r1, r3
   1be56:	4b16      	ldr	r3, [pc, #88]	; (1beb0 <prvCopyDataToQueue+0xdc>)
   1be58:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1be5a:	68fb      	ldr	r3, [r7, #12]
   1be5c:	68da      	ldr	r2, [r3, #12]
   1be5e:	68fb      	ldr	r3, [r7, #12]
   1be60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be62:	425b      	negs	r3, r3
   1be64:	18d2      	adds	r2, r2, r3
   1be66:	68fb      	ldr	r3, [r7, #12]
   1be68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1be6a:	68fb      	ldr	r3, [r7, #12]
   1be6c:	68da      	ldr	r2, [r3, #12]
   1be6e:	68fb      	ldr	r3, [r7, #12]
   1be70:	681b      	ldr	r3, [r3, #0]
   1be72:	429a      	cmp	r2, r3
   1be74:	d207      	bcs.n	1be86 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1be76:	68fb      	ldr	r3, [r7, #12]
   1be78:	685a      	ldr	r2, [r3, #4]
   1be7a:	68fb      	ldr	r3, [r7, #12]
   1be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be7e:	425b      	negs	r3, r3
   1be80:	18d2      	adds	r2, r2, r3
   1be82:	68fb      	ldr	r3, [r7, #12]
   1be84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1be86:	687b      	ldr	r3, [r7, #4]
   1be88:	2b02      	cmp	r3, #2
   1be8a:	d105      	bne.n	1be98 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1be8c:	693b      	ldr	r3, [r7, #16]
   1be8e:	2b00      	cmp	r3, #0
   1be90:	d002      	beq.n	1be98 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1be92:	693b      	ldr	r3, [r7, #16]
   1be94:	3b01      	subs	r3, #1
   1be96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1be98:	693b      	ldr	r3, [r7, #16]
   1be9a:	1c5a      	adds	r2, r3, #1
   1be9c:	68fb      	ldr	r3, [r7, #12]
   1be9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1bea0:	697b      	ldr	r3, [r7, #20]
}
   1bea2:	0018      	movs	r0, r3
   1bea4:	46bd      	mov	sp, r7
   1bea6:	b006      	add	sp, #24
   1bea8:	bd80      	pop	{r7, pc}
   1beaa:	46c0      	nop			; (mov r8, r8)
   1beac:	0001d4f1 	.word	0x0001d4f1
   1beb0:	00034ddd 	.word	0x00034ddd

0001beb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1beb4:	b580      	push	{r7, lr}
   1beb6:	b082      	sub	sp, #8
   1beb8:	af00      	add	r7, sp, #0
   1beba:	6078      	str	r0, [r7, #4]
   1bebc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1bebe:	687b      	ldr	r3, [r7, #4]
   1bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bec2:	2b00      	cmp	r3, #0
   1bec4:	d018      	beq.n	1bef8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1bec6:	687b      	ldr	r3, [r7, #4]
   1bec8:	68da      	ldr	r2, [r3, #12]
   1beca:	687b      	ldr	r3, [r7, #4]
   1becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bece:	18d2      	adds	r2, r2, r3
   1bed0:	687b      	ldr	r3, [r7, #4]
   1bed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1bed4:	687b      	ldr	r3, [r7, #4]
   1bed6:	68da      	ldr	r2, [r3, #12]
   1bed8:	687b      	ldr	r3, [r7, #4]
   1beda:	685b      	ldr	r3, [r3, #4]
   1bedc:	429a      	cmp	r2, r3
   1bede:	d303      	bcc.n	1bee8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1bee0:	687b      	ldr	r3, [r7, #4]
   1bee2:	681a      	ldr	r2, [r3, #0]
   1bee4:	687b      	ldr	r3, [r7, #4]
   1bee6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1bee8:	687b      	ldr	r3, [r7, #4]
   1beea:	68d9      	ldr	r1, [r3, #12]
   1beec:	687b      	ldr	r3, [r7, #4]
   1beee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bef0:	683b      	ldr	r3, [r7, #0]
   1bef2:	0018      	movs	r0, r3
   1bef4:	4b02      	ldr	r3, [pc, #8]	; (1bf00 <prvCopyDataFromQueue+0x4c>)
   1bef6:	4798      	blx	r3
	}
}
   1bef8:	46c0      	nop			; (mov r8, r8)
   1befa:	46bd      	mov	sp, r7
   1befc:	b002      	add	sp, #8
   1befe:	bd80      	pop	{r7, pc}
   1bf00:	00034ddd 	.word	0x00034ddd

0001bf04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1bf04:	b580      	push	{r7, lr}
   1bf06:	b084      	sub	sp, #16
   1bf08:	af00      	add	r7, sp, #0
   1bf0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1bf0c:	4b34      	ldr	r3, [pc, #208]	; (1bfe0 <prvUnlockQueue+0xdc>)
   1bf0e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1bf10:	230f      	movs	r3, #15
   1bf12:	18fb      	adds	r3, r7, r3
   1bf14:	687a      	ldr	r2, [r7, #4]
   1bf16:	2145      	movs	r1, #69	; 0x45
   1bf18:	5c52      	ldrb	r2, [r2, r1]
   1bf1a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bf1c:	e022      	b.n	1bf64 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1bf1e:	687b      	ldr	r3, [r7, #4]
   1bf20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d009      	beq.n	1bf3a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bf26:	687b      	ldr	r3, [r7, #4]
   1bf28:	2100      	movs	r1, #0
   1bf2a:	0018      	movs	r0, r3
   1bf2c:	4b2d      	ldr	r3, [pc, #180]	; (1bfe4 <prvUnlockQueue+0xe0>)
   1bf2e:	4798      	blx	r3
   1bf30:	1e03      	subs	r3, r0, #0
   1bf32:	d00f      	beq.n	1bf54 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1bf34:	4b2c      	ldr	r3, [pc, #176]	; (1bfe8 <prvUnlockQueue+0xe4>)
   1bf36:	4798      	blx	r3
   1bf38:	e00c      	b.n	1bf54 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bf3a:	687b      	ldr	r3, [r7, #4]
   1bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf3e:	2b00      	cmp	r3, #0
   1bf40:	d017      	beq.n	1bf72 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bf42:	687b      	ldr	r3, [r7, #4]
   1bf44:	3324      	adds	r3, #36	; 0x24
   1bf46:	0018      	movs	r0, r3
   1bf48:	4b28      	ldr	r3, [pc, #160]	; (1bfec <prvUnlockQueue+0xe8>)
   1bf4a:	4798      	blx	r3
   1bf4c:	1e03      	subs	r3, r0, #0
   1bf4e:	d001      	beq.n	1bf54 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1bf50:	4b25      	ldr	r3, [pc, #148]	; (1bfe8 <prvUnlockQueue+0xe4>)
   1bf52:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1bf54:	230f      	movs	r3, #15
   1bf56:	18fb      	adds	r3, r7, r3
   1bf58:	781b      	ldrb	r3, [r3, #0]
   1bf5a:	3b01      	subs	r3, #1
   1bf5c:	b2da      	uxtb	r2, r3
   1bf5e:	230f      	movs	r3, #15
   1bf60:	18fb      	adds	r3, r7, r3
   1bf62:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bf64:	230f      	movs	r3, #15
   1bf66:	18fb      	adds	r3, r7, r3
   1bf68:	781b      	ldrb	r3, [r3, #0]
   1bf6a:	b25b      	sxtb	r3, r3
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	dcd6      	bgt.n	1bf1e <prvUnlockQueue+0x1a>
   1bf70:	e000      	b.n	1bf74 <prvUnlockQueue+0x70>
						break;
   1bf72:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1bf74:	687b      	ldr	r3, [r7, #4]
   1bf76:	2245      	movs	r2, #69	; 0x45
   1bf78:	21ff      	movs	r1, #255	; 0xff
   1bf7a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bf7c:	4b1c      	ldr	r3, [pc, #112]	; (1bff0 <prvUnlockQueue+0xec>)
   1bf7e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1bf80:	4b17      	ldr	r3, [pc, #92]	; (1bfe0 <prvUnlockQueue+0xdc>)
   1bf82:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1bf84:	230e      	movs	r3, #14
   1bf86:	18fb      	adds	r3, r7, r3
   1bf88:	687a      	ldr	r2, [r7, #4]
   1bf8a:	2144      	movs	r1, #68	; 0x44
   1bf8c:	5c52      	ldrb	r2, [r2, r1]
   1bf8e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bf90:	e014      	b.n	1bfbc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bf92:	687b      	ldr	r3, [r7, #4]
   1bf94:	691b      	ldr	r3, [r3, #16]
   1bf96:	2b00      	cmp	r3, #0
   1bf98:	d017      	beq.n	1bfca <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bf9a:	687b      	ldr	r3, [r7, #4]
   1bf9c:	3310      	adds	r3, #16
   1bf9e:	0018      	movs	r0, r3
   1bfa0:	4b12      	ldr	r3, [pc, #72]	; (1bfec <prvUnlockQueue+0xe8>)
   1bfa2:	4798      	blx	r3
   1bfa4:	1e03      	subs	r3, r0, #0
   1bfa6:	d001      	beq.n	1bfac <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1bfa8:	4b0f      	ldr	r3, [pc, #60]	; (1bfe8 <prvUnlockQueue+0xe4>)
   1bfaa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1bfac:	230e      	movs	r3, #14
   1bfae:	18fb      	adds	r3, r7, r3
   1bfb0:	781b      	ldrb	r3, [r3, #0]
   1bfb2:	3b01      	subs	r3, #1
   1bfb4:	b2da      	uxtb	r2, r3
   1bfb6:	230e      	movs	r3, #14
   1bfb8:	18fb      	adds	r3, r7, r3
   1bfba:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bfbc:	230e      	movs	r3, #14
   1bfbe:	18fb      	adds	r3, r7, r3
   1bfc0:	781b      	ldrb	r3, [r3, #0]
   1bfc2:	b25b      	sxtb	r3, r3
   1bfc4:	2b00      	cmp	r3, #0
   1bfc6:	dce4      	bgt.n	1bf92 <prvUnlockQueue+0x8e>
   1bfc8:	e000      	b.n	1bfcc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1bfca:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1bfcc:	687b      	ldr	r3, [r7, #4]
   1bfce:	2244      	movs	r2, #68	; 0x44
   1bfd0:	21ff      	movs	r1, #255	; 0xff
   1bfd2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bfd4:	4b06      	ldr	r3, [pc, #24]	; (1bff0 <prvUnlockQueue+0xec>)
   1bfd6:	4798      	blx	r3
}
   1bfd8:	46c0      	nop			; (mov r8, r8)
   1bfda:	46bd      	mov	sp, r7
   1bfdc:	b004      	add	sp, #16
   1bfde:	bd80      	pop	{r7, pc}
   1bfe0:	0001a609 	.word	0x0001a609
   1bfe4:	0001c0d9 	.word	0x0001c0d9
   1bfe8:	0001d0ad 	.word	0x0001d0ad
   1bfec:	0001ce99 	.word	0x0001ce99
   1bff0:	0001a62d 	.word	0x0001a62d

0001bff4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1bff4:	b580      	push	{r7, lr}
   1bff6:	b084      	sub	sp, #16
   1bff8:	af00      	add	r7, sp, #0
   1bffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1bffc:	4b08      	ldr	r3, [pc, #32]	; (1c020 <prvIsQueueEmpty+0x2c>)
   1bffe:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c000:	687b      	ldr	r3, [r7, #4]
   1c002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c004:	2b00      	cmp	r3, #0
   1c006:	d102      	bne.n	1c00e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c008:	2301      	movs	r3, #1
   1c00a:	60fb      	str	r3, [r7, #12]
   1c00c:	e001      	b.n	1c012 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c00e:	2300      	movs	r3, #0
   1c010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c012:	4b04      	ldr	r3, [pc, #16]	; (1c024 <prvIsQueueEmpty+0x30>)
   1c014:	4798      	blx	r3

	return xReturn;
   1c016:	68fb      	ldr	r3, [r7, #12]
}
   1c018:	0018      	movs	r0, r3
   1c01a:	46bd      	mov	sp, r7
   1c01c:	b004      	add	sp, #16
   1c01e:	bd80      	pop	{r7, pc}
   1c020:	0001a609 	.word	0x0001a609
   1c024:	0001a62d 	.word	0x0001a62d

0001c028 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c028:	b580      	push	{r7, lr}
   1c02a:	b084      	sub	sp, #16
   1c02c:	af00      	add	r7, sp, #0
   1c02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c030:	4b09      	ldr	r3, [pc, #36]	; (1c058 <prvIsQueueFull+0x30>)
   1c032:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c034:	687b      	ldr	r3, [r7, #4]
   1c036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c03c:	429a      	cmp	r2, r3
   1c03e:	d102      	bne.n	1c046 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c040:	2301      	movs	r3, #1
   1c042:	60fb      	str	r3, [r7, #12]
   1c044:	e001      	b.n	1c04a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c046:	2300      	movs	r3, #0
   1c048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c04a:	4b04      	ldr	r3, [pc, #16]	; (1c05c <prvIsQueueFull+0x34>)
   1c04c:	4798      	blx	r3

	return xReturn;
   1c04e:	68fb      	ldr	r3, [r7, #12]
}
   1c050:	0018      	movs	r0, r3
   1c052:	46bd      	mov	sp, r7
   1c054:	b004      	add	sp, #16
   1c056:	bd80      	pop	{r7, pc}
   1c058:	0001a609 	.word	0x0001a609
   1c05c:	0001a62d 	.word	0x0001a62d

0001c060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c060:	b580      	push	{r7, lr}
   1c062:	b086      	sub	sp, #24
   1c064:	af00      	add	r7, sp, #0
   1c066:	60f8      	str	r0, [r7, #12]
   1c068:	60b9      	str	r1, [r7, #8]
   1c06a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c06c:	68fb      	ldr	r3, [r7, #12]
   1c06e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c070:	4b15      	ldr	r3, [pc, #84]	; (1c0c8 <vQueueWaitForMessageRestricted+0x68>)
   1c072:	4798      	blx	r3
   1c074:	697b      	ldr	r3, [r7, #20]
   1c076:	2244      	movs	r2, #68	; 0x44
   1c078:	5c9b      	ldrb	r3, [r3, r2]
   1c07a:	b25b      	sxtb	r3, r3
   1c07c:	3301      	adds	r3, #1
   1c07e:	d103      	bne.n	1c088 <vQueueWaitForMessageRestricted+0x28>
   1c080:	697b      	ldr	r3, [r7, #20]
   1c082:	2244      	movs	r2, #68	; 0x44
   1c084:	2100      	movs	r1, #0
   1c086:	5499      	strb	r1, [r3, r2]
   1c088:	697b      	ldr	r3, [r7, #20]
   1c08a:	2245      	movs	r2, #69	; 0x45
   1c08c:	5c9b      	ldrb	r3, [r3, r2]
   1c08e:	b25b      	sxtb	r3, r3
   1c090:	3301      	adds	r3, #1
   1c092:	d103      	bne.n	1c09c <vQueueWaitForMessageRestricted+0x3c>
   1c094:	697b      	ldr	r3, [r7, #20]
   1c096:	2245      	movs	r2, #69	; 0x45
   1c098:	2100      	movs	r1, #0
   1c09a:	5499      	strb	r1, [r3, r2]
   1c09c:	4b0b      	ldr	r3, [pc, #44]	; (1c0cc <vQueueWaitForMessageRestricted+0x6c>)
   1c09e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c0a0:	697b      	ldr	r3, [r7, #20]
   1c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d106      	bne.n	1c0b6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c0a8:	697b      	ldr	r3, [r7, #20]
   1c0aa:	3324      	adds	r3, #36	; 0x24
   1c0ac:	687a      	ldr	r2, [r7, #4]
   1c0ae:	68b9      	ldr	r1, [r7, #8]
   1c0b0:	0018      	movs	r0, r3
   1c0b2:	4b07      	ldr	r3, [pc, #28]	; (1c0d0 <vQueueWaitForMessageRestricted+0x70>)
   1c0b4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c0b6:	697b      	ldr	r3, [r7, #20]
   1c0b8:	0018      	movs	r0, r3
   1c0ba:	4b06      	ldr	r3, [pc, #24]	; (1c0d4 <vQueueWaitForMessageRestricted+0x74>)
   1c0bc:	4798      	blx	r3
	}
   1c0be:	46c0      	nop			; (mov r8, r8)
   1c0c0:	46bd      	mov	sp, r7
   1c0c2:	b006      	add	sp, #24
   1c0c4:	bd80      	pop	{r7, pc}
   1c0c6:	46c0      	nop			; (mov r8, r8)
   1c0c8:	0001a609 	.word	0x0001a609
   1c0cc:	0001a62d 	.word	0x0001a62d
   1c0d0:	0001cdb9 	.word	0x0001cdb9
   1c0d4:	0001bf05 	.word	0x0001bf05

0001c0d8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c0d8:	b5b0      	push	{r4, r5, r7, lr}
   1c0da:	b086      	sub	sp, #24
   1c0dc:	af00      	add	r7, sp, #0
   1c0de:	6078      	str	r0, [r7, #4]
   1c0e0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c0e2:	687b      	ldr	r3, [r7, #4]
   1c0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c0e8:	2300      	movs	r3, #0
   1c0ea:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c0ec:	693b      	ldr	r3, [r7, #16]
   1c0ee:	2b00      	cmp	r3, #0
   1c0f0:	d101      	bne.n	1c0f6 <prvNotifyQueueSetContainer+0x1e>
   1c0f2:	b672      	cpsid	i
   1c0f4:	e7fe      	b.n	1c0f4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c0f6:	693b      	ldr	r3, [r7, #16]
   1c0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c0fa:	693b      	ldr	r3, [r7, #16]
   1c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c0fe:	429a      	cmp	r2, r3
   1c100:	d301      	bcc.n	1c106 <prvNotifyQueueSetContainer+0x2e>
   1c102:	b672      	cpsid	i
   1c104:	e7fe      	b.n	1c104 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c106:	693b      	ldr	r3, [r7, #16]
   1c108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c10a:	693b      	ldr	r3, [r7, #16]
   1c10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c10e:	429a      	cmp	r2, r3
   1c110:	d300      	bcc.n	1c114 <prvNotifyQueueSetContainer+0x3c>
   1c112:	e08b      	b.n	1c22c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c114:	230f      	movs	r3, #15
   1c116:	18fb      	adds	r3, r7, r3
   1c118:	693a      	ldr	r2, [r7, #16]
   1c11a:	2145      	movs	r1, #69	; 0x45
   1c11c:	5c52      	ldrb	r2, [r2, r1]
   1c11e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c120:	4b45      	ldr	r3, [pc, #276]	; (1c238 <prvNotifyQueueSetContainer+0x160>)
   1c122:	4798      	blx	r3
   1c124:	0003      	movs	r3, r0
   1c126:	0018      	movs	r0, r3
   1c128:	4b44      	ldr	r3, [pc, #272]	; (1c23c <prvNotifyQueueSetContainer+0x164>)
   1c12a:	4798      	blx	r3
   1c12c:	0003      	movs	r3, r0
   1c12e:	001a      	movs	r2, r3
   1c130:	4b43      	ldr	r3, [pc, #268]	; (1c240 <prvNotifyQueueSetContainer+0x168>)
   1c132:	881b      	ldrh	r3, [r3, #0]
   1c134:	4013      	ands	r3, r2
   1c136:	b29b      	uxth	r3, r3
   1c138:	2b00      	cmp	r3, #0
   1c13a:	d02e      	beq.n	1c19a <prvNotifyQueueSetContainer+0xc2>
   1c13c:	693b      	ldr	r3, [r7, #16]
   1c13e:	0018      	movs	r0, r3
   1c140:	4b40      	ldr	r3, [pc, #256]	; (1c244 <prvNotifyQueueSetContainer+0x16c>)
   1c142:	4798      	blx	r3
   1c144:	0003      	movs	r3, r0
   1c146:	001a      	movs	r2, r3
   1c148:	4b3d      	ldr	r3, [pc, #244]	; (1c240 <prvNotifyQueueSetContainer+0x168>)
   1c14a:	881b      	ldrh	r3, [r3, #0]
   1c14c:	4013      	ands	r3, r2
   1c14e:	b29b      	uxth	r3, r3
   1c150:	2b00      	cmp	r3, #0
   1c152:	d022      	beq.n	1c19a <prvNotifyQueueSetContainer+0xc2>
   1c154:	683b      	ldr	r3, [r7, #0]
   1c156:	2b00      	cmp	r3, #0
   1c158:	d10b      	bne.n	1c172 <prvNotifyQueueSetContainer+0x9a>
   1c15a:	693b      	ldr	r3, [r7, #16]
   1c15c:	0018      	movs	r0, r3
   1c15e:	4b3a      	ldr	r3, [pc, #232]	; (1c248 <prvNotifyQueueSetContainer+0x170>)
   1c160:	4798      	blx	r3
   1c162:	0003      	movs	r3, r0
   1c164:	001a      	movs	r2, r3
   1c166:	4b39      	ldr	r3, [pc, #228]	; (1c24c <prvNotifyQueueSetContainer+0x174>)
   1c168:	5c9b      	ldrb	r3, [r3, r2]
   1c16a:	3320      	adds	r3, #32
   1c16c:	b2db      	uxtb	r3, r3
   1c16e:	001d      	movs	r5, r3
   1c170:	e000      	b.n	1c174 <prvNotifyQueueSetContainer+0x9c>
   1c172:	2525      	movs	r5, #37	; 0x25
   1c174:	693b      	ldr	r3, [r7, #16]
   1c176:	0018      	movs	r0, r3
   1c178:	4b33      	ldr	r3, [pc, #204]	; (1c248 <prvNotifyQueueSetContainer+0x170>)
   1c17a:	4798      	blx	r3
   1c17c:	0003      	movs	r3, r0
   1c17e:	001a      	movs	r2, r3
   1c180:	4b32      	ldr	r3, [pc, #200]	; (1c24c <prvNotifyQueueSetContainer+0x174>)
   1c182:	5c9c      	ldrb	r4, [r3, r2]
   1c184:	693b      	ldr	r3, [r7, #16]
   1c186:	0018      	movs	r0, r3
   1c188:	4b31      	ldr	r3, [pc, #196]	; (1c250 <prvNotifyQueueSetContainer+0x178>)
   1c18a:	4798      	blx	r3
   1c18c:	0003      	movs	r3, r0
   1c18e:	b2db      	uxtb	r3, r3
   1c190:	001a      	movs	r2, r3
   1c192:	0021      	movs	r1, r4
   1c194:	0028      	movs	r0, r5
   1c196:	4b2f      	ldr	r3, [pc, #188]	; (1c254 <prvNotifyQueueSetContainer+0x17c>)
   1c198:	4798      	blx	r3
   1c19a:	693b      	ldr	r3, [r7, #16]
   1c19c:	0018      	movs	r0, r3
   1c19e:	4b2a      	ldr	r3, [pc, #168]	; (1c248 <prvNotifyQueueSetContainer+0x170>)
   1c1a0:	4798      	blx	r3
   1c1a2:	0003      	movs	r3, r0
   1c1a4:	001a      	movs	r2, r3
   1c1a6:	4b29      	ldr	r3, [pc, #164]	; (1c24c <prvNotifyQueueSetContainer+0x174>)
   1c1a8:	5c9c      	ldrb	r4, [r3, r2]
   1c1aa:	693b      	ldr	r3, [r7, #16]
   1c1ac:	0018      	movs	r0, r3
   1c1ae:	4b28      	ldr	r3, [pc, #160]	; (1c250 <prvNotifyQueueSetContainer+0x178>)
   1c1b0:	4798      	blx	r3
   1c1b2:	0003      	movs	r3, r0
   1c1b4:	b2dd      	uxtb	r5, r3
   1c1b6:	693b      	ldr	r3, [r7, #16]
   1c1b8:	0018      	movs	r0, r3
   1c1ba:	4b23      	ldr	r3, [pc, #140]	; (1c248 <prvNotifyQueueSetContainer+0x170>)
   1c1bc:	4798      	blx	r3
   1c1be:	0003      	movs	r3, r0
   1c1c0:	001a      	movs	r2, r3
   1c1c2:	4b22      	ldr	r3, [pc, #136]	; (1c24c <prvNotifyQueueSetContainer+0x174>)
   1c1c4:	5c9b      	ldrb	r3, [r3, r2]
   1c1c6:	2b02      	cmp	r3, #2
   1c1c8:	d005      	beq.n	1c1d6 <prvNotifyQueueSetContainer+0xfe>
   1c1ca:	693b      	ldr	r3, [r7, #16]
   1c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c1ce:	b2db      	uxtb	r3, r3
   1c1d0:	3301      	adds	r3, #1
   1c1d2:	b2db      	uxtb	r3, r3
   1c1d4:	e000      	b.n	1c1d8 <prvNotifyQueueSetContainer+0x100>
   1c1d6:	2300      	movs	r3, #0
   1c1d8:	001a      	movs	r2, r3
   1c1da:	0029      	movs	r1, r5
   1c1dc:	0020      	movs	r0, r4
   1c1de:	4b1e      	ldr	r3, [pc, #120]	; (1c258 <prvNotifyQueueSetContainer+0x180>)
   1c1e0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c1e2:	683a      	ldr	r2, [r7, #0]
   1c1e4:	1d39      	adds	r1, r7, #4
   1c1e6:	693b      	ldr	r3, [r7, #16]
   1c1e8:	0018      	movs	r0, r3
   1c1ea:	4b1c      	ldr	r3, [pc, #112]	; (1c25c <prvNotifyQueueSetContainer+0x184>)
   1c1ec:	4798      	blx	r3
   1c1ee:	0003      	movs	r3, r0
   1c1f0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c1f2:	230f      	movs	r3, #15
   1c1f4:	18fb      	adds	r3, r7, r3
   1c1f6:	781b      	ldrb	r3, [r3, #0]
   1c1f8:	b25b      	sxtb	r3, r3
   1c1fa:	3301      	adds	r3, #1
   1c1fc:	d10d      	bne.n	1c21a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c1fe:	693b      	ldr	r3, [r7, #16]
   1c200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c202:	2b00      	cmp	r3, #0
   1c204:	d012      	beq.n	1c22c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c206:	693b      	ldr	r3, [r7, #16]
   1c208:	3324      	adds	r3, #36	; 0x24
   1c20a:	0018      	movs	r0, r3
   1c20c:	4b14      	ldr	r3, [pc, #80]	; (1c260 <prvNotifyQueueSetContainer+0x188>)
   1c20e:	4798      	blx	r3
   1c210:	1e03      	subs	r3, r0, #0
   1c212:	d00b      	beq.n	1c22c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c214:	2301      	movs	r3, #1
   1c216:	617b      	str	r3, [r7, #20]
   1c218:	e008      	b.n	1c22c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c21a:	230f      	movs	r3, #15
   1c21c:	18fb      	adds	r3, r7, r3
   1c21e:	781b      	ldrb	r3, [r3, #0]
   1c220:	3301      	adds	r3, #1
   1c222:	b2db      	uxtb	r3, r3
   1c224:	b259      	sxtb	r1, r3
   1c226:	693b      	ldr	r3, [r7, #16]
   1c228:	2245      	movs	r2, #69	; 0x45
   1c22a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c22c:	697b      	ldr	r3, [r7, #20]
	}
   1c22e:	0018      	movs	r0, r3
   1c230:	46bd      	mov	sp, r7
   1c232:	b006      	add	sp, #24
   1c234:	bdb0      	pop	{r4, r5, r7, pc}
   1c236:	46c0      	nop			; (mov r8, r8)
   1c238:	000188a1 	.word	0x000188a1
   1c23c:	00018605 	.word	0x00018605
   1c240:	20000110 	.word	0x20000110
   1c244:	000186c5 	.word	0x000186c5
   1c248:	000185c5 	.word	0x000185c5
   1c24c:	20000104 	.word	0x20000104
   1c250:	000186a5 	.word	0x000186a5
   1c254:	00018ffd 	.word	0x00018ffd
   1c258:	00019659 	.word	0x00019659
   1c25c:	0001bdd5 	.word	0x0001bdd5
   1c260:	0001ce99 	.word	0x0001ce99

0001c264 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c264:	b590      	push	{r4, r7, lr}
   1c266:	b08d      	sub	sp, #52	; 0x34
   1c268:	af04      	add	r7, sp, #16
   1c26a:	60f8      	str	r0, [r7, #12]
   1c26c:	60b9      	str	r1, [r7, #8]
   1c26e:	603b      	str	r3, [r7, #0]
   1c270:	1dbb      	adds	r3, r7, #6
   1c272:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c274:	1dbb      	adds	r3, r7, #6
   1c276:	881b      	ldrh	r3, [r3, #0]
   1c278:	009b      	lsls	r3, r3, #2
   1c27a:	0018      	movs	r0, r3
   1c27c:	4b1d      	ldr	r3, [pc, #116]	; (1c2f4 <xTaskCreate+0x90>)
   1c27e:	4798      	blx	r3
   1c280:	0003      	movs	r3, r0
   1c282:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c284:	697b      	ldr	r3, [r7, #20]
   1c286:	2b00      	cmp	r3, #0
   1c288:	d010      	beq.n	1c2ac <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c28a:	2054      	movs	r0, #84	; 0x54
   1c28c:	4b19      	ldr	r3, [pc, #100]	; (1c2f4 <xTaskCreate+0x90>)
   1c28e:	4798      	blx	r3
   1c290:	0003      	movs	r3, r0
   1c292:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c294:	69fb      	ldr	r3, [r7, #28]
   1c296:	2b00      	cmp	r3, #0
   1c298:	d003      	beq.n	1c2a2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c29a:	69fb      	ldr	r3, [r7, #28]
   1c29c:	697a      	ldr	r2, [r7, #20]
   1c29e:	631a      	str	r2, [r3, #48]	; 0x30
   1c2a0:	e006      	b.n	1c2b0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c2a2:	697b      	ldr	r3, [r7, #20]
   1c2a4:	0018      	movs	r0, r3
   1c2a6:	4b14      	ldr	r3, [pc, #80]	; (1c2f8 <xTaskCreate+0x94>)
   1c2a8:	4798      	blx	r3
   1c2aa:	e001      	b.n	1c2b0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c2ac:	2300      	movs	r3, #0
   1c2ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c2b0:	69fb      	ldr	r3, [r7, #28]
   1c2b2:	2b00      	cmp	r3, #0
   1c2b4:	d016      	beq.n	1c2e4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c2b6:	1dbb      	adds	r3, r7, #6
   1c2b8:	881a      	ldrh	r2, [r3, #0]
   1c2ba:	683c      	ldr	r4, [r7, #0]
   1c2bc:	68b9      	ldr	r1, [r7, #8]
   1c2be:	68f8      	ldr	r0, [r7, #12]
   1c2c0:	2300      	movs	r3, #0
   1c2c2:	9303      	str	r3, [sp, #12]
   1c2c4:	69fb      	ldr	r3, [r7, #28]
   1c2c6:	9302      	str	r3, [sp, #8]
   1c2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c2ca:	9301      	str	r3, [sp, #4]
   1c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2ce:	9300      	str	r3, [sp, #0]
   1c2d0:	0023      	movs	r3, r4
   1c2d2:	4c0a      	ldr	r4, [pc, #40]	; (1c2fc <xTaskCreate+0x98>)
   1c2d4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c2d6:	69fb      	ldr	r3, [r7, #28]
   1c2d8:	0018      	movs	r0, r3
   1c2da:	4b09      	ldr	r3, [pc, #36]	; (1c300 <xTaskCreate+0x9c>)
   1c2dc:	4798      	blx	r3
			xReturn = pdPASS;
   1c2de:	2301      	movs	r3, #1
   1c2e0:	61bb      	str	r3, [r7, #24]
   1c2e2:	e002      	b.n	1c2ea <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c2e4:	2301      	movs	r3, #1
   1c2e6:	425b      	negs	r3, r3
   1c2e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c2ea:	69bb      	ldr	r3, [r7, #24]
	}
   1c2ec:	0018      	movs	r0, r3
   1c2ee:	46bd      	mov	sp, r7
   1c2f0:	b009      	add	sp, #36	; 0x24
   1c2f2:	bd90      	pop	{r4, r7, pc}
   1c2f4:	0001a741 	.word	0x0001a741
   1c2f8:	0001a805 	.word	0x0001a805
   1c2fc:	0001c305 	.word	0x0001c305
   1c300:	0001c415 	.word	0x0001c415

0001c304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c304:	b580      	push	{r7, lr}
   1c306:	b086      	sub	sp, #24
   1c308:	af00      	add	r7, sp, #0
   1c30a:	60f8      	str	r0, [r7, #12]
   1c30c:	60b9      	str	r1, [r7, #8]
   1c30e:	607a      	str	r2, [r7, #4]
   1c310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c314:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c316:	687b      	ldr	r3, [r7, #4]
   1c318:	009b      	lsls	r3, r3, #2
   1c31a:	001a      	movs	r2, r3
   1c31c:	21a5      	movs	r1, #165	; 0xa5
   1c31e:	4b39      	ldr	r3, [pc, #228]	; (1c404 <prvInitialiseNewTask+0x100>)
   1c320:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c326:	687b      	ldr	r3, [r7, #4]
   1c328:	4937      	ldr	r1, [pc, #220]	; (1c408 <prvInitialiseNewTask+0x104>)
   1c32a:	468c      	mov	ip, r1
   1c32c:	4463      	add	r3, ip
   1c32e:	009b      	lsls	r3, r3, #2
   1c330:	18d3      	adds	r3, r2, r3
   1c332:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c334:	693b      	ldr	r3, [r7, #16]
   1c336:	2207      	movs	r2, #7
   1c338:	4393      	bics	r3, r2
   1c33a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c33c:	693b      	ldr	r3, [r7, #16]
   1c33e:	2207      	movs	r2, #7
   1c340:	4013      	ands	r3, r2
   1c342:	d001      	beq.n	1c348 <prvInitialiseNewTask+0x44>
   1c344:	b672      	cpsid	i
   1c346:	e7fe      	b.n	1c346 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c348:	2300      	movs	r3, #0
   1c34a:	617b      	str	r3, [r7, #20]
   1c34c:	e013      	b.n	1c376 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c34e:	68ba      	ldr	r2, [r7, #8]
   1c350:	697b      	ldr	r3, [r7, #20]
   1c352:	18d3      	adds	r3, r2, r3
   1c354:	7818      	ldrb	r0, [r3, #0]
   1c356:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c358:	2134      	movs	r1, #52	; 0x34
   1c35a:	697b      	ldr	r3, [r7, #20]
   1c35c:	18d3      	adds	r3, r2, r3
   1c35e:	185b      	adds	r3, r3, r1
   1c360:	1c02      	adds	r2, r0, #0
   1c362:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c364:	68ba      	ldr	r2, [r7, #8]
   1c366:	697b      	ldr	r3, [r7, #20]
   1c368:	18d3      	adds	r3, r2, r3
   1c36a:	781b      	ldrb	r3, [r3, #0]
   1c36c:	2b00      	cmp	r3, #0
   1c36e:	d006      	beq.n	1c37e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c370:	697b      	ldr	r3, [r7, #20]
   1c372:	3301      	adds	r3, #1
   1c374:	617b      	str	r3, [r7, #20]
   1c376:	697b      	ldr	r3, [r7, #20]
   1c378:	2b07      	cmp	r3, #7
   1c37a:	d9e8      	bls.n	1c34e <prvInitialiseNewTask+0x4a>
   1c37c:	e000      	b.n	1c380 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c37e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c382:	223b      	movs	r2, #59	; 0x3b
   1c384:	2100      	movs	r1, #0
   1c386:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c388:	6a3b      	ldr	r3, [r7, #32]
   1c38a:	2b04      	cmp	r3, #4
   1c38c:	d901      	bls.n	1c392 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c38e:	2304      	movs	r3, #4
   1c390:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c394:	6a3a      	ldr	r2, [r7, #32]
   1c396:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c39a:	6a3a      	ldr	r2, [r7, #32]
   1c39c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3a0:	2200      	movs	r2, #0
   1c3a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3a6:	3304      	adds	r3, #4
   1c3a8:	0018      	movs	r0, r3
   1c3aa:	4b18      	ldr	r3, [pc, #96]	; (1c40c <prvInitialiseNewTask+0x108>)
   1c3ac:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3b0:	3318      	adds	r3, #24
   1c3b2:	0018      	movs	r0, r3
   1c3b4:	4b15      	ldr	r3, [pc, #84]	; (1c40c <prvInitialiseNewTask+0x108>)
   1c3b6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c3bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c3be:	6a3b      	ldr	r3, [r7, #32]
   1c3c0:	2205      	movs	r2, #5
   1c3c2:	1ad2      	subs	r2, r2, r3
   1c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c3cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3d0:	2200      	movs	r2, #0
   1c3d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3d6:	2250      	movs	r2, #80	; 0x50
   1c3d8:	2100      	movs	r1, #0
   1c3da:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c3dc:	683a      	ldr	r2, [r7, #0]
   1c3de:	68f9      	ldr	r1, [r7, #12]
   1c3e0:	693b      	ldr	r3, [r7, #16]
   1c3e2:	0018      	movs	r0, r3
   1c3e4:	4b0a      	ldr	r3, [pc, #40]	; (1c410 <prvInitialiseNewTask+0x10c>)
   1c3e6:	4798      	blx	r3
   1c3e8:	0002      	movs	r2, r0
   1c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3f0:	2b00      	cmp	r3, #0
   1c3f2:	d002      	beq.n	1c3fa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c3f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c3fa:	46c0      	nop			; (mov r8, r8)
   1c3fc:	46bd      	mov	sp, r7
   1c3fe:	b006      	add	sp, #24
   1c400:	bd80      	pop	{r7, pc}
   1c402:	46c0      	nop			; (mov r8, r8)
   1c404:	00034e13 	.word	0x00034e13
   1c408:	3fffffff 	.word	0x3fffffff
   1c40c:	0001a3b9 	.word	0x0001a3b9
   1c410:	0001a4d1 	.word	0x0001a4d1

0001c414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c414:	b580      	push	{r7, lr}
   1c416:	b082      	sub	sp, #8
   1c418:	af00      	add	r7, sp, #0
   1c41a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c41c:	4b60      	ldr	r3, [pc, #384]	; (1c5a0 <prvAddNewTaskToReadyList+0x18c>)
   1c41e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1c420:	4b60      	ldr	r3, [pc, #384]	; (1c5a4 <prvAddNewTaskToReadyList+0x190>)
   1c422:	681b      	ldr	r3, [r3, #0]
   1c424:	1c5a      	adds	r2, r3, #1
   1c426:	4b5f      	ldr	r3, [pc, #380]	; (1c5a4 <prvAddNewTaskToReadyList+0x190>)
   1c428:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1c42a:	4b5f      	ldr	r3, [pc, #380]	; (1c5a8 <prvAddNewTaskToReadyList+0x194>)
   1c42c:	681b      	ldr	r3, [r3, #0]
   1c42e:	2b00      	cmp	r3, #0
   1c430:	d109      	bne.n	1c446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c432:	4b5d      	ldr	r3, [pc, #372]	; (1c5a8 <prvAddNewTaskToReadyList+0x194>)
   1c434:	687a      	ldr	r2, [r7, #4]
   1c436:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c438:	4b5a      	ldr	r3, [pc, #360]	; (1c5a4 <prvAddNewTaskToReadyList+0x190>)
   1c43a:	681b      	ldr	r3, [r3, #0]
   1c43c:	2b01      	cmp	r3, #1
   1c43e:	d110      	bne.n	1c462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c440:	4b5a      	ldr	r3, [pc, #360]	; (1c5ac <prvAddNewTaskToReadyList+0x198>)
   1c442:	4798      	blx	r3
   1c444:	e00d      	b.n	1c462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c446:	4b5a      	ldr	r3, [pc, #360]	; (1c5b0 <prvAddNewTaskToReadyList+0x19c>)
   1c448:	681b      	ldr	r3, [r3, #0]
   1c44a:	2b00      	cmp	r3, #0
   1c44c:	d109      	bne.n	1c462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c44e:	4b56      	ldr	r3, [pc, #344]	; (1c5a8 <prvAddNewTaskToReadyList+0x194>)
   1c450:	681b      	ldr	r3, [r3, #0]
   1c452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c454:	687b      	ldr	r3, [r7, #4]
   1c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c458:	429a      	cmp	r2, r3
   1c45a:	d802      	bhi.n	1c462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c45c:	4b52      	ldr	r3, [pc, #328]	; (1c5a8 <prvAddNewTaskToReadyList+0x194>)
   1c45e:	687a      	ldr	r2, [r7, #4]
   1c460:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c462:	4b54      	ldr	r3, [pc, #336]	; (1c5b4 <prvAddNewTaskToReadyList+0x1a0>)
   1c464:	681b      	ldr	r3, [r3, #0]
   1c466:	1c5a      	adds	r2, r3, #1
   1c468:	4b52      	ldr	r3, [pc, #328]	; (1c5b4 <prvAddNewTaskToReadyList+0x1a0>)
   1c46a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1c46c:	4b51      	ldr	r3, [pc, #324]	; (1c5b4 <prvAddNewTaskToReadyList+0x1a0>)
   1c46e:	681a      	ldr	r2, [r3, #0]
   1c470:	687b      	ldr	r3, [r7, #4]
   1c472:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1c474:	687b      	ldr	r3, [r7, #4]
   1c476:	2b00      	cmp	r3, #0
   1c478:	d052      	beq.n	1c520 <prvAddNewTaskToReadyList+0x10c>
   1c47a:	2003      	movs	r0, #3
   1c47c:	4b4e      	ldr	r3, [pc, #312]	; (1c5b8 <prvAddNewTaskToReadyList+0x1a4>)
   1c47e:	4798      	blx	r3
   1c480:	0003      	movs	r3, r0
   1c482:	b29a      	uxth	r2, r3
   1c484:	687b      	ldr	r3, [r7, #4]
   1c486:	0011      	movs	r1, r2
   1c488:	0018      	movs	r0, r3
   1c48a:	4b4c      	ldr	r3, [pc, #304]	; (1c5bc <prvAddNewTaskToReadyList+0x1a8>)
   1c48c:	4798      	blx	r3
   1c48e:	4b4c      	ldr	r3, [pc, #304]	; (1c5c0 <prvAddNewTaskToReadyList+0x1ac>)
   1c490:	881a      	ldrh	r2, [r3, #0]
   1c492:	687b      	ldr	r3, [r7, #4]
   1c494:	0011      	movs	r1, r2
   1c496:	0018      	movs	r0, r3
   1c498:	4b4a      	ldr	r3, [pc, #296]	; (1c5c4 <prvAddNewTaskToReadyList+0x1b0>)
   1c49a:	4798      	blx	r3
   1c49c:	687b      	ldr	r3, [r7, #4]
   1c49e:	0018      	movs	r0, r3
   1c4a0:	4b49      	ldr	r3, [pc, #292]	; (1c5c8 <prvAddNewTaskToReadyList+0x1b4>)
   1c4a2:	4798      	blx	r3
   1c4a4:	0003      	movs	r3, r0
   1c4a6:	b2d9      	uxtb	r1, r3
   1c4a8:	687b      	ldr	r3, [r7, #4]
   1c4aa:	3334      	adds	r3, #52	; 0x34
   1c4ac:	001a      	movs	r2, r3
   1c4ae:	2003      	movs	r0, #3
   1c4b0:	4b46      	ldr	r3, [pc, #280]	; (1c5cc <prvAddNewTaskToReadyList+0x1b8>)
   1c4b2:	4798      	blx	r3
   1c4b4:	687b      	ldr	r3, [r7, #4]
   1c4b6:	0018      	movs	r0, r3
   1c4b8:	4b43      	ldr	r3, [pc, #268]	; (1c5c8 <prvAddNewTaskToReadyList+0x1b4>)
   1c4ba:	4798      	blx	r3
   1c4bc:	0003      	movs	r3, r0
   1c4be:	b2d9      	uxtb	r1, r3
   1c4c0:	687b      	ldr	r3, [r7, #4]
   1c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c4c4:	b2db      	uxtb	r3, r3
   1c4c6:	001a      	movs	r2, r3
   1c4c8:	2003      	movs	r0, #3
   1c4ca:	4b41      	ldr	r3, [pc, #260]	; (1c5d0 <prvAddNewTaskToReadyList+0x1bc>)
   1c4cc:	4798      	blx	r3
   1c4ce:	4b41      	ldr	r3, [pc, #260]	; (1c5d4 <prvAddNewTaskToReadyList+0x1c0>)
   1c4d0:	4798      	blx	r3
   1c4d2:	0003      	movs	r3, r0
   1c4d4:	0018      	movs	r0, r3
   1c4d6:	4b40      	ldr	r3, [pc, #256]	; (1c5d8 <prvAddNewTaskToReadyList+0x1c4>)
   1c4d8:	4798      	blx	r3
   1c4da:	0003      	movs	r3, r0
   1c4dc:	001a      	movs	r2, r3
   1c4de:	4b3f      	ldr	r3, [pc, #252]	; (1c5dc <prvAddNewTaskToReadyList+0x1c8>)
   1c4e0:	881b      	ldrh	r3, [r3, #0]
   1c4e2:	4013      	ands	r3, r2
   1c4e4:	b29b      	uxth	r3, r3
   1c4e6:	2b00      	cmp	r3, #0
   1c4e8:	d016      	beq.n	1c518 <prvAddNewTaskToReadyList+0x104>
   1c4ea:	687b      	ldr	r3, [r7, #4]
   1c4ec:	0018      	movs	r0, r3
   1c4ee:	4b3a      	ldr	r3, [pc, #232]	; (1c5d8 <prvAddNewTaskToReadyList+0x1c4>)
   1c4f0:	4798      	blx	r3
   1c4f2:	0003      	movs	r3, r0
   1c4f4:	001a      	movs	r2, r3
   1c4f6:	4b39      	ldr	r3, [pc, #228]	; (1c5dc <prvAddNewTaskToReadyList+0x1c8>)
   1c4f8:	881b      	ldrh	r3, [r3, #0]
   1c4fa:	4013      	ands	r3, r2
   1c4fc:	b29b      	uxth	r3, r3
   1c4fe:	2b00      	cmp	r3, #0
   1c500:	d00a      	beq.n	1c518 <prvAddNewTaskToReadyList+0x104>
   1c502:	687b      	ldr	r3, [r7, #4]
   1c504:	0018      	movs	r0, r3
   1c506:	4b30      	ldr	r3, [pc, #192]	; (1c5c8 <prvAddNewTaskToReadyList+0x1b4>)
   1c508:	4798      	blx	r3
   1c50a:	0003      	movs	r3, r0
   1c50c:	b2db      	uxtb	r3, r3
   1c50e:	001a      	movs	r2, r3
   1c510:	2103      	movs	r1, #3
   1c512:	201b      	movs	r0, #27
   1c514:	4b32      	ldr	r3, [pc, #200]	; (1c5e0 <prvAddNewTaskToReadyList+0x1cc>)
   1c516:	4798      	blx	r3
   1c518:	687b      	ldr	r3, [r7, #4]
   1c51a:	0018      	movs	r0, r3
   1c51c:	4b31      	ldr	r3, [pc, #196]	; (1c5e4 <prvAddNewTaskToReadyList+0x1d0>)
   1c51e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1c520:	687b      	ldr	r3, [r7, #4]
   1c522:	0018      	movs	r0, r3
   1c524:	4b2c      	ldr	r3, [pc, #176]	; (1c5d8 <prvAddNewTaskToReadyList+0x1c4>)
   1c526:	4798      	blx	r3
   1c528:	0003      	movs	r3, r0
   1c52a:	001a      	movs	r2, r3
   1c52c:	4b2b      	ldr	r3, [pc, #172]	; (1c5dc <prvAddNewTaskToReadyList+0x1c8>)
   1c52e:	881b      	ldrh	r3, [r3, #0]
   1c530:	4013      	ands	r3, r2
   1c532:	b29b      	uxth	r3, r3
   1c534:	2b00      	cmp	r3, #0
   1c536:	d008      	beq.n	1c54a <prvAddNewTaskToReadyList+0x136>
   1c538:	687b      	ldr	r3, [r7, #4]
   1c53a:	0018      	movs	r0, r3
   1c53c:	4b22      	ldr	r3, [pc, #136]	; (1c5c8 <prvAddNewTaskToReadyList+0x1b4>)
   1c53e:	4798      	blx	r3
   1c540:	0003      	movs	r3, r0
   1c542:	b2db      	uxtb	r3, r3
   1c544:	0018      	movs	r0, r3
   1c546:	4b28      	ldr	r3, [pc, #160]	; (1c5e8 <prvAddNewTaskToReadyList+0x1d4>)
   1c548:	4798      	blx	r3
   1c54a:	687b      	ldr	r3, [r7, #4]
   1c54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c54e:	4b27      	ldr	r3, [pc, #156]	; (1c5ec <prvAddNewTaskToReadyList+0x1d8>)
   1c550:	681b      	ldr	r3, [r3, #0]
   1c552:	429a      	cmp	r2, r3
   1c554:	d903      	bls.n	1c55e <prvAddNewTaskToReadyList+0x14a>
   1c556:	687b      	ldr	r3, [r7, #4]
   1c558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c55a:	4b24      	ldr	r3, [pc, #144]	; (1c5ec <prvAddNewTaskToReadyList+0x1d8>)
   1c55c:	601a      	str	r2, [r3, #0]
   1c55e:	687b      	ldr	r3, [r7, #4]
   1c560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c562:	0013      	movs	r3, r2
   1c564:	009b      	lsls	r3, r3, #2
   1c566:	189b      	adds	r3, r3, r2
   1c568:	009b      	lsls	r3, r3, #2
   1c56a:	4a21      	ldr	r2, [pc, #132]	; (1c5f0 <prvAddNewTaskToReadyList+0x1dc>)
   1c56c:	189a      	adds	r2, r3, r2
   1c56e:	687b      	ldr	r3, [r7, #4]
   1c570:	3304      	adds	r3, #4
   1c572:	0019      	movs	r1, r3
   1c574:	0010      	movs	r0, r2
   1c576:	4b1f      	ldr	r3, [pc, #124]	; (1c5f4 <prvAddNewTaskToReadyList+0x1e0>)
   1c578:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c57a:	4b1f      	ldr	r3, [pc, #124]	; (1c5f8 <prvAddNewTaskToReadyList+0x1e4>)
   1c57c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c57e:	4b0c      	ldr	r3, [pc, #48]	; (1c5b0 <prvAddNewTaskToReadyList+0x19c>)
   1c580:	681b      	ldr	r3, [r3, #0]
   1c582:	2b00      	cmp	r3, #0
   1c584:	d008      	beq.n	1c598 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c586:	4b08      	ldr	r3, [pc, #32]	; (1c5a8 <prvAddNewTaskToReadyList+0x194>)
   1c588:	681b      	ldr	r3, [r3, #0]
   1c58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c58c:	687b      	ldr	r3, [r7, #4]
   1c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c590:	429a      	cmp	r2, r3
   1c592:	d201      	bcs.n	1c598 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c594:	4b19      	ldr	r3, [pc, #100]	; (1c5fc <prvAddNewTaskToReadyList+0x1e8>)
   1c596:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c598:	46c0      	nop			; (mov r8, r8)
   1c59a:	46bd      	mov	sp, r7
   1c59c:	b002      	add	sp, #8
   1c59e:	bd80      	pop	{r7, pc}
   1c5a0:	0001a609 	.word	0x0001a609
   1c5a4:	200041b0 	.word	0x200041b0
   1c5a8:	200040d8 	.word	0x200040d8
   1c5ac:	0001d135 	.word	0x0001d135
   1c5b0:	200041bc 	.word	0x200041bc
   1c5b4:	200041cc 	.word	0x200041cc
   1c5b8:	00019b85 	.word	0x00019b85
   1c5bc:	00018629 	.word	0x00018629
   1c5c0:	20000112 	.word	0x20000112
   1c5c4:	00018665 	.word	0x00018665
   1c5c8:	000185e5 	.word	0x000185e5
   1c5cc:	00019db5 	.word	0x00019db5
   1c5d0:	00019519 	.word	0x00019519
   1c5d4:	000188a1 	.word	0x000188a1
   1c5d8:	00018605 	.word	0x00018605
   1c5dc:	20000110 	.word	0x20000110
   1c5e0:	00018ffd 	.word	0x00018ffd
   1c5e4:	00018765 	.word	0x00018765
   1c5e8:	00018db5 	.word	0x00018db5
   1c5ec:	200041b8 	.word	0x200041b8
   1c5f0:	200040dc 	.word	0x200040dc
   1c5f4:	0001a3cf 	.word	0x0001a3cf
   1c5f8:	0001a62d 	.word	0x0001a62d
   1c5fc:	0001a5f1 	.word	0x0001a5f1

0001c600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c600:	b580      	push	{r7, lr}
   1c602:	b084      	sub	sp, #16
   1c604:	af00      	add	r7, sp, #0
   1c606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c608:	2300      	movs	r3, #0
   1c60a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c60c:	687b      	ldr	r3, [r7, #4]
   1c60e:	2b00      	cmp	r3, #0
   1c610:	d045      	beq.n	1c69e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c612:	4b27      	ldr	r3, [pc, #156]	; (1c6b0 <vTaskDelay+0xb0>)
   1c614:	681b      	ldr	r3, [r3, #0]
   1c616:	2b00      	cmp	r3, #0
   1c618:	d001      	beq.n	1c61e <vTaskDelay+0x1e>
   1c61a:	b672      	cpsid	i
   1c61c:	e7fe      	b.n	1c61c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c61e:	4b25      	ldr	r3, [pc, #148]	; (1c6b4 <vTaskDelay+0xb4>)
   1c620:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c622:	4b25      	ldr	r3, [pc, #148]	; (1c6b8 <vTaskDelay+0xb8>)
   1c624:	681b      	ldr	r3, [r3, #0]
   1c626:	0018      	movs	r0, r3
   1c628:	4b24      	ldr	r3, [pc, #144]	; (1c6bc <vTaskDelay+0xbc>)
   1c62a:	4798      	blx	r3
   1c62c:	0003      	movs	r3, r0
   1c62e:	001a      	movs	r2, r3
   1c630:	4b23      	ldr	r3, [pc, #140]	; (1c6c0 <vTaskDelay+0xc0>)
   1c632:	881b      	ldrh	r3, [r3, #0]
   1c634:	4013      	ands	r3, r2
   1c636:	b29b      	uxth	r3, r3
   1c638:	2b00      	cmp	r3, #0
   1c63a:	d00e      	beq.n	1c65a <vTaskDelay+0x5a>
   1c63c:	687b      	ldr	r3, [r7, #4]
   1c63e:	0019      	movs	r1, r3
   1c640:	2089      	movs	r0, #137	; 0x89
   1c642:	4b20      	ldr	r3, [pc, #128]	; (1c6c4 <vTaskDelay+0xc4>)
   1c644:	4798      	blx	r3
   1c646:	4b1c      	ldr	r3, [pc, #112]	; (1c6b8 <vTaskDelay+0xb8>)
   1c648:	681b      	ldr	r3, [r3, #0]
   1c64a:	0018      	movs	r0, r3
   1c64c:	4b1e      	ldr	r3, [pc, #120]	; (1c6c8 <vTaskDelay+0xc8>)
   1c64e:	4798      	blx	r3
   1c650:	0003      	movs	r3, r0
   1c652:	b2db      	uxtb	r3, r3
   1c654:	0018      	movs	r0, r3
   1c656:	4b1d      	ldr	r3, [pc, #116]	; (1c6cc <vTaskDelay+0xcc>)
   1c658:	4798      	blx	r3
   1c65a:	4b1d      	ldr	r3, [pc, #116]	; (1c6d0 <vTaskDelay+0xd0>)
   1c65c:	4798      	blx	r3
   1c65e:	0003      	movs	r3, r0
   1c660:	0018      	movs	r0, r3
   1c662:	4b16      	ldr	r3, [pc, #88]	; (1c6bc <vTaskDelay+0xbc>)
   1c664:	4798      	blx	r3
   1c666:	0003      	movs	r3, r0
   1c668:	001a      	movs	r2, r3
   1c66a:	4b15      	ldr	r3, [pc, #84]	; (1c6c0 <vTaskDelay+0xc0>)
   1c66c:	881b      	ldrh	r3, [r3, #0]
   1c66e:	4013      	ands	r3, r2
   1c670:	b29b      	uxth	r3, r3
   1c672:	2b00      	cmp	r3, #0
   1c674:	d00a      	beq.n	1c68c <vTaskDelay+0x8c>
   1c676:	4b16      	ldr	r3, [pc, #88]	; (1c6d0 <vTaskDelay+0xd0>)
   1c678:	4798      	blx	r3
   1c67a:	0003      	movs	r3, r0
   1c67c:	0018      	movs	r0, r3
   1c67e:	4b12      	ldr	r3, [pc, #72]	; (1c6c8 <vTaskDelay+0xc8>)
   1c680:	4798      	blx	r3
   1c682:	0003      	movs	r3, r0
   1c684:	b2db      	uxtb	r3, r3
   1c686:	0018      	movs	r0, r3
   1c688:	4b10      	ldr	r3, [pc, #64]	; (1c6cc <vTaskDelay+0xcc>)
   1c68a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c68c:	687b      	ldr	r3, [r7, #4]
   1c68e:	2100      	movs	r1, #0
   1c690:	0018      	movs	r0, r3
   1c692:	4b10      	ldr	r3, [pc, #64]	; (1c6d4 <vTaskDelay+0xd4>)
   1c694:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c696:	4b10      	ldr	r3, [pc, #64]	; (1c6d8 <vTaskDelay+0xd8>)
   1c698:	4798      	blx	r3
   1c69a:	0003      	movs	r3, r0
   1c69c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c69e:	68fb      	ldr	r3, [r7, #12]
   1c6a0:	2b00      	cmp	r3, #0
   1c6a2:	d101      	bne.n	1c6a8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c6a4:	4b0d      	ldr	r3, [pc, #52]	; (1c6dc <vTaskDelay+0xdc>)
   1c6a6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c6a8:	46c0      	nop			; (mov r8, r8)
   1c6aa:	46bd      	mov	sp, r7
   1c6ac:	b004      	add	sp, #16
   1c6ae:	bd80      	pop	{r7, pc}
   1c6b0:	200041d8 	.word	0x200041d8
   1c6b4:	0001c8c1 	.word	0x0001c8c1
   1c6b8:	200040d8 	.word	0x200040d8
   1c6bc:	00018605 	.word	0x00018605
   1c6c0:	20000110 	.word	0x20000110
   1c6c4:	00019305 	.word	0x00019305
   1c6c8:	000185e5 	.word	0x000185e5
   1c6cc:	00019795 	.word	0x00019795
   1c6d0:	000188a1 	.word	0x000188a1
   1c6d4:	0001d819 	.word	0x0001d819
   1c6d8:	0001c8d9 	.word	0x0001c8d9
   1c6dc:	0001a5f1 	.word	0x0001a5f1

0001c6e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c6e0:	b580      	push	{r7, lr}
   1c6e2:	b084      	sub	sp, #16
   1c6e4:	af00      	add	r7, sp, #0
   1c6e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c6e8:	4b42      	ldr	r3, [pc, #264]	; (1c7f4 <vTaskSuspend+0x114>)
   1c6ea:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c6ec:	687b      	ldr	r3, [r7, #4]
   1c6ee:	2b00      	cmp	r3, #0
   1c6f0:	d102      	bne.n	1c6f8 <vTaskSuspend+0x18>
   1c6f2:	4b41      	ldr	r3, [pc, #260]	; (1c7f8 <vTaskSuspend+0x118>)
   1c6f4:	681b      	ldr	r3, [r3, #0]
   1c6f6:	e000      	b.n	1c6fa <vTaskSuspend+0x1a>
   1c6f8:	687b      	ldr	r3, [r7, #4]
   1c6fa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c6fc:	4b3f      	ldr	r3, [pc, #252]	; (1c7fc <vTaskSuspend+0x11c>)
   1c6fe:	4798      	blx	r3
   1c700:	0003      	movs	r3, r0
   1c702:	0018      	movs	r0, r3
   1c704:	4b3e      	ldr	r3, [pc, #248]	; (1c800 <vTaskSuspend+0x120>)
   1c706:	4798      	blx	r3
   1c708:	0003      	movs	r3, r0
   1c70a:	001a      	movs	r2, r3
   1c70c:	4b3d      	ldr	r3, [pc, #244]	; (1c804 <vTaskSuspend+0x124>)
   1c70e:	881b      	ldrh	r3, [r3, #0]
   1c710:	4013      	ands	r3, r2
   1c712:	b29b      	uxth	r3, r3
   1c714:	2b00      	cmp	r3, #0
   1c716:	d016      	beq.n	1c746 <vTaskSuspend+0x66>
   1c718:	68fb      	ldr	r3, [r7, #12]
   1c71a:	0018      	movs	r0, r3
   1c71c:	4b38      	ldr	r3, [pc, #224]	; (1c800 <vTaskSuspend+0x120>)
   1c71e:	4798      	blx	r3
   1c720:	0003      	movs	r3, r0
   1c722:	001a      	movs	r2, r3
   1c724:	4b37      	ldr	r3, [pc, #220]	; (1c804 <vTaskSuspend+0x124>)
   1c726:	881b      	ldrh	r3, [r3, #0]
   1c728:	4013      	ands	r3, r2
   1c72a:	b29b      	uxth	r3, r3
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d00a      	beq.n	1c746 <vTaskSuspend+0x66>
   1c730:	68fb      	ldr	r3, [r7, #12]
   1c732:	0018      	movs	r0, r3
   1c734:	4b34      	ldr	r3, [pc, #208]	; (1c808 <vTaskSuspend+0x128>)
   1c736:	4798      	blx	r3
   1c738:	0003      	movs	r3, r0
   1c73a:	b2db      	uxtb	r3, r3
   1c73c:	001a      	movs	r2, r3
   1c73e:	2103      	movs	r1, #3
   1c740:	208a      	movs	r0, #138	; 0x8a
   1c742:	4b32      	ldr	r3, [pc, #200]	; (1c80c <vTaskSuspend+0x12c>)
   1c744:	4798      	blx	r3
   1c746:	68fb      	ldr	r3, [r7, #12]
   1c748:	0018      	movs	r0, r3
   1c74a:	4b2f      	ldr	r3, [pc, #188]	; (1c808 <vTaskSuspend+0x128>)
   1c74c:	4798      	blx	r3
   1c74e:	0003      	movs	r3, r0
   1c750:	b2db      	uxtb	r3, r3
   1c752:	0018      	movs	r0, r3
   1c754:	4b2e      	ldr	r3, [pc, #184]	; (1c810 <vTaskSuspend+0x130>)
   1c756:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c758:	68fb      	ldr	r3, [r7, #12]
   1c75a:	3304      	adds	r3, #4
   1c75c:	0018      	movs	r0, r3
   1c75e:	4b2d      	ldr	r3, [pc, #180]	; (1c814 <vTaskSuspend+0x134>)
   1c760:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c762:	68fb      	ldr	r3, [r7, #12]
   1c764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c766:	2b00      	cmp	r3, #0
   1c768:	d004      	beq.n	1c774 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c76a:	68fb      	ldr	r3, [r7, #12]
   1c76c:	3318      	adds	r3, #24
   1c76e:	0018      	movs	r0, r3
   1c770:	4b28      	ldr	r3, [pc, #160]	; (1c814 <vTaskSuspend+0x134>)
   1c772:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c774:	68fb      	ldr	r3, [r7, #12]
   1c776:	1d1a      	adds	r2, r3, #4
   1c778:	4b27      	ldr	r3, [pc, #156]	; (1c818 <vTaskSuspend+0x138>)
   1c77a:	0011      	movs	r1, r2
   1c77c:	0018      	movs	r0, r3
   1c77e:	4b27      	ldr	r3, [pc, #156]	; (1c81c <vTaskSuspend+0x13c>)
   1c780:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c782:	68fb      	ldr	r3, [r7, #12]
   1c784:	2250      	movs	r2, #80	; 0x50
   1c786:	5c9b      	ldrb	r3, [r3, r2]
   1c788:	b2db      	uxtb	r3, r3
   1c78a:	2b01      	cmp	r3, #1
   1c78c:	d103      	bne.n	1c796 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c78e:	68fb      	ldr	r3, [r7, #12]
   1c790:	2250      	movs	r2, #80	; 0x50
   1c792:	2100      	movs	r1, #0
   1c794:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c796:	4b22      	ldr	r3, [pc, #136]	; (1c820 <vTaskSuspend+0x140>)
   1c798:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c79a:	4b22      	ldr	r3, [pc, #136]	; (1c824 <vTaskSuspend+0x144>)
   1c79c:	681b      	ldr	r3, [r3, #0]
   1c79e:	2b00      	cmp	r3, #0
   1c7a0:	d005      	beq.n	1c7ae <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c7a2:	4b14      	ldr	r3, [pc, #80]	; (1c7f4 <vTaskSuspend+0x114>)
   1c7a4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c7a6:	4b20      	ldr	r3, [pc, #128]	; (1c828 <vTaskSuspend+0x148>)
   1c7a8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c7aa:	4b1d      	ldr	r3, [pc, #116]	; (1c820 <vTaskSuspend+0x140>)
   1c7ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c7ae:	4b12      	ldr	r3, [pc, #72]	; (1c7f8 <vTaskSuspend+0x118>)
   1c7b0:	681b      	ldr	r3, [r3, #0]
   1c7b2:	68fa      	ldr	r2, [r7, #12]
   1c7b4:	429a      	cmp	r2, r3
   1c7b6:	d118      	bne.n	1c7ea <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c7b8:	4b1a      	ldr	r3, [pc, #104]	; (1c824 <vTaskSuspend+0x144>)
   1c7ba:	681b      	ldr	r3, [r3, #0]
   1c7bc:	2b00      	cmp	r3, #0
   1c7be:	d008      	beq.n	1c7d2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c7c0:	4b1a      	ldr	r3, [pc, #104]	; (1c82c <vTaskSuspend+0x14c>)
   1c7c2:	681b      	ldr	r3, [r3, #0]
   1c7c4:	2b00      	cmp	r3, #0
   1c7c6:	d001      	beq.n	1c7cc <vTaskSuspend+0xec>
   1c7c8:	b672      	cpsid	i
   1c7ca:	e7fe      	b.n	1c7ca <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c7cc:	4b18      	ldr	r3, [pc, #96]	; (1c830 <vTaskSuspend+0x150>)
   1c7ce:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c7d0:	e00b      	b.n	1c7ea <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c7d2:	4b11      	ldr	r3, [pc, #68]	; (1c818 <vTaskSuspend+0x138>)
   1c7d4:	681a      	ldr	r2, [r3, #0]
   1c7d6:	4b17      	ldr	r3, [pc, #92]	; (1c834 <vTaskSuspend+0x154>)
   1c7d8:	681b      	ldr	r3, [r3, #0]
   1c7da:	429a      	cmp	r2, r3
   1c7dc:	d103      	bne.n	1c7e6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c7de:	4b06      	ldr	r3, [pc, #24]	; (1c7f8 <vTaskSuspend+0x118>)
   1c7e0:	2200      	movs	r2, #0
   1c7e2:	601a      	str	r2, [r3, #0]
	}
   1c7e4:	e001      	b.n	1c7ea <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c7e6:	4b14      	ldr	r3, [pc, #80]	; (1c838 <vTaskSuspend+0x158>)
   1c7e8:	4798      	blx	r3
	}
   1c7ea:	46c0      	nop			; (mov r8, r8)
   1c7ec:	46bd      	mov	sp, r7
   1c7ee:	b004      	add	sp, #16
   1c7f0:	bd80      	pop	{r7, pc}
   1c7f2:	46c0      	nop			; (mov r8, r8)
   1c7f4:	0001a609 	.word	0x0001a609
   1c7f8:	200040d8 	.word	0x200040d8
   1c7fc:	000188a1 	.word	0x000188a1
   1c800:	00018605 	.word	0x00018605
   1c804:	20000110 	.word	0x20000110
   1c808:	000185e5 	.word	0x000185e5
   1c80c:	00018ffd 	.word	0x00018ffd
   1c810:	00019795 	.word	0x00019795
   1c814:	0001a47f 	.word	0x0001a47f
   1c818:	2000419c 	.word	0x2000419c
   1c81c:	0001a3cf 	.word	0x0001a3cf
   1c820:	0001a62d 	.word	0x0001a62d
   1c824:	200041bc 	.word	0x200041bc
   1c828:	0001d2c5 	.word	0x0001d2c5
   1c82c:	200041d8 	.word	0x200041d8
   1c830:	0001a5f1 	.word	0x0001a5f1
   1c834:	200041b0 	.word	0x200041b0
   1c838:	0001cc55 	.word	0x0001cc55

0001c83c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c83c:	b590      	push	{r4, r7, lr}
   1c83e:	b085      	sub	sp, #20
   1c840:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c842:	4916      	ldr	r1, [pc, #88]	; (1c89c <vTaskStartScheduler+0x60>)
   1c844:	4816      	ldr	r0, [pc, #88]	; (1c8a0 <vTaskStartScheduler+0x64>)
   1c846:	4b17      	ldr	r3, [pc, #92]	; (1c8a4 <vTaskStartScheduler+0x68>)
   1c848:	9301      	str	r3, [sp, #4]
   1c84a:	2300      	movs	r3, #0
   1c84c:	9300      	str	r3, [sp, #0]
   1c84e:	2300      	movs	r3, #0
   1c850:	2296      	movs	r2, #150	; 0x96
   1c852:	4c15      	ldr	r4, [pc, #84]	; (1c8a8 <vTaskStartScheduler+0x6c>)
   1c854:	47a0      	blx	r4
   1c856:	0003      	movs	r3, r0
   1c858:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c85a:	687b      	ldr	r3, [r7, #4]
   1c85c:	2b01      	cmp	r3, #1
   1c85e:	d103      	bne.n	1c868 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c860:	4b12      	ldr	r3, [pc, #72]	; (1c8ac <vTaskStartScheduler+0x70>)
   1c862:	4798      	blx	r3
   1c864:	0003      	movs	r3, r0
   1c866:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c868:	687b      	ldr	r3, [r7, #4]
   1c86a:	2b01      	cmp	r3, #1
   1c86c:	d10d      	bne.n	1c88a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c86e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c870:	4b0f      	ldr	r3, [pc, #60]	; (1c8b0 <vTaskStartScheduler+0x74>)
   1c872:	2201      	movs	r2, #1
   1c874:	4252      	negs	r2, r2
   1c876:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c878:	4b0e      	ldr	r3, [pc, #56]	; (1c8b4 <vTaskStartScheduler+0x78>)
   1c87a:	2201      	movs	r2, #1
   1c87c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c87e:	4b0e      	ldr	r3, [pc, #56]	; (1c8b8 <vTaskStartScheduler+0x7c>)
   1c880:	2200      	movs	r2, #0
   1c882:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c884:	4b0d      	ldr	r3, [pc, #52]	; (1c8bc <vTaskStartScheduler+0x80>)
   1c886:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c888:	e004      	b.n	1c894 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c88a:	687b      	ldr	r3, [r7, #4]
   1c88c:	3301      	adds	r3, #1
   1c88e:	d101      	bne.n	1c894 <vTaskStartScheduler+0x58>
   1c890:	b672      	cpsid	i
   1c892:	e7fe      	b.n	1c892 <vTaskStartScheduler+0x56>
}
   1c894:	46c0      	nop			; (mov r8, r8)
   1c896:	46bd      	mov	sp, r7
   1c898:	b003      	add	sp, #12
   1c89a:	bd90      	pop	{r4, r7, pc}
   1c89c:	000388e4 	.word	0x000388e4
   1c8a0:	0001d10d 	.word	0x0001d10d
   1c8a4:	200041d4 	.word	0x200041d4
   1c8a8:	0001c265 	.word	0x0001c265
   1c8ac:	0001d8cd 	.word	0x0001d8cd
   1c8b0:	200041d0 	.word	0x200041d0
   1c8b4:	200041bc 	.word	0x200041bc
   1c8b8:	200041b4 	.word	0x200041b4
   1c8bc:	0001a599 	.word	0x0001a599

0001c8c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c8c0:	b580      	push	{r7, lr}
   1c8c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c8c4:	4b03      	ldr	r3, [pc, #12]	; (1c8d4 <vTaskSuspendAll+0x14>)
   1c8c6:	681b      	ldr	r3, [r3, #0]
   1c8c8:	1c5a      	adds	r2, r3, #1
   1c8ca:	4b02      	ldr	r3, [pc, #8]	; (1c8d4 <vTaskSuspendAll+0x14>)
   1c8cc:	601a      	str	r2, [r3, #0]
}
   1c8ce:	46c0      	nop			; (mov r8, r8)
   1c8d0:	46bd      	mov	sp, r7
   1c8d2:	bd80      	pop	{r7, pc}
   1c8d4:	200041d8 	.word	0x200041d8

0001c8d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c8d8:	b580      	push	{r7, lr}
   1c8da:	b084      	sub	sp, #16
   1c8dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c8de:	2300      	movs	r3, #0
   1c8e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c8e2:	2300      	movs	r3, #0
   1c8e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c8e6:	4b45      	ldr	r3, [pc, #276]	; (1c9fc <xTaskResumeAll+0x124>)
   1c8e8:	681b      	ldr	r3, [r3, #0]
   1c8ea:	2b00      	cmp	r3, #0
   1c8ec:	d101      	bne.n	1c8f2 <xTaskResumeAll+0x1a>
   1c8ee:	b672      	cpsid	i
   1c8f0:	e7fe      	b.n	1c8f0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c8f2:	4b43      	ldr	r3, [pc, #268]	; (1ca00 <xTaskResumeAll+0x128>)
   1c8f4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c8f6:	4b41      	ldr	r3, [pc, #260]	; (1c9fc <xTaskResumeAll+0x124>)
   1c8f8:	681b      	ldr	r3, [r3, #0]
   1c8fa:	1e5a      	subs	r2, r3, #1
   1c8fc:	4b3f      	ldr	r3, [pc, #252]	; (1c9fc <xTaskResumeAll+0x124>)
   1c8fe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c900:	4b3e      	ldr	r3, [pc, #248]	; (1c9fc <xTaskResumeAll+0x124>)
   1c902:	681b      	ldr	r3, [r3, #0]
   1c904:	2b00      	cmp	r3, #0
   1c906:	d000      	beq.n	1c90a <xTaskResumeAll+0x32>
   1c908:	e071      	b.n	1c9ee <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c90a:	4b3e      	ldr	r3, [pc, #248]	; (1ca04 <xTaskResumeAll+0x12c>)
   1c90c:	681b      	ldr	r3, [r3, #0]
   1c90e:	2b00      	cmp	r3, #0
   1c910:	d100      	bne.n	1c914 <xTaskResumeAll+0x3c>
   1c912:	e06c      	b.n	1c9ee <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c914:	e044      	b.n	1c9a0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c916:	4b3c      	ldr	r3, [pc, #240]	; (1ca08 <xTaskResumeAll+0x130>)
   1c918:	68db      	ldr	r3, [r3, #12]
   1c91a:	68db      	ldr	r3, [r3, #12]
   1c91c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c91e:	68fb      	ldr	r3, [r7, #12]
   1c920:	3318      	adds	r3, #24
   1c922:	0018      	movs	r0, r3
   1c924:	4b39      	ldr	r3, [pc, #228]	; (1ca0c <xTaskResumeAll+0x134>)
   1c926:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c928:	68fb      	ldr	r3, [r7, #12]
   1c92a:	3304      	adds	r3, #4
   1c92c:	0018      	movs	r0, r3
   1c92e:	4b37      	ldr	r3, [pc, #220]	; (1ca0c <xTaskResumeAll+0x134>)
   1c930:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c932:	68fb      	ldr	r3, [r7, #12]
   1c934:	0018      	movs	r0, r3
   1c936:	4b36      	ldr	r3, [pc, #216]	; (1ca10 <xTaskResumeAll+0x138>)
   1c938:	4798      	blx	r3
   1c93a:	0003      	movs	r3, r0
   1c93c:	001a      	movs	r2, r3
   1c93e:	4b35      	ldr	r3, [pc, #212]	; (1ca14 <xTaskResumeAll+0x13c>)
   1c940:	881b      	ldrh	r3, [r3, #0]
   1c942:	4013      	ands	r3, r2
   1c944:	b29b      	uxth	r3, r3
   1c946:	2b00      	cmp	r3, #0
   1c948:	d008      	beq.n	1c95c <xTaskResumeAll+0x84>
   1c94a:	68fb      	ldr	r3, [r7, #12]
   1c94c:	0018      	movs	r0, r3
   1c94e:	4b32      	ldr	r3, [pc, #200]	; (1ca18 <xTaskResumeAll+0x140>)
   1c950:	4798      	blx	r3
   1c952:	0003      	movs	r3, r0
   1c954:	b2db      	uxtb	r3, r3
   1c956:	0018      	movs	r0, r3
   1c958:	4b30      	ldr	r3, [pc, #192]	; (1ca1c <xTaskResumeAll+0x144>)
   1c95a:	4798      	blx	r3
   1c95c:	68fb      	ldr	r3, [r7, #12]
   1c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c960:	4b2f      	ldr	r3, [pc, #188]	; (1ca20 <xTaskResumeAll+0x148>)
   1c962:	681b      	ldr	r3, [r3, #0]
   1c964:	429a      	cmp	r2, r3
   1c966:	d903      	bls.n	1c970 <xTaskResumeAll+0x98>
   1c968:	68fb      	ldr	r3, [r7, #12]
   1c96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c96c:	4b2c      	ldr	r3, [pc, #176]	; (1ca20 <xTaskResumeAll+0x148>)
   1c96e:	601a      	str	r2, [r3, #0]
   1c970:	68fb      	ldr	r3, [r7, #12]
   1c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c974:	0013      	movs	r3, r2
   1c976:	009b      	lsls	r3, r3, #2
   1c978:	189b      	adds	r3, r3, r2
   1c97a:	009b      	lsls	r3, r3, #2
   1c97c:	4a29      	ldr	r2, [pc, #164]	; (1ca24 <xTaskResumeAll+0x14c>)
   1c97e:	189a      	adds	r2, r3, r2
   1c980:	68fb      	ldr	r3, [r7, #12]
   1c982:	3304      	adds	r3, #4
   1c984:	0019      	movs	r1, r3
   1c986:	0010      	movs	r0, r2
   1c988:	4b27      	ldr	r3, [pc, #156]	; (1ca28 <xTaskResumeAll+0x150>)
   1c98a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c98c:	68fb      	ldr	r3, [r7, #12]
   1c98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c990:	4b26      	ldr	r3, [pc, #152]	; (1ca2c <xTaskResumeAll+0x154>)
   1c992:	681b      	ldr	r3, [r3, #0]
   1c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c996:	429a      	cmp	r2, r3
   1c998:	d302      	bcc.n	1c9a0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c99a:	4b25      	ldr	r3, [pc, #148]	; (1ca30 <xTaskResumeAll+0x158>)
   1c99c:	2201      	movs	r2, #1
   1c99e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c9a0:	4b19      	ldr	r3, [pc, #100]	; (1ca08 <xTaskResumeAll+0x130>)
   1c9a2:	681b      	ldr	r3, [r3, #0]
   1c9a4:	2b00      	cmp	r3, #0
   1c9a6:	d1b6      	bne.n	1c916 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c9a8:	68fb      	ldr	r3, [r7, #12]
   1c9aa:	2b00      	cmp	r3, #0
   1c9ac:	d001      	beq.n	1c9b2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c9ae:	4b21      	ldr	r3, [pc, #132]	; (1ca34 <xTaskResumeAll+0x15c>)
   1c9b0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c9b2:	4b21      	ldr	r3, [pc, #132]	; (1ca38 <xTaskResumeAll+0x160>)
   1c9b4:	681b      	ldr	r3, [r3, #0]
   1c9b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c9b8:	687b      	ldr	r3, [r7, #4]
   1c9ba:	2b00      	cmp	r3, #0
   1c9bc:	d00f      	beq.n	1c9de <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c9be:	4b1f      	ldr	r3, [pc, #124]	; (1ca3c <xTaskResumeAll+0x164>)
   1c9c0:	4798      	blx	r3
   1c9c2:	1e03      	subs	r3, r0, #0
   1c9c4:	d002      	beq.n	1c9cc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c9c6:	4b1a      	ldr	r3, [pc, #104]	; (1ca30 <xTaskResumeAll+0x158>)
   1c9c8:	2201      	movs	r2, #1
   1c9ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c9cc:	687b      	ldr	r3, [r7, #4]
   1c9ce:	3b01      	subs	r3, #1
   1c9d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c9d2:	687b      	ldr	r3, [r7, #4]
   1c9d4:	2b00      	cmp	r3, #0
   1c9d6:	d1f2      	bne.n	1c9be <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c9d8:	4b17      	ldr	r3, [pc, #92]	; (1ca38 <xTaskResumeAll+0x160>)
   1c9da:	2200      	movs	r2, #0
   1c9dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c9de:	4b14      	ldr	r3, [pc, #80]	; (1ca30 <xTaskResumeAll+0x158>)
   1c9e0:	681b      	ldr	r3, [r3, #0]
   1c9e2:	2b00      	cmp	r3, #0
   1c9e4:	d003      	beq.n	1c9ee <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c9e6:	2301      	movs	r3, #1
   1c9e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c9ea:	4b15      	ldr	r3, [pc, #84]	; (1ca40 <xTaskResumeAll+0x168>)
   1c9ec:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c9ee:	4b15      	ldr	r3, [pc, #84]	; (1ca44 <xTaskResumeAll+0x16c>)
   1c9f0:	4798      	blx	r3

	return xAlreadyYielded;
   1c9f2:	68bb      	ldr	r3, [r7, #8]
}
   1c9f4:	0018      	movs	r0, r3
   1c9f6:	46bd      	mov	sp, r7
   1c9f8:	b004      	add	sp, #16
   1c9fa:	bd80      	pop	{r7, pc}
   1c9fc:	200041d8 	.word	0x200041d8
   1ca00:	0001a609 	.word	0x0001a609
   1ca04:	200041b0 	.word	0x200041b0
   1ca08:	20004170 	.word	0x20004170
   1ca0c:	0001a47f 	.word	0x0001a47f
   1ca10:	00018605 	.word	0x00018605
   1ca14:	20000110 	.word	0x20000110
   1ca18:	000185e5 	.word	0x000185e5
   1ca1c:	00018db5 	.word	0x00018db5
   1ca20:	200041b8 	.word	0x200041b8
   1ca24:	200040dc 	.word	0x200040dc
   1ca28:	0001a3cf 	.word	0x0001a3cf
   1ca2c:	200040d8 	.word	0x200040d8
   1ca30:	200041c4 	.word	0x200041c4
   1ca34:	0001d2c5 	.word	0x0001d2c5
   1ca38:	200041c0 	.word	0x200041c0
   1ca3c:	0001ca65 	.word	0x0001ca65
   1ca40:	0001a5f1 	.word	0x0001a5f1
   1ca44:	0001a62d 	.word	0x0001a62d

0001ca48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1ca48:	b580      	push	{r7, lr}
   1ca4a:	b082      	sub	sp, #8
   1ca4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1ca4e:	4b04      	ldr	r3, [pc, #16]	; (1ca60 <xTaskGetTickCount+0x18>)
   1ca50:	681b      	ldr	r3, [r3, #0]
   1ca52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1ca54:	687b      	ldr	r3, [r7, #4]
}
   1ca56:	0018      	movs	r0, r3
   1ca58:	46bd      	mov	sp, r7
   1ca5a:	b002      	add	sp, #8
   1ca5c:	bd80      	pop	{r7, pc}
   1ca5e:	46c0      	nop			; (mov r8, r8)
   1ca60:	200041b4 	.word	0x200041b4

0001ca64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1ca64:	b580      	push	{r7, lr}
   1ca66:	b086      	sub	sp, #24
   1ca68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1ca6a:	2300      	movs	r3, #0
   1ca6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1ca6e:	4b64      	ldr	r3, [pc, #400]	; (1cc00 <xTaskIncrementTick+0x19c>)
   1ca70:	681b      	ldr	r3, [r3, #0]
   1ca72:	2b01      	cmp	r3, #1
   1ca74:	d003      	beq.n	1ca7e <xTaskIncrementTick+0x1a>
   1ca76:	4b63      	ldr	r3, [pc, #396]	; (1cc04 <xTaskIncrementTick+0x1a0>)
   1ca78:	681b      	ldr	r3, [r3, #0]
   1ca7a:	2b00      	cmp	r3, #0
   1ca7c:	d107      	bne.n	1ca8e <xTaskIncrementTick+0x2a>
   1ca7e:	4b62      	ldr	r3, [pc, #392]	; (1cc08 <xTaskIncrementTick+0x1a4>)
   1ca80:	681b      	ldr	r3, [r3, #0]
   1ca82:	1c5a      	adds	r2, r3, #1
   1ca84:	4b60      	ldr	r3, [pc, #384]	; (1cc08 <xTaskIncrementTick+0x1a4>)
   1ca86:	601a      	str	r2, [r3, #0]
   1ca88:	2000      	movs	r0, #0
   1ca8a:	4b60      	ldr	r3, [pc, #384]	; (1cc0c <xTaskIncrementTick+0x1a8>)
   1ca8c:	4798      	blx	r3
   1ca8e:	4b5c      	ldr	r3, [pc, #368]	; (1cc00 <xTaskIncrementTick+0x19c>)
   1ca90:	681b      	ldr	r3, [r3, #0]
   1ca92:	2b00      	cmp	r3, #0
   1ca94:	d106      	bne.n	1caa4 <xTaskIncrementTick+0x40>
   1ca96:	4b5e      	ldr	r3, [pc, #376]	; (1cc10 <xTaskIncrementTick+0x1ac>)
   1ca98:	681b      	ldr	r3, [r3, #0]
   1ca9a:	3301      	adds	r3, #1
   1ca9c:	0019      	movs	r1, r3
   1ca9e:	2003      	movs	r0, #3
   1caa0:	4b5c      	ldr	r3, [pc, #368]	; (1cc14 <xTaskIncrementTick+0x1b0>)
   1caa2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1caa4:	4b56      	ldr	r3, [pc, #344]	; (1cc00 <xTaskIncrementTick+0x19c>)
   1caa6:	681b      	ldr	r3, [r3, #0]
   1caa8:	2b00      	cmp	r3, #0
   1caaa:	d000      	beq.n	1caae <xTaskIncrementTick+0x4a>
   1caac:	e098      	b.n	1cbe0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1caae:	4b58      	ldr	r3, [pc, #352]	; (1cc10 <xTaskIncrementTick+0x1ac>)
   1cab0:	681b      	ldr	r3, [r3, #0]
   1cab2:	3301      	adds	r3, #1
   1cab4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1cab6:	4b56      	ldr	r3, [pc, #344]	; (1cc10 <xTaskIncrementTick+0x1ac>)
   1cab8:	693a      	ldr	r2, [r7, #16]
   1caba:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1cabc:	693b      	ldr	r3, [r7, #16]
   1cabe:	2b00      	cmp	r3, #0
   1cac0:	d117      	bne.n	1caf2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1cac2:	4b55      	ldr	r3, [pc, #340]	; (1cc18 <xTaskIncrementTick+0x1b4>)
   1cac4:	681b      	ldr	r3, [r3, #0]
   1cac6:	681b      	ldr	r3, [r3, #0]
   1cac8:	2b00      	cmp	r3, #0
   1caca:	d001      	beq.n	1cad0 <xTaskIncrementTick+0x6c>
   1cacc:	b672      	cpsid	i
   1cace:	e7fe      	b.n	1cace <xTaskIncrementTick+0x6a>
   1cad0:	4b51      	ldr	r3, [pc, #324]	; (1cc18 <xTaskIncrementTick+0x1b4>)
   1cad2:	681b      	ldr	r3, [r3, #0]
   1cad4:	60fb      	str	r3, [r7, #12]
   1cad6:	4b51      	ldr	r3, [pc, #324]	; (1cc1c <xTaskIncrementTick+0x1b8>)
   1cad8:	681a      	ldr	r2, [r3, #0]
   1cada:	4b4f      	ldr	r3, [pc, #316]	; (1cc18 <xTaskIncrementTick+0x1b4>)
   1cadc:	601a      	str	r2, [r3, #0]
   1cade:	4b4f      	ldr	r3, [pc, #316]	; (1cc1c <xTaskIncrementTick+0x1b8>)
   1cae0:	68fa      	ldr	r2, [r7, #12]
   1cae2:	601a      	str	r2, [r3, #0]
   1cae4:	4b4e      	ldr	r3, [pc, #312]	; (1cc20 <xTaskIncrementTick+0x1bc>)
   1cae6:	681b      	ldr	r3, [r3, #0]
   1cae8:	1c5a      	adds	r2, r3, #1
   1caea:	4b4d      	ldr	r3, [pc, #308]	; (1cc20 <xTaskIncrementTick+0x1bc>)
   1caec:	601a      	str	r2, [r3, #0]
   1caee:	4b4d      	ldr	r3, [pc, #308]	; (1cc24 <xTaskIncrementTick+0x1c0>)
   1caf0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1caf2:	4b4d      	ldr	r3, [pc, #308]	; (1cc28 <xTaskIncrementTick+0x1c4>)
   1caf4:	681b      	ldr	r3, [r3, #0]
   1caf6:	693a      	ldr	r2, [r7, #16]
   1caf8:	429a      	cmp	r2, r3
   1cafa:	d363      	bcc.n	1cbc4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cafc:	4b46      	ldr	r3, [pc, #280]	; (1cc18 <xTaskIncrementTick+0x1b4>)
   1cafe:	681b      	ldr	r3, [r3, #0]
   1cb00:	681b      	ldr	r3, [r3, #0]
   1cb02:	2b00      	cmp	r3, #0
   1cb04:	d101      	bne.n	1cb0a <xTaskIncrementTick+0xa6>
   1cb06:	2301      	movs	r3, #1
   1cb08:	e000      	b.n	1cb0c <xTaskIncrementTick+0xa8>
   1cb0a:	2300      	movs	r3, #0
   1cb0c:	2b00      	cmp	r3, #0
   1cb0e:	d004      	beq.n	1cb1a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb10:	4b45      	ldr	r3, [pc, #276]	; (1cc28 <xTaskIncrementTick+0x1c4>)
   1cb12:	2201      	movs	r2, #1
   1cb14:	4252      	negs	r2, r2
   1cb16:	601a      	str	r2, [r3, #0]
					break;
   1cb18:	e054      	b.n	1cbc4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cb1a:	4b3f      	ldr	r3, [pc, #252]	; (1cc18 <xTaskIncrementTick+0x1b4>)
   1cb1c:	681b      	ldr	r3, [r3, #0]
   1cb1e:	68db      	ldr	r3, [r3, #12]
   1cb20:	68db      	ldr	r3, [r3, #12]
   1cb22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1cb24:	68bb      	ldr	r3, [r7, #8]
   1cb26:	685b      	ldr	r3, [r3, #4]
   1cb28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1cb2a:	693a      	ldr	r2, [r7, #16]
   1cb2c:	687b      	ldr	r3, [r7, #4]
   1cb2e:	429a      	cmp	r2, r3
   1cb30:	d203      	bcs.n	1cb3a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1cb32:	4b3d      	ldr	r3, [pc, #244]	; (1cc28 <xTaskIncrementTick+0x1c4>)
   1cb34:	687a      	ldr	r2, [r7, #4]
   1cb36:	601a      	str	r2, [r3, #0]
						break;
   1cb38:	e044      	b.n	1cbc4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cb3a:	68bb      	ldr	r3, [r7, #8]
   1cb3c:	3304      	adds	r3, #4
   1cb3e:	0018      	movs	r0, r3
   1cb40:	4b3a      	ldr	r3, [pc, #232]	; (1cc2c <xTaskIncrementTick+0x1c8>)
   1cb42:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cb44:	68bb      	ldr	r3, [r7, #8]
   1cb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cb48:	2b00      	cmp	r3, #0
   1cb4a:	d004      	beq.n	1cb56 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cb4c:	68bb      	ldr	r3, [r7, #8]
   1cb4e:	3318      	adds	r3, #24
   1cb50:	0018      	movs	r0, r3
   1cb52:	4b36      	ldr	r3, [pc, #216]	; (1cc2c <xTaskIncrementTick+0x1c8>)
   1cb54:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1cb56:	68bb      	ldr	r3, [r7, #8]
   1cb58:	0018      	movs	r0, r3
   1cb5a:	4b35      	ldr	r3, [pc, #212]	; (1cc30 <xTaskIncrementTick+0x1cc>)
   1cb5c:	4798      	blx	r3
   1cb5e:	0003      	movs	r3, r0
   1cb60:	001a      	movs	r2, r3
   1cb62:	4b34      	ldr	r3, [pc, #208]	; (1cc34 <xTaskIncrementTick+0x1d0>)
   1cb64:	881b      	ldrh	r3, [r3, #0]
   1cb66:	4013      	ands	r3, r2
   1cb68:	b29b      	uxth	r3, r3
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	d008      	beq.n	1cb80 <xTaskIncrementTick+0x11c>
   1cb6e:	68bb      	ldr	r3, [r7, #8]
   1cb70:	0018      	movs	r0, r3
   1cb72:	4b31      	ldr	r3, [pc, #196]	; (1cc38 <xTaskIncrementTick+0x1d4>)
   1cb74:	4798      	blx	r3
   1cb76:	0003      	movs	r3, r0
   1cb78:	b2db      	uxtb	r3, r3
   1cb7a:	0018      	movs	r0, r3
   1cb7c:	4b2f      	ldr	r3, [pc, #188]	; (1cc3c <xTaskIncrementTick+0x1d8>)
   1cb7e:	4798      	blx	r3
   1cb80:	68bb      	ldr	r3, [r7, #8]
   1cb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb84:	4b2e      	ldr	r3, [pc, #184]	; (1cc40 <xTaskIncrementTick+0x1dc>)
   1cb86:	681b      	ldr	r3, [r3, #0]
   1cb88:	429a      	cmp	r2, r3
   1cb8a:	d903      	bls.n	1cb94 <xTaskIncrementTick+0x130>
   1cb8c:	68bb      	ldr	r3, [r7, #8]
   1cb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb90:	4b2b      	ldr	r3, [pc, #172]	; (1cc40 <xTaskIncrementTick+0x1dc>)
   1cb92:	601a      	str	r2, [r3, #0]
   1cb94:	68bb      	ldr	r3, [r7, #8]
   1cb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb98:	0013      	movs	r3, r2
   1cb9a:	009b      	lsls	r3, r3, #2
   1cb9c:	189b      	adds	r3, r3, r2
   1cb9e:	009b      	lsls	r3, r3, #2
   1cba0:	4a28      	ldr	r2, [pc, #160]	; (1cc44 <xTaskIncrementTick+0x1e0>)
   1cba2:	189a      	adds	r2, r3, r2
   1cba4:	68bb      	ldr	r3, [r7, #8]
   1cba6:	3304      	adds	r3, #4
   1cba8:	0019      	movs	r1, r3
   1cbaa:	0010      	movs	r0, r2
   1cbac:	4b26      	ldr	r3, [pc, #152]	; (1cc48 <xTaskIncrementTick+0x1e4>)
   1cbae:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cbb0:	68bb      	ldr	r3, [r7, #8]
   1cbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbb4:	4b25      	ldr	r3, [pc, #148]	; (1cc4c <xTaskIncrementTick+0x1e8>)
   1cbb6:	681b      	ldr	r3, [r3, #0]
   1cbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cbba:	429a      	cmp	r2, r3
   1cbbc:	d39e      	bcc.n	1cafc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1cbbe:	2301      	movs	r3, #1
   1cbc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cbc2:	e79b      	b.n	1cafc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1cbc4:	4b21      	ldr	r3, [pc, #132]	; (1cc4c <xTaskIncrementTick+0x1e8>)
   1cbc6:	681b      	ldr	r3, [r3, #0]
   1cbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbca:	491e      	ldr	r1, [pc, #120]	; (1cc44 <xTaskIncrementTick+0x1e0>)
   1cbcc:	0013      	movs	r3, r2
   1cbce:	009b      	lsls	r3, r3, #2
   1cbd0:	189b      	adds	r3, r3, r2
   1cbd2:	009b      	lsls	r3, r3, #2
   1cbd4:	585b      	ldr	r3, [r3, r1]
   1cbd6:	2b01      	cmp	r3, #1
   1cbd8:	d907      	bls.n	1cbea <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1cbda:	2301      	movs	r3, #1
   1cbdc:	617b      	str	r3, [r7, #20]
   1cbde:	e004      	b.n	1cbea <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1cbe0:	4b08      	ldr	r3, [pc, #32]	; (1cc04 <xTaskIncrementTick+0x1a0>)
   1cbe2:	681b      	ldr	r3, [r3, #0]
   1cbe4:	1c5a      	adds	r2, r3, #1
   1cbe6:	4b07      	ldr	r3, [pc, #28]	; (1cc04 <xTaskIncrementTick+0x1a0>)
   1cbe8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1cbea:	4b19      	ldr	r3, [pc, #100]	; (1cc50 <xTaskIncrementTick+0x1ec>)
   1cbec:	681b      	ldr	r3, [r3, #0]
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d001      	beq.n	1cbf6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1cbf2:	2301      	movs	r3, #1
   1cbf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1cbf6:	697b      	ldr	r3, [r7, #20]
}
   1cbf8:	0018      	movs	r0, r3
   1cbfa:	46bd      	mov	sp, r7
   1cbfc:	b006      	add	sp, #24
   1cbfe:	bd80      	pop	{r7, pc}
   1cc00:	200041d8 	.word	0x200041d8
   1cc04:	200041c0 	.word	0x200041c0
   1cc08:	20000d38 	.word	0x20000d38
   1cc0c:	0001a299 	.word	0x0001a299
   1cc10:	200041b4 	.word	0x200041b4
   1cc14:	00019305 	.word	0x00019305
   1cc18:	20004168 	.word	0x20004168
   1cc1c:	2000416c 	.word	0x2000416c
   1cc20:	200041c8 	.word	0x200041c8
   1cc24:	0001d2c5 	.word	0x0001d2c5
   1cc28:	200041d0 	.word	0x200041d0
   1cc2c:	0001a47f 	.word	0x0001a47f
   1cc30:	00018605 	.word	0x00018605
   1cc34:	20000110 	.word	0x20000110
   1cc38:	000185e5 	.word	0x000185e5
   1cc3c:	00018db5 	.word	0x00018db5
   1cc40:	200041b8 	.word	0x200041b8
   1cc44:	200040dc 	.word	0x200040dc
   1cc48:	0001a3cf 	.word	0x0001a3cf
   1cc4c:	200040d8 	.word	0x200040d8
   1cc50:	200041c4 	.word	0x200041c4

0001cc54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1cc54:	b580      	push	{r7, lr}
   1cc56:	b082      	sub	sp, #8
   1cc58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1cc5a:	4b3a      	ldr	r3, [pc, #232]	; (1cd44 <vTaskSwitchContext+0xf0>)
   1cc5c:	681b      	ldr	r3, [r3, #0]
   1cc5e:	2b00      	cmp	r3, #0
   1cc60:	d003      	beq.n	1cc6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1cc62:	4b39      	ldr	r3, [pc, #228]	; (1cd48 <vTaskSwitchContext+0xf4>)
   1cc64:	2201      	movs	r2, #1
   1cc66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1cc68:	e067      	b.n	1cd3a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1cc6a:	4b37      	ldr	r3, [pc, #220]	; (1cd48 <vTaskSwitchContext+0xf4>)
   1cc6c:	2200      	movs	r2, #0
   1cc6e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1cc70:	4b36      	ldr	r3, [pc, #216]	; (1cd4c <vTaskSwitchContext+0xf8>)
   1cc72:	681b      	ldr	r3, [r3, #0]
   1cc74:	681a      	ldr	r2, [r3, #0]
   1cc76:	4b35      	ldr	r3, [pc, #212]	; (1cd4c <vTaskSwitchContext+0xf8>)
   1cc78:	681b      	ldr	r3, [r3, #0]
   1cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cc7c:	429a      	cmp	r2, r3
   1cc7e:	d808      	bhi.n	1cc92 <vTaskSwitchContext+0x3e>
   1cc80:	4b32      	ldr	r3, [pc, #200]	; (1cd4c <vTaskSwitchContext+0xf8>)
   1cc82:	681a      	ldr	r2, [r3, #0]
   1cc84:	4b31      	ldr	r3, [pc, #196]	; (1cd4c <vTaskSwitchContext+0xf8>)
   1cc86:	681b      	ldr	r3, [r3, #0]
   1cc88:	3334      	adds	r3, #52	; 0x34
   1cc8a:	0019      	movs	r1, r3
   1cc8c:	0010      	movs	r0, r2
   1cc8e:	4b30      	ldr	r3, [pc, #192]	; (1cd50 <vTaskSwitchContext+0xfc>)
   1cc90:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1cc92:	4b30      	ldr	r3, [pc, #192]	; (1cd54 <vTaskSwitchContext+0x100>)
   1cc94:	681b      	ldr	r3, [r3, #0]
   1cc96:	607b      	str	r3, [r7, #4]
   1cc98:	e007      	b.n	1ccaa <vTaskSwitchContext+0x56>
   1cc9a:	687b      	ldr	r3, [r7, #4]
   1cc9c:	2b00      	cmp	r3, #0
   1cc9e:	d101      	bne.n	1cca4 <vTaskSwitchContext+0x50>
   1cca0:	b672      	cpsid	i
   1cca2:	e7fe      	b.n	1cca2 <vTaskSwitchContext+0x4e>
   1cca4:	687b      	ldr	r3, [r7, #4]
   1cca6:	3b01      	subs	r3, #1
   1cca8:	607b      	str	r3, [r7, #4]
   1ccaa:	492b      	ldr	r1, [pc, #172]	; (1cd58 <vTaskSwitchContext+0x104>)
   1ccac:	687a      	ldr	r2, [r7, #4]
   1ccae:	0013      	movs	r3, r2
   1ccb0:	009b      	lsls	r3, r3, #2
   1ccb2:	189b      	adds	r3, r3, r2
   1ccb4:	009b      	lsls	r3, r3, #2
   1ccb6:	585b      	ldr	r3, [r3, r1]
   1ccb8:	2b00      	cmp	r3, #0
   1ccba:	d0ee      	beq.n	1cc9a <vTaskSwitchContext+0x46>
   1ccbc:	687a      	ldr	r2, [r7, #4]
   1ccbe:	0013      	movs	r3, r2
   1ccc0:	009b      	lsls	r3, r3, #2
   1ccc2:	189b      	adds	r3, r3, r2
   1ccc4:	009b      	lsls	r3, r3, #2
   1ccc6:	4a24      	ldr	r2, [pc, #144]	; (1cd58 <vTaskSwitchContext+0x104>)
   1ccc8:	189b      	adds	r3, r3, r2
   1ccca:	603b      	str	r3, [r7, #0]
   1cccc:	683b      	ldr	r3, [r7, #0]
   1ccce:	685b      	ldr	r3, [r3, #4]
   1ccd0:	685a      	ldr	r2, [r3, #4]
   1ccd2:	683b      	ldr	r3, [r7, #0]
   1ccd4:	605a      	str	r2, [r3, #4]
   1ccd6:	683b      	ldr	r3, [r7, #0]
   1ccd8:	685a      	ldr	r2, [r3, #4]
   1ccda:	683b      	ldr	r3, [r7, #0]
   1ccdc:	3308      	adds	r3, #8
   1ccde:	429a      	cmp	r2, r3
   1cce0:	d104      	bne.n	1ccec <vTaskSwitchContext+0x98>
   1cce2:	683b      	ldr	r3, [r7, #0]
   1cce4:	685b      	ldr	r3, [r3, #4]
   1cce6:	685a      	ldr	r2, [r3, #4]
   1cce8:	683b      	ldr	r3, [r7, #0]
   1ccea:	605a      	str	r2, [r3, #4]
   1ccec:	683b      	ldr	r3, [r7, #0]
   1ccee:	685b      	ldr	r3, [r3, #4]
   1ccf0:	68da      	ldr	r2, [r3, #12]
   1ccf2:	4b16      	ldr	r3, [pc, #88]	; (1cd4c <vTaskSwitchContext+0xf8>)
   1ccf4:	601a      	str	r2, [r3, #0]
   1ccf6:	4b17      	ldr	r3, [pc, #92]	; (1cd54 <vTaskSwitchContext+0x100>)
   1ccf8:	687a      	ldr	r2, [r7, #4]
   1ccfa:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1ccfc:	4b17      	ldr	r3, [pc, #92]	; (1cd5c <vTaskSwitchContext+0x108>)
   1ccfe:	2201      	movs	r2, #1
   1cd00:	601a      	str	r2, [r3, #0]
   1cd02:	4b17      	ldr	r3, [pc, #92]	; (1cd60 <vTaskSwitchContext+0x10c>)
   1cd04:	4798      	blx	r3
   1cd06:	0003      	movs	r3, r0
   1cd08:	0018      	movs	r0, r3
   1cd0a:	4b16      	ldr	r3, [pc, #88]	; (1cd64 <vTaskSwitchContext+0x110>)
   1cd0c:	4798      	blx	r3
   1cd0e:	0003      	movs	r3, r0
   1cd10:	001a      	movs	r2, r3
   1cd12:	4b15      	ldr	r3, [pc, #84]	; (1cd68 <vTaskSwitchContext+0x114>)
   1cd14:	881b      	ldrh	r3, [r3, #0]
   1cd16:	4013      	ands	r3, r2
   1cd18:	b29b      	uxth	r3, r3
   1cd1a:	2b00      	cmp	r3, #0
   1cd1c:	d00a      	beq.n	1cd34 <vTaskSwitchContext+0xe0>
   1cd1e:	4b10      	ldr	r3, [pc, #64]	; (1cd60 <vTaskSwitchContext+0x10c>)
   1cd20:	4798      	blx	r3
   1cd22:	0003      	movs	r3, r0
   1cd24:	0018      	movs	r0, r3
   1cd26:	4b11      	ldr	r3, [pc, #68]	; (1cd6c <vTaskSwitchContext+0x118>)
   1cd28:	4798      	blx	r3
   1cd2a:	0003      	movs	r3, r0
   1cd2c:	b2db      	uxtb	r3, r3
   1cd2e:	0018      	movs	r0, r3
   1cd30:	4b0f      	ldr	r3, [pc, #60]	; (1cd70 <vTaskSwitchContext+0x11c>)
   1cd32:	4798      	blx	r3
   1cd34:	4b09      	ldr	r3, [pc, #36]	; (1cd5c <vTaskSwitchContext+0x108>)
   1cd36:	2202      	movs	r2, #2
   1cd38:	601a      	str	r2, [r3, #0]
}
   1cd3a:	46c0      	nop			; (mov r8, r8)
   1cd3c:	46bd      	mov	sp, r7
   1cd3e:	b002      	add	sp, #8
   1cd40:	bd80      	pop	{r7, pc}
   1cd42:	46c0      	nop			; (mov r8, r8)
   1cd44:	200041d8 	.word	0x200041d8
   1cd48:	200041c4 	.word	0x200041c4
   1cd4c:	200040d8 	.word	0x200040d8
   1cd50:	00032d7d 	.word	0x00032d7d
   1cd54:	200041b8 	.word	0x200041b8
   1cd58:	200040dc 	.word	0x200040dc
   1cd5c:	20000d44 	.word	0x20000d44
   1cd60:	000188a1 	.word	0x000188a1
   1cd64:	00018605 	.word	0x00018605
   1cd68:	20000110 	.word	0x20000110
   1cd6c:	000185e5 	.word	0x000185e5
   1cd70:	00019401 	.word	0x00019401

0001cd74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1cd74:	b580      	push	{r7, lr}
   1cd76:	b082      	sub	sp, #8
   1cd78:	af00      	add	r7, sp, #0
   1cd7a:	6078      	str	r0, [r7, #4]
   1cd7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1cd7e:	687b      	ldr	r3, [r7, #4]
   1cd80:	2b00      	cmp	r3, #0
   1cd82:	d101      	bne.n	1cd88 <vTaskPlaceOnEventList+0x14>
   1cd84:	b672      	cpsid	i
   1cd86:	e7fe      	b.n	1cd86 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cd88:	4b08      	ldr	r3, [pc, #32]	; (1cdac <vTaskPlaceOnEventList+0x38>)
   1cd8a:	681b      	ldr	r3, [r3, #0]
   1cd8c:	3318      	adds	r3, #24
   1cd8e:	001a      	movs	r2, r3
   1cd90:	687b      	ldr	r3, [r7, #4]
   1cd92:	0011      	movs	r1, r2
   1cd94:	0018      	movs	r0, r3
   1cd96:	4b06      	ldr	r3, [pc, #24]	; (1cdb0 <vTaskPlaceOnEventList+0x3c>)
   1cd98:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cd9a:	683b      	ldr	r3, [r7, #0]
   1cd9c:	2101      	movs	r1, #1
   1cd9e:	0018      	movs	r0, r3
   1cda0:	4b04      	ldr	r3, [pc, #16]	; (1cdb4 <vTaskPlaceOnEventList+0x40>)
   1cda2:	4798      	blx	r3
}
   1cda4:	46c0      	nop			; (mov r8, r8)
   1cda6:	46bd      	mov	sp, r7
   1cda8:	b002      	add	sp, #8
   1cdaa:	bd80      	pop	{r7, pc}
   1cdac:	200040d8 	.word	0x200040d8
   1cdb0:	0001a413 	.word	0x0001a413
   1cdb4:	0001d819 	.word	0x0001d819

0001cdb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1cdb8:	b580      	push	{r7, lr}
   1cdba:	b084      	sub	sp, #16
   1cdbc:	af00      	add	r7, sp, #0
   1cdbe:	60f8      	str	r0, [r7, #12]
   1cdc0:	60b9      	str	r1, [r7, #8]
   1cdc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1cdc4:	68fb      	ldr	r3, [r7, #12]
   1cdc6:	2b00      	cmp	r3, #0
   1cdc8:	d101      	bne.n	1cdce <vTaskPlaceOnEventListRestricted+0x16>
   1cdca:	b672      	cpsid	i
   1cdcc:	e7fe      	b.n	1cdcc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cdce:	4b28      	ldr	r3, [pc, #160]	; (1ce70 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cdd0:	681b      	ldr	r3, [r3, #0]
   1cdd2:	3318      	adds	r3, #24
   1cdd4:	001a      	movs	r2, r3
   1cdd6:	68fb      	ldr	r3, [r7, #12]
   1cdd8:	0011      	movs	r1, r2
   1cdda:	0018      	movs	r0, r3
   1cddc:	4b25      	ldr	r3, [pc, #148]	; (1ce74 <vTaskPlaceOnEventListRestricted+0xbc>)
   1cdde:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1cde0:	687b      	ldr	r3, [r7, #4]
   1cde2:	2b00      	cmp	r3, #0
   1cde4:	d002      	beq.n	1cdec <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1cde6:	2301      	movs	r3, #1
   1cde8:	425b      	negs	r3, r3
   1cdea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1cdec:	4b20      	ldr	r3, [pc, #128]	; (1ce70 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cdee:	681b      	ldr	r3, [r3, #0]
   1cdf0:	0018      	movs	r0, r3
   1cdf2:	4b21      	ldr	r3, [pc, #132]	; (1ce78 <vTaskPlaceOnEventListRestricted+0xc0>)
   1cdf4:	4798      	blx	r3
   1cdf6:	0003      	movs	r3, r0
   1cdf8:	001a      	movs	r2, r3
   1cdfa:	4b20      	ldr	r3, [pc, #128]	; (1ce7c <vTaskPlaceOnEventListRestricted+0xc4>)
   1cdfc:	881b      	ldrh	r3, [r3, #0]
   1cdfe:	4013      	ands	r3, r2
   1ce00:	b29b      	uxth	r3, r3
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	d011      	beq.n	1ce2a <vTaskPlaceOnEventListRestricted+0x72>
   1ce06:	4b1e      	ldr	r3, [pc, #120]	; (1ce80 <vTaskPlaceOnEventListRestricted+0xc8>)
   1ce08:	681a      	ldr	r2, [r3, #0]
   1ce0a:	68bb      	ldr	r3, [r7, #8]
   1ce0c:	18d3      	adds	r3, r2, r3
   1ce0e:	0019      	movs	r1, r3
   1ce10:	2088      	movs	r0, #136	; 0x88
   1ce12:	4b1c      	ldr	r3, [pc, #112]	; (1ce84 <vTaskPlaceOnEventListRestricted+0xcc>)
   1ce14:	4798      	blx	r3
   1ce16:	4b16      	ldr	r3, [pc, #88]	; (1ce70 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ce18:	681b      	ldr	r3, [r3, #0]
   1ce1a:	0018      	movs	r0, r3
   1ce1c:	4b1a      	ldr	r3, [pc, #104]	; (1ce88 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ce1e:	4798      	blx	r3
   1ce20:	0003      	movs	r3, r0
   1ce22:	b2db      	uxtb	r3, r3
   1ce24:	0018      	movs	r0, r3
   1ce26:	4b19      	ldr	r3, [pc, #100]	; (1ce8c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ce28:	4798      	blx	r3
   1ce2a:	4b19      	ldr	r3, [pc, #100]	; (1ce90 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ce2c:	4798      	blx	r3
   1ce2e:	0003      	movs	r3, r0
   1ce30:	0018      	movs	r0, r3
   1ce32:	4b11      	ldr	r3, [pc, #68]	; (1ce78 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ce34:	4798      	blx	r3
   1ce36:	0003      	movs	r3, r0
   1ce38:	001a      	movs	r2, r3
   1ce3a:	4b10      	ldr	r3, [pc, #64]	; (1ce7c <vTaskPlaceOnEventListRestricted+0xc4>)
   1ce3c:	881b      	ldrh	r3, [r3, #0]
   1ce3e:	4013      	ands	r3, r2
   1ce40:	b29b      	uxth	r3, r3
   1ce42:	2b00      	cmp	r3, #0
   1ce44:	d00a      	beq.n	1ce5c <vTaskPlaceOnEventListRestricted+0xa4>
   1ce46:	4b12      	ldr	r3, [pc, #72]	; (1ce90 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ce48:	4798      	blx	r3
   1ce4a:	0003      	movs	r3, r0
   1ce4c:	0018      	movs	r0, r3
   1ce4e:	4b0e      	ldr	r3, [pc, #56]	; (1ce88 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ce50:	4798      	blx	r3
   1ce52:	0003      	movs	r3, r0
   1ce54:	b2db      	uxtb	r3, r3
   1ce56:	0018      	movs	r0, r3
   1ce58:	4b0c      	ldr	r3, [pc, #48]	; (1ce8c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ce5a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ce5c:	687a      	ldr	r2, [r7, #4]
   1ce5e:	68bb      	ldr	r3, [r7, #8]
   1ce60:	0011      	movs	r1, r2
   1ce62:	0018      	movs	r0, r3
   1ce64:	4b0b      	ldr	r3, [pc, #44]	; (1ce94 <vTaskPlaceOnEventListRestricted+0xdc>)
   1ce66:	4798      	blx	r3
	}
   1ce68:	46c0      	nop			; (mov r8, r8)
   1ce6a:	46bd      	mov	sp, r7
   1ce6c:	b004      	add	sp, #16
   1ce6e:	bd80      	pop	{r7, pc}
   1ce70:	200040d8 	.word	0x200040d8
   1ce74:	0001a3cf 	.word	0x0001a3cf
   1ce78:	00018605 	.word	0x00018605
   1ce7c:	20000110 	.word	0x20000110
   1ce80:	200041b4 	.word	0x200041b4
   1ce84:	00019305 	.word	0x00019305
   1ce88:	000185e5 	.word	0x000185e5
   1ce8c:	00019795 	.word	0x00019795
   1ce90:	000188a1 	.word	0x000188a1
   1ce94:	0001d819 	.word	0x0001d819

0001ce98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ce98:	b580      	push	{r7, lr}
   1ce9a:	b084      	sub	sp, #16
   1ce9c:	af00      	add	r7, sp, #0
   1ce9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1cea0:	687b      	ldr	r3, [r7, #4]
   1cea2:	68db      	ldr	r3, [r3, #12]
   1cea4:	68db      	ldr	r3, [r3, #12]
   1cea6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1cea8:	68bb      	ldr	r3, [r7, #8]
   1ceaa:	2b00      	cmp	r3, #0
   1ceac:	d101      	bne.n	1ceb2 <xTaskRemoveFromEventList+0x1a>
   1ceae:	b672      	cpsid	i
   1ceb0:	e7fe      	b.n	1ceb0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ceb2:	68bb      	ldr	r3, [r7, #8]
   1ceb4:	3318      	adds	r3, #24
   1ceb6:	0018      	movs	r0, r3
   1ceb8:	4b2a      	ldr	r3, [pc, #168]	; (1cf64 <xTaskRemoveFromEventList+0xcc>)
   1ceba:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cebc:	4b2a      	ldr	r3, [pc, #168]	; (1cf68 <xTaskRemoveFromEventList+0xd0>)
   1cebe:	681b      	ldr	r3, [r3, #0]
   1cec0:	2b00      	cmp	r3, #0
   1cec2:	d132      	bne.n	1cf2a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1cec4:	68bb      	ldr	r3, [r7, #8]
   1cec6:	3304      	adds	r3, #4
   1cec8:	0018      	movs	r0, r3
   1ceca:	4b26      	ldr	r3, [pc, #152]	; (1cf64 <xTaskRemoveFromEventList+0xcc>)
   1cecc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1cece:	68bb      	ldr	r3, [r7, #8]
   1ced0:	0018      	movs	r0, r3
   1ced2:	4b26      	ldr	r3, [pc, #152]	; (1cf6c <xTaskRemoveFromEventList+0xd4>)
   1ced4:	4798      	blx	r3
   1ced6:	0003      	movs	r3, r0
   1ced8:	001a      	movs	r2, r3
   1ceda:	4b25      	ldr	r3, [pc, #148]	; (1cf70 <xTaskRemoveFromEventList+0xd8>)
   1cedc:	881b      	ldrh	r3, [r3, #0]
   1cede:	4013      	ands	r3, r2
   1cee0:	b29b      	uxth	r3, r3
   1cee2:	2b00      	cmp	r3, #0
   1cee4:	d008      	beq.n	1cef8 <xTaskRemoveFromEventList+0x60>
   1cee6:	68bb      	ldr	r3, [r7, #8]
   1cee8:	0018      	movs	r0, r3
   1ceea:	4b22      	ldr	r3, [pc, #136]	; (1cf74 <xTaskRemoveFromEventList+0xdc>)
   1ceec:	4798      	blx	r3
   1ceee:	0003      	movs	r3, r0
   1cef0:	b2db      	uxtb	r3, r3
   1cef2:	0018      	movs	r0, r3
   1cef4:	4b20      	ldr	r3, [pc, #128]	; (1cf78 <xTaskRemoveFromEventList+0xe0>)
   1cef6:	4798      	blx	r3
   1cef8:	68bb      	ldr	r3, [r7, #8]
   1cefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cefc:	4b1f      	ldr	r3, [pc, #124]	; (1cf7c <xTaskRemoveFromEventList+0xe4>)
   1cefe:	681b      	ldr	r3, [r3, #0]
   1cf00:	429a      	cmp	r2, r3
   1cf02:	d903      	bls.n	1cf0c <xTaskRemoveFromEventList+0x74>
   1cf04:	68bb      	ldr	r3, [r7, #8]
   1cf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf08:	4b1c      	ldr	r3, [pc, #112]	; (1cf7c <xTaskRemoveFromEventList+0xe4>)
   1cf0a:	601a      	str	r2, [r3, #0]
   1cf0c:	68bb      	ldr	r3, [r7, #8]
   1cf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf10:	0013      	movs	r3, r2
   1cf12:	009b      	lsls	r3, r3, #2
   1cf14:	189b      	adds	r3, r3, r2
   1cf16:	009b      	lsls	r3, r3, #2
   1cf18:	4a19      	ldr	r2, [pc, #100]	; (1cf80 <xTaskRemoveFromEventList+0xe8>)
   1cf1a:	189a      	adds	r2, r3, r2
   1cf1c:	68bb      	ldr	r3, [r7, #8]
   1cf1e:	3304      	adds	r3, #4
   1cf20:	0019      	movs	r1, r3
   1cf22:	0010      	movs	r0, r2
   1cf24:	4b17      	ldr	r3, [pc, #92]	; (1cf84 <xTaskRemoveFromEventList+0xec>)
   1cf26:	4798      	blx	r3
   1cf28:	e007      	b.n	1cf3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1cf2a:	68bb      	ldr	r3, [r7, #8]
   1cf2c:	3318      	adds	r3, #24
   1cf2e:	001a      	movs	r2, r3
   1cf30:	4b15      	ldr	r3, [pc, #84]	; (1cf88 <xTaskRemoveFromEventList+0xf0>)
   1cf32:	0011      	movs	r1, r2
   1cf34:	0018      	movs	r0, r3
   1cf36:	4b13      	ldr	r3, [pc, #76]	; (1cf84 <xTaskRemoveFromEventList+0xec>)
   1cf38:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1cf3a:	68bb      	ldr	r3, [r7, #8]
   1cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf3e:	4b13      	ldr	r3, [pc, #76]	; (1cf8c <xTaskRemoveFromEventList+0xf4>)
   1cf40:	681b      	ldr	r3, [r3, #0]
   1cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf44:	429a      	cmp	r2, r3
   1cf46:	d905      	bls.n	1cf54 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1cf48:	2301      	movs	r3, #1
   1cf4a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1cf4c:	4b10      	ldr	r3, [pc, #64]	; (1cf90 <xTaskRemoveFromEventList+0xf8>)
   1cf4e:	2201      	movs	r2, #1
   1cf50:	601a      	str	r2, [r3, #0]
   1cf52:	e001      	b.n	1cf58 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1cf54:	2300      	movs	r3, #0
   1cf56:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1cf58:	68fb      	ldr	r3, [r7, #12]
}
   1cf5a:	0018      	movs	r0, r3
   1cf5c:	46bd      	mov	sp, r7
   1cf5e:	b004      	add	sp, #16
   1cf60:	bd80      	pop	{r7, pc}
   1cf62:	46c0      	nop			; (mov r8, r8)
   1cf64:	0001a47f 	.word	0x0001a47f
   1cf68:	200041d8 	.word	0x200041d8
   1cf6c:	00018605 	.word	0x00018605
   1cf70:	20000110 	.word	0x20000110
   1cf74:	000185e5 	.word	0x000185e5
   1cf78:	00018db5 	.word	0x00018db5
   1cf7c:	200041b8 	.word	0x200041b8
   1cf80:	200040dc 	.word	0x200040dc
   1cf84:	0001a3cf 	.word	0x0001a3cf
   1cf88:	20004170 	.word	0x20004170
   1cf8c:	200040d8 	.word	0x200040d8
   1cf90:	200041c4 	.word	0x200041c4

0001cf94 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cf94:	b580      	push	{r7, lr}
   1cf96:	b082      	sub	sp, #8
   1cf98:	af00      	add	r7, sp, #0
   1cf9a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1cf9c:	687b      	ldr	r3, [r7, #4]
   1cf9e:	2b00      	cmp	r3, #0
   1cfa0:	d101      	bne.n	1cfa6 <vTaskSetTimeOutState+0x12>
   1cfa2:	b672      	cpsid	i
   1cfa4:	e7fe      	b.n	1cfa4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1cfa6:	4b08      	ldr	r3, [pc, #32]	; (1cfc8 <vTaskSetTimeOutState+0x34>)
   1cfa8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cfaa:	4b08      	ldr	r3, [pc, #32]	; (1cfcc <vTaskSetTimeOutState+0x38>)
   1cfac:	681a      	ldr	r2, [r3, #0]
   1cfae:	687b      	ldr	r3, [r7, #4]
   1cfb0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1cfb2:	4b07      	ldr	r3, [pc, #28]	; (1cfd0 <vTaskSetTimeOutState+0x3c>)
   1cfb4:	681a      	ldr	r2, [r3, #0]
   1cfb6:	687b      	ldr	r3, [r7, #4]
   1cfb8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1cfba:	4b06      	ldr	r3, [pc, #24]	; (1cfd4 <vTaskSetTimeOutState+0x40>)
   1cfbc:	4798      	blx	r3
}
   1cfbe:	46c0      	nop			; (mov r8, r8)
   1cfc0:	46bd      	mov	sp, r7
   1cfc2:	b002      	add	sp, #8
   1cfc4:	bd80      	pop	{r7, pc}
   1cfc6:	46c0      	nop			; (mov r8, r8)
   1cfc8:	0001a609 	.word	0x0001a609
   1cfcc:	200041c8 	.word	0x200041c8
   1cfd0:	200041b4 	.word	0x200041b4
   1cfd4:	0001a62d 	.word	0x0001a62d

0001cfd8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cfd8:	b580      	push	{r7, lr}
   1cfda:	b082      	sub	sp, #8
   1cfdc:	af00      	add	r7, sp, #0
   1cfde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cfe0:	4b05      	ldr	r3, [pc, #20]	; (1cff8 <vTaskInternalSetTimeOutState+0x20>)
   1cfe2:	681a      	ldr	r2, [r3, #0]
   1cfe4:	687b      	ldr	r3, [r7, #4]
   1cfe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1cfe8:	4b04      	ldr	r3, [pc, #16]	; (1cffc <vTaskInternalSetTimeOutState+0x24>)
   1cfea:	681a      	ldr	r2, [r3, #0]
   1cfec:	687b      	ldr	r3, [r7, #4]
   1cfee:	605a      	str	r2, [r3, #4]
}
   1cff0:	46c0      	nop			; (mov r8, r8)
   1cff2:	46bd      	mov	sp, r7
   1cff4:	b002      	add	sp, #8
   1cff6:	bd80      	pop	{r7, pc}
   1cff8:	200041c8 	.word	0x200041c8
   1cffc:	200041b4 	.word	0x200041b4

0001d000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d000:	b580      	push	{r7, lr}
   1d002:	b086      	sub	sp, #24
   1d004:	af00      	add	r7, sp, #0
   1d006:	6078      	str	r0, [r7, #4]
   1d008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d00a:	687b      	ldr	r3, [r7, #4]
   1d00c:	2b00      	cmp	r3, #0
   1d00e:	d101      	bne.n	1d014 <xTaskCheckForTimeOut+0x14>
   1d010:	b672      	cpsid	i
   1d012:	e7fe      	b.n	1d012 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d014:	683b      	ldr	r3, [r7, #0]
   1d016:	2b00      	cmp	r3, #0
   1d018:	d101      	bne.n	1d01e <xTaskCheckForTimeOut+0x1e>
   1d01a:	b672      	cpsid	i
   1d01c:	e7fe      	b.n	1d01c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d01e:	4b1e      	ldr	r3, [pc, #120]	; (1d098 <xTaskCheckForTimeOut+0x98>)
   1d020:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d022:	4b1e      	ldr	r3, [pc, #120]	; (1d09c <xTaskCheckForTimeOut+0x9c>)
   1d024:	681b      	ldr	r3, [r3, #0]
   1d026:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d028:	687b      	ldr	r3, [r7, #4]
   1d02a:	685b      	ldr	r3, [r3, #4]
   1d02c:	693a      	ldr	r2, [r7, #16]
   1d02e:	1ad3      	subs	r3, r2, r3
   1d030:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d032:	683b      	ldr	r3, [r7, #0]
   1d034:	681b      	ldr	r3, [r3, #0]
   1d036:	3301      	adds	r3, #1
   1d038:	d102      	bne.n	1d040 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d03a:	2300      	movs	r3, #0
   1d03c:	617b      	str	r3, [r7, #20]
   1d03e:	e024      	b.n	1d08a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d040:	687b      	ldr	r3, [r7, #4]
   1d042:	681a      	ldr	r2, [r3, #0]
   1d044:	4b16      	ldr	r3, [pc, #88]	; (1d0a0 <xTaskCheckForTimeOut+0xa0>)
   1d046:	681b      	ldr	r3, [r3, #0]
   1d048:	429a      	cmp	r2, r3
   1d04a:	d007      	beq.n	1d05c <xTaskCheckForTimeOut+0x5c>
   1d04c:	687b      	ldr	r3, [r7, #4]
   1d04e:	685a      	ldr	r2, [r3, #4]
   1d050:	693b      	ldr	r3, [r7, #16]
   1d052:	429a      	cmp	r2, r3
   1d054:	d802      	bhi.n	1d05c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d056:	2301      	movs	r3, #1
   1d058:	617b      	str	r3, [r7, #20]
   1d05a:	e016      	b.n	1d08a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d05c:	683b      	ldr	r3, [r7, #0]
   1d05e:	681a      	ldr	r2, [r3, #0]
   1d060:	68fb      	ldr	r3, [r7, #12]
   1d062:	429a      	cmp	r2, r3
   1d064:	d90c      	bls.n	1d080 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d066:	683b      	ldr	r3, [r7, #0]
   1d068:	681a      	ldr	r2, [r3, #0]
   1d06a:	68fb      	ldr	r3, [r7, #12]
   1d06c:	1ad2      	subs	r2, r2, r3
   1d06e:	683b      	ldr	r3, [r7, #0]
   1d070:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d072:	687b      	ldr	r3, [r7, #4]
   1d074:	0018      	movs	r0, r3
   1d076:	4b0b      	ldr	r3, [pc, #44]	; (1d0a4 <xTaskCheckForTimeOut+0xa4>)
   1d078:	4798      	blx	r3
			xReturn = pdFALSE;
   1d07a:	2300      	movs	r3, #0
   1d07c:	617b      	str	r3, [r7, #20]
   1d07e:	e004      	b.n	1d08a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d080:	683b      	ldr	r3, [r7, #0]
   1d082:	2200      	movs	r2, #0
   1d084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d086:	2301      	movs	r3, #1
   1d088:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d08a:	4b07      	ldr	r3, [pc, #28]	; (1d0a8 <xTaskCheckForTimeOut+0xa8>)
   1d08c:	4798      	blx	r3

	return xReturn;
   1d08e:	697b      	ldr	r3, [r7, #20]
}
   1d090:	0018      	movs	r0, r3
   1d092:	46bd      	mov	sp, r7
   1d094:	b006      	add	sp, #24
   1d096:	bd80      	pop	{r7, pc}
   1d098:	0001a609 	.word	0x0001a609
   1d09c:	200041b4 	.word	0x200041b4
   1d0a0:	200041c8 	.word	0x200041c8
   1d0a4:	0001cfd9 	.word	0x0001cfd9
   1d0a8:	0001a62d 	.word	0x0001a62d

0001d0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d0ac:	b580      	push	{r7, lr}
   1d0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d0b0:	4b02      	ldr	r3, [pc, #8]	; (1d0bc <vTaskMissedYield+0x10>)
   1d0b2:	2201      	movs	r2, #1
   1d0b4:	601a      	str	r2, [r3, #0]
}
   1d0b6:	46c0      	nop			; (mov r8, r8)
   1d0b8:	46bd      	mov	sp, r7
   1d0ba:	bd80      	pop	{r7, pc}
   1d0bc:	200041c4 	.word	0x200041c4

0001d0c0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d0c0:	b580      	push	{r7, lr}
   1d0c2:	b084      	sub	sp, #16
   1d0c4:	af00      	add	r7, sp, #0
   1d0c6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d0c8:	687b      	ldr	r3, [r7, #4]
   1d0ca:	2b00      	cmp	r3, #0
   1d0cc:	d005      	beq.n	1d0da <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d0ce:	687b      	ldr	r3, [r7, #4]
   1d0d0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d0d2:	68bb      	ldr	r3, [r7, #8]
   1d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d0d6:	60fb      	str	r3, [r7, #12]
   1d0d8:	e001      	b.n	1d0de <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d0da:	2300      	movs	r3, #0
   1d0dc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d0de:	68fb      	ldr	r3, [r7, #12]
	}
   1d0e0:	0018      	movs	r0, r3
   1d0e2:	46bd      	mov	sp, r7
   1d0e4:	b004      	add	sp, #16
   1d0e6:	bd80      	pop	{r7, pc}

0001d0e8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d0e8:	b580      	push	{r7, lr}
   1d0ea:	b084      	sub	sp, #16
   1d0ec:	af00      	add	r7, sp, #0
   1d0ee:	6078      	str	r0, [r7, #4]
   1d0f0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d0f2:	687b      	ldr	r3, [r7, #4]
   1d0f4:	2b00      	cmp	r3, #0
   1d0f6:	d004      	beq.n	1d102 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d0f8:	687b      	ldr	r3, [r7, #4]
   1d0fa:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d0fc:	68fb      	ldr	r3, [r7, #12]
   1d0fe:	683a      	ldr	r2, [r7, #0]
   1d100:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d102:	46c0      	nop			; (mov r8, r8)
   1d104:	46bd      	mov	sp, r7
   1d106:	b004      	add	sp, #16
   1d108:	bd80      	pop	{r7, pc}
	...

0001d10c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d10c:	b580      	push	{r7, lr}
   1d10e:	b082      	sub	sp, #8
   1d110:	af00      	add	r7, sp, #0
   1d112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d114:	4b04      	ldr	r3, [pc, #16]	; (1d128 <prvIdleTask+0x1c>)
   1d116:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d118:	4b04      	ldr	r3, [pc, #16]	; (1d12c <prvIdleTask+0x20>)
   1d11a:	681b      	ldr	r3, [r3, #0]
   1d11c:	2b01      	cmp	r3, #1
   1d11e:	d9f9      	bls.n	1d114 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d120:	4b03      	ldr	r3, [pc, #12]	; (1d130 <prvIdleTask+0x24>)
   1d122:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d124:	e7f6      	b.n	1d114 <prvIdleTask+0x8>
   1d126:	46c0      	nop			; (mov r8, r8)
   1d128:	0001d1c1 	.word	0x0001d1c1
   1d12c:	200040dc 	.word	0x200040dc
   1d130:	0001a5f1 	.word	0x0001a5f1

0001d134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d134:	b580      	push	{r7, lr}
   1d136:	b082      	sub	sp, #8
   1d138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d13a:	2300      	movs	r3, #0
   1d13c:	607b      	str	r3, [r7, #4]
   1d13e:	e00c      	b.n	1d15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d140:	687a      	ldr	r2, [r7, #4]
   1d142:	0013      	movs	r3, r2
   1d144:	009b      	lsls	r3, r3, #2
   1d146:	189b      	adds	r3, r3, r2
   1d148:	009b      	lsls	r3, r3, #2
   1d14a:	4a14      	ldr	r2, [pc, #80]	; (1d19c <prvInitialiseTaskLists+0x68>)
   1d14c:	189b      	adds	r3, r3, r2
   1d14e:	0018      	movs	r0, r3
   1d150:	4b13      	ldr	r3, [pc, #76]	; (1d1a0 <prvInitialiseTaskLists+0x6c>)
   1d152:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d154:	687b      	ldr	r3, [r7, #4]
   1d156:	3301      	adds	r3, #1
   1d158:	607b      	str	r3, [r7, #4]
   1d15a:	687b      	ldr	r3, [r7, #4]
   1d15c:	2b04      	cmp	r3, #4
   1d15e:	d9ef      	bls.n	1d140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d160:	4b10      	ldr	r3, [pc, #64]	; (1d1a4 <prvInitialiseTaskLists+0x70>)
   1d162:	0018      	movs	r0, r3
   1d164:	4b0e      	ldr	r3, [pc, #56]	; (1d1a0 <prvInitialiseTaskLists+0x6c>)
   1d166:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d168:	4b0f      	ldr	r3, [pc, #60]	; (1d1a8 <prvInitialiseTaskLists+0x74>)
   1d16a:	0018      	movs	r0, r3
   1d16c:	4b0c      	ldr	r3, [pc, #48]	; (1d1a0 <prvInitialiseTaskLists+0x6c>)
   1d16e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d170:	4b0e      	ldr	r3, [pc, #56]	; (1d1ac <prvInitialiseTaskLists+0x78>)
   1d172:	0018      	movs	r0, r3
   1d174:	4b0a      	ldr	r3, [pc, #40]	; (1d1a0 <prvInitialiseTaskLists+0x6c>)
   1d176:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d178:	4b0d      	ldr	r3, [pc, #52]	; (1d1b0 <prvInitialiseTaskLists+0x7c>)
   1d17a:	0018      	movs	r0, r3
   1d17c:	4b08      	ldr	r3, [pc, #32]	; (1d1a0 <prvInitialiseTaskLists+0x6c>)
   1d17e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d180:	4b0c      	ldr	r3, [pc, #48]	; (1d1b4 <prvInitialiseTaskLists+0x80>)
   1d182:	0018      	movs	r0, r3
   1d184:	4b06      	ldr	r3, [pc, #24]	; (1d1a0 <prvInitialiseTaskLists+0x6c>)
   1d186:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d188:	4b0b      	ldr	r3, [pc, #44]	; (1d1b8 <prvInitialiseTaskLists+0x84>)
   1d18a:	4a06      	ldr	r2, [pc, #24]	; (1d1a4 <prvInitialiseTaskLists+0x70>)
   1d18c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d18e:	4b0b      	ldr	r3, [pc, #44]	; (1d1bc <prvInitialiseTaskLists+0x88>)
   1d190:	4a05      	ldr	r2, [pc, #20]	; (1d1a8 <prvInitialiseTaskLists+0x74>)
   1d192:	601a      	str	r2, [r3, #0]
}
   1d194:	46c0      	nop			; (mov r8, r8)
   1d196:	46bd      	mov	sp, r7
   1d198:	b002      	add	sp, #8
   1d19a:	bd80      	pop	{r7, pc}
   1d19c:	200040dc 	.word	0x200040dc
   1d1a0:	0001a37d 	.word	0x0001a37d
   1d1a4:	20004140 	.word	0x20004140
   1d1a8:	20004154 	.word	0x20004154
   1d1ac:	20004170 	.word	0x20004170
   1d1b0:	20004184 	.word	0x20004184
   1d1b4:	2000419c 	.word	0x2000419c
   1d1b8:	20004168 	.word	0x20004168
   1d1bc:	2000416c 	.word	0x2000416c

0001d1c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d1c0:	b580      	push	{r7, lr}
   1d1c2:	b082      	sub	sp, #8
   1d1c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d1c6:	e01a      	b.n	1d1fe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d1c8:	4b11      	ldr	r3, [pc, #68]	; (1d210 <prvCheckTasksWaitingTermination+0x50>)
   1d1ca:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d1cc:	4b11      	ldr	r3, [pc, #68]	; (1d214 <prvCheckTasksWaitingTermination+0x54>)
   1d1ce:	68db      	ldr	r3, [r3, #12]
   1d1d0:	68db      	ldr	r3, [r3, #12]
   1d1d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d1d4:	687b      	ldr	r3, [r7, #4]
   1d1d6:	3304      	adds	r3, #4
   1d1d8:	0018      	movs	r0, r3
   1d1da:	4b0f      	ldr	r3, [pc, #60]	; (1d218 <prvCheckTasksWaitingTermination+0x58>)
   1d1dc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d1de:	4b0f      	ldr	r3, [pc, #60]	; (1d21c <prvCheckTasksWaitingTermination+0x5c>)
   1d1e0:	681b      	ldr	r3, [r3, #0]
   1d1e2:	1e5a      	subs	r2, r3, #1
   1d1e4:	4b0d      	ldr	r3, [pc, #52]	; (1d21c <prvCheckTasksWaitingTermination+0x5c>)
   1d1e6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d1e8:	4b0d      	ldr	r3, [pc, #52]	; (1d220 <prvCheckTasksWaitingTermination+0x60>)
   1d1ea:	681b      	ldr	r3, [r3, #0]
   1d1ec:	1e5a      	subs	r2, r3, #1
   1d1ee:	4b0c      	ldr	r3, [pc, #48]	; (1d220 <prvCheckTasksWaitingTermination+0x60>)
   1d1f0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d1f2:	4b0c      	ldr	r3, [pc, #48]	; (1d224 <prvCheckTasksWaitingTermination+0x64>)
   1d1f4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d1f6:	687b      	ldr	r3, [r7, #4]
   1d1f8:	0018      	movs	r0, r3
   1d1fa:	4b0b      	ldr	r3, [pc, #44]	; (1d228 <prvCheckTasksWaitingTermination+0x68>)
   1d1fc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d1fe:	4b08      	ldr	r3, [pc, #32]	; (1d220 <prvCheckTasksWaitingTermination+0x60>)
   1d200:	681b      	ldr	r3, [r3, #0]
   1d202:	2b00      	cmp	r3, #0
   1d204:	d1e0      	bne.n	1d1c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d206:	46c0      	nop			; (mov r8, r8)
   1d208:	46bd      	mov	sp, r7
   1d20a:	b002      	add	sp, #8
   1d20c:	bd80      	pop	{r7, pc}
   1d20e:	46c0      	nop			; (mov r8, r8)
   1d210:	0001a609 	.word	0x0001a609
   1d214:	20004184 	.word	0x20004184
   1d218:	0001a47f 	.word	0x0001a47f
   1d21c:	200041b0 	.word	0x200041b0
   1d220:	20004198 	.word	0x20004198
   1d224:	0001a62d 	.word	0x0001a62d
   1d228:	0001d29d 	.word	0x0001d29d

0001d22c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d22c:	b580      	push	{r7, lr}
   1d22e:	b084      	sub	sp, #16
   1d230:	af00      	add	r7, sp, #0
   1d232:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d234:	2300      	movs	r3, #0
   1d236:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d238:	e005      	b.n	1d246 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d23a:	687b      	ldr	r3, [r7, #4]
   1d23c:	3301      	adds	r3, #1
   1d23e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d240:	68fb      	ldr	r3, [r7, #12]
   1d242:	3301      	adds	r3, #1
   1d244:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d246:	687b      	ldr	r3, [r7, #4]
   1d248:	781b      	ldrb	r3, [r3, #0]
   1d24a:	2ba5      	cmp	r3, #165	; 0xa5
   1d24c:	d0f5      	beq.n	1d23a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d24e:	68fb      	ldr	r3, [r7, #12]
   1d250:	089b      	lsrs	r3, r3, #2
   1d252:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d254:	68fb      	ldr	r3, [r7, #12]
   1d256:	b29b      	uxth	r3, r3
	}
   1d258:	0018      	movs	r0, r3
   1d25a:	46bd      	mov	sp, r7
   1d25c:	b004      	add	sp, #16
   1d25e:	bd80      	pop	{r7, pc}

0001d260 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d260:	b580      	push	{r7, lr}
   1d262:	b086      	sub	sp, #24
   1d264:	af00      	add	r7, sp, #0
   1d266:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d268:	687b      	ldr	r3, [r7, #4]
   1d26a:	2b00      	cmp	r3, #0
   1d26c:	d102      	bne.n	1d274 <uxTaskGetStackHighWaterMark+0x14>
   1d26e:	4b09      	ldr	r3, [pc, #36]	; (1d294 <uxTaskGetStackHighWaterMark+0x34>)
   1d270:	681b      	ldr	r3, [r3, #0]
   1d272:	e000      	b.n	1d276 <uxTaskGetStackHighWaterMark+0x16>
   1d274:	687b      	ldr	r3, [r7, #4]
   1d276:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d278:	697b      	ldr	r3, [r7, #20]
   1d27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d27c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d27e:	693b      	ldr	r3, [r7, #16]
   1d280:	0018      	movs	r0, r3
   1d282:	4b05      	ldr	r3, [pc, #20]	; (1d298 <uxTaskGetStackHighWaterMark+0x38>)
   1d284:	4798      	blx	r3
   1d286:	0003      	movs	r3, r0
   1d288:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d28a:	68fb      	ldr	r3, [r7, #12]
	}
   1d28c:	0018      	movs	r0, r3
   1d28e:	46bd      	mov	sp, r7
   1d290:	b006      	add	sp, #24
   1d292:	bd80      	pop	{r7, pc}
   1d294:	200040d8 	.word	0x200040d8
   1d298:	0001d22d 	.word	0x0001d22d

0001d29c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d29c:	b580      	push	{r7, lr}
   1d29e:	b082      	sub	sp, #8
   1d2a0:	af00      	add	r7, sp, #0
   1d2a2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d2a4:	687b      	ldr	r3, [r7, #4]
   1d2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d2a8:	0018      	movs	r0, r3
   1d2aa:	4b05      	ldr	r3, [pc, #20]	; (1d2c0 <prvDeleteTCB+0x24>)
   1d2ac:	4798      	blx	r3
			vPortFree( pxTCB );
   1d2ae:	687b      	ldr	r3, [r7, #4]
   1d2b0:	0018      	movs	r0, r3
   1d2b2:	4b03      	ldr	r3, [pc, #12]	; (1d2c0 <prvDeleteTCB+0x24>)
   1d2b4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d2b6:	46c0      	nop			; (mov r8, r8)
   1d2b8:	46bd      	mov	sp, r7
   1d2ba:	b002      	add	sp, #8
   1d2bc:	bd80      	pop	{r7, pc}
   1d2be:	46c0      	nop			; (mov r8, r8)
   1d2c0:	0001a805 	.word	0x0001a805

0001d2c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d2c4:	b580      	push	{r7, lr}
   1d2c6:	b082      	sub	sp, #8
   1d2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d2ca:	4b0e      	ldr	r3, [pc, #56]	; (1d304 <prvResetNextTaskUnblockTime+0x40>)
   1d2cc:	681b      	ldr	r3, [r3, #0]
   1d2ce:	681b      	ldr	r3, [r3, #0]
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d101      	bne.n	1d2d8 <prvResetNextTaskUnblockTime+0x14>
   1d2d4:	2301      	movs	r3, #1
   1d2d6:	e000      	b.n	1d2da <prvResetNextTaskUnblockTime+0x16>
   1d2d8:	2300      	movs	r3, #0
   1d2da:	2b00      	cmp	r3, #0
   1d2dc:	d004      	beq.n	1d2e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d2de:	4b0a      	ldr	r3, [pc, #40]	; (1d308 <prvResetNextTaskUnblockTime+0x44>)
   1d2e0:	2201      	movs	r2, #1
   1d2e2:	4252      	negs	r2, r2
   1d2e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d2e6:	e008      	b.n	1d2fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d2e8:	4b06      	ldr	r3, [pc, #24]	; (1d304 <prvResetNextTaskUnblockTime+0x40>)
   1d2ea:	681b      	ldr	r3, [r3, #0]
   1d2ec:	68db      	ldr	r3, [r3, #12]
   1d2ee:	68db      	ldr	r3, [r3, #12]
   1d2f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d2f2:	687b      	ldr	r3, [r7, #4]
   1d2f4:	685a      	ldr	r2, [r3, #4]
   1d2f6:	4b04      	ldr	r3, [pc, #16]	; (1d308 <prvResetNextTaskUnblockTime+0x44>)
   1d2f8:	601a      	str	r2, [r3, #0]
}
   1d2fa:	46c0      	nop			; (mov r8, r8)
   1d2fc:	46bd      	mov	sp, r7
   1d2fe:	b002      	add	sp, #8
   1d300:	bd80      	pop	{r7, pc}
   1d302:	46c0      	nop			; (mov r8, r8)
   1d304:	20004168 	.word	0x20004168
   1d308:	200041d0 	.word	0x200041d0

0001d30c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d30c:	b580      	push	{r7, lr}
   1d30e:	b082      	sub	sp, #8
   1d310:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d312:	4b04      	ldr	r3, [pc, #16]	; (1d324 <xTaskGetCurrentTaskHandle+0x18>)
   1d314:	681b      	ldr	r3, [r3, #0]
   1d316:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d318:	687b      	ldr	r3, [r7, #4]
	}
   1d31a:	0018      	movs	r0, r3
   1d31c:	46bd      	mov	sp, r7
   1d31e:	b002      	add	sp, #8
   1d320:	bd80      	pop	{r7, pc}
   1d322:	46c0      	nop			; (mov r8, r8)
   1d324:	200040d8 	.word	0x200040d8

0001d328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d328:	b580      	push	{r7, lr}
   1d32a:	b082      	sub	sp, #8
   1d32c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d32e:	4b0a      	ldr	r3, [pc, #40]	; (1d358 <xTaskGetSchedulerState+0x30>)
   1d330:	681b      	ldr	r3, [r3, #0]
   1d332:	2b00      	cmp	r3, #0
   1d334:	d102      	bne.n	1d33c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d336:	2301      	movs	r3, #1
   1d338:	607b      	str	r3, [r7, #4]
   1d33a:	e008      	b.n	1d34e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d33c:	4b07      	ldr	r3, [pc, #28]	; (1d35c <xTaskGetSchedulerState+0x34>)
   1d33e:	681b      	ldr	r3, [r3, #0]
   1d340:	2b00      	cmp	r3, #0
   1d342:	d102      	bne.n	1d34a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d344:	2302      	movs	r3, #2
   1d346:	607b      	str	r3, [r7, #4]
   1d348:	e001      	b.n	1d34e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d34a:	2300      	movs	r3, #0
   1d34c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d34e:	687b      	ldr	r3, [r7, #4]
	}
   1d350:	0018      	movs	r0, r3
   1d352:	46bd      	mov	sp, r7
   1d354:	b002      	add	sp, #8
   1d356:	bd80      	pop	{r7, pc}
   1d358:	200041bc 	.word	0x200041bc
   1d35c:	200041d8 	.word	0x200041d8

0001d360 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d360:	b590      	push	{r4, r7, lr}
   1d362:	b085      	sub	sp, #20
   1d364:	af00      	add	r7, sp, #0
   1d366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d368:	687b      	ldr	r3, [r7, #4]
   1d36a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d36c:	2300      	movs	r3, #0
   1d36e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d370:	687b      	ldr	r3, [r7, #4]
   1d372:	2b00      	cmp	r3, #0
   1d374:	d100      	bne.n	1d378 <xTaskPriorityInherit+0x18>
   1d376:	e09d      	b.n	1d4b4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d378:	68bb      	ldr	r3, [r7, #8]
   1d37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d37c:	4b50      	ldr	r3, [pc, #320]	; (1d4c0 <xTaskPriorityInherit+0x160>)
   1d37e:	681b      	ldr	r3, [r3, #0]
   1d380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d382:	429a      	cmp	r2, r3
   1d384:	d300      	bcc.n	1d388 <xTaskPriorityInherit+0x28>
   1d386:	e08c      	b.n	1d4a2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d388:	68bb      	ldr	r3, [r7, #8]
   1d38a:	699b      	ldr	r3, [r3, #24]
   1d38c:	2b00      	cmp	r3, #0
   1d38e:	db06      	blt.n	1d39e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d390:	4b4b      	ldr	r3, [pc, #300]	; (1d4c0 <xTaskPriorityInherit+0x160>)
   1d392:	681b      	ldr	r3, [r3, #0]
   1d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d396:	2205      	movs	r2, #5
   1d398:	1ad2      	subs	r2, r2, r3
   1d39a:	68bb      	ldr	r3, [r7, #8]
   1d39c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d39e:	68bb      	ldr	r3, [r7, #8]
   1d3a0:	6959      	ldr	r1, [r3, #20]
   1d3a2:	68bb      	ldr	r3, [r7, #8]
   1d3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3a6:	0013      	movs	r3, r2
   1d3a8:	009b      	lsls	r3, r3, #2
   1d3aa:	189b      	adds	r3, r3, r2
   1d3ac:	009b      	lsls	r3, r3, #2
   1d3ae:	4a45      	ldr	r2, [pc, #276]	; (1d4c4 <xTaskPriorityInherit+0x164>)
   1d3b0:	189b      	adds	r3, r3, r2
   1d3b2:	4299      	cmp	r1, r3
   1d3b4:	d101      	bne.n	1d3ba <xTaskPriorityInherit+0x5a>
   1d3b6:	2301      	movs	r3, #1
   1d3b8:	e000      	b.n	1d3bc <xTaskPriorityInherit+0x5c>
   1d3ba:	2300      	movs	r3, #0
   1d3bc:	2b00      	cmp	r3, #0
   1d3be:	d037      	beq.n	1d430 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d3c0:	68bb      	ldr	r3, [r7, #8]
   1d3c2:	3304      	adds	r3, #4
   1d3c4:	0018      	movs	r0, r3
   1d3c6:	4b40      	ldr	r3, [pc, #256]	; (1d4c8 <xTaskPriorityInherit+0x168>)
   1d3c8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d3ca:	4b3d      	ldr	r3, [pc, #244]	; (1d4c0 <xTaskPriorityInherit+0x160>)
   1d3cc:	681b      	ldr	r3, [r3, #0]
   1d3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3d0:	68bb      	ldr	r3, [r7, #8]
   1d3d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1d3d4:	68bb      	ldr	r3, [r7, #8]
   1d3d6:	0018      	movs	r0, r3
   1d3d8:	4b3c      	ldr	r3, [pc, #240]	; (1d4cc <xTaskPriorityInherit+0x16c>)
   1d3da:	4798      	blx	r3
   1d3dc:	0003      	movs	r3, r0
   1d3de:	001a      	movs	r2, r3
   1d3e0:	4b3b      	ldr	r3, [pc, #236]	; (1d4d0 <xTaskPriorityInherit+0x170>)
   1d3e2:	881b      	ldrh	r3, [r3, #0]
   1d3e4:	4013      	ands	r3, r2
   1d3e6:	b29b      	uxth	r3, r3
   1d3e8:	2b00      	cmp	r3, #0
   1d3ea:	d008      	beq.n	1d3fe <xTaskPriorityInherit+0x9e>
   1d3ec:	68bb      	ldr	r3, [r7, #8]
   1d3ee:	0018      	movs	r0, r3
   1d3f0:	4b38      	ldr	r3, [pc, #224]	; (1d4d4 <xTaskPriorityInherit+0x174>)
   1d3f2:	4798      	blx	r3
   1d3f4:	0003      	movs	r3, r0
   1d3f6:	b2db      	uxtb	r3, r3
   1d3f8:	0018      	movs	r0, r3
   1d3fa:	4b37      	ldr	r3, [pc, #220]	; (1d4d8 <xTaskPriorityInherit+0x178>)
   1d3fc:	4798      	blx	r3
   1d3fe:	68bb      	ldr	r3, [r7, #8]
   1d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d402:	4b36      	ldr	r3, [pc, #216]	; (1d4dc <xTaskPriorityInherit+0x17c>)
   1d404:	681b      	ldr	r3, [r3, #0]
   1d406:	429a      	cmp	r2, r3
   1d408:	d903      	bls.n	1d412 <xTaskPriorityInherit+0xb2>
   1d40a:	68bb      	ldr	r3, [r7, #8]
   1d40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d40e:	4b33      	ldr	r3, [pc, #204]	; (1d4dc <xTaskPriorityInherit+0x17c>)
   1d410:	601a      	str	r2, [r3, #0]
   1d412:	68bb      	ldr	r3, [r7, #8]
   1d414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d416:	0013      	movs	r3, r2
   1d418:	009b      	lsls	r3, r3, #2
   1d41a:	189b      	adds	r3, r3, r2
   1d41c:	009b      	lsls	r3, r3, #2
   1d41e:	4a29      	ldr	r2, [pc, #164]	; (1d4c4 <xTaskPriorityInherit+0x164>)
   1d420:	189a      	adds	r2, r3, r2
   1d422:	68bb      	ldr	r3, [r7, #8]
   1d424:	3304      	adds	r3, #4
   1d426:	0019      	movs	r1, r3
   1d428:	0010      	movs	r0, r2
   1d42a:	4b2d      	ldr	r3, [pc, #180]	; (1d4e0 <xTaskPriorityInherit+0x180>)
   1d42c:	4798      	blx	r3
   1d42e:	e004      	b.n	1d43a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d430:	4b23      	ldr	r3, [pc, #140]	; (1d4c0 <xTaskPriorityInherit+0x160>)
   1d432:	681b      	ldr	r3, [r3, #0]
   1d434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d436:	68bb      	ldr	r3, [r7, #8]
   1d438:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1d43a:	68bb      	ldr	r3, [r7, #8]
   1d43c:	0018      	movs	r0, r3
   1d43e:	4b23      	ldr	r3, [pc, #140]	; (1d4cc <xTaskPriorityInherit+0x16c>)
   1d440:	4798      	blx	r3
   1d442:	0003      	movs	r3, r0
   1d444:	001a      	movs	r2, r3
   1d446:	4b22      	ldr	r3, [pc, #136]	; (1d4d0 <xTaskPriorityInherit+0x170>)
   1d448:	881b      	ldrh	r3, [r3, #0]
   1d44a:	4013      	ands	r3, r2
   1d44c:	b29b      	uxth	r3, r3
   1d44e:	2b00      	cmp	r3, #0
   1d450:	d024      	beq.n	1d49c <xTaskPriorityInherit+0x13c>
   1d452:	68bb      	ldr	r3, [r7, #8]
   1d454:	0018      	movs	r0, r3
   1d456:	4b1f      	ldr	r3, [pc, #124]	; (1d4d4 <xTaskPriorityInherit+0x174>)
   1d458:	4798      	blx	r3
   1d45a:	0003      	movs	r3, r0
   1d45c:	b2db      	uxtb	r3, r3
   1d45e:	001c      	movs	r4, r3
   1d460:	68bb      	ldr	r3, [r7, #8]
   1d462:	0018      	movs	r0, r3
   1d464:	4b1b      	ldr	r3, [pc, #108]	; (1d4d4 <xTaskPriorityInherit+0x174>)
   1d466:	4798      	blx	r3
   1d468:	0003      	movs	r3, r0
   1d46a:	b2db      	uxtb	r3, r3
   1d46c:	0019      	movs	r1, r3
   1d46e:	2003      	movs	r0, #3
   1d470:	4b1c      	ldr	r3, [pc, #112]	; (1d4e4 <xTaskPriorityInherit+0x184>)
   1d472:	4798      	blx	r3
   1d474:	0003      	movs	r3, r0
   1d476:	0022      	movs	r2, r4
   1d478:	2103      	movs	r1, #3
   1d47a:	208e      	movs	r0, #142	; 0x8e
   1d47c:	4c1a      	ldr	r4, [pc, #104]	; (1d4e8 <xTaskPriorityInherit+0x188>)
   1d47e:	47a0      	blx	r4
   1d480:	68bb      	ldr	r3, [r7, #8]
   1d482:	0018      	movs	r0, r3
   1d484:	4b13      	ldr	r3, [pc, #76]	; (1d4d4 <xTaskPriorityInherit+0x174>)
   1d486:	4798      	blx	r3
   1d488:	0003      	movs	r3, r0
   1d48a:	b2d9      	uxtb	r1, r3
   1d48c:	4b0c      	ldr	r3, [pc, #48]	; (1d4c0 <xTaskPriorityInherit+0x160>)
   1d48e:	681b      	ldr	r3, [r3, #0]
   1d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d492:	b2db      	uxtb	r3, r3
   1d494:	001a      	movs	r2, r3
   1d496:	2003      	movs	r0, #3
   1d498:	4b14      	ldr	r3, [pc, #80]	; (1d4ec <xTaskPriorityInherit+0x18c>)
   1d49a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1d49c:	2301      	movs	r3, #1
   1d49e:	60fb      	str	r3, [r7, #12]
   1d4a0:	e008      	b.n	1d4b4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1d4a2:	68bb      	ldr	r3, [r7, #8]
   1d4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d4a6:	4b06      	ldr	r3, [pc, #24]	; (1d4c0 <xTaskPriorityInherit+0x160>)
   1d4a8:	681b      	ldr	r3, [r3, #0]
   1d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d4ac:	429a      	cmp	r2, r3
   1d4ae:	d201      	bcs.n	1d4b4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1d4b0:	2301      	movs	r3, #1
   1d4b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d4b4:	68fb      	ldr	r3, [r7, #12]
	}
   1d4b6:	0018      	movs	r0, r3
   1d4b8:	46bd      	mov	sp, r7
   1d4ba:	b005      	add	sp, #20
   1d4bc:	bd90      	pop	{r4, r7, pc}
   1d4be:	46c0      	nop			; (mov r8, r8)
   1d4c0:	200040d8 	.word	0x200040d8
   1d4c4:	200040dc 	.word	0x200040dc
   1d4c8:	0001a47f 	.word	0x0001a47f
   1d4cc:	00018605 	.word	0x00018605
   1d4d0:	20000110 	.word	0x20000110
   1d4d4:	000185e5 	.word	0x000185e5
   1d4d8:	00018db5 	.word	0x00018db5
   1d4dc:	200041b8 	.word	0x200041b8
   1d4e0:	0001a3cf 	.word	0x0001a3cf
   1d4e4:	000195bd 	.word	0x000195bd
   1d4e8:	0001912d 	.word	0x0001912d
   1d4ec:	00019519 	.word	0x00019519

0001d4f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1d4f0:	b590      	push	{r4, r7, lr}
   1d4f2:	b085      	sub	sp, #20
   1d4f4:	af00      	add	r7, sp, #0
   1d4f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d4f8:	687b      	ldr	r3, [r7, #4]
   1d4fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d4fc:	2300      	movs	r3, #0
   1d4fe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d500:	687b      	ldr	r3, [r7, #4]
   1d502:	2b00      	cmp	r3, #0
   1d504:	d100      	bne.n	1d508 <xTaskPriorityDisinherit+0x18>
   1d506:	e089      	b.n	1d61c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1d508:	4b47      	ldr	r3, [pc, #284]	; (1d628 <xTaskPriorityDisinherit+0x138>)
   1d50a:	681b      	ldr	r3, [r3, #0]
   1d50c:	68ba      	ldr	r2, [r7, #8]
   1d50e:	429a      	cmp	r2, r3
   1d510:	d001      	beq.n	1d516 <xTaskPriorityDisinherit+0x26>
   1d512:	b672      	cpsid	i
   1d514:	e7fe      	b.n	1d514 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1d516:	68bb      	ldr	r3, [r7, #8]
   1d518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d51a:	2b00      	cmp	r3, #0
   1d51c:	d101      	bne.n	1d522 <xTaskPriorityDisinherit+0x32>
   1d51e:	b672      	cpsid	i
   1d520:	e7fe      	b.n	1d520 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1d522:	68bb      	ldr	r3, [r7, #8]
   1d524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d526:	1e5a      	subs	r2, r3, #1
   1d528:	68bb      	ldr	r3, [r7, #8]
   1d52a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1d52c:	68bb      	ldr	r3, [r7, #8]
   1d52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d530:	68bb      	ldr	r3, [r7, #8]
   1d532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d534:	429a      	cmp	r2, r3
   1d536:	d071      	beq.n	1d61c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1d538:	68bb      	ldr	r3, [r7, #8]
   1d53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d53c:	2b00      	cmp	r3, #0
   1d53e:	d16d      	bne.n	1d61c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d540:	68bb      	ldr	r3, [r7, #8]
   1d542:	3304      	adds	r3, #4
   1d544:	0018      	movs	r0, r3
   1d546:	4b39      	ldr	r3, [pc, #228]	; (1d62c <xTaskPriorityDisinherit+0x13c>)
   1d548:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d54a:	68bb      	ldr	r3, [r7, #8]
   1d54c:	0018      	movs	r0, r3
   1d54e:	4b38      	ldr	r3, [pc, #224]	; (1d630 <xTaskPriorityDisinherit+0x140>)
   1d550:	4798      	blx	r3
   1d552:	0003      	movs	r3, r0
   1d554:	001a      	movs	r2, r3
   1d556:	4b37      	ldr	r3, [pc, #220]	; (1d634 <xTaskPriorityDisinherit+0x144>)
   1d558:	881b      	ldrh	r3, [r3, #0]
   1d55a:	4013      	ands	r3, r2
   1d55c:	b29b      	uxth	r3, r3
   1d55e:	2b00      	cmp	r3, #0
   1d560:	d023      	beq.n	1d5aa <xTaskPriorityDisinherit+0xba>
   1d562:	68bb      	ldr	r3, [r7, #8]
   1d564:	0018      	movs	r0, r3
   1d566:	4b34      	ldr	r3, [pc, #208]	; (1d638 <xTaskPriorityDisinherit+0x148>)
   1d568:	4798      	blx	r3
   1d56a:	0003      	movs	r3, r0
   1d56c:	b2db      	uxtb	r3, r3
   1d56e:	001c      	movs	r4, r3
   1d570:	68bb      	ldr	r3, [r7, #8]
   1d572:	0018      	movs	r0, r3
   1d574:	4b30      	ldr	r3, [pc, #192]	; (1d638 <xTaskPriorityDisinherit+0x148>)
   1d576:	4798      	blx	r3
   1d578:	0003      	movs	r3, r0
   1d57a:	b2db      	uxtb	r3, r3
   1d57c:	0019      	movs	r1, r3
   1d57e:	2003      	movs	r0, #3
   1d580:	4b2e      	ldr	r3, [pc, #184]	; (1d63c <xTaskPriorityDisinherit+0x14c>)
   1d582:	4798      	blx	r3
   1d584:	0003      	movs	r3, r0
   1d586:	0022      	movs	r2, r4
   1d588:	2103      	movs	r1, #3
   1d58a:	208f      	movs	r0, #143	; 0x8f
   1d58c:	4c2c      	ldr	r4, [pc, #176]	; (1d640 <xTaskPriorityDisinherit+0x150>)
   1d58e:	47a0      	blx	r4
   1d590:	68bb      	ldr	r3, [r7, #8]
   1d592:	0018      	movs	r0, r3
   1d594:	4b28      	ldr	r3, [pc, #160]	; (1d638 <xTaskPriorityDisinherit+0x148>)
   1d596:	4798      	blx	r3
   1d598:	0003      	movs	r3, r0
   1d59a:	b2d9      	uxtb	r1, r3
   1d59c:	68bb      	ldr	r3, [r7, #8]
   1d59e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5a0:	b2db      	uxtb	r3, r3
   1d5a2:	001a      	movs	r2, r3
   1d5a4:	2003      	movs	r0, #3
   1d5a6:	4b27      	ldr	r3, [pc, #156]	; (1d644 <xTaskPriorityDisinherit+0x154>)
   1d5a8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d5aa:	68bb      	ldr	r3, [r7, #8]
   1d5ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d5ae:	68bb      	ldr	r3, [r7, #8]
   1d5b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d5b2:	68bb      	ldr	r3, [r7, #8]
   1d5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d5b6:	2205      	movs	r2, #5
   1d5b8:	1ad2      	subs	r2, r2, r3
   1d5ba:	68bb      	ldr	r3, [r7, #8]
   1d5bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d5be:	68bb      	ldr	r3, [r7, #8]
   1d5c0:	0018      	movs	r0, r3
   1d5c2:	4b1b      	ldr	r3, [pc, #108]	; (1d630 <xTaskPriorityDisinherit+0x140>)
   1d5c4:	4798      	blx	r3
   1d5c6:	0003      	movs	r3, r0
   1d5c8:	001a      	movs	r2, r3
   1d5ca:	4b1a      	ldr	r3, [pc, #104]	; (1d634 <xTaskPriorityDisinherit+0x144>)
   1d5cc:	881b      	ldrh	r3, [r3, #0]
   1d5ce:	4013      	ands	r3, r2
   1d5d0:	b29b      	uxth	r3, r3
   1d5d2:	2b00      	cmp	r3, #0
   1d5d4:	d008      	beq.n	1d5e8 <xTaskPriorityDisinherit+0xf8>
   1d5d6:	68bb      	ldr	r3, [r7, #8]
   1d5d8:	0018      	movs	r0, r3
   1d5da:	4b17      	ldr	r3, [pc, #92]	; (1d638 <xTaskPriorityDisinherit+0x148>)
   1d5dc:	4798      	blx	r3
   1d5de:	0003      	movs	r3, r0
   1d5e0:	b2db      	uxtb	r3, r3
   1d5e2:	0018      	movs	r0, r3
   1d5e4:	4b18      	ldr	r3, [pc, #96]	; (1d648 <xTaskPriorityDisinherit+0x158>)
   1d5e6:	4798      	blx	r3
   1d5e8:	68bb      	ldr	r3, [r7, #8]
   1d5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5ec:	4b17      	ldr	r3, [pc, #92]	; (1d64c <xTaskPriorityDisinherit+0x15c>)
   1d5ee:	681b      	ldr	r3, [r3, #0]
   1d5f0:	429a      	cmp	r2, r3
   1d5f2:	d903      	bls.n	1d5fc <xTaskPriorityDisinherit+0x10c>
   1d5f4:	68bb      	ldr	r3, [r7, #8]
   1d5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5f8:	4b14      	ldr	r3, [pc, #80]	; (1d64c <xTaskPriorityDisinherit+0x15c>)
   1d5fa:	601a      	str	r2, [r3, #0]
   1d5fc:	68bb      	ldr	r3, [r7, #8]
   1d5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d600:	0013      	movs	r3, r2
   1d602:	009b      	lsls	r3, r3, #2
   1d604:	189b      	adds	r3, r3, r2
   1d606:	009b      	lsls	r3, r3, #2
   1d608:	4a11      	ldr	r2, [pc, #68]	; (1d650 <xTaskPriorityDisinherit+0x160>)
   1d60a:	189a      	adds	r2, r3, r2
   1d60c:	68bb      	ldr	r3, [r7, #8]
   1d60e:	3304      	adds	r3, #4
   1d610:	0019      	movs	r1, r3
   1d612:	0010      	movs	r0, r2
   1d614:	4b0f      	ldr	r3, [pc, #60]	; (1d654 <xTaskPriorityDisinherit+0x164>)
   1d616:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d618:	2301      	movs	r3, #1
   1d61a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d61c:	68fb      	ldr	r3, [r7, #12]
	}
   1d61e:	0018      	movs	r0, r3
   1d620:	46bd      	mov	sp, r7
   1d622:	b005      	add	sp, #20
   1d624:	bd90      	pop	{r4, r7, pc}
   1d626:	46c0      	nop			; (mov r8, r8)
   1d628:	200040d8 	.word	0x200040d8
   1d62c:	0001a47f 	.word	0x0001a47f
   1d630:	00018605 	.word	0x00018605
   1d634:	20000110 	.word	0x20000110
   1d638:	000185e5 	.word	0x000185e5
   1d63c:	000195bd 	.word	0x000195bd
   1d640:	0001912d 	.word	0x0001912d
   1d644:	00019519 	.word	0x00019519
   1d648:	00018db5 	.word	0x00018db5
   1d64c:	200041b8 	.word	0x200041b8
   1d650:	200040dc 	.word	0x200040dc
   1d654:	0001a3cf 	.word	0x0001a3cf

0001d658 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d658:	b590      	push	{r4, r7, lr}
   1d65a:	b087      	sub	sp, #28
   1d65c:	af00      	add	r7, sp, #0
   1d65e:	6078      	str	r0, [r7, #4]
   1d660:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d662:	687b      	ldr	r3, [r7, #4]
   1d664:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d666:	2301      	movs	r3, #1
   1d668:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d66a:	687b      	ldr	r3, [r7, #4]
   1d66c:	2b00      	cmp	r3, #0
   1d66e:	d100      	bne.n	1d672 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d670:	e0a4      	b.n	1d7bc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d672:	693b      	ldr	r3, [r7, #16]
   1d674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d676:	2b00      	cmp	r3, #0
   1d678:	d101      	bne.n	1d67e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d67a:	b672      	cpsid	i
   1d67c:	e7fe      	b.n	1d67c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d67e:	693b      	ldr	r3, [r7, #16]
   1d680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d682:	683b      	ldr	r3, [r7, #0]
   1d684:	429a      	cmp	r2, r3
   1d686:	d202      	bcs.n	1d68e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d688:	683b      	ldr	r3, [r7, #0]
   1d68a:	617b      	str	r3, [r7, #20]
   1d68c:	e002      	b.n	1d694 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d68e:	693b      	ldr	r3, [r7, #16]
   1d690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d692:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d694:	693b      	ldr	r3, [r7, #16]
   1d696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d698:	697b      	ldr	r3, [r7, #20]
   1d69a:	429a      	cmp	r2, r3
   1d69c:	d100      	bne.n	1d6a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d69e:	e08d      	b.n	1d7bc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d6a0:	693b      	ldr	r3, [r7, #16]
   1d6a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d6a4:	68fb      	ldr	r3, [r7, #12]
   1d6a6:	429a      	cmp	r2, r3
   1d6a8:	d000      	beq.n	1d6ac <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d6aa:	e087      	b.n	1d7bc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d6ac:	4b45      	ldr	r3, [pc, #276]	; (1d7c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d6ae:	681b      	ldr	r3, [r3, #0]
   1d6b0:	693a      	ldr	r2, [r7, #16]
   1d6b2:	429a      	cmp	r2, r3
   1d6b4:	d101      	bne.n	1d6ba <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d6b6:	b672      	cpsid	i
   1d6b8:	e7fe      	b.n	1d6b8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d6ba:	693b      	ldr	r3, [r7, #16]
   1d6bc:	0018      	movs	r0, r3
   1d6be:	4b42      	ldr	r3, [pc, #264]	; (1d7c8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d6c0:	4798      	blx	r3
   1d6c2:	0003      	movs	r3, r0
   1d6c4:	001a      	movs	r2, r3
   1d6c6:	4b41      	ldr	r3, [pc, #260]	; (1d7cc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d6c8:	881b      	ldrh	r3, [r3, #0]
   1d6ca:	4013      	ands	r3, r2
   1d6cc:	b29b      	uxth	r3, r3
   1d6ce:	2b00      	cmp	r3, #0
   1d6d0:	d023      	beq.n	1d71a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d6d2:	693b      	ldr	r3, [r7, #16]
   1d6d4:	0018      	movs	r0, r3
   1d6d6:	4b3e      	ldr	r3, [pc, #248]	; (1d7d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d6d8:	4798      	blx	r3
   1d6da:	0003      	movs	r3, r0
   1d6dc:	b2db      	uxtb	r3, r3
   1d6de:	001c      	movs	r4, r3
   1d6e0:	693b      	ldr	r3, [r7, #16]
   1d6e2:	0018      	movs	r0, r3
   1d6e4:	4b3a      	ldr	r3, [pc, #232]	; (1d7d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d6e6:	4798      	blx	r3
   1d6e8:	0003      	movs	r3, r0
   1d6ea:	b2db      	uxtb	r3, r3
   1d6ec:	0019      	movs	r1, r3
   1d6ee:	2003      	movs	r0, #3
   1d6f0:	4b38      	ldr	r3, [pc, #224]	; (1d7d4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d6f2:	4798      	blx	r3
   1d6f4:	0003      	movs	r3, r0
   1d6f6:	0022      	movs	r2, r4
   1d6f8:	2103      	movs	r1, #3
   1d6fa:	208f      	movs	r0, #143	; 0x8f
   1d6fc:	4c36      	ldr	r4, [pc, #216]	; (1d7d8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d6fe:	47a0      	blx	r4
   1d700:	693b      	ldr	r3, [r7, #16]
   1d702:	0018      	movs	r0, r3
   1d704:	4b32      	ldr	r3, [pc, #200]	; (1d7d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d706:	4798      	blx	r3
   1d708:	0003      	movs	r3, r0
   1d70a:	b2d9      	uxtb	r1, r3
   1d70c:	693b      	ldr	r3, [r7, #16]
   1d70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d710:	b2db      	uxtb	r3, r3
   1d712:	001a      	movs	r2, r3
   1d714:	2003      	movs	r0, #3
   1d716:	4b31      	ldr	r3, [pc, #196]	; (1d7dc <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d718:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d71a:	693b      	ldr	r3, [r7, #16]
   1d71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d71e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d720:	693b      	ldr	r3, [r7, #16]
   1d722:	697a      	ldr	r2, [r7, #20]
   1d724:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d726:	693b      	ldr	r3, [r7, #16]
   1d728:	699b      	ldr	r3, [r3, #24]
   1d72a:	2b00      	cmp	r3, #0
   1d72c:	db04      	blt.n	1d738 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d72e:	697b      	ldr	r3, [r7, #20]
   1d730:	2205      	movs	r2, #5
   1d732:	1ad2      	subs	r2, r2, r3
   1d734:	693b      	ldr	r3, [r7, #16]
   1d736:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d738:	693b      	ldr	r3, [r7, #16]
   1d73a:	6959      	ldr	r1, [r3, #20]
   1d73c:	68ba      	ldr	r2, [r7, #8]
   1d73e:	0013      	movs	r3, r2
   1d740:	009b      	lsls	r3, r3, #2
   1d742:	189b      	adds	r3, r3, r2
   1d744:	009b      	lsls	r3, r3, #2
   1d746:	4a26      	ldr	r2, [pc, #152]	; (1d7e0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d748:	189b      	adds	r3, r3, r2
   1d74a:	4299      	cmp	r1, r3
   1d74c:	d101      	bne.n	1d752 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d74e:	2301      	movs	r3, #1
   1d750:	e000      	b.n	1d754 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d752:	2300      	movs	r3, #0
   1d754:	2b00      	cmp	r3, #0
   1d756:	d031      	beq.n	1d7bc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d758:	693b      	ldr	r3, [r7, #16]
   1d75a:	3304      	adds	r3, #4
   1d75c:	0018      	movs	r0, r3
   1d75e:	4b21      	ldr	r3, [pc, #132]	; (1d7e4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d760:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d762:	693b      	ldr	r3, [r7, #16]
   1d764:	0018      	movs	r0, r3
   1d766:	4b18      	ldr	r3, [pc, #96]	; (1d7c8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d768:	4798      	blx	r3
   1d76a:	0003      	movs	r3, r0
   1d76c:	001a      	movs	r2, r3
   1d76e:	4b17      	ldr	r3, [pc, #92]	; (1d7cc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d770:	881b      	ldrh	r3, [r3, #0]
   1d772:	4013      	ands	r3, r2
   1d774:	b29b      	uxth	r3, r3
   1d776:	2b00      	cmp	r3, #0
   1d778:	d008      	beq.n	1d78c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d77a:	693b      	ldr	r3, [r7, #16]
   1d77c:	0018      	movs	r0, r3
   1d77e:	4b14      	ldr	r3, [pc, #80]	; (1d7d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d780:	4798      	blx	r3
   1d782:	0003      	movs	r3, r0
   1d784:	b2db      	uxtb	r3, r3
   1d786:	0018      	movs	r0, r3
   1d788:	4b17      	ldr	r3, [pc, #92]	; (1d7e8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d78a:	4798      	blx	r3
   1d78c:	693b      	ldr	r3, [r7, #16]
   1d78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d790:	4b16      	ldr	r3, [pc, #88]	; (1d7ec <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d792:	681b      	ldr	r3, [r3, #0]
   1d794:	429a      	cmp	r2, r3
   1d796:	d903      	bls.n	1d7a0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d798:	693b      	ldr	r3, [r7, #16]
   1d79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d79c:	4b13      	ldr	r3, [pc, #76]	; (1d7ec <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d79e:	601a      	str	r2, [r3, #0]
   1d7a0:	693b      	ldr	r3, [r7, #16]
   1d7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d7a4:	0013      	movs	r3, r2
   1d7a6:	009b      	lsls	r3, r3, #2
   1d7a8:	189b      	adds	r3, r3, r2
   1d7aa:	009b      	lsls	r3, r3, #2
   1d7ac:	4a0c      	ldr	r2, [pc, #48]	; (1d7e0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d7ae:	189a      	adds	r2, r3, r2
   1d7b0:	693b      	ldr	r3, [r7, #16]
   1d7b2:	3304      	adds	r3, #4
   1d7b4:	0019      	movs	r1, r3
   1d7b6:	0010      	movs	r0, r2
   1d7b8:	4b0d      	ldr	r3, [pc, #52]	; (1d7f0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d7ba:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d7bc:	46c0      	nop			; (mov r8, r8)
   1d7be:	46bd      	mov	sp, r7
   1d7c0:	b007      	add	sp, #28
   1d7c2:	bd90      	pop	{r4, r7, pc}
   1d7c4:	200040d8 	.word	0x200040d8
   1d7c8:	00018605 	.word	0x00018605
   1d7cc:	20000110 	.word	0x20000110
   1d7d0:	000185e5 	.word	0x000185e5
   1d7d4:	000195bd 	.word	0x000195bd
   1d7d8:	0001912d 	.word	0x0001912d
   1d7dc:	00019519 	.word	0x00019519
   1d7e0:	200040dc 	.word	0x200040dc
   1d7e4:	0001a47f 	.word	0x0001a47f
   1d7e8:	00018db5 	.word	0x00018db5
   1d7ec:	200041b8 	.word	0x200041b8
   1d7f0:	0001a3cf 	.word	0x0001a3cf

0001d7f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d7f4:	b580      	push	{r7, lr}
   1d7f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d7f8:	4b06      	ldr	r3, [pc, #24]	; (1d814 <pvTaskIncrementMutexHeldCount+0x20>)
   1d7fa:	681b      	ldr	r3, [r3, #0]
   1d7fc:	2b00      	cmp	r3, #0
   1d7fe:	d004      	beq.n	1d80a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d800:	4b04      	ldr	r3, [pc, #16]	; (1d814 <pvTaskIncrementMutexHeldCount+0x20>)
   1d802:	681b      	ldr	r3, [r3, #0]
   1d804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d806:	3201      	adds	r2, #1
   1d808:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d80a:	4b02      	ldr	r3, [pc, #8]	; (1d814 <pvTaskIncrementMutexHeldCount+0x20>)
   1d80c:	681b      	ldr	r3, [r3, #0]
	}
   1d80e:	0018      	movs	r0, r3
   1d810:	46bd      	mov	sp, r7
   1d812:	bd80      	pop	{r7, pc}
   1d814:	200040d8 	.word	0x200040d8

0001d818 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d818:	b580      	push	{r7, lr}
   1d81a:	b084      	sub	sp, #16
   1d81c:	af00      	add	r7, sp, #0
   1d81e:	6078      	str	r0, [r7, #4]
   1d820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d822:	4b21      	ldr	r3, [pc, #132]	; (1d8a8 <prvAddCurrentTaskToDelayedList+0x90>)
   1d824:	681b      	ldr	r3, [r3, #0]
   1d826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d828:	4b20      	ldr	r3, [pc, #128]	; (1d8ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d82a:	681b      	ldr	r3, [r3, #0]
   1d82c:	3304      	adds	r3, #4
   1d82e:	0018      	movs	r0, r3
   1d830:	4b1f      	ldr	r3, [pc, #124]	; (1d8b0 <prvAddCurrentTaskToDelayedList+0x98>)
   1d832:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d834:	687b      	ldr	r3, [r7, #4]
   1d836:	3301      	adds	r3, #1
   1d838:	d10b      	bne.n	1d852 <prvAddCurrentTaskToDelayedList+0x3a>
   1d83a:	683b      	ldr	r3, [r7, #0]
   1d83c:	2b00      	cmp	r3, #0
   1d83e:	d008      	beq.n	1d852 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d840:	4b1a      	ldr	r3, [pc, #104]	; (1d8ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d842:	681b      	ldr	r3, [r3, #0]
   1d844:	1d1a      	adds	r2, r3, #4
   1d846:	4b1b      	ldr	r3, [pc, #108]	; (1d8b4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d848:	0011      	movs	r1, r2
   1d84a:	0018      	movs	r0, r3
   1d84c:	4b1a      	ldr	r3, [pc, #104]	; (1d8b8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d84e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d850:	e026      	b.n	1d8a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d852:	68fa      	ldr	r2, [r7, #12]
   1d854:	687b      	ldr	r3, [r7, #4]
   1d856:	18d3      	adds	r3, r2, r3
   1d858:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d85a:	4b14      	ldr	r3, [pc, #80]	; (1d8ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d85c:	681b      	ldr	r3, [r3, #0]
   1d85e:	68ba      	ldr	r2, [r7, #8]
   1d860:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d862:	68ba      	ldr	r2, [r7, #8]
   1d864:	68fb      	ldr	r3, [r7, #12]
   1d866:	429a      	cmp	r2, r3
   1d868:	d209      	bcs.n	1d87e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d86a:	4b14      	ldr	r3, [pc, #80]	; (1d8bc <prvAddCurrentTaskToDelayedList+0xa4>)
   1d86c:	681a      	ldr	r2, [r3, #0]
   1d86e:	4b0f      	ldr	r3, [pc, #60]	; (1d8ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d870:	681b      	ldr	r3, [r3, #0]
   1d872:	3304      	adds	r3, #4
   1d874:	0019      	movs	r1, r3
   1d876:	0010      	movs	r0, r2
   1d878:	4b11      	ldr	r3, [pc, #68]	; (1d8c0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d87a:	4798      	blx	r3
}
   1d87c:	e010      	b.n	1d8a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d87e:	4b11      	ldr	r3, [pc, #68]	; (1d8c4 <prvAddCurrentTaskToDelayedList+0xac>)
   1d880:	681a      	ldr	r2, [r3, #0]
   1d882:	4b0a      	ldr	r3, [pc, #40]	; (1d8ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d884:	681b      	ldr	r3, [r3, #0]
   1d886:	3304      	adds	r3, #4
   1d888:	0019      	movs	r1, r3
   1d88a:	0010      	movs	r0, r2
   1d88c:	4b0c      	ldr	r3, [pc, #48]	; (1d8c0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d88e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d890:	4b0d      	ldr	r3, [pc, #52]	; (1d8c8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d892:	681b      	ldr	r3, [r3, #0]
   1d894:	68ba      	ldr	r2, [r7, #8]
   1d896:	429a      	cmp	r2, r3
   1d898:	d202      	bcs.n	1d8a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d89a:	4b0b      	ldr	r3, [pc, #44]	; (1d8c8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d89c:	68ba      	ldr	r2, [r7, #8]
   1d89e:	601a      	str	r2, [r3, #0]
}
   1d8a0:	46c0      	nop			; (mov r8, r8)
   1d8a2:	46bd      	mov	sp, r7
   1d8a4:	b004      	add	sp, #16
   1d8a6:	bd80      	pop	{r7, pc}
   1d8a8:	200041b4 	.word	0x200041b4
   1d8ac:	200040d8 	.word	0x200040d8
   1d8b0:	0001a47f 	.word	0x0001a47f
   1d8b4:	2000419c 	.word	0x2000419c
   1d8b8:	0001a3cf 	.word	0x0001a3cf
   1d8bc:	2000416c 	.word	0x2000416c
   1d8c0:	0001a413 	.word	0x0001a413
   1d8c4:	20004168 	.word	0x20004168
   1d8c8:	200041d0 	.word	0x200041d0

0001d8cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d8cc:	b590      	push	{r4, r7, lr}
   1d8ce:	b085      	sub	sp, #20
   1d8d0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d8d2:	2300      	movs	r3, #0
   1d8d4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d8d6:	4b0e      	ldr	r3, [pc, #56]	; (1d910 <xTimerCreateTimerTask+0x44>)
   1d8d8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d8da:	4b0e      	ldr	r3, [pc, #56]	; (1d914 <xTimerCreateTimerTask+0x48>)
   1d8dc:	681b      	ldr	r3, [r3, #0]
   1d8de:	2b00      	cmp	r3, #0
   1d8e0:	d00b      	beq.n	1d8fa <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d8e2:	490d      	ldr	r1, [pc, #52]	; (1d918 <xTimerCreateTimerTask+0x4c>)
   1d8e4:	480d      	ldr	r0, [pc, #52]	; (1d91c <xTimerCreateTimerTask+0x50>)
   1d8e6:	4b0e      	ldr	r3, [pc, #56]	; (1d920 <xTimerCreateTimerTask+0x54>)
   1d8e8:	9301      	str	r3, [sp, #4]
   1d8ea:	2302      	movs	r3, #2
   1d8ec:	9300      	str	r3, [sp, #0]
   1d8ee:	2300      	movs	r3, #0
   1d8f0:	2280      	movs	r2, #128	; 0x80
   1d8f2:	4c0c      	ldr	r4, [pc, #48]	; (1d924 <xTimerCreateTimerTask+0x58>)
   1d8f4:	47a0      	blx	r4
   1d8f6:	0003      	movs	r3, r0
   1d8f8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d8fa:	687b      	ldr	r3, [r7, #4]
   1d8fc:	2b00      	cmp	r3, #0
   1d8fe:	d101      	bne.n	1d904 <xTimerCreateTimerTask+0x38>
   1d900:	b672      	cpsid	i
   1d902:	e7fe      	b.n	1d902 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d904:	687b      	ldr	r3, [r7, #4]
}
   1d906:	0018      	movs	r0, r3
   1d908:	46bd      	mov	sp, r7
   1d90a:	b003      	add	sp, #12
   1d90c:	bd90      	pop	{r4, r7, pc}
   1d90e:	46c0      	nop			; (mov r8, r8)
   1d910:	0001de15 	.word	0x0001de15
   1d914:	2000420c 	.word	0x2000420c
   1d918:	000388ec 	.word	0x000388ec
   1d91c:	0001da4d 	.word	0x0001da4d
   1d920:	20004210 	.word	0x20004210
   1d924:	0001c265 	.word	0x0001c265

0001d928 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d928:	b590      	push	{r4, r7, lr}
   1d92a:	b089      	sub	sp, #36	; 0x24
   1d92c:	af00      	add	r7, sp, #0
   1d92e:	60f8      	str	r0, [r7, #12]
   1d930:	60b9      	str	r1, [r7, #8]
   1d932:	607a      	str	r2, [r7, #4]
   1d934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d936:	2300      	movs	r3, #0
   1d938:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d93a:	68fb      	ldr	r3, [r7, #12]
   1d93c:	2b00      	cmp	r3, #0
   1d93e:	d101      	bne.n	1d944 <xTimerGenericCommand+0x1c>
   1d940:	b672      	cpsid	i
   1d942:	e7fe      	b.n	1d942 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d944:	4b1e      	ldr	r3, [pc, #120]	; (1d9c0 <xTimerGenericCommand+0x98>)
   1d946:	681b      	ldr	r3, [r3, #0]
   1d948:	2b00      	cmp	r3, #0
   1d94a:	d033      	beq.n	1d9b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d94c:	2310      	movs	r3, #16
   1d94e:	18fb      	adds	r3, r7, r3
   1d950:	68ba      	ldr	r2, [r7, #8]
   1d952:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d954:	2310      	movs	r3, #16
   1d956:	18fb      	adds	r3, r7, r3
   1d958:	687a      	ldr	r2, [r7, #4]
   1d95a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d95c:	2310      	movs	r3, #16
   1d95e:	18fb      	adds	r3, r7, r3
   1d960:	68fa      	ldr	r2, [r7, #12]
   1d962:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d964:	68bb      	ldr	r3, [r7, #8]
   1d966:	2b05      	cmp	r3, #5
   1d968:	dc1a      	bgt.n	1d9a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d96a:	4b16      	ldr	r3, [pc, #88]	; (1d9c4 <xTimerGenericCommand+0x9c>)
   1d96c:	4798      	blx	r3
   1d96e:	0003      	movs	r3, r0
   1d970:	2b02      	cmp	r3, #2
   1d972:	d10a      	bne.n	1d98a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d974:	4b12      	ldr	r3, [pc, #72]	; (1d9c0 <xTimerGenericCommand+0x98>)
   1d976:	6818      	ldr	r0, [r3, #0]
   1d978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d97a:	2310      	movs	r3, #16
   1d97c:	18f9      	adds	r1, r7, r3
   1d97e:	2300      	movs	r3, #0
   1d980:	4c11      	ldr	r4, [pc, #68]	; (1d9c8 <xTimerGenericCommand+0xa0>)
   1d982:	47a0      	blx	r4
   1d984:	0003      	movs	r3, r0
   1d986:	61fb      	str	r3, [r7, #28]
   1d988:	e014      	b.n	1d9b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d98a:	4b0d      	ldr	r3, [pc, #52]	; (1d9c0 <xTimerGenericCommand+0x98>)
   1d98c:	6818      	ldr	r0, [r3, #0]
   1d98e:	2310      	movs	r3, #16
   1d990:	18f9      	adds	r1, r7, r3
   1d992:	2300      	movs	r3, #0
   1d994:	2200      	movs	r2, #0
   1d996:	4c0c      	ldr	r4, [pc, #48]	; (1d9c8 <xTimerGenericCommand+0xa0>)
   1d998:	47a0      	blx	r4
   1d99a:	0003      	movs	r3, r0
   1d99c:	61fb      	str	r3, [r7, #28]
   1d99e:	e009      	b.n	1d9b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d9a0:	4b07      	ldr	r3, [pc, #28]	; (1d9c0 <xTimerGenericCommand+0x98>)
   1d9a2:	6818      	ldr	r0, [r3, #0]
   1d9a4:	683a      	ldr	r2, [r7, #0]
   1d9a6:	2310      	movs	r3, #16
   1d9a8:	18f9      	adds	r1, r7, r3
   1d9aa:	2300      	movs	r3, #0
   1d9ac:	4c07      	ldr	r4, [pc, #28]	; (1d9cc <xTimerGenericCommand+0xa4>)
   1d9ae:	47a0      	blx	r4
   1d9b0:	0003      	movs	r3, r0
   1d9b2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d9b4:	69fb      	ldr	r3, [r7, #28]
}
   1d9b6:	0018      	movs	r0, r3
   1d9b8:	46bd      	mov	sp, r7
   1d9ba:	b009      	add	sp, #36	; 0x24
   1d9bc:	bd90      	pop	{r4, r7, pc}
   1d9be:	46c0      	nop			; (mov r8, r8)
   1d9c0:	2000420c 	.word	0x2000420c
   1d9c4:	0001d329 	.word	0x0001d329
   1d9c8:	0001ab9d 	.word	0x0001ab9d
   1d9cc:	0001affd 	.word	0x0001affd

0001d9d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d9d0:	b590      	push	{r4, r7, lr}
   1d9d2:	b087      	sub	sp, #28
   1d9d4:	af02      	add	r7, sp, #8
   1d9d6:	6078      	str	r0, [r7, #4]
   1d9d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d9da:	4b18      	ldr	r3, [pc, #96]	; (1da3c <prvProcessExpiredTimer+0x6c>)
   1d9dc:	681b      	ldr	r3, [r3, #0]
   1d9de:	68db      	ldr	r3, [r3, #12]
   1d9e0:	68db      	ldr	r3, [r3, #12]
   1d9e2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d9e4:	68fb      	ldr	r3, [r7, #12]
   1d9e6:	3304      	adds	r3, #4
   1d9e8:	0018      	movs	r0, r3
   1d9ea:	4b15      	ldr	r3, [pc, #84]	; (1da40 <prvProcessExpiredTimer+0x70>)
   1d9ec:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d9ee:	68fb      	ldr	r3, [r7, #12]
   1d9f0:	69db      	ldr	r3, [r3, #28]
   1d9f2:	2b01      	cmp	r3, #1
   1d9f4:	d119      	bne.n	1da2a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d9f6:	68fb      	ldr	r3, [r7, #12]
   1d9f8:	699a      	ldr	r2, [r3, #24]
   1d9fa:	687b      	ldr	r3, [r7, #4]
   1d9fc:	18d1      	adds	r1, r2, r3
   1d9fe:	687b      	ldr	r3, [r7, #4]
   1da00:	683a      	ldr	r2, [r7, #0]
   1da02:	68f8      	ldr	r0, [r7, #12]
   1da04:	4c0f      	ldr	r4, [pc, #60]	; (1da44 <prvProcessExpiredTimer+0x74>)
   1da06:	47a0      	blx	r4
   1da08:	1e03      	subs	r3, r0, #0
   1da0a:	d00e      	beq.n	1da2a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1da0c:	687a      	ldr	r2, [r7, #4]
   1da0e:	68f8      	ldr	r0, [r7, #12]
   1da10:	2300      	movs	r3, #0
   1da12:	9300      	str	r3, [sp, #0]
   1da14:	2300      	movs	r3, #0
   1da16:	2100      	movs	r1, #0
   1da18:	4c0b      	ldr	r4, [pc, #44]	; (1da48 <prvProcessExpiredTimer+0x78>)
   1da1a:	47a0      	blx	r4
   1da1c:	0003      	movs	r3, r0
   1da1e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1da20:	68bb      	ldr	r3, [r7, #8]
   1da22:	2b00      	cmp	r3, #0
   1da24:	d101      	bne.n	1da2a <prvProcessExpiredTimer+0x5a>
   1da26:	b672      	cpsid	i
   1da28:	e7fe      	b.n	1da28 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1da2a:	68fb      	ldr	r3, [r7, #12]
   1da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1da2e:	68fa      	ldr	r2, [r7, #12]
   1da30:	0010      	movs	r0, r2
   1da32:	4798      	blx	r3
}
   1da34:	46c0      	nop			; (mov r8, r8)
   1da36:	46bd      	mov	sp, r7
   1da38:	b005      	add	sp, #20
   1da3a:	bd90      	pop	{r4, r7, pc}
   1da3c:	20004204 	.word	0x20004204
   1da40:	0001a47f 	.word	0x0001a47f
   1da44:	0001dbb5 	.word	0x0001dbb5
   1da48:	0001d929 	.word	0x0001d929

0001da4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1da4c:	b580      	push	{r7, lr}
   1da4e:	b084      	sub	sp, #16
   1da50:	af00      	add	r7, sp, #0
   1da52:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1da54:	4b08      	ldr	r3, [pc, #32]	; (1da78 <prvTimerTask+0x2c>)
   1da56:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1da58:	2308      	movs	r3, #8
   1da5a:	18fb      	adds	r3, r7, r3
   1da5c:	0018      	movs	r0, r3
   1da5e:	4b07      	ldr	r3, [pc, #28]	; (1da7c <prvTimerTask+0x30>)
   1da60:	4798      	blx	r3
   1da62:	0003      	movs	r3, r0
   1da64:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1da66:	68ba      	ldr	r2, [r7, #8]
   1da68:	68fb      	ldr	r3, [r7, #12]
   1da6a:	0011      	movs	r1, r2
   1da6c:	0018      	movs	r0, r3
   1da6e:	4b04      	ldr	r3, [pc, #16]	; (1da80 <prvTimerTask+0x34>)
   1da70:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1da72:	4b04      	ldr	r3, [pc, #16]	; (1da84 <prvTimerTask+0x38>)
   1da74:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1da76:	e7ef      	b.n	1da58 <prvTimerTask+0xc>
   1da78:	00032b45 	.word	0x00032b45
   1da7c:	0001db2d 	.word	0x0001db2d
   1da80:	0001da89 	.word	0x0001da89
   1da84:	0001dc3d 	.word	0x0001dc3d

0001da88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1da88:	b580      	push	{r7, lr}
   1da8a:	b084      	sub	sp, #16
   1da8c:	af00      	add	r7, sp, #0
   1da8e:	6078      	str	r0, [r7, #4]
   1da90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1da92:	4b1e      	ldr	r3, [pc, #120]	; (1db0c <prvProcessTimerOrBlockTask+0x84>)
   1da94:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1da96:	2308      	movs	r3, #8
   1da98:	18fb      	adds	r3, r7, r3
   1da9a:	0018      	movs	r0, r3
   1da9c:	4b1c      	ldr	r3, [pc, #112]	; (1db10 <prvProcessTimerOrBlockTask+0x88>)
   1da9e:	4798      	blx	r3
   1daa0:	0003      	movs	r3, r0
   1daa2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1daa4:	68bb      	ldr	r3, [r7, #8]
   1daa6:	2b00      	cmp	r3, #0
   1daa8:	d129      	bne.n	1dafe <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1daaa:	683b      	ldr	r3, [r7, #0]
   1daac:	2b00      	cmp	r3, #0
   1daae:	d10c      	bne.n	1daca <prvProcessTimerOrBlockTask+0x42>
   1dab0:	687a      	ldr	r2, [r7, #4]
   1dab2:	68fb      	ldr	r3, [r7, #12]
   1dab4:	429a      	cmp	r2, r3
   1dab6:	d808      	bhi.n	1daca <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1dab8:	4b16      	ldr	r3, [pc, #88]	; (1db14 <prvProcessTimerOrBlockTask+0x8c>)
   1daba:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1dabc:	68fa      	ldr	r2, [r7, #12]
   1dabe:	687b      	ldr	r3, [r7, #4]
   1dac0:	0011      	movs	r1, r2
   1dac2:	0018      	movs	r0, r3
   1dac4:	4b14      	ldr	r3, [pc, #80]	; (1db18 <prvProcessTimerOrBlockTask+0x90>)
   1dac6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1dac8:	e01b      	b.n	1db02 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1daca:	683b      	ldr	r3, [r7, #0]
   1dacc:	2b00      	cmp	r3, #0
   1dace:	d006      	beq.n	1dade <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1dad0:	4b12      	ldr	r3, [pc, #72]	; (1db1c <prvProcessTimerOrBlockTask+0x94>)
   1dad2:	681b      	ldr	r3, [r3, #0]
   1dad4:	681b      	ldr	r3, [r3, #0]
   1dad6:	425a      	negs	r2, r3
   1dad8:	4153      	adcs	r3, r2
   1dada:	b2db      	uxtb	r3, r3
   1dadc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1dade:	4b10      	ldr	r3, [pc, #64]	; (1db20 <prvProcessTimerOrBlockTask+0x98>)
   1dae0:	6818      	ldr	r0, [r3, #0]
   1dae2:	687a      	ldr	r2, [r7, #4]
   1dae4:	68fb      	ldr	r3, [r7, #12]
   1dae6:	1ad3      	subs	r3, r2, r3
   1dae8:	683a      	ldr	r2, [r7, #0]
   1daea:	0019      	movs	r1, r3
   1daec:	4b0d      	ldr	r3, [pc, #52]	; (1db24 <prvProcessTimerOrBlockTask+0x9c>)
   1daee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1daf0:	4b08      	ldr	r3, [pc, #32]	; (1db14 <prvProcessTimerOrBlockTask+0x8c>)
   1daf2:	4798      	blx	r3
   1daf4:	1e03      	subs	r3, r0, #0
   1daf6:	d104      	bne.n	1db02 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1daf8:	4b0b      	ldr	r3, [pc, #44]	; (1db28 <prvProcessTimerOrBlockTask+0xa0>)
   1dafa:	4798      	blx	r3
}
   1dafc:	e001      	b.n	1db02 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1dafe:	4b05      	ldr	r3, [pc, #20]	; (1db14 <prvProcessTimerOrBlockTask+0x8c>)
   1db00:	4798      	blx	r3
}
   1db02:	46c0      	nop			; (mov r8, r8)
   1db04:	46bd      	mov	sp, r7
   1db06:	b004      	add	sp, #16
   1db08:	bd80      	pop	{r7, pc}
   1db0a:	46c0      	nop			; (mov r8, r8)
   1db0c:	0001c8c1 	.word	0x0001c8c1
   1db10:	0001db6d 	.word	0x0001db6d
   1db14:	0001c8d9 	.word	0x0001c8d9
   1db18:	0001d9d1 	.word	0x0001d9d1
   1db1c:	20004208 	.word	0x20004208
   1db20:	2000420c 	.word	0x2000420c
   1db24:	0001c061 	.word	0x0001c061
   1db28:	0001a5f1 	.word	0x0001a5f1

0001db2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1db2c:	b580      	push	{r7, lr}
   1db2e:	b084      	sub	sp, #16
   1db30:	af00      	add	r7, sp, #0
   1db32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1db34:	4b0c      	ldr	r3, [pc, #48]	; (1db68 <prvGetNextExpireTime+0x3c>)
   1db36:	681b      	ldr	r3, [r3, #0]
   1db38:	681b      	ldr	r3, [r3, #0]
   1db3a:	425a      	negs	r2, r3
   1db3c:	4153      	adcs	r3, r2
   1db3e:	b2db      	uxtb	r3, r3
   1db40:	001a      	movs	r2, r3
   1db42:	687b      	ldr	r3, [r7, #4]
   1db44:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1db46:	687b      	ldr	r3, [r7, #4]
   1db48:	681b      	ldr	r3, [r3, #0]
   1db4a:	2b00      	cmp	r3, #0
   1db4c:	d105      	bne.n	1db5a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1db4e:	4b06      	ldr	r3, [pc, #24]	; (1db68 <prvGetNextExpireTime+0x3c>)
   1db50:	681b      	ldr	r3, [r3, #0]
   1db52:	68db      	ldr	r3, [r3, #12]
   1db54:	681b      	ldr	r3, [r3, #0]
   1db56:	60fb      	str	r3, [r7, #12]
   1db58:	e001      	b.n	1db5e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1db5a:	2300      	movs	r3, #0
   1db5c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1db5e:	68fb      	ldr	r3, [r7, #12]
}
   1db60:	0018      	movs	r0, r3
   1db62:	46bd      	mov	sp, r7
   1db64:	b004      	add	sp, #16
   1db66:	bd80      	pop	{r7, pc}
   1db68:	20004204 	.word	0x20004204

0001db6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1db6c:	b580      	push	{r7, lr}
   1db6e:	b084      	sub	sp, #16
   1db70:	af00      	add	r7, sp, #0
   1db72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1db74:	4b0c      	ldr	r3, [pc, #48]	; (1dba8 <prvSampleTimeNow+0x3c>)
   1db76:	4798      	blx	r3
   1db78:	0003      	movs	r3, r0
   1db7a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1db7c:	4b0b      	ldr	r3, [pc, #44]	; (1dbac <prvSampleTimeNow+0x40>)
   1db7e:	681b      	ldr	r3, [r3, #0]
   1db80:	68fa      	ldr	r2, [r7, #12]
   1db82:	429a      	cmp	r2, r3
   1db84:	d205      	bcs.n	1db92 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1db86:	4b0a      	ldr	r3, [pc, #40]	; (1dbb0 <prvSampleTimeNow+0x44>)
   1db88:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1db8a:	687b      	ldr	r3, [r7, #4]
   1db8c:	2201      	movs	r2, #1
   1db8e:	601a      	str	r2, [r3, #0]
   1db90:	e002      	b.n	1db98 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1db92:	687b      	ldr	r3, [r7, #4]
   1db94:	2200      	movs	r2, #0
   1db96:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1db98:	4b04      	ldr	r3, [pc, #16]	; (1dbac <prvSampleTimeNow+0x40>)
   1db9a:	68fa      	ldr	r2, [r7, #12]
   1db9c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1db9e:	68fb      	ldr	r3, [r7, #12]
}
   1dba0:	0018      	movs	r0, r3
   1dba2:	46bd      	mov	sp, r7
   1dba4:	b004      	add	sp, #16
   1dba6:	bd80      	pop	{r7, pc}
   1dba8:	0001ca49 	.word	0x0001ca49
   1dbac:	20004214 	.word	0x20004214
   1dbb0:	0001dd55 	.word	0x0001dd55

0001dbb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1dbb4:	b580      	push	{r7, lr}
   1dbb6:	b086      	sub	sp, #24
   1dbb8:	af00      	add	r7, sp, #0
   1dbba:	60f8      	str	r0, [r7, #12]
   1dbbc:	60b9      	str	r1, [r7, #8]
   1dbbe:	607a      	str	r2, [r7, #4]
   1dbc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1dbc2:	2300      	movs	r3, #0
   1dbc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1dbc6:	68fb      	ldr	r3, [r7, #12]
   1dbc8:	68ba      	ldr	r2, [r7, #8]
   1dbca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1dbcc:	68fb      	ldr	r3, [r7, #12]
   1dbce:	68fa      	ldr	r2, [r7, #12]
   1dbd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1dbd2:	68ba      	ldr	r2, [r7, #8]
   1dbd4:	687b      	ldr	r3, [r7, #4]
   1dbd6:	429a      	cmp	r2, r3
   1dbd8:	d812      	bhi.n	1dc00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dbda:	687a      	ldr	r2, [r7, #4]
   1dbdc:	683b      	ldr	r3, [r7, #0]
   1dbde:	1ad2      	subs	r2, r2, r3
   1dbe0:	68fb      	ldr	r3, [r7, #12]
   1dbe2:	699b      	ldr	r3, [r3, #24]
   1dbe4:	429a      	cmp	r2, r3
   1dbe6:	d302      	bcc.n	1dbee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1dbe8:	2301      	movs	r3, #1
   1dbea:	617b      	str	r3, [r7, #20]
   1dbec:	e01b      	b.n	1dc26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1dbee:	4b10      	ldr	r3, [pc, #64]	; (1dc30 <prvInsertTimerInActiveList+0x7c>)
   1dbf0:	681a      	ldr	r2, [r3, #0]
   1dbf2:	68fb      	ldr	r3, [r7, #12]
   1dbf4:	3304      	adds	r3, #4
   1dbf6:	0019      	movs	r1, r3
   1dbf8:	0010      	movs	r0, r2
   1dbfa:	4b0e      	ldr	r3, [pc, #56]	; (1dc34 <prvInsertTimerInActiveList+0x80>)
   1dbfc:	4798      	blx	r3
   1dbfe:	e012      	b.n	1dc26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1dc00:	687a      	ldr	r2, [r7, #4]
   1dc02:	683b      	ldr	r3, [r7, #0]
   1dc04:	429a      	cmp	r2, r3
   1dc06:	d206      	bcs.n	1dc16 <prvInsertTimerInActiveList+0x62>
   1dc08:	68ba      	ldr	r2, [r7, #8]
   1dc0a:	683b      	ldr	r3, [r7, #0]
   1dc0c:	429a      	cmp	r2, r3
   1dc0e:	d302      	bcc.n	1dc16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1dc10:	2301      	movs	r3, #1
   1dc12:	617b      	str	r3, [r7, #20]
   1dc14:	e007      	b.n	1dc26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1dc16:	4b08      	ldr	r3, [pc, #32]	; (1dc38 <prvInsertTimerInActiveList+0x84>)
   1dc18:	681a      	ldr	r2, [r3, #0]
   1dc1a:	68fb      	ldr	r3, [r7, #12]
   1dc1c:	3304      	adds	r3, #4
   1dc1e:	0019      	movs	r1, r3
   1dc20:	0010      	movs	r0, r2
   1dc22:	4b04      	ldr	r3, [pc, #16]	; (1dc34 <prvInsertTimerInActiveList+0x80>)
   1dc24:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1dc26:	697b      	ldr	r3, [r7, #20]
}
   1dc28:	0018      	movs	r0, r3
   1dc2a:	46bd      	mov	sp, r7
   1dc2c:	b006      	add	sp, #24
   1dc2e:	bd80      	pop	{r7, pc}
   1dc30:	20004208 	.word	0x20004208
   1dc34:	0001a413 	.word	0x0001a413
   1dc38:	20004204 	.word	0x20004204

0001dc3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1dc3c:	b590      	push	{r4, r7, lr}
   1dc3e:	b08b      	sub	sp, #44	; 0x2c
   1dc40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dc42:	e068      	b.n	1dd16 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1dc44:	2308      	movs	r3, #8
   1dc46:	18fb      	adds	r3, r7, r3
   1dc48:	681b      	ldr	r3, [r3, #0]
   1dc4a:	2b00      	cmp	r3, #0
   1dc4c:	db63      	blt.n	1dd16 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1dc4e:	2308      	movs	r3, #8
   1dc50:	18fb      	adds	r3, r7, r3
   1dc52:	689b      	ldr	r3, [r3, #8]
   1dc54:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1dc56:	69fb      	ldr	r3, [r7, #28]
   1dc58:	695b      	ldr	r3, [r3, #20]
   1dc5a:	2b00      	cmp	r3, #0
   1dc5c:	d004      	beq.n	1dc68 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1dc5e:	69fb      	ldr	r3, [r7, #28]
   1dc60:	3304      	adds	r3, #4
   1dc62:	0018      	movs	r0, r3
   1dc64:	4b33      	ldr	r3, [pc, #204]	; (1dd34 <prvProcessReceivedCommands+0xf8>)
   1dc66:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1dc68:	1d3b      	adds	r3, r7, #4
   1dc6a:	0018      	movs	r0, r3
   1dc6c:	4b32      	ldr	r3, [pc, #200]	; (1dd38 <prvProcessReceivedCommands+0xfc>)
   1dc6e:	4798      	blx	r3
   1dc70:	0003      	movs	r3, r0
   1dc72:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1dc74:	2308      	movs	r3, #8
   1dc76:	18fb      	adds	r3, r7, r3
   1dc78:	681b      	ldr	r3, [r3, #0]
   1dc7a:	2b09      	cmp	r3, #9
   1dc7c:	d84a      	bhi.n	1dd14 <prvProcessReceivedCommands+0xd8>
   1dc7e:	009a      	lsls	r2, r3, #2
   1dc80:	4b2e      	ldr	r3, [pc, #184]	; (1dd3c <prvProcessReceivedCommands+0x100>)
   1dc82:	18d3      	adds	r3, r2, r3
   1dc84:	681b      	ldr	r3, [r3, #0]
   1dc86:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1dc88:	2308      	movs	r3, #8
   1dc8a:	18fb      	adds	r3, r7, r3
   1dc8c:	685a      	ldr	r2, [r3, #4]
   1dc8e:	69fb      	ldr	r3, [r7, #28]
   1dc90:	699b      	ldr	r3, [r3, #24]
   1dc92:	18d1      	adds	r1, r2, r3
   1dc94:	2308      	movs	r3, #8
   1dc96:	18fb      	adds	r3, r7, r3
   1dc98:	685b      	ldr	r3, [r3, #4]
   1dc9a:	69ba      	ldr	r2, [r7, #24]
   1dc9c:	69f8      	ldr	r0, [r7, #28]
   1dc9e:	4c28      	ldr	r4, [pc, #160]	; (1dd40 <prvProcessReceivedCommands+0x104>)
   1dca0:	47a0      	blx	r4
   1dca2:	1e03      	subs	r3, r0, #0
   1dca4:	d037      	beq.n	1dd16 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1dca6:	69fb      	ldr	r3, [r7, #28]
   1dca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dcaa:	69fa      	ldr	r2, [r7, #28]
   1dcac:	0010      	movs	r0, r2
   1dcae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1dcb0:	69fb      	ldr	r3, [r7, #28]
   1dcb2:	69db      	ldr	r3, [r3, #28]
   1dcb4:	2b01      	cmp	r3, #1
   1dcb6:	d12e      	bne.n	1dd16 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1dcb8:	2308      	movs	r3, #8
   1dcba:	18fb      	adds	r3, r7, r3
   1dcbc:	685a      	ldr	r2, [r3, #4]
   1dcbe:	69fb      	ldr	r3, [r7, #28]
   1dcc0:	699b      	ldr	r3, [r3, #24]
   1dcc2:	18d2      	adds	r2, r2, r3
   1dcc4:	69f8      	ldr	r0, [r7, #28]
   1dcc6:	2300      	movs	r3, #0
   1dcc8:	9300      	str	r3, [sp, #0]
   1dcca:	2300      	movs	r3, #0
   1dccc:	2100      	movs	r1, #0
   1dcce:	4c1d      	ldr	r4, [pc, #116]	; (1dd44 <prvProcessReceivedCommands+0x108>)
   1dcd0:	47a0      	blx	r4
   1dcd2:	0003      	movs	r3, r0
   1dcd4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1dcd6:	697b      	ldr	r3, [r7, #20]
   1dcd8:	2b00      	cmp	r3, #0
   1dcda:	d11c      	bne.n	1dd16 <prvProcessReceivedCommands+0xda>
   1dcdc:	b672      	cpsid	i
   1dcde:	e7fe      	b.n	1dcde <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1dce0:	2308      	movs	r3, #8
   1dce2:	18fb      	adds	r3, r7, r3
   1dce4:	685a      	ldr	r2, [r3, #4]
   1dce6:	69fb      	ldr	r3, [r7, #28]
   1dce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1dcea:	69fb      	ldr	r3, [r7, #28]
   1dcec:	699b      	ldr	r3, [r3, #24]
   1dcee:	2b00      	cmp	r3, #0
   1dcf0:	d101      	bne.n	1dcf6 <prvProcessReceivedCommands+0xba>
   1dcf2:	b672      	cpsid	i
   1dcf4:	e7fe      	b.n	1dcf4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1dcf6:	69fb      	ldr	r3, [r7, #28]
   1dcf8:	699a      	ldr	r2, [r3, #24]
   1dcfa:	69bb      	ldr	r3, [r7, #24]
   1dcfc:	18d1      	adds	r1, r2, r3
   1dcfe:	69bb      	ldr	r3, [r7, #24]
   1dd00:	69ba      	ldr	r2, [r7, #24]
   1dd02:	69f8      	ldr	r0, [r7, #28]
   1dd04:	4c0e      	ldr	r4, [pc, #56]	; (1dd40 <prvProcessReceivedCommands+0x104>)
   1dd06:	47a0      	blx	r4
					break;
   1dd08:	e005      	b.n	1dd16 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1dd0a:	69fb      	ldr	r3, [r7, #28]
   1dd0c:	0018      	movs	r0, r3
   1dd0e:	4b0e      	ldr	r3, [pc, #56]	; (1dd48 <prvProcessReceivedCommands+0x10c>)
   1dd10:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1dd12:	e000      	b.n	1dd16 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1dd14:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dd16:	4b0d      	ldr	r3, [pc, #52]	; (1dd4c <prvProcessReceivedCommands+0x110>)
   1dd18:	681b      	ldr	r3, [r3, #0]
   1dd1a:	2208      	movs	r2, #8
   1dd1c:	18b9      	adds	r1, r7, r2
   1dd1e:	2200      	movs	r2, #0
   1dd20:	0018      	movs	r0, r3
   1dd22:	4b0b      	ldr	r3, [pc, #44]	; (1dd50 <prvProcessReceivedCommands+0x114>)
   1dd24:	4798      	blx	r3
   1dd26:	1e03      	subs	r3, r0, #0
   1dd28:	d18c      	bne.n	1dc44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1dd2a:	46c0      	nop			; (mov r8, r8)
   1dd2c:	46bd      	mov	sp, r7
   1dd2e:	b009      	add	sp, #36	; 0x24
   1dd30:	bd90      	pop	{r4, r7, pc}
   1dd32:	46c0      	nop			; (mov r8, r8)
   1dd34:	0001a47f 	.word	0x0001a47f
   1dd38:	0001db6d 	.word	0x0001db6d
   1dd3c:	000388f4 	.word	0x000388f4
   1dd40:	0001dbb5 	.word	0x0001dbb5
   1dd44:	0001d929 	.word	0x0001d929
   1dd48:	0001a805 	.word	0x0001a805
   1dd4c:	2000420c 	.word	0x2000420c
   1dd50:	0001b455 	.word	0x0001b455

0001dd54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1dd54:	b590      	push	{r4, r7, lr}
   1dd56:	b089      	sub	sp, #36	; 0x24
   1dd58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1dd5a:	e03e      	b.n	1ddda <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dd5c:	4b28      	ldr	r3, [pc, #160]	; (1de00 <prvSwitchTimerLists+0xac>)
   1dd5e:	681b      	ldr	r3, [r3, #0]
   1dd60:	68db      	ldr	r3, [r3, #12]
   1dd62:	681b      	ldr	r3, [r3, #0]
   1dd64:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dd66:	4b26      	ldr	r3, [pc, #152]	; (1de00 <prvSwitchTimerLists+0xac>)
   1dd68:	681b      	ldr	r3, [r3, #0]
   1dd6a:	68db      	ldr	r3, [r3, #12]
   1dd6c:	68db      	ldr	r3, [r3, #12]
   1dd6e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1dd70:	693b      	ldr	r3, [r7, #16]
   1dd72:	3304      	adds	r3, #4
   1dd74:	0018      	movs	r0, r3
   1dd76:	4b23      	ldr	r3, [pc, #140]	; (1de04 <prvSwitchTimerLists+0xb0>)
   1dd78:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1dd7a:	693b      	ldr	r3, [r7, #16]
   1dd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd7e:	693a      	ldr	r2, [r7, #16]
   1dd80:	0010      	movs	r0, r2
   1dd82:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1dd84:	693b      	ldr	r3, [r7, #16]
   1dd86:	69db      	ldr	r3, [r3, #28]
   1dd88:	2b01      	cmp	r3, #1
   1dd8a:	d126      	bne.n	1ddda <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1dd8c:	693b      	ldr	r3, [r7, #16]
   1dd8e:	699a      	ldr	r2, [r3, #24]
   1dd90:	697b      	ldr	r3, [r7, #20]
   1dd92:	18d3      	adds	r3, r2, r3
   1dd94:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1dd96:	68fa      	ldr	r2, [r7, #12]
   1dd98:	697b      	ldr	r3, [r7, #20]
   1dd9a:	429a      	cmp	r2, r3
   1dd9c:	d90e      	bls.n	1ddbc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1dd9e:	693b      	ldr	r3, [r7, #16]
   1dda0:	68fa      	ldr	r2, [r7, #12]
   1dda2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1dda4:	693b      	ldr	r3, [r7, #16]
   1dda6:	693a      	ldr	r2, [r7, #16]
   1dda8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1ddaa:	4b15      	ldr	r3, [pc, #84]	; (1de00 <prvSwitchTimerLists+0xac>)
   1ddac:	681a      	ldr	r2, [r3, #0]
   1ddae:	693b      	ldr	r3, [r7, #16]
   1ddb0:	3304      	adds	r3, #4
   1ddb2:	0019      	movs	r1, r3
   1ddb4:	0010      	movs	r0, r2
   1ddb6:	4b14      	ldr	r3, [pc, #80]	; (1de08 <prvSwitchTimerLists+0xb4>)
   1ddb8:	4798      	blx	r3
   1ddba:	e00e      	b.n	1ddda <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1ddbc:	697a      	ldr	r2, [r7, #20]
   1ddbe:	6938      	ldr	r0, [r7, #16]
   1ddc0:	2300      	movs	r3, #0
   1ddc2:	9300      	str	r3, [sp, #0]
   1ddc4:	2300      	movs	r3, #0
   1ddc6:	2100      	movs	r1, #0
   1ddc8:	4c10      	ldr	r4, [pc, #64]	; (1de0c <prvSwitchTimerLists+0xb8>)
   1ddca:	47a0      	blx	r4
   1ddcc:	0003      	movs	r3, r0
   1ddce:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1ddd0:	68bb      	ldr	r3, [r7, #8]
   1ddd2:	2b00      	cmp	r3, #0
   1ddd4:	d101      	bne.n	1ddda <prvSwitchTimerLists+0x86>
   1ddd6:	b672      	cpsid	i
   1ddd8:	e7fe      	b.n	1ddd8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1ddda:	4b09      	ldr	r3, [pc, #36]	; (1de00 <prvSwitchTimerLists+0xac>)
   1dddc:	681b      	ldr	r3, [r3, #0]
   1ddde:	681b      	ldr	r3, [r3, #0]
   1dde0:	2b00      	cmp	r3, #0
   1dde2:	d1bb      	bne.n	1dd5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1dde4:	4b06      	ldr	r3, [pc, #24]	; (1de00 <prvSwitchTimerLists+0xac>)
   1dde6:	681b      	ldr	r3, [r3, #0]
   1dde8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1ddea:	4b09      	ldr	r3, [pc, #36]	; (1de10 <prvSwitchTimerLists+0xbc>)
   1ddec:	681a      	ldr	r2, [r3, #0]
   1ddee:	4b04      	ldr	r3, [pc, #16]	; (1de00 <prvSwitchTimerLists+0xac>)
   1ddf0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1ddf2:	4b07      	ldr	r3, [pc, #28]	; (1de10 <prvSwitchTimerLists+0xbc>)
   1ddf4:	687a      	ldr	r2, [r7, #4]
   1ddf6:	601a      	str	r2, [r3, #0]
}
   1ddf8:	46c0      	nop			; (mov r8, r8)
   1ddfa:	46bd      	mov	sp, r7
   1ddfc:	b007      	add	sp, #28
   1ddfe:	bd90      	pop	{r4, r7, pc}
   1de00:	20004204 	.word	0x20004204
   1de04:	0001a47f 	.word	0x0001a47f
   1de08:	0001a413 	.word	0x0001a413
   1de0c:	0001d929 	.word	0x0001d929
   1de10:	20004208 	.word	0x20004208

0001de14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1de14:	b580      	push	{r7, lr}
   1de16:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1de18:	4b10      	ldr	r3, [pc, #64]	; (1de5c <prvCheckForValidListAndQueue+0x48>)
   1de1a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1de1c:	4b10      	ldr	r3, [pc, #64]	; (1de60 <prvCheckForValidListAndQueue+0x4c>)
   1de1e:	681b      	ldr	r3, [r3, #0]
   1de20:	2b00      	cmp	r3, #0
   1de22:	d115      	bne.n	1de50 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1de24:	4b0f      	ldr	r3, [pc, #60]	; (1de64 <prvCheckForValidListAndQueue+0x50>)
   1de26:	0018      	movs	r0, r3
   1de28:	4b0f      	ldr	r3, [pc, #60]	; (1de68 <prvCheckForValidListAndQueue+0x54>)
   1de2a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1de2c:	4b0f      	ldr	r3, [pc, #60]	; (1de6c <prvCheckForValidListAndQueue+0x58>)
   1de2e:	0018      	movs	r0, r3
   1de30:	4b0d      	ldr	r3, [pc, #52]	; (1de68 <prvCheckForValidListAndQueue+0x54>)
   1de32:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1de34:	4b0e      	ldr	r3, [pc, #56]	; (1de70 <prvCheckForValidListAndQueue+0x5c>)
   1de36:	4a0b      	ldr	r2, [pc, #44]	; (1de64 <prvCheckForValidListAndQueue+0x50>)
   1de38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1de3a:	4b0e      	ldr	r3, [pc, #56]	; (1de74 <prvCheckForValidListAndQueue+0x60>)
   1de3c:	4a0b      	ldr	r2, [pc, #44]	; (1de6c <prvCheckForValidListAndQueue+0x58>)
   1de3e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1de40:	2200      	movs	r2, #0
   1de42:	210c      	movs	r1, #12
   1de44:	2005      	movs	r0, #5
   1de46:	4b0c      	ldr	r3, [pc, #48]	; (1de78 <prvCheckForValidListAndQueue+0x64>)
   1de48:	4798      	blx	r3
   1de4a:	0002      	movs	r2, r0
   1de4c:	4b04      	ldr	r3, [pc, #16]	; (1de60 <prvCheckForValidListAndQueue+0x4c>)
   1de4e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1de50:	4b0a      	ldr	r3, [pc, #40]	; (1de7c <prvCheckForValidListAndQueue+0x68>)
   1de52:	4798      	blx	r3
}
   1de54:	46c0      	nop			; (mov r8, r8)
   1de56:	46bd      	mov	sp, r7
   1de58:	bd80      	pop	{r7, pc}
   1de5a:	46c0      	nop			; (mov r8, r8)
   1de5c:	0001a609 	.word	0x0001a609
   1de60:	2000420c 	.word	0x2000420c
   1de64:	200041dc 	.word	0x200041dc
   1de68:	0001a37d 	.word	0x0001a37d
   1de6c:	200041f0 	.word	0x200041f0
   1de70:	20004204 	.word	0x20004204
   1de74:	20004208 	.word	0x20004208
   1de78:	0001a8f5 	.word	0x0001a8f5
   1de7c:	0001a62d 	.word	0x0001a62d

0001de80 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1de80:	b580      	push	{r7, lr}
   1de82:	b082      	sub	sp, #8
   1de84:	af00      	add	r7, sp, #0
   1de86:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1de88:	687b      	ldr	r3, [r7, #4]
   1de8a:	7c1b      	ldrb	r3, [r3, #16]
   1de8c:	2b00      	cmp	r3, #0
   1de8e:	d00b      	beq.n	1dea8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1de90:	687b      	ldr	r3, [r7, #4]
   1de92:	689b      	ldr	r3, [r3, #8]
   1de94:	1c5a      	adds	r2, r3, #1
   1de96:	687b      	ldr	r3, [r7, #4]
   1de98:	68d9      	ldr	r1, [r3, #12]
   1de9a:	4b10      	ldr	r3, [pc, #64]	; (1dedc <advance_pointer+0x5c>)
   1de9c:	0010      	movs	r0, r2
   1de9e:	4798      	blx	r3
   1dea0:	000b      	movs	r3, r1
   1dea2:	001a      	movs	r2, r3
   1dea4:	687b      	ldr	r3, [r7, #4]
   1dea6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1dea8:	687b      	ldr	r3, [r7, #4]
   1deaa:	685b      	ldr	r3, [r3, #4]
   1deac:	1c5a      	adds	r2, r3, #1
   1deae:	687b      	ldr	r3, [r7, #4]
   1deb0:	68d9      	ldr	r1, [r3, #12]
   1deb2:	4b0a      	ldr	r3, [pc, #40]	; (1dedc <advance_pointer+0x5c>)
   1deb4:	0010      	movs	r0, r2
   1deb6:	4798      	blx	r3
   1deb8:	000b      	movs	r3, r1
   1deba:	001a      	movs	r2, r3
   1debc:	687b      	ldr	r3, [r7, #4]
   1debe:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1dec0:	687b      	ldr	r3, [r7, #4]
   1dec2:	685a      	ldr	r2, [r3, #4]
   1dec4:	687b      	ldr	r3, [r7, #4]
   1dec6:	689b      	ldr	r3, [r3, #8]
   1dec8:	1ad3      	subs	r3, r2, r3
   1deca:	425a      	negs	r2, r3
   1decc:	4153      	adcs	r3, r2
   1dece:	b2da      	uxtb	r2, r3
   1ded0:	687b      	ldr	r3, [r7, #4]
   1ded2:	741a      	strb	r2, [r3, #16]
 }
   1ded4:	46c0      	nop			; (mov r8, r8)
   1ded6:	46bd      	mov	sp, r7
   1ded8:	b002      	add	sp, #8
   1deda:	bd80      	pop	{r7, pc}
   1dedc:	00032ea1 	.word	0x00032ea1

0001dee0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1dee0:	b580      	push	{r7, lr}
   1dee2:	b082      	sub	sp, #8
   1dee4:	af00      	add	r7, sp, #0
   1dee6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1dee8:	687b      	ldr	r3, [r7, #4]
   1deea:	2200      	movs	r2, #0
   1deec:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1deee:	687b      	ldr	r3, [r7, #4]
   1def0:	689b      	ldr	r3, [r3, #8]
   1def2:	1c5a      	adds	r2, r3, #1
   1def4:	687b      	ldr	r3, [r7, #4]
   1def6:	68d9      	ldr	r1, [r3, #12]
   1def8:	4b05      	ldr	r3, [pc, #20]	; (1df10 <retreat_pointer+0x30>)
   1defa:	0010      	movs	r0, r2
   1defc:	4798      	blx	r3
   1defe:	000b      	movs	r3, r1
   1df00:	001a      	movs	r2, r3
   1df02:	687b      	ldr	r3, [r7, #4]
   1df04:	609a      	str	r2, [r3, #8]
 }
   1df06:	46c0      	nop			; (mov r8, r8)
   1df08:	46bd      	mov	sp, r7
   1df0a:	b002      	add	sp, #8
   1df0c:	bd80      	pop	{r7, pc}
   1df0e:	46c0      	nop			; (mov r8, r8)
   1df10:	00032ea1 	.word	0x00032ea1

0001df14 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1df14:	b580      	push	{r7, lr}
   1df16:	b084      	sub	sp, #16
   1df18:	af00      	add	r7, sp, #0
   1df1a:	6078      	str	r0, [r7, #4]
   1df1c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1df1e:	2014      	movs	r0, #20
   1df20:	4b09      	ldr	r3, [pc, #36]	; (1df48 <circular_buf_init+0x34>)
   1df22:	4798      	blx	r3
   1df24:	0003      	movs	r3, r0
   1df26:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1df28:	68fb      	ldr	r3, [r7, #12]
   1df2a:	687a      	ldr	r2, [r7, #4]
   1df2c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1df2e:	68fb      	ldr	r3, [r7, #12]
   1df30:	683a      	ldr	r2, [r7, #0]
   1df32:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1df34:	68fb      	ldr	r3, [r7, #12]
   1df36:	0018      	movs	r0, r3
   1df38:	4b04      	ldr	r3, [pc, #16]	; (1df4c <circular_buf_init+0x38>)
   1df3a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1df3c:	68fb      	ldr	r3, [r7, #12]
 }
   1df3e:	0018      	movs	r0, r3
   1df40:	46bd      	mov	sp, r7
   1df42:	b004      	add	sp, #16
   1df44:	bd80      	pop	{r7, pc}
   1df46:	46c0      	nop			; (mov r8, r8)
   1df48:	00034db5 	.word	0x00034db5
   1df4c:	0001df51 	.word	0x0001df51

0001df50 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1df50:	b580      	push	{r7, lr}
   1df52:	b082      	sub	sp, #8
   1df54:	af00      	add	r7, sp, #0
   1df56:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1df58:	687b      	ldr	r3, [r7, #4]
   1df5a:	2200      	movs	r2, #0
   1df5c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1df5e:	687b      	ldr	r3, [r7, #4]
   1df60:	2200      	movs	r2, #0
   1df62:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1df64:	687b      	ldr	r3, [r7, #4]
   1df66:	2200      	movs	r2, #0
   1df68:	741a      	strb	r2, [r3, #16]
 }
   1df6a:	46c0      	nop			; (mov r8, r8)
   1df6c:	46bd      	mov	sp, r7
   1df6e:	b002      	add	sp, #8
   1df70:	bd80      	pop	{r7, pc}
	...

0001df74 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1df74:	b580      	push	{r7, lr}
   1df76:	b082      	sub	sp, #8
   1df78:	af00      	add	r7, sp, #0
   1df7a:	6078      	str	r0, [r7, #4]
   1df7c:	000a      	movs	r2, r1
   1df7e:	1cfb      	adds	r3, r7, #3
   1df80:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1df82:	687b      	ldr	r3, [r7, #4]
   1df84:	681a      	ldr	r2, [r3, #0]
   1df86:	687b      	ldr	r3, [r7, #4]
   1df88:	685b      	ldr	r3, [r3, #4]
   1df8a:	18d3      	adds	r3, r2, r3
   1df8c:	1cfa      	adds	r2, r7, #3
   1df8e:	7812      	ldrb	r2, [r2, #0]
   1df90:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1df92:	687b      	ldr	r3, [r7, #4]
   1df94:	0018      	movs	r0, r3
   1df96:	4b03      	ldr	r3, [pc, #12]	; (1dfa4 <circular_buf_put+0x30>)
   1df98:	4798      	blx	r3
 }
   1df9a:	46c0      	nop			; (mov r8, r8)
   1df9c:	46bd      	mov	sp, r7
   1df9e:	b002      	add	sp, #8
   1dfa0:	bd80      	pop	{r7, pc}
   1dfa2:	46c0      	nop			; (mov r8, r8)
   1dfa4:	0001de81 	.word	0x0001de81

0001dfa8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1dfa8:	b580      	push	{r7, lr}
   1dfaa:	b084      	sub	sp, #16
   1dfac:	af00      	add	r7, sp, #0
   1dfae:	6078      	str	r0, [r7, #4]
   1dfb0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1dfb2:	2301      	movs	r3, #1
   1dfb4:	425b      	negs	r3, r3
   1dfb6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1dfb8:	687b      	ldr	r3, [r7, #4]
   1dfba:	0018      	movs	r0, r3
   1dfbc:	4b0d      	ldr	r3, [pc, #52]	; (1dff4 <circular_buf_get+0x4c>)
   1dfbe:	4798      	blx	r3
   1dfc0:	0003      	movs	r3, r0
   1dfc2:	001a      	movs	r2, r3
   1dfc4:	2301      	movs	r3, #1
   1dfc6:	4053      	eors	r3, r2
   1dfc8:	b2db      	uxtb	r3, r3
   1dfca:	2b00      	cmp	r3, #0
   1dfcc:	d00d      	beq.n	1dfea <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1dfce:	687b      	ldr	r3, [r7, #4]
   1dfd0:	681a      	ldr	r2, [r3, #0]
   1dfd2:	687b      	ldr	r3, [r7, #4]
   1dfd4:	689b      	ldr	r3, [r3, #8]
   1dfd6:	18d3      	adds	r3, r2, r3
   1dfd8:	781a      	ldrb	r2, [r3, #0]
   1dfda:	683b      	ldr	r3, [r7, #0]
   1dfdc:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1dfde:	687b      	ldr	r3, [r7, #4]
   1dfe0:	0018      	movs	r0, r3
   1dfe2:	4b05      	ldr	r3, [pc, #20]	; (1dff8 <circular_buf_get+0x50>)
   1dfe4:	4798      	blx	r3

		 r = 0;
   1dfe6:	2300      	movs	r3, #0
   1dfe8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1dfea:	68fb      	ldr	r3, [r7, #12]
 }
   1dfec:	0018      	movs	r0, r3
   1dfee:	46bd      	mov	sp, r7
   1dff0:	b004      	add	sp, #16
   1dff2:	bd80      	pop	{r7, pc}
   1dff4:	0001dffd 	.word	0x0001dffd
   1dff8:	0001dee1 	.word	0x0001dee1

0001dffc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1dffc:	b580      	push	{r7, lr}
   1dffe:	b082      	sub	sp, #8
   1e000:	af00      	add	r7, sp, #0
   1e002:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e004:	687b      	ldr	r3, [r7, #4]
   1e006:	7c1b      	ldrb	r3, [r3, #16]
   1e008:	2201      	movs	r2, #1
   1e00a:	4053      	eors	r3, r2
   1e00c:	b2db      	uxtb	r3, r3
   1e00e:	2b00      	cmp	r3, #0
   1e010:	d007      	beq.n	1e022 <circular_buf_empty+0x26>
   1e012:	687b      	ldr	r3, [r7, #4]
   1e014:	685a      	ldr	r2, [r3, #4]
   1e016:	687b      	ldr	r3, [r7, #4]
   1e018:	689b      	ldr	r3, [r3, #8]
   1e01a:	429a      	cmp	r2, r3
   1e01c:	d101      	bne.n	1e022 <circular_buf_empty+0x26>
   1e01e:	2301      	movs	r3, #1
   1e020:	e000      	b.n	1e024 <circular_buf_empty+0x28>
   1e022:	2300      	movs	r3, #0
   1e024:	1c1a      	adds	r2, r3, #0
   1e026:	2301      	movs	r3, #1
   1e028:	4013      	ands	r3, r2
   1e02a:	b2db      	uxtb	r3, r3
 }
   1e02c:	0018      	movs	r0, r3
   1e02e:	46bd      	mov	sp, r7
   1e030:	b002      	add	sp, #8
   1e032:	bd80      	pop	{r7, pc}

0001e034 <system_interrupt_enable>:
{
   1e034:	b580      	push	{r7, lr}
   1e036:	b082      	sub	sp, #8
   1e038:	af00      	add	r7, sp, #0
   1e03a:	0002      	movs	r2, r0
   1e03c:	1dfb      	adds	r3, r7, #7
   1e03e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e040:	4b06      	ldr	r3, [pc, #24]	; (1e05c <system_interrupt_enable+0x28>)
   1e042:	1dfa      	adds	r2, r7, #7
   1e044:	7812      	ldrb	r2, [r2, #0]
   1e046:	0011      	movs	r1, r2
   1e048:	221f      	movs	r2, #31
   1e04a:	400a      	ands	r2, r1
   1e04c:	2101      	movs	r1, #1
   1e04e:	4091      	lsls	r1, r2
   1e050:	000a      	movs	r2, r1
   1e052:	601a      	str	r2, [r3, #0]
}
   1e054:	46c0      	nop			; (mov r8, r8)
   1e056:	46bd      	mov	sp, r7
   1e058:	b002      	add	sp, #8
   1e05a:	bd80      	pop	{r7, pc}
   1e05c:	e000e100 	.word	0xe000e100

0001e060 <usart_is_syncing>:
{
   1e060:	b580      	push	{r7, lr}
   1e062:	b084      	sub	sp, #16
   1e064:	af00      	add	r7, sp, #0
   1e066:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e068:	687b      	ldr	r3, [r7, #4]
   1e06a:	681b      	ldr	r3, [r3, #0]
   1e06c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1e06e:	68fb      	ldr	r3, [r7, #12]
   1e070:	69db      	ldr	r3, [r3, #28]
   1e072:	1e5a      	subs	r2, r3, #1
   1e074:	4193      	sbcs	r3, r2
   1e076:	b2db      	uxtb	r3, r3
}
   1e078:	0018      	movs	r0, r3
   1e07a:	46bd      	mov	sp, r7
   1e07c:	b004      	add	sp, #16
   1e07e:	bd80      	pop	{r7, pc}

0001e080 <_usart_wait_for_sync>:
{
   1e080:	b580      	push	{r7, lr}
   1e082:	b082      	sub	sp, #8
   1e084:	af00      	add	r7, sp, #0
   1e086:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1e088:	46c0      	nop			; (mov r8, r8)
   1e08a:	687b      	ldr	r3, [r7, #4]
   1e08c:	0018      	movs	r0, r3
   1e08e:	4b04      	ldr	r3, [pc, #16]	; (1e0a0 <_usart_wait_for_sync+0x20>)
   1e090:	4798      	blx	r3
   1e092:	1e03      	subs	r3, r0, #0
   1e094:	d1f9      	bne.n	1e08a <_usart_wait_for_sync+0xa>
}
   1e096:	46c0      	nop			; (mov r8, r8)
   1e098:	46bd      	mov	sp, r7
   1e09a:	b002      	add	sp, #8
   1e09c:	bd80      	pop	{r7, pc}
   1e09e:	46c0      	nop			; (mov r8, r8)
   1e0a0:	0001e061 	.word	0x0001e061

0001e0a4 <usart_get_config_defaults>:
{
   1e0a4:	b580      	push	{r7, lr}
   1e0a6:	b082      	sub	sp, #8
   1e0a8:	af00      	add	r7, sp, #0
   1e0aa:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1e0ac:	687b      	ldr	r3, [r7, #4]
   1e0ae:	2280      	movs	r2, #128	; 0x80
   1e0b0:	05d2      	lsls	r2, r2, #23
   1e0b2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e0b4:	687b      	ldr	r3, [r7, #4]
   1e0b6:	2200      	movs	r2, #0
   1e0b8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e0ba:	687b      	ldr	r3, [r7, #4]
   1e0bc:	22ff      	movs	r2, #255	; 0xff
   1e0be:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e0c0:	687b      	ldr	r3, [r7, #4]
   1e0c2:	2200      	movs	r2, #0
   1e0c4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e0c6:	687b      	ldr	r3, [r7, #4]
   1e0c8:	2200      	movs	r2, #0
   1e0ca:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e0cc:	687b      	ldr	r3, [r7, #4]
   1e0ce:	2296      	movs	r2, #150	; 0x96
   1e0d0:	0192      	lsls	r2, r2, #6
   1e0d2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e0d4:	687b      	ldr	r3, [r7, #4]
   1e0d6:	2224      	movs	r2, #36	; 0x24
   1e0d8:	2101      	movs	r1, #1
   1e0da:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e0dc:	687b      	ldr	r3, [r7, #4]
   1e0de:	2225      	movs	r2, #37	; 0x25
   1e0e0:	2101      	movs	r1, #1
   1e0e2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e0e4:	687b      	ldr	r3, [r7, #4]
   1e0e6:	2226      	movs	r2, #38	; 0x26
   1e0e8:	2100      	movs	r1, #0
   1e0ea:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e0ec:	687b      	ldr	r3, [r7, #4]
   1e0ee:	2227      	movs	r2, #39	; 0x27
   1e0f0:	2100      	movs	r1, #0
   1e0f2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e0f4:	687b      	ldr	r3, [r7, #4]
   1e0f6:	2200      	movs	r2, #0
   1e0f8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e0fa:	687b      	ldr	r3, [r7, #4]
   1e0fc:	2288      	movs	r2, #136	; 0x88
   1e0fe:	0352      	lsls	r2, r2, #13
   1e100:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e102:	687b      	ldr	r3, [r7, #4]
   1e104:	222c      	movs	r2, #44	; 0x2c
   1e106:	2100      	movs	r1, #0
   1e108:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e10a:	687b      	ldr	r3, [r7, #4]
   1e10c:	222d      	movs	r2, #45	; 0x2d
   1e10e:	2100      	movs	r1, #0
   1e110:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e112:	687b      	ldr	r3, [r7, #4]
   1e114:	2200      	movs	r2, #0
   1e116:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e118:	687b      	ldr	r3, [r7, #4]
   1e11a:	2200      	movs	r2, #0
   1e11c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e11e:	687b      	ldr	r3, [r7, #4]
   1e120:	2200      	movs	r2, #0
   1e122:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e124:	687b      	ldr	r3, [r7, #4]
   1e126:	2200      	movs	r2, #0
   1e128:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e12a:	687b      	ldr	r3, [r7, #4]
   1e12c:	2200      	movs	r2, #0
   1e12e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e130:	687b      	ldr	r3, [r7, #4]
   1e132:	2200      	movs	r2, #0
   1e134:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1e136:	687b      	ldr	r3, [r7, #4]
   1e138:	2200      	movs	r2, #0
   1e13a:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1e13c:	687b      	ldr	r3, [r7, #4]
   1e13e:	2200      	movs	r2, #0
   1e140:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1e142:	687b      	ldr	r3, [r7, #4]
   1e144:	2200      	movs	r2, #0
   1e146:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1e148:	687b      	ldr	r3, [r7, #4]
   1e14a:	2200      	movs	r2, #0
   1e14c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e14e:	687b      	ldr	r3, [r7, #4]
   1e150:	2213      	movs	r2, #19
   1e152:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1e154:	687b      	ldr	r3, [r7, #4]
   1e156:	2200      	movs	r2, #0
   1e158:	775a      	strb	r2, [r3, #29]
}
   1e15a:	46c0      	nop			; (mov r8, r8)
   1e15c:	46bd      	mov	sp, r7
   1e15e:	b002      	add	sp, #8
   1e160:	bd80      	pop	{r7, pc}
	...

0001e164 <usart_enable>:
{
   1e164:	b580      	push	{r7, lr}
   1e166:	b084      	sub	sp, #16
   1e168:	af00      	add	r7, sp, #0
   1e16a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e16c:	687b      	ldr	r3, [r7, #4]
   1e16e:	681b      	ldr	r3, [r3, #0]
   1e170:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e172:	687b      	ldr	r3, [r7, #4]
   1e174:	681b      	ldr	r3, [r3, #0]
   1e176:	0018      	movs	r0, r3
   1e178:	4b09      	ldr	r3, [pc, #36]	; (1e1a0 <usart_enable+0x3c>)
   1e17a:	4798      	blx	r3
   1e17c:	0003      	movs	r3, r0
   1e17e:	0018      	movs	r0, r3
   1e180:	4b08      	ldr	r3, [pc, #32]	; (1e1a4 <usart_enable+0x40>)
   1e182:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1e184:	687b      	ldr	r3, [r7, #4]
   1e186:	0018      	movs	r0, r3
   1e188:	4b07      	ldr	r3, [pc, #28]	; (1e1a8 <usart_enable+0x44>)
   1e18a:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e18c:	68fb      	ldr	r3, [r7, #12]
   1e18e:	681b      	ldr	r3, [r3, #0]
   1e190:	2202      	movs	r2, #2
   1e192:	431a      	orrs	r2, r3
   1e194:	68fb      	ldr	r3, [r7, #12]
   1e196:	601a      	str	r2, [r3, #0]
}
   1e198:	46c0      	nop			; (mov r8, r8)
   1e19a:	46bd      	mov	sp, r7
   1e19c:	b004      	add	sp, #16
   1e19e:	bd80      	pop	{r7, pc}
   1e1a0:	00027a91 	.word	0x00027a91
   1e1a4:	0001e035 	.word	0x0001e035
   1e1a8:	0001e081 	.word	0x0001e081

0001e1ac <usart_enable_callback>:
{
   1e1ac:	b580      	push	{r7, lr}
   1e1ae:	b082      	sub	sp, #8
   1e1b0:	af00      	add	r7, sp, #0
   1e1b2:	6078      	str	r0, [r7, #4]
   1e1b4:	000a      	movs	r2, r1
   1e1b6:	1cfb      	adds	r3, r7, #3
   1e1b8:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1e1ba:	687b      	ldr	r3, [r7, #4]
   1e1bc:	2231      	movs	r2, #49	; 0x31
   1e1be:	5c9b      	ldrb	r3, [r3, r2]
   1e1c0:	b25a      	sxtb	r2, r3
   1e1c2:	1cfb      	adds	r3, r7, #3
   1e1c4:	781b      	ldrb	r3, [r3, #0]
   1e1c6:	2101      	movs	r1, #1
   1e1c8:	4099      	lsls	r1, r3
   1e1ca:	000b      	movs	r3, r1
   1e1cc:	b25b      	sxtb	r3, r3
   1e1ce:	4313      	orrs	r3, r2
   1e1d0:	b25b      	sxtb	r3, r3
   1e1d2:	b2d9      	uxtb	r1, r3
   1e1d4:	687b      	ldr	r3, [r7, #4]
   1e1d6:	2231      	movs	r2, #49	; 0x31
   1e1d8:	5499      	strb	r1, [r3, r2]
}
   1e1da:	46c0      	nop			; (mov r8, r8)
   1e1dc:	46bd      	mov	sp, r7
   1e1de:	b002      	add	sp, #8
   1e1e0:	bd80      	pop	{r7, pc}
	...

0001e1e4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e1e4:	b580      	push	{r7, lr}
   1e1e6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e1e8:	2380      	movs	r3, #128	; 0x80
   1e1ea:	009a      	lsls	r2, r3, #2
   1e1ec:	4b0f      	ldr	r3, [pc, #60]	; (1e22c <InitializeSerialConsole+0x48>)
   1e1ee:	0011      	movs	r1, r2
   1e1f0:	0018      	movs	r0, r3
   1e1f2:	4b0f      	ldr	r3, [pc, #60]	; (1e230 <InitializeSerialConsole+0x4c>)
   1e1f4:	4798      	blx	r3
   1e1f6:	0002      	movs	r2, r0
   1e1f8:	4b0e      	ldr	r3, [pc, #56]	; (1e234 <InitializeSerialConsole+0x50>)
   1e1fa:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e1fc:	2380      	movs	r3, #128	; 0x80
   1e1fe:	009a      	lsls	r2, r3, #2
   1e200:	4b0d      	ldr	r3, [pc, #52]	; (1e238 <InitializeSerialConsole+0x54>)
   1e202:	0011      	movs	r1, r2
   1e204:	0018      	movs	r0, r3
   1e206:	4b0a      	ldr	r3, [pc, #40]	; (1e230 <InitializeSerialConsole+0x4c>)
   1e208:	4798      	blx	r3
   1e20a:	0002      	movs	r2, r0
   1e20c:	4b0b      	ldr	r3, [pc, #44]	; (1e23c <InitializeSerialConsole+0x58>)
   1e20e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e210:	4b0b      	ldr	r3, [pc, #44]	; (1e240 <InitializeSerialConsole+0x5c>)
   1e212:	4798      	blx	r3
    configure_usart_callbacks();
   1e214:	4b0b      	ldr	r3, [pc, #44]	; (1e244 <InitializeSerialConsole+0x60>)
   1e216:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e218:	490b      	ldr	r1, [pc, #44]	; (1e248 <InitializeSerialConsole+0x64>)
   1e21a:	4b0c      	ldr	r3, [pc, #48]	; (1e24c <InitializeSerialConsole+0x68>)
   1e21c:	2201      	movs	r2, #1
   1e21e:	0018      	movs	r0, r3
   1e220:	4b0b      	ldr	r3, [pc, #44]	; (1e250 <InitializeSerialConsole+0x6c>)
   1e222:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e224:	46c0      	nop			; (mov r8, r8)
   1e226:	46bd      	mov	sp, r7
   1e228:	bd80      	pop	{r7, pc}
   1e22a:	46c0      	nop			; (mov r8, r8)
   1e22c:	200058c8 	.word	0x200058c8
   1e230:	0001df15 	.word	0x0001df15
   1e234:	200056c0 	.word	0x200056c0
   1e238:	200056c8 	.word	0x200056c8
   1e23c:	20005acc 	.word	0x20005acc
   1e240:	0001e3b9 	.word	0x0001e3b9
   1e244:	0001e431 	.word	0x0001e431
   1e248:	200056c4 	.word	0x200056c4
   1e24c:	2000568c 	.word	0x2000568c
   1e250:	00029339 	.word	0x00029339

0001e254 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e254:	b580      	push	{r7, lr}
   1e256:	b084      	sub	sp, #16
   1e258:	af00      	add	r7, sp, #0
   1e25a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e25c:	4b1a      	ldr	r3, [pc, #104]	; (1e2c8 <SerialConsoleWriteString+0x74>)
   1e25e:	4798      	blx	r3
    if (string != NULL) {
   1e260:	687b      	ldr	r3, [r7, #4]
   1e262:	2b00      	cmp	r3, #0
   1e264:	d02a      	beq.n	1e2bc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e266:	2300      	movs	r3, #0
   1e268:	60fb      	str	r3, [r7, #12]
   1e26a:	e00b      	b.n	1e284 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e26c:	4b17      	ldr	r3, [pc, #92]	; (1e2cc <SerialConsoleWriteString+0x78>)
   1e26e:	6818      	ldr	r0, [r3, #0]
   1e270:	687a      	ldr	r2, [r7, #4]
   1e272:	68fb      	ldr	r3, [r7, #12]
   1e274:	18d3      	adds	r3, r2, r3
   1e276:	781b      	ldrb	r3, [r3, #0]
   1e278:	0019      	movs	r1, r3
   1e27a:	4b15      	ldr	r3, [pc, #84]	; (1e2d0 <SerialConsoleWriteString+0x7c>)
   1e27c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e27e:	68fb      	ldr	r3, [r7, #12]
   1e280:	3301      	adds	r3, #1
   1e282:	60fb      	str	r3, [r7, #12]
   1e284:	687b      	ldr	r3, [r7, #4]
   1e286:	0018      	movs	r0, r3
   1e288:	4b12      	ldr	r3, [pc, #72]	; (1e2d4 <SerialConsoleWriteString+0x80>)
   1e28a:	4798      	blx	r3
   1e28c:	0002      	movs	r2, r0
   1e28e:	68fb      	ldr	r3, [r7, #12]
   1e290:	429a      	cmp	r2, r3
   1e292:	d8eb      	bhi.n	1e26c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e294:	4b10      	ldr	r3, [pc, #64]	; (1e2d8 <SerialConsoleWriteString+0x84>)
   1e296:	2101      	movs	r1, #1
   1e298:	0018      	movs	r0, r3
   1e29a:	4b10      	ldr	r3, [pc, #64]	; (1e2dc <SerialConsoleWriteString+0x88>)
   1e29c:	4798      	blx	r3
   1e29e:	1e03      	subs	r3, r0, #0
   1e2a0:	d10c      	bne.n	1e2bc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e2a2:	4b0a      	ldr	r3, [pc, #40]	; (1e2cc <SerialConsoleWriteString+0x78>)
   1e2a4:	681b      	ldr	r3, [r3, #0]
   1e2a6:	4a0e      	ldr	r2, [pc, #56]	; (1e2e0 <SerialConsoleWriteString+0x8c>)
   1e2a8:	0011      	movs	r1, r2
   1e2aa:	0018      	movs	r0, r3
   1e2ac:	4b0d      	ldr	r3, [pc, #52]	; (1e2e4 <SerialConsoleWriteString+0x90>)
   1e2ae:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e2b0:	490b      	ldr	r1, [pc, #44]	; (1e2e0 <SerialConsoleWriteString+0x8c>)
   1e2b2:	4b09      	ldr	r3, [pc, #36]	; (1e2d8 <SerialConsoleWriteString+0x84>)
   1e2b4:	2201      	movs	r2, #1
   1e2b6:	0018      	movs	r0, r3
   1e2b8:	4b0b      	ldr	r3, [pc, #44]	; (1e2e8 <SerialConsoleWriteString+0x94>)
   1e2ba:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e2bc:	4b0b      	ldr	r3, [pc, #44]	; (1e2ec <SerialConsoleWriteString+0x98>)
   1e2be:	4798      	blx	r3
}
   1e2c0:	46c0      	nop			; (mov r8, r8)
   1e2c2:	46bd      	mov	sp, r7
   1e2c4:	b004      	add	sp, #16
   1e2c6:	bd80      	pop	{r7, pc}
   1e2c8:	0001c8c1 	.word	0x0001c8c1
   1e2cc:	20005acc 	.word	0x20005acc
   1e2d0:	0001df75 	.word	0x0001df75
   1e2d4:	000351cb 	.word	0x000351cb
   1e2d8:	2000568c 	.word	0x2000568c
   1e2dc:	00029381 	.word	0x00029381
   1e2e0:	20005ac8 	.word	0x20005ac8
   1e2e4:	0001dfa9 	.word	0x0001dfa9
   1e2e8:	000292f1 	.word	0x000292f1
   1e2ec:	0001c8d9 	.word	0x0001c8d9

0001e2f0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e2f0:	b580      	push	{r7, lr}
   1e2f2:	b084      	sub	sp, #16
   1e2f4:	af00      	add	r7, sp, #0
   1e2f6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e2f8:	4b08      	ldr	r3, [pc, #32]	; (1e31c <SerialConsoleReadCharacter+0x2c>)
   1e2fa:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e2fc:	4b08      	ldr	r3, [pc, #32]	; (1e320 <SerialConsoleReadCharacter+0x30>)
   1e2fe:	681b      	ldr	r3, [r3, #0]
   1e300:	687a      	ldr	r2, [r7, #4]
   1e302:	0011      	movs	r1, r2
   1e304:	0018      	movs	r0, r3
   1e306:	4b07      	ldr	r3, [pc, #28]	; (1e324 <SerialConsoleReadCharacter+0x34>)
   1e308:	4798      	blx	r3
   1e30a:	0003      	movs	r3, r0
   1e30c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e30e:	4b06      	ldr	r3, [pc, #24]	; (1e328 <SerialConsoleReadCharacter+0x38>)
   1e310:	4798      	blx	r3
    return a;
   1e312:	68fb      	ldr	r3, [r7, #12]
}
   1e314:	0018      	movs	r0, r3
   1e316:	46bd      	mov	sp, r7
   1e318:	b004      	add	sp, #16
   1e31a:	bd80      	pop	{r7, pc}
   1e31c:	0001c8c1 	.word	0x0001c8c1
   1e320:	200056c0 	.word	0x200056c0
   1e324:	0001dfa9 	.word	0x0001dfa9
   1e328:	0001c8d9 	.word	0x0001c8d9

0001e32c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e32c:	b580      	push	{r7, lr}
   1e32e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e330:	4b02      	ldr	r3, [pc, #8]	; (1e33c <getLogLevel+0x10>)
   1e332:	781b      	ldrb	r3, [r3, #0]
}
   1e334:	0018      	movs	r0, r3
   1e336:	46bd      	mov	sp, r7
   1e338:	bd80      	pop	{r7, pc}
   1e33a:	46c0      	nop			; (mov r8, r8)
   1e33c:	20004218 	.word	0x20004218

0001e340 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e340:	b40e      	push	{r1, r2, r3}
   1e342:	b590      	push	{r4, r7, lr}
   1e344:	b084      	sub	sp, #16
   1e346:	af00      	add	r7, sp, #0
   1e348:	0002      	movs	r2, r0
   1e34a:	1dfb      	adds	r3, r7, #7
   1e34c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e34e:	4b0e      	ldr	r3, [pc, #56]	; (1e388 <LogMessage+0x48>)
   1e350:	4798      	blx	r3
   1e352:	0003      	movs	r3, r0
   1e354:	001a      	movs	r2, r3
   1e356:	1dfb      	adds	r3, r7, #7
   1e358:	781b      	ldrb	r3, [r3, #0]
   1e35a:	4293      	cmp	r3, r2
   1e35c:	d30c      	bcc.n	1e378 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e35e:	2320      	movs	r3, #32
   1e360:	18fb      	adds	r3, r7, r3
   1e362:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e364:	68fb      	ldr	r3, [r7, #12]
   1e366:	69fa      	ldr	r2, [r7, #28]
   1e368:	4808      	ldr	r0, [pc, #32]	; (1e38c <LogMessage+0x4c>)
   1e36a:	217f      	movs	r1, #127	; 0x7f
   1e36c:	4c08      	ldr	r4, [pc, #32]	; (1e390 <LogMessage+0x50>)
   1e36e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e370:	4b06      	ldr	r3, [pc, #24]	; (1e38c <LogMessage+0x4c>)
   1e372:	0018      	movs	r0, r3
   1e374:	4b07      	ldr	r3, [pc, #28]	; (1e394 <LogMessage+0x54>)
   1e376:	4798      	blx	r3
        va_end(ap);
    }
};
   1e378:	46c0      	nop			; (mov r8, r8)
   1e37a:	46bd      	mov	sp, r7
   1e37c:	b004      	add	sp, #16
   1e37e:	bc90      	pop	{r4, r7}
   1e380:	bc08      	pop	{r3}
   1e382:	b003      	add	sp, #12
   1e384:	4718      	bx	r3
   1e386:	46c0      	nop			; (mov r8, r8)
   1e388:	0001e32d 	.word	0x0001e32d
   1e38c:	2000560c 	.word	0x2000560c
   1e390:	00035405 	.word	0x00035405
   1e394:	0001e255 	.word	0x0001e255

0001e398 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e398:	b40f      	push	{r0, r1, r2, r3}
   1e39a:	b580      	push	{r7, lr}
   1e39c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e39e:	68bb      	ldr	r3, [r7, #8]
   1e3a0:	0019      	movs	r1, r3
   1e3a2:	2001      	movs	r0, #1
   1e3a4:	4b03      	ldr	r3, [pc, #12]	; (1e3b4 <LogMessageDebug+0x1c>)
   1e3a6:	4798      	blx	r3
};
   1e3a8:	46c0      	nop			; (mov r8, r8)
   1e3aa:	46bd      	mov	sp, r7
   1e3ac:	bc80      	pop	{r7}
   1e3ae:	bc08      	pop	{r3}
   1e3b0:	b004      	add	sp, #16
   1e3b2:	4718      	bx	r3
   1e3b4:	0001e341 	.word	0x0001e341

0001e3b8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1e3b8:	b580      	push	{r7, lr}
   1e3ba:	b090      	sub	sp, #64	; 0x40
   1e3bc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1e3be:	003b      	movs	r3, r7
   1e3c0:	0018      	movs	r0, r3
   1e3c2:	4b14      	ldr	r3, [pc, #80]	; (1e414 <configure_usart+0x5c>)
   1e3c4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1e3c6:	003b      	movs	r3, r7
   1e3c8:	22e1      	movs	r2, #225	; 0xe1
   1e3ca:	0252      	lsls	r2, r2, #9
   1e3cc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1e3ce:	003b      	movs	r3, r7
   1e3d0:	22c4      	movs	r2, #196	; 0xc4
   1e3d2:	0392      	lsls	r2, r2, #14
   1e3d4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1e3d6:	003b      	movs	r3, r7
   1e3d8:	2201      	movs	r2, #1
   1e3da:	4252      	negs	r2, r2
   1e3dc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1e3de:	003b      	movs	r3, r7
   1e3e0:	2201      	movs	r2, #1
   1e3e2:	4252      	negs	r2, r2
   1e3e4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1e3e6:	003b      	movs	r3, r7
   1e3e8:	4a0b      	ldr	r2, [pc, #44]	; (1e418 <configure_usart+0x60>)
   1e3ea:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1e3ec:	003b      	movs	r3, r7
   1e3ee:	4a0b      	ldr	r2, [pc, #44]	; (1e41c <configure_usart+0x64>)
   1e3f0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1e3f2:	46c0      	nop			; (mov r8, r8)
   1e3f4:	003a      	movs	r2, r7
   1e3f6:	490a      	ldr	r1, [pc, #40]	; (1e420 <configure_usart+0x68>)
   1e3f8:	4b0a      	ldr	r3, [pc, #40]	; (1e424 <configure_usart+0x6c>)
   1e3fa:	0018      	movs	r0, r3
   1e3fc:	4b0a      	ldr	r3, [pc, #40]	; (1e428 <configure_usart+0x70>)
   1e3fe:	4798      	blx	r3
   1e400:	1e03      	subs	r3, r0, #0
   1e402:	d1f7      	bne.n	1e3f4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1e404:	4b07      	ldr	r3, [pc, #28]	; (1e424 <configure_usart+0x6c>)
   1e406:	0018      	movs	r0, r3
   1e408:	4b08      	ldr	r3, [pc, #32]	; (1e42c <configure_usart+0x74>)
   1e40a:	4798      	blx	r3
}
   1e40c:	46c0      	nop			; (mov r8, r8)
   1e40e:	46bd      	mov	sp, r7
   1e410:	b010      	add	sp, #64	; 0x40
   1e412:	bd80      	pop	{r7, pc}
   1e414:	0001e0a5 	.word	0x0001e0a5
   1e418:	002a0003 	.word	0x002a0003
   1e41c:	002b0003 	.word	0x002b0003
   1e420:	42001800 	.word	0x42001800
   1e424:	2000568c 	.word	0x2000568c
   1e428:	00028ef5 	.word	0x00028ef5
   1e42c:	0001e165 	.word	0x0001e165

0001e430 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1e430:	b580      	push	{r7, lr}
   1e432:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e434:	490c      	ldr	r1, [pc, #48]	; (1e468 <configure_usart_callbacks+0x38>)
   1e436:	4b0d      	ldr	r3, [pc, #52]	; (1e46c <configure_usart_callbacks+0x3c>)
   1e438:	2200      	movs	r2, #0
   1e43a:	0018      	movs	r0, r3
   1e43c:	4b0c      	ldr	r3, [pc, #48]	; (1e470 <configure_usart_callbacks+0x40>)
   1e43e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1e440:	490c      	ldr	r1, [pc, #48]	; (1e474 <configure_usart_callbacks+0x44>)
   1e442:	4b0a      	ldr	r3, [pc, #40]	; (1e46c <configure_usart_callbacks+0x3c>)
   1e444:	2201      	movs	r2, #1
   1e446:	0018      	movs	r0, r3
   1e448:	4b09      	ldr	r3, [pc, #36]	; (1e470 <configure_usart_callbacks+0x40>)
   1e44a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e44c:	4b07      	ldr	r3, [pc, #28]	; (1e46c <configure_usart_callbacks+0x3c>)
   1e44e:	2100      	movs	r1, #0
   1e450:	0018      	movs	r0, r3
   1e452:	4b09      	ldr	r3, [pc, #36]	; (1e478 <configure_usart_callbacks+0x48>)
   1e454:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1e456:	4b05      	ldr	r3, [pc, #20]	; (1e46c <configure_usart_callbacks+0x3c>)
   1e458:	2101      	movs	r1, #1
   1e45a:	0018      	movs	r0, r3
   1e45c:	4b06      	ldr	r3, [pc, #24]	; (1e478 <configure_usart_callbacks+0x48>)
   1e45e:	4798      	blx	r3
}
   1e460:	46c0      	nop			; (mov r8, r8)
   1e462:	46bd      	mov	sp, r7
   1e464:	bd80      	pop	{r7, pc}
   1e466:	46c0      	nop			; (mov r8, r8)
   1e468:	0001e4c5 	.word	0x0001e4c5
   1e46c:	2000568c 	.word	0x2000568c
   1e470:	000292a9 	.word	0x000292a9
   1e474:	0001e47d 	.word	0x0001e47d
   1e478:	0001e1ad 	.word	0x0001e1ad

0001e47c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1e47c:	b580      	push	{r7, lr}
   1e47e:	b082      	sub	sp, #8
   1e480:	af00      	add	r7, sp, #0
   1e482:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1e484:	4b09      	ldr	r3, [pc, #36]	; (1e4ac <usart_read_callback+0x30>)
   1e486:	681a      	ldr	r2, [r3, #0]
   1e488:	4b09      	ldr	r3, [pc, #36]	; (1e4b0 <usart_read_callback+0x34>)
   1e48a:	781b      	ldrb	r3, [r3, #0]
   1e48c:	0019      	movs	r1, r3
   1e48e:	0010      	movs	r0, r2
   1e490:	4b08      	ldr	r3, [pc, #32]	; (1e4b4 <usart_read_callback+0x38>)
   1e492:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1e494:	4906      	ldr	r1, [pc, #24]	; (1e4b0 <usart_read_callback+0x34>)
   1e496:	4b08      	ldr	r3, [pc, #32]	; (1e4b8 <usart_read_callback+0x3c>)
   1e498:	2201      	movs	r2, #1
   1e49a:	0018      	movs	r0, r3
   1e49c:	4b07      	ldr	r3, [pc, #28]	; (1e4bc <usart_read_callback+0x40>)
   1e49e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1e4a0:	4b07      	ldr	r3, [pc, #28]	; (1e4c0 <usart_read_callback+0x44>)
   1e4a2:	4798      	blx	r3
}
   1e4a4:	46c0      	nop			; (mov r8, r8)
   1e4a6:	46bd      	mov	sp, r7
   1e4a8:	b002      	add	sp, #8
   1e4aa:	bd80      	pop	{r7, pc}
   1e4ac:	200056c0 	.word	0x200056c0
   1e4b0:	200056c4 	.word	0x200056c4
   1e4b4:	0001df75 	.word	0x0001df75
   1e4b8:	2000568c 	.word	0x2000568c
   1e4bc:	00029339 	.word	0x00029339
   1e4c0:	00013b59 	.word	0x00013b59

0001e4c4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1e4c4:	b580      	push	{r7, lr}
   1e4c6:	b082      	sub	sp, #8
   1e4c8:	af00      	add	r7, sp, #0
   1e4ca:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1e4cc:	4b09      	ldr	r3, [pc, #36]	; (1e4f4 <usart_write_callback+0x30>)
   1e4ce:	681b      	ldr	r3, [r3, #0]
   1e4d0:	4a09      	ldr	r2, [pc, #36]	; (1e4f8 <usart_write_callback+0x34>)
   1e4d2:	0011      	movs	r1, r2
   1e4d4:	0018      	movs	r0, r3
   1e4d6:	4b09      	ldr	r3, [pc, #36]	; (1e4fc <usart_write_callback+0x38>)
   1e4d8:	4798      	blx	r3
   1e4da:	0003      	movs	r3, r0
   1e4dc:	3301      	adds	r3, #1
   1e4de:	d005      	beq.n	1e4ec <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e4e0:	4905      	ldr	r1, [pc, #20]	; (1e4f8 <usart_write_callback+0x34>)
   1e4e2:	4b07      	ldr	r3, [pc, #28]	; (1e500 <usart_write_callback+0x3c>)
   1e4e4:	2201      	movs	r2, #1
   1e4e6:	0018      	movs	r0, r3
   1e4e8:	4b06      	ldr	r3, [pc, #24]	; (1e504 <usart_write_callback+0x40>)
   1e4ea:	4798      	blx	r3
    }
}
   1e4ec:	46c0      	nop			; (mov r8, r8)
   1e4ee:	46bd      	mov	sp, r7
   1e4f0:	b002      	add	sp, #8
   1e4f2:	bd80      	pop	{r7, pc}
   1e4f4:	20005acc 	.word	0x20005acc
   1e4f8:	20005ac8 	.word	0x20005ac8
   1e4fc:	0001dfa9 	.word	0x0001dfa9
   1e500:	2000568c 	.word	0x2000568c
   1e504:	000292f1 	.word	0x000292f1

0001e508 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1e508:	b590      	push	{r4, r7, lr}
   1e50a:	b087      	sub	sp, #28
   1e50c:	af00      	add	r7, sp, #0
   1e50e:	60f8      	str	r0, [r7, #12]
   1e510:	000c      	movs	r4, r1
   1e512:	0010      	movs	r0, r2
   1e514:	0019      	movs	r1, r3
   1e516:	230a      	movs	r3, #10
   1e518:	18fb      	adds	r3, r7, r3
   1e51a:	1c22      	adds	r2, r4, #0
   1e51c:	801a      	strh	r2, [r3, #0]
   1e51e:	2308      	movs	r3, #8
   1e520:	18fb      	adds	r3, r7, r3
   1e522:	1c02      	adds	r2, r0, #0
   1e524:	801a      	strh	r2, [r3, #0]
   1e526:	1dfb      	adds	r3, r7, #7
   1e528:	1c0a      	adds	r2, r1, #0
   1e52a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1e52c:	230a      	movs	r3, #10
   1e52e:	18fb      	adds	r3, r7, r3
   1e530:	881a      	ldrh	r2, [r3, #0]
   1e532:	2308      	movs	r3, #8
   1e534:	18fb      	adds	r3, r7, r3
   1e536:	881b      	ldrh	r3, [r3, #0]
   1e538:	1ad3      	subs	r3, r2, r3
   1e53a:	3307      	adds	r3, #7
   1e53c:	2b00      	cmp	r3, #0
   1e53e:	da00      	bge.n	1e542 <SDMMC_UNSTUFF_BITS+0x3a>
   1e540:	3307      	adds	r3, #7
   1e542:	10db      	asrs	r3, r3, #3
   1e544:	3b01      	subs	r3, #1
   1e546:	68fa      	ldr	r2, [r7, #12]
   1e548:	18d3      	adds	r3, r2, r3
   1e54a:	781b      	ldrb	r3, [r3, #0]
   1e54c:	0019      	movs	r1, r3
   1e54e:	2308      	movs	r3, #8
   1e550:	18fb      	adds	r3, r7, r3
   1e552:	881b      	ldrh	r3, [r3, #0]
   1e554:	2207      	movs	r2, #7
   1e556:	4013      	ands	r3, r2
   1e558:	4119      	asrs	r1, r3
   1e55a:	000b      	movs	r3, r1
   1e55c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1e55e:	2308      	movs	r3, #8
   1e560:	18fb      	adds	r3, r7, r3
   1e562:	881b      	ldrh	r3, [r3, #0]
   1e564:	2207      	movs	r2, #7
   1e566:	401a      	ands	r2, r3
   1e568:	1dfb      	adds	r3, r7, #7
   1e56a:	781b      	ldrb	r3, [r3, #0]
   1e56c:	18d3      	adds	r3, r2, r3
   1e56e:	2b08      	cmp	r3, #8
   1e570:	dd1c      	ble.n	1e5ac <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e572:	230a      	movs	r3, #10
   1e574:	18fb      	adds	r3, r7, r3
   1e576:	881a      	ldrh	r2, [r3, #0]
   1e578:	2308      	movs	r3, #8
   1e57a:	18fb      	adds	r3, r7, r3
   1e57c:	881b      	ldrh	r3, [r3, #0]
   1e57e:	1ad3      	subs	r3, r2, r3
   1e580:	3307      	adds	r3, #7
   1e582:	2b00      	cmp	r3, #0
   1e584:	da00      	bge.n	1e588 <SDMMC_UNSTUFF_BITS+0x80>
   1e586:	3307      	adds	r3, #7
   1e588:	10db      	asrs	r3, r3, #3
   1e58a:	3b02      	subs	r3, #2
   1e58c:	68fa      	ldr	r2, [r7, #12]
   1e58e:	18d3      	adds	r3, r2, r3
   1e590:	781b      	ldrb	r3, [r3, #0]
   1e592:	0019      	movs	r1, r3
   1e594:	2308      	movs	r3, #8
   1e596:	18fb      	adds	r3, r7, r3
   1e598:	881b      	ldrh	r3, [r3, #0]
   1e59a:	2207      	movs	r2, #7
   1e59c:	4013      	ands	r3, r2
   1e59e:	2208      	movs	r2, #8
   1e5a0:	1ad3      	subs	r3, r2, r3
   1e5a2:	4099      	lsls	r1, r3
   1e5a4:	000b      	movs	r3, r1
   1e5a6:	697a      	ldr	r2, [r7, #20]
   1e5a8:	4313      	orrs	r3, r2
   1e5aa:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e5ac:	2308      	movs	r3, #8
   1e5ae:	18fb      	adds	r3, r7, r3
   1e5b0:	881b      	ldrh	r3, [r3, #0]
   1e5b2:	2207      	movs	r2, #7
   1e5b4:	401a      	ands	r2, r3
   1e5b6:	1dfb      	adds	r3, r7, #7
   1e5b8:	781b      	ldrb	r3, [r3, #0]
   1e5ba:	18d3      	adds	r3, r2, r3
   1e5bc:	2b10      	cmp	r3, #16
   1e5be:	dd1c      	ble.n	1e5fa <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e5c0:	230a      	movs	r3, #10
   1e5c2:	18fb      	adds	r3, r7, r3
   1e5c4:	881a      	ldrh	r2, [r3, #0]
   1e5c6:	2308      	movs	r3, #8
   1e5c8:	18fb      	adds	r3, r7, r3
   1e5ca:	881b      	ldrh	r3, [r3, #0]
   1e5cc:	1ad3      	subs	r3, r2, r3
   1e5ce:	3307      	adds	r3, #7
   1e5d0:	2b00      	cmp	r3, #0
   1e5d2:	da00      	bge.n	1e5d6 <SDMMC_UNSTUFF_BITS+0xce>
   1e5d4:	3307      	adds	r3, #7
   1e5d6:	10db      	asrs	r3, r3, #3
   1e5d8:	3b03      	subs	r3, #3
   1e5da:	68fa      	ldr	r2, [r7, #12]
   1e5dc:	18d3      	adds	r3, r2, r3
   1e5de:	781b      	ldrb	r3, [r3, #0]
   1e5e0:	0019      	movs	r1, r3
   1e5e2:	2308      	movs	r3, #8
   1e5e4:	18fb      	adds	r3, r7, r3
   1e5e6:	881b      	ldrh	r3, [r3, #0]
   1e5e8:	2207      	movs	r2, #7
   1e5ea:	4013      	ands	r3, r2
   1e5ec:	2210      	movs	r2, #16
   1e5ee:	1ad3      	subs	r3, r2, r3
   1e5f0:	4099      	lsls	r1, r3
   1e5f2:	000b      	movs	r3, r1
   1e5f4:	697a      	ldr	r2, [r7, #20]
   1e5f6:	4313      	orrs	r3, r2
   1e5f8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e5fa:	2308      	movs	r3, #8
   1e5fc:	18fb      	adds	r3, r7, r3
   1e5fe:	881b      	ldrh	r3, [r3, #0]
   1e600:	2207      	movs	r2, #7
   1e602:	401a      	ands	r2, r3
   1e604:	1dfb      	adds	r3, r7, #7
   1e606:	781b      	ldrb	r3, [r3, #0]
   1e608:	18d3      	adds	r3, r2, r3
   1e60a:	2b10      	cmp	r3, #16
   1e60c:	dd1c      	ble.n	1e648 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e60e:	230a      	movs	r3, #10
   1e610:	18fb      	adds	r3, r7, r3
   1e612:	881a      	ldrh	r2, [r3, #0]
   1e614:	2308      	movs	r3, #8
   1e616:	18fb      	adds	r3, r7, r3
   1e618:	881b      	ldrh	r3, [r3, #0]
   1e61a:	1ad3      	subs	r3, r2, r3
   1e61c:	3307      	adds	r3, #7
   1e61e:	2b00      	cmp	r3, #0
   1e620:	da00      	bge.n	1e624 <SDMMC_UNSTUFF_BITS+0x11c>
   1e622:	3307      	adds	r3, #7
   1e624:	10db      	asrs	r3, r3, #3
   1e626:	3b03      	subs	r3, #3
   1e628:	68fa      	ldr	r2, [r7, #12]
   1e62a:	18d3      	adds	r3, r2, r3
   1e62c:	781b      	ldrb	r3, [r3, #0]
   1e62e:	0019      	movs	r1, r3
   1e630:	2308      	movs	r3, #8
   1e632:	18fb      	adds	r3, r7, r3
   1e634:	881b      	ldrh	r3, [r3, #0]
   1e636:	2207      	movs	r2, #7
   1e638:	4013      	ands	r3, r2
   1e63a:	2210      	movs	r2, #16
   1e63c:	1ad3      	subs	r3, r2, r3
   1e63e:	4099      	lsls	r1, r3
   1e640:	000b      	movs	r3, r1
   1e642:	697a      	ldr	r2, [r7, #20]
   1e644:	4313      	orrs	r3, r2
   1e646:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e648:	1dfb      	adds	r3, r7, #7
   1e64a:	781b      	ldrb	r3, [r3, #0]
   1e64c:	2201      	movs	r2, #1
   1e64e:	409a      	lsls	r2, r3
   1e650:	0013      	movs	r3, r2
   1e652:	1e5a      	subs	r2, r3, #1
   1e654:	697b      	ldr	r3, [r7, #20]
   1e656:	4013      	ands	r3, r2
   1e658:	617b      	str	r3, [r7, #20]
	return value;
   1e65a:	697b      	ldr	r3, [r7, #20]
}
   1e65c:	0018      	movs	r0, r3
   1e65e:	46bd      	mov	sp, r7
   1e660:	b007      	add	sp, #28
   1e662:	bd90      	pop	{r4, r7, pc}

0001e664 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e664:	b580      	push	{r7, lr}
   1e666:	b082      	sub	sp, #8
   1e668:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e66a:	4b23      	ldr	r3, [pc, #140]	; (1e6f8 <mmc_spi_op_cond+0x94>)
   1e66c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e66e:	4b23      	ldr	r3, [pc, #140]	; (1e6fc <mmc_spi_op_cond+0x98>)
   1e670:	2100      	movs	r1, #0
   1e672:	0018      	movs	r0, r3
   1e674:	4b22      	ldr	r3, [pc, #136]	; (1e700 <mmc_spi_op_cond+0x9c>)
   1e676:	4798      	blx	r3
   1e678:	0003      	movs	r3, r0
   1e67a:	001a      	movs	r2, r3
   1e67c:	2301      	movs	r3, #1
   1e67e:	4053      	eors	r3, r2
   1e680:	b2db      	uxtb	r3, r3
   1e682:	2b00      	cmp	r3, #0
   1e684:	d001      	beq.n	1e68a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e686:	2300      	movs	r3, #0
   1e688:	e031      	b.n	1e6ee <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e68a:	4b1e      	ldr	r3, [pc, #120]	; (1e704 <mmc_spi_op_cond+0xa0>)
   1e68c:	4798      	blx	r3
   1e68e:	0003      	movs	r3, r0
   1e690:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e692:	683b      	ldr	r3, [r7, #0]
   1e694:	2201      	movs	r2, #1
   1e696:	4013      	ands	r3, r2
   1e698:	d006      	beq.n	1e6a8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e69a:	687b      	ldr	r3, [r7, #4]
   1e69c:	1e5a      	subs	r2, r3, #1
   1e69e:	607a      	str	r2, [r7, #4]
   1e6a0:	2b00      	cmp	r3, #0
   1e6a2:	d1e4      	bne.n	1e66e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e6a4:	2300      	movs	r3, #0
   1e6a6:	e022      	b.n	1e6ee <mmc_spi_op_cond+0x8a>
			break;
   1e6a8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e6aa:	4b17      	ldr	r3, [pc, #92]	; (1e708 <mmc_spi_op_cond+0xa4>)
   1e6ac:	2100      	movs	r1, #0
   1e6ae:	0018      	movs	r0, r3
   1e6b0:	4b13      	ldr	r3, [pc, #76]	; (1e700 <mmc_spi_op_cond+0x9c>)
   1e6b2:	4798      	blx	r3
   1e6b4:	0003      	movs	r3, r0
   1e6b6:	001a      	movs	r2, r3
   1e6b8:	2301      	movs	r3, #1
   1e6ba:	4053      	eors	r3, r2
   1e6bc:	b2db      	uxtb	r3, r3
   1e6be:	2b00      	cmp	r3, #0
   1e6c0:	d001      	beq.n	1e6c6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e6c2:	2300      	movs	r3, #0
   1e6c4:	e013      	b.n	1e6ee <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e6c6:	4b0f      	ldr	r3, [pc, #60]	; (1e704 <mmc_spi_op_cond+0xa0>)
   1e6c8:	4798      	blx	r3
   1e6ca:	0002      	movs	r2, r0
   1e6cc:	23c0      	movs	r3, #192	; 0xc0
   1e6ce:	05db      	lsls	r3, r3, #23
   1e6d0:	401a      	ands	r2, r3
   1e6d2:	2380      	movs	r3, #128	; 0x80
   1e6d4:	05db      	lsls	r3, r3, #23
   1e6d6:	429a      	cmp	r2, r3
   1e6d8:	d108      	bne.n	1e6ec <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e6da:	4b0c      	ldr	r3, [pc, #48]	; (1e70c <mmc_spi_op_cond+0xa8>)
   1e6dc:	681a      	ldr	r2, [r3, #0]
   1e6de:	4b0b      	ldr	r3, [pc, #44]	; (1e70c <mmc_spi_op_cond+0xa8>)
   1e6e0:	681b      	ldr	r3, [r3, #0]
   1e6e2:	7adb      	ldrb	r3, [r3, #11]
   1e6e4:	2108      	movs	r1, #8
   1e6e6:	430b      	orrs	r3, r1
   1e6e8:	b2db      	uxtb	r3, r3
   1e6ea:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e6ec:	2301      	movs	r3, #1
}
   1e6ee:	0018      	movs	r0, r3
   1e6f0:	46bd      	mov	sp, r7
   1e6f2:	b002      	add	sp, #8
   1e6f4:	bd80      	pop	{r7, pc}
   1e6f6:	46c0      	nop			; (mov r8, r8)
   1e6f8:	00001bee 	.word	0x00001bee
   1e6fc:	00001101 	.word	0x00001101
   1e700:	000200e1 	.word	0x000200e1
   1e704:	00020321 	.word	0x00020321
   1e708:	0000053a 	.word	0x0000053a
   1e70c:	20004240 	.word	0x20004240

0001e710 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e710:	b580      	push	{r7, lr}
   1e712:	b086      	sub	sp, #24
   1e714:	af00      	add	r7, sp, #0
   1e716:	0002      	movs	r2, r0
   1e718:	1dfb      	adds	r3, r7, #7
   1e71a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e71c:	4b2e      	ldr	r3, [pc, #184]	; (1e7d8 <sd_spi_op_cond+0xc8>)
   1e71e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e720:	4b2e      	ldr	r3, [pc, #184]	; (1e7dc <sd_spi_op_cond+0xcc>)
   1e722:	2100      	movs	r1, #0
   1e724:	0018      	movs	r0, r3
   1e726:	4b2e      	ldr	r3, [pc, #184]	; (1e7e0 <sd_spi_op_cond+0xd0>)
   1e728:	4798      	blx	r3
   1e72a:	0003      	movs	r3, r0
   1e72c:	001a      	movs	r2, r3
   1e72e:	2301      	movs	r3, #1
   1e730:	4053      	eors	r3, r2
   1e732:	b2db      	uxtb	r3, r3
   1e734:	2b00      	cmp	r3, #0
   1e736:	d001      	beq.n	1e73c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e738:	2300      	movs	r3, #0
   1e73a:	e048      	b.n	1e7ce <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e73c:	2300      	movs	r3, #0
   1e73e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e740:	1dfb      	adds	r3, r7, #7
   1e742:	781b      	ldrb	r3, [r3, #0]
   1e744:	2b00      	cmp	r3, #0
   1e746:	d004      	beq.n	1e752 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e748:	697b      	ldr	r3, [r7, #20]
   1e74a:	2280      	movs	r2, #128	; 0x80
   1e74c:	05d2      	lsls	r2, r2, #23
   1e74e:	4313      	orrs	r3, r2
   1e750:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e752:	697b      	ldr	r3, [r7, #20]
   1e754:	4a23      	ldr	r2, [pc, #140]	; (1e7e4 <sd_spi_op_cond+0xd4>)
   1e756:	0019      	movs	r1, r3
   1e758:	0010      	movs	r0, r2
   1e75a:	4b21      	ldr	r3, [pc, #132]	; (1e7e0 <sd_spi_op_cond+0xd0>)
   1e75c:	4798      	blx	r3
   1e75e:	0003      	movs	r3, r0
   1e760:	001a      	movs	r2, r3
   1e762:	2301      	movs	r3, #1
   1e764:	4053      	eors	r3, r2
   1e766:	b2db      	uxtb	r3, r3
   1e768:	2b00      	cmp	r3, #0
   1e76a:	d001      	beq.n	1e770 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e76c:	2300      	movs	r3, #0
   1e76e:	e02e      	b.n	1e7ce <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e770:	4b1d      	ldr	r3, [pc, #116]	; (1e7e8 <sd_spi_op_cond+0xd8>)
   1e772:	4798      	blx	r3
   1e774:	0003      	movs	r3, r0
   1e776:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e778:	68fb      	ldr	r3, [r7, #12]
   1e77a:	2201      	movs	r2, #1
   1e77c:	4013      	ands	r3, r2
   1e77e:	d006      	beq.n	1e78e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e780:	693b      	ldr	r3, [r7, #16]
   1e782:	1e5a      	subs	r2, r3, #1
   1e784:	613a      	str	r2, [r7, #16]
   1e786:	2b00      	cmp	r3, #0
   1e788:	d1ca      	bne.n	1e720 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e78a:	2300      	movs	r3, #0
   1e78c:	e01f      	b.n	1e7ce <sd_spi_op_cond+0xbe>
			break;
   1e78e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e790:	4b16      	ldr	r3, [pc, #88]	; (1e7ec <sd_spi_op_cond+0xdc>)
   1e792:	2100      	movs	r1, #0
   1e794:	0018      	movs	r0, r3
   1e796:	4b12      	ldr	r3, [pc, #72]	; (1e7e0 <sd_spi_op_cond+0xd0>)
   1e798:	4798      	blx	r3
   1e79a:	0003      	movs	r3, r0
   1e79c:	001a      	movs	r2, r3
   1e79e:	2301      	movs	r3, #1
   1e7a0:	4053      	eors	r3, r2
   1e7a2:	b2db      	uxtb	r3, r3
   1e7a4:	2b00      	cmp	r3, #0
   1e7a6:	d001      	beq.n	1e7ac <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e7a8:	2300      	movs	r3, #0
   1e7aa:	e010      	b.n	1e7ce <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e7ac:	4b0e      	ldr	r3, [pc, #56]	; (1e7e8 <sd_spi_op_cond+0xd8>)
   1e7ae:	4798      	blx	r3
   1e7b0:	0002      	movs	r2, r0
   1e7b2:	2380      	movs	r3, #128	; 0x80
   1e7b4:	05db      	lsls	r3, r3, #23
   1e7b6:	4013      	ands	r3, r2
   1e7b8:	d008      	beq.n	1e7cc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e7ba:	4b0d      	ldr	r3, [pc, #52]	; (1e7f0 <sd_spi_op_cond+0xe0>)
   1e7bc:	681a      	ldr	r2, [r3, #0]
   1e7be:	4b0c      	ldr	r3, [pc, #48]	; (1e7f0 <sd_spi_op_cond+0xe0>)
   1e7c0:	681b      	ldr	r3, [r3, #0]
   1e7c2:	7adb      	ldrb	r3, [r3, #11]
   1e7c4:	2108      	movs	r1, #8
   1e7c6:	430b      	orrs	r3, r1
   1e7c8:	b2db      	uxtb	r3, r3
   1e7ca:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e7cc:	2301      	movs	r3, #1
}
   1e7ce:	0018      	movs	r0, r3
   1e7d0:	46bd      	mov	sp, r7
   1e7d2:	b006      	add	sp, #24
   1e7d4:	bd80      	pop	{r7, pc}
   1e7d6:	46c0      	nop			; (mov r8, r8)
   1e7d8:	00001bee 	.word	0x00001bee
   1e7dc:	00001137 	.word	0x00001137
   1e7e0:	000200e1 	.word	0x000200e1
   1e7e4:	00001129 	.word	0x00001129
   1e7e8:	00020321 	.word	0x00020321
   1e7ec:	0000053a 	.word	0x0000053a
   1e7f0:	20004240 	.word	0x20004240

0001e7f4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e7f4:	b580      	push	{r7, lr}
   1e7f6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e7f8:	2301      	movs	r3, #1
}
   1e7fa:	0018      	movs	r0, r3
   1e7fc:	46bd      	mov	sp, r7
   1e7fe:	bd80      	pop	{r7, pc}

0001e800 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e800:	b580      	push	{r7, lr}
   1e802:	b084      	sub	sp, #16
   1e804:	af00      	add	r7, sp, #0
   1e806:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e808:	687b      	ldr	r3, [r7, #4]
   1e80a:	2200      	movs	r2, #0
   1e80c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e80e:	23d5      	movs	r3, #213	; 0xd5
   1e810:	005b      	lsls	r3, r3, #1
   1e812:	4a14      	ldr	r2, [pc, #80]	; (1e864 <sd_cmd8+0x64>)
   1e814:	0019      	movs	r1, r3
   1e816:	0010      	movs	r0, r2
   1e818:	4b13      	ldr	r3, [pc, #76]	; (1e868 <sd_cmd8+0x68>)
   1e81a:	4798      	blx	r3
   1e81c:	0003      	movs	r3, r0
   1e81e:	001a      	movs	r2, r3
   1e820:	2301      	movs	r3, #1
   1e822:	4053      	eors	r3, r2
   1e824:	b2db      	uxtb	r3, r3
   1e826:	2b00      	cmp	r3, #0
   1e828:	d001      	beq.n	1e82e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e82a:	2301      	movs	r3, #1
   1e82c:	e015      	b.n	1e85a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e82e:	4b0f      	ldr	r3, [pc, #60]	; (1e86c <sd_cmd8+0x6c>)
   1e830:	4798      	blx	r3
   1e832:	0003      	movs	r3, r0
   1e834:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e836:	68fb      	ldr	r3, [r7, #12]
   1e838:	3301      	adds	r3, #1
   1e83a:	d101      	bne.n	1e840 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e83c:	2301      	movs	r3, #1
   1e83e:	e00c      	b.n	1e85a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e840:	68fb      	ldr	r3, [r7, #12]
   1e842:	051b      	lsls	r3, r3, #20
   1e844:	0d1a      	lsrs	r2, r3, #20
   1e846:	23d5      	movs	r3, #213	; 0xd5
   1e848:	005b      	lsls	r3, r3, #1
   1e84a:	429a      	cmp	r2, r3
   1e84c:	d001      	beq.n	1e852 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e84e:	2300      	movs	r3, #0
   1e850:	e003      	b.n	1e85a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e852:	687b      	ldr	r3, [r7, #4]
   1e854:	2201      	movs	r2, #1
   1e856:	701a      	strb	r2, [r3, #0]
	return true;
   1e858:	2301      	movs	r3, #1
}
   1e85a:	0018      	movs	r0, r3
   1e85c:	46bd      	mov	sp, r7
   1e85e:	b004      	add	sp, #16
   1e860:	bd80      	pop	{r7, pc}
   1e862:	46c0      	nop			; (mov r8, r8)
   1e864:	00005508 	.word	0x00005508
   1e868:	000200e1 	.word	0x000200e1
   1e86c:	00020321 	.word	0x00020321

0001e870 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e870:	b590      	push	{r4, r7, lr}
   1e872:	b089      	sub	sp, #36	; 0x24
   1e874:	af02      	add	r7, sp, #8
   1e876:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e878:	2380      	movs	r3, #128	; 0x80
   1e87a:	009a      	lsls	r2, r3, #2
   1e87c:	4841      	ldr	r0, [pc, #260]	; (1e984 <mmc_cmd8+0x114>)
   1e87e:	2300      	movs	r3, #0
   1e880:	9300      	str	r3, [sp, #0]
   1e882:	2301      	movs	r3, #1
   1e884:	2100      	movs	r1, #0
   1e886:	4c40      	ldr	r4, [pc, #256]	; (1e988 <mmc_cmd8+0x118>)
   1e888:	47a0      	blx	r4
   1e88a:	0003      	movs	r3, r0
   1e88c:	001a      	movs	r2, r3
   1e88e:	2301      	movs	r3, #1
   1e890:	4053      	eors	r3, r2
   1e892:	b2db      	uxtb	r3, r3
   1e894:	2b00      	cmp	r3, #0
   1e896:	d001      	beq.n	1e89c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e898:	2300      	movs	r3, #0
   1e89a:	e06e      	b.n	1e97a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e89c:	2316      	movs	r3, #22
   1e89e:	18fb      	adds	r3, r7, r3
   1e8a0:	2200      	movs	r2, #0
   1e8a2:	801a      	strh	r2, [r3, #0]
   1e8a4:	e014      	b.n	1e8d0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e8a6:	2310      	movs	r3, #16
   1e8a8:	18fb      	adds	r3, r7, r3
   1e8aa:	0018      	movs	r0, r3
   1e8ac:	4b37      	ldr	r3, [pc, #220]	; (1e98c <mmc_cmd8+0x11c>)
   1e8ae:	4798      	blx	r3
   1e8b0:	0003      	movs	r3, r0
   1e8b2:	001a      	movs	r2, r3
   1e8b4:	2301      	movs	r3, #1
   1e8b6:	4053      	eors	r3, r2
   1e8b8:	b2db      	uxtb	r3, r3
   1e8ba:	2b00      	cmp	r3, #0
   1e8bc:	d001      	beq.n	1e8c2 <mmc_cmd8+0x52>
			return false;
   1e8be:	2300      	movs	r3, #0
   1e8c0:	e05b      	b.n	1e97a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e8c2:	2316      	movs	r3, #22
   1e8c4:	18fb      	adds	r3, r7, r3
   1e8c6:	881a      	ldrh	r2, [r3, #0]
   1e8c8:	2316      	movs	r3, #22
   1e8ca:	18fb      	adds	r3, r7, r3
   1e8cc:	3201      	adds	r2, #1
   1e8ce:	801a      	strh	r2, [r3, #0]
   1e8d0:	2316      	movs	r3, #22
   1e8d2:	18fb      	adds	r3, r7, r3
   1e8d4:	881b      	ldrh	r3, [r3, #0]
   1e8d6:	2b31      	cmp	r3, #49	; 0x31
   1e8d8:	d9e5      	bls.n	1e8a6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e8da:	693b      	ldr	r3, [r7, #16]
   1e8dc:	b2db      	uxtb	r3, r3
   1e8de:	2202      	movs	r2, #2
   1e8e0:	4013      	ands	r3, r2
   1e8e2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e8e4:	687b      	ldr	r3, [r7, #4]
   1e8e6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e8e8:	4b29      	ldr	r3, [pc, #164]	; (1e990 <mmc_cmd8+0x120>)
   1e8ea:	681b      	ldr	r3, [r3, #0]
   1e8ec:	330e      	adds	r3, #14
   1e8ee:	0018      	movs	r0, r3
   1e8f0:	230c      	movs	r3, #12
   1e8f2:	223e      	movs	r2, #62	; 0x3e
   1e8f4:	2180      	movs	r1, #128	; 0x80
   1e8f6:	4c27      	ldr	r4, [pc, #156]	; (1e994 <mmc_cmd8+0x124>)
   1e8f8:	47a0      	blx	r4
   1e8fa:	0002      	movs	r2, r0
   1e8fc:	4b26      	ldr	r3, [pc, #152]	; (1e998 <mmc_cmd8+0x128>)
   1e8fe:	429a      	cmp	r2, r3
   1e900:	d135      	bne.n	1e96e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e902:	e014      	b.n	1e92e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e904:	230c      	movs	r3, #12
   1e906:	18fb      	adds	r3, r7, r3
   1e908:	0018      	movs	r0, r3
   1e90a:	4b20      	ldr	r3, [pc, #128]	; (1e98c <mmc_cmd8+0x11c>)
   1e90c:	4798      	blx	r3
   1e90e:	0003      	movs	r3, r0
   1e910:	001a      	movs	r2, r3
   1e912:	2301      	movs	r3, #1
   1e914:	4053      	eors	r3, r2
   1e916:	b2db      	uxtb	r3, r3
   1e918:	2b00      	cmp	r3, #0
   1e91a:	d001      	beq.n	1e920 <mmc_cmd8+0xb0>
				return false;
   1e91c:	2300      	movs	r3, #0
   1e91e:	e02c      	b.n	1e97a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e920:	2316      	movs	r3, #22
   1e922:	18fb      	adds	r3, r7, r3
   1e924:	881a      	ldrh	r2, [r3, #0]
   1e926:	2316      	movs	r3, #22
   1e928:	18fb      	adds	r3, r7, r3
   1e92a:	3201      	adds	r2, #1
   1e92c:	801a      	strh	r2, [r3, #0]
   1e92e:	2316      	movs	r3, #22
   1e930:	18fb      	adds	r3, r7, r3
   1e932:	881b      	ldrh	r3, [r3, #0]
   1e934:	2b35      	cmp	r3, #53	; 0x35
   1e936:	d9e5      	bls.n	1e904 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e938:	4b15      	ldr	r3, [pc, #84]	; (1e990 <mmc_cmd8+0x120>)
   1e93a:	681b      	ldr	r3, [r3, #0]
   1e93c:	68fa      	ldr	r2, [r7, #12]
   1e93e:	0852      	lsrs	r2, r2, #1
   1e940:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e942:	e014      	b.n	1e96e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e944:	230c      	movs	r3, #12
   1e946:	18fb      	adds	r3, r7, r3
   1e948:	0018      	movs	r0, r3
   1e94a:	4b10      	ldr	r3, [pc, #64]	; (1e98c <mmc_cmd8+0x11c>)
   1e94c:	4798      	blx	r3
   1e94e:	0003      	movs	r3, r0
   1e950:	001a      	movs	r2, r3
   1e952:	2301      	movs	r3, #1
   1e954:	4053      	eors	r3, r2
   1e956:	b2db      	uxtb	r3, r3
   1e958:	2b00      	cmp	r3, #0
   1e95a:	d001      	beq.n	1e960 <mmc_cmd8+0xf0>
			return false;
   1e95c:	2300      	movs	r3, #0
   1e95e:	e00c      	b.n	1e97a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e960:	2316      	movs	r3, #22
   1e962:	18fb      	adds	r3, r7, r3
   1e964:	881a      	ldrh	r2, [r3, #0]
   1e966:	2316      	movs	r3, #22
   1e968:	18fb      	adds	r3, r7, r3
   1e96a:	3201      	adds	r2, #1
   1e96c:	801a      	strh	r2, [r3, #0]
   1e96e:	2316      	movs	r3, #22
   1e970:	18fb      	adds	r3, r7, r3
   1e972:	881b      	ldrh	r3, [r3, #0]
   1e974:	2b7f      	cmp	r3, #127	; 0x7f
   1e976:	d9e5      	bls.n	1e944 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e978:	2301      	movs	r3, #1
}
   1e97a:	0018      	movs	r0, r3
   1e97c:	46bd      	mov	sp, r7
   1e97e:	b007      	add	sp, #28
   1e980:	bd90      	pop	{r4, r7, pc}
   1e982:	46c0      	nop			; (mov r8, r8)
   1e984:	00081108 	.word	0x00081108
   1e988:	00020109 	.word	0x00020109
   1e98c:	00020335 	.word	0x00020335
   1e990:	20004240 	.word	0x20004240
   1e994:	0001e509 	.word	0x0001e509
   1e998:	00000fff 	.word	0x00000fff

0001e99c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e99c:	b590      	push	{r4, r7, lr}
   1e99e:	b083      	sub	sp, #12
   1e9a0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e9a2:	4b15      	ldr	r3, [pc, #84]	; (1e9f8 <sd_mmc_cmd9_spi+0x5c>)
   1e9a4:	681b      	ldr	r3, [r3, #0]
   1e9a6:	891b      	ldrh	r3, [r3, #8]
   1e9a8:	0419      	lsls	r1, r3, #16
   1e9aa:	4814      	ldr	r0, [pc, #80]	; (1e9fc <sd_mmc_cmd9_spi+0x60>)
   1e9ac:	2301      	movs	r3, #1
   1e9ae:	9300      	str	r3, [sp, #0]
   1e9b0:	2301      	movs	r3, #1
   1e9b2:	2210      	movs	r2, #16
   1e9b4:	4c12      	ldr	r4, [pc, #72]	; (1ea00 <sd_mmc_cmd9_spi+0x64>)
   1e9b6:	47a0      	blx	r4
   1e9b8:	0003      	movs	r3, r0
   1e9ba:	001a      	movs	r2, r3
   1e9bc:	2301      	movs	r3, #1
   1e9be:	4053      	eors	r3, r2
   1e9c0:	b2db      	uxtb	r3, r3
   1e9c2:	2b00      	cmp	r3, #0
   1e9c4:	d001      	beq.n	1e9ca <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e9c6:	2300      	movs	r3, #0
   1e9c8:	e012      	b.n	1e9f0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e9ca:	4b0b      	ldr	r3, [pc, #44]	; (1e9f8 <sd_mmc_cmd9_spi+0x5c>)
   1e9cc:	681b      	ldr	r3, [r3, #0]
   1e9ce:	330e      	adds	r3, #14
   1e9d0:	2101      	movs	r1, #1
   1e9d2:	0018      	movs	r0, r3
   1e9d4:	4b0b      	ldr	r3, [pc, #44]	; (1ea04 <sd_mmc_cmd9_spi+0x68>)
   1e9d6:	4798      	blx	r3
   1e9d8:	0003      	movs	r3, r0
   1e9da:	001a      	movs	r2, r3
   1e9dc:	2301      	movs	r3, #1
   1e9de:	4053      	eors	r3, r2
   1e9e0:	b2db      	uxtb	r3, r3
   1e9e2:	2b00      	cmp	r3, #0
   1e9e4:	d001      	beq.n	1e9ea <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e9e6:	2300      	movs	r3, #0
   1e9e8:	e002      	b.n	1e9f0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e9ea:	4b07      	ldr	r3, [pc, #28]	; (1ea08 <sd_mmc_cmd9_spi+0x6c>)
   1e9ec:	4798      	blx	r3
   1e9ee:	0003      	movs	r3, r0
}
   1e9f0:	0018      	movs	r0, r3
   1e9f2:	46bd      	mov	sp, r7
   1e9f4:	b001      	add	sp, #4
   1e9f6:	bd90      	pop	{r4, r7, pc}
   1e9f8:	20004240 	.word	0x20004240
   1e9fc:	00081109 	.word	0x00081109
   1ea00:	00020109 	.word	0x00020109
   1ea04:	000203d9 	.word	0x000203d9
   1ea08:	0002047d 	.word	0x0002047d

0001ea0c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1ea0c:	b5b0      	push	{r4, r5, r7, lr}
   1ea0e:	b084      	sub	sp, #16
   1ea10:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1ea12:	4b45      	ldr	r3, [pc, #276]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea14:	681b      	ldr	r3, [r3, #0]
   1ea16:	330e      	adds	r3, #14
   1ea18:	0018      	movs	r0, r3
   1ea1a:	2304      	movs	r3, #4
   1ea1c:	227a      	movs	r2, #122	; 0x7a
   1ea1e:	2180      	movs	r1, #128	; 0x80
   1ea20:	4c42      	ldr	r4, [pc, #264]	; (1eb2c <mmc_decode_csd+0x120>)
   1ea22:	47a0      	blx	r4
   1ea24:	0003      	movs	r3, r0
   1ea26:	2b02      	cmp	r3, #2
   1ea28:	d011      	beq.n	1ea4e <mmc_decode_csd+0x42>
   1ea2a:	d802      	bhi.n	1ea32 <mmc_decode_csd+0x26>
   1ea2c:	2b01      	cmp	r3, #1
   1ea2e:	d009      	beq.n	1ea44 <mmc_decode_csd+0x38>
   1ea30:	e003      	b.n	1ea3a <mmc_decode_csd+0x2e>
   1ea32:	2b03      	cmp	r3, #3
   1ea34:	d010      	beq.n	1ea58 <mmc_decode_csd+0x4c>
   1ea36:	2b04      	cmp	r3, #4
   1ea38:	d013      	beq.n	1ea62 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ea3a:	4b3b      	ldr	r3, [pc, #236]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea3c:	681b      	ldr	r3, [r3, #0]
   1ea3e:	2212      	movs	r2, #18
   1ea40:	731a      	strb	r2, [r3, #12]
		break;
   1ea42:	e013      	b.n	1ea6c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1ea44:	4b38      	ldr	r3, [pc, #224]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea46:	681b      	ldr	r3, [r3, #0]
   1ea48:	2214      	movs	r2, #20
   1ea4a:	731a      	strb	r2, [r3, #12]
		break;
   1ea4c:	e00e      	b.n	1ea6c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1ea4e:	4b36      	ldr	r3, [pc, #216]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea50:	681b      	ldr	r3, [r3, #0]
   1ea52:	2222      	movs	r2, #34	; 0x22
   1ea54:	731a      	strb	r2, [r3, #12]
		break;
   1ea56:	e009      	b.n	1ea6c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1ea58:	4b33      	ldr	r3, [pc, #204]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea5a:	681b      	ldr	r3, [r3, #0]
   1ea5c:	2230      	movs	r2, #48	; 0x30
   1ea5e:	731a      	strb	r2, [r3, #12]
		break;
   1ea60:	e004      	b.n	1ea6c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1ea62:	4b31      	ldr	r3, [pc, #196]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea64:	681b      	ldr	r3, [r3, #0]
   1ea66:	2240      	movs	r2, #64	; 0x40
   1ea68:	731a      	strb	r2, [r3, #12]
		break;
   1ea6a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ea6c:	4b2e      	ldr	r3, [pc, #184]	; (1eb28 <mmc_decode_csd+0x11c>)
   1ea6e:	681b      	ldr	r3, [r3, #0]
   1ea70:	330e      	adds	r3, #14
   1ea72:	0018      	movs	r0, r3
   1ea74:	2308      	movs	r3, #8
   1ea76:	2260      	movs	r2, #96	; 0x60
   1ea78:	2180      	movs	r1, #128	; 0x80
   1ea7a:	4c2c      	ldr	r4, [pc, #176]	; (1eb2c <mmc_decode_csd+0x120>)
   1ea7c:	47a0      	blx	r4
   1ea7e:	0003      	movs	r3, r0
   1ea80:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1ea82:	68fb      	ldr	r3, [r7, #12]
   1ea84:	2207      	movs	r2, #7
   1ea86:	401a      	ands	r2, r3
   1ea88:	4b29      	ldr	r3, [pc, #164]	; (1eb30 <mmc_decode_csd+0x124>)
   1ea8a:	0092      	lsls	r2, r2, #2
   1ea8c:	58d3      	ldr	r3, [r2, r3]
   1ea8e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ea90:	68fb      	ldr	r3, [r7, #12]
   1ea92:	08db      	lsrs	r3, r3, #3
   1ea94:	220f      	movs	r2, #15
   1ea96:	401a      	ands	r2, r3
   1ea98:	4b26      	ldr	r3, [pc, #152]	; (1eb34 <mmc_decode_csd+0x128>)
   1ea9a:	0092      	lsls	r2, r2, #2
   1ea9c:	58d3      	ldr	r3, [r2, r3]
   1ea9e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1eaa0:	4b21      	ldr	r3, [pc, #132]	; (1eb28 <mmc_decode_csd+0x11c>)
   1eaa2:	681b      	ldr	r3, [r3, #0]
   1eaa4:	68ba      	ldr	r2, [r7, #8]
   1eaa6:	6879      	ldr	r1, [r7, #4]
   1eaa8:	434a      	muls	r2, r1
   1eaaa:	21fa      	movs	r1, #250	; 0xfa
   1eaac:	0089      	lsls	r1, r1, #2
   1eaae:	434a      	muls	r2, r1
   1eab0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1eab2:	4b1d      	ldr	r3, [pc, #116]	; (1eb28 <mmc_decode_csd+0x11c>)
   1eab4:	681b      	ldr	r3, [r3, #0]
   1eab6:	330e      	adds	r3, #14
   1eab8:	0018      	movs	r0, r3
   1eaba:	230c      	movs	r3, #12
   1eabc:	223e      	movs	r2, #62	; 0x3e
   1eabe:	2180      	movs	r1, #128	; 0x80
   1eac0:	4c1a      	ldr	r4, [pc, #104]	; (1eb2c <mmc_decode_csd+0x120>)
   1eac2:	47a0      	blx	r4
   1eac4:	0002      	movs	r2, r0
   1eac6:	4b1c      	ldr	r3, [pc, #112]	; (1eb38 <mmc_decode_csd+0x12c>)
   1eac8:	429a      	cmp	r2, r3
   1eaca:	d028      	beq.n	1eb1e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1eacc:	4b16      	ldr	r3, [pc, #88]	; (1eb28 <mmc_decode_csd+0x11c>)
   1eace:	681b      	ldr	r3, [r3, #0]
   1ead0:	330e      	adds	r3, #14
   1ead2:	0018      	movs	r0, r3
   1ead4:	230c      	movs	r3, #12
   1ead6:	223e      	movs	r2, #62	; 0x3e
   1ead8:	2180      	movs	r1, #128	; 0x80
   1eada:	4c14      	ldr	r4, [pc, #80]	; (1eb2c <mmc_decode_csd+0x120>)
   1eadc:	47a0      	blx	r4
   1eade:	0003      	movs	r3, r0
   1eae0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1eae2:	4b11      	ldr	r3, [pc, #68]	; (1eb28 <mmc_decode_csd+0x11c>)
   1eae4:	681b      	ldr	r3, [r3, #0]
   1eae6:	330e      	adds	r3, #14
   1eae8:	0018      	movs	r0, r3
   1eaea:	2303      	movs	r3, #3
   1eaec:	222f      	movs	r2, #47	; 0x2f
   1eaee:	2180      	movs	r1, #128	; 0x80
   1eaf0:	4d0e      	ldr	r5, [pc, #56]	; (1eb2c <mmc_decode_csd+0x120>)
   1eaf2:	47a8      	blx	r5
   1eaf4:	0003      	movs	r3, r0
   1eaf6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1eaf8:	409c      	lsls	r4, r3
   1eafa:	0023      	movs	r3, r4
   1eafc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1eafe:	4b0a      	ldr	r3, [pc, #40]	; (1eb28 <mmc_decode_csd+0x11c>)
   1eb00:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1eb02:	4b09      	ldr	r3, [pc, #36]	; (1eb28 <mmc_decode_csd+0x11c>)
   1eb04:	681b      	ldr	r3, [r3, #0]
   1eb06:	330e      	adds	r3, #14
   1eb08:	0018      	movs	r0, r3
   1eb0a:	2304      	movs	r3, #4
   1eb0c:	2250      	movs	r2, #80	; 0x50
   1eb0e:	2180      	movs	r1, #128	; 0x80
   1eb10:	4d06      	ldr	r5, [pc, #24]	; (1eb2c <mmc_decode_csd+0x120>)
   1eb12:	47a8      	blx	r5
   1eb14:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1eb16:	683b      	ldr	r3, [r7, #0]
   1eb18:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1eb1a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1eb1c:	6063      	str	r3, [r4, #4]
	}
}
   1eb1e:	46c0      	nop			; (mov r8, r8)
   1eb20:	46bd      	mov	sp, r7
   1eb22:	b004      	add	sp, #16
   1eb24:	bdb0      	pop	{r4, r5, r7, pc}
   1eb26:	46c0      	nop			; (mov r8, r8)
   1eb28:	20004240 	.word	0x20004240
   1eb2c:	0001e509 	.word	0x0001e509
   1eb30:	0003891c 	.word	0x0003891c
   1eb34:	00038978 	.word	0x00038978
   1eb38:	00000fff 	.word	0x00000fff

0001eb3c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1eb3c:	b5b0      	push	{r4, r5, r7, lr}
   1eb3e:	b084      	sub	sp, #16
   1eb40:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1eb42:	4b35      	ldr	r3, [pc, #212]	; (1ec18 <sd_decode_csd+0xdc>)
   1eb44:	681b      	ldr	r3, [r3, #0]
   1eb46:	330e      	adds	r3, #14
   1eb48:	0018      	movs	r0, r3
   1eb4a:	2308      	movs	r3, #8
   1eb4c:	2260      	movs	r2, #96	; 0x60
   1eb4e:	2180      	movs	r1, #128	; 0x80
   1eb50:	4c32      	ldr	r4, [pc, #200]	; (1ec1c <sd_decode_csd+0xe0>)
   1eb52:	47a0      	blx	r4
   1eb54:	0003      	movs	r3, r0
   1eb56:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1eb58:	68fb      	ldr	r3, [r7, #12]
   1eb5a:	2207      	movs	r2, #7
   1eb5c:	401a      	ands	r2, r3
   1eb5e:	4b30      	ldr	r3, [pc, #192]	; (1ec20 <sd_decode_csd+0xe4>)
   1eb60:	0092      	lsls	r2, r2, #2
   1eb62:	58d3      	ldr	r3, [r2, r3]
   1eb64:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1eb66:	68fb      	ldr	r3, [r7, #12]
   1eb68:	08db      	lsrs	r3, r3, #3
   1eb6a:	220f      	movs	r2, #15
   1eb6c:	401a      	ands	r2, r3
   1eb6e:	4b2d      	ldr	r3, [pc, #180]	; (1ec24 <sd_decode_csd+0xe8>)
   1eb70:	0092      	lsls	r2, r2, #2
   1eb72:	58d3      	ldr	r3, [r2, r3]
   1eb74:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1eb76:	4b28      	ldr	r3, [pc, #160]	; (1ec18 <sd_decode_csd+0xdc>)
   1eb78:	681b      	ldr	r3, [r3, #0]
   1eb7a:	68ba      	ldr	r2, [r7, #8]
   1eb7c:	6879      	ldr	r1, [r7, #4]
   1eb7e:	434a      	muls	r2, r1
   1eb80:	21fa      	movs	r1, #250	; 0xfa
   1eb82:	0089      	lsls	r1, r1, #2
   1eb84:	434a      	muls	r2, r1
   1eb86:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1eb88:	4b23      	ldr	r3, [pc, #140]	; (1ec18 <sd_decode_csd+0xdc>)
   1eb8a:	681b      	ldr	r3, [r3, #0]
   1eb8c:	330e      	adds	r3, #14
   1eb8e:	0018      	movs	r0, r3
   1eb90:	2302      	movs	r3, #2
   1eb92:	227e      	movs	r2, #126	; 0x7e
   1eb94:	2180      	movs	r1, #128	; 0x80
   1eb96:	4c21      	ldr	r4, [pc, #132]	; (1ec1c <sd_decode_csd+0xe0>)
   1eb98:	47a0      	blx	r4
   1eb9a:	1e03      	subs	r3, r0, #0
   1eb9c:	d00f      	beq.n	1ebbe <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1eb9e:	4b1e      	ldr	r3, [pc, #120]	; (1ec18 <sd_decode_csd+0xdc>)
   1eba0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1eba2:	4b1d      	ldr	r3, [pc, #116]	; (1ec18 <sd_decode_csd+0xdc>)
   1eba4:	681b      	ldr	r3, [r3, #0]
   1eba6:	330e      	adds	r3, #14
   1eba8:	0018      	movs	r0, r3
   1ebaa:	2316      	movs	r3, #22
   1ebac:	2230      	movs	r2, #48	; 0x30
   1ebae:	2180      	movs	r1, #128	; 0x80
   1ebb0:	4d1a      	ldr	r5, [pc, #104]	; (1ec1c <sd_decode_csd+0xe0>)
   1ebb2:	47a8      	blx	r5
   1ebb4:	0003      	movs	r3, r0
				* 512;
   1ebb6:	3301      	adds	r3, #1
   1ebb8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1ebba:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1ebbc:	e028      	b.n	1ec10 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ebbe:	4b16      	ldr	r3, [pc, #88]	; (1ec18 <sd_decode_csd+0xdc>)
   1ebc0:	681b      	ldr	r3, [r3, #0]
   1ebc2:	330e      	adds	r3, #14
   1ebc4:	0018      	movs	r0, r3
   1ebc6:	230c      	movs	r3, #12
   1ebc8:	223e      	movs	r2, #62	; 0x3e
   1ebca:	2180      	movs	r1, #128	; 0x80
   1ebcc:	4c13      	ldr	r4, [pc, #76]	; (1ec1c <sd_decode_csd+0xe0>)
   1ebce:	47a0      	blx	r4
   1ebd0:	0003      	movs	r3, r0
   1ebd2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ebd4:	4b10      	ldr	r3, [pc, #64]	; (1ec18 <sd_decode_csd+0xdc>)
   1ebd6:	681b      	ldr	r3, [r3, #0]
   1ebd8:	330e      	adds	r3, #14
   1ebda:	0018      	movs	r0, r3
   1ebdc:	2303      	movs	r3, #3
   1ebde:	222f      	movs	r2, #47	; 0x2f
   1ebe0:	2180      	movs	r1, #128	; 0x80
   1ebe2:	4d0e      	ldr	r5, [pc, #56]	; (1ec1c <sd_decode_csd+0xe0>)
   1ebe4:	47a8      	blx	r5
   1ebe6:	0003      	movs	r3, r0
   1ebe8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ebea:	409c      	lsls	r4, r3
   1ebec:	0023      	movs	r3, r4
   1ebee:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ebf0:	4b09      	ldr	r3, [pc, #36]	; (1ec18 <sd_decode_csd+0xdc>)
   1ebf2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1ebf4:	4b08      	ldr	r3, [pc, #32]	; (1ec18 <sd_decode_csd+0xdc>)
   1ebf6:	681b      	ldr	r3, [r3, #0]
   1ebf8:	330e      	adds	r3, #14
   1ebfa:	0018      	movs	r0, r3
   1ebfc:	2304      	movs	r3, #4
   1ebfe:	2250      	movs	r2, #80	; 0x50
   1ec00:	2180      	movs	r1, #128	; 0x80
   1ec02:	4d06      	ldr	r5, [pc, #24]	; (1ec1c <sd_decode_csd+0xe0>)
   1ec04:	47a8      	blx	r5
   1ec06:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1ec08:	683b      	ldr	r3, [r7, #0]
   1ec0a:	4093      	lsls	r3, r2
				/ 1024;
   1ec0c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1ec0e:	6063      	str	r3, [r4, #4]
}
   1ec10:	46c0      	nop			; (mov r8, r8)
   1ec12:	46bd      	mov	sp, r7
   1ec14:	b004      	add	sp, #16
   1ec16:	bdb0      	pop	{r4, r5, r7, pc}
   1ec18:	20004240 	.word	0x20004240
   1ec1c:	0001e509 	.word	0x0001e509
   1ec20:	0003891c 	.word	0x0003891c
   1ec24:	00038938 	.word	0x00038938

0001ec28 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1ec28:	b580      	push	{r7, lr}
   1ec2a:	b082      	sub	sp, #8
   1ec2c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1ec2e:	4b11      	ldr	r3, [pc, #68]	; (1ec74 <sd_mmc_cmd13+0x4c>)
   1ec30:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1ec32:	4b11      	ldr	r3, [pc, #68]	; (1ec78 <sd_mmc_cmd13+0x50>)
   1ec34:	2100      	movs	r1, #0
   1ec36:	0018      	movs	r0, r3
   1ec38:	4b10      	ldr	r3, [pc, #64]	; (1ec7c <sd_mmc_cmd13+0x54>)
   1ec3a:	4798      	blx	r3
   1ec3c:	0003      	movs	r3, r0
   1ec3e:	001a      	movs	r2, r3
   1ec40:	2301      	movs	r3, #1
   1ec42:	4053      	eors	r3, r2
   1ec44:	b2db      	uxtb	r3, r3
   1ec46:	2b00      	cmp	r3, #0
   1ec48:	d001      	beq.n	1ec4e <sd_mmc_cmd13+0x26>
				return false;
   1ec4a:	2300      	movs	r3, #0
   1ec4c:	e00e      	b.n	1ec6c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1ec4e:	4b0c      	ldr	r3, [pc, #48]	; (1ec80 <sd_mmc_cmd13+0x58>)
   1ec50:	4798      	blx	r3
   1ec52:	0002      	movs	r2, r0
   1ec54:	23ff      	movs	r3, #255	; 0xff
   1ec56:	4013      	ands	r3, r2
   1ec58:	d006      	beq.n	1ec68 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1ec5a:	687b      	ldr	r3, [r7, #4]
   1ec5c:	1e5a      	subs	r2, r3, #1
   1ec5e:	607a      	str	r2, [r7, #4]
   1ec60:	2b00      	cmp	r3, #0
   1ec62:	d1e6      	bne.n	1ec32 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1ec64:	2300      	movs	r3, #0
   1ec66:	e001      	b.n	1ec6c <sd_mmc_cmd13+0x44>
				break;
   1ec68:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1ec6a:	2301      	movs	r3, #1
}
   1ec6c:	0018      	movs	r0, r3
   1ec6e:	46bd      	mov	sp, r7
   1ec70:	b002      	add	sp, #8
   1ec72:	bd80      	pop	{r7, pc}
   1ec74:	00030d40 	.word	0x00030d40
   1ec78:	00001b0d 	.word	0x00001b0d
   1ec7c:	000200e1 	.word	0x000200e1
   1ec80:	00020321 	.word	0x00020321

0001ec84 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1ec84:	b590      	push	{r4, r7, lr}
   1ec86:	b085      	sub	sp, #20
   1ec88:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1ec8a:	4b38      	ldr	r3, [pc, #224]	; (1ed6c <sd_acmd51+0xe8>)
   1ec8c:	681b      	ldr	r3, [r3, #0]
   1ec8e:	891b      	ldrh	r3, [r3, #8]
   1ec90:	041b      	lsls	r3, r3, #16
   1ec92:	4a37      	ldr	r2, [pc, #220]	; (1ed70 <sd_acmd51+0xec>)
   1ec94:	0019      	movs	r1, r3
   1ec96:	0010      	movs	r0, r2
   1ec98:	4b36      	ldr	r3, [pc, #216]	; (1ed74 <sd_acmd51+0xf0>)
   1ec9a:	4798      	blx	r3
   1ec9c:	0003      	movs	r3, r0
   1ec9e:	001a      	movs	r2, r3
   1eca0:	2301      	movs	r3, #1
   1eca2:	4053      	eors	r3, r2
   1eca4:	b2db      	uxtb	r3, r3
   1eca6:	2b00      	cmp	r3, #0
   1eca8:	d001      	beq.n	1ecae <sd_acmd51+0x2a>
		return false;
   1ecaa:	2300      	movs	r3, #0
   1ecac:	e059      	b.n	1ed62 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1ecae:	4832      	ldr	r0, [pc, #200]	; (1ed78 <sd_acmd51+0xf4>)
   1ecb0:	2301      	movs	r3, #1
   1ecb2:	9300      	str	r3, [sp, #0]
   1ecb4:	2301      	movs	r3, #1
   1ecb6:	2208      	movs	r2, #8
   1ecb8:	2100      	movs	r1, #0
   1ecba:	4c30      	ldr	r4, [pc, #192]	; (1ed7c <sd_acmd51+0xf8>)
   1ecbc:	47a0      	blx	r4
   1ecbe:	0003      	movs	r3, r0
   1ecc0:	001a      	movs	r2, r3
   1ecc2:	2301      	movs	r3, #1
   1ecc4:	4053      	eors	r3, r2
   1ecc6:	b2db      	uxtb	r3, r3
   1ecc8:	2b00      	cmp	r3, #0
   1ecca:	d001      	beq.n	1ecd0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1eccc:	2300      	movs	r3, #0
   1ecce:	e048      	b.n	1ed62 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1ecd0:	003b      	movs	r3, r7
   1ecd2:	2101      	movs	r1, #1
   1ecd4:	0018      	movs	r0, r3
   1ecd6:	4b2a      	ldr	r3, [pc, #168]	; (1ed80 <sd_acmd51+0xfc>)
   1ecd8:	4798      	blx	r3
   1ecda:	0003      	movs	r3, r0
   1ecdc:	001a      	movs	r2, r3
   1ecde:	2301      	movs	r3, #1
   1ece0:	4053      	eors	r3, r2
   1ece2:	b2db      	uxtb	r3, r3
   1ece4:	2b00      	cmp	r3, #0
   1ece6:	d001      	beq.n	1ecec <sd_acmd51+0x68>
		return false;
   1ece8:	2300      	movs	r3, #0
   1ecea:	e03a      	b.n	1ed62 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1ecec:	4b25      	ldr	r3, [pc, #148]	; (1ed84 <sd_acmd51+0x100>)
   1ecee:	4798      	blx	r3
   1ecf0:	0003      	movs	r3, r0
   1ecf2:	001a      	movs	r2, r3
   1ecf4:	2301      	movs	r3, #1
   1ecf6:	4053      	eors	r3, r2
   1ecf8:	b2db      	uxtb	r3, r3
   1ecfa:	2b00      	cmp	r3, #0
   1ecfc:	d001      	beq.n	1ed02 <sd_acmd51+0x7e>
		return false;
   1ecfe:	2300      	movs	r3, #0
   1ed00:	e02f      	b.n	1ed62 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1ed02:	0038      	movs	r0, r7
   1ed04:	2304      	movs	r3, #4
   1ed06:	2238      	movs	r2, #56	; 0x38
   1ed08:	2140      	movs	r1, #64	; 0x40
   1ed0a:	4c1f      	ldr	r4, [pc, #124]	; (1ed88 <sd_acmd51+0x104>)
   1ed0c:	47a0      	blx	r4
   1ed0e:	0003      	movs	r3, r0
   1ed10:	2b01      	cmp	r3, #1
   1ed12:	d008      	beq.n	1ed26 <sd_acmd51+0xa2>
   1ed14:	d302      	bcc.n	1ed1c <sd_acmd51+0x98>
   1ed16:	2b02      	cmp	r3, #2
   1ed18:	d00a      	beq.n	1ed30 <sd_acmd51+0xac>
   1ed1a:	e01c      	b.n	1ed56 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1ed1c:	4b13      	ldr	r3, [pc, #76]	; (1ed6c <sd_acmd51+0xe8>)
   1ed1e:	681b      	ldr	r3, [r3, #0]
   1ed20:	2210      	movs	r2, #16
   1ed22:	731a      	strb	r2, [r3, #12]
		break;
   1ed24:	e01c      	b.n	1ed60 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1ed26:	4b11      	ldr	r3, [pc, #68]	; (1ed6c <sd_acmd51+0xe8>)
   1ed28:	681b      	ldr	r3, [r3, #0]
   1ed2a:	221a      	movs	r2, #26
   1ed2c:	731a      	strb	r2, [r3, #12]
		break;
   1ed2e:	e017      	b.n	1ed60 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1ed30:	0038      	movs	r0, r7
   1ed32:	2301      	movs	r3, #1
   1ed34:	222f      	movs	r2, #47	; 0x2f
   1ed36:	2140      	movs	r1, #64	; 0x40
   1ed38:	4c13      	ldr	r4, [pc, #76]	; (1ed88 <sd_acmd51+0x104>)
   1ed3a:	47a0      	blx	r4
   1ed3c:	0003      	movs	r3, r0
   1ed3e:	2b01      	cmp	r3, #1
   1ed40:	d104      	bne.n	1ed4c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1ed42:	4b0a      	ldr	r3, [pc, #40]	; (1ed6c <sd_acmd51+0xe8>)
   1ed44:	681b      	ldr	r3, [r3, #0]
   1ed46:	2230      	movs	r2, #48	; 0x30
   1ed48:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1ed4a:	e009      	b.n	1ed60 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1ed4c:	4b07      	ldr	r3, [pc, #28]	; (1ed6c <sd_acmd51+0xe8>)
   1ed4e:	681b      	ldr	r3, [r3, #0]
   1ed50:	2220      	movs	r2, #32
   1ed52:	731a      	strb	r2, [r3, #12]
		break;
   1ed54:	e004      	b.n	1ed60 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1ed56:	4b05      	ldr	r3, [pc, #20]	; (1ed6c <sd_acmd51+0xe8>)
   1ed58:	681b      	ldr	r3, [r3, #0]
   1ed5a:	2210      	movs	r2, #16
   1ed5c:	731a      	strb	r2, [r3, #12]
		break;
   1ed5e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1ed60:	2301      	movs	r3, #1
}
   1ed62:	0018      	movs	r0, r3
   1ed64:	46bd      	mov	sp, r7
   1ed66:	b003      	add	sp, #12
   1ed68:	bd90      	pop	{r4, r7, pc}
   1ed6a:	46c0      	nop			; (mov r8, r8)
   1ed6c:	20004240 	.word	0x20004240
   1ed70:	00001137 	.word	0x00001137
   1ed74:	000200e1 	.word	0x000200e1
   1ed78:	00081133 	.word	0x00081133
   1ed7c:	00020109 	.word	0x00020109
   1ed80:	000203d9 	.word	0x000203d9
   1ed84:	0002047d 	.word	0x0002047d
   1ed88:	0001e509 	.word	0x0001e509

0001ed8c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1ed8c:	b580      	push	{r7, lr}
   1ed8e:	b082      	sub	sp, #8
   1ed90:	af00      	add	r7, sp, #0
   1ed92:	0002      	movs	r2, r0
   1ed94:	1dfb      	adds	r3, r7, #7
   1ed96:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1ed98:	1dfb      	adds	r3, r7, #7
   1ed9a:	781b      	ldrb	r3, [r3, #0]
   1ed9c:	2b00      	cmp	r3, #0
   1ed9e:	d001      	beq.n	1eda4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1eda0:	2304      	movs	r3, #4
   1eda2:	e047      	b.n	1ee34 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1eda4:	1dfb      	adds	r3, r7, #7
   1eda6:	781b      	ldrb	r3, [r3, #0]
   1eda8:	4a24      	ldr	r2, [pc, #144]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1edaa:	015b      	lsls	r3, r3, #5
   1edac:	18d3      	adds	r3, r2, r3
   1edae:	330a      	adds	r3, #10
   1edb0:	781b      	ldrb	r3, [r3, #0]
   1edb2:	2b04      	cmp	r3, #4
   1edb4:	d008      	beq.n	1edc8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1edb6:	1dfb      	adds	r3, r7, #7
   1edb8:	781b      	ldrb	r3, [r3, #0]
   1edba:	4a20      	ldr	r2, [pc, #128]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1edbc:	015b      	lsls	r3, r3, #5
   1edbe:	18d3      	adds	r3, r2, r3
   1edc0:	330a      	adds	r3, #10
   1edc2:	781b      	ldrb	r3, [r3, #0]
   1edc4:	2b03      	cmp	r3, #3
   1edc6:	d11d      	bne.n	1ee04 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1edc8:	1dfb      	adds	r3, r7, #7
   1edca:	781b      	ldrb	r3, [r3, #0]
   1edcc:	4a1b      	ldr	r2, [pc, #108]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1edce:	015b      	lsls	r3, r3, #5
   1edd0:	18d3      	adds	r3, r2, r3
   1edd2:	330a      	adds	r3, #10
   1edd4:	2202      	movs	r2, #2
   1edd6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1edd8:	1dfb      	adds	r3, r7, #7
   1edda:	781a      	ldrb	r2, [r3, #0]
   1eddc:	4b17      	ldr	r3, [pc, #92]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1edde:	0152      	lsls	r2, r2, #5
   1ede0:	4917      	ldr	r1, [pc, #92]	; (1ee40 <sd_mmc_select_slot+0xb4>)
   1ede2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1ede4:	1dfb      	adds	r3, r7, #7
   1ede6:	781b      	ldrb	r3, [r3, #0]
   1ede8:	4a14      	ldr	r2, [pc, #80]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1edea:	015b      	lsls	r3, r3, #5
   1edec:	18d3      	adds	r3, r2, r3
   1edee:	330d      	adds	r3, #13
   1edf0:	2201      	movs	r2, #1
   1edf2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1edf4:	1dfb      	adds	r3, r7, #7
   1edf6:	781b      	ldrb	r3, [r3, #0]
   1edf8:	4a10      	ldr	r2, [pc, #64]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1edfa:	015b      	lsls	r3, r3, #5
   1edfc:	18d3      	adds	r3, r2, r3
   1edfe:	331e      	adds	r3, #30
   1ee00:	2200      	movs	r2, #0
   1ee02:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1ee04:	4b0f      	ldr	r3, [pc, #60]	; (1ee44 <sd_mmc_select_slot+0xb8>)
   1ee06:	1dfa      	adds	r2, r7, #7
   1ee08:	7812      	ldrb	r2, [r2, #0]
   1ee0a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1ee0c:	1dfb      	adds	r3, r7, #7
   1ee0e:	781b      	ldrb	r3, [r3, #0]
   1ee10:	015a      	lsls	r2, r3, #5
   1ee12:	4b0a      	ldr	r3, [pc, #40]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1ee14:	18d2      	adds	r2, r2, r3
   1ee16:	4b0c      	ldr	r3, [pc, #48]	; (1ee48 <sd_mmc_select_slot+0xbc>)
   1ee18:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1ee1a:	4b0c      	ldr	r3, [pc, #48]	; (1ee4c <sd_mmc_select_slot+0xc0>)
   1ee1c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1ee1e:	1dfb      	adds	r3, r7, #7
   1ee20:	781b      	ldrb	r3, [r3, #0]
   1ee22:	4a06      	ldr	r2, [pc, #24]	; (1ee3c <sd_mmc_select_slot+0xb0>)
   1ee24:	015b      	lsls	r3, r3, #5
   1ee26:	18d3      	adds	r3, r2, r3
   1ee28:	330a      	adds	r3, #10
   1ee2a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1ee2c:	3b02      	subs	r3, #2
   1ee2e:	425a      	negs	r2, r3
   1ee30:	4153      	adcs	r3, r2
   1ee32:	b2db      	uxtb	r3, r3
}
   1ee34:	0018      	movs	r0, r3
   1ee36:	46bd      	mov	sp, r7
   1ee38:	b002      	add	sp, #8
   1ee3a:	bd80      	pop	{r7, pc}
   1ee3c:	2000421c 	.word	0x2000421c
   1ee40:	00061a80 	.word	0x00061a80
   1ee44:	2000423c 	.word	0x2000423c
   1ee48:	20004240 	.word	0x20004240
   1ee4c:	0001ee51 	.word	0x0001ee51

0001ee50 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1ee50:	b5b0      	push	{r4, r5, r7, lr}
   1ee52:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ee54:	4b09      	ldr	r3, [pc, #36]	; (1ee7c <sd_mmc_configure_slot+0x2c>)
   1ee56:	7818      	ldrb	r0, [r3, #0]
   1ee58:	4b09      	ldr	r3, [pc, #36]	; (1ee80 <sd_mmc_configure_slot+0x30>)
   1ee5a:	681b      	ldr	r3, [r3, #0]
   1ee5c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ee5e:	4b08      	ldr	r3, [pc, #32]	; (1ee80 <sd_mmc_configure_slot+0x30>)
   1ee60:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ee62:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ee64:	4b06      	ldr	r3, [pc, #24]	; (1ee80 <sd_mmc_configure_slot+0x30>)
   1ee66:	681b      	ldr	r3, [r3, #0]
   1ee68:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ee6a:	1e5c      	subs	r4, r3, #1
   1ee6c:	41a3      	sbcs	r3, r4
   1ee6e:	b2db      	uxtb	r3, r3
   1ee70:	4c04      	ldr	r4, [pc, #16]	; (1ee84 <sd_mmc_configure_slot+0x34>)
   1ee72:	47a0      	blx	r4
}
   1ee74:	46c0      	nop			; (mov r8, r8)
   1ee76:	46bd      	mov	sp, r7
   1ee78:	bdb0      	pop	{r4, r5, r7, pc}
   1ee7a:	46c0      	nop			; (mov r8, r8)
   1ee7c:	2000423c 	.word	0x2000423c
   1ee80:	20004240 	.word	0x20004240
   1ee84:	0001ffc9 	.word	0x0001ffc9

0001ee88 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1ee88:	b580      	push	{r7, lr}
   1ee8a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1ee8c:	4b05      	ldr	r3, [pc, #20]	; (1eea4 <sd_mmc_deselect_slot+0x1c>)
   1ee8e:	781b      	ldrb	r3, [r3, #0]
   1ee90:	2b00      	cmp	r3, #0
   1ee92:	d104      	bne.n	1ee9e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1ee94:	4b03      	ldr	r3, [pc, #12]	; (1eea4 <sd_mmc_deselect_slot+0x1c>)
   1ee96:	781b      	ldrb	r3, [r3, #0]
   1ee98:	0018      	movs	r0, r3
   1ee9a:	4b03      	ldr	r3, [pc, #12]	; (1eea8 <sd_mmc_deselect_slot+0x20>)
   1ee9c:	4798      	blx	r3
	}
}
   1ee9e:	46c0      	nop			; (mov r8, r8)
   1eea0:	46bd      	mov	sp, r7
   1eea2:	bd80      	pop	{r7, pc}
   1eea4:	2000423c 	.word	0x2000423c
   1eea8:	00020051 	.word	0x00020051

0001eeac <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1eeac:	b580      	push	{r7, lr}
   1eeae:	b082      	sub	sp, #8
   1eeb0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1eeb2:	1dfb      	adds	r3, r7, #7
   1eeb4:	2200      	movs	r2, #0
   1eeb6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1eeb8:	4b59      	ldr	r3, [pc, #356]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1eeba:	681b      	ldr	r3, [r3, #0]
   1eebc:	2201      	movs	r2, #1
   1eebe:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1eec0:	4b57      	ldr	r3, [pc, #348]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1eec2:	681b      	ldr	r3, [r3, #0]
   1eec4:	2200      	movs	r2, #0
   1eec6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1eec8:	4b55      	ldr	r3, [pc, #340]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1eeca:	681b      	ldr	r3, [r3, #0]
   1eecc:	2200      	movs	r2, #0
   1eece:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1eed0:	4b54      	ldr	r3, [pc, #336]	; (1f024 <sd_mmc_spi_card_init+0x178>)
   1eed2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1eed4:	2388      	movs	r3, #136	; 0x88
   1eed6:	015b      	lsls	r3, r3, #5
   1eed8:	2100      	movs	r1, #0
   1eeda:	0018      	movs	r0, r3
   1eedc:	4b52      	ldr	r3, [pc, #328]	; (1f028 <sd_mmc_spi_card_init+0x17c>)
   1eede:	4798      	blx	r3
   1eee0:	0003      	movs	r3, r0
   1eee2:	001a      	movs	r2, r3
   1eee4:	2301      	movs	r3, #1
   1eee6:	4053      	eors	r3, r2
   1eee8:	b2db      	uxtb	r3, r3
   1eeea:	2b00      	cmp	r3, #0
   1eeec:	d001      	beq.n	1eef2 <sd_mmc_spi_card_init+0x46>
		return false;
   1eeee:	2300      	movs	r3, #0
   1eef0:	e092      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1eef2:	1dfb      	adds	r3, r7, #7
   1eef4:	0018      	movs	r0, r3
   1eef6:	4b4d      	ldr	r3, [pc, #308]	; (1f02c <sd_mmc_spi_card_init+0x180>)
   1eef8:	4798      	blx	r3
   1eefa:	0003      	movs	r3, r0
   1eefc:	001a      	movs	r2, r3
   1eefe:	2301      	movs	r3, #1
   1ef00:	4053      	eors	r3, r2
   1ef02:	b2db      	uxtb	r3, r3
   1ef04:	2b00      	cmp	r3, #0
   1ef06:	d001      	beq.n	1ef0c <sd_mmc_spi_card_init+0x60>
		return false;
   1ef08:	2300      	movs	r3, #0
   1ef0a:	e085      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1ef0c:	4b48      	ldr	r3, [pc, #288]	; (1f030 <sd_mmc_spi_card_init+0x184>)
   1ef0e:	4798      	blx	r3
   1ef10:	0003      	movs	r3, r0
   1ef12:	001a      	movs	r2, r3
   1ef14:	2301      	movs	r3, #1
   1ef16:	4053      	eors	r3, r2
   1ef18:	b2db      	uxtb	r3, r3
   1ef1a:	2b00      	cmp	r3, #0
   1ef1c:	d001      	beq.n	1ef22 <sd_mmc_spi_card_init+0x76>
		return false;
   1ef1e:	2300      	movs	r3, #0
   1ef20:	e07a      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ef22:	4b3f      	ldr	r3, [pc, #252]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1ef24:	681b      	ldr	r3, [r3, #0]
   1ef26:	7adb      	ldrb	r3, [r3, #11]
   1ef28:	001a      	movs	r2, r3
   1ef2a:	2301      	movs	r3, #1
   1ef2c:	4013      	ands	r3, r2
   1ef2e:	d021      	beq.n	1ef74 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1ef30:	1dfb      	adds	r3, r7, #7
   1ef32:	781b      	ldrb	r3, [r3, #0]
   1ef34:	0018      	movs	r0, r3
   1ef36:	4b3f      	ldr	r3, [pc, #252]	; (1f034 <sd_mmc_spi_card_init+0x188>)
   1ef38:	4798      	blx	r3
   1ef3a:	0003      	movs	r3, r0
   1ef3c:	001a      	movs	r2, r3
   1ef3e:	2301      	movs	r3, #1
   1ef40:	4053      	eors	r3, r2
   1ef42:	b2db      	uxtb	r3, r3
   1ef44:	2b00      	cmp	r3, #0
   1ef46:	d007      	beq.n	1ef58 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1ef48:	4b35      	ldr	r3, [pc, #212]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1ef4a:	681b      	ldr	r3, [r3, #0]
   1ef4c:	2202      	movs	r2, #2
   1ef4e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1ef50:	4b39      	ldr	r3, [pc, #228]	; (1f038 <sd_mmc_spi_card_init+0x18c>)
   1ef52:	4798      	blx	r3
   1ef54:	0003      	movs	r3, r0
   1ef56:	e05f      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1ef58:	4b38      	ldr	r3, [pc, #224]	; (1f03c <sd_mmc_spi_card_init+0x190>)
   1ef5a:	2100      	movs	r1, #0
   1ef5c:	0018      	movs	r0, r3
   1ef5e:	4b32      	ldr	r3, [pc, #200]	; (1f028 <sd_mmc_spi_card_init+0x17c>)
   1ef60:	4798      	blx	r3
   1ef62:	0003      	movs	r3, r0
   1ef64:	001a      	movs	r2, r3
   1ef66:	2301      	movs	r3, #1
   1ef68:	4053      	eors	r3, r2
   1ef6a:	b2db      	uxtb	r3, r3
   1ef6c:	2b00      	cmp	r3, #0
   1ef6e:	d001      	beq.n	1ef74 <sd_mmc_spi_card_init+0xc8>
			return false;
   1ef70:	2300      	movs	r3, #0
   1ef72:	e051      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ef74:	4b2a      	ldr	r3, [pc, #168]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1ef76:	681b      	ldr	r3, [r3, #0]
   1ef78:	7adb      	ldrb	r3, [r3, #11]
   1ef7a:	001a      	movs	r2, r3
   1ef7c:	2301      	movs	r3, #1
   1ef7e:	4013      	ands	r3, r2
   1ef80:	d017      	beq.n	1efb2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1ef82:	4b2f      	ldr	r3, [pc, #188]	; (1f040 <sd_mmc_spi_card_init+0x194>)
   1ef84:	4798      	blx	r3
   1ef86:	0003      	movs	r3, r0
   1ef88:	001a      	movs	r2, r3
   1ef8a:	2301      	movs	r3, #1
   1ef8c:	4053      	eors	r3, r2
   1ef8e:	b2db      	uxtb	r3, r3
   1ef90:	2b00      	cmp	r3, #0
   1ef92:	d001      	beq.n	1ef98 <sd_mmc_spi_card_init+0xec>
			return false;
   1ef94:	2300      	movs	r3, #0
   1ef96:	e03f      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1ef98:	4b2a      	ldr	r3, [pc, #168]	; (1f044 <sd_mmc_spi_card_init+0x198>)
   1ef9a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1ef9c:	4b2a      	ldr	r3, [pc, #168]	; (1f048 <sd_mmc_spi_card_init+0x19c>)
   1ef9e:	4798      	blx	r3
   1efa0:	0003      	movs	r3, r0
   1efa2:	001a      	movs	r2, r3
   1efa4:	2301      	movs	r3, #1
   1efa6:	4053      	eors	r3, r2
   1efa8:	b2db      	uxtb	r3, r3
   1efaa:	2b00      	cmp	r3, #0
   1efac:	d001      	beq.n	1efb2 <sd_mmc_spi_card_init+0x106>
			return false;
   1efae:	2300      	movs	r3, #0
   1efb0:	e032      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1efb2:	4b1b      	ldr	r3, [pc, #108]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1efb4:	681b      	ldr	r3, [r3, #0]
   1efb6:	7adb      	ldrb	r3, [r3, #11]
   1efb8:	001a      	movs	r2, r3
   1efba:	2301      	movs	r3, #1
   1efbc:	4013      	ands	r3, r2
   1efbe:	d016      	beq.n	1efee <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1efc0:	4b17      	ldr	r3, [pc, #92]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1efc2:	681b      	ldr	r3, [r3, #0]
   1efc4:	7adb      	ldrb	r3, [r3, #11]
   1efc6:	001a      	movs	r2, r3
   1efc8:	2308      	movs	r3, #8
   1efca:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1efcc:	d10f      	bne.n	1efee <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1efce:	2380      	movs	r3, #128	; 0x80
   1efd0:	009b      	lsls	r3, r3, #2
   1efd2:	4a1e      	ldr	r2, [pc, #120]	; (1f04c <sd_mmc_spi_card_init+0x1a0>)
   1efd4:	0019      	movs	r1, r3
   1efd6:	0010      	movs	r0, r2
   1efd8:	4b13      	ldr	r3, [pc, #76]	; (1f028 <sd_mmc_spi_card_init+0x17c>)
   1efda:	4798      	blx	r3
   1efdc:	0003      	movs	r3, r0
   1efde:	001a      	movs	r2, r3
   1efe0:	2301      	movs	r3, #1
   1efe2:	4053      	eors	r3, r2
   1efe4:	b2db      	uxtb	r3, r3
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	d001      	beq.n	1efee <sd_mmc_spi_card_init+0x142>
			return false;
   1efea:	2300      	movs	r3, #0
   1efec:	e014      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1efee:	4b0c      	ldr	r3, [pc, #48]	; (1f020 <sd_mmc_spi_card_init+0x174>)
   1eff0:	681b      	ldr	r3, [r3, #0]
   1eff2:	7adb      	ldrb	r3, [r3, #11]
   1eff4:	001a      	movs	r2, r3
   1eff6:	2301      	movs	r3, #1
   1eff8:	4013      	ands	r3, r2
   1effa:	d00a      	beq.n	1f012 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1effc:	4b14      	ldr	r3, [pc, #80]	; (1f050 <sd_mmc_spi_card_init+0x1a4>)
   1effe:	4798      	blx	r3
   1f000:	0003      	movs	r3, r0
   1f002:	001a      	movs	r2, r3
   1f004:	2301      	movs	r3, #1
   1f006:	4053      	eors	r3, r2
   1f008:	b2db      	uxtb	r3, r3
   1f00a:	2b00      	cmp	r3, #0
   1f00c:	d001      	beq.n	1f012 <sd_mmc_spi_card_init+0x166>
			return false;
   1f00e:	2300      	movs	r3, #0
   1f010:	e002      	b.n	1f018 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f012:	4b10      	ldr	r3, [pc, #64]	; (1f054 <sd_mmc_spi_card_init+0x1a8>)
   1f014:	4798      	blx	r3
	return true;
   1f016:	2301      	movs	r3, #1
}
   1f018:	0018      	movs	r0, r3
   1f01a:	46bd      	mov	sp, r7
   1f01c:	b002      	add	sp, #8
   1f01e:	bd80      	pop	{r7, pc}
   1f020:	20004240 	.word	0x20004240
   1f024:	00020095 	.word	0x00020095
   1f028:	000200e1 	.word	0x000200e1
   1f02c:	0001e801 	.word	0x0001e801
   1f030:	0001e7f5 	.word	0x0001e7f5
   1f034:	0001e711 	.word	0x0001e711
   1f038:	0001f059 	.word	0x0001f059
   1f03c:	0000113b 	.word	0x0000113b
   1f040:	0001e99d 	.word	0x0001e99d
   1f044:	0001eb3d 	.word	0x0001eb3d
   1f048:	0001ec85 	.word	0x0001ec85
   1f04c:	00001110 	.word	0x00001110
   1f050:	0001ec29 	.word	0x0001ec29
   1f054:	0001ee51 	.word	0x0001ee51

0001f058 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f058:	b580      	push	{r7, lr}
   1f05a:	b082      	sub	sp, #8
   1f05c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f05e:	2388      	movs	r3, #136	; 0x88
   1f060:	015b      	lsls	r3, r3, #5
   1f062:	2100      	movs	r1, #0
   1f064:	0018      	movs	r0, r3
   1f066:	4b32      	ldr	r3, [pc, #200]	; (1f130 <sd_mmc_spi_install_mmc+0xd8>)
   1f068:	4798      	blx	r3
   1f06a:	0003      	movs	r3, r0
   1f06c:	001a      	movs	r2, r3
   1f06e:	2301      	movs	r3, #1
   1f070:	4053      	eors	r3, r2
   1f072:	b2db      	uxtb	r3, r3
   1f074:	2b00      	cmp	r3, #0
   1f076:	d001      	beq.n	1f07c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f078:	2300      	movs	r3, #0
   1f07a:	e055      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f07c:	4b2d      	ldr	r3, [pc, #180]	; (1f134 <sd_mmc_spi_install_mmc+0xdc>)
   1f07e:	4798      	blx	r3
   1f080:	0003      	movs	r3, r0
   1f082:	001a      	movs	r2, r3
   1f084:	2301      	movs	r3, #1
   1f086:	4053      	eors	r3, r2
   1f088:	b2db      	uxtb	r3, r3
   1f08a:	2b00      	cmp	r3, #0
   1f08c:	d001      	beq.n	1f092 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f08e:	2300      	movs	r3, #0
   1f090:	e04a      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f092:	4b29      	ldr	r3, [pc, #164]	; (1f138 <sd_mmc_spi_install_mmc+0xe0>)
   1f094:	2100      	movs	r1, #0
   1f096:	0018      	movs	r0, r3
   1f098:	4b25      	ldr	r3, [pc, #148]	; (1f130 <sd_mmc_spi_install_mmc+0xd8>)
   1f09a:	4798      	blx	r3
   1f09c:	0003      	movs	r3, r0
   1f09e:	001a      	movs	r2, r3
   1f0a0:	2301      	movs	r3, #1
   1f0a2:	4053      	eors	r3, r2
   1f0a4:	b2db      	uxtb	r3, r3
   1f0a6:	2b00      	cmp	r3, #0
   1f0a8:	d001      	beq.n	1f0ae <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f0aa:	2300      	movs	r3, #0
   1f0ac:	e03c      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f0ae:	4b23      	ldr	r3, [pc, #140]	; (1f13c <sd_mmc_spi_install_mmc+0xe4>)
   1f0b0:	4798      	blx	r3
   1f0b2:	0003      	movs	r3, r0
   1f0b4:	001a      	movs	r2, r3
   1f0b6:	2301      	movs	r3, #1
   1f0b8:	4053      	eors	r3, r2
   1f0ba:	b2db      	uxtb	r3, r3
   1f0bc:	2b00      	cmp	r3, #0
   1f0be:	d001      	beq.n	1f0c4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f0c0:	2300      	movs	r3, #0
   1f0c2:	e031      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f0c4:	4b1e      	ldr	r3, [pc, #120]	; (1f140 <sd_mmc_spi_install_mmc+0xe8>)
   1f0c6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f0c8:	4b1e      	ldr	r3, [pc, #120]	; (1f144 <sd_mmc_spi_install_mmc+0xec>)
   1f0ca:	681b      	ldr	r3, [r3, #0]
   1f0cc:	7b1b      	ldrb	r3, [r3, #12]
   1f0ce:	2b3f      	cmp	r3, #63	; 0x3f
   1f0d0:	d90c      	bls.n	1f0ec <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f0d2:	1dfb      	adds	r3, r7, #7
   1f0d4:	0018      	movs	r0, r3
   1f0d6:	4b1c      	ldr	r3, [pc, #112]	; (1f148 <sd_mmc_spi_install_mmc+0xf0>)
   1f0d8:	4798      	blx	r3
   1f0da:	0003      	movs	r3, r0
   1f0dc:	001a      	movs	r2, r3
   1f0de:	2301      	movs	r3, #1
   1f0e0:	4053      	eors	r3, r2
   1f0e2:	b2db      	uxtb	r3, r3
   1f0e4:	2b00      	cmp	r3, #0
   1f0e6:	d001      	beq.n	1f0ec <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f0e8:	2300      	movs	r3, #0
   1f0ea:	e01d      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f0ec:	2380      	movs	r3, #128	; 0x80
   1f0ee:	009b      	lsls	r3, r3, #2
   1f0f0:	4a16      	ldr	r2, [pc, #88]	; (1f14c <sd_mmc_spi_install_mmc+0xf4>)
   1f0f2:	0019      	movs	r1, r3
   1f0f4:	0010      	movs	r0, r2
   1f0f6:	4b0e      	ldr	r3, [pc, #56]	; (1f130 <sd_mmc_spi_install_mmc+0xd8>)
   1f0f8:	4798      	blx	r3
   1f0fa:	0003      	movs	r3, r0
   1f0fc:	001a      	movs	r2, r3
   1f0fe:	2301      	movs	r3, #1
   1f100:	4053      	eors	r3, r2
   1f102:	b2db      	uxtb	r3, r3
   1f104:	2b00      	cmp	r3, #0
   1f106:	d001      	beq.n	1f10c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f108:	2300      	movs	r3, #0
   1f10a:	e00d      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f10c:	4b10      	ldr	r3, [pc, #64]	; (1f150 <sd_mmc_spi_install_mmc+0xf8>)
   1f10e:	4798      	blx	r3
   1f110:	0003      	movs	r3, r0
   1f112:	001a      	movs	r2, r3
   1f114:	2301      	movs	r3, #1
   1f116:	4053      	eors	r3, r2
   1f118:	b2db      	uxtb	r3, r3
   1f11a:	2b00      	cmp	r3, #0
   1f11c:	d001      	beq.n	1f122 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f11e:	2300      	movs	r3, #0
   1f120:	e002      	b.n	1f128 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f122:	4b0c      	ldr	r3, [pc, #48]	; (1f154 <sd_mmc_spi_install_mmc+0xfc>)
   1f124:	4798      	blx	r3
	return true;
   1f126:	2301      	movs	r3, #1
}
   1f128:	0018      	movs	r0, r3
   1f12a:	46bd      	mov	sp, r7
   1f12c:	b002      	add	sp, #8
   1f12e:	bd80      	pop	{r7, pc}
   1f130:	000200e1 	.word	0x000200e1
   1f134:	0001e665 	.word	0x0001e665
   1f138:	0000113b 	.word	0x0000113b
   1f13c:	0001e99d 	.word	0x0001e99d
   1f140:	0001ea0d 	.word	0x0001ea0d
   1f144:	20004240 	.word	0x20004240
   1f148:	0001e871 	.word	0x0001e871
   1f14c:	00001110 	.word	0x00001110
   1f150:	0001ec29 	.word	0x0001ec29
   1f154:	0001ee51 	.word	0x0001ee51

0001f158 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f158:	b580      	push	{r7, lr}
   1f15a:	b082      	sub	sp, #8
   1f15c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f15e:	1dfb      	adds	r3, r7, #7
   1f160:	2200      	movs	r2, #0
   1f162:	701a      	strb	r2, [r3, #0]
   1f164:	e00c      	b.n	1f180 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f166:	1dfb      	adds	r3, r7, #7
   1f168:	781b      	ldrb	r3, [r3, #0]
   1f16a:	4a0c      	ldr	r2, [pc, #48]	; (1f19c <sd_mmc_init+0x44>)
   1f16c:	015b      	lsls	r3, r3, #5
   1f16e:	18d3      	adds	r3, r2, r3
   1f170:	330a      	adds	r3, #10
   1f172:	2204      	movs	r2, #4
   1f174:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f176:	1dfb      	adds	r3, r7, #7
   1f178:	781a      	ldrb	r2, [r3, #0]
   1f17a:	1dfb      	adds	r3, r7, #7
   1f17c:	3201      	adds	r2, #1
   1f17e:	701a      	strb	r2, [r3, #0]
   1f180:	1dfb      	adds	r3, r7, #7
   1f182:	781b      	ldrb	r3, [r3, #0]
   1f184:	2b00      	cmp	r3, #0
   1f186:	d0ee      	beq.n	1f166 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f188:	4b05      	ldr	r3, [pc, #20]	; (1f1a0 <sd_mmc_init+0x48>)
   1f18a:	22ff      	movs	r2, #255	; 0xff
   1f18c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f18e:	4b05      	ldr	r3, [pc, #20]	; (1f1a4 <sd_mmc_init+0x4c>)
   1f190:	4798      	blx	r3
}
   1f192:	46c0      	nop			; (mov r8, r8)
   1f194:	46bd      	mov	sp, r7
   1f196:	b002      	add	sp, #8
   1f198:	bd80      	pop	{r7, pc}
   1f19a:	46c0      	nop			; (mov r8, r8)
   1f19c:	2000421c 	.word	0x2000421c
   1f1a0:	2000423c 	.word	0x2000423c
   1f1a4:	0001ff01 	.word	0x0001ff01

0001f1a8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f1a8:	b590      	push	{r4, r7, lr}
   1f1aa:	b085      	sub	sp, #20
   1f1ac:	af00      	add	r7, sp, #0
   1f1ae:	0002      	movs	r2, r0
   1f1b0:	1dfb      	adds	r3, r7, #7
   1f1b2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f1b4:	230f      	movs	r3, #15
   1f1b6:	18fc      	adds	r4, r7, r3
   1f1b8:	1dfb      	adds	r3, r7, #7
   1f1ba:	781b      	ldrb	r3, [r3, #0]
   1f1bc:	0018      	movs	r0, r3
   1f1be:	4b13      	ldr	r3, [pc, #76]	; (1f20c <sd_mmc_check+0x64>)
   1f1c0:	4798      	blx	r3
   1f1c2:	0003      	movs	r3, r0
   1f1c4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f1c6:	230f      	movs	r3, #15
   1f1c8:	18fb      	adds	r3, r7, r3
   1f1ca:	781b      	ldrb	r3, [r3, #0]
   1f1cc:	2b01      	cmp	r3, #1
   1f1ce:	d005      	beq.n	1f1dc <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f1d0:	4b0f      	ldr	r3, [pc, #60]	; (1f210 <sd_mmc_check+0x68>)
   1f1d2:	4798      	blx	r3
		return sd_mmc_err;
   1f1d4:	230f      	movs	r3, #15
   1f1d6:	18fb      	adds	r3, r7, r3
   1f1d8:	781b      	ldrb	r3, [r3, #0]
   1f1da:	e012      	b.n	1f202 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f1dc:	4b0d      	ldr	r3, [pc, #52]	; (1f214 <sd_mmc_check+0x6c>)
   1f1de:	4798      	blx	r3
   1f1e0:	1e03      	subs	r3, r0, #0
   1f1e2:	d007      	beq.n	1f1f4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f1e4:	4b0c      	ldr	r3, [pc, #48]	; (1f218 <sd_mmc_check+0x70>)
   1f1e6:	681b      	ldr	r3, [r3, #0]
   1f1e8:	2200      	movs	r2, #0
   1f1ea:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f1ec:	4b08      	ldr	r3, [pc, #32]	; (1f210 <sd_mmc_check+0x68>)
   1f1ee:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f1f0:	2301      	movs	r3, #1
   1f1f2:	e006      	b.n	1f202 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f1f4:	4b08      	ldr	r3, [pc, #32]	; (1f218 <sd_mmc_check+0x70>)
   1f1f6:	681b      	ldr	r3, [r3, #0]
   1f1f8:	2203      	movs	r2, #3
   1f1fa:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f1fc:	4b04      	ldr	r3, [pc, #16]	; (1f210 <sd_mmc_check+0x68>)
   1f1fe:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f200:	2303      	movs	r3, #3
}
   1f202:	0018      	movs	r0, r3
   1f204:	46bd      	mov	sp, r7
   1f206:	b005      	add	sp, #20
   1f208:	bd90      	pop	{r4, r7, pc}
   1f20a:	46c0      	nop			; (mov r8, r8)
   1f20c:	0001ed8d 	.word	0x0001ed8d
   1f210:	0001ee89 	.word	0x0001ee89
   1f214:	0001eead 	.word	0x0001eead
   1f218:	20004240 	.word	0x20004240

0001f21c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f21c:	b580      	push	{r7, lr}
   1f21e:	b082      	sub	sp, #8
   1f220:	af00      	add	r7, sp, #0
   1f222:	0002      	movs	r2, r0
   1f224:	1dfb      	adds	r3, r7, #7
   1f226:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f228:	1dfb      	adds	r3, r7, #7
   1f22a:	781b      	ldrb	r3, [r3, #0]
   1f22c:	0018      	movs	r0, r3
   1f22e:	4b07      	ldr	r3, [pc, #28]	; (1f24c <sd_mmc_get_type+0x30>)
   1f230:	4798      	blx	r3
   1f232:	1e03      	subs	r3, r0, #0
   1f234:	d001      	beq.n	1f23a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f236:	2300      	movs	r3, #0
   1f238:	e004      	b.n	1f244 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f23a:	4b05      	ldr	r3, [pc, #20]	; (1f250 <sd_mmc_get_type+0x34>)
   1f23c:	4798      	blx	r3
	return sd_mmc_card->type;
   1f23e:	4b05      	ldr	r3, [pc, #20]	; (1f254 <sd_mmc_get_type+0x38>)
   1f240:	681b      	ldr	r3, [r3, #0]
   1f242:	7adb      	ldrb	r3, [r3, #11]
}
   1f244:	0018      	movs	r0, r3
   1f246:	46bd      	mov	sp, r7
   1f248:	b002      	add	sp, #8
   1f24a:	bd80      	pop	{r7, pc}
   1f24c:	0001ed8d 	.word	0x0001ed8d
   1f250:	0001ee89 	.word	0x0001ee89
   1f254:	20004240 	.word	0x20004240

0001f258 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f258:	b580      	push	{r7, lr}
   1f25a:	b082      	sub	sp, #8
   1f25c:	af00      	add	r7, sp, #0
   1f25e:	0002      	movs	r2, r0
   1f260:	1dfb      	adds	r3, r7, #7
   1f262:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f264:	1dfb      	adds	r3, r7, #7
   1f266:	781b      	ldrb	r3, [r3, #0]
   1f268:	0018      	movs	r0, r3
   1f26a:	4b07      	ldr	r3, [pc, #28]	; (1f288 <sd_mmc_get_capacity+0x30>)
   1f26c:	4798      	blx	r3
   1f26e:	1e03      	subs	r3, r0, #0
   1f270:	d001      	beq.n	1f276 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f272:	2300      	movs	r3, #0
   1f274:	e004      	b.n	1f280 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f276:	4b05      	ldr	r3, [pc, #20]	; (1f28c <sd_mmc_get_capacity+0x34>)
   1f278:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f27a:	4b05      	ldr	r3, [pc, #20]	; (1f290 <sd_mmc_get_capacity+0x38>)
   1f27c:	681b      	ldr	r3, [r3, #0]
   1f27e:	685b      	ldr	r3, [r3, #4]
}
   1f280:	0018      	movs	r0, r3
   1f282:	46bd      	mov	sp, r7
   1f284:	b002      	add	sp, #8
   1f286:	bd80      	pop	{r7, pc}
   1f288:	0001ed8d 	.word	0x0001ed8d
   1f28c:	0001ee89 	.word	0x0001ee89
   1f290:	20004240 	.word	0x20004240

0001f294 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f294:	b580      	push	{r7, lr}
   1f296:	b082      	sub	sp, #8
   1f298:	af00      	add	r7, sp, #0
   1f29a:	0002      	movs	r2, r0
   1f29c:	1dfb      	adds	r3, r7, #7
   1f29e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f2a0:	2300      	movs	r3, #0
}
   1f2a2:	0018      	movs	r0, r3
   1f2a4:	46bd      	mov	sp, r7
   1f2a6:	b002      	add	sp, #8
   1f2a8:	bd80      	pop	{r7, pc}
	...

0001f2ac <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f2ac:	b590      	push	{r4, r7, lr}
   1f2ae:	b089      	sub	sp, #36	; 0x24
   1f2b0:	af02      	add	r7, sp, #8
   1f2b2:	6039      	str	r1, [r7, #0]
   1f2b4:	0011      	movs	r1, r2
   1f2b6:	1dfb      	adds	r3, r7, #7
   1f2b8:	1c02      	adds	r2, r0, #0
   1f2ba:	701a      	strb	r2, [r3, #0]
   1f2bc:	1d3b      	adds	r3, r7, #4
   1f2be:	1c0a      	adds	r2, r1, #0
   1f2c0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f2c2:	230f      	movs	r3, #15
   1f2c4:	18fc      	adds	r4, r7, r3
   1f2c6:	1dfb      	adds	r3, r7, #7
   1f2c8:	781b      	ldrb	r3, [r3, #0]
   1f2ca:	0018      	movs	r0, r3
   1f2cc:	4b29      	ldr	r3, [pc, #164]	; (1f374 <sd_mmc_init_read_blocks+0xc8>)
   1f2ce:	4798      	blx	r3
   1f2d0:	0003      	movs	r3, r0
   1f2d2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f2d4:	230f      	movs	r3, #15
   1f2d6:	18fb      	adds	r3, r7, r3
   1f2d8:	781b      	ldrb	r3, [r3, #0]
   1f2da:	2b00      	cmp	r3, #0
   1f2dc:	d003      	beq.n	1f2e6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f2de:	230f      	movs	r3, #15
   1f2e0:	18fb      	adds	r3, r7, r3
   1f2e2:	781b      	ldrb	r3, [r3, #0]
   1f2e4:	e041      	b.n	1f36a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f2e6:	4b24      	ldr	r3, [pc, #144]	; (1f378 <sd_mmc_init_read_blocks+0xcc>)
   1f2e8:	4798      	blx	r3
   1f2ea:	0003      	movs	r3, r0
   1f2ec:	001a      	movs	r2, r3
   1f2ee:	2301      	movs	r3, #1
   1f2f0:	4053      	eors	r3, r2
   1f2f2:	b2db      	uxtb	r3, r3
   1f2f4:	2b00      	cmp	r3, #0
   1f2f6:	d003      	beq.n	1f300 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f2f8:	4b20      	ldr	r3, [pc, #128]	; (1f37c <sd_mmc_init_read_blocks+0xd0>)
   1f2fa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f2fc:	2305      	movs	r3, #5
   1f2fe:	e034      	b.n	1f36a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f300:	1d3b      	adds	r3, r7, #4
   1f302:	881b      	ldrh	r3, [r3, #0]
   1f304:	2b01      	cmp	r3, #1
   1f306:	d902      	bls.n	1f30e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f308:	4b1d      	ldr	r3, [pc, #116]	; (1f380 <sd_mmc_init_read_blocks+0xd4>)
   1f30a:	617b      	str	r3, [r7, #20]
   1f30c:	e001      	b.n	1f312 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f30e:	4b1d      	ldr	r3, [pc, #116]	; (1f384 <sd_mmc_init_read_blocks+0xd8>)
   1f310:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f312:	4b1d      	ldr	r3, [pc, #116]	; (1f388 <sd_mmc_init_read_blocks+0xdc>)
   1f314:	681b      	ldr	r3, [r3, #0]
   1f316:	7adb      	ldrb	r3, [r3, #11]
   1f318:	001a      	movs	r2, r3
   1f31a:	2308      	movs	r3, #8
   1f31c:	4013      	ands	r3, r2
   1f31e:	d002      	beq.n	1f326 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f320:	683b      	ldr	r3, [r7, #0]
   1f322:	613b      	str	r3, [r7, #16]
   1f324:	e002      	b.n	1f32c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f326:	683b      	ldr	r3, [r7, #0]
   1f328:	025b      	lsls	r3, r3, #9
   1f32a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f32c:	1d3b      	adds	r3, r7, #4
   1f32e:	881c      	ldrh	r4, [r3, #0]
   1f330:	2380      	movs	r3, #128	; 0x80
   1f332:	009a      	lsls	r2, r3, #2
   1f334:	6939      	ldr	r1, [r7, #16]
   1f336:	6978      	ldr	r0, [r7, #20]
   1f338:	2301      	movs	r3, #1
   1f33a:	9300      	str	r3, [sp, #0]
   1f33c:	0023      	movs	r3, r4
   1f33e:	4c13      	ldr	r4, [pc, #76]	; (1f38c <sd_mmc_init_read_blocks+0xe0>)
   1f340:	47a0      	blx	r4
   1f342:	0003      	movs	r3, r0
   1f344:	001a      	movs	r2, r3
   1f346:	2301      	movs	r3, #1
   1f348:	4053      	eors	r3, r2
   1f34a:	b2db      	uxtb	r3, r3
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d003      	beq.n	1f358 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f350:	4b0a      	ldr	r3, [pc, #40]	; (1f37c <sd_mmc_init_read_blocks+0xd0>)
   1f352:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f354:	2305      	movs	r3, #5
   1f356:	e008      	b.n	1f36a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f358:	4b0d      	ldr	r3, [pc, #52]	; (1f390 <sd_mmc_init_read_blocks+0xe4>)
   1f35a:	1d3a      	adds	r2, r7, #4
   1f35c:	8812      	ldrh	r2, [r2, #0]
   1f35e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f360:	4b0c      	ldr	r3, [pc, #48]	; (1f394 <sd_mmc_init_read_blocks+0xe8>)
   1f362:	1d3a      	adds	r2, r7, #4
   1f364:	8812      	ldrh	r2, [r2, #0]
   1f366:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f368:	2300      	movs	r3, #0
}
   1f36a:	0018      	movs	r0, r3
   1f36c:	46bd      	mov	sp, r7
   1f36e:	b007      	add	sp, #28
   1f370:	bd90      	pop	{r4, r7, pc}
   1f372:	46c0      	nop			; (mov r8, r8)
   1f374:	0001ed8d 	.word	0x0001ed8d
   1f378:	0001ec29 	.word	0x0001ec29
   1f37c:	0001ee89 	.word	0x0001ee89
   1f380:	00101112 	.word	0x00101112
   1f384:	00081111 	.word	0x00081111
   1f388:	20004240 	.word	0x20004240
   1f38c:	00020109 	.word	0x00020109
   1f390:	20004246 	.word	0x20004246
   1f394:	20004244 	.word	0x20004244

0001f398 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f398:	b580      	push	{r7, lr}
   1f39a:	b082      	sub	sp, #8
   1f39c:	af00      	add	r7, sp, #0
   1f39e:	6078      	str	r0, [r7, #4]
   1f3a0:	000a      	movs	r2, r1
   1f3a2:	1cbb      	adds	r3, r7, #2
   1f3a4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f3a6:	1cbb      	adds	r3, r7, #2
   1f3a8:	881a      	ldrh	r2, [r3, #0]
   1f3aa:	687b      	ldr	r3, [r7, #4]
   1f3ac:	0011      	movs	r1, r2
   1f3ae:	0018      	movs	r0, r3
   1f3b0:	4b0d      	ldr	r3, [pc, #52]	; (1f3e8 <sd_mmc_start_read_blocks+0x50>)
   1f3b2:	4798      	blx	r3
   1f3b4:	0003      	movs	r3, r0
   1f3b6:	001a      	movs	r2, r3
   1f3b8:	2301      	movs	r3, #1
   1f3ba:	4053      	eors	r3, r2
   1f3bc:	b2db      	uxtb	r3, r3
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	d004      	beq.n	1f3cc <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f3c2:	4b0a      	ldr	r3, [pc, #40]	; (1f3ec <sd_mmc_start_read_blocks+0x54>)
   1f3c4:	2200      	movs	r2, #0
   1f3c6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f3c8:	2305      	movs	r3, #5
   1f3ca:	e008      	b.n	1f3de <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f3cc:	4b07      	ldr	r3, [pc, #28]	; (1f3ec <sd_mmc_start_read_blocks+0x54>)
   1f3ce:	881a      	ldrh	r2, [r3, #0]
   1f3d0:	1cbb      	adds	r3, r7, #2
   1f3d2:	881b      	ldrh	r3, [r3, #0]
   1f3d4:	1ad3      	subs	r3, r2, r3
   1f3d6:	b29a      	uxth	r2, r3
   1f3d8:	4b04      	ldr	r3, [pc, #16]	; (1f3ec <sd_mmc_start_read_blocks+0x54>)
   1f3da:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f3dc:	2300      	movs	r3, #0
}
   1f3de:	0018      	movs	r0, r3
   1f3e0:	46bd      	mov	sp, r7
   1f3e2:	b002      	add	sp, #8
   1f3e4:	bd80      	pop	{r7, pc}
   1f3e6:	46c0      	nop			; (mov r8, r8)
   1f3e8:	000203d9 	.word	0x000203d9
   1f3ec:	20004246 	.word	0x20004246

0001f3f0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1f3f0:	b580      	push	{r7, lr}
   1f3f2:	b082      	sub	sp, #8
   1f3f4:	af00      	add	r7, sp, #0
   1f3f6:	0002      	movs	r2, r0
   1f3f8:	1dfb      	adds	r3, r7, #7
   1f3fa:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1f3fc:	4b1c      	ldr	r3, [pc, #112]	; (1f470 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1f3fe:	4798      	blx	r3
   1f400:	0003      	movs	r3, r0
   1f402:	001a      	movs	r2, r3
   1f404:	2301      	movs	r3, #1
   1f406:	4053      	eors	r3, r2
   1f408:	b2db      	uxtb	r3, r3
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d001      	beq.n	1f412 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f40e:	2305      	movs	r3, #5
   1f410:	e029      	b.n	1f466 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1f412:	1dfb      	adds	r3, r7, #7
   1f414:	781b      	ldrb	r3, [r3, #0]
   1f416:	2b00      	cmp	r3, #0
   1f418:	d003      	beq.n	1f422 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f41a:	4b16      	ldr	r3, [pc, #88]	; (1f474 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f41c:	2200      	movs	r2, #0
   1f41e:	801a      	strh	r2, [r3, #0]
   1f420:	e005      	b.n	1f42e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f422:	4b14      	ldr	r3, [pc, #80]	; (1f474 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f424:	881b      	ldrh	r3, [r3, #0]
   1f426:	2b00      	cmp	r3, #0
   1f428:	d001      	beq.n	1f42e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1f42a:	2300      	movs	r3, #0
   1f42c:	e01b      	b.n	1f466 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f42e:	4b12      	ldr	r3, [pc, #72]	; (1f478 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1f430:	881b      	ldrh	r3, [r3, #0]
   1f432:	2b01      	cmp	r3, #1
   1f434:	d103      	bne.n	1f43e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f436:	4b11      	ldr	r3, [pc, #68]	; (1f47c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f438:	4798      	blx	r3
		return SD_MMC_OK;
   1f43a:	2300      	movs	r3, #0
   1f43c:	e013      	b.n	1f466 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1f43e:	4b10      	ldr	r3, [pc, #64]	; (1f480 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f440:	2100      	movs	r1, #0
   1f442:	0018      	movs	r0, r3
   1f444:	4b0f      	ldr	r3, [pc, #60]	; (1f484 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f446:	4798      	blx	r3
   1f448:	0003      	movs	r3, r0
   1f44a:	001a      	movs	r2, r3
   1f44c:	2301      	movs	r3, #1
   1f44e:	4053      	eors	r3, r2
   1f450:	b2db      	uxtb	r3, r3
   1f452:	2b00      	cmp	r3, #0
   1f454:	d004      	beq.n	1f460 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1f456:	4b0a      	ldr	r3, [pc, #40]	; (1f480 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f458:	2100      	movs	r1, #0
   1f45a:	0018      	movs	r0, r3
   1f45c:	4b09      	ldr	r3, [pc, #36]	; (1f484 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f45e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1f460:	4b06      	ldr	r3, [pc, #24]	; (1f47c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f462:	4798      	blx	r3
	return SD_MMC_OK;
   1f464:	2300      	movs	r3, #0
}
   1f466:	0018      	movs	r0, r3
   1f468:	46bd      	mov	sp, r7
   1f46a:	b002      	add	sp, #8
   1f46c:	bd80      	pop	{r7, pc}
   1f46e:	46c0      	nop			; (mov r8, r8)
   1f470:	0002047d 	.word	0x0002047d
   1f474:	20004246 	.word	0x20004246
   1f478:	20004244 	.word	0x20004244
   1f47c:	0001ee89 	.word	0x0001ee89
   1f480:	0000310c 	.word	0x0000310c
   1f484:	000200e1 	.word	0x000200e1

0001f488 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f488:	b590      	push	{r4, r7, lr}
   1f48a:	b089      	sub	sp, #36	; 0x24
   1f48c:	af02      	add	r7, sp, #8
   1f48e:	6039      	str	r1, [r7, #0]
   1f490:	0011      	movs	r1, r2
   1f492:	1dfb      	adds	r3, r7, #7
   1f494:	1c02      	adds	r2, r0, #0
   1f496:	701a      	strb	r2, [r3, #0]
   1f498:	1d3b      	adds	r3, r7, #4
   1f49a:	1c0a      	adds	r2, r1, #0
   1f49c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f49e:	230f      	movs	r3, #15
   1f4a0:	18fc      	adds	r4, r7, r3
   1f4a2:	1dfb      	adds	r3, r7, #7
   1f4a4:	781b      	ldrb	r3, [r3, #0]
   1f4a6:	0018      	movs	r0, r3
   1f4a8:	4b28      	ldr	r3, [pc, #160]	; (1f54c <sd_mmc_init_write_blocks+0xc4>)
   1f4aa:	4798      	blx	r3
   1f4ac:	0003      	movs	r3, r0
   1f4ae:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f4b0:	230f      	movs	r3, #15
   1f4b2:	18fb      	adds	r3, r7, r3
   1f4b4:	781b      	ldrb	r3, [r3, #0]
   1f4b6:	2b00      	cmp	r3, #0
   1f4b8:	d003      	beq.n	1f4c2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1f4ba:	230f      	movs	r3, #15
   1f4bc:	18fb      	adds	r3, r7, r3
   1f4be:	781b      	ldrb	r3, [r3, #0]
   1f4c0:	e03f      	b.n	1f542 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1f4c2:	1dfb      	adds	r3, r7, #7
   1f4c4:	781b      	ldrb	r3, [r3, #0]
   1f4c6:	0018      	movs	r0, r3
   1f4c8:	4b21      	ldr	r3, [pc, #132]	; (1f550 <sd_mmc_init_write_blocks+0xc8>)
   1f4ca:	4798      	blx	r3
   1f4cc:	1e03      	subs	r3, r0, #0
   1f4ce:	d003      	beq.n	1f4d8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1f4d0:	4b20      	ldr	r3, [pc, #128]	; (1f554 <sd_mmc_init_write_blocks+0xcc>)
   1f4d2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1f4d4:	2307      	movs	r3, #7
   1f4d6:	e034      	b.n	1f542 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1f4d8:	1d3b      	adds	r3, r7, #4
   1f4da:	881b      	ldrh	r3, [r3, #0]
   1f4dc:	2b01      	cmp	r3, #1
   1f4de:	d902      	bls.n	1f4e6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1f4e0:	4b1d      	ldr	r3, [pc, #116]	; (1f558 <sd_mmc_init_write_blocks+0xd0>)
   1f4e2:	617b      	str	r3, [r7, #20]
   1f4e4:	e001      	b.n	1f4ea <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1f4e6:	4b1d      	ldr	r3, [pc, #116]	; (1f55c <sd_mmc_init_write_blocks+0xd4>)
   1f4e8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f4ea:	4b1d      	ldr	r3, [pc, #116]	; (1f560 <sd_mmc_init_write_blocks+0xd8>)
   1f4ec:	681b      	ldr	r3, [r3, #0]
   1f4ee:	7adb      	ldrb	r3, [r3, #11]
   1f4f0:	001a      	movs	r2, r3
   1f4f2:	2308      	movs	r3, #8
   1f4f4:	4013      	ands	r3, r2
   1f4f6:	d002      	beq.n	1f4fe <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1f4f8:	683b      	ldr	r3, [r7, #0]
   1f4fa:	613b      	str	r3, [r7, #16]
   1f4fc:	e002      	b.n	1f504 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f4fe:	683b      	ldr	r3, [r7, #0]
   1f500:	025b      	lsls	r3, r3, #9
   1f502:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f504:	1d3b      	adds	r3, r7, #4
   1f506:	881c      	ldrh	r4, [r3, #0]
   1f508:	2380      	movs	r3, #128	; 0x80
   1f50a:	009a      	lsls	r2, r3, #2
   1f50c:	6939      	ldr	r1, [r7, #16]
   1f50e:	6978      	ldr	r0, [r7, #20]
   1f510:	2301      	movs	r3, #1
   1f512:	9300      	str	r3, [sp, #0]
   1f514:	0023      	movs	r3, r4
   1f516:	4c13      	ldr	r4, [pc, #76]	; (1f564 <sd_mmc_init_write_blocks+0xdc>)
   1f518:	47a0      	blx	r4
   1f51a:	0003      	movs	r3, r0
   1f51c:	001a      	movs	r2, r3
   1f51e:	2301      	movs	r3, #1
   1f520:	4053      	eors	r3, r2
   1f522:	b2db      	uxtb	r3, r3
   1f524:	2b00      	cmp	r3, #0
   1f526:	d003      	beq.n	1f530 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1f528:	4b0a      	ldr	r3, [pc, #40]	; (1f554 <sd_mmc_init_write_blocks+0xcc>)
   1f52a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f52c:	2305      	movs	r3, #5
   1f52e:	e008      	b.n	1f542 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f530:	4b0d      	ldr	r3, [pc, #52]	; (1f568 <sd_mmc_init_write_blocks+0xe0>)
   1f532:	1d3a      	adds	r2, r7, #4
   1f534:	8812      	ldrh	r2, [r2, #0]
   1f536:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f538:	4b0c      	ldr	r3, [pc, #48]	; (1f56c <sd_mmc_init_write_blocks+0xe4>)
   1f53a:	1d3a      	adds	r2, r7, #4
   1f53c:	8812      	ldrh	r2, [r2, #0]
   1f53e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f540:	2300      	movs	r3, #0
}
   1f542:	0018      	movs	r0, r3
   1f544:	46bd      	mov	sp, r7
   1f546:	b007      	add	sp, #28
   1f548:	bd90      	pop	{r4, r7, pc}
   1f54a:	46c0      	nop			; (mov r8, r8)
   1f54c:	0001ed8d 	.word	0x0001ed8d
   1f550:	0001f295 	.word	0x0001f295
   1f554:	0001ee89 	.word	0x0001ee89
   1f558:	00109119 	.word	0x00109119
   1f55c:	00089118 	.word	0x00089118
   1f560:	20004240 	.word	0x20004240
   1f564:	00020109 	.word	0x00020109
   1f568:	20004246 	.word	0x20004246
   1f56c:	20004244 	.word	0x20004244

0001f570 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f570:	b580      	push	{r7, lr}
   1f572:	b082      	sub	sp, #8
   1f574:	af00      	add	r7, sp, #0
   1f576:	6078      	str	r0, [r7, #4]
   1f578:	000a      	movs	r2, r1
   1f57a:	1cbb      	adds	r3, r7, #2
   1f57c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f57e:	1cbb      	adds	r3, r7, #2
   1f580:	881a      	ldrh	r2, [r3, #0]
   1f582:	687b      	ldr	r3, [r7, #4]
   1f584:	0011      	movs	r1, r2
   1f586:	0018      	movs	r0, r3
   1f588:	4b0d      	ldr	r3, [pc, #52]	; (1f5c0 <sd_mmc_start_write_blocks+0x50>)
   1f58a:	4798      	blx	r3
   1f58c:	0003      	movs	r3, r0
   1f58e:	001a      	movs	r2, r3
   1f590:	2301      	movs	r3, #1
   1f592:	4053      	eors	r3, r2
   1f594:	b2db      	uxtb	r3, r3
   1f596:	2b00      	cmp	r3, #0
   1f598:	d004      	beq.n	1f5a4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f59a:	4b0a      	ldr	r3, [pc, #40]	; (1f5c4 <sd_mmc_start_write_blocks+0x54>)
   1f59c:	2200      	movs	r2, #0
   1f59e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f5a0:	2305      	movs	r3, #5
   1f5a2:	e008      	b.n	1f5b6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f5a4:	4b07      	ldr	r3, [pc, #28]	; (1f5c4 <sd_mmc_start_write_blocks+0x54>)
   1f5a6:	881a      	ldrh	r2, [r3, #0]
   1f5a8:	1cbb      	adds	r3, r7, #2
   1f5aa:	881b      	ldrh	r3, [r3, #0]
   1f5ac:	1ad3      	subs	r3, r2, r3
   1f5ae:	b29a      	uxth	r2, r3
   1f5b0:	4b04      	ldr	r3, [pc, #16]	; (1f5c4 <sd_mmc_start_write_blocks+0x54>)
   1f5b2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f5b4:	2300      	movs	r3, #0
}
   1f5b6:	0018      	movs	r0, r3
   1f5b8:	46bd      	mov	sp, r7
   1f5ba:	b002      	add	sp, #8
   1f5bc:	bd80      	pop	{r7, pc}
   1f5be:	46c0      	nop			; (mov r8, r8)
   1f5c0:	00020489 	.word	0x00020489
   1f5c4:	20004246 	.word	0x20004246

0001f5c8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f5c8:	b580      	push	{r7, lr}
   1f5ca:	b082      	sub	sp, #8
   1f5cc:	af00      	add	r7, sp, #0
   1f5ce:	0002      	movs	r2, r0
   1f5d0:	1dfb      	adds	r3, r7, #7
   1f5d2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f5d4:	4b13      	ldr	r3, [pc, #76]	; (1f624 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f5d6:	4798      	blx	r3
   1f5d8:	0003      	movs	r3, r0
   1f5da:	001a      	movs	r2, r3
   1f5dc:	2301      	movs	r3, #1
   1f5de:	4053      	eors	r3, r2
   1f5e0:	b2db      	uxtb	r3, r3
   1f5e2:	2b00      	cmp	r3, #0
   1f5e4:	d001      	beq.n	1f5ea <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f5e6:	2305      	movs	r3, #5
   1f5e8:	e018      	b.n	1f61c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f5ea:	1dfb      	adds	r3, r7, #7
   1f5ec:	781b      	ldrb	r3, [r3, #0]
   1f5ee:	2b00      	cmp	r3, #0
   1f5f0:	d003      	beq.n	1f5fa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f5f2:	4b0d      	ldr	r3, [pc, #52]	; (1f628 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f5f4:	2200      	movs	r2, #0
   1f5f6:	801a      	strh	r2, [r3, #0]
   1f5f8:	e005      	b.n	1f606 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f5fa:	4b0b      	ldr	r3, [pc, #44]	; (1f628 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f5fc:	881b      	ldrh	r3, [r3, #0]
   1f5fe:	2b00      	cmp	r3, #0
   1f600:	d001      	beq.n	1f606 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f602:	2300      	movs	r3, #0
   1f604:	e00a      	b.n	1f61c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f606:	4b09      	ldr	r3, [pc, #36]	; (1f62c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f608:	881b      	ldrh	r3, [r3, #0]
   1f60a:	2b01      	cmp	r3, #1
   1f60c:	d103      	bne.n	1f616 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f60e:	4b08      	ldr	r3, [pc, #32]	; (1f630 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f610:	4798      	blx	r3
		return SD_MMC_OK;
   1f612:	2300      	movs	r3, #0
   1f614:	e002      	b.n	1f61c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f616:	4b06      	ldr	r3, [pc, #24]	; (1f630 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f618:	4798      	blx	r3
	return SD_MMC_OK;
   1f61a:	2300      	movs	r3, #0
}
   1f61c:	0018      	movs	r0, r3
   1f61e:	46bd      	mov	sp, r7
   1f620:	b002      	add	sp, #8
   1f622:	bd80      	pop	{r7, pc}
   1f624:	00020549 	.word	0x00020549
   1f628:	20004246 	.word	0x20004246
   1f62c:	20004244 	.word	0x20004244
   1f630:	0001ee89 	.word	0x0001ee89

0001f634 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f634:	b580      	push	{r7, lr}
   1f636:	b082      	sub	sp, #8
   1f638:	af00      	add	r7, sp, #0
   1f63a:	0002      	movs	r2, r0
   1f63c:	1dfb      	adds	r3, r7, #7
   1f63e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f640:	1dfb      	adds	r3, r7, #7
   1f642:	781b      	ldrb	r3, [r3, #0]
   1f644:	0018      	movs	r0, r3
   1f646:	4b16      	ldr	r3, [pc, #88]	; (1f6a0 <sd_mmc_test_unit_ready+0x6c>)
   1f648:	4798      	blx	r3
   1f64a:	0003      	movs	r3, r0
   1f64c:	2b01      	cmp	r3, #1
   1f64e:	d019      	beq.n	1f684 <sd_mmc_test_unit_ready+0x50>
   1f650:	2b02      	cmp	r3, #2
   1f652:	d019      	beq.n	1f688 <sd_mmc_test_unit_ready+0x54>
   1f654:	2b00      	cmp	r3, #0
   1f656:	d11e      	bne.n	1f696 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f658:	1dfb      	adds	r3, r7, #7
   1f65a:	781b      	ldrb	r3, [r3, #0]
   1f65c:	4a11      	ldr	r2, [pc, #68]	; (1f6a4 <sd_mmc_test_unit_ready+0x70>)
   1f65e:	5cd3      	ldrb	r3, [r2, r3]
   1f660:	2b00      	cmp	r3, #0
   1f662:	d001      	beq.n	1f668 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f664:	2302      	movs	r3, #2
   1f666:	e017      	b.n	1f698 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f668:	1dfb      	adds	r3, r7, #7
   1f66a:	781b      	ldrb	r3, [r3, #0]
   1f66c:	0018      	movs	r0, r3
   1f66e:	4b0e      	ldr	r3, [pc, #56]	; (1f6a8 <sd_mmc_test_unit_ready+0x74>)
   1f670:	4798      	blx	r3
   1f672:	0003      	movs	r3, r0
   1f674:	001a      	movs	r2, r3
   1f676:	2303      	movs	r3, #3
   1f678:	4013      	ands	r3, r2
   1f67a:	d001      	beq.n	1f680 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f67c:	2300      	movs	r3, #0
   1f67e:	e00b      	b.n	1f698 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f680:	2302      	movs	r3, #2
   1f682:	e009      	b.n	1f698 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f684:	2303      	movs	r3, #3
   1f686:	e007      	b.n	1f698 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f688:	1dfb      	adds	r3, r7, #7
   1f68a:	781b      	ldrb	r3, [r3, #0]
   1f68c:	4a05      	ldr	r2, [pc, #20]	; (1f6a4 <sd_mmc_test_unit_ready+0x70>)
   1f68e:	2100      	movs	r1, #0
   1f690:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f692:	2302      	movs	r3, #2
   1f694:	e000      	b.n	1f698 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f696:	2301      	movs	r3, #1
	}
}
   1f698:	0018      	movs	r0, r3
   1f69a:	46bd      	mov	sp, r7
   1f69c:	b002      	add	sp, #8
   1f69e:	bd80      	pop	{r7, pc}
   1f6a0:	0001f1a9 	.word	0x0001f1a9
   1f6a4:	20004248 	.word	0x20004248
   1f6a8:	0001f21d 	.word	0x0001f21d

0001f6ac <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f6ac:	b580      	push	{r7, lr}
   1f6ae:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f6b0:	2000      	movs	r0, #0
   1f6b2:	4b03      	ldr	r3, [pc, #12]	; (1f6c0 <sd_mmc_test_unit_ready_0+0x14>)
   1f6b4:	4798      	blx	r3
   1f6b6:	0003      	movs	r3, r0
}
   1f6b8:	0018      	movs	r0, r3
   1f6ba:	46bd      	mov	sp, r7
   1f6bc:	bd80      	pop	{r7, pc}
   1f6be:	46c0      	nop			; (mov r8, r8)
   1f6c0:	0001f635 	.word	0x0001f635

0001f6c4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f6c4:	b580      	push	{r7, lr}
   1f6c6:	b082      	sub	sp, #8
   1f6c8:	af00      	add	r7, sp, #0
   1f6ca:	0002      	movs	r2, r0
   1f6cc:	6039      	str	r1, [r7, #0]
   1f6ce:	1dfb      	adds	r3, r7, #7
   1f6d0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f6d2:	1dfb      	adds	r3, r7, #7
   1f6d4:	781b      	ldrb	r3, [r3, #0]
   1f6d6:	0018      	movs	r0, r3
   1f6d8:	4b08      	ldr	r3, [pc, #32]	; (1f6fc <sd_mmc_read_capacity+0x38>)
   1f6da:	4798      	blx	r3
   1f6dc:	0003      	movs	r3, r0
   1f6de:	005b      	lsls	r3, r3, #1
   1f6e0:	1e5a      	subs	r2, r3, #1
   1f6e2:	683b      	ldr	r3, [r7, #0]
   1f6e4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f6e6:	1dfb      	adds	r3, r7, #7
   1f6e8:	781b      	ldrb	r3, [r3, #0]
   1f6ea:	0018      	movs	r0, r3
   1f6ec:	4b04      	ldr	r3, [pc, #16]	; (1f700 <sd_mmc_read_capacity+0x3c>)
   1f6ee:	4798      	blx	r3
   1f6f0:	0003      	movs	r3, r0
}
   1f6f2:	0018      	movs	r0, r3
   1f6f4:	46bd      	mov	sp, r7
   1f6f6:	b002      	add	sp, #8
   1f6f8:	bd80      	pop	{r7, pc}
   1f6fa:	46c0      	nop			; (mov r8, r8)
   1f6fc:	0001f259 	.word	0x0001f259
   1f700:	0001f635 	.word	0x0001f635

0001f704 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f704:	b580      	push	{r7, lr}
   1f706:	b082      	sub	sp, #8
   1f708:	af00      	add	r7, sp, #0
   1f70a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f70c:	687b      	ldr	r3, [r7, #4]
   1f70e:	0019      	movs	r1, r3
   1f710:	2000      	movs	r0, #0
   1f712:	4b03      	ldr	r3, [pc, #12]	; (1f720 <sd_mmc_read_capacity_0+0x1c>)
   1f714:	4798      	blx	r3
   1f716:	0003      	movs	r3, r0
}
   1f718:	0018      	movs	r0, r3
   1f71a:	46bd      	mov	sp, r7
   1f71c:	b002      	add	sp, #8
   1f71e:	bd80      	pop	{r7, pc}
   1f720:	0001f6c5 	.word	0x0001f6c5

0001f724 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f724:	b580      	push	{r7, lr}
   1f726:	b082      	sub	sp, #8
   1f728:	af00      	add	r7, sp, #0
   1f72a:	0002      	movs	r2, r0
   1f72c:	1dfb      	adds	r3, r7, #7
   1f72e:	701a      	strb	r2, [r3, #0]
   1f730:	1dbb      	adds	r3, r7, #6
   1f732:	1c0a      	adds	r2, r1, #0
   1f734:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f736:	1dfb      	adds	r3, r7, #7
   1f738:	781b      	ldrb	r3, [r3, #0]
   1f73a:	4a04      	ldr	r2, [pc, #16]	; (1f74c <sd_mmc_unload+0x28>)
   1f73c:	1db9      	adds	r1, r7, #6
   1f73e:	7809      	ldrb	r1, [r1, #0]
   1f740:	54d1      	strb	r1, [r2, r3]
	return true;
   1f742:	2301      	movs	r3, #1
}
   1f744:	0018      	movs	r0, r3
   1f746:	46bd      	mov	sp, r7
   1f748:	b002      	add	sp, #8
   1f74a:	bd80      	pop	{r7, pc}
   1f74c:	20004248 	.word	0x20004248

0001f750 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f750:	b580      	push	{r7, lr}
   1f752:	b082      	sub	sp, #8
   1f754:	af00      	add	r7, sp, #0
   1f756:	0002      	movs	r2, r0
   1f758:	1dfb      	adds	r3, r7, #7
   1f75a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f75c:	1dfb      	adds	r3, r7, #7
   1f75e:	781b      	ldrb	r3, [r3, #0]
   1f760:	0019      	movs	r1, r3
   1f762:	2000      	movs	r0, #0
   1f764:	4b03      	ldr	r3, [pc, #12]	; (1f774 <sd_mmc_unload_0+0x24>)
   1f766:	4798      	blx	r3
   1f768:	0003      	movs	r3, r0
}
   1f76a:	0018      	movs	r0, r3
   1f76c:	46bd      	mov	sp, r7
   1f76e:	b002      	add	sp, #8
   1f770:	bd80      	pop	{r7, pc}
   1f772:	46c0      	nop			; (mov r8, r8)
   1f774:	0001f725 	.word	0x0001f725

0001f778 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f778:	b580      	push	{r7, lr}
   1f77a:	b082      	sub	sp, #8
   1f77c:	af00      	add	r7, sp, #0
   1f77e:	0002      	movs	r2, r0
   1f780:	1dfb      	adds	r3, r7, #7
   1f782:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f784:	1dfb      	adds	r3, r7, #7
   1f786:	781b      	ldrb	r3, [r3, #0]
   1f788:	0018      	movs	r0, r3
   1f78a:	4b03      	ldr	r3, [pc, #12]	; (1f798 <sd_mmc_wr_protect+0x20>)
   1f78c:	4798      	blx	r3
   1f78e:	0003      	movs	r3, r0
}
   1f790:	0018      	movs	r0, r3
   1f792:	46bd      	mov	sp, r7
   1f794:	b002      	add	sp, #8
   1f796:	bd80      	pop	{r7, pc}
   1f798:	0001f295 	.word	0x0001f295

0001f79c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f79c:	b580      	push	{r7, lr}
   1f79e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f7a0:	2000      	movs	r0, #0
   1f7a2:	4b03      	ldr	r3, [pc, #12]	; (1f7b0 <sd_mmc_wr_protect_0+0x14>)
   1f7a4:	4798      	blx	r3
   1f7a6:	0003      	movs	r3, r0
}
   1f7a8:	0018      	movs	r0, r3
   1f7aa:	46bd      	mov	sp, r7
   1f7ac:	bd80      	pop	{r7, pc}
   1f7ae:	46c0      	nop			; (mov r8, r8)
   1f7b0:	0001f779 	.word	0x0001f779

0001f7b4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f7b4:	b580      	push	{r7, lr}
   1f7b6:	b082      	sub	sp, #8
   1f7b8:	af00      	add	r7, sp, #0
   1f7ba:	0002      	movs	r2, r0
   1f7bc:	1dfb      	adds	r3, r7, #7
   1f7be:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f7c0:	2301      	movs	r3, #1
}
   1f7c2:	0018      	movs	r0, r3
   1f7c4:	46bd      	mov	sp, r7
   1f7c6:	b002      	add	sp, #8
   1f7c8:	bd80      	pop	{r7, pc}
	...

0001f7cc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f7cc:	b580      	push	{r7, lr}
   1f7ce:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f7d0:	2000      	movs	r0, #0
   1f7d2:	4b03      	ldr	r3, [pc, #12]	; (1f7e0 <sd_mmc_removal_0+0x14>)
   1f7d4:	4798      	blx	r3
   1f7d6:	0003      	movs	r3, r0
}
   1f7d8:	0018      	movs	r0, r3
   1f7da:	46bd      	mov	sp, r7
   1f7dc:	bd80      	pop	{r7, pc}
   1f7de:	46c0      	nop			; (mov r8, r8)
   1f7e0:	0001f7b5 	.word	0x0001f7b5

0001f7e4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f7e4:	b580      	push	{r7, lr}
   1f7e6:	b084      	sub	sp, #16
   1f7e8:	af00      	add	r7, sp, #0
   1f7ea:	60b9      	str	r1, [r7, #8]
   1f7ec:	607a      	str	r2, [r7, #4]
   1f7ee:	230f      	movs	r3, #15
   1f7f0:	18fb      	adds	r3, r7, r3
   1f7f2:	1c02      	adds	r2, r0, #0
   1f7f4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f7f6:	68b9      	ldr	r1, [r7, #8]
   1f7f8:	230f      	movs	r3, #15
   1f7fa:	18fb      	adds	r3, r7, r3
   1f7fc:	781b      	ldrb	r3, [r3, #0]
   1f7fe:	2201      	movs	r2, #1
   1f800:	0018      	movs	r0, r3
   1f802:	4b10      	ldr	r3, [pc, #64]	; (1f844 <sd_mmc_mem_2_ram+0x60>)
   1f804:	4798      	blx	r3
   1f806:	1e03      	subs	r3, r0, #0
   1f808:	d005      	beq.n	1f816 <sd_mmc_mem_2_ram+0x32>
   1f80a:	2b02      	cmp	r3, #2
   1f80c:	d101      	bne.n	1f812 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f80e:	2302      	movs	r3, #2
   1f810:	e013      	b.n	1f83a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f812:	2301      	movs	r3, #1
   1f814:	e011      	b.n	1f83a <sd_mmc_mem_2_ram+0x56>
		break;
   1f816:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f818:	687b      	ldr	r3, [r7, #4]
   1f81a:	2101      	movs	r1, #1
   1f81c:	0018      	movs	r0, r3
   1f81e:	4b0a      	ldr	r3, [pc, #40]	; (1f848 <sd_mmc_mem_2_ram+0x64>)
   1f820:	4798      	blx	r3
   1f822:	1e03      	subs	r3, r0, #0
   1f824:	d001      	beq.n	1f82a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f826:	2301      	movs	r3, #1
   1f828:	e007      	b.n	1f83a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f82a:	2000      	movs	r0, #0
   1f82c:	4b07      	ldr	r3, [pc, #28]	; (1f84c <sd_mmc_mem_2_ram+0x68>)
   1f82e:	4798      	blx	r3
   1f830:	1e03      	subs	r3, r0, #0
   1f832:	d001      	beq.n	1f838 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f834:	2301      	movs	r3, #1
   1f836:	e000      	b.n	1f83a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f838:	2300      	movs	r3, #0
}
   1f83a:	0018      	movs	r0, r3
   1f83c:	46bd      	mov	sp, r7
   1f83e:	b004      	add	sp, #16
   1f840:	bd80      	pop	{r7, pc}
   1f842:	46c0      	nop			; (mov r8, r8)
   1f844:	0001f2ad 	.word	0x0001f2ad
   1f848:	0001f399 	.word	0x0001f399
   1f84c:	0001f3f1 	.word	0x0001f3f1

0001f850 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f850:	b580      	push	{r7, lr}
   1f852:	b082      	sub	sp, #8
   1f854:	af00      	add	r7, sp, #0
   1f856:	6078      	str	r0, [r7, #4]
   1f858:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f85a:	683a      	ldr	r2, [r7, #0]
   1f85c:	687b      	ldr	r3, [r7, #4]
   1f85e:	0019      	movs	r1, r3
   1f860:	2000      	movs	r0, #0
   1f862:	4b03      	ldr	r3, [pc, #12]	; (1f870 <sd_mmc_mem_2_ram_0+0x20>)
   1f864:	4798      	blx	r3
   1f866:	0003      	movs	r3, r0
}
   1f868:	0018      	movs	r0, r3
   1f86a:	46bd      	mov	sp, r7
   1f86c:	b002      	add	sp, #8
   1f86e:	bd80      	pop	{r7, pc}
   1f870:	0001f7e5 	.word	0x0001f7e5

0001f874 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f874:	b580      	push	{r7, lr}
   1f876:	b084      	sub	sp, #16
   1f878:	af00      	add	r7, sp, #0
   1f87a:	60b9      	str	r1, [r7, #8]
   1f87c:	607a      	str	r2, [r7, #4]
   1f87e:	230f      	movs	r3, #15
   1f880:	18fb      	adds	r3, r7, r3
   1f882:	1c02      	adds	r2, r0, #0
   1f884:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f886:	68b9      	ldr	r1, [r7, #8]
   1f888:	230f      	movs	r3, #15
   1f88a:	18fb      	adds	r3, r7, r3
   1f88c:	781b      	ldrb	r3, [r3, #0]
   1f88e:	2201      	movs	r2, #1
   1f890:	0018      	movs	r0, r3
   1f892:	4b10      	ldr	r3, [pc, #64]	; (1f8d4 <sd_mmc_ram_2_mem+0x60>)
   1f894:	4798      	blx	r3
   1f896:	1e03      	subs	r3, r0, #0
   1f898:	d005      	beq.n	1f8a6 <sd_mmc_ram_2_mem+0x32>
   1f89a:	2b02      	cmp	r3, #2
   1f89c:	d101      	bne.n	1f8a2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f89e:	2302      	movs	r3, #2
   1f8a0:	e013      	b.n	1f8ca <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f8a2:	2301      	movs	r3, #1
   1f8a4:	e011      	b.n	1f8ca <sd_mmc_ram_2_mem+0x56>
		break;
   1f8a6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f8a8:	687b      	ldr	r3, [r7, #4]
   1f8aa:	2101      	movs	r1, #1
   1f8ac:	0018      	movs	r0, r3
   1f8ae:	4b0a      	ldr	r3, [pc, #40]	; (1f8d8 <sd_mmc_ram_2_mem+0x64>)
   1f8b0:	4798      	blx	r3
   1f8b2:	1e03      	subs	r3, r0, #0
   1f8b4:	d001      	beq.n	1f8ba <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f8b6:	2301      	movs	r3, #1
   1f8b8:	e007      	b.n	1f8ca <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f8ba:	2000      	movs	r0, #0
   1f8bc:	4b07      	ldr	r3, [pc, #28]	; (1f8dc <sd_mmc_ram_2_mem+0x68>)
   1f8be:	4798      	blx	r3
   1f8c0:	1e03      	subs	r3, r0, #0
   1f8c2:	d001      	beq.n	1f8c8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f8c4:	2301      	movs	r3, #1
   1f8c6:	e000      	b.n	1f8ca <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f8c8:	2300      	movs	r3, #0
}
   1f8ca:	0018      	movs	r0, r3
   1f8cc:	46bd      	mov	sp, r7
   1f8ce:	b004      	add	sp, #16
   1f8d0:	bd80      	pop	{r7, pc}
   1f8d2:	46c0      	nop			; (mov r8, r8)
   1f8d4:	0001f489 	.word	0x0001f489
   1f8d8:	0001f571 	.word	0x0001f571
   1f8dc:	0001f5c9 	.word	0x0001f5c9

0001f8e0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f8e0:	b580      	push	{r7, lr}
   1f8e2:	b082      	sub	sp, #8
   1f8e4:	af00      	add	r7, sp, #0
   1f8e6:	6078      	str	r0, [r7, #4]
   1f8e8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f8ea:	683a      	ldr	r2, [r7, #0]
   1f8ec:	687b      	ldr	r3, [r7, #4]
   1f8ee:	0019      	movs	r1, r3
   1f8f0:	2000      	movs	r0, #0
   1f8f2:	4b03      	ldr	r3, [pc, #12]	; (1f900 <sd_mmc_ram_2_mem_0+0x20>)
   1f8f4:	4798      	blx	r3
   1f8f6:	0003      	movs	r3, r0
}
   1f8f8:	0018      	movs	r0, r3
   1f8fa:	46bd      	mov	sp, r7
   1f8fc:	b002      	add	sp, #8
   1f8fe:	bd80      	pop	{r7, pc}
   1f900:	0001f875 	.word	0x0001f875

0001f904 <system_pinmux_get_group_from_gpio_pin>:
{
   1f904:	b580      	push	{r7, lr}
   1f906:	b084      	sub	sp, #16
   1f908:	af00      	add	r7, sp, #0
   1f90a:	0002      	movs	r2, r0
   1f90c:	1dfb      	adds	r3, r7, #7
   1f90e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f910:	230f      	movs	r3, #15
   1f912:	18fb      	adds	r3, r7, r3
   1f914:	1dfa      	adds	r2, r7, #7
   1f916:	7812      	ldrb	r2, [r2, #0]
   1f918:	09d2      	lsrs	r2, r2, #7
   1f91a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f91c:	230e      	movs	r3, #14
   1f91e:	18fb      	adds	r3, r7, r3
   1f920:	1dfa      	adds	r2, r7, #7
   1f922:	7812      	ldrb	r2, [r2, #0]
   1f924:	0952      	lsrs	r2, r2, #5
   1f926:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f928:	4b0d      	ldr	r3, [pc, #52]	; (1f960 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f92a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f92c:	230f      	movs	r3, #15
   1f92e:	18fb      	adds	r3, r7, r3
   1f930:	781b      	ldrb	r3, [r3, #0]
   1f932:	2b00      	cmp	r3, #0
   1f934:	d10f      	bne.n	1f956 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f936:	230f      	movs	r3, #15
   1f938:	18fb      	adds	r3, r7, r3
   1f93a:	781b      	ldrb	r3, [r3, #0]
   1f93c:	009b      	lsls	r3, r3, #2
   1f93e:	2210      	movs	r2, #16
   1f940:	4694      	mov	ip, r2
   1f942:	44bc      	add	ip, r7
   1f944:	4463      	add	r3, ip
   1f946:	3b08      	subs	r3, #8
   1f948:	681a      	ldr	r2, [r3, #0]
   1f94a:	230e      	movs	r3, #14
   1f94c:	18fb      	adds	r3, r7, r3
   1f94e:	781b      	ldrb	r3, [r3, #0]
   1f950:	01db      	lsls	r3, r3, #7
   1f952:	18d3      	adds	r3, r2, r3
   1f954:	e000      	b.n	1f958 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f956:	2300      	movs	r3, #0
}
   1f958:	0018      	movs	r0, r3
   1f95a:	46bd      	mov	sp, r7
   1f95c:	b004      	add	sp, #16
   1f95e:	bd80      	pop	{r7, pc}
   1f960:	41004400 	.word	0x41004400

0001f964 <system_interrupt_enable>:
{
   1f964:	b580      	push	{r7, lr}
   1f966:	b082      	sub	sp, #8
   1f968:	af00      	add	r7, sp, #0
   1f96a:	0002      	movs	r2, r0
   1f96c:	1dfb      	adds	r3, r7, #7
   1f96e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f970:	4b06      	ldr	r3, [pc, #24]	; (1f98c <system_interrupt_enable+0x28>)
   1f972:	1dfa      	adds	r2, r7, #7
   1f974:	7812      	ldrb	r2, [r2, #0]
   1f976:	0011      	movs	r1, r2
   1f978:	221f      	movs	r2, #31
   1f97a:	400a      	ands	r2, r1
   1f97c:	2101      	movs	r1, #1
   1f97e:	4091      	lsls	r1, r2
   1f980:	000a      	movs	r2, r1
   1f982:	601a      	str	r2, [r3, #0]
}
   1f984:	46c0      	nop			; (mov r8, r8)
   1f986:	46bd      	mov	sp, r7
   1f988:	b002      	add	sp, #8
   1f98a:	bd80      	pop	{r7, pc}
   1f98c:	e000e100 	.word	0xe000e100

0001f990 <port_get_group_from_gpio_pin>:
{
   1f990:	b580      	push	{r7, lr}
   1f992:	b082      	sub	sp, #8
   1f994:	af00      	add	r7, sp, #0
   1f996:	0002      	movs	r2, r0
   1f998:	1dfb      	adds	r3, r7, #7
   1f99a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f99c:	1dfb      	adds	r3, r7, #7
   1f99e:	781b      	ldrb	r3, [r3, #0]
   1f9a0:	0018      	movs	r0, r3
   1f9a2:	4b03      	ldr	r3, [pc, #12]	; (1f9b0 <port_get_group_from_gpio_pin+0x20>)
   1f9a4:	4798      	blx	r3
   1f9a6:	0003      	movs	r3, r0
}
   1f9a8:	0018      	movs	r0, r3
   1f9aa:	46bd      	mov	sp, r7
   1f9ac:	b002      	add	sp, #8
   1f9ae:	bd80      	pop	{r7, pc}
   1f9b0:	0001f905 	.word	0x0001f905

0001f9b4 <port_get_config_defaults>:
{
   1f9b4:	b580      	push	{r7, lr}
   1f9b6:	b082      	sub	sp, #8
   1f9b8:	af00      	add	r7, sp, #0
   1f9ba:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f9bc:	687b      	ldr	r3, [r7, #4]
   1f9be:	2200      	movs	r2, #0
   1f9c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f9c2:	687b      	ldr	r3, [r7, #4]
   1f9c4:	2201      	movs	r2, #1
   1f9c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f9c8:	687b      	ldr	r3, [r7, #4]
   1f9ca:	2200      	movs	r2, #0
   1f9cc:	709a      	strb	r2, [r3, #2]
}
   1f9ce:	46c0      	nop			; (mov r8, r8)
   1f9d0:	46bd      	mov	sp, r7
   1f9d2:	b002      	add	sp, #8
   1f9d4:	bd80      	pop	{r7, pc}
	...

0001f9d8 <port_pin_set_output_level>:
{
   1f9d8:	b580      	push	{r7, lr}
   1f9da:	b084      	sub	sp, #16
   1f9dc:	af00      	add	r7, sp, #0
   1f9de:	0002      	movs	r2, r0
   1f9e0:	1dfb      	adds	r3, r7, #7
   1f9e2:	701a      	strb	r2, [r3, #0]
   1f9e4:	1dbb      	adds	r3, r7, #6
   1f9e6:	1c0a      	adds	r2, r1, #0
   1f9e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f9ea:	1dfb      	adds	r3, r7, #7
   1f9ec:	781b      	ldrb	r3, [r3, #0]
   1f9ee:	0018      	movs	r0, r3
   1f9f0:	4b0d      	ldr	r3, [pc, #52]	; (1fa28 <port_pin_set_output_level+0x50>)
   1f9f2:	4798      	blx	r3
   1f9f4:	0003      	movs	r3, r0
   1f9f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f9f8:	1dfb      	adds	r3, r7, #7
   1f9fa:	781b      	ldrb	r3, [r3, #0]
   1f9fc:	221f      	movs	r2, #31
   1f9fe:	4013      	ands	r3, r2
   1fa00:	2201      	movs	r2, #1
   1fa02:	409a      	lsls	r2, r3
   1fa04:	0013      	movs	r3, r2
   1fa06:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fa08:	1dbb      	adds	r3, r7, #6
   1fa0a:	781b      	ldrb	r3, [r3, #0]
   1fa0c:	2b00      	cmp	r3, #0
   1fa0e:	d003      	beq.n	1fa18 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fa10:	68fb      	ldr	r3, [r7, #12]
   1fa12:	68ba      	ldr	r2, [r7, #8]
   1fa14:	619a      	str	r2, [r3, #24]
}
   1fa16:	e002      	b.n	1fa1e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fa18:	68fb      	ldr	r3, [r7, #12]
   1fa1a:	68ba      	ldr	r2, [r7, #8]
   1fa1c:	615a      	str	r2, [r3, #20]
}
   1fa1e:	46c0      	nop			; (mov r8, r8)
   1fa20:	46bd      	mov	sp, r7
   1fa22:	b004      	add	sp, #16
   1fa24:	bd80      	pop	{r7, pc}
   1fa26:	46c0      	nop			; (mov r8, r8)
   1fa28:	0001f991 	.word	0x0001f991

0001fa2c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1fa2c:	b580      	push	{r7, lr}
   1fa2e:	b084      	sub	sp, #16
   1fa30:	af00      	add	r7, sp, #0
   1fa32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fa34:	687b      	ldr	r3, [r7, #4]
   1fa36:	681b      	ldr	r3, [r3, #0]
   1fa38:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1fa3a:	68fb      	ldr	r3, [r7, #12]
   1fa3c:	69db      	ldr	r3, [r3, #28]
   1fa3e:	1e5a      	subs	r2, r3, #1
   1fa40:	4193      	sbcs	r3, r2
   1fa42:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1fa44:	0018      	movs	r0, r3
   1fa46:	46bd      	mov	sp, r7
   1fa48:	b004      	add	sp, #16
   1fa4a:	bd80      	pop	{r7, pc}

0001fa4c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1fa4c:	b580      	push	{r7, lr}
   1fa4e:	b082      	sub	sp, #8
   1fa50:	af00      	add	r7, sp, #0
   1fa52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1fa54:	687b      	ldr	r3, [r7, #4]
   1fa56:	2201      	movs	r2, #1
   1fa58:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1fa5a:	687b      	ldr	r3, [r7, #4]
   1fa5c:	2200      	movs	r2, #0
   1fa5e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1fa60:	687b      	ldr	r3, [r7, #4]
   1fa62:	2200      	movs	r2, #0
   1fa64:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1fa66:	687b      	ldr	r3, [r7, #4]
   1fa68:	22c0      	movs	r2, #192	; 0xc0
   1fa6a:	0392      	lsls	r2, r2, #14
   1fa6c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1fa6e:	687b      	ldr	r3, [r7, #4]
   1fa70:	2200      	movs	r2, #0
   1fa72:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1fa74:	687b      	ldr	r3, [r7, #4]
   1fa76:	2200      	movs	r2, #0
   1fa78:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1fa7a:	687b      	ldr	r3, [r7, #4]
   1fa7c:	2201      	movs	r2, #1
   1fa7e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1fa80:	687b      	ldr	r3, [r7, #4]
   1fa82:	2201      	movs	r2, #1
   1fa84:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1fa86:	687b      	ldr	r3, [r7, #4]
   1fa88:	2200      	movs	r2, #0
   1fa8a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1fa8c:	687b      	ldr	r3, [r7, #4]
   1fa8e:	2224      	movs	r2, #36	; 0x24
   1fa90:	2100      	movs	r1, #0
   1fa92:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1fa94:	687b      	ldr	r3, [r7, #4]
   1fa96:	3318      	adds	r3, #24
   1fa98:	220c      	movs	r2, #12
   1fa9a:	2100      	movs	r1, #0
   1fa9c:	0018      	movs	r0, r3
   1fa9e:	4b0a      	ldr	r3, [pc, #40]	; (1fac8 <spi_get_config_defaults+0x7c>)
   1faa0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1faa2:	687b      	ldr	r3, [r7, #4]
   1faa4:	4a09      	ldr	r2, [pc, #36]	; (1facc <spi_get_config_defaults+0x80>)
   1faa6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1faa8:	687b      	ldr	r3, [r7, #4]
   1faaa:	2200      	movs	r2, #0
   1faac:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1faae:	687b      	ldr	r3, [r7, #4]
   1fab0:	2200      	movs	r2, #0
   1fab2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1fab4:	687b      	ldr	r3, [r7, #4]
   1fab6:	2200      	movs	r2, #0
   1fab8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1faba:	687b      	ldr	r3, [r7, #4]
   1fabc:	2200      	movs	r2, #0
   1fabe:	635a      	str	r2, [r3, #52]	; 0x34

};
   1fac0:	46c0      	nop			; (mov r8, r8)
   1fac2:	46bd      	mov	sp, r7
   1fac4:	b002      	add	sp, #8
   1fac6:	bd80      	pop	{r7, pc}
   1fac8:	00034e13 	.word	0x00034e13
   1facc:	000186a0 	.word	0x000186a0

0001fad0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1fad0:	b580      	push	{r7, lr}
   1fad2:	b082      	sub	sp, #8
   1fad4:	af00      	add	r7, sp, #0
   1fad6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1fad8:	687b      	ldr	r3, [r7, #4]
   1fada:	220a      	movs	r2, #10
   1fadc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1fade:	687b      	ldr	r3, [r7, #4]
   1fae0:	2200      	movs	r2, #0
   1fae2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1fae4:	687b      	ldr	r3, [r7, #4]
   1fae6:	2200      	movs	r2, #0
   1fae8:	709a      	strb	r2, [r3, #2]
}
   1faea:	46c0      	nop			; (mov r8, r8)
   1faec:	46bd      	mov	sp, r7
   1faee:	b002      	add	sp, #8
   1faf0:	bd80      	pop	{r7, pc}
	...

0001faf4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1faf4:	b580      	push	{r7, lr}
   1faf6:	b084      	sub	sp, #16
   1faf8:	af00      	add	r7, sp, #0
   1fafa:	6078      	str	r0, [r7, #4]
   1fafc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1fafe:	683b      	ldr	r3, [r7, #0]
   1fb00:	781a      	ldrb	r2, [r3, #0]
   1fb02:	687b      	ldr	r3, [r7, #4]
   1fb04:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1fb06:	683b      	ldr	r3, [r7, #0]
   1fb08:	785a      	ldrb	r2, [r3, #1]
   1fb0a:	687b      	ldr	r3, [r7, #4]
   1fb0c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1fb0e:	683b      	ldr	r3, [r7, #0]
   1fb10:	789a      	ldrb	r2, [r3, #2]
   1fb12:	687b      	ldr	r3, [r7, #4]
   1fb14:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1fb16:	230c      	movs	r3, #12
   1fb18:	18fb      	adds	r3, r7, r3
   1fb1a:	0018      	movs	r0, r3
   1fb1c:	4b0b      	ldr	r3, [pc, #44]	; (1fb4c <spi_attach_slave+0x58>)
   1fb1e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1fb20:	230c      	movs	r3, #12
   1fb22:	18fb      	adds	r3, r7, r3
   1fb24:	2201      	movs	r2, #1
   1fb26:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1fb28:	687b      	ldr	r3, [r7, #4]
   1fb2a:	781b      	ldrb	r3, [r3, #0]
   1fb2c:	220c      	movs	r2, #12
   1fb2e:	18ba      	adds	r2, r7, r2
   1fb30:	0011      	movs	r1, r2
   1fb32:	0018      	movs	r0, r3
   1fb34:	4b06      	ldr	r3, [pc, #24]	; (1fb50 <spi_attach_slave+0x5c>)
   1fb36:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1fb38:	687b      	ldr	r3, [r7, #4]
   1fb3a:	781b      	ldrb	r3, [r3, #0]
   1fb3c:	2101      	movs	r1, #1
   1fb3e:	0018      	movs	r0, r3
   1fb40:	4b04      	ldr	r3, [pc, #16]	; (1fb54 <spi_attach_slave+0x60>)
   1fb42:	4798      	blx	r3
}
   1fb44:	46c0      	nop			; (mov r8, r8)
   1fb46:	46bd      	mov	sp, r7
   1fb48:	b004      	add	sp, #16
   1fb4a:	bd80      	pop	{r7, pc}
   1fb4c:	0001f9b5 	.word	0x0001f9b5
   1fb50:	00026dc1 	.word	0x00026dc1
   1fb54:	0001f9d9 	.word	0x0001f9d9

0001fb58 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1fb58:	b580      	push	{r7, lr}
   1fb5a:	b084      	sub	sp, #16
   1fb5c:	af00      	add	r7, sp, #0
   1fb5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb60:	687b      	ldr	r3, [r7, #4]
   1fb62:	681b      	ldr	r3, [r3, #0]
   1fb64:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fb66:	687b      	ldr	r3, [r7, #4]
   1fb68:	681b      	ldr	r3, [r3, #0]
   1fb6a:	0018      	movs	r0, r3
   1fb6c:	4b0b      	ldr	r3, [pc, #44]	; (1fb9c <spi_enable+0x44>)
   1fb6e:	4798      	blx	r3
   1fb70:	0003      	movs	r3, r0
   1fb72:	0018      	movs	r0, r3
   1fb74:	4b0a      	ldr	r3, [pc, #40]	; (1fba0 <spi_enable+0x48>)
   1fb76:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1fb78:	46c0      	nop			; (mov r8, r8)
   1fb7a:	687b      	ldr	r3, [r7, #4]
   1fb7c:	0018      	movs	r0, r3
   1fb7e:	4b09      	ldr	r3, [pc, #36]	; (1fba4 <spi_enable+0x4c>)
   1fb80:	4798      	blx	r3
   1fb82:	1e03      	subs	r3, r0, #0
   1fb84:	d1f9      	bne.n	1fb7a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1fb86:	68fb      	ldr	r3, [r7, #12]
   1fb88:	681b      	ldr	r3, [r3, #0]
   1fb8a:	2202      	movs	r2, #2
   1fb8c:	431a      	orrs	r2, r3
   1fb8e:	68fb      	ldr	r3, [r7, #12]
   1fb90:	601a      	str	r2, [r3, #0]
}
   1fb92:	46c0      	nop			; (mov r8, r8)
   1fb94:	46bd      	mov	sp, r7
   1fb96:	b004      	add	sp, #16
   1fb98:	bd80      	pop	{r7, pc}
   1fb9a:	46c0      	nop			; (mov r8, r8)
   1fb9c:	00027a91 	.word	0x00027a91
   1fba0:	0001f965 	.word	0x0001f965
   1fba4:	0001fa2d 	.word	0x0001fa2d

0001fba8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1fba8:	b580      	push	{r7, lr}
   1fbaa:	b084      	sub	sp, #16
   1fbac:	af00      	add	r7, sp, #0
   1fbae:	6078      	str	r0, [r7, #4]
   1fbb0:	000a      	movs	r2, r1
   1fbb2:	1cfb      	adds	r3, r7, #3
   1fbb4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1fbb6:	230f      	movs	r3, #15
   1fbb8:	18fb      	adds	r3, r7, r3
   1fbba:	2200      	movs	r2, #0
   1fbbc:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1fbbe:	e038      	b.n	1fc32 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1fbc0:	687b      	ldr	r3, [r7, #4]
   1fbc2:	1c5a      	adds	r2, r3, #1
   1fbc4:	607a      	str	r2, [r7, #4]
   1fbc6:	220e      	movs	r2, #14
   1fbc8:	18ba      	adds	r2, r7, r2
   1fbca:	781b      	ldrb	r3, [r3, #0]
   1fbcc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fbce:	230d      	movs	r3, #13
   1fbd0:	18fb      	adds	r3, r7, r3
   1fbd2:	2200      	movs	r2, #0
   1fbd4:	701a      	strb	r2, [r3, #0]
   1fbd6:	e027      	b.n	1fc28 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1fbd8:	230f      	movs	r3, #15
   1fbda:	18fa      	adds	r2, r7, r3
   1fbdc:	230f      	movs	r3, #15
   1fbde:	18fb      	adds	r3, r7, r3
   1fbe0:	781b      	ldrb	r3, [r3, #0]
   1fbe2:	18db      	adds	r3, r3, r3
   1fbe4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1fbe6:	230e      	movs	r3, #14
   1fbe8:	18fa      	adds	r2, r7, r3
   1fbea:	230f      	movs	r3, #15
   1fbec:	18fb      	adds	r3, r7, r3
   1fbee:	7812      	ldrb	r2, [r2, #0]
   1fbf0:	781b      	ldrb	r3, [r3, #0]
   1fbf2:	4053      	eors	r3, r2
   1fbf4:	b2db      	uxtb	r3, r3
   1fbf6:	b25b      	sxtb	r3, r3
   1fbf8:	2b00      	cmp	r3, #0
   1fbfa:	da07      	bge.n	1fc0c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1fbfc:	230f      	movs	r3, #15
   1fbfe:	18fb      	adds	r3, r7, r3
   1fc00:	220f      	movs	r2, #15
   1fc02:	18ba      	adds	r2, r7, r2
   1fc04:	7812      	ldrb	r2, [r2, #0]
   1fc06:	2109      	movs	r1, #9
   1fc08:	404a      	eors	r2, r1
   1fc0a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1fc0c:	230e      	movs	r3, #14
   1fc0e:	18fa      	adds	r2, r7, r3
   1fc10:	230e      	movs	r3, #14
   1fc12:	18fb      	adds	r3, r7, r3
   1fc14:	781b      	ldrb	r3, [r3, #0]
   1fc16:	18db      	adds	r3, r3, r3
   1fc18:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fc1a:	230d      	movs	r3, #13
   1fc1c:	18fb      	adds	r3, r7, r3
   1fc1e:	781a      	ldrb	r2, [r3, #0]
   1fc20:	230d      	movs	r3, #13
   1fc22:	18fb      	adds	r3, r7, r3
   1fc24:	3201      	adds	r2, #1
   1fc26:	701a      	strb	r2, [r3, #0]
   1fc28:	230d      	movs	r3, #13
   1fc2a:	18fb      	adds	r3, r7, r3
   1fc2c:	781b      	ldrb	r3, [r3, #0]
   1fc2e:	2b07      	cmp	r3, #7
   1fc30:	d9d2      	bls.n	1fbd8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1fc32:	1cfb      	adds	r3, r7, #3
   1fc34:	781b      	ldrb	r3, [r3, #0]
   1fc36:	1cfa      	adds	r2, r7, #3
   1fc38:	1e59      	subs	r1, r3, #1
   1fc3a:	7011      	strb	r1, [r2, #0]
   1fc3c:	2b00      	cmp	r3, #0
   1fc3e:	d1bf      	bne.n	1fbc0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1fc40:	230f      	movs	r3, #15
   1fc42:	18fb      	adds	r3, r7, r3
   1fc44:	781b      	ldrb	r3, [r3, #0]
   1fc46:	005b      	lsls	r3, r3, #1
   1fc48:	b25b      	sxtb	r3, r3
   1fc4a:	2201      	movs	r2, #1
   1fc4c:	4313      	orrs	r3, r2
   1fc4e:	b25a      	sxtb	r2, r3
   1fc50:	230f      	movs	r3, #15
   1fc52:	18fb      	adds	r3, r7, r3
   1fc54:	701a      	strb	r2, [r3, #0]
	return crc;
   1fc56:	230f      	movs	r3, #15
   1fc58:	18fb      	adds	r3, r7, r3
   1fc5a:	781b      	ldrb	r3, [r3, #0]
}
   1fc5c:	0018      	movs	r0, r3
   1fc5e:	46bd      	mov	sp, r7
   1fc60:	b004      	add	sp, #16
   1fc62:	bd80      	pop	{r7, pc}

0001fc64 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1fc64:	b590      	push	{r4, r7, lr}
   1fc66:	b083      	sub	sp, #12
   1fc68:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1fc6a:	1c7b      	adds	r3, r7, #1
   1fc6c:	22ff      	movs	r2, #255	; 0xff
   1fc6e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1fc70:	1cbb      	adds	r3, r7, #2
   1fc72:	22ff      	movs	r2, #255	; 0xff
   1fc74:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fc76:	1cbb      	adds	r3, r7, #2
   1fc78:	881b      	ldrh	r3, [r3, #0]
   1fc7a:	1c79      	adds	r1, r7, #1
   1fc7c:	4811      	ldr	r0, [pc, #68]	; (1fcc4 <sd_mmc_spi_wait_busy+0x60>)
   1fc7e:	2201      	movs	r2, #1
   1fc80:	4c11      	ldr	r4, [pc, #68]	; (1fcc8 <sd_mmc_spi_wait_busy+0x64>)
   1fc82:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1fc84:	4b11      	ldr	r3, [pc, #68]	; (1fccc <sd_mmc_spi_wait_busy+0x68>)
   1fc86:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fc88:	1cbb      	adds	r3, r7, #2
   1fc8a:	881b      	ldrh	r3, [r3, #0]
   1fc8c:	1c79      	adds	r1, r7, #1
   1fc8e:	480d      	ldr	r0, [pc, #52]	; (1fcc4 <sd_mmc_spi_wait_busy+0x60>)
   1fc90:	2201      	movs	r2, #1
   1fc92:	4c0d      	ldr	r4, [pc, #52]	; (1fcc8 <sd_mmc_spi_wait_busy+0x64>)
   1fc94:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fc96:	1cbb      	adds	r3, r7, #2
   1fc98:	881b      	ldrh	r3, [r3, #0]
   1fc9a:	1c79      	adds	r1, r7, #1
   1fc9c:	4809      	ldr	r0, [pc, #36]	; (1fcc4 <sd_mmc_spi_wait_busy+0x60>)
   1fc9e:	2201      	movs	r2, #1
   1fca0:	4c09      	ldr	r4, [pc, #36]	; (1fcc8 <sd_mmc_spi_wait_busy+0x64>)
   1fca2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1fca4:	687b      	ldr	r3, [r7, #4]
   1fca6:	1e5a      	subs	r2, r3, #1
   1fca8:	607a      	str	r2, [r7, #4]
   1fcaa:	2b00      	cmp	r3, #0
   1fcac:	d101      	bne.n	1fcb2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1fcae:	2300      	movs	r3, #0
   1fcb0:	e004      	b.n	1fcbc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1fcb2:	1c7b      	adds	r3, r7, #1
   1fcb4:	781b      	ldrb	r3, [r3, #0]
   1fcb6:	2bff      	cmp	r3, #255	; 0xff
   1fcb8:	d1ed      	bne.n	1fc96 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1fcba:	2301      	movs	r3, #1
}
   1fcbc:	0018      	movs	r0, r3
   1fcbe:	46bd      	mov	sp, r7
   1fcc0:	b003      	add	sp, #12
   1fcc2:	bd90      	pop	{r4, r7, pc}
   1fcc4:	2000424c 	.word	0x2000424c
   1fcc8:	000283d1 	.word	0x000283d1
   1fccc:	00030d40 	.word	0x00030d40

0001fcd0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1fcd0:	b590      	push	{r4, r7, lr}
   1fcd2:	b083      	sub	sp, #12
   1fcd4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1fcd6:	1cbb      	adds	r3, r7, #2
   1fcd8:	22ff      	movs	r2, #255	; 0xff
   1fcda:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1fcdc:	1c7b      	adds	r3, r7, #1
   1fcde:	2200      	movs	r2, #0
   1fce0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1fce2:	4b18      	ldr	r3, [pc, #96]	; (1fd44 <sd_mmc_spi_start_read_block+0x74>)
   1fce4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1fce6:	687b      	ldr	r3, [r7, #4]
   1fce8:	1e5a      	subs	r2, r3, #1
   1fcea:	607a      	str	r2, [r7, #4]
   1fcec:	2b00      	cmp	r3, #0
   1fcee:	d104      	bne.n	1fcfa <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1fcf0:	4b15      	ldr	r3, [pc, #84]	; (1fd48 <sd_mmc_spi_start_read_block+0x78>)
   1fcf2:	2204      	movs	r2, #4
   1fcf4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1fcf6:	2300      	movs	r3, #0
   1fcf8:	e020      	b.n	1fd3c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1fcfa:	1cbb      	adds	r3, r7, #2
   1fcfc:	881b      	ldrh	r3, [r3, #0]
   1fcfe:	1c79      	adds	r1, r7, #1
   1fd00:	4812      	ldr	r0, [pc, #72]	; (1fd4c <sd_mmc_spi_start_read_block+0x7c>)
   1fd02:	2201      	movs	r2, #1
   1fd04:	4c12      	ldr	r4, [pc, #72]	; (1fd50 <sd_mmc_spi_start_read_block+0x80>)
   1fd06:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1fd08:	1c7b      	adds	r3, r7, #1
   1fd0a:	781b      	ldrb	r3, [r3, #0]
   1fd0c:	001a      	movs	r2, r3
   1fd0e:	23f0      	movs	r3, #240	; 0xf0
   1fd10:	4013      	ands	r3, r2
   1fd12:	d10e      	bne.n	1fd32 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1fd14:	1c7b      	adds	r3, r7, #1
   1fd16:	781b      	ldrb	r3, [r3, #0]
   1fd18:	001a      	movs	r2, r3
   1fd1a:	2307      	movs	r3, #7
   1fd1c:	4013      	ands	r3, r2
   1fd1e:	d003      	beq.n	1fd28 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1fd20:	4b09      	ldr	r3, [pc, #36]	; (1fd48 <sd_mmc_spi_start_read_block+0x78>)
   1fd22:	2207      	movs	r2, #7
   1fd24:	701a      	strb	r2, [r3, #0]
   1fd26:	e002      	b.n	1fd2e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1fd28:	4b07      	ldr	r3, [pc, #28]	; (1fd48 <sd_mmc_spi_start_read_block+0x78>)
   1fd2a:	220b      	movs	r2, #11
   1fd2c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1fd2e:	2300      	movs	r3, #0
   1fd30:	e004      	b.n	1fd3c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1fd32:	1c7b      	adds	r3, r7, #1
   1fd34:	781b      	ldrb	r3, [r3, #0]
   1fd36:	2bfe      	cmp	r3, #254	; 0xfe
   1fd38:	d1d5      	bne.n	1fce6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1fd3a:	2301      	movs	r3, #1
}
   1fd3c:	0018      	movs	r0, r3
   1fd3e:	46bd      	mov	sp, r7
   1fd40:	b003      	add	sp, #12
   1fd42:	bd90      	pop	{r4, r7, pc}
   1fd44:	0007a120 	.word	0x0007a120
   1fd48:	2000428f 	.word	0x2000428f
   1fd4c:	2000424c 	.word	0x2000424c
   1fd50:	000283d1 	.word	0x000283d1

0001fd54 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1fd54:	b590      	push	{r4, r7, lr}
   1fd56:	b083      	sub	sp, #12
   1fd58:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1fd5a:	1dbb      	adds	r3, r7, #6
   1fd5c:	22ff      	movs	r2, #255	; 0xff
   1fd5e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1fd60:	1dbb      	adds	r3, r7, #6
   1fd62:	881b      	ldrh	r3, [r3, #0]
   1fd64:	1d39      	adds	r1, r7, #4
   1fd66:	4804      	ldr	r0, [pc, #16]	; (1fd78 <sd_mmc_spi_stop_read_block+0x24>)
   1fd68:	2202      	movs	r2, #2
   1fd6a:	4c04      	ldr	r4, [pc, #16]	; (1fd7c <sd_mmc_spi_stop_read_block+0x28>)
   1fd6c:	47a0      	blx	r4
			dummy);
}
   1fd6e:	46c0      	nop			; (mov r8, r8)
   1fd70:	46bd      	mov	sp, r7
   1fd72:	b003      	add	sp, #12
   1fd74:	bd90      	pop	{r4, r7, pc}
   1fd76:	46c0      	nop			; (mov r8, r8)
   1fd78:	2000424c 	.word	0x2000424c
   1fd7c:	000283d1 	.word	0x000283d1

0001fd80 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1fd80:	b580      	push	{r7, lr}
   1fd82:	b082      	sub	sp, #8
   1fd84:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1fd86:	1dfb      	adds	r3, r7, #7
   1fd88:	22ff      	movs	r2, #255	; 0xff
   1fd8a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1fd8c:	1df9      	adds	r1, r7, #7
   1fd8e:	4b0d      	ldr	r3, [pc, #52]	; (1fdc4 <sd_mmc_spi_start_write_block+0x44>)
   1fd90:	2201      	movs	r2, #1
   1fd92:	0018      	movs	r0, r3
   1fd94:	4b0c      	ldr	r3, [pc, #48]	; (1fdc8 <sd_mmc_spi_start_write_block+0x48>)
   1fd96:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1fd98:	4b0c      	ldr	r3, [pc, #48]	; (1fdcc <sd_mmc_spi_start_write_block+0x4c>)
   1fd9a:	881b      	ldrh	r3, [r3, #0]
   1fd9c:	2b01      	cmp	r3, #1
   1fd9e:	d103      	bne.n	1fda8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1fda0:	1dbb      	adds	r3, r7, #6
   1fda2:	22fe      	movs	r2, #254	; 0xfe
   1fda4:	701a      	strb	r2, [r3, #0]
   1fda6:	e002      	b.n	1fdae <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1fda8:	1dbb      	adds	r3, r7, #6
   1fdaa:	22fc      	movs	r2, #252	; 0xfc
   1fdac:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1fdae:	1db9      	adds	r1, r7, #6
   1fdb0:	4b04      	ldr	r3, [pc, #16]	; (1fdc4 <sd_mmc_spi_start_write_block+0x44>)
   1fdb2:	2201      	movs	r2, #1
   1fdb4:	0018      	movs	r0, r3
   1fdb6:	4b04      	ldr	r3, [pc, #16]	; (1fdc8 <sd_mmc_spi_start_write_block+0x48>)
   1fdb8:	4798      	blx	r3
}
   1fdba:	46c0      	nop			; (mov r8, r8)
   1fdbc:	46bd      	mov	sp, r7
   1fdbe:	b002      	add	sp, #8
   1fdc0:	bd80      	pop	{r7, pc}
   1fdc2:	46c0      	nop			; (mov r8, r8)
   1fdc4:	2000424c 	.word	0x2000424c
   1fdc8:	000285f5 	.word	0x000285f5
   1fdcc:	2000429a 	.word	0x2000429a

0001fdd0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1fdd0:	b590      	push	{r4, r7, lr}
   1fdd2:	b083      	sub	sp, #12
   1fdd4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1fdd6:	1dbb      	adds	r3, r7, #6
   1fdd8:	22ff      	movs	r2, #255	; 0xff
   1fdda:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1fddc:	1cbb      	adds	r3, r7, #2
   1fdde:	2201      	movs	r2, #1
   1fde0:	4252      	negs	r2, r2
   1fde2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1fde4:	1cb9      	adds	r1, r7, #2
   1fde6:	4b1b      	ldr	r3, [pc, #108]	; (1fe54 <sd_mmc_spi_stop_write_block+0x84>)
   1fde8:	2202      	movs	r2, #2
   1fdea:	0018      	movs	r0, r3
   1fdec:	4b1a      	ldr	r3, [pc, #104]	; (1fe58 <sd_mmc_spi_stop_write_block+0x88>)
   1fdee:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1fdf0:	1dbb      	adds	r3, r7, #6
   1fdf2:	881b      	ldrh	r3, [r3, #0]
   1fdf4:	1d79      	adds	r1, r7, #5
   1fdf6:	4817      	ldr	r0, [pc, #92]	; (1fe54 <sd_mmc_spi_stop_write_block+0x84>)
   1fdf8:	2201      	movs	r2, #1
   1fdfa:	4c18      	ldr	r4, [pc, #96]	; (1fe5c <sd_mmc_spi_stop_write_block+0x8c>)
   1fdfc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1fdfe:	1d7b      	adds	r3, r7, #5
   1fe00:	781b      	ldrb	r3, [r3, #0]
   1fe02:	001a      	movs	r2, r3
   1fe04:	2310      	movs	r3, #16
   1fe06:	4013      	ands	r3, r2
   1fe08:	d105      	bne.n	1fe16 <sd_mmc_spi_stop_write_block+0x46>
   1fe0a:	1d7b      	adds	r3, r7, #5
   1fe0c:	781b      	ldrb	r3, [r3, #0]
   1fe0e:	001a      	movs	r2, r3
   1fe10:	2301      	movs	r3, #1
   1fe12:	4013      	ands	r3, r2
   1fe14:	d104      	bne.n	1fe20 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fe16:	4b12      	ldr	r3, [pc, #72]	; (1fe60 <sd_mmc_spi_stop_write_block+0x90>)
   1fe18:	2201      	movs	r2, #1
   1fe1a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1fe1c:	2300      	movs	r3, #0
   1fe1e:	e014      	b.n	1fe4a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1fe20:	1d7b      	adds	r3, r7, #5
   1fe22:	781b      	ldrb	r3, [r3, #0]
   1fe24:	001a      	movs	r2, r3
   1fe26:	231e      	movs	r3, #30
   1fe28:	4013      	ands	r3, r2
   1fe2a:	2b04      	cmp	r3, #4
   1fe2c:	d00b      	beq.n	1fe46 <sd_mmc_spi_stop_write_block+0x76>
   1fe2e:	2b0a      	cmp	r3, #10
   1fe30:	d104      	bne.n	1fe3c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1fe32:	4b0b      	ldr	r3, [pc, #44]	; (1fe60 <sd_mmc_spi_stop_write_block+0x90>)
   1fe34:	2208      	movs	r2, #8
   1fe36:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fe38:	2300      	movs	r3, #0
   1fe3a:	e006      	b.n	1fe4a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1fe3c:	4b08      	ldr	r3, [pc, #32]	; (1fe60 <sd_mmc_spi_stop_write_block+0x90>)
   1fe3e:	220a      	movs	r2, #10
   1fe40:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fe42:	2300      	movs	r3, #0
   1fe44:	e001      	b.n	1fe4a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1fe46:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1fe48:	2301      	movs	r3, #1
}
   1fe4a:	0018      	movs	r0, r3
   1fe4c:	46bd      	mov	sp, r7
   1fe4e:	b003      	add	sp, #12
   1fe50:	bd90      	pop	{r4, r7, pc}
   1fe52:	46c0      	nop			; (mov r8, r8)
   1fe54:	2000424c 	.word	0x2000424c
   1fe58:	000285f5 	.word	0x000285f5
   1fe5c:	000283d1 	.word	0x000283d1
   1fe60:	2000428f 	.word	0x2000428f

0001fe64 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1fe64:	b590      	push	{r4, r7, lr}
   1fe66:	b083      	sub	sp, #12
   1fe68:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1fe6a:	4b1d      	ldr	r3, [pc, #116]	; (1fee0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fe6c:	881b      	ldrh	r3, [r3, #0]
   1fe6e:	2b01      	cmp	r3, #1
   1fe70:	d101      	bne.n	1fe76 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1fe72:	2301      	movs	r3, #1
   1fe74:	e030      	b.n	1fed8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1fe76:	4b1a      	ldr	r3, [pc, #104]	; (1fee0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fe78:	881b      	ldrh	r3, [r3, #0]
   1fe7a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1fe7c:	4b19      	ldr	r3, [pc, #100]	; (1fee4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1fe7e:	681a      	ldr	r2, [r3, #0]
   1fe80:	4b19      	ldr	r3, [pc, #100]	; (1fee8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1fe82:	881b      	ldrh	r3, [r3, #0]
   1fe84:	0019      	movs	r1, r3
   1fe86:	4b19      	ldr	r3, [pc, #100]	; (1feec <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1fe88:	0010      	movs	r0, r2
   1fe8a:	4798      	blx	r3
   1fe8c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1fe8e:	429c      	cmp	r4, r3
   1fe90:	d901      	bls.n	1fe96 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1fe92:	2301      	movs	r3, #1
   1fe94:	e020      	b.n	1fed8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1fe96:	1dfb      	adds	r3, r7, #7
   1fe98:	22ff      	movs	r2, #255	; 0xff
   1fe9a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1fe9c:	1df9      	adds	r1, r7, #7
   1fe9e:	4b14      	ldr	r3, [pc, #80]	; (1fef0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1fea0:	2201      	movs	r2, #1
   1fea2:	0018      	movs	r0, r3
   1fea4:	4b13      	ldr	r3, [pc, #76]	; (1fef4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1fea6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1fea8:	1dfb      	adds	r3, r7, #7
   1feaa:	22fd      	movs	r2, #253	; 0xfd
   1feac:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1feae:	1df9      	adds	r1, r7, #7
   1feb0:	4b0f      	ldr	r3, [pc, #60]	; (1fef0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1feb2:	2201      	movs	r2, #1
   1feb4:	0018      	movs	r0, r3
   1feb6:	4b0f      	ldr	r3, [pc, #60]	; (1fef4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1feb8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1feba:	4b0f      	ldr	r3, [pc, #60]	; (1fef8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1febc:	4798      	blx	r3
   1febe:	0003      	movs	r3, r0
   1fec0:	001a      	movs	r2, r3
   1fec2:	2301      	movs	r3, #1
   1fec4:	4053      	eors	r3, r2
   1fec6:	b2db      	uxtb	r3, r3
   1fec8:	2b00      	cmp	r3, #0
   1feca:	d004      	beq.n	1fed6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fecc:	4b0b      	ldr	r3, [pc, #44]	; (1fefc <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1fece:	2205      	movs	r2, #5
   1fed0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1fed2:	2300      	movs	r3, #0
   1fed4:	e000      	b.n	1fed8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1fed6:	2301      	movs	r3, #1
}
   1fed8:	0018      	movs	r0, r3
   1feda:	46bd      	mov	sp, r7
   1fedc:	b003      	add	sp, #12
   1fede:	bd90      	pop	{r4, r7, pc}
   1fee0:	2000429a 	.word	0x2000429a
   1fee4:	20004294 	.word	0x20004294
   1fee8:	20004298 	.word	0x20004298
   1feec:	00032d95 	.word	0x00032d95
   1fef0:	2000424c 	.word	0x2000424c
   1fef4:	000285f5 	.word	0x000285f5
   1fef8:	0001fc65 	.word	0x0001fc65
   1fefc:	2000428f 	.word	0x2000428f

0001ff00 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1ff00:	b580      	push	{r7, lr}
   1ff02:	b090      	sub	sp, #64	; 0x40
   1ff04:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ff06:	4b1f      	ldr	r3, [pc, #124]	; (1ff84 <sd_mmc_spi_init+0x84>)
   1ff08:	2200      	movs	r2, #0
   1ff0a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ff0c:	233c      	movs	r3, #60	; 0x3c
   1ff0e:	18fb      	adds	r3, r7, r3
   1ff10:	0018      	movs	r0, r3
   1ff12:	4b1d      	ldr	r3, [pc, #116]	; (1ff88 <sd_mmc_spi_init+0x88>)
   1ff14:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1ff16:	1d3b      	adds	r3, r7, #4
   1ff18:	0018      	movs	r0, r3
   1ff1a:	4b1c      	ldr	r3, [pc, #112]	; (1ff8c <sd_mmc_spi_init+0x8c>)
   1ff1c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1ff1e:	1d3b      	adds	r3, r7, #4
   1ff20:	2280      	movs	r2, #128	; 0x80
   1ff22:	0252      	lsls	r2, r2, #9
   1ff24:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1ff26:	1d3b      	adds	r3, r7, #4
   1ff28:	4a19      	ldr	r2, [pc, #100]	; (1ff90 <sd_mmc_spi_init+0x90>)
   1ff2a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1ff2c:	1d3b      	adds	r3, r7, #4
   1ff2e:	4a19      	ldr	r2, [pc, #100]	; (1ff94 <sd_mmc_spi_init+0x94>)
   1ff30:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1ff32:	1d3b      	adds	r3, r7, #4
   1ff34:	4a18      	ldr	r2, [pc, #96]	; (1ff98 <sd_mmc_spi_init+0x98>)
   1ff36:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1ff38:	1d3b      	adds	r3, r7, #4
   1ff3a:	4a18      	ldr	r2, [pc, #96]	; (1ff9c <sd_mmc_spi_init+0x9c>)
   1ff3c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1ff3e:	1d3b      	adds	r3, r7, #4
   1ff40:	2224      	movs	r2, #36	; 0x24
   1ff42:	2100      	movs	r1, #0
   1ff44:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1ff46:	1d3b      	adds	r3, r7, #4
   1ff48:	4a15      	ldr	r2, [pc, #84]	; (1ffa0 <sd_mmc_spi_init+0xa0>)
   1ff4a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1ff4c:	1d3a      	adds	r2, r7, #4
   1ff4e:	4915      	ldr	r1, [pc, #84]	; (1ffa4 <sd_mmc_spi_init+0xa4>)
   1ff50:	4b15      	ldr	r3, [pc, #84]	; (1ffa8 <sd_mmc_spi_init+0xa8>)
   1ff52:	0018      	movs	r0, r3
   1ff54:	4b15      	ldr	r3, [pc, #84]	; (1ffac <sd_mmc_spi_init+0xac>)
   1ff56:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1ff58:	4b13      	ldr	r3, [pc, #76]	; (1ffa8 <sd_mmc_spi_init+0xa8>)
   1ff5a:	0018      	movs	r0, r3
   1ff5c:	4b14      	ldr	r3, [pc, #80]	; (1ffb0 <sd_mmc_spi_init+0xb0>)
   1ff5e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1ff60:	4b14      	ldr	r3, [pc, #80]	; (1ffb4 <sd_mmc_spi_init+0xb4>)
   1ff62:	0018      	movs	r0, r3
   1ff64:	4b14      	ldr	r3, [pc, #80]	; (1ffb8 <sd_mmc_spi_init+0xb8>)
   1ff66:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1ff68:	4b14      	ldr	r3, [pc, #80]	; (1ffbc <sd_mmc_spi_init+0xbc>)
   1ff6a:	781a      	ldrb	r2, [r3, #0]
   1ff6c:	4b11      	ldr	r3, [pc, #68]	; (1ffb4 <sd_mmc_spi_init+0xb4>)
   1ff6e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1ff70:	4a10      	ldr	r2, [pc, #64]	; (1ffb4 <sd_mmc_spi_init+0xb4>)
   1ff72:	4b13      	ldr	r3, [pc, #76]	; (1ffc0 <sd_mmc_spi_init+0xc0>)
   1ff74:	0011      	movs	r1, r2
   1ff76:	0018      	movs	r0, r3
   1ff78:	4b12      	ldr	r3, [pc, #72]	; (1ffc4 <sd_mmc_spi_init+0xc4>)
   1ff7a:	4798      	blx	r3
}
   1ff7c:	46c0      	nop			; (mov r8, r8)
   1ff7e:	46bd      	mov	sp, r7
   1ff80:	b010      	add	sp, #64	; 0x40
   1ff82:	bd80      	pop	{r7, pc}
   1ff84:	2000428f 	.word	0x2000428f
   1ff88:	0001f9b5 	.word	0x0001f9b5
   1ff8c:	0001fa4d 	.word	0x0001fa4d
   1ff90:	00100002 	.word	0x00100002
   1ff94:	00110002 	.word	0x00110002
   1ff98:	00120002 	.word	0x00120002
   1ff9c:	00130002 	.word	0x00130002
   1ffa0:	00061a80 	.word	0x00061a80
   1ffa4:	42000c00 	.word	0x42000c00
   1ffa8:	2000424c 	.word	0x2000424c
   1ffac:	00028241 	.word	0x00028241
   1ffb0:	0001fb59 	.word	0x0001fb59
   1ffb4:	2000428c 	.word	0x2000428c
   1ffb8:	0001fad1 	.word	0x0001fad1
   1ffbc:	20000118 	.word	0x20000118
   1ffc0:	20004288 	.word	0x20004288
   1ffc4:	0001faf5 	.word	0x0001faf5

0001ffc8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1ffc8:	b590      	push	{r4, r7, lr}
   1ffca:	b083      	sub	sp, #12
   1ffcc:	af00      	add	r7, sp, #0
   1ffce:	0004      	movs	r4, r0
   1ffd0:	6039      	str	r1, [r7, #0]
   1ffd2:	0010      	movs	r0, r2
   1ffd4:	0019      	movs	r1, r3
   1ffd6:	1dfb      	adds	r3, r7, #7
   1ffd8:	1c22      	adds	r2, r4, #0
   1ffda:	701a      	strb	r2, [r3, #0]
   1ffdc:	1dbb      	adds	r3, r7, #6
   1ffde:	1c02      	adds	r2, r0, #0
   1ffe0:	701a      	strb	r2, [r3, #0]
   1ffe2:	1d7b      	adds	r3, r7, #5
   1ffe4:	1c0a      	adds	r2, r1, #0
   1ffe6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ffe8:	4b13      	ldr	r3, [pc, #76]	; (20038 <sd_mmc_spi_select_device+0x70>)
   1ffea:	2200      	movs	r2, #0
   1ffec:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1ffee:	683b      	ldr	r3, [r7, #0]
   1fff0:	4a12      	ldr	r2, [pc, #72]	; (2003c <sd_mmc_spi_select_device+0x74>)
   1fff2:	4293      	cmp	r3, r2
   1fff4:	d907      	bls.n	20006 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1fff6:	4b11      	ldr	r3, [pc, #68]	; (2003c <sd_mmc_spi_select_device+0x74>)
   1fff8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fffa:	e004      	b.n	20006 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1fffc:	683b      	ldr	r3, [r7, #0]
   1fffe:	08db      	lsrs	r3, r3, #3
   20000:	683a      	ldr	r2, [r7, #0]
   20002:	1ad3      	subs	r3, r2, r3
   20004:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20006:	683a      	ldr	r2, [r7, #0]
   20008:	4b0d      	ldr	r3, [pc, #52]	; (20040 <sd_mmc_spi_select_device+0x78>)
   2000a:	0011      	movs	r1, r2
   2000c:	0018      	movs	r0, r3
   2000e:	4b0d      	ldr	r3, [pc, #52]	; (20044 <sd_mmc_spi_select_device+0x7c>)
   20010:	4798      	blx	r3
   20012:	0003      	movs	r3, r0
   20014:	2b17      	cmp	r3, #23
   20016:	d0f1      	beq.n	1fffc <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   20018:	1dfb      	adds	r3, r7, #7
   2001a:	781a      	ldrb	r2, [r3, #0]
   2001c:	0013      	movs	r3, r2
   2001e:	005b      	lsls	r3, r3, #1
   20020:	189b      	adds	r3, r3, r2
   20022:	4a09      	ldr	r2, [pc, #36]	; (20048 <sd_mmc_spi_select_device+0x80>)
   20024:	1899      	adds	r1, r3, r2
   20026:	4b06      	ldr	r3, [pc, #24]	; (20040 <sd_mmc_spi_select_device+0x78>)
   20028:	2201      	movs	r2, #1
   2002a:	0018      	movs	r0, r3
   2002c:	4b07      	ldr	r3, [pc, #28]	; (2004c <sd_mmc_spi_select_device+0x84>)
   2002e:	4798      	blx	r3
}
   20030:	46c0      	nop			; (mov r8, r8)
   20032:	46bd      	mov	sp, r7
   20034:	b003      	add	sp, #12
   20036:	bd90      	pop	{r4, r7, pc}
   20038:	2000428f 	.word	0x2000428f
   2003c:	00989680 	.word	0x00989680
   20040:	2000424c 	.word	0x2000424c
   20044:	00027f69 	.word	0x00027f69
   20048:	20004288 	.word	0x20004288
   2004c:	00028505 	.word	0x00028505

00020050 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20050:	b580      	push	{r7, lr}
   20052:	b082      	sub	sp, #8
   20054:	af00      	add	r7, sp, #0
   20056:	0002      	movs	r2, r0
   20058:	1dfb      	adds	r3, r7, #7
   2005a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2005c:	4b09      	ldr	r3, [pc, #36]	; (20084 <sd_mmc_spi_deselect_device+0x34>)
   2005e:	2200      	movs	r2, #0
   20060:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20062:	1dfb      	adds	r3, r7, #7
   20064:	781a      	ldrb	r2, [r3, #0]
   20066:	0013      	movs	r3, r2
   20068:	005b      	lsls	r3, r3, #1
   2006a:	189b      	adds	r3, r3, r2
   2006c:	4a06      	ldr	r2, [pc, #24]	; (20088 <sd_mmc_spi_deselect_device+0x38>)
   2006e:	1899      	adds	r1, r3, r2
   20070:	4b06      	ldr	r3, [pc, #24]	; (2008c <sd_mmc_spi_deselect_device+0x3c>)
   20072:	2200      	movs	r2, #0
   20074:	0018      	movs	r0, r3
   20076:	4b06      	ldr	r3, [pc, #24]	; (20090 <sd_mmc_spi_deselect_device+0x40>)
   20078:	4798      	blx	r3
}
   2007a:	46c0      	nop			; (mov r8, r8)
   2007c:	46bd      	mov	sp, r7
   2007e:	b002      	add	sp, #8
   20080:	bd80      	pop	{r7, pc}
   20082:	46c0      	nop			; (mov r8, r8)
   20084:	2000428f 	.word	0x2000428f
   20088:	20004288 	.word	0x20004288
   2008c:	2000424c 	.word	0x2000424c
   20090:	00028505 	.word	0x00028505

00020094 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20094:	b580      	push	{r7, lr}
   20096:	b082      	sub	sp, #8
   20098:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2009a:	1dbb      	adds	r3, r7, #6
   2009c:	22ff      	movs	r2, #255	; 0xff
   2009e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   200a0:	4b0c      	ldr	r3, [pc, #48]	; (200d4 <sd_mmc_spi_send_clock+0x40>)
   200a2:	2200      	movs	r2, #0
   200a4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   200a6:	1dfb      	adds	r3, r7, #7
   200a8:	2200      	movs	r2, #0
   200aa:	701a      	strb	r2, [r3, #0]
   200ac:	e00a      	b.n	200c4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   200ae:	1db9      	adds	r1, r7, #6
   200b0:	4b09      	ldr	r3, [pc, #36]	; (200d8 <sd_mmc_spi_send_clock+0x44>)
   200b2:	2201      	movs	r2, #1
   200b4:	0018      	movs	r0, r3
   200b6:	4b09      	ldr	r3, [pc, #36]	; (200dc <sd_mmc_spi_send_clock+0x48>)
   200b8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   200ba:	1dfb      	adds	r3, r7, #7
   200bc:	781a      	ldrb	r2, [r3, #0]
   200be:	1dfb      	adds	r3, r7, #7
   200c0:	3201      	adds	r2, #1
   200c2:	701a      	strb	r2, [r3, #0]
   200c4:	1dfb      	adds	r3, r7, #7
   200c6:	781b      	ldrb	r3, [r3, #0]
   200c8:	2b09      	cmp	r3, #9
   200ca:	d9f0      	bls.n	200ae <sd_mmc_spi_send_clock+0x1a>
	}
}
   200cc:	46c0      	nop			; (mov r8, r8)
   200ce:	46bd      	mov	sp, r7
   200d0:	b002      	add	sp, #8
   200d2:	bd80      	pop	{r7, pc}
   200d4:	2000428f 	.word	0x2000428f
   200d8:	2000424c 	.word	0x2000424c
   200dc:	000285f5 	.word	0x000285f5

000200e0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   200e0:	b590      	push	{r4, r7, lr}
   200e2:	b085      	sub	sp, #20
   200e4:	af02      	add	r7, sp, #8
   200e6:	6078      	str	r0, [r7, #4]
   200e8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   200ea:	6839      	ldr	r1, [r7, #0]
   200ec:	6878      	ldr	r0, [r7, #4]
   200ee:	2300      	movs	r3, #0
   200f0:	9300      	str	r3, [sp, #0]
   200f2:	2300      	movs	r3, #0
   200f4:	2200      	movs	r2, #0
   200f6:	4c03      	ldr	r4, [pc, #12]	; (20104 <sd_mmc_spi_send_cmd+0x24>)
   200f8:	47a0      	blx	r4
   200fa:	0003      	movs	r3, r0
}
   200fc:	0018      	movs	r0, r3
   200fe:	46bd      	mov	sp, r7
   20100:	b003      	add	sp, #12
   20102:	bd90      	pop	{r4, r7, pc}
   20104:	00020109 	.word	0x00020109

00020108 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20108:	b590      	push	{r4, r7, lr}
   2010a:	b089      	sub	sp, #36	; 0x24
   2010c:	af00      	add	r7, sp, #0
   2010e:	60f8      	str	r0, [r7, #12]
   20110:	60b9      	str	r1, [r7, #8]
   20112:	0019      	movs	r1, r3
   20114:	1dbb      	adds	r3, r7, #6
   20116:	801a      	strh	r2, [r3, #0]
   20118:	1d3b      	adds	r3, r7, #4
   2011a:	1c0a      	adds	r2, r1, #0
   2011c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   2011e:	231b      	movs	r3, #27
   20120:	18fb      	adds	r3, r7, r3
   20122:	22ff      	movs	r2, #255	; 0xff
   20124:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20126:	231c      	movs	r3, #28
   20128:	18fb      	adds	r3, r7, r3
   2012a:	22ff      	movs	r2, #255	; 0xff
   2012c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2012e:	4b72      	ldr	r3, [pc, #456]	; (202f8 <sd_mmc_spi_adtc_start+0x1f0>)
   20130:	2200      	movs	r2, #0
   20132:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20134:	68fb      	ldr	r3, [r7, #12]
   20136:	b2db      	uxtb	r3, r3
   20138:	223f      	movs	r2, #63	; 0x3f
   2013a:	4013      	ands	r3, r2
   2013c:	b2db      	uxtb	r3, r3
   2013e:	2240      	movs	r2, #64	; 0x40
   20140:	4313      	orrs	r3, r2
   20142:	b2da      	uxtb	r2, r3
   20144:	2314      	movs	r3, #20
   20146:	18fb      	adds	r3, r7, r3
   20148:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2014a:	68bb      	ldr	r3, [r7, #8]
   2014c:	0e1b      	lsrs	r3, r3, #24
   2014e:	b2da      	uxtb	r2, r3
   20150:	2314      	movs	r3, #20
   20152:	18fb      	adds	r3, r7, r3
   20154:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20156:	68bb      	ldr	r3, [r7, #8]
   20158:	0c1b      	lsrs	r3, r3, #16
   2015a:	b2da      	uxtb	r2, r3
   2015c:	2314      	movs	r3, #20
   2015e:	18fb      	adds	r3, r7, r3
   20160:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20162:	68bb      	ldr	r3, [r7, #8]
   20164:	0a1b      	lsrs	r3, r3, #8
   20166:	b2da      	uxtb	r2, r3
   20168:	2314      	movs	r3, #20
   2016a:	18fb      	adds	r3, r7, r3
   2016c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   2016e:	68bb      	ldr	r3, [r7, #8]
   20170:	b2da      	uxtb	r2, r3
   20172:	2314      	movs	r3, #20
   20174:	18fb      	adds	r3, r7, r3
   20176:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20178:	2314      	movs	r3, #20
   2017a:	18fb      	adds	r3, r7, r3
   2017c:	2105      	movs	r1, #5
   2017e:	0018      	movs	r0, r3
   20180:	4b5e      	ldr	r3, [pc, #376]	; (202fc <sd_mmc_spi_adtc_start+0x1f4>)
   20182:	4798      	blx	r3
   20184:	0003      	movs	r3, r0
   20186:	001a      	movs	r2, r3
   20188:	2314      	movs	r3, #20
   2018a:	18fb      	adds	r3, r7, r3
   2018c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   2018e:	231b      	movs	r3, #27
   20190:	18f9      	adds	r1, r7, r3
   20192:	4b5b      	ldr	r3, [pc, #364]	; (20300 <sd_mmc_spi_adtc_start+0x1f8>)
   20194:	2201      	movs	r2, #1
   20196:	0018      	movs	r0, r3
   20198:	4b5a      	ldr	r3, [pc, #360]	; (20304 <sd_mmc_spi_adtc_start+0x1fc>)
   2019a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   2019c:	2314      	movs	r3, #20
   2019e:	18f9      	adds	r1, r7, r3
   201a0:	4b57      	ldr	r3, [pc, #348]	; (20300 <sd_mmc_spi_adtc_start+0x1f8>)
   201a2:	2206      	movs	r2, #6
   201a4:	0018      	movs	r0, r3
   201a6:	4b57      	ldr	r3, [pc, #348]	; (20304 <sd_mmc_spi_adtc_start+0x1fc>)
   201a8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   201aa:	2313      	movs	r3, #19
   201ac:	18fb      	adds	r3, r7, r3
   201ae:	22ff      	movs	r2, #255	; 0xff
   201b0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   201b2:	231c      	movs	r3, #28
   201b4:	18fb      	adds	r3, r7, r3
   201b6:	881b      	ldrh	r3, [r3, #0]
   201b8:	2213      	movs	r2, #19
   201ba:	18b9      	adds	r1, r7, r2
   201bc:	4850      	ldr	r0, [pc, #320]	; (20300 <sd_mmc_spi_adtc_start+0x1f8>)
   201be:	2201      	movs	r2, #1
   201c0:	4c51      	ldr	r4, [pc, #324]	; (20308 <sd_mmc_spi_adtc_start+0x200>)
   201c2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   201c4:	231f      	movs	r3, #31
   201c6:	18fb      	adds	r3, r7, r3
   201c8:	2207      	movs	r2, #7
   201ca:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   201cc:	231c      	movs	r3, #28
   201ce:	18fb      	adds	r3, r7, r3
   201d0:	881b      	ldrh	r3, [r3, #0]
   201d2:	2213      	movs	r2, #19
   201d4:	18b9      	adds	r1, r7, r2
   201d6:	484a      	ldr	r0, [pc, #296]	; (20300 <sd_mmc_spi_adtc_start+0x1f8>)
   201d8:	2201      	movs	r2, #1
   201da:	4c4b      	ldr	r4, [pc, #300]	; (20308 <sd_mmc_spi_adtc_start+0x200>)
   201dc:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   201de:	2313      	movs	r3, #19
   201e0:	18fb      	adds	r3, r7, r3
   201e2:	781b      	ldrb	r3, [r3, #0]
   201e4:	b25b      	sxtb	r3, r3
   201e6:	2b00      	cmp	r3, #0
   201e8:	da10      	bge.n	2020c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   201ea:	231f      	movs	r3, #31
   201ec:	18fb      	adds	r3, r7, r3
   201ee:	221f      	movs	r2, #31
   201f0:	18ba      	adds	r2, r7, r2
   201f2:	7812      	ldrb	r2, [r2, #0]
   201f4:	3a01      	subs	r2, #1
   201f6:	701a      	strb	r2, [r3, #0]
   201f8:	231f      	movs	r3, #31
   201fa:	18fb      	adds	r3, r7, r3
   201fc:	781b      	ldrb	r3, [r3, #0]
   201fe:	2b00      	cmp	r3, #0
   20200:	d1e4      	bne.n	201cc <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20202:	4b3d      	ldr	r3, [pc, #244]	; (202f8 <sd_mmc_spi_adtc_start+0x1f0>)
   20204:	2202      	movs	r2, #2
   20206:	701a      	strb	r2, [r3, #0]
			return false;
   20208:	2300      	movs	r3, #0
   2020a:	e070      	b.n	202ee <sd_mmc_spi_adtc_start+0x1e6>
			break;
   2020c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   2020e:	2313      	movs	r3, #19
   20210:	18fb      	adds	r3, r7, r3
   20212:	781b      	ldrb	r3, [r3, #0]
   20214:	001a      	movs	r2, r3
   20216:	4b3d      	ldr	r3, [pc, #244]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   20218:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   2021a:	2313      	movs	r3, #19
   2021c:	18fb      	adds	r3, r7, r3
   2021e:	781b      	ldrb	r3, [r3, #0]
   20220:	001a      	movs	r2, r3
   20222:	2308      	movs	r3, #8
   20224:	4013      	ands	r3, r2
   20226:	d004      	beq.n	20232 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20228:	4b33      	ldr	r3, [pc, #204]	; (202f8 <sd_mmc_spi_adtc_start+0x1f0>)
   2022a:	2206      	movs	r2, #6
   2022c:	701a      	strb	r2, [r3, #0]
		return false;
   2022e:	2300      	movs	r3, #0
   20230:	e05d      	b.n	202ee <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20232:	2313      	movs	r3, #19
   20234:	18fb      	adds	r3, r7, r3
   20236:	781b      	ldrb	r3, [r3, #0]
   20238:	001a      	movs	r2, r3
   2023a:	2304      	movs	r3, #4
   2023c:	4013      	ands	r3, r2
   2023e:	d004      	beq.n	2024a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20240:	4b2d      	ldr	r3, [pc, #180]	; (202f8 <sd_mmc_spi_adtc_start+0x1f0>)
   20242:	2209      	movs	r2, #9
   20244:	701a      	strb	r2, [r3, #0]
		return false;
   20246:	2300      	movs	r3, #0
   20248:	e051      	b.n	202ee <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   2024a:	2313      	movs	r3, #19
   2024c:	18fb      	adds	r3, r7, r3
   2024e:	781b      	ldrb	r3, [r3, #0]
   20250:	001a      	movs	r2, r3
   20252:	2301      	movs	r3, #1
   20254:	439a      	bics	r2, r3
   20256:	1e13      	subs	r3, r2, #0
   20258:	d004      	beq.n	20264 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   2025a:	4b27      	ldr	r3, [pc, #156]	; (202f8 <sd_mmc_spi_adtc_start+0x1f0>)
   2025c:	2201      	movs	r2, #1
   2025e:	701a      	strb	r2, [r3, #0]
		return false;
   20260:	2300      	movs	r3, #0
   20262:	e044      	b.n	202ee <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20264:	68fa      	ldr	r2, [r7, #12]
   20266:	2380      	movs	r3, #128	; 0x80
   20268:	019b      	lsls	r3, r3, #6
   2026a:	4013      	ands	r3, r2
   2026c:	d00d      	beq.n	2028a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   2026e:	4b28      	ldr	r3, [pc, #160]	; (20310 <sd_mmc_spi_adtc_start+0x208>)
   20270:	4798      	blx	r3
   20272:	0003      	movs	r3, r0
   20274:	001a      	movs	r2, r3
   20276:	2301      	movs	r3, #1
   20278:	4053      	eors	r3, r2
   2027a:	b2db      	uxtb	r3, r3
   2027c:	2b00      	cmp	r3, #0
   2027e:	d004      	beq.n	2028a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20280:	4b1d      	ldr	r3, [pc, #116]	; (202f8 <sd_mmc_spi_adtc_start+0x1f0>)
   20282:	2203      	movs	r2, #3
   20284:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20286:	2300      	movs	r3, #0
   20288:	e031      	b.n	202ee <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2028a:	68fa      	ldr	r2, [r7, #12]
   2028c:	2380      	movs	r3, #128	; 0x80
   2028e:	009b      	lsls	r3, r3, #2
   20290:	4013      	ands	r3, r2
   20292:	d00e      	beq.n	202b2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20294:	4b1d      	ldr	r3, [pc, #116]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   20296:	2200      	movs	r2, #0
   20298:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2029a:	231c      	movs	r3, #28
   2029c:	18fb      	adds	r3, r7, r3
   2029e:	881b      	ldrh	r3, [r3, #0]
   202a0:	491a      	ldr	r1, [pc, #104]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   202a2:	4817      	ldr	r0, [pc, #92]	; (20300 <sd_mmc_spi_adtc_start+0x1f8>)
   202a4:	2201      	movs	r2, #1
   202a6:	4c18      	ldr	r4, [pc, #96]	; (20308 <sd_mmc_spi_adtc_start+0x200>)
   202a8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   202aa:	4b18      	ldr	r3, [pc, #96]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   202ac:	681a      	ldr	r2, [r3, #0]
   202ae:	4b17      	ldr	r3, [pc, #92]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   202b0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   202b2:	68fa      	ldr	r2, [r7, #12]
   202b4:	2380      	movs	r3, #128	; 0x80
   202b6:	00db      	lsls	r3, r3, #3
   202b8:	4013      	ands	r3, r2
   202ba:	d00c      	beq.n	202d6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   202bc:	231c      	movs	r3, #28
   202be:	18fb      	adds	r3, r7, r3
   202c0:	881b      	ldrh	r3, [r3, #0]
   202c2:	4912      	ldr	r1, [pc, #72]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   202c4:	480e      	ldr	r0, [pc, #56]	; (20300 <sd_mmc_spi_adtc_start+0x1f8>)
   202c6:	2204      	movs	r2, #4
   202c8:	4c0f      	ldr	r4, [pc, #60]	; (20308 <sd_mmc_spi_adtc_start+0x200>)
   202ca:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   202cc:	4b0f      	ldr	r3, [pc, #60]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   202ce:	681b      	ldr	r3, [r3, #0]
   202d0:	ba1a      	rev	r2, r3
   202d2:	4b0e      	ldr	r3, [pc, #56]	; (2030c <sd_mmc_spi_adtc_start+0x204>)
   202d4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   202d6:	4b0f      	ldr	r3, [pc, #60]	; (20314 <sd_mmc_spi_adtc_start+0x20c>)
   202d8:	1dba      	adds	r2, r7, #6
   202da:	8812      	ldrh	r2, [r2, #0]
   202dc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   202de:	4b0e      	ldr	r3, [pc, #56]	; (20318 <sd_mmc_spi_adtc_start+0x210>)
   202e0:	1d3a      	adds	r2, r7, #4
   202e2:	8812      	ldrh	r2, [r2, #0]
   202e4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   202e6:	4b0d      	ldr	r3, [pc, #52]	; (2031c <sd_mmc_spi_adtc_start+0x214>)
   202e8:	2200      	movs	r2, #0
   202ea:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   202ec:	2301      	movs	r3, #1
}
   202ee:	0018      	movs	r0, r3
   202f0:	46bd      	mov	sp, r7
   202f2:	b009      	add	sp, #36	; 0x24
   202f4:	bd90      	pop	{r4, r7, pc}
   202f6:	46c0      	nop			; (mov r8, r8)
   202f8:	2000428f 	.word	0x2000428f
   202fc:	0001fba9 	.word	0x0001fba9
   20300:	2000424c 	.word	0x2000424c
   20304:	000285f5 	.word	0x000285f5
   20308:	000283d1 	.word	0x000283d1
   2030c:	20004290 	.word	0x20004290
   20310:	0001fc65 	.word	0x0001fc65
   20314:	20004298 	.word	0x20004298
   20318:	2000429a 	.word	0x2000429a
   2031c:	20004294 	.word	0x20004294

00020320 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20320:	b580      	push	{r7, lr}
   20322:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20324:	4b02      	ldr	r3, [pc, #8]	; (20330 <sd_mmc_spi_get_response+0x10>)
   20326:	681b      	ldr	r3, [r3, #0]
}
   20328:	0018      	movs	r0, r3
   2032a:	46bd      	mov	sp, r7
   2032c:	bd80      	pop	{r7, pc}
   2032e:	46c0      	nop			; (mov r8, r8)
   20330:	20004290 	.word	0x20004290

00020334 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20334:	b590      	push	{r4, r7, lr}
   20336:	b085      	sub	sp, #20
   20338:	af00      	add	r7, sp, #0
   2033a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   2033c:	230e      	movs	r3, #14
   2033e:	18fb      	adds	r3, r7, r3
   20340:	22ff      	movs	r2, #255	; 0xff
   20342:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20344:	4b1c      	ldr	r3, [pc, #112]	; (203b8 <sd_mmc_spi_read_word+0x84>)
   20346:	2200      	movs	r2, #0
   20348:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   2034a:	4b1c      	ldr	r3, [pc, #112]	; (203bc <sd_mmc_spi_read_word+0x88>)
   2034c:	681a      	ldr	r2, [r3, #0]
   2034e:	4b1c      	ldr	r3, [pc, #112]	; (203c0 <sd_mmc_spi_read_word+0x8c>)
   20350:	881b      	ldrh	r3, [r3, #0]
   20352:	0019      	movs	r1, r3
   20354:	4b1b      	ldr	r3, [pc, #108]	; (203c4 <sd_mmc_spi_read_word+0x90>)
   20356:	0010      	movs	r0, r2
   20358:	4798      	blx	r3
   2035a:	1e0b      	subs	r3, r1, #0
   2035c:	d10a      	bne.n	20374 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   2035e:	4b1a      	ldr	r3, [pc, #104]	; (203c8 <sd_mmc_spi_read_word+0x94>)
   20360:	4798      	blx	r3
   20362:	0003      	movs	r3, r0
   20364:	001a      	movs	r2, r3
   20366:	2301      	movs	r3, #1
   20368:	4053      	eors	r3, r2
   2036a:	b2db      	uxtb	r3, r3
   2036c:	2b00      	cmp	r3, #0
   2036e:	d001      	beq.n	20374 <sd_mmc_spi_read_word+0x40>
			return false;
   20370:	2300      	movs	r3, #0
   20372:	e01d      	b.n	203b0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20374:	230e      	movs	r3, #14
   20376:	18fb      	adds	r3, r7, r3
   20378:	881b      	ldrh	r3, [r3, #0]
   2037a:	1d39      	adds	r1, r7, #4
   2037c:	4813      	ldr	r0, [pc, #76]	; (203cc <sd_mmc_spi_read_word+0x98>)
   2037e:	2204      	movs	r2, #4
   20380:	4c13      	ldr	r4, [pc, #76]	; (203d0 <sd_mmc_spi_read_word+0x9c>)
   20382:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20384:	687b      	ldr	r3, [r7, #4]
   20386:	687a      	ldr	r2, [r7, #4]
   20388:	6812      	ldr	r2, [r2, #0]
   2038a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   2038c:	4b0b      	ldr	r3, [pc, #44]	; (203bc <sd_mmc_spi_read_word+0x88>)
   2038e:	681b      	ldr	r3, [r3, #0]
   20390:	1d1a      	adds	r2, r3, #4
   20392:	4b0a      	ldr	r3, [pc, #40]	; (203bc <sd_mmc_spi_read_word+0x88>)
   20394:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20396:	4b09      	ldr	r3, [pc, #36]	; (203bc <sd_mmc_spi_read_word+0x88>)
   20398:	681a      	ldr	r2, [r3, #0]
   2039a:	4b09      	ldr	r3, [pc, #36]	; (203c0 <sd_mmc_spi_read_word+0x8c>)
   2039c:	881b      	ldrh	r3, [r3, #0]
   2039e:	0019      	movs	r1, r3
   203a0:	4b08      	ldr	r3, [pc, #32]	; (203c4 <sd_mmc_spi_read_word+0x90>)
   203a2:	0010      	movs	r0, r2
   203a4:	4798      	blx	r3
   203a6:	1e0b      	subs	r3, r1, #0
   203a8:	d101      	bne.n	203ae <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   203aa:	4b0a      	ldr	r3, [pc, #40]	; (203d4 <sd_mmc_spi_read_word+0xa0>)
   203ac:	4798      	blx	r3
	}
	return true;
   203ae:	2301      	movs	r3, #1
}
   203b0:	0018      	movs	r0, r3
   203b2:	46bd      	mov	sp, r7
   203b4:	b005      	add	sp, #20
   203b6:	bd90      	pop	{r4, r7, pc}
   203b8:	2000428f 	.word	0x2000428f
   203bc:	20004294 	.word	0x20004294
   203c0:	20004298 	.word	0x20004298
   203c4:	00032ea1 	.word	0x00032ea1
   203c8:	0001fcd1 	.word	0x0001fcd1
   203cc:	2000424c 	.word	0x2000424c
   203d0:	000283d1 	.word	0x000283d1
   203d4:	0001fd55 	.word	0x0001fd55

000203d8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   203d8:	b590      	push	{r4, r7, lr}
   203da:	b085      	sub	sp, #20
   203dc:	af00      	add	r7, sp, #0
   203de:	6078      	str	r0, [r7, #4]
   203e0:	000a      	movs	r2, r1
   203e2:	1cbb      	adds	r3, r7, #2
   203e4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   203e6:	230a      	movs	r3, #10
   203e8:	18fb      	adds	r3, r7, r3
   203ea:	22ff      	movs	r2, #255	; 0xff
   203ec:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   203ee:	4b1c      	ldr	r3, [pc, #112]	; (20460 <sd_mmc_spi_start_read_blocks+0x88>)
   203f0:	2200      	movs	r2, #0
   203f2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   203f4:	2300      	movs	r3, #0
   203f6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   203f8:	e025      	b.n	20446 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   203fa:	4b1a      	ldr	r3, [pc, #104]	; (20464 <sd_mmc_spi_start_read_blocks+0x8c>)
   203fc:	4798      	blx	r3
   203fe:	0003      	movs	r3, r0
   20400:	001a      	movs	r2, r3
   20402:	2301      	movs	r3, #1
   20404:	4053      	eors	r3, r2
   20406:	b2db      	uxtb	r3, r3
   20408:	2b00      	cmp	r3, #0
   2040a:	d001      	beq.n	20410 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   2040c:	2300      	movs	r3, #0
   2040e:	e022      	b.n	20456 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20410:	687a      	ldr	r2, [r7, #4]
   20412:	68fb      	ldr	r3, [r7, #12]
   20414:	18d1      	adds	r1, r2, r3
   20416:	4b14      	ldr	r3, [pc, #80]	; (20468 <sd_mmc_spi_start_read_blocks+0x90>)
   20418:	881a      	ldrh	r2, [r3, #0]
   2041a:	230a      	movs	r3, #10
   2041c:	18fb      	adds	r3, r7, r3
   2041e:	881b      	ldrh	r3, [r3, #0]
   20420:	4812      	ldr	r0, [pc, #72]	; (2046c <sd_mmc_spi_start_read_blocks+0x94>)
   20422:	4c13      	ldr	r4, [pc, #76]	; (20470 <sd_mmc_spi_start_read_blocks+0x98>)
   20424:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20426:	4b10      	ldr	r3, [pc, #64]	; (20468 <sd_mmc_spi_start_read_blocks+0x90>)
   20428:	881b      	ldrh	r3, [r3, #0]
   2042a:	001a      	movs	r2, r3
   2042c:	68fb      	ldr	r3, [r7, #12]
   2042e:	189b      	adds	r3, r3, r2
   20430:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20432:	4b0d      	ldr	r3, [pc, #52]	; (20468 <sd_mmc_spi_start_read_blocks+0x90>)
   20434:	881b      	ldrh	r3, [r3, #0]
   20436:	001a      	movs	r2, r3
   20438:	4b0e      	ldr	r3, [pc, #56]	; (20474 <sd_mmc_spi_start_read_blocks+0x9c>)
   2043a:	681b      	ldr	r3, [r3, #0]
   2043c:	18d2      	adds	r2, r2, r3
   2043e:	4b0d      	ldr	r3, [pc, #52]	; (20474 <sd_mmc_spi_start_read_blocks+0x9c>)
   20440:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20442:	4b0d      	ldr	r3, [pc, #52]	; (20478 <sd_mmc_spi_start_read_blocks+0xa0>)
   20444:	4798      	blx	r3
	while (nb_block--) {
   20446:	1cbb      	adds	r3, r7, #2
   20448:	881b      	ldrh	r3, [r3, #0]
   2044a:	1cba      	adds	r2, r7, #2
   2044c:	1e59      	subs	r1, r3, #1
   2044e:	8011      	strh	r1, [r2, #0]
   20450:	2b00      	cmp	r3, #0
   20452:	d1d2      	bne.n	203fa <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20454:	2301      	movs	r3, #1
}
   20456:	0018      	movs	r0, r3
   20458:	46bd      	mov	sp, r7
   2045a:	b005      	add	sp, #20
   2045c:	bd90      	pop	{r4, r7, pc}
   2045e:	46c0      	nop			; (mov r8, r8)
   20460:	2000428f 	.word	0x2000428f
   20464:	0001fcd1 	.word	0x0001fcd1
   20468:	20004298 	.word	0x20004298
   2046c:	2000424c 	.word	0x2000424c
   20470:	000283d1 	.word	0x000283d1
   20474:	20004294 	.word	0x20004294
   20478:	0001fd55 	.word	0x0001fd55

0002047c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   2047c:	b580      	push	{r7, lr}
   2047e:	af00      	add	r7, sp, #0
	return true;
   20480:	2301      	movs	r3, #1
}
   20482:	0018      	movs	r0, r3
   20484:	46bd      	mov	sp, r7
   20486:	bd80      	pop	{r7, pc}

00020488 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20488:	b580      	push	{r7, lr}
   2048a:	b084      	sub	sp, #16
   2048c:	af00      	add	r7, sp, #0
   2048e:	6078      	str	r0, [r7, #4]
   20490:	000a      	movs	r2, r1
   20492:	1cbb      	adds	r3, r7, #2
   20494:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20496:	4b24      	ldr	r3, [pc, #144]	; (20528 <sd_mmc_spi_start_write_blocks+0xa0>)
   20498:	2200      	movs	r2, #0
   2049a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2049c:	2300      	movs	r3, #0
   2049e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   204a0:	e035      	b.n	2050e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   204a2:	4b22      	ldr	r3, [pc, #136]	; (2052c <sd_mmc_spi_start_write_blocks+0xa4>)
   204a4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   204a6:	687a      	ldr	r2, [r7, #4]
   204a8:	68fb      	ldr	r3, [r7, #12]
   204aa:	18d1      	adds	r1, r2, r3
   204ac:	4b20      	ldr	r3, [pc, #128]	; (20530 <sd_mmc_spi_start_write_blocks+0xa8>)
   204ae:	881a      	ldrh	r2, [r3, #0]
   204b0:	4b20      	ldr	r3, [pc, #128]	; (20534 <sd_mmc_spi_start_write_blocks+0xac>)
   204b2:	0018      	movs	r0, r3
   204b4:	4b20      	ldr	r3, [pc, #128]	; (20538 <sd_mmc_spi_start_write_blocks+0xb0>)
   204b6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   204b8:	4b1d      	ldr	r3, [pc, #116]	; (20530 <sd_mmc_spi_start_write_blocks+0xa8>)
   204ba:	881b      	ldrh	r3, [r3, #0]
   204bc:	001a      	movs	r2, r3
   204be:	68fb      	ldr	r3, [r7, #12]
   204c0:	189b      	adds	r3, r3, r2
   204c2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   204c4:	4b1a      	ldr	r3, [pc, #104]	; (20530 <sd_mmc_spi_start_write_blocks+0xa8>)
   204c6:	881b      	ldrh	r3, [r3, #0]
   204c8:	001a      	movs	r2, r3
   204ca:	4b1c      	ldr	r3, [pc, #112]	; (2053c <sd_mmc_spi_start_write_blocks+0xb4>)
   204cc:	681b      	ldr	r3, [r3, #0]
   204ce:	18d2      	adds	r2, r2, r3
   204d0:	4b1a      	ldr	r3, [pc, #104]	; (2053c <sd_mmc_spi_start_write_blocks+0xb4>)
   204d2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   204d4:	4b1a      	ldr	r3, [pc, #104]	; (20540 <sd_mmc_spi_start_write_blocks+0xb8>)
   204d6:	4798      	blx	r3
   204d8:	0003      	movs	r3, r0
   204da:	001a      	movs	r2, r3
   204dc:	2301      	movs	r3, #1
   204de:	4053      	eors	r3, r2
   204e0:	b2db      	uxtb	r3, r3
   204e2:	2b00      	cmp	r3, #0
   204e4:	d001      	beq.n	204ea <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   204e6:	2300      	movs	r3, #0
   204e8:	e019      	b.n	2051e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   204ea:	1cbb      	adds	r3, r7, #2
   204ec:	881b      	ldrh	r3, [r3, #0]
   204ee:	2b00      	cmp	r3, #0
   204f0:	d00d      	beq.n	2050e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   204f2:	4b14      	ldr	r3, [pc, #80]	; (20544 <sd_mmc_spi_start_write_blocks+0xbc>)
   204f4:	4798      	blx	r3
   204f6:	0003      	movs	r3, r0
   204f8:	001a      	movs	r2, r3
   204fa:	2301      	movs	r3, #1
   204fc:	4053      	eors	r3, r2
   204fe:	b2db      	uxtb	r3, r3
   20500:	2b00      	cmp	r3, #0
   20502:	d004      	beq.n	2050e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20504:	4b08      	ldr	r3, [pc, #32]	; (20528 <sd_mmc_spi_start_write_blocks+0xa0>)
   20506:	2205      	movs	r2, #5
   20508:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   2050a:	2300      	movs	r3, #0
   2050c:	e007      	b.n	2051e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   2050e:	1cbb      	adds	r3, r7, #2
   20510:	881b      	ldrh	r3, [r3, #0]
   20512:	1cba      	adds	r2, r7, #2
   20514:	1e59      	subs	r1, r3, #1
   20516:	8011      	strh	r1, [r2, #0]
   20518:	2b00      	cmp	r3, #0
   2051a:	d1c2      	bne.n	204a2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   2051c:	2301      	movs	r3, #1
}
   2051e:	0018      	movs	r0, r3
   20520:	46bd      	mov	sp, r7
   20522:	b004      	add	sp, #16
   20524:	bd80      	pop	{r7, pc}
   20526:	46c0      	nop			; (mov r8, r8)
   20528:	2000428f 	.word	0x2000428f
   2052c:	0001fd81 	.word	0x0001fd81
   20530:	20004298 	.word	0x20004298
   20534:	2000424c 	.word	0x2000424c
   20538:	000285f5 	.word	0x000285f5
   2053c:	20004294 	.word	0x20004294
   20540:	0001fdd1 	.word	0x0001fdd1
   20544:	0001fc65 	.word	0x0001fc65

00020548 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20548:	b580      	push	{r7, lr}
   2054a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   2054c:	4b09      	ldr	r3, [pc, #36]	; (20574 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   2054e:	4798      	blx	r3
   20550:	0003      	movs	r3, r0
   20552:	001a      	movs	r2, r3
   20554:	2301      	movs	r3, #1
   20556:	4053      	eors	r3, r2
   20558:	b2db      	uxtb	r3, r3
   2055a:	2b00      	cmp	r3, #0
   2055c:	d004      	beq.n	20568 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2055e:	4b06      	ldr	r3, [pc, #24]	; (20578 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20560:	2205      	movs	r2, #5
   20562:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20564:	2300      	movs	r3, #0
   20566:	e002      	b.n	2056e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20568:	4b04      	ldr	r3, [pc, #16]	; (2057c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   2056a:	4798      	blx	r3
   2056c:	0003      	movs	r3, r0
}
   2056e:	0018      	movs	r0, r3
   20570:	46bd      	mov	sp, r7
   20572:	bd80      	pop	{r7, pc}
   20574:	0001fc65 	.word	0x0001fc65
   20578:	2000428f 	.word	0x2000428f
   2057c:	0001fe65 	.word	0x0001fe65

00020580 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20580:	b580      	push	{r7, lr}
   20582:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20584:	2000      	movs	r0, #0
   20586:	4b0f      	ldr	r3, [pc, #60]	; (205c4 <delay_init+0x44>)
   20588:	4798      	blx	r3
   2058a:	0002      	movs	r2, r0
   2058c:	4b0e      	ldr	r3, [pc, #56]	; (205c8 <delay_init+0x48>)
   2058e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20590:	4b0d      	ldr	r3, [pc, #52]	; (205c8 <delay_init+0x48>)
   20592:	6818      	ldr	r0, [r3, #0]
   20594:	4b0d      	ldr	r3, [pc, #52]	; (205cc <delay_init+0x4c>)
   20596:	22fa      	movs	r2, #250	; 0xfa
   20598:	0091      	lsls	r1, r2, #2
   2059a:	4798      	blx	r3
   2059c:	0003      	movs	r3, r0
   2059e:	001a      	movs	r2, r3
   205a0:	4b09      	ldr	r3, [pc, #36]	; (205c8 <delay_init+0x48>)
   205a2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   205a4:	4b08      	ldr	r3, [pc, #32]	; (205c8 <delay_init+0x48>)
   205a6:	6818      	ldr	r0, [r3, #0]
   205a8:	4b08      	ldr	r3, [pc, #32]	; (205cc <delay_init+0x4c>)
   205aa:	22fa      	movs	r2, #250	; 0xfa
   205ac:	0091      	lsls	r1, r2, #2
   205ae:	4798      	blx	r3
   205b0:	0003      	movs	r3, r0
   205b2:	001a      	movs	r2, r3
   205b4:	4b06      	ldr	r3, [pc, #24]	; (205d0 <delay_init+0x50>)
   205b6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   205b8:	4b06      	ldr	r3, [pc, #24]	; (205d4 <delay_init+0x54>)
   205ba:	2205      	movs	r2, #5
   205bc:	601a      	str	r2, [r3, #0]
}
   205be:	46c0      	nop			; (mov r8, r8)
   205c0:	46bd      	mov	sp, r7
   205c2:	bd80      	pop	{r7, pc}
   205c4:	0002a179 	.word	0x0002a179
   205c8:	2000011c 	.word	0x2000011c
   205cc:	00032d95 	.word	0x00032d95
   205d0:	20000120 	.word	0x20000120
   205d4:	e000e010 	.word	0xe000e010

000205d8 <system_pinmux_get_group_from_gpio_pin>:
{
   205d8:	b580      	push	{r7, lr}
   205da:	b084      	sub	sp, #16
   205dc:	af00      	add	r7, sp, #0
   205de:	0002      	movs	r2, r0
   205e0:	1dfb      	adds	r3, r7, #7
   205e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   205e4:	230f      	movs	r3, #15
   205e6:	18fb      	adds	r3, r7, r3
   205e8:	1dfa      	adds	r2, r7, #7
   205ea:	7812      	ldrb	r2, [r2, #0]
   205ec:	09d2      	lsrs	r2, r2, #7
   205ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   205f0:	230e      	movs	r3, #14
   205f2:	18fb      	adds	r3, r7, r3
   205f4:	1dfa      	adds	r2, r7, #7
   205f6:	7812      	ldrb	r2, [r2, #0]
   205f8:	0952      	lsrs	r2, r2, #5
   205fa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   205fc:	4b0d      	ldr	r3, [pc, #52]	; (20634 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   205fe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20600:	230f      	movs	r3, #15
   20602:	18fb      	adds	r3, r7, r3
   20604:	781b      	ldrb	r3, [r3, #0]
   20606:	2b00      	cmp	r3, #0
   20608:	d10f      	bne.n	2062a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2060a:	230f      	movs	r3, #15
   2060c:	18fb      	adds	r3, r7, r3
   2060e:	781b      	ldrb	r3, [r3, #0]
   20610:	009b      	lsls	r3, r3, #2
   20612:	2210      	movs	r2, #16
   20614:	4694      	mov	ip, r2
   20616:	44bc      	add	ip, r7
   20618:	4463      	add	r3, ip
   2061a:	3b08      	subs	r3, #8
   2061c:	681a      	ldr	r2, [r3, #0]
   2061e:	230e      	movs	r3, #14
   20620:	18fb      	adds	r3, r7, r3
   20622:	781b      	ldrb	r3, [r3, #0]
   20624:	01db      	lsls	r3, r3, #7
   20626:	18d3      	adds	r3, r2, r3
   20628:	e000      	b.n	2062c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2062a:	2300      	movs	r3, #0
}
   2062c:	0018      	movs	r0, r3
   2062e:	46bd      	mov	sp, r7
   20630:	b004      	add	sp, #16
   20632:	bd80      	pop	{r7, pc}
   20634:	41004400 	.word	0x41004400

00020638 <system_interrupt_enable_global>:
{
   20638:	b580      	push	{r7, lr}
   2063a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   2063c:	4b04      	ldr	r3, [pc, #16]	; (20650 <system_interrupt_enable_global+0x18>)
   2063e:	2201      	movs	r2, #1
   20640:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20642:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20646:	b662      	cpsie	i
}
   20648:	46c0      	nop			; (mov r8, r8)
   2064a:	46bd      	mov	sp, r7
   2064c:	bd80      	pop	{r7, pc}
   2064e:	46c0      	nop			; (mov r8, r8)
   20650:	20000126 	.word	0x20000126

00020654 <port_get_group_from_gpio_pin>:
{
   20654:	b580      	push	{r7, lr}
   20656:	b082      	sub	sp, #8
   20658:	af00      	add	r7, sp, #0
   2065a:	0002      	movs	r2, r0
   2065c:	1dfb      	adds	r3, r7, #7
   2065e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20660:	1dfb      	adds	r3, r7, #7
   20662:	781b      	ldrb	r3, [r3, #0]
   20664:	0018      	movs	r0, r3
   20666:	4b03      	ldr	r3, [pc, #12]	; (20674 <port_get_group_from_gpio_pin+0x20>)
   20668:	4798      	blx	r3
   2066a:	0003      	movs	r3, r0
}
   2066c:	0018      	movs	r0, r3
   2066e:	46bd      	mov	sp, r7
   20670:	b002      	add	sp, #8
   20672:	bd80      	pop	{r7, pc}
   20674:	000205d9 	.word	0x000205d9

00020678 <port_get_config_defaults>:
{
   20678:	b580      	push	{r7, lr}
   2067a:	b082      	sub	sp, #8
   2067c:	af00      	add	r7, sp, #0
   2067e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20680:	687b      	ldr	r3, [r7, #4]
   20682:	2200      	movs	r2, #0
   20684:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20686:	687b      	ldr	r3, [r7, #4]
   20688:	2201      	movs	r2, #1
   2068a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2068c:	687b      	ldr	r3, [r7, #4]
   2068e:	2200      	movs	r2, #0
   20690:	709a      	strb	r2, [r3, #2]
}
   20692:	46c0      	nop			; (mov r8, r8)
   20694:	46bd      	mov	sp, r7
   20696:	b002      	add	sp, #8
   20698:	bd80      	pop	{r7, pc}
	...

0002069c <port_pin_set_output_level>:
{
   2069c:	b580      	push	{r7, lr}
   2069e:	b084      	sub	sp, #16
   206a0:	af00      	add	r7, sp, #0
   206a2:	0002      	movs	r2, r0
   206a4:	1dfb      	adds	r3, r7, #7
   206a6:	701a      	strb	r2, [r3, #0]
   206a8:	1dbb      	adds	r3, r7, #6
   206aa:	1c0a      	adds	r2, r1, #0
   206ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   206ae:	1dfb      	adds	r3, r7, #7
   206b0:	781b      	ldrb	r3, [r3, #0]
   206b2:	0018      	movs	r0, r3
   206b4:	4b0d      	ldr	r3, [pc, #52]	; (206ec <port_pin_set_output_level+0x50>)
   206b6:	4798      	blx	r3
   206b8:	0003      	movs	r3, r0
   206ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   206bc:	1dfb      	adds	r3, r7, #7
   206be:	781b      	ldrb	r3, [r3, #0]
   206c0:	221f      	movs	r2, #31
   206c2:	4013      	ands	r3, r2
   206c4:	2201      	movs	r2, #1
   206c6:	409a      	lsls	r2, r3
   206c8:	0013      	movs	r3, r2
   206ca:	60bb      	str	r3, [r7, #8]
	if (level) {
   206cc:	1dbb      	adds	r3, r7, #6
   206ce:	781b      	ldrb	r3, [r3, #0]
   206d0:	2b00      	cmp	r3, #0
   206d2:	d003      	beq.n	206dc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   206d4:	68fb      	ldr	r3, [r7, #12]
   206d6:	68ba      	ldr	r2, [r7, #8]
   206d8:	619a      	str	r2, [r3, #24]
}
   206da:	e002      	b.n	206e2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   206dc:	68fb      	ldr	r3, [r7, #12]
   206de:	68ba      	ldr	r2, [r7, #8]
   206e0:	615a      	str	r2, [r3, #20]
}
   206e2:	46c0      	nop			; (mov r8, r8)
   206e4:	46bd      	mov	sp, r7
   206e6:	b004      	add	sp, #16
   206e8:	bd80      	pop	{r7, pc}
   206ea:	46c0      	nop			; (mov r8, r8)
   206ec:	00020655 	.word	0x00020655

000206f0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   206f0:	b580      	push	{r7, lr}
   206f2:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   206f4:	4b04      	ldr	r3, [pc, #16]	; (20708 <chip_isr+0x18>)
   206f6:	681b      	ldr	r3, [r3, #0]
   206f8:	2b00      	cmp	r3, #0
   206fa:	d002      	beq.n	20702 <chip_isr+0x12>
		gpfIsr();
   206fc:	4b02      	ldr	r3, [pc, #8]	; (20708 <chip_isr+0x18>)
   206fe:	681b      	ldr	r3, [r3, #0]
   20700:	4798      	blx	r3
	}
}
   20702:	46c0      	nop			; (mov r8, r8)
   20704:	46bd      	mov	sp, r7
   20706:	bd80      	pop	{r7, pc}
   20708:	2000429c 	.word	0x2000429c

0002070c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   2070c:	b580      	push	{r7, lr}
   2070e:	b082      	sub	sp, #8
   20710:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20712:	1d3b      	adds	r3, r7, #4
   20714:	0018      	movs	r0, r3
   20716:	4b10      	ldr	r3, [pc, #64]	; (20758 <init_chip_pins+0x4c>)
   20718:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2071a:	1d3b      	adds	r3, r7, #4
   2071c:	2201      	movs	r2, #1
   2071e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20720:	1d3b      	adds	r3, r7, #4
   20722:	0019      	movs	r1, r3
   20724:	201b      	movs	r0, #27
   20726:	4b0d      	ldr	r3, [pc, #52]	; (2075c <init_chip_pins+0x50>)
   20728:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   2072a:	1d3b      	adds	r3, r7, #4
   2072c:	0019      	movs	r1, r3
   2072e:	201c      	movs	r0, #28
   20730:	4b0a      	ldr	r3, [pc, #40]	; (2075c <init_chip_pins+0x50>)
   20732:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20734:	1d3b      	adds	r3, r7, #4
   20736:	0019      	movs	r1, r3
   20738:	2028      	movs	r0, #40	; 0x28
   2073a:	4b08      	ldr	r3, [pc, #32]	; (2075c <init_chip_pins+0x50>)
   2073c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   2073e:	2100      	movs	r1, #0
   20740:	201c      	movs	r0, #28
   20742:	4b07      	ldr	r3, [pc, #28]	; (20760 <init_chip_pins+0x54>)
   20744:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20746:	2100      	movs	r1, #0
   20748:	201b      	movs	r0, #27
   2074a:	4b05      	ldr	r3, [pc, #20]	; (20760 <init_chip_pins+0x54>)
   2074c:	4798      	blx	r3
}
   2074e:	46c0      	nop			; (mov r8, r8)
   20750:	46bd      	mov	sp, r7
   20752:	b002      	add	sp, #8
   20754:	bd80      	pop	{r7, pc}
   20756:	46c0      	nop			; (mov r8, r8)
   20758:	00020679 	.word	0x00020679
   2075c:	00026dc1 	.word	0x00026dc1
   20760:	0002069d 	.word	0x0002069d

00020764 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20764:	b580      	push	{r7, lr}
   20766:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20768:	4b0b      	ldr	r3, [pc, #44]	; (20798 <nm_bsp_init+0x34>)
   2076a:	2200      	movs	r2, #0
   2076c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   2076e:	4b0b      	ldr	r3, [pc, #44]	; (2079c <nm_bsp_init+0x38>)
   20770:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20772:	4b0b      	ldr	r3, [pc, #44]	; (207a0 <nm_bsp_init+0x3c>)
   20774:	681b      	ldr	r3, [r3, #0]
   20776:	2201      	movs	r2, #1
   20778:	4013      	ands	r3, r2
   2077a:	d004      	beq.n	20786 <nm_bsp_init+0x22>
   2077c:	4b08      	ldr	r3, [pc, #32]	; (207a0 <nm_bsp_init+0x3c>)
   2077e:	681b      	ldr	r3, [r3, #0]
   20780:	2202      	movs	r2, #2
   20782:	4013      	ands	r3, r2
   20784:	d101      	bne.n	2078a <nm_bsp_init+0x26>
	    delay_init();
   20786:	4b07      	ldr	r3, [pc, #28]	; (207a4 <nm_bsp_init+0x40>)
   20788:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2078a:	4b07      	ldr	r3, [pc, #28]	; (207a8 <nm_bsp_init+0x44>)
   2078c:	4798      	blx	r3

	return M2M_SUCCESS;
   2078e:	2300      	movs	r3, #0
}
   20790:	0018      	movs	r0, r3
   20792:	46bd      	mov	sp, r7
   20794:	bd80      	pop	{r7, pc}
   20796:	46c0      	nop			; (mov r8, r8)
   20798:	2000429c 	.word	0x2000429c
   2079c:	0002070d 	.word	0x0002070d
   207a0:	e000e010 	.word	0xe000e010
   207a4:	00020581 	.word	0x00020581
   207a8:	00020639 	.word	0x00020639

000207ac <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   207ac:	b580      	push	{r7, lr}
   207ae:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   207b0:	2100      	movs	r1, #0
   207b2:	201c      	movs	r0, #28
   207b4:	4b0b      	ldr	r3, [pc, #44]	; (207e4 <nm_bsp_reset+0x38>)
   207b6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   207b8:	2100      	movs	r1, #0
   207ba:	201b      	movs	r0, #27
   207bc:	4b09      	ldr	r3, [pc, #36]	; (207e4 <nm_bsp_reset+0x38>)
   207be:	4798      	blx	r3
	nm_bsp_sleep(1);
   207c0:	2001      	movs	r0, #1
   207c2:	4b09      	ldr	r3, [pc, #36]	; (207e8 <nm_bsp_reset+0x3c>)
   207c4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   207c6:	2101      	movs	r1, #1
   207c8:	201c      	movs	r0, #28
   207ca:	4b06      	ldr	r3, [pc, #24]	; (207e4 <nm_bsp_reset+0x38>)
   207cc:	4798      	blx	r3
	nm_bsp_sleep(10);
   207ce:	200a      	movs	r0, #10
   207d0:	4b05      	ldr	r3, [pc, #20]	; (207e8 <nm_bsp_reset+0x3c>)
   207d2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   207d4:	2101      	movs	r1, #1
   207d6:	201b      	movs	r0, #27
   207d8:	4b02      	ldr	r3, [pc, #8]	; (207e4 <nm_bsp_reset+0x38>)
   207da:	4798      	blx	r3
}
   207dc:	46c0      	nop			; (mov r8, r8)
   207de:	46bd      	mov	sp, r7
   207e0:	bd80      	pop	{r7, pc}
   207e2:	46c0      	nop			; (mov r8, r8)
   207e4:	0002069d 	.word	0x0002069d
   207e8:	000207ed 	.word	0x000207ed

000207ec <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   207ec:	b580      	push	{r7, lr}
   207ee:	b082      	sub	sp, #8
   207f0:	af00      	add	r7, sp, #0
   207f2:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   207f4:	687b      	ldr	r3, [r7, #4]
   207f6:	0018      	movs	r0, r3
   207f8:	4b02      	ldr	r3, [pc, #8]	; (20804 <nm_bsp_sleep+0x18>)
   207fa:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   207fc:	46c0      	nop			; (mov r8, r8)
   207fe:	46bd      	mov	sp, r7
   20800:	b002      	add	sp, #8
   20802:	bd80      	pop	{r7, pc}
   20804:	0001c601 	.word	0x0001c601

00020808 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20808:	b580      	push	{r7, lr}
   2080a:	b086      	sub	sp, #24
   2080c:	af00      	add	r7, sp, #0
   2080e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20810:	4b15      	ldr	r3, [pc, #84]	; (20868 <nm_bsp_register_isr+0x60>)
   20812:	687a      	ldr	r2, [r7, #4]
   20814:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20816:	230c      	movs	r3, #12
   20818:	18fb      	adds	r3, r7, r3
   2081a:	0018      	movs	r0, r3
   2081c:	4b13      	ldr	r3, [pc, #76]	; (2086c <nm_bsp_register_isr+0x64>)
   2081e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20820:	230c      	movs	r3, #12
   20822:	18fb      	adds	r3, r7, r3
   20824:	2229      	movs	r2, #41	; 0x29
   20826:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20828:	230c      	movs	r3, #12
   2082a:	18fb      	adds	r3, r7, r3
   2082c:	2200      	movs	r2, #0
   2082e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20830:	230c      	movs	r3, #12
   20832:	18fb      	adds	r3, r7, r3
   20834:	2201      	movs	r2, #1
   20836:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20838:	230c      	movs	r3, #12
   2083a:	18fb      	adds	r3, r7, r3
   2083c:	2202      	movs	r2, #2
   2083e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20840:	230c      	movs	r3, #12
   20842:	18fb      	adds	r3, r7, r3
   20844:	0019      	movs	r1, r3
   20846:	2009      	movs	r0, #9
   20848:	4b09      	ldr	r3, [pc, #36]	; (20870 <nm_bsp_register_isr+0x68>)
   2084a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   2084c:	4b09      	ldr	r3, [pc, #36]	; (20874 <nm_bsp_register_isr+0x6c>)
   2084e:	2200      	movs	r2, #0
   20850:	2109      	movs	r1, #9
   20852:	0018      	movs	r0, r3
   20854:	4b08      	ldr	r3, [pc, #32]	; (20878 <nm_bsp_register_isr+0x70>)
   20856:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20858:	2100      	movs	r1, #0
   2085a:	2009      	movs	r0, #9
   2085c:	4b07      	ldr	r3, [pc, #28]	; (2087c <nm_bsp_register_isr+0x74>)
   2085e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20860:	46c0      	nop			; (mov r8, r8)
   20862:	46bd      	mov	sp, r7
   20864:	b006      	add	sp, #24
   20866:	bd80      	pop	{r7, pc}
   20868:	2000429c 	.word	0x2000429c
   2086c:	00026c69 	.word	0x00026c69
   20870:	00026c9d 	.word	0x00026c9d
   20874:	000206f1 	.word	0x000206f1
   20878:	00026869 	.word	0x00026869
   2087c:	000268cd 	.word	0x000268cd

00020880 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20880:	b580      	push	{r7, lr}
   20882:	b082      	sub	sp, #8
   20884:	af00      	add	r7, sp, #0
   20886:	0002      	movs	r2, r0
   20888:	1dfb      	adds	r3, r7, #7
   2088a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   2088c:	1dfb      	adds	r3, r7, #7
   2088e:	781b      	ldrb	r3, [r3, #0]
   20890:	2b00      	cmp	r3, #0
   20892:	d004      	beq.n	2089e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20894:	2100      	movs	r1, #0
   20896:	2009      	movs	r0, #9
   20898:	4b05      	ldr	r3, [pc, #20]	; (208b0 <nm_bsp_interrupt_ctrl+0x30>)
   2089a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   2089c:	e003      	b.n	208a6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2089e:	2100      	movs	r1, #0
   208a0:	2009      	movs	r0, #9
   208a2:	4b04      	ldr	r3, [pc, #16]	; (208b4 <nm_bsp_interrupt_ctrl+0x34>)
   208a4:	4798      	blx	r3
}
   208a6:	46c0      	nop			; (mov r8, r8)
   208a8:	46bd      	mov	sp, r7
   208aa:	b002      	add	sp, #8
   208ac:	bd80      	pop	{r7, pc}
   208ae:	46c0      	nop			; (mov r8, r8)
   208b0:	000268cd 	.word	0x000268cd
   208b4:	00026915 	.word	0x00026915

000208b8 <system_pinmux_get_group_from_gpio_pin>:
{
   208b8:	b580      	push	{r7, lr}
   208ba:	b084      	sub	sp, #16
   208bc:	af00      	add	r7, sp, #0
   208be:	0002      	movs	r2, r0
   208c0:	1dfb      	adds	r3, r7, #7
   208c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   208c4:	230f      	movs	r3, #15
   208c6:	18fb      	adds	r3, r7, r3
   208c8:	1dfa      	adds	r2, r7, #7
   208ca:	7812      	ldrb	r2, [r2, #0]
   208cc:	09d2      	lsrs	r2, r2, #7
   208ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   208d0:	230e      	movs	r3, #14
   208d2:	18fb      	adds	r3, r7, r3
   208d4:	1dfa      	adds	r2, r7, #7
   208d6:	7812      	ldrb	r2, [r2, #0]
   208d8:	0952      	lsrs	r2, r2, #5
   208da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   208dc:	4b0d      	ldr	r3, [pc, #52]	; (20914 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   208de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   208e0:	230f      	movs	r3, #15
   208e2:	18fb      	adds	r3, r7, r3
   208e4:	781b      	ldrb	r3, [r3, #0]
   208e6:	2b00      	cmp	r3, #0
   208e8:	d10f      	bne.n	2090a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   208ea:	230f      	movs	r3, #15
   208ec:	18fb      	adds	r3, r7, r3
   208ee:	781b      	ldrb	r3, [r3, #0]
   208f0:	009b      	lsls	r3, r3, #2
   208f2:	2210      	movs	r2, #16
   208f4:	4694      	mov	ip, r2
   208f6:	44bc      	add	ip, r7
   208f8:	4463      	add	r3, ip
   208fa:	3b08      	subs	r3, #8
   208fc:	681a      	ldr	r2, [r3, #0]
   208fe:	230e      	movs	r3, #14
   20900:	18fb      	adds	r3, r7, r3
   20902:	781b      	ldrb	r3, [r3, #0]
   20904:	01db      	lsls	r3, r3, #7
   20906:	18d3      	adds	r3, r2, r3
   20908:	e000      	b.n	2090c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2090a:	2300      	movs	r3, #0
}
   2090c:	0018      	movs	r0, r3
   2090e:	46bd      	mov	sp, r7
   20910:	b004      	add	sp, #16
   20912:	bd80      	pop	{r7, pc}
   20914:	41004400 	.word	0x41004400

00020918 <system_interrupt_enable>:
{
   20918:	b580      	push	{r7, lr}
   2091a:	b082      	sub	sp, #8
   2091c:	af00      	add	r7, sp, #0
   2091e:	0002      	movs	r2, r0
   20920:	1dfb      	adds	r3, r7, #7
   20922:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20924:	4b06      	ldr	r3, [pc, #24]	; (20940 <system_interrupt_enable+0x28>)
   20926:	1dfa      	adds	r2, r7, #7
   20928:	7812      	ldrb	r2, [r2, #0]
   2092a:	0011      	movs	r1, r2
   2092c:	221f      	movs	r2, #31
   2092e:	400a      	ands	r2, r1
   20930:	2101      	movs	r1, #1
   20932:	4091      	lsls	r1, r2
   20934:	000a      	movs	r2, r1
   20936:	601a      	str	r2, [r3, #0]
}
   20938:	46c0      	nop			; (mov r8, r8)
   2093a:	46bd      	mov	sp, r7
   2093c:	b002      	add	sp, #8
   2093e:	bd80      	pop	{r7, pc}
   20940:	e000e100 	.word	0xe000e100

00020944 <system_interrupt_disable>:
{
   20944:	b580      	push	{r7, lr}
   20946:	b082      	sub	sp, #8
   20948:	af00      	add	r7, sp, #0
   2094a:	0002      	movs	r2, r0
   2094c:	1dfb      	adds	r3, r7, #7
   2094e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20950:	4a07      	ldr	r2, [pc, #28]	; (20970 <system_interrupt_disable+0x2c>)
   20952:	1dfb      	adds	r3, r7, #7
   20954:	781b      	ldrb	r3, [r3, #0]
   20956:	0019      	movs	r1, r3
   20958:	231f      	movs	r3, #31
   2095a:	400b      	ands	r3, r1
   2095c:	2101      	movs	r1, #1
   2095e:	4099      	lsls	r1, r3
   20960:	000b      	movs	r3, r1
   20962:	0019      	movs	r1, r3
   20964:	2380      	movs	r3, #128	; 0x80
   20966:	50d1      	str	r1, [r2, r3]
}
   20968:	46c0      	nop			; (mov r8, r8)
   2096a:	46bd      	mov	sp, r7
   2096c:	b002      	add	sp, #8
   2096e:	bd80      	pop	{r7, pc}
   20970:	e000e100 	.word	0xe000e100

00020974 <port_get_group_from_gpio_pin>:
{
   20974:	b580      	push	{r7, lr}
   20976:	b082      	sub	sp, #8
   20978:	af00      	add	r7, sp, #0
   2097a:	0002      	movs	r2, r0
   2097c:	1dfb      	adds	r3, r7, #7
   2097e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20980:	1dfb      	adds	r3, r7, #7
   20982:	781b      	ldrb	r3, [r3, #0]
   20984:	0018      	movs	r0, r3
   20986:	4b03      	ldr	r3, [pc, #12]	; (20994 <port_get_group_from_gpio_pin+0x20>)
   20988:	4798      	blx	r3
   2098a:	0003      	movs	r3, r0
}
   2098c:	0018      	movs	r0, r3
   2098e:	46bd      	mov	sp, r7
   20990:	b002      	add	sp, #8
   20992:	bd80      	pop	{r7, pc}
   20994:	000208b9 	.word	0x000208b9

00020998 <port_get_config_defaults>:
{
   20998:	b580      	push	{r7, lr}
   2099a:	b082      	sub	sp, #8
   2099c:	af00      	add	r7, sp, #0
   2099e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   209a0:	687b      	ldr	r3, [r7, #4]
   209a2:	2200      	movs	r2, #0
   209a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   209a6:	687b      	ldr	r3, [r7, #4]
   209a8:	2201      	movs	r2, #1
   209aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   209ac:	687b      	ldr	r3, [r7, #4]
   209ae:	2200      	movs	r2, #0
   209b0:	709a      	strb	r2, [r3, #2]
}
   209b2:	46c0      	nop			; (mov r8, r8)
   209b4:	46bd      	mov	sp, r7
   209b6:	b002      	add	sp, #8
   209b8:	bd80      	pop	{r7, pc}
	...

000209bc <port_pin_set_output_level>:
{
   209bc:	b580      	push	{r7, lr}
   209be:	b084      	sub	sp, #16
   209c0:	af00      	add	r7, sp, #0
   209c2:	0002      	movs	r2, r0
   209c4:	1dfb      	adds	r3, r7, #7
   209c6:	701a      	strb	r2, [r3, #0]
   209c8:	1dbb      	adds	r3, r7, #6
   209ca:	1c0a      	adds	r2, r1, #0
   209cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   209ce:	1dfb      	adds	r3, r7, #7
   209d0:	781b      	ldrb	r3, [r3, #0]
   209d2:	0018      	movs	r0, r3
   209d4:	4b0d      	ldr	r3, [pc, #52]	; (20a0c <port_pin_set_output_level+0x50>)
   209d6:	4798      	blx	r3
   209d8:	0003      	movs	r3, r0
   209da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   209dc:	1dfb      	adds	r3, r7, #7
   209de:	781b      	ldrb	r3, [r3, #0]
   209e0:	221f      	movs	r2, #31
   209e2:	4013      	ands	r3, r2
   209e4:	2201      	movs	r2, #1
   209e6:	409a      	lsls	r2, r3
   209e8:	0013      	movs	r3, r2
   209ea:	60bb      	str	r3, [r7, #8]
	if (level) {
   209ec:	1dbb      	adds	r3, r7, #6
   209ee:	781b      	ldrb	r3, [r3, #0]
   209f0:	2b00      	cmp	r3, #0
   209f2:	d003      	beq.n	209fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   209f4:	68fb      	ldr	r3, [r7, #12]
   209f6:	68ba      	ldr	r2, [r7, #8]
   209f8:	619a      	str	r2, [r3, #24]
}
   209fa:	e002      	b.n	20a02 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   209fc:	68fb      	ldr	r3, [r7, #12]
   209fe:	68ba      	ldr	r2, [r7, #8]
   20a00:	615a      	str	r2, [r3, #20]
}
   20a02:	46c0      	nop			; (mov r8, r8)
   20a04:	46bd      	mov	sp, r7
   20a06:	b004      	add	sp, #16
   20a08:	bd80      	pop	{r7, pc}
   20a0a:	46c0      	nop			; (mov r8, r8)
   20a0c:	00020975 	.word	0x00020975

00020a10 <spi_is_syncing>:
{
   20a10:	b580      	push	{r7, lr}
   20a12:	b084      	sub	sp, #16
   20a14:	af00      	add	r7, sp, #0
   20a16:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20a18:	687b      	ldr	r3, [r7, #4]
   20a1a:	681b      	ldr	r3, [r3, #0]
   20a1c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   20a1e:	68fb      	ldr	r3, [r7, #12]
   20a20:	69db      	ldr	r3, [r3, #28]
   20a22:	1e5a      	subs	r2, r3, #1
   20a24:	4193      	sbcs	r3, r2
   20a26:	b2db      	uxtb	r3, r3
}
   20a28:	0018      	movs	r0, r3
   20a2a:	46bd      	mov	sp, r7
   20a2c:	b004      	add	sp, #16
   20a2e:	bd80      	pop	{r7, pc}

00020a30 <spi_get_config_defaults>:
{
   20a30:	b580      	push	{r7, lr}
   20a32:	b082      	sub	sp, #8
   20a34:	af00      	add	r7, sp, #0
   20a36:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   20a38:	687b      	ldr	r3, [r7, #4]
   20a3a:	2201      	movs	r2, #1
   20a3c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   20a3e:	687b      	ldr	r3, [r7, #4]
   20a40:	2200      	movs	r2, #0
   20a42:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20a44:	687b      	ldr	r3, [r7, #4]
   20a46:	2200      	movs	r2, #0
   20a48:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20a4a:	687b      	ldr	r3, [r7, #4]
   20a4c:	22c0      	movs	r2, #192	; 0xc0
   20a4e:	0392      	lsls	r2, r2, #14
   20a50:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20a52:	687b      	ldr	r3, [r7, #4]
   20a54:	2200      	movs	r2, #0
   20a56:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20a58:	687b      	ldr	r3, [r7, #4]
   20a5a:	2200      	movs	r2, #0
   20a5c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   20a5e:	687b      	ldr	r3, [r7, #4]
   20a60:	2201      	movs	r2, #1
   20a62:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   20a64:	687b      	ldr	r3, [r7, #4]
   20a66:	2201      	movs	r2, #1
   20a68:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   20a6a:	687b      	ldr	r3, [r7, #4]
   20a6c:	2200      	movs	r2, #0
   20a6e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   20a70:	687b      	ldr	r3, [r7, #4]
   20a72:	2224      	movs	r2, #36	; 0x24
   20a74:	2100      	movs	r1, #0
   20a76:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20a78:	687b      	ldr	r3, [r7, #4]
   20a7a:	3318      	adds	r3, #24
   20a7c:	220c      	movs	r2, #12
   20a7e:	2100      	movs	r1, #0
   20a80:	0018      	movs	r0, r3
   20a82:	4b0a      	ldr	r3, [pc, #40]	; (20aac <spi_get_config_defaults+0x7c>)
   20a84:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   20a86:	687b      	ldr	r3, [r7, #4]
   20a88:	4a09      	ldr	r2, [pc, #36]	; (20ab0 <spi_get_config_defaults+0x80>)
   20a8a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20a8c:	687b      	ldr	r3, [r7, #4]
   20a8e:	2200      	movs	r2, #0
   20a90:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20a92:	687b      	ldr	r3, [r7, #4]
   20a94:	2200      	movs	r2, #0
   20a96:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20a98:	687b      	ldr	r3, [r7, #4]
   20a9a:	2200      	movs	r2, #0
   20a9c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   20a9e:	687b      	ldr	r3, [r7, #4]
   20aa0:	2200      	movs	r2, #0
   20aa2:	635a      	str	r2, [r3, #52]	; 0x34
};
   20aa4:	46c0      	nop			; (mov r8, r8)
   20aa6:	46bd      	mov	sp, r7
   20aa8:	b002      	add	sp, #8
   20aaa:	bd80      	pop	{r7, pc}
   20aac:	00034e13 	.word	0x00034e13
   20ab0:	000186a0 	.word	0x000186a0

00020ab4 <spi_slave_inst_get_config_defaults>:
{
   20ab4:	b580      	push	{r7, lr}
   20ab6:	b082      	sub	sp, #8
   20ab8:	af00      	add	r7, sp, #0
   20aba:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   20abc:	687b      	ldr	r3, [r7, #4]
   20abe:	220a      	movs	r2, #10
   20ac0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20ac2:	687b      	ldr	r3, [r7, #4]
   20ac4:	2200      	movs	r2, #0
   20ac6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20ac8:	687b      	ldr	r3, [r7, #4]
   20aca:	2200      	movs	r2, #0
   20acc:	709a      	strb	r2, [r3, #2]
}
   20ace:	46c0      	nop			; (mov r8, r8)
   20ad0:	46bd      	mov	sp, r7
   20ad2:	b002      	add	sp, #8
   20ad4:	bd80      	pop	{r7, pc}
	...

00020ad8 <spi_attach_slave>:
{
   20ad8:	b580      	push	{r7, lr}
   20ada:	b084      	sub	sp, #16
   20adc:	af00      	add	r7, sp, #0
   20ade:	6078      	str	r0, [r7, #4]
   20ae0:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   20ae2:	683b      	ldr	r3, [r7, #0]
   20ae4:	781a      	ldrb	r2, [r3, #0]
   20ae6:	687b      	ldr	r3, [r7, #4]
   20ae8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20aea:	683b      	ldr	r3, [r7, #0]
   20aec:	785a      	ldrb	r2, [r3, #1]
   20aee:	687b      	ldr	r3, [r7, #4]
   20af0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20af2:	683b      	ldr	r3, [r7, #0]
   20af4:	789a      	ldrb	r2, [r3, #2]
   20af6:	687b      	ldr	r3, [r7, #4]
   20af8:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   20afa:	230c      	movs	r3, #12
   20afc:	18fb      	adds	r3, r7, r3
   20afe:	0018      	movs	r0, r3
   20b00:	4b0b      	ldr	r3, [pc, #44]	; (20b30 <spi_attach_slave+0x58>)
   20b02:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20b04:	230c      	movs	r3, #12
   20b06:	18fb      	adds	r3, r7, r3
   20b08:	2201      	movs	r2, #1
   20b0a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20b0c:	687b      	ldr	r3, [r7, #4]
   20b0e:	781b      	ldrb	r3, [r3, #0]
   20b10:	220c      	movs	r2, #12
   20b12:	18ba      	adds	r2, r7, r2
   20b14:	0011      	movs	r1, r2
   20b16:	0018      	movs	r0, r3
   20b18:	4b06      	ldr	r3, [pc, #24]	; (20b34 <spi_attach_slave+0x5c>)
   20b1a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20b1c:	687b      	ldr	r3, [r7, #4]
   20b1e:	781b      	ldrb	r3, [r3, #0]
   20b20:	2101      	movs	r1, #1
   20b22:	0018      	movs	r0, r3
   20b24:	4b04      	ldr	r3, [pc, #16]	; (20b38 <spi_attach_slave+0x60>)
   20b26:	4798      	blx	r3
}
   20b28:	46c0      	nop			; (mov r8, r8)
   20b2a:	46bd      	mov	sp, r7
   20b2c:	b004      	add	sp, #16
   20b2e:	bd80      	pop	{r7, pc}
   20b30:	00020999 	.word	0x00020999
   20b34:	00026dc1 	.word	0x00026dc1
   20b38:	000209bd 	.word	0x000209bd

00020b3c <spi_enable>:
{
   20b3c:	b580      	push	{r7, lr}
   20b3e:	b084      	sub	sp, #16
   20b40:	af00      	add	r7, sp, #0
   20b42:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20b44:	687b      	ldr	r3, [r7, #4]
   20b46:	681b      	ldr	r3, [r3, #0]
   20b48:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20b4a:	687b      	ldr	r3, [r7, #4]
   20b4c:	681b      	ldr	r3, [r3, #0]
   20b4e:	0018      	movs	r0, r3
   20b50:	4b0b      	ldr	r3, [pc, #44]	; (20b80 <spi_enable+0x44>)
   20b52:	4798      	blx	r3
   20b54:	0003      	movs	r3, r0
   20b56:	0018      	movs	r0, r3
   20b58:	4b0a      	ldr	r3, [pc, #40]	; (20b84 <spi_enable+0x48>)
   20b5a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   20b5c:	46c0      	nop			; (mov r8, r8)
   20b5e:	687b      	ldr	r3, [r7, #4]
   20b60:	0018      	movs	r0, r3
   20b62:	4b09      	ldr	r3, [pc, #36]	; (20b88 <spi_enable+0x4c>)
   20b64:	4798      	blx	r3
   20b66:	1e03      	subs	r3, r0, #0
   20b68:	d1f9      	bne.n	20b5e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20b6a:	68fb      	ldr	r3, [r7, #12]
   20b6c:	681b      	ldr	r3, [r3, #0]
   20b6e:	2202      	movs	r2, #2
   20b70:	431a      	orrs	r2, r3
   20b72:	68fb      	ldr	r3, [r7, #12]
   20b74:	601a      	str	r2, [r3, #0]
}
   20b76:	46c0      	nop			; (mov r8, r8)
   20b78:	46bd      	mov	sp, r7
   20b7a:	b004      	add	sp, #16
   20b7c:	bd80      	pop	{r7, pc}
   20b7e:	46c0      	nop			; (mov r8, r8)
   20b80:	00027a91 	.word	0x00027a91
   20b84:	00020919 	.word	0x00020919
   20b88:	00020a11 	.word	0x00020a11

00020b8c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   20b8c:	b580      	push	{r7, lr}
   20b8e:	b084      	sub	sp, #16
   20b90:	af00      	add	r7, sp, #0
   20b92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20b94:	687b      	ldr	r3, [r7, #4]
   20b96:	681b      	ldr	r3, [r3, #0]
   20b98:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   20b9a:	687b      	ldr	r3, [r7, #4]
   20b9c:	681b      	ldr	r3, [r3, #0]
   20b9e:	0018      	movs	r0, r3
   20ba0:	4b0e      	ldr	r3, [pc, #56]	; (20bdc <spi_disable+0x50>)
   20ba2:	4798      	blx	r3
   20ba4:	0003      	movs	r3, r0
   20ba6:	0018      	movs	r0, r3
   20ba8:	4b0d      	ldr	r3, [pc, #52]	; (20be0 <spi_disable+0x54>)
   20baa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20bac:	46c0      	nop			; (mov r8, r8)
   20bae:	687b      	ldr	r3, [r7, #4]
   20bb0:	0018      	movs	r0, r3
   20bb2:	4b0c      	ldr	r3, [pc, #48]	; (20be4 <spi_disable+0x58>)
   20bb4:	4798      	blx	r3
   20bb6:	1e03      	subs	r3, r0, #0
   20bb8:	d1f9      	bne.n	20bae <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   20bba:	68fb      	ldr	r3, [r7, #12]
   20bbc:	228f      	movs	r2, #143	; 0x8f
   20bbe:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20bc0:	68fb      	ldr	r3, [r7, #12]
   20bc2:	228f      	movs	r2, #143	; 0x8f
   20bc4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20bc6:	68fb      	ldr	r3, [r7, #12]
   20bc8:	681b      	ldr	r3, [r3, #0]
   20bca:	2202      	movs	r2, #2
   20bcc:	4393      	bics	r3, r2
   20bce:	001a      	movs	r2, r3
   20bd0:	68fb      	ldr	r3, [r7, #12]
   20bd2:	601a      	str	r2, [r3, #0]
}
   20bd4:	46c0      	nop			; (mov r8, r8)
   20bd6:	46bd      	mov	sp, r7
   20bd8:	b004      	add	sp, #16
   20bda:	bd80      	pop	{r7, pc}
   20bdc:	00027a91 	.word	0x00027a91
   20be0:	00020945 	.word	0x00020945
   20be4:	00020a11 	.word	0x00020a11

00020be8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   20be8:	b580      	push	{r7, lr}
   20bea:	b084      	sub	sp, #16
   20bec:	af00      	add	r7, sp, #0
   20bee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20bf0:	687b      	ldr	r3, [r7, #4]
   20bf2:	681b      	ldr	r3, [r3, #0]
   20bf4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20bf6:	68fb      	ldr	r3, [r7, #12]
   20bf8:	7e1b      	ldrb	r3, [r3, #24]
   20bfa:	b2db      	uxtb	r3, r3
   20bfc:	001a      	movs	r2, r3
   20bfe:	2302      	movs	r3, #2
   20c00:	4013      	ands	r3, r2
   20c02:	1e5a      	subs	r2, r3, #1
   20c04:	4193      	sbcs	r3, r2
   20c06:	b2db      	uxtb	r3, r3
}
   20c08:	0018      	movs	r0, r3
   20c0a:	46bd      	mov	sp, r7
   20c0c:	b004      	add	sp, #16
   20c0e:	bd80      	pop	{r7, pc}

00020c10 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20c10:	b580      	push	{r7, lr}
   20c12:	b084      	sub	sp, #16
   20c14:	af00      	add	r7, sp, #0
   20c16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20c18:	687b      	ldr	r3, [r7, #4]
   20c1a:	681b      	ldr	r3, [r3, #0]
   20c1c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   20c1e:	68fb      	ldr	r3, [r7, #12]
   20c20:	7e1b      	ldrb	r3, [r3, #24]
   20c22:	b2db      	uxtb	r3, r3
   20c24:	001a      	movs	r2, r3
   20c26:	2301      	movs	r3, #1
   20c28:	4013      	ands	r3, r2
   20c2a:	1e5a      	subs	r2, r3, #1
   20c2c:	4193      	sbcs	r3, r2
   20c2e:	b2db      	uxtb	r3, r3
}
   20c30:	0018      	movs	r0, r3
   20c32:	46bd      	mov	sp, r7
   20c34:	b004      	add	sp, #16
   20c36:	bd80      	pop	{r7, pc}

00020c38 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20c38:	b580      	push	{r7, lr}
   20c3a:	b084      	sub	sp, #16
   20c3c:	af00      	add	r7, sp, #0
   20c3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20c40:	687b      	ldr	r3, [r7, #4]
   20c42:	681b      	ldr	r3, [r3, #0]
   20c44:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20c46:	68fb      	ldr	r3, [r7, #12]
   20c48:	7e1b      	ldrb	r3, [r3, #24]
   20c4a:	b2db      	uxtb	r3, r3
   20c4c:	001a      	movs	r2, r3
   20c4e:	2304      	movs	r3, #4
   20c50:	4013      	ands	r3, r2
   20c52:	1e5a      	subs	r2, r3, #1
   20c54:	4193      	sbcs	r3, r2
   20c56:	b2db      	uxtb	r3, r3
}
   20c58:	0018      	movs	r0, r3
   20c5a:	46bd      	mov	sp, r7
   20c5c:	b004      	add	sp, #16
   20c5e:	bd80      	pop	{r7, pc}

00020c60 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20c60:	b580      	push	{r7, lr}
   20c62:	b084      	sub	sp, #16
   20c64:	af00      	add	r7, sp, #0
   20c66:	6078      	str	r0, [r7, #4]
   20c68:	000a      	movs	r2, r1
   20c6a:	1cbb      	adds	r3, r7, #2
   20c6c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20c6e:	687b      	ldr	r3, [r7, #4]
   20c70:	681b      	ldr	r3, [r3, #0]
   20c72:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20c74:	687b      	ldr	r3, [r7, #4]
   20c76:	0018      	movs	r0, r3
   20c78:	4b0a      	ldr	r3, [pc, #40]	; (20ca4 <spi_write+0x44>)
   20c7a:	4798      	blx	r3
   20c7c:	0003      	movs	r3, r0
   20c7e:	001a      	movs	r2, r3
   20c80:	2301      	movs	r3, #1
   20c82:	4053      	eors	r3, r2
   20c84:	b2db      	uxtb	r3, r3
   20c86:	2b00      	cmp	r3, #0
   20c88:	d001      	beq.n	20c8e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   20c8a:	2305      	movs	r3, #5
   20c8c:	e006      	b.n	20c9c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   20c8e:	1cbb      	adds	r3, r7, #2
   20c90:	881b      	ldrh	r3, [r3, #0]
   20c92:	05db      	lsls	r3, r3, #23
   20c94:	0dda      	lsrs	r2, r3, #23
   20c96:	68fb      	ldr	r3, [r7, #12]
   20c98:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   20c9a:	2300      	movs	r3, #0
}
   20c9c:	0018      	movs	r0, r3
   20c9e:	46bd      	mov	sp, r7
   20ca0:	b004      	add	sp, #16
   20ca2:	bd80      	pop	{r7, pc}
   20ca4:	00020c11 	.word	0x00020c11

00020ca8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20ca8:	b580      	push	{r7, lr}
   20caa:	b084      	sub	sp, #16
   20cac:	af00      	add	r7, sp, #0
   20cae:	6078      	str	r0, [r7, #4]
   20cb0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20cb2:	687b      	ldr	r3, [r7, #4]
   20cb4:	681b      	ldr	r3, [r3, #0]
   20cb6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20cb8:	687b      	ldr	r3, [r7, #4]
   20cba:	0018      	movs	r0, r3
   20cbc:	4b1b      	ldr	r3, [pc, #108]	; (20d2c <spi_read+0x84>)
   20cbe:	4798      	blx	r3
   20cc0:	0003      	movs	r3, r0
   20cc2:	001a      	movs	r2, r3
   20cc4:	2301      	movs	r3, #1
   20cc6:	4053      	eors	r3, r2
   20cc8:	b2db      	uxtb	r3, r3
   20cca:	2b00      	cmp	r3, #0
   20ccc:	d001      	beq.n	20cd2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20cce:	2310      	movs	r3, #16
   20cd0:	e027      	b.n	20d22 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20cd2:	230f      	movs	r3, #15
   20cd4:	18fb      	adds	r3, r7, r3
   20cd6:	2200      	movs	r2, #0
   20cd8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   20cda:	68bb      	ldr	r3, [r7, #8]
   20cdc:	8b5b      	ldrh	r3, [r3, #26]
   20cde:	b29b      	uxth	r3, r3
   20ce0:	001a      	movs	r2, r3
   20ce2:	2304      	movs	r3, #4
   20ce4:	4013      	ands	r3, r2
   20ce6:	d006      	beq.n	20cf6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20ce8:	230f      	movs	r3, #15
   20cea:	18fb      	adds	r3, r7, r3
   20cec:	221e      	movs	r2, #30
   20cee:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20cf0:	68bb      	ldr	r3, [r7, #8]
   20cf2:	2204      	movs	r2, #4
   20cf4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20cf6:	687b      	ldr	r3, [r7, #4]
   20cf8:	799b      	ldrb	r3, [r3, #6]
   20cfa:	2b01      	cmp	r3, #1
   20cfc:	d108      	bne.n	20d10 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20cfe:	68bb      	ldr	r3, [r7, #8]
   20d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20d02:	b29b      	uxth	r3, r3
   20d04:	05db      	lsls	r3, r3, #23
   20d06:	0ddb      	lsrs	r3, r3, #23
   20d08:	b29a      	uxth	r2, r3
   20d0a:	683b      	ldr	r3, [r7, #0]
   20d0c:	801a      	strh	r2, [r3, #0]
   20d0e:	e005      	b.n	20d1c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20d10:	68bb      	ldr	r3, [r7, #8]
   20d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20d14:	b2db      	uxtb	r3, r3
   20d16:	b29a      	uxth	r2, r3
   20d18:	683b      	ldr	r3, [r7, #0]
   20d1a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20d1c:	230f      	movs	r3, #15
   20d1e:	18fb      	adds	r3, r7, r3
   20d20:	781b      	ldrb	r3, [r3, #0]
}
   20d22:	0018      	movs	r0, r3
   20d24:	46bd      	mov	sp, r7
   20d26:	b004      	add	sp, #16
   20d28:	bd80      	pop	{r7, pc}
   20d2a:	46c0      	nop			; (mov r8, r8)
   20d2c:	00020c39 	.word	0x00020c39

00020d30 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20d30:	b580      	push	{r7, lr}
   20d32:	b086      	sub	sp, #24
   20d34:	af00      	add	r7, sp, #0
   20d36:	60f8      	str	r0, [r7, #12]
   20d38:	60b9      	str	r1, [r7, #8]
   20d3a:	1dbb      	adds	r3, r7, #6
   20d3c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20d3e:	2313      	movs	r3, #19
   20d40:	18fb      	adds	r3, r7, r3
   20d42:	22ff      	movs	r2, #255	; 0xff
   20d44:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20d46:	2317      	movs	r3, #23
   20d48:	18fb      	adds	r3, r7, r3
   20d4a:	2200      	movs	r2, #0
   20d4c:	701a      	strb	r2, [r3, #0]
   20d4e:	2316      	movs	r3, #22
   20d50:	18fb      	adds	r3, r7, r3
   20d52:	2200      	movs	r2, #0
   20d54:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20d56:	2314      	movs	r3, #20
   20d58:	18fb      	adds	r3, r7, r3
   20d5a:	2200      	movs	r2, #0
   20d5c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   20d5e:	2310      	movs	r3, #16
   20d60:	18fb      	adds	r3, r7, r3
   20d62:	2200      	movs	r2, #0
   20d64:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   20d66:	68bb      	ldr	r3, [r7, #8]
   20d68:	2b00      	cmp	r3, #0
   20d6a:	d102      	bne.n	20d72 <spi_rw+0x42>
   20d6c:	68fb      	ldr	r3, [r7, #12]
   20d6e:	2b00      	cmp	r3, #0
   20d70:	d003      	beq.n	20d7a <spi_rw+0x4a>
   20d72:	1dbb      	adds	r3, r7, #6
   20d74:	881b      	ldrh	r3, [r3, #0]
   20d76:	2b00      	cmp	r3, #0
   20d78:	d102      	bne.n	20d80 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   20d7a:	230f      	movs	r3, #15
   20d7c:	425b      	negs	r3, r3
   20d7e:	e07e      	b.n	20e7e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20d80:	68fb      	ldr	r3, [r7, #12]
   20d82:	2b00      	cmp	r3, #0
   20d84:	d106      	bne.n	20d94 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20d86:	2313      	movs	r3, #19
   20d88:	18fb      	adds	r3, r7, r3
   20d8a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   20d8c:	2317      	movs	r3, #23
   20d8e:	18fb      	adds	r3, r7, r3
   20d90:	2201      	movs	r2, #1
   20d92:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   20d94:	68bb      	ldr	r3, [r7, #8]
   20d96:	2b00      	cmp	r3, #0
   20d98:	d106      	bne.n	20da8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   20d9a:	2313      	movs	r3, #19
   20d9c:	18fb      	adds	r3, r7, r3
   20d9e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   20da0:	2316      	movs	r3, #22
   20da2:	18fb      	adds	r3, r7, r3
   20da4:	2201      	movs	r2, #1
   20da6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   20da8:	4937      	ldr	r1, [pc, #220]	; (20e88 <spi_rw+0x158>)
   20daa:	4b38      	ldr	r3, [pc, #224]	; (20e8c <spi_rw+0x15c>)
   20dac:	2201      	movs	r2, #1
   20dae:	0018      	movs	r0, r3
   20db0:	4b37      	ldr	r3, [pc, #220]	; (20e90 <spi_rw+0x160>)
   20db2:	4798      	blx	r3

	while (u16Sz) {
   20db4:	e04c      	b.n	20e50 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   20db6:	68fb      	ldr	r3, [r7, #12]
   20db8:	781a      	ldrb	r2, [r3, #0]
   20dba:	2314      	movs	r3, #20
   20dbc:	18fb      	adds	r3, r7, r3
   20dbe:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20dc0:	46c0      	nop			; (mov r8, r8)
   20dc2:	4b32      	ldr	r3, [pc, #200]	; (20e8c <spi_rw+0x15c>)
   20dc4:	0018      	movs	r0, r3
   20dc6:	4b33      	ldr	r3, [pc, #204]	; (20e94 <spi_rw+0x164>)
   20dc8:	4798      	blx	r3
   20dca:	0003      	movs	r3, r0
   20dcc:	001a      	movs	r2, r3
   20dce:	2301      	movs	r3, #1
   20dd0:	4053      	eors	r3, r2
   20dd2:	b2db      	uxtb	r3, r3
   20dd4:	2b00      	cmp	r3, #0
   20dd6:	d1f4      	bne.n	20dc2 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20dd8:	46c0      	nop			; (mov r8, r8)
   20dda:	2314      	movs	r3, #20
   20ddc:	18fb      	adds	r3, r7, r3
   20dde:	881a      	ldrh	r2, [r3, #0]
   20de0:	4b2a      	ldr	r3, [pc, #168]	; (20e8c <spi_rw+0x15c>)
   20de2:	0011      	movs	r1, r2
   20de4:	0018      	movs	r0, r3
   20de6:	4b2c      	ldr	r3, [pc, #176]	; (20e98 <spi_rw+0x168>)
   20de8:	4798      	blx	r3
   20dea:	1e03      	subs	r3, r0, #0
   20dec:	d1f5      	bne.n	20dda <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   20dee:	46c0      	nop			; (mov r8, r8)
   20df0:	4b26      	ldr	r3, [pc, #152]	; (20e8c <spi_rw+0x15c>)
   20df2:	0018      	movs	r0, r3
   20df4:	4b29      	ldr	r3, [pc, #164]	; (20e9c <spi_rw+0x16c>)
   20df6:	4798      	blx	r3
   20df8:	0003      	movs	r3, r0
   20dfa:	001a      	movs	r2, r3
   20dfc:	2301      	movs	r3, #1
   20dfe:	4053      	eors	r3, r2
   20e00:	b2db      	uxtb	r3, r3
   20e02:	2b00      	cmp	r3, #0
   20e04:	d1f4      	bne.n	20df0 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20e06:	46c0      	nop			; (mov r8, r8)
   20e08:	2310      	movs	r3, #16
   20e0a:	18fa      	adds	r2, r7, r3
   20e0c:	4b1f      	ldr	r3, [pc, #124]	; (20e8c <spi_rw+0x15c>)
   20e0e:	0011      	movs	r1, r2
   20e10:	0018      	movs	r0, r3
   20e12:	4b23      	ldr	r3, [pc, #140]	; (20ea0 <spi_rw+0x170>)
   20e14:	4798      	blx	r3
   20e16:	1e03      	subs	r3, r0, #0
   20e18:	d1f6      	bne.n	20e08 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   20e1a:	2310      	movs	r3, #16
   20e1c:	18fb      	adds	r3, r7, r3
   20e1e:	881b      	ldrh	r3, [r3, #0]
   20e20:	b2da      	uxtb	r2, r3
   20e22:	68bb      	ldr	r3, [r7, #8]
   20e24:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   20e26:	1dbb      	adds	r3, r7, #6
   20e28:	881a      	ldrh	r2, [r3, #0]
   20e2a:	1dbb      	adds	r3, r7, #6
   20e2c:	3a01      	subs	r2, #1
   20e2e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20e30:	2316      	movs	r3, #22
   20e32:	18fb      	adds	r3, r7, r3
   20e34:	781b      	ldrb	r3, [r3, #0]
   20e36:	2b00      	cmp	r3, #0
   20e38:	d102      	bne.n	20e40 <spi_rw+0x110>
			pu8Miso++;
   20e3a:	68bb      	ldr	r3, [r7, #8]
   20e3c:	3301      	adds	r3, #1
   20e3e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20e40:	2317      	movs	r3, #23
   20e42:	18fb      	adds	r3, r7, r3
   20e44:	781b      	ldrb	r3, [r3, #0]
   20e46:	2b00      	cmp	r3, #0
   20e48:	d102      	bne.n	20e50 <spi_rw+0x120>
			pu8Mosi++;
   20e4a:	68fb      	ldr	r3, [r7, #12]
   20e4c:	3301      	adds	r3, #1
   20e4e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20e50:	1dbb      	adds	r3, r7, #6
   20e52:	881b      	ldrh	r3, [r3, #0]
   20e54:	2b00      	cmp	r3, #0
   20e56:	d1ae      	bne.n	20db6 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20e58:	46c0      	nop			; (mov r8, r8)
   20e5a:	4b0c      	ldr	r3, [pc, #48]	; (20e8c <spi_rw+0x15c>)
   20e5c:	0018      	movs	r0, r3
   20e5e:	4b11      	ldr	r3, [pc, #68]	; (20ea4 <spi_rw+0x174>)
   20e60:	4798      	blx	r3
   20e62:	0003      	movs	r3, r0
   20e64:	001a      	movs	r2, r3
   20e66:	2301      	movs	r3, #1
   20e68:	4053      	eors	r3, r2
   20e6a:	b2db      	uxtb	r3, r3
   20e6c:	2b00      	cmp	r3, #0
   20e6e:	d1f4      	bne.n	20e5a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20e70:	4905      	ldr	r1, [pc, #20]	; (20e88 <spi_rw+0x158>)
   20e72:	4b06      	ldr	r3, [pc, #24]	; (20e8c <spi_rw+0x15c>)
   20e74:	2200      	movs	r2, #0
   20e76:	0018      	movs	r0, r3
   20e78:	4b05      	ldr	r3, [pc, #20]	; (20e90 <spi_rw+0x160>)
   20e7a:	4798      	blx	r3

	return M2M_SUCCESS;
   20e7c:	2300      	movs	r3, #0
}
   20e7e:	0018      	movs	r0, r3
   20e80:	46bd      	mov	sp, r7
   20e82:	b006      	add	sp, #24
   20e84:	bd80      	pop	{r7, pc}
   20e86:	46c0      	nop			; (mov r8, r8)
   20e88:	20005ad0 	.word	0x20005ad0
   20e8c:	20005ad4 	.word	0x20005ad4
   20e90:	00028505 	.word	0x00028505
   20e94:	00020c11 	.word	0x00020c11
   20e98:	00020c61 	.word	0x00020c61
   20e9c:	00020c39 	.word	0x00020c39
   20ea0:	00020ca9 	.word	0x00020ca9
   20ea4:	00020be9 	.word	0x00020be9

00020ea8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   20ea8:	b580      	push	{r7, lr}
   20eaa:	b092      	sub	sp, #72	; 0x48
   20eac:	af00      	add	r7, sp, #0
   20eae:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20eb0:	2347      	movs	r3, #71	; 0x47
   20eb2:	18fb      	adds	r3, r7, r3
   20eb4:	2200      	movs	r2, #0
   20eb6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   20eb8:	2308      	movs	r3, #8
   20eba:	18fb      	adds	r3, r7, r3
   20ebc:	0018      	movs	r0, r3
   20ebe:	4b26      	ldr	r3, [pc, #152]	; (20f58 <nm_bus_init+0xb0>)
   20ec0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20ec2:	2308      	movs	r3, #8
   20ec4:	18fb      	adds	r3, r7, r3
   20ec6:	220e      	movs	r2, #14
   20ec8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   20eca:	2308      	movs	r3, #8
   20ecc:	18fa      	adds	r2, r7, r3
   20ece:	4b23      	ldr	r3, [pc, #140]	; (20f5c <nm_bus_init+0xb4>)
   20ed0:	0011      	movs	r1, r2
   20ed2:	0018      	movs	r0, r3
   20ed4:	4b22      	ldr	r3, [pc, #136]	; (20f60 <nm_bus_init+0xb8>)
   20ed6:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20ed8:	230c      	movs	r3, #12
   20eda:	18fb      	adds	r3, r7, r3
   20edc:	0018      	movs	r0, r3
   20ede:	4b21      	ldr	r3, [pc, #132]	; (20f64 <nm_bus_init+0xbc>)
   20ee0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20ee2:	230c      	movs	r3, #12
   20ee4:	18fb      	adds	r3, r7, r3
   20ee6:	22c0      	movs	r2, #192	; 0xc0
   20ee8:	0392      	lsls	r2, r2, #14
   20eea:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20eec:	230c      	movs	r3, #12
   20eee:	18fb      	adds	r3, r7, r3
   20ef0:	4a1d      	ldr	r2, [pc, #116]	; (20f68 <nm_bus_init+0xc0>)
   20ef2:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20ef4:	230c      	movs	r3, #12
   20ef6:	18fb      	adds	r3, r7, r3
   20ef8:	4a1c      	ldr	r2, [pc, #112]	; (20f6c <nm_bus_init+0xc4>)
   20efa:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20efc:	230c      	movs	r3, #12
   20efe:	18fb      	adds	r3, r7, r3
   20f00:	2201      	movs	r2, #1
   20f02:	4252      	negs	r2, r2
   20f04:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20f06:	230c      	movs	r3, #12
   20f08:	18fb      	adds	r3, r7, r3
   20f0a:	4a19      	ldr	r2, [pc, #100]	; (20f70 <nm_bus_init+0xc8>)
   20f0c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20f0e:	230c      	movs	r3, #12
   20f10:	18fb      	adds	r3, r7, r3
   20f12:	2200      	movs	r2, #0
   20f14:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20f16:	230c      	movs	r3, #12
   20f18:	18fb      	adds	r3, r7, r3
   20f1a:	4a16      	ldr	r2, [pc, #88]	; (20f74 <nm_bus_init+0xcc>)
   20f1c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20f1e:	230c      	movs	r3, #12
   20f20:	18fa      	adds	r2, r7, r3
   20f22:	4915      	ldr	r1, [pc, #84]	; (20f78 <nm_bus_init+0xd0>)
   20f24:	4b15      	ldr	r3, [pc, #84]	; (20f7c <nm_bus_init+0xd4>)
   20f26:	0018      	movs	r0, r3
   20f28:	4b15      	ldr	r3, [pc, #84]	; (20f80 <nm_bus_init+0xd8>)
   20f2a:	4798      	blx	r3
   20f2c:	1e03      	subs	r3, r0, #0
   20f2e:	d002      	beq.n	20f36 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20f30:	2306      	movs	r3, #6
   20f32:	425b      	negs	r3, r3
   20f34:	e00c      	b.n	20f50 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20f36:	4b11      	ldr	r3, [pc, #68]	; (20f7c <nm_bus_init+0xd4>)
   20f38:	0018      	movs	r0, r3
   20f3a:	4b12      	ldr	r3, [pc, #72]	; (20f84 <nm_bus_init+0xdc>)
   20f3c:	4798      	blx	r3

	nm_bsp_reset();
   20f3e:	4b12      	ldr	r3, [pc, #72]	; (20f88 <nm_bus_init+0xe0>)
   20f40:	4798      	blx	r3
	nm_bsp_sleep(1);
   20f42:	2001      	movs	r0, #1
   20f44:	4b11      	ldr	r3, [pc, #68]	; (20f8c <nm_bus_init+0xe4>)
   20f46:	4798      	blx	r3
#endif
	return result;
   20f48:	2347      	movs	r3, #71	; 0x47
   20f4a:	18fb      	adds	r3, r7, r3
   20f4c:	781b      	ldrb	r3, [r3, #0]
   20f4e:	b25b      	sxtb	r3, r3
}
   20f50:	0018      	movs	r0, r3
   20f52:	46bd      	mov	sp, r7
   20f54:	b012      	add	sp, #72	; 0x48
   20f56:	bd80      	pop	{r7, pc}
   20f58:	00020ab5 	.word	0x00020ab5
   20f5c:	20005ad0 	.word	0x20005ad0
   20f60:	00020ad9 	.word	0x00020ad9
   20f64:	00020a31 	.word	0x00020a31
   20f68:	000c0002 	.word	0x000c0002
   20f6c:	000d0002 	.word	0x000d0002
   20f70:	000f0002 	.word	0x000f0002
   20f74:	00124f80 	.word	0x00124f80
   20f78:	42001000 	.word	0x42001000
   20f7c:	20005ad4 	.word	0x20005ad4
   20f80:	00028241 	.word	0x00028241
   20f84:	00020b3d 	.word	0x00020b3d
   20f88:	000207ad 	.word	0x000207ad
   20f8c:	000207ed 	.word	0x000207ed

00020f90 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   20f90:	b590      	push	{r4, r7, lr}
   20f92:	b085      	sub	sp, #20
   20f94:	af00      	add	r7, sp, #0
   20f96:	0002      	movs	r2, r0
   20f98:	6039      	str	r1, [r7, #0]
   20f9a:	1dfb      	adds	r3, r7, #7
   20f9c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   20f9e:	230f      	movs	r3, #15
   20fa0:	18fb      	adds	r3, r7, r3
   20fa2:	2200      	movs	r2, #0
   20fa4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   20fa6:	1dfb      	adds	r3, r7, #7
   20fa8:	781b      	ldrb	r3, [r3, #0]
   20faa:	2b03      	cmp	r3, #3
   20fac:	d10f      	bne.n	20fce <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   20fae:	683b      	ldr	r3, [r7, #0]
   20fb0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   20fb2:	68bb      	ldr	r3, [r7, #8]
   20fb4:	6818      	ldr	r0, [r3, #0]
   20fb6:	68bb      	ldr	r3, [r7, #8]
   20fb8:	6859      	ldr	r1, [r3, #4]
   20fba:	68bb      	ldr	r3, [r7, #8]
   20fbc:	891b      	ldrh	r3, [r3, #8]
   20fbe:	220f      	movs	r2, #15
   20fc0:	18bc      	adds	r4, r7, r2
   20fc2:	001a      	movs	r2, r3
   20fc4:	4b10      	ldr	r3, [pc, #64]	; (21008 <nm_bus_ioctl+0x78>)
   20fc6:	4798      	blx	r3
   20fc8:	0003      	movs	r3, r0
   20fca:	7023      	strb	r3, [r4, #0]
		}
		break;
   20fcc:	e013      	b.n	20ff6 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20fce:	230f      	movs	r3, #15
   20fd0:	18fb      	adds	r3, r7, r3
   20fd2:	22ff      	movs	r2, #255	; 0xff
   20fd4:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20fd6:	2383      	movs	r3, #131	; 0x83
   20fd8:	005a      	lsls	r2, r3, #1
   20fda:	490c      	ldr	r1, [pc, #48]	; (2100c <nm_bus_ioctl+0x7c>)
   20fdc:	4b0c      	ldr	r3, [pc, #48]	; (21010 <nm_bus_ioctl+0x80>)
   20fde:	0018      	movs	r0, r3
   20fe0:	4b0c      	ldr	r3, [pc, #48]	; (21014 <nm_bus_ioctl+0x84>)
   20fe2:	4798      	blx	r3
   20fe4:	4b0c      	ldr	r3, [pc, #48]	; (21018 <nm_bus_ioctl+0x88>)
   20fe6:	0018      	movs	r0, r3
   20fe8:	4b0a      	ldr	r3, [pc, #40]	; (21014 <nm_bus_ioctl+0x84>)
   20fea:	4798      	blx	r3
   20fec:	4b0b      	ldr	r3, [pc, #44]	; (2101c <nm_bus_ioctl+0x8c>)
   20fee:	0018      	movs	r0, r3
   20ff0:	4b08      	ldr	r3, [pc, #32]	; (21014 <nm_bus_ioctl+0x84>)
   20ff2:	4798      	blx	r3
			break;
   20ff4:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20ff6:	230f      	movs	r3, #15
   20ff8:	18fb      	adds	r3, r7, r3
   20ffa:	781b      	ldrb	r3, [r3, #0]
   20ffc:	b25b      	sxtb	r3, r3
}
   20ffe:	0018      	movs	r0, r3
   21000:	46bd      	mov	sp, r7
   21002:	b005      	add	sp, #20
   21004:	bd90      	pop	{r4, r7, pc}
   21006:	46c0      	nop			; (mov r8, r8)
   21008:	00020d31 	.word	0x00020d31
   2100c:	000389e4 	.word	0x000389e4
   21010:	000389b8 	.word	0x000389b8
   21014:	0001e399 	.word	0x0001e399
   21018:	000389cc 	.word	0x000389cc
   2101c:	000389e0 	.word	0x000389e0

00021020 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   21020:	b580      	push	{r7, lr}
   21022:	b082      	sub	sp, #8
   21024:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   21026:	1dfb      	adds	r3, r7, #7
   21028:	2200      	movs	r2, #0
   2102a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   2102c:	1d3b      	adds	r3, r7, #4
   2102e:	0018      	movs	r0, r3
   21030:	4b13      	ldr	r3, [pc, #76]	; (21080 <nm_bus_deinit+0x60>)
   21032:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   21034:	1d3b      	adds	r3, r7, #4
   21036:	2200      	movs	r2, #0
   21038:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2103a:	1d3b      	adds	r3, r7, #4
   2103c:	2200      	movs	r2, #0
   2103e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21040:	4b10      	ldr	r3, [pc, #64]	; (21084 <nm_bus_deinit+0x64>)
   21042:	0018      	movs	r0, r3
   21044:	4b10      	ldr	r3, [pc, #64]	; (21088 <nm_bus_deinit+0x68>)
   21046:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   21048:	1d3b      	adds	r3, r7, #4
   2104a:	0019      	movs	r1, r3
   2104c:	200c      	movs	r0, #12
   2104e:	4b0f      	ldr	r3, [pc, #60]	; (2108c <nm_bus_deinit+0x6c>)
   21050:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21052:	1d3b      	adds	r3, r7, #4
   21054:	0019      	movs	r1, r3
   21056:	200f      	movs	r0, #15
   21058:	4b0c      	ldr	r3, [pc, #48]	; (2108c <nm_bus_deinit+0x6c>)
   2105a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   2105c:	1d3b      	adds	r3, r7, #4
   2105e:	0019      	movs	r1, r3
   21060:	200d      	movs	r0, #13
   21062:	4b0a      	ldr	r3, [pc, #40]	; (2108c <nm_bus_deinit+0x6c>)
   21064:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   21066:	1d3b      	adds	r3, r7, #4
   21068:	0019      	movs	r1, r3
   2106a:	200e      	movs	r0, #14
   2106c:	4b07      	ldr	r3, [pc, #28]	; (2108c <nm_bus_deinit+0x6c>)
   2106e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21070:	1dfb      	adds	r3, r7, #7
   21072:	781b      	ldrb	r3, [r3, #0]
   21074:	b25b      	sxtb	r3, r3
}
   21076:	0018      	movs	r0, r3
   21078:	46bd      	mov	sp, r7
   2107a:	b002      	add	sp, #8
   2107c:	bd80      	pop	{r7, pc}
   2107e:	46c0      	nop			; (mov r8, r8)
   21080:	00020999 	.word	0x00020999
   21084:	20005ad4 	.word	0x20005ad4
   21088:	00020b8d 	.word	0x00020b8d
   2108c:	00026dc1 	.word	0x00026dc1

00021090 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21090:	b580      	push	{r7, lr}
   21092:	b084      	sub	sp, #16
   21094:	af00      	add	r7, sp, #0
   21096:	60f8      	str	r0, [r7, #12]
   21098:	60b9      	str	r1, [r7, #8]
   2109a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   2109c:	687b      	ldr	r3, [r7, #4]
   2109e:	2b00      	cmp	r3, #0
   210a0:	d010      	beq.n	210c4 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   210a2:	68bb      	ldr	r3, [r7, #8]
   210a4:	781a      	ldrb	r2, [r3, #0]
   210a6:	68fb      	ldr	r3, [r7, #12]
   210a8:	701a      	strb	r2, [r3, #0]
		pDst++;
   210aa:	68fb      	ldr	r3, [r7, #12]
   210ac:	3301      	adds	r3, #1
   210ae:	60fb      	str	r3, [r7, #12]
		pSrc++;
   210b0:	68bb      	ldr	r3, [r7, #8]
   210b2:	3301      	adds	r3, #1
   210b4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   210b6:	687b      	ldr	r3, [r7, #4]
   210b8:	3b01      	subs	r3, #1
   210ba:	607b      	str	r3, [r7, #4]
   210bc:	687b      	ldr	r3, [r7, #4]
   210be:	2b00      	cmp	r3, #0
   210c0:	d1ef      	bne.n	210a2 <m2m_memcpy+0x12>
   210c2:	e000      	b.n	210c6 <m2m_memcpy+0x36>
	if(sz == 0) return;
   210c4:	46c0      	nop			; (mov r8, r8)
}
   210c6:	46bd      	mov	sp, r7
   210c8:	b004      	add	sp, #16
   210ca:	bd80      	pop	{r7, pc}

000210cc <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   210cc:	b580      	push	{r7, lr}
   210ce:	b084      	sub	sp, #16
   210d0:	af00      	add	r7, sp, #0
   210d2:	60f8      	str	r0, [r7, #12]
   210d4:	607a      	str	r2, [r7, #4]
   210d6:	230b      	movs	r3, #11
   210d8:	18fb      	adds	r3, r7, r3
   210da:	1c0a      	adds	r2, r1, #0
   210dc:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   210de:	687b      	ldr	r3, [r7, #4]
   210e0:	2b00      	cmp	r3, #0
   210e2:	d00e      	beq.n	21102 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   210e4:	68fb      	ldr	r3, [r7, #12]
   210e6:	220b      	movs	r2, #11
   210e8:	18ba      	adds	r2, r7, r2
   210ea:	7812      	ldrb	r2, [r2, #0]
   210ec:	701a      	strb	r2, [r3, #0]
		pBuf++;
   210ee:	68fb      	ldr	r3, [r7, #12]
   210f0:	3301      	adds	r3, #1
   210f2:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   210f4:	687b      	ldr	r3, [r7, #4]
   210f6:	3b01      	subs	r3, #1
   210f8:	607b      	str	r3, [r7, #4]
   210fa:	687b      	ldr	r3, [r7, #4]
   210fc:	2b00      	cmp	r3, #0
   210fe:	d1f1      	bne.n	210e4 <m2m_memset+0x18>
   21100:	e000      	b.n	21104 <m2m_memset+0x38>
	if(sz == 0) return;
   21102:	46c0      	nop			; (mov r8, r8)
}
   21104:	46bd      	mov	sp, r7
   21106:	b004      	add	sp, #16
   21108:	bd80      	pop	{r7, pc}

0002110a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2110a:	b580      	push	{r7, lr}
   2110c:	b084      	sub	sp, #16
   2110e:	af00      	add	r7, sp, #0
   21110:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21112:	230e      	movs	r3, #14
   21114:	18fb      	adds	r3, r7, r3
   21116:	2200      	movs	r2, #0
   21118:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2111a:	e009      	b.n	21130 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   2111c:	230e      	movs	r3, #14
   2111e:	18fb      	adds	r3, r7, r3
   21120:	881a      	ldrh	r2, [r3, #0]
   21122:	230e      	movs	r3, #14
   21124:	18fb      	adds	r3, r7, r3
   21126:	3201      	adds	r2, #1
   21128:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2112a:	687b      	ldr	r3, [r7, #4]
   2112c:	3301      	adds	r3, #1
   2112e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21130:	687b      	ldr	r3, [r7, #4]
   21132:	781b      	ldrb	r3, [r3, #0]
   21134:	2b00      	cmp	r3, #0
   21136:	d1f1      	bne.n	2111c <m2m_strlen+0x12>
	}
	return u16StrLen;
   21138:	230e      	movs	r3, #14
   2113a:	18fb      	adds	r3, r7, r3
   2113c:	881b      	ldrh	r3, [r3, #0]
}
   2113e:	0018      	movs	r0, r3
   21140:	46bd      	mov	sp, r7
   21142:	b004      	add	sp, #16
   21144:	bd80      	pop	{r7, pc}
	...

00021148 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   21148:	b580      	push	{r7, lr}
   2114a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   2114c:	4b04      	ldr	r3, [pc, #16]	; (21160 <isr+0x18>)
   2114e:	78db      	ldrb	r3, [r3, #3]
   21150:	b2db      	uxtb	r3, r3
   21152:	3301      	adds	r3, #1
   21154:	b2da      	uxtb	r2, r3
   21156:	4b02      	ldr	r3, [pc, #8]	; (21160 <isr+0x18>)
   21158:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2115a:	46c0      	nop			; (mov r8, r8)
   2115c:	46bd      	mov	sp, r7
   2115e:	bd80      	pop	{r7, pc}
   21160:	20005b10 	.word	0x20005b10

00021164 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21164:	b590      	push	{r4, r7, lr}
   21166:	b083      	sub	sp, #12
   21168:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2116a:	1dfb      	adds	r3, r7, #7
   2116c:	2200      	movs	r2, #0
   2116e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21170:	4b14      	ldr	r3, [pc, #80]	; (211c4 <hif_set_rx_done+0x60>)
   21172:	2200      	movs	r2, #0
   21174:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   21176:	2001      	movs	r0, #1
   21178:	4b13      	ldr	r3, [pc, #76]	; (211c8 <hif_set_rx_done+0x64>)
   2117a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   2117c:	1dfc      	adds	r4, r7, #7
   2117e:	003b      	movs	r3, r7
   21180:	4a12      	ldr	r2, [pc, #72]	; (211cc <hif_set_rx_done+0x68>)
   21182:	0019      	movs	r1, r3
   21184:	0010      	movs	r0, r2
   21186:	4b12      	ldr	r3, [pc, #72]	; (211d0 <hif_set_rx_done+0x6c>)
   21188:	4798      	blx	r3
   2118a:	0003      	movs	r3, r0
   2118c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2118e:	1dfb      	adds	r3, r7, #7
   21190:	781b      	ldrb	r3, [r3, #0]
   21192:	b25b      	sxtb	r3, r3
   21194:	2b00      	cmp	r3, #0
   21196:	d10d      	bne.n	211b4 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   21198:	683b      	ldr	r3, [r7, #0]
   2119a:	2202      	movs	r2, #2
   2119c:	4313      	orrs	r3, r2
   2119e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   211a0:	683b      	ldr	r3, [r7, #0]
   211a2:	1dfc      	adds	r4, r7, #7
   211a4:	4a09      	ldr	r2, [pc, #36]	; (211cc <hif_set_rx_done+0x68>)
   211a6:	0019      	movs	r1, r3
   211a8:	0010      	movs	r0, r2
   211aa:	4b0a      	ldr	r3, [pc, #40]	; (211d4 <hif_set_rx_done+0x70>)
   211ac:	4798      	blx	r3
   211ae:	0003      	movs	r3, r0
   211b0:	7023      	strb	r3, [r4, #0]
   211b2:	e000      	b.n	211b6 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   211b4:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   211b6:	1dfb      	adds	r3, r7, #7
   211b8:	781b      	ldrb	r3, [r3, #0]
   211ba:	b25b      	sxtb	r3, r3

}
   211bc:	0018      	movs	r0, r3
   211be:	46bd      	mov	sp, r7
   211c0:	b003      	add	sp, #12
   211c2:	bd90      	pop	{r4, r7, pc}
   211c4:	20005b10 	.word	0x20005b10
   211c8:	00020881 	.word	0x00020881
   211cc:	00001070 	.word	0x00001070
   211d0:	00023085 	.word	0x00023085
   211d4:	000230a9 	.word	0x000230a9

000211d8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   211d8:	b580      	push	{r7, lr}
   211da:	b082      	sub	sp, #8
   211dc:	af00      	add	r7, sp, #0
   211de:	603a      	str	r2, [r7, #0]
   211e0:	1dfb      	adds	r3, r7, #7
   211e2:	1c02      	adds	r2, r0, #0
   211e4:	701a      	strb	r2, [r3, #0]
   211e6:	1d3b      	adds	r3, r7, #4
   211e8:	1c0a      	adds	r2, r1, #0
   211ea:	801a      	strh	r2, [r3, #0]


}
   211ec:	46c0      	nop			; (mov r8, r8)
   211ee:	46bd      	mov	sp, r7
   211f0:	b002      	add	sp, #8
   211f2:	bd80      	pop	{r7, pc}

000211f4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   211f4:	b590      	push	{r4, r7, lr}
   211f6:	b083      	sub	sp, #12
   211f8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   211fa:	1dfb      	adds	r3, r7, #7
   211fc:	2200      	movs	r2, #0
   211fe:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21200:	4b16      	ldr	r3, [pc, #88]	; (2125c <hif_chip_wake+0x68>)
   21202:	789b      	ldrb	r3, [r3, #2]
   21204:	b2db      	uxtb	r3, r3
   21206:	2b00      	cmp	r3, #0
   21208:	d003      	beq.n	21212 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2120a:	1dfb      	adds	r3, r7, #7
   2120c:	781b      	ldrb	r3, [r3, #0]
   2120e:	b25b      	sxtb	r3, r3
   21210:	e01f      	b.n	21252 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21212:	4b12      	ldr	r3, [pc, #72]	; (2125c <hif_chip_wake+0x68>)
   21214:	785b      	ldrb	r3, [r3, #1]
   21216:	b2db      	uxtb	r3, r3
   21218:	2b00      	cmp	r3, #0
   2121a:	d10e      	bne.n	2123a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2121c:	4b0f      	ldr	r3, [pc, #60]	; (2125c <hif_chip_wake+0x68>)
   2121e:	781b      	ldrb	r3, [r3, #0]
   21220:	b2db      	uxtb	r3, r3
   21222:	2b00      	cmp	r3, #0
   21224:	d009      	beq.n	2123a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   21226:	1dfc      	adds	r4, r7, #7
   21228:	4b0d      	ldr	r3, [pc, #52]	; (21260 <hif_chip_wake+0x6c>)
   2122a:	4798      	blx	r3
   2122c:	0003      	movs	r3, r0
   2122e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21230:	1dfb      	adds	r3, r7, #7
   21232:	781b      	ldrb	r3, [r3, #0]
   21234:	b25b      	sxtb	r3, r3
   21236:	2b00      	cmp	r3, #0
   21238:	d107      	bne.n	2124a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2123a:	4b08      	ldr	r3, [pc, #32]	; (2125c <hif_chip_wake+0x68>)
   2123c:	785b      	ldrb	r3, [r3, #1]
   2123e:	b2db      	uxtb	r3, r3
   21240:	3301      	adds	r3, #1
   21242:	b2da      	uxtb	r2, r3
   21244:	4b05      	ldr	r3, [pc, #20]	; (2125c <hif_chip_wake+0x68>)
   21246:	705a      	strb	r2, [r3, #1]
   21248:	e000      	b.n	2124c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2124a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   2124c:	1dfb      	adds	r3, r7, #7
   2124e:	781b      	ldrb	r3, [r3, #0]
   21250:	b25b      	sxtb	r3, r3
}
   21252:	0018      	movs	r0, r3
   21254:	46bd      	mov	sp, r7
   21256:	b003      	add	sp, #12
   21258:	bd90      	pop	{r4, r7, pc}
   2125a:	46c0      	nop			; (mov r8, r8)
   2125c:	20005b10 	.word	0x20005b10
   21260:	00022b55 	.word	0x00022b55

00021264 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21264:	b580      	push	{r7, lr}
   21266:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21268:	4b07      	ldr	r3, [pc, #28]	; (21288 <hif_chip_sleep_sc+0x24>)
   2126a:	785b      	ldrb	r3, [r3, #1]
   2126c:	b2db      	uxtb	r3, r3
   2126e:	2b00      	cmp	r3, #0
   21270:	d006      	beq.n	21280 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21272:	4b05      	ldr	r3, [pc, #20]	; (21288 <hif_chip_sleep_sc+0x24>)
   21274:	785b      	ldrb	r3, [r3, #1]
   21276:	b2db      	uxtb	r3, r3
   21278:	3b01      	subs	r3, #1
   2127a:	b2da      	uxtb	r2, r3
   2127c:	4b02      	ldr	r3, [pc, #8]	; (21288 <hif_chip_sleep_sc+0x24>)
   2127e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21280:	2300      	movs	r3, #0
}
   21282:	0018      	movs	r0, r3
   21284:	46bd      	mov	sp, r7
   21286:	bd80      	pop	{r7, pc}
   21288:	20005b10 	.word	0x20005b10

0002128c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   2128c:	b590      	push	{r4, r7, lr}
   2128e:	b083      	sub	sp, #12
   21290:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21292:	1dfb      	adds	r3, r7, #7
   21294:	2200      	movs	r2, #0
   21296:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21298:	4b10      	ldr	r3, [pc, #64]	; (212dc <hif_chip_sleep+0x50>)
   2129a:	785b      	ldrb	r3, [r3, #1]
   2129c:	b2db      	uxtb	r3, r3
   2129e:	2b00      	cmp	r3, #0
   212a0:	d006      	beq.n	212b0 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   212a2:	4b0e      	ldr	r3, [pc, #56]	; (212dc <hif_chip_sleep+0x50>)
   212a4:	785b      	ldrb	r3, [r3, #1]
   212a6:	b2db      	uxtb	r3, r3
   212a8:	3b01      	subs	r3, #1
   212aa:	b2da      	uxtb	r2, r3
   212ac:	4b0b      	ldr	r3, [pc, #44]	; (212dc <hif_chip_sleep+0x50>)
   212ae:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   212b0:	4b0a      	ldr	r3, [pc, #40]	; (212dc <hif_chip_sleep+0x50>)
   212b2:	785b      	ldrb	r3, [r3, #1]
   212b4:	b2db      	uxtb	r3, r3
   212b6:	2b00      	cmp	r3, #0
   212b8:	d109      	bne.n	212ce <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   212ba:	4b08      	ldr	r3, [pc, #32]	; (212dc <hif_chip_sleep+0x50>)
   212bc:	781b      	ldrb	r3, [r3, #0]
   212be:	b2db      	uxtb	r3, r3
   212c0:	2b00      	cmp	r3, #0
   212c2:	d004      	beq.n	212ce <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   212c4:	1dfc      	adds	r4, r7, #7
   212c6:	4b06      	ldr	r3, [pc, #24]	; (212e0 <hif_chip_sleep+0x54>)
   212c8:	4798      	blx	r3
   212ca:	0003      	movs	r3, r0
   212cc:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   212ce:	1dfb      	adds	r3, r7, #7
   212d0:	781b      	ldrb	r3, [r3, #0]
   212d2:	b25b      	sxtb	r3, r3
}
   212d4:	0018      	movs	r0, r3
   212d6:	46bd      	mov	sp, r7
   212d8:	b003      	add	sp, #12
   212da:	bd90      	pop	{r4, r7, pc}
   212dc:	20005b10 	.word	0x20005b10
   212e0:	00022a7d 	.word	0x00022a7d

000212e4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   212e4:	b580      	push	{r7, lr}
   212e6:	b082      	sub	sp, #8
   212e8:	af00      	add	r7, sp, #0
   212ea:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   212ec:	4b09      	ldr	r3, [pc, #36]	; (21314 <hif_init+0x30>)
   212ee:	222c      	movs	r2, #44	; 0x2c
   212f0:	2100      	movs	r1, #0
   212f2:	0018      	movs	r0, r3
   212f4:	4b08      	ldr	r3, [pc, #32]	; (21318 <hif_init+0x34>)
   212f6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   212f8:	4b08      	ldr	r3, [pc, #32]	; (2131c <hif_init+0x38>)
   212fa:	0018      	movs	r0, r3
   212fc:	4b08      	ldr	r3, [pc, #32]	; (21320 <hif_init+0x3c>)
   212fe:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21300:	4b08      	ldr	r3, [pc, #32]	; (21324 <hif_init+0x40>)
   21302:	0019      	movs	r1, r3
   21304:	2003      	movs	r0, #3
   21306:	4b08      	ldr	r3, [pc, #32]	; (21328 <hif_init+0x44>)
   21308:	4798      	blx	r3
	return M2M_SUCCESS;
   2130a:	2300      	movs	r3, #0
}
   2130c:	0018      	movs	r0, r3
   2130e:	46bd      	mov	sp, r7
   21310:	b002      	add	sp, #8
   21312:	bd80      	pop	{r7, pc}
   21314:	20005b10 	.word	0x20005b10
   21318:	000210cd 	.word	0x000210cd
   2131c:	00021149 	.word	0x00021149
   21320:	00020809 	.word	0x00020809
   21324:	000211d9 	.word	0x000211d9
   21328:	00021dc9 	.word	0x00021dc9

0002132c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   2132c:	b590      	push	{r4, r7, lr}
   2132e:	b089      	sub	sp, #36	; 0x24
   21330:	af00      	add	r7, sp, #0
   21332:	0004      	movs	r4, r0
   21334:	0008      	movs	r0, r1
   21336:	603a      	str	r2, [r7, #0]
   21338:	0019      	movs	r1, r3
   2133a:	1dfb      	adds	r3, r7, #7
   2133c:	1c22      	adds	r2, r4, #0
   2133e:	701a      	strb	r2, [r3, #0]
   21340:	1dbb      	adds	r3, r7, #6
   21342:	1c02      	adds	r2, r0, #0
   21344:	701a      	strb	r2, [r3, #0]
   21346:	1d3b      	adds	r3, r7, #4
   21348:	1c0a      	adds	r2, r1, #0
   2134a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   2134c:	231f      	movs	r3, #31
   2134e:	18fb      	adds	r3, r7, r3
   21350:	22ff      	movs	r2, #255	; 0xff
   21352:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21354:	1dbb      	adds	r3, r7, #6
   21356:	781b      	ldrb	r3, [r3, #0]
   21358:	227f      	movs	r2, #127	; 0x7f
   2135a:	4013      	ands	r3, r2
   2135c:	b2da      	uxtb	r2, r3
   2135e:	2318      	movs	r3, #24
   21360:	18fb      	adds	r3, r7, r3
   21362:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21364:	2318      	movs	r3, #24
   21366:	18fb      	adds	r3, r7, r3
   21368:	1dfa      	adds	r2, r7, #7
   2136a:	7812      	ldrb	r2, [r2, #0]
   2136c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2136e:	2318      	movs	r3, #24
   21370:	18fb      	adds	r3, r7, r3
   21372:	2208      	movs	r2, #8
   21374:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21378:	2b00      	cmp	r3, #0
   2137a:	d011      	beq.n	213a0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   2137c:	2318      	movs	r3, #24
   2137e:	18fb      	adds	r3, r7, r3
   21380:	885b      	ldrh	r3, [r3, #2]
   21382:	b29a      	uxth	r2, r3
   21384:	2338      	movs	r3, #56	; 0x38
   21386:	18f9      	adds	r1, r7, r3
   21388:	2334      	movs	r3, #52	; 0x34
   2138a:	18fb      	adds	r3, r7, r3
   2138c:	8809      	ldrh	r1, [r1, #0]
   2138e:	881b      	ldrh	r3, [r3, #0]
   21390:	18cb      	adds	r3, r1, r3
   21392:	b29b      	uxth	r3, r3
   21394:	18d3      	adds	r3, r2, r3
   21396:	b29a      	uxth	r2, r3
   21398:	2318      	movs	r3, #24
   2139a:	18fb      	adds	r3, r7, r3
   2139c:	805a      	strh	r2, [r3, #2]
   2139e:	e00a      	b.n	213b6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   213a0:	2318      	movs	r3, #24
   213a2:	18fb      	adds	r3, r7, r3
   213a4:	885b      	ldrh	r3, [r3, #2]
   213a6:	b29a      	uxth	r2, r3
   213a8:	1d3b      	adds	r3, r7, #4
   213aa:	881b      	ldrh	r3, [r3, #0]
   213ac:	18d3      	adds	r3, r2, r3
   213ae:	b29a      	uxth	r2, r3
   213b0:	2318      	movs	r3, #24
   213b2:	18fb      	adds	r3, r7, r3
   213b4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   213b6:	231f      	movs	r3, #31
   213b8:	18fc      	adds	r4, r7, r3
   213ba:	4bb2      	ldr	r3, [pc, #712]	; (21684 <hif_send+0x358>)
   213bc:	4798      	blx	r3
   213be:	0003      	movs	r3, r0
   213c0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   213c2:	231f      	movs	r3, #31
   213c4:	18fb      	adds	r3, r7, r3
   213c6:	781b      	ldrb	r3, [r3, #0]
   213c8:	b25b      	sxtb	r3, r3
   213ca:	2b00      	cmp	r3, #0
   213cc:	d000      	beq.n	213d0 <hif_send+0xa4>
   213ce:	e129      	b.n	21624 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   213d0:	2300      	movs	r3, #0
   213d2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   213d4:	230e      	movs	r3, #14
   213d6:	18fb      	adds	r3, r7, r3
   213d8:	2200      	movs	r2, #0
   213da:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   213dc:	2300      	movs	r3, #0
   213de:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   213e0:	1dfb      	adds	r3, r7, #7
   213e2:	781a      	ldrb	r2, [r3, #0]
   213e4:	697b      	ldr	r3, [r7, #20]
   213e6:	4313      	orrs	r3, r2
   213e8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   213ea:	1dbb      	adds	r3, r7, #6
   213ec:	781b      	ldrb	r3, [r3, #0]
   213ee:	021a      	lsls	r2, r3, #8
   213f0:	697b      	ldr	r3, [r7, #20]
   213f2:	4313      	orrs	r3, r2
   213f4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   213f6:	2318      	movs	r3, #24
   213f8:	18fb      	adds	r3, r7, r3
   213fa:	885b      	ldrh	r3, [r3, #2]
   213fc:	b29b      	uxth	r3, r3
   213fe:	041a      	lsls	r2, r3, #16
   21400:	697b      	ldr	r3, [r7, #20]
   21402:	4313      	orrs	r3, r2
   21404:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21406:	697b      	ldr	r3, [r7, #20]
   21408:	221f      	movs	r2, #31
   2140a:	18bc      	adds	r4, r7, r2
   2140c:	4a9e      	ldr	r2, [pc, #632]	; (21688 <hif_send+0x35c>)
   2140e:	0019      	movs	r1, r3
   21410:	0010      	movs	r0, r2
   21412:	4b9e      	ldr	r3, [pc, #632]	; (2168c <hif_send+0x360>)
   21414:	4798      	blx	r3
   21416:	0003      	movs	r3, r0
   21418:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2141a:	231f      	movs	r3, #31
   2141c:	18fb      	adds	r3, r7, r3
   2141e:	781b      	ldrb	r3, [r3, #0]
   21420:	b25b      	sxtb	r3, r3
   21422:	2b00      	cmp	r3, #0
   21424:	d000      	beq.n	21428 <hif_send+0xfc>
   21426:	e119      	b.n	2165c <hif_send+0x330>

		reg = 0UL;
   21428:	2300      	movs	r3, #0
   2142a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   2142c:	697b      	ldr	r3, [r7, #20]
   2142e:	2202      	movs	r2, #2
   21430:	4313      	orrs	r3, r2
   21432:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21434:	697b      	ldr	r3, [r7, #20]
   21436:	221f      	movs	r2, #31
   21438:	18bc      	adds	r4, r7, r2
   2143a:	4a95      	ldr	r2, [pc, #596]	; (21690 <hif_send+0x364>)
   2143c:	0019      	movs	r1, r3
   2143e:	0010      	movs	r0, r2
   21440:	4b92      	ldr	r3, [pc, #584]	; (2168c <hif_send+0x360>)
   21442:	4798      	blx	r3
   21444:	0003      	movs	r3, r0
   21446:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21448:	231f      	movs	r3, #31
   2144a:	18fb      	adds	r3, r7, r3
   2144c:	781b      	ldrb	r3, [r3, #0]
   2144e:	b25b      	sxtb	r3, r3
   21450:	2b00      	cmp	r3, #0
   21452:	d000      	beq.n	21456 <hif_send+0x12a>
   21454:	e104      	b.n	21660 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21456:	2300      	movs	r3, #0
   21458:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2145a:	230e      	movs	r3, #14
   2145c:	18fb      	adds	r3, r7, r3
   2145e:	2200      	movs	r2, #0
   21460:	801a      	strh	r2, [r3, #0]
   21462:	e050      	b.n	21506 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21464:	231f      	movs	r3, #31
   21466:	18fc      	adds	r4, r7, r3
   21468:	2314      	movs	r3, #20
   2146a:	18fb      	adds	r3, r7, r3
   2146c:	4a88      	ldr	r2, [pc, #544]	; (21690 <hif_send+0x364>)
   2146e:	0019      	movs	r1, r3
   21470:	0010      	movs	r0, r2
   21472:	4b88      	ldr	r3, [pc, #544]	; (21694 <hif_send+0x368>)
   21474:	4798      	blx	r3
   21476:	0003      	movs	r3, r0
   21478:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2147a:	231f      	movs	r3, #31
   2147c:	18fb      	adds	r3, r7, r3
   2147e:	781b      	ldrb	r3, [r3, #0]
   21480:	b25b      	sxtb	r3, r3
   21482:	2b00      	cmp	r3, #0
   21484:	d147      	bne.n	21516 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21486:	230e      	movs	r3, #14
   21488:	18fb      	adds	r3, r7, r3
   2148a:	881b      	ldrh	r3, [r3, #0]
   2148c:	b29a      	uxth	r2, r3
   2148e:	23f4      	movs	r3, #244	; 0xf4
   21490:	33ff      	adds	r3, #255	; 0xff
   21492:	429a      	cmp	r2, r3
   21494:	d916      	bls.n	214c4 <hif_send+0x198>
				if(cnt < 501) {
   21496:	230e      	movs	r3, #14
   21498:	18fb      	adds	r3, r7, r3
   2149a:	881b      	ldrh	r3, [r3, #0]
   2149c:	b29a      	uxth	r2, r3
   2149e:	23fa      	movs	r3, #250	; 0xfa
   214a0:	005b      	lsls	r3, r3, #1
   214a2:	429a      	cmp	r2, r3
   214a4:	d80b      	bhi.n	214be <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   214a6:	4b7c      	ldr	r3, [pc, #496]	; (21698 <hif_send+0x36c>)
   214a8:	0018      	movs	r0, r3
   214aa:	4b7c      	ldr	r3, [pc, #496]	; (2169c <hif_send+0x370>)
   214ac:	4798      	blx	r3
   214ae:	4b7c      	ldr	r3, [pc, #496]	; (216a0 <hif_send+0x374>)
   214b0:	0018      	movs	r0, r3
   214b2:	4b7a      	ldr	r3, [pc, #488]	; (2169c <hif_send+0x370>)
   214b4:	4798      	blx	r3
   214b6:	4b7b      	ldr	r3, [pc, #492]	; (216a4 <hif_send+0x378>)
   214b8:	0018      	movs	r0, r3
   214ba:	4b78      	ldr	r3, [pc, #480]	; (2169c <hif_send+0x370>)
   214bc:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   214be:	2001      	movs	r0, #1
   214c0:	4b79      	ldr	r3, [pc, #484]	; (216a8 <hif_send+0x37c>)
   214c2:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   214c4:	697b      	ldr	r3, [r7, #20]
   214c6:	2202      	movs	r2, #2
   214c8:	4013      	ands	r3, r2
   214ca:	d113      	bne.n	214f4 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   214cc:	231f      	movs	r3, #31
   214ce:	18fc      	adds	r4, r7, r3
   214d0:	2310      	movs	r3, #16
   214d2:	18fb      	adds	r3, r7, r3
   214d4:	4a75      	ldr	r2, [pc, #468]	; (216ac <hif_send+0x380>)
   214d6:	0019      	movs	r1, r3
   214d8:	0010      	movs	r0, r2
   214da:	4b6e      	ldr	r3, [pc, #440]	; (21694 <hif_send+0x368>)
   214dc:	4798      	blx	r3
   214de:	0003      	movs	r3, r0
   214e0:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   214e2:	231f      	movs	r3, #31
   214e4:	18fb      	adds	r3, r7, r3
   214e6:	781b      	ldrb	r3, [r3, #0]
   214e8:	b25b      	sxtb	r3, r3
   214ea:	2b00      	cmp	r3, #0
   214ec:	d015      	beq.n	2151a <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   214ee:	2300      	movs	r3, #0
   214f0:	613b      	str	r3, [r7, #16]
					goto ERR1;
   214f2:	e0bc      	b.n	2166e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   214f4:	230e      	movs	r3, #14
   214f6:	18fb      	adds	r3, r7, r3
   214f8:	881b      	ldrh	r3, [r3, #0]
   214fa:	b29b      	uxth	r3, r3
   214fc:	3301      	adds	r3, #1
   214fe:	b29a      	uxth	r2, r3
   21500:	230e      	movs	r3, #14
   21502:	18fb      	adds	r3, r7, r3
   21504:	801a      	strh	r2, [r3, #0]
   21506:	230e      	movs	r3, #14
   21508:	18fb      	adds	r3, r7, r3
   2150a:	881b      	ldrh	r3, [r3, #0]
   2150c:	b29b      	uxth	r3, r3
   2150e:	4a68      	ldr	r2, [pc, #416]	; (216b0 <hif_send+0x384>)
   21510:	4293      	cmp	r3, r2
   21512:	d9a7      	bls.n	21464 <hif_send+0x138>
   21514:	e002      	b.n	2151c <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21516:	46c0      	nop			; (mov r8, r8)
   21518:	e000      	b.n	2151c <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   2151a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   2151c:	693b      	ldr	r3, [r7, #16]
   2151e:	2b00      	cmp	r3, #0
   21520:	d100      	bne.n	21524 <hif_send+0x1f8>
   21522:	e074      	b.n	2160e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21524:	693b      	ldr	r3, [r7, #16]
   21526:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21528:	2318      	movs	r3, #24
   2152a:	18fb      	adds	r3, r7, r3
   2152c:	885b      	ldrh	r3, [r3, #2]
   2152e:	b29a      	uxth	r2, r3
   21530:	2318      	movs	r3, #24
   21532:	18fb      	adds	r3, r7, r3
   21534:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21536:	68bb      	ldr	r3, [r7, #8]
   21538:	221f      	movs	r2, #31
   2153a:	18bc      	adds	r4, r7, r2
   2153c:	2218      	movs	r2, #24
   2153e:	18b9      	adds	r1, r7, r2
   21540:	2208      	movs	r2, #8
   21542:	0018      	movs	r0, r3
   21544:	4b5b      	ldr	r3, [pc, #364]	; (216b4 <hif_send+0x388>)
   21546:	4798      	blx	r3
   21548:	0003      	movs	r3, r0
   2154a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   2154c:	231f      	movs	r3, #31
   2154e:	18fb      	adds	r3, r7, r3
   21550:	781b      	ldrb	r3, [r3, #0]
   21552:	b25b      	sxtb	r3, r3
   21554:	2b00      	cmp	r3, #0
   21556:	d000      	beq.n	2155a <hif_send+0x22e>
   21558:	e084      	b.n	21664 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2155a:	68bb      	ldr	r3, [r7, #8]
   2155c:	3308      	adds	r3, #8
   2155e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21560:	683b      	ldr	r3, [r7, #0]
   21562:	2b00      	cmp	r3, #0
   21564:	d016      	beq.n	21594 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21566:	68b8      	ldr	r0, [r7, #8]
   21568:	1d3b      	adds	r3, r7, #4
   2156a:	881a      	ldrh	r2, [r3, #0]
   2156c:	231f      	movs	r3, #31
   2156e:	18fc      	adds	r4, r7, r3
   21570:	683b      	ldr	r3, [r7, #0]
   21572:	0019      	movs	r1, r3
   21574:	4b4f      	ldr	r3, [pc, #316]	; (216b4 <hif_send+0x388>)
   21576:	4798      	blx	r3
   21578:	0003      	movs	r3, r0
   2157a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2157c:	231f      	movs	r3, #31
   2157e:	18fb      	adds	r3, r7, r3
   21580:	781b      	ldrb	r3, [r3, #0]
   21582:	b25b      	sxtb	r3, r3
   21584:	2b00      	cmp	r3, #0
   21586:	d000      	beq.n	2158a <hif_send+0x25e>
   21588:	e06e      	b.n	21668 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2158a:	1d3b      	adds	r3, r7, #4
   2158c:	881a      	ldrh	r2, [r3, #0]
   2158e:	68bb      	ldr	r3, [r7, #8]
   21590:	18d3      	adds	r3, r2, r3
   21592:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21596:	2b00      	cmp	r3, #0
   21598:	d021      	beq.n	215de <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2159a:	2338      	movs	r3, #56	; 0x38
   2159c:	18fb      	adds	r3, r7, r3
   2159e:	881a      	ldrh	r2, [r3, #0]
   215a0:	1d3b      	adds	r3, r7, #4
   215a2:	881b      	ldrh	r3, [r3, #0]
   215a4:	1ad3      	subs	r3, r2, r3
   215a6:	001a      	movs	r2, r3
   215a8:	68bb      	ldr	r3, [r7, #8]
   215aa:	18d3      	adds	r3, r2, r3
   215ac:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   215ae:	68b8      	ldr	r0, [r7, #8]
   215b0:	2334      	movs	r3, #52	; 0x34
   215b2:	18fb      	adds	r3, r7, r3
   215b4:	881a      	ldrh	r2, [r3, #0]
   215b6:	231f      	movs	r3, #31
   215b8:	18fc      	adds	r4, r7, r3
   215ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   215bc:	0019      	movs	r1, r3
   215be:	4b3d      	ldr	r3, [pc, #244]	; (216b4 <hif_send+0x388>)
   215c0:	4798      	blx	r3
   215c2:	0003      	movs	r3, r0
   215c4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   215c6:	231f      	movs	r3, #31
   215c8:	18fb      	adds	r3, r7, r3
   215ca:	781b      	ldrb	r3, [r3, #0]
   215cc:	b25b      	sxtb	r3, r3
   215ce:	2b00      	cmp	r3, #0
   215d0:	d14c      	bne.n	2166c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   215d2:	2334      	movs	r3, #52	; 0x34
   215d4:	18fb      	adds	r3, r7, r3
   215d6:	881a      	ldrh	r2, [r3, #0]
   215d8:	68bb      	ldr	r3, [r7, #8]
   215da:	18d3      	adds	r3, r2, r3
   215dc:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   215de:	693b      	ldr	r3, [r7, #16]
   215e0:	009b      	lsls	r3, r3, #2
   215e2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   215e4:	697b      	ldr	r3, [r7, #20]
   215e6:	2202      	movs	r2, #2
   215e8:	4313      	orrs	r3, r2
   215ea:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   215ec:	697b      	ldr	r3, [r7, #20]
   215ee:	221f      	movs	r2, #31
   215f0:	18bc      	adds	r4, r7, r2
   215f2:	4a31      	ldr	r2, [pc, #196]	; (216b8 <hif_send+0x38c>)
   215f4:	0019      	movs	r1, r3
   215f6:	0010      	movs	r0, r2
   215f8:	4b24      	ldr	r3, [pc, #144]	; (2168c <hif_send+0x360>)
   215fa:	4798      	blx	r3
   215fc:	0003      	movs	r3, r0
   215fe:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21600:	231f      	movs	r3, #31
   21602:	18fb      	adds	r3, r7, r3
   21604:	781b      	ldrb	r3, [r3, #0]
   21606:	b25b      	sxtb	r3, r3
   21608:	2b00      	cmp	r3, #0
   2160a:	d01c      	beq.n	21646 <hif_send+0x31a>
   2160c:	e02f      	b.n	2166e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   2160e:	231f      	movs	r3, #31
   21610:	18fc      	adds	r4, r7, r3
   21612:	4b2a      	ldr	r3, [pc, #168]	; (216bc <hif_send+0x390>)
   21614:	4798      	blx	r3
   21616:	0003      	movs	r3, r0
   21618:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   2161a:	231f      	movs	r3, #31
   2161c:	18fb      	adds	r3, r7, r3
   2161e:	22fd      	movs	r2, #253	; 0xfd
   21620:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21622:	e026      	b.n	21672 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21624:	2398      	movs	r3, #152	; 0x98
   21626:	33ff      	adds	r3, #255	; 0xff
   21628:	001a      	movs	r2, r3
   2162a:	4925      	ldr	r1, [pc, #148]	; (216c0 <hif_send+0x394>)
   2162c:	4b25      	ldr	r3, [pc, #148]	; (216c4 <hif_send+0x398>)
   2162e:	0018      	movs	r0, r3
   21630:	4b1a      	ldr	r3, [pc, #104]	; (2169c <hif_send+0x370>)
   21632:	4798      	blx	r3
   21634:	4b24      	ldr	r3, [pc, #144]	; (216c8 <hif_send+0x39c>)
   21636:	0018      	movs	r0, r3
   21638:	4b18      	ldr	r3, [pc, #96]	; (2169c <hif_send+0x370>)
   2163a:	4798      	blx	r3
   2163c:	4b19      	ldr	r3, [pc, #100]	; (216a4 <hif_send+0x378>)
   2163e:	0018      	movs	r0, r3
   21640:	4b16      	ldr	r3, [pc, #88]	; (2169c <hif_send+0x370>)
   21642:	4798      	blx	r3
		goto ERR2;
   21644:	e015      	b.n	21672 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21646:	231f      	movs	r3, #31
   21648:	18fc      	adds	r4, r7, r3
   2164a:	4b1c      	ldr	r3, [pc, #112]	; (216bc <hif_send+0x390>)
   2164c:	4798      	blx	r3
   2164e:	0003      	movs	r3, r0
   21650:	7023      	strb	r3, [r4, #0]
	return ret;
   21652:	231f      	movs	r3, #31
   21654:	18fb      	adds	r3, r7, r3
   21656:	781b      	ldrb	r3, [r3, #0]
   21658:	b25b      	sxtb	r3, r3
   2165a:	e00e      	b.n	2167a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   2165c:	46c0      	nop			; (mov r8, r8)
   2165e:	e006      	b.n	2166e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21660:	46c0      	nop			; (mov r8, r8)
   21662:	e004      	b.n	2166e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21664:	46c0      	nop			; (mov r8, r8)
   21666:	e002      	b.n	2166e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21668:	46c0      	nop			; (mov r8, r8)
   2166a:	e000      	b.n	2166e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2166c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2166e:	4b17      	ldr	r3, [pc, #92]	; (216cc <hif_send+0x3a0>)
   21670:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21672:	231f      	movs	r3, #31
   21674:	18fb      	adds	r3, r7, r3
   21676:	781b      	ldrb	r3, [r3, #0]
   21678:	b25b      	sxtb	r3, r3
}
   2167a:	0018      	movs	r0, r3
   2167c:	46bd      	mov	sp, r7
   2167e:	b009      	add	sp, #36	; 0x24
   21680:	bd90      	pop	{r4, r7, pc}
   21682:	46c0      	nop			; (mov r8, r8)
   21684:	000211f5 	.word	0x000211f5
   21688:	0000108c 	.word	0x0000108c
   2168c:	000230a9 	.word	0x000230a9
   21690:	00001078 	.word	0x00001078
   21694:	00023085 	.word	0x00023085
   21698:	000389f4 	.word	0x000389f4
   2169c:	0001e399 	.word	0x0001e399
   216a0:	00038a00 	.word	0x00038a00
   216a4:	00038a14 	.word	0x00038a14
   216a8:	000207ed 	.word	0x000207ed
   216ac:	00150400 	.word	0x00150400
   216b0:	000003e7 	.word	0x000003e7
   216b4:	000231f1 	.word	0x000231f1
   216b8:	0000106c 	.word	0x0000106c
   216bc:	0002128d 	.word	0x0002128d
   216c0:	00038d1c 	.word	0x00038d1c
   216c4:	00038a18 	.word	0x00038a18
   216c8:	00038a2c 	.word	0x00038a2c
   216cc:	00021265 	.word	0x00021265

000216d0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   216d0:	b590      	push	{r4, r7, lr}
   216d2:	b087      	sub	sp, #28
   216d4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   216d6:	230f      	movs	r3, #15
   216d8:	18fb      	adds	r3, r7, r3
   216da:	2200      	movs	r2, #0
   216dc:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   216de:	230f      	movs	r3, #15
   216e0:	18fc      	adds	r4, r7, r3
   216e2:	2308      	movs	r3, #8
   216e4:	18fb      	adds	r3, r7, r3
   216e6:	4adc      	ldr	r2, [pc, #880]	; (21a58 <hif_isr+0x388>)
   216e8:	0019      	movs	r1, r3
   216ea:	0010      	movs	r0, r2
   216ec:	4bdb      	ldr	r3, [pc, #876]	; (21a5c <hif_isr+0x38c>)
   216ee:	4798      	blx	r3
   216f0:	0003      	movs	r3, r0
   216f2:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   216f4:	230f      	movs	r3, #15
   216f6:	18fb      	adds	r3, r7, r3
   216f8:	781b      	ldrb	r3, [r3, #0]
   216fa:	b25b      	sxtb	r3, r3
   216fc:	2b00      	cmp	r3, #0
   216fe:	d000      	beq.n	21702 <hif_isr+0x32>
   21700:	e21e      	b.n	21b40 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21702:	68bb      	ldr	r3, [r7, #8]
   21704:	2201      	movs	r2, #1
   21706:	4013      	ands	r3, r2
   21708:	d100      	bne.n	2170c <hif_isr+0x3c>
   2170a:	e204      	b.n	21b16 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   2170c:	2000      	movs	r0, #0
   2170e:	4bd4      	ldr	r3, [pc, #848]	; (21a60 <hif_isr+0x390>)
   21710:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21712:	68bb      	ldr	r3, [r7, #8]
   21714:	2201      	movs	r2, #1
   21716:	4393      	bics	r3, r2
   21718:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   2171a:	68bb      	ldr	r3, [r7, #8]
   2171c:	220f      	movs	r2, #15
   2171e:	18bc      	adds	r4, r7, r2
   21720:	4acd      	ldr	r2, [pc, #820]	; (21a58 <hif_isr+0x388>)
   21722:	0019      	movs	r1, r3
   21724:	0010      	movs	r0, r2
   21726:	4bcf      	ldr	r3, [pc, #828]	; (21a64 <hif_isr+0x394>)
   21728:	4798      	blx	r3
   2172a:	0003      	movs	r3, r0
   2172c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2172e:	230f      	movs	r3, #15
   21730:	18fb      	adds	r3, r7, r3
   21732:	781b      	ldrb	r3, [r3, #0]
   21734:	b25b      	sxtb	r3, r3
   21736:	2b00      	cmp	r3, #0
   21738:	d000      	beq.n	2173c <hif_isr+0x6c>
   2173a:	e210      	b.n	21b5e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   2173c:	4bca      	ldr	r3, [pc, #808]	; (21a68 <hif_isr+0x398>)
   2173e:	2201      	movs	r2, #1
   21740:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21742:	68bb      	ldr	r3, [r7, #8]
   21744:	089b      	lsrs	r3, r3, #2
   21746:	b29a      	uxth	r2, r3
   21748:	230c      	movs	r3, #12
   2174a:	18fb      	adds	r3, r7, r3
   2174c:	0512      	lsls	r2, r2, #20
   2174e:	0d12      	lsrs	r2, r2, #20
   21750:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21752:	230c      	movs	r3, #12
   21754:	18fb      	adds	r3, r7, r3
   21756:	881b      	ldrh	r3, [r3, #0]
   21758:	2b00      	cmp	r3, #0
   2175a:	d100      	bne.n	2175e <hif_isr+0x8e>
   2175c:	e1c8      	b.n	21af0 <hif_isr+0x420>
				uint32 address = 0;
   2175e:	2300      	movs	r3, #0
   21760:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21762:	230f      	movs	r3, #15
   21764:	18fc      	adds	r4, r7, r3
   21766:	003b      	movs	r3, r7
   21768:	4ac0      	ldr	r2, [pc, #768]	; (21a6c <hif_isr+0x39c>)
   2176a:	0019      	movs	r1, r3
   2176c:	0010      	movs	r0, r2
   2176e:	4bbb      	ldr	r3, [pc, #748]	; (21a5c <hif_isr+0x38c>)
   21770:	4798      	blx	r3
   21772:	0003      	movs	r3, r0
   21774:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21776:	230f      	movs	r3, #15
   21778:	18fb      	adds	r3, r7, r3
   2177a:	781b      	ldrb	r3, [r3, #0]
   2177c:	b25b      	sxtb	r3, r3
   2177e:	2b00      	cmp	r3, #0
   21780:	d012      	beq.n	217a8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21782:	23e4      	movs	r3, #228	; 0xe4
   21784:	005a      	lsls	r2, r3, #1
   21786:	49ba      	ldr	r1, [pc, #744]	; (21a70 <hif_isr+0x3a0>)
   21788:	4bba      	ldr	r3, [pc, #744]	; (21a74 <hif_isr+0x3a4>)
   2178a:	0018      	movs	r0, r3
   2178c:	4bba      	ldr	r3, [pc, #744]	; (21a78 <hif_isr+0x3a8>)
   2178e:	4798      	blx	r3
   21790:	4bba      	ldr	r3, [pc, #744]	; (21a7c <hif_isr+0x3ac>)
   21792:	0018      	movs	r0, r3
   21794:	4bb8      	ldr	r3, [pc, #736]	; (21a78 <hif_isr+0x3a8>)
   21796:	4798      	blx	r3
   21798:	4bb9      	ldr	r3, [pc, #740]	; (21a80 <hif_isr+0x3b0>)
   2179a:	0018      	movs	r0, r3
   2179c:	4bb6      	ldr	r3, [pc, #728]	; (21a78 <hif_isr+0x3a8>)
   2179e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   217a0:	2001      	movs	r0, #1
   217a2:	4baf      	ldr	r3, [pc, #700]	; (21a60 <hif_isr+0x390>)
   217a4:	4798      	blx	r3
					goto ERR1;
   217a6:	e1db      	b.n	21b60 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   217a8:	683a      	ldr	r2, [r7, #0]
   217aa:	4baf      	ldr	r3, [pc, #700]	; (21a68 <hif_isr+0x398>)
   217ac:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   217ae:	230c      	movs	r3, #12
   217b0:	18fb      	adds	r3, r7, r3
   217b2:	881a      	ldrh	r2, [r3, #0]
   217b4:	4bac      	ldr	r3, [pc, #688]	; (21a68 <hif_isr+0x398>)
   217b6:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   217b8:	683b      	ldr	r3, [r7, #0]
   217ba:	220f      	movs	r2, #15
   217bc:	18bc      	adds	r4, r7, r2
   217be:	1d39      	adds	r1, r7, #4
   217c0:	2204      	movs	r2, #4
   217c2:	0018      	movs	r0, r3
   217c4:	4baf      	ldr	r3, [pc, #700]	; (21a84 <hif_isr+0x3b4>)
   217c6:	4798      	blx	r3
   217c8:	0003      	movs	r3, r0
   217ca:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   217cc:	1d3b      	adds	r3, r7, #4
   217ce:	885b      	ldrh	r3, [r3, #2]
   217d0:	b29a      	uxth	r2, r3
   217d2:	1d3b      	adds	r3, r7, #4
   217d4:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   217d6:	230f      	movs	r3, #15
   217d8:	18fb      	adds	r3, r7, r3
   217da:	781b      	ldrb	r3, [r3, #0]
   217dc:	b25b      	sxtb	r3, r3
   217de:	2b00      	cmp	r3, #0
   217e0:	d012      	beq.n	21808 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   217e2:	23e9      	movs	r3, #233	; 0xe9
   217e4:	005a      	lsls	r2, r3, #1
   217e6:	49a2      	ldr	r1, [pc, #648]	; (21a70 <hif_isr+0x3a0>)
   217e8:	4ba2      	ldr	r3, [pc, #648]	; (21a74 <hif_isr+0x3a4>)
   217ea:	0018      	movs	r0, r3
   217ec:	4ba2      	ldr	r3, [pc, #648]	; (21a78 <hif_isr+0x3a8>)
   217ee:	4798      	blx	r3
   217f0:	4ba5      	ldr	r3, [pc, #660]	; (21a88 <hif_isr+0x3b8>)
   217f2:	0018      	movs	r0, r3
   217f4:	4ba0      	ldr	r3, [pc, #640]	; (21a78 <hif_isr+0x3a8>)
   217f6:	4798      	blx	r3
   217f8:	4ba1      	ldr	r3, [pc, #644]	; (21a80 <hif_isr+0x3b0>)
   217fa:	0018      	movs	r0, r3
   217fc:	4b9e      	ldr	r3, [pc, #632]	; (21a78 <hif_isr+0x3a8>)
   217fe:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21800:	2001      	movs	r0, #1
   21802:	4b97      	ldr	r3, [pc, #604]	; (21a60 <hif_isr+0x390>)
   21804:	4798      	blx	r3
					goto ERR1;
   21806:	e1ab      	b.n	21b60 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21808:	1d3b      	adds	r3, r7, #4
   2180a:	885b      	ldrh	r3, [r3, #2]
   2180c:	b29b      	uxth	r3, r3
   2180e:	220c      	movs	r2, #12
   21810:	18ba      	adds	r2, r7, r2
   21812:	8812      	ldrh	r2, [r2, #0]
   21814:	429a      	cmp	r2, r3
   21816:	d02f      	beq.n	21878 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21818:	230c      	movs	r3, #12
   2181a:	18fb      	adds	r3, r7, r3
   2181c:	881b      	ldrh	r3, [r3, #0]
   2181e:	1d3a      	adds	r2, r7, #4
   21820:	8852      	ldrh	r2, [r2, #2]
   21822:	b292      	uxth	r2, r2
   21824:	1a9b      	subs	r3, r3, r2
   21826:	2b04      	cmp	r3, #4
   21828:	dd26      	ble.n	21878 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2182a:	23dc      	movs	r3, #220	; 0xdc
   2182c:	33ff      	adds	r3, #255	; 0xff
   2182e:	001a      	movs	r2, r3
   21830:	498f      	ldr	r1, [pc, #572]	; (21a70 <hif_isr+0x3a0>)
   21832:	4b90      	ldr	r3, [pc, #576]	; (21a74 <hif_isr+0x3a4>)
   21834:	0018      	movs	r0, r3
   21836:	4b90      	ldr	r3, [pc, #576]	; (21a78 <hif_isr+0x3a8>)
   21838:	4798      	blx	r3
   2183a:	230c      	movs	r3, #12
   2183c:	18fb      	adds	r3, r7, r3
   2183e:	8819      	ldrh	r1, [r3, #0]
   21840:	1d3b      	adds	r3, r7, #4
   21842:	885b      	ldrh	r3, [r3, #2]
   21844:	b29b      	uxth	r3, r3
   21846:	001a      	movs	r2, r3
   21848:	1d3b      	adds	r3, r7, #4
   2184a:	781b      	ldrb	r3, [r3, #0]
   2184c:	b2db      	uxtb	r3, r3
   2184e:	001c      	movs	r4, r3
   21850:	1d3b      	adds	r3, r7, #4
   21852:	785b      	ldrb	r3, [r3, #1]
   21854:	b2db      	uxtb	r3, r3
   21856:	488d      	ldr	r0, [pc, #564]	; (21a8c <hif_isr+0x3bc>)
   21858:	9300      	str	r3, [sp, #0]
   2185a:	0023      	movs	r3, r4
   2185c:	4c86      	ldr	r4, [pc, #536]	; (21a78 <hif_isr+0x3a8>)
   2185e:	47a0      	blx	r4
   21860:	4b87      	ldr	r3, [pc, #540]	; (21a80 <hif_isr+0x3b0>)
   21862:	0018      	movs	r0, r3
   21864:	4b84      	ldr	r3, [pc, #528]	; (21a78 <hif_isr+0x3a8>)
   21866:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21868:	2001      	movs	r0, #1
   2186a:	4b7d      	ldr	r3, [pc, #500]	; (21a60 <hif_isr+0x390>)
   2186c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2186e:	230f      	movs	r3, #15
   21870:	18fb      	adds	r3, r7, r3
   21872:	22fa      	movs	r2, #250	; 0xfa
   21874:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21876:	e173      	b.n	21b60 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21878:	1d3b      	adds	r3, r7, #4
   2187a:	781b      	ldrb	r3, [r3, #0]
   2187c:	b2db      	uxtb	r3, r3
   2187e:	2b01      	cmp	r3, #1
   21880:	d122      	bne.n	218c8 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21882:	4b79      	ldr	r3, [pc, #484]	; (21a68 <hif_isr+0x398>)
   21884:	691b      	ldr	r3, [r3, #16]
   21886:	2b00      	cmp	r3, #0
   21888:	d00d      	beq.n	218a6 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2188a:	4b77      	ldr	r3, [pc, #476]	; (21a68 <hif_isr+0x398>)
   2188c:	691b      	ldr	r3, [r3, #16]
   2188e:	1d3a      	adds	r2, r7, #4
   21890:	7852      	ldrb	r2, [r2, #1]
   21892:	b2d0      	uxtb	r0, r2
   21894:	1d3a      	adds	r2, r7, #4
   21896:	8852      	ldrh	r2, [r2, #2]
   21898:	b292      	uxth	r2, r2
   2189a:	3a08      	subs	r2, #8
   2189c:	b291      	uxth	r1, r2
   2189e:	683a      	ldr	r2, [r7, #0]
   218a0:	3208      	adds	r2, #8
   218a2:	4798      	blx	r3
   218a4:	e102      	b.n	21aac <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   218a6:	23e8      	movs	r3, #232	; 0xe8
   218a8:	33ff      	adds	r3, #255	; 0xff
   218aa:	001a      	movs	r2, r3
   218ac:	4970      	ldr	r1, [pc, #448]	; (21a70 <hif_isr+0x3a0>)
   218ae:	4b71      	ldr	r3, [pc, #452]	; (21a74 <hif_isr+0x3a4>)
   218b0:	0018      	movs	r0, r3
   218b2:	4b71      	ldr	r3, [pc, #452]	; (21a78 <hif_isr+0x3a8>)
   218b4:	4798      	blx	r3
   218b6:	4b76      	ldr	r3, [pc, #472]	; (21a90 <hif_isr+0x3c0>)
   218b8:	0018      	movs	r0, r3
   218ba:	4b6f      	ldr	r3, [pc, #444]	; (21a78 <hif_isr+0x3a8>)
   218bc:	4798      	blx	r3
   218be:	4b70      	ldr	r3, [pc, #448]	; (21a80 <hif_isr+0x3b0>)
   218c0:	0018      	movs	r0, r3
   218c2:	4b6d      	ldr	r3, [pc, #436]	; (21a78 <hif_isr+0x3a8>)
   218c4:	4798      	blx	r3
   218c6:	e0f1      	b.n	21aac <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   218c8:	1d3b      	adds	r3, r7, #4
   218ca:	781b      	ldrb	r3, [r3, #0]
   218cc:	b2db      	uxtb	r3, r3
   218ce:	2b02      	cmp	r3, #2
   218d0:	d122      	bne.n	21918 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   218d2:	4b65      	ldr	r3, [pc, #404]	; (21a68 <hif_isr+0x398>)
   218d4:	695b      	ldr	r3, [r3, #20]
   218d6:	2b00      	cmp	r3, #0
   218d8:	d00d      	beq.n	218f6 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   218da:	4b63      	ldr	r3, [pc, #396]	; (21a68 <hif_isr+0x398>)
   218dc:	695b      	ldr	r3, [r3, #20]
   218de:	1d3a      	adds	r2, r7, #4
   218e0:	7852      	ldrb	r2, [r2, #1]
   218e2:	b2d0      	uxtb	r0, r2
   218e4:	1d3a      	adds	r2, r7, #4
   218e6:	8852      	ldrh	r2, [r2, #2]
   218e8:	b292      	uxth	r2, r2
   218ea:	3a08      	subs	r2, #8
   218ec:	b291      	uxth	r1, r2
   218ee:	683a      	ldr	r2, [r7, #0]
   218f0:	3208      	adds	r2, #8
   218f2:	4798      	blx	r3
   218f4:	e0da      	b.n	21aac <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   218f6:	23f0      	movs	r3, #240	; 0xf0
   218f8:	33ff      	adds	r3, #255	; 0xff
   218fa:	001a      	movs	r2, r3
   218fc:	495c      	ldr	r1, [pc, #368]	; (21a70 <hif_isr+0x3a0>)
   218fe:	4b5d      	ldr	r3, [pc, #372]	; (21a74 <hif_isr+0x3a4>)
   21900:	0018      	movs	r0, r3
   21902:	4b5d      	ldr	r3, [pc, #372]	; (21a78 <hif_isr+0x3a8>)
   21904:	4798      	blx	r3
   21906:	4b63      	ldr	r3, [pc, #396]	; (21a94 <hif_isr+0x3c4>)
   21908:	0018      	movs	r0, r3
   2190a:	4b5b      	ldr	r3, [pc, #364]	; (21a78 <hif_isr+0x3a8>)
   2190c:	4798      	blx	r3
   2190e:	4b5c      	ldr	r3, [pc, #368]	; (21a80 <hif_isr+0x3b0>)
   21910:	0018      	movs	r0, r3
   21912:	4b59      	ldr	r3, [pc, #356]	; (21a78 <hif_isr+0x3a8>)
   21914:	4798      	blx	r3
   21916:	e0c9      	b.n	21aac <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   21918:	1d3b      	adds	r3, r7, #4
   2191a:	781b      	ldrb	r3, [r3, #0]
   2191c:	b2db      	uxtb	r3, r3
   2191e:	2b04      	cmp	r3, #4
   21920:	d122      	bne.n	21968 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21922:	4b51      	ldr	r3, [pc, #324]	; (21a68 <hif_isr+0x398>)
   21924:	699b      	ldr	r3, [r3, #24]
   21926:	2b00      	cmp	r3, #0
   21928:	d00d      	beq.n	21946 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2192a:	4b4f      	ldr	r3, [pc, #316]	; (21a68 <hif_isr+0x398>)
   2192c:	699b      	ldr	r3, [r3, #24]
   2192e:	1d3a      	adds	r2, r7, #4
   21930:	7852      	ldrb	r2, [r2, #1]
   21932:	b2d0      	uxtb	r0, r2
   21934:	1d3a      	adds	r2, r7, #4
   21936:	8852      	ldrh	r2, [r2, #2]
   21938:	b292      	uxth	r2, r2
   2193a:	3a08      	subs	r2, #8
   2193c:	b291      	uxth	r1, r2
   2193e:	683a      	ldr	r2, [r7, #0]
   21940:	3208      	adds	r2, #8
   21942:	4798      	blx	r3
   21944:	e0b2      	b.n	21aac <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21946:	23f8      	movs	r3, #248	; 0xf8
   21948:	33ff      	adds	r3, #255	; 0xff
   2194a:	001a      	movs	r2, r3
   2194c:	4948      	ldr	r1, [pc, #288]	; (21a70 <hif_isr+0x3a0>)
   2194e:	4b49      	ldr	r3, [pc, #292]	; (21a74 <hif_isr+0x3a4>)
   21950:	0018      	movs	r0, r3
   21952:	4b49      	ldr	r3, [pc, #292]	; (21a78 <hif_isr+0x3a8>)
   21954:	4798      	blx	r3
   21956:	4b50      	ldr	r3, [pc, #320]	; (21a98 <hif_isr+0x3c8>)
   21958:	0018      	movs	r0, r3
   2195a:	4b47      	ldr	r3, [pc, #284]	; (21a78 <hif_isr+0x3a8>)
   2195c:	4798      	blx	r3
   2195e:	4b48      	ldr	r3, [pc, #288]	; (21a80 <hif_isr+0x3b0>)
   21960:	0018      	movs	r0, r3
   21962:	4b45      	ldr	r3, [pc, #276]	; (21a78 <hif_isr+0x3a8>)
   21964:	4798      	blx	r3
   21966:	e0a1      	b.n	21aac <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   21968:	1d3b      	adds	r3, r7, #4
   2196a:	781b      	ldrb	r3, [r3, #0]
   2196c:	b2db      	uxtb	r3, r3
   2196e:	2b06      	cmp	r3, #6
   21970:	d121      	bne.n	219b6 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21972:	4b3d      	ldr	r3, [pc, #244]	; (21a68 <hif_isr+0x398>)
   21974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21976:	2b00      	cmp	r3, #0
   21978:	d00d      	beq.n	21996 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2197a:	4b3b      	ldr	r3, [pc, #236]	; (21a68 <hif_isr+0x398>)
   2197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2197e:	1d3a      	adds	r2, r7, #4
   21980:	7852      	ldrb	r2, [r2, #1]
   21982:	b2d0      	uxtb	r0, r2
   21984:	1d3a      	adds	r2, r7, #4
   21986:	8852      	ldrh	r2, [r2, #2]
   21988:	b292      	uxth	r2, r2
   2198a:	3a08      	subs	r2, #8
   2198c:	b291      	uxth	r1, r2
   2198e:	683a      	ldr	r2, [r7, #0]
   21990:	3208      	adds	r2, #8
   21992:	4798      	blx	r3
   21994:	e08a      	b.n	21aac <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21996:	2380      	movs	r3, #128	; 0x80
   21998:	009a      	lsls	r2, r3, #2
   2199a:	4935      	ldr	r1, [pc, #212]	; (21a70 <hif_isr+0x3a0>)
   2199c:	4b35      	ldr	r3, [pc, #212]	; (21a74 <hif_isr+0x3a4>)
   2199e:	0018      	movs	r0, r3
   219a0:	4b35      	ldr	r3, [pc, #212]	; (21a78 <hif_isr+0x3a8>)
   219a2:	4798      	blx	r3
   219a4:	4b3d      	ldr	r3, [pc, #244]	; (21a9c <hif_isr+0x3cc>)
   219a6:	0018      	movs	r0, r3
   219a8:	4b33      	ldr	r3, [pc, #204]	; (21a78 <hif_isr+0x3a8>)
   219aa:	4798      	blx	r3
   219ac:	4b34      	ldr	r3, [pc, #208]	; (21a80 <hif_isr+0x3b0>)
   219ae:	0018      	movs	r0, r3
   219b0:	4b31      	ldr	r3, [pc, #196]	; (21a78 <hif_isr+0x3a8>)
   219b2:	4798      	blx	r3
   219b4:	e07a      	b.n	21aac <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   219b6:	1d3b      	adds	r3, r7, #4
   219b8:	781b      	ldrb	r3, [r3, #0]
   219ba:	b2db      	uxtb	r3, r3
   219bc:	2b07      	cmp	r3, #7
   219be:	d120      	bne.n	21a02 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   219c0:	4b29      	ldr	r3, [pc, #164]	; (21a68 <hif_isr+0x398>)
   219c2:	69db      	ldr	r3, [r3, #28]
   219c4:	2b00      	cmp	r3, #0
   219c6:	d00d      	beq.n	219e4 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   219c8:	4b27      	ldr	r3, [pc, #156]	; (21a68 <hif_isr+0x398>)
   219ca:	69db      	ldr	r3, [r3, #28]
   219cc:	1d3a      	adds	r2, r7, #4
   219ce:	7852      	ldrb	r2, [r2, #1]
   219d0:	b2d0      	uxtb	r0, r2
   219d2:	1d3a      	adds	r2, r7, #4
   219d4:	8852      	ldrh	r2, [r2, #2]
   219d6:	b292      	uxth	r2, r2
   219d8:	3a08      	subs	r2, #8
   219da:	b291      	uxth	r1, r2
   219dc:	683a      	ldr	r2, [r7, #0]
   219de:	3208      	adds	r2, #8
   219e0:	4798      	blx	r3
   219e2:	e063      	b.n	21aac <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   219e4:	4a2e      	ldr	r2, [pc, #184]	; (21aa0 <hif_isr+0x3d0>)
   219e6:	4922      	ldr	r1, [pc, #136]	; (21a70 <hif_isr+0x3a0>)
   219e8:	4b22      	ldr	r3, [pc, #136]	; (21a74 <hif_isr+0x3a4>)
   219ea:	0018      	movs	r0, r3
   219ec:	4b22      	ldr	r3, [pc, #136]	; (21a78 <hif_isr+0x3a8>)
   219ee:	4798      	blx	r3
   219f0:	4b2c      	ldr	r3, [pc, #176]	; (21aa4 <hif_isr+0x3d4>)
   219f2:	0018      	movs	r0, r3
   219f4:	4b20      	ldr	r3, [pc, #128]	; (21a78 <hif_isr+0x3a8>)
   219f6:	4798      	blx	r3
   219f8:	4b21      	ldr	r3, [pc, #132]	; (21a80 <hif_isr+0x3b0>)
   219fa:	0018      	movs	r0, r3
   219fc:	4b1e      	ldr	r3, [pc, #120]	; (21a78 <hif_isr+0x3a8>)
   219fe:	4798      	blx	r3
   21a00:	e054      	b.n	21aac <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21a02:	1d3b      	adds	r3, r7, #4
   21a04:	781b      	ldrb	r3, [r3, #0]
   21a06:	b2db      	uxtb	r3, r3
   21a08:	2b05      	cmp	r3, #5
   21a0a:	d111      	bne.n	21a30 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   21a0c:	4b16      	ldr	r3, [pc, #88]	; (21a68 <hif_isr+0x398>)
   21a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21a10:	2b00      	cmp	r3, #0
   21a12:	d04b      	beq.n	21aac <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21a14:	4b14      	ldr	r3, [pc, #80]	; (21a68 <hif_isr+0x398>)
   21a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21a18:	1d3a      	adds	r2, r7, #4
   21a1a:	7852      	ldrb	r2, [r2, #1]
   21a1c:	b2d0      	uxtb	r0, r2
   21a1e:	1d3a      	adds	r2, r7, #4
   21a20:	8852      	ldrh	r2, [r2, #2]
   21a22:	b292      	uxth	r2, r2
   21a24:	3a08      	subs	r2, #8
   21a26:	b291      	uxth	r1, r2
   21a28:	683a      	ldr	r2, [r7, #0]
   21a2a:	3208      	adds	r2, #8
   21a2c:	4798      	blx	r3
   21a2e:	e03d      	b.n	21aac <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   21a30:	2384      	movs	r3, #132	; 0x84
   21a32:	009a      	lsls	r2, r3, #2
   21a34:	490e      	ldr	r1, [pc, #56]	; (21a70 <hif_isr+0x3a0>)
   21a36:	4b0f      	ldr	r3, [pc, #60]	; (21a74 <hif_isr+0x3a4>)
   21a38:	0018      	movs	r0, r3
   21a3a:	4b0f      	ldr	r3, [pc, #60]	; (21a78 <hif_isr+0x3a8>)
   21a3c:	4798      	blx	r3
   21a3e:	4b1a      	ldr	r3, [pc, #104]	; (21aa8 <hif_isr+0x3d8>)
   21a40:	0018      	movs	r0, r3
   21a42:	4b0d      	ldr	r3, [pc, #52]	; (21a78 <hif_isr+0x3a8>)
   21a44:	4798      	blx	r3
   21a46:	4b0e      	ldr	r3, [pc, #56]	; (21a80 <hif_isr+0x3b0>)
   21a48:	0018      	movs	r0, r3
   21a4a:	4b0b      	ldr	r3, [pc, #44]	; (21a78 <hif_isr+0x3a8>)
   21a4c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   21a4e:	230f      	movs	r3, #15
   21a50:	18fb      	adds	r3, r7, r3
   21a52:	22fa      	movs	r2, #250	; 0xfa
   21a54:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21a56:	e083      	b.n	21b60 <hif_isr+0x490>
   21a58:	00001070 	.word	0x00001070
   21a5c:	00023085 	.word	0x00023085
   21a60:	00020881 	.word	0x00020881
   21a64:	000230a9 	.word	0x000230a9
   21a68:	20005b10 	.word	0x20005b10
   21a6c:	00001084 	.word	0x00001084
   21a70:	00038d28 	.word	0x00038d28
   21a74:	00038a18 	.word	0x00038a18
   21a78:	0001e399 	.word	0x0001e399
   21a7c:	00038a4c 	.word	0x00038a4c
   21a80:	00038a14 	.word	0x00038a14
   21a84:	000230f9 	.word	0x000230f9
   21a88:	00038a74 	.word	0x00038a74
   21a8c:	00038a8c 	.word	0x00038a8c
   21a90:	00038acc 	.word	0x00038acc
   21a94:	00038af0 	.word	0x00038af0
   21a98:	00038b14 	.word	0x00038b14
   21a9c:	00038b34 	.word	0x00038b34
   21aa0:	00000207 	.word	0x00000207
   21aa4:	00038b58 	.word	0x00038b58
   21aa8:	00038b7c 	.word	0x00038b7c
				}
				if(gstrHifCxt.u8HifRXDone)
   21aac:	4b30      	ldr	r3, [pc, #192]	; (21b70 <hif_isr+0x4a0>)
   21aae:	789b      	ldrb	r3, [r3, #2]
   21ab0:	b2db      	uxtb	r3, r3
   21ab2:	2b00      	cmp	r3, #0
   21ab4:	d054      	beq.n	21b60 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   21ab6:	4a2f      	ldr	r2, [pc, #188]	; (21b74 <hif_isr+0x4a4>)
   21ab8:	492f      	ldr	r1, [pc, #188]	; (21b78 <hif_isr+0x4a8>)
   21aba:	4b30      	ldr	r3, [pc, #192]	; (21b7c <hif_isr+0x4ac>)
   21abc:	0018      	movs	r0, r3
   21abe:	4b30      	ldr	r3, [pc, #192]	; (21b80 <hif_isr+0x4b0>)
   21ac0:	4798      	blx	r3
   21ac2:	1d3b      	adds	r3, r7, #4
   21ac4:	781b      	ldrb	r3, [r3, #0]
   21ac6:	b2db      	uxtb	r3, r3
   21ac8:	0019      	movs	r1, r3
   21aca:	1d3b      	adds	r3, r7, #4
   21acc:	785b      	ldrb	r3, [r3, #1]
   21ace:	b2db      	uxtb	r3, r3
   21ad0:	001a      	movs	r2, r3
   21ad2:	4b2c      	ldr	r3, [pc, #176]	; (21b84 <hif_isr+0x4b4>)
   21ad4:	0018      	movs	r0, r3
   21ad6:	4b2a      	ldr	r3, [pc, #168]	; (21b80 <hif_isr+0x4b0>)
   21ad8:	4798      	blx	r3
   21ada:	4b2b      	ldr	r3, [pc, #172]	; (21b88 <hif_isr+0x4b8>)
   21adc:	0018      	movs	r0, r3
   21ade:	4b28      	ldr	r3, [pc, #160]	; (21b80 <hif_isr+0x4b0>)
   21ae0:	4798      	blx	r3
					ret = hif_set_rx_done();
   21ae2:	230f      	movs	r3, #15
   21ae4:	18fc      	adds	r4, r7, r3
   21ae6:	4b29      	ldr	r3, [pc, #164]	; (21b8c <hif_isr+0x4bc>)
   21ae8:	4798      	blx	r3
   21aea:	0003      	movs	r3, r0
   21aec:	7023      	strb	r3, [r4, #0]
   21aee:	e037      	b.n	21b60 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21af0:	4a27      	ldr	r2, [pc, #156]	; (21b90 <hif_isr+0x4c0>)
   21af2:	4921      	ldr	r1, [pc, #132]	; (21b78 <hif_isr+0x4a8>)
   21af4:	4b21      	ldr	r3, [pc, #132]	; (21b7c <hif_isr+0x4ac>)
   21af6:	0018      	movs	r0, r3
   21af8:	4b21      	ldr	r3, [pc, #132]	; (21b80 <hif_isr+0x4b0>)
   21afa:	4798      	blx	r3
   21afc:	4b25      	ldr	r3, [pc, #148]	; (21b94 <hif_isr+0x4c4>)
   21afe:	0018      	movs	r0, r3
   21b00:	4b1f      	ldr	r3, [pc, #124]	; (21b80 <hif_isr+0x4b0>)
   21b02:	4798      	blx	r3
   21b04:	4b20      	ldr	r3, [pc, #128]	; (21b88 <hif_isr+0x4b8>)
   21b06:	0018      	movs	r0, r3
   21b08:	4b1d      	ldr	r3, [pc, #116]	; (21b80 <hif_isr+0x4b0>)
   21b0a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   21b0c:	230f      	movs	r3, #15
   21b0e:	18fb      	adds	r3, r7, r3
   21b10:	22fe      	movs	r2, #254	; 0xfe
   21b12:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21b14:	e024      	b.n	21b60 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   21b16:	4a20      	ldr	r2, [pc, #128]	; (21b98 <hif_isr+0x4c8>)
   21b18:	4917      	ldr	r1, [pc, #92]	; (21b78 <hif_isr+0x4a8>)
   21b1a:	4b18      	ldr	r3, [pc, #96]	; (21b7c <hif_isr+0x4ac>)
   21b1c:	0018      	movs	r0, r3
   21b1e:	4b18      	ldr	r3, [pc, #96]	; (21b80 <hif_isr+0x4b0>)
   21b20:	4798      	blx	r3
   21b22:	68ba      	ldr	r2, [r7, #8]
   21b24:	4b1d      	ldr	r3, [pc, #116]	; (21b9c <hif_isr+0x4cc>)
   21b26:	0011      	movs	r1, r2
   21b28:	0018      	movs	r0, r3
   21b2a:	4b15      	ldr	r3, [pc, #84]	; (21b80 <hif_isr+0x4b0>)
   21b2c:	4798      	blx	r3
   21b2e:	4b16      	ldr	r3, [pc, #88]	; (21b88 <hif_isr+0x4b8>)
   21b30:	0018      	movs	r0, r3
   21b32:	4b13      	ldr	r3, [pc, #76]	; (21b80 <hif_isr+0x4b0>)
   21b34:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21b36:	230f      	movs	r3, #15
   21b38:	18fb      	adds	r3, r7, r3
   21b3a:	22f4      	movs	r2, #244	; 0xf4
   21b3c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21b3e:	e00f      	b.n	21b60 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21b40:	4a17      	ldr	r2, [pc, #92]	; (21ba0 <hif_isr+0x4d0>)
   21b42:	490d      	ldr	r1, [pc, #52]	; (21b78 <hif_isr+0x4a8>)
   21b44:	4b0d      	ldr	r3, [pc, #52]	; (21b7c <hif_isr+0x4ac>)
   21b46:	0018      	movs	r0, r3
   21b48:	4b0d      	ldr	r3, [pc, #52]	; (21b80 <hif_isr+0x4b0>)
   21b4a:	4798      	blx	r3
   21b4c:	4b15      	ldr	r3, [pc, #84]	; (21ba4 <hif_isr+0x4d4>)
   21b4e:	0018      	movs	r0, r3
   21b50:	4b0b      	ldr	r3, [pc, #44]	; (21b80 <hif_isr+0x4b0>)
   21b52:	4798      	blx	r3
   21b54:	4b0c      	ldr	r3, [pc, #48]	; (21b88 <hif_isr+0x4b8>)
   21b56:	0018      	movs	r0, r3
   21b58:	4b09      	ldr	r3, [pc, #36]	; (21b80 <hif_isr+0x4b0>)
   21b5a:	4798      	blx	r3
		goto ERR1;
   21b5c:	e000      	b.n	21b60 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   21b5e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21b60:	230f      	movs	r3, #15
   21b62:	18fb      	adds	r3, r7, r3
   21b64:	781b      	ldrb	r3, [r3, #0]
   21b66:	b25b      	sxtb	r3, r3
}
   21b68:	0018      	movs	r0, r3
   21b6a:	46bd      	mov	sp, r7
   21b6c:	b005      	add	sp, #20
   21b6e:	bd90      	pop	{r4, r7, pc}
   21b70:	20005b10 	.word	0x20005b10
   21b74:	00000216 	.word	0x00000216
   21b78:	00038d28 	.word	0x00038d28
   21b7c:	00038a18 	.word	0x00038a18
   21b80:	0001e399 	.word	0x0001e399
   21b84:	00038b94 	.word	0x00038b94
   21b88:	00038a14 	.word	0x00038a14
   21b8c:	00021165 	.word	0x00021165
   21b90:	0000021d 	.word	0x0000021d
   21b94:	00038bc0 	.word	0x00038bc0
   21b98:	00000225 	.word	0x00000225
   21b9c:	00038bd4 	.word	0x00038bd4
   21ba0:	0000022e 	.word	0x0000022e
   21ba4:	00038bf0 	.word	0x00038bf0

00021ba8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   21ba8:	b590      	push	{r4, r7, lr}
   21baa:	b083      	sub	sp, #12
   21bac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   21bae:	1dfb      	adds	r3, r7, #7
   21bb0:	2200      	movs	r2, #0
   21bb2:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21bb4:	4b1c      	ldr	r3, [pc, #112]	; (21c28 <hif_handle_isr+0x80>)
   21bb6:	2200      	movs	r2, #0
   21bb8:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21bba:	e024      	b.n	21c06 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   21bbc:	4b1a      	ldr	r3, [pc, #104]	; (21c28 <hif_handle_isr+0x80>)
   21bbe:	78db      	ldrb	r3, [r3, #3]
   21bc0:	b2db      	uxtb	r3, r3
   21bc2:	3b01      	subs	r3, #1
   21bc4:	b2da      	uxtb	r2, r3
   21bc6:	4b18      	ldr	r3, [pc, #96]	; (21c28 <hif_handle_isr+0x80>)
   21bc8:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   21bca:	1dfc      	adds	r4, r7, #7
   21bcc:	4b17      	ldr	r3, [pc, #92]	; (21c2c <hif_handle_isr+0x84>)
   21bce:	4798      	blx	r3
   21bd0:	0003      	movs	r3, r0
   21bd2:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21bd4:	1dfb      	adds	r3, r7, #7
   21bd6:	781b      	ldrb	r3, [r3, #0]
   21bd8:	b25b      	sxtb	r3, r3
   21bda:	2b00      	cmp	r3, #0
   21bdc:	d100      	bne.n	21be0 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   21bde:	e012      	b.n	21c06 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21be0:	4a13      	ldr	r2, [pc, #76]	; (21c30 <hif_handle_isr+0x88>)
   21be2:	4914      	ldr	r1, [pc, #80]	; (21c34 <hif_handle_isr+0x8c>)
   21be4:	4b14      	ldr	r3, [pc, #80]	; (21c38 <hif_handle_isr+0x90>)
   21be6:	0018      	movs	r0, r3
   21be8:	4b14      	ldr	r3, [pc, #80]	; (21c3c <hif_handle_isr+0x94>)
   21bea:	4798      	blx	r3
   21bec:	1dfb      	adds	r3, r7, #7
   21bee:	2200      	movs	r2, #0
   21bf0:	569a      	ldrsb	r2, [r3, r2]
   21bf2:	4b13      	ldr	r3, [pc, #76]	; (21c40 <hif_handle_isr+0x98>)
   21bf4:	0011      	movs	r1, r2
   21bf6:	0018      	movs	r0, r3
   21bf8:	4b10      	ldr	r3, [pc, #64]	; (21c3c <hif_handle_isr+0x94>)
   21bfa:	4798      	blx	r3
   21bfc:	4b11      	ldr	r3, [pc, #68]	; (21c44 <hif_handle_isr+0x9c>)
   21bfe:	0018      	movs	r0, r3
   21c00:	4b0e      	ldr	r3, [pc, #56]	; (21c3c <hif_handle_isr+0x94>)
   21c02:	4798      	blx	r3
			ret = hif_isr();
   21c04:	e7e1      	b.n	21bca <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21c06:	4b08      	ldr	r3, [pc, #32]	; (21c28 <hif_handle_isr+0x80>)
   21c08:	78db      	ldrb	r3, [r3, #3]
   21c0a:	b2db      	uxtb	r3, r3
   21c0c:	2b00      	cmp	r3, #0
   21c0e:	d004      	beq.n	21c1a <hif_handle_isr+0x72>
   21c10:	4b05      	ldr	r3, [pc, #20]	; (21c28 <hif_handle_isr+0x80>)
   21c12:	791b      	ldrb	r3, [r3, #4]
   21c14:	b2db      	uxtb	r3, r3
   21c16:	2b00      	cmp	r3, #0
   21c18:	d0d0      	beq.n	21bbc <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   21c1a:	1dfb      	adds	r3, r7, #7
   21c1c:	781b      	ldrb	r3, [r3, #0]
   21c1e:	b25b      	sxtb	r3, r3
}
   21c20:	0018      	movs	r0, r3
   21c22:	46bd      	mov	sp, r7
   21c24:	b003      	add	sp, #12
   21c26:	bd90      	pop	{r4, r7, pc}
   21c28:	20005b10 	.word	0x20005b10
   21c2c:	000216d1 	.word	0x000216d1
   21c30:	00000257 	.word	0x00000257
   21c34:	00038d30 	.word	0x00038d30
   21c38:	00038a18 	.word	0x00038a18
   21c3c:	0001e399 	.word	0x0001e399
   21c40:	00038c14 	.word	0x00038c14
   21c44:	00038a14 	.word	0x00038a14

00021c48 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21c48:	b590      	push	{r4, r7, lr}
   21c4a:	b087      	sub	sp, #28
   21c4c:	af00      	add	r7, sp, #0
   21c4e:	60f8      	str	r0, [r7, #12]
   21c50:	60b9      	str	r1, [r7, #8]
   21c52:	0019      	movs	r1, r3
   21c54:	1dbb      	adds	r3, r7, #6
   21c56:	801a      	strh	r2, [r3, #0]
   21c58:	1d7b      	adds	r3, r7, #5
   21c5a:	1c0a      	adds	r2, r1, #0
   21c5c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21c5e:	2317      	movs	r3, #23
   21c60:	18fb      	adds	r3, r7, r3
   21c62:	2200      	movs	r2, #0
   21c64:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21c66:	68fb      	ldr	r3, [r7, #12]
   21c68:	2b00      	cmp	r3, #0
   21c6a:	d006      	beq.n	21c7a <hif_receive+0x32>
   21c6c:	68bb      	ldr	r3, [r7, #8]
   21c6e:	2b00      	cmp	r3, #0
   21c70:	d003      	beq.n	21c7a <hif_receive+0x32>
   21c72:	1dbb      	adds	r3, r7, #6
   21c74:	881b      	ldrh	r3, [r3, #0]
   21c76:	2b00      	cmp	r3, #0
   21c78:	d11e      	bne.n	21cb8 <hif_receive+0x70>
	{
		if(isDone)
   21c7a:	1d7b      	adds	r3, r7, #5
   21c7c:	781b      	ldrb	r3, [r3, #0]
   21c7e:	2b00      	cmp	r3, #0
   21c80:	d006      	beq.n	21c90 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21c82:	2317      	movs	r3, #23
   21c84:	18fc      	adds	r4, r7, r3
   21c86:	4b45      	ldr	r3, [pc, #276]	; (21d9c <hif_receive+0x154>)
   21c88:	4798      	blx	r3
   21c8a:	0003      	movs	r3, r0
   21c8c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   21c8e:	e07c      	b.n	21d8a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21c90:	2317      	movs	r3, #23
   21c92:	18fb      	adds	r3, r7, r3
   21c94:	22f4      	movs	r2, #244	; 0xf4
   21c96:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21c98:	239e      	movs	r3, #158	; 0x9e
   21c9a:	009a      	lsls	r2, r3, #2
   21c9c:	4940      	ldr	r1, [pc, #256]	; (21da0 <hif_receive+0x158>)
   21c9e:	4b41      	ldr	r3, [pc, #260]	; (21da4 <hif_receive+0x15c>)
   21ca0:	0018      	movs	r0, r3
   21ca2:	4b41      	ldr	r3, [pc, #260]	; (21da8 <hif_receive+0x160>)
   21ca4:	4798      	blx	r3
   21ca6:	4b41      	ldr	r3, [pc, #260]	; (21dac <hif_receive+0x164>)
   21ca8:	0018      	movs	r0, r3
   21caa:	4b3f      	ldr	r3, [pc, #252]	; (21da8 <hif_receive+0x160>)
   21cac:	4798      	blx	r3
   21cae:	4b40      	ldr	r3, [pc, #256]	; (21db0 <hif_receive+0x168>)
   21cb0:	0018      	movs	r0, r3
   21cb2:	4b3d      	ldr	r3, [pc, #244]	; (21da8 <hif_receive+0x160>)
   21cb4:	4798      	blx	r3
		goto ERR1;
   21cb6:	e068      	b.n	21d8a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21cb8:	1dbb      	adds	r3, r7, #6
   21cba:	881a      	ldrh	r2, [r3, #0]
   21cbc:	4b3d      	ldr	r3, [pc, #244]	; (21db4 <hif_receive+0x16c>)
   21cbe:	68db      	ldr	r3, [r3, #12]
   21cc0:	429a      	cmp	r2, r3
   21cc2:	d917      	bls.n	21cf4 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21cc4:	2317      	movs	r3, #23
   21cc6:	18fb      	adds	r3, r7, r3
   21cc8:	22f4      	movs	r2, #244	; 0xf4
   21cca:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21ccc:	23a0      	movs	r3, #160	; 0xa0
   21cce:	009a      	lsls	r2, r3, #2
   21cd0:	4933      	ldr	r1, [pc, #204]	; (21da0 <hif_receive+0x158>)
   21cd2:	4b34      	ldr	r3, [pc, #208]	; (21da4 <hif_receive+0x15c>)
   21cd4:	0018      	movs	r0, r3
   21cd6:	4b34      	ldr	r3, [pc, #208]	; (21da8 <hif_receive+0x160>)
   21cd8:	4798      	blx	r3
   21cda:	1dbb      	adds	r3, r7, #6
   21cdc:	8819      	ldrh	r1, [r3, #0]
   21cde:	4b35      	ldr	r3, [pc, #212]	; (21db4 <hif_receive+0x16c>)
   21ce0:	68da      	ldr	r2, [r3, #12]
   21ce2:	4b35      	ldr	r3, [pc, #212]	; (21db8 <hif_receive+0x170>)
   21ce4:	0018      	movs	r0, r3
   21ce6:	4b30      	ldr	r3, [pc, #192]	; (21da8 <hif_receive+0x160>)
   21ce8:	4798      	blx	r3
   21cea:	4b31      	ldr	r3, [pc, #196]	; (21db0 <hif_receive+0x168>)
   21cec:	0018      	movs	r0, r3
   21cee:	4b2e      	ldr	r3, [pc, #184]	; (21da8 <hif_receive+0x160>)
   21cf0:	4798      	blx	r3
		goto ERR1;
   21cf2:	e04a      	b.n	21d8a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21cf4:	4b2f      	ldr	r3, [pc, #188]	; (21db4 <hif_receive+0x16c>)
   21cf6:	689a      	ldr	r2, [r3, #8]
   21cf8:	68fb      	ldr	r3, [r7, #12]
   21cfa:	429a      	cmp	r2, r3
   21cfc:	d80a      	bhi.n	21d14 <hif_receive+0xcc>
   21cfe:	1dbb      	adds	r3, r7, #6
   21d00:	881a      	ldrh	r2, [r3, #0]
   21d02:	68fb      	ldr	r3, [r7, #12]
   21d04:	18d2      	adds	r2, r2, r3
   21d06:	4b2b      	ldr	r3, [pc, #172]	; (21db4 <hif_receive+0x16c>)
   21d08:	6899      	ldr	r1, [r3, #8]
   21d0a:	4b2a      	ldr	r3, [pc, #168]	; (21db4 <hif_receive+0x16c>)
   21d0c:	68db      	ldr	r3, [r3, #12]
   21d0e:	18cb      	adds	r3, r1, r3
   21d10:	429a      	cmp	r2, r3
   21d12:	d912      	bls.n	21d3a <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21d14:	2317      	movs	r3, #23
   21d16:	18fb      	adds	r3, r7, r3
   21d18:	22f4      	movs	r2, #244	; 0xf4
   21d1a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21d1c:	4a27      	ldr	r2, [pc, #156]	; (21dbc <hif_receive+0x174>)
   21d1e:	4920      	ldr	r1, [pc, #128]	; (21da0 <hif_receive+0x158>)
   21d20:	4b20      	ldr	r3, [pc, #128]	; (21da4 <hif_receive+0x15c>)
   21d22:	0018      	movs	r0, r3
   21d24:	4b20      	ldr	r3, [pc, #128]	; (21da8 <hif_receive+0x160>)
   21d26:	4798      	blx	r3
   21d28:	4b25      	ldr	r3, [pc, #148]	; (21dc0 <hif_receive+0x178>)
   21d2a:	0018      	movs	r0, r3
   21d2c:	4b1e      	ldr	r3, [pc, #120]	; (21da8 <hif_receive+0x160>)
   21d2e:	4798      	blx	r3
   21d30:	4b1f      	ldr	r3, [pc, #124]	; (21db0 <hif_receive+0x168>)
   21d32:	0018      	movs	r0, r3
   21d34:	4b1c      	ldr	r3, [pc, #112]	; (21da8 <hif_receive+0x160>)
   21d36:	4798      	blx	r3
		goto ERR1;
   21d38:	e027      	b.n	21d8a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   21d3a:	1dbb      	adds	r3, r7, #6
   21d3c:	881a      	ldrh	r2, [r3, #0]
   21d3e:	2317      	movs	r3, #23
   21d40:	18fc      	adds	r4, r7, r3
   21d42:	68b9      	ldr	r1, [r7, #8]
   21d44:	68fb      	ldr	r3, [r7, #12]
   21d46:	0018      	movs	r0, r3
   21d48:	4b1e      	ldr	r3, [pc, #120]	; (21dc4 <hif_receive+0x17c>)
   21d4a:	4798      	blx	r3
   21d4c:	0003      	movs	r3, r0
   21d4e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21d50:	2317      	movs	r3, #23
   21d52:	18fb      	adds	r3, r7, r3
   21d54:	781b      	ldrb	r3, [r3, #0]
   21d56:	b25b      	sxtb	r3, r3
   21d58:	2b00      	cmp	r3, #0
   21d5a:	d115      	bne.n	21d88 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   21d5c:	4b15      	ldr	r3, [pc, #84]	; (21db4 <hif_receive+0x16c>)
   21d5e:	689a      	ldr	r2, [r3, #8]
   21d60:	4b14      	ldr	r3, [pc, #80]	; (21db4 <hif_receive+0x16c>)
   21d62:	68db      	ldr	r3, [r3, #12]
   21d64:	18d2      	adds	r2, r2, r3
   21d66:	1dbb      	adds	r3, r7, #6
   21d68:	8819      	ldrh	r1, [r3, #0]
   21d6a:	68fb      	ldr	r3, [r7, #12]
   21d6c:	18cb      	adds	r3, r1, r3
   21d6e:	429a      	cmp	r2, r3
   21d70:	d003      	beq.n	21d7a <hif_receive+0x132>
   21d72:	1d7b      	adds	r3, r7, #5
   21d74:	781b      	ldrb	r3, [r3, #0]
   21d76:	2b00      	cmp	r3, #0
   21d78:	d007      	beq.n	21d8a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   21d7a:	2317      	movs	r3, #23
   21d7c:	18fc      	adds	r4, r7, r3
   21d7e:	4b07      	ldr	r3, [pc, #28]	; (21d9c <hif_receive+0x154>)
   21d80:	4798      	blx	r3
   21d82:	0003      	movs	r3, r0
   21d84:	7023      	strb	r3, [r4, #0]
   21d86:	e000      	b.n	21d8a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21d88:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21d8a:	2317      	movs	r3, #23
   21d8c:	18fb      	adds	r3, r7, r3
   21d8e:	781b      	ldrb	r3, [r3, #0]
   21d90:	b25b      	sxtb	r3, r3
}
   21d92:	0018      	movs	r0, r3
   21d94:	46bd      	mov	sp, r7
   21d96:	b007      	add	sp, #28
   21d98:	bd90      	pop	{r4, r7, pc}
   21d9a:	46c0      	nop			; (mov r8, r8)
   21d9c:	00021165 	.word	0x00021165
   21da0:	00038d40 	.word	0x00038d40
   21da4:	00038a18 	.word	0x00038a18
   21da8:	0001e399 	.word	0x0001e399
   21dac:	00038c44 	.word	0x00038c44
   21db0:	00038a14 	.word	0x00038a14
   21db4:	20005b10 	.word	0x20005b10
   21db8:	00038c64 	.word	0x00038c64
   21dbc:	00000286 	.word	0x00000286
   21dc0:	00038cac 	.word	0x00038cac
   21dc4:	000230f9 	.word	0x000230f9

00021dc8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21dc8:	b580      	push	{r7, lr}
   21dca:	b084      	sub	sp, #16
   21dcc:	af00      	add	r7, sp, #0
   21dce:	0002      	movs	r2, r0
   21dd0:	6039      	str	r1, [r7, #0]
   21dd2:	1dfb      	adds	r3, r7, #7
   21dd4:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21dd6:	230f      	movs	r3, #15
   21dd8:	18fb      	adds	r3, r7, r3
   21dda:	2200      	movs	r2, #0
   21ddc:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   21dde:	1dfb      	adds	r3, r7, #7
   21de0:	781b      	ldrb	r3, [r3, #0]
   21de2:	2b07      	cmp	r3, #7
   21de4:	d820      	bhi.n	21e28 <hif_register_cb+0x60>
   21de6:	009a      	lsls	r2, r3, #2
   21de8:	4b1e      	ldr	r3, [pc, #120]	; (21e64 <hif_register_cb+0x9c>)
   21dea:	18d3      	adds	r3, r2, r3
   21dec:	681b      	ldr	r3, [r3, #0]
   21dee:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21df0:	4b1d      	ldr	r3, [pc, #116]	; (21e68 <hif_register_cb+0xa0>)
   21df2:	683a      	ldr	r2, [r7, #0]
   21df4:	615a      	str	r2, [r3, #20]
			break;
   21df6:	e02d      	b.n	21e54 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21df8:	4b1b      	ldr	r3, [pc, #108]	; (21e68 <hif_register_cb+0xa0>)
   21dfa:	683a      	ldr	r2, [r7, #0]
   21dfc:	611a      	str	r2, [r3, #16]
			break;
   21dfe:	e029      	b.n	21e54 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21e00:	4b19      	ldr	r3, [pc, #100]	; (21e68 <hif_register_cb+0xa0>)
   21e02:	683a      	ldr	r2, [r7, #0]
   21e04:	619a      	str	r2, [r3, #24]
			break;
   21e06:	e025      	b.n	21e54 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21e08:	4b17      	ldr	r3, [pc, #92]	; (21e68 <hif_register_cb+0xa0>)
   21e0a:	683a      	ldr	r2, [r7, #0]
   21e0c:	621a      	str	r2, [r3, #32]
			break;
   21e0e:	e021      	b.n	21e54 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21e10:	4b15      	ldr	r3, [pc, #84]	; (21e68 <hif_register_cb+0xa0>)
   21e12:	683a      	ldr	r2, [r7, #0]
   21e14:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   21e16:	e01d      	b.n	21e54 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   21e18:	4b13      	ldr	r3, [pc, #76]	; (21e68 <hif_register_cb+0xa0>)
   21e1a:	683a      	ldr	r2, [r7, #0]
   21e1c:	61da      	str	r2, [r3, #28]
			break;
   21e1e:	e019      	b.n	21e54 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21e20:	4b11      	ldr	r3, [pc, #68]	; (21e68 <hif_register_cb+0xa0>)
   21e22:	683a      	ldr	r2, [r7, #0]
   21e24:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   21e26:	e015      	b.n	21e54 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   21e28:	4a10      	ldr	r2, [pc, #64]	; (21e6c <hif_register_cb+0xa4>)
   21e2a:	4911      	ldr	r1, [pc, #68]	; (21e70 <hif_register_cb+0xa8>)
   21e2c:	4b11      	ldr	r3, [pc, #68]	; (21e74 <hif_register_cb+0xac>)
   21e2e:	0018      	movs	r0, r3
   21e30:	4b11      	ldr	r3, [pc, #68]	; (21e78 <hif_register_cb+0xb0>)
   21e32:	4798      	blx	r3
   21e34:	1dfb      	adds	r3, r7, #7
   21e36:	781a      	ldrb	r2, [r3, #0]
   21e38:	4b10      	ldr	r3, [pc, #64]	; (21e7c <hif_register_cb+0xb4>)
   21e3a:	0011      	movs	r1, r2
   21e3c:	0018      	movs	r0, r3
   21e3e:	4b0e      	ldr	r3, [pc, #56]	; (21e78 <hif_register_cb+0xb0>)
   21e40:	4798      	blx	r3
   21e42:	4b0f      	ldr	r3, [pc, #60]	; (21e80 <hif_register_cb+0xb8>)
   21e44:	0018      	movs	r0, r3
   21e46:	4b0c      	ldr	r3, [pc, #48]	; (21e78 <hif_register_cb+0xb0>)
   21e48:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21e4a:	230f      	movs	r3, #15
   21e4c:	18fb      	adds	r3, r7, r3
   21e4e:	22f4      	movs	r2, #244	; 0xf4
   21e50:	701a      	strb	r2, [r3, #0]
			break;
   21e52:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21e54:	230f      	movs	r3, #15
   21e56:	18fb      	adds	r3, r7, r3
   21e58:	781b      	ldrb	r3, [r3, #0]
   21e5a:	b25b      	sxtb	r3, r3
}
   21e5c:	0018      	movs	r0, r3
   21e5e:	46bd      	mov	sp, r7
   21e60:	b004      	add	sp, #16
   21e62:	bd80      	pop	{r7, pc}
   21e64:	00038cfc 	.word	0x00038cfc
   21e68:	20005b10 	.word	0x20005b10
   21e6c:	000002be 	.word	0x000002be
   21e70:	00038d4c 	.word	0x00038d4c
   21e74:	00038a18 	.word	0x00038a18
   21e78:	0001e399 	.word	0x0001e399
   21e7c:	00038cf0 	.word	0x00038cf0
   21e80:	00038a14 	.word	0x00038a14

00021e84 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21e84:	b590      	push	{r4, r7, lr}
   21e86:	b0af      	sub	sp, #188	; 0xbc
   21e88:	af02      	add	r7, sp, #8
   21e8a:	603a      	str	r2, [r7, #0]
   21e8c:	1dfb      	adds	r3, r7, #7
   21e8e:	1c02      	adds	r2, r0, #0
   21e90:	701a      	strb	r2, [r3, #0]
   21e92:	1d3b      	adds	r3, r7, #4
   21e94:	1c0a      	adds	r2, r1, #0
   21e96:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   21e98:	1dfb      	adds	r3, r7, #7
   21e9a:	781b      	ldrb	r3, [r3, #0]
   21e9c:	2b2c      	cmp	r3, #44	; 0x2c
   21e9e:	d116      	bne.n	21ece <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   21ea0:	23a4      	movs	r3, #164	; 0xa4
   21ea2:	18f9      	adds	r1, r7, r3
   21ea4:	6838      	ldr	r0, [r7, #0]
   21ea6:	2300      	movs	r3, #0
   21ea8:	2204      	movs	r2, #4
   21eaa:	4cca      	ldr	r4, [pc, #808]	; (221d4 <m2m_wifi_cb+0x350>)
   21eac:	47a0      	blx	r4
   21eae:	1e03      	subs	r3, r0, #0
   21eb0:	d000      	beq.n	21eb4 <m2m_wifi_cb+0x30>
   21eb2:	e1b4      	b.n	2221e <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21eb4:	4bc8      	ldr	r3, [pc, #800]	; (221d8 <m2m_wifi_cb+0x354>)
   21eb6:	681b      	ldr	r3, [r3, #0]
   21eb8:	2b00      	cmp	r3, #0
   21eba:	d100      	bne.n	21ebe <m2m_wifi_cb+0x3a>
   21ebc:	e1af      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   21ebe:	4bc6      	ldr	r3, [pc, #792]	; (221d8 <m2m_wifi_cb+0x354>)
   21ec0:	681b      	ldr	r3, [r3, #0]
   21ec2:	22a4      	movs	r2, #164	; 0xa4
   21ec4:	18ba      	adds	r2, r7, r2
   21ec6:	0011      	movs	r1, r2
   21ec8:	202c      	movs	r0, #44	; 0x2c
   21eca:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21ecc:	e1a7      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21ece:	1dfb      	adds	r3, r7, #7
   21ed0:	781b      	ldrb	r3, [r3, #0]
   21ed2:	2b1b      	cmp	r3, #27
   21ed4:	d116      	bne.n	21f04 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21ed6:	239c      	movs	r3, #156	; 0x9c
   21ed8:	18f9      	adds	r1, r7, r3
   21eda:	6838      	ldr	r0, [r7, #0]
   21edc:	2300      	movs	r3, #0
   21ede:	2208      	movs	r2, #8
   21ee0:	4cbc      	ldr	r4, [pc, #752]	; (221d4 <m2m_wifi_cb+0x350>)
   21ee2:	47a0      	blx	r4
   21ee4:	1e03      	subs	r3, r0, #0
   21ee6:	d000      	beq.n	21eea <m2m_wifi_cb+0x66>
   21ee8:	e199      	b.n	2221e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21eea:	4bbb      	ldr	r3, [pc, #748]	; (221d8 <m2m_wifi_cb+0x354>)
   21eec:	681b      	ldr	r3, [r3, #0]
   21eee:	2b00      	cmp	r3, #0
   21ef0:	d100      	bne.n	21ef4 <m2m_wifi_cb+0x70>
   21ef2:	e194      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21ef4:	4bb8      	ldr	r3, [pc, #736]	; (221d8 <m2m_wifi_cb+0x354>)
   21ef6:	681b      	ldr	r3, [r3, #0]
   21ef8:	229c      	movs	r2, #156	; 0x9c
   21efa:	18ba      	adds	r2, r7, r2
   21efc:	0011      	movs	r1, r2
   21efe:	201b      	movs	r0, #27
   21f00:	4798      	blx	r3
}
   21f02:	e18c      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21f04:	1dfb      	adds	r3, r7, #7
   21f06:	781b      	ldrb	r3, [r3, #0]
   21f08:	2b06      	cmp	r3, #6
   21f0a:	d116      	bne.n	21f3a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21f0c:	230c      	movs	r3, #12
   21f0e:	18f9      	adds	r1, r7, r3
   21f10:	6838      	ldr	r0, [r7, #0]
   21f12:	2301      	movs	r3, #1
   21f14:	2230      	movs	r2, #48	; 0x30
   21f16:	4caf      	ldr	r4, [pc, #700]	; (221d4 <m2m_wifi_cb+0x350>)
   21f18:	47a0      	blx	r4
   21f1a:	1e03      	subs	r3, r0, #0
   21f1c:	d000      	beq.n	21f20 <m2m_wifi_cb+0x9c>
   21f1e:	e17e      	b.n	2221e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21f20:	4bad      	ldr	r3, [pc, #692]	; (221d8 <m2m_wifi_cb+0x354>)
   21f22:	681b      	ldr	r3, [r3, #0]
   21f24:	2b00      	cmp	r3, #0
   21f26:	d100      	bne.n	21f2a <m2m_wifi_cb+0xa6>
   21f28:	e179      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   21f2a:	4bab      	ldr	r3, [pc, #684]	; (221d8 <m2m_wifi_cb+0x354>)
   21f2c:	681b      	ldr	r3, [r3, #0]
   21f2e:	220c      	movs	r2, #12
   21f30:	18ba      	adds	r2, r7, r2
   21f32:	0011      	movs	r1, r2
   21f34:	2006      	movs	r0, #6
   21f36:	4798      	blx	r3
}
   21f38:	e171      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   21f3a:	1dfb      	adds	r3, r7, #7
   21f3c:	781b      	ldrb	r3, [r3, #0]
   21f3e:	2b0e      	cmp	r3, #14
   21f40:	d100      	bne.n	21f44 <m2m_wifi_cb+0xc0>
   21f42:	e16c      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21f44:	1dfb      	adds	r3, r7, #7
   21f46:	781b      	ldrb	r3, [r3, #0]
   21f48:	2b32      	cmp	r3, #50	; 0x32
   21f4a:	d116      	bne.n	21f7a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   21f4c:	2384      	movs	r3, #132	; 0x84
   21f4e:	18f9      	adds	r1, r7, r3
   21f50:	6838      	ldr	r0, [r7, #0]
   21f52:	2300      	movs	r3, #0
   21f54:	2218      	movs	r2, #24
   21f56:	4c9f      	ldr	r4, [pc, #636]	; (221d4 <m2m_wifi_cb+0x350>)
   21f58:	47a0      	blx	r4
   21f5a:	1e03      	subs	r3, r0, #0
   21f5c:	d000      	beq.n	21f60 <m2m_wifi_cb+0xdc>
   21f5e:	e15e      	b.n	2221e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21f60:	4b9d      	ldr	r3, [pc, #628]	; (221d8 <m2m_wifi_cb+0x354>)
   21f62:	681b      	ldr	r3, [r3, #0]
   21f64:	2b00      	cmp	r3, #0
   21f66:	d100      	bne.n	21f6a <m2m_wifi_cb+0xe6>
   21f68:	e159      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   21f6a:	4b9b      	ldr	r3, [pc, #620]	; (221d8 <m2m_wifi_cb+0x354>)
   21f6c:	681b      	ldr	r3, [r3, #0]
   21f6e:	2284      	movs	r2, #132	; 0x84
   21f70:	18ba      	adds	r2, r7, r2
   21f72:	0011      	movs	r1, r2
   21f74:	2032      	movs	r0, #50	; 0x32
   21f76:	4798      	blx	r3
}
   21f78:	e151      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   21f7a:	1dfb      	adds	r3, r7, #7
   21f7c:	781b      	ldrb	r3, [r3, #0]
   21f7e:	2b2f      	cmp	r3, #47	; 0x2f
   21f80:	d11d      	bne.n	21fbe <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21f82:	230c      	movs	r3, #12
   21f84:	18fb      	adds	r3, r7, r3
   21f86:	2264      	movs	r2, #100	; 0x64
   21f88:	2100      	movs	r1, #0
   21f8a:	0018      	movs	r0, r3
   21f8c:	4b93      	ldr	r3, [pc, #588]	; (221dc <m2m_wifi_cb+0x358>)
   21f8e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   21f90:	230c      	movs	r3, #12
   21f92:	18f9      	adds	r1, r7, r3
   21f94:	6838      	ldr	r0, [r7, #0]
   21f96:	2300      	movs	r3, #0
   21f98:	2264      	movs	r2, #100	; 0x64
   21f9a:	4c8e      	ldr	r4, [pc, #568]	; (221d4 <m2m_wifi_cb+0x350>)
   21f9c:	47a0      	blx	r4
   21f9e:	1e03      	subs	r3, r0, #0
   21fa0:	d000      	beq.n	21fa4 <m2m_wifi_cb+0x120>
   21fa2:	e13c      	b.n	2221e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21fa4:	4b8c      	ldr	r3, [pc, #560]	; (221d8 <m2m_wifi_cb+0x354>)
   21fa6:	681b      	ldr	r3, [r3, #0]
   21fa8:	2b00      	cmp	r3, #0
   21faa:	d100      	bne.n	21fae <m2m_wifi_cb+0x12a>
   21fac:	e137      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   21fae:	4b8a      	ldr	r3, [pc, #552]	; (221d8 <m2m_wifi_cb+0x354>)
   21fb0:	681b      	ldr	r3, [r3, #0]
   21fb2:	220c      	movs	r2, #12
   21fb4:	18ba      	adds	r2, r7, r2
   21fb6:	0011      	movs	r1, r2
   21fb8:	202f      	movs	r0, #47	; 0x2f
   21fba:	4798      	blx	r3
}
   21fbc:	e12f      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   21fbe:	1dfb      	adds	r3, r7, #7
   21fc0:	781b      	ldrb	r3, [r3, #0]
   21fc2:	2b34      	cmp	r3, #52	; 0x34
   21fc4:	d137      	bne.n	22036 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   21fc6:	2380      	movs	r3, #128	; 0x80
   21fc8:	18f9      	adds	r1, r7, r3
   21fca:	6838      	ldr	r0, [r7, #0]
   21fcc:	2300      	movs	r3, #0
   21fce:	2204      	movs	r2, #4
   21fd0:	4c80      	ldr	r4, [pc, #512]	; (221d4 <m2m_wifi_cb+0x350>)
   21fd2:	47a0      	blx	r4
   21fd4:	1e03      	subs	r3, r0, #0
   21fd6:	d000      	beq.n	21fda <m2m_wifi_cb+0x156>
   21fd8:	e121      	b.n	2221e <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   21fda:	4b81      	ldr	r3, [pc, #516]	; (221e0 <m2m_wifi_cb+0x35c>)
   21fdc:	0018      	movs	r0, r3
   21fde:	4b81      	ldr	r3, [pc, #516]	; (221e4 <m2m_wifi_cb+0x360>)
   21fe0:	4798      	blx	r3
   21fe2:	2380      	movs	r3, #128	; 0x80
   21fe4:	18fb      	adds	r3, r7, r3
   21fe6:	681b      	ldr	r3, [r3, #0]
   21fe8:	0e1b      	lsrs	r3, r3, #24
   21fea:	b2db      	uxtb	r3, r3
   21fec:	0019      	movs	r1, r3
   21fee:	2380      	movs	r3, #128	; 0x80
   21ff0:	18fb      	adds	r3, r7, r3
   21ff2:	681b      	ldr	r3, [r3, #0]
   21ff4:	0c1b      	lsrs	r3, r3, #16
   21ff6:	b2db      	uxtb	r3, r3
   21ff8:	001a      	movs	r2, r3
   21ffa:	2380      	movs	r3, #128	; 0x80
   21ffc:	18fb      	adds	r3, r7, r3
   21ffe:	681b      	ldr	r3, [r3, #0]
   22000:	0a1b      	lsrs	r3, r3, #8
   22002:	b2db      	uxtb	r3, r3
   22004:	001c      	movs	r4, r3
   22006:	2380      	movs	r3, #128	; 0x80
   22008:	18fb      	adds	r3, r7, r3
   2200a:	681b      	ldr	r3, [r3, #0]
   2200c:	b2db      	uxtb	r3, r3
   2200e:	4876      	ldr	r0, [pc, #472]	; (221e8 <m2m_wifi_cb+0x364>)
   22010:	9300      	str	r3, [sp, #0]
   22012:	0023      	movs	r3, r4
   22014:	4c73      	ldr	r4, [pc, #460]	; (221e4 <m2m_wifi_cb+0x360>)
   22016:	47a0      	blx	r4
   22018:	4b74      	ldr	r3, [pc, #464]	; (221ec <m2m_wifi_cb+0x368>)
   2201a:	0018      	movs	r0, r3
   2201c:	4b71      	ldr	r3, [pc, #452]	; (221e4 <m2m_wifi_cb+0x360>)
   2201e:	4798      	blx	r3
			if (gpfAppWifiCb)
   22020:	4b6d      	ldr	r3, [pc, #436]	; (221d8 <m2m_wifi_cb+0x354>)
   22022:	681b      	ldr	r3, [r3, #0]
   22024:	2b00      	cmp	r3, #0
   22026:	d100      	bne.n	2202a <m2m_wifi_cb+0x1a6>
   22028:	e0f9      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2202a:	4b6b      	ldr	r3, [pc, #428]	; (221d8 <m2m_wifi_cb+0x354>)
   2202c:	681b      	ldr	r3, [r3, #0]
   2202e:	2100      	movs	r1, #0
   22030:	2034      	movs	r0, #52	; 0x34
   22032:	4798      	blx	r3
}
   22034:	e0f3      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   22036:	1dfb      	adds	r3, r7, #7
   22038:	781b      	ldrb	r3, [r3, #0]
   2203a:	2b11      	cmp	r3, #17
   2203c:	d11e      	bne.n	2207c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   2203e:	4b6c      	ldr	r3, [pc, #432]	; (221f0 <m2m_wifi_cb+0x36c>)
   22040:	2200      	movs	r2, #0
   22042:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22044:	237c      	movs	r3, #124	; 0x7c
   22046:	18f9      	adds	r1, r7, r3
   22048:	6838      	ldr	r0, [r7, #0]
   2204a:	2300      	movs	r3, #0
   2204c:	2204      	movs	r2, #4
   2204e:	4c61      	ldr	r4, [pc, #388]	; (221d4 <m2m_wifi_cb+0x350>)
   22050:	47a0      	blx	r4
   22052:	1e03      	subs	r3, r0, #0
   22054:	d000      	beq.n	22058 <m2m_wifi_cb+0x1d4>
   22056:	e0e2      	b.n	2221e <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   22058:	237c      	movs	r3, #124	; 0x7c
   2205a:	18fb      	adds	r3, r7, r3
   2205c:	781a      	ldrb	r2, [r3, #0]
   2205e:	4b65      	ldr	r3, [pc, #404]	; (221f4 <m2m_wifi_cb+0x370>)
   22060:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22062:	4b5d      	ldr	r3, [pc, #372]	; (221d8 <m2m_wifi_cb+0x354>)
   22064:	681b      	ldr	r3, [r3, #0]
   22066:	2b00      	cmp	r3, #0
   22068:	d100      	bne.n	2206c <m2m_wifi_cb+0x1e8>
   2206a:	e0d8      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   2206c:	4b5a      	ldr	r3, [pc, #360]	; (221d8 <m2m_wifi_cb+0x354>)
   2206e:	681b      	ldr	r3, [r3, #0]
   22070:	227c      	movs	r2, #124	; 0x7c
   22072:	18ba      	adds	r2, r7, r2
   22074:	0011      	movs	r1, r2
   22076:	2011      	movs	r0, #17
   22078:	4798      	blx	r3
}
   2207a:	e0d0      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   2207c:	1dfb      	adds	r3, r7, #7
   2207e:	781b      	ldrb	r3, [r3, #0]
   22080:	2b13      	cmp	r3, #19
   22082:	d116      	bne.n	220b2 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22084:	230c      	movs	r3, #12
   22086:	18f9      	adds	r1, r7, r3
   22088:	6838      	ldr	r0, [r7, #0]
   2208a:	2300      	movs	r3, #0
   2208c:	222c      	movs	r2, #44	; 0x2c
   2208e:	4c51      	ldr	r4, [pc, #324]	; (221d4 <m2m_wifi_cb+0x350>)
   22090:	47a0      	blx	r4
   22092:	1e03      	subs	r3, r0, #0
   22094:	d000      	beq.n	22098 <m2m_wifi_cb+0x214>
   22096:	e0c2      	b.n	2221e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22098:	4b4f      	ldr	r3, [pc, #316]	; (221d8 <m2m_wifi_cb+0x354>)
   2209a:	681b      	ldr	r3, [r3, #0]
   2209c:	2b00      	cmp	r3, #0
   2209e:	d100      	bne.n	220a2 <m2m_wifi_cb+0x21e>
   220a0:	e0bd      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   220a2:	4b4d      	ldr	r3, [pc, #308]	; (221d8 <m2m_wifi_cb+0x354>)
   220a4:	681b      	ldr	r3, [r3, #0]
   220a6:	220c      	movs	r2, #12
   220a8:	18ba      	adds	r2, r7, r2
   220aa:	0011      	movs	r1, r2
   220ac:	2013      	movs	r0, #19
   220ae:	4798      	blx	r3
}
   220b0:	e0b5      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   220b2:	1dfb      	adds	r3, r7, #7
   220b4:	781b      	ldrb	r3, [r3, #0]
   220b6:	2b04      	cmp	r3, #4
   220b8:	d116      	bne.n	220e8 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   220ba:	23a8      	movs	r3, #168	; 0xa8
   220bc:	18f9      	adds	r1, r7, r3
   220be:	6838      	ldr	r0, [r7, #0]
   220c0:	2300      	movs	r3, #0
   220c2:	2204      	movs	r2, #4
   220c4:	4c43      	ldr	r4, [pc, #268]	; (221d4 <m2m_wifi_cb+0x350>)
   220c6:	47a0      	blx	r4
   220c8:	1e03      	subs	r3, r0, #0
   220ca:	d000      	beq.n	220ce <m2m_wifi_cb+0x24a>
   220cc:	e0a7      	b.n	2221e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   220ce:	4b42      	ldr	r3, [pc, #264]	; (221d8 <m2m_wifi_cb+0x354>)
   220d0:	681b      	ldr	r3, [r3, #0]
   220d2:	2b00      	cmp	r3, #0
   220d4:	d100      	bne.n	220d8 <m2m_wifi_cb+0x254>
   220d6:	e0a2      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   220d8:	4b3f      	ldr	r3, [pc, #252]	; (221d8 <m2m_wifi_cb+0x354>)
   220da:	681b      	ldr	r3, [r3, #0]
   220dc:	22a8      	movs	r2, #168	; 0xa8
   220de:	18ba      	adds	r2, r7, r2
   220e0:	0011      	movs	r1, r2
   220e2:	2004      	movs	r0, #4
   220e4:	4798      	blx	r3
}
   220e6:	e09a      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   220e8:	1dfb      	adds	r3, r7, #7
   220ea:	781b      	ldrb	r3, [r3, #0]
   220ec:	2b65      	cmp	r3, #101	; 0x65
   220ee:	d116      	bne.n	2211e <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   220f0:	23a8      	movs	r3, #168	; 0xa8
   220f2:	18f9      	adds	r1, r7, r3
   220f4:	6838      	ldr	r0, [r7, #0]
   220f6:	2300      	movs	r3, #0
   220f8:	2204      	movs	r2, #4
   220fa:	4c36      	ldr	r4, [pc, #216]	; (221d4 <m2m_wifi_cb+0x350>)
   220fc:	47a0      	blx	r4
   220fe:	1e03      	subs	r3, r0, #0
   22100:	d000      	beq.n	22104 <m2m_wifi_cb+0x280>
   22102:	e08c      	b.n	2221e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22104:	4b34      	ldr	r3, [pc, #208]	; (221d8 <m2m_wifi_cb+0x354>)
   22106:	681b      	ldr	r3, [r3, #0]
   22108:	2b00      	cmp	r3, #0
   2210a:	d100      	bne.n	2210e <m2m_wifi_cb+0x28a>
   2210c:	e087      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2210e:	4b32      	ldr	r3, [pc, #200]	; (221d8 <m2m_wifi_cb+0x354>)
   22110:	681b      	ldr	r3, [r3, #0]
   22112:	22a8      	movs	r2, #168	; 0xa8
   22114:	18ba      	adds	r2, r7, r2
   22116:	0011      	movs	r1, r2
   22118:	2065      	movs	r0, #101	; 0x65
   2211a:	4798      	blx	r3
}
   2211c:	e07f      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2211e:	1dfb      	adds	r3, r7, #7
   22120:	781b      	ldrb	r3, [r3, #0]
   22122:	2b09      	cmp	r3, #9
   22124:	d116      	bne.n	22154 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   22126:	230c      	movs	r3, #12
   22128:	18f9      	adds	r1, r7, r3
   2212a:	6838      	ldr	r0, [r7, #0]
   2212c:	2301      	movs	r3, #1
   2212e:	2264      	movs	r2, #100	; 0x64
   22130:	4c28      	ldr	r4, [pc, #160]	; (221d4 <m2m_wifi_cb+0x350>)
   22132:	47a0      	blx	r4
   22134:	1e03      	subs	r3, r0, #0
   22136:	d000      	beq.n	2213a <m2m_wifi_cb+0x2b6>
   22138:	e071      	b.n	2221e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2213a:	4b27      	ldr	r3, [pc, #156]	; (221d8 <m2m_wifi_cb+0x354>)
   2213c:	681b      	ldr	r3, [r3, #0]
   2213e:	2b00      	cmp	r3, #0
   22140:	d100      	bne.n	22144 <m2m_wifi_cb+0x2c0>
   22142:	e06c      	b.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22144:	4b24      	ldr	r3, [pc, #144]	; (221d8 <m2m_wifi_cb+0x354>)
   22146:	681b      	ldr	r3, [r3, #0]
   22148:	220c      	movs	r2, #12
   2214a:	18ba      	adds	r2, r7, r2
   2214c:	0011      	movs	r1, r2
   2214e:	2009      	movs	r0, #9
   22150:	4798      	blx	r3
}
   22152:	e064      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22154:	1dfb      	adds	r3, r7, #7
   22156:	781b      	ldrb	r3, [r3, #0]
   22158:	2b2a      	cmp	r3, #42	; 0x2a
   2215a:	d114      	bne.n	22186 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   2215c:	2378      	movs	r3, #120	; 0x78
   2215e:	18f9      	adds	r1, r7, r3
   22160:	6838      	ldr	r0, [r7, #0]
   22162:	2301      	movs	r3, #1
   22164:	2204      	movs	r2, #4
   22166:	4c1b      	ldr	r4, [pc, #108]	; (221d4 <m2m_wifi_cb+0x350>)
   22168:	47a0      	blx	r4
   2216a:	1e03      	subs	r3, r0, #0
   2216c:	d157      	bne.n	2221e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2216e:	4b1a      	ldr	r3, [pc, #104]	; (221d8 <m2m_wifi_cb+0x354>)
   22170:	681b      	ldr	r3, [r3, #0]
   22172:	2b00      	cmp	r3, #0
   22174:	d053      	beq.n	2221e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   22176:	4b18      	ldr	r3, [pc, #96]	; (221d8 <m2m_wifi_cb+0x354>)
   22178:	681b      	ldr	r3, [r3, #0]
   2217a:	2278      	movs	r2, #120	; 0x78
   2217c:	18ba      	adds	r2, r7, r2
   2217e:	0011      	movs	r1, r2
   22180:	202a      	movs	r0, #42	; 0x2a
   22182:	4798      	blx	r3
}
   22184:	e04b      	b.n	2221e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   22186:	1dfb      	adds	r3, r7, #7
   22188:	781b      	ldrb	r3, [r3, #0]
   2218a:	2b20      	cmp	r3, #32
   2218c:	d134      	bne.n	221f8 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   2218e:	2370      	movs	r3, #112	; 0x70
   22190:	18f9      	adds	r1, r7, r3
   22192:	6838      	ldr	r0, [r7, #0]
   22194:	2300      	movs	r3, #0
   22196:	2208      	movs	r2, #8
   22198:	4c0e      	ldr	r4, [pc, #56]	; (221d4 <m2m_wifi_cb+0x350>)
   2219a:	47a0      	blx	r4
   2219c:	1e03      	subs	r3, r0, #0
   2219e:	d13e      	bne.n	2221e <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   221a0:	683b      	ldr	r3, [r7, #0]
   221a2:	3308      	adds	r3, #8
   221a4:	0018      	movs	r0, r3
   221a6:	2370      	movs	r3, #112	; 0x70
   221a8:	18fb      	adds	r3, r7, r3
   221aa:	6819      	ldr	r1, [r3, #0]
   221ac:	2370      	movs	r3, #112	; 0x70
   221ae:	18fb      	adds	r3, r7, r3
   221b0:	889a      	ldrh	r2, [r3, #4]
   221b2:	2301      	movs	r3, #1
   221b4:	4c07      	ldr	r4, [pc, #28]	; (221d4 <m2m_wifi_cb+0x350>)
   221b6:	47a0      	blx	r4
   221b8:	1e03      	subs	r3, r0, #0
   221ba:	d130      	bne.n	2221e <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   221bc:	4b06      	ldr	r3, [pc, #24]	; (221d8 <m2m_wifi_cb+0x354>)
   221be:	681b      	ldr	r3, [r3, #0]
   221c0:	2b00      	cmp	r3, #0
   221c2:	d02c      	beq.n	2221e <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   221c4:	4b04      	ldr	r3, [pc, #16]	; (221d8 <m2m_wifi_cb+0x354>)
   221c6:	681b      	ldr	r3, [r3, #0]
   221c8:	2270      	movs	r2, #112	; 0x70
   221ca:	18ba      	adds	r2, r7, r2
   221cc:	0011      	movs	r1, r2
   221ce:	2020      	movs	r0, #32
   221d0:	4798      	blx	r3
}
   221d2:	e024      	b.n	2221e <m2m_wifi_cb+0x39a>
   221d4:	00021c49 	.word	0x00021c49
   221d8:	200042a4 	.word	0x200042a4
   221dc:	000210cd 	.word	0x000210cd
   221e0:	00038d5c 	.word	0x00038d5c
   221e4:	0001e399 	.word	0x0001e399
   221e8:	00038d68 	.word	0x00038d68
   221ec:	00038d88 	.word	0x00038d88
   221f0:	200042a1 	.word	0x200042a1
   221f4:	200042a0 	.word	0x200042a0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   221f8:	2324      	movs	r3, #36	; 0x24
   221fa:	33ff      	adds	r3, #255	; 0xff
   221fc:	001a      	movs	r2, r3
   221fe:	490a      	ldr	r1, [pc, #40]	; (22228 <m2m_wifi_cb+0x3a4>)
   22200:	4b0a      	ldr	r3, [pc, #40]	; (2222c <m2m_wifi_cb+0x3a8>)
   22202:	0018      	movs	r0, r3
   22204:	4b0a      	ldr	r3, [pc, #40]	; (22230 <m2m_wifi_cb+0x3ac>)
   22206:	4798      	blx	r3
   22208:	1dfb      	adds	r3, r7, #7
   2220a:	781a      	ldrb	r2, [r3, #0]
   2220c:	4b09      	ldr	r3, [pc, #36]	; (22234 <m2m_wifi_cb+0x3b0>)
   2220e:	0011      	movs	r1, r2
   22210:	0018      	movs	r0, r3
   22212:	4b07      	ldr	r3, [pc, #28]	; (22230 <m2m_wifi_cb+0x3ac>)
   22214:	4798      	blx	r3
   22216:	4b08      	ldr	r3, [pc, #32]	; (22238 <m2m_wifi_cb+0x3b4>)
   22218:	0018      	movs	r0, r3
   2221a:	4b05      	ldr	r3, [pc, #20]	; (22230 <m2m_wifi_cb+0x3ac>)
   2221c:	4798      	blx	r3
}
   2221e:	46c0      	nop			; (mov r8, r8)
   22220:	46bd      	mov	sp, r7
   22222:	b02d      	add	sp, #180	; 0xb4
   22224:	bd90      	pop	{r4, r7, pc}
   22226:	46c0      	nop			; (mov r8, r8)
   22228:	0003907c 	.word	0x0003907c
   2222c:	00038d8c 	.word	0x00038d8c
   22230:	0001e399 	.word	0x0001e399
   22234:	00038da0 	.word	0x00038da0
   22238:	00038d88 	.word	0x00038d88

0002223c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   2223c:	b590      	push	{r4, r7, lr}
   2223e:	b08f      	sub	sp, #60	; 0x3c
   22240:	af00      	add	r7, sp, #0
   22242:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22244:	2337      	movs	r3, #55	; 0x37
   22246:	18fb      	adds	r3, r7, r3
   22248:	2200      	movs	r2, #0
   2224a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   2224c:	230b      	movs	r3, #11
   2224e:	18fb      	adds	r3, r7, r3
   22250:	2201      	movs	r2, #1
   22252:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22254:	687b      	ldr	r3, [r7, #4]
   22256:	2b00      	cmp	r3, #0
   22258:	d104      	bne.n	22264 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2225a:	2337      	movs	r3, #55	; 0x37
   2225c:	18fb      	adds	r3, r7, r3
   2225e:	22f4      	movs	r2, #244	; 0xf4
   22260:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22262:	e052      	b.n	2230a <m2m_wifi_init+0xce>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22264:	687b      	ldr	r3, [r7, #4]
   22266:	681a      	ldr	r2, [r3, #0]
   22268:	4b2c      	ldr	r3, [pc, #176]	; (2231c <m2m_wifi_init+0xe0>)
   2226a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   2226c:	4b2c      	ldr	r3, [pc, #176]	; (22320 <m2m_wifi_init+0xe4>)
   2226e:	2200      	movs	r2, #0
   22270:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22272:	2337      	movs	r3, #55	; 0x37
   22274:	18fc      	adds	r4, r7, r3
   22276:	230b      	movs	r3, #11
   22278:	18fb      	adds	r3, r7, r3
   2227a:	0018      	movs	r0, r3
   2227c:	4b29      	ldr	r3, [pc, #164]	; (22324 <m2m_wifi_init+0xe8>)
   2227e:	4798      	blx	r3
   22280:	0003      	movs	r3, r0
   22282:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22284:	2337      	movs	r3, #55	; 0x37
   22286:	18fb      	adds	r3, r7, r3
   22288:	781b      	ldrb	r3, [r3, #0]
   2228a:	b25b      	sxtb	r3, r3
   2228c:	2b00      	cmp	r3, #0
   2228e:	d139      	bne.n	22304 <m2m_wifi_init+0xc8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22290:	2337      	movs	r3, #55	; 0x37
   22292:	18fc      	adds	r4, r7, r3
   22294:	2000      	movs	r0, #0
   22296:	4b24      	ldr	r3, [pc, #144]	; (22328 <m2m_wifi_init+0xec>)
   22298:	4798      	blx	r3
   2229a:	0003      	movs	r3, r0
   2229c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   2229e:	2337      	movs	r3, #55	; 0x37
   222a0:	18fb      	adds	r3, r7, r3
   222a2:	781b      	ldrb	r3, [r3, #0]
   222a4:	b25b      	sxtb	r3, r3
   222a6:	2b00      	cmp	r3, #0
   222a8:	d127      	bne.n	222fa <m2m_wifi_init+0xbe>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   222aa:	4b20      	ldr	r3, [pc, #128]	; (2232c <m2m_wifi_init+0xf0>)
   222ac:	0019      	movs	r1, r3
   222ae:	2001      	movs	r0, #1
   222b0:	4b1f      	ldr	r3, [pc, #124]	; (22330 <m2m_wifi_init+0xf4>)
   222b2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   222b4:	2337      	movs	r3, #55	; 0x37
   222b6:	18fc      	adds	r4, r7, r3
   222b8:	230c      	movs	r3, #12
   222ba:	18fb      	adds	r3, r7, r3
   222bc:	0018      	movs	r0, r3
   222be:	4b1d      	ldr	r3, [pc, #116]	; (22334 <m2m_wifi_init+0xf8>)
   222c0:	4798      	blx	r3
   222c2:	0003      	movs	r3, r0
   222c4:	7023      	strb	r3, [r4, #0]
	//M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
	//M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
	//M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	//M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	//M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
	SerialConsoleWriteString("\r\n");
   222c6:	4b1c      	ldr	r3, [pc, #112]	; (22338 <m2m_wifi_init+0xfc>)
   222c8:	0018      	movs	r0, r3
   222ca:	4b1c      	ldr	r3, [pc, #112]	; (2233c <m2m_wifi_init+0x100>)
   222cc:	4798      	blx	r3
	
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   222ce:	2337      	movs	r3, #55	; 0x37
   222d0:	18fb      	adds	r3, r7, r3
   222d2:	781b      	ldrb	r3, [r3, #0]
   222d4:	b25b      	sxtb	r3, r3
   222d6:	330d      	adds	r3, #13
   222d8:	d116      	bne.n	22308 <m2m_wifi_init+0xcc>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   222da:	23f5      	movs	r3, #245	; 0xf5
   222dc:	005a      	lsls	r2, r3, #1
   222de:	4918      	ldr	r1, [pc, #96]	; (22340 <m2m_wifi_init+0x104>)
   222e0:	4b18      	ldr	r3, [pc, #96]	; (22344 <m2m_wifi_init+0x108>)
   222e2:	0018      	movs	r0, r3
   222e4:	4b18      	ldr	r3, [pc, #96]	; (22348 <m2m_wifi_init+0x10c>)
   222e6:	4798      	blx	r3
   222e8:	4b18      	ldr	r3, [pc, #96]	; (2234c <m2m_wifi_init+0x110>)
   222ea:	0018      	movs	r0, r3
   222ec:	4b16      	ldr	r3, [pc, #88]	; (22348 <m2m_wifi_init+0x10c>)
   222ee:	4798      	blx	r3
   222f0:	4b17      	ldr	r3, [pc, #92]	; (22350 <m2m_wifi_init+0x114>)
   222f2:	0018      	movs	r0, r3
   222f4:	4b14      	ldr	r3, [pc, #80]	; (22348 <m2m_wifi_init+0x10c>)
   222f6:	4798      	blx	r3
	}

	goto _EXIT0;
   222f8:	e006      	b.n	22308 <m2m_wifi_init+0xcc>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   222fa:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   222fc:	2000      	movs	r0, #0
   222fe:	4b15      	ldr	r3, [pc, #84]	; (22354 <m2m_wifi_init+0x118>)
   22300:	4798      	blx	r3
   22302:	e002      	b.n	2230a <m2m_wifi_init+0xce>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22304:	46c0      	nop			; (mov r8, r8)
   22306:	e000      	b.n	2230a <m2m_wifi_init+0xce>
	goto _EXIT0;
   22308:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   2230a:	2337      	movs	r3, #55	; 0x37
   2230c:	18fb      	adds	r3, r7, r3
   2230e:	781b      	ldrb	r3, [r3, #0]
   22310:	b25b      	sxtb	r3, r3
}
   22312:	0018      	movs	r0, r3
   22314:	46bd      	mov	sp, r7
   22316:	b00f      	add	sp, #60	; 0x3c
   22318:	bd90      	pop	{r4, r7, pc}
   2231a:	46c0      	nop			; (mov r8, r8)
   2231c:	200042a4 	.word	0x200042a4
   22320:	200042a1 	.word	0x200042a1
   22324:	00023489 	.word	0x00023489
   22328:	000212e5 	.word	0x000212e5
   2232c:	00021e85 	.word	0x00021e85
   22330:	00021dc9 	.word	0x00021dc9
   22334:	000232bd 	.word	0x000232bd
   22338:	00038f00 	.word	0x00038f00
   2233c:	0001e255 	.word	0x0001e255
   22340:	00039088 	.word	0x00039088
   22344:	00038d8c 	.word	0x00038d8c
   22348:	0001e399 	.word	0x0001e399
   2234c:	00038f04 	.word	0x00038f04
   22350:	00038d88 	.word	0x00038d88
   22354:	00023619 	.word	0x00023619

00022358 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22358:	b580      	push	{r7, lr}
   2235a:	b082      	sub	sp, #8
   2235c:	af00      	add	r7, sp, #0
   2235e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22360:	4b03      	ldr	r3, [pc, #12]	; (22370 <m2m_wifi_handle_events+0x18>)
   22362:	4798      	blx	r3
   22364:	0003      	movs	r3, r0
}
   22366:	0018      	movs	r0, r3
   22368:	46bd      	mov	sp, r7
   2236a:	b002      	add	sp, #8
   2236c:	bd80      	pop	{r7, pc}
   2236e:	46c0      	nop			; (mov r8, r8)
   22370:	00021ba9 	.word	0x00021ba9

00022374 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22374:	b590      	push	{r4, r7, lr}
   22376:	b087      	sub	sp, #28
   22378:	af02      	add	r7, sp, #8
   2237a:	60f8      	str	r0, [r7, #12]
   2237c:	0008      	movs	r0, r1
   2237e:	0011      	movs	r1, r2
   22380:	607b      	str	r3, [r7, #4]
   22382:	230b      	movs	r3, #11
   22384:	18fb      	adds	r3, r7, r3
   22386:	1c02      	adds	r2, r0, #0
   22388:	701a      	strb	r2, [r3, #0]
   2238a:	230a      	movs	r3, #10
   2238c:	18fb      	adds	r3, r7, r3
   2238e:	1c0a      	adds	r2, r1, #0
   22390:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22392:	687c      	ldr	r4, [r7, #4]
   22394:	230a      	movs	r3, #10
   22396:	18fb      	adds	r3, r7, r3
   22398:	781a      	ldrb	r2, [r3, #0]
   2239a:	230b      	movs	r3, #11
   2239c:	18fb      	adds	r3, r7, r3
   2239e:	7819      	ldrb	r1, [r3, #0]
   223a0:	68f8      	ldr	r0, [r7, #12]
   223a2:	2300      	movs	r3, #0
   223a4:	9301      	str	r3, [sp, #4]
   223a6:	2320      	movs	r3, #32
   223a8:	18fb      	adds	r3, r7, r3
   223aa:	881b      	ldrh	r3, [r3, #0]
   223ac:	9300      	str	r3, [sp, #0]
   223ae:	0023      	movs	r3, r4
   223b0:	4c03      	ldr	r4, [pc, #12]	; (223c0 <m2m_wifi_connect+0x4c>)
   223b2:	47a0      	blx	r4
   223b4:	0003      	movs	r3, r0
}
   223b6:	0018      	movs	r0, r3
   223b8:	46bd      	mov	sp, r7
   223ba:	b005      	add	sp, #20
   223bc:	bd90      	pop	{r4, r7, pc}
   223be:	46c0      	nop			; (mov r8, r8)
   223c0:	000223c5 	.word	0x000223c5

000223c4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   223c4:	b5b0      	push	{r4, r5, r7, lr}
   223c6:	b0aa      	sub	sp, #168	; 0xa8
   223c8:	af04      	add	r7, sp, #16
   223ca:	60f8      	str	r0, [r7, #12]
   223cc:	0008      	movs	r0, r1
   223ce:	0011      	movs	r1, r2
   223d0:	607b      	str	r3, [r7, #4]
   223d2:	230b      	movs	r3, #11
   223d4:	18fb      	adds	r3, r7, r3
   223d6:	1c02      	adds	r2, r0, #0
   223d8:	701a      	strb	r2, [r3, #0]
   223da:	230a      	movs	r3, #10
   223dc:	18fb      	adds	r3, r7, r3
   223de:	1c0a      	adds	r2, r1, #0
   223e0:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   223e2:	2397      	movs	r3, #151	; 0x97
   223e4:	18fb      	adds	r3, r7, r3
   223e6:	2200      	movs	r2, #0
   223e8:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   223ea:	230a      	movs	r3, #10
   223ec:	18fb      	adds	r3, r7, r3
   223ee:	781b      	ldrb	r3, [r3, #0]
   223f0:	2b01      	cmp	r3, #1
   223f2:	d100      	bne.n	223f6 <m2m_wifi_connect_sc+0x32>
   223f4:	e085      	b.n	22502 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   223f6:	687b      	ldr	r3, [r7, #4]
   223f8:	2b00      	cmp	r3, #0
   223fa:	d112      	bne.n	22422 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   223fc:	4ad7      	ldr	r2, [pc, #860]	; (2275c <m2m_wifi_connect_sc+0x398>)
   223fe:	49d8      	ldr	r1, [pc, #864]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   22400:	4bd8      	ldr	r3, [pc, #864]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   22402:	0018      	movs	r0, r3
   22404:	4bd8      	ldr	r3, [pc, #864]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22406:	4798      	blx	r3
   22408:	4bd8      	ldr	r3, [pc, #864]	; (2276c <m2m_wifi_connect_sc+0x3a8>)
   2240a:	0018      	movs	r0, r3
   2240c:	4bd6      	ldr	r3, [pc, #856]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   2240e:	4798      	blx	r3
   22410:	4bd7      	ldr	r3, [pc, #860]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   22412:	0018      	movs	r0, r3
   22414:	4bd4      	ldr	r3, [pc, #848]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22416:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22418:	2397      	movs	r3, #151	; 0x97
   2241a:	18fb      	adds	r3, r7, r3
   2241c:	22f4      	movs	r2, #244	; 0xf4
   2241e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22420:	e1f9      	b.n	22816 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22422:	230a      	movs	r3, #10
   22424:	18fb      	adds	r3, r7, r3
   22426:	781b      	ldrb	r3, [r3, #0]
   22428:	2b02      	cmp	r3, #2
   2242a:	d16a      	bne.n	22502 <m2m_wifi_connect_sc+0x13e>
   2242c:	687b      	ldr	r3, [r7, #4]
   2242e:	0018      	movs	r0, r3
   22430:	4bd0      	ldr	r3, [pc, #832]	; (22774 <m2m_wifi_connect_sc+0x3b0>)
   22432:	4798      	blx	r3
   22434:	0003      	movs	r3, r0
   22436:	2b40      	cmp	r3, #64	; 0x40
   22438:	d163      	bne.n	22502 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   2243a:	2396      	movs	r3, #150	; 0x96
   2243c:	18fb      	adds	r3, r7, r3
   2243e:	2200      	movs	r2, #0
   22440:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22442:	687b      	ldr	r3, [r7, #4]
   22444:	2290      	movs	r2, #144	; 0x90
   22446:	18ba      	adds	r2, r7, r2
   22448:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2244a:	e055      	b.n	224f8 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   2244c:	2396      	movs	r3, #150	; 0x96
   2244e:	18fb      	adds	r3, r7, r3
   22450:	781b      	ldrb	r3, [r3, #0]
   22452:	2290      	movs	r2, #144	; 0x90
   22454:	18ba      	adds	r2, r7, r2
   22456:	6812      	ldr	r2, [r2, #0]
   22458:	18d3      	adds	r3, r2, r3
   2245a:	781b      	ldrb	r3, [r3, #0]
   2245c:	2b2f      	cmp	r3, #47	; 0x2f
   2245e:	d931      	bls.n	224c4 <m2m_wifi_connect_sc+0x100>
   22460:	2396      	movs	r3, #150	; 0x96
   22462:	18fb      	adds	r3, r7, r3
   22464:	781b      	ldrb	r3, [r3, #0]
   22466:	2290      	movs	r2, #144	; 0x90
   22468:	18ba      	adds	r2, r7, r2
   2246a:	6812      	ldr	r2, [r2, #0]
   2246c:	18d3      	adds	r3, r2, r3
   2246e:	781b      	ldrb	r3, [r3, #0]
   22470:	2b39      	cmp	r3, #57	; 0x39
   22472:	d909      	bls.n	22488 <m2m_wifi_connect_sc+0xc4>
   22474:	2396      	movs	r3, #150	; 0x96
   22476:	18fb      	adds	r3, r7, r3
   22478:	781b      	ldrb	r3, [r3, #0]
   2247a:	2290      	movs	r2, #144	; 0x90
   2247c:	18ba      	adds	r2, r7, r2
   2247e:	6812      	ldr	r2, [r2, #0]
   22480:	18d3      	adds	r3, r2, r3
   22482:	781b      	ldrb	r3, [r3, #0]
   22484:	2b40      	cmp	r3, #64	; 0x40
   22486:	d91d      	bls.n	224c4 <m2m_wifi_connect_sc+0x100>
   22488:	2396      	movs	r3, #150	; 0x96
   2248a:	18fb      	adds	r3, r7, r3
   2248c:	781b      	ldrb	r3, [r3, #0]
   2248e:	2290      	movs	r2, #144	; 0x90
   22490:	18ba      	adds	r2, r7, r2
   22492:	6812      	ldr	r2, [r2, #0]
   22494:	18d3      	adds	r3, r2, r3
   22496:	781b      	ldrb	r3, [r3, #0]
   22498:	2b46      	cmp	r3, #70	; 0x46
   2249a:	d909      	bls.n	224b0 <m2m_wifi_connect_sc+0xec>
   2249c:	2396      	movs	r3, #150	; 0x96
   2249e:	18fb      	adds	r3, r7, r3
   224a0:	781b      	ldrb	r3, [r3, #0]
   224a2:	2290      	movs	r2, #144	; 0x90
   224a4:	18ba      	adds	r2, r7, r2
   224a6:	6812      	ldr	r2, [r2, #0]
   224a8:	18d3      	adds	r3, r2, r3
   224aa:	781b      	ldrb	r3, [r3, #0]
   224ac:	2b60      	cmp	r3, #96	; 0x60
   224ae:	d909      	bls.n	224c4 <m2m_wifi_connect_sc+0x100>
   224b0:	2396      	movs	r3, #150	; 0x96
   224b2:	18fb      	adds	r3, r7, r3
   224b4:	781b      	ldrb	r3, [r3, #0]
   224b6:	2290      	movs	r2, #144	; 0x90
   224b8:	18ba      	adds	r2, r7, r2
   224ba:	6812      	ldr	r2, [r2, #0]
   224bc:	18d3      	adds	r3, r2, r3
   224be:	781b      	ldrb	r3, [r3, #0]
   224c0:	2b66      	cmp	r3, #102	; 0x66
   224c2:	d912      	bls.n	224ea <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   224c4:	4aac      	ldr	r2, [pc, #688]	; (22778 <m2m_wifi_connect_sc+0x3b4>)
   224c6:	49a6      	ldr	r1, [pc, #664]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   224c8:	4ba6      	ldr	r3, [pc, #664]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   224ca:	0018      	movs	r0, r3
   224cc:	4ba6      	ldr	r3, [pc, #664]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   224ce:	4798      	blx	r3
   224d0:	4baa      	ldr	r3, [pc, #680]	; (2277c <m2m_wifi_connect_sc+0x3b8>)
   224d2:	0018      	movs	r0, r3
   224d4:	4ba4      	ldr	r3, [pc, #656]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   224d6:	4798      	blx	r3
   224d8:	4ba5      	ldr	r3, [pc, #660]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   224da:	0018      	movs	r0, r3
   224dc:	4ba2      	ldr	r3, [pc, #648]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   224de:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   224e0:	2397      	movs	r3, #151	; 0x97
   224e2:	18fb      	adds	r3, r7, r3
   224e4:	22f4      	movs	r2, #244	; 0xf4
   224e6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   224e8:	e195      	b.n	22816 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   224ea:	2396      	movs	r3, #150	; 0x96
   224ec:	18fb      	adds	r3, r7, r3
   224ee:	781a      	ldrb	r2, [r3, #0]
   224f0:	2396      	movs	r3, #150	; 0x96
   224f2:	18fb      	adds	r3, r7, r3
   224f4:	3201      	adds	r2, #1
   224f6:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   224f8:	2396      	movs	r3, #150	; 0x96
   224fa:	18fb      	adds	r3, r7, r3
   224fc:	781b      	ldrb	r3, [r3, #0]
   224fe:	2b3f      	cmp	r3, #63	; 0x3f
   22500:	d9a4      	bls.n	2244c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22502:	230b      	movs	r3, #11
   22504:	18fb      	adds	r3, r7, r3
   22506:	781b      	ldrb	r3, [r3, #0]
   22508:	2b00      	cmp	r3, #0
   2250a:	d004      	beq.n	22516 <m2m_wifi_connect_sc+0x152>
   2250c:	230b      	movs	r3, #11
   2250e:	18fb      	adds	r3, r7, r3
   22510:	781b      	ldrb	r3, [r3, #0]
   22512:	2b20      	cmp	r3, #32
   22514:	d912      	bls.n	2253c <m2m_wifi_connect_sc+0x178>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22516:	4a9a      	ldr	r2, [pc, #616]	; (22780 <m2m_wifi_connect_sc+0x3bc>)
   22518:	4991      	ldr	r1, [pc, #580]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   2251a:	4b92      	ldr	r3, [pc, #584]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   2251c:	0018      	movs	r0, r3
   2251e:	4b92      	ldr	r3, [pc, #584]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22520:	4798      	blx	r3
   22522:	4b98      	ldr	r3, [pc, #608]	; (22784 <m2m_wifi_connect_sc+0x3c0>)
   22524:	0018      	movs	r0, r3
   22526:	4b90      	ldr	r3, [pc, #576]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22528:	4798      	blx	r3
   2252a:	4b91      	ldr	r3, [pc, #580]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   2252c:	0018      	movs	r0, r3
   2252e:	4b8e      	ldr	r3, [pc, #568]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22530:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22532:	2397      	movs	r3, #151	; 0x97
   22534:	18fb      	adds	r3, r7, r3
   22536:	22f4      	movs	r2, #244	; 0xf4
   22538:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2253a:	e16c      	b.n	22816 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   2253c:	23a8      	movs	r3, #168	; 0xa8
   2253e:	18fb      	adds	r3, r7, r3
   22540:	881b      	ldrh	r3, [r3, #0]
   22542:	2b00      	cmp	r3, #0
   22544:	d004      	beq.n	22550 <m2m_wifi_connect_sc+0x18c>
   22546:	23a8      	movs	r3, #168	; 0xa8
   22548:	18fb      	adds	r3, r7, r3
   2254a:	881b      	ldrh	r3, [r3, #0]
   2254c:	2b0e      	cmp	r3, #14
   2254e:	d918      	bls.n	22582 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22550:	23a8      	movs	r3, #168	; 0xa8
   22552:	18fb      	adds	r3, r7, r3
   22554:	881b      	ldrh	r3, [r3, #0]
   22556:	2bff      	cmp	r3, #255	; 0xff
   22558:	d013      	beq.n	22582 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   2255a:	238f      	movs	r3, #143	; 0x8f
   2255c:	009a      	lsls	r2, r3, #2
   2255e:	4980      	ldr	r1, [pc, #512]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   22560:	4b80      	ldr	r3, [pc, #512]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   22562:	0018      	movs	r0, r3
   22564:	4b80      	ldr	r3, [pc, #512]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22566:	4798      	blx	r3
   22568:	4b87      	ldr	r3, [pc, #540]	; (22788 <m2m_wifi_connect_sc+0x3c4>)
   2256a:	0018      	movs	r0, r3
   2256c:	4b7e      	ldr	r3, [pc, #504]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   2256e:	4798      	blx	r3
   22570:	4b7f      	ldr	r3, [pc, #508]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   22572:	0018      	movs	r0, r3
   22574:	4b7c      	ldr	r3, [pc, #496]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22576:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22578:	2397      	movs	r3, #151	; 0x97
   2257a:	18fb      	adds	r3, r7, r3
   2257c:	22f4      	movs	r2, #244	; 0xf4
   2257e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22580:	e149      	b.n	22816 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22582:	230b      	movs	r3, #11
   22584:	18fb      	adds	r3, r7, r3
   22586:	781a      	ldrb	r2, [r3, #0]
   22588:	68f9      	ldr	r1, [r7, #12]
   2258a:	2314      	movs	r3, #20
   2258c:	18fb      	adds	r3, r7, r3
   2258e:	3346      	adds	r3, #70	; 0x46
   22590:	0018      	movs	r0, r3
   22592:	4b7e      	ldr	r3, [pc, #504]	; (2278c <m2m_wifi_connect_sc+0x3c8>)
   22594:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22596:	230b      	movs	r3, #11
   22598:	18fb      	adds	r3, r7, r3
   2259a:	781b      	ldrb	r3, [r3, #0]
   2259c:	2214      	movs	r2, #20
   2259e:	18ba      	adds	r2, r7, r2
   225a0:	2146      	movs	r1, #70	; 0x46
   225a2:	18d3      	adds	r3, r2, r3
   225a4:	185b      	adds	r3, r3, r1
   225a6:	2200      	movs	r2, #0
   225a8:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   225aa:	2314      	movs	r3, #20
   225ac:	18fb      	adds	r3, r7, r3
   225ae:	22a8      	movs	r2, #168	; 0xa8
   225b0:	18ba      	adds	r2, r7, r2
   225b2:	2144      	movs	r1, #68	; 0x44
   225b4:	8812      	ldrh	r2, [r2, #0]
   225b6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   225b8:	23ac      	movs	r3, #172	; 0xac
   225ba:	18fb      	adds	r3, r7, r3
   225bc:	781b      	ldrb	r3, [r3, #0]
   225be:	1e5a      	subs	r2, r3, #1
   225c0:	4193      	sbcs	r3, r2
   225c2:	b2db      	uxtb	r3, r3
   225c4:	0019      	movs	r1, r3
   225c6:	2314      	movs	r3, #20
   225c8:	18fb      	adds	r3, r7, r3
   225ca:	2267      	movs	r2, #103	; 0x67
   225cc:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   225ce:	2314      	movs	r3, #20
   225d0:	18fb      	adds	r3, r7, r3
   225d2:	228c      	movs	r2, #140	; 0x8c
   225d4:	18ba      	adds	r2, r7, r2
   225d6:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   225d8:	238c      	movs	r3, #140	; 0x8c
   225da:	18fb      	adds	r3, r7, r3
   225dc:	681b      	ldr	r3, [r3, #0]
   225de:	220a      	movs	r2, #10
   225e0:	18ba      	adds	r2, r7, r2
   225e2:	2141      	movs	r1, #65	; 0x41
   225e4:	7812      	ldrb	r2, [r2, #0]
   225e6:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   225e8:	230a      	movs	r3, #10
   225ea:	18fb      	adds	r3, r7, r3
   225ec:	781b      	ldrb	r3, [r3, #0]
   225ee:	2b03      	cmp	r3, #3
   225f0:	d000      	beq.n	225f4 <m2m_wifi_connect_sc+0x230>
   225f2:	e07c      	b.n	226ee <m2m_wifi_connect_sc+0x32a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   225f4:	687b      	ldr	r3, [r7, #4]
   225f6:	2288      	movs	r2, #136	; 0x88
   225f8:	18ba      	adds	r2, r7, r2
   225fa:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   225fc:	238c      	movs	r3, #140	; 0x8c
   225fe:	18fb      	adds	r3, r7, r3
   22600:	681b      	ldr	r3, [r3, #0]
   22602:	2284      	movs	r2, #132	; 0x84
   22604:	18ba      	adds	r2, r7, r2
   22606:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22608:	2388      	movs	r3, #136	; 0x88
   2260a:	18fb      	adds	r3, r7, r3
   2260c:	681b      	ldr	r3, [r3, #0]
   2260e:	781b      	ldrb	r3, [r3, #0]
   22610:	3b01      	subs	r3, #1
   22612:	b2da      	uxtb	r2, r3
   22614:	2384      	movs	r3, #132	; 0x84
   22616:	18fb      	adds	r3, r7, r3
   22618:	681b      	ldr	r3, [r3, #0]
   2261a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   2261c:	2384      	movs	r3, #132	; 0x84
   2261e:	18fb      	adds	r3, r7, r3
   22620:	681b      	ldr	r3, [r3, #0]
   22622:	781b      	ldrb	r3, [r3, #0]
   22624:	2b03      	cmp	r3, #3
   22626:	d918      	bls.n	2265a <m2m_wifi_connect_sc+0x296>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22628:	4a59      	ldr	r2, [pc, #356]	; (22790 <m2m_wifi_connect_sc+0x3cc>)
   2262a:	494d      	ldr	r1, [pc, #308]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   2262c:	4b4d      	ldr	r3, [pc, #308]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   2262e:	0018      	movs	r0, r3
   22630:	4b4d      	ldr	r3, [pc, #308]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22632:	4798      	blx	r3
   22634:	2384      	movs	r3, #132	; 0x84
   22636:	18fb      	adds	r3, r7, r3
   22638:	681b      	ldr	r3, [r3, #0]
   2263a:	781b      	ldrb	r3, [r3, #0]
   2263c:	001a      	movs	r2, r3
   2263e:	4b55      	ldr	r3, [pc, #340]	; (22794 <m2m_wifi_connect_sc+0x3d0>)
   22640:	0011      	movs	r1, r2
   22642:	0018      	movs	r0, r3
   22644:	4b48      	ldr	r3, [pc, #288]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22646:	4798      	blx	r3
   22648:	4b49      	ldr	r3, [pc, #292]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   2264a:	0018      	movs	r0, r3
   2264c:	4b46      	ldr	r3, [pc, #280]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   2264e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22650:	2397      	movs	r3, #151	; 0x97
   22652:	18fb      	adds	r3, r7, r3
   22654:	22f4      	movs	r2, #244	; 0xf4
   22656:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22658:	e0dd      	b.n	22816 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   2265a:	2388      	movs	r3, #136	; 0x88
   2265c:	18fb      	adds	r3, r7, r3
   2265e:	681b      	ldr	r3, [r3, #0]
   22660:	785b      	ldrb	r3, [r3, #1]
   22662:	3b01      	subs	r3, #1
   22664:	b2da      	uxtb	r2, r3
   22666:	2384      	movs	r3, #132	; 0x84
   22668:	18fb      	adds	r3, r7, r3
   2266a:	681b      	ldr	r3, [r3, #0]
   2266c:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2266e:	2384      	movs	r3, #132	; 0x84
   22670:	18fb      	adds	r3, r7, r3
   22672:	681b      	ldr	r3, [r3, #0]
   22674:	785b      	ldrb	r3, [r3, #1]
   22676:	2b0a      	cmp	r3, #10
   22678:	d01e      	beq.n	226b8 <m2m_wifi_connect_sc+0x2f4>
   2267a:	2384      	movs	r3, #132	; 0x84
   2267c:	18fb      	adds	r3, r7, r3
   2267e:	681b      	ldr	r3, [r3, #0]
   22680:	785b      	ldrb	r3, [r3, #1]
   22682:	2b1a      	cmp	r3, #26
   22684:	d018      	beq.n	226b8 <m2m_wifi_connect_sc+0x2f4>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22686:	4a44      	ldr	r2, [pc, #272]	; (22798 <m2m_wifi_connect_sc+0x3d4>)
   22688:	4935      	ldr	r1, [pc, #212]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   2268a:	4b36      	ldr	r3, [pc, #216]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   2268c:	0018      	movs	r0, r3
   2268e:	4b36      	ldr	r3, [pc, #216]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22690:	4798      	blx	r3
   22692:	2384      	movs	r3, #132	; 0x84
   22694:	18fb      	adds	r3, r7, r3
   22696:	681b      	ldr	r3, [r3, #0]
   22698:	785b      	ldrb	r3, [r3, #1]
   2269a:	001a      	movs	r2, r3
   2269c:	4b3f      	ldr	r3, [pc, #252]	; (2279c <m2m_wifi_connect_sc+0x3d8>)
   2269e:	0011      	movs	r1, r2
   226a0:	0018      	movs	r0, r3
   226a2:	4b31      	ldr	r3, [pc, #196]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   226a4:	4798      	blx	r3
   226a6:	4b32      	ldr	r3, [pc, #200]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   226a8:	0018      	movs	r0, r3
   226aa:	4b2f      	ldr	r3, [pc, #188]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   226ac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   226ae:	2397      	movs	r3, #151	; 0x97
   226b0:	18fb      	adds	r3, r7, r3
   226b2:	22f4      	movs	r2, #244	; 0xf4
   226b4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   226b6:	e0ae      	b.n	22816 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   226b8:	2384      	movs	r3, #132	; 0x84
   226ba:	18fb      	adds	r3, r7, r3
   226bc:	681b      	ldr	r3, [r3, #0]
   226be:	1c98      	adds	r0, r3, #2
   226c0:	2388      	movs	r3, #136	; 0x88
   226c2:	18fb      	adds	r3, r7, r3
   226c4:	681b      	ldr	r3, [r3, #0]
   226c6:	1c99      	adds	r1, r3, #2
   226c8:	2388      	movs	r3, #136	; 0x88
   226ca:	18fb      	adds	r3, r7, r3
   226cc:	681b      	ldr	r3, [r3, #0]
   226ce:	785b      	ldrb	r3, [r3, #1]
   226d0:	001a      	movs	r2, r3
   226d2:	4b2e      	ldr	r3, [pc, #184]	; (2278c <m2m_wifi_connect_sc+0x3c8>)
   226d4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   226d6:	2388      	movs	r3, #136	; 0x88
   226d8:	18fb      	adds	r3, r7, r3
   226da:	681b      	ldr	r3, [r3, #0]
   226dc:	785b      	ldrb	r3, [r3, #1]
   226de:	001a      	movs	r2, r3
   226e0:	2384      	movs	r3, #132	; 0x84
   226e2:	18fb      	adds	r3, r7, r3
   226e4:	681b      	ldr	r3, [r3, #0]
   226e6:	189b      	adds	r3, r3, r2
   226e8:	2200      	movs	r2, #0
   226ea:	709a      	strb	r2, [r3, #2]
   226ec:	e082      	b.n	227f4 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   226ee:	230a      	movs	r3, #10
   226f0:	18fb      	adds	r3, r7, r3
   226f2:	781b      	ldrb	r3, [r3, #0]
   226f4:	2b02      	cmp	r3, #2
   226f6:	d157      	bne.n	227a8 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   226f8:	2382      	movs	r3, #130	; 0x82
   226fa:	18fc      	adds	r4, r7, r3
   226fc:	687b      	ldr	r3, [r7, #4]
   226fe:	0018      	movs	r0, r3
   22700:	4b1c      	ldr	r3, [pc, #112]	; (22774 <m2m_wifi_connect_sc+0x3b0>)
   22702:	4798      	blx	r3
   22704:	0003      	movs	r3, r0
   22706:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22708:	2382      	movs	r3, #130	; 0x82
   2270a:	18fb      	adds	r3, r7, r3
   2270c:	881b      	ldrh	r3, [r3, #0]
   2270e:	2b00      	cmp	r3, #0
   22710:	d004      	beq.n	2271c <m2m_wifi_connect_sc+0x358>
   22712:	2382      	movs	r3, #130	; 0x82
   22714:	18fb      	adds	r3, r7, r3
   22716:	881b      	ldrh	r3, [r3, #0]
   22718:	2b40      	cmp	r3, #64	; 0x40
   2271a:	d912      	bls.n	22742 <m2m_wifi_connect_sc+0x37e>
		{
			M2M_ERR("Incorrect PSK key length\n");
   2271c:	4a20      	ldr	r2, [pc, #128]	; (227a0 <m2m_wifi_connect_sc+0x3dc>)
   2271e:	4910      	ldr	r1, [pc, #64]	; (22760 <m2m_wifi_connect_sc+0x39c>)
   22720:	4b10      	ldr	r3, [pc, #64]	; (22764 <m2m_wifi_connect_sc+0x3a0>)
   22722:	0018      	movs	r0, r3
   22724:	4b10      	ldr	r3, [pc, #64]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22726:	4798      	blx	r3
   22728:	4b1e      	ldr	r3, [pc, #120]	; (227a4 <m2m_wifi_connect_sc+0x3e0>)
   2272a:	0018      	movs	r0, r3
   2272c:	4b0e      	ldr	r3, [pc, #56]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   2272e:	4798      	blx	r3
   22730:	4b0f      	ldr	r3, [pc, #60]	; (22770 <m2m_wifi_connect_sc+0x3ac>)
   22732:	0018      	movs	r0, r3
   22734:	4b0c      	ldr	r3, [pc, #48]	; (22768 <m2m_wifi_connect_sc+0x3a4>)
   22736:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22738:	2397      	movs	r3, #151	; 0x97
   2273a:	18fb      	adds	r3, r7, r3
   2273c:	22f4      	movs	r2, #244	; 0xf4
   2273e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22740:	e069      	b.n	22816 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22742:	238c      	movs	r3, #140	; 0x8c
   22744:	18fb      	adds	r3, r7, r3
   22746:	6818      	ldr	r0, [r3, #0]
   22748:	2382      	movs	r3, #130	; 0x82
   2274a:	18fb      	adds	r3, r7, r3
   2274c:	881b      	ldrh	r3, [r3, #0]
   2274e:	3301      	adds	r3, #1
   22750:	001a      	movs	r2, r3
   22752:	687b      	ldr	r3, [r7, #4]
   22754:	0019      	movs	r1, r3
   22756:	4b0d      	ldr	r3, [pc, #52]	; (2278c <m2m_wifi_connect_sc+0x3c8>)
   22758:	4798      	blx	r3
   2275a:	e04b      	b.n	227f4 <m2m_wifi_connect_sc+0x430>
   2275c:	0000021d 	.word	0x0000021d
   22760:	00039098 	.word	0x00039098
   22764:	00038d8c 	.word	0x00038d8c
   22768:	0001e399 	.word	0x0001e399
   2276c:	00038f20 	.word	0x00038f20
   22770:	00038d88 	.word	0x00038d88
   22774:	0002110b 	.word	0x0002110b
   22778:	00000229 	.word	0x00000229
   2277c:	00038f34 	.word	0x00038f34
   22780:	00000233 	.word	0x00000233
   22784:	00038f44 	.word	0x00038f44
   22788:	00038f58 	.word	0x00038f58
   2278c:	00021091 	.word	0x00021091
   22790:	00000253 	.word	0x00000253
   22794:	00038f64 	.word	0x00038f64
   22798:	0000025a 	.word	0x0000025a
   2279c:	00038f80 	.word	0x00038f80
   227a0:	00000269 	.word	0x00000269
   227a4:	00038f9c 	.word	0x00038f9c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   227a8:	230a      	movs	r3, #10
   227aa:	18fb      	adds	r3, r7, r3
   227ac:	781b      	ldrb	r3, [r3, #0]
   227ae:	2b04      	cmp	r3, #4
   227b0:	d108      	bne.n	227c4 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   227b2:	238c      	movs	r3, #140	; 0x8c
   227b4:	18fb      	adds	r3, r7, r3
   227b6:	681b      	ldr	r3, [r3, #0]
   227b8:	6879      	ldr	r1, [r7, #4]
   227ba:	223e      	movs	r2, #62	; 0x3e
   227bc:	0018      	movs	r0, r3
   227be:	4b1a      	ldr	r3, [pc, #104]	; (22828 <m2m_wifi_connect_sc+0x464>)
   227c0:	4798      	blx	r3
   227c2:	e017      	b.n	227f4 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   227c4:	230a      	movs	r3, #10
   227c6:	18fb      	adds	r3, r7, r3
   227c8:	781b      	ldrb	r3, [r3, #0]
   227ca:	2b01      	cmp	r3, #1
   227cc:	d012      	beq.n	227f4 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   227ce:	4a17      	ldr	r2, [pc, #92]	; (2282c <m2m_wifi_connect_sc+0x468>)
   227d0:	4917      	ldr	r1, [pc, #92]	; (22830 <m2m_wifi_connect_sc+0x46c>)
   227d2:	4b18      	ldr	r3, [pc, #96]	; (22834 <m2m_wifi_connect_sc+0x470>)
   227d4:	0018      	movs	r0, r3
   227d6:	4b18      	ldr	r3, [pc, #96]	; (22838 <m2m_wifi_connect_sc+0x474>)
   227d8:	4798      	blx	r3
   227da:	4b18      	ldr	r3, [pc, #96]	; (2283c <m2m_wifi_connect_sc+0x478>)
   227dc:	0018      	movs	r0, r3
   227de:	4b16      	ldr	r3, [pc, #88]	; (22838 <m2m_wifi_connect_sc+0x474>)
   227e0:	4798      	blx	r3
   227e2:	4b17      	ldr	r3, [pc, #92]	; (22840 <m2m_wifi_connect_sc+0x47c>)
   227e4:	0018      	movs	r0, r3
   227e6:	4b14      	ldr	r3, [pc, #80]	; (22838 <m2m_wifi_connect_sc+0x474>)
   227e8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   227ea:	2397      	movs	r3, #151	; 0x97
   227ec:	18fb      	adds	r3, r7, r3
   227ee:	22f4      	movs	r2, #244	; 0xf4
   227f0:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   227f2:	e010      	b.n	22816 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   227f4:	2397      	movs	r3, #151	; 0x97
   227f6:	18fc      	adds	r4, r7, r3
   227f8:	2314      	movs	r3, #20
   227fa:	18fa      	adds	r2, r7, r3
   227fc:	2300      	movs	r3, #0
   227fe:	9302      	str	r3, [sp, #8]
   22800:	2300      	movs	r3, #0
   22802:	9301      	str	r3, [sp, #4]
   22804:	2300      	movs	r3, #0
   22806:	9300      	str	r3, [sp, #0]
   22808:	236c      	movs	r3, #108	; 0x6c
   2280a:	2128      	movs	r1, #40	; 0x28
   2280c:	2001      	movs	r0, #1
   2280e:	4d0d      	ldr	r5, [pc, #52]	; (22844 <m2m_wifi_connect_sc+0x480>)
   22810:	47a8      	blx	r5
   22812:	0003      	movs	r3, r0
   22814:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   22816:	2397      	movs	r3, #151	; 0x97
   22818:	18fb      	adds	r3, r7, r3
   2281a:	781b      	ldrb	r3, [r3, #0]
   2281c:	b25b      	sxtb	r3, r3
}
   2281e:	0018      	movs	r0, r3
   22820:	46bd      	mov	sp, r7
   22822:	b026      	add	sp, #152	; 0x98
   22824:	bdb0      	pop	{r4, r5, r7, pc}
   22826:	46c0      	nop			; (mov r8, r8)
   22828:	00021091 	.word	0x00021091
   2282c:	00000279 	.word	0x00000279
   22830:	00039098 	.word	0x00039098
   22834:	00038d8c 	.word	0x00038d8c
   22838:	0001e399 	.word	0x0001e399
   2283c:	00038fb8 	.word	0x00038fb8
   22840:	00038d88 	.word	0x00038d88
   22844:	0002132d 	.word	0x0002132d

00022848 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22848:	b580      	push	{r7, lr}
   2284a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   2284c:	2300      	movs	r3, #0
}
   2284e:	0018      	movs	r0, r3
   22850:	46bd      	mov	sp, r7
   22852:	bd80      	pop	{r7, pc}

00022854 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22854:	b590      	push	{r4, r7, lr}
   22856:	b087      	sub	sp, #28
   22858:	af00      	add	r7, sp, #0
   2285a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2285c:	2317      	movs	r3, #23
   2285e:	18fb      	adds	r3, r7, r3
   22860:	2200      	movs	r2, #0
   22862:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22864:	687b      	ldr	r3, [r7, #4]
   22866:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22868:	693b      	ldr	r3, [r7, #16]
   2286a:	2280      	movs	r2, #128	; 0x80
   2286c:	0052      	lsls	r2, r2, #1
   2286e:	4313      	orrs	r3, r2
   22870:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22872:	693a      	ldr	r2, [r7, #16]
   22874:	23a5      	movs	r3, #165	; 0xa5
   22876:	015b      	lsls	r3, r3, #5
   22878:	0011      	movs	r1, r2
   2287a:	0018      	movs	r0, r3
   2287c:	4b12      	ldr	r3, [pc, #72]	; (228c8 <chip_apply_conf+0x74>)
   2287e:	4798      	blx	r3
		if(val32 != 0) {		
   22880:	693b      	ldr	r3, [r7, #16]
   22882:	2b00      	cmp	r3, #0
   22884:	d018      	beq.n	228b8 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22886:	2300      	movs	r3, #0
   22888:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2288a:	2317      	movs	r3, #23
   2288c:	18fc      	adds	r4, r7, r3
   2288e:	230c      	movs	r3, #12
   22890:	18fa      	adds	r2, r7, r3
   22892:	23a5      	movs	r3, #165	; 0xa5
   22894:	015b      	lsls	r3, r3, #5
   22896:	0011      	movs	r1, r2
   22898:	0018      	movs	r0, r3
   2289a:	4b0c      	ldr	r3, [pc, #48]	; (228cc <chip_apply_conf+0x78>)
   2289c:	4798      	blx	r3
   2289e:	0003      	movs	r3, r0
   228a0:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   228a2:	2317      	movs	r3, #23
   228a4:	18fb      	adds	r3, r7, r3
   228a6:	781b      	ldrb	r3, [r3, #0]
   228a8:	b25b      	sxtb	r3, r3
   228aa:	2b00      	cmp	r3, #0
   228ac:	d1e1      	bne.n	22872 <chip_apply_conf+0x1e>
				if(reg == val32)
   228ae:	68fa      	ldr	r2, [r7, #12]
   228b0:	693b      	ldr	r3, [r7, #16]
   228b2:	429a      	cmp	r2, r3
   228b4:	d002      	beq.n	228bc <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   228b6:	e7dc      	b.n	22872 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   228b8:	46c0      	nop			; (mov r8, r8)
   228ba:	e000      	b.n	228be <chip_apply_conf+0x6a>
					break;
   228bc:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   228be:	2300      	movs	r3, #0
}
   228c0:	0018      	movs	r0, r3
   228c2:	46bd      	mov	sp, r7
   228c4:	b007      	add	sp, #28
   228c6:	bd90      	pop	{r4, r7, pc}
   228c8:	000230a9 	.word	0x000230a9
   228cc:	00023085 	.word	0x00023085

000228d0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   228d0:	b590      	push	{r4, r7, lr}
   228d2:	b083      	sub	sp, #12
   228d4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   228d6:	2300      	movs	r3, #0
   228d8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   228da:	1dfb      	adds	r3, r7, #7
   228dc:	2200      	movs	r2, #0
   228de:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   228e0:	1dfc      	adds	r4, r7, #7
   228e2:	003b      	movs	r3, r7
   228e4:	4a24      	ldr	r2, [pc, #144]	; (22978 <enable_interrupts+0xa8>)
   228e6:	0019      	movs	r1, r3
   228e8:	0010      	movs	r0, r2
   228ea:	4b24      	ldr	r3, [pc, #144]	; (2297c <enable_interrupts+0xac>)
   228ec:	4798      	blx	r3
   228ee:	0003      	movs	r3, r0
   228f0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   228f2:	1dfb      	adds	r3, r7, #7
   228f4:	781b      	ldrb	r3, [r3, #0]
   228f6:	b25b      	sxtb	r3, r3
   228f8:	2b00      	cmp	r3, #0
   228fa:	d131      	bne.n	22960 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   228fc:	683b      	ldr	r3, [r7, #0]
   228fe:	2280      	movs	r2, #128	; 0x80
   22900:	0052      	lsls	r2, r2, #1
   22902:	4313      	orrs	r3, r2
   22904:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   22906:	683b      	ldr	r3, [r7, #0]
   22908:	1dfc      	adds	r4, r7, #7
   2290a:	4a1b      	ldr	r2, [pc, #108]	; (22978 <enable_interrupts+0xa8>)
   2290c:	0019      	movs	r1, r3
   2290e:	0010      	movs	r0, r2
   22910:	4b1b      	ldr	r3, [pc, #108]	; (22980 <enable_interrupts+0xb0>)
   22912:	4798      	blx	r3
   22914:	0003      	movs	r3, r0
   22916:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22918:	1dfb      	adds	r3, r7, #7
   2291a:	781b      	ldrb	r3, [r3, #0]
   2291c:	b25b      	sxtb	r3, r3
   2291e:	2b00      	cmp	r3, #0
   22920:	d120      	bne.n	22964 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   22922:	1dfc      	adds	r4, r7, #7
   22924:	003a      	movs	r2, r7
   22926:	23d0      	movs	r3, #208	; 0xd0
   22928:	015b      	lsls	r3, r3, #5
   2292a:	0011      	movs	r1, r2
   2292c:	0018      	movs	r0, r3
   2292e:	4b13      	ldr	r3, [pc, #76]	; (2297c <enable_interrupts+0xac>)
   22930:	4798      	blx	r3
   22932:	0003      	movs	r3, r0
   22934:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22936:	1dfb      	adds	r3, r7, #7
   22938:	781b      	ldrb	r3, [r3, #0]
   2293a:	b25b      	sxtb	r3, r3
   2293c:	2b00      	cmp	r3, #0
   2293e:	d113      	bne.n	22968 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   22940:	683b      	ldr	r3, [r7, #0]
   22942:	2280      	movs	r2, #128	; 0x80
   22944:	0252      	lsls	r2, r2, #9
   22946:	4313      	orrs	r3, r2
   22948:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2294a:	683a      	ldr	r2, [r7, #0]
   2294c:	1dfc      	adds	r4, r7, #7
   2294e:	23d0      	movs	r3, #208	; 0xd0
   22950:	015b      	lsls	r3, r3, #5
   22952:	0011      	movs	r1, r2
   22954:	0018      	movs	r0, r3
   22956:	4b0a      	ldr	r3, [pc, #40]	; (22980 <enable_interrupts+0xb0>)
   22958:	4798      	blx	r3
   2295a:	0003      	movs	r3, r0
   2295c:	7023      	strb	r3, [r4, #0]
   2295e:	e004      	b.n	2296a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22960:	46c0      	nop			; (mov r8, r8)
   22962:	e002      	b.n	2296a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22964:	46c0      	nop			; (mov r8, r8)
   22966:	e000      	b.n	2296a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22968:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2296a:	1dfb      	adds	r3, r7, #7
   2296c:	781b      	ldrb	r3, [r3, #0]
   2296e:	b25b      	sxtb	r3, r3
}
   22970:	0018      	movs	r0, r3
   22972:	46bd      	mov	sp, r7
   22974:	b003      	add	sp, #12
   22976:	bd90      	pop	{r4, r7, pc}
   22978:	00001408 	.word	0x00001408
   2297c:	00023085 	.word	0x00023085
   22980:	000230a9 	.word	0x000230a9

00022984 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   22984:	b580      	push	{r7, lr}
   22986:	b082      	sub	sp, #8
   22988:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2298a:	4b32      	ldr	r3, [pc, #200]	; (22a54 <nmi_get_chipid+0xd0>)
   2298c:	681b      	ldr	r3, [r3, #0]
   2298e:	2b00      	cmp	r3, #0
   22990:	d159      	bne.n	22a46 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   22992:	4a30      	ldr	r2, [pc, #192]	; (22a54 <nmi_get_chipid+0xd0>)
   22994:	2380      	movs	r3, #128	; 0x80
   22996:	015b      	lsls	r3, r3, #5
   22998:	0011      	movs	r1, r2
   2299a:	0018      	movs	r0, r3
   2299c:	4b2e      	ldr	r3, [pc, #184]	; (22a58 <nmi_get_chipid+0xd4>)
   2299e:	4798      	blx	r3
   229a0:	1e03      	subs	r3, r0, #0
   229a2:	d004      	beq.n	229ae <nmi_get_chipid+0x2a>
			chipid = 0;
   229a4:	4b2b      	ldr	r3, [pc, #172]	; (22a54 <nmi_get_chipid+0xd0>)
   229a6:	2200      	movs	r2, #0
   229a8:	601a      	str	r2, [r3, #0]
			return 0;
   229aa:	2300      	movs	r3, #0
   229ac:	e04d      	b.n	22a4a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   229ae:	1d3b      	adds	r3, r7, #4
   229b0:	4a2a      	ldr	r2, [pc, #168]	; (22a5c <nmi_get_chipid+0xd8>)
   229b2:	0019      	movs	r1, r3
   229b4:	0010      	movs	r0, r2
   229b6:	4b28      	ldr	r3, [pc, #160]	; (22a58 <nmi_get_chipid+0xd4>)
   229b8:	4798      	blx	r3
   229ba:	1e03      	subs	r3, r0, #0
   229bc:	d004      	beq.n	229c8 <nmi_get_chipid+0x44>
			chipid = 0;
   229be:	4b25      	ldr	r3, [pc, #148]	; (22a54 <nmi_get_chipid+0xd0>)
   229c0:	2200      	movs	r2, #0
   229c2:	601a      	str	r2, [r3, #0]
			return 0;
   229c4:	2300      	movs	r3, #0
   229c6:	e040      	b.n	22a4a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   229c8:	4b22      	ldr	r3, [pc, #136]	; (22a54 <nmi_get_chipid+0xd0>)
   229ca:	681b      	ldr	r3, [r3, #0]
   229cc:	4a24      	ldr	r2, [pc, #144]	; (22a60 <nmi_get_chipid+0xdc>)
   229ce:	4293      	cmp	r3, r2
   229d0:	d106      	bne.n	229e0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   229d2:	687b      	ldr	r3, [r7, #4]
   229d4:	2b01      	cmp	r3, #1
   229d6:	d029      	beq.n	22a2c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   229d8:	4b1e      	ldr	r3, [pc, #120]	; (22a54 <nmi_get_chipid+0xd0>)
   229da:	4a22      	ldr	r2, [pc, #136]	; (22a64 <nmi_get_chipid+0xe0>)
   229dc:	601a      	str	r2, [r3, #0]
   229de:	e025      	b.n	22a2c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   229e0:	4b1c      	ldr	r3, [pc, #112]	; (22a54 <nmi_get_chipid+0xd0>)
   229e2:	681b      	ldr	r3, [r3, #0]
   229e4:	4a20      	ldr	r2, [pc, #128]	; (22a68 <nmi_get_chipid+0xe4>)
   229e6:	4293      	cmp	r3, r2
   229e8:	d10d      	bne.n	22a06 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   229ea:	687b      	ldr	r3, [r7, #4]
   229ec:	2b03      	cmp	r3, #3
   229ee:	d01d      	beq.n	22a2c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   229f0:	687b      	ldr	r3, [r7, #4]
   229f2:	2b04      	cmp	r3, #4
   229f4:	d103      	bne.n	229fe <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   229f6:	4b17      	ldr	r3, [pc, #92]	; (22a54 <nmi_get_chipid+0xd0>)
   229f8:	4a1c      	ldr	r2, [pc, #112]	; (22a6c <nmi_get_chipid+0xe8>)
   229fa:	601a      	str	r2, [r3, #0]
   229fc:	e016      	b.n	22a2c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   229fe:	4b15      	ldr	r3, [pc, #84]	; (22a54 <nmi_get_chipid+0xd0>)
   22a00:	4a1b      	ldr	r2, [pc, #108]	; (22a70 <nmi_get_chipid+0xec>)
   22a02:	601a      	str	r2, [r3, #0]
   22a04:	e012      	b.n	22a2c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22a06:	4b13      	ldr	r3, [pc, #76]	; (22a54 <nmi_get_chipid+0xd0>)
   22a08:	681b      	ldr	r3, [r3, #0]
   22a0a:	4a1a      	ldr	r2, [pc, #104]	; (22a74 <nmi_get_chipid+0xf0>)
   22a0c:	4293      	cmp	r3, r2
   22a0e:	d10d      	bne.n	22a2c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   22a10:	4a10      	ldr	r2, [pc, #64]	; (22a54 <nmi_get_chipid+0xd0>)
   22a12:	23ec      	movs	r3, #236	; 0xec
   22a14:	039b      	lsls	r3, r3, #14
   22a16:	0011      	movs	r1, r2
   22a18:	0018      	movs	r0, r3
   22a1a:	4b0f      	ldr	r3, [pc, #60]	; (22a58 <nmi_get_chipid+0xd4>)
   22a1c:	4798      	blx	r3
   22a1e:	1e03      	subs	r3, r0, #0
   22a20:	d004      	beq.n	22a2c <nmi_get_chipid+0xa8>
			chipid = 0;
   22a22:	4b0c      	ldr	r3, [pc, #48]	; (22a54 <nmi_get_chipid+0xd0>)
   22a24:	2200      	movs	r2, #0
   22a26:	601a      	str	r2, [r3, #0]
			return 0;
   22a28:	2300      	movs	r3, #0
   22a2a:	e00e      	b.n	22a4a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22a2c:	4b09      	ldr	r3, [pc, #36]	; (22a54 <nmi_get_chipid+0xd0>)
   22a2e:	681b      	ldr	r3, [r3, #0]
   22a30:	4a11      	ldr	r2, [pc, #68]	; (22a78 <nmi_get_chipid+0xf4>)
   22a32:	401a      	ands	r2, r3
   22a34:	4b07      	ldr	r3, [pc, #28]	; (22a54 <nmi_get_chipid+0xd0>)
   22a36:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22a38:	4b06      	ldr	r3, [pc, #24]	; (22a54 <nmi_get_chipid+0xd0>)
   22a3a:	681b      	ldr	r3, [r3, #0]
   22a3c:	22a0      	movs	r2, #160	; 0xa0
   22a3e:	02d2      	lsls	r2, r2, #11
   22a40:	431a      	orrs	r2, r3
   22a42:	4b04      	ldr	r3, [pc, #16]	; (22a54 <nmi_get_chipid+0xd0>)
   22a44:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   22a46:	4b03      	ldr	r3, [pc, #12]	; (22a54 <nmi_get_chipid+0xd0>)
   22a48:	681b      	ldr	r3, [r3, #0]
}
   22a4a:	0018      	movs	r0, r3
   22a4c:	46bd      	mov	sp, r7
   22a4e:	b002      	add	sp, #8
   22a50:	bd80      	pop	{r7, pc}
   22a52:	46c0      	nop			; (mov r8, r8)
   22a54:	200042a8 	.word	0x200042a8
   22a58:	00023085 	.word	0x00023085
   22a5c:	000013f4 	.word	0x000013f4
   22a60:	001002a0 	.word	0x001002a0
   22a64:	001002a1 	.word	0x001002a1
   22a68:	001002b0 	.word	0x001002b0
   22a6c:	001002b1 	.word	0x001002b1
   22a70:	001002b2 	.word	0x001002b2
   22a74:	001000f0 	.word	0x001000f0
   22a78:	fff0ffff 	.word	0xfff0ffff

00022a7c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22a7c:	b590      	push	{r4, r7, lr}
   22a7e:	b083      	sub	sp, #12
   22a80:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   22a82:	1dfb      	adds	r3, r7, #7
   22a84:	2200      	movs	r2, #0
   22a86:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22a88:	1dfc      	adds	r4, r7, #7
   22a8a:	003b      	movs	r3, r7
   22a8c:	0019      	movs	r1, r3
   22a8e:	2010      	movs	r0, #16
   22a90:	4b2e      	ldr	r3, [pc, #184]	; (22b4c <chip_sleep+0xd0>)
   22a92:	4798      	blx	r3
   22a94:	0003      	movs	r3, r0
   22a96:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22a98:	1dfb      	adds	r3, r7, #7
   22a9a:	781b      	ldrb	r3, [r3, #0]
   22a9c:	b25b      	sxtb	r3, r3
   22a9e:	2b00      	cmp	r3, #0
   22aa0:	d145      	bne.n	22b2e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   22aa2:	683b      	ldr	r3, [r7, #0]
   22aa4:	2201      	movs	r2, #1
   22aa6:	4013      	ands	r3, r2
   22aa8:	d000      	beq.n	22aac <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22aaa:	e7ed      	b.n	22a88 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22aac:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22aae:	1dfc      	adds	r4, r7, #7
   22ab0:	003b      	movs	r3, r7
   22ab2:	0019      	movs	r1, r3
   22ab4:	2001      	movs	r0, #1
   22ab6:	4b25      	ldr	r3, [pc, #148]	; (22b4c <chip_sleep+0xd0>)
   22ab8:	4798      	blx	r3
   22aba:	0003      	movs	r3, r0
   22abc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22abe:	1dfb      	adds	r3, r7, #7
   22ac0:	781b      	ldrb	r3, [r3, #0]
   22ac2:	b25b      	sxtb	r3, r3
   22ac4:	2b00      	cmp	r3, #0
   22ac6:	d134      	bne.n	22b32 <chip_sleep+0xb6>
	if(reg & NBIT1)
   22ac8:	683b      	ldr	r3, [r7, #0]
   22aca:	2202      	movs	r2, #2
   22acc:	4013      	ands	r3, r2
   22ace:	d010      	beq.n	22af2 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   22ad0:	683b      	ldr	r3, [r7, #0]
   22ad2:	2202      	movs	r2, #2
   22ad4:	4393      	bics	r3, r2
   22ad6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22ad8:	683b      	ldr	r3, [r7, #0]
   22ada:	1dfc      	adds	r4, r7, #7
   22adc:	0019      	movs	r1, r3
   22ade:	2001      	movs	r0, #1
   22ae0:	4b1b      	ldr	r3, [pc, #108]	; (22b50 <chip_sleep+0xd4>)
   22ae2:	4798      	blx	r3
   22ae4:	0003      	movs	r3, r0
   22ae6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22ae8:	1dfb      	adds	r3, r7, #7
   22aea:	781b      	ldrb	r3, [r3, #0]
   22aec:	b25b      	sxtb	r3, r3
   22aee:	2b00      	cmp	r3, #0
   22af0:	d121      	bne.n	22b36 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22af2:	1dfc      	adds	r4, r7, #7
   22af4:	003b      	movs	r3, r7
   22af6:	0019      	movs	r1, r3
   22af8:	200b      	movs	r0, #11
   22afa:	4b14      	ldr	r3, [pc, #80]	; (22b4c <chip_sleep+0xd0>)
   22afc:	4798      	blx	r3
   22afe:	0003      	movs	r3, r0
   22b00:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22b02:	1dfb      	adds	r3, r7, #7
   22b04:	781b      	ldrb	r3, [r3, #0]
   22b06:	b25b      	sxtb	r3, r3
   22b08:	2b00      	cmp	r3, #0
   22b0a:	d116      	bne.n	22b3a <chip_sleep+0xbe>
	if(reg & NBIT0)
   22b0c:	683b      	ldr	r3, [r7, #0]
   22b0e:	2201      	movs	r2, #1
   22b10:	4013      	ands	r3, r2
   22b12:	d013      	beq.n	22b3c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   22b14:	683b      	ldr	r3, [r7, #0]
   22b16:	2201      	movs	r2, #1
   22b18:	4393      	bics	r3, r2
   22b1a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22b1c:	683b      	ldr	r3, [r7, #0]
   22b1e:	1dfc      	adds	r4, r7, #7
   22b20:	0019      	movs	r1, r3
   22b22:	200b      	movs	r0, #11
   22b24:	4b0a      	ldr	r3, [pc, #40]	; (22b50 <chip_sleep+0xd4>)
   22b26:	4798      	blx	r3
   22b28:	0003      	movs	r3, r0
   22b2a:	7023      	strb	r3, [r4, #0]
   22b2c:	e006      	b.n	22b3c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22b2e:	46c0      	nop			; (mov r8, r8)
   22b30:	e004      	b.n	22b3c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22b32:	46c0      	nop			; (mov r8, r8)
   22b34:	e002      	b.n	22b3c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   22b36:	46c0      	nop			; (mov r8, r8)
   22b38:	e000      	b.n	22b3c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22b3a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22b3c:	1dfb      	adds	r3, r7, #7
   22b3e:	781b      	ldrb	r3, [r3, #0]
   22b40:	b25b      	sxtb	r3, r3
}
   22b42:	0018      	movs	r0, r3
   22b44:	46bd      	mov	sp, r7
   22b46:	b003      	add	sp, #12
   22b48:	bd90      	pop	{r4, r7, pc}
   22b4a:	46c0      	nop			; (mov r8, r8)
   22b4c:	00023085 	.word	0x00023085
   22b50:	000230a9 	.word	0x000230a9

00022b54 <chip_wake>:
sint8 chip_wake(void)
{
   22b54:	b590      	push	{r4, r7, lr}
   22b56:	b085      	sub	sp, #20
   22b58:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22b5a:	230f      	movs	r3, #15
   22b5c:	18fb      	adds	r3, r7, r3
   22b5e:	2200      	movs	r2, #0
   22b60:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   22b62:	2300      	movs	r3, #0
   22b64:	607b      	str	r3, [r7, #4]
   22b66:	2300      	movs	r3, #0
   22b68:	603b      	str	r3, [r7, #0]
   22b6a:	2300      	movs	r3, #0
   22b6c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22b6e:	230f      	movs	r3, #15
   22b70:	18fc      	adds	r4, r7, r3
   22b72:	1d3b      	adds	r3, r7, #4
   22b74:	0019      	movs	r1, r3
   22b76:	200b      	movs	r0, #11
   22b78:	4b4e      	ldr	r3, [pc, #312]	; (22cb4 <chip_wake+0x160>)
   22b7a:	4798      	blx	r3
   22b7c:	0003      	movs	r3, r0
   22b7e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22b80:	230f      	movs	r3, #15
   22b82:	18fb      	adds	r3, r7, r3
   22b84:	781b      	ldrb	r3, [r3, #0]
   22b86:	b25b      	sxtb	r3, r3
   22b88:	2b00      	cmp	r3, #0
   22b8a:	d000      	beq.n	22b8e <chip_wake+0x3a>
   22b8c:	e082      	b.n	22c94 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22b8e:	687b      	ldr	r3, [r7, #4]
   22b90:	2201      	movs	r2, #1
   22b92:	4013      	ands	r3, r2
   22b94:	d111      	bne.n	22bba <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   22b96:	687b      	ldr	r3, [r7, #4]
   22b98:	2201      	movs	r2, #1
   22b9a:	4313      	orrs	r3, r2
   22b9c:	220f      	movs	r2, #15
   22b9e:	18bc      	adds	r4, r7, r2
   22ba0:	0019      	movs	r1, r3
   22ba2:	200b      	movs	r0, #11
   22ba4:	4b44      	ldr	r3, [pc, #272]	; (22cb8 <chip_wake+0x164>)
   22ba6:	4798      	blx	r3
   22ba8:	0003      	movs	r3, r0
   22baa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22bac:	230f      	movs	r3, #15
   22bae:	18fb      	adds	r3, r7, r3
   22bb0:	781b      	ldrb	r3, [r3, #0]
   22bb2:	b25b      	sxtb	r3, r3
   22bb4:	2b00      	cmp	r3, #0
   22bb6:	d000      	beq.n	22bba <chip_wake+0x66>
   22bb8:	e06e      	b.n	22c98 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22bba:	230f      	movs	r3, #15
   22bbc:	18fc      	adds	r4, r7, r3
   22bbe:	1d3b      	adds	r3, r7, #4
   22bc0:	0019      	movs	r1, r3
   22bc2:	2001      	movs	r0, #1
   22bc4:	4b3b      	ldr	r3, [pc, #236]	; (22cb4 <chip_wake+0x160>)
   22bc6:	4798      	blx	r3
   22bc8:	0003      	movs	r3, r0
   22bca:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22bcc:	230f      	movs	r3, #15
   22bce:	18fb      	adds	r3, r7, r3
   22bd0:	781b      	ldrb	r3, [r3, #0]
   22bd2:	b25b      	sxtb	r3, r3
   22bd4:	2b00      	cmp	r3, #0
   22bd6:	d161      	bne.n	22c9c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22bd8:	687b      	ldr	r3, [r7, #4]
   22bda:	2202      	movs	r2, #2
   22bdc:	4013      	ands	r3, r2
   22bde:	d110      	bne.n	22c02 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22be0:	687b      	ldr	r3, [r7, #4]
   22be2:	2202      	movs	r2, #2
   22be4:	4313      	orrs	r3, r2
   22be6:	220f      	movs	r2, #15
   22be8:	18bc      	adds	r4, r7, r2
   22bea:	0019      	movs	r1, r3
   22bec:	2001      	movs	r0, #1
   22bee:	4b32      	ldr	r3, [pc, #200]	; (22cb8 <chip_wake+0x164>)
   22bf0:	4798      	blx	r3
   22bf2:	0003      	movs	r3, r0
   22bf4:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22bf6:	230f      	movs	r3, #15
   22bf8:	18fb      	adds	r3, r7, r3
   22bfa:	781b      	ldrb	r3, [r3, #0]
   22bfc:	b25b      	sxtb	r3, r3
   22bfe:	2b00      	cmp	r3, #0
   22c00:	d14e      	bne.n	22ca0 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   22c02:	230f      	movs	r3, #15
   22c04:	18fc      	adds	r4, r7, r3
   22c06:	003b      	movs	r3, r7
   22c08:	0019      	movs	r1, r3
   22c0a:	200f      	movs	r0, #15
   22c0c:	4b29      	ldr	r3, [pc, #164]	; (22cb4 <chip_wake+0x160>)
   22c0e:	4798      	blx	r3
   22c10:	0003      	movs	r3, r0
   22c12:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22c14:	230f      	movs	r3, #15
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	b25b      	sxtb	r3, r3
   22c1c:	2b00      	cmp	r3, #0
   22c1e:	d014      	beq.n	22c4a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22c20:	23a8      	movs	r3, #168	; 0xa8
   22c22:	005a      	lsls	r2, r3, #1
   22c24:	4925      	ldr	r1, [pc, #148]	; (22cbc <chip_wake+0x168>)
   22c26:	4b26      	ldr	r3, [pc, #152]	; (22cc0 <chip_wake+0x16c>)
   22c28:	0018      	movs	r0, r3
   22c2a:	4b26      	ldr	r3, [pc, #152]	; (22cc4 <chip_wake+0x170>)
   22c2c:	4798      	blx	r3
   22c2e:	230f      	movs	r3, #15
   22c30:	18fb      	adds	r3, r7, r3
   22c32:	2100      	movs	r1, #0
   22c34:	5659      	ldrsb	r1, [r3, r1]
   22c36:	683a      	ldr	r2, [r7, #0]
   22c38:	4b23      	ldr	r3, [pc, #140]	; (22cc8 <chip_wake+0x174>)
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b21      	ldr	r3, [pc, #132]	; (22cc4 <chip_wake+0x170>)
   22c3e:	4798      	blx	r3
   22c40:	4b22      	ldr	r3, [pc, #136]	; (22ccc <chip_wake+0x178>)
   22c42:	0018      	movs	r0, r3
   22c44:	4b1f      	ldr	r3, [pc, #124]	; (22cc4 <chip_wake+0x170>)
   22c46:	4798      	blx	r3
			goto _WAKE_EXIT;
   22c48:	e02b      	b.n	22ca2 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22c4a:	683b      	ldr	r3, [r7, #0]
   22c4c:	2204      	movs	r2, #4
   22c4e:	4013      	ands	r3, r2
   22c50:	d11c      	bne.n	22c8c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   22c52:	2002      	movs	r0, #2
   22c54:	4b1e      	ldr	r3, [pc, #120]	; (22cd0 <chip_wake+0x17c>)
   22c56:	4798      	blx	r3
		trials++;
   22c58:	68bb      	ldr	r3, [r7, #8]
   22c5a:	3301      	adds	r3, #1
   22c5c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22c5e:	68bb      	ldr	r3, [r7, #8]
   22c60:	2b04      	cmp	r3, #4
   22c62:	d9ce      	bls.n	22c02 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22c64:	23ad      	movs	r3, #173	; 0xad
   22c66:	005a      	lsls	r2, r3, #1
   22c68:	4914      	ldr	r1, [pc, #80]	; (22cbc <chip_wake+0x168>)
   22c6a:	4b15      	ldr	r3, [pc, #84]	; (22cc0 <chip_wake+0x16c>)
   22c6c:	0018      	movs	r0, r3
   22c6e:	4b15      	ldr	r3, [pc, #84]	; (22cc4 <chip_wake+0x170>)
   22c70:	4798      	blx	r3
   22c72:	4b18      	ldr	r3, [pc, #96]	; (22cd4 <chip_wake+0x180>)
   22c74:	0018      	movs	r0, r3
   22c76:	4b13      	ldr	r3, [pc, #76]	; (22cc4 <chip_wake+0x170>)
   22c78:	4798      	blx	r3
   22c7a:	4b14      	ldr	r3, [pc, #80]	; (22ccc <chip_wake+0x178>)
   22c7c:	0018      	movs	r0, r3
   22c7e:	4b11      	ldr	r3, [pc, #68]	; (22cc4 <chip_wake+0x170>)
   22c80:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   22c82:	230f      	movs	r3, #15
   22c84:	18fb      	adds	r3, r7, r3
   22c86:	22fc      	movs	r2, #252	; 0xfc
   22c88:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22c8a:	e00a      	b.n	22ca2 <chip_wake+0x14e>
			break;
   22c8c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22c8e:	4b12      	ldr	r3, [pc, #72]	; (22cd8 <chip_wake+0x184>)
   22c90:	4798      	blx	r3
   22c92:	e006      	b.n	22ca2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22c94:	46c0      	nop			; (mov r8, r8)
   22c96:	e004      	b.n	22ca2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22c98:	46c0      	nop			; (mov r8, r8)
   22c9a:	e002      	b.n	22ca2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22c9c:	46c0      	nop			; (mov r8, r8)
   22c9e:	e000      	b.n	22ca2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22ca0:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   22ca2:	230f      	movs	r3, #15
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	781b      	ldrb	r3, [r3, #0]
   22ca8:	b25b      	sxtb	r3, r3
}
   22caa:	0018      	movs	r0, r3
   22cac:	46bd      	mov	sp, r7
   22cae:	b005      	add	sp, #20
   22cb0:	bd90      	pop	{r4, r7, pc}
   22cb2:	46c0      	nop			; (mov r8, r8)
   22cb4:	00023085 	.word	0x00023085
   22cb8:	000230a9 	.word	0x000230a9
   22cbc:	00039138 	.word	0x00039138
   22cc0:	000390ac 	.word	0x000390ac
   22cc4:	0001e399 	.word	0x0001e399
   22cc8:	000390c0 	.word	0x000390c0
   22ccc:	000390d8 	.word	0x000390d8
   22cd0:	000207ed 	.word	0x000207ed
   22cd4:	000390dc 	.word	0x000390dc
   22cd8:	00023045 	.word	0x00023045

00022cdc <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22cdc:	b580      	push	{r7, lr}
   22cde:	b088      	sub	sp, #32
   22ce0:	af00      	add	r7, sp, #0
   22ce2:	0002      	movs	r2, r0
   22ce4:	1dfb      	adds	r3, r7, #7
   22ce6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22ce8:	2313      	movs	r3, #19
   22cea:	18fb      	adds	r3, r7, r3
   22cec:	2200      	movs	r2, #0
   22cee:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22cf0:	2300      	movs	r3, #0
   22cf2:	61fb      	str	r3, [r7, #28]
   22cf4:	2300      	movs	r3, #0
   22cf6:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22cf8:	2300      	movs	r3, #0
   22cfa:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22cfc:	4b4a      	ldr	r3, [pc, #296]	; (22e28 <wait_for_bootrom+0x14c>)
   22cfe:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22d00:	2300      	movs	r3, #0
   22d02:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22d04:	4b49      	ldr	r3, [pc, #292]	; (22e2c <wait_for_bootrom+0x150>)
   22d06:	0018      	movs	r0, r3
   22d08:	4b49      	ldr	r3, [pc, #292]	; (22e30 <wait_for_bootrom+0x154>)
   22d0a:	4798      	blx	r3
   22d0c:	0003      	movs	r3, r0
   22d0e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   22d10:	69fb      	ldr	r3, [r7, #28]
   22d12:	2b00      	cmp	r3, #0
   22d14:	db03      	blt.n	22d1e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22d16:	2001      	movs	r0, #1
   22d18:	4b46      	ldr	r3, [pc, #280]	; (22e34 <wait_for_bootrom+0x158>)
   22d1a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22d1c:	e7f2      	b.n	22d04 <wait_for_bootrom+0x28>
			break;
   22d1e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22d20:	4b45      	ldr	r3, [pc, #276]	; (22e38 <wait_for_bootrom+0x15c>)
   22d22:	0018      	movs	r0, r3
   22d24:	4b42      	ldr	r3, [pc, #264]	; (22e30 <wait_for_bootrom+0x154>)
   22d26:	4798      	blx	r3
   22d28:	0003      	movs	r3, r0
   22d2a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22d2c:	69fb      	ldr	r3, [r7, #28]
   22d2e:	2201      	movs	r2, #1
   22d30:	4013      	ands	r3, r2
   22d32:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22d34:	69fb      	ldr	r3, [r7, #28]
   22d36:	2b00      	cmp	r3, #0
   22d38:	d112      	bne.n	22d60 <wait_for_bootrom+0x84>
	{
		reg = 0;
   22d3a:	2300      	movs	r3, #0
   22d3c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22d3e:	e00b      	b.n	22d58 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22d40:	2001      	movs	r0, #1
   22d42:	4b3c      	ldr	r3, [pc, #240]	; (22e34 <wait_for_bootrom+0x158>)
   22d44:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22d46:	4b3d      	ldr	r3, [pc, #244]	; (22e3c <wait_for_bootrom+0x160>)
   22d48:	0018      	movs	r0, r3
   22d4a:	4b39      	ldr	r3, [pc, #228]	; (22e30 <wait_for_bootrom+0x154>)
   22d4c:	4798      	blx	r3
   22d4e:	0003      	movs	r3, r0
   22d50:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   22d52:	69bb      	ldr	r3, [r7, #24]
   22d54:	3301      	adds	r3, #1
   22d56:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22d58:	69fb      	ldr	r3, [r7, #28]
   22d5a:	4a39      	ldr	r2, [pc, #228]	; (22e40 <wait_for_bootrom+0x164>)
   22d5c:	4293      	cmp	r3, r2
   22d5e:	d1ef      	bne.n	22d40 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   22d60:	1dfb      	adds	r3, r7, #7
   22d62:	781b      	ldrb	r3, [r3, #0]
   22d64:	2b02      	cmp	r3, #2
   22d66:	d10d      	bne.n	22d84 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22d68:	4a36      	ldr	r2, [pc, #216]	; (22e44 <wait_for_bootrom+0x168>)
   22d6a:	4b37      	ldr	r3, [pc, #220]	; (22e48 <wait_for_bootrom+0x16c>)
   22d6c:	0011      	movs	r1, r2
   22d6e:	0018      	movs	r0, r3
   22d70:	4b36      	ldr	r3, [pc, #216]	; (22e4c <wait_for_bootrom+0x170>)
   22d72:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22d74:	2380      	movs	r3, #128	; 0x80
   22d76:	035b      	lsls	r3, r3, #13
   22d78:	4a35      	ldr	r2, [pc, #212]	; (22e50 <wait_for_bootrom+0x174>)
   22d7a:	0019      	movs	r1, r3
   22d7c:	0010      	movs	r0, r2
   22d7e:	4b33      	ldr	r3, [pc, #204]	; (22e4c <wait_for_bootrom+0x170>)
   22d80:	4798      	blx	r3
   22d82:	e022      	b.n	22dca <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   22d84:	1dfb      	adds	r3, r7, #7
   22d86:	781b      	ldrb	r3, [r3, #0]
   22d88:	2b03      	cmp	r3, #3
   22d8a:	d10b      	bne.n	22da4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22d8c:	4a2d      	ldr	r2, [pc, #180]	; (22e44 <wait_for_bootrom+0x168>)
   22d8e:	4b2e      	ldr	r3, [pc, #184]	; (22e48 <wait_for_bootrom+0x16c>)
   22d90:	0011      	movs	r1, r2
   22d92:	0018      	movs	r0, r3
   22d94:	4b2d      	ldr	r3, [pc, #180]	; (22e4c <wait_for_bootrom+0x170>)
   22d96:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22d98:	4b2d      	ldr	r3, [pc, #180]	; (22e50 <wait_for_bootrom+0x174>)
   22d9a:	2100      	movs	r1, #0
   22d9c:	0018      	movs	r0, r3
   22d9e:	4b2b      	ldr	r3, [pc, #172]	; (22e4c <wait_for_bootrom+0x170>)
   22da0:	4798      	blx	r3
   22da2:	e012      	b.n	22dca <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   22da4:	1dfb      	adds	r3, r7, #7
   22da6:	781b      	ldrb	r3, [r3, #0]
   22da8:	2b04      	cmp	r3, #4
   22daa:	d108      	bne.n	22dbe <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22dac:	2380      	movs	r3, #128	; 0x80
   22dae:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22db0:	68fb      	ldr	r3, [r7, #12]
   22db2:	4a27      	ldr	r2, [pc, #156]	; (22e50 <wait_for_bootrom+0x174>)
   22db4:	0019      	movs	r1, r3
   22db6:	0010      	movs	r0, r2
   22db8:	4b24      	ldr	r3, [pc, #144]	; (22e4c <wait_for_bootrom+0x170>)
   22dba:	4798      	blx	r3
   22dbc:	e005      	b.n	22dca <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22dbe:	68fb      	ldr	r3, [r7, #12]
   22dc0:	4a23      	ldr	r2, [pc, #140]	; (22e50 <wait_for_bootrom+0x174>)
   22dc2:	0019      	movs	r1, r3
   22dc4:	0010      	movs	r0, r2
   22dc6:	4b21      	ldr	r3, [pc, #132]	; (22e4c <wait_for_bootrom+0x170>)
   22dc8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   22dca:	4b22      	ldr	r3, [pc, #136]	; (22e54 <wait_for_bootrom+0x178>)
   22dcc:	4798      	blx	r3
   22dce:	0003      	movs	r3, r0
   22dd0:	051b      	lsls	r3, r3, #20
   22dd2:	0d1b      	lsrs	r3, r3, #20
   22dd4:	4a20      	ldr	r2, [pc, #128]	; (22e58 <wait_for_bootrom+0x17c>)
   22dd6:	4293      	cmp	r3, r2
   22dd8:	d906      	bls.n	22de8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   22dda:	697b      	ldr	r3, [r7, #20]
   22ddc:	2202      	movs	r2, #2
   22dde:	4313      	orrs	r3, r2
   22de0:	0018      	movs	r0, r3
   22de2:	4b1e      	ldr	r3, [pc, #120]	; (22e5c <wait_for_bootrom+0x180>)
   22de4:	4798      	blx	r3
   22de6:	e003      	b.n	22df0 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22de8:	697b      	ldr	r3, [r7, #20]
   22dea:	0018      	movs	r0, r3
   22dec:	4b1b      	ldr	r3, [pc, #108]	; (22e5c <wait_for_bootrom+0x180>)
   22dee:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22df0:	4b1b      	ldr	r3, [pc, #108]	; (22e60 <wait_for_bootrom+0x184>)
   22df2:	0018      	movs	r0, r3
   22df4:	4b1b      	ldr	r3, [pc, #108]	; (22e64 <wait_for_bootrom+0x188>)
   22df6:	4798      	blx	r3
   22df8:	68fa      	ldr	r2, [r7, #12]
   22dfa:	4b1b      	ldr	r3, [pc, #108]	; (22e68 <wait_for_bootrom+0x18c>)
   22dfc:	0011      	movs	r1, r2
   22dfe:	0018      	movs	r0, r3
   22e00:	4b18      	ldr	r3, [pc, #96]	; (22e64 <wait_for_bootrom+0x188>)
   22e02:	4798      	blx	r3
   22e04:	4b19      	ldr	r3, [pc, #100]	; (22e6c <wait_for_bootrom+0x190>)
   22e06:	0018      	movs	r0, r3
   22e08:	4b16      	ldr	r3, [pc, #88]	; (22e64 <wait_for_bootrom+0x188>)
   22e0a:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22e0c:	4a18      	ldr	r2, [pc, #96]	; (22e70 <wait_for_bootrom+0x194>)
   22e0e:	4b0b      	ldr	r3, [pc, #44]	; (22e3c <wait_for_bootrom+0x160>)
   22e10:	0011      	movs	r1, r2
   22e12:	0018      	movs	r0, r3
   22e14:	4b0d      	ldr	r3, [pc, #52]	; (22e4c <wait_for_bootrom+0x170>)
   22e16:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22e18:	2313      	movs	r3, #19
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	781b      	ldrb	r3, [r3, #0]
   22e1e:	b25b      	sxtb	r3, r3
}
   22e20:	0018      	movs	r0, r3
   22e22:	46bd      	mov	sp, r7
   22e24:	b008      	add	sp, #32
   22e26:	bd80      	pop	{r7, pc}
   22e28:	13301354 	.word	0x13301354
   22e2c:	00001014 	.word	0x00001014
   22e30:	00023065 	.word	0x00023065
   22e34:	000207ed 	.word	0x000207ed
   22e38:	000207bc 	.word	0x000207bc
   22e3c:	000c000c 	.word	0x000c000c
   22e40:	10add09e 	.word	0x10add09e
   22e44:	3c1cd57d 	.word	0x3c1cd57d
   22e48:	000207ac 	.word	0x000207ac
   22e4c:	000230a9 	.word	0x000230a9
   22e50:	0000108c 	.word	0x0000108c
   22e54:	00022985 	.word	0x00022985
   22e58:	0000039f 	.word	0x0000039f
   22e5c:	00022855 	.word	0x00022855
   22e60:	000390f8 	.word	0x000390f8
   22e64:	0001e399 	.word	0x0001e399
   22e68:	00039104 	.word	0x00039104
   22e6c:	000390d8 	.word	0x000390d8
   22e70:	ef522f61 	.word	0xef522f61

00022e74 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   22e74:	b580      	push	{r7, lr}
   22e76:	b088      	sub	sp, #32
   22e78:	af00      	add	r7, sp, #0
   22e7a:	0002      	movs	r2, r0
   22e7c:	1dfb      	adds	r3, r7, #7
   22e7e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22e80:	231f      	movs	r3, #31
   22e82:	18fb      	adds	r3, r7, r3
   22e84:	2200      	movs	r2, #0
   22e86:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22e88:	2300      	movs	r3, #0
   22e8a:	61bb      	str	r3, [r7, #24]
   22e8c:	2300      	movs	r3, #0
   22e8e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   22e90:	2301      	movs	r3, #1
   22e92:	425b      	negs	r3, r3
   22e94:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   22e96:	4b1d      	ldr	r3, [pc, #116]	; (22f0c <wait_for_firmware_start+0x98>)
   22e98:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   22e9a:	4b1d      	ldr	r3, [pc, #116]	; (22f10 <wait_for_firmware_start+0x9c>)
   22e9c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   22e9e:	1dfb      	adds	r3, r7, #7
   22ea0:	781b      	ldrb	r3, [r3, #0]
   22ea2:	2b02      	cmp	r3, #2
   22ea4:	d003      	beq.n	22eae <wait_for_firmware_start+0x3a>
   22ea6:	1dfb      	adds	r3, r7, #7
   22ea8:	781b      	ldrb	r3, [r3, #0]
   22eaa:	2b03      	cmp	r3, #3
   22eac:	d119      	bne.n	22ee2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   22eae:	4b19      	ldr	r3, [pc, #100]	; (22f14 <wait_for_firmware_start+0xa0>)
   22eb0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   22eb2:	4b19      	ldr	r3, [pc, #100]	; (22f18 <wait_for_firmware_start+0xa4>)
   22eb4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   22eb6:	e014      	b.n	22ee2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   22eb8:	2002      	movs	r0, #2
   22eba:	4b18      	ldr	r3, [pc, #96]	; (22f1c <wait_for_firmware_start+0xa8>)
   22ebc:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   22ebe:	68fb      	ldr	r3, [r7, #12]
   22ec0:	0018      	movs	r0, r3
   22ec2:	4b17      	ldr	r3, [pc, #92]	; (22f20 <wait_for_firmware_start+0xac>)
   22ec4:	4798      	blx	r3
   22ec6:	0003      	movs	r3, r0
   22ec8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   22eca:	697b      	ldr	r3, [r7, #20]
   22ecc:	3301      	adds	r3, #1
   22ece:	617b      	str	r3, [r7, #20]
   22ed0:	697a      	ldr	r2, [r7, #20]
   22ed2:	693b      	ldr	r3, [r7, #16]
   22ed4:	429a      	cmp	r2, r3
   22ed6:	d304      	bcc.n	22ee2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   22ed8:	231f      	movs	r3, #31
   22eda:	18fb      	adds	r3, r7, r3
   22edc:	22fb      	movs	r2, #251	; 0xfb
   22ede:	701a      	strb	r2, [r3, #0]
			goto ERR;
   22ee0:	e00c      	b.n	22efc <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   22ee2:	68ba      	ldr	r2, [r7, #8]
   22ee4:	69bb      	ldr	r3, [r7, #24]
   22ee6:	429a      	cmp	r2, r3
   22ee8:	d1e6      	bne.n	22eb8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22eea:	68bb      	ldr	r3, [r7, #8]
   22eec:	4a08      	ldr	r2, [pc, #32]	; (22f10 <wait_for_firmware_start+0x9c>)
   22eee:	4293      	cmp	r3, r2
   22ef0:	d104      	bne.n	22efc <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   22ef2:	4b06      	ldr	r3, [pc, #24]	; (22f0c <wait_for_firmware_start+0x98>)
   22ef4:	2100      	movs	r1, #0
   22ef6:	0018      	movs	r0, r3
   22ef8:	4b0a      	ldr	r3, [pc, #40]	; (22f24 <wait_for_firmware_start+0xb0>)
   22efa:	4798      	blx	r3
	}
ERR:
	return ret;
   22efc:	231f      	movs	r3, #31
   22efe:	18fb      	adds	r3, r7, r3
   22f00:	781b      	ldrb	r3, [r3, #0]
   22f02:	b25b      	sxtb	r3, r3
}
   22f04:	0018      	movs	r0, r3
   22f06:	46bd      	mov	sp, r7
   22f08:	b008      	add	sp, #32
   22f0a:	bd80      	pop	{r7, pc}
   22f0c:	0000108c 	.word	0x0000108c
   22f10:	02532636 	.word	0x02532636
   22f14:	000207ac 	.word	0x000207ac
   22f18:	d75dc1c3 	.word	0xd75dc1c3
   22f1c:	000207ed 	.word	0x000207ed
   22f20:	00023065 	.word	0x00023065
   22f24:	000230a9 	.word	0x000230a9

00022f28 <chip_deinit>:

sint8 chip_deinit(void)
{
   22f28:	b590      	push	{r4, r7, lr}
   22f2a:	b083      	sub	sp, #12
   22f2c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22f2e:	2300      	movs	r3, #0
   22f30:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   22f32:	1dfc      	adds	r4, r7, #7
   22f34:	003a      	movs	r2, r7
   22f36:	23a0      	movs	r3, #160	; 0xa0
   22f38:	015b      	lsls	r3, r3, #5
   22f3a:	0011      	movs	r1, r2
   22f3c:	0018      	movs	r0, r3
   22f3e:	4b20      	ldr	r3, [pc, #128]	; (22fc0 <chip_deinit+0x98>)
   22f40:	4798      	blx	r3
   22f42:	0003      	movs	r3, r0
   22f44:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22f46:	1dfb      	adds	r3, r7, #7
   22f48:	781b      	ldrb	r3, [r3, #0]
   22f4a:	b25b      	sxtb	r3, r3
   22f4c:	2b00      	cmp	r3, #0
   22f4e:	d00e      	beq.n	22f6e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22f50:	4a1c      	ldr	r2, [pc, #112]	; (22fc4 <chip_deinit+0x9c>)
   22f52:	491d      	ldr	r1, [pc, #116]	; (22fc8 <chip_deinit+0xa0>)
   22f54:	4b1d      	ldr	r3, [pc, #116]	; (22fcc <chip_deinit+0xa4>)
   22f56:	0018      	movs	r0, r3
   22f58:	4b1d      	ldr	r3, [pc, #116]	; (22fd0 <chip_deinit+0xa8>)
   22f5a:	4798      	blx	r3
   22f5c:	4b1d      	ldr	r3, [pc, #116]	; (22fd4 <chip_deinit+0xac>)
   22f5e:	0018      	movs	r0, r3
   22f60:	4b1b      	ldr	r3, [pc, #108]	; (22fd0 <chip_deinit+0xa8>)
   22f62:	4798      	blx	r3
   22f64:	4b1c      	ldr	r3, [pc, #112]	; (22fd8 <chip_deinit+0xb0>)
   22f66:	0018      	movs	r0, r3
   22f68:	4b19      	ldr	r3, [pc, #100]	; (22fd0 <chip_deinit+0xa8>)
   22f6a:	4798      	blx	r3
		goto ERR1;
   22f6c:	e021      	b.n	22fb2 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22f6e:	683b      	ldr	r3, [r7, #0]
   22f70:	4a1a      	ldr	r2, [pc, #104]	; (22fdc <chip_deinit+0xb4>)
   22f72:	4013      	ands	r3, r2
   22f74:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   22f76:	683a      	ldr	r2, [r7, #0]
   22f78:	1dfc      	adds	r4, r7, #7
   22f7a:	23a0      	movs	r3, #160	; 0xa0
   22f7c:	015b      	lsls	r3, r3, #5
   22f7e:	0011      	movs	r1, r2
   22f80:	0018      	movs	r0, r3
   22f82:	4b17      	ldr	r3, [pc, #92]	; (22fe0 <chip_deinit+0xb8>)
   22f84:	4798      	blx	r3
   22f86:	0003      	movs	r3, r0
   22f88:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22f8a:	1dfb      	adds	r3, r7, #7
   22f8c:	781b      	ldrb	r3, [r3, #0]
   22f8e:	b25b      	sxtb	r3, r3
   22f90:	2b00      	cmp	r3, #0
   22f92:	d00e      	beq.n	22fb2 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   22f94:	4a13      	ldr	r2, [pc, #76]	; (22fe4 <chip_deinit+0xbc>)
   22f96:	490c      	ldr	r1, [pc, #48]	; (22fc8 <chip_deinit+0xa0>)
   22f98:	4b0c      	ldr	r3, [pc, #48]	; (22fcc <chip_deinit+0xa4>)
   22f9a:	0018      	movs	r0, r3
   22f9c:	4b0c      	ldr	r3, [pc, #48]	; (22fd0 <chip_deinit+0xa8>)
   22f9e:	4798      	blx	r3
   22fa0:	4b0c      	ldr	r3, [pc, #48]	; (22fd4 <chip_deinit+0xac>)
   22fa2:	0018      	movs	r0, r3
   22fa4:	4b0a      	ldr	r3, [pc, #40]	; (22fd0 <chip_deinit+0xa8>)
   22fa6:	4798      	blx	r3
   22fa8:	4b0b      	ldr	r3, [pc, #44]	; (22fd8 <chip_deinit+0xb0>)
   22faa:	0018      	movs	r0, r3
   22fac:	4b08      	ldr	r3, [pc, #32]	; (22fd0 <chip_deinit+0xa8>)
   22fae:	4798      	blx	r3
		goto ERR1;
   22fb0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22fb2:	1dfb      	adds	r3, r7, #7
   22fb4:	781b      	ldrb	r3, [r3, #0]
   22fb6:	b25b      	sxtb	r3, r3
}
   22fb8:	0018      	movs	r0, r3
   22fba:	46bd      	mov	sp, r7
   22fbc:	b003      	add	sp, #12
   22fbe:	bd90      	pop	{r4, r7, pc}
   22fc0:	00023085 	.word	0x00023085
   22fc4:	00000201 	.word	0x00000201
   22fc8:	00039144 	.word	0x00039144
   22fcc:	000390ac 	.word	0x000390ac
   22fd0:	0001e399 	.word	0x0001e399
   22fd4:	0003911c 	.word	0x0003911c
   22fd8:	000390d8 	.word	0x000390d8
   22fdc:	fffffbff 	.word	0xfffffbff
   22fe0:	000230a9 	.word	0x000230a9
   22fe4:	00000207 	.word	0x00000207

00022fe8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22fe8:	b590      	push	{r4, r7, lr}
   22fea:	b085      	sub	sp, #20
   22fec:	af00      	add	r7, sp, #0
   22fee:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22ff0:	230f      	movs	r3, #15
   22ff2:	18fb      	adds	r3, r7, r3
   22ff4:	2200      	movs	r2, #0
   22ff6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22ff8:	230f      	movs	r3, #15
   22ffa:	18fc      	adds	r4, r7, r3
   22ffc:	687b      	ldr	r3, [r7, #4]
   22ffe:	0018      	movs	r0, r3
   23000:	4b05      	ldr	r3, [pc, #20]	; (23018 <nm_bus_iface_init+0x30>)
   23002:	4798      	blx	r3
   23004:	0003      	movs	r3, r0
   23006:	7023      	strb	r3, [r4, #0]
	return ret;
   23008:	230f      	movs	r3, #15
   2300a:	18fb      	adds	r3, r7, r3
   2300c:	781b      	ldrb	r3, [r3, #0]
   2300e:	b25b      	sxtb	r3, r3
}
   23010:	0018      	movs	r0, r3
   23012:	46bd      	mov	sp, r7
   23014:	b005      	add	sp, #20
   23016:	bd90      	pop	{r4, r7, pc}
   23018:	00020ea9 	.word	0x00020ea9

0002301c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   2301c:	b590      	push	{r4, r7, lr}
   2301e:	b083      	sub	sp, #12
   23020:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23022:	1dfb      	adds	r3, r7, #7
   23024:	2200      	movs	r2, #0
   23026:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23028:	1dfc      	adds	r4, r7, #7
   2302a:	4b05      	ldr	r3, [pc, #20]	; (23040 <nm_bus_iface_deinit+0x24>)
   2302c:	4798      	blx	r3
   2302e:	0003      	movs	r3, r0
   23030:	7023      	strb	r3, [r4, #0]

	return ret;
   23032:	1dfb      	adds	r3, r7, #7
   23034:	781b      	ldrb	r3, [r3, #0]
   23036:	b25b      	sxtb	r3, r3
}
   23038:	0018      	movs	r0, r3
   2303a:	46bd      	mov	sp, r7
   2303c:	b003      	add	sp, #12
   2303e:	bd90      	pop	{r4, r7, pc}
   23040:	00021021 	.word	0x00021021

00023044 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23044:	b580      	push	{r7, lr}
   23046:	b082      	sub	sp, #8
   23048:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2304a:	1dfb      	adds	r3, r7, #7
   2304c:	2200      	movs	r2, #0
   2304e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   23050:	4b03      	ldr	r3, [pc, #12]	; (23060 <nm_bus_reset+0x1c>)
   23052:	4798      	blx	r3
   23054:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23056:	0018      	movs	r0, r3
   23058:	46bd      	mov	sp, r7
   2305a:	b002      	add	sp, #8
   2305c:	bd80      	pop	{r7, pc}
   2305e:	46c0      	nop			; (mov r8, r8)
   23060:	00024e71 	.word	0x00024e71

00023064 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23064:	b580      	push	{r7, lr}
   23066:	b082      	sub	sp, #8
   23068:	af00      	add	r7, sp, #0
   2306a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   2306c:	687b      	ldr	r3, [r7, #4]
   2306e:	0018      	movs	r0, r3
   23070:	4b03      	ldr	r3, [pc, #12]	; (23080 <nm_read_reg+0x1c>)
   23072:	4798      	blx	r3
   23074:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23076:	0018      	movs	r0, r3
   23078:	46bd      	mov	sp, r7
   2307a:	b002      	add	sp, #8
   2307c:	bd80      	pop	{r7, pc}
   2307e:	46c0      	nop			; (mov r8, r8)
   23080:	00025005 	.word	0x00025005

00023084 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23084:	b580      	push	{r7, lr}
   23086:	b082      	sub	sp, #8
   23088:	af00      	add	r7, sp, #0
   2308a:	6078      	str	r0, [r7, #4]
   2308c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   2308e:	683a      	ldr	r2, [r7, #0]
   23090:	687b      	ldr	r3, [r7, #4]
   23092:	0011      	movs	r1, r2
   23094:	0018      	movs	r0, r3
   23096:	4b03      	ldr	r3, [pc, #12]	; (230a4 <nm_read_reg_with_ret+0x20>)
   23098:	4798      	blx	r3
   2309a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   2309c:	0018      	movs	r0, r3
   2309e:	46bd      	mov	sp, r7
   230a0:	b002      	add	sp, #8
   230a2:	bd80      	pop	{r7, pc}
   230a4:	00025029 	.word	0x00025029

000230a8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   230a8:	b580      	push	{r7, lr}
   230aa:	b082      	sub	sp, #8
   230ac:	af00      	add	r7, sp, #0
   230ae:	6078      	str	r0, [r7, #4]
   230b0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   230b2:	683a      	ldr	r2, [r7, #0]
   230b4:	687b      	ldr	r3, [r7, #4]
   230b6:	0011      	movs	r1, r2
   230b8:	0018      	movs	r0, r3
   230ba:	4b03      	ldr	r3, [pc, #12]	; (230c8 <nm_write_reg+0x20>)
   230bc:	4798      	blx	r3
   230be:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   230c0:	0018      	movs	r0, r3
   230c2:	46bd      	mov	sp, r7
   230c4:	b002      	add	sp, #8
   230c6:	bd80      	pop	{r7, pc}
   230c8:	00025079 	.word	0x00025079

000230cc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   230cc:	b580      	push	{r7, lr}
   230ce:	b084      	sub	sp, #16
   230d0:	af00      	add	r7, sp, #0
   230d2:	60f8      	str	r0, [r7, #12]
   230d4:	60b9      	str	r1, [r7, #8]
   230d6:	1dbb      	adds	r3, r7, #6
   230d8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   230da:	1dbb      	adds	r3, r7, #6
   230dc:	881a      	ldrh	r2, [r3, #0]
   230de:	68b9      	ldr	r1, [r7, #8]
   230e0:	68fb      	ldr	r3, [r7, #12]
   230e2:	0018      	movs	r0, r3
   230e4:	4b03      	ldr	r3, [pc, #12]	; (230f4 <p_nm_read_block+0x28>)
   230e6:	4798      	blx	r3
   230e8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   230ea:	0018      	movs	r0, r3
   230ec:	46bd      	mov	sp, r7
   230ee:	b004      	add	sp, #16
   230f0:	bd80      	pop	{r7, pc}
   230f2:	46c0      	nop			; (mov r8, r8)
   230f4:	000250c9 	.word	0x000250c9

000230f8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   230f8:	b580      	push	{r7, lr}
   230fa:	b086      	sub	sp, #24
   230fc:	af00      	add	r7, sp, #0
   230fe:	60f8      	str	r0, [r7, #12]
   23100:	60b9      	str	r1, [r7, #8]
   23102:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23104:	4b2d      	ldr	r3, [pc, #180]	; (231bc <nm_read_block+0xc4>)
   23106:	881a      	ldrh	r2, [r3, #0]
   23108:	2310      	movs	r3, #16
   2310a:	18fb      	adds	r3, r7, r3
   2310c:	3a08      	subs	r2, #8
   2310e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23110:	2300      	movs	r3, #0
   23112:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23114:	2313      	movs	r3, #19
   23116:	18fb      	adds	r3, r7, r3
   23118:	2200      	movs	r2, #0
   2311a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   2311c:	2310      	movs	r3, #16
   2311e:	18fb      	adds	r3, r7, r3
   23120:	881a      	ldrh	r2, [r3, #0]
   23122:	687b      	ldr	r3, [r7, #4]
   23124:	429a      	cmp	r2, r3
   23126:	d313      	bcc.n	23150 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23128:	68ba      	ldr	r2, [r7, #8]
   2312a:	697b      	ldr	r3, [r7, #20]
   2312c:	18d1      	adds	r1, r2, r3
   2312e:	687b      	ldr	r3, [r7, #4]
   23130:	b29a      	uxth	r2, r3
   23132:	68fb      	ldr	r3, [r7, #12]
   23134:	0018      	movs	r0, r3
   23136:	4b22      	ldr	r3, [pc, #136]	; (231c0 <nm_read_block+0xc8>)
   23138:	4798      	blx	r3
   2313a:	0003      	movs	r3, r0
   2313c:	b2da      	uxtb	r2, r3
   2313e:	2313      	movs	r3, #19
   23140:	18fb      	adds	r3, r7, r3
   23142:	781b      	ldrb	r3, [r3, #0]
   23144:	18d3      	adds	r3, r2, r3
   23146:	b2da      	uxtb	r2, r3
   23148:	2313      	movs	r3, #19
   2314a:	18fb      	adds	r3, r7, r3
   2314c:	701a      	strb	r2, [r3, #0]
			break;
   2314e:	e02d      	b.n	231ac <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23150:	68ba      	ldr	r2, [r7, #8]
   23152:	697b      	ldr	r3, [r7, #20]
   23154:	18d1      	adds	r1, r2, r3
   23156:	2310      	movs	r3, #16
   23158:	18fb      	adds	r3, r7, r3
   2315a:	881a      	ldrh	r2, [r3, #0]
   2315c:	68fb      	ldr	r3, [r7, #12]
   2315e:	0018      	movs	r0, r3
   23160:	4b17      	ldr	r3, [pc, #92]	; (231c0 <nm_read_block+0xc8>)
   23162:	4798      	blx	r3
   23164:	0003      	movs	r3, r0
   23166:	b2da      	uxtb	r2, r3
   23168:	2313      	movs	r3, #19
   2316a:	18fb      	adds	r3, r7, r3
   2316c:	781b      	ldrb	r3, [r3, #0]
   2316e:	18d3      	adds	r3, r2, r3
   23170:	b2da      	uxtb	r2, r3
   23172:	2313      	movs	r3, #19
   23174:	18fb      	adds	r3, r7, r3
   23176:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23178:	2313      	movs	r3, #19
   2317a:	18fb      	adds	r3, r7, r3
   2317c:	781b      	ldrb	r3, [r3, #0]
   2317e:	b25b      	sxtb	r3, r3
   23180:	2b00      	cmp	r3, #0
   23182:	d112      	bne.n	231aa <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23184:	2310      	movs	r3, #16
   23186:	18fb      	adds	r3, r7, r3
   23188:	881b      	ldrh	r3, [r3, #0]
   2318a:	687a      	ldr	r2, [r7, #4]
   2318c:	1ad3      	subs	r3, r2, r3
   2318e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23190:	2310      	movs	r3, #16
   23192:	18fb      	adds	r3, r7, r3
   23194:	881b      	ldrh	r3, [r3, #0]
   23196:	697a      	ldr	r2, [r7, #20]
   23198:	18d3      	adds	r3, r2, r3
   2319a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   2319c:	2310      	movs	r3, #16
   2319e:	18fb      	adds	r3, r7, r3
   231a0:	881b      	ldrh	r3, [r3, #0]
   231a2:	68fa      	ldr	r2, [r7, #12]
   231a4:	18d3      	adds	r3, r2, r3
   231a6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   231a8:	e7b8      	b.n	2311c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   231aa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   231ac:	2313      	movs	r3, #19
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	781b      	ldrb	r3, [r3, #0]
   231b2:	b25b      	sxtb	r3, r3
}
   231b4:	0018      	movs	r0, r3
   231b6:	46bd      	mov	sp, r7
   231b8:	b006      	add	sp, #24
   231ba:	bd80      	pop	{r7, pc}
   231bc:	20000124 	.word	0x20000124
   231c0:	000230cd 	.word	0x000230cd

000231c4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   231c4:	b580      	push	{r7, lr}
   231c6:	b084      	sub	sp, #16
   231c8:	af00      	add	r7, sp, #0
   231ca:	60f8      	str	r0, [r7, #12]
   231cc:	60b9      	str	r1, [r7, #8]
   231ce:	1dbb      	adds	r3, r7, #6
   231d0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   231d2:	1dbb      	adds	r3, r7, #6
   231d4:	881a      	ldrh	r2, [r3, #0]
   231d6:	68b9      	ldr	r1, [r7, #8]
   231d8:	68fb      	ldr	r3, [r7, #12]
   231da:	0018      	movs	r0, r3
   231dc:	4b03      	ldr	r3, [pc, #12]	; (231ec <p_nm_write_block+0x28>)
   231de:	4798      	blx	r3
   231e0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   231e2:	0018      	movs	r0, r3
   231e4:	46bd      	mov	sp, r7
   231e6:	b004      	add	sp, #16
   231e8:	bd80      	pop	{r7, pc}
   231ea:	46c0      	nop			; (mov r8, r8)
   231ec:	00025121 	.word	0x00025121

000231f0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   231f0:	b580      	push	{r7, lr}
   231f2:	b086      	sub	sp, #24
   231f4:	af00      	add	r7, sp, #0
   231f6:	60f8      	str	r0, [r7, #12]
   231f8:	60b9      	str	r1, [r7, #8]
   231fa:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   231fc:	4b2d      	ldr	r3, [pc, #180]	; (232b4 <nm_write_block+0xc4>)
   231fe:	881a      	ldrh	r2, [r3, #0]
   23200:	2310      	movs	r3, #16
   23202:	18fb      	adds	r3, r7, r3
   23204:	3a08      	subs	r2, #8
   23206:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23208:	2300      	movs	r3, #0
   2320a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   2320c:	2313      	movs	r3, #19
   2320e:	18fb      	adds	r3, r7, r3
   23210:	2200      	movs	r2, #0
   23212:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23214:	2310      	movs	r3, #16
   23216:	18fb      	adds	r3, r7, r3
   23218:	881a      	ldrh	r2, [r3, #0]
   2321a:	687b      	ldr	r3, [r7, #4]
   2321c:	429a      	cmp	r2, r3
   2321e:	d313      	bcc.n	23248 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23220:	68ba      	ldr	r2, [r7, #8]
   23222:	697b      	ldr	r3, [r7, #20]
   23224:	18d1      	adds	r1, r2, r3
   23226:	687b      	ldr	r3, [r7, #4]
   23228:	b29a      	uxth	r2, r3
   2322a:	68fb      	ldr	r3, [r7, #12]
   2322c:	0018      	movs	r0, r3
   2322e:	4b22      	ldr	r3, [pc, #136]	; (232b8 <nm_write_block+0xc8>)
   23230:	4798      	blx	r3
   23232:	0003      	movs	r3, r0
   23234:	b2da      	uxtb	r2, r3
   23236:	2313      	movs	r3, #19
   23238:	18fb      	adds	r3, r7, r3
   2323a:	781b      	ldrb	r3, [r3, #0]
   2323c:	18d3      	adds	r3, r2, r3
   2323e:	b2da      	uxtb	r2, r3
   23240:	2313      	movs	r3, #19
   23242:	18fb      	adds	r3, r7, r3
   23244:	701a      	strb	r2, [r3, #0]
			break;
   23246:	e02d      	b.n	232a4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23248:	68ba      	ldr	r2, [r7, #8]
   2324a:	697b      	ldr	r3, [r7, #20]
   2324c:	18d1      	adds	r1, r2, r3
   2324e:	2310      	movs	r3, #16
   23250:	18fb      	adds	r3, r7, r3
   23252:	881a      	ldrh	r2, [r3, #0]
   23254:	68fb      	ldr	r3, [r7, #12]
   23256:	0018      	movs	r0, r3
   23258:	4b17      	ldr	r3, [pc, #92]	; (232b8 <nm_write_block+0xc8>)
   2325a:	4798      	blx	r3
   2325c:	0003      	movs	r3, r0
   2325e:	b2da      	uxtb	r2, r3
   23260:	2313      	movs	r3, #19
   23262:	18fb      	adds	r3, r7, r3
   23264:	781b      	ldrb	r3, [r3, #0]
   23266:	18d3      	adds	r3, r2, r3
   23268:	b2da      	uxtb	r2, r3
   2326a:	2313      	movs	r3, #19
   2326c:	18fb      	adds	r3, r7, r3
   2326e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23270:	2313      	movs	r3, #19
   23272:	18fb      	adds	r3, r7, r3
   23274:	781b      	ldrb	r3, [r3, #0]
   23276:	b25b      	sxtb	r3, r3
   23278:	2b00      	cmp	r3, #0
   2327a:	d112      	bne.n	232a2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   2327c:	2310      	movs	r3, #16
   2327e:	18fb      	adds	r3, r7, r3
   23280:	881b      	ldrh	r3, [r3, #0]
   23282:	687a      	ldr	r2, [r7, #4]
   23284:	1ad3      	subs	r3, r2, r3
   23286:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23288:	2310      	movs	r3, #16
   2328a:	18fb      	adds	r3, r7, r3
   2328c:	881b      	ldrh	r3, [r3, #0]
   2328e:	697a      	ldr	r2, [r7, #20]
   23290:	18d3      	adds	r3, r2, r3
   23292:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23294:	2310      	movs	r3, #16
   23296:	18fb      	adds	r3, r7, r3
   23298:	881b      	ldrh	r3, [r3, #0]
   2329a:	68fa      	ldr	r2, [r7, #12]
   2329c:	18d3      	adds	r3, r2, r3
   2329e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   232a0:	e7b8      	b.n	23214 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   232a2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   232a4:	2313      	movs	r3, #19
   232a6:	18fb      	adds	r3, r7, r3
   232a8:	781b      	ldrb	r3, [r3, #0]
   232aa:	b25b      	sxtb	r3, r3
}
   232ac:	0018      	movs	r0, r3
   232ae:	46bd      	mov	sp, r7
   232b0:	b006      	add	sp, #24
   232b2:	bd80      	pop	{r7, pc}
   232b4:	20000124 	.word	0x20000124
   232b8:	000231c5 	.word	0x000231c5

000232bc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   232bc:	b590      	push	{r4, r7, lr}
   232be:	b089      	sub	sp, #36	; 0x24
   232c0:	af00      	add	r7, sp, #0
   232c2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   232c4:	2300      	movs	r3, #0
   232c6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   232c8:	231f      	movs	r3, #31
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	2200      	movs	r2, #0
   232ce:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   232d0:	230c      	movs	r3, #12
   232d2:	18fb      	adds	r3, r7, r3
   232d4:	0018      	movs	r0, r3
   232d6:	2308      	movs	r3, #8
   232d8:	001a      	movs	r2, r3
   232da:	2100      	movs	r1, #0
   232dc:	4b64      	ldr	r3, [pc, #400]	; (23470 <nm_get_firmware_full_info+0x1b4>)
   232de:	4798      	blx	r3
	if (pstrRev != NULL)
   232e0:	687b      	ldr	r3, [r7, #4]
   232e2:	2b00      	cmp	r3, #0
   232e4:	d100      	bne.n	232e8 <nm_get_firmware_full_info+0x2c>
   232e6:	e0ba      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   232e8:	687b      	ldr	r3, [r7, #4]
   232ea:	2228      	movs	r2, #40	; 0x28
   232ec:	2100      	movs	r1, #0
   232ee:	0018      	movs	r0, r3
   232f0:	4b60      	ldr	r3, [pc, #384]	; (23474 <nm_get_firmware_full_info+0x1b8>)
   232f2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   232f4:	231f      	movs	r3, #31
   232f6:	18fc      	adds	r4, r7, r3
   232f8:	2314      	movs	r3, #20
   232fa:	18fb      	adds	r3, r7, r3
   232fc:	4a5e      	ldr	r2, [pc, #376]	; (23478 <nm_get_firmware_full_info+0x1bc>)
   232fe:	0019      	movs	r1, r3
   23300:	0010      	movs	r0, r2
   23302:	4b5e      	ldr	r3, [pc, #376]	; (2347c <nm_get_firmware_full_info+0x1c0>)
   23304:	4798      	blx	r3
   23306:	0003      	movs	r3, r0
   23308:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   2330a:	231f      	movs	r3, #31
   2330c:	18fb      	adds	r3, r7, r3
   2330e:	781b      	ldrb	r3, [r3, #0]
   23310:	b25b      	sxtb	r3, r3
   23312:	2b00      	cmp	r3, #0
   23314:	d000      	beq.n	23318 <nm_get_firmware_full_info+0x5c>
   23316:	e0a2      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23318:	697b      	ldr	r3, [r7, #20]
   2331a:	2b00      	cmp	r3, #0
   2331c:	d100      	bne.n	23320 <nm_get_firmware_full_info+0x64>
   2331e:	e09a      	b.n	23456 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23320:	697b      	ldr	r3, [r7, #20]
   23322:	22c0      	movs	r2, #192	; 0xc0
   23324:	0292      	lsls	r2, r2, #10
   23326:	4313      	orrs	r3, r2
   23328:	221f      	movs	r2, #31
   2332a:	18bc      	adds	r4, r7, r2
   2332c:	220c      	movs	r2, #12
   2332e:	18b9      	adds	r1, r7, r2
   23330:	2208      	movs	r2, #8
   23332:	0018      	movs	r0, r3
   23334:	4b52      	ldr	r3, [pc, #328]	; (23480 <nm_get_firmware_full_info+0x1c4>)
   23336:	4798      	blx	r3
   23338:	0003      	movs	r3, r0
   2333a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   2333c:	231f      	movs	r3, #31
   2333e:	18fb      	adds	r3, r7, r3
   23340:	781b      	ldrb	r3, [r3, #0]
   23342:	b25b      	sxtb	r3, r3
   23344:	2b00      	cmp	r3, #0
   23346:	d000      	beq.n	2334a <nm_get_firmware_full_info+0x8e>
   23348:	e089      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   2334a:	230c      	movs	r3, #12
   2334c:	18fb      	adds	r3, r7, r3
   2334e:	685b      	ldr	r3, [r3, #4]
   23350:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23352:	697b      	ldr	r3, [r7, #20]
   23354:	041b      	lsls	r3, r3, #16
   23356:	0c1b      	lsrs	r3, r3, #16
   23358:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   2335a:	697b      	ldr	r3, [r7, #20]
   2335c:	2b00      	cmp	r3, #0
   2335e:	d100      	bne.n	23362 <nm_get_firmware_full_info+0xa6>
   23360:	e074      	b.n	2344c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23362:	697b      	ldr	r3, [r7, #20]
   23364:	22c0      	movs	r2, #192	; 0xc0
   23366:	0292      	lsls	r2, r2, #10
   23368:	4313      	orrs	r3, r2
   2336a:	221f      	movs	r2, #31
   2336c:	18bc      	adds	r4, r7, r2
   2336e:	6879      	ldr	r1, [r7, #4]
   23370:	2228      	movs	r2, #40	; 0x28
   23372:	0018      	movs	r0, r3
   23374:	4b42      	ldr	r3, [pc, #264]	; (23480 <nm_get_firmware_full_info+0x1c4>)
   23376:	4798      	blx	r3
   23378:	0003      	movs	r3, r0
   2337a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   2337c:	231f      	movs	r3, #31
   2337e:	18fb      	adds	r3, r7, r3
   23380:	781b      	ldrb	r3, [r3, #0]
   23382:	b25b      	sxtb	r3, r3
   23384:	2b00      	cmp	r3, #0
   23386:	d16a      	bne.n	2345e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23388:	687b      	ldr	r3, [r7, #4]
   2338a:	791b      	ldrb	r3, [r3, #4]
   2338c:	021b      	lsls	r3, r3, #8
   2338e:	b21a      	sxth	r2, r3
   23390:	687b      	ldr	r3, [r7, #4]
   23392:	795b      	ldrb	r3, [r3, #5]
   23394:	011b      	lsls	r3, r3, #4
   23396:	b21b      	sxth	r3, r3
   23398:	21ff      	movs	r1, #255	; 0xff
   2339a:	400b      	ands	r3, r1
   2339c:	b21b      	sxth	r3, r3
   2339e:	4313      	orrs	r3, r2
   233a0:	b21a      	sxth	r2, r3
   233a2:	687b      	ldr	r3, [r7, #4]
   233a4:	799b      	ldrb	r3, [r3, #6]
   233a6:	b21b      	sxth	r3, r3
   233a8:	210f      	movs	r1, #15
   233aa:	400b      	ands	r3, r1
   233ac:	b21b      	sxth	r3, r3
   233ae:	4313      	orrs	r3, r2
   233b0:	b21a      	sxth	r2, r3
   233b2:	231c      	movs	r3, #28
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   233b8:	231a      	movs	r3, #26
   233ba:	18fb      	adds	r3, r7, r3
   233bc:	4a31      	ldr	r2, [pc, #196]	; (23484 <nm_get_firmware_full_info+0x1c8>)
   233be:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   233c0:	687b      	ldr	r3, [r7, #4]
   233c2:	79db      	ldrb	r3, [r3, #7]
   233c4:	021b      	lsls	r3, r3, #8
   233c6:	b21a      	sxth	r2, r3
   233c8:	687b      	ldr	r3, [r7, #4]
   233ca:	7a1b      	ldrb	r3, [r3, #8]
   233cc:	011b      	lsls	r3, r3, #4
   233ce:	b21b      	sxth	r3, r3
   233d0:	21ff      	movs	r1, #255	; 0xff
   233d2:	400b      	ands	r3, r1
   233d4:	b21b      	sxth	r3, r3
   233d6:	4313      	orrs	r3, r2
   233d8:	b21a      	sxth	r2, r3
   233da:	687b      	ldr	r3, [r7, #4]
   233dc:	7a5b      	ldrb	r3, [r3, #9]
   233de:	b21b      	sxth	r3, r3
   233e0:	210f      	movs	r1, #15
   233e2:	400b      	ands	r3, r1
   233e4:	b21b      	sxth	r3, r3
   233e6:	4313      	orrs	r3, r2
   233e8:	b21a      	sxth	r2, r3
   233ea:	2318      	movs	r3, #24
   233ec:	18fb      	adds	r3, r7, r3
   233ee:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   233f0:	231c      	movs	r3, #28
   233f2:	18fb      	adds	r3, r7, r3
   233f4:	881b      	ldrh	r3, [r3, #0]
   233f6:	2b00      	cmp	r3, #0
   233f8:	d009      	beq.n	2340e <nm_get_firmware_full_info+0x152>
   233fa:	2318      	movs	r3, #24
   233fc:	18fb      	adds	r3, r7, r3
   233fe:	881b      	ldrh	r3, [r3, #0]
   23400:	2b00      	cmp	r3, #0
   23402:	d004      	beq.n	2340e <nm_get_firmware_full_info+0x152>
   23404:	2318      	movs	r3, #24
   23406:	18fb      	adds	r3, r7, r3
   23408:	881b      	ldrh	r3, [r3, #0]
   2340a:	2b00      	cmp	r3, #0
   2340c:	d104      	bne.n	23418 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   2340e:	231f      	movs	r3, #31
   23410:	18fb      	adds	r3, r7, r3
   23412:	22f4      	movs	r2, #244	; 0xf4
   23414:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23416:	e022      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23418:	231a      	movs	r3, #26
   2341a:	18fa      	adds	r2, r7, r3
   2341c:	2318      	movs	r3, #24
   2341e:	18fb      	adds	r3, r7, r3
   23420:	8812      	ldrh	r2, [r2, #0]
   23422:	881b      	ldrh	r3, [r3, #0]
   23424:	429a      	cmp	r2, r3
   23426:	d204      	bcs.n	23432 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23428:	231f      	movs	r3, #31
   2342a:	18fb      	adds	r3, r7, r3
   2342c:	22f3      	movs	r2, #243	; 0xf3
   2342e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23430:	e015      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23432:	231a      	movs	r3, #26
   23434:	18fa      	adds	r2, r7, r3
   23436:	231c      	movs	r3, #28
   23438:	18fb      	adds	r3, r7, r3
   2343a:	8812      	ldrh	r2, [r2, #0]
   2343c:	881b      	ldrh	r3, [r3, #0]
   2343e:	429a      	cmp	r2, r3
   23440:	d90d      	bls.n	2345e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23442:	231f      	movs	r3, #31
   23444:	18fb      	adds	r3, r7, r3
   23446:	22f3      	movs	r2, #243	; 0xf3
   23448:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2344a:	e008      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   2344c:	231f      	movs	r3, #31
   2344e:	18fb      	adds	r3, r7, r3
   23450:	22f4      	movs	r2, #244	; 0xf4
   23452:	701a      	strb	r2, [r3, #0]
   23454:	e003      	b.n	2345e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23456:	231f      	movs	r3, #31
   23458:	18fb      	adds	r3, r7, r3
   2345a:	22f4      	movs	r2, #244	; 0xf4
   2345c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2345e:	231f      	movs	r3, #31
   23460:	18fb      	adds	r3, r7, r3
   23462:	781b      	ldrb	r3, [r3, #0]
   23464:	b25b      	sxtb	r3, r3
}
   23466:	0018      	movs	r0, r3
   23468:	46bd      	mov	sp, r7
   2346a:	b009      	add	sp, #36	; 0x24
   2346c:	bd90      	pop	{r4, r7, pc}
   2346e:	46c0      	nop			; (mov r8, r8)
   23470:	00034e13 	.word	0x00034e13
   23474:	000210cd 	.word	0x000210cd
   23478:	000c0008 	.word	0x000c0008
   2347c:	00023085 	.word	0x00023085
   23480:	000230f9 	.word	0x000230f9
   23484:	00001354 	.word	0x00001354

00023488 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23488:	b590      	push	{r4, r7, lr}
   2348a:	b085      	sub	sp, #20
   2348c:	af00      	add	r7, sp, #0
   2348e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23490:	230f      	movs	r3, #15
   23492:	18fb      	adds	r3, r7, r3
   23494:	2200      	movs	r2, #0
   23496:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23498:	687b      	ldr	r3, [r7, #4]
   2349a:	2b00      	cmp	r3, #0
   2349c:	d013      	beq.n	234c6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2349e:	230e      	movs	r3, #14
   234a0:	18fb      	adds	r3, r7, r3
   234a2:	687a      	ldr	r2, [r7, #4]
   234a4:	7812      	ldrb	r2, [r2, #0]
   234a6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   234a8:	230e      	movs	r3, #14
   234aa:	18fb      	adds	r3, r7, r3
   234ac:	781b      	ldrb	r3, [r3, #0]
   234ae:	2b00      	cmp	r3, #0
   234b0:	d004      	beq.n	234bc <nm_drv_init+0x34>
   234b2:	230e      	movs	r3, #14
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	781b      	ldrb	r3, [r3, #0]
   234b8:	2b04      	cmp	r3, #4
   234ba:	d908      	bls.n	234ce <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   234bc:	230e      	movs	r3, #14
   234be:	18fb      	adds	r3, r7, r3
   234c0:	2201      	movs	r2, #1
   234c2:	701a      	strb	r2, [r3, #0]
   234c4:	e003      	b.n	234ce <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   234c6:	230e      	movs	r3, #14
   234c8:	18fb      	adds	r3, r7, r3
   234ca:	2201      	movs	r2, #1
   234cc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   234ce:	230f      	movs	r3, #15
   234d0:	18fc      	adds	r4, r7, r3
   234d2:	2000      	movs	r0, #0
   234d4:	4b41      	ldr	r3, [pc, #260]	; (235dc <nm_drv_init+0x154>)
   234d6:	4798      	blx	r3
   234d8:	0003      	movs	r3, r0
   234da:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   234dc:	230f      	movs	r3, #15
   234de:	18fb      	adds	r3, r7, r3
   234e0:	781b      	ldrb	r3, [r3, #0]
   234e2:	b25b      	sxtb	r3, r3
   234e4:	2b00      	cmp	r3, #0
   234e6:	d00f      	beq.n	23508 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   234e8:	2390      	movs	r3, #144	; 0x90
   234ea:	005a      	lsls	r2, r3, #1
   234ec:	493c      	ldr	r1, [pc, #240]	; (235e0 <nm_drv_init+0x158>)
   234ee:	4b3d      	ldr	r3, [pc, #244]	; (235e4 <nm_drv_init+0x15c>)
   234f0:	0018      	movs	r0, r3
   234f2:	4b3d      	ldr	r3, [pc, #244]	; (235e8 <nm_drv_init+0x160>)
   234f4:	4798      	blx	r3
   234f6:	4b3d      	ldr	r3, [pc, #244]	; (235ec <nm_drv_init+0x164>)
   234f8:	0018      	movs	r0, r3
   234fa:	4b3b      	ldr	r3, [pc, #236]	; (235e8 <nm_drv_init+0x160>)
   234fc:	4798      	blx	r3
   234fe:	4b3c      	ldr	r3, [pc, #240]	; (235f0 <nm_drv_init+0x168>)
   23500:	0018      	movs	r0, r3
   23502:	4b39      	ldr	r3, [pc, #228]	; (235e8 <nm_drv_init+0x160>)
   23504:	4798      	blx	r3
		goto ERR1;
   23506:	e061      	b.n	235cc <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23508:	4b3a      	ldr	r3, [pc, #232]	; (235f4 <nm_drv_init+0x16c>)
   2350a:	0018      	movs	r0, r3
   2350c:	4b36      	ldr	r3, [pc, #216]	; (235e8 <nm_drv_init+0x160>)
   2350e:	4798      	blx	r3
   23510:	4b39      	ldr	r3, [pc, #228]	; (235f8 <nm_drv_init+0x170>)
   23512:	4798      	blx	r3
   23514:	0002      	movs	r2, r0
   23516:	4b39      	ldr	r3, [pc, #228]	; (235fc <nm_drv_init+0x174>)
   23518:	0011      	movs	r1, r2
   2351a:	0018      	movs	r0, r3
   2351c:	4b32      	ldr	r3, [pc, #200]	; (235e8 <nm_drv_init+0x160>)
   2351e:	4798      	blx	r3
   23520:	4b33      	ldr	r3, [pc, #204]	; (235f0 <nm_drv_init+0x168>)
   23522:	0018      	movs	r0, r3
   23524:	4b30      	ldr	r3, [pc, #192]	; (235e8 <nm_drv_init+0x160>)
   23526:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23528:	4b35      	ldr	r3, [pc, #212]	; (23600 <nm_drv_init+0x178>)
   2352a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   2352c:	230f      	movs	r3, #15
   2352e:	18fc      	adds	r4, r7, r3
   23530:	230e      	movs	r3, #14
   23532:	18fb      	adds	r3, r7, r3
   23534:	781b      	ldrb	r3, [r3, #0]
   23536:	0018      	movs	r0, r3
   23538:	4b32      	ldr	r3, [pc, #200]	; (23604 <nm_drv_init+0x17c>)
   2353a:	4798      	blx	r3
   2353c:	0003      	movs	r3, r0
   2353e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23540:	230f      	movs	r3, #15
   23542:	18fb      	adds	r3, r7, r3
   23544:	781b      	ldrb	r3, [r3, #0]
   23546:	b25b      	sxtb	r3, r3
   23548:	2b00      	cmp	r3, #0
   2354a:	d13a      	bne.n	235c2 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   2354c:	230f      	movs	r3, #15
   2354e:	18fc      	adds	r4, r7, r3
   23550:	230e      	movs	r3, #14
   23552:	18fb      	adds	r3, r7, r3
   23554:	781b      	ldrb	r3, [r3, #0]
   23556:	0018      	movs	r0, r3
   23558:	4b2b      	ldr	r3, [pc, #172]	; (23608 <nm_drv_init+0x180>)
   2355a:	4798      	blx	r3
   2355c:	0003      	movs	r3, r0
   2355e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23560:	230f      	movs	r3, #15
   23562:	18fb      	adds	r3, r7, r3
   23564:	781b      	ldrb	r3, [r3, #0]
   23566:	b25b      	sxtb	r3, r3
   23568:	2b00      	cmp	r3, #0
   2356a:	d12c      	bne.n	235c6 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   2356c:	230e      	movs	r3, #14
   2356e:	18fb      	adds	r3, r7, r3
   23570:	781b      	ldrb	r3, [r3, #0]
   23572:	2b02      	cmp	r3, #2
   23574:	d02a      	beq.n	235cc <nm_drv_init+0x144>
   23576:	230e      	movs	r3, #14
   23578:	18fb      	adds	r3, r7, r3
   2357a:	781b      	ldrb	r3, [r3, #0]
   2357c:	2b03      	cmp	r3, #3
   2357e:	d025      	beq.n	235cc <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23580:	230f      	movs	r3, #15
   23582:	18fc      	adds	r4, r7, r3
   23584:	4b21      	ldr	r3, [pc, #132]	; (2360c <nm_drv_init+0x184>)
   23586:	4798      	blx	r3
   23588:	0003      	movs	r3, r0
   2358a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2358c:	230f      	movs	r3, #15
   2358e:	18fb      	adds	r3, r7, r3
   23590:	781b      	ldrb	r3, [r3, #0]
   23592:	b25b      	sxtb	r3, r3
   23594:	2b00      	cmp	r3, #0
   23596:	d00f      	beq.n	235b8 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23598:	23a7      	movs	r3, #167	; 0xa7
   2359a:	005a      	lsls	r2, r3, #1
   2359c:	4910      	ldr	r1, [pc, #64]	; (235e0 <nm_drv_init+0x158>)
   2359e:	4b11      	ldr	r3, [pc, #68]	; (235e4 <nm_drv_init+0x15c>)
   235a0:	0018      	movs	r0, r3
   235a2:	4b11      	ldr	r3, [pc, #68]	; (235e8 <nm_drv_init+0x160>)
   235a4:	4798      	blx	r3
   235a6:	4b1a      	ldr	r3, [pc, #104]	; (23610 <nm_drv_init+0x188>)
   235a8:	0018      	movs	r0, r3
   235aa:	4b0f      	ldr	r3, [pc, #60]	; (235e8 <nm_drv_init+0x160>)
   235ac:	4798      	blx	r3
   235ae:	4b10      	ldr	r3, [pc, #64]	; (235f0 <nm_drv_init+0x168>)
   235b0:	0018      	movs	r0, r3
   235b2:	4b0d      	ldr	r3, [pc, #52]	; (235e8 <nm_drv_init+0x160>)
   235b4:	4798      	blx	r3
		goto ERR2;
   235b6:	e007      	b.n	235c8 <nm_drv_init+0x140>
	}
	return ret;
   235b8:	230f      	movs	r3, #15
   235ba:	18fb      	adds	r3, r7, r3
   235bc:	781b      	ldrb	r3, [r3, #0]
   235be:	b25b      	sxtb	r3, r3
   235c0:	e008      	b.n	235d4 <nm_drv_init+0x14c>
		goto ERR2;
   235c2:	46c0      	nop			; (mov r8, r8)
   235c4:	e000      	b.n	235c8 <nm_drv_init+0x140>
		goto ERR2;
   235c6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   235c8:	4b12      	ldr	r3, [pc, #72]	; (23614 <nm_drv_init+0x18c>)
   235ca:	4798      	blx	r3
ERR1:
	return ret;
   235cc:	230f      	movs	r3, #15
   235ce:	18fb      	adds	r3, r7, r3
   235d0:	781b      	ldrb	r3, [r3, #0]
   235d2:	b25b      	sxtb	r3, r3
}
   235d4:	0018      	movs	r0, r3
   235d6:	46bd      	mov	sp, r7
   235d8:	b005      	add	sp, #20
   235da:	bd90      	pop	{r4, r7, pc}
   235dc:	00022fe9 	.word	0x00022fe9
   235e0:	00039220 	.word	0x00039220
   235e4:	00039150 	.word	0x00039150
   235e8:	0001e399 	.word	0x0001e399
   235ec:	00039164 	.word	0x00039164
   235f0:	00039180 	.word	0x00039180
   235f4:	00039184 	.word	0x00039184
   235f8:	00022985 	.word	0x00022985
   235fc:	00039190 	.word	0x00039190
   23600:	00024ea1 	.word	0x00024ea1
   23604:	00022cdd 	.word	0x00022cdd
   23608:	00022e75 	.word	0x00022e75
   2360c:	000228d1 	.word	0x000228d1
   23610:	000391a0 	.word	0x000391a0
   23614:	0002301d 	.word	0x0002301d

00023618 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23618:	b590      	push	{r4, r7, lr}
   2361a:	b085      	sub	sp, #20
   2361c:	af00      	add	r7, sp, #0
   2361e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23620:	230f      	movs	r3, #15
   23622:	18fc      	adds	r4, r7, r3
   23624:	4b2e      	ldr	r3, [pc, #184]	; (236e0 <nm_drv_deinit+0xc8>)
   23626:	4798      	blx	r3
   23628:	0003      	movs	r3, r0
   2362a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2362c:	230f      	movs	r3, #15
   2362e:	18fb      	adds	r3, r7, r3
   23630:	781b      	ldrb	r3, [r3, #0]
   23632:	b25b      	sxtb	r3, r3
   23634:	2b00      	cmp	r3, #0
   23636:	d010      	beq.n	2365a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23638:	2366      	movs	r3, #102	; 0x66
   2363a:	33ff      	adds	r3, #255	; 0xff
   2363c:	001a      	movs	r2, r3
   2363e:	4929      	ldr	r1, [pc, #164]	; (236e4 <nm_drv_deinit+0xcc>)
   23640:	4b29      	ldr	r3, [pc, #164]	; (236e8 <nm_drv_deinit+0xd0>)
   23642:	0018      	movs	r0, r3
   23644:	4b29      	ldr	r3, [pc, #164]	; (236ec <nm_drv_deinit+0xd4>)
   23646:	4798      	blx	r3
   23648:	4b29      	ldr	r3, [pc, #164]	; (236f0 <nm_drv_deinit+0xd8>)
   2364a:	0018      	movs	r0, r3
   2364c:	4b27      	ldr	r3, [pc, #156]	; (236ec <nm_drv_deinit+0xd4>)
   2364e:	4798      	blx	r3
   23650:	4b28      	ldr	r3, [pc, #160]	; (236f4 <nm_drv_deinit+0xdc>)
   23652:	0018      	movs	r0, r3
   23654:	4b25      	ldr	r3, [pc, #148]	; (236ec <nm_drv_deinit+0xd4>)
   23656:	4798      	blx	r3
		goto ERR1;
   23658:	e03a      	b.n	236d0 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2365a:	230f      	movs	r3, #15
   2365c:	18fc      	adds	r4, r7, r3
   2365e:	2000      	movs	r0, #0
   23660:	4b25      	ldr	r3, [pc, #148]	; (236f8 <nm_drv_deinit+0xe0>)
   23662:	4798      	blx	r3
   23664:	0003      	movs	r3, r0
   23666:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23668:	230f      	movs	r3, #15
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	781b      	ldrb	r3, [r3, #0]
   2366e:	b25b      	sxtb	r3, r3
   23670:	2b00      	cmp	r3, #0
   23672:	d00f      	beq.n	23694 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23674:	23b6      	movs	r3, #182	; 0xb6
   23676:	005a      	lsls	r2, r3, #1
   23678:	491a      	ldr	r1, [pc, #104]	; (236e4 <nm_drv_deinit+0xcc>)
   2367a:	4b1b      	ldr	r3, [pc, #108]	; (236e8 <nm_drv_deinit+0xd0>)
   2367c:	0018      	movs	r0, r3
   2367e:	4b1b      	ldr	r3, [pc, #108]	; (236ec <nm_drv_deinit+0xd4>)
   23680:	4798      	blx	r3
   23682:	4b1e      	ldr	r3, [pc, #120]	; (236fc <nm_drv_deinit+0xe4>)
   23684:	0018      	movs	r0, r3
   23686:	4b19      	ldr	r3, [pc, #100]	; (236ec <nm_drv_deinit+0xd4>)
   23688:	4798      	blx	r3
   2368a:	4b1a      	ldr	r3, [pc, #104]	; (236f4 <nm_drv_deinit+0xdc>)
   2368c:	0018      	movs	r0, r3
   2368e:	4b17      	ldr	r3, [pc, #92]	; (236ec <nm_drv_deinit+0xd4>)
   23690:	4798      	blx	r3
		goto ERR1;
   23692:	e01d      	b.n	236d0 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23694:	230f      	movs	r3, #15
   23696:	18fc      	adds	r4, r7, r3
   23698:	4b19      	ldr	r3, [pc, #100]	; (23700 <nm_drv_deinit+0xe8>)
   2369a:	4798      	blx	r3
   2369c:	0003      	movs	r3, r0
   2369e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   236a0:	230f      	movs	r3, #15
   236a2:	18fb      	adds	r3, r7, r3
   236a4:	781b      	ldrb	r3, [r3, #0]
   236a6:	b25b      	sxtb	r3, r3
   236a8:	2b00      	cmp	r3, #0
   236aa:	d00f      	beq.n	236cc <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   236ac:	23b9      	movs	r3, #185	; 0xb9
   236ae:	005a      	lsls	r2, r3, #1
   236b0:	490c      	ldr	r1, [pc, #48]	; (236e4 <nm_drv_deinit+0xcc>)
   236b2:	4b0d      	ldr	r3, [pc, #52]	; (236e8 <nm_drv_deinit+0xd0>)
   236b4:	0018      	movs	r0, r3
   236b6:	4b0d      	ldr	r3, [pc, #52]	; (236ec <nm_drv_deinit+0xd4>)
   236b8:	4798      	blx	r3
   236ba:	4b12      	ldr	r3, [pc, #72]	; (23704 <nm_drv_deinit+0xec>)
   236bc:	0018      	movs	r0, r3
   236be:	4b0b      	ldr	r3, [pc, #44]	; (236ec <nm_drv_deinit+0xd4>)
   236c0:	4798      	blx	r3
   236c2:	4b0c      	ldr	r3, [pc, #48]	; (236f4 <nm_drv_deinit+0xdc>)
   236c4:	0018      	movs	r0, r3
   236c6:	4b09      	ldr	r3, [pc, #36]	; (236ec <nm_drv_deinit+0xd4>)
   236c8:	4798      	blx	r3
		goto ERR1;
   236ca:	e001      	b.n	236d0 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   236cc:	4b0e      	ldr	r3, [pc, #56]	; (23708 <nm_drv_deinit+0xf0>)
   236ce:	4798      	blx	r3
#endif

ERR1:
	return ret;
   236d0:	230f      	movs	r3, #15
   236d2:	18fb      	adds	r3, r7, r3
   236d4:	781b      	ldrb	r3, [r3, #0]
   236d6:	b25b      	sxtb	r3, r3
}
   236d8:	0018      	movs	r0, r3
   236da:	46bd      	mov	sp, r7
   236dc:	b005      	add	sp, #20
   236de:	bd90      	pop	{r4, r7, pc}
   236e0:	00022f29 	.word	0x00022f29
   236e4:	0003922c 	.word	0x0003922c
   236e8:	00039150 	.word	0x00039150
   236ec:	0001e399 	.word	0x0001e399
   236f0:	000391c0 	.word	0x000391c0
   236f4:	00039180 	.word	0x00039180
   236f8:	00026349 	.word	0x00026349
   236fc:	000391e0 	.word	0x000391e0
   23700:	0002301d 	.word	0x0002301d
   23704:	00039204 	.word	0x00039204
   23708:	00024fed 	.word	0x00024fed

0002370c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   2370c:	b580      	push	{r7, lr}
   2370e:	b086      	sub	sp, #24
   23710:	af00      	add	r7, sp, #0
   23712:	6078      	str	r0, [r7, #4]
   23714:	000a      	movs	r2, r1
   23716:	1cbb      	adds	r3, r7, #2
   23718:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   2371a:	230c      	movs	r3, #12
   2371c:	18fb      	adds	r3, r7, r3
   2371e:	2200      	movs	r2, #0
   23720:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   23722:	230c      	movs	r3, #12
   23724:	18fb      	adds	r3, r7, r3
   23726:	687a      	ldr	r2, [r7, #4]
   23728:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2372a:	230c      	movs	r3, #12
   2372c:	18fb      	adds	r3, r7, r3
   2372e:	1cba      	adds	r2, r7, #2
   23730:	8812      	ldrh	r2, [r2, #0]
   23732:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23734:	230c      	movs	r3, #12
   23736:	18fb      	adds	r3, r7, r3
   23738:	0019      	movs	r1, r3
   2373a:	2003      	movs	r0, #3
   2373c:	4b03      	ldr	r3, [pc, #12]	; (2374c <nmi_spi_read+0x40>)
   2373e:	4798      	blx	r3
   23740:	0003      	movs	r3, r0
}
   23742:	0018      	movs	r0, r3
   23744:	46bd      	mov	sp, r7
   23746:	b006      	add	sp, #24
   23748:	bd80      	pop	{r7, pc}
   2374a:	46c0      	nop			; (mov r8, r8)
   2374c:	00020f91 	.word	0x00020f91

00023750 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23750:	b580      	push	{r7, lr}
   23752:	b086      	sub	sp, #24
   23754:	af00      	add	r7, sp, #0
   23756:	6078      	str	r0, [r7, #4]
   23758:	000a      	movs	r2, r1
   2375a:	1cbb      	adds	r3, r7, #2
   2375c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2375e:	230c      	movs	r3, #12
   23760:	18fb      	adds	r3, r7, r3
   23762:	687a      	ldr	r2, [r7, #4]
   23764:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23766:	230c      	movs	r3, #12
   23768:	18fb      	adds	r3, r7, r3
   2376a:	2200      	movs	r2, #0
   2376c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2376e:	230c      	movs	r3, #12
   23770:	18fb      	adds	r3, r7, r3
   23772:	1cba      	adds	r2, r7, #2
   23774:	8812      	ldrh	r2, [r2, #0]
   23776:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23778:	230c      	movs	r3, #12
   2377a:	18fb      	adds	r3, r7, r3
   2377c:	0019      	movs	r1, r3
   2377e:	2003      	movs	r0, #3
   23780:	4b03      	ldr	r3, [pc, #12]	; (23790 <nmi_spi_write+0x40>)
   23782:	4798      	blx	r3
   23784:	0003      	movs	r3, r0
}
   23786:	0018      	movs	r0, r3
   23788:	46bd      	mov	sp, r7
   2378a:	b006      	add	sp, #24
   2378c:	bd80      	pop	{r7, pc}
   2378e:	46c0      	nop			; (mov r8, r8)
   23790:	00020f91 	.word	0x00020f91

00023794 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23794:	b580      	push	{r7, lr}
   23796:	b088      	sub	sp, #32
   23798:	af00      	add	r7, sp, #0
   2379a:	60f8      	str	r0, [r7, #12]
   2379c:	60b9      	str	r1, [r7, #8]
   2379e:	1dbb      	adds	r3, r7, #6
   237a0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   237a2:	2314      	movs	r3, #20
   237a4:	18fb      	adds	r3, r7, r3
   237a6:	68fa      	ldr	r2, [r7, #12]
   237a8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   237aa:	2314      	movs	r3, #20
   237ac:	18fb      	adds	r3, r7, r3
   237ae:	68ba      	ldr	r2, [r7, #8]
   237b0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   237b2:	2314      	movs	r3, #20
   237b4:	18fb      	adds	r3, r7, r3
   237b6:	1dba      	adds	r2, r7, #6
   237b8:	8812      	ldrh	r2, [r2, #0]
   237ba:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   237bc:	2314      	movs	r3, #20
   237be:	18fb      	adds	r3, r7, r3
   237c0:	0019      	movs	r1, r3
   237c2:	2003      	movs	r0, #3
   237c4:	4b03      	ldr	r3, [pc, #12]	; (237d4 <nmi_spi_rw+0x40>)
   237c6:	4798      	blx	r3
   237c8:	0003      	movs	r3, r0
}
   237ca:	0018      	movs	r0, r3
   237cc:	46bd      	mov	sp, r7
   237ce:	b008      	add	sp, #32
   237d0:	bd80      	pop	{r7, pc}
   237d2:	46c0      	nop			; (mov r8, r8)
   237d4:	00020f91 	.word	0x00020f91

000237d8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   237d8:	b580      	push	{r7, lr}
   237da:	b082      	sub	sp, #8
   237dc:	af00      	add	r7, sp, #0
   237de:	0002      	movs	r2, r0
   237e0:	1dfb      	adds	r3, r7, #7
   237e2:	701a      	strb	r2, [r3, #0]
   237e4:	1dbb      	adds	r3, r7, #6
   237e6:	1c0a      	adds	r2, r1, #0
   237e8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   237ea:	1dfb      	adds	r3, r7, #7
   237ec:	781b      	ldrb	r3, [r3, #0]
   237ee:	005a      	lsls	r2, r3, #1
   237f0:	1dbb      	adds	r3, r7, #6
   237f2:	781b      	ldrb	r3, [r3, #0]
   237f4:	4053      	eors	r3, r2
   237f6:	4a03      	ldr	r2, [pc, #12]	; (23804 <crc7_byte+0x2c>)
   237f8:	5cd3      	ldrb	r3, [r2, r3]
}
   237fa:	0018      	movs	r0, r3
   237fc:	46bd      	mov	sp, r7
   237fe:	b002      	add	sp, #8
   23800:	bd80      	pop	{r7, pc}
   23802:	46c0      	nop			; (mov r8, r8)
   23804:	0003923c 	.word	0x0003923c

00023808 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23808:	b590      	push	{r4, r7, lr}
   2380a:	b085      	sub	sp, #20
   2380c:	af00      	add	r7, sp, #0
   2380e:	60b9      	str	r1, [r7, #8]
   23810:	607a      	str	r2, [r7, #4]
   23812:	230f      	movs	r3, #15
   23814:	18fb      	adds	r3, r7, r3
   23816:	1c02      	adds	r2, r0, #0
   23818:	701a      	strb	r2, [r3, #0]
	while (len--)
   2381a:	e00e      	b.n	2383a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   2381c:	68bb      	ldr	r3, [r7, #8]
   2381e:	1c5a      	adds	r2, r3, #1
   23820:	60ba      	str	r2, [r7, #8]
   23822:	781a      	ldrb	r2, [r3, #0]
   23824:	230f      	movs	r3, #15
   23826:	18fc      	adds	r4, r7, r3
   23828:	230f      	movs	r3, #15
   2382a:	18fb      	adds	r3, r7, r3
   2382c:	781b      	ldrb	r3, [r3, #0]
   2382e:	0011      	movs	r1, r2
   23830:	0018      	movs	r0, r3
   23832:	4b08      	ldr	r3, [pc, #32]	; (23854 <crc7+0x4c>)
   23834:	4798      	blx	r3
   23836:	0003      	movs	r3, r0
   23838:	7023      	strb	r3, [r4, #0]
	while (len--)
   2383a:	687b      	ldr	r3, [r7, #4]
   2383c:	1e5a      	subs	r2, r3, #1
   2383e:	607a      	str	r2, [r7, #4]
   23840:	2b00      	cmp	r3, #0
   23842:	d1eb      	bne.n	2381c <crc7+0x14>
	return crc;
   23844:	230f      	movs	r3, #15
   23846:	18fb      	adds	r3, r7, r3
   23848:	781b      	ldrb	r3, [r3, #0]
}
   2384a:	0018      	movs	r0, r3
   2384c:	46bd      	mov	sp, r7
   2384e:	b005      	add	sp, #20
   23850:	bd90      	pop	{r4, r7, pc}
   23852:	46c0      	nop			; (mov r8, r8)
   23854:	000237d9 	.word	0x000237d9

00023858 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23858:	b590      	push	{r4, r7, lr}
   2385a:	b089      	sub	sp, #36	; 0x24
   2385c:	af00      	add	r7, sp, #0
   2385e:	60b9      	str	r1, [r7, #8]
   23860:	607a      	str	r2, [r7, #4]
   23862:	603b      	str	r3, [r7, #0]
   23864:	230f      	movs	r3, #15
   23866:	18fb      	adds	r3, r7, r3
   23868:	1c02      	adds	r2, r0, #0
   2386a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   2386c:	231f      	movs	r3, #31
   2386e:	18fb      	adds	r3, r7, r3
   23870:	2205      	movs	r2, #5
   23872:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23874:	231e      	movs	r3, #30
   23876:	18fb      	adds	r3, r7, r3
   23878:	2201      	movs	r2, #1
   2387a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   2387c:	2314      	movs	r3, #20
   2387e:	18fb      	adds	r3, r7, r3
   23880:	220f      	movs	r2, #15
   23882:	18ba      	adds	r2, r7, r2
   23884:	7812      	ldrb	r2, [r2, #0]
   23886:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23888:	230f      	movs	r3, #15
   2388a:	18fb      	adds	r3, r7, r3
   2388c:	781b      	ldrb	r3, [r3, #0]
   2388e:	3bc1      	subs	r3, #193	; 0xc1
   23890:	2b0e      	cmp	r3, #14
   23892:	d900      	bls.n	23896 <spi_cmd+0x3e>
   23894:	e11b      	b.n	23ace <spi_cmd+0x276>
   23896:	009a      	lsls	r2, r3, #2
   23898:	4bb6      	ldr	r3, [pc, #728]	; (23b74 <spi_cmd+0x31c>)
   2389a:	18d3      	adds	r3, r2, r3
   2389c:	681b      	ldr	r3, [r3, #0]
   2389e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   238a0:	68bb      	ldr	r3, [r7, #8]
   238a2:	0c1b      	lsrs	r3, r3, #16
   238a4:	b2da      	uxtb	r2, r3
   238a6:	2314      	movs	r3, #20
   238a8:	18fb      	adds	r3, r7, r3
   238aa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   238ac:	68bb      	ldr	r3, [r7, #8]
   238ae:	0a1b      	lsrs	r3, r3, #8
   238b0:	b2da      	uxtb	r2, r3
   238b2:	2314      	movs	r3, #20
   238b4:	18fb      	adds	r3, r7, r3
   238b6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   238b8:	68bb      	ldr	r3, [r7, #8]
   238ba:	b2da      	uxtb	r2, r3
   238bc:	2314      	movs	r3, #20
   238be:	18fb      	adds	r3, r7, r3
   238c0:	70da      	strb	r2, [r3, #3]
		len = 5;
   238c2:	231f      	movs	r3, #31
   238c4:	18fb      	adds	r3, r7, r3
   238c6:	2205      	movs	r2, #5
   238c8:	701a      	strb	r2, [r3, #0]
		break;
   238ca:	e105      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   238cc:	68bb      	ldr	r3, [r7, #8]
   238ce:	0a1b      	lsrs	r3, r3, #8
   238d0:	b2da      	uxtb	r2, r3
   238d2:	2314      	movs	r3, #20
   238d4:	18fb      	adds	r3, r7, r3
   238d6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   238d8:	2330      	movs	r3, #48	; 0x30
   238da:	18fb      	adds	r3, r7, r3
   238dc:	781b      	ldrb	r3, [r3, #0]
   238de:	2b00      	cmp	r3, #0
   238e0:	d009      	beq.n	238f6 <spi_cmd+0x9e>
   238e2:	2314      	movs	r3, #20
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	785b      	ldrb	r3, [r3, #1]
   238e8:	2280      	movs	r2, #128	; 0x80
   238ea:	4252      	negs	r2, r2
   238ec:	4313      	orrs	r3, r2
   238ee:	b2da      	uxtb	r2, r3
   238f0:	2314      	movs	r3, #20
   238f2:	18fb      	adds	r3, r7, r3
   238f4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   238f6:	68bb      	ldr	r3, [r7, #8]
   238f8:	b2da      	uxtb	r2, r3
   238fa:	2314      	movs	r3, #20
   238fc:	18fb      	adds	r3, r7, r3
   238fe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23900:	2314      	movs	r3, #20
   23902:	18fb      	adds	r3, r7, r3
   23904:	2200      	movs	r2, #0
   23906:	70da      	strb	r2, [r3, #3]
		len = 5;
   23908:	231f      	movs	r3, #31
   2390a:	18fb      	adds	r3, r7, r3
   2390c:	2205      	movs	r2, #5
   2390e:	701a      	strb	r2, [r3, #0]
		break;
   23910:	e0e2      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   23912:	2314      	movs	r3, #20
   23914:	18fb      	adds	r3, r7, r3
   23916:	2200      	movs	r2, #0
   23918:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2391a:	2314      	movs	r3, #20
   2391c:	18fb      	adds	r3, r7, r3
   2391e:	2200      	movs	r2, #0
   23920:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23922:	2314      	movs	r3, #20
   23924:	18fb      	adds	r3, r7, r3
   23926:	2200      	movs	r2, #0
   23928:	70da      	strb	r2, [r3, #3]
		len = 5;
   2392a:	231f      	movs	r3, #31
   2392c:	18fb      	adds	r3, r7, r3
   2392e:	2205      	movs	r2, #5
   23930:	701a      	strb	r2, [r3, #0]
		break;
   23932:	e0d1      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   23934:	2314      	movs	r3, #20
   23936:	18fb      	adds	r3, r7, r3
   23938:	2200      	movs	r2, #0
   2393a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2393c:	2314      	movs	r3, #20
   2393e:	18fb      	adds	r3, r7, r3
   23940:	2200      	movs	r2, #0
   23942:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23944:	2314      	movs	r3, #20
   23946:	18fb      	adds	r3, r7, r3
   23948:	2200      	movs	r2, #0
   2394a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2394c:	231f      	movs	r3, #31
   2394e:	18fb      	adds	r3, r7, r3
   23950:	2205      	movs	r2, #5
   23952:	701a      	strb	r2, [r3, #0]
		break;
   23954:	e0c0      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   23956:	2314      	movs	r3, #20
   23958:	18fb      	adds	r3, r7, r3
   2395a:	22ff      	movs	r2, #255	; 0xff
   2395c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2395e:	2314      	movs	r3, #20
   23960:	18fb      	adds	r3, r7, r3
   23962:	22ff      	movs	r2, #255	; 0xff
   23964:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   23966:	2314      	movs	r3, #20
   23968:	18fb      	adds	r3, r7, r3
   2396a:	22ff      	movs	r2, #255	; 0xff
   2396c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2396e:	231f      	movs	r3, #31
   23970:	18fb      	adds	r3, r7, r3
   23972:	2205      	movs	r2, #5
   23974:	701a      	strb	r2, [r3, #0]
		break;
   23976:	e0af      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23978:	68bb      	ldr	r3, [r7, #8]
   2397a:	0c1b      	lsrs	r3, r3, #16
   2397c:	b2da      	uxtb	r2, r3
   2397e:	2314      	movs	r3, #20
   23980:	18fb      	adds	r3, r7, r3
   23982:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23984:	68bb      	ldr	r3, [r7, #8]
   23986:	0a1b      	lsrs	r3, r3, #8
   23988:	b2da      	uxtb	r2, r3
   2398a:	2314      	movs	r3, #20
   2398c:	18fb      	adds	r3, r7, r3
   2398e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23990:	68bb      	ldr	r3, [r7, #8]
   23992:	b2da      	uxtb	r2, r3
   23994:	2314      	movs	r3, #20
   23996:	18fb      	adds	r3, r7, r3
   23998:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2399a:	683b      	ldr	r3, [r7, #0]
   2399c:	0a1b      	lsrs	r3, r3, #8
   2399e:	b2da      	uxtb	r2, r3
   239a0:	2314      	movs	r3, #20
   239a2:	18fb      	adds	r3, r7, r3
   239a4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   239a6:	683b      	ldr	r3, [r7, #0]
   239a8:	b2da      	uxtb	r2, r3
   239aa:	2314      	movs	r3, #20
   239ac:	18fb      	adds	r3, r7, r3
   239ae:	715a      	strb	r2, [r3, #5]
		len = 7;
   239b0:	231f      	movs	r3, #31
   239b2:	18fb      	adds	r3, r7, r3
   239b4:	2207      	movs	r2, #7
   239b6:	701a      	strb	r2, [r3, #0]
		break;
   239b8:	e08e      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   239ba:	68bb      	ldr	r3, [r7, #8]
   239bc:	0c1b      	lsrs	r3, r3, #16
   239be:	b2da      	uxtb	r2, r3
   239c0:	2314      	movs	r3, #20
   239c2:	18fb      	adds	r3, r7, r3
   239c4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   239c6:	68bb      	ldr	r3, [r7, #8]
   239c8:	0a1b      	lsrs	r3, r3, #8
   239ca:	b2da      	uxtb	r2, r3
   239cc:	2314      	movs	r3, #20
   239ce:	18fb      	adds	r3, r7, r3
   239d0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   239d2:	68bb      	ldr	r3, [r7, #8]
   239d4:	b2da      	uxtb	r2, r3
   239d6:	2314      	movs	r3, #20
   239d8:	18fb      	adds	r3, r7, r3
   239da:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   239dc:	683b      	ldr	r3, [r7, #0]
   239de:	0c1b      	lsrs	r3, r3, #16
   239e0:	b2da      	uxtb	r2, r3
   239e2:	2314      	movs	r3, #20
   239e4:	18fb      	adds	r3, r7, r3
   239e6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   239e8:	683b      	ldr	r3, [r7, #0]
   239ea:	0a1b      	lsrs	r3, r3, #8
   239ec:	b2da      	uxtb	r2, r3
   239ee:	2314      	movs	r3, #20
   239f0:	18fb      	adds	r3, r7, r3
   239f2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   239f4:	683b      	ldr	r3, [r7, #0]
   239f6:	b2da      	uxtb	r2, r3
   239f8:	2314      	movs	r3, #20
   239fa:	18fb      	adds	r3, r7, r3
   239fc:	719a      	strb	r2, [r3, #6]
		len = 8;
   239fe:	231f      	movs	r3, #31
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	2208      	movs	r2, #8
   23a04:	701a      	strb	r2, [r3, #0]
		break;
   23a06:	e067      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23a08:	68bb      	ldr	r3, [r7, #8]
   23a0a:	0a1b      	lsrs	r3, r3, #8
   23a0c:	b2da      	uxtb	r2, r3
   23a0e:	2314      	movs	r3, #20
   23a10:	18fb      	adds	r3, r7, r3
   23a12:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23a14:	2330      	movs	r3, #48	; 0x30
   23a16:	18fb      	adds	r3, r7, r3
   23a18:	781b      	ldrb	r3, [r3, #0]
   23a1a:	2b00      	cmp	r3, #0
   23a1c:	d009      	beq.n	23a32 <spi_cmd+0x1da>
   23a1e:	2314      	movs	r3, #20
   23a20:	18fb      	adds	r3, r7, r3
   23a22:	785b      	ldrb	r3, [r3, #1]
   23a24:	2280      	movs	r2, #128	; 0x80
   23a26:	4252      	negs	r2, r2
   23a28:	4313      	orrs	r3, r2
   23a2a:	b2da      	uxtb	r2, r3
   23a2c:	2314      	movs	r3, #20
   23a2e:	18fb      	adds	r3, r7, r3
   23a30:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   23a32:	68bb      	ldr	r3, [r7, #8]
   23a34:	b2da      	uxtb	r2, r3
   23a36:	2314      	movs	r3, #20
   23a38:	18fb      	adds	r3, r7, r3
   23a3a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23a3c:	687b      	ldr	r3, [r7, #4]
   23a3e:	0e1b      	lsrs	r3, r3, #24
   23a40:	b2da      	uxtb	r2, r3
   23a42:	2314      	movs	r3, #20
   23a44:	18fb      	adds	r3, r7, r3
   23a46:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23a48:	687b      	ldr	r3, [r7, #4]
   23a4a:	0c1b      	lsrs	r3, r3, #16
   23a4c:	b2da      	uxtb	r2, r3
   23a4e:	2314      	movs	r3, #20
   23a50:	18fb      	adds	r3, r7, r3
   23a52:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23a54:	687b      	ldr	r3, [r7, #4]
   23a56:	0a1b      	lsrs	r3, r3, #8
   23a58:	b2da      	uxtb	r2, r3
   23a5a:	2314      	movs	r3, #20
   23a5c:	18fb      	adds	r3, r7, r3
   23a5e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   23a60:	687b      	ldr	r3, [r7, #4]
   23a62:	b2da      	uxtb	r2, r3
   23a64:	2314      	movs	r3, #20
   23a66:	18fb      	adds	r3, r7, r3
   23a68:	719a      	strb	r2, [r3, #6]
		len = 8;
   23a6a:	231f      	movs	r3, #31
   23a6c:	18fb      	adds	r3, r7, r3
   23a6e:	2208      	movs	r2, #8
   23a70:	701a      	strb	r2, [r3, #0]
		break;
   23a72:	e031      	b.n	23ad8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23a74:	68bb      	ldr	r3, [r7, #8]
   23a76:	0c1b      	lsrs	r3, r3, #16
   23a78:	b2da      	uxtb	r2, r3
   23a7a:	2314      	movs	r3, #20
   23a7c:	18fb      	adds	r3, r7, r3
   23a7e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23a80:	68bb      	ldr	r3, [r7, #8]
   23a82:	0a1b      	lsrs	r3, r3, #8
   23a84:	b2da      	uxtb	r2, r3
   23a86:	2314      	movs	r3, #20
   23a88:	18fb      	adds	r3, r7, r3
   23a8a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23a8c:	68bb      	ldr	r3, [r7, #8]
   23a8e:	b2da      	uxtb	r2, r3
   23a90:	2314      	movs	r3, #20
   23a92:	18fb      	adds	r3, r7, r3
   23a94:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   23a96:	687b      	ldr	r3, [r7, #4]
   23a98:	0e1b      	lsrs	r3, r3, #24
   23a9a:	b2da      	uxtb	r2, r3
   23a9c:	2314      	movs	r3, #20
   23a9e:	18fb      	adds	r3, r7, r3
   23aa0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   23aa2:	687b      	ldr	r3, [r7, #4]
   23aa4:	0c1b      	lsrs	r3, r3, #16
   23aa6:	b2da      	uxtb	r2, r3
   23aa8:	2314      	movs	r3, #20
   23aaa:	18fb      	adds	r3, r7, r3
   23aac:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   23aae:	687b      	ldr	r3, [r7, #4]
   23ab0:	0a1b      	lsrs	r3, r3, #8
   23ab2:	b2da      	uxtb	r2, r3
   23ab4:	2314      	movs	r3, #20
   23ab6:	18fb      	adds	r3, r7, r3
   23ab8:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   23aba:	687b      	ldr	r3, [r7, #4]
   23abc:	b2da      	uxtb	r2, r3
   23abe:	2314      	movs	r3, #20
   23ac0:	18fb      	adds	r3, r7, r3
   23ac2:	71da      	strb	r2, [r3, #7]
		len = 9;
   23ac4:	231f      	movs	r3, #31
   23ac6:	18fb      	adds	r3, r7, r3
   23ac8:	2209      	movs	r2, #9
   23aca:	701a      	strb	r2, [r3, #0]
		break;
   23acc:	e004      	b.n	23ad8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   23ace:	231e      	movs	r3, #30
   23ad0:	18fb      	adds	r3, r7, r3
   23ad2:	2200      	movs	r2, #0
   23ad4:	701a      	strb	r2, [r3, #0]
		break;
   23ad6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23ad8:	231e      	movs	r3, #30
   23ada:	18fb      	adds	r3, r7, r3
   23adc:	781b      	ldrb	r3, [r3, #0]
   23ade:	b25b      	sxtb	r3, r3
   23ae0:	2b00      	cmp	r3, #0
   23ae2:	d03f      	beq.n	23b64 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23ae4:	4b24      	ldr	r3, [pc, #144]	; (23b78 <spi_cmd+0x320>)
   23ae6:	781b      	ldrb	r3, [r3, #0]
   23ae8:	2b00      	cmp	r3, #0
   23aea:	d115      	bne.n	23b18 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23aec:	231f      	movs	r3, #31
   23aee:	18fb      	adds	r3, r7, r3
   23af0:	781b      	ldrb	r3, [r3, #0]
   23af2:	1e5c      	subs	r4, r3, #1
   23af4:	231f      	movs	r3, #31
   23af6:	18fb      	adds	r3, r7, r3
   23af8:	781b      	ldrb	r3, [r3, #0]
   23afa:	3b01      	subs	r3, #1
   23afc:	001a      	movs	r2, r3
   23afe:	2314      	movs	r3, #20
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	0019      	movs	r1, r3
   23b04:	207f      	movs	r0, #127	; 0x7f
   23b06:	4b1d      	ldr	r3, [pc, #116]	; (23b7c <spi_cmd+0x324>)
   23b08:	4798      	blx	r3
   23b0a:	0003      	movs	r3, r0
   23b0c:	18db      	adds	r3, r3, r3
   23b0e:	b2da      	uxtb	r2, r3
   23b10:	2314      	movs	r3, #20
   23b12:	18fb      	adds	r3, r7, r3
   23b14:	551a      	strb	r2, [r3, r4]
   23b16:	e006      	b.n	23b26 <spi_cmd+0x2ce>
		else
			len-=1;
   23b18:	231f      	movs	r3, #31
   23b1a:	18fb      	adds	r3, r7, r3
   23b1c:	221f      	movs	r2, #31
   23b1e:	18ba      	adds	r2, r7, r2
   23b20:	7812      	ldrb	r2, [r2, #0]
   23b22:	3a01      	subs	r2, #1
   23b24:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   23b26:	231f      	movs	r3, #31
   23b28:	18fb      	adds	r3, r7, r3
   23b2a:	781b      	ldrb	r3, [r3, #0]
   23b2c:	b29a      	uxth	r2, r3
   23b2e:	2314      	movs	r3, #20
   23b30:	18fb      	adds	r3, r7, r3
   23b32:	0011      	movs	r1, r2
   23b34:	0018      	movs	r0, r3
   23b36:	4b12      	ldr	r3, [pc, #72]	; (23b80 <spi_cmd+0x328>)
   23b38:	4798      	blx	r3
   23b3a:	1e03      	subs	r3, r0, #0
   23b3c:	d012      	beq.n	23b64 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23b3e:	2390      	movs	r3, #144	; 0x90
   23b40:	005a      	lsls	r2, r3, #1
   23b42:	4910      	ldr	r1, [pc, #64]	; (23b84 <spi_cmd+0x32c>)
   23b44:	4b10      	ldr	r3, [pc, #64]	; (23b88 <spi_cmd+0x330>)
   23b46:	0018      	movs	r0, r3
   23b48:	4b10      	ldr	r3, [pc, #64]	; (23b8c <spi_cmd+0x334>)
   23b4a:	4798      	blx	r3
   23b4c:	4b10      	ldr	r3, [pc, #64]	; (23b90 <spi_cmd+0x338>)
   23b4e:	0018      	movs	r0, r3
   23b50:	4b0e      	ldr	r3, [pc, #56]	; (23b8c <spi_cmd+0x334>)
   23b52:	4798      	blx	r3
   23b54:	4b0f      	ldr	r3, [pc, #60]	; (23b94 <spi_cmd+0x33c>)
   23b56:	0018      	movs	r0, r3
   23b58:	4b0c      	ldr	r3, [pc, #48]	; (23b8c <spi_cmd+0x334>)
   23b5a:	4798      	blx	r3
			result = N_FAIL;
   23b5c:	231e      	movs	r3, #30
   23b5e:	18fb      	adds	r3, r7, r3
   23b60:	2200      	movs	r2, #0
   23b62:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23b64:	231e      	movs	r3, #30
   23b66:	18fb      	adds	r3, r7, r3
   23b68:	781b      	ldrb	r3, [r3, #0]
   23b6a:	b25b      	sxtb	r3, r3
}
   23b6c:	0018      	movs	r0, r3
   23b6e:	46bd      	mov	sp, r7
   23b70:	b009      	add	sp, #36	; 0x24
   23b72:	bd90      	pop	{r4, r7, pc}
   23b74:	000398b4 	.word	0x000398b4
   23b78:	200042ac 	.word	0x200042ac
   23b7c:	00023809 	.word	0x00023809
   23b80:	00023751 	.word	0x00023751
   23b84:	0003992c 	.word	0x0003992c
   23b88:	0003933c 	.word	0x0003933c
   23b8c:	0001e399 	.word	0x0001e399
   23b90:	00039350 	.word	0x00039350
   23b94:	0003937c 	.word	0x0003937c

00023b98 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23b98:	b590      	push	{r4, r7, lr}
   23b9a:	b085      	sub	sp, #20
   23b9c:	af00      	add	r7, sp, #0
   23b9e:	0002      	movs	r2, r0
   23ba0:	1dfb      	adds	r3, r7, #7
   23ba2:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   23ba4:	230e      	movs	r3, #14
   23ba6:	18fb      	adds	r3, r7, r3
   23ba8:	2201      	movs	r2, #1
   23baa:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23bac:	4b32      	ldr	r3, [pc, #200]	; (23c78 <spi_data_rsp+0xe0>)
   23bae:	781b      	ldrb	r3, [r3, #0]
   23bb0:	2b00      	cmp	r3, #0
   23bb2:	d104      	bne.n	23bbe <spi_data_rsp+0x26>
		len = 2;
   23bb4:	230f      	movs	r3, #15
   23bb6:	18fb      	adds	r3, r7, r3
   23bb8:	2202      	movs	r2, #2
   23bba:	701a      	strb	r2, [r3, #0]
   23bbc:	e003      	b.n	23bc6 <spi_data_rsp+0x2e>
	else
		len = 3;
   23bbe:	230f      	movs	r3, #15
   23bc0:	18fb      	adds	r3, r7, r3
   23bc2:	2203      	movs	r2, #3
   23bc4:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   23bc6:	230f      	movs	r3, #15
   23bc8:	18fb      	adds	r3, r7, r3
   23bca:	781b      	ldrb	r3, [r3, #0]
   23bcc:	b29a      	uxth	r2, r3
   23bce:	2308      	movs	r3, #8
   23bd0:	18fb      	adds	r3, r7, r3
   23bd2:	0011      	movs	r1, r2
   23bd4:	0018      	movs	r0, r3
   23bd6:	4b29      	ldr	r3, [pc, #164]	; (23c7c <spi_data_rsp+0xe4>)
   23bd8:	4798      	blx	r3
   23bda:	1e03      	subs	r3, r0, #0
   23bdc:	d013      	beq.n	23c06 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   23bde:	239a      	movs	r3, #154	; 0x9a
   23be0:	005a      	lsls	r2, r3, #1
   23be2:	4927      	ldr	r1, [pc, #156]	; (23c80 <spi_data_rsp+0xe8>)
   23be4:	4b27      	ldr	r3, [pc, #156]	; (23c84 <spi_data_rsp+0xec>)
   23be6:	0018      	movs	r0, r3
   23be8:	4b27      	ldr	r3, [pc, #156]	; (23c88 <spi_data_rsp+0xf0>)
   23bea:	4798      	blx	r3
   23bec:	4b27      	ldr	r3, [pc, #156]	; (23c8c <spi_data_rsp+0xf4>)
   23bee:	0018      	movs	r0, r3
   23bf0:	4b25      	ldr	r3, [pc, #148]	; (23c88 <spi_data_rsp+0xf0>)
   23bf2:	4798      	blx	r3
   23bf4:	4b26      	ldr	r3, [pc, #152]	; (23c90 <spi_data_rsp+0xf8>)
   23bf6:	0018      	movs	r0, r3
   23bf8:	4b23      	ldr	r3, [pc, #140]	; (23c88 <spi_data_rsp+0xf0>)
   23bfa:	4798      	blx	r3
		result = N_FAIL;
   23bfc:	230e      	movs	r3, #14
   23bfe:	18fb      	adds	r3, r7, r3
   23c00:	2200      	movs	r2, #0
   23c02:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23c04:	e030      	b.n	23c68 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23c06:	230f      	movs	r3, #15
   23c08:	18fb      	adds	r3, r7, r3
   23c0a:	781b      	ldrb	r3, [r3, #0]
   23c0c:	3b01      	subs	r3, #1
   23c0e:	2208      	movs	r2, #8
   23c10:	18ba      	adds	r2, r7, r2
   23c12:	5cd3      	ldrb	r3, [r2, r3]
   23c14:	2b00      	cmp	r3, #0
   23c16:	d108      	bne.n	23c2a <spi_data_rsp+0x92>
   23c18:	230f      	movs	r3, #15
   23c1a:	18fb      	adds	r3, r7, r3
   23c1c:	781b      	ldrb	r3, [r3, #0]
   23c1e:	3b02      	subs	r3, #2
   23c20:	2208      	movs	r2, #8
   23c22:	18ba      	adds	r2, r7, r2
   23c24:	5cd3      	ldrb	r3, [r2, r3]
   23c26:	2bc3      	cmp	r3, #195	; 0xc3
   23c28:	d01e      	beq.n	23c68 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23c2a:	233c      	movs	r3, #60	; 0x3c
   23c2c:	33ff      	adds	r3, #255	; 0xff
   23c2e:	001a      	movs	r2, r3
   23c30:	4913      	ldr	r1, [pc, #76]	; (23c80 <spi_data_rsp+0xe8>)
   23c32:	4b14      	ldr	r3, [pc, #80]	; (23c84 <spi_data_rsp+0xec>)
   23c34:	0018      	movs	r0, r3
   23c36:	4b14      	ldr	r3, [pc, #80]	; (23c88 <spi_data_rsp+0xf0>)
   23c38:	4798      	blx	r3
   23c3a:	2308      	movs	r3, #8
   23c3c:	18fb      	adds	r3, r7, r3
   23c3e:	781b      	ldrb	r3, [r3, #0]
   23c40:	0019      	movs	r1, r3
   23c42:	2308      	movs	r3, #8
   23c44:	18fb      	adds	r3, r7, r3
   23c46:	785b      	ldrb	r3, [r3, #1]
   23c48:	001a      	movs	r2, r3
   23c4a:	2308      	movs	r3, #8
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	789b      	ldrb	r3, [r3, #2]
   23c50:	4810      	ldr	r0, [pc, #64]	; (23c94 <spi_data_rsp+0xfc>)
   23c52:	4c0d      	ldr	r4, [pc, #52]	; (23c88 <spi_data_rsp+0xf0>)
   23c54:	47a0      	blx	r4
   23c56:	4b0e      	ldr	r3, [pc, #56]	; (23c90 <spi_data_rsp+0xf8>)
   23c58:	0018      	movs	r0, r3
   23c5a:	4b0b      	ldr	r3, [pc, #44]	; (23c88 <spi_data_rsp+0xf0>)
   23c5c:	4798      	blx	r3
		result = N_FAIL;
   23c5e:	230e      	movs	r3, #14
   23c60:	18fb      	adds	r3, r7, r3
   23c62:	2200      	movs	r2, #0
   23c64:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23c66:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23c68:	230e      	movs	r3, #14
   23c6a:	18fb      	adds	r3, r7, r3
   23c6c:	781b      	ldrb	r3, [r3, #0]
   23c6e:	b25b      	sxtb	r3, r3
}
   23c70:	0018      	movs	r0, r3
   23c72:	46bd      	mov	sp, r7
   23c74:	b005      	add	sp, #20
   23c76:	bd90      	pop	{r4, r7, pc}
   23c78:	200042ac 	.word	0x200042ac
   23c7c:	0002370d 	.word	0x0002370d
   23c80:	00039934 	.word	0x00039934
   23c84:	0003933c 	.word	0x0003933c
   23c88:	0001e399 	.word	0x0001e399
   23c8c:	00039380 	.word	0x00039380
   23c90:	0003937c 	.word	0x0003937c
   23c94:	000393a0 	.word	0x000393a0

00023c98 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23c98:	b580      	push	{r7, lr}
   23c9a:	b084      	sub	sp, #16
   23c9c:	af00      	add	r7, sp, #0
   23c9e:	0002      	movs	r2, r0
   23ca0:	1dfb      	adds	r3, r7, #7
   23ca2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   23ca4:	230f      	movs	r3, #15
   23ca6:	18fb      	adds	r3, r7, r3
   23ca8:	2201      	movs	r2, #1
   23caa:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23cac:	1dfb      	adds	r3, r7, #7
   23cae:	781b      	ldrb	r3, [r3, #0]
   23cb0:	2bcf      	cmp	r3, #207	; 0xcf
   23cb2:	d007      	beq.n	23cc4 <spi_cmd_rsp+0x2c>
   23cb4:	1dfb      	adds	r3, r7, #7
   23cb6:	781b      	ldrb	r3, [r3, #0]
   23cb8:	2bc5      	cmp	r3, #197	; 0xc5
   23cba:	d003      	beq.n	23cc4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   23cbc:	1dfb      	adds	r3, r7, #7
   23cbe:	781b      	ldrb	r3, [r3, #0]
   23cc0:	2bc6      	cmp	r3, #198	; 0xc6
   23cc2:	d10c      	bne.n	23cde <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23cc4:	230d      	movs	r3, #13
   23cc6:	18fb      	adds	r3, r7, r3
   23cc8:	2101      	movs	r1, #1
   23cca:	0018      	movs	r0, r3
   23ccc:	4b3b      	ldr	r3, [pc, #236]	; (23dbc <spi_cmd_rsp+0x124>)
   23cce:	4798      	blx	r3
   23cd0:	1e03      	subs	r3, r0, #0
   23cd2:	d004      	beq.n	23cde <spi_cmd_rsp+0x46>
			result = N_FAIL;
   23cd4:	230f      	movs	r3, #15
   23cd6:	18fb      	adds	r3, r7, r3
   23cd8:	2200      	movs	r2, #0
   23cda:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23cdc:	e065      	b.n	23daa <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23cde:	230e      	movs	r3, #14
   23ce0:	18fb      	adds	r3, r7, r3
   23ce2:	220a      	movs	r2, #10
   23ce4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23ce6:	230d      	movs	r3, #13
   23ce8:	18fb      	adds	r3, r7, r3
   23cea:	2101      	movs	r1, #1
   23cec:	0018      	movs	r0, r3
   23cee:	4b33      	ldr	r3, [pc, #204]	; (23dbc <spi_cmd_rsp+0x124>)
   23cf0:	4798      	blx	r3
   23cf2:	1e03      	subs	r3, r0, #0
   23cf4:	d014      	beq.n	23d20 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23cf6:	235c      	movs	r3, #92	; 0x5c
   23cf8:	33ff      	adds	r3, #255	; 0xff
   23cfa:	001a      	movs	r2, r3
   23cfc:	4930      	ldr	r1, [pc, #192]	; (23dc0 <spi_cmd_rsp+0x128>)
   23cfe:	4b31      	ldr	r3, [pc, #196]	; (23dc4 <spi_cmd_rsp+0x12c>)
   23d00:	0018      	movs	r0, r3
   23d02:	4b31      	ldr	r3, [pc, #196]	; (23dc8 <spi_cmd_rsp+0x130>)
   23d04:	4798      	blx	r3
   23d06:	4b31      	ldr	r3, [pc, #196]	; (23dcc <spi_cmd_rsp+0x134>)
   23d08:	0018      	movs	r0, r3
   23d0a:	4b2f      	ldr	r3, [pc, #188]	; (23dc8 <spi_cmd_rsp+0x130>)
   23d0c:	4798      	blx	r3
   23d0e:	4b30      	ldr	r3, [pc, #192]	; (23dd0 <spi_cmd_rsp+0x138>)
   23d10:	0018      	movs	r0, r3
   23d12:	4b2d      	ldr	r3, [pc, #180]	; (23dc8 <spi_cmd_rsp+0x130>)
   23d14:	4798      	blx	r3
			result = N_FAIL;
   23d16:	230f      	movs	r3, #15
   23d18:	18fb      	adds	r3, r7, r3
   23d1a:	2200      	movs	r2, #0
   23d1c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23d1e:	e044      	b.n	23daa <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23d20:	230d      	movs	r3, #13
   23d22:	18fb      	adds	r3, r7, r3
   23d24:	781b      	ldrb	r3, [r3, #0]
   23d26:	1dfa      	adds	r2, r7, #7
   23d28:	7812      	ldrb	r2, [r2, #0]
   23d2a:	429a      	cmp	r2, r3
   23d2c:	d00b      	beq.n	23d46 <spi_cmd_rsp+0xae>
   23d2e:	230e      	movs	r3, #14
   23d30:	18fb      	adds	r3, r7, r3
   23d32:	781b      	ldrb	r3, [r3, #0]
   23d34:	b25b      	sxtb	r3, r3
   23d36:	b2da      	uxtb	r2, r3
   23d38:	3a01      	subs	r2, #1
   23d3a:	b2d1      	uxtb	r1, r2
   23d3c:	220e      	movs	r2, #14
   23d3e:	18ba      	adds	r2, r7, r2
   23d40:	7011      	strb	r1, [r2, #0]
   23d42:	2b00      	cmp	r3, #0
   23d44:	dccf      	bgt.n	23ce6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23d46:	230e      	movs	r3, #14
   23d48:	18fb      	adds	r3, r7, r3
   23d4a:	220a      	movs	r2, #10
   23d4c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23d4e:	230d      	movs	r3, #13
   23d50:	18fb      	adds	r3, r7, r3
   23d52:	2101      	movs	r1, #1
   23d54:	0018      	movs	r0, r3
   23d56:	4b19      	ldr	r3, [pc, #100]	; (23dbc <spi_cmd_rsp+0x124>)
   23d58:	4798      	blx	r3
   23d5a:	1e03      	subs	r3, r0, #0
   23d5c:	d014      	beq.n	23d88 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23d5e:	236a      	movs	r3, #106	; 0x6a
   23d60:	33ff      	adds	r3, #255	; 0xff
   23d62:	001a      	movs	r2, r3
   23d64:	4916      	ldr	r1, [pc, #88]	; (23dc0 <spi_cmd_rsp+0x128>)
   23d66:	4b17      	ldr	r3, [pc, #92]	; (23dc4 <spi_cmd_rsp+0x12c>)
   23d68:	0018      	movs	r0, r3
   23d6a:	4b17      	ldr	r3, [pc, #92]	; (23dc8 <spi_cmd_rsp+0x130>)
   23d6c:	4798      	blx	r3
   23d6e:	4b17      	ldr	r3, [pc, #92]	; (23dcc <spi_cmd_rsp+0x134>)
   23d70:	0018      	movs	r0, r3
   23d72:	4b15      	ldr	r3, [pc, #84]	; (23dc8 <spi_cmd_rsp+0x130>)
   23d74:	4798      	blx	r3
   23d76:	4b16      	ldr	r3, [pc, #88]	; (23dd0 <spi_cmd_rsp+0x138>)
   23d78:	0018      	movs	r0, r3
   23d7a:	4b13      	ldr	r3, [pc, #76]	; (23dc8 <spi_cmd_rsp+0x130>)
   23d7c:	4798      	blx	r3
			result = N_FAIL;
   23d7e:	230f      	movs	r3, #15
   23d80:	18fb      	adds	r3, r7, r3
   23d82:	2200      	movs	r2, #0
   23d84:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23d86:	e010      	b.n	23daa <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23d88:	230d      	movs	r3, #13
   23d8a:	18fb      	adds	r3, r7, r3
   23d8c:	781b      	ldrb	r3, [r3, #0]
   23d8e:	2b00      	cmp	r3, #0
   23d90:	d00b      	beq.n	23daa <spi_cmd_rsp+0x112>
   23d92:	230e      	movs	r3, #14
   23d94:	18fb      	adds	r3, r7, r3
   23d96:	781b      	ldrb	r3, [r3, #0]
   23d98:	b25b      	sxtb	r3, r3
   23d9a:	b2da      	uxtb	r2, r3
   23d9c:	3a01      	subs	r2, #1
   23d9e:	b2d1      	uxtb	r1, r2
   23da0:	220e      	movs	r2, #14
   23da2:	18ba      	adds	r2, r7, r2
   23da4:	7011      	strb	r1, [r2, #0]
   23da6:	2b00      	cmp	r3, #0
   23da8:	dcd1      	bgt.n	23d4e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23daa:	230f      	movs	r3, #15
   23dac:	18fb      	adds	r3, r7, r3
   23dae:	781b      	ldrb	r3, [r3, #0]
   23db0:	b25b      	sxtb	r3, r3
}
   23db2:	0018      	movs	r0, r3
   23db4:	46bd      	mov	sp, r7
   23db6:	b004      	add	sp, #16
   23db8:	bd80      	pop	{r7, pc}
   23dba:	46c0      	nop			; (mov r8, r8)
   23dbc:	0002370d 	.word	0x0002370d
   23dc0:	00039944 	.word	0x00039944
   23dc4:	0003933c 	.word	0x0003933c
   23dc8:	0001e399 	.word	0x0001e399
   23dcc:	000393d0 	.word	0x000393d0
   23dd0:	0003937c 	.word	0x0003937c

00023dd4 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   23dd4:	b590      	push	{r4, r7, lr}
   23dd6:	b09f      	sub	sp, #124	; 0x7c
   23dd8:	af00      	add	r7, sp, #0
   23dda:	60b9      	str	r1, [r7, #8]
   23ddc:	607a      	str	r2, [r7, #4]
   23dde:	603b      	str	r3, [r7, #0]
   23de0:	230f      	movs	r3, #15
   23de2:	18fb      	adds	r3, r7, r3
   23de4:	1c02      	adds	r2, r0, #0
   23de6:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23de8:	2300      	movs	r3, #0
   23dea:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23dec:	2301      	movs	r3, #1
   23dee:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23df0:	2338      	movs	r3, #56	; 0x38
   23df2:	18fb      	adds	r3, r7, r3
   23df4:	220f      	movs	r2, #15
   23df6:	18ba      	adds	r2, r7, r2
   23df8:	7812      	ldrb	r2, [r2, #0]
   23dfa:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23dfc:	230f      	movs	r3, #15
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	781b      	ldrb	r3, [r3, #0]
   23e02:	3bc1      	subs	r3, #193	; 0xc1
   23e04:	2b0e      	cmp	r3, #14
   23e06:	d900      	bls.n	23e0a <spi_cmd_complete+0x36>
   23e08:	e103      	b.n	24012 <spi_cmd_complete+0x23e>
   23e0a:	009a      	lsls	r2, r3, #2
   23e0c:	4bd1      	ldr	r3, [pc, #836]	; (24154 <spi_cmd_complete+0x380>)
   23e0e:	18d3      	adds	r3, r2, r3
   23e10:	681b      	ldr	r3, [r3, #0]
   23e12:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23e14:	68bb      	ldr	r3, [r7, #8]
   23e16:	0c1b      	lsrs	r3, r3, #16
   23e18:	b2da      	uxtb	r2, r3
   23e1a:	2338      	movs	r3, #56	; 0x38
   23e1c:	18fb      	adds	r3, r7, r3
   23e1e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23e20:	68bb      	ldr	r3, [r7, #8]
   23e22:	0a1b      	lsrs	r3, r3, #8
   23e24:	b2da      	uxtb	r2, r3
   23e26:	2338      	movs	r3, #56	; 0x38
   23e28:	18fb      	adds	r3, r7, r3
   23e2a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23e2c:	68bb      	ldr	r3, [r7, #8]
   23e2e:	b2da      	uxtb	r2, r3
   23e30:	2338      	movs	r3, #56	; 0x38
   23e32:	18fb      	adds	r3, r7, r3
   23e34:	70da      	strb	r2, [r3, #3]
		len = 5;
   23e36:	2305      	movs	r3, #5
   23e38:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23e3a:	e0ed      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23e3c:	68bb      	ldr	r3, [r7, #8]
   23e3e:	0a1b      	lsrs	r3, r3, #8
   23e40:	b2da      	uxtb	r2, r3
   23e42:	2338      	movs	r3, #56	; 0x38
   23e44:	18fb      	adds	r3, r7, r3
   23e46:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23e48:	2388      	movs	r3, #136	; 0x88
   23e4a:	18fb      	adds	r3, r7, r3
   23e4c:	781b      	ldrb	r3, [r3, #0]
   23e4e:	2b01      	cmp	r3, #1
   23e50:	d109      	bne.n	23e66 <spi_cmd_complete+0x92>
   23e52:	2338      	movs	r3, #56	; 0x38
   23e54:	18fb      	adds	r3, r7, r3
   23e56:	785b      	ldrb	r3, [r3, #1]
   23e58:	2280      	movs	r2, #128	; 0x80
   23e5a:	4252      	negs	r2, r2
   23e5c:	4313      	orrs	r3, r2
   23e5e:	b2da      	uxtb	r2, r3
   23e60:	2338      	movs	r3, #56	; 0x38
   23e62:	18fb      	adds	r3, r7, r3
   23e64:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   23e66:	68bb      	ldr	r3, [r7, #8]
   23e68:	b2da      	uxtb	r2, r3
   23e6a:	2338      	movs	r3, #56	; 0x38
   23e6c:	18fb      	adds	r3, r7, r3
   23e6e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23e70:	2338      	movs	r3, #56	; 0x38
   23e72:	18fb      	adds	r3, r7, r3
   23e74:	2200      	movs	r2, #0
   23e76:	70da      	strb	r2, [r3, #3]
		len = 5;
   23e78:	2305      	movs	r3, #5
   23e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23e7c:	e0cc      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   23e7e:	2338      	movs	r3, #56	; 0x38
   23e80:	18fb      	adds	r3, r7, r3
   23e82:	2200      	movs	r2, #0
   23e84:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23e86:	2338      	movs	r3, #56	; 0x38
   23e88:	18fb      	adds	r3, r7, r3
   23e8a:	2200      	movs	r2, #0
   23e8c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23e8e:	2338      	movs	r3, #56	; 0x38
   23e90:	18fb      	adds	r3, r7, r3
   23e92:	2200      	movs	r2, #0
   23e94:	70da      	strb	r2, [r3, #3]
		len = 5;
   23e96:	2305      	movs	r3, #5
   23e98:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23e9a:	e0bd      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   23e9c:	2338      	movs	r3, #56	; 0x38
   23e9e:	18fb      	adds	r3, r7, r3
   23ea0:	2200      	movs	r2, #0
   23ea2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23ea4:	2338      	movs	r3, #56	; 0x38
   23ea6:	18fb      	adds	r3, r7, r3
   23ea8:	2200      	movs	r2, #0
   23eaa:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23eac:	2338      	movs	r3, #56	; 0x38
   23eae:	18fb      	adds	r3, r7, r3
   23eb0:	2200      	movs	r2, #0
   23eb2:	70da      	strb	r2, [r3, #3]
		len = 5;
   23eb4:	2305      	movs	r3, #5
   23eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23eb8:	e0ae      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   23eba:	2338      	movs	r3, #56	; 0x38
   23ebc:	18fb      	adds	r3, r7, r3
   23ebe:	22ff      	movs	r2, #255	; 0xff
   23ec0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   23ec2:	2338      	movs	r3, #56	; 0x38
   23ec4:	18fb      	adds	r3, r7, r3
   23ec6:	22ff      	movs	r2, #255	; 0xff
   23ec8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   23eca:	2338      	movs	r3, #56	; 0x38
   23ecc:	18fb      	adds	r3, r7, r3
   23ece:	22ff      	movs	r2, #255	; 0xff
   23ed0:	70da      	strb	r2, [r3, #3]
		len = 5;
   23ed2:	2305      	movs	r3, #5
   23ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23ed6:	e09f      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   23ed8:	68bb      	ldr	r3, [r7, #8]
   23eda:	0c1b      	lsrs	r3, r3, #16
   23edc:	b2da      	uxtb	r2, r3
   23ede:	2338      	movs	r3, #56	; 0x38
   23ee0:	18fb      	adds	r3, r7, r3
   23ee2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23ee4:	68bb      	ldr	r3, [r7, #8]
   23ee6:	0a1b      	lsrs	r3, r3, #8
   23ee8:	b2da      	uxtb	r2, r3
   23eea:	2338      	movs	r3, #56	; 0x38
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23ef0:	68bb      	ldr	r3, [r7, #8]
   23ef2:	b2da      	uxtb	r2, r3
   23ef4:	2338      	movs	r3, #56	; 0x38
   23ef6:	18fb      	adds	r3, r7, r3
   23ef8:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23efa:	683b      	ldr	r3, [r7, #0]
   23efc:	0a1b      	lsrs	r3, r3, #8
   23efe:	b2da      	uxtb	r2, r3
   23f00:	2338      	movs	r3, #56	; 0x38
   23f02:	18fb      	adds	r3, r7, r3
   23f04:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23f06:	683b      	ldr	r3, [r7, #0]
   23f08:	b2da      	uxtb	r2, r3
   23f0a:	2338      	movs	r3, #56	; 0x38
   23f0c:	18fb      	adds	r3, r7, r3
   23f0e:	715a      	strb	r2, [r3, #5]
		len = 7;
   23f10:	2307      	movs	r3, #7
   23f12:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23f14:	e080      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   23f16:	68bb      	ldr	r3, [r7, #8]
   23f18:	0c1b      	lsrs	r3, r3, #16
   23f1a:	b2da      	uxtb	r2, r3
   23f1c:	2338      	movs	r3, #56	; 0x38
   23f1e:	18fb      	adds	r3, r7, r3
   23f20:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23f22:	68bb      	ldr	r3, [r7, #8]
   23f24:	0a1b      	lsrs	r3, r3, #8
   23f26:	b2da      	uxtb	r2, r3
   23f28:	2338      	movs	r3, #56	; 0x38
   23f2a:	18fb      	adds	r3, r7, r3
   23f2c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23f2e:	68bb      	ldr	r3, [r7, #8]
   23f30:	b2da      	uxtb	r2, r3
   23f32:	2338      	movs	r3, #56	; 0x38
   23f34:	18fb      	adds	r3, r7, r3
   23f36:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23f38:	683b      	ldr	r3, [r7, #0]
   23f3a:	0c1b      	lsrs	r3, r3, #16
   23f3c:	b2da      	uxtb	r2, r3
   23f3e:	2338      	movs	r3, #56	; 0x38
   23f40:	18fb      	adds	r3, r7, r3
   23f42:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   23f44:	683b      	ldr	r3, [r7, #0]
   23f46:	0a1b      	lsrs	r3, r3, #8
   23f48:	b2da      	uxtb	r2, r3
   23f4a:	2338      	movs	r3, #56	; 0x38
   23f4c:	18fb      	adds	r3, r7, r3
   23f4e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23f50:	683b      	ldr	r3, [r7, #0]
   23f52:	b2da      	uxtb	r2, r3
   23f54:	2338      	movs	r3, #56	; 0x38
   23f56:	18fb      	adds	r3, r7, r3
   23f58:	719a      	strb	r2, [r3, #6]
		len = 8;
   23f5a:	2308      	movs	r3, #8
   23f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23f5e:	e05b      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23f60:	68bb      	ldr	r3, [r7, #8]
   23f62:	0a1b      	lsrs	r3, r3, #8
   23f64:	b2da      	uxtb	r2, r3
   23f66:	2338      	movs	r3, #56	; 0x38
   23f68:	18fb      	adds	r3, r7, r3
   23f6a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23f6c:	2388      	movs	r3, #136	; 0x88
   23f6e:	18fb      	adds	r3, r7, r3
   23f70:	781b      	ldrb	r3, [r3, #0]
   23f72:	2b01      	cmp	r3, #1
   23f74:	d109      	bne.n	23f8a <spi_cmd_complete+0x1b6>
   23f76:	2338      	movs	r3, #56	; 0x38
   23f78:	18fb      	adds	r3, r7, r3
   23f7a:	785b      	ldrb	r3, [r3, #1]
   23f7c:	2280      	movs	r2, #128	; 0x80
   23f7e:	4252      	negs	r2, r2
   23f80:	4313      	orrs	r3, r2
   23f82:	b2da      	uxtb	r2, r3
   23f84:	2338      	movs	r3, #56	; 0x38
   23f86:	18fb      	adds	r3, r7, r3
   23f88:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23f8a:	68bb      	ldr	r3, [r7, #8]
   23f8c:	b2da      	uxtb	r2, r3
   23f8e:	2338      	movs	r3, #56	; 0x38
   23f90:	18fb      	adds	r3, r7, r3
   23f92:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   23f94:	687b      	ldr	r3, [r7, #4]
   23f96:	78da      	ldrb	r2, [r3, #3]
   23f98:	2338      	movs	r3, #56	; 0x38
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23f9e:	687b      	ldr	r3, [r7, #4]
   23fa0:	789a      	ldrb	r2, [r3, #2]
   23fa2:	2338      	movs	r3, #56	; 0x38
   23fa4:	18fb      	adds	r3, r7, r3
   23fa6:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23fa8:	687b      	ldr	r3, [r7, #4]
   23faa:	785a      	ldrb	r2, [r3, #1]
   23fac:	2338      	movs	r3, #56	; 0x38
   23fae:	18fb      	adds	r3, r7, r3
   23fb0:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   23fb2:	687b      	ldr	r3, [r7, #4]
   23fb4:	781a      	ldrb	r2, [r3, #0]
   23fb6:	2338      	movs	r3, #56	; 0x38
   23fb8:	18fb      	adds	r3, r7, r3
   23fba:	719a      	strb	r2, [r3, #6]
		len = 8;
   23fbc:	2308      	movs	r3, #8
   23fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23fc0:	e02a      	b.n	24018 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   23fc2:	68bb      	ldr	r3, [r7, #8]
   23fc4:	0c1b      	lsrs	r3, r3, #16
   23fc6:	b2da      	uxtb	r2, r3
   23fc8:	2338      	movs	r3, #56	; 0x38
   23fca:	18fb      	adds	r3, r7, r3
   23fcc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23fce:	68bb      	ldr	r3, [r7, #8]
   23fd0:	0a1b      	lsrs	r3, r3, #8
   23fd2:	b2da      	uxtb	r2, r3
   23fd4:	2338      	movs	r3, #56	; 0x38
   23fd6:	18fb      	adds	r3, r7, r3
   23fd8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23fda:	68bb      	ldr	r3, [r7, #8]
   23fdc:	b2da      	uxtb	r2, r3
   23fde:	2338      	movs	r3, #56	; 0x38
   23fe0:	18fb      	adds	r3, r7, r3
   23fe2:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23fe4:	687b      	ldr	r3, [r7, #4]
   23fe6:	78da      	ldrb	r2, [r3, #3]
   23fe8:	2338      	movs	r3, #56	; 0x38
   23fea:	18fb      	adds	r3, r7, r3
   23fec:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23fee:	687b      	ldr	r3, [r7, #4]
   23ff0:	789a      	ldrb	r2, [r3, #2]
   23ff2:	2338      	movs	r3, #56	; 0x38
   23ff4:	18fb      	adds	r3, r7, r3
   23ff6:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23ff8:	687b      	ldr	r3, [r7, #4]
   23ffa:	785a      	ldrb	r2, [r3, #1]
   23ffc:	2338      	movs	r3, #56	; 0x38
   23ffe:	18fb      	adds	r3, r7, r3
   24000:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   24002:	687b      	ldr	r3, [r7, #4]
   24004:	781a      	ldrb	r2, [r3, #0]
   24006:	2338      	movs	r3, #56	; 0x38
   24008:	18fb      	adds	r3, r7, r3
   2400a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2400c:	2309      	movs	r3, #9
   2400e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24010:	e002      	b.n	24018 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   24012:	2300      	movs	r3, #0
   24014:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24016:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2401a:	2b01      	cmp	r3, #1
   2401c:	d001      	beq.n	24022 <spi_cmd_complete+0x24e>
		return result;
   2401e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24020:	e33a      	b.n	24698 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   24022:	4b4d      	ldr	r3, [pc, #308]	; (24158 <spi_cmd_complete+0x384>)
   24024:	781b      	ldrb	r3, [r3, #0]
   24026:	2b00      	cmp	r3, #0
   24028:	d111      	bne.n	2404e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   2402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2402c:	1e5c      	subs	r4, r3, #1
   2402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24030:	3b01      	subs	r3, #1
   24032:	001a      	movs	r2, r3
   24034:	2338      	movs	r3, #56	; 0x38
   24036:	18fb      	adds	r3, r7, r3
   24038:	0019      	movs	r1, r3
   2403a:	207f      	movs	r0, #127	; 0x7f
   2403c:	4b47      	ldr	r3, [pc, #284]	; (2415c <spi_cmd_complete+0x388>)
   2403e:	4798      	blx	r3
   24040:	0003      	movs	r3, r0
   24042:	18db      	adds	r3, r3, r3
   24044:	b2da      	uxtb	r2, r3
   24046:	2338      	movs	r3, #56	; 0x38
   24048:	18fb      	adds	r3, r7, r3
   2404a:	551a      	strb	r2, [r3, r4]
   2404c:	e002      	b.n	24054 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24050:	3b01      	subs	r3, #1
   24052:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24054:	230f      	movs	r3, #15
   24056:	18fb      	adds	r3, r7, r3
   24058:	781b      	ldrb	r3, [r3, #0]
   2405a:	2bcf      	cmp	r3, #207	; 0xcf
   2405c:	d009      	beq.n	24072 <spi_cmd_complete+0x29e>
   2405e:	230f      	movs	r3, #15
   24060:	18fb      	adds	r3, r7, r3
   24062:	781b      	ldrb	r3, [r3, #0]
   24064:	2bc5      	cmp	r3, #197	; 0xc5
   24066:	d004      	beq.n	24072 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24068:	230f      	movs	r3, #15
   2406a:	18fb      	adds	r3, r7, r3
   2406c:	781b      	ldrb	r3, [r3, #0]
   2406e:	2bc6      	cmp	r3, #198	; 0xc6
   24070:	d103      	bne.n	2407a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24074:	3306      	adds	r3, #6
   24076:	673b      	str	r3, [r7, #112]	; 0x70
   24078:	e018      	b.n	240ac <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2407a:	230f      	movs	r3, #15
   2407c:	18fb      	adds	r3, r7, r3
   2407e:	781b      	ldrb	r3, [r3, #0]
   24080:	2bc4      	cmp	r3, #196	; 0xc4
   24082:	d004      	beq.n	2408e <spi_cmd_complete+0x2ba>
   24084:	230f      	movs	r3, #15
   24086:	18fb      	adds	r3, r7, r3
   24088:	781b      	ldrb	r3, [r3, #0]
   2408a:	2bca      	cmp	r3, #202	; 0xca
   2408c:	d10b      	bne.n	240a6 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   2408e:	4b32      	ldr	r3, [pc, #200]	; (24158 <spi_cmd_complete+0x384>)
   24090:	781b      	ldrb	r3, [r3, #0]
   24092:	2b00      	cmp	r3, #0
   24094:	d103      	bne.n	2409e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24098:	330c      	adds	r3, #12
   2409a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   2409c:	e006      	b.n	240ac <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   240a0:	330a      	adds	r3, #10
   240a2:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   240a4:	e002      	b.n	240ac <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   240a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   240a8:	3305      	adds	r3, #5
   240aa:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   240ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   240ae:	2b20      	cmp	r3, #32
   240b0:	d914      	bls.n	240dc <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   240b2:	23f7      	movs	r3, #247	; 0xf7
   240b4:	005a      	lsls	r2, r3, #1
   240b6:	492a      	ldr	r1, [pc, #168]	; (24160 <spi_cmd_complete+0x38c>)
   240b8:	4b2a      	ldr	r3, [pc, #168]	; (24164 <spi_cmd_complete+0x390>)
   240ba:	0018      	movs	r0, r3
   240bc:	4b2a      	ldr	r3, [pc, #168]	; (24168 <spi_cmd_complete+0x394>)
   240be:	4798      	blx	r3
   240c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   240c2:	4b2a      	ldr	r3, [pc, #168]	; (2416c <spi_cmd_complete+0x398>)
   240c4:	2220      	movs	r2, #32
   240c6:	0018      	movs	r0, r3
   240c8:	4b27      	ldr	r3, [pc, #156]	; (24168 <spi_cmd_complete+0x394>)
   240ca:	4798      	blx	r3
   240cc:	4b28      	ldr	r3, [pc, #160]	; (24170 <spi_cmd_complete+0x39c>)
   240ce:	0018      	movs	r0, r3
   240d0:	4b25      	ldr	r3, [pc, #148]	; (24168 <spi_cmd_complete+0x394>)
   240d2:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   240d4:	2300      	movs	r3, #0
   240d6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   240d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   240da:	e2dd      	b.n	24698 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   240dc:	2377      	movs	r3, #119	; 0x77
   240de:	18fb      	adds	r3, r7, r3
   240e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   240e2:	701a      	strb	r2, [r3, #0]
   240e4:	e00d      	b.n	24102 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   240e6:	2377      	movs	r3, #119	; 0x77
   240e8:	18fb      	adds	r3, r7, r3
   240ea:	781b      	ldrb	r3, [r3, #0]
   240ec:	2238      	movs	r2, #56	; 0x38
   240ee:	18ba      	adds	r2, r7, r2
   240f0:	2100      	movs	r1, #0
   240f2:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   240f4:	2377      	movs	r3, #119	; 0x77
   240f6:	18fb      	adds	r3, r7, r3
   240f8:	781a      	ldrb	r2, [r3, #0]
   240fa:	2377      	movs	r3, #119	; 0x77
   240fc:	18fb      	adds	r3, r7, r3
   240fe:	3201      	adds	r2, #1
   24100:	701a      	strb	r2, [r3, #0]
   24102:	2377      	movs	r3, #119	; 0x77
   24104:	18fb      	adds	r3, r7, r3
   24106:	781a      	ldrb	r2, [r3, #0]
   24108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2410a:	429a      	cmp	r2, r3
   2410c:	d3eb      	bcc.n	240e6 <spi_cmd_complete+0x312>
	}
	rix = len;
   2410e:	2376      	movs	r3, #118	; 0x76
   24110:	18fb      	adds	r3, r7, r3
   24112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24114:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24118:	b29a      	uxth	r2, r3
   2411a:	2318      	movs	r3, #24
   2411c:	18f9      	adds	r1, r7, r3
   2411e:	2338      	movs	r3, #56	; 0x38
   24120:	18fb      	adds	r3, r7, r3
   24122:	0018      	movs	r0, r3
   24124:	4b13      	ldr	r3, [pc, #76]	; (24174 <spi_cmd_complete+0x3a0>)
   24126:	4798      	blx	r3
   24128:	1e03      	subs	r3, r0, #0
   2412a:	d027      	beq.n	2417c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2412c:	23fa      	movs	r3, #250	; 0xfa
   2412e:	33ff      	adds	r3, #255	; 0xff
   24130:	001a      	movs	r2, r3
   24132:	490b      	ldr	r1, [pc, #44]	; (24160 <spi_cmd_complete+0x38c>)
   24134:	4b0b      	ldr	r3, [pc, #44]	; (24164 <spi_cmd_complete+0x390>)
   24136:	0018      	movs	r0, r3
   24138:	4b0b      	ldr	r3, [pc, #44]	; (24168 <spi_cmd_complete+0x394>)
   2413a:	4798      	blx	r3
   2413c:	4b0e      	ldr	r3, [pc, #56]	; (24178 <spi_cmd_complete+0x3a4>)
   2413e:	0018      	movs	r0, r3
   24140:	4b09      	ldr	r3, [pc, #36]	; (24168 <spi_cmd_complete+0x394>)
   24142:	4798      	blx	r3
   24144:	4b0a      	ldr	r3, [pc, #40]	; (24170 <spi_cmd_complete+0x39c>)
   24146:	0018      	movs	r0, r3
   24148:	4b07      	ldr	r3, [pc, #28]	; (24168 <spi_cmd_complete+0x394>)
   2414a:	4798      	blx	r3
		result = N_FAIL;
   2414c:	2300      	movs	r3, #0
   2414e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24152:	e2a1      	b.n	24698 <spi_cmd_complete+0x8c4>
   24154:	000398f0 	.word	0x000398f0
   24158:	200042ac 	.word	0x200042ac
   2415c:	00023809 	.word	0x00023809
   24160:	00039950 	.word	0x00039950
   24164:	0003933c 	.word	0x0003933c
   24168:	0001e399 	.word	0x0001e399
   2416c:	00039404 	.word	0x00039404
   24170:	0003937c 	.word	0x0003937c
   24174:	00023795 	.word	0x00023795
   24178:	00039350 	.word	0x00039350
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   2417c:	230f      	movs	r3, #15
   2417e:	18fb      	adds	r3, r7, r3
   24180:	781b      	ldrb	r3, [r3, #0]
   24182:	2bcf      	cmp	r3, #207	; 0xcf
   24184:	d009      	beq.n	2419a <spi_cmd_complete+0x3c6>
   24186:	230f      	movs	r3, #15
   24188:	18fb      	adds	r3, r7, r3
   2418a:	781b      	ldrb	r3, [r3, #0]
   2418c:	2bc5      	cmp	r3, #197	; 0xc5
   2418e:	d004      	beq.n	2419a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   24190:	230f      	movs	r3, #15
   24192:	18fb      	adds	r3, r7, r3
   24194:	781b      	ldrb	r3, [r3, #0]
   24196:	2bc6      	cmp	r3, #198	; 0xc6
   24198:	d106      	bne.n	241a8 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   2419a:	2376      	movs	r3, #118	; 0x76
   2419c:	18fb      	adds	r3, r7, r3
   2419e:	781a      	ldrb	r2, [r3, #0]
   241a0:	2376      	movs	r3, #118	; 0x76
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	3201      	adds	r2, #1
   241a6:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   241a8:	2376      	movs	r3, #118	; 0x76
   241aa:	18fb      	adds	r3, r7, r3
   241ac:	781b      	ldrb	r3, [r3, #0]
   241ae:	2276      	movs	r2, #118	; 0x76
   241b0:	18ba      	adds	r2, r7, r2
   241b2:	1c59      	adds	r1, r3, #1
   241b4:	7011      	strb	r1, [r2, #0]
   241b6:	001a      	movs	r2, r3
   241b8:	2318      	movs	r3, #24
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	5c9a      	ldrb	r2, [r3, r2]
   241be:	2317      	movs	r3, #23
   241c0:	18fb      	adds	r3, r7, r3
   241c2:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   241c4:	2317      	movs	r3, #23
   241c6:	18fb      	adds	r3, r7, r3
   241c8:	781b      	ldrb	r3, [r3, #0]
   241ca:	220f      	movs	r2, #15
   241cc:	18ba      	adds	r2, r7, r2
   241ce:	7812      	ldrb	r2, [r2, #0]
   241d0:	429a      	cmp	r2, r3
   241d2:	d018      	beq.n	24206 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   241d4:	4add      	ldr	r2, [pc, #884]	; (2454c <spi_cmd_complete+0x778>)
   241d6:	49de      	ldr	r1, [pc, #888]	; (24550 <spi_cmd_complete+0x77c>)
   241d8:	4bde      	ldr	r3, [pc, #888]	; (24554 <spi_cmd_complete+0x780>)
   241da:	0018      	movs	r0, r3
   241dc:	4bde      	ldr	r3, [pc, #888]	; (24558 <spi_cmd_complete+0x784>)
   241de:	4798      	blx	r3
   241e0:	230f      	movs	r3, #15
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	7819      	ldrb	r1, [r3, #0]
   241e6:	2317      	movs	r3, #23
   241e8:	18fb      	adds	r3, r7, r3
   241ea:	781b      	ldrb	r3, [r3, #0]
   241ec:	001a      	movs	r2, r3
   241ee:	4bdb      	ldr	r3, [pc, #876]	; (2455c <spi_cmd_complete+0x788>)
   241f0:	0018      	movs	r0, r3
   241f2:	4bd9      	ldr	r3, [pc, #868]	; (24558 <spi_cmd_complete+0x784>)
   241f4:	4798      	blx	r3
   241f6:	4bda      	ldr	r3, [pc, #872]	; (24560 <spi_cmd_complete+0x78c>)
   241f8:	0018      	movs	r0, r3
   241fa:	4bd7      	ldr	r3, [pc, #860]	; (24558 <spi_cmd_complete+0x784>)
   241fc:	4798      	blx	r3
		result = N_FAIL;
   241fe:	2300      	movs	r3, #0
   24200:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24204:	e248      	b.n	24698 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24206:	2376      	movs	r3, #118	; 0x76
   24208:	18fb      	adds	r3, r7, r3
   2420a:	781b      	ldrb	r3, [r3, #0]
   2420c:	2276      	movs	r2, #118	; 0x76
   2420e:	18ba      	adds	r2, r7, r2
   24210:	1c59      	adds	r1, r3, #1
   24212:	7011      	strb	r1, [r2, #0]
   24214:	001a      	movs	r2, r3
   24216:	2318      	movs	r3, #24
   24218:	18fb      	adds	r3, r7, r3
   2421a:	5c9a      	ldrb	r2, [r3, r2]
   2421c:	2317      	movs	r3, #23
   2421e:	18fb      	adds	r3, r7, r3
   24220:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24222:	2317      	movs	r3, #23
   24224:	18fb      	adds	r3, r7, r3
   24226:	781b      	ldrb	r3, [r3, #0]
   24228:	2b00      	cmp	r3, #0
   2422a:	d016      	beq.n	2425a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   2422c:	4acd      	ldr	r2, [pc, #820]	; (24564 <spi_cmd_complete+0x790>)
   2422e:	49c8      	ldr	r1, [pc, #800]	; (24550 <spi_cmd_complete+0x77c>)
   24230:	4bc8      	ldr	r3, [pc, #800]	; (24554 <spi_cmd_complete+0x780>)
   24232:	0018      	movs	r0, r3
   24234:	4bc8      	ldr	r3, [pc, #800]	; (24558 <spi_cmd_complete+0x784>)
   24236:	4798      	blx	r3
   24238:	2317      	movs	r3, #23
   2423a:	18fb      	adds	r3, r7, r3
   2423c:	781b      	ldrb	r3, [r3, #0]
   2423e:	001a      	movs	r2, r3
   24240:	4bc9      	ldr	r3, [pc, #804]	; (24568 <spi_cmd_complete+0x794>)
   24242:	0011      	movs	r1, r2
   24244:	0018      	movs	r0, r3
   24246:	4bc4      	ldr	r3, [pc, #784]	; (24558 <spi_cmd_complete+0x784>)
   24248:	4798      	blx	r3
   2424a:	4bc5      	ldr	r3, [pc, #788]	; (24560 <spi_cmd_complete+0x78c>)
   2424c:	0018      	movs	r0, r3
   2424e:	4bc2      	ldr	r3, [pc, #776]	; (24558 <spi_cmd_complete+0x784>)
   24250:	4798      	blx	r3
		result = N_FAIL;
   24252:	2300      	movs	r3, #0
   24254:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24258:	e21e      	b.n	24698 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   2425a:	230f      	movs	r3, #15
   2425c:	18fb      	adds	r3, r7, r3
   2425e:	781b      	ldrb	r3, [r3, #0]
   24260:	2bc4      	cmp	r3, #196	; 0xc4
   24262:	d00f      	beq.n	24284 <spi_cmd_complete+0x4b0>
   24264:	230f      	movs	r3, #15
   24266:	18fb      	adds	r3, r7, r3
   24268:	781b      	ldrb	r3, [r3, #0]
   2426a:	2bca      	cmp	r3, #202	; 0xca
   2426c:	d00a      	beq.n	24284 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2426e:	230f      	movs	r3, #15
   24270:	18fb      	adds	r3, r7, r3
   24272:	781b      	ldrb	r3, [r3, #0]
   24274:	2bc2      	cmp	r3, #194	; 0xc2
   24276:	d005      	beq.n	24284 <spi_cmd_complete+0x4b0>
   24278:	230f      	movs	r3, #15
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	781b      	ldrb	r3, [r3, #0]
   2427e:	2bc8      	cmp	r3, #200	; 0xc8
   24280:	d000      	beq.n	24284 <spi_cmd_complete+0x4b0>
   24282:	e208      	b.n	24696 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24284:	230a      	movs	r3, #10
   24286:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24288:	2376      	movs	r3, #118	; 0x76
   2428a:	18fb      	adds	r3, r7, r3
   2428c:	781a      	ldrb	r2, [r3, #0]
   2428e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24290:	429a      	cmp	r2, r3
   24292:	d218      	bcs.n	242c6 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24294:	2376      	movs	r3, #118	; 0x76
   24296:	18fb      	adds	r3, r7, r3
   24298:	781b      	ldrb	r3, [r3, #0]
   2429a:	2276      	movs	r2, #118	; 0x76
   2429c:	18ba      	adds	r2, r7, r2
   2429e:	1c59      	adds	r1, r3, #1
   242a0:	7011      	strb	r1, [r2, #0]
   242a2:	001a      	movs	r2, r3
   242a4:	2318      	movs	r3, #24
   242a6:	18fb      	adds	r3, r7, r3
   242a8:	5c9a      	ldrb	r2, [r3, r2]
   242aa:	2317      	movs	r3, #23
   242ac:	18fb      	adds	r3, r7, r3
   242ae:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   242b0:	2317      	movs	r3, #23
   242b2:	18fb      	adds	r3, r7, r3
   242b4:	781b      	ldrb	r3, [r3, #0]
   242b6:	091b      	lsrs	r3, r3, #4
   242b8:	b2db      	uxtb	r3, r3
   242ba:	001a      	movs	r2, r3
   242bc:	230f      	movs	r3, #15
   242be:	4013      	ands	r3, r2
   242c0:	2b0f      	cmp	r3, #15
   242c2:	d103      	bne.n	242cc <spi_cmd_complete+0x4f8>
					break;
   242c4:	e007      	b.n	242d6 <spi_cmd_complete+0x502>
					retry = 0;
   242c6:	2300      	movs	r3, #0
   242c8:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   242ca:	e004      	b.n	242d6 <spi_cmd_complete+0x502>
			} while (retry--);
   242cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   242ce:	1e5a      	subs	r2, r3, #1
   242d0:	667a      	str	r2, [r7, #100]	; 0x64
   242d2:	2b00      	cmp	r3, #0
   242d4:	d1d8      	bne.n	24288 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   242d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   242d8:	2b00      	cmp	r3, #0
   242da:	dc18      	bgt.n	2430e <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   242dc:	2395      	movs	r3, #149	; 0x95
   242de:	009a      	lsls	r2, r3, #2
   242e0:	499b      	ldr	r1, [pc, #620]	; (24550 <spi_cmd_complete+0x77c>)
   242e2:	4b9c      	ldr	r3, [pc, #624]	; (24554 <spi_cmd_complete+0x780>)
   242e4:	0018      	movs	r0, r3
   242e6:	4b9c      	ldr	r3, [pc, #624]	; (24558 <spi_cmd_complete+0x784>)
   242e8:	4798      	blx	r3
   242ea:	2317      	movs	r3, #23
   242ec:	18fb      	adds	r3, r7, r3
   242ee:	781b      	ldrb	r3, [r3, #0]
   242f0:	001a      	movs	r2, r3
   242f2:	4b9e      	ldr	r3, [pc, #632]	; (2456c <spi_cmd_complete+0x798>)
   242f4:	0011      	movs	r1, r2
   242f6:	0018      	movs	r0, r3
   242f8:	4b97      	ldr	r3, [pc, #604]	; (24558 <spi_cmd_complete+0x784>)
   242fa:	4798      	blx	r3
   242fc:	4b98      	ldr	r3, [pc, #608]	; (24560 <spi_cmd_complete+0x78c>)
   242fe:	0018      	movs	r0, r3
   24300:	4b95      	ldr	r3, [pc, #596]	; (24558 <spi_cmd_complete+0x784>)
   24302:	4798      	blx	r3
				result = N_RESET;
   24304:	2301      	movs	r3, #1
   24306:	425b      	negs	r3, r3
   24308:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   2430a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2430c:	e1c4      	b.n	24698 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2430e:	230f      	movs	r3, #15
   24310:	18fb      	adds	r3, r7, r3
   24312:	781b      	ldrb	r3, [r3, #0]
   24314:	2bc4      	cmp	r3, #196	; 0xc4
   24316:	d005      	beq.n	24324 <spi_cmd_complete+0x550>
   24318:	230f      	movs	r3, #15
   2431a:	18fb      	adds	r3, r7, r3
   2431c:	781b      	ldrb	r3, [r3, #0]
   2431e:	2bca      	cmp	r3, #202	; 0xca
   24320:	d000      	beq.n	24324 <spi_cmd_complete+0x550>
   24322:	e08e      	b.n	24442 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24324:	2376      	movs	r3, #118	; 0x76
   24326:	18fb      	adds	r3, r7, r3
   24328:	781b      	ldrb	r3, [r3, #0]
   2432a:	3303      	adds	r3, #3
   2432c:	001a      	movs	r2, r3
   2432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24330:	429a      	cmp	r2, r3
   24332:	d23c      	bcs.n	243ae <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24334:	2376      	movs	r3, #118	; 0x76
   24336:	18fb      	adds	r3, r7, r3
   24338:	781b      	ldrb	r3, [r3, #0]
   2433a:	2276      	movs	r2, #118	; 0x76
   2433c:	18ba      	adds	r2, r7, r2
   2433e:	1c59      	adds	r1, r3, #1
   24340:	7011      	strb	r1, [r2, #0]
   24342:	001a      	movs	r2, r3
   24344:	2318      	movs	r3, #24
   24346:	18fb      	adds	r3, r7, r3
   24348:	5c9a      	ldrb	r2, [r3, r2]
   2434a:	687b      	ldr	r3, [r7, #4]
   2434c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2434e:	687b      	ldr	r3, [r7, #4]
   24350:	1c5a      	adds	r2, r3, #1
   24352:	2376      	movs	r3, #118	; 0x76
   24354:	18fb      	adds	r3, r7, r3
   24356:	781b      	ldrb	r3, [r3, #0]
   24358:	2176      	movs	r1, #118	; 0x76
   2435a:	1879      	adds	r1, r7, r1
   2435c:	1c58      	adds	r0, r3, #1
   2435e:	7008      	strb	r0, [r1, #0]
   24360:	0019      	movs	r1, r3
   24362:	2318      	movs	r3, #24
   24364:	18fb      	adds	r3, r7, r3
   24366:	5c5b      	ldrb	r3, [r3, r1]
   24368:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2436a:	687b      	ldr	r3, [r7, #4]
   2436c:	1c9a      	adds	r2, r3, #2
   2436e:	2376      	movs	r3, #118	; 0x76
   24370:	18fb      	adds	r3, r7, r3
   24372:	781b      	ldrb	r3, [r3, #0]
   24374:	2176      	movs	r1, #118	; 0x76
   24376:	1879      	adds	r1, r7, r1
   24378:	1c58      	adds	r0, r3, #1
   2437a:	7008      	strb	r0, [r1, #0]
   2437c:	0019      	movs	r1, r3
   2437e:	2318      	movs	r3, #24
   24380:	18fb      	adds	r3, r7, r3
   24382:	5c5b      	ldrb	r3, [r3, r1]
   24384:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24386:	687b      	ldr	r3, [r7, #4]
   24388:	1cda      	adds	r2, r3, #3
   2438a:	2376      	movs	r3, #118	; 0x76
   2438c:	18fb      	adds	r3, r7, r3
   2438e:	781b      	ldrb	r3, [r3, #0]
   24390:	2176      	movs	r1, #118	; 0x76
   24392:	1879      	adds	r1, r7, r1
   24394:	1c58      	adds	r0, r3, #1
   24396:	7008      	strb	r0, [r1, #0]
   24398:	0019      	movs	r1, r3
   2439a:	2318      	movs	r3, #24
   2439c:	18fb      	adds	r3, r7, r3
   2439e:	5c5b      	ldrb	r3, [r3, r1]
   243a0:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   243a2:	4b73      	ldr	r3, [pc, #460]	; (24570 <spi_cmd_complete+0x79c>)
   243a4:	781b      	ldrb	r3, [r3, #0]
   243a6:	2b00      	cmp	r3, #0
   243a8:	d000      	beq.n	243ac <spi_cmd_complete+0x5d8>
   243aa:	e174      	b.n	24696 <spi_cmd_complete+0x8c2>
   243ac:	e011      	b.n	243d2 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   243ae:	4a71      	ldr	r2, [pc, #452]	; (24574 <spi_cmd_complete+0x7a0>)
   243b0:	4967      	ldr	r1, [pc, #412]	; (24550 <spi_cmd_complete+0x77c>)
   243b2:	4b68      	ldr	r3, [pc, #416]	; (24554 <spi_cmd_complete+0x780>)
   243b4:	0018      	movs	r0, r3
   243b6:	4b68      	ldr	r3, [pc, #416]	; (24558 <spi_cmd_complete+0x784>)
   243b8:	4798      	blx	r3
   243ba:	4b6f      	ldr	r3, [pc, #444]	; (24578 <spi_cmd_complete+0x7a4>)
   243bc:	0018      	movs	r0, r3
   243be:	4b66      	ldr	r3, [pc, #408]	; (24558 <spi_cmd_complete+0x784>)
   243c0:	4798      	blx	r3
   243c2:	4b67      	ldr	r3, [pc, #412]	; (24560 <spi_cmd_complete+0x78c>)
   243c4:	0018      	movs	r0, r3
   243c6:	4b64      	ldr	r3, [pc, #400]	; (24558 <spi_cmd_complete+0x784>)
   243c8:	4798      	blx	r3
					result = N_FAIL;
   243ca:	2300      	movs	r3, #0
   243cc:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   243ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   243d0:	e162      	b.n	24698 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   243d2:	2376      	movs	r3, #118	; 0x76
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	781b      	ldrb	r3, [r3, #0]
   243d8:	3301      	adds	r3, #1
   243da:	001a      	movs	r2, r3
   243dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   243de:	429a      	cmp	r2, r3
   243e0:	d21c      	bcs.n	2441c <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   243e2:	2376      	movs	r3, #118	; 0x76
   243e4:	18fb      	adds	r3, r7, r3
   243e6:	781b      	ldrb	r3, [r3, #0]
   243e8:	2276      	movs	r2, #118	; 0x76
   243ea:	18ba      	adds	r2, r7, r2
   243ec:	1c59      	adds	r1, r3, #1
   243ee:	7011      	strb	r1, [r2, #0]
   243f0:	001a      	movs	r2, r3
   243f2:	2318      	movs	r3, #24
   243f4:	18fb      	adds	r3, r7, r3
   243f6:	5c9a      	ldrb	r2, [r3, r2]
   243f8:	2314      	movs	r3, #20
   243fa:	18fb      	adds	r3, r7, r3
   243fc:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   243fe:	2376      	movs	r3, #118	; 0x76
   24400:	18fb      	adds	r3, r7, r3
   24402:	781b      	ldrb	r3, [r3, #0]
   24404:	2276      	movs	r2, #118	; 0x76
   24406:	18ba      	adds	r2, r7, r2
   24408:	1c59      	adds	r1, r3, #1
   2440a:	7011      	strb	r1, [r2, #0]
   2440c:	001a      	movs	r2, r3
   2440e:	2318      	movs	r3, #24
   24410:	18fb      	adds	r3, r7, r3
   24412:	5c9a      	ldrb	r2, [r3, r2]
   24414:	2314      	movs	r3, #20
   24416:	18fb      	adds	r3, r7, r3
   24418:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   2441a:	e13c      	b.n	24696 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   2441c:	239c      	movs	r3, #156	; 0x9c
   2441e:	009a      	lsls	r2, r3, #2
   24420:	494b      	ldr	r1, [pc, #300]	; (24550 <spi_cmd_complete+0x77c>)
   24422:	4b4c      	ldr	r3, [pc, #304]	; (24554 <spi_cmd_complete+0x780>)
   24424:	0018      	movs	r0, r3
   24426:	4b4c      	ldr	r3, [pc, #304]	; (24558 <spi_cmd_complete+0x784>)
   24428:	4798      	blx	r3
   2442a:	4b54      	ldr	r3, [pc, #336]	; (2457c <spi_cmd_complete+0x7a8>)
   2442c:	0018      	movs	r0, r3
   2442e:	4b4a      	ldr	r3, [pc, #296]	; (24558 <spi_cmd_complete+0x784>)
   24430:	4798      	blx	r3
   24432:	4b4b      	ldr	r3, [pc, #300]	; (24560 <spi_cmd_complete+0x78c>)
   24434:	0018      	movs	r0, r3
   24436:	4b48      	ldr	r3, [pc, #288]	; (24558 <spi_cmd_complete+0x784>)
   24438:	4798      	blx	r3
						result = N_FAIL;
   2443a:	2300      	movs	r3, #0
   2443c:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   2443e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24440:	e12a      	b.n	24698 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24442:	230f      	movs	r3, #15
   24444:	18fb      	adds	r3, r7, r3
   24446:	781b      	ldrb	r3, [r3, #0]
   24448:	2bc2      	cmp	r3, #194	; 0xc2
   2444a:	d005      	beq.n	24458 <spi_cmd_complete+0x684>
   2444c:	230f      	movs	r3, #15
   2444e:	18fb      	adds	r3, r7, r3
   24450:	781b      	ldrb	r3, [r3, #0]
   24452:	2bc8      	cmp	r3, #200	; 0xc8
   24454:	d000      	beq.n	24458 <spi_cmd_complete+0x684>
   24456:	e11e      	b.n	24696 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24458:	2300      	movs	r3, #0
   2445a:	663b      	str	r3, [r7, #96]	; 0x60
   2445c:	e011      	b.n	24482 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2445e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24460:	1c5a      	adds	r2, r3, #1
   24462:	663a      	str	r2, [r7, #96]	; 0x60
   24464:	001a      	movs	r2, r3
   24466:	687b      	ldr	r3, [r7, #4]
   24468:	189a      	adds	r2, r3, r2
   2446a:	2376      	movs	r3, #118	; 0x76
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	781b      	ldrb	r3, [r3, #0]
   24470:	2176      	movs	r1, #118	; 0x76
   24472:	1879      	adds	r1, r7, r1
   24474:	1c58      	adds	r0, r3, #1
   24476:	7008      	strb	r0, [r1, #0]
   24478:	0019      	movs	r1, r3
   2447a:	2318      	movs	r3, #24
   2447c:	18fb      	adds	r3, r7, r3
   2447e:	5c5b      	ldrb	r3, [r3, r1]
   24480:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24482:	2376      	movs	r3, #118	; 0x76
   24484:	18fb      	adds	r3, r7, r3
   24486:	781a      	ldrb	r2, [r3, #0]
   24488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2448a:	429a      	cmp	r2, r3
   2448c:	d203      	bcs.n	24496 <spi_cmd_complete+0x6c2>
   2448e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24490:	683b      	ldr	r3, [r7, #0]
   24492:	429a      	cmp	r2, r3
   24494:	d3e3      	bcc.n	2445e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24498:	683a      	ldr	r2, [r7, #0]
   2449a:	1ad3      	subs	r3, r2, r3
   2449c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2449e:	683b      	ldr	r3, [r7, #0]
   244a0:	2b00      	cmp	r3, #0
   244a2:	d100      	bne.n	244a6 <spi_cmd_complete+0x6d2>
   244a4:	e0f1      	b.n	2468a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   244a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   244a8:	2280      	movs	r2, #128	; 0x80
   244aa:	0192      	lsls	r2, r2, #6
   244ac:	1ad3      	subs	r3, r2, r3
   244ae:	001a      	movs	r2, r3
   244b0:	683b      	ldr	r3, [r7, #0]
   244b2:	429a      	cmp	r2, r3
   244b4:	d302      	bcc.n	244bc <spi_cmd_complete+0x6e8>
						nbytes = sz;
   244b6:	683b      	ldr	r3, [r7, #0]
   244b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   244ba:	e004      	b.n	244c6 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   244bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   244be:	2280      	movs	r2, #128	; 0x80
   244c0:	0192      	lsls	r2, r2, #6
   244c2:	1ad3      	subs	r3, r2, r3
   244c4:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   244c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   244c8:	687a      	ldr	r2, [r7, #4]
   244ca:	18d3      	adds	r3, r2, r3
   244cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   244ce:	b292      	uxth	r2, r2
   244d0:	0011      	movs	r1, r2
   244d2:	0018      	movs	r0, r3
   244d4:	4b2a      	ldr	r3, [pc, #168]	; (24580 <spi_cmd_complete+0x7ac>)
   244d6:	4798      	blx	r3
   244d8:	1e03      	subs	r3, r0, #0
   244da:	d010      	beq.n	244fe <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   244dc:	4a29      	ldr	r2, [pc, #164]	; (24584 <spi_cmd_complete+0x7b0>)
   244de:	491c      	ldr	r1, [pc, #112]	; (24550 <spi_cmd_complete+0x77c>)
   244e0:	4b1c      	ldr	r3, [pc, #112]	; (24554 <spi_cmd_complete+0x780>)
   244e2:	0018      	movs	r0, r3
   244e4:	4b1c      	ldr	r3, [pc, #112]	; (24558 <spi_cmd_complete+0x784>)
   244e6:	4798      	blx	r3
   244e8:	4b27      	ldr	r3, [pc, #156]	; (24588 <spi_cmd_complete+0x7b4>)
   244ea:	0018      	movs	r0, r3
   244ec:	4b1a      	ldr	r3, [pc, #104]	; (24558 <spi_cmd_complete+0x784>)
   244ee:	4798      	blx	r3
   244f0:	4b1b      	ldr	r3, [pc, #108]	; (24560 <spi_cmd_complete+0x78c>)
   244f2:	0018      	movs	r0, r3
   244f4:	4b18      	ldr	r3, [pc, #96]	; (24558 <spi_cmd_complete+0x784>)
   244f6:	4798      	blx	r3
						result = N_FAIL;
   244f8:	2300      	movs	r3, #0
   244fa:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   244fc:	e0cb      	b.n	24696 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   244fe:	4b1c      	ldr	r3, [pc, #112]	; (24570 <spi_cmd_complete+0x79c>)
   24500:	781b      	ldrb	r3, [r3, #0]
   24502:	2b00      	cmp	r3, #0
   24504:	d119      	bne.n	2453a <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24506:	2314      	movs	r3, #20
   24508:	18fb      	adds	r3, r7, r3
   2450a:	2102      	movs	r1, #2
   2450c:	0018      	movs	r0, r3
   2450e:	4b1c      	ldr	r3, [pc, #112]	; (24580 <spi_cmd_complete+0x7ac>)
   24510:	4798      	blx	r3
   24512:	1e03      	subs	r3, r0, #0
   24514:	d011      	beq.n	2453a <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24516:	23a6      	movs	r3, #166	; 0xa6
   24518:	009a      	lsls	r2, r3, #2
   2451a:	490d      	ldr	r1, [pc, #52]	; (24550 <spi_cmd_complete+0x77c>)
   2451c:	4b0d      	ldr	r3, [pc, #52]	; (24554 <spi_cmd_complete+0x780>)
   2451e:	0018      	movs	r0, r3
   24520:	4b0d      	ldr	r3, [pc, #52]	; (24558 <spi_cmd_complete+0x784>)
   24522:	4798      	blx	r3
   24524:	4b19      	ldr	r3, [pc, #100]	; (2458c <spi_cmd_complete+0x7b8>)
   24526:	0018      	movs	r0, r3
   24528:	4b0b      	ldr	r3, [pc, #44]	; (24558 <spi_cmd_complete+0x784>)
   2452a:	4798      	blx	r3
   2452c:	4b0c      	ldr	r3, [pc, #48]	; (24560 <spi_cmd_complete+0x78c>)
   2452e:	0018      	movs	r0, r3
   24530:	4b09      	ldr	r3, [pc, #36]	; (24558 <spi_cmd_complete+0x784>)
   24532:	4798      	blx	r3
							result = N_FAIL;
   24534:	2300      	movs	r3, #0
   24536:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24538:	e0ad      	b.n	24696 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   2453a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2453c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2453e:	18d3      	adds	r3, r2, r3
   24540:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24544:	683a      	ldr	r2, [r7, #0]
   24546:	1ad3      	subs	r3, r2, r3
   24548:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2454a:	e09e      	b.n	2468a <spi_cmd_complete+0x8b6>
   2454c:	0000022f 	.word	0x0000022f
   24550:	00039950 	.word	0x00039950
   24554:	0003933c 	.word	0x0003933c
   24558:	0001e399 	.word	0x0001e399
   2455c:	00039434 	.word	0x00039434
   24560:	0003937c 	.word	0x0003937c
   24564:	00000239 	.word	0x00000239
   24568:	00039470 	.word	0x00039470
   2456c:	000394a4 	.word	0x000394a4
   24570:	200042ac 	.word	0x200042ac
   24574:	00000263 	.word	0x00000263
   24578:	000394d4 	.word	0x000394d4
   2457c:	00039504 	.word	0x00039504
   24580:	0002370d 	.word	0x0002370d
   24584:	0000028e 	.word	0x0000028e
   24588:	00039534 	.word	0x00039534
   2458c:	00039568 	.word	0x00039568
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24590:	683a      	ldr	r2, [r7, #0]
   24592:	2380      	movs	r3, #128	; 0x80
   24594:	019b      	lsls	r3, r3, #6
   24596:	429a      	cmp	r2, r3
   24598:	d802      	bhi.n	245a0 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2459a:	683b      	ldr	r3, [r7, #0]
   2459c:	65bb      	str	r3, [r7, #88]	; 0x58
   2459e:	e002      	b.n	245a6 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   245a0:	2380      	movs	r3, #128	; 0x80
   245a2:	019b      	lsls	r3, r3, #6
   245a4:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   245a6:	230a      	movs	r3, #10
   245a8:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   245aa:	2317      	movs	r3, #23
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	2101      	movs	r1, #1
   245b0:	0018      	movs	r0, r3
   245b2:	4b3b      	ldr	r3, [pc, #236]	; (246a0 <spi_cmd_complete+0x8cc>)
   245b4:	4798      	blx	r3
   245b6:	1e03      	subs	r3, r0, #0
   245b8:	d011      	beq.n	245de <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   245ba:	23ae      	movs	r3, #174	; 0xae
   245bc:	009a      	lsls	r2, r3, #2
   245be:	4939      	ldr	r1, [pc, #228]	; (246a4 <spi_cmd_complete+0x8d0>)
   245c0:	4b39      	ldr	r3, [pc, #228]	; (246a8 <spi_cmd_complete+0x8d4>)
   245c2:	0018      	movs	r0, r3
   245c4:	4b39      	ldr	r3, [pc, #228]	; (246ac <spi_cmd_complete+0x8d8>)
   245c6:	4798      	blx	r3
   245c8:	4b39      	ldr	r3, [pc, #228]	; (246b0 <spi_cmd_complete+0x8dc>)
   245ca:	0018      	movs	r0, r3
   245cc:	4b37      	ldr	r3, [pc, #220]	; (246ac <spi_cmd_complete+0x8d8>)
   245ce:	4798      	blx	r3
   245d0:	4b38      	ldr	r3, [pc, #224]	; (246b4 <spi_cmd_complete+0x8e0>)
   245d2:	0018      	movs	r0, r3
   245d4:	4b35      	ldr	r3, [pc, #212]	; (246ac <spi_cmd_complete+0x8d8>)
   245d6:	4798      	blx	r3
							result = N_FAIL;
   245d8:	2300      	movs	r3, #0
   245da:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   245dc:	e010      	b.n	24600 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   245de:	2317      	movs	r3, #23
   245e0:	18fb      	adds	r3, r7, r3
   245e2:	781b      	ldrb	r3, [r3, #0]
   245e4:	091b      	lsrs	r3, r3, #4
   245e6:	b2db      	uxtb	r3, r3
   245e8:	001a      	movs	r2, r3
   245ea:	230f      	movs	r3, #15
   245ec:	4013      	ands	r3, r2
   245ee:	2b0f      	cmp	r3, #15
   245f0:	d005      	beq.n	245fe <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   245f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   245f4:	1e5a      	subs	r2, r3, #1
   245f6:	667a      	str	r2, [r7, #100]	; 0x64
   245f8:	2b00      	cmp	r3, #0
   245fa:	d1d6      	bne.n	245aa <spi_cmd_complete+0x7d6>
   245fc:	e000      	b.n	24600 <spi_cmd_complete+0x82c>
							break;
   245fe:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24602:	2b00      	cmp	r3, #0
   24604:	d046      	beq.n	24694 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24608:	687a      	ldr	r2, [r7, #4]
   2460a:	18d3      	adds	r3, r2, r3
   2460c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2460e:	b292      	uxth	r2, r2
   24610:	0011      	movs	r1, r2
   24612:	0018      	movs	r0, r3
   24614:	4b22      	ldr	r3, [pc, #136]	; (246a0 <spi_cmd_complete+0x8cc>)
   24616:	4798      	blx	r3
   24618:	1e03      	subs	r3, r0, #0
   2461a:	d011      	beq.n	24640 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   2461c:	23b2      	movs	r3, #178	; 0xb2
   2461e:	009a      	lsls	r2, r3, #2
   24620:	4920      	ldr	r1, [pc, #128]	; (246a4 <spi_cmd_complete+0x8d0>)
   24622:	4b21      	ldr	r3, [pc, #132]	; (246a8 <spi_cmd_complete+0x8d4>)
   24624:	0018      	movs	r0, r3
   24626:	4b21      	ldr	r3, [pc, #132]	; (246ac <spi_cmd_complete+0x8d8>)
   24628:	4798      	blx	r3
   2462a:	4b23      	ldr	r3, [pc, #140]	; (246b8 <spi_cmd_complete+0x8e4>)
   2462c:	0018      	movs	r0, r3
   2462e:	4b1f      	ldr	r3, [pc, #124]	; (246ac <spi_cmd_complete+0x8d8>)
   24630:	4798      	blx	r3
   24632:	4b20      	ldr	r3, [pc, #128]	; (246b4 <spi_cmd_complete+0x8e0>)
   24634:	0018      	movs	r0, r3
   24636:	4b1d      	ldr	r3, [pc, #116]	; (246ac <spi_cmd_complete+0x8d8>)
   24638:	4798      	blx	r3
						result = N_FAIL;
   2463a:	2300      	movs	r3, #0
   2463c:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   2463e:	e02a      	b.n	24696 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24640:	4b1e      	ldr	r3, [pc, #120]	; (246bc <spi_cmd_complete+0x8e8>)
   24642:	781b      	ldrb	r3, [r3, #0]
   24644:	2b00      	cmp	r3, #0
   24646:	d118      	bne.n	2467a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24648:	2314      	movs	r3, #20
   2464a:	18fb      	adds	r3, r7, r3
   2464c:	2102      	movs	r1, #2
   2464e:	0018      	movs	r0, r3
   24650:	4b13      	ldr	r3, [pc, #76]	; (246a0 <spi_cmd_complete+0x8cc>)
   24652:	4798      	blx	r3
   24654:	1e03      	subs	r3, r0, #0
   24656:	d010      	beq.n	2467a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24658:	4a19      	ldr	r2, [pc, #100]	; (246c0 <spi_cmd_complete+0x8ec>)
   2465a:	4912      	ldr	r1, [pc, #72]	; (246a4 <spi_cmd_complete+0x8d0>)
   2465c:	4b12      	ldr	r3, [pc, #72]	; (246a8 <spi_cmd_complete+0x8d4>)
   2465e:	0018      	movs	r0, r3
   24660:	4b12      	ldr	r3, [pc, #72]	; (246ac <spi_cmd_complete+0x8d8>)
   24662:	4798      	blx	r3
   24664:	4b17      	ldr	r3, [pc, #92]	; (246c4 <spi_cmd_complete+0x8f0>)
   24666:	0018      	movs	r0, r3
   24668:	4b10      	ldr	r3, [pc, #64]	; (246ac <spi_cmd_complete+0x8d8>)
   2466a:	4798      	blx	r3
   2466c:	4b11      	ldr	r3, [pc, #68]	; (246b4 <spi_cmd_complete+0x8e0>)
   2466e:	0018      	movs	r0, r3
   24670:	4b0e      	ldr	r3, [pc, #56]	; (246ac <spi_cmd_complete+0x8d8>)
   24672:	4798      	blx	r3
							result = N_FAIL;
   24674:	2300      	movs	r3, #0
   24676:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24678:	e00d      	b.n	24696 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2467a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2467c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2467e:	18d3      	adds	r3, r2, r3
   24680:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24684:	683a      	ldr	r2, [r7, #0]
   24686:	1ad3      	subs	r3, r2, r3
   24688:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2468a:	683b      	ldr	r3, [r7, #0]
   2468c:	2b00      	cmp	r3, #0
   2468e:	d000      	beq.n	24692 <spi_cmd_complete+0x8be>
   24690:	e77e      	b.n	24590 <spi_cmd_complete+0x7bc>
   24692:	e000      	b.n	24696 <spi_cmd_complete+0x8c2>
						break;
   24694:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24698:	0018      	movs	r0, r3
   2469a:	46bd      	mov	sp, r7
   2469c:	b01f      	add	sp, #124	; 0x7c
   2469e:	bd90      	pop	{r4, r7, pc}
   246a0:	0002370d 	.word	0x0002370d
   246a4:	00039950 	.word	0x00039950
   246a8:	0003933c 	.word	0x0003933c
   246ac:	0001e399 	.word	0x0001e399
   246b0:	000395a0 	.word	0x000395a0
   246b4:	0003937c 	.word	0x0003937c
   246b8:	00039534 	.word	0x00039534
   246bc:	200042ac 	.word	0x200042ac
   246c0:	000002d2 	.word	0x000002d2
   246c4:	00039568 	.word	0x00039568

000246c8 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   246c8:	b580      	push	{r7, lr}
   246ca:	b086      	sub	sp, #24
   246cc:	af00      	add	r7, sp, #0
   246ce:	6078      	str	r0, [r7, #4]
   246d0:	000a      	movs	r2, r1
   246d2:	1cbb      	adds	r3, r7, #2
   246d4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   246d6:	2313      	movs	r3, #19
   246d8:	18fb      	adds	r3, r7, r3
   246da:	2201      	movs	r2, #1
   246dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   246de:	230c      	movs	r3, #12
   246e0:	18fb      	adds	r3, r7, r3
   246e2:	2200      	movs	r2, #0
   246e4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   246e6:	2316      	movs	r3, #22
   246e8:	18fb      	adds	r3, r7, r3
   246ea:	2200      	movs	r2, #0
   246ec:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   246ee:	1cbb      	adds	r3, r7, #2
   246f0:	881a      	ldrh	r2, [r3, #0]
   246f2:	2380      	movs	r3, #128	; 0x80
   246f4:	019b      	lsls	r3, r3, #6
   246f6:	429a      	cmp	r2, r3
   246f8:	d805      	bhi.n	24706 <spi_data_write+0x3e>
			nbytes = sz;
   246fa:	2314      	movs	r3, #20
   246fc:	18fb      	adds	r3, r7, r3
   246fe:	1cba      	adds	r2, r7, #2
   24700:	8812      	ldrh	r2, [r2, #0]
   24702:	801a      	strh	r2, [r3, #0]
   24704:	e004      	b.n	24710 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24706:	2314      	movs	r3, #20
   24708:	18fb      	adds	r3, r7, r3
   2470a:	2280      	movs	r2, #128	; 0x80
   2470c:	0192      	lsls	r2, r2, #6
   2470e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24710:	2311      	movs	r3, #17
   24712:	18fb      	adds	r3, r7, r3
   24714:	22f0      	movs	r2, #240	; 0xf0
   24716:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24718:	2316      	movs	r3, #22
   2471a:	18fb      	adds	r3, r7, r3
   2471c:	2200      	movs	r2, #0
   2471e:	5e9b      	ldrsh	r3, [r3, r2]
   24720:	2b00      	cmp	r3, #0
   24722:	d10f      	bne.n	24744 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24724:	1cbb      	adds	r3, r7, #2
   24726:	881a      	ldrh	r2, [r3, #0]
   24728:	2380      	movs	r3, #128	; 0x80
   2472a:	019b      	lsls	r3, r3, #6
   2472c:	429a      	cmp	r2, r3
   2472e:	d804      	bhi.n	2473a <spi_data_write+0x72>
				order = 0x3;
   24730:	2312      	movs	r3, #18
   24732:	18fb      	adds	r3, r7, r3
   24734:	2203      	movs	r2, #3
   24736:	701a      	strb	r2, [r3, #0]
   24738:	e013      	b.n	24762 <spi_data_write+0x9a>
			else
				order = 0x1;
   2473a:	2312      	movs	r3, #18
   2473c:	18fb      	adds	r3, r7, r3
   2473e:	2201      	movs	r2, #1
   24740:	701a      	strb	r2, [r3, #0]
   24742:	e00e      	b.n	24762 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24744:	1cbb      	adds	r3, r7, #2
   24746:	881a      	ldrh	r2, [r3, #0]
   24748:	2380      	movs	r3, #128	; 0x80
   2474a:	019b      	lsls	r3, r3, #6
   2474c:	429a      	cmp	r2, r3
   2474e:	d804      	bhi.n	2475a <spi_data_write+0x92>
				order = 0x3;
   24750:	2312      	movs	r3, #18
   24752:	18fb      	adds	r3, r7, r3
   24754:	2203      	movs	r2, #3
   24756:	701a      	strb	r2, [r3, #0]
   24758:	e003      	b.n	24762 <spi_data_write+0x9a>
			else
				order = 0x2;
   2475a:	2312      	movs	r3, #18
   2475c:	18fb      	adds	r3, r7, r3
   2475e:	2202      	movs	r2, #2
   24760:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24762:	2311      	movs	r3, #17
   24764:	18fb      	adds	r3, r7, r3
   24766:	781a      	ldrb	r2, [r3, #0]
   24768:	2312      	movs	r3, #18
   2476a:	18fb      	adds	r3, r7, r3
   2476c:	781b      	ldrb	r3, [r3, #0]
   2476e:	4313      	orrs	r3, r2
   24770:	b2da      	uxtb	r2, r3
   24772:	2311      	movs	r3, #17
   24774:	18fb      	adds	r3, r7, r3
   24776:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24778:	2311      	movs	r3, #17
   2477a:	18fb      	adds	r3, r7, r3
   2477c:	2101      	movs	r1, #1
   2477e:	0018      	movs	r0, r3
   24780:	4b3c      	ldr	r3, [pc, #240]	; (24874 <spi_data_write+0x1ac>)
   24782:	4798      	blx	r3
   24784:	1e03      	subs	r3, r0, #0
   24786:	d012      	beq.n	247ae <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24788:	4a3b      	ldr	r2, [pc, #236]	; (24878 <spi_data_write+0x1b0>)
   2478a:	493c      	ldr	r1, [pc, #240]	; (2487c <spi_data_write+0x1b4>)
   2478c:	4b3c      	ldr	r3, [pc, #240]	; (24880 <spi_data_write+0x1b8>)
   2478e:	0018      	movs	r0, r3
   24790:	4b3c      	ldr	r3, [pc, #240]	; (24884 <spi_data_write+0x1bc>)
   24792:	4798      	blx	r3
   24794:	4b3c      	ldr	r3, [pc, #240]	; (24888 <spi_data_write+0x1c0>)
   24796:	0018      	movs	r0, r3
   24798:	4b3a      	ldr	r3, [pc, #232]	; (24884 <spi_data_write+0x1bc>)
   2479a:	4798      	blx	r3
   2479c:	4b3b      	ldr	r3, [pc, #236]	; (2488c <spi_data_write+0x1c4>)
   2479e:	0018      	movs	r0, r3
   247a0:	4b38      	ldr	r3, [pc, #224]	; (24884 <spi_data_write+0x1bc>)
   247a2:	4798      	blx	r3
			result = N_FAIL;
   247a4:	2313      	movs	r3, #19
   247a6:	18fb      	adds	r3, r7, r3
   247a8:	2200      	movs	r2, #0
   247aa:	701a      	strb	r2, [r3, #0]
			break;
   247ac:	e059      	b.n	24862 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   247ae:	2316      	movs	r3, #22
   247b0:	18fb      	adds	r3, r7, r3
   247b2:	2200      	movs	r2, #0
   247b4:	5e9b      	ldrsh	r3, [r3, r2]
   247b6:	687a      	ldr	r2, [r7, #4]
   247b8:	18d2      	adds	r2, r2, r3
   247ba:	2314      	movs	r3, #20
   247bc:	18fb      	adds	r3, r7, r3
   247be:	881b      	ldrh	r3, [r3, #0]
   247c0:	0019      	movs	r1, r3
   247c2:	0010      	movs	r0, r2
   247c4:	4b2b      	ldr	r3, [pc, #172]	; (24874 <spi_data_write+0x1ac>)
   247c6:	4798      	blx	r3
   247c8:	1e03      	subs	r3, r0, #0
   247ca:	d012      	beq.n	247f2 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   247cc:	4a30      	ldr	r2, [pc, #192]	; (24890 <spi_data_write+0x1c8>)
   247ce:	492b      	ldr	r1, [pc, #172]	; (2487c <spi_data_write+0x1b4>)
   247d0:	4b2b      	ldr	r3, [pc, #172]	; (24880 <spi_data_write+0x1b8>)
   247d2:	0018      	movs	r0, r3
   247d4:	4b2b      	ldr	r3, [pc, #172]	; (24884 <spi_data_write+0x1bc>)
   247d6:	4798      	blx	r3
   247d8:	4b2e      	ldr	r3, [pc, #184]	; (24894 <spi_data_write+0x1cc>)
   247da:	0018      	movs	r0, r3
   247dc:	4b29      	ldr	r3, [pc, #164]	; (24884 <spi_data_write+0x1bc>)
   247de:	4798      	blx	r3
   247e0:	4b2a      	ldr	r3, [pc, #168]	; (2488c <spi_data_write+0x1c4>)
   247e2:	0018      	movs	r0, r3
   247e4:	4b27      	ldr	r3, [pc, #156]	; (24884 <spi_data_write+0x1bc>)
   247e6:	4798      	blx	r3
			result = N_FAIL;
   247e8:	2313      	movs	r3, #19
   247ea:	18fb      	adds	r3, r7, r3
   247ec:	2200      	movs	r2, #0
   247ee:	701a      	strb	r2, [r3, #0]
			break;
   247f0:	e037      	b.n	24862 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   247f2:	4b29      	ldr	r3, [pc, #164]	; (24898 <spi_data_write+0x1d0>)
   247f4:	781b      	ldrb	r3, [r3, #0]
   247f6:	2b00      	cmp	r3, #0
   247f8:	d11b      	bne.n	24832 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   247fa:	230c      	movs	r3, #12
   247fc:	18fb      	adds	r3, r7, r3
   247fe:	2102      	movs	r1, #2
   24800:	0018      	movs	r0, r3
   24802:	4b1c      	ldr	r3, [pc, #112]	; (24874 <spi_data_write+0x1ac>)
   24804:	4798      	blx	r3
   24806:	1e03      	subs	r3, r0, #0
   24808:	d013      	beq.n	24832 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   2480a:	23d7      	movs	r3, #215	; 0xd7
   2480c:	009a      	lsls	r2, r3, #2
   2480e:	491b      	ldr	r1, [pc, #108]	; (2487c <spi_data_write+0x1b4>)
   24810:	4b1b      	ldr	r3, [pc, #108]	; (24880 <spi_data_write+0x1b8>)
   24812:	0018      	movs	r0, r3
   24814:	4b1b      	ldr	r3, [pc, #108]	; (24884 <spi_data_write+0x1bc>)
   24816:	4798      	blx	r3
   24818:	4b20      	ldr	r3, [pc, #128]	; (2489c <spi_data_write+0x1d4>)
   2481a:	0018      	movs	r0, r3
   2481c:	4b19      	ldr	r3, [pc, #100]	; (24884 <spi_data_write+0x1bc>)
   2481e:	4798      	blx	r3
   24820:	4b1a      	ldr	r3, [pc, #104]	; (2488c <spi_data_write+0x1c4>)
   24822:	0018      	movs	r0, r3
   24824:	4b17      	ldr	r3, [pc, #92]	; (24884 <spi_data_write+0x1bc>)
   24826:	4798      	blx	r3
				result = N_FAIL;
   24828:	2313      	movs	r3, #19
   2482a:	18fb      	adds	r3, r7, r3
   2482c:	2200      	movs	r2, #0
   2482e:	701a      	strb	r2, [r3, #0]
				break;
   24830:	e017      	b.n	24862 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   24832:	2316      	movs	r3, #22
   24834:	18fb      	adds	r3, r7, r3
   24836:	881a      	ldrh	r2, [r3, #0]
   24838:	2314      	movs	r3, #20
   2483a:	18fb      	adds	r3, r7, r3
   2483c:	881b      	ldrh	r3, [r3, #0]
   2483e:	18d3      	adds	r3, r2, r3
   24840:	b29a      	uxth	r2, r3
   24842:	2316      	movs	r3, #22
   24844:	18fb      	adds	r3, r7, r3
   24846:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24848:	1cbb      	adds	r3, r7, #2
   2484a:	1cb9      	adds	r1, r7, #2
   2484c:	2214      	movs	r2, #20
   2484e:	18ba      	adds	r2, r7, r2
   24850:	8809      	ldrh	r1, [r1, #0]
   24852:	8812      	ldrh	r2, [r2, #0]
   24854:	1a8a      	subs	r2, r1, r2
   24856:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24858:	1cbb      	adds	r3, r7, #2
   2485a:	881b      	ldrh	r3, [r3, #0]
   2485c:	2b00      	cmp	r3, #0
   2485e:	d000      	beq.n	24862 <spi_data_write+0x19a>
   24860:	e745      	b.n	246ee <spi_data_write+0x26>


	return result;
   24862:	2313      	movs	r3, #19
   24864:	18fb      	adds	r3, r7, r3
   24866:	781b      	ldrb	r3, [r3, #0]
   24868:	b25b      	sxtb	r3, r3
}
   2486a:	0018      	movs	r0, r3
   2486c:	46bd      	mov	sp, r7
   2486e:	b006      	add	sp, #24
   24870:	bd80      	pop	{r7, pc}
   24872:	46c0      	nop			; (mov r8, r8)
   24874:	00023751 	.word	0x00023751
   24878:	00000349 	.word	0x00000349
   2487c:	00039964 	.word	0x00039964
   24880:	0003933c 	.word	0x0003933c
   24884:	0001e399 	.word	0x0001e399
   24888:	00039604 	.word	0x00039604
   2488c:	0003937c 	.word	0x0003937c
   24890:	00000352 	.word	0x00000352
   24894:	0003963c 	.word	0x0003963c
   24898:	200042ac 	.word	0x200042ac
   2489c:	00039670 	.word	0x00039670

000248a0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   248a0:	b590      	push	{r4, r7, lr}
   248a2:	b087      	sub	sp, #28
   248a4:	af02      	add	r7, sp, #8
   248a6:	6078      	str	r0, [r7, #4]
   248a8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   248aa:	230f      	movs	r3, #15
   248ac:	18fb      	adds	r3, r7, r3
   248ae:	220a      	movs	r2, #10
   248b0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   248b2:	230c      	movs	r3, #12
   248b4:	18fb      	adds	r3, r7, r3
   248b6:	2201      	movs	r2, #1
   248b8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   248ba:	230e      	movs	r3, #14
   248bc:	18fb      	adds	r3, r7, r3
   248be:	22c9      	movs	r2, #201	; 0xc9
   248c0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   248c2:	230d      	movs	r3, #13
   248c4:	18fb      	adds	r3, r7, r3
   248c6:	2200      	movs	r2, #0
   248c8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   248ca:	687b      	ldr	r3, [r7, #4]
   248cc:	2b30      	cmp	r3, #48	; 0x30
   248ce:	d808      	bhi.n	248e2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   248d0:	230e      	movs	r3, #14
   248d2:	18fb      	adds	r3, r7, r3
   248d4:	22c3      	movs	r2, #195	; 0xc3
   248d6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   248d8:	230d      	movs	r3, #13
   248da:	18fb      	adds	r3, r7, r3
   248dc:	2201      	movs	r2, #1
   248de:	701a      	strb	r2, [r3, #0]
   248e0:	e007      	b.n	248f2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   248e2:	230e      	movs	r3, #14
   248e4:	18fb      	adds	r3, r7, r3
   248e6:	22c9      	movs	r2, #201	; 0xc9
   248e8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   248ea:	230d      	movs	r3, #13
   248ec:	18fb      	adds	r3, r7, r3
   248ee:	2200      	movs	r2, #0
   248f0:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   248f2:	003a      	movs	r2, r7
   248f4:	6879      	ldr	r1, [r7, #4]
   248f6:	230e      	movs	r3, #14
   248f8:	18fb      	adds	r3, r7, r3
   248fa:	7818      	ldrb	r0, [r3, #0]
   248fc:	230d      	movs	r3, #13
   248fe:	18fb      	adds	r3, r7, r3
   24900:	781b      	ldrb	r3, [r3, #0]
   24902:	9300      	str	r3, [sp, #0]
   24904:	2304      	movs	r3, #4
   24906:	4c2e      	ldr	r4, [pc, #184]	; (249c0 <spi_write_reg+0x120>)
   24908:	47a0      	blx	r4
   2490a:	0002      	movs	r2, r0
   2490c:	230c      	movs	r3, #12
   2490e:	18fb      	adds	r3, r7, r3
   24910:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24912:	230c      	movs	r3, #12
   24914:	18fb      	adds	r3, r7, r3
   24916:	781b      	ldrb	r3, [r3, #0]
   24918:	b25b      	sxtb	r3, r3
   2491a:	2b01      	cmp	r3, #1
   2491c:	d010      	beq.n	24940 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2491e:	4a29      	ldr	r2, [pc, #164]	; (249c4 <spi_write_reg+0x124>)
   24920:	4929      	ldr	r1, [pc, #164]	; (249c8 <spi_write_reg+0x128>)
   24922:	4b2a      	ldr	r3, [pc, #168]	; (249cc <spi_write_reg+0x12c>)
   24924:	0018      	movs	r0, r3
   24926:	4b2a      	ldr	r3, [pc, #168]	; (249d0 <spi_write_reg+0x130>)
   24928:	4798      	blx	r3
   2492a:	687a      	ldr	r2, [r7, #4]
   2492c:	4b29      	ldr	r3, [pc, #164]	; (249d4 <spi_write_reg+0x134>)
   2492e:	0011      	movs	r1, r2
   24930:	0018      	movs	r0, r3
   24932:	4b27      	ldr	r3, [pc, #156]	; (249d0 <spi_write_reg+0x130>)
   24934:	4798      	blx	r3
   24936:	4b28      	ldr	r3, [pc, #160]	; (249d8 <spi_write_reg+0x138>)
   24938:	0018      	movs	r0, r3
   2493a:	4b25      	ldr	r3, [pc, #148]	; (249d0 <spi_write_reg+0x130>)
   2493c:	4798      	blx	r3
		goto _FAIL_;
   2493e:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   24940:	230c      	movs	r3, #12
   24942:	18fb      	adds	r3, r7, r3
   24944:	781b      	ldrb	r3, [r3, #0]
   24946:	b25b      	sxtb	r3, r3
   24948:	2b01      	cmp	r3, #1
   2494a:	d030      	beq.n	249ae <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   2494c:	2001      	movs	r0, #1
   2494e:	4b23      	ldr	r3, [pc, #140]	; (249dc <spi_write_reg+0x13c>)
   24950:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24952:	2300      	movs	r3, #0
   24954:	9300      	str	r3, [sp, #0]
   24956:	2300      	movs	r3, #0
   24958:	2200      	movs	r2, #0
   2495a:	2100      	movs	r1, #0
   2495c:	20cf      	movs	r0, #207	; 0xcf
   2495e:	4c20      	ldr	r4, [pc, #128]	; (249e0 <spi_write_reg+0x140>)
   24960:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24962:	20cf      	movs	r0, #207	; 0xcf
   24964:	4b1f      	ldr	r3, [pc, #124]	; (249e4 <spi_write_reg+0x144>)
   24966:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24968:	23ea      	movs	r3, #234	; 0xea
   2496a:	009a      	lsls	r2, r3, #2
   2496c:	4916      	ldr	r1, [pc, #88]	; (249c8 <spi_write_reg+0x128>)
   2496e:	4b17      	ldr	r3, [pc, #92]	; (249cc <spi_write_reg+0x12c>)
   24970:	0018      	movs	r0, r3
   24972:	4b17      	ldr	r3, [pc, #92]	; (249d0 <spi_write_reg+0x130>)
   24974:	4798      	blx	r3
   24976:	230f      	movs	r3, #15
   24978:	18fb      	adds	r3, r7, r3
   2497a:	7819      	ldrb	r1, [r3, #0]
   2497c:	683b      	ldr	r3, [r7, #0]
   2497e:	687a      	ldr	r2, [r7, #4]
   24980:	4819      	ldr	r0, [pc, #100]	; (249e8 <spi_write_reg+0x148>)
   24982:	4c13      	ldr	r4, [pc, #76]	; (249d0 <spi_write_reg+0x130>)
   24984:	47a0      	blx	r4
   24986:	4b14      	ldr	r3, [pc, #80]	; (249d8 <spi_write_reg+0x138>)
   24988:	0018      	movs	r0, r3
   2498a:	4b11      	ldr	r3, [pc, #68]	; (249d0 <spi_write_reg+0x130>)
   2498c:	4798      	blx	r3
		nm_bsp_sleep(1);
   2498e:	2001      	movs	r0, #1
   24990:	4b12      	ldr	r3, [pc, #72]	; (249dc <spi_write_reg+0x13c>)
   24992:	4798      	blx	r3
		retry--;
   24994:	230f      	movs	r3, #15
   24996:	18fb      	adds	r3, r7, r3
   24998:	781a      	ldrb	r2, [r3, #0]
   2499a:	230f      	movs	r3, #15
   2499c:	18fb      	adds	r3, r7, r3
   2499e:	3a01      	subs	r2, #1
   249a0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   249a2:	230f      	movs	r3, #15
   249a4:	18fb      	adds	r3, r7, r3
   249a6:	781b      	ldrb	r3, [r3, #0]
   249a8:	2b00      	cmp	r3, #0
   249aa:	d000      	beq.n	249ae <spi_write_reg+0x10e>
   249ac:	e78d      	b.n	248ca <spi_write_reg+0x2a>
	}

	return result;
   249ae:	230c      	movs	r3, #12
   249b0:	18fb      	adds	r3, r7, r3
   249b2:	781b      	ldrb	r3, [r3, #0]
   249b4:	b25b      	sxtb	r3, r3
}
   249b6:	0018      	movs	r0, r3
   249b8:	46bd      	mov	sp, r7
   249ba:	b005      	add	sp, #20
   249bc:	bd90      	pop	{r4, r7, pc}
   249be:	46c0      	nop			; (mov r8, r8)
   249c0:	00023dd5 	.word	0x00023dd5
   249c4:	0000039d 	.word	0x0000039d
   249c8:	00039974 	.word	0x00039974
   249cc:	0003933c 	.word	0x0003933c
   249d0:	0001e399 	.word	0x0001e399
   249d4:	000396a8 	.word	0x000396a8
   249d8:	0003937c 	.word	0x0003937c
   249dc:	000207ed 	.word	0x000207ed
   249e0:	00023859 	.word	0x00023859
   249e4:	00023c99 	.word	0x00023c99
   249e8:	000396d4 	.word	0x000396d4

000249ec <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   249ec:	b590      	push	{r4, r7, lr}
   249ee:	b089      	sub	sp, #36	; 0x24
   249f0:	af02      	add	r7, sp, #8
   249f2:	60f8      	str	r0, [r7, #12]
   249f4:	60b9      	str	r1, [r7, #8]
   249f6:	1dbb      	adds	r3, r7, #6
   249f8:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   249fa:	2316      	movs	r3, #22
   249fc:	18fb      	adds	r3, r7, r3
   249fe:	220a      	movs	r2, #10
   24a00:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   24a02:	2315      	movs	r3, #21
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	22c7      	movs	r2, #199	; 0xc7
   24a08:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24a0a:	1dbb      	adds	r3, r7, #6
   24a0c:	881a      	ldrh	r2, [r3, #0]
   24a0e:	68f9      	ldr	r1, [r7, #12]
   24a10:	2315      	movs	r3, #21
   24a12:	18fb      	adds	r3, r7, r3
   24a14:	7818      	ldrb	r0, [r3, #0]
   24a16:	2300      	movs	r3, #0
   24a18:	9300      	str	r3, [sp, #0]
   24a1a:	0013      	movs	r3, r2
   24a1c:	2200      	movs	r2, #0
   24a1e:	4c4d      	ldr	r4, [pc, #308]	; (24b54 <nm_spi_write+0x168>)
   24a20:	47a0      	blx	r4
   24a22:	0002      	movs	r2, r0
   24a24:	2317      	movs	r3, #23
   24a26:	18fb      	adds	r3, r7, r3
   24a28:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24a2a:	2317      	movs	r3, #23
   24a2c:	18fb      	adds	r3, r7, r3
   24a2e:	781b      	ldrb	r3, [r3, #0]
   24a30:	b25b      	sxtb	r3, r3
   24a32:	2b01      	cmp	r3, #1
   24a34:	d010      	beq.n	24a58 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   24a36:	4a48      	ldr	r2, [pc, #288]	; (24b58 <nm_spi_write+0x16c>)
   24a38:	4948      	ldr	r1, [pc, #288]	; (24b5c <nm_spi_write+0x170>)
   24a3a:	4b49      	ldr	r3, [pc, #292]	; (24b60 <nm_spi_write+0x174>)
   24a3c:	0018      	movs	r0, r3
   24a3e:	4b49      	ldr	r3, [pc, #292]	; (24b64 <nm_spi_write+0x178>)
   24a40:	4798      	blx	r3
   24a42:	68fa      	ldr	r2, [r7, #12]
   24a44:	4b48      	ldr	r3, [pc, #288]	; (24b68 <nm_spi_write+0x17c>)
   24a46:	0011      	movs	r1, r2
   24a48:	0018      	movs	r0, r3
   24a4a:	4b46      	ldr	r3, [pc, #280]	; (24b64 <nm_spi_write+0x178>)
   24a4c:	4798      	blx	r3
   24a4e:	4b47      	ldr	r3, [pc, #284]	; (24b6c <nm_spi_write+0x180>)
   24a50:	0018      	movs	r0, r3
   24a52:	4b44      	ldr	r3, [pc, #272]	; (24b64 <nm_spi_write+0x178>)
   24a54:	4798      	blx	r3
		goto _FAIL_;
   24a56:	e03e      	b.n	24ad6 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24a58:	2317      	movs	r3, #23
   24a5a:	18fc      	adds	r4, r7, r3
   24a5c:	1dbb      	adds	r3, r7, #6
   24a5e:	881a      	ldrh	r2, [r3, #0]
   24a60:	68bb      	ldr	r3, [r7, #8]
   24a62:	0011      	movs	r1, r2
   24a64:	0018      	movs	r0, r3
   24a66:	4b42      	ldr	r3, [pc, #264]	; (24b70 <nm_spi_write+0x184>)
   24a68:	4798      	blx	r3
   24a6a:	0003      	movs	r3, r0
   24a6c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24a6e:	2317      	movs	r3, #23
   24a70:	18fb      	adds	r3, r7, r3
   24a72:	781b      	ldrb	r3, [r3, #0]
   24a74:	b25b      	sxtb	r3, r3
   24a76:	2b01      	cmp	r3, #1
   24a78:	d00e      	beq.n	24a98 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24a7a:	4a3e      	ldr	r2, [pc, #248]	; (24b74 <nm_spi_write+0x188>)
   24a7c:	4937      	ldr	r1, [pc, #220]	; (24b5c <nm_spi_write+0x170>)
   24a7e:	4b38      	ldr	r3, [pc, #224]	; (24b60 <nm_spi_write+0x174>)
   24a80:	0018      	movs	r0, r3
   24a82:	4b38      	ldr	r3, [pc, #224]	; (24b64 <nm_spi_write+0x178>)
   24a84:	4798      	blx	r3
   24a86:	4b3c      	ldr	r3, [pc, #240]	; (24b78 <nm_spi_write+0x18c>)
   24a88:	0018      	movs	r0, r3
   24a8a:	4b36      	ldr	r3, [pc, #216]	; (24b64 <nm_spi_write+0x178>)
   24a8c:	4798      	blx	r3
   24a8e:	4b37      	ldr	r3, [pc, #220]	; (24b6c <nm_spi_write+0x180>)
   24a90:	0018      	movs	r0, r3
   24a92:	4b34      	ldr	r3, [pc, #208]	; (24b64 <nm_spi_write+0x178>)
   24a94:	4798      	blx	r3
		goto _FAIL_;
   24a96:	e01e      	b.n	24ad6 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24a98:	2317      	movs	r3, #23
   24a9a:	18fc      	adds	r4, r7, r3
   24a9c:	2315      	movs	r3, #21
   24a9e:	18fb      	adds	r3, r7, r3
   24aa0:	781b      	ldrb	r3, [r3, #0]
   24aa2:	0018      	movs	r0, r3
   24aa4:	4b35      	ldr	r3, [pc, #212]	; (24b7c <nm_spi_write+0x190>)
   24aa6:	4798      	blx	r3
   24aa8:	0003      	movs	r3, r0
   24aaa:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24aac:	2317      	movs	r3, #23
   24aae:	18fb      	adds	r3, r7, r3
   24ab0:	781b      	ldrb	r3, [r3, #0]
   24ab2:	b25b      	sxtb	r3, r3
   24ab4:	2b01      	cmp	r3, #1
   24ab6:	d00e      	beq.n	24ad6 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24ab8:	4a31      	ldr	r2, [pc, #196]	; (24b80 <nm_spi_write+0x194>)
   24aba:	4928      	ldr	r1, [pc, #160]	; (24b5c <nm_spi_write+0x170>)
   24abc:	4b28      	ldr	r3, [pc, #160]	; (24b60 <nm_spi_write+0x174>)
   24abe:	0018      	movs	r0, r3
   24ac0:	4b28      	ldr	r3, [pc, #160]	; (24b64 <nm_spi_write+0x178>)
   24ac2:	4798      	blx	r3
   24ac4:	4b2c      	ldr	r3, [pc, #176]	; (24b78 <nm_spi_write+0x18c>)
   24ac6:	0018      	movs	r0, r3
   24ac8:	4b26      	ldr	r3, [pc, #152]	; (24b64 <nm_spi_write+0x178>)
   24aca:	4798      	blx	r3
   24acc:	4b27      	ldr	r3, [pc, #156]	; (24b6c <nm_spi_write+0x180>)
   24ace:	0018      	movs	r0, r3
   24ad0:	4b24      	ldr	r3, [pc, #144]	; (24b64 <nm_spi_write+0x178>)
   24ad2:	4798      	blx	r3
		goto _FAIL_;
   24ad4:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   24ad6:	2317      	movs	r3, #23
   24ad8:	18fb      	adds	r3, r7, r3
   24ada:	781b      	ldrb	r3, [r3, #0]
   24adc:	b25b      	sxtb	r3, r3
   24ade:	2b01      	cmp	r3, #1
   24ae0:	d030      	beq.n	24b44 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   24ae2:	2001      	movs	r0, #1
   24ae4:	4b27      	ldr	r3, [pc, #156]	; (24b84 <nm_spi_write+0x198>)
   24ae6:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24ae8:	2300      	movs	r3, #0
   24aea:	9300      	str	r3, [sp, #0]
   24aec:	2300      	movs	r3, #0
   24aee:	2200      	movs	r2, #0
   24af0:	2100      	movs	r1, #0
   24af2:	20cf      	movs	r0, #207	; 0xcf
   24af4:	4c24      	ldr	r4, [pc, #144]	; (24b88 <nm_spi_write+0x19c>)
   24af6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24af8:	20cf      	movs	r0, #207	; 0xcf
   24afa:	4b24      	ldr	r3, [pc, #144]	; (24b8c <nm_spi_write+0x1a0>)
   24afc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24afe:	4a24      	ldr	r2, [pc, #144]	; (24b90 <nm_spi_write+0x1a4>)
   24b00:	4916      	ldr	r1, [pc, #88]	; (24b5c <nm_spi_write+0x170>)
   24b02:	4b17      	ldr	r3, [pc, #92]	; (24b60 <nm_spi_write+0x174>)
   24b04:	0018      	movs	r0, r3
   24b06:	4b17      	ldr	r3, [pc, #92]	; (24b64 <nm_spi_write+0x178>)
   24b08:	4798      	blx	r3
   24b0a:	2316      	movs	r3, #22
   24b0c:	18fb      	adds	r3, r7, r3
   24b0e:	7819      	ldrb	r1, [r3, #0]
   24b10:	1dbb      	adds	r3, r7, #6
   24b12:	881b      	ldrh	r3, [r3, #0]
   24b14:	68fa      	ldr	r2, [r7, #12]
   24b16:	481f      	ldr	r0, [pc, #124]	; (24b94 <nm_spi_write+0x1a8>)
   24b18:	4c12      	ldr	r4, [pc, #72]	; (24b64 <nm_spi_write+0x178>)
   24b1a:	47a0      	blx	r4
   24b1c:	4b13      	ldr	r3, [pc, #76]	; (24b6c <nm_spi_write+0x180>)
   24b1e:	0018      	movs	r0, r3
   24b20:	4b10      	ldr	r3, [pc, #64]	; (24b64 <nm_spi_write+0x178>)
   24b22:	4798      	blx	r3
		nm_bsp_sleep(1);
   24b24:	2001      	movs	r0, #1
   24b26:	4b17      	ldr	r3, [pc, #92]	; (24b84 <nm_spi_write+0x198>)
   24b28:	4798      	blx	r3
		retry--;
   24b2a:	2316      	movs	r3, #22
   24b2c:	18fb      	adds	r3, r7, r3
   24b2e:	781a      	ldrb	r2, [r3, #0]
   24b30:	2316      	movs	r3, #22
   24b32:	18fb      	adds	r3, r7, r3
   24b34:	3a01      	subs	r2, #1
   24b36:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24b38:	2316      	movs	r3, #22
   24b3a:	18fb      	adds	r3, r7, r3
   24b3c:	781b      	ldrb	r3, [r3, #0]
   24b3e:	2b00      	cmp	r3, #0
   24b40:	d000      	beq.n	24b44 <nm_spi_write+0x158>
   24b42:	e762      	b.n	24a0a <nm_spi_write+0x1e>
	}


	return result;
   24b44:	2317      	movs	r3, #23
   24b46:	18fb      	adds	r3, r7, r3
   24b48:	781b      	ldrb	r3, [r3, #0]
   24b4a:	b25b      	sxtb	r3, r3
}
   24b4c:	0018      	movs	r0, r3
   24b4e:	46bd      	mov	sp, r7
   24b50:	b007      	add	sp, #28
   24b52:	bd90      	pop	{r4, r7, pc}
   24b54:	00023dd5 	.word	0x00023dd5
   24b58:	000003cf 	.word	0x000003cf
   24b5c:	00039984 	.word	0x00039984
   24b60:	0003933c 	.word	0x0003933c
   24b64:	0001e399 	.word	0x0001e399
   24b68:	000396f0 	.word	0x000396f0
   24b6c:	0003937c 	.word	0x0003937c
   24b70:	000246c9 	.word	0x000246c9
   24b74:	000003d9 	.word	0x000003d9
   24b78:	00039720 	.word	0x00039720
   24b7c:	00023b99 	.word	0x00023b99
   24b80:	000003e1 	.word	0x000003e1
   24b84:	000207ed 	.word	0x000207ed
   24b88:	00023859 	.word	0x00023859
   24b8c:	00023c99 	.word	0x00023c99
   24b90:	000003eb 	.word	0x000003eb
   24b94:	00039748 	.word	0x00039748

00024b98 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24b98:	b590      	push	{r4, r7, lr}
   24b9a:	b087      	sub	sp, #28
   24b9c:	af02      	add	r7, sp, #8
   24b9e:	6078      	str	r0, [r7, #4]
   24ba0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24ba2:	230f      	movs	r3, #15
   24ba4:	18fb      	adds	r3, r7, r3
   24ba6:	220a      	movs	r2, #10
   24ba8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24baa:	230c      	movs	r3, #12
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	2201      	movs	r2, #1
   24bb0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   24bb2:	230e      	movs	r3, #14
   24bb4:	18fb      	adds	r3, r7, r3
   24bb6:	22ca      	movs	r2, #202	; 0xca
   24bb8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   24bba:	230d      	movs	r3, #13
   24bbc:	18fb      	adds	r3, r7, r3
   24bbe:	2200      	movs	r2, #0
   24bc0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   24bc2:	687b      	ldr	r3, [r7, #4]
   24bc4:	2bff      	cmp	r3, #255	; 0xff
   24bc6:	d808      	bhi.n	24bda <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24bc8:	230e      	movs	r3, #14
   24bca:	18fb      	adds	r3, r7, r3
   24bcc:	22c4      	movs	r2, #196	; 0xc4
   24bce:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24bd0:	230d      	movs	r3, #13
   24bd2:	18fb      	adds	r3, r7, r3
   24bd4:	2201      	movs	r2, #1
   24bd6:	701a      	strb	r2, [r3, #0]
   24bd8:	e007      	b.n	24bea <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24bda:	230e      	movs	r3, #14
   24bdc:	18fb      	adds	r3, r7, r3
   24bde:	22ca      	movs	r2, #202	; 0xca
   24be0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24be2:	230d      	movs	r3, #13
   24be4:	18fb      	adds	r3, r7, r3
   24be6:	2200      	movs	r2, #0
   24be8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24bea:	2308      	movs	r3, #8
   24bec:	18fa      	adds	r2, r7, r3
   24bee:	6879      	ldr	r1, [r7, #4]
   24bf0:	230e      	movs	r3, #14
   24bf2:	18fb      	adds	r3, r7, r3
   24bf4:	7818      	ldrb	r0, [r3, #0]
   24bf6:	230d      	movs	r3, #13
   24bf8:	18fb      	adds	r3, r7, r3
   24bfa:	781b      	ldrb	r3, [r3, #0]
   24bfc:	9300      	str	r3, [sp, #0]
   24bfe:	2304      	movs	r3, #4
   24c00:	4c37      	ldr	r4, [pc, #220]	; (24ce0 <spi_read_reg+0x148>)
   24c02:	47a0      	blx	r4
   24c04:	0002      	movs	r2, r0
   24c06:	230c      	movs	r3, #12
   24c08:	18fb      	adds	r3, r7, r3
   24c0a:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24c0c:	230c      	movs	r3, #12
   24c0e:	18fb      	adds	r3, r7, r3
   24c10:	781b      	ldrb	r3, [r3, #0]
   24c12:	b25b      	sxtb	r3, r3
   24c14:	2b01      	cmp	r3, #1
   24c16:	d010      	beq.n	24c3a <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24c18:	4a32      	ldr	r2, [pc, #200]	; (24ce4 <spi_read_reg+0x14c>)
   24c1a:	4933      	ldr	r1, [pc, #204]	; (24ce8 <spi_read_reg+0x150>)
   24c1c:	4b33      	ldr	r3, [pc, #204]	; (24cec <spi_read_reg+0x154>)
   24c1e:	0018      	movs	r0, r3
   24c20:	4b33      	ldr	r3, [pc, #204]	; (24cf0 <spi_read_reg+0x158>)
   24c22:	4798      	blx	r3
   24c24:	687a      	ldr	r2, [r7, #4]
   24c26:	4b33      	ldr	r3, [pc, #204]	; (24cf4 <spi_read_reg+0x15c>)
   24c28:	0011      	movs	r1, r2
   24c2a:	0018      	movs	r0, r3
   24c2c:	4b30      	ldr	r3, [pc, #192]	; (24cf0 <spi_read_reg+0x158>)
   24c2e:	4798      	blx	r3
   24c30:	4b31      	ldr	r3, [pc, #196]	; (24cf8 <spi_read_reg+0x160>)
   24c32:	0018      	movs	r0, r3
   24c34:	4b2e      	ldr	r3, [pc, #184]	; (24cf0 <spi_read_reg+0x158>)
   24c36:	4798      	blx	r3
		goto _FAIL_;
   24c38:	e014      	b.n	24c64 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24c3a:	2308      	movs	r3, #8
   24c3c:	18fb      	adds	r3, r7, r3
   24c3e:	781b      	ldrb	r3, [r3, #0]
   24c40:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   24c42:	2308      	movs	r3, #8
   24c44:	18fb      	adds	r3, r7, r3
   24c46:	785b      	ldrb	r3, [r3, #1]
   24c48:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24c4a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24c4c:	2308      	movs	r3, #8
   24c4e:	18fb      	adds	r3, r7, r3
   24c50:	789b      	ldrb	r3, [r3, #2]
   24c52:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24c54:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24c56:	2308      	movs	r3, #8
   24c58:	18fb      	adds	r3, r7, r3
   24c5a:	78db      	ldrb	r3, [r3, #3]
   24c5c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24c5e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24c60:	683b      	ldr	r3, [r7, #0]
   24c62:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24c64:	230c      	movs	r3, #12
   24c66:	18fb      	adds	r3, r7, r3
   24c68:	781b      	ldrb	r3, [r3, #0]
   24c6a:	b25b      	sxtb	r3, r3
   24c6c:	2b01      	cmp	r3, #1
   24c6e:	d02f      	beq.n	24cd0 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24c70:	2001      	movs	r0, #1
   24c72:	4b22      	ldr	r3, [pc, #136]	; (24cfc <spi_read_reg+0x164>)
   24c74:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24c76:	2300      	movs	r3, #0
   24c78:	9300      	str	r3, [sp, #0]
   24c7a:	2300      	movs	r3, #0
   24c7c:	2200      	movs	r2, #0
   24c7e:	2100      	movs	r1, #0
   24c80:	20cf      	movs	r0, #207	; 0xcf
   24c82:	4c1f      	ldr	r4, [pc, #124]	; (24d00 <spi_read_reg+0x168>)
   24c84:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24c86:	20cf      	movs	r0, #207	; 0xcf
   24c88:	4b1e      	ldr	r3, [pc, #120]	; (24d04 <spi_read_reg+0x16c>)
   24c8a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24c8c:	4a1e      	ldr	r2, [pc, #120]	; (24d08 <spi_read_reg+0x170>)
   24c8e:	4916      	ldr	r1, [pc, #88]	; (24ce8 <spi_read_reg+0x150>)
   24c90:	4b16      	ldr	r3, [pc, #88]	; (24cec <spi_read_reg+0x154>)
   24c92:	0018      	movs	r0, r3
   24c94:	4b16      	ldr	r3, [pc, #88]	; (24cf0 <spi_read_reg+0x158>)
   24c96:	4798      	blx	r3
   24c98:	230f      	movs	r3, #15
   24c9a:	18fb      	adds	r3, r7, r3
   24c9c:	7819      	ldrb	r1, [r3, #0]
   24c9e:	687a      	ldr	r2, [r7, #4]
   24ca0:	4b1a      	ldr	r3, [pc, #104]	; (24d0c <spi_read_reg+0x174>)
   24ca2:	0018      	movs	r0, r3
   24ca4:	4b12      	ldr	r3, [pc, #72]	; (24cf0 <spi_read_reg+0x158>)
   24ca6:	4798      	blx	r3
   24ca8:	4b13      	ldr	r3, [pc, #76]	; (24cf8 <spi_read_reg+0x160>)
   24caa:	0018      	movs	r0, r3
   24cac:	4b10      	ldr	r3, [pc, #64]	; (24cf0 <spi_read_reg+0x158>)
   24cae:	4798      	blx	r3
		nm_bsp_sleep(1);
   24cb0:	2001      	movs	r0, #1
   24cb2:	4b12      	ldr	r3, [pc, #72]	; (24cfc <spi_read_reg+0x164>)
   24cb4:	4798      	blx	r3
		retry--;
   24cb6:	230f      	movs	r3, #15
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	781a      	ldrb	r2, [r3, #0]
   24cbc:	230f      	movs	r3, #15
   24cbe:	18fb      	adds	r3, r7, r3
   24cc0:	3a01      	subs	r2, #1
   24cc2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24cc4:	230f      	movs	r3, #15
   24cc6:	18fb      	adds	r3, r7, r3
   24cc8:	781b      	ldrb	r3, [r3, #0]
   24cca:	2b00      	cmp	r3, #0
   24ccc:	d000      	beq.n	24cd0 <spi_read_reg+0x138>
   24cce:	e778      	b.n	24bc2 <spi_read_reg+0x2a>
	}
		
	return result;
   24cd0:	230c      	movs	r3, #12
   24cd2:	18fb      	adds	r3, r7, r3
   24cd4:	781b      	ldrb	r3, [r3, #0]
   24cd6:	b25b      	sxtb	r3, r3
}
   24cd8:	0018      	movs	r0, r3
   24cda:	46bd      	mov	sp, r7
   24cdc:	b005      	add	sp, #20
   24cde:	bd90      	pop	{r4, r7, pc}
   24ce0:	00023dd5 	.word	0x00023dd5
   24ce4:	00000423 	.word	0x00000423
   24ce8:	00039994 	.word	0x00039994
   24cec:	0003933c 	.word	0x0003933c
   24cf0:	0001e399 	.word	0x0001e399
   24cf4:	00039764 	.word	0x00039764
   24cf8:	0003937c 	.word	0x0003937c
   24cfc:	000207ed 	.word	0x000207ed
   24d00:	00023859 	.word	0x00023859
   24d04:	00023c99 	.word	0x00023c99
   24d08:	00000435 	.word	0x00000435
   24d0c:	00039790 	.word	0x00039790

00024d10 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   24d10:	b590      	push	{r4, r7, lr}
   24d12:	b089      	sub	sp, #36	; 0x24
   24d14:	af02      	add	r7, sp, #8
   24d16:	60f8      	str	r0, [r7, #12]
   24d18:	60b9      	str	r1, [r7, #8]
   24d1a:	1dbb      	adds	r3, r7, #6
   24d1c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24d1e:	2316      	movs	r3, #22
   24d20:	18fb      	adds	r3, r7, r3
   24d22:	22c8      	movs	r2, #200	; 0xc8
   24d24:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24d26:	2317      	movs	r3, #23
   24d28:	18fb      	adds	r3, r7, r3
   24d2a:	220a      	movs	r2, #10
   24d2c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24d2e:	1dbb      	adds	r3, r7, #6
   24d30:	881c      	ldrh	r4, [r3, #0]
   24d32:	68ba      	ldr	r2, [r7, #8]
   24d34:	68f9      	ldr	r1, [r7, #12]
   24d36:	2316      	movs	r3, #22
   24d38:	18fb      	adds	r3, r7, r3
   24d3a:	7818      	ldrb	r0, [r3, #0]
   24d3c:	2300      	movs	r3, #0
   24d3e:	9300      	str	r3, [sp, #0]
   24d40:	0023      	movs	r3, r4
   24d42:	4c2e      	ldr	r4, [pc, #184]	; (24dfc <nm_spi_read+0xec>)
   24d44:	47a0      	blx	r4
   24d46:	0002      	movs	r2, r0
   24d48:	2315      	movs	r3, #21
   24d4a:	18fb      	adds	r3, r7, r3
   24d4c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24d4e:	2315      	movs	r3, #21
   24d50:	18fb      	adds	r3, r7, r3
   24d52:	781b      	ldrb	r3, [r3, #0]
   24d54:	b25b      	sxtb	r3, r3
   24d56:	2b01      	cmp	r3, #1
   24d58:	d010      	beq.n	24d7c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24d5a:	4a29      	ldr	r2, [pc, #164]	; (24e00 <nm_spi_read+0xf0>)
   24d5c:	4929      	ldr	r1, [pc, #164]	; (24e04 <nm_spi_read+0xf4>)
   24d5e:	4b2a      	ldr	r3, [pc, #168]	; (24e08 <nm_spi_read+0xf8>)
   24d60:	0018      	movs	r0, r3
   24d62:	4b2a      	ldr	r3, [pc, #168]	; (24e0c <nm_spi_read+0xfc>)
   24d64:	4798      	blx	r3
   24d66:	68fa      	ldr	r2, [r7, #12]
   24d68:	4b29      	ldr	r3, [pc, #164]	; (24e10 <nm_spi_read+0x100>)
   24d6a:	0011      	movs	r1, r2
   24d6c:	0018      	movs	r0, r3
   24d6e:	4b27      	ldr	r3, [pc, #156]	; (24e0c <nm_spi_read+0xfc>)
   24d70:	4798      	blx	r3
   24d72:	4b28      	ldr	r3, [pc, #160]	; (24e14 <nm_spi_read+0x104>)
   24d74:	0018      	movs	r0, r3
   24d76:	4b25      	ldr	r3, [pc, #148]	; (24e0c <nm_spi_read+0xfc>)
   24d78:	4798      	blx	r3
		goto _FAIL_;
   24d7a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24d7c:	2315      	movs	r3, #21
   24d7e:	18fb      	adds	r3, r7, r3
   24d80:	781b      	ldrb	r3, [r3, #0]
   24d82:	b25b      	sxtb	r3, r3
   24d84:	2b01      	cmp	r3, #1
   24d86:	d030      	beq.n	24dea <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24d88:	2001      	movs	r0, #1
   24d8a:	4b23      	ldr	r3, [pc, #140]	; (24e18 <nm_spi_read+0x108>)
   24d8c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24d8e:	2300      	movs	r3, #0
   24d90:	9300      	str	r3, [sp, #0]
   24d92:	2300      	movs	r3, #0
   24d94:	2200      	movs	r2, #0
   24d96:	2100      	movs	r1, #0
   24d98:	20cf      	movs	r0, #207	; 0xcf
   24d9a:	4c20      	ldr	r4, [pc, #128]	; (24e1c <nm_spi_read+0x10c>)
   24d9c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24d9e:	20cf      	movs	r0, #207	; 0xcf
   24da0:	4b1f      	ldr	r3, [pc, #124]	; (24e20 <nm_spi_read+0x110>)
   24da2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24da4:	4a1f      	ldr	r2, [pc, #124]	; (24e24 <nm_spi_read+0x114>)
   24da6:	4917      	ldr	r1, [pc, #92]	; (24e04 <nm_spi_read+0xf4>)
   24da8:	4b17      	ldr	r3, [pc, #92]	; (24e08 <nm_spi_read+0xf8>)
   24daa:	0018      	movs	r0, r3
   24dac:	4b17      	ldr	r3, [pc, #92]	; (24e0c <nm_spi_read+0xfc>)
   24dae:	4798      	blx	r3
   24db0:	2317      	movs	r3, #23
   24db2:	18fb      	adds	r3, r7, r3
   24db4:	7819      	ldrb	r1, [r3, #0]
   24db6:	1dbb      	adds	r3, r7, #6
   24db8:	881b      	ldrh	r3, [r3, #0]
   24dba:	68fa      	ldr	r2, [r7, #12]
   24dbc:	481a      	ldr	r0, [pc, #104]	; (24e28 <nm_spi_read+0x118>)
   24dbe:	4c13      	ldr	r4, [pc, #76]	; (24e0c <nm_spi_read+0xfc>)
   24dc0:	47a0      	blx	r4
   24dc2:	4b14      	ldr	r3, [pc, #80]	; (24e14 <nm_spi_read+0x104>)
   24dc4:	0018      	movs	r0, r3
   24dc6:	4b11      	ldr	r3, [pc, #68]	; (24e0c <nm_spi_read+0xfc>)
   24dc8:	4798      	blx	r3
		nm_bsp_sleep(1);
   24dca:	2001      	movs	r0, #1
   24dcc:	4b12      	ldr	r3, [pc, #72]	; (24e18 <nm_spi_read+0x108>)
   24dce:	4798      	blx	r3
		retry--;
   24dd0:	2317      	movs	r3, #23
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	781a      	ldrb	r2, [r3, #0]
   24dd6:	2317      	movs	r3, #23
   24dd8:	18fb      	adds	r3, r7, r3
   24dda:	3a01      	subs	r2, #1
   24ddc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24dde:	2317      	movs	r3, #23
   24de0:	18fb      	adds	r3, r7, r3
   24de2:	781b      	ldrb	r3, [r3, #0]
   24de4:	2b00      	cmp	r3, #0
   24de6:	d000      	beq.n	24dea <nm_spi_read+0xda>
   24de8:	e7a1      	b.n	24d2e <nm_spi_read+0x1e>
	}

	return result;
   24dea:	2315      	movs	r3, #21
   24dec:	18fb      	adds	r3, r7, r3
   24dee:	781b      	ldrb	r3, [r3, #0]
   24df0:	b25b      	sxtb	r3, r3
}
   24df2:	0018      	movs	r0, r3
   24df4:	46bd      	mov	sp, r7
   24df6:	b007      	add	sp, #28
   24df8:	bd90      	pop	{r4, r7, pc}
   24dfa:	46c0      	nop			; (mov r8, r8)
   24dfc:	00023dd5 	.word	0x00023dd5
   24e00:	00000472 	.word	0x00000472
   24e04:	000399a4 	.word	0x000399a4
   24e08:	0003933c 	.word	0x0003933c
   24e0c:	0001e399 	.word	0x0001e399
   24e10:	000397a8 	.word	0x000397a8
   24e14:	0003937c 	.word	0x0003937c
   24e18:	000207ed 	.word	0x000207ed
   24e1c:	00023859 	.word	0x00023859
   24e20:	00023c99 	.word	0x00023c99
   24e24:	0000047d 	.word	0x0000047d
   24e28:	00039748 	.word	0x00039748

00024e2c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24e2c:	b580      	push	{r7, lr}
   24e2e:	b082      	sub	sp, #8
   24e30:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   24e32:	4b0c      	ldr	r3, [pc, #48]	; (24e64 <spi_init_pkt_sz+0x38>)
   24e34:	0018      	movs	r0, r3
   24e36:	4b0c      	ldr	r3, [pc, #48]	; (24e68 <spi_init_pkt_sz+0x3c>)
   24e38:	4798      	blx	r3
   24e3a:	0003      	movs	r3, r0
   24e3c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24e3e:	687b      	ldr	r3, [r7, #4]
   24e40:	2270      	movs	r2, #112	; 0x70
   24e42:	4393      	bics	r3, r2
   24e44:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24e46:	687b      	ldr	r3, [r7, #4]
   24e48:	2250      	movs	r2, #80	; 0x50
   24e4a:	4313      	orrs	r3, r2
   24e4c:	607b      	str	r3, [r7, #4]
   24e4e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24e50:	687b      	ldr	r3, [r7, #4]
   24e52:	4a04      	ldr	r2, [pc, #16]	; (24e64 <spi_init_pkt_sz+0x38>)
   24e54:	0019      	movs	r1, r3
   24e56:	0010      	movs	r0, r2
   24e58:	4b04      	ldr	r3, [pc, #16]	; (24e6c <spi_init_pkt_sz+0x40>)
   24e5a:	4798      	blx	r3
}
   24e5c:	46c0      	nop			; (mov r8, r8)
   24e5e:	46bd      	mov	sp, r7
   24e60:	b002      	add	sp, #8
   24e62:	bd80      	pop	{r7, pc}
   24e64:	0000e824 	.word	0x0000e824
   24e68:	00025005 	.word	0x00025005
   24e6c:	00025079 	.word	0x00025079

00024e70 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24e70:	b590      	push	{r4, r7, lr}
   24e72:	b083      	sub	sp, #12
   24e74:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24e76:	2300      	movs	r3, #0
   24e78:	9300      	str	r3, [sp, #0]
   24e7a:	2300      	movs	r3, #0
   24e7c:	2200      	movs	r2, #0
   24e7e:	2100      	movs	r1, #0
   24e80:	20cf      	movs	r0, #207	; 0xcf
   24e82:	4c05      	ldr	r4, [pc, #20]	; (24e98 <nm_spi_reset+0x28>)
   24e84:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   24e86:	20cf      	movs	r0, #207	; 0xcf
   24e88:	4b04      	ldr	r3, [pc, #16]	; (24e9c <nm_spi_reset+0x2c>)
   24e8a:	4798      	blx	r3
	return M2M_SUCCESS;
   24e8c:	2300      	movs	r3, #0
}
   24e8e:	0018      	movs	r0, r3
   24e90:	46bd      	mov	sp, r7
   24e92:	b001      	add	sp, #4
   24e94:	bd90      	pop	{r4, r7, pc}
   24e96:	46c0      	nop			; (mov r8, r8)
   24e98:	00023859 	.word	0x00023859
   24e9c:	00023c99 	.word	0x00023c99

00024ea0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24ea0:	b580      	push	{r7, lr}
   24ea2:	b082      	sub	sp, #8
   24ea4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   24ea6:	2300      	movs	r3, #0
   24ea8:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   24eaa:	4b40      	ldr	r3, [pc, #256]	; (24fac <nm_spi_init+0x10c>)
   24eac:	2200      	movs	r2, #0
   24eae:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24eb0:	003b      	movs	r3, r7
   24eb2:	4a3f      	ldr	r2, [pc, #252]	; (24fb0 <nm_spi_init+0x110>)
   24eb4:	0019      	movs	r1, r3
   24eb6:	0010      	movs	r0, r2
   24eb8:	4b3e      	ldr	r3, [pc, #248]	; (24fb4 <nm_spi_init+0x114>)
   24eba:	4798      	blx	r3
   24ebc:	1e03      	subs	r3, r0, #0
   24ebe:	d129      	bne.n	24f14 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   24ec0:	4b3a      	ldr	r3, [pc, #232]	; (24fac <nm_spi_init+0x10c>)
   24ec2:	2201      	movs	r2, #1
   24ec4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   24ec6:	2398      	movs	r3, #152	; 0x98
   24ec8:	00da      	lsls	r2, r3, #3
   24eca:	493b      	ldr	r1, [pc, #236]	; (24fb8 <nm_spi_init+0x118>)
   24ecc:	4b3b      	ldr	r3, [pc, #236]	; (24fbc <nm_spi_init+0x11c>)
   24ece:	0018      	movs	r0, r3
   24ed0:	4b3b      	ldr	r3, [pc, #236]	; (24fc0 <nm_spi_init+0x120>)
   24ed2:	4798      	blx	r3
   24ed4:	4b3b      	ldr	r3, [pc, #236]	; (24fc4 <nm_spi_init+0x124>)
   24ed6:	0018      	movs	r0, r3
   24ed8:	4b39      	ldr	r3, [pc, #228]	; (24fc0 <nm_spi_init+0x120>)
   24eda:	4798      	blx	r3
   24edc:	4b3a      	ldr	r3, [pc, #232]	; (24fc8 <nm_spi_init+0x128>)
   24ede:	0018      	movs	r0, r3
   24ee0:	4b37      	ldr	r3, [pc, #220]	; (24fc0 <nm_spi_init+0x120>)
   24ee2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   24ee4:	003b      	movs	r3, r7
   24ee6:	4a32      	ldr	r2, [pc, #200]	; (24fb0 <nm_spi_init+0x110>)
   24ee8:	0019      	movs	r1, r3
   24eea:	0010      	movs	r0, r2
   24eec:	4b31      	ldr	r3, [pc, #196]	; (24fb4 <nm_spi_init+0x114>)
   24eee:	4798      	blx	r3
   24ef0:	1e03      	subs	r3, r0, #0
   24ef2:	d10f      	bne.n	24f14 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24ef4:	4a35      	ldr	r2, [pc, #212]	; (24fcc <nm_spi_init+0x12c>)
   24ef6:	4930      	ldr	r1, [pc, #192]	; (24fb8 <nm_spi_init+0x118>)
   24ef8:	4b30      	ldr	r3, [pc, #192]	; (24fbc <nm_spi_init+0x11c>)
   24efa:	0018      	movs	r0, r3
   24efc:	4b30      	ldr	r3, [pc, #192]	; (24fc0 <nm_spi_init+0x120>)
   24efe:	4798      	blx	r3
   24f00:	4b33      	ldr	r3, [pc, #204]	; (24fd0 <nm_spi_init+0x130>)
   24f02:	0018      	movs	r0, r3
   24f04:	4b2e      	ldr	r3, [pc, #184]	; (24fc0 <nm_spi_init+0x120>)
   24f06:	4798      	blx	r3
   24f08:	4b2f      	ldr	r3, [pc, #188]	; (24fc8 <nm_spi_init+0x128>)
   24f0a:	0018      	movs	r0, r3
   24f0c:	4b2c      	ldr	r3, [pc, #176]	; (24fc0 <nm_spi_init+0x120>)
   24f0e:	4798      	blx	r3
			return 0;
   24f10:	2300      	movs	r3, #0
   24f12:	e047      	b.n	24fa4 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   24f14:	4b25      	ldr	r3, [pc, #148]	; (24fac <nm_spi_init+0x10c>)
   24f16:	781b      	ldrb	r3, [r3, #0]
   24f18:	2b00      	cmp	r3, #0
   24f1a:	d126      	bne.n	24f6a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24f1c:	683b      	ldr	r3, [r7, #0]
   24f1e:	220c      	movs	r2, #12
   24f20:	4393      	bics	r3, r2
   24f22:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   24f24:	683b      	ldr	r3, [r7, #0]
   24f26:	2270      	movs	r2, #112	; 0x70
   24f28:	4393      	bics	r3, r2
   24f2a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24f2c:	683b      	ldr	r3, [r7, #0]
   24f2e:	2250      	movs	r2, #80	; 0x50
   24f30:	4313      	orrs	r3, r2
   24f32:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   24f34:	683b      	ldr	r3, [r7, #0]
   24f36:	4a1e      	ldr	r2, [pc, #120]	; (24fb0 <nm_spi_init+0x110>)
   24f38:	0019      	movs	r1, r3
   24f3a:	0010      	movs	r0, r2
   24f3c:	4b25      	ldr	r3, [pc, #148]	; (24fd4 <nm_spi_init+0x134>)
   24f3e:	4798      	blx	r3
   24f40:	1e03      	subs	r3, r0, #0
   24f42:	d10f      	bne.n	24f64 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   24f44:	4a24      	ldr	r2, [pc, #144]	; (24fd8 <nm_spi_init+0x138>)
   24f46:	491c      	ldr	r1, [pc, #112]	; (24fb8 <nm_spi_init+0x118>)
   24f48:	4b1c      	ldr	r3, [pc, #112]	; (24fbc <nm_spi_init+0x11c>)
   24f4a:	0018      	movs	r0, r3
   24f4c:	4b1c      	ldr	r3, [pc, #112]	; (24fc0 <nm_spi_init+0x120>)
   24f4e:	4798      	blx	r3
   24f50:	4b22      	ldr	r3, [pc, #136]	; (24fdc <nm_spi_init+0x13c>)
   24f52:	0018      	movs	r0, r3
   24f54:	4b1a      	ldr	r3, [pc, #104]	; (24fc0 <nm_spi_init+0x120>)
   24f56:	4798      	blx	r3
   24f58:	4b1b      	ldr	r3, [pc, #108]	; (24fc8 <nm_spi_init+0x128>)
   24f5a:	0018      	movs	r0, r3
   24f5c:	4b18      	ldr	r3, [pc, #96]	; (24fc0 <nm_spi_init+0x120>)
   24f5e:	4798      	blx	r3
			return 0;
   24f60:	2300      	movs	r3, #0
   24f62:	e01f      	b.n	24fa4 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   24f64:	4b11      	ldr	r3, [pc, #68]	; (24fac <nm_spi_init+0x10c>)
   24f66:	2201      	movs	r2, #1
   24f68:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24f6a:	1d3a      	adds	r2, r7, #4
   24f6c:	2380      	movs	r3, #128	; 0x80
   24f6e:	015b      	lsls	r3, r3, #5
   24f70:	0011      	movs	r1, r2
   24f72:	0018      	movs	r0, r3
   24f74:	4b0f      	ldr	r3, [pc, #60]	; (24fb4 <nm_spi_init+0x114>)
   24f76:	4798      	blx	r3
   24f78:	1e03      	subs	r3, r0, #0
   24f7a:	d110      	bne.n	24f9e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24f7c:	4a18      	ldr	r2, [pc, #96]	; (24fe0 <nm_spi_init+0x140>)
   24f7e:	490e      	ldr	r1, [pc, #56]	; (24fb8 <nm_spi_init+0x118>)
   24f80:	4b0e      	ldr	r3, [pc, #56]	; (24fbc <nm_spi_init+0x11c>)
   24f82:	0018      	movs	r0, r3
   24f84:	4b0e      	ldr	r3, [pc, #56]	; (24fc0 <nm_spi_init+0x120>)
   24f86:	4798      	blx	r3
   24f88:	4b16      	ldr	r3, [pc, #88]	; (24fe4 <nm_spi_init+0x144>)
   24f8a:	0018      	movs	r0, r3
   24f8c:	4b0c      	ldr	r3, [pc, #48]	; (24fc0 <nm_spi_init+0x120>)
   24f8e:	4798      	blx	r3
   24f90:	4b0d      	ldr	r3, [pc, #52]	; (24fc8 <nm_spi_init+0x128>)
   24f92:	0018      	movs	r0, r3
   24f94:	4b0a      	ldr	r3, [pc, #40]	; (24fc0 <nm_spi_init+0x120>)
   24f96:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24f98:	2306      	movs	r3, #6
   24f9a:	425b      	negs	r3, r3
   24f9c:	e002      	b.n	24fa4 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24f9e:	4b12      	ldr	r3, [pc, #72]	; (24fe8 <nm_spi_init+0x148>)
   24fa0:	4798      	blx	r3


	return M2M_SUCCESS;
   24fa2:	2300      	movs	r3, #0
}
   24fa4:	0018      	movs	r0, r3
   24fa6:	46bd      	mov	sp, r7
   24fa8:	b002      	add	sp, #8
   24faa:	bd80      	pop	{r7, pc}
   24fac:	200042ac 	.word	0x200042ac
   24fb0:	0000e824 	.word	0x0000e824
   24fb4:	00024b99 	.word	0x00024b99
   24fb8:	000399b0 	.word	0x000399b0
   24fbc:	0003933c 	.word	0x0003933c
   24fc0:	0001e399 	.word	0x0001e399
   24fc4:	000397d8 	.word	0x000397d8
   24fc8:	0003937c 	.word	0x0003937c
   24fcc:	000004c3 	.word	0x000004c3
   24fd0:	00039828 	.word	0x00039828
   24fd4:	000248a1 	.word	0x000248a1
   24fd8:	000004cd 	.word	0x000004cd
   24fdc:	00039858 	.word	0x00039858
   24fe0:	000004d7 	.word	0x000004d7
   24fe4:	0003988c 	.word	0x0003988c
   24fe8:	00024e2d 	.word	0x00024e2d

00024fec <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24fec:	b580      	push	{r7, lr}
   24fee:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24ff0:	4b03      	ldr	r3, [pc, #12]	; (25000 <nm_spi_deinit+0x14>)
   24ff2:	2200      	movs	r2, #0
   24ff4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24ff6:	2300      	movs	r3, #0
}
   24ff8:	0018      	movs	r0, r3
   24ffa:	46bd      	mov	sp, r7
   24ffc:	bd80      	pop	{r7, pc}
   24ffe:	46c0      	nop			; (mov r8, r8)
   25000:	200042ac 	.word	0x200042ac

00025004 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25004:	b580      	push	{r7, lr}
   25006:	b084      	sub	sp, #16
   25008:	af00      	add	r7, sp, #0
   2500a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   2500c:	230c      	movs	r3, #12
   2500e:	18fa      	adds	r2, r7, r3
   25010:	687b      	ldr	r3, [r7, #4]
   25012:	0011      	movs	r1, r2
   25014:	0018      	movs	r0, r3
   25016:	4b03      	ldr	r3, [pc, #12]	; (25024 <nm_spi_read_reg+0x20>)
   25018:	4798      	blx	r3

	return u32Val;
   2501a:	68fb      	ldr	r3, [r7, #12]
}
   2501c:	0018      	movs	r0, r3
   2501e:	46bd      	mov	sp, r7
   25020:	b004      	add	sp, #16
   25022:	bd80      	pop	{r7, pc}
   25024:	00024b99 	.word	0x00024b99

00025028 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25028:	b590      	push	{r4, r7, lr}
   2502a:	b085      	sub	sp, #20
   2502c:	af00      	add	r7, sp, #0
   2502e:	6078      	str	r0, [r7, #4]
   25030:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   25032:	230f      	movs	r3, #15
   25034:	18fc      	adds	r4, r7, r3
   25036:	683a      	ldr	r2, [r7, #0]
   25038:	687b      	ldr	r3, [r7, #4]
   2503a:	0011      	movs	r1, r2
   2503c:	0018      	movs	r0, r3
   2503e:	4b0d      	ldr	r3, [pc, #52]	; (25074 <nm_spi_read_reg_with_ret+0x4c>)
   25040:	4798      	blx	r3
   25042:	0003      	movs	r3, r0
   25044:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25046:	230f      	movs	r3, #15
   25048:	18fb      	adds	r3, r7, r3
   2504a:	781b      	ldrb	r3, [r3, #0]
   2504c:	b25b      	sxtb	r3, r3
   2504e:	2b01      	cmp	r3, #1
   25050:	d104      	bne.n	2505c <nm_spi_read_reg_with_ret+0x34>
   25052:	230f      	movs	r3, #15
   25054:	18fb      	adds	r3, r7, r3
   25056:	2200      	movs	r2, #0
   25058:	701a      	strb	r2, [r3, #0]
   2505a:	e003      	b.n	25064 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2505c:	230f      	movs	r3, #15
   2505e:	18fb      	adds	r3, r7, r3
   25060:	22fa      	movs	r2, #250	; 0xfa
   25062:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25064:	230f      	movs	r3, #15
   25066:	18fb      	adds	r3, r7, r3
   25068:	781b      	ldrb	r3, [r3, #0]
   2506a:	b25b      	sxtb	r3, r3
}
   2506c:	0018      	movs	r0, r3
   2506e:	46bd      	mov	sp, r7
   25070:	b005      	add	sp, #20
   25072:	bd90      	pop	{r4, r7, pc}
   25074:	00024b99 	.word	0x00024b99

00025078 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25078:	b590      	push	{r4, r7, lr}
   2507a:	b085      	sub	sp, #20
   2507c:	af00      	add	r7, sp, #0
   2507e:	6078      	str	r0, [r7, #4]
   25080:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   25082:	230f      	movs	r3, #15
   25084:	18fc      	adds	r4, r7, r3
   25086:	683a      	ldr	r2, [r7, #0]
   25088:	687b      	ldr	r3, [r7, #4]
   2508a:	0011      	movs	r1, r2
   2508c:	0018      	movs	r0, r3
   2508e:	4b0d      	ldr	r3, [pc, #52]	; (250c4 <nm_spi_write_reg+0x4c>)
   25090:	4798      	blx	r3
   25092:	0003      	movs	r3, r0
   25094:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25096:	230f      	movs	r3, #15
   25098:	18fb      	adds	r3, r7, r3
   2509a:	781b      	ldrb	r3, [r3, #0]
   2509c:	b25b      	sxtb	r3, r3
   2509e:	2b01      	cmp	r3, #1
   250a0:	d104      	bne.n	250ac <nm_spi_write_reg+0x34>
   250a2:	230f      	movs	r3, #15
   250a4:	18fb      	adds	r3, r7, r3
   250a6:	2200      	movs	r2, #0
   250a8:	701a      	strb	r2, [r3, #0]
   250aa:	e003      	b.n	250b4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   250ac:	230f      	movs	r3, #15
   250ae:	18fb      	adds	r3, r7, r3
   250b0:	22fa      	movs	r2, #250	; 0xfa
   250b2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   250b4:	230f      	movs	r3, #15
   250b6:	18fb      	adds	r3, r7, r3
   250b8:	781b      	ldrb	r3, [r3, #0]
   250ba:	b25b      	sxtb	r3, r3
}
   250bc:	0018      	movs	r0, r3
   250be:	46bd      	mov	sp, r7
   250c0:	b005      	add	sp, #20
   250c2:	bd90      	pop	{r4, r7, pc}
   250c4:	000248a1 	.word	0x000248a1

000250c8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   250c8:	b590      	push	{r4, r7, lr}
   250ca:	b087      	sub	sp, #28
   250cc:	af00      	add	r7, sp, #0
   250ce:	60f8      	str	r0, [r7, #12]
   250d0:	60b9      	str	r1, [r7, #8]
   250d2:	1dbb      	adds	r3, r7, #6
   250d4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   250d6:	2317      	movs	r3, #23
   250d8:	18fc      	adds	r4, r7, r3
   250da:	1dbb      	adds	r3, r7, #6
   250dc:	881a      	ldrh	r2, [r3, #0]
   250de:	68b9      	ldr	r1, [r7, #8]
   250e0:	68fb      	ldr	r3, [r7, #12]
   250e2:	0018      	movs	r0, r3
   250e4:	4b0d      	ldr	r3, [pc, #52]	; (2511c <nm_spi_read_block+0x54>)
   250e6:	4798      	blx	r3
   250e8:	0003      	movs	r3, r0
   250ea:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   250ec:	2317      	movs	r3, #23
   250ee:	18fb      	adds	r3, r7, r3
   250f0:	781b      	ldrb	r3, [r3, #0]
   250f2:	b25b      	sxtb	r3, r3
   250f4:	2b01      	cmp	r3, #1
   250f6:	d104      	bne.n	25102 <nm_spi_read_block+0x3a>
   250f8:	2317      	movs	r3, #23
   250fa:	18fb      	adds	r3, r7, r3
   250fc:	2200      	movs	r2, #0
   250fe:	701a      	strb	r2, [r3, #0]
   25100:	e003      	b.n	2510a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25102:	2317      	movs	r3, #23
   25104:	18fb      	adds	r3, r7, r3
   25106:	22fa      	movs	r2, #250	; 0xfa
   25108:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2510a:	2317      	movs	r3, #23
   2510c:	18fb      	adds	r3, r7, r3
   2510e:	781b      	ldrb	r3, [r3, #0]
   25110:	b25b      	sxtb	r3, r3
}
   25112:	0018      	movs	r0, r3
   25114:	46bd      	mov	sp, r7
   25116:	b007      	add	sp, #28
   25118:	bd90      	pop	{r4, r7, pc}
   2511a:	46c0      	nop			; (mov r8, r8)
   2511c:	00024d11 	.word	0x00024d11

00025120 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25120:	b590      	push	{r4, r7, lr}
   25122:	b087      	sub	sp, #28
   25124:	af00      	add	r7, sp, #0
   25126:	60f8      	str	r0, [r7, #12]
   25128:	60b9      	str	r1, [r7, #8]
   2512a:	1dbb      	adds	r3, r7, #6
   2512c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2512e:	2317      	movs	r3, #23
   25130:	18fc      	adds	r4, r7, r3
   25132:	1dbb      	adds	r3, r7, #6
   25134:	881a      	ldrh	r2, [r3, #0]
   25136:	68b9      	ldr	r1, [r7, #8]
   25138:	68fb      	ldr	r3, [r7, #12]
   2513a:	0018      	movs	r0, r3
   2513c:	4b0d      	ldr	r3, [pc, #52]	; (25174 <nm_spi_write_block+0x54>)
   2513e:	4798      	blx	r3
   25140:	0003      	movs	r3, r0
   25142:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25144:	2317      	movs	r3, #23
   25146:	18fb      	adds	r3, r7, r3
   25148:	781b      	ldrb	r3, [r3, #0]
   2514a:	b25b      	sxtb	r3, r3
   2514c:	2b01      	cmp	r3, #1
   2514e:	d104      	bne.n	2515a <nm_spi_write_block+0x3a>
   25150:	2317      	movs	r3, #23
   25152:	18fb      	adds	r3, r7, r3
   25154:	2200      	movs	r2, #0
   25156:	701a      	strb	r2, [r3, #0]
   25158:	e003      	b.n	25162 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2515a:	2317      	movs	r3, #23
   2515c:	18fb      	adds	r3, r7, r3
   2515e:	22fa      	movs	r2, #250	; 0xfa
   25160:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25162:	2317      	movs	r3, #23
   25164:	18fb      	adds	r3, r7, r3
   25166:	781b      	ldrb	r3, [r3, #0]
   25168:	b25b      	sxtb	r3, r3
}
   2516a:	0018      	movs	r0, r3
   2516c:	46bd      	mov	sp, r7
   2516e:	b007      	add	sp, #28
   25170:	bd90      	pop	{r4, r7, pc}
   25172:	46c0      	nop			; (mov r8, r8)
   25174:	000249ed 	.word	0x000249ed

00025178 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25178:	b590      	push	{r4, r7, lr}
   2517a:	b089      	sub	sp, #36	; 0x24
   2517c:	af00      	add	r7, sp, #0
   2517e:	60b9      	str	r1, [r7, #8]
   25180:	0011      	movs	r1, r2
   25182:	607b      	str	r3, [r7, #4]
   25184:	230f      	movs	r3, #15
   25186:	18fb      	adds	r3, r7, r3
   25188:	1c02      	adds	r2, r0, #0
   2518a:	701a      	strb	r2, [r3, #0]
   2518c:	230e      	movs	r3, #14
   2518e:	18fb      	adds	r3, r7, r3
   25190:	1c0a      	adds	r2, r1, #0
   25192:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25194:	2330      	movs	r3, #48	; 0x30
   25196:	18fb      	adds	r3, r7, r3
   25198:	881b      	ldrh	r3, [r3, #0]
   2519a:	2b00      	cmp	r3, #0
   2519c:	d100      	bne.n	251a0 <Socket_ReadSocketData+0x28>
   2519e:	e0d7      	b.n	25350 <Socket_ReadSocketData+0x1d8>
   251a0:	230f      	movs	r3, #15
   251a2:	18fb      	adds	r3, r7, r3
   251a4:	2200      	movs	r2, #0
   251a6:	569a      	ldrsb	r2, [r3, r2]
   251a8:	4b6b      	ldr	r3, [pc, #428]	; (25358 <Socket_ReadSocketData+0x1e0>)
   251aa:	0112      	lsls	r2, r2, #4
   251ac:	58d3      	ldr	r3, [r2, r3]
   251ae:	2b00      	cmp	r3, #0
   251b0:	d100      	bne.n	251b4 <Socket_ReadSocketData+0x3c>
   251b2:	e0cd      	b.n	25350 <Socket_ReadSocketData+0x1d8>
   251b4:	230f      	movs	r3, #15
   251b6:	18fb      	adds	r3, r7, r3
   251b8:	781b      	ldrb	r3, [r3, #0]
   251ba:	b25b      	sxtb	r3, r3
   251bc:	4a66      	ldr	r2, [pc, #408]	; (25358 <Socket_ReadSocketData+0x1e0>)
   251be:	011b      	lsls	r3, r3, #4
   251c0:	18d3      	adds	r3, r2, r3
   251c2:	3304      	adds	r3, #4
   251c4:	881b      	ldrh	r3, [r3, #0]
   251c6:	b29b      	uxth	r3, r3
   251c8:	2b00      	cmp	r3, #0
   251ca:	d100      	bne.n	251ce <Socket_ReadSocketData+0x56>
   251cc:	e0c0      	b.n	25350 <Socket_ReadSocketData+0x1d8>
   251ce:	230f      	movs	r3, #15
   251d0:	18fb      	adds	r3, r7, r3
   251d2:	781b      	ldrb	r3, [r3, #0]
   251d4:	b25b      	sxtb	r3, r3
   251d6:	4a60      	ldr	r2, [pc, #384]	; (25358 <Socket_ReadSocketData+0x1e0>)
   251d8:	011b      	lsls	r3, r3, #4
   251da:	18d3      	adds	r3, r2, r3
   251dc:	330a      	adds	r3, #10
   251de:	781b      	ldrb	r3, [r3, #0]
   251e0:	b2db      	uxtb	r3, r3
   251e2:	2b01      	cmp	r3, #1
   251e4:	d000      	beq.n	251e8 <Socket_ReadSocketData+0x70>
   251e6:	e0b3      	b.n	25350 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   251e8:	687b      	ldr	r3, [r7, #4]
   251ea:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   251ec:	68bb      	ldr	r3, [r7, #8]
   251ee:	2230      	movs	r2, #48	; 0x30
   251f0:	18ba      	adds	r2, r7, r2
   251f2:	8812      	ldrh	r2, [r2, #0]
   251f4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   251f6:	2319      	movs	r3, #25
   251f8:	18fb      	adds	r3, r7, r3
   251fa:	2201      	movs	r2, #1
   251fc:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   251fe:	231a      	movs	r3, #26
   25200:	18fb      	adds	r3, r7, r3
   25202:	2230      	movs	r2, #48	; 0x30
   25204:	18ba      	adds	r2, r7, r2
   25206:	8812      	ldrh	r2, [r2, #0]
   25208:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   2520a:	230f      	movs	r3, #15
   2520c:	18fb      	adds	r3, r7, r3
   2520e:	781b      	ldrb	r3, [r3, #0]
   25210:	b25b      	sxtb	r3, r3
   25212:	4a51      	ldr	r2, [pc, #324]	; (25358 <Socket_ReadSocketData+0x1e0>)
   25214:	011b      	lsls	r3, r3, #4
   25216:	18d3      	adds	r3, r2, r3
   25218:	3304      	adds	r3, #4
   2521a:	881b      	ldrh	r3, [r3, #0]
   2521c:	b29b      	uxth	r3, r3
   2521e:	221a      	movs	r2, #26
   25220:	18ba      	adds	r2, r7, r2
   25222:	8812      	ldrh	r2, [r2, #0]
   25224:	1ad3      	subs	r3, r2, r3
   25226:	b29a      	uxth	r2, r3
   25228:	2316      	movs	r3, #22
   2522a:	18fb      	adds	r3, r7, r3
   2522c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2522e:	2316      	movs	r3, #22
   25230:	18fb      	adds	r3, r7, r3
   25232:	2200      	movs	r2, #0
   25234:	5e9b      	ldrsh	r3, [r3, r2]
   25236:	2b00      	cmp	r3, #0
   25238:	dd0f      	ble.n	2525a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   2523a:	2319      	movs	r3, #25
   2523c:	18fb      	adds	r3, r7, r3
   2523e:	2200      	movs	r2, #0
   25240:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25242:	230f      	movs	r3, #15
   25244:	18fb      	adds	r3, r7, r3
   25246:	2200      	movs	r2, #0
   25248:	569a      	ldrsb	r2, [r3, r2]
   2524a:	231a      	movs	r3, #26
   2524c:	18fb      	adds	r3, r7, r3
   2524e:	4942      	ldr	r1, [pc, #264]	; (25358 <Socket_ReadSocketData+0x1e0>)
   25250:	0112      	lsls	r2, r2, #4
   25252:	188a      	adds	r2, r1, r2
   25254:	3204      	adds	r2, #4
   25256:	8812      	ldrh	r2, [r2, #0]
   25258:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   2525a:	230f      	movs	r3, #15
   2525c:	18fb      	adds	r3, r7, r3
   2525e:	2200      	movs	r2, #0
   25260:	569a      	ldrsb	r2, [r3, r2]
   25262:	4b3d      	ldr	r3, [pc, #244]	; (25358 <Socket_ReadSocketData+0x1e0>)
   25264:	0112      	lsls	r2, r2, #4
   25266:	58d1      	ldr	r1, [r2, r3]
   25268:	2319      	movs	r3, #25
   2526a:	18fb      	adds	r3, r7, r3
   2526c:	781c      	ldrb	r4, [r3, #0]
   2526e:	231a      	movs	r3, #26
   25270:	18fb      	adds	r3, r7, r3
   25272:	881a      	ldrh	r2, [r3, #0]
   25274:	69f8      	ldr	r0, [r7, #28]
   25276:	0023      	movs	r3, r4
   25278:	4c38      	ldr	r4, [pc, #224]	; (2535c <Socket_ReadSocketData+0x1e4>)
   2527a:	47a0      	blx	r4
   2527c:	1e03      	subs	r3, r0, #0
   2527e:	d14f      	bne.n	25320 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25280:	230f      	movs	r3, #15
   25282:	18fb      	adds	r3, r7, r3
   25284:	2200      	movs	r2, #0
   25286:	569a      	ldrsb	r2, [r3, r2]
   25288:	4b33      	ldr	r3, [pc, #204]	; (25358 <Socket_ReadSocketData+0x1e0>)
   2528a:	0112      	lsls	r2, r2, #4
   2528c:	58d2      	ldr	r2, [r2, r3]
   2528e:	68bb      	ldr	r3, [r7, #8]
   25290:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25292:	231a      	movs	r3, #26
   25294:	18fb      	adds	r3, r7, r3
   25296:	2200      	movs	r2, #0
   25298:	5e9a      	ldrsh	r2, [r3, r2]
   2529a:	68bb      	ldr	r3, [r7, #8]
   2529c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   2529e:	68bb      	ldr	r3, [r7, #8]
   252a0:	88da      	ldrh	r2, [r3, #6]
   252a2:	231a      	movs	r3, #26
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	881b      	ldrh	r3, [r3, #0]
   252a8:	1ad3      	subs	r3, r2, r3
   252aa:	b29a      	uxth	r2, r3
   252ac:	68bb      	ldr	r3, [r7, #8]
   252ae:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   252b0:	4b2b      	ldr	r3, [pc, #172]	; (25360 <Socket_ReadSocketData+0x1e8>)
   252b2:	681b      	ldr	r3, [r3, #0]
   252b4:	2b00      	cmp	r3, #0
   252b6:	d00b      	beq.n	252d0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   252b8:	4b29      	ldr	r3, [pc, #164]	; (25360 <Socket_ReadSocketData+0x1e8>)
   252ba:	681b      	ldr	r3, [r3, #0]
   252bc:	68bc      	ldr	r4, [r7, #8]
   252be:	220e      	movs	r2, #14
   252c0:	18ba      	adds	r2, r7, r2
   252c2:	7811      	ldrb	r1, [r2, #0]
   252c4:	220f      	movs	r2, #15
   252c6:	18ba      	adds	r2, r7, r2
   252c8:	2000      	movs	r0, #0
   252ca:	5610      	ldrsb	r0, [r2, r0]
   252cc:	0022      	movs	r2, r4
   252ce:	4798      	blx	r3

				u16ReadCount -= u16Read;
   252d0:	2330      	movs	r3, #48	; 0x30
   252d2:	18f9      	adds	r1, r7, r3
   252d4:	2330      	movs	r3, #48	; 0x30
   252d6:	18fa      	adds	r2, r7, r3
   252d8:	231a      	movs	r3, #26
   252da:	18fb      	adds	r3, r7, r3
   252dc:	8812      	ldrh	r2, [r2, #0]
   252de:	881b      	ldrh	r3, [r3, #0]
   252e0:	1ad3      	subs	r3, r2, r3
   252e2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   252e4:	231a      	movs	r3, #26
   252e6:	18fb      	adds	r3, r7, r3
   252e8:	881b      	ldrh	r3, [r3, #0]
   252ea:	69fa      	ldr	r2, [r7, #28]
   252ec:	18d3      	adds	r3, r2, r3
   252ee:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   252f0:	230f      	movs	r3, #15
   252f2:	18fb      	adds	r3, r7, r3
   252f4:	781b      	ldrb	r3, [r3, #0]
   252f6:	b25b      	sxtb	r3, r3
   252f8:	4a17      	ldr	r2, [pc, #92]	; (25358 <Socket_ReadSocketData+0x1e0>)
   252fa:	011b      	lsls	r3, r3, #4
   252fc:	18d3      	adds	r3, r2, r3
   252fe:	330a      	adds	r3, #10
   25300:	781b      	ldrb	r3, [r3, #0]
   25302:	b2db      	uxtb	r3, r3
   25304:	2b00      	cmp	r3, #0
   25306:	d11c      	bne.n	25342 <Socket_ReadSocketData+0x1ca>
   25308:	2330      	movs	r3, #48	; 0x30
   2530a:	18fb      	adds	r3, r7, r3
   2530c:	881b      	ldrh	r3, [r3, #0]
   2530e:	2b00      	cmp	r3, #0
   25310:	d017      	beq.n	25342 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25312:	2301      	movs	r3, #1
   25314:	2200      	movs	r2, #0
   25316:	2100      	movs	r1, #0
   25318:	2000      	movs	r0, #0
   2531a:	4c10      	ldr	r4, [pc, #64]	; (2535c <Socket_ReadSocketData+0x1e4>)
   2531c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2531e:	e017      	b.n	25350 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25320:	4b10      	ldr	r3, [pc, #64]	; (25364 <Socket_ReadSocketData+0x1ec>)
   25322:	0018      	movs	r0, r3
   25324:	4b10      	ldr	r3, [pc, #64]	; (25368 <Socket_ReadSocketData+0x1f0>)
   25326:	4798      	blx	r3
   25328:	2330      	movs	r3, #48	; 0x30
   2532a:	18fb      	adds	r3, r7, r3
   2532c:	881a      	ldrh	r2, [r3, #0]
   2532e:	4b0f      	ldr	r3, [pc, #60]	; (2536c <Socket_ReadSocketData+0x1f4>)
   25330:	0011      	movs	r1, r2
   25332:	0018      	movs	r0, r3
   25334:	4b0c      	ldr	r3, [pc, #48]	; (25368 <Socket_ReadSocketData+0x1f0>)
   25336:	4798      	blx	r3
   25338:	4b0d      	ldr	r3, [pc, #52]	; (25370 <Socket_ReadSocketData+0x1f8>)
   2533a:	0018      	movs	r0, r3
   2533c:	4b0a      	ldr	r3, [pc, #40]	; (25368 <Socket_ReadSocketData+0x1f0>)
   2533e:	4798      	blx	r3
				break;
   25340:	e006      	b.n	25350 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25342:	2330      	movs	r3, #48	; 0x30
   25344:	18fb      	adds	r3, r7, r3
   25346:	881b      	ldrh	r3, [r3, #0]
   25348:	2b00      	cmp	r3, #0
   2534a:	d000      	beq.n	2534e <Socket_ReadSocketData+0x1d6>
   2534c:	e753      	b.n	251f6 <Socket_ReadSocketData+0x7e>
	}
}
   2534e:	e7ff      	b.n	25350 <Socket_ReadSocketData+0x1d8>
   25350:	46c0      	nop			; (mov r8, r8)
   25352:	46bd      	mov	sp, r7
   25354:	b009      	add	sp, #36	; 0x24
   25356:	bd90      	pop	{r4, r7, pc}
   25358:	20005b40 	.word	0x20005b40
   2535c:	00021c49 	.word	0x00021c49
   25360:	20005bf0 	.word	0x20005bf0
   25364:	000399bc 	.word	0x000399bc
   25368:	0001e399 	.word	0x0001e399
   2536c:	000399c8 	.word	0x000399c8
   25370:	000399dc 	.word	0x000399dc

00025374 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25374:	b590      	push	{r4, r7, lr}
   25376:	b0bb      	sub	sp, #236	; 0xec
   25378:	af02      	add	r7, sp, #8
   2537a:	603a      	str	r2, [r7, #0]
   2537c:	1dfb      	adds	r3, r7, #7
   2537e:	1c02      	adds	r2, r0, #0
   25380:	701a      	strb	r2, [r3, #0]
   25382:	1d3b      	adds	r3, r7, #4
   25384:	1c0a      	adds	r2, r1, #0
   25386:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25388:	1dfb      	adds	r3, r7, #7
   2538a:	781b      	ldrb	r3, [r3, #0]
   2538c:	2b41      	cmp	r3, #65	; 0x41
   2538e:	d003      	beq.n	25398 <m2m_ip_cb+0x24>
   25390:	1dfb      	adds	r3, r7, #7
   25392:	781b      	ldrb	r3, [r3, #0]
   25394:	2b54      	cmp	r3, #84	; 0x54
   25396:	d120      	bne.n	253da <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25398:	23cc      	movs	r3, #204	; 0xcc
   2539a:	18f9      	adds	r1, r7, r3
   2539c:	6838      	ldr	r0, [r7, #0]
   2539e:	2300      	movs	r3, #0
   253a0:	2204      	movs	r2, #4
   253a2:	4c98      	ldr	r4, [pc, #608]	; (25604 <m2m_ip_cb+0x290>)
   253a4:	47a0      	blx	r4
   253a6:	1e03      	subs	r3, r0, #0
   253a8:	d000      	beq.n	253ac <m2m_ip_cb+0x38>
   253aa:	e275      	b.n	25898 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   253ac:	23cc      	movs	r3, #204	; 0xcc
   253ae:	18fb      	adds	r3, r7, r3
   253b0:	2201      	movs	r2, #1
   253b2:	569a      	ldrsb	r2, [r3, r2]
   253b4:	23c8      	movs	r3, #200	; 0xc8
   253b6:	18fb      	adds	r3, r7, r3
   253b8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   253ba:	4b93      	ldr	r3, [pc, #588]	; (25608 <m2m_ip_cb+0x294>)
   253bc:	681b      	ldr	r3, [r3, #0]
   253be:	2b00      	cmp	r3, #0
   253c0:	d100      	bne.n	253c4 <m2m_ip_cb+0x50>
   253c2:	e269      	b.n	25898 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   253c4:	4b90      	ldr	r3, [pc, #576]	; (25608 <m2m_ip_cb+0x294>)
   253c6:	681b      	ldr	r3, [r3, #0]
   253c8:	22cc      	movs	r2, #204	; 0xcc
   253ca:	18ba      	adds	r2, r7, r2
   253cc:	2000      	movs	r0, #0
   253ce:	5610      	ldrsb	r0, [r2, r0]
   253d0:	22c8      	movs	r2, #200	; 0xc8
   253d2:	18ba      	adds	r2, r7, r2
   253d4:	2101      	movs	r1, #1
   253d6:	4798      	blx	r3
	{
   253d8:	e25e      	b.n	25898 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   253da:	1dfb      	adds	r3, r7, #7
   253dc:	781b      	ldrb	r3, [r3, #0]
   253de:	2b42      	cmp	r3, #66	; 0x42
   253e0:	d120      	bne.n	25424 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   253e2:	23c4      	movs	r3, #196	; 0xc4
   253e4:	18f9      	adds	r1, r7, r3
   253e6:	6838      	ldr	r0, [r7, #0]
   253e8:	2300      	movs	r3, #0
   253ea:	2204      	movs	r2, #4
   253ec:	4c85      	ldr	r4, [pc, #532]	; (25604 <m2m_ip_cb+0x290>)
   253ee:	47a0      	blx	r4
   253f0:	1e03      	subs	r3, r0, #0
   253f2:	d000      	beq.n	253f6 <m2m_ip_cb+0x82>
   253f4:	e257      	b.n	258a6 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   253f6:	23c4      	movs	r3, #196	; 0xc4
   253f8:	18fb      	adds	r3, r7, r3
   253fa:	2201      	movs	r2, #1
   253fc:	569a      	ldrsb	r2, [r3, r2]
   253fe:	23c0      	movs	r3, #192	; 0xc0
   25400:	18fb      	adds	r3, r7, r3
   25402:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25404:	4b80      	ldr	r3, [pc, #512]	; (25608 <m2m_ip_cb+0x294>)
   25406:	681b      	ldr	r3, [r3, #0]
   25408:	2b00      	cmp	r3, #0
   2540a:	d100      	bne.n	2540e <m2m_ip_cb+0x9a>
   2540c:	e24b      	b.n	258a6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   2540e:	4b7e      	ldr	r3, [pc, #504]	; (25608 <m2m_ip_cb+0x294>)
   25410:	681b      	ldr	r3, [r3, #0]
   25412:	22c4      	movs	r2, #196	; 0xc4
   25414:	18ba      	adds	r2, r7, r2
   25416:	2000      	movs	r0, #0
   25418:	5610      	ldrsb	r0, [r2, r0]
   2541a:	22c0      	movs	r2, #192	; 0xc0
   2541c:	18ba      	adds	r2, r7, r2
   2541e:	2102      	movs	r1, #2
   25420:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25422:	e240      	b.n	258a6 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25424:	1dfb      	adds	r3, r7, #7
   25426:	781b      	ldrb	r3, [r3, #0]
   25428:	2b43      	cmp	r3, #67	; 0x43
   2542a:	d000      	beq.n	2542e <m2m_ip_cb+0xba>
   2542c:	e086      	b.n	2553c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   2542e:	23b4      	movs	r3, #180	; 0xb4
   25430:	18f9      	adds	r1, r7, r3
   25432:	6838      	ldr	r0, [r7, #0]
   25434:	2300      	movs	r3, #0
   25436:	220c      	movs	r2, #12
   25438:	4c72      	ldr	r4, [pc, #456]	; (25604 <m2m_ip_cb+0x290>)
   2543a:	47a0      	blx	r4
   2543c:	1e03      	subs	r3, r0, #0
   2543e:	d000      	beq.n	25442 <m2m_ip_cb+0xce>
   25440:	e231      	b.n	258a6 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25442:	23b4      	movs	r3, #180	; 0xb4
   25444:	18fb      	adds	r3, r7, r3
   25446:	7a5b      	ldrb	r3, [r3, #9]
   25448:	b25b      	sxtb	r3, r3
   2544a:	2b00      	cmp	r3, #0
   2544c:	db4f      	blt.n	254ee <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2544e:	23b4      	movs	r3, #180	; 0xb4
   25450:	18fb      	adds	r3, r7, r3
   25452:	7a5b      	ldrb	r3, [r3, #9]
   25454:	b25b      	sxtb	r3, r3
   25456:	0018      	movs	r0, r3
   25458:	23b4      	movs	r3, #180	; 0xb4
   2545a:	18fb      	adds	r3, r7, r3
   2545c:	7a1b      	ldrb	r3, [r3, #8]
   2545e:	b25b      	sxtb	r3, r3
   25460:	4a6a      	ldr	r2, [pc, #424]	; (2560c <m2m_ip_cb+0x298>)
   25462:	011b      	lsls	r3, r3, #4
   25464:	18d3      	adds	r3, r2, r3
   25466:	330b      	adds	r3, #11
   25468:	781b      	ldrb	r3, [r3, #0]
   2546a:	b2d9      	uxtb	r1, r3
   2546c:	4a67      	ldr	r2, [pc, #412]	; (2560c <m2m_ip_cb+0x298>)
   2546e:	0103      	lsls	r3, r0, #4
   25470:	18d3      	adds	r3, r2, r3
   25472:	330b      	adds	r3, #11
   25474:	1c0a      	adds	r2, r1, #0
   25476:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25478:	23b4      	movs	r3, #180	; 0xb4
   2547a:	18fb      	adds	r3, r7, r3
   2547c:	7a5b      	ldrb	r3, [r3, #9]
   2547e:	b25b      	sxtb	r3, r3
   25480:	4a62      	ldr	r2, [pc, #392]	; (2560c <m2m_ip_cb+0x298>)
   25482:	011b      	lsls	r3, r3, #4
   25484:	18d3      	adds	r3, r2, r3
   25486:	330a      	adds	r3, #10
   25488:	2201      	movs	r2, #1
   2548a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2548c:	23b4      	movs	r3, #180	; 0xb4
   2548e:	18fb      	adds	r3, r7, r3
   25490:	7a5b      	ldrb	r3, [r3, #9]
   25492:	b25b      	sxtb	r3, r3
   25494:	0018      	movs	r0, r3
   25496:	23b4      	movs	r3, #180	; 0xb4
   25498:	18fb      	adds	r3, r7, r3
   2549a:	895b      	ldrh	r3, [r3, #10]
   2549c:	3b08      	subs	r3, #8
   2549e:	b299      	uxth	r1, r3
   254a0:	4a5a      	ldr	r2, [pc, #360]	; (2560c <m2m_ip_cb+0x298>)
   254a2:	0103      	lsls	r3, r0, #4
   254a4:	18d3      	adds	r3, r2, r3
   254a6:	3308      	adds	r3, #8
   254a8:	1c0a      	adds	r2, r1, #0
   254aa:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   254ac:	4b58      	ldr	r3, [pc, #352]	; (25610 <m2m_ip_cb+0x29c>)
   254ae:	881b      	ldrh	r3, [r3, #0]
   254b0:	b29b      	uxth	r3, r3
   254b2:	3301      	adds	r3, #1
   254b4:	b29a      	uxth	r2, r3
   254b6:	4b56      	ldr	r3, [pc, #344]	; (25610 <m2m_ip_cb+0x29c>)
   254b8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   254ba:	4b55      	ldr	r3, [pc, #340]	; (25610 <m2m_ip_cb+0x29c>)
   254bc:	881b      	ldrh	r3, [r3, #0]
   254be:	b29b      	uxth	r3, r3
   254c0:	2b00      	cmp	r3, #0
   254c2:	d106      	bne.n	254d2 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   254c4:	4b52      	ldr	r3, [pc, #328]	; (25610 <m2m_ip_cb+0x29c>)
   254c6:	881b      	ldrh	r3, [r3, #0]
   254c8:	b29b      	uxth	r3, r3
   254ca:	3301      	adds	r3, #1
   254cc:	b29a      	uxth	r2, r3
   254ce:	4b50      	ldr	r3, [pc, #320]	; (25610 <m2m_ip_cb+0x29c>)
   254d0:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   254d2:	23b4      	movs	r3, #180	; 0xb4
   254d4:	18fb      	adds	r3, r7, r3
   254d6:	7a5b      	ldrb	r3, [r3, #9]
   254d8:	b25b      	sxtb	r3, r3
   254da:	0018      	movs	r0, r3
   254dc:	4b4c      	ldr	r3, [pc, #304]	; (25610 <m2m_ip_cb+0x29c>)
   254de:	881b      	ldrh	r3, [r3, #0]
   254e0:	b299      	uxth	r1, r3
   254e2:	4a4a      	ldr	r2, [pc, #296]	; (2560c <m2m_ip_cb+0x298>)
   254e4:	0103      	lsls	r3, r0, #4
   254e6:	18d3      	adds	r3, r2, r3
   254e8:	3306      	adds	r3, #6
   254ea:	1c0a      	adds	r2, r1, #0
   254ec:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   254ee:	23b4      	movs	r3, #180	; 0xb4
   254f0:	18fb      	adds	r3, r7, r3
   254f2:	2209      	movs	r2, #9
   254f4:	569a      	ldrsb	r2, [r3, r2]
   254f6:	23a0      	movs	r3, #160	; 0xa0
   254f8:	18fb      	adds	r3, r7, r3
   254fa:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   254fc:	23a0      	movs	r3, #160	; 0xa0
   254fe:	18fb      	adds	r3, r7, r3
   25500:	2202      	movs	r2, #2
   25502:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25504:	23b4      	movs	r3, #180	; 0xb4
   25506:	18fb      	adds	r3, r7, r3
   25508:	885a      	ldrh	r2, [r3, #2]
   2550a:	23a0      	movs	r3, #160	; 0xa0
   2550c:	18fb      	adds	r3, r7, r3
   2550e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25510:	23b4      	movs	r3, #180	; 0xb4
   25512:	18fb      	adds	r3, r7, r3
   25514:	685a      	ldr	r2, [r3, #4]
   25516:	23a0      	movs	r3, #160	; 0xa0
   25518:	18fb      	adds	r3, r7, r3
   2551a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   2551c:	4b3a      	ldr	r3, [pc, #232]	; (25608 <m2m_ip_cb+0x294>)
   2551e:	681b      	ldr	r3, [r3, #0]
   25520:	2b00      	cmp	r3, #0
   25522:	d100      	bne.n	25526 <m2m_ip_cb+0x1b2>
   25524:	e1bf      	b.n	258a6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25526:	4b38      	ldr	r3, [pc, #224]	; (25608 <m2m_ip_cb+0x294>)
   25528:	681b      	ldr	r3, [r3, #0]
   2552a:	22b4      	movs	r2, #180	; 0xb4
   2552c:	18ba      	adds	r2, r7, r2
   2552e:	2008      	movs	r0, #8
   25530:	5610      	ldrsb	r0, [r2, r0]
   25532:	22a0      	movs	r2, #160	; 0xa0
   25534:	18ba      	adds	r2, r7, r2
   25536:	2104      	movs	r1, #4
   25538:	4798      	blx	r3
}
   2553a:	e1b4      	b.n	258a6 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   2553c:	1dfb      	adds	r3, r7, #7
   2553e:	781b      	ldrb	r3, [r3, #0]
   25540:	2b44      	cmp	r3, #68	; 0x44
   25542:	d003      	beq.n	2554c <m2m_ip_cb+0x1d8>
   25544:	1dfb      	adds	r3, r7, #7
   25546:	781b      	ldrb	r3, [r3, #0]
   25548:	2b4b      	cmp	r3, #75	; 0x4b
   2554a:	d13d      	bne.n	255c8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   2554c:	239c      	movs	r3, #156	; 0x9c
   2554e:	18f9      	adds	r1, r7, r3
   25550:	6838      	ldr	r0, [r7, #0]
   25552:	2300      	movs	r3, #0
   25554:	2204      	movs	r2, #4
   25556:	4c2b      	ldr	r4, [pc, #172]	; (25604 <m2m_ip_cb+0x290>)
   25558:	47a0      	blx	r4
   2555a:	1e03      	subs	r3, r0, #0
   2555c:	d000      	beq.n	25560 <m2m_ip_cb+0x1ec>
   2555e:	e19d      	b.n	2589c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25560:	239c      	movs	r3, #156	; 0x9c
   25562:	18fb      	adds	r3, r7, r3
   25564:	2200      	movs	r2, #0
   25566:	569a      	ldrsb	r2, [r3, r2]
   25568:	2398      	movs	r3, #152	; 0x98
   2556a:	18fb      	adds	r3, r7, r3
   2556c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2556e:	239c      	movs	r3, #156	; 0x9c
   25570:	18fb      	adds	r3, r7, r3
   25572:	2201      	movs	r2, #1
   25574:	569a      	ldrsb	r2, [r3, r2]
   25576:	2398      	movs	r3, #152	; 0x98
   25578:	18fb      	adds	r3, r7, r3
   2557a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   2557c:	239c      	movs	r3, #156	; 0x9c
   2557e:	18fb      	adds	r3, r7, r3
   25580:	785b      	ldrb	r3, [r3, #1]
   25582:	b25b      	sxtb	r3, r3
   25584:	2b00      	cmp	r3, #0
   25586:	d10f      	bne.n	255a8 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25588:	239c      	movs	r3, #156	; 0x9c
   2558a:	18fb      	adds	r3, r7, r3
   2558c:	781b      	ldrb	r3, [r3, #0]
   2558e:	b25b      	sxtb	r3, r3
   25590:	0018      	movs	r0, r3
   25592:	239c      	movs	r3, #156	; 0x9c
   25594:	18fb      	adds	r3, r7, r3
   25596:	885b      	ldrh	r3, [r3, #2]
   25598:	3b08      	subs	r3, #8
   2559a:	b299      	uxth	r1, r3
   2559c:	4a1b      	ldr	r2, [pc, #108]	; (2560c <m2m_ip_cb+0x298>)
   2559e:	0103      	lsls	r3, r0, #4
   255a0:	18d3      	adds	r3, r2, r3
   255a2:	3308      	adds	r3, #8
   255a4:	1c0a      	adds	r2, r1, #0
   255a6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   255a8:	4b17      	ldr	r3, [pc, #92]	; (25608 <m2m_ip_cb+0x294>)
   255aa:	681b      	ldr	r3, [r3, #0]
   255ac:	2b00      	cmp	r3, #0
   255ae:	d100      	bne.n	255b2 <m2m_ip_cb+0x23e>
   255b0:	e174      	b.n	2589c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   255b2:	4b15      	ldr	r3, [pc, #84]	; (25608 <m2m_ip_cb+0x294>)
   255b4:	681b      	ldr	r3, [r3, #0]
   255b6:	229c      	movs	r2, #156	; 0x9c
   255b8:	18ba      	adds	r2, r7, r2
   255ba:	2000      	movs	r0, #0
   255bc:	5610      	ldrsb	r0, [r2, r0]
   255be:	2298      	movs	r2, #152	; 0x98
   255c0:	18ba      	adds	r2, r7, r2
   255c2:	2105      	movs	r1, #5
   255c4:	4798      	blx	r3
	{
   255c6:	e169      	b.n	2589c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   255c8:	1dfb      	adds	r3, r7, #7
   255ca:	781b      	ldrb	r3, [r3, #0]
   255cc:	2b4a      	cmp	r3, #74	; 0x4a
   255ce:	d123      	bne.n	25618 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   255d0:	230c      	movs	r3, #12
   255d2:	18f9      	adds	r1, r7, r3
   255d4:	6838      	ldr	r0, [r7, #0]
   255d6:	2300      	movs	r3, #0
   255d8:	2244      	movs	r2, #68	; 0x44
   255da:	4c0a      	ldr	r4, [pc, #40]	; (25604 <m2m_ip_cb+0x290>)
   255dc:	47a0      	blx	r4
   255de:	1e03      	subs	r3, r0, #0
   255e0:	d000      	beq.n	255e4 <m2m_ip_cb+0x270>
   255e2:	e160      	b.n	258a6 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   255e4:	4b0b      	ldr	r3, [pc, #44]	; (25614 <m2m_ip_cb+0x2a0>)
   255e6:	681b      	ldr	r3, [r3, #0]
   255e8:	2b00      	cmp	r3, #0
   255ea:	d100      	bne.n	255ee <m2m_ip_cb+0x27a>
   255ec:	e15b      	b.n	258a6 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   255ee:	4b09      	ldr	r3, [pc, #36]	; (25614 <m2m_ip_cb+0x2a0>)
   255f0:	681a      	ldr	r2, [r3, #0]
   255f2:	230c      	movs	r3, #12
   255f4:	18fb      	adds	r3, r7, r3
   255f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   255f8:	230c      	movs	r3, #12
   255fa:	18fb      	adds	r3, r7, r3
   255fc:	0018      	movs	r0, r3
   255fe:	4790      	blx	r2
}
   25600:	e151      	b.n	258a6 <m2m_ip_cb+0x532>
   25602:	46c0      	nop			; (mov r8, r8)
   25604:	00021c49 	.word	0x00021c49
   25608:	20005bf0 	.word	0x20005bf0
   2560c:	20005b40 	.word	0x20005b40
   25610:	200042ae 	.word	0x200042ae
   25614:	20005bf8 	.word	0x20005bf8
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25618:	1dfb      	adds	r3, r7, #7
   2561a:	781b      	ldrb	r3, [r3, #0]
   2561c:	2b46      	cmp	r3, #70	; 0x46
   2561e:	d008      	beq.n	25632 <m2m_ip_cb+0x2be>
   25620:	1dfb      	adds	r3, r7, #7
   25622:	781b      	ldrb	r3, [r3, #0]
   25624:	2b48      	cmp	r3, #72	; 0x48
   25626:	d004      	beq.n	25632 <m2m_ip_cb+0x2be>
   25628:	1dfb      	adds	r3, r7, #7
   2562a:	781b      	ldrb	r3, [r3, #0]
   2562c:	2b4d      	cmp	r3, #77	; 0x4d
   2562e:	d000      	beq.n	25632 <m2m_ip_cb+0x2be>
   25630:	e0b4      	b.n	2579c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25632:	23df      	movs	r3, #223	; 0xdf
   25634:	18fb      	adds	r3, r7, r3
   25636:	2206      	movs	r2, #6
   25638:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   2563a:	1dfb      	adds	r3, r7, #7
   2563c:	781b      	ldrb	r3, [r3, #0]
   2563e:	2b48      	cmp	r3, #72	; 0x48
   25640:	d103      	bne.n	2564a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25642:	23df      	movs	r3, #223	; 0xdf
   25644:	18fb      	adds	r3, r7, r3
   25646:	2209      	movs	r2, #9
   25648:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2564a:	23d8      	movs	r3, #216	; 0xd8
   2564c:	18fb      	adds	r3, r7, r3
   2564e:	2210      	movs	r2, #16
   25650:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25652:	23d8      	movs	r3, #216	; 0xd8
   25654:	18fb      	adds	r3, r7, r3
   25656:	881a      	ldrh	r2, [r3, #0]
   25658:	2388      	movs	r3, #136	; 0x88
   2565a:	18f9      	adds	r1, r7, r3
   2565c:	6838      	ldr	r0, [r7, #0]
   2565e:	2300      	movs	r3, #0
   25660:	4c93      	ldr	r4, [pc, #588]	; (258b0 <m2m_ip_cb+0x53c>)
   25662:	47a0      	blx	r4
   25664:	1e03      	subs	r3, r0, #0
   25666:	d000      	beq.n	2566a <m2m_ip_cb+0x2f6>
   25668:	e11a      	b.n	258a0 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2566a:	23d6      	movs	r3, #214	; 0xd6
   2566c:	18fb      	adds	r3, r7, r3
   2566e:	2200      	movs	r2, #0
   25670:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25672:	23d5      	movs	r3, #213	; 0xd5
   25674:	18fb      	adds	r3, r7, r3
   25676:	2288      	movs	r2, #136	; 0x88
   25678:	18ba      	adds	r2, r7, r2
   2567a:	7b12      	ldrb	r2, [r2, #12]
   2567c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2567e:	23d6      	movs	r3, #214	; 0xd6
   25680:	18fb      	adds	r3, r7, r3
   25682:	2288      	movs	r2, #136	; 0x88
   25684:	18ba      	adds	r2, r7, r2
   25686:	89d2      	ldrh	r2, [r2, #14]
   25688:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2568a:	23d5      	movs	r3, #213	; 0xd5
   2568c:	18fb      	adds	r3, r7, r3
   2568e:	781b      	ldrb	r3, [r3, #0]
   25690:	b25b      	sxtb	r3, r3
   25692:	4a88      	ldr	r2, [pc, #544]	; (258b4 <m2m_ip_cb+0x540>)
   25694:	011b      	lsls	r3, r3, #4
   25696:	18d3      	adds	r3, r2, r3
   25698:	330c      	adds	r3, #12
   2569a:	2200      	movs	r2, #0
   2569c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2569e:	23d2      	movs	r3, #210	; 0xd2
   256a0:	18fb      	adds	r3, r7, r3
   256a2:	2288      	movs	r2, #136	; 0x88
   256a4:	18ba      	adds	r2, r7, r2
   256a6:	8912      	ldrh	r2, [r2, #8]
   256a8:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   256aa:	23d0      	movs	r3, #208	; 0xd0
   256ac:	18fb      	adds	r3, r7, r3
   256ae:	2288      	movs	r2, #136	; 0x88
   256b0:	18ba      	adds	r2, r7, r2
   256b2:	8952      	ldrh	r2, [r2, #10]
   256b4:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   256b6:	2388      	movs	r3, #136	; 0x88
   256b8:	18fb      	adds	r3, r7, r3
   256ba:	885a      	ldrh	r2, [r3, #2]
   256bc:	2370      	movs	r3, #112	; 0x70
   256be:	18fb      	adds	r3, r7, r3
   256c0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   256c2:	2388      	movs	r3, #136	; 0x88
   256c4:	18fb      	adds	r3, r7, r3
   256c6:	685a      	ldr	r2, [r3, #4]
   256c8:	2370      	movs	r3, #112	; 0x70
   256ca:	18fb      	adds	r3, r7, r3
   256cc:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   256ce:	23d5      	movs	r3, #213	; 0xd5
   256d0:	18fb      	adds	r3, r7, r3
   256d2:	781b      	ldrb	r3, [r3, #0]
   256d4:	b25b      	sxtb	r3, r3
   256d6:	4a77      	ldr	r2, [pc, #476]	; (258b4 <m2m_ip_cb+0x540>)
   256d8:	011b      	lsls	r3, r3, #4
   256da:	18d3      	adds	r3, r2, r3
   256dc:	3306      	adds	r3, #6
   256de:	881b      	ldrh	r3, [r3, #0]
   256e0:	b29b      	uxth	r3, r3
   256e2:	22d6      	movs	r2, #214	; 0xd6
   256e4:	18ba      	adds	r2, r7, r2
   256e6:	8812      	ldrh	r2, [r2, #0]
   256e8:	429a      	cmp	r2, r3
   256ea:	d148      	bne.n	2577e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   256ec:	23d2      	movs	r3, #210	; 0xd2
   256ee:	18fb      	adds	r3, r7, r3
   256f0:	2200      	movs	r2, #0
   256f2:	5e9b      	ldrsh	r3, [r3, r2]
   256f4:	2b00      	cmp	r3, #0
   256f6:	dd25      	ble.n	25744 <m2m_ip_cb+0x3d0>
   256f8:	23d2      	movs	r3, #210	; 0xd2
   256fa:	18fb      	adds	r3, r7, r3
   256fc:	2200      	movs	r2, #0
   256fe:	5e9a      	ldrsh	r2, [r3, r2]
   25700:	1d3b      	adds	r3, r7, #4
   25702:	881b      	ldrh	r3, [r3, #0]
   25704:	429a      	cmp	r2, r3
   25706:	da1d      	bge.n	25744 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25708:	23d0      	movs	r3, #208	; 0xd0
   2570a:	18fb      	adds	r3, r7, r3
   2570c:	881b      	ldrh	r3, [r3, #0]
   2570e:	683a      	ldr	r2, [r7, #0]
   25710:	18d3      	adds	r3, r2, r3
   25712:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25714:	23d8      	movs	r3, #216	; 0xd8
   25716:	18fb      	adds	r3, r7, r3
   25718:	22d2      	movs	r2, #210	; 0xd2
   2571a:	18ba      	adds	r2, r7, r2
   2571c:	8812      	ldrh	r2, [r2, #0]
   2571e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25720:	683c      	ldr	r4, [r7, #0]
   25722:	23df      	movs	r3, #223	; 0xdf
   25724:	18fb      	adds	r3, r7, r3
   25726:	781a      	ldrb	r2, [r3, #0]
   25728:	2370      	movs	r3, #112	; 0x70
   2572a:	18f9      	adds	r1, r7, r3
   2572c:	23d5      	movs	r3, #213	; 0xd5
   2572e:	18fb      	adds	r3, r7, r3
   25730:	2000      	movs	r0, #0
   25732:	5618      	ldrsb	r0, [r3, r0]
   25734:	23d8      	movs	r3, #216	; 0xd8
   25736:	18fb      	adds	r3, r7, r3
   25738:	881b      	ldrh	r3, [r3, #0]
   2573a:	9300      	str	r3, [sp, #0]
   2573c:	0023      	movs	r3, r4
   2573e:	4c5e      	ldr	r4, [pc, #376]	; (258b8 <m2m_ip_cb+0x544>)
   25740:	47a0      	blx	r4
	{
   25742:	e0ad      	b.n	258a0 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25744:	2370      	movs	r3, #112	; 0x70
   25746:	18fb      	adds	r3, r7, r3
   25748:	22d2      	movs	r2, #210	; 0xd2
   2574a:	18ba      	adds	r2, r7, r2
   2574c:	8812      	ldrh	r2, [r2, #0]
   2574e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25750:	2370      	movs	r3, #112	; 0x70
   25752:	18fb      	adds	r3, r7, r3
   25754:	2200      	movs	r2, #0
   25756:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25758:	4b58      	ldr	r3, [pc, #352]	; (258bc <m2m_ip_cb+0x548>)
   2575a:	681b      	ldr	r3, [r3, #0]
   2575c:	2b00      	cmp	r3, #0
   2575e:	d100      	bne.n	25762 <m2m_ip_cb+0x3ee>
   25760:	e09e      	b.n	258a0 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25762:	4b56      	ldr	r3, [pc, #344]	; (258bc <m2m_ip_cb+0x548>)
   25764:	681b      	ldr	r3, [r3, #0]
   25766:	2270      	movs	r2, #112	; 0x70
   25768:	18bc      	adds	r4, r7, r2
   2576a:	22df      	movs	r2, #223	; 0xdf
   2576c:	18ba      	adds	r2, r7, r2
   2576e:	7811      	ldrb	r1, [r2, #0]
   25770:	22d5      	movs	r2, #213	; 0xd5
   25772:	18ba      	adds	r2, r7, r2
   25774:	2000      	movs	r0, #0
   25776:	5610      	ldrsb	r0, [r2, r0]
   25778:	0022      	movs	r2, r4
   2577a:	4798      	blx	r3
	{
   2577c:	e090      	b.n	258a0 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2577e:	23d8      	movs	r3, #216	; 0xd8
   25780:	18fa      	adds	r2, r7, r3
   25782:	1d3b      	adds	r3, r7, #4
   25784:	8812      	ldrh	r2, [r2, #0]
   25786:	881b      	ldrh	r3, [r3, #0]
   25788:	429a      	cmp	r2, r3
   2578a:	d300      	bcc.n	2578e <m2m_ip_cb+0x41a>
   2578c:	e088      	b.n	258a0 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2578e:	2301      	movs	r3, #1
   25790:	2200      	movs	r2, #0
   25792:	2100      	movs	r1, #0
   25794:	2000      	movs	r0, #0
   25796:	4c46      	ldr	r4, [pc, #280]	; (258b0 <m2m_ip_cb+0x53c>)
   25798:	47a0      	blx	r4
	{
   2579a:	e081      	b.n	258a0 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   2579c:	1dfb      	adds	r3, r7, #7
   2579e:	781b      	ldrb	r3, [r3, #0]
   257a0:	2b45      	cmp	r3, #69	; 0x45
   257a2:	d007      	beq.n	257b4 <m2m_ip_cb+0x440>
   257a4:	1dfb      	adds	r3, r7, #7
   257a6:	781b      	ldrb	r3, [r3, #0]
   257a8:	2b47      	cmp	r3, #71	; 0x47
   257aa:	d003      	beq.n	257b4 <m2m_ip_cb+0x440>
   257ac:	1dfb      	adds	r3, r7, #7
   257ae:	781b      	ldrb	r3, [r3, #0]
   257b0:	2b4c      	cmp	r3, #76	; 0x4c
   257b2:	d14c      	bne.n	2584e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   257b4:	23de      	movs	r3, #222	; 0xde
   257b6:	18fb      	adds	r3, r7, r3
   257b8:	2207      	movs	r2, #7
   257ba:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   257bc:	1dfb      	adds	r3, r7, #7
   257be:	781b      	ldrb	r3, [r3, #0]
   257c0:	2b47      	cmp	r3, #71	; 0x47
   257c2:	d103      	bne.n	257cc <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   257c4:	23de      	movs	r3, #222	; 0xde
   257c6:	18fb      	adds	r3, r7, r3
   257c8:	2208      	movs	r2, #8
   257ca:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   257cc:	2364      	movs	r3, #100	; 0x64
   257ce:	18f9      	adds	r1, r7, r3
   257d0:	6838      	ldr	r0, [r7, #0]
   257d2:	2300      	movs	r3, #0
   257d4:	2208      	movs	r2, #8
   257d6:	4c36      	ldr	r4, [pc, #216]	; (258b0 <m2m_ip_cb+0x53c>)
   257d8:	47a0      	blx	r4
   257da:	1e03      	subs	r3, r0, #0
   257dc:	d162      	bne.n	258a4 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   257de:	23dc      	movs	r3, #220	; 0xdc
   257e0:	18fb      	adds	r3, r7, r3
   257e2:	2200      	movs	r2, #0
   257e4:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   257e6:	23db      	movs	r3, #219	; 0xdb
   257e8:	18fb      	adds	r3, r7, r3
   257ea:	2264      	movs	r2, #100	; 0x64
   257ec:	18ba      	adds	r2, r7, r2
   257ee:	7812      	ldrb	r2, [r2, #0]
   257f0:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   257f2:	23dc      	movs	r3, #220	; 0xdc
   257f4:	18fb      	adds	r3, r7, r3
   257f6:	2264      	movs	r2, #100	; 0x64
   257f8:	18ba      	adds	r2, r7, r2
   257fa:	8892      	ldrh	r2, [r2, #4]
   257fc:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   257fe:	2364      	movs	r3, #100	; 0x64
   25800:	18fb      	adds	r3, r7, r3
   25802:	2202      	movs	r2, #2
   25804:	5e9a      	ldrsh	r2, [r3, r2]
   25806:	236e      	movs	r3, #110	; 0x6e
   25808:	18fb      	adds	r3, r7, r3
   2580a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2580c:	23db      	movs	r3, #219	; 0xdb
   2580e:	18fb      	adds	r3, r7, r3
   25810:	781b      	ldrb	r3, [r3, #0]
   25812:	b25b      	sxtb	r3, r3
   25814:	4a27      	ldr	r2, [pc, #156]	; (258b4 <m2m_ip_cb+0x540>)
   25816:	011b      	lsls	r3, r3, #4
   25818:	18d3      	adds	r3, r2, r3
   2581a:	3306      	adds	r3, #6
   2581c:	881b      	ldrh	r3, [r3, #0]
   2581e:	b29b      	uxth	r3, r3
   25820:	22dc      	movs	r2, #220	; 0xdc
   25822:	18ba      	adds	r2, r7, r2
   25824:	8812      	ldrh	r2, [r2, #0]
   25826:	429a      	cmp	r2, r3
   25828:	d13c      	bne.n	258a4 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   2582a:	4b24      	ldr	r3, [pc, #144]	; (258bc <m2m_ip_cb+0x548>)
   2582c:	681b      	ldr	r3, [r3, #0]
   2582e:	2b00      	cmp	r3, #0
   25830:	d038      	beq.n	258a4 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   25832:	4b22      	ldr	r3, [pc, #136]	; (258bc <m2m_ip_cb+0x548>)
   25834:	681b      	ldr	r3, [r3, #0]
   25836:	226e      	movs	r2, #110	; 0x6e
   25838:	18bc      	adds	r4, r7, r2
   2583a:	22de      	movs	r2, #222	; 0xde
   2583c:	18ba      	adds	r2, r7, r2
   2583e:	7811      	ldrb	r1, [r2, #0]
   25840:	22db      	movs	r2, #219	; 0xdb
   25842:	18ba      	adds	r2, r7, r2
   25844:	2000      	movs	r0, #0
   25846:	5610      	ldrsb	r0, [r2, r0]
   25848:	0022      	movs	r2, r4
   2584a:	4798      	blx	r3
	{
   2584c:	e02a      	b.n	258a4 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2584e:	1dfb      	adds	r3, r7, #7
   25850:	781b      	ldrb	r3, [r3, #0]
   25852:	2b52      	cmp	r3, #82	; 0x52
   25854:	d127      	bne.n	258a6 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25856:	2350      	movs	r3, #80	; 0x50
   25858:	18f9      	adds	r1, r7, r3
   2585a:	6838      	ldr	r0, [r7, #0]
   2585c:	2301      	movs	r3, #1
   2585e:	2214      	movs	r2, #20
   25860:	4c13      	ldr	r4, [pc, #76]	; (258b0 <m2m_ip_cb+0x53c>)
   25862:	47a0      	blx	r4
   25864:	1e03      	subs	r3, r0, #0
   25866:	d11e      	bne.n	258a6 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25868:	2350      	movs	r3, #80	; 0x50
   2586a:	18fb      	adds	r3, r7, r3
   2586c:	685b      	ldr	r3, [r3, #4]
   2586e:	001a      	movs	r2, r3
   25870:	4b13      	ldr	r3, [pc, #76]	; (258c0 <m2m_ip_cb+0x54c>)
   25872:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25874:	4b12      	ldr	r3, [pc, #72]	; (258c0 <m2m_ip_cb+0x54c>)
   25876:	681b      	ldr	r3, [r3, #0]
   25878:	2b00      	cmp	r3, #0
   2587a:	d014      	beq.n	258a6 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   2587c:	4b10      	ldr	r3, [pc, #64]	; (258c0 <m2m_ip_cb+0x54c>)
   2587e:	681c      	ldr	r4, [r3, #0]
   25880:	2350      	movs	r3, #80	; 0x50
   25882:	18fb      	adds	r3, r7, r3
   25884:	6818      	ldr	r0, [r3, #0]
   25886:	2350      	movs	r3, #80	; 0x50
   25888:	18fb      	adds	r3, r7, r3
   2588a:	6899      	ldr	r1, [r3, #8]
   2588c:	2350      	movs	r3, #80	; 0x50
   2588e:	18fb      	adds	r3, r7, r3
   25890:	7c1b      	ldrb	r3, [r3, #16]
   25892:	001a      	movs	r2, r3
   25894:	47a0      	blx	r4
}
   25896:	e006      	b.n	258a6 <m2m_ip_cb+0x532>
	{
   25898:	46c0      	nop			; (mov r8, r8)
   2589a:	e004      	b.n	258a6 <m2m_ip_cb+0x532>
	{
   2589c:	46c0      	nop			; (mov r8, r8)
   2589e:	e002      	b.n	258a6 <m2m_ip_cb+0x532>
	{
   258a0:	46c0      	nop			; (mov r8, r8)
   258a2:	e000      	b.n	258a6 <m2m_ip_cb+0x532>
	{
   258a4:	46c0      	nop			; (mov r8, r8)
}
   258a6:	46c0      	nop			; (mov r8, r8)
   258a8:	46bd      	mov	sp, r7
   258aa:	b039      	add	sp, #228	; 0xe4
   258ac:	bd90      	pop	{r4, r7, pc}
   258ae:	46c0      	nop			; (mov r8, r8)
   258b0:	00021c49 	.word	0x00021c49
   258b4:	20005b40 	.word	0x20005b40
   258b8:	00025179 	.word	0x00025179
   258bc:	20005bf0 	.word	0x20005bf0
   258c0:	20005bf4 	.word	0x20005bf4

000258c4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   258c4:	b580      	push	{r7, lr}
   258c6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   258c8:	4b0c      	ldr	r3, [pc, #48]	; (258fc <socketInit+0x38>)
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	b2db      	uxtb	r3, r3
   258ce:	2b00      	cmp	r3, #0
   258d0:	d110      	bne.n	258f4 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   258d2:	4b0b      	ldr	r3, [pc, #44]	; (25900 <socketInit+0x3c>)
   258d4:	22b0      	movs	r2, #176	; 0xb0
   258d6:	2100      	movs	r1, #0
   258d8:	0018      	movs	r0, r3
   258da:	4b0a      	ldr	r3, [pc, #40]	; (25904 <socketInit+0x40>)
   258dc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   258de:	4b0a      	ldr	r3, [pc, #40]	; (25908 <socketInit+0x44>)
   258e0:	0019      	movs	r1, r3
   258e2:	2002      	movs	r0, #2
   258e4:	4b09      	ldr	r3, [pc, #36]	; (2590c <socketInit+0x48>)
   258e6:	4798      	blx	r3
		gbSocketInit	= 1;
   258e8:	4b04      	ldr	r3, [pc, #16]	; (258fc <socketInit+0x38>)
   258ea:	2201      	movs	r2, #1
   258ec:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   258ee:	4b08      	ldr	r3, [pc, #32]	; (25910 <socketInit+0x4c>)
   258f0:	2200      	movs	r2, #0
   258f2:	801a      	strh	r2, [r3, #0]
	}
}
   258f4:	46c0      	nop			; (mov r8, r8)
   258f6:	46bd      	mov	sp, r7
   258f8:	bd80      	pop	{r7, pc}
   258fa:	46c0      	nop			; (mov r8, r8)
   258fc:	200042b0 	.word	0x200042b0
   25900:	20005b40 	.word	0x20005b40
   25904:	000210cd 	.word	0x000210cd
   25908:	00025375 	.word	0x00025375
   2590c:	00021dc9 	.word	0x00021dc9
   25910:	200042ae 	.word	0x200042ae

00025914 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   25914:	b580      	push	{r7, lr}
   25916:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25918:	4b0a      	ldr	r3, [pc, #40]	; (25944 <socketDeinit+0x30>)
   2591a:	22b0      	movs	r2, #176	; 0xb0
   2591c:	2100      	movs	r1, #0
   2591e:	0018      	movs	r0, r3
   25920:	4b09      	ldr	r3, [pc, #36]	; (25948 <socketDeinit+0x34>)
   25922:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   25924:	2100      	movs	r1, #0
   25926:	2002      	movs	r0, #2
   25928:	4b08      	ldr	r3, [pc, #32]	; (2594c <socketDeinit+0x38>)
   2592a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   2592c:	4b08      	ldr	r3, [pc, #32]	; (25950 <socketDeinit+0x3c>)
   2592e:	2200      	movs	r2, #0
   25930:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   25932:	4b08      	ldr	r3, [pc, #32]	; (25954 <socketDeinit+0x40>)
   25934:	2200      	movs	r2, #0
   25936:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   25938:	4b07      	ldr	r3, [pc, #28]	; (25958 <socketDeinit+0x44>)
   2593a:	2200      	movs	r2, #0
   2593c:	701a      	strb	r2, [r3, #0]
}
   2593e:	46c0      	nop			; (mov r8, r8)
   25940:	46bd      	mov	sp, r7
   25942:	bd80      	pop	{r7, pc}
   25944:	20005b40 	.word	0x20005b40
   25948:	000210cd 	.word	0x000210cd
   2594c:	00021dc9 	.word	0x00021dc9
   25950:	20005bf0 	.word	0x20005bf0
   25954:	20005bf8 	.word	0x20005bf8
   25958:	200042b0 	.word	0x200042b0

0002595c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   2595c:	b580      	push	{r7, lr}
   2595e:	b082      	sub	sp, #8
   25960:	af00      	add	r7, sp, #0
   25962:	6078      	str	r0, [r7, #4]
   25964:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   25966:	4b05      	ldr	r3, [pc, #20]	; (2597c <registerSocketCallback+0x20>)
   25968:	687a      	ldr	r2, [r7, #4]
   2596a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   2596c:	4b04      	ldr	r3, [pc, #16]	; (25980 <registerSocketCallback+0x24>)
   2596e:	683a      	ldr	r2, [r7, #0]
   25970:	601a      	str	r2, [r3, #0]
}
   25972:	46c0      	nop			; (mov r8, r8)
   25974:	46bd      	mov	sp, r7
   25976:	b002      	add	sp, #8
   25978:	bd80      	pop	{r7, pc}
   2597a:	46c0      	nop			; (mov r8, r8)
   2597c:	20005bf0 	.word	0x20005bf0
   25980:	20005bf8 	.word	0x20005bf8

00025984 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   25984:	b590      	push	{r4, r7, lr}
   25986:	b08d      	sub	sp, #52	; 0x34
   25988:	af04      	add	r7, sp, #16
   2598a:	0004      	movs	r4, r0
   2598c:	0008      	movs	r0, r1
   2598e:	0011      	movs	r1, r2
   25990:	1dbb      	adds	r3, r7, #6
   25992:	1c22      	adds	r2, r4, #0
   25994:	801a      	strh	r2, [r3, #0]
   25996:	1d7b      	adds	r3, r7, #5
   25998:	1c02      	adds	r2, r0, #0
   2599a:	701a      	strb	r2, [r3, #0]
   2599c:	1d3b      	adds	r3, r7, #4
   2599e:	1c0a      	adds	r2, r1, #0
   259a0:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   259a2:	231f      	movs	r3, #31
   259a4:	18fb      	adds	r3, r7, r3
   259a6:	22ff      	movs	r2, #255	; 0xff
   259a8:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   259aa:	1dbb      	adds	r3, r7, #6
   259ac:	881b      	ldrh	r3, [r3, #0]
   259ae:	2b02      	cmp	r3, #2
   259b0:	d000      	beq.n	259b4 <socket+0x30>
   259b2:	e0ce      	b.n	25b52 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   259b4:	1d7b      	adds	r3, r7, #5
   259b6:	781b      	ldrb	r3, [r3, #0]
   259b8:	2b01      	cmp	r3, #1
   259ba:	d135      	bne.n	25a28 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   259bc:	231e      	movs	r3, #30
   259be:	18fb      	adds	r3, r7, r3
   259c0:	2200      	movs	r2, #0
   259c2:	701a      	strb	r2, [r3, #0]
   259c4:	e02a      	b.n	25a1c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   259c6:	2317      	movs	r3, #23
   259c8:	18fb      	adds	r3, r7, r3
   259ca:	4a66      	ldr	r2, [pc, #408]	; (25b64 <socket+0x1e0>)
   259cc:	7812      	ldrb	r2, [r2, #0]
   259ce:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   259d0:	4b64      	ldr	r3, [pc, #400]	; (25b64 <socket+0x1e0>)
   259d2:	781b      	ldrb	r3, [r3, #0]
   259d4:	b2db      	uxtb	r3, r3
   259d6:	011a      	lsls	r2, r3, #4
   259d8:	4b63      	ldr	r3, [pc, #396]	; (25b68 <socket+0x1e4>)
   259da:	18d3      	adds	r3, r2, r3
   259dc:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   259de:	4b61      	ldr	r3, [pc, #388]	; (25b64 <socket+0x1e0>)
   259e0:	781b      	ldrb	r3, [r3, #0]
   259e2:	b2db      	uxtb	r3, r3
   259e4:	1c5a      	adds	r2, r3, #1
   259e6:	4b61      	ldr	r3, [pc, #388]	; (25b6c <socket+0x1e8>)
   259e8:	2107      	movs	r1, #7
   259ea:	0010      	movs	r0, r2
   259ec:	4798      	blx	r3
   259ee:	000b      	movs	r3, r1
   259f0:	b2da      	uxtb	r2, r3
   259f2:	4b5c      	ldr	r3, [pc, #368]	; (25b64 <socket+0x1e0>)
   259f4:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   259f6:	69bb      	ldr	r3, [r7, #24]
   259f8:	7a9b      	ldrb	r3, [r3, #10]
   259fa:	b2db      	uxtb	r3, r3
   259fc:	2b00      	cmp	r3, #0
   259fe:	d106      	bne.n	25a0e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25a00:	231f      	movs	r3, #31
   25a02:	18fb      	adds	r3, r7, r3
   25a04:	2217      	movs	r2, #23
   25a06:	18ba      	adds	r2, r7, r2
   25a08:	7812      	ldrb	r2, [r2, #0]
   25a0a:	701a      	strb	r2, [r3, #0]
					break;
   25a0c:	e04c      	b.n	25aa8 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25a0e:	231e      	movs	r3, #30
   25a10:	18fb      	adds	r3, r7, r3
   25a12:	781a      	ldrb	r2, [r3, #0]
   25a14:	231e      	movs	r3, #30
   25a16:	18fb      	adds	r3, r7, r3
   25a18:	3201      	adds	r2, #1
   25a1a:	701a      	strb	r2, [r3, #0]
   25a1c:	231e      	movs	r3, #30
   25a1e:	18fb      	adds	r3, r7, r3
   25a20:	781b      	ldrb	r3, [r3, #0]
   25a22:	2b06      	cmp	r3, #6
   25a24:	d9cf      	bls.n	259c6 <socket+0x42>
   25a26:	e03f      	b.n	25aa8 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25a28:	1d7b      	adds	r3, r7, #5
   25a2a:	781b      	ldrb	r3, [r3, #0]
   25a2c:	2b02      	cmp	r3, #2
   25a2e:	d13b      	bne.n	25aa8 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   25a30:	4b4f      	ldr	r3, [pc, #316]	; (25b70 <socket+0x1ec>)
   25a32:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25a34:	231e      	movs	r3, #30
   25a36:	18fb      	adds	r3, r7, r3
   25a38:	2200      	movs	r2, #0
   25a3a:	701a      	strb	r2, [r3, #0]
   25a3c:	e02f      	b.n	25a9e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   25a3e:	2317      	movs	r3, #23
   25a40:	18fb      	adds	r3, r7, r3
   25a42:	4a4c      	ldr	r2, [pc, #304]	; (25b74 <socket+0x1f0>)
   25a44:	7812      	ldrb	r2, [r2, #0]
   25a46:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25a48:	4b4a      	ldr	r3, [pc, #296]	; (25b74 <socket+0x1f0>)
   25a4a:	781b      	ldrb	r3, [r3, #0]
   25a4c:	b2db      	uxtb	r3, r3
   25a4e:	011b      	lsls	r3, r3, #4
   25a50:	693a      	ldr	r2, [r7, #16]
   25a52:	18d3      	adds	r3, r2, r3
   25a54:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25a56:	4b47      	ldr	r3, [pc, #284]	; (25b74 <socket+0x1f0>)
   25a58:	781b      	ldrb	r3, [r3, #0]
   25a5a:	b2db      	uxtb	r3, r3
   25a5c:	3301      	adds	r3, #1
   25a5e:	4a46      	ldr	r2, [pc, #280]	; (25b78 <socket+0x1f4>)
   25a60:	4013      	ands	r3, r2
   25a62:	d504      	bpl.n	25a6e <socket+0xea>
   25a64:	3b01      	subs	r3, #1
   25a66:	2204      	movs	r2, #4
   25a68:	4252      	negs	r2, r2
   25a6a:	4313      	orrs	r3, r2
   25a6c:	3301      	adds	r3, #1
   25a6e:	b2da      	uxtb	r2, r3
   25a70:	4b40      	ldr	r3, [pc, #256]	; (25b74 <socket+0x1f0>)
   25a72:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25a74:	69bb      	ldr	r3, [r7, #24]
   25a76:	7a9b      	ldrb	r3, [r3, #10]
   25a78:	b2db      	uxtb	r3, r3
   25a7a:	2b00      	cmp	r3, #0
   25a7c:	d108      	bne.n	25a90 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   25a7e:	2317      	movs	r3, #23
   25a80:	18fb      	adds	r3, r7, r3
   25a82:	781b      	ldrb	r3, [r3, #0]
   25a84:	3307      	adds	r3, #7
   25a86:	b2da      	uxtb	r2, r3
   25a88:	231f      	movs	r3, #31
   25a8a:	18fb      	adds	r3, r7, r3
   25a8c:	701a      	strb	r2, [r3, #0]
					break;
   25a8e:	e00b      	b.n	25aa8 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25a90:	231e      	movs	r3, #30
   25a92:	18fb      	adds	r3, r7, r3
   25a94:	781a      	ldrb	r2, [r3, #0]
   25a96:	231e      	movs	r3, #30
   25a98:	18fb      	adds	r3, r7, r3
   25a9a:	3201      	adds	r2, #1
   25a9c:	701a      	strb	r2, [r3, #0]
   25a9e:	231e      	movs	r3, #30
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	781b      	ldrb	r3, [r3, #0]
   25aa4:	2b03      	cmp	r3, #3
   25aa6:	d9ca      	bls.n	25a3e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25aa8:	231f      	movs	r3, #31
   25aaa:	18fb      	adds	r3, r7, r3
   25aac:	781b      	ldrb	r3, [r3, #0]
   25aae:	2b7f      	cmp	r3, #127	; 0x7f
   25ab0:	d84f      	bhi.n	25b52 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   25ab2:	69bb      	ldr	r3, [r7, #24]
   25ab4:	2210      	movs	r2, #16
   25ab6:	2100      	movs	r1, #0
   25ab8:	0018      	movs	r0, r3
   25aba:	4b30      	ldr	r3, [pc, #192]	; (25b7c <socket+0x1f8>)
   25abc:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   25abe:	69bb      	ldr	r3, [r7, #24]
   25ac0:	2201      	movs	r2, #1
   25ac2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   25ac4:	4b2e      	ldr	r3, [pc, #184]	; (25b80 <socket+0x1fc>)
   25ac6:	881b      	ldrh	r3, [r3, #0]
   25ac8:	b29b      	uxth	r3, r3
   25aca:	3301      	adds	r3, #1
   25acc:	b29a      	uxth	r2, r3
   25ace:	4b2c      	ldr	r3, [pc, #176]	; (25b80 <socket+0x1fc>)
   25ad0:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   25ad2:	4b2b      	ldr	r3, [pc, #172]	; (25b80 <socket+0x1fc>)
   25ad4:	881b      	ldrh	r3, [r3, #0]
   25ad6:	b29b      	uxth	r3, r3
   25ad8:	2b00      	cmp	r3, #0
   25ada:	d106      	bne.n	25aea <socket+0x166>
				++gu16SessionID;
   25adc:	4b28      	ldr	r3, [pc, #160]	; (25b80 <socket+0x1fc>)
   25ade:	881b      	ldrh	r3, [r3, #0]
   25ae0:	b29b      	uxth	r3, r3
   25ae2:	3301      	adds	r3, #1
   25ae4:	b29a      	uxth	r2, r3
   25ae6:	4b26      	ldr	r3, [pc, #152]	; (25b80 <socket+0x1fc>)
   25ae8:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25aea:	4b25      	ldr	r3, [pc, #148]	; (25b80 <socket+0x1fc>)
   25aec:	881b      	ldrh	r3, [r3, #0]
   25aee:	b29a      	uxth	r2, r3
   25af0:	69bb      	ldr	r3, [r7, #24]
   25af2:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25af4:	4b23      	ldr	r3, [pc, #140]	; (25b84 <socket+0x200>)
   25af6:	0018      	movs	r0, r3
   25af8:	4b23      	ldr	r3, [pc, #140]	; (25b88 <socket+0x204>)
   25afa:	4798      	blx	r3
   25afc:	231f      	movs	r3, #31
   25afe:	18fb      	adds	r3, r7, r3
   25b00:	2100      	movs	r1, #0
   25b02:	5659      	ldrsb	r1, [r3, r1]
   25b04:	4b1e      	ldr	r3, [pc, #120]	; (25b80 <socket+0x1fc>)
   25b06:	881b      	ldrh	r3, [r3, #0]
   25b08:	b29b      	uxth	r3, r3
   25b0a:	001a      	movs	r2, r3
   25b0c:	4b1f      	ldr	r3, [pc, #124]	; (25b8c <socket+0x208>)
   25b0e:	0018      	movs	r0, r3
   25b10:	4b1d      	ldr	r3, [pc, #116]	; (25b88 <socket+0x204>)
   25b12:	4798      	blx	r3
   25b14:	4b1e      	ldr	r3, [pc, #120]	; (25b90 <socket+0x20c>)
   25b16:	0018      	movs	r0, r3
   25b18:	4b1b      	ldr	r3, [pc, #108]	; (25b88 <socket+0x204>)
   25b1a:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25b1c:	1d3b      	adds	r3, r7, #4
   25b1e:	781b      	ldrb	r3, [r3, #0]
   25b20:	2201      	movs	r2, #1
   25b22:	4013      	ands	r3, r2
   25b24:	d015      	beq.n	25b52 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   25b26:	230c      	movs	r3, #12
   25b28:	18fb      	adds	r3, r7, r3
   25b2a:	221f      	movs	r2, #31
   25b2c:	18ba      	adds	r2, r7, r2
   25b2e:	7812      	ldrb	r2, [r2, #0]
   25b30:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   25b32:	69bb      	ldr	r3, [r7, #24]
   25b34:	2221      	movs	r2, #33	; 0x21
   25b36:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25b38:	230c      	movs	r3, #12
   25b3a:	18fa      	adds	r2, r7, r3
   25b3c:	2300      	movs	r3, #0
   25b3e:	9302      	str	r3, [sp, #8]
   25b40:	2300      	movs	r3, #0
   25b42:	9301      	str	r3, [sp, #4]
   25b44:	2300      	movs	r3, #0
   25b46:	9300      	str	r3, [sp, #0]
   25b48:	2304      	movs	r3, #4
   25b4a:	2150      	movs	r1, #80	; 0x50
   25b4c:	2002      	movs	r0, #2
   25b4e:	4c11      	ldr	r4, [pc, #68]	; (25b94 <socket+0x210>)
   25b50:	47a0      	blx	r4
			}
		}
	}
	return sock;
   25b52:	231f      	movs	r3, #31
   25b54:	18fb      	adds	r3, r7, r3
   25b56:	781b      	ldrb	r3, [r3, #0]
   25b58:	b25b      	sxtb	r3, r3
}
   25b5a:	0018      	movs	r0, r3
   25b5c:	46bd      	mov	sp, r7
   25b5e:	b009      	add	sp, #36	; 0x24
   25b60:	bd90      	pop	{r4, r7, pc}
   25b62:	46c0      	nop			; (mov r8, r8)
   25b64:	200042b1 	.word	0x200042b1
   25b68:	20005b40 	.word	0x20005b40
   25b6c:	00033075 	.word	0x00033075
   25b70:	20005bb0 	.word	0x20005bb0
   25b74:	200042b2 	.word	0x200042b2
   25b78:	80000003 	.word	0x80000003
   25b7c:	000210cd 	.word	0x000210cd
   25b80:	200042ae 	.word	0x200042ae
   25b84:	000399bc 	.word	0x000399bc
   25b88:	0001e399 	.word	0x0001e399
   25b8c:	000399e0 	.word	0x000399e0
   25b90:	000399dc 	.word	0x000399dc
   25b94:	0002132d 	.word	0x0002132d

00025b98 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25b98:	b5b0      	push	{r4, r5, r7, lr}
   25b9a:	b08a      	sub	sp, #40	; 0x28
   25b9c:	af04      	add	r7, sp, #16
   25b9e:	6039      	str	r1, [r7, #0]
   25ba0:	0011      	movs	r1, r2
   25ba2:	1dfb      	adds	r3, r7, #7
   25ba4:	1c02      	adds	r2, r0, #0
   25ba6:	701a      	strb	r2, [r3, #0]
   25ba8:	1dbb      	adds	r3, r7, #6
   25baa:	1c0a      	adds	r2, r1, #0
   25bac:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25bae:	2317      	movs	r3, #23
   25bb0:	18fb      	adds	r3, r7, r3
   25bb2:	22fa      	movs	r2, #250	; 0xfa
   25bb4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   25bb6:	1dfb      	adds	r3, r7, #7
   25bb8:	781b      	ldrb	r3, [r3, #0]
   25bba:	2b7f      	cmp	r3, #127	; 0x7f
   25bbc:	d867      	bhi.n	25c8e <connect+0xf6>
   25bbe:	683b      	ldr	r3, [r7, #0]
   25bc0:	2b00      	cmp	r3, #0
   25bc2:	d064      	beq.n	25c8e <connect+0xf6>
   25bc4:	1dfb      	adds	r3, r7, #7
   25bc6:	781b      	ldrb	r3, [r3, #0]
   25bc8:	b25b      	sxtb	r3, r3
   25bca:	4a35      	ldr	r2, [pc, #212]	; (25ca0 <connect+0x108>)
   25bcc:	011b      	lsls	r3, r3, #4
   25bce:	18d3      	adds	r3, r2, r3
   25bd0:	330a      	adds	r3, #10
   25bd2:	781b      	ldrb	r3, [r3, #0]
   25bd4:	b2db      	uxtb	r3, r3
   25bd6:	2b01      	cmp	r3, #1
   25bd8:	d159      	bne.n	25c8e <connect+0xf6>
   25bda:	1dbb      	adds	r3, r7, #6
   25bdc:	781b      	ldrb	r3, [r3, #0]
   25bde:	2b00      	cmp	r3, #0
   25be0:	d055      	beq.n	25c8e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   25be2:	2316      	movs	r3, #22
   25be4:	18fb      	adds	r3, r7, r3
   25be6:	2244      	movs	r2, #68	; 0x44
   25be8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25bea:	1dfb      	adds	r3, r7, #7
   25bec:	781b      	ldrb	r3, [r3, #0]
   25bee:	b25b      	sxtb	r3, r3
   25bf0:	4a2b      	ldr	r2, [pc, #172]	; (25ca0 <connect+0x108>)
   25bf2:	011b      	lsls	r3, r3, #4
   25bf4:	18d3      	adds	r3, r2, r3
   25bf6:	330b      	adds	r3, #11
   25bf8:	781b      	ldrb	r3, [r3, #0]
   25bfa:	b2db      	uxtb	r3, r3
   25bfc:	001a      	movs	r2, r3
   25bfe:	2301      	movs	r3, #1
   25c00:	4013      	ands	r3, r2
   25c02:	d00f      	beq.n	25c24 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25c04:	2316      	movs	r3, #22
   25c06:	18fb      	adds	r3, r7, r3
   25c08:	224b      	movs	r2, #75	; 0x4b
   25c0a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25c0c:	1dfb      	adds	r3, r7, #7
   25c0e:	781b      	ldrb	r3, [r3, #0]
   25c10:	b25b      	sxtb	r3, r3
   25c12:	4a23      	ldr	r2, [pc, #140]	; (25ca0 <connect+0x108>)
   25c14:	011b      	lsls	r3, r3, #4
   25c16:	18d3      	adds	r3, r2, r3
   25c18:	330b      	adds	r3, #11
   25c1a:	781b      	ldrb	r3, [r3, #0]
   25c1c:	b2da      	uxtb	r2, r3
   25c1e:	2308      	movs	r3, #8
   25c20:	18fb      	adds	r3, r7, r3
   25c22:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25c24:	2308      	movs	r3, #8
   25c26:	18fb      	adds	r3, r7, r3
   25c28:	1dfa      	adds	r2, r7, #7
   25c2a:	7812      	ldrb	r2, [r2, #0]
   25c2c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25c2e:	6839      	ldr	r1, [r7, #0]
   25c30:	2308      	movs	r3, #8
   25c32:	18fb      	adds	r3, r7, r3
   25c34:	2208      	movs	r2, #8
   25c36:	0018      	movs	r0, r3
   25c38:	4b1a      	ldr	r3, [pc, #104]	; (25ca4 <connect+0x10c>)
   25c3a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25c3c:	1dfb      	adds	r3, r7, #7
   25c3e:	781b      	ldrb	r3, [r3, #0]
   25c40:	b25b      	sxtb	r3, r3
   25c42:	4a17      	ldr	r2, [pc, #92]	; (25ca0 <connect+0x108>)
   25c44:	011b      	lsls	r3, r3, #4
   25c46:	18d3      	adds	r3, r2, r3
   25c48:	3306      	adds	r3, #6
   25c4a:	881b      	ldrh	r3, [r3, #0]
   25c4c:	b29a      	uxth	r2, r3
   25c4e:	2308      	movs	r3, #8
   25c50:	18fb      	adds	r3, r7, r3
   25c52:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25c54:	2317      	movs	r3, #23
   25c56:	18fc      	adds	r4, r7, r3
   25c58:	2308      	movs	r3, #8
   25c5a:	18fa      	adds	r2, r7, r3
   25c5c:	2316      	movs	r3, #22
   25c5e:	18fb      	adds	r3, r7, r3
   25c60:	7819      	ldrb	r1, [r3, #0]
   25c62:	2300      	movs	r3, #0
   25c64:	9302      	str	r3, [sp, #8]
   25c66:	2300      	movs	r3, #0
   25c68:	9301      	str	r3, [sp, #4]
   25c6a:	2300      	movs	r3, #0
   25c6c:	9300      	str	r3, [sp, #0]
   25c6e:	230c      	movs	r3, #12
   25c70:	2002      	movs	r0, #2
   25c72:	4d0d      	ldr	r5, [pc, #52]	; (25ca8 <connect+0x110>)
   25c74:	47a8      	blx	r5
   25c76:	0003      	movs	r3, r0
   25c78:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25c7a:	2317      	movs	r3, #23
   25c7c:	18fb      	adds	r3, r7, r3
   25c7e:	781b      	ldrb	r3, [r3, #0]
   25c80:	b25b      	sxtb	r3, r3
   25c82:	2b00      	cmp	r3, #0
   25c84:	d003      	beq.n	25c8e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   25c86:	2317      	movs	r3, #23
   25c88:	18fb      	adds	r3, r7, r3
   25c8a:	22f7      	movs	r2, #247	; 0xf7
   25c8c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25c8e:	2317      	movs	r3, #23
   25c90:	18fb      	adds	r3, r7, r3
   25c92:	781b      	ldrb	r3, [r3, #0]
   25c94:	b25b      	sxtb	r3, r3
}
   25c96:	0018      	movs	r0, r3
   25c98:	46bd      	mov	sp, r7
   25c9a:	b006      	add	sp, #24
   25c9c:	bdb0      	pop	{r4, r5, r7, pc}
   25c9e:	46c0      	nop			; (mov r8, r8)
   25ca0:	20005b40 	.word	0x20005b40
   25ca4:	00021091 	.word	0x00021091
   25ca8:	0002132d 	.word	0x0002132d

00025cac <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25cac:	b590      	push	{r4, r7, lr}
   25cae:	b08f      	sub	sp, #60	; 0x3c
   25cb0:	af04      	add	r7, sp, #16
   25cb2:	0004      	movs	r4, r0
   25cb4:	60b9      	str	r1, [r7, #8]
   25cb6:	0010      	movs	r0, r2
   25cb8:	0019      	movs	r1, r3
   25cba:	230f      	movs	r3, #15
   25cbc:	18fb      	adds	r3, r7, r3
   25cbe:	1c22      	adds	r2, r4, #0
   25cc0:	701a      	strb	r2, [r3, #0]
   25cc2:	230c      	movs	r3, #12
   25cc4:	18fb      	adds	r3, r7, r3
   25cc6:	1c02      	adds	r2, r0, #0
   25cc8:	801a      	strh	r2, [r3, #0]
   25cca:	1dbb      	adds	r3, r7, #6
   25ccc:	1c0a      	adds	r2, r1, #0
   25cce:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25cd0:	2326      	movs	r3, #38	; 0x26
   25cd2:	18fb      	adds	r3, r7, r3
   25cd4:	2206      	movs	r2, #6
   25cd6:	4252      	negs	r2, r2
   25cd8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25cda:	230f      	movs	r3, #15
   25cdc:	18fb      	adds	r3, r7, r3
   25cde:	781b      	ldrb	r3, [r3, #0]
   25ce0:	2b7f      	cmp	r3, #127	; 0x7f
   25ce2:	d900      	bls.n	25ce6 <send+0x3a>
   25ce4:	e087      	b.n	25df6 <send+0x14a>
   25ce6:	68bb      	ldr	r3, [r7, #8]
   25ce8:	2b00      	cmp	r3, #0
   25cea:	d100      	bne.n	25cee <send+0x42>
   25cec:	e083      	b.n	25df6 <send+0x14a>
   25cee:	230c      	movs	r3, #12
   25cf0:	18fb      	adds	r3, r7, r3
   25cf2:	881a      	ldrh	r2, [r3, #0]
   25cf4:	23af      	movs	r3, #175	; 0xaf
   25cf6:	00db      	lsls	r3, r3, #3
   25cf8:	429a      	cmp	r2, r3
   25cfa:	d900      	bls.n	25cfe <send+0x52>
   25cfc:	e07b      	b.n	25df6 <send+0x14a>
   25cfe:	230f      	movs	r3, #15
   25d00:	18fb      	adds	r3, r7, r3
   25d02:	781b      	ldrb	r3, [r3, #0]
   25d04:	b25b      	sxtb	r3, r3
   25d06:	4a40      	ldr	r2, [pc, #256]	; (25e08 <send+0x15c>)
   25d08:	011b      	lsls	r3, r3, #4
   25d0a:	18d3      	adds	r3, r2, r3
   25d0c:	330a      	adds	r3, #10
   25d0e:	781b      	ldrb	r3, [r3, #0]
   25d10:	b2db      	uxtb	r3, r3
   25d12:	2b01      	cmp	r3, #1
   25d14:	d16f      	bne.n	25df6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25d16:	2323      	movs	r3, #35	; 0x23
   25d18:	18fb      	adds	r3, r7, r3
   25d1a:	2245      	movs	r2, #69	; 0x45
   25d1c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25d1e:	2324      	movs	r3, #36	; 0x24
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	2250      	movs	r2, #80	; 0x50
   25d24:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25d26:	2310      	movs	r3, #16
   25d28:	18fb      	adds	r3, r7, r3
   25d2a:	220f      	movs	r2, #15
   25d2c:	18ba      	adds	r2, r7, r2
   25d2e:	7812      	ldrb	r2, [r2, #0]
   25d30:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   25d32:	2310      	movs	r3, #16
   25d34:	18fb      	adds	r3, r7, r3
   25d36:	220c      	movs	r2, #12
   25d38:	18ba      	adds	r2, r7, r2
   25d3a:	8812      	ldrh	r2, [r2, #0]
   25d3c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25d3e:	230f      	movs	r3, #15
   25d40:	18fb      	adds	r3, r7, r3
   25d42:	781b      	ldrb	r3, [r3, #0]
   25d44:	b25b      	sxtb	r3, r3
   25d46:	4a30      	ldr	r2, [pc, #192]	; (25e08 <send+0x15c>)
   25d48:	011b      	lsls	r3, r3, #4
   25d4a:	18d3      	adds	r3, r2, r3
   25d4c:	3306      	adds	r3, #6
   25d4e:	881b      	ldrh	r3, [r3, #0]
   25d50:	b29a      	uxth	r2, r3
   25d52:	2310      	movs	r3, #16
   25d54:	18fb      	adds	r3, r7, r3
   25d56:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25d58:	230f      	movs	r3, #15
   25d5a:	18fb      	adds	r3, r7, r3
   25d5c:	781b      	ldrb	r3, [r3, #0]
   25d5e:	b25b      	sxtb	r3, r3
   25d60:	2b06      	cmp	r3, #6
   25d62:	dd03      	ble.n	25d6c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   25d64:	2324      	movs	r3, #36	; 0x24
   25d66:	18fb      	adds	r3, r7, r3
   25d68:	2244      	movs	r2, #68	; 0x44
   25d6a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25d6c:	230f      	movs	r3, #15
   25d6e:	18fb      	adds	r3, r7, r3
   25d70:	781b      	ldrb	r3, [r3, #0]
   25d72:	b25b      	sxtb	r3, r3
   25d74:	4a24      	ldr	r2, [pc, #144]	; (25e08 <send+0x15c>)
   25d76:	011b      	lsls	r3, r3, #4
   25d78:	18d3      	adds	r3, r2, r3
   25d7a:	330b      	adds	r3, #11
   25d7c:	781b      	ldrb	r3, [r3, #0]
   25d7e:	b2db      	uxtb	r3, r3
   25d80:	001a      	movs	r2, r3
   25d82:	2301      	movs	r3, #1
   25d84:	4013      	ands	r3, r2
   25d86:	d00f      	beq.n	25da8 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25d88:	2323      	movs	r3, #35	; 0x23
   25d8a:	18fb      	adds	r3, r7, r3
   25d8c:	224c      	movs	r2, #76	; 0x4c
   25d8e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25d90:	230f      	movs	r3, #15
   25d92:	18fb      	adds	r3, r7, r3
   25d94:	2200      	movs	r2, #0
   25d96:	569a      	ldrsb	r2, [r3, r2]
   25d98:	2324      	movs	r3, #36	; 0x24
   25d9a:	18fb      	adds	r3, r7, r3
   25d9c:	491a      	ldr	r1, [pc, #104]	; (25e08 <send+0x15c>)
   25d9e:	0112      	lsls	r2, r2, #4
   25da0:	188a      	adds	r2, r1, r2
   25da2:	3208      	adds	r2, #8
   25da4:	8812      	ldrh	r2, [r2, #0]
   25da6:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25da8:	2323      	movs	r3, #35	; 0x23
   25daa:	18fb      	adds	r3, r7, r3
   25dac:	781b      	ldrb	r3, [r3, #0]
   25dae:	2280      	movs	r2, #128	; 0x80
   25db0:	4252      	negs	r2, r2
   25db2:	4313      	orrs	r3, r2
   25db4:	b2d9      	uxtb	r1, r3
   25db6:	2310      	movs	r3, #16
   25db8:	18fa      	adds	r2, r7, r3
   25dba:	2324      	movs	r3, #36	; 0x24
   25dbc:	18fb      	adds	r3, r7, r3
   25dbe:	881b      	ldrh	r3, [r3, #0]
   25dc0:	9302      	str	r3, [sp, #8]
   25dc2:	230c      	movs	r3, #12
   25dc4:	18fb      	adds	r3, r7, r3
   25dc6:	881b      	ldrh	r3, [r3, #0]
   25dc8:	9301      	str	r3, [sp, #4]
   25dca:	68bb      	ldr	r3, [r7, #8]
   25dcc:	9300      	str	r3, [sp, #0]
   25dce:	2310      	movs	r3, #16
   25dd0:	2002      	movs	r0, #2
   25dd2:	4c0e      	ldr	r4, [pc, #56]	; (25e0c <send+0x160>)
   25dd4:	47a0      	blx	r4
   25dd6:	0003      	movs	r3, r0
   25dd8:	001a      	movs	r2, r3
   25dda:	2326      	movs	r3, #38	; 0x26
   25ddc:	18fb      	adds	r3, r7, r3
   25dde:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   25de0:	2326      	movs	r3, #38	; 0x26
   25de2:	18fb      	adds	r3, r7, r3
   25de4:	2200      	movs	r2, #0
   25de6:	5e9b      	ldrsh	r3, [r3, r2]
   25de8:	2b00      	cmp	r3, #0
   25dea:	d004      	beq.n	25df6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25dec:	2326      	movs	r3, #38	; 0x26
   25dee:	18fb      	adds	r3, r7, r3
   25df0:	220e      	movs	r2, #14
   25df2:	4252      	negs	r2, r2
   25df4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25df6:	2326      	movs	r3, #38	; 0x26
   25df8:	18fb      	adds	r3, r7, r3
   25dfa:	2200      	movs	r2, #0
   25dfc:	5e9b      	ldrsh	r3, [r3, r2]
}
   25dfe:	0018      	movs	r0, r3
   25e00:	46bd      	mov	sp, r7
   25e02:	b00b      	add	sp, #44	; 0x2c
   25e04:	bd90      	pop	{r4, r7, pc}
   25e06:	46c0      	nop			; (mov r8, r8)
   25e08:	20005b40 	.word	0x20005b40
   25e0c:	0002132d 	.word	0x0002132d

00025e10 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   25e10:	b590      	push	{r4, r7, lr}
   25e12:	b08d      	sub	sp, #52	; 0x34
   25e14:	af04      	add	r7, sp, #16
   25e16:	60b9      	str	r1, [r7, #8]
   25e18:	0011      	movs	r1, r2
   25e1a:	607b      	str	r3, [r7, #4]
   25e1c:	230f      	movs	r3, #15
   25e1e:	18fb      	adds	r3, r7, r3
   25e20:	1c02      	adds	r2, r0, #0
   25e22:	701a      	strb	r2, [r3, #0]
   25e24:	230c      	movs	r3, #12
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	1c0a      	adds	r2, r1, #0
   25e2a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25e2c:	231e      	movs	r3, #30
   25e2e:	18fb      	adds	r3, r7, r3
   25e30:	2206      	movs	r2, #6
   25e32:	4252      	negs	r2, r2
   25e34:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25e36:	230f      	movs	r3, #15
   25e38:	18fb      	adds	r3, r7, r3
   25e3a:	781b      	ldrb	r3, [r3, #0]
   25e3c:	2b7f      	cmp	r3, #127	; 0x7f
   25e3e:	d900      	bls.n	25e42 <recv+0x32>
   25e40:	e099      	b.n	25f76 <recv+0x166>
   25e42:	68bb      	ldr	r3, [r7, #8]
   25e44:	2b00      	cmp	r3, #0
   25e46:	d100      	bne.n	25e4a <recv+0x3a>
   25e48:	e095      	b.n	25f76 <recv+0x166>
   25e4a:	230c      	movs	r3, #12
   25e4c:	18fb      	adds	r3, r7, r3
   25e4e:	881b      	ldrh	r3, [r3, #0]
   25e50:	2b00      	cmp	r3, #0
   25e52:	d100      	bne.n	25e56 <recv+0x46>
   25e54:	e08f      	b.n	25f76 <recv+0x166>
   25e56:	230f      	movs	r3, #15
   25e58:	18fb      	adds	r3, r7, r3
   25e5a:	781b      	ldrb	r3, [r3, #0]
   25e5c:	b25b      	sxtb	r3, r3
   25e5e:	4a4a      	ldr	r2, [pc, #296]	; (25f88 <recv+0x178>)
   25e60:	011b      	lsls	r3, r3, #4
   25e62:	18d3      	adds	r3, r2, r3
   25e64:	330a      	adds	r3, #10
   25e66:	781b      	ldrb	r3, [r3, #0]
   25e68:	b2db      	uxtb	r3, r3
   25e6a:	2b01      	cmp	r3, #1
   25e6c:	d000      	beq.n	25e70 <recv+0x60>
   25e6e:	e082      	b.n	25f76 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25e70:	231e      	movs	r3, #30
   25e72:	18fb      	adds	r3, r7, r3
   25e74:	2200      	movs	r2, #0
   25e76:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25e78:	230f      	movs	r3, #15
   25e7a:	18fb      	adds	r3, r7, r3
   25e7c:	2200      	movs	r2, #0
   25e7e:	569a      	ldrsb	r2, [r3, r2]
   25e80:	4b41      	ldr	r3, [pc, #260]	; (25f88 <recv+0x178>)
   25e82:	0112      	lsls	r2, r2, #4
   25e84:	68b9      	ldr	r1, [r7, #8]
   25e86:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25e88:	230f      	movs	r3, #15
   25e8a:	18fb      	adds	r3, r7, r3
   25e8c:	781b      	ldrb	r3, [r3, #0]
   25e8e:	b25b      	sxtb	r3, r3
   25e90:	4a3d      	ldr	r2, [pc, #244]	; (25f88 <recv+0x178>)
   25e92:	011b      	lsls	r3, r3, #4
   25e94:	18d3      	adds	r3, r2, r3
   25e96:	3304      	adds	r3, #4
   25e98:	220c      	movs	r2, #12
   25e9a:	18ba      	adds	r2, r7, r2
   25e9c:	8812      	ldrh	r2, [r2, #0]
   25e9e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25ea0:	230f      	movs	r3, #15
   25ea2:	18fb      	adds	r3, r7, r3
   25ea4:	781b      	ldrb	r3, [r3, #0]
   25ea6:	b25b      	sxtb	r3, r3
   25ea8:	4a37      	ldr	r2, [pc, #220]	; (25f88 <recv+0x178>)
   25eaa:	011b      	lsls	r3, r3, #4
   25eac:	18d3      	adds	r3, r2, r3
   25eae:	330c      	adds	r3, #12
   25eb0:	781b      	ldrb	r3, [r3, #0]
   25eb2:	b2db      	uxtb	r3, r3
   25eb4:	2b00      	cmp	r3, #0
   25eb6:	d15e      	bne.n	25f76 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   25eb8:	231d      	movs	r3, #29
   25eba:	18fb      	adds	r3, r7, r3
   25ebc:	2246      	movs	r2, #70	; 0x46
   25ebe:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   25ec0:	230f      	movs	r3, #15
   25ec2:	18fb      	adds	r3, r7, r3
   25ec4:	781b      	ldrb	r3, [r3, #0]
   25ec6:	b25b      	sxtb	r3, r3
   25ec8:	4a2f      	ldr	r2, [pc, #188]	; (25f88 <recv+0x178>)
   25eca:	011b      	lsls	r3, r3, #4
   25ecc:	18d3      	adds	r3, r2, r3
   25ece:	330c      	adds	r3, #12
   25ed0:	2201      	movs	r2, #1
   25ed2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25ed4:	230f      	movs	r3, #15
   25ed6:	18fb      	adds	r3, r7, r3
   25ed8:	781b      	ldrb	r3, [r3, #0]
   25eda:	b25b      	sxtb	r3, r3
   25edc:	4a2a      	ldr	r2, [pc, #168]	; (25f88 <recv+0x178>)
   25ede:	011b      	lsls	r3, r3, #4
   25ee0:	18d3      	adds	r3, r2, r3
   25ee2:	330b      	adds	r3, #11
   25ee4:	781b      	ldrb	r3, [r3, #0]
   25ee6:	b2db      	uxtb	r3, r3
   25ee8:	001a      	movs	r2, r3
   25eea:	2301      	movs	r3, #1
   25eec:	4013      	ands	r3, r2
   25eee:	d003      	beq.n	25ef8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   25ef0:	231d      	movs	r3, #29
   25ef2:	18fb      	adds	r3, r7, r3
   25ef4:	224d      	movs	r2, #77	; 0x4d
   25ef6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25ef8:	687b      	ldr	r3, [r7, #4]
   25efa:	2b00      	cmp	r3, #0
   25efc:	d105      	bne.n	25f0a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   25efe:	2314      	movs	r3, #20
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	2201      	movs	r2, #1
   25f04:	4252      	negs	r2, r2
   25f06:	601a      	str	r2, [r3, #0]
   25f08:	e003      	b.n	25f12 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25f0a:	2314      	movs	r3, #20
   25f0c:	18fb      	adds	r3, r7, r3
   25f0e:	687a      	ldr	r2, [r7, #4]
   25f10:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   25f12:	2314      	movs	r3, #20
   25f14:	18fb      	adds	r3, r7, r3
   25f16:	220f      	movs	r2, #15
   25f18:	18ba      	adds	r2, r7, r2
   25f1a:	7812      	ldrb	r2, [r2, #0]
   25f1c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25f1e:	230f      	movs	r3, #15
   25f20:	18fb      	adds	r3, r7, r3
   25f22:	781b      	ldrb	r3, [r3, #0]
   25f24:	b25b      	sxtb	r3, r3
   25f26:	4a18      	ldr	r2, [pc, #96]	; (25f88 <recv+0x178>)
   25f28:	011b      	lsls	r3, r3, #4
   25f2a:	18d3      	adds	r3, r2, r3
   25f2c:	3306      	adds	r3, #6
   25f2e:	881b      	ldrh	r3, [r3, #0]
   25f30:	b29a      	uxth	r2, r3
   25f32:	2314      	movs	r3, #20
   25f34:	18fb      	adds	r3, r7, r3
   25f36:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25f38:	2314      	movs	r3, #20
   25f3a:	18fa      	adds	r2, r7, r3
   25f3c:	231d      	movs	r3, #29
   25f3e:	18fb      	adds	r3, r7, r3
   25f40:	7819      	ldrb	r1, [r3, #0]
   25f42:	2300      	movs	r3, #0
   25f44:	9302      	str	r3, [sp, #8]
   25f46:	2300      	movs	r3, #0
   25f48:	9301      	str	r3, [sp, #4]
   25f4a:	2300      	movs	r3, #0
   25f4c:	9300      	str	r3, [sp, #0]
   25f4e:	2308      	movs	r3, #8
   25f50:	2002      	movs	r0, #2
   25f52:	4c0e      	ldr	r4, [pc, #56]	; (25f8c <recv+0x17c>)
   25f54:	47a0      	blx	r4
   25f56:	0003      	movs	r3, r0
   25f58:	001a      	movs	r2, r3
   25f5a:	231e      	movs	r3, #30
   25f5c:	18fb      	adds	r3, r7, r3
   25f5e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25f60:	231e      	movs	r3, #30
   25f62:	18fb      	adds	r3, r7, r3
   25f64:	2200      	movs	r2, #0
   25f66:	5e9b      	ldrsh	r3, [r3, r2]
   25f68:	2b00      	cmp	r3, #0
   25f6a:	d004      	beq.n	25f76 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25f6c:	231e      	movs	r3, #30
   25f6e:	18fb      	adds	r3, r7, r3
   25f70:	220e      	movs	r2, #14
   25f72:	4252      	negs	r2, r2
   25f74:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   25f76:	231e      	movs	r3, #30
   25f78:	18fb      	adds	r3, r7, r3
   25f7a:	2200      	movs	r2, #0
   25f7c:	5e9b      	ldrsh	r3, [r3, r2]
}
   25f7e:	0018      	movs	r0, r3
   25f80:	46bd      	mov	sp, r7
   25f82:	b009      	add	sp, #36	; 0x24
   25f84:	bd90      	pop	{r4, r7, pc}
   25f86:	46c0      	nop			; (mov r8, r8)
   25f88:	20005b40 	.word	0x20005b40
   25f8c:	0002132d 	.word	0x0002132d

00025f90 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25f90:	b5b0      	push	{r4, r5, r7, lr}
   25f92:	b088      	sub	sp, #32
   25f94:	af04      	add	r7, sp, #16
   25f96:	0002      	movs	r2, r0
   25f98:	1dfb      	adds	r3, r7, #7
   25f9a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25f9c:	230f      	movs	r3, #15
   25f9e:	18fb      	adds	r3, r7, r3
   25fa0:	22fa      	movs	r2, #250	; 0xfa
   25fa2:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   25fa4:	4b43      	ldr	r3, [pc, #268]	; (260b4 <close+0x124>)
   25fa6:	0018      	movs	r0, r3
   25fa8:	4b43      	ldr	r3, [pc, #268]	; (260b8 <close+0x128>)
   25faa:	4798      	blx	r3
   25fac:	1dfb      	adds	r3, r7, #7
   25fae:	2200      	movs	r2, #0
   25fb0:	569a      	ldrsb	r2, [r3, r2]
   25fb2:	4b42      	ldr	r3, [pc, #264]	; (260bc <close+0x12c>)
   25fb4:	0011      	movs	r1, r2
   25fb6:	0018      	movs	r0, r3
   25fb8:	4b3f      	ldr	r3, [pc, #252]	; (260b8 <close+0x128>)
   25fba:	4798      	blx	r3
   25fbc:	4b40      	ldr	r3, [pc, #256]	; (260c0 <close+0x130>)
   25fbe:	0018      	movs	r0, r3
   25fc0:	4b3d      	ldr	r3, [pc, #244]	; (260b8 <close+0x128>)
   25fc2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   25fc4:	1dfb      	adds	r3, r7, #7
   25fc6:	781b      	ldrb	r3, [r3, #0]
   25fc8:	2b7f      	cmp	r3, #127	; 0x7f
   25fca:	d86a      	bhi.n	260a2 <close+0x112>
   25fcc:	1dfb      	adds	r3, r7, #7
   25fce:	781b      	ldrb	r3, [r3, #0]
   25fd0:	b25b      	sxtb	r3, r3
   25fd2:	4a3c      	ldr	r2, [pc, #240]	; (260c4 <close+0x134>)
   25fd4:	011b      	lsls	r3, r3, #4
   25fd6:	18d3      	adds	r3, r2, r3
   25fd8:	330a      	adds	r3, #10
   25fda:	781b      	ldrb	r3, [r3, #0]
   25fdc:	b2db      	uxtb	r3, r3
   25fde:	2b01      	cmp	r3, #1
   25fe0:	d15f      	bne.n	260a2 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   25fe2:	230e      	movs	r3, #14
   25fe4:	18fb      	adds	r3, r7, r3
   25fe6:	2249      	movs	r2, #73	; 0x49
   25fe8:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25fea:	2308      	movs	r3, #8
   25fec:	18fb      	adds	r3, r7, r3
   25fee:	1dfa      	adds	r2, r7, #7
   25ff0:	7812      	ldrb	r2, [r2, #0]
   25ff2:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25ff4:	1dfb      	adds	r3, r7, #7
   25ff6:	781b      	ldrb	r3, [r3, #0]
   25ff8:	b25b      	sxtb	r3, r3
   25ffa:	4a32      	ldr	r2, [pc, #200]	; (260c4 <close+0x134>)
   25ffc:	011b      	lsls	r3, r3, #4
   25ffe:	18d3      	adds	r3, r2, r3
   26000:	3306      	adds	r3, #6
   26002:	881b      	ldrh	r3, [r3, #0]
   26004:	b29a      	uxth	r2, r3
   26006:	2308      	movs	r3, #8
   26008:	18fb      	adds	r3, r7, r3
   2600a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   2600c:	1dfb      	adds	r3, r7, #7
   2600e:	781b      	ldrb	r3, [r3, #0]
   26010:	b25b      	sxtb	r3, r3
   26012:	4a2c      	ldr	r2, [pc, #176]	; (260c4 <close+0x134>)
   26014:	011b      	lsls	r3, r3, #4
   26016:	18d3      	adds	r3, r2, r3
   26018:	330a      	adds	r3, #10
   2601a:	2200      	movs	r2, #0
   2601c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2601e:	1dfb      	adds	r3, r7, #7
   26020:	781b      	ldrb	r3, [r3, #0]
   26022:	b25b      	sxtb	r3, r3
   26024:	4a27      	ldr	r2, [pc, #156]	; (260c4 <close+0x134>)
   26026:	011b      	lsls	r3, r3, #4
   26028:	18d3      	adds	r3, r2, r3
   2602a:	3306      	adds	r3, #6
   2602c:	2200      	movs	r2, #0
   2602e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26030:	1dfb      	adds	r3, r7, #7
   26032:	781b      	ldrb	r3, [r3, #0]
   26034:	b25b      	sxtb	r3, r3
   26036:	4a23      	ldr	r2, [pc, #140]	; (260c4 <close+0x134>)
   26038:	011b      	lsls	r3, r3, #4
   2603a:	18d3      	adds	r3, r2, r3
   2603c:	330b      	adds	r3, #11
   2603e:	781b      	ldrb	r3, [r3, #0]
   26040:	b2db      	uxtb	r3, r3
   26042:	001a      	movs	r2, r3
   26044:	2301      	movs	r3, #1
   26046:	4013      	ands	r3, r2
   26048:	d003      	beq.n	26052 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2604a:	230e      	movs	r3, #14
   2604c:	18fb      	adds	r3, r7, r3
   2604e:	224e      	movs	r2, #78	; 0x4e
   26050:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   26052:	230f      	movs	r3, #15
   26054:	18fc      	adds	r4, r7, r3
   26056:	2308      	movs	r3, #8
   26058:	18fa      	adds	r2, r7, r3
   2605a:	230e      	movs	r3, #14
   2605c:	18fb      	adds	r3, r7, r3
   2605e:	7819      	ldrb	r1, [r3, #0]
   26060:	2300      	movs	r3, #0
   26062:	9302      	str	r3, [sp, #8]
   26064:	2300      	movs	r3, #0
   26066:	9301      	str	r3, [sp, #4]
   26068:	2300      	movs	r3, #0
   2606a:	9300      	str	r3, [sp, #0]
   2606c:	2304      	movs	r3, #4
   2606e:	2002      	movs	r0, #2
   26070:	4d15      	ldr	r5, [pc, #84]	; (260c8 <close+0x138>)
   26072:	47a8      	blx	r5
   26074:	0003      	movs	r3, r0
   26076:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26078:	230f      	movs	r3, #15
   2607a:	18fb      	adds	r3, r7, r3
   2607c:	781b      	ldrb	r3, [r3, #0]
   2607e:	b25b      	sxtb	r3, r3
   26080:	2b00      	cmp	r3, #0
   26082:	d003      	beq.n	2608c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26084:	230f      	movs	r3, #15
   26086:	18fb      	adds	r3, r7, r3
   26088:	22f7      	movs	r2, #247	; 0xf7
   2608a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   2608c:	1dfb      	adds	r3, r7, #7
   2608e:	781b      	ldrb	r3, [r3, #0]
   26090:	b25b      	sxtb	r3, r3
   26092:	011a      	lsls	r2, r3, #4
   26094:	4b0b      	ldr	r3, [pc, #44]	; (260c4 <close+0x134>)
   26096:	18d3      	adds	r3, r2, r3
   26098:	2210      	movs	r2, #16
   2609a:	2100      	movs	r1, #0
   2609c:	0018      	movs	r0, r3
   2609e:	4b0b      	ldr	r3, [pc, #44]	; (260cc <close+0x13c>)
   260a0:	4798      	blx	r3
	}
	return s8Ret;
   260a2:	230f      	movs	r3, #15
   260a4:	18fb      	adds	r3, r7, r3
   260a6:	781b      	ldrb	r3, [r3, #0]
   260a8:	b25b      	sxtb	r3, r3
}
   260aa:	0018      	movs	r0, r3
   260ac:	46bd      	mov	sp, r7
   260ae:	b004      	add	sp, #16
   260b0:	bdb0      	pop	{r4, r5, r7, pc}
   260b2:	46c0      	nop			; (mov r8, r8)
   260b4:	000399bc 	.word	0x000399bc
   260b8:	0001e399 	.word	0x0001e399
   260bc:	000399fc 	.word	0x000399fc
   260c0:	000399dc 	.word	0x000399dc
   260c4:	20005b40 	.word	0x20005b40
   260c8:	0002132d 	.word	0x0002132d
   260cc:	000210cd 	.word	0x000210cd

000260d0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   260d0:	b580      	push	{r7, lr}
   260d2:	b086      	sub	sp, #24
   260d4:	af00      	add	r7, sp, #0
   260d6:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   260d8:	2300      	movs	r3, #0
   260da:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   260dc:	2317      	movs	r3, #23
   260de:	18fb      	adds	r3, r7, r3
   260e0:	2200      	movs	r2, #0
   260e2:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   260e4:	2316      	movs	r3, #22
   260e6:	18fb      	adds	r3, r7, r3
   260e8:	2200      	movs	r2, #0
   260ea:	701a      	strb	r2, [r3, #0]
   260ec:	e060      	b.n	261b0 <nmi_inet_addr+0xe0>
	{
		j = 0;
   260ee:	2315      	movs	r3, #21
   260f0:	18fb      	adds	r3, r7, r3
   260f2:	2200      	movs	r2, #0
   260f4:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   260f6:	2314      	movs	r3, #20
   260f8:	18fb      	adds	r3, r7, r3
   260fa:	687a      	ldr	r2, [r7, #4]
   260fc:	7812      	ldrb	r2, [r2, #0]
   260fe:	701a      	strb	r2, [r3, #0]
			++j;
   26100:	2315      	movs	r3, #21
   26102:	18fb      	adds	r3, r7, r3
   26104:	2215      	movs	r2, #21
   26106:	18ba      	adds	r2, r7, r2
   26108:	7812      	ldrb	r2, [r2, #0]
   2610a:	3201      	adds	r2, #1
   2610c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2610e:	2315      	movs	r3, #21
   26110:	18fb      	adds	r3, r7, r3
   26112:	781b      	ldrb	r3, [r3, #0]
   26114:	2b04      	cmp	r3, #4
   26116:	d901      	bls.n	2611c <nmi_inet_addr+0x4c>
			{
				return 0;
   26118:	2300      	movs	r3, #0
   2611a:	e057      	b.n	261cc <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   2611c:	2314      	movs	r3, #20
   2611e:	18fb      	adds	r3, r7, r3
   26120:	781b      	ldrb	r3, [r3, #0]
   26122:	2b2e      	cmp	r3, #46	; 0x2e
   26124:	d004      	beq.n	26130 <nmi_inet_addr+0x60>
   26126:	2314      	movs	r3, #20
   26128:	18fb      	adds	r3, r7, r3
   2612a:	781b      	ldrb	r3, [r3, #0]
   2612c:	2b00      	cmp	r3, #0
   2612e:	d10d      	bne.n	2614c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   26130:	2316      	movs	r3, #22
   26132:	18fb      	adds	r3, r7, r3
   26134:	781b      	ldrb	r3, [r3, #0]
   26136:	220c      	movs	r2, #12
   26138:	18ba      	adds	r2, r7, r2
   2613a:	2117      	movs	r1, #23
   2613c:	1879      	adds	r1, r7, r1
   2613e:	7809      	ldrb	r1, [r1, #0]
   26140:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   26142:	2317      	movs	r3, #23
   26144:	18fb      	adds	r3, r7, r3
   26146:	2200      	movs	r2, #0
   26148:	701a      	strb	r2, [r3, #0]
   2614a:	e01d      	b.n	26188 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   2614c:	2314      	movs	r3, #20
   2614e:	18fb      	adds	r3, r7, r3
   26150:	781b      	ldrb	r3, [r3, #0]
   26152:	2b2f      	cmp	r3, #47	; 0x2f
   26154:	d916      	bls.n	26184 <nmi_inet_addr+0xb4>
   26156:	2314      	movs	r3, #20
   26158:	18fb      	adds	r3, r7, r3
   2615a:	781b      	ldrb	r3, [r3, #0]
   2615c:	2b39      	cmp	r3, #57	; 0x39
   2615e:	d811      	bhi.n	26184 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26160:	2317      	movs	r3, #23
   26162:	18fb      	adds	r3, r7, r3
   26164:	781b      	ldrb	r3, [r3, #0]
   26166:	1c1a      	adds	r2, r3, #0
   26168:	0092      	lsls	r2, r2, #2
   2616a:	18d3      	adds	r3, r2, r3
   2616c:	18db      	adds	r3, r3, r3
   2616e:	b2da      	uxtb	r2, r3
   26170:	2314      	movs	r3, #20
   26172:	18fb      	adds	r3, r7, r3
   26174:	781b      	ldrb	r3, [r3, #0]
   26176:	18d3      	adds	r3, r2, r3
   26178:	b2da      	uxtb	r2, r3
   2617a:	2317      	movs	r3, #23
   2617c:	18fb      	adds	r3, r7, r3
   2617e:	3a30      	subs	r2, #48	; 0x30
   26180:	701a      	strb	r2, [r3, #0]
   26182:	e001      	b.n	26188 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26184:	2300      	movs	r3, #0
   26186:	e021      	b.n	261cc <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26188:	687b      	ldr	r3, [r7, #4]
   2618a:	3301      	adds	r3, #1
   2618c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2618e:	2314      	movs	r3, #20
   26190:	18fb      	adds	r3, r7, r3
   26192:	781b      	ldrb	r3, [r3, #0]
   26194:	2b2e      	cmp	r3, #46	; 0x2e
   26196:	d004      	beq.n	261a2 <nmi_inet_addr+0xd2>
   26198:	2314      	movs	r3, #20
   2619a:	18fb      	adds	r3, r7, r3
   2619c:	781b      	ldrb	r3, [r3, #0]
   2619e:	2b00      	cmp	r3, #0
   261a0:	d1a9      	bne.n	260f6 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   261a2:	2316      	movs	r3, #22
   261a4:	18fb      	adds	r3, r7, r3
   261a6:	2216      	movs	r2, #22
   261a8:	18ba      	adds	r2, r7, r2
   261aa:	7812      	ldrb	r2, [r2, #0]
   261ac:	3201      	adds	r2, #1
   261ae:	701a      	strb	r2, [r3, #0]
   261b0:	2316      	movs	r3, #22
   261b2:	18fb      	adds	r3, r7, r3
   261b4:	781b      	ldrb	r3, [r3, #0]
   261b6:	2b03      	cmp	r3, #3
   261b8:	d999      	bls.n	260ee <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   261ba:	230c      	movs	r3, #12
   261bc:	18f9      	adds	r1, r7, r3
   261be:	2310      	movs	r3, #16
   261c0:	18fb      	adds	r3, r7, r3
   261c2:	2204      	movs	r2, #4
   261c4:	0018      	movs	r0, r3
   261c6:	4b03      	ldr	r3, [pc, #12]	; (261d4 <nmi_inet_addr+0x104>)
   261c8:	4798      	blx	r3
	return u32IP;
   261ca:	693b      	ldr	r3, [r7, #16]
}
   261cc:	0018      	movs	r0, r3
   261ce:	46bd      	mov	sp, r7
   261d0:	b006      	add	sp, #24
   261d2:	bd80      	pop	{r7, pc}
   261d4:	00021091 	.word	0x00021091

000261d8 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   261d8:	b5b0      	push	{r4, r5, r7, lr}
   261da:	b088      	sub	sp, #32
   261dc:	af04      	add	r7, sp, #16
   261de:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   261e0:	230f      	movs	r3, #15
   261e2:	18fb      	adds	r3, r7, r3
   261e4:	22fa      	movs	r2, #250	; 0xfa
   261e6:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   261e8:	687b      	ldr	r3, [r7, #4]
   261ea:	0018      	movs	r0, r3
   261ec:	4b14      	ldr	r3, [pc, #80]	; (26240 <gethostbyname+0x68>)
   261ee:	4798      	blx	r3
   261f0:	0003      	movs	r3, r0
   261f2:	001a      	movs	r2, r3
   261f4:	230e      	movs	r3, #14
   261f6:	18fb      	adds	r3, r7, r3
   261f8:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   261fa:	230e      	movs	r3, #14
   261fc:	18fb      	adds	r3, r7, r3
   261fe:	781b      	ldrb	r3, [r3, #0]
   26200:	2b40      	cmp	r3, #64	; 0x40
   26202:	d815      	bhi.n	26230 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26204:	230e      	movs	r3, #14
   26206:	18fb      	adds	r3, r7, r3
   26208:	781b      	ldrb	r3, [r3, #0]
   2620a:	b29b      	uxth	r3, r3
   2620c:	3301      	adds	r3, #1
   2620e:	b299      	uxth	r1, r3
   26210:	230f      	movs	r3, #15
   26212:	18fc      	adds	r4, r7, r3
   26214:	687a      	ldr	r2, [r7, #4]
   26216:	2300      	movs	r3, #0
   26218:	9302      	str	r3, [sp, #8]
   2621a:	2300      	movs	r3, #0
   2621c:	9301      	str	r3, [sp, #4]
   2621e:	2300      	movs	r3, #0
   26220:	9300      	str	r3, [sp, #0]
   26222:	000b      	movs	r3, r1
   26224:	214a      	movs	r1, #74	; 0x4a
   26226:	2002      	movs	r0, #2
   26228:	4d06      	ldr	r5, [pc, #24]	; (26244 <gethostbyname+0x6c>)
   2622a:	47a8      	blx	r5
   2622c:	0003      	movs	r3, r0
   2622e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26230:	230f      	movs	r3, #15
   26232:	18fb      	adds	r3, r7, r3
   26234:	781b      	ldrb	r3, [r3, #0]
   26236:	b25b      	sxtb	r3, r3
}
   26238:	0018      	movs	r0, r3
   2623a:	46bd      	mov	sp, r7
   2623c:	b004      	add	sp, #16
   2623e:	bdb0      	pop	{r4, r5, r7, pc}
   26240:	0002110b 	.word	0x0002110b
   26244:	0002132d 	.word	0x0002132d

00026248 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26248:	b580      	push	{r7, lr}
   2624a:	b082      	sub	sp, #8
   2624c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2624e:	003b      	movs	r3, r7
   26250:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26252:	687b      	ldr	r3, [r7, #4]
   26254:	22b9      	movs	r2, #185	; 0xb9
   26256:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26258:	4b13      	ldr	r3, [pc, #76]	; (262a8 <spi_flash_enter_low_power_mode+0x60>)
   2625a:	2100      	movs	r1, #0
   2625c:	0018      	movs	r0, r3
   2625e:	4b13      	ldr	r3, [pc, #76]	; (262ac <spi_flash_enter_low_power_mode+0x64>)
   26260:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26262:	687b      	ldr	r3, [r7, #4]
   26264:	781b      	ldrb	r3, [r3, #0]
   26266:	001a      	movs	r2, r3
   26268:	4b11      	ldr	r3, [pc, #68]	; (262b0 <spi_flash_enter_low_power_mode+0x68>)
   2626a:	0011      	movs	r1, r2
   2626c:	0018      	movs	r0, r3
   2626e:	4b0f      	ldr	r3, [pc, #60]	; (262ac <spi_flash_enter_low_power_mode+0x64>)
   26270:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26272:	4b10      	ldr	r3, [pc, #64]	; (262b4 <spi_flash_enter_low_power_mode+0x6c>)
   26274:	2101      	movs	r1, #1
   26276:	0018      	movs	r0, r3
   26278:	4b0c      	ldr	r3, [pc, #48]	; (262ac <spi_flash_enter_low_power_mode+0x64>)
   2627a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   2627c:	4b0e      	ldr	r3, [pc, #56]	; (262b8 <spi_flash_enter_low_power_mode+0x70>)
   2627e:	2100      	movs	r1, #0
   26280:	0018      	movs	r0, r3
   26282:	4b0a      	ldr	r3, [pc, #40]	; (262ac <spi_flash_enter_low_power_mode+0x64>)
   26284:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26286:	4b0d      	ldr	r3, [pc, #52]	; (262bc <spi_flash_enter_low_power_mode+0x74>)
   26288:	2181      	movs	r1, #129	; 0x81
   2628a:	0018      	movs	r0, r3
   2628c:	4b07      	ldr	r3, [pc, #28]	; (262ac <spi_flash_enter_low_power_mode+0x64>)
   2628e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26290:	46c0      	nop			; (mov r8, r8)
   26292:	4b0b      	ldr	r3, [pc, #44]	; (262c0 <spi_flash_enter_low_power_mode+0x78>)
   26294:	0018      	movs	r0, r3
   26296:	4b0b      	ldr	r3, [pc, #44]	; (262c4 <spi_flash_enter_low_power_mode+0x7c>)
   26298:	4798      	blx	r3
   2629a:	0003      	movs	r3, r0
   2629c:	2b01      	cmp	r3, #1
   2629e:	d1f8      	bne.n	26292 <spi_flash_enter_low_power_mode+0x4a>
}
   262a0:	46c0      	nop			; (mov r8, r8)
   262a2:	46bd      	mov	sp, r7
   262a4:	b002      	add	sp, #8
   262a6:	bd80      	pop	{r7, pc}
   262a8:	00010208 	.word	0x00010208
   262ac:	000230a9 	.word	0x000230a9
   262b0:	0001020c 	.word	0x0001020c
   262b4:	00010214 	.word	0x00010214
   262b8:	0001021c 	.word	0x0001021c
   262bc:	00010204 	.word	0x00010204
   262c0:	00010218 	.word	0x00010218
   262c4:	00023065 	.word	0x00023065

000262c8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   262c8:	b580      	push	{r7, lr}
   262ca:	b082      	sub	sp, #8
   262cc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   262ce:	003b      	movs	r3, r7
   262d0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   262d2:	687b      	ldr	r3, [r7, #4]
   262d4:	22ab      	movs	r2, #171	; 0xab
   262d6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   262d8:	4b13      	ldr	r3, [pc, #76]	; (26328 <spi_flash_leave_low_power_mode+0x60>)
   262da:	2100      	movs	r1, #0
   262dc:	0018      	movs	r0, r3
   262de:	4b13      	ldr	r3, [pc, #76]	; (2632c <spi_flash_leave_low_power_mode+0x64>)
   262e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   262e2:	687b      	ldr	r3, [r7, #4]
   262e4:	781b      	ldrb	r3, [r3, #0]
   262e6:	001a      	movs	r2, r3
   262e8:	4b11      	ldr	r3, [pc, #68]	; (26330 <spi_flash_leave_low_power_mode+0x68>)
   262ea:	0011      	movs	r1, r2
   262ec:	0018      	movs	r0, r3
   262ee:	4b0f      	ldr	r3, [pc, #60]	; (2632c <spi_flash_leave_low_power_mode+0x64>)
   262f0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   262f2:	4b10      	ldr	r3, [pc, #64]	; (26334 <spi_flash_leave_low_power_mode+0x6c>)
   262f4:	2101      	movs	r1, #1
   262f6:	0018      	movs	r0, r3
   262f8:	4b0c      	ldr	r3, [pc, #48]	; (2632c <spi_flash_leave_low_power_mode+0x64>)
   262fa:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   262fc:	4b0e      	ldr	r3, [pc, #56]	; (26338 <spi_flash_leave_low_power_mode+0x70>)
   262fe:	2100      	movs	r1, #0
   26300:	0018      	movs	r0, r3
   26302:	4b0a      	ldr	r3, [pc, #40]	; (2632c <spi_flash_leave_low_power_mode+0x64>)
   26304:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26306:	4b0d      	ldr	r3, [pc, #52]	; (2633c <spi_flash_leave_low_power_mode+0x74>)
   26308:	2181      	movs	r1, #129	; 0x81
   2630a:	0018      	movs	r0, r3
   2630c:	4b07      	ldr	r3, [pc, #28]	; (2632c <spi_flash_leave_low_power_mode+0x64>)
   2630e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26310:	46c0      	nop			; (mov r8, r8)
   26312:	4b0b      	ldr	r3, [pc, #44]	; (26340 <spi_flash_leave_low_power_mode+0x78>)
   26314:	0018      	movs	r0, r3
   26316:	4b0b      	ldr	r3, [pc, #44]	; (26344 <spi_flash_leave_low_power_mode+0x7c>)
   26318:	4798      	blx	r3
   2631a:	0003      	movs	r3, r0
   2631c:	2b01      	cmp	r3, #1
   2631e:	d1f8      	bne.n	26312 <spi_flash_leave_low_power_mode+0x4a>
}
   26320:	46c0      	nop			; (mov r8, r8)
   26322:	46bd      	mov	sp, r7
   26324:	b002      	add	sp, #8
   26326:	bd80      	pop	{r7, pc}
   26328:	00010208 	.word	0x00010208
   2632c:	000230a9 	.word	0x000230a9
   26330:	0001020c 	.word	0x0001020c
   26334:	00010214 	.word	0x00010214
   26338:	0001021c 	.word	0x0001021c
   2633c:	00010204 	.word	0x00010204
   26340:	00010218 	.word	0x00010218
   26344:	00023065 	.word	0x00023065

00026348 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26348:	b590      	push	{r4, r7, lr}
   2634a:	b085      	sub	sp, #20
   2634c:	af00      	add	r7, sp, #0
   2634e:	0002      	movs	r2, r0
   26350:	1dfb      	adds	r3, r7, #7
   26352:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26354:	230f      	movs	r3, #15
   26356:	18fb      	adds	r3, r7, r3
   26358:	2200      	movs	r2, #0
   2635a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   2635c:	4b24      	ldr	r3, [pc, #144]	; (263f0 <spi_flash_enable+0xa8>)
   2635e:	4798      	blx	r3
   26360:	0003      	movs	r3, r0
   26362:	051b      	lsls	r3, r3, #20
   26364:	0d1b      	lsrs	r3, r3, #20
   26366:	4a23      	ldr	r2, [pc, #140]	; (263f4 <spi_flash_enable+0xac>)
   26368:	4293      	cmp	r3, r2
   2636a:	d938      	bls.n	263de <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   2636c:	230f      	movs	r3, #15
   2636e:	18fc      	adds	r4, r7, r3
   26370:	2308      	movs	r3, #8
   26372:	18fb      	adds	r3, r7, r3
   26374:	4a20      	ldr	r2, [pc, #128]	; (263f8 <spi_flash_enable+0xb0>)
   26376:	0019      	movs	r1, r3
   26378:	0010      	movs	r0, r2
   2637a:	4b20      	ldr	r3, [pc, #128]	; (263fc <spi_flash_enable+0xb4>)
   2637c:	4798      	blx	r3
   2637e:	0003      	movs	r3, r0
   26380:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26382:	230f      	movs	r3, #15
   26384:	18fb      	adds	r3, r7, r3
   26386:	781b      	ldrb	r3, [r3, #0]
   26388:	b25b      	sxtb	r3, r3
   2638a:	2b00      	cmp	r3, #0
   2638c:	d126      	bne.n	263dc <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2638e:	68bb      	ldr	r3, [r7, #8]
   26390:	4a1b      	ldr	r2, [pc, #108]	; (26400 <spi_flash_enable+0xb8>)
   26392:	4013      	ands	r3, r2
   26394:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26396:	68bb      	ldr	r3, [r7, #8]
   26398:	4a1a      	ldr	r2, [pc, #104]	; (26404 <spi_flash_enable+0xbc>)
   2639a:	4313      	orrs	r3, r2
   2639c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2639e:	68bb      	ldr	r3, [r7, #8]
   263a0:	4a15      	ldr	r2, [pc, #84]	; (263f8 <spi_flash_enable+0xb0>)
   263a2:	0019      	movs	r1, r3
   263a4:	0010      	movs	r0, r2
   263a6:	4b18      	ldr	r3, [pc, #96]	; (26408 <spi_flash_enable+0xc0>)
   263a8:	4798      	blx	r3
		if(enable) {
   263aa:	1dfb      	adds	r3, r7, #7
   263ac:	781b      	ldrb	r3, [r3, #0]
   263ae:	2b00      	cmp	r3, #0
   263b0:	d002      	beq.n	263b8 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   263b2:	4b16      	ldr	r3, [pc, #88]	; (2640c <spi_flash_enable+0xc4>)
   263b4:	4798      	blx	r3
   263b6:	e001      	b.n	263bc <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   263b8:	4b15      	ldr	r3, [pc, #84]	; (26410 <spi_flash_enable+0xc8>)
   263ba:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   263bc:	68bb      	ldr	r3, [r7, #8]
   263be:	4a10      	ldr	r2, [pc, #64]	; (26400 <spi_flash_enable+0xb8>)
   263c0:	4013      	ands	r3, r2
   263c2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   263c4:	68bb      	ldr	r3, [r7, #8]
   263c6:	2280      	movs	r2, #128	; 0x80
   263c8:	0252      	lsls	r2, r2, #9
   263ca:	4313      	orrs	r3, r2
   263cc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   263ce:	68bb      	ldr	r3, [r7, #8]
   263d0:	4a09      	ldr	r2, [pc, #36]	; (263f8 <spi_flash_enable+0xb0>)
   263d2:	0019      	movs	r1, r3
   263d4:	0010      	movs	r0, r2
   263d6:	4b0c      	ldr	r3, [pc, #48]	; (26408 <spi_flash_enable+0xc0>)
   263d8:	4798      	blx	r3
   263da:	e000      	b.n	263de <spi_flash_enable+0x96>
			goto ERR1;
   263dc:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   263de:	230f      	movs	r3, #15
   263e0:	18fb      	adds	r3, r7, r3
   263e2:	781b      	ldrb	r3, [r3, #0]
   263e4:	b25b      	sxtb	r3, r3
}
   263e6:	0018      	movs	r0, r3
   263e8:	46bd      	mov	sp, r7
   263ea:	b005      	add	sp, #20
   263ec:	bd90      	pop	{r4, r7, pc}
   263ee:	46c0      	nop			; (mov r8, r8)
   263f0:	00022985 	.word	0x00022985
   263f4:	0000039f 	.word	0x0000039f
   263f8:	00001410 	.word	0x00001410
   263fc:	00023085 	.word	0x00023085
   26400:	f8888fff 	.word	0xf8888fff
   26404:	01111000 	.word	0x01111000
   26408:	000230a9 	.word	0x000230a9
   2640c:	000262c9 	.word	0x000262c9
   26410:	00026249 	.word	0x00026249

00026414 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26414:	b580      	push	{r7, lr}
   26416:	b084      	sub	sp, #16
   26418:	af00      	add	r7, sp, #0
   2641a:	0002      	movs	r2, r0
   2641c:	1dfb      	adds	r3, r7, #7
   2641e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26420:	1dfb      	adds	r3, r7, #7
   26422:	781b      	ldrb	r3, [r3, #0]
   26424:	2b00      	cmp	r3, #0
   26426:	d108      	bne.n	2643a <mem_test_unit_ready+0x26>
   26428:	1dfb      	adds	r3, r7, #7
   2642a:	781a      	ldrb	r2, [r3, #0]
   2642c:	4b08      	ldr	r3, [pc, #32]	; (26450 <mem_test_unit_ready+0x3c>)
   2642e:	0152      	lsls	r2, r2, #5
   26430:	58d3      	ldr	r3, [r2, r3]
   26432:	4798      	blx	r3
   26434:	0003      	movs	r3, r0
   26436:	001a      	movs	r2, r3
   26438:	e000      	b.n	2643c <mem_test_unit_ready+0x28>
   2643a:	2201      	movs	r2, #1
  status =
   2643c:	230f      	movs	r3, #15
   2643e:	18fb      	adds	r3, r7, r3
   26440:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26442:	230f      	movs	r3, #15
   26444:	18fb      	adds	r3, r7, r3
   26446:	781b      	ldrb	r3, [r3, #0]
}
   26448:	0018      	movs	r0, r3
   2644a:	46bd      	mov	sp, r7
   2644c:	b004      	add	sp, #16
   2644e:	bd80      	pop	{r7, pc}
   26450:	00039a88 	.word	0x00039a88

00026454 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26454:	b580      	push	{r7, lr}
   26456:	b084      	sub	sp, #16
   26458:	af00      	add	r7, sp, #0
   2645a:	0002      	movs	r2, r0
   2645c:	6039      	str	r1, [r7, #0]
   2645e:	1dfb      	adds	r3, r7, #7
   26460:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26462:	1dfb      	adds	r3, r7, #7
   26464:	781b      	ldrb	r3, [r3, #0]
   26466:	2b00      	cmp	r3, #0
   26468:	d10c      	bne.n	26484 <mem_read_capacity+0x30>
   2646a:	1dfb      	adds	r3, r7, #7
   2646c:	781b      	ldrb	r3, [r3, #0]
   2646e:	4a0b      	ldr	r2, [pc, #44]	; (2649c <mem_read_capacity+0x48>)
   26470:	015b      	lsls	r3, r3, #5
   26472:	18d3      	adds	r3, r2, r3
   26474:	3304      	adds	r3, #4
   26476:	681b      	ldr	r3, [r3, #0]
   26478:	683a      	ldr	r2, [r7, #0]
   2647a:	0010      	movs	r0, r2
   2647c:	4798      	blx	r3
   2647e:	0003      	movs	r3, r0
   26480:	001a      	movs	r2, r3
   26482:	e000      	b.n	26486 <mem_read_capacity+0x32>
   26484:	2201      	movs	r2, #1
  status =
   26486:	230f      	movs	r3, #15
   26488:	18fb      	adds	r3, r7, r3
   2648a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2648c:	230f      	movs	r3, #15
   2648e:	18fb      	adds	r3, r7, r3
   26490:	781b      	ldrb	r3, [r3, #0]
}
   26492:	0018      	movs	r0, r3
   26494:	46bd      	mov	sp, r7
   26496:	b004      	add	sp, #16
   26498:	bd80      	pop	{r7, pc}
   2649a:	46c0      	nop			; (mov r8, r8)
   2649c:	00039a88 	.word	0x00039a88

000264a0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   264a0:	b580      	push	{r7, lr}
   264a2:	b084      	sub	sp, #16
   264a4:	af00      	add	r7, sp, #0
   264a6:	0002      	movs	r2, r0
   264a8:	1dfb      	adds	r3, r7, #7
   264aa:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   264ac:	1dfb      	adds	r3, r7, #7
   264ae:	781b      	ldrb	r3, [r3, #0]
   264b0:	425a      	negs	r2, r3
   264b2:	4153      	adcs	r3, r2
   264b4:	b2da      	uxtb	r2, r3
  sector_size =
   264b6:	230f      	movs	r3, #15
   264b8:	18fb      	adds	r3, r7, r3
   264ba:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   264bc:	230f      	movs	r3, #15
   264be:	18fb      	adds	r3, r7, r3
   264c0:	781b      	ldrb	r3, [r3, #0]
}
   264c2:	0018      	movs	r0, r3
   264c4:	46bd      	mov	sp, r7
   264c6:	b004      	add	sp, #16
   264c8:	bd80      	pop	{r7, pc}
	...

000264cc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   264cc:	b580      	push	{r7, lr}
   264ce:	b084      	sub	sp, #16
   264d0:	af00      	add	r7, sp, #0
   264d2:	0002      	movs	r2, r0
   264d4:	1dfb      	adds	r3, r7, #7
   264d6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   264d8:	1dfb      	adds	r3, r7, #7
   264da:	781b      	ldrb	r3, [r3, #0]
   264dc:	2b00      	cmp	r3, #0
   264de:	d109      	bne.n	264f4 <mem_wr_protect+0x28>
   264e0:	1dfb      	adds	r3, r7, #7
   264e2:	781b      	ldrb	r3, [r3, #0]
   264e4:	4a0a      	ldr	r2, [pc, #40]	; (26510 <mem_wr_protect+0x44>)
   264e6:	015b      	lsls	r3, r3, #5
   264e8:	18d3      	adds	r3, r2, r3
   264ea:	330c      	adds	r3, #12
   264ec:	681b      	ldr	r3, [r3, #0]
   264ee:	4798      	blx	r3
   264f0:	1e03      	subs	r3, r0, #0
   264f2:	d001      	beq.n	264f8 <mem_wr_protect+0x2c>
   264f4:	2201      	movs	r2, #1
   264f6:	e000      	b.n	264fa <mem_wr_protect+0x2e>
   264f8:	2200      	movs	r2, #0
  wr_protect =
   264fa:	230f      	movs	r3, #15
   264fc:	18fb      	adds	r3, r7, r3
   264fe:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26500:	230f      	movs	r3, #15
   26502:	18fb      	adds	r3, r7, r3
   26504:	781b      	ldrb	r3, [r3, #0]
}
   26506:	0018      	movs	r0, r3
   26508:	46bd      	mov	sp, r7
   2650a:	b004      	add	sp, #16
   2650c:	bd80      	pop	{r7, pc}
   2650e:	46c0      	nop			; (mov r8, r8)
   26510:	00039a88 	.word	0x00039a88

00026514 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26514:	b580      	push	{r7, lr}
   26516:	b086      	sub	sp, #24
   26518:	af00      	add	r7, sp, #0
   2651a:	60b9      	str	r1, [r7, #8]
   2651c:	607a      	str	r2, [r7, #4]
   2651e:	230f      	movs	r3, #15
   26520:	18fb      	adds	r3, r7, r3
   26522:	1c02      	adds	r2, r0, #0
   26524:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26526:	230f      	movs	r3, #15
   26528:	18fb      	adds	r3, r7, r3
   2652a:	781b      	ldrb	r3, [r3, #0]
   2652c:	2b00      	cmp	r3, #0
   2652e:	d10e      	bne.n	2654e <memory_2_ram+0x3a>
   26530:	230f      	movs	r3, #15
   26532:	18fb      	adds	r3, r7, r3
   26534:	781b      	ldrb	r3, [r3, #0]
   26536:	4a0b      	ldr	r2, [pc, #44]	; (26564 <memory_2_ram+0x50>)
   26538:	015b      	lsls	r3, r3, #5
   2653a:	18d3      	adds	r3, r2, r3
   2653c:	3314      	adds	r3, #20
   2653e:	681b      	ldr	r3, [r3, #0]
   26540:	6879      	ldr	r1, [r7, #4]
   26542:	68ba      	ldr	r2, [r7, #8]
   26544:	0010      	movs	r0, r2
   26546:	4798      	blx	r3
   26548:	0003      	movs	r3, r0
   2654a:	001a      	movs	r2, r3
   2654c:	e000      	b.n	26550 <memory_2_ram+0x3c>
   2654e:	2201      	movs	r2, #1
  status =
   26550:	2317      	movs	r3, #23
   26552:	18fb      	adds	r3, r7, r3
   26554:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26556:	2317      	movs	r3, #23
   26558:	18fb      	adds	r3, r7, r3
   2655a:	781b      	ldrb	r3, [r3, #0]
}
   2655c:	0018      	movs	r0, r3
   2655e:	46bd      	mov	sp, r7
   26560:	b006      	add	sp, #24
   26562:	bd80      	pop	{r7, pc}
   26564:	00039a88 	.word	0x00039a88

00026568 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26568:	b580      	push	{r7, lr}
   2656a:	b086      	sub	sp, #24
   2656c:	af00      	add	r7, sp, #0
   2656e:	60b9      	str	r1, [r7, #8]
   26570:	607a      	str	r2, [r7, #4]
   26572:	230f      	movs	r3, #15
   26574:	18fb      	adds	r3, r7, r3
   26576:	1c02      	adds	r2, r0, #0
   26578:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2657a:	230f      	movs	r3, #15
   2657c:	18fb      	adds	r3, r7, r3
   2657e:	781b      	ldrb	r3, [r3, #0]
   26580:	2b00      	cmp	r3, #0
   26582:	d10e      	bne.n	265a2 <ram_2_memory+0x3a>
   26584:	230f      	movs	r3, #15
   26586:	18fb      	adds	r3, r7, r3
   26588:	781b      	ldrb	r3, [r3, #0]
   2658a:	4a0b      	ldr	r2, [pc, #44]	; (265b8 <ram_2_memory+0x50>)
   2658c:	015b      	lsls	r3, r3, #5
   2658e:	18d3      	adds	r3, r2, r3
   26590:	3318      	adds	r3, #24
   26592:	681b      	ldr	r3, [r3, #0]
   26594:	6879      	ldr	r1, [r7, #4]
   26596:	68ba      	ldr	r2, [r7, #8]
   26598:	0010      	movs	r0, r2
   2659a:	4798      	blx	r3
   2659c:	0003      	movs	r3, r0
   2659e:	001a      	movs	r2, r3
   265a0:	e000      	b.n	265a4 <ram_2_memory+0x3c>
   265a2:	2201      	movs	r2, #1
  status =
   265a4:	2317      	movs	r3, #23
   265a6:	18fb      	adds	r3, r7, r3
   265a8:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   265aa:	2317      	movs	r3, #23
   265ac:	18fb      	adds	r3, r7, r3
   265ae:	781b      	ldrb	r3, [r3, #0]
}
   265b0:	0018      	movs	r0, r3
   265b2:	46bd      	mov	sp, r7
   265b4:	b006      	add	sp, #24
   265b6:	bd80      	pop	{r7, pc}
   265b8:	00039a88 	.word	0x00039a88

000265bc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   265bc:	b580      	push	{r7, lr}
   265be:	b082      	sub	sp, #8
   265c0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   265c2:	4b10      	ldr	r3, [pc, #64]	; (26604 <cpu_irq_enter_critical+0x48>)
   265c4:	681b      	ldr	r3, [r3, #0]
   265c6:	2b00      	cmp	r3, #0
   265c8:	d112      	bne.n	265f0 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   265ca:	f3ef 8310 	mrs	r3, PRIMASK
   265ce:	607b      	str	r3, [r7, #4]
  return(result);
   265d0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   265d2:	2b00      	cmp	r3, #0
   265d4:	d109      	bne.n	265ea <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   265d6:	b672      	cpsid	i
   265d8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   265dc:	4b0a      	ldr	r3, [pc, #40]	; (26608 <cpu_irq_enter_critical+0x4c>)
   265de:	2200      	movs	r2, #0
   265e0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   265e2:	4b0a      	ldr	r3, [pc, #40]	; (2660c <cpu_irq_enter_critical+0x50>)
   265e4:	2201      	movs	r2, #1
   265e6:	701a      	strb	r2, [r3, #0]
   265e8:	e002      	b.n	265f0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   265ea:	4b08      	ldr	r3, [pc, #32]	; (2660c <cpu_irq_enter_critical+0x50>)
   265ec:	2200      	movs	r2, #0
   265ee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   265f0:	4b04      	ldr	r3, [pc, #16]	; (26604 <cpu_irq_enter_critical+0x48>)
   265f2:	681b      	ldr	r3, [r3, #0]
   265f4:	1c5a      	adds	r2, r3, #1
   265f6:	4b03      	ldr	r3, [pc, #12]	; (26604 <cpu_irq_enter_critical+0x48>)
   265f8:	601a      	str	r2, [r3, #0]
}
   265fa:	46c0      	nop			; (mov r8, r8)
   265fc:	46bd      	mov	sp, r7
   265fe:	b002      	add	sp, #8
   26600:	bd80      	pop	{r7, pc}
   26602:	46c0      	nop			; (mov r8, r8)
   26604:	200042b4 	.word	0x200042b4
   26608:	20000126 	.word	0x20000126
   2660c:	200042b8 	.word	0x200042b8

00026610 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26610:	b580      	push	{r7, lr}
   26612:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26614:	4b0b      	ldr	r3, [pc, #44]	; (26644 <cpu_irq_leave_critical+0x34>)
   26616:	681b      	ldr	r3, [r3, #0]
   26618:	1e5a      	subs	r2, r3, #1
   2661a:	4b0a      	ldr	r3, [pc, #40]	; (26644 <cpu_irq_leave_critical+0x34>)
   2661c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   2661e:	4b09      	ldr	r3, [pc, #36]	; (26644 <cpu_irq_leave_critical+0x34>)
   26620:	681b      	ldr	r3, [r3, #0]
   26622:	2b00      	cmp	r3, #0
   26624:	d10a      	bne.n	2663c <cpu_irq_leave_critical+0x2c>
   26626:	4b08      	ldr	r3, [pc, #32]	; (26648 <cpu_irq_leave_critical+0x38>)
   26628:	781b      	ldrb	r3, [r3, #0]
   2662a:	b2db      	uxtb	r3, r3
   2662c:	2b00      	cmp	r3, #0
   2662e:	d005      	beq.n	2663c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26630:	4b06      	ldr	r3, [pc, #24]	; (2664c <cpu_irq_leave_critical+0x3c>)
   26632:	2201      	movs	r2, #1
   26634:	701a      	strb	r2, [r3, #0]
   26636:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2663a:	b662      	cpsie	i
	}
}
   2663c:	46c0      	nop			; (mov r8, r8)
   2663e:	46bd      	mov	sp, r7
   26640:	bd80      	pop	{r7, pc}
   26642:	46c0      	nop			; (mov r8, r8)
   26644:	200042b4 	.word	0x200042b4
   26648:	200042b8 	.word	0x200042b8
   2664c:	20000126 	.word	0x20000126

00026650 <system_pinmux_get_group_from_gpio_pin>:
{
   26650:	b580      	push	{r7, lr}
   26652:	b084      	sub	sp, #16
   26654:	af00      	add	r7, sp, #0
   26656:	0002      	movs	r2, r0
   26658:	1dfb      	adds	r3, r7, #7
   2665a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2665c:	230f      	movs	r3, #15
   2665e:	18fb      	adds	r3, r7, r3
   26660:	1dfa      	adds	r2, r7, #7
   26662:	7812      	ldrb	r2, [r2, #0]
   26664:	09d2      	lsrs	r2, r2, #7
   26666:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26668:	230e      	movs	r3, #14
   2666a:	18fb      	adds	r3, r7, r3
   2666c:	1dfa      	adds	r2, r7, #7
   2666e:	7812      	ldrb	r2, [r2, #0]
   26670:	0952      	lsrs	r2, r2, #5
   26672:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26674:	4b0d      	ldr	r3, [pc, #52]	; (266ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26676:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26678:	230f      	movs	r3, #15
   2667a:	18fb      	adds	r3, r7, r3
   2667c:	781b      	ldrb	r3, [r3, #0]
   2667e:	2b00      	cmp	r3, #0
   26680:	d10f      	bne.n	266a2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26682:	230f      	movs	r3, #15
   26684:	18fb      	adds	r3, r7, r3
   26686:	781b      	ldrb	r3, [r3, #0]
   26688:	009b      	lsls	r3, r3, #2
   2668a:	2210      	movs	r2, #16
   2668c:	4694      	mov	ip, r2
   2668e:	44bc      	add	ip, r7
   26690:	4463      	add	r3, ip
   26692:	3b08      	subs	r3, #8
   26694:	681a      	ldr	r2, [r3, #0]
   26696:	230e      	movs	r3, #14
   26698:	18fb      	adds	r3, r7, r3
   2669a:	781b      	ldrb	r3, [r3, #0]
   2669c:	01db      	lsls	r3, r3, #7
   2669e:	18d3      	adds	r3, r2, r3
   266a0:	e000      	b.n	266a4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   266a2:	2300      	movs	r3, #0
}
   266a4:	0018      	movs	r0, r3
   266a6:	46bd      	mov	sp, r7
   266a8:	b004      	add	sp, #16
   266aa:	bd80      	pop	{r7, pc}
   266ac:	41004400 	.word	0x41004400

000266b0 <port_get_group_from_gpio_pin>:
{
   266b0:	b580      	push	{r7, lr}
   266b2:	b082      	sub	sp, #8
   266b4:	af00      	add	r7, sp, #0
   266b6:	0002      	movs	r2, r0
   266b8:	1dfb      	adds	r3, r7, #7
   266ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   266bc:	1dfb      	adds	r3, r7, #7
   266be:	781b      	ldrb	r3, [r3, #0]
   266c0:	0018      	movs	r0, r3
   266c2:	4b03      	ldr	r3, [pc, #12]	; (266d0 <port_get_group_from_gpio_pin+0x20>)
   266c4:	4798      	blx	r3
   266c6:	0003      	movs	r3, r0
}
   266c8:	0018      	movs	r0, r3
   266ca:	46bd      	mov	sp, r7
   266cc:	b002      	add	sp, #8
   266ce:	bd80      	pop	{r7, pc}
   266d0:	00026651 	.word	0x00026651

000266d4 <port_get_config_defaults>:
{
   266d4:	b580      	push	{r7, lr}
   266d6:	b082      	sub	sp, #8
   266d8:	af00      	add	r7, sp, #0
   266da:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   266dc:	687b      	ldr	r3, [r7, #4]
   266de:	2200      	movs	r2, #0
   266e0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   266e2:	687b      	ldr	r3, [r7, #4]
   266e4:	2201      	movs	r2, #1
   266e6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   266e8:	687b      	ldr	r3, [r7, #4]
   266ea:	2200      	movs	r2, #0
   266ec:	709a      	strb	r2, [r3, #2]
}
   266ee:	46c0      	nop			; (mov r8, r8)
   266f0:	46bd      	mov	sp, r7
   266f2:	b002      	add	sp, #8
   266f4:	bd80      	pop	{r7, pc}
	...

000266f8 <port_pin_set_output_level>:
{
   266f8:	b580      	push	{r7, lr}
   266fa:	b084      	sub	sp, #16
   266fc:	af00      	add	r7, sp, #0
   266fe:	0002      	movs	r2, r0
   26700:	1dfb      	adds	r3, r7, #7
   26702:	701a      	strb	r2, [r3, #0]
   26704:	1dbb      	adds	r3, r7, #6
   26706:	1c0a      	adds	r2, r1, #0
   26708:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2670a:	1dfb      	adds	r3, r7, #7
   2670c:	781b      	ldrb	r3, [r3, #0]
   2670e:	0018      	movs	r0, r3
   26710:	4b0d      	ldr	r3, [pc, #52]	; (26748 <port_pin_set_output_level+0x50>)
   26712:	4798      	blx	r3
   26714:	0003      	movs	r3, r0
   26716:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26718:	1dfb      	adds	r3, r7, #7
   2671a:	781b      	ldrb	r3, [r3, #0]
   2671c:	221f      	movs	r2, #31
   2671e:	4013      	ands	r3, r2
   26720:	2201      	movs	r2, #1
   26722:	409a      	lsls	r2, r3
   26724:	0013      	movs	r3, r2
   26726:	60bb      	str	r3, [r7, #8]
	if (level) {
   26728:	1dbb      	adds	r3, r7, #6
   2672a:	781b      	ldrb	r3, [r3, #0]
   2672c:	2b00      	cmp	r3, #0
   2672e:	d003      	beq.n	26738 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26730:	68fb      	ldr	r3, [r7, #12]
   26732:	68ba      	ldr	r2, [r7, #8]
   26734:	619a      	str	r2, [r3, #24]
}
   26736:	e002      	b.n	2673e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26738:	68fb      	ldr	r3, [r7, #12]
   2673a:	68ba      	ldr	r2, [r7, #8]
   2673c:	615a      	str	r2, [r3, #20]
}
   2673e:	46c0      	nop			; (mov r8, r8)
   26740:	46bd      	mov	sp, r7
   26742:	b004      	add	sp, #16
   26744:	bd80      	pop	{r7, pc}
   26746:	46c0      	nop			; (mov r8, r8)
   26748:	000266b1 	.word	0x000266b1

0002674c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   2674c:	b580      	push	{r7, lr}
   2674e:	b082      	sub	sp, #8
   26750:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   26752:	1d3b      	adds	r3, r7, #4
   26754:	0018      	movs	r0, r3
   26756:	4b0e      	ldr	r3, [pc, #56]	; (26790 <system_board_init+0x44>)
   26758:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2675a:	1d3b      	adds	r3, r7, #4
   2675c:	2201      	movs	r2, #1
   2675e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26760:	1d3b      	adds	r3, r7, #4
   26762:	0019      	movs	r1, r3
   26764:	2017      	movs	r0, #23
   26766:	4b0b      	ldr	r3, [pc, #44]	; (26794 <system_board_init+0x48>)
   26768:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2676a:	2101      	movs	r1, #1
   2676c:	2017      	movs	r0, #23
   2676e:	4b0a      	ldr	r3, [pc, #40]	; (26798 <system_board_init+0x4c>)
   26770:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26772:	1d3b      	adds	r3, r7, #4
   26774:	2200      	movs	r2, #0
   26776:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26778:	1d3b      	adds	r3, r7, #4
   2677a:	2201      	movs	r2, #1
   2677c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2677e:	1d3b      	adds	r3, r7, #4
   26780:	0019      	movs	r1, r3
   26782:	2037      	movs	r0, #55	; 0x37
   26784:	4b03      	ldr	r3, [pc, #12]	; (26794 <system_board_init+0x48>)
   26786:	4798      	blx	r3
}
   26788:	46c0      	nop			; (mov r8, r8)
   2678a:	46bd      	mov	sp, r7
   2678c:	b002      	add	sp, #8
   2678e:	bd80      	pop	{r7, pc}
   26790:	000266d5 	.word	0x000266d5
   26794:	00026dc1 	.word	0x00026dc1
   26798:	000266f9 	.word	0x000266f9

0002679c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   2679c:	b580      	push	{r7, lr}
   2679e:	b084      	sub	sp, #16
   267a0:	af00      	add	r7, sp, #0
   267a2:	0002      	movs	r2, r0
   267a4:	1dfb      	adds	r3, r7, #7
   267a6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   267a8:	230f      	movs	r3, #15
   267aa:	18fb      	adds	r3, r7, r3
   267ac:	1dfa      	adds	r2, r7, #7
   267ae:	7812      	ldrb	r2, [r2, #0]
   267b0:	0952      	lsrs	r2, r2, #5
   267b2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   267b4:	230f      	movs	r3, #15
   267b6:	18fb      	adds	r3, r7, r3
   267b8:	781b      	ldrb	r3, [r3, #0]
   267ba:	2b00      	cmp	r3, #0
   267bc:	d10c      	bne.n	267d8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   267be:	4b09      	ldr	r3, [pc, #36]	; (267e4 <_extint_get_eic_from_channel+0x48>)
   267c0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   267c2:	230f      	movs	r3, #15
   267c4:	18fb      	adds	r3, r7, r3
   267c6:	781b      	ldrb	r3, [r3, #0]
   267c8:	009b      	lsls	r3, r3, #2
   267ca:	2210      	movs	r2, #16
   267cc:	4694      	mov	ip, r2
   267ce:	44bc      	add	ip, r7
   267d0:	4463      	add	r3, ip
   267d2:	3b08      	subs	r3, #8
   267d4:	681b      	ldr	r3, [r3, #0]
   267d6:	e000      	b.n	267da <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   267d8:	2300      	movs	r3, #0
	}
}
   267da:	0018      	movs	r0, r3
   267dc:	46bd      	mov	sp, r7
   267de:	b004      	add	sp, #16
   267e0:	bd80      	pop	{r7, pc}
   267e2:	46c0      	nop			; (mov r8, r8)
   267e4:	40001800 	.word	0x40001800

000267e8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   267e8:	b580      	push	{r7, lr}
   267ea:	b084      	sub	sp, #16
   267ec:	af00      	add	r7, sp, #0
   267ee:	0002      	movs	r2, r0
   267f0:	1dfb      	adds	r3, r7, #7
   267f2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   267f4:	1dfb      	adds	r3, r7, #7
   267f6:	781b      	ldrb	r3, [r3, #0]
   267f8:	0018      	movs	r0, r3
   267fa:	4b0b      	ldr	r3, [pc, #44]	; (26828 <extint_chan_is_detected+0x40>)
   267fc:	4798      	blx	r3
   267fe:	0003      	movs	r3, r0
   26800:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26802:	1dfb      	adds	r3, r7, #7
   26804:	781b      	ldrb	r3, [r3, #0]
   26806:	221f      	movs	r2, #31
   26808:	4013      	ands	r3, r2
   2680a:	2201      	movs	r2, #1
   2680c:	409a      	lsls	r2, r3
   2680e:	0013      	movs	r3, r2
   26810:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   26812:	68fb      	ldr	r3, [r7, #12]
   26814:	691b      	ldr	r3, [r3, #16]
   26816:	68ba      	ldr	r2, [r7, #8]
   26818:	4013      	ands	r3, r2
   2681a:	1e5a      	subs	r2, r3, #1
   2681c:	4193      	sbcs	r3, r2
   2681e:	b2db      	uxtb	r3, r3
}
   26820:	0018      	movs	r0, r3
   26822:	46bd      	mov	sp, r7
   26824:	b004      	add	sp, #16
   26826:	bd80      	pop	{r7, pc}
   26828:	0002679d 	.word	0x0002679d

0002682c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   2682c:	b580      	push	{r7, lr}
   2682e:	b084      	sub	sp, #16
   26830:	af00      	add	r7, sp, #0
   26832:	0002      	movs	r2, r0
   26834:	1dfb      	adds	r3, r7, #7
   26836:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26838:	1dfb      	adds	r3, r7, #7
   2683a:	781b      	ldrb	r3, [r3, #0]
   2683c:	0018      	movs	r0, r3
   2683e:	4b09      	ldr	r3, [pc, #36]	; (26864 <extint_chan_clear_detected+0x38>)
   26840:	4798      	blx	r3
   26842:	0003      	movs	r3, r0
   26844:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26846:	1dfb      	adds	r3, r7, #7
   26848:	781b      	ldrb	r3, [r3, #0]
   2684a:	221f      	movs	r2, #31
   2684c:	4013      	ands	r3, r2
   2684e:	2201      	movs	r2, #1
   26850:	409a      	lsls	r2, r3
   26852:	0013      	movs	r3, r2
   26854:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26856:	68fb      	ldr	r3, [r7, #12]
   26858:	68ba      	ldr	r2, [r7, #8]
   2685a:	611a      	str	r2, [r3, #16]
}
   2685c:	46c0      	nop			; (mov r8, r8)
   2685e:	46bd      	mov	sp, r7
   26860:	b004      	add	sp, #16
   26862:	bd80      	pop	{r7, pc}
   26864:	0002679d 	.word	0x0002679d

00026868 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26868:	b580      	push	{r7, lr}
   2686a:	b082      	sub	sp, #8
   2686c:	af00      	add	r7, sp, #0
   2686e:	6078      	str	r0, [r7, #4]
   26870:	0008      	movs	r0, r1
   26872:	0011      	movs	r1, r2
   26874:	1cfb      	adds	r3, r7, #3
   26876:	1c02      	adds	r2, r0, #0
   26878:	701a      	strb	r2, [r3, #0]
   2687a:	1cbb      	adds	r3, r7, #2
   2687c:	1c0a      	adds	r2, r1, #0
   2687e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26880:	1cbb      	adds	r3, r7, #2
   26882:	781b      	ldrb	r3, [r3, #0]
   26884:	2b00      	cmp	r3, #0
   26886:	d001      	beq.n	2688c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26888:	2317      	movs	r3, #23
   2688a:	e019      	b.n	268c0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   2688c:	1cfb      	adds	r3, r7, #3
   2688e:	781a      	ldrb	r2, [r3, #0]
   26890:	4b0d      	ldr	r3, [pc, #52]	; (268c8 <extint_register_callback+0x60>)
   26892:	0092      	lsls	r2, r2, #2
   26894:	58d3      	ldr	r3, [r2, r3]
   26896:	2b00      	cmp	r3, #0
   26898:	d107      	bne.n	268aa <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2689a:	1cfb      	adds	r3, r7, #3
   2689c:	781a      	ldrb	r2, [r3, #0]
   2689e:	4b0a      	ldr	r3, [pc, #40]	; (268c8 <extint_register_callback+0x60>)
   268a0:	0092      	lsls	r2, r2, #2
   268a2:	6879      	ldr	r1, [r7, #4]
   268a4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   268a6:	2300      	movs	r3, #0
   268a8:	e00a      	b.n	268c0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   268aa:	1cfb      	adds	r3, r7, #3
   268ac:	781a      	ldrb	r2, [r3, #0]
   268ae:	4b06      	ldr	r3, [pc, #24]	; (268c8 <extint_register_callback+0x60>)
   268b0:	0092      	lsls	r2, r2, #2
   268b2:	58d2      	ldr	r2, [r2, r3]
   268b4:	687b      	ldr	r3, [r7, #4]
   268b6:	429a      	cmp	r2, r3
   268b8:	d101      	bne.n	268be <extint_register_callback+0x56>
		return STATUS_OK;
   268ba:	2300      	movs	r3, #0
   268bc:	e000      	b.n	268c0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   268be:	231d      	movs	r3, #29
}
   268c0:	0018      	movs	r0, r3
   268c2:	46bd      	mov	sp, r7
   268c4:	b002      	add	sp, #8
   268c6:	bd80      	pop	{r7, pc}
   268c8:	20005c00 	.word	0x20005c00

000268cc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   268cc:	b580      	push	{r7, lr}
   268ce:	b084      	sub	sp, #16
   268d0:	af00      	add	r7, sp, #0
   268d2:	0002      	movs	r2, r0
   268d4:	1dfb      	adds	r3, r7, #7
   268d6:	701a      	strb	r2, [r3, #0]
   268d8:	1dbb      	adds	r3, r7, #6
   268da:	1c0a      	adds	r2, r1, #0
   268dc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   268de:	1dbb      	adds	r3, r7, #6
   268e0:	781b      	ldrb	r3, [r3, #0]
   268e2:	2b00      	cmp	r3, #0
   268e4:	d10e      	bne.n	26904 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   268e6:	1dfb      	adds	r3, r7, #7
   268e8:	781b      	ldrb	r3, [r3, #0]
   268ea:	0018      	movs	r0, r3
   268ec:	4b08      	ldr	r3, [pc, #32]	; (26910 <extint_chan_enable_callback+0x44>)
   268ee:	4798      	blx	r3
   268f0:	0003      	movs	r3, r0
   268f2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   268f4:	1dfb      	adds	r3, r7, #7
   268f6:	781b      	ldrb	r3, [r3, #0]
   268f8:	2201      	movs	r2, #1
   268fa:	409a      	lsls	r2, r3
   268fc:	68fb      	ldr	r3, [r7, #12]
   268fe:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26900:	2300      	movs	r3, #0
   26902:	e000      	b.n	26906 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26904:	2317      	movs	r3, #23
}
   26906:	0018      	movs	r0, r3
   26908:	46bd      	mov	sp, r7
   2690a:	b004      	add	sp, #16
   2690c:	bd80      	pop	{r7, pc}
   2690e:	46c0      	nop			; (mov r8, r8)
   26910:	0002679d 	.word	0x0002679d

00026914 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26914:	b580      	push	{r7, lr}
   26916:	b084      	sub	sp, #16
   26918:	af00      	add	r7, sp, #0
   2691a:	0002      	movs	r2, r0
   2691c:	1dfb      	adds	r3, r7, #7
   2691e:	701a      	strb	r2, [r3, #0]
   26920:	1dbb      	adds	r3, r7, #6
   26922:	1c0a      	adds	r2, r1, #0
   26924:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26926:	1dbb      	adds	r3, r7, #6
   26928:	781b      	ldrb	r3, [r3, #0]
   2692a:	2b00      	cmp	r3, #0
   2692c:	d10e      	bne.n	2694c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2692e:	1dfb      	adds	r3, r7, #7
   26930:	781b      	ldrb	r3, [r3, #0]
   26932:	0018      	movs	r0, r3
   26934:	4b08      	ldr	r3, [pc, #32]	; (26958 <extint_chan_disable_callback+0x44>)
   26936:	4798      	blx	r3
   26938:	0003      	movs	r3, r0
   2693a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   2693c:	1dfb      	adds	r3, r7, #7
   2693e:	781b      	ldrb	r3, [r3, #0]
   26940:	2201      	movs	r2, #1
   26942:	409a      	lsls	r2, r3
   26944:	68fb      	ldr	r3, [r7, #12]
   26946:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26948:	2300      	movs	r3, #0
   2694a:	e000      	b.n	2694e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2694c:	2317      	movs	r3, #23
}
   2694e:	0018      	movs	r0, r3
   26950:	46bd      	mov	sp, r7
   26952:	b004      	add	sp, #16
   26954:	bd80      	pop	{r7, pc}
   26956:	46c0      	nop			; (mov r8, r8)
   26958:	0002679d 	.word	0x0002679d

0002695c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   2695c:	b580      	push	{r7, lr}
   2695e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26960:	4b15      	ldr	r3, [pc, #84]	; (269b8 <EIC_Handler+0x5c>)
   26962:	2200      	movs	r2, #0
   26964:	701a      	strb	r2, [r3, #0]
   26966:	e020      	b.n	269aa <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26968:	4b13      	ldr	r3, [pc, #76]	; (269b8 <EIC_Handler+0x5c>)
   2696a:	781b      	ldrb	r3, [r3, #0]
   2696c:	0018      	movs	r0, r3
   2696e:	4b13      	ldr	r3, [pc, #76]	; (269bc <EIC_Handler+0x60>)
   26970:	4798      	blx	r3
   26972:	1e03      	subs	r3, r0, #0
   26974:	d013      	beq.n	2699e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   26976:	4b10      	ldr	r3, [pc, #64]	; (269b8 <EIC_Handler+0x5c>)
   26978:	781b      	ldrb	r3, [r3, #0]
   2697a:	0018      	movs	r0, r3
   2697c:	4b10      	ldr	r3, [pc, #64]	; (269c0 <EIC_Handler+0x64>)
   2697e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   26980:	4b0d      	ldr	r3, [pc, #52]	; (269b8 <EIC_Handler+0x5c>)
   26982:	781b      	ldrb	r3, [r3, #0]
   26984:	001a      	movs	r2, r3
   26986:	4b0f      	ldr	r3, [pc, #60]	; (269c4 <EIC_Handler+0x68>)
   26988:	0092      	lsls	r2, r2, #2
   2698a:	58d3      	ldr	r3, [r2, r3]
   2698c:	2b00      	cmp	r3, #0
   2698e:	d006      	beq.n	2699e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   26990:	4b09      	ldr	r3, [pc, #36]	; (269b8 <EIC_Handler+0x5c>)
   26992:	781b      	ldrb	r3, [r3, #0]
   26994:	001a      	movs	r2, r3
   26996:	4b0b      	ldr	r3, [pc, #44]	; (269c4 <EIC_Handler+0x68>)
   26998:	0092      	lsls	r2, r2, #2
   2699a:	58d3      	ldr	r3, [r2, r3]
   2699c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2699e:	4b06      	ldr	r3, [pc, #24]	; (269b8 <EIC_Handler+0x5c>)
   269a0:	781b      	ldrb	r3, [r3, #0]
   269a2:	3301      	adds	r3, #1
   269a4:	b2da      	uxtb	r2, r3
   269a6:	4b04      	ldr	r3, [pc, #16]	; (269b8 <EIC_Handler+0x5c>)
   269a8:	701a      	strb	r2, [r3, #0]
   269aa:	4b03      	ldr	r3, [pc, #12]	; (269b8 <EIC_Handler+0x5c>)
   269ac:	781b      	ldrb	r3, [r3, #0]
   269ae:	2b0f      	cmp	r3, #15
   269b0:	d9da      	bls.n	26968 <EIC_Handler+0xc>
			}
		}
	}
}
   269b2:	46c0      	nop			; (mov r8, r8)
   269b4:	46bd      	mov	sp, r7
   269b6:	bd80      	pop	{r7, pc}
   269b8:	20005bfc 	.word	0x20005bfc
   269bc:	000267e9 	.word	0x000267e9
   269c0:	0002682d 	.word	0x0002682d
   269c4:	20005c00 	.word	0x20005c00

000269c8 <system_gclk_chan_get_config_defaults>:
{
   269c8:	b580      	push	{r7, lr}
   269ca:	b082      	sub	sp, #8
   269cc:	af00      	add	r7, sp, #0
   269ce:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   269d0:	687b      	ldr	r3, [r7, #4]
   269d2:	2200      	movs	r2, #0
   269d4:	701a      	strb	r2, [r3, #0]
}
   269d6:	46c0      	nop			; (mov r8, r8)
   269d8:	46bd      	mov	sp, r7
   269da:	b002      	add	sp, #8
   269dc:	bd80      	pop	{r7, pc}
	...

000269e0 <system_apb_clock_set_mask>:
{
   269e0:	b580      	push	{r7, lr}
   269e2:	b082      	sub	sp, #8
   269e4:	af00      	add	r7, sp, #0
   269e6:	0002      	movs	r2, r0
   269e8:	6039      	str	r1, [r7, #0]
   269ea:	1dfb      	adds	r3, r7, #7
   269ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   269ee:	1dfb      	adds	r3, r7, #7
   269f0:	781b      	ldrb	r3, [r3, #0]
   269f2:	2b01      	cmp	r3, #1
   269f4:	d00a      	beq.n	26a0c <system_apb_clock_set_mask+0x2c>
   269f6:	2b02      	cmp	r3, #2
   269f8:	d00f      	beq.n	26a1a <system_apb_clock_set_mask+0x3a>
   269fa:	2b00      	cmp	r3, #0
   269fc:	d114      	bne.n	26a28 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   269fe:	4b0e      	ldr	r3, [pc, #56]	; (26a38 <system_apb_clock_set_mask+0x58>)
   26a00:	4a0d      	ldr	r2, [pc, #52]	; (26a38 <system_apb_clock_set_mask+0x58>)
   26a02:	6991      	ldr	r1, [r2, #24]
   26a04:	683a      	ldr	r2, [r7, #0]
   26a06:	430a      	orrs	r2, r1
   26a08:	619a      	str	r2, [r3, #24]
			break;
   26a0a:	e00f      	b.n	26a2c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26a0c:	4b0a      	ldr	r3, [pc, #40]	; (26a38 <system_apb_clock_set_mask+0x58>)
   26a0e:	4a0a      	ldr	r2, [pc, #40]	; (26a38 <system_apb_clock_set_mask+0x58>)
   26a10:	69d1      	ldr	r1, [r2, #28]
   26a12:	683a      	ldr	r2, [r7, #0]
   26a14:	430a      	orrs	r2, r1
   26a16:	61da      	str	r2, [r3, #28]
			break;
   26a18:	e008      	b.n	26a2c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26a1a:	4b07      	ldr	r3, [pc, #28]	; (26a38 <system_apb_clock_set_mask+0x58>)
   26a1c:	4a06      	ldr	r2, [pc, #24]	; (26a38 <system_apb_clock_set_mask+0x58>)
   26a1e:	6a11      	ldr	r1, [r2, #32]
   26a20:	683a      	ldr	r2, [r7, #0]
   26a22:	430a      	orrs	r2, r1
   26a24:	621a      	str	r2, [r3, #32]
			break;
   26a26:	e001      	b.n	26a2c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26a28:	2317      	movs	r3, #23
   26a2a:	e000      	b.n	26a2e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26a2c:	2300      	movs	r3, #0
}
   26a2e:	0018      	movs	r0, r3
   26a30:	46bd      	mov	sp, r7
   26a32:	b002      	add	sp, #8
   26a34:	bd80      	pop	{r7, pc}
   26a36:	46c0      	nop			; (mov r8, r8)
   26a38:	40000400 	.word	0x40000400

00026a3c <system_pinmux_get_config_defaults>:
{
   26a3c:	b580      	push	{r7, lr}
   26a3e:	b082      	sub	sp, #8
   26a40:	af00      	add	r7, sp, #0
   26a42:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26a44:	687b      	ldr	r3, [r7, #4]
   26a46:	2280      	movs	r2, #128	; 0x80
   26a48:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26a4a:	687b      	ldr	r3, [r7, #4]
   26a4c:	2200      	movs	r2, #0
   26a4e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26a50:	687b      	ldr	r3, [r7, #4]
   26a52:	2201      	movs	r2, #1
   26a54:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26a56:	687b      	ldr	r3, [r7, #4]
   26a58:	2200      	movs	r2, #0
   26a5a:	70da      	strb	r2, [r3, #3]
}
   26a5c:	46c0      	nop			; (mov r8, r8)
   26a5e:	46bd      	mov	sp, r7
   26a60:	b002      	add	sp, #8
   26a62:	bd80      	pop	{r7, pc}

00026a64 <system_interrupt_enable>:
{
   26a64:	b580      	push	{r7, lr}
   26a66:	b082      	sub	sp, #8
   26a68:	af00      	add	r7, sp, #0
   26a6a:	0002      	movs	r2, r0
   26a6c:	1dfb      	adds	r3, r7, #7
   26a6e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26a70:	4b06      	ldr	r3, [pc, #24]	; (26a8c <system_interrupt_enable+0x28>)
   26a72:	1dfa      	adds	r2, r7, #7
   26a74:	7812      	ldrb	r2, [r2, #0]
   26a76:	0011      	movs	r1, r2
   26a78:	221f      	movs	r2, #31
   26a7a:	400a      	ands	r2, r1
   26a7c:	2101      	movs	r1, #1
   26a7e:	4091      	lsls	r1, r2
   26a80:	000a      	movs	r2, r1
   26a82:	601a      	str	r2, [r3, #0]
}
   26a84:	46c0      	nop			; (mov r8, r8)
   26a86:	46bd      	mov	sp, r7
   26a88:	b002      	add	sp, #8
   26a8a:	bd80      	pop	{r7, pc}
   26a8c:	e000e100 	.word	0xe000e100

00026a90 <_extint_get_eic_from_channel>:
{
   26a90:	b580      	push	{r7, lr}
   26a92:	b084      	sub	sp, #16
   26a94:	af00      	add	r7, sp, #0
   26a96:	0002      	movs	r2, r0
   26a98:	1dfb      	adds	r3, r7, #7
   26a9a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26a9c:	230f      	movs	r3, #15
   26a9e:	18fb      	adds	r3, r7, r3
   26aa0:	1dfa      	adds	r2, r7, #7
   26aa2:	7812      	ldrb	r2, [r2, #0]
   26aa4:	0952      	lsrs	r2, r2, #5
   26aa6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26aa8:	230f      	movs	r3, #15
   26aaa:	18fb      	adds	r3, r7, r3
   26aac:	781b      	ldrb	r3, [r3, #0]
   26aae:	2b00      	cmp	r3, #0
   26ab0:	d10c      	bne.n	26acc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26ab2:	4b09      	ldr	r3, [pc, #36]	; (26ad8 <_extint_get_eic_from_channel+0x48>)
   26ab4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   26ab6:	230f      	movs	r3, #15
   26ab8:	18fb      	adds	r3, r7, r3
   26aba:	781b      	ldrb	r3, [r3, #0]
   26abc:	009b      	lsls	r3, r3, #2
   26abe:	2210      	movs	r2, #16
   26ac0:	4694      	mov	ip, r2
   26ac2:	44bc      	add	ip, r7
   26ac4:	4463      	add	r3, ip
   26ac6:	3b08      	subs	r3, #8
   26ac8:	681b      	ldr	r3, [r3, #0]
   26aca:	e000      	b.n	26ace <_extint_get_eic_from_channel+0x3e>
		return NULL;
   26acc:	2300      	movs	r3, #0
}
   26ace:	0018      	movs	r0, r3
   26ad0:	46bd      	mov	sp, r7
   26ad2:	b004      	add	sp, #16
   26ad4:	bd80      	pop	{r7, pc}
   26ad6:	46c0      	nop			; (mov r8, r8)
   26ad8:	40001800 	.word	0x40001800

00026adc <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26adc:	b580      	push	{r7, lr}
   26ade:	b082      	sub	sp, #8
   26ae0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26ae2:	4b0f      	ldr	r3, [pc, #60]	; (26b20 <extint_is_syncing+0x44>)
   26ae4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26ae6:	2300      	movs	r3, #0
   26ae8:	607b      	str	r3, [r7, #4]
   26aea:	e011      	b.n	26b10 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26aec:	687b      	ldr	r3, [r7, #4]
   26aee:	009b      	lsls	r3, r3, #2
   26af0:	2208      	movs	r2, #8
   26af2:	4694      	mov	ip, r2
   26af4:	44bc      	add	ip, r7
   26af6:	4463      	add	r3, ip
   26af8:	3b08      	subs	r3, #8
   26afa:	681b      	ldr	r3, [r3, #0]
   26afc:	785b      	ldrb	r3, [r3, #1]
   26afe:	b2db      	uxtb	r3, r3
   26b00:	b25b      	sxtb	r3, r3
   26b02:	2b00      	cmp	r3, #0
   26b04:	da01      	bge.n	26b0a <extint_is_syncing+0x2e>
			return true;
   26b06:	2301      	movs	r3, #1
   26b08:	e006      	b.n	26b18 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26b0a:	687b      	ldr	r3, [r7, #4]
   26b0c:	3301      	adds	r3, #1
   26b0e:	607b      	str	r3, [r7, #4]
   26b10:	687b      	ldr	r3, [r7, #4]
   26b12:	2b00      	cmp	r3, #0
   26b14:	d0ea      	beq.n	26aec <extint_is_syncing+0x10>
		}
	}
	return false;
   26b16:	2300      	movs	r3, #0
}
   26b18:	0018      	movs	r0, r3
   26b1a:	46bd      	mov	sp, r7
   26b1c:	b002      	add	sp, #8
   26b1e:	bd80      	pop	{r7, pc}
   26b20:	40001800 	.word	0x40001800

00026b24 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   26b24:	b580      	push	{r7, lr}
   26b26:	b084      	sub	sp, #16
   26b28:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26b2a:	4b2d      	ldr	r3, [pc, #180]	; (26be0 <_system_extint_init+0xbc>)
   26b2c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26b2e:	2140      	movs	r1, #64	; 0x40
   26b30:	2000      	movs	r0, #0
   26b32:	4b2c      	ldr	r3, [pc, #176]	; (26be4 <_system_extint_init+0xc0>)
   26b34:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26b36:	003b      	movs	r3, r7
   26b38:	0018      	movs	r0, r3
   26b3a:	4b2b      	ldr	r3, [pc, #172]	; (26be8 <_system_extint_init+0xc4>)
   26b3c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   26b3e:	003b      	movs	r3, r7
   26b40:	2200      	movs	r2, #0
   26b42:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   26b44:	003b      	movs	r3, r7
   26b46:	0019      	movs	r1, r3
   26b48:	2005      	movs	r0, #5
   26b4a:	4b28      	ldr	r3, [pc, #160]	; (26bec <_system_extint_init+0xc8>)
   26b4c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   26b4e:	2005      	movs	r0, #5
   26b50:	4b27      	ldr	r3, [pc, #156]	; (26bf0 <_system_extint_init+0xcc>)
   26b52:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26b54:	2300      	movs	r3, #0
   26b56:	60fb      	str	r3, [r7, #12]
   26b58:	e018      	b.n	26b8c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26b5a:	68fb      	ldr	r3, [r7, #12]
   26b5c:	009b      	lsls	r3, r3, #2
   26b5e:	2210      	movs	r2, #16
   26b60:	4694      	mov	ip, r2
   26b62:	44bc      	add	ip, r7
   26b64:	4463      	add	r3, ip
   26b66:	3b0c      	subs	r3, #12
   26b68:	681a      	ldr	r2, [r3, #0]
   26b6a:	68fb      	ldr	r3, [r7, #12]
   26b6c:	009b      	lsls	r3, r3, #2
   26b6e:	2110      	movs	r1, #16
   26b70:	468c      	mov	ip, r1
   26b72:	44bc      	add	ip, r7
   26b74:	4463      	add	r3, ip
   26b76:	3b0c      	subs	r3, #12
   26b78:	681b      	ldr	r3, [r3, #0]
   26b7a:	781b      	ldrb	r3, [r3, #0]
   26b7c:	b2db      	uxtb	r3, r3
   26b7e:	2101      	movs	r1, #1
   26b80:	430b      	orrs	r3, r1
   26b82:	b2db      	uxtb	r3, r3
   26b84:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26b86:	68fb      	ldr	r3, [r7, #12]
   26b88:	3301      	adds	r3, #1
   26b8a:	60fb      	str	r3, [r7, #12]
   26b8c:	68fb      	ldr	r3, [r7, #12]
   26b8e:	2b00      	cmp	r3, #0
   26b90:	d0e3      	beq.n	26b5a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   26b92:	46c0      	nop			; (mov r8, r8)
   26b94:	4b17      	ldr	r3, [pc, #92]	; (26bf4 <_system_extint_init+0xd0>)
   26b96:	4798      	blx	r3
   26b98:	1e03      	subs	r3, r0, #0
   26b9a:	d1fb      	bne.n	26b94 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26b9c:	230b      	movs	r3, #11
   26b9e:	18fb      	adds	r3, r7, r3
   26ba0:	2200      	movs	r2, #0
   26ba2:	701a      	strb	r2, [r3, #0]
   26ba4:	e00d      	b.n	26bc2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   26ba6:	230b      	movs	r3, #11
   26ba8:	18fb      	adds	r3, r7, r3
   26baa:	781a      	ldrb	r2, [r3, #0]
   26bac:	4b12      	ldr	r3, [pc, #72]	; (26bf8 <_system_extint_init+0xd4>)
   26bae:	0092      	lsls	r2, r2, #2
   26bb0:	2100      	movs	r1, #0
   26bb2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26bb4:	230b      	movs	r3, #11
   26bb6:	18fb      	adds	r3, r7, r3
   26bb8:	781a      	ldrb	r2, [r3, #0]
   26bba:	230b      	movs	r3, #11
   26bbc:	18fb      	adds	r3, r7, r3
   26bbe:	3201      	adds	r2, #1
   26bc0:	701a      	strb	r2, [r3, #0]
   26bc2:	230b      	movs	r3, #11
   26bc4:	18fb      	adds	r3, r7, r3
   26bc6:	781b      	ldrb	r3, [r3, #0]
   26bc8:	2b0f      	cmp	r3, #15
   26bca:	d9ec      	bls.n	26ba6 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   26bcc:	2004      	movs	r0, #4
   26bce:	4b0b      	ldr	r3, [pc, #44]	; (26bfc <_system_extint_init+0xd8>)
   26bd0:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   26bd2:	4b0b      	ldr	r3, [pc, #44]	; (26c00 <_system_extint_init+0xdc>)
   26bd4:	4798      	blx	r3
}
   26bd6:	46c0      	nop			; (mov r8, r8)
   26bd8:	46bd      	mov	sp, r7
   26bda:	b004      	add	sp, #16
   26bdc:	bd80      	pop	{r7, pc}
   26bde:	46c0      	nop			; (mov r8, r8)
   26be0:	40001800 	.word	0x40001800
   26be4:	000269e1 	.word	0x000269e1
   26be8:	000269c9 	.word	0x000269c9
   26bec:	0002a251 	.word	0x0002a251
   26bf0:	0002a295 	.word	0x0002a295
   26bf4:	00026add 	.word	0x00026add
   26bf8:	20005c00 	.word	0x20005c00
   26bfc:	00026a65 	.word	0x00026a65
   26c00:	00026c05 	.word	0x00026c05

00026c04 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26c04:	b580      	push	{r7, lr}
   26c06:	b082      	sub	sp, #8
   26c08:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26c0a:	4b15      	ldr	r3, [pc, #84]	; (26c60 <_extint_enable+0x5c>)
   26c0c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26c0e:	2300      	movs	r3, #0
   26c10:	607b      	str	r3, [r7, #4]
   26c12:	e018      	b.n	26c46 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26c14:	687b      	ldr	r3, [r7, #4]
   26c16:	009b      	lsls	r3, r3, #2
   26c18:	2208      	movs	r2, #8
   26c1a:	4694      	mov	ip, r2
   26c1c:	44bc      	add	ip, r7
   26c1e:	4463      	add	r3, ip
   26c20:	3b08      	subs	r3, #8
   26c22:	681a      	ldr	r2, [r3, #0]
   26c24:	687b      	ldr	r3, [r7, #4]
   26c26:	009b      	lsls	r3, r3, #2
   26c28:	2108      	movs	r1, #8
   26c2a:	468c      	mov	ip, r1
   26c2c:	44bc      	add	ip, r7
   26c2e:	4463      	add	r3, ip
   26c30:	3b08      	subs	r3, #8
   26c32:	681b      	ldr	r3, [r3, #0]
   26c34:	781b      	ldrb	r3, [r3, #0]
   26c36:	b2db      	uxtb	r3, r3
   26c38:	2102      	movs	r1, #2
   26c3a:	430b      	orrs	r3, r1
   26c3c:	b2db      	uxtb	r3, r3
   26c3e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26c40:	687b      	ldr	r3, [r7, #4]
   26c42:	3301      	adds	r3, #1
   26c44:	607b      	str	r3, [r7, #4]
   26c46:	687b      	ldr	r3, [r7, #4]
   26c48:	2b00      	cmp	r3, #0
   26c4a:	d0e3      	beq.n	26c14 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26c4c:	46c0      	nop			; (mov r8, r8)
   26c4e:	4b05      	ldr	r3, [pc, #20]	; (26c64 <_extint_enable+0x60>)
   26c50:	4798      	blx	r3
   26c52:	1e03      	subs	r3, r0, #0
   26c54:	d1fb      	bne.n	26c4e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26c56:	46c0      	nop			; (mov r8, r8)
   26c58:	46bd      	mov	sp, r7
   26c5a:	b002      	add	sp, #8
   26c5c:	bd80      	pop	{r7, pc}
   26c5e:	46c0      	nop			; (mov r8, r8)
   26c60:	40001800 	.word	0x40001800
   26c64:	00026add 	.word	0x00026add

00026c68 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26c68:	b580      	push	{r7, lr}
   26c6a:	b082      	sub	sp, #8
   26c6c:	af00      	add	r7, sp, #0
   26c6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26c70:	687b      	ldr	r3, [r7, #4]
   26c72:	2200      	movs	r2, #0
   26c74:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26c76:	687b      	ldr	r3, [r7, #4]
   26c78:	2200      	movs	r2, #0
   26c7a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26c7c:	687b      	ldr	r3, [r7, #4]
   26c7e:	2201      	movs	r2, #1
   26c80:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   26c82:	687b      	ldr	r3, [r7, #4]
   26c84:	2201      	movs	r2, #1
   26c86:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26c88:	687b      	ldr	r3, [r7, #4]
   26c8a:	2200      	movs	r2, #0
   26c8c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26c8e:	687b      	ldr	r3, [r7, #4]
   26c90:	2202      	movs	r2, #2
   26c92:	72da      	strb	r2, [r3, #11]
}
   26c94:	46c0      	nop			; (mov r8, r8)
   26c96:	46bd      	mov	sp, r7
   26c98:	b002      	add	sp, #8
   26c9a:	bd80      	pop	{r7, pc}

00026c9c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26c9c:	b580      	push	{r7, lr}
   26c9e:	b086      	sub	sp, #24
   26ca0:	af00      	add	r7, sp, #0
   26ca2:	0002      	movs	r2, r0
   26ca4:	6039      	str	r1, [r7, #0]
   26ca6:	1dfb      	adds	r3, r7, #7
   26ca8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26caa:	2308      	movs	r3, #8
   26cac:	18fb      	adds	r3, r7, r3
   26cae:	0018      	movs	r0, r3
   26cb0:	4b36      	ldr	r3, [pc, #216]	; (26d8c <extint_chan_set_config+0xf0>)
   26cb2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   26cb4:	683b      	ldr	r3, [r7, #0]
   26cb6:	685b      	ldr	r3, [r3, #4]
   26cb8:	b2da      	uxtb	r2, r3
   26cba:	2308      	movs	r3, #8
   26cbc:	18fb      	adds	r3, r7, r3
   26cbe:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26cc0:	2308      	movs	r3, #8
   26cc2:	18fb      	adds	r3, r7, r3
   26cc4:	2200      	movs	r2, #0
   26cc6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26cc8:	683b      	ldr	r3, [r7, #0]
   26cca:	7a1a      	ldrb	r2, [r3, #8]
   26ccc:	2308      	movs	r3, #8
   26cce:	18fb      	adds	r3, r7, r3
   26cd0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   26cd2:	683b      	ldr	r3, [r7, #0]
   26cd4:	681b      	ldr	r3, [r3, #0]
   26cd6:	b2db      	uxtb	r3, r3
   26cd8:	2208      	movs	r2, #8
   26cda:	18ba      	adds	r2, r7, r2
   26cdc:	0011      	movs	r1, r2
   26cde:	0018      	movs	r0, r3
   26ce0:	4b2b      	ldr	r3, [pc, #172]	; (26d90 <extint_chan_set_config+0xf4>)
   26ce2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26ce4:	1dfb      	adds	r3, r7, #7
   26ce6:	781b      	ldrb	r3, [r3, #0]
   26ce8:	0018      	movs	r0, r3
   26cea:	4b2a      	ldr	r3, [pc, #168]	; (26d94 <extint_chan_set_config+0xf8>)
   26cec:	4798      	blx	r3
   26cee:	0003      	movs	r3, r0
   26cf0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   26cf2:	1dfb      	adds	r3, r7, #7
   26cf4:	781b      	ldrb	r3, [r3, #0]
   26cf6:	2207      	movs	r2, #7
   26cf8:	4013      	ands	r3, r2
   26cfa:	009b      	lsls	r3, r3, #2
   26cfc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26cfe:	683b      	ldr	r3, [r7, #0]
   26d00:	7adb      	ldrb	r3, [r3, #11]
   26d02:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26d04:	683b      	ldr	r3, [r7, #0]
   26d06:	7a9b      	ldrb	r3, [r3, #10]
   26d08:	2b00      	cmp	r3, #0
   26d0a:	d003      	beq.n	26d14 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26d0c:	697b      	ldr	r3, [r7, #20]
   26d0e:	2208      	movs	r2, #8
   26d10:	4313      	orrs	r3, r2
   26d12:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26d14:	1dfb      	adds	r3, r7, #7
   26d16:	781b      	ldrb	r3, [r3, #0]
   26d18:	08db      	lsrs	r3, r3, #3
   26d1a:	b2db      	uxtb	r3, r3
   26d1c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26d1e:	1dfb      	adds	r3, r7, #7
   26d20:	781b      	ldrb	r3, [r3, #0]
   26d22:	08db      	lsrs	r3, r3, #3
   26d24:	b2db      	uxtb	r3, r3
   26d26:	001a      	movs	r2, r3
   26d28:	693b      	ldr	r3, [r7, #16]
   26d2a:	3206      	adds	r2, #6
   26d2c:	0092      	lsls	r2, r2, #2
   26d2e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26d30:	210f      	movs	r1, #15
   26d32:	68fa      	ldr	r2, [r7, #12]
   26d34:	4091      	lsls	r1, r2
   26d36:	000a      	movs	r2, r1
   26d38:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26d3a:	401a      	ands	r2, r3
			(new_config << config_pos);
   26d3c:	6979      	ldr	r1, [r7, #20]
   26d3e:	68fb      	ldr	r3, [r7, #12]
   26d40:	4099      	lsls	r1, r3
   26d42:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26d44:	431a      	orrs	r2, r3
   26d46:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26d48:	693b      	ldr	r3, [r7, #16]
   26d4a:	1d82      	adds	r2, r0, #6
   26d4c:	0092      	lsls	r2, r2, #2
   26d4e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26d50:	683b      	ldr	r3, [r7, #0]
   26d52:	7a5b      	ldrb	r3, [r3, #9]
   26d54:	2b00      	cmp	r3, #0
   26d56:	d00a      	beq.n	26d6e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26d58:	693b      	ldr	r3, [r7, #16]
   26d5a:	695a      	ldr	r2, [r3, #20]
   26d5c:	1dfb      	adds	r3, r7, #7
   26d5e:	781b      	ldrb	r3, [r3, #0]
   26d60:	2101      	movs	r1, #1
   26d62:	4099      	lsls	r1, r3
   26d64:	000b      	movs	r3, r1
   26d66:	431a      	orrs	r2, r3
   26d68:	693b      	ldr	r3, [r7, #16]
   26d6a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26d6c:	e00a      	b.n	26d84 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26d6e:	693b      	ldr	r3, [r7, #16]
   26d70:	695b      	ldr	r3, [r3, #20]
   26d72:	1dfa      	adds	r2, r7, #7
   26d74:	7812      	ldrb	r2, [r2, #0]
   26d76:	2101      	movs	r1, #1
   26d78:	4091      	lsls	r1, r2
   26d7a:	000a      	movs	r2, r1
   26d7c:	43d2      	mvns	r2, r2
   26d7e:	401a      	ands	r2, r3
   26d80:	693b      	ldr	r3, [r7, #16]
   26d82:	615a      	str	r2, [r3, #20]
}
   26d84:	46c0      	nop			; (mov r8, r8)
   26d86:	46bd      	mov	sp, r7
   26d88:	b006      	add	sp, #24
   26d8a:	bd80      	pop	{r7, pc}
   26d8c:	00026a3d 	.word	0x00026a3d
   26d90:	0002a5b1 	.word	0x0002a5b1
   26d94:	00026a91 	.word	0x00026a91

00026d98 <system_pinmux_get_config_defaults>:
{
   26d98:	b580      	push	{r7, lr}
   26d9a:	b082      	sub	sp, #8
   26d9c:	af00      	add	r7, sp, #0
   26d9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26da0:	687b      	ldr	r3, [r7, #4]
   26da2:	2280      	movs	r2, #128	; 0x80
   26da4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26da6:	687b      	ldr	r3, [r7, #4]
   26da8:	2200      	movs	r2, #0
   26daa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26dac:	687b      	ldr	r3, [r7, #4]
   26dae:	2201      	movs	r2, #1
   26db0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26db2:	687b      	ldr	r3, [r7, #4]
   26db4:	2200      	movs	r2, #0
   26db6:	70da      	strb	r2, [r3, #3]
}
   26db8:	46c0      	nop			; (mov r8, r8)
   26dba:	46bd      	mov	sp, r7
   26dbc:	b002      	add	sp, #8
   26dbe:	bd80      	pop	{r7, pc}

00026dc0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   26dc0:	b580      	push	{r7, lr}
   26dc2:	b084      	sub	sp, #16
   26dc4:	af00      	add	r7, sp, #0
   26dc6:	0002      	movs	r2, r0
   26dc8:	6039      	str	r1, [r7, #0]
   26dca:	1dfb      	adds	r3, r7, #7
   26dcc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26dce:	230c      	movs	r3, #12
   26dd0:	18fb      	adds	r3, r7, r3
   26dd2:	0018      	movs	r0, r3
   26dd4:	4b10      	ldr	r3, [pc, #64]	; (26e18 <port_pin_set_config+0x58>)
   26dd6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26dd8:	230c      	movs	r3, #12
   26dda:	18fb      	adds	r3, r7, r3
   26ddc:	2280      	movs	r2, #128	; 0x80
   26dde:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   26de0:	683b      	ldr	r3, [r7, #0]
   26de2:	781a      	ldrb	r2, [r3, #0]
   26de4:	230c      	movs	r3, #12
   26de6:	18fb      	adds	r3, r7, r3
   26de8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26dea:	683b      	ldr	r3, [r7, #0]
   26dec:	785a      	ldrb	r2, [r3, #1]
   26dee:	230c      	movs	r3, #12
   26df0:	18fb      	adds	r3, r7, r3
   26df2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26df4:	683b      	ldr	r3, [r7, #0]
   26df6:	789a      	ldrb	r2, [r3, #2]
   26df8:	230c      	movs	r3, #12
   26dfa:	18fb      	adds	r3, r7, r3
   26dfc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   26dfe:	230c      	movs	r3, #12
   26e00:	18fa      	adds	r2, r7, r3
   26e02:	1dfb      	adds	r3, r7, #7
   26e04:	781b      	ldrb	r3, [r3, #0]
   26e06:	0011      	movs	r1, r2
   26e08:	0018      	movs	r0, r3
   26e0a:	4b04      	ldr	r3, [pc, #16]	; (26e1c <port_pin_set_config+0x5c>)
   26e0c:	4798      	blx	r3
}
   26e0e:	46c0      	nop			; (mov r8, r8)
   26e10:	46bd      	mov	sp, r7
   26e12:	b004      	add	sp, #16
   26e14:	bd80      	pop	{r7, pc}
   26e16:	46c0      	nop			; (mov r8, r8)
   26e18:	00026d99 	.word	0x00026d99
   26e1c:	0002a5b1 	.word	0x0002a5b1

00026e20 <system_gclk_chan_get_config_defaults>:
{
   26e20:	b580      	push	{r7, lr}
   26e22:	b082      	sub	sp, #8
   26e24:	af00      	add	r7, sp, #0
   26e26:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26e28:	687b      	ldr	r3, [r7, #4]
   26e2a:	2200      	movs	r2, #0
   26e2c:	701a      	strb	r2, [r3, #0]
}
   26e2e:	46c0      	nop			; (mov r8, r8)
   26e30:	46bd      	mov	sp, r7
   26e32:	b002      	add	sp, #8
   26e34:	bd80      	pop	{r7, pc}
	...

00026e38 <system_apb_clock_set_mask>:
{
   26e38:	b580      	push	{r7, lr}
   26e3a:	b082      	sub	sp, #8
   26e3c:	af00      	add	r7, sp, #0
   26e3e:	0002      	movs	r2, r0
   26e40:	6039      	str	r1, [r7, #0]
   26e42:	1dfb      	adds	r3, r7, #7
   26e44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26e46:	1dfb      	adds	r3, r7, #7
   26e48:	781b      	ldrb	r3, [r3, #0]
   26e4a:	2b01      	cmp	r3, #1
   26e4c:	d00a      	beq.n	26e64 <system_apb_clock_set_mask+0x2c>
   26e4e:	2b02      	cmp	r3, #2
   26e50:	d00f      	beq.n	26e72 <system_apb_clock_set_mask+0x3a>
   26e52:	2b00      	cmp	r3, #0
   26e54:	d114      	bne.n	26e80 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26e56:	4b0e      	ldr	r3, [pc, #56]	; (26e90 <system_apb_clock_set_mask+0x58>)
   26e58:	4a0d      	ldr	r2, [pc, #52]	; (26e90 <system_apb_clock_set_mask+0x58>)
   26e5a:	6991      	ldr	r1, [r2, #24]
   26e5c:	683a      	ldr	r2, [r7, #0]
   26e5e:	430a      	orrs	r2, r1
   26e60:	619a      	str	r2, [r3, #24]
			break;
   26e62:	e00f      	b.n	26e84 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26e64:	4b0a      	ldr	r3, [pc, #40]	; (26e90 <system_apb_clock_set_mask+0x58>)
   26e66:	4a0a      	ldr	r2, [pc, #40]	; (26e90 <system_apb_clock_set_mask+0x58>)
   26e68:	69d1      	ldr	r1, [r2, #28]
   26e6a:	683a      	ldr	r2, [r7, #0]
   26e6c:	430a      	orrs	r2, r1
   26e6e:	61da      	str	r2, [r3, #28]
			break;
   26e70:	e008      	b.n	26e84 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26e72:	4b07      	ldr	r3, [pc, #28]	; (26e90 <system_apb_clock_set_mask+0x58>)
   26e74:	4a06      	ldr	r2, [pc, #24]	; (26e90 <system_apb_clock_set_mask+0x58>)
   26e76:	6a11      	ldr	r1, [r2, #32]
   26e78:	683a      	ldr	r2, [r7, #0]
   26e7a:	430a      	orrs	r2, r1
   26e7c:	621a      	str	r2, [r3, #32]
			break;
   26e7e:	e001      	b.n	26e84 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26e80:	2317      	movs	r3, #23
   26e82:	e000      	b.n	26e86 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26e84:	2300      	movs	r3, #0
}
   26e86:	0018      	movs	r0, r3
   26e88:	46bd      	mov	sp, r7
   26e8a:	b002      	add	sp, #8
   26e8c:	bd80      	pop	{r7, pc}
   26e8e:	46c0      	nop			; (mov r8, r8)
   26e90:	40000400 	.word	0x40000400

00026e94 <system_interrupt_enable>:
{
   26e94:	b580      	push	{r7, lr}
   26e96:	b082      	sub	sp, #8
   26e98:	af00      	add	r7, sp, #0
   26e9a:	0002      	movs	r2, r0
   26e9c:	1dfb      	adds	r3, r7, #7
   26e9e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26ea0:	4b06      	ldr	r3, [pc, #24]	; (26ebc <system_interrupt_enable+0x28>)
   26ea2:	1dfa      	adds	r2, r7, #7
   26ea4:	7812      	ldrb	r2, [r2, #0]
   26ea6:	0011      	movs	r1, r2
   26ea8:	221f      	movs	r2, #31
   26eaa:	400a      	ands	r2, r1
   26eac:	2101      	movs	r1, #1
   26eae:	4091      	lsls	r1, r2
   26eb0:	000a      	movs	r2, r1
   26eb2:	601a      	str	r2, [r3, #0]
}
   26eb4:	46c0      	nop			; (mov r8, r8)
   26eb6:	46bd      	mov	sp, r7
   26eb8:	b002      	add	sp, #8
   26eba:	bd80      	pop	{r7, pc}
   26ebc:	e000e100 	.word	0xe000e100

00026ec0 <system_interrupt_disable>:
{
   26ec0:	b580      	push	{r7, lr}
   26ec2:	b082      	sub	sp, #8
   26ec4:	af00      	add	r7, sp, #0
   26ec6:	0002      	movs	r2, r0
   26ec8:	1dfb      	adds	r3, r7, #7
   26eca:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26ecc:	4a07      	ldr	r2, [pc, #28]	; (26eec <system_interrupt_disable+0x2c>)
   26ece:	1dfb      	adds	r3, r7, #7
   26ed0:	781b      	ldrb	r3, [r3, #0]
   26ed2:	0019      	movs	r1, r3
   26ed4:	231f      	movs	r3, #31
   26ed6:	400b      	ands	r3, r1
   26ed8:	2101      	movs	r1, #1
   26eda:	4099      	lsls	r1, r3
   26edc:	000b      	movs	r3, r1
   26ede:	0019      	movs	r1, r3
   26ee0:	2380      	movs	r3, #128	; 0x80
   26ee2:	50d1      	str	r1, [r2, r3]
}
   26ee4:	46c0      	nop			; (mov r8, r8)
   26ee6:	46bd      	mov	sp, r7
   26ee8:	b002      	add	sp, #8
   26eea:	bd80      	pop	{r7, pc}
   26eec:	e000e100 	.word	0xe000e100

00026ef0 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   26ef0:	b580      	push	{r7, lr}
   26ef2:	b084      	sub	sp, #16
   26ef4:	af00      	add	r7, sp, #0
   26ef6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26ef8:	687b      	ldr	r3, [r7, #4]
   26efa:	681b      	ldr	r3, [r3, #0]
   26efc:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   26efe:	68fb      	ldr	r3, [r7, #12]
   26f00:	7a9b      	ldrb	r3, [r3, #10]
   26f02:	b2db      	uxtb	r3, r3
   26f04:	b25b      	sxtb	r3, r3
   26f06:	2b00      	cmp	r3, #0
   26f08:	da01      	bge.n	26f0e <rtc_calendar_is_syncing+0x1e>
                return true;
   26f0a:	2301      	movs	r3, #1
   26f0c:	e000      	b.n	26f10 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   26f0e:	2300      	movs	r3, #0
}
   26f10:	0018      	movs	r0, r3
   26f12:	46bd      	mov	sp, r7
   26f14:	b004      	add	sp, #16
   26f16:	bd80      	pop	{r7, pc}

00026f18 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26f18:	b580      	push	{r7, lr}
   26f1a:	b084      	sub	sp, #16
   26f1c:	af00      	add	r7, sp, #0
   26f1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26f20:	687b      	ldr	r3, [r7, #4]
   26f22:	681b      	ldr	r3, [r3, #0]
   26f24:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   26f26:	2003      	movs	r0, #3
   26f28:	4b0a      	ldr	r3, [pc, #40]	; (26f54 <rtc_calendar_enable+0x3c>)
   26f2a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26f2c:	46c0      	nop			; (mov r8, r8)
   26f2e:	687b      	ldr	r3, [r7, #4]
   26f30:	0018      	movs	r0, r3
   26f32:	4b09      	ldr	r3, [pc, #36]	; (26f58 <rtc_calendar_enable+0x40>)
   26f34:	4798      	blx	r3
   26f36:	1e03      	subs	r3, r0, #0
   26f38:	d1f9      	bne.n	26f2e <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26f3a:	68fb      	ldr	r3, [r7, #12]
   26f3c:	881b      	ldrh	r3, [r3, #0]
   26f3e:	b29b      	uxth	r3, r3
   26f40:	2202      	movs	r2, #2
   26f42:	4313      	orrs	r3, r2
   26f44:	b29a      	uxth	r2, r3
   26f46:	68fb      	ldr	r3, [r7, #12]
   26f48:	801a      	strh	r2, [r3, #0]
}
   26f4a:	46c0      	nop			; (mov r8, r8)
   26f4c:	46bd      	mov	sp, r7
   26f4e:	b004      	add	sp, #16
   26f50:	bd80      	pop	{r7, pc}
   26f52:	46c0      	nop			; (mov r8, r8)
   26f54:	00026e95 	.word	0x00026e95
   26f58:	00026ef1 	.word	0x00026ef1

00026f5c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26f5c:	b580      	push	{r7, lr}
   26f5e:	b084      	sub	sp, #16
   26f60:	af00      	add	r7, sp, #0
   26f62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26f64:	687b      	ldr	r3, [r7, #4]
   26f66:	681b      	ldr	r3, [r3, #0]
   26f68:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26f6a:	2003      	movs	r0, #3
   26f6c:	4b0d      	ldr	r3, [pc, #52]	; (26fa4 <rtc_calendar_disable+0x48>)
   26f6e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26f70:	46c0      	nop			; (mov r8, r8)
   26f72:	687b      	ldr	r3, [r7, #4]
   26f74:	0018      	movs	r0, r3
   26f76:	4b0c      	ldr	r3, [pc, #48]	; (26fa8 <rtc_calendar_disable+0x4c>)
   26f78:	4798      	blx	r3
   26f7a:	1e03      	subs	r3, r0, #0
   26f7c:	d1f9      	bne.n	26f72 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26f7e:	68fb      	ldr	r3, [r7, #12]
   26f80:	22c1      	movs	r2, #193	; 0xc1
   26f82:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   26f84:	68fb      	ldr	r3, [r7, #12]
   26f86:	22c1      	movs	r2, #193	; 0xc1
   26f88:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26f8a:	68fb      	ldr	r3, [r7, #12]
   26f8c:	881b      	ldrh	r3, [r3, #0]
   26f8e:	b29b      	uxth	r3, r3
   26f90:	2202      	movs	r2, #2
   26f92:	4393      	bics	r3, r2
   26f94:	b29a      	uxth	r2, r3
   26f96:	68fb      	ldr	r3, [r7, #12]
   26f98:	801a      	strh	r2, [r3, #0]
}
   26f9a:	46c0      	nop			; (mov r8, r8)
   26f9c:	46bd      	mov	sp, r7
   26f9e:	b004      	add	sp, #16
   26fa0:	bd80      	pop	{r7, pc}
   26fa2:	46c0      	nop			; (mov r8, r8)
   26fa4:	00026ec1 	.word	0x00026ec1
   26fa8:	00026ef1 	.word	0x00026ef1

00026fac <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26fac:	b580      	push	{r7, lr}
   26fae:	b084      	sub	sp, #16
   26fb0:	af00      	add	r7, sp, #0
   26fb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26fb4:	687b      	ldr	r3, [r7, #4]
   26fb6:	681b      	ldr	r3, [r3, #0]
   26fb8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   26fba:	687b      	ldr	r3, [r7, #4]
   26fbc:	0018      	movs	r0, r3
   26fbe:	4b0d      	ldr	r3, [pc, #52]	; (26ff4 <rtc_calendar_reset+0x48>)
   26fc0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   26fc2:	687b      	ldr	r3, [r7, #4]
   26fc4:	2200      	movs	r2, #0
   26fc6:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   26fc8:	687b      	ldr	r3, [r7, #4]
   26fca:	2200      	movs	r2, #0
   26fcc:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   26fce:	46c0      	nop			; (mov r8, r8)
   26fd0:	687b      	ldr	r3, [r7, #4]
   26fd2:	0018      	movs	r0, r3
   26fd4:	4b08      	ldr	r3, [pc, #32]	; (26ff8 <rtc_calendar_reset+0x4c>)
   26fd6:	4798      	blx	r3
   26fd8:	1e03      	subs	r3, r0, #0
   26fda:	d1f9      	bne.n	26fd0 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26fdc:	68fb      	ldr	r3, [r7, #12]
   26fde:	881b      	ldrh	r3, [r3, #0]
   26fe0:	b29b      	uxth	r3, r3
   26fe2:	2201      	movs	r2, #1
   26fe4:	4313      	orrs	r3, r2
   26fe6:	b29a      	uxth	r2, r3
   26fe8:	68fb      	ldr	r3, [r7, #12]
   26fea:	801a      	strh	r2, [r3, #0]
}
   26fec:	46c0      	nop			; (mov r8, r8)
   26fee:	46bd      	mov	sp, r7
   26ff0:	b004      	add	sp, #16
   26ff2:	bd80      	pop	{r7, pc}
   26ff4:	00026f5d 	.word	0x00026f5d
   26ff8:	00026ef1 	.word	0x00026ef1

00026ffc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26ffc:	b580      	push	{r7, lr}
   26ffe:	b084      	sub	sp, #16
   27000:	af00      	add	r7, sp, #0
   27002:	6078      	str	r0, [r7, #4]
   27004:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27006:	683b      	ldr	r3, [r7, #0]
   27008:	88db      	ldrh	r3, [r3, #6]
   2700a:	001a      	movs	r2, r3
   2700c:	687b      	ldr	r3, [r7, #4]
   2700e:	88db      	ldrh	r3, [r3, #6]
   27010:	1ad3      	subs	r3, r2, r3
   27012:	069b      	lsls	r3, r3, #26
   27014:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27016:	683b      	ldr	r3, [r7, #0]
   27018:	795b      	ldrb	r3, [r3, #5]
   2701a:	059b      	lsls	r3, r3, #22
   2701c:	001a      	movs	r2, r3
   2701e:	68fb      	ldr	r3, [r7, #12]
   27020:	4313      	orrs	r3, r2
   27022:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27024:	683b      	ldr	r3, [r7, #0]
   27026:	791b      	ldrb	r3, [r3, #4]
   27028:	045b      	lsls	r3, r3, #17
   2702a:	001a      	movs	r2, r3
   2702c:	68fb      	ldr	r3, [r7, #12]
   2702e:	4313      	orrs	r3, r2
   27030:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   27032:	683b      	ldr	r3, [r7, #0]
   27034:	789b      	ldrb	r3, [r3, #2]
   27036:	031b      	lsls	r3, r3, #12
   27038:	001a      	movs	r2, r3
   2703a:	68fb      	ldr	r3, [r7, #12]
   2703c:	4313      	orrs	r3, r2
   2703e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   27040:	687b      	ldr	r3, [r7, #4]
   27042:	791b      	ldrb	r3, [r3, #4]
   27044:	2201      	movs	r2, #1
   27046:	4053      	eors	r3, r2
   27048:	b2db      	uxtb	r3, r3
   2704a:	2b00      	cmp	r3, #0
   2704c:	d008      	beq.n	27060 <rtc_calendar_time_to_register_value+0x64>
   2704e:	683b      	ldr	r3, [r7, #0]
   27050:	78db      	ldrb	r3, [r3, #3]
   27052:	2b00      	cmp	r3, #0
   27054:	d004      	beq.n	27060 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27056:	68fb      	ldr	r3, [r7, #12]
   27058:	2280      	movs	r2, #128	; 0x80
   2705a:	0252      	lsls	r2, r2, #9
   2705c:	4313      	orrs	r3, r2
   2705e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   27060:	683b      	ldr	r3, [r7, #0]
   27062:	785b      	ldrb	r3, [r3, #1]
   27064:	019b      	lsls	r3, r3, #6
   27066:	001a      	movs	r2, r3
   27068:	68fb      	ldr	r3, [r7, #12]
   2706a:	4313      	orrs	r3, r2
   2706c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2706e:	683b      	ldr	r3, [r7, #0]
   27070:	781b      	ldrb	r3, [r3, #0]
   27072:	001a      	movs	r2, r3
   27074:	68fb      	ldr	r3, [r7, #12]
   27076:	4313      	orrs	r3, r2
   27078:	60fb      	str	r3, [r7, #12]

	return register_value;
   2707a:	68fb      	ldr	r3, [r7, #12]
}
   2707c:	0018      	movs	r0, r3
   2707e:	46bd      	mov	sp, r7
   27080:	b004      	add	sp, #16
   27082:	bd80      	pop	{r7, pc}

00027084 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27084:	b580      	push	{r7, lr}
   27086:	b084      	sub	sp, #16
   27088:	af00      	add	r7, sp, #0
   2708a:	60f8      	str	r0, [r7, #12]
   2708c:	60b9      	str	r1, [r7, #8]
   2708e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27090:	68bb      	ldr	r3, [r7, #8]
   27092:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27094:	b29a      	uxth	r2, r3
   27096:	68fb      	ldr	r3, [r7, #12]
   27098:	88db      	ldrh	r3, [r3, #6]
   2709a:	18d3      	adds	r3, r2, r3
   2709c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2709e:	687b      	ldr	r3, [r7, #4]
   270a0:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   270a2:	68bb      	ldr	r3, [r7, #8]
   270a4:	0d9b      	lsrs	r3, r3, #22
   270a6:	b2db      	uxtb	r3, r3
   270a8:	220f      	movs	r2, #15
   270aa:	4013      	ands	r3, r2
   270ac:	b2da      	uxtb	r2, r3
   270ae:	687b      	ldr	r3, [r7, #4]
   270b0:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   270b2:	68bb      	ldr	r3, [r7, #8]
   270b4:	0c5b      	lsrs	r3, r3, #17
   270b6:	b2db      	uxtb	r3, r3
   270b8:	221f      	movs	r2, #31
   270ba:	4013      	ands	r3, r2
   270bc:	b2da      	uxtb	r2, r3
   270be:	687b      	ldr	r3, [r7, #4]
   270c0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   270c2:	68fb      	ldr	r3, [r7, #12]
   270c4:	791b      	ldrb	r3, [r3, #4]
   270c6:	2b00      	cmp	r3, #0
   270c8:	d008      	beq.n	270dc <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   270ca:	68bb      	ldr	r3, [r7, #8]
   270cc:	0b1b      	lsrs	r3, r3, #12
   270ce:	b2db      	uxtb	r3, r3
   270d0:	221f      	movs	r2, #31
   270d2:	4013      	ands	r3, r2
   270d4:	b2da      	uxtb	r2, r3
   270d6:	687b      	ldr	r3, [r7, #4]
   270d8:	709a      	strb	r2, [r3, #2]
   270da:	e010      	b.n	270fe <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   270dc:	68bb      	ldr	r3, [r7, #8]
   270de:	0b1b      	lsrs	r3, r3, #12
   270e0:	b2db      	uxtb	r3, r3
   270e2:	220f      	movs	r2, #15
   270e4:	4013      	ands	r3, r2
   270e6:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   270e8:	687b      	ldr	r3, [r7, #4]
   270ea:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   270ec:	68ba      	ldr	r2, [r7, #8]
   270ee:	2380      	movs	r3, #128	; 0x80
   270f0:	025b      	lsls	r3, r3, #9
   270f2:	4013      	ands	r3, r2
   270f4:	1e5a      	subs	r2, r3, #1
   270f6:	4193      	sbcs	r3, r2
   270f8:	b2da      	uxtb	r2, r3
   270fa:	687b      	ldr	r3, [r7, #4]
   270fc:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   270fe:	68bb      	ldr	r3, [r7, #8]
   27100:	099b      	lsrs	r3, r3, #6
   27102:	b2db      	uxtb	r3, r3
   27104:	223f      	movs	r2, #63	; 0x3f
   27106:	4013      	ands	r3, r2
   27108:	b2da      	uxtb	r2, r3
   2710a:	687b      	ldr	r3, [r7, #4]
   2710c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2710e:	68bb      	ldr	r3, [r7, #8]
   27110:	b2db      	uxtb	r3, r3
   27112:	223f      	movs	r2, #63	; 0x3f
   27114:	4013      	ands	r3, r2
   27116:	b2da      	uxtb	r2, r3
   27118:	687b      	ldr	r3, [r7, #4]
   2711a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   2711c:	46c0      	nop			; (mov r8, r8)
   2711e:	46bd      	mov	sp, r7
   27120:	b004      	add	sp, #16
   27122:	bd80      	pop	{r7, pc}

00027124 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27124:	b580      	push	{r7, lr}
   27126:	b084      	sub	sp, #16
   27128:	af00      	add	r7, sp, #0
   2712a:	6078      	str	r0, [r7, #4]
   2712c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2712e:	687b      	ldr	r3, [r7, #4]
   27130:	681b      	ldr	r3, [r3, #0]
   27132:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27134:	683b      	ldr	r3, [r7, #0]
   27136:	881a      	ldrh	r2, [r3, #0]
   27138:	230e      	movs	r3, #14
   2713a:	18fb      	adds	r3, r7, r3
   2713c:	2108      	movs	r1, #8
   2713e:	430a      	orrs	r2, r1
   27140:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   27142:	683b      	ldr	r3, [r7, #0]
   27144:	791b      	ldrb	r3, [r3, #4]
   27146:	2201      	movs	r2, #1
   27148:	4053      	eors	r3, r2
   2714a:	b2db      	uxtb	r3, r3
   2714c:	2b00      	cmp	r3, #0
   2714e:	d007      	beq.n	27160 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   27150:	230e      	movs	r3, #14
   27152:	18fb      	adds	r3, r7, r3
   27154:	220e      	movs	r2, #14
   27156:	18ba      	adds	r2, r7, r2
   27158:	8812      	ldrh	r2, [r2, #0]
   2715a:	2140      	movs	r1, #64	; 0x40
   2715c:	430a      	orrs	r2, r1
   2715e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   27160:	683b      	ldr	r3, [r7, #0]
   27162:	789b      	ldrb	r3, [r3, #2]
   27164:	2b00      	cmp	r3, #0
   27166:	d007      	beq.n	27178 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27168:	230e      	movs	r3, #14
   2716a:	18fb      	adds	r3, r7, r3
   2716c:	220e      	movs	r2, #14
   2716e:	18ba      	adds	r2, r7, r2
   27170:	8812      	ldrh	r2, [r2, #0]
   27172:	2180      	movs	r1, #128	; 0x80
   27174:	430a      	orrs	r2, r1
   27176:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27178:	68bb      	ldr	r3, [r7, #8]
   2717a:	220e      	movs	r2, #14
   2717c:	18ba      	adds	r2, r7, r2
   2717e:	8812      	ldrh	r2, [r2, #0]
   27180:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   27182:	683b      	ldr	r3, [r7, #0]
   27184:	78db      	ldrb	r3, [r3, #3]
   27186:	2b00      	cmp	r3, #0
   27188:	d008      	beq.n	2719c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   2718a:	68bb      	ldr	r3, [r7, #8]
   2718c:	885b      	ldrh	r3, [r3, #2]
   2718e:	b29b      	uxth	r3, r3
   27190:	2280      	movs	r2, #128	; 0x80
   27192:	01d2      	lsls	r2, r2, #7
   27194:	4313      	orrs	r3, r2
   27196:	b29a      	uxth	r2, r3
   27198:	68bb      	ldr	r3, [r7, #8]
   2719a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2719c:	230d      	movs	r3, #13
   2719e:	18fb      	adds	r3, r7, r3
   271a0:	2200      	movs	r2, #0
   271a2:	701a      	strb	r2, [r3, #0]
   271a4:	e017      	b.n	271d6 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   271a6:	230d      	movs	r3, #13
   271a8:	18fb      	adds	r3, r7, r3
   271aa:	781a      	ldrb	r2, [r3, #0]
   271ac:	0013      	movs	r3, r2
   271ae:	009b      	lsls	r3, r3, #2
   271b0:	189b      	adds	r3, r3, r2
   271b2:	005b      	lsls	r3, r3, #1
   271b4:	3308      	adds	r3, #8
   271b6:	683a      	ldr	r2, [r7, #0]
   271b8:	18d1      	adds	r1, r2, r3
   271ba:	230d      	movs	r3, #13
   271bc:	18fb      	adds	r3, r7, r3
   271be:	781a      	ldrb	r2, [r3, #0]
   271c0:	687b      	ldr	r3, [r7, #4]
   271c2:	0018      	movs	r0, r3
   271c4:	4b08      	ldr	r3, [pc, #32]	; (271e8 <_rtc_calendar_set_config+0xc4>)
   271c6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   271c8:	230d      	movs	r3, #13
   271ca:	18fb      	adds	r3, r7, r3
   271cc:	781a      	ldrb	r2, [r3, #0]
   271ce:	230d      	movs	r3, #13
   271d0:	18fb      	adds	r3, r7, r3
   271d2:	3201      	adds	r2, #1
   271d4:	701a      	strb	r2, [r3, #0]
   271d6:	230d      	movs	r3, #13
   271d8:	18fb      	adds	r3, r7, r3
   271da:	781b      	ldrb	r3, [r3, #0]
   271dc:	2b00      	cmp	r3, #0
   271de:	d0e2      	beq.n	271a6 <_rtc_calendar_set_config+0x82>
	}
}
   271e0:	46c0      	nop			; (mov r8, r8)
   271e2:	46bd      	mov	sp, r7
   271e4:	b004      	add	sp, #16
   271e6:	bd80      	pop	{r7, pc}
   271e8:	0002730d 	.word	0x0002730d

000271ec <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   271ec:	b580      	push	{r7, lr}
   271ee:	b086      	sub	sp, #24
   271f0:	af00      	add	r7, sp, #0
   271f2:	60f8      	str	r0, [r7, #12]
   271f4:	60b9      	str	r1, [r7, #8]
   271f6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   271f8:	68fb      	ldr	r3, [r7, #12]
   271fa:	68ba      	ldr	r2, [r7, #8]
   271fc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   271fe:	2120      	movs	r1, #32
   27200:	2000      	movs	r0, #0
   27202:	4b18      	ldr	r3, [pc, #96]	; (27264 <rtc_calendar_init+0x78>)
   27204:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27206:	2314      	movs	r3, #20
   27208:	18fb      	adds	r3, r7, r3
   2720a:	0018      	movs	r0, r3
   2720c:	4b16      	ldr	r3, [pc, #88]	; (27268 <rtc_calendar_init+0x7c>)
   2720e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   27210:	2314      	movs	r3, #20
   27212:	18fb      	adds	r3, r7, r3
   27214:	2202      	movs	r2, #2
   27216:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27218:	2314      	movs	r3, #20
   2721a:	18fb      	adds	r3, r7, r3
   2721c:	0019      	movs	r1, r3
   2721e:	2004      	movs	r0, #4
   27220:	4b12      	ldr	r3, [pc, #72]	; (2726c <rtc_calendar_init+0x80>)
   27222:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27224:	2004      	movs	r0, #4
   27226:	4b12      	ldr	r3, [pc, #72]	; (27270 <rtc_calendar_init+0x84>)
   27228:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   2722a:	68fb      	ldr	r3, [r7, #12]
   2722c:	0018      	movs	r0, r3
   2722e:	4b11      	ldr	r3, [pc, #68]	; (27274 <rtc_calendar_init+0x88>)
   27230:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   27232:	687b      	ldr	r3, [r7, #4]
   27234:	791a      	ldrb	r2, [r3, #4]
   27236:	68fb      	ldr	r3, [r7, #12]
   27238:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   2723a:	687b      	ldr	r3, [r7, #4]
   2723c:	78da      	ldrb	r2, [r3, #3]
   2723e:	68fb      	ldr	r3, [r7, #12]
   27240:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   27242:	687b      	ldr	r3, [r7, #4]
   27244:	88da      	ldrh	r2, [r3, #6]
   27246:	68fb      	ldr	r3, [r7, #12]
   27248:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   2724a:	4b0b      	ldr	r3, [pc, #44]	; (27278 <rtc_calendar_init+0x8c>)
   2724c:	68fa      	ldr	r2, [r7, #12]
   2724e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   27250:	687a      	ldr	r2, [r7, #4]
   27252:	68fb      	ldr	r3, [r7, #12]
   27254:	0011      	movs	r1, r2
   27256:	0018      	movs	r0, r3
   27258:	4b08      	ldr	r3, [pc, #32]	; (2727c <rtc_calendar_init+0x90>)
   2725a:	4798      	blx	r3
}
   2725c:	46c0      	nop			; (mov r8, r8)
   2725e:	46bd      	mov	sp, r7
   27260:	b006      	add	sp, #24
   27262:	bd80      	pop	{r7, pc}
   27264:	00026e39 	.word	0x00026e39
   27268:	00026e21 	.word	0x00026e21
   2726c:	0002a251 	.word	0x0002a251
   27270:	0002a295 	.word	0x0002a295
   27274:	00026fad 	.word	0x00026fad
   27278:	20005c40 	.word	0x20005c40
   2727c:	00027125 	.word	0x00027125

00027280 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27280:	b580      	push	{r7, lr}
   27282:	b084      	sub	sp, #16
   27284:	af00      	add	r7, sp, #0
   27286:	6078      	str	r0, [r7, #4]
   27288:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2728a:	687b      	ldr	r3, [r7, #4]
   2728c:	681b      	ldr	r3, [r3, #0]
   2728e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27290:	687b      	ldr	r3, [r7, #4]
   27292:	795b      	ldrb	r3, [r3, #5]
   27294:	2201      	movs	r2, #1
   27296:	4053      	eors	r3, r2
   27298:	b2db      	uxtb	r3, r3
   2729a:	2b00      	cmp	r3, #0
   2729c:	d00a      	beq.n	272b4 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   2729e:	68fb      	ldr	r3, [r7, #12]
   272a0:	4a16      	ldr	r2, [pc, #88]	; (272fc <rtc_calendar_get_time+0x7c>)
   272a2:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   272a4:	46c0      	nop			; (mov r8, r8)
   272a6:	687b      	ldr	r3, [r7, #4]
   272a8:	0018      	movs	r0, r3
   272aa:	4b15      	ldr	r3, [pc, #84]	; (27300 <rtc_calendar_get_time+0x80>)
   272ac:	4798      	blx	r3
   272ae:	1e03      	subs	r3, r0, #0
   272b0:	d1f9      	bne.n	272a6 <rtc_calendar_get_time+0x26>
   272b2:	e016      	b.n	272e2 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   272b4:	68fb      	ldr	r3, [r7, #12]
   272b6:	885b      	ldrh	r3, [r3, #2]
   272b8:	b29b      	uxth	r3, r3
   272ba:	001a      	movs	r2, r3
   272bc:	2380      	movs	r3, #128	; 0x80
   272be:	01db      	lsls	r3, r3, #7
   272c0:	4013      	ands	r3, r2
   272c2:	d10e      	bne.n	272e2 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   272c4:	68fb      	ldr	r3, [r7, #12]
   272c6:	885b      	ldrh	r3, [r3, #2]
   272c8:	b29b      	uxth	r3, r3
   272ca:	4a0e      	ldr	r2, [pc, #56]	; (27304 <rtc_calendar_get_time+0x84>)
   272cc:	4313      	orrs	r3, r2
   272ce:	b29a      	uxth	r2, r3
   272d0:	68fb      	ldr	r3, [r7, #12]
   272d2:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   272d4:	46c0      	nop			; (mov r8, r8)
   272d6:	687b      	ldr	r3, [r7, #4]
   272d8:	0018      	movs	r0, r3
   272da:	4b09      	ldr	r3, [pc, #36]	; (27300 <rtc_calendar_get_time+0x80>)
   272dc:	4798      	blx	r3
   272de:	1e03      	subs	r3, r0, #0
   272e0:	d1f9      	bne.n	272d6 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   272e2:	68fb      	ldr	r3, [r7, #12]
   272e4:	691b      	ldr	r3, [r3, #16]
   272e6:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   272e8:	683a      	ldr	r2, [r7, #0]
   272ea:	68b9      	ldr	r1, [r7, #8]
   272ec:	687b      	ldr	r3, [r7, #4]
   272ee:	0018      	movs	r0, r3
   272f0:	4b05      	ldr	r3, [pc, #20]	; (27308 <rtc_calendar_get_time+0x88>)
   272f2:	4798      	blx	r3
}
   272f4:	46c0      	nop			; (mov r8, r8)
   272f6:	46bd      	mov	sp, r7
   272f8:	b004      	add	sp, #16
   272fa:	bd80      	pop	{r7, pc}
   272fc:	ffff8000 	.word	0xffff8000
   27300:	00026ef1 	.word	0x00026ef1
   27304:	ffffc000 	.word	0xffffc000
   27308:	00027085 	.word	0x00027085

0002730c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   2730c:	b580      	push	{r7, lr}
   2730e:	b086      	sub	sp, #24
   27310:	af00      	add	r7, sp, #0
   27312:	60f8      	str	r0, [r7, #12]
   27314:	60b9      	str	r1, [r7, #8]
   27316:	1dfb      	adds	r3, r7, #7
   27318:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2731a:	68fb      	ldr	r3, [r7, #12]
   2731c:	681b      	ldr	r3, [r3, #0]
   2731e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27320:	1dfb      	adds	r3, r7, #7
   27322:	781b      	ldrb	r3, [r3, #0]
   27324:	2b01      	cmp	r3, #1
   27326:	d901      	bls.n	2732c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27328:	2317      	movs	r3, #23
   2732a:	e021      	b.n	27370 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   2732c:	68ba      	ldr	r2, [r7, #8]
   2732e:	68fb      	ldr	r3, [r7, #12]
   27330:	0011      	movs	r1, r2
   27332:	0018      	movs	r0, r3
   27334:	4b10      	ldr	r3, [pc, #64]	; (27378 <rtc_calendar_set_alarm+0x6c>)
   27336:	4798      	blx	r3
   27338:	0003      	movs	r3, r0
   2733a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   2733c:	46c0      	nop			; (mov r8, r8)
   2733e:	68fb      	ldr	r3, [r7, #12]
   27340:	0018      	movs	r0, r3
   27342:	4b0e      	ldr	r3, [pc, #56]	; (2737c <rtc_calendar_set_alarm+0x70>)
   27344:	4798      	blx	r3
   27346:	1e03      	subs	r3, r0, #0
   27348:	d1f9      	bne.n	2733e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   2734a:	1dfb      	adds	r3, r7, #7
   2734c:	781a      	ldrb	r2, [r3, #0]
   2734e:	697b      	ldr	r3, [r7, #20]
   27350:	3203      	adds	r2, #3
   27352:	00d2      	lsls	r2, r2, #3
   27354:	6939      	ldr	r1, [r7, #16]
   27356:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27358:	1dfb      	adds	r3, r7, #7
   2735a:	781b      	ldrb	r3, [r3, #0]
   2735c:	68ba      	ldr	r2, [r7, #8]
   2735e:	7a11      	ldrb	r1, [r2, #8]
   27360:	697a      	ldr	r2, [r7, #20]
   27362:	3303      	adds	r3, #3
   27364:	00db      	lsls	r3, r3, #3
   27366:	18d3      	adds	r3, r2, r3
   27368:	3304      	adds	r3, #4
   2736a:	1c0a      	adds	r2, r1, #0
   2736c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2736e:	2300      	movs	r3, #0
}
   27370:	0018      	movs	r0, r3
   27372:	46bd      	mov	sp, r7
   27374:	b006      	add	sp, #24
   27376:	bd80      	pop	{r7, pc}
   27378:	00026ffd 	.word	0x00026ffd
   2737c:	00026ef1 	.word	0x00026ef1

00027380 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27380:	b580      	push	{r7, lr}
   27382:	b086      	sub	sp, #24
   27384:	af00      	add	r7, sp, #0
   27386:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27388:	4b28      	ldr	r3, [pc, #160]	; (2742c <_rtc_interrupt_handler+0xac>)
   2738a:	687a      	ldr	r2, [r7, #4]
   2738c:	0092      	lsls	r2, r2, #2
   2738e:	58d3      	ldr	r3, [r2, r3]
   27390:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27392:	697b      	ldr	r3, [r7, #20]
   27394:	681b      	ldr	r3, [r3, #0]
   27396:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27398:	230e      	movs	r3, #14
   2739a:	18fb      	adds	r3, r7, r3
   2739c:	697a      	ldr	r2, [r7, #20]
   2739e:	8a52      	ldrh	r2, [r2, #18]
   273a0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   273a2:	697b      	ldr	r3, [r7, #20]
   273a4:	8a1b      	ldrh	r3, [r3, #16]
   273a6:	b29a      	uxth	r2, r3
   273a8:	230e      	movs	r3, #14
   273aa:	18fb      	adds	r3, r7, r3
   273ac:	210e      	movs	r1, #14
   273ae:	1879      	adds	r1, r7, r1
   273b0:	8809      	ldrh	r1, [r1, #0]
   273b2:	400a      	ands	r2, r1
   273b4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   273b6:	693b      	ldr	r3, [r7, #16]
   273b8:	7a1b      	ldrb	r3, [r3, #8]
   273ba:	b2da      	uxtb	r2, r3
   273bc:	230c      	movs	r3, #12
   273be:	18fb      	adds	r3, r7, r3
   273c0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   273c2:	693b      	ldr	r3, [r7, #16]
   273c4:	79db      	ldrb	r3, [r3, #7]
   273c6:	b2db      	uxtb	r3, r3
   273c8:	b29a      	uxth	r2, r3
   273ca:	230c      	movs	r3, #12
   273cc:	18fb      	adds	r3, r7, r3
   273ce:	210c      	movs	r1, #12
   273d0:	1879      	adds	r1, r7, r1
   273d2:	8809      	ldrh	r1, [r1, #0]
   273d4:	400a      	ands	r2, r1
   273d6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   273d8:	230c      	movs	r3, #12
   273da:	18fb      	adds	r3, r7, r3
   273dc:	881b      	ldrh	r3, [r3, #0]
   273de:	2280      	movs	r2, #128	; 0x80
   273e0:	4013      	ands	r3, r2
   273e2:	d00c      	beq.n	273fe <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   273e4:	230e      	movs	r3, #14
   273e6:	18fb      	adds	r3, r7, r3
   273e8:	881b      	ldrh	r3, [r3, #0]
   273ea:	2202      	movs	r2, #2
   273ec:	4013      	ands	r3, r2
   273ee:	d002      	beq.n	273f6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   273f0:	697b      	ldr	r3, [r7, #20]
   273f2:	68db      	ldr	r3, [r3, #12]
   273f4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   273f6:	693b      	ldr	r3, [r7, #16]
   273f8:	2280      	movs	r2, #128	; 0x80
   273fa:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   273fc:	e011      	b.n	27422 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   273fe:	230c      	movs	r3, #12
   27400:	18fb      	adds	r3, r7, r3
   27402:	881b      	ldrh	r3, [r3, #0]
   27404:	2201      	movs	r2, #1
   27406:	4013      	ands	r3, r2
   27408:	d00b      	beq.n	27422 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   2740a:	230e      	movs	r3, #14
   2740c:	18fb      	adds	r3, r7, r3
   2740e:	881b      	ldrh	r3, [r3, #0]
   27410:	2201      	movs	r2, #1
   27412:	4013      	ands	r3, r2
   27414:	d002      	beq.n	2741c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27416:	697b      	ldr	r3, [r7, #20]
   27418:	689b      	ldr	r3, [r3, #8]
   2741a:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   2741c:	693b      	ldr	r3, [r7, #16]
   2741e:	2201      	movs	r2, #1
   27420:	721a      	strb	r2, [r3, #8]
}
   27422:	46c0      	nop			; (mov r8, r8)
   27424:	46bd      	mov	sp, r7
   27426:	b006      	add	sp, #24
   27428:	bd80      	pop	{r7, pc}
   2742a:	46c0      	nop			; (mov r8, r8)
   2742c:	20005c40 	.word	0x20005c40

00027430 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27430:	b580      	push	{r7, lr}
   27432:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27434:	2000      	movs	r0, #0
   27436:	4b02      	ldr	r3, [pc, #8]	; (27440 <RTC_Handler+0x10>)
   27438:	4798      	blx	r3
}
   2743a:	46c0      	nop			; (mov r8, r8)
   2743c:	46bd      	mov	sp, r7
   2743e:	bd80      	pop	{r7, pc}
   27440:	00027381 	.word	0x00027381

00027444 <system_gclk_chan_get_config_defaults>:
{
   27444:	b580      	push	{r7, lr}
   27446:	b082      	sub	sp, #8
   27448:	af00      	add	r7, sp, #0
   2744a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2744c:	687b      	ldr	r3, [r7, #4]
   2744e:	2200      	movs	r2, #0
   27450:	701a      	strb	r2, [r3, #0]
}
   27452:	46c0      	nop			; (mov r8, r8)
   27454:	46bd      	mov	sp, r7
   27456:	b002      	add	sp, #8
   27458:	bd80      	pop	{r7, pc}

0002745a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2745a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2745c:	b08d      	sub	sp, #52	; 0x34
   2745e:	af00      	add	r7, sp, #0
   27460:	60b8      	str	r0, [r7, #8]
   27462:	60f9      	str	r1, [r7, #12]
   27464:	603a      	str	r2, [r7, #0]
   27466:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27468:	2300      	movs	r3, #0
   2746a:	2400      	movs	r4, #0
   2746c:	623b      	str	r3, [r7, #32]
   2746e:	627c      	str	r4, [r7, #36]	; 0x24
   27470:	2300      	movs	r3, #0
   27472:	2400      	movs	r4, #0
   27474:	61bb      	str	r3, [r7, #24]
   27476:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27478:	233f      	movs	r3, #63	; 0x3f
   2747a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2747c:	e053      	b.n	27526 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27480:	3b20      	subs	r3, #32
   27482:	2b00      	cmp	r3, #0
   27484:	db04      	blt.n	27490 <long_division+0x36>
   27486:	2201      	movs	r2, #1
   27488:	409a      	lsls	r2, r3
   2748a:	0013      	movs	r3, r2
   2748c:	617b      	str	r3, [r7, #20]
   2748e:	e00b      	b.n	274a8 <long_division+0x4e>
   27490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27492:	2220      	movs	r2, #32
   27494:	1ad3      	subs	r3, r2, r3
   27496:	2201      	movs	r2, #1
   27498:	40da      	lsrs	r2, r3
   2749a:	0013      	movs	r3, r2
   2749c:	2100      	movs	r1, #0
   2749e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   274a0:	4091      	lsls	r1, r2
   274a2:	000a      	movs	r2, r1
   274a4:	4313      	orrs	r3, r2
   274a6:	617b      	str	r3, [r7, #20]
   274a8:	2201      	movs	r2, #1
   274aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   274ac:	409a      	lsls	r2, r3
   274ae:	0013      	movs	r3, r2
   274b0:	613b      	str	r3, [r7, #16]

		r = r << 1;
   274b2:	69bb      	ldr	r3, [r7, #24]
   274b4:	69fc      	ldr	r4, [r7, #28]
   274b6:	18db      	adds	r3, r3, r3
   274b8:	4164      	adcs	r4, r4
   274ba:	61bb      	str	r3, [r7, #24]
   274bc:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   274be:	68bb      	ldr	r3, [r7, #8]
   274c0:	693a      	ldr	r2, [r7, #16]
   274c2:	401a      	ands	r2, r3
   274c4:	0015      	movs	r5, r2
   274c6:	68fb      	ldr	r3, [r7, #12]
   274c8:	697a      	ldr	r2, [r7, #20]
   274ca:	401a      	ands	r2, r3
   274cc:	0016      	movs	r6, r2
   274ce:	002b      	movs	r3, r5
   274d0:	4333      	orrs	r3, r6
   274d2:	d007      	beq.n	274e4 <long_division+0x8a>
			r |= 0x01;
   274d4:	69bb      	ldr	r3, [r7, #24]
   274d6:	2201      	movs	r2, #1
   274d8:	4313      	orrs	r3, r2
   274da:	61bb      	str	r3, [r7, #24]
   274dc:	69fb      	ldr	r3, [r7, #28]
   274de:	2200      	movs	r2, #0
   274e0:	4313      	orrs	r3, r2
   274e2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   274e4:	687a      	ldr	r2, [r7, #4]
   274e6:	69fb      	ldr	r3, [r7, #28]
   274e8:	429a      	cmp	r2, r3
   274ea:	d819      	bhi.n	27520 <long_division+0xc6>
   274ec:	687a      	ldr	r2, [r7, #4]
   274ee:	69fb      	ldr	r3, [r7, #28]
   274f0:	429a      	cmp	r2, r3
   274f2:	d103      	bne.n	274fc <long_division+0xa2>
   274f4:	683a      	ldr	r2, [r7, #0]
   274f6:	69bb      	ldr	r3, [r7, #24]
   274f8:	429a      	cmp	r2, r3
   274fa:	d811      	bhi.n	27520 <long_division+0xc6>
			r = r - d;
   274fc:	69b9      	ldr	r1, [r7, #24]
   274fe:	69fa      	ldr	r2, [r7, #28]
   27500:	683b      	ldr	r3, [r7, #0]
   27502:	687c      	ldr	r4, [r7, #4]
   27504:	1ac9      	subs	r1, r1, r3
   27506:	41a2      	sbcs	r2, r4
   27508:	000b      	movs	r3, r1
   2750a:	0014      	movs	r4, r2
   2750c:	61bb      	str	r3, [r7, #24]
   2750e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27510:	6a3a      	ldr	r2, [r7, #32]
   27512:	693b      	ldr	r3, [r7, #16]
   27514:	4313      	orrs	r3, r2
   27516:	623b      	str	r3, [r7, #32]
   27518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2751a:	697b      	ldr	r3, [r7, #20]
   2751c:	4313      	orrs	r3, r2
   2751e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27522:	3b01      	subs	r3, #1
   27524:	62fb      	str	r3, [r7, #44]	; 0x2c
   27526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27528:	2b00      	cmp	r3, #0
   2752a:	daa8      	bge.n	2747e <long_division+0x24>
		}
	}

	return q;
   2752c:	6a3b      	ldr	r3, [r7, #32]
   2752e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27530:	0018      	movs	r0, r3
   27532:	0021      	movs	r1, r4
   27534:	46bd      	mov	sp, r7
   27536:	b00d      	add	sp, #52	; 0x34
   27538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002753a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   2753a:	b580      	push	{r7, lr}
   2753c:	b086      	sub	sp, #24
   2753e:	af00      	add	r7, sp, #0
   27540:	60f8      	str	r0, [r7, #12]
   27542:	60b9      	str	r1, [r7, #8]
   27544:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27546:	2316      	movs	r3, #22
   27548:	18fb      	adds	r3, r7, r3
   2754a:	2200      	movs	r2, #0
   2754c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2754e:	68bb      	ldr	r3, [r7, #8]
   27550:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27552:	68bb      	ldr	r3, [r7, #8]
   27554:	085a      	lsrs	r2, r3, #1
   27556:	68fb      	ldr	r3, [r7, #12]
   27558:	429a      	cmp	r2, r3
   2755a:	d201      	bcs.n	27560 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2755c:	2340      	movs	r3, #64	; 0x40
   2755e:	e026      	b.n	275ae <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27560:	68bb      	ldr	r3, [r7, #8]
   27562:	085b      	lsrs	r3, r3, #1
   27564:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27566:	e00a      	b.n	2757e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27568:	693a      	ldr	r2, [r7, #16]
   2756a:	68fb      	ldr	r3, [r7, #12]
   2756c:	1ad3      	subs	r3, r2, r3
   2756e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27570:	2316      	movs	r3, #22
   27572:	18fb      	adds	r3, r7, r3
   27574:	881a      	ldrh	r2, [r3, #0]
   27576:	2316      	movs	r3, #22
   27578:	18fb      	adds	r3, r7, r3
   2757a:	3201      	adds	r2, #1
   2757c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2757e:	693a      	ldr	r2, [r7, #16]
   27580:	68fb      	ldr	r3, [r7, #12]
   27582:	429a      	cmp	r2, r3
   27584:	d2f0      	bcs.n	27568 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27586:	2316      	movs	r3, #22
   27588:	18fb      	adds	r3, r7, r3
   2758a:	2216      	movs	r2, #22
   2758c:	18ba      	adds	r2, r7, r2
   2758e:	8812      	ldrh	r2, [r2, #0]
   27590:	3a01      	subs	r2, #1
   27592:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27594:	2316      	movs	r3, #22
   27596:	18fb      	adds	r3, r7, r3
   27598:	881b      	ldrh	r3, [r3, #0]
   2759a:	2bff      	cmp	r3, #255	; 0xff
   2759c:	d901      	bls.n	275a2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2759e:	2340      	movs	r3, #64	; 0x40
   275a0:	e005      	b.n	275ae <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   275a2:	687b      	ldr	r3, [r7, #4]
   275a4:	2216      	movs	r2, #22
   275a6:	18ba      	adds	r2, r7, r2
   275a8:	8812      	ldrh	r2, [r2, #0]
   275aa:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   275ac:	2300      	movs	r3, #0
	}
}
   275ae:	0018      	movs	r0, r3
   275b0:	46bd      	mov	sp, r7
   275b2:	b006      	add	sp, #24
   275b4:	bd80      	pop	{r7, pc}
	...

000275b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   275b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   275ba:	b0a1      	sub	sp, #132	; 0x84
   275bc:	af00      	add	r7, sp, #0
   275be:	64f8      	str	r0, [r7, #76]	; 0x4c
   275c0:	64b9      	str	r1, [r7, #72]	; 0x48
   275c2:	647a      	str	r2, [r7, #68]	; 0x44
   275c4:	2243      	movs	r2, #67	; 0x43
   275c6:	18ba      	adds	r2, r7, r2
   275c8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   275ca:	2300      	movs	r3, #0
   275cc:	2400      	movs	r4, #0
   275ce:	673b      	str	r3, [r7, #112]	; 0x70
   275d0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   275d2:	2300      	movs	r3, #0
   275d4:	2400      	movs	r4, #0
   275d6:	66bb      	str	r3, [r7, #104]	; 0x68
   275d8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   275da:	2300      	movs	r3, #0
   275dc:	2400      	movs	r4, #0
   275de:	67bb      	str	r3, [r7, #120]	; 0x78
   275e0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   275e2:	2300      	movs	r3, #0
   275e4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   275e6:	2358      	movs	r3, #88	; 0x58
   275e8:	2240      	movs	r2, #64	; 0x40
   275ea:	4694      	mov	ip, r2
   275ec:	44bc      	add	ip, r7
   275ee:	4463      	add	r3, ip
   275f0:	781a      	ldrb	r2, [r3, #0]
   275f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   275f4:	435a      	muls	r2, r3
   275f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   275f8:	429a      	cmp	r2, r3
   275fa:	d901      	bls.n	27600 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   275fc:	2340      	movs	r3, #64	; 0x40
   275fe:	e0b3      	b.n	27768 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27600:	2343      	movs	r3, #67	; 0x43
   27602:	18fb      	adds	r3, r7, r3
   27604:	781b      	ldrb	r3, [r3, #0]
   27606:	2b00      	cmp	r3, #0
   27608:	d13d      	bne.n	27686 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   2760a:	2358      	movs	r3, #88	; 0x58
   2760c:	2240      	movs	r2, #64	; 0x40
   2760e:	4694      	mov	ip, r2
   27610:	44bc      	add	ip, r7
   27612:	4463      	add	r3, ip
   27614:	781b      	ldrb	r3, [r3, #0]
   27616:	b2db      	uxtb	r3, r3
   27618:	613b      	str	r3, [r7, #16]
   2761a:	2300      	movs	r3, #0
   2761c:	617b      	str	r3, [r7, #20]
   2761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27620:	60bb      	str	r3, [r7, #8]
   27622:	2300      	movs	r3, #0
   27624:	60fb      	str	r3, [r7, #12]
   27626:	4c52      	ldr	r4, [pc, #328]	; (27770 <_sercom_get_async_baud_val+0x1b8>)
   27628:	68ba      	ldr	r2, [r7, #8]
   2762a:	68fb      	ldr	r3, [r7, #12]
   2762c:	6938      	ldr	r0, [r7, #16]
   2762e:	6979      	ldr	r1, [r7, #20]
   27630:	47a0      	blx	r4
   27632:	0003      	movs	r3, r0
   27634:	000c      	movs	r4, r1
   27636:	001b      	movs	r3, r3
   27638:	65fb      	str	r3, [r7, #92]	; 0x5c
   2763a:	2300      	movs	r3, #0
   2763c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   2763e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27640:	603b      	str	r3, [r7, #0]
   27642:	2300      	movs	r3, #0
   27644:	607b      	str	r3, [r7, #4]
   27646:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27648:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2764a:	683a      	ldr	r2, [r7, #0]
   2764c:	687b      	ldr	r3, [r7, #4]
   2764e:	4c49      	ldr	r4, [pc, #292]	; (27774 <_sercom_get_async_baud_val+0x1bc>)
   27650:	47a0      	blx	r4
   27652:	0003      	movs	r3, r0
   27654:	000c      	movs	r4, r1
   27656:	673b      	str	r3, [r7, #112]	; 0x70
   27658:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2765a:	2100      	movs	r1, #0
   2765c:	2201      	movs	r2, #1
   2765e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27660:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27662:	1ac9      	subs	r1, r1, r3
   27664:	41a2      	sbcs	r2, r4
   27666:	000b      	movs	r3, r1
   27668:	0014      	movs	r4, r2
   2766a:	66bb      	str	r3, [r7, #104]	; 0x68
   2766c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2766e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27670:	0c1b      	lsrs	r3, r3, #16
   27672:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27674:	0416      	lsls	r6, r2, #16
   27676:	431e      	orrs	r6, r3
   27678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2767a:	041d      	lsls	r5, r3, #16
   2767c:	0033      	movs	r3, r6
   2767e:	67bb      	str	r3, [r7, #120]	; 0x78
   27680:	2300      	movs	r3, #0
   27682:	67fb      	str	r3, [r7, #124]	; 0x7c
   27684:	e06a      	b.n	2775c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27686:	2343      	movs	r3, #67	; 0x43
   27688:	18fb      	adds	r3, r7, r3
   2768a:	781b      	ldrb	r3, [r3, #0]
   2768c:	2b01      	cmp	r3, #1
   2768e:	d165      	bne.n	2775c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27692:	633b      	str	r3, [r7, #48]	; 0x30
   27694:	2300      	movs	r3, #0
   27696:	637b      	str	r3, [r7, #52]	; 0x34
   27698:	2358      	movs	r3, #88	; 0x58
   2769a:	2240      	movs	r2, #64	; 0x40
   2769c:	4694      	mov	ip, r2
   2769e:	44bc      	add	ip, r7
   276a0:	4463      	add	r3, ip
   276a2:	781b      	ldrb	r3, [r3, #0]
   276a4:	b2db      	uxtb	r3, r3
   276a6:	62bb      	str	r3, [r7, #40]	; 0x28
   276a8:	2300      	movs	r3, #0
   276aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   276ac:	4c30      	ldr	r4, [pc, #192]	; (27770 <_sercom_get_async_baud_val+0x1b8>)
   276ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
   276b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   276b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   276b6:	47a0      	blx	r4
   276b8:	0003      	movs	r3, r0
   276ba:	000c      	movs	r4, r1
   276bc:	65bb      	str	r3, [r7, #88]	; 0x58
   276be:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   276c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   276c2:	623b      	str	r3, [r7, #32]
   276c4:	2300      	movs	r3, #0
   276c6:	627b      	str	r3, [r7, #36]	; 0x24
   276c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   276ca:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   276cc:	001a      	movs	r2, r3
   276ce:	0023      	movs	r3, r4
   276d0:	6a38      	ldr	r0, [r7, #32]
   276d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   276d4:	4c27      	ldr	r4, [pc, #156]	; (27774 <_sercom_get_async_baud_val+0x1bc>)
   276d6:	47a0      	blx	r4
   276d8:	0003      	movs	r3, r0
   276da:	000c      	movs	r4, r1
   276dc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   276de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   276e0:	2380      	movs	r3, #128	; 0x80
   276e2:	019b      	lsls	r3, r3, #6
   276e4:	429a      	cmp	r2, r3
   276e6:	d901      	bls.n	276ec <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   276e8:	2340      	movs	r3, #64	; 0x40
   276ea:	e03d      	b.n	27768 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   276ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   276ee:	61bb      	str	r3, [r7, #24]
   276f0:	2300      	movs	r3, #0
   276f2:	61fb      	str	r3, [r7, #28]
   276f4:	69b9      	ldr	r1, [r7, #24]
   276f6:	69fa      	ldr	r2, [r7, #28]
   276f8:	000b      	movs	r3, r1
   276fa:	0f5b      	lsrs	r3, r3, #29
   276fc:	0010      	movs	r0, r2
   276fe:	00c0      	lsls	r0, r0, #3
   27700:	63f8      	str	r0, [r7, #60]	; 0x3c
   27702:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27704:	4318      	orrs	r0, r3
   27706:	63f8      	str	r0, [r7, #60]	; 0x3c
   27708:	000b      	movs	r3, r1
   2770a:	00db      	lsls	r3, r3, #3
   2770c:	63bb      	str	r3, [r7, #56]	; 0x38
   2770e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27710:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27712:	001a      	movs	r2, r3
   27714:	0023      	movs	r3, r4
   27716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2771a:	4c16      	ldr	r4, [pc, #88]	; (27774 <_sercom_get_async_baud_val+0x1bc>)
   2771c:	47a0      	blx	r4
   2771e:	0003      	movs	r3, r0
   27720:	000c      	movs	r4, r1
   27722:	65bb      	str	r3, [r7, #88]	; 0x58
   27724:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27728:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2772a:	b2d9      	uxtb	r1, r3
   2772c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2772e:	b2db      	uxtb	r3, r3
   27730:	00db      	lsls	r3, r3, #3
   27732:	b2da      	uxtb	r2, r3
   27734:	2317      	movs	r3, #23
   27736:	2040      	movs	r0, #64	; 0x40
   27738:	4684      	mov	ip, r0
   2773a:	44bc      	add	ip, r7
   2773c:	4463      	add	r3, ip
   2773e:	1a8a      	subs	r2, r1, r2
   27740:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   27742:	2317      	movs	r3, #23
   27744:	2240      	movs	r2, #64	; 0x40
   27746:	4694      	mov	ip, r2
   27748:	44bc      	add	ip, r7
   2774a:	4463      	add	r3, ip
   2774c:	781b      	ldrb	r3, [r3, #0]
   2774e:	035b      	lsls	r3, r3, #13
   27750:	001a      	movs	r2, r3
   27752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27754:	4313      	orrs	r3, r2
   27756:	67bb      	str	r3, [r7, #120]	; 0x78
   27758:	2300      	movs	r3, #0
   2775a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   2775c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2775e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27760:	b29a      	uxth	r2, r3
   27762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27764:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27766:	2300      	movs	r3, #0
}
   27768:	0018      	movs	r0, r3
   2776a:	46bd      	mov	sp, r7
   2776c:	b021      	add	sp, #132	; 0x84
   2776e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27770:	00033081 	.word	0x00033081
   27774:	0002745b 	.word	0x0002745b

00027778 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27778:	b580      	push	{r7, lr}
   2777a:	b084      	sub	sp, #16
   2777c:	af00      	add	r7, sp, #0
   2777e:	0002      	movs	r2, r0
   27780:	1dfb      	adds	r3, r7, #7
   27782:	701a      	strb	r2, [r3, #0]
   27784:	1dbb      	adds	r3, r7, #6
   27786:	1c0a      	adds	r2, r1, #0
   27788:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2778a:	4b1a      	ldr	r3, [pc, #104]	; (277f4 <sercom_set_gclk_generator+0x7c>)
   2778c:	781b      	ldrb	r3, [r3, #0]
   2778e:	2201      	movs	r2, #1
   27790:	4053      	eors	r3, r2
   27792:	b2db      	uxtb	r3, r3
   27794:	2b00      	cmp	r3, #0
   27796:	d103      	bne.n	277a0 <sercom_set_gclk_generator+0x28>
   27798:	1dbb      	adds	r3, r7, #6
   2779a:	781b      	ldrb	r3, [r3, #0]
   2779c:	2b00      	cmp	r3, #0
   2779e:	d01b      	beq.n	277d8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   277a0:	230c      	movs	r3, #12
   277a2:	18fb      	adds	r3, r7, r3
   277a4:	0018      	movs	r0, r3
   277a6:	4b14      	ldr	r3, [pc, #80]	; (277f8 <sercom_set_gclk_generator+0x80>)
   277a8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   277aa:	230c      	movs	r3, #12
   277ac:	18fb      	adds	r3, r7, r3
   277ae:	1dfa      	adds	r2, r7, #7
   277b0:	7812      	ldrb	r2, [r2, #0]
   277b2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   277b4:	230c      	movs	r3, #12
   277b6:	18fb      	adds	r3, r7, r3
   277b8:	0019      	movs	r1, r3
   277ba:	2013      	movs	r0, #19
   277bc:	4b0f      	ldr	r3, [pc, #60]	; (277fc <sercom_set_gclk_generator+0x84>)
   277be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   277c0:	2013      	movs	r0, #19
   277c2:	4b0f      	ldr	r3, [pc, #60]	; (27800 <sercom_set_gclk_generator+0x88>)
   277c4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   277c6:	4b0b      	ldr	r3, [pc, #44]	; (277f4 <sercom_set_gclk_generator+0x7c>)
   277c8:	1dfa      	adds	r2, r7, #7
   277ca:	7812      	ldrb	r2, [r2, #0]
   277cc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   277ce:	4b09      	ldr	r3, [pc, #36]	; (277f4 <sercom_set_gclk_generator+0x7c>)
   277d0:	2201      	movs	r2, #1
   277d2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   277d4:	2300      	movs	r3, #0
   277d6:	e008      	b.n	277ea <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   277d8:	4b06      	ldr	r3, [pc, #24]	; (277f4 <sercom_set_gclk_generator+0x7c>)
   277da:	785b      	ldrb	r3, [r3, #1]
   277dc:	1dfa      	adds	r2, r7, #7
   277de:	7812      	ldrb	r2, [r2, #0]
   277e0:	429a      	cmp	r2, r3
   277e2:	d101      	bne.n	277e8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   277e4:	2300      	movs	r3, #0
   277e6:	e000      	b.n	277ea <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   277e8:	231d      	movs	r3, #29
}
   277ea:	0018      	movs	r0, r3
   277ec:	46bd      	mov	sp, r7
   277ee:	b004      	add	sp, #16
   277f0:	bd80      	pop	{r7, pc}
   277f2:	46c0      	nop			; (mov r8, r8)
   277f4:	200042bc 	.word	0x200042bc
   277f8:	00027445 	.word	0x00027445
   277fc:	0002a251 	.word	0x0002a251
   27800:	0002a295 	.word	0x0002a295

00027804 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27804:	b580      	push	{r7, lr}
   27806:	b082      	sub	sp, #8
   27808:	af00      	add	r7, sp, #0
   2780a:	6078      	str	r0, [r7, #4]
   2780c:	000a      	movs	r2, r1
   2780e:	1cfb      	adds	r3, r7, #3
   27810:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   27812:	687b      	ldr	r3, [r7, #4]
   27814:	4a4d      	ldr	r2, [pc, #308]	; (2794c <_sercom_get_default_pad+0x148>)
   27816:	4293      	cmp	r3, r2
   27818:	d03f      	beq.n	2789a <_sercom_get_default_pad+0x96>
   2781a:	4a4c      	ldr	r2, [pc, #304]	; (2794c <_sercom_get_default_pad+0x148>)
   2781c:	4293      	cmp	r3, r2
   2781e:	d806      	bhi.n	2782e <_sercom_get_default_pad+0x2a>
   27820:	4a4b      	ldr	r2, [pc, #300]	; (27950 <_sercom_get_default_pad+0x14c>)
   27822:	4293      	cmp	r3, r2
   27824:	d00f      	beq.n	27846 <_sercom_get_default_pad+0x42>
   27826:	4a4b      	ldr	r2, [pc, #300]	; (27954 <_sercom_get_default_pad+0x150>)
   27828:	4293      	cmp	r3, r2
   2782a:	d021      	beq.n	27870 <_sercom_get_default_pad+0x6c>
   2782c:	e089      	b.n	27942 <_sercom_get_default_pad+0x13e>
   2782e:	4a4a      	ldr	r2, [pc, #296]	; (27958 <_sercom_get_default_pad+0x154>)
   27830:	4293      	cmp	r3, r2
   27832:	d100      	bne.n	27836 <_sercom_get_default_pad+0x32>
   27834:	e05b      	b.n	278ee <_sercom_get_default_pad+0xea>
   27836:	4a49      	ldr	r2, [pc, #292]	; (2795c <_sercom_get_default_pad+0x158>)
   27838:	4293      	cmp	r3, r2
   2783a:	d100      	bne.n	2783e <_sercom_get_default_pad+0x3a>
   2783c:	e06c      	b.n	27918 <_sercom_get_default_pad+0x114>
   2783e:	4a48      	ldr	r2, [pc, #288]	; (27960 <_sercom_get_default_pad+0x15c>)
   27840:	4293      	cmp	r3, r2
   27842:	d03f      	beq.n	278c4 <_sercom_get_default_pad+0xc0>
   27844:	e07d      	b.n	27942 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   27846:	1cfb      	adds	r3, r7, #3
   27848:	781b      	ldrb	r3, [r3, #0]
   2784a:	2b01      	cmp	r3, #1
   2784c:	d00a      	beq.n	27864 <_sercom_get_default_pad+0x60>
   2784e:	dc02      	bgt.n	27856 <_sercom_get_default_pad+0x52>
   27850:	2b00      	cmp	r3, #0
   27852:	d005      	beq.n	27860 <_sercom_get_default_pad+0x5c>
   27854:	e075      	b.n	27942 <_sercom_get_default_pad+0x13e>
   27856:	2b02      	cmp	r3, #2
   27858:	d006      	beq.n	27868 <_sercom_get_default_pad+0x64>
   2785a:	2b03      	cmp	r3, #3
   2785c:	d006      	beq.n	2786c <_sercom_get_default_pad+0x68>
   2785e:	e070      	b.n	27942 <_sercom_get_default_pad+0x13e>
   27860:	4b40      	ldr	r3, [pc, #256]	; (27964 <_sercom_get_default_pad+0x160>)
   27862:	e06f      	b.n	27944 <_sercom_get_default_pad+0x140>
   27864:	4b40      	ldr	r3, [pc, #256]	; (27968 <_sercom_get_default_pad+0x164>)
   27866:	e06d      	b.n	27944 <_sercom_get_default_pad+0x140>
   27868:	4b40      	ldr	r3, [pc, #256]	; (2796c <_sercom_get_default_pad+0x168>)
   2786a:	e06b      	b.n	27944 <_sercom_get_default_pad+0x140>
   2786c:	4b40      	ldr	r3, [pc, #256]	; (27970 <_sercom_get_default_pad+0x16c>)
   2786e:	e069      	b.n	27944 <_sercom_get_default_pad+0x140>
   27870:	1cfb      	adds	r3, r7, #3
   27872:	781b      	ldrb	r3, [r3, #0]
   27874:	2b01      	cmp	r3, #1
   27876:	d00a      	beq.n	2788e <_sercom_get_default_pad+0x8a>
   27878:	dc02      	bgt.n	27880 <_sercom_get_default_pad+0x7c>
   2787a:	2b00      	cmp	r3, #0
   2787c:	d005      	beq.n	2788a <_sercom_get_default_pad+0x86>
   2787e:	e060      	b.n	27942 <_sercom_get_default_pad+0x13e>
   27880:	2b02      	cmp	r3, #2
   27882:	d006      	beq.n	27892 <_sercom_get_default_pad+0x8e>
   27884:	2b03      	cmp	r3, #3
   27886:	d006      	beq.n	27896 <_sercom_get_default_pad+0x92>
   27888:	e05b      	b.n	27942 <_sercom_get_default_pad+0x13e>
   2788a:	2303      	movs	r3, #3
   2788c:	e05a      	b.n	27944 <_sercom_get_default_pad+0x140>
   2788e:	4b39      	ldr	r3, [pc, #228]	; (27974 <_sercom_get_default_pad+0x170>)
   27890:	e058      	b.n	27944 <_sercom_get_default_pad+0x140>
   27892:	4b39      	ldr	r3, [pc, #228]	; (27978 <_sercom_get_default_pad+0x174>)
   27894:	e056      	b.n	27944 <_sercom_get_default_pad+0x140>
   27896:	4b39      	ldr	r3, [pc, #228]	; (2797c <_sercom_get_default_pad+0x178>)
   27898:	e054      	b.n	27944 <_sercom_get_default_pad+0x140>
   2789a:	1cfb      	adds	r3, r7, #3
   2789c:	781b      	ldrb	r3, [r3, #0]
   2789e:	2b01      	cmp	r3, #1
   278a0:	d00a      	beq.n	278b8 <_sercom_get_default_pad+0xb4>
   278a2:	dc02      	bgt.n	278aa <_sercom_get_default_pad+0xa6>
   278a4:	2b00      	cmp	r3, #0
   278a6:	d005      	beq.n	278b4 <_sercom_get_default_pad+0xb0>
   278a8:	e04b      	b.n	27942 <_sercom_get_default_pad+0x13e>
   278aa:	2b02      	cmp	r3, #2
   278ac:	d006      	beq.n	278bc <_sercom_get_default_pad+0xb8>
   278ae:	2b03      	cmp	r3, #3
   278b0:	d006      	beq.n	278c0 <_sercom_get_default_pad+0xbc>
   278b2:	e046      	b.n	27942 <_sercom_get_default_pad+0x13e>
   278b4:	4b32      	ldr	r3, [pc, #200]	; (27980 <_sercom_get_default_pad+0x17c>)
   278b6:	e045      	b.n	27944 <_sercom_get_default_pad+0x140>
   278b8:	4b32      	ldr	r3, [pc, #200]	; (27984 <_sercom_get_default_pad+0x180>)
   278ba:	e043      	b.n	27944 <_sercom_get_default_pad+0x140>
   278bc:	4b32      	ldr	r3, [pc, #200]	; (27988 <_sercom_get_default_pad+0x184>)
   278be:	e041      	b.n	27944 <_sercom_get_default_pad+0x140>
   278c0:	4b32      	ldr	r3, [pc, #200]	; (2798c <_sercom_get_default_pad+0x188>)
   278c2:	e03f      	b.n	27944 <_sercom_get_default_pad+0x140>
   278c4:	1cfb      	adds	r3, r7, #3
   278c6:	781b      	ldrb	r3, [r3, #0]
   278c8:	2b01      	cmp	r3, #1
   278ca:	d00a      	beq.n	278e2 <_sercom_get_default_pad+0xde>
   278cc:	dc02      	bgt.n	278d4 <_sercom_get_default_pad+0xd0>
   278ce:	2b00      	cmp	r3, #0
   278d0:	d005      	beq.n	278de <_sercom_get_default_pad+0xda>
   278d2:	e036      	b.n	27942 <_sercom_get_default_pad+0x13e>
   278d4:	2b02      	cmp	r3, #2
   278d6:	d006      	beq.n	278e6 <_sercom_get_default_pad+0xe2>
   278d8:	2b03      	cmp	r3, #3
   278da:	d006      	beq.n	278ea <_sercom_get_default_pad+0xe6>
   278dc:	e031      	b.n	27942 <_sercom_get_default_pad+0x13e>
   278de:	4b2c      	ldr	r3, [pc, #176]	; (27990 <_sercom_get_default_pad+0x18c>)
   278e0:	e030      	b.n	27944 <_sercom_get_default_pad+0x140>
   278e2:	4b2c      	ldr	r3, [pc, #176]	; (27994 <_sercom_get_default_pad+0x190>)
   278e4:	e02e      	b.n	27944 <_sercom_get_default_pad+0x140>
   278e6:	4b2c      	ldr	r3, [pc, #176]	; (27998 <_sercom_get_default_pad+0x194>)
   278e8:	e02c      	b.n	27944 <_sercom_get_default_pad+0x140>
   278ea:	4b2c      	ldr	r3, [pc, #176]	; (2799c <_sercom_get_default_pad+0x198>)
   278ec:	e02a      	b.n	27944 <_sercom_get_default_pad+0x140>
   278ee:	1cfb      	adds	r3, r7, #3
   278f0:	781b      	ldrb	r3, [r3, #0]
   278f2:	2b01      	cmp	r3, #1
   278f4:	d00a      	beq.n	2790c <_sercom_get_default_pad+0x108>
   278f6:	dc02      	bgt.n	278fe <_sercom_get_default_pad+0xfa>
   278f8:	2b00      	cmp	r3, #0
   278fa:	d005      	beq.n	27908 <_sercom_get_default_pad+0x104>
   278fc:	e021      	b.n	27942 <_sercom_get_default_pad+0x13e>
   278fe:	2b02      	cmp	r3, #2
   27900:	d006      	beq.n	27910 <_sercom_get_default_pad+0x10c>
   27902:	2b03      	cmp	r3, #3
   27904:	d006      	beq.n	27914 <_sercom_get_default_pad+0x110>
   27906:	e01c      	b.n	27942 <_sercom_get_default_pad+0x13e>
   27908:	4b25      	ldr	r3, [pc, #148]	; (279a0 <_sercom_get_default_pad+0x19c>)
   2790a:	e01b      	b.n	27944 <_sercom_get_default_pad+0x140>
   2790c:	4b25      	ldr	r3, [pc, #148]	; (279a4 <_sercom_get_default_pad+0x1a0>)
   2790e:	e019      	b.n	27944 <_sercom_get_default_pad+0x140>
   27910:	4b25      	ldr	r3, [pc, #148]	; (279a8 <_sercom_get_default_pad+0x1a4>)
   27912:	e017      	b.n	27944 <_sercom_get_default_pad+0x140>
   27914:	4b25      	ldr	r3, [pc, #148]	; (279ac <_sercom_get_default_pad+0x1a8>)
   27916:	e015      	b.n	27944 <_sercom_get_default_pad+0x140>
   27918:	1cfb      	adds	r3, r7, #3
   2791a:	781b      	ldrb	r3, [r3, #0]
   2791c:	2b01      	cmp	r3, #1
   2791e:	d00a      	beq.n	27936 <_sercom_get_default_pad+0x132>
   27920:	dc02      	bgt.n	27928 <_sercom_get_default_pad+0x124>
   27922:	2b00      	cmp	r3, #0
   27924:	d005      	beq.n	27932 <_sercom_get_default_pad+0x12e>
   27926:	e00c      	b.n	27942 <_sercom_get_default_pad+0x13e>
   27928:	2b02      	cmp	r3, #2
   2792a:	d006      	beq.n	2793a <_sercom_get_default_pad+0x136>
   2792c:	2b03      	cmp	r3, #3
   2792e:	d006      	beq.n	2793e <_sercom_get_default_pad+0x13a>
   27930:	e007      	b.n	27942 <_sercom_get_default_pad+0x13e>
   27932:	4b1f      	ldr	r3, [pc, #124]	; (279b0 <_sercom_get_default_pad+0x1ac>)
   27934:	e006      	b.n	27944 <_sercom_get_default_pad+0x140>
   27936:	4b1f      	ldr	r3, [pc, #124]	; (279b4 <_sercom_get_default_pad+0x1b0>)
   27938:	e004      	b.n	27944 <_sercom_get_default_pad+0x140>
   2793a:	4b1f      	ldr	r3, [pc, #124]	; (279b8 <_sercom_get_default_pad+0x1b4>)
   2793c:	e002      	b.n	27944 <_sercom_get_default_pad+0x140>
   2793e:	4b1f      	ldr	r3, [pc, #124]	; (279bc <_sercom_get_default_pad+0x1b8>)
   27940:	e000      	b.n	27944 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   27942:	2300      	movs	r3, #0
}
   27944:	0018      	movs	r0, r3
   27946:	46bd      	mov	sp, r7
   27948:	b002      	add	sp, #8
   2794a:	bd80      	pop	{r7, pc}
   2794c:	42001000 	.word	0x42001000
   27950:	42000800 	.word	0x42000800
   27954:	42000c00 	.word	0x42000c00
   27958:	42001800 	.word	0x42001800
   2795c:	42001c00 	.word	0x42001c00
   27960:	42001400 	.word	0x42001400
   27964:	00040003 	.word	0x00040003
   27968:	00050003 	.word	0x00050003
   2796c:	00060003 	.word	0x00060003
   27970:	00070003 	.word	0x00070003
   27974:	00010003 	.word	0x00010003
   27978:	001e0003 	.word	0x001e0003
   2797c:	001f0003 	.word	0x001f0003
   27980:	00080003 	.word	0x00080003
   27984:	00090003 	.word	0x00090003
   27988:	000a0003 	.word	0x000a0003
   2798c:	000b0003 	.word	0x000b0003
   27990:	00100003 	.word	0x00100003
   27994:	00110003 	.word	0x00110003
   27998:	00120003 	.word	0x00120003
   2799c:	00130003 	.word	0x00130003
   279a0:	000c0003 	.word	0x000c0003
   279a4:	000d0003 	.word	0x000d0003
   279a8:	000e0003 	.word	0x000e0003
   279ac:	000f0003 	.word	0x000f0003
   279b0:	00160003 	.word	0x00160003
   279b4:	00170003 	.word	0x00170003
   279b8:	00180003 	.word	0x00180003
   279bc:	00190003 	.word	0x00190003

000279c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   279c0:	b590      	push	{r4, r7, lr}
   279c2:	b08b      	sub	sp, #44	; 0x2c
   279c4:	af00      	add	r7, sp, #0
   279c6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   279c8:	230c      	movs	r3, #12
   279ca:	18fb      	adds	r3, r7, r3
   279cc:	4a0f      	ldr	r2, [pc, #60]	; (27a0c <_sercom_get_sercom_inst_index+0x4c>)
   279ce:	ca13      	ldmia	r2!, {r0, r1, r4}
   279d0:	c313      	stmia	r3!, {r0, r1, r4}
   279d2:	ca13      	ldmia	r2!, {r0, r1, r4}
   279d4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   279d6:	2300      	movs	r3, #0
   279d8:	627b      	str	r3, [r7, #36]	; 0x24
   279da:	e00e      	b.n	279fa <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   279dc:	230c      	movs	r3, #12
   279de:	18fb      	adds	r3, r7, r3
   279e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   279e2:	0092      	lsls	r2, r2, #2
   279e4:	58d3      	ldr	r3, [r2, r3]
   279e6:	001a      	movs	r2, r3
   279e8:	687b      	ldr	r3, [r7, #4]
   279ea:	429a      	cmp	r2, r3
   279ec:	d102      	bne.n	279f4 <_sercom_get_sercom_inst_index+0x34>
			return i;
   279ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   279f0:	b2db      	uxtb	r3, r3
   279f2:	e006      	b.n	27a02 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   279f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   279f6:	3301      	adds	r3, #1
   279f8:	627b      	str	r3, [r7, #36]	; 0x24
   279fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   279fc:	2b05      	cmp	r3, #5
   279fe:	d9ed      	bls.n	279dc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27a00:	2300      	movs	r3, #0
}
   27a02:	0018      	movs	r0, r3
   27a04:	46bd      	mov	sp, r7
   27a06:	b00b      	add	sp, #44	; 0x2c
   27a08:	bd90      	pop	{r4, r7, pc}
   27a0a:	46c0      	nop			; (mov r8, r8)
   27a0c:	00039aa8 	.word	0x00039aa8

00027a10 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   27a10:	b580      	push	{r7, lr}
   27a12:	b082      	sub	sp, #8
   27a14:	af00      	add	r7, sp, #0
   27a16:	0002      	movs	r2, r0
   27a18:	1dfb      	adds	r3, r7, #7
   27a1a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27a1c:	46c0      	nop			; (mov r8, r8)
   27a1e:	46bd      	mov	sp, r7
   27a20:	b002      	add	sp, #8
   27a22:	bd80      	pop	{r7, pc}

00027a24 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   27a24:	b580      	push	{r7, lr}
   27a26:	b084      	sub	sp, #16
   27a28:	af00      	add	r7, sp, #0
   27a2a:	0002      	movs	r2, r0
   27a2c:	6039      	str	r1, [r7, #0]
   27a2e:	1dfb      	adds	r3, r7, #7
   27a30:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   27a32:	4b13      	ldr	r3, [pc, #76]	; (27a80 <_sercom_set_handler+0x5c>)
   27a34:	781b      	ldrb	r3, [r3, #0]
   27a36:	2201      	movs	r2, #1
   27a38:	4053      	eors	r3, r2
   27a3a:	b2db      	uxtb	r3, r3
   27a3c:	2b00      	cmp	r3, #0
   27a3e:	d015      	beq.n	27a6c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27a40:	2300      	movs	r3, #0
   27a42:	60fb      	str	r3, [r7, #12]
   27a44:	e00c      	b.n	27a60 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   27a46:	4b0f      	ldr	r3, [pc, #60]	; (27a84 <_sercom_set_handler+0x60>)
   27a48:	68fa      	ldr	r2, [r7, #12]
   27a4a:	0092      	lsls	r2, r2, #2
   27a4c:	490e      	ldr	r1, [pc, #56]	; (27a88 <_sercom_set_handler+0x64>)
   27a4e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   27a50:	4b0e      	ldr	r3, [pc, #56]	; (27a8c <_sercom_set_handler+0x68>)
   27a52:	68fa      	ldr	r2, [r7, #12]
   27a54:	0092      	lsls	r2, r2, #2
   27a56:	2100      	movs	r1, #0
   27a58:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27a5a:	68fb      	ldr	r3, [r7, #12]
   27a5c:	3301      	adds	r3, #1
   27a5e:	60fb      	str	r3, [r7, #12]
   27a60:	68fb      	ldr	r3, [r7, #12]
   27a62:	2b05      	cmp	r3, #5
   27a64:	d9ef      	bls.n	27a46 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27a66:	4b06      	ldr	r3, [pc, #24]	; (27a80 <_sercom_set_handler+0x5c>)
   27a68:	2201      	movs	r2, #1
   27a6a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27a6c:	1dfb      	adds	r3, r7, #7
   27a6e:	781a      	ldrb	r2, [r3, #0]
   27a70:	4b04      	ldr	r3, [pc, #16]	; (27a84 <_sercom_set_handler+0x60>)
   27a72:	0092      	lsls	r2, r2, #2
   27a74:	6839      	ldr	r1, [r7, #0]
   27a76:	50d1      	str	r1, [r2, r3]
}
   27a78:	46c0      	nop			; (mov r8, r8)
   27a7a:	46bd      	mov	sp, r7
   27a7c:	b004      	add	sp, #16
   27a7e:	bd80      	pop	{r7, pc}
   27a80:	200042be 	.word	0x200042be
   27a84:	200042c0 	.word	0x200042c0
   27a88:	00027a11 	.word	0x00027a11
   27a8c:	20005c44 	.word	0x20005c44

00027a90 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   27a90:	b590      	push	{r4, r7, lr}
   27a92:	b085      	sub	sp, #20
   27a94:	af00      	add	r7, sp, #0
   27a96:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27a98:	2308      	movs	r3, #8
   27a9a:	18fb      	adds	r3, r7, r3
   27a9c:	4a0b      	ldr	r2, [pc, #44]	; (27acc <_sercom_get_interrupt_vector+0x3c>)
   27a9e:	6811      	ldr	r1, [r2, #0]
   27aa0:	6019      	str	r1, [r3, #0]
   27aa2:	8892      	ldrh	r2, [r2, #4]
   27aa4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   27aa6:	230f      	movs	r3, #15
   27aa8:	18fc      	adds	r4, r7, r3
   27aaa:	687b      	ldr	r3, [r7, #4]
   27aac:	0018      	movs	r0, r3
   27aae:	4b08      	ldr	r3, [pc, #32]	; (27ad0 <_sercom_get_interrupt_vector+0x40>)
   27ab0:	4798      	blx	r3
   27ab2:	0003      	movs	r3, r0
   27ab4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   27ab6:	230f      	movs	r3, #15
   27ab8:	18fb      	adds	r3, r7, r3
   27aba:	781b      	ldrb	r3, [r3, #0]
   27abc:	2208      	movs	r2, #8
   27abe:	18ba      	adds	r2, r7, r2
   27ac0:	5cd3      	ldrb	r3, [r2, r3]
   27ac2:	b25b      	sxtb	r3, r3
}
   27ac4:	0018      	movs	r0, r3
   27ac6:	46bd      	mov	sp, r7
   27ac8:	b005      	add	sp, #20
   27aca:	bd90      	pop	{r4, r7, pc}
   27acc:	00039ac0 	.word	0x00039ac0
   27ad0:	000279c1 	.word	0x000279c1

00027ad4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   27ad4:	b580      	push	{r7, lr}
   27ad6:	af00      	add	r7, sp, #0
   27ad8:	4b03      	ldr	r3, [pc, #12]	; (27ae8 <SERCOM0_Handler+0x14>)
   27ada:	681b      	ldr	r3, [r3, #0]
   27adc:	2000      	movs	r0, #0
   27ade:	4798      	blx	r3
   27ae0:	46c0      	nop			; (mov r8, r8)
   27ae2:	46bd      	mov	sp, r7
   27ae4:	bd80      	pop	{r7, pc}
   27ae6:	46c0      	nop			; (mov r8, r8)
   27ae8:	200042c0 	.word	0x200042c0

00027aec <SERCOM1_Handler>:
   27aec:	b580      	push	{r7, lr}
   27aee:	af00      	add	r7, sp, #0
   27af0:	4b03      	ldr	r3, [pc, #12]	; (27b00 <SERCOM1_Handler+0x14>)
   27af2:	685b      	ldr	r3, [r3, #4]
   27af4:	2001      	movs	r0, #1
   27af6:	4798      	blx	r3
   27af8:	46c0      	nop			; (mov r8, r8)
   27afa:	46bd      	mov	sp, r7
   27afc:	bd80      	pop	{r7, pc}
   27afe:	46c0      	nop			; (mov r8, r8)
   27b00:	200042c0 	.word	0x200042c0

00027b04 <SERCOM2_Handler>:
   27b04:	b580      	push	{r7, lr}
   27b06:	af00      	add	r7, sp, #0
   27b08:	4b03      	ldr	r3, [pc, #12]	; (27b18 <SERCOM2_Handler+0x14>)
   27b0a:	689b      	ldr	r3, [r3, #8]
   27b0c:	2002      	movs	r0, #2
   27b0e:	4798      	blx	r3
   27b10:	46c0      	nop			; (mov r8, r8)
   27b12:	46bd      	mov	sp, r7
   27b14:	bd80      	pop	{r7, pc}
   27b16:	46c0      	nop			; (mov r8, r8)
   27b18:	200042c0 	.word	0x200042c0

00027b1c <SERCOM3_Handler>:
   27b1c:	b580      	push	{r7, lr}
   27b1e:	af00      	add	r7, sp, #0
   27b20:	4b03      	ldr	r3, [pc, #12]	; (27b30 <SERCOM3_Handler+0x14>)
   27b22:	68db      	ldr	r3, [r3, #12]
   27b24:	2003      	movs	r0, #3
   27b26:	4798      	blx	r3
   27b28:	46c0      	nop			; (mov r8, r8)
   27b2a:	46bd      	mov	sp, r7
   27b2c:	bd80      	pop	{r7, pc}
   27b2e:	46c0      	nop			; (mov r8, r8)
   27b30:	200042c0 	.word	0x200042c0

00027b34 <SERCOM4_Handler>:
   27b34:	b580      	push	{r7, lr}
   27b36:	af00      	add	r7, sp, #0
   27b38:	4b03      	ldr	r3, [pc, #12]	; (27b48 <SERCOM4_Handler+0x14>)
   27b3a:	691b      	ldr	r3, [r3, #16]
   27b3c:	2004      	movs	r0, #4
   27b3e:	4798      	blx	r3
   27b40:	46c0      	nop			; (mov r8, r8)
   27b42:	46bd      	mov	sp, r7
   27b44:	bd80      	pop	{r7, pc}
   27b46:	46c0      	nop			; (mov r8, r8)
   27b48:	200042c0 	.word	0x200042c0

00027b4c <SERCOM5_Handler>:
   27b4c:	b580      	push	{r7, lr}
   27b4e:	af00      	add	r7, sp, #0
   27b50:	4b03      	ldr	r3, [pc, #12]	; (27b60 <SERCOM5_Handler+0x14>)
   27b52:	695b      	ldr	r3, [r3, #20]
   27b54:	2005      	movs	r0, #5
   27b56:	4798      	blx	r3
   27b58:	46c0      	nop			; (mov r8, r8)
   27b5a:	46bd      	mov	sp, r7
   27b5c:	bd80      	pop	{r7, pc}
   27b5e:	46c0      	nop			; (mov r8, r8)
   27b60:	200042c0 	.word	0x200042c0

00027b64 <system_pinmux_get_config_defaults>:
{
   27b64:	b580      	push	{r7, lr}
   27b66:	b082      	sub	sp, #8
   27b68:	af00      	add	r7, sp, #0
   27b6a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27b6c:	687b      	ldr	r3, [r7, #4]
   27b6e:	2280      	movs	r2, #128	; 0x80
   27b70:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27b72:	687b      	ldr	r3, [r7, #4]
   27b74:	2200      	movs	r2, #0
   27b76:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27b78:	687b      	ldr	r3, [r7, #4]
   27b7a:	2201      	movs	r2, #1
   27b7c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27b7e:	687b      	ldr	r3, [r7, #4]
   27b80:	2200      	movs	r2, #0
   27b82:	70da      	strb	r2, [r3, #3]
}
   27b84:	46c0      	nop			; (mov r8, r8)
   27b86:	46bd      	mov	sp, r7
   27b88:	b002      	add	sp, #8
   27b8a:	bd80      	pop	{r7, pc}

00027b8c <system_pinmux_get_group_from_gpio_pin>:
{
   27b8c:	b580      	push	{r7, lr}
   27b8e:	b084      	sub	sp, #16
   27b90:	af00      	add	r7, sp, #0
   27b92:	0002      	movs	r2, r0
   27b94:	1dfb      	adds	r3, r7, #7
   27b96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27b98:	230f      	movs	r3, #15
   27b9a:	18fb      	adds	r3, r7, r3
   27b9c:	1dfa      	adds	r2, r7, #7
   27b9e:	7812      	ldrb	r2, [r2, #0]
   27ba0:	09d2      	lsrs	r2, r2, #7
   27ba2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27ba4:	230e      	movs	r3, #14
   27ba6:	18fb      	adds	r3, r7, r3
   27ba8:	1dfa      	adds	r2, r7, #7
   27baa:	7812      	ldrb	r2, [r2, #0]
   27bac:	0952      	lsrs	r2, r2, #5
   27bae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27bb0:	4b0d      	ldr	r3, [pc, #52]	; (27be8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27bb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27bb4:	230f      	movs	r3, #15
   27bb6:	18fb      	adds	r3, r7, r3
   27bb8:	781b      	ldrb	r3, [r3, #0]
   27bba:	2b00      	cmp	r3, #0
   27bbc:	d10f      	bne.n	27bde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27bbe:	230f      	movs	r3, #15
   27bc0:	18fb      	adds	r3, r7, r3
   27bc2:	781b      	ldrb	r3, [r3, #0]
   27bc4:	009b      	lsls	r3, r3, #2
   27bc6:	2210      	movs	r2, #16
   27bc8:	4694      	mov	ip, r2
   27bca:	44bc      	add	ip, r7
   27bcc:	4463      	add	r3, ip
   27bce:	3b08      	subs	r3, #8
   27bd0:	681a      	ldr	r2, [r3, #0]
   27bd2:	230e      	movs	r3, #14
   27bd4:	18fb      	adds	r3, r7, r3
   27bd6:	781b      	ldrb	r3, [r3, #0]
   27bd8:	01db      	lsls	r3, r3, #7
   27bda:	18d3      	adds	r3, r2, r3
   27bdc:	e000      	b.n	27be0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27bde:	2300      	movs	r3, #0
}
   27be0:	0018      	movs	r0, r3
   27be2:	46bd      	mov	sp, r7
   27be4:	b004      	add	sp, #16
   27be6:	bd80      	pop	{r7, pc}
   27be8:	41004400 	.word	0x41004400

00027bec <port_get_group_from_gpio_pin>:
{
   27bec:	b580      	push	{r7, lr}
   27bee:	b082      	sub	sp, #8
   27bf0:	af00      	add	r7, sp, #0
   27bf2:	0002      	movs	r2, r0
   27bf4:	1dfb      	adds	r3, r7, #7
   27bf6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27bf8:	1dfb      	adds	r3, r7, #7
   27bfa:	781b      	ldrb	r3, [r3, #0]
   27bfc:	0018      	movs	r0, r3
   27bfe:	4b03      	ldr	r3, [pc, #12]	; (27c0c <port_get_group_from_gpio_pin+0x20>)
   27c00:	4798      	blx	r3
   27c02:	0003      	movs	r3, r0
}
   27c04:	0018      	movs	r0, r3
   27c06:	46bd      	mov	sp, r7
   27c08:	b002      	add	sp, #8
   27c0a:	bd80      	pop	{r7, pc}
   27c0c:	00027b8d 	.word	0x00027b8d

00027c10 <port_pin_set_output_level>:
{
   27c10:	b580      	push	{r7, lr}
   27c12:	b084      	sub	sp, #16
   27c14:	af00      	add	r7, sp, #0
   27c16:	0002      	movs	r2, r0
   27c18:	1dfb      	adds	r3, r7, #7
   27c1a:	701a      	strb	r2, [r3, #0]
   27c1c:	1dbb      	adds	r3, r7, #6
   27c1e:	1c0a      	adds	r2, r1, #0
   27c20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   27c22:	1dfb      	adds	r3, r7, #7
   27c24:	781b      	ldrb	r3, [r3, #0]
   27c26:	0018      	movs	r0, r3
   27c28:	4b0d      	ldr	r3, [pc, #52]	; (27c60 <port_pin_set_output_level+0x50>)
   27c2a:	4798      	blx	r3
   27c2c:	0003      	movs	r3, r0
   27c2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27c30:	1dfb      	adds	r3, r7, #7
   27c32:	781b      	ldrb	r3, [r3, #0]
   27c34:	221f      	movs	r2, #31
   27c36:	4013      	ands	r3, r2
   27c38:	2201      	movs	r2, #1
   27c3a:	409a      	lsls	r2, r3
   27c3c:	0013      	movs	r3, r2
   27c3e:	60bb      	str	r3, [r7, #8]
	if (level) {
   27c40:	1dbb      	adds	r3, r7, #6
   27c42:	781b      	ldrb	r3, [r3, #0]
   27c44:	2b00      	cmp	r3, #0
   27c46:	d003      	beq.n	27c50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27c48:	68fb      	ldr	r3, [r7, #12]
   27c4a:	68ba      	ldr	r2, [r7, #8]
   27c4c:	619a      	str	r2, [r3, #24]
}
   27c4e:	e002      	b.n	27c56 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27c50:	68fb      	ldr	r3, [r7, #12]
   27c52:	68ba      	ldr	r2, [r7, #8]
   27c54:	615a      	str	r2, [r3, #20]
}
   27c56:	46c0      	nop			; (mov r8, r8)
   27c58:	46bd      	mov	sp, r7
   27c5a:	b004      	add	sp, #16
   27c5c:	bd80      	pop	{r7, pc}
   27c5e:	46c0      	nop			; (mov r8, r8)
   27c60:	00027bed 	.word	0x00027bed

00027c64 <system_gclk_chan_get_config_defaults>:
{
   27c64:	b580      	push	{r7, lr}
   27c66:	b082      	sub	sp, #8
   27c68:	af00      	add	r7, sp, #0
   27c6a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27c6c:	687b      	ldr	r3, [r7, #4]
   27c6e:	2200      	movs	r2, #0
   27c70:	701a      	strb	r2, [r3, #0]
}
   27c72:	46c0      	nop			; (mov r8, r8)
   27c74:	46bd      	mov	sp, r7
   27c76:	b002      	add	sp, #8
   27c78:	bd80      	pop	{r7, pc}
	...

00027c7c <system_apb_clock_set_mask>:
{
   27c7c:	b580      	push	{r7, lr}
   27c7e:	b082      	sub	sp, #8
   27c80:	af00      	add	r7, sp, #0
   27c82:	0002      	movs	r2, r0
   27c84:	6039      	str	r1, [r7, #0]
   27c86:	1dfb      	adds	r3, r7, #7
   27c88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27c8a:	1dfb      	adds	r3, r7, #7
   27c8c:	781b      	ldrb	r3, [r3, #0]
   27c8e:	2b01      	cmp	r3, #1
   27c90:	d00a      	beq.n	27ca8 <system_apb_clock_set_mask+0x2c>
   27c92:	2b02      	cmp	r3, #2
   27c94:	d00f      	beq.n	27cb6 <system_apb_clock_set_mask+0x3a>
   27c96:	2b00      	cmp	r3, #0
   27c98:	d114      	bne.n	27cc4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27c9a:	4b0e      	ldr	r3, [pc, #56]	; (27cd4 <system_apb_clock_set_mask+0x58>)
   27c9c:	4a0d      	ldr	r2, [pc, #52]	; (27cd4 <system_apb_clock_set_mask+0x58>)
   27c9e:	6991      	ldr	r1, [r2, #24]
   27ca0:	683a      	ldr	r2, [r7, #0]
   27ca2:	430a      	orrs	r2, r1
   27ca4:	619a      	str	r2, [r3, #24]
			break;
   27ca6:	e00f      	b.n	27cc8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27ca8:	4b0a      	ldr	r3, [pc, #40]	; (27cd4 <system_apb_clock_set_mask+0x58>)
   27caa:	4a0a      	ldr	r2, [pc, #40]	; (27cd4 <system_apb_clock_set_mask+0x58>)
   27cac:	69d1      	ldr	r1, [r2, #28]
   27cae:	683a      	ldr	r2, [r7, #0]
   27cb0:	430a      	orrs	r2, r1
   27cb2:	61da      	str	r2, [r3, #28]
			break;
   27cb4:	e008      	b.n	27cc8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27cb6:	4b07      	ldr	r3, [pc, #28]	; (27cd4 <system_apb_clock_set_mask+0x58>)
   27cb8:	4a06      	ldr	r2, [pc, #24]	; (27cd4 <system_apb_clock_set_mask+0x58>)
   27cba:	6a11      	ldr	r1, [r2, #32]
   27cbc:	683a      	ldr	r2, [r7, #0]
   27cbe:	430a      	orrs	r2, r1
   27cc0:	621a      	str	r2, [r3, #32]
			break;
   27cc2:	e001      	b.n	27cc8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27cc4:	2317      	movs	r3, #23
   27cc6:	e000      	b.n	27cca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27cc8:	2300      	movs	r3, #0
}
   27cca:	0018      	movs	r0, r3
   27ccc:	46bd      	mov	sp, r7
   27cce:	b002      	add	sp, #8
   27cd0:	bd80      	pop	{r7, pc}
   27cd2:	46c0      	nop			; (mov r8, r8)
   27cd4:	40000400 	.word	0x40000400

00027cd8 <system_is_debugger_present>:
{
   27cd8:	b580      	push	{r7, lr}
   27cda:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27cdc:	4b05      	ldr	r3, [pc, #20]	; (27cf4 <system_is_debugger_present+0x1c>)
   27cde:	789b      	ldrb	r3, [r3, #2]
   27ce0:	b2db      	uxtb	r3, r3
   27ce2:	001a      	movs	r2, r3
   27ce4:	2302      	movs	r3, #2
   27ce6:	4013      	ands	r3, r2
   27ce8:	1e5a      	subs	r2, r3, #1
   27cea:	4193      	sbcs	r3, r2
   27cec:	b2db      	uxtb	r3, r3
}
   27cee:	0018      	movs	r0, r3
   27cf0:	46bd      	mov	sp, r7
   27cf2:	bd80      	pop	{r7, pc}
   27cf4:	41002000 	.word	0x41002000

00027cf8 <system_interrupt_enable>:
{
   27cf8:	b580      	push	{r7, lr}
   27cfa:	b082      	sub	sp, #8
   27cfc:	af00      	add	r7, sp, #0
   27cfe:	0002      	movs	r2, r0
   27d00:	1dfb      	adds	r3, r7, #7
   27d02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27d04:	4b06      	ldr	r3, [pc, #24]	; (27d20 <system_interrupt_enable+0x28>)
   27d06:	1dfa      	adds	r2, r7, #7
   27d08:	7812      	ldrb	r2, [r2, #0]
   27d0a:	0011      	movs	r1, r2
   27d0c:	221f      	movs	r2, #31
   27d0e:	400a      	ands	r2, r1
   27d10:	2101      	movs	r1, #1
   27d12:	4091      	lsls	r1, r2
   27d14:	000a      	movs	r2, r1
   27d16:	601a      	str	r2, [r3, #0]
}
   27d18:	46c0      	nop			; (mov r8, r8)
   27d1a:	46bd      	mov	sp, r7
   27d1c:	b002      	add	sp, #8
   27d1e:	bd80      	pop	{r7, pc}
   27d20:	e000e100 	.word	0xe000e100

00027d24 <system_interrupt_disable>:
{
   27d24:	b580      	push	{r7, lr}
   27d26:	b082      	sub	sp, #8
   27d28:	af00      	add	r7, sp, #0
   27d2a:	0002      	movs	r2, r0
   27d2c:	1dfb      	adds	r3, r7, #7
   27d2e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27d30:	4a07      	ldr	r2, [pc, #28]	; (27d50 <system_interrupt_disable+0x2c>)
   27d32:	1dfb      	adds	r3, r7, #7
   27d34:	781b      	ldrb	r3, [r3, #0]
   27d36:	0019      	movs	r1, r3
   27d38:	231f      	movs	r3, #31
   27d3a:	400b      	ands	r3, r1
   27d3c:	2101      	movs	r1, #1
   27d3e:	4099      	lsls	r1, r3
   27d40:	000b      	movs	r3, r1
   27d42:	0019      	movs	r1, r3
   27d44:	2380      	movs	r3, #128	; 0x80
   27d46:	50d1      	str	r1, [r2, r3]
}
   27d48:	46c0      	nop			; (mov r8, r8)
   27d4a:	46bd      	mov	sp, r7
   27d4c:	b002      	add	sp, #8
   27d4e:	bd80      	pop	{r7, pc}
   27d50:	e000e100 	.word	0xe000e100

00027d54 <spi_is_syncing>:
{
   27d54:	b580      	push	{r7, lr}
   27d56:	b084      	sub	sp, #16
   27d58:	af00      	add	r7, sp, #0
   27d5a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27d5c:	687b      	ldr	r3, [r7, #4]
   27d5e:	681b      	ldr	r3, [r3, #0]
   27d60:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   27d62:	68fb      	ldr	r3, [r7, #12]
   27d64:	69db      	ldr	r3, [r3, #28]
   27d66:	1e5a      	subs	r2, r3, #1
   27d68:	4193      	sbcs	r3, r2
   27d6a:	b2db      	uxtb	r3, r3
}
   27d6c:	0018      	movs	r0, r3
   27d6e:	46bd      	mov	sp, r7
   27d70:	b004      	add	sp, #16
   27d72:	bd80      	pop	{r7, pc}

00027d74 <spi_enable>:
{
   27d74:	b580      	push	{r7, lr}
   27d76:	b084      	sub	sp, #16
   27d78:	af00      	add	r7, sp, #0
   27d7a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27d7c:	687b      	ldr	r3, [r7, #4]
   27d7e:	681b      	ldr	r3, [r3, #0]
   27d80:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   27d82:	687b      	ldr	r3, [r7, #4]
   27d84:	681b      	ldr	r3, [r3, #0]
   27d86:	0018      	movs	r0, r3
   27d88:	4b0b      	ldr	r3, [pc, #44]	; (27db8 <spi_enable+0x44>)
   27d8a:	4798      	blx	r3
   27d8c:	0003      	movs	r3, r0
   27d8e:	0018      	movs	r0, r3
   27d90:	4b0a      	ldr	r3, [pc, #40]	; (27dbc <spi_enable+0x48>)
   27d92:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27d94:	46c0      	nop			; (mov r8, r8)
   27d96:	687b      	ldr	r3, [r7, #4]
   27d98:	0018      	movs	r0, r3
   27d9a:	4b09      	ldr	r3, [pc, #36]	; (27dc0 <spi_enable+0x4c>)
   27d9c:	4798      	blx	r3
   27d9e:	1e03      	subs	r3, r0, #0
   27da0:	d1f9      	bne.n	27d96 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   27da2:	68fb      	ldr	r3, [r7, #12]
   27da4:	681b      	ldr	r3, [r3, #0]
   27da6:	2202      	movs	r2, #2
   27da8:	431a      	orrs	r2, r3
   27daa:	68fb      	ldr	r3, [r7, #12]
   27dac:	601a      	str	r2, [r3, #0]
}
   27dae:	46c0      	nop			; (mov r8, r8)
   27db0:	46bd      	mov	sp, r7
   27db2:	b004      	add	sp, #16
   27db4:	bd80      	pop	{r7, pc}
   27db6:	46c0      	nop			; (mov r8, r8)
   27db8:	00027a91 	.word	0x00027a91
   27dbc:	00027cf9 	.word	0x00027cf9
   27dc0:	00027d55 	.word	0x00027d55

00027dc4 <spi_disable>:
{
   27dc4:	b580      	push	{r7, lr}
   27dc6:	b084      	sub	sp, #16
   27dc8:	af00      	add	r7, sp, #0
   27dca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27dcc:	687b      	ldr	r3, [r7, #4]
   27dce:	681b      	ldr	r3, [r3, #0]
   27dd0:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   27dd2:	687b      	ldr	r3, [r7, #4]
   27dd4:	681b      	ldr	r3, [r3, #0]
   27dd6:	0018      	movs	r0, r3
   27dd8:	4b0e      	ldr	r3, [pc, #56]	; (27e14 <spi_disable+0x50>)
   27dda:	4798      	blx	r3
   27ddc:	0003      	movs	r3, r0
   27dde:	0018      	movs	r0, r3
   27de0:	4b0d      	ldr	r3, [pc, #52]	; (27e18 <spi_disable+0x54>)
   27de2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27de4:	46c0      	nop			; (mov r8, r8)
   27de6:	687b      	ldr	r3, [r7, #4]
   27de8:	0018      	movs	r0, r3
   27dea:	4b0c      	ldr	r3, [pc, #48]	; (27e1c <spi_disable+0x58>)
   27dec:	4798      	blx	r3
   27dee:	1e03      	subs	r3, r0, #0
   27df0:	d1f9      	bne.n	27de6 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   27df2:	68fb      	ldr	r3, [r7, #12]
   27df4:	228f      	movs	r2, #143	; 0x8f
   27df6:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27df8:	68fb      	ldr	r3, [r7, #12]
   27dfa:	228f      	movs	r2, #143	; 0x8f
   27dfc:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   27dfe:	68fb      	ldr	r3, [r7, #12]
   27e00:	681b      	ldr	r3, [r3, #0]
   27e02:	2202      	movs	r2, #2
   27e04:	4393      	bics	r3, r2
   27e06:	001a      	movs	r2, r3
   27e08:	68fb      	ldr	r3, [r7, #12]
   27e0a:	601a      	str	r2, [r3, #0]
}
   27e0c:	46c0      	nop			; (mov r8, r8)
   27e0e:	46bd      	mov	sp, r7
   27e10:	b004      	add	sp, #16
   27e12:	bd80      	pop	{r7, pc}
   27e14:	00027a91 	.word	0x00027a91
   27e18:	00027d25 	.word	0x00027d25
   27e1c:	00027d55 	.word	0x00027d55

00027e20 <spi_is_write_complete>:
{
   27e20:	b580      	push	{r7, lr}
   27e22:	b084      	sub	sp, #16
   27e24:	af00      	add	r7, sp, #0
   27e26:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27e28:	687b      	ldr	r3, [r7, #4]
   27e2a:	681b      	ldr	r3, [r3, #0]
   27e2c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27e2e:	68fb      	ldr	r3, [r7, #12]
   27e30:	7e1b      	ldrb	r3, [r3, #24]
   27e32:	b2db      	uxtb	r3, r3
   27e34:	001a      	movs	r2, r3
   27e36:	2302      	movs	r3, #2
   27e38:	4013      	ands	r3, r2
   27e3a:	1e5a      	subs	r2, r3, #1
   27e3c:	4193      	sbcs	r3, r2
   27e3e:	b2db      	uxtb	r3, r3
}
   27e40:	0018      	movs	r0, r3
   27e42:	46bd      	mov	sp, r7
   27e44:	b004      	add	sp, #16
   27e46:	bd80      	pop	{r7, pc}

00027e48 <spi_is_ready_to_write>:
{
   27e48:	b580      	push	{r7, lr}
   27e4a:	b084      	sub	sp, #16
   27e4c:	af00      	add	r7, sp, #0
   27e4e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27e50:	687b      	ldr	r3, [r7, #4]
   27e52:	681b      	ldr	r3, [r3, #0]
   27e54:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27e56:	68fb      	ldr	r3, [r7, #12]
   27e58:	7e1b      	ldrb	r3, [r3, #24]
   27e5a:	b2db      	uxtb	r3, r3
   27e5c:	001a      	movs	r2, r3
   27e5e:	2301      	movs	r3, #1
   27e60:	4013      	ands	r3, r2
   27e62:	1e5a      	subs	r2, r3, #1
   27e64:	4193      	sbcs	r3, r2
   27e66:	b2db      	uxtb	r3, r3
}
   27e68:	0018      	movs	r0, r3
   27e6a:	46bd      	mov	sp, r7
   27e6c:	b004      	add	sp, #16
   27e6e:	bd80      	pop	{r7, pc}

00027e70 <spi_is_ready_to_read>:
{
   27e70:	b580      	push	{r7, lr}
   27e72:	b084      	sub	sp, #16
   27e74:	af00      	add	r7, sp, #0
   27e76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27e78:	687b      	ldr	r3, [r7, #4]
   27e7a:	681b      	ldr	r3, [r3, #0]
   27e7c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   27e7e:	68fb      	ldr	r3, [r7, #12]
   27e80:	7e1b      	ldrb	r3, [r3, #24]
   27e82:	b2db      	uxtb	r3, r3
   27e84:	001a      	movs	r2, r3
   27e86:	2304      	movs	r3, #4
   27e88:	4013      	ands	r3, r2
   27e8a:	1e5a      	subs	r2, r3, #1
   27e8c:	4193      	sbcs	r3, r2
   27e8e:	b2db      	uxtb	r3, r3
}
   27e90:	0018      	movs	r0, r3
   27e92:	46bd      	mov	sp, r7
   27e94:	b004      	add	sp, #16
   27e96:	bd80      	pop	{r7, pc}

00027e98 <spi_write>:
{
   27e98:	b580      	push	{r7, lr}
   27e9a:	b084      	sub	sp, #16
   27e9c:	af00      	add	r7, sp, #0
   27e9e:	6078      	str	r0, [r7, #4]
   27ea0:	000a      	movs	r2, r1
   27ea2:	1cbb      	adds	r3, r7, #2
   27ea4:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27ea6:	687b      	ldr	r3, [r7, #4]
   27ea8:	681b      	ldr	r3, [r3, #0]
   27eaa:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   27eac:	687b      	ldr	r3, [r7, #4]
   27eae:	0018      	movs	r0, r3
   27eb0:	4b0a      	ldr	r3, [pc, #40]	; (27edc <spi_write+0x44>)
   27eb2:	4798      	blx	r3
   27eb4:	0003      	movs	r3, r0
   27eb6:	001a      	movs	r2, r3
   27eb8:	2301      	movs	r3, #1
   27eba:	4053      	eors	r3, r2
   27ebc:	b2db      	uxtb	r3, r3
   27ebe:	2b00      	cmp	r3, #0
   27ec0:	d001      	beq.n	27ec6 <spi_write+0x2e>
		return STATUS_BUSY;
   27ec2:	2305      	movs	r3, #5
   27ec4:	e006      	b.n	27ed4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   27ec6:	1cbb      	adds	r3, r7, #2
   27ec8:	881b      	ldrh	r3, [r3, #0]
   27eca:	05db      	lsls	r3, r3, #23
   27ecc:	0dda      	lsrs	r2, r3, #23
   27ece:	68fb      	ldr	r3, [r7, #12]
   27ed0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   27ed2:	2300      	movs	r3, #0
}
   27ed4:	0018      	movs	r0, r3
   27ed6:	46bd      	mov	sp, r7
   27ed8:	b004      	add	sp, #16
   27eda:	bd80      	pop	{r7, pc}
   27edc:	00027e49 	.word	0x00027e49

00027ee0 <spi_read>:
{
   27ee0:	b580      	push	{r7, lr}
   27ee2:	b084      	sub	sp, #16
   27ee4:	af00      	add	r7, sp, #0
   27ee6:	6078      	str	r0, [r7, #4]
   27ee8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27eea:	687b      	ldr	r3, [r7, #4]
   27eec:	681b      	ldr	r3, [r3, #0]
   27eee:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   27ef0:	687b      	ldr	r3, [r7, #4]
   27ef2:	0018      	movs	r0, r3
   27ef4:	4b1b      	ldr	r3, [pc, #108]	; (27f64 <spi_read+0x84>)
   27ef6:	4798      	blx	r3
   27ef8:	0003      	movs	r3, r0
   27efa:	001a      	movs	r2, r3
   27efc:	2301      	movs	r3, #1
   27efe:	4053      	eors	r3, r2
   27f00:	b2db      	uxtb	r3, r3
   27f02:	2b00      	cmp	r3, #0
   27f04:	d001      	beq.n	27f0a <spi_read+0x2a>
		return STATUS_ERR_IO;
   27f06:	2310      	movs	r3, #16
   27f08:	e027      	b.n	27f5a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27f0a:	230f      	movs	r3, #15
   27f0c:	18fb      	adds	r3, r7, r3
   27f0e:	2200      	movs	r2, #0
   27f10:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27f12:	68bb      	ldr	r3, [r7, #8]
   27f14:	8b5b      	ldrh	r3, [r3, #26]
   27f16:	b29b      	uxth	r3, r3
   27f18:	001a      	movs	r2, r3
   27f1a:	2304      	movs	r3, #4
   27f1c:	4013      	ands	r3, r2
   27f1e:	d006      	beq.n	27f2e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27f20:	230f      	movs	r3, #15
   27f22:	18fb      	adds	r3, r7, r3
   27f24:	221e      	movs	r2, #30
   27f26:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27f28:	68bb      	ldr	r3, [r7, #8]
   27f2a:	2204      	movs	r2, #4
   27f2c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27f2e:	687b      	ldr	r3, [r7, #4]
   27f30:	799b      	ldrb	r3, [r3, #6]
   27f32:	2b01      	cmp	r3, #1
   27f34:	d108      	bne.n	27f48 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   27f36:	68bb      	ldr	r3, [r7, #8]
   27f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f3a:	b29b      	uxth	r3, r3
   27f3c:	05db      	lsls	r3, r3, #23
   27f3e:	0ddb      	lsrs	r3, r3, #23
   27f40:	b29a      	uxth	r2, r3
   27f42:	683b      	ldr	r3, [r7, #0]
   27f44:	801a      	strh	r2, [r3, #0]
   27f46:	e005      	b.n	27f54 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27f48:	68bb      	ldr	r3, [r7, #8]
   27f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f4c:	b2db      	uxtb	r3, r3
   27f4e:	b29a      	uxth	r2, r3
   27f50:	683b      	ldr	r3, [r7, #0]
   27f52:	801a      	strh	r2, [r3, #0]
	return retval;
   27f54:	230f      	movs	r3, #15
   27f56:	18fb      	adds	r3, r7, r3
   27f58:	781b      	ldrb	r3, [r3, #0]
}
   27f5a:	0018      	movs	r0, r3
   27f5c:	46bd      	mov	sp, r7
   27f5e:	b004      	add	sp, #16
   27f60:	bd80      	pop	{r7, pc}
   27f62:	46c0      	nop			; (mov r8, r8)
   27f64:	00027e71 	.word	0x00027e71

00027f68 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27f68:	b590      	push	{r4, r7, lr}
   27f6a:	b089      	sub	sp, #36	; 0x24
   27f6c:	af00      	add	r7, sp, #0
   27f6e:	6078      	str	r0, [r7, #4]
   27f70:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27f72:	230c      	movs	r3, #12
   27f74:	18fb      	adds	r3, r7, r3
   27f76:	2200      	movs	r2, #0
   27f78:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27f7a:	687b      	ldr	r3, [r7, #4]
   27f7c:	681b      	ldr	r3, [r3, #0]
   27f7e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27f80:	687b      	ldr	r3, [r7, #4]
   27f82:	0018      	movs	r0, r3
   27f84:	4b24      	ldr	r3, [pc, #144]	; (28018 <spi_set_baudrate+0xb0>)
   27f86:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27f88:	46c0      	nop			; (mov r8, r8)
   27f8a:	687b      	ldr	r3, [r7, #4]
   27f8c:	0018      	movs	r0, r3
   27f8e:	4b23      	ldr	r3, [pc, #140]	; (2801c <spi_set_baudrate+0xb4>)
   27f90:	4798      	blx	r3
   27f92:	1e03      	subs	r3, r0, #0
   27f94:	d1f9      	bne.n	27f8a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27f96:	687b      	ldr	r3, [r7, #4]
   27f98:	681b      	ldr	r3, [r3, #0]
   27f9a:	0018      	movs	r0, r3
   27f9c:	4b20      	ldr	r3, [pc, #128]	; (28020 <spi_set_baudrate+0xb8>)
   27f9e:	4798      	blx	r3
   27fa0:	0003      	movs	r3, r0
   27fa2:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27fa4:	69bb      	ldr	r3, [r7, #24]
   27fa6:	3314      	adds	r3, #20
   27fa8:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27faa:	697b      	ldr	r3, [r7, #20]
   27fac:	b2db      	uxtb	r3, r3
   27fae:	0018      	movs	r0, r3
   27fb0:	4b1c      	ldr	r3, [pc, #112]	; (28024 <spi_set_baudrate+0xbc>)
   27fb2:	4798      	blx	r3
   27fb4:	0003      	movs	r3, r0
   27fb6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   27fb8:	230f      	movs	r3, #15
   27fba:	18fc      	adds	r4, r7, r3
   27fbc:	230c      	movs	r3, #12
   27fbe:	18fa      	adds	r2, r7, r3
   27fc0:	6939      	ldr	r1, [r7, #16]
   27fc2:	683b      	ldr	r3, [r7, #0]
   27fc4:	0018      	movs	r0, r3
   27fc6:	4b18      	ldr	r3, [pc, #96]	; (28028 <spi_set_baudrate+0xc0>)
   27fc8:	4798      	blx	r3
   27fca:	0003      	movs	r3, r0
   27fcc:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   27fce:	230f      	movs	r3, #15
   27fd0:	18fb      	adds	r3, r7, r3
   27fd2:	781b      	ldrb	r3, [r3, #0]
   27fd4:	2b00      	cmp	r3, #0
   27fd6:	d001      	beq.n	27fdc <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27fd8:	2317      	movs	r3, #23
   27fda:	e018      	b.n	2800e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27fdc:	230c      	movs	r3, #12
   27fde:	18fb      	adds	r3, r7, r3
   27fe0:	881b      	ldrh	r3, [r3, #0]
   27fe2:	b2da      	uxtb	r2, r3
   27fe4:	69fb      	ldr	r3, [r7, #28]
   27fe6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27fe8:	46c0      	nop			; (mov r8, r8)
   27fea:	687b      	ldr	r3, [r7, #4]
   27fec:	0018      	movs	r0, r3
   27fee:	4b0b      	ldr	r3, [pc, #44]	; (2801c <spi_set_baudrate+0xb4>)
   27ff0:	4798      	blx	r3
   27ff2:	1e03      	subs	r3, r0, #0
   27ff4:	d1f9      	bne.n	27fea <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27ff6:	687b      	ldr	r3, [r7, #4]
   27ff8:	0018      	movs	r0, r3
   27ffa:	4b0c      	ldr	r3, [pc, #48]	; (2802c <spi_set_baudrate+0xc4>)
   27ffc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27ffe:	46c0      	nop			; (mov r8, r8)
   28000:	687b      	ldr	r3, [r7, #4]
   28002:	0018      	movs	r0, r3
   28004:	4b05      	ldr	r3, [pc, #20]	; (2801c <spi_set_baudrate+0xb4>)
   28006:	4798      	blx	r3
   28008:	1e03      	subs	r3, r0, #0
   2800a:	d1f9      	bne.n	28000 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   2800c:	2300      	movs	r3, #0
}
   2800e:	0018      	movs	r0, r3
   28010:	46bd      	mov	sp, r7
   28012:	b009      	add	sp, #36	; 0x24
   28014:	bd90      	pop	{r4, r7, pc}
   28016:	46c0      	nop			; (mov r8, r8)
   28018:	00027dc5 	.word	0x00027dc5
   2801c:	00027d55 	.word	0x00027d55
   28020:	000279c1 	.word	0x000279c1
   28024:	0002a375 	.word	0x0002a375
   28028:	0002753b 	.word	0x0002753b
   2802c:	00027d75 	.word	0x00027d75

00028030 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   28030:	b590      	push	{r4, r7, lr}
   28032:	b093      	sub	sp, #76	; 0x4c
   28034:	af00      	add	r7, sp, #0
   28036:	6078      	str	r0, [r7, #4]
   28038:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2803a:	687b      	ldr	r3, [r7, #4]
   2803c:	681b      	ldr	r3, [r3, #0]
   2803e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   28040:	687b      	ldr	r3, [r7, #4]
   28042:	681b      	ldr	r3, [r3, #0]
   28044:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28046:	231c      	movs	r3, #28
   28048:	18fb      	adds	r3, r7, r3
   2804a:	0018      	movs	r0, r3
   2804c:	4b75      	ldr	r3, [pc, #468]	; (28224 <_spi_set_config+0x1f4>)
   2804e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28050:	231c      	movs	r3, #28
   28052:	18fb      	adds	r3, r7, r3
   28054:	2200      	movs	r2, #0
   28056:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28058:	683b      	ldr	r3, [r7, #0]
   2805a:	781b      	ldrb	r3, [r3, #0]
   2805c:	2b00      	cmp	r3, #0
   2805e:	d103      	bne.n	28068 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28060:	231c      	movs	r3, #28
   28062:	18fb      	adds	r3, r7, r3
   28064:	2200      	movs	r2, #0
   28066:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28068:	683b      	ldr	r3, [r7, #0]
   2806a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2806c:	230c      	movs	r3, #12
   2806e:	18fb      	adds	r3, r7, r3
   28070:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28072:	683b      	ldr	r3, [r7, #0]
   28074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28076:	230c      	movs	r3, #12
   28078:	18fb      	adds	r3, r7, r3
   2807a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2807c:	683b      	ldr	r3, [r7, #0]
   2807e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28080:	230c      	movs	r3, #12
   28082:	18fb      	adds	r3, r7, r3
   28084:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28086:	683b      	ldr	r3, [r7, #0]
   28088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2808a:	230c      	movs	r3, #12
   2808c:	18fb      	adds	r3, r7, r3
   2808e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28090:	2347      	movs	r3, #71	; 0x47
   28092:	18fb      	adds	r3, r7, r3
   28094:	2200      	movs	r2, #0
   28096:	701a      	strb	r2, [r3, #0]
   28098:	e02c      	b.n	280f4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2809a:	2347      	movs	r3, #71	; 0x47
   2809c:	18fb      	adds	r3, r7, r3
   2809e:	781a      	ldrb	r2, [r3, #0]
   280a0:	230c      	movs	r3, #12
   280a2:	18fb      	adds	r3, r7, r3
   280a4:	0092      	lsls	r2, r2, #2
   280a6:	58d3      	ldr	r3, [r2, r3]
   280a8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   280aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   280ac:	2b00      	cmp	r3, #0
   280ae:	d109      	bne.n	280c4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   280b0:	2347      	movs	r3, #71	; 0x47
   280b2:	18fb      	adds	r3, r7, r3
   280b4:	781a      	ldrb	r2, [r3, #0]
   280b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   280b8:	0011      	movs	r1, r2
   280ba:	0018      	movs	r0, r3
   280bc:	4b5a      	ldr	r3, [pc, #360]	; (28228 <_spi_set_config+0x1f8>)
   280be:	4798      	blx	r3
   280c0:	0003      	movs	r3, r0
   280c2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   280c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   280c6:	3301      	adds	r3, #1
   280c8:	d00d      	beq.n	280e6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   280ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   280cc:	b2da      	uxtb	r2, r3
   280ce:	231c      	movs	r3, #28
   280d0:	18fb      	adds	r3, r7, r3
   280d2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   280d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   280d6:	0c1b      	lsrs	r3, r3, #16
   280d8:	b2db      	uxtb	r3, r3
   280da:	221c      	movs	r2, #28
   280dc:	18ba      	adds	r2, r7, r2
   280de:	0011      	movs	r1, r2
   280e0:	0018      	movs	r0, r3
   280e2:	4b52      	ldr	r3, [pc, #328]	; (2822c <_spi_set_config+0x1fc>)
   280e4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   280e6:	2347      	movs	r3, #71	; 0x47
   280e8:	18fb      	adds	r3, r7, r3
   280ea:	781a      	ldrb	r2, [r3, #0]
   280ec:	2347      	movs	r3, #71	; 0x47
   280ee:	18fb      	adds	r3, r7, r3
   280f0:	3201      	adds	r2, #1
   280f2:	701a      	strb	r2, [r3, #0]
   280f4:	2347      	movs	r3, #71	; 0x47
   280f6:	18fb      	adds	r3, r7, r3
   280f8:	781b      	ldrb	r3, [r3, #0]
   280fa:	2b03      	cmp	r3, #3
   280fc:	d9cd      	bls.n	2809a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   280fe:	683b      	ldr	r3, [r7, #0]
   28100:	781a      	ldrb	r2, [r3, #0]
   28102:	687b      	ldr	r3, [r7, #4]
   28104:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28106:	683b      	ldr	r3, [r7, #0]
   28108:	7c1a      	ldrb	r2, [r3, #16]
   2810a:	687b      	ldr	r3, [r7, #4]
   2810c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2810e:	683b      	ldr	r3, [r7, #0]
   28110:	7c9a      	ldrb	r2, [r3, #18]
   28112:	687b      	ldr	r3, [r7, #4]
   28114:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28116:	683b      	ldr	r3, [r7, #0]
   28118:	7d1a      	ldrb	r2, [r3, #20]
   2811a:	687b      	ldr	r3, [r7, #4]
   2811c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2811e:	230a      	movs	r3, #10
   28120:	18fb      	adds	r3, r7, r3
   28122:	2200      	movs	r2, #0
   28124:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28126:	2300      	movs	r3, #0
   28128:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2812a:	2300      	movs	r3, #0
   2812c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2812e:	683b      	ldr	r3, [r7, #0]
   28130:	781b      	ldrb	r3, [r3, #0]
   28132:	2b01      	cmp	r3, #1
   28134:	d129      	bne.n	2818a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28136:	687b      	ldr	r3, [r7, #4]
   28138:	681b      	ldr	r3, [r3, #0]
   2813a:	0018      	movs	r0, r3
   2813c:	4b3c      	ldr	r3, [pc, #240]	; (28230 <_spi_set_config+0x200>)
   2813e:	4798      	blx	r3
   28140:	0003      	movs	r3, r0
   28142:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28146:	3314      	adds	r3, #20
   28148:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2814c:	b2db      	uxtb	r3, r3
   2814e:	0018      	movs	r0, r3
   28150:	4b38      	ldr	r3, [pc, #224]	; (28234 <_spi_set_config+0x204>)
   28152:	4798      	blx	r3
   28154:	0003      	movs	r3, r0
   28156:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28158:	683b      	ldr	r3, [r7, #0]
   2815a:	699b      	ldr	r3, [r3, #24]
   2815c:	2223      	movs	r2, #35	; 0x23
   2815e:	18bc      	adds	r4, r7, r2
   28160:	220a      	movs	r2, #10
   28162:	18ba      	adds	r2, r7, r2
   28164:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28166:	0018      	movs	r0, r3
   28168:	4b33      	ldr	r3, [pc, #204]	; (28238 <_spi_set_config+0x208>)
   2816a:	4798      	blx	r3
   2816c:	0003      	movs	r3, r0
   2816e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   28170:	2323      	movs	r3, #35	; 0x23
   28172:	18fb      	adds	r3, r7, r3
   28174:	781b      	ldrb	r3, [r3, #0]
   28176:	2b00      	cmp	r3, #0
   28178:	d001      	beq.n	2817e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2817a:	2317      	movs	r3, #23
   2817c:	e04e      	b.n	2821c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2817e:	230a      	movs	r3, #10
   28180:	18fb      	adds	r3, r7, r3
   28182:	881b      	ldrh	r3, [r3, #0]
   28184:	b2da      	uxtb	r2, r3
   28186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28188:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2818a:	683b      	ldr	r3, [r7, #0]
   2818c:	685b      	ldr	r3, [r3, #4]
   2818e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28190:	4313      	orrs	r3, r2
   28192:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28194:	683b      	ldr	r3, [r7, #0]
   28196:	689b      	ldr	r3, [r3, #8]
   28198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2819a:	4313      	orrs	r3, r2
   2819c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2819e:	683b      	ldr	r3, [r7, #0]
   281a0:	68db      	ldr	r3, [r3, #12]
   281a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   281a4:	4313      	orrs	r3, r2
   281a6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   281a8:	683b      	ldr	r3, [r7, #0]
   281aa:	7c1b      	ldrb	r3, [r3, #16]
   281ac:	001a      	movs	r2, r3
   281ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   281b0:	4313      	orrs	r3, r2
   281b2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   281b4:	683b      	ldr	r3, [r7, #0]
   281b6:	7c5b      	ldrb	r3, [r3, #17]
   281b8:	2b00      	cmp	r3, #0
   281ba:	d103      	bne.n	281c4 <_spi_set_config+0x194>
   281bc:	4b1f      	ldr	r3, [pc, #124]	; (2823c <_spi_set_config+0x20c>)
   281be:	4798      	blx	r3
   281c0:	1e03      	subs	r3, r0, #0
   281c2:	d003      	beq.n	281cc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   281c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   281c6:	2280      	movs	r2, #128	; 0x80
   281c8:	4313      	orrs	r3, r2
   281ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   281cc:	683b      	ldr	r3, [r7, #0]
   281ce:	7c9b      	ldrb	r3, [r3, #18]
   281d0:	2b00      	cmp	r3, #0
   281d2:	d004      	beq.n	281de <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   281d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   281d6:	2280      	movs	r2, #128	; 0x80
   281d8:	0292      	lsls	r2, r2, #10
   281da:	4313      	orrs	r3, r2
   281dc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   281de:	683b      	ldr	r3, [r7, #0]
   281e0:	7cdb      	ldrb	r3, [r3, #19]
   281e2:	2b00      	cmp	r3, #0
   281e4:	d004      	beq.n	281f0 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   281e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   281e8:	2280      	movs	r2, #128	; 0x80
   281ea:	0092      	lsls	r2, r2, #2
   281ec:	4313      	orrs	r3, r2
   281ee:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   281f0:	683b      	ldr	r3, [r7, #0]
   281f2:	7d1b      	ldrb	r3, [r3, #20]
   281f4:	2b00      	cmp	r3, #0
   281f6:	d004      	beq.n	28202 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   281f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   281fa:	2280      	movs	r2, #128	; 0x80
   281fc:	0192      	lsls	r2, r2, #6
   281fe:	4313      	orrs	r3, r2
   28200:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   28202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28204:	681a      	ldr	r2, [r3, #0]
   28206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28208:	431a      	orrs	r2, r3
   2820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2820c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28210:	685a      	ldr	r2, [r3, #4]
   28212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28214:	431a      	orrs	r2, r3
   28216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28218:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2821a:	2300      	movs	r3, #0
}
   2821c:	0018      	movs	r0, r3
   2821e:	46bd      	mov	sp, r7
   28220:	b013      	add	sp, #76	; 0x4c
   28222:	bd90      	pop	{r4, r7, pc}
   28224:	00027b65 	.word	0x00027b65
   28228:	00027805 	.word	0x00027805
   2822c:	0002a5b1 	.word	0x0002a5b1
   28230:	000279c1 	.word	0x000279c1
   28234:	0002a375 	.word	0x0002a375
   28238:	0002753b 	.word	0x0002753b
   2823c:	00027cd9 	.word	0x00027cd9

00028240 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   28240:	b590      	push	{r4, r7, lr}
   28242:	b08b      	sub	sp, #44	; 0x2c
   28244:	af00      	add	r7, sp, #0
   28246:	60f8      	str	r0, [r7, #12]
   28248:	60b9      	str	r1, [r7, #8]
   2824a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2824c:	68fb      	ldr	r3, [r7, #12]
   2824e:	68ba      	ldr	r2, [r7, #8]
   28250:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28252:	68fb      	ldr	r3, [r7, #12]
   28254:	681b      	ldr	r3, [r3, #0]
   28256:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28258:	6a3b      	ldr	r3, [r7, #32]
   2825a:	681b      	ldr	r3, [r3, #0]
   2825c:	2202      	movs	r2, #2
   2825e:	4013      	ands	r3, r2
   28260:	d001      	beq.n	28266 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28262:	231c      	movs	r3, #28
   28264:	e09c      	b.n	283a0 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28266:	6a3b      	ldr	r3, [r7, #32]
   28268:	681b      	ldr	r3, [r3, #0]
   2826a:	2201      	movs	r2, #1
   2826c:	4013      	ands	r3, r2
   2826e:	d001      	beq.n	28274 <spi_init+0x34>
		return STATUS_BUSY;
   28270:	2305      	movs	r3, #5
   28272:	e095      	b.n	283a0 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28274:	68fb      	ldr	r3, [r7, #12]
   28276:	681b      	ldr	r3, [r3, #0]
   28278:	0018      	movs	r0, r3
   2827a:	4b4b      	ldr	r3, [pc, #300]	; (283a8 <spi_init+0x168>)
   2827c:	4798      	blx	r3
   2827e:	0003      	movs	r3, r0
   28280:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28282:	69fb      	ldr	r3, [r7, #28]
   28284:	3302      	adds	r3, #2
   28286:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28288:	69fb      	ldr	r3, [r7, #28]
   2828a:	3314      	adds	r3, #20
   2828c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2828e:	2201      	movs	r2, #1
   28290:	69bb      	ldr	r3, [r7, #24]
   28292:	409a      	lsls	r2, r3
   28294:	0013      	movs	r3, r2
   28296:	0019      	movs	r1, r3
   28298:	2002      	movs	r0, #2
   2829a:	4b44      	ldr	r3, [pc, #272]	; (283ac <spi_init+0x16c>)
   2829c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2829e:	2310      	movs	r3, #16
   282a0:	18fb      	adds	r3, r7, r3
   282a2:	0018      	movs	r0, r3
   282a4:	4b42      	ldr	r3, [pc, #264]	; (283b0 <spi_init+0x170>)
   282a6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   282a8:	687b      	ldr	r3, [r7, #4]
   282aa:	2224      	movs	r2, #36	; 0x24
   282ac:	5c9a      	ldrb	r2, [r3, r2]
   282ae:	2310      	movs	r3, #16
   282b0:	18fb      	adds	r3, r7, r3
   282b2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   282b4:	697b      	ldr	r3, [r7, #20]
   282b6:	b2db      	uxtb	r3, r3
   282b8:	2210      	movs	r2, #16
   282ba:	18ba      	adds	r2, r7, r2
   282bc:	0011      	movs	r1, r2
   282be:	0018      	movs	r0, r3
   282c0:	4b3c      	ldr	r3, [pc, #240]	; (283b4 <spi_init+0x174>)
   282c2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   282c4:	697b      	ldr	r3, [r7, #20]
   282c6:	b2db      	uxtb	r3, r3
   282c8:	0018      	movs	r0, r3
   282ca:	4b3b      	ldr	r3, [pc, #236]	; (283b8 <spi_init+0x178>)
   282cc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   282ce:	687b      	ldr	r3, [r7, #4]
   282d0:	2224      	movs	r2, #36	; 0x24
   282d2:	5c9b      	ldrb	r3, [r3, r2]
   282d4:	2100      	movs	r1, #0
   282d6:	0018      	movs	r0, r3
   282d8:	4b38      	ldr	r3, [pc, #224]	; (283bc <spi_init+0x17c>)
   282da:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   282dc:	687b      	ldr	r3, [r7, #4]
   282de:	781b      	ldrb	r3, [r3, #0]
   282e0:	2b01      	cmp	r3, #1
   282e2:	d105      	bne.n	282f0 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   282e4:	6a3b      	ldr	r3, [r7, #32]
   282e6:	681b      	ldr	r3, [r3, #0]
   282e8:	220c      	movs	r2, #12
   282ea:	431a      	orrs	r2, r3
   282ec:	6a3b      	ldr	r3, [r7, #32]
   282ee:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   282f0:	2327      	movs	r3, #39	; 0x27
   282f2:	18fb      	adds	r3, r7, r3
   282f4:	2200      	movs	r2, #0
   282f6:	701a      	strb	r2, [r3, #0]
   282f8:	e010      	b.n	2831c <spi_init+0xdc>
		module->callback[i]        = NULL;
   282fa:	2327      	movs	r3, #39	; 0x27
   282fc:	18fb      	adds	r3, r7, r3
   282fe:	781b      	ldrb	r3, [r3, #0]
   28300:	68fa      	ldr	r2, [r7, #12]
   28302:	3302      	adds	r3, #2
   28304:	009b      	lsls	r3, r3, #2
   28306:	18d3      	adds	r3, r2, r3
   28308:	3304      	adds	r3, #4
   2830a:	2200      	movs	r2, #0
   2830c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2830e:	2327      	movs	r3, #39	; 0x27
   28310:	18fb      	adds	r3, r7, r3
   28312:	781a      	ldrb	r2, [r3, #0]
   28314:	2327      	movs	r3, #39	; 0x27
   28316:	18fb      	adds	r3, r7, r3
   28318:	3201      	adds	r2, #1
   2831a:	701a      	strb	r2, [r3, #0]
   2831c:	2327      	movs	r3, #39	; 0x27
   2831e:	18fb      	adds	r3, r7, r3
   28320:	781b      	ldrb	r3, [r3, #0]
   28322:	2b06      	cmp	r3, #6
   28324:	d9e9      	bls.n	282fa <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28326:	68fb      	ldr	r3, [r7, #12]
   28328:	2200      	movs	r2, #0
   2832a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   2832c:	68fb      	ldr	r3, [r7, #12]
   2832e:	2200      	movs	r2, #0
   28330:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28332:	68fb      	ldr	r3, [r7, #12]
   28334:	2200      	movs	r2, #0
   28336:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28338:	68fb      	ldr	r3, [r7, #12]
   2833a:	2200      	movs	r2, #0
   2833c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2833e:	68fb      	ldr	r3, [r7, #12]
   28340:	2236      	movs	r2, #54	; 0x36
   28342:	2100      	movs	r1, #0
   28344:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28346:	68fb      	ldr	r3, [r7, #12]
   28348:	2237      	movs	r2, #55	; 0x37
   2834a:	2100      	movs	r1, #0
   2834c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2834e:	68fb      	ldr	r3, [r7, #12]
   28350:	2238      	movs	r2, #56	; 0x38
   28352:	2100      	movs	r1, #0
   28354:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28356:	68fb      	ldr	r3, [r7, #12]
   28358:	2203      	movs	r2, #3
   2835a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   2835c:	68fb      	ldr	r3, [r7, #12]
   2835e:	2200      	movs	r2, #0
   28360:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28362:	68fb      	ldr	r3, [r7, #12]
   28364:	681b      	ldr	r3, [r3, #0]
   28366:	2213      	movs	r2, #19
   28368:	18bc      	adds	r4, r7, r2
   2836a:	0018      	movs	r0, r3
   2836c:	4b0e      	ldr	r3, [pc, #56]	; (283a8 <spi_init+0x168>)
   2836e:	4798      	blx	r3
   28370:	0003      	movs	r3, r0
   28372:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28374:	4a12      	ldr	r2, [pc, #72]	; (283c0 <spi_init+0x180>)
   28376:	2313      	movs	r3, #19
   28378:	18fb      	adds	r3, r7, r3
   2837a:	781b      	ldrb	r3, [r3, #0]
   2837c:	0011      	movs	r1, r2
   2837e:	0018      	movs	r0, r3
   28380:	4b10      	ldr	r3, [pc, #64]	; (283c4 <spi_init+0x184>)
   28382:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28384:	2313      	movs	r3, #19
   28386:	18fb      	adds	r3, r7, r3
   28388:	781a      	ldrb	r2, [r3, #0]
   2838a:	4b0f      	ldr	r3, [pc, #60]	; (283c8 <spi_init+0x188>)
   2838c:	0092      	lsls	r2, r2, #2
   2838e:	68f9      	ldr	r1, [r7, #12]
   28390:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28392:	687a      	ldr	r2, [r7, #4]
   28394:	68fb      	ldr	r3, [r7, #12]
   28396:	0011      	movs	r1, r2
   28398:	0018      	movs	r0, r3
   2839a:	4b0c      	ldr	r3, [pc, #48]	; (283cc <spi_init+0x18c>)
   2839c:	4798      	blx	r3
   2839e:	0003      	movs	r3, r0
}
   283a0:	0018      	movs	r0, r3
   283a2:	46bd      	mov	sp, r7
   283a4:	b00b      	add	sp, #44	; 0x2c
   283a6:	bd90      	pop	{r4, r7, pc}
   283a8:	000279c1 	.word	0x000279c1
   283ac:	00027c7d 	.word	0x00027c7d
   283b0:	00027c65 	.word	0x00027c65
   283b4:	0002a251 	.word	0x0002a251
   283b8:	0002a295 	.word	0x0002a295
   283bc:	00027779 	.word	0x00027779
   283c0:	00028899 	.word	0x00028899
   283c4:	00027a25 	.word	0x00027a25
   283c8:	20005c44 	.word	0x20005c44
   283cc:	00028031 	.word	0x00028031

000283d0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   283d0:	b590      	push	{r4, r7, lr}
   283d2:	b087      	sub	sp, #28
   283d4:	af00      	add	r7, sp, #0
   283d6:	60f8      	str	r0, [r7, #12]
   283d8:	60b9      	str	r1, [r7, #8]
   283da:	0019      	movs	r1, r3
   283dc:	1dbb      	adds	r3, r7, #6
   283de:	801a      	strh	r2, [r3, #0]
   283e0:	1d3b      	adds	r3, r7, #4
   283e2:	1c0a      	adds	r2, r1, #0
   283e4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   283e6:	68fb      	ldr	r3, [r7, #12]
   283e8:	2238      	movs	r2, #56	; 0x38
   283ea:	5c9b      	ldrb	r3, [r3, r2]
   283ec:	b2db      	uxtb	r3, r3
   283ee:	2b05      	cmp	r3, #5
   283f0:	d101      	bne.n	283f6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   283f2:	2305      	movs	r3, #5
   283f4:	e07a      	b.n	284ec <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   283f6:	1dbb      	adds	r3, r7, #6
   283f8:	881b      	ldrh	r3, [r3, #0]
   283fa:	2b00      	cmp	r3, #0
   283fc:	d101      	bne.n	28402 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   283fe:	2317      	movs	r3, #23
   28400:	e074      	b.n	284ec <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28402:	68fb      	ldr	r3, [r7, #12]
   28404:	79db      	ldrb	r3, [r3, #7]
   28406:	2201      	movs	r2, #1
   28408:	4053      	eors	r3, r2
   2840a:	b2db      	uxtb	r3, r3
   2840c:	2b00      	cmp	r3, #0
   2840e:	d001      	beq.n	28414 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28410:	231c      	movs	r3, #28
   28412:	e06b      	b.n	284ec <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28414:	2316      	movs	r3, #22
   28416:	18fb      	adds	r3, r7, r3
   28418:	2200      	movs	r2, #0
   2841a:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2841c:	e05e      	b.n	284dc <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2841e:	68fb      	ldr	r3, [r7, #12]
   28420:	795b      	ldrb	r3, [r3, #5]
   28422:	2b01      	cmp	r3, #1
   28424:	d112      	bne.n	2844c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28426:	46c0      	nop			; (mov r8, r8)
   28428:	68fb      	ldr	r3, [r7, #12]
   2842a:	0018      	movs	r0, r3
   2842c:	4b31      	ldr	r3, [pc, #196]	; (284f4 <spi_read_buffer_wait+0x124>)
   2842e:	4798      	blx	r3
   28430:	0003      	movs	r3, r0
   28432:	001a      	movs	r2, r3
   28434:	2301      	movs	r3, #1
   28436:	4053      	eors	r3, r2
   28438:	b2db      	uxtb	r3, r3
   2843a:	2b00      	cmp	r3, #0
   2843c:	d1f4      	bne.n	28428 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2843e:	1d3b      	adds	r3, r7, #4
   28440:	881a      	ldrh	r2, [r3, #0]
   28442:	68fb      	ldr	r3, [r7, #12]
   28444:	0011      	movs	r1, r2
   28446:	0018      	movs	r0, r3
   28448:	4b2b      	ldr	r3, [pc, #172]	; (284f8 <spi_read_buffer_wait+0x128>)
   2844a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2844c:	46c0      	nop			; (mov r8, r8)
   2844e:	68fb      	ldr	r3, [r7, #12]
   28450:	0018      	movs	r0, r3
   28452:	4b2a      	ldr	r3, [pc, #168]	; (284fc <spi_read_buffer_wait+0x12c>)
   28454:	4798      	blx	r3
   28456:	0003      	movs	r3, r0
   28458:	001a      	movs	r2, r3
   2845a:	2301      	movs	r3, #1
   2845c:	4053      	eors	r3, r2
   2845e:	b2db      	uxtb	r3, r3
   28460:	2b00      	cmp	r3, #0
   28462:	d1f4      	bne.n	2844e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28464:	2312      	movs	r3, #18
   28466:	18fb      	adds	r3, r7, r3
   28468:	2200      	movs	r2, #0
   2846a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2846c:	2315      	movs	r3, #21
   2846e:	18fc      	adds	r4, r7, r3
   28470:	2312      	movs	r3, #18
   28472:	18fa      	adds	r2, r7, r3
   28474:	68fb      	ldr	r3, [r7, #12]
   28476:	0011      	movs	r1, r2
   28478:	0018      	movs	r0, r3
   2847a:	4b21      	ldr	r3, [pc, #132]	; (28500 <spi_read_buffer_wait+0x130>)
   2847c:	4798      	blx	r3
   2847e:	0003      	movs	r3, r0
   28480:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28482:	2315      	movs	r3, #21
   28484:	18fb      	adds	r3, r7, r3
   28486:	781b      	ldrb	r3, [r3, #0]
   28488:	2b00      	cmp	r3, #0
   2848a:	d003      	beq.n	28494 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   2848c:	2315      	movs	r3, #21
   2848e:	18fb      	adds	r3, r7, r3
   28490:	781b      	ldrb	r3, [r3, #0]
   28492:	e02b      	b.n	284ec <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28494:	2316      	movs	r3, #22
   28496:	18fb      	adds	r3, r7, r3
   28498:	881b      	ldrh	r3, [r3, #0]
   2849a:	2216      	movs	r2, #22
   2849c:	18ba      	adds	r2, r7, r2
   2849e:	1c59      	adds	r1, r3, #1
   284a0:	8011      	strh	r1, [r2, #0]
   284a2:	001a      	movs	r2, r3
   284a4:	68bb      	ldr	r3, [r7, #8]
   284a6:	189b      	adds	r3, r3, r2
   284a8:	2212      	movs	r2, #18
   284aa:	18ba      	adds	r2, r7, r2
   284ac:	8812      	ldrh	r2, [r2, #0]
   284ae:	b2d2      	uxtb	r2, r2
   284b0:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   284b2:	68fb      	ldr	r3, [r7, #12]
   284b4:	799b      	ldrb	r3, [r3, #6]
   284b6:	2b01      	cmp	r3, #1
   284b8:	d110      	bne.n	284dc <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   284ba:	2316      	movs	r3, #22
   284bc:	18fb      	adds	r3, r7, r3
   284be:	881b      	ldrh	r3, [r3, #0]
   284c0:	2216      	movs	r2, #22
   284c2:	18ba      	adds	r2, r7, r2
   284c4:	1c59      	adds	r1, r3, #1
   284c6:	8011      	strh	r1, [r2, #0]
   284c8:	001a      	movs	r2, r3
   284ca:	68bb      	ldr	r3, [r7, #8]
   284cc:	189b      	adds	r3, r3, r2
   284ce:	2212      	movs	r2, #18
   284d0:	18ba      	adds	r2, r7, r2
   284d2:	8812      	ldrh	r2, [r2, #0]
   284d4:	0a12      	lsrs	r2, r2, #8
   284d6:	b292      	uxth	r2, r2
   284d8:	b2d2      	uxtb	r2, r2
   284da:	701a      	strb	r2, [r3, #0]
	while (length--) {
   284dc:	1dbb      	adds	r3, r7, #6
   284de:	881b      	ldrh	r3, [r3, #0]
   284e0:	1dba      	adds	r2, r7, #6
   284e2:	1e59      	subs	r1, r3, #1
   284e4:	8011      	strh	r1, [r2, #0]
   284e6:	2b00      	cmp	r3, #0
   284e8:	d199      	bne.n	2841e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   284ea:	2300      	movs	r3, #0
}
   284ec:	0018      	movs	r0, r3
   284ee:	46bd      	mov	sp, r7
   284f0:	b007      	add	sp, #28
   284f2:	bd90      	pop	{r4, r7, pc}
   284f4:	00027e49 	.word	0x00027e49
   284f8:	00027e99 	.word	0x00027e99
   284fc:	00027e71 	.word	0x00027e71
   28500:	00027ee1 	.word	0x00027ee1

00028504 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28504:	b580      	push	{r7, lr}
   28506:	b086      	sub	sp, #24
   28508:	af00      	add	r7, sp, #0
   2850a:	60f8      	str	r0, [r7, #12]
   2850c:	60b9      	str	r1, [r7, #8]
   2850e:	1dfb      	adds	r3, r7, #7
   28510:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28512:	68fb      	ldr	r3, [r7, #12]
   28514:	795b      	ldrb	r3, [r3, #5]
   28516:	2b01      	cmp	r3, #1
   28518:	d001      	beq.n	2851e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2851a:	2315      	movs	r3, #21
   2851c:	e05c      	b.n	285d8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2851e:	68fb      	ldr	r3, [r7, #12]
   28520:	7a1b      	ldrb	r3, [r3, #8]
   28522:	2201      	movs	r2, #1
   28524:	4053      	eors	r3, r2
   28526:	b2db      	uxtb	r3, r3
   28528:	2b00      	cmp	r3, #0
   2852a:	d054      	beq.n	285d6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2852c:	1dfb      	adds	r3, r7, #7
   2852e:	781b      	ldrb	r3, [r3, #0]
   28530:	2b00      	cmp	r3, #0
   28532:	d04a      	beq.n	285ca <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28534:	68bb      	ldr	r3, [r7, #8]
   28536:	785b      	ldrb	r3, [r3, #1]
   28538:	2b00      	cmp	r3, #0
   2853a:	d03f      	beq.n	285bc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2853c:	68fb      	ldr	r3, [r7, #12]
   2853e:	0018      	movs	r0, r3
   28540:	4b27      	ldr	r3, [pc, #156]	; (285e0 <spi_select_slave+0xdc>)
   28542:	4798      	blx	r3
   28544:	0003      	movs	r3, r0
   28546:	001a      	movs	r2, r3
   28548:	2301      	movs	r3, #1
   2854a:	4053      	eors	r3, r2
   2854c:	b2db      	uxtb	r3, r3
   2854e:	2b00      	cmp	r3, #0
   28550:	d007      	beq.n	28562 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28552:	68bb      	ldr	r3, [r7, #8]
   28554:	781b      	ldrb	r3, [r3, #0]
   28556:	2101      	movs	r1, #1
   28558:	0018      	movs	r0, r3
   2855a:	4b22      	ldr	r3, [pc, #136]	; (285e4 <spi_select_slave+0xe0>)
   2855c:	4798      	blx	r3
					return STATUS_BUSY;
   2855e:	2305      	movs	r3, #5
   28560:	e03a      	b.n	285d8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28562:	68bb      	ldr	r3, [r7, #8]
   28564:	781b      	ldrb	r3, [r3, #0]
   28566:	2100      	movs	r1, #0
   28568:	0018      	movs	r0, r3
   2856a:	4b1e      	ldr	r3, [pc, #120]	; (285e4 <spi_select_slave+0xe0>)
   2856c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2856e:	68bb      	ldr	r3, [r7, #8]
   28570:	789b      	ldrb	r3, [r3, #2]
   28572:	b29a      	uxth	r2, r3
   28574:	68fb      	ldr	r3, [r7, #12]
   28576:	0011      	movs	r1, r2
   28578:	0018      	movs	r0, r3
   2857a:	4b1b      	ldr	r3, [pc, #108]	; (285e8 <spi_select_slave+0xe4>)
   2857c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2857e:	68fb      	ldr	r3, [r7, #12]
   28580:	79db      	ldrb	r3, [r3, #7]
   28582:	2201      	movs	r2, #1
   28584:	4053      	eors	r3, r2
   28586:	b2db      	uxtb	r3, r3
   28588:	2b00      	cmp	r3, #0
   2858a:	d024      	beq.n	285d6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2858c:	46c0      	nop			; (mov r8, r8)
   2858e:	68fb      	ldr	r3, [r7, #12]
   28590:	0018      	movs	r0, r3
   28592:	4b16      	ldr	r3, [pc, #88]	; (285ec <spi_select_slave+0xe8>)
   28594:	4798      	blx	r3
   28596:	0003      	movs	r3, r0
   28598:	001a      	movs	r2, r3
   2859a:	2301      	movs	r3, #1
   2859c:	4053      	eors	r3, r2
   2859e:	b2db      	uxtb	r3, r3
   285a0:	2b00      	cmp	r3, #0
   285a2:	d1f4      	bne.n	2858e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   285a4:	2316      	movs	r3, #22
   285a6:	18fb      	adds	r3, r7, r3
   285a8:	2200      	movs	r2, #0
   285aa:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   285ac:	2316      	movs	r3, #22
   285ae:	18fa      	adds	r2, r7, r3
   285b0:	68fb      	ldr	r3, [r7, #12]
   285b2:	0011      	movs	r1, r2
   285b4:	0018      	movs	r0, r3
   285b6:	4b0e      	ldr	r3, [pc, #56]	; (285f0 <spi_select_slave+0xec>)
   285b8:	4798      	blx	r3
   285ba:	e00c      	b.n	285d6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   285bc:	68bb      	ldr	r3, [r7, #8]
   285be:	781b      	ldrb	r3, [r3, #0]
   285c0:	2100      	movs	r1, #0
   285c2:	0018      	movs	r0, r3
   285c4:	4b07      	ldr	r3, [pc, #28]	; (285e4 <spi_select_slave+0xe0>)
   285c6:	4798      	blx	r3
   285c8:	e005      	b.n	285d6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   285ca:	68bb      	ldr	r3, [r7, #8]
   285cc:	781b      	ldrb	r3, [r3, #0]
   285ce:	2101      	movs	r1, #1
   285d0:	0018      	movs	r0, r3
   285d2:	4b04      	ldr	r3, [pc, #16]	; (285e4 <spi_select_slave+0xe0>)
   285d4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   285d6:	2300      	movs	r3, #0
}
   285d8:	0018      	movs	r0, r3
   285da:	46bd      	mov	sp, r7
   285dc:	b006      	add	sp, #24
   285de:	bd80      	pop	{r7, pc}
   285e0:	00027e49 	.word	0x00027e49
   285e4:	00027c11 	.word	0x00027c11
   285e8:	00027e99 	.word	0x00027e99
   285ec:	00027e71 	.word	0x00027e71
   285f0:	00027ee1 	.word	0x00027ee1

000285f4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   285f4:	b580      	push	{r7, lr}
   285f6:	b086      	sub	sp, #24
   285f8:	af00      	add	r7, sp, #0
   285fa:	60f8      	str	r0, [r7, #12]
   285fc:	60b9      	str	r1, [r7, #8]
   285fe:	1dbb      	adds	r3, r7, #6
   28600:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28602:	68fb      	ldr	r3, [r7, #12]
   28604:	2238      	movs	r2, #56	; 0x38
   28606:	5c9b      	ldrb	r3, [r3, r2]
   28608:	b2db      	uxtb	r3, r3
   2860a:	2b05      	cmp	r3, #5
   2860c:	d101      	bne.n	28612 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2860e:	2305      	movs	r3, #5
   28610:	e087      	b.n	28722 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28612:	1dbb      	adds	r3, r7, #6
   28614:	881b      	ldrh	r3, [r3, #0]
   28616:	2b00      	cmp	r3, #0
   28618:	d101      	bne.n	2861e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   2861a:	2317      	movs	r3, #23
   2861c:	e081      	b.n	28722 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   2861e:	2316      	movs	r3, #22
   28620:	18fb      	adds	r3, r7, r3
   28622:	2200      	movs	r2, #0
   28624:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28626:	2314      	movs	r3, #20
   28628:	18fb      	adds	r3, r7, r3
   2862a:	1dba      	adds	r2, r7, #6
   2862c:	8812      	ldrh	r2, [r2, #0]
   2862e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28630:	e05f      	b.n	286f2 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28632:	46c0      	nop			; (mov r8, r8)
   28634:	68fb      	ldr	r3, [r7, #12]
   28636:	0018      	movs	r0, r3
   28638:	4b3c      	ldr	r3, [pc, #240]	; (2872c <spi_write_buffer_wait+0x138>)
   2863a:	4798      	blx	r3
   2863c:	0003      	movs	r3, r0
   2863e:	001a      	movs	r2, r3
   28640:	2301      	movs	r3, #1
   28642:	4053      	eors	r3, r2
   28644:	b2db      	uxtb	r3, r3
   28646:	2b00      	cmp	r3, #0
   28648:	d1f4      	bne.n	28634 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2864a:	2316      	movs	r3, #22
   2864c:	18fb      	adds	r3, r7, r3
   2864e:	881b      	ldrh	r3, [r3, #0]
   28650:	2216      	movs	r2, #22
   28652:	18ba      	adds	r2, r7, r2
   28654:	1c59      	adds	r1, r3, #1
   28656:	8011      	strh	r1, [r2, #0]
   28658:	001a      	movs	r2, r3
   2865a:	68bb      	ldr	r3, [r7, #8]
   2865c:	189b      	adds	r3, r3, r2
   2865e:	781a      	ldrb	r2, [r3, #0]
   28660:	2312      	movs	r3, #18
   28662:	18fb      	adds	r3, r7, r3
   28664:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28666:	68fb      	ldr	r3, [r7, #12]
   28668:	799b      	ldrb	r3, [r3, #6]
   2866a:	2b01      	cmp	r3, #1
   2866c:	d115      	bne.n	2869a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2866e:	2316      	movs	r3, #22
   28670:	18fb      	adds	r3, r7, r3
   28672:	881b      	ldrh	r3, [r3, #0]
   28674:	2216      	movs	r2, #22
   28676:	18ba      	adds	r2, r7, r2
   28678:	1c59      	adds	r1, r3, #1
   2867a:	8011      	strh	r1, [r2, #0]
   2867c:	001a      	movs	r2, r3
   2867e:	68bb      	ldr	r3, [r7, #8]
   28680:	189b      	adds	r3, r3, r2
   28682:	781b      	ldrb	r3, [r3, #0]
   28684:	021b      	lsls	r3, r3, #8
   28686:	b21a      	sxth	r2, r3
   28688:	2312      	movs	r3, #18
   2868a:	18fb      	adds	r3, r7, r3
   2868c:	2100      	movs	r1, #0
   2868e:	5e5b      	ldrsh	r3, [r3, r1]
   28690:	4313      	orrs	r3, r2
   28692:	b21a      	sxth	r2, r3
   28694:	2312      	movs	r3, #18
   28696:	18fb      	adds	r3, r7, r3
   28698:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2869a:	2312      	movs	r3, #18
   2869c:	18fb      	adds	r3, r7, r3
   2869e:	881a      	ldrh	r2, [r3, #0]
   286a0:	68fb      	ldr	r3, [r7, #12]
   286a2:	0011      	movs	r1, r2
   286a4:	0018      	movs	r0, r3
   286a6:	4b22      	ldr	r3, [pc, #136]	; (28730 <spi_write_buffer_wait+0x13c>)
   286a8:	4798      	blx	r3

		if (module->receiver_enabled) {
   286aa:	68fb      	ldr	r3, [r7, #12]
   286ac:	79db      	ldrb	r3, [r3, #7]
   286ae:	2214      	movs	r2, #20
   286b0:	18ba      	adds	r2, r7, r2
   286b2:	2114      	movs	r1, #20
   286b4:	1879      	adds	r1, r7, r1
   286b6:	8809      	ldrh	r1, [r1, #0]
   286b8:	8011      	strh	r1, [r2, #0]
   286ba:	2b00      	cmp	r3, #0
   286bc:	d019      	beq.n	286f2 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   286be:	46c0      	nop			; (mov r8, r8)
   286c0:	68fb      	ldr	r3, [r7, #12]
   286c2:	0018      	movs	r0, r3
   286c4:	4b1b      	ldr	r3, [pc, #108]	; (28734 <spi_write_buffer_wait+0x140>)
   286c6:	4798      	blx	r3
   286c8:	0003      	movs	r3, r0
   286ca:	001a      	movs	r2, r3
   286cc:	2301      	movs	r3, #1
   286ce:	4053      	eors	r3, r2
   286d0:	b2db      	uxtb	r3, r3
   286d2:	2b00      	cmp	r3, #0
   286d4:	d1f4      	bne.n	286c0 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   286d6:	2310      	movs	r3, #16
   286d8:	18fa      	adds	r2, r7, r3
   286da:	68fb      	ldr	r3, [r7, #12]
   286dc:	0011      	movs	r1, r2
   286de:	0018      	movs	r0, r3
   286e0:	4b15      	ldr	r3, [pc, #84]	; (28738 <spi_write_buffer_wait+0x144>)
   286e2:	4798      	blx	r3
			flush_length--;
   286e4:	2314      	movs	r3, #20
   286e6:	18fb      	adds	r3, r7, r3
   286e8:	881a      	ldrh	r2, [r3, #0]
   286ea:	2314      	movs	r3, #20
   286ec:	18fb      	adds	r3, r7, r3
   286ee:	3a01      	subs	r2, #1
   286f0:	801a      	strh	r2, [r3, #0]
	while (length--) {
   286f2:	1dbb      	adds	r3, r7, #6
   286f4:	881b      	ldrh	r3, [r3, #0]
   286f6:	1dba      	adds	r2, r7, #6
   286f8:	1e59      	subs	r1, r3, #1
   286fa:	8011      	strh	r1, [r2, #0]
   286fc:	2b00      	cmp	r3, #0
   286fe:	d198      	bne.n	28632 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28700:	68fb      	ldr	r3, [r7, #12]
   28702:	795b      	ldrb	r3, [r3, #5]
   28704:	2b01      	cmp	r3, #1
   28706:	d10b      	bne.n	28720 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28708:	46c0      	nop			; (mov r8, r8)
   2870a:	68fb      	ldr	r3, [r7, #12]
   2870c:	0018      	movs	r0, r3
   2870e:	4b0b      	ldr	r3, [pc, #44]	; (2873c <spi_write_buffer_wait+0x148>)
   28710:	4798      	blx	r3
   28712:	0003      	movs	r3, r0
   28714:	001a      	movs	r2, r3
   28716:	2301      	movs	r3, #1
   28718:	4053      	eors	r3, r2
   2871a:	b2db      	uxtb	r3, r3
   2871c:	2b00      	cmp	r3, #0
   2871e:	d1f4      	bne.n	2870a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28720:	2300      	movs	r3, #0
}
   28722:	0018      	movs	r0, r3
   28724:	46bd      	mov	sp, r7
   28726:	b006      	add	sp, #24
   28728:	bd80      	pop	{r7, pc}
   2872a:	46c0      	nop			; (mov r8, r8)
   2872c:	00027e49 	.word	0x00027e49
   28730:	00027e99 	.word	0x00027e99
   28734:	00027e71 	.word	0x00027e71
   28738:	00027ee1 	.word	0x00027ee1
   2873c:	00027e21 	.word	0x00027e21

00028740 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28740:	b580      	push	{r7, lr}
   28742:	b084      	sub	sp, #16
   28744:	af00      	add	r7, sp, #0
   28746:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28748:	687b      	ldr	r3, [r7, #4]
   2874a:	681b      	ldr	r3, [r3, #0]
   2874c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2874e:	687b      	ldr	r3, [r7, #4]
   28750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28752:	781b      	ldrb	r3, [r3, #0]
   28754:	b2da      	uxtb	r2, r3
   28756:	230e      	movs	r3, #14
   28758:	18fb      	adds	r3, r7, r3
   2875a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   2875c:	687b      	ldr	r3, [r7, #4]
   2875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28760:	1c5a      	adds	r2, r3, #1
   28762:	687b      	ldr	r3, [r7, #4]
   28764:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28766:	687b      	ldr	r3, [r7, #4]
   28768:	799b      	ldrb	r3, [r3, #6]
   2876a:	2b01      	cmp	r3, #1
   2876c:	d113      	bne.n	28796 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2876e:	687b      	ldr	r3, [r7, #4]
   28770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28772:	781b      	ldrb	r3, [r3, #0]
   28774:	b2db      	uxtb	r3, r3
   28776:	021b      	lsls	r3, r3, #8
   28778:	b21a      	sxth	r2, r3
   2877a:	230e      	movs	r3, #14
   2877c:	18fb      	adds	r3, r7, r3
   2877e:	2100      	movs	r1, #0
   28780:	5e5b      	ldrsh	r3, [r3, r1]
   28782:	4313      	orrs	r3, r2
   28784:	b21a      	sxth	r2, r3
   28786:	230e      	movs	r3, #14
   28788:	18fb      	adds	r3, r7, r3
   2878a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   2878c:	687b      	ldr	r3, [r7, #4]
   2878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28790:	1c5a      	adds	r2, r3, #1
   28792:	687b      	ldr	r3, [r7, #4]
   28794:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28796:	230e      	movs	r3, #14
   28798:	18fb      	adds	r3, r7, r3
   2879a:	881b      	ldrh	r3, [r3, #0]
   2879c:	05db      	lsls	r3, r3, #23
   2879e:	0dda      	lsrs	r2, r3, #23
   287a0:	68bb      	ldr	r3, [r7, #8]
   287a2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   287a4:	687b      	ldr	r3, [r7, #4]
   287a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   287a8:	b29b      	uxth	r3, r3
   287aa:	3b01      	subs	r3, #1
   287ac:	b29a      	uxth	r2, r3
   287ae:	687b      	ldr	r3, [r7, #4]
   287b0:	869a      	strh	r2, [r3, #52]	; 0x34
}
   287b2:	46c0      	nop			; (mov r8, r8)
   287b4:	46bd      	mov	sp, r7
   287b6:	b004      	add	sp, #16
   287b8:	bd80      	pop	{r7, pc}
	...

000287bc <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   287bc:	b580      	push	{r7, lr}
   287be:	b084      	sub	sp, #16
   287c0:	af00      	add	r7, sp, #0
   287c2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   287c4:	687b      	ldr	r3, [r7, #4]
   287c6:	681b      	ldr	r3, [r3, #0]
   287c8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   287ca:	4b08      	ldr	r3, [pc, #32]	; (287ec <_spi_write_dummy+0x30>)
   287cc:	881b      	ldrh	r3, [r3, #0]
   287ce:	001a      	movs	r2, r3
   287d0:	68fb      	ldr	r3, [r7, #12]
   287d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   287d4:	687b      	ldr	r3, [r7, #4]
   287d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   287d8:	b29b      	uxth	r3, r3
   287da:	3b01      	subs	r3, #1
   287dc:	b29a      	uxth	r2, r3
   287de:	687b      	ldr	r3, [r7, #4]
   287e0:	865a      	strh	r2, [r3, #50]	; 0x32
}
   287e2:	46c0      	nop			; (mov r8, r8)
   287e4:	46bd      	mov	sp, r7
   287e6:	b004      	add	sp, #16
   287e8:	bd80      	pop	{r7, pc}
   287ea:	46c0      	nop			; (mov r8, r8)
   287ec:	20005c5c 	.word	0x20005c5c

000287f0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   287f0:	b580      	push	{r7, lr}
   287f2:	b084      	sub	sp, #16
   287f4:	af00      	add	r7, sp, #0
   287f6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   287f8:	687b      	ldr	r3, [r7, #4]
   287fa:	681b      	ldr	r3, [r3, #0]
   287fc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   287fe:	230a      	movs	r3, #10
   28800:	18fb      	adds	r3, r7, r3
   28802:	2200      	movs	r2, #0
   28804:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28806:	68fb      	ldr	r3, [r7, #12]
   28808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2880a:	230a      	movs	r3, #10
   2880c:	18fb      	adds	r3, r7, r3
   2880e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28810:	687b      	ldr	r3, [r7, #4]
   28812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28814:	b29b      	uxth	r3, r3
   28816:	3b01      	subs	r3, #1
   28818:	b29a      	uxth	r2, r3
   2881a:	687b      	ldr	r3, [r7, #4]
   2881c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2881e:	46c0      	nop			; (mov r8, r8)
   28820:	46bd      	mov	sp, r7
   28822:	b004      	add	sp, #16
   28824:	bd80      	pop	{r7, pc}

00028826 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   28826:	b580      	push	{r7, lr}
   28828:	b084      	sub	sp, #16
   2882a:	af00      	add	r7, sp, #0
   2882c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2882e:	687b      	ldr	r3, [r7, #4]
   28830:	681b      	ldr	r3, [r3, #0]
   28832:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   28834:	68fb      	ldr	r3, [r7, #12]
   28836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28838:	b29a      	uxth	r2, r3
   2883a:	230a      	movs	r3, #10
   2883c:	18fb      	adds	r3, r7, r3
   2883e:	05d2      	lsls	r2, r2, #23
   28840:	0dd2      	lsrs	r2, r2, #23
   28842:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   28844:	687b      	ldr	r3, [r7, #4]
   28846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28848:	220a      	movs	r2, #10
   2884a:	18ba      	adds	r2, r7, r2
   2884c:	8812      	ldrh	r2, [r2, #0]
   2884e:	b2d2      	uxtb	r2, r2
   28850:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   28852:	687b      	ldr	r3, [r7, #4]
   28854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28856:	1c5a      	adds	r2, r3, #1
   28858:	687b      	ldr	r3, [r7, #4]
   2885a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2885c:	687b      	ldr	r3, [r7, #4]
   2885e:	799b      	ldrb	r3, [r3, #6]
   28860:	2b01      	cmp	r3, #1
   28862:	d10d      	bne.n	28880 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28864:	687b      	ldr	r3, [r7, #4]
   28866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28868:	220a      	movs	r2, #10
   2886a:	18ba      	adds	r2, r7, r2
   2886c:	8812      	ldrh	r2, [r2, #0]
   2886e:	0a12      	lsrs	r2, r2, #8
   28870:	b292      	uxth	r2, r2
   28872:	b2d2      	uxtb	r2, r2
   28874:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28876:	687b      	ldr	r3, [r7, #4]
   28878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2887a:	1c5a      	adds	r2, r3, #1
   2887c:	687b      	ldr	r3, [r7, #4]
   2887e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28880:	687b      	ldr	r3, [r7, #4]
   28882:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28884:	b29b      	uxth	r3, r3
   28886:	3b01      	subs	r3, #1
   28888:	b29a      	uxth	r2, r3
   2888a:	687b      	ldr	r3, [r7, #4]
   2888c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2888e:	46c0      	nop			; (mov r8, r8)
   28890:	46bd      	mov	sp, r7
   28892:	b004      	add	sp, #16
   28894:	bd80      	pop	{r7, pc}
	...

00028898 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28898:	b580      	push	{r7, lr}
   2889a:	b086      	sub	sp, #24
   2889c:	af00      	add	r7, sp, #0
   2889e:	0002      	movs	r2, r0
   288a0:	1dfb      	adds	r3, r7, #7
   288a2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   288a4:	1dfb      	adds	r3, r7, #7
   288a6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   288a8:	4b96      	ldr	r3, [pc, #600]	; (28b04 <_spi_interrupt_handler+0x26c>)
   288aa:	0092      	lsls	r2, r2, #2
   288ac:	58d3      	ldr	r3, [r2, r3]
   288ae:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   288b0:	697b      	ldr	r3, [r7, #20]
   288b2:	681b      	ldr	r3, [r3, #0]
   288b4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   288b6:	697b      	ldr	r3, [r7, #20]
   288b8:	2237      	movs	r2, #55	; 0x37
   288ba:	5c9a      	ldrb	r2, [r3, r2]
   288bc:	697b      	ldr	r3, [r7, #20]
   288be:	2136      	movs	r1, #54	; 0x36
   288c0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   288c2:	230f      	movs	r3, #15
   288c4:	18fb      	adds	r3, r7, r3
   288c6:	400a      	ands	r2, r1
   288c8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   288ca:	693b      	ldr	r3, [r7, #16]
   288cc:	7e1b      	ldrb	r3, [r3, #24]
   288ce:	b2da      	uxtb	r2, r3
   288d0:	230c      	movs	r3, #12
   288d2:	18fb      	adds	r3, r7, r3
   288d4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   288d6:	693b      	ldr	r3, [r7, #16]
   288d8:	7d9b      	ldrb	r3, [r3, #22]
   288da:	b2db      	uxtb	r3, r3
   288dc:	b29a      	uxth	r2, r3
   288de:	230c      	movs	r3, #12
   288e0:	18fb      	adds	r3, r7, r3
   288e2:	210c      	movs	r1, #12
   288e4:	1879      	adds	r1, r7, r1
   288e6:	8809      	ldrh	r1, [r1, #0]
   288e8:	400a      	ands	r2, r1
   288ea:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   288ec:	230c      	movs	r3, #12
   288ee:	18fb      	adds	r3, r7, r3
   288f0:	881b      	ldrh	r3, [r3, #0]
   288f2:	2201      	movs	r2, #1
   288f4:	4013      	ands	r3, r2
   288f6:	d038      	beq.n	2896a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   288f8:	697b      	ldr	r3, [r7, #20]
   288fa:	795b      	ldrb	r3, [r3, #5]
   288fc:	2b01      	cmp	r3, #1
   288fe:	d110      	bne.n	28922 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28900:	697b      	ldr	r3, [r7, #20]
   28902:	7a5b      	ldrb	r3, [r3, #9]
   28904:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28906:	2b00      	cmp	r3, #0
   28908:	d10b      	bne.n	28922 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   2890a:	697b      	ldr	r3, [r7, #20]
   2890c:	0018      	movs	r0, r3
   2890e:	4b7e      	ldr	r3, [pc, #504]	; (28b08 <_spi_interrupt_handler+0x270>)
   28910:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   28912:	697b      	ldr	r3, [r7, #20]
   28914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28916:	b29b      	uxth	r3, r3
   28918:	2b00      	cmp	r3, #0
   2891a:	d102      	bne.n	28922 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2891c:	693b      	ldr	r3, [r7, #16]
   2891e:	2201      	movs	r2, #1
   28920:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   28922:	697b      	ldr	r3, [r7, #20]
   28924:	795b      	ldrb	r3, [r3, #5]
		if (0
   28926:	2b01      	cmp	r3, #1
   28928:	d11f      	bne.n	2896a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   2892a:	697b      	ldr	r3, [r7, #20]
   2892c:	7a5b      	ldrb	r3, [r3, #9]
   2892e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   28930:	2b00      	cmp	r3, #0
   28932:	d01a      	beq.n	2896a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   28934:	697b      	ldr	r3, [r7, #20]
   28936:	0018      	movs	r0, r3
   28938:	4b74      	ldr	r3, [pc, #464]	; (28b0c <_spi_interrupt_handler+0x274>)
   2893a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   2893c:	697b      	ldr	r3, [r7, #20]
   2893e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28940:	b29b      	uxth	r3, r3
   28942:	2b00      	cmp	r3, #0
   28944:	d111      	bne.n	2896a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28946:	693b      	ldr	r3, [r7, #16]
   28948:	2201      	movs	r2, #1
   2894a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   2894c:	697b      	ldr	r3, [r7, #20]
   2894e:	7a5b      	ldrb	r3, [r3, #9]
   28950:	b2db      	uxtb	r3, r3
   28952:	2b01      	cmp	r3, #1
   28954:	d109      	bne.n	2896a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   28956:	697b      	ldr	r3, [r7, #20]
   28958:	79db      	ldrb	r3, [r3, #7]
   2895a:	2201      	movs	r2, #1
   2895c:	4053      	eors	r3, r2
   2895e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   28960:	2b00      	cmp	r3, #0
   28962:	d002      	beq.n	2896a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28964:	693b      	ldr	r3, [r7, #16]
   28966:	2202      	movs	r2, #2
   28968:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   2896a:	230c      	movs	r3, #12
   2896c:	18fb      	adds	r3, r7, r3
   2896e:	881b      	ldrh	r3, [r3, #0]
   28970:	2204      	movs	r2, #4
   28972:	4013      	ands	r3, r2
   28974:	d100      	bne.n	28978 <_spi_interrupt_handler+0xe0>
   28976:	e07e      	b.n	28a76 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28978:	693b      	ldr	r3, [r7, #16]
   2897a:	8b5b      	ldrh	r3, [r3, #26]
   2897c:	b29b      	uxth	r3, r3
   2897e:	001a      	movs	r2, r3
   28980:	2304      	movs	r3, #4
   28982:	4013      	ands	r3, r2
   28984:	d022      	beq.n	289cc <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   28986:	697b      	ldr	r3, [r7, #20]
   28988:	7a5b      	ldrb	r3, [r3, #9]
   2898a:	b2db      	uxtb	r3, r3
   2898c:	2b01      	cmp	r3, #1
   2898e:	d014      	beq.n	289ba <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   28990:	697b      	ldr	r3, [r7, #20]
   28992:	2238      	movs	r2, #56	; 0x38
   28994:	211e      	movs	r1, #30
   28996:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28998:	697b      	ldr	r3, [r7, #20]
   2899a:	2203      	movs	r2, #3
   2899c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2899e:	693b      	ldr	r3, [r7, #16]
   289a0:	2205      	movs	r2, #5
   289a2:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   289a4:	230f      	movs	r3, #15
   289a6:	18fb      	adds	r3, r7, r3
   289a8:	781b      	ldrb	r3, [r3, #0]
   289aa:	2208      	movs	r2, #8
   289ac:	4013      	ands	r3, r2
   289ae:	d004      	beq.n	289ba <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   289b0:	697b      	ldr	r3, [r7, #20]
   289b2:	699b      	ldr	r3, [r3, #24]
   289b4:	697a      	ldr	r2, [r7, #20]
   289b6:	0010      	movs	r0, r2
   289b8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   289ba:	693b      	ldr	r3, [r7, #16]
   289bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   289be:	230a      	movs	r3, #10
   289c0:	18fb      	adds	r3, r7, r3
   289c2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   289c4:	693b      	ldr	r3, [r7, #16]
   289c6:	2204      	movs	r2, #4
   289c8:	835a      	strh	r2, [r3, #26]
   289ca:	e054      	b.n	28a76 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   289cc:	697b      	ldr	r3, [r7, #20]
   289ce:	7a5b      	ldrb	r3, [r3, #9]
   289d0:	b2db      	uxtb	r3, r3
   289d2:	2b01      	cmp	r3, #1
   289d4:	d11e      	bne.n	28a14 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   289d6:	697b      	ldr	r3, [r7, #20]
   289d8:	0018      	movs	r0, r3
   289da:	4b4d      	ldr	r3, [pc, #308]	; (28b10 <_spi_interrupt_handler+0x278>)
   289dc:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   289de:	697b      	ldr	r3, [r7, #20]
   289e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   289e2:	b29b      	uxth	r3, r3
   289e4:	2b00      	cmp	r3, #0
   289e6:	d146      	bne.n	28a76 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   289e8:	693b      	ldr	r3, [r7, #16]
   289ea:	2204      	movs	r2, #4
   289ec:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   289ee:	697b      	ldr	r3, [r7, #20]
   289f0:	2238      	movs	r2, #56	; 0x38
   289f2:	2100      	movs	r1, #0
   289f4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   289f6:	697b      	ldr	r3, [r7, #20]
   289f8:	2203      	movs	r2, #3
   289fa:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   289fc:	230f      	movs	r3, #15
   289fe:	18fb      	adds	r3, r7, r3
   28a00:	781b      	ldrb	r3, [r3, #0]
   28a02:	2201      	movs	r2, #1
   28a04:	4013      	ands	r3, r2
   28a06:	d036      	beq.n	28a76 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28a08:	697b      	ldr	r3, [r7, #20]
   28a0a:	68db      	ldr	r3, [r3, #12]
   28a0c:	697a      	ldr	r2, [r7, #20]
   28a0e:	0010      	movs	r0, r2
   28a10:	4798      	blx	r3
   28a12:	e030      	b.n	28a76 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   28a14:	697b      	ldr	r3, [r7, #20]
   28a16:	0018      	movs	r0, r3
   28a18:	4b3e      	ldr	r3, [pc, #248]	; (28b14 <_spi_interrupt_handler+0x27c>)
   28a1a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28a1c:	697b      	ldr	r3, [r7, #20]
   28a1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28a20:	b29b      	uxth	r3, r3
   28a22:	2b00      	cmp	r3, #0
   28a24:	d127      	bne.n	28a76 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   28a26:	697b      	ldr	r3, [r7, #20]
   28a28:	2238      	movs	r2, #56	; 0x38
   28a2a:	2100      	movs	r1, #0
   28a2c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28a2e:	693b      	ldr	r3, [r7, #16]
   28a30:	2204      	movs	r2, #4
   28a32:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   28a34:	697b      	ldr	r3, [r7, #20]
   28a36:	7a5b      	ldrb	r3, [r3, #9]
   28a38:	b2db      	uxtb	r3, r3
   28a3a:	2b02      	cmp	r3, #2
   28a3c:	d10b      	bne.n	28a56 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   28a3e:	230f      	movs	r3, #15
   28a40:	18fb      	adds	r3, r7, r3
   28a42:	781b      	ldrb	r3, [r3, #0]
   28a44:	2204      	movs	r2, #4
   28a46:	4013      	ands	r3, r2
   28a48:	d015      	beq.n	28a76 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28a4a:	697b      	ldr	r3, [r7, #20]
   28a4c:	695b      	ldr	r3, [r3, #20]
   28a4e:	697a      	ldr	r2, [r7, #20]
   28a50:	0010      	movs	r0, r2
   28a52:	4798      	blx	r3
   28a54:	e00f      	b.n	28a76 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28a56:	697b      	ldr	r3, [r7, #20]
   28a58:	7a5b      	ldrb	r3, [r3, #9]
   28a5a:	b2db      	uxtb	r3, r3
   28a5c:	2b00      	cmp	r3, #0
   28a5e:	d10a      	bne.n	28a76 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   28a60:	230f      	movs	r3, #15
   28a62:	18fb      	adds	r3, r7, r3
   28a64:	781b      	ldrb	r3, [r3, #0]
   28a66:	2202      	movs	r2, #2
   28a68:	4013      	ands	r3, r2
   28a6a:	d004      	beq.n	28a76 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28a6c:	697b      	ldr	r3, [r7, #20]
   28a6e:	691b      	ldr	r3, [r3, #16]
   28a70:	697a      	ldr	r2, [r7, #20]
   28a72:	0010      	movs	r0, r2
   28a74:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28a76:	230c      	movs	r3, #12
   28a78:	18fb      	adds	r3, r7, r3
   28a7a:	881b      	ldrh	r3, [r3, #0]
   28a7c:	2202      	movs	r2, #2
   28a7e:	4013      	ands	r3, r2
   28a80:	d024      	beq.n	28acc <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28a82:	697b      	ldr	r3, [r7, #20]
   28a84:	795b      	ldrb	r3, [r3, #5]
   28a86:	2b01      	cmp	r3, #1
   28a88:	d120      	bne.n	28acc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28a8a:	697b      	ldr	r3, [r7, #20]
   28a8c:	7a5b      	ldrb	r3, [r3, #9]
   28a8e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28a90:	2b01      	cmp	r3, #1
   28a92:	d11b      	bne.n	28acc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28a94:	697b      	ldr	r3, [r7, #20]
   28a96:	79db      	ldrb	r3, [r3, #7]
   28a98:	2201      	movs	r2, #1
   28a9a:	4053      	eors	r3, r2
   28a9c:	b2db      	uxtb	r3, r3
   28a9e:	2b00      	cmp	r3, #0
   28aa0:	d014      	beq.n	28acc <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28aa2:	693b      	ldr	r3, [r7, #16]
   28aa4:	2202      	movs	r2, #2
   28aa6:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28aa8:	697b      	ldr	r3, [r7, #20]
   28aaa:	2203      	movs	r2, #3
   28aac:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   28aae:	697b      	ldr	r3, [r7, #20]
   28ab0:	2238      	movs	r2, #56	; 0x38
   28ab2:	2100      	movs	r1, #0
   28ab4:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   28ab6:	230f      	movs	r3, #15
   28ab8:	18fb      	adds	r3, r7, r3
   28aba:	781b      	ldrb	r3, [r3, #0]
   28abc:	2201      	movs	r2, #1
   28abe:	4013      	ands	r3, r2
   28ac0:	d004      	beq.n	28acc <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   28ac2:	697b      	ldr	r3, [r7, #20]
   28ac4:	68db      	ldr	r3, [r3, #12]
   28ac6:	697a      	ldr	r2, [r7, #20]
   28ac8:	0010      	movs	r0, r2
   28aca:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   28acc:	230c      	movs	r3, #12
   28ace:	18fb      	adds	r3, r7, r3
   28ad0:	881b      	ldrh	r3, [r3, #0]
   28ad2:	2280      	movs	r2, #128	; 0x80
   28ad4:	4013      	ands	r3, r2
   28ad6:	d010      	beq.n	28afa <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28ad8:	693b      	ldr	r3, [r7, #16]
   28ada:	2280      	movs	r2, #128	; 0x80
   28adc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28ade:	693b      	ldr	r3, [r7, #16]
   28ae0:	2280      	movs	r2, #128	; 0x80
   28ae2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28ae4:	230f      	movs	r3, #15
   28ae6:	18fb      	adds	r3, r7, r3
   28ae8:	781b      	ldrb	r3, [r3, #0]
   28aea:	2240      	movs	r2, #64	; 0x40
   28aec:	4013      	ands	r3, r2
   28aee:	d004      	beq.n	28afa <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28af0:	697b      	ldr	r3, [r7, #20]
   28af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28af4:	697a      	ldr	r2, [r7, #20]
   28af6:	0010      	movs	r0, r2
   28af8:	4798      	blx	r3
		}
	}
#  endif
}
   28afa:	46c0      	nop			; (mov r8, r8)
   28afc:	46bd      	mov	sp, r7
   28afe:	b006      	add	sp, #24
   28b00:	bd80      	pop	{r7, pc}
   28b02:	46c0      	nop			; (mov r8, r8)
   28b04:	20005c44 	.word	0x20005c44
   28b08:	000287bd 	.word	0x000287bd
   28b0c:	00028741 	.word	0x00028741
   28b10:	000287f1 	.word	0x000287f1
   28b14:	00028827 	.word	0x00028827

00028b18 <system_gclk_chan_get_config_defaults>:
{
   28b18:	b580      	push	{r7, lr}
   28b1a:	b082      	sub	sp, #8
   28b1c:	af00      	add	r7, sp, #0
   28b1e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28b20:	687b      	ldr	r3, [r7, #4]
   28b22:	2200      	movs	r2, #0
   28b24:	701a      	strb	r2, [r3, #0]
}
   28b26:	46c0      	nop			; (mov r8, r8)
   28b28:	46bd      	mov	sp, r7
   28b2a:	b002      	add	sp, #8
   28b2c:	bd80      	pop	{r7, pc}
	...

00028b30 <system_apb_clock_set_mask>:
{
   28b30:	b580      	push	{r7, lr}
   28b32:	b082      	sub	sp, #8
   28b34:	af00      	add	r7, sp, #0
   28b36:	0002      	movs	r2, r0
   28b38:	6039      	str	r1, [r7, #0]
   28b3a:	1dfb      	adds	r3, r7, #7
   28b3c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28b3e:	1dfb      	adds	r3, r7, #7
   28b40:	781b      	ldrb	r3, [r3, #0]
   28b42:	2b01      	cmp	r3, #1
   28b44:	d00a      	beq.n	28b5c <system_apb_clock_set_mask+0x2c>
   28b46:	2b02      	cmp	r3, #2
   28b48:	d00f      	beq.n	28b6a <system_apb_clock_set_mask+0x3a>
   28b4a:	2b00      	cmp	r3, #0
   28b4c:	d114      	bne.n	28b78 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28b4e:	4b0e      	ldr	r3, [pc, #56]	; (28b88 <system_apb_clock_set_mask+0x58>)
   28b50:	4a0d      	ldr	r2, [pc, #52]	; (28b88 <system_apb_clock_set_mask+0x58>)
   28b52:	6991      	ldr	r1, [r2, #24]
   28b54:	683a      	ldr	r2, [r7, #0]
   28b56:	430a      	orrs	r2, r1
   28b58:	619a      	str	r2, [r3, #24]
			break;
   28b5a:	e00f      	b.n	28b7c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28b5c:	4b0a      	ldr	r3, [pc, #40]	; (28b88 <system_apb_clock_set_mask+0x58>)
   28b5e:	4a0a      	ldr	r2, [pc, #40]	; (28b88 <system_apb_clock_set_mask+0x58>)
   28b60:	69d1      	ldr	r1, [r2, #28]
   28b62:	683a      	ldr	r2, [r7, #0]
   28b64:	430a      	orrs	r2, r1
   28b66:	61da      	str	r2, [r3, #28]
			break;
   28b68:	e008      	b.n	28b7c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28b6a:	4b07      	ldr	r3, [pc, #28]	; (28b88 <system_apb_clock_set_mask+0x58>)
   28b6c:	4a06      	ldr	r2, [pc, #24]	; (28b88 <system_apb_clock_set_mask+0x58>)
   28b6e:	6a11      	ldr	r1, [r2, #32]
   28b70:	683a      	ldr	r2, [r7, #0]
   28b72:	430a      	orrs	r2, r1
   28b74:	621a      	str	r2, [r3, #32]
			break;
   28b76:	e001      	b.n	28b7c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28b78:	2317      	movs	r3, #23
   28b7a:	e000      	b.n	28b7e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28b7c:	2300      	movs	r3, #0
}
   28b7e:	0018      	movs	r0, r3
   28b80:	46bd      	mov	sp, r7
   28b82:	b002      	add	sp, #8
   28b84:	bd80      	pop	{r7, pc}
   28b86:	46c0      	nop			; (mov r8, r8)
   28b88:	40000400 	.word	0x40000400

00028b8c <system_pinmux_get_config_defaults>:
{
   28b8c:	b580      	push	{r7, lr}
   28b8e:	b082      	sub	sp, #8
   28b90:	af00      	add	r7, sp, #0
   28b92:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28b94:	687b      	ldr	r3, [r7, #4]
   28b96:	2280      	movs	r2, #128	; 0x80
   28b98:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28b9a:	687b      	ldr	r3, [r7, #4]
   28b9c:	2200      	movs	r2, #0
   28b9e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28ba0:	687b      	ldr	r3, [r7, #4]
   28ba2:	2201      	movs	r2, #1
   28ba4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28ba6:	687b      	ldr	r3, [r7, #4]
   28ba8:	2200      	movs	r2, #0
   28baa:	70da      	strb	r2, [r3, #3]
}
   28bac:	46c0      	nop			; (mov r8, r8)
   28bae:	46bd      	mov	sp, r7
   28bb0:	b002      	add	sp, #8
   28bb2:	bd80      	pop	{r7, pc}

00028bb4 <system_is_debugger_present>:
{
   28bb4:	b580      	push	{r7, lr}
   28bb6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28bb8:	4b05      	ldr	r3, [pc, #20]	; (28bd0 <system_is_debugger_present+0x1c>)
   28bba:	789b      	ldrb	r3, [r3, #2]
   28bbc:	b2db      	uxtb	r3, r3
   28bbe:	001a      	movs	r2, r3
   28bc0:	2302      	movs	r3, #2
   28bc2:	4013      	ands	r3, r2
   28bc4:	1e5a      	subs	r2, r3, #1
   28bc6:	4193      	sbcs	r3, r2
   28bc8:	b2db      	uxtb	r3, r3
}
   28bca:	0018      	movs	r0, r3
   28bcc:	46bd      	mov	sp, r7
   28bce:	bd80      	pop	{r7, pc}
   28bd0:	41002000 	.word	0x41002000

00028bd4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   28bd4:	b580      	push	{r7, lr}
   28bd6:	b084      	sub	sp, #16
   28bd8:	af00      	add	r7, sp, #0
   28bda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   28bdc:	687b      	ldr	r3, [r7, #4]
   28bde:	681b      	ldr	r3, [r3, #0]
   28be0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   28be2:	68fb      	ldr	r3, [r7, #12]
   28be4:	69db      	ldr	r3, [r3, #28]
   28be6:	1e5a      	subs	r2, r3, #1
   28be8:	4193      	sbcs	r3, r2
   28bea:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   28bec:	0018      	movs	r0, r3
   28bee:	46bd      	mov	sp, r7
   28bf0:	b004      	add	sp, #16
   28bf2:	bd80      	pop	{r7, pc}

00028bf4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   28bf4:	b580      	push	{r7, lr}
   28bf6:	b082      	sub	sp, #8
   28bf8:	af00      	add	r7, sp, #0
   28bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   28bfc:	46c0      	nop			; (mov r8, r8)
   28bfe:	687b      	ldr	r3, [r7, #4]
   28c00:	0018      	movs	r0, r3
   28c02:	4b04      	ldr	r3, [pc, #16]	; (28c14 <_usart_wait_for_sync+0x20>)
   28c04:	4798      	blx	r3
   28c06:	1e03      	subs	r3, r0, #0
   28c08:	d1f9      	bne.n	28bfe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   28c0a:	46c0      	nop			; (mov r8, r8)
   28c0c:	46bd      	mov	sp, r7
   28c0e:	b002      	add	sp, #8
   28c10:	bd80      	pop	{r7, pc}
   28c12:	46c0      	nop			; (mov r8, r8)
   28c14:	00028bd5 	.word	0x00028bd5

00028c18 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28c18:	b5b0      	push	{r4, r5, r7, lr}
   28c1a:	b08c      	sub	sp, #48	; 0x30
   28c1c:	af02      	add	r7, sp, #8
   28c1e:	6078      	str	r0, [r7, #4]
   28c20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28c22:	687b      	ldr	r3, [r7, #4]
   28c24:	681b      	ldr	r3, [r3, #0]
   28c26:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28c28:	687b      	ldr	r3, [r7, #4]
   28c2a:	681b      	ldr	r3, [r3, #0]
   28c2c:	0018      	movs	r0, r3
   28c2e:	4bab      	ldr	r3, [pc, #684]	; (28edc <_usart_set_config+0x2c4>)
   28c30:	4798      	blx	r3
   28c32:	0003      	movs	r3, r0
   28c34:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28c36:	697b      	ldr	r3, [r7, #20]
   28c38:	3314      	adds	r3, #20
   28c3a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28c3c:	2300      	movs	r3, #0
   28c3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28c40:	2300      	movs	r3, #0
   28c42:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28c44:	230a      	movs	r3, #10
   28c46:	18fb      	adds	r3, r7, r3
   28c48:	2200      	movs	r2, #0
   28c4a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28c4c:	231f      	movs	r3, #31
   28c4e:	18fb      	adds	r3, r7, r3
   28c50:	2200      	movs	r2, #0
   28c52:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28c54:	231e      	movs	r3, #30
   28c56:	18fb      	adds	r3, r7, r3
   28c58:	2210      	movs	r2, #16
   28c5a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28c5c:	683b      	ldr	r3, [r7, #0]
   28c5e:	8a1b      	ldrh	r3, [r3, #16]
   28c60:	2280      	movs	r2, #128	; 0x80
   28c62:	01d2      	lsls	r2, r2, #7
   28c64:	4293      	cmp	r3, r2
   28c66:	d01c      	beq.n	28ca2 <_usart_set_config+0x8a>
   28c68:	2280      	movs	r2, #128	; 0x80
   28c6a:	01d2      	lsls	r2, r2, #7
   28c6c:	4293      	cmp	r3, r2
   28c6e:	dc06      	bgt.n	28c7e <_usart_set_config+0x66>
   28c70:	2b00      	cmp	r3, #0
   28c72:	d00d      	beq.n	28c90 <_usart_set_config+0x78>
   28c74:	2280      	movs	r2, #128	; 0x80
   28c76:	0192      	lsls	r2, r2, #6
   28c78:	4293      	cmp	r3, r2
   28c7a:	d024      	beq.n	28cc6 <_usart_set_config+0xae>
   28c7c:	e035      	b.n	28cea <_usart_set_config+0xd2>
   28c7e:	22c0      	movs	r2, #192	; 0xc0
   28c80:	01d2      	lsls	r2, r2, #7
   28c82:	4293      	cmp	r3, r2
   28c84:	d028      	beq.n	28cd8 <_usart_set_config+0xc0>
   28c86:	2280      	movs	r2, #128	; 0x80
   28c88:	0212      	lsls	r2, r2, #8
   28c8a:	4293      	cmp	r3, r2
   28c8c:	d012      	beq.n	28cb4 <_usart_set_config+0x9c>
   28c8e:	e02c      	b.n	28cea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28c90:	231f      	movs	r3, #31
   28c92:	18fb      	adds	r3, r7, r3
   28c94:	2200      	movs	r2, #0
   28c96:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28c98:	231e      	movs	r3, #30
   28c9a:	18fb      	adds	r3, r7, r3
   28c9c:	2210      	movs	r2, #16
   28c9e:	701a      	strb	r2, [r3, #0]
			break;
   28ca0:	e023      	b.n	28cea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28ca2:	231f      	movs	r3, #31
   28ca4:	18fb      	adds	r3, r7, r3
   28ca6:	2200      	movs	r2, #0
   28ca8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28caa:	231e      	movs	r3, #30
   28cac:	18fb      	adds	r3, r7, r3
   28cae:	2208      	movs	r2, #8
   28cb0:	701a      	strb	r2, [r3, #0]
			break;
   28cb2:	e01a      	b.n	28cea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28cb4:	231f      	movs	r3, #31
   28cb6:	18fb      	adds	r3, r7, r3
   28cb8:	2200      	movs	r2, #0
   28cba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   28cbc:	231e      	movs	r3, #30
   28cbe:	18fb      	adds	r3, r7, r3
   28cc0:	2203      	movs	r2, #3
   28cc2:	701a      	strb	r2, [r3, #0]
			break;
   28cc4:	e011      	b.n	28cea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28cc6:	231f      	movs	r3, #31
   28cc8:	18fb      	adds	r3, r7, r3
   28cca:	2201      	movs	r2, #1
   28ccc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28cce:	231e      	movs	r3, #30
   28cd0:	18fb      	adds	r3, r7, r3
   28cd2:	2210      	movs	r2, #16
   28cd4:	701a      	strb	r2, [r3, #0]
			break;
   28cd6:	e008      	b.n	28cea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28cd8:	231f      	movs	r3, #31
   28cda:	18fb      	adds	r3, r7, r3
   28cdc:	2201      	movs	r2, #1
   28cde:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28ce0:	231e      	movs	r3, #30
   28ce2:	18fb      	adds	r3, r7, r3
   28ce4:	2208      	movs	r2, #8
   28ce6:	701a      	strb	r2, [r3, #0]
			break;
   28ce8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28cea:	683b      	ldr	r3, [r7, #0]
   28cec:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28cee:	683b      	ldr	r3, [r7, #0]
   28cf0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   28cf2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28cf4:	683b      	ldr	r3, [r7, #0]
   28cf6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28cf8:	4313      	orrs	r3, r2
		config->sample_rate |
   28cfa:	683a      	ldr	r2, [r7, #0]
   28cfc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28cfe:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28d00:	683a      	ldr	r2, [r7, #0]
   28d02:	7e12      	ldrb	r2, [r2, #24]
   28d04:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28d06:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28d08:	683a      	ldr	r2, [r7, #0]
   28d0a:	2126      	movs	r1, #38	; 0x26
   28d0c:	5c52      	ldrb	r2, [r2, r1]
   28d0e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   28d10:	4313      	orrs	r3, r2
   28d12:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28d14:	231d      	movs	r3, #29
   28d16:	18fb      	adds	r3, r7, r3
   28d18:	2200      	movs	r2, #0
   28d1a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28d1c:	683b      	ldr	r3, [r7, #0]
   28d1e:	685b      	ldr	r3, [r3, #4]
   28d20:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   28d22:	68fb      	ldr	r3, [r7, #12]
   28d24:	2b00      	cmp	r3, #0
   28d26:	d01e      	beq.n	28d66 <_usart_set_config+0x14e>
   28d28:	2280      	movs	r2, #128	; 0x80
   28d2a:	0552      	lsls	r2, r2, #21
   28d2c:	4293      	cmp	r3, r2
   28d2e:	d14f      	bne.n	28dd0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28d30:	683b      	ldr	r3, [r7, #0]
   28d32:	2227      	movs	r2, #39	; 0x27
   28d34:	5c9b      	ldrb	r3, [r3, r2]
   28d36:	2201      	movs	r2, #1
   28d38:	4053      	eors	r3, r2
   28d3a:	b2db      	uxtb	r3, r3
   28d3c:	2b00      	cmp	r3, #0
   28d3e:	d046      	beq.n	28dce <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28d40:	683b      	ldr	r3, [r7, #0]
   28d42:	6a1d      	ldr	r5, [r3, #32]
   28d44:	693b      	ldr	r3, [r7, #16]
   28d46:	b2db      	uxtb	r3, r3
   28d48:	0018      	movs	r0, r3
   28d4a:	4b65      	ldr	r3, [pc, #404]	; (28ee0 <_usart_set_config+0x2c8>)
   28d4c:	4798      	blx	r3
   28d4e:	0001      	movs	r1, r0
   28d50:	231d      	movs	r3, #29
   28d52:	18fc      	adds	r4, r7, r3
   28d54:	230a      	movs	r3, #10
   28d56:	18fb      	adds	r3, r7, r3
   28d58:	001a      	movs	r2, r3
   28d5a:	0028      	movs	r0, r5
   28d5c:	4b61      	ldr	r3, [pc, #388]	; (28ee4 <_usart_set_config+0x2cc>)
   28d5e:	4798      	blx	r3
   28d60:	0003      	movs	r3, r0
   28d62:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   28d64:	e033      	b.n	28dce <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   28d66:	683b      	ldr	r3, [r7, #0]
   28d68:	2227      	movs	r2, #39	; 0x27
   28d6a:	5c9b      	ldrb	r3, [r3, r2]
   28d6c:	2b00      	cmp	r3, #0
   28d6e:	d014      	beq.n	28d9a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28d70:	683b      	ldr	r3, [r7, #0]
   28d72:	6a18      	ldr	r0, [r3, #32]
   28d74:	683b      	ldr	r3, [r7, #0]
   28d76:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28d78:	231d      	movs	r3, #29
   28d7a:	18fc      	adds	r4, r7, r3
   28d7c:	231f      	movs	r3, #31
   28d7e:	18fb      	adds	r3, r7, r3
   28d80:	781d      	ldrb	r5, [r3, #0]
   28d82:	230a      	movs	r3, #10
   28d84:	18fa      	adds	r2, r7, r3
   28d86:	231e      	movs	r3, #30
   28d88:	18fb      	adds	r3, r7, r3
   28d8a:	781b      	ldrb	r3, [r3, #0]
   28d8c:	9300      	str	r3, [sp, #0]
   28d8e:	002b      	movs	r3, r5
   28d90:	4d55      	ldr	r5, [pc, #340]	; (28ee8 <_usart_set_config+0x2d0>)
   28d92:	47a8      	blx	r5
   28d94:	0003      	movs	r3, r0
   28d96:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28d98:	e01a      	b.n	28dd0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28d9a:	683b      	ldr	r3, [r7, #0]
   28d9c:	6a1d      	ldr	r5, [r3, #32]
   28d9e:	693b      	ldr	r3, [r7, #16]
   28da0:	b2db      	uxtb	r3, r3
   28da2:	0018      	movs	r0, r3
   28da4:	4b4e      	ldr	r3, [pc, #312]	; (28ee0 <_usart_set_config+0x2c8>)
   28da6:	4798      	blx	r3
				status_code =
   28da8:	231d      	movs	r3, #29
   28daa:	18fc      	adds	r4, r7, r3
   28dac:	231f      	movs	r3, #31
   28dae:	18fb      	adds	r3, r7, r3
   28db0:	7819      	ldrb	r1, [r3, #0]
   28db2:	230a      	movs	r3, #10
   28db4:	18fa      	adds	r2, r7, r3
   28db6:	231e      	movs	r3, #30
   28db8:	18fb      	adds	r3, r7, r3
   28dba:	781b      	ldrb	r3, [r3, #0]
   28dbc:	9300      	str	r3, [sp, #0]
   28dbe:	000b      	movs	r3, r1
   28dc0:	0001      	movs	r1, r0
   28dc2:	0028      	movs	r0, r5
   28dc4:	4d48      	ldr	r5, [pc, #288]	; (28ee8 <_usart_set_config+0x2d0>)
   28dc6:	47a8      	blx	r5
   28dc8:	0003      	movs	r3, r0
   28dca:	7023      	strb	r3, [r4, #0]
			break;
   28dcc:	e000      	b.n	28dd0 <_usart_set_config+0x1b8>
			break;
   28dce:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   28dd0:	231d      	movs	r3, #29
   28dd2:	18fb      	adds	r3, r7, r3
   28dd4:	781b      	ldrb	r3, [r3, #0]
   28dd6:	2b00      	cmp	r3, #0
   28dd8:	d003      	beq.n	28de2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   28dda:	231d      	movs	r3, #29
   28ddc:	18fb      	adds	r3, r7, r3
   28dde:	781b      	ldrb	r3, [r3, #0]
   28de0:	e077      	b.n	28ed2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   28de2:	683b      	ldr	r3, [r7, #0]
   28de4:	7e5b      	ldrb	r3, [r3, #25]
   28de6:	2b00      	cmp	r3, #0
   28de8:	d003      	beq.n	28df2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28dea:	683b      	ldr	r3, [r7, #0]
   28dec:	7e9a      	ldrb	r2, [r3, #26]
   28dee:	69bb      	ldr	r3, [r7, #24]
   28df0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28df2:	687b      	ldr	r3, [r7, #4]
   28df4:	0018      	movs	r0, r3
   28df6:	4b3d      	ldr	r3, [pc, #244]	; (28eec <_usart_set_config+0x2d4>)
   28df8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28dfa:	230a      	movs	r3, #10
   28dfc:	18fb      	adds	r3, r7, r3
   28dfe:	881a      	ldrh	r2, [r3, #0]
   28e00:	69bb      	ldr	r3, [r7, #24]
   28e02:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28e06:	68fb      	ldr	r3, [r7, #12]
   28e08:	4313      	orrs	r3, r2
   28e0a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28e0c:	683b      	ldr	r3, [r7, #0]
   28e0e:	2227      	movs	r2, #39	; 0x27
   28e10:	5c9b      	ldrb	r3, [r3, r2]
   28e12:	2201      	movs	r2, #1
   28e14:	4053      	eors	r3, r2
   28e16:	b2db      	uxtb	r3, r3
   28e18:	2b00      	cmp	r3, #0
   28e1a:	d003      	beq.n	28e24 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28e1e:	2204      	movs	r2, #4
   28e20:	4313      	orrs	r3, r2
   28e22:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28e24:	683b      	ldr	r3, [r7, #0]
   28e26:	7e5b      	ldrb	r3, [r3, #25]
   28e28:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28e2a:	683b      	ldr	r3, [r7, #0]
   28e2c:	7f1b      	ldrb	r3, [r3, #28]
   28e2e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28e30:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28e32:	683b      	ldr	r3, [r7, #0]
   28e34:	7f5b      	ldrb	r3, [r3, #29]
   28e36:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28e38:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28e3a:	683b      	ldr	r3, [r7, #0]
   28e3c:	2124      	movs	r1, #36	; 0x24
   28e3e:	5c5b      	ldrb	r3, [r3, r1]
   28e40:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28e42:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28e44:	683b      	ldr	r3, [r7, #0]
   28e46:	2125      	movs	r1, #37	; 0x25
   28e48:	5c5b      	ldrb	r3, [r3, r1]
   28e4a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28e4c:	4313      	orrs	r3, r2
	ctrlb =  
   28e4e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28e50:	683b      	ldr	r3, [r7, #0]
   28e52:	7a9b      	ldrb	r3, [r3, #10]
   28e54:	001a      	movs	r2, r3
   28e56:	6a3b      	ldr	r3, [r7, #32]
   28e58:	4313      	orrs	r3, r2
   28e5a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28e5c:	683b      	ldr	r3, [r7, #0]
   28e5e:	7adb      	ldrb	r3, [r3, #11]
   28e60:	001a      	movs	r2, r3
   28e62:	6a3b      	ldr	r3, [r7, #32]
   28e64:	4313      	orrs	r3, r2
   28e66:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28e68:	683b      	ldr	r3, [r7, #0]
   28e6a:	891b      	ldrh	r3, [r3, #8]
   28e6c:	2bff      	cmp	r3, #255	; 0xff
   28e6e:	d00b      	beq.n	28e88 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28e72:	2280      	movs	r2, #128	; 0x80
   28e74:	0452      	lsls	r2, r2, #17
   28e76:	4313      	orrs	r3, r2
   28e78:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28e7a:	683b      	ldr	r3, [r7, #0]
   28e7c:	891b      	ldrh	r3, [r3, #8]
   28e7e:	001a      	movs	r2, r3
   28e80:	6a3b      	ldr	r3, [r7, #32]
   28e82:	4313      	orrs	r3, r2
   28e84:	623b      	str	r3, [r7, #32]
   28e86:	e008      	b.n	28e9a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28e88:	683b      	ldr	r3, [r7, #0]
   28e8a:	7edb      	ldrb	r3, [r3, #27]
   28e8c:	2b00      	cmp	r3, #0
   28e8e:	d004      	beq.n	28e9a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   28e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28e92:	2280      	movs	r2, #128	; 0x80
   28e94:	04d2      	lsls	r2, r2, #19
   28e96:	4313      	orrs	r3, r2
   28e98:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28e9a:	683b      	ldr	r3, [r7, #0]
   28e9c:	222c      	movs	r2, #44	; 0x2c
   28e9e:	5c9b      	ldrb	r3, [r3, r2]
   28ea0:	2b00      	cmp	r3, #0
   28ea2:	d103      	bne.n	28eac <_usart_set_config+0x294>
   28ea4:	4b12      	ldr	r3, [pc, #72]	; (28ef0 <_usart_set_config+0x2d8>)
   28ea6:	4798      	blx	r3
   28ea8:	1e03      	subs	r3, r0, #0
   28eaa:	d003      	beq.n	28eb4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   28eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28eae:	2280      	movs	r2, #128	; 0x80
   28eb0:	4313      	orrs	r3, r2
   28eb2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28eb4:	687b      	ldr	r3, [r7, #4]
   28eb6:	0018      	movs	r0, r3
   28eb8:	4b0c      	ldr	r3, [pc, #48]	; (28eec <_usart_set_config+0x2d4>)
   28eba:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   28ebc:	69bb      	ldr	r3, [r7, #24]
   28ebe:	6a3a      	ldr	r2, [r7, #32]
   28ec0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28ec2:	687b      	ldr	r3, [r7, #4]
   28ec4:	0018      	movs	r0, r3
   28ec6:	4b09      	ldr	r3, [pc, #36]	; (28eec <_usart_set_config+0x2d4>)
   28ec8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   28eca:	69bb      	ldr	r3, [r7, #24]
   28ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28ece:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   28ed0:	2300      	movs	r3, #0
}
   28ed2:	0018      	movs	r0, r3
   28ed4:	46bd      	mov	sp, r7
   28ed6:	b00a      	add	sp, #40	; 0x28
   28ed8:	bdb0      	pop	{r4, r5, r7, pc}
   28eda:	46c0      	nop			; (mov r8, r8)
   28edc:	000279c1 	.word	0x000279c1
   28ee0:	0002a375 	.word	0x0002a375
   28ee4:	0002753b 	.word	0x0002753b
   28ee8:	000275b9 	.word	0x000275b9
   28eec:	00028bf5 	.word	0x00028bf5
   28ef0:	00028bb5 	.word	0x00028bb5

00028ef4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28ef4:	b590      	push	{r4, r7, lr}
   28ef6:	b093      	sub	sp, #76	; 0x4c
   28ef8:	af00      	add	r7, sp, #0
   28efa:	60f8      	str	r0, [r7, #12]
   28efc:	60b9      	str	r1, [r7, #8]
   28efe:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28f00:	233b      	movs	r3, #59	; 0x3b
   28f02:	18fb      	adds	r3, r7, r3
   28f04:	2200      	movs	r2, #0
   28f06:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28f08:	68fb      	ldr	r3, [r7, #12]
   28f0a:	68ba      	ldr	r2, [r7, #8]
   28f0c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28f0e:	68fb      	ldr	r3, [r7, #12]
   28f10:	681b      	ldr	r3, [r3, #0]
   28f12:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28f14:	68fb      	ldr	r3, [r7, #12]
   28f16:	681b      	ldr	r3, [r3, #0]
   28f18:	0018      	movs	r0, r3
   28f1a:	4b86      	ldr	r3, [pc, #536]	; (29134 <usart_init+0x240>)
   28f1c:	4798      	blx	r3
   28f1e:	0003      	movs	r3, r0
   28f20:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28f24:	3302      	adds	r3, #2
   28f26:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28f2a:	3314      	adds	r3, #20
   28f2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28f30:	681b      	ldr	r3, [r3, #0]
   28f32:	2201      	movs	r2, #1
   28f34:	4013      	ands	r3, r2
   28f36:	d001      	beq.n	28f3c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28f38:	2305      	movs	r3, #5
   28f3a:	e0f6      	b.n	2912a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28f3e:	681b      	ldr	r3, [r3, #0]
   28f40:	2202      	movs	r2, #2
   28f42:	4013      	ands	r3, r2
   28f44:	d001      	beq.n	28f4a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   28f46:	231c      	movs	r3, #28
   28f48:	e0ef      	b.n	2912a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28f4a:	2201      	movs	r2, #1
   28f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28f4e:	409a      	lsls	r2, r3
   28f50:	0013      	movs	r3, r2
   28f52:	0019      	movs	r1, r3
   28f54:	2002      	movs	r0, #2
   28f56:	4b78      	ldr	r3, [pc, #480]	; (29138 <usart_init+0x244>)
   28f58:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28f5a:	2324      	movs	r3, #36	; 0x24
   28f5c:	18fb      	adds	r3, r7, r3
   28f5e:	0018      	movs	r0, r3
   28f60:	4b76      	ldr	r3, [pc, #472]	; (2913c <usart_init+0x248>)
   28f62:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28f64:	687b      	ldr	r3, [r7, #4]
   28f66:	222d      	movs	r2, #45	; 0x2d
   28f68:	5c9a      	ldrb	r2, [r3, r2]
   28f6a:	2324      	movs	r3, #36	; 0x24
   28f6c:	18fb      	adds	r3, r7, r3
   28f6e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28f72:	b2db      	uxtb	r3, r3
   28f74:	2224      	movs	r2, #36	; 0x24
   28f76:	18ba      	adds	r2, r7, r2
   28f78:	0011      	movs	r1, r2
   28f7a:	0018      	movs	r0, r3
   28f7c:	4b70      	ldr	r3, [pc, #448]	; (29140 <usart_init+0x24c>)
   28f7e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28f82:	b2db      	uxtb	r3, r3
   28f84:	0018      	movs	r0, r3
   28f86:	4b6f      	ldr	r3, [pc, #444]	; (29144 <usart_init+0x250>)
   28f88:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28f8a:	687b      	ldr	r3, [r7, #4]
   28f8c:	222d      	movs	r2, #45	; 0x2d
   28f8e:	5c9b      	ldrb	r3, [r3, r2]
   28f90:	2100      	movs	r1, #0
   28f92:	0018      	movs	r0, r3
   28f94:	4b6c      	ldr	r3, [pc, #432]	; (29148 <usart_init+0x254>)
   28f96:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28f98:	687b      	ldr	r3, [r7, #4]
   28f9a:	7ada      	ldrb	r2, [r3, #11]
   28f9c:	68fb      	ldr	r3, [r7, #12]
   28f9e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28fa0:	687b      	ldr	r3, [r7, #4]
   28fa2:	2224      	movs	r2, #36	; 0x24
   28fa4:	5c9a      	ldrb	r2, [r3, r2]
   28fa6:	68fb      	ldr	r3, [r7, #12]
   28fa8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28faa:	687b      	ldr	r3, [r7, #4]
   28fac:	2225      	movs	r2, #37	; 0x25
   28fae:	5c9a      	ldrb	r2, [r3, r2]
   28fb0:	68fb      	ldr	r3, [r7, #12]
   28fb2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   28fb4:	687b      	ldr	r3, [r7, #4]
   28fb6:	7eda      	ldrb	r2, [r3, #27]
   28fb8:	68fb      	ldr	r3, [r7, #12]
   28fba:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   28fbc:	687b      	ldr	r3, [r7, #4]
   28fbe:	7f1a      	ldrb	r2, [r3, #28]
   28fc0:	68fb      	ldr	r3, [r7, #12]
   28fc2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   28fc4:	233b      	movs	r3, #59	; 0x3b
   28fc6:	18fc      	adds	r4, r7, r3
   28fc8:	687a      	ldr	r2, [r7, #4]
   28fca:	68fb      	ldr	r3, [r7, #12]
   28fcc:	0011      	movs	r1, r2
   28fce:	0018      	movs	r0, r3
   28fd0:	4b5e      	ldr	r3, [pc, #376]	; (2914c <usart_init+0x258>)
   28fd2:	4798      	blx	r3
   28fd4:	0003      	movs	r3, r0
   28fd6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28fd8:	233b      	movs	r3, #59	; 0x3b
   28fda:	18fb      	adds	r3, r7, r3
   28fdc:	781b      	ldrb	r3, [r3, #0]
   28fde:	2b00      	cmp	r3, #0
   28fe0:	d003      	beq.n	28fea <usart_init+0xf6>
		return status_code;
   28fe2:	233b      	movs	r3, #59	; 0x3b
   28fe4:	18fb      	adds	r3, r7, r3
   28fe6:	781b      	ldrb	r3, [r3, #0]
   28fe8:	e09f      	b.n	2912a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28fea:	2320      	movs	r3, #32
   28fec:	18fb      	adds	r3, r7, r3
   28fee:	0018      	movs	r0, r3
   28ff0:	4b57      	ldr	r3, [pc, #348]	; (29150 <usart_init+0x25c>)
   28ff2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28ff4:	2320      	movs	r3, #32
   28ff6:	18fb      	adds	r3, r7, r3
   28ff8:	2200      	movs	r2, #0
   28ffa:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28ffc:	2320      	movs	r3, #32
   28ffe:	18fb      	adds	r3, r7, r3
   29000:	2200      	movs	r2, #0
   29002:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29004:	687b      	ldr	r3, [r7, #4]
   29006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29008:	2310      	movs	r3, #16
   2900a:	18fb      	adds	r3, r7, r3
   2900c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2900e:	687b      	ldr	r3, [r7, #4]
   29010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29012:	2310      	movs	r3, #16
   29014:	18fb      	adds	r3, r7, r3
   29016:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29018:	687b      	ldr	r3, [r7, #4]
   2901a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2901c:	2310      	movs	r3, #16
   2901e:	18fb      	adds	r3, r7, r3
   29020:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   29022:	687b      	ldr	r3, [r7, #4]
   29024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29026:	2310      	movs	r3, #16
   29028:	18fb      	adds	r3, r7, r3
   2902a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2902c:	2347      	movs	r3, #71	; 0x47
   2902e:	18fb      	adds	r3, r7, r3
   29030:	2200      	movs	r2, #0
   29032:	701a      	strb	r2, [r3, #0]
   29034:	e02c      	b.n	29090 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29036:	2347      	movs	r3, #71	; 0x47
   29038:	18fb      	adds	r3, r7, r3
   2903a:	781a      	ldrb	r2, [r3, #0]
   2903c:	2310      	movs	r3, #16
   2903e:	18fb      	adds	r3, r7, r3
   29040:	0092      	lsls	r2, r2, #2
   29042:	58d3      	ldr	r3, [r2, r3]
   29044:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29048:	2b00      	cmp	r3, #0
   2904a:	d109      	bne.n	29060 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2904c:	2347      	movs	r3, #71	; 0x47
   2904e:	18fb      	adds	r3, r7, r3
   29050:	781a      	ldrb	r2, [r3, #0]
   29052:	68bb      	ldr	r3, [r7, #8]
   29054:	0011      	movs	r1, r2
   29056:	0018      	movs	r0, r3
   29058:	4b3e      	ldr	r3, [pc, #248]	; (29154 <usart_init+0x260>)
   2905a:	4798      	blx	r3
   2905c:	0003      	movs	r3, r0
   2905e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29062:	3301      	adds	r3, #1
   29064:	d00d      	beq.n	29082 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29068:	b2da      	uxtb	r2, r3
   2906a:	2320      	movs	r3, #32
   2906c:	18fb      	adds	r3, r7, r3
   2906e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29072:	0c1b      	lsrs	r3, r3, #16
   29074:	b2db      	uxtb	r3, r3
   29076:	2220      	movs	r2, #32
   29078:	18ba      	adds	r2, r7, r2
   2907a:	0011      	movs	r1, r2
   2907c:	0018      	movs	r0, r3
   2907e:	4b36      	ldr	r3, [pc, #216]	; (29158 <usart_init+0x264>)
   29080:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29082:	2347      	movs	r3, #71	; 0x47
   29084:	18fb      	adds	r3, r7, r3
   29086:	781a      	ldrb	r2, [r3, #0]
   29088:	2347      	movs	r3, #71	; 0x47
   2908a:	18fb      	adds	r3, r7, r3
   2908c:	3201      	adds	r2, #1
   2908e:	701a      	strb	r2, [r3, #0]
   29090:	2347      	movs	r3, #71	; 0x47
   29092:	18fb      	adds	r3, r7, r3
   29094:	781b      	ldrb	r3, [r3, #0]
   29096:	2b03      	cmp	r3, #3
   29098:	d9cd      	bls.n	29036 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2909a:	2300      	movs	r3, #0
   2909c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2909e:	e00a      	b.n	290b6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   290a0:	68fa      	ldr	r2, [r7, #12]
   290a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   290a4:	3302      	adds	r3, #2
   290a6:	009b      	lsls	r3, r3, #2
   290a8:	18d3      	adds	r3, r2, r3
   290aa:	3304      	adds	r3, #4
   290ac:	2200      	movs	r2, #0
   290ae:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   290b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   290b2:	3301      	adds	r3, #1
   290b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   290b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   290b8:	2b05      	cmp	r3, #5
   290ba:	d9f1      	bls.n	290a0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   290bc:	68fb      	ldr	r3, [r7, #12]
   290be:	2200      	movs	r2, #0
   290c0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   290c2:	68fb      	ldr	r3, [r7, #12]
   290c4:	2200      	movs	r2, #0
   290c6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   290c8:	68fb      	ldr	r3, [r7, #12]
   290ca:	2200      	movs	r2, #0
   290cc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   290ce:	68fb      	ldr	r3, [r7, #12]
   290d0:	2200      	movs	r2, #0
   290d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   290d4:	68fb      	ldr	r3, [r7, #12]
   290d6:	2230      	movs	r2, #48	; 0x30
   290d8:	2100      	movs	r1, #0
   290da:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   290dc:	68fb      	ldr	r3, [r7, #12]
   290de:	2231      	movs	r2, #49	; 0x31
   290e0:	2100      	movs	r1, #0
   290e2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   290e4:	68fb      	ldr	r3, [r7, #12]
   290e6:	2232      	movs	r2, #50	; 0x32
   290e8:	2100      	movs	r1, #0
   290ea:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   290ec:	68fb      	ldr	r3, [r7, #12]
   290ee:	2233      	movs	r2, #51	; 0x33
   290f0:	2100      	movs	r1, #0
   290f2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   290f4:	68fb      	ldr	r3, [r7, #12]
   290f6:	681b      	ldr	r3, [r3, #0]
   290f8:	2227      	movs	r2, #39	; 0x27
   290fa:	18bc      	adds	r4, r7, r2
   290fc:	0018      	movs	r0, r3
   290fe:	4b0d      	ldr	r3, [pc, #52]	; (29134 <usart_init+0x240>)
   29100:	4798      	blx	r3
   29102:	0003      	movs	r3, r0
   29104:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29106:	4a15      	ldr	r2, [pc, #84]	; (2915c <usart_init+0x268>)
   29108:	2327      	movs	r3, #39	; 0x27
   2910a:	18fb      	adds	r3, r7, r3
   2910c:	781b      	ldrb	r3, [r3, #0]
   2910e:	0011      	movs	r1, r2
   29110:	0018      	movs	r0, r3
   29112:	4b13      	ldr	r3, [pc, #76]	; (29160 <usart_init+0x26c>)
   29114:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29116:	2327      	movs	r3, #39	; 0x27
   29118:	18fb      	adds	r3, r7, r3
   2911a:	781a      	ldrb	r2, [r3, #0]
   2911c:	4b11      	ldr	r3, [pc, #68]	; (29164 <usart_init+0x270>)
   2911e:	0092      	lsls	r2, r2, #2
   29120:	68f9      	ldr	r1, [r7, #12]
   29122:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29124:	233b      	movs	r3, #59	; 0x3b
   29126:	18fb      	adds	r3, r7, r3
   29128:	781b      	ldrb	r3, [r3, #0]
}
   2912a:	0018      	movs	r0, r3
   2912c:	46bd      	mov	sp, r7
   2912e:	b013      	add	sp, #76	; 0x4c
   29130:	bd90      	pop	{r4, r7, pc}
   29132:	46c0      	nop			; (mov r8, r8)
   29134:	000279c1 	.word	0x000279c1
   29138:	00028b31 	.word	0x00028b31
   2913c:	00028b19 	.word	0x00028b19
   29140:	0002a251 	.word	0x0002a251
   29144:	0002a295 	.word	0x0002a295
   29148:	00027779 	.word	0x00027779
   2914c:	00028c19 	.word	0x00028c19
   29150:	00028b8d 	.word	0x00028b8d
   29154:	00027805 	.word	0x00027805
   29158:	0002a5b1 	.word	0x0002a5b1
   2915c:	000293d1 	.word	0x000293d1
   29160:	00027a25 	.word	0x00027a25
   29164:	20005c44 	.word	0x20005c44

00029168 <system_interrupt_enter_critical_section>:
{
   29168:	b580      	push	{r7, lr}
   2916a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2916c:	4b02      	ldr	r3, [pc, #8]	; (29178 <system_interrupt_enter_critical_section+0x10>)
   2916e:	4798      	blx	r3
}
   29170:	46c0      	nop			; (mov r8, r8)
   29172:	46bd      	mov	sp, r7
   29174:	bd80      	pop	{r7, pc}
   29176:	46c0      	nop			; (mov r8, r8)
   29178:	000265bd 	.word	0x000265bd

0002917c <system_interrupt_leave_critical_section>:
{
   2917c:	b580      	push	{r7, lr}
   2917e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29180:	4b02      	ldr	r3, [pc, #8]	; (2918c <system_interrupt_leave_critical_section+0x10>)
   29182:	4798      	blx	r3
}
   29184:	46c0      	nop			; (mov r8, r8)
   29186:	46bd      	mov	sp, r7
   29188:	bd80      	pop	{r7, pc}
   2918a:	46c0      	nop			; (mov r8, r8)
   2918c:	00026611 	.word	0x00026611

00029190 <usart_is_syncing>:
{
   29190:	b580      	push	{r7, lr}
   29192:	b084      	sub	sp, #16
   29194:	af00      	add	r7, sp, #0
   29196:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29198:	687b      	ldr	r3, [r7, #4]
   2919a:	681b      	ldr	r3, [r3, #0]
   2919c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2919e:	68fb      	ldr	r3, [r7, #12]
   291a0:	69db      	ldr	r3, [r3, #28]
   291a2:	1e5a      	subs	r2, r3, #1
   291a4:	4193      	sbcs	r3, r2
   291a6:	b2db      	uxtb	r3, r3
}
   291a8:	0018      	movs	r0, r3
   291aa:	46bd      	mov	sp, r7
   291ac:	b004      	add	sp, #16
   291ae:	bd80      	pop	{r7, pc}

000291b0 <_usart_wait_for_sync>:
{
   291b0:	b580      	push	{r7, lr}
   291b2:	b082      	sub	sp, #8
   291b4:	af00      	add	r7, sp, #0
   291b6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   291b8:	46c0      	nop			; (mov r8, r8)
   291ba:	687b      	ldr	r3, [r7, #4]
   291bc:	0018      	movs	r0, r3
   291be:	4b04      	ldr	r3, [pc, #16]	; (291d0 <_usart_wait_for_sync+0x20>)
   291c0:	4798      	blx	r3
   291c2:	1e03      	subs	r3, r0, #0
   291c4:	d1f9      	bne.n	291ba <_usart_wait_for_sync+0xa>
}
   291c6:	46c0      	nop			; (mov r8, r8)
   291c8:	46bd      	mov	sp, r7
   291ca:	b002      	add	sp, #8
   291cc:	bd80      	pop	{r7, pc}
   291ce:	46c0      	nop			; (mov r8, r8)
   291d0:	00029191 	.word	0x00029191

000291d4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   291d4:	b580      	push	{r7, lr}
   291d6:	b086      	sub	sp, #24
   291d8:	af00      	add	r7, sp, #0
   291da:	60f8      	str	r0, [r7, #12]
   291dc:	60b9      	str	r1, [r7, #8]
   291de:	1dbb      	adds	r3, r7, #6
   291e0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   291e2:	68fb      	ldr	r3, [r7, #12]
   291e4:	681b      	ldr	r3, [r3, #0]
   291e6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   291e8:	4b0f      	ldr	r3, [pc, #60]	; (29228 <_usart_write_buffer+0x54>)
   291ea:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   291ec:	68fb      	ldr	r3, [r7, #12]
   291ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   291f0:	b29b      	uxth	r3, r3
   291f2:	2b00      	cmp	r3, #0
   291f4:	d003      	beq.n	291fe <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   291f6:	4b0d      	ldr	r3, [pc, #52]	; (2922c <_usart_write_buffer+0x58>)
   291f8:	4798      	blx	r3
		return STATUS_BUSY;
   291fa:	2305      	movs	r3, #5
   291fc:	e010      	b.n	29220 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   291fe:	68fb      	ldr	r3, [r7, #12]
   29200:	1dba      	adds	r2, r7, #6
   29202:	8812      	ldrh	r2, [r2, #0]
   29204:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29206:	4b09      	ldr	r3, [pc, #36]	; (2922c <_usart_write_buffer+0x58>)
   29208:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2920a:	68fb      	ldr	r3, [r7, #12]
   2920c:	68ba      	ldr	r2, [r7, #8]
   2920e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   29210:	68fb      	ldr	r3, [r7, #12]
   29212:	2233      	movs	r2, #51	; 0x33
   29214:	2105      	movs	r1, #5
   29216:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29218:	697b      	ldr	r3, [r7, #20]
   2921a:	2201      	movs	r2, #1
   2921c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2921e:	2300      	movs	r3, #0
}
   29220:	0018      	movs	r0, r3
   29222:	46bd      	mov	sp, r7
   29224:	b006      	add	sp, #24
   29226:	bd80      	pop	{r7, pc}
   29228:	00029169 	.word	0x00029169
   2922c:	0002917d 	.word	0x0002917d

00029230 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29230:	b580      	push	{r7, lr}
   29232:	b086      	sub	sp, #24
   29234:	af00      	add	r7, sp, #0
   29236:	60f8      	str	r0, [r7, #12]
   29238:	60b9      	str	r1, [r7, #8]
   2923a:	1dbb      	adds	r3, r7, #6
   2923c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2923e:	68fb      	ldr	r3, [r7, #12]
   29240:	681b      	ldr	r3, [r3, #0]
   29242:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29244:	4b16      	ldr	r3, [pc, #88]	; (292a0 <_usart_read_buffer+0x70>)
   29246:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29248:	68fb      	ldr	r3, [r7, #12]
   2924a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2924c:	b29b      	uxth	r3, r3
   2924e:	2b00      	cmp	r3, #0
   29250:	d003      	beq.n	2925a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29252:	4b14      	ldr	r3, [pc, #80]	; (292a4 <_usart_read_buffer+0x74>)
   29254:	4798      	blx	r3
		return STATUS_BUSY;
   29256:	2305      	movs	r3, #5
   29258:	e01e      	b.n	29298 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2925a:	68fb      	ldr	r3, [r7, #12]
   2925c:	1dba      	adds	r2, r7, #6
   2925e:	8812      	ldrh	r2, [r2, #0]
   29260:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29262:	4b10      	ldr	r3, [pc, #64]	; (292a4 <_usart_read_buffer+0x74>)
   29264:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29266:	68fb      	ldr	r3, [r7, #12]
   29268:	68ba      	ldr	r2, [r7, #8]
   2926a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2926c:	68fb      	ldr	r3, [r7, #12]
   2926e:	2232      	movs	r2, #50	; 0x32
   29270:	2105      	movs	r1, #5
   29272:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29274:	697b      	ldr	r3, [r7, #20]
   29276:	2204      	movs	r2, #4
   29278:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2927a:	68fb      	ldr	r3, [r7, #12]
   2927c:	7a1b      	ldrb	r3, [r3, #8]
   2927e:	2b00      	cmp	r3, #0
   29280:	d002      	beq.n	29288 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29282:	697b      	ldr	r3, [r7, #20]
   29284:	2220      	movs	r2, #32
   29286:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29288:	68fb      	ldr	r3, [r7, #12]
   2928a:	7a5b      	ldrb	r3, [r3, #9]
   2928c:	2b00      	cmp	r3, #0
   2928e:	d002      	beq.n	29296 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29290:	697b      	ldr	r3, [r7, #20]
   29292:	2208      	movs	r2, #8
   29294:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29296:	2300      	movs	r3, #0
}
   29298:	0018      	movs	r0, r3
   2929a:	46bd      	mov	sp, r7
   2929c:	b006      	add	sp, #24
   2929e:	bd80      	pop	{r7, pc}
   292a0:	00029169 	.word	0x00029169
   292a4:	0002917d 	.word	0x0002917d

000292a8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   292a8:	b580      	push	{r7, lr}
   292aa:	b084      	sub	sp, #16
   292ac:	af00      	add	r7, sp, #0
   292ae:	60f8      	str	r0, [r7, #12]
   292b0:	60b9      	str	r1, [r7, #8]
   292b2:	1dfb      	adds	r3, r7, #7
   292b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   292b6:	1dfb      	adds	r3, r7, #7
   292b8:	781b      	ldrb	r3, [r3, #0]
   292ba:	68fa      	ldr	r2, [r7, #12]
   292bc:	3302      	adds	r3, #2
   292be:	009b      	lsls	r3, r3, #2
   292c0:	18d3      	adds	r3, r2, r3
   292c2:	3304      	adds	r3, #4
   292c4:	68ba      	ldr	r2, [r7, #8]
   292c6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   292c8:	68fb      	ldr	r3, [r7, #12]
   292ca:	2230      	movs	r2, #48	; 0x30
   292cc:	5c9b      	ldrb	r3, [r3, r2]
   292ce:	b25a      	sxtb	r2, r3
   292d0:	1dfb      	adds	r3, r7, #7
   292d2:	781b      	ldrb	r3, [r3, #0]
   292d4:	2101      	movs	r1, #1
   292d6:	4099      	lsls	r1, r3
   292d8:	000b      	movs	r3, r1
   292da:	b25b      	sxtb	r3, r3
   292dc:	4313      	orrs	r3, r2
   292de:	b25b      	sxtb	r3, r3
   292e0:	b2d9      	uxtb	r1, r3
   292e2:	68fb      	ldr	r3, [r7, #12]
   292e4:	2230      	movs	r2, #48	; 0x30
   292e6:	5499      	strb	r1, [r3, r2]
}
   292e8:	46c0      	nop			; (mov r8, r8)
   292ea:	46bd      	mov	sp, r7
   292ec:	b004      	add	sp, #16
   292ee:	bd80      	pop	{r7, pc}

000292f0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   292f0:	b580      	push	{r7, lr}
   292f2:	b084      	sub	sp, #16
   292f4:	af00      	add	r7, sp, #0
   292f6:	60f8      	str	r0, [r7, #12]
   292f8:	60b9      	str	r1, [r7, #8]
   292fa:	1dbb      	adds	r3, r7, #6
   292fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   292fe:	1dbb      	adds	r3, r7, #6
   29300:	881b      	ldrh	r3, [r3, #0]
   29302:	2b00      	cmp	r3, #0
   29304:	d101      	bne.n	2930a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29306:	2317      	movs	r3, #23
   29308:	e010      	b.n	2932c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2930a:	68fb      	ldr	r3, [r7, #12]
   2930c:	79db      	ldrb	r3, [r3, #7]
   2930e:	2201      	movs	r2, #1
   29310:	4053      	eors	r3, r2
   29312:	b2db      	uxtb	r3, r3
   29314:	2b00      	cmp	r3, #0
   29316:	d001      	beq.n	2931c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29318:	231c      	movs	r3, #28
   2931a:	e007      	b.n	2932c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2931c:	1dbb      	adds	r3, r7, #6
   2931e:	881a      	ldrh	r2, [r3, #0]
   29320:	68b9      	ldr	r1, [r7, #8]
   29322:	68fb      	ldr	r3, [r7, #12]
   29324:	0018      	movs	r0, r3
   29326:	4b03      	ldr	r3, [pc, #12]	; (29334 <usart_write_buffer_job+0x44>)
   29328:	4798      	blx	r3
   2932a:	0003      	movs	r3, r0
}
   2932c:	0018      	movs	r0, r3
   2932e:	46bd      	mov	sp, r7
   29330:	b004      	add	sp, #16
   29332:	bd80      	pop	{r7, pc}
   29334:	000291d5 	.word	0x000291d5

00029338 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29338:	b580      	push	{r7, lr}
   2933a:	b084      	sub	sp, #16
   2933c:	af00      	add	r7, sp, #0
   2933e:	60f8      	str	r0, [r7, #12]
   29340:	60b9      	str	r1, [r7, #8]
   29342:	1dbb      	adds	r3, r7, #6
   29344:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29346:	1dbb      	adds	r3, r7, #6
   29348:	881b      	ldrh	r3, [r3, #0]
   2934a:	2b00      	cmp	r3, #0
   2934c:	d101      	bne.n	29352 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2934e:	2317      	movs	r3, #23
   29350:	e010      	b.n	29374 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29352:	68fb      	ldr	r3, [r7, #12]
   29354:	799b      	ldrb	r3, [r3, #6]
   29356:	2201      	movs	r2, #1
   29358:	4053      	eors	r3, r2
   2935a:	b2db      	uxtb	r3, r3
   2935c:	2b00      	cmp	r3, #0
   2935e:	d001      	beq.n	29364 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29360:	231c      	movs	r3, #28
   29362:	e007      	b.n	29374 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29364:	1dbb      	adds	r3, r7, #6
   29366:	881a      	ldrh	r2, [r3, #0]
   29368:	68b9      	ldr	r1, [r7, #8]
   2936a:	68fb      	ldr	r3, [r7, #12]
   2936c:	0018      	movs	r0, r3
   2936e:	4b03      	ldr	r3, [pc, #12]	; (2937c <usart_read_buffer_job+0x44>)
   29370:	4798      	blx	r3
   29372:	0003      	movs	r3, r0
}
   29374:	0018      	movs	r0, r3
   29376:	46bd      	mov	sp, r7
   29378:	b004      	add	sp, #16
   2937a:	bd80      	pop	{r7, pc}
   2937c:	00029231 	.word	0x00029231

00029380 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29380:	b580      	push	{r7, lr}
   29382:	b084      	sub	sp, #16
   29384:	af00      	add	r7, sp, #0
   29386:	6078      	str	r0, [r7, #4]
   29388:	000a      	movs	r2, r1
   2938a:	1cfb      	adds	r3, r7, #3
   2938c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2938e:	1cfb      	adds	r3, r7, #3
   29390:	781b      	ldrb	r3, [r3, #0]
   29392:	2b00      	cmp	r3, #0
   29394:	d002      	beq.n	2939c <usart_get_job_status+0x1c>
   29396:	2b01      	cmp	r3, #1
   29398:	d007      	beq.n	293aa <usart_get_job_status+0x2a>
   2939a:	e00d      	b.n	293b8 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2939c:	230f      	movs	r3, #15
   2939e:	18fb      	adds	r3, r7, r3
   293a0:	687a      	ldr	r2, [r7, #4]
   293a2:	2132      	movs	r1, #50	; 0x32
   293a4:	5c52      	ldrb	r2, [r2, r1]
   293a6:	701a      	strb	r2, [r3, #0]
			break;
   293a8:	e00b      	b.n	293c2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   293aa:	230f      	movs	r3, #15
   293ac:	18fb      	adds	r3, r7, r3
   293ae:	687a      	ldr	r2, [r7, #4]
   293b0:	2133      	movs	r1, #51	; 0x33
   293b2:	5c52      	ldrb	r2, [r2, r1]
   293b4:	701a      	strb	r2, [r3, #0]
			break;
   293b6:	e004      	b.n	293c2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   293b8:	230f      	movs	r3, #15
   293ba:	18fb      	adds	r3, r7, r3
   293bc:	2217      	movs	r2, #23
   293be:	701a      	strb	r2, [r3, #0]
			break;
   293c0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   293c2:	230f      	movs	r3, #15
   293c4:	18fb      	adds	r3, r7, r3
   293c6:	781b      	ldrb	r3, [r3, #0]
}
   293c8:	0018      	movs	r0, r3
   293ca:	46bd      	mov	sp, r7
   293cc:	b004      	add	sp, #16
   293ce:	bd80      	pop	{r7, pc}

000293d0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   293d0:	b580      	push	{r7, lr}
   293d2:	b088      	sub	sp, #32
   293d4:	af00      	add	r7, sp, #0
   293d6:	0002      	movs	r2, r0
   293d8:	1dfb      	adds	r3, r7, #7
   293da:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   293dc:	1dfb      	adds	r3, r7, #7
   293de:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   293e0:	4ba3      	ldr	r3, [pc, #652]	; (29670 <_usart_interrupt_handler+0x2a0>)
   293e2:	0092      	lsls	r2, r2, #2
   293e4:	58d3      	ldr	r3, [r2, r3]
   293e6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   293e8:	69bb      	ldr	r3, [r7, #24]
   293ea:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   293ec:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   293ee:	69bb      	ldr	r3, [r7, #24]
   293f0:	0018      	movs	r0, r3
   293f2:	4ba0      	ldr	r3, [pc, #640]	; (29674 <_usart_interrupt_handler+0x2a4>)
   293f4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   293f6:	697b      	ldr	r3, [r7, #20]
   293f8:	7e1b      	ldrb	r3, [r3, #24]
   293fa:	b2da      	uxtb	r2, r3
   293fc:	2312      	movs	r3, #18
   293fe:	18fb      	adds	r3, r7, r3
   29400:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29402:	697b      	ldr	r3, [r7, #20]
   29404:	7d9b      	ldrb	r3, [r3, #22]
   29406:	b2db      	uxtb	r3, r3
   29408:	b29a      	uxth	r2, r3
   2940a:	2312      	movs	r3, #18
   2940c:	18fb      	adds	r3, r7, r3
   2940e:	2112      	movs	r1, #18
   29410:	1879      	adds	r1, r7, r1
   29412:	8809      	ldrh	r1, [r1, #0]
   29414:	400a      	ands	r2, r1
   29416:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29418:	69bb      	ldr	r3, [r7, #24]
   2941a:	2230      	movs	r2, #48	; 0x30
   2941c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2941e:	69ba      	ldr	r2, [r7, #24]
   29420:	2131      	movs	r1, #49	; 0x31
   29422:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29424:	4013      	ands	r3, r2
   29426:	b2da      	uxtb	r2, r3
   29428:	2310      	movs	r3, #16
   2942a:	18fb      	adds	r3, r7, r3
   2942c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2942e:	2312      	movs	r3, #18
   29430:	18fb      	adds	r3, r7, r3
   29432:	881b      	ldrh	r3, [r3, #0]
   29434:	2201      	movs	r2, #1
   29436:	4013      	ands	r3, r2
   29438:	d044      	beq.n	294c4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2943a:	69bb      	ldr	r3, [r7, #24]
   2943c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2943e:	b29b      	uxth	r3, r3
   29440:	2b00      	cmp	r3, #0
   29442:	d03c      	beq.n	294be <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29444:	69bb      	ldr	r3, [r7, #24]
   29446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29448:	781b      	ldrb	r3, [r3, #0]
   2944a:	b2da      	uxtb	r2, r3
   2944c:	231c      	movs	r3, #28
   2944e:	18fb      	adds	r3, r7, r3
   29450:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29452:	69bb      	ldr	r3, [r7, #24]
   29454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29456:	1c5a      	adds	r2, r3, #1
   29458:	69bb      	ldr	r3, [r7, #24]
   2945a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2945c:	69bb      	ldr	r3, [r7, #24]
   2945e:	795b      	ldrb	r3, [r3, #5]
   29460:	2b01      	cmp	r3, #1
   29462:	d113      	bne.n	2948c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29464:	69bb      	ldr	r3, [r7, #24]
   29466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29468:	781b      	ldrb	r3, [r3, #0]
   2946a:	b2db      	uxtb	r3, r3
   2946c:	021b      	lsls	r3, r3, #8
   2946e:	b21a      	sxth	r2, r3
   29470:	231c      	movs	r3, #28
   29472:	18fb      	adds	r3, r7, r3
   29474:	2100      	movs	r1, #0
   29476:	5e5b      	ldrsh	r3, [r3, r1]
   29478:	4313      	orrs	r3, r2
   2947a:	b21a      	sxth	r2, r3
   2947c:	231c      	movs	r3, #28
   2947e:	18fb      	adds	r3, r7, r3
   29480:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29482:	69bb      	ldr	r3, [r7, #24]
   29484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29486:	1c5a      	adds	r2, r3, #1
   29488:	69bb      	ldr	r3, [r7, #24]
   2948a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2948c:	231c      	movs	r3, #28
   2948e:	18fb      	adds	r3, r7, r3
   29490:	881b      	ldrh	r3, [r3, #0]
   29492:	05db      	lsls	r3, r3, #23
   29494:	0ddb      	lsrs	r3, r3, #23
   29496:	b29a      	uxth	r2, r3
   29498:	697b      	ldr	r3, [r7, #20]
   2949a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2949c:	69bb      	ldr	r3, [r7, #24]
   2949e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   294a0:	b29b      	uxth	r3, r3
   294a2:	3b01      	subs	r3, #1
   294a4:	b29b      	uxth	r3, r3
   294a6:	69ba      	ldr	r2, [r7, #24]
   294a8:	1c19      	adds	r1, r3, #0
   294aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
   294ac:	2b00      	cmp	r3, #0
   294ae:	d109      	bne.n	294c4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   294b0:	697b      	ldr	r3, [r7, #20]
   294b2:	2201      	movs	r2, #1
   294b4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   294b6:	697b      	ldr	r3, [r7, #20]
   294b8:	2202      	movs	r2, #2
   294ba:	759a      	strb	r2, [r3, #22]
   294bc:	e002      	b.n	294c4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   294be:	697b      	ldr	r3, [r7, #20]
   294c0:	2201      	movs	r2, #1
   294c2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   294c4:	2312      	movs	r3, #18
   294c6:	18fb      	adds	r3, r7, r3
   294c8:	881b      	ldrh	r3, [r3, #0]
   294ca:	2202      	movs	r2, #2
   294cc:	4013      	ands	r3, r2
   294ce:	d011      	beq.n	294f4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   294d0:	697b      	ldr	r3, [r7, #20]
   294d2:	2202      	movs	r2, #2
   294d4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   294d6:	69bb      	ldr	r3, [r7, #24]
   294d8:	2233      	movs	r2, #51	; 0x33
   294da:	2100      	movs	r1, #0
   294dc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   294de:	2310      	movs	r3, #16
   294e0:	18fb      	adds	r3, r7, r3
   294e2:	881b      	ldrh	r3, [r3, #0]
   294e4:	2201      	movs	r2, #1
   294e6:	4013      	ands	r3, r2
   294e8:	d004      	beq.n	294f4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   294ea:	69bb      	ldr	r3, [r7, #24]
   294ec:	68db      	ldr	r3, [r3, #12]
   294ee:	69ba      	ldr	r2, [r7, #24]
   294f0:	0010      	movs	r0, r2
   294f2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   294f4:	2312      	movs	r3, #18
   294f6:	18fb      	adds	r3, r7, r3
   294f8:	881b      	ldrh	r3, [r3, #0]
   294fa:	2204      	movs	r2, #4
   294fc:	4013      	ands	r3, r2
   294fe:	d100      	bne.n	29502 <_usart_interrupt_handler+0x132>
   29500:	e0bd      	b.n	2967e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29502:	69bb      	ldr	r3, [r7, #24]
   29504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29506:	b29b      	uxth	r3, r3
   29508:	2b00      	cmp	r3, #0
   2950a:	d100      	bne.n	2950e <_usart_interrupt_handler+0x13e>
   2950c:	e0b4      	b.n	29678 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2950e:	697b      	ldr	r3, [r7, #20]
   29510:	8b5b      	ldrh	r3, [r3, #26]
   29512:	b29b      	uxth	r3, r3
   29514:	b2da      	uxtb	r2, r3
   29516:	231f      	movs	r3, #31
   29518:	18fb      	adds	r3, r7, r3
   2951a:	213f      	movs	r1, #63	; 0x3f
   2951c:	400a      	ands	r2, r1
   2951e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29520:	231f      	movs	r3, #31
   29522:	18fb      	adds	r3, r7, r3
   29524:	781b      	ldrb	r3, [r3, #0]
   29526:	2208      	movs	r2, #8
   29528:	4013      	ands	r3, r2
   2952a:	d007      	beq.n	2953c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2952c:	231f      	movs	r3, #31
   2952e:	18fb      	adds	r3, r7, r3
   29530:	221f      	movs	r2, #31
   29532:	18ba      	adds	r2, r7, r2
   29534:	7812      	ldrb	r2, [r2, #0]
   29536:	2108      	movs	r1, #8
   29538:	438a      	bics	r2, r1
   2953a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2953c:	231f      	movs	r3, #31
   2953e:	18fb      	adds	r3, r7, r3
   29540:	781b      	ldrb	r3, [r3, #0]
   29542:	2b00      	cmp	r3, #0
   29544:	d050      	beq.n	295e8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29546:	231f      	movs	r3, #31
   29548:	18fb      	adds	r3, r7, r3
   2954a:	781b      	ldrb	r3, [r3, #0]
   2954c:	2202      	movs	r2, #2
   2954e:	4013      	ands	r3, r2
   29550:	d007      	beq.n	29562 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29552:	69bb      	ldr	r3, [r7, #24]
   29554:	2232      	movs	r2, #50	; 0x32
   29556:	211a      	movs	r1, #26
   29558:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2955a:	697b      	ldr	r3, [r7, #20]
   2955c:	2202      	movs	r2, #2
   2955e:	835a      	strh	r2, [r3, #26]
   29560:	e036      	b.n	295d0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29562:	231f      	movs	r3, #31
   29564:	18fb      	adds	r3, r7, r3
   29566:	781b      	ldrb	r3, [r3, #0]
   29568:	2204      	movs	r2, #4
   2956a:	4013      	ands	r3, r2
   2956c:	d007      	beq.n	2957e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2956e:	69bb      	ldr	r3, [r7, #24]
   29570:	2232      	movs	r2, #50	; 0x32
   29572:	211e      	movs	r1, #30
   29574:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29576:	697b      	ldr	r3, [r7, #20]
   29578:	2204      	movs	r2, #4
   2957a:	835a      	strh	r2, [r3, #26]
   2957c:	e028      	b.n	295d0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2957e:	231f      	movs	r3, #31
   29580:	18fb      	adds	r3, r7, r3
   29582:	781b      	ldrb	r3, [r3, #0]
   29584:	2201      	movs	r2, #1
   29586:	4013      	ands	r3, r2
   29588:	d007      	beq.n	2959a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2958a:	69bb      	ldr	r3, [r7, #24]
   2958c:	2232      	movs	r2, #50	; 0x32
   2958e:	2113      	movs	r1, #19
   29590:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29592:	697b      	ldr	r3, [r7, #20]
   29594:	2201      	movs	r2, #1
   29596:	835a      	strh	r2, [r3, #26]
   29598:	e01a      	b.n	295d0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2959a:	231f      	movs	r3, #31
   2959c:	18fb      	adds	r3, r7, r3
   2959e:	781b      	ldrb	r3, [r3, #0]
   295a0:	2210      	movs	r2, #16
   295a2:	4013      	ands	r3, r2
   295a4:	d007      	beq.n	295b6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   295a6:	69bb      	ldr	r3, [r7, #24]
   295a8:	2232      	movs	r2, #50	; 0x32
   295aa:	2142      	movs	r1, #66	; 0x42
   295ac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   295ae:	697b      	ldr	r3, [r7, #20]
   295b0:	2210      	movs	r2, #16
   295b2:	835a      	strh	r2, [r3, #26]
   295b4:	e00c      	b.n	295d0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   295b6:	231f      	movs	r3, #31
   295b8:	18fb      	adds	r3, r7, r3
   295ba:	781b      	ldrb	r3, [r3, #0]
   295bc:	2220      	movs	r2, #32
   295be:	4013      	ands	r3, r2
   295c0:	d006      	beq.n	295d0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   295c2:	69bb      	ldr	r3, [r7, #24]
   295c4:	2232      	movs	r2, #50	; 0x32
   295c6:	2141      	movs	r1, #65	; 0x41
   295c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   295ca:	697b      	ldr	r3, [r7, #20]
   295cc:	2220      	movs	r2, #32
   295ce:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   295d0:	2310      	movs	r3, #16
   295d2:	18fb      	adds	r3, r7, r3
   295d4:	881b      	ldrh	r3, [r3, #0]
   295d6:	2204      	movs	r2, #4
   295d8:	4013      	ands	r3, r2
				if (callback_status
   295da:	d050      	beq.n	2967e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   295dc:	69bb      	ldr	r3, [r7, #24]
   295de:	695b      	ldr	r3, [r3, #20]
   295e0:	69ba      	ldr	r2, [r7, #24]
   295e2:	0010      	movs	r0, r2
   295e4:	4798      	blx	r3
   295e6:	e04a      	b.n	2967e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   295e8:	697b      	ldr	r3, [r7, #20]
   295ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   295ec:	b29a      	uxth	r2, r3
   295ee:	230e      	movs	r3, #14
   295f0:	18fb      	adds	r3, r7, r3
   295f2:	05d2      	lsls	r2, r2, #23
   295f4:	0dd2      	lsrs	r2, r2, #23
   295f6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   295f8:	69bb      	ldr	r3, [r7, #24]
   295fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   295fc:	220e      	movs	r2, #14
   295fe:	18ba      	adds	r2, r7, r2
   29600:	8812      	ldrh	r2, [r2, #0]
   29602:	b2d2      	uxtb	r2, r2
   29604:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29606:	69bb      	ldr	r3, [r7, #24]
   29608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2960a:	1c5a      	adds	r2, r3, #1
   2960c:	69bb      	ldr	r3, [r7, #24]
   2960e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29610:	69bb      	ldr	r3, [r7, #24]
   29612:	795b      	ldrb	r3, [r3, #5]
   29614:	2b01      	cmp	r3, #1
   29616:	d10d      	bne.n	29634 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29618:	69bb      	ldr	r3, [r7, #24]
   2961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2961c:	220e      	movs	r2, #14
   2961e:	18ba      	adds	r2, r7, r2
   29620:	8812      	ldrh	r2, [r2, #0]
   29622:	0a12      	lsrs	r2, r2, #8
   29624:	b292      	uxth	r2, r2
   29626:	b2d2      	uxtb	r2, r2
   29628:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2962a:	69bb      	ldr	r3, [r7, #24]
   2962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2962e:	1c5a      	adds	r2, r3, #1
   29630:	69bb      	ldr	r3, [r7, #24]
   29632:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29634:	69bb      	ldr	r3, [r7, #24]
   29636:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29638:	b29b      	uxth	r3, r3
   2963a:	3b01      	subs	r3, #1
   2963c:	b29b      	uxth	r3, r3
   2963e:	69ba      	ldr	r2, [r7, #24]
   29640:	1c19      	adds	r1, r3, #0
   29642:	8591      	strh	r1, [r2, #44]	; 0x2c
   29644:	2b00      	cmp	r3, #0
   29646:	d11a      	bne.n	2967e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29648:	697b      	ldr	r3, [r7, #20]
   2964a:	2204      	movs	r2, #4
   2964c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2964e:	69bb      	ldr	r3, [r7, #24]
   29650:	2232      	movs	r2, #50	; 0x32
   29652:	2100      	movs	r1, #0
   29654:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29656:	2310      	movs	r3, #16
   29658:	18fb      	adds	r3, r7, r3
   2965a:	881b      	ldrh	r3, [r3, #0]
   2965c:	2202      	movs	r2, #2
   2965e:	4013      	ands	r3, r2
					if (callback_status
   29660:	d00d      	beq.n	2967e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29662:	69bb      	ldr	r3, [r7, #24]
   29664:	691b      	ldr	r3, [r3, #16]
   29666:	69ba      	ldr	r2, [r7, #24]
   29668:	0010      	movs	r0, r2
   2966a:	4798      	blx	r3
   2966c:	e007      	b.n	2967e <_usart_interrupt_handler+0x2ae>
   2966e:	46c0      	nop			; (mov r8, r8)
   29670:	20005c44 	.word	0x20005c44
   29674:	000291b1 	.word	0x000291b1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29678:	697b      	ldr	r3, [r7, #20]
   2967a:	2204      	movs	r2, #4
   2967c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2967e:	2312      	movs	r3, #18
   29680:	18fb      	adds	r3, r7, r3
   29682:	881b      	ldrh	r3, [r3, #0]
   29684:	2210      	movs	r2, #16
   29686:	4013      	ands	r3, r2
   29688:	d010      	beq.n	296ac <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2968a:	697b      	ldr	r3, [r7, #20]
   2968c:	2210      	movs	r2, #16
   2968e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29690:	697b      	ldr	r3, [r7, #20]
   29692:	2210      	movs	r2, #16
   29694:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29696:	2310      	movs	r3, #16
   29698:	18fb      	adds	r3, r7, r3
   2969a:	881b      	ldrh	r3, [r3, #0]
   2969c:	2210      	movs	r2, #16
   2969e:	4013      	ands	r3, r2
   296a0:	d004      	beq.n	296ac <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   296a2:	69bb      	ldr	r3, [r7, #24]
   296a4:	69db      	ldr	r3, [r3, #28]
   296a6:	69ba      	ldr	r2, [r7, #24]
   296a8:	0010      	movs	r0, r2
   296aa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   296ac:	2312      	movs	r3, #18
   296ae:	18fb      	adds	r3, r7, r3
   296b0:	881b      	ldrh	r3, [r3, #0]
   296b2:	2220      	movs	r2, #32
   296b4:	4013      	ands	r3, r2
   296b6:	d010      	beq.n	296da <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   296b8:	697b      	ldr	r3, [r7, #20]
   296ba:	2220      	movs	r2, #32
   296bc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   296be:	697b      	ldr	r3, [r7, #20]
   296c0:	2220      	movs	r2, #32
   296c2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   296c4:	2310      	movs	r3, #16
   296c6:	18fb      	adds	r3, r7, r3
   296c8:	881b      	ldrh	r3, [r3, #0]
   296ca:	2208      	movs	r2, #8
   296cc:	4013      	ands	r3, r2
   296ce:	d004      	beq.n	296da <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   296d0:	69bb      	ldr	r3, [r7, #24]
   296d2:	699b      	ldr	r3, [r3, #24]
   296d4:	69ba      	ldr	r2, [r7, #24]
   296d6:	0010      	movs	r0, r2
   296d8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   296da:	2312      	movs	r3, #18
   296dc:	18fb      	adds	r3, r7, r3
   296de:	881b      	ldrh	r3, [r3, #0]
   296e0:	2208      	movs	r2, #8
   296e2:	4013      	ands	r3, r2
   296e4:	d010      	beq.n	29708 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   296e6:	697b      	ldr	r3, [r7, #20]
   296e8:	2208      	movs	r2, #8
   296ea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   296ec:	697b      	ldr	r3, [r7, #20]
   296ee:	2208      	movs	r2, #8
   296f0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   296f2:	2310      	movs	r3, #16
   296f4:	18fb      	adds	r3, r7, r3
   296f6:	881b      	ldrh	r3, [r3, #0]
   296f8:	2220      	movs	r2, #32
   296fa:	4013      	ands	r3, r2
   296fc:	d004      	beq.n	29708 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   296fe:	69bb      	ldr	r3, [r7, #24]
   29700:	6a1b      	ldr	r3, [r3, #32]
   29702:	69ba      	ldr	r2, [r7, #24]
   29704:	0010      	movs	r0, r2
   29706:	4798      	blx	r3
		}
	}
#endif
}
   29708:	46c0      	nop			; (mov r8, r8)
   2970a:	46bd      	mov	sp, r7
   2970c:	b008      	add	sp, #32
   2970e:	bd80      	pop	{r7, pc}

00029710 <system_gclk_gen_get_config_defaults>:
{
   29710:	b580      	push	{r7, lr}
   29712:	b082      	sub	sp, #8
   29714:	af00      	add	r7, sp, #0
   29716:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29718:	687b      	ldr	r3, [r7, #4]
   2971a:	2201      	movs	r2, #1
   2971c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2971e:	687b      	ldr	r3, [r7, #4]
   29720:	2200      	movs	r2, #0
   29722:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29724:	687b      	ldr	r3, [r7, #4]
   29726:	2206      	movs	r2, #6
   29728:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2972a:	687b      	ldr	r3, [r7, #4]
   2972c:	2200      	movs	r2, #0
   2972e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29730:	687b      	ldr	r3, [r7, #4]
   29732:	2200      	movs	r2, #0
   29734:	725a      	strb	r2, [r3, #9]
}
   29736:	46c0      	nop			; (mov r8, r8)
   29738:	46bd      	mov	sp, r7
   2973a:	b002      	add	sp, #8
   2973c:	bd80      	pop	{r7, pc}

0002973e <system_gclk_chan_get_config_defaults>:
{
   2973e:	b580      	push	{r7, lr}
   29740:	b082      	sub	sp, #8
   29742:	af00      	add	r7, sp, #0
   29744:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29746:	687b      	ldr	r3, [r7, #4]
   29748:	2200      	movs	r2, #0
   2974a:	701a      	strb	r2, [r3, #0]
}
   2974c:	46c0      	nop			; (mov r8, r8)
   2974e:	46bd      	mov	sp, r7
   29750:	b002      	add	sp, #8
   29752:	bd80      	pop	{r7, pc}

00029754 <system_clock_source_osc8m_get_config_defaults>:
{
   29754:	b580      	push	{r7, lr}
   29756:	b082      	sub	sp, #8
   29758:	af00      	add	r7, sp, #0
   2975a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2975c:	687b      	ldr	r3, [r7, #4]
   2975e:	2203      	movs	r2, #3
   29760:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29762:	687b      	ldr	r3, [r7, #4]
   29764:	2200      	movs	r2, #0
   29766:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29768:	687b      	ldr	r3, [r7, #4]
   2976a:	2201      	movs	r2, #1
   2976c:	709a      	strb	r2, [r3, #2]
}
   2976e:	46c0      	nop			; (mov r8, r8)
   29770:	46bd      	mov	sp, r7
   29772:	b002      	add	sp, #8
   29774:	bd80      	pop	{r7, pc}
	...

00029778 <system_cpu_clock_set_divider>:
{
   29778:	b580      	push	{r7, lr}
   2977a:	b082      	sub	sp, #8
   2977c:	af00      	add	r7, sp, #0
   2977e:	0002      	movs	r2, r0
   29780:	1dfb      	adds	r3, r7, #7
   29782:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29784:	4a03      	ldr	r2, [pc, #12]	; (29794 <system_cpu_clock_set_divider+0x1c>)
   29786:	1dfb      	adds	r3, r7, #7
   29788:	781b      	ldrb	r3, [r3, #0]
   2978a:	7213      	strb	r3, [r2, #8]
}
   2978c:	46c0      	nop			; (mov r8, r8)
   2978e:	46bd      	mov	sp, r7
   29790:	b002      	add	sp, #8
   29792:	bd80      	pop	{r7, pc}
   29794:	40000400 	.word	0x40000400

00029798 <system_apb_clock_set_divider>:
{
   29798:	b580      	push	{r7, lr}
   2979a:	b082      	sub	sp, #8
   2979c:	af00      	add	r7, sp, #0
   2979e:	0002      	movs	r2, r0
   297a0:	1dfb      	adds	r3, r7, #7
   297a2:	701a      	strb	r2, [r3, #0]
   297a4:	1dbb      	adds	r3, r7, #6
   297a6:	1c0a      	adds	r2, r1, #0
   297a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   297aa:	1dfb      	adds	r3, r7, #7
   297ac:	781b      	ldrb	r3, [r3, #0]
   297ae:	2b01      	cmp	r3, #1
   297b0:	d008      	beq.n	297c4 <system_apb_clock_set_divider+0x2c>
   297b2:	2b02      	cmp	r3, #2
   297b4:	d00b      	beq.n	297ce <system_apb_clock_set_divider+0x36>
   297b6:	2b00      	cmp	r3, #0
   297b8:	d10e      	bne.n	297d8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   297ba:	4a0b      	ldr	r2, [pc, #44]	; (297e8 <system_apb_clock_set_divider+0x50>)
   297bc:	1dbb      	adds	r3, r7, #6
   297be:	781b      	ldrb	r3, [r3, #0]
   297c0:	7253      	strb	r3, [r2, #9]
			break;
   297c2:	e00b      	b.n	297dc <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   297c4:	4a08      	ldr	r2, [pc, #32]	; (297e8 <system_apb_clock_set_divider+0x50>)
   297c6:	1dbb      	adds	r3, r7, #6
   297c8:	781b      	ldrb	r3, [r3, #0]
   297ca:	7293      	strb	r3, [r2, #10]
			break;
   297cc:	e006      	b.n	297dc <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   297ce:	4a06      	ldr	r2, [pc, #24]	; (297e8 <system_apb_clock_set_divider+0x50>)
   297d0:	1dbb      	adds	r3, r7, #6
   297d2:	781b      	ldrb	r3, [r3, #0]
   297d4:	72d3      	strb	r3, [r2, #11]
			break;
   297d6:	e001      	b.n	297dc <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   297d8:	2317      	movs	r3, #23
   297da:	e000      	b.n	297de <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   297dc:	2300      	movs	r3, #0
}
   297de:	0018      	movs	r0, r3
   297e0:	46bd      	mov	sp, r7
   297e2:	b002      	add	sp, #8
   297e4:	bd80      	pop	{r7, pc}
   297e6:	46c0      	nop			; (mov r8, r8)
   297e8:	40000400 	.word	0x40000400

000297ec <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   297ec:	b580      	push	{r7, lr}
   297ee:	b082      	sub	sp, #8
   297f0:	af00      	add	r7, sp, #0
   297f2:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   297f4:	687b      	ldr	r3, [r7, #4]
   297f6:	2201      	movs	r2, #1
   297f8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   297fa:	687b      	ldr	r3, [r7, #4]
   297fc:	2200      	movs	r2, #0
   297fe:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29800:	687b      	ldr	r3, [r7, #4]
   29802:	2200      	movs	r2, #0
   29804:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29806:	687b      	ldr	r3, [r7, #4]
   29808:	2200      	movs	r2, #0
   2980a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2980c:	687b      	ldr	r3, [r7, #4]
   2980e:	2200      	movs	r2, #0
   29810:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   29812:	687b      	ldr	r3, [r7, #4]
   29814:	4a0a      	ldr	r2, [pc, #40]	; (29840 <system_clock_source_dpll_get_config_defaults+0x54>)
   29816:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29818:	687b      	ldr	r3, [r7, #4]
   2981a:	2280      	movs	r2, #128	; 0x80
   2981c:	0212      	lsls	r2, r2, #8
   2981e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29820:	687b      	ldr	r3, [r7, #4]
   29822:	2201      	movs	r2, #1
   29824:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   29826:	687b      	ldr	r3, [r7, #4]
   29828:	2200      	movs	r2, #0
   2982a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2982c:	687b      	ldr	r3, [r7, #4]
   2982e:	2200      	movs	r2, #0
   29830:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   29832:	687b      	ldr	r3, [r7, #4]
   29834:	2200      	movs	r2, #0
   29836:	749a      	strb	r2, [r3, #18]
};
   29838:	46c0      	nop			; (mov r8, r8)
   2983a:	46bd      	mov	sp, r7
   2983c:	b002      	add	sp, #8
   2983e:	bd80      	pop	{r7, pc}
   29840:	02dc6c00 	.word	0x02dc6c00

00029844 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   29844:	b580      	push	{r7, lr}
   29846:	b082      	sub	sp, #8
   29848:	af00      	add	r7, sp, #0
   2984a:	0002      	movs	r2, r0
   2984c:	1dfb      	adds	r3, r7, #7
   2984e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   29850:	4a08      	ldr	r2, [pc, #32]	; (29874 <system_flash_set_waitstates+0x30>)
   29852:	1dfb      	adds	r3, r7, #7
   29854:	781b      	ldrb	r3, [r3, #0]
   29856:	210f      	movs	r1, #15
   29858:	400b      	ands	r3, r1
   2985a:	b2d9      	uxtb	r1, r3
   2985c:	6853      	ldr	r3, [r2, #4]
   2985e:	200f      	movs	r0, #15
   29860:	4001      	ands	r1, r0
   29862:	0049      	lsls	r1, r1, #1
   29864:	201e      	movs	r0, #30
   29866:	4383      	bics	r3, r0
   29868:	430b      	orrs	r3, r1
   2986a:	6053      	str	r3, [r2, #4]
}
   2986c:	46c0      	nop			; (mov r8, r8)
   2986e:	46bd      	mov	sp, r7
   29870:	b002      	add	sp, #8
   29872:	bd80      	pop	{r7, pc}
   29874:	41004000 	.word	0x41004000

00029878 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29878:	b580      	push	{r7, lr}
   2987a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2987c:	46c0      	nop			; (mov r8, r8)
   2987e:	4b04      	ldr	r3, [pc, #16]	; (29890 <_system_dfll_wait_for_sync+0x18>)
   29880:	68db      	ldr	r3, [r3, #12]
   29882:	2210      	movs	r2, #16
   29884:	4013      	ands	r3, r2
   29886:	d0fa      	beq.n	2987e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29888:	46c0      	nop			; (mov r8, r8)
   2988a:	46bd      	mov	sp, r7
   2988c:	bd80      	pop	{r7, pc}
   2988e:	46c0      	nop			; (mov r8, r8)
   29890:	40000800 	.word	0x40000800

00029894 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29894:	b580      	push	{r7, lr}
   29896:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29898:	4b0c      	ldr	r3, [pc, #48]	; (298cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2989a:	2202      	movs	r2, #2
   2989c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2989e:	4b0c      	ldr	r3, [pc, #48]	; (298d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   298a0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   298a2:	4a0a      	ldr	r2, [pc, #40]	; (298cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   298a4:	4b0b      	ldr	r3, [pc, #44]	; (298d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   298a6:	689b      	ldr	r3, [r3, #8]
   298a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   298aa:	4a08      	ldr	r2, [pc, #32]	; (298cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   298ac:	4b09      	ldr	r3, [pc, #36]	; (298d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   298ae:	685b      	ldr	r3, [r3, #4]
   298b0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   298b2:	4b06      	ldr	r3, [pc, #24]	; (298cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   298b4:	2200      	movs	r2, #0
   298b6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   298b8:	4b05      	ldr	r3, [pc, #20]	; (298d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   298ba:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   298bc:	4a03      	ldr	r2, [pc, #12]	; (298cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   298be:	4b05      	ldr	r3, [pc, #20]	; (298d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   298c0:	681b      	ldr	r3, [r3, #0]
   298c2:	b29b      	uxth	r3, r3
   298c4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   298c6:	46c0      	nop			; (mov r8, r8)
   298c8:	46bd      	mov	sp, r7
   298ca:	bd80      	pop	{r7, pc}
   298cc:	40000800 	.word	0x40000800
   298d0:	00029879 	.word	0x00029879
   298d4:	200042d8 	.word	0x200042d8

000298d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   298d8:	b580      	push	{r7, lr}
   298da:	b082      	sub	sp, #8
   298dc:	af00      	add	r7, sp, #0
   298de:	0002      	movs	r2, r0
   298e0:	1dfb      	adds	r3, r7, #7
   298e2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   298e4:	1dfb      	adds	r3, r7, #7
   298e6:	781b      	ldrb	r3, [r3, #0]
   298e8:	2b08      	cmp	r3, #8
   298ea:	d841      	bhi.n	29970 <system_clock_source_get_hz+0x98>
   298ec:	009a      	lsls	r2, r3, #2
   298ee:	4b23      	ldr	r3, [pc, #140]	; (2997c <system_clock_source_get_hz+0xa4>)
   298f0:	18d3      	adds	r3, r2, r3
   298f2:	681b      	ldr	r3, [r3, #0]
   298f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   298f6:	4b22      	ldr	r3, [pc, #136]	; (29980 <system_clock_source_get_hz+0xa8>)
   298f8:	691b      	ldr	r3, [r3, #16]
   298fa:	e03a      	b.n	29972 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   298fc:	4b21      	ldr	r3, [pc, #132]	; (29984 <system_clock_source_get_hz+0xac>)
   298fe:	6a1b      	ldr	r3, [r3, #32]
   29900:	059b      	lsls	r3, r3, #22
   29902:	0f9b      	lsrs	r3, r3, #30
   29904:	b2db      	uxtb	r3, r3
   29906:	001a      	movs	r2, r3
   29908:	4b1f      	ldr	r3, [pc, #124]	; (29988 <system_clock_source_get_hz+0xb0>)
   2990a:	40d3      	lsrs	r3, r2
   2990c:	e031      	b.n	29972 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2990e:	2380      	movs	r3, #128	; 0x80
   29910:	021b      	lsls	r3, r3, #8
   29912:	e02e      	b.n	29972 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   29914:	2380      	movs	r3, #128	; 0x80
   29916:	021b      	lsls	r3, r3, #8
   29918:	e02b      	b.n	29972 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2991a:	4b19      	ldr	r3, [pc, #100]	; (29980 <system_clock_source_get_hz+0xa8>)
   2991c:	695b      	ldr	r3, [r3, #20]
   2991e:	e028      	b.n	29972 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   29920:	4b17      	ldr	r3, [pc, #92]	; (29980 <system_clock_source_get_hz+0xa8>)
   29922:	681b      	ldr	r3, [r3, #0]
   29924:	2202      	movs	r2, #2
   29926:	4013      	ands	r3, r2
   29928:	d101      	bne.n	2992e <system_clock_source_get_hz+0x56>
			return 0;
   2992a:	2300      	movs	r3, #0
   2992c:	e021      	b.n	29972 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2992e:	4b17      	ldr	r3, [pc, #92]	; (2998c <system_clock_source_get_hz+0xb4>)
   29930:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   29932:	4b13      	ldr	r3, [pc, #76]	; (29980 <system_clock_source_get_hz+0xa8>)
   29934:	681b      	ldr	r3, [r3, #0]
   29936:	2224      	movs	r2, #36	; 0x24
   29938:	4013      	ands	r3, r2
   2993a:	2b04      	cmp	r3, #4
   2993c:	d109      	bne.n	29952 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2993e:	2000      	movs	r0, #0
   29940:	4b13      	ldr	r3, [pc, #76]	; (29990 <system_clock_source_get_hz+0xb8>)
   29942:	4798      	blx	r3
   29944:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   29946:	4b0e      	ldr	r3, [pc, #56]	; (29980 <system_clock_source_get_hz+0xa8>)
   29948:	689b      	ldr	r3, [r3, #8]
   2994a:	041b      	lsls	r3, r3, #16
   2994c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2994e:	4353      	muls	r3, r2
   29950:	e00f      	b.n	29972 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   29952:	4b10      	ldr	r3, [pc, #64]	; (29994 <system_clock_source_get_hz+0xbc>)
   29954:	e00d      	b.n	29972 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   29956:	4a0b      	ldr	r2, [pc, #44]	; (29984 <system_clock_source_get_hz+0xac>)
   29958:	2350      	movs	r3, #80	; 0x50
   2995a:	5cd3      	ldrb	r3, [r2, r3]
   2995c:	b2db      	uxtb	r3, r3
   2995e:	001a      	movs	r2, r3
   29960:	2304      	movs	r3, #4
   29962:	4013      	ands	r3, r2
   29964:	d101      	bne.n	2996a <system_clock_source_get_hz+0x92>
			return 0;
   29966:	2300      	movs	r3, #0
   29968:	e003      	b.n	29972 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2996a:	4b05      	ldr	r3, [pc, #20]	; (29980 <system_clock_source_get_hz+0xa8>)
   2996c:	68db      	ldr	r3, [r3, #12]
   2996e:	e000      	b.n	29972 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   29970:	2300      	movs	r3, #0
	}
}
   29972:	0018      	movs	r0, r3
   29974:	46bd      	mov	sp, r7
   29976:	b002      	add	sp, #8
   29978:	bd80      	pop	{r7, pc}
   2997a:	46c0      	nop			; (mov r8, r8)
   2997c:	00039ac8 	.word	0x00039ac8
   29980:	200042d8 	.word	0x200042d8
   29984:	40000800 	.word	0x40000800
   29988:	007a1200 	.word	0x007a1200
   2998c:	00029879 	.word	0x00029879
   29990:	0002a375 	.word	0x0002a375
   29994:	02dc6c00 	.word	0x02dc6c00

00029998 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29998:	b580      	push	{r7, lr}
   2999a:	b084      	sub	sp, #16
   2999c:	af00      	add	r7, sp, #0
   2999e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   299a0:	4b1a      	ldr	r3, [pc, #104]	; (29a0c <system_clock_source_osc8m_set_config+0x74>)
   299a2:	6a1b      	ldr	r3, [r3, #32]
   299a4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   299a6:	687b      	ldr	r3, [r7, #4]
   299a8:	781b      	ldrb	r3, [r3, #0]
   299aa:	1c1a      	adds	r2, r3, #0
   299ac:	2303      	movs	r3, #3
   299ae:	4013      	ands	r3, r2
   299b0:	b2da      	uxtb	r2, r3
   299b2:	230d      	movs	r3, #13
   299b4:	18fb      	adds	r3, r7, r3
   299b6:	2103      	movs	r1, #3
   299b8:	400a      	ands	r2, r1
   299ba:	0010      	movs	r0, r2
   299bc:	781a      	ldrb	r2, [r3, #0]
   299be:	2103      	movs	r1, #3
   299c0:	438a      	bics	r2, r1
   299c2:	1c11      	adds	r1, r2, #0
   299c4:	1c02      	adds	r2, r0, #0
   299c6:	430a      	orrs	r2, r1
   299c8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   299ca:	687b      	ldr	r3, [r7, #4]
   299cc:	789a      	ldrb	r2, [r3, #2]
   299ce:	230c      	movs	r3, #12
   299d0:	18fb      	adds	r3, r7, r3
   299d2:	01d0      	lsls	r0, r2, #7
   299d4:	781a      	ldrb	r2, [r3, #0]
   299d6:	217f      	movs	r1, #127	; 0x7f
   299d8:	400a      	ands	r2, r1
   299da:	1c11      	adds	r1, r2, #0
   299dc:	1c02      	adds	r2, r0, #0
   299de:	430a      	orrs	r2, r1
   299e0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   299e2:	687b      	ldr	r3, [r7, #4]
   299e4:	785a      	ldrb	r2, [r3, #1]
   299e6:	230c      	movs	r3, #12
   299e8:	18fb      	adds	r3, r7, r3
   299ea:	2101      	movs	r1, #1
   299ec:	400a      	ands	r2, r1
   299ee:	0190      	lsls	r0, r2, #6
   299f0:	781a      	ldrb	r2, [r3, #0]
   299f2:	2140      	movs	r1, #64	; 0x40
   299f4:	438a      	bics	r2, r1
   299f6:	1c11      	adds	r1, r2, #0
   299f8:	1c02      	adds	r2, r0, #0
   299fa:	430a      	orrs	r2, r1
   299fc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   299fe:	4b03      	ldr	r3, [pc, #12]	; (29a0c <system_clock_source_osc8m_set_config+0x74>)
   29a00:	68fa      	ldr	r2, [r7, #12]
   29a02:	621a      	str	r2, [r3, #32]
}
   29a04:	46c0      	nop			; (mov r8, r8)
   29a06:	46bd      	mov	sp, r7
   29a08:	b004      	add	sp, #16
   29a0a:	bd80      	pop	{r7, pc}
   29a0c:	40000800 	.word	0x40000800

00029a10 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   29a10:	b580      	push	{r7, lr}
   29a12:	b086      	sub	sp, #24
   29a14:	af00      	add	r7, sp, #0
   29a16:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29a18:	687b      	ldr	r3, [r7, #4]
   29a1a:	68db      	ldr	r3, [r3, #12]
   29a1c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   29a1e:	687b      	ldr	r3, [r7, #4]
   29a20:	7d1b      	ldrb	r3, [r3, #20]
   29a22:	2b01      	cmp	r3, #1
   29a24:	d10a      	bne.n	29a3c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   29a26:	687b      	ldr	r3, [r7, #4]
   29a28:	8a1b      	ldrh	r3, [r3, #16]
   29a2a:	3301      	adds	r3, #1
   29a2c:	005b      	lsls	r3, r3, #1
   29a2e:	001a      	movs	r2, r3
   29a30:	4b36      	ldr	r3, [pc, #216]	; (29b0c <system_clock_source_dpll_set_config+0xfc>)
   29a32:	0011      	movs	r1, r2
   29a34:	6978      	ldr	r0, [r7, #20]
   29a36:	4798      	blx	r3
   29a38:	0003      	movs	r3, r0
   29a3a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29a3c:	687b      	ldr	r3, [r7, #4]
   29a3e:	689b      	ldr	r3, [r3, #8]
   29a40:	011a      	lsls	r2, r3, #4
   29a42:	4b32      	ldr	r3, [pc, #200]	; (29b0c <system_clock_source_dpll_set_config+0xfc>)
   29a44:	6979      	ldr	r1, [r7, #20]
   29a46:	0010      	movs	r0, r2
   29a48:	4798      	blx	r3
   29a4a:	0003      	movs	r3, r0
   29a4c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   29a4e:	693b      	ldr	r3, [r7, #16]
   29a50:	b2da      	uxtb	r2, r3
   29a52:	230f      	movs	r3, #15
   29a54:	18fb      	adds	r3, r7, r3
   29a56:	210f      	movs	r1, #15
   29a58:	400a      	ands	r2, r1
   29a5a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29a5c:	693b      	ldr	r3, [r7, #16]
   29a5e:	091b      	lsrs	r3, r3, #4
   29a60:	3b01      	subs	r3, #1
   29a62:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29a64:	492a      	ldr	r1, [pc, #168]	; (29b10 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29a66:	687b      	ldr	r3, [r7, #4]
   29a68:	781b      	ldrb	r3, [r3, #0]
   29a6a:	01db      	lsls	r3, r3, #7
   29a6c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   29a6e:	687b      	ldr	r3, [r7, #4]
   29a70:	785b      	ldrb	r3, [r3, #1]
   29a72:	019b      	lsls	r3, r3, #6
   29a74:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29a76:	4313      	orrs	r3, r2
   29a78:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29a7a:	2344      	movs	r3, #68	; 0x44
   29a7c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   29a7e:	4b24      	ldr	r3, [pc, #144]	; (29b10 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29a80:	220f      	movs	r2, #15
   29a82:	18ba      	adds	r2, r7, r2
   29a84:	7812      	ldrb	r2, [r2, #0]
   29a86:	0412      	lsls	r2, r2, #16
   29a88:	0011      	movs	r1, r2
   29a8a:	22f0      	movs	r2, #240	; 0xf0
   29a8c:	0312      	lsls	r2, r2, #12
   29a8e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   29a90:	693a      	ldr	r2, [r7, #16]
   29a92:	0512      	lsls	r2, r2, #20
   29a94:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29a96:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29a98:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29a9a:	4b1d      	ldr	r3, [pc, #116]	; (29b10 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29a9c:	687a      	ldr	r2, [r7, #4]
   29a9e:	8a12      	ldrh	r2, [r2, #16]
   29aa0:	0412      	lsls	r2, r2, #16
   29aa2:	0011      	movs	r1, r2
   29aa4:	4a1b      	ldr	r2, [pc, #108]	; (29b14 <system_clock_source_dpll_set_config+0x104>)
   29aa6:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29aa8:	687a      	ldr	r2, [r7, #4]
   29aaa:	7892      	ldrb	r2, [r2, #2]
   29aac:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29aae:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29ab0:	687a      	ldr	r2, [r7, #4]
   29ab2:	7cd2      	ldrb	r2, [r2, #19]
   29ab4:	0212      	lsls	r2, r2, #8
   29ab6:	0010      	movs	r0, r2
   29ab8:	22e0      	movs	r2, #224	; 0xe0
   29aba:	00d2      	lsls	r2, r2, #3
   29abc:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29abe:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29ac0:	687a      	ldr	r2, [r7, #4]
   29ac2:	7d12      	ldrb	r2, [r2, #20]
   29ac4:	0112      	lsls	r2, r2, #4
   29ac6:	0010      	movs	r0, r2
   29ac8:	2230      	movs	r2, #48	; 0x30
   29aca:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29acc:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29ace:	687a      	ldr	r2, [r7, #4]
   29ad0:	78d2      	ldrb	r2, [r2, #3]
   29ad2:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29ad4:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29ad6:	687a      	ldr	r2, [r7, #4]
   29ad8:	7912      	ldrb	r2, [r2, #4]
   29ada:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29adc:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   29ade:	687a      	ldr	r2, [r7, #4]
   29ae0:	7c92      	ldrb	r2, [r2, #18]
   29ae2:	0010      	movs	r0, r2
   29ae4:	2203      	movs	r2, #3
   29ae6:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29ae8:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29aea:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29aec:	693b      	ldr	r3, [r7, #16]
   29aee:	3301      	adds	r3, #1
   29af0:	011a      	lsls	r2, r3, #4
   29af2:	230f      	movs	r3, #15
   29af4:	18fb      	adds	r3, r7, r3
   29af6:	781b      	ldrb	r3, [r3, #0]
   29af8:	18d3      	adds	r3, r2, r3
   29afa:	697a      	ldr	r2, [r7, #20]
   29afc:	4353      	muls	r3, r2
   29afe:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29b00:	4b05      	ldr	r3, [pc, #20]	; (29b18 <system_clock_source_dpll_set_config+0x108>)
   29b02:	60da      	str	r2, [r3, #12]
}
   29b04:	46c0      	nop			; (mov r8, r8)
   29b06:	46bd      	mov	sp, r7
   29b08:	b006      	add	sp, #24
   29b0a:	bd80      	pop	{r7, pc}
   29b0c:	00032d95 	.word	0x00032d95
   29b10:	40000800 	.word	0x40000800
   29b14:	07ff0000 	.word	0x07ff0000
   29b18:	200042d8 	.word	0x200042d8

00029b1c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29b1c:	b580      	push	{r7, lr}
   29b1e:	b082      	sub	sp, #8
   29b20:	af00      	add	r7, sp, #0
   29b22:	0002      	movs	r2, r0
   29b24:	1dfb      	adds	r3, r7, #7
   29b26:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29b28:	1dfb      	adds	r3, r7, #7
   29b2a:	781b      	ldrb	r3, [r3, #0]
   29b2c:	2b08      	cmp	r3, #8
   29b2e:	d83b      	bhi.n	29ba8 <system_clock_source_enable+0x8c>
   29b30:	009a      	lsls	r2, r3, #2
   29b32:	4b21      	ldr	r3, [pc, #132]	; (29bb8 <system_clock_source_enable+0x9c>)
   29b34:	18d3      	adds	r3, r2, r3
   29b36:	681b      	ldr	r3, [r3, #0]
   29b38:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29b3a:	4b20      	ldr	r3, [pc, #128]	; (29bbc <system_clock_source_enable+0xa0>)
   29b3c:	4a1f      	ldr	r2, [pc, #124]	; (29bbc <system_clock_source_enable+0xa0>)
   29b3e:	6a12      	ldr	r2, [r2, #32]
   29b40:	2102      	movs	r1, #2
   29b42:	430a      	orrs	r2, r1
   29b44:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   29b46:	2300      	movs	r3, #0
   29b48:	e031      	b.n	29bae <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29b4a:	4b1c      	ldr	r3, [pc, #112]	; (29bbc <system_clock_source_enable+0xa0>)
   29b4c:	4a1b      	ldr	r2, [pc, #108]	; (29bbc <system_clock_source_enable+0xa0>)
   29b4e:	6992      	ldr	r2, [r2, #24]
   29b50:	2102      	movs	r1, #2
   29b52:	430a      	orrs	r2, r1
   29b54:	619a      	str	r2, [r3, #24]
		break;
   29b56:	e029      	b.n	29bac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29b58:	4a18      	ldr	r2, [pc, #96]	; (29bbc <system_clock_source_enable+0xa0>)
   29b5a:	4b18      	ldr	r3, [pc, #96]	; (29bbc <system_clock_source_enable+0xa0>)
   29b5c:	8a1b      	ldrh	r3, [r3, #16]
   29b5e:	b29b      	uxth	r3, r3
   29b60:	2102      	movs	r1, #2
   29b62:	430b      	orrs	r3, r1
   29b64:	b29b      	uxth	r3, r3
   29b66:	8213      	strh	r3, [r2, #16]
		break;
   29b68:	e020      	b.n	29bac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29b6a:	4a14      	ldr	r2, [pc, #80]	; (29bbc <system_clock_source_enable+0xa0>)
   29b6c:	4b13      	ldr	r3, [pc, #76]	; (29bbc <system_clock_source_enable+0xa0>)
   29b6e:	8a9b      	ldrh	r3, [r3, #20]
   29b70:	b29b      	uxth	r3, r3
   29b72:	2102      	movs	r1, #2
   29b74:	430b      	orrs	r3, r1
   29b76:	b29b      	uxth	r3, r3
   29b78:	8293      	strh	r3, [r2, #20]
		break;
   29b7a:	e017      	b.n	29bac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29b7c:	4b10      	ldr	r3, [pc, #64]	; (29bc0 <system_clock_source_enable+0xa4>)
   29b7e:	681b      	ldr	r3, [r3, #0]
   29b80:	2202      	movs	r2, #2
   29b82:	431a      	orrs	r2, r3
   29b84:	4b0e      	ldr	r3, [pc, #56]	; (29bc0 <system_clock_source_enable+0xa4>)
   29b86:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29b88:	4b0e      	ldr	r3, [pc, #56]	; (29bc4 <system_clock_source_enable+0xa8>)
   29b8a:	4798      	blx	r3
		break;
   29b8c:	e00e      	b.n	29bac <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29b8e:	4a0b      	ldr	r2, [pc, #44]	; (29bbc <system_clock_source_enable+0xa0>)
   29b90:	490a      	ldr	r1, [pc, #40]	; (29bbc <system_clock_source_enable+0xa0>)
   29b92:	2344      	movs	r3, #68	; 0x44
   29b94:	5ccb      	ldrb	r3, [r1, r3]
   29b96:	b2db      	uxtb	r3, r3
   29b98:	2102      	movs	r1, #2
   29b9a:	430b      	orrs	r3, r1
   29b9c:	b2d9      	uxtb	r1, r3
   29b9e:	2344      	movs	r3, #68	; 0x44
   29ba0:	54d1      	strb	r1, [r2, r3]
		break;
   29ba2:	e003      	b.n	29bac <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   29ba4:	2300      	movs	r3, #0
   29ba6:	e002      	b.n	29bae <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29ba8:	2317      	movs	r3, #23
   29baa:	e000      	b.n	29bae <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29bac:	2300      	movs	r3, #0
}
   29bae:	0018      	movs	r0, r3
   29bb0:	46bd      	mov	sp, r7
   29bb2:	b002      	add	sp, #8
   29bb4:	bd80      	pop	{r7, pc}
   29bb6:	46c0      	nop			; (mov r8, r8)
   29bb8:	00039aec 	.word	0x00039aec
   29bbc:	40000800 	.word	0x40000800
   29bc0:	200042d8 	.word	0x200042d8
   29bc4:	00029895 	.word	0x00029895

00029bc8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29bc8:	b580      	push	{r7, lr}
   29bca:	b084      	sub	sp, #16
   29bcc:	af00      	add	r7, sp, #0
   29bce:	0002      	movs	r2, r0
   29bd0:	1dfb      	adds	r3, r7, #7
   29bd2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   29bd4:	2300      	movs	r3, #0
   29bd6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29bd8:	1dfb      	adds	r3, r7, #7
   29bda:	781b      	ldrb	r3, [r3, #0]
   29bdc:	2b08      	cmp	r3, #8
   29bde:	d821      	bhi.n	29c24 <system_clock_source_is_ready+0x5c>
   29be0:	009a      	lsls	r2, r3, #2
   29be2:	4b18      	ldr	r3, [pc, #96]	; (29c44 <system_clock_source_is_ready+0x7c>)
   29be4:	18d3      	adds	r3, r2, r3
   29be6:	681b      	ldr	r3, [r3, #0]
   29be8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29bea:	2308      	movs	r3, #8
   29bec:	60fb      	str	r3, [r7, #12]
		break;
   29bee:	e01b      	b.n	29c28 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29bf0:	2304      	movs	r3, #4
   29bf2:	60fb      	str	r3, [r7, #12]
		break;
   29bf4:	e018      	b.n	29c28 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29bf6:	2301      	movs	r3, #1
   29bf8:	60fb      	str	r3, [r7, #12]
		break;
   29bfa:	e015      	b.n	29c28 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29bfc:	2302      	movs	r3, #2
   29bfe:	60fb      	str	r3, [r7, #12]
		break;
   29c00:	e012      	b.n	29c28 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   29c02:	2310      	movs	r3, #16
   29c04:	60fb      	str	r3, [r7, #12]
		}
		break;
   29c06:	e00f      	b.n	29c28 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29c08:	4a0f      	ldr	r2, [pc, #60]	; (29c48 <system_clock_source_is_ready+0x80>)
   29c0a:	2350      	movs	r3, #80	; 0x50
   29c0c:	5cd3      	ldrb	r3, [r2, r3]
   29c0e:	b2db      	uxtb	r3, r3
   29c10:	001a      	movs	r2, r3
   29c12:	2303      	movs	r3, #3
   29c14:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29c16:	3b03      	subs	r3, #3
   29c18:	425a      	negs	r2, r3
   29c1a:	4153      	adcs	r3, r2
   29c1c:	b2db      	uxtb	r3, r3
   29c1e:	e00c      	b.n	29c3a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29c20:	2301      	movs	r3, #1
   29c22:	e00a      	b.n	29c3a <system_clock_source_is_ready+0x72>

	default:
		return false;
   29c24:	2300      	movs	r3, #0
   29c26:	e008      	b.n	29c3a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29c28:	4b07      	ldr	r3, [pc, #28]	; (29c48 <system_clock_source_is_ready+0x80>)
   29c2a:	68db      	ldr	r3, [r3, #12]
   29c2c:	68fa      	ldr	r2, [r7, #12]
   29c2e:	401a      	ands	r2, r3
   29c30:	68fb      	ldr	r3, [r7, #12]
   29c32:	1ad3      	subs	r3, r2, r3
   29c34:	425a      	negs	r2, r3
   29c36:	4153      	adcs	r3, r2
   29c38:	b2db      	uxtb	r3, r3
}
   29c3a:	0018      	movs	r0, r3
   29c3c:	46bd      	mov	sp, r7
   29c3e:	b004      	add	sp, #16
   29c40:	bd80      	pop	{r7, pc}
   29c42:	46c0      	nop			; (mov r8, r8)
   29c44:	00039b10 	.word	0x00039b10
   29c48:	40000800 	.word	0x40000800

00029c4c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29c4c:	b580      	push	{r7, lr}
   29c4e:	b082      	sub	sp, #8
   29c50:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   29c52:	003b      	movs	r3, r7
   29c54:	2203      	movs	r2, #3
   29c56:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29c58:	2300      	movs	r3, #0
   29c5a:	607b      	str	r3, [r7, #4]
   29c5c:	e009      	b.n	29c72 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29c5e:	687b      	ldr	r3, [r7, #4]
   29c60:	b2db      	uxtb	r3, r3
   29c62:	003a      	movs	r2, r7
   29c64:	0011      	movs	r1, r2
   29c66:	0018      	movs	r0, r3
   29c68:	4b05      	ldr	r3, [pc, #20]	; (29c80 <_switch_peripheral_gclk+0x34>)
   29c6a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29c6c:	687b      	ldr	r3, [r7, #4]
   29c6e:	3301      	adds	r3, #1
   29c70:	607b      	str	r3, [r7, #4]
   29c72:	687b      	ldr	r3, [r7, #4]
   29c74:	2b24      	cmp	r3, #36	; 0x24
   29c76:	d9f2      	bls.n	29c5e <_switch_peripheral_gclk+0x12>
	}
}
   29c78:	46c0      	nop			; (mov r8, r8)
   29c7a:	46bd      	mov	sp, r7
   29c7c:	b002      	add	sp, #8
   29c7e:	bd80      	pop	{r7, pc}
   29c80:	0002a251 	.word	0x0002a251

00029c84 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   29c84:	b580      	push	{r7, lr}
   29c86:	b0a6      	sub	sp, #152	; 0x98
   29c88:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29c8a:	4b92      	ldr	r3, [pc, #584]	; (29ed4 <system_clock_init+0x250>)
   29c8c:	22c2      	movs	r2, #194	; 0xc2
   29c8e:	00d2      	lsls	r2, r2, #3
   29c90:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   29c92:	2003      	movs	r0, #3
   29c94:	4b90      	ldr	r3, [pc, #576]	; (29ed8 <system_clock_init+0x254>)
   29c96:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29c98:	4b90      	ldr	r3, [pc, #576]	; (29edc <system_clock_init+0x258>)
   29c9a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29c9c:	2394      	movs	r3, #148	; 0x94
   29c9e:	18fb      	adds	r3, r7, r3
   29ca0:	0018      	movs	r0, r3
   29ca2:	4b8f      	ldr	r3, [pc, #572]	; (29ee0 <system_clock_init+0x25c>)
   29ca4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   29ca6:	2394      	movs	r3, #148	; 0x94
   29ca8:	18fb      	adds	r3, r7, r3
   29caa:	2200      	movs	r2, #0
   29cac:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29cae:	2394      	movs	r3, #148	; 0x94
   29cb0:	18fb      	adds	r3, r7, r3
   29cb2:	2201      	movs	r2, #1
   29cb4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   29cb6:	2394      	movs	r3, #148	; 0x94
   29cb8:	18fb      	adds	r3, r7, r3
   29cba:	2200      	movs	r2, #0
   29cbc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   29cbe:	2394      	movs	r3, #148	; 0x94
   29cc0:	18fb      	adds	r3, r7, r3
   29cc2:	0018      	movs	r0, r3
   29cc4:	4b87      	ldr	r3, [pc, #540]	; (29ee4 <system_clock_init+0x260>)
   29cc6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29cc8:	2006      	movs	r0, #6
   29cca:	4b87      	ldr	r3, [pc, #540]	; (29ee8 <system_clock_init+0x264>)
   29ccc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   29cce:	4b87      	ldr	r3, [pc, #540]	; (29eec <system_clock_init+0x268>)
   29cd0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   29cd2:	2360      	movs	r3, #96	; 0x60
   29cd4:	18fb      	adds	r3, r7, r3
   29cd6:	0018      	movs	r0, r3
   29cd8:	4b85      	ldr	r3, [pc, #532]	; (29ef0 <system_clock_init+0x26c>)
   29cda:	4798      	blx	r3
   29cdc:	2360      	movs	r3, #96	; 0x60
   29cde:	18fb      	adds	r3, r7, r3
   29ce0:	2206      	movs	r2, #6
   29ce2:	701a      	strb	r2, [r3, #0]
   29ce4:	2360      	movs	r3, #96	; 0x60
   29ce6:	18fb      	adds	r3, r7, r3
   29ce8:	2208      	movs	r2, #8
   29cea:	605a      	str	r2, [r3, #4]
   29cec:	2360      	movs	r3, #96	; 0x60
   29cee:	18fb      	adds	r3, r7, r3
   29cf0:	2200      	movs	r2, #0
   29cf2:	721a      	strb	r2, [r3, #8]
   29cf4:	2360      	movs	r3, #96	; 0x60
   29cf6:	18fb      	adds	r3, r7, r3
   29cf8:	2200      	movs	r2, #0
   29cfa:	725a      	strb	r2, [r3, #9]
   29cfc:	2360      	movs	r3, #96	; 0x60
   29cfe:	18fb      	adds	r3, r7, r3
   29d00:	0019      	movs	r1, r3
   29d02:	2001      	movs	r0, #1
   29d04:	4b7b      	ldr	r3, [pc, #492]	; (29ef4 <system_clock_init+0x270>)
   29d06:	4798      	blx	r3
   29d08:	2001      	movs	r0, #1
   29d0a:	4b7b      	ldr	r3, [pc, #492]	; (29ef8 <system_clock_init+0x274>)
   29d0c:	4798      	blx	r3
   29d0e:	2354      	movs	r3, #84	; 0x54
   29d10:	18fb      	adds	r3, r7, r3
   29d12:	0018      	movs	r0, r3
   29d14:	4b76      	ldr	r3, [pc, #472]	; (29ef0 <system_clock_init+0x26c>)
   29d16:	4798      	blx	r3
   29d18:	2354      	movs	r3, #84	; 0x54
   29d1a:	18fb      	adds	r3, r7, r3
   29d1c:	2203      	movs	r2, #3
   29d1e:	701a      	strb	r2, [r3, #0]
   29d20:	2354      	movs	r3, #84	; 0x54
   29d22:	18fb      	adds	r3, r7, r3
   29d24:	2201      	movs	r2, #1
   29d26:	605a      	str	r2, [r3, #4]
   29d28:	2354      	movs	r3, #84	; 0x54
   29d2a:	18fb      	adds	r3, r7, r3
   29d2c:	2201      	movs	r2, #1
   29d2e:	721a      	strb	r2, [r3, #8]
   29d30:	2354      	movs	r3, #84	; 0x54
   29d32:	18fb      	adds	r3, r7, r3
   29d34:	2200      	movs	r2, #0
   29d36:	725a      	strb	r2, [r3, #9]
   29d38:	2354      	movs	r3, #84	; 0x54
   29d3a:	18fb      	adds	r3, r7, r3
   29d3c:	0019      	movs	r1, r3
   29d3e:	2002      	movs	r0, #2
   29d40:	4b6c      	ldr	r3, [pc, #432]	; (29ef4 <system_clock_init+0x270>)
   29d42:	4798      	blx	r3
   29d44:	2002      	movs	r0, #2
   29d46:	4b6c      	ldr	r3, [pc, #432]	; (29ef8 <system_clock_init+0x274>)
   29d48:	4798      	blx	r3
   29d4a:	233c      	movs	r3, #60	; 0x3c
   29d4c:	18fb      	adds	r3, r7, r3
   29d4e:	0018      	movs	r0, r3
   29d50:	4b67      	ldr	r3, [pc, #412]	; (29ef0 <system_clock_init+0x26c>)
   29d52:	4798      	blx	r3
   29d54:	233c      	movs	r3, #60	; 0x3c
   29d56:	18fb      	adds	r3, r7, r3
   29d58:	2203      	movs	r2, #3
   29d5a:	701a      	strb	r2, [r3, #0]
   29d5c:	233c      	movs	r3, #60	; 0x3c
   29d5e:	18fb      	adds	r3, r7, r3
   29d60:	2220      	movs	r2, #32
   29d62:	605a      	str	r2, [r3, #4]
   29d64:	233c      	movs	r3, #60	; 0x3c
   29d66:	18fb      	adds	r3, r7, r3
   29d68:	2200      	movs	r2, #0
   29d6a:	721a      	strb	r2, [r3, #8]
   29d6c:	233c      	movs	r3, #60	; 0x3c
   29d6e:	18fb      	adds	r3, r7, r3
   29d70:	2200      	movs	r2, #0
   29d72:	725a      	strb	r2, [r3, #9]
   29d74:	233c      	movs	r3, #60	; 0x3c
   29d76:	18fb      	adds	r3, r7, r3
   29d78:	0019      	movs	r1, r3
   29d7a:	2004      	movs	r0, #4
   29d7c:	4b5d      	ldr	r3, [pc, #372]	; (29ef4 <system_clock_init+0x270>)
   29d7e:	4798      	blx	r3
   29d80:	2004      	movs	r0, #4
   29d82:	4b5d      	ldr	r3, [pc, #372]	; (29ef8 <system_clock_init+0x274>)
   29d84:	4798      	blx	r3
   29d86:	2330      	movs	r3, #48	; 0x30
   29d88:	18fb      	adds	r3, r7, r3
   29d8a:	0018      	movs	r0, r3
   29d8c:	4b58      	ldr	r3, [pc, #352]	; (29ef0 <system_clock_init+0x26c>)
   29d8e:	4798      	blx	r3
   29d90:	2330      	movs	r3, #48	; 0x30
   29d92:	18fb      	adds	r3, r7, r3
   29d94:	2206      	movs	r2, #6
   29d96:	701a      	strb	r2, [r3, #0]
   29d98:	2330      	movs	r3, #48	; 0x30
   29d9a:	18fb      	adds	r3, r7, r3
   29d9c:	2201      	movs	r2, #1
   29d9e:	605a      	str	r2, [r3, #4]
   29da0:	2330      	movs	r3, #48	; 0x30
   29da2:	18fb      	adds	r3, r7, r3
   29da4:	2200      	movs	r2, #0
   29da6:	721a      	strb	r2, [r3, #8]
   29da8:	2330      	movs	r3, #48	; 0x30
   29daa:	18fb      	adds	r3, r7, r3
   29dac:	2200      	movs	r2, #0
   29dae:	725a      	strb	r2, [r3, #9]
   29db0:	2330      	movs	r3, #48	; 0x30
   29db2:	18fb      	adds	r3, r7, r3
   29db4:	0019      	movs	r1, r3
   29db6:	2005      	movs	r0, #5
   29db8:	4b4e      	ldr	r3, [pc, #312]	; (29ef4 <system_clock_init+0x270>)
   29dba:	4798      	blx	r3
   29dbc:	2005      	movs	r0, #5
   29dbe:	4b4e      	ldr	r3, [pc, #312]	; (29ef8 <system_clock_init+0x274>)
   29dc0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   29dc2:	2390      	movs	r3, #144	; 0x90
   29dc4:	18fb      	adds	r3, r7, r3
   29dc6:	0018      	movs	r0, r3
   29dc8:	4b4c      	ldr	r3, [pc, #304]	; (29efc <system_clock_init+0x278>)
   29dca:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   29dcc:	2390      	movs	r3, #144	; 0x90
   29dce:	18fb      	adds	r3, r7, r3
   29dd0:	2201      	movs	r2, #1
   29dd2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   29dd4:	2390      	movs	r3, #144	; 0x90
   29dd6:	18fb      	adds	r3, r7, r3
   29dd8:	0019      	movs	r1, r3
   29dda:	2001      	movs	r0, #1
   29ddc:	4b48      	ldr	r3, [pc, #288]	; (29f00 <system_clock_init+0x27c>)
   29dde:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   29de0:	2001      	movs	r0, #1
   29de2:	4b48      	ldr	r3, [pc, #288]	; (29f04 <system_clock_init+0x280>)
   29de4:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29de6:	2378      	movs	r3, #120	; 0x78
   29de8:	18fb      	adds	r3, r7, r3
   29dea:	0018      	movs	r0, r3
   29dec:	4b46      	ldr	r3, [pc, #280]	; (29f08 <system_clock_init+0x284>)
   29dee:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29df0:	2378      	movs	r3, #120	; 0x78
   29df2:	18fb      	adds	r3, r7, r3
   29df4:	2200      	movs	r2, #0
   29df6:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29df8:	2378      	movs	r3, #120	; 0x78
   29dfa:	18fb      	adds	r3, r7, r3
   29dfc:	2200      	movs	r2, #0
   29dfe:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29e00:	2378      	movs	r3, #120	; 0x78
   29e02:	18fb      	adds	r3, r7, r3
   29e04:	2200      	movs	r2, #0
   29e06:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29e08:	2378      	movs	r3, #120	; 0x78
   29e0a:	18fb      	adds	r3, r7, r3
   29e0c:	2200      	movs	r2, #0
   29e0e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   29e10:	2378      	movs	r3, #120	; 0x78
   29e12:	18fb      	adds	r3, r7, r3
   29e14:	2200      	movs	r2, #0
   29e16:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29e18:	2378      	movs	r3, #120	; 0x78
   29e1a:	18fb      	adds	r3, r7, r3
   29e1c:	2200      	movs	r2, #0
   29e1e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29e20:	2378      	movs	r3, #120	; 0x78
   29e22:	18fb      	adds	r3, r7, r3
   29e24:	2200      	movs	r2, #0
   29e26:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29e28:	2378      	movs	r3, #120	; 0x78
   29e2a:	18fb      	adds	r3, r7, r3
   29e2c:	2202      	movs	r2, #2
   29e2e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29e30:	2378      	movs	r3, #120	; 0x78
   29e32:	18fb      	adds	r3, r7, r3
   29e34:	4a35      	ldr	r2, [pc, #212]	; (29f0c <system_clock_init+0x288>)
   29e36:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29e38:	2378      	movs	r3, #120	; 0x78
   29e3a:	18fb      	adds	r3, r7, r3
   29e3c:	2201      	movs	r2, #1
   29e3e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29e40:	2378      	movs	r3, #120	; 0x78
   29e42:	18fb      	adds	r3, r7, r3
   29e44:	4a32      	ldr	r2, [pc, #200]	; (29f10 <system_clock_init+0x28c>)
   29e46:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29e48:	2378      	movs	r3, #120	; 0x78
   29e4a:	18fb      	adds	r3, r7, r3
   29e4c:	0018      	movs	r0, r3
   29e4e:	4b31      	ldr	r3, [pc, #196]	; (29f14 <system_clock_init+0x290>)
   29e50:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   29e52:	2008      	movs	r0, #8
   29e54:	4b24      	ldr	r3, [pc, #144]	; (29ee8 <system_clock_init+0x264>)
   29e56:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29e58:	46c0      	nop			; (mov r8, r8)
   29e5a:	2008      	movs	r0, #8
   29e5c:	4b2e      	ldr	r3, [pc, #184]	; (29f18 <system_clock_init+0x294>)
   29e5e:	4798      	blx	r3
   29e60:	0003      	movs	r3, r0
   29e62:	001a      	movs	r2, r3
   29e64:	2301      	movs	r3, #1
   29e66:	4053      	eors	r3, r2
   29e68:	b2db      	uxtb	r3, r3
   29e6a:	2b00      	cmp	r3, #0
   29e6c:	d1f5      	bne.n	29e5a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   29e6e:	4919      	ldr	r1, [pc, #100]	; (29ed4 <system_clock_init+0x250>)
   29e70:	2244      	movs	r2, #68	; 0x44
   29e72:	5c8b      	ldrb	r3, [r1, r2]
   29e74:	2080      	movs	r0, #128	; 0x80
   29e76:	4240      	negs	r0, r0
   29e78:	4303      	orrs	r3, r0
   29e7a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29e7c:	2000      	movs	r0, #0
   29e7e:	4b27      	ldr	r3, [pc, #156]	; (29f1c <system_clock_init+0x298>)
   29e80:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   29e82:	2100      	movs	r1, #0
   29e84:	2000      	movs	r0, #0
   29e86:	4b26      	ldr	r3, [pc, #152]	; (29f20 <system_clock_init+0x29c>)
   29e88:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   29e8a:	2100      	movs	r1, #0
   29e8c:	2001      	movs	r0, #1
   29e8e:	4b24      	ldr	r3, [pc, #144]	; (29f20 <system_clock_init+0x29c>)
   29e90:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   29e92:	2100      	movs	r1, #0
   29e94:	2002      	movs	r0, #2
   29e96:	4b22      	ldr	r3, [pc, #136]	; (29f20 <system_clock_init+0x29c>)
   29e98:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   29e9a:	003b      	movs	r3, r7
   29e9c:	0018      	movs	r0, r3
   29e9e:	4b14      	ldr	r3, [pc, #80]	; (29ef0 <system_clock_init+0x26c>)
   29ea0:	4798      	blx	r3
   29ea2:	003b      	movs	r3, r7
   29ea4:	2208      	movs	r2, #8
   29ea6:	701a      	strb	r2, [r3, #0]
   29ea8:	003b      	movs	r3, r7
   29eaa:	2201      	movs	r2, #1
   29eac:	605a      	str	r2, [r3, #4]
   29eae:	003b      	movs	r3, r7
   29eb0:	2200      	movs	r2, #0
   29eb2:	721a      	strb	r2, [r3, #8]
   29eb4:	003b      	movs	r3, r7
   29eb6:	2201      	movs	r2, #1
   29eb8:	725a      	strb	r2, [r3, #9]
   29eba:	003b      	movs	r3, r7
   29ebc:	0019      	movs	r1, r3
   29ebe:	2000      	movs	r0, #0
   29ec0:	4b0c      	ldr	r3, [pc, #48]	; (29ef4 <system_clock_init+0x270>)
   29ec2:	4798      	blx	r3
   29ec4:	2000      	movs	r0, #0
   29ec6:	4b0c      	ldr	r3, [pc, #48]	; (29ef8 <system_clock_init+0x274>)
   29ec8:	4798      	blx	r3
#endif
}
   29eca:	46c0      	nop			; (mov r8, r8)
   29ecc:	46bd      	mov	sp, r7
   29ece:	b026      	add	sp, #152	; 0x98
   29ed0:	bd80      	pop	{r7, pc}
   29ed2:	46c0      	nop			; (mov r8, r8)
   29ed4:	40000800 	.word	0x40000800
   29ed8:	00029845 	.word	0x00029845
   29edc:	00029c4d 	.word	0x00029c4d
   29ee0:	00029755 	.word	0x00029755
   29ee4:	00029999 	.word	0x00029999
   29ee8:	00029b1d 	.word	0x00029b1d
   29eec:	00029fc9 	.word	0x00029fc9
   29ef0:	00029711 	.word	0x00029711
   29ef4:	00029ff9 	.word	0x00029ff9
   29ef8:	0002a11d 	.word	0x0002a11d
   29efc:	0002973f 	.word	0x0002973f
   29f00:	0002a251 	.word	0x0002a251
   29f04:	0002a295 	.word	0x0002a295
   29f08:	000297ed 	.word	0x000297ed
   29f0c:	000f4240 	.word	0x000f4240
   29f10:	02dc6c00 	.word	0x02dc6c00
   29f14:	00029a11 	.word	0x00029a11
   29f18:	00029bc9 	.word	0x00029bc9
   29f1c:	00029779 	.word	0x00029779
   29f20:	00029799 	.word	0x00029799

00029f24 <system_apb_clock_set_mask>:
{
   29f24:	b580      	push	{r7, lr}
   29f26:	b082      	sub	sp, #8
   29f28:	af00      	add	r7, sp, #0
   29f2a:	0002      	movs	r2, r0
   29f2c:	6039      	str	r1, [r7, #0]
   29f2e:	1dfb      	adds	r3, r7, #7
   29f30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29f32:	1dfb      	adds	r3, r7, #7
   29f34:	781b      	ldrb	r3, [r3, #0]
   29f36:	2b01      	cmp	r3, #1
   29f38:	d00a      	beq.n	29f50 <system_apb_clock_set_mask+0x2c>
   29f3a:	2b02      	cmp	r3, #2
   29f3c:	d00f      	beq.n	29f5e <system_apb_clock_set_mask+0x3a>
   29f3e:	2b00      	cmp	r3, #0
   29f40:	d114      	bne.n	29f6c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29f42:	4b0e      	ldr	r3, [pc, #56]	; (29f7c <system_apb_clock_set_mask+0x58>)
   29f44:	4a0d      	ldr	r2, [pc, #52]	; (29f7c <system_apb_clock_set_mask+0x58>)
   29f46:	6991      	ldr	r1, [r2, #24]
   29f48:	683a      	ldr	r2, [r7, #0]
   29f4a:	430a      	orrs	r2, r1
   29f4c:	619a      	str	r2, [r3, #24]
			break;
   29f4e:	e00f      	b.n	29f70 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29f50:	4b0a      	ldr	r3, [pc, #40]	; (29f7c <system_apb_clock_set_mask+0x58>)
   29f52:	4a0a      	ldr	r2, [pc, #40]	; (29f7c <system_apb_clock_set_mask+0x58>)
   29f54:	69d1      	ldr	r1, [r2, #28]
   29f56:	683a      	ldr	r2, [r7, #0]
   29f58:	430a      	orrs	r2, r1
   29f5a:	61da      	str	r2, [r3, #28]
			break;
   29f5c:	e008      	b.n	29f70 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29f5e:	4b07      	ldr	r3, [pc, #28]	; (29f7c <system_apb_clock_set_mask+0x58>)
   29f60:	4a06      	ldr	r2, [pc, #24]	; (29f7c <system_apb_clock_set_mask+0x58>)
   29f62:	6a11      	ldr	r1, [r2, #32]
   29f64:	683a      	ldr	r2, [r7, #0]
   29f66:	430a      	orrs	r2, r1
   29f68:	621a      	str	r2, [r3, #32]
			break;
   29f6a:	e001      	b.n	29f70 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29f6c:	2317      	movs	r3, #23
   29f6e:	e000      	b.n	29f72 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29f70:	2300      	movs	r3, #0
}
   29f72:	0018      	movs	r0, r3
   29f74:	46bd      	mov	sp, r7
   29f76:	b002      	add	sp, #8
   29f78:	bd80      	pop	{r7, pc}
   29f7a:	46c0      	nop			; (mov r8, r8)
   29f7c:	40000400 	.word	0x40000400

00029f80 <system_interrupt_enter_critical_section>:
{
   29f80:	b580      	push	{r7, lr}
   29f82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29f84:	4b02      	ldr	r3, [pc, #8]	; (29f90 <system_interrupt_enter_critical_section+0x10>)
   29f86:	4798      	blx	r3
}
   29f88:	46c0      	nop			; (mov r8, r8)
   29f8a:	46bd      	mov	sp, r7
   29f8c:	bd80      	pop	{r7, pc}
   29f8e:	46c0      	nop			; (mov r8, r8)
   29f90:	000265bd 	.word	0x000265bd

00029f94 <system_interrupt_leave_critical_section>:
{
   29f94:	b580      	push	{r7, lr}
   29f96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29f98:	4b02      	ldr	r3, [pc, #8]	; (29fa4 <system_interrupt_leave_critical_section+0x10>)
   29f9a:	4798      	blx	r3
}
   29f9c:	46c0      	nop			; (mov r8, r8)
   29f9e:	46bd      	mov	sp, r7
   29fa0:	bd80      	pop	{r7, pc}
   29fa2:	46c0      	nop			; (mov r8, r8)
   29fa4:	00026611 	.word	0x00026611

00029fa8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29fa8:	b580      	push	{r7, lr}
   29faa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29fac:	4b05      	ldr	r3, [pc, #20]	; (29fc4 <system_gclk_is_syncing+0x1c>)
   29fae:	785b      	ldrb	r3, [r3, #1]
   29fb0:	b2db      	uxtb	r3, r3
   29fb2:	b25b      	sxtb	r3, r3
   29fb4:	2b00      	cmp	r3, #0
   29fb6:	da01      	bge.n	29fbc <system_gclk_is_syncing+0x14>
		return true;
   29fb8:	2301      	movs	r3, #1
   29fba:	e000      	b.n	29fbe <system_gclk_is_syncing+0x16>
	}

	return false;
   29fbc:	2300      	movs	r3, #0
}
   29fbe:	0018      	movs	r0, r3
   29fc0:	46bd      	mov	sp, r7
   29fc2:	bd80      	pop	{r7, pc}
   29fc4:	40000c00 	.word	0x40000c00

00029fc8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   29fc8:	b580      	push	{r7, lr}
   29fca:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   29fcc:	2108      	movs	r1, #8
   29fce:	2000      	movs	r0, #0
   29fd0:	4b07      	ldr	r3, [pc, #28]	; (29ff0 <system_gclk_init+0x28>)
   29fd2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   29fd4:	4b07      	ldr	r3, [pc, #28]	; (29ff4 <system_gclk_init+0x2c>)
   29fd6:	2201      	movs	r2, #1
   29fd8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29fda:	46c0      	nop			; (mov r8, r8)
   29fdc:	4b05      	ldr	r3, [pc, #20]	; (29ff4 <system_gclk_init+0x2c>)
   29fde:	781b      	ldrb	r3, [r3, #0]
   29fe0:	b2db      	uxtb	r3, r3
   29fe2:	001a      	movs	r2, r3
   29fe4:	2301      	movs	r3, #1
   29fe6:	4013      	ands	r3, r2
   29fe8:	d1f8      	bne.n	29fdc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29fea:	46c0      	nop			; (mov r8, r8)
   29fec:	46bd      	mov	sp, r7
   29fee:	bd80      	pop	{r7, pc}
   29ff0:	00029f25 	.word	0x00029f25
   29ff4:	40000c00 	.word	0x40000c00

00029ff8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29ff8:	b580      	push	{r7, lr}
   29ffa:	b086      	sub	sp, #24
   29ffc:	af00      	add	r7, sp, #0
   29ffe:	0002      	movs	r2, r0
   2a000:	6039      	str	r1, [r7, #0]
   2a002:	1dfb      	adds	r3, r7, #7
   2a004:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a006:	1dfb      	adds	r3, r7, #7
   2a008:	781b      	ldrb	r3, [r3, #0]
   2a00a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a00c:	1dfb      	adds	r3, r7, #7
   2a00e:	781b      	ldrb	r3, [r3, #0]
   2a010:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a012:	683b      	ldr	r3, [r7, #0]
   2a014:	781b      	ldrb	r3, [r3, #0]
   2a016:	021b      	lsls	r3, r3, #8
   2a018:	001a      	movs	r2, r3
   2a01a:	697b      	ldr	r3, [r7, #20]
   2a01c:	4313      	orrs	r3, r2
   2a01e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a020:	683b      	ldr	r3, [r7, #0]
   2a022:	785b      	ldrb	r3, [r3, #1]
   2a024:	2b00      	cmp	r3, #0
   2a026:	d004      	beq.n	2a032 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a028:	697b      	ldr	r3, [r7, #20]
   2a02a:	2280      	movs	r2, #128	; 0x80
   2a02c:	02d2      	lsls	r2, r2, #11
   2a02e:	4313      	orrs	r3, r2
   2a030:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a032:	683b      	ldr	r3, [r7, #0]
   2a034:	7a5b      	ldrb	r3, [r3, #9]
   2a036:	2b00      	cmp	r3, #0
   2a038:	d004      	beq.n	2a044 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a03a:	697b      	ldr	r3, [r7, #20]
   2a03c:	2280      	movs	r2, #128	; 0x80
   2a03e:	0312      	lsls	r2, r2, #12
   2a040:	4313      	orrs	r3, r2
   2a042:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a044:	683b      	ldr	r3, [r7, #0]
   2a046:	685b      	ldr	r3, [r3, #4]
   2a048:	2b01      	cmp	r3, #1
   2a04a:	d92c      	bls.n	2a0a6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a04c:	683b      	ldr	r3, [r7, #0]
   2a04e:	685a      	ldr	r2, [r3, #4]
   2a050:	683b      	ldr	r3, [r7, #0]
   2a052:	685b      	ldr	r3, [r3, #4]
   2a054:	3b01      	subs	r3, #1
   2a056:	4013      	ands	r3, r2
   2a058:	d11a      	bne.n	2a090 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a05a:	2300      	movs	r3, #0
   2a05c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a05e:	2302      	movs	r3, #2
   2a060:	60bb      	str	r3, [r7, #8]
   2a062:	e005      	b.n	2a070 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a064:	68fb      	ldr	r3, [r7, #12]
   2a066:	3301      	adds	r3, #1
   2a068:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a06a:	68bb      	ldr	r3, [r7, #8]
   2a06c:	005b      	lsls	r3, r3, #1
   2a06e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a070:	683b      	ldr	r3, [r7, #0]
   2a072:	685a      	ldr	r2, [r3, #4]
   2a074:	68bb      	ldr	r3, [r7, #8]
   2a076:	429a      	cmp	r2, r3
   2a078:	d8f4      	bhi.n	2a064 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a07a:	68fb      	ldr	r3, [r7, #12]
   2a07c:	021b      	lsls	r3, r3, #8
   2a07e:	693a      	ldr	r2, [r7, #16]
   2a080:	4313      	orrs	r3, r2
   2a082:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a084:	697b      	ldr	r3, [r7, #20]
   2a086:	2280      	movs	r2, #128	; 0x80
   2a088:	0352      	lsls	r2, r2, #13
   2a08a:	4313      	orrs	r3, r2
   2a08c:	617b      	str	r3, [r7, #20]
   2a08e:	e00a      	b.n	2a0a6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a090:	683b      	ldr	r3, [r7, #0]
   2a092:	685b      	ldr	r3, [r3, #4]
   2a094:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a096:	693a      	ldr	r2, [r7, #16]
   2a098:	4313      	orrs	r3, r2
   2a09a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a09c:	697b      	ldr	r3, [r7, #20]
   2a09e:	2280      	movs	r2, #128	; 0x80
   2a0a0:	0292      	lsls	r2, r2, #10
   2a0a2:	4313      	orrs	r3, r2
   2a0a4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a0a6:	683b      	ldr	r3, [r7, #0]
   2a0a8:	7a1b      	ldrb	r3, [r3, #8]
   2a0aa:	2b00      	cmp	r3, #0
   2a0ac:	d004      	beq.n	2a0b8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a0ae:	697b      	ldr	r3, [r7, #20]
   2a0b0:	2280      	movs	r2, #128	; 0x80
   2a0b2:	0392      	lsls	r2, r2, #14
   2a0b4:	4313      	orrs	r3, r2
   2a0b6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a0b8:	46c0      	nop			; (mov r8, r8)
   2a0ba:	4b13      	ldr	r3, [pc, #76]	; (2a108 <system_gclk_gen_set_config+0x110>)
   2a0bc:	4798      	blx	r3
   2a0be:	1e03      	subs	r3, r0, #0
   2a0c0:	d1fb      	bne.n	2a0ba <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a0c2:	4b12      	ldr	r3, [pc, #72]	; (2a10c <system_gclk_gen_set_config+0x114>)
   2a0c4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a0c6:	4a12      	ldr	r2, [pc, #72]	; (2a110 <system_gclk_gen_set_config+0x118>)
   2a0c8:	1dfb      	adds	r3, r7, #7
   2a0ca:	781b      	ldrb	r3, [r3, #0]
   2a0cc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a0ce:	46c0      	nop			; (mov r8, r8)
   2a0d0:	4b0d      	ldr	r3, [pc, #52]	; (2a108 <system_gclk_gen_set_config+0x110>)
   2a0d2:	4798      	blx	r3
   2a0d4:	1e03      	subs	r3, r0, #0
   2a0d6:	d1fb      	bne.n	2a0d0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a0d8:	4b0e      	ldr	r3, [pc, #56]	; (2a114 <system_gclk_gen_set_config+0x11c>)
   2a0da:	693a      	ldr	r2, [r7, #16]
   2a0dc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a0de:	46c0      	nop			; (mov r8, r8)
   2a0e0:	4b09      	ldr	r3, [pc, #36]	; (2a108 <system_gclk_gen_set_config+0x110>)
   2a0e2:	4798      	blx	r3
   2a0e4:	1e03      	subs	r3, r0, #0
   2a0e6:	d1fb      	bne.n	2a0e0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a0e8:	4b0a      	ldr	r3, [pc, #40]	; (2a114 <system_gclk_gen_set_config+0x11c>)
   2a0ea:	4a0a      	ldr	r2, [pc, #40]	; (2a114 <system_gclk_gen_set_config+0x11c>)
   2a0ec:	6851      	ldr	r1, [r2, #4]
   2a0ee:	2280      	movs	r2, #128	; 0x80
   2a0f0:	0252      	lsls	r2, r2, #9
   2a0f2:	4011      	ands	r1, r2
   2a0f4:	697a      	ldr	r2, [r7, #20]
   2a0f6:	430a      	orrs	r2, r1
   2a0f8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a0fa:	4b07      	ldr	r3, [pc, #28]	; (2a118 <system_gclk_gen_set_config+0x120>)
   2a0fc:	4798      	blx	r3
}
   2a0fe:	46c0      	nop			; (mov r8, r8)
   2a100:	46bd      	mov	sp, r7
   2a102:	b006      	add	sp, #24
   2a104:	bd80      	pop	{r7, pc}
   2a106:	46c0      	nop			; (mov r8, r8)
   2a108:	00029fa9 	.word	0x00029fa9
   2a10c:	00029f81 	.word	0x00029f81
   2a110:	40000c08 	.word	0x40000c08
   2a114:	40000c00 	.word	0x40000c00
   2a118:	00029f95 	.word	0x00029f95

0002a11c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a11c:	b580      	push	{r7, lr}
   2a11e:	b082      	sub	sp, #8
   2a120:	af00      	add	r7, sp, #0
   2a122:	0002      	movs	r2, r0
   2a124:	1dfb      	adds	r3, r7, #7
   2a126:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a128:	46c0      	nop			; (mov r8, r8)
   2a12a:	4b0e      	ldr	r3, [pc, #56]	; (2a164 <system_gclk_gen_enable+0x48>)
   2a12c:	4798      	blx	r3
   2a12e:	1e03      	subs	r3, r0, #0
   2a130:	d1fb      	bne.n	2a12a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a132:	4b0d      	ldr	r3, [pc, #52]	; (2a168 <system_gclk_gen_enable+0x4c>)
   2a134:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a136:	4a0d      	ldr	r2, [pc, #52]	; (2a16c <system_gclk_gen_enable+0x50>)
   2a138:	1dfb      	adds	r3, r7, #7
   2a13a:	781b      	ldrb	r3, [r3, #0]
   2a13c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a13e:	46c0      	nop			; (mov r8, r8)
   2a140:	4b08      	ldr	r3, [pc, #32]	; (2a164 <system_gclk_gen_enable+0x48>)
   2a142:	4798      	blx	r3
   2a144:	1e03      	subs	r3, r0, #0
   2a146:	d1fb      	bne.n	2a140 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a148:	4b09      	ldr	r3, [pc, #36]	; (2a170 <system_gclk_gen_enable+0x54>)
   2a14a:	4a09      	ldr	r2, [pc, #36]	; (2a170 <system_gclk_gen_enable+0x54>)
   2a14c:	6852      	ldr	r2, [r2, #4]
   2a14e:	2180      	movs	r1, #128	; 0x80
   2a150:	0249      	lsls	r1, r1, #9
   2a152:	430a      	orrs	r2, r1
   2a154:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a156:	4b07      	ldr	r3, [pc, #28]	; (2a174 <system_gclk_gen_enable+0x58>)
   2a158:	4798      	blx	r3
}
   2a15a:	46c0      	nop			; (mov r8, r8)
   2a15c:	46bd      	mov	sp, r7
   2a15e:	b002      	add	sp, #8
   2a160:	bd80      	pop	{r7, pc}
   2a162:	46c0      	nop			; (mov r8, r8)
   2a164:	00029fa9 	.word	0x00029fa9
   2a168:	00029f81 	.word	0x00029f81
   2a16c:	40000c04 	.word	0x40000c04
   2a170:	40000c00 	.word	0x40000c00
   2a174:	00029f95 	.word	0x00029f95

0002a178 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a178:	b580      	push	{r7, lr}
   2a17a:	b086      	sub	sp, #24
   2a17c:	af00      	add	r7, sp, #0
   2a17e:	0002      	movs	r2, r0
   2a180:	1dfb      	adds	r3, r7, #7
   2a182:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a184:	46c0      	nop			; (mov r8, r8)
   2a186:	4b2a      	ldr	r3, [pc, #168]	; (2a230 <system_gclk_gen_get_hz+0xb8>)
   2a188:	4798      	blx	r3
   2a18a:	1e03      	subs	r3, r0, #0
   2a18c:	d1fb      	bne.n	2a186 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a18e:	4b29      	ldr	r3, [pc, #164]	; (2a234 <system_gclk_gen_get_hz+0xbc>)
   2a190:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a192:	4a29      	ldr	r2, [pc, #164]	; (2a238 <system_gclk_gen_get_hz+0xc0>)
   2a194:	1dfb      	adds	r3, r7, #7
   2a196:	781b      	ldrb	r3, [r3, #0]
   2a198:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a19a:	46c0      	nop			; (mov r8, r8)
   2a19c:	4b24      	ldr	r3, [pc, #144]	; (2a230 <system_gclk_gen_get_hz+0xb8>)
   2a19e:	4798      	blx	r3
   2a1a0:	1e03      	subs	r3, r0, #0
   2a1a2:	d1fb      	bne.n	2a19c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a1a4:	4b25      	ldr	r3, [pc, #148]	; (2a23c <system_gclk_gen_get_hz+0xc4>)
   2a1a6:	685b      	ldr	r3, [r3, #4]
   2a1a8:	04db      	lsls	r3, r3, #19
   2a1aa:	0edb      	lsrs	r3, r3, #27
   2a1ac:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a1ae:	0018      	movs	r0, r3
   2a1b0:	4b23      	ldr	r3, [pc, #140]	; (2a240 <system_gclk_gen_get_hz+0xc8>)
   2a1b2:	4798      	blx	r3
   2a1b4:	0003      	movs	r3, r0
   2a1b6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a1b8:	4a1f      	ldr	r2, [pc, #124]	; (2a238 <system_gclk_gen_get_hz+0xc0>)
   2a1ba:	1dfb      	adds	r3, r7, #7
   2a1bc:	781b      	ldrb	r3, [r3, #0]
   2a1be:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a1c0:	4b1e      	ldr	r3, [pc, #120]	; (2a23c <system_gclk_gen_get_hz+0xc4>)
   2a1c2:	685b      	ldr	r3, [r3, #4]
   2a1c4:	02db      	lsls	r3, r3, #11
   2a1c6:	0fdb      	lsrs	r3, r3, #31
   2a1c8:	b2da      	uxtb	r2, r3
   2a1ca:	2313      	movs	r3, #19
   2a1cc:	18fb      	adds	r3, r7, r3
   2a1ce:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a1d0:	4a1c      	ldr	r2, [pc, #112]	; (2a244 <system_gclk_gen_get_hz+0xcc>)
   2a1d2:	1dfb      	adds	r3, r7, #7
   2a1d4:	781b      	ldrb	r3, [r3, #0]
   2a1d6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a1d8:	46c0      	nop			; (mov r8, r8)
   2a1da:	4b15      	ldr	r3, [pc, #84]	; (2a230 <system_gclk_gen_get_hz+0xb8>)
   2a1dc:	4798      	blx	r3
   2a1de:	1e03      	subs	r3, r0, #0
   2a1e0:	d1fb      	bne.n	2a1da <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a1e2:	4b16      	ldr	r3, [pc, #88]	; (2a23c <system_gclk_gen_get_hz+0xc4>)
   2a1e4:	689b      	ldr	r3, [r3, #8]
   2a1e6:	021b      	lsls	r3, r3, #8
   2a1e8:	0c1b      	lsrs	r3, r3, #16
   2a1ea:	b29b      	uxth	r3, r3
   2a1ec:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a1ee:	4b16      	ldr	r3, [pc, #88]	; (2a248 <system_gclk_gen_get_hz+0xd0>)
   2a1f0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a1f2:	2313      	movs	r3, #19
   2a1f4:	18fb      	adds	r3, r7, r3
   2a1f6:	781b      	ldrb	r3, [r3, #0]
   2a1f8:	2b00      	cmp	r3, #0
   2a1fa:	d109      	bne.n	2a210 <system_gclk_gen_get_hz+0x98>
   2a1fc:	68fb      	ldr	r3, [r7, #12]
   2a1fe:	2b01      	cmp	r3, #1
   2a200:	d906      	bls.n	2a210 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a202:	4b12      	ldr	r3, [pc, #72]	; (2a24c <system_gclk_gen_get_hz+0xd4>)
   2a204:	68f9      	ldr	r1, [r7, #12]
   2a206:	6978      	ldr	r0, [r7, #20]
   2a208:	4798      	blx	r3
   2a20a:	0003      	movs	r3, r0
   2a20c:	617b      	str	r3, [r7, #20]
   2a20e:	e00a      	b.n	2a226 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a210:	2313      	movs	r3, #19
   2a212:	18fb      	adds	r3, r7, r3
   2a214:	781b      	ldrb	r3, [r3, #0]
   2a216:	2b00      	cmp	r3, #0
   2a218:	d005      	beq.n	2a226 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a21a:	68fb      	ldr	r3, [r7, #12]
   2a21c:	3301      	adds	r3, #1
   2a21e:	697a      	ldr	r2, [r7, #20]
   2a220:	40da      	lsrs	r2, r3
   2a222:	0013      	movs	r3, r2
   2a224:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a226:	697b      	ldr	r3, [r7, #20]
}
   2a228:	0018      	movs	r0, r3
   2a22a:	46bd      	mov	sp, r7
   2a22c:	b006      	add	sp, #24
   2a22e:	bd80      	pop	{r7, pc}
   2a230:	00029fa9 	.word	0x00029fa9
   2a234:	00029f81 	.word	0x00029f81
   2a238:	40000c04 	.word	0x40000c04
   2a23c:	40000c00 	.word	0x40000c00
   2a240:	000298d9 	.word	0x000298d9
   2a244:	40000c08 	.word	0x40000c08
   2a248:	00029f95 	.word	0x00029f95
   2a24c:	00032d95 	.word	0x00032d95

0002a250 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a250:	b580      	push	{r7, lr}
   2a252:	b084      	sub	sp, #16
   2a254:	af00      	add	r7, sp, #0
   2a256:	0002      	movs	r2, r0
   2a258:	6039      	str	r1, [r7, #0]
   2a25a:	1dfb      	adds	r3, r7, #7
   2a25c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a25e:	1dfb      	adds	r3, r7, #7
   2a260:	781b      	ldrb	r3, [r3, #0]
   2a262:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a264:	683b      	ldr	r3, [r7, #0]
   2a266:	781b      	ldrb	r3, [r3, #0]
   2a268:	021b      	lsls	r3, r3, #8
   2a26a:	001a      	movs	r2, r3
   2a26c:	68fb      	ldr	r3, [r7, #12]
   2a26e:	4313      	orrs	r3, r2
   2a270:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a272:	1dfb      	adds	r3, r7, #7
   2a274:	781b      	ldrb	r3, [r3, #0]
   2a276:	0018      	movs	r0, r3
   2a278:	4b04      	ldr	r3, [pc, #16]	; (2a28c <system_gclk_chan_set_config+0x3c>)
   2a27a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2a27c:	4b04      	ldr	r3, [pc, #16]	; (2a290 <system_gclk_chan_set_config+0x40>)
   2a27e:	68fa      	ldr	r2, [r7, #12]
   2a280:	b292      	uxth	r2, r2
   2a282:	805a      	strh	r2, [r3, #2]
}
   2a284:	46c0      	nop			; (mov r8, r8)
   2a286:	46bd      	mov	sp, r7
   2a288:	b004      	add	sp, #16
   2a28a:	bd80      	pop	{r7, pc}
   2a28c:	0002a2dd 	.word	0x0002a2dd
   2a290:	40000c00 	.word	0x40000c00

0002a294 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2a294:	b580      	push	{r7, lr}
   2a296:	b082      	sub	sp, #8
   2a298:	af00      	add	r7, sp, #0
   2a29a:	0002      	movs	r2, r0
   2a29c:	1dfb      	adds	r3, r7, #7
   2a29e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a2a0:	4b0a      	ldr	r3, [pc, #40]	; (2a2cc <system_gclk_chan_enable+0x38>)
   2a2a2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a2a4:	4a0a      	ldr	r2, [pc, #40]	; (2a2d0 <system_gclk_chan_enable+0x3c>)
   2a2a6:	1dfb      	adds	r3, r7, #7
   2a2a8:	781b      	ldrb	r3, [r3, #0]
   2a2aa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2a2ac:	4909      	ldr	r1, [pc, #36]	; (2a2d4 <system_gclk_chan_enable+0x40>)
   2a2ae:	4b09      	ldr	r3, [pc, #36]	; (2a2d4 <system_gclk_chan_enable+0x40>)
   2a2b0:	885b      	ldrh	r3, [r3, #2]
   2a2b2:	b29b      	uxth	r3, r3
   2a2b4:	2280      	movs	r2, #128	; 0x80
   2a2b6:	01d2      	lsls	r2, r2, #7
   2a2b8:	4313      	orrs	r3, r2
   2a2ba:	b29b      	uxth	r3, r3
   2a2bc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2a2be:	4b06      	ldr	r3, [pc, #24]	; (2a2d8 <system_gclk_chan_enable+0x44>)
   2a2c0:	4798      	blx	r3
}
   2a2c2:	46c0      	nop			; (mov r8, r8)
   2a2c4:	46bd      	mov	sp, r7
   2a2c6:	b002      	add	sp, #8
   2a2c8:	bd80      	pop	{r7, pc}
   2a2ca:	46c0      	nop			; (mov r8, r8)
   2a2cc:	00029f81 	.word	0x00029f81
   2a2d0:	40000c02 	.word	0x40000c02
   2a2d4:	40000c00 	.word	0x40000c00
   2a2d8:	00029f95 	.word	0x00029f95

0002a2dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2a2dc:	b580      	push	{r7, lr}
   2a2de:	b084      	sub	sp, #16
   2a2e0:	af00      	add	r7, sp, #0
   2a2e2:	0002      	movs	r2, r0
   2a2e4:	1dfb      	adds	r3, r7, #7
   2a2e6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a2e8:	4b1c      	ldr	r3, [pc, #112]	; (2a35c <system_gclk_chan_disable+0x80>)
   2a2ea:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a2ec:	4a1c      	ldr	r2, [pc, #112]	; (2a360 <system_gclk_chan_disable+0x84>)
   2a2ee:	1dfb      	adds	r3, r7, #7
   2a2f0:	781b      	ldrb	r3, [r3, #0]
   2a2f2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2a2f4:	4b1b      	ldr	r3, [pc, #108]	; (2a364 <system_gclk_chan_disable+0x88>)
   2a2f6:	885b      	ldrh	r3, [r3, #2]
   2a2f8:	051b      	lsls	r3, r3, #20
   2a2fa:	0f1b      	lsrs	r3, r3, #28
   2a2fc:	b2db      	uxtb	r3, r3
   2a2fe:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2a300:	4a18      	ldr	r2, [pc, #96]	; (2a364 <system_gclk_chan_disable+0x88>)
   2a302:	8853      	ldrh	r3, [r2, #2]
   2a304:	4918      	ldr	r1, [pc, #96]	; (2a368 <system_gclk_chan_disable+0x8c>)
   2a306:	400b      	ands	r3, r1
   2a308:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2a30a:	4a16      	ldr	r2, [pc, #88]	; (2a364 <system_gclk_chan_disable+0x88>)
   2a30c:	4b15      	ldr	r3, [pc, #84]	; (2a364 <system_gclk_chan_disable+0x88>)
   2a30e:	885b      	ldrh	r3, [r3, #2]
   2a310:	b29b      	uxth	r3, r3
   2a312:	4916      	ldr	r1, [pc, #88]	; (2a36c <system_gclk_chan_disable+0x90>)
   2a314:	400b      	ands	r3, r1
   2a316:	b29b      	uxth	r3, r3
   2a318:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2a31a:	46c0      	nop			; (mov r8, r8)
   2a31c:	4b11      	ldr	r3, [pc, #68]	; (2a364 <system_gclk_chan_disable+0x88>)
   2a31e:	885b      	ldrh	r3, [r3, #2]
   2a320:	b29b      	uxth	r3, r3
   2a322:	001a      	movs	r2, r3
   2a324:	2380      	movs	r3, #128	; 0x80
   2a326:	01db      	lsls	r3, r3, #7
   2a328:	4013      	ands	r3, r2
   2a32a:	d1f7      	bne.n	2a31c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2a32c:	4a0d      	ldr	r2, [pc, #52]	; (2a364 <system_gclk_chan_disable+0x88>)
   2a32e:	68fb      	ldr	r3, [r7, #12]
   2a330:	b2db      	uxtb	r3, r3
   2a332:	1c19      	adds	r1, r3, #0
   2a334:	230f      	movs	r3, #15
   2a336:	400b      	ands	r3, r1
   2a338:	b2d9      	uxtb	r1, r3
   2a33a:	8853      	ldrh	r3, [r2, #2]
   2a33c:	1c08      	adds	r0, r1, #0
   2a33e:	210f      	movs	r1, #15
   2a340:	4001      	ands	r1, r0
   2a342:	0208      	lsls	r0, r1, #8
   2a344:	4908      	ldr	r1, [pc, #32]	; (2a368 <system_gclk_chan_disable+0x8c>)
   2a346:	400b      	ands	r3, r1
   2a348:	1c19      	adds	r1, r3, #0
   2a34a:	1c03      	adds	r3, r0, #0
   2a34c:	430b      	orrs	r3, r1
   2a34e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2a350:	4b07      	ldr	r3, [pc, #28]	; (2a370 <system_gclk_chan_disable+0x94>)
   2a352:	4798      	blx	r3
}
   2a354:	46c0      	nop			; (mov r8, r8)
   2a356:	46bd      	mov	sp, r7
   2a358:	b004      	add	sp, #16
   2a35a:	bd80      	pop	{r7, pc}
   2a35c:	00029f81 	.word	0x00029f81
   2a360:	40000c02 	.word	0x40000c02
   2a364:	40000c00 	.word	0x40000c00
   2a368:	fffff0ff 	.word	0xfffff0ff
   2a36c:	ffffbfff 	.word	0xffffbfff
   2a370:	00029f95 	.word	0x00029f95

0002a374 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2a374:	b580      	push	{r7, lr}
   2a376:	b084      	sub	sp, #16
   2a378:	af00      	add	r7, sp, #0
   2a37a:	0002      	movs	r2, r0
   2a37c:	1dfb      	adds	r3, r7, #7
   2a37e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2a380:	4b0d      	ldr	r3, [pc, #52]	; (2a3b8 <system_gclk_chan_get_hz+0x44>)
   2a382:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a384:	4a0d      	ldr	r2, [pc, #52]	; (2a3bc <system_gclk_chan_get_hz+0x48>)
   2a386:	1dfb      	adds	r3, r7, #7
   2a388:	781b      	ldrb	r3, [r3, #0]
   2a38a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2a38c:	4b0c      	ldr	r3, [pc, #48]	; (2a3c0 <system_gclk_chan_get_hz+0x4c>)
   2a38e:	885b      	ldrh	r3, [r3, #2]
   2a390:	051b      	lsls	r3, r3, #20
   2a392:	0f1b      	lsrs	r3, r3, #28
   2a394:	b2da      	uxtb	r2, r3
   2a396:	230f      	movs	r3, #15
   2a398:	18fb      	adds	r3, r7, r3
   2a39a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2a39c:	4b09      	ldr	r3, [pc, #36]	; (2a3c4 <system_gclk_chan_get_hz+0x50>)
   2a39e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2a3a0:	230f      	movs	r3, #15
   2a3a2:	18fb      	adds	r3, r7, r3
   2a3a4:	781b      	ldrb	r3, [r3, #0]
   2a3a6:	0018      	movs	r0, r3
   2a3a8:	4b07      	ldr	r3, [pc, #28]	; (2a3c8 <system_gclk_chan_get_hz+0x54>)
   2a3aa:	4798      	blx	r3
   2a3ac:	0003      	movs	r3, r0
}
   2a3ae:	0018      	movs	r0, r3
   2a3b0:	46bd      	mov	sp, r7
   2a3b2:	b004      	add	sp, #16
   2a3b4:	bd80      	pop	{r7, pc}
   2a3b6:	46c0      	nop			; (mov r8, r8)
   2a3b8:	00029f81 	.word	0x00029f81
   2a3bc:	40000c02 	.word	0x40000c02
   2a3c0:	40000c00 	.word	0x40000c00
   2a3c4:	00029f95 	.word	0x00029f95
   2a3c8:	0002a179 	.word	0x0002a179

0002a3cc <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2a3cc:	b580      	push	{r7, lr}
   2a3ce:	b084      	sub	sp, #16
   2a3d0:	af00      	add	r7, sp, #0
   2a3d2:	0002      	movs	r2, r0
   2a3d4:	1dfb      	adds	r3, r7, #7
   2a3d6:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2a3d8:	230f      	movs	r3, #15
   2a3da:	18fb      	adds	r3, r7, r3
   2a3dc:	2200      	movs	r2, #0
   2a3de:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2a3e0:	1dfb      	adds	r3, r7, #7
   2a3e2:	781b      	ldrb	r3, [r3, #0]
   2a3e4:	2b7f      	cmp	r3, #127	; 0x7f
   2a3e6:	d80b      	bhi.n	2a400 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2a3e8:	4a13      	ldr	r2, [pc, #76]	; (2a438 <system_interrupt_clear_pending+0x6c>)
   2a3ea:	1dfb      	adds	r3, r7, #7
   2a3ec:	781b      	ldrb	r3, [r3, #0]
   2a3ee:	b25b      	sxtb	r3, r3
   2a3f0:	2101      	movs	r1, #1
   2a3f2:	4099      	lsls	r1, r3
   2a3f4:	000b      	movs	r3, r1
   2a3f6:	0019      	movs	r1, r3
   2a3f8:	23c0      	movs	r3, #192	; 0xc0
   2a3fa:	005b      	lsls	r3, r3, #1
   2a3fc:	50d1      	str	r1, [r2, r3]
   2a3fe:	e014      	b.n	2a42a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2a400:	1dfb      	adds	r3, r7, #7
   2a402:	781b      	ldrb	r3, [r3, #0]
   2a404:	b25b      	sxtb	r3, r3
   2a406:	330e      	adds	r3, #14
   2a408:	d101      	bne.n	2a40e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2a40a:	2317      	movs	r3, #23
   2a40c:	e010      	b.n	2a430 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2a40e:	1dfb      	adds	r3, r7, #7
   2a410:	781b      	ldrb	r3, [r3, #0]
   2a412:	b25b      	sxtb	r3, r3
   2a414:	3301      	adds	r3, #1
   2a416:	d104      	bne.n	2a422 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2a418:	4b08      	ldr	r3, [pc, #32]	; (2a43c <system_interrupt_clear_pending+0x70>)
   2a41a:	2280      	movs	r2, #128	; 0x80
   2a41c:	0492      	lsls	r2, r2, #18
   2a41e:	605a      	str	r2, [r3, #4]
   2a420:	e003      	b.n	2a42a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2a422:	230f      	movs	r3, #15
   2a424:	18fb      	adds	r3, r7, r3
   2a426:	2217      	movs	r2, #23
   2a428:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2a42a:	230f      	movs	r3, #15
   2a42c:	18fb      	adds	r3, r7, r3
   2a42e:	781b      	ldrb	r3, [r3, #0]
}
   2a430:	0018      	movs	r0, r3
   2a432:	46bd      	mov	sp, r7
   2a434:	b004      	add	sp, #16
   2a436:	bd80      	pop	{r7, pc}
   2a438:	e000e100 	.word	0xe000e100
   2a43c:	e000ed00 	.word	0xe000ed00

0002a440 <system_pinmux_get_group_from_gpio_pin>:
{
   2a440:	b580      	push	{r7, lr}
   2a442:	b084      	sub	sp, #16
   2a444:	af00      	add	r7, sp, #0
   2a446:	0002      	movs	r2, r0
   2a448:	1dfb      	adds	r3, r7, #7
   2a44a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a44c:	230f      	movs	r3, #15
   2a44e:	18fb      	adds	r3, r7, r3
   2a450:	1dfa      	adds	r2, r7, #7
   2a452:	7812      	ldrb	r2, [r2, #0]
   2a454:	09d2      	lsrs	r2, r2, #7
   2a456:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a458:	230e      	movs	r3, #14
   2a45a:	18fb      	adds	r3, r7, r3
   2a45c:	1dfa      	adds	r2, r7, #7
   2a45e:	7812      	ldrb	r2, [r2, #0]
   2a460:	0952      	lsrs	r2, r2, #5
   2a462:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a464:	4b0d      	ldr	r3, [pc, #52]	; (2a49c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a466:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a468:	230f      	movs	r3, #15
   2a46a:	18fb      	adds	r3, r7, r3
   2a46c:	781b      	ldrb	r3, [r3, #0]
   2a46e:	2b00      	cmp	r3, #0
   2a470:	d10f      	bne.n	2a492 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a472:	230f      	movs	r3, #15
   2a474:	18fb      	adds	r3, r7, r3
   2a476:	781b      	ldrb	r3, [r3, #0]
   2a478:	009b      	lsls	r3, r3, #2
   2a47a:	2210      	movs	r2, #16
   2a47c:	4694      	mov	ip, r2
   2a47e:	44bc      	add	ip, r7
   2a480:	4463      	add	r3, ip
   2a482:	3b08      	subs	r3, #8
   2a484:	681a      	ldr	r2, [r3, #0]
   2a486:	230e      	movs	r3, #14
   2a488:	18fb      	adds	r3, r7, r3
   2a48a:	781b      	ldrb	r3, [r3, #0]
   2a48c:	01db      	lsls	r3, r3, #7
   2a48e:	18d3      	adds	r3, r2, r3
   2a490:	e000      	b.n	2a494 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a492:	2300      	movs	r3, #0
}
   2a494:	0018      	movs	r0, r3
   2a496:	46bd      	mov	sp, r7
   2a498:	b004      	add	sp, #16
   2a49a:	bd80      	pop	{r7, pc}
   2a49c:	41004400 	.word	0x41004400

0002a4a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2a4a0:	b580      	push	{r7, lr}
   2a4a2:	b088      	sub	sp, #32
   2a4a4:	af00      	add	r7, sp, #0
   2a4a6:	60f8      	str	r0, [r7, #12]
   2a4a8:	60b9      	str	r1, [r7, #8]
   2a4aa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2a4ac:	2300      	movs	r3, #0
   2a4ae:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2a4b0:	687b      	ldr	r3, [r7, #4]
   2a4b2:	78db      	ldrb	r3, [r3, #3]
   2a4b4:	2201      	movs	r2, #1
   2a4b6:	4053      	eors	r3, r2
   2a4b8:	b2db      	uxtb	r3, r3
   2a4ba:	2b00      	cmp	r3, #0
   2a4bc:	d035      	beq.n	2a52a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2a4be:	687b      	ldr	r3, [r7, #4]
   2a4c0:	781b      	ldrb	r3, [r3, #0]
   2a4c2:	2b80      	cmp	r3, #128	; 0x80
   2a4c4:	d00b      	beq.n	2a4de <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2a4c6:	69fb      	ldr	r3, [r7, #28]
   2a4c8:	2280      	movs	r2, #128	; 0x80
   2a4ca:	0252      	lsls	r2, r2, #9
   2a4cc:	4313      	orrs	r3, r2
   2a4ce:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2a4d0:	687b      	ldr	r3, [r7, #4]
   2a4d2:	781b      	ldrb	r3, [r3, #0]
   2a4d4:	061b      	lsls	r3, r3, #24
   2a4d6:	001a      	movs	r2, r3
   2a4d8:	69fb      	ldr	r3, [r7, #28]
   2a4da:	4313      	orrs	r3, r2
   2a4dc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a4de:	687b      	ldr	r3, [r7, #4]
   2a4e0:	785b      	ldrb	r3, [r3, #1]
   2a4e2:	2b00      	cmp	r3, #0
   2a4e4:	d003      	beq.n	2a4ee <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a4e6:	687b      	ldr	r3, [r7, #4]
   2a4e8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a4ea:	2b02      	cmp	r3, #2
   2a4ec:	d110      	bne.n	2a510 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2a4ee:	69fb      	ldr	r3, [r7, #28]
   2a4f0:	2280      	movs	r2, #128	; 0x80
   2a4f2:	0292      	lsls	r2, r2, #10
   2a4f4:	4313      	orrs	r3, r2
   2a4f6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2a4f8:	687b      	ldr	r3, [r7, #4]
   2a4fa:	789b      	ldrb	r3, [r3, #2]
   2a4fc:	2b00      	cmp	r3, #0
   2a4fe:	d004      	beq.n	2a50a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2a500:	69fb      	ldr	r3, [r7, #28]
   2a502:	2280      	movs	r2, #128	; 0x80
   2a504:	02d2      	lsls	r2, r2, #11
   2a506:	4313      	orrs	r3, r2
   2a508:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2a50a:	68fb      	ldr	r3, [r7, #12]
   2a50c:	68ba      	ldr	r2, [r7, #8]
   2a50e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a510:	687b      	ldr	r3, [r7, #4]
   2a512:	785b      	ldrb	r3, [r3, #1]
   2a514:	2b01      	cmp	r3, #1
   2a516:	d003      	beq.n	2a520 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a518:	687b      	ldr	r3, [r7, #4]
   2a51a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a51c:	2b02      	cmp	r3, #2
   2a51e:	d107      	bne.n	2a530 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2a520:	69fb      	ldr	r3, [r7, #28]
   2a522:	4a22      	ldr	r2, [pc, #136]	; (2a5ac <_system_pinmux_config+0x10c>)
   2a524:	4013      	ands	r3, r2
   2a526:	61fb      	str	r3, [r7, #28]
   2a528:	e002      	b.n	2a530 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2a52a:	68fb      	ldr	r3, [r7, #12]
   2a52c:	68ba      	ldr	r2, [r7, #8]
   2a52e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2a530:	68bb      	ldr	r3, [r7, #8]
   2a532:	041b      	lsls	r3, r3, #16
   2a534:	0c1b      	lsrs	r3, r3, #16
   2a536:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2a538:	68bb      	ldr	r3, [r7, #8]
   2a53a:	0c1b      	lsrs	r3, r3, #16
   2a53c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a53e:	69ba      	ldr	r2, [r7, #24]
   2a540:	69fb      	ldr	r3, [r7, #28]
   2a542:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2a544:	22a0      	movs	r2, #160	; 0xa0
   2a546:	05d2      	lsls	r2, r2, #23
   2a548:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a54a:	68fb      	ldr	r3, [r7, #12]
   2a54c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a54e:	697a      	ldr	r2, [r7, #20]
   2a550:	69fb      	ldr	r3, [r7, #28]
   2a552:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2a554:	22d0      	movs	r2, #208	; 0xd0
   2a556:	0612      	lsls	r2, r2, #24
   2a558:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a55a:	68fb      	ldr	r3, [r7, #12]
   2a55c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2a55e:	687b      	ldr	r3, [r7, #4]
   2a560:	78db      	ldrb	r3, [r3, #3]
   2a562:	2201      	movs	r2, #1
   2a564:	4053      	eors	r3, r2
   2a566:	b2db      	uxtb	r3, r3
   2a568:	2b00      	cmp	r3, #0
   2a56a:	d01a      	beq.n	2a5a2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2a56c:	69fa      	ldr	r2, [r7, #28]
   2a56e:	2380      	movs	r3, #128	; 0x80
   2a570:	02db      	lsls	r3, r3, #11
   2a572:	4013      	ands	r3, r2
   2a574:	d00a      	beq.n	2a58c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a576:	687b      	ldr	r3, [r7, #4]
   2a578:	789b      	ldrb	r3, [r3, #2]
   2a57a:	2b01      	cmp	r3, #1
   2a57c:	d103      	bne.n	2a586 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a57e:	68fb      	ldr	r3, [r7, #12]
   2a580:	68ba      	ldr	r2, [r7, #8]
   2a582:	619a      	str	r2, [r3, #24]
   2a584:	e002      	b.n	2a58c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a586:	68fb      	ldr	r3, [r7, #12]
   2a588:	68ba      	ldr	r2, [r7, #8]
   2a58a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a58c:	687b      	ldr	r3, [r7, #4]
   2a58e:	785b      	ldrb	r3, [r3, #1]
   2a590:	2b01      	cmp	r3, #1
   2a592:	d003      	beq.n	2a59c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a594:	687b      	ldr	r3, [r7, #4]
   2a596:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a598:	2b02      	cmp	r3, #2
   2a59a:	d102      	bne.n	2a5a2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a59c:	68fb      	ldr	r3, [r7, #12]
   2a59e:	68ba      	ldr	r2, [r7, #8]
   2a5a0:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a5a2:	46c0      	nop			; (mov r8, r8)
   2a5a4:	46bd      	mov	sp, r7
   2a5a6:	b008      	add	sp, #32
   2a5a8:	bd80      	pop	{r7, pc}
   2a5aa:	46c0      	nop			; (mov r8, r8)
   2a5ac:	fffbffff 	.word	0xfffbffff

0002a5b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a5b0:	b580      	push	{r7, lr}
   2a5b2:	b084      	sub	sp, #16
   2a5b4:	af00      	add	r7, sp, #0
   2a5b6:	0002      	movs	r2, r0
   2a5b8:	6039      	str	r1, [r7, #0]
   2a5ba:	1dfb      	adds	r3, r7, #7
   2a5bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a5be:	1dfb      	adds	r3, r7, #7
   2a5c0:	781b      	ldrb	r3, [r3, #0]
   2a5c2:	0018      	movs	r0, r3
   2a5c4:	4b0a      	ldr	r3, [pc, #40]	; (2a5f0 <system_pinmux_pin_set_config+0x40>)
   2a5c6:	4798      	blx	r3
   2a5c8:	0003      	movs	r3, r0
   2a5ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a5cc:	1dfb      	adds	r3, r7, #7
   2a5ce:	781b      	ldrb	r3, [r3, #0]
   2a5d0:	221f      	movs	r2, #31
   2a5d2:	4013      	ands	r3, r2
   2a5d4:	2201      	movs	r2, #1
   2a5d6:	409a      	lsls	r2, r3
   2a5d8:	0013      	movs	r3, r2
   2a5da:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a5dc:	683a      	ldr	r2, [r7, #0]
   2a5de:	68b9      	ldr	r1, [r7, #8]
   2a5e0:	68fb      	ldr	r3, [r7, #12]
   2a5e2:	0018      	movs	r0, r3
   2a5e4:	4b03      	ldr	r3, [pc, #12]	; (2a5f4 <system_pinmux_pin_set_config+0x44>)
   2a5e6:	4798      	blx	r3
}
   2a5e8:	46c0      	nop			; (mov r8, r8)
   2a5ea:	46bd      	mov	sp, r7
   2a5ec:	b004      	add	sp, #16
   2a5ee:	bd80      	pop	{r7, pc}
   2a5f0:	0002a441 	.word	0x0002a441
   2a5f4:	0002a4a1 	.word	0x0002a4a1

0002a5f8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a5f8:	b580      	push	{r7, lr}
   2a5fa:	af00      	add	r7, sp, #0
	return;
   2a5fc:	46c0      	nop			; (mov r8, r8)
}
   2a5fe:	46bd      	mov	sp, r7
   2a600:	bd80      	pop	{r7, pc}
	...

0002a604 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a604:	b580      	push	{r7, lr}
   2a606:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a608:	4b06      	ldr	r3, [pc, #24]	; (2a624 <system_init+0x20>)
   2a60a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a60c:	4b06      	ldr	r3, [pc, #24]	; (2a628 <system_init+0x24>)
   2a60e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a610:	4b06      	ldr	r3, [pc, #24]	; (2a62c <system_init+0x28>)
   2a612:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a614:	4b06      	ldr	r3, [pc, #24]	; (2a630 <system_init+0x2c>)
   2a616:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a618:	4b06      	ldr	r3, [pc, #24]	; (2a634 <system_init+0x30>)
   2a61a:	4798      	blx	r3
}
   2a61c:	46c0      	nop			; (mov r8, r8)
   2a61e:	46bd      	mov	sp, r7
   2a620:	bd80      	pop	{r7, pc}
   2a622:	46c0      	nop			; (mov r8, r8)
   2a624:	00029c85 	.word	0x00029c85
   2a628:	0002674d 	.word	0x0002674d
   2a62c:	00013011 	.word	0x00013011
   2a630:	00026b25 	.word	0x00026b25
   2a634:	0002a5f9 	.word	0x0002a5f9

0002a638 <system_gclk_chan_get_config_defaults>:
{
   2a638:	b580      	push	{r7, lr}
   2a63a:	b082      	sub	sp, #8
   2a63c:	af00      	add	r7, sp, #0
   2a63e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a640:	687b      	ldr	r3, [r7, #4]
   2a642:	2200      	movs	r2, #0
   2a644:	701a      	strb	r2, [r3, #0]
}
   2a646:	46c0      	nop			; (mov r8, r8)
   2a648:	46bd      	mov	sp, r7
   2a64a:	b002      	add	sp, #8
   2a64c:	bd80      	pop	{r7, pc}
	...

0002a650 <system_apb_clock_set_mask>:
{
   2a650:	b580      	push	{r7, lr}
   2a652:	b082      	sub	sp, #8
   2a654:	af00      	add	r7, sp, #0
   2a656:	0002      	movs	r2, r0
   2a658:	6039      	str	r1, [r7, #0]
   2a65a:	1dfb      	adds	r3, r7, #7
   2a65c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a65e:	1dfb      	adds	r3, r7, #7
   2a660:	781b      	ldrb	r3, [r3, #0]
   2a662:	2b01      	cmp	r3, #1
   2a664:	d00a      	beq.n	2a67c <system_apb_clock_set_mask+0x2c>
   2a666:	2b02      	cmp	r3, #2
   2a668:	d00f      	beq.n	2a68a <system_apb_clock_set_mask+0x3a>
   2a66a:	2b00      	cmp	r3, #0
   2a66c:	d114      	bne.n	2a698 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a66e:	4b0e      	ldr	r3, [pc, #56]	; (2a6a8 <system_apb_clock_set_mask+0x58>)
   2a670:	4a0d      	ldr	r2, [pc, #52]	; (2a6a8 <system_apb_clock_set_mask+0x58>)
   2a672:	6991      	ldr	r1, [r2, #24]
   2a674:	683a      	ldr	r2, [r7, #0]
   2a676:	430a      	orrs	r2, r1
   2a678:	619a      	str	r2, [r3, #24]
			break;
   2a67a:	e00f      	b.n	2a69c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a67c:	4b0a      	ldr	r3, [pc, #40]	; (2a6a8 <system_apb_clock_set_mask+0x58>)
   2a67e:	4a0a      	ldr	r2, [pc, #40]	; (2a6a8 <system_apb_clock_set_mask+0x58>)
   2a680:	69d1      	ldr	r1, [r2, #28]
   2a682:	683a      	ldr	r2, [r7, #0]
   2a684:	430a      	orrs	r2, r1
   2a686:	61da      	str	r2, [r3, #28]
			break;
   2a688:	e008      	b.n	2a69c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a68a:	4b07      	ldr	r3, [pc, #28]	; (2a6a8 <system_apb_clock_set_mask+0x58>)
   2a68c:	4a06      	ldr	r2, [pc, #24]	; (2a6a8 <system_apb_clock_set_mask+0x58>)
   2a68e:	6a11      	ldr	r1, [r2, #32]
   2a690:	683a      	ldr	r2, [r7, #0]
   2a692:	430a      	orrs	r2, r1
   2a694:	621a      	str	r2, [r3, #32]
			break;
   2a696:	e001      	b.n	2a69c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a698:	2317      	movs	r3, #23
   2a69a:	e000      	b.n	2a69e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a69c:	2300      	movs	r3, #0
}
   2a69e:	0018      	movs	r0, r3
   2a6a0:	46bd      	mov	sp, r7
   2a6a2:	b002      	add	sp, #8
   2a6a4:	bd80      	pop	{r7, pc}
   2a6a6:	46c0      	nop			; (mov r8, r8)
   2a6a8:	40000400 	.word	0x40000400

0002a6ac <system_pinmux_get_config_defaults>:
{
   2a6ac:	b580      	push	{r7, lr}
   2a6ae:	b082      	sub	sp, #8
   2a6b0:	af00      	add	r7, sp, #0
   2a6b2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a6b4:	687b      	ldr	r3, [r7, #4]
   2a6b6:	2280      	movs	r2, #128	; 0x80
   2a6b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a6ba:	687b      	ldr	r3, [r7, #4]
   2a6bc:	2200      	movs	r2, #0
   2a6be:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a6c0:	687b      	ldr	r3, [r7, #4]
   2a6c2:	2201      	movs	r2, #1
   2a6c4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a6c6:	687b      	ldr	r3, [r7, #4]
   2a6c8:	2200      	movs	r2, #0
   2a6ca:	70da      	strb	r2, [r3, #3]
}
   2a6cc:	46c0      	nop			; (mov r8, r8)
   2a6ce:	46bd      	mov	sp, r7
   2a6d0:	b002      	add	sp, #8
   2a6d2:	bd80      	pop	{r7, pc}

0002a6d4 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a6d4:	b580      	push	{r7, lr}
   2a6d6:	b084      	sub	sp, #16
   2a6d8:	af00      	add	r7, sp, #0
   2a6da:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a6dc:	2300      	movs	r3, #0
   2a6de:	60fb      	str	r3, [r7, #12]
   2a6e0:	e00c      	b.n	2a6fc <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a6e2:	4b0a      	ldr	r3, [pc, #40]	; (2a70c <_tcc_get_inst_index+0x38>)
   2a6e4:	68fa      	ldr	r2, [r7, #12]
   2a6e6:	0092      	lsls	r2, r2, #2
   2a6e8:	58d2      	ldr	r2, [r2, r3]
   2a6ea:	687b      	ldr	r3, [r7, #4]
   2a6ec:	429a      	cmp	r2, r3
   2a6ee:	d102      	bne.n	2a6f6 <_tcc_get_inst_index+0x22>
			return i;
   2a6f0:	68fb      	ldr	r3, [r7, #12]
   2a6f2:	b2db      	uxtb	r3, r3
   2a6f4:	e006      	b.n	2a704 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a6f6:	68fb      	ldr	r3, [r7, #12]
   2a6f8:	3301      	adds	r3, #1
   2a6fa:	60fb      	str	r3, [r7, #12]
   2a6fc:	68fb      	ldr	r3, [r7, #12]
   2a6fe:	2b02      	cmp	r3, #2
   2a700:	d9ef      	bls.n	2a6e2 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a702:	2300      	movs	r3, #0
}
   2a704:	0018      	movs	r0, r3
   2a706:	46bd      	mov	sp, r7
   2a708:	b004      	add	sp, #16
   2a70a:	bd80      	pop	{r7, pc}
   2a70c:	00039b34 	.word	0x00039b34

0002a710 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a710:	b590      	push	{r4, r7, lr}
   2a712:	b085      	sub	sp, #20
   2a714:	af00      	add	r7, sp, #0
   2a716:	6078      	str	r0, [r7, #4]
   2a718:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a71a:	230f      	movs	r3, #15
   2a71c:	18fc      	adds	r4, r7, r3
   2a71e:	683b      	ldr	r3, [r7, #0]
   2a720:	0018      	movs	r0, r3
   2a722:	4bad      	ldr	r3, [pc, #692]	; (2a9d8 <tcc_get_config_defaults+0x2c8>)
   2a724:	4798      	blx	r3
   2a726:	0003      	movs	r3, r0
   2a728:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a72a:	687b      	ldr	r3, [r7, #4]
   2a72c:	2200      	movs	r2, #0
   2a72e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a730:	230f      	movs	r3, #15
   2a732:	18fb      	adds	r3, r7, r3
   2a734:	781a      	ldrb	r2, [r3, #0]
   2a736:	4ba9      	ldr	r3, [pc, #676]	; (2a9dc <tcc_get_config_defaults+0x2cc>)
   2a738:	0092      	lsls	r2, r2, #2
   2a73a:	58d2      	ldr	r2, [r2, r3]
   2a73c:	687b      	ldr	r3, [r7, #4]
   2a73e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a740:	687b      	ldr	r3, [r7, #4]
   2a742:	2200      	movs	r2, #0
   2a744:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a746:	687b      	ldr	r3, [r7, #4]
   2a748:	2200      	movs	r2, #0
   2a74a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a74c:	687b      	ldr	r3, [r7, #4]
   2a74e:	2200      	movs	r2, #0
   2a750:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a752:	687b      	ldr	r3, [r7, #4]
   2a754:	2200      	movs	r2, #0
   2a756:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a758:	687b      	ldr	r3, [r7, #4]
   2a75a:	2200      	movs	r2, #0
   2a75c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a75e:	687b      	ldr	r3, [r7, #4]
   2a760:	2200      	movs	r2, #0
   2a762:	61da      	str	r2, [r3, #28]
   2a764:	687b      	ldr	r3, [r7, #4]
   2a766:	2200      	movs	r2, #0
   2a768:	621a      	str	r2, [r3, #32]
   2a76a:	687b      	ldr	r3, [r7, #4]
   2a76c:	2200      	movs	r2, #0
   2a76e:	625a      	str	r2, [r3, #36]	; 0x24
   2a770:	687b      	ldr	r3, [r7, #4]
   2a772:	2200      	movs	r2, #0
   2a774:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a776:	687b      	ldr	r3, [r7, #4]
   2a778:	2200      	movs	r2, #0
   2a77a:	751a      	strb	r2, [r3, #20]
   2a77c:	687b      	ldr	r3, [r7, #4]
   2a77e:	2200      	movs	r2, #0
   2a780:	755a      	strb	r2, [r3, #21]
   2a782:	687b      	ldr	r3, [r7, #4]
   2a784:	2200      	movs	r2, #0
   2a786:	759a      	strb	r2, [r3, #22]
   2a788:	687b      	ldr	r3, [r7, #4]
   2a78a:	2200      	movs	r2, #0
   2a78c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a78e:	687b      	ldr	r3, [r7, #4]
   2a790:	2200      	movs	r2, #0
   2a792:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a794:	687b      	ldr	r3, [r7, #4]
   2a796:	2200      	movs	r2, #0
   2a798:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a79a:	687b      	ldr	r3, [r7, #4]
   2a79c:	2200      	movs	r2, #0
   2a79e:	741a      	strb	r2, [r3, #16]
   2a7a0:	687b      	ldr	r3, [r7, #4]
   2a7a2:	2200      	movs	r2, #0
   2a7a4:	745a      	strb	r2, [r3, #17]
   2a7a6:	687b      	ldr	r3, [r7, #4]
   2a7a8:	2200      	movs	r2, #0
   2a7aa:	749a      	strb	r2, [r3, #18]
   2a7ac:	687b      	ldr	r3, [r7, #4]
   2a7ae:	2200      	movs	r2, #0
   2a7b0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a7b2:	687b      	ldr	r3, [r7, #4]
   2a7b4:	222c      	movs	r2, #44	; 0x2c
   2a7b6:	2100      	movs	r1, #0
   2a7b8:	5499      	strb	r1, [r3, r2]
   2a7ba:	687b      	ldr	r3, [r7, #4]
   2a7bc:	222d      	movs	r2, #45	; 0x2d
   2a7be:	2100      	movs	r1, #0
   2a7c0:	5499      	strb	r1, [r3, r2]
   2a7c2:	687b      	ldr	r3, [r7, #4]
   2a7c4:	222e      	movs	r2, #46	; 0x2e
   2a7c6:	2100      	movs	r1, #0
   2a7c8:	5499      	strb	r1, [r3, r2]
   2a7ca:	687b      	ldr	r3, [r7, #4]
   2a7cc:	222f      	movs	r2, #47	; 0x2f
   2a7ce:	2100      	movs	r1, #0
   2a7d0:	5499      	strb	r1, [r3, r2]
   2a7d2:	687b      	ldr	r3, [r7, #4]
   2a7d4:	2230      	movs	r2, #48	; 0x30
   2a7d6:	2100      	movs	r1, #0
   2a7d8:	5499      	strb	r1, [r3, r2]
   2a7da:	687b      	ldr	r3, [r7, #4]
   2a7dc:	2231      	movs	r2, #49	; 0x31
   2a7de:	2100      	movs	r1, #0
   2a7e0:	5499      	strb	r1, [r3, r2]
   2a7e2:	687b      	ldr	r3, [r7, #4]
   2a7e4:	2232      	movs	r2, #50	; 0x32
   2a7e6:	2100      	movs	r1, #0
   2a7e8:	5499      	strb	r1, [r3, r2]
   2a7ea:	687b      	ldr	r3, [r7, #4]
   2a7ec:	2233      	movs	r2, #51	; 0x33
   2a7ee:	2100      	movs	r1, #0
   2a7f0:	5499      	strb	r1, [r3, r2]
   2a7f2:	687b      	ldr	r3, [r7, #4]
   2a7f4:	2234      	movs	r2, #52	; 0x34
   2a7f6:	2100      	movs	r1, #0
   2a7f8:	5499      	strb	r1, [r3, r2]
   2a7fa:	687b      	ldr	r3, [r7, #4]
   2a7fc:	2235      	movs	r2, #53	; 0x35
   2a7fe:	2100      	movs	r1, #0
   2a800:	5499      	strb	r1, [r3, r2]
   2a802:	687b      	ldr	r3, [r7, #4]
   2a804:	2236      	movs	r2, #54	; 0x36
   2a806:	2100      	movs	r1, #0
   2a808:	5499      	strb	r1, [r3, r2]
   2a80a:	687b      	ldr	r3, [r7, #4]
   2a80c:	2237      	movs	r2, #55	; 0x37
   2a80e:	2100      	movs	r1, #0
   2a810:	5499      	strb	r1, [r3, r2]
   2a812:	687b      	ldr	r3, [r7, #4]
   2a814:	2238      	movs	r2, #56	; 0x38
   2a816:	2100      	movs	r1, #0
   2a818:	5499      	strb	r1, [r3, r2]
   2a81a:	687b      	ldr	r3, [r7, #4]
   2a81c:	2239      	movs	r2, #57	; 0x39
   2a81e:	2100      	movs	r1, #0
   2a820:	5499      	strb	r1, [r3, r2]
   2a822:	687b      	ldr	r3, [r7, #4]
   2a824:	223a      	movs	r2, #58	; 0x3a
   2a826:	2100      	movs	r1, #0
   2a828:	5499      	strb	r1, [r3, r2]
   2a82a:	687b      	ldr	r3, [r7, #4]
   2a82c:	223b      	movs	r2, #59	; 0x3b
   2a82e:	2100      	movs	r1, #0
   2a830:	5499      	strb	r1, [r3, r2]
   2a832:	687b      	ldr	r3, [r7, #4]
   2a834:	223c      	movs	r2, #60	; 0x3c
   2a836:	2100      	movs	r1, #0
   2a838:	5499      	strb	r1, [r3, r2]
   2a83a:	687b      	ldr	r3, [r7, #4]
   2a83c:	223d      	movs	r2, #61	; 0x3d
   2a83e:	2100      	movs	r1, #0
   2a840:	5499      	strb	r1, [r3, r2]
   2a842:	687b      	ldr	r3, [r7, #4]
   2a844:	223e      	movs	r2, #62	; 0x3e
   2a846:	2100      	movs	r1, #0
   2a848:	5499      	strb	r1, [r3, r2]
   2a84a:	687b      	ldr	r3, [r7, #4]
   2a84c:	223f      	movs	r2, #63	; 0x3f
   2a84e:	2100      	movs	r1, #0
   2a850:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a852:	687b      	ldr	r3, [r7, #4]
   2a854:	2240      	movs	r2, #64	; 0x40
   2a856:	2100      	movs	r1, #0
   2a858:	5499      	strb	r1, [r3, r2]
   2a85a:	687b      	ldr	r3, [r7, #4]
   2a85c:	2241      	movs	r2, #65	; 0x41
   2a85e:	2100      	movs	r1, #0
   2a860:	5499      	strb	r1, [r3, r2]
   2a862:	687b      	ldr	r3, [r7, #4]
   2a864:	2242      	movs	r2, #66	; 0x42
   2a866:	2100      	movs	r1, #0
   2a868:	5499      	strb	r1, [r3, r2]
   2a86a:	687b      	ldr	r3, [r7, #4]
   2a86c:	2243      	movs	r2, #67	; 0x43
   2a86e:	2100      	movs	r1, #0
   2a870:	5499      	strb	r1, [r3, r2]
   2a872:	687b      	ldr	r3, [r7, #4]
   2a874:	2244      	movs	r2, #68	; 0x44
   2a876:	2100      	movs	r1, #0
   2a878:	5499      	strb	r1, [r3, r2]
   2a87a:	687b      	ldr	r3, [r7, #4]
   2a87c:	2245      	movs	r2, #69	; 0x45
   2a87e:	2100      	movs	r1, #0
   2a880:	5499      	strb	r1, [r3, r2]
   2a882:	687b      	ldr	r3, [r7, #4]
   2a884:	2246      	movs	r2, #70	; 0x46
   2a886:	2100      	movs	r1, #0
   2a888:	5499      	strb	r1, [r3, r2]
   2a88a:	687b      	ldr	r3, [r7, #4]
   2a88c:	2247      	movs	r2, #71	; 0x47
   2a88e:	2100      	movs	r1, #0
   2a890:	5499      	strb	r1, [r3, r2]
   2a892:	687b      	ldr	r3, [r7, #4]
   2a894:	2248      	movs	r2, #72	; 0x48
   2a896:	2100      	movs	r1, #0
   2a898:	5499      	strb	r1, [r3, r2]
   2a89a:	687b      	ldr	r3, [r7, #4]
   2a89c:	2249      	movs	r2, #73	; 0x49
   2a89e:	2100      	movs	r1, #0
   2a8a0:	5499      	strb	r1, [r3, r2]
   2a8a2:	687b      	ldr	r3, [r7, #4]
   2a8a4:	224a      	movs	r2, #74	; 0x4a
   2a8a6:	2100      	movs	r1, #0
   2a8a8:	5499      	strb	r1, [r3, r2]
   2a8aa:	687b      	ldr	r3, [r7, #4]
   2a8ac:	224b      	movs	r2, #75	; 0x4b
   2a8ae:	2100      	movs	r1, #0
   2a8b0:	5499      	strb	r1, [r3, r2]
   2a8b2:	687b      	ldr	r3, [r7, #4]
   2a8b4:	224c      	movs	r2, #76	; 0x4c
   2a8b6:	2100      	movs	r1, #0
   2a8b8:	5499      	strb	r1, [r3, r2]
   2a8ba:	687b      	ldr	r3, [r7, #4]
   2a8bc:	224d      	movs	r2, #77	; 0x4d
   2a8be:	2100      	movs	r1, #0
   2a8c0:	5499      	strb	r1, [r3, r2]
   2a8c2:	687b      	ldr	r3, [r7, #4]
   2a8c4:	224e      	movs	r2, #78	; 0x4e
   2a8c6:	2100      	movs	r1, #0
   2a8c8:	5499      	strb	r1, [r3, r2]
   2a8ca:	687b      	ldr	r3, [r7, #4]
   2a8cc:	224f      	movs	r2, #79	; 0x4f
   2a8ce:	2100      	movs	r1, #0
   2a8d0:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a8d2:	687b      	ldr	r3, [r7, #4]
   2a8d4:	2250      	movs	r2, #80	; 0x50
   2a8d6:	2100      	movs	r1, #0
   2a8d8:	5499      	strb	r1, [r3, r2]
   2a8da:	687b      	ldr	r3, [r7, #4]
   2a8dc:	2251      	movs	r2, #81	; 0x51
   2a8de:	2100      	movs	r1, #0
   2a8e0:	5499      	strb	r1, [r3, r2]
   2a8e2:	687b      	ldr	r3, [r7, #4]
   2a8e4:	2252      	movs	r2, #82	; 0x52
   2a8e6:	2100      	movs	r1, #0
   2a8e8:	5499      	strb	r1, [r3, r2]
   2a8ea:	687b      	ldr	r3, [r7, #4]
   2a8ec:	2253      	movs	r2, #83	; 0x53
   2a8ee:	2100      	movs	r1, #0
   2a8f0:	5499      	strb	r1, [r3, r2]
   2a8f2:	687b      	ldr	r3, [r7, #4]
   2a8f4:	2254      	movs	r2, #84	; 0x54
   2a8f6:	2100      	movs	r1, #0
   2a8f8:	5499      	strb	r1, [r3, r2]
   2a8fa:	687b      	ldr	r3, [r7, #4]
   2a8fc:	2255      	movs	r2, #85	; 0x55
   2a8fe:	2100      	movs	r1, #0
   2a900:	5499      	strb	r1, [r3, r2]
   2a902:	687b      	ldr	r3, [r7, #4]
   2a904:	2256      	movs	r2, #86	; 0x56
   2a906:	2100      	movs	r1, #0
   2a908:	5499      	strb	r1, [r3, r2]
   2a90a:	687b      	ldr	r3, [r7, #4]
   2a90c:	2257      	movs	r2, #87	; 0x57
   2a90e:	2100      	movs	r1, #0
   2a910:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a912:	687b      	ldr	r3, [r7, #4]
   2a914:	2298      	movs	r2, #152	; 0x98
   2a916:	2100      	movs	r1, #0
   2a918:	5499      	strb	r1, [r3, r2]
   2a91a:	687b      	ldr	r3, [r7, #4]
   2a91c:	2200      	movs	r2, #0
   2a91e:	659a      	str	r2, [r3, #88]	; 0x58
   2a920:	687b      	ldr	r3, [r7, #4]
   2a922:	2200      	movs	r2, #0
   2a924:	679a      	str	r2, [r3, #120]	; 0x78
   2a926:	687b      	ldr	r3, [r7, #4]
   2a928:	2299      	movs	r2, #153	; 0x99
   2a92a:	2100      	movs	r1, #0
   2a92c:	5499      	strb	r1, [r3, r2]
   2a92e:	687b      	ldr	r3, [r7, #4]
   2a930:	2200      	movs	r2, #0
   2a932:	65da      	str	r2, [r3, #92]	; 0x5c
   2a934:	687b      	ldr	r3, [r7, #4]
   2a936:	2200      	movs	r2, #0
   2a938:	67da      	str	r2, [r3, #124]	; 0x7c
   2a93a:	687b      	ldr	r3, [r7, #4]
   2a93c:	229a      	movs	r2, #154	; 0x9a
   2a93e:	2100      	movs	r1, #0
   2a940:	5499      	strb	r1, [r3, r2]
   2a942:	687b      	ldr	r3, [r7, #4]
   2a944:	2200      	movs	r2, #0
   2a946:	661a      	str	r2, [r3, #96]	; 0x60
   2a948:	687b      	ldr	r3, [r7, #4]
   2a94a:	2280      	movs	r2, #128	; 0x80
   2a94c:	2100      	movs	r1, #0
   2a94e:	5099      	str	r1, [r3, r2]
   2a950:	687b      	ldr	r3, [r7, #4]
   2a952:	229b      	movs	r2, #155	; 0x9b
   2a954:	2100      	movs	r1, #0
   2a956:	5499      	strb	r1, [r3, r2]
   2a958:	687b      	ldr	r3, [r7, #4]
   2a95a:	2200      	movs	r2, #0
   2a95c:	665a      	str	r2, [r3, #100]	; 0x64
   2a95e:	687b      	ldr	r3, [r7, #4]
   2a960:	2284      	movs	r2, #132	; 0x84
   2a962:	2100      	movs	r1, #0
   2a964:	5099      	str	r1, [r3, r2]
   2a966:	687b      	ldr	r3, [r7, #4]
   2a968:	229c      	movs	r2, #156	; 0x9c
   2a96a:	2100      	movs	r1, #0
   2a96c:	5499      	strb	r1, [r3, r2]
   2a96e:	687b      	ldr	r3, [r7, #4]
   2a970:	2200      	movs	r2, #0
   2a972:	669a      	str	r2, [r3, #104]	; 0x68
   2a974:	687b      	ldr	r3, [r7, #4]
   2a976:	2288      	movs	r2, #136	; 0x88
   2a978:	2100      	movs	r1, #0
   2a97a:	5099      	str	r1, [r3, r2]
   2a97c:	687b      	ldr	r3, [r7, #4]
   2a97e:	229d      	movs	r2, #157	; 0x9d
   2a980:	2100      	movs	r1, #0
   2a982:	5499      	strb	r1, [r3, r2]
   2a984:	687b      	ldr	r3, [r7, #4]
   2a986:	2200      	movs	r2, #0
   2a988:	66da      	str	r2, [r3, #108]	; 0x6c
   2a98a:	687b      	ldr	r3, [r7, #4]
   2a98c:	228c      	movs	r2, #140	; 0x8c
   2a98e:	2100      	movs	r1, #0
   2a990:	5099      	str	r1, [r3, r2]
   2a992:	687b      	ldr	r3, [r7, #4]
   2a994:	229e      	movs	r2, #158	; 0x9e
   2a996:	2100      	movs	r1, #0
   2a998:	5499      	strb	r1, [r3, r2]
   2a99a:	687b      	ldr	r3, [r7, #4]
   2a99c:	2200      	movs	r2, #0
   2a99e:	671a      	str	r2, [r3, #112]	; 0x70
   2a9a0:	687b      	ldr	r3, [r7, #4]
   2a9a2:	2290      	movs	r2, #144	; 0x90
   2a9a4:	2100      	movs	r1, #0
   2a9a6:	5099      	str	r1, [r3, r2]
   2a9a8:	687b      	ldr	r3, [r7, #4]
   2a9aa:	229f      	movs	r2, #159	; 0x9f
   2a9ac:	2100      	movs	r1, #0
   2a9ae:	5499      	strb	r1, [r3, r2]
   2a9b0:	687b      	ldr	r3, [r7, #4]
   2a9b2:	2200      	movs	r2, #0
   2a9b4:	675a      	str	r2, [r3, #116]	; 0x74
   2a9b6:	687b      	ldr	r3, [r7, #4]
   2a9b8:	2294      	movs	r2, #148	; 0x94
   2a9ba:	2100      	movs	r1, #0
   2a9bc:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a9be:	687b      	ldr	r3, [r7, #4]
   2a9c0:	22a0      	movs	r2, #160	; 0xa0
   2a9c2:	2101      	movs	r1, #1
   2a9c4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a9c6:	687b      	ldr	r3, [r7, #4]
   2a9c8:	22a1      	movs	r2, #161	; 0xa1
   2a9ca:	2100      	movs	r1, #0
   2a9cc:	5499      	strb	r1, [r3, r2]
}
   2a9ce:	46c0      	nop			; (mov r8, r8)
   2a9d0:	46bd      	mov	sp, r7
   2a9d2:	b005      	add	sp, #20
   2a9d4:	bd90      	pop	{r4, r7, pc}
   2a9d6:	46c0      	nop			; (mov r8, r8)
   2a9d8:	0002a6d5 	.word	0x0002a6d5
   2a9dc:	00039b50 	.word	0x00039b50

0002a9e0 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a9e0:	b580      	push	{r7, lr}
   2a9e2:	b086      	sub	sp, #24
   2a9e4:	af00      	add	r7, sp, #0
   2a9e6:	60b9      	str	r1, [r7, #8]
   2a9e8:	607a      	str	r2, [r7, #4]
   2a9ea:	230f      	movs	r3, #15
   2a9ec:	18fb      	adds	r3, r7, r3
   2a9ee:	1c02      	adds	r2, r0, #0
   2a9f0:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a9f2:	2300      	movs	r3, #0
   2a9f4:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a9f6:	2300      	movs	r3, #0
   2a9f8:	613b      	str	r3, [r7, #16]
   2a9fa:	e01d      	b.n	2aa38 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a9fc:	68ba      	ldr	r2, [r7, #8]
   2a9fe:	693b      	ldr	r3, [r7, #16]
   2aa00:	18d3      	adds	r3, r2, r3
   2aa02:	3310      	adds	r3, #16
   2aa04:	781b      	ldrb	r3, [r3, #0]
   2aa06:	2b01      	cmp	r3, #1
   2aa08:	d113      	bne.n	2aa32 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2aa0a:	230f      	movs	r3, #15
   2aa0c:	18fb      	adds	r3, r7, r3
   2aa0e:	781b      	ldrb	r3, [r3, #0]
   2aa10:	4a1b      	ldr	r2, [pc, #108]	; (2aa80 <_tcc_build_ctrla+0xa0>)
   2aa12:	5cd3      	ldrb	r3, [r2, r3]
   2aa14:	001a      	movs	r2, r3
   2aa16:	693b      	ldr	r3, [r7, #16]
   2aa18:	429a      	cmp	r2, r3
   2aa1a:	da01      	bge.n	2aa20 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2aa1c:	2317      	movs	r3, #23
   2aa1e:	e02a      	b.n	2aa76 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2aa20:	2380      	movs	r3, #128	; 0x80
   2aa22:	045a      	lsls	r2, r3, #17
   2aa24:	693b      	ldr	r3, [r7, #16]
   2aa26:	409a      	lsls	r2, r3
   2aa28:	0013      	movs	r3, r2
   2aa2a:	001a      	movs	r2, r3
   2aa2c:	697b      	ldr	r3, [r7, #20]
   2aa2e:	4313      	orrs	r3, r2
   2aa30:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2aa32:	693b      	ldr	r3, [r7, #16]
   2aa34:	3301      	adds	r3, #1
   2aa36:	613b      	str	r3, [r7, #16]
   2aa38:	693b      	ldr	r3, [r7, #16]
   2aa3a:	2b03      	cmp	r3, #3
   2aa3c:	ddde      	ble.n	2a9fc <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2aa3e:	68bb      	ldr	r3, [r7, #8]
   2aa40:	22a1      	movs	r2, #161	; 0xa1
   2aa42:	5c9b      	ldrb	r3, [r3, r2]
   2aa44:	2b00      	cmp	r3, #0
   2aa46:	d004      	beq.n	2aa52 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2aa48:	697b      	ldr	r3, [r7, #20]
   2aa4a:	2280      	movs	r2, #128	; 0x80
   2aa4c:	0112      	lsls	r2, r2, #4
   2aa4e:	4313      	orrs	r3, r2
   2aa50:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2aa52:	68bb      	ldr	r3, [r7, #8]
   2aa54:	7b1b      	ldrb	r3, [r3, #12]
   2aa56:	031b      	lsls	r3, r3, #12
   2aa58:	001a      	movs	r2, r3
   2aa5a:	697b      	ldr	r3, [r7, #20]
   2aa5c:	4313      	orrs	r3, r2
   2aa5e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2aa60:	68bb      	ldr	r3, [r7, #8]
   2aa62:	7adb      	ldrb	r3, [r3, #11]
   2aa64:	021b      	lsls	r3, r3, #8
   2aa66:	001a      	movs	r2, r3
   2aa68:	697b      	ldr	r3, [r7, #20]
   2aa6a:	4313      	orrs	r3, r2
   2aa6c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2aa6e:	687b      	ldr	r3, [r7, #4]
   2aa70:	697a      	ldr	r2, [r7, #20]
   2aa72:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2aa74:	2300      	movs	r3, #0
}
   2aa76:	0018      	movs	r0, r3
   2aa78:	46bd      	mov	sp, r7
   2aa7a:	b006      	add	sp, #24
   2aa7c:	bd80      	pop	{r7, pc}
   2aa7e:	46c0      	nop			; (mov r8, r8)
   2aa80:	00039b5c 	.word	0x00039b5c

0002aa84 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2aa84:	b580      	push	{r7, lr}
   2aa86:	b086      	sub	sp, #24
   2aa88:	af00      	add	r7, sp, #0
   2aa8a:	60b9      	str	r1, [r7, #8]
   2aa8c:	607a      	str	r2, [r7, #4]
   2aa8e:	230f      	movs	r3, #15
   2aa90:	18fb      	adds	r3, r7, r3
   2aa92:	1c02      	adds	r2, r0, #0
   2aa94:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2aa96:	2317      	movs	r3, #23
   2aa98:	18fb      	adds	r3, r7, r3
   2aa9a:	2200      	movs	r2, #0
   2aa9c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2aa9e:	68bb      	ldr	r3, [r7, #8]
   2aaa0:	7a1b      	ldrb	r3, [r3, #8]
   2aaa2:	2b00      	cmp	r3, #0
   2aaa4:	d007      	beq.n	2aab6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2aaa6:	2317      	movs	r3, #23
   2aaa8:	18fb      	adds	r3, r7, r3
   2aaaa:	2217      	movs	r2, #23
   2aaac:	18ba      	adds	r2, r7, r2
   2aaae:	7812      	ldrb	r2, [r2, #0]
   2aab0:	2104      	movs	r1, #4
   2aab2:	430a      	orrs	r2, r1
   2aab4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2aab6:	68bb      	ldr	r3, [r7, #8]
   2aab8:	7a5b      	ldrb	r3, [r3, #9]
   2aaba:	2b01      	cmp	r3, #1
   2aabc:	d107      	bne.n	2aace <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2aabe:	2317      	movs	r3, #23
   2aac0:	18fb      	adds	r3, r7, r3
   2aac2:	2217      	movs	r2, #23
   2aac4:	18ba      	adds	r2, r7, r2
   2aac6:	7812      	ldrb	r2, [r2, #0]
   2aac8:	2101      	movs	r1, #1
   2aaca:	430a      	orrs	r2, r1
   2aacc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2aace:	687b      	ldr	r3, [r7, #4]
   2aad0:	2217      	movs	r2, #23
   2aad2:	18ba      	adds	r2, r7, r2
   2aad4:	7812      	ldrb	r2, [r2, #0]
   2aad6:	701a      	strb	r2, [r3, #0]
}
   2aad8:	46c0      	nop			; (mov r8, r8)
   2aada:	46bd      	mov	sp, r7
   2aadc:	b006      	add	sp, #24
   2aade:	bd80      	pop	{r7, pc}

0002aae0 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2aae0:	b580      	push	{r7, lr}
   2aae2:	b088      	sub	sp, #32
   2aae4:	af00      	add	r7, sp, #0
   2aae6:	60b9      	str	r1, [r7, #8]
   2aae8:	607a      	str	r2, [r7, #4]
   2aaea:	230f      	movs	r3, #15
   2aaec:	18fb      	adds	r3, r7, r3
   2aaee:	1c02      	adds	r2, r0, #0
   2aaf0:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2aaf2:	230f      	movs	r3, #15
   2aaf4:	18fb      	adds	r3, r7, r3
   2aaf6:	781a      	ldrb	r2, [r3, #0]
   2aaf8:	231b      	movs	r3, #27
   2aafa:	18fb      	adds	r3, r7, r3
   2aafc:	493e      	ldr	r1, [pc, #248]	; (2abf8 <_tcc_build_faults+0x118>)
   2aafe:	5c8a      	ldrb	r2, [r1, r2]
   2ab00:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2ab02:	2300      	movs	r3, #0
   2ab04:	61fb      	str	r3, [r7, #28]
   2ab06:	e06e      	b.n	2abe6 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2ab08:	69fa      	ldr	r2, [r7, #28]
   2ab0a:	0013      	movs	r3, r2
   2ab0c:	009b      	lsls	r3, r3, #2
   2ab0e:	189b      	adds	r3, r3, r2
   2ab10:	005b      	lsls	r3, r3, #1
   2ab12:	3328      	adds	r3, #40	; 0x28
   2ab14:	68ba      	ldr	r2, [r7, #8]
   2ab16:	18d3      	adds	r3, r2, r3
   2ab18:	3304      	adds	r3, #4
   2ab1a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2ab1c:	697b      	ldr	r3, [r7, #20]
   2ab1e:	7a5b      	ldrb	r3, [r3, #9]
   2ab20:	221b      	movs	r2, #27
   2ab22:	18ba      	adds	r2, r7, r2
   2ab24:	7812      	ldrb	r2, [r2, #0]
   2ab26:	429a      	cmp	r2, r3
   2ab28:	d801      	bhi.n	2ab2e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2ab2a:	2317      	movs	r3, #23
   2ab2c:	e05f      	b.n	2abee <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2ab2e:	697b      	ldr	r3, [r7, #20]
   2ab30:	781b      	ldrb	r3, [r3, #0]
   2ab32:	2b0f      	cmp	r3, #15
   2ab34:	d901      	bls.n	2ab3a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2ab36:	2317      	movs	r3, #23
   2ab38:	e059      	b.n	2abee <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2ab3a:	697b      	ldr	r3, [r7, #20]
   2ab3c:	781b      	ldrb	r3, [r3, #0]
   2ab3e:	061b      	lsls	r3, r3, #24
   2ab40:	001a      	movs	r2, r3
   2ab42:	23f0      	movs	r3, #240	; 0xf0
   2ab44:	051b      	lsls	r3, r3, #20
   2ab46:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2ab48:	697b      	ldr	r3, [r7, #20]
   2ab4a:	785b      	ldrb	r3, [r3, #1]
   2ab4c:	041b      	lsls	r3, r3, #16
   2ab4e:	0019      	movs	r1, r3
   2ab50:	23ff      	movs	r3, #255	; 0xff
   2ab52:	041b      	lsls	r3, r3, #16
   2ab54:	400b      	ands	r3, r1
   2ab56:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2ab58:	697b      	ldr	r3, [r7, #20]
   2ab5a:	789b      	ldrb	r3, [r3, #2]
   2ab5c:	2b00      	cmp	r3, #0
   2ab5e:	d001      	beq.n	2ab64 <_tcc_build_faults+0x84>
   2ab60:	2380      	movs	r3, #128	; 0x80
   2ab62:	e000      	b.n	2ab66 <_tcc_build_faults+0x86>
   2ab64:	2300      	movs	r3, #0
   2ab66:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2ab68:	697b      	ldr	r3, [r7, #20]
   2ab6a:	78db      	ldrb	r3, [r3, #3]
   2ab6c:	2b00      	cmp	r3, #0
   2ab6e:	d001      	beq.n	2ab74 <_tcc_build_faults+0x94>
   2ab70:	2308      	movs	r3, #8
   2ab72:	e000      	b.n	2ab76 <_tcc_build_faults+0x96>
   2ab74:	2300      	movs	r3, #0
   2ab76:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2ab78:	697b      	ldr	r3, [r7, #20]
   2ab7a:	791b      	ldrb	r3, [r3, #4]
   2ab7c:	2b00      	cmp	r3, #0
   2ab7e:	d001      	beq.n	2ab84 <_tcc_build_faults+0xa4>
   2ab80:	2310      	movs	r3, #16
   2ab82:	e000      	b.n	2ab86 <_tcc_build_faults+0xa6>
   2ab84:	2300      	movs	r3, #0
   2ab86:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2ab88:	697b      	ldr	r3, [r7, #20]
   2ab8a:	795b      	ldrb	r3, [r3, #5]
   2ab8c:	0019      	movs	r1, r3
   2ab8e:	2303      	movs	r3, #3
   2ab90:	400b      	ands	r3, r1
   2ab92:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2ab94:	697b      	ldr	r3, [r7, #20]
   2ab96:	799b      	ldrb	r3, [r3, #6]
   2ab98:	015b      	lsls	r3, r3, #5
   2ab9a:	0019      	movs	r1, r3
   2ab9c:	2360      	movs	r3, #96	; 0x60
   2ab9e:	400b      	ands	r3, r1
   2aba0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2aba2:	697b      	ldr	r3, [r7, #20]
   2aba4:	79db      	ldrb	r3, [r3, #7]
   2aba6:	021b      	lsls	r3, r3, #8
   2aba8:	0019      	movs	r1, r3
   2abaa:	23c0      	movs	r3, #192	; 0xc0
   2abac:	009b      	lsls	r3, r3, #2
   2abae:	400b      	ands	r3, r1
   2abb0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2abb2:	697b      	ldr	r3, [r7, #20]
   2abb4:	7a1b      	ldrb	r3, [r3, #8]
   2abb6:	031b      	lsls	r3, r3, #12
   2abb8:	0019      	movs	r1, r3
   2abba:	23e0      	movs	r3, #224	; 0xe0
   2abbc:	01db      	lsls	r3, r3, #7
   2abbe:	400b      	ands	r3, r1
   2abc0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2abc2:	697b      	ldr	r3, [r7, #20]
   2abc4:	7a5b      	ldrb	r3, [r3, #9]
   2abc6:	029b      	lsls	r3, r3, #10
   2abc8:	0019      	movs	r1, r3
   2abca:	23c0      	movs	r3, #192	; 0xc0
   2abcc:	011b      	lsls	r3, r3, #4
   2abce:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2abd0:	4313      	orrs	r3, r2
   2abd2:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2abd4:	69fb      	ldr	r3, [r7, #28]
   2abd6:	009b      	lsls	r3, r3, #2
   2abd8:	687a      	ldr	r2, [r7, #4]
   2abda:	18d3      	adds	r3, r2, r3
   2abdc:	693a      	ldr	r2, [r7, #16]
   2abde:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2abe0:	69fb      	ldr	r3, [r7, #28]
   2abe2:	3301      	adds	r3, #1
   2abe4:	61fb      	str	r3, [r7, #28]
   2abe6:	69fb      	ldr	r3, [r7, #28]
   2abe8:	2b01      	cmp	r3, #1
   2abea:	dd8d      	ble.n	2ab08 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2abec:	2300      	movs	r3, #0
}
   2abee:	0018      	movs	r0, r3
   2abf0:	46bd      	mov	sp, r7
   2abf2:	b008      	add	sp, #32
   2abf4:	bd80      	pop	{r7, pc}
   2abf6:	46c0      	nop			; (mov r8, r8)
   2abf8:	00039b5c 	.word	0x00039b5c

0002abfc <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2abfc:	b580      	push	{r7, lr}
   2abfe:	b088      	sub	sp, #32
   2ac00:	af00      	add	r7, sp, #0
   2ac02:	60b9      	str	r1, [r7, #8]
   2ac04:	607a      	str	r2, [r7, #4]
   2ac06:	230f      	movs	r3, #15
   2ac08:	18fb      	adds	r3, r7, r3
   2ac0a:	1c02      	adds	r2, r0, #0
   2ac0c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2ac0e:	230f      	movs	r3, #15
   2ac10:	18fb      	adds	r3, r7, r3
   2ac12:	781a      	ldrb	r2, [r3, #0]
   2ac14:	2317      	movs	r3, #23
   2ac16:	18fb      	adds	r3, r7, r3
   2ac18:	492d      	ldr	r1, [pc, #180]	; (2acd0 <_tcc_build_drvctrl+0xd4>)
   2ac1a:	5c8a      	ldrb	r2, [r1, r2]
   2ac1c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2ac1e:	2300      	movs	r3, #0
   2ac20:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ac22:	2300      	movs	r3, #0
   2ac24:	61fb      	str	r3, [r7, #28]
   2ac26:	e048      	b.n	2acba <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2ac28:	68ba      	ldr	r2, [r7, #8]
   2ac2a:	2150      	movs	r1, #80	; 0x50
   2ac2c:	69fb      	ldr	r3, [r7, #28]
   2ac2e:	18d3      	adds	r3, r2, r3
   2ac30:	185b      	adds	r3, r3, r1
   2ac32:	781b      	ldrb	r3, [r3, #0]
   2ac34:	2b00      	cmp	r3, #0
   2ac36:	d010      	beq.n	2ac5a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2ac38:	2317      	movs	r3, #23
   2ac3a:	18fb      	adds	r3, r7, r3
   2ac3c:	781a      	ldrb	r2, [r3, #0]
   2ac3e:	69fb      	ldr	r3, [r7, #28]
   2ac40:	429a      	cmp	r2, r3
   2ac42:	d801      	bhi.n	2ac48 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2ac44:	2317      	movs	r3, #23
   2ac46:	e03f      	b.n	2acc8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2ac48:	2380      	movs	r3, #128	; 0x80
   2ac4a:	025a      	lsls	r2, r3, #9
   2ac4c:	69fb      	ldr	r3, [r7, #28]
   2ac4e:	409a      	lsls	r2, r3
   2ac50:	0013      	movs	r3, r2
   2ac52:	001a      	movs	r2, r3
   2ac54:	69bb      	ldr	r3, [r7, #24]
   2ac56:	4313      	orrs	r3, r2
   2ac58:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2ac5a:	68ba      	ldr	r2, [r7, #8]
   2ac5c:	69fb      	ldr	r3, [r7, #28]
   2ac5e:	331c      	adds	r3, #28
   2ac60:	005b      	lsls	r3, r3, #1
   2ac62:	18d3      	adds	r3, r2, r3
   2ac64:	3309      	adds	r3, #9
   2ac66:	781b      	ldrb	r3, [r3, #0]
   2ac68:	2b00      	cmp	r3, #0
   2ac6a:	d023      	beq.n	2acb4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2ac6c:	2317      	movs	r3, #23
   2ac6e:	18fb      	adds	r3, r7, r3
   2ac70:	781a      	ldrb	r2, [r3, #0]
   2ac72:	69fb      	ldr	r3, [r7, #28]
   2ac74:	429a      	cmp	r2, r3
   2ac76:	d801      	bhi.n	2ac7c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2ac78:	2317      	movs	r3, #23
   2ac7a:	e025      	b.n	2acc8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2ac7c:	68ba      	ldr	r2, [r7, #8]
   2ac7e:	69fb      	ldr	r3, [r7, #28]
   2ac80:	331c      	adds	r3, #28
   2ac82:	005b      	lsls	r3, r3, #1
   2ac84:	18d3      	adds	r3, r2, r3
   2ac86:	3309      	adds	r3, #9
   2ac88:	781b      	ldrb	r3, [r3, #0]
   2ac8a:	2b02      	cmp	r3, #2
   2ac8c:	d10a      	bne.n	2aca4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2ac8e:	2302      	movs	r3, #2
   2ac90:	33ff      	adds	r3, #255	; 0xff
   2ac92:	001a      	movs	r2, r3
   2ac94:	69fb      	ldr	r3, [r7, #28]
   2ac96:	409a      	lsls	r2, r3
   2ac98:	0013      	movs	r3, r2
   2ac9a:	001a      	movs	r2, r3
   2ac9c:	69bb      	ldr	r3, [r7, #24]
   2ac9e:	4313      	orrs	r3, r2
   2aca0:	61bb      	str	r3, [r7, #24]
   2aca2:	e007      	b.n	2acb4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2aca4:	2201      	movs	r2, #1
   2aca6:	69fb      	ldr	r3, [r7, #28]
   2aca8:	409a      	lsls	r2, r3
   2acaa:	0013      	movs	r3, r2
   2acac:	001a      	movs	r2, r3
   2acae:	69bb      	ldr	r3, [r7, #24]
   2acb0:	4313      	orrs	r3, r2
   2acb2:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2acb4:	69fb      	ldr	r3, [r7, #28]
   2acb6:	3301      	adds	r3, #1
   2acb8:	61fb      	str	r3, [r7, #28]
   2acba:	69fb      	ldr	r3, [r7, #28]
   2acbc:	2b07      	cmp	r3, #7
   2acbe:	d9b3      	bls.n	2ac28 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2acc0:	687b      	ldr	r3, [r7, #4]
   2acc2:	69ba      	ldr	r2, [r7, #24]
   2acc4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2acc6:	2300      	movs	r3, #0
}
   2acc8:	0018      	movs	r0, r3
   2acca:	46bd      	mov	sp, r7
   2accc:	b008      	add	sp, #32
   2acce:	bd80      	pop	{r7, pc}
   2acd0:	00039b60 	.word	0x00039b60

0002acd4 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2acd4:	b580      	push	{r7, lr}
   2acd6:	b088      	sub	sp, #32
   2acd8:	af00      	add	r7, sp, #0
   2acda:	60b9      	str	r1, [r7, #8]
   2acdc:	607a      	str	r2, [r7, #4]
   2acde:	230f      	movs	r3, #15
   2ace0:	18fb      	adds	r3, r7, r3
   2ace2:	1c02      	adds	r2, r0, #0
   2ace4:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2ace6:	230f      	movs	r3, #15
   2ace8:	18fb      	adds	r3, r7, r3
   2acea:	781a      	ldrb	r2, [r3, #0]
   2acec:	2317      	movs	r3, #23
   2acee:	18fb      	adds	r3, r7, r3
   2acf0:	491d      	ldr	r1, [pc, #116]	; (2ad68 <_tcc_build_waves+0x94>)
   2acf2:	5c8a      	ldrb	r2, [r1, r2]
   2acf4:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2acf6:	68bb      	ldr	r3, [r7, #8]
   2acf8:	3310      	adds	r3, #16
   2acfa:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2acfc:	693b      	ldr	r3, [r7, #16]
   2acfe:	7a5b      	ldrb	r3, [r3, #9]
   2ad00:	011b      	lsls	r3, r3, #4
   2ad02:	001a      	movs	r2, r3
   2ad04:	2330      	movs	r3, #48	; 0x30
   2ad06:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2ad08:	693b      	ldr	r3, [r7, #16]
   2ad0a:	7a1b      	ldrb	r3, [r3, #8]
   2ad0c:	0019      	movs	r1, r3
   2ad0e:	2307      	movs	r3, #7
   2ad10:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2ad12:	4313      	orrs	r3, r2
   2ad14:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2ad16:	2300      	movs	r3, #0
   2ad18:	61fb      	str	r3, [r7, #28]
   2ad1a:	e01a      	b.n	2ad52 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2ad1c:	693a      	ldr	r2, [r7, #16]
   2ad1e:	69fb      	ldr	r3, [r7, #28]
   2ad20:	18d3      	adds	r3, r2, r3
   2ad22:	3304      	adds	r3, #4
   2ad24:	781b      	ldrb	r3, [r3, #0]
   2ad26:	2b00      	cmp	r3, #0
   2ad28:	d010      	beq.n	2ad4c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2ad2a:	2317      	movs	r3, #23
   2ad2c:	18fb      	adds	r3, r7, r3
   2ad2e:	781a      	ldrb	r2, [r3, #0]
   2ad30:	69fb      	ldr	r3, [r7, #28]
   2ad32:	429a      	cmp	r2, r3
   2ad34:	dc01      	bgt.n	2ad3a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2ad36:	2317      	movs	r3, #23
   2ad38:	e012      	b.n	2ad60 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2ad3a:	2380      	movs	r3, #128	; 0x80
   2ad3c:	025a      	lsls	r2, r3, #9
   2ad3e:	69fb      	ldr	r3, [r7, #28]
   2ad40:	409a      	lsls	r2, r3
   2ad42:	0013      	movs	r3, r2
   2ad44:	001a      	movs	r2, r3
   2ad46:	69bb      	ldr	r3, [r7, #24]
   2ad48:	4313      	orrs	r3, r2
   2ad4a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2ad4c:	69fb      	ldr	r3, [r7, #28]
   2ad4e:	3301      	adds	r3, #1
   2ad50:	61fb      	str	r3, [r7, #28]
   2ad52:	69fb      	ldr	r3, [r7, #28]
   2ad54:	2b03      	cmp	r3, #3
   2ad56:	dde1      	ble.n	2ad1c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2ad58:	687b      	ldr	r3, [r7, #4]
   2ad5a:	69ba      	ldr	r2, [r7, #24]
   2ad5c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2ad5e:	2300      	movs	r3, #0
}
   2ad60:	0018      	movs	r0, r3
   2ad62:	46bd      	mov	sp, r7
   2ad64:	b008      	add	sp, #32
   2ad66:	bd80      	pop	{r7, pc}
   2ad68:	00039b5c 	.word	0x00039b5c

0002ad6c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2ad6c:	b590      	push	{r4, r7, lr}
   2ad6e:	b091      	sub	sp, #68	; 0x44
   2ad70:	af00      	add	r7, sp, #0
   2ad72:	60f8      	str	r0, [r7, #12]
   2ad74:	60b9      	str	r1, [r7, #8]
   2ad76:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2ad78:	233b      	movs	r3, #59	; 0x3b
   2ad7a:	18fc      	adds	r4, r7, r3
   2ad7c:	68bb      	ldr	r3, [r7, #8]
   2ad7e:	0018      	movs	r0, r3
   2ad80:	4bc4      	ldr	r3, [pc, #784]	; (2b094 <tcc_init+0x328>)
   2ad82:	4798      	blx	r3
   2ad84:	0003      	movs	r3, r0
   2ad86:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2ad88:	233b      	movs	r3, #59	; 0x3b
   2ad8a:	18fb      	adds	r3, r7, r3
   2ad8c:	781a      	ldrb	r2, [r3, #0]
   2ad8e:	4bc2      	ldr	r3, [pc, #776]	; (2b098 <tcc_init+0x32c>)
   2ad90:	0092      	lsls	r2, r2, #2
   2ad92:	58d3      	ldr	r3, [r2, r3]
   2ad94:	0019      	movs	r1, r3
   2ad96:	2002      	movs	r0, #2
   2ad98:	4bc0      	ldr	r3, [pc, #768]	; (2b09c <tcc_init+0x330>)
   2ad9a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2ad9c:	68bb      	ldr	r3, [r7, #8]
   2ad9e:	681b      	ldr	r3, [r3, #0]
   2ada0:	2202      	movs	r2, #2
   2ada2:	4013      	ands	r3, r2
   2ada4:	d001      	beq.n	2adaa <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2ada6:	231c      	movs	r3, #28
   2ada8:	e1be      	b.n	2b128 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2adaa:	68bb      	ldr	r3, [r7, #8]
   2adac:	681b      	ldr	r3, [r3, #0]
   2adae:	2201      	movs	r2, #1
   2adb0:	4013      	ands	r3, r2
   2adb2:	d001      	beq.n	2adb8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2adb4:	231c      	movs	r3, #28
   2adb6:	e1b7      	b.n	2b128 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2adb8:	233b      	movs	r3, #59	; 0x3b
   2adba:	18fb      	adds	r3, r7, r3
   2adbc:	781a      	ldrb	r2, [r3, #0]
   2adbe:	4bb8      	ldr	r3, [pc, #736]	; (2b0a0 <tcc_init+0x334>)
   2adc0:	0092      	lsls	r2, r2, #2
   2adc2:	58d3      	ldr	r3, [r2, r3]
   2adc4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2adc6:	687b      	ldr	r3, [r7, #4]
   2adc8:	681a      	ldr	r2, [r3, #0]
   2adca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2adcc:	429a      	cmp	r2, r3
   2adce:	d804      	bhi.n	2adda <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2add0:	687b      	ldr	r3, [r7, #4]
   2add2:	685a      	ldr	r2, [r3, #4]
   2add4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2add6:	429a      	cmp	r2, r3
   2add8:	d901      	bls.n	2adde <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2adda:	2317      	movs	r3, #23
   2addc:	e1a4      	b.n	2b128 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2adde:	2300      	movs	r3, #0
   2ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ade2:	e00e      	b.n	2ae02 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2ade4:	687a      	ldr	r2, [r7, #4]
   2ade6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ade8:	3306      	adds	r3, #6
   2adea:	009b      	lsls	r3, r3, #2
   2adec:	18d3      	adds	r3, r2, r3
   2adee:	3304      	adds	r3, #4
   2adf0:	681a      	ldr	r2, [r3, #0]
   2adf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2adf4:	429a      	cmp	r2, r3
   2adf6:	d901      	bls.n	2adfc <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2adf8:	2317      	movs	r3, #23
   2adfa:	e195      	b.n	2b128 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2adfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2adfe:	3301      	adds	r3, #1
   2ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ae02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ae04:	2b03      	cmp	r3, #3
   2ae06:	dded      	ble.n	2ade4 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ae08:	2300      	movs	r3, #0
   2ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ae0c:	e019      	b.n	2ae42 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2ae0e:	687a      	ldr	r2, [r7, #4]
   2ae10:	2198      	movs	r1, #152	; 0x98
   2ae12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ae14:	18d3      	adds	r3, r2, r3
   2ae16:	185b      	adds	r3, r3, r1
   2ae18:	781b      	ldrb	r3, [r3, #0]
   2ae1a:	2201      	movs	r2, #1
   2ae1c:	4053      	eors	r3, r2
   2ae1e:	b2db      	uxtb	r3, r3
   2ae20:	2b00      	cmp	r3, #0
   2ae22:	d10a      	bne.n	2ae3a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2ae24:	233b      	movs	r3, #59	; 0x3b
   2ae26:	18fb      	adds	r3, r7, r3
   2ae28:	781b      	ldrb	r3, [r3, #0]
   2ae2a:	4a9e      	ldr	r2, [pc, #632]	; (2b0a4 <tcc_init+0x338>)
   2ae2c:	5cd3      	ldrb	r3, [r2, r3]
   2ae2e:	001a      	movs	r2, r3
   2ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ae32:	429a      	cmp	r2, r3
   2ae34:	dc02      	bgt.n	2ae3c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2ae36:	2317      	movs	r3, #23
   2ae38:	e176      	b.n	2b128 <tcc_init+0x3bc>
			continue;
   2ae3a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ae3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ae3e:	3301      	adds	r3, #1
   2ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ae42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ae44:	2b07      	cmp	r3, #7
   2ae46:	dde2      	ble.n	2ae0e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2ae48:	2300      	movs	r3, #0
   2ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2ae4c:	2333      	movs	r3, #51	; 0x33
   2ae4e:	18fc      	adds	r4, r7, r3
   2ae50:	232c      	movs	r3, #44	; 0x2c
   2ae52:	18fa      	adds	r2, r7, r3
   2ae54:	6879      	ldr	r1, [r7, #4]
   2ae56:	233b      	movs	r3, #59	; 0x3b
   2ae58:	18fb      	adds	r3, r7, r3
   2ae5a:	781b      	ldrb	r3, [r3, #0]
   2ae5c:	0018      	movs	r0, r3
   2ae5e:	4b92      	ldr	r3, [pc, #584]	; (2b0a8 <tcc_init+0x33c>)
   2ae60:	4798      	blx	r3
   2ae62:	0003      	movs	r3, r0
   2ae64:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ae66:	2333      	movs	r3, #51	; 0x33
   2ae68:	18fb      	adds	r3, r7, r3
   2ae6a:	781b      	ldrb	r3, [r3, #0]
   2ae6c:	2b00      	cmp	r3, #0
   2ae6e:	d003      	beq.n	2ae78 <tcc_init+0x10c>
		return status;
   2ae70:	2333      	movs	r3, #51	; 0x33
   2ae72:	18fb      	adds	r3, r7, r3
   2ae74:	781b      	ldrb	r3, [r3, #0]
   2ae76:	e157      	b.n	2b128 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2ae78:	232b      	movs	r3, #43	; 0x2b
   2ae7a:	18fa      	adds	r2, r7, r3
   2ae7c:	6879      	ldr	r1, [r7, #4]
   2ae7e:	233b      	movs	r3, #59	; 0x3b
   2ae80:	18fb      	adds	r3, r7, r3
   2ae82:	781b      	ldrb	r3, [r3, #0]
   2ae84:	0018      	movs	r0, r3
   2ae86:	4b89      	ldr	r3, [pc, #548]	; (2b0ac <tcc_init+0x340>)
   2ae88:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2ae8a:	2333      	movs	r3, #51	; 0x33
   2ae8c:	18fc      	adds	r4, r7, r3
   2ae8e:	2320      	movs	r3, #32
   2ae90:	18fa      	adds	r2, r7, r3
   2ae92:	6879      	ldr	r1, [r7, #4]
   2ae94:	233b      	movs	r3, #59	; 0x3b
   2ae96:	18fb      	adds	r3, r7, r3
   2ae98:	781b      	ldrb	r3, [r3, #0]
   2ae9a:	0018      	movs	r0, r3
   2ae9c:	4b84      	ldr	r3, [pc, #528]	; (2b0b0 <tcc_init+0x344>)
   2ae9e:	4798      	blx	r3
   2aea0:	0003      	movs	r3, r0
   2aea2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2aea4:	2333      	movs	r3, #51	; 0x33
   2aea6:	18fb      	adds	r3, r7, r3
   2aea8:	781b      	ldrb	r3, [r3, #0]
   2aeaa:	2b00      	cmp	r3, #0
   2aeac:	d003      	beq.n	2aeb6 <tcc_init+0x14a>
		return status;
   2aeae:	2333      	movs	r3, #51	; 0x33
   2aeb0:	18fb      	adds	r3, r7, r3
   2aeb2:	781b      	ldrb	r3, [r3, #0]
   2aeb4:	e138      	b.n	2b128 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2aeb6:	2300      	movs	r3, #0
   2aeb8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2aeba:	2333      	movs	r3, #51	; 0x33
   2aebc:	18fc      	adds	r4, r7, r3
   2aebe:	231c      	movs	r3, #28
   2aec0:	18fa      	adds	r2, r7, r3
   2aec2:	6879      	ldr	r1, [r7, #4]
   2aec4:	233b      	movs	r3, #59	; 0x3b
   2aec6:	18fb      	adds	r3, r7, r3
   2aec8:	781b      	ldrb	r3, [r3, #0]
   2aeca:	0018      	movs	r0, r3
   2aecc:	4b79      	ldr	r3, [pc, #484]	; (2b0b4 <tcc_init+0x348>)
   2aece:	4798      	blx	r3
   2aed0:	0003      	movs	r3, r0
   2aed2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2aed4:	2333      	movs	r3, #51	; 0x33
   2aed6:	18fb      	adds	r3, r7, r3
   2aed8:	781b      	ldrb	r3, [r3, #0]
   2aeda:	2b00      	cmp	r3, #0
   2aedc:	d003      	beq.n	2aee6 <tcc_init+0x17a>
		return status;
   2aede:	2333      	movs	r3, #51	; 0x33
   2aee0:	18fb      	adds	r3, r7, r3
   2aee2:	781b      	ldrb	r3, [r3, #0]
   2aee4:	e120      	b.n	2b128 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2aee6:	2333      	movs	r3, #51	; 0x33
   2aee8:	18fc      	adds	r4, r7, r3
   2aeea:	2318      	movs	r3, #24
   2aeec:	18fa      	adds	r2, r7, r3
   2aeee:	6879      	ldr	r1, [r7, #4]
   2aef0:	233b      	movs	r3, #59	; 0x3b
   2aef2:	18fb      	adds	r3, r7, r3
   2aef4:	781b      	ldrb	r3, [r3, #0]
   2aef6:	0018      	movs	r0, r3
   2aef8:	4b6f      	ldr	r3, [pc, #444]	; (2b0b8 <tcc_init+0x34c>)
   2aefa:	4798      	blx	r3
   2aefc:	0003      	movs	r3, r0
   2aefe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2af00:	2333      	movs	r3, #51	; 0x33
   2af02:	18fb      	adds	r3, r7, r3
   2af04:	781b      	ldrb	r3, [r3, #0]
   2af06:	2b00      	cmp	r3, #0
   2af08:	d003      	beq.n	2af12 <tcc_init+0x1a6>
		return status;
   2af0a:	2333      	movs	r3, #51	; 0x33
   2af0c:	18fb      	adds	r3, r7, r3
   2af0e:	781b      	ldrb	r3, [r3, #0]
   2af10:	e10a      	b.n	2b128 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2af12:	2300      	movs	r3, #0
   2af14:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af16:	e009      	b.n	2af2c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2af18:	68fa      	ldr	r2, [r7, #12]
   2af1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2af1c:	009b      	lsls	r3, r3, #2
   2af1e:	18d3      	adds	r3, r2, r3
   2af20:	3304      	adds	r3, #4
   2af22:	2200      	movs	r2, #0
   2af24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2af26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2af28:	3301      	adds	r3, #1
   2af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2af2e:	2b0b      	cmp	r3, #11
   2af30:	ddf2      	ble.n	2af18 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2af32:	68fb      	ldr	r3, [r7, #12]
   2af34:	2200      	movs	r2, #0
   2af36:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2af38:	68fb      	ldr	r3, [r7, #12]
   2af3a:	2200      	movs	r2, #0
   2af3c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2af3e:	233b      	movs	r3, #59	; 0x3b
   2af40:	18fb      	adds	r3, r7, r3
   2af42:	781a      	ldrb	r2, [r3, #0]
   2af44:	4b5d      	ldr	r3, [pc, #372]	; (2b0bc <tcc_init+0x350>)
   2af46:	0092      	lsls	r2, r2, #2
   2af48:	68f9      	ldr	r1, [r7, #12]
   2af4a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2af4c:	68fb      	ldr	r3, [r7, #12]
   2af4e:	68ba      	ldr	r2, [r7, #8]
   2af50:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2af52:	687b      	ldr	r3, [r7, #4]
   2af54:	22a0      	movs	r2, #160	; 0xa0
   2af56:	5c99      	ldrb	r1, [r3, r2]
   2af58:	68fb      	ldr	r3, [r7, #12]
   2af5a:	223c      	movs	r2, #60	; 0x3c
   2af5c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2af5e:	2314      	movs	r3, #20
   2af60:	18fb      	adds	r3, r7, r3
   2af62:	0018      	movs	r0, r3
   2af64:	4b56      	ldr	r3, [pc, #344]	; (2b0c0 <tcc_init+0x354>)
   2af66:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2af68:	687b      	ldr	r3, [r7, #4]
   2af6a:	7a9a      	ldrb	r2, [r3, #10]
   2af6c:	2314      	movs	r3, #20
   2af6e:	18fb      	adds	r3, r7, r3
   2af70:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2af72:	233b      	movs	r3, #59	; 0x3b
   2af74:	18fb      	adds	r3, r7, r3
   2af76:	781b      	ldrb	r3, [r3, #0]
   2af78:	4a52      	ldr	r2, [pc, #328]	; (2b0c4 <tcc_init+0x358>)
   2af7a:	5cd3      	ldrb	r3, [r2, r3]
   2af7c:	2214      	movs	r2, #20
   2af7e:	18ba      	adds	r2, r7, r2
   2af80:	0011      	movs	r1, r2
   2af82:	0018      	movs	r0, r3
   2af84:	4b50      	ldr	r3, [pc, #320]	; (2b0c8 <tcc_init+0x35c>)
   2af86:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2af88:	233b      	movs	r3, #59	; 0x3b
   2af8a:	18fb      	adds	r3, r7, r3
   2af8c:	781b      	ldrb	r3, [r3, #0]
   2af8e:	4a4d      	ldr	r2, [pc, #308]	; (2b0c4 <tcc_init+0x358>)
   2af90:	5cd3      	ldrb	r3, [r2, r3]
   2af92:	0018      	movs	r0, r3
   2af94:	4b4d      	ldr	r3, [pc, #308]	; (2b0cc <tcc_init+0x360>)
   2af96:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2af98:	2300      	movs	r3, #0
   2af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af9c:	e02d      	b.n	2affa <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2af9e:	687a      	ldr	r2, [r7, #4]
   2afa0:	2198      	movs	r1, #152	; 0x98
   2afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afa4:	18d3      	adds	r3, r2, r3
   2afa6:	185b      	adds	r3, r3, r1
   2afa8:	781b      	ldrb	r3, [r3, #0]
   2afaa:	2201      	movs	r2, #1
   2afac:	4053      	eors	r3, r2
   2afae:	b2db      	uxtb	r3, r3
   2afb0:	2b00      	cmp	r3, #0
   2afb2:	d11e      	bne.n	2aff2 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2afb4:	2310      	movs	r3, #16
   2afb6:	18fb      	adds	r3, r7, r3
   2afb8:	0018      	movs	r0, r3
   2afba:	4b45      	ldr	r3, [pc, #276]	; (2b0d0 <tcc_init+0x364>)
   2afbc:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2afc2:	321e      	adds	r2, #30
   2afc4:	0092      	lsls	r2, r2, #2
   2afc6:	58d3      	ldr	r3, [r2, r3]
   2afc8:	b2da      	uxtb	r2, r3
   2afca:	2310      	movs	r3, #16
   2afcc:	18fb      	adds	r3, r7, r3
   2afce:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2afd0:	2310      	movs	r3, #16
   2afd2:	18fb      	adds	r3, r7, r3
   2afd4:	2201      	movs	r2, #1
   2afd6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2afd8:	687b      	ldr	r3, [r7, #4]
   2afda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2afdc:	3216      	adds	r2, #22
   2afde:	0092      	lsls	r2, r2, #2
   2afe0:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2afe2:	b2db      	uxtb	r3, r3
   2afe4:	2210      	movs	r2, #16
   2afe6:	18ba      	adds	r2, r7, r2
   2afe8:	0011      	movs	r1, r2
   2afea:	0018      	movs	r0, r3
   2afec:	4b39      	ldr	r3, [pc, #228]	; (2b0d4 <tcc_init+0x368>)
   2afee:	4798      	blx	r3
   2aff0:	e000      	b.n	2aff4 <tcc_init+0x288>
			continue;
   2aff2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2aff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aff6:	3301      	adds	r3, #1
   2aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2affa:	233b      	movs	r3, #59	; 0x3b
   2affc:	18fb      	adds	r3, r7, r3
   2affe:	781b      	ldrb	r3, [r3, #0]
   2b000:	4a28      	ldr	r2, [pc, #160]	; (2b0a4 <tcc_init+0x338>)
   2b002:	5cd3      	ldrb	r3, [r2, r3]
   2b004:	001a      	movs	r2, r3
   2b006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b008:	429a      	cmp	r2, r3
   2b00a:	dcc8      	bgt.n	2af9e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b00e:	68bb      	ldr	r3, [r7, #8]
   2b010:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b012:	46c0      	nop			; (mov r8, r8)
   2b014:	68bb      	ldr	r3, [r7, #8]
   2b016:	689b      	ldr	r3, [r3, #8]
   2b018:	2204      	movs	r2, #4
   2b01a:	4013      	ands	r3, r2
   2b01c:	d1fa      	bne.n	2b014 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b01e:	68bb      	ldr	r3, [r7, #8]
   2b020:	22ff      	movs	r2, #255	; 0xff
   2b022:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b024:	46c0      	nop			; (mov r8, r8)
   2b026:	68bb      	ldr	r3, [r7, #8]
   2b028:	689b      	ldr	r3, [r3, #8]
   2b02a:	2204      	movs	r2, #4
   2b02c:	4013      	ands	r3, r2
   2b02e:	d1fa      	bne.n	2b026 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b030:	232b      	movs	r3, #43	; 0x2b
   2b032:	18fb      	adds	r3, r7, r3
   2b034:	781a      	ldrb	r2, [r3, #0]
   2b036:	68bb      	ldr	r3, [r7, #8]
   2b038:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b03a:	2320      	movs	r3, #32
   2b03c:	18fb      	adds	r3, r7, r3
   2b03e:	681a      	ldr	r2, [r3, #0]
   2b040:	68bb      	ldr	r3, [r7, #8]
   2b042:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b044:	2320      	movs	r3, #32
   2b046:	18fb      	adds	r3, r7, r3
   2b048:	685a      	ldr	r2, [r3, #4]
   2b04a:	68bb      	ldr	r3, [r7, #8]
   2b04c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b04e:	69fa      	ldr	r2, [r7, #28]
   2b050:	68bb      	ldr	r3, [r7, #8]
   2b052:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b054:	46c0      	nop			; (mov r8, r8)
   2b056:	68bb      	ldr	r3, [r7, #8]
   2b058:	689b      	ldr	r3, [r3, #8]
   2b05a:	4a1f      	ldr	r2, [pc, #124]	; (2b0d8 <tcc_init+0x36c>)
   2b05c:	4013      	ands	r3, r2
   2b05e:	d1fa      	bne.n	2b056 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b060:	69ba      	ldr	r2, [r7, #24]
   2b062:	68bb      	ldr	r3, [r7, #8]
   2b064:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b066:	46c0      	nop			; (mov r8, r8)
   2b068:	68bb      	ldr	r3, [r7, #8]
   2b06a:	689b      	ldr	r3, [r3, #8]
   2b06c:	2210      	movs	r2, #16
   2b06e:	4013      	ands	r3, r2
   2b070:	d1fa      	bne.n	2b068 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b072:	687b      	ldr	r3, [r7, #4]
   2b074:	681a      	ldr	r2, [r3, #0]
   2b076:	68bb      	ldr	r3, [r7, #8]
   2b078:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b07a:	46c0      	nop			; (mov r8, r8)
   2b07c:	68bb      	ldr	r3, [r7, #8]
   2b07e:	689b      	ldr	r3, [r3, #8]
   2b080:	4a16      	ldr	r2, [pc, #88]	; (2b0dc <tcc_init+0x370>)
   2b082:	4013      	ands	r3, r2
   2b084:	d1fa      	bne.n	2b07c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b086:	687b      	ldr	r3, [r7, #4]
   2b088:	685a      	ldr	r2, [r3, #4]
   2b08a:	68bb      	ldr	r3, [r7, #8]
   2b08c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b08e:	2300      	movs	r3, #0
   2b090:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b092:	e03f      	b.n	2b114 <tcc_init+0x3a8>
   2b094:	0002a6d5 	.word	0x0002a6d5
   2b098:	00039b44 	.word	0x00039b44
   2b09c:	0002a651 	.word	0x0002a651
   2b0a0:	00039b50 	.word	0x00039b50
   2b0a4:	00039b60 	.word	0x00039b60
   2b0a8:	0002a9e1 	.word	0x0002a9e1
   2b0ac:	0002aa85 	.word	0x0002aa85
   2b0b0:	0002aae1 	.word	0x0002aae1
   2b0b4:	0002abfd 	.word	0x0002abfd
   2b0b8:	0002acd5 	.word	0x0002acd5
   2b0bc:	20005c60 	.word	0x20005c60
   2b0c0:	0002a639 	.word	0x0002a639
   2b0c4:	00039b40 	.word	0x00039b40
   2b0c8:	0002a251 	.word	0x0002a251
   2b0cc:	0002a295 	.word	0x0002a295
   2b0d0:	0002a6ad 	.word	0x0002a6ad
   2b0d4:	0002a5b1 	.word	0x0002a5b1
   2b0d8:	00020040 	.word	0x00020040
   2b0dc:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b0e0:	46c0      	nop			; (mov r8, r8)
   2b0e2:	68bb      	ldr	r3, [r7, #8]
   2b0e4:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b0e6:	4912      	ldr	r1, [pc, #72]	; (2b130 <tcc_init+0x3c4>)
   2b0e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b0ea:	4091      	lsls	r1, r2
   2b0ec:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b0ee:	4013      	ands	r3, r2
   2b0f0:	d1f7      	bne.n	2b0e2 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b0f2:	687a      	ldr	r2, [r7, #4]
   2b0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0f6:	3306      	adds	r3, #6
   2b0f8:	009b      	lsls	r3, r3, #2
   2b0fa:	18d3      	adds	r3, r2, r3
   2b0fc:	3304      	adds	r3, #4
   2b0fe:	681a      	ldr	r2, [r3, #0]
   2b100:	68b9      	ldr	r1, [r7, #8]
   2b102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b104:	3310      	adds	r3, #16
   2b106:	009b      	lsls	r3, r3, #2
   2b108:	18cb      	adds	r3, r1, r3
   2b10a:	3304      	adds	r3, #4
   2b10c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b110:	3301      	adds	r3, #1
   2b112:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b114:	233b      	movs	r3, #59	; 0x3b
   2b116:	18fb      	adds	r3, r7, r3
   2b118:	781b      	ldrb	r3, [r3, #0]
   2b11a:	4a06      	ldr	r2, [pc, #24]	; (2b134 <tcc_init+0x3c8>)
   2b11c:	5cd3      	ldrb	r3, [r2, r3]
   2b11e:	001a      	movs	r2, r3
   2b120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b122:	429a      	cmp	r2, r3
   2b124:	dcdc      	bgt.n	2b0e0 <tcc_init+0x374>
	}

	return STATUS_OK;
   2b126:	2300      	movs	r3, #0
}
   2b128:	0018      	movs	r0, r3
   2b12a:	46bd      	mov	sp, r7
   2b12c:	b011      	add	sp, #68	; 0x44
   2b12e:	bd90      	pop	{r4, r7, pc}
   2b130:	00080100 	.word	0x00080100
   2b134:	00039b5c 	.word	0x00039b5c

0002b138 <system_interrupt_enable>:
{
   2b138:	b580      	push	{r7, lr}
   2b13a:	b082      	sub	sp, #8
   2b13c:	af00      	add	r7, sp, #0
   2b13e:	0002      	movs	r2, r0
   2b140:	1dfb      	adds	r3, r7, #7
   2b142:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b144:	4b06      	ldr	r3, [pc, #24]	; (2b160 <system_interrupt_enable+0x28>)
   2b146:	1dfa      	adds	r2, r7, #7
   2b148:	7812      	ldrb	r2, [r2, #0]
   2b14a:	0011      	movs	r1, r2
   2b14c:	221f      	movs	r2, #31
   2b14e:	400a      	ands	r2, r1
   2b150:	2101      	movs	r1, #1
   2b152:	4091      	lsls	r1, r2
   2b154:	000a      	movs	r2, r1
   2b156:	601a      	str	r2, [r3, #0]
}
   2b158:	46c0      	nop			; (mov r8, r8)
   2b15a:	46bd      	mov	sp, r7
   2b15c:	b002      	add	sp, #8
   2b15e:	bd80      	pop	{r7, pc}
   2b160:	e000e100 	.word	0xe000e100

0002b164 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b164:	b580      	push	{r7, lr}
   2b166:	b082      	sub	sp, #8
   2b168:	af00      	add	r7, sp, #0
   2b16a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b16c:	4a04      	ldr	r2, [pc, #16]	; (2b180 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b16e:	687b      	ldr	r3, [r7, #4]
   2b170:	18d3      	adds	r3, r2, r3
   2b172:	781b      	ldrb	r3, [r3, #0]
   2b174:	b25b      	sxtb	r3, r3
}
   2b176:	0018      	movs	r0, r3
   2b178:	46bd      	mov	sp, r7
   2b17a:	b002      	add	sp, #8
   2b17c:	bd80      	pop	{r7, pc}
   2b17e:	46c0      	nop			; (mov r8, r8)
   2b180:	20000128 	.word	0x20000128

0002b184 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b184:	b580      	push	{r7, lr}
   2b186:	b084      	sub	sp, #16
   2b188:	af00      	add	r7, sp, #0
   2b18a:	60f8      	str	r0, [r7, #12]
   2b18c:	60b9      	str	r1, [r7, #8]
   2b18e:	1dfb      	adds	r3, r7, #7
   2b190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b192:	1dfb      	adds	r3, r7, #7
   2b194:	781b      	ldrb	r3, [r3, #0]
   2b196:	68fa      	ldr	r2, [r7, #12]
   2b198:	009b      	lsls	r3, r3, #2
   2b19a:	18d3      	adds	r3, r2, r3
   2b19c:	3304      	adds	r3, #4
   2b19e:	68ba      	ldr	r2, [r7, #8]
   2b1a0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b1a2:	68fb      	ldr	r3, [r7, #12]
   2b1a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b1a6:	1dfb      	adds	r3, r7, #7
   2b1a8:	7819      	ldrb	r1, [r3, #0]
   2b1aa:	4b05      	ldr	r3, [pc, #20]	; (2b1c0 <tcc_register_callback+0x3c>)
   2b1ac:	0089      	lsls	r1, r1, #2
   2b1ae:	58cb      	ldr	r3, [r1, r3]
   2b1b0:	431a      	orrs	r2, r3
   2b1b2:	68fb      	ldr	r3, [r7, #12]
   2b1b4:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b1b6:	2300      	movs	r3, #0
}
   2b1b8:	0018      	movs	r0, r3
   2b1ba:	46bd      	mov	sp, r7
   2b1bc:	b004      	add	sp, #16
   2b1be:	bd80      	pop	{r7, pc}
   2b1c0:	00039b64 	.word	0x00039b64

0002b1c4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2b1c4:	b580      	push	{r7, lr}
   2b1c6:	b082      	sub	sp, #8
   2b1c8:	af00      	add	r7, sp, #0
   2b1ca:	6078      	str	r0, [r7, #4]
   2b1cc:	000a      	movs	r2, r1
   2b1ce:	1cfb      	adds	r3, r7, #3
   2b1d0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2b1d2:	687b      	ldr	r3, [r7, #4]
   2b1d4:	681b      	ldr	r3, [r3, #0]
   2b1d6:	0018      	movs	r0, r3
   2b1d8:	4b0f      	ldr	r3, [pc, #60]	; (2b218 <tcc_enable_callback+0x54>)
   2b1da:	4798      	blx	r3
   2b1dc:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2b1de:	0018      	movs	r0, r3
   2b1e0:	4b0e      	ldr	r3, [pc, #56]	; (2b21c <tcc_enable_callback+0x58>)
   2b1e2:	4798      	blx	r3
   2b1e4:	0003      	movs	r3, r0
   2b1e6:	0018      	movs	r0, r3
   2b1e8:	4b0d      	ldr	r3, [pc, #52]	; (2b220 <tcc_enable_callback+0x5c>)
   2b1ea:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2b1ec:	687b      	ldr	r3, [r7, #4]
   2b1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2b1f0:	1cfb      	adds	r3, r7, #3
   2b1f2:	7819      	ldrb	r1, [r3, #0]
   2b1f4:	4b0b      	ldr	r3, [pc, #44]	; (2b224 <tcc_enable_callback+0x60>)
   2b1f6:	0089      	lsls	r1, r1, #2
   2b1f8:	58cb      	ldr	r3, [r1, r3]
   2b1fa:	431a      	orrs	r2, r3
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2b200:	687b      	ldr	r3, [r7, #4]
   2b202:	681b      	ldr	r3, [r3, #0]
   2b204:	1cfa      	adds	r2, r7, #3
   2b206:	7811      	ldrb	r1, [r2, #0]
   2b208:	4a06      	ldr	r2, [pc, #24]	; (2b224 <tcc_enable_callback+0x60>)
   2b20a:	0089      	lsls	r1, r1, #2
   2b20c:	588a      	ldr	r2, [r1, r2]
   2b20e:	629a      	str	r2, [r3, #40]	; 0x28
}
   2b210:	46c0      	nop			; (mov r8, r8)
   2b212:	46bd      	mov	sp, r7
   2b214:	b002      	add	sp, #8
   2b216:	bd80      	pop	{r7, pc}
   2b218:	0002a6d5 	.word	0x0002a6d5
   2b21c:	0002b165 	.word	0x0002b165
   2b220:	0002b139 	.word	0x0002b139
   2b224:	00039b64 	.word	0x00039b64

0002b228 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2b228:	b580      	push	{r7, lr}
   2b22a:	af00      	add	r7, sp, #0
   2b22c:	2000      	movs	r0, #0
   2b22e:	4b02      	ldr	r3, [pc, #8]	; (2b238 <TCC0_Handler+0x10>)
   2b230:	4798      	blx	r3
   2b232:	46c0      	nop			; (mov r8, r8)
   2b234:	46bd      	mov	sp, r7
   2b236:	bd80      	pop	{r7, pc}
   2b238:	0002b265 	.word	0x0002b265

0002b23c <TCC1_Handler>:
   2b23c:	b580      	push	{r7, lr}
   2b23e:	af00      	add	r7, sp, #0
   2b240:	2001      	movs	r0, #1
   2b242:	4b02      	ldr	r3, [pc, #8]	; (2b24c <TCC1_Handler+0x10>)
   2b244:	4798      	blx	r3
   2b246:	46c0      	nop			; (mov r8, r8)
   2b248:	46bd      	mov	sp, r7
   2b24a:	bd80      	pop	{r7, pc}
   2b24c:	0002b265 	.word	0x0002b265

0002b250 <TCC2_Handler>:
   2b250:	b580      	push	{r7, lr}
   2b252:	af00      	add	r7, sp, #0
   2b254:	2002      	movs	r0, #2
   2b256:	4b02      	ldr	r3, [pc, #8]	; (2b260 <TCC2_Handler+0x10>)
   2b258:	4798      	blx	r3
   2b25a:	46c0      	nop			; (mov r8, r8)
   2b25c:	46bd      	mov	sp, r7
   2b25e:	bd80      	pop	{r7, pc}
   2b260:	0002b265 	.word	0x0002b265

0002b264 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2b264:	b580      	push	{r7, lr}
   2b266:	b086      	sub	sp, #24
   2b268:	af00      	add	r7, sp, #0
   2b26a:	0002      	movs	r2, r0
   2b26c:	1dfb      	adds	r3, r7, #7
   2b26e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2b270:	1dfb      	adds	r3, r7, #7
   2b272:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2b274:	4b18      	ldr	r3, [pc, #96]	; (2b2d8 <_tcc_interrupt_handler+0x74>)
   2b276:	0092      	lsls	r2, r2, #2
   2b278:	58d3      	ldr	r3, [r2, r3]
   2b27a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b27c:	693b      	ldr	r3, [r7, #16]
   2b27e:	681b      	ldr	r3, [r3, #0]
   2b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2b282:	693b      	ldr	r3, [r7, #16]
   2b284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b286:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2b288:	693b      	ldr	r3, [r7, #16]
   2b28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b28c:	4013      	ands	r3, r2
   2b28e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b290:	2300      	movs	r3, #0
   2b292:	617b      	str	r3, [r7, #20]
   2b294:	e019      	b.n	2b2ca <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2b296:	4b11      	ldr	r3, [pc, #68]	; (2b2dc <_tcc_interrupt_handler+0x78>)
   2b298:	697a      	ldr	r2, [r7, #20]
   2b29a:	0092      	lsls	r2, r2, #2
   2b29c:	58d3      	ldr	r3, [r2, r3]
   2b29e:	68fa      	ldr	r2, [r7, #12]
   2b2a0:	4013      	ands	r3, r2
   2b2a2:	d00f      	beq.n	2b2c4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2b2a4:	693a      	ldr	r2, [r7, #16]
   2b2a6:	697b      	ldr	r3, [r7, #20]
   2b2a8:	009b      	lsls	r3, r3, #2
   2b2aa:	18d3      	adds	r3, r2, r3
   2b2ac:	3304      	adds	r3, #4
   2b2ae:	681b      	ldr	r3, [r3, #0]
   2b2b0:	693a      	ldr	r2, [r7, #16]
   2b2b2:	0010      	movs	r0, r2
   2b2b4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2b2b6:	693b      	ldr	r3, [r7, #16]
   2b2b8:	681b      	ldr	r3, [r3, #0]
   2b2ba:	4a08      	ldr	r2, [pc, #32]	; (2b2dc <_tcc_interrupt_handler+0x78>)
   2b2bc:	6979      	ldr	r1, [r7, #20]
   2b2be:	0089      	lsls	r1, r1, #2
   2b2c0:	588a      	ldr	r2, [r1, r2]
   2b2c2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b2c4:	697b      	ldr	r3, [r7, #20]
   2b2c6:	3301      	adds	r3, #1
   2b2c8:	617b      	str	r3, [r7, #20]
   2b2ca:	697b      	ldr	r3, [r7, #20]
   2b2cc:	2b0b      	cmp	r3, #11
   2b2ce:	dde2      	ble.n	2b296 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2b2d0:	46c0      	nop			; (mov r8, r8)
   2b2d2:	46bd      	mov	sp, r7
   2b2d4:	b006      	add	sp, #24
   2b2d6:	bd80      	pop	{r7, pc}
   2b2d8:	20005c60 	.word	0x20005c60
   2b2dc:	00039b64 	.word	0x00039b64

0002b2e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2b2e0:	b580      	push	{r7, lr}
   2b2e2:	b082      	sub	sp, #8
   2b2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2b2e6:	4b2f      	ldr	r3, [pc, #188]	; (2b3a4 <Reset_Handler+0xc4>)
   2b2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2b2ea:	4b2f      	ldr	r3, [pc, #188]	; (2b3a8 <Reset_Handler+0xc8>)
   2b2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2b2ee:	687a      	ldr	r2, [r7, #4]
   2b2f0:	683b      	ldr	r3, [r7, #0]
   2b2f2:	429a      	cmp	r2, r3
   2b2f4:	d00c      	beq.n	2b310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2b2f6:	e007      	b.n	2b308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2b2f8:	683b      	ldr	r3, [r7, #0]
   2b2fa:	1d1a      	adds	r2, r3, #4
   2b2fc:	603a      	str	r2, [r7, #0]
   2b2fe:	687a      	ldr	r2, [r7, #4]
   2b300:	1d11      	adds	r1, r2, #4
   2b302:	6079      	str	r1, [r7, #4]
   2b304:	6812      	ldr	r2, [r2, #0]
   2b306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2b308:	683a      	ldr	r2, [r7, #0]
   2b30a:	4b28      	ldr	r3, [pc, #160]	; (2b3ac <Reset_Handler+0xcc>)
   2b30c:	429a      	cmp	r2, r3
   2b30e:	d3f3      	bcc.n	2b2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2b310:	4b27      	ldr	r3, [pc, #156]	; (2b3b0 <Reset_Handler+0xd0>)
   2b312:	603b      	str	r3, [r7, #0]
   2b314:	e004      	b.n	2b320 <Reset_Handler+0x40>
                *pDest++ = 0;
   2b316:	683b      	ldr	r3, [r7, #0]
   2b318:	1d1a      	adds	r2, r3, #4
   2b31a:	603a      	str	r2, [r7, #0]
   2b31c:	2200      	movs	r2, #0
   2b31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2b320:	683a      	ldr	r2, [r7, #0]
   2b322:	4b24      	ldr	r3, [pc, #144]	; (2b3b4 <Reset_Handler+0xd4>)
   2b324:	429a      	cmp	r2, r3
   2b326:	d3f6      	bcc.n	2b316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2b328:	4b23      	ldr	r3, [pc, #140]	; (2b3b8 <Reset_Handler+0xd8>)
   2b32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2b32c:	4b23      	ldr	r3, [pc, #140]	; (2b3bc <Reset_Handler+0xdc>)
   2b32e:	687a      	ldr	r2, [r7, #4]
   2b330:	21ff      	movs	r1, #255	; 0xff
   2b332:	438a      	bics	r2, r1
   2b334:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2b336:	4a22      	ldr	r2, [pc, #136]	; (2b3c0 <Reset_Handler+0xe0>)
   2b338:	2390      	movs	r3, #144	; 0x90
   2b33a:	005b      	lsls	r3, r3, #1
   2b33c:	2102      	movs	r1, #2
   2b33e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2b340:	4a20      	ldr	r2, [pc, #128]	; (2b3c4 <Reset_Handler+0xe4>)
   2b342:	78d3      	ldrb	r3, [r2, #3]
   2b344:	2103      	movs	r1, #3
   2b346:	438b      	bics	r3, r1
   2b348:	1c19      	adds	r1, r3, #0
   2b34a:	2302      	movs	r3, #2
   2b34c:	430b      	orrs	r3, r1
   2b34e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2b350:	4a1c      	ldr	r2, [pc, #112]	; (2b3c4 <Reset_Handler+0xe4>)
   2b352:	78d3      	ldrb	r3, [r2, #3]
   2b354:	210c      	movs	r1, #12
   2b356:	438b      	bics	r3, r1
   2b358:	1c19      	adds	r1, r3, #0
   2b35a:	2308      	movs	r3, #8
   2b35c:	430b      	orrs	r3, r1
   2b35e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2b360:	4a19      	ldr	r2, [pc, #100]	; (2b3c8 <Reset_Handler+0xe8>)
   2b362:	7b93      	ldrb	r3, [r2, #14]
   2b364:	2130      	movs	r1, #48	; 0x30
   2b366:	438b      	bics	r3, r1
   2b368:	1c19      	adds	r1, r3, #0
   2b36a:	2320      	movs	r3, #32
   2b36c:	430b      	orrs	r3, r1
   2b36e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2b370:	4a15      	ldr	r2, [pc, #84]	; (2b3c8 <Reset_Handler+0xe8>)
   2b372:	7b93      	ldrb	r3, [r2, #14]
   2b374:	210c      	movs	r1, #12
   2b376:	438b      	bics	r3, r1
   2b378:	1c19      	adds	r1, r3, #0
   2b37a:	2308      	movs	r3, #8
   2b37c:	430b      	orrs	r3, r1
   2b37e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2b380:	4a11      	ldr	r2, [pc, #68]	; (2b3c8 <Reset_Handler+0xe8>)
   2b382:	7b93      	ldrb	r3, [r2, #14]
   2b384:	2103      	movs	r1, #3
   2b386:	438b      	bics	r3, r1
   2b388:	1c19      	adds	r1, r3, #0
   2b38a:	2302      	movs	r3, #2
   2b38c:	430b      	orrs	r3, r1
   2b38e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2b390:	4a0e      	ldr	r2, [pc, #56]	; (2b3cc <Reset_Handler+0xec>)
   2b392:	6853      	ldr	r3, [r2, #4]
   2b394:	2180      	movs	r1, #128	; 0x80
   2b396:	430b      	orrs	r3, r1
   2b398:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2b39a:	4b0d      	ldr	r3, [pc, #52]	; (2b3d0 <Reset_Handler+0xf0>)
   2b39c:	4798      	blx	r3

        /* Branch to main function */
        main();
   2b39e:	4b0d      	ldr	r3, [pc, #52]	; (2b3d4 <Reset_Handler+0xf4>)
   2b3a0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2b3a2:	e7fe      	b.n	2b3a2 <Reset_Handler+0xc2>
   2b3a4:	0003a8b8 	.word	0x0003a8b8
   2b3a8:	20000000 	.word	0x20000000
   2b3ac:	20000300 	.word	0x20000300
   2b3b0:	20000300 	.word	0x20000300
   2b3b4:	20005cd0 	.word	0x20005cd0
   2b3b8:	00012000 	.word	0x00012000
   2b3bc:	e000ed00 	.word	0xe000ed00
   2b3c0:	41007000 	.word	0x41007000
   2b3c4:	41005000 	.word	0x41005000
   2b3c8:	41004800 	.word	0x41004800
   2b3cc:	41004000 	.word	0x41004000
   2b3d0:	00034d6d 	.word	0x00034d6d
   2b3d4:	00032b15 	.word	0x00032b15

0002b3d8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2b3d8:	b580      	push	{r7, lr}
   2b3da:	af00      	add	r7, sp, #0
  __asm volatile (
   2b3dc:	2004      	movs	r0, #4
   2b3de:	4671      	mov	r1, lr
   2b3e0:	4208      	tst	r0, r1
   2b3e2:	d002      	beq.n	2b3ea <_MSP>
   2b3e4:	f3ef 8009 	mrs	r0, PSP
   2b3e8:	e001      	b.n	2b3ee <_HALT>

0002b3ea <_MSP>:
   2b3ea:	f3ef 8008 	mrs	r0, MSP

0002b3ee <_HALT>:
   2b3ee:	6941      	ldr	r1, [r0, #20]
   2b3f0:	e004      	b.n	2b3fc <HardFault_HandlerC>
   2b3f2:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2b3f4:	46c0      	nop			; (mov r8, r8)
   2b3f6:	46bd      	mov	sp, r7
   2b3f8:	bd80      	pop	{r7, pc}
	...

0002b3fc <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2b3fc:	b580      	push	{r7, lr}
   2b3fe:	b090      	sub	sp, #64	; 0x40
   2b400:	af00      	add	r7, sp, #0
   2b402:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2b404:	687b      	ldr	r3, [r7, #4]
   2b406:	681b      	ldr	r3, [r3, #0]
   2b408:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2b40a:	687b      	ldr	r3, [r7, #4]
   2b40c:	685b      	ldr	r3, [r3, #4]
   2b40e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2b410:	687b      	ldr	r3, [r7, #4]
   2b412:	689b      	ldr	r3, [r3, #8]
   2b414:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2b416:	687b      	ldr	r3, [r7, #4]
   2b418:	68db      	ldr	r3, [r3, #12]
   2b41a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2b41c:	687b      	ldr	r3, [r7, #4]
   2b41e:	691b      	ldr	r3, [r3, #16]
   2b420:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2b422:	687b      	ldr	r3, [r7, #4]
   2b424:	695b      	ldr	r3, [r3, #20]
   2b426:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2b428:	687b      	ldr	r3, [r7, #4]
   2b42a:	699b      	ldr	r3, [r3, #24]
   2b42c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2b42e:	687b      	ldr	r3, [r7, #4]
   2b430:	69db      	ldr	r3, [r3, #28]
   2b432:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2b434:	4b0b      	ldr	r3, [pc, #44]	; (2b464 <HardFault_HandlerC+0x68>)
   2b436:	681b      	ldr	r3, [r3, #0]
   2b438:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2b43a:	4b0b      	ldr	r3, [pc, #44]	; (2b468 <HardFault_HandlerC+0x6c>)
   2b43c:	681b      	ldr	r3, [r3, #0]
   2b43e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2b440:	4b0a      	ldr	r3, [pc, #40]	; (2b46c <HardFault_HandlerC+0x70>)
   2b442:	681b      	ldr	r3, [r3, #0]
   2b444:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2b446:	4b0a      	ldr	r3, [pc, #40]	; (2b470 <HardFault_HandlerC+0x74>)
   2b448:	681b      	ldr	r3, [r3, #0]
   2b44a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2b44c:	4b09      	ldr	r3, [pc, #36]	; (2b474 <HardFault_HandlerC+0x78>)
   2b44e:	681b      	ldr	r3, [r3, #0]
   2b450:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2b452:	4b09      	ldr	r3, [pc, #36]	; (2b478 <HardFault_HandlerC+0x7c>)
   2b454:	681b      	ldr	r3, [r3, #0]
   2b456:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2b458:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2b45a:	46c0      	nop			; (mov r8, r8)
   2b45c:	46bd      	mov	sp, r7
   2b45e:	b010      	add	sp, #64	; 0x40
   2b460:	bd80      	pop	{r7, pc}
   2b462:	46c0      	nop			; (mov r8, r8)
   2b464:	e000ed28 	.word	0xe000ed28
   2b468:	e000ed2c 	.word	0xe000ed2c
   2b46c:	e000ed30 	.word	0xe000ed30
   2b470:	e000ed3c 	.word	0xe000ed3c
   2b474:	e000ed34 	.word	0xe000ed34
   2b478:	e000ed38 	.word	0xe000ed38

0002b47c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2b47c:	b580      	push	{r7, lr}
   2b47e:	b086      	sub	sp, #24
   2b480:	af00      	add	r7, sp, #0
   2b482:	60f8      	str	r0, [r7, #12]
   2b484:	60b9      	str	r1, [r7, #8]
   2b486:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b488:	2300      	movs	r3, #0
   2b48a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2b48c:	68fb      	ldr	r3, [r7, #12]
   2b48e:	2b00      	cmp	r3, #0
   2b490:	d012      	beq.n	2b4b8 <_read+0x3c>
		return -1;
   2b492:	2301      	movs	r3, #1
   2b494:	425b      	negs	r3, r3
   2b496:	e013      	b.n	2b4c0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2b498:	4b0b      	ldr	r3, [pc, #44]	; (2b4c8 <_read+0x4c>)
   2b49a:	681a      	ldr	r2, [r3, #0]
   2b49c:	4b0b      	ldr	r3, [pc, #44]	; (2b4cc <_read+0x50>)
   2b49e:	681b      	ldr	r3, [r3, #0]
   2b4a0:	68b9      	ldr	r1, [r7, #8]
   2b4a2:	0018      	movs	r0, r3
   2b4a4:	4790      	blx	r2
		ptr++;
   2b4a6:	68bb      	ldr	r3, [r7, #8]
   2b4a8:	3301      	adds	r3, #1
   2b4aa:	60bb      	str	r3, [r7, #8]
		nChars++;
   2b4ac:	697b      	ldr	r3, [r7, #20]
   2b4ae:	3301      	adds	r3, #1
   2b4b0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2b4b2:	687b      	ldr	r3, [r7, #4]
   2b4b4:	3b01      	subs	r3, #1
   2b4b6:	607b      	str	r3, [r7, #4]
   2b4b8:	687b      	ldr	r3, [r7, #4]
   2b4ba:	2b00      	cmp	r3, #0
   2b4bc:	dcec      	bgt.n	2b498 <_read+0x1c>
	}
	return nChars;
   2b4be:	697b      	ldr	r3, [r7, #20]
}
   2b4c0:	0018      	movs	r0, r3
   2b4c2:	46bd      	mov	sp, r7
   2b4c4:	b006      	add	sp, #24
   2b4c6:	bd80      	pop	{r7, pc}
   2b4c8:	20005c6c 	.word	0x20005c6c
   2b4cc:	20005c74 	.word	0x20005c74

0002b4d0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2b4d0:	b580      	push	{r7, lr}
   2b4d2:	b086      	sub	sp, #24
   2b4d4:	af00      	add	r7, sp, #0
   2b4d6:	60f8      	str	r0, [r7, #12]
   2b4d8:	60b9      	str	r1, [r7, #8]
   2b4da:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b4dc:	2300      	movs	r3, #0
   2b4de:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2b4e0:	68fb      	ldr	r3, [r7, #12]
   2b4e2:	2b01      	cmp	r3, #1
   2b4e4:	d01d      	beq.n	2b522 <_write+0x52>
   2b4e6:	68fb      	ldr	r3, [r7, #12]
   2b4e8:	2b02      	cmp	r3, #2
   2b4ea:	d01a      	beq.n	2b522 <_write+0x52>
   2b4ec:	68fb      	ldr	r3, [r7, #12]
   2b4ee:	2b03      	cmp	r3, #3
   2b4f0:	d017      	beq.n	2b522 <_write+0x52>
		return -1;
   2b4f2:	2301      	movs	r3, #1
   2b4f4:	425b      	negs	r3, r3
   2b4f6:	e018      	b.n	2b52a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2b4f8:	4b0e      	ldr	r3, [pc, #56]	; (2b534 <_write+0x64>)
   2b4fa:	681a      	ldr	r2, [r3, #0]
   2b4fc:	4b0e      	ldr	r3, [pc, #56]	; (2b538 <_write+0x68>)
   2b4fe:	6818      	ldr	r0, [r3, #0]
   2b500:	68bb      	ldr	r3, [r7, #8]
   2b502:	1c59      	adds	r1, r3, #1
   2b504:	60b9      	str	r1, [r7, #8]
   2b506:	781b      	ldrb	r3, [r3, #0]
   2b508:	0019      	movs	r1, r3
   2b50a:	4790      	blx	r2
   2b50c:	1e03      	subs	r3, r0, #0
   2b50e:	da02      	bge.n	2b516 <_write+0x46>
			return -1;
   2b510:	2301      	movs	r3, #1
   2b512:	425b      	negs	r3, r3
   2b514:	e009      	b.n	2b52a <_write+0x5a>
		}
		++nChars;
   2b516:	697b      	ldr	r3, [r7, #20]
   2b518:	3301      	adds	r3, #1
   2b51a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2b51c:	687b      	ldr	r3, [r7, #4]
   2b51e:	3b01      	subs	r3, #1
   2b520:	607b      	str	r3, [r7, #4]
   2b522:	687b      	ldr	r3, [r7, #4]
   2b524:	2b00      	cmp	r3, #0
   2b526:	d1e7      	bne.n	2b4f8 <_write+0x28>
	}
	return nChars;
   2b528:	697b      	ldr	r3, [r7, #20]
}
   2b52a:	0018      	movs	r0, r3
   2b52c:	46bd      	mov	sp, r7
   2b52e:	b006      	add	sp, #24
   2b530:	bd80      	pop	{r7, pc}
   2b532:	46c0      	nop			; (mov r8, r8)
   2b534:	20005c70 	.word	0x20005c70
   2b538:	20005c74 	.word	0x20005c74

0002b53c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2b53c:	b580      	push	{r7, lr}
   2b53e:	b084      	sub	sp, #16
   2b540:	af00      	add	r7, sp, #0
   2b542:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2b544:	4b0a      	ldr	r3, [pc, #40]	; (2b570 <_sbrk+0x34>)
   2b546:	681b      	ldr	r3, [r3, #0]
   2b548:	2b00      	cmp	r3, #0
   2b54a:	d102      	bne.n	2b552 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2b54c:	4b08      	ldr	r3, [pc, #32]	; (2b570 <_sbrk+0x34>)
   2b54e:	4a09      	ldr	r2, [pc, #36]	; (2b574 <_sbrk+0x38>)
   2b550:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2b552:	4b07      	ldr	r3, [pc, #28]	; (2b570 <_sbrk+0x34>)
   2b554:	681b      	ldr	r3, [r3, #0]
   2b556:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2b558:	4b05      	ldr	r3, [pc, #20]	; (2b570 <_sbrk+0x34>)
   2b55a:	681a      	ldr	r2, [r3, #0]
   2b55c:	687b      	ldr	r3, [r7, #4]
   2b55e:	18d2      	adds	r2, r2, r3
   2b560:	4b03      	ldr	r3, [pc, #12]	; (2b570 <_sbrk+0x34>)
   2b562:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2b564:	68fb      	ldr	r3, [r7, #12]
}
   2b566:	0018      	movs	r0, r3
   2b568:	46bd      	mov	sp, r7
   2b56a:	b004      	add	sp, #16
   2b56c:	bd80      	pop	{r7, pc}
   2b56e:	46c0      	nop			; (mov r8, r8)
   2b570:	200042f0 	.word	0x200042f0
   2b574:	20007cd0 	.word	0x20007cd0

0002b578 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b578:	b580      	push	{r7, lr}
   2b57a:	b082      	sub	sp, #8
   2b57c:	af00      	add	r7, sp, #0
   2b57e:	6078      	str	r0, [r7, #4]
	return -1;
   2b580:	2301      	movs	r3, #1
   2b582:	425b      	negs	r3, r3
}
   2b584:	0018      	movs	r0, r3
   2b586:	46bd      	mov	sp, r7
   2b588:	b002      	add	sp, #8
   2b58a:	bd80      	pop	{r7, pc}

0002b58c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b58c:	b580      	push	{r7, lr}
   2b58e:	b082      	sub	sp, #8
   2b590:	af00      	add	r7, sp, #0
   2b592:	6078      	str	r0, [r7, #4]
   2b594:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b596:	683b      	ldr	r3, [r7, #0]
   2b598:	2280      	movs	r2, #128	; 0x80
   2b59a:	0192      	lsls	r2, r2, #6
   2b59c:	605a      	str	r2, [r3, #4]

	return 0;
   2b59e:	2300      	movs	r3, #0
}
   2b5a0:	0018      	movs	r0, r3
   2b5a2:	46bd      	mov	sp, r7
   2b5a4:	b002      	add	sp, #8
   2b5a6:	bd80      	pop	{r7, pc}

0002b5a8 <_isatty>:

extern int _isatty(int file)
{
   2b5a8:	b580      	push	{r7, lr}
   2b5aa:	b082      	sub	sp, #8
   2b5ac:	af00      	add	r7, sp, #0
   2b5ae:	6078      	str	r0, [r7, #4]
	return 1;
   2b5b0:	2301      	movs	r3, #1
}
   2b5b2:	0018      	movs	r0, r3
   2b5b4:	46bd      	mov	sp, r7
   2b5b6:	b002      	add	sp, #8
   2b5b8:	bd80      	pop	{r7, pc}

0002b5ba <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b5ba:	b580      	push	{r7, lr}
   2b5bc:	b084      	sub	sp, #16
   2b5be:	af00      	add	r7, sp, #0
   2b5c0:	60f8      	str	r0, [r7, #12]
   2b5c2:	60b9      	str	r1, [r7, #8]
   2b5c4:	607a      	str	r2, [r7, #4]
	return 0;
   2b5c6:	2300      	movs	r3, #0
}
   2b5c8:	0018      	movs	r0, r3
   2b5ca:	46bd      	mov	sp, r7
   2b5cc:	b004      	add	sp, #16
   2b5ce:	bd80      	pop	{r7, pc}

0002b5d0 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b5d0:	b580      	push	{r7, lr}
   2b5d2:	b082      	sub	sp, #8
   2b5d4:	af00      	add	r7, sp, #0
   2b5d6:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b5d8:	687b      	ldr	r3, [r7, #4]
   2b5da:	2200      	movs	r2, #0
   2b5dc:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b5de:	687b      	ldr	r3, [r7, #4]
   2b5e0:	2200      	movs	r2, #0
   2b5e2:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b5e4:	687b      	ldr	r3, [r7, #4]
   2b5e6:	2200      	movs	r2, #0
   2b5e8:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b5ea:	687b      	ldr	r3, [r7, #4]
   2b5ec:	2200      	movs	r2, #0
   2b5ee:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b5f0:	687b      	ldr	r3, [r7, #4]
   2b5f2:	2201      	movs	r2, #1
   2b5f4:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b5f6:	687b      	ldr	r3, [r7, #4]
   2b5f8:	2201      	movs	r2, #1
   2b5fa:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b5fc:	687b      	ldr	r3, [r7, #4]
   2b5fe:	22fa      	movs	r2, #250	; 0xfa
   2b600:	00d2      	lsls	r2, r2, #3
   2b602:	80da      	strh	r2, [r3, #6]
}
   2b604:	46c0      	nop			; (mov r8, r8)
   2b606:	46bd      	mov	sp, r7
   2b608:	b002      	add	sp, #8
   2b60a:	bd80      	pop	{r7, pc}

0002b60c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b60c:	b580      	push	{r7, lr}
   2b60e:	b086      	sub	sp, #24
   2b610:	af00      	add	r7, sp, #0
   2b612:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b614:	230c      	movs	r3, #12
   2b616:	18fb      	adds	r3, r7, r3
   2b618:	0018      	movs	r0, r3
   2b61a:	4b23      	ldr	r3, [pc, #140]	; (2b6a8 <rtc_calendar_get_config_defaults+0x9c>)
   2b61c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b61e:	687b      	ldr	r3, [r7, #4]
   2b620:	22a0      	movs	r2, #160	; 0xa0
   2b622:	0112      	lsls	r2, r2, #4
   2b624:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b626:	687b      	ldr	r3, [r7, #4]
   2b628:	2200      	movs	r2, #0
   2b62a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b62c:	687b      	ldr	r3, [r7, #4]
   2b62e:	2200      	movs	r2, #0
   2b630:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b632:	687b      	ldr	r3, [r7, #4]
   2b634:	2200      	movs	r2, #0
   2b636:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b638:	687b      	ldr	r3, [r7, #4]
   2b63a:	22fa      	movs	r2, #250	; 0xfa
   2b63c:	00d2      	lsls	r2, r2, #3
   2b63e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b640:	2317      	movs	r3, #23
   2b642:	18fb      	adds	r3, r7, r3
   2b644:	2200      	movs	r2, #0
   2b646:	701a      	strb	r2, [r3, #0]
   2b648:	e025      	b.n	2b696 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b64a:	2317      	movs	r3, #23
   2b64c:	18fb      	adds	r3, r7, r3
   2b64e:	781a      	ldrb	r2, [r3, #0]
   2b650:	6879      	ldr	r1, [r7, #4]
   2b652:	2008      	movs	r0, #8
   2b654:	0013      	movs	r3, r2
   2b656:	009b      	lsls	r3, r3, #2
   2b658:	189b      	adds	r3, r3, r2
   2b65a:	005b      	lsls	r3, r3, #1
   2b65c:	18cb      	adds	r3, r1, r3
   2b65e:	181a      	adds	r2, r3, r0
   2b660:	230c      	movs	r3, #12
   2b662:	18fb      	adds	r3, r7, r3
   2b664:	0010      	movs	r0, r2
   2b666:	0019      	movs	r1, r3
   2b668:	2308      	movs	r3, #8
   2b66a:	001a      	movs	r2, r3
   2b66c:	4b0f      	ldr	r3, [pc, #60]	; (2b6ac <rtc_calendar_get_config_defaults+0xa0>)
   2b66e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b670:	2317      	movs	r3, #23
   2b672:	18fb      	adds	r3, r7, r3
   2b674:	781a      	ldrb	r2, [r3, #0]
   2b676:	6879      	ldr	r1, [r7, #4]
   2b678:	0013      	movs	r3, r2
   2b67a:	009b      	lsls	r3, r3, #2
   2b67c:	189b      	adds	r3, r3, r2
   2b67e:	005b      	lsls	r3, r3, #1
   2b680:	18cb      	adds	r3, r1, r3
   2b682:	3310      	adds	r3, #16
   2b684:	2206      	movs	r2, #6
   2b686:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b688:	2317      	movs	r3, #23
   2b68a:	18fb      	adds	r3, r7, r3
   2b68c:	781a      	ldrb	r2, [r3, #0]
   2b68e:	2317      	movs	r3, #23
   2b690:	18fb      	adds	r3, r7, r3
   2b692:	3201      	adds	r2, #1
   2b694:	701a      	strb	r2, [r3, #0]
   2b696:	2317      	movs	r3, #23
   2b698:	18fb      	adds	r3, r7, r3
   2b69a:	781b      	ldrb	r3, [r3, #0]
   2b69c:	2b00      	cmp	r3, #0
   2b69e:	d0d4      	beq.n	2b64a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b6a0:	46c0      	nop			; (mov r8, r8)
   2b6a2:	46bd      	mov	sp, r7
   2b6a4:	b006      	add	sp, #24
   2b6a6:	bd80      	pop	{r7, pc}
   2b6a8:	0002b5d1 	.word	0x0002b5d1
   2b6ac:	00034ddd 	.word	0x00034ddd

0002b6b0 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b6b0:	b580      	push	{r7, lr}
   2b6b2:	b088      	sub	sp, #32
   2b6b4:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b6b6:	230c      	movs	r3, #12
   2b6b8:	18fb      	adds	r3, r7, r3
   2b6ba:	0018      	movs	r0, r3
   2b6bc:	4b1a      	ldr	r3, [pc, #104]	; (2b728 <configure_rtc_calendar+0x78>)
   2b6be:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b6c0:	1d3b      	adds	r3, r7, #4
   2b6c2:	0018      	movs	r0, r3
   2b6c4:	4b19      	ldr	r3, [pc, #100]	; (2b72c <configure_rtc_calendar+0x7c>)
   2b6c6:	4798      	blx	r3
	init_time.year   = 2014;
   2b6c8:	1d3b      	adds	r3, r7, #4
   2b6ca:	4a19      	ldr	r2, [pc, #100]	; (2b730 <configure_rtc_calendar+0x80>)
   2b6cc:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b6ce:	1d3b      	adds	r3, r7, #4
   2b6d0:	2201      	movs	r2, #1
   2b6d2:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b6d4:	1d3b      	adds	r3, r7, #4
   2b6d6:	2201      	movs	r2, #1
   2b6d8:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b6da:	1d3b      	adds	r3, r7, #4
   2b6dc:	2200      	movs	r2, #0
   2b6de:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b6e0:	1d3b      	adds	r3, r7, #4
   2b6e2:	2200      	movs	r2, #0
   2b6e4:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b6e6:	1d3b      	adds	r3, r7, #4
   2b6e8:	2204      	movs	r2, #4
   2b6ea:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b6ec:	230c      	movs	r3, #12
   2b6ee:	18fb      	adds	r3, r7, r3
   2b6f0:	2201      	movs	r2, #1
   2b6f2:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b6f4:	230c      	movs	r3, #12
   2b6f6:	18fb      	adds	r3, r7, r3
   2b6f8:	1d3a      	adds	r2, r7, #4
   2b6fa:	3308      	adds	r3, #8
   2b6fc:	ca03      	ldmia	r2!, {r0, r1}
   2b6fe:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b700:	230c      	movs	r3, #12
   2b702:	18fb      	adds	r3, r7, r3
   2b704:	2206      	movs	r2, #6
   2b706:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b708:	230c      	movs	r3, #12
   2b70a:	18fa      	adds	r2, r7, r3
   2b70c:	4909      	ldr	r1, [pc, #36]	; (2b734 <configure_rtc_calendar+0x84>)
   2b70e:	4b0a      	ldr	r3, [pc, #40]	; (2b738 <configure_rtc_calendar+0x88>)
   2b710:	0018      	movs	r0, r3
   2b712:	4b0a      	ldr	r3, [pc, #40]	; (2b73c <configure_rtc_calendar+0x8c>)
   2b714:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b716:	4b08      	ldr	r3, [pc, #32]	; (2b738 <configure_rtc_calendar+0x88>)
   2b718:	0018      	movs	r0, r3
   2b71a:	4b09      	ldr	r3, [pc, #36]	; (2b740 <configure_rtc_calendar+0x90>)
   2b71c:	4798      	blx	r3
}
   2b71e:	46c0      	nop			; (mov r8, r8)
   2b720:	46bd      	mov	sp, r7
   2b722:	b008      	add	sp, #32
   2b724:	bd80      	pop	{r7, pc}
   2b726:	46c0      	nop			; (mov r8, r8)
   2b728:	0002b60d 	.word	0x0002b60d
   2b72c:	0002b5d1 	.word	0x0002b5d1
   2b730:	000007de 	.word	0x000007de
   2b734:	40001400 	.word	0x40001400
   2b738:	20005c78 	.word	0x20005c78
   2b73c:	000271ed 	.word	0x000271ed
   2b740:	00026f19 	.word	0x00026f19

0002b744 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b744:	b590      	push	{r4, r7, lr}
   2b746:	b085      	sub	sp, #20
   2b748:	af00      	add	r7, sp, #0
   2b74a:	0002      	movs	r2, r0
   2b74c:	1dfb      	adds	r3, r7, #7
   2b74e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b750:	4b1a      	ldr	r3, [pc, #104]	; (2b7bc <disk_initialize+0x78>)
   2b752:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b754:	1dfb      	adds	r3, r7, #7
   2b756:	781b      	ldrb	r3, [r3, #0]
   2b758:	2b01      	cmp	r3, #1
   2b75a:	d901      	bls.n	2b760 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b75c:	2301      	movs	r3, #1
   2b75e:	e029      	b.n	2b7b4 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b760:	2300      	movs	r3, #0
   2b762:	60fb      	str	r3, [r7, #12]
   2b764:	e010      	b.n	2b788 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b766:	230b      	movs	r3, #11
   2b768:	18fc      	adds	r4, r7, r3
   2b76a:	1dfb      	adds	r3, r7, #7
   2b76c:	781b      	ldrb	r3, [r3, #0]
   2b76e:	0018      	movs	r0, r3
   2b770:	4b13      	ldr	r3, [pc, #76]	; (2b7c0 <disk_initialize+0x7c>)
   2b772:	4798      	blx	r3
   2b774:	0003      	movs	r3, r0
   2b776:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b778:	230b      	movs	r3, #11
   2b77a:	18fb      	adds	r3, r7, r3
   2b77c:	781b      	ldrb	r3, [r3, #0]
   2b77e:	2b03      	cmp	r3, #3
   2b780:	d106      	bne.n	2b790 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b782:	68fb      	ldr	r3, [r7, #12]
   2b784:	3301      	adds	r3, #1
   2b786:	60fb      	str	r3, [r7, #12]
   2b788:	68fb      	ldr	r3, [r7, #12]
   2b78a:	2b01      	cmp	r3, #1
   2b78c:	ddeb      	ble.n	2b766 <disk_initialize+0x22>
   2b78e:	e000      	b.n	2b792 <disk_initialize+0x4e>
			break;
   2b790:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b792:	230b      	movs	r3, #11
   2b794:	18fb      	adds	r3, r7, r3
   2b796:	781b      	ldrb	r3, [r3, #0]
   2b798:	2b00      	cmp	r3, #0
   2b79a:	d001      	beq.n	2b7a0 <disk_initialize+0x5c>
		return STA_NOINIT;
   2b79c:	2301      	movs	r3, #1
   2b79e:	e009      	b.n	2b7b4 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b7a0:	1dfb      	adds	r3, r7, #7
   2b7a2:	781b      	ldrb	r3, [r3, #0]
   2b7a4:	0018      	movs	r0, r3
   2b7a6:	4b07      	ldr	r3, [pc, #28]	; (2b7c4 <disk_initialize+0x80>)
   2b7a8:	4798      	blx	r3
   2b7aa:	1e03      	subs	r3, r0, #0
   2b7ac:	d001      	beq.n	2b7b2 <disk_initialize+0x6e>
		return STA_PROTECT;
   2b7ae:	2304      	movs	r3, #4
   2b7b0:	e000      	b.n	2b7b4 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b7b2:	2300      	movs	r3, #0
}
   2b7b4:	0018      	movs	r0, r3
   2b7b6:	46bd      	mov	sp, r7
   2b7b8:	b005      	add	sp, #20
   2b7ba:	bd90      	pop	{r4, r7, pc}
   2b7bc:	0002b6b1 	.word	0x0002b6b1
   2b7c0:	00026415 	.word	0x00026415
   2b7c4:	000264cd 	.word	0x000264cd

0002b7c8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b7c8:	b580      	push	{r7, lr}
   2b7ca:	b082      	sub	sp, #8
   2b7cc:	af00      	add	r7, sp, #0
   2b7ce:	0002      	movs	r2, r0
   2b7d0:	1dfb      	adds	r3, r7, #7
   2b7d2:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b7d4:	1dfb      	adds	r3, r7, #7
   2b7d6:	781b      	ldrb	r3, [r3, #0]
   2b7d8:	0018      	movs	r0, r3
   2b7da:	4b08      	ldr	r3, [pc, #32]	; (2b7fc <disk_status+0x34>)
   2b7dc:	4798      	blx	r3
   2b7de:	1e03      	subs	r3, r0, #0
   2b7e0:	d002      	beq.n	2b7e8 <disk_status+0x20>
   2b7e2:	2b02      	cmp	r3, #2
   2b7e4:	d002      	beq.n	2b7ec <disk_status+0x24>
   2b7e6:	e003      	b.n	2b7f0 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b7e8:	2300      	movs	r3, #0
   2b7ea:	e002      	b.n	2b7f2 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b7ec:	2303      	movs	r3, #3
   2b7ee:	e000      	b.n	2b7f2 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b7f0:	2301      	movs	r3, #1
	}
}
   2b7f2:	0018      	movs	r0, r3
   2b7f4:	46bd      	mov	sp, r7
   2b7f6:	b002      	add	sp, #8
   2b7f8:	bd80      	pop	{r7, pc}
   2b7fa:	46c0      	nop			; (mov r8, r8)
   2b7fc:	00026415 	.word	0x00026415

0002b800 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b800:	b590      	push	{r4, r7, lr}
   2b802:	b089      	sub	sp, #36	; 0x24
   2b804:	af00      	add	r7, sp, #0
   2b806:	60b9      	str	r1, [r7, #8]
   2b808:	607a      	str	r2, [r7, #4]
   2b80a:	0019      	movs	r1, r3
   2b80c:	230f      	movs	r3, #15
   2b80e:	18fb      	adds	r3, r7, r3
   2b810:	1c02      	adds	r2, r0, #0
   2b812:	701a      	strb	r2, [r3, #0]
   2b814:	230e      	movs	r3, #14
   2b816:	18fb      	adds	r3, r7, r3
   2b818:	1c0a      	adds	r2, r1, #0
   2b81a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b81c:	231b      	movs	r3, #27
   2b81e:	18fc      	adds	r4, r7, r3
   2b820:	230f      	movs	r3, #15
   2b822:	18fb      	adds	r3, r7, r3
   2b824:	781b      	ldrb	r3, [r3, #0]
   2b826:	0018      	movs	r0, r3
   2b828:	4b28      	ldr	r3, [pc, #160]	; (2b8cc <disk_read+0xcc>)
   2b82a:	4798      	blx	r3
   2b82c:	0003      	movs	r3, r0
   2b82e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b830:	231b      	movs	r3, #27
   2b832:	18fb      	adds	r3, r7, r3
   2b834:	781b      	ldrb	r3, [r3, #0]
   2b836:	2b00      	cmp	r3, #0
   2b838:	d101      	bne.n	2b83e <disk_read+0x3e>
		return RES_ERROR;
   2b83a:	2301      	movs	r3, #1
   2b83c:	e042      	b.n	2b8c4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b83e:	2314      	movs	r3, #20
   2b840:	18fa      	adds	r2, r7, r3
   2b842:	230f      	movs	r3, #15
   2b844:	18fb      	adds	r3, r7, r3
   2b846:	781b      	ldrb	r3, [r3, #0]
   2b848:	0011      	movs	r1, r2
   2b84a:	0018      	movs	r0, r3
   2b84c:	4b20      	ldr	r3, [pc, #128]	; (2b8d0 <disk_read+0xd0>)
   2b84e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b850:	230e      	movs	r3, #14
   2b852:	18fb      	adds	r3, r7, r3
   2b854:	781b      	ldrb	r3, [r3, #0]
   2b856:	221b      	movs	r2, #27
   2b858:	18ba      	adds	r2, r7, r2
   2b85a:	7812      	ldrb	r2, [r2, #0]
   2b85c:	4353      	muls	r3, r2
   2b85e:	001a      	movs	r2, r3
   2b860:	687b      	ldr	r3, [r7, #4]
   2b862:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b864:	697b      	ldr	r3, [r7, #20]
   2b866:	3301      	adds	r3, #1
   2b868:	211b      	movs	r1, #27
   2b86a:	1879      	adds	r1, r7, r1
   2b86c:	7809      	ldrb	r1, [r1, #0]
   2b86e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b870:	429a      	cmp	r2, r3
   2b872:	d901      	bls.n	2b878 <disk_read+0x78>
		return RES_PARERR;
   2b874:	2304      	movs	r3, #4
   2b876:	e025      	b.n	2b8c4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b878:	2300      	movs	r3, #0
   2b87a:	61fb      	str	r3, [r7, #28]
   2b87c:	e01b      	b.n	2b8b6 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b87e:	231b      	movs	r3, #27
   2b880:	18fb      	adds	r3, r7, r3
   2b882:	781b      	ldrb	r3, [r3, #0]
   2b884:	69fa      	ldr	r2, [r7, #28]
   2b886:	435a      	muls	r2, r3
   2b888:	687b      	ldr	r3, [r7, #4]
   2b88a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b88c:	231b      	movs	r3, #27
   2b88e:	18fb      	adds	r3, r7, r3
   2b890:	781b      	ldrb	r3, [r3, #0]
   2b892:	69fa      	ldr	r2, [r7, #28]
   2b894:	4353      	muls	r3, r2
   2b896:	025b      	lsls	r3, r3, #9
   2b898:	68ba      	ldr	r2, [r7, #8]
   2b89a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b89c:	230f      	movs	r3, #15
   2b89e:	18fb      	adds	r3, r7, r3
   2b8a0:	781b      	ldrb	r3, [r3, #0]
   2b8a2:	0018      	movs	r0, r3
   2b8a4:	4b0b      	ldr	r3, [pc, #44]	; (2b8d4 <disk_read+0xd4>)
   2b8a6:	4798      	blx	r3
   2b8a8:	1e03      	subs	r3, r0, #0
   2b8aa:	d001      	beq.n	2b8b0 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b8ac:	2301      	movs	r3, #1
   2b8ae:	e009      	b.n	2b8c4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b8b0:	69fb      	ldr	r3, [r7, #28]
   2b8b2:	3301      	adds	r3, #1
   2b8b4:	61fb      	str	r3, [r7, #28]
   2b8b6:	230e      	movs	r3, #14
   2b8b8:	18fb      	adds	r3, r7, r3
   2b8ba:	781a      	ldrb	r2, [r3, #0]
   2b8bc:	69fb      	ldr	r3, [r7, #28]
   2b8be:	429a      	cmp	r2, r3
   2b8c0:	d8dd      	bhi.n	2b87e <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b8c2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b8c4:	0018      	movs	r0, r3
   2b8c6:	46bd      	mov	sp, r7
   2b8c8:	b009      	add	sp, #36	; 0x24
   2b8ca:	bd90      	pop	{r4, r7, pc}
   2b8cc:	000264a1 	.word	0x000264a1
   2b8d0:	00026455 	.word	0x00026455
   2b8d4:	00026515 	.word	0x00026515

0002b8d8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b8d8:	b590      	push	{r4, r7, lr}
   2b8da:	b089      	sub	sp, #36	; 0x24
   2b8dc:	af00      	add	r7, sp, #0
   2b8de:	60b9      	str	r1, [r7, #8]
   2b8e0:	607a      	str	r2, [r7, #4]
   2b8e2:	0019      	movs	r1, r3
   2b8e4:	230f      	movs	r3, #15
   2b8e6:	18fb      	adds	r3, r7, r3
   2b8e8:	1c02      	adds	r2, r0, #0
   2b8ea:	701a      	strb	r2, [r3, #0]
   2b8ec:	230e      	movs	r3, #14
   2b8ee:	18fb      	adds	r3, r7, r3
   2b8f0:	1c0a      	adds	r2, r1, #0
   2b8f2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b8f4:	231b      	movs	r3, #27
   2b8f6:	18fc      	adds	r4, r7, r3
   2b8f8:	230f      	movs	r3, #15
   2b8fa:	18fb      	adds	r3, r7, r3
   2b8fc:	781b      	ldrb	r3, [r3, #0]
   2b8fe:	0018      	movs	r0, r3
   2b900:	4b28      	ldr	r3, [pc, #160]	; (2b9a4 <disk_write+0xcc>)
   2b902:	4798      	blx	r3
   2b904:	0003      	movs	r3, r0
   2b906:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b908:	231b      	movs	r3, #27
   2b90a:	18fb      	adds	r3, r7, r3
   2b90c:	781b      	ldrb	r3, [r3, #0]
   2b90e:	2b00      	cmp	r3, #0
   2b910:	d101      	bne.n	2b916 <disk_write+0x3e>
		return RES_ERROR;
   2b912:	2301      	movs	r3, #1
   2b914:	e042      	b.n	2b99c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b916:	2314      	movs	r3, #20
   2b918:	18fa      	adds	r2, r7, r3
   2b91a:	230f      	movs	r3, #15
   2b91c:	18fb      	adds	r3, r7, r3
   2b91e:	781b      	ldrb	r3, [r3, #0]
   2b920:	0011      	movs	r1, r2
   2b922:	0018      	movs	r0, r3
   2b924:	4b20      	ldr	r3, [pc, #128]	; (2b9a8 <disk_write+0xd0>)
   2b926:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b928:	230e      	movs	r3, #14
   2b92a:	18fb      	adds	r3, r7, r3
   2b92c:	781b      	ldrb	r3, [r3, #0]
   2b92e:	221b      	movs	r2, #27
   2b930:	18ba      	adds	r2, r7, r2
   2b932:	7812      	ldrb	r2, [r2, #0]
   2b934:	4353      	muls	r3, r2
   2b936:	001a      	movs	r2, r3
   2b938:	687b      	ldr	r3, [r7, #4]
   2b93a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b93c:	697b      	ldr	r3, [r7, #20]
   2b93e:	3301      	adds	r3, #1
   2b940:	211b      	movs	r1, #27
   2b942:	1879      	adds	r1, r7, r1
   2b944:	7809      	ldrb	r1, [r1, #0]
   2b946:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b948:	429a      	cmp	r2, r3
   2b94a:	d901      	bls.n	2b950 <disk_write+0x78>
		return RES_PARERR;
   2b94c:	2304      	movs	r3, #4
   2b94e:	e025      	b.n	2b99c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b950:	2300      	movs	r3, #0
   2b952:	61fb      	str	r3, [r7, #28]
   2b954:	e01b      	b.n	2b98e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b956:	231b      	movs	r3, #27
   2b958:	18fb      	adds	r3, r7, r3
   2b95a:	781b      	ldrb	r3, [r3, #0]
   2b95c:	69fa      	ldr	r2, [r7, #28]
   2b95e:	435a      	muls	r2, r3
   2b960:	687b      	ldr	r3, [r7, #4]
   2b962:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b964:	231b      	movs	r3, #27
   2b966:	18fb      	adds	r3, r7, r3
   2b968:	781b      	ldrb	r3, [r3, #0]
   2b96a:	69fa      	ldr	r2, [r7, #28]
   2b96c:	4353      	muls	r3, r2
   2b96e:	025b      	lsls	r3, r3, #9
   2b970:	68ba      	ldr	r2, [r7, #8]
   2b972:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b974:	230f      	movs	r3, #15
   2b976:	18fb      	adds	r3, r7, r3
   2b978:	781b      	ldrb	r3, [r3, #0]
   2b97a:	0018      	movs	r0, r3
   2b97c:	4b0b      	ldr	r3, [pc, #44]	; (2b9ac <disk_write+0xd4>)
   2b97e:	4798      	blx	r3
   2b980:	1e03      	subs	r3, r0, #0
   2b982:	d001      	beq.n	2b988 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b984:	2301      	movs	r3, #1
   2b986:	e009      	b.n	2b99c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b988:	69fb      	ldr	r3, [r7, #28]
   2b98a:	3301      	adds	r3, #1
   2b98c:	61fb      	str	r3, [r7, #28]
   2b98e:	230e      	movs	r3, #14
   2b990:	18fb      	adds	r3, r7, r3
   2b992:	781a      	ldrb	r2, [r3, #0]
   2b994:	69fb      	ldr	r3, [r7, #28]
   2b996:	429a      	cmp	r2, r3
   2b998:	d8dd      	bhi.n	2b956 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b99a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b99c:	0018      	movs	r0, r3
   2b99e:	46bd      	mov	sp, r7
   2b9a0:	b009      	add	sp, #36	; 0x24
   2b9a2:	bd90      	pop	{r4, r7, pc}
   2b9a4:	000264a1 	.word	0x000264a1
   2b9a8:	00026455 	.word	0x00026455
   2b9ac:	00026569 	.word	0x00026569

0002b9b0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b9b0:	b590      	push	{r4, r7, lr}
   2b9b2:	b085      	sub	sp, #20
   2b9b4:	af00      	add	r7, sp, #0
   2b9b6:	603a      	str	r2, [r7, #0]
   2b9b8:	1dfb      	adds	r3, r7, #7
   2b9ba:	1c02      	adds	r2, r0, #0
   2b9bc:	701a      	strb	r2, [r3, #0]
   2b9be:	1dbb      	adds	r3, r7, #6
   2b9c0:	1c0a      	adds	r2, r1, #0
   2b9c2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b9c4:	230f      	movs	r3, #15
   2b9c6:	18fb      	adds	r3, r7, r3
   2b9c8:	2204      	movs	r2, #4
   2b9ca:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b9cc:	1dbb      	adds	r3, r7, #6
   2b9ce:	781b      	ldrb	r3, [r3, #0]
   2b9d0:	2b01      	cmp	r3, #1
   2b9d2:	d00f      	beq.n	2b9f4 <disk_ioctl+0x44>
   2b9d4:	dc02      	bgt.n	2b9dc <disk_ioctl+0x2c>
   2b9d6:	2b00      	cmp	r3, #0
   2b9d8:	d044      	beq.n	2ba64 <disk_ioctl+0xb4>
   2b9da:	e054      	b.n	2ba86 <disk_ioctl+0xd6>
   2b9dc:	2b02      	cmp	r3, #2
   2b9de:	d01a      	beq.n	2ba16 <disk_ioctl+0x66>
   2b9e0:	2b03      	cmp	r3, #3
   2b9e2:	d150      	bne.n	2ba86 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b9e4:	683b      	ldr	r3, [r7, #0]
   2b9e6:	2201      	movs	r2, #1
   2b9e8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b9ea:	230f      	movs	r3, #15
   2b9ec:	18fb      	adds	r3, r7, r3
   2b9ee:	2200      	movs	r2, #0
   2b9f0:	701a      	strb	r2, [r3, #0]
		break;
   2b9f2:	e04c      	b.n	2ba8e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b9f4:	2308      	movs	r3, #8
   2b9f6:	18fa      	adds	r2, r7, r3
   2b9f8:	1dfb      	adds	r3, r7, #7
   2b9fa:	781b      	ldrb	r3, [r3, #0]
   2b9fc:	0011      	movs	r1, r2
   2b9fe:	0018      	movs	r0, r3
   2ba00:	4b26      	ldr	r3, [pc, #152]	; (2ba9c <disk_ioctl+0xec>)
   2ba02:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2ba04:	68bb      	ldr	r3, [r7, #8]
   2ba06:	1c5a      	adds	r2, r3, #1
   2ba08:	683b      	ldr	r3, [r7, #0]
   2ba0a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2ba0c:	230f      	movs	r3, #15
   2ba0e:	18fb      	adds	r3, r7, r3
   2ba10:	2200      	movs	r2, #0
   2ba12:	701a      	strb	r2, [r3, #0]
	}
	break;
   2ba14:	e03b      	b.n	2ba8e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2ba16:	230e      	movs	r3, #14
   2ba18:	18fc      	adds	r4, r7, r3
   2ba1a:	1dfb      	adds	r3, r7, #7
   2ba1c:	781b      	ldrb	r3, [r3, #0]
   2ba1e:	0018      	movs	r0, r3
   2ba20:	4b1f      	ldr	r3, [pc, #124]	; (2baa0 <disk_ioctl+0xf0>)
   2ba22:	4798      	blx	r3
   2ba24:	0003      	movs	r3, r0
   2ba26:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2ba28:	230e      	movs	r3, #14
   2ba2a:	18fb      	adds	r3, r7, r3
   2ba2c:	781b      	ldrb	r3, [r3, #0]
   2ba2e:	2b01      	cmp	r3, #1
   2ba30:	d010      	beq.n	2ba54 <disk_ioctl+0xa4>
   2ba32:	230e      	movs	r3, #14
   2ba34:	18fb      	adds	r3, r7, r3
   2ba36:	781b      	ldrb	r3, [r3, #0]
   2ba38:	2b02      	cmp	r3, #2
   2ba3a:	d00b      	beq.n	2ba54 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2ba3c:	230e      	movs	r3, #14
   2ba3e:	18fb      	adds	r3, r7, r3
   2ba40:	781b      	ldrb	r3, [r3, #0]
   2ba42:	2b04      	cmp	r3, #4
   2ba44:	d006      	beq.n	2ba54 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2ba46:	230e      	movs	r3, #14
   2ba48:	18fb      	adds	r3, r7, r3
   2ba4a:	781b      	ldrb	r3, [r3, #0]
   2ba4c:	2b08      	cmp	r3, #8
   2ba4e:	d001      	beq.n	2ba54 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2ba50:	2301      	movs	r3, #1
   2ba52:	e01f      	b.n	2ba94 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2ba54:	683b      	ldr	r3, [r7, #0]
   2ba56:	2200      	movs	r2, #0
   2ba58:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2ba5a:	230f      	movs	r3, #15
   2ba5c:	18fb      	adds	r3, r7, r3
   2ba5e:	2200      	movs	r2, #0
   2ba60:	701a      	strb	r2, [r3, #0]
	}
	break;
   2ba62:	e014      	b.n	2ba8e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2ba64:	1dfb      	adds	r3, r7, #7
   2ba66:	781b      	ldrb	r3, [r3, #0]
   2ba68:	0018      	movs	r0, r3
   2ba6a:	4b0e      	ldr	r3, [pc, #56]	; (2baa4 <disk_ioctl+0xf4>)
   2ba6c:	4798      	blx	r3
   2ba6e:	1e03      	subs	r3, r0, #0
   2ba70:	d104      	bne.n	2ba7c <disk_ioctl+0xcc>
			res = RES_OK;
   2ba72:	230f      	movs	r3, #15
   2ba74:	18fb      	adds	r3, r7, r3
   2ba76:	2200      	movs	r2, #0
   2ba78:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2ba7a:	e008      	b.n	2ba8e <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2ba7c:	230f      	movs	r3, #15
   2ba7e:	18fb      	adds	r3, r7, r3
   2ba80:	2203      	movs	r2, #3
   2ba82:	701a      	strb	r2, [r3, #0]
		break;
   2ba84:	e003      	b.n	2ba8e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2ba86:	230f      	movs	r3, #15
   2ba88:	18fb      	adds	r3, r7, r3
   2ba8a:	2204      	movs	r2, #4
   2ba8c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2ba8e:	230f      	movs	r3, #15
   2ba90:	18fb      	adds	r3, r7, r3
   2ba92:	781b      	ldrb	r3, [r3, #0]
}
   2ba94:	0018      	movs	r0, r3
   2ba96:	46bd      	mov	sp, r7
   2ba98:	b005      	add	sp, #20
   2ba9a:	bd90      	pop	{r4, r7, pc}
   2ba9c:	00026455 	.word	0x00026455
   2baa0:	000264a1 	.word	0x000264a1
   2baa4:	00026415 	.word	0x00026415

0002baa8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2baa8:	b580      	push	{r7, lr}
   2baaa:	b084      	sub	sp, #16
   2baac:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2baae:	1d3a      	adds	r2, r7, #4
   2bab0:	4b12      	ldr	r3, [pc, #72]	; (2bafc <get_fattime+0x54>)
   2bab2:	0011      	movs	r1, r2
   2bab4:	0018      	movs	r0, r3
   2bab6:	4b12      	ldr	r3, [pc, #72]	; (2bb00 <get_fattime+0x58>)
   2bab8:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2baba:	1d3b      	adds	r3, r7, #4
   2babc:	88db      	ldrh	r3, [r3, #6]
   2babe:	4a11      	ldr	r2, [pc, #68]	; (2bb04 <get_fattime+0x5c>)
   2bac0:	4694      	mov	ip, r2
   2bac2:	4463      	add	r3, ip
   2bac4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2bac6:	1d3b      	adds	r3, r7, #4
   2bac8:	795b      	ldrb	r3, [r3, #5]
   2baca:	055b      	lsls	r3, r3, #21
   2bacc:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2bace:	1d3b      	adds	r3, r7, #4
   2bad0:	791b      	ldrb	r3, [r3, #4]
   2bad2:	041b      	lsls	r3, r3, #16
   2bad4:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2bad6:	1d3b      	adds	r3, r7, #4
   2bad8:	789b      	ldrb	r3, [r3, #2]
   2bada:	02db      	lsls	r3, r3, #11
   2badc:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2bade:	1d3b      	adds	r3, r7, #4
   2bae0:	785b      	ldrb	r3, [r3, #1]
   2bae2:	015b      	lsls	r3, r3, #5
   2bae4:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2bae6:	1d3a      	adds	r2, r7, #4
   2bae8:	7812      	ldrb	r2, [r2, #0]
   2baea:	0852      	lsrs	r2, r2, #1
   2baec:	b2d2      	uxtb	r2, r2
   2baee:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2baf0:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2baf2:	68fb      	ldr	r3, [r7, #12]
}
   2baf4:	0018      	movs	r0, r3
   2baf6:	46bd      	mov	sp, r7
   2baf8:	b004      	add	sp, #16
   2bafa:	bd80      	pop	{r7, pc}
   2bafc:	20005c78 	.word	0x20005c78
   2bb00:	00027281 	.word	0x00027281
   2bb04:	fffff844 	.word	0xfffff844

0002bb08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2bb08:	b580      	push	{r7, lr}
   2bb0a:	b086      	sub	sp, #24
   2bb0c:	af00      	add	r7, sp, #0
   2bb0e:	60f8      	str	r0, [r7, #12]
   2bb10:	60b9      	str	r1, [r7, #8]
   2bb12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2bb14:	68fb      	ldr	r3, [r7, #12]
   2bb16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2bb18:	68bb      	ldr	r3, [r7, #8]
   2bb1a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2bb1c:	e007      	b.n	2bb2e <mem_cpy+0x26>
		*d++ = *s++;
   2bb1e:	697b      	ldr	r3, [r7, #20]
   2bb20:	1c5a      	adds	r2, r3, #1
   2bb22:	617a      	str	r2, [r7, #20]
   2bb24:	693a      	ldr	r2, [r7, #16]
   2bb26:	1c51      	adds	r1, r2, #1
   2bb28:	6139      	str	r1, [r7, #16]
   2bb2a:	7812      	ldrb	r2, [r2, #0]
   2bb2c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2bb2e:	687b      	ldr	r3, [r7, #4]
   2bb30:	1e5a      	subs	r2, r3, #1
   2bb32:	607a      	str	r2, [r7, #4]
   2bb34:	2b00      	cmp	r3, #0
   2bb36:	d1f2      	bne.n	2bb1e <mem_cpy+0x16>
}
   2bb38:	46c0      	nop			; (mov r8, r8)
   2bb3a:	46bd      	mov	sp, r7
   2bb3c:	b006      	add	sp, #24
   2bb3e:	bd80      	pop	{r7, pc}

0002bb40 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2bb40:	b580      	push	{r7, lr}
   2bb42:	b086      	sub	sp, #24
   2bb44:	af00      	add	r7, sp, #0
   2bb46:	60f8      	str	r0, [r7, #12]
   2bb48:	60b9      	str	r1, [r7, #8]
   2bb4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2bb4c:	68fb      	ldr	r3, [r7, #12]
   2bb4e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2bb50:	e005      	b.n	2bb5e <mem_set+0x1e>
		*d++ = (BYTE)val;
   2bb52:	697b      	ldr	r3, [r7, #20]
   2bb54:	1c5a      	adds	r2, r3, #1
   2bb56:	617a      	str	r2, [r7, #20]
   2bb58:	68ba      	ldr	r2, [r7, #8]
   2bb5a:	b2d2      	uxtb	r2, r2
   2bb5c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2bb5e:	687b      	ldr	r3, [r7, #4]
   2bb60:	1e5a      	subs	r2, r3, #1
   2bb62:	607a      	str	r2, [r7, #4]
   2bb64:	2b00      	cmp	r3, #0
   2bb66:	d1f4      	bne.n	2bb52 <mem_set+0x12>
}
   2bb68:	46c0      	nop			; (mov r8, r8)
   2bb6a:	46bd      	mov	sp, r7
   2bb6c:	b006      	add	sp, #24
   2bb6e:	bd80      	pop	{r7, pc}

0002bb70 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2bb70:	b580      	push	{r7, lr}
   2bb72:	b088      	sub	sp, #32
   2bb74:	af00      	add	r7, sp, #0
   2bb76:	60f8      	str	r0, [r7, #12]
   2bb78:	60b9      	str	r1, [r7, #8]
   2bb7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2bb7c:	68fb      	ldr	r3, [r7, #12]
   2bb7e:	61fb      	str	r3, [r7, #28]
   2bb80:	68bb      	ldr	r3, [r7, #8]
   2bb82:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2bb84:	2300      	movs	r3, #0
   2bb86:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2bb88:	46c0      	nop			; (mov r8, r8)
   2bb8a:	687b      	ldr	r3, [r7, #4]
   2bb8c:	1e5a      	subs	r2, r3, #1
   2bb8e:	607a      	str	r2, [r7, #4]
   2bb90:	2b00      	cmp	r3, #0
   2bb92:	d00d      	beq.n	2bbb0 <mem_cmp+0x40>
   2bb94:	69fb      	ldr	r3, [r7, #28]
   2bb96:	1c5a      	adds	r2, r3, #1
   2bb98:	61fa      	str	r2, [r7, #28]
   2bb9a:	781b      	ldrb	r3, [r3, #0]
   2bb9c:	0019      	movs	r1, r3
   2bb9e:	69bb      	ldr	r3, [r7, #24]
   2bba0:	1c5a      	adds	r2, r3, #1
   2bba2:	61ba      	str	r2, [r7, #24]
   2bba4:	781b      	ldrb	r3, [r3, #0]
   2bba6:	1acb      	subs	r3, r1, r3
   2bba8:	617b      	str	r3, [r7, #20]
   2bbaa:	697b      	ldr	r3, [r7, #20]
   2bbac:	2b00      	cmp	r3, #0
   2bbae:	d0ec      	beq.n	2bb8a <mem_cmp+0x1a>
	return r;
   2bbb0:	697b      	ldr	r3, [r7, #20]
}
   2bbb2:	0018      	movs	r0, r3
   2bbb4:	46bd      	mov	sp, r7
   2bbb6:	b008      	add	sp, #32
   2bbb8:	bd80      	pop	{r7, pc}

0002bbba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2bbba:	b580      	push	{r7, lr}
   2bbbc:	b082      	sub	sp, #8
   2bbbe:	af00      	add	r7, sp, #0
   2bbc0:	6078      	str	r0, [r7, #4]
   2bbc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2bbc4:	e002      	b.n	2bbcc <chk_chr+0x12>
   2bbc6:	687b      	ldr	r3, [r7, #4]
   2bbc8:	3301      	adds	r3, #1
   2bbca:	607b      	str	r3, [r7, #4]
   2bbcc:	687b      	ldr	r3, [r7, #4]
   2bbce:	781b      	ldrb	r3, [r3, #0]
   2bbd0:	2b00      	cmp	r3, #0
   2bbd2:	d005      	beq.n	2bbe0 <chk_chr+0x26>
   2bbd4:	687b      	ldr	r3, [r7, #4]
   2bbd6:	781b      	ldrb	r3, [r3, #0]
   2bbd8:	001a      	movs	r2, r3
   2bbda:	683b      	ldr	r3, [r7, #0]
   2bbdc:	429a      	cmp	r2, r3
   2bbde:	d1f2      	bne.n	2bbc6 <chk_chr+0xc>
	return *str;
   2bbe0:	687b      	ldr	r3, [r7, #4]
   2bbe2:	781b      	ldrb	r3, [r3, #0]
}
   2bbe4:	0018      	movs	r0, r3
   2bbe6:	46bd      	mov	sp, r7
   2bbe8:	b002      	add	sp, #8
   2bbea:	bd80      	pop	{r7, pc}

0002bbec <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2bbec:	b590      	push	{r4, r7, lr}
   2bbee:	b085      	sub	sp, #20
   2bbf0:	af00      	add	r7, sp, #0
   2bbf2:	6078      	str	r0, [r7, #4]
   2bbf4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2bbf6:	687b      	ldr	r3, [r7, #4]
   2bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2bbfa:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2bbfc:	68fa      	ldr	r2, [r7, #12]
   2bbfe:	683b      	ldr	r3, [r7, #0]
   2bc00:	429a      	cmp	r2, r3
   2bc02:	d04e      	beq.n	2bca2 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2bc04:	687b      	ldr	r3, [r7, #4]
   2bc06:	791b      	ldrb	r3, [r3, #4]
   2bc08:	2b00      	cmp	r3, #0
   2bc0a:	d037      	beq.n	2bc7c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2bc0c:	687b      	ldr	r3, [r7, #4]
   2bc0e:	7858      	ldrb	r0, [r3, #1]
   2bc10:	687b      	ldr	r3, [r7, #4]
   2bc12:	3330      	adds	r3, #48	; 0x30
   2bc14:	0019      	movs	r1, r3
   2bc16:	68fa      	ldr	r2, [r7, #12]
   2bc18:	2301      	movs	r3, #1
   2bc1a:	4c24      	ldr	r4, [pc, #144]	; (2bcac <move_window+0xc0>)
   2bc1c:	47a0      	blx	r4
   2bc1e:	1e03      	subs	r3, r0, #0
   2bc20:	d001      	beq.n	2bc26 <move_window+0x3a>
				return FR_DISK_ERR;
   2bc22:	2301      	movs	r3, #1
   2bc24:	e03e      	b.n	2bca4 <move_window+0xb8>
			fs->wflag = 0;
   2bc26:	687b      	ldr	r3, [r7, #4]
   2bc28:	2200      	movs	r2, #0
   2bc2a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2bc2c:	687b      	ldr	r3, [r7, #4]
   2bc2e:	6a1a      	ldr	r2, [r3, #32]
   2bc30:	687b      	ldr	r3, [r7, #4]
   2bc32:	69db      	ldr	r3, [r3, #28]
   2bc34:	18d2      	adds	r2, r2, r3
   2bc36:	68fb      	ldr	r3, [r7, #12]
   2bc38:	429a      	cmp	r2, r3
   2bc3a:	d91f      	bls.n	2bc7c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bc3c:	230b      	movs	r3, #11
   2bc3e:	18fb      	adds	r3, r7, r3
   2bc40:	687a      	ldr	r2, [r7, #4]
   2bc42:	78d2      	ldrb	r2, [r2, #3]
   2bc44:	701a      	strb	r2, [r3, #0]
   2bc46:	e014      	b.n	2bc72 <move_window+0x86>
					wsect += fs->fsize;
   2bc48:	687b      	ldr	r3, [r7, #4]
   2bc4a:	69db      	ldr	r3, [r3, #28]
   2bc4c:	68fa      	ldr	r2, [r7, #12]
   2bc4e:	18d3      	adds	r3, r2, r3
   2bc50:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2bc52:	687b      	ldr	r3, [r7, #4]
   2bc54:	7858      	ldrb	r0, [r3, #1]
   2bc56:	687b      	ldr	r3, [r7, #4]
   2bc58:	3330      	adds	r3, #48	; 0x30
   2bc5a:	0019      	movs	r1, r3
   2bc5c:	68fa      	ldr	r2, [r7, #12]
   2bc5e:	2301      	movs	r3, #1
   2bc60:	4c12      	ldr	r4, [pc, #72]	; (2bcac <move_window+0xc0>)
   2bc62:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bc64:	230b      	movs	r3, #11
   2bc66:	18fb      	adds	r3, r7, r3
   2bc68:	781a      	ldrb	r2, [r3, #0]
   2bc6a:	230b      	movs	r3, #11
   2bc6c:	18fb      	adds	r3, r7, r3
   2bc6e:	3a01      	subs	r2, #1
   2bc70:	701a      	strb	r2, [r3, #0]
   2bc72:	230b      	movs	r3, #11
   2bc74:	18fb      	adds	r3, r7, r3
   2bc76:	781b      	ldrb	r3, [r3, #0]
   2bc78:	2b01      	cmp	r3, #1
   2bc7a:	d8e5      	bhi.n	2bc48 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2bc7c:	683b      	ldr	r3, [r7, #0]
   2bc7e:	2b00      	cmp	r3, #0
   2bc80:	d00f      	beq.n	2bca2 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2bc82:	687b      	ldr	r3, [r7, #4]
   2bc84:	7858      	ldrb	r0, [r3, #1]
   2bc86:	687b      	ldr	r3, [r7, #4]
   2bc88:	3330      	adds	r3, #48	; 0x30
   2bc8a:	0019      	movs	r1, r3
   2bc8c:	683a      	ldr	r2, [r7, #0]
   2bc8e:	2301      	movs	r3, #1
   2bc90:	4c07      	ldr	r4, [pc, #28]	; (2bcb0 <move_window+0xc4>)
   2bc92:	47a0      	blx	r4
   2bc94:	1e03      	subs	r3, r0, #0
   2bc96:	d001      	beq.n	2bc9c <move_window+0xb0>
				return FR_DISK_ERR;
   2bc98:	2301      	movs	r3, #1
   2bc9a:	e003      	b.n	2bca4 <move_window+0xb8>
			fs->winsect = sector;
   2bc9c:	687b      	ldr	r3, [r7, #4]
   2bc9e:	683a      	ldr	r2, [r7, #0]
   2bca0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2bca2:	2300      	movs	r3, #0
}
   2bca4:	0018      	movs	r0, r3
   2bca6:	46bd      	mov	sp, r7
   2bca8:	b005      	add	sp, #20
   2bcaa:	bd90      	pop	{r4, r7, pc}
   2bcac:	0002b8d9 	.word	0x0002b8d9
   2bcb0:	0002b801 	.word	0x0002b801

0002bcb4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2bcb4:	b590      	push	{r4, r7, lr}
   2bcb6:	b085      	sub	sp, #20
   2bcb8:	af00      	add	r7, sp, #0
   2bcba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2bcbc:	230f      	movs	r3, #15
   2bcbe:	18fc      	adds	r4, r7, r3
   2bcc0:	687b      	ldr	r3, [r7, #4]
   2bcc2:	2100      	movs	r1, #0
   2bcc4:	0018      	movs	r0, r3
   2bcc6:	4b52      	ldr	r3, [pc, #328]	; (2be10 <sync+0x15c>)
   2bcc8:	4798      	blx	r3
   2bcca:	0003      	movs	r3, r0
   2bccc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2bcce:	230f      	movs	r3, #15
   2bcd0:	18fb      	adds	r3, r7, r3
   2bcd2:	781b      	ldrb	r3, [r3, #0]
   2bcd4:	2b00      	cmp	r3, #0
   2bcd6:	d000      	beq.n	2bcda <sync+0x26>
   2bcd8:	e093      	b.n	2be02 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2bcda:	687b      	ldr	r3, [r7, #4]
   2bcdc:	781b      	ldrb	r3, [r3, #0]
   2bcde:	2b03      	cmp	r3, #3
   2bce0:	d000      	beq.n	2bce4 <sync+0x30>
   2bce2:	e081      	b.n	2bde8 <sync+0x134>
   2bce4:	687b      	ldr	r3, [r7, #4]
   2bce6:	795b      	ldrb	r3, [r3, #5]
   2bce8:	2b00      	cmp	r3, #0
   2bcea:	d07d      	beq.n	2bde8 <sync+0x134>
			fs->winsect = 0;
   2bcec:	687b      	ldr	r3, [r7, #4]
   2bcee:	2200      	movs	r2, #0
   2bcf0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2bcf2:	687b      	ldr	r3, [r7, #4]
   2bcf4:	3330      	adds	r3, #48	; 0x30
   2bcf6:	0018      	movs	r0, r3
   2bcf8:	2380      	movs	r3, #128	; 0x80
   2bcfa:	009b      	lsls	r3, r3, #2
   2bcfc:	001a      	movs	r2, r3
   2bcfe:	2100      	movs	r1, #0
   2bd00:	4b44      	ldr	r3, [pc, #272]	; (2be14 <sync+0x160>)
   2bd02:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2bd04:	687b      	ldr	r3, [r7, #4]
   2bd06:	4a44      	ldr	r2, [pc, #272]	; (2be18 <sync+0x164>)
   2bd08:	2155      	movs	r1, #85	; 0x55
   2bd0a:	5499      	strb	r1, [r3, r2]
   2bd0c:	687b      	ldr	r3, [r7, #4]
   2bd0e:	4a43      	ldr	r2, [pc, #268]	; (2be1c <sync+0x168>)
   2bd10:	21aa      	movs	r1, #170	; 0xaa
   2bd12:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2bd14:	687b      	ldr	r3, [r7, #4]
   2bd16:	2230      	movs	r2, #48	; 0x30
   2bd18:	2152      	movs	r1, #82	; 0x52
   2bd1a:	5499      	strb	r1, [r3, r2]
   2bd1c:	687b      	ldr	r3, [r7, #4]
   2bd1e:	2231      	movs	r2, #49	; 0x31
   2bd20:	2152      	movs	r1, #82	; 0x52
   2bd22:	5499      	strb	r1, [r3, r2]
   2bd24:	687b      	ldr	r3, [r7, #4]
   2bd26:	2232      	movs	r2, #50	; 0x32
   2bd28:	2161      	movs	r1, #97	; 0x61
   2bd2a:	5499      	strb	r1, [r3, r2]
   2bd2c:	687b      	ldr	r3, [r7, #4]
   2bd2e:	2233      	movs	r2, #51	; 0x33
   2bd30:	2141      	movs	r1, #65	; 0x41
   2bd32:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2bd34:	687a      	ldr	r2, [r7, #4]
   2bd36:	2385      	movs	r3, #133	; 0x85
   2bd38:	009b      	lsls	r3, r3, #2
   2bd3a:	2172      	movs	r1, #114	; 0x72
   2bd3c:	54d1      	strb	r1, [r2, r3]
   2bd3e:	687b      	ldr	r3, [r7, #4]
   2bd40:	4a37      	ldr	r2, [pc, #220]	; (2be20 <sync+0x16c>)
   2bd42:	2172      	movs	r1, #114	; 0x72
   2bd44:	5499      	strb	r1, [r3, r2]
   2bd46:	687b      	ldr	r3, [r7, #4]
   2bd48:	4a36      	ldr	r2, [pc, #216]	; (2be24 <sync+0x170>)
   2bd4a:	2141      	movs	r1, #65	; 0x41
   2bd4c:	5499      	strb	r1, [r3, r2]
   2bd4e:	687b      	ldr	r3, [r7, #4]
   2bd50:	4a35      	ldr	r2, [pc, #212]	; (2be28 <sync+0x174>)
   2bd52:	2161      	movs	r1, #97	; 0x61
   2bd54:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2bd56:	687b      	ldr	r3, [r7, #4]
   2bd58:	691b      	ldr	r3, [r3, #16]
   2bd5a:	b2d9      	uxtb	r1, r3
   2bd5c:	687a      	ldr	r2, [r7, #4]
   2bd5e:	2386      	movs	r3, #134	; 0x86
   2bd60:	009b      	lsls	r3, r3, #2
   2bd62:	54d1      	strb	r1, [r2, r3]
   2bd64:	687b      	ldr	r3, [r7, #4]
   2bd66:	691b      	ldr	r3, [r3, #16]
   2bd68:	b29b      	uxth	r3, r3
   2bd6a:	0a1b      	lsrs	r3, r3, #8
   2bd6c:	b29b      	uxth	r3, r3
   2bd6e:	b2d9      	uxtb	r1, r3
   2bd70:	687b      	ldr	r3, [r7, #4]
   2bd72:	4a2e      	ldr	r2, [pc, #184]	; (2be2c <sync+0x178>)
   2bd74:	5499      	strb	r1, [r3, r2]
   2bd76:	687b      	ldr	r3, [r7, #4]
   2bd78:	691b      	ldr	r3, [r3, #16]
   2bd7a:	0c1b      	lsrs	r3, r3, #16
   2bd7c:	b2d9      	uxtb	r1, r3
   2bd7e:	687b      	ldr	r3, [r7, #4]
   2bd80:	4a2b      	ldr	r2, [pc, #172]	; (2be30 <sync+0x17c>)
   2bd82:	5499      	strb	r1, [r3, r2]
   2bd84:	687b      	ldr	r3, [r7, #4]
   2bd86:	691b      	ldr	r3, [r3, #16]
   2bd88:	0e1b      	lsrs	r3, r3, #24
   2bd8a:	b2d9      	uxtb	r1, r3
   2bd8c:	687b      	ldr	r3, [r7, #4]
   2bd8e:	4a29      	ldr	r2, [pc, #164]	; (2be34 <sync+0x180>)
   2bd90:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2bd92:	687b      	ldr	r3, [r7, #4]
   2bd94:	68db      	ldr	r3, [r3, #12]
   2bd96:	b2d9      	uxtb	r1, r3
   2bd98:	687a      	ldr	r2, [r7, #4]
   2bd9a:	2387      	movs	r3, #135	; 0x87
   2bd9c:	009b      	lsls	r3, r3, #2
   2bd9e:	54d1      	strb	r1, [r2, r3]
   2bda0:	687b      	ldr	r3, [r7, #4]
   2bda2:	68db      	ldr	r3, [r3, #12]
   2bda4:	b29b      	uxth	r3, r3
   2bda6:	0a1b      	lsrs	r3, r3, #8
   2bda8:	b29b      	uxth	r3, r3
   2bdaa:	b2d9      	uxtb	r1, r3
   2bdac:	687b      	ldr	r3, [r7, #4]
   2bdae:	4a22      	ldr	r2, [pc, #136]	; (2be38 <sync+0x184>)
   2bdb0:	5499      	strb	r1, [r3, r2]
   2bdb2:	687b      	ldr	r3, [r7, #4]
   2bdb4:	68db      	ldr	r3, [r3, #12]
   2bdb6:	0c1b      	lsrs	r3, r3, #16
   2bdb8:	b2d9      	uxtb	r1, r3
   2bdba:	687b      	ldr	r3, [r7, #4]
   2bdbc:	4a1f      	ldr	r2, [pc, #124]	; (2be3c <sync+0x188>)
   2bdbe:	5499      	strb	r1, [r3, r2]
   2bdc0:	687b      	ldr	r3, [r7, #4]
   2bdc2:	68db      	ldr	r3, [r3, #12]
   2bdc4:	0e1b      	lsrs	r3, r3, #24
   2bdc6:	b2d9      	uxtb	r1, r3
   2bdc8:	687b      	ldr	r3, [r7, #4]
   2bdca:	4a1d      	ldr	r2, [pc, #116]	; (2be40 <sync+0x18c>)
   2bdcc:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2bdce:	687b      	ldr	r3, [r7, #4]
   2bdd0:	7858      	ldrb	r0, [r3, #1]
   2bdd2:	687b      	ldr	r3, [r7, #4]
   2bdd4:	3330      	adds	r3, #48	; 0x30
   2bdd6:	0019      	movs	r1, r3
   2bdd8:	687b      	ldr	r3, [r7, #4]
   2bdda:	695a      	ldr	r2, [r3, #20]
   2bddc:	2301      	movs	r3, #1
   2bdde:	4c19      	ldr	r4, [pc, #100]	; (2be44 <sync+0x190>)
   2bde0:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2bde2:	687b      	ldr	r3, [r7, #4]
   2bde4:	2200      	movs	r2, #0
   2bde6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2bde8:	687b      	ldr	r3, [r7, #4]
   2bdea:	785b      	ldrb	r3, [r3, #1]
   2bdec:	2200      	movs	r2, #0
   2bdee:	2100      	movs	r1, #0
   2bdf0:	0018      	movs	r0, r3
   2bdf2:	4b15      	ldr	r3, [pc, #84]	; (2be48 <sync+0x194>)
   2bdf4:	4798      	blx	r3
   2bdf6:	1e03      	subs	r3, r0, #0
   2bdf8:	d003      	beq.n	2be02 <sync+0x14e>
			res = FR_DISK_ERR;
   2bdfa:	230f      	movs	r3, #15
   2bdfc:	18fb      	adds	r3, r7, r3
   2bdfe:	2201      	movs	r2, #1
   2be00:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2be02:	230f      	movs	r3, #15
   2be04:	18fb      	adds	r3, r7, r3
   2be06:	781b      	ldrb	r3, [r3, #0]
}
   2be08:	0018      	movs	r0, r3
   2be0a:	46bd      	mov	sp, r7
   2be0c:	b005      	add	sp, #20
   2be0e:	bd90      	pop	{r4, r7, pc}
   2be10:	0002bbed 	.word	0x0002bbed
   2be14:	0002bb41 	.word	0x0002bb41
   2be18:	0000022e 	.word	0x0000022e
   2be1c:	0000022f 	.word	0x0000022f
   2be20:	00000215 	.word	0x00000215
   2be24:	00000216 	.word	0x00000216
   2be28:	00000217 	.word	0x00000217
   2be2c:	00000219 	.word	0x00000219
   2be30:	0000021a 	.word	0x0000021a
   2be34:	0000021b 	.word	0x0000021b
   2be38:	0000021d 	.word	0x0000021d
   2be3c:	0000021e 	.word	0x0000021e
   2be40:	0000021f 	.word	0x0000021f
   2be44:	0002b8d9 	.word	0x0002b8d9
   2be48:	0002b9b1 	.word	0x0002b9b1

0002be4c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2be4c:	b580      	push	{r7, lr}
   2be4e:	b082      	sub	sp, #8
   2be50:	af00      	add	r7, sp, #0
   2be52:	6078      	str	r0, [r7, #4]
   2be54:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2be56:	683b      	ldr	r3, [r7, #0]
   2be58:	3b02      	subs	r3, #2
   2be5a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2be5c:	687b      	ldr	r3, [r7, #4]
   2be5e:	699b      	ldr	r3, [r3, #24]
   2be60:	1e9a      	subs	r2, r3, #2
   2be62:	683b      	ldr	r3, [r7, #0]
   2be64:	429a      	cmp	r2, r3
   2be66:	d801      	bhi.n	2be6c <clust2sect+0x20>
   2be68:	2300      	movs	r3, #0
   2be6a:	e007      	b.n	2be7c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2be6c:	687b      	ldr	r3, [r7, #4]
   2be6e:	789b      	ldrb	r3, [r3, #2]
   2be70:	001a      	movs	r2, r3
   2be72:	683b      	ldr	r3, [r7, #0]
   2be74:	435a      	muls	r2, r3
   2be76:	687b      	ldr	r3, [r7, #4]
   2be78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2be7a:	18d3      	adds	r3, r2, r3
}
   2be7c:	0018      	movs	r0, r3
   2be7e:	46bd      	mov	sp, r7
   2be80:	b002      	add	sp, #8
   2be82:	bd80      	pop	{r7, pc}

0002be84 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2be84:	b580      	push	{r7, lr}
   2be86:	b086      	sub	sp, #24
   2be88:	af00      	add	r7, sp, #0
   2be8a:	6078      	str	r0, [r7, #4]
   2be8c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2be8e:	683b      	ldr	r3, [r7, #0]
   2be90:	2b01      	cmp	r3, #1
   2be92:	d904      	bls.n	2be9e <get_fat+0x1a>
   2be94:	687b      	ldr	r3, [r7, #4]
   2be96:	699a      	ldr	r2, [r3, #24]
   2be98:	683b      	ldr	r3, [r7, #0]
   2be9a:	429a      	cmp	r2, r3
   2be9c:	d801      	bhi.n	2bea2 <get_fat+0x1e>
		return 1;
   2be9e:	2301      	movs	r3, #1
   2bea0:	e09f      	b.n	2bfe2 <get_fat+0x15e>

	switch (fs->fs_type) {
   2bea2:	687b      	ldr	r3, [r7, #4]
   2bea4:	781b      	ldrb	r3, [r3, #0]
   2bea6:	2b02      	cmp	r3, #2
   2bea8:	d048      	beq.n	2bf3c <get_fat+0xb8>
   2beaa:	2b03      	cmp	r3, #3
   2beac:	d067      	beq.n	2bf7e <get_fat+0xfa>
   2beae:	2b01      	cmp	r3, #1
   2beb0:	d000      	beq.n	2beb4 <get_fat+0x30>
   2beb2:	e094      	b.n	2bfde <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2beb4:	683b      	ldr	r3, [r7, #0]
   2beb6:	617b      	str	r3, [r7, #20]
   2beb8:	697b      	ldr	r3, [r7, #20]
   2beba:	085b      	lsrs	r3, r3, #1
   2bebc:	697a      	ldr	r2, [r7, #20]
   2bebe:	18d3      	adds	r3, r2, r3
   2bec0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bec2:	687b      	ldr	r3, [r7, #4]
   2bec4:	6a1a      	ldr	r2, [r3, #32]
   2bec6:	697b      	ldr	r3, [r7, #20]
   2bec8:	0a5b      	lsrs	r3, r3, #9
   2beca:	18d2      	adds	r2, r2, r3
   2becc:	687b      	ldr	r3, [r7, #4]
   2bece:	0011      	movs	r1, r2
   2bed0:	0018      	movs	r0, r3
   2bed2:	4b46      	ldr	r3, [pc, #280]	; (2bfec <get_fat+0x168>)
   2bed4:	4798      	blx	r3
   2bed6:	1e03      	subs	r3, r0, #0
   2bed8:	d000      	beq.n	2bedc <get_fat+0x58>
   2beda:	e079      	b.n	2bfd0 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2bedc:	697b      	ldr	r3, [r7, #20]
   2bede:	05db      	lsls	r3, r3, #23
   2bee0:	0ddb      	lsrs	r3, r3, #23
   2bee2:	687a      	ldr	r2, [r7, #4]
   2bee4:	2130      	movs	r1, #48	; 0x30
   2bee6:	18d3      	adds	r3, r2, r3
   2bee8:	185b      	adds	r3, r3, r1
   2beea:	781b      	ldrb	r3, [r3, #0]
   2beec:	613b      	str	r3, [r7, #16]
   2beee:	697b      	ldr	r3, [r7, #20]
   2bef0:	3301      	adds	r3, #1
   2bef2:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bef4:	687b      	ldr	r3, [r7, #4]
   2bef6:	6a1a      	ldr	r2, [r3, #32]
   2bef8:	697b      	ldr	r3, [r7, #20]
   2befa:	0a5b      	lsrs	r3, r3, #9
   2befc:	18d2      	adds	r2, r2, r3
   2befe:	687b      	ldr	r3, [r7, #4]
   2bf00:	0011      	movs	r1, r2
   2bf02:	0018      	movs	r0, r3
   2bf04:	4b39      	ldr	r3, [pc, #228]	; (2bfec <get_fat+0x168>)
   2bf06:	4798      	blx	r3
   2bf08:	1e03      	subs	r3, r0, #0
   2bf0a:	d163      	bne.n	2bfd4 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2bf0c:	697b      	ldr	r3, [r7, #20]
   2bf0e:	05db      	lsls	r3, r3, #23
   2bf10:	0ddb      	lsrs	r3, r3, #23
   2bf12:	687a      	ldr	r2, [r7, #4]
   2bf14:	2130      	movs	r1, #48	; 0x30
   2bf16:	18d3      	adds	r3, r2, r3
   2bf18:	185b      	adds	r3, r3, r1
   2bf1a:	781b      	ldrb	r3, [r3, #0]
   2bf1c:	021b      	lsls	r3, r3, #8
   2bf1e:	001a      	movs	r2, r3
   2bf20:	693b      	ldr	r3, [r7, #16]
   2bf22:	4313      	orrs	r3, r2
   2bf24:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2bf26:	683b      	ldr	r3, [r7, #0]
   2bf28:	2201      	movs	r2, #1
   2bf2a:	4013      	ands	r3, r2
   2bf2c:	d002      	beq.n	2bf34 <get_fat+0xb0>
   2bf2e:	693b      	ldr	r3, [r7, #16]
   2bf30:	091b      	lsrs	r3, r3, #4
   2bf32:	e056      	b.n	2bfe2 <get_fat+0x15e>
   2bf34:	693b      	ldr	r3, [r7, #16]
   2bf36:	051b      	lsls	r3, r3, #20
   2bf38:	0d1b      	lsrs	r3, r3, #20
   2bf3a:	e052      	b.n	2bfe2 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2bf3c:	687b      	ldr	r3, [r7, #4]
   2bf3e:	6a1a      	ldr	r2, [r3, #32]
   2bf40:	683b      	ldr	r3, [r7, #0]
   2bf42:	0a1b      	lsrs	r3, r3, #8
   2bf44:	18d2      	adds	r2, r2, r3
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	0011      	movs	r1, r2
   2bf4a:	0018      	movs	r0, r3
   2bf4c:	4b27      	ldr	r3, [pc, #156]	; (2bfec <get_fat+0x168>)
   2bf4e:	4798      	blx	r3
   2bf50:	1e03      	subs	r3, r0, #0
   2bf52:	d141      	bne.n	2bfd8 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2bf54:	683b      	ldr	r3, [r7, #0]
   2bf56:	005a      	lsls	r2, r3, #1
   2bf58:	23ff      	movs	r3, #255	; 0xff
   2bf5a:	005b      	lsls	r3, r3, #1
   2bf5c:	4013      	ands	r3, r2
   2bf5e:	3330      	adds	r3, #48	; 0x30
   2bf60:	687a      	ldr	r2, [r7, #4]
   2bf62:	18d3      	adds	r3, r2, r3
   2bf64:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2bf66:	68fb      	ldr	r3, [r7, #12]
   2bf68:	3301      	adds	r3, #1
   2bf6a:	781b      	ldrb	r3, [r3, #0]
   2bf6c:	021b      	lsls	r3, r3, #8
   2bf6e:	b21a      	sxth	r2, r3
   2bf70:	68fb      	ldr	r3, [r7, #12]
   2bf72:	781b      	ldrb	r3, [r3, #0]
   2bf74:	b21b      	sxth	r3, r3
   2bf76:	4313      	orrs	r3, r2
   2bf78:	b21b      	sxth	r3, r3
   2bf7a:	b29b      	uxth	r3, r3
   2bf7c:	e031      	b.n	2bfe2 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2bf7e:	687b      	ldr	r3, [r7, #4]
   2bf80:	6a1a      	ldr	r2, [r3, #32]
   2bf82:	683b      	ldr	r3, [r7, #0]
   2bf84:	09db      	lsrs	r3, r3, #7
   2bf86:	18d2      	adds	r2, r2, r3
   2bf88:	687b      	ldr	r3, [r7, #4]
   2bf8a:	0011      	movs	r1, r2
   2bf8c:	0018      	movs	r0, r3
   2bf8e:	4b17      	ldr	r3, [pc, #92]	; (2bfec <get_fat+0x168>)
   2bf90:	4798      	blx	r3
   2bf92:	1e03      	subs	r3, r0, #0
   2bf94:	d122      	bne.n	2bfdc <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2bf96:	683b      	ldr	r3, [r7, #0]
   2bf98:	009a      	lsls	r2, r3, #2
   2bf9a:	23fe      	movs	r3, #254	; 0xfe
   2bf9c:	005b      	lsls	r3, r3, #1
   2bf9e:	4013      	ands	r3, r2
   2bfa0:	3330      	adds	r3, #48	; 0x30
   2bfa2:	687a      	ldr	r2, [r7, #4]
   2bfa4:	18d3      	adds	r3, r2, r3
   2bfa6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2bfa8:	68fb      	ldr	r3, [r7, #12]
   2bfaa:	3303      	adds	r3, #3
   2bfac:	781b      	ldrb	r3, [r3, #0]
   2bfae:	061a      	lsls	r2, r3, #24
   2bfb0:	68fb      	ldr	r3, [r7, #12]
   2bfb2:	3302      	adds	r3, #2
   2bfb4:	781b      	ldrb	r3, [r3, #0]
   2bfb6:	041b      	lsls	r3, r3, #16
   2bfb8:	4313      	orrs	r3, r2
   2bfba:	68fa      	ldr	r2, [r7, #12]
   2bfbc:	3201      	adds	r2, #1
   2bfbe:	7812      	ldrb	r2, [r2, #0]
   2bfc0:	0212      	lsls	r2, r2, #8
   2bfc2:	4313      	orrs	r3, r2
   2bfc4:	68fa      	ldr	r2, [r7, #12]
   2bfc6:	7812      	ldrb	r2, [r2, #0]
   2bfc8:	4313      	orrs	r3, r2
   2bfca:	011b      	lsls	r3, r3, #4
   2bfcc:	091b      	lsrs	r3, r3, #4
   2bfce:	e008      	b.n	2bfe2 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bfd0:	46c0      	nop			; (mov r8, r8)
   2bfd2:	e004      	b.n	2bfde <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bfd4:	46c0      	nop			; (mov r8, r8)
   2bfd6:	e002      	b.n	2bfde <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2bfd8:	46c0      	nop			; (mov r8, r8)
   2bfda:	e000      	b.n	2bfde <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2bfdc:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2bfde:	2301      	movs	r3, #1
   2bfe0:	425b      	negs	r3, r3
}
   2bfe2:	0018      	movs	r0, r3
   2bfe4:	46bd      	mov	sp, r7
   2bfe6:	b006      	add	sp, #24
   2bfe8:	bd80      	pop	{r7, pc}
   2bfea:	46c0      	nop			; (mov r8, r8)
   2bfec:	0002bbed 	.word	0x0002bbed

0002bff0 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2bff0:	b590      	push	{r4, r7, lr}
   2bff2:	b089      	sub	sp, #36	; 0x24
   2bff4:	af00      	add	r7, sp, #0
   2bff6:	60f8      	str	r0, [r7, #12]
   2bff8:	60b9      	str	r1, [r7, #8]
   2bffa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bffc:	68bb      	ldr	r3, [r7, #8]
   2bffe:	2b01      	cmp	r3, #1
   2c000:	d904      	bls.n	2c00c <put_fat+0x1c>
   2c002:	68fb      	ldr	r3, [r7, #12]
   2c004:	699a      	ldr	r2, [r3, #24]
   2c006:	68bb      	ldr	r3, [r7, #8]
   2c008:	429a      	cmp	r2, r3
   2c00a:	d804      	bhi.n	2c016 <put_fat+0x26>
		res = FR_INT_ERR;
   2c00c:	231f      	movs	r3, #31
   2c00e:	18fb      	adds	r3, r7, r3
   2c010:	2202      	movs	r2, #2
   2c012:	701a      	strb	r2, [r3, #0]
   2c014:	e100      	b.n	2c218 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c016:	68fb      	ldr	r3, [r7, #12]
   2c018:	781b      	ldrb	r3, [r3, #0]
   2c01a:	2b02      	cmp	r3, #2
   2c01c:	d100      	bne.n	2c020 <put_fat+0x30>
   2c01e:	e078      	b.n	2c112 <put_fat+0x122>
   2c020:	2b03      	cmp	r3, #3
   2c022:	d100      	bne.n	2c026 <put_fat+0x36>
   2c024:	e09e      	b.n	2c164 <put_fat+0x174>
   2c026:	2b01      	cmp	r3, #1
   2c028:	d000      	beq.n	2c02c <put_fat+0x3c>
   2c02a:	e0e6      	b.n	2c1fa <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c02c:	68bb      	ldr	r3, [r7, #8]
   2c02e:	61bb      	str	r3, [r7, #24]
   2c030:	69bb      	ldr	r3, [r7, #24]
   2c032:	085b      	lsrs	r3, r3, #1
   2c034:	69ba      	ldr	r2, [r7, #24]
   2c036:	18d3      	adds	r3, r2, r3
   2c038:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c03a:	68fb      	ldr	r3, [r7, #12]
   2c03c:	6a1a      	ldr	r2, [r3, #32]
   2c03e:	69bb      	ldr	r3, [r7, #24]
   2c040:	0a5b      	lsrs	r3, r3, #9
   2c042:	18d2      	adds	r2, r2, r3
   2c044:	231f      	movs	r3, #31
   2c046:	18fc      	adds	r4, r7, r3
   2c048:	68fb      	ldr	r3, [r7, #12]
   2c04a:	0011      	movs	r1, r2
   2c04c:	0018      	movs	r0, r3
   2c04e:	4b76      	ldr	r3, [pc, #472]	; (2c228 <put_fat+0x238>)
   2c050:	4798      	blx	r3
   2c052:	0003      	movs	r3, r0
   2c054:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c056:	231f      	movs	r3, #31
   2c058:	18fb      	adds	r3, r7, r3
   2c05a:	781b      	ldrb	r3, [r3, #0]
   2c05c:	2b00      	cmp	r3, #0
   2c05e:	d000      	beq.n	2c062 <put_fat+0x72>
   2c060:	e0d0      	b.n	2c204 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c062:	69bb      	ldr	r3, [r7, #24]
   2c064:	05db      	lsls	r3, r3, #23
   2c066:	0ddb      	lsrs	r3, r3, #23
   2c068:	3330      	adds	r3, #48	; 0x30
   2c06a:	68fa      	ldr	r2, [r7, #12]
   2c06c:	18d3      	adds	r3, r2, r3
   2c06e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c070:	68bb      	ldr	r3, [r7, #8]
   2c072:	2201      	movs	r2, #1
   2c074:	4013      	ands	r3, r2
   2c076:	d00d      	beq.n	2c094 <put_fat+0xa4>
   2c078:	697b      	ldr	r3, [r7, #20]
   2c07a:	781b      	ldrb	r3, [r3, #0]
   2c07c:	b25b      	sxtb	r3, r3
   2c07e:	220f      	movs	r2, #15
   2c080:	4013      	ands	r3, r2
   2c082:	b25a      	sxtb	r2, r3
   2c084:	687b      	ldr	r3, [r7, #4]
   2c086:	b2db      	uxtb	r3, r3
   2c088:	011b      	lsls	r3, r3, #4
   2c08a:	b25b      	sxtb	r3, r3
   2c08c:	4313      	orrs	r3, r2
   2c08e:	b25b      	sxtb	r3, r3
   2c090:	b2db      	uxtb	r3, r3
   2c092:	e001      	b.n	2c098 <put_fat+0xa8>
   2c094:	687b      	ldr	r3, [r7, #4]
   2c096:	b2db      	uxtb	r3, r3
   2c098:	697a      	ldr	r2, [r7, #20]
   2c09a:	7013      	strb	r3, [r2, #0]
			bc++;
   2c09c:	69bb      	ldr	r3, [r7, #24]
   2c09e:	3301      	adds	r3, #1
   2c0a0:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c0a2:	68fb      	ldr	r3, [r7, #12]
   2c0a4:	2201      	movs	r2, #1
   2c0a6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c0a8:	68fb      	ldr	r3, [r7, #12]
   2c0aa:	6a1a      	ldr	r2, [r3, #32]
   2c0ac:	69bb      	ldr	r3, [r7, #24]
   2c0ae:	0a5b      	lsrs	r3, r3, #9
   2c0b0:	18d2      	adds	r2, r2, r3
   2c0b2:	231f      	movs	r3, #31
   2c0b4:	18fc      	adds	r4, r7, r3
   2c0b6:	68fb      	ldr	r3, [r7, #12]
   2c0b8:	0011      	movs	r1, r2
   2c0ba:	0018      	movs	r0, r3
   2c0bc:	4b5a      	ldr	r3, [pc, #360]	; (2c228 <put_fat+0x238>)
   2c0be:	4798      	blx	r3
   2c0c0:	0003      	movs	r3, r0
   2c0c2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c0c4:	231f      	movs	r3, #31
   2c0c6:	18fb      	adds	r3, r7, r3
   2c0c8:	781b      	ldrb	r3, [r3, #0]
   2c0ca:	2b00      	cmp	r3, #0
   2c0cc:	d000      	beq.n	2c0d0 <put_fat+0xe0>
   2c0ce:	e09b      	b.n	2c208 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c0d0:	69bb      	ldr	r3, [r7, #24]
   2c0d2:	05db      	lsls	r3, r3, #23
   2c0d4:	0ddb      	lsrs	r3, r3, #23
   2c0d6:	3330      	adds	r3, #48	; 0x30
   2c0d8:	68fa      	ldr	r2, [r7, #12]
   2c0da:	18d3      	adds	r3, r2, r3
   2c0dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c0de:	68bb      	ldr	r3, [r7, #8]
   2c0e0:	2201      	movs	r2, #1
   2c0e2:	4013      	ands	r3, r2
   2c0e4:	d003      	beq.n	2c0ee <put_fat+0xfe>
   2c0e6:	687b      	ldr	r3, [r7, #4]
   2c0e8:	091b      	lsrs	r3, r3, #4
   2c0ea:	b2db      	uxtb	r3, r3
   2c0ec:	e00e      	b.n	2c10c <put_fat+0x11c>
   2c0ee:	697b      	ldr	r3, [r7, #20]
   2c0f0:	781b      	ldrb	r3, [r3, #0]
   2c0f2:	b25b      	sxtb	r3, r3
   2c0f4:	220f      	movs	r2, #15
   2c0f6:	4393      	bics	r3, r2
   2c0f8:	b25a      	sxtb	r2, r3
   2c0fa:	687b      	ldr	r3, [r7, #4]
   2c0fc:	0a1b      	lsrs	r3, r3, #8
   2c0fe:	b25b      	sxtb	r3, r3
   2c100:	210f      	movs	r1, #15
   2c102:	400b      	ands	r3, r1
   2c104:	b25b      	sxtb	r3, r3
   2c106:	4313      	orrs	r3, r2
   2c108:	b25b      	sxtb	r3, r3
   2c10a:	b2db      	uxtb	r3, r3
   2c10c:	697a      	ldr	r2, [r7, #20]
   2c10e:	7013      	strb	r3, [r2, #0]
			break;
   2c110:	e07f      	b.n	2c212 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c112:	68fb      	ldr	r3, [r7, #12]
   2c114:	6a1a      	ldr	r2, [r3, #32]
   2c116:	68bb      	ldr	r3, [r7, #8]
   2c118:	0a1b      	lsrs	r3, r3, #8
   2c11a:	18d2      	adds	r2, r2, r3
   2c11c:	231f      	movs	r3, #31
   2c11e:	18fc      	adds	r4, r7, r3
   2c120:	68fb      	ldr	r3, [r7, #12]
   2c122:	0011      	movs	r1, r2
   2c124:	0018      	movs	r0, r3
   2c126:	4b40      	ldr	r3, [pc, #256]	; (2c228 <put_fat+0x238>)
   2c128:	4798      	blx	r3
   2c12a:	0003      	movs	r3, r0
   2c12c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c12e:	231f      	movs	r3, #31
   2c130:	18fb      	adds	r3, r7, r3
   2c132:	781b      	ldrb	r3, [r3, #0]
   2c134:	2b00      	cmp	r3, #0
   2c136:	d169      	bne.n	2c20c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c138:	68bb      	ldr	r3, [r7, #8]
   2c13a:	005a      	lsls	r2, r3, #1
   2c13c:	23ff      	movs	r3, #255	; 0xff
   2c13e:	005b      	lsls	r3, r3, #1
   2c140:	4013      	ands	r3, r2
   2c142:	3330      	adds	r3, #48	; 0x30
   2c144:	68fa      	ldr	r2, [r7, #12]
   2c146:	18d3      	adds	r3, r2, r3
   2c148:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2c14a:	687b      	ldr	r3, [r7, #4]
   2c14c:	b2da      	uxtb	r2, r3
   2c14e:	697b      	ldr	r3, [r7, #20]
   2c150:	701a      	strb	r2, [r3, #0]
   2c152:	697b      	ldr	r3, [r7, #20]
   2c154:	3301      	adds	r3, #1
   2c156:	687a      	ldr	r2, [r7, #4]
   2c158:	b292      	uxth	r2, r2
   2c15a:	0a12      	lsrs	r2, r2, #8
   2c15c:	b292      	uxth	r2, r2
   2c15e:	b2d2      	uxtb	r2, r2
   2c160:	701a      	strb	r2, [r3, #0]
			break;
   2c162:	e056      	b.n	2c212 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c164:	68fb      	ldr	r3, [r7, #12]
   2c166:	6a1a      	ldr	r2, [r3, #32]
   2c168:	68bb      	ldr	r3, [r7, #8]
   2c16a:	09db      	lsrs	r3, r3, #7
   2c16c:	18d2      	adds	r2, r2, r3
   2c16e:	231f      	movs	r3, #31
   2c170:	18fc      	adds	r4, r7, r3
   2c172:	68fb      	ldr	r3, [r7, #12]
   2c174:	0011      	movs	r1, r2
   2c176:	0018      	movs	r0, r3
   2c178:	4b2b      	ldr	r3, [pc, #172]	; (2c228 <put_fat+0x238>)
   2c17a:	4798      	blx	r3
   2c17c:	0003      	movs	r3, r0
   2c17e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c180:	231f      	movs	r3, #31
   2c182:	18fb      	adds	r3, r7, r3
   2c184:	781b      	ldrb	r3, [r3, #0]
   2c186:	2b00      	cmp	r3, #0
   2c188:	d142      	bne.n	2c210 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c18a:	68bb      	ldr	r3, [r7, #8]
   2c18c:	009a      	lsls	r2, r3, #2
   2c18e:	23fe      	movs	r3, #254	; 0xfe
   2c190:	005b      	lsls	r3, r3, #1
   2c192:	4013      	ands	r3, r2
   2c194:	3330      	adds	r3, #48	; 0x30
   2c196:	68fa      	ldr	r2, [r7, #12]
   2c198:	18d3      	adds	r3, r2, r3
   2c19a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c19c:	697b      	ldr	r3, [r7, #20]
   2c19e:	3303      	adds	r3, #3
   2c1a0:	781b      	ldrb	r3, [r3, #0]
   2c1a2:	061a      	lsls	r2, r3, #24
   2c1a4:	697b      	ldr	r3, [r7, #20]
   2c1a6:	3302      	adds	r3, #2
   2c1a8:	781b      	ldrb	r3, [r3, #0]
   2c1aa:	041b      	lsls	r3, r3, #16
   2c1ac:	4313      	orrs	r3, r2
   2c1ae:	697a      	ldr	r2, [r7, #20]
   2c1b0:	3201      	adds	r2, #1
   2c1b2:	7812      	ldrb	r2, [r2, #0]
   2c1b4:	0212      	lsls	r2, r2, #8
   2c1b6:	4313      	orrs	r3, r2
   2c1b8:	697a      	ldr	r2, [r7, #20]
   2c1ba:	7812      	ldrb	r2, [r2, #0]
   2c1bc:	4313      	orrs	r3, r2
   2c1be:	0f1b      	lsrs	r3, r3, #28
   2c1c0:	071b      	lsls	r3, r3, #28
   2c1c2:	687a      	ldr	r2, [r7, #4]
   2c1c4:	4313      	orrs	r3, r2
   2c1c6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2c1c8:	687b      	ldr	r3, [r7, #4]
   2c1ca:	b2da      	uxtb	r2, r3
   2c1cc:	697b      	ldr	r3, [r7, #20]
   2c1ce:	701a      	strb	r2, [r3, #0]
   2c1d0:	697b      	ldr	r3, [r7, #20]
   2c1d2:	3301      	adds	r3, #1
   2c1d4:	687a      	ldr	r2, [r7, #4]
   2c1d6:	b292      	uxth	r2, r2
   2c1d8:	0a12      	lsrs	r2, r2, #8
   2c1da:	b292      	uxth	r2, r2
   2c1dc:	b2d2      	uxtb	r2, r2
   2c1de:	701a      	strb	r2, [r3, #0]
   2c1e0:	697b      	ldr	r3, [r7, #20]
   2c1e2:	3302      	adds	r3, #2
   2c1e4:	687a      	ldr	r2, [r7, #4]
   2c1e6:	0c12      	lsrs	r2, r2, #16
   2c1e8:	b2d2      	uxtb	r2, r2
   2c1ea:	701a      	strb	r2, [r3, #0]
   2c1ec:	697b      	ldr	r3, [r7, #20]
   2c1ee:	3303      	adds	r3, #3
   2c1f0:	687a      	ldr	r2, [r7, #4]
   2c1f2:	0e12      	lsrs	r2, r2, #24
   2c1f4:	b2d2      	uxtb	r2, r2
   2c1f6:	701a      	strb	r2, [r3, #0]
			break;
   2c1f8:	e00b      	b.n	2c212 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2c1fa:	231f      	movs	r3, #31
   2c1fc:	18fb      	adds	r3, r7, r3
   2c1fe:	2202      	movs	r2, #2
   2c200:	701a      	strb	r2, [r3, #0]
   2c202:	e006      	b.n	2c212 <put_fat+0x222>
			if (res != FR_OK) break;
   2c204:	46c0      	nop			; (mov r8, r8)
   2c206:	e004      	b.n	2c212 <put_fat+0x222>
			if (res != FR_OK) break;
   2c208:	46c0      	nop			; (mov r8, r8)
   2c20a:	e002      	b.n	2c212 <put_fat+0x222>
			if (res != FR_OK) break;
   2c20c:	46c0      	nop			; (mov r8, r8)
   2c20e:	e000      	b.n	2c212 <put_fat+0x222>
			if (res != FR_OK) break;
   2c210:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2c212:	68fb      	ldr	r3, [r7, #12]
   2c214:	2201      	movs	r2, #1
   2c216:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2c218:	231f      	movs	r3, #31
   2c21a:	18fb      	adds	r3, r7, r3
   2c21c:	781b      	ldrb	r3, [r3, #0]
}
   2c21e:	0018      	movs	r0, r3
   2c220:	46bd      	mov	sp, r7
   2c222:	b009      	add	sp, #36	; 0x24
   2c224:	bd90      	pop	{r4, r7, pc}
   2c226:	46c0      	nop			; (mov r8, r8)
   2c228:	0002bbed 	.word	0x0002bbed

0002c22c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2c22c:	b590      	push	{r4, r7, lr}
   2c22e:	b085      	sub	sp, #20
   2c230:	af00      	add	r7, sp, #0
   2c232:	6078      	str	r0, [r7, #4]
   2c234:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c236:	683b      	ldr	r3, [r7, #0]
   2c238:	2b01      	cmp	r3, #1
   2c23a:	d904      	bls.n	2c246 <remove_chain+0x1a>
   2c23c:	687b      	ldr	r3, [r7, #4]
   2c23e:	699a      	ldr	r2, [r3, #24]
   2c240:	683b      	ldr	r3, [r7, #0]
   2c242:	429a      	cmp	r2, r3
   2c244:	d804      	bhi.n	2c250 <remove_chain+0x24>
		res = FR_INT_ERR;
   2c246:	230f      	movs	r3, #15
   2c248:	18fb      	adds	r3, r7, r3
   2c24a:	2202      	movs	r2, #2
   2c24c:	701a      	strb	r2, [r3, #0]
   2c24e:	e045      	b.n	2c2dc <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2c250:	230f      	movs	r3, #15
   2c252:	18fb      	adds	r3, r7, r3
   2c254:	2200      	movs	r2, #0
   2c256:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c258:	e037      	b.n	2c2ca <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2c25a:	683a      	ldr	r2, [r7, #0]
   2c25c:	687b      	ldr	r3, [r7, #4]
   2c25e:	0011      	movs	r1, r2
   2c260:	0018      	movs	r0, r3
   2c262:	4b22      	ldr	r3, [pc, #136]	; (2c2ec <remove_chain+0xc0>)
   2c264:	4798      	blx	r3
   2c266:	0003      	movs	r3, r0
   2c268:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2c26a:	68bb      	ldr	r3, [r7, #8]
   2c26c:	2b00      	cmp	r3, #0
   2c26e:	d032      	beq.n	2c2d6 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2c270:	68bb      	ldr	r3, [r7, #8]
   2c272:	2b01      	cmp	r3, #1
   2c274:	d104      	bne.n	2c280 <remove_chain+0x54>
   2c276:	230f      	movs	r3, #15
   2c278:	18fb      	adds	r3, r7, r3
   2c27a:	2202      	movs	r2, #2
   2c27c:	701a      	strb	r2, [r3, #0]
   2c27e:	e02d      	b.n	2c2dc <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2c280:	68bb      	ldr	r3, [r7, #8]
   2c282:	3301      	adds	r3, #1
   2c284:	d104      	bne.n	2c290 <remove_chain+0x64>
   2c286:	230f      	movs	r3, #15
   2c288:	18fb      	adds	r3, r7, r3
   2c28a:	2201      	movs	r2, #1
   2c28c:	701a      	strb	r2, [r3, #0]
   2c28e:	e025      	b.n	2c2dc <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2c290:	230f      	movs	r3, #15
   2c292:	18fc      	adds	r4, r7, r3
   2c294:	6839      	ldr	r1, [r7, #0]
   2c296:	687b      	ldr	r3, [r7, #4]
   2c298:	2200      	movs	r2, #0
   2c29a:	0018      	movs	r0, r3
   2c29c:	4b14      	ldr	r3, [pc, #80]	; (2c2f0 <remove_chain+0xc4>)
   2c29e:	4798      	blx	r3
   2c2a0:	0003      	movs	r3, r0
   2c2a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c2a4:	230f      	movs	r3, #15
   2c2a6:	18fb      	adds	r3, r7, r3
   2c2a8:	781b      	ldrb	r3, [r3, #0]
   2c2aa:	2b00      	cmp	r3, #0
   2c2ac:	d115      	bne.n	2c2da <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2c2ae:	687b      	ldr	r3, [r7, #4]
   2c2b0:	691b      	ldr	r3, [r3, #16]
   2c2b2:	3301      	adds	r3, #1
   2c2b4:	d007      	beq.n	2c2c6 <remove_chain+0x9a>
				fs->free_clust++;
   2c2b6:	687b      	ldr	r3, [r7, #4]
   2c2b8:	691b      	ldr	r3, [r3, #16]
   2c2ba:	1c5a      	adds	r2, r3, #1
   2c2bc:	687b      	ldr	r3, [r7, #4]
   2c2be:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2c2c0:	687b      	ldr	r3, [r7, #4]
   2c2c2:	2201      	movs	r2, #1
   2c2c4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2c2c6:	68bb      	ldr	r3, [r7, #8]
   2c2c8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c2ca:	687b      	ldr	r3, [r7, #4]
   2c2cc:	699a      	ldr	r2, [r3, #24]
   2c2ce:	683b      	ldr	r3, [r7, #0]
   2c2d0:	429a      	cmp	r2, r3
   2c2d2:	d8c2      	bhi.n	2c25a <remove_chain+0x2e>
   2c2d4:	e002      	b.n	2c2dc <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2c2d6:	46c0      	nop			; (mov r8, r8)
   2c2d8:	e000      	b.n	2c2dc <remove_chain+0xb0>
			if (res != FR_OK) break;
   2c2da:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c2dc:	230f      	movs	r3, #15
   2c2de:	18fb      	adds	r3, r7, r3
   2c2e0:	781b      	ldrb	r3, [r3, #0]
}
   2c2e2:	0018      	movs	r0, r3
   2c2e4:	46bd      	mov	sp, r7
   2c2e6:	b005      	add	sp, #20
   2c2e8:	bd90      	pop	{r4, r7, pc}
   2c2ea:	46c0      	nop			; (mov r8, r8)
   2c2ec:	0002be85 	.word	0x0002be85
   2c2f0:	0002bff1 	.word	0x0002bff1

0002c2f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2c2f4:	b590      	push	{r4, r7, lr}
   2c2f6:	b087      	sub	sp, #28
   2c2f8:	af00      	add	r7, sp, #0
   2c2fa:	6078      	str	r0, [r7, #4]
   2c2fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2c2fe:	683b      	ldr	r3, [r7, #0]
   2c300:	2b00      	cmp	r3, #0
   2c302:	d10d      	bne.n	2c320 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2c304:	687b      	ldr	r3, [r7, #4]
   2c306:	68db      	ldr	r3, [r3, #12]
   2c308:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2c30a:	693b      	ldr	r3, [r7, #16]
   2c30c:	2b00      	cmp	r3, #0
   2c30e:	d004      	beq.n	2c31a <create_chain+0x26>
   2c310:	687b      	ldr	r3, [r7, #4]
   2c312:	699a      	ldr	r2, [r3, #24]
   2c314:	693b      	ldr	r3, [r7, #16]
   2c316:	429a      	cmp	r2, r3
   2c318:	d818      	bhi.n	2c34c <create_chain+0x58>
   2c31a:	2301      	movs	r3, #1
   2c31c:	613b      	str	r3, [r7, #16]
   2c31e:	e015      	b.n	2c34c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2c320:	683a      	ldr	r2, [r7, #0]
   2c322:	687b      	ldr	r3, [r7, #4]
   2c324:	0011      	movs	r1, r2
   2c326:	0018      	movs	r0, r3
   2c328:	4b3e      	ldr	r3, [pc, #248]	; (2c424 <create_chain+0x130>)
   2c32a:	4798      	blx	r3
   2c32c:	0003      	movs	r3, r0
   2c32e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2c330:	68bb      	ldr	r3, [r7, #8]
   2c332:	2b01      	cmp	r3, #1
   2c334:	d801      	bhi.n	2c33a <create_chain+0x46>
   2c336:	2301      	movs	r3, #1
   2c338:	e070      	b.n	2c41c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2c33a:	687b      	ldr	r3, [r7, #4]
   2c33c:	699a      	ldr	r2, [r3, #24]
   2c33e:	68bb      	ldr	r3, [r7, #8]
   2c340:	429a      	cmp	r2, r3
   2c342:	d901      	bls.n	2c348 <create_chain+0x54>
   2c344:	68bb      	ldr	r3, [r7, #8]
   2c346:	e069      	b.n	2c41c <create_chain+0x128>
		scl = clst;
   2c348:	683b      	ldr	r3, [r7, #0]
   2c34a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2c34c:	693b      	ldr	r3, [r7, #16]
   2c34e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2c350:	697b      	ldr	r3, [r7, #20]
   2c352:	3301      	adds	r3, #1
   2c354:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2c356:	687b      	ldr	r3, [r7, #4]
   2c358:	699a      	ldr	r2, [r3, #24]
   2c35a:	697b      	ldr	r3, [r7, #20]
   2c35c:	429a      	cmp	r2, r3
   2c35e:	d807      	bhi.n	2c370 <create_chain+0x7c>
			ncl = 2;
   2c360:	2302      	movs	r3, #2
   2c362:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2c364:	697a      	ldr	r2, [r7, #20]
   2c366:	693b      	ldr	r3, [r7, #16]
   2c368:	429a      	cmp	r2, r3
   2c36a:	d901      	bls.n	2c370 <create_chain+0x7c>
   2c36c:	2300      	movs	r3, #0
   2c36e:	e055      	b.n	2c41c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2c370:	697a      	ldr	r2, [r7, #20]
   2c372:	687b      	ldr	r3, [r7, #4]
   2c374:	0011      	movs	r1, r2
   2c376:	0018      	movs	r0, r3
   2c378:	4b2a      	ldr	r3, [pc, #168]	; (2c424 <create_chain+0x130>)
   2c37a:	4798      	blx	r3
   2c37c:	0003      	movs	r3, r0
   2c37e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2c380:	68bb      	ldr	r3, [r7, #8]
   2c382:	2b00      	cmp	r3, #0
   2c384:	d00d      	beq.n	2c3a2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2c386:	68bb      	ldr	r3, [r7, #8]
   2c388:	3301      	adds	r3, #1
   2c38a:	d002      	beq.n	2c392 <create_chain+0x9e>
   2c38c:	68bb      	ldr	r3, [r7, #8]
   2c38e:	2b01      	cmp	r3, #1
   2c390:	d101      	bne.n	2c396 <create_chain+0xa2>
			return cs;
   2c392:	68bb      	ldr	r3, [r7, #8]
   2c394:	e042      	b.n	2c41c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2c396:	697a      	ldr	r2, [r7, #20]
   2c398:	693b      	ldr	r3, [r7, #16]
   2c39a:	429a      	cmp	r2, r3
   2c39c:	d1d8      	bne.n	2c350 <create_chain+0x5c>
   2c39e:	2300      	movs	r3, #0
   2c3a0:	e03c      	b.n	2c41c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2c3a2:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2c3a4:	230f      	movs	r3, #15
   2c3a6:	18fc      	adds	r4, r7, r3
   2c3a8:	4a1f      	ldr	r2, [pc, #124]	; (2c428 <create_chain+0x134>)
   2c3aa:	6979      	ldr	r1, [r7, #20]
   2c3ac:	687b      	ldr	r3, [r7, #4]
   2c3ae:	0018      	movs	r0, r3
   2c3b0:	4b1e      	ldr	r3, [pc, #120]	; (2c42c <create_chain+0x138>)
   2c3b2:	4798      	blx	r3
   2c3b4:	0003      	movs	r3, r0
   2c3b6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2c3b8:	230f      	movs	r3, #15
   2c3ba:	18fb      	adds	r3, r7, r3
   2c3bc:	781b      	ldrb	r3, [r3, #0]
   2c3be:	2b00      	cmp	r3, #0
   2c3c0:	d10c      	bne.n	2c3dc <create_chain+0xe8>
   2c3c2:	683b      	ldr	r3, [r7, #0]
   2c3c4:	2b00      	cmp	r3, #0
   2c3c6:	d009      	beq.n	2c3dc <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2c3c8:	230f      	movs	r3, #15
   2c3ca:	18fc      	adds	r4, r7, r3
   2c3cc:	697a      	ldr	r2, [r7, #20]
   2c3ce:	6839      	ldr	r1, [r7, #0]
   2c3d0:	687b      	ldr	r3, [r7, #4]
   2c3d2:	0018      	movs	r0, r3
   2c3d4:	4b15      	ldr	r3, [pc, #84]	; (2c42c <create_chain+0x138>)
   2c3d6:	4798      	blx	r3
   2c3d8:	0003      	movs	r3, r0
   2c3da:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2c3dc:	230f      	movs	r3, #15
   2c3de:	18fb      	adds	r3, r7, r3
   2c3e0:	781b      	ldrb	r3, [r3, #0]
   2c3e2:	2b00      	cmp	r3, #0
   2c3e4:	d10f      	bne.n	2c406 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2c3e6:	687b      	ldr	r3, [r7, #4]
   2c3e8:	697a      	ldr	r2, [r7, #20]
   2c3ea:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2c3ec:	687b      	ldr	r3, [r7, #4]
   2c3ee:	691b      	ldr	r3, [r3, #16]
   2c3f0:	3301      	adds	r3, #1
   2c3f2:	d012      	beq.n	2c41a <create_chain+0x126>
			fs->free_clust--;
   2c3f4:	687b      	ldr	r3, [r7, #4]
   2c3f6:	691b      	ldr	r3, [r3, #16]
   2c3f8:	1e5a      	subs	r2, r3, #1
   2c3fa:	687b      	ldr	r3, [r7, #4]
   2c3fc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2c3fe:	687b      	ldr	r3, [r7, #4]
   2c400:	2201      	movs	r2, #1
   2c402:	715a      	strb	r2, [r3, #5]
   2c404:	e009      	b.n	2c41a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2c406:	230f      	movs	r3, #15
   2c408:	18fb      	adds	r3, r7, r3
   2c40a:	781b      	ldrb	r3, [r3, #0]
   2c40c:	2b01      	cmp	r3, #1
   2c40e:	d102      	bne.n	2c416 <create_chain+0x122>
   2c410:	2301      	movs	r3, #1
   2c412:	425b      	negs	r3, r3
   2c414:	e000      	b.n	2c418 <create_chain+0x124>
   2c416:	2301      	movs	r3, #1
   2c418:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2c41a:	697b      	ldr	r3, [r7, #20]
}
   2c41c:	0018      	movs	r0, r3
   2c41e:	46bd      	mov	sp, r7
   2c420:	b007      	add	sp, #28
   2c422:	bd90      	pop	{r4, r7, pc}
   2c424:	0002be85 	.word	0x0002be85
   2c428:	0fffffff 	.word	0x0fffffff
   2c42c:	0002bff1 	.word	0x0002bff1

0002c430 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2c430:	b580      	push	{r7, lr}
   2c432:	b084      	sub	sp, #16
   2c434:	af00      	add	r7, sp, #0
   2c436:	6078      	str	r0, [r7, #4]
   2c438:	000a      	movs	r2, r1
   2c43a:	1cbb      	adds	r3, r7, #2
   2c43c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2c43e:	687b      	ldr	r3, [r7, #4]
   2c440:	1cba      	adds	r2, r7, #2
   2c442:	8812      	ldrh	r2, [r2, #0]
   2c444:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2c446:	687b      	ldr	r3, [r7, #4]
   2c448:	689b      	ldr	r3, [r3, #8]
   2c44a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2c44c:	68fb      	ldr	r3, [r7, #12]
   2c44e:	2b01      	cmp	r3, #1
   2c450:	d005      	beq.n	2c45e <dir_sdi+0x2e>
   2c452:	687b      	ldr	r3, [r7, #4]
   2c454:	681b      	ldr	r3, [r3, #0]
   2c456:	699a      	ldr	r2, [r3, #24]
   2c458:	68fb      	ldr	r3, [r7, #12]
   2c45a:	429a      	cmp	r2, r3
   2c45c:	d801      	bhi.n	2c462 <dir_sdi+0x32>
		return FR_INT_ERR;
   2c45e:	2302      	movs	r3, #2
   2c460:	e075      	b.n	2c54e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2c462:	68fb      	ldr	r3, [r7, #12]
   2c464:	2b00      	cmp	r3, #0
   2c466:	d108      	bne.n	2c47a <dir_sdi+0x4a>
   2c468:	687b      	ldr	r3, [r7, #4]
   2c46a:	681b      	ldr	r3, [r3, #0]
   2c46c:	781b      	ldrb	r3, [r3, #0]
   2c46e:	2b03      	cmp	r3, #3
   2c470:	d103      	bne.n	2c47a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2c472:	687b      	ldr	r3, [r7, #4]
   2c474:	681b      	ldr	r3, [r3, #0]
   2c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c478:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2c47a:	68fb      	ldr	r3, [r7, #12]
   2c47c:	2b00      	cmp	r3, #0
   2c47e:	d116      	bne.n	2c4ae <dir_sdi+0x7e>
		dj->clust = clst;
   2c480:	687b      	ldr	r3, [r7, #4]
   2c482:	68fa      	ldr	r2, [r7, #12]
   2c484:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2c486:	687b      	ldr	r3, [r7, #4]
   2c488:	681b      	ldr	r3, [r3, #0]
   2c48a:	891b      	ldrh	r3, [r3, #8]
   2c48c:	1cba      	adds	r2, r7, #2
   2c48e:	8812      	ldrh	r2, [r2, #0]
   2c490:	429a      	cmp	r2, r3
   2c492:	d301      	bcc.n	2c498 <dir_sdi+0x68>
			return FR_INT_ERR;
   2c494:	2302      	movs	r3, #2
   2c496:	e05a      	b.n	2c54e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c498:	687b      	ldr	r3, [r7, #4]
   2c49a:	681b      	ldr	r3, [r3, #0]
   2c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c49e:	1cba      	adds	r2, r7, #2
   2c4a0:	8812      	ldrh	r2, [r2, #0]
   2c4a2:	0912      	lsrs	r2, r2, #4
   2c4a4:	b292      	uxth	r2, r2
   2c4a6:	189a      	adds	r2, r3, r2
   2c4a8:	687b      	ldr	r3, [r7, #4]
   2c4aa:	611a      	str	r2, [r3, #16]
   2c4ac:	e042      	b.n	2c534 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2c4ae:	687b      	ldr	r3, [r7, #4]
   2c4b0:	681b      	ldr	r3, [r3, #0]
   2c4b2:	789b      	ldrb	r3, [r3, #2]
   2c4b4:	b29a      	uxth	r2, r3
   2c4b6:	230a      	movs	r3, #10
   2c4b8:	18fb      	adds	r3, r7, r3
   2c4ba:	0112      	lsls	r2, r2, #4
   2c4bc:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c4be:	e020      	b.n	2c502 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2c4c0:	687b      	ldr	r3, [r7, #4]
   2c4c2:	681b      	ldr	r3, [r3, #0]
   2c4c4:	68fa      	ldr	r2, [r7, #12]
   2c4c6:	0011      	movs	r1, r2
   2c4c8:	0018      	movs	r0, r3
   2c4ca:	4b23      	ldr	r3, [pc, #140]	; (2c558 <dir_sdi+0x128>)
   2c4cc:	4798      	blx	r3
   2c4ce:	0003      	movs	r3, r0
   2c4d0:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2c4d2:	68fb      	ldr	r3, [r7, #12]
   2c4d4:	3301      	adds	r3, #1
   2c4d6:	d101      	bne.n	2c4dc <dir_sdi+0xac>
   2c4d8:	2301      	movs	r3, #1
   2c4da:	e038      	b.n	2c54e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2c4dc:	68fb      	ldr	r3, [r7, #12]
   2c4de:	2b01      	cmp	r3, #1
   2c4e0:	d905      	bls.n	2c4ee <dir_sdi+0xbe>
   2c4e2:	687b      	ldr	r3, [r7, #4]
   2c4e4:	681b      	ldr	r3, [r3, #0]
   2c4e6:	699a      	ldr	r2, [r3, #24]
   2c4e8:	68fb      	ldr	r3, [r7, #12]
   2c4ea:	429a      	cmp	r2, r3
   2c4ec:	d801      	bhi.n	2c4f2 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2c4ee:	2302      	movs	r3, #2
   2c4f0:	e02d      	b.n	2c54e <dir_sdi+0x11e>
			idx -= ic;
   2c4f2:	1cbb      	adds	r3, r7, #2
   2c4f4:	1cb9      	adds	r1, r7, #2
   2c4f6:	220a      	movs	r2, #10
   2c4f8:	18ba      	adds	r2, r7, r2
   2c4fa:	8809      	ldrh	r1, [r1, #0]
   2c4fc:	8812      	ldrh	r2, [r2, #0]
   2c4fe:	1a8a      	subs	r2, r1, r2
   2c500:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c502:	1cba      	adds	r2, r7, #2
   2c504:	230a      	movs	r3, #10
   2c506:	18fb      	adds	r3, r7, r3
   2c508:	8812      	ldrh	r2, [r2, #0]
   2c50a:	881b      	ldrh	r3, [r3, #0]
   2c50c:	429a      	cmp	r2, r3
   2c50e:	d2d7      	bcs.n	2c4c0 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2c510:	687b      	ldr	r3, [r7, #4]
   2c512:	68fa      	ldr	r2, [r7, #12]
   2c514:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c516:	687b      	ldr	r3, [r7, #4]
   2c518:	681b      	ldr	r3, [r3, #0]
   2c51a:	68fa      	ldr	r2, [r7, #12]
   2c51c:	0011      	movs	r1, r2
   2c51e:	0018      	movs	r0, r3
   2c520:	4b0e      	ldr	r3, [pc, #56]	; (2c55c <dir_sdi+0x12c>)
   2c522:	4798      	blx	r3
   2c524:	0002      	movs	r2, r0
   2c526:	1cbb      	adds	r3, r7, #2
   2c528:	881b      	ldrh	r3, [r3, #0]
   2c52a:	091b      	lsrs	r3, r3, #4
   2c52c:	b29b      	uxth	r3, r3
   2c52e:	18d2      	adds	r2, r2, r3
   2c530:	687b      	ldr	r3, [r7, #4]
   2c532:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2c534:	687b      	ldr	r3, [r7, #4]
   2c536:	681b      	ldr	r3, [r3, #0]
   2c538:	3330      	adds	r3, #48	; 0x30
   2c53a:	001a      	movs	r2, r3
   2c53c:	1cbb      	adds	r3, r7, #2
   2c53e:	881b      	ldrh	r3, [r3, #0]
   2c540:	210f      	movs	r1, #15
   2c542:	400b      	ands	r3, r1
   2c544:	015b      	lsls	r3, r3, #5
   2c546:	18d2      	adds	r2, r2, r3
   2c548:	687b      	ldr	r3, [r7, #4]
   2c54a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2c54c:	2300      	movs	r3, #0
}
   2c54e:	0018      	movs	r0, r3
   2c550:	46bd      	mov	sp, r7
   2c552:	b004      	add	sp, #16
   2c554:	bd80      	pop	{r7, pc}
   2c556:	46c0      	nop			; (mov r8, r8)
   2c558:	0002be85 	.word	0x0002be85
   2c55c:	0002be4d 	.word	0x0002be4d

0002c560 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2c560:	b590      	push	{r4, r7, lr}
   2c562:	b085      	sub	sp, #20
   2c564:	af00      	add	r7, sp, #0
   2c566:	6078      	str	r0, [r7, #4]
   2c568:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2c56a:	687b      	ldr	r3, [r7, #4]
   2c56c:	88da      	ldrh	r2, [r3, #6]
   2c56e:	2308      	movs	r3, #8
   2c570:	18fb      	adds	r3, r7, r3
   2c572:	3201      	adds	r2, #1
   2c574:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c576:	2308      	movs	r3, #8
   2c578:	18fb      	adds	r3, r7, r3
   2c57a:	881b      	ldrh	r3, [r3, #0]
   2c57c:	2b00      	cmp	r3, #0
   2c57e:	d003      	beq.n	2c588 <dir_next+0x28>
   2c580:	687b      	ldr	r3, [r7, #4]
   2c582:	691b      	ldr	r3, [r3, #16]
   2c584:	2b00      	cmp	r3, #0
   2c586:	d101      	bne.n	2c58c <dir_next+0x2c>
		return FR_NO_FILE;
   2c588:	2304      	movs	r3, #4
   2c58a:	e0d2      	b.n	2c732 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c58c:	2308      	movs	r3, #8
   2c58e:	18fb      	adds	r3, r7, r3
   2c590:	881b      	ldrh	r3, [r3, #0]
   2c592:	220f      	movs	r2, #15
   2c594:	4013      	ands	r3, r2
   2c596:	b29b      	uxth	r3, r3
   2c598:	2b00      	cmp	r3, #0
   2c59a:	d000      	beq.n	2c59e <dir_next+0x3e>
   2c59c:	e0b6      	b.n	2c70c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c59e:	687b      	ldr	r3, [r7, #4]
   2c5a0:	691b      	ldr	r3, [r3, #16]
   2c5a2:	1c5a      	adds	r2, r3, #1
   2c5a4:	687b      	ldr	r3, [r7, #4]
   2c5a6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c5a8:	687b      	ldr	r3, [r7, #4]
   2c5aa:	68db      	ldr	r3, [r3, #12]
   2c5ac:	2b00      	cmp	r3, #0
   2c5ae:	d10a      	bne.n	2c5c6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c5b0:	687b      	ldr	r3, [r7, #4]
   2c5b2:	681b      	ldr	r3, [r3, #0]
   2c5b4:	891b      	ldrh	r3, [r3, #8]
   2c5b6:	2208      	movs	r2, #8
   2c5b8:	18ba      	adds	r2, r7, r2
   2c5ba:	8812      	ldrh	r2, [r2, #0]
   2c5bc:	429a      	cmp	r2, r3
   2c5be:	d200      	bcs.n	2c5c2 <dir_next+0x62>
   2c5c0:	e0a4      	b.n	2c70c <dir_next+0x1ac>
				return FR_NO_FILE;
   2c5c2:	2304      	movs	r3, #4
   2c5c4:	e0b5      	b.n	2c732 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c5c6:	2308      	movs	r3, #8
   2c5c8:	18fb      	adds	r3, r7, r3
   2c5ca:	881b      	ldrh	r3, [r3, #0]
   2c5cc:	091b      	lsrs	r3, r3, #4
   2c5ce:	b29b      	uxth	r3, r3
   2c5d0:	001a      	movs	r2, r3
   2c5d2:	687b      	ldr	r3, [r7, #4]
   2c5d4:	681b      	ldr	r3, [r3, #0]
   2c5d6:	789b      	ldrb	r3, [r3, #2]
   2c5d8:	3b01      	subs	r3, #1
   2c5da:	4013      	ands	r3, r2
   2c5dc:	d000      	beq.n	2c5e0 <dir_next+0x80>
   2c5de:	e095      	b.n	2c70c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c5e0:	687b      	ldr	r3, [r7, #4]
   2c5e2:	681a      	ldr	r2, [r3, #0]
   2c5e4:	687b      	ldr	r3, [r7, #4]
   2c5e6:	68db      	ldr	r3, [r3, #12]
   2c5e8:	0019      	movs	r1, r3
   2c5ea:	0010      	movs	r0, r2
   2c5ec:	4b53      	ldr	r3, [pc, #332]	; (2c73c <dir_next+0x1dc>)
   2c5ee:	4798      	blx	r3
   2c5f0:	0003      	movs	r3, r0
   2c5f2:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c5f4:	68fb      	ldr	r3, [r7, #12]
   2c5f6:	2b01      	cmp	r3, #1
   2c5f8:	d801      	bhi.n	2c5fe <dir_next+0x9e>
   2c5fa:	2302      	movs	r3, #2
   2c5fc:	e099      	b.n	2c732 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c5fe:	68fb      	ldr	r3, [r7, #12]
   2c600:	3301      	adds	r3, #1
   2c602:	d101      	bne.n	2c608 <dir_next+0xa8>
   2c604:	2301      	movs	r3, #1
   2c606:	e094      	b.n	2c732 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c608:	687b      	ldr	r3, [r7, #4]
   2c60a:	681b      	ldr	r3, [r3, #0]
   2c60c:	699a      	ldr	r2, [r3, #24]
   2c60e:	68fb      	ldr	r3, [r7, #12]
   2c610:	429a      	cmp	r2, r3
   2c612:	d900      	bls.n	2c616 <dir_next+0xb6>
   2c614:	e06d      	b.n	2c6f2 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c616:	683b      	ldr	r3, [r7, #0]
   2c618:	2b00      	cmp	r3, #0
   2c61a:	d101      	bne.n	2c620 <dir_next+0xc0>
   2c61c:	2304      	movs	r3, #4
   2c61e:	e088      	b.n	2c732 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c620:	687b      	ldr	r3, [r7, #4]
   2c622:	681a      	ldr	r2, [r3, #0]
   2c624:	687b      	ldr	r3, [r7, #4]
   2c626:	68db      	ldr	r3, [r3, #12]
   2c628:	0019      	movs	r1, r3
   2c62a:	0010      	movs	r0, r2
   2c62c:	4b44      	ldr	r3, [pc, #272]	; (2c740 <dir_next+0x1e0>)
   2c62e:	4798      	blx	r3
   2c630:	0003      	movs	r3, r0
   2c632:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c634:	68fb      	ldr	r3, [r7, #12]
   2c636:	2b00      	cmp	r3, #0
   2c638:	d101      	bne.n	2c63e <dir_next+0xde>
   2c63a:	2307      	movs	r3, #7
   2c63c:	e079      	b.n	2c732 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c63e:	68fb      	ldr	r3, [r7, #12]
   2c640:	2b01      	cmp	r3, #1
   2c642:	d101      	bne.n	2c648 <dir_next+0xe8>
   2c644:	2302      	movs	r3, #2
   2c646:	e074      	b.n	2c732 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c648:	68fb      	ldr	r3, [r7, #12]
   2c64a:	3301      	adds	r3, #1
   2c64c:	d101      	bne.n	2c652 <dir_next+0xf2>
   2c64e:	2301      	movs	r3, #1
   2c650:	e06f      	b.n	2c732 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c652:	687b      	ldr	r3, [r7, #4]
   2c654:	681b      	ldr	r3, [r3, #0]
   2c656:	2100      	movs	r1, #0
   2c658:	0018      	movs	r0, r3
   2c65a:	4b3a      	ldr	r3, [pc, #232]	; (2c744 <dir_next+0x1e4>)
   2c65c:	4798      	blx	r3
   2c65e:	1e03      	subs	r3, r0, #0
   2c660:	d001      	beq.n	2c666 <dir_next+0x106>
   2c662:	2301      	movs	r3, #1
   2c664:	e065      	b.n	2c732 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c666:	687b      	ldr	r3, [r7, #4]
   2c668:	681b      	ldr	r3, [r3, #0]
   2c66a:	3330      	adds	r3, #48	; 0x30
   2c66c:	0018      	movs	r0, r3
   2c66e:	2380      	movs	r3, #128	; 0x80
   2c670:	009b      	lsls	r3, r3, #2
   2c672:	001a      	movs	r2, r3
   2c674:	2100      	movs	r1, #0
   2c676:	4b34      	ldr	r3, [pc, #208]	; (2c748 <dir_next+0x1e8>)
   2c678:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c67a:	687b      	ldr	r3, [r7, #4]
   2c67c:	681c      	ldr	r4, [r3, #0]
   2c67e:	687b      	ldr	r3, [r7, #4]
   2c680:	681b      	ldr	r3, [r3, #0]
   2c682:	68fa      	ldr	r2, [r7, #12]
   2c684:	0011      	movs	r1, r2
   2c686:	0018      	movs	r0, r3
   2c688:	4b30      	ldr	r3, [pc, #192]	; (2c74c <dir_next+0x1ec>)
   2c68a:	4798      	blx	r3
   2c68c:	0003      	movs	r3, r0
   2c68e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c690:	230b      	movs	r3, #11
   2c692:	18fb      	adds	r3, r7, r3
   2c694:	2200      	movs	r2, #0
   2c696:	701a      	strb	r2, [r3, #0]
   2c698:	e019      	b.n	2c6ce <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c69a:	687b      	ldr	r3, [r7, #4]
   2c69c:	681b      	ldr	r3, [r3, #0]
   2c69e:	2201      	movs	r2, #1
   2c6a0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c6a2:	687b      	ldr	r3, [r7, #4]
   2c6a4:	681b      	ldr	r3, [r3, #0]
   2c6a6:	2100      	movs	r1, #0
   2c6a8:	0018      	movs	r0, r3
   2c6aa:	4b26      	ldr	r3, [pc, #152]	; (2c744 <dir_next+0x1e4>)
   2c6ac:	4798      	blx	r3
   2c6ae:	1e03      	subs	r3, r0, #0
   2c6b0:	d001      	beq.n	2c6b6 <dir_next+0x156>
   2c6b2:	2301      	movs	r3, #1
   2c6b4:	e03d      	b.n	2c732 <dir_next+0x1d2>
						dj->fs->winsect++;
   2c6b6:	687b      	ldr	r3, [r7, #4]
   2c6b8:	681b      	ldr	r3, [r3, #0]
   2c6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c6bc:	3201      	adds	r2, #1
   2c6be:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c6c0:	230b      	movs	r3, #11
   2c6c2:	18fb      	adds	r3, r7, r3
   2c6c4:	781a      	ldrb	r2, [r3, #0]
   2c6c6:	230b      	movs	r3, #11
   2c6c8:	18fb      	adds	r3, r7, r3
   2c6ca:	3201      	adds	r2, #1
   2c6cc:	701a      	strb	r2, [r3, #0]
   2c6ce:	687b      	ldr	r3, [r7, #4]
   2c6d0:	681b      	ldr	r3, [r3, #0]
   2c6d2:	789b      	ldrb	r3, [r3, #2]
   2c6d4:	220b      	movs	r2, #11
   2c6d6:	18ba      	adds	r2, r7, r2
   2c6d8:	7812      	ldrb	r2, [r2, #0]
   2c6da:	429a      	cmp	r2, r3
   2c6dc:	d3dd      	bcc.n	2c69a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c6de:	687b      	ldr	r3, [r7, #4]
   2c6e0:	681b      	ldr	r3, [r3, #0]
   2c6e2:	687a      	ldr	r2, [r7, #4]
   2c6e4:	6812      	ldr	r2, [r2, #0]
   2c6e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c6e8:	220b      	movs	r2, #11
   2c6ea:	18ba      	adds	r2, r7, r2
   2c6ec:	7812      	ldrb	r2, [r2, #0]
   2c6ee:	1a8a      	subs	r2, r1, r2
   2c6f0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	68fa      	ldr	r2, [r7, #12]
   2c6f6:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c6f8:	687b      	ldr	r3, [r7, #4]
   2c6fa:	681b      	ldr	r3, [r3, #0]
   2c6fc:	68fa      	ldr	r2, [r7, #12]
   2c6fe:	0011      	movs	r1, r2
   2c700:	0018      	movs	r0, r3
   2c702:	4b12      	ldr	r3, [pc, #72]	; (2c74c <dir_next+0x1ec>)
   2c704:	4798      	blx	r3
   2c706:	0002      	movs	r2, r0
   2c708:	687b      	ldr	r3, [r7, #4]
   2c70a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c70c:	687b      	ldr	r3, [r7, #4]
   2c70e:	2208      	movs	r2, #8
   2c710:	18ba      	adds	r2, r7, r2
   2c712:	8812      	ldrh	r2, [r2, #0]
   2c714:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c716:	687b      	ldr	r3, [r7, #4]
   2c718:	681b      	ldr	r3, [r3, #0]
   2c71a:	3330      	adds	r3, #48	; 0x30
   2c71c:	001a      	movs	r2, r3
   2c71e:	2308      	movs	r3, #8
   2c720:	18fb      	adds	r3, r7, r3
   2c722:	881b      	ldrh	r3, [r3, #0]
   2c724:	210f      	movs	r1, #15
   2c726:	400b      	ands	r3, r1
   2c728:	015b      	lsls	r3, r3, #5
   2c72a:	18d2      	adds	r2, r2, r3
   2c72c:	687b      	ldr	r3, [r7, #4]
   2c72e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c730:	2300      	movs	r3, #0
}
   2c732:	0018      	movs	r0, r3
   2c734:	46bd      	mov	sp, r7
   2c736:	b005      	add	sp, #20
   2c738:	bd90      	pop	{r4, r7, pc}
   2c73a:	46c0      	nop			; (mov r8, r8)
   2c73c:	0002be85 	.word	0x0002be85
   2c740:	0002c2f5 	.word	0x0002c2f5
   2c744:	0002bbed 	.word	0x0002bbed
   2c748:	0002bb41 	.word	0x0002bb41
   2c74c:	0002be4d 	.word	0x0002be4d

0002c750 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c750:	b590      	push	{r4, r7, lr}
   2c752:	b087      	sub	sp, #28
   2c754:	af00      	add	r7, sp, #0
   2c756:	6078      	str	r0, [r7, #4]
   2c758:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c75a:	683b      	ldr	r3, [r7, #0]
   2c75c:	781b      	ldrb	r3, [r3, #0]
   2c75e:	001a      	movs	r2, r3
   2c760:	2340      	movs	r3, #64	; 0x40
   2c762:	439a      	bics	r2, r3
   2c764:	0013      	movs	r3, r2
   2c766:	1e5a      	subs	r2, r3, #1
   2c768:	0013      	movs	r3, r2
   2c76a:	005b      	lsls	r3, r3, #1
   2c76c:	189b      	adds	r3, r3, r2
   2c76e:	009b      	lsls	r3, r3, #2
   2c770:	189b      	adds	r3, r3, r2
   2c772:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c774:	2300      	movs	r3, #0
   2c776:	613b      	str	r3, [r7, #16]
   2c778:	230e      	movs	r3, #14
   2c77a:	18fb      	adds	r3, r7, r3
   2c77c:	2201      	movs	r2, #1
   2c77e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c780:	4a31      	ldr	r2, [pc, #196]	; (2c848 <cmp_lfn+0xf8>)
   2c782:	693b      	ldr	r3, [r7, #16]
   2c784:	18d3      	adds	r3, r2, r3
   2c786:	781b      	ldrb	r3, [r3, #0]
   2c788:	3301      	adds	r3, #1
   2c78a:	683a      	ldr	r2, [r7, #0]
   2c78c:	18d3      	adds	r3, r2, r3
   2c78e:	781b      	ldrb	r3, [r3, #0]
   2c790:	021b      	lsls	r3, r3, #8
   2c792:	b21a      	sxth	r2, r3
   2c794:	492c      	ldr	r1, [pc, #176]	; (2c848 <cmp_lfn+0xf8>)
   2c796:	693b      	ldr	r3, [r7, #16]
   2c798:	18cb      	adds	r3, r1, r3
   2c79a:	781b      	ldrb	r3, [r3, #0]
   2c79c:	0019      	movs	r1, r3
   2c79e:	683b      	ldr	r3, [r7, #0]
   2c7a0:	185b      	adds	r3, r3, r1
   2c7a2:	781b      	ldrb	r3, [r3, #0]
   2c7a4:	b21b      	sxth	r3, r3
   2c7a6:	4313      	orrs	r3, r2
   2c7a8:	b21a      	sxth	r2, r3
   2c7aa:	230c      	movs	r3, #12
   2c7ac:	18fb      	adds	r3, r7, r3
   2c7ae:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c7b0:	230e      	movs	r3, #14
   2c7b2:	18fb      	adds	r3, r7, r3
   2c7b4:	881b      	ldrh	r3, [r3, #0]
   2c7b6:	2b00      	cmp	r3, #0
   2c7b8:	d01f      	beq.n	2c7fa <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c7ba:	230e      	movs	r3, #14
   2c7bc:	18fc      	adds	r4, r7, r3
   2c7be:	230c      	movs	r3, #12
   2c7c0:	18fb      	adds	r3, r7, r3
   2c7c2:	881b      	ldrh	r3, [r3, #0]
   2c7c4:	0018      	movs	r0, r3
   2c7c6:	4b21      	ldr	r3, [pc, #132]	; (2c84c <cmp_lfn+0xfc>)
   2c7c8:	4798      	blx	r3
   2c7ca:	0003      	movs	r3, r0
   2c7cc:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c7ce:	697b      	ldr	r3, [r7, #20]
   2c7d0:	2bfe      	cmp	r3, #254	; 0xfe
   2c7d2:	d810      	bhi.n	2c7f6 <cmp_lfn+0xa6>
   2c7d4:	697b      	ldr	r3, [r7, #20]
   2c7d6:	1c5a      	adds	r2, r3, #1
   2c7d8:	617a      	str	r2, [r7, #20]
   2c7da:	005b      	lsls	r3, r3, #1
   2c7dc:	687a      	ldr	r2, [r7, #4]
   2c7de:	18d3      	adds	r3, r2, r3
   2c7e0:	881b      	ldrh	r3, [r3, #0]
   2c7e2:	0018      	movs	r0, r3
   2c7e4:	4b19      	ldr	r3, [pc, #100]	; (2c84c <cmp_lfn+0xfc>)
   2c7e6:	4798      	blx	r3
   2c7e8:	0003      	movs	r3, r0
   2c7ea:	001a      	movs	r2, r3
   2c7ec:	230e      	movs	r3, #14
   2c7ee:	18fb      	adds	r3, r7, r3
   2c7f0:	881b      	ldrh	r3, [r3, #0]
   2c7f2:	4293      	cmp	r3, r2
   2c7f4:	d009      	beq.n	2c80a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c7f6:	2300      	movs	r3, #0
   2c7f8:	e022      	b.n	2c840 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c7fa:	230c      	movs	r3, #12
   2c7fc:	18fb      	adds	r3, r7, r3
   2c7fe:	881b      	ldrh	r3, [r3, #0]
   2c800:	4a13      	ldr	r2, [pc, #76]	; (2c850 <cmp_lfn+0x100>)
   2c802:	4293      	cmp	r3, r2
   2c804:	d001      	beq.n	2c80a <cmp_lfn+0xba>
   2c806:	2300      	movs	r3, #0
   2c808:	e01a      	b.n	2c840 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c80a:	693b      	ldr	r3, [r7, #16]
   2c80c:	3301      	adds	r3, #1
   2c80e:	613b      	str	r3, [r7, #16]
   2c810:	693b      	ldr	r3, [r7, #16]
   2c812:	2b0c      	cmp	r3, #12
   2c814:	d9b4      	bls.n	2c780 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c816:	683b      	ldr	r3, [r7, #0]
   2c818:	781b      	ldrb	r3, [r3, #0]
   2c81a:	001a      	movs	r2, r3
   2c81c:	2340      	movs	r3, #64	; 0x40
   2c81e:	4013      	ands	r3, r2
   2c820:	d00d      	beq.n	2c83e <cmp_lfn+0xee>
   2c822:	230e      	movs	r3, #14
   2c824:	18fb      	adds	r3, r7, r3
   2c826:	881b      	ldrh	r3, [r3, #0]
   2c828:	2b00      	cmp	r3, #0
   2c82a:	d008      	beq.n	2c83e <cmp_lfn+0xee>
   2c82c:	697b      	ldr	r3, [r7, #20]
   2c82e:	005b      	lsls	r3, r3, #1
   2c830:	687a      	ldr	r2, [r7, #4]
   2c832:	18d3      	adds	r3, r2, r3
   2c834:	881b      	ldrh	r3, [r3, #0]
   2c836:	2b00      	cmp	r3, #0
   2c838:	d001      	beq.n	2c83e <cmp_lfn+0xee>
		return 0;
   2c83a:	2300      	movs	r3, #0
   2c83c:	e000      	b.n	2c840 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c83e:	2301      	movs	r3, #1
}
   2c840:	0018      	movs	r0, r3
   2c842:	46bd      	mov	sp, r7
   2c844:	b007      	add	sp, #28
   2c846:	bd90      	pop	{r4, r7, pc}
   2c848:	00039b94 	.word	0x00039b94
   2c84c:	0002e7fd 	.word	0x0002e7fd
   2c850:	0000ffff 	.word	0x0000ffff

0002c854 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c854:	b580      	push	{r7, lr}
   2c856:	b088      	sub	sp, #32
   2c858:	af00      	add	r7, sp, #0
   2c85a:	60f8      	str	r0, [r7, #12]
   2c85c:	60b9      	str	r1, [r7, #8]
   2c85e:	0019      	movs	r1, r3
   2c860:	1dfb      	adds	r3, r7, #7
   2c862:	701a      	strb	r2, [r3, #0]
   2c864:	1dbb      	adds	r3, r7, #6
   2c866:	1c0a      	adds	r2, r1, #0
   2c868:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c86a:	68bb      	ldr	r3, [r7, #8]
   2c86c:	330d      	adds	r3, #13
   2c86e:	1dba      	adds	r2, r7, #6
   2c870:	7812      	ldrb	r2, [r2, #0]
   2c872:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c874:	68bb      	ldr	r3, [r7, #8]
   2c876:	330b      	adds	r3, #11
   2c878:	220f      	movs	r2, #15
   2c87a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c87c:	68bb      	ldr	r3, [r7, #8]
   2c87e:	330c      	adds	r3, #12
   2c880:	2200      	movs	r2, #0
   2c882:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c884:	68bb      	ldr	r3, [r7, #8]
   2c886:	331a      	adds	r3, #26
   2c888:	2200      	movs	r2, #0
   2c88a:	701a      	strb	r2, [r3, #0]
   2c88c:	68bb      	ldr	r3, [r7, #8]
   2c88e:	331b      	adds	r3, #27
   2c890:	2200      	movs	r2, #0
   2c892:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c894:	1dfb      	adds	r3, r7, #7
   2c896:	781b      	ldrb	r3, [r3, #0]
   2c898:	1e5a      	subs	r2, r3, #1
   2c89a:	0013      	movs	r3, r2
   2c89c:	005b      	lsls	r3, r3, #1
   2c89e:	189b      	adds	r3, r3, r2
   2c8a0:	009b      	lsls	r3, r3, #2
   2c8a2:	189b      	adds	r3, r3, r2
   2c8a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c8a6:	2316      	movs	r3, #22
   2c8a8:	18fb      	adds	r3, r7, r3
   2c8aa:	2200      	movs	r2, #0
   2c8ac:	801a      	strh	r2, [r3, #0]
   2c8ae:	2300      	movs	r3, #0
   2c8b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c8b2:	2316      	movs	r3, #22
   2c8b4:	18fb      	adds	r3, r7, r3
   2c8b6:	881b      	ldrh	r3, [r3, #0]
   2c8b8:	4a28      	ldr	r2, [pc, #160]	; (2c95c <fit_lfn+0x108>)
   2c8ba:	4293      	cmp	r3, r2
   2c8bc:	d009      	beq.n	2c8d2 <fit_lfn+0x7e>
   2c8be:	69fb      	ldr	r3, [r7, #28]
   2c8c0:	1c5a      	adds	r2, r3, #1
   2c8c2:	61fa      	str	r2, [r7, #28]
   2c8c4:	005b      	lsls	r3, r3, #1
   2c8c6:	68fa      	ldr	r2, [r7, #12]
   2c8c8:	18d2      	adds	r2, r2, r3
   2c8ca:	2316      	movs	r3, #22
   2c8cc:	18fb      	adds	r3, r7, r3
   2c8ce:	8812      	ldrh	r2, [r2, #0]
   2c8d0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c8d2:	4a23      	ldr	r2, [pc, #140]	; (2c960 <fit_lfn+0x10c>)
   2c8d4:	69bb      	ldr	r3, [r7, #24]
   2c8d6:	18d3      	adds	r3, r2, r3
   2c8d8:	781b      	ldrb	r3, [r3, #0]
   2c8da:	001a      	movs	r2, r3
   2c8dc:	68bb      	ldr	r3, [r7, #8]
   2c8de:	189b      	adds	r3, r3, r2
   2c8e0:	2216      	movs	r2, #22
   2c8e2:	18ba      	adds	r2, r7, r2
   2c8e4:	8812      	ldrh	r2, [r2, #0]
   2c8e6:	b2d2      	uxtb	r2, r2
   2c8e8:	701a      	strb	r2, [r3, #0]
   2c8ea:	4a1d      	ldr	r2, [pc, #116]	; (2c960 <fit_lfn+0x10c>)
   2c8ec:	69bb      	ldr	r3, [r7, #24]
   2c8ee:	18d3      	adds	r3, r2, r3
   2c8f0:	781b      	ldrb	r3, [r3, #0]
   2c8f2:	3301      	adds	r3, #1
   2c8f4:	68ba      	ldr	r2, [r7, #8]
   2c8f6:	18d3      	adds	r3, r2, r3
   2c8f8:	2216      	movs	r2, #22
   2c8fa:	18ba      	adds	r2, r7, r2
   2c8fc:	8812      	ldrh	r2, [r2, #0]
   2c8fe:	0a12      	lsrs	r2, r2, #8
   2c900:	b292      	uxth	r2, r2
   2c902:	b2d2      	uxtb	r2, r2
   2c904:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c906:	2316      	movs	r3, #22
   2c908:	18fb      	adds	r3, r7, r3
   2c90a:	881b      	ldrh	r3, [r3, #0]
   2c90c:	2b00      	cmp	r3, #0
   2c90e:	d104      	bne.n	2c91a <fit_lfn+0xc6>
   2c910:	2316      	movs	r3, #22
   2c912:	18fb      	adds	r3, r7, r3
   2c914:	2201      	movs	r2, #1
   2c916:	4252      	negs	r2, r2
   2c918:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c91a:	69bb      	ldr	r3, [r7, #24]
   2c91c:	3301      	adds	r3, #1
   2c91e:	61bb      	str	r3, [r7, #24]
   2c920:	69bb      	ldr	r3, [r7, #24]
   2c922:	2b0c      	cmp	r3, #12
   2c924:	d9c5      	bls.n	2c8b2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c926:	2316      	movs	r3, #22
   2c928:	18fb      	adds	r3, r7, r3
   2c92a:	881b      	ldrh	r3, [r3, #0]
   2c92c:	4a0b      	ldr	r2, [pc, #44]	; (2c95c <fit_lfn+0x108>)
   2c92e:	4293      	cmp	r3, r2
   2c930:	d006      	beq.n	2c940 <fit_lfn+0xec>
   2c932:	69fb      	ldr	r3, [r7, #28]
   2c934:	005b      	lsls	r3, r3, #1
   2c936:	68fa      	ldr	r2, [r7, #12]
   2c938:	18d3      	adds	r3, r2, r3
   2c93a:	881b      	ldrh	r3, [r3, #0]
   2c93c:	2b00      	cmp	r3, #0
   2c93e:	d105      	bne.n	2c94c <fit_lfn+0xf8>
   2c940:	1dfb      	adds	r3, r7, #7
   2c942:	1dfa      	adds	r2, r7, #7
   2c944:	7812      	ldrb	r2, [r2, #0]
   2c946:	2140      	movs	r1, #64	; 0x40
   2c948:	430a      	orrs	r2, r1
   2c94a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c94c:	68bb      	ldr	r3, [r7, #8]
   2c94e:	1dfa      	adds	r2, r7, #7
   2c950:	7812      	ldrb	r2, [r2, #0]
   2c952:	701a      	strb	r2, [r3, #0]
}
   2c954:	46c0      	nop			; (mov r8, r8)
   2c956:	46bd      	mov	sp, r7
   2c958:	b008      	add	sp, #32
   2c95a:	bd80      	pop	{r7, pc}
   2c95c:	0000ffff 	.word	0x0000ffff
   2c960:	00039b94 	.word	0x00039b94

0002c964 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c964:	b580      	push	{r7, lr}
   2c966:	b08a      	sub	sp, #40	; 0x28
   2c968:	af00      	add	r7, sp, #0
   2c96a:	60f8      	str	r0, [r7, #12]
   2c96c:	60b9      	str	r1, [r7, #8]
   2c96e:	607a      	str	r2, [r7, #4]
   2c970:	001a      	movs	r2, r3
   2c972:	1cbb      	adds	r3, r7, #2
   2c974:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c976:	68b9      	ldr	r1, [r7, #8]
   2c978:	68fb      	ldr	r3, [r7, #12]
   2c97a:	220b      	movs	r2, #11
   2c97c:	0018      	movs	r0, r3
   2c97e:	4b38      	ldr	r3, [pc, #224]	; (2ca60 <gen_numname+0xfc>)
   2c980:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c982:	1cbb      	adds	r3, r7, #2
   2c984:	881b      	ldrh	r3, [r3, #0]
   2c986:	2b05      	cmp	r3, #5
   2c988:	d911      	bls.n	2c9ae <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c98a:	1cbb      	adds	r3, r7, #2
   2c98c:	881b      	ldrh	r3, [r3, #0]
   2c98e:	b29a      	uxth	r2, r3
   2c990:	0852      	lsrs	r2, r2, #1
   2c992:	03db      	lsls	r3, r3, #15
   2c994:	4313      	orrs	r3, r2
   2c996:	b299      	uxth	r1, r3
   2c998:	687b      	ldr	r3, [r7, #4]
   2c99a:	1c9a      	adds	r2, r3, #2
   2c99c:	607a      	str	r2, [r7, #4]
   2c99e:	881a      	ldrh	r2, [r3, #0]
   2c9a0:	1cbb      	adds	r3, r7, #2
   2c9a2:	188a      	adds	r2, r1, r2
   2c9a4:	801a      	strh	r2, [r3, #0]
   2c9a6:	687b      	ldr	r3, [r7, #4]
   2c9a8:	881b      	ldrh	r3, [r3, #0]
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d1ed      	bne.n	2c98a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c9ae:	2307      	movs	r3, #7
   2c9b0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c9b2:	1cbb      	adds	r3, r7, #2
   2c9b4:	881b      	ldrh	r3, [r3, #0]
   2c9b6:	b2db      	uxtb	r3, r3
   2c9b8:	220f      	movs	r2, #15
   2c9ba:	4013      	ands	r3, r2
   2c9bc:	b2da      	uxtb	r2, r3
   2c9be:	2327      	movs	r3, #39	; 0x27
   2c9c0:	18fb      	adds	r3, r7, r3
   2c9c2:	3230      	adds	r2, #48	; 0x30
   2c9c4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c9c6:	2327      	movs	r3, #39	; 0x27
   2c9c8:	18fb      	adds	r3, r7, r3
   2c9ca:	781b      	ldrb	r3, [r3, #0]
   2c9cc:	2b39      	cmp	r3, #57	; 0x39
   2c9ce:	d906      	bls.n	2c9de <gen_numname+0x7a>
   2c9d0:	2327      	movs	r3, #39	; 0x27
   2c9d2:	18fb      	adds	r3, r7, r3
   2c9d4:	2227      	movs	r2, #39	; 0x27
   2c9d6:	18ba      	adds	r2, r7, r2
   2c9d8:	7812      	ldrb	r2, [r2, #0]
   2c9da:	3207      	adds	r2, #7
   2c9dc:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c9de:	6a3b      	ldr	r3, [r7, #32]
   2c9e0:	1e5a      	subs	r2, r3, #1
   2c9e2:	623a      	str	r2, [r7, #32]
   2c9e4:	2214      	movs	r2, #20
   2c9e6:	18ba      	adds	r2, r7, r2
   2c9e8:	2127      	movs	r1, #39	; 0x27
   2c9ea:	1879      	adds	r1, r7, r1
   2c9ec:	7809      	ldrb	r1, [r1, #0]
   2c9ee:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c9f0:	1cbb      	adds	r3, r7, #2
   2c9f2:	1cba      	adds	r2, r7, #2
   2c9f4:	8812      	ldrh	r2, [r2, #0]
   2c9f6:	0912      	lsrs	r2, r2, #4
   2c9f8:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c9fa:	1cbb      	adds	r3, r7, #2
   2c9fc:	881b      	ldrh	r3, [r3, #0]
   2c9fe:	2b00      	cmp	r3, #0
   2ca00:	d1d7      	bne.n	2c9b2 <gen_numname+0x4e>
	ns[i] = '~';
   2ca02:	2314      	movs	r3, #20
   2ca04:	18fa      	adds	r2, r7, r3
   2ca06:	6a3b      	ldr	r3, [r7, #32]
   2ca08:	18d3      	adds	r3, r2, r3
   2ca0a:	227e      	movs	r2, #126	; 0x7e
   2ca0c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2ca0e:	2300      	movs	r3, #0
   2ca10:	61fb      	str	r3, [r7, #28]
   2ca12:	e002      	b.n	2ca1a <gen_numname+0xb6>
   2ca14:	69fb      	ldr	r3, [r7, #28]
   2ca16:	3301      	adds	r3, #1
   2ca18:	61fb      	str	r3, [r7, #28]
   2ca1a:	69fa      	ldr	r2, [r7, #28]
   2ca1c:	6a3b      	ldr	r3, [r7, #32]
   2ca1e:	429a      	cmp	r2, r3
   2ca20:	d205      	bcs.n	2ca2e <gen_numname+0xca>
   2ca22:	68fa      	ldr	r2, [r7, #12]
   2ca24:	69fb      	ldr	r3, [r7, #28]
   2ca26:	18d3      	adds	r3, r2, r3
   2ca28:	781b      	ldrb	r3, [r3, #0]
   2ca2a:	2b20      	cmp	r3, #32
   2ca2c:	d1f2      	bne.n	2ca14 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2ca2e:	69fb      	ldr	r3, [r7, #28]
   2ca30:	1c5a      	adds	r2, r3, #1
   2ca32:	61fa      	str	r2, [r7, #28]
   2ca34:	68fa      	ldr	r2, [r7, #12]
   2ca36:	18d2      	adds	r2, r2, r3
   2ca38:	6a3b      	ldr	r3, [r7, #32]
   2ca3a:	2b07      	cmp	r3, #7
   2ca3c:	d806      	bhi.n	2ca4c <gen_numname+0xe8>
   2ca3e:	6a3b      	ldr	r3, [r7, #32]
   2ca40:	1c59      	adds	r1, r3, #1
   2ca42:	6239      	str	r1, [r7, #32]
   2ca44:	2114      	movs	r1, #20
   2ca46:	1879      	adds	r1, r7, r1
   2ca48:	5ccb      	ldrb	r3, [r1, r3]
   2ca4a:	e000      	b.n	2ca4e <gen_numname+0xea>
   2ca4c:	2320      	movs	r3, #32
   2ca4e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2ca50:	69fb      	ldr	r3, [r7, #28]
   2ca52:	2b07      	cmp	r3, #7
   2ca54:	d9eb      	bls.n	2ca2e <gen_numname+0xca>
}
   2ca56:	46c0      	nop			; (mov r8, r8)
   2ca58:	46bd      	mov	sp, r7
   2ca5a:	b00a      	add	sp, #40	; 0x28
   2ca5c:	bd80      	pop	{r7, pc}
   2ca5e:	46c0      	nop			; (mov r8, r8)
   2ca60:	0002bb09 	.word	0x0002bb09

0002ca64 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2ca64:	b580      	push	{r7, lr}
   2ca66:	b084      	sub	sp, #16
   2ca68:	af00      	add	r7, sp, #0
   2ca6a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2ca6c:	230f      	movs	r3, #15
   2ca6e:	18fb      	adds	r3, r7, r3
   2ca70:	2200      	movs	r2, #0
   2ca72:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2ca74:	230b      	movs	r3, #11
   2ca76:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2ca78:	230f      	movs	r3, #15
   2ca7a:	18fb      	adds	r3, r7, r3
   2ca7c:	781b      	ldrb	r3, [r3, #0]
   2ca7e:	b2da      	uxtb	r2, r3
   2ca80:	0852      	lsrs	r2, r2, #1
   2ca82:	01db      	lsls	r3, r3, #7
   2ca84:	4313      	orrs	r3, r2
   2ca86:	b2d9      	uxtb	r1, r3
   2ca88:	687b      	ldr	r3, [r7, #4]
   2ca8a:	1c5a      	adds	r2, r3, #1
   2ca8c:	607a      	str	r2, [r7, #4]
   2ca8e:	781a      	ldrb	r2, [r3, #0]
   2ca90:	230f      	movs	r3, #15
   2ca92:	18fb      	adds	r3, r7, r3
   2ca94:	188a      	adds	r2, r1, r2
   2ca96:	701a      	strb	r2, [r3, #0]
   2ca98:	68bb      	ldr	r3, [r7, #8]
   2ca9a:	3b01      	subs	r3, #1
   2ca9c:	60bb      	str	r3, [r7, #8]
   2ca9e:	68bb      	ldr	r3, [r7, #8]
   2caa0:	2b00      	cmp	r3, #0
   2caa2:	d1e9      	bne.n	2ca78 <sum_sfn+0x14>
	return sum;
   2caa4:	230f      	movs	r3, #15
   2caa6:	18fb      	adds	r3, r7, r3
   2caa8:	781b      	ldrb	r3, [r3, #0]
}
   2caaa:	0018      	movs	r0, r3
   2caac:	46bd      	mov	sp, r7
   2caae:	b004      	add	sp, #16
   2cab0:	bd80      	pop	{r7, pc}
	...

0002cab4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2cab4:	b590      	push	{r4, r7, lr}
   2cab6:	b087      	sub	sp, #28
   2cab8:	af00      	add	r7, sp, #0
   2caba:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2cabc:	2317      	movs	r3, #23
   2cabe:	18fc      	adds	r4, r7, r3
   2cac0:	687b      	ldr	r3, [r7, #4]
   2cac2:	2100      	movs	r1, #0
   2cac4:	0018      	movs	r0, r3
   2cac6:	4b74      	ldr	r3, [pc, #464]	; (2cc98 <dir_find+0x1e4>)
   2cac8:	4798      	blx	r3
   2caca:	0003      	movs	r3, r0
   2cacc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2cace:	2317      	movs	r3, #23
   2cad0:	18fb      	adds	r3, r7, r3
   2cad2:	781b      	ldrb	r3, [r3, #0]
   2cad4:	2b00      	cmp	r3, #0
   2cad6:	d003      	beq.n	2cae0 <dir_find+0x2c>
   2cad8:	2317      	movs	r3, #23
   2cada:	18fb      	adds	r3, r7, r3
   2cadc:	781b      	ldrb	r3, [r3, #0]
   2cade:	e0d6      	b.n	2cc8e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2cae0:	2314      	movs	r3, #20
   2cae2:	18fb      	adds	r3, r7, r3
   2cae4:	22ff      	movs	r2, #255	; 0xff
   2cae6:	701a      	strb	r2, [r3, #0]
   2cae8:	2315      	movs	r3, #21
   2caea:	18fb      	adds	r3, r7, r3
   2caec:	2214      	movs	r2, #20
   2caee:	18ba      	adds	r2, r7, r2
   2caf0:	7812      	ldrb	r2, [r2, #0]
   2caf2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2caf4:	687b      	ldr	r3, [r7, #4]
   2caf6:	681a      	ldr	r2, [r3, #0]
   2caf8:	687b      	ldr	r3, [r7, #4]
   2cafa:	691b      	ldr	r3, [r3, #16]
   2cafc:	2117      	movs	r1, #23
   2cafe:	187c      	adds	r4, r7, r1
   2cb00:	0019      	movs	r1, r3
   2cb02:	0010      	movs	r0, r2
   2cb04:	4b65      	ldr	r3, [pc, #404]	; (2cc9c <dir_find+0x1e8>)
   2cb06:	4798      	blx	r3
   2cb08:	0003      	movs	r3, r0
   2cb0a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2cb0c:	2317      	movs	r3, #23
   2cb0e:	18fb      	adds	r3, r7, r3
   2cb10:	781b      	ldrb	r3, [r3, #0]
   2cb12:	2b00      	cmp	r3, #0
   2cb14:	d000      	beq.n	2cb18 <dir_find+0x64>
   2cb16:	e0b2      	b.n	2cc7e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2cb18:	687b      	ldr	r3, [r7, #4]
   2cb1a:	695b      	ldr	r3, [r3, #20]
   2cb1c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2cb1e:	2316      	movs	r3, #22
   2cb20:	18fb      	adds	r3, r7, r3
   2cb22:	693a      	ldr	r2, [r7, #16]
   2cb24:	7812      	ldrb	r2, [r2, #0]
   2cb26:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2cb28:	2316      	movs	r3, #22
   2cb2a:	18fb      	adds	r3, r7, r3
   2cb2c:	781b      	ldrb	r3, [r3, #0]
   2cb2e:	2b00      	cmp	r3, #0
   2cb30:	d104      	bne.n	2cb3c <dir_find+0x88>
   2cb32:	2317      	movs	r3, #23
   2cb34:	18fb      	adds	r3, r7, r3
   2cb36:	2204      	movs	r2, #4
   2cb38:	701a      	strb	r2, [r3, #0]
   2cb3a:	e0a5      	b.n	2cc88 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2cb3c:	693b      	ldr	r3, [r7, #16]
   2cb3e:	330b      	adds	r3, #11
   2cb40:	781a      	ldrb	r2, [r3, #0]
   2cb42:	230f      	movs	r3, #15
   2cb44:	18fb      	adds	r3, r7, r3
   2cb46:	213f      	movs	r1, #63	; 0x3f
   2cb48:	400a      	ands	r2, r1
   2cb4a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2cb4c:	2316      	movs	r3, #22
   2cb4e:	18fb      	adds	r3, r7, r3
   2cb50:	781b      	ldrb	r3, [r3, #0]
   2cb52:	2be5      	cmp	r3, #229	; 0xe5
   2cb54:	d00a      	beq.n	2cb6c <dir_find+0xb8>
   2cb56:	230f      	movs	r3, #15
   2cb58:	18fb      	adds	r3, r7, r3
   2cb5a:	781b      	ldrb	r3, [r3, #0]
   2cb5c:	2208      	movs	r2, #8
   2cb5e:	4013      	ands	r3, r2
   2cb60:	d009      	beq.n	2cb76 <dir_find+0xc2>
   2cb62:	230f      	movs	r3, #15
   2cb64:	18fb      	adds	r3, r7, r3
   2cb66:	781b      	ldrb	r3, [r3, #0]
   2cb68:	2b0f      	cmp	r3, #15
   2cb6a:	d004      	beq.n	2cb76 <dir_find+0xc2>
			ord = 0xFF;
   2cb6c:	2315      	movs	r3, #21
   2cb6e:	18fb      	adds	r3, r7, r3
   2cb70:	22ff      	movs	r2, #255	; 0xff
   2cb72:	701a      	strb	r2, [r3, #0]
   2cb74:	e073      	b.n	2cc5e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2cb76:	230f      	movs	r3, #15
   2cb78:	18fb      	adds	r3, r7, r3
   2cb7a:	781b      	ldrb	r3, [r3, #0]
   2cb7c:	2b0f      	cmp	r3, #15
   2cb7e:	d145      	bne.n	2cc0c <dir_find+0x158>
				if (dj->lfn) {
   2cb80:	687b      	ldr	r3, [r7, #4]
   2cb82:	69db      	ldr	r3, [r3, #28]
   2cb84:	2b00      	cmp	r3, #0
   2cb86:	d100      	bne.n	2cb8a <dir_find+0xd6>
   2cb88:	e069      	b.n	2cc5e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2cb8a:	2316      	movs	r3, #22
   2cb8c:	18fb      	adds	r3, r7, r3
   2cb8e:	781b      	ldrb	r3, [r3, #0]
   2cb90:	2240      	movs	r2, #64	; 0x40
   2cb92:	4013      	ands	r3, r2
   2cb94:	d016      	beq.n	2cbc4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2cb96:	2314      	movs	r3, #20
   2cb98:	18fb      	adds	r3, r7, r3
   2cb9a:	693a      	ldr	r2, [r7, #16]
   2cb9c:	7b52      	ldrb	r2, [r2, #13]
   2cb9e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2cba0:	2316      	movs	r3, #22
   2cba2:	18fb      	adds	r3, r7, r3
   2cba4:	2216      	movs	r2, #22
   2cba6:	18ba      	adds	r2, r7, r2
   2cba8:	7812      	ldrb	r2, [r2, #0]
   2cbaa:	2140      	movs	r1, #64	; 0x40
   2cbac:	438a      	bics	r2, r1
   2cbae:	701a      	strb	r2, [r3, #0]
   2cbb0:	2315      	movs	r3, #21
   2cbb2:	18fb      	adds	r3, r7, r3
   2cbb4:	2216      	movs	r2, #22
   2cbb6:	18ba      	adds	r2, r7, r2
   2cbb8:	7812      	ldrb	r2, [r2, #0]
   2cbba:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2cbbc:	687b      	ldr	r3, [r7, #4]
   2cbbe:	88da      	ldrh	r2, [r3, #6]
   2cbc0:	687b      	ldr	r3, [r7, #4]
   2cbc2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2cbc4:	2316      	movs	r3, #22
   2cbc6:	18fa      	adds	r2, r7, r3
   2cbc8:	2315      	movs	r3, #21
   2cbca:	18fb      	adds	r3, r7, r3
   2cbcc:	7812      	ldrb	r2, [r2, #0]
   2cbce:	781b      	ldrb	r3, [r3, #0]
   2cbd0:	429a      	cmp	r2, r3
   2cbd2:	d116      	bne.n	2cc02 <dir_find+0x14e>
   2cbd4:	693b      	ldr	r3, [r7, #16]
   2cbd6:	330d      	adds	r3, #13
   2cbd8:	781b      	ldrb	r3, [r3, #0]
   2cbda:	2214      	movs	r2, #20
   2cbdc:	18ba      	adds	r2, r7, r2
   2cbde:	7812      	ldrb	r2, [r2, #0]
   2cbe0:	429a      	cmp	r2, r3
   2cbe2:	d10e      	bne.n	2cc02 <dir_find+0x14e>
   2cbe4:	687b      	ldr	r3, [r7, #4]
   2cbe6:	69db      	ldr	r3, [r3, #28]
   2cbe8:	693a      	ldr	r2, [r7, #16]
   2cbea:	0011      	movs	r1, r2
   2cbec:	0018      	movs	r0, r3
   2cbee:	4b2c      	ldr	r3, [pc, #176]	; (2cca0 <dir_find+0x1ec>)
   2cbf0:	4798      	blx	r3
   2cbf2:	1e03      	subs	r3, r0, #0
   2cbf4:	d005      	beq.n	2cc02 <dir_find+0x14e>
   2cbf6:	2315      	movs	r3, #21
   2cbf8:	18fb      	adds	r3, r7, r3
   2cbfa:	781b      	ldrb	r3, [r3, #0]
   2cbfc:	3b01      	subs	r3, #1
   2cbfe:	b2da      	uxtb	r2, r3
   2cc00:	e000      	b.n	2cc04 <dir_find+0x150>
   2cc02:	22ff      	movs	r2, #255	; 0xff
   2cc04:	2315      	movs	r3, #21
   2cc06:	18fb      	adds	r3, r7, r3
   2cc08:	701a      	strb	r2, [r3, #0]
   2cc0a:	e028      	b.n	2cc5e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2cc0c:	2315      	movs	r3, #21
   2cc0e:	18fb      	adds	r3, r7, r3
   2cc10:	781b      	ldrb	r3, [r3, #0]
   2cc12:	2b00      	cmp	r3, #0
   2cc14:	d10a      	bne.n	2cc2c <dir_find+0x178>
   2cc16:	693b      	ldr	r3, [r7, #16]
   2cc18:	0018      	movs	r0, r3
   2cc1a:	4b22      	ldr	r3, [pc, #136]	; (2cca4 <dir_find+0x1f0>)
   2cc1c:	4798      	blx	r3
   2cc1e:	0003      	movs	r3, r0
   2cc20:	001a      	movs	r2, r3
   2cc22:	2314      	movs	r3, #20
   2cc24:	18fb      	adds	r3, r7, r3
   2cc26:	781b      	ldrb	r3, [r3, #0]
   2cc28:	4293      	cmp	r3, r2
   2cc2a:	d02a      	beq.n	2cc82 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2cc2c:	2315      	movs	r3, #21
   2cc2e:	18fb      	adds	r3, r7, r3
   2cc30:	22ff      	movs	r2, #255	; 0xff
   2cc32:	701a      	strb	r2, [r3, #0]
   2cc34:	687b      	ldr	r3, [r7, #4]
   2cc36:	2201      	movs	r2, #1
   2cc38:	4252      	negs	r2, r2
   2cc3a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cc3c:	687b      	ldr	r3, [r7, #4]
   2cc3e:	699b      	ldr	r3, [r3, #24]
   2cc40:	330b      	adds	r3, #11
   2cc42:	781b      	ldrb	r3, [r3, #0]
   2cc44:	001a      	movs	r2, r3
   2cc46:	2301      	movs	r3, #1
   2cc48:	4013      	ands	r3, r2
   2cc4a:	d108      	bne.n	2cc5e <dir_find+0x1aa>
   2cc4c:	687b      	ldr	r3, [r7, #4]
   2cc4e:	6999      	ldr	r1, [r3, #24]
   2cc50:	693b      	ldr	r3, [r7, #16]
   2cc52:	220b      	movs	r2, #11
   2cc54:	0018      	movs	r0, r3
   2cc56:	4b14      	ldr	r3, [pc, #80]	; (2cca8 <dir_find+0x1f4>)
   2cc58:	4798      	blx	r3
   2cc5a:	1e03      	subs	r3, r0, #0
   2cc5c:	d013      	beq.n	2cc86 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2cc5e:	2317      	movs	r3, #23
   2cc60:	18fc      	adds	r4, r7, r3
   2cc62:	687b      	ldr	r3, [r7, #4]
   2cc64:	2100      	movs	r1, #0
   2cc66:	0018      	movs	r0, r3
   2cc68:	4b10      	ldr	r3, [pc, #64]	; (2ccac <dir_find+0x1f8>)
   2cc6a:	4798      	blx	r3
   2cc6c:	0003      	movs	r3, r0
   2cc6e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2cc70:	2317      	movs	r3, #23
   2cc72:	18fb      	adds	r3, r7, r3
   2cc74:	781b      	ldrb	r3, [r3, #0]
   2cc76:	2b00      	cmp	r3, #0
   2cc78:	d100      	bne.n	2cc7c <dir_find+0x1c8>
   2cc7a:	e73b      	b.n	2caf4 <dir_find+0x40>
   2cc7c:	e004      	b.n	2cc88 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2cc7e:	46c0      	nop			; (mov r8, r8)
   2cc80:	e002      	b.n	2cc88 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2cc82:	46c0      	nop			; (mov r8, r8)
   2cc84:	e000      	b.n	2cc88 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cc86:	46c0      	nop			; (mov r8, r8)

	return res;
   2cc88:	2317      	movs	r3, #23
   2cc8a:	18fb      	adds	r3, r7, r3
   2cc8c:	781b      	ldrb	r3, [r3, #0]
}
   2cc8e:	0018      	movs	r0, r3
   2cc90:	46bd      	mov	sp, r7
   2cc92:	b007      	add	sp, #28
   2cc94:	bd90      	pop	{r4, r7, pc}
   2cc96:	46c0      	nop			; (mov r8, r8)
   2cc98:	0002c431 	.word	0x0002c431
   2cc9c:	0002bbed 	.word	0x0002bbed
   2cca0:	0002c751 	.word	0x0002c751
   2cca4:	0002ca65 	.word	0x0002ca65
   2cca8:	0002bb71 	.word	0x0002bb71
   2ccac:	0002c561 	.word	0x0002c561

0002ccb0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2ccb0:	b590      	push	{r4, r7, lr}
   2ccb2:	b08d      	sub	sp, #52	; 0x34
   2ccb4:	af00      	add	r7, sp, #0
   2ccb6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2ccb8:	687b      	ldr	r3, [r7, #4]
   2ccba:	699b      	ldr	r3, [r3, #24]
   2ccbc:	627b      	str	r3, [r7, #36]	; 0x24
   2ccbe:	687b      	ldr	r3, [r7, #4]
   2ccc0:	69db      	ldr	r3, [r3, #28]
   2ccc2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2ccc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ccc6:	230c      	movs	r3, #12
   2ccc8:	18fb      	adds	r3, r7, r3
   2ccca:	220c      	movs	r2, #12
   2cccc:	0018      	movs	r0, r3
   2ccce:	4bc8      	ldr	r3, [pc, #800]	; (2cff0 <dir_register+0x340>)
   2ccd0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2ccd2:	230c      	movs	r3, #12
   2ccd4:	18fb      	adds	r3, r7, r3
   2ccd6:	7adb      	ldrb	r3, [r3, #11]
   2ccd8:	001a      	movs	r2, r3
   2ccda:	2301      	movs	r3, #1
   2ccdc:	4013      	ands	r3, r2
   2ccde:	d048      	beq.n	2cd72 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cce2:	330b      	adds	r3, #11
   2cce4:	2200      	movs	r2, #0
   2cce6:	701a      	strb	r2, [r3, #0]
   2cce8:	687b      	ldr	r3, [r7, #4]
   2ccea:	2200      	movs	r2, #0
   2ccec:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2ccee:	232c      	movs	r3, #44	; 0x2c
   2ccf0:	18fb      	adds	r3, r7, r3
   2ccf2:	2201      	movs	r2, #1
   2ccf4:	801a      	strh	r2, [r3, #0]
   2ccf6:	e01c      	b.n	2cd32 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2ccf8:	232c      	movs	r3, #44	; 0x2c
   2ccfa:	18fb      	adds	r3, r7, r3
   2ccfc:	881b      	ldrh	r3, [r3, #0]
   2ccfe:	6a3a      	ldr	r2, [r7, #32]
   2cd00:	210c      	movs	r1, #12
   2cd02:	1879      	adds	r1, r7, r1
   2cd04:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2cd06:	4cbb      	ldr	r4, [pc, #748]	; (2cff4 <dir_register+0x344>)
   2cd08:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2cd0a:	232f      	movs	r3, #47	; 0x2f
   2cd0c:	18fc      	adds	r4, r7, r3
   2cd0e:	687b      	ldr	r3, [r7, #4]
   2cd10:	0018      	movs	r0, r3
   2cd12:	4bb9      	ldr	r3, [pc, #740]	; (2cff8 <dir_register+0x348>)
   2cd14:	4798      	blx	r3
   2cd16:	0003      	movs	r3, r0
   2cd18:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cd1a:	232f      	movs	r3, #47	; 0x2f
   2cd1c:	18fb      	adds	r3, r7, r3
   2cd1e:	781b      	ldrb	r3, [r3, #0]
   2cd20:	2b00      	cmp	r3, #0
   2cd22:	d10c      	bne.n	2cd3e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2cd24:	232c      	movs	r3, #44	; 0x2c
   2cd26:	18fb      	adds	r3, r7, r3
   2cd28:	881a      	ldrh	r2, [r3, #0]
   2cd2a:	232c      	movs	r3, #44	; 0x2c
   2cd2c:	18fb      	adds	r3, r7, r3
   2cd2e:	3201      	adds	r2, #1
   2cd30:	801a      	strh	r2, [r3, #0]
   2cd32:	232c      	movs	r3, #44	; 0x2c
   2cd34:	18fb      	adds	r3, r7, r3
   2cd36:	881b      	ldrh	r3, [r3, #0]
   2cd38:	2b63      	cmp	r3, #99	; 0x63
   2cd3a:	d9dd      	bls.n	2ccf8 <dir_register+0x48>
   2cd3c:	e000      	b.n	2cd40 <dir_register+0x90>
			if (res != FR_OK) break;
   2cd3e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2cd40:	232c      	movs	r3, #44	; 0x2c
   2cd42:	18fb      	adds	r3, r7, r3
   2cd44:	881b      	ldrh	r3, [r3, #0]
   2cd46:	2b64      	cmp	r3, #100	; 0x64
   2cd48:	d101      	bne.n	2cd4e <dir_register+0x9e>
   2cd4a:	2307      	movs	r3, #7
   2cd4c:	e14c      	b.n	2cfe8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2cd4e:	232f      	movs	r3, #47	; 0x2f
   2cd50:	18fb      	adds	r3, r7, r3
   2cd52:	781b      	ldrb	r3, [r3, #0]
   2cd54:	2b04      	cmp	r3, #4
   2cd56:	d003      	beq.n	2cd60 <dir_register+0xb0>
   2cd58:	232f      	movs	r3, #47	; 0x2f
   2cd5a:	18fb      	adds	r3, r7, r3
   2cd5c:	781b      	ldrb	r3, [r3, #0]
   2cd5e:	e143      	b.n	2cfe8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cd62:	330b      	adds	r3, #11
   2cd64:	220c      	movs	r2, #12
   2cd66:	18ba      	adds	r2, r7, r2
   2cd68:	7ad2      	ldrb	r2, [r2, #11]
   2cd6a:	701a      	strb	r2, [r3, #0]
   2cd6c:	687b      	ldr	r3, [r7, #4]
   2cd6e:	6a3a      	ldr	r2, [r7, #32]
   2cd70:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2cd72:	230c      	movs	r3, #12
   2cd74:	18fb      	adds	r3, r7, r3
   2cd76:	7adb      	ldrb	r3, [r3, #11]
   2cd78:	001a      	movs	r2, r3
   2cd7a:	2302      	movs	r3, #2
   2cd7c:	4013      	ands	r3, r2
   2cd7e:	d023      	beq.n	2cdc8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2cd80:	232a      	movs	r3, #42	; 0x2a
   2cd82:	18fb      	adds	r3, r7, r3
   2cd84:	2200      	movs	r2, #0
   2cd86:	801a      	strh	r2, [r3, #0]
   2cd88:	e006      	b.n	2cd98 <dir_register+0xe8>
   2cd8a:	232a      	movs	r3, #42	; 0x2a
   2cd8c:	18fb      	adds	r3, r7, r3
   2cd8e:	881a      	ldrh	r2, [r3, #0]
   2cd90:	232a      	movs	r3, #42	; 0x2a
   2cd92:	18fb      	adds	r3, r7, r3
   2cd94:	3201      	adds	r2, #1
   2cd96:	801a      	strh	r2, [r3, #0]
   2cd98:	232a      	movs	r3, #42	; 0x2a
   2cd9a:	18fb      	adds	r3, r7, r3
   2cd9c:	881b      	ldrh	r3, [r3, #0]
   2cd9e:	005b      	lsls	r3, r3, #1
   2cda0:	6a3a      	ldr	r2, [r7, #32]
   2cda2:	18d3      	adds	r3, r2, r3
   2cda4:	881b      	ldrh	r3, [r3, #0]
   2cda6:	2b00      	cmp	r3, #0
   2cda8:	d1ef      	bne.n	2cd8a <dir_register+0xda>
		ne = (ne + 25) / 13;
   2cdaa:	232a      	movs	r3, #42	; 0x2a
   2cdac:	18fb      	adds	r3, r7, r3
   2cdae:	881b      	ldrh	r3, [r3, #0]
   2cdb0:	3319      	adds	r3, #25
   2cdb2:	001a      	movs	r2, r3
   2cdb4:	4b91      	ldr	r3, [pc, #580]	; (2cffc <dir_register+0x34c>)
   2cdb6:	210d      	movs	r1, #13
   2cdb8:	0010      	movs	r0, r2
   2cdba:	4798      	blx	r3
   2cdbc:	0003      	movs	r3, r0
   2cdbe:	001a      	movs	r2, r3
   2cdc0:	232a      	movs	r3, #42	; 0x2a
   2cdc2:	18fb      	adds	r3, r7, r3
   2cdc4:	801a      	strh	r2, [r3, #0]
   2cdc6:	e003      	b.n	2cdd0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2cdc8:	232a      	movs	r3, #42	; 0x2a
   2cdca:	18fb      	adds	r3, r7, r3
   2cdcc:	2201      	movs	r2, #1
   2cdce:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2cdd0:	232f      	movs	r3, #47	; 0x2f
   2cdd2:	18fc      	adds	r4, r7, r3
   2cdd4:	687b      	ldr	r3, [r7, #4]
   2cdd6:	2100      	movs	r1, #0
   2cdd8:	0018      	movs	r0, r3
   2cdda:	4b89      	ldr	r3, [pc, #548]	; (2d000 <dir_register+0x350>)
   2cddc:	4798      	blx	r3
   2cdde:	0003      	movs	r3, r0
   2cde0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2cde2:	232f      	movs	r3, #47	; 0x2f
   2cde4:	18fb      	adds	r3, r7, r3
   2cde6:	781b      	ldrb	r3, [r3, #0]
   2cde8:	2b00      	cmp	r3, #0
   2cdea:	d003      	beq.n	2cdf4 <dir_register+0x144>
   2cdec:	232f      	movs	r3, #47	; 0x2f
   2cdee:	18fb      	adds	r3, r7, r3
   2cdf0:	781b      	ldrb	r3, [r3, #0]
   2cdf2:	e0f9      	b.n	2cfe8 <dir_register+0x338>
	n = is = 0;
   2cdf4:	2328      	movs	r3, #40	; 0x28
   2cdf6:	18fb      	adds	r3, r7, r3
   2cdf8:	2200      	movs	r2, #0
   2cdfa:	801a      	strh	r2, [r3, #0]
   2cdfc:	232c      	movs	r3, #44	; 0x2c
   2cdfe:	18fb      	adds	r3, r7, r3
   2ce00:	2228      	movs	r2, #40	; 0x28
   2ce02:	18ba      	adds	r2, r7, r2
   2ce04:	8812      	ldrh	r2, [r2, #0]
   2ce06:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2ce08:	687b      	ldr	r3, [r7, #4]
   2ce0a:	681a      	ldr	r2, [r3, #0]
   2ce0c:	687b      	ldr	r3, [r7, #4]
   2ce0e:	691b      	ldr	r3, [r3, #16]
   2ce10:	212f      	movs	r1, #47	; 0x2f
   2ce12:	187c      	adds	r4, r7, r1
   2ce14:	0019      	movs	r1, r3
   2ce16:	0010      	movs	r0, r2
   2ce18:	4b7a      	ldr	r3, [pc, #488]	; (2d004 <dir_register+0x354>)
   2ce1a:	4798      	blx	r3
   2ce1c:	0003      	movs	r3, r0
   2ce1e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2ce20:	232f      	movs	r3, #47	; 0x2f
   2ce22:	18fb      	adds	r3, r7, r3
   2ce24:	781b      	ldrb	r3, [r3, #0]
   2ce26:	2b00      	cmp	r3, #0
   2ce28:	d13c      	bne.n	2cea4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2ce2a:	687b      	ldr	r3, [r7, #4]
   2ce2c:	695a      	ldr	r2, [r3, #20]
   2ce2e:	231f      	movs	r3, #31
   2ce30:	18fb      	adds	r3, r7, r3
   2ce32:	7812      	ldrb	r2, [r2, #0]
   2ce34:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2ce36:	231f      	movs	r3, #31
   2ce38:	18fb      	adds	r3, r7, r3
   2ce3a:	781b      	ldrb	r3, [r3, #0]
   2ce3c:	2be5      	cmp	r3, #229	; 0xe5
   2ce3e:	d004      	beq.n	2ce4a <dir_register+0x19a>
   2ce40:	231f      	movs	r3, #31
   2ce42:	18fb      	adds	r3, r7, r3
   2ce44:	781b      	ldrb	r3, [r3, #0]
   2ce46:	2b00      	cmp	r3, #0
   2ce48:	d119      	bne.n	2ce7e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2ce4a:	232c      	movs	r3, #44	; 0x2c
   2ce4c:	18fb      	adds	r3, r7, r3
   2ce4e:	881b      	ldrh	r3, [r3, #0]
   2ce50:	2b00      	cmp	r3, #0
   2ce52:	d104      	bne.n	2ce5e <dir_register+0x1ae>
   2ce54:	2328      	movs	r3, #40	; 0x28
   2ce56:	18fb      	adds	r3, r7, r3
   2ce58:	687a      	ldr	r2, [r7, #4]
   2ce5a:	88d2      	ldrh	r2, [r2, #6]
   2ce5c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2ce5e:	232c      	movs	r3, #44	; 0x2c
   2ce60:	18fb      	adds	r3, r7, r3
   2ce62:	222c      	movs	r2, #44	; 0x2c
   2ce64:	18ba      	adds	r2, r7, r2
   2ce66:	8812      	ldrh	r2, [r2, #0]
   2ce68:	3201      	adds	r2, #1
   2ce6a:	801a      	strh	r2, [r3, #0]
   2ce6c:	232c      	movs	r3, #44	; 0x2c
   2ce6e:	18fa      	adds	r2, r7, r3
   2ce70:	232a      	movs	r3, #42	; 0x2a
   2ce72:	18fb      	adds	r3, r7, r3
   2ce74:	8812      	ldrh	r2, [r2, #0]
   2ce76:	881b      	ldrh	r3, [r3, #0]
   2ce78:	429a      	cmp	r2, r3
   2ce7a:	d104      	bne.n	2ce86 <dir_register+0x1d6>
   2ce7c:	e013      	b.n	2cea6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2ce7e:	232c      	movs	r3, #44	; 0x2c
   2ce80:	18fb      	adds	r3, r7, r3
   2ce82:	2200      	movs	r2, #0
   2ce84:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2ce86:	232f      	movs	r3, #47	; 0x2f
   2ce88:	18fc      	adds	r4, r7, r3
   2ce8a:	687b      	ldr	r3, [r7, #4]
   2ce8c:	2101      	movs	r1, #1
   2ce8e:	0018      	movs	r0, r3
   2ce90:	4b5d      	ldr	r3, [pc, #372]	; (2d008 <dir_register+0x358>)
   2ce92:	4798      	blx	r3
   2ce94:	0003      	movs	r3, r0
   2ce96:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ce98:	232f      	movs	r3, #47	; 0x2f
   2ce9a:	18fb      	adds	r3, r7, r3
   2ce9c:	781b      	ldrb	r3, [r3, #0]
   2ce9e:	2b00      	cmp	r3, #0
   2cea0:	d0b2      	beq.n	2ce08 <dir_register+0x158>
   2cea2:	e000      	b.n	2cea6 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2cea4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2cea6:	232f      	movs	r3, #47	; 0x2f
   2cea8:	18fb      	adds	r3, r7, r3
   2ceaa:	781b      	ldrb	r3, [r3, #0]
   2ceac:	2b00      	cmp	r3, #0
   2ceae:	d163      	bne.n	2cf78 <dir_register+0x2c8>
   2ceb0:	232a      	movs	r3, #42	; 0x2a
   2ceb2:	18fb      	adds	r3, r7, r3
   2ceb4:	881b      	ldrh	r3, [r3, #0]
   2ceb6:	2b01      	cmp	r3, #1
   2ceb8:	d95e      	bls.n	2cf78 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2ceba:	232f      	movs	r3, #47	; 0x2f
   2cebc:	18fc      	adds	r4, r7, r3
   2cebe:	2328      	movs	r3, #40	; 0x28
   2cec0:	18fb      	adds	r3, r7, r3
   2cec2:	881a      	ldrh	r2, [r3, #0]
   2cec4:	687b      	ldr	r3, [r7, #4]
   2cec6:	0011      	movs	r1, r2
   2cec8:	0018      	movs	r0, r3
   2ceca:	4b4d      	ldr	r3, [pc, #308]	; (2d000 <dir_register+0x350>)
   2cecc:	4798      	blx	r3
   2cece:	0003      	movs	r3, r0
   2ced0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2ced2:	232f      	movs	r3, #47	; 0x2f
   2ced4:	18fb      	adds	r3, r7, r3
   2ced6:	781b      	ldrb	r3, [r3, #0]
   2ced8:	2b00      	cmp	r3, #0
   2ceda:	d14d      	bne.n	2cf78 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2cedc:	687b      	ldr	r3, [r7, #4]
   2cede:	699b      	ldr	r3, [r3, #24]
   2cee0:	221e      	movs	r2, #30
   2cee2:	18bc      	adds	r4, r7, r2
   2cee4:	0018      	movs	r0, r3
   2cee6:	4b49      	ldr	r3, [pc, #292]	; (2d00c <dir_register+0x35c>)
   2cee8:	4798      	blx	r3
   2ceea:	0003      	movs	r3, r0
   2ceec:	7023      	strb	r3, [r4, #0]
			ne--;
   2ceee:	232a      	movs	r3, #42	; 0x2a
   2cef0:	18fb      	adds	r3, r7, r3
   2cef2:	881a      	ldrh	r2, [r3, #0]
   2cef4:	232a      	movs	r3, #42	; 0x2a
   2cef6:	18fb      	adds	r3, r7, r3
   2cef8:	3a01      	subs	r2, #1
   2cefa:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2cefc:	687b      	ldr	r3, [r7, #4]
   2cefe:	681a      	ldr	r2, [r3, #0]
   2cf00:	687b      	ldr	r3, [r7, #4]
   2cf02:	691b      	ldr	r3, [r3, #16]
   2cf04:	212f      	movs	r1, #47	; 0x2f
   2cf06:	187c      	adds	r4, r7, r1
   2cf08:	0019      	movs	r1, r3
   2cf0a:	0010      	movs	r0, r2
   2cf0c:	4b3d      	ldr	r3, [pc, #244]	; (2d004 <dir_register+0x354>)
   2cf0e:	4798      	blx	r3
   2cf10:	0003      	movs	r3, r0
   2cf12:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2cf14:	232f      	movs	r3, #47	; 0x2f
   2cf16:	18fb      	adds	r3, r7, r3
   2cf18:	781b      	ldrb	r3, [r3, #0]
   2cf1a:	2b00      	cmp	r3, #0
   2cf1c:	d12b      	bne.n	2cf76 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2cf1e:	687b      	ldr	r3, [r7, #4]
   2cf20:	69d8      	ldr	r0, [r3, #28]
   2cf22:	687b      	ldr	r3, [r7, #4]
   2cf24:	6959      	ldr	r1, [r3, #20]
   2cf26:	232a      	movs	r3, #42	; 0x2a
   2cf28:	18fb      	adds	r3, r7, r3
   2cf2a:	881b      	ldrh	r3, [r3, #0]
   2cf2c:	b2da      	uxtb	r2, r3
   2cf2e:	231e      	movs	r3, #30
   2cf30:	18fb      	adds	r3, r7, r3
   2cf32:	781b      	ldrb	r3, [r3, #0]
   2cf34:	4c36      	ldr	r4, [pc, #216]	; (2d010 <dir_register+0x360>)
   2cf36:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2cf38:	687b      	ldr	r3, [r7, #4]
   2cf3a:	681b      	ldr	r3, [r3, #0]
   2cf3c:	2201      	movs	r2, #1
   2cf3e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2cf40:	232f      	movs	r3, #47	; 0x2f
   2cf42:	18fc      	adds	r4, r7, r3
   2cf44:	687b      	ldr	r3, [r7, #4]
   2cf46:	2100      	movs	r1, #0
   2cf48:	0018      	movs	r0, r3
   2cf4a:	4b2f      	ldr	r3, [pc, #188]	; (2d008 <dir_register+0x358>)
   2cf4c:	4798      	blx	r3
   2cf4e:	0003      	movs	r3, r0
   2cf50:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2cf52:	232f      	movs	r3, #47	; 0x2f
   2cf54:	18fb      	adds	r3, r7, r3
   2cf56:	781b      	ldrb	r3, [r3, #0]
   2cf58:	2b00      	cmp	r3, #0
   2cf5a:	d10d      	bne.n	2cf78 <dir_register+0x2c8>
   2cf5c:	232a      	movs	r3, #42	; 0x2a
   2cf5e:	18fb      	adds	r3, r7, r3
   2cf60:	222a      	movs	r2, #42	; 0x2a
   2cf62:	18ba      	adds	r2, r7, r2
   2cf64:	8812      	ldrh	r2, [r2, #0]
   2cf66:	3a01      	subs	r2, #1
   2cf68:	801a      	strh	r2, [r3, #0]
   2cf6a:	232a      	movs	r3, #42	; 0x2a
   2cf6c:	18fb      	adds	r3, r7, r3
   2cf6e:	881b      	ldrh	r3, [r3, #0]
   2cf70:	2b00      	cmp	r3, #0
   2cf72:	d1c3      	bne.n	2cefc <dir_register+0x24c>
   2cf74:	e000      	b.n	2cf78 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2cf76:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2cf78:	232f      	movs	r3, #47	; 0x2f
   2cf7a:	18fb      	adds	r3, r7, r3
   2cf7c:	781b      	ldrb	r3, [r3, #0]
   2cf7e:	2b00      	cmp	r3, #0
   2cf80:	d12f      	bne.n	2cfe2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2cf82:	687b      	ldr	r3, [r7, #4]
   2cf84:	681a      	ldr	r2, [r3, #0]
   2cf86:	687b      	ldr	r3, [r7, #4]
   2cf88:	691b      	ldr	r3, [r3, #16]
   2cf8a:	212f      	movs	r1, #47	; 0x2f
   2cf8c:	187c      	adds	r4, r7, r1
   2cf8e:	0019      	movs	r1, r3
   2cf90:	0010      	movs	r0, r2
   2cf92:	4b1c      	ldr	r3, [pc, #112]	; (2d004 <dir_register+0x354>)
   2cf94:	4798      	blx	r3
   2cf96:	0003      	movs	r3, r0
   2cf98:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2cf9a:	232f      	movs	r3, #47	; 0x2f
   2cf9c:	18fb      	adds	r3, r7, r3
   2cf9e:	781b      	ldrb	r3, [r3, #0]
   2cfa0:	2b00      	cmp	r3, #0
   2cfa2:	d11e      	bne.n	2cfe2 <dir_register+0x332>
			dir = dj->dir;
   2cfa4:	687b      	ldr	r3, [r7, #4]
   2cfa6:	695b      	ldr	r3, [r3, #20]
   2cfa8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2cfaa:	69bb      	ldr	r3, [r7, #24]
   2cfac:	2220      	movs	r2, #32
   2cfae:	2100      	movs	r1, #0
   2cfb0:	0018      	movs	r0, r3
   2cfb2:	4b18      	ldr	r3, [pc, #96]	; (2d014 <dir_register+0x364>)
   2cfb4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2cfb6:	687b      	ldr	r3, [r7, #4]
   2cfb8:	6999      	ldr	r1, [r3, #24]
   2cfba:	69bb      	ldr	r3, [r7, #24]
   2cfbc:	220b      	movs	r2, #11
   2cfbe:	0018      	movs	r0, r3
   2cfc0:	4b0b      	ldr	r3, [pc, #44]	; (2cff0 <dir_register+0x340>)
   2cfc2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2cfc4:	69bb      	ldr	r3, [r7, #24]
   2cfc6:	330c      	adds	r3, #12
   2cfc8:	001a      	movs	r2, r3
   2cfca:	687b      	ldr	r3, [r7, #4]
   2cfcc:	699b      	ldr	r3, [r3, #24]
   2cfce:	330b      	adds	r3, #11
   2cfd0:	781b      	ldrb	r3, [r3, #0]
   2cfd2:	2118      	movs	r1, #24
   2cfd4:	400b      	ands	r3, r1
   2cfd6:	b2db      	uxtb	r3, r3
   2cfd8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2cfda:	687b      	ldr	r3, [r7, #4]
   2cfdc:	681b      	ldr	r3, [r3, #0]
   2cfde:	2201      	movs	r2, #1
   2cfe0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2cfe2:	232f      	movs	r3, #47	; 0x2f
   2cfe4:	18fb      	adds	r3, r7, r3
   2cfe6:	781b      	ldrb	r3, [r3, #0]
}
   2cfe8:	0018      	movs	r0, r3
   2cfea:	46bd      	mov	sp, r7
   2cfec:	b00d      	add	sp, #52	; 0x34
   2cfee:	bd90      	pop	{r4, r7, pc}
   2cff0:	0002bb09 	.word	0x0002bb09
   2cff4:	0002c965 	.word	0x0002c965
   2cff8:	0002cab5 	.word	0x0002cab5
   2cffc:	00032ea9 	.word	0x00032ea9
   2d000:	0002c431 	.word	0x0002c431
   2d004:	0002bbed 	.word	0x0002bbed
   2d008:	0002c561 	.word	0x0002c561
   2d00c:	0002ca65 	.word	0x0002ca65
   2d010:	0002c855 	.word	0x0002c855
   2d014:	0002bb41 	.word	0x0002bb41

0002d018 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d018:	b590      	push	{r4, r7, lr}
   2d01a:	b08b      	sub	sp, #44	; 0x2c
   2d01c:	af00      	add	r7, sp, #0
   2d01e:	6078      	str	r0, [r7, #4]
   2d020:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d022:	683b      	ldr	r3, [r7, #0]
   2d024:	681b      	ldr	r3, [r3, #0]
   2d026:	613b      	str	r3, [r7, #16]
   2d028:	e002      	b.n	2d030 <create_name+0x18>
   2d02a:	693b      	ldr	r3, [r7, #16]
   2d02c:	3301      	adds	r3, #1
   2d02e:	613b      	str	r3, [r7, #16]
   2d030:	693b      	ldr	r3, [r7, #16]
   2d032:	781b      	ldrb	r3, [r3, #0]
   2d034:	2b2f      	cmp	r3, #47	; 0x2f
   2d036:	d0f8      	beq.n	2d02a <create_name+0x12>
   2d038:	693b      	ldr	r3, [r7, #16]
   2d03a:	781b      	ldrb	r3, [r3, #0]
   2d03c:	2b5c      	cmp	r3, #92	; 0x5c
   2d03e:	d0f4      	beq.n	2d02a <create_name+0x12>
	lfn = dj->lfn;
   2d040:	687b      	ldr	r3, [r7, #4]
   2d042:	69db      	ldr	r3, [r3, #28]
   2d044:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d046:	2300      	movs	r3, #0
   2d048:	617b      	str	r3, [r7, #20]
   2d04a:	697b      	ldr	r3, [r7, #20]
   2d04c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d04e:	69bb      	ldr	r3, [r7, #24]
   2d050:	1c5a      	adds	r2, r3, #1
   2d052:	61ba      	str	r2, [r7, #24]
   2d054:	693a      	ldr	r2, [r7, #16]
   2d056:	18d3      	adds	r3, r2, r3
   2d058:	781a      	ldrb	r2, [r3, #0]
   2d05a:	2324      	movs	r3, #36	; 0x24
   2d05c:	18fb      	adds	r3, r7, r3
   2d05e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d060:	2324      	movs	r3, #36	; 0x24
   2d062:	18fb      	adds	r3, r7, r3
   2d064:	881b      	ldrh	r3, [r3, #0]
   2d066:	2b1f      	cmp	r3, #31
   2d068:	d944      	bls.n	2d0f4 <create_name+0xdc>
   2d06a:	2324      	movs	r3, #36	; 0x24
   2d06c:	18fb      	adds	r3, r7, r3
   2d06e:	881b      	ldrh	r3, [r3, #0]
   2d070:	2b2f      	cmp	r3, #47	; 0x2f
   2d072:	d03f      	beq.n	2d0f4 <create_name+0xdc>
   2d074:	2324      	movs	r3, #36	; 0x24
   2d076:	18fb      	adds	r3, r7, r3
   2d078:	881b      	ldrh	r3, [r3, #0]
   2d07a:	2b5c      	cmp	r3, #92	; 0x5c
   2d07c:	d03a      	beq.n	2d0f4 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d07e:	697b      	ldr	r3, [r7, #20]
   2d080:	2bfe      	cmp	r3, #254	; 0xfe
   2d082:	d901      	bls.n	2d088 <create_name+0x70>
			return FR_INVALID_NAME;
   2d084:	2306      	movs	r3, #6
   2d086:	e1e7      	b.n	2d458 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d088:	2324      	movs	r3, #36	; 0x24
   2d08a:	18fb      	adds	r3, r7, r3
   2d08c:	2224      	movs	r2, #36	; 0x24
   2d08e:	18ba      	adds	r2, r7, r2
   2d090:	8812      	ldrh	r2, [r2, #0]
   2d092:	21ff      	movs	r1, #255	; 0xff
   2d094:	400a      	ands	r2, r1
   2d096:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d098:	2324      	movs	r3, #36	; 0x24
   2d09a:	18fc      	adds	r4, r7, r3
   2d09c:	2324      	movs	r3, #36	; 0x24
   2d09e:	18fb      	adds	r3, r7, r3
   2d0a0:	881b      	ldrh	r3, [r3, #0]
   2d0a2:	2101      	movs	r1, #1
   2d0a4:	0018      	movs	r0, r3
   2d0a6:	4bba      	ldr	r3, [pc, #744]	; (2d390 <create_name+0x378>)
   2d0a8:	4798      	blx	r3
   2d0aa:	0003      	movs	r3, r0
   2d0ac:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d0ae:	2324      	movs	r3, #36	; 0x24
   2d0b0:	18fb      	adds	r3, r7, r3
   2d0b2:	881b      	ldrh	r3, [r3, #0]
   2d0b4:	2b00      	cmp	r3, #0
   2d0b6:	d101      	bne.n	2d0bc <create_name+0xa4>
   2d0b8:	2306      	movs	r3, #6
   2d0ba:	e1cd      	b.n	2d458 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d0bc:	2324      	movs	r3, #36	; 0x24
   2d0be:	18fb      	adds	r3, r7, r3
   2d0c0:	881b      	ldrh	r3, [r3, #0]
   2d0c2:	2b7f      	cmp	r3, #127	; 0x7f
   2d0c4:	d80b      	bhi.n	2d0de <create_name+0xc6>
   2d0c6:	2324      	movs	r3, #36	; 0x24
   2d0c8:	18fb      	adds	r3, r7, r3
   2d0ca:	881a      	ldrh	r2, [r3, #0]
   2d0cc:	4bb1      	ldr	r3, [pc, #708]	; (2d394 <create_name+0x37c>)
   2d0ce:	0011      	movs	r1, r2
   2d0d0:	0018      	movs	r0, r3
   2d0d2:	4bb1      	ldr	r3, [pc, #708]	; (2d398 <create_name+0x380>)
   2d0d4:	4798      	blx	r3
   2d0d6:	1e03      	subs	r3, r0, #0
   2d0d8:	d001      	beq.n	2d0de <create_name+0xc6>
			return FR_INVALID_NAME;
   2d0da:	2306      	movs	r3, #6
   2d0dc:	e1bc      	b.n	2d458 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d0de:	697b      	ldr	r3, [r7, #20]
   2d0e0:	1c5a      	adds	r2, r3, #1
   2d0e2:	617a      	str	r2, [r7, #20]
   2d0e4:	005b      	lsls	r3, r3, #1
   2d0e6:	68fa      	ldr	r2, [r7, #12]
   2d0e8:	18d3      	adds	r3, r2, r3
   2d0ea:	2224      	movs	r2, #36	; 0x24
   2d0ec:	18ba      	adds	r2, r7, r2
   2d0ee:	8812      	ldrh	r2, [r2, #0]
   2d0f0:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d0f2:	e7ac      	b.n	2d04e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d0f4:	693a      	ldr	r2, [r7, #16]
   2d0f6:	69bb      	ldr	r3, [r7, #24]
   2d0f8:	18d2      	adds	r2, r2, r3
   2d0fa:	683b      	ldr	r3, [r7, #0]
   2d0fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d0fe:	2324      	movs	r3, #36	; 0x24
   2d100:	18fb      	adds	r3, r7, r3
   2d102:	881b      	ldrh	r3, [r3, #0]
   2d104:	2b1f      	cmp	r3, #31
   2d106:	d801      	bhi.n	2d10c <create_name+0xf4>
   2d108:	2204      	movs	r2, #4
   2d10a:	e000      	b.n	2d10e <create_name+0xf6>
   2d10c:	2200      	movs	r2, #0
   2d10e:	2326      	movs	r3, #38	; 0x26
   2d110:	18fb      	adds	r3, r7, r3
   2d112:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d114:	e017      	b.n	2d146 <create_name+0x12e>
		w = lfn[di-1];
   2d116:	697b      	ldr	r3, [r7, #20]
   2d118:	4aa0      	ldr	r2, [pc, #640]	; (2d39c <create_name+0x384>)
   2d11a:	4694      	mov	ip, r2
   2d11c:	4463      	add	r3, ip
   2d11e:	005b      	lsls	r3, r3, #1
   2d120:	68fa      	ldr	r2, [r7, #12]
   2d122:	18d2      	adds	r2, r2, r3
   2d124:	2324      	movs	r3, #36	; 0x24
   2d126:	18fb      	adds	r3, r7, r3
   2d128:	8812      	ldrh	r2, [r2, #0]
   2d12a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d12c:	2324      	movs	r3, #36	; 0x24
   2d12e:	18fb      	adds	r3, r7, r3
   2d130:	881b      	ldrh	r3, [r3, #0]
   2d132:	2b20      	cmp	r3, #32
   2d134:	d004      	beq.n	2d140 <create_name+0x128>
   2d136:	2324      	movs	r3, #36	; 0x24
   2d138:	18fb      	adds	r3, r7, r3
   2d13a:	881b      	ldrh	r3, [r3, #0]
   2d13c:	2b2e      	cmp	r3, #46	; 0x2e
   2d13e:	d106      	bne.n	2d14e <create_name+0x136>
		di--;
   2d140:	697b      	ldr	r3, [r7, #20]
   2d142:	3b01      	subs	r3, #1
   2d144:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d146:	697b      	ldr	r3, [r7, #20]
   2d148:	2b00      	cmp	r3, #0
   2d14a:	d1e4      	bne.n	2d116 <create_name+0xfe>
   2d14c:	e000      	b.n	2d150 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2d14e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2d150:	697b      	ldr	r3, [r7, #20]
   2d152:	2b00      	cmp	r3, #0
   2d154:	d101      	bne.n	2d15a <create_name+0x142>
   2d156:	2306      	movs	r3, #6
   2d158:	e17e      	b.n	2d458 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d15a:	697b      	ldr	r3, [r7, #20]
   2d15c:	005b      	lsls	r3, r3, #1
   2d15e:	68fa      	ldr	r2, [r7, #12]
   2d160:	18d3      	adds	r3, r2, r3
   2d162:	2200      	movs	r2, #0
   2d164:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d166:	687b      	ldr	r3, [r7, #4]
   2d168:	699b      	ldr	r3, [r3, #24]
   2d16a:	220b      	movs	r2, #11
   2d16c:	2120      	movs	r1, #32
   2d16e:	0018      	movs	r0, r3
   2d170:	4b8b      	ldr	r3, [pc, #556]	; (2d3a0 <create_name+0x388>)
   2d172:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d174:	2300      	movs	r3, #0
   2d176:	61bb      	str	r3, [r7, #24]
   2d178:	e002      	b.n	2d180 <create_name+0x168>
   2d17a:	69bb      	ldr	r3, [r7, #24]
   2d17c:	3301      	adds	r3, #1
   2d17e:	61bb      	str	r3, [r7, #24]
   2d180:	69bb      	ldr	r3, [r7, #24]
   2d182:	005b      	lsls	r3, r3, #1
   2d184:	68fa      	ldr	r2, [r7, #12]
   2d186:	18d3      	adds	r3, r2, r3
   2d188:	881b      	ldrh	r3, [r3, #0]
   2d18a:	2b20      	cmp	r3, #32
   2d18c:	d0f5      	beq.n	2d17a <create_name+0x162>
   2d18e:	69bb      	ldr	r3, [r7, #24]
   2d190:	005b      	lsls	r3, r3, #1
   2d192:	68fa      	ldr	r2, [r7, #12]
   2d194:	18d3      	adds	r3, r2, r3
   2d196:	881b      	ldrh	r3, [r3, #0]
   2d198:	2b2e      	cmp	r3, #46	; 0x2e
   2d19a:	d0ee      	beq.n	2d17a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d19c:	69bb      	ldr	r3, [r7, #24]
   2d19e:	2b00      	cmp	r3, #0
   2d1a0:	d00b      	beq.n	2d1ba <create_name+0x1a2>
   2d1a2:	2326      	movs	r3, #38	; 0x26
   2d1a4:	18fb      	adds	r3, r7, r3
   2d1a6:	2226      	movs	r2, #38	; 0x26
   2d1a8:	18ba      	adds	r2, r7, r2
   2d1aa:	7812      	ldrb	r2, [r2, #0]
   2d1ac:	2103      	movs	r1, #3
   2d1ae:	430a      	orrs	r2, r1
   2d1b0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d1b2:	e002      	b.n	2d1ba <create_name+0x1a2>
   2d1b4:	697b      	ldr	r3, [r7, #20]
   2d1b6:	3b01      	subs	r3, #1
   2d1b8:	617b      	str	r3, [r7, #20]
   2d1ba:	697b      	ldr	r3, [r7, #20]
   2d1bc:	2b00      	cmp	r3, #0
   2d1be:	d009      	beq.n	2d1d4 <create_name+0x1bc>
   2d1c0:	697b      	ldr	r3, [r7, #20]
   2d1c2:	4a76      	ldr	r2, [pc, #472]	; (2d39c <create_name+0x384>)
   2d1c4:	4694      	mov	ip, r2
   2d1c6:	4463      	add	r3, ip
   2d1c8:	005b      	lsls	r3, r3, #1
   2d1ca:	68fa      	ldr	r2, [r7, #12]
   2d1cc:	18d3      	adds	r3, r2, r3
   2d1ce:	881b      	ldrh	r3, [r3, #0]
   2d1d0:	2b2e      	cmp	r3, #46	; 0x2e
   2d1d2:	d1ef      	bne.n	2d1b4 <create_name+0x19c>

	b = i = 0; ni = 8;
   2d1d4:	2300      	movs	r3, #0
   2d1d6:	623b      	str	r3, [r7, #32]
   2d1d8:	2327      	movs	r3, #39	; 0x27
   2d1da:	18fb      	adds	r3, r7, r3
   2d1dc:	2200      	movs	r2, #0
   2d1de:	701a      	strb	r2, [r3, #0]
   2d1e0:	2308      	movs	r3, #8
   2d1e2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2d1e4:	69bb      	ldr	r3, [r7, #24]
   2d1e6:	1c5a      	adds	r2, r3, #1
   2d1e8:	61ba      	str	r2, [r7, #24]
   2d1ea:	005b      	lsls	r3, r3, #1
   2d1ec:	68fa      	ldr	r2, [r7, #12]
   2d1ee:	18d2      	adds	r2, r2, r3
   2d1f0:	2324      	movs	r3, #36	; 0x24
   2d1f2:	18fb      	adds	r3, r7, r3
   2d1f4:	8812      	ldrh	r2, [r2, #0]
   2d1f6:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2d1f8:	2324      	movs	r3, #36	; 0x24
   2d1fa:	18fb      	adds	r3, r7, r3
   2d1fc:	881b      	ldrh	r3, [r3, #0]
   2d1fe:	2b00      	cmp	r3, #0
   2d200:	d100      	bne.n	2d204 <create_name+0x1ec>
   2d202:	e0c3      	b.n	2d38c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2d204:	2324      	movs	r3, #36	; 0x24
   2d206:	18fb      	adds	r3, r7, r3
   2d208:	881b      	ldrh	r3, [r3, #0]
   2d20a:	2b20      	cmp	r3, #32
   2d20c:	d008      	beq.n	2d220 <create_name+0x208>
   2d20e:	2324      	movs	r3, #36	; 0x24
   2d210:	18fb      	adds	r3, r7, r3
   2d212:	881b      	ldrh	r3, [r3, #0]
   2d214:	2b2e      	cmp	r3, #46	; 0x2e
   2d216:	d10c      	bne.n	2d232 <create_name+0x21a>
   2d218:	69ba      	ldr	r2, [r7, #24]
   2d21a:	697b      	ldr	r3, [r7, #20]
   2d21c:	429a      	cmp	r2, r3
   2d21e:	d008      	beq.n	2d232 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2d220:	2326      	movs	r3, #38	; 0x26
   2d222:	18fb      	adds	r3, r7, r3
   2d224:	2226      	movs	r2, #38	; 0x26
   2d226:	18ba      	adds	r2, r7, r2
   2d228:	7812      	ldrb	r2, [r2, #0]
   2d22a:	2103      	movs	r1, #3
   2d22c:	430a      	orrs	r2, r1
   2d22e:	701a      	strb	r2, [r3, #0]
   2d230:	e0ab      	b.n	2d38a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2d232:	6a3a      	ldr	r2, [r7, #32]
   2d234:	69fb      	ldr	r3, [r7, #28]
   2d236:	429a      	cmp	r2, r3
   2d238:	d203      	bcs.n	2d242 <create_name+0x22a>
   2d23a:	69ba      	ldr	r2, [r7, #24]
   2d23c:	697b      	ldr	r3, [r7, #20]
   2d23e:	429a      	cmp	r2, r3
   2d240:	d12a      	bne.n	2d298 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2d242:	69fb      	ldr	r3, [r7, #28]
   2d244:	2b0b      	cmp	r3, #11
   2d246:	d108      	bne.n	2d25a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2d248:	2326      	movs	r3, #38	; 0x26
   2d24a:	18fb      	adds	r3, r7, r3
   2d24c:	2226      	movs	r2, #38	; 0x26
   2d24e:	18ba      	adds	r2, r7, r2
   2d250:	7812      	ldrb	r2, [r2, #0]
   2d252:	2103      	movs	r1, #3
   2d254:	430a      	orrs	r2, r1
   2d256:	701a      	strb	r2, [r3, #0]
   2d258:	e0a9      	b.n	2d3ae <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2d25a:	69ba      	ldr	r2, [r7, #24]
   2d25c:	697b      	ldr	r3, [r7, #20]
   2d25e:	429a      	cmp	r2, r3
   2d260:	d007      	beq.n	2d272 <create_name+0x25a>
   2d262:	2326      	movs	r3, #38	; 0x26
   2d264:	18fb      	adds	r3, r7, r3
   2d266:	2226      	movs	r2, #38	; 0x26
   2d268:	18ba      	adds	r2, r7, r2
   2d26a:	7812      	ldrb	r2, [r2, #0]
   2d26c:	2103      	movs	r1, #3
   2d26e:	430a      	orrs	r2, r1
   2d270:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2d272:	69ba      	ldr	r2, [r7, #24]
   2d274:	697b      	ldr	r3, [r7, #20]
   2d276:	429a      	cmp	r2, r3
   2d278:	d900      	bls.n	2d27c <create_name+0x264>
   2d27a:	e097      	b.n	2d3ac <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2d27c:	697b      	ldr	r3, [r7, #20]
   2d27e:	61bb      	str	r3, [r7, #24]
   2d280:	2308      	movs	r3, #8
   2d282:	623b      	str	r3, [r7, #32]
   2d284:	230b      	movs	r3, #11
   2d286:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2d288:	2327      	movs	r3, #39	; 0x27
   2d28a:	18fb      	adds	r3, r7, r3
   2d28c:	2227      	movs	r2, #39	; 0x27
   2d28e:	18ba      	adds	r2, r7, r2
   2d290:	7812      	ldrb	r2, [r2, #0]
   2d292:	0092      	lsls	r2, r2, #2
   2d294:	701a      	strb	r2, [r3, #0]
   2d296:	e078      	b.n	2d38a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2d298:	2324      	movs	r3, #36	; 0x24
   2d29a:	18fb      	adds	r3, r7, r3
   2d29c:	881b      	ldrh	r3, [r3, #0]
   2d29e:	2b7f      	cmp	r3, #127	; 0x7f
   2d2a0:	d920      	bls.n	2d2e4 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2d2a2:	2324      	movs	r3, #36	; 0x24
   2d2a4:	18fc      	adds	r4, r7, r3
   2d2a6:	2324      	movs	r3, #36	; 0x24
   2d2a8:	18fb      	adds	r3, r7, r3
   2d2aa:	881b      	ldrh	r3, [r3, #0]
   2d2ac:	2100      	movs	r1, #0
   2d2ae:	0018      	movs	r0, r3
   2d2b0:	4b37      	ldr	r3, [pc, #220]	; (2d390 <create_name+0x378>)
   2d2b2:	4798      	blx	r3
   2d2b4:	0003      	movs	r3, r0
   2d2b6:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2d2b8:	2324      	movs	r3, #36	; 0x24
   2d2ba:	18fb      	adds	r3, r7, r3
   2d2bc:	881b      	ldrh	r3, [r3, #0]
   2d2be:	2b00      	cmp	r3, #0
   2d2c0:	d008      	beq.n	2d2d4 <create_name+0x2bc>
   2d2c2:	2324      	movs	r3, #36	; 0x24
   2d2c4:	18fb      	adds	r3, r7, r3
   2d2c6:	881b      	ldrh	r3, [r3, #0]
   2d2c8:	3b80      	subs	r3, #128	; 0x80
   2d2ca:	4a36      	ldr	r2, [pc, #216]	; (2d3a4 <create_name+0x38c>)
   2d2cc:	5cd2      	ldrb	r2, [r2, r3]
   2d2ce:	2324      	movs	r3, #36	; 0x24
   2d2d0:	18fb      	adds	r3, r7, r3
   2d2d2:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2d2d4:	2326      	movs	r3, #38	; 0x26
   2d2d6:	18fb      	adds	r3, r7, r3
   2d2d8:	2226      	movs	r2, #38	; 0x26
   2d2da:	18ba      	adds	r2, r7, r2
   2d2dc:	7812      	ldrb	r2, [r2, #0]
   2d2de:	2102      	movs	r1, #2
   2d2e0:	430a      	orrs	r2, r1
   2d2e2:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2d2e4:	2324      	movs	r3, #36	; 0x24
   2d2e6:	18fb      	adds	r3, r7, r3
   2d2e8:	881b      	ldrh	r3, [r3, #0]
   2d2ea:	2b00      	cmp	r3, #0
   2d2ec:	d009      	beq.n	2d302 <create_name+0x2ea>
   2d2ee:	2324      	movs	r3, #36	; 0x24
   2d2f0:	18fb      	adds	r3, r7, r3
   2d2f2:	881a      	ldrh	r2, [r3, #0]
   2d2f4:	4b2c      	ldr	r3, [pc, #176]	; (2d3a8 <create_name+0x390>)
   2d2f6:	0011      	movs	r1, r2
   2d2f8:	0018      	movs	r0, r3
   2d2fa:	4b27      	ldr	r3, [pc, #156]	; (2d398 <create_name+0x380>)
   2d2fc:	4798      	blx	r3
   2d2fe:	1e03      	subs	r3, r0, #0
   2d300:	d00c      	beq.n	2d31c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2d302:	2324      	movs	r3, #36	; 0x24
   2d304:	18fb      	adds	r3, r7, r3
   2d306:	225f      	movs	r2, #95	; 0x5f
   2d308:	801a      	strh	r2, [r3, #0]
   2d30a:	2326      	movs	r3, #38	; 0x26
   2d30c:	18fb      	adds	r3, r7, r3
   2d30e:	2226      	movs	r2, #38	; 0x26
   2d310:	18ba      	adds	r2, r7, r2
   2d312:	7812      	ldrb	r2, [r2, #0]
   2d314:	2103      	movs	r1, #3
   2d316:	430a      	orrs	r2, r1
   2d318:	701a      	strb	r2, [r3, #0]
   2d31a:	e02b      	b.n	2d374 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2d31c:	2324      	movs	r3, #36	; 0x24
   2d31e:	18fb      	adds	r3, r7, r3
   2d320:	881b      	ldrh	r3, [r3, #0]
   2d322:	2b40      	cmp	r3, #64	; 0x40
   2d324:	d90d      	bls.n	2d342 <create_name+0x32a>
   2d326:	2324      	movs	r3, #36	; 0x24
   2d328:	18fb      	adds	r3, r7, r3
   2d32a:	881b      	ldrh	r3, [r3, #0]
   2d32c:	2b5a      	cmp	r3, #90	; 0x5a
   2d32e:	d808      	bhi.n	2d342 <create_name+0x32a>
					b |= 2;
   2d330:	2327      	movs	r3, #39	; 0x27
   2d332:	18fb      	adds	r3, r7, r3
   2d334:	2227      	movs	r2, #39	; 0x27
   2d336:	18ba      	adds	r2, r7, r2
   2d338:	7812      	ldrb	r2, [r2, #0]
   2d33a:	2102      	movs	r1, #2
   2d33c:	430a      	orrs	r2, r1
   2d33e:	701a      	strb	r2, [r3, #0]
   2d340:	e018      	b.n	2d374 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2d342:	2324      	movs	r3, #36	; 0x24
   2d344:	18fb      	adds	r3, r7, r3
   2d346:	881b      	ldrh	r3, [r3, #0]
   2d348:	2b60      	cmp	r3, #96	; 0x60
   2d34a:	d913      	bls.n	2d374 <create_name+0x35c>
   2d34c:	2324      	movs	r3, #36	; 0x24
   2d34e:	18fb      	adds	r3, r7, r3
   2d350:	881b      	ldrh	r3, [r3, #0]
   2d352:	2b7a      	cmp	r3, #122	; 0x7a
   2d354:	d80e      	bhi.n	2d374 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2d356:	2327      	movs	r3, #39	; 0x27
   2d358:	18fb      	adds	r3, r7, r3
   2d35a:	2227      	movs	r2, #39	; 0x27
   2d35c:	18ba      	adds	r2, r7, r2
   2d35e:	7812      	ldrb	r2, [r2, #0]
   2d360:	2101      	movs	r1, #1
   2d362:	430a      	orrs	r2, r1
   2d364:	701a      	strb	r2, [r3, #0]
   2d366:	2324      	movs	r3, #36	; 0x24
   2d368:	18fb      	adds	r3, r7, r3
   2d36a:	2224      	movs	r2, #36	; 0x24
   2d36c:	18ba      	adds	r2, r7, r2
   2d36e:	8812      	ldrh	r2, [r2, #0]
   2d370:	3a20      	subs	r2, #32
   2d372:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2d374:	687b      	ldr	r3, [r7, #4]
   2d376:	699a      	ldr	r2, [r3, #24]
   2d378:	6a3b      	ldr	r3, [r7, #32]
   2d37a:	1c59      	adds	r1, r3, #1
   2d37c:	6239      	str	r1, [r7, #32]
   2d37e:	18d3      	adds	r3, r2, r3
   2d380:	2224      	movs	r2, #36	; 0x24
   2d382:	18ba      	adds	r2, r7, r2
   2d384:	8812      	ldrh	r2, [r2, #0]
   2d386:	b2d2      	uxtb	r2, r2
   2d388:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2d38a:	e72b      	b.n	2d1e4 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2d38c:	46c0      	nop			; (mov r8, r8)
   2d38e:	e00e      	b.n	2d3ae <create_name+0x396>
   2d390:	0002e751 	.word	0x0002e751
   2d394:	00039ba4 	.word	0x00039ba4
   2d398:	0002bbbb 	.word	0x0002bbbb
   2d39c:	7fffffff 	.word	0x7fffffff
   2d3a0:	0002bb41 	.word	0x0002bb41
   2d3a4:	00039bec 	.word	0x00039bec
   2d3a8:	00039bb0 	.word	0x00039bb0
			if (si > di) break;			/* No extension */
   2d3ac:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2d3ae:	687b      	ldr	r3, [r7, #4]
   2d3b0:	699b      	ldr	r3, [r3, #24]
   2d3b2:	781b      	ldrb	r3, [r3, #0]
   2d3b4:	2be5      	cmp	r3, #229	; 0xe5
   2d3b6:	d103      	bne.n	2d3c0 <create_name+0x3a8>
   2d3b8:	687b      	ldr	r3, [r7, #4]
   2d3ba:	699b      	ldr	r3, [r3, #24]
   2d3bc:	2205      	movs	r2, #5
   2d3be:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2d3c0:	69fb      	ldr	r3, [r7, #28]
   2d3c2:	2b08      	cmp	r3, #8
   2d3c4:	d106      	bne.n	2d3d4 <create_name+0x3bc>
   2d3c6:	2327      	movs	r3, #39	; 0x27
   2d3c8:	18fb      	adds	r3, r7, r3
   2d3ca:	2227      	movs	r2, #39	; 0x27
   2d3cc:	18ba      	adds	r2, r7, r2
   2d3ce:	7812      	ldrb	r2, [r2, #0]
   2d3d0:	0092      	lsls	r2, r2, #2
   2d3d2:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2d3d4:	2327      	movs	r3, #39	; 0x27
   2d3d6:	18fb      	adds	r3, r7, r3
   2d3d8:	781b      	ldrb	r3, [r3, #0]
   2d3da:	220c      	movs	r2, #12
   2d3dc:	4013      	ands	r3, r2
   2d3de:	2b0c      	cmp	r3, #12
   2d3e0:	d006      	beq.n	2d3f0 <create_name+0x3d8>
   2d3e2:	2327      	movs	r3, #39	; 0x27
   2d3e4:	18fb      	adds	r3, r7, r3
   2d3e6:	781b      	ldrb	r3, [r3, #0]
   2d3e8:	2203      	movs	r2, #3
   2d3ea:	4013      	ands	r3, r2
   2d3ec:	2b03      	cmp	r3, #3
   2d3ee:	d107      	bne.n	2d400 <create_name+0x3e8>
		cf |= NS_LFN;
   2d3f0:	2326      	movs	r3, #38	; 0x26
   2d3f2:	18fb      	adds	r3, r7, r3
   2d3f4:	2226      	movs	r2, #38	; 0x26
   2d3f6:	18ba      	adds	r2, r7, r2
   2d3f8:	7812      	ldrb	r2, [r2, #0]
   2d3fa:	2102      	movs	r1, #2
   2d3fc:	430a      	orrs	r2, r1
   2d3fe:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2d400:	2326      	movs	r3, #38	; 0x26
   2d402:	18fb      	adds	r3, r7, r3
   2d404:	781b      	ldrb	r3, [r3, #0]
   2d406:	2202      	movs	r2, #2
   2d408:	4013      	ands	r3, r2
   2d40a:	d11d      	bne.n	2d448 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2d40c:	2327      	movs	r3, #39	; 0x27
   2d40e:	18fb      	adds	r3, r7, r3
   2d410:	781b      	ldrb	r3, [r3, #0]
   2d412:	2203      	movs	r2, #3
   2d414:	4013      	ands	r3, r2
   2d416:	2b01      	cmp	r3, #1
   2d418:	d107      	bne.n	2d42a <create_name+0x412>
   2d41a:	2326      	movs	r3, #38	; 0x26
   2d41c:	18fb      	adds	r3, r7, r3
   2d41e:	2226      	movs	r2, #38	; 0x26
   2d420:	18ba      	adds	r2, r7, r2
   2d422:	7812      	ldrb	r2, [r2, #0]
   2d424:	2110      	movs	r1, #16
   2d426:	430a      	orrs	r2, r1
   2d428:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2d42a:	2327      	movs	r3, #39	; 0x27
   2d42c:	18fb      	adds	r3, r7, r3
   2d42e:	781b      	ldrb	r3, [r3, #0]
   2d430:	220c      	movs	r2, #12
   2d432:	4013      	ands	r3, r2
   2d434:	2b04      	cmp	r3, #4
   2d436:	d107      	bne.n	2d448 <create_name+0x430>
   2d438:	2326      	movs	r3, #38	; 0x26
   2d43a:	18fb      	adds	r3, r7, r3
   2d43c:	2226      	movs	r2, #38	; 0x26
   2d43e:	18ba      	adds	r2, r7, r2
   2d440:	7812      	ldrb	r2, [r2, #0]
   2d442:	2108      	movs	r1, #8
   2d444:	430a      	orrs	r2, r1
   2d446:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2d448:	687b      	ldr	r3, [r7, #4]
   2d44a:	699b      	ldr	r3, [r3, #24]
   2d44c:	330b      	adds	r3, #11
   2d44e:	2226      	movs	r2, #38	; 0x26
   2d450:	18ba      	adds	r2, r7, r2
   2d452:	7812      	ldrb	r2, [r2, #0]
   2d454:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2d456:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2d458:	0018      	movs	r0, r3
   2d45a:	46bd      	mov	sp, r7
   2d45c:	b00b      	add	sp, #44	; 0x2c
   2d45e:	bd90      	pop	{r4, r7, pc}

0002d460 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2d460:	b590      	push	{r4, r7, lr}
   2d462:	b085      	sub	sp, #20
   2d464:	af00      	add	r7, sp, #0
   2d466:	6078      	str	r0, [r7, #4]
   2d468:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2d46a:	683b      	ldr	r3, [r7, #0]
   2d46c:	781b      	ldrb	r3, [r3, #0]
   2d46e:	2b2f      	cmp	r3, #47	; 0x2f
   2d470:	d003      	beq.n	2d47a <follow_path+0x1a>
   2d472:	683b      	ldr	r3, [r7, #0]
   2d474:	781b      	ldrb	r3, [r3, #0]
   2d476:	2b5c      	cmp	r3, #92	; 0x5c
   2d478:	d102      	bne.n	2d480 <follow_path+0x20>
		path++;
   2d47a:	683b      	ldr	r3, [r7, #0]
   2d47c:	3301      	adds	r3, #1
   2d47e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2d480:	687b      	ldr	r3, [r7, #4]
   2d482:	2200      	movs	r2, #0
   2d484:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2d486:	683b      	ldr	r3, [r7, #0]
   2d488:	781b      	ldrb	r3, [r3, #0]
   2d48a:	2b1f      	cmp	r3, #31
   2d48c:	d80c      	bhi.n	2d4a8 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2d48e:	230f      	movs	r3, #15
   2d490:	18fc      	adds	r4, r7, r3
   2d492:	687b      	ldr	r3, [r7, #4]
   2d494:	2100      	movs	r1, #0
   2d496:	0018      	movs	r0, r3
   2d498:	4b3c      	ldr	r3, [pc, #240]	; (2d58c <follow_path+0x12c>)
   2d49a:	4798      	blx	r3
   2d49c:	0003      	movs	r3, r0
   2d49e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2d4a0:	687b      	ldr	r3, [r7, #4]
   2d4a2:	2200      	movs	r2, #0
   2d4a4:	615a      	str	r2, [r3, #20]
   2d4a6:	e06a      	b.n	2d57e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2d4a8:	230f      	movs	r3, #15
   2d4aa:	18fc      	adds	r4, r7, r3
   2d4ac:	003a      	movs	r2, r7
   2d4ae:	687b      	ldr	r3, [r7, #4]
   2d4b0:	0011      	movs	r1, r2
   2d4b2:	0018      	movs	r0, r3
   2d4b4:	4b36      	ldr	r3, [pc, #216]	; (2d590 <follow_path+0x130>)
   2d4b6:	4798      	blx	r3
   2d4b8:	0003      	movs	r3, r0
   2d4ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d4bc:	230f      	movs	r3, #15
   2d4be:	18fb      	adds	r3, r7, r3
   2d4c0:	781b      	ldrb	r3, [r3, #0]
   2d4c2:	2b00      	cmp	r3, #0
   2d4c4:	d154      	bne.n	2d570 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2d4c6:	230f      	movs	r3, #15
   2d4c8:	18fc      	adds	r4, r7, r3
   2d4ca:	687b      	ldr	r3, [r7, #4]
   2d4cc:	0018      	movs	r0, r3
   2d4ce:	4b31      	ldr	r3, [pc, #196]	; (2d594 <follow_path+0x134>)
   2d4d0:	4798      	blx	r3
   2d4d2:	0003      	movs	r3, r0
   2d4d4:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2d4d6:	687b      	ldr	r3, [r7, #4]
   2d4d8:	699a      	ldr	r2, [r3, #24]
   2d4da:	230e      	movs	r3, #14
   2d4dc:	18fb      	adds	r3, r7, r3
   2d4de:	7ad2      	ldrb	r2, [r2, #11]
   2d4e0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2d4e2:	230f      	movs	r3, #15
   2d4e4:	18fb      	adds	r3, r7, r3
   2d4e6:	781b      	ldrb	r3, [r3, #0]
   2d4e8:	2b00      	cmp	r3, #0
   2d4ea:	d00f      	beq.n	2d50c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d4ec:	230f      	movs	r3, #15
   2d4ee:	18fb      	adds	r3, r7, r3
   2d4f0:	781b      	ldrb	r3, [r3, #0]
   2d4f2:	2b04      	cmp	r3, #4
   2d4f4:	d13e      	bne.n	2d574 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2d4f6:	230e      	movs	r3, #14
   2d4f8:	18fb      	adds	r3, r7, r3
   2d4fa:	781b      	ldrb	r3, [r3, #0]
   2d4fc:	2204      	movs	r2, #4
   2d4fe:	4013      	ands	r3, r2
   2d500:	d13a      	bne.n	2d578 <follow_path+0x118>
   2d502:	230f      	movs	r3, #15
   2d504:	18fb      	adds	r3, r7, r3
   2d506:	2205      	movs	r2, #5
   2d508:	701a      	strb	r2, [r3, #0]
				}
				break;
   2d50a:	e035      	b.n	2d578 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d50c:	230e      	movs	r3, #14
   2d50e:	18fb      	adds	r3, r7, r3
   2d510:	781b      	ldrb	r3, [r3, #0]
   2d512:	2204      	movs	r2, #4
   2d514:	4013      	ands	r3, r2
   2d516:	d131      	bne.n	2d57c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2d518:	687b      	ldr	r3, [r7, #4]
   2d51a:	695b      	ldr	r3, [r3, #20]
   2d51c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2d51e:	68bb      	ldr	r3, [r7, #8]
   2d520:	330b      	adds	r3, #11
   2d522:	781b      	ldrb	r3, [r3, #0]
   2d524:	001a      	movs	r2, r3
   2d526:	2310      	movs	r3, #16
   2d528:	4013      	ands	r3, r2
   2d52a:	d104      	bne.n	2d536 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2d52c:	230f      	movs	r3, #15
   2d52e:	18fb      	adds	r3, r7, r3
   2d530:	2205      	movs	r2, #5
   2d532:	701a      	strb	r2, [r3, #0]
   2d534:	e023      	b.n	2d57e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2d536:	68bb      	ldr	r3, [r7, #8]
   2d538:	3315      	adds	r3, #21
   2d53a:	781b      	ldrb	r3, [r3, #0]
   2d53c:	021b      	lsls	r3, r3, #8
   2d53e:	b21a      	sxth	r2, r3
   2d540:	68bb      	ldr	r3, [r7, #8]
   2d542:	3314      	adds	r3, #20
   2d544:	781b      	ldrb	r3, [r3, #0]
   2d546:	b21b      	sxth	r3, r3
   2d548:	4313      	orrs	r3, r2
   2d54a:	b21b      	sxth	r3, r3
   2d54c:	b29b      	uxth	r3, r3
   2d54e:	041b      	lsls	r3, r3, #16
   2d550:	68ba      	ldr	r2, [r7, #8]
   2d552:	321b      	adds	r2, #27
   2d554:	7812      	ldrb	r2, [r2, #0]
   2d556:	0212      	lsls	r2, r2, #8
   2d558:	b211      	sxth	r1, r2
   2d55a:	68ba      	ldr	r2, [r7, #8]
   2d55c:	321a      	adds	r2, #26
   2d55e:	7812      	ldrb	r2, [r2, #0]
   2d560:	b212      	sxth	r2, r2
   2d562:	430a      	orrs	r2, r1
   2d564:	b212      	sxth	r2, r2
   2d566:	b292      	uxth	r2, r2
   2d568:	431a      	orrs	r2, r3
   2d56a:	687b      	ldr	r3, [r7, #4]
   2d56c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2d56e:	e79b      	b.n	2d4a8 <follow_path+0x48>
			if (res != FR_OK) break;
   2d570:	46c0      	nop			; (mov r8, r8)
   2d572:	e004      	b.n	2d57e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d574:	46c0      	nop			; (mov r8, r8)
   2d576:	e002      	b.n	2d57e <follow_path+0x11e>
				break;
   2d578:	46c0      	nop			; (mov r8, r8)
   2d57a:	e000      	b.n	2d57e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d57c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d57e:	230f      	movs	r3, #15
   2d580:	18fb      	adds	r3, r7, r3
   2d582:	781b      	ldrb	r3, [r3, #0]
}
   2d584:	0018      	movs	r0, r3
   2d586:	46bd      	mov	sp, r7
   2d588:	b005      	add	sp, #20
   2d58a:	bd90      	pop	{r4, r7, pc}
   2d58c:	0002c431 	.word	0x0002c431
   2d590:	0002d019 	.word	0x0002d019
   2d594:	0002cab5 	.word	0x0002cab5

0002d598 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d598:	b590      	push	{r4, r7, lr}
   2d59a:	b083      	sub	sp, #12
   2d59c:	af00      	add	r7, sp, #0
   2d59e:	6078      	str	r0, [r7, #4]
   2d5a0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d5a2:	687b      	ldr	r3, [r7, #4]
   2d5a4:	7858      	ldrb	r0, [r3, #1]
   2d5a6:	687b      	ldr	r3, [r7, #4]
   2d5a8:	3330      	adds	r3, #48	; 0x30
   2d5aa:	0019      	movs	r1, r3
   2d5ac:	683a      	ldr	r2, [r7, #0]
   2d5ae:	2301      	movs	r3, #1
   2d5b0:	4c2a      	ldr	r4, [pc, #168]	; (2d65c <check_fs+0xc4>)
   2d5b2:	47a0      	blx	r4
   2d5b4:	1e03      	subs	r3, r0, #0
   2d5b6:	d001      	beq.n	2d5bc <check_fs+0x24>
		return 3;
   2d5b8:	2303      	movs	r3, #3
   2d5ba:	e04b      	b.n	2d654 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d5bc:	687b      	ldr	r3, [r7, #4]
   2d5be:	4a28      	ldr	r2, [pc, #160]	; (2d660 <check_fs+0xc8>)
   2d5c0:	4694      	mov	ip, r2
   2d5c2:	4463      	add	r3, ip
   2d5c4:	3301      	adds	r3, #1
   2d5c6:	781b      	ldrb	r3, [r3, #0]
   2d5c8:	021b      	lsls	r3, r3, #8
   2d5ca:	b21a      	sxth	r2, r3
   2d5cc:	687b      	ldr	r3, [r7, #4]
   2d5ce:	4924      	ldr	r1, [pc, #144]	; (2d660 <check_fs+0xc8>)
   2d5d0:	5c5b      	ldrb	r3, [r3, r1]
   2d5d2:	b21b      	sxth	r3, r3
   2d5d4:	4313      	orrs	r3, r2
   2d5d6:	b21b      	sxth	r3, r3
   2d5d8:	4a22      	ldr	r2, [pc, #136]	; (2d664 <check_fs+0xcc>)
   2d5da:	4293      	cmp	r3, r2
   2d5dc:	d001      	beq.n	2d5e2 <check_fs+0x4a>
		return 2;
   2d5de:	2302      	movs	r3, #2
   2d5e0:	e038      	b.n	2d654 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d5e2:	687b      	ldr	r3, [r7, #4]
   2d5e4:	3366      	adds	r3, #102	; 0x66
   2d5e6:	3303      	adds	r3, #3
   2d5e8:	781b      	ldrb	r3, [r3, #0]
   2d5ea:	061a      	lsls	r2, r3, #24
   2d5ec:	687b      	ldr	r3, [r7, #4]
   2d5ee:	3366      	adds	r3, #102	; 0x66
   2d5f0:	3302      	adds	r3, #2
   2d5f2:	781b      	ldrb	r3, [r3, #0]
   2d5f4:	041b      	lsls	r3, r3, #16
   2d5f6:	4313      	orrs	r3, r2
   2d5f8:	687a      	ldr	r2, [r7, #4]
   2d5fa:	3266      	adds	r2, #102	; 0x66
   2d5fc:	3201      	adds	r2, #1
   2d5fe:	7812      	ldrb	r2, [r2, #0]
   2d600:	0212      	lsls	r2, r2, #8
   2d602:	4313      	orrs	r3, r2
   2d604:	687a      	ldr	r2, [r7, #4]
   2d606:	2166      	movs	r1, #102	; 0x66
   2d608:	5c52      	ldrb	r2, [r2, r1]
   2d60a:	4313      	orrs	r3, r2
   2d60c:	021b      	lsls	r3, r3, #8
   2d60e:	0a1b      	lsrs	r3, r3, #8
   2d610:	4a15      	ldr	r2, [pc, #84]	; (2d668 <check_fs+0xd0>)
   2d612:	4293      	cmp	r3, r2
   2d614:	d101      	bne.n	2d61a <check_fs+0x82>
		return 0;
   2d616:	2300      	movs	r3, #0
   2d618:	e01c      	b.n	2d654 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d61a:	687b      	ldr	r3, [r7, #4]
   2d61c:	3382      	adds	r3, #130	; 0x82
   2d61e:	3303      	adds	r3, #3
   2d620:	781b      	ldrb	r3, [r3, #0]
   2d622:	061a      	lsls	r2, r3, #24
   2d624:	687b      	ldr	r3, [r7, #4]
   2d626:	3382      	adds	r3, #130	; 0x82
   2d628:	3302      	adds	r3, #2
   2d62a:	781b      	ldrb	r3, [r3, #0]
   2d62c:	041b      	lsls	r3, r3, #16
   2d62e:	4313      	orrs	r3, r2
   2d630:	687a      	ldr	r2, [r7, #4]
   2d632:	3282      	adds	r2, #130	; 0x82
   2d634:	3201      	adds	r2, #1
   2d636:	7812      	ldrb	r2, [r2, #0]
   2d638:	0212      	lsls	r2, r2, #8
   2d63a:	4313      	orrs	r3, r2
   2d63c:	687a      	ldr	r2, [r7, #4]
   2d63e:	2182      	movs	r1, #130	; 0x82
   2d640:	5c52      	ldrb	r2, [r2, r1]
   2d642:	4313      	orrs	r3, r2
   2d644:	021b      	lsls	r3, r3, #8
   2d646:	0a1b      	lsrs	r3, r3, #8
   2d648:	4a07      	ldr	r2, [pc, #28]	; (2d668 <check_fs+0xd0>)
   2d64a:	4293      	cmp	r3, r2
   2d64c:	d101      	bne.n	2d652 <check_fs+0xba>
		return 0;
   2d64e:	2300      	movs	r3, #0
   2d650:	e000      	b.n	2d654 <check_fs+0xbc>

	return 1;
   2d652:	2301      	movs	r3, #1
}
   2d654:	0018      	movs	r0, r3
   2d656:	46bd      	mov	sp, r7
   2d658:	b003      	add	sp, #12
   2d65a:	bd90      	pop	{r4, r7, pc}
   2d65c:	0002b801 	.word	0x0002b801
   2d660:	0000022e 	.word	0x0000022e
   2d664:	ffffaa55 	.word	0xffffaa55
   2d668:	00544146 	.word	0x00544146

0002d66c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d66c:	b590      	push	{r4, r7, lr}
   2d66e:	b093      	sub	sp, #76	; 0x4c
   2d670:	af00      	add	r7, sp, #0
   2d672:	60f8      	str	r0, [r7, #12]
   2d674:	60b9      	str	r1, [r7, #8]
   2d676:	1dfb      	adds	r3, r7, #7
   2d678:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d67a:	68fb      	ldr	r3, [r7, #12]
   2d67c:	681b      	ldr	r3, [r3, #0]
   2d67e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d682:	781b      	ldrb	r3, [r3, #0]
   2d684:	3b30      	subs	r3, #48	; 0x30
   2d686:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d68a:	2b09      	cmp	r3, #9
   2d68c:	d80b      	bhi.n	2d6a6 <chk_mounted+0x3a>
   2d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d690:	3301      	adds	r3, #1
   2d692:	781b      	ldrb	r3, [r3, #0]
   2d694:	2b3a      	cmp	r3, #58	; 0x3a
   2d696:	d106      	bne.n	2d6a6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d69a:	3302      	adds	r3, #2
   2d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d69e:	68fb      	ldr	r3, [r7, #12]
   2d6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d6a2:	601a      	str	r2, [r3, #0]
   2d6a4:	e001      	b.n	2d6aa <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d6a6:	2300      	movs	r3, #0
   2d6a8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d6aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d6ac:	2b07      	cmp	r3, #7
   2d6ae:	d901      	bls.n	2d6b4 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d6b0:	230b      	movs	r3, #11
   2d6b2:	e2af      	b.n	2dc14 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d6b4:	4bc5      	ldr	r3, [pc, #788]	; (2d9cc <chk_mounted+0x360>)
   2d6b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d6b8:	0092      	lsls	r2, r2, #2
   2d6ba:	58d3      	ldr	r3, [r2, r3]
   2d6bc:	62bb      	str	r3, [r7, #40]	; 0x28
   2d6be:	68bb      	ldr	r3, [r7, #8]
   2d6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d6c2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6c6:	2b00      	cmp	r3, #0
   2d6c8:	d101      	bne.n	2d6ce <chk_mounted+0x62>
   2d6ca:	230c      	movs	r3, #12
   2d6cc:	e2a2      	b.n	2dc14 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6d0:	781b      	ldrb	r3, [r3, #0]
   2d6d2:	2b00      	cmp	r3, #0
   2d6d4:	d01c      	beq.n	2d710 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6d8:	785b      	ldrb	r3, [r3, #1]
   2d6da:	2227      	movs	r2, #39	; 0x27
   2d6dc:	18bc      	adds	r4, r7, r2
   2d6de:	0018      	movs	r0, r3
   2d6e0:	4bbb      	ldr	r3, [pc, #748]	; (2d9d0 <chk_mounted+0x364>)
   2d6e2:	4798      	blx	r3
   2d6e4:	0003      	movs	r3, r0
   2d6e6:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d6e8:	2327      	movs	r3, #39	; 0x27
   2d6ea:	18fb      	adds	r3, r7, r3
   2d6ec:	781b      	ldrb	r3, [r3, #0]
   2d6ee:	2201      	movs	r2, #1
   2d6f0:	4013      	ands	r3, r2
   2d6f2:	d10d      	bne.n	2d710 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d6f4:	1dfb      	adds	r3, r7, #7
   2d6f6:	781b      	ldrb	r3, [r3, #0]
   2d6f8:	2b00      	cmp	r3, #0
   2d6fa:	d007      	beq.n	2d70c <chk_mounted+0xa0>
   2d6fc:	2327      	movs	r3, #39	; 0x27
   2d6fe:	18fb      	adds	r3, r7, r3
   2d700:	781b      	ldrb	r3, [r3, #0]
   2d702:	2204      	movs	r2, #4
   2d704:	4013      	ands	r3, r2
   2d706:	d001      	beq.n	2d70c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d708:	230a      	movs	r3, #10
   2d70a:	e283      	b.n	2dc14 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d70c:	2300      	movs	r3, #0
   2d70e:	e281      	b.n	2dc14 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d712:	2200      	movs	r2, #0
   2d714:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d718:	b2da      	uxtb	r2, r3
   2d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d71c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d720:	785b      	ldrb	r3, [r3, #1]
   2d722:	2227      	movs	r2, #39	; 0x27
   2d724:	18bc      	adds	r4, r7, r2
   2d726:	0018      	movs	r0, r3
   2d728:	4baa      	ldr	r3, [pc, #680]	; (2d9d4 <chk_mounted+0x368>)
   2d72a:	4798      	blx	r3
   2d72c:	0003      	movs	r3, r0
   2d72e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d730:	2327      	movs	r3, #39	; 0x27
   2d732:	18fb      	adds	r3, r7, r3
   2d734:	781b      	ldrb	r3, [r3, #0]
   2d736:	2201      	movs	r2, #1
   2d738:	4013      	ands	r3, r2
   2d73a:	d001      	beq.n	2d740 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d73c:	2303      	movs	r3, #3
   2d73e:	e269      	b.n	2dc14 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d740:	1dfb      	adds	r3, r7, #7
   2d742:	781b      	ldrb	r3, [r3, #0]
   2d744:	2b00      	cmp	r3, #0
   2d746:	d007      	beq.n	2d758 <chk_mounted+0xec>
   2d748:	2327      	movs	r3, #39	; 0x27
   2d74a:	18fb      	adds	r3, r7, r3
   2d74c:	781b      	ldrb	r3, [r3, #0]
   2d74e:	2204      	movs	r2, #4
   2d750:	4013      	ands	r3, r2
   2d752:	d001      	beq.n	2d758 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d754:	230a      	movs	r3, #10
   2d756:	e25d      	b.n	2dc14 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d758:	2300      	movs	r3, #0
   2d75a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d75c:	2347      	movs	r3, #71	; 0x47
   2d75e:	18fc      	adds	r4, r7, r3
   2d760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d762:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d764:	0011      	movs	r1, r2
   2d766:	0018      	movs	r0, r3
   2d768:	4b9b      	ldr	r3, [pc, #620]	; (2d9d8 <chk_mounted+0x36c>)
   2d76a:	4798      	blx	r3
   2d76c:	0003      	movs	r3, r0
   2d76e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d770:	2347      	movs	r3, #71	; 0x47
   2d772:	18fb      	adds	r3, r7, r3
   2d774:	781b      	ldrb	r3, [r3, #0]
   2d776:	2b01      	cmp	r3, #1
   2d778:	d13b      	bne.n	2d7f2 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d77a:	2346      	movs	r3, #70	; 0x46
   2d77c:	18fb      	adds	r3, r7, r3
   2d77e:	2200      	movs	r2, #0
   2d780:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d782:	2346      	movs	r3, #70	; 0x46
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	781b      	ldrb	r3, [r3, #0]
   2d788:	2b00      	cmp	r3, #0
   2d78a:	d006      	beq.n	2d79a <chk_mounted+0x12e>
   2d78c:	2346      	movs	r3, #70	; 0x46
   2d78e:	18fb      	adds	r3, r7, r3
   2d790:	781a      	ldrb	r2, [r3, #0]
   2d792:	2346      	movs	r3, #70	; 0x46
   2d794:	18fb      	adds	r3, r7, r3
   2d796:	3a01      	subs	r2, #1
   2d798:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d79a:	2346      	movs	r3, #70	; 0x46
   2d79c:	18fb      	adds	r3, r7, r3
   2d79e:	781b      	ldrb	r3, [r3, #0]
   2d7a0:	011b      	lsls	r3, r3, #4
   2d7a2:	33bf      	adds	r3, #191	; 0xbf
   2d7a4:	33ff      	adds	r3, #255	; 0xff
   2d7a6:	3330      	adds	r3, #48	; 0x30
   2d7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d7aa:	18d3      	adds	r3, r2, r3
   2d7ac:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d7ae:	6a3b      	ldr	r3, [r7, #32]
   2d7b0:	3304      	adds	r3, #4
   2d7b2:	781b      	ldrb	r3, [r3, #0]
   2d7b4:	2b00      	cmp	r3, #0
   2d7b6:	d01c      	beq.n	2d7f2 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d7b8:	6a3b      	ldr	r3, [r7, #32]
   2d7ba:	330b      	adds	r3, #11
   2d7bc:	781b      	ldrb	r3, [r3, #0]
   2d7be:	061a      	lsls	r2, r3, #24
   2d7c0:	6a3b      	ldr	r3, [r7, #32]
   2d7c2:	330a      	adds	r3, #10
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	041b      	lsls	r3, r3, #16
   2d7c8:	4313      	orrs	r3, r2
   2d7ca:	6a3a      	ldr	r2, [r7, #32]
   2d7cc:	3209      	adds	r2, #9
   2d7ce:	7812      	ldrb	r2, [r2, #0]
   2d7d0:	0212      	lsls	r2, r2, #8
   2d7d2:	4313      	orrs	r3, r2
   2d7d4:	6a3a      	ldr	r2, [r7, #32]
   2d7d6:	3208      	adds	r2, #8
   2d7d8:	7812      	ldrb	r2, [r2, #0]
   2d7da:	4313      	orrs	r3, r2
   2d7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d7de:	2347      	movs	r3, #71	; 0x47
   2d7e0:	18fc      	adds	r4, r7, r3
   2d7e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7e6:	0011      	movs	r1, r2
   2d7e8:	0018      	movs	r0, r3
   2d7ea:	4b7b      	ldr	r3, [pc, #492]	; (2d9d8 <chk_mounted+0x36c>)
   2d7ec:	4798      	blx	r3
   2d7ee:	0003      	movs	r3, r0
   2d7f0:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d7f2:	2347      	movs	r3, #71	; 0x47
   2d7f4:	18fb      	adds	r3, r7, r3
   2d7f6:	781b      	ldrb	r3, [r3, #0]
   2d7f8:	2b03      	cmp	r3, #3
   2d7fa:	d101      	bne.n	2d800 <chk_mounted+0x194>
   2d7fc:	2301      	movs	r3, #1
   2d7fe:	e209      	b.n	2dc14 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d800:	2347      	movs	r3, #71	; 0x47
   2d802:	18fb      	adds	r3, r7, r3
   2d804:	781b      	ldrb	r3, [r3, #0]
   2d806:	2b00      	cmp	r3, #0
   2d808:	d001      	beq.n	2d80e <chk_mounted+0x1a2>
   2d80a:	230d      	movs	r3, #13
   2d80c:	e202      	b.n	2dc14 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d810:	223c      	movs	r2, #60	; 0x3c
   2d812:	5c9b      	ldrb	r3, [r3, r2]
   2d814:	021b      	lsls	r3, r3, #8
   2d816:	b21a      	sxth	r2, r3
   2d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d81a:	213b      	movs	r1, #59	; 0x3b
   2d81c:	5c5b      	ldrb	r3, [r3, r1]
   2d81e:	b21b      	sxth	r3, r3
   2d820:	4313      	orrs	r3, r2
   2d822:	b21a      	sxth	r2, r3
   2d824:	2380      	movs	r3, #128	; 0x80
   2d826:	009b      	lsls	r3, r3, #2
   2d828:	429a      	cmp	r2, r3
   2d82a:	d001      	beq.n	2d830 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d82c:	230d      	movs	r3, #13
   2d82e:	e1f1      	b.n	2dc14 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d832:	2247      	movs	r2, #71	; 0x47
   2d834:	5c9b      	ldrb	r3, [r3, r2]
   2d836:	021b      	lsls	r3, r3, #8
   2d838:	b21a      	sxth	r2, r3
   2d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d83c:	2146      	movs	r1, #70	; 0x46
   2d83e:	5c5b      	ldrb	r3, [r3, r1]
   2d840:	b21b      	sxth	r3, r3
   2d842:	4313      	orrs	r3, r2
   2d844:	b21b      	sxth	r3, r3
   2d846:	b29b      	uxth	r3, r3
   2d848:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d84c:	2b00      	cmp	r3, #0
   2d84e:	d112      	bne.n	2d876 <chk_mounted+0x20a>
   2d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d852:	2257      	movs	r2, #87	; 0x57
   2d854:	5c9b      	ldrb	r3, [r3, r2]
   2d856:	061a      	lsls	r2, r3, #24
   2d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d85a:	2156      	movs	r1, #86	; 0x56
   2d85c:	5c5b      	ldrb	r3, [r3, r1]
   2d85e:	041b      	lsls	r3, r3, #16
   2d860:	4313      	orrs	r3, r2
   2d862:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d864:	2155      	movs	r1, #85	; 0x55
   2d866:	5c52      	ldrb	r2, [r2, r1]
   2d868:	0212      	lsls	r2, r2, #8
   2d86a:	4313      	orrs	r3, r2
   2d86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d86e:	2154      	movs	r1, #84	; 0x54
   2d870:	5c52      	ldrb	r2, [r2, r1]
   2d872:	4313      	orrs	r3, r2
   2d874:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d878:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d87a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d87c:	231f      	movs	r3, #31
   2d87e:	18fb      	adds	r3, r7, r3
   2d880:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d882:	2140      	movs	r1, #64	; 0x40
   2d884:	5c52      	ldrb	r2, [r2, r1]
   2d886:	701a      	strb	r2, [r3, #0]
   2d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d88a:	221f      	movs	r2, #31
   2d88c:	18ba      	adds	r2, r7, r2
   2d88e:	7812      	ldrb	r2, [r2, #0]
   2d890:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d892:	231f      	movs	r3, #31
   2d894:	18fb      	adds	r3, r7, r3
   2d896:	781b      	ldrb	r3, [r3, #0]
   2d898:	2b01      	cmp	r3, #1
   2d89a:	d006      	beq.n	2d8aa <chk_mounted+0x23e>
   2d89c:	231f      	movs	r3, #31
   2d89e:	18fb      	adds	r3, r7, r3
   2d8a0:	781b      	ldrb	r3, [r3, #0]
   2d8a2:	2b02      	cmp	r3, #2
   2d8a4:	d001      	beq.n	2d8aa <chk_mounted+0x23e>
   2d8a6:	230d      	movs	r3, #13
   2d8a8:	e1b4      	b.n	2dc14 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d8aa:	231f      	movs	r3, #31
   2d8ac:	18fb      	adds	r3, r7, r3
   2d8ae:	781a      	ldrb	r2, [r3, #0]
   2d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d8b2:	4353      	muls	r3, r2
   2d8b4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d8b6:	231f      	movs	r3, #31
   2d8b8:	18fb      	adds	r3, r7, r3
   2d8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d8bc:	213d      	movs	r1, #61	; 0x3d
   2d8be:	5c52      	ldrb	r2, [r2, r1]
   2d8c0:	701a      	strb	r2, [r3, #0]
   2d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8c4:	221f      	movs	r2, #31
   2d8c6:	18ba      	adds	r2, r7, r2
   2d8c8:	7812      	ldrb	r2, [r2, #0]
   2d8ca:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d8cc:	231f      	movs	r3, #31
   2d8ce:	18fb      	adds	r3, r7, r3
   2d8d0:	781b      	ldrb	r3, [r3, #0]
   2d8d2:	2b00      	cmp	r3, #0
   2d8d4:	d008      	beq.n	2d8e8 <chk_mounted+0x27c>
   2d8d6:	231f      	movs	r3, #31
   2d8d8:	18fb      	adds	r3, r7, r3
   2d8da:	781b      	ldrb	r3, [r3, #0]
   2d8dc:	221f      	movs	r2, #31
   2d8de:	18ba      	adds	r2, r7, r2
   2d8e0:	7812      	ldrb	r2, [r2, #0]
   2d8e2:	3a01      	subs	r2, #1
   2d8e4:	4013      	ands	r3, r2
   2d8e6:	d001      	beq.n	2d8ec <chk_mounted+0x280>
   2d8e8:	230d      	movs	r3, #13
   2d8ea:	e193      	b.n	2dc14 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8ee:	2242      	movs	r2, #66	; 0x42
   2d8f0:	5c9b      	ldrb	r3, [r3, r2]
   2d8f2:	021b      	lsls	r3, r3, #8
   2d8f4:	b21a      	sxth	r2, r3
   2d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8f8:	2141      	movs	r1, #65	; 0x41
   2d8fa:	5c5b      	ldrb	r3, [r3, r1]
   2d8fc:	b21b      	sxth	r3, r3
   2d8fe:	4313      	orrs	r3, r2
   2d900:	b21b      	sxth	r3, r3
   2d902:	b29a      	uxth	r2, r3
   2d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d906:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d90a:	891b      	ldrh	r3, [r3, #8]
   2d90c:	220f      	movs	r2, #15
   2d90e:	4013      	ands	r3, r2
   2d910:	b29b      	uxth	r3, r3
   2d912:	2b00      	cmp	r3, #0
   2d914:	d001      	beq.n	2d91a <chk_mounted+0x2ae>
   2d916:	230d      	movs	r3, #13
   2d918:	e17c      	b.n	2dc14 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d91c:	2244      	movs	r2, #68	; 0x44
   2d91e:	5c9b      	ldrb	r3, [r3, r2]
   2d920:	021b      	lsls	r3, r3, #8
   2d922:	b21a      	sxth	r2, r3
   2d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d926:	2143      	movs	r1, #67	; 0x43
   2d928:	5c5b      	ldrb	r3, [r3, r1]
   2d92a:	b21b      	sxth	r3, r3
   2d92c:	4313      	orrs	r3, r2
   2d92e:	b21b      	sxth	r3, r3
   2d930:	b29b      	uxth	r3, r3
   2d932:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d936:	2b00      	cmp	r3, #0
   2d938:	d112      	bne.n	2d960 <chk_mounted+0x2f4>
   2d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d93c:	2253      	movs	r2, #83	; 0x53
   2d93e:	5c9b      	ldrb	r3, [r3, r2]
   2d940:	061a      	lsls	r2, r3, #24
   2d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d944:	2152      	movs	r1, #82	; 0x52
   2d946:	5c5b      	ldrb	r3, [r3, r1]
   2d948:	041b      	lsls	r3, r3, #16
   2d94a:	4313      	orrs	r3, r2
   2d94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d94e:	2151      	movs	r1, #81	; 0x51
   2d950:	5c52      	ldrb	r2, [r2, r1]
   2d952:	0212      	lsls	r2, r2, #8
   2d954:	4313      	orrs	r3, r2
   2d956:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d958:	2150      	movs	r1, #80	; 0x50
   2d95a:	5c52      	ldrb	r2, [r2, r1]
   2d95c:	4313      	orrs	r3, r2
   2d95e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d962:	223f      	movs	r2, #63	; 0x3f
   2d964:	5c9b      	ldrb	r3, [r3, r2]
   2d966:	021b      	lsls	r3, r3, #8
   2d968:	b21a      	sxth	r2, r3
   2d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d96c:	213e      	movs	r1, #62	; 0x3e
   2d96e:	5c5b      	ldrb	r3, [r3, r1]
   2d970:	b21b      	sxth	r3, r3
   2d972:	4313      	orrs	r3, r2
   2d974:	b21a      	sxth	r2, r3
   2d976:	231c      	movs	r3, #28
   2d978:	18fb      	adds	r3, r7, r3
   2d97a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d97c:	231c      	movs	r3, #28
   2d97e:	18fb      	adds	r3, r7, r3
   2d980:	881b      	ldrh	r3, [r3, #0]
   2d982:	2b00      	cmp	r3, #0
   2d984:	d101      	bne.n	2d98a <chk_mounted+0x31e>
   2d986:	230d      	movs	r3, #13
   2d988:	e144      	b.n	2dc14 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d98a:	231c      	movs	r3, #28
   2d98c:	18fb      	adds	r3, r7, r3
   2d98e:	881a      	ldrh	r2, [r3, #0]
   2d990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d992:	18d3      	adds	r3, r2, r3
   2d994:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d996:	8912      	ldrh	r2, [r2, #8]
   2d998:	0912      	lsrs	r2, r2, #4
   2d99a:	b292      	uxth	r2, r2
   2d99c:	189b      	adds	r3, r3, r2
   2d99e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d9a2:	69bb      	ldr	r3, [r7, #24]
   2d9a4:	429a      	cmp	r2, r3
   2d9a6:	d201      	bcs.n	2d9ac <chk_mounted+0x340>
   2d9a8:	230d      	movs	r3, #13
   2d9aa:	e133      	b.n	2dc14 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d9ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d9ae:	69bb      	ldr	r3, [r7, #24]
   2d9b0:	1ad2      	subs	r2, r2, r3
   2d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9b4:	789b      	ldrb	r3, [r3, #2]
   2d9b6:	0019      	movs	r1, r3
   2d9b8:	4b08      	ldr	r3, [pc, #32]	; (2d9dc <chk_mounted+0x370>)
   2d9ba:	0010      	movs	r0, r2
   2d9bc:	4798      	blx	r3
   2d9be:	0003      	movs	r3, r0
   2d9c0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d9c2:	697b      	ldr	r3, [r7, #20]
   2d9c4:	2b00      	cmp	r3, #0
   2d9c6:	d10b      	bne.n	2d9e0 <chk_mounted+0x374>
   2d9c8:	230d      	movs	r3, #13
   2d9ca:	e123      	b.n	2dc14 <chk_mounted+0x5a8>
   2d9cc:	200042f4 	.word	0x200042f4
   2d9d0:	0002b7c9 	.word	0x0002b7c9
   2d9d4:	0002b745 	.word	0x0002b745
   2d9d8:	0002d599 	.word	0x0002d599
   2d9dc:	00032d95 	.word	0x00032d95
	fmt = FS_FAT12;
   2d9e0:	2347      	movs	r3, #71	; 0x47
   2d9e2:	18fb      	adds	r3, r7, r3
   2d9e4:	2201      	movs	r2, #1
   2d9e6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d9e8:	697b      	ldr	r3, [r7, #20]
   2d9ea:	4a8c      	ldr	r2, [pc, #560]	; (2dc1c <chk_mounted+0x5b0>)
   2d9ec:	4293      	cmp	r3, r2
   2d9ee:	d903      	bls.n	2d9f8 <chk_mounted+0x38c>
   2d9f0:	2347      	movs	r3, #71	; 0x47
   2d9f2:	18fb      	adds	r3, r7, r3
   2d9f4:	2202      	movs	r2, #2
   2d9f6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d9f8:	697b      	ldr	r3, [r7, #20]
   2d9fa:	4a89      	ldr	r2, [pc, #548]	; (2dc20 <chk_mounted+0x5b4>)
   2d9fc:	4293      	cmp	r3, r2
   2d9fe:	d903      	bls.n	2da08 <chk_mounted+0x39c>
   2da00:	2347      	movs	r3, #71	; 0x47
   2da02:	18fb      	adds	r3, r7, r3
   2da04:	2203      	movs	r2, #3
   2da06:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2da08:	697b      	ldr	r3, [r7, #20]
   2da0a:	1c9a      	adds	r2, r3, #2
   2da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da0e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2da10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2da12:	69bb      	ldr	r3, [r7, #24]
   2da14:	18d2      	adds	r2, r2, r3
   2da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da18:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2da1a:	231c      	movs	r3, #28
   2da1c:	18fb      	adds	r3, r7, r3
   2da1e:	881a      	ldrh	r2, [r3, #0]
   2da20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2da22:	18d2      	adds	r2, r2, r3
   2da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da26:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2da28:	2347      	movs	r3, #71	; 0x47
   2da2a:	18fb      	adds	r3, r7, r3
   2da2c:	781b      	ldrb	r3, [r3, #0]
   2da2e:	2b03      	cmp	r3, #3
   2da30:	d11e      	bne.n	2da70 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da34:	891b      	ldrh	r3, [r3, #8]
   2da36:	2b00      	cmp	r3, #0
   2da38:	d001      	beq.n	2da3e <chk_mounted+0x3d2>
   2da3a:	230d      	movs	r3, #13
   2da3c:	e0ea      	b.n	2dc14 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da40:	225f      	movs	r2, #95	; 0x5f
   2da42:	5c9b      	ldrb	r3, [r3, r2]
   2da44:	061a      	lsls	r2, r3, #24
   2da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da48:	215e      	movs	r1, #94	; 0x5e
   2da4a:	5c5b      	ldrb	r3, [r3, r1]
   2da4c:	041b      	lsls	r3, r3, #16
   2da4e:	4313      	orrs	r3, r2
   2da50:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da52:	215d      	movs	r1, #93	; 0x5d
   2da54:	5c52      	ldrb	r2, [r2, r1]
   2da56:	0212      	lsls	r2, r2, #8
   2da58:	4313      	orrs	r3, r2
   2da5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da5c:	215c      	movs	r1, #92	; 0x5c
   2da5e:	5c52      	ldrb	r2, [r2, r1]
   2da60:	431a      	orrs	r2, r3
   2da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da64:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da68:	699b      	ldr	r3, [r3, #24]
   2da6a:	009b      	lsls	r3, r3, #2
   2da6c:	633b      	str	r3, [r7, #48]	; 0x30
   2da6e:	e020      	b.n	2dab2 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da72:	891b      	ldrh	r3, [r3, #8]
   2da74:	2b00      	cmp	r3, #0
   2da76:	d101      	bne.n	2da7c <chk_mounted+0x410>
   2da78:	230d      	movs	r3, #13
   2da7a:	e0cb      	b.n	2dc14 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da7e:	6a1a      	ldr	r2, [r3, #32]
   2da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2da82:	18d2      	adds	r2, r2, r3
   2da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da86:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2da88:	2347      	movs	r3, #71	; 0x47
   2da8a:	18fb      	adds	r3, r7, r3
   2da8c:	781b      	ldrb	r3, [r3, #0]
   2da8e:	2b02      	cmp	r3, #2
   2da90:	d103      	bne.n	2da9a <chk_mounted+0x42e>
   2da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da94:	699b      	ldr	r3, [r3, #24]
   2da96:	005b      	lsls	r3, r3, #1
   2da98:	e00a      	b.n	2dab0 <chk_mounted+0x444>
   2da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da9c:	699a      	ldr	r2, [r3, #24]
   2da9e:	0013      	movs	r3, r2
   2daa0:	005b      	lsls	r3, r3, #1
   2daa2:	189b      	adds	r3, r3, r2
   2daa4:	085a      	lsrs	r2, r3, #1
   2daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daa8:	699b      	ldr	r3, [r3, #24]
   2daaa:	2101      	movs	r1, #1
   2daac:	400b      	ands	r3, r1
   2daae:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2dab0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dab4:	69da      	ldr	r2, [r3, #28]
   2dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dab8:	495a      	ldr	r1, [pc, #360]	; (2dc24 <chk_mounted+0x5b8>)
   2daba:	468c      	mov	ip, r1
   2dabc:	4463      	add	r3, ip
   2dabe:	0a5b      	lsrs	r3, r3, #9
   2dac0:	429a      	cmp	r2, r3
   2dac2:	d201      	bcs.n	2dac8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2dac4:	230d      	movs	r3, #13
   2dac6:	e0a5      	b.n	2dc14 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daca:	2201      	movs	r2, #1
   2dacc:	4252      	negs	r2, r2
   2dace:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dad2:	2200      	movs	r2, #0
   2dad4:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2dad6:	2347      	movs	r3, #71	; 0x47
   2dad8:	18fb      	adds	r3, r7, r3
   2dada:	781b      	ldrb	r3, [r3, #0]
   2dadc:	2b03      	cmp	r3, #3
   2dade:	d000      	beq.n	2dae2 <chk_mounted+0x476>
   2dae0:	e082      	b.n	2dbe8 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dae4:	2200      	movs	r2, #0
   2dae6:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2dae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daea:	2261      	movs	r2, #97	; 0x61
   2daec:	5c9b      	ldrb	r3, [r3, r2]
   2daee:	021b      	lsls	r3, r3, #8
   2daf0:	b21a      	sxth	r2, r3
   2daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daf4:	2160      	movs	r1, #96	; 0x60
   2daf6:	5c5b      	ldrb	r3, [r3, r1]
   2daf8:	b21b      	sxth	r3, r3
   2dafa:	4313      	orrs	r3, r2
   2dafc:	b21b      	sxth	r3, r3
   2dafe:	b29b      	uxth	r3, r3
   2db00:	001a      	movs	r2, r3
   2db02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2db04:	18d2      	adds	r2, r2, r3
   2db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db08:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2db0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db0c:	7858      	ldrb	r0, [r3, #1]
   2db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db10:	3330      	adds	r3, #48	; 0x30
   2db12:	0019      	movs	r1, r3
   2db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db16:	695a      	ldr	r2, [r3, #20]
   2db18:	2301      	movs	r3, #1
   2db1a:	4c43      	ldr	r4, [pc, #268]	; (2dc28 <chk_mounted+0x5bc>)
   2db1c:	47a0      	blx	r4
   2db1e:	1e03      	subs	r3, r0, #0
   2db20:	d162      	bne.n	2dbe8 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db24:	4a41      	ldr	r2, [pc, #260]	; (2dc2c <chk_mounted+0x5c0>)
   2db26:	5c9b      	ldrb	r3, [r3, r2]
   2db28:	021b      	lsls	r3, r3, #8
   2db2a:	b21a      	sxth	r2, r3
   2db2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db2e:	4940      	ldr	r1, [pc, #256]	; (2dc30 <chk_mounted+0x5c4>)
   2db30:	5c5b      	ldrb	r3, [r3, r1]
   2db32:	b21b      	sxth	r3, r3
   2db34:	4313      	orrs	r3, r2
   2db36:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2db38:	4a3e      	ldr	r2, [pc, #248]	; (2dc34 <chk_mounted+0x5c8>)
   2db3a:	4293      	cmp	r3, r2
   2db3c:	d154      	bne.n	2dbe8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2db3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db40:	2233      	movs	r2, #51	; 0x33
   2db42:	5c9b      	ldrb	r3, [r3, r2]
   2db44:	061a      	lsls	r2, r3, #24
   2db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db48:	2132      	movs	r1, #50	; 0x32
   2db4a:	5c5b      	ldrb	r3, [r3, r1]
   2db4c:	041b      	lsls	r3, r3, #16
   2db4e:	4313      	orrs	r3, r2
   2db50:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db52:	2131      	movs	r1, #49	; 0x31
   2db54:	5c52      	ldrb	r2, [r2, r1]
   2db56:	0212      	lsls	r2, r2, #8
   2db58:	4313      	orrs	r3, r2
   2db5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db5c:	2130      	movs	r1, #48	; 0x30
   2db5e:	5c52      	ldrb	r2, [r2, r1]
   2db60:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2db62:	4a35      	ldr	r2, [pc, #212]	; (2dc38 <chk_mounted+0x5cc>)
   2db64:	4293      	cmp	r3, r2
   2db66:	d13f      	bne.n	2dbe8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db6a:	4a34      	ldr	r2, [pc, #208]	; (2dc3c <chk_mounted+0x5d0>)
   2db6c:	5c9b      	ldrb	r3, [r3, r2]
   2db6e:	061a      	lsls	r2, r3, #24
   2db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db72:	4933      	ldr	r1, [pc, #204]	; (2dc40 <chk_mounted+0x5d4>)
   2db74:	5c5b      	ldrb	r3, [r3, r1]
   2db76:	041b      	lsls	r3, r3, #16
   2db78:	4313      	orrs	r3, r2
   2db7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2db7c:	4931      	ldr	r1, [pc, #196]	; (2dc44 <chk_mounted+0x5d8>)
   2db7e:	5c52      	ldrb	r2, [r2, r1]
   2db80:	0212      	lsls	r2, r2, #8
   2db82:	4313      	orrs	r3, r2
   2db84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2db86:	2285      	movs	r2, #133	; 0x85
   2db88:	0092      	lsls	r2, r2, #2
   2db8a:	5c8a      	ldrb	r2, [r1, r2]
   2db8c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2db8e:	4a2e      	ldr	r2, [pc, #184]	; (2dc48 <chk_mounted+0x5dc>)
   2db90:	4293      	cmp	r3, r2
   2db92:	d129      	bne.n	2dbe8 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db96:	4a2d      	ldr	r2, [pc, #180]	; (2dc4c <chk_mounted+0x5e0>)
   2db98:	5c9b      	ldrb	r3, [r3, r2]
   2db9a:	061a      	lsls	r2, r3, #24
   2db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2db9e:	492c      	ldr	r1, [pc, #176]	; (2dc50 <chk_mounted+0x5e4>)
   2dba0:	5c5b      	ldrb	r3, [r3, r1]
   2dba2:	041b      	lsls	r3, r3, #16
   2dba4:	4313      	orrs	r3, r2
   2dba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dba8:	492a      	ldr	r1, [pc, #168]	; (2dc54 <chk_mounted+0x5e8>)
   2dbaa:	5c52      	ldrb	r2, [r2, r1]
   2dbac:	0212      	lsls	r2, r2, #8
   2dbae:	4313      	orrs	r3, r2
   2dbb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2dbb2:	2287      	movs	r2, #135	; 0x87
   2dbb4:	0092      	lsls	r2, r2, #2
   2dbb6:	5c8a      	ldrb	r2, [r1, r2]
   2dbb8:	431a      	orrs	r2, r3
   2dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbbc:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbc0:	4a25      	ldr	r2, [pc, #148]	; (2dc58 <chk_mounted+0x5ec>)
   2dbc2:	5c9b      	ldrb	r3, [r3, r2]
   2dbc4:	061a      	lsls	r2, r3, #24
   2dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbc8:	4924      	ldr	r1, [pc, #144]	; (2dc5c <chk_mounted+0x5f0>)
   2dbca:	5c5b      	ldrb	r3, [r3, r1]
   2dbcc:	041b      	lsls	r3, r3, #16
   2dbce:	4313      	orrs	r3, r2
   2dbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dbd2:	4923      	ldr	r1, [pc, #140]	; (2dc60 <chk_mounted+0x5f4>)
   2dbd4:	5c52      	ldrb	r2, [r2, r1]
   2dbd6:	0212      	lsls	r2, r2, #8
   2dbd8:	4313      	orrs	r3, r2
   2dbda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2dbdc:	2286      	movs	r2, #134	; 0x86
   2dbde:	0092      	lsls	r2, r2, #2
   2dbe0:	5c8a      	ldrb	r2, [r1, r2]
   2dbe2:	431a      	orrs	r2, r3
   2dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbe6:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dbea:	2247      	movs	r2, #71	; 0x47
   2dbec:	18ba      	adds	r2, r7, r2
   2dbee:	7812      	ldrb	r2, [r2, #0]
   2dbf0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2dbf2:	4b1c      	ldr	r3, [pc, #112]	; (2dc64 <chk_mounted+0x5f8>)
   2dbf4:	881b      	ldrh	r3, [r3, #0]
   2dbf6:	3301      	adds	r3, #1
   2dbf8:	b29a      	uxth	r2, r3
   2dbfa:	4b1a      	ldr	r3, [pc, #104]	; (2dc64 <chk_mounted+0x5f8>)
   2dbfc:	801a      	strh	r2, [r3, #0]
   2dbfe:	4b19      	ldr	r3, [pc, #100]	; (2dc64 <chk_mounted+0x5f8>)
   2dc00:	881a      	ldrh	r2, [r3, #0]
   2dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc04:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc08:	2200      	movs	r2, #0
   2dc0a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dc0e:	2200      	movs	r2, #0
   2dc10:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2dc12:	2300      	movs	r3, #0
}
   2dc14:	0018      	movs	r0, r3
   2dc16:	46bd      	mov	sp, r7
   2dc18:	b013      	add	sp, #76	; 0x4c
   2dc1a:	bd90      	pop	{r4, r7, pc}
   2dc1c:	00000ff5 	.word	0x00000ff5
   2dc20:	0000fff5 	.word	0x0000fff5
   2dc24:	000001ff 	.word	0x000001ff
   2dc28:	0002b801 	.word	0x0002b801
   2dc2c:	0000022f 	.word	0x0000022f
   2dc30:	0000022e 	.word	0x0000022e
   2dc34:	ffffaa55 	.word	0xffffaa55
   2dc38:	41615252 	.word	0x41615252
   2dc3c:	00000217 	.word	0x00000217
   2dc40:	00000216 	.word	0x00000216
   2dc44:	00000215 	.word	0x00000215
   2dc48:	61417272 	.word	0x61417272
   2dc4c:	0000021f 	.word	0x0000021f
   2dc50:	0000021e 	.word	0x0000021e
   2dc54:	0000021d 	.word	0x0000021d
   2dc58:	0000021b 	.word	0x0000021b
   2dc5c:	0000021a 	.word	0x0000021a
   2dc60:	00000219 	.word	0x00000219
   2dc64:	20004314 	.word	0x20004314

0002dc68 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2dc68:	b580      	push	{r7, lr}
   2dc6a:	b082      	sub	sp, #8
   2dc6c:	af00      	add	r7, sp, #0
   2dc6e:	6078      	str	r0, [r7, #4]
   2dc70:	000a      	movs	r2, r1
   2dc72:	1cbb      	adds	r3, r7, #2
   2dc74:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2dc76:	687b      	ldr	r3, [r7, #4]
   2dc78:	2b00      	cmp	r3, #0
   2dc7a:	d009      	beq.n	2dc90 <validate+0x28>
   2dc7c:	687b      	ldr	r3, [r7, #4]
   2dc7e:	781b      	ldrb	r3, [r3, #0]
   2dc80:	2b00      	cmp	r3, #0
   2dc82:	d005      	beq.n	2dc90 <validate+0x28>
   2dc84:	687b      	ldr	r3, [r7, #4]
   2dc86:	88db      	ldrh	r3, [r3, #6]
   2dc88:	1cba      	adds	r2, r7, #2
   2dc8a:	8812      	ldrh	r2, [r2, #0]
   2dc8c:	429a      	cmp	r2, r3
   2dc8e:	d001      	beq.n	2dc94 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2dc90:	2309      	movs	r3, #9
   2dc92:	e00c      	b.n	2dcae <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2dc94:	687b      	ldr	r3, [r7, #4]
   2dc96:	785b      	ldrb	r3, [r3, #1]
   2dc98:	0018      	movs	r0, r3
   2dc9a:	4b07      	ldr	r3, [pc, #28]	; (2dcb8 <validate+0x50>)
   2dc9c:	4798      	blx	r3
   2dc9e:	0003      	movs	r3, r0
   2dca0:	001a      	movs	r2, r3
   2dca2:	2301      	movs	r3, #1
   2dca4:	4013      	ands	r3, r2
   2dca6:	d001      	beq.n	2dcac <validate+0x44>
		return FR_NOT_READY;
   2dca8:	2303      	movs	r3, #3
   2dcaa:	e000      	b.n	2dcae <validate+0x46>

	return FR_OK;
   2dcac:	2300      	movs	r3, #0
}
   2dcae:	0018      	movs	r0, r3
   2dcb0:	46bd      	mov	sp, r7
   2dcb2:	b002      	add	sp, #8
   2dcb4:	bd80      	pop	{r7, pc}
   2dcb6:	46c0      	nop			; (mov r8, r8)
   2dcb8:	0002b7c9 	.word	0x0002b7c9

0002dcbc <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2dcbc:	b580      	push	{r7, lr}
   2dcbe:	b084      	sub	sp, #16
   2dcc0:	af00      	add	r7, sp, #0
   2dcc2:	0002      	movs	r2, r0
   2dcc4:	6039      	str	r1, [r7, #0]
   2dcc6:	1dfb      	adds	r3, r7, #7
   2dcc8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2dcca:	1dfb      	adds	r3, r7, #7
   2dccc:	781b      	ldrb	r3, [r3, #0]
   2dcce:	2b07      	cmp	r3, #7
   2dcd0:	d901      	bls.n	2dcd6 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2dcd2:	230b      	movs	r3, #11
   2dcd4:	e018      	b.n	2dd08 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2dcd6:	1dfb      	adds	r3, r7, #7
   2dcd8:	781a      	ldrb	r2, [r3, #0]
   2dcda:	4b0d      	ldr	r3, [pc, #52]	; (2dd10 <f_mount+0x54>)
   2dcdc:	0092      	lsls	r2, r2, #2
   2dcde:	58d3      	ldr	r3, [r2, r3]
   2dce0:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2dce2:	68fb      	ldr	r3, [r7, #12]
   2dce4:	2b00      	cmp	r3, #0
   2dce6:	d002      	beq.n	2dcee <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2dce8:	68fb      	ldr	r3, [r7, #12]
   2dcea:	2200      	movs	r2, #0
   2dcec:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2dcee:	683b      	ldr	r3, [r7, #0]
   2dcf0:	2b00      	cmp	r3, #0
   2dcf2:	d002      	beq.n	2dcfa <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2dcf4:	683b      	ldr	r3, [r7, #0]
   2dcf6:	2200      	movs	r2, #0
   2dcf8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2dcfa:	1dfb      	adds	r3, r7, #7
   2dcfc:	781a      	ldrb	r2, [r3, #0]
   2dcfe:	4b04      	ldr	r3, [pc, #16]	; (2dd10 <f_mount+0x54>)
   2dd00:	0092      	lsls	r2, r2, #2
   2dd02:	6839      	ldr	r1, [r7, #0]
   2dd04:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2dd06:	2300      	movs	r3, #0
}
   2dd08:	0018      	movs	r0, r3
   2dd0a:	46bd      	mov	sp, r7
   2dd0c:	b004      	add	sp, #16
   2dd0e:	bd80      	pop	{r7, pc}
   2dd10:	200042f4 	.word	0x200042f4

0002dd14 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2dd14:	b590      	push	{r4, r7, lr}
   2dd16:	4ce5      	ldr	r4, [pc, #916]	; (2e0ac <f_open+0x398>)
   2dd18:	44a5      	add	sp, r4
   2dd1a:	af00      	add	r7, sp, #0
   2dd1c:	60f8      	str	r0, [r7, #12]
   2dd1e:	60b9      	str	r1, [r7, #8]
   2dd20:	4be3      	ldr	r3, [pc, #908]	; (2e0b0 <f_open+0x39c>)
   2dd22:	2194      	movs	r1, #148	; 0x94
   2dd24:	0089      	lsls	r1, r1, #2
   2dd26:	468c      	mov	ip, r1
   2dd28:	44bc      	add	ip, r7
   2dd2a:	4463      	add	r3, ip
   2dd2c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2dd2e:	68fb      	ldr	r3, [r7, #12]
   2dd30:	2200      	movs	r2, #0
   2dd32:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2dd34:	4bde      	ldr	r3, [pc, #888]	; (2e0b0 <f_open+0x39c>)
   2dd36:	2294      	movs	r2, #148	; 0x94
   2dd38:	0092      	lsls	r2, r2, #2
   2dd3a:	4694      	mov	ip, r2
   2dd3c:	44bc      	add	ip, r7
   2dd3e:	4463      	add	r3, ip
   2dd40:	4adb      	ldr	r2, [pc, #876]	; (2e0b0 <f_open+0x39c>)
   2dd42:	2194      	movs	r1, #148	; 0x94
   2dd44:	0089      	lsls	r1, r1, #2
   2dd46:	468c      	mov	ip, r1
   2dd48:	44bc      	add	ip, r7
   2dd4a:	4462      	add	r2, ip
   2dd4c:	7812      	ldrb	r2, [r2, #0]
   2dd4e:	211f      	movs	r1, #31
   2dd50:	400a      	ands	r2, r1
   2dd52:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2dd54:	4bd6      	ldr	r3, [pc, #856]	; (2e0b0 <f_open+0x39c>)
   2dd56:	2294      	movs	r2, #148	; 0x94
   2dd58:	0092      	lsls	r2, r2, #2
   2dd5a:	4694      	mov	ip, r2
   2dd5c:	44bc      	add	ip, r7
   2dd5e:	4463      	add	r3, ip
   2dd60:	781b      	ldrb	r3, [r3, #0]
   2dd62:	2201      	movs	r2, #1
   2dd64:	4393      	bics	r3, r2
   2dd66:	b2da      	uxtb	r2, r3
   2dd68:	4bd2      	ldr	r3, [pc, #840]	; (2e0b4 <f_open+0x3a0>)
   2dd6a:	18fc      	adds	r4, r7, r3
   2dd6c:	2387      	movs	r3, #135	; 0x87
   2dd6e:	009b      	lsls	r3, r3, #2
   2dd70:	18f9      	adds	r1, r7, r3
   2dd72:	2308      	movs	r3, #8
   2dd74:	18fb      	adds	r3, r7, r3
   2dd76:	0018      	movs	r0, r3
   2dd78:	4bcf      	ldr	r3, [pc, #828]	; (2e0b8 <f_open+0x3a4>)
   2dd7a:	4798      	blx	r3
   2dd7c:	0003      	movs	r3, r0
   2dd7e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2dd80:	2387      	movs	r3, #135	; 0x87
   2dd82:	009b      	lsls	r3, r3, #2
   2dd84:	18fb      	adds	r3, r7, r3
   2dd86:	2284      	movs	r2, #132	; 0x84
   2dd88:	0092      	lsls	r2, r2, #2
   2dd8a:	18ba      	adds	r2, r7, r2
   2dd8c:	619a      	str	r2, [r3, #24]
   2dd8e:	2387      	movs	r3, #135	; 0x87
   2dd90:	009b      	lsls	r3, r3, #2
   2dd92:	18fb      	adds	r3, r7, r3
   2dd94:	2210      	movs	r2, #16
   2dd96:	18ba      	adds	r2, r7, r2
   2dd98:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2dd9a:	4bc6      	ldr	r3, [pc, #792]	; (2e0b4 <f_open+0x3a0>)
   2dd9c:	18fb      	adds	r3, r7, r3
   2dd9e:	781b      	ldrb	r3, [r3, #0]
   2dda0:	2b00      	cmp	r3, #0
   2dda2:	d10b      	bne.n	2ddbc <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2dda4:	68ba      	ldr	r2, [r7, #8]
   2dda6:	4bc3      	ldr	r3, [pc, #780]	; (2e0b4 <f_open+0x3a0>)
   2dda8:	18fc      	adds	r4, r7, r3
   2ddaa:	2387      	movs	r3, #135	; 0x87
   2ddac:	009b      	lsls	r3, r3, #2
   2ddae:	18fb      	adds	r3, r7, r3
   2ddb0:	0011      	movs	r1, r2
   2ddb2:	0018      	movs	r0, r3
   2ddb4:	4bc1      	ldr	r3, [pc, #772]	; (2e0bc <f_open+0x3a8>)
   2ddb6:	4798      	blx	r3
   2ddb8:	0003      	movs	r3, r0
   2ddba:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2ddbc:	2387      	movs	r3, #135	; 0x87
   2ddbe:	009b      	lsls	r3, r3, #2
   2ddc0:	18fb      	adds	r3, r7, r3
   2ddc2:	695b      	ldr	r3, [r3, #20]
   2ddc4:	2292      	movs	r2, #146	; 0x92
   2ddc6:	0092      	lsls	r2, r2, #2
   2ddc8:	18ba      	adds	r2, r7, r2
   2ddca:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2ddcc:	4bb9      	ldr	r3, [pc, #740]	; (2e0b4 <f_open+0x3a0>)
   2ddce:	18fb      	adds	r3, r7, r3
   2ddd0:	781b      	ldrb	r3, [r3, #0]
   2ddd2:	2b00      	cmp	r3, #0
   2ddd4:	d109      	bne.n	2ddea <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2ddd6:	2392      	movs	r3, #146	; 0x92
   2ddd8:	009b      	lsls	r3, r3, #2
   2ddda:	18fb      	adds	r3, r7, r3
   2dddc:	681b      	ldr	r3, [r3, #0]
   2ddde:	2b00      	cmp	r3, #0
   2dde0:	d103      	bne.n	2ddea <f_open+0xd6>
			res = FR_INVALID_NAME;
   2dde2:	4bb4      	ldr	r3, [pc, #720]	; (2e0b4 <f_open+0x3a0>)
   2dde4:	18fb      	adds	r3, r7, r3
   2dde6:	2206      	movs	r2, #6
   2dde8:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2ddea:	4bb1      	ldr	r3, [pc, #708]	; (2e0b0 <f_open+0x39c>)
   2ddec:	2294      	movs	r2, #148	; 0x94
   2ddee:	0092      	lsls	r2, r2, #2
   2ddf0:	4694      	mov	ip, r2
   2ddf2:	44bc      	add	ip, r7
   2ddf4:	4463      	add	r3, ip
   2ddf6:	781b      	ldrb	r3, [r3, #0]
   2ddf8:	221c      	movs	r2, #28
   2ddfa:	4013      	ands	r3, r2
   2ddfc:	d100      	bne.n	2de00 <f_open+0xec>
   2ddfe:	e141      	b.n	2e084 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2de00:	4bac      	ldr	r3, [pc, #688]	; (2e0b4 <f_open+0x3a0>)
   2de02:	18fb      	adds	r3, r7, r3
   2de04:	781b      	ldrb	r3, [r3, #0]
   2de06:	2b00      	cmp	r3, #0
   2de08:	d027      	beq.n	2de5a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2de0a:	4baa      	ldr	r3, [pc, #680]	; (2e0b4 <f_open+0x3a0>)
   2de0c:	18fb      	adds	r3, r7, r3
   2de0e:	781b      	ldrb	r3, [r3, #0]
   2de10:	2b04      	cmp	r3, #4
   2de12:	d109      	bne.n	2de28 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2de14:	4ba7      	ldr	r3, [pc, #668]	; (2e0b4 <f_open+0x3a0>)
   2de16:	18fc      	adds	r4, r7, r3
   2de18:	2387      	movs	r3, #135	; 0x87
   2de1a:	009b      	lsls	r3, r3, #2
   2de1c:	18fb      	adds	r3, r7, r3
   2de1e:	0018      	movs	r0, r3
   2de20:	4ba7      	ldr	r3, [pc, #668]	; (2e0c0 <f_open+0x3ac>)
   2de22:	4798      	blx	r3
   2de24:	0003      	movs	r3, r0
   2de26:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2de28:	4ba1      	ldr	r3, [pc, #644]	; (2e0b0 <f_open+0x39c>)
   2de2a:	2294      	movs	r2, #148	; 0x94
   2de2c:	0092      	lsls	r2, r2, #2
   2de2e:	4694      	mov	ip, r2
   2de30:	44bc      	add	ip, r7
   2de32:	4463      	add	r3, ip
   2de34:	4a9e      	ldr	r2, [pc, #632]	; (2e0b0 <f_open+0x39c>)
   2de36:	2194      	movs	r1, #148	; 0x94
   2de38:	0089      	lsls	r1, r1, #2
   2de3a:	468c      	mov	ip, r1
   2de3c:	44bc      	add	ip, r7
   2de3e:	4462      	add	r2, ip
   2de40:	7812      	ldrb	r2, [r2, #0]
   2de42:	2108      	movs	r1, #8
   2de44:	430a      	orrs	r2, r1
   2de46:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2de48:	2387      	movs	r3, #135	; 0x87
   2de4a:	009b      	lsls	r3, r3, #2
   2de4c:	18fb      	adds	r3, r7, r3
   2de4e:	695b      	ldr	r3, [r3, #20]
   2de50:	2292      	movs	r2, #146	; 0x92
   2de52:	0092      	lsls	r2, r2, #2
   2de54:	18ba      	adds	r2, r7, r2
   2de56:	6013      	str	r3, [r2, #0]
   2de58:	e01c      	b.n	2de94 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2de5a:	2392      	movs	r3, #146	; 0x92
   2de5c:	009b      	lsls	r3, r3, #2
   2de5e:	18fb      	adds	r3, r7, r3
   2de60:	681b      	ldr	r3, [r3, #0]
   2de62:	330b      	adds	r3, #11
   2de64:	781b      	ldrb	r3, [r3, #0]
   2de66:	001a      	movs	r2, r3
   2de68:	2311      	movs	r3, #17
   2de6a:	4013      	ands	r3, r2
   2de6c:	d004      	beq.n	2de78 <f_open+0x164>
				res = FR_DENIED;
   2de6e:	4b91      	ldr	r3, [pc, #580]	; (2e0b4 <f_open+0x3a0>)
   2de70:	18fb      	adds	r3, r7, r3
   2de72:	2207      	movs	r2, #7
   2de74:	701a      	strb	r2, [r3, #0]
   2de76:	e00d      	b.n	2de94 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2de78:	4b8d      	ldr	r3, [pc, #564]	; (2e0b0 <f_open+0x39c>)
   2de7a:	2294      	movs	r2, #148	; 0x94
   2de7c:	0092      	lsls	r2, r2, #2
   2de7e:	4694      	mov	ip, r2
   2de80:	44bc      	add	ip, r7
   2de82:	4463      	add	r3, ip
   2de84:	781b      	ldrb	r3, [r3, #0]
   2de86:	2204      	movs	r2, #4
   2de88:	4013      	ands	r3, r2
   2de8a:	d003      	beq.n	2de94 <f_open+0x180>
					res = FR_EXIST;
   2de8c:	4b89      	ldr	r3, [pc, #548]	; (2e0b4 <f_open+0x3a0>)
   2de8e:	18fb      	adds	r3, r7, r3
   2de90:	2208      	movs	r2, #8
   2de92:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2de94:	4b87      	ldr	r3, [pc, #540]	; (2e0b4 <f_open+0x3a0>)
   2de96:	18fb      	adds	r3, r7, r3
   2de98:	781b      	ldrb	r3, [r3, #0]
   2de9a:	2b00      	cmp	r3, #0
   2de9c:	d000      	beq.n	2dea0 <f_open+0x18c>
   2de9e:	e12f      	b.n	2e100 <f_open+0x3ec>
   2dea0:	4b83      	ldr	r3, [pc, #524]	; (2e0b0 <f_open+0x39c>)
   2dea2:	2294      	movs	r2, #148	; 0x94
   2dea4:	0092      	lsls	r2, r2, #2
   2dea6:	4694      	mov	ip, r2
   2dea8:	44bc      	add	ip, r7
   2deaa:	4463      	add	r3, ip
   2deac:	781b      	ldrb	r3, [r3, #0]
   2deae:	2208      	movs	r2, #8
   2deb0:	4013      	ands	r3, r2
   2deb2:	d100      	bne.n	2deb6 <f_open+0x1a2>
   2deb4:	e124      	b.n	2e100 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2deb6:	4b83      	ldr	r3, [pc, #524]	; (2e0c4 <f_open+0x3b0>)
   2deb8:	4798      	blx	r3
   2deba:	0003      	movs	r3, r0
   2debc:	2291      	movs	r2, #145	; 0x91
   2debe:	0092      	lsls	r2, r2, #2
   2dec0:	18ba      	adds	r2, r7, r2
   2dec2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2dec4:	2392      	movs	r3, #146	; 0x92
   2dec6:	009b      	lsls	r3, r3, #2
   2dec8:	18fb      	adds	r3, r7, r3
   2deca:	681b      	ldr	r3, [r3, #0]
   2decc:	330e      	adds	r3, #14
   2dece:	2291      	movs	r2, #145	; 0x91
   2ded0:	0092      	lsls	r2, r2, #2
   2ded2:	18ba      	adds	r2, r7, r2
   2ded4:	6812      	ldr	r2, [r2, #0]
   2ded6:	b2d2      	uxtb	r2, r2
   2ded8:	701a      	strb	r2, [r3, #0]
   2deda:	2392      	movs	r3, #146	; 0x92
   2dedc:	009b      	lsls	r3, r3, #2
   2dede:	18fb      	adds	r3, r7, r3
   2dee0:	681b      	ldr	r3, [r3, #0]
   2dee2:	330f      	adds	r3, #15
   2dee4:	2291      	movs	r2, #145	; 0x91
   2dee6:	0092      	lsls	r2, r2, #2
   2dee8:	18ba      	adds	r2, r7, r2
   2deea:	6812      	ldr	r2, [r2, #0]
   2deec:	b292      	uxth	r2, r2
   2deee:	0a12      	lsrs	r2, r2, #8
   2def0:	b292      	uxth	r2, r2
   2def2:	b2d2      	uxtb	r2, r2
   2def4:	701a      	strb	r2, [r3, #0]
   2def6:	2392      	movs	r3, #146	; 0x92
   2def8:	009b      	lsls	r3, r3, #2
   2defa:	18fb      	adds	r3, r7, r3
   2defc:	681b      	ldr	r3, [r3, #0]
   2defe:	3310      	adds	r3, #16
   2df00:	2291      	movs	r2, #145	; 0x91
   2df02:	0092      	lsls	r2, r2, #2
   2df04:	18ba      	adds	r2, r7, r2
   2df06:	6812      	ldr	r2, [r2, #0]
   2df08:	0c12      	lsrs	r2, r2, #16
   2df0a:	b2d2      	uxtb	r2, r2
   2df0c:	701a      	strb	r2, [r3, #0]
   2df0e:	2392      	movs	r3, #146	; 0x92
   2df10:	009b      	lsls	r3, r3, #2
   2df12:	18fb      	adds	r3, r7, r3
   2df14:	681b      	ldr	r3, [r3, #0]
   2df16:	3311      	adds	r3, #17
   2df18:	2291      	movs	r2, #145	; 0x91
   2df1a:	0092      	lsls	r2, r2, #2
   2df1c:	18ba      	adds	r2, r7, r2
   2df1e:	6812      	ldr	r2, [r2, #0]
   2df20:	0e12      	lsrs	r2, r2, #24
   2df22:	b2d2      	uxtb	r2, r2
   2df24:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2df26:	2392      	movs	r3, #146	; 0x92
   2df28:	009b      	lsls	r3, r3, #2
   2df2a:	18fb      	adds	r3, r7, r3
   2df2c:	681b      	ldr	r3, [r3, #0]
   2df2e:	330b      	adds	r3, #11
   2df30:	2200      	movs	r2, #0
   2df32:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2df34:	2392      	movs	r3, #146	; 0x92
   2df36:	009b      	lsls	r3, r3, #2
   2df38:	18fb      	adds	r3, r7, r3
   2df3a:	681b      	ldr	r3, [r3, #0]
   2df3c:	331c      	adds	r3, #28
   2df3e:	2200      	movs	r2, #0
   2df40:	701a      	strb	r2, [r3, #0]
   2df42:	2392      	movs	r3, #146	; 0x92
   2df44:	009b      	lsls	r3, r3, #2
   2df46:	18fb      	adds	r3, r7, r3
   2df48:	681b      	ldr	r3, [r3, #0]
   2df4a:	331d      	adds	r3, #29
   2df4c:	2200      	movs	r2, #0
   2df4e:	701a      	strb	r2, [r3, #0]
   2df50:	2392      	movs	r3, #146	; 0x92
   2df52:	009b      	lsls	r3, r3, #2
   2df54:	18fb      	adds	r3, r7, r3
   2df56:	681b      	ldr	r3, [r3, #0]
   2df58:	331e      	adds	r3, #30
   2df5a:	2200      	movs	r2, #0
   2df5c:	701a      	strb	r2, [r3, #0]
   2df5e:	2392      	movs	r3, #146	; 0x92
   2df60:	009b      	lsls	r3, r3, #2
   2df62:	18fb      	adds	r3, r7, r3
   2df64:	681b      	ldr	r3, [r3, #0]
   2df66:	331f      	adds	r3, #31
   2df68:	2200      	movs	r2, #0
   2df6a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2df6c:	2392      	movs	r3, #146	; 0x92
   2df6e:	009b      	lsls	r3, r3, #2
   2df70:	18fb      	adds	r3, r7, r3
   2df72:	681b      	ldr	r3, [r3, #0]
   2df74:	3315      	adds	r3, #21
   2df76:	781b      	ldrb	r3, [r3, #0]
   2df78:	021b      	lsls	r3, r3, #8
   2df7a:	b21a      	sxth	r2, r3
   2df7c:	2392      	movs	r3, #146	; 0x92
   2df7e:	009b      	lsls	r3, r3, #2
   2df80:	18fb      	adds	r3, r7, r3
   2df82:	681b      	ldr	r3, [r3, #0]
   2df84:	3314      	adds	r3, #20
   2df86:	781b      	ldrb	r3, [r3, #0]
   2df88:	b21b      	sxth	r3, r3
   2df8a:	4313      	orrs	r3, r2
   2df8c:	b21b      	sxth	r3, r3
   2df8e:	b29b      	uxth	r3, r3
   2df90:	041b      	lsls	r3, r3, #16
   2df92:	2292      	movs	r2, #146	; 0x92
   2df94:	0092      	lsls	r2, r2, #2
   2df96:	18ba      	adds	r2, r7, r2
   2df98:	6812      	ldr	r2, [r2, #0]
   2df9a:	321b      	adds	r2, #27
   2df9c:	7812      	ldrb	r2, [r2, #0]
   2df9e:	0212      	lsls	r2, r2, #8
   2dfa0:	b211      	sxth	r1, r2
   2dfa2:	2292      	movs	r2, #146	; 0x92
   2dfa4:	0092      	lsls	r2, r2, #2
   2dfa6:	18ba      	adds	r2, r7, r2
   2dfa8:	6812      	ldr	r2, [r2, #0]
   2dfaa:	321a      	adds	r2, #26
   2dfac:	7812      	ldrb	r2, [r2, #0]
   2dfae:	b212      	sxth	r2, r2
   2dfb0:	430a      	orrs	r2, r1
   2dfb2:	b212      	sxth	r2, r2
   2dfb4:	b292      	uxth	r2, r2
   2dfb6:	4313      	orrs	r3, r2
   2dfb8:	2290      	movs	r2, #144	; 0x90
   2dfba:	0092      	lsls	r2, r2, #2
   2dfbc:	18ba      	adds	r2, r7, r2
   2dfbe:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2dfc0:	2392      	movs	r3, #146	; 0x92
   2dfc2:	009b      	lsls	r3, r3, #2
   2dfc4:	18fb      	adds	r3, r7, r3
   2dfc6:	681b      	ldr	r3, [r3, #0]
   2dfc8:	331a      	adds	r3, #26
   2dfca:	2200      	movs	r2, #0
   2dfcc:	701a      	strb	r2, [r3, #0]
   2dfce:	2392      	movs	r3, #146	; 0x92
   2dfd0:	009b      	lsls	r3, r3, #2
   2dfd2:	18fb      	adds	r3, r7, r3
   2dfd4:	681b      	ldr	r3, [r3, #0]
   2dfd6:	331b      	adds	r3, #27
   2dfd8:	2200      	movs	r2, #0
   2dfda:	701a      	strb	r2, [r3, #0]
   2dfdc:	2392      	movs	r3, #146	; 0x92
   2dfde:	009b      	lsls	r3, r3, #2
   2dfe0:	18fb      	adds	r3, r7, r3
   2dfe2:	681b      	ldr	r3, [r3, #0]
   2dfe4:	3314      	adds	r3, #20
   2dfe6:	2200      	movs	r2, #0
   2dfe8:	701a      	strb	r2, [r3, #0]
   2dfea:	2392      	movs	r3, #146	; 0x92
   2dfec:	009b      	lsls	r3, r3, #2
   2dfee:	18fb      	adds	r3, r7, r3
   2dff0:	681b      	ldr	r3, [r3, #0]
   2dff2:	3315      	adds	r3, #21
   2dff4:	2200      	movs	r2, #0
   2dff6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2dff8:	2387      	movs	r3, #135	; 0x87
   2dffa:	009b      	lsls	r3, r3, #2
   2dffc:	18fb      	adds	r3, r7, r3
   2dffe:	681b      	ldr	r3, [r3, #0]
   2e000:	2201      	movs	r2, #1
   2e002:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e004:	2390      	movs	r3, #144	; 0x90
   2e006:	009b      	lsls	r3, r3, #2
   2e008:	18fb      	adds	r3, r7, r3
   2e00a:	681b      	ldr	r3, [r3, #0]
   2e00c:	2b00      	cmp	r3, #0
   2e00e:	d100      	bne.n	2e012 <f_open+0x2fe>
   2e010:	e076      	b.n	2e100 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e012:	2387      	movs	r3, #135	; 0x87
   2e014:	009b      	lsls	r3, r3, #2
   2e016:	18fb      	adds	r3, r7, r3
   2e018:	681b      	ldr	r3, [r3, #0]
   2e01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e01c:	2291      	movs	r2, #145	; 0x91
   2e01e:	0092      	lsls	r2, r2, #2
   2e020:	18ba      	adds	r2, r7, r2
   2e022:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e024:	2387      	movs	r3, #135	; 0x87
   2e026:	009b      	lsls	r3, r3, #2
   2e028:	18fb      	adds	r3, r7, r3
   2e02a:	681b      	ldr	r3, [r3, #0]
   2e02c:	4a21      	ldr	r2, [pc, #132]	; (2e0b4 <f_open+0x3a0>)
   2e02e:	18bc      	adds	r4, r7, r2
   2e030:	2290      	movs	r2, #144	; 0x90
   2e032:	0092      	lsls	r2, r2, #2
   2e034:	18ba      	adds	r2, r7, r2
   2e036:	6812      	ldr	r2, [r2, #0]
   2e038:	0011      	movs	r1, r2
   2e03a:	0018      	movs	r0, r3
   2e03c:	4b22      	ldr	r3, [pc, #136]	; (2e0c8 <f_open+0x3b4>)
   2e03e:	4798      	blx	r3
   2e040:	0003      	movs	r3, r0
   2e042:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e044:	4b1b      	ldr	r3, [pc, #108]	; (2e0b4 <f_open+0x3a0>)
   2e046:	18fb      	adds	r3, r7, r3
   2e048:	781b      	ldrb	r3, [r3, #0]
   2e04a:	2b00      	cmp	r3, #0
   2e04c:	d158      	bne.n	2e100 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e04e:	2387      	movs	r3, #135	; 0x87
   2e050:	009b      	lsls	r3, r3, #2
   2e052:	18fb      	adds	r3, r7, r3
   2e054:	681b      	ldr	r3, [r3, #0]
   2e056:	2290      	movs	r2, #144	; 0x90
   2e058:	0092      	lsls	r2, r2, #2
   2e05a:	18ba      	adds	r2, r7, r2
   2e05c:	6812      	ldr	r2, [r2, #0]
   2e05e:	3a01      	subs	r2, #1
   2e060:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e062:	2387      	movs	r3, #135	; 0x87
   2e064:	009b      	lsls	r3, r3, #2
   2e066:	18fb      	adds	r3, r7, r3
   2e068:	681b      	ldr	r3, [r3, #0]
   2e06a:	4a12      	ldr	r2, [pc, #72]	; (2e0b4 <f_open+0x3a0>)
   2e06c:	18bc      	adds	r4, r7, r2
   2e06e:	2291      	movs	r2, #145	; 0x91
   2e070:	0092      	lsls	r2, r2, #2
   2e072:	18ba      	adds	r2, r7, r2
   2e074:	6812      	ldr	r2, [r2, #0]
   2e076:	0011      	movs	r1, r2
   2e078:	0018      	movs	r0, r3
   2e07a:	4b14      	ldr	r3, [pc, #80]	; (2e0cc <f_open+0x3b8>)
   2e07c:	4798      	blx	r3
   2e07e:	0003      	movs	r3, r0
   2e080:	7023      	strb	r3, [r4, #0]
   2e082:	e03d      	b.n	2e100 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e084:	4b0b      	ldr	r3, [pc, #44]	; (2e0b4 <f_open+0x3a0>)
   2e086:	18fb      	adds	r3, r7, r3
   2e088:	781b      	ldrb	r3, [r3, #0]
   2e08a:	2b00      	cmp	r3, #0
   2e08c:	d138      	bne.n	2e100 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e08e:	2392      	movs	r3, #146	; 0x92
   2e090:	009b      	lsls	r3, r3, #2
   2e092:	18fb      	adds	r3, r7, r3
   2e094:	681b      	ldr	r3, [r3, #0]
   2e096:	330b      	adds	r3, #11
   2e098:	781b      	ldrb	r3, [r3, #0]
   2e09a:	001a      	movs	r2, r3
   2e09c:	2310      	movs	r3, #16
   2e09e:	4013      	ands	r3, r2
   2e0a0:	d016      	beq.n	2e0d0 <f_open+0x3bc>
				res = FR_NO_FILE;
   2e0a2:	4b04      	ldr	r3, [pc, #16]	; (2e0b4 <f_open+0x3a0>)
   2e0a4:	18fb      	adds	r3, r7, r3
   2e0a6:	2204      	movs	r2, #4
   2e0a8:	701a      	strb	r2, [r3, #0]
   2e0aa:	e029      	b.n	2e100 <f_open+0x3ec>
   2e0ac:	fffffdac 	.word	0xfffffdac
   2e0b0:	fffffdb7 	.word	0xfffffdb7
   2e0b4:	0000024f 	.word	0x0000024f
   2e0b8:	0002d66d 	.word	0x0002d66d
   2e0bc:	0002d461 	.word	0x0002d461
   2e0c0:	0002ccb1 	.word	0x0002ccb1
   2e0c4:	0002baa9 	.word	0x0002baa9
   2e0c8:	0002c22d 	.word	0x0002c22d
   2e0cc:	0002bbed 	.word	0x0002bbed
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e0d0:	4b5a      	ldr	r3, [pc, #360]	; (2e23c <f_open+0x528>)
   2e0d2:	2294      	movs	r2, #148	; 0x94
   2e0d4:	0092      	lsls	r2, r2, #2
   2e0d6:	4694      	mov	ip, r2
   2e0d8:	44bc      	add	ip, r7
   2e0da:	4463      	add	r3, ip
   2e0dc:	781b      	ldrb	r3, [r3, #0]
   2e0de:	2202      	movs	r2, #2
   2e0e0:	4013      	ands	r3, r2
   2e0e2:	d00d      	beq.n	2e100 <f_open+0x3ec>
   2e0e4:	2392      	movs	r3, #146	; 0x92
   2e0e6:	009b      	lsls	r3, r3, #2
   2e0e8:	18fb      	adds	r3, r7, r3
   2e0ea:	681b      	ldr	r3, [r3, #0]
   2e0ec:	330b      	adds	r3, #11
   2e0ee:	781b      	ldrb	r3, [r3, #0]
   2e0f0:	001a      	movs	r2, r3
   2e0f2:	2301      	movs	r3, #1
   2e0f4:	4013      	ands	r3, r2
   2e0f6:	d003      	beq.n	2e100 <f_open+0x3ec>
					res = FR_DENIED;
   2e0f8:	4b51      	ldr	r3, [pc, #324]	; (2e240 <f_open+0x52c>)
   2e0fa:	18fb      	adds	r3, r7, r3
   2e0fc:	2207      	movs	r2, #7
   2e0fe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e100:	4b4f      	ldr	r3, [pc, #316]	; (2e240 <f_open+0x52c>)
   2e102:	18fb      	adds	r3, r7, r3
   2e104:	781b      	ldrb	r3, [r3, #0]
   2e106:	2b00      	cmp	r3, #0
   2e108:	d126      	bne.n	2e158 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e10a:	4b4c      	ldr	r3, [pc, #304]	; (2e23c <f_open+0x528>)
   2e10c:	2294      	movs	r2, #148	; 0x94
   2e10e:	0092      	lsls	r2, r2, #2
   2e110:	4694      	mov	ip, r2
   2e112:	44bc      	add	ip, r7
   2e114:	4463      	add	r3, ip
   2e116:	781b      	ldrb	r3, [r3, #0]
   2e118:	2208      	movs	r2, #8
   2e11a:	4013      	ands	r3, r2
   2e11c:	d00f      	beq.n	2e13e <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e11e:	4b47      	ldr	r3, [pc, #284]	; (2e23c <f_open+0x528>)
   2e120:	2294      	movs	r2, #148	; 0x94
   2e122:	0092      	lsls	r2, r2, #2
   2e124:	4694      	mov	ip, r2
   2e126:	44bc      	add	ip, r7
   2e128:	4463      	add	r3, ip
   2e12a:	4a44      	ldr	r2, [pc, #272]	; (2e23c <f_open+0x528>)
   2e12c:	2194      	movs	r1, #148	; 0x94
   2e12e:	0089      	lsls	r1, r1, #2
   2e130:	468c      	mov	ip, r1
   2e132:	44bc      	add	ip, r7
   2e134:	4462      	add	r2, ip
   2e136:	7812      	ldrb	r2, [r2, #0]
   2e138:	2120      	movs	r1, #32
   2e13a:	430a      	orrs	r2, r1
   2e13c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e13e:	2387      	movs	r3, #135	; 0x87
   2e140:	009b      	lsls	r3, r3, #2
   2e142:	18fb      	adds	r3, r7, r3
   2e144:	681b      	ldr	r3, [r3, #0]
   2e146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e148:	68fb      	ldr	r3, [r7, #12]
   2e14a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2e14c:	68fb      	ldr	r3, [r7, #12]
   2e14e:	2292      	movs	r2, #146	; 0x92
   2e150:	0092      	lsls	r2, r2, #2
   2e152:	18ba      	adds	r2, r7, r2
   2e154:	6812      	ldr	r2, [r2, #0]
   2e156:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2e158:	4b39      	ldr	r3, [pc, #228]	; (2e240 <f_open+0x52c>)
   2e15a:	18fb      	adds	r3, r7, r3
   2e15c:	781b      	ldrb	r3, [r3, #0]
   2e15e:	2b00      	cmp	r3, #0
   2e160:	d163      	bne.n	2e22a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2e162:	68fb      	ldr	r3, [r7, #12]
   2e164:	4a35      	ldr	r2, [pc, #212]	; (2e23c <f_open+0x528>)
   2e166:	2194      	movs	r1, #148	; 0x94
   2e168:	0089      	lsls	r1, r1, #2
   2e16a:	468c      	mov	ip, r1
   2e16c:	44bc      	add	ip, r7
   2e16e:	4462      	add	r2, ip
   2e170:	7812      	ldrb	r2, [r2, #0]
   2e172:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2e174:	2392      	movs	r3, #146	; 0x92
   2e176:	009b      	lsls	r3, r3, #2
   2e178:	18fb      	adds	r3, r7, r3
   2e17a:	681b      	ldr	r3, [r3, #0]
   2e17c:	3315      	adds	r3, #21
   2e17e:	781b      	ldrb	r3, [r3, #0]
   2e180:	021b      	lsls	r3, r3, #8
   2e182:	b21a      	sxth	r2, r3
   2e184:	2392      	movs	r3, #146	; 0x92
   2e186:	009b      	lsls	r3, r3, #2
   2e188:	18fb      	adds	r3, r7, r3
   2e18a:	681b      	ldr	r3, [r3, #0]
   2e18c:	3314      	adds	r3, #20
   2e18e:	781b      	ldrb	r3, [r3, #0]
   2e190:	b21b      	sxth	r3, r3
   2e192:	4313      	orrs	r3, r2
   2e194:	b21b      	sxth	r3, r3
   2e196:	b29b      	uxth	r3, r3
   2e198:	041b      	lsls	r3, r3, #16
   2e19a:	2292      	movs	r2, #146	; 0x92
   2e19c:	0092      	lsls	r2, r2, #2
   2e19e:	18ba      	adds	r2, r7, r2
   2e1a0:	6812      	ldr	r2, [r2, #0]
   2e1a2:	321b      	adds	r2, #27
   2e1a4:	7812      	ldrb	r2, [r2, #0]
   2e1a6:	0212      	lsls	r2, r2, #8
   2e1a8:	b211      	sxth	r1, r2
   2e1aa:	2292      	movs	r2, #146	; 0x92
   2e1ac:	0092      	lsls	r2, r2, #2
   2e1ae:	18ba      	adds	r2, r7, r2
   2e1b0:	6812      	ldr	r2, [r2, #0]
   2e1b2:	321a      	adds	r2, #26
   2e1b4:	7812      	ldrb	r2, [r2, #0]
   2e1b6:	b212      	sxth	r2, r2
   2e1b8:	430a      	orrs	r2, r1
   2e1ba:	b212      	sxth	r2, r2
   2e1bc:	b292      	uxth	r2, r2
   2e1be:	431a      	orrs	r2, r3
   2e1c0:	68fb      	ldr	r3, [r7, #12]
   2e1c2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2e1c4:	2392      	movs	r3, #146	; 0x92
   2e1c6:	009b      	lsls	r3, r3, #2
   2e1c8:	18fb      	adds	r3, r7, r3
   2e1ca:	681b      	ldr	r3, [r3, #0]
   2e1cc:	331f      	adds	r3, #31
   2e1ce:	781b      	ldrb	r3, [r3, #0]
   2e1d0:	061a      	lsls	r2, r3, #24
   2e1d2:	2392      	movs	r3, #146	; 0x92
   2e1d4:	009b      	lsls	r3, r3, #2
   2e1d6:	18fb      	adds	r3, r7, r3
   2e1d8:	681b      	ldr	r3, [r3, #0]
   2e1da:	331e      	adds	r3, #30
   2e1dc:	781b      	ldrb	r3, [r3, #0]
   2e1de:	041b      	lsls	r3, r3, #16
   2e1e0:	4313      	orrs	r3, r2
   2e1e2:	2292      	movs	r2, #146	; 0x92
   2e1e4:	0092      	lsls	r2, r2, #2
   2e1e6:	18ba      	adds	r2, r7, r2
   2e1e8:	6812      	ldr	r2, [r2, #0]
   2e1ea:	321d      	adds	r2, #29
   2e1ec:	7812      	ldrb	r2, [r2, #0]
   2e1ee:	0212      	lsls	r2, r2, #8
   2e1f0:	4313      	orrs	r3, r2
   2e1f2:	2292      	movs	r2, #146	; 0x92
   2e1f4:	0092      	lsls	r2, r2, #2
   2e1f6:	18ba      	adds	r2, r7, r2
   2e1f8:	6812      	ldr	r2, [r2, #0]
   2e1fa:	321c      	adds	r2, #28
   2e1fc:	7812      	ldrb	r2, [r2, #0]
   2e1fe:	431a      	orrs	r2, r3
   2e200:	68fb      	ldr	r3, [r7, #12]
   2e202:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2e204:	68fb      	ldr	r3, [r7, #12]
   2e206:	2200      	movs	r2, #0
   2e208:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2e20a:	68fb      	ldr	r3, [r7, #12]
   2e20c:	2200      	movs	r2, #0
   2e20e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2e210:	2387      	movs	r3, #135	; 0x87
   2e212:	009b      	lsls	r3, r3, #2
   2e214:	18fb      	adds	r3, r7, r3
   2e216:	681a      	ldr	r2, [r3, #0]
   2e218:	68fb      	ldr	r3, [r7, #12]
   2e21a:	601a      	str	r2, [r3, #0]
   2e21c:	2387      	movs	r3, #135	; 0x87
   2e21e:	009b      	lsls	r3, r3, #2
   2e220:	18fb      	adds	r3, r7, r3
   2e222:	681b      	ldr	r3, [r3, #0]
   2e224:	88da      	ldrh	r2, [r3, #6]
   2e226:	68fb      	ldr	r3, [r7, #12]
   2e228:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2e22a:	4b05      	ldr	r3, [pc, #20]	; (2e240 <f_open+0x52c>)
   2e22c:	18fb      	adds	r3, r7, r3
   2e22e:	781b      	ldrb	r3, [r3, #0]
}
   2e230:	0018      	movs	r0, r3
   2e232:	46bd      	mov	sp, r7
   2e234:	2395      	movs	r3, #149	; 0x95
   2e236:	009b      	lsls	r3, r3, #2
   2e238:	449d      	add	sp, r3
   2e23a:	bd90      	pop	{r4, r7, pc}
   2e23c:	fffffdb7 	.word	0xfffffdb7
   2e240:	0000024f 	.word	0x0000024f

0002e244 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2e244:	b590      	push	{r4, r7, lr}
   2e246:	b08b      	sub	sp, #44	; 0x2c
   2e248:	af00      	add	r7, sp, #0
   2e24a:	60f8      	str	r0, [r7, #12]
   2e24c:	60b9      	str	r1, [r7, #8]
   2e24e:	607a      	str	r2, [r7, #4]
   2e250:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2e252:	68bb      	ldr	r3, [r7, #8]
   2e254:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2e256:	683b      	ldr	r3, [r7, #0]
   2e258:	2200      	movs	r2, #0
   2e25a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2e25c:	68fb      	ldr	r3, [r7, #12]
   2e25e:	681a      	ldr	r2, [r3, #0]
   2e260:	68fb      	ldr	r3, [r7, #12]
   2e262:	889b      	ldrh	r3, [r3, #4]
   2e264:	2117      	movs	r1, #23
   2e266:	187c      	adds	r4, r7, r1
   2e268:	0019      	movs	r1, r3
   2e26a:	0010      	movs	r0, r2
   2e26c:	4bc3      	ldr	r3, [pc, #780]	; (2e57c <f_write+0x338>)
   2e26e:	4798      	blx	r3
   2e270:	0003      	movs	r3, r0
   2e272:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2e274:	2317      	movs	r3, #23
   2e276:	18fb      	adds	r3, r7, r3
   2e278:	781b      	ldrb	r3, [r3, #0]
   2e27a:	2b00      	cmp	r3, #0
   2e27c:	d003      	beq.n	2e286 <f_write+0x42>
   2e27e:	2317      	movs	r3, #23
   2e280:	18fb      	adds	r3, r7, r3
   2e282:	781b      	ldrb	r3, [r3, #0]
   2e284:	e176      	b.n	2e574 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2e286:	68fb      	ldr	r3, [r7, #12]
   2e288:	799b      	ldrb	r3, [r3, #6]
   2e28a:	b25b      	sxtb	r3, r3
   2e28c:	2b00      	cmp	r3, #0
   2e28e:	da01      	bge.n	2e294 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2e290:	2302      	movs	r3, #2
   2e292:	e16f      	b.n	2e574 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2e294:	68fb      	ldr	r3, [r7, #12]
   2e296:	799b      	ldrb	r3, [r3, #6]
   2e298:	001a      	movs	r2, r3
   2e29a:	2302      	movs	r3, #2
   2e29c:	4013      	ands	r3, r2
   2e29e:	d101      	bne.n	2e2a4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2e2a0:	2307      	movs	r3, #7
   2e2a2:	e167      	b.n	2e574 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2e2a4:	68fb      	ldr	r3, [r7, #12]
   2e2a6:	68da      	ldr	r2, [r3, #12]
   2e2a8:	687b      	ldr	r3, [r7, #4]
   2e2aa:	18d2      	adds	r2, r2, r3
   2e2ac:	68fb      	ldr	r3, [r7, #12]
   2e2ae:	68db      	ldr	r3, [r3, #12]
   2e2b0:	429a      	cmp	r2, r3
   2e2b2:	d300      	bcc.n	2e2b6 <f_write+0x72>
   2e2b4:	e146      	b.n	2e544 <f_write+0x300>
   2e2b6:	2300      	movs	r3, #0
   2e2b8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2e2ba:	e143      	b.n	2e544 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2e2bc:	68fb      	ldr	r3, [r7, #12]
   2e2be:	689b      	ldr	r3, [r3, #8]
   2e2c0:	05db      	lsls	r3, r3, #23
   2e2c2:	0ddb      	lsrs	r3, r3, #23
   2e2c4:	d000      	beq.n	2e2c8 <f_write+0x84>
   2e2c6:	e0f6      	b.n	2e4b6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2e2c8:	68fb      	ldr	r3, [r7, #12]
   2e2ca:	689b      	ldr	r3, [r3, #8]
   2e2cc:	0a5b      	lsrs	r3, r3, #9
   2e2ce:	b2da      	uxtb	r2, r3
   2e2d0:	68fb      	ldr	r3, [r7, #12]
   2e2d2:	681b      	ldr	r3, [r3, #0]
   2e2d4:	789b      	ldrb	r3, [r3, #2]
   2e2d6:	3b01      	subs	r3, #1
   2e2d8:	b2d9      	uxtb	r1, r3
   2e2da:	2316      	movs	r3, #22
   2e2dc:	18fb      	adds	r3, r7, r3
   2e2de:	400a      	ands	r2, r1
   2e2e0:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2e2e2:	2316      	movs	r3, #22
   2e2e4:	18fb      	adds	r3, r7, r3
   2e2e6:	781b      	ldrb	r3, [r3, #0]
   2e2e8:	2b00      	cmp	r3, #0
   2e2ea:	d140      	bne.n	2e36e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2e2ec:	68fb      	ldr	r3, [r7, #12]
   2e2ee:	689b      	ldr	r3, [r3, #8]
   2e2f0:	2b00      	cmp	r3, #0
   2e2f2:	d111      	bne.n	2e318 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2e2f4:	68fb      	ldr	r3, [r7, #12]
   2e2f6:	691b      	ldr	r3, [r3, #16]
   2e2f8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e2fc:	2b00      	cmp	r3, #0
   2e2fe:	d115      	bne.n	2e32c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2e300:	68fb      	ldr	r3, [r7, #12]
   2e302:	681b      	ldr	r3, [r3, #0]
   2e304:	2100      	movs	r1, #0
   2e306:	0018      	movs	r0, r3
   2e308:	4b9d      	ldr	r3, [pc, #628]	; (2e580 <f_write+0x33c>)
   2e30a:	4798      	blx	r3
   2e30c:	0003      	movs	r3, r0
   2e30e:	627b      	str	r3, [r7, #36]	; 0x24
   2e310:	68fb      	ldr	r3, [r7, #12]
   2e312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e314:	611a      	str	r2, [r3, #16]
   2e316:	e009      	b.n	2e32c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2e318:	68fb      	ldr	r3, [r7, #12]
   2e31a:	681a      	ldr	r2, [r3, #0]
   2e31c:	68fb      	ldr	r3, [r7, #12]
   2e31e:	695b      	ldr	r3, [r3, #20]
   2e320:	0019      	movs	r1, r3
   2e322:	0010      	movs	r0, r2
   2e324:	4b96      	ldr	r3, [pc, #600]	; (2e580 <f_write+0x33c>)
   2e326:	4798      	blx	r3
   2e328:	0003      	movs	r3, r0
   2e32a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e32e:	2b00      	cmp	r3, #0
   2e330:	d100      	bne.n	2e334 <f_write+0xf0>
   2e332:	e10c      	b.n	2e54e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e336:	2b01      	cmp	r3, #1
   2e338:	d109      	bne.n	2e34e <f_write+0x10a>
   2e33a:	68fb      	ldr	r3, [r7, #12]
   2e33c:	799b      	ldrb	r3, [r3, #6]
   2e33e:	2280      	movs	r2, #128	; 0x80
   2e340:	4252      	negs	r2, r2
   2e342:	4313      	orrs	r3, r2
   2e344:	b2da      	uxtb	r2, r3
   2e346:	68fb      	ldr	r3, [r7, #12]
   2e348:	719a      	strb	r2, [r3, #6]
   2e34a:	2302      	movs	r3, #2
   2e34c:	e112      	b.n	2e574 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e350:	3301      	adds	r3, #1
   2e352:	d109      	bne.n	2e368 <f_write+0x124>
   2e354:	68fb      	ldr	r3, [r7, #12]
   2e356:	799b      	ldrb	r3, [r3, #6]
   2e358:	2280      	movs	r2, #128	; 0x80
   2e35a:	4252      	negs	r2, r2
   2e35c:	4313      	orrs	r3, r2
   2e35e:	b2da      	uxtb	r2, r3
   2e360:	68fb      	ldr	r3, [r7, #12]
   2e362:	719a      	strb	r2, [r3, #6]
   2e364:	2301      	movs	r3, #1
   2e366:	e105      	b.n	2e574 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2e368:	68fb      	ldr	r3, [r7, #12]
   2e36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e36c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2e36e:	68fb      	ldr	r3, [r7, #12]
   2e370:	681b      	ldr	r3, [r3, #0]
   2e372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e374:	68fb      	ldr	r3, [r7, #12]
   2e376:	699b      	ldr	r3, [r3, #24]
   2e378:	429a      	cmp	r2, r3
   2e37a:	d111      	bne.n	2e3a0 <f_write+0x15c>
   2e37c:	68fb      	ldr	r3, [r7, #12]
   2e37e:	681b      	ldr	r3, [r3, #0]
   2e380:	2100      	movs	r1, #0
   2e382:	0018      	movs	r0, r3
   2e384:	4b7f      	ldr	r3, [pc, #508]	; (2e584 <f_write+0x340>)
   2e386:	4798      	blx	r3
   2e388:	1e03      	subs	r3, r0, #0
   2e38a:	d009      	beq.n	2e3a0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2e38c:	68fb      	ldr	r3, [r7, #12]
   2e38e:	799b      	ldrb	r3, [r3, #6]
   2e390:	2280      	movs	r2, #128	; 0x80
   2e392:	4252      	negs	r2, r2
   2e394:	4313      	orrs	r3, r2
   2e396:	b2da      	uxtb	r2, r3
   2e398:	68fb      	ldr	r3, [r7, #12]
   2e39a:	719a      	strb	r2, [r3, #6]
   2e39c:	2301      	movs	r3, #1
   2e39e:	e0e9      	b.n	2e574 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2e3a0:	68fb      	ldr	r3, [r7, #12]
   2e3a2:	681a      	ldr	r2, [r3, #0]
   2e3a4:	68fb      	ldr	r3, [r7, #12]
   2e3a6:	695b      	ldr	r3, [r3, #20]
   2e3a8:	0019      	movs	r1, r3
   2e3aa:	0010      	movs	r0, r2
   2e3ac:	4b76      	ldr	r3, [pc, #472]	; (2e588 <f_write+0x344>)
   2e3ae:	4798      	blx	r3
   2e3b0:	0003      	movs	r3, r0
   2e3b2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2e3b4:	693b      	ldr	r3, [r7, #16]
   2e3b6:	2b00      	cmp	r3, #0
   2e3b8:	d109      	bne.n	2e3ce <f_write+0x18a>
   2e3ba:	68fb      	ldr	r3, [r7, #12]
   2e3bc:	799b      	ldrb	r3, [r3, #6]
   2e3be:	2280      	movs	r2, #128	; 0x80
   2e3c0:	4252      	negs	r2, r2
   2e3c2:	4313      	orrs	r3, r2
   2e3c4:	b2da      	uxtb	r2, r3
   2e3c6:	68fb      	ldr	r3, [r7, #12]
   2e3c8:	719a      	strb	r2, [r3, #6]
   2e3ca:	2302      	movs	r3, #2
   2e3cc:	e0d2      	b.n	2e574 <f_write+0x330>
			sect += csect;
   2e3ce:	2316      	movs	r3, #22
   2e3d0:	18fb      	adds	r3, r7, r3
   2e3d2:	781b      	ldrb	r3, [r3, #0]
   2e3d4:	693a      	ldr	r2, [r7, #16]
   2e3d6:	18d3      	adds	r3, r2, r3
   2e3d8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2e3da:	687b      	ldr	r3, [r7, #4]
   2e3dc:	0a5b      	lsrs	r3, r3, #9
   2e3de:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2e3e0:	69fb      	ldr	r3, [r7, #28]
   2e3e2:	2b00      	cmp	r3, #0
   2e3e4:	d048      	beq.n	2e478 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2e3e6:	2316      	movs	r3, #22
   2e3e8:	18fb      	adds	r3, r7, r3
   2e3ea:	781a      	ldrb	r2, [r3, #0]
   2e3ec:	69fb      	ldr	r3, [r7, #28]
   2e3ee:	18d2      	adds	r2, r2, r3
   2e3f0:	68fb      	ldr	r3, [r7, #12]
   2e3f2:	681b      	ldr	r3, [r3, #0]
   2e3f4:	789b      	ldrb	r3, [r3, #2]
   2e3f6:	429a      	cmp	r2, r3
   2e3f8:	d908      	bls.n	2e40c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2e3fa:	68fb      	ldr	r3, [r7, #12]
   2e3fc:	681b      	ldr	r3, [r3, #0]
   2e3fe:	789b      	ldrb	r3, [r3, #2]
   2e400:	001a      	movs	r2, r3
   2e402:	2316      	movs	r3, #22
   2e404:	18fb      	adds	r3, r7, r3
   2e406:	781b      	ldrb	r3, [r3, #0]
   2e408:	1ad3      	subs	r3, r2, r3
   2e40a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2e40c:	68fb      	ldr	r3, [r7, #12]
   2e40e:	681b      	ldr	r3, [r3, #0]
   2e410:	7858      	ldrb	r0, [r3, #1]
   2e412:	69fb      	ldr	r3, [r7, #28]
   2e414:	b2db      	uxtb	r3, r3
   2e416:	693a      	ldr	r2, [r7, #16]
   2e418:	69b9      	ldr	r1, [r7, #24]
   2e41a:	4c5c      	ldr	r4, [pc, #368]	; (2e58c <f_write+0x348>)
   2e41c:	47a0      	blx	r4
   2e41e:	1e03      	subs	r3, r0, #0
   2e420:	d009      	beq.n	2e436 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2e422:	68fb      	ldr	r3, [r7, #12]
   2e424:	799b      	ldrb	r3, [r3, #6]
   2e426:	2280      	movs	r2, #128	; 0x80
   2e428:	4252      	negs	r2, r2
   2e42a:	4313      	orrs	r3, r2
   2e42c:	b2da      	uxtb	r2, r3
   2e42e:	68fb      	ldr	r3, [r7, #12]
   2e430:	719a      	strb	r2, [r3, #6]
   2e432:	2301      	movs	r3, #1
   2e434:	e09e      	b.n	2e574 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2e436:	68fb      	ldr	r3, [r7, #12]
   2e438:	681b      	ldr	r3, [r3, #0]
   2e43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e43c:	693b      	ldr	r3, [r7, #16]
   2e43e:	1ad2      	subs	r2, r2, r3
   2e440:	69fb      	ldr	r3, [r7, #28]
   2e442:	429a      	cmp	r2, r3
   2e444:	d214      	bcs.n	2e470 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2e446:	68fb      	ldr	r3, [r7, #12]
   2e448:	681b      	ldr	r3, [r3, #0]
   2e44a:	3330      	adds	r3, #48	; 0x30
   2e44c:	0018      	movs	r0, r3
   2e44e:	68fb      	ldr	r3, [r7, #12]
   2e450:	681b      	ldr	r3, [r3, #0]
   2e452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e454:	693b      	ldr	r3, [r7, #16]
   2e456:	1ad3      	subs	r3, r2, r3
   2e458:	025b      	lsls	r3, r3, #9
   2e45a:	69ba      	ldr	r2, [r7, #24]
   2e45c:	18d1      	adds	r1, r2, r3
   2e45e:	2380      	movs	r3, #128	; 0x80
   2e460:	009b      	lsls	r3, r3, #2
   2e462:	001a      	movs	r2, r3
   2e464:	4b4a      	ldr	r3, [pc, #296]	; (2e590 <f_write+0x34c>)
   2e466:	4798      	blx	r3
					fp->fs->wflag = 0;
   2e468:	68fb      	ldr	r3, [r7, #12]
   2e46a:	681b      	ldr	r3, [r3, #0]
   2e46c:	2200      	movs	r2, #0
   2e46e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2e470:	69fb      	ldr	r3, [r7, #28]
   2e472:	025b      	lsls	r3, r3, #9
   2e474:	623b      	str	r3, [r7, #32]
				continue;
   2e476:	e051      	b.n	2e51c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2e478:	68fb      	ldr	r3, [r7, #12]
   2e47a:	689a      	ldr	r2, [r3, #8]
   2e47c:	68fb      	ldr	r3, [r7, #12]
   2e47e:	68db      	ldr	r3, [r3, #12]
   2e480:	429a      	cmp	r2, r3
   2e482:	d315      	bcc.n	2e4b0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2e484:	68fb      	ldr	r3, [r7, #12]
   2e486:	681b      	ldr	r3, [r3, #0]
   2e488:	2100      	movs	r1, #0
   2e48a:	0018      	movs	r0, r3
   2e48c:	4b3d      	ldr	r3, [pc, #244]	; (2e584 <f_write+0x340>)
   2e48e:	4798      	blx	r3
   2e490:	1e03      	subs	r3, r0, #0
   2e492:	d009      	beq.n	2e4a8 <f_write+0x264>
   2e494:	68fb      	ldr	r3, [r7, #12]
   2e496:	799b      	ldrb	r3, [r3, #6]
   2e498:	2280      	movs	r2, #128	; 0x80
   2e49a:	4252      	negs	r2, r2
   2e49c:	4313      	orrs	r3, r2
   2e49e:	b2da      	uxtb	r2, r3
   2e4a0:	68fb      	ldr	r3, [r7, #12]
   2e4a2:	719a      	strb	r2, [r3, #6]
   2e4a4:	2301      	movs	r3, #1
   2e4a6:	e065      	b.n	2e574 <f_write+0x330>
				fp->fs->winsect = sect;
   2e4a8:	68fb      	ldr	r3, [r7, #12]
   2e4aa:	681b      	ldr	r3, [r3, #0]
   2e4ac:	693a      	ldr	r2, [r7, #16]
   2e4ae:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2e4b0:	68fb      	ldr	r3, [r7, #12]
   2e4b2:	693a      	ldr	r2, [r7, #16]
   2e4b4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2e4b6:	68fb      	ldr	r3, [r7, #12]
   2e4b8:	689b      	ldr	r3, [r3, #8]
   2e4ba:	05db      	lsls	r3, r3, #23
   2e4bc:	0ddb      	lsrs	r3, r3, #23
   2e4be:	2280      	movs	r2, #128	; 0x80
   2e4c0:	0092      	lsls	r2, r2, #2
   2e4c2:	1ad3      	subs	r3, r2, r3
   2e4c4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2e4c6:	6a3a      	ldr	r2, [r7, #32]
   2e4c8:	687b      	ldr	r3, [r7, #4]
   2e4ca:	429a      	cmp	r2, r3
   2e4cc:	d901      	bls.n	2e4d2 <f_write+0x28e>
   2e4ce:	687b      	ldr	r3, [r7, #4]
   2e4d0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2e4d2:	68fb      	ldr	r3, [r7, #12]
   2e4d4:	681a      	ldr	r2, [r3, #0]
   2e4d6:	68fb      	ldr	r3, [r7, #12]
   2e4d8:	699b      	ldr	r3, [r3, #24]
   2e4da:	0019      	movs	r1, r3
   2e4dc:	0010      	movs	r0, r2
   2e4de:	4b29      	ldr	r3, [pc, #164]	; (2e584 <f_write+0x340>)
   2e4e0:	4798      	blx	r3
   2e4e2:	1e03      	subs	r3, r0, #0
   2e4e4:	d009      	beq.n	2e4fa <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2e4e6:	68fb      	ldr	r3, [r7, #12]
   2e4e8:	799b      	ldrb	r3, [r3, #6]
   2e4ea:	2280      	movs	r2, #128	; 0x80
   2e4ec:	4252      	negs	r2, r2
   2e4ee:	4313      	orrs	r3, r2
   2e4f0:	b2da      	uxtb	r2, r3
   2e4f2:	68fb      	ldr	r3, [r7, #12]
   2e4f4:	719a      	strb	r2, [r3, #6]
   2e4f6:	2301      	movs	r3, #1
   2e4f8:	e03c      	b.n	2e574 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2e4fa:	68fb      	ldr	r3, [r7, #12]
   2e4fc:	681a      	ldr	r2, [r3, #0]
   2e4fe:	68fb      	ldr	r3, [r7, #12]
   2e500:	689b      	ldr	r3, [r3, #8]
   2e502:	05db      	lsls	r3, r3, #23
   2e504:	0ddb      	lsrs	r3, r3, #23
   2e506:	3330      	adds	r3, #48	; 0x30
   2e508:	18d3      	adds	r3, r2, r3
   2e50a:	6a3a      	ldr	r2, [r7, #32]
   2e50c:	69b9      	ldr	r1, [r7, #24]
   2e50e:	0018      	movs	r0, r3
   2e510:	4b1f      	ldr	r3, [pc, #124]	; (2e590 <f_write+0x34c>)
   2e512:	4798      	blx	r3
		fp->fs->wflag = 1;
   2e514:	68fb      	ldr	r3, [r7, #12]
   2e516:	681b      	ldr	r3, [r3, #0]
   2e518:	2201      	movs	r2, #1
   2e51a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2e51c:	69ba      	ldr	r2, [r7, #24]
   2e51e:	6a3b      	ldr	r3, [r7, #32]
   2e520:	18d3      	adds	r3, r2, r3
   2e522:	61bb      	str	r3, [r7, #24]
   2e524:	68fb      	ldr	r3, [r7, #12]
   2e526:	689a      	ldr	r2, [r3, #8]
   2e528:	6a3b      	ldr	r3, [r7, #32]
   2e52a:	18d2      	adds	r2, r2, r3
   2e52c:	68fb      	ldr	r3, [r7, #12]
   2e52e:	609a      	str	r2, [r3, #8]
   2e530:	683b      	ldr	r3, [r7, #0]
   2e532:	681a      	ldr	r2, [r3, #0]
   2e534:	6a3b      	ldr	r3, [r7, #32]
   2e536:	18d2      	adds	r2, r2, r3
   2e538:	683b      	ldr	r3, [r7, #0]
   2e53a:	601a      	str	r2, [r3, #0]
   2e53c:	687a      	ldr	r2, [r7, #4]
   2e53e:	6a3b      	ldr	r3, [r7, #32]
   2e540:	1ad3      	subs	r3, r2, r3
   2e542:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2e544:	687b      	ldr	r3, [r7, #4]
   2e546:	2b00      	cmp	r3, #0
   2e548:	d000      	beq.n	2e54c <f_write+0x308>
   2e54a:	e6b7      	b.n	2e2bc <f_write+0x78>
   2e54c:	e000      	b.n	2e550 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e54e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2e550:	68fb      	ldr	r3, [r7, #12]
   2e552:	689a      	ldr	r2, [r3, #8]
   2e554:	68fb      	ldr	r3, [r7, #12]
   2e556:	68db      	ldr	r3, [r3, #12]
   2e558:	429a      	cmp	r2, r3
   2e55a:	d903      	bls.n	2e564 <f_write+0x320>
   2e55c:	68fb      	ldr	r3, [r7, #12]
   2e55e:	689a      	ldr	r2, [r3, #8]
   2e560:	68fb      	ldr	r3, [r7, #12]
   2e562:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2e564:	68fb      	ldr	r3, [r7, #12]
   2e566:	799b      	ldrb	r3, [r3, #6]
   2e568:	2220      	movs	r2, #32
   2e56a:	4313      	orrs	r3, r2
   2e56c:	b2da      	uxtb	r2, r3
   2e56e:	68fb      	ldr	r3, [r7, #12]
   2e570:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e572:	2300      	movs	r3, #0
}
   2e574:	0018      	movs	r0, r3
   2e576:	46bd      	mov	sp, r7
   2e578:	b00b      	add	sp, #44	; 0x2c
   2e57a:	bd90      	pop	{r4, r7, pc}
   2e57c:	0002dc69 	.word	0x0002dc69
   2e580:	0002c2f5 	.word	0x0002c2f5
   2e584:	0002bbed 	.word	0x0002bbed
   2e588:	0002be4d 	.word	0x0002be4d
   2e58c:	0002b8d9 	.word	0x0002b8d9
   2e590:	0002bb09 	.word	0x0002bb09

0002e594 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e594:	b590      	push	{r4, r7, lr}
   2e596:	b087      	sub	sp, #28
   2e598:	af00      	add	r7, sp, #0
   2e59a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e59c:	687b      	ldr	r3, [r7, #4]
   2e59e:	681a      	ldr	r2, [r3, #0]
   2e5a0:	687b      	ldr	r3, [r7, #4]
   2e5a2:	889b      	ldrh	r3, [r3, #4]
   2e5a4:	2117      	movs	r1, #23
   2e5a6:	187c      	adds	r4, r7, r1
   2e5a8:	0019      	movs	r1, r3
   2e5aa:	0010      	movs	r0, r2
   2e5ac:	4b55      	ldr	r3, [pc, #340]	; (2e704 <f_sync+0x170>)
   2e5ae:	4798      	blx	r3
   2e5b0:	0003      	movs	r3, r0
   2e5b2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e5b4:	2317      	movs	r3, #23
   2e5b6:	18fb      	adds	r3, r7, r3
   2e5b8:	781b      	ldrb	r3, [r3, #0]
   2e5ba:	2b00      	cmp	r3, #0
   2e5bc:	d000      	beq.n	2e5c0 <f_sync+0x2c>
   2e5be:	e09a      	b.n	2e6f6 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e5c0:	687b      	ldr	r3, [r7, #4]
   2e5c2:	799b      	ldrb	r3, [r3, #6]
   2e5c4:	001a      	movs	r2, r3
   2e5c6:	2320      	movs	r3, #32
   2e5c8:	4013      	ands	r3, r2
   2e5ca:	d100      	bne.n	2e5ce <f_sync+0x3a>
   2e5cc:	e093      	b.n	2e6f6 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e5ce:	687b      	ldr	r3, [r7, #4]
   2e5d0:	681a      	ldr	r2, [r3, #0]
   2e5d2:	687b      	ldr	r3, [r7, #4]
   2e5d4:	69db      	ldr	r3, [r3, #28]
   2e5d6:	2117      	movs	r1, #23
   2e5d8:	187c      	adds	r4, r7, r1
   2e5da:	0019      	movs	r1, r3
   2e5dc:	0010      	movs	r0, r2
   2e5de:	4b4a      	ldr	r3, [pc, #296]	; (2e708 <f_sync+0x174>)
   2e5e0:	4798      	blx	r3
   2e5e2:	0003      	movs	r3, r0
   2e5e4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e5e6:	2317      	movs	r3, #23
   2e5e8:	18fb      	adds	r3, r7, r3
   2e5ea:	781b      	ldrb	r3, [r3, #0]
   2e5ec:	2b00      	cmp	r3, #0
   2e5ee:	d000      	beq.n	2e5f2 <f_sync+0x5e>
   2e5f0:	e081      	b.n	2e6f6 <f_sync+0x162>
				dir = fp->dir_ptr;
   2e5f2:	687b      	ldr	r3, [r7, #4]
   2e5f4:	6a1b      	ldr	r3, [r3, #32]
   2e5f6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e5f8:	693b      	ldr	r3, [r7, #16]
   2e5fa:	330b      	adds	r3, #11
   2e5fc:	693a      	ldr	r2, [r7, #16]
   2e5fe:	320b      	adds	r2, #11
   2e600:	7812      	ldrb	r2, [r2, #0]
   2e602:	2120      	movs	r1, #32
   2e604:	430a      	orrs	r2, r1
   2e606:	b2d2      	uxtb	r2, r2
   2e608:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e60a:	693b      	ldr	r3, [r7, #16]
   2e60c:	331c      	adds	r3, #28
   2e60e:	001a      	movs	r2, r3
   2e610:	687b      	ldr	r3, [r7, #4]
   2e612:	68db      	ldr	r3, [r3, #12]
   2e614:	b2db      	uxtb	r3, r3
   2e616:	7013      	strb	r3, [r2, #0]
   2e618:	693b      	ldr	r3, [r7, #16]
   2e61a:	331d      	adds	r3, #29
   2e61c:	001a      	movs	r2, r3
   2e61e:	687b      	ldr	r3, [r7, #4]
   2e620:	68db      	ldr	r3, [r3, #12]
   2e622:	b29b      	uxth	r3, r3
   2e624:	0a1b      	lsrs	r3, r3, #8
   2e626:	b29b      	uxth	r3, r3
   2e628:	b2db      	uxtb	r3, r3
   2e62a:	7013      	strb	r3, [r2, #0]
   2e62c:	693b      	ldr	r3, [r7, #16]
   2e62e:	331e      	adds	r3, #30
   2e630:	001a      	movs	r2, r3
   2e632:	687b      	ldr	r3, [r7, #4]
   2e634:	68db      	ldr	r3, [r3, #12]
   2e636:	0c1b      	lsrs	r3, r3, #16
   2e638:	b2db      	uxtb	r3, r3
   2e63a:	7013      	strb	r3, [r2, #0]
   2e63c:	693b      	ldr	r3, [r7, #16]
   2e63e:	331f      	adds	r3, #31
   2e640:	001a      	movs	r2, r3
   2e642:	687b      	ldr	r3, [r7, #4]
   2e644:	68db      	ldr	r3, [r3, #12]
   2e646:	0e1b      	lsrs	r3, r3, #24
   2e648:	b2db      	uxtb	r3, r3
   2e64a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e64c:	693b      	ldr	r3, [r7, #16]
   2e64e:	331a      	adds	r3, #26
   2e650:	001a      	movs	r2, r3
   2e652:	687b      	ldr	r3, [r7, #4]
   2e654:	691b      	ldr	r3, [r3, #16]
   2e656:	b2db      	uxtb	r3, r3
   2e658:	7013      	strb	r3, [r2, #0]
   2e65a:	693b      	ldr	r3, [r7, #16]
   2e65c:	331b      	adds	r3, #27
   2e65e:	001a      	movs	r2, r3
   2e660:	687b      	ldr	r3, [r7, #4]
   2e662:	691b      	ldr	r3, [r3, #16]
   2e664:	b29b      	uxth	r3, r3
   2e666:	0a1b      	lsrs	r3, r3, #8
   2e668:	b29b      	uxth	r3, r3
   2e66a:	b2db      	uxtb	r3, r3
   2e66c:	7013      	strb	r3, [r2, #0]
   2e66e:	693b      	ldr	r3, [r7, #16]
   2e670:	3314      	adds	r3, #20
   2e672:	001a      	movs	r2, r3
   2e674:	687b      	ldr	r3, [r7, #4]
   2e676:	691b      	ldr	r3, [r3, #16]
   2e678:	0c1b      	lsrs	r3, r3, #16
   2e67a:	b2db      	uxtb	r3, r3
   2e67c:	7013      	strb	r3, [r2, #0]
   2e67e:	693b      	ldr	r3, [r7, #16]
   2e680:	3315      	adds	r3, #21
   2e682:	001a      	movs	r2, r3
   2e684:	687b      	ldr	r3, [r7, #4]
   2e686:	691b      	ldr	r3, [r3, #16]
   2e688:	0c1b      	lsrs	r3, r3, #16
   2e68a:	b29b      	uxth	r3, r3
   2e68c:	0a1b      	lsrs	r3, r3, #8
   2e68e:	b29b      	uxth	r3, r3
   2e690:	b2db      	uxtb	r3, r3
   2e692:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e694:	4b1d      	ldr	r3, [pc, #116]	; (2e70c <f_sync+0x178>)
   2e696:	4798      	blx	r3
   2e698:	0003      	movs	r3, r0
   2e69a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e69c:	693b      	ldr	r3, [r7, #16]
   2e69e:	3316      	adds	r3, #22
   2e6a0:	68fa      	ldr	r2, [r7, #12]
   2e6a2:	b2d2      	uxtb	r2, r2
   2e6a4:	701a      	strb	r2, [r3, #0]
   2e6a6:	693b      	ldr	r3, [r7, #16]
   2e6a8:	3317      	adds	r3, #23
   2e6aa:	68fa      	ldr	r2, [r7, #12]
   2e6ac:	b292      	uxth	r2, r2
   2e6ae:	0a12      	lsrs	r2, r2, #8
   2e6b0:	b292      	uxth	r2, r2
   2e6b2:	b2d2      	uxtb	r2, r2
   2e6b4:	701a      	strb	r2, [r3, #0]
   2e6b6:	693b      	ldr	r3, [r7, #16]
   2e6b8:	3318      	adds	r3, #24
   2e6ba:	68fa      	ldr	r2, [r7, #12]
   2e6bc:	0c12      	lsrs	r2, r2, #16
   2e6be:	b2d2      	uxtb	r2, r2
   2e6c0:	701a      	strb	r2, [r3, #0]
   2e6c2:	693b      	ldr	r3, [r7, #16]
   2e6c4:	3319      	adds	r3, #25
   2e6c6:	68fa      	ldr	r2, [r7, #12]
   2e6c8:	0e12      	lsrs	r2, r2, #24
   2e6ca:	b2d2      	uxtb	r2, r2
   2e6cc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e6ce:	687b      	ldr	r3, [r7, #4]
   2e6d0:	799b      	ldrb	r3, [r3, #6]
   2e6d2:	2220      	movs	r2, #32
   2e6d4:	4393      	bics	r3, r2
   2e6d6:	b2da      	uxtb	r2, r3
   2e6d8:	687b      	ldr	r3, [r7, #4]
   2e6da:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e6dc:	687b      	ldr	r3, [r7, #4]
   2e6de:	681b      	ldr	r3, [r3, #0]
   2e6e0:	2201      	movs	r2, #1
   2e6e2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e6e4:	687b      	ldr	r3, [r7, #4]
   2e6e6:	681b      	ldr	r3, [r3, #0]
   2e6e8:	2217      	movs	r2, #23
   2e6ea:	18bc      	adds	r4, r7, r2
   2e6ec:	0018      	movs	r0, r3
   2e6ee:	4b08      	ldr	r3, [pc, #32]	; (2e710 <f_sync+0x17c>)
   2e6f0:	4798      	blx	r3
   2e6f2:	0003      	movs	r3, r0
   2e6f4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e6f6:	2317      	movs	r3, #23
   2e6f8:	18fb      	adds	r3, r7, r3
   2e6fa:	781b      	ldrb	r3, [r3, #0]
}
   2e6fc:	0018      	movs	r0, r3
   2e6fe:	46bd      	mov	sp, r7
   2e700:	b007      	add	sp, #28
   2e702:	bd90      	pop	{r4, r7, pc}
   2e704:	0002dc69 	.word	0x0002dc69
   2e708:	0002bbed 	.word	0x0002bbed
   2e70c:	0002baa9 	.word	0x0002baa9
   2e710:	0002bcb5 	.word	0x0002bcb5

0002e714 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e714:	b590      	push	{r4, r7, lr}
   2e716:	b085      	sub	sp, #20
   2e718:	af00      	add	r7, sp, #0
   2e71a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e71c:	230f      	movs	r3, #15
   2e71e:	18fc      	adds	r4, r7, r3
   2e720:	687b      	ldr	r3, [r7, #4]
   2e722:	0018      	movs	r0, r3
   2e724:	4b09      	ldr	r3, [pc, #36]	; (2e74c <f_close+0x38>)
   2e726:	4798      	blx	r3
   2e728:	0003      	movs	r3, r0
   2e72a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e72c:	230f      	movs	r3, #15
   2e72e:	18fb      	adds	r3, r7, r3
   2e730:	781b      	ldrb	r3, [r3, #0]
   2e732:	2b00      	cmp	r3, #0
   2e734:	d102      	bne.n	2e73c <f_close+0x28>
   2e736:	687b      	ldr	r3, [r7, #4]
   2e738:	2200      	movs	r2, #0
   2e73a:	601a      	str	r2, [r3, #0]
	return res;
   2e73c:	230f      	movs	r3, #15
   2e73e:	18fb      	adds	r3, r7, r3
   2e740:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e742:	0018      	movs	r0, r3
   2e744:	46bd      	mov	sp, r7
   2e746:	b005      	add	sp, #20
   2e748:	bd90      	pop	{r4, r7, pc}
   2e74a:	46c0      	nop			; (mov r8, r8)
   2e74c:	0002e595 	.word	0x0002e595

0002e750 <ff_convert>:
   2e750:	b580      	push	{r7, lr}
   2e752:	b084      	sub	sp, #16
   2e754:	af00      	add	r7, sp, #0
   2e756:	0002      	movs	r2, r0
   2e758:	6039      	str	r1, [r7, #0]
   2e75a:	1dbb      	adds	r3, r7, #6
   2e75c:	801a      	strh	r2, [r3, #0]
   2e75e:	1dbb      	adds	r3, r7, #6
   2e760:	881b      	ldrh	r3, [r3, #0]
   2e762:	2b7f      	cmp	r3, #127	; 0x7f
   2e764:	d805      	bhi.n	2e772 <ff_convert+0x22>
   2e766:	230e      	movs	r3, #14
   2e768:	18fb      	adds	r3, r7, r3
   2e76a:	1dba      	adds	r2, r7, #6
   2e76c:	8812      	ldrh	r2, [r2, #0]
   2e76e:	801a      	strh	r2, [r3, #0]
   2e770:	e03a      	b.n	2e7e8 <ff_convert+0x98>
   2e772:	683b      	ldr	r3, [r7, #0]
   2e774:	2b00      	cmp	r3, #0
   2e776:	d010      	beq.n	2e79a <ff_convert+0x4a>
   2e778:	1dbb      	adds	r3, r7, #6
   2e77a:	881b      	ldrh	r3, [r3, #0]
   2e77c:	2bff      	cmp	r3, #255	; 0xff
   2e77e:	d807      	bhi.n	2e790 <ff_convert+0x40>
   2e780:	1dbb      	adds	r3, r7, #6
   2e782:	881b      	ldrh	r3, [r3, #0]
   2e784:	3b80      	subs	r3, #128	; 0x80
   2e786:	001a      	movs	r2, r3
   2e788:	4b1b      	ldr	r3, [pc, #108]	; (2e7f8 <ff_convert+0xa8>)
   2e78a:	0052      	lsls	r2, r2, #1
   2e78c:	5ad2      	ldrh	r2, [r2, r3]
   2e78e:	e000      	b.n	2e792 <ff_convert+0x42>
   2e790:	2200      	movs	r2, #0
   2e792:	230e      	movs	r3, #14
   2e794:	18fb      	adds	r3, r7, r3
   2e796:	801a      	strh	r2, [r3, #0]
   2e798:	e026      	b.n	2e7e8 <ff_convert+0x98>
   2e79a:	230e      	movs	r3, #14
   2e79c:	18fb      	adds	r3, r7, r3
   2e79e:	2200      	movs	r2, #0
   2e7a0:	801a      	strh	r2, [r3, #0]
   2e7a2:	e010      	b.n	2e7c6 <ff_convert+0x76>
   2e7a4:	230e      	movs	r3, #14
   2e7a6:	18fb      	adds	r3, r7, r3
   2e7a8:	881a      	ldrh	r2, [r3, #0]
   2e7aa:	4b13      	ldr	r3, [pc, #76]	; (2e7f8 <ff_convert+0xa8>)
   2e7ac:	0052      	lsls	r2, r2, #1
   2e7ae:	5ad3      	ldrh	r3, [r2, r3]
   2e7b0:	1dba      	adds	r2, r7, #6
   2e7b2:	8812      	ldrh	r2, [r2, #0]
   2e7b4:	429a      	cmp	r2, r3
   2e7b6:	d00c      	beq.n	2e7d2 <ff_convert+0x82>
   2e7b8:	230e      	movs	r3, #14
   2e7ba:	18fb      	adds	r3, r7, r3
   2e7bc:	881a      	ldrh	r2, [r3, #0]
   2e7be:	230e      	movs	r3, #14
   2e7c0:	18fb      	adds	r3, r7, r3
   2e7c2:	3201      	adds	r2, #1
   2e7c4:	801a      	strh	r2, [r3, #0]
   2e7c6:	230e      	movs	r3, #14
   2e7c8:	18fb      	adds	r3, r7, r3
   2e7ca:	881b      	ldrh	r3, [r3, #0]
   2e7cc:	2b7f      	cmp	r3, #127	; 0x7f
   2e7ce:	d9e9      	bls.n	2e7a4 <ff_convert+0x54>
   2e7d0:	e000      	b.n	2e7d4 <ff_convert+0x84>
   2e7d2:	46c0      	nop			; (mov r8, r8)
   2e7d4:	230e      	movs	r3, #14
   2e7d6:	18fb      	adds	r3, r7, r3
   2e7d8:	881b      	ldrh	r3, [r3, #0]
   2e7da:	3380      	adds	r3, #128	; 0x80
   2e7dc:	b29a      	uxth	r2, r3
   2e7de:	230e      	movs	r3, #14
   2e7e0:	18fb      	adds	r3, r7, r3
   2e7e2:	21ff      	movs	r1, #255	; 0xff
   2e7e4:	400a      	ands	r2, r1
   2e7e6:	801a      	strh	r2, [r3, #0]
   2e7e8:	230e      	movs	r3, #14
   2e7ea:	18fb      	adds	r3, r7, r3
   2e7ec:	881b      	ldrh	r3, [r3, #0]
   2e7ee:	0018      	movs	r0, r3
   2e7f0:	46bd      	mov	sp, r7
   2e7f2:	b004      	add	sp, #16
   2e7f4:	bd80      	pop	{r7, pc}
   2e7f6:	46c0      	nop			; (mov r8, r8)
   2e7f8:	00039c6c 	.word	0x00039c6c

0002e7fc <ff_wtoupper>:
   2e7fc:	b580      	push	{r7, lr}
   2e7fe:	b084      	sub	sp, #16
   2e800:	af00      	add	r7, sp, #0
   2e802:	0002      	movs	r2, r0
   2e804:	1dbb      	adds	r3, r7, #6
   2e806:	801a      	strh	r2, [r3, #0]
   2e808:	2300      	movs	r3, #0
   2e80a:	60fb      	str	r3, [r7, #12]
   2e80c:	e002      	b.n	2e814 <ff_wtoupper+0x18>
   2e80e:	68fb      	ldr	r3, [r7, #12]
   2e810:	3301      	adds	r3, #1
   2e812:	60fb      	str	r3, [r7, #12]
   2e814:	4b0f      	ldr	r3, [pc, #60]	; (2e854 <ff_wtoupper+0x58>)
   2e816:	68fa      	ldr	r2, [r7, #12]
   2e818:	0052      	lsls	r2, r2, #1
   2e81a:	5ad3      	ldrh	r3, [r2, r3]
   2e81c:	2b00      	cmp	r3, #0
   2e81e:	d007      	beq.n	2e830 <ff_wtoupper+0x34>
   2e820:	4b0c      	ldr	r3, [pc, #48]	; (2e854 <ff_wtoupper+0x58>)
   2e822:	68fa      	ldr	r2, [r7, #12]
   2e824:	0052      	lsls	r2, r2, #1
   2e826:	5ad3      	ldrh	r3, [r2, r3]
   2e828:	1dba      	adds	r2, r7, #6
   2e82a:	8812      	ldrh	r2, [r2, #0]
   2e82c:	429a      	cmp	r2, r3
   2e82e:	d1ee      	bne.n	2e80e <ff_wtoupper+0x12>
   2e830:	4b08      	ldr	r3, [pc, #32]	; (2e854 <ff_wtoupper+0x58>)
   2e832:	68fa      	ldr	r2, [r7, #12]
   2e834:	0052      	lsls	r2, r2, #1
   2e836:	5ad3      	ldrh	r3, [r2, r3]
   2e838:	2b00      	cmp	r3, #0
   2e83a:	d004      	beq.n	2e846 <ff_wtoupper+0x4a>
   2e83c:	4b06      	ldr	r3, [pc, #24]	; (2e858 <ff_wtoupper+0x5c>)
   2e83e:	68fa      	ldr	r2, [r7, #12]
   2e840:	0052      	lsls	r2, r2, #1
   2e842:	5ad3      	ldrh	r3, [r2, r3]
   2e844:	e001      	b.n	2e84a <ff_wtoupper+0x4e>
   2e846:	1dbb      	adds	r3, r7, #6
   2e848:	881b      	ldrh	r3, [r3, #0]
   2e84a:	0018      	movs	r0, r3
   2e84c:	46bd      	mov	sp, r7
   2e84e:	b004      	add	sp, #16
   2e850:	bd80      	pop	{r7, pc}
   2e852:	46c0      	nop			; (mov r8, r8)
   2e854:	00039d6c 	.word	0x00039d6c
   2e858:	00039f4c 	.word	0x00039f4c

0002e85c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e85c:	b580      	push	{r7, lr}
   2e85e:	b084      	sub	sp, #16
   2e860:	af00      	add	r7, sp, #0
   2e862:	60f8      	str	r0, [r7, #12]
   2e864:	60b9      	str	r1, [r7, #8]
   2e866:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e868:	68fb      	ldr	r3, [r7, #12]
   2e86a:	68ba      	ldr	r2, [r7, #8]
   2e86c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e86e:	68fb      	ldr	r3, [r7, #12]
   2e870:	687a      	ldr	r2, [r7, #4]
   2e872:	601a      	str	r2, [r3, #0]
}
   2e874:	46c0      	nop			; (mov r8, r8)
   2e876:	46bd      	mov	sp, r7
   2e878:	b004      	add	sp, #16
   2e87a:	bd80      	pop	{r7, pc}

0002e87c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e87c:	b580      	push	{r7, lr}
   2e87e:	b082      	sub	sp, #8
   2e880:	af00      	add	r7, sp, #0
   2e882:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e884:	687b      	ldr	r3, [r7, #4]
   2e886:	681b      	ldr	r3, [r3, #0]
   2e888:	4a07      	ldr	r2, [pc, #28]	; (2e8a8 <getNextPacketId+0x2c>)
   2e88a:	4293      	cmp	r3, r2
   2e88c:	d003      	beq.n	2e896 <getNextPacketId+0x1a>
   2e88e:	687b      	ldr	r3, [r7, #4]
   2e890:	681b      	ldr	r3, [r3, #0]
   2e892:	1c5a      	adds	r2, r3, #1
   2e894:	e000      	b.n	2e898 <getNextPacketId+0x1c>
   2e896:	2201      	movs	r2, #1
   2e898:	687b      	ldr	r3, [r7, #4]
   2e89a:	601a      	str	r2, [r3, #0]
   2e89c:	687b      	ldr	r3, [r7, #4]
   2e89e:	681b      	ldr	r3, [r3, #0]
}
   2e8a0:	0018      	movs	r0, r3
   2e8a2:	46bd      	mov	sp, r7
   2e8a4:	b002      	add	sp, #8
   2e8a6:	bd80      	pop	{r7, pc}
   2e8a8:	0000ffff 	.word	0x0000ffff

0002e8ac <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e8ae:	b087      	sub	sp, #28
   2e8b0:	af00      	add	r7, sp, #0
   2e8b2:	60f8      	str	r0, [r7, #12]
   2e8b4:	60b9      	str	r1, [r7, #8]
   2e8b6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e8b8:	2301      	movs	r3, #1
   2e8ba:	425b      	negs	r3, r3
   2e8bc:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e8be:	2300      	movs	r3, #0
   2e8c0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e8c2:	e01a      	b.n	2e8fa <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e8c4:	68fb      	ldr	r3, [r7, #12]
   2e8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e8c8:	68dc      	ldr	r4, [r3, #12]
   2e8ca:	68fb      	ldr	r3, [r7, #12]
   2e8cc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e8ce:	68fb      	ldr	r3, [r7, #12]
   2e8d0:	691a      	ldr	r2, [r3, #16]
   2e8d2:	693b      	ldr	r3, [r7, #16]
   2e8d4:	18d6      	adds	r6, r2, r3
   2e8d6:	687b      	ldr	r3, [r7, #4]
   2e8d8:	0018      	movs	r0, r3
   2e8da:	4b1a      	ldr	r3, [pc, #104]	; (2e944 <sendPacket+0x98>)
   2e8dc:	4798      	blx	r3
   2e8de:	0003      	movs	r3, r0
   2e8e0:	68ba      	ldr	r2, [r7, #8]
   2e8e2:	0031      	movs	r1, r6
   2e8e4:	0028      	movs	r0, r5
   2e8e6:	47a0      	blx	r4
   2e8e8:	0003      	movs	r3, r0
   2e8ea:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e8ec:	697b      	ldr	r3, [r7, #20]
   2e8ee:	2b00      	cmp	r3, #0
   2e8f0:	db0e      	blt.n	2e910 <sendPacket+0x64>
            break;
        sent += rc;
   2e8f2:	693a      	ldr	r2, [r7, #16]
   2e8f4:	697b      	ldr	r3, [r7, #20]
   2e8f6:	18d3      	adds	r3, r2, r3
   2e8f8:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e8fa:	693a      	ldr	r2, [r7, #16]
   2e8fc:	68bb      	ldr	r3, [r7, #8]
   2e8fe:	429a      	cmp	r2, r3
   2e900:	da07      	bge.n	2e912 <sendPacket+0x66>
   2e902:	687b      	ldr	r3, [r7, #4]
   2e904:	0018      	movs	r0, r3
   2e906:	4b10      	ldr	r3, [pc, #64]	; (2e948 <sendPacket+0x9c>)
   2e908:	4798      	blx	r3
   2e90a:	1e03      	subs	r3, r0, #0
   2e90c:	d0da      	beq.n	2e8c4 <sendPacket+0x18>
   2e90e:	e000      	b.n	2e912 <sendPacket+0x66>
            break;
   2e910:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e912:	693a      	ldr	r2, [r7, #16]
   2e914:	68bb      	ldr	r3, [r7, #8]
   2e916:	429a      	cmp	r2, r3
   2e918:	d10b      	bne.n	2e932 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e91a:	68fb      	ldr	r3, [r7, #12]
   2e91c:	3354      	adds	r3, #84	; 0x54
   2e91e:	001a      	movs	r2, r3
   2e920:	68fb      	ldr	r3, [r7, #12]
   2e922:	699b      	ldr	r3, [r3, #24]
   2e924:	0019      	movs	r1, r3
   2e926:	0010      	movs	r0, r2
   2e928:	4b08      	ldr	r3, [pc, #32]	; (2e94c <sendPacket+0xa0>)
   2e92a:	4798      	blx	r3
        rc = SUCCESS;
   2e92c:	2300      	movs	r3, #0
   2e92e:	617b      	str	r3, [r7, #20]
   2e930:	e002      	b.n	2e938 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e932:	2301      	movs	r3, #1
   2e934:	425b      	negs	r3, r3
   2e936:	617b      	str	r3, [r7, #20]
    return rc;
   2e938:	697b      	ldr	r3, [r7, #20]
}
   2e93a:	0018      	movs	r0, r3
   2e93c:	46bd      	mov	sp, r7
   2e93e:	b007      	add	sp, #28
   2e940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e942:	46c0      	nop			; (mov r8, r8)
   2e944:	0002f70d 	.word	0x0002f70d
   2e948:	0002f691 	.word	0x0002f691
   2e94c:	0002f6e5 	.word	0x0002f6e5

0002e950 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e950:	b580      	push	{r7, lr}
   2e952:	b086      	sub	sp, #24
   2e954:	af00      	add	r7, sp, #0
   2e956:	60f8      	str	r0, [r7, #12]
   2e958:	60b9      	str	r1, [r7, #8]
   2e95a:	607a      	str	r2, [r7, #4]
   2e95c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e95e:	68fb      	ldr	r3, [r7, #12]
   2e960:	68ba      	ldr	r2, [r7, #8]
   2e962:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e964:	2300      	movs	r3, #0
   2e966:	617b      	str	r3, [r7, #20]
   2e968:	e00a      	b.n	2e980 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e96a:	68fa      	ldr	r2, [r7, #12]
   2e96c:	697b      	ldr	r3, [r7, #20]
   2e96e:	3304      	adds	r3, #4
   2e970:	00db      	lsls	r3, r3, #3
   2e972:	18d3      	adds	r3, r2, r3
   2e974:	3304      	adds	r3, #4
   2e976:	2200      	movs	r2, #0
   2e978:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e97a:	697b      	ldr	r3, [r7, #20]
   2e97c:	3301      	adds	r3, #1
   2e97e:	617b      	str	r3, [r7, #20]
   2e980:	697b      	ldr	r3, [r7, #20]
   2e982:	2b04      	cmp	r3, #4
   2e984:	ddf1      	ble.n	2e96a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e986:	68fb      	ldr	r3, [r7, #12]
   2e988:	687a      	ldr	r2, [r7, #4]
   2e98a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e98c:	68fb      	ldr	r3, [r7, #12]
   2e98e:	683a      	ldr	r2, [r7, #0]
   2e990:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e992:	68fb      	ldr	r3, [r7, #12]
   2e994:	6a3a      	ldr	r2, [r7, #32]
   2e996:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e998:	68fb      	ldr	r3, [r7, #12]
   2e99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e99c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e99e:	68fb      	ldr	r3, [r7, #12]
   2e9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e9a2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e9a4:	68fb      	ldr	r3, [r7, #12]
   2e9a6:	2200      	movs	r2, #0
   2e9a8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e9aa:	68fb      	ldr	r3, [r7, #12]
   2e9ac:	2200      	movs	r2, #0
   2e9ae:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e9b0:	68fb      	ldr	r3, [r7, #12]
   2e9b2:	2200      	movs	r2, #0
   2e9b4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e9b6:	68fb      	ldr	r3, [r7, #12]
   2e9b8:	2201      	movs	r2, #1
   2e9ba:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e9bc:	68fb      	ldr	r3, [r7, #12]
   2e9be:	3354      	adds	r3, #84	; 0x54
   2e9c0:	0018      	movs	r0, r3
   2e9c2:	4b03      	ldr	r3, [pc, #12]	; (2e9d0 <MQTTClientInit+0x80>)
   2e9c4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e9c6:	46c0      	nop			; (mov r8, r8)
   2e9c8:	46bd      	mov	sp, r7
   2e9ca:	b006      	add	sp, #24
   2e9cc:	bd80      	pop	{r7, pc}
   2e9ce:	46c0      	nop			; (mov r8, r8)
   2e9d0:	0002f735 	.word	0x0002f735

0002e9d4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e9d4:	b590      	push	{r4, r7, lr}
   2e9d6:	b08b      	sub	sp, #44	; 0x2c
   2e9d8:	af00      	add	r7, sp, #0
   2e9da:	60f8      	str	r0, [r7, #12]
   2e9dc:	60b9      	str	r1, [r7, #8]
   2e9de:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e9e0:	2301      	movs	r3, #1
   2e9e2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e9e4:	2300      	movs	r3, #0
   2e9e6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e9e8:	2304      	movs	r3, #4
   2e9ea:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e9ec:	68bb      	ldr	r3, [r7, #8]
   2e9ee:	2200      	movs	r2, #0
   2e9f0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e9f2:	2301      	movs	r3, #1
   2e9f4:	425b      	negs	r3, r3
   2e9f6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e9f8:	6a3b      	ldr	r3, [r7, #32]
   2e9fa:	3301      	adds	r3, #1
   2e9fc:	623b      	str	r3, [r7, #32]
   2e9fe:	6a3a      	ldr	r2, [r7, #32]
   2ea00:	69fb      	ldr	r3, [r7, #28]
   2ea02:	429a      	cmp	r2, r3
   2ea04:	dd03      	ble.n	2ea0e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2ea06:	2301      	movs	r3, #1
   2ea08:	425b      	negs	r3, r3
   2ea0a:	61bb      	str	r3, [r7, #24]
            goto exit;
   2ea0c:	e026      	b.n	2ea5c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2ea0e:	68fb      	ldr	r3, [r7, #12]
   2ea10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ea12:	689c      	ldr	r4, [r3, #8]
   2ea14:	68fb      	ldr	r3, [r7, #12]
   2ea16:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2ea18:	687b      	ldr	r3, [r7, #4]
   2ea1a:	2217      	movs	r2, #23
   2ea1c:	18b9      	adds	r1, r7, r2
   2ea1e:	2201      	movs	r2, #1
   2ea20:	47a0      	blx	r4
   2ea22:	0003      	movs	r3, r0
   2ea24:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2ea26:	69bb      	ldr	r3, [r7, #24]
   2ea28:	2b01      	cmp	r3, #1
   2ea2a:	d116      	bne.n	2ea5a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2ea2c:	68bb      	ldr	r3, [r7, #8]
   2ea2e:	681a      	ldr	r2, [r3, #0]
   2ea30:	2317      	movs	r3, #23
   2ea32:	18fb      	adds	r3, r7, r3
   2ea34:	781b      	ldrb	r3, [r3, #0]
   2ea36:	0019      	movs	r1, r3
   2ea38:	237f      	movs	r3, #127	; 0x7f
   2ea3a:	400b      	ands	r3, r1
   2ea3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ea3e:	434b      	muls	r3, r1
   2ea40:	18d2      	adds	r2, r2, r3
   2ea42:	68bb      	ldr	r3, [r7, #8]
   2ea44:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ea48:	01db      	lsls	r3, r3, #7
   2ea4a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2ea4c:	2317      	movs	r3, #23
   2ea4e:	18fb      	adds	r3, r7, r3
   2ea50:	781b      	ldrb	r3, [r3, #0]
   2ea52:	b25b      	sxtb	r3, r3
   2ea54:	2b00      	cmp	r3, #0
   2ea56:	dbcc      	blt.n	2e9f2 <decodePacket+0x1e>
   2ea58:	e000      	b.n	2ea5c <decodePacket+0x88>
            goto exit;
   2ea5a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2ea5c:	6a3b      	ldr	r3, [r7, #32]
}
   2ea5e:	0018      	movs	r0, r3
   2ea60:	46bd      	mov	sp, r7
   2ea62:	b00b      	add	sp, #44	; 0x2c
   2ea64:	bd90      	pop	{r4, r7, pc}
	...

0002ea68 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2ea68:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ea6a:	46c6      	mov	lr, r8
   2ea6c:	b500      	push	{lr}
   2ea6e:	b086      	sub	sp, #24
   2ea70:	af00      	add	r7, sp, #0
   2ea72:	6078      	str	r0, [r7, #4]
   2ea74:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2ea76:	2301      	movs	r3, #1
   2ea78:	425b      	negs	r3, r3
   2ea7a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2ea7c:	2300      	movs	r3, #0
   2ea7e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2ea80:	2300      	movs	r3, #0
   2ea82:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2ea84:	2300      	movs	r3, #0
   2ea86:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2ea88:	687b      	ldr	r3, [r7, #4]
   2ea8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ea8c:	689c      	ldr	r4, [r3, #8]
   2ea8e:	687b      	ldr	r3, [r7, #4]
   2ea90:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ea92:	687b      	ldr	r3, [r7, #4]
   2ea94:	695e      	ldr	r6, [r3, #20]
   2ea96:	683b      	ldr	r3, [r7, #0]
   2ea98:	0018      	movs	r0, r3
   2ea9a:	4b2b      	ldr	r3, [pc, #172]	; (2eb48 <readPacket+0xe0>)
   2ea9c:	4798      	blx	r3
   2ea9e:	0003      	movs	r3, r0
   2eaa0:	2201      	movs	r2, #1
   2eaa2:	0031      	movs	r1, r6
   2eaa4:	0028      	movs	r0, r5
   2eaa6:	47a0      	blx	r4
   2eaa8:	0003      	movs	r3, r0
   2eaaa:	2b01      	cmp	r3, #1
   2eaac:	d141      	bne.n	2eb32 <readPacket+0xca>
        goto exit;

    len = 1;
   2eaae:	2301      	movs	r3, #1
   2eab0:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2eab2:	683b      	ldr	r3, [r7, #0]
   2eab4:	0018      	movs	r0, r3
   2eab6:	4b24      	ldr	r3, [pc, #144]	; (2eb48 <readPacket+0xe0>)
   2eab8:	4798      	blx	r3
   2eaba:	0002      	movs	r2, r0
   2eabc:	2308      	movs	r3, #8
   2eabe:	18f9      	adds	r1, r7, r3
   2eac0:	687b      	ldr	r3, [r7, #4]
   2eac2:	0018      	movs	r0, r3
   2eac4:	4b21      	ldr	r3, [pc, #132]	; (2eb4c <readPacket+0xe4>)
   2eac6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2eac8:	687b      	ldr	r3, [r7, #4]
   2eaca:	695b      	ldr	r3, [r3, #20]
   2eacc:	3301      	adds	r3, #1
   2eace:	68ba      	ldr	r2, [r7, #8]
   2ead0:	0011      	movs	r1, r2
   2ead2:	0018      	movs	r0, r3
   2ead4:	4b1e      	ldr	r3, [pc, #120]	; (2eb50 <readPacket+0xe8>)
   2ead6:	4798      	blx	r3
   2ead8:	0002      	movs	r2, r0
   2eada:	693b      	ldr	r3, [r7, #16]
   2eadc:	189b      	adds	r3, r3, r2
   2eade:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2eae0:	68bb      	ldr	r3, [r7, #8]
   2eae2:	2b00      	cmp	r3, #0
   2eae4:	dd17      	ble.n	2eb16 <readPacket+0xae>
   2eae6:	687b      	ldr	r3, [r7, #4]
   2eae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2eaea:	689c      	ldr	r4, [r3, #8]
   2eaec:	687b      	ldr	r3, [r7, #4]
   2eaee:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2eaf0:	687b      	ldr	r3, [r7, #4]
   2eaf2:	695a      	ldr	r2, [r3, #20]
   2eaf4:	693b      	ldr	r3, [r7, #16]
   2eaf6:	18d6      	adds	r6, r2, r3
   2eaf8:	68bb      	ldr	r3, [r7, #8]
   2eafa:	4698      	mov	r8, r3
   2eafc:	683b      	ldr	r3, [r7, #0]
   2eafe:	0018      	movs	r0, r3
   2eb00:	4b11      	ldr	r3, [pc, #68]	; (2eb48 <readPacket+0xe0>)
   2eb02:	4798      	blx	r3
   2eb04:	0003      	movs	r3, r0
   2eb06:	4642      	mov	r2, r8
   2eb08:	0031      	movs	r1, r6
   2eb0a:	0028      	movs	r0, r5
   2eb0c:	47a0      	blx	r4
   2eb0e:	0002      	movs	r2, r0
   2eb10:	68bb      	ldr	r3, [r7, #8]
   2eb12:	429a      	cmp	r2, r3
   2eb14:	d10f      	bne.n	2eb36 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2eb16:	687b      	ldr	r3, [r7, #4]
   2eb18:	695b      	ldr	r3, [r3, #20]
   2eb1a:	781a      	ldrb	r2, [r3, #0]
   2eb1c:	230c      	movs	r3, #12
   2eb1e:	18fb      	adds	r3, r7, r3
   2eb20:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2eb22:	230c      	movs	r3, #12
   2eb24:	18fb      	adds	r3, r7, r3
   2eb26:	781b      	ldrb	r3, [r3, #0]
   2eb28:	061b      	lsls	r3, r3, #24
   2eb2a:	0f1b      	lsrs	r3, r3, #28
   2eb2c:	b2db      	uxtb	r3, r3
   2eb2e:	617b      	str	r3, [r7, #20]
   2eb30:	e002      	b.n	2eb38 <readPacket+0xd0>
        goto exit;
   2eb32:	46c0      	nop			; (mov r8, r8)
   2eb34:	e000      	b.n	2eb38 <readPacket+0xd0>
        goto exit;
   2eb36:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2eb38:	697b      	ldr	r3, [r7, #20]
}
   2eb3a:	0018      	movs	r0, r3
   2eb3c:	46bd      	mov	sp, r7
   2eb3e:	b006      	add	sp, #24
   2eb40:	bc04      	pop	{r2}
   2eb42:	4690      	mov	r8, r2
   2eb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eb46:	46c0      	nop			; (mov r8, r8)
   2eb48:	0002f70d 	.word	0x0002f70d
   2eb4c:	0002e9d5 	.word	0x0002e9d5
   2eb50:	000304e5 	.word	0x000304e5

0002eb54 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2eb54:	b580      	push	{r7, lr}
   2eb56:	b086      	sub	sp, #24
   2eb58:	af00      	add	r7, sp, #0
   2eb5a:	6078      	str	r0, [r7, #4]
   2eb5c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2eb5e:	687b      	ldr	r3, [r7, #4]
   2eb60:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2eb62:	683b      	ldr	r3, [r7, #0]
   2eb64:	689b      	ldr	r3, [r3, #8]
   2eb66:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2eb68:	683b      	ldr	r3, [r7, #0]
   2eb6a:	685b      	ldr	r3, [r3, #4]
   2eb6c:	001a      	movs	r2, r3
   2eb6e:	693b      	ldr	r3, [r7, #16]
   2eb70:	189b      	adds	r3, r3, r2
   2eb72:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2eb74:	e039      	b.n	2ebea <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2eb76:	693b      	ldr	r3, [r7, #16]
   2eb78:	781b      	ldrb	r3, [r3, #0]
   2eb7a:	2b2f      	cmp	r3, #47	; 0x2f
   2eb7c:	d103      	bne.n	2eb86 <isTopicMatched+0x32>
   2eb7e:	697b      	ldr	r3, [r7, #20]
   2eb80:	781b      	ldrb	r3, [r3, #0]
   2eb82:	2b2f      	cmp	r3, #47	; 0x2f
   2eb84:	d13a      	bne.n	2ebfc <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2eb86:	697b      	ldr	r3, [r7, #20]
   2eb88:	781b      	ldrb	r3, [r3, #0]
   2eb8a:	2b2b      	cmp	r3, #43	; 0x2b
   2eb8c:	d009      	beq.n	2eba2 <isTopicMatched+0x4e>
   2eb8e:	697b      	ldr	r3, [r7, #20]
   2eb90:	781b      	ldrb	r3, [r3, #0]
   2eb92:	2b23      	cmp	r3, #35	; 0x23
   2eb94:	d005      	beq.n	2eba2 <isTopicMatched+0x4e>
   2eb96:	697b      	ldr	r3, [r7, #20]
   2eb98:	781a      	ldrb	r2, [r3, #0]
   2eb9a:	693b      	ldr	r3, [r7, #16]
   2eb9c:	781b      	ldrb	r3, [r3, #0]
   2eb9e:	429a      	cmp	r2, r3
   2eba0:	d12e      	bne.n	2ec00 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2eba2:	697b      	ldr	r3, [r7, #20]
   2eba4:	781b      	ldrb	r3, [r3, #0]
   2eba6:	2b2b      	cmp	r3, #43	; 0x2b
   2eba8:	d112      	bne.n	2ebd0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2ebaa:	693b      	ldr	r3, [r7, #16]
   2ebac:	3301      	adds	r3, #1
   2ebae:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ebb0:	e005      	b.n	2ebbe <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2ebb2:	693b      	ldr	r3, [r7, #16]
   2ebb4:	3301      	adds	r3, #1
   2ebb6:	613b      	str	r3, [r7, #16]
   2ebb8:	693b      	ldr	r3, [r7, #16]
   2ebba:	3301      	adds	r3, #1
   2ebbc:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ebbe:	68fa      	ldr	r2, [r7, #12]
   2ebc0:	68bb      	ldr	r3, [r7, #8]
   2ebc2:	429a      	cmp	r2, r3
   2ebc4:	d20b      	bcs.n	2ebde <isTopicMatched+0x8a>
   2ebc6:	68fb      	ldr	r3, [r7, #12]
   2ebc8:	781b      	ldrb	r3, [r3, #0]
   2ebca:	2b2f      	cmp	r3, #47	; 0x2f
   2ebcc:	d1f1      	bne.n	2ebb2 <isTopicMatched+0x5e>
   2ebce:	e006      	b.n	2ebde <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2ebd0:	697b      	ldr	r3, [r7, #20]
   2ebd2:	781b      	ldrb	r3, [r3, #0]
   2ebd4:	2b23      	cmp	r3, #35	; 0x23
   2ebd6:	d102      	bne.n	2ebde <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2ebd8:	68bb      	ldr	r3, [r7, #8]
   2ebda:	3b01      	subs	r3, #1
   2ebdc:	613b      	str	r3, [r7, #16]
        curf++;
   2ebde:	697b      	ldr	r3, [r7, #20]
   2ebe0:	3301      	adds	r3, #1
   2ebe2:	617b      	str	r3, [r7, #20]
        curn++;
   2ebe4:	693b      	ldr	r3, [r7, #16]
   2ebe6:	3301      	adds	r3, #1
   2ebe8:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2ebea:	697b      	ldr	r3, [r7, #20]
   2ebec:	781b      	ldrb	r3, [r3, #0]
   2ebee:	2b00      	cmp	r3, #0
   2ebf0:	d007      	beq.n	2ec02 <isTopicMatched+0xae>
   2ebf2:	693a      	ldr	r2, [r7, #16]
   2ebf4:	68bb      	ldr	r3, [r7, #8]
   2ebf6:	429a      	cmp	r2, r3
   2ebf8:	d3bd      	bcc.n	2eb76 <isTopicMatched+0x22>
   2ebfa:	e002      	b.n	2ec02 <isTopicMatched+0xae>
            break;
   2ebfc:	46c0      	nop			; (mov r8, r8)
   2ebfe:	e000      	b.n	2ec02 <isTopicMatched+0xae>
            break;
   2ec00:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2ec02:	693a      	ldr	r2, [r7, #16]
   2ec04:	68bb      	ldr	r3, [r7, #8]
   2ec06:	429a      	cmp	r2, r3
   2ec08:	d105      	bne.n	2ec16 <isTopicMatched+0xc2>
   2ec0a:	697b      	ldr	r3, [r7, #20]
   2ec0c:	781b      	ldrb	r3, [r3, #0]
   2ec0e:	2b00      	cmp	r3, #0
   2ec10:	d101      	bne.n	2ec16 <isTopicMatched+0xc2>
   2ec12:	2301      	movs	r3, #1
   2ec14:	e000      	b.n	2ec18 <isTopicMatched+0xc4>
   2ec16:	2300      	movs	r3, #0
   2ec18:	b2db      	uxtb	r3, r3
}
   2ec1a:	0018      	movs	r0, r3
   2ec1c:	46bd      	mov	sp, r7
   2ec1e:	b006      	add	sp, #24
   2ec20:	bd80      	pop	{r7, pc}
	...

0002ec24 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2ec24:	b580      	push	{r7, lr}
   2ec26:	b08a      	sub	sp, #40	; 0x28
   2ec28:	af00      	add	r7, sp, #0
   2ec2a:	60f8      	str	r0, [r7, #12]
   2ec2c:	60b9      	str	r1, [r7, #8]
   2ec2e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2ec30:	2301      	movs	r3, #1
   2ec32:	425b      	negs	r3, r3
   2ec34:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ec36:	2300      	movs	r3, #0
   2ec38:	627b      	str	r3, [r7, #36]	; 0x24
   2ec3a:	e044      	b.n	2ecc6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2ec3c:	68fa      	ldr	r2, [r7, #12]
   2ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec40:	3304      	adds	r3, #4
   2ec42:	00db      	lsls	r3, r3, #3
   2ec44:	18d3      	adds	r3, r2, r3
   2ec46:	3304      	adds	r3, #4
   2ec48:	681b      	ldr	r3, [r3, #0]
   2ec4a:	2b00      	cmp	r3, #0
   2ec4c:	d038      	beq.n	2ecc0 <deliverMessage+0x9c>
   2ec4e:	68fa      	ldr	r2, [r7, #12]
   2ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec52:	3304      	adds	r3, #4
   2ec54:	00db      	lsls	r3, r3, #3
   2ec56:	18d3      	adds	r3, r2, r3
   2ec58:	3304      	adds	r3, #4
   2ec5a:	681a      	ldr	r2, [r3, #0]
   2ec5c:	68bb      	ldr	r3, [r7, #8]
   2ec5e:	0011      	movs	r1, r2
   2ec60:	0018      	movs	r0, r3
   2ec62:	4b28      	ldr	r3, [pc, #160]	; (2ed04 <deliverMessage+0xe0>)
   2ec64:	4798      	blx	r3
   2ec66:	1e03      	subs	r3, r0, #0
   2ec68:	d10d      	bne.n	2ec86 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2ec6a:	68fa      	ldr	r2, [r7, #12]
   2ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec6e:	3304      	adds	r3, #4
   2ec70:	00db      	lsls	r3, r3, #3
   2ec72:	18d3      	adds	r3, r2, r3
   2ec74:	3304      	adds	r3, #4
   2ec76:	681b      	ldr	r3, [r3, #0]
   2ec78:	68ba      	ldr	r2, [r7, #8]
   2ec7a:	0011      	movs	r1, r2
   2ec7c:	0018      	movs	r0, r3
   2ec7e:	4b22      	ldr	r3, [pc, #136]	; (2ed08 <deliverMessage+0xe4>)
   2ec80:	4798      	blx	r3
   2ec82:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2ec84:	d01c      	beq.n	2ecc0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2ec86:	68fa      	ldr	r2, [r7, #12]
   2ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec8a:	3304      	adds	r3, #4
   2ec8c:	00db      	lsls	r3, r3, #3
   2ec8e:	18d3      	adds	r3, r2, r3
   2ec90:	3308      	adds	r3, #8
   2ec92:	681b      	ldr	r3, [r3, #0]
   2ec94:	2b00      	cmp	r3, #0
   2ec96:	d013      	beq.n	2ecc0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2ec98:	687a      	ldr	r2, [r7, #4]
   2ec9a:	68b9      	ldr	r1, [r7, #8]
   2ec9c:	2318      	movs	r3, #24
   2ec9e:	18fb      	adds	r3, r7, r3
   2eca0:	0018      	movs	r0, r3
   2eca2:	4b1a      	ldr	r3, [pc, #104]	; (2ed0c <deliverMessage+0xe8>)
   2eca4:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2eca6:	68fa      	ldr	r2, [r7, #12]
   2eca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ecaa:	3304      	adds	r3, #4
   2ecac:	00db      	lsls	r3, r3, #3
   2ecae:	18d3      	adds	r3, r2, r3
   2ecb0:	3308      	adds	r3, #8
   2ecb2:	681b      	ldr	r3, [r3, #0]
   2ecb4:	2218      	movs	r2, #24
   2ecb6:	18ba      	adds	r2, r7, r2
   2ecb8:	0010      	movs	r0, r2
   2ecba:	4798      	blx	r3
                rc = SUCCESS;
   2ecbc:	2300      	movs	r3, #0
   2ecbe:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ecc2:	3301      	adds	r3, #1
   2ecc4:	627b      	str	r3, [r7, #36]	; 0x24
   2ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ecc8:	2b04      	cmp	r3, #4
   2ecca:	ddb7      	ble.n	2ec3c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2eccc:	6a3b      	ldr	r3, [r7, #32]
   2ecce:	3301      	adds	r3, #1
   2ecd0:	d112      	bne.n	2ecf8 <deliverMessage+0xd4>
   2ecd2:	68fb      	ldr	r3, [r7, #12]
   2ecd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ecd6:	2b00      	cmp	r3, #0
   2ecd8:	d00e      	beq.n	2ecf8 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2ecda:	687a      	ldr	r2, [r7, #4]
   2ecdc:	68b9      	ldr	r1, [r7, #8]
   2ecde:	2310      	movs	r3, #16
   2ece0:	18fb      	adds	r3, r7, r3
   2ece2:	0018      	movs	r0, r3
   2ece4:	4b09      	ldr	r3, [pc, #36]	; (2ed0c <deliverMessage+0xe8>)
   2ece6:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2ece8:	68fb      	ldr	r3, [r7, #12]
   2ecea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ecec:	2210      	movs	r2, #16
   2ecee:	18ba      	adds	r2, r7, r2
   2ecf0:	0010      	movs	r0, r2
   2ecf2:	4798      	blx	r3
        rc = SUCCESS;
   2ecf4:	2300      	movs	r3, #0
   2ecf6:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2ecf8:	6a3b      	ldr	r3, [r7, #32]
}
   2ecfa:	0018      	movs	r0, r3
   2ecfc:	46bd      	mov	sp, r7
   2ecfe:	b00a      	add	sp, #40	; 0x28
   2ed00:	bd80      	pop	{r7, pc}
   2ed02:	46c0      	nop			; (mov r8, r8)
   2ed04:	000308f9 	.word	0x000308f9
   2ed08:	0002eb55 	.word	0x0002eb55
   2ed0c:	0002e85d 	.word	0x0002e85d

0002ed10 <keepalive>:


int keepalive(MQTTClient* c)
{
   2ed10:	b580      	push	{r7, lr}
   2ed12:	b088      	sub	sp, #32
   2ed14:	af00      	add	r7, sp, #0
   2ed16:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2ed18:	2301      	movs	r3, #1
   2ed1a:	425b      	negs	r3, r3
   2ed1c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2ed1e:	687b      	ldr	r3, [r7, #4]
   2ed20:	699b      	ldr	r3, [r3, #24]
   2ed22:	2b00      	cmp	r3, #0
   2ed24:	d102      	bne.n	2ed2c <keepalive+0x1c>
    {
        rc = SUCCESS;
   2ed26:	2300      	movs	r3, #0
   2ed28:	61fb      	str	r3, [r7, #28]
        goto exit;
   2ed2a:	e033      	b.n	2ed94 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2ed2c:	687b      	ldr	r3, [r7, #4]
   2ed2e:	3354      	adds	r3, #84	; 0x54
   2ed30:	0018      	movs	r0, r3
   2ed32:	4b1b      	ldr	r3, [pc, #108]	; (2eda0 <keepalive+0x90>)
   2ed34:	4798      	blx	r3
   2ed36:	1e03      	subs	r3, r0, #0
   2ed38:	d02c      	beq.n	2ed94 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2ed3a:	687b      	ldr	r3, [r7, #4]
   2ed3c:	7f1b      	ldrb	r3, [r3, #28]
   2ed3e:	2b00      	cmp	r3, #0
   2ed40:	d128      	bne.n	2ed94 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2ed42:	230c      	movs	r3, #12
   2ed44:	18fb      	adds	r3, r7, r3
   2ed46:	0018      	movs	r0, r3
   2ed48:	4b16      	ldr	r3, [pc, #88]	; (2eda4 <keepalive+0x94>)
   2ed4a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2ed4c:	23fa      	movs	r3, #250	; 0xfa
   2ed4e:	009a      	lsls	r2, r3, #2
   2ed50:	230c      	movs	r3, #12
   2ed52:	18fb      	adds	r3, r7, r3
   2ed54:	0011      	movs	r1, r2
   2ed56:	0018      	movs	r0, r3
   2ed58:	4b13      	ldr	r3, [pc, #76]	; (2eda8 <keepalive+0x98>)
   2ed5a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2ed5c:	687b      	ldr	r3, [r7, #4]
   2ed5e:	691a      	ldr	r2, [r3, #16]
   2ed60:	687b      	ldr	r3, [r7, #4]
   2ed62:	689b      	ldr	r3, [r3, #8]
   2ed64:	0019      	movs	r1, r3
   2ed66:	0010      	movs	r0, r2
   2ed68:	4b10      	ldr	r3, [pc, #64]	; (2edac <keepalive+0x9c>)
   2ed6a:	4798      	blx	r3
   2ed6c:	0003      	movs	r3, r0
   2ed6e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2ed70:	69bb      	ldr	r3, [r7, #24]
   2ed72:	2b00      	cmp	r3, #0
   2ed74:	dd0e      	ble.n	2ed94 <keepalive+0x84>
   2ed76:	230c      	movs	r3, #12
   2ed78:	18fa      	adds	r2, r7, r3
   2ed7a:	69b9      	ldr	r1, [r7, #24]
   2ed7c:	687b      	ldr	r3, [r7, #4]
   2ed7e:	0018      	movs	r0, r3
   2ed80:	4b0b      	ldr	r3, [pc, #44]	; (2edb0 <keepalive+0xa0>)
   2ed82:	4798      	blx	r3
   2ed84:	0003      	movs	r3, r0
   2ed86:	61fb      	str	r3, [r7, #28]
   2ed88:	69fb      	ldr	r3, [r7, #28]
   2ed8a:	2b00      	cmp	r3, #0
   2ed8c:	d102      	bne.n	2ed94 <keepalive+0x84>
                c->ping_outstanding = 1;
   2ed8e:	687b      	ldr	r3, [r7, #4]
   2ed90:	2201      	movs	r2, #1
   2ed92:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2ed94:	69fb      	ldr	r3, [r7, #28]
}
   2ed96:	0018      	movs	r0, r3
   2ed98:	46bd      	mov	sp, r7
   2ed9a:	b008      	add	sp, #32
   2ed9c:	bd80      	pop	{r7, pc}
   2ed9e:	46c0      	nop			; (mov r8, r8)
   2eda0:	0002f691 	.word	0x0002f691
   2eda4:	0002f735 	.word	0x0002f735
   2eda8:	0002f6bd 	.word	0x0002f6bd
   2edac:	00030309 	.word	0x00030309
   2edb0:	0002e8ad 	.word	0x0002e8ad

0002edb4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2edb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2edb6:	b095      	sub	sp, #84	; 0x54
   2edb8:	af06      	add	r7, sp, #24
   2edba:	6078      	str	r0, [r7, #4]
   2edbc:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2edbe:	683a      	ldr	r2, [r7, #0]
   2edc0:	687b      	ldr	r3, [r7, #4]
   2edc2:	0011      	movs	r1, r2
   2edc4:	0018      	movs	r0, r3
   2edc6:	4b70      	ldr	r3, [pc, #448]	; (2ef88 <cycle+0x1d4>)
   2edc8:	4798      	blx	r3
   2edca:	0002      	movs	r2, r0
   2edcc:	232e      	movs	r3, #46	; 0x2e
   2edce:	18fb      	adds	r3, r7, r3
   2edd0:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2edd2:	2300      	movs	r3, #0
   2edd4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2edd6:	2300      	movs	r3, #0
   2edd8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2edda:	232e      	movs	r3, #46	; 0x2e
   2eddc:	18fb      	adds	r3, r7, r3
   2edde:	881b      	ldrh	r3, [r3, #0]
   2ede0:	2b0d      	cmp	r3, #13
   2ede2:	d900      	bls.n	2ede6 <cycle+0x32>
   2ede4:	e0bd      	b.n	2ef62 <cycle+0x1ae>
   2ede6:	009a      	lsls	r2, r3, #2
   2ede8:	4b68      	ldr	r3, [pc, #416]	; (2ef8c <cycle+0x1d8>)
   2edea:	18d3      	adds	r3, r2, r3
   2edec:	681b      	ldr	r3, [r3, #0]
   2edee:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2edf0:	687b      	ldr	r3, [r7, #4]
   2edf2:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2edf4:	687b      	ldr	r3, [r7, #4]
   2edf6:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2edf8:	001e      	movs	r6, r3
   2edfa:	2310      	movs	r3, #16
   2edfc:	18fb      	adds	r3, r7, r3
   2edfe:	1d1d      	adds	r5, r3, #4
   2ee00:	2310      	movs	r3, #16
   2ee02:	18fb      	adds	r3, r7, r3
   2ee04:	1c5c      	adds	r4, r3, #1
   2ee06:	230c      	movs	r3, #12
   2ee08:	18f9      	adds	r1, r7, r3
   2ee0a:	2310      	movs	r3, #16
   2ee0c:	18fb      	adds	r3, r7, r3
   2ee0e:	1c98      	adds	r0, r3, #2
   2ee10:	9604      	str	r6, [sp, #16]
   2ee12:	9203      	str	r2, [sp, #12]
   2ee14:	2310      	movs	r3, #16
   2ee16:	18fb      	adds	r3, r7, r3
   2ee18:	330c      	adds	r3, #12
   2ee1a:	9302      	str	r3, [sp, #8]
   2ee1c:	2310      	movs	r3, #16
   2ee1e:	18fb      	adds	r3, r7, r3
   2ee20:	3308      	adds	r3, #8
   2ee22:	9301      	str	r3, [sp, #4]
   2ee24:	2320      	movs	r3, #32
   2ee26:	18fb      	adds	r3, r7, r3
   2ee28:	9300      	str	r3, [sp, #0]
   2ee2a:	002b      	movs	r3, r5
   2ee2c:	0022      	movs	r2, r4
   2ee2e:	4c58      	ldr	r4, [pc, #352]	; (2ef90 <cycle+0x1dc>)
   2ee30:	47a0      	blx	r4
   2ee32:	0003      	movs	r3, r0
   2ee34:	2b01      	cmp	r3, #1
   2ee36:	d000      	beq.n	2ee3a <cycle+0x86>
   2ee38:	e098      	b.n	2ef6c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2ee3a:	68fb      	ldr	r3, [r7, #12]
   2ee3c:	b2da      	uxtb	r2, r3
   2ee3e:	2310      	movs	r3, #16
   2ee40:	18fb      	adds	r3, r7, r3
   2ee42:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2ee44:	2310      	movs	r3, #16
   2ee46:	18fa      	adds	r2, r7, r3
   2ee48:	2320      	movs	r3, #32
   2ee4a:	18f9      	adds	r1, r7, r3
   2ee4c:	687b      	ldr	r3, [r7, #4]
   2ee4e:	0018      	movs	r0, r3
   2ee50:	4b50      	ldr	r3, [pc, #320]	; (2ef94 <cycle+0x1e0>)
   2ee52:	4798      	blx	r3
            if (msg.qos != QOS0)
   2ee54:	2310      	movs	r3, #16
   2ee56:	18fb      	adds	r3, r7, r3
   2ee58:	781b      	ldrb	r3, [r3, #0]
   2ee5a:	2b00      	cmp	r3, #0
   2ee5c:	d100      	bne.n	2ee60 <cycle+0xac>
   2ee5e:	e07d      	b.n	2ef5c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2ee60:	2310      	movs	r3, #16
   2ee62:	18fb      	adds	r3, r7, r3
   2ee64:	781b      	ldrb	r3, [r3, #0]
   2ee66:	2b01      	cmp	r3, #1
   2ee68:	d10f      	bne.n	2ee8a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2ee6a:	687b      	ldr	r3, [r7, #4]
   2ee6c:	6918      	ldr	r0, [r3, #16]
   2ee6e:	687b      	ldr	r3, [r7, #4]
   2ee70:	689b      	ldr	r3, [r3, #8]
   2ee72:	0019      	movs	r1, r3
   2ee74:	2310      	movs	r3, #16
   2ee76:	18fb      	adds	r3, r7, r3
   2ee78:	889b      	ldrh	r3, [r3, #4]
   2ee7a:	9300      	str	r3, [sp, #0]
   2ee7c:	2300      	movs	r3, #0
   2ee7e:	2204      	movs	r2, #4
   2ee80:	4c45      	ldr	r4, [pc, #276]	; (2ef98 <cycle+0x1e4>)
   2ee82:	47a0      	blx	r4
   2ee84:	0003      	movs	r3, r0
   2ee86:	637b      	str	r3, [r7, #52]	; 0x34
   2ee88:	e013      	b.n	2eeb2 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2ee8a:	2310      	movs	r3, #16
   2ee8c:	18fb      	adds	r3, r7, r3
   2ee8e:	781b      	ldrb	r3, [r3, #0]
   2ee90:	2b02      	cmp	r3, #2
   2ee92:	d10e      	bne.n	2eeb2 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2ee94:	687b      	ldr	r3, [r7, #4]
   2ee96:	6918      	ldr	r0, [r3, #16]
   2ee98:	687b      	ldr	r3, [r7, #4]
   2ee9a:	689b      	ldr	r3, [r3, #8]
   2ee9c:	0019      	movs	r1, r3
   2ee9e:	2310      	movs	r3, #16
   2eea0:	18fb      	adds	r3, r7, r3
   2eea2:	889b      	ldrh	r3, [r3, #4]
   2eea4:	9300      	str	r3, [sp, #0]
   2eea6:	2300      	movs	r3, #0
   2eea8:	2205      	movs	r2, #5
   2eeaa:	4c3b      	ldr	r4, [pc, #236]	; (2ef98 <cycle+0x1e4>)
   2eeac:	47a0      	blx	r4
   2eeae:	0003      	movs	r3, r0
   2eeb0:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2eeb4:	2b00      	cmp	r3, #0
   2eeb6:	dc03      	bgt.n	2eec0 <cycle+0x10c>
                    rc = FAILURE;
   2eeb8:	2301      	movs	r3, #1
   2eeba:	425b      	negs	r3, r3
   2eebc:	633b      	str	r3, [r7, #48]	; 0x30
   2eebe:	e007      	b.n	2eed0 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2eec0:	683a      	ldr	r2, [r7, #0]
   2eec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2eec4:	687b      	ldr	r3, [r7, #4]
   2eec6:	0018      	movs	r0, r3
   2eec8:	4b34      	ldr	r3, [pc, #208]	; (2ef9c <cycle+0x1e8>)
   2eeca:	4798      	blx	r3
   2eecc:	0003      	movs	r3, r0
   2eece:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2eed2:	3301      	adds	r3, #1
   2eed4:	d142      	bne.n	2ef5c <cycle+0x1a8>
                    goto exit; // there was a problem
   2eed6:	46c0      	nop			; (mov r8, r8)
   2eed8:	e049      	b.n	2ef6e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2eeda:	687b      	ldr	r3, [r7, #4]
   2eedc:	695c      	ldr	r4, [r3, #20]
   2eede:	687b      	ldr	r3, [r7, #4]
   2eee0:	68db      	ldr	r3, [r3, #12]
   2eee2:	220a      	movs	r2, #10
   2eee4:	18ba      	adds	r2, r7, r2
   2eee6:	2109      	movs	r1, #9
   2eee8:	1879      	adds	r1, r7, r1
   2eeea:	2008      	movs	r0, #8
   2eeec:	1838      	adds	r0, r7, r0
   2eeee:	9300      	str	r3, [sp, #0]
   2eef0:	0023      	movs	r3, r4
   2eef2:	4c2b      	ldr	r4, [pc, #172]	; (2efa0 <cycle+0x1ec>)
   2eef4:	47a0      	blx	r4
   2eef6:	0003      	movs	r3, r0
   2eef8:	2b01      	cmp	r3, #1
   2eefa:	d003      	beq.n	2ef04 <cycle+0x150>
                rc = FAILURE;
   2eefc:	2301      	movs	r3, #1
   2eefe:	425b      	negs	r3, r3
   2ef00:	633b      	str	r3, [r7, #48]	; 0x30
   2ef02:	e023      	b.n	2ef4c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2ef04:	687b      	ldr	r3, [r7, #4]
   2ef06:	6918      	ldr	r0, [r3, #16]
   2ef08:	687b      	ldr	r3, [r7, #4]
   2ef0a:	689b      	ldr	r3, [r3, #8]
   2ef0c:	0019      	movs	r1, r3
   2ef0e:	230a      	movs	r3, #10
   2ef10:	18fb      	adds	r3, r7, r3
   2ef12:	881b      	ldrh	r3, [r3, #0]
   2ef14:	9300      	str	r3, [sp, #0]
   2ef16:	2300      	movs	r3, #0
   2ef18:	2206      	movs	r2, #6
   2ef1a:	4c1f      	ldr	r4, [pc, #124]	; (2ef98 <cycle+0x1e4>)
   2ef1c:	47a0      	blx	r4
   2ef1e:	0003      	movs	r3, r0
   2ef20:	637b      	str	r3, [r7, #52]	; 0x34
   2ef22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ef24:	2b00      	cmp	r3, #0
   2ef26:	dc03      	bgt.n	2ef30 <cycle+0x17c>
                rc = FAILURE;
   2ef28:	2301      	movs	r3, #1
   2ef2a:	425b      	negs	r3, r3
   2ef2c:	633b      	str	r3, [r7, #48]	; 0x30
   2ef2e:	e00d      	b.n	2ef4c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2ef30:	683a      	ldr	r2, [r7, #0]
   2ef32:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2ef34:	687b      	ldr	r3, [r7, #4]
   2ef36:	0018      	movs	r0, r3
   2ef38:	4b18      	ldr	r3, [pc, #96]	; (2ef9c <cycle+0x1e8>)
   2ef3a:	4798      	blx	r3
   2ef3c:	0003      	movs	r3, r0
   2ef3e:	633b      	str	r3, [r7, #48]	; 0x30
   2ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ef42:	2b00      	cmp	r3, #0
   2ef44:	d002      	beq.n	2ef4c <cycle+0x198>
                rc = FAILURE; // there was a problem
   2ef46:	2301      	movs	r3, #1
   2ef48:	425b      	negs	r3, r3
   2ef4a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2ef4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ef4e:	3301      	adds	r3, #1
   2ef50:	d106      	bne.n	2ef60 <cycle+0x1ac>
                goto exit; // there was a problem
   2ef52:	e00c      	b.n	2ef6e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2ef54:	687b      	ldr	r3, [r7, #4]
   2ef56:	2200      	movs	r2, #0
   2ef58:	771a      	strb	r2, [r3, #28]
            break;
   2ef5a:	e002      	b.n	2ef62 <cycle+0x1ae>
            break;
   2ef5c:	46c0      	nop			; (mov r8, r8)
   2ef5e:	e000      	b.n	2ef62 <cycle+0x1ae>
            break;
   2ef60:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2ef62:	687b      	ldr	r3, [r7, #4]
   2ef64:	0018      	movs	r0, r3
   2ef66:	4b0f      	ldr	r3, [pc, #60]	; (2efa4 <cycle+0x1f0>)
   2ef68:	4798      	blx	r3
   2ef6a:	e000      	b.n	2ef6e <cycle+0x1ba>
                goto exit;
   2ef6c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ef70:	2b00      	cmp	r3, #0
   2ef72:	d103      	bne.n	2ef7c <cycle+0x1c8>
        rc = packet_type;
   2ef74:	232e      	movs	r3, #46	; 0x2e
   2ef76:	18fb      	adds	r3, r7, r3
   2ef78:	881b      	ldrh	r3, [r3, #0]
   2ef7a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2ef7e:	0018      	movs	r0, r3
   2ef80:	46bd      	mov	sp, r7
   2ef82:	b00f      	add	sp, #60	; 0x3c
   2ef84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ef86:	46c0      	nop			; (mov r8, r8)
   2ef88:	0002ea69 	.word	0x0002ea69
   2ef8c:	0003a12c 	.word	0x0003a12c
   2ef90:	0003032d 	.word	0x0003032d
   2ef94:	0002ec25 	.word	0x0002ec25
   2ef98:	00030b25 	.word	0x00030b25
   2ef9c:	0002e8ad 	.word	0x0002e8ad
   2efa0:	00030431 	.word	0x00030431
   2efa4:	0002ed11 	.word	0x0002ed11

0002efa8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2efa8:	b580      	push	{r7, lr}
   2efaa:	b086      	sub	sp, #24
   2efac:	af00      	add	r7, sp, #0
   2efae:	6078      	str	r0, [r7, #4]
   2efb0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2efb2:	2300      	movs	r3, #0
   2efb4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2efb6:	2308      	movs	r3, #8
   2efb8:	18fb      	adds	r3, r7, r3
   2efba:	0018      	movs	r0, r3
   2efbc:	4b11      	ldr	r3, [pc, #68]	; (2f004 <MQTTYield+0x5c>)
   2efbe:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2efc0:	683a      	ldr	r2, [r7, #0]
   2efc2:	2308      	movs	r3, #8
   2efc4:	18fb      	adds	r3, r7, r3
   2efc6:	0011      	movs	r1, r2
   2efc8:	0018      	movs	r0, r3
   2efca:	4b0f      	ldr	r3, [pc, #60]	; (2f008 <MQTTYield+0x60>)
   2efcc:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2efce:	2308      	movs	r3, #8
   2efd0:	18fa      	adds	r2, r7, r3
   2efd2:	687b      	ldr	r3, [r7, #4]
   2efd4:	0011      	movs	r1, r2
   2efd6:	0018      	movs	r0, r3
   2efd8:	4b0c      	ldr	r3, [pc, #48]	; (2f00c <MQTTYield+0x64>)
   2efda:	4798      	blx	r3
   2efdc:	0003      	movs	r3, r0
   2efde:	3301      	adds	r3, #1
   2efe0:	d103      	bne.n	2efea <MQTTYield+0x42>
        {
            rc = FAILURE;
   2efe2:	2301      	movs	r3, #1
   2efe4:	425b      	negs	r3, r3
   2efe6:	617b      	str	r3, [r7, #20]
            break;
   2efe8:	e006      	b.n	2eff8 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2efea:	2308      	movs	r3, #8
   2efec:	18fb      	adds	r3, r7, r3
   2efee:	0018      	movs	r0, r3
   2eff0:	4b07      	ldr	r3, [pc, #28]	; (2f010 <MQTTYield+0x68>)
   2eff2:	4798      	blx	r3
   2eff4:	1e03      	subs	r3, r0, #0
   2eff6:	d0ea      	beq.n	2efce <MQTTYield+0x26>
        
    return rc;
   2eff8:	697b      	ldr	r3, [r7, #20]
}
   2effa:	0018      	movs	r0, r3
   2effc:	46bd      	mov	sp, r7
   2effe:	b006      	add	sp, #24
   2f000:	bd80      	pop	{r7, pc}
   2f002:	46c0      	nop			; (mov r8, r8)
   2f004:	0002f735 	.word	0x0002f735
   2f008:	0002f6bd 	.word	0x0002f6bd
   2f00c:	0002edb5 	.word	0x0002edb5
   2f010:	0002f691 	.word	0x0002f691

0002f014 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f014:	b580      	push	{r7, lr}
   2f016:	b086      	sub	sp, #24
   2f018:	af00      	add	r7, sp, #0
   2f01a:	60f8      	str	r0, [r7, #12]
   2f01c:	60b9      	str	r1, [r7, #8]
   2f01e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f020:	2301      	movs	r3, #1
   2f022:	425b      	negs	r3, r3
   2f024:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f026:	687b      	ldr	r3, [r7, #4]
   2f028:	0018      	movs	r0, r3
   2f02a:	4b0b      	ldr	r3, [pc, #44]	; (2f058 <waitfor+0x44>)
   2f02c:	4798      	blx	r3
   2f02e:	1e03      	subs	r3, r0, #0
   2f030:	d10c      	bne.n	2f04c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f032:	687a      	ldr	r2, [r7, #4]
   2f034:	68fb      	ldr	r3, [r7, #12]
   2f036:	0011      	movs	r1, r2
   2f038:	0018      	movs	r0, r3
   2f03a:	4b08      	ldr	r3, [pc, #32]	; (2f05c <waitfor+0x48>)
   2f03c:	4798      	blx	r3
   2f03e:	0003      	movs	r3, r0
   2f040:	617b      	str	r3, [r7, #20]
   2f042:	697a      	ldr	r2, [r7, #20]
   2f044:	68bb      	ldr	r3, [r7, #8]
   2f046:	429a      	cmp	r2, r3
   2f048:	d1ed      	bne.n	2f026 <waitfor+0x12>
   2f04a:	e000      	b.n	2f04e <waitfor+0x3a>
            break; // we timed out
   2f04c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f04e:	697b      	ldr	r3, [r7, #20]
}
   2f050:	0018      	movs	r0, r3
   2f052:	46bd      	mov	sp, r7
   2f054:	b006      	add	sp, #24
   2f056:	bd80      	pop	{r7, pc}
   2f058:	0002f691 	.word	0x0002f691
   2f05c:	0002edb5 	.word	0x0002edb5

0002f060 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f060:	b590      	push	{r4, r7, lr}
   2f062:	b09f      	sub	sp, #124	; 0x7c
   2f064:	af00      	add	r7, sp, #0
   2f066:	6078      	str	r0, [r7, #4]
   2f068:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f06a:	2301      	movs	r3, #1
   2f06c:	425b      	negs	r3, r3
   2f06e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f070:	230c      	movs	r3, #12
   2f072:	18fa      	adds	r2, r7, r3
   2f074:	4b41      	ldr	r3, [pc, #260]	; (2f17c <MQTTConnect+0x11c>)
   2f076:	0010      	movs	r0, r2
   2f078:	0019      	movs	r1, r3
   2f07a:	2358      	movs	r3, #88	; 0x58
   2f07c:	001a      	movs	r2, r3
   2f07e:	4b40      	ldr	r3, [pc, #256]	; (2f180 <MQTTConnect+0x120>)
   2f080:	4798      	blx	r3
    int len = 0;
   2f082:	2300      	movs	r3, #0
   2f084:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f086:	687b      	ldr	r3, [r7, #4]
   2f088:	6a1b      	ldr	r3, [r3, #32]
   2f08a:	2b00      	cmp	r3, #0
   2f08c:	d166      	bne.n	2f15c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f08e:	2364      	movs	r3, #100	; 0x64
   2f090:	18fb      	adds	r3, r7, r3
   2f092:	0018      	movs	r0, r3
   2f094:	4b3b      	ldr	r3, [pc, #236]	; (2f184 <MQTTConnect+0x124>)
   2f096:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f098:	687b      	ldr	r3, [r7, #4]
   2f09a:	685a      	ldr	r2, [r3, #4]
   2f09c:	2364      	movs	r3, #100	; 0x64
   2f09e:	18fb      	adds	r3, r7, r3
   2f0a0:	0011      	movs	r1, r2
   2f0a2:	0018      	movs	r0, r3
   2f0a4:	4b38      	ldr	r3, [pc, #224]	; (2f188 <MQTTConnect+0x128>)
   2f0a6:	4798      	blx	r3

    if (options == 0)
   2f0a8:	683b      	ldr	r3, [r7, #0]
   2f0aa:	2b00      	cmp	r3, #0
   2f0ac:	d102      	bne.n	2f0b4 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f0ae:	230c      	movs	r3, #12
   2f0b0:	18fb      	adds	r3, r7, r3
   2f0b2:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f0b4:	683b      	ldr	r3, [r7, #0]
   2f0b6:	8b1b      	ldrh	r3, [r3, #24]
   2f0b8:	001a      	movs	r2, r3
   2f0ba:	687b      	ldr	r3, [r7, #4]
   2f0bc:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f0be:	687b      	ldr	r3, [r7, #4]
   2f0c0:	3354      	adds	r3, #84	; 0x54
   2f0c2:	001a      	movs	r2, r3
   2f0c4:	687b      	ldr	r3, [r7, #4]
   2f0c6:	699b      	ldr	r3, [r3, #24]
   2f0c8:	0019      	movs	r1, r3
   2f0ca:	0010      	movs	r0, r2
   2f0cc:	4b2f      	ldr	r3, [pc, #188]	; (2f18c <MQTTConnect+0x12c>)
   2f0ce:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f0d0:	687b      	ldr	r3, [r7, #4]
   2f0d2:	6918      	ldr	r0, [r3, #16]
   2f0d4:	687b      	ldr	r3, [r7, #4]
   2f0d6:	689b      	ldr	r3, [r3, #8]
   2f0d8:	0019      	movs	r1, r3
   2f0da:	683b      	ldr	r3, [r7, #0]
   2f0dc:	001a      	movs	r2, r3
   2f0de:	4b2c      	ldr	r3, [pc, #176]	; (2f190 <MQTTConnect+0x130>)
   2f0e0:	4798      	blx	r3
   2f0e2:	0003      	movs	r3, r0
   2f0e4:	673b      	str	r3, [r7, #112]	; 0x70
   2f0e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f0e8:	2b00      	cmp	r3, #0
   2f0ea:	dd39      	ble.n	2f160 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f0ec:	2364      	movs	r3, #100	; 0x64
   2f0ee:	18fa      	adds	r2, r7, r3
   2f0f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f0f2:	687b      	ldr	r3, [r7, #4]
   2f0f4:	0018      	movs	r0, r3
   2f0f6:	4b27      	ldr	r3, [pc, #156]	; (2f194 <MQTTConnect+0x134>)
   2f0f8:	4798      	blx	r3
   2f0fa:	0003      	movs	r3, r0
   2f0fc:	677b      	str	r3, [r7, #116]	; 0x74
   2f0fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f100:	2b00      	cmp	r3, #0
   2f102:	d12f      	bne.n	2f164 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f104:	2364      	movs	r3, #100	; 0x64
   2f106:	18fa      	adds	r2, r7, r3
   2f108:	687b      	ldr	r3, [r7, #4]
   2f10a:	2102      	movs	r1, #2
   2f10c:	0018      	movs	r0, r3
   2f10e:	4b22      	ldr	r3, [pc, #136]	; (2f198 <MQTTConnect+0x138>)
   2f110:	4798      	blx	r3
   2f112:	0003      	movs	r3, r0
   2f114:	2b02      	cmp	r3, #2
   2f116:	d11d      	bne.n	2f154 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f118:	230b      	movs	r3, #11
   2f11a:	18fb      	adds	r3, r7, r3
   2f11c:	22ff      	movs	r2, #255	; 0xff
   2f11e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f120:	230a      	movs	r3, #10
   2f122:	18fb      	adds	r3, r7, r3
   2f124:	2200      	movs	r2, #0
   2f126:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f128:	687b      	ldr	r3, [r7, #4]
   2f12a:	695a      	ldr	r2, [r3, #20]
   2f12c:	687b      	ldr	r3, [r7, #4]
   2f12e:	68db      	ldr	r3, [r3, #12]
   2f130:	210b      	movs	r1, #11
   2f132:	1879      	adds	r1, r7, r1
   2f134:	200a      	movs	r0, #10
   2f136:	1838      	adds	r0, r7, r0
   2f138:	4c18      	ldr	r4, [pc, #96]	; (2f19c <MQTTConnect+0x13c>)
   2f13a:	47a0      	blx	r4
   2f13c:	0003      	movs	r3, r0
   2f13e:	2b01      	cmp	r3, #1
   2f140:	d104      	bne.n	2f14c <MQTTConnect+0xec>
            rc = connack_rc;
   2f142:	230b      	movs	r3, #11
   2f144:	18fb      	adds	r3, r7, r3
   2f146:	781b      	ldrb	r3, [r3, #0]
   2f148:	677b      	str	r3, [r7, #116]	; 0x74
   2f14a:	e00c      	b.n	2f166 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2f14c:	2301      	movs	r3, #1
   2f14e:	425b      	negs	r3, r3
   2f150:	677b      	str	r3, [r7, #116]	; 0x74
   2f152:	e008      	b.n	2f166 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2f154:	2301      	movs	r3, #1
   2f156:	425b      	negs	r3, r3
   2f158:	677b      	str	r3, [r7, #116]	; 0x74
   2f15a:	e004      	b.n	2f166 <MQTTConnect+0x106>
		goto exit;
   2f15c:	46c0      	nop			; (mov r8, r8)
   2f15e:	e002      	b.n	2f166 <MQTTConnect+0x106>
        goto exit;
   2f160:	46c0      	nop			; (mov r8, r8)
   2f162:	e000      	b.n	2f166 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2f164:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2f166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f168:	2b00      	cmp	r3, #0
   2f16a:	d102      	bne.n	2f172 <MQTTConnect+0x112>
        c->isconnected = 1;
   2f16c:	687b      	ldr	r3, [r7, #4]
   2f16e:	2201      	movs	r2, #1
   2f170:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2f172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2f174:	0018      	movs	r0, r3
   2f176:	46bd      	mov	sp, r7
   2f178:	b01f      	add	sp, #124	; 0x7c
   2f17a:	bd90      	pop	{r4, r7, pc}
   2f17c:	0003a164 	.word	0x0003a164
   2f180:	00034ddd 	.word	0x00034ddd
   2f184:	0002f735 	.word	0x0002f735
   2f188:	0002f6bd 	.word	0x0002f6bd
   2f18c:	0002f6e5 	.word	0x0002f6e5
   2f190:	0002ff11 	.word	0x0002ff11
   2f194:	0002e8ad 	.word	0x0002e8ad
   2f198:	0002f015 	.word	0x0002f015
   2f19c:	0003018d 	.word	0x0003018d

0002f1a0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2f1a0:	b5b0      	push	{r4, r5, r7, lr}
   2f1a2:	b096      	sub	sp, #88	; 0x58
   2f1a4:	af04      	add	r7, sp, #16
   2f1a6:	60f8      	str	r0, [r7, #12]
   2f1a8:	60b9      	str	r1, [r7, #8]
   2f1aa:	603b      	str	r3, [r7, #0]
   2f1ac:	1dfb      	adds	r3, r7, #7
   2f1ae:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f1b0:	2301      	movs	r3, #1
   2f1b2:	425b      	negs	r3, r3
   2f1b4:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f1b6:	2300      	movs	r3, #0
   2f1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2f1ba:	2324      	movs	r3, #36	; 0x24
   2f1bc:	18fb      	adds	r3, r7, r3
   2f1be:	2200      	movs	r2, #0
   2f1c0:	601a      	str	r2, [r3, #0]
   2f1c2:	2324      	movs	r3, #36	; 0x24
   2f1c4:	18fb      	adds	r3, r7, r3
   2f1c6:	2200      	movs	r2, #0
   2f1c8:	605a      	str	r2, [r3, #4]
   2f1ca:	2324      	movs	r3, #36	; 0x24
   2f1cc:	18fb      	adds	r3, r7, r3
   2f1ce:	2200      	movs	r2, #0
   2f1d0:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2f1d2:	1dfb      	adds	r3, r7, #7
   2f1d4:	781b      	ldrb	r3, [r3, #0]
   2f1d6:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2f1d8:	2324      	movs	r3, #36	; 0x24
   2f1da:	18fb      	adds	r3, r7, r3
   2f1dc:	68ba      	ldr	r2, [r7, #8]
   2f1de:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f1e0:	68fb      	ldr	r3, [r7, #12]
   2f1e2:	6a1b      	ldr	r3, [r3, #32]
   2f1e4:	2b00      	cmp	r3, #0
   2f1e6:	d100      	bne.n	2f1ea <MQTTSubscribe+0x4a>
   2f1e8:	e088      	b.n	2f2fc <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2f1ea:	2330      	movs	r3, #48	; 0x30
   2f1ec:	18fb      	adds	r3, r7, r3
   2f1ee:	0018      	movs	r0, r3
   2f1f0:	4b47      	ldr	r3, [pc, #284]	; (2f310 <MQTTSubscribe+0x170>)
   2f1f2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f1f4:	68fb      	ldr	r3, [r7, #12]
   2f1f6:	685a      	ldr	r2, [r3, #4]
   2f1f8:	2330      	movs	r3, #48	; 0x30
   2f1fa:	18fb      	adds	r3, r7, r3
   2f1fc:	0011      	movs	r1, r2
   2f1fe:	0018      	movs	r0, r3
   2f200:	4b44      	ldr	r3, [pc, #272]	; (2f314 <MQTTSubscribe+0x174>)
   2f202:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2f204:	68fb      	ldr	r3, [r7, #12]
   2f206:	691c      	ldr	r4, [r3, #16]
   2f208:	68fb      	ldr	r3, [r7, #12]
   2f20a:	689b      	ldr	r3, [r3, #8]
   2f20c:	001d      	movs	r5, r3
   2f20e:	68fb      	ldr	r3, [r7, #12]
   2f210:	0018      	movs	r0, r3
   2f212:	4b41      	ldr	r3, [pc, #260]	; (2f318 <MQTTSubscribe+0x178>)
   2f214:	4798      	blx	r3
   2f216:	0003      	movs	r3, r0
   2f218:	b29a      	uxth	r2, r3
   2f21a:	2320      	movs	r3, #32
   2f21c:	18fb      	adds	r3, r7, r3
   2f21e:	9302      	str	r3, [sp, #8]
   2f220:	2324      	movs	r3, #36	; 0x24
   2f222:	18fb      	adds	r3, r7, r3
   2f224:	9301      	str	r3, [sp, #4]
   2f226:	2301      	movs	r3, #1
   2f228:	9300      	str	r3, [sp, #0]
   2f22a:	0013      	movs	r3, r2
   2f22c:	2200      	movs	r2, #0
   2f22e:	0029      	movs	r1, r5
   2f230:	0020      	movs	r0, r4
   2f232:	4c3a      	ldr	r4, [pc, #232]	; (2f31c <MQTTSubscribe+0x17c>)
   2f234:	47a0      	blx	r4
   2f236:	0003      	movs	r3, r0
   2f238:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2f23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f23c:	2b00      	cmp	r3, #0
   2f23e:	dd5f      	ble.n	2f300 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f240:	2330      	movs	r3, #48	; 0x30
   2f242:	18fa      	adds	r2, r7, r3
   2f244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2f246:	68fb      	ldr	r3, [r7, #12]
   2f248:	0018      	movs	r0, r3
   2f24a:	4b35      	ldr	r3, [pc, #212]	; (2f320 <MQTTSubscribe+0x180>)
   2f24c:	4798      	blx	r3
   2f24e:	0003      	movs	r3, r0
   2f250:	647b      	str	r3, [r7, #68]	; 0x44
   2f252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f254:	2b00      	cmp	r3, #0
   2f256:	d155      	bne.n	2f304 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2f258:	2330      	movs	r3, #48	; 0x30
   2f25a:	18fa      	adds	r2, r7, r3
   2f25c:	68fb      	ldr	r3, [r7, #12]
   2f25e:	2109      	movs	r1, #9
   2f260:	0018      	movs	r0, r3
   2f262:	4b30      	ldr	r3, [pc, #192]	; (2f324 <MQTTSubscribe+0x184>)
   2f264:	4798      	blx	r3
   2f266:	0003      	movs	r3, r0
   2f268:	2b09      	cmp	r3, #9
   2f26a:	d143      	bne.n	2f2f4 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2f26c:	2300      	movs	r3, #0
   2f26e:	61fb      	str	r3, [r7, #28]
   2f270:	2301      	movs	r3, #1
   2f272:	425b      	negs	r3, r3
   2f274:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2f276:	68fb      	ldr	r3, [r7, #12]
   2f278:	695a      	ldr	r2, [r3, #20]
   2f27a:	68fb      	ldr	r3, [r7, #12]
   2f27c:	68db      	ldr	r3, [r3, #12]
   2f27e:	001c      	movs	r4, r3
   2f280:	2318      	movs	r3, #24
   2f282:	18fb      	adds	r3, r7, r3
   2f284:	211c      	movs	r1, #28
   2f286:	1879      	adds	r1, r7, r1
   2f288:	2016      	movs	r0, #22
   2f28a:	1838      	adds	r0, r7, r0
   2f28c:	9401      	str	r4, [sp, #4]
   2f28e:	9200      	str	r2, [sp, #0]
   2f290:	000a      	movs	r2, r1
   2f292:	2101      	movs	r1, #1
   2f294:	4c24      	ldr	r4, [pc, #144]	; (2f328 <MQTTSubscribe+0x188>)
   2f296:	47a0      	blx	r4
   2f298:	0003      	movs	r3, r0
   2f29a:	2b01      	cmp	r3, #1
   2f29c:	d101      	bne.n	2f2a2 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2f29e:	69bb      	ldr	r3, [r7, #24]
   2f2a0:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2f2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f2a4:	2b80      	cmp	r3, #128	; 0x80
   2f2a6:	d02e      	beq.n	2f306 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f2a8:	2300      	movs	r3, #0
   2f2aa:	643b      	str	r3, [r7, #64]	; 0x40
   2f2ac:	e01e      	b.n	2f2ec <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2f2ae:	68fa      	ldr	r2, [r7, #12]
   2f2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f2b2:	3304      	adds	r3, #4
   2f2b4:	00db      	lsls	r3, r3, #3
   2f2b6:	18d3      	adds	r3, r2, r3
   2f2b8:	3304      	adds	r3, #4
   2f2ba:	681b      	ldr	r3, [r3, #0]
   2f2bc:	2b00      	cmp	r3, #0
   2f2be:	d112      	bne.n	2f2e6 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2f2c0:	68fa      	ldr	r2, [r7, #12]
   2f2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f2c4:	3304      	adds	r3, #4
   2f2c6:	00db      	lsls	r3, r3, #3
   2f2c8:	18d3      	adds	r3, r2, r3
   2f2ca:	3304      	adds	r3, #4
   2f2cc:	68ba      	ldr	r2, [r7, #8]
   2f2ce:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2f2d0:	68fa      	ldr	r2, [r7, #12]
   2f2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f2d4:	3304      	adds	r3, #4
   2f2d6:	00db      	lsls	r3, r3, #3
   2f2d8:	18d3      	adds	r3, r2, r3
   2f2da:	3308      	adds	r3, #8
   2f2dc:	683a      	ldr	r2, [r7, #0]
   2f2de:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2f2e0:	2300      	movs	r3, #0
   2f2e2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2f2e4:	e00f      	b.n	2f306 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f2e8:	3301      	adds	r3, #1
   2f2ea:	643b      	str	r3, [r7, #64]	; 0x40
   2f2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f2ee:	2b04      	cmp	r3, #4
   2f2f0:	dddd      	ble.n	2f2ae <MQTTSubscribe+0x10e>
   2f2f2:	e008      	b.n	2f306 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2f2f4:	2301      	movs	r3, #1
   2f2f6:	425b      	negs	r3, r3
   2f2f8:	647b      	str	r3, [r7, #68]	; 0x44
   2f2fa:	e004      	b.n	2f306 <MQTTSubscribe+0x166>
		goto exit;
   2f2fc:	46c0      	nop			; (mov r8, r8)
   2f2fe:	e002      	b.n	2f306 <MQTTSubscribe+0x166>
        goto exit;
   2f300:	46c0      	nop			; (mov r8, r8)
   2f302:	e000      	b.n	2f306 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2f304:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2f308:	0018      	movs	r0, r3
   2f30a:	46bd      	mov	sp, r7
   2f30c:	b012      	add	sp, #72	; 0x48
   2f30e:	bdb0      	pop	{r4, r5, r7, pc}
   2f310:	0002f735 	.word	0x0002f735
   2f314:	0002f6bd 	.word	0x0002f6bd
   2f318:	0002e87d 	.word	0x0002e87d
   2f31c:	00030c6d 	.word	0x00030c6d
   2f320:	0002e8ad 	.word	0x0002e8ad
   2f324:	0002f015 	.word	0x0002f015
   2f328:	00030dbd 	.word	0x00030dbd

0002f32c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2f32c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f32e:	46ce      	mov	lr, r9
   2f330:	4647      	mov	r7, r8
   2f332:	b580      	push	{r7, lr}
   2f334:	b097      	sub	sp, #92	; 0x5c
   2f336:	af08      	add	r7, sp, #32
   2f338:	60f8      	str	r0, [r7, #12]
   2f33a:	60b9      	str	r1, [r7, #8]
   2f33c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f33e:	2301      	movs	r3, #1
   2f340:	425b      	negs	r3, r3
   2f342:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2f344:	2318      	movs	r3, #24
   2f346:	18fb      	adds	r3, r7, r3
   2f348:	2200      	movs	r2, #0
   2f34a:	601a      	str	r2, [r3, #0]
   2f34c:	2318      	movs	r3, #24
   2f34e:	18fb      	adds	r3, r7, r3
   2f350:	2200      	movs	r2, #0
   2f352:	605a      	str	r2, [r3, #4]
   2f354:	2318      	movs	r3, #24
   2f356:	18fb      	adds	r3, r7, r3
   2f358:	2200      	movs	r2, #0
   2f35a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2f35c:	2318      	movs	r3, #24
   2f35e:	18fb      	adds	r3, r7, r3
   2f360:	68ba      	ldr	r2, [r7, #8]
   2f362:	601a      	str	r2, [r3, #0]
    int len = 0;
   2f364:	2300      	movs	r3, #0
   2f366:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f368:	68fb      	ldr	r3, [r7, #12]
   2f36a:	6a1b      	ldr	r3, [r3, #32]
   2f36c:	2b00      	cmp	r3, #0
   2f36e:	d100      	bne.n	2f372 <MQTTPublish+0x46>
   2f370:	e0a0      	b.n	2f4b4 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2f372:	2324      	movs	r3, #36	; 0x24
   2f374:	18fb      	adds	r3, r7, r3
   2f376:	0018      	movs	r0, r3
   2f378:	4b55      	ldr	r3, [pc, #340]	; (2f4d0 <MQTTPublish+0x1a4>)
   2f37a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f37c:	68fb      	ldr	r3, [r7, #12]
   2f37e:	685a      	ldr	r2, [r3, #4]
   2f380:	2324      	movs	r3, #36	; 0x24
   2f382:	18fb      	adds	r3, r7, r3
   2f384:	0011      	movs	r1, r2
   2f386:	0018      	movs	r0, r3
   2f388:	4b52      	ldr	r3, [pc, #328]	; (2f4d4 <MQTTPublish+0x1a8>)
   2f38a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2f38c:	687b      	ldr	r3, [r7, #4]
   2f38e:	781b      	ldrb	r3, [r3, #0]
   2f390:	2b01      	cmp	r3, #1
   2f392:	d003      	beq.n	2f39c <MQTTPublish+0x70>
   2f394:	687b      	ldr	r3, [r7, #4]
   2f396:	781b      	ldrb	r3, [r3, #0]
   2f398:	2b02      	cmp	r3, #2
   2f39a:	d107      	bne.n	2f3ac <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2f39c:	68fb      	ldr	r3, [r7, #12]
   2f39e:	0018      	movs	r0, r3
   2f3a0:	4b4d      	ldr	r3, [pc, #308]	; (2f4d8 <MQTTPublish+0x1ac>)
   2f3a2:	4798      	blx	r3
   2f3a4:	0003      	movs	r3, r0
   2f3a6:	b29a      	uxth	r2, r3
   2f3a8:	687b      	ldr	r3, [r7, #4]
   2f3aa:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f3ac:	68fb      	ldr	r3, [r7, #12]
   2f3ae:	691b      	ldr	r3, [r3, #16]
   2f3b0:	469c      	mov	ip, r3
   2f3b2:	68fb      	ldr	r3, [r7, #12]
   2f3b4:	689b      	ldr	r3, [r3, #8]
   2f3b6:	001d      	movs	r5, r3
   2f3b8:	687b      	ldr	r3, [r7, #4]
   2f3ba:	781b      	ldrb	r3, [r3, #0]
   2f3bc:	001e      	movs	r6, r3
   2f3be:	687b      	ldr	r3, [r7, #4]
   2f3c0:	785b      	ldrb	r3, [r3, #1]
   2f3c2:	4698      	mov	r8, r3
   2f3c4:	687b      	ldr	r3, [r7, #4]
   2f3c6:	889b      	ldrh	r3, [r3, #4]
   2f3c8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2f3ca:	687b      	ldr	r3, [r7, #4]
   2f3cc:	689a      	ldr	r2, [r3, #8]
   2f3ce:	687b      	ldr	r3, [r7, #4]
   2f3d0:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f3d2:	9306      	str	r3, [sp, #24]
   2f3d4:	9205      	str	r2, [sp, #20]
   2f3d6:	2318      	movs	r3, #24
   2f3d8:	18fa      	adds	r2, r7, r3
   2f3da:	2308      	movs	r3, #8
   2f3dc:	446b      	add	r3, sp
   2f3de:	ca13      	ldmia	r2!, {r0, r1, r4}
   2f3e0:	c313      	stmia	r3!, {r0, r1, r4}
   2f3e2:	464b      	mov	r3, r9
   2f3e4:	9301      	str	r3, [sp, #4]
   2f3e6:	4643      	mov	r3, r8
   2f3e8:	9300      	str	r3, [sp, #0]
   2f3ea:	0033      	movs	r3, r6
   2f3ec:	2200      	movs	r2, #0
   2f3ee:	0029      	movs	r1, r5
   2f3f0:	4660      	mov	r0, ip
   2f3f2:	4c3a      	ldr	r4, [pc, #232]	; (2f4dc <MQTTPublish+0x1b0>)
   2f3f4:	47a0      	blx	r4
   2f3f6:	0003      	movs	r3, r0
   2f3f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f3fc:	2b00      	cmp	r3, #0
   2f3fe:	dd5b      	ble.n	2f4b8 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f400:	2324      	movs	r3, #36	; 0x24
   2f402:	18fa      	adds	r2, r7, r3
   2f404:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2f406:	68fb      	ldr	r3, [r7, #12]
   2f408:	0018      	movs	r0, r3
   2f40a:	4b35      	ldr	r3, [pc, #212]	; (2f4e0 <MQTTPublish+0x1b4>)
   2f40c:	4798      	blx	r3
   2f40e:	0003      	movs	r3, r0
   2f410:	637b      	str	r3, [r7, #52]	; 0x34
   2f412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f414:	2b00      	cmp	r3, #0
   2f416:	d151      	bne.n	2f4bc <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2f418:	687b      	ldr	r3, [r7, #4]
   2f41a:	781b      	ldrb	r3, [r3, #0]
   2f41c:	2b01      	cmp	r3, #1
   2f41e:	d122      	bne.n	2f466 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2f420:	2324      	movs	r3, #36	; 0x24
   2f422:	18fa      	adds	r2, r7, r3
   2f424:	68fb      	ldr	r3, [r7, #12]
   2f426:	2104      	movs	r1, #4
   2f428:	0018      	movs	r0, r3
   2f42a:	4b2e      	ldr	r3, [pc, #184]	; (2f4e4 <MQTTPublish+0x1b8>)
   2f42c:	4798      	blx	r3
   2f42e:	0003      	movs	r3, r0
   2f430:	2b04      	cmp	r3, #4
   2f432:	d114      	bne.n	2f45e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f434:	68fb      	ldr	r3, [r7, #12]
   2f436:	695c      	ldr	r4, [r3, #20]
   2f438:	68fb      	ldr	r3, [r7, #12]
   2f43a:	68db      	ldr	r3, [r3, #12]
   2f43c:	2216      	movs	r2, #22
   2f43e:	18ba      	adds	r2, r7, r2
   2f440:	2115      	movs	r1, #21
   2f442:	1879      	adds	r1, r7, r1
   2f444:	2014      	movs	r0, #20
   2f446:	1838      	adds	r0, r7, r0
   2f448:	9300      	str	r3, [sp, #0]
   2f44a:	0023      	movs	r3, r4
   2f44c:	4c26      	ldr	r4, [pc, #152]	; (2f4e8 <MQTTPublish+0x1bc>)
   2f44e:	47a0      	blx	r4
   2f450:	0003      	movs	r3, r0
   2f452:	2b01      	cmp	r3, #1
   2f454:	d033      	beq.n	2f4be <MQTTPublish+0x192>
                rc = FAILURE;
   2f456:	2301      	movs	r3, #1
   2f458:	425b      	negs	r3, r3
   2f45a:	637b      	str	r3, [r7, #52]	; 0x34
   2f45c:	e02f      	b.n	2f4be <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f45e:	2301      	movs	r3, #1
   2f460:	425b      	negs	r3, r3
   2f462:	637b      	str	r3, [r7, #52]	; 0x34
   2f464:	e02b      	b.n	2f4be <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2f466:	687b      	ldr	r3, [r7, #4]
   2f468:	781b      	ldrb	r3, [r3, #0]
   2f46a:	2b02      	cmp	r3, #2
   2f46c:	d127      	bne.n	2f4be <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2f46e:	2324      	movs	r3, #36	; 0x24
   2f470:	18fa      	adds	r2, r7, r3
   2f472:	68fb      	ldr	r3, [r7, #12]
   2f474:	2107      	movs	r1, #7
   2f476:	0018      	movs	r0, r3
   2f478:	4b1a      	ldr	r3, [pc, #104]	; (2f4e4 <MQTTPublish+0x1b8>)
   2f47a:	4798      	blx	r3
   2f47c:	0003      	movs	r3, r0
   2f47e:	2b07      	cmp	r3, #7
   2f480:	d114      	bne.n	2f4ac <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f482:	68fb      	ldr	r3, [r7, #12]
   2f484:	695c      	ldr	r4, [r3, #20]
   2f486:	68fb      	ldr	r3, [r7, #12]
   2f488:	68db      	ldr	r3, [r3, #12]
   2f48a:	2212      	movs	r2, #18
   2f48c:	18ba      	adds	r2, r7, r2
   2f48e:	2111      	movs	r1, #17
   2f490:	1879      	adds	r1, r7, r1
   2f492:	2010      	movs	r0, #16
   2f494:	1838      	adds	r0, r7, r0
   2f496:	9300      	str	r3, [sp, #0]
   2f498:	0023      	movs	r3, r4
   2f49a:	4c13      	ldr	r4, [pc, #76]	; (2f4e8 <MQTTPublish+0x1bc>)
   2f49c:	47a0      	blx	r4
   2f49e:	0003      	movs	r3, r0
   2f4a0:	2b01      	cmp	r3, #1
   2f4a2:	d00c      	beq.n	2f4be <MQTTPublish+0x192>
                rc = FAILURE;
   2f4a4:	2301      	movs	r3, #1
   2f4a6:	425b      	negs	r3, r3
   2f4a8:	637b      	str	r3, [r7, #52]	; 0x34
   2f4aa:	e008      	b.n	2f4be <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f4ac:	2301      	movs	r3, #1
   2f4ae:	425b      	negs	r3, r3
   2f4b0:	637b      	str	r3, [r7, #52]	; 0x34
   2f4b2:	e004      	b.n	2f4be <MQTTPublish+0x192>
		goto exit;
   2f4b4:	46c0      	nop			; (mov r8, r8)
   2f4b6:	e002      	b.n	2f4be <MQTTPublish+0x192>
        goto exit;
   2f4b8:	46c0      	nop			; (mov r8, r8)
   2f4ba:	e000      	b.n	2f4be <MQTTPublish+0x192>
        goto exit; // there was a problem
   2f4bc:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2f4c0:	0018      	movs	r0, r3
   2f4c2:	46bd      	mov	sp, r7
   2f4c4:	b00f      	add	sp, #60	; 0x3c
   2f4c6:	bc0c      	pop	{r2, r3}
   2f4c8:	4690      	mov	r8, r2
   2f4ca:	4699      	mov	r9, r3
   2f4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f4ce:	46c0      	nop			; (mov r8, r8)
   2f4d0:	0002f735 	.word	0x0002f735
   2f4d4:	0002f6bd 	.word	0x0002f6bd
   2f4d8:	0002e87d 	.word	0x0002e87d
   2f4dc:	000309b9 	.word	0x000309b9
   2f4e0:	0002e8ad 	.word	0x0002e8ad
   2f4e4:	0002f015 	.word	0x0002f015
   2f4e8:	00030431 	.word	0x00030431

0002f4ec <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2f4ec:	b580      	push	{r7, lr}
   2f4ee:	b088      	sub	sp, #32
   2f4f0:	af00      	add	r7, sp, #0
   2f4f2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f4f4:	2301      	movs	r3, #1
   2f4f6:	425b      	negs	r3, r3
   2f4f8:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2f4fa:	2300      	movs	r3, #0
   2f4fc:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2f4fe:	230c      	movs	r3, #12
   2f500:	18fb      	adds	r3, r7, r3
   2f502:	0018      	movs	r0, r3
   2f504:	4b13      	ldr	r3, [pc, #76]	; (2f554 <MQTTDisconnect+0x68>)
   2f506:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f508:	687b      	ldr	r3, [r7, #4]
   2f50a:	685a      	ldr	r2, [r3, #4]
   2f50c:	230c      	movs	r3, #12
   2f50e:	18fb      	adds	r3, r7, r3
   2f510:	0011      	movs	r1, r2
   2f512:	0018      	movs	r0, r3
   2f514:	4b10      	ldr	r3, [pc, #64]	; (2f558 <MQTTDisconnect+0x6c>)
   2f516:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2f518:	687b      	ldr	r3, [r7, #4]
   2f51a:	691a      	ldr	r2, [r3, #16]
   2f51c:	687b      	ldr	r3, [r7, #4]
   2f51e:	689b      	ldr	r3, [r3, #8]
   2f520:	0019      	movs	r1, r3
   2f522:	0010      	movs	r0, r2
   2f524:	4b0d      	ldr	r3, [pc, #52]	; (2f55c <MQTTDisconnect+0x70>)
   2f526:	4798      	blx	r3
   2f528:	0003      	movs	r3, r0
   2f52a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2f52c:	69bb      	ldr	r3, [r7, #24]
   2f52e:	2b00      	cmp	r3, #0
   2f530:	dd08      	ble.n	2f544 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2f532:	230c      	movs	r3, #12
   2f534:	18fa      	adds	r2, r7, r3
   2f536:	69b9      	ldr	r1, [r7, #24]
   2f538:	687b      	ldr	r3, [r7, #4]
   2f53a:	0018      	movs	r0, r3
   2f53c:	4b08      	ldr	r3, [pc, #32]	; (2f560 <MQTTDisconnect+0x74>)
   2f53e:	4798      	blx	r3
   2f540:	0003      	movs	r3, r0
   2f542:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2f544:	687b      	ldr	r3, [r7, #4]
   2f546:	2200      	movs	r2, #0
   2f548:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f54a:	69fb      	ldr	r3, [r7, #28]
}
   2f54c:	0018      	movs	r0, r3
   2f54e:	46bd      	mov	sp, r7
   2f550:	b008      	add	sp, #32
   2f552:	bd80      	pop	{r7, pc}
   2f554:	0002f735 	.word	0x0002f735
   2f558:	0002f6bd 	.word	0x0002f6bd
   2f55c:	000302e5 	.word	0x000302e5
   2f560:	0002e8ad 	.word	0x0002e8ad

0002f564 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2f564:	b580      	push	{r7, lr}
   2f566:	b084      	sub	sp, #16
   2f568:	af00      	add	r7, sp, #0
   2f56a:	0002      	movs	r2, r0
   2f56c:	1dfb      	adds	r3, r7, #7
   2f56e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f570:	2300      	movs	r3, #0
   2f572:	60fb      	str	r3, [r7, #12]
   2f574:	e01c      	b.n	2f5b0 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f576:	4a12      	ldr	r2, [pc, #72]	; (2f5c0 <isMQTTSocket+0x5c>)
   2f578:	68fb      	ldr	r3, [r7, #12]
   2f57a:	2164      	movs	r1, #100	; 0x64
   2f57c:	434b      	muls	r3, r1
   2f57e:	18d3      	adds	r3, r2, r3
   2f580:	3360      	adds	r3, #96	; 0x60
   2f582:	681b      	ldr	r3, [r3, #0]
   2f584:	2b00      	cmp	r3, #0
   2f586:	d010      	beq.n	2f5aa <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f588:	4a0d      	ldr	r2, [pc, #52]	; (2f5c0 <isMQTTSocket+0x5c>)
   2f58a:	68fb      	ldr	r3, [r7, #12]
   2f58c:	2164      	movs	r1, #100	; 0x64
   2f58e:	434b      	muls	r3, r1
   2f590:	18d3      	adds	r3, r2, r3
   2f592:	3360      	adds	r3, #96	; 0x60
   2f594:	681b      	ldr	r3, [r3, #0]
   2f596:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f598:	68bb      	ldr	r3, [r7, #8]
   2f59a:	6a1a      	ldr	r2, [r3, #32]
   2f59c:	1dfb      	adds	r3, r7, #7
   2f59e:	781b      	ldrb	r3, [r3, #0]
   2f5a0:	b25b      	sxtb	r3, r3
   2f5a2:	429a      	cmp	r2, r3
   2f5a4:	d101      	bne.n	2f5aa <isMQTTSocket+0x46>
				return true;
   2f5a6:	2301      	movs	r3, #1
   2f5a8:	e006      	b.n	2f5b8 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f5aa:	68fb      	ldr	r3, [r7, #12]
   2f5ac:	3301      	adds	r3, #1
   2f5ae:	60fb      	str	r3, [r7, #12]
   2f5b0:	68fb      	ldr	r3, [r7, #12]
   2f5b2:	2b06      	cmp	r3, #6
   2f5b4:	d9df      	bls.n	2f576 <isMQTTSocket+0x12>
		}
	}
	return false;
   2f5b6:	2300      	movs	r3, #0
}
   2f5b8:	0018      	movs	r0, r3
   2f5ba:	46bd      	mov	sp, r7
   2f5bc:	b004      	add	sp, #16
   2f5be:	bd80      	pop	{r7, pc}
   2f5c0:	20004430 	.word	0x20004430

0002f5c4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f5c4:	b580      	push	{r7, lr}
   2f5c6:	b082      	sub	sp, #8
   2f5c8:	af00      	add	r7, sp, #0
   2f5ca:	6078      	str	r0, [r7, #4]
   2f5cc:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f5ce:	4b0d      	ldr	r3, [pc, #52]	; (2f604 <dnsResolveCallback+0x40>)
   2f5d0:	781b      	ldrb	r3, [r3, #0]
   2f5d2:	2201      	movs	r2, #1
   2f5d4:	4053      	eors	r3, r2
   2f5d6:	b2db      	uxtb	r3, r3
   2f5d8:	2b00      	cmp	r3, #0
   2f5da:	d00e      	beq.n	2f5fa <dnsResolveCallback+0x36>
   2f5dc:	4b0a      	ldr	r3, [pc, #40]	; (2f608 <dnsResolveCallback+0x44>)
   2f5de:	681b      	ldr	r3, [r3, #0]
   2f5e0:	687a      	ldr	r2, [r7, #4]
   2f5e2:	0011      	movs	r1, r2
   2f5e4:	0018      	movs	r0, r3
   2f5e6:	4b09      	ldr	r3, [pc, #36]	; (2f60c <dnsResolveCallback+0x48>)
   2f5e8:	4798      	blx	r3
   2f5ea:	1e03      	subs	r3, r0, #0
   2f5ec:	d105      	bne.n	2f5fa <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f5ee:	683a      	ldr	r2, [r7, #0]
   2f5f0:	4b07      	ldr	r3, [pc, #28]	; (2f610 <dnsResolveCallback+0x4c>)
   2f5f2:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f5f4:	4b03      	ldr	r3, [pc, #12]	; (2f604 <dnsResolveCallback+0x40>)
   2f5f6:	2201      	movs	r2, #1
   2f5f8:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f5fa:	46c0      	nop			; (mov r8, r8)
   2f5fc:	46bd      	mov	sp, r7
   2f5fe:	b002      	add	sp, #8
   2f600:	bd80      	pop	{r7, pc}
   2f602:	46c0      	nop			; (mov r8, r8)
   2f604:	20004320 	.word	0x20004320
   2f608:	2000442c 	.word	0x2000442c
   2f60c:	0003516b 	.word	0x0003516b
   2f610:	20004318 	.word	0x20004318

0002f614 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f614:	b580      	push	{r7, lr}
   2f616:	b084      	sub	sp, #16
   2f618:	af00      	add	r7, sp, #0
   2f61a:	603a      	str	r2, [r7, #0]
   2f61c:	1dfb      	adds	r3, r7, #7
   2f61e:	1c02      	adds	r2, r0, #0
   2f620:	701a      	strb	r2, [r3, #0]
   2f622:	1dbb      	adds	r3, r7, #6
   2f624:	1c0a      	adds	r2, r1, #0
   2f626:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f628:	1dfb      	adds	r3, r7, #7
   2f62a:	781b      	ldrb	r3, [r3, #0]
   2f62c:	b25b      	sxtb	r3, r3
   2f62e:	0018      	movs	r0, r3
   2f630:	4b12      	ldr	r3, [pc, #72]	; (2f67c <tcpClientSocketEventHandler+0x68>)
   2f632:	4798      	blx	r3
   2f634:	1e03      	subs	r3, r0, #0
   2f636:	d01c      	beq.n	2f672 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f638:	1dbb      	adds	r3, r7, #6
   2f63a:	781b      	ldrb	r3, [r3, #0]
   2f63c:	2b06      	cmp	r3, #6
   2f63e:	d00c      	beq.n	2f65a <tcpClientSocketEventHandler+0x46>
   2f640:	2b07      	cmp	r3, #7
   2f642:	d006      	beq.n	2f652 <tcpClientSocketEventHandler+0x3e>
   2f644:	2b05      	cmp	r3, #5
   2f646:	d000      	beq.n	2f64a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f648:	e013      	b.n	2f672 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f64a:	4b0d      	ldr	r3, [pc, #52]	; (2f680 <tcpClientSocketEventHandler+0x6c>)
   2f64c:	2201      	movs	r2, #1
   2f64e:	701a      	strb	r2, [r3, #0]
			break;
   2f650:	e00f      	b.n	2f672 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f652:	4b0c      	ldr	r3, [pc, #48]	; (2f684 <tcpClientSocketEventHandler+0x70>)
   2f654:	2201      	movs	r2, #1
   2f656:	701a      	strb	r2, [r3, #0]
			break;
   2f658:	e00b      	b.n	2f672 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f65a:	683b      	ldr	r3, [r7, #0]
   2f65c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f65e:	68fb      	ldr	r3, [r7, #12]
   2f660:	2204      	movs	r2, #4
   2f662:	5e9b      	ldrsh	r3, [r3, r2]
   2f664:	001a      	movs	r2, r3
   2f666:	4b08      	ldr	r3, [pc, #32]	; (2f688 <tcpClientSocketEventHandler+0x74>)
   2f668:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f66a:	4b08      	ldr	r3, [pc, #32]	; (2f68c <tcpClientSocketEventHandler+0x78>)
   2f66c:	2201      	movs	r2, #1
   2f66e:	701a      	strb	r2, [r3, #0]
			break;
   2f670:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f672:	46c0      	nop			; (mov r8, r8)
   2f674:	46bd      	mov	sp, r7
   2f676:	b004      	add	sp, #16
   2f678:	bd80      	pop	{r7, pc}
   2f67a:	46c0      	nop			; (mov r8, r8)
   2f67c:	0002f565 	.word	0x0002f565
   2f680:	20004321 	.word	0x20004321
   2f684:	20004322 	.word	0x20004322
   2f688:	2000431c 	.word	0x2000431c
   2f68c:	20004323 	.word	0x20004323

0002f690 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f690:	b580      	push	{r7, lr}
   2f692:	b082      	sub	sp, #8
   2f694:	af00      	add	r7, sp, #0
   2f696:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f698:	687b      	ldr	r3, [r7, #4]
   2f69a:	3304      	adds	r3, #4
   2f69c:	687a      	ldr	r2, [r7, #4]
   2f69e:	0011      	movs	r1, r2
   2f6a0:	0018      	movs	r0, r3
   2f6a2:	4b05      	ldr	r3, [pc, #20]	; (2f6b8 <TimerIsExpired+0x28>)
   2f6a4:	4798      	blx	r3
   2f6a6:	0003      	movs	r3, r0
   2f6a8:	3b01      	subs	r3, #1
   2f6aa:	425a      	negs	r2, r3
   2f6ac:	4153      	adcs	r3, r2
   2f6ae:	b2db      	uxtb	r3, r3
}
   2f6b0:	0018      	movs	r0, r3
   2f6b2:	46bd      	mov	sp, r7
   2f6b4:	b002      	add	sp, #8
   2f6b6:	bd80      	pop	{r7, pc}
   2f6b8:	0001d001 	.word	0x0001d001

0002f6bc <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f6bc:	b580      	push	{r7, lr}
   2f6be:	b082      	sub	sp, #8
   2f6c0:	af00      	add	r7, sp, #0
   2f6c2:	6078      	str	r0, [r7, #4]
   2f6c4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f6c6:	687b      	ldr	r3, [r7, #4]
   2f6c8:	683a      	ldr	r2, [r7, #0]
   2f6ca:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f6cc:	687b      	ldr	r3, [r7, #4]
   2f6ce:	3304      	adds	r3, #4
   2f6d0:	0018      	movs	r0, r3
   2f6d2:	4b03      	ldr	r3, [pc, #12]	; (2f6e0 <TimerCountdownMS+0x24>)
   2f6d4:	4798      	blx	r3
}
   2f6d6:	46c0      	nop			; (mov r8, r8)
   2f6d8:	46bd      	mov	sp, r7
   2f6da:	b002      	add	sp, #8
   2f6dc:	bd80      	pop	{r7, pc}
   2f6de:	46c0      	nop			; (mov r8, r8)
   2f6e0:	0001cf95 	.word	0x0001cf95

0002f6e4 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f6e4:	b580      	push	{r7, lr}
   2f6e6:	b082      	sub	sp, #8
   2f6e8:	af00      	add	r7, sp, #0
   2f6ea:	6078      	str	r0, [r7, #4]
   2f6ec:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f6ee:	683b      	ldr	r3, [r7, #0]
   2f6f0:	22fa      	movs	r2, #250	; 0xfa
   2f6f2:	0092      	lsls	r2, r2, #2
   2f6f4:	435a      	muls	r2, r3
   2f6f6:	687b      	ldr	r3, [r7, #4]
   2f6f8:	0011      	movs	r1, r2
   2f6fa:	0018      	movs	r0, r3
   2f6fc:	4b02      	ldr	r3, [pc, #8]	; (2f708 <TimerCountdown+0x24>)
   2f6fe:	4798      	blx	r3
}
   2f700:	46c0      	nop			; (mov r8, r8)
   2f702:	46bd      	mov	sp, r7
   2f704:	b002      	add	sp, #8
   2f706:	bd80      	pop	{r7, pc}
   2f708:	0002f6bd 	.word	0x0002f6bd

0002f70c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f70c:	b580      	push	{r7, lr}
   2f70e:	b082      	sub	sp, #8
   2f710:	af00      	add	r7, sp, #0
   2f712:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f714:	687b      	ldr	r3, [r7, #4]
   2f716:	3304      	adds	r3, #4
   2f718:	687a      	ldr	r2, [r7, #4]
   2f71a:	0011      	movs	r1, r2
   2f71c:	0018      	movs	r0, r3
   2f71e:	4b04      	ldr	r3, [pc, #16]	; (2f730 <TimerLeftMS+0x24>)
   2f720:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f722:	687b      	ldr	r3, [r7, #4]
   2f724:	681b      	ldr	r3, [r3, #0]
}
   2f726:	0018      	movs	r0, r3
   2f728:	46bd      	mov	sp, r7
   2f72a:	b002      	add	sp, #8
   2f72c:	bd80      	pop	{r7, pc}
   2f72e:	46c0      	nop			; (mov r8, r8)
   2f730:	0001d001 	.word	0x0001d001

0002f734 <TimerInit>:


void TimerInit(Timer* timer) {
   2f734:	b580      	push	{r7, lr}
   2f736:	b082      	sub	sp, #8
   2f738:	af00      	add	r7, sp, #0
   2f73a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f73c:	687b      	ldr	r3, [r7, #4]
   2f73e:	2200      	movs	r2, #0
   2f740:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f742:	687b      	ldr	r3, [r7, #4]
   2f744:	3304      	adds	r3, #4
   2f746:	2208      	movs	r2, #8
   2f748:	2100      	movs	r1, #0
   2f74a:	0018      	movs	r0, r3
   2f74c:	4b02      	ldr	r3, [pc, #8]	; (2f758 <TimerInit+0x24>)
   2f74e:	4798      	blx	r3
}
   2f750:	46c0      	nop			; (mov r8, r8)
   2f752:	46bd      	mov	sp, r7
   2f754:	b002      	add	sp, #8
   2f756:	bd80      	pop	{r7, pc}
   2f758:	00034e13 	.word	0x00034e13

0002f75c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f75c:	b590      	push	{r4, r7, lr}
   2f75e:	b085      	sub	sp, #20
   2f760:	af00      	add	r7, sp, #0
   2f762:	60f8      	str	r0, [r7, #12]
   2f764:	60b9      	str	r1, [r7, #8]
   2f766:	607a      	str	r2, [r7, #4]
   2f768:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f76a:	683b      	ldr	r3, [r7, #0]
   2f76c:	2b00      	cmp	r3, #0
   2f76e:	d101      	bne.n	2f774 <WINC1500_read+0x18>
   2f770:	230a      	movs	r3, #10
   2f772:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f774:	4b2c      	ldr	r3, [pc, #176]	; (2f828 <WINC1500_read+0xcc>)
   2f776:	681b      	ldr	r3, [r3, #0]
   2f778:	2b00      	cmp	r3, #0
   2f77a:	d131      	bne.n	2f7e0 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f77c:	4b2b      	ldr	r3, [pc, #172]	; (2f82c <WINC1500_read+0xd0>)
   2f77e:	2200      	movs	r2, #0
   2f780:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f782:	68fb      	ldr	r3, [r7, #12]
   2f784:	681b      	ldr	r3, [r3, #0]
   2f786:	b258      	sxtb	r0, r3
   2f788:	683c      	ldr	r4, [r7, #0]
   2f78a:	2380      	movs	r3, #128	; 0x80
   2f78c:	005a      	lsls	r2, r3, #1
   2f78e:	4928      	ldr	r1, [pc, #160]	; (2f830 <WINC1500_read+0xd4>)
   2f790:	0023      	movs	r3, r4
   2f792:	4c28      	ldr	r4, [pc, #160]	; (2f834 <WINC1500_read+0xd8>)
   2f794:	47a0      	blx	r4
   2f796:	1e03      	subs	r3, r0, #0
   2f798:	d005      	beq.n	2f7a6 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f79a:	2301      	movs	r3, #1
   2f79c:	425b      	negs	r3, r3
   2f79e:	e03e      	b.n	2f81e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f7a0:	2000      	movs	r0, #0
   2f7a2:	4b25      	ldr	r3, [pc, #148]	; (2f838 <WINC1500_read+0xdc>)
   2f7a4:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f7a6:	4b21      	ldr	r3, [pc, #132]	; (2f82c <WINC1500_read+0xd0>)
   2f7a8:	781b      	ldrb	r3, [r3, #0]
   2f7aa:	2201      	movs	r2, #1
   2f7ac:	4053      	eors	r3, r2
   2f7ae:	b2db      	uxtb	r3, r3
   2f7b0:	2b00      	cmp	r3, #0
   2f7b2:	d1f5      	bne.n	2f7a0 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f7b4:	4b21      	ldr	r3, [pc, #132]	; (2f83c <WINC1500_read+0xe0>)
   2f7b6:	681b      	ldr	r3, [r3, #0]
   2f7b8:	2b00      	cmp	r3, #0
   2f7ba:	dd08      	ble.n	2f7ce <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f7bc:	4b1f      	ldr	r3, [pc, #124]	; (2f83c <WINC1500_read+0xe0>)
   2f7be:	681b      	ldr	r3, [r3, #0]
   2f7c0:	001a      	movs	r2, r3
   2f7c2:	4b19      	ldr	r3, [pc, #100]	; (2f828 <WINC1500_read+0xcc>)
   2f7c4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f7c6:	4b1e      	ldr	r3, [pc, #120]	; (2f840 <WINC1500_read+0xe4>)
   2f7c8:	2200      	movs	r2, #0
   2f7ca:	601a      	str	r2, [r3, #0]
   2f7cc:	e008      	b.n	2f7e0 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f7ce:	4b16      	ldr	r3, [pc, #88]	; (2f828 <WINC1500_read+0xcc>)
   2f7d0:	2200      	movs	r2, #0
   2f7d2:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f7d4:	4b1a      	ldr	r3, [pc, #104]	; (2f840 <WINC1500_read+0xe4>)
   2f7d6:	2200      	movs	r2, #0
   2f7d8:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f7da:	4b18      	ldr	r3, [pc, #96]	; (2f83c <WINC1500_read+0xe0>)
   2f7dc:	681b      	ldr	r3, [r3, #0]
   2f7de:	e01e      	b.n	2f81e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f7e0:	4b11      	ldr	r3, [pc, #68]	; (2f828 <WINC1500_read+0xcc>)
   2f7e2:	681b      	ldr	r3, [r3, #0]
   2f7e4:	001a      	movs	r2, r3
   2f7e6:	687b      	ldr	r3, [r7, #4]
   2f7e8:	4293      	cmp	r3, r2
   2f7ea:	dd02      	ble.n	2f7f2 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f7ec:	2301      	movs	r3, #1
   2f7ee:	425b      	negs	r3, r3
   2f7f0:	e015      	b.n	2f81e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f7f2:	4b13      	ldr	r3, [pc, #76]	; (2f840 <WINC1500_read+0xe4>)
   2f7f4:	681a      	ldr	r2, [r3, #0]
   2f7f6:	4b0e      	ldr	r3, [pc, #56]	; (2f830 <WINC1500_read+0xd4>)
   2f7f8:	18d1      	adds	r1, r2, r3
   2f7fa:	687a      	ldr	r2, [r7, #4]
   2f7fc:	68bb      	ldr	r3, [r7, #8]
   2f7fe:	0018      	movs	r0, r3
   2f800:	4b10      	ldr	r3, [pc, #64]	; (2f844 <WINC1500_read+0xe8>)
   2f802:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f804:	4b08      	ldr	r3, [pc, #32]	; (2f828 <WINC1500_read+0xcc>)
   2f806:	681a      	ldr	r2, [r3, #0]
   2f808:	687b      	ldr	r3, [r7, #4]
   2f80a:	1ad2      	subs	r2, r2, r3
   2f80c:	4b06      	ldr	r3, [pc, #24]	; (2f828 <WINC1500_read+0xcc>)
   2f80e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f810:	4b0b      	ldr	r3, [pc, #44]	; (2f840 <WINC1500_read+0xe4>)
   2f812:	681a      	ldr	r2, [r3, #0]
   2f814:	687b      	ldr	r3, [r7, #4]
   2f816:	18d2      	adds	r2, r2, r3
   2f818:	4b09      	ldr	r3, [pc, #36]	; (2f840 <WINC1500_read+0xe4>)
   2f81a:	601a      	str	r2, [r3, #0]
  
  return len;
   2f81c:	687b      	ldr	r3, [r7, #4]
}
   2f81e:	0018      	movs	r0, r3
   2f820:	46bd      	mov	sp, r7
   2f822:	b005      	add	sp, #20
   2f824:	bd90      	pop	{r4, r7, pc}
   2f826:	46c0      	nop			; (mov r8, r8)
   2f828:	20004428 	.word	0x20004428
   2f82c:	20004323 	.word	0x20004323
   2f830:	20004324 	.word	0x20004324
   2f834:	00025e11 	.word	0x00025e11
   2f838:	00022359 	.word	0x00022359
   2f83c:	2000431c 	.word	0x2000431c
   2f840:	20004424 	.word	0x20004424
   2f844:	00034ddd 	.word	0x00034ddd

0002f848 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f848:	b590      	push	{r4, r7, lr}
   2f84a:	b085      	sub	sp, #20
   2f84c:	af00      	add	r7, sp, #0
   2f84e:	60f8      	str	r0, [r7, #12]
   2f850:	60b9      	str	r1, [r7, #8]
   2f852:	607a      	str	r2, [r7, #4]
   2f854:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f856:	4b10      	ldr	r3, [pc, #64]	; (2f898 <WINC1500_write+0x50>)
   2f858:	2200      	movs	r2, #0
   2f85a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f85c:	68fb      	ldr	r3, [r7, #12]
   2f85e:	681b      	ldr	r3, [r3, #0]
   2f860:	b258      	sxtb	r0, r3
   2f862:	687b      	ldr	r3, [r7, #4]
   2f864:	b29a      	uxth	r2, r3
   2f866:	68b9      	ldr	r1, [r7, #8]
   2f868:	2300      	movs	r3, #0
   2f86a:	4c0c      	ldr	r4, [pc, #48]	; (2f89c <WINC1500_write+0x54>)
   2f86c:	47a0      	blx	r4
   2f86e:	1e03      	subs	r3, r0, #0
   2f870:	d005      	beq.n	2f87e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f872:	2301      	movs	r3, #1
   2f874:	425b      	negs	r3, r3
   2f876:	e00a      	b.n	2f88e <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f878:	2000      	movs	r0, #0
   2f87a:	4b09      	ldr	r3, [pc, #36]	; (2f8a0 <WINC1500_write+0x58>)
   2f87c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f87e:	4b06      	ldr	r3, [pc, #24]	; (2f898 <WINC1500_write+0x50>)
   2f880:	781b      	ldrb	r3, [r3, #0]
   2f882:	2201      	movs	r2, #1
   2f884:	4053      	eors	r3, r2
   2f886:	b2db      	uxtb	r3, r3
   2f888:	2b00      	cmp	r3, #0
   2f88a:	d1f5      	bne.n	2f878 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f88c:	687b      	ldr	r3, [r7, #4]
}
   2f88e:	0018      	movs	r0, r3
   2f890:	46bd      	mov	sp, r7
   2f892:	b005      	add	sp, #20
   2f894:	bd90      	pop	{r4, r7, pc}
   2f896:	46c0      	nop			; (mov r8, r8)
   2f898:	20004322 	.word	0x20004322
   2f89c:	00025cad 	.word	0x00025cad
   2f8a0:	00022359 	.word	0x00022359

0002f8a4 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f8a4:	b580      	push	{r7, lr}
   2f8a6:	b082      	sub	sp, #8
   2f8a8:	af00      	add	r7, sp, #0
   2f8aa:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f8ac:	687b      	ldr	r3, [r7, #4]
   2f8ae:	681b      	ldr	r3, [r3, #0]
   2f8b0:	b25b      	sxtb	r3, r3
   2f8b2:	0018      	movs	r0, r3
   2f8b4:	4b06      	ldr	r3, [pc, #24]	; (2f8d0 <WINC1500_disconnect+0x2c>)
   2f8b6:	4798      	blx	r3
	n->socket=-1;
   2f8b8:	687b      	ldr	r3, [r7, #4]
   2f8ba:	2201      	movs	r2, #1
   2f8bc:	4252      	negs	r2, r2
   2f8be:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f8c0:	4b04      	ldr	r3, [pc, #16]	; (2f8d4 <WINC1500_disconnect+0x30>)
   2f8c2:	2200      	movs	r2, #0
   2f8c4:	701a      	strb	r2, [r3, #0]
}
   2f8c6:	46c0      	nop			; (mov r8, r8)
   2f8c8:	46bd      	mov	sp, r7
   2f8ca:	b002      	add	sp, #8
   2f8cc:	bd80      	pop	{r7, pc}
   2f8ce:	46c0      	nop			; (mov r8, r8)
   2f8d0:	00025f91 	.word	0x00025f91
   2f8d4:	20004321 	.word	0x20004321

0002f8d8 <NetworkInit>:


void NetworkInit(Network* n) {
   2f8d8:	b580      	push	{r7, lr}
   2f8da:	b082      	sub	sp, #8
   2f8dc:	af00      	add	r7, sp, #0
   2f8de:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f8e0:	687b      	ldr	r3, [r7, #4]
   2f8e2:	2201      	movs	r2, #1
   2f8e4:	4252      	negs	r2, r2
   2f8e6:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f8e8:	687b      	ldr	r3, [r7, #4]
   2f8ea:	4a06      	ldr	r2, [pc, #24]	; (2f904 <NetworkInit+0x2c>)
   2f8ec:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f8ee:	687b      	ldr	r3, [r7, #4]
   2f8f0:	4a05      	ldr	r2, [pc, #20]	; (2f908 <NetworkInit+0x30>)
   2f8f2:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f8f4:	687b      	ldr	r3, [r7, #4]
   2f8f6:	4a05      	ldr	r2, [pc, #20]	; (2f90c <NetworkInit+0x34>)
   2f8f8:	611a      	str	r2, [r3, #16]
}
   2f8fa:	46c0      	nop			; (mov r8, r8)
   2f8fc:	46bd      	mov	sp, r7
   2f8fe:	b002      	add	sp, #8
   2f900:	bd80      	pop	{r7, pc}
   2f902:	46c0      	nop			; (mov r8, r8)
   2f904:	0002f75d 	.word	0x0002f75d
   2f908:	0002f849 	.word	0x0002f849
   2f90c:	0002f8a5 	.word	0x0002f8a5

0002f910 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f910:	b580      	push	{r7, lr}
   2f912:	b088      	sub	sp, #32
   2f914:	af00      	add	r7, sp, #0
   2f916:	60f8      	str	r0, [r7, #12]
   2f918:	60b9      	str	r1, [r7, #8]
   2f91a:	607a      	str	r2, [r7, #4]
   2f91c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f91e:	4b37      	ldr	r3, [pc, #220]	; (2f9fc <ConnectNetwork+0xec>)
   2f920:	2200      	movs	r2, #0
   2f922:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f924:	4b36      	ldr	r3, [pc, #216]	; (2fa00 <ConnectNetwork+0xf0>)
   2f926:	68ba      	ldr	r2, [r7, #8]
   2f928:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f92a:	68bb      	ldr	r3, [r7, #8]
   2f92c:	0018      	movs	r0, r3
   2f92e:	4b35      	ldr	r3, [pc, #212]	; (2fa04 <ConnectNetwork+0xf4>)
   2f930:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f932:	e002      	b.n	2f93a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f934:	2000      	movs	r0, #0
   2f936:	4b34      	ldr	r3, [pc, #208]	; (2fa08 <ConnectNetwork+0xf8>)
   2f938:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f93a:	4b30      	ldr	r3, [pc, #192]	; (2f9fc <ConnectNetwork+0xec>)
   2f93c:	781b      	ldrb	r3, [r3, #0]
   2f93e:	2201      	movs	r2, #1
   2f940:	4053      	eors	r3, r2
   2f942:	b2db      	uxtb	r3, r3
   2f944:	2b00      	cmp	r3, #0
   2f946:	d1f5      	bne.n	2f934 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f948:	4b30      	ldr	r3, [pc, #192]	; (2fa0c <ConnectNetwork+0xfc>)
   2f94a:	681a      	ldr	r2, [r3, #0]
   2f94c:	68fb      	ldr	r3, [r7, #12]
   2f94e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f950:	2310      	movs	r3, #16
   2f952:	18fb      	adds	r3, r7, r3
   2f954:	2202      	movs	r2, #2
   2f956:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f958:	687b      	ldr	r3, [r7, #4]
   2f95a:	b29b      	uxth	r3, r3
   2f95c:	021b      	lsls	r3, r3, #8
   2f95e:	b21a      	sxth	r2, r3
   2f960:	687b      	ldr	r3, [r7, #4]
   2f962:	b29b      	uxth	r3, r3
   2f964:	0a1b      	lsrs	r3, r3, #8
   2f966:	b29b      	uxth	r3, r3
   2f968:	b21b      	sxth	r3, r3
   2f96a:	4313      	orrs	r3, r2
   2f96c:	b21b      	sxth	r3, r3
   2f96e:	b29a      	uxth	r2, r3
   2f970:	2310      	movs	r3, #16
   2f972:	18fb      	adds	r3, r7, r3
   2f974:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f976:	4b25      	ldr	r3, [pc, #148]	; (2fa0c <ConnectNetwork+0xfc>)
   2f978:	681b      	ldr	r3, [r3, #0]
   2f97a:	001a      	movs	r2, r3
   2f97c:	2310      	movs	r3, #16
   2f97e:	18fb      	adds	r3, r7, r3
   2f980:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f982:	68fb      	ldr	r3, [r7, #12]
   2f984:	681b      	ldr	r3, [r3, #0]
   2f986:	2b00      	cmp	r3, #0
   2f988:	da0a      	bge.n	2f9a0 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f98a:	683b      	ldr	r3, [r7, #0]
   2f98c:	b2db      	uxtb	r3, r3
   2f98e:	001a      	movs	r2, r3
   2f990:	2101      	movs	r1, #1
   2f992:	2002      	movs	r0, #2
   2f994:	4b1e      	ldr	r3, [pc, #120]	; (2fa10 <ConnectNetwork+0x100>)
   2f996:	4798      	blx	r3
   2f998:	0003      	movs	r3, r0
   2f99a:	001a      	movs	r2, r3
   2f99c:	68fb      	ldr	r3, [r7, #12]
   2f99e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f9a0:	68fb      	ldr	r3, [r7, #12]
   2f9a2:	681b      	ldr	r3, [r3, #0]
   2f9a4:	3301      	adds	r3, #1
   2f9a6:	d108      	bne.n	2f9ba <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f9a8:	68fb      	ldr	r3, [r7, #12]
   2f9aa:	681b      	ldr	r3, [r3, #0]
   2f9ac:	b25b      	sxtb	r3, r3
   2f9ae:	0018      	movs	r0, r3
   2f9b0:	4b18      	ldr	r3, [pc, #96]	; (2fa14 <ConnectNetwork+0x104>)
   2f9b2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f9b4:	2309      	movs	r3, #9
   2f9b6:	425b      	negs	r3, r3
   2f9b8:	e01c      	b.n	2f9f4 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f9ba:	68fb      	ldr	r3, [r7, #12]
   2f9bc:	681b      	ldr	r3, [r3, #0]
   2f9be:	b25b      	sxtb	r3, r3
   2f9c0:	2210      	movs	r2, #16
   2f9c2:	18b9      	adds	r1, r7, r2
   2f9c4:	2210      	movs	r2, #16
   2f9c6:	0018      	movs	r0, r3
   2f9c8:	4b13      	ldr	r3, [pc, #76]	; (2fa18 <ConnectNetwork+0x108>)
   2f9ca:	4798      	blx	r3
   2f9cc:	1e03      	subs	r3, r0, #0
   2f9ce:	d002      	beq.n	2f9d6 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f9d0:	2309      	movs	r3, #9
   2f9d2:	425b      	negs	r3, r3
   2f9d4:	e00e      	b.n	2f9f4 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f9d6:	4b11      	ldr	r3, [pc, #68]	; (2fa1c <ConnectNetwork+0x10c>)
   2f9d8:	2200      	movs	r2, #0
   2f9da:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f9dc:	e002      	b.n	2f9e4 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f9de:	2000      	movs	r0, #0
   2f9e0:	4b09      	ldr	r3, [pc, #36]	; (2fa08 <ConnectNetwork+0xf8>)
   2f9e2:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f9e4:	4b0d      	ldr	r3, [pc, #52]	; (2fa1c <ConnectNetwork+0x10c>)
   2f9e6:	781b      	ldrb	r3, [r3, #0]
   2f9e8:	2201      	movs	r2, #1
   2f9ea:	4053      	eors	r3, r2
   2f9ec:	b2db      	uxtb	r3, r3
   2f9ee:	2b00      	cmp	r3, #0
   2f9f0:	d1f5      	bne.n	2f9de <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f9f2:	2300      	movs	r3, #0
   2f9f4:	0018      	movs	r0, r3
   2f9f6:	46bd      	mov	sp, r7
   2f9f8:	b008      	add	sp, #32
   2f9fa:	bd80      	pop	{r7, pc}
   2f9fc:	20004320 	.word	0x20004320
   2fa00:	2000442c 	.word	0x2000442c
   2fa04:	000261d9 	.word	0x000261d9
   2fa08:	00022359 	.word	0x00022359
   2fa0c:	20004318 	.word	0x20004318
   2fa10:	00025985 	.word	0x00025985
   2fa14:	00025f91 	.word	0x00025f91
   2fa18:	00025b99 	.word	0x00025b99
   2fa1c:	20004321 	.word	0x20004321

0002fa20 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2fa20:	b580      	push	{r7, lr}
   2fa22:	b084      	sub	sp, #16
   2fa24:	af00      	add	r7, sp, #0
   2fa26:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2fa28:	687b      	ldr	r3, [r7, #4]
   2fa2a:	2b00      	cmp	r3, #0
   2fa2c:	d022      	beq.n	2fa74 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fa2e:	2300      	movs	r3, #0
   2fa30:	60fb      	str	r3, [r7, #12]
   2fa32:	e01b      	b.n	2fa6c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2fa34:	4a11      	ldr	r2, [pc, #68]	; (2fa7c <allocateClient+0x5c>)
   2fa36:	68fb      	ldr	r3, [r7, #12]
   2fa38:	2164      	movs	r1, #100	; 0x64
   2fa3a:	434b      	muls	r3, r1
   2fa3c:	18d3      	adds	r3, r2, r3
   2fa3e:	3360      	adds	r3, #96	; 0x60
   2fa40:	681b      	ldr	r3, [r3, #0]
   2fa42:	2b00      	cmp	r3, #0
   2fa44:	d10f      	bne.n	2fa66 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2fa46:	4a0d      	ldr	r2, [pc, #52]	; (2fa7c <allocateClient+0x5c>)
   2fa48:	68fb      	ldr	r3, [r7, #12]
   2fa4a:	2164      	movs	r1, #100	; 0x64
   2fa4c:	434b      	muls	r3, r1
   2fa4e:	18d3      	adds	r3, r2, r3
   2fa50:	3360      	adds	r3, #96	; 0x60
   2fa52:	687a      	ldr	r2, [r7, #4]
   2fa54:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2fa56:	68fb      	ldr	r3, [r7, #12]
   2fa58:	2264      	movs	r2, #100	; 0x64
   2fa5a:	435a      	muls	r2, r3
   2fa5c:	4b07      	ldr	r3, [pc, #28]	; (2fa7c <allocateClient+0x5c>)
   2fa5e:	18d2      	adds	r2, r2, r3
   2fa60:	687b      	ldr	r3, [r7, #4]
   2fa62:	61da      	str	r2, [r3, #28]
			return;
   2fa64:	e007      	b.n	2fa76 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fa66:	68fb      	ldr	r3, [r7, #12]
   2fa68:	3301      	adds	r3, #1
   2fa6a:	60fb      	str	r3, [r7, #12]
   2fa6c:	68fb      	ldr	r3, [r7, #12]
   2fa6e:	2b06      	cmp	r3, #6
   2fa70:	d9e0      	bls.n	2fa34 <allocateClient+0x14>
   2fa72:	e000      	b.n	2fa76 <allocateClient+0x56>
		return;
   2fa74:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2fa76:	46bd      	mov	sp, r7
   2fa78:	b004      	add	sp, #16
   2fa7a:	bd80      	pop	{r7, pc}
   2fa7c:	20004430 	.word	0x20004430

0002fa80 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2fa80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa82:	b089      	sub	sp, #36	; 0x24
   2fa84:	af04      	add	r7, sp, #16
   2fa86:	6078      	str	r0, [r7, #4]
   2fa88:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2fa8a:	687b      	ldr	r3, [r7, #4]
   2fa8c:	2b00      	cmp	r3, #0
   2fa8e:	d00a      	beq.n	2faa6 <mqtt_init+0x26>
   2fa90:	683b      	ldr	r3, [r7, #0]
   2fa92:	2b00      	cmp	r3, #0
   2fa94:	d007      	beq.n	2faa6 <mqtt_init+0x26>
   2fa96:	683b      	ldr	r3, [r7, #0]
   2fa98:	691b      	ldr	r3, [r3, #16]
   2fa9a:	2b00      	cmp	r3, #0
   2fa9c:	d003      	beq.n	2faa6 <mqtt_init+0x26>
   2fa9e:	683b      	ldr	r3, [r7, #0]
   2faa0:	689b      	ldr	r3, [r3, #8]
   2faa2:	2b00      	cmp	r3, #0
   2faa4:	d102      	bne.n	2faac <mqtt_init+0x2c>
		return FAILURE;
   2faa6:	2301      	movs	r3, #1
   2faa8:	425b      	negs	r3, r3
   2faaa:	e034      	b.n	2fb16 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2faac:	683b      	ldr	r3, [r7, #0]
   2faae:	889b      	ldrh	r3, [r3, #4]
   2fab0:	001a      	movs	r2, r3
   2fab2:	23fa      	movs	r3, #250	; 0xfa
   2fab4:	009b      	lsls	r3, r3, #2
   2fab6:	4353      	muls	r3, r2
   2fab8:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2faba:	687b      	ldr	r3, [r7, #4]
   2fabc:	3320      	adds	r3, #32
   2fabe:	0018      	movs	r0, r3
   2fac0:	4b17      	ldr	r3, [pc, #92]	; (2fb20 <mqtt_init+0xa0>)
   2fac2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2fac4:	687b      	ldr	r3, [r7, #4]
   2fac6:	3304      	adds	r3, #4
   2fac8:	6839      	ldr	r1, [r7, #0]
   2faca:	2218      	movs	r2, #24
   2facc:	0018      	movs	r0, r3
   2face:	4b15      	ldr	r3, [pc, #84]	; (2fb24 <mqtt_init+0xa4>)
   2fad0:	4798      	blx	r3
	allocateClient(module);
   2fad2:	687b      	ldr	r3, [r7, #4]
   2fad4:	0018      	movs	r0, r3
   2fad6:	4b14      	ldr	r3, [pc, #80]	; (2fb28 <mqtt_init+0xa8>)
   2fad8:	4798      	blx	r3
	
	if(module->client)
   2fada:	687b      	ldr	r3, [r7, #4]
   2fadc:	69db      	ldr	r3, [r3, #28]
   2fade:	2b00      	cmp	r3, #0
   2fae0:	d017      	beq.n	2fb12 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2fae2:	687b      	ldr	r3, [r7, #4]
   2fae4:	69d8      	ldr	r0, [r3, #28]
   2fae6:	687b      	ldr	r3, [r7, #4]
   2fae8:	3320      	adds	r3, #32
   2faea:	001c      	movs	r4, r3
   2faec:	683b      	ldr	r3, [r7, #0]
   2faee:	691e      	ldr	r6, [r3, #16]
   2faf0:	683b      	ldr	r3, [r7, #0]
   2faf2:	695a      	ldr	r2, [r3, #20]
   2faf4:	683b      	ldr	r3, [r7, #0]
   2faf6:	6899      	ldr	r1, [r3, #8]
   2faf8:	683b      	ldr	r3, [r7, #0]
   2fafa:	68db      	ldr	r3, [r3, #12]
   2fafc:	68fd      	ldr	r5, [r7, #12]
   2fafe:	9302      	str	r3, [sp, #8]
   2fb00:	9101      	str	r1, [sp, #4]
   2fb02:	9200      	str	r2, [sp, #0]
   2fb04:	0033      	movs	r3, r6
   2fb06:	002a      	movs	r2, r5
   2fb08:	0021      	movs	r1, r4
   2fb0a:	4c08      	ldr	r4, [pc, #32]	; (2fb2c <mqtt_init+0xac>)
   2fb0c:	47a0      	blx	r4
		return SUCCESS;
   2fb0e:	2300      	movs	r3, #0
   2fb10:	e001      	b.n	2fb16 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2fb12:	2301      	movs	r3, #1
   2fb14:	425b      	negs	r3, r3
}
   2fb16:	0018      	movs	r0, r3
   2fb18:	46bd      	mov	sp, r7
   2fb1a:	b005      	add	sp, #20
   2fb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fb1e:	46c0      	nop			; (mov r8, r8)
   2fb20:	0002f8d9 	.word	0x0002f8d9
   2fb24:	00034ddd 	.word	0x00034ddd
   2fb28:	0002fa21 	.word	0x0002fa21
   2fb2c:	0002e951 	.word	0x0002e951

0002fb30 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2fb30:	b580      	push	{r7, lr}
   2fb32:	b082      	sub	sp, #8
   2fb34:	af00      	add	r7, sp, #0
   2fb36:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2fb38:	687b      	ldr	r3, [r7, #4]
   2fb3a:	4a0c      	ldr	r2, [pc, #48]	; (2fb6c <mqtt_get_config_defaults+0x3c>)
   2fb3c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fb3e:	687b      	ldr	r3, [r7, #4]
   2fb40:	2200      	movs	r2, #0
   2fb42:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2fb44:	687b      	ldr	r3, [r7, #4]
   2fb46:	223c      	movs	r2, #60	; 0x3c
   2fb48:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2fb4a:	687b      	ldr	r3, [r7, #4]
   2fb4c:	2200      	movs	r2, #0
   2fb4e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2fb50:	687b      	ldr	r3, [r7, #4]
   2fb52:	2200      	movs	r2, #0
   2fb54:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2fb56:	687b      	ldr	r3, [r7, #4]
   2fb58:	2200      	movs	r2, #0
   2fb5a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2fb5c:	687b      	ldr	r3, [r7, #4]
   2fb5e:	2200      	movs	r2, #0
   2fb60:	615a      	str	r2, [r3, #20]
}
   2fb62:	46c0      	nop			; (mov r8, r8)
   2fb64:	46bd      	mov	sp, r7
   2fb66:	b002      	add	sp, #8
   2fb68:	bd80      	pop	{r7, pc}
   2fb6a:	46c0      	nop			; (mov r8, r8)
   2fb6c:	0000075b 	.word	0x0000075b

0002fb70 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2fb70:	b580      	push	{r7, lr}
   2fb72:	b082      	sub	sp, #8
   2fb74:	af00      	add	r7, sp, #0
   2fb76:	6078      	str	r0, [r7, #4]
   2fb78:	6039      	str	r1, [r7, #0]
	if(module)
   2fb7a:	687b      	ldr	r3, [r7, #4]
   2fb7c:	2b00      	cmp	r3, #0
   2fb7e:	d004      	beq.n	2fb8a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2fb80:	687b      	ldr	r3, [r7, #4]
   2fb82:	683a      	ldr	r2, [r7, #0]
   2fb84:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2fb86:	2300      	movs	r3, #0
   2fb88:	e001      	b.n	2fb8e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2fb8a:	2301      	movs	r3, #1
   2fb8c:	425b      	negs	r3, r3
}
   2fb8e:	0018      	movs	r0, r3
   2fb90:	46bd      	mov	sp, r7
   2fb92:	b002      	add	sp, #8
   2fb94:	bd80      	pop	{r7, pc}
	...

0002fb98 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2fb98:	b580      	push	{r7, lr}
   2fb9a:	b082      	sub	sp, #8
   2fb9c:	af00      	add	r7, sp, #0
   2fb9e:	603a      	str	r2, [r7, #0]
   2fba0:	1dfb      	adds	r3, r7, #7
   2fba2:	1c02      	adds	r2, r0, #0
   2fba4:	701a      	strb	r2, [r3, #0]
   2fba6:	1dbb      	adds	r3, r7, #6
   2fba8:	1c0a      	adds	r2, r1, #0
   2fbaa:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2fbac:	683a      	ldr	r2, [r7, #0]
   2fbae:	1dbb      	adds	r3, r7, #6
   2fbb0:	7819      	ldrb	r1, [r3, #0]
   2fbb2:	1dfb      	adds	r3, r7, #7
   2fbb4:	781b      	ldrb	r3, [r3, #0]
   2fbb6:	b25b      	sxtb	r3, r3
   2fbb8:	0018      	movs	r0, r3
   2fbba:	4b03      	ldr	r3, [pc, #12]	; (2fbc8 <mqtt_socket_event_handler+0x30>)
   2fbbc:	4798      	blx	r3
}
   2fbbe:	46c0      	nop			; (mov r8, r8)
   2fbc0:	46bd      	mov	sp, r7
   2fbc2:	b002      	add	sp, #8
   2fbc4:	bd80      	pop	{r7, pc}
   2fbc6:	46c0      	nop			; (mov r8, r8)
   2fbc8:	0002f615 	.word	0x0002f615

0002fbcc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2fbcc:	b580      	push	{r7, lr}
   2fbce:	b082      	sub	sp, #8
   2fbd0:	af00      	add	r7, sp, #0
   2fbd2:	6078      	str	r0, [r7, #4]
   2fbd4:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2fbd6:	683a      	ldr	r2, [r7, #0]
   2fbd8:	687b      	ldr	r3, [r7, #4]
   2fbda:	0011      	movs	r1, r2
   2fbdc:	0018      	movs	r0, r3
   2fbde:	4b03      	ldr	r3, [pc, #12]	; (2fbec <mqtt_socket_resolve_handler+0x20>)
   2fbe0:	4798      	blx	r3
}
   2fbe2:	46c0      	nop			; (mov r8, r8)
   2fbe4:	46bd      	mov	sp, r7
   2fbe6:	b002      	add	sp, #8
   2fbe8:	bd80      	pop	{r7, pc}
   2fbea:	46c0      	nop			; (mov r8, r8)
   2fbec:	0002f5c5 	.word	0x0002f5c5

0002fbf0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2fbf0:	b590      	push	{r4, r7, lr}
   2fbf2:	b085      	sub	sp, #20
   2fbf4:	af00      	add	r7, sp, #0
   2fbf6:	6078      	str	r0, [r7, #4]
   2fbf8:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2fbfa:	687b      	ldr	r3, [r7, #4]
   2fbfc:	3320      	adds	r3, #32
   2fbfe:	0018      	movs	r0, r3
   2fc00:	687b      	ldr	r3, [r7, #4]
   2fc02:	889b      	ldrh	r3, [r3, #4]
   2fc04:	001a      	movs	r2, r3
   2fc06:	687b      	ldr	r3, [r7, #4]
   2fc08:	799b      	ldrb	r3, [r3, #6]
   2fc0a:	6839      	ldr	r1, [r7, #0]
   2fc0c:	4c09      	ldr	r4, [pc, #36]	; (2fc34 <mqtt_connect+0x44>)
   2fc0e:	47a0      	blx	r4
   2fc10:	0003      	movs	r3, r0
   2fc12:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2fc14:	687b      	ldr	r3, [r7, #4]
   2fc16:	681b      	ldr	r3, [r3, #0]
   2fc18:	2b00      	cmp	r3, #0
   2fc1a:	d006      	beq.n	2fc2a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2fc1c:	687b      	ldr	r3, [r7, #4]
   2fc1e:	681b      	ldr	r3, [r3, #0]
   2fc20:	220c      	movs	r2, #12
   2fc22:	18ba      	adds	r2, r7, r2
   2fc24:	6878      	ldr	r0, [r7, #4]
   2fc26:	2100      	movs	r1, #0
   2fc28:	4798      	blx	r3
	return connResult.sock_connected.result;
   2fc2a:	68fb      	ldr	r3, [r7, #12]
}
   2fc2c:	0018      	movs	r0, r3
   2fc2e:	46bd      	mov	sp, r7
   2fc30:	b005      	add	sp, #20
   2fc32:	bd90      	pop	{r4, r7, pc}
   2fc34:	0002f911 	.word	0x0002f911

0002fc38 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2fc38:	b580      	push	{r7, lr}
   2fc3a:	b09c      	sub	sp, #112	; 0x70
   2fc3c:	af00      	add	r7, sp, #0
   2fc3e:	60f8      	str	r0, [r7, #12]
   2fc40:	607a      	str	r2, [r7, #4]
   2fc42:	603b      	str	r3, [r7, #0]
   2fc44:	230b      	movs	r3, #11
   2fc46:	18fb      	adds	r3, r7, r3
   2fc48:	1c0a      	adds	r2, r1, #0
   2fc4a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2fc4c:	2310      	movs	r3, #16
   2fc4e:	18fa      	adds	r2, r7, r3
   2fc50:	4b31      	ldr	r3, [pc, #196]	; (2fd18 <mqtt_connect_broker+0xe0>)
   2fc52:	0010      	movs	r0, r2
   2fc54:	0019      	movs	r1, r3
   2fc56:	2358      	movs	r3, #88	; 0x58
   2fc58:	001a      	movs	r2, r3
   2fc5a:	4b30      	ldr	r3, [pc, #192]	; (2fd1c <mqtt_connect_broker+0xe4>)
   2fc5c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2fc5e:	2310      	movs	r3, #16
   2fc60:	18fb      	adds	r3, r7, r3
   2fc62:	2204      	movs	r2, #4
   2fc64:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2fc66:	2310      	movs	r3, #16
   2fc68:	18fb      	adds	r3, r7, r3
   2fc6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2fc6c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2fc6e:	2310      	movs	r3, #16
   2fc70:	18fb      	adds	r3, r7, r3
   2fc72:	687a      	ldr	r2, [r7, #4]
   2fc74:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2fc76:	2310      	movs	r3, #16
   2fc78:	18fb      	adds	r3, r7, r3
   2fc7a:	683a      	ldr	r2, [r7, #0]
   2fc7c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2fc7e:	2310      	movs	r3, #16
   2fc80:	18fb      	adds	r3, r7, r3
   2fc82:	220b      	movs	r2, #11
   2fc84:	18ba      	adds	r2, r7, r2
   2fc86:	7812      	ldrb	r2, [r2, #0]
   2fc88:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2fc8a:	2310      	movs	r3, #16
   2fc8c:	18fb      	adds	r3, r7, r3
   2fc8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2fc90:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2fc92:	2310      	movs	r3, #16
   2fc94:	18fb      	adds	r3, r7, r3
   2fc96:	2280      	movs	r2, #128	; 0x80
   2fc98:	18ba      	adds	r2, r7, r2
   2fc9a:	6812      	ldr	r2, [r2, #0]
   2fc9c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2fc9e:	2310      	movs	r3, #16
   2fca0:	18fb      	adds	r3, r7, r3
   2fca2:	228c      	movs	r2, #140	; 0x8c
   2fca4:	18ba      	adds	r2, r7, r2
   2fca6:	213c      	movs	r1, #60	; 0x3c
   2fca8:	7812      	ldrb	r2, [r2, #0]
   2fcaa:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2fcac:	2310      	movs	r3, #16
   2fcae:	18fb      	adds	r3, r7, r3
   2fcb0:	2288      	movs	r2, #136	; 0x88
   2fcb2:	18ba      	adds	r2, r7, r2
   2fcb4:	213d      	movs	r1, #61	; 0x3d
   2fcb6:	7812      	ldrb	r2, [r2, #0]
   2fcb8:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2fcba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2fcbc:	2b00      	cmp	r3, #0
   2fcbe:	d008      	beq.n	2fcd2 <mqtt_connect_broker+0x9a>
   2fcc0:	2380      	movs	r3, #128	; 0x80
   2fcc2:	18fb      	adds	r3, r7, r3
   2fcc4:	681b      	ldr	r3, [r3, #0]
   2fcc6:	2b00      	cmp	r3, #0
   2fcc8:	d003      	beq.n	2fcd2 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2fcca:	2310      	movs	r3, #16
   2fccc:	18fb      	adds	r3, r7, r3
   2fcce:	2201      	movs	r2, #1
   2fcd0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2fcd2:	68fb      	ldr	r3, [r7, #12]
   2fcd4:	69db      	ldr	r3, [r3, #28]
   2fcd6:	2210      	movs	r2, #16
   2fcd8:	18ba      	adds	r2, r7, r2
   2fcda:	0011      	movs	r1, r2
   2fcdc:	0018      	movs	r0, r3
   2fcde:	4b10      	ldr	r3, [pc, #64]	; (2fd20 <mqtt_connect_broker+0xe8>)
   2fce0:	4798      	blx	r3
   2fce2:	0003      	movs	r3, r0
   2fce4:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2fce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2fce8:	b2da      	uxtb	r2, r3
   2fcea:	2368      	movs	r3, #104	; 0x68
   2fcec:	18fb      	adds	r3, r7, r3
   2fcee:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2fcf0:	68fb      	ldr	r3, [r7, #12]
   2fcf2:	681b      	ldr	r3, [r3, #0]
   2fcf4:	2b00      	cmp	r3, #0
   2fcf6:	d006      	beq.n	2fd06 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2fcf8:	68fb      	ldr	r3, [r7, #12]
   2fcfa:	681b      	ldr	r3, [r3, #0]
   2fcfc:	2268      	movs	r2, #104	; 0x68
   2fcfe:	18ba      	adds	r2, r7, r2
   2fd00:	68f8      	ldr	r0, [r7, #12]
   2fd02:	2101      	movs	r1, #1
   2fd04:	4798      	blx	r3
	
	module->isConnected = true;
   2fd06:	68fb      	ldr	r3, [r7, #12]
   2fd08:	2234      	movs	r2, #52	; 0x34
   2fd0a:	2101      	movs	r1, #1
   2fd0c:	5499      	strb	r1, [r3, r2]
	return rc;
   2fd0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2fd10:	0018      	movs	r0, r3
   2fd12:	46bd      	mov	sp, r7
   2fd14:	b01c      	add	sp, #112	; 0x70
   2fd16:	bd80      	pop	{r7, pc}
   2fd18:	0003a1bc 	.word	0x0003a1bc
   2fd1c:	00034ddd 	.word	0x00034ddd
   2fd20:	0002f061 	.word	0x0002f061

0002fd24 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2fd24:	b580      	push	{r7, lr}
   2fd26:	b084      	sub	sp, #16
   2fd28:	af00      	add	r7, sp, #0
   2fd2a:	6078      	str	r0, [r7, #4]
   2fd2c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2fd2e:	687b      	ldr	r3, [r7, #4]
   2fd30:	69db      	ldr	r3, [r3, #28]
   2fd32:	0018      	movs	r0, r3
   2fd34:	4b0c      	ldr	r3, [pc, #48]	; (2fd68 <mqtt_disconnect+0x44>)
   2fd36:	4798      	blx	r3
   2fd38:	0003      	movs	r3, r0
   2fd3a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2fd3c:	68fb      	ldr	r3, [r7, #12]
   2fd3e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2fd40:	687b      	ldr	r3, [r7, #4]
   2fd42:	681b      	ldr	r3, [r3, #0]
   2fd44:	2b00      	cmp	r3, #0
   2fd46:	d006      	beq.n	2fd56 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2fd48:	687b      	ldr	r3, [r7, #4]
   2fd4a:	681b      	ldr	r3, [r3, #0]
   2fd4c:	2208      	movs	r2, #8
   2fd4e:	18ba      	adds	r2, r7, r2
   2fd50:	6878      	ldr	r0, [r7, #4]
   2fd52:	2105      	movs	r1, #5
   2fd54:	4798      	blx	r3
	
	module->isConnected = false;
   2fd56:	687b      	ldr	r3, [r7, #4]
   2fd58:	2234      	movs	r2, #52	; 0x34
   2fd5a:	2100      	movs	r1, #0
   2fd5c:	5499      	strb	r1, [r3, r2]
	return rc;
   2fd5e:	68fb      	ldr	r3, [r7, #12]
}
   2fd60:	0018      	movs	r0, r3
   2fd62:	46bd      	mov	sp, r7
   2fd64:	b004      	add	sp, #16
   2fd66:	bd80      	pop	{r7, pc}
   2fd68:	0002f4ed 	.word	0x0002f4ed

0002fd6c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2fd6c:	b580      	push	{r7, lr}
   2fd6e:	b08a      	sub	sp, #40	; 0x28
   2fd70:	af00      	add	r7, sp, #0
   2fd72:	60f8      	str	r0, [r7, #12]
   2fd74:	60b9      	str	r1, [r7, #8]
   2fd76:	607a      	str	r2, [r7, #4]
   2fd78:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2fd7a:	2314      	movs	r3, #20
   2fd7c:	18fb      	adds	r3, r7, r3
   2fd7e:	2230      	movs	r2, #48	; 0x30
   2fd80:	18ba      	adds	r2, r7, r2
   2fd82:	7812      	ldrb	r2, [r2, #0]
   2fd84:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2fd86:	2314      	movs	r3, #20
   2fd88:	18fb      	adds	r3, r7, r3
   2fd8a:	687a      	ldr	r2, [r7, #4]
   2fd8c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2fd8e:	2314      	movs	r3, #20
   2fd90:	18fb      	adds	r3, r7, r3
   2fd92:	683a      	ldr	r2, [r7, #0]
   2fd94:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2fd96:	2314      	movs	r3, #20
   2fd98:	18fb      	adds	r3, r7, r3
   2fd9a:	2234      	movs	r2, #52	; 0x34
   2fd9c:	18ba      	adds	r2, r7, r2
   2fd9e:	7812      	ldrb	r2, [r2, #0]
   2fda0:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2fda2:	68fb      	ldr	r3, [r7, #12]
   2fda4:	69db      	ldr	r3, [r3, #28]
   2fda6:	2214      	movs	r2, #20
   2fda8:	18ba      	adds	r2, r7, r2
   2fdaa:	68b9      	ldr	r1, [r7, #8]
   2fdac:	0018      	movs	r0, r3
   2fdae:	4b09      	ldr	r3, [pc, #36]	; (2fdd4 <mqtt_publish+0x68>)
   2fdb0:	4798      	blx	r3
   2fdb2:	0003      	movs	r3, r0
   2fdb4:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2fdb6:	68fb      	ldr	r3, [r7, #12]
   2fdb8:	681b      	ldr	r3, [r3, #0]
   2fdba:	2b00      	cmp	r3, #0
   2fdbc:	d005      	beq.n	2fdca <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2fdbe:	68fb      	ldr	r3, [r7, #12]
   2fdc0:	681b      	ldr	r3, [r3, #0]
   2fdc2:	68f8      	ldr	r0, [r7, #12]
   2fdc4:	2200      	movs	r2, #0
   2fdc6:	2102      	movs	r1, #2
   2fdc8:	4798      	blx	r3
	
	return rc;
   2fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fdcc:	0018      	movs	r0, r3
   2fdce:	46bd      	mov	sp, r7
   2fdd0:	b00a      	add	sp, #40	; 0x28
   2fdd2:	bd80      	pop	{r7, pc}
   2fdd4:	0002f32d 	.word	0x0002f32d

0002fdd8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2fdd8:	b590      	push	{r4, r7, lr}
   2fdda:	b087      	sub	sp, #28
   2fddc:	af00      	add	r7, sp, #0
   2fdde:	60f8      	str	r0, [r7, #12]
   2fde0:	60b9      	str	r1, [r7, #8]
   2fde2:	603b      	str	r3, [r7, #0]
   2fde4:	1dfb      	adds	r3, r7, #7
   2fde6:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2fde8:	68fb      	ldr	r3, [r7, #12]
   2fdea:	69d8      	ldr	r0, [r3, #28]
   2fdec:	683c      	ldr	r4, [r7, #0]
   2fdee:	1dfb      	adds	r3, r7, #7
   2fdf0:	781a      	ldrb	r2, [r3, #0]
   2fdf2:	68b9      	ldr	r1, [r7, #8]
   2fdf4:	0023      	movs	r3, r4
   2fdf6:	4c09      	ldr	r4, [pc, #36]	; (2fe1c <mqtt_subscribe+0x44>)
   2fdf8:	47a0      	blx	r4
   2fdfa:	0003      	movs	r3, r0
   2fdfc:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2fdfe:	68fb      	ldr	r3, [r7, #12]
   2fe00:	681b      	ldr	r3, [r3, #0]
   2fe02:	2b00      	cmp	r3, #0
   2fe04:	d005      	beq.n	2fe12 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2fe06:	68fb      	ldr	r3, [r7, #12]
   2fe08:	681b      	ldr	r3, [r3, #0]
   2fe0a:	68f8      	ldr	r0, [r7, #12]
   2fe0c:	2200      	movs	r2, #0
   2fe0e:	2103      	movs	r1, #3
   2fe10:	4798      	blx	r3
	
	return rc;
   2fe12:	697b      	ldr	r3, [r7, #20]
}
   2fe14:	0018      	movs	r0, r3
   2fe16:	46bd      	mov	sp, r7
   2fe18:	b007      	add	sp, #28
   2fe1a:	bd90      	pop	{r4, r7, pc}
   2fe1c:	0002f1a1 	.word	0x0002f1a1

0002fe20 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2fe20:	b580      	push	{r7, lr}
   2fe22:	b082      	sub	sp, #8
   2fe24:	af00      	add	r7, sp, #0
   2fe26:	6078      	str	r0, [r7, #4]
   2fe28:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2fe2a:	687b      	ldr	r3, [r7, #4]
   2fe2c:	69db      	ldr	r3, [r3, #28]
   2fe2e:	683a      	ldr	r2, [r7, #0]
   2fe30:	0011      	movs	r1, r2
   2fe32:	0018      	movs	r0, r3
   2fe34:	4b03      	ldr	r3, [pc, #12]	; (2fe44 <mqtt_yield+0x24>)
   2fe36:	4798      	blx	r3
   2fe38:	0003      	movs	r3, r0
   2fe3a:	0018      	movs	r0, r3
   2fe3c:	46bd      	mov	sp, r7
   2fe3e:	b002      	add	sp, #8
   2fe40:	bd80      	pop	{r7, pc}
   2fe42:	46c0      	nop			; (mov r8, r8)
   2fe44:	0002efa9 	.word	0x0002efa9

0002fe48 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2fe48:	b590      	push	{r4, r7, lr}
   2fe4a:	b085      	sub	sp, #20
   2fe4c:	af00      	add	r7, sp, #0
   2fe4e:	6078      	str	r0, [r7, #4]
	int len = 0;
   2fe50:	2300      	movs	r3, #0
   2fe52:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2fe54:	687b      	ldr	r3, [r7, #4]
   2fe56:	7a1b      	ldrb	r3, [r3, #8]
   2fe58:	2b03      	cmp	r3, #3
   2fe5a:	d102      	bne.n	2fe62 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2fe5c:	230c      	movs	r3, #12
   2fe5e:	60fb      	str	r3, [r7, #12]
   2fe60:	e005      	b.n	2fe6e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2fe62:	687b      	ldr	r3, [r7, #4]
   2fe64:	7a1b      	ldrb	r3, [r3, #8]
   2fe66:	2b04      	cmp	r3, #4
   2fe68:	d101      	bne.n	2fe6e <MQTTSerialize_connectLength+0x26>
		len = 10;
   2fe6a:	230a      	movs	r3, #10
   2fe6c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2fe6e:	687b      	ldr	r3, [r7, #4]
   2fe70:	68d8      	ldr	r0, [r3, #12]
   2fe72:	6919      	ldr	r1, [r3, #16]
   2fe74:	695a      	ldr	r2, [r3, #20]
   2fe76:	4b25      	ldr	r3, [pc, #148]	; (2ff0c <MQTTSerialize_connectLength+0xc4>)
   2fe78:	4798      	blx	r3
   2fe7a:	0003      	movs	r3, r0
   2fe7c:	3302      	adds	r3, #2
   2fe7e:	68fa      	ldr	r2, [r7, #12]
   2fe80:	18d3      	adds	r3, r2, r3
   2fe82:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2fe84:	687b      	ldr	r3, [r7, #4]
   2fe86:	7edb      	ldrb	r3, [r3, #27]
   2fe88:	2b00      	cmp	r3, #0
   2fe8a:	d013      	beq.n	2feb4 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2fe8c:	687b      	ldr	r3, [r7, #4]
   2fe8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2fe90:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2fe92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fe94:	4b1d      	ldr	r3, [pc, #116]	; (2ff0c <MQTTSerialize_connectLength+0xc4>)
   2fe96:	4798      	blx	r3
   2fe98:	0003      	movs	r3, r0
   2fe9a:	1c9c      	adds	r4, r3, #2
   2fe9c:	687b      	ldr	r3, [r7, #4]
   2fe9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2fea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2fea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fea4:	4b19      	ldr	r3, [pc, #100]	; (2ff0c <MQTTSerialize_connectLength+0xc4>)
   2fea6:	4798      	blx	r3
   2fea8:	0003      	movs	r3, r0
   2feaa:	18e3      	adds	r3, r4, r3
   2feac:	3302      	adds	r3, #2
   2feae:	68fa      	ldr	r2, [r7, #12]
   2feb0:	18d3      	adds	r3, r2, r3
   2feb2:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2feb4:	687b      	ldr	r3, [r7, #4]
   2feb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2feb8:	2b00      	cmp	r3, #0
   2feba:	d103      	bne.n	2fec4 <MQTTSerialize_connectLength+0x7c>
   2febc:	687b      	ldr	r3, [r7, #4]
   2febe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fec0:	2b00      	cmp	r3, #0
   2fec2:	d00a      	beq.n	2feda <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2fec4:	687b      	ldr	r3, [r7, #4]
   2fec6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2fec8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2feca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2fecc:	4b0f      	ldr	r3, [pc, #60]	; (2ff0c <MQTTSerialize_connectLength+0xc4>)
   2fece:	4798      	blx	r3
   2fed0:	0003      	movs	r3, r0
   2fed2:	3302      	adds	r3, #2
   2fed4:	68fa      	ldr	r2, [r7, #12]
   2fed6:	18d3      	adds	r3, r2, r3
   2fed8:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2feda:	687b      	ldr	r3, [r7, #4]
   2fedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fede:	2b00      	cmp	r3, #0
   2fee0:	d103      	bne.n	2feea <MQTTSerialize_connectLength+0xa2>
   2fee2:	687b      	ldr	r3, [r7, #4]
   2fee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fee6:	2b00      	cmp	r3, #0
   2fee8:	d00a      	beq.n	2ff00 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2feea:	687b      	ldr	r3, [r7, #4]
   2feec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2feee:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2fef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fef2:	4b06      	ldr	r3, [pc, #24]	; (2ff0c <MQTTSerialize_connectLength+0xc4>)
   2fef4:	4798      	blx	r3
   2fef6:	0003      	movs	r3, r0
   2fef8:	3302      	adds	r3, #2
   2fefa:	68fa      	ldr	r2, [r7, #12]
   2fefc:	18d3      	adds	r3, r2, r3
   2fefe:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2ff00:	68fb      	ldr	r3, [r7, #12]
}
   2ff02:	0018      	movs	r0, r3
   2ff04:	46bd      	mov	sp, r7
   2ff06:	b005      	add	sp, #20
   2ff08:	bd90      	pop	{r4, r7, pc}
   2ff0a:	46c0      	nop			; (mov r8, r8)
   2ff0c:	000308b9 	.word	0x000308b9

0002ff10 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2ff10:	b590      	push	{r4, r7, lr}
   2ff12:	b08b      	sub	sp, #44	; 0x2c
   2ff14:	af00      	add	r7, sp, #0
   2ff16:	60f8      	str	r0, [r7, #12]
   2ff18:	60b9      	str	r1, [r7, #8]
   2ff1a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2ff1c:	68fb      	ldr	r3, [r7, #12]
   2ff1e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2ff20:	2300      	movs	r3, #0
   2ff22:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2ff24:	2300      	movs	r3, #0
   2ff26:	617b      	str	r3, [r7, #20]
	int len = 0;
   2ff28:	2300      	movs	r3, #0
   2ff2a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2ff2c:	2301      	movs	r3, #1
   2ff2e:	425b      	negs	r3, r3
   2ff30:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2ff32:	687b      	ldr	r3, [r7, #4]
   2ff34:	0018      	movs	r0, r3
   2ff36:	4b8c      	ldr	r3, [pc, #560]	; (30168 <MQTTSerialize_connect+0x258>)
   2ff38:	4798      	blx	r3
   2ff3a:	0003      	movs	r3, r0
   2ff3c:	623b      	str	r3, [r7, #32]
   2ff3e:	6a3b      	ldr	r3, [r7, #32]
   2ff40:	0018      	movs	r0, r3
   2ff42:	4b8a      	ldr	r3, [pc, #552]	; (3016c <MQTTSerialize_connect+0x25c>)
   2ff44:	4798      	blx	r3
   2ff46:	0002      	movs	r2, r0
   2ff48:	68bb      	ldr	r3, [r7, #8]
   2ff4a:	429a      	cmp	r2, r3
   2ff4c:	dd03      	ble.n	2ff56 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ff4e:	2302      	movs	r3, #2
   2ff50:	425b      	negs	r3, r3
   2ff52:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2ff54:	e103      	b.n	3015e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2ff56:	2318      	movs	r3, #24
   2ff58:	18fb      	adds	r3, r7, r3
   2ff5a:	2200      	movs	r2, #0
   2ff5c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2ff5e:	2318      	movs	r3, #24
   2ff60:	18fb      	adds	r3, r7, r3
   2ff62:	781a      	ldrb	r2, [r3, #0]
   2ff64:	210f      	movs	r1, #15
   2ff66:	400a      	ands	r2, r1
   2ff68:	1c11      	adds	r1, r2, #0
   2ff6a:	2210      	movs	r2, #16
   2ff6c:	430a      	orrs	r2, r1
   2ff6e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ff70:	2318      	movs	r3, #24
   2ff72:	18fb      	adds	r3, r7, r3
   2ff74:	781a      	ldrb	r2, [r3, #0]
   2ff76:	231c      	movs	r3, #28
   2ff78:	18fb      	adds	r3, r7, r3
   2ff7a:	0011      	movs	r1, r2
   2ff7c:	0018      	movs	r0, r3
   2ff7e:	4b7c      	ldr	r3, [pc, #496]	; (30170 <MQTTSerialize_connect+0x260>)
   2ff80:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2ff82:	69fb      	ldr	r3, [r7, #28]
   2ff84:	6a3a      	ldr	r2, [r7, #32]
   2ff86:	0011      	movs	r1, r2
   2ff88:	0018      	movs	r0, r3
   2ff8a:	4b7a      	ldr	r3, [pc, #488]	; (30174 <MQTTSerialize_connect+0x264>)
   2ff8c:	4798      	blx	r3
   2ff8e:	0002      	movs	r2, r0
   2ff90:	69fb      	ldr	r3, [r7, #28]
   2ff92:	189b      	adds	r3, r3, r2
   2ff94:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2ff96:	687b      	ldr	r3, [r7, #4]
   2ff98:	7a1b      	ldrb	r3, [r3, #8]
   2ff9a:	2b04      	cmp	r3, #4
   2ff9c:	d10d      	bne.n	2ffba <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2ff9e:	4a76      	ldr	r2, [pc, #472]	; (30178 <MQTTSerialize_connect+0x268>)
   2ffa0:	231c      	movs	r3, #28
   2ffa2:	18fb      	adds	r3, r7, r3
   2ffa4:	0011      	movs	r1, r2
   2ffa6:	0018      	movs	r0, r3
   2ffa8:	4b74      	ldr	r3, [pc, #464]	; (3017c <MQTTSerialize_connect+0x26c>)
   2ffaa:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2ffac:	231c      	movs	r3, #28
   2ffae:	18fb      	adds	r3, r7, r3
   2ffb0:	2104      	movs	r1, #4
   2ffb2:	0018      	movs	r0, r3
   2ffb4:	4b6e      	ldr	r3, [pc, #440]	; (30170 <MQTTSerialize_connect+0x260>)
   2ffb6:	4798      	blx	r3
   2ffb8:	e00c      	b.n	2ffd4 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2ffba:	4a71      	ldr	r2, [pc, #452]	; (30180 <MQTTSerialize_connect+0x270>)
   2ffbc:	231c      	movs	r3, #28
   2ffbe:	18fb      	adds	r3, r7, r3
   2ffc0:	0011      	movs	r1, r2
   2ffc2:	0018      	movs	r0, r3
   2ffc4:	4b6d      	ldr	r3, [pc, #436]	; (3017c <MQTTSerialize_connect+0x26c>)
   2ffc6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2ffc8:	231c      	movs	r3, #28
   2ffca:	18fb      	adds	r3, r7, r3
   2ffcc:	2103      	movs	r1, #3
   2ffce:	0018      	movs	r0, r3
   2ffd0:	4b67      	ldr	r3, [pc, #412]	; (30170 <MQTTSerialize_connect+0x260>)
   2ffd2:	4798      	blx	r3
	}

	flags.all = 0;
   2ffd4:	2314      	movs	r3, #20
   2ffd6:	18fb      	adds	r3, r7, r3
   2ffd8:	2200      	movs	r2, #0
   2ffda:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2ffdc:	687b      	ldr	r3, [r7, #4]
   2ffde:	7e9b      	ldrb	r3, [r3, #26]
   2ffe0:	1c1a      	adds	r2, r3, #0
   2ffe2:	2301      	movs	r3, #1
   2ffe4:	4013      	ands	r3, r2
   2ffe6:	b2da      	uxtb	r2, r3
   2ffe8:	2314      	movs	r3, #20
   2ffea:	18fb      	adds	r3, r7, r3
   2ffec:	2101      	movs	r1, #1
   2ffee:	400a      	ands	r2, r1
   2fff0:	1890      	adds	r0, r2, r2
   2fff2:	781a      	ldrb	r2, [r3, #0]
   2fff4:	2102      	movs	r1, #2
   2fff6:	438a      	bics	r2, r1
   2fff8:	1c11      	adds	r1, r2, #0
   2fffa:	1c02      	adds	r2, r0, #0
   2fffc:	430a      	orrs	r2, r1
   2fffe:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   30000:	687b      	ldr	r3, [r7, #4]
   30002:	7edb      	ldrb	r3, [r3, #27]
   30004:	1e5a      	subs	r2, r3, #1
   30006:	4193      	sbcs	r3, r2
   30008:	b2da      	uxtb	r2, r3
   3000a:	2314      	movs	r3, #20
   3000c:	18fb      	adds	r3, r7, r3
   3000e:	2101      	movs	r1, #1
   30010:	400a      	ands	r2, r1
   30012:	0090      	lsls	r0, r2, #2
   30014:	781a      	ldrb	r2, [r3, #0]
   30016:	2104      	movs	r1, #4
   30018:	438a      	bics	r2, r1
   3001a:	1c11      	adds	r1, r2, #0
   3001c:	1c02      	adds	r2, r0, #0
   3001e:	430a      	orrs	r2, r1
   30020:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   30022:	2314      	movs	r3, #20
   30024:	18fb      	adds	r3, r7, r3
   30026:	781b      	ldrb	r3, [r3, #0]
   30028:	2204      	movs	r2, #4
   3002a:	4013      	ands	r3, r2
   3002c:	b2db      	uxtb	r3, r3
   3002e:	2b00      	cmp	r3, #0
   30030:	d025      	beq.n	3007e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   30032:	687b      	ldr	r3, [r7, #4]
   30034:	223d      	movs	r2, #61	; 0x3d
   30036:	5c9b      	ldrb	r3, [r3, r2]
   30038:	1c1a      	adds	r2, r3, #0
   3003a:	2303      	movs	r3, #3
   3003c:	4013      	ands	r3, r2
   3003e:	b2da      	uxtb	r2, r3
   30040:	2314      	movs	r3, #20
   30042:	18fb      	adds	r3, r7, r3
   30044:	2103      	movs	r1, #3
   30046:	400a      	ands	r2, r1
   30048:	00d0      	lsls	r0, r2, #3
   3004a:	781a      	ldrb	r2, [r3, #0]
   3004c:	2118      	movs	r1, #24
   3004e:	438a      	bics	r2, r1
   30050:	1c11      	adds	r1, r2, #0
   30052:	1c02      	adds	r2, r0, #0
   30054:	430a      	orrs	r2, r1
   30056:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30058:	687b      	ldr	r3, [r7, #4]
   3005a:	223c      	movs	r2, #60	; 0x3c
   3005c:	5c9b      	ldrb	r3, [r3, r2]
   3005e:	1c1a      	adds	r2, r3, #0
   30060:	2301      	movs	r3, #1
   30062:	4013      	ands	r3, r2
   30064:	b2da      	uxtb	r2, r3
   30066:	2314      	movs	r3, #20
   30068:	18fb      	adds	r3, r7, r3
   3006a:	2101      	movs	r1, #1
   3006c:	400a      	ands	r2, r1
   3006e:	0150      	lsls	r0, r2, #5
   30070:	781a      	ldrb	r2, [r3, #0]
   30072:	2120      	movs	r1, #32
   30074:	438a      	bics	r2, r1
   30076:	1c11      	adds	r1, r2, #0
   30078:	1c02      	adds	r2, r0, #0
   3007a:	430a      	orrs	r2, r1
   3007c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   3007e:	687b      	ldr	r3, [r7, #4]
   30080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30082:	2b00      	cmp	r3, #0
   30084:	d103      	bne.n	3008e <MQTTSerialize_connect+0x17e>
   30086:	687b      	ldr	r3, [r7, #4]
   30088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3008a:	2b00      	cmp	r3, #0
   3008c:	d006      	beq.n	3009c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   3008e:	2314      	movs	r3, #20
   30090:	18fb      	adds	r3, r7, r3
   30092:	781a      	ldrb	r2, [r3, #0]
   30094:	2180      	movs	r1, #128	; 0x80
   30096:	4249      	negs	r1, r1
   30098:	430a      	orrs	r2, r1
   3009a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   3009c:	687b      	ldr	r3, [r7, #4]
   3009e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   300a0:	2b00      	cmp	r3, #0
   300a2:	d103      	bne.n	300ac <MQTTSerialize_connect+0x19c>
   300a4:	687b      	ldr	r3, [r7, #4]
   300a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   300a8:	2b00      	cmp	r3, #0
   300aa:	d005      	beq.n	300b8 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   300ac:	2314      	movs	r3, #20
   300ae:	18fb      	adds	r3, r7, r3
   300b0:	781a      	ldrb	r2, [r3, #0]
   300b2:	2140      	movs	r1, #64	; 0x40
   300b4:	430a      	orrs	r2, r1
   300b6:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   300b8:	2314      	movs	r3, #20
   300ba:	18fb      	adds	r3, r7, r3
   300bc:	781a      	ldrb	r2, [r3, #0]
   300be:	231c      	movs	r3, #28
   300c0:	18fb      	adds	r3, r7, r3
   300c2:	0011      	movs	r1, r2
   300c4:	0018      	movs	r0, r3
   300c6:	4b2a      	ldr	r3, [pc, #168]	; (30170 <MQTTSerialize_connect+0x260>)
   300c8:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   300ca:	687b      	ldr	r3, [r7, #4]
   300cc:	8b1b      	ldrh	r3, [r3, #24]
   300ce:	001a      	movs	r2, r3
   300d0:	231c      	movs	r3, #28
   300d2:	18fb      	adds	r3, r7, r3
   300d4:	0011      	movs	r1, r2
   300d6:	0018      	movs	r0, r3
   300d8:	4b2a      	ldr	r3, [pc, #168]	; (30184 <MQTTSerialize_connect+0x274>)
   300da:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   300dc:	687b      	ldr	r3, [r7, #4]
   300de:	221c      	movs	r2, #28
   300e0:	18b8      	adds	r0, r7, r2
   300e2:	68d9      	ldr	r1, [r3, #12]
   300e4:	691a      	ldr	r2, [r3, #16]
   300e6:	695b      	ldr	r3, [r3, #20]
   300e8:	4c27      	ldr	r4, [pc, #156]	; (30188 <MQTTSerialize_connect+0x278>)
   300ea:	47a0      	blx	r4
	if (options->willFlag)
   300ec:	687b      	ldr	r3, [r7, #4]
   300ee:	7edb      	ldrb	r3, [r3, #27]
   300f0:	2b00      	cmp	r3, #0
   300f2:	d00f      	beq.n	30114 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   300f4:	687b      	ldr	r3, [r7, #4]
   300f6:	221c      	movs	r2, #28
   300f8:	18b8      	adds	r0, r7, r2
   300fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
   300fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   300fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30100:	4c21      	ldr	r4, [pc, #132]	; (30188 <MQTTSerialize_connect+0x278>)
   30102:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30104:	687b      	ldr	r3, [r7, #4]
   30106:	221c      	movs	r2, #28
   30108:	18b8      	adds	r0, r7, r2
   3010a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   3010c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3010e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30110:	4c1d      	ldr	r4, [pc, #116]	; (30188 <MQTTSerialize_connect+0x278>)
   30112:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30114:	2314      	movs	r3, #20
   30116:	18fb      	adds	r3, r7, r3
   30118:	781b      	ldrb	r3, [r3, #0]
   3011a:	227f      	movs	r2, #127	; 0x7f
   3011c:	4393      	bics	r3, r2
   3011e:	b2db      	uxtb	r3, r3
   30120:	2b00      	cmp	r3, #0
   30122:	d007      	beq.n	30134 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30124:	687b      	ldr	r3, [r7, #4]
   30126:	221c      	movs	r2, #28
   30128:	18b8      	adds	r0, r7, r2
   3012a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   3012c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3012e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30130:	4c15      	ldr	r4, [pc, #84]	; (30188 <MQTTSerialize_connect+0x278>)
   30132:	47a0      	blx	r4
	if (flags.bits.password)
   30134:	2314      	movs	r3, #20
   30136:	18fb      	adds	r3, r7, r3
   30138:	781b      	ldrb	r3, [r3, #0]
   3013a:	2240      	movs	r2, #64	; 0x40
   3013c:	4013      	ands	r3, r2
   3013e:	b2db      	uxtb	r3, r3
   30140:	2b00      	cmp	r3, #0
   30142:	d007      	beq.n	30154 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   30144:	687b      	ldr	r3, [r7, #4]
   30146:	221c      	movs	r2, #28
   30148:	18b8      	adds	r0, r7, r2
   3014a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   3014c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3014e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30150:	4c0d      	ldr	r4, [pc, #52]	; (30188 <MQTTSerialize_connect+0x278>)
   30152:	47a0      	blx	r4

	rc = ptr - buf;
   30154:	69fb      	ldr	r3, [r7, #28]
   30156:	001a      	movs	r2, r3
   30158:	68fb      	ldr	r3, [r7, #12]
   3015a:	1ad3      	subs	r3, r2, r3
   3015c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   3015e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30160:	0018      	movs	r0, r3
   30162:	46bd      	mov	sp, r7
   30164:	b00b      	add	sp, #44	; 0x2c
   30166:	bd90      	pop	{r4, r7, pc}
   30168:	0002fe49 	.word	0x0002fe49
   3016c:	000305dd 	.word	0x000305dd
   30170:	000306ff 	.word	0x000306ff
   30174:	000304e5 	.word	0x000304e5
   30178:	0003a214 	.word	0x0003a214
   3017c:	00030781 	.word	0x00030781
   30180:	0003a21c 	.word	0x0003a21c
   30184:	00030729 	.word	0x00030729
   30188:	000307d1 	.word	0x000307d1

0003018c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   3018c:	b580      	push	{r7, lr}
   3018e:	b08a      	sub	sp, #40	; 0x28
   30190:	af00      	add	r7, sp, #0
   30192:	60f8      	str	r0, [r7, #12]
   30194:	60b9      	str	r1, [r7, #8]
   30196:	607a      	str	r2, [r7, #4]
   30198:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3019a:	2300      	movs	r3, #0
   3019c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3019e:	687b      	ldr	r3, [r7, #4]
   301a0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   301a2:	2300      	movs	r3, #0
   301a4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   301a6:	2300      	movs	r3, #0
   301a8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   301aa:	2300      	movs	r3, #0
   301ac:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   301ae:	2318      	movs	r3, #24
   301b0:	18fb      	adds	r3, r7, r3
   301b2:	0018      	movs	r0, r3
   301b4:	4b25      	ldr	r3, [pc, #148]	; (3024c <MQTTDeserialize_connack+0xc0>)
   301b6:	4798      	blx	r3
   301b8:	0003      	movs	r3, r0
   301ba:	001a      	movs	r2, r3
   301bc:	231c      	movs	r3, #28
   301be:	18fb      	adds	r3, r7, r3
   301c0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   301c2:	231c      	movs	r3, #28
   301c4:	18fb      	adds	r3, r7, r3
   301c6:	781b      	ldrb	r3, [r3, #0]
   301c8:	220f      	movs	r2, #15
   301ca:	4393      	bics	r3, r2
   301cc:	b2db      	uxtb	r3, r3
   301ce:	2b20      	cmp	r3, #32
   301d0:	d134      	bne.n	3023c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   301d2:	69bb      	ldr	r3, [r7, #24]
   301d4:	2214      	movs	r2, #20
   301d6:	18ba      	adds	r2, r7, r2
   301d8:	0011      	movs	r1, r2
   301da:	0018      	movs	r0, r3
   301dc:	4b1c      	ldr	r3, [pc, #112]	; (30250 <MQTTDeserialize_connack+0xc4>)
   301de:	4798      	blx	r3
   301e0:	0003      	movs	r3, r0
   301e2:	627b      	str	r3, [r7, #36]	; 0x24
   301e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   301e6:	69bb      	ldr	r3, [r7, #24]
   301e8:	189b      	adds	r3, r3, r2
   301ea:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   301ec:	69bb      	ldr	r3, [r7, #24]
   301ee:	697a      	ldr	r2, [r7, #20]
   301f0:	189b      	adds	r3, r3, r2
   301f2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   301f4:	6a3b      	ldr	r3, [r7, #32]
   301f6:	69ba      	ldr	r2, [r7, #24]
   301f8:	1a9b      	subs	r3, r3, r2
   301fa:	2b01      	cmp	r3, #1
   301fc:	dd20      	ble.n	30240 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   301fe:	2318      	movs	r3, #24
   30200:	18fb      	adds	r3, r7, r3
   30202:	0018      	movs	r0, r3
   30204:	4b11      	ldr	r3, [pc, #68]	; (3024c <MQTTDeserialize_connack+0xc0>)
   30206:	4798      	blx	r3
   30208:	0003      	movs	r3, r0
   3020a:	001a      	movs	r2, r3
   3020c:	2310      	movs	r3, #16
   3020e:	18fb      	adds	r3, r7, r3
   30210:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30212:	2310      	movs	r3, #16
   30214:	18fb      	adds	r3, r7, r3
   30216:	781b      	ldrb	r3, [r3, #0]
   30218:	061b      	lsls	r3, r3, #24
   3021a:	0fdb      	lsrs	r3, r3, #31
   3021c:	b2db      	uxtb	r3, r3
   3021e:	001a      	movs	r2, r3
   30220:	68fb      	ldr	r3, [r7, #12]
   30222:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30224:	2318      	movs	r3, #24
   30226:	18fb      	adds	r3, r7, r3
   30228:	0018      	movs	r0, r3
   3022a:	4b08      	ldr	r3, [pc, #32]	; (3024c <MQTTDeserialize_connack+0xc0>)
   3022c:	4798      	blx	r3
   3022e:	0003      	movs	r3, r0
   30230:	001a      	movs	r2, r3
   30232:	68bb      	ldr	r3, [r7, #8]
   30234:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30236:	2301      	movs	r3, #1
   30238:	627b      	str	r3, [r7, #36]	; 0x24
   3023a:	e002      	b.n	30242 <MQTTDeserialize_connack+0xb6>
		goto exit;
   3023c:	46c0      	nop			; (mov r8, r8)
   3023e:	e000      	b.n	30242 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30240:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30244:	0018      	movs	r0, r3
   30246:	46bd      	mov	sp, r7
   30248:	b00a      	add	sp, #40	; 0x28
   3024a:	bd80      	pop	{r7, pc}
   3024c:	000306d3 	.word	0x000306d3
   30250:	0003066d 	.word	0x0003066d

00030254 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30254:	b580      	push	{r7, lr}
   30256:	b088      	sub	sp, #32
   30258:	af00      	add	r7, sp, #0
   3025a:	60f8      	str	r0, [r7, #12]
   3025c:	60b9      	str	r1, [r7, #8]
   3025e:	1dfb      	adds	r3, r7, #7
   30260:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30262:	2300      	movs	r3, #0
   30264:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30266:	2301      	movs	r3, #1
   30268:	425b      	negs	r3, r3
   3026a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3026c:	68fb      	ldr	r3, [r7, #12]
   3026e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30270:	68bb      	ldr	r3, [r7, #8]
   30272:	2b01      	cmp	r3, #1
   30274:	dc03      	bgt.n	3027e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30276:	2302      	movs	r3, #2
   30278:	425b      	negs	r3, r3
   3027a:	61fb      	str	r3, [r7, #28]
		goto exit;
   3027c:	e029      	b.n	302d2 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   3027e:	2318      	movs	r3, #24
   30280:	18fb      	adds	r3, r7, r3
   30282:	2200      	movs	r2, #0
   30284:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30286:	1dfb      	adds	r3, r7, #7
   30288:	781b      	ldrb	r3, [r3, #0]
   3028a:	220f      	movs	r2, #15
   3028c:	4013      	ands	r3, r2
   3028e:	b2da      	uxtb	r2, r3
   30290:	2318      	movs	r3, #24
   30292:	18fb      	adds	r3, r7, r3
   30294:	0110      	lsls	r0, r2, #4
   30296:	781a      	ldrb	r2, [r3, #0]
   30298:	210f      	movs	r1, #15
   3029a:	400a      	ands	r2, r1
   3029c:	1c11      	adds	r1, r2, #0
   3029e:	1c02      	adds	r2, r0, #0
   302a0:	430a      	orrs	r2, r1
   302a2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   302a4:	2318      	movs	r3, #24
   302a6:	18fb      	adds	r3, r7, r3
   302a8:	781a      	ldrb	r2, [r3, #0]
   302aa:	2314      	movs	r3, #20
   302ac:	18fb      	adds	r3, r7, r3
   302ae:	0011      	movs	r1, r2
   302b0:	0018      	movs	r0, r3
   302b2:	4b0a      	ldr	r3, [pc, #40]	; (302dc <MQTTSerialize_zero+0x88>)
   302b4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   302b6:	697b      	ldr	r3, [r7, #20]
   302b8:	2100      	movs	r1, #0
   302ba:	0018      	movs	r0, r3
   302bc:	4b08      	ldr	r3, [pc, #32]	; (302e0 <MQTTSerialize_zero+0x8c>)
   302be:	4798      	blx	r3
   302c0:	0002      	movs	r2, r0
   302c2:	697b      	ldr	r3, [r7, #20]
   302c4:	189b      	adds	r3, r3, r2
   302c6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   302c8:	697b      	ldr	r3, [r7, #20]
   302ca:	001a      	movs	r2, r3
   302cc:	68fb      	ldr	r3, [r7, #12]
   302ce:	1ad3      	subs	r3, r2, r3
   302d0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   302d2:	69fb      	ldr	r3, [r7, #28]
}
   302d4:	0018      	movs	r0, r3
   302d6:	46bd      	mov	sp, r7
   302d8:	b008      	add	sp, #32
   302da:	bd80      	pop	{r7, pc}
   302dc:	000306ff 	.word	0x000306ff
   302e0:	000304e5 	.word	0x000304e5

000302e4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   302e4:	b580      	push	{r7, lr}
   302e6:	b082      	sub	sp, #8
   302e8:	af00      	add	r7, sp, #0
   302ea:	6078      	str	r0, [r7, #4]
   302ec:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   302ee:	6839      	ldr	r1, [r7, #0]
   302f0:	687b      	ldr	r3, [r7, #4]
   302f2:	220e      	movs	r2, #14
   302f4:	0018      	movs	r0, r3
   302f6:	4b03      	ldr	r3, [pc, #12]	; (30304 <MQTTSerialize_disconnect+0x20>)
   302f8:	4798      	blx	r3
   302fa:	0003      	movs	r3, r0
}
   302fc:	0018      	movs	r0, r3
   302fe:	46bd      	mov	sp, r7
   30300:	b002      	add	sp, #8
   30302:	bd80      	pop	{r7, pc}
   30304:	00030255 	.word	0x00030255

00030308 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30308:	b580      	push	{r7, lr}
   3030a:	b082      	sub	sp, #8
   3030c:	af00      	add	r7, sp, #0
   3030e:	6078      	str	r0, [r7, #4]
   30310:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30312:	6839      	ldr	r1, [r7, #0]
   30314:	687b      	ldr	r3, [r7, #4]
   30316:	220c      	movs	r2, #12
   30318:	0018      	movs	r0, r3
   3031a:	4b03      	ldr	r3, [pc, #12]	; (30328 <MQTTSerialize_pingreq+0x20>)
   3031c:	4798      	blx	r3
   3031e:	0003      	movs	r3, r0
}
   30320:	0018      	movs	r0, r3
   30322:	46bd      	mov	sp, r7
   30324:	b002      	add	sp, #8
   30326:	bd80      	pop	{r7, pc}
   30328:	00030255 	.word	0x00030255

0003032c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   3032c:	b580      	push	{r7, lr}
   3032e:	b08a      	sub	sp, #40	; 0x28
   30330:	af00      	add	r7, sp, #0
   30332:	60f8      	str	r0, [r7, #12]
   30334:	60b9      	str	r1, [r7, #8]
   30336:	607a      	str	r2, [r7, #4]
   30338:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3033a:	2300      	movs	r3, #0
   3033c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3033e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30340:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30342:	2300      	movs	r3, #0
   30344:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30346:	2300      	movs	r3, #0
   30348:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   3034a:	2300      	movs	r3, #0
   3034c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3034e:	2318      	movs	r3, #24
   30350:	18fb      	adds	r3, r7, r3
   30352:	0018      	movs	r0, r3
   30354:	4b32      	ldr	r3, [pc, #200]	; (30420 <MQTTDeserialize_publish+0xf4>)
   30356:	4798      	blx	r3
   30358:	0003      	movs	r3, r0
   3035a:	001a      	movs	r2, r3
   3035c:	231c      	movs	r3, #28
   3035e:	18fb      	adds	r3, r7, r3
   30360:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30362:	231c      	movs	r3, #28
   30364:	18fb      	adds	r3, r7, r3
   30366:	781b      	ldrb	r3, [r3, #0]
   30368:	220f      	movs	r2, #15
   3036a:	4393      	bics	r3, r2
   3036c:	b2db      	uxtb	r3, r3
   3036e:	2b30      	cmp	r3, #48	; 0x30
   30370:	d150      	bne.n	30414 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30372:	231c      	movs	r3, #28
   30374:	18fb      	adds	r3, r7, r3
   30376:	781b      	ldrb	r3, [r3, #0]
   30378:	071b      	lsls	r3, r3, #28
   3037a:	0fdb      	lsrs	r3, r3, #31
   3037c:	b2db      	uxtb	r3, r3
   3037e:	001a      	movs	r2, r3
   30380:	68fb      	ldr	r3, [r7, #12]
   30382:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30384:	231c      	movs	r3, #28
   30386:	18fb      	adds	r3, r7, r3
   30388:	781b      	ldrb	r3, [r3, #0]
   3038a:	075b      	lsls	r3, r3, #29
   3038c:	0f9b      	lsrs	r3, r3, #30
   3038e:	b2db      	uxtb	r3, r3
   30390:	001a      	movs	r2, r3
   30392:	68bb      	ldr	r3, [r7, #8]
   30394:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30396:	231c      	movs	r3, #28
   30398:	18fb      	adds	r3, r7, r3
   3039a:	781b      	ldrb	r3, [r3, #0]
   3039c:	07db      	lsls	r3, r3, #31
   3039e:	0fdb      	lsrs	r3, r3, #31
   303a0:	b2db      	uxtb	r3, r3
   303a2:	001a      	movs	r2, r3
   303a4:	687b      	ldr	r3, [r7, #4]
   303a6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   303a8:	69bb      	ldr	r3, [r7, #24]
   303aa:	2214      	movs	r2, #20
   303ac:	18ba      	adds	r2, r7, r2
   303ae:	0011      	movs	r1, r2
   303b0:	0018      	movs	r0, r3
   303b2:	4b1c      	ldr	r3, [pc, #112]	; (30424 <MQTTDeserialize_publish+0xf8>)
   303b4:	4798      	blx	r3
   303b6:	0003      	movs	r3, r0
   303b8:	627b      	str	r3, [r7, #36]	; 0x24
   303ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   303bc:	69bb      	ldr	r3, [r7, #24]
   303be:	189b      	adds	r3, r3, r2
   303c0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   303c2:	69bb      	ldr	r3, [r7, #24]
   303c4:	697a      	ldr	r2, [r7, #20]
   303c6:	189b      	adds	r3, r3, r2
   303c8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   303ca:	6a3a      	ldr	r2, [r7, #32]
   303cc:	2318      	movs	r3, #24
   303ce:	18f9      	adds	r1, r7, r3
   303d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   303d2:	0018      	movs	r0, r3
   303d4:	4b14      	ldr	r3, [pc, #80]	; (30428 <MQTTDeserialize_publish+0xfc>)
   303d6:	4798      	blx	r3
   303d8:	1e03      	subs	r3, r0, #0
   303da:	d01c      	beq.n	30416 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   303dc:	6a3b      	ldr	r3, [r7, #32]
   303de:	69ba      	ldr	r2, [r7, #24]
   303e0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   303e2:	d418      	bmi.n	30416 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   303e4:	68bb      	ldr	r3, [r7, #8]
   303e6:	681b      	ldr	r3, [r3, #0]
   303e8:	2b00      	cmp	r3, #0
   303ea:	dd08      	ble.n	303fe <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   303ec:	2318      	movs	r3, #24
   303ee:	18fb      	adds	r3, r7, r3
   303f0:	0018      	movs	r0, r3
   303f2:	4b0e      	ldr	r3, [pc, #56]	; (3042c <MQTTDeserialize_publish+0x100>)
   303f4:	4798      	blx	r3
   303f6:	0003      	movs	r3, r0
   303f8:	b29a      	uxth	r2, r3
   303fa:	683b      	ldr	r3, [r7, #0]
   303fc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   303fe:	6a3b      	ldr	r3, [r7, #32]
   30400:	69ba      	ldr	r2, [r7, #24]
   30402:	1a9a      	subs	r2, r3, r2
   30404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30406:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30408:	69ba      	ldr	r2, [r7, #24]
   3040a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   3040c:	601a      	str	r2, [r3, #0]
	rc = 1;
   3040e:	2301      	movs	r3, #1
   30410:	627b      	str	r3, [r7, #36]	; 0x24
   30412:	e000      	b.n	30416 <MQTTDeserialize_publish+0xea>
		goto exit;
   30414:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30418:	0018      	movs	r0, r3
   3041a:	46bd      	mov	sp, r7
   3041c:	b00a      	add	sp, #40	; 0x28
   3041e:	bd80      	pop	{r7, pc}
   30420:	000306d3 	.word	0x000306d3
   30424:	0003066d 	.word	0x0003066d
   30428:	00030851 	.word	0x00030851
   3042c:	000306a1 	.word	0x000306a1

00030430 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30430:	b580      	push	{r7, lr}
   30432:	b08a      	sub	sp, #40	; 0x28
   30434:	af00      	add	r7, sp, #0
   30436:	60f8      	str	r0, [r7, #12]
   30438:	60b9      	str	r1, [r7, #8]
   3043a:	607a      	str	r2, [r7, #4]
   3043c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3043e:	2300      	movs	r3, #0
   30440:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30442:	683b      	ldr	r3, [r7, #0]
   30444:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30446:	2300      	movs	r3, #0
   30448:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3044a:	2300      	movs	r3, #0
   3044c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3044e:	2318      	movs	r3, #24
   30450:	18fb      	adds	r3, r7, r3
   30452:	0018      	movs	r0, r3
   30454:	4b20      	ldr	r3, [pc, #128]	; (304d8 <MQTTDeserialize_ack+0xa8>)
   30456:	4798      	blx	r3
   30458:	0003      	movs	r3, r0
   3045a:	001a      	movs	r2, r3
   3045c:	231c      	movs	r3, #28
   3045e:	18fb      	adds	r3, r7, r3
   30460:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30462:	231c      	movs	r3, #28
   30464:	18fb      	adds	r3, r7, r3
   30466:	781b      	ldrb	r3, [r3, #0]
   30468:	071b      	lsls	r3, r3, #28
   3046a:	0fdb      	lsrs	r3, r3, #31
   3046c:	b2db      	uxtb	r3, r3
   3046e:	001a      	movs	r2, r3
   30470:	68bb      	ldr	r3, [r7, #8]
   30472:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30474:	231c      	movs	r3, #28
   30476:	18fb      	adds	r3, r7, r3
   30478:	781b      	ldrb	r3, [r3, #0]
   3047a:	061b      	lsls	r3, r3, #24
   3047c:	0f1b      	lsrs	r3, r3, #28
   3047e:	b2db      	uxtb	r3, r3
   30480:	001a      	movs	r2, r3
   30482:	68fb      	ldr	r3, [r7, #12]
   30484:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30486:	69bb      	ldr	r3, [r7, #24]
   30488:	2214      	movs	r2, #20
   3048a:	18ba      	adds	r2, r7, r2
   3048c:	0011      	movs	r1, r2
   3048e:	0018      	movs	r0, r3
   30490:	4b12      	ldr	r3, [pc, #72]	; (304dc <MQTTDeserialize_ack+0xac>)
   30492:	4798      	blx	r3
   30494:	0003      	movs	r3, r0
   30496:	627b      	str	r3, [r7, #36]	; 0x24
   30498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3049a:	69bb      	ldr	r3, [r7, #24]
   3049c:	189b      	adds	r3, r3, r2
   3049e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   304a0:	69bb      	ldr	r3, [r7, #24]
   304a2:	697a      	ldr	r2, [r7, #20]
   304a4:	189b      	adds	r3, r3, r2
   304a6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   304a8:	6a3b      	ldr	r3, [r7, #32]
   304aa:	69ba      	ldr	r2, [r7, #24]
   304ac:	1a9b      	subs	r3, r3, r2
   304ae:	2b01      	cmp	r3, #1
   304b0:	dd0b      	ble.n	304ca <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   304b2:	2318      	movs	r3, #24
   304b4:	18fb      	adds	r3, r7, r3
   304b6:	0018      	movs	r0, r3
   304b8:	4b09      	ldr	r3, [pc, #36]	; (304e0 <MQTTDeserialize_ack+0xb0>)
   304ba:	4798      	blx	r3
   304bc:	0003      	movs	r3, r0
   304be:	b29a      	uxth	r2, r3
   304c0:	687b      	ldr	r3, [r7, #4]
   304c2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   304c4:	2301      	movs	r3, #1
   304c6:	627b      	str	r3, [r7, #36]	; 0x24
   304c8:	e000      	b.n	304cc <MQTTDeserialize_ack+0x9c>
		goto exit;
   304ca:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   304cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   304ce:	0018      	movs	r0, r3
   304d0:	46bd      	mov	sp, r7
   304d2:	b00a      	add	sp, #40	; 0x28
   304d4:	bd80      	pop	{r7, pc}
   304d6:	46c0      	nop			; (mov r8, r8)
   304d8:	000306d3 	.word	0x000306d3
   304dc:	0003066d 	.word	0x0003066d
   304e0:	000306a1 	.word	0x000306a1

000304e4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   304e4:	b580      	push	{r7, lr}
   304e6:	b084      	sub	sp, #16
   304e8:	af00      	add	r7, sp, #0
   304ea:	6078      	str	r0, [r7, #4]
   304ec:	6039      	str	r1, [r7, #0]
	int rc = 0;
   304ee:	2300      	movs	r3, #0
   304f0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   304f2:	683b      	ldr	r3, [r7, #0]
   304f4:	4a17      	ldr	r2, [pc, #92]	; (30554 <MQTTPacket_encode+0x70>)
   304f6:	4013      	ands	r3, r2
   304f8:	d504      	bpl.n	30504 <MQTTPacket_encode+0x20>
   304fa:	3b01      	subs	r3, #1
   304fc:	2280      	movs	r2, #128	; 0x80
   304fe:	4252      	negs	r2, r2
   30500:	4313      	orrs	r3, r2
   30502:	3301      	adds	r3, #1
   30504:	001a      	movs	r2, r3
   30506:	230b      	movs	r3, #11
   30508:	18fb      	adds	r3, r7, r3
   3050a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   3050c:	683b      	ldr	r3, [r7, #0]
   3050e:	2b00      	cmp	r3, #0
   30510:	da00      	bge.n	30514 <MQTTPacket_encode+0x30>
   30512:	337f      	adds	r3, #127	; 0x7f
   30514:	11db      	asrs	r3, r3, #7
   30516:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30518:	683b      	ldr	r3, [r7, #0]
   3051a:	2b00      	cmp	r3, #0
   3051c:	dd08      	ble.n	30530 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   3051e:	230b      	movs	r3, #11
   30520:	18fb      	adds	r3, r7, r3
   30522:	220b      	movs	r2, #11
   30524:	18ba      	adds	r2, r7, r2
   30526:	7812      	ldrb	r2, [r2, #0]
   30528:	2180      	movs	r1, #128	; 0x80
   3052a:	4249      	negs	r1, r1
   3052c:	430a      	orrs	r2, r1
   3052e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30530:	68fb      	ldr	r3, [r7, #12]
   30532:	1c5a      	adds	r2, r3, #1
   30534:	60fa      	str	r2, [r7, #12]
   30536:	001a      	movs	r2, r3
   30538:	687b      	ldr	r3, [r7, #4]
   3053a:	189b      	adds	r3, r3, r2
   3053c:	220b      	movs	r2, #11
   3053e:	18ba      	adds	r2, r7, r2
   30540:	7812      	ldrb	r2, [r2, #0]
   30542:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30544:	683b      	ldr	r3, [r7, #0]
   30546:	2b00      	cmp	r3, #0
   30548:	dcd3      	bgt.n	304f2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   3054a:	68fb      	ldr	r3, [r7, #12]
}
   3054c:	0018      	movs	r0, r3
   3054e:	46bd      	mov	sp, r7
   30550:	b004      	add	sp, #16
   30552:	bd80      	pop	{r7, pc}
   30554:	8000007f 	.word	0x8000007f

00030558 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30558:	b580      	push	{r7, lr}
   3055a:	b086      	sub	sp, #24
   3055c:	af00      	add	r7, sp, #0
   3055e:	6078      	str	r0, [r7, #4]
   30560:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30562:	2301      	movs	r3, #1
   30564:	617b      	str	r3, [r7, #20]
	int len = 0;
   30566:	2300      	movs	r3, #0
   30568:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   3056a:	683b      	ldr	r3, [r7, #0]
   3056c:	2200      	movs	r2, #0
   3056e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30570:	2301      	movs	r3, #1
   30572:	425b      	negs	r3, r3
   30574:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30576:	693b      	ldr	r3, [r7, #16]
   30578:	3301      	adds	r3, #1
   3057a:	613b      	str	r3, [r7, #16]
   3057c:	693b      	ldr	r3, [r7, #16]
   3057e:	2b04      	cmp	r3, #4
   30580:	dd03      	ble.n	3058a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30582:	2301      	movs	r3, #1
   30584:	425b      	negs	r3, r3
   30586:	60fb      	str	r3, [r7, #12]
			goto exit;
   30588:	e022      	b.n	305d0 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   3058a:	230b      	movs	r3, #11
   3058c:	18fa      	adds	r2, r7, r3
   3058e:	687b      	ldr	r3, [r7, #4]
   30590:	2101      	movs	r1, #1
   30592:	0010      	movs	r0, r2
   30594:	4798      	blx	r3
   30596:	0003      	movs	r3, r0
   30598:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   3059a:	68fb      	ldr	r3, [r7, #12]
   3059c:	2b01      	cmp	r3, #1
   3059e:	d116      	bne.n	305ce <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   305a0:	683b      	ldr	r3, [r7, #0]
   305a2:	681a      	ldr	r2, [r3, #0]
   305a4:	230b      	movs	r3, #11
   305a6:	18fb      	adds	r3, r7, r3
   305a8:	781b      	ldrb	r3, [r3, #0]
   305aa:	0019      	movs	r1, r3
   305ac:	237f      	movs	r3, #127	; 0x7f
   305ae:	400b      	ands	r3, r1
   305b0:	6979      	ldr	r1, [r7, #20]
   305b2:	434b      	muls	r3, r1
   305b4:	18d2      	adds	r2, r2, r3
   305b6:	683b      	ldr	r3, [r7, #0]
   305b8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   305ba:	697b      	ldr	r3, [r7, #20]
   305bc:	01db      	lsls	r3, r3, #7
   305be:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   305c0:	230b      	movs	r3, #11
   305c2:	18fb      	adds	r3, r7, r3
   305c4:	781b      	ldrb	r3, [r3, #0]
   305c6:	b25b      	sxtb	r3, r3
   305c8:	2b00      	cmp	r3, #0
   305ca:	dbd1      	blt.n	30570 <MQTTPacket_decode+0x18>
   305cc:	e000      	b.n	305d0 <MQTTPacket_decode+0x78>
			goto exit;
   305ce:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   305d0:	693b      	ldr	r3, [r7, #16]
}
   305d2:	0018      	movs	r0, r3
   305d4:	46bd      	mov	sp, r7
   305d6:	b006      	add	sp, #24
   305d8:	bd80      	pop	{r7, pc}
	...

000305dc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   305dc:	b580      	push	{r7, lr}
   305de:	b082      	sub	sp, #8
   305e0:	af00      	add	r7, sp, #0
   305e2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   305e4:	687b      	ldr	r3, [r7, #4]
   305e6:	3301      	adds	r3, #1
   305e8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   305ea:	687b      	ldr	r3, [r7, #4]
   305ec:	2b7f      	cmp	r3, #127	; 0x7f
   305ee:	dc03      	bgt.n	305f8 <MQTTPacket_len+0x1c>
		rem_len += 1;
   305f0:	687b      	ldr	r3, [r7, #4]
   305f2:	3301      	adds	r3, #1
   305f4:	607b      	str	r3, [r7, #4]
   305f6:	e012      	b.n	3061e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   305f8:	687b      	ldr	r3, [r7, #4]
   305fa:	4a0b      	ldr	r2, [pc, #44]	; (30628 <MQTTPacket_len+0x4c>)
   305fc:	4293      	cmp	r3, r2
   305fe:	dc03      	bgt.n	30608 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30600:	687b      	ldr	r3, [r7, #4]
   30602:	3302      	adds	r3, #2
   30604:	607b      	str	r3, [r7, #4]
   30606:	e00a      	b.n	3061e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30608:	687b      	ldr	r3, [r7, #4]
   3060a:	4a08      	ldr	r2, [pc, #32]	; (3062c <MQTTPacket_len+0x50>)
   3060c:	4293      	cmp	r3, r2
   3060e:	dc03      	bgt.n	30618 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30610:	687b      	ldr	r3, [r7, #4]
   30612:	3303      	adds	r3, #3
   30614:	607b      	str	r3, [r7, #4]
   30616:	e002      	b.n	3061e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30618:	687b      	ldr	r3, [r7, #4]
   3061a:	3304      	adds	r3, #4
   3061c:	607b      	str	r3, [r7, #4]
	return rem_len;
   3061e:	687b      	ldr	r3, [r7, #4]
}
   30620:	0018      	movs	r0, r3
   30622:	46bd      	mov	sp, r7
   30624:	b002      	add	sp, #8
   30626:	bd80      	pop	{r7, pc}
   30628:	00003fff 	.word	0x00003fff
   3062c:	001ffffe 	.word	0x001ffffe

00030630 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30630:	b580      	push	{r7, lr}
   30632:	b084      	sub	sp, #16
   30634:	af00      	add	r7, sp, #0
   30636:	6078      	str	r0, [r7, #4]
   30638:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   3063a:	2300      	movs	r3, #0
   3063c:	60fb      	str	r3, [r7, #12]
   3063e:	e00a      	b.n	30656 <bufchar+0x26>
		*c = *bufptr++;
   30640:	4b09      	ldr	r3, [pc, #36]	; (30668 <bufchar+0x38>)
   30642:	681b      	ldr	r3, [r3, #0]
   30644:	1c59      	adds	r1, r3, #1
   30646:	4a08      	ldr	r2, [pc, #32]	; (30668 <bufchar+0x38>)
   30648:	6011      	str	r1, [r2, #0]
   3064a:	781a      	ldrb	r2, [r3, #0]
   3064c:	687b      	ldr	r3, [r7, #4]
   3064e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30650:	68fb      	ldr	r3, [r7, #12]
   30652:	3301      	adds	r3, #1
   30654:	60fb      	str	r3, [r7, #12]
   30656:	68fa      	ldr	r2, [r7, #12]
   30658:	683b      	ldr	r3, [r7, #0]
   3065a:	429a      	cmp	r2, r3
   3065c:	dbf0      	blt.n	30640 <bufchar+0x10>
	return count;
   3065e:	683b      	ldr	r3, [r7, #0]
}
   30660:	0018      	movs	r0, r3
   30662:	46bd      	mov	sp, r7
   30664:	b004      	add	sp, #16
   30666:	bd80      	pop	{r7, pc}
   30668:	200046ec 	.word	0x200046ec

0003066c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   3066c:	b580      	push	{r7, lr}
   3066e:	b082      	sub	sp, #8
   30670:	af00      	add	r7, sp, #0
   30672:	6078      	str	r0, [r7, #4]
   30674:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30676:	4b07      	ldr	r3, [pc, #28]	; (30694 <MQTTPacket_decodeBuf+0x28>)
   30678:	687a      	ldr	r2, [r7, #4]
   3067a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   3067c:	683a      	ldr	r2, [r7, #0]
   3067e:	4b06      	ldr	r3, [pc, #24]	; (30698 <MQTTPacket_decodeBuf+0x2c>)
   30680:	0011      	movs	r1, r2
   30682:	0018      	movs	r0, r3
   30684:	4b05      	ldr	r3, [pc, #20]	; (3069c <MQTTPacket_decodeBuf+0x30>)
   30686:	4798      	blx	r3
   30688:	0003      	movs	r3, r0
}
   3068a:	0018      	movs	r0, r3
   3068c:	46bd      	mov	sp, r7
   3068e:	b002      	add	sp, #8
   30690:	bd80      	pop	{r7, pc}
   30692:	46c0      	nop			; (mov r8, r8)
   30694:	200046ec 	.word	0x200046ec
   30698:	00030631 	.word	0x00030631
   3069c:	00030559 	.word	0x00030559

000306a0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   306a0:	b580      	push	{r7, lr}
   306a2:	b084      	sub	sp, #16
   306a4:	af00      	add	r7, sp, #0
   306a6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   306a8:	687b      	ldr	r3, [r7, #4]
   306aa:	681b      	ldr	r3, [r3, #0]
   306ac:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   306ae:	68fb      	ldr	r3, [r7, #12]
   306b0:	781b      	ldrb	r3, [r3, #0]
   306b2:	021b      	lsls	r3, r3, #8
   306b4:	68fa      	ldr	r2, [r7, #12]
   306b6:	3201      	adds	r2, #1
   306b8:	7812      	ldrb	r2, [r2, #0]
   306ba:	189b      	adds	r3, r3, r2
   306bc:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   306be:	687b      	ldr	r3, [r7, #4]
   306c0:	681b      	ldr	r3, [r3, #0]
   306c2:	1c9a      	adds	r2, r3, #2
   306c4:	687b      	ldr	r3, [r7, #4]
   306c6:	601a      	str	r2, [r3, #0]
	return len;
   306c8:	68bb      	ldr	r3, [r7, #8]
}
   306ca:	0018      	movs	r0, r3
   306cc:	46bd      	mov	sp, r7
   306ce:	b004      	add	sp, #16
   306d0:	bd80      	pop	{r7, pc}

000306d2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   306d2:	b580      	push	{r7, lr}
   306d4:	b084      	sub	sp, #16
   306d6:	af00      	add	r7, sp, #0
   306d8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   306da:	687b      	ldr	r3, [r7, #4]
   306dc:	681a      	ldr	r2, [r3, #0]
   306de:	230f      	movs	r3, #15
   306e0:	18fb      	adds	r3, r7, r3
   306e2:	7812      	ldrb	r2, [r2, #0]
   306e4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   306e6:	687b      	ldr	r3, [r7, #4]
   306e8:	681b      	ldr	r3, [r3, #0]
   306ea:	1c5a      	adds	r2, r3, #1
   306ec:	687b      	ldr	r3, [r7, #4]
   306ee:	601a      	str	r2, [r3, #0]
	return c;
   306f0:	230f      	movs	r3, #15
   306f2:	18fb      	adds	r3, r7, r3
   306f4:	781b      	ldrb	r3, [r3, #0]
}
   306f6:	0018      	movs	r0, r3
   306f8:	46bd      	mov	sp, r7
   306fa:	b004      	add	sp, #16
   306fc:	bd80      	pop	{r7, pc}

000306fe <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   306fe:	b580      	push	{r7, lr}
   30700:	b082      	sub	sp, #8
   30702:	af00      	add	r7, sp, #0
   30704:	6078      	str	r0, [r7, #4]
   30706:	000a      	movs	r2, r1
   30708:	1cfb      	adds	r3, r7, #3
   3070a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   3070c:	687b      	ldr	r3, [r7, #4]
   3070e:	681b      	ldr	r3, [r3, #0]
   30710:	1cfa      	adds	r2, r7, #3
   30712:	7812      	ldrb	r2, [r2, #0]
   30714:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30716:	687b      	ldr	r3, [r7, #4]
   30718:	681b      	ldr	r3, [r3, #0]
   3071a:	1c5a      	adds	r2, r3, #1
   3071c:	687b      	ldr	r3, [r7, #4]
   3071e:	601a      	str	r2, [r3, #0]
}
   30720:	46c0      	nop			; (mov r8, r8)
   30722:	46bd      	mov	sp, r7
   30724:	b002      	add	sp, #8
   30726:	bd80      	pop	{r7, pc}

00030728 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   30728:	b580      	push	{r7, lr}
   3072a:	b082      	sub	sp, #8
   3072c:	af00      	add	r7, sp, #0
   3072e:	6078      	str	r0, [r7, #4]
   30730:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   30732:	687b      	ldr	r3, [r7, #4]
   30734:	681a      	ldr	r2, [r3, #0]
   30736:	683b      	ldr	r3, [r7, #0]
   30738:	2b00      	cmp	r3, #0
   3073a:	da00      	bge.n	3073e <writeInt+0x16>
   3073c:	33ff      	adds	r3, #255	; 0xff
   3073e:	121b      	asrs	r3, r3, #8
   30740:	b2db      	uxtb	r3, r3
   30742:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30744:	687b      	ldr	r3, [r7, #4]
   30746:	681b      	ldr	r3, [r3, #0]
   30748:	1c5a      	adds	r2, r3, #1
   3074a:	687b      	ldr	r3, [r7, #4]
   3074c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   3074e:	687b      	ldr	r3, [r7, #4]
   30750:	681a      	ldr	r2, [r3, #0]
   30752:	683b      	ldr	r3, [r7, #0]
   30754:	4908      	ldr	r1, [pc, #32]	; (30778 <writeInt+0x50>)
   30756:	400b      	ands	r3, r1
   30758:	d503      	bpl.n	30762 <writeInt+0x3a>
   3075a:	3b01      	subs	r3, #1
   3075c:	4907      	ldr	r1, [pc, #28]	; (3077c <writeInt+0x54>)
   3075e:	430b      	orrs	r3, r1
   30760:	3301      	adds	r3, #1
   30762:	b2db      	uxtb	r3, r3
   30764:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30766:	687b      	ldr	r3, [r7, #4]
   30768:	681b      	ldr	r3, [r3, #0]
   3076a:	1c5a      	adds	r2, r3, #1
   3076c:	687b      	ldr	r3, [r7, #4]
   3076e:	601a      	str	r2, [r3, #0]
}
   30770:	46c0      	nop			; (mov r8, r8)
   30772:	46bd      	mov	sp, r7
   30774:	b002      	add	sp, #8
   30776:	bd80      	pop	{r7, pc}
   30778:	800000ff 	.word	0x800000ff
   3077c:	ffffff00 	.word	0xffffff00

00030780 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30780:	b580      	push	{r7, lr}
   30782:	b084      	sub	sp, #16
   30784:	af00      	add	r7, sp, #0
   30786:	6078      	str	r0, [r7, #4]
   30788:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   3078a:	683b      	ldr	r3, [r7, #0]
   3078c:	0018      	movs	r0, r3
   3078e:	4b0d      	ldr	r3, [pc, #52]	; (307c4 <writeCString+0x44>)
   30790:	4798      	blx	r3
   30792:	0003      	movs	r3, r0
   30794:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30796:	68fa      	ldr	r2, [r7, #12]
   30798:	687b      	ldr	r3, [r7, #4]
   3079a:	0011      	movs	r1, r2
   3079c:	0018      	movs	r0, r3
   3079e:	4b0a      	ldr	r3, [pc, #40]	; (307c8 <writeCString+0x48>)
   307a0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   307a2:	687b      	ldr	r3, [r7, #4]
   307a4:	681b      	ldr	r3, [r3, #0]
   307a6:	68fa      	ldr	r2, [r7, #12]
   307a8:	6839      	ldr	r1, [r7, #0]
   307aa:	0018      	movs	r0, r3
   307ac:	4b07      	ldr	r3, [pc, #28]	; (307cc <writeCString+0x4c>)
   307ae:	4798      	blx	r3
	*pptr += len;
   307b0:	687b      	ldr	r3, [r7, #4]
   307b2:	681a      	ldr	r2, [r3, #0]
   307b4:	68fb      	ldr	r3, [r7, #12]
   307b6:	18d2      	adds	r2, r2, r3
   307b8:	687b      	ldr	r3, [r7, #4]
   307ba:	601a      	str	r2, [r3, #0]
}
   307bc:	46c0      	nop			; (mov r8, r8)
   307be:	46bd      	mov	sp, r7
   307c0:	b004      	add	sp, #16
   307c2:	bd80      	pop	{r7, pc}
   307c4:	000351cb 	.word	0x000351cb
   307c8:	00030729 	.word	0x00030729
   307cc:	00034ddd 	.word	0x00034ddd

000307d0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   307d0:	b580      	push	{r7, lr}
   307d2:	b084      	sub	sp, #16
   307d4:	af00      	add	r7, sp, #0
   307d6:	60f8      	str	r0, [r7, #12]
   307d8:	0038      	movs	r0, r7
   307da:	6001      	str	r1, [r0, #0]
   307dc:	6042      	str	r2, [r0, #4]
   307de:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   307e0:	003b      	movs	r3, r7
   307e2:	685b      	ldr	r3, [r3, #4]
   307e4:	2b00      	cmp	r3, #0
   307e6:	dd17      	ble.n	30818 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   307e8:	003b      	movs	r3, r7
   307ea:	685a      	ldr	r2, [r3, #4]
   307ec:	68fb      	ldr	r3, [r7, #12]
   307ee:	0011      	movs	r1, r2
   307f0:	0018      	movs	r0, r3
   307f2:	4b14      	ldr	r3, [pc, #80]	; (30844 <writeMQTTString+0x74>)
   307f4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   307f6:	68fb      	ldr	r3, [r7, #12]
   307f8:	6818      	ldr	r0, [r3, #0]
   307fa:	003b      	movs	r3, r7
   307fc:	6899      	ldr	r1, [r3, #8]
   307fe:	003b      	movs	r3, r7
   30800:	685b      	ldr	r3, [r3, #4]
   30802:	001a      	movs	r2, r3
   30804:	4b10      	ldr	r3, [pc, #64]	; (30848 <writeMQTTString+0x78>)
   30806:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   30808:	68fb      	ldr	r3, [r7, #12]
   3080a:	681a      	ldr	r2, [r3, #0]
   3080c:	003b      	movs	r3, r7
   3080e:	685b      	ldr	r3, [r3, #4]
   30810:	18d2      	adds	r2, r2, r3
   30812:	68fb      	ldr	r3, [r7, #12]
   30814:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   30816:	e010      	b.n	3083a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   30818:	003b      	movs	r3, r7
   3081a:	681b      	ldr	r3, [r3, #0]
   3081c:	2b00      	cmp	r3, #0
   3081e:	d007      	beq.n	30830 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   30820:	003b      	movs	r3, r7
   30822:	681a      	ldr	r2, [r3, #0]
   30824:	68fb      	ldr	r3, [r7, #12]
   30826:	0011      	movs	r1, r2
   30828:	0018      	movs	r0, r3
   3082a:	4b08      	ldr	r3, [pc, #32]	; (3084c <writeMQTTString+0x7c>)
   3082c:	4798      	blx	r3
}
   3082e:	e004      	b.n	3083a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   30830:	68fb      	ldr	r3, [r7, #12]
   30832:	2100      	movs	r1, #0
   30834:	0018      	movs	r0, r3
   30836:	4b03      	ldr	r3, [pc, #12]	; (30844 <writeMQTTString+0x74>)
   30838:	4798      	blx	r3
}
   3083a:	46c0      	nop			; (mov r8, r8)
   3083c:	46bd      	mov	sp, r7
   3083e:	b004      	add	sp, #16
   30840:	bd80      	pop	{r7, pc}
   30842:	46c0      	nop			; (mov r8, r8)
   30844:	00030729 	.word	0x00030729
   30848:	00034ddd 	.word	0x00034ddd
   3084c:	00030781 	.word	0x00030781

00030850 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   30850:	b580      	push	{r7, lr}
   30852:	b086      	sub	sp, #24
   30854:	af00      	add	r7, sp, #0
   30856:	60f8      	str	r0, [r7, #12]
   30858:	60b9      	str	r1, [r7, #8]
   3085a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   3085c:	2300      	movs	r3, #0
   3085e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   30860:	687a      	ldr	r2, [r7, #4]
   30862:	68bb      	ldr	r3, [r7, #8]
   30864:	681b      	ldr	r3, [r3, #0]
   30866:	1ad3      	subs	r3, r2, r3
   30868:	2b01      	cmp	r3, #1
   3086a:	dd1b      	ble.n	308a4 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   3086c:	68bb      	ldr	r3, [r7, #8]
   3086e:	0018      	movs	r0, r3
   30870:	4b10      	ldr	r3, [pc, #64]	; (308b4 <readMQTTLenString+0x64>)
   30872:	4798      	blx	r3
   30874:	0002      	movs	r2, r0
   30876:	68fb      	ldr	r3, [r7, #12]
   30878:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   3087a:	68bb      	ldr	r3, [r7, #8]
   3087c:	681a      	ldr	r2, [r3, #0]
   3087e:	68fb      	ldr	r3, [r7, #12]
   30880:	685b      	ldr	r3, [r3, #4]
   30882:	18d2      	adds	r2, r2, r3
   30884:	687b      	ldr	r3, [r7, #4]
   30886:	429a      	cmp	r2, r3
   30888:	d80c      	bhi.n	308a4 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   3088a:	68bb      	ldr	r3, [r7, #8]
   3088c:	681a      	ldr	r2, [r3, #0]
   3088e:	68fb      	ldr	r3, [r7, #12]
   30890:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   30892:	68bb      	ldr	r3, [r7, #8]
   30894:	681a      	ldr	r2, [r3, #0]
   30896:	68fb      	ldr	r3, [r7, #12]
   30898:	685b      	ldr	r3, [r3, #4]
   3089a:	18d2      	adds	r2, r2, r3
   3089c:	68bb      	ldr	r3, [r7, #8]
   3089e:	601a      	str	r2, [r3, #0]
			rc = 1;
   308a0:	2301      	movs	r3, #1
   308a2:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   308a4:	68fb      	ldr	r3, [r7, #12]
   308a6:	2200      	movs	r2, #0
   308a8:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   308aa:	697b      	ldr	r3, [r7, #20]
}
   308ac:	0018      	movs	r0, r3
   308ae:	46bd      	mov	sp, r7
   308b0:	b006      	add	sp, #24
   308b2:	bd80      	pop	{r7, pc}
   308b4:	000306a1 	.word	0x000306a1

000308b8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   308b8:	b580      	push	{r7, lr}
   308ba:	b086      	sub	sp, #24
   308bc:	af00      	add	r7, sp, #0
   308be:	1d3b      	adds	r3, r7, #4
   308c0:	6018      	str	r0, [r3, #0]
   308c2:	6059      	str	r1, [r3, #4]
   308c4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   308c6:	2300      	movs	r3, #0
   308c8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   308ca:	1d3b      	adds	r3, r7, #4
   308cc:	681b      	ldr	r3, [r3, #0]
   308ce:	2b00      	cmp	r3, #0
   308d0:	d007      	beq.n	308e2 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   308d2:	1d3b      	adds	r3, r7, #4
   308d4:	681b      	ldr	r3, [r3, #0]
   308d6:	0018      	movs	r0, r3
   308d8:	4b06      	ldr	r3, [pc, #24]	; (308f4 <MQTTstrlen+0x3c>)
   308da:	4798      	blx	r3
   308dc:	0003      	movs	r3, r0
   308de:	617b      	str	r3, [r7, #20]
   308e0:	e002      	b.n	308e8 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   308e2:	1d3b      	adds	r3, r7, #4
   308e4:	685b      	ldr	r3, [r3, #4]
   308e6:	617b      	str	r3, [r7, #20]
	return rc;
   308e8:	697b      	ldr	r3, [r7, #20]
}
   308ea:	0018      	movs	r0, r3
   308ec:	46bd      	mov	sp, r7
   308ee:	b006      	add	sp, #24
   308f0:	bd80      	pop	{r7, pc}
   308f2:	46c0      	nop			; (mov r8, r8)
   308f4:	000351cb 	.word	0x000351cb

000308f8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   308f8:	b580      	push	{r7, lr}
   308fa:	b086      	sub	sp, #24
   308fc:	af00      	add	r7, sp, #0
   308fe:	6078      	str	r0, [r7, #4]
   30900:	6039      	str	r1, [r7, #0]
	int alen = 0,
   30902:	2300      	movs	r3, #0
   30904:	617b      	str	r3, [r7, #20]
		blen = 0;
   30906:	2300      	movs	r3, #0
   30908:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3090a:	687b      	ldr	r3, [r7, #4]
   3090c:	681b      	ldr	r3, [r3, #0]
   3090e:	2b00      	cmp	r3, #0
   30910:	d00a      	beq.n	30928 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   30912:	687b      	ldr	r3, [r7, #4]
   30914:	681b      	ldr	r3, [r3, #0]
   30916:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   30918:	687b      	ldr	r3, [r7, #4]
   3091a:	681b      	ldr	r3, [r3, #0]
   3091c:	0018      	movs	r0, r3
   3091e:	4b12      	ldr	r3, [pc, #72]	; (30968 <MQTTPacket_equals+0x70>)
   30920:	4798      	blx	r3
   30922:	0003      	movs	r3, r0
   30924:	617b      	str	r3, [r7, #20]
   30926:	e005      	b.n	30934 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   30928:	687b      	ldr	r3, [r7, #4]
   3092a:	689b      	ldr	r3, [r3, #8]
   3092c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3092e:	687b      	ldr	r3, [r7, #4]
   30930:	685b      	ldr	r3, [r3, #4]
   30932:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   30934:	683b      	ldr	r3, [r7, #0]
   30936:	0018      	movs	r0, r3
   30938:	4b0b      	ldr	r3, [pc, #44]	; (30968 <MQTTPacket_equals+0x70>)
   3093a:	4798      	blx	r3
   3093c:	0003      	movs	r3, r0
   3093e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   30940:	697a      	ldr	r2, [r7, #20]
   30942:	68fb      	ldr	r3, [r7, #12]
   30944:	429a      	cmp	r2, r3
   30946:	d109      	bne.n	3095c <MQTTPacket_equals+0x64>
   30948:	697a      	ldr	r2, [r7, #20]
   3094a:	6839      	ldr	r1, [r7, #0]
   3094c:	693b      	ldr	r3, [r7, #16]
   3094e:	0018      	movs	r0, r3
   30950:	4b06      	ldr	r3, [pc, #24]	; (3096c <MQTTPacket_equals+0x74>)
   30952:	4798      	blx	r3
   30954:	1e03      	subs	r3, r0, #0
   30956:	d101      	bne.n	3095c <MQTTPacket_equals+0x64>
   30958:	2301      	movs	r3, #1
   3095a:	e000      	b.n	3095e <MQTTPacket_equals+0x66>
   3095c:	2300      	movs	r3, #0
}
   3095e:	0018      	movs	r0, r3
   30960:	46bd      	mov	sp, r7
   30962:	b006      	add	sp, #24
   30964:	bd80      	pop	{r7, pc}
   30966:	46c0      	nop			; (mov r8, r8)
   30968:	000351cb 	.word	0x000351cb
   3096c:	000351d9 	.word	0x000351d9

00030970 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30970:	b580      	push	{r7, lr}
   30972:	b086      	sub	sp, #24
   30974:	af00      	add	r7, sp, #0
   30976:	60f8      	str	r0, [r7, #12]
   30978:	0038      	movs	r0, r7
   3097a:	6001      	str	r1, [r0, #0]
   3097c:	6042      	str	r2, [r0, #4]
   3097e:	6083      	str	r3, [r0, #8]
	int len = 0;
   30980:	2300      	movs	r3, #0
   30982:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   30984:	003b      	movs	r3, r7
   30986:	6818      	ldr	r0, [r3, #0]
   30988:	6859      	ldr	r1, [r3, #4]
   3098a:	689a      	ldr	r2, [r3, #8]
   3098c:	4b09      	ldr	r3, [pc, #36]	; (309b4 <MQTTSerialize_publishLength+0x44>)
   3098e:	4798      	blx	r3
   30990:	0003      	movs	r3, r0
   30992:	1c9a      	adds	r2, r3, #2
   30994:	6a3b      	ldr	r3, [r7, #32]
   30996:	18d3      	adds	r3, r2, r3
   30998:	697a      	ldr	r2, [r7, #20]
   3099a:	18d3      	adds	r3, r2, r3
   3099c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   3099e:	68fb      	ldr	r3, [r7, #12]
   309a0:	2b00      	cmp	r3, #0
   309a2:	dd02      	ble.n	309aa <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   309a4:	697b      	ldr	r3, [r7, #20]
   309a6:	3302      	adds	r3, #2
   309a8:	617b      	str	r3, [r7, #20]
	return len;
   309aa:	697b      	ldr	r3, [r7, #20]
}
   309ac:	0018      	movs	r0, r3
   309ae:	46bd      	mov	sp, r7
   309b0:	b006      	add	sp, #24
   309b2:	bd80      	pop	{r7, pc}
   309b4:	000308b9 	.word	0x000308b9

000309b8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   309b8:	b590      	push	{r4, r7, lr}
   309ba:	b08b      	sub	sp, #44	; 0x2c
   309bc:	af02      	add	r7, sp, #8
   309be:	60f8      	str	r0, [r7, #12]
   309c0:	60b9      	str	r1, [r7, #8]
   309c2:	603b      	str	r3, [r7, #0]
   309c4:	1dfb      	adds	r3, r7, #7
   309c6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   309c8:	68fb      	ldr	r3, [r7, #12]
   309ca:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   309cc:	2300      	movs	r3, #0
   309ce:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   309d0:	2300      	movs	r3, #0
   309d2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   309d4:	2300      	movs	r3, #0
   309d6:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   309d8:	2308      	movs	r3, #8
   309da:	2230      	movs	r2, #48	; 0x30
   309dc:	4694      	mov	ip, r2
   309de:	44bc      	add	ip, r7
   309e0:	4463      	add	r3, ip
   309e2:	6838      	ldr	r0, [r7, #0]
   309e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   309e6:	9200      	str	r2, [sp, #0]
   309e8:	6819      	ldr	r1, [r3, #0]
   309ea:	685a      	ldr	r2, [r3, #4]
   309ec:	689b      	ldr	r3, [r3, #8]
   309ee:	4c46      	ldr	r4, [pc, #280]	; (30b08 <MQTTSerialize_publish+0x150>)
   309f0:	47a0      	blx	r4
   309f2:	0003      	movs	r3, r0
   309f4:	61bb      	str	r3, [r7, #24]
   309f6:	69bb      	ldr	r3, [r7, #24]
   309f8:	0018      	movs	r0, r3
   309fa:	4b44      	ldr	r3, [pc, #272]	; (30b0c <MQTTSerialize_publish+0x154>)
   309fc:	4798      	blx	r3
   309fe:	0002      	movs	r2, r0
   30a00:	68bb      	ldr	r3, [r7, #8]
   30a02:	429a      	cmp	r2, r3
   30a04:	dd03      	ble.n	30a0e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30a06:	2302      	movs	r3, #2
   30a08:	425b      	negs	r3, r3
   30a0a:	61fb      	str	r3, [r7, #28]
		goto exit;
   30a0c:	e077      	b.n	30afe <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   30a0e:	2310      	movs	r3, #16
   30a10:	18fb      	adds	r3, r7, r3
   30a12:	781a      	ldrb	r2, [r3, #0]
   30a14:	210f      	movs	r1, #15
   30a16:	400a      	ands	r2, r1
   30a18:	1c11      	adds	r1, r2, #0
   30a1a:	2230      	movs	r2, #48	; 0x30
   30a1c:	430a      	orrs	r2, r1
   30a1e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30a20:	1dfb      	adds	r3, r7, #7
   30a22:	781b      	ldrb	r3, [r3, #0]
   30a24:	2201      	movs	r2, #1
   30a26:	4013      	ands	r3, r2
   30a28:	b2da      	uxtb	r2, r3
   30a2a:	2310      	movs	r3, #16
   30a2c:	18fb      	adds	r3, r7, r3
   30a2e:	2101      	movs	r1, #1
   30a30:	400a      	ands	r2, r1
   30a32:	00d0      	lsls	r0, r2, #3
   30a34:	781a      	ldrb	r2, [r3, #0]
   30a36:	2108      	movs	r1, #8
   30a38:	438a      	bics	r2, r1
   30a3a:	1c11      	adds	r1, r2, #0
   30a3c:	1c02      	adds	r2, r0, #0
   30a3e:	430a      	orrs	r2, r1
   30a40:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   30a42:	683b      	ldr	r3, [r7, #0]
   30a44:	b2db      	uxtb	r3, r3
   30a46:	1c1a      	adds	r2, r3, #0
   30a48:	2303      	movs	r3, #3
   30a4a:	4013      	ands	r3, r2
   30a4c:	b2da      	uxtb	r2, r3
   30a4e:	2310      	movs	r3, #16
   30a50:	18fb      	adds	r3, r7, r3
   30a52:	2103      	movs	r1, #3
   30a54:	400a      	ands	r2, r1
   30a56:	1890      	adds	r0, r2, r2
   30a58:	781a      	ldrb	r2, [r3, #0]
   30a5a:	2106      	movs	r1, #6
   30a5c:	438a      	bics	r2, r1
   30a5e:	1c11      	adds	r1, r2, #0
   30a60:	1c02      	adds	r2, r0, #0
   30a62:	430a      	orrs	r2, r1
   30a64:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   30a66:	2330      	movs	r3, #48	; 0x30
   30a68:	18fb      	adds	r3, r7, r3
   30a6a:	781b      	ldrb	r3, [r3, #0]
   30a6c:	2201      	movs	r2, #1
   30a6e:	4013      	ands	r3, r2
   30a70:	b2da      	uxtb	r2, r3
   30a72:	2310      	movs	r3, #16
   30a74:	18fb      	adds	r3, r7, r3
   30a76:	2101      	movs	r1, #1
   30a78:	400a      	ands	r2, r1
   30a7a:	0010      	movs	r0, r2
   30a7c:	781a      	ldrb	r2, [r3, #0]
   30a7e:	2101      	movs	r1, #1
   30a80:	438a      	bics	r2, r1
   30a82:	1c11      	adds	r1, r2, #0
   30a84:	1c02      	adds	r2, r0, #0
   30a86:	430a      	orrs	r2, r1
   30a88:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30a8a:	2310      	movs	r3, #16
   30a8c:	18fb      	adds	r3, r7, r3
   30a8e:	781a      	ldrb	r2, [r3, #0]
   30a90:	2314      	movs	r3, #20
   30a92:	18fb      	adds	r3, r7, r3
   30a94:	0011      	movs	r1, r2
   30a96:	0018      	movs	r0, r3
   30a98:	4b1d      	ldr	r3, [pc, #116]	; (30b10 <MQTTSerialize_publish+0x158>)
   30a9a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30a9c:	697b      	ldr	r3, [r7, #20]
   30a9e:	69ba      	ldr	r2, [r7, #24]
   30aa0:	0011      	movs	r1, r2
   30aa2:	0018      	movs	r0, r3
   30aa4:	4b1b      	ldr	r3, [pc, #108]	; (30b14 <MQTTSerialize_publish+0x15c>)
   30aa6:	4798      	blx	r3
   30aa8:	0002      	movs	r2, r0
   30aaa:	697b      	ldr	r3, [r7, #20]
   30aac:	189b      	adds	r3, r3, r2
   30aae:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30ab0:	2308      	movs	r3, #8
   30ab2:	2230      	movs	r2, #48	; 0x30
   30ab4:	4694      	mov	ip, r2
   30ab6:	44bc      	add	ip, r7
   30ab8:	4463      	add	r3, ip
   30aba:	2214      	movs	r2, #20
   30abc:	18b8      	adds	r0, r7, r2
   30abe:	6819      	ldr	r1, [r3, #0]
   30ac0:	685a      	ldr	r2, [r3, #4]
   30ac2:	689b      	ldr	r3, [r3, #8]
   30ac4:	4c14      	ldr	r4, [pc, #80]	; (30b18 <MQTTSerialize_publish+0x160>)
   30ac6:	47a0      	blx	r4

	if (qos > 0)
   30ac8:	683b      	ldr	r3, [r7, #0]
   30aca:	2b00      	cmp	r3, #0
   30acc:	dd08      	ble.n	30ae0 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30ace:	2334      	movs	r3, #52	; 0x34
   30ad0:	18fb      	adds	r3, r7, r3
   30ad2:	881a      	ldrh	r2, [r3, #0]
   30ad4:	2314      	movs	r3, #20
   30ad6:	18fb      	adds	r3, r7, r3
   30ad8:	0011      	movs	r1, r2
   30ada:	0018      	movs	r0, r3
   30adc:	4b0f      	ldr	r3, [pc, #60]	; (30b1c <MQTTSerialize_publish+0x164>)
   30ade:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30ae0:	697b      	ldr	r3, [r7, #20]
   30ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30ae4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   30ae6:	0018      	movs	r0, r3
   30ae8:	4b0d      	ldr	r3, [pc, #52]	; (30b20 <MQTTSerialize_publish+0x168>)
   30aea:	4798      	blx	r3
	ptr += payloadlen;
   30aec:	697a      	ldr	r2, [r7, #20]
   30aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30af0:	18d3      	adds	r3, r2, r3
   30af2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   30af4:	697b      	ldr	r3, [r7, #20]
   30af6:	001a      	movs	r2, r3
   30af8:	68fb      	ldr	r3, [r7, #12]
   30afa:	1ad3      	subs	r3, r2, r3
   30afc:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30afe:	69fb      	ldr	r3, [r7, #28]
}
   30b00:	0018      	movs	r0, r3
   30b02:	46bd      	mov	sp, r7
   30b04:	b009      	add	sp, #36	; 0x24
   30b06:	bd90      	pop	{r4, r7, pc}
   30b08:	00030971 	.word	0x00030971
   30b0c:	000305dd 	.word	0x000305dd
   30b10:	000306ff 	.word	0x000306ff
   30b14:	000304e5 	.word	0x000304e5
   30b18:	000307d1 	.word	0x000307d1
   30b1c:	00030729 	.word	0x00030729
   30b20:	00034ddd 	.word	0x00034ddd

00030b24 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   30b24:	b580      	push	{r7, lr}
   30b26:	b088      	sub	sp, #32
   30b28:	af00      	add	r7, sp, #0
   30b2a:	60f8      	str	r0, [r7, #12]
   30b2c:	60b9      	str	r1, [r7, #8]
   30b2e:	0019      	movs	r1, r3
   30b30:	1dfb      	adds	r3, r7, #7
   30b32:	701a      	strb	r2, [r3, #0]
   30b34:	1dbb      	adds	r3, r7, #6
   30b36:	1c0a      	adds	r2, r1, #0
   30b38:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30b3a:	2300      	movs	r3, #0
   30b3c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30b3e:	2300      	movs	r3, #0
   30b40:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30b42:	68fb      	ldr	r3, [r7, #12]
   30b44:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   30b46:	68bb      	ldr	r3, [r7, #8]
   30b48:	2b03      	cmp	r3, #3
   30b4a:	dc03      	bgt.n	30b54 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30b4c:	2302      	movs	r3, #2
   30b4e:	425b      	negs	r3, r3
   30b50:	61fb      	str	r3, [r7, #28]
		goto exit;
   30b52:	e055      	b.n	30c00 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   30b54:	1dfb      	adds	r3, r7, #7
   30b56:	781b      	ldrb	r3, [r3, #0]
   30b58:	220f      	movs	r2, #15
   30b5a:	4013      	ands	r3, r2
   30b5c:	b2da      	uxtb	r2, r3
   30b5e:	2318      	movs	r3, #24
   30b60:	18fb      	adds	r3, r7, r3
   30b62:	0110      	lsls	r0, r2, #4
   30b64:	781a      	ldrb	r2, [r3, #0]
   30b66:	210f      	movs	r1, #15
   30b68:	400a      	ands	r2, r1
   30b6a:	1c11      	adds	r1, r2, #0
   30b6c:	1c02      	adds	r2, r0, #0
   30b6e:	430a      	orrs	r2, r1
   30b70:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30b72:	1dbb      	adds	r3, r7, #6
   30b74:	781b      	ldrb	r3, [r3, #0]
   30b76:	2201      	movs	r2, #1
   30b78:	4013      	ands	r3, r2
   30b7a:	b2da      	uxtb	r2, r3
   30b7c:	2318      	movs	r3, #24
   30b7e:	18fb      	adds	r3, r7, r3
   30b80:	2101      	movs	r1, #1
   30b82:	400a      	ands	r2, r1
   30b84:	00d0      	lsls	r0, r2, #3
   30b86:	781a      	ldrb	r2, [r3, #0]
   30b88:	2108      	movs	r1, #8
   30b8a:	438a      	bics	r2, r1
   30b8c:	1c11      	adds	r1, r2, #0
   30b8e:	1c02      	adds	r2, r0, #0
   30b90:	430a      	orrs	r2, r1
   30b92:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30b94:	1dfb      	adds	r3, r7, #7
   30b96:	781b      	ldrb	r3, [r3, #0]
   30b98:	3b06      	subs	r3, #6
   30b9a:	425a      	negs	r2, r3
   30b9c:	4153      	adcs	r3, r2
   30b9e:	b2db      	uxtb	r3, r3
   30ba0:	1c1a      	adds	r2, r3, #0
   30ba2:	2303      	movs	r3, #3
   30ba4:	4013      	ands	r3, r2
   30ba6:	b2da      	uxtb	r2, r3
   30ba8:	2318      	movs	r3, #24
   30baa:	18fb      	adds	r3, r7, r3
   30bac:	2103      	movs	r1, #3
   30bae:	400a      	ands	r2, r1
   30bb0:	1890      	adds	r0, r2, r2
   30bb2:	781a      	ldrb	r2, [r3, #0]
   30bb4:	2106      	movs	r1, #6
   30bb6:	438a      	bics	r2, r1
   30bb8:	1c11      	adds	r1, r2, #0
   30bba:	1c02      	adds	r2, r0, #0
   30bbc:	430a      	orrs	r2, r1
   30bbe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30bc0:	2318      	movs	r3, #24
   30bc2:	18fb      	adds	r3, r7, r3
   30bc4:	781a      	ldrb	r2, [r3, #0]
   30bc6:	2314      	movs	r3, #20
   30bc8:	18fb      	adds	r3, r7, r3
   30bca:	0011      	movs	r1, r2
   30bcc:	0018      	movs	r0, r3
   30bce:	4b0f      	ldr	r3, [pc, #60]	; (30c0c <MQTTSerialize_ack+0xe8>)
   30bd0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30bd2:	697b      	ldr	r3, [r7, #20]
   30bd4:	2102      	movs	r1, #2
   30bd6:	0018      	movs	r0, r3
   30bd8:	4b0d      	ldr	r3, [pc, #52]	; (30c10 <MQTTSerialize_ack+0xec>)
   30bda:	4798      	blx	r3
   30bdc:	0002      	movs	r2, r0
   30bde:	697b      	ldr	r3, [r7, #20]
   30be0:	189b      	adds	r3, r3, r2
   30be2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   30be4:	2328      	movs	r3, #40	; 0x28
   30be6:	18fb      	adds	r3, r7, r3
   30be8:	881a      	ldrh	r2, [r3, #0]
   30bea:	2314      	movs	r3, #20
   30bec:	18fb      	adds	r3, r7, r3
   30bee:	0011      	movs	r1, r2
   30bf0:	0018      	movs	r0, r3
   30bf2:	4b08      	ldr	r3, [pc, #32]	; (30c14 <MQTTSerialize_ack+0xf0>)
   30bf4:	4798      	blx	r3
	rc = ptr - buf;
   30bf6:	697b      	ldr	r3, [r7, #20]
   30bf8:	001a      	movs	r2, r3
   30bfa:	68fb      	ldr	r3, [r7, #12]
   30bfc:	1ad3      	subs	r3, r2, r3
   30bfe:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c00:	69fb      	ldr	r3, [r7, #28]
}
   30c02:	0018      	movs	r0, r3
   30c04:	46bd      	mov	sp, r7
   30c06:	b008      	add	sp, #32
   30c08:	bd80      	pop	{r7, pc}
   30c0a:	46c0      	nop			; (mov r8, r8)
   30c0c:	000306ff 	.word	0x000306ff
   30c10:	000304e5 	.word	0x000304e5
   30c14:	00030729 	.word	0x00030729

00030c18 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30c18:	b580      	push	{r7, lr}
   30c1a:	b084      	sub	sp, #16
   30c1c:	af00      	add	r7, sp, #0
   30c1e:	6078      	str	r0, [r7, #4]
   30c20:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   30c22:	2302      	movs	r3, #2
   30c24:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   30c26:	2300      	movs	r3, #0
   30c28:	60fb      	str	r3, [r7, #12]
   30c2a:	e014      	b.n	30c56 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30c2c:	68fa      	ldr	r2, [r7, #12]
   30c2e:	0013      	movs	r3, r2
   30c30:	005b      	lsls	r3, r3, #1
   30c32:	189b      	adds	r3, r3, r2
   30c34:	009b      	lsls	r3, r3, #2
   30c36:	001a      	movs	r2, r3
   30c38:	683b      	ldr	r3, [r7, #0]
   30c3a:	189b      	adds	r3, r3, r2
   30c3c:	6818      	ldr	r0, [r3, #0]
   30c3e:	6859      	ldr	r1, [r3, #4]
   30c40:	689a      	ldr	r2, [r3, #8]
   30c42:	4b09      	ldr	r3, [pc, #36]	; (30c68 <MQTTSerialize_subscribeLength+0x50>)
   30c44:	4798      	blx	r3
   30c46:	0003      	movs	r3, r0
   30c48:	3303      	adds	r3, #3
   30c4a:	68ba      	ldr	r2, [r7, #8]
   30c4c:	18d3      	adds	r3, r2, r3
   30c4e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30c50:	68fb      	ldr	r3, [r7, #12]
   30c52:	3301      	adds	r3, #1
   30c54:	60fb      	str	r3, [r7, #12]
   30c56:	68fa      	ldr	r2, [r7, #12]
   30c58:	687b      	ldr	r3, [r7, #4]
   30c5a:	429a      	cmp	r2, r3
   30c5c:	dbe6      	blt.n	30c2c <MQTTSerialize_subscribeLength+0x14>
	return len;
   30c5e:	68bb      	ldr	r3, [r7, #8]
}
   30c60:	0018      	movs	r0, r3
   30c62:	46bd      	mov	sp, r7
   30c64:	b004      	add	sp, #16
   30c66:	bd80      	pop	{r7, pc}
   30c68:	000308b9 	.word	0x000308b9

00030c6c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30c6c:	b590      	push	{r4, r7, lr}
   30c6e:	b08b      	sub	sp, #44	; 0x2c
   30c70:	af00      	add	r7, sp, #0
   30c72:	60f8      	str	r0, [r7, #12]
   30c74:	60b9      	str	r1, [r7, #8]
   30c76:	0019      	movs	r1, r3
   30c78:	1dfb      	adds	r3, r7, #7
   30c7a:	701a      	strb	r2, [r3, #0]
   30c7c:	1d3b      	adds	r3, r7, #4
   30c7e:	1c0a      	adds	r2, r1, #0
   30c80:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30c82:	68fb      	ldr	r3, [r7, #12]
   30c84:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   30c86:	2300      	movs	r3, #0
   30c88:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30c8a:	2300      	movs	r3, #0
   30c8c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30c8e:	2300      	movs	r3, #0
   30c90:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30c92:	2300      	movs	r3, #0
   30c94:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   30c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30c9a:	0011      	movs	r1, r2
   30c9c:	0018      	movs	r0, r3
   30c9e:	4b41      	ldr	r3, [pc, #260]	; (30da4 <MQTTSerialize_subscribe+0x138>)
   30ca0:	4798      	blx	r3
   30ca2:	0003      	movs	r3, r0
   30ca4:	61fb      	str	r3, [r7, #28]
   30ca6:	69fb      	ldr	r3, [r7, #28]
   30ca8:	0018      	movs	r0, r3
   30caa:	4b3f      	ldr	r3, [pc, #252]	; (30da8 <MQTTSerialize_subscribe+0x13c>)
   30cac:	4798      	blx	r3
   30cae:	0002      	movs	r2, r0
   30cb0:	68bb      	ldr	r3, [r7, #8]
   30cb2:	429a      	cmp	r2, r3
   30cb4:	dd03      	ble.n	30cbe <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30cb6:	2302      	movs	r3, #2
   30cb8:	425b      	negs	r3, r3
   30cba:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30cbc:	e06c      	b.n	30d98 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30cbe:	2314      	movs	r3, #20
   30cc0:	18fb      	adds	r3, r7, r3
   30cc2:	2200      	movs	r2, #0
   30cc4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   30cc6:	2314      	movs	r3, #20
   30cc8:	18fb      	adds	r3, r7, r3
   30cca:	781a      	ldrb	r2, [r3, #0]
   30ccc:	210f      	movs	r1, #15
   30cce:	400a      	ands	r2, r1
   30cd0:	1c11      	adds	r1, r2, #0
   30cd2:	2280      	movs	r2, #128	; 0x80
   30cd4:	4252      	negs	r2, r2
   30cd6:	430a      	orrs	r2, r1
   30cd8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30cda:	1dfb      	adds	r3, r7, #7
   30cdc:	781b      	ldrb	r3, [r3, #0]
   30cde:	2201      	movs	r2, #1
   30ce0:	4013      	ands	r3, r2
   30ce2:	b2da      	uxtb	r2, r3
   30ce4:	2314      	movs	r3, #20
   30ce6:	18fb      	adds	r3, r7, r3
   30ce8:	2101      	movs	r1, #1
   30cea:	400a      	ands	r2, r1
   30cec:	00d0      	lsls	r0, r2, #3
   30cee:	781a      	ldrb	r2, [r3, #0]
   30cf0:	2108      	movs	r1, #8
   30cf2:	438a      	bics	r2, r1
   30cf4:	1c11      	adds	r1, r2, #0
   30cf6:	1c02      	adds	r2, r0, #0
   30cf8:	430a      	orrs	r2, r1
   30cfa:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30cfc:	2314      	movs	r3, #20
   30cfe:	18fb      	adds	r3, r7, r3
   30d00:	781a      	ldrb	r2, [r3, #0]
   30d02:	2106      	movs	r1, #6
   30d04:	438a      	bics	r2, r1
   30d06:	1c11      	adds	r1, r2, #0
   30d08:	2202      	movs	r2, #2
   30d0a:	430a      	orrs	r2, r1
   30d0c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30d0e:	2314      	movs	r3, #20
   30d10:	18fb      	adds	r3, r7, r3
   30d12:	781a      	ldrb	r2, [r3, #0]
   30d14:	2318      	movs	r3, #24
   30d16:	18fb      	adds	r3, r7, r3
   30d18:	0011      	movs	r1, r2
   30d1a:	0018      	movs	r0, r3
   30d1c:	4b23      	ldr	r3, [pc, #140]	; (30dac <MQTTSerialize_subscribe+0x140>)
   30d1e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30d20:	69bb      	ldr	r3, [r7, #24]
   30d22:	69fa      	ldr	r2, [r7, #28]
   30d24:	0011      	movs	r1, r2
   30d26:	0018      	movs	r0, r3
   30d28:	4b21      	ldr	r3, [pc, #132]	; (30db0 <MQTTSerialize_subscribe+0x144>)
   30d2a:	4798      	blx	r3
   30d2c:	0002      	movs	r2, r0
   30d2e:	69bb      	ldr	r3, [r7, #24]
   30d30:	189b      	adds	r3, r3, r2
   30d32:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   30d34:	1d3b      	adds	r3, r7, #4
   30d36:	881a      	ldrh	r2, [r3, #0]
   30d38:	2318      	movs	r3, #24
   30d3a:	18fb      	adds	r3, r7, r3
   30d3c:	0011      	movs	r1, r2
   30d3e:	0018      	movs	r0, r3
   30d40:	4b1c      	ldr	r3, [pc, #112]	; (30db4 <MQTTSerialize_subscribe+0x148>)
   30d42:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   30d44:	2300      	movs	r3, #0
   30d46:	623b      	str	r3, [r7, #32]
   30d48:	e01d      	b.n	30d86 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30d4a:	6a3a      	ldr	r2, [r7, #32]
   30d4c:	0013      	movs	r3, r2
   30d4e:	005b      	lsls	r3, r3, #1
   30d50:	189b      	adds	r3, r3, r2
   30d52:	009b      	lsls	r3, r3, #2
   30d54:	001a      	movs	r2, r3
   30d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30d58:	189b      	adds	r3, r3, r2
   30d5a:	2218      	movs	r2, #24
   30d5c:	18b8      	adds	r0, r7, r2
   30d5e:	6819      	ldr	r1, [r3, #0]
   30d60:	685a      	ldr	r2, [r3, #4]
   30d62:	689b      	ldr	r3, [r3, #8]
   30d64:	4c14      	ldr	r4, [pc, #80]	; (30db8 <MQTTSerialize_subscribe+0x14c>)
   30d66:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30d68:	6a3b      	ldr	r3, [r7, #32]
   30d6a:	009b      	lsls	r3, r3, #2
   30d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30d6e:	18d3      	adds	r3, r2, r3
   30d70:	681b      	ldr	r3, [r3, #0]
   30d72:	b2da      	uxtb	r2, r3
   30d74:	2318      	movs	r3, #24
   30d76:	18fb      	adds	r3, r7, r3
   30d78:	0011      	movs	r1, r2
   30d7a:	0018      	movs	r0, r3
   30d7c:	4b0b      	ldr	r3, [pc, #44]	; (30dac <MQTTSerialize_subscribe+0x140>)
   30d7e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30d80:	6a3b      	ldr	r3, [r7, #32]
   30d82:	3301      	adds	r3, #1
   30d84:	623b      	str	r3, [r7, #32]
   30d86:	6a3a      	ldr	r2, [r7, #32]
   30d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30d8a:	429a      	cmp	r2, r3
   30d8c:	dbdd      	blt.n	30d4a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30d8e:	69bb      	ldr	r3, [r7, #24]
   30d90:	001a      	movs	r2, r3
   30d92:	68fb      	ldr	r3, [r7, #12]
   30d94:	1ad3      	subs	r3, r2, r3
   30d96:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30d9a:	0018      	movs	r0, r3
   30d9c:	46bd      	mov	sp, r7
   30d9e:	b00b      	add	sp, #44	; 0x2c
   30da0:	bd90      	pop	{r4, r7, pc}
   30da2:	46c0      	nop			; (mov r8, r8)
   30da4:	00030c19 	.word	0x00030c19
   30da8:	000305dd 	.word	0x000305dd
   30dac:	000306ff 	.word	0x000306ff
   30db0:	000304e5 	.word	0x000304e5
   30db4:	00030729 	.word	0x00030729
   30db8:	000307d1 	.word	0x000307d1

00030dbc <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30dbc:	b590      	push	{r4, r7, lr}
   30dbe:	b08b      	sub	sp, #44	; 0x2c
   30dc0:	af00      	add	r7, sp, #0
   30dc2:	60f8      	str	r0, [r7, #12]
   30dc4:	60b9      	str	r1, [r7, #8]
   30dc6:	607a      	str	r2, [r7, #4]
   30dc8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30dca:	2300      	movs	r3, #0
   30dcc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30dd0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30dd2:	2300      	movs	r3, #0
   30dd4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30dd6:	2300      	movs	r3, #0
   30dd8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30dda:	2318      	movs	r3, #24
   30ddc:	18fb      	adds	r3, r7, r3
   30dde:	0018      	movs	r0, r3
   30de0:	4b2c      	ldr	r3, [pc, #176]	; (30e94 <MQTTDeserialize_suback+0xd8>)
   30de2:	4798      	blx	r3
   30de4:	0003      	movs	r3, r0
   30de6:	001a      	movs	r2, r3
   30de8:	231c      	movs	r3, #28
   30dea:	18fb      	adds	r3, r7, r3
   30dec:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   30dee:	231c      	movs	r3, #28
   30df0:	18fb      	adds	r3, r7, r3
   30df2:	781b      	ldrb	r3, [r3, #0]
   30df4:	220f      	movs	r2, #15
   30df6:	4393      	bics	r3, r2
   30df8:	b2db      	uxtb	r3, r3
   30dfa:	2b90      	cmp	r3, #144	; 0x90
   30dfc:	d142      	bne.n	30e84 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30dfe:	69bb      	ldr	r3, [r7, #24]
   30e00:	2214      	movs	r2, #20
   30e02:	18ba      	adds	r2, r7, r2
   30e04:	0011      	movs	r1, r2
   30e06:	0018      	movs	r0, r3
   30e08:	4b23      	ldr	r3, [pc, #140]	; (30e98 <MQTTDeserialize_suback+0xdc>)
   30e0a:	4798      	blx	r3
   30e0c:	0003      	movs	r3, r0
   30e0e:	627b      	str	r3, [r7, #36]	; 0x24
   30e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30e12:	69bb      	ldr	r3, [r7, #24]
   30e14:	189b      	adds	r3, r3, r2
   30e16:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30e18:	69bb      	ldr	r3, [r7, #24]
   30e1a:	697a      	ldr	r2, [r7, #20]
   30e1c:	189b      	adds	r3, r3, r2
   30e1e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30e20:	6a3b      	ldr	r3, [r7, #32]
   30e22:	69ba      	ldr	r2, [r7, #24]
   30e24:	1a9b      	subs	r3, r3, r2
   30e26:	2b01      	cmp	r3, #1
   30e28:	dd2e      	ble.n	30e88 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30e2a:	2318      	movs	r3, #24
   30e2c:	18fb      	adds	r3, r7, r3
   30e2e:	0018      	movs	r0, r3
   30e30:	4b1a      	ldr	r3, [pc, #104]	; (30e9c <MQTTDeserialize_suback+0xe0>)
   30e32:	4798      	blx	r3
   30e34:	0003      	movs	r3, r0
   30e36:	b29a      	uxth	r2, r3
   30e38:	68fb      	ldr	r3, [r7, #12]
   30e3a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30e3c:	687b      	ldr	r3, [r7, #4]
   30e3e:	2200      	movs	r2, #0
   30e40:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   30e42:	e018      	b.n	30e76 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   30e44:	687b      	ldr	r3, [r7, #4]
   30e46:	681a      	ldr	r2, [r3, #0]
   30e48:	68bb      	ldr	r3, [r7, #8]
   30e4a:	429a      	cmp	r2, r3
   30e4c:	dd03      	ble.n	30e56 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30e4e:	2301      	movs	r3, #1
   30e50:	425b      	negs	r3, r3
   30e52:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30e54:	e019      	b.n	30e8a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   30e56:	687b      	ldr	r3, [r7, #4]
   30e58:	681a      	ldr	r2, [r3, #0]
   30e5a:	1c51      	adds	r1, r2, #1
   30e5c:	687b      	ldr	r3, [r7, #4]
   30e5e:	6019      	str	r1, [r3, #0]
   30e60:	0013      	movs	r3, r2
   30e62:	009b      	lsls	r3, r3, #2
   30e64:	683a      	ldr	r2, [r7, #0]
   30e66:	18d4      	adds	r4, r2, r3
   30e68:	2318      	movs	r3, #24
   30e6a:	18fb      	adds	r3, r7, r3
   30e6c:	0018      	movs	r0, r3
   30e6e:	4b09      	ldr	r3, [pc, #36]	; (30e94 <MQTTDeserialize_suback+0xd8>)
   30e70:	4798      	blx	r3
   30e72:	0003      	movs	r3, r0
   30e74:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   30e76:	69ba      	ldr	r2, [r7, #24]
   30e78:	6a3b      	ldr	r3, [r7, #32]
   30e7a:	429a      	cmp	r2, r3
   30e7c:	d3e2      	bcc.n	30e44 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30e7e:	2301      	movs	r3, #1
   30e80:	627b      	str	r3, [r7, #36]	; 0x24
   30e82:	e002      	b.n	30e8a <MQTTDeserialize_suback+0xce>
		goto exit;
   30e84:	46c0      	nop			; (mov r8, r8)
   30e86:	e000      	b.n	30e8a <MQTTDeserialize_suback+0xce>
		goto exit;
   30e88:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30e8c:	0018      	movs	r0, r3
   30e8e:	46bd      	mov	sp, r7
   30e90:	b00b      	add	sp, #44	; 0x2c
   30e92:	bd90      	pop	{r4, r7, pc}
   30e94:	000306d3 	.word	0x000306d3
   30e98:	0003066d 	.word	0x0003066d
   30e9c:	000306a1 	.word	0x000306a1

00030ea0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30ea0:	b580      	push	{r7, lr}
   30ea2:	b082      	sub	sp, #8
   30ea4:	af00      	add	r7, sp, #0
   30ea6:	6078      	str	r0, [r7, #4]
	config->port = 80;
   30ea8:	687b      	ldr	r3, [r7, #4]
   30eaa:	2250      	movs	r2, #80	; 0x50
   30eac:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30eae:	687b      	ldr	r3, [r7, #4]
   30eb0:	2200      	movs	r2, #0
   30eb2:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   30eb4:	687b      	ldr	r3, [r7, #4]
   30eb6:	4a0b      	ldr	r2, [pc, #44]	; (30ee4 <http_client_get_config_defaults+0x44>)
   30eb8:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   30eba:	687b      	ldr	r3, [r7, #4]
   30ebc:	2200      	movs	r2, #0
   30ebe:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   30ec0:	687b      	ldr	r3, [r7, #4]
   30ec2:	2200      	movs	r2, #0
   30ec4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   30ec6:	687b      	ldr	r3, [r7, #4]
   30ec8:	2280      	movs	r2, #128	; 0x80
   30eca:	0052      	lsls	r2, r2, #1
   30ecc:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   30ece:	687b      	ldr	r3, [r7, #4]
   30ed0:	2252      	movs	r2, #82	; 0x52
   30ed2:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   30ed4:	687b      	ldr	r3, [r7, #4]
   30ed6:	4a04      	ldr	r2, [pc, #16]	; (30ee8 <http_client_get_config_defaults+0x48>)
   30ed8:	619a      	str	r2, [r3, #24]
}
   30eda:	46c0      	nop			; (mov r8, r8)
   30edc:	46bd      	mov	sp, r7
   30ede:	b002      	add	sp, #8
   30ee0:	bd80      	pop	{r7, pc}
   30ee2:	46c0      	nop			; (mov r8, r8)
   30ee4:	00004e20 	.word	0x00004e20
   30ee8:	0003a224 	.word	0x0003a224

00030eec <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   30eec:	b590      	push	{r4, r7, lr}
   30eee:	b083      	sub	sp, #12
   30ef0:	af00      	add	r7, sp, #0
   30ef2:	6078      	str	r0, [r7, #4]
   30ef4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   30ef6:	687b      	ldr	r3, [r7, #4]
   30ef8:	2b00      	cmp	r3, #0
   30efa:	d002      	beq.n	30f02 <http_client_init+0x16>
   30efc:	683b      	ldr	r3, [r7, #0]
   30efe:	2b00      	cmp	r3, #0
   30f00:	d102      	bne.n	30f08 <http_client_init+0x1c>
		return -EINVAL;
   30f02:	2316      	movs	r3, #22
   30f04:	425b      	negs	r3, r3
   30f06:	e058      	b.n	30fba <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   30f08:	683b      	ldr	r3, [r7, #0]
   30f0a:	691b      	ldr	r3, [r3, #16]
   30f0c:	2b00      	cmp	r3, #0
   30f0e:	d102      	bne.n	30f16 <http_client_init+0x2a>
		return -EINVAL;
   30f10:	2316      	movs	r3, #22
   30f12:	425b      	negs	r3, r3
   30f14:	e051      	b.n	30fba <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   30f16:	683b      	ldr	r3, [r7, #0]
   30f18:	685b      	ldr	r3, [r3, #4]
   30f1a:	2b00      	cmp	r3, #0
   30f1c:	d102      	bne.n	30f24 <http_client_init+0x38>
		return -EINVAL;
   30f1e:	2316      	movs	r3, #22
   30f20:	425b      	negs	r3, r3
   30f22:	e04a      	b.n	30fba <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   30f24:	683b      	ldr	r3, [r7, #0]
   30f26:	695b      	ldr	r3, [r3, #20]
   30f28:	2b51      	cmp	r3, #81	; 0x51
   30f2a:	d802      	bhi.n	30f32 <http_client_init+0x46>
		return -EINVAL;
   30f2c:	2316      	movs	r3, #22
   30f2e:	425b      	negs	r3, r3
   30f30:	e043      	b.n	30fba <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   30f32:	687b      	ldr	r3, [r7, #4]
   30f34:	22e8      	movs	r2, #232	; 0xe8
   30f36:	2100      	movs	r1, #0
   30f38:	0018      	movs	r0, r3
   30f3a:	4b22      	ldr	r3, [pc, #136]	; (30fc4 <http_client_init+0xd8>)
   30f3c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30f3e:	687b      	ldr	r3, [r7, #4]
   30f40:	3350      	adds	r3, #80	; 0x50
   30f42:	6839      	ldr	r1, [r7, #0]
   30f44:	221c      	movs	r2, #28
   30f46:	0018      	movs	r0, r3
   30f48:	4b1f      	ldr	r3, [pc, #124]	; (30fc8 <http_client_init+0xdc>)
   30f4a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30f4c:	687b      	ldr	r3, [r7, #4]
   30f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30f50:	2b00      	cmp	r3, #0
   30f52:	d115      	bne.n	30f80 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   30f54:	683b      	ldr	r3, [r7, #0]
   30f56:	691b      	ldr	r3, [r3, #16]
   30f58:	0018      	movs	r0, r3
   30f5a:	4b1c      	ldr	r3, [pc, #112]	; (30fcc <http_client_init+0xe0>)
   30f5c:	4798      	blx	r3
   30f5e:	0003      	movs	r3, r0
   30f60:	001a      	movs	r2, r3
   30f62:	687b      	ldr	r3, [r7, #4]
   30f64:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   30f66:	687b      	ldr	r3, [r7, #4]
   30f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30f6a:	2b00      	cmp	r3, #0
   30f6c:	d102      	bne.n	30f74 <http_client_init+0x88>
			return -ENOMEM;
   30f6e:	230c      	movs	r3, #12
   30f70:	425b      	negs	r3, r3
   30f72:	e022      	b.n	30fba <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   30f74:	687b      	ldr	r3, [r7, #4]
   30f76:	2241      	movs	r2, #65	; 0x41
   30f78:	5c99      	ldrb	r1, [r3, r2]
   30f7a:	2004      	movs	r0, #4
   30f7c:	4301      	orrs	r1, r0
   30f7e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30f80:	683b      	ldr	r3, [r7, #0]
   30f82:	891b      	ldrh	r3, [r3, #8]
   30f84:	2b00      	cmp	r3, #0
   30f86:	d010      	beq.n	30faa <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   30f88:	683b      	ldr	r3, [r7, #0]
   30f8a:	6858      	ldr	r0, [r3, #4]
   30f8c:	687a      	ldr	r2, [r7, #4]
   30f8e:	4910      	ldr	r1, [pc, #64]	; (30fd0 <http_client_init+0xe4>)
   30f90:	2300      	movs	r3, #0
   30f92:	4c10      	ldr	r4, [pc, #64]	; (30fd4 <http_client_init+0xe8>)
   30f94:	47a0      	blx	r4
   30f96:	0002      	movs	r2, r0
   30f98:	687b      	ldr	r3, [r7, #4]
   30f9a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30f9c:	687b      	ldr	r3, [r7, #4]
   30f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30fa0:	2b00      	cmp	r3, #0
   30fa2:	da02      	bge.n	30faa <http_client_init+0xbe>
			return -ENOSPC;
   30fa4:	231c      	movs	r3, #28
   30fa6:	425b      	negs	r3, r3
   30fa8:	e007      	b.n	30fba <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   30faa:	687b      	ldr	r3, [r7, #4]
   30fac:	2200      	movs	r2, #0
   30fae:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30fb0:	687b      	ldr	r3, [r7, #4]
   30fb2:	22d8      	movs	r2, #216	; 0xd8
   30fb4:	2100      	movs	r1, #0
   30fb6:	5099      	str	r1, [r3, r2]

	return 0;
   30fb8:	2300      	movs	r3, #0
}
   30fba:	0018      	movs	r0, r3
   30fbc:	46bd      	mov	sp, r7
   30fbe:	b003      	add	sp, #12
   30fc0:	bd90      	pop	{r4, r7, pc}
   30fc2:	46c0      	nop			; (mov r8, r8)
   30fc4:	00034e13 	.word	0x00034e13
   30fc8:	00034ddd 	.word	0x00034ddd
   30fcc:	00034db5 	.word	0x00034db5
   30fd0:	0003129d 	.word	0x0003129d
   30fd4:	00032941 	.word	0x00032941

00030fd8 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   30fd8:	b580      	push	{r7, lr}
   30fda:	b082      	sub	sp, #8
   30fdc:	af00      	add	r7, sp, #0
   30fde:	6078      	str	r0, [r7, #4]
   30fe0:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   30fe2:	687b      	ldr	r3, [r7, #4]
   30fe4:	2b00      	cmp	r3, #0
   30fe6:	d102      	bne.n	30fee <http_client_register_callback+0x16>
		return -EINVAL;
   30fe8:	2316      	movs	r3, #22
   30fea:	425b      	negs	r3, r3
   30fec:	e003      	b.n	30ff6 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   30fee:	687b      	ldr	r3, [r7, #4]
   30ff0:	683a      	ldr	r2, [r7, #0]
   30ff2:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   30ff4:	2300      	movs	r3, #0
}
   30ff6:	0018      	movs	r0, r3
   30ff8:	46bd      	mov	sp, r7
   30ffa:	b002      	add	sp, #8
   30ffc:	bd80      	pop	{r7, pc}
	...

00031000 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31000:	b580      	push	{r7, lr}
   31002:	b082      	sub	sp, #8
   31004:	af00      	add	r7, sp, #0
   31006:	6078      	str	r0, [r7, #4]
	switch (err) {
   31008:	687b      	ldr	r3, [r7, #4]
   3100a:	330e      	adds	r3, #14
   3100c:	2b0e      	cmp	r3, #14
   3100e:	d825      	bhi.n	3105c <_hwerr_to_stderr+0x5c>
   31010:	009a      	lsls	r2, r3, #2
   31012:	4b18      	ldr	r3, [pc, #96]	; (31074 <_hwerr_to_stderr+0x74>)
   31014:	18d3      	adds	r3, r2, r3
   31016:	681b      	ldr	r3, [r3, #0]
   31018:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   3101a:	2305      	movs	r3, #5
   3101c:	425b      	negs	r3, r3
   3101e:	e024      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31020:	2302      	movs	r3, #2
   31022:	425b      	negs	r3, r3
   31024:	e021      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   31026:	2370      	movs	r3, #112	; 0x70
   31028:	425b      	negs	r3, r3
   3102a:	e01e      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   3102c:	230c      	movs	r3, #12
   3102e:	425b      	negs	r3, r3
   31030:	e01b      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   31032:	2316      	movs	r3, #22
   31034:	425b      	negs	r3, r3
   31036:	e018      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31038:	230c      	movs	r3, #12
   3103a:	425b      	negs	r3, r3
   3103c:	e015      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   3103e:	2305      	movs	r3, #5
   31040:	425b      	negs	r3, r3
   31042:	e012      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   31044:	2379      	movs	r3, #121	; 0x79
   31046:	425b      	negs	r3, r3
   31048:	e00f      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3104a:	2368      	movs	r3, #104	; 0x68
   3104c:	425b      	negs	r3, r3
   3104e:	e00c      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31050:	230b      	movs	r3, #11
   31052:	425b      	negs	r3, r3
   31054:	e009      	b.n	3106a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   31056:	2310      	movs	r3, #16
   31058:	425b      	negs	r3, r3
   3105a:	e006      	b.n	3106a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   3105c:	687b      	ldr	r3, [r7, #4]
   3105e:	2b00      	cmp	r3, #0
   31060:	da02      	bge.n	31068 <_hwerr_to_stderr+0x68>
				return -EIO;
   31062:	2305      	movs	r3, #5
   31064:	425b      	negs	r3, r3
   31066:	e000      	b.n	3106a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31068:	2300      	movs	r3, #0
	}
}
   3106a:	0018      	movs	r0, r3
   3106c:	46bd      	mov	sp, r7
   3106e:	b002      	add	sp, #8
   31070:	bd80      	pop	{r7, pc}
   31072:	46c0      	nop			; (mov r8, r8)
   31074:	0003a360 	.word	0x0003a360

00031078 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31078:	b580      	push	{r7, lr}
   3107a:	b08a      	sub	sp, #40	; 0x28
   3107c:	af00      	add	r7, sp, #0
   3107e:	603a      	str	r2, [r7, #0]
   31080:	1dfb      	adds	r3, r7, #7
   31082:	1c02      	adds	r2, r0, #0
   31084:	701a      	strb	r2, [r3, #0]
   31086:	1dbb      	adds	r3, r7, #6
   31088:	1c0a      	adds	r2, r1, #0
   3108a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   3108c:	1dfb      	adds	r3, r7, #7
   3108e:	2200      	movs	r2, #0
   31090:	569a      	ldrsb	r2, [r3, r2]
   31092:	4b4b      	ldr	r3, [pc, #300]	; (311c0 <http_client_socket_event_handler+0x148>)
   31094:	0092      	lsls	r2, r2, #2
   31096:	58d3      	ldr	r3, [r2, r3]
   31098:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   3109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3109c:	2b00      	cmp	r3, #0
   3109e:	d100      	bne.n	310a2 <http_client_socket_event_handler+0x2a>
   310a0:	e08a      	b.n	311b8 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   310a2:	1dbb      	adds	r3, r7, #6
   310a4:	781b      	ldrb	r3, [r3, #0]
   310a6:	2b06      	cmp	r3, #6
   310a8:	d040      	beq.n	3112c <http_client_socket_event_handler+0xb4>
   310aa:	2b07      	cmp	r3, #7
   310ac:	d060      	beq.n	31170 <http_client_socket_event_handler+0xf8>
   310ae:	2b05      	cmp	r3, #5
   310b0:	d000      	beq.n	310b4 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   310b2:	e082      	b.n	311ba <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   310b4:	683b      	ldr	r3, [r7, #0]
   310b6:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   310b8:	6a3b      	ldr	r3, [r7, #32]
   310ba:	785b      	ldrb	r3, [r3, #1]
   310bc:	b25b      	sxtb	r3, r3
   310be:	001a      	movs	r2, r3
   310c0:	230c      	movs	r3, #12
   310c2:	18fb      	adds	r3, r7, r3
   310c4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   310c6:	6a3b      	ldr	r3, [r7, #32]
   310c8:	785b      	ldrb	r3, [r3, #1]
   310ca:	b25b      	sxtb	r3, r3
   310cc:	2b00      	cmp	r3, #0
   310ce:	da0c      	bge.n	310ea <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   310d0:	6a3b      	ldr	r3, [r7, #32]
   310d2:	785b      	ldrb	r3, [r3, #1]
   310d4:	b25b      	sxtb	r3, r3
   310d6:	0018      	movs	r0, r3
   310d8:	4b3a      	ldr	r3, [pc, #232]	; (311c4 <http_client_socket_event_handler+0x14c>)
   310da:	4798      	blx	r3
   310dc:	0002      	movs	r2, r0
   310de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   310e0:	0011      	movs	r1, r2
   310e2:	0018      	movs	r0, r3
   310e4:	4b38      	ldr	r3, [pc, #224]	; (311c8 <http_client_socket_event_handler+0x150>)
   310e6:	4798      	blx	r3
    	break;
   310e8:	e067      	b.n	311ba <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   310ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   310ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310ee:	2b00      	cmp	r3, #0
   310f0:	d006      	beq.n	31100 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   310f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   310f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310f6:	220c      	movs	r2, #12
   310f8:	18ba      	adds	r2, r7, r2
   310fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   310fc:	2100      	movs	r1, #0
   310fe:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31102:	2203      	movs	r2, #3
   31104:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31108:	6d58      	ldr	r0, [r3, #84]	; 0x54
   3110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3110c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   3110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31110:	2258      	movs	r2, #88	; 0x58
   31112:	5a9b      	ldrh	r3, [r3, r2]
   31114:	001a      	movs	r2, r3
   31116:	4b2d      	ldr	r3, [pc, #180]	; (311cc <http_client_socket_event_handler+0x154>)
   31118:	4798      	blx	r3
    		_http_client_recv_packet(module);
   3111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3111c:	0018      	movs	r0, r3
   3111e:	4b2c      	ldr	r3, [pc, #176]	; (311d0 <http_client_socket_event_handler+0x158>)
   31120:	4798      	blx	r3
			_http_client_request(module);
   31122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31124:	0018      	movs	r0, r3
   31126:	4b2b      	ldr	r3, [pc, #172]	; (311d4 <http_client_socket_event_handler+0x15c>)
   31128:	4798      	blx	r3
    	break;
   3112a:	e046      	b.n	311ba <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   3112c:	683b      	ldr	r3, [r7, #0]
   3112e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31130:	69fb      	ldr	r3, [r7, #28]
   31132:	2204      	movs	r2, #4
   31134:	5e9b      	ldrsh	r3, [r3, r2]
   31136:	2b00      	cmp	r3, #0
   31138:	dd09      	ble.n	3114e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   3113a:	69fb      	ldr	r3, [r7, #28]
   3113c:	2204      	movs	r2, #4
   3113e:	5e9b      	ldrsh	r3, [r3, r2]
   31140:	001a      	movs	r2, r3
   31142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31144:	0011      	movs	r1, r2
   31146:	0018      	movs	r0, r3
   31148:	4b23      	ldr	r3, [pc, #140]	; (311d8 <http_client_socket_event_handler+0x160>)
   3114a:	4798      	blx	r3
   3114c:	e00b      	b.n	31166 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   3114e:	69fb      	ldr	r3, [r7, #28]
   31150:	2204      	movs	r2, #4
   31152:	5e9b      	ldrsh	r3, [r3, r2]
   31154:	0018      	movs	r0, r3
   31156:	4b1b      	ldr	r3, [pc, #108]	; (311c4 <http_client_socket_event_handler+0x14c>)
   31158:	4798      	blx	r3
   3115a:	0002      	movs	r2, r0
   3115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3115e:	0011      	movs	r1, r2
   31160:	0018      	movs	r0, r3
   31162:	4b19      	ldr	r3, [pc, #100]	; (311c8 <http_client_socket_event_handler+0x150>)
   31164:	4798      	blx	r3
		_http_client_recv_packet(module);
   31166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31168:	0018      	movs	r0, r3
   3116a:	4b19      	ldr	r3, [pc, #100]	; (311d0 <http_client_socket_event_handler+0x158>)
   3116c:	4798      	blx	r3
		break;
   3116e:	e024      	b.n	311ba <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31170:	231a      	movs	r3, #26
   31172:	18fb      	adds	r3, r7, r3
   31174:	683a      	ldr	r2, [r7, #0]
   31176:	8812      	ldrh	r2, [r2, #0]
   31178:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   3117a:	231a      	movs	r3, #26
   3117c:	18fb      	adds	r3, r7, r3
   3117e:	2200      	movs	r2, #0
   31180:	5e9b      	ldrsh	r3, [r3, r2]
   31182:	2b00      	cmp	r3, #0
   31184:	da0d      	bge.n	311a2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31186:	231a      	movs	r3, #26
   31188:	18fb      	adds	r3, r7, r3
   3118a:	2200      	movs	r2, #0
   3118c:	5e9b      	ldrsh	r3, [r3, r2]
   3118e:	0018      	movs	r0, r3
   31190:	4b0c      	ldr	r3, [pc, #48]	; (311c4 <http_client_socket_event_handler+0x14c>)
   31192:	4798      	blx	r3
   31194:	0002      	movs	r2, r0
   31196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31198:	0011      	movs	r1, r2
   3119a:	0018      	movs	r0, r3
   3119c:	4b0a      	ldr	r3, [pc, #40]	; (311c8 <http_client_socket_event_handler+0x150>)
   3119e:	4798      	blx	r3
   311a0:	e003      	b.n	311aa <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   311a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311a4:	0018      	movs	r0, r3
   311a6:	4b0b      	ldr	r3, [pc, #44]	; (311d4 <http_client_socket_event_handler+0x15c>)
   311a8:	4798      	blx	r3
		module->sending = 0;
   311aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311ac:	2241      	movs	r2, #65	; 0x41
   311ae:	5c99      	ldrb	r1, [r3, r2]
   311b0:	2001      	movs	r0, #1
   311b2:	4381      	bics	r1, r0
   311b4:	5499      	strb	r1, [r3, r2]
    	break;
   311b6:	e000      	b.n	311ba <http_client_socket_event_handler+0x142>
		return;
   311b8:	46c0      	nop			; (mov r8, r8)
	}

}
   311ba:	46bd      	mov	sp, r7
   311bc:	b00a      	add	sp, #40	; 0x28
   311be:	bd80      	pop	{r7, pc}
   311c0:	200046f0 	.word	0x200046f0
   311c4:	00031001 	.word	0x00031001
   311c8:	00031675 	.word	0x00031675
   311cc:	000329d1 	.word	0x000329d1
   311d0:	00031f01 	.word	0x00031f01
   311d4:	000317c9 	.word	0x000317c9
   311d8:	00031f65 	.word	0x00031f65

000311dc <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   311dc:	b580      	push	{r7, lr}
   311de:	b088      	sub	sp, #32
   311e0:	af00      	add	r7, sp, #0
   311e2:	6078      	str	r0, [r7, #4]
   311e4:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   311e6:	2300      	movs	r3, #0
   311e8:	61fb      	str	r3, [r7, #28]
   311ea:	e048      	b.n	3127e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   311ec:	4b27      	ldr	r3, [pc, #156]	; (3128c <http_client_socket_resolve_handler+0xb0>)
   311ee:	69fa      	ldr	r2, [r7, #28]
   311f0:	0092      	lsls	r2, r2, #2
   311f2:	58d3      	ldr	r3, [r2, r3]
   311f4:	2b00      	cmp	r3, #0
   311f6:	d03f      	beq.n	31278 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   311f8:	4b24      	ldr	r3, [pc, #144]	; (3128c <http_client_socket_resolve_handler+0xb0>)
   311fa:	69fa      	ldr	r2, [r7, #28]
   311fc:	0092      	lsls	r2, r2, #2
   311fe:	58d3      	ldr	r3, [r2, r3]
   31200:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31202:	69bb      	ldr	r3, [r7, #24]
   31204:	1c5a      	adds	r2, r3, #1
   31206:	687b      	ldr	r3, [r7, #4]
   31208:	0011      	movs	r1, r2
   3120a:	0018      	movs	r0, r3
   3120c:	4b20      	ldr	r3, [pc, #128]	; (31290 <http_client_socket_resolve_handler+0xb4>)
   3120e:	4798      	blx	r3
   31210:	1e03      	subs	r3, r0, #0
   31212:	d131      	bne.n	31278 <http_client_socket_resolve_handler+0x9c>
   31214:	69bb      	ldr	r3, [r7, #24]
   31216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31218:	2b01      	cmp	r3, #1
   3121a:	d12d      	bne.n	31278 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   3121c:	683b      	ldr	r3, [r7, #0]
   3121e:	2b00      	cmp	r3, #0
   31220:	d107      	bne.n	31232 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31222:	2376      	movs	r3, #118	; 0x76
   31224:	425a      	negs	r2, r3
   31226:	69bb      	ldr	r3, [r7, #24]
   31228:	0011      	movs	r1, r2
   3122a:	0018      	movs	r0, r3
   3122c:	4b19      	ldr	r3, [pc, #100]	; (31294 <http_client_socket_resolve_handler+0xb8>)
   3122e:	4798      	blx	r3
					return;
   31230:	e028      	b.n	31284 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31232:	2308      	movs	r3, #8
   31234:	18fb      	adds	r3, r7, r3
   31236:	2202      	movs	r2, #2
   31238:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3123a:	69bb      	ldr	r3, [r7, #24]
   3123c:	2250      	movs	r2, #80	; 0x50
   3123e:	5a9b      	ldrh	r3, [r3, r2]
   31240:	021b      	lsls	r3, r3, #8
   31242:	b21a      	sxth	r2, r3
   31244:	69bb      	ldr	r3, [r7, #24]
   31246:	2150      	movs	r1, #80	; 0x50
   31248:	5a5b      	ldrh	r3, [r3, r1]
   3124a:	0a1b      	lsrs	r3, r3, #8
   3124c:	b29b      	uxth	r3, r3
   3124e:	b21b      	sxth	r3, r3
   31250:	4313      	orrs	r3, r2
   31252:	b21b      	sxth	r3, r3
   31254:	b29a      	uxth	r2, r3
   31256:	2308      	movs	r3, #8
   31258:	18fb      	adds	r3, r7, r3
   3125a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   3125c:	2308      	movs	r3, #8
   3125e:	18fb      	adds	r3, r7, r3
   31260:	683a      	ldr	r2, [r7, #0]
   31262:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31264:	69bb      	ldr	r3, [r7, #24]
   31266:	781b      	ldrb	r3, [r3, #0]
   31268:	b25b      	sxtb	r3, r3
   3126a:	2208      	movs	r2, #8
   3126c:	18b9      	adds	r1, r7, r2
   3126e:	2210      	movs	r2, #16
   31270:	0018      	movs	r0, r3
   31272:	4b09      	ldr	r3, [pc, #36]	; (31298 <http_client_socket_resolve_handler+0xbc>)
   31274:	4798      	blx	r3
				return;
   31276:	e005      	b.n	31284 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31278:	69fb      	ldr	r3, [r7, #28]
   3127a:	3301      	adds	r3, #1
   3127c:	61fb      	str	r3, [r7, #28]
   3127e:	69fb      	ldr	r3, [r7, #28]
   31280:	2b06      	cmp	r3, #6
   31282:	ddb3      	ble.n	311ec <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31284:	46bd      	mov	sp, r7
   31286:	b008      	add	sp, #32
   31288:	bd80      	pop	{r7, pc}
   3128a:	46c0      	nop			; (mov r8, r8)
   3128c:	200046f0 	.word	0x200046f0
   31290:	0003516b 	.word	0x0003516b
   31294:	00031675 	.word	0x00031675
   31298:	00025b99 	.word	0x00025b99

0003129c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   3129c:	b580      	push	{r7, lr}
   3129e:	b086      	sub	sp, #24
   312a0:	af00      	add	r7, sp, #0
   312a2:	60f8      	str	r0, [r7, #12]
   312a4:	60b9      	str	r1, [r7, #8]
   312a6:	607a      	str	r2, [r7, #4]
   312a8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   312aa:	687b      	ldr	r3, [r7, #4]
   312ac:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   312ae:	697b      	ldr	r3, [r7, #20]
   312b0:	2b00      	cmp	r3, #0
   312b2:	d007      	beq.n	312c4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   312b4:	233e      	movs	r3, #62	; 0x3e
   312b6:	425a      	negs	r2, r3
   312b8:	697b      	ldr	r3, [r7, #20]
   312ba:	0011      	movs	r1, r2
   312bc:	0018      	movs	r0, r3
   312be:	4b03      	ldr	r3, [pc, #12]	; (312cc <http_client_timer_callback+0x30>)
   312c0:	4798      	blx	r3
   312c2:	e000      	b.n	312c6 <http_client_timer_callback+0x2a>
		return;
   312c4:	46c0      	nop			; (mov r8, r8)
}
   312c6:	46bd      	mov	sp, r7
   312c8:	b006      	add	sp, #24
   312ca:	bd80      	pop	{r7, pc}
   312cc:	00031675 	.word	0x00031675

000312d0 <_is_ip>:

static int _is_ip(const char *host)
{
   312d0:	b580      	push	{r7, lr}
   312d2:	b084      	sub	sp, #16
   312d4:	af00      	add	r7, sp, #0
   312d6:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   312d8:	2300      	movs	r3, #0
   312da:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   312dc:	e03a      	b.n	31354 <_is_ip+0x84>
		ch = *host++;
   312de:	687b      	ldr	r3, [r7, #4]
   312e0:	1c5a      	adds	r2, r3, #1
   312e2:	607a      	str	r2, [r7, #4]
   312e4:	220b      	movs	r2, #11
   312e6:	18ba      	adds	r2, r7, r2
   312e8:	781b      	ldrb	r3, [r3, #0]
   312ea:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   312ec:	230b      	movs	r3, #11
   312ee:	18fb      	adds	r3, r7, r3
   312f0:	781b      	ldrb	r3, [r3, #0]
   312f2:	2b60      	cmp	r3, #96	; 0x60
   312f4:	d904      	bls.n	31300 <_is_ip+0x30>
   312f6:	230b      	movs	r3, #11
   312f8:	18fb      	adds	r3, r7, r3
   312fa:	781b      	ldrb	r3, [r3, #0]
   312fc:	2b66      	cmp	r3, #102	; 0x66
   312fe:	d913      	bls.n	31328 <_is_ip+0x58>
   31300:	230b      	movs	r3, #11
   31302:	18fb      	adds	r3, r7, r3
   31304:	781b      	ldrb	r3, [r3, #0]
   31306:	2b40      	cmp	r3, #64	; 0x40
   31308:	d904      	bls.n	31314 <_is_ip+0x44>
   3130a:	230b      	movs	r3, #11
   3130c:	18fb      	adds	r3, r7, r3
   3130e:	781b      	ldrb	r3, [r3, #0]
   31310:	2b46      	cmp	r3, #70	; 0x46
   31312:	d909      	bls.n	31328 <_is_ip+0x58>
   31314:	230b      	movs	r3, #11
   31316:	18fb      	adds	r3, r7, r3
   31318:	781b      	ldrb	r3, [r3, #0]
   3131a:	2b3a      	cmp	r3, #58	; 0x3a
   3131c:	d004      	beq.n	31328 <_is_ip+0x58>
   3131e:	230b      	movs	r3, #11
   31320:	18fb      	adds	r3, r7, r3
   31322:	781b      	ldrb	r3, [r3, #0]
   31324:	2b2f      	cmp	r3, #47	; 0x2f
   31326:	d102      	bne.n	3132e <_is_ip+0x5e>
			isv6 = 1;
   31328:	2301      	movs	r3, #1
   3132a:	60fb      	str	r3, [r7, #12]
   3132c:	e012      	b.n	31354 <_is_ip+0x84>
		} else if (ch == '.') {
   3132e:	230b      	movs	r3, #11
   31330:	18fb      	adds	r3, r7, r3
   31332:	781b      	ldrb	r3, [r3, #0]
   31334:	2b2e      	cmp	r3, #46	; 0x2e
   31336:	d104      	bne.n	31342 <_is_ip+0x72>
			if (isv6) {
   31338:	68fb      	ldr	r3, [r7, #12]
   3133a:	2b00      	cmp	r3, #0
   3133c:	d00a      	beq.n	31354 <_is_ip+0x84>
				return 0;
   3133e:	2300      	movs	r3, #0
   31340:	e00d      	b.n	3135e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31342:	230b      	movs	r3, #11
   31344:	18fb      	adds	r3, r7, r3
   31346:	781b      	ldrb	r3, [r3, #0]
   31348:	2230      	movs	r2, #48	; 0x30
   3134a:	4013      	ands	r3, r2
   3134c:	2b30      	cmp	r3, #48	; 0x30
   3134e:	d001      	beq.n	31354 <_is_ip+0x84>
			return 0;
   31350:	2300      	movs	r3, #0
   31352:	e004      	b.n	3135e <_is_ip+0x8e>
	while (*host != '\0') {
   31354:	687b      	ldr	r3, [r7, #4]
   31356:	781b      	ldrb	r3, [r3, #0]
   31358:	2b00      	cmp	r3, #0
   3135a:	d1c0      	bne.n	312de <_is_ip+0xe>
		}
	}
	return 1;
   3135c:	2301      	movs	r3, #1
}
   3135e:	0018      	movs	r0, r3
   31360:	46bd      	mov	sp, r7
   31362:	b004      	add	sp, #16
   31364:	bd80      	pop	{r7, pc}
	...

00031368 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31368:	b5b0      	push	{r4, r5, r7, lr}
   3136a:	b08e      	sub	sp, #56	; 0x38
   3136c:	af00      	add	r7, sp, #0
   3136e:	60f8      	str	r0, [r7, #12]
   31370:	60b9      	str	r1, [r7, #8]
   31372:	603b      	str	r3, [r7, #0]
   31374:	1dfb      	adds	r3, r7, #7
   31376:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31378:	2337      	movs	r3, #55	; 0x37
   3137a:	18fb      	adds	r3, r7, r3
   3137c:	2200      	movs	r2, #0
   3137e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31380:	2300      	movs	r3, #0
   31382:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31384:	2300      	movs	r3, #0
   31386:	633b      	str	r3, [r7, #48]	; 0x30
   31388:	2300      	movs	r3, #0
   3138a:	62fb      	str	r3, [r7, #44]	; 0x2c
   3138c:	2300      	movs	r3, #0
   3138e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31390:	68fb      	ldr	r3, [r7, #12]
   31392:	2b00      	cmp	r3, #0
   31394:	d102      	bne.n	3139c <http_client_send_request+0x34>
		return -EINVAL;
   31396:	2316      	movs	r3, #22
   31398:	425b      	negs	r3, r3
   3139a:	e145      	b.n	31628 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   3139c:	68fb      	ldr	r3, [r7, #12]
   3139e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   313a0:	2b02      	cmp	r3, #2
   313a2:	d902      	bls.n	313aa <http_client_send_request+0x42>
		return -EBUSY;
   313a4:	2310      	movs	r3, #16
   313a6:	425b      	negs	r3, r3
   313a8:	e13e      	b.n	31628 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   313aa:	49a1      	ldr	r1, [pc, #644]	; (31630 <http_client_send_request+0x2c8>)
   313ac:	68bb      	ldr	r3, [r7, #8]
   313ae:	2207      	movs	r2, #7
   313b0:	0018      	movs	r0, r3
   313b2:	4ba0      	ldr	r3, [pc, #640]	; (31634 <http_client_send_request+0x2cc>)
   313b4:	4798      	blx	r3
   313b6:	1e03      	subs	r3, r0, #0
   313b8:	d102      	bne.n	313c0 <http_client_send_request+0x58>
		i = 7;
   313ba:	2307      	movs	r3, #7
   313bc:	633b      	str	r3, [r7, #48]	; 0x30
   313be:	e009      	b.n	313d4 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   313c0:	499d      	ldr	r1, [pc, #628]	; (31638 <http_client_send_request+0x2d0>)
   313c2:	68bb      	ldr	r3, [r7, #8]
   313c4:	2208      	movs	r2, #8
   313c6:	0018      	movs	r0, r3
   313c8:	4b9a      	ldr	r3, [pc, #616]	; (31634 <http_client_send_request+0x2cc>)
   313ca:	4798      	blx	r3
   313cc:	1e03      	subs	r3, r0, #0
   313ce:	d101      	bne.n	313d4 <http_client_send_request+0x6c>
		i = 8;
   313d0:	2308      	movs	r3, #8
   313d2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   313d4:	68fb      	ldr	r3, [r7, #12]
   313d6:	1c5c      	adds	r4, r3, #1
   313d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   313da:	68ba      	ldr	r2, [r7, #8]
   313dc:	18d5      	adds	r5, r2, r3
   313de:	68fb      	ldr	r3, [r7, #12]
   313e0:	3301      	adds	r3, #1
   313e2:	0018      	movs	r0, r3
   313e4:	4b95      	ldr	r3, [pc, #596]	; (3163c <http_client_send_request+0x2d4>)
   313e6:	4798      	blx	r3
   313e8:	0003      	movs	r3, r0
   313ea:	001a      	movs	r2, r3
   313ec:	0029      	movs	r1, r5
   313ee:	0020      	movs	r0, r4
   313f0:	4b90      	ldr	r3, [pc, #576]	; (31634 <http_client_send_request+0x2cc>)
   313f2:	4798      	blx	r3
   313f4:	0003      	movs	r3, r0
   313f6:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   313f8:	e00d      	b.n	31416 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   313fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   313fc:	1c5a      	adds	r2, r3, #1
   313fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   31400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31402:	68b9      	ldr	r1, [r7, #8]
   31404:	188a      	adds	r2, r1, r2
   31406:	7811      	ldrb	r1, [r2, #0]
   31408:	68fa      	ldr	r2, [r7, #12]
   3140a:	18d3      	adds	r3, r2, r3
   3140c:	1c0a      	adds	r2, r1, #0
   3140e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31412:	3301      	adds	r3, #1
   31414:	633b      	str	r3, [r7, #48]	; 0x30
   31416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31418:	68ba      	ldr	r2, [r7, #8]
   3141a:	18d3      	adds	r3, r2, r3
   3141c:	781b      	ldrb	r3, [r3, #0]
   3141e:	2b00      	cmp	r3, #0
   31420:	d005      	beq.n	3142e <http_client_send_request+0xc6>
   31422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31424:	68ba      	ldr	r2, [r7, #8]
   31426:	18d3      	adds	r3, r2, r3
   31428:	781b      	ldrb	r3, [r3, #0]
   3142a:	2b2f      	cmp	r3, #47	; 0x2f
   3142c:	d1e5      	bne.n	313fa <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   3142e:	68fa      	ldr	r2, [r7, #12]
   31430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31432:	18d3      	adds	r3, r2, r3
   31434:	3301      	adds	r3, #1
   31436:	2200      	movs	r2, #0
   31438:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   3143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3143c:	68ba      	ldr	r2, [r7, #8]
   3143e:	18d3      	adds	r3, r2, r3
   31440:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31442:	68fb      	ldr	r3, [r7, #12]
   31444:	3301      	adds	r3, #1
   31446:	781b      	ldrb	r3, [r3, #0]
   31448:	2b00      	cmp	r3, #0
   3144a:	d102      	bne.n	31452 <http_client_send_request+0xea>
		return -EINVAL;
   3144c:	2316      	movs	r3, #22
   3144e:	425b      	negs	r3, r3
   31450:	e0ea      	b.n	31628 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31452:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31454:	0018      	movs	r0, r3
   31456:	4b79      	ldr	r3, [pc, #484]	; (3163c <http_client_send_request+0x2d4>)
   31458:	4798      	blx	r3
   3145a:	0003      	movs	r3, r0
   3145c:	2b3f      	cmp	r3, #63	; 0x3f
   3145e:	d902      	bls.n	31466 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31460:	235b      	movs	r3, #91	; 0x5b
   31462:	425b      	negs	r3, r3
   31464:	e0e0      	b.n	31628 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31466:	68fb      	ldr	r3, [r7, #12]
   31468:	22d4      	movs	r2, #212	; 0xd4
   3146a:	589b      	ldr	r3, [r3, r2]
   3146c:	2b00      	cmp	r3, #0
   3146e:	d005      	beq.n	3147c <http_client_send_request+0x114>
		free(module->req.ext_header);
   31470:	68fb      	ldr	r3, [r7, #12]
   31472:	22d4      	movs	r2, #212	; 0xd4
   31474:	589b      	ldr	r3, [r3, r2]
   31476:	0018      	movs	r0, r3
   31478:	4b71      	ldr	r3, [pc, #452]	; (31640 <http_client_send_request+0x2d8>)
   3147a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   3147c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3147e:	2b00      	cmp	r3, #0
   31480:	d010      	beq.n	314a4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31484:	0018      	movs	r0, r3
   31486:	4b6f      	ldr	r3, [pc, #444]	; (31644 <http_client_send_request+0x2dc>)
   31488:	4798      	blx	r3
   3148a:	0003      	movs	r3, r0
   3148c:	0019      	movs	r1, r3
   3148e:	68fb      	ldr	r3, [r7, #12]
   31490:	22d4      	movs	r2, #212	; 0xd4
   31492:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31494:	68fb      	ldr	r3, [r7, #12]
   31496:	22d4      	movs	r2, #212	; 0xd4
   31498:	589b      	ldr	r3, [r3, r2]
   3149a:	2b00      	cmp	r3, #0
   3149c:	d106      	bne.n	314ac <http_client_send_request+0x144>
			return -ENOMEM;
   3149e:	230c      	movs	r3, #12
   314a0:	425b      	negs	r3, r3
   314a2:	e0c1      	b.n	31628 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   314a4:	68fb      	ldr	r3, [r7, #12]
   314a6:	22d4      	movs	r2, #212	; 0xd4
   314a8:	2100      	movs	r1, #0
   314aa:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   314ac:	68fb      	ldr	r3, [r7, #12]
   314ae:	2241      	movs	r2, #65	; 0x41
   314b0:	5c99      	ldrb	r1, [r3, r2]
   314b2:	2001      	movs	r0, #1
   314b4:	4381      	bics	r1, r0
   314b6:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   314b8:	68fb      	ldr	r3, [r7, #12]
   314ba:	2200      	movs	r2, #0
   314bc:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   314be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   314c0:	781b      	ldrb	r3, [r3, #0]
   314c2:	2b2f      	cmp	r3, #47	; 0x2f
   314c4:	d107      	bne.n	314d6 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   314c6:	68fb      	ldr	r3, [r7, #12]
   314c8:	3370      	adds	r3, #112	; 0x70
   314ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   314cc:	0011      	movs	r1, r2
   314ce:	0018      	movs	r0, r3
   314d0:	4b5d      	ldr	r3, [pc, #372]	; (31648 <http_client_send_request+0x2e0>)
   314d2:	4798      	blx	r3
   314d4:	e00f      	b.n	314f6 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   314d6:	68fb      	ldr	r3, [r7, #12]
   314d8:	2270      	movs	r2, #112	; 0x70
   314da:	212f      	movs	r1, #47	; 0x2f
   314dc:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   314de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   314e0:	781b      	ldrb	r3, [r3, #0]
   314e2:	2b00      	cmp	r3, #0
   314e4:	d007      	beq.n	314f6 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   314e6:	68fb      	ldr	r3, [r7, #12]
   314e8:	3370      	adds	r3, #112	; 0x70
   314ea:	3301      	adds	r3, #1
   314ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   314ee:	0011      	movs	r1, r2
   314f0:	0018      	movs	r0, r3
   314f2:	4b55      	ldr	r3, [pc, #340]	; (31648 <http_client_send_request+0x2e0>)
   314f4:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   314f6:	683b      	ldr	r3, [r7, #0]
   314f8:	2b00      	cmp	r3, #0
   314fa:	d007      	beq.n	3150c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   314fc:	68fb      	ldr	r3, [r7, #12]
   314fe:	33b0      	adds	r3, #176	; 0xb0
   31500:	6839      	ldr	r1, [r7, #0]
   31502:	2218      	movs	r2, #24
   31504:	0018      	movs	r0, r3
   31506:	4b51      	ldr	r3, [pc, #324]	; (3164c <http_client_send_request+0x2e4>)
   31508:	4798      	blx	r3
   3150a:	e006      	b.n	3151a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   3150c:	68fb      	ldr	r3, [r7, #12]
   3150e:	33b0      	adds	r3, #176	; 0xb0
   31510:	2218      	movs	r2, #24
   31512:	2100      	movs	r1, #0
   31514:	0018      	movs	r0, r3
   31516:	4b4e      	ldr	r3, [pc, #312]	; (31650 <http_client_send_request+0x2e8>)
   31518:	4798      	blx	r3
	}

	module->req.method = method;
   3151a:	68fb      	ldr	r3, [r7, #12]
   3151c:	1dfa      	adds	r2, r7, #7
   3151e:	21c8      	movs	r1, #200	; 0xc8
   31520:	7812      	ldrb	r2, [r2, #0]
   31522:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31524:	68fb      	ldr	r3, [r7, #12]
   31526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31528:	2b01      	cmp	r3, #1
   3152a:	d003      	beq.n	31534 <http_client_send_request+0x1cc>
   3152c:	d316      	bcc.n	3155c <http_client_send_request+0x1f4>
   3152e:	2b02      	cmp	r3, #2
   31530:	d004      	beq.n	3153c <http_client_send_request+0x1d4>
   31532:	e074      	b.n	3161e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31536:	2b00      	cmp	r3, #0
   31538:	d100      	bne.n	3153c <http_client_send_request+0x1d4>
   3153a:	e073      	b.n	31624 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   3153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3153e:	2b00      	cmp	r3, #0
   31540:	d107      	bne.n	31552 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31542:	68fb      	ldr	r3, [r7, #12]
   31544:	2203      	movs	r2, #3
   31546:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31548:	68fb      	ldr	r3, [r7, #12]
   3154a:	0018      	movs	r0, r3
   3154c:	4b41      	ldr	r3, [pc, #260]	; (31654 <http_client_send_request+0x2ec>)
   3154e:	4798      	blx	r3
			break;
   31550:	e069      	b.n	31626 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31552:	68fb      	ldr	r3, [r7, #12]
   31554:	2100      	movs	r1, #0
   31556:	0018      	movs	r0, r3
   31558:	4b3f      	ldr	r3, [pc, #252]	; (31658 <http_client_send_request+0x2f0>)
   3155a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   3155c:	68fb      	ldr	r3, [r7, #12]
   3155e:	2252      	movs	r2, #82	; 0x52
   31560:	5c9b      	ldrb	r3, [r3, r2]
   31562:	2b00      	cmp	r3, #0
   31564:	d007      	beq.n	31576 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31566:	2337      	movs	r3, #55	; 0x37
   31568:	18fb      	adds	r3, r7, r3
   3156a:	2237      	movs	r2, #55	; 0x37
   3156c:	18ba      	adds	r2, r7, r2
   3156e:	7812      	ldrb	r2, [r2, #0]
   31570:	2101      	movs	r1, #1
   31572:	430a      	orrs	r2, r1
   31574:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31576:	2337      	movs	r3, #55	; 0x37
   31578:	18fb      	adds	r3, r7, r3
   3157a:	781b      	ldrb	r3, [r3, #0]
   3157c:	001a      	movs	r2, r3
   3157e:	2101      	movs	r1, #1
   31580:	2002      	movs	r0, #2
   31582:	4b36      	ldr	r3, [pc, #216]	; (3165c <http_client_send_request+0x2f4>)
   31584:	4798      	blx	r3
   31586:	0003      	movs	r3, r0
   31588:	001a      	movs	r2, r3
   3158a:	68fb      	ldr	r3, [r7, #12]
   3158c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   3158e:	68fb      	ldr	r3, [r7, #12]
   31590:	781b      	ldrb	r3, [r3, #0]
   31592:	b25b      	sxtb	r3, r3
   31594:	2b00      	cmp	r3, #0
   31596:	db3f      	blt.n	31618 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31598:	68fb      	ldr	r3, [r7, #12]
   3159a:	781b      	ldrb	r3, [r3, #0]
   3159c:	b25b      	sxtb	r3, r3
   3159e:	001a      	movs	r2, r3
   315a0:	4b2f      	ldr	r3, [pc, #188]	; (31660 <http_client_send_request+0x2f8>)
   315a2:	0092      	lsls	r2, r2, #2
   315a4:	68f9      	ldr	r1, [r7, #12]
   315a6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   315a8:	68fb      	ldr	r3, [r7, #12]
   315aa:	3301      	adds	r3, #1
   315ac:	0018      	movs	r0, r3
   315ae:	4b2d      	ldr	r3, [pc, #180]	; (31664 <http_client_send_request+0x2fc>)
   315b0:	4798      	blx	r3
   315b2:	1e03      	subs	r3, r0, #0
   315b4:	d027      	beq.n	31606 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   315b6:	2314      	movs	r3, #20
   315b8:	18fb      	adds	r3, r7, r3
   315ba:	2202      	movs	r2, #2
   315bc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   315be:	68fb      	ldr	r3, [r7, #12]
   315c0:	2250      	movs	r2, #80	; 0x50
   315c2:	5a9b      	ldrh	r3, [r3, r2]
   315c4:	021b      	lsls	r3, r3, #8
   315c6:	b21a      	sxth	r2, r3
   315c8:	68fb      	ldr	r3, [r7, #12]
   315ca:	2150      	movs	r1, #80	; 0x50
   315cc:	5a5b      	ldrh	r3, [r3, r1]
   315ce:	0a1b      	lsrs	r3, r3, #8
   315d0:	b29b      	uxth	r3, r3
   315d2:	b21b      	sxth	r3, r3
   315d4:	4313      	orrs	r3, r2
   315d6:	b21b      	sxth	r3, r3
   315d8:	b29a      	uxth	r2, r3
   315da:	2314      	movs	r3, #20
   315dc:	18fb      	adds	r3, r7, r3
   315de:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   315e0:	68fb      	ldr	r3, [r7, #12]
   315e2:	3301      	adds	r3, #1
   315e4:	0018      	movs	r0, r3
   315e6:	4b20      	ldr	r3, [pc, #128]	; (31668 <http_client_send_request+0x300>)
   315e8:	4798      	blx	r3
   315ea:	0002      	movs	r2, r0
   315ec:	2314      	movs	r3, #20
   315ee:	18fb      	adds	r3, r7, r3
   315f0:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   315f2:	68fb      	ldr	r3, [r7, #12]
   315f4:	781b      	ldrb	r3, [r3, #0]
   315f6:	b25b      	sxtb	r3, r3
   315f8:	2214      	movs	r2, #20
   315fa:	18b9      	adds	r1, r7, r2
   315fc:	2210      	movs	r2, #16
   315fe:	0018      	movs	r0, r3
   31600:	4b1a      	ldr	r3, [pc, #104]	; (3166c <http_client_send_request+0x304>)
   31602:	4798      	blx	r3
   31604:	e004      	b.n	31610 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31606:	68fb      	ldr	r3, [r7, #12]
   31608:	3301      	adds	r3, #1
   3160a:	0018      	movs	r0, r3
   3160c:	4b18      	ldr	r3, [pc, #96]	; (31670 <http_client_send_request+0x308>)
   3160e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31610:	68fb      	ldr	r3, [r7, #12]
   31612:	2201      	movs	r2, #1
   31614:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31616:	e006      	b.n	31626 <http_client_send_request+0x2be>
			return -ENOSPC;
   31618:	231c      	movs	r3, #28
   3161a:	425b      	negs	r3, r3
   3161c:	e004      	b.n	31628 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   3161e:	230b      	movs	r3, #11
   31620:	425b      	negs	r3, r3
   31622:	e001      	b.n	31628 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31624:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31626:	2300      	movs	r3, #0
}
   31628:	0018      	movs	r0, r3
   3162a:	46bd      	mov	sp, r7
   3162c:	b00e      	add	sp, #56	; 0x38
   3162e:	bdb0      	pop	{r4, r5, r7, pc}
   31630:	0003a230 	.word	0x0003a230
   31634:	000351d9 	.word	0x000351d9
   31638:	0003a238 	.word	0x0003a238
   3163c:	000351cb 	.word	0x000351cb
   31640:	00034dc9 	.word	0x00034dc9
   31644:	00035191 	.word	0x00035191
   31648:	0003517f 	.word	0x0003517f
   3164c:	00034ddd 	.word	0x00034ddd
   31650:	00034e13 	.word	0x00034e13
   31654:	000317c9 	.word	0x000317c9
   31658:	00031675 	.word	0x00031675
   3165c:	00025985 	.word	0x00025985
   31660:	200046f0 	.word	0x200046f0
   31664:	000312d1 	.word	0x000312d1
   31668:	000260d1 	.word	0x000260d1
   3166c:	00025b99 	.word	0x00025b99
   31670:	000261d9 	.word	0x000261d9

00031674 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31674:	b580      	push	{r7, lr}
   31676:	b086      	sub	sp, #24
   31678:	af00      	add	r7, sp, #0
   3167a:	6078      	str	r0, [r7, #4]
   3167c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   3167e:	687b      	ldr	r3, [r7, #4]
   31680:	22c0      	movs	r2, #192	; 0xc0
   31682:	589b      	ldr	r3, [r3, r2]
   31684:	2b00      	cmp	r3, #0
   31686:	d007      	beq.n	31698 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31688:	687b      	ldr	r3, [r7, #4]
   3168a:	22c0      	movs	r2, #192	; 0xc0
   3168c:	589b      	ldr	r3, [r3, r2]
   3168e:	687a      	ldr	r2, [r7, #4]
   31690:	21c4      	movs	r1, #196	; 0xc4
   31692:	5852      	ldr	r2, [r2, r1]
   31694:	0010      	movs	r0, r2
   31696:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31698:	687b      	ldr	r3, [r7, #4]
   3169a:	33b0      	adds	r3, #176	; 0xb0
   3169c:	2218      	movs	r2, #24
   3169e:	2100      	movs	r1, #0
   316a0:	0018      	movs	r0, r3
   316a2:	4b24      	ldr	r3, [pc, #144]	; (31734 <_http_client_clear_conn+0xc0>)
   316a4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   316a6:	687b      	ldr	r3, [r7, #4]
   316a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   316aa:	2b00      	cmp	r3, #0
   316ac:	d005      	beq.n	316ba <_http_client_clear_conn+0x46>
		close(module->sock);
   316ae:	687b      	ldr	r3, [r7, #4]
   316b0:	781b      	ldrb	r3, [r3, #0]
   316b2:	b25b      	sxtb	r3, r3
   316b4:	0018      	movs	r0, r3
   316b6:	4b20      	ldr	r3, [pc, #128]	; (31738 <_http_client_clear_conn+0xc4>)
   316b8:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   316ba:	687b      	ldr	r3, [r7, #4]
   316bc:	781b      	ldrb	r3, [r3, #0]
   316be:	b25b      	sxtb	r3, r3
   316c0:	001a      	movs	r2, r3
   316c2:	4b1e      	ldr	r3, [pc, #120]	; (3173c <_http_client_clear_conn+0xc8>)
   316c4:	0092      	lsls	r2, r2, #2
   316c6:	2100      	movs	r1, #0
   316c8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   316ca:	687b      	ldr	r3, [r7, #4]
   316cc:	336c      	adds	r3, #108	; 0x6c
   316ce:	226c      	movs	r2, #108	; 0x6c
   316d0:	2100      	movs	r1, #0
   316d2:	0018      	movs	r0, r3
   316d4:	4b17      	ldr	r3, [pc, #92]	; (31734 <_http_client_clear_conn+0xc0>)
   316d6:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   316d8:	687b      	ldr	r3, [r7, #4]
   316da:	33d8      	adds	r3, #216	; 0xd8
   316dc:	2210      	movs	r2, #16
   316de:	2100      	movs	r1, #0
   316e0:	0018      	movs	r0, r3
   316e2:	4b14      	ldr	r3, [pc, #80]	; (31734 <_http_client_clear_conn+0xc0>)
   316e4:	4798      	blx	r3
	module->req.state = STATE_INIT;
   316e6:	687b      	ldr	r3, [r7, #4]
   316e8:	2200      	movs	r2, #0
   316ea:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   316ec:	687b      	ldr	r3, [r7, #4]
   316ee:	22d8      	movs	r2, #216	; 0xd8
   316f0:	2100      	movs	r1, #0
   316f2:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   316f4:	687b      	ldr	r3, [r7, #4]
   316f6:	2241      	movs	r2, #65	; 0x41
   316f8:	5c99      	ldrb	r1, [r3, r2]
   316fa:	2001      	movs	r0, #1
   316fc:	4381      	bics	r1, r0
   316fe:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31700:	687b      	ldr	r3, [r7, #4]
   31702:	2241      	movs	r2, #65	; 0x41
   31704:	5c99      	ldrb	r1, [r3, r2]
   31706:	2002      	movs	r0, #2
   31708:	4381      	bics	r1, r0
   3170a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   3170c:	230c      	movs	r3, #12
   3170e:	18fb      	adds	r3, r7, r3
   31710:	683a      	ldr	r2, [r7, #0]
   31712:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   31714:	687b      	ldr	r3, [r7, #4]
   31716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31718:	2b00      	cmp	r3, #0
   3171a:	d006      	beq.n	3172a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   3171c:	687b      	ldr	r3, [r7, #4]
   3171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31720:	220c      	movs	r2, #12
   31722:	18ba      	adds	r2, r7, r2
   31724:	6878      	ldr	r0, [r7, #4]
   31726:	2104      	movs	r1, #4
   31728:	4798      	blx	r3
	}
}
   3172a:	46c0      	nop			; (mov r8, r8)
   3172c:	46bd      	mov	sp, r7
   3172e:	b006      	add	sp, #24
   31730:	bd80      	pop	{r7, pc}
   31732:	46c0      	nop			; (mov r8, r8)
   31734:	00034e13 	.word	0x00034e13
   31738:	00025f91 	.word	0x00025f91
   3173c:	200046f0 	.word	0x200046f0

00031740 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   31740:	b590      	push	{r4, r7, lr}
   31742:	b087      	sub	sp, #28
   31744:	af00      	add	r7, sp, #0
   31746:	60f8      	str	r0, [r7, #12]
   31748:	60b9      	str	r1, [r7, #8]
   3174a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   3174c:	68fb      	ldr	r3, [r7, #12]
   3174e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   31750:	697b      	ldr	r3, [r7, #20]
   31752:	2241      	movs	r2, #65	; 0x41
   31754:	5c99      	ldrb	r1, [r3, r2]
   31756:	2001      	movs	r0, #1
   31758:	4301      	orrs	r1, r0
   3175a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   3175c:	697b      	ldr	r3, [r7, #20]
   3175e:	2000      	movs	r0, #0
   31760:	5618      	ldrsb	r0, [r3, r0]
   31762:	687b      	ldr	r3, [r7, #4]
   31764:	b29a      	uxth	r2, r3
   31766:	68b9      	ldr	r1, [r7, #8]
   31768:	2300      	movs	r3, #0
   3176a:	4c14      	ldr	r4, [pc, #80]	; (317bc <_http_client_send_wait+0x7c>)
   3176c:	47a0      	blx	r4
   3176e:	0003      	movs	r3, r0
   31770:	613b      	str	r3, [r7, #16]
   31772:	693b      	ldr	r3, [r7, #16]
   31774:	2b00      	cmp	r3, #0
   31776:	da0f      	bge.n	31798 <_http_client_send_wait+0x58>
		module->sending = 0;
   31778:	697b      	ldr	r3, [r7, #20]
   3177a:	2241      	movs	r2, #65	; 0x41
   3177c:	5c99      	ldrb	r1, [r3, r2]
   3177e:	2001      	movs	r0, #1
   31780:	4381      	bics	r1, r0
   31782:	5499      	strb	r1, [r3, r2]
		return result;
   31784:	693b      	ldr	r3, [r7, #16]
   31786:	e014      	b.n	317b2 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31788:	2000      	movs	r0, #0
   3178a:	4b0d      	ldr	r3, [pc, #52]	; (317c0 <_http_client_send_wait+0x80>)
   3178c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   3178e:	697b      	ldr	r3, [r7, #20]
   31790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31792:	0018      	movs	r0, r3
   31794:	4b0b      	ldr	r3, [pc, #44]	; (317c4 <_http_client_send_wait+0x84>)
   31796:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31798:	697b      	ldr	r3, [r7, #20]
   3179a:	2241      	movs	r2, #65	; 0x41
   3179c:	5c9b      	ldrb	r3, [r3, r2]
   3179e:	2201      	movs	r2, #1
   317a0:	4013      	ands	r3, r2
   317a2:	b2db      	uxtb	r3, r3
   317a4:	2b00      	cmp	r3, #0
   317a6:	d003      	beq.n	317b0 <_http_client_send_wait+0x70>
   317a8:	697b      	ldr	r3, [r7, #20]
   317aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   317ac:	2b02      	cmp	r3, #2
   317ae:	d8eb      	bhi.n	31788 <_http_client_send_wait+0x48>
	}

	return 0;
   317b0:	2300      	movs	r3, #0
}
   317b2:	0018      	movs	r0, r3
   317b4:	46bd      	mov	sp, r7
   317b6:	b007      	add	sp, #28
   317b8:	bd90      	pop	{r4, r7, pc}
   317ba:	46c0      	nop			; (mov r8, r8)
   317bc:	00025cad 	.word	0x00025cad
   317c0:	00022359 	.word	0x00022359
   317c4:	00032a4d 	.word	0x00032a4d

000317c8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   317c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   317ca:	46c6      	mov	lr, r8
   317cc:	b500      	push	{lr}
   317ce:	b0a0      	sub	sp, #128	; 0x80
   317d0:	af02      	add	r7, sp, #8
   317d2:	61f8      	str	r0, [r7, #28]
   317d4:	4668      	mov	r0, sp
   317d6:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   317d8:	2318      	movs	r3, #24
   317da:	2218      	movs	r2, #24
   317dc:	18ba      	adds	r2, r7, r2
   317de:	18d0      	adds	r0, r2, r3
   317e0:	4bbd      	ldr	r3, [pc, #756]	; (31ad8 <_http_client_request+0x310>)
   317e2:	469c      	mov	ip, r3
   317e4:	4663      	mov	r3, ip
   317e6:	cb16      	ldmia	r3!, {r1, r2, r4}
   317e8:	c016      	stmia	r0!, {r1, r2, r4}
   317ea:	469c      	mov	ip, r3
   317ec:	4663      	mov	r3, ip
   317ee:	681b      	ldr	r3, [r3, #0]
   317f0:	469c      	mov	ip, r3
   317f2:	4663      	mov	r3, ip
   317f4:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   317f6:	69f8      	ldr	r0, [r7, #28]
   317f8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   317fa:	4684      	mov	ip, r0
   317fc:	2301      	movs	r3, #1
   317fe:	425b      	negs	r3, r3
   31800:	4698      	mov	r8, r3
   31802:	44c4      	add	ip, r8
   31804:	4663      	mov	r3, ip
   31806:	66fb      	str	r3, [r7, #108]	; 0x6c
   31808:	6038      	str	r0, [r7, #0]
   3180a:	2300      	movs	r3, #0
   3180c:	607b      	str	r3, [r7, #4]
   3180e:	6839      	ldr	r1, [r7, #0]
   31810:	687a      	ldr	r2, [r7, #4]
   31812:	000b      	movs	r3, r1
   31814:	0f5b      	lsrs	r3, r3, #29
   31816:	469c      	mov	ip, r3
   31818:	0013      	movs	r3, r2
   3181a:	00db      	lsls	r3, r3, #3
   3181c:	617b      	str	r3, [r7, #20]
   3181e:	4663      	mov	r3, ip
   31820:	697c      	ldr	r4, [r7, #20]
   31822:	431c      	orrs	r4, r3
   31824:	617c      	str	r4, [r7, #20]
   31826:	000b      	movs	r3, r1
   31828:	00db      	lsls	r3, r3, #3
   3182a:	613b      	str	r3, [r7, #16]
   3182c:	0005      	movs	r5, r0
   3182e:	2200      	movs	r2, #0
   31830:	0016      	movs	r6, r2
   31832:	0f6a      	lsrs	r2, r5, #29
   31834:	00f3      	lsls	r3, r6, #3
   31836:	60fb      	str	r3, [r7, #12]
   31838:	68fb      	ldr	r3, [r7, #12]
   3183a:	4313      	orrs	r3, r2
   3183c:	60fb      	str	r3, [r7, #12]
   3183e:	00eb      	lsls	r3, r5, #3
   31840:	60bb      	str	r3, [r7, #8]
   31842:	1dc3      	adds	r3, r0, #7
   31844:	08db      	lsrs	r3, r3, #3
   31846:	00db      	lsls	r3, r3, #3
   31848:	466a      	mov	r2, sp
   3184a:	1ad3      	subs	r3, r2, r3
   3184c:	469d      	mov	sp, r3
   3184e:	ab02      	add	r3, sp, #8
   31850:	3300      	adds	r3, #0
   31852:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   31854:	69fb      	ldr	r3, [r7, #28]
   31856:	2b00      	cmp	r3, #0
   31858:	d100      	bne.n	3185c <_http_client_request+0x94>
   3185a:	e346      	b.n	31eea <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   3185c:	69fb      	ldr	r3, [r7, #28]
   3185e:	2241      	movs	r2, #65	; 0x41
   31860:	5c9b      	ldrb	r3, [r3, r2]
   31862:	2201      	movs	r2, #1
   31864:	4013      	ands	r3, r2
   31866:	b2db      	uxtb	r3, r3
   31868:	2b00      	cmp	r3, #0
   3186a:	d000      	beq.n	3186e <_http_client_request+0xa6>
   3186c:	e33f      	b.n	31eee <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   3186e:	69fb      	ldr	r3, [r7, #28]
   31870:	33b0      	adds	r3, #176	; 0xb0
   31872:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   31874:	69fb      	ldr	r3, [r7, #28]
   31876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31878:	2b03      	cmp	r3, #3
   3187a:	d003      	beq.n	31884 <_http_client_request+0xbc>
   3187c:	2b04      	cmp	r3, #4
   3187e:	d100      	bne.n	31882 <_http_client_request+0xba>
   31880:	e1b3      	b.n	31bea <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   31882:	e32f      	b.n	31ee4 <_http_client_request+0x71c>
		module->req.content_length = 0;
   31884:	69fb      	ldr	r3, [r7, #28]
   31886:	22cc      	movs	r2, #204	; 0xcc
   31888:	2100      	movs	r1, #0
   3188a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   3188c:	69fb      	ldr	r3, [r7, #28]
   3188e:	22d0      	movs	r2, #208	; 0xd0
   31890:	2100      	movs	r1, #0
   31892:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   31894:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31896:	69fb      	ldr	r3, [r7, #28]
   31898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3189a:	4c90      	ldr	r4, [pc, #576]	; (31adc <_http_client_request+0x314>)
   3189c:	2334      	movs	r3, #52	; 0x34
   3189e:	2018      	movs	r0, #24
   318a0:	1838      	adds	r0, r7, r0
   318a2:	18c0      	adds	r0, r0, r3
   318a4:	69fb      	ldr	r3, [r7, #28]
   318a6:	9300      	str	r3, [sp, #0]
   318a8:	0023      	movs	r3, r4
   318aa:	4c8d      	ldr	r4, [pc, #564]	; (31ae0 <_http_client_request+0x318>)
   318ac:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   318ae:	69fb      	ldr	r3, [r7, #28]
   318b0:	22c8      	movs	r2, #200	; 0xc8
   318b2:	5c9b      	ldrb	r3, [r3, r2]
   318b4:	2b01      	cmp	r3, #1
   318b6:	d10a      	bne.n	318ce <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   318b8:	498a      	ldr	r1, [pc, #552]	; (31ae4 <_http_client_request+0x31c>)
   318ba:	2334      	movs	r3, #52	; 0x34
   318bc:	2218      	movs	r2, #24
   318be:	4694      	mov	ip, r2
   318c0:	44bc      	add	ip, r7
   318c2:	4463      	add	r3, ip
   318c4:	2204      	movs	r2, #4
   318c6:	0018      	movs	r0, r3
   318c8:	4b87      	ldr	r3, [pc, #540]	; (31ae8 <_http_client_request+0x320>)
   318ca:	4798      	blx	r3
   318cc:	e04e      	b.n	3196c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   318ce:	69fb      	ldr	r3, [r7, #28]
   318d0:	22c8      	movs	r2, #200	; 0xc8
   318d2:	5c9b      	ldrb	r3, [r3, r2]
   318d4:	2b02      	cmp	r3, #2
   318d6:	d10a      	bne.n	318ee <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   318d8:	4984      	ldr	r1, [pc, #528]	; (31aec <_http_client_request+0x324>)
   318da:	2334      	movs	r3, #52	; 0x34
   318dc:	2218      	movs	r2, #24
   318de:	4694      	mov	ip, r2
   318e0:	44bc      	add	ip, r7
   318e2:	4463      	add	r3, ip
   318e4:	2205      	movs	r2, #5
   318e6:	0018      	movs	r0, r3
   318e8:	4b7f      	ldr	r3, [pc, #508]	; (31ae8 <_http_client_request+0x320>)
   318ea:	4798      	blx	r3
   318ec:	e03e      	b.n	3196c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   318ee:	69fb      	ldr	r3, [r7, #28]
   318f0:	22c8      	movs	r2, #200	; 0xc8
   318f2:	5c9b      	ldrb	r3, [r3, r2]
   318f4:	2b03      	cmp	r3, #3
   318f6:	d10a      	bne.n	3190e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   318f8:	497d      	ldr	r1, [pc, #500]	; (31af0 <_http_client_request+0x328>)
   318fa:	2334      	movs	r3, #52	; 0x34
   318fc:	2218      	movs	r2, #24
   318fe:	4694      	mov	ip, r2
   31900:	44bc      	add	ip, r7
   31902:	4463      	add	r3, ip
   31904:	2207      	movs	r2, #7
   31906:	0018      	movs	r0, r3
   31908:	4b77      	ldr	r3, [pc, #476]	; (31ae8 <_http_client_request+0x320>)
   3190a:	4798      	blx	r3
   3190c:	e02e      	b.n	3196c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3190e:	69fb      	ldr	r3, [r7, #28]
   31910:	22c8      	movs	r2, #200	; 0xc8
   31912:	5c9b      	ldrb	r3, [r3, r2]
   31914:	2b04      	cmp	r3, #4
   31916:	d10a      	bne.n	3192e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   31918:	4976      	ldr	r1, [pc, #472]	; (31af4 <_http_client_request+0x32c>)
   3191a:	2334      	movs	r3, #52	; 0x34
   3191c:	2218      	movs	r2, #24
   3191e:	4694      	mov	ip, r2
   31920:	44bc      	add	ip, r7
   31922:	4463      	add	r3, ip
   31924:	2204      	movs	r2, #4
   31926:	0018      	movs	r0, r3
   31928:	4b6f      	ldr	r3, [pc, #444]	; (31ae8 <_http_client_request+0x320>)
   3192a:	4798      	blx	r3
   3192c:	e01e      	b.n	3196c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3192e:	69fb      	ldr	r3, [r7, #28]
   31930:	22c8      	movs	r2, #200	; 0xc8
   31932:	5c9b      	ldrb	r3, [r3, r2]
   31934:	2b05      	cmp	r3, #5
   31936:	d10a      	bne.n	3194e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   31938:	496f      	ldr	r1, [pc, #444]	; (31af8 <_http_client_request+0x330>)
   3193a:	2334      	movs	r3, #52	; 0x34
   3193c:	2218      	movs	r2, #24
   3193e:	4694      	mov	ip, r2
   31940:	44bc      	add	ip, r7
   31942:	4463      	add	r3, ip
   31944:	2208      	movs	r2, #8
   31946:	0018      	movs	r0, r3
   31948:	4b67      	ldr	r3, [pc, #412]	; (31ae8 <_http_client_request+0x320>)
   3194a:	4798      	blx	r3
   3194c:	e00e      	b.n	3196c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3194e:	69fb      	ldr	r3, [r7, #28]
   31950:	22c8      	movs	r2, #200	; 0xc8
   31952:	5c9b      	ldrb	r3, [r3, r2]
   31954:	2b06      	cmp	r3, #6
   31956:	d109      	bne.n	3196c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   31958:	4968      	ldr	r1, [pc, #416]	; (31afc <_http_client_request+0x334>)
   3195a:	2334      	movs	r3, #52	; 0x34
   3195c:	2218      	movs	r2, #24
   3195e:	4694      	mov	ip, r2
   31960:	44bc      	add	ip, r7
   31962:	4463      	add	r3, ip
   31964:	2205      	movs	r2, #5
   31966:	0018      	movs	r0, r3
   31968:	4b5f      	ldr	r3, [pc, #380]	; (31ae8 <_http_client_request+0x320>)
   3196a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   3196c:	69fb      	ldr	r3, [r7, #28]
   3196e:	3370      	adds	r3, #112	; 0x70
   31970:	001c      	movs	r4, r3
   31972:	69fb      	ldr	r3, [r7, #28]
   31974:	3370      	adds	r3, #112	; 0x70
   31976:	0018      	movs	r0, r3
   31978:	4b61      	ldr	r3, [pc, #388]	; (31b00 <_http_client_request+0x338>)
   3197a:	4798      	blx	r3
   3197c:	0002      	movs	r2, r0
   3197e:	2334      	movs	r3, #52	; 0x34
   31980:	2118      	movs	r1, #24
   31982:	468c      	mov	ip, r1
   31984:	44bc      	add	ip, r7
   31986:	4463      	add	r3, ip
   31988:	0021      	movs	r1, r4
   3198a:	0018      	movs	r0, r3
   3198c:	4b56      	ldr	r3, [pc, #344]	; (31ae8 <_http_client_request+0x320>)
   3198e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   31990:	495c      	ldr	r1, [pc, #368]	; (31b04 <_http_client_request+0x33c>)
   31992:	2334      	movs	r3, #52	; 0x34
   31994:	2218      	movs	r2, #24
   31996:	4694      	mov	ip, r2
   31998:	44bc      	add	ip, r7
   3199a:	4463      	add	r3, ip
   3199c:	220b      	movs	r2, #11
   3199e:	0018      	movs	r0, r3
   319a0:	4b51      	ldr	r3, [pc, #324]	; (31ae8 <_http_client_request+0x320>)
   319a2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   319a4:	4958      	ldr	r1, [pc, #352]	; (31b08 <_http_client_request+0x340>)
   319a6:	2334      	movs	r3, #52	; 0x34
   319a8:	2218      	movs	r2, #24
   319aa:	4694      	mov	ip, r2
   319ac:	44bc      	add	ip, r7
   319ae:	4463      	add	r3, ip
   319b0:	220c      	movs	r2, #12
   319b2:	0018      	movs	r0, r3
   319b4:	4b4c      	ldr	r3, [pc, #304]	; (31ae8 <_http_client_request+0x320>)
   319b6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   319b8:	69fb      	ldr	r3, [r7, #28]
   319ba:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   319bc:	69fb      	ldr	r3, [r7, #28]
   319be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   319c0:	0018      	movs	r0, r3
   319c2:	4b4f      	ldr	r3, [pc, #316]	; (31b00 <_http_client_request+0x338>)
   319c4:	4798      	blx	r3
   319c6:	0002      	movs	r2, r0
   319c8:	2334      	movs	r3, #52	; 0x34
   319ca:	2118      	movs	r1, #24
   319cc:	468c      	mov	ip, r1
   319ce:	44bc      	add	ip, r7
   319d0:	4463      	add	r3, ip
   319d2:	0021      	movs	r1, r4
   319d4:	0018      	movs	r0, r3
   319d6:	4b44      	ldr	r3, [pc, #272]	; (31ae8 <_http_client_request+0x320>)
   319d8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   319da:	494c      	ldr	r1, [pc, #304]	; (31b0c <_http_client_request+0x344>)
   319dc:	2334      	movs	r3, #52	; 0x34
   319de:	2218      	movs	r2, #24
   319e0:	4694      	mov	ip, r2
   319e2:	44bc      	add	ip, r7
   319e4:	4463      	add	r3, ip
   319e6:	2202      	movs	r2, #2
   319e8:	0018      	movs	r0, r3
   319ea:	4b3f      	ldr	r3, [pc, #252]	; (31ae8 <_http_client_request+0x320>)
   319ec:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   319ee:	4948      	ldr	r1, [pc, #288]	; (31b10 <_http_client_request+0x348>)
   319f0:	2334      	movs	r3, #52	; 0x34
   319f2:	2218      	movs	r2, #24
   319f4:	4694      	mov	ip, r2
   319f6:	44bc      	add	ip, r7
   319f8:	4463      	add	r3, ip
   319fa:	2206      	movs	r2, #6
   319fc:	0018      	movs	r0, r3
   319fe:	4b3a      	ldr	r3, [pc, #232]	; (31ae8 <_http_client_request+0x320>)
   31a00:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   31a02:	69fb      	ldr	r3, [r7, #28]
   31a04:	1c5c      	adds	r4, r3, #1
   31a06:	69fb      	ldr	r3, [r7, #28]
   31a08:	3301      	adds	r3, #1
   31a0a:	0018      	movs	r0, r3
   31a0c:	4b3c      	ldr	r3, [pc, #240]	; (31b00 <_http_client_request+0x338>)
   31a0e:	4798      	blx	r3
   31a10:	0002      	movs	r2, r0
   31a12:	2334      	movs	r3, #52	; 0x34
   31a14:	2118      	movs	r1, #24
   31a16:	468c      	mov	ip, r1
   31a18:	44bc      	add	ip, r7
   31a1a:	4463      	add	r3, ip
   31a1c:	0021      	movs	r1, r4
   31a1e:	0018      	movs	r0, r3
   31a20:	4b31      	ldr	r3, [pc, #196]	; (31ae8 <_http_client_request+0x320>)
   31a22:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31a24:	4939      	ldr	r1, [pc, #228]	; (31b0c <_http_client_request+0x344>)
   31a26:	2334      	movs	r3, #52	; 0x34
   31a28:	2218      	movs	r2, #24
   31a2a:	4694      	mov	ip, r2
   31a2c:	44bc      	add	ip, r7
   31a2e:	4463      	add	r3, ip
   31a30:	2202      	movs	r2, #2
   31a32:	0018      	movs	r0, r3
   31a34:	4b2c      	ldr	r3, [pc, #176]	; (31ae8 <_http_client_request+0x320>)
   31a36:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   31a38:	4936      	ldr	r1, [pc, #216]	; (31b14 <_http_client_request+0x34c>)
   31a3a:	2334      	movs	r3, #52	; 0x34
   31a3c:	2218      	movs	r2, #24
   31a3e:	4694      	mov	ip, r2
   31a40:	44bc      	add	ip, r7
   31a42:	4463      	add	r3, ip
   31a44:	2218      	movs	r2, #24
   31a46:	0018      	movs	r0, r3
   31a48:	4b27      	ldr	r3, [pc, #156]	; (31ae8 <_http_client_request+0x320>)
   31a4a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31a4c:	4932      	ldr	r1, [pc, #200]	; (31b18 <_http_client_request+0x350>)
   31a4e:	2334      	movs	r3, #52	; 0x34
   31a50:	2218      	movs	r2, #24
   31a52:	4694      	mov	ip, r2
   31a54:	44bc      	add	ip, r7
   31a56:	4463      	add	r3, ip
   31a58:	2213      	movs	r2, #19
   31a5a:	0018      	movs	r0, r3
   31a5c:	4b22      	ldr	r3, [pc, #136]	; (31ae8 <_http_client_request+0x320>)
   31a5e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31a60:	492e      	ldr	r1, [pc, #184]	; (31b1c <_http_client_request+0x354>)
   31a62:	2334      	movs	r3, #52	; 0x34
   31a64:	2218      	movs	r2, #24
   31a66:	4694      	mov	ip, r2
   31a68:	44bc      	add	ip, r7
   31a6a:	4463      	add	r3, ip
   31a6c:	2217      	movs	r2, #23
   31a6e:	0018      	movs	r0, r3
   31a70:	4b1d      	ldr	r3, [pc, #116]	; (31ae8 <_http_client_request+0x320>)
   31a72:	4798      	blx	r3
		if (entity->read != NULL) {
   31a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a76:	68db      	ldr	r3, [r3, #12]
   31a78:	2b00      	cmp	r3, #0
   31a7a:	d100      	bne.n	31a7e <_http_client_request+0x2b6>
   31a7c:	e088      	b.n	31b90 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a80:	781b      	ldrb	r3, [r3, #0]
   31a82:	2b00      	cmp	r3, #0
   31a84:	d00f      	beq.n	31aa6 <_http_client_request+0x2de>
				module->req.content_length = -1;
   31a86:	69fb      	ldr	r3, [r7, #28]
   31a88:	21cc      	movs	r1, #204	; 0xcc
   31a8a:	2201      	movs	r2, #1
   31a8c:	4252      	negs	r2, r2
   31a8e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31a90:	4923      	ldr	r1, [pc, #140]	; (31b20 <_http_client_request+0x358>)
   31a92:	2334      	movs	r3, #52	; 0x34
   31a94:	2218      	movs	r2, #24
   31a96:	4694      	mov	ip, r2
   31a98:	44bc      	add	ip, r7
   31a9a:	4463      	add	r3, ip
   31a9c:	221c      	movs	r2, #28
   31a9e:	0018      	movs	r0, r3
   31aa0:	4b11      	ldr	r3, [pc, #68]	; (31ae8 <_http_client_request+0x320>)
   31aa2:	4798      	blx	r3
   31aa4:	e074      	b.n	31b90 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   31aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31aa8:	689b      	ldr	r3, [r3, #8]
   31aaa:	2b00      	cmp	r3, #0
   31aac:	d070      	beq.n	31b90 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31ab0:	689a      	ldr	r2, [r3, #8]
   31ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31ab4:	695b      	ldr	r3, [r3, #20]
   31ab6:	0018      	movs	r0, r3
   31ab8:	4790      	blx	r2
   31aba:	0001      	movs	r1, r0
   31abc:	69fb      	ldr	r3, [r7, #28]
   31abe:	22cc      	movs	r2, #204	; 0xcc
   31ac0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   31ac2:	69fb      	ldr	r3, [r7, #28]
   31ac4:	22cc      	movs	r2, #204	; 0xcc
   31ac6:	589b      	ldr	r3, [r3, r2]
   31ac8:	2b00      	cmp	r3, #0
   31aca:	da2b      	bge.n	31b24 <_http_client_request+0x35c>
					module->req.content_length = 0;
   31acc:	69fb      	ldr	r3, [r7, #28]
   31ace:	22cc      	movs	r2, #204	; 0xcc
   31ad0:	2100      	movs	r1, #0
   31ad2:	5099      	str	r1, [r3, r2]
   31ad4:	e05c      	b.n	31b90 <_http_client_request+0x3c8>
   31ad6:	46c0      	nop			; (mov r8, r8)
   31ad8:	0003a320 	.word	0x0003a320
   31adc:	00031741 	.word	0x00031741
   31ae0:	000326a9 	.word	0x000326a9
   31ae4:	0003a244 	.word	0x0003a244
   31ae8:	00032729 	.word	0x00032729
   31aec:	0003a24c 	.word	0x0003a24c
   31af0:	0003a254 	.word	0x0003a254
   31af4:	0003a25c 	.word	0x0003a25c
   31af8:	0003a264 	.word	0x0003a264
   31afc:	0003a270 	.word	0x0003a270
   31b00:	000351cb 	.word	0x000351cb
   31b04:	0003a278 	.word	0x0003a278
   31b08:	0003a284 	.word	0x0003a284
   31b0c:	0003a294 	.word	0x0003a294
   31b10:	0003a298 	.word	0x0003a298
   31b14:	0003a2a0 	.word	0x0003a2a0
   31b18:	0003a2bc 	.word	0x0003a2bc
   31b1c:	0003a2d0 	.word	0x0003a2d0
   31b20:	0003a2e8 	.word	0x0003a2e8
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   31b24:	69fb      	ldr	r3, [r7, #28]
   31b26:	22cc      	movs	r2, #204	; 0xcc
   31b28:	589b      	ldr	r3, [r3, r2]
   31b2a:	001a      	movs	r2, r3
   31b2c:	49e0      	ldr	r1, [pc, #896]	; (31eb0 <_http_client_request+0x6e8>)
   31b2e:	2328      	movs	r3, #40	; 0x28
   31b30:	2018      	movs	r0, #24
   31b32:	4684      	mov	ip, r0
   31b34:	44bc      	add	ip, r7
   31b36:	4463      	add	r3, ip
   31b38:	0018      	movs	r0, r3
   31b3a:	4bde      	ldr	r3, [pc, #888]	; (31eb4 <_http_client_request+0x6ec>)
   31b3c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31b3e:	49de      	ldr	r1, [pc, #888]	; (31eb8 <_http_client_request+0x6f0>)
   31b40:	2334      	movs	r3, #52	; 0x34
   31b42:	2218      	movs	r2, #24
   31b44:	4694      	mov	ip, r2
   31b46:	44bc      	add	ip, r7
   31b48:	4463      	add	r3, ip
   31b4a:	2210      	movs	r2, #16
   31b4c:	0018      	movs	r0, r3
   31b4e:	4bdb      	ldr	r3, [pc, #876]	; (31ebc <_http_client_request+0x6f4>)
   31b50:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   31b52:	2328      	movs	r3, #40	; 0x28
   31b54:	2218      	movs	r2, #24
   31b56:	4694      	mov	ip, r2
   31b58:	44bc      	add	ip, r7
   31b5a:	4463      	add	r3, ip
   31b5c:	0018      	movs	r0, r3
   31b5e:	4bd8      	ldr	r3, [pc, #864]	; (31ec0 <_http_client_request+0x6f8>)
   31b60:	4798      	blx	r3
   31b62:	0002      	movs	r2, r0
   31b64:	2328      	movs	r3, #40	; 0x28
   31b66:	2118      	movs	r1, #24
   31b68:	1879      	adds	r1, r7, r1
   31b6a:	18c9      	adds	r1, r1, r3
   31b6c:	2334      	movs	r3, #52	; 0x34
   31b6e:	2018      	movs	r0, #24
   31b70:	4684      	mov	ip, r0
   31b72:	44bc      	add	ip, r7
   31b74:	4463      	add	r3, ip
   31b76:	0018      	movs	r0, r3
   31b78:	4bd0      	ldr	r3, [pc, #832]	; (31ebc <_http_client_request+0x6f4>)
   31b7a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31b7c:	49d1      	ldr	r1, [pc, #836]	; (31ec4 <_http_client_request+0x6fc>)
   31b7e:	2334      	movs	r3, #52	; 0x34
   31b80:	2218      	movs	r2, #24
   31b82:	4694      	mov	ip, r2
   31b84:	44bc      	add	ip, r7
   31b86:	4463      	add	r3, ip
   31b88:	2202      	movs	r2, #2
   31b8a:	0018      	movs	r0, r3
   31b8c:	4bcb      	ldr	r3, [pc, #812]	; (31ebc <_http_client_request+0x6f4>)
   31b8e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31b90:	69fb      	ldr	r3, [r7, #28]
   31b92:	22d4      	movs	r2, #212	; 0xd4
   31b94:	589b      	ldr	r3, [r3, r2]
   31b96:	2b00      	cmp	r3, #0
   31b98:	d012      	beq.n	31bc0 <_http_client_request+0x3f8>
				module->req.ext_header,
   31b9a:	69fb      	ldr	r3, [r7, #28]
   31b9c:	22d4      	movs	r2, #212	; 0xd4
   31b9e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31ba0:	69fb      	ldr	r3, [r7, #28]
   31ba2:	22d4      	movs	r2, #212	; 0xd4
   31ba4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   31ba6:	0018      	movs	r0, r3
   31ba8:	4bc5      	ldr	r3, [pc, #788]	; (31ec0 <_http_client_request+0x6f8>)
   31baa:	4798      	blx	r3
   31bac:	0002      	movs	r2, r0
   31bae:	2334      	movs	r3, #52	; 0x34
   31bb0:	2118      	movs	r1, #24
   31bb2:	468c      	mov	ip, r1
   31bb4:	44bc      	add	ip, r7
   31bb6:	4463      	add	r3, ip
   31bb8:	0021      	movs	r1, r4
   31bba:	0018      	movs	r0, r3
   31bbc:	4bbf      	ldr	r3, [pc, #764]	; (31ebc <_http_client_request+0x6f4>)
   31bbe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31bc0:	49c0      	ldr	r1, [pc, #768]	; (31ec4 <_http_client_request+0x6fc>)
   31bc2:	2334      	movs	r3, #52	; 0x34
   31bc4:	2218      	movs	r2, #24
   31bc6:	4694      	mov	ip, r2
   31bc8:	44bc      	add	ip, r7
   31bca:	4463      	add	r3, ip
   31bcc:	2202      	movs	r2, #2
   31bce:	0018      	movs	r0, r3
   31bd0:	4bba      	ldr	r3, [pc, #744]	; (31ebc <_http_client_request+0x6f4>)
   31bd2:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   31bd4:	2334      	movs	r3, #52	; 0x34
   31bd6:	2218      	movs	r2, #24
   31bd8:	4694      	mov	ip, r2
   31bda:	44bc      	add	ip, r7
   31bdc:	4463      	add	r3, ip
   31bde:	0018      	movs	r0, r3
   31be0:	4bb9      	ldr	r3, [pc, #740]	; (31ec8 <_http_client_request+0x700>)
   31be2:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   31be4:	69fb      	ldr	r3, [r7, #28]
   31be6:	2204      	movs	r2, #4
   31be8:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   31bea:	69fb      	ldr	r3, [r7, #28]
   31bec:	22cc      	movs	r2, #204	; 0xcc
   31bee:	589b      	ldr	r3, [r3, r2]
   31bf0:	2b00      	cmp	r3, #0
   31bf2:	db00      	blt.n	31bf6 <_http_client_request+0x42e>
   31bf4:	e0c6      	b.n	31d84 <_http_client_request+0x5bc>
   31bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31bf8:	68db      	ldr	r3, [r3, #12]
   31bfa:	2b00      	cmp	r3, #0
   31bfc:	d100      	bne.n	31c00 <_http_client_request+0x438>
   31bfe:	e0c1      	b.n	31d84 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c02:	68dc      	ldr	r4, [r3, #12]
   31c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c06:	6958      	ldr	r0, [r3, #20]
   31c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31c0a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31c0c:	69fb      	ldr	r3, [r7, #28]
   31c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31c10:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31c12:	69fb      	ldr	r3, [r7, #28]
   31c14:	22d0      	movs	r2, #208	; 0xd0
   31c16:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31c18:	002a      	movs	r2, r5
   31c1a:	47a0      	blx	r4
   31c1c:	0003      	movs	r3, r0
   31c1e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c22:	2b00      	cmp	r3, #0
   31c24:	da01      	bge.n	31c2a <_http_client_request+0x462>
				size = 0;
   31c26:	2300      	movs	r3, #0
   31c28:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31c2c:	220a      	movs	r2, #10
   31c2e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31c32:	220d      	movs	r2, #13
   31c34:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   31c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c38:	3305      	adds	r3, #5
   31c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31c3c:	210d      	movs	r1, #13
   31c3e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c42:	3306      	adds	r3, #6
   31c44:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31c46:	210a      	movs	r1, #10
   31c48:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   31c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c4c:	2b00      	cmp	r3, #0
   31c4e:	db14      	blt.n	31c7a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31c52:	3302      	adds	r3, #2
   31c54:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   31c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c58:	4a9c      	ldr	r2, [pc, #624]	; (31ecc <_http_client_request+0x704>)
   31c5a:	4013      	ands	r3, r2
   31c5c:	d504      	bpl.n	31c68 <_http_client_request+0x4a0>
   31c5e:	3b01      	subs	r3, #1
   31c60:	2210      	movs	r2, #16
   31c62:	4252      	negs	r2, r2
   31c64:	4313      	orrs	r3, r2
   31c66:	3301      	adds	r3, #1
   31c68:	001a      	movs	r2, r3
   31c6a:	2318      	movs	r3, #24
   31c6c:	2118      	movs	r1, #24
   31c6e:	468c      	mov	ip, r1
   31c70:	44bc      	add	ip, r7
   31c72:	4463      	add	r3, ip
   31c74:	5c9a      	ldrb	r2, [r3, r2]
   31c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31c78:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c7c:	2b0f      	cmp	r3, #15
   31c7e:	dd19      	ble.n	31cb4 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31c82:	3301      	adds	r3, #1
   31c84:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   31c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c88:	2b00      	cmp	r3, #0
   31c8a:	da00      	bge.n	31c8e <_http_client_request+0x4c6>
   31c8c:	330f      	adds	r3, #15
   31c8e:	111b      	asrs	r3, r3, #4
   31c90:	001a      	movs	r2, r3
   31c92:	4b8e      	ldr	r3, [pc, #568]	; (31ecc <_http_client_request+0x704>)
   31c94:	4013      	ands	r3, r2
   31c96:	d504      	bpl.n	31ca2 <_http_client_request+0x4da>
   31c98:	3b01      	subs	r3, #1
   31c9a:	2210      	movs	r2, #16
   31c9c:	4252      	negs	r2, r2
   31c9e:	4313      	orrs	r3, r2
   31ca0:	3301      	adds	r3, #1
   31ca2:	001a      	movs	r2, r3
   31ca4:	2318      	movs	r3, #24
   31ca6:	2118      	movs	r1, #24
   31ca8:	468c      	mov	ip, r1
   31caa:	44bc      	add	ip, r7
   31cac:	4463      	add	r3, ip
   31cae:	5c9a      	ldrb	r2, [r3, r2]
   31cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31cb2:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   31cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31cb6:	2bff      	cmp	r3, #255	; 0xff
   31cb8:	dd18      	ble.n	31cec <_http_client_request+0x524>
				ptr = buffer;
   31cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31cbc:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31cc0:	2b00      	cmp	r3, #0
   31cc2:	da00      	bge.n	31cc6 <_http_client_request+0x4fe>
   31cc4:	33ff      	adds	r3, #255	; 0xff
   31cc6:	121b      	asrs	r3, r3, #8
   31cc8:	001a      	movs	r2, r3
   31cca:	4b80      	ldr	r3, [pc, #512]	; (31ecc <_http_client_request+0x704>)
   31ccc:	4013      	ands	r3, r2
   31cce:	d504      	bpl.n	31cda <_http_client_request+0x512>
   31cd0:	3b01      	subs	r3, #1
   31cd2:	2210      	movs	r2, #16
   31cd4:	4252      	negs	r2, r2
   31cd6:	4313      	orrs	r3, r2
   31cd8:	3301      	adds	r3, #1
   31cda:	001a      	movs	r2, r3
   31cdc:	2318      	movs	r3, #24
   31cde:	2118      	movs	r1, #24
   31ce0:	468c      	mov	ip, r1
   31ce2:	44bc      	add	ip, r7
   31ce4:	4463      	add	r3, ip
   31ce6:	5c9a      	ldrb	r2, [r3, r2]
   31ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31cea:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   31cec:	69fb      	ldr	r3, [r7, #28]
   31cee:	2000      	movs	r0, #0
   31cf0:	5618      	ldrsb	r0, [r3, r0]
   31cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31cf4:	3303      	adds	r3, #3
   31cf6:	001a      	movs	r2, r3
   31cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31cfa:	1ad3      	subs	r3, r2, r3
   31cfc:	b29a      	uxth	r2, r3
   31cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31d00:	b29b      	uxth	r3, r3
   31d02:	18d3      	adds	r3, r2, r3
   31d04:	b29b      	uxth	r3, r3
   31d06:	3304      	adds	r3, #4
   31d08:	b29a      	uxth	r2, r3
   31d0a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31d0c:	2300      	movs	r3, #0
   31d0e:	4c70      	ldr	r4, [pc, #448]	; (31ed0 <_http_client_request+0x708>)
   31d10:	47a0      	blx	r4
   31d12:	0003      	movs	r3, r0
   31d14:	663b      	str	r3, [r7, #96]	; 0x60
   31d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31d18:	2b00      	cmp	r3, #0
   31d1a:	da07      	bge.n	31d2c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31d1c:	2305      	movs	r3, #5
   31d1e:	425a      	negs	r2, r3
   31d20:	69fb      	ldr	r3, [r7, #28]
   31d22:	0011      	movs	r1, r2
   31d24:	0018      	movs	r0, r3
   31d26:	4b6b      	ldr	r3, [pc, #428]	; (31ed4 <_http_client_request+0x70c>)
   31d28:	4798      	blx	r3
				return;
   31d2a:	e0e1      	b.n	31ef0 <_http_client_request+0x728>
			module->req.sent_length += size;
   31d2c:	69fb      	ldr	r3, [r7, #28]
   31d2e:	22d0      	movs	r2, #208	; 0xd0
   31d30:	589a      	ldr	r2, [r3, r2]
   31d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31d34:	18d2      	adds	r2, r2, r3
   31d36:	69fb      	ldr	r3, [r7, #28]
   31d38:	21d0      	movs	r1, #208	; 0xd0
   31d3a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31d3e:	2b00      	cmp	r3, #0
   31d40:	d000      	beq.n	31d44 <_http_client_request+0x57c>
   31d42:	e0c9      	b.n	31ed8 <_http_client_request+0x710>
				if (module->req.entity.close) {
   31d44:	69fb      	ldr	r3, [r7, #28]
   31d46:	22c0      	movs	r2, #192	; 0xc0
   31d48:	589b      	ldr	r3, [r3, r2]
   31d4a:	2b00      	cmp	r3, #0
   31d4c:	d007      	beq.n	31d5e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31d4e:	69fb      	ldr	r3, [r7, #28]
   31d50:	22c0      	movs	r2, #192	; 0xc0
   31d52:	589b      	ldr	r3, [r3, r2]
   31d54:	69fa      	ldr	r2, [r7, #28]
   31d56:	21c4      	movs	r1, #196	; 0xc4
   31d58:	5852      	ldr	r2, [r2, r1]
   31d5a:	0010      	movs	r0, r2
   31d5c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31d5e:	69fb      	ldr	r3, [r7, #28]
   31d60:	2202      	movs	r2, #2
   31d62:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31d64:	69fb      	ldr	r3, [r7, #28]
   31d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d68:	2b00      	cmp	r3, #0
   31d6a:	d100      	bne.n	31d6e <_http_client_request+0x5a6>
   31d6c:	e0b5      	b.n	31eda <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31d6e:	69fb      	ldr	r3, [r7, #28]
   31d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d72:	220c      	movs	r2, #12
   31d74:	2118      	movs	r1, #24
   31d76:	468c      	mov	ip, r1
   31d78:	44bc      	add	ip, r7
   31d7a:	4462      	add	r2, ip
   31d7c:	69f8      	ldr	r0, [r7, #28]
   31d7e:	2101      	movs	r1, #1
   31d80:	4798      	blx	r3
				break;
   31d82:	e0aa      	b.n	31eda <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   31d84:	69fb      	ldr	r3, [r7, #28]
   31d86:	22cc      	movs	r2, #204	; 0xcc
   31d88:	589b      	ldr	r3, [r3, r2]
   31d8a:	2b00      	cmp	r3, #0
   31d8c:	dc00      	bgt.n	31d90 <_http_client_request+0x5c8>
   31d8e:	e07c      	b.n	31e8a <_http_client_request+0x6c2>
   31d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31d92:	68db      	ldr	r3, [r3, #12]
   31d94:	2b00      	cmp	r3, #0
   31d96:	d100      	bne.n	31d9a <_http_client_request+0x5d2>
   31d98:	e077      	b.n	31e8a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   31d9a:	69fb      	ldr	r3, [r7, #28]
   31d9c:	22d0      	movs	r2, #208	; 0xd0
   31d9e:	589a      	ldr	r2, [r3, r2]
   31da0:	69fb      	ldr	r3, [r7, #28]
   31da2:	21cc      	movs	r1, #204	; 0xcc
   31da4:	585b      	ldr	r3, [r3, r1]
   31da6:	429a      	cmp	r2, r3
   31da8:	db1f      	blt.n	31dea <_http_client_request+0x622>
				if (module->req.entity.close) {
   31daa:	69fb      	ldr	r3, [r7, #28]
   31dac:	22c0      	movs	r2, #192	; 0xc0
   31dae:	589b      	ldr	r3, [r3, r2]
   31db0:	2b00      	cmp	r3, #0
   31db2:	d007      	beq.n	31dc4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   31db4:	69fb      	ldr	r3, [r7, #28]
   31db6:	22c0      	movs	r2, #192	; 0xc0
   31db8:	589b      	ldr	r3, [r3, r2]
   31dba:	69fa      	ldr	r2, [r7, #28]
   31dbc:	21c4      	movs	r1, #196	; 0xc4
   31dbe:	5852      	ldr	r2, [r2, r1]
   31dc0:	0010      	movs	r0, r2
   31dc2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31dc4:	69fb      	ldr	r3, [r7, #28]
   31dc6:	2202      	movs	r2, #2
   31dc8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31dca:	69fb      	ldr	r3, [r7, #28]
   31dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31dce:	2b00      	cmp	r3, #0
   31dd0:	d100      	bne.n	31dd4 <_http_client_request+0x60c>
   31dd2:	e084      	b.n	31ede <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31dd4:	69fb      	ldr	r3, [r7, #28]
   31dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31dd8:	220c      	movs	r2, #12
   31dda:	2118      	movs	r1, #24
   31ddc:	468c      	mov	ip, r1
   31dde:	44bc      	add	ip, r7
   31de0:	4462      	add	r2, ip
   31de2:	69f8      	ldr	r0, [r7, #28]
   31de4:	2101      	movs	r1, #1
   31de6:	4798      	blx	r3
				break;
   31de8:	e079      	b.n	31ede <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   31dea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31dec:	68dc      	ldr	r4, [r3, #12]
   31dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31df0:	6958      	ldr	r0, [r3, #20]
   31df2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31df4:	69fb      	ldr	r3, [r7, #28]
   31df6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31df8:	69fb      	ldr	r3, [r7, #28]
   31dfa:	22d0      	movs	r2, #208	; 0xd0
   31dfc:	589b      	ldr	r3, [r3, r2]
   31dfe:	002a      	movs	r2, r5
   31e00:	47a0      	blx	r4
   31e02:	0003      	movs	r3, r0
   31e04:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e08:	2b00      	cmp	r3, #0
   31e0a:	da0d      	bge.n	31e28 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   31e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e0e:	2b00      	cmp	r3, #0
   31e10:	d102      	bne.n	31e18 <_http_client_request+0x650>
   31e12:	234d      	movs	r3, #77	; 0x4d
   31e14:	425b      	negs	r3, r3
   31e16:	e001      	b.n	31e1c <_http_client_request+0x654>
   31e18:	2305      	movs	r3, #5
   31e1a:	425b      	negs	r3, r3
   31e1c:	69fa      	ldr	r2, [r7, #28]
   31e1e:	0019      	movs	r1, r3
   31e20:	0010      	movs	r0, r2
   31e22:	4b2c      	ldr	r3, [pc, #176]	; (31ed4 <_http_client_request+0x70c>)
   31e24:	4798      	blx	r3
			if (size < 0) {
   31e26:	e057      	b.n	31ed8 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31e28:	69fb      	ldr	r3, [r7, #28]
   31e2a:	22cc      	movs	r2, #204	; 0xcc
   31e2c:	589a      	ldr	r2, [r3, r2]
   31e2e:	69fb      	ldr	r3, [r7, #28]
   31e30:	21d0      	movs	r1, #208	; 0xd0
   31e32:	585b      	ldr	r3, [r3, r1]
   31e34:	1ad2      	subs	r2, r2, r3
   31e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e38:	429a      	cmp	r2, r3
   31e3a:	da07      	bge.n	31e4c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31e3c:	69fb      	ldr	r3, [r7, #28]
   31e3e:	22cc      	movs	r2, #204	; 0xcc
   31e40:	589a      	ldr	r2, [r3, r2]
   31e42:	69fb      	ldr	r3, [r7, #28]
   31e44:	21d0      	movs	r1, #208	; 0xd0
   31e46:	585b      	ldr	r3, [r3, r1]
   31e48:	1ad3      	subs	r3, r2, r3
   31e4a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31e4c:	69fb      	ldr	r3, [r7, #28]
   31e4e:	2000      	movs	r0, #0
   31e50:	5618      	ldrsb	r0, [r3, r0]
   31e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e56:	b29a      	uxth	r2, r3
   31e58:	2300      	movs	r3, #0
   31e5a:	4c1d      	ldr	r4, [pc, #116]	; (31ed0 <_http_client_request+0x708>)
   31e5c:	47a0      	blx	r4
   31e5e:	0003      	movs	r3, r0
   31e60:	663b      	str	r3, [r7, #96]	; 0x60
   31e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31e64:	2b00      	cmp	r3, #0
   31e66:	da07      	bge.n	31e78 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   31e68:	2305      	movs	r3, #5
   31e6a:	425a      	negs	r2, r3
   31e6c:	69fb      	ldr	r3, [r7, #28]
   31e6e:	0011      	movs	r1, r2
   31e70:	0018      	movs	r0, r3
   31e72:	4b18      	ldr	r3, [pc, #96]	; (31ed4 <_http_client_request+0x70c>)
   31e74:	4798      	blx	r3
					return;
   31e76:	e03b      	b.n	31ef0 <_http_client_request+0x728>
				module->req.sent_length += size;
   31e78:	69fb      	ldr	r3, [r7, #28]
   31e7a:	22d0      	movs	r2, #208	; 0xd0
   31e7c:	589a      	ldr	r2, [r3, r2]
   31e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31e80:	18d2      	adds	r2, r2, r3
   31e82:	69fb      	ldr	r3, [r7, #28]
   31e84:	21d0      	movs	r1, #208	; 0xd0
   31e86:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   31e88:	e026      	b.n	31ed8 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   31e8a:	69fb      	ldr	r3, [r7, #28]
   31e8c:	2202      	movs	r2, #2
   31e8e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31e90:	69fb      	ldr	r3, [r7, #28]
   31e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e94:	2b00      	cmp	r3, #0
   31e96:	d024      	beq.n	31ee2 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31e98:	69fb      	ldr	r3, [r7, #28]
   31e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e9c:	220c      	movs	r2, #12
   31e9e:	2118      	movs	r1, #24
   31ea0:	468c      	mov	ip, r1
   31ea2:	44bc      	add	ip, r7
   31ea4:	4462      	add	r2, ip
   31ea6:	69f8      	ldr	r0, [r7, #28]
   31ea8:	2101      	movs	r1, #1
   31eaa:	4798      	blx	r3
			break;
   31eac:	e019      	b.n	31ee2 <_http_client_request+0x71a>
   31eae:	46c0      	nop			; (mov r8, r8)
   31eb0:	0003a308 	.word	0x0003a308
   31eb4:	000350d1 	.word	0x000350d1
   31eb8:	0003a30c 	.word	0x0003a30c
   31ebc:	00032729 	.word	0x00032729
   31ec0:	000351cb 	.word	0x000351cb
   31ec4:	0003a294 	.word	0x0003a294
   31ec8:	00032765 	.word	0x00032765
   31ecc:	8000000f 	.word	0x8000000f
   31ed0:	00025cad 	.word	0x00025cad
   31ed4:	00031675 	.word	0x00031675
		break;
   31ed8:	e004      	b.n	31ee4 <_http_client_request+0x71c>
				break;
   31eda:	46c0      	nop			; (mov r8, r8)
   31edc:	e002      	b.n	31ee4 <_http_client_request+0x71c>
				break;
   31ede:	46c0      	nop			; (mov r8, r8)
   31ee0:	e000      	b.n	31ee4 <_http_client_request+0x71c>
			break;
   31ee2:	46c0      	nop			; (mov r8, r8)
   31ee4:	69bb      	ldr	r3, [r7, #24]
   31ee6:	469d      	mov	sp, r3
   31ee8:	e004      	b.n	31ef4 <_http_client_request+0x72c>
		return;
   31eea:	46c0      	nop			; (mov r8, r8)
   31eec:	e000      	b.n	31ef0 <_http_client_request+0x728>
		return;
   31eee:	46c0      	nop			; (mov r8, r8)
   31ef0:	69bb      	ldr	r3, [r7, #24]
   31ef2:	469d      	mov	sp, r3
	}
}
   31ef4:	46bd      	mov	sp, r7
   31ef6:	b01e      	add	sp, #120	; 0x78
   31ef8:	bc04      	pop	{r2}
   31efa:	4690      	mov	r8, r2
   31efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31efe:	46c0      	nop			; (mov r8, r8)

00031f00 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   31f00:	b590      	push	{r4, r7, lr}
   31f02:	b083      	sub	sp, #12
   31f04:	af00      	add	r7, sp, #0
   31f06:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   31f08:	687b      	ldr	r3, [r7, #4]
   31f0a:	2b00      	cmp	r3, #0
   31f0c:	d021      	beq.n	31f52 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   31f0e:	687b      	ldr	r3, [r7, #4]
   31f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31f12:	687b      	ldr	r3, [r7, #4]
   31f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31f16:	429a      	cmp	r2, r3
   31f18:	d307      	bcc.n	31f2a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   31f1a:	238b      	movs	r3, #139	; 0x8b
   31f1c:	425a      	negs	r2, r3
   31f1e:	687b      	ldr	r3, [r7, #4]
   31f20:	0011      	movs	r1, r2
   31f22:	0018      	movs	r0, r3
   31f24:	4b0d      	ldr	r3, [pc, #52]	; (31f5c <_http_client_recv_packet+0x5c>)
   31f26:	4798      	blx	r3
		return;
   31f28:	e014      	b.n	31f54 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   31f2a:	687b      	ldr	r3, [r7, #4]
   31f2c:	2000      	movs	r0, #0
   31f2e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31f30:	687b      	ldr	r3, [r7, #4]
   31f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31f34:	687b      	ldr	r3, [r7, #4]
   31f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f38:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31f3a:	687b      	ldr	r3, [r7, #4]
   31f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31f3e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31f40:	687b      	ldr	r3, [r7, #4]
   31f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   31f44:	b29b      	uxth	r3, r3
   31f46:	1ad3      	subs	r3, r2, r3
   31f48:	b29a      	uxth	r2, r3
   31f4a:	2300      	movs	r3, #0
   31f4c:	4c04      	ldr	r4, [pc, #16]	; (31f60 <_http_client_recv_packet+0x60>)
   31f4e:	47a0      	blx	r4
   31f50:	e000      	b.n	31f54 <_http_client_recv_packet+0x54>
		return;
   31f52:	46c0      	nop			; (mov r8, r8)
}
   31f54:	46bd      	mov	sp, r7
   31f56:	b003      	add	sp, #12
   31f58:	bd90      	pop	{r4, r7, pc}
   31f5a:	46c0      	nop			; (mov r8, r8)
   31f5c:	00031675 	.word	0x00031675
   31f60:	00025e11 	.word	0x00025e11

00031f64 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   31f64:	b580      	push	{r7, lr}
   31f66:	b082      	sub	sp, #8
   31f68:	af00      	add	r7, sp, #0
   31f6a:	6078      	str	r0, [r7, #4]
   31f6c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31f6e:	687b      	ldr	r3, [r7, #4]
   31f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31f72:	683b      	ldr	r3, [r7, #0]
   31f74:	18d2      	adds	r2, r2, r3
   31f76:	687b      	ldr	r3, [r7, #4]
   31f78:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   31f7a:	687b      	ldr	r3, [r7, #4]
   31f7c:	2258      	movs	r2, #88	; 0x58
   31f7e:	5a9b      	ldrh	r3, [r3, r2]
   31f80:	2b00      	cmp	r3, #0
   31f82:	d007      	beq.n	31f94 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   31f84:	687b      	ldr	r3, [r7, #4]
   31f86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31f88:	687b      	ldr	r3, [r7, #4]
   31f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31f8c:	0019      	movs	r1, r3
   31f8e:	0010      	movs	r0, r2
   31f90:	4b06      	ldr	r3, [pc, #24]	; (31fac <_http_client_recved_packet+0x48>)
   31f92:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   31f94:	46c0      	nop			; (mov r8, r8)
   31f96:	687b      	ldr	r3, [r7, #4]
   31f98:	0018      	movs	r0, r3
   31f9a:	4b05      	ldr	r3, [pc, #20]	; (31fb0 <_http_client_recved_packet+0x4c>)
   31f9c:	4798      	blx	r3
   31f9e:	1e03      	subs	r3, r0, #0
   31fa0:	d1f9      	bne.n	31f96 <_http_client_recved_packet+0x32>
}
   31fa2:	46c0      	nop			; (mov r8, r8)
   31fa4:	46bd      	mov	sp, r7
   31fa6:	b002      	add	sp, #8
   31fa8:	bd80      	pop	{r7, pc}
   31faa:	46c0      	nop			; (mov r8, r8)
   31fac:	00032a21 	.word	0x00032a21
   31fb0:	00031fb5 	.word	0x00031fb5

00031fb4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   31fb4:	b580      	push	{r7, lr}
   31fb6:	b082      	sub	sp, #8
   31fb8:	af00      	add	r7, sp, #0
   31fba:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   31fbc:	687b      	ldr	r3, [r7, #4]
   31fbe:	22d8      	movs	r2, #216	; 0xd8
   31fc0:	589b      	ldr	r3, [r3, r2]
   31fc2:	2b00      	cmp	r3, #0
   31fc4:	d002      	beq.n	31fcc <_http_client_handle_response+0x18>
   31fc6:	2b01      	cmp	r3, #1
   31fc8:	d006      	beq.n	31fd8 <_http_client_handle_response+0x24>
   31fca:	e00b      	b.n	31fe4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   31fcc:	687b      	ldr	r3, [r7, #4]
   31fce:	0018      	movs	r0, r3
   31fd0:	4b07      	ldr	r3, [pc, #28]	; (31ff0 <_http_client_handle_response+0x3c>)
   31fd2:	4798      	blx	r3
   31fd4:	0003      	movs	r3, r0
   31fd6:	e006      	b.n	31fe6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   31fd8:	687b      	ldr	r3, [r7, #4]
   31fda:	0018      	movs	r0, r3
   31fdc:	4b05      	ldr	r3, [pc, #20]	; (31ff4 <_http_client_handle_response+0x40>)
   31fde:	4798      	blx	r3
   31fe0:	0003      	movs	r3, r0
   31fe2:	e000      	b.n	31fe6 <_http_client_handle_response+0x32>
	}
	return 0;
   31fe4:	2300      	movs	r3, #0
}
   31fe6:	0018      	movs	r0, r3
   31fe8:	46bd      	mov	sp, r7
   31fea:	b002      	add	sp, #8
   31fec:	bd80      	pop	{r7, pc}
   31fee:	46c0      	nop			; (mov r8, r8)
   31ff0:	00031ff9 	.word	0x00031ff9
   31ff4:	000324b1 	.word	0x000324b1

00031ff8 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   31ff8:	b590      	push	{r4, r7, lr}
   31ffa:	b08b      	sub	sp, #44	; 0x2c
   31ffc:	af00      	add	r7, sp, #0
   31ffe:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32000:	687b      	ldr	r3, [r7, #4]
   32002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32004:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32006:	4b9a      	ldr	r3, [pc, #616]	; (32270 <_http_client_handle_header+0x278>)
   32008:	681a      	ldr	r2, [r3, #0]
   3200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3200c:	0011      	movs	r1, r2
   3200e:	0018      	movs	r0, r3
   32010:	4b98      	ldr	r3, [pc, #608]	; (32274 <_http_client_handle_header+0x27c>)
   32012:	4798      	blx	r3
   32014:	0003      	movs	r3, r0
   32016:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32018:	69bb      	ldr	r3, [r7, #24]
   3201a:	2b00      	cmp	r3, #0
   3201c:	d007      	beq.n	3202e <_http_client_handle_header+0x36>
   3201e:	687b      	ldr	r3, [r7, #4]
   32020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32022:	687b      	ldr	r3, [r7, #4]
   32024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32026:	18d2      	adds	r2, r2, r3
   32028:	69bb      	ldr	r3, [r7, #24]
   3202a:	429a      	cmp	r2, r3
   3202c:	d807      	bhi.n	3203e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32030:	687b      	ldr	r3, [r7, #4]
   32032:	0011      	movs	r1, r2
   32034:	0018      	movs	r0, r3
   32036:	4b90      	ldr	r3, [pc, #576]	; (32278 <_http_client_handle_header+0x280>)
   32038:	4798      	blx	r3
			return 0;
   3203a:	2300      	movs	r3, #0
   3203c:	e114      	b.n	32268 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3203e:	4b8c      	ldr	r3, [pc, #560]	; (32270 <_http_client_handle_header+0x278>)
   32040:	681c      	ldr	r4, [r3, #0]
   32042:	4b8b      	ldr	r3, [pc, #556]	; (32270 <_http_client_handle_header+0x278>)
   32044:	681b      	ldr	r3, [r3, #0]
   32046:	0018      	movs	r0, r3
   32048:	4b8c      	ldr	r3, [pc, #560]	; (3227c <_http_client_handle_header+0x284>)
   3204a:	4798      	blx	r3
   3204c:	0002      	movs	r2, r0
   3204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32050:	0021      	movs	r1, r4
   32052:	0018      	movs	r0, r3
   32054:	4b8a      	ldr	r3, [pc, #552]	; (32280 <_http_client_handle_header+0x288>)
   32056:	4798      	blx	r3
   32058:	1e03      	subs	r3, r0, #0
   3205a:	d15d      	bne.n	32118 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   3205c:	4b84      	ldr	r3, [pc, #528]	; (32270 <_http_client_handle_header+0x278>)
   3205e:	681b      	ldr	r3, [r3, #0]
   32060:	0018      	movs	r0, r3
   32062:	4b86      	ldr	r3, [pc, #536]	; (3227c <_http_client_handle_header+0x284>)
   32064:	4798      	blx	r3
   32066:	0002      	movs	r2, r0
   32068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3206a:	189a      	adds	r2, r3, r2
   3206c:	687b      	ldr	r3, [r7, #4]
   3206e:	0011      	movs	r1, r2
   32070:	0018      	movs	r0, r3
   32072:	4b81      	ldr	r3, [pc, #516]	; (32278 <_http_client_handle_header+0x280>)
   32074:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32076:	687b      	ldr	r3, [r7, #4]
   32078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3207a:	2b00      	cmp	r3, #0
   3207c:	d046      	beq.n	3210c <_http_client_handle_header+0x114>
   3207e:	687b      	ldr	r3, [r7, #4]
   32080:	22e4      	movs	r2, #228	; 0xe4
   32082:	5a9b      	ldrh	r3, [r3, r2]
   32084:	2b00      	cmp	r3, #0
   32086:	d041      	beq.n	3210c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32088:	687b      	ldr	r3, [r7, #4]
   3208a:	22dc      	movs	r2, #220	; 0xdc
   3208c:	589b      	ldr	r3, [r3, r2]
   3208e:	2b00      	cmp	r3, #0
   32090:	da19      	bge.n	320c6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   32092:	687b      	ldr	r3, [r7, #4]
   32094:	22e4      	movs	r2, #228	; 0xe4
   32096:	5a9a      	ldrh	r2, [r3, r2]
   32098:	230c      	movs	r3, #12
   3209a:	18fb      	adds	r3, r7, r3
   3209c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   3209e:	230c      	movs	r3, #12
   320a0:	18fb      	adds	r3, r7, r3
   320a2:	2201      	movs	r2, #1
   320a4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   320a6:	687b      	ldr	r3, [r7, #4]
   320a8:	22e0      	movs	r2, #224	; 0xe0
   320aa:	2100      	movs	r1, #0
   320ac:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   320ae:	230c      	movs	r3, #12
   320b0:	18fb      	adds	r3, r7, r3
   320b2:	2200      	movs	r2, #0
   320b4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   320b6:	687b      	ldr	r3, [r7, #4]
   320b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   320ba:	220c      	movs	r2, #12
   320bc:	18ba      	adds	r2, r7, r2
   320be:	6878      	ldr	r0, [r7, #4]
   320c0:	2102      	movs	r1, #2
   320c2:	4798      	blx	r3
   320c4:	e022      	b.n	3210c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   320c6:	687b      	ldr	r3, [r7, #4]
   320c8:	22dc      	movs	r2, #220	; 0xdc
   320ca:	589a      	ldr	r2, [r3, r2]
   320cc:	687b      	ldr	r3, [r7, #4]
   320ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   320d0:	429a      	cmp	r2, r3
   320d2:	dd1b      	ble.n	3210c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   320d4:	687b      	ldr	r3, [r7, #4]
   320d6:	22e4      	movs	r2, #228	; 0xe4
   320d8:	5a9a      	ldrh	r2, [r3, r2]
   320da:	230c      	movs	r3, #12
   320dc:	18fb      	adds	r3, r7, r3
   320de:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   320e0:	687b      	ldr	r3, [r7, #4]
   320e2:	22dc      	movs	r2, #220	; 0xdc
   320e4:	589b      	ldr	r3, [r3, r2]
   320e6:	001a      	movs	r2, r3
   320e8:	230c      	movs	r3, #12
   320ea:	18fb      	adds	r3, r7, r3
   320ec:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   320ee:	230c      	movs	r3, #12
   320f0:	18fb      	adds	r3, r7, r3
   320f2:	2200      	movs	r2, #0
   320f4:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   320f6:	687b      	ldr	r3, [r7, #4]
   320f8:	22e0      	movs	r2, #224	; 0xe0
   320fa:	2100      	movs	r1, #0
   320fc:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   320fe:	687b      	ldr	r3, [r7, #4]
   32100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32102:	220c      	movs	r2, #12
   32104:	18ba      	adds	r2, r7, r2
   32106:	6878      	ldr	r0, [r7, #4]
   32108:	2102      	movs	r1, #2
   3210a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   3210c:	687b      	ldr	r3, [r7, #4]
   3210e:	22d8      	movs	r2, #216	; 0xd8
   32110:	2101      	movs	r1, #1
   32112:	5099      	str	r1, [r3, r2]
			return 1;
   32114:	2301      	movs	r3, #1
   32116:	e0a7      	b.n	32268 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32118:	495a      	ldr	r1, [pc, #360]	; (32284 <_http_client_handle_header+0x28c>)
   3211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3211c:	2210      	movs	r2, #16
   3211e:	0018      	movs	r0, r3
   32120:	4b57      	ldr	r3, [pc, #348]	; (32280 <_http_client_handle_header+0x288>)
   32122:	4798      	blx	r3
   32124:	1e03      	subs	r3, r0, #0
   32126:	d109      	bne.n	3213c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3212a:	3310      	adds	r3, #16
   3212c:	0018      	movs	r0, r3
   3212e:	4b56      	ldr	r3, [pc, #344]	; (32288 <_http_client_handle_header+0x290>)
   32130:	4798      	blx	r3
   32132:	0001      	movs	r1, r0
   32134:	687b      	ldr	r3, [r7, #4]
   32136:	22dc      	movs	r2, #220	; 0xdc
   32138:	5099      	str	r1, [r3, r2]
   3213a:	e08b      	b.n	32254 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   3213c:	4953      	ldr	r1, [pc, #332]	; (3228c <_http_client_handle_header+0x294>)
   3213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32140:	2213      	movs	r2, #19
   32142:	0018      	movs	r0, r3
   32144:	4b4e      	ldr	r3, [pc, #312]	; (32280 <_http_client_handle_header+0x288>)
   32146:	4798      	blx	r3
   32148:	1e03      	subs	r3, r0, #0
   3214a:	d127      	bne.n	3219c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   3214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3214e:	3313      	adds	r3, #19
   32150:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32152:	e01e      	b.n	32192 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32154:	6a3b      	ldr	r3, [r7, #32]
   32156:	781b      	ldrb	r3, [r3, #0]
   32158:	2b20      	cmp	r3, #32
   3215a:	d103      	bne.n	32164 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3215c:	6a3b      	ldr	r3, [r7, #32]
   3215e:	3301      	adds	r3, #1
   32160:	623b      	str	r3, [r7, #32]
   32162:	e016      	b.n	32192 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32164:	6a3b      	ldr	r3, [r7, #32]
   32166:	781b      	ldrb	r3, [r3, #0]
   32168:	2b43      	cmp	r3, #67	; 0x43
   3216a:	d003      	beq.n	32174 <_http_client_handle_header+0x17c>
   3216c:	6a3b      	ldr	r3, [r7, #32]
   3216e:	781b      	ldrb	r3, [r3, #0]
   32170:	2b63      	cmp	r3, #99	; 0x63
   32172:	d105      	bne.n	32180 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32174:	687b      	ldr	r3, [r7, #4]
   32176:	21cc      	movs	r1, #204	; 0xcc
   32178:	2201      	movs	r2, #1
   3217a:	4252      	negs	r2, r2
   3217c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   3217e:	e069      	b.n	32254 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32180:	2386      	movs	r3, #134	; 0x86
   32182:	425a      	negs	r2, r3
   32184:	687b      	ldr	r3, [r7, #4]
   32186:	0011      	movs	r1, r2
   32188:	0018      	movs	r0, r3
   3218a:	4b41      	ldr	r3, [pc, #260]	; (32290 <_http_client_handle_header+0x298>)
   3218c:	4798      	blx	r3
					return 0;
   3218e:	2300      	movs	r3, #0
   32190:	e06a      	b.n	32268 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32192:	69ba      	ldr	r2, [r7, #24]
   32194:	6a3b      	ldr	r3, [r7, #32]
   32196:	429a      	cmp	r2, r3
   32198:	d8dc      	bhi.n	32154 <_http_client_handle_header+0x15c>
   3219a:	e05b      	b.n	32254 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   3219c:	493d      	ldr	r1, [pc, #244]	; (32294 <_http_client_handle_header+0x29c>)
   3219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   321a0:	220c      	movs	r2, #12
   321a2:	0018      	movs	r0, r3
   321a4:	4b36      	ldr	r3, [pc, #216]	; (32280 <_http_client_handle_header+0x288>)
   321a6:	4798      	blx	r3
   321a8:	1e03      	subs	r3, r0, #0
   321aa:	d126      	bne.n	321fa <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   321ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   321ae:	330c      	adds	r3, #12
   321b0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   321b2:	e01d      	b.n	321f0 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   321b4:	69fb      	ldr	r3, [r7, #28]
   321b6:	781b      	ldrb	r3, [r3, #0]
   321b8:	2b20      	cmp	r3, #32
   321ba:	d103      	bne.n	321c4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   321bc:	69fb      	ldr	r3, [r7, #28]
   321be:	3301      	adds	r3, #1
   321c0:	61fb      	str	r3, [r7, #28]
   321c2:	e015      	b.n	321f0 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   321c4:	69fb      	ldr	r3, [r7, #28]
   321c6:	781b      	ldrb	r3, [r3, #0]
   321c8:	2b4b      	cmp	r3, #75	; 0x4b
   321ca:	d003      	beq.n	321d4 <_http_client_handle_header+0x1dc>
   321cc:	69fb      	ldr	r3, [r7, #28]
   321ce:	781b      	ldrb	r3, [r3, #0]
   321d0:	2b6b      	cmp	r3, #107	; 0x6b
   321d2:	d106      	bne.n	321e2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   321d4:	687b      	ldr	r3, [r7, #4]
   321d6:	2241      	movs	r2, #65	; 0x41
   321d8:	5c99      	ldrb	r1, [r3, r2]
   321da:	2002      	movs	r0, #2
   321dc:	4301      	orrs	r1, r0
   321de:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   321e0:	e038      	b.n	32254 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   321e2:	687b      	ldr	r3, [r7, #4]
   321e4:	2241      	movs	r2, #65	; 0x41
   321e6:	5c99      	ldrb	r1, [r3, r2]
   321e8:	2002      	movs	r0, #2
   321ea:	4381      	bics	r1, r0
   321ec:	5499      	strb	r1, [r3, r2]
				break;
   321ee:	e031      	b.n	32254 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   321f0:	69ba      	ldr	r2, [r7, #24]
   321f2:	69fb      	ldr	r3, [r7, #28]
   321f4:	429a      	cmp	r2, r3
   321f6:	d8dd      	bhi.n	321b4 <_http_client_handle_header+0x1bc>
   321f8:	e02c      	b.n	32254 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   321fa:	4927      	ldr	r1, [pc, #156]	; (32298 <_http_client_handle_header+0x2a0>)
   321fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   321fe:	2205      	movs	r2, #5
   32200:	0018      	movs	r0, r3
   32202:	4b1f      	ldr	r3, [pc, #124]	; (32280 <_http_client_handle_header+0x288>)
   32204:	4798      	blx	r3
   32206:	1e03      	subs	r3, r0, #0
   32208:	d124      	bne.n	32254 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   3220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3220c:	3309      	adds	r3, #9
   3220e:	0018      	movs	r0, r3
   32210:	4b1d      	ldr	r3, [pc, #116]	; (32288 <_http_client_handle_header+0x290>)
   32212:	4798      	blx	r3
   32214:	0003      	movs	r3, r0
   32216:	b299      	uxth	r1, r3
   32218:	687b      	ldr	r3, [r7, #4]
   3221a:	22e4      	movs	r2, #228	; 0xe4
   3221c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3221e:	687b      	ldr	r3, [r7, #4]
   32220:	22dc      	movs	r2, #220	; 0xdc
   32222:	2100      	movs	r1, #0
   32224:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32228:	3305      	adds	r3, #5
   3222a:	781b      	ldrb	r3, [r3, #0]
   3222c:	2b31      	cmp	r3, #49	; 0x31
   3222e:	d804      	bhi.n	3223a <_http_client_handle_header+0x242>
   32230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32232:	3307      	adds	r3, #7
   32234:	781b      	ldrb	r3, [r3, #0]
   32236:	2b30      	cmp	r3, #48	; 0x30
   32238:	d906      	bls.n	32248 <_http_client_handle_header+0x250>
				module->permanent = 1;
   3223a:	687b      	ldr	r3, [r7, #4]
   3223c:	2241      	movs	r2, #65	; 0x41
   3223e:	5c99      	ldrb	r1, [r3, r2]
   32240:	2002      	movs	r0, #2
   32242:	4301      	orrs	r1, r0
   32244:	5499      	strb	r1, [r3, r2]
   32246:	e005      	b.n	32254 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32248:	687b      	ldr	r3, [r7, #4]
   3224a:	2241      	movs	r2, #65	; 0x41
   3224c:	5c99      	ldrb	r1, [r3, r2]
   3224e:	2002      	movs	r0, #2
   32250:	4381      	bics	r1, r0
   32252:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32254:	4b06      	ldr	r3, [pc, #24]	; (32270 <_http_client_handle_header+0x278>)
   32256:	681b      	ldr	r3, [r3, #0]
   32258:	0018      	movs	r0, r3
   3225a:	4b08      	ldr	r3, [pc, #32]	; (3227c <_http_client_handle_header+0x284>)
   3225c:	4798      	blx	r3
   3225e:	0002      	movs	r2, r0
   32260:	69bb      	ldr	r3, [r7, #24]
   32262:	189b      	adds	r3, r3, r2
   32264:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32266:	e6ce      	b.n	32006 <_http_client_handle_header+0xe>
	}
}
   32268:	0018      	movs	r0, r3
   3226a:	46bd      	mov	sp, r7
   3226c:	b00b      	add	sp, #44	; 0x2c
   3226e:	bd90      	pop	{r4, r7, pc}
   32270:	2000012c 	.word	0x2000012c
   32274:	00035249 	.word	0x00035249
   32278:	0003265d 	.word	0x0003265d
   3227c:	000351cb 	.word	0x000351cb
   32280:	000351d9 	.word	0x000351d9
   32284:	0003a30c 	.word	0x0003a30c
   32288:	00034d61 	.word	0x00034d61
   3228c:	0003a330 	.word	0x0003a330
   32290:	00031675 	.word	0x00031675
   32294:	0003a344 	.word	0x0003a344
   32298:	0003a354 	.word	0x0003a354

0003229c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   3229c:	b580      	push	{r7, lr}
   3229e:	b088      	sub	sp, #32
   322a0:	af00      	add	r7, sp, #0
   322a2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   322a4:	687b      	ldr	r3, [r7, #4]
   322a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   322a8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   322aa:	2300      	movs	r3, #0
   322ac:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   322ae:	687b      	ldr	r3, [r7, #4]
   322b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   322b2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   322b4:	687b      	ldr	r3, [r7, #4]
   322b6:	22e0      	movs	r2, #224	; 0xe0
   322b8:	589b      	ldr	r3, [r3, r2]
   322ba:	2b00      	cmp	r3, #0
   322bc:	db71      	blt.n	323a2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   322be:	687b      	ldr	r3, [r7, #4]
   322c0:	22e0      	movs	r2, #224	; 0xe0
   322c2:	589b      	ldr	r3, [r3, r2]
   322c4:	2b00      	cmp	r3, #0
   322c6:	d134      	bne.n	32332 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   322c8:	687b      	ldr	r3, [r7, #4]
   322ca:	22d8      	movs	r2, #216	; 0xd8
   322cc:	2100      	movs	r1, #0
   322ce:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   322d0:	687b      	ldr	r3, [r7, #4]
   322d2:	22e4      	movs	r2, #228	; 0xe4
   322d4:	2100      	movs	r1, #0
   322d6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   322d8:	2308      	movs	r3, #8
   322da:	18fb      	adds	r3, r7, r3
   322dc:	2201      	movs	r2, #1
   322de:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   322e0:	2308      	movs	r3, #8
   322e2:	18fb      	adds	r3, r7, r3
   322e4:	2200      	movs	r2, #0
   322e6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   322e8:	2308      	movs	r3, #8
   322ea:	18fb      	adds	r3, r7, r3
   322ec:	2200      	movs	r2, #0
   322ee:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   322f0:	687b      	ldr	r3, [r7, #4]
   322f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   322f4:	2b00      	cmp	r3, #0
   322f6:	d006      	beq.n	32306 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   322f8:	687b      	ldr	r3, [r7, #4]
   322fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   322fc:	2208      	movs	r2, #8
   322fe:	18ba      	adds	r2, r7, r2
   32300:	6878      	ldr	r0, [r7, #4]
   32302:	2103      	movs	r1, #3
   32304:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32306:	687b      	ldr	r3, [r7, #4]
   32308:	2241      	movs	r2, #65	; 0x41
   3230a:	5c9b      	ldrb	r3, [r3, r2]
   3230c:	2202      	movs	r2, #2
   3230e:	4013      	ands	r3, r2
   32310:	b2db      	uxtb	r3, r3
   32312:	2b00      	cmp	r3, #0
   32314:	d105      	bne.n	32322 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32316:	687b      	ldr	r3, [r7, #4]
   32318:	2100      	movs	r1, #0
   3231a:	0018      	movs	r0, r3
   3231c:	4b62      	ldr	r3, [pc, #392]	; (324a8 <_http_client_read_chuked_entity+0x20c>)
   3231e:	4798      	blx	r3
					return;
   32320:	e0bf      	b.n	324a2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32322:	697b      	ldr	r3, [r7, #20]
   32324:	1c9a      	adds	r2, r3, #2
   32326:	687b      	ldr	r3, [r7, #4]
   32328:	0011      	movs	r1, r2
   3232a:	0018      	movs	r0, r3
   3232c:	4b5f      	ldr	r3, [pc, #380]	; (324ac <_http_client_read_chuked_entity+0x210>)
   3232e:	4798      	blx	r3
   32330:	e0b2      	b.n	32498 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32332:	687b      	ldr	r3, [r7, #4]
   32334:	22e0      	movs	r2, #224	; 0xe0
   32336:	589a      	ldr	r2, [r3, r2]
   32338:	69fb      	ldr	r3, [r7, #28]
   3233a:	429a      	cmp	r2, r3
   3233c:	dd00      	ble.n	32340 <_http_client_read_chuked_entity+0xa4>
   3233e:	e0ab      	b.n	32498 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32340:	687b      	ldr	r3, [r7, #4]
   32342:	22e0      	movs	r2, #224	; 0xe0
   32344:	589b      	ldr	r3, [r3, r2]
   32346:	001a      	movs	r2, r3
   32348:	2308      	movs	r3, #8
   3234a:	18fb      	adds	r3, r7, r3
   3234c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   3234e:	2308      	movs	r3, #8
   32350:	18fb      	adds	r3, r7, r3
   32352:	697a      	ldr	r2, [r7, #20]
   32354:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32356:	2308      	movs	r3, #8
   32358:	18fb      	adds	r3, r7, r3
   3235a:	2200      	movs	r2, #0
   3235c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   3235e:	687b      	ldr	r3, [r7, #4]
   32360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32362:	2b00      	cmp	r3, #0
   32364:	d006      	beq.n	32374 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32366:	687b      	ldr	r3, [r7, #4]
   32368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3236a:	2208      	movs	r2, #8
   3236c:	18ba      	adds	r2, r7, r2
   3236e:	6878      	ldr	r0, [r7, #4]
   32370:	2103      	movs	r1, #3
   32372:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32374:	687b      	ldr	r3, [r7, #4]
   32376:	22e0      	movs	r2, #224	; 0xe0
   32378:	589b      	ldr	r3, [r3, r2]
   3237a:	3302      	adds	r3, #2
   3237c:	697a      	ldr	r2, [r7, #20]
   3237e:	18d2      	adds	r2, r2, r3
   32380:	687b      	ldr	r3, [r7, #4]
   32382:	0011      	movs	r1, r2
   32384:	0018      	movs	r0, r3
   32386:	4b49      	ldr	r3, [pc, #292]	; (324ac <_http_client_read_chuked_entity+0x210>)
   32388:	4798      	blx	r3
				length = (int)module->recved_size;
   3238a:	687b      	ldr	r3, [r7, #4]
   3238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3238e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32390:	687b      	ldr	r3, [r7, #4]
   32392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32394:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32396:	687b      	ldr	r3, [r7, #4]
   32398:	21e0      	movs	r1, #224	; 0xe0
   3239a:	2201      	movs	r2, #1
   3239c:	4252      	negs	r2, r2
   3239e:	505a      	str	r2, [r3, r1]
   323a0:	e07a      	b.n	32498 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   323a2:	687b      	ldr	r3, [r7, #4]
   323a4:	22e0      	movs	r2, #224	; 0xe0
   323a6:	2100      	movs	r1, #0
   323a8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   323aa:	e05a      	b.n	32462 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   323ac:	697b      	ldr	r3, [r7, #20]
   323ae:	781b      	ldrb	r3, [r3, #0]
   323b0:	2b0a      	cmp	r3, #10
   323b2:	d106      	bne.n	323c2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   323b4:	697b      	ldr	r3, [r7, #20]
   323b6:	3301      	adds	r3, #1
   323b8:	617b      	str	r3, [r7, #20]
					length--;
   323ba:	69fb      	ldr	r3, [r7, #28]
   323bc:	3b01      	subs	r3, #1
   323be:	61fb      	str	r3, [r7, #28]
					break;
   323c0:	e052      	b.n	32468 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   323c2:	69bb      	ldr	r3, [r7, #24]
   323c4:	2b00      	cmp	r3, #0
   323c6:	d145      	bne.n	32454 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   323c8:	697b      	ldr	r3, [r7, #20]
   323ca:	781b      	ldrb	r3, [r3, #0]
   323cc:	2b2f      	cmp	r3, #47	; 0x2f
   323ce:	d910      	bls.n	323f2 <_http_client_read_chuked_entity+0x156>
   323d0:	697b      	ldr	r3, [r7, #20]
   323d2:	781b      	ldrb	r3, [r3, #0]
   323d4:	2b39      	cmp	r3, #57	; 0x39
   323d6:	d80c      	bhi.n	323f2 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   323d8:	687b      	ldr	r3, [r7, #4]
   323da:	22e0      	movs	r2, #224	; 0xe0
   323dc:	589b      	ldr	r3, [r3, r2]
   323de:	011b      	lsls	r3, r3, #4
   323e0:	697a      	ldr	r2, [r7, #20]
   323e2:	7812      	ldrb	r2, [r2, #0]
   323e4:	189b      	adds	r3, r3, r2
   323e6:	3b30      	subs	r3, #48	; 0x30
   323e8:	001a      	movs	r2, r3
   323ea:	687b      	ldr	r3, [r7, #4]
   323ec:	21e0      	movs	r1, #224	; 0xe0
   323ee:	505a      	str	r2, [r3, r1]
   323f0:	e031      	b.n	32456 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   323f2:	697b      	ldr	r3, [r7, #20]
   323f4:	781b      	ldrb	r3, [r3, #0]
   323f6:	2b60      	cmp	r3, #96	; 0x60
   323f8:	d910      	bls.n	3241c <_http_client_read_chuked_entity+0x180>
   323fa:	697b      	ldr	r3, [r7, #20]
   323fc:	781b      	ldrb	r3, [r3, #0]
   323fe:	2b66      	cmp	r3, #102	; 0x66
   32400:	d80c      	bhi.n	3241c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32402:	687b      	ldr	r3, [r7, #4]
   32404:	22e0      	movs	r2, #224	; 0xe0
   32406:	589b      	ldr	r3, [r3, r2]
   32408:	011b      	lsls	r3, r3, #4
   3240a:	697a      	ldr	r2, [r7, #20]
   3240c:	7812      	ldrb	r2, [r2, #0]
   3240e:	189b      	adds	r3, r3, r2
   32410:	3b61      	subs	r3, #97	; 0x61
   32412:	001a      	movs	r2, r3
   32414:	687b      	ldr	r3, [r7, #4]
   32416:	21e0      	movs	r1, #224	; 0xe0
   32418:	505a      	str	r2, [r3, r1]
   3241a:	e01c      	b.n	32456 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   3241c:	697b      	ldr	r3, [r7, #20]
   3241e:	781b      	ldrb	r3, [r3, #0]
   32420:	2b40      	cmp	r3, #64	; 0x40
   32422:	d910      	bls.n	32446 <_http_client_read_chuked_entity+0x1aa>
   32424:	697b      	ldr	r3, [r7, #20]
   32426:	781b      	ldrb	r3, [r3, #0]
   32428:	2b46      	cmp	r3, #70	; 0x46
   3242a:	d80c      	bhi.n	32446 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   3242c:	687b      	ldr	r3, [r7, #4]
   3242e:	22e0      	movs	r2, #224	; 0xe0
   32430:	589b      	ldr	r3, [r3, r2]
   32432:	011b      	lsls	r3, r3, #4
   32434:	697a      	ldr	r2, [r7, #20]
   32436:	7812      	ldrb	r2, [r2, #0]
   32438:	189b      	adds	r3, r3, r2
   3243a:	3b41      	subs	r3, #65	; 0x41
   3243c:	001a      	movs	r2, r3
   3243e:	687b      	ldr	r3, [r7, #4]
   32440:	21e0      	movs	r1, #224	; 0xe0
   32442:	505a      	str	r2, [r3, r1]
   32444:	e007      	b.n	32456 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32446:	697b      	ldr	r3, [r7, #20]
   32448:	781b      	ldrb	r3, [r3, #0]
   3244a:	2b3b      	cmp	r3, #59	; 0x3b
   3244c:	d103      	bne.n	32456 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   3244e:	2301      	movs	r3, #1
   32450:	61bb      	str	r3, [r7, #24]
   32452:	e000      	b.n	32456 <_http_client_read_chuked_entity+0x1ba>
					continue;
   32454:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32456:	697b      	ldr	r3, [r7, #20]
   32458:	3301      	adds	r3, #1
   3245a:	617b      	str	r3, [r7, #20]
   3245c:	69fb      	ldr	r3, [r7, #28]
   3245e:	3b01      	subs	r3, #1
   32460:	61fb      	str	r3, [r7, #28]
   32462:	69fb      	ldr	r3, [r7, #28]
   32464:	2b00      	cmp	r3, #0
   32466:	dca1      	bgt.n	323ac <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32468:	687b      	ldr	r3, [r7, #4]
   3246a:	22e0      	movs	r2, #224	; 0xe0
   3246c:	589a      	ldr	r2, [r3, r2]
   3246e:	687b      	ldr	r3, [r7, #4]
   32470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32472:	429a      	cmp	r2, r3
   32474:	dd07      	ble.n	32486 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32476:	238b      	movs	r3, #139	; 0x8b
   32478:	425a      	negs	r2, r3
   3247a:	687b      	ldr	r3, [r7, #4]
   3247c:	0011      	movs	r1, r2
   3247e:	0018      	movs	r0, r3
   32480:	4b09      	ldr	r3, [pc, #36]	; (324a8 <_http_client_read_chuked_entity+0x20c>)
   32482:	4798      	blx	r3
				return;
   32484:	e00d      	b.n	324a2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32486:	69fb      	ldr	r3, [r7, #28]
   32488:	2b00      	cmp	r3, #0
   3248a:	d105      	bne.n	32498 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   3248c:	687b      	ldr	r3, [r7, #4]
   3248e:	21e0      	movs	r1, #224	; 0xe0
   32490:	2201      	movs	r2, #1
   32492:	4252      	negs	r2, r2
   32494:	505a      	str	r2, [r3, r1]
				return;
   32496:	e004      	b.n	324a2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32498:	687b      	ldr	r3, [r7, #4]
   3249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3249c:	2b00      	cmp	r3, #0
   3249e:	d000      	beq.n	324a2 <_http_client_read_chuked_entity+0x206>
   324a0:	e708      	b.n	322b4 <_http_client_read_chuked_entity+0x18>
}
   324a2:	46bd      	mov	sp, r7
   324a4:	b008      	add	sp, #32
   324a6:	bd80      	pop	{r7, pc}
   324a8:	00031675 	.word	0x00031675
   324ac:	0003265d 	.word	0x0003265d

000324b0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   324b0:	b580      	push	{r7, lr}
   324b2:	b086      	sub	sp, #24
   324b4:	af00      	add	r7, sp, #0
   324b6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   324b8:	687b      	ldr	r3, [r7, #4]
   324ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   324bc:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   324be:	687b      	ldr	r3, [r7, #4]
   324c0:	22dc      	movs	r2, #220	; 0xdc
   324c2:	589b      	ldr	r3, [r3, r2]
   324c4:	2b00      	cmp	r3, #0
   324c6:	db58      	blt.n	3257a <_http_client_handle_entity+0xca>
   324c8:	687b      	ldr	r3, [r7, #4]
   324ca:	22dc      	movs	r2, #220	; 0xdc
   324cc:	589a      	ldr	r2, [r3, r2]
   324ce:	687b      	ldr	r3, [r7, #4]
   324d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   324d2:	429a      	cmp	r2, r3
   324d4:	dc51      	bgt.n	3257a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   324d6:	687b      	ldr	r3, [r7, #4]
   324d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   324da:	0019      	movs	r1, r3
   324dc:	687b      	ldr	r3, [r7, #4]
   324de:	22dc      	movs	r2, #220	; 0xdc
   324e0:	589b      	ldr	r3, [r3, r2]
   324e2:	4299      	cmp	r1, r3
   324e4:	da00      	bge.n	324e8 <_http_client_handle_entity+0x38>
   324e6:	e0a9      	b.n	3263c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   324e8:	687b      	ldr	r3, [r7, #4]
   324ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   324ec:	2b00      	cmp	r3, #0
   324ee:	d020      	beq.n	32532 <_http_client_handle_entity+0x82>
   324f0:	687b      	ldr	r3, [r7, #4]
   324f2:	22e4      	movs	r2, #228	; 0xe4
   324f4:	5a9b      	ldrh	r3, [r3, r2]
   324f6:	2b00      	cmp	r3, #0
   324f8:	d01b      	beq.n	32532 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   324fa:	687b      	ldr	r3, [r7, #4]
   324fc:	22e4      	movs	r2, #228	; 0xe4
   324fe:	5a9a      	ldrh	r2, [r3, r2]
   32500:	2308      	movs	r3, #8
   32502:	18fb      	adds	r3, r7, r3
   32504:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32506:	2308      	movs	r3, #8
   32508:	18fb      	adds	r3, r7, r3
   3250a:	2200      	movs	r2, #0
   3250c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   3250e:	687b      	ldr	r3, [r7, #4]
   32510:	22dc      	movs	r2, #220	; 0xdc
   32512:	589b      	ldr	r3, [r3, r2]
   32514:	001a      	movs	r2, r3
   32516:	2308      	movs	r3, #8
   32518:	18fb      	adds	r3, r7, r3
   3251a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   3251c:	2308      	movs	r3, #8
   3251e:	18fb      	adds	r3, r7, r3
   32520:	697a      	ldr	r2, [r7, #20]
   32522:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32524:	687b      	ldr	r3, [r7, #4]
   32526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32528:	2208      	movs	r2, #8
   3252a:	18ba      	adds	r2, r7, r2
   3252c:	6878      	ldr	r0, [r7, #4]
   3252e:	2102      	movs	r1, #2
   32530:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32532:	687b      	ldr	r3, [r7, #4]
   32534:	22d8      	movs	r2, #216	; 0xd8
   32536:	2100      	movs	r1, #0
   32538:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   3253a:	687b      	ldr	r3, [r7, #4]
   3253c:	22e4      	movs	r2, #228	; 0xe4
   3253e:	2100      	movs	r1, #0
   32540:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32542:	687b      	ldr	r3, [r7, #4]
   32544:	2241      	movs	r2, #65	; 0x41
   32546:	5c9b      	ldrb	r3, [r3, r2]
   32548:	2202      	movs	r2, #2
   3254a:	4013      	ands	r3, r2
   3254c:	b2db      	uxtb	r3, r3
   3254e:	2b00      	cmp	r3, #0
   32550:	d105      	bne.n	3255e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32552:	687b      	ldr	r3, [r7, #4]
   32554:	2100      	movs	r1, #0
   32556:	0018      	movs	r0, r3
   32558:	4b3b      	ldr	r3, [pc, #236]	; (32648 <_http_client_handle_entity+0x198>)
   3255a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   3255c:	e06e      	b.n	3263c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   3255e:	687b      	ldr	r3, [r7, #4]
   32560:	22dc      	movs	r2, #220	; 0xdc
   32562:	589b      	ldr	r3, [r3, r2]
   32564:	001a      	movs	r2, r3
   32566:	697b      	ldr	r3, [r7, #20]
   32568:	189a      	adds	r2, r3, r2
   3256a:	687b      	ldr	r3, [r7, #4]
   3256c:	0011      	movs	r1, r2
   3256e:	0018      	movs	r0, r3
   32570:	4b36      	ldr	r3, [pc, #216]	; (3264c <_http_client_handle_entity+0x19c>)
   32572:	4798      	blx	r3
				return module->recved_size;
   32574:	687b      	ldr	r3, [r7, #4]
   32576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32578:	e061      	b.n	3263e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   3257a:	687b      	ldr	r3, [r7, #4]
   3257c:	22dc      	movs	r2, #220	; 0xdc
   3257e:	589b      	ldr	r3, [r3, r2]
   32580:	2b00      	cmp	r3, #0
   32582:	db57      	blt.n	32634 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32584:	687b      	ldr	r3, [r7, #4]
   32586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32588:	2308      	movs	r3, #8
   3258a:	18fb      	adds	r3, r7, r3
   3258c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   3258e:	2308      	movs	r3, #8
   32590:	18fb      	adds	r3, r7, r3
   32592:	697a      	ldr	r2, [r7, #20]
   32594:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32596:	687b      	ldr	r3, [r7, #4]
   32598:	22e0      	movs	r2, #224	; 0xe0
   3259a:	589a      	ldr	r2, [r3, r2]
   3259c:	687b      	ldr	r3, [r7, #4]
   3259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   325a0:	18d2      	adds	r2, r2, r3
   325a2:	687b      	ldr	r3, [r7, #4]
   325a4:	21e0      	movs	r1, #224	; 0xe0
   325a6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   325a8:	687b      	ldr	r3, [r7, #4]
   325aa:	22dc      	movs	r2, #220	; 0xdc
   325ac:	589a      	ldr	r2, [r3, r2]
   325ae:	687b      	ldr	r3, [r7, #4]
   325b0:	21e0      	movs	r1, #224	; 0xe0
   325b2:	585b      	ldr	r3, [r3, r1]
   325b4:	429a      	cmp	r2, r3
   325b6:	dc0c      	bgt.n	325d2 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   325b8:	687b      	ldr	r3, [r7, #4]
   325ba:	22d8      	movs	r2, #216	; 0xd8
   325bc:	2100      	movs	r1, #0
   325be:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   325c0:	687b      	ldr	r3, [r7, #4]
   325c2:	22e4      	movs	r2, #228	; 0xe4
   325c4:	2100      	movs	r1, #0
   325c6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   325c8:	2308      	movs	r3, #8
   325ca:	18fb      	adds	r3, r7, r3
   325cc:	2201      	movs	r2, #1
   325ce:	721a      	strb	r2, [r3, #8]
   325d0:	e003      	b.n	325da <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   325d2:	2308      	movs	r3, #8
   325d4:	18fb      	adds	r3, r7, r3
   325d6:	2200      	movs	r2, #0
   325d8:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   325da:	687b      	ldr	r3, [r7, #4]
   325dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325de:	2b00      	cmp	r3, #0
   325e0:	d006      	beq.n	325f0 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   325e2:	687b      	ldr	r3, [r7, #4]
   325e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325e6:	2208      	movs	r2, #8
   325e8:	18ba      	adds	r2, r7, r2
   325ea:	6878      	ldr	r0, [r7, #4]
   325ec:	2103      	movs	r1, #3
   325ee:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   325f0:	2308      	movs	r3, #8
   325f2:	18fb      	adds	r3, r7, r3
   325f4:	7a1b      	ldrb	r3, [r3, #8]
   325f6:	2b01      	cmp	r3, #1
   325f8:	d112      	bne.n	32620 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   325fa:	687b      	ldr	r3, [r7, #4]
   325fc:	2241      	movs	r2, #65	; 0x41
   325fe:	5c9b      	ldrb	r3, [r3, r2]
   32600:	2202      	movs	r2, #2
   32602:	4013      	ands	r3, r2
   32604:	b2db      	uxtb	r3, r3
   32606:	2b00      	cmp	r3, #0
   32608:	d10a      	bne.n	32620 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   3260a:	4b11      	ldr	r3, [pc, #68]	; (32650 <_http_client_handle_entity+0x1a0>)
   3260c:	0018      	movs	r0, r3
   3260e:	4b11      	ldr	r3, [pc, #68]	; (32654 <_http_client_handle_entity+0x1a4>)
   32610:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32612:	687b      	ldr	r3, [r7, #4]
   32614:	2100      	movs	r1, #0
   32616:	0018      	movs	r0, r3
   32618:	4b0b      	ldr	r3, [pc, #44]	; (32648 <_http_client_handle_entity+0x198>)
   3261a:	4798      	blx	r3
					return 0;
   3261c:	2300      	movs	r3, #0
   3261e:	e00e      	b.n	3263e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32620:	687b      	ldr	r3, [r7, #4]
   32622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32624:	697a      	ldr	r2, [r7, #20]
   32626:	18d2      	adds	r2, r2, r3
   32628:	687b      	ldr	r3, [r7, #4]
   3262a:	0011      	movs	r1, r2
   3262c:	0018      	movs	r0, r3
   3262e:	4b07      	ldr	r3, [pc, #28]	; (3264c <_http_client_handle_entity+0x19c>)
   32630:	4798      	blx	r3
   32632:	e003      	b.n	3263c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32634:	687b      	ldr	r3, [r7, #4]
   32636:	0018      	movs	r0, r3
   32638:	4b07      	ldr	r3, [pc, #28]	; (32658 <_http_client_handle_entity+0x1a8>)
   3263a:	4798      	blx	r3
		}
	}

	return 0;
   3263c:	2300      	movs	r3, #0
}
   3263e:	0018      	movs	r0, r3
   32640:	46bd      	mov	sp, r7
   32642:	b006      	add	sp, #24
   32644:	bd80      	pop	{r7, pc}
   32646:	46c0      	nop			; (mov r8, r8)
   32648:	00031675 	.word	0x00031675
   3264c:	0003265d 	.word	0x0003265d
   32650:	0003a35c 	.word	0x0003a35c
   32654:	00035035 	.word	0x00035035
   32658:	0003229d 	.word	0x0003229d

0003265c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   3265c:	b580      	push	{r7, lr}
   3265e:	b084      	sub	sp, #16
   32660:	af00      	add	r7, sp, #0
   32662:	6078      	str	r0, [r7, #4]
   32664:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32666:	687b      	ldr	r3, [r7, #4]
   32668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3266a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   3266c:	687b      	ldr	r3, [r7, #4]
   3266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32670:	001a      	movs	r2, r3
   32672:	683b      	ldr	r3, [r7, #0]
   32674:	1ad2      	subs	r2, r2, r3
   32676:	68fb      	ldr	r3, [r7, #12]
   32678:	18d3      	adds	r3, r2, r3
   3267a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   3267c:	68bb      	ldr	r3, [r7, #8]
   3267e:	2b00      	cmp	r3, #0
   32680:	dd09      	ble.n	32696 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32682:	68ba      	ldr	r2, [r7, #8]
   32684:	6839      	ldr	r1, [r7, #0]
   32686:	68fb      	ldr	r3, [r7, #12]
   32688:	0018      	movs	r0, r3
   3268a:	4b06      	ldr	r3, [pc, #24]	; (326a4 <_http_client_move_buffer+0x48>)
   3268c:	4798      	blx	r3
		module->recved_size = remain;
   3268e:	68ba      	ldr	r2, [r7, #8]
   32690:	687b      	ldr	r3, [r7, #4]
   32692:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32694:	e002      	b.n	3269c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32696:	687b      	ldr	r3, [r7, #4]
   32698:	2200      	movs	r2, #0
   3269a:	645a      	str	r2, [r3, #68]	; 0x44
}
   3269c:	46c0      	nop			; (mov r8, r8)
   3269e:	46bd      	mov	sp, r7
   326a0:	b004      	add	sp, #16
   326a2:	bd80      	pop	{r7, pc}
   326a4:	00034def 	.word	0x00034def

000326a8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   326a8:	b580      	push	{r7, lr}
   326aa:	b084      	sub	sp, #16
   326ac:	af00      	add	r7, sp, #0
   326ae:	60f8      	str	r0, [r7, #12]
   326b0:	60b9      	str	r1, [r7, #8]
   326b2:	607a      	str	r2, [r7, #4]
   326b4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   326b6:	68fb      	ldr	r3, [r7, #12]
   326b8:	687a      	ldr	r2, [r7, #4]
   326ba:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   326bc:	68fb      	ldr	r3, [r7, #12]
   326be:	68ba      	ldr	r2, [r7, #8]
   326c0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   326c2:	68fb      	ldr	r3, [r7, #12]
   326c4:	2200      	movs	r2, #0
   326c6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   326c8:	68fb      	ldr	r3, [r7, #12]
   326ca:	683a      	ldr	r2, [r7, #0]
   326cc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   326ce:	68fb      	ldr	r3, [r7, #12]
   326d0:	69ba      	ldr	r2, [r7, #24]
   326d2:	60da      	str	r2, [r3, #12]
}
   326d4:	46c0      	nop			; (mov r8, r8)
   326d6:	46bd      	mov	sp, r7
   326d8:	b004      	add	sp, #16
   326da:	bd80      	pop	{r7, pc}

000326dc <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   326dc:	b580      	push	{r7, lr}
   326de:	b084      	sub	sp, #16
   326e0:	af00      	add	r7, sp, #0
   326e2:	6078      	str	r0, [r7, #4]
   326e4:	000a      	movs	r2, r1
   326e6:	1cfb      	adds	r3, r7, #3
   326e8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   326ea:	687b      	ldr	r3, [r7, #4]
   326ec:	681a      	ldr	r2, [r3, #0]
   326ee:	687b      	ldr	r3, [r7, #4]
   326f0:	685b      	ldr	r3, [r3, #4]
   326f2:	1ad3      	subs	r3, r2, r3
   326f4:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   326f6:	68fb      	ldr	r3, [r7, #12]
   326f8:	2b00      	cmp	r3, #0
   326fa:	dc03      	bgt.n	32704 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   326fc:	687b      	ldr	r3, [r7, #4]
   326fe:	0018      	movs	r0, r3
   32700:	4b08      	ldr	r3, [pc, #32]	; (32724 <stream_writer_send_8+0x48>)
   32702:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   32704:	687b      	ldr	r3, [r7, #4]
   32706:	6919      	ldr	r1, [r3, #16]
   32708:	687b      	ldr	r3, [r7, #4]
   3270a:	685b      	ldr	r3, [r3, #4]
   3270c:	1c58      	adds	r0, r3, #1
   3270e:	687a      	ldr	r2, [r7, #4]
   32710:	6050      	str	r0, [r2, #4]
   32712:	18cb      	adds	r3, r1, r3
   32714:	1cfa      	adds	r2, r7, #3
   32716:	7812      	ldrb	r2, [r2, #0]
   32718:	701a      	strb	r2, [r3, #0]
}
   3271a:	46c0      	nop			; (mov r8, r8)
   3271c:	46bd      	mov	sp, r7
   3271e:	b004      	add	sp, #16
   32720:	bd80      	pop	{r7, pc}
   32722:	46c0      	nop			; (mov r8, r8)
   32724:	00032765 	.word	0x00032765

00032728 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   32728:	b580      	push	{r7, lr}
   3272a:	b084      	sub	sp, #16
   3272c:	af00      	add	r7, sp, #0
   3272e:	60f8      	str	r0, [r7, #12]
   32730:	60b9      	str	r1, [r7, #8]
   32732:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   32734:	e00d      	b.n	32752 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   32736:	68bb      	ldr	r3, [r7, #8]
   32738:	781b      	ldrb	r3, [r3, #0]
   3273a:	b25a      	sxtb	r2, r3
   3273c:	68fb      	ldr	r3, [r7, #12]
   3273e:	0011      	movs	r1, r2
   32740:	0018      	movs	r0, r3
   32742:	4b07      	ldr	r3, [pc, #28]	; (32760 <stream_writer_send_buffer+0x38>)
   32744:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   32746:	687b      	ldr	r3, [r7, #4]
   32748:	3b01      	subs	r3, #1
   3274a:	607b      	str	r3, [r7, #4]
   3274c:	68bb      	ldr	r3, [r7, #8]
   3274e:	3301      	adds	r3, #1
   32750:	60bb      	str	r3, [r7, #8]
   32752:	687b      	ldr	r3, [r7, #4]
   32754:	2b00      	cmp	r3, #0
   32756:	d1ee      	bne.n	32736 <stream_writer_send_buffer+0xe>
	}
}
   32758:	46c0      	nop			; (mov r8, r8)
   3275a:	46bd      	mov	sp, r7
   3275c:	b004      	add	sp, #16
   3275e:	bd80      	pop	{r7, pc}
   32760:	000326dd 	.word	0x000326dd

00032764 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   32764:	b590      	push	{r4, r7, lr}
   32766:	b083      	sub	sp, #12
   32768:	af00      	add	r7, sp, #0
   3276a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   3276c:	687b      	ldr	r3, [r7, #4]
   3276e:	685b      	ldr	r3, [r3, #4]
   32770:	2b00      	cmp	r3, #0
   32772:	d00c      	beq.n	3278e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32774:	687b      	ldr	r3, [r7, #4]
   32776:	689c      	ldr	r4, [r3, #8]
   32778:	687b      	ldr	r3, [r7, #4]
   3277a:	68d8      	ldr	r0, [r3, #12]
   3277c:	687b      	ldr	r3, [r7, #4]
   3277e:	6919      	ldr	r1, [r3, #16]
   32780:	687b      	ldr	r3, [r7, #4]
   32782:	685b      	ldr	r3, [r3, #4]
   32784:	001a      	movs	r2, r3
   32786:	47a0      	blx	r4
		writer->written = 0;
   32788:	687b      	ldr	r3, [r7, #4]
   3278a:	2200      	movs	r2, #0
   3278c:	605a      	str	r2, [r3, #4]
	}
}
   3278e:	46c0      	nop			; (mov r8, r8)
   32790:	46bd      	mov	sp, r7
   32792:	b003      	add	sp, #12
   32794:	bd90      	pop	{r4, r7, pc}
	...

00032798 <system_cpu_clock_get_hz>:
{
   32798:	b580      	push	{r7, lr}
   3279a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   3279c:	2000      	movs	r0, #0
   3279e:	4b05      	ldr	r3, [pc, #20]	; (327b4 <system_cpu_clock_get_hz+0x1c>)
   327a0:	4798      	blx	r3
   327a2:	0002      	movs	r2, r0
   327a4:	4b04      	ldr	r3, [pc, #16]	; (327b8 <system_cpu_clock_get_hz+0x20>)
   327a6:	7a1b      	ldrb	r3, [r3, #8]
   327a8:	b2db      	uxtb	r3, r3
   327aa:	40da      	lsrs	r2, r3
   327ac:	0013      	movs	r3, r2
}
   327ae:	0018      	movs	r0, r3
   327b0:	46bd      	mov	sp, r7
   327b2:	bd80      	pop	{r7, pc}
   327b4:	0002a179 	.word	0x0002a179
   327b8:	40000400 	.word	0x40000400

000327bc <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   327bc:	b580      	push	{r7, lr}
   327be:	b084      	sub	sp, #16
   327c0:	af00      	add	r7, sp, #0
   327c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   327c4:	687b      	ldr	r3, [r7, #4]
   327c6:	681b      	ldr	r3, [r3, #0]
   327c8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   327ca:	46c0      	nop			; (mov r8, r8)
   327cc:	68fb      	ldr	r3, [r7, #12]
   327ce:	689b      	ldr	r3, [r3, #8]
   327d0:	2202      	movs	r2, #2
   327d2:	4013      	ands	r3, r2
   327d4:	d1fa      	bne.n	327cc <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   327d6:	68fb      	ldr	r3, [r7, #12]
   327d8:	681b      	ldr	r3, [r3, #0]
   327da:	2202      	movs	r2, #2
   327dc:	431a      	orrs	r2, r3
   327de:	68fb      	ldr	r3, [r7, #12]
   327e0:	601a      	str	r2, [r3, #0]
}
   327e2:	46c0      	nop			; (mov r8, r8)
   327e4:	46bd      	mov	sp, r7
   327e6:	b004      	add	sp, #16
   327e8:	bd80      	pop	{r7, pc}
	...

000327ec <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   327ec:	b580      	push	{r7, lr}
   327ee:	b082      	sub	sp, #8
   327f0:	af00      	add	r7, sp, #0
   327f2:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   327f4:	4b04      	ldr	r3, [pc, #16]	; (32808 <sw_timer_tcc_callback+0x1c>)
   327f6:	681b      	ldr	r3, [r3, #0]
   327f8:	1c5a      	adds	r2, r3, #1
   327fa:	4b03      	ldr	r3, [pc, #12]	; (32808 <sw_timer_tcc_callback+0x1c>)
   327fc:	601a      	str	r2, [r3, #0]
}
   327fe:	46c0      	nop			; (mov r8, r8)
   32800:	46bd      	mov	sp, r7
   32802:	b002      	add	sp, #8
   32804:	bd80      	pop	{r7, pc}
   32806:	46c0      	nop			; (mov r8, r8)
   32808:	2000470c 	.word	0x2000470c

0003280c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3280c:	b580      	push	{r7, lr}
   3280e:	b082      	sub	sp, #8
   32810:	af00      	add	r7, sp, #0
   32812:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   32814:	687b      	ldr	r3, [r7, #4]
   32816:	2264      	movs	r2, #100	; 0x64
   32818:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   3281a:	687b      	ldr	r3, [r7, #4]
   3281c:	2200      	movs	r2, #0
   3281e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   32820:	687b      	ldr	r3, [r7, #4]
   32822:	2200      	movs	r2, #0
   32824:	705a      	strb	r2, [r3, #1]
}
   32826:	46c0      	nop			; (mov r8, r8)
   32828:	46bd      	mov	sp, r7
   3282a:	b002      	add	sp, #8
   3282c:	bd80      	pop	{r7, pc}
	...

00032830 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   32830:	b590      	push	{r4, r7, lr}
   32832:	b0b1      	sub	sp, #196	; 0xc4
   32834:	af00      	add	r7, sp, #0
   32836:	6078      	str	r0, [r7, #4]
   32838:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   3283a:	230c      	movs	r3, #12
   3283c:	18fb      	adds	r3, r7, r3
   3283e:	4a2e      	ldr	r2, [pc, #184]	; (328f8 <sw_timer_init+0xc8>)
   32840:	ca13      	ldmia	r2!, {r0, r1, r4}
   32842:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   32844:	683b      	ldr	r3, [r7, #0]
   32846:	885b      	ldrh	r3, [r3, #2]
   32848:	001a      	movs	r2, r3
   3284a:	687b      	ldr	r3, [r7, #4]
   3284c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3284e:	687b      	ldr	r3, [r7, #4]
   32850:	3314      	adds	r3, #20
   32852:	22bc      	movs	r2, #188	; 0xbc
   32854:	18ba      	adds	r2, r7, r2
   32856:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   32858:	683b      	ldr	r3, [r7, #0]
   3285a:	781b      	ldrb	r3, [r3, #0]
   3285c:	001a      	movs	r2, r3
   3285e:	230c      	movs	r3, #12
   32860:	18fb      	adds	r3, r7, r3
   32862:	0092      	lsls	r2, r2, #2
   32864:	58d2      	ldr	r2, [r2, r3]
   32866:	2318      	movs	r3, #24
   32868:	18fb      	adds	r3, r7, r3
   3286a:	0011      	movs	r1, r2
   3286c:	0018      	movs	r0, r3
   3286e:	4b23      	ldr	r3, [pc, #140]	; (328fc <sw_timer_init+0xcc>)
   32870:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   32872:	4b23      	ldr	r3, [pc, #140]	; (32900 <sw_timer_init+0xd0>)
   32874:	4798      	blx	r3
   32876:	0004      	movs	r4, r0
   32878:	683b      	ldr	r3, [r7, #0]
   3287a:	885b      	ldrh	r3, [r3, #2]
   3287c:	001a      	movs	r2, r3
   3287e:	4b21      	ldr	r3, [pc, #132]	; (32904 <sw_timer_init+0xd4>)
   32880:	0011      	movs	r1, r2
   32882:	22fa      	movs	r2, #250	; 0xfa
   32884:	0210      	lsls	r0, r2, #8
   32886:	4798      	blx	r3
   32888:	0003      	movs	r3, r0
   3288a:	001a      	movs	r2, r3
   3288c:	4b1e      	ldr	r3, [pc, #120]	; (32908 <sw_timer_init+0xd8>)
   3288e:	0011      	movs	r1, r2
   32890:	0020      	movs	r0, r4
   32892:	4798      	blx	r3
   32894:	0003      	movs	r3, r0
   32896:	001a      	movs	r2, r3
   32898:	2318      	movs	r3, #24
   3289a:	18fb      	adds	r3, r7, r3
   3289c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   3289e:	2318      	movs	r3, #24
   328a0:	18fb      	adds	r3, r7, r3
   328a2:	2205      	movs	r2, #5
   328a4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   328a6:	683b      	ldr	r3, [r7, #0]
   328a8:	781b      	ldrb	r3, [r3, #0]
   328aa:	001a      	movs	r2, r3
   328ac:	230c      	movs	r3, #12
   328ae:	18fb      	adds	r3, r7, r3
   328b0:	0092      	lsls	r2, r2, #2
   328b2:	58d1      	ldr	r1, [r2, r3]
   328b4:	2318      	movs	r3, #24
   328b6:	18fa      	adds	r2, r7, r3
   328b8:	23bc      	movs	r3, #188	; 0xbc
   328ba:	18fb      	adds	r3, r7, r3
   328bc:	681b      	ldr	r3, [r3, #0]
   328be:	0018      	movs	r0, r3
   328c0:	4b12      	ldr	r3, [pc, #72]	; (3290c <sw_timer_init+0xdc>)
   328c2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   328c4:	683b      	ldr	r3, [r7, #0]
   328c6:	785b      	ldrb	r3, [r3, #1]
   328c8:	3308      	adds	r3, #8
   328ca:	b2da      	uxtb	r2, r3
   328cc:	4910      	ldr	r1, [pc, #64]	; (32910 <sw_timer_init+0xe0>)
   328ce:	23bc      	movs	r3, #188	; 0xbc
   328d0:	18fb      	adds	r3, r7, r3
   328d2:	681b      	ldr	r3, [r3, #0]
   328d4:	0018      	movs	r0, r3
   328d6:	4b0f      	ldr	r3, [pc, #60]	; (32914 <sw_timer_init+0xe4>)
   328d8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   328da:	683b      	ldr	r3, [r7, #0]
   328dc:	785b      	ldrb	r3, [r3, #1]
   328de:	3308      	adds	r3, #8
   328e0:	b2da      	uxtb	r2, r3
   328e2:	23bc      	movs	r3, #188	; 0xbc
   328e4:	18fb      	adds	r3, r7, r3
   328e6:	681b      	ldr	r3, [r3, #0]
   328e8:	0011      	movs	r1, r2
   328ea:	0018      	movs	r0, r3
   328ec:	4b0a      	ldr	r3, [pc, #40]	; (32918 <sw_timer_init+0xe8>)
   328ee:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   328f0:	46c0      	nop			; (mov r8, r8)
   328f2:	46bd      	mov	sp, r7
   328f4:	b031      	add	sp, #196	; 0xc4
   328f6:	bd90      	pop	{r4, r7, pc}
   328f8:	0003a39c 	.word	0x0003a39c
   328fc:	0002a711 	.word	0x0002a711
   32900:	00032799 	.word	0x00032799
   32904:	00032ea9 	.word	0x00032ea9
   32908:	00032d95 	.word	0x00032d95
   3290c:	0002ad6d 	.word	0x0002ad6d
   32910:	000327ed 	.word	0x000327ed
   32914:	0002b185 	.word	0x0002b185
   32918:	0002b1c5 	.word	0x0002b1c5

0003291c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   3291c:	b580      	push	{r7, lr}
   3291e:	b084      	sub	sp, #16
   32920:	af00      	add	r7, sp, #0
   32922:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   32924:	687b      	ldr	r3, [r7, #4]
   32926:	3314      	adds	r3, #20
   32928:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3292a:	68fb      	ldr	r3, [r7, #12]
   3292c:	0018      	movs	r0, r3
   3292e:	4b03      	ldr	r3, [pc, #12]	; (3293c <sw_timer_enable+0x20>)
   32930:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   32932:	46c0      	nop			; (mov r8, r8)
   32934:	46bd      	mov	sp, r7
   32936:	b004      	add	sp, #16
   32938:	bd80      	pop	{r7, pc}
   3293a:	46c0      	nop			; (mov r8, r8)
   3293c:	000327bd 	.word	0x000327bd

00032940 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   32940:	b580      	push	{r7, lr}
   32942:	b086      	sub	sp, #24
   32944:	af00      	add	r7, sp, #0
   32946:	60f8      	str	r0, [r7, #12]
   32948:	60b9      	str	r1, [r7, #8]
   3294a:	607a      	str	r2, [r7, #4]
   3294c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3294e:	2300      	movs	r3, #0
   32950:	617b      	str	r3, [r7, #20]
   32952:	e032      	b.n	329ba <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   32954:	68f9      	ldr	r1, [r7, #12]
   32956:	697a      	ldr	r2, [r7, #20]
   32958:	0013      	movs	r3, r2
   3295a:	009b      	lsls	r3, r3, #2
   3295c:	189b      	adds	r3, r3, r2
   3295e:	009b      	lsls	r3, r3, #2
   32960:	5c5b      	ldrb	r3, [r3, r1]
   32962:	07db      	lsls	r3, r3, #31
   32964:	0fdb      	lsrs	r3, r3, #31
   32966:	b2db      	uxtb	r3, r3
   32968:	2b00      	cmp	r3, #0
   3296a:	d123      	bne.n	329b4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   3296c:	697a      	ldr	r2, [r7, #20]
   3296e:	0013      	movs	r3, r2
   32970:	009b      	lsls	r3, r3, #2
   32972:	189b      	adds	r3, r3, r2
   32974:	009b      	lsls	r3, r3, #2
   32976:	68fa      	ldr	r2, [r7, #12]
   32978:	18d3      	adds	r3, r2, r3
   3297a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   3297c:	693b      	ldr	r3, [r7, #16]
   3297e:	68ba      	ldr	r2, [r7, #8]
   32980:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   32982:	693b      	ldr	r3, [r7, #16]
   32984:	781a      	ldrb	r2, [r3, #0]
   32986:	2102      	movs	r1, #2
   32988:	438a      	bics	r2, r1
   3298a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   3298c:	693b      	ldr	r3, [r7, #16]
   3298e:	687a      	ldr	r2, [r7, #4]
   32990:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   32992:	68fb      	ldr	r3, [r7, #12]
   32994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32996:	4b0d      	ldr	r3, [pc, #52]	; (329cc <sw_timer_register_callback+0x8c>)
   32998:	0011      	movs	r1, r2
   3299a:	6838      	ldr	r0, [r7, #0]
   3299c:	4798      	blx	r3
   3299e:	0003      	movs	r3, r0
   329a0:	001a      	movs	r2, r3
   329a2:	693b      	ldr	r3, [r7, #16]
   329a4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   329a6:	693b      	ldr	r3, [r7, #16]
   329a8:	781a      	ldrb	r2, [r3, #0]
   329aa:	2101      	movs	r1, #1
   329ac:	430a      	orrs	r2, r1
   329ae:	701a      	strb	r2, [r3, #0]
			return index;
   329b0:	697b      	ldr	r3, [r7, #20]
   329b2:	e007      	b.n	329c4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   329b4:	697b      	ldr	r3, [r7, #20]
   329b6:	3301      	adds	r3, #1
   329b8:	617b      	str	r3, [r7, #20]
   329ba:	697b      	ldr	r3, [r7, #20]
   329bc:	2b00      	cmp	r3, #0
   329be:	ddc9      	ble.n	32954 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   329c0:	2301      	movs	r3, #1
   329c2:	425b      	negs	r3, r3
}
   329c4:	0018      	movs	r0, r3
   329c6:	46bd      	mov	sp, r7
   329c8:	b006      	add	sp, #24
   329ca:	bd80      	pop	{r7, pc}
   329cc:	00032d95 	.word	0x00032d95

000329d0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   329d0:	b580      	push	{r7, lr}
   329d2:	b086      	sub	sp, #24
   329d4:	af00      	add	r7, sp, #0
   329d6:	60f8      	str	r0, [r7, #12]
   329d8:	60b9      	str	r1, [r7, #8]
   329da:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   329dc:	68ba      	ldr	r2, [r7, #8]
   329de:	0013      	movs	r3, r2
   329e0:	009b      	lsls	r3, r3, #2
   329e2:	189b      	adds	r3, r3, r2
   329e4:	009b      	lsls	r3, r3, #2
   329e6:	68fa      	ldr	r2, [r7, #12]
   329e8:	18d3      	adds	r3, r2, r3
   329ea:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   329ec:	697b      	ldr	r3, [r7, #20]
   329ee:	781a      	ldrb	r2, [r3, #0]
   329f0:	2102      	movs	r1, #2
   329f2:	430a      	orrs	r2, r1
   329f4:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   329f6:	68fb      	ldr	r3, [r7, #12]
   329f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   329fa:	4b07      	ldr	r3, [pc, #28]	; (32a18 <sw_timer_enable_callback+0x48>)
   329fc:	0011      	movs	r1, r2
   329fe:	6878      	ldr	r0, [r7, #4]
   32a00:	4798      	blx	r3
   32a02:	0003      	movs	r3, r0
   32a04:	001a      	movs	r2, r3
   32a06:	4b05      	ldr	r3, [pc, #20]	; (32a1c <sw_timer_enable_callback+0x4c>)
   32a08:	681b      	ldr	r3, [r3, #0]
   32a0a:	18d2      	adds	r2, r2, r3
   32a0c:	697b      	ldr	r3, [r7, #20]
   32a0e:	611a      	str	r2, [r3, #16]
}
   32a10:	46c0      	nop			; (mov r8, r8)
   32a12:	46bd      	mov	sp, r7
   32a14:	b006      	add	sp, #24
   32a16:	bd80      	pop	{r7, pc}
   32a18:	00032d95 	.word	0x00032d95
   32a1c:	2000470c 	.word	0x2000470c

00032a20 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   32a20:	b580      	push	{r7, lr}
   32a22:	b084      	sub	sp, #16
   32a24:	af00      	add	r7, sp, #0
   32a26:	6078      	str	r0, [r7, #4]
   32a28:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32a2a:	683a      	ldr	r2, [r7, #0]
   32a2c:	0013      	movs	r3, r2
   32a2e:	009b      	lsls	r3, r3, #2
   32a30:	189b      	adds	r3, r3, r2
   32a32:	009b      	lsls	r3, r3, #2
   32a34:	687a      	ldr	r2, [r7, #4]
   32a36:	18d3      	adds	r3, r2, r3
   32a38:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   32a3a:	68fb      	ldr	r3, [r7, #12]
   32a3c:	781a      	ldrb	r2, [r3, #0]
   32a3e:	2102      	movs	r1, #2
   32a40:	438a      	bics	r2, r1
   32a42:	701a      	strb	r2, [r3, #0]
}
   32a44:	46c0      	nop			; (mov r8, r8)
   32a46:	46bd      	mov	sp, r7
   32a48:	b004      	add	sp, #16
   32a4a:	bd80      	pop	{r7, pc}

00032a4c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32a4c:	b590      	push	{r4, r7, lr}
   32a4e:	b085      	sub	sp, #20
   32a50:	af00      	add	r7, sp, #0
   32a52:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32a54:	2300      	movs	r3, #0
   32a56:	60fb      	str	r3, [r7, #12]
   32a58:	e053      	b.n	32b02 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   32a5a:	6879      	ldr	r1, [r7, #4]
   32a5c:	68fa      	ldr	r2, [r7, #12]
   32a5e:	0013      	movs	r3, r2
   32a60:	009b      	lsls	r3, r3, #2
   32a62:	189b      	adds	r3, r3, r2
   32a64:	009b      	lsls	r3, r3, #2
   32a66:	5c5b      	ldrb	r3, [r3, r1]
   32a68:	07db      	lsls	r3, r3, #31
   32a6a:	0fdb      	lsrs	r3, r3, #31
   32a6c:	b2db      	uxtb	r3, r3
   32a6e:	2b00      	cmp	r3, #0
   32a70:	d044      	beq.n	32afc <sw_timer_task+0xb0>
   32a72:	6879      	ldr	r1, [r7, #4]
   32a74:	68fa      	ldr	r2, [r7, #12]
   32a76:	0013      	movs	r3, r2
   32a78:	009b      	lsls	r3, r3, #2
   32a7a:	189b      	adds	r3, r3, r2
   32a7c:	009b      	lsls	r3, r3, #2
   32a7e:	5c5b      	ldrb	r3, [r3, r1]
   32a80:	079b      	lsls	r3, r3, #30
   32a82:	0fdb      	lsrs	r3, r3, #31
   32a84:	b2db      	uxtb	r3, r3
   32a86:	2b00      	cmp	r3, #0
   32a88:	d038      	beq.n	32afc <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   32a8a:	68fa      	ldr	r2, [r7, #12]
   32a8c:	0013      	movs	r3, r2
   32a8e:	009b      	lsls	r3, r3, #2
   32a90:	189b      	adds	r3, r3, r2
   32a92:	009b      	lsls	r3, r3, #2
   32a94:	687a      	ldr	r2, [r7, #4]
   32a96:	18d3      	adds	r3, r2, r3
   32a98:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   32a9a:	68bb      	ldr	r3, [r7, #8]
   32a9c:	691a      	ldr	r2, [r3, #16]
   32a9e:	4b1c      	ldr	r3, [pc, #112]	; (32b10 <sw_timer_task+0xc4>)
   32aa0:	681b      	ldr	r3, [r3, #0]
   32aa2:	1ad3      	subs	r3, r2, r3
   32aa4:	d52a      	bpl.n	32afc <sw_timer_task+0xb0>
   32aa6:	68bb      	ldr	r3, [r7, #8]
   32aa8:	781b      	ldrb	r3, [r3, #0]
   32aaa:	2204      	movs	r2, #4
   32aac:	4013      	ands	r3, r2
   32aae:	b2db      	uxtb	r3, r3
   32ab0:	2b00      	cmp	r3, #0
   32ab2:	d123      	bne.n	32afc <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   32ab4:	68bb      	ldr	r3, [r7, #8]
   32ab6:	781a      	ldrb	r2, [r3, #0]
   32ab8:	2104      	movs	r1, #4
   32aba:	430a      	orrs	r2, r1
   32abc:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32abe:	68bb      	ldr	r3, [r7, #8]
   32ac0:	68db      	ldr	r3, [r3, #12]
   32ac2:	2b00      	cmp	r3, #0
   32ac4:	d007      	beq.n	32ad6 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   32ac6:	68bb      	ldr	r3, [r7, #8]
   32ac8:	68da      	ldr	r2, [r3, #12]
   32aca:	4b11      	ldr	r3, [pc, #68]	; (32b10 <sw_timer_task+0xc4>)
   32acc:	681b      	ldr	r3, [r3, #0]
   32ace:	18d2      	adds	r2, r2, r3
   32ad0:	68bb      	ldr	r3, [r7, #8]
   32ad2:	611a      	str	r2, [r3, #16]
   32ad4:	e004      	b.n	32ae0 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   32ad6:	68bb      	ldr	r3, [r7, #8]
   32ad8:	781a      	ldrb	r2, [r3, #0]
   32ada:	2102      	movs	r1, #2
   32adc:	438a      	bics	r2, r1
   32ade:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   32ae0:	68bb      	ldr	r3, [r7, #8]
   32ae2:	685c      	ldr	r4, [r3, #4]
   32ae4:	68bb      	ldr	r3, [r7, #8]
   32ae6:	689a      	ldr	r2, [r3, #8]
   32ae8:	68bb      	ldr	r3, [r7, #8]
   32aea:	68db      	ldr	r3, [r3, #12]
   32aec:	68f9      	ldr	r1, [r7, #12]
   32aee:	6878      	ldr	r0, [r7, #4]
   32af0:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   32af2:	68bb      	ldr	r3, [r7, #8]
   32af4:	781a      	ldrb	r2, [r3, #0]
   32af6:	2104      	movs	r1, #4
   32af8:	438a      	bics	r2, r1
   32afa:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32afc:	68fb      	ldr	r3, [r7, #12]
   32afe:	3301      	adds	r3, #1
   32b00:	60fb      	str	r3, [r7, #12]
   32b02:	68fb      	ldr	r3, [r7, #12]
   32b04:	2b00      	cmp	r3, #0
   32b06:	dda8      	ble.n	32a5a <sw_timer_task+0xe>
			}
		}
	}
}
   32b08:	46c0      	nop			; (mov r8, r8)
   32b0a:	46bd      	mov	sp, r7
   32b0c:	b005      	add	sp, #20
   32b0e:	bd90      	pop	{r4, r7, pc}
   32b10:	2000470c 	.word	0x2000470c

00032b14 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   32b14:	b580      	push	{r7, lr}
   32b16:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32b18:	4b06      	ldr	r3, [pc, #24]	; (32b34 <main+0x20>)
   32b1a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   32b1c:	4b06      	ldr	r3, [pc, #24]	; (32b38 <main+0x24>)
   32b1e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32b20:	2001      	movs	r0, #1
   32b22:	4b06      	ldr	r3, [pc, #24]	; (32b3c <main+0x28>)
   32b24:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   32b26:	4b06      	ldr	r3, [pc, #24]	; (32b40 <main+0x2c>)
   32b28:	4798      	blx	r3

    return 0;  // Will not get here
   32b2a:	2300      	movs	r3, #0
}
   32b2c:	0018      	movs	r0, r3
   32b2e:	46bd      	mov	sp, r7
   32b30:	bd80      	pop	{r7, pc}
   32b32:	46c0      	nop			; (mov r8, r8)
   32b34:	0002a605 	.word	0x0002a605
   32b38:	0001e1e5 	.word	0x0001e1e5
   32b3c:	000188b5 	.word	0x000188b5
   32b40:	0001c83d 	.word	0x0001c83d

00032b44 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   32b44:	b580      	push	{r7, lr}
   32b46:	b082      	sub	sp, #8
   32b48:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n-----ESE516 Main Program-----\r\n");
   32b4a:	4b27      	ldr	r3, [pc, #156]	; (32be8 <vApplicationDaemonTaskStartupHook+0xa4>)
   32b4c:	0018      	movs	r0, r3
   32b4e:	4b27      	ldr	r3, [pc, #156]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32b50:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\nInitialize HW...\r\n");
   32b52:	4b27      	ldr	r3, [pc, #156]	; (32bf0 <vApplicationDaemonTaskStartupHook+0xac>)
   32b54:	0018      	movs	r0, r3
   32b56:	4b25      	ldr	r3, [pc, #148]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32b58:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   32b5a:	4b26      	ldr	r3, [pc, #152]	; (32bf4 <vApplicationDaemonTaskStartupHook+0xb0>)
   32b5c:	4798      	blx	r3
   32b5e:	1e03      	subs	r3, r0, #0
   32b60:	d004      	beq.n	32b6c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32b62:	4b25      	ldr	r3, [pc, #148]	; (32bf8 <vApplicationDaemonTaskStartupHook+0xb4>)
   32b64:	0018      	movs	r0, r3
   32b66:	4b21      	ldr	r3, [pc, #132]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32b68:	4798      	blx	r3
   32b6a:	e003      	b.n	32b74 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32b6c:	4b23      	ldr	r3, [pc, #140]	; (32bfc <vApplicationDaemonTaskStartupHook+0xb8>)
   32b6e:	0018      	movs	r0, r3
   32b70:	4b1e      	ldr	r3, [pc, #120]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32b72:	4798      	blx	r3
        //SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    //} else {
        //SerialConsoleWriteString("Initialized Seesaw!\r\n");
    //}

    uint8_t whoamI = 0;
   32b74:	1dfb      	adds	r3, r7, #7
   32b76:	2200      	movs	r2, #0
   32b78:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   32b7a:	4b21      	ldr	r3, [pc, #132]	; (32c00 <vApplicationDaemonTaskStartupHook+0xbc>)
   32b7c:	4798      	blx	r3
   32b7e:	0002      	movs	r2, r0
   32b80:	1dfb      	adds	r3, r7, #7
   32b82:	0019      	movs	r1, r3
   32b84:	0010      	movs	r0, r2
   32b86:	4b1f      	ldr	r3, [pc, #124]	; (32c04 <vApplicationDaemonTaskStartupHook+0xc0>)
   32b88:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   32b8a:	1dfb      	adds	r3, r7, #7
   32b8c:	781b      	ldrb	r3, [r3, #0]
   32b8e:	2b6c      	cmp	r3, #108	; 0x6c
   32b90:	d004      	beq.n	32b9c <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32b92:	4b1d      	ldr	r3, [pc, #116]	; (32c08 <vApplicationDaemonTaskStartupHook+0xc4>)
   32b94:	0018      	movs	r0, r3
   32b96:	4b15      	ldr	r3, [pc, #84]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32b98:	4798      	blx	r3
   32b9a:	e010      	b.n	32bbe <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   32b9c:	4b1b      	ldr	r3, [pc, #108]	; (32c0c <vApplicationDaemonTaskStartupHook+0xc8>)
   32b9e:	0018      	movs	r0, r3
   32ba0:	4b12      	ldr	r3, [pc, #72]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32ba2:	4798      	blx	r3
        if (InitImu() == 0) {
   32ba4:	4b1a      	ldr	r3, [pc, #104]	; (32c10 <vApplicationDaemonTaskStartupHook+0xcc>)
   32ba6:	4798      	blx	r3
   32ba8:	1e03      	subs	r3, r0, #0
   32baa:	d104      	bne.n	32bb6 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   32bac:	4b19      	ldr	r3, [pc, #100]	; (32c14 <vApplicationDaemonTaskStartupHook+0xd0>)
   32bae:	0018      	movs	r0, r3
   32bb0:	4b0e      	ldr	r3, [pc, #56]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32bb2:	4798      	blx	r3
   32bb4:	e003      	b.n	32bbe <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32bb6:	4b18      	ldr	r3, [pc, #96]	; (32c18 <vApplicationDaemonTaskStartupHook+0xd4>)
   32bb8:	0018      	movs	r0, r3
   32bba:	4b0c      	ldr	r3, [pc, #48]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32bbc:	4798      	blx	r3
        }
    }

	//commented by Derek
    SerialConsoleWriteString("Initializing distance sensor\r\n");
   32bbe:	4b17      	ldr	r3, [pc, #92]	; (32c1c <vApplicationDaemonTaskStartupHook+0xd8>)
   32bc0:	0018      	movs	r0, r3
   32bc2:	4b0a      	ldr	r3, [pc, #40]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32bc4:	4798      	blx	r3
    InitializeDistanceSensor();
   32bc6:	4b16      	ldr	r3, [pc, #88]	; (32c20 <vApplicationDaemonTaskStartupHook+0xdc>)
   32bc8:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   32bca:	4b16      	ldr	r3, [pc, #88]	; (32c24 <vApplicationDaemonTaskStartupHook+0xe0>)
   32bcc:	0018      	movs	r0, r3
   32bce:	4b07      	ldr	r3, [pc, #28]	; (32bec <vApplicationDaemonTaskStartupHook+0xa8>)
   32bd0:	4798      	blx	r3

    StartTasks();
   32bd2:	4b15      	ldr	r3, [pc, #84]	; (32c28 <vApplicationDaemonTaskStartupHook+0xe4>)
   32bd4:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32bd6:	4b15      	ldr	r3, [pc, #84]	; (32c2c <vApplicationDaemonTaskStartupHook+0xe8>)
   32bd8:	681b      	ldr	r3, [r3, #0]
   32bda:	0018      	movs	r0, r3
   32bdc:	4b14      	ldr	r3, [pc, #80]	; (32c30 <vApplicationDaemonTaskStartupHook+0xec>)
   32bde:	4798      	blx	r3
}
   32be0:	46c0      	nop			; (mov r8, r8)
   32be2:	46bd      	mov	sp, r7
   32be4:	b002      	add	sp, #8
   32be6:	bd80      	pop	{r7, pc}
   32be8:	0003a3a8 	.word	0x0003a3a8
   32bec:	0001e255 	.word	0x0001e255
   32bf0:	0003a3cc 	.word	0x0003a3cc
   32bf4:	000147fd 	.word	0x000147fd
   32bf8:	0003a3e4 	.word	0x0003a3e4
   32bfc:	0003a408 	.word	0x0003a408
   32c00:	00015a25 	.word	0x00015a25
   32c04:	00015569 	.word	0x00015569
   32c08:	0003a424 	.word	0x0003a424
   32c0c:	0003a438 	.word	0x0003a438
   32c10:	00015a35 	.word	0x00015a35
   32c14:	0003a448 	.word	0x0003a448
   32c18:	0003a45c 	.word	0x0003a45c
   32c1c:	0003a478 	.word	0x0003a478
   32c20:	000141d9 	.word	0x000141d9
   32c24:	0003a498 	.word	0x0003a498
   32c28:	00032c35 	.word	0x00032c35
   32c2c:	20004714 	.word	0x20004714
   32c30:	0001c6e1 	.word	0x0001c6e1

00032c34 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32c34:	b590      	push	{r4, r7, lr}
   32c36:	b083      	sub	sp, #12
   32c38:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d", xPortGetFreeHeapSize());
   32c3a:	4b35      	ldr	r3, [pc, #212]	; (32d10 <StartTasks+0xdc>)
   32c3c:	4798      	blx	r3
   32c3e:	0003      	movs	r3, r0
   32c40:	4a34      	ldr	r2, [pc, #208]	; (32d14 <StartTasks+0xe0>)
   32c42:	4835      	ldr	r0, [pc, #212]	; (32d18 <StartTasks+0xe4>)
   32c44:	2140      	movs	r1, #64	; 0x40
   32c46:	4c35      	ldr	r4, [pc, #212]	; (32d1c <StartTasks+0xe8>)
   32c48:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32c4a:	4b33      	ldr	r3, [pc, #204]	; (32d18 <StartTasks+0xe4>)
   32c4c:	0018      	movs	r0, r3
   32c4e:	4b34      	ldr	r3, [pc, #208]	; (32d20 <StartTasks+0xec>)
   32c50:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   32c52:	23c8      	movs	r3, #200	; 0xc8
   32c54:	005a      	lsls	r2, r3, #1
   32c56:	4933      	ldr	r1, [pc, #204]	; (32d24 <StartTasks+0xf0>)
   32c58:	4833      	ldr	r0, [pc, #204]	; (32d28 <StartTasks+0xf4>)
   32c5a:	4b34      	ldr	r3, [pc, #208]	; (32d2c <StartTasks+0xf8>)
   32c5c:	9301      	str	r3, [sp, #4]
   32c5e:	2304      	movs	r3, #4
   32c60:	9300      	str	r3, [sp, #0]
   32c62:	2300      	movs	r3, #0
   32c64:	4c32      	ldr	r4, [pc, #200]	; (32d30 <StartTasks+0xfc>)
   32c66:	47a0      	blx	r4
   32c68:	0003      	movs	r3, r0
   32c6a:	2b01      	cmp	r3, #1
   32c6c:	d003      	beq.n	32c76 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32c6e:	4b31      	ldr	r3, [pc, #196]	; (32d34 <StartTasks+0x100>)
   32c70:	0018      	movs	r0, r3
   32c72:	4b2b      	ldr	r3, [pc, #172]	; (32d20 <StartTasks+0xec>)
   32c74:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n\r\n", xPortGetFreeHeapSize());
   32c76:	4b26      	ldr	r3, [pc, #152]	; (32d10 <StartTasks+0xdc>)
   32c78:	4798      	blx	r3
   32c7a:	0003      	movs	r3, r0
   32c7c:	4a2e      	ldr	r2, [pc, #184]	; (32d38 <StartTasks+0x104>)
   32c7e:	4826      	ldr	r0, [pc, #152]	; (32d18 <StartTasks+0xe4>)
   32c80:	2140      	movs	r1, #64	; 0x40
   32c82:	4c26      	ldr	r4, [pc, #152]	; (32d1c <StartTasks+0xe8>)
   32c84:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32c86:	4b24      	ldr	r3, [pc, #144]	; (32d18 <StartTasks+0xe4>)
   32c88:	0018      	movs	r0, r3
   32c8a:	4b25      	ldr	r3, [pc, #148]	; (32d20 <StartTasks+0xec>)
   32c8c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   32c8e:	23c8      	movs	r3, #200	; 0xc8
   32c90:	005a      	lsls	r2, r3, #1
   32c92:	492a      	ldr	r1, [pc, #168]	; (32d3c <StartTasks+0x108>)
   32c94:	482a      	ldr	r0, [pc, #168]	; (32d40 <StartTasks+0x10c>)
   32c96:	4b2b      	ldr	r3, [pc, #172]	; (32d44 <StartTasks+0x110>)
   32c98:	9301      	str	r3, [sp, #4]
   32c9a:	2304      	movs	r3, #4
   32c9c:	9300      	str	r3, [sp, #0]
   32c9e:	2300      	movs	r3, #0
   32ca0:	4c23      	ldr	r4, [pc, #140]	; (32d30 <StartTasks+0xfc>)
   32ca2:	47a0      	blx	r4
   32ca4:	0003      	movs	r3, r0
   32ca6:	2b01      	cmp	r3, #1
   32ca8:	d003      	beq.n	32cb2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32caa:	4b27      	ldr	r3, [pc, #156]	; (32d48 <StartTasks+0x114>)
   32cac:	0018      	movs	r0, r3
   32cae:	4b1c      	ldr	r3, [pc, #112]	; (32d20 <StartTasks+0xec>)
   32cb0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   32cb2:	4b17      	ldr	r3, [pc, #92]	; (32d10 <StartTasks+0xdc>)
   32cb4:	4798      	blx	r3
   32cb6:	0003      	movs	r3, r0
   32cb8:	4a24      	ldr	r2, [pc, #144]	; (32d4c <StartTasks+0x118>)
   32cba:	4817      	ldr	r0, [pc, #92]	; (32d18 <StartTasks+0xe4>)
   32cbc:	2140      	movs	r1, #64	; 0x40
   32cbe:	4c17      	ldr	r4, [pc, #92]	; (32d1c <StartTasks+0xe8>)
   32cc0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32cc2:	4b15      	ldr	r3, [pc, #84]	; (32d18 <StartTasks+0xe4>)
   32cc4:	0018      	movs	r0, r3
   32cc6:	4b16      	ldr	r3, [pc, #88]	; (32d20 <StartTasks+0xec>)
   32cc8:	4798      	blx	r3
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
	
	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32cca:	23fa      	movs	r3, #250	; 0xfa
   32ccc:	009a      	lsls	r2, r3, #2
   32cce:	4920      	ldr	r1, [pc, #128]	; (32d50 <StartTasks+0x11c>)
   32cd0:	4820      	ldr	r0, [pc, #128]	; (32d54 <StartTasks+0x120>)
   32cd2:	4b21      	ldr	r3, [pc, #132]	; (32d58 <StartTasks+0x124>)
   32cd4:	9301      	str	r3, [sp, #4]
   32cd6:	2303      	movs	r3, #3
   32cd8:	9300      	str	r3, [sp, #0]
   32cda:	2300      	movs	r3, #0
   32cdc:	4c14      	ldr	r4, [pc, #80]	; (32d30 <StartTasks+0xfc>)
   32cde:	47a0      	blx	r4
   32ce0:	0003      	movs	r3, r0
   32ce2:	2b01      	cmp	r3, #1
   32ce4:	d003      	beq.n	32cee <StartTasks+0xba>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32ce6:	4b1d      	ldr	r3, [pc, #116]	; (32d5c <StartTasks+0x128>)
   32ce8:	0018      	movs	r0, r3
   32cea:	4b0d      	ldr	r3, [pc, #52]	; (32d20 <StartTasks+0xec>)
   32cec:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32cee:	4b08      	ldr	r3, [pc, #32]	; (32d10 <StartTasks+0xdc>)
   32cf0:	4798      	blx	r3
   32cf2:	0003      	movs	r3, r0
   32cf4:	4a1a      	ldr	r2, [pc, #104]	; (32d60 <StartTasks+0x12c>)
   32cf6:	4808      	ldr	r0, [pc, #32]	; (32d18 <StartTasks+0xe4>)
   32cf8:	2140      	movs	r1, #64	; 0x40
   32cfa:	4c08      	ldr	r4, [pc, #32]	; (32d1c <StartTasks+0xe8>)
   32cfc:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   32cfe:	4b06      	ldr	r3, [pc, #24]	; (32d18 <StartTasks+0xe4>)
   32d00:	0018      	movs	r0, r3
   32d02:	4b07      	ldr	r3, [pc, #28]	; (32d20 <StartTasks+0xec>)
   32d04:	4798      	blx	r3
}
   32d06:	46c0      	nop			; (mov r8, r8)
   32d08:	46bd      	mov	sp, r7
   32d0a:	b001      	add	sp, #4
   32d0c:	bd90      	pop	{r4, r7, pc}
   32d0e:	46c0      	nop			; (mov r8, r8)
   32d10:	0001a821 	.word	0x0001a821
   32d14:	0003a4b8 	.word	0x0003a4b8
   32d18:	20005c8c 	.word	0x20005c8c
   32d1c:	0003506d 	.word	0x0003506d
   32d20:	0001e255 	.word	0x0001e255
   32d24:	0003a4d8 	.word	0x0003a4d8
   32d28:	00013819 	.word	0x00013819
   32d2c:	20004710 	.word	0x20004710
   32d30:	0001c265 	.word	0x0001c265
   32d34:	0003a4e4 	.word	0x0003a4e4
   32d38:	0003a510 	.word	0x0003a510
   32d3c:	0003a530 	.word	0x0003a530
   32d40:	00015cf1 	.word	0x00015cf1
   32d44:	2000471c 	.word	0x2000471c
   32d48:	0003a538 	.word	0x0003a538
   32d4c:	0003a564 	.word	0x0003a564
   32d50:	0003a588 	.word	0x0003a588
   32d54:	00017695 	.word	0x00017695
   32d58:	20004718 	.word	0x20004718
   32d5c:	0003a594 	.word	0x0003a594
   32d60:	0003a5c0 	.word	0x0003a5c0

00032d64 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32d64:	b580      	push	{r7, lr}
   32d66:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32d68:	4b02      	ldr	r3, [pc, #8]	; (32d74 <vApplicationMallocFailedHook+0x10>)
   32d6a:	0018      	movs	r0, r3
   32d6c:	4b02      	ldr	r3, [pc, #8]	; (32d78 <vApplicationMallocFailedHook+0x14>)
   32d6e:	4798      	blx	r3
    while (1)
   32d70:	e7fe      	b.n	32d70 <vApplicationMallocFailedHook+0xc>
   32d72:	46c0      	nop			; (mov r8, r8)
   32d74:	0003a5e0 	.word	0x0003a5e0
   32d78:	0001e255 	.word	0x0001e255

00032d7c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   32d7c:	b580      	push	{r7, lr}
   32d7e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32d80:	4b02      	ldr	r3, [pc, #8]	; (32d8c <vApplicationStackOverflowHook+0x10>)
   32d82:	0018      	movs	r0, r3
   32d84:	4b02      	ldr	r3, [pc, #8]	; (32d90 <vApplicationStackOverflowHook+0x14>)
   32d86:	4798      	blx	r3
    while (1)
   32d88:	e7fe      	b.n	32d88 <vApplicationStackOverflowHook+0xc>
   32d8a:	46c0      	nop			; (mov r8, r8)
   32d8c:	0003a60c 	.word	0x0003a60c
   32d90:	0001e255 	.word	0x0001e255

00032d94 <__udivsi3>:
   32d94:	2200      	movs	r2, #0
   32d96:	0843      	lsrs	r3, r0, #1
   32d98:	428b      	cmp	r3, r1
   32d9a:	d374      	bcc.n	32e86 <__udivsi3+0xf2>
   32d9c:	0903      	lsrs	r3, r0, #4
   32d9e:	428b      	cmp	r3, r1
   32da0:	d35f      	bcc.n	32e62 <__udivsi3+0xce>
   32da2:	0a03      	lsrs	r3, r0, #8
   32da4:	428b      	cmp	r3, r1
   32da6:	d344      	bcc.n	32e32 <__udivsi3+0x9e>
   32da8:	0b03      	lsrs	r3, r0, #12
   32daa:	428b      	cmp	r3, r1
   32dac:	d328      	bcc.n	32e00 <__udivsi3+0x6c>
   32dae:	0c03      	lsrs	r3, r0, #16
   32db0:	428b      	cmp	r3, r1
   32db2:	d30d      	bcc.n	32dd0 <__udivsi3+0x3c>
   32db4:	22ff      	movs	r2, #255	; 0xff
   32db6:	0209      	lsls	r1, r1, #8
   32db8:	ba12      	rev	r2, r2
   32dba:	0c03      	lsrs	r3, r0, #16
   32dbc:	428b      	cmp	r3, r1
   32dbe:	d302      	bcc.n	32dc6 <__udivsi3+0x32>
   32dc0:	1212      	asrs	r2, r2, #8
   32dc2:	0209      	lsls	r1, r1, #8
   32dc4:	d065      	beq.n	32e92 <__udivsi3+0xfe>
   32dc6:	0b03      	lsrs	r3, r0, #12
   32dc8:	428b      	cmp	r3, r1
   32dca:	d319      	bcc.n	32e00 <__udivsi3+0x6c>
   32dcc:	e000      	b.n	32dd0 <__udivsi3+0x3c>
   32dce:	0a09      	lsrs	r1, r1, #8
   32dd0:	0bc3      	lsrs	r3, r0, #15
   32dd2:	428b      	cmp	r3, r1
   32dd4:	d301      	bcc.n	32dda <__udivsi3+0x46>
   32dd6:	03cb      	lsls	r3, r1, #15
   32dd8:	1ac0      	subs	r0, r0, r3
   32dda:	4152      	adcs	r2, r2
   32ddc:	0b83      	lsrs	r3, r0, #14
   32dde:	428b      	cmp	r3, r1
   32de0:	d301      	bcc.n	32de6 <__udivsi3+0x52>
   32de2:	038b      	lsls	r3, r1, #14
   32de4:	1ac0      	subs	r0, r0, r3
   32de6:	4152      	adcs	r2, r2
   32de8:	0b43      	lsrs	r3, r0, #13
   32dea:	428b      	cmp	r3, r1
   32dec:	d301      	bcc.n	32df2 <__udivsi3+0x5e>
   32dee:	034b      	lsls	r3, r1, #13
   32df0:	1ac0      	subs	r0, r0, r3
   32df2:	4152      	adcs	r2, r2
   32df4:	0b03      	lsrs	r3, r0, #12
   32df6:	428b      	cmp	r3, r1
   32df8:	d301      	bcc.n	32dfe <__udivsi3+0x6a>
   32dfa:	030b      	lsls	r3, r1, #12
   32dfc:	1ac0      	subs	r0, r0, r3
   32dfe:	4152      	adcs	r2, r2
   32e00:	0ac3      	lsrs	r3, r0, #11
   32e02:	428b      	cmp	r3, r1
   32e04:	d301      	bcc.n	32e0a <__udivsi3+0x76>
   32e06:	02cb      	lsls	r3, r1, #11
   32e08:	1ac0      	subs	r0, r0, r3
   32e0a:	4152      	adcs	r2, r2
   32e0c:	0a83      	lsrs	r3, r0, #10
   32e0e:	428b      	cmp	r3, r1
   32e10:	d301      	bcc.n	32e16 <__udivsi3+0x82>
   32e12:	028b      	lsls	r3, r1, #10
   32e14:	1ac0      	subs	r0, r0, r3
   32e16:	4152      	adcs	r2, r2
   32e18:	0a43      	lsrs	r3, r0, #9
   32e1a:	428b      	cmp	r3, r1
   32e1c:	d301      	bcc.n	32e22 <__udivsi3+0x8e>
   32e1e:	024b      	lsls	r3, r1, #9
   32e20:	1ac0      	subs	r0, r0, r3
   32e22:	4152      	adcs	r2, r2
   32e24:	0a03      	lsrs	r3, r0, #8
   32e26:	428b      	cmp	r3, r1
   32e28:	d301      	bcc.n	32e2e <__udivsi3+0x9a>
   32e2a:	020b      	lsls	r3, r1, #8
   32e2c:	1ac0      	subs	r0, r0, r3
   32e2e:	4152      	adcs	r2, r2
   32e30:	d2cd      	bcs.n	32dce <__udivsi3+0x3a>
   32e32:	09c3      	lsrs	r3, r0, #7
   32e34:	428b      	cmp	r3, r1
   32e36:	d301      	bcc.n	32e3c <__udivsi3+0xa8>
   32e38:	01cb      	lsls	r3, r1, #7
   32e3a:	1ac0      	subs	r0, r0, r3
   32e3c:	4152      	adcs	r2, r2
   32e3e:	0983      	lsrs	r3, r0, #6
   32e40:	428b      	cmp	r3, r1
   32e42:	d301      	bcc.n	32e48 <__udivsi3+0xb4>
   32e44:	018b      	lsls	r3, r1, #6
   32e46:	1ac0      	subs	r0, r0, r3
   32e48:	4152      	adcs	r2, r2
   32e4a:	0943      	lsrs	r3, r0, #5
   32e4c:	428b      	cmp	r3, r1
   32e4e:	d301      	bcc.n	32e54 <__udivsi3+0xc0>
   32e50:	014b      	lsls	r3, r1, #5
   32e52:	1ac0      	subs	r0, r0, r3
   32e54:	4152      	adcs	r2, r2
   32e56:	0903      	lsrs	r3, r0, #4
   32e58:	428b      	cmp	r3, r1
   32e5a:	d301      	bcc.n	32e60 <__udivsi3+0xcc>
   32e5c:	010b      	lsls	r3, r1, #4
   32e5e:	1ac0      	subs	r0, r0, r3
   32e60:	4152      	adcs	r2, r2
   32e62:	08c3      	lsrs	r3, r0, #3
   32e64:	428b      	cmp	r3, r1
   32e66:	d301      	bcc.n	32e6c <__udivsi3+0xd8>
   32e68:	00cb      	lsls	r3, r1, #3
   32e6a:	1ac0      	subs	r0, r0, r3
   32e6c:	4152      	adcs	r2, r2
   32e6e:	0883      	lsrs	r3, r0, #2
   32e70:	428b      	cmp	r3, r1
   32e72:	d301      	bcc.n	32e78 <__udivsi3+0xe4>
   32e74:	008b      	lsls	r3, r1, #2
   32e76:	1ac0      	subs	r0, r0, r3
   32e78:	4152      	adcs	r2, r2
   32e7a:	0843      	lsrs	r3, r0, #1
   32e7c:	428b      	cmp	r3, r1
   32e7e:	d301      	bcc.n	32e84 <__udivsi3+0xf0>
   32e80:	004b      	lsls	r3, r1, #1
   32e82:	1ac0      	subs	r0, r0, r3
   32e84:	4152      	adcs	r2, r2
   32e86:	1a41      	subs	r1, r0, r1
   32e88:	d200      	bcs.n	32e8c <__udivsi3+0xf8>
   32e8a:	4601      	mov	r1, r0
   32e8c:	4152      	adcs	r2, r2
   32e8e:	4610      	mov	r0, r2
   32e90:	4770      	bx	lr
   32e92:	e7ff      	b.n	32e94 <__udivsi3+0x100>
   32e94:	b501      	push	{r0, lr}
   32e96:	2000      	movs	r0, #0
   32e98:	f000 f8f0 	bl	3307c <__aeabi_idiv0>
   32e9c:	bd02      	pop	{r1, pc}
   32e9e:	46c0      	nop			; (mov r8, r8)

00032ea0 <__aeabi_uidivmod>:
   32ea0:	2900      	cmp	r1, #0
   32ea2:	d0f7      	beq.n	32e94 <__udivsi3+0x100>
   32ea4:	e776      	b.n	32d94 <__udivsi3>
   32ea6:	4770      	bx	lr

00032ea8 <__divsi3>:
   32ea8:	4603      	mov	r3, r0
   32eaa:	430b      	orrs	r3, r1
   32eac:	d47f      	bmi.n	32fae <__divsi3+0x106>
   32eae:	2200      	movs	r2, #0
   32eb0:	0843      	lsrs	r3, r0, #1
   32eb2:	428b      	cmp	r3, r1
   32eb4:	d374      	bcc.n	32fa0 <__divsi3+0xf8>
   32eb6:	0903      	lsrs	r3, r0, #4
   32eb8:	428b      	cmp	r3, r1
   32eba:	d35f      	bcc.n	32f7c <__divsi3+0xd4>
   32ebc:	0a03      	lsrs	r3, r0, #8
   32ebe:	428b      	cmp	r3, r1
   32ec0:	d344      	bcc.n	32f4c <__divsi3+0xa4>
   32ec2:	0b03      	lsrs	r3, r0, #12
   32ec4:	428b      	cmp	r3, r1
   32ec6:	d328      	bcc.n	32f1a <__divsi3+0x72>
   32ec8:	0c03      	lsrs	r3, r0, #16
   32eca:	428b      	cmp	r3, r1
   32ecc:	d30d      	bcc.n	32eea <__divsi3+0x42>
   32ece:	22ff      	movs	r2, #255	; 0xff
   32ed0:	0209      	lsls	r1, r1, #8
   32ed2:	ba12      	rev	r2, r2
   32ed4:	0c03      	lsrs	r3, r0, #16
   32ed6:	428b      	cmp	r3, r1
   32ed8:	d302      	bcc.n	32ee0 <__divsi3+0x38>
   32eda:	1212      	asrs	r2, r2, #8
   32edc:	0209      	lsls	r1, r1, #8
   32ede:	d065      	beq.n	32fac <__divsi3+0x104>
   32ee0:	0b03      	lsrs	r3, r0, #12
   32ee2:	428b      	cmp	r3, r1
   32ee4:	d319      	bcc.n	32f1a <__divsi3+0x72>
   32ee6:	e000      	b.n	32eea <__divsi3+0x42>
   32ee8:	0a09      	lsrs	r1, r1, #8
   32eea:	0bc3      	lsrs	r3, r0, #15
   32eec:	428b      	cmp	r3, r1
   32eee:	d301      	bcc.n	32ef4 <__divsi3+0x4c>
   32ef0:	03cb      	lsls	r3, r1, #15
   32ef2:	1ac0      	subs	r0, r0, r3
   32ef4:	4152      	adcs	r2, r2
   32ef6:	0b83      	lsrs	r3, r0, #14
   32ef8:	428b      	cmp	r3, r1
   32efa:	d301      	bcc.n	32f00 <__divsi3+0x58>
   32efc:	038b      	lsls	r3, r1, #14
   32efe:	1ac0      	subs	r0, r0, r3
   32f00:	4152      	adcs	r2, r2
   32f02:	0b43      	lsrs	r3, r0, #13
   32f04:	428b      	cmp	r3, r1
   32f06:	d301      	bcc.n	32f0c <__divsi3+0x64>
   32f08:	034b      	lsls	r3, r1, #13
   32f0a:	1ac0      	subs	r0, r0, r3
   32f0c:	4152      	adcs	r2, r2
   32f0e:	0b03      	lsrs	r3, r0, #12
   32f10:	428b      	cmp	r3, r1
   32f12:	d301      	bcc.n	32f18 <__divsi3+0x70>
   32f14:	030b      	lsls	r3, r1, #12
   32f16:	1ac0      	subs	r0, r0, r3
   32f18:	4152      	adcs	r2, r2
   32f1a:	0ac3      	lsrs	r3, r0, #11
   32f1c:	428b      	cmp	r3, r1
   32f1e:	d301      	bcc.n	32f24 <__divsi3+0x7c>
   32f20:	02cb      	lsls	r3, r1, #11
   32f22:	1ac0      	subs	r0, r0, r3
   32f24:	4152      	adcs	r2, r2
   32f26:	0a83      	lsrs	r3, r0, #10
   32f28:	428b      	cmp	r3, r1
   32f2a:	d301      	bcc.n	32f30 <__divsi3+0x88>
   32f2c:	028b      	lsls	r3, r1, #10
   32f2e:	1ac0      	subs	r0, r0, r3
   32f30:	4152      	adcs	r2, r2
   32f32:	0a43      	lsrs	r3, r0, #9
   32f34:	428b      	cmp	r3, r1
   32f36:	d301      	bcc.n	32f3c <__divsi3+0x94>
   32f38:	024b      	lsls	r3, r1, #9
   32f3a:	1ac0      	subs	r0, r0, r3
   32f3c:	4152      	adcs	r2, r2
   32f3e:	0a03      	lsrs	r3, r0, #8
   32f40:	428b      	cmp	r3, r1
   32f42:	d301      	bcc.n	32f48 <__divsi3+0xa0>
   32f44:	020b      	lsls	r3, r1, #8
   32f46:	1ac0      	subs	r0, r0, r3
   32f48:	4152      	adcs	r2, r2
   32f4a:	d2cd      	bcs.n	32ee8 <__divsi3+0x40>
   32f4c:	09c3      	lsrs	r3, r0, #7
   32f4e:	428b      	cmp	r3, r1
   32f50:	d301      	bcc.n	32f56 <__divsi3+0xae>
   32f52:	01cb      	lsls	r3, r1, #7
   32f54:	1ac0      	subs	r0, r0, r3
   32f56:	4152      	adcs	r2, r2
   32f58:	0983      	lsrs	r3, r0, #6
   32f5a:	428b      	cmp	r3, r1
   32f5c:	d301      	bcc.n	32f62 <__divsi3+0xba>
   32f5e:	018b      	lsls	r3, r1, #6
   32f60:	1ac0      	subs	r0, r0, r3
   32f62:	4152      	adcs	r2, r2
   32f64:	0943      	lsrs	r3, r0, #5
   32f66:	428b      	cmp	r3, r1
   32f68:	d301      	bcc.n	32f6e <__divsi3+0xc6>
   32f6a:	014b      	lsls	r3, r1, #5
   32f6c:	1ac0      	subs	r0, r0, r3
   32f6e:	4152      	adcs	r2, r2
   32f70:	0903      	lsrs	r3, r0, #4
   32f72:	428b      	cmp	r3, r1
   32f74:	d301      	bcc.n	32f7a <__divsi3+0xd2>
   32f76:	010b      	lsls	r3, r1, #4
   32f78:	1ac0      	subs	r0, r0, r3
   32f7a:	4152      	adcs	r2, r2
   32f7c:	08c3      	lsrs	r3, r0, #3
   32f7e:	428b      	cmp	r3, r1
   32f80:	d301      	bcc.n	32f86 <__divsi3+0xde>
   32f82:	00cb      	lsls	r3, r1, #3
   32f84:	1ac0      	subs	r0, r0, r3
   32f86:	4152      	adcs	r2, r2
   32f88:	0883      	lsrs	r3, r0, #2
   32f8a:	428b      	cmp	r3, r1
   32f8c:	d301      	bcc.n	32f92 <__divsi3+0xea>
   32f8e:	008b      	lsls	r3, r1, #2
   32f90:	1ac0      	subs	r0, r0, r3
   32f92:	4152      	adcs	r2, r2
   32f94:	0843      	lsrs	r3, r0, #1
   32f96:	428b      	cmp	r3, r1
   32f98:	d301      	bcc.n	32f9e <__divsi3+0xf6>
   32f9a:	004b      	lsls	r3, r1, #1
   32f9c:	1ac0      	subs	r0, r0, r3
   32f9e:	4152      	adcs	r2, r2
   32fa0:	1a41      	subs	r1, r0, r1
   32fa2:	d200      	bcs.n	32fa6 <__divsi3+0xfe>
   32fa4:	4601      	mov	r1, r0
   32fa6:	4152      	adcs	r2, r2
   32fa8:	4610      	mov	r0, r2
   32faa:	4770      	bx	lr
   32fac:	e05d      	b.n	3306a <__divsi3+0x1c2>
   32fae:	0fca      	lsrs	r2, r1, #31
   32fb0:	d000      	beq.n	32fb4 <__divsi3+0x10c>
   32fb2:	4249      	negs	r1, r1
   32fb4:	1003      	asrs	r3, r0, #32
   32fb6:	d300      	bcc.n	32fba <__divsi3+0x112>
   32fb8:	4240      	negs	r0, r0
   32fba:	4053      	eors	r3, r2
   32fbc:	2200      	movs	r2, #0
   32fbe:	469c      	mov	ip, r3
   32fc0:	0903      	lsrs	r3, r0, #4
   32fc2:	428b      	cmp	r3, r1
   32fc4:	d32d      	bcc.n	33022 <__divsi3+0x17a>
   32fc6:	0a03      	lsrs	r3, r0, #8
   32fc8:	428b      	cmp	r3, r1
   32fca:	d312      	bcc.n	32ff2 <__divsi3+0x14a>
   32fcc:	22fc      	movs	r2, #252	; 0xfc
   32fce:	0189      	lsls	r1, r1, #6
   32fd0:	ba12      	rev	r2, r2
   32fd2:	0a03      	lsrs	r3, r0, #8
   32fd4:	428b      	cmp	r3, r1
   32fd6:	d30c      	bcc.n	32ff2 <__divsi3+0x14a>
   32fd8:	0189      	lsls	r1, r1, #6
   32fda:	1192      	asrs	r2, r2, #6
   32fdc:	428b      	cmp	r3, r1
   32fde:	d308      	bcc.n	32ff2 <__divsi3+0x14a>
   32fe0:	0189      	lsls	r1, r1, #6
   32fe2:	1192      	asrs	r2, r2, #6
   32fe4:	428b      	cmp	r3, r1
   32fe6:	d304      	bcc.n	32ff2 <__divsi3+0x14a>
   32fe8:	0189      	lsls	r1, r1, #6
   32fea:	d03a      	beq.n	33062 <__divsi3+0x1ba>
   32fec:	1192      	asrs	r2, r2, #6
   32fee:	e000      	b.n	32ff2 <__divsi3+0x14a>
   32ff0:	0989      	lsrs	r1, r1, #6
   32ff2:	09c3      	lsrs	r3, r0, #7
   32ff4:	428b      	cmp	r3, r1
   32ff6:	d301      	bcc.n	32ffc <__divsi3+0x154>
   32ff8:	01cb      	lsls	r3, r1, #7
   32ffa:	1ac0      	subs	r0, r0, r3
   32ffc:	4152      	adcs	r2, r2
   32ffe:	0983      	lsrs	r3, r0, #6
   33000:	428b      	cmp	r3, r1
   33002:	d301      	bcc.n	33008 <__divsi3+0x160>
   33004:	018b      	lsls	r3, r1, #6
   33006:	1ac0      	subs	r0, r0, r3
   33008:	4152      	adcs	r2, r2
   3300a:	0943      	lsrs	r3, r0, #5
   3300c:	428b      	cmp	r3, r1
   3300e:	d301      	bcc.n	33014 <__divsi3+0x16c>
   33010:	014b      	lsls	r3, r1, #5
   33012:	1ac0      	subs	r0, r0, r3
   33014:	4152      	adcs	r2, r2
   33016:	0903      	lsrs	r3, r0, #4
   33018:	428b      	cmp	r3, r1
   3301a:	d301      	bcc.n	33020 <__divsi3+0x178>
   3301c:	010b      	lsls	r3, r1, #4
   3301e:	1ac0      	subs	r0, r0, r3
   33020:	4152      	adcs	r2, r2
   33022:	08c3      	lsrs	r3, r0, #3
   33024:	428b      	cmp	r3, r1
   33026:	d301      	bcc.n	3302c <__divsi3+0x184>
   33028:	00cb      	lsls	r3, r1, #3
   3302a:	1ac0      	subs	r0, r0, r3
   3302c:	4152      	adcs	r2, r2
   3302e:	0883      	lsrs	r3, r0, #2
   33030:	428b      	cmp	r3, r1
   33032:	d301      	bcc.n	33038 <__divsi3+0x190>
   33034:	008b      	lsls	r3, r1, #2
   33036:	1ac0      	subs	r0, r0, r3
   33038:	4152      	adcs	r2, r2
   3303a:	d2d9      	bcs.n	32ff0 <__divsi3+0x148>
   3303c:	0843      	lsrs	r3, r0, #1
   3303e:	428b      	cmp	r3, r1
   33040:	d301      	bcc.n	33046 <__divsi3+0x19e>
   33042:	004b      	lsls	r3, r1, #1
   33044:	1ac0      	subs	r0, r0, r3
   33046:	4152      	adcs	r2, r2
   33048:	1a41      	subs	r1, r0, r1
   3304a:	d200      	bcs.n	3304e <__divsi3+0x1a6>
   3304c:	4601      	mov	r1, r0
   3304e:	4663      	mov	r3, ip
   33050:	4152      	adcs	r2, r2
   33052:	105b      	asrs	r3, r3, #1
   33054:	4610      	mov	r0, r2
   33056:	d301      	bcc.n	3305c <__divsi3+0x1b4>
   33058:	4240      	negs	r0, r0
   3305a:	2b00      	cmp	r3, #0
   3305c:	d500      	bpl.n	33060 <__divsi3+0x1b8>
   3305e:	4249      	negs	r1, r1
   33060:	4770      	bx	lr
   33062:	4663      	mov	r3, ip
   33064:	105b      	asrs	r3, r3, #1
   33066:	d300      	bcc.n	3306a <__divsi3+0x1c2>
   33068:	4240      	negs	r0, r0
   3306a:	b501      	push	{r0, lr}
   3306c:	2000      	movs	r0, #0
   3306e:	f000 f805 	bl	3307c <__aeabi_idiv0>
   33072:	bd02      	pop	{r1, pc}

00033074 <__aeabi_idivmod>:
   33074:	2900      	cmp	r1, #0
   33076:	d0f8      	beq.n	3306a <__divsi3+0x1c2>
   33078:	e716      	b.n	32ea8 <__divsi3>
   3307a:	4770      	bx	lr

0003307c <__aeabi_idiv0>:
   3307c:	4770      	bx	lr
   3307e:	46c0      	nop			; (mov r8, r8)

00033080 <__aeabi_lmul>:
   33080:	b5f0      	push	{r4, r5, r6, r7, lr}
   33082:	46ce      	mov	lr, r9
   33084:	4647      	mov	r7, r8
   33086:	0415      	lsls	r5, r2, #16
   33088:	0c2d      	lsrs	r5, r5, #16
   3308a:	002e      	movs	r6, r5
   3308c:	b580      	push	{r7, lr}
   3308e:	0407      	lsls	r7, r0, #16
   33090:	0c14      	lsrs	r4, r2, #16
   33092:	0c3f      	lsrs	r7, r7, #16
   33094:	4699      	mov	r9, r3
   33096:	0c03      	lsrs	r3, r0, #16
   33098:	437e      	muls	r6, r7
   3309a:	435d      	muls	r5, r3
   3309c:	4367      	muls	r7, r4
   3309e:	4363      	muls	r3, r4
   330a0:	197f      	adds	r7, r7, r5
   330a2:	0c34      	lsrs	r4, r6, #16
   330a4:	19e4      	adds	r4, r4, r7
   330a6:	469c      	mov	ip, r3
   330a8:	42a5      	cmp	r5, r4
   330aa:	d903      	bls.n	330b4 <__aeabi_lmul+0x34>
   330ac:	2380      	movs	r3, #128	; 0x80
   330ae:	025b      	lsls	r3, r3, #9
   330b0:	4698      	mov	r8, r3
   330b2:	44c4      	add	ip, r8
   330b4:	464b      	mov	r3, r9
   330b6:	4351      	muls	r1, r2
   330b8:	4343      	muls	r3, r0
   330ba:	0436      	lsls	r6, r6, #16
   330bc:	0c36      	lsrs	r6, r6, #16
   330be:	0c25      	lsrs	r5, r4, #16
   330c0:	0424      	lsls	r4, r4, #16
   330c2:	4465      	add	r5, ip
   330c4:	19a4      	adds	r4, r4, r6
   330c6:	1859      	adds	r1, r3, r1
   330c8:	1949      	adds	r1, r1, r5
   330ca:	0020      	movs	r0, r4
   330cc:	bc0c      	pop	{r2, r3}
   330ce:	4690      	mov	r8, r2
   330d0:	4699      	mov	r9, r3
   330d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000330d4 <__aeabi_fmul>:
   330d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   330d6:	4657      	mov	r7, sl
   330d8:	464e      	mov	r6, r9
   330da:	4645      	mov	r5, r8
   330dc:	46de      	mov	lr, fp
   330de:	b5e0      	push	{r5, r6, r7, lr}
   330e0:	0247      	lsls	r7, r0, #9
   330e2:	0046      	lsls	r6, r0, #1
   330e4:	4688      	mov	r8, r1
   330e6:	0a7f      	lsrs	r7, r7, #9
   330e8:	0e36      	lsrs	r6, r6, #24
   330ea:	0fc4      	lsrs	r4, r0, #31
   330ec:	2e00      	cmp	r6, #0
   330ee:	d047      	beq.n	33180 <__aeabi_fmul+0xac>
   330f0:	2eff      	cmp	r6, #255	; 0xff
   330f2:	d024      	beq.n	3313e <__aeabi_fmul+0x6a>
   330f4:	00fb      	lsls	r3, r7, #3
   330f6:	2780      	movs	r7, #128	; 0x80
   330f8:	04ff      	lsls	r7, r7, #19
   330fa:	431f      	orrs	r7, r3
   330fc:	2300      	movs	r3, #0
   330fe:	4699      	mov	r9, r3
   33100:	469a      	mov	sl, r3
   33102:	3e7f      	subs	r6, #127	; 0x7f
   33104:	4643      	mov	r3, r8
   33106:	025d      	lsls	r5, r3, #9
   33108:	0058      	lsls	r0, r3, #1
   3310a:	0fdb      	lsrs	r3, r3, #31
   3310c:	0a6d      	lsrs	r5, r5, #9
   3310e:	0e00      	lsrs	r0, r0, #24
   33110:	4698      	mov	r8, r3
   33112:	d043      	beq.n	3319c <__aeabi_fmul+0xc8>
   33114:	28ff      	cmp	r0, #255	; 0xff
   33116:	d03b      	beq.n	33190 <__aeabi_fmul+0xbc>
   33118:	00eb      	lsls	r3, r5, #3
   3311a:	2580      	movs	r5, #128	; 0x80
   3311c:	2200      	movs	r2, #0
   3311e:	04ed      	lsls	r5, r5, #19
   33120:	431d      	orrs	r5, r3
   33122:	387f      	subs	r0, #127	; 0x7f
   33124:	1836      	adds	r6, r6, r0
   33126:	1c73      	adds	r3, r6, #1
   33128:	4641      	mov	r1, r8
   3312a:	469b      	mov	fp, r3
   3312c:	464b      	mov	r3, r9
   3312e:	4061      	eors	r1, r4
   33130:	4313      	orrs	r3, r2
   33132:	2b0f      	cmp	r3, #15
   33134:	d864      	bhi.n	33200 <__aeabi_fmul+0x12c>
   33136:	4875      	ldr	r0, [pc, #468]	; (3330c <__aeabi_fmul+0x238>)
   33138:	009b      	lsls	r3, r3, #2
   3313a:	58c3      	ldr	r3, [r0, r3]
   3313c:	469f      	mov	pc, r3
   3313e:	2f00      	cmp	r7, #0
   33140:	d142      	bne.n	331c8 <__aeabi_fmul+0xf4>
   33142:	2308      	movs	r3, #8
   33144:	4699      	mov	r9, r3
   33146:	3b06      	subs	r3, #6
   33148:	26ff      	movs	r6, #255	; 0xff
   3314a:	469a      	mov	sl, r3
   3314c:	e7da      	b.n	33104 <__aeabi_fmul+0x30>
   3314e:	4641      	mov	r1, r8
   33150:	2a02      	cmp	r2, #2
   33152:	d028      	beq.n	331a6 <__aeabi_fmul+0xd2>
   33154:	2a03      	cmp	r2, #3
   33156:	d100      	bne.n	3315a <__aeabi_fmul+0x86>
   33158:	e0ce      	b.n	332f8 <__aeabi_fmul+0x224>
   3315a:	2a01      	cmp	r2, #1
   3315c:	d000      	beq.n	33160 <__aeabi_fmul+0x8c>
   3315e:	e0ac      	b.n	332ba <__aeabi_fmul+0x1e6>
   33160:	4011      	ands	r1, r2
   33162:	2000      	movs	r0, #0
   33164:	2200      	movs	r2, #0
   33166:	b2cc      	uxtb	r4, r1
   33168:	0240      	lsls	r0, r0, #9
   3316a:	05d2      	lsls	r2, r2, #23
   3316c:	0a40      	lsrs	r0, r0, #9
   3316e:	07e4      	lsls	r4, r4, #31
   33170:	4310      	orrs	r0, r2
   33172:	4320      	orrs	r0, r4
   33174:	bc3c      	pop	{r2, r3, r4, r5}
   33176:	4690      	mov	r8, r2
   33178:	4699      	mov	r9, r3
   3317a:	46a2      	mov	sl, r4
   3317c:	46ab      	mov	fp, r5
   3317e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33180:	2f00      	cmp	r7, #0
   33182:	d115      	bne.n	331b0 <__aeabi_fmul+0xdc>
   33184:	2304      	movs	r3, #4
   33186:	4699      	mov	r9, r3
   33188:	3b03      	subs	r3, #3
   3318a:	2600      	movs	r6, #0
   3318c:	469a      	mov	sl, r3
   3318e:	e7b9      	b.n	33104 <__aeabi_fmul+0x30>
   33190:	20ff      	movs	r0, #255	; 0xff
   33192:	2202      	movs	r2, #2
   33194:	2d00      	cmp	r5, #0
   33196:	d0c5      	beq.n	33124 <__aeabi_fmul+0x50>
   33198:	2203      	movs	r2, #3
   3319a:	e7c3      	b.n	33124 <__aeabi_fmul+0x50>
   3319c:	2d00      	cmp	r5, #0
   3319e:	d119      	bne.n	331d4 <__aeabi_fmul+0x100>
   331a0:	2000      	movs	r0, #0
   331a2:	2201      	movs	r2, #1
   331a4:	e7be      	b.n	33124 <__aeabi_fmul+0x50>
   331a6:	2401      	movs	r4, #1
   331a8:	22ff      	movs	r2, #255	; 0xff
   331aa:	400c      	ands	r4, r1
   331ac:	2000      	movs	r0, #0
   331ae:	e7db      	b.n	33168 <__aeabi_fmul+0x94>
   331b0:	0038      	movs	r0, r7
   331b2:	f001 fdb7 	bl	34d24 <__clzsi2>
   331b6:	2676      	movs	r6, #118	; 0x76
   331b8:	1f43      	subs	r3, r0, #5
   331ba:	409f      	lsls	r7, r3
   331bc:	2300      	movs	r3, #0
   331be:	4276      	negs	r6, r6
   331c0:	1a36      	subs	r6, r6, r0
   331c2:	4699      	mov	r9, r3
   331c4:	469a      	mov	sl, r3
   331c6:	e79d      	b.n	33104 <__aeabi_fmul+0x30>
   331c8:	230c      	movs	r3, #12
   331ca:	4699      	mov	r9, r3
   331cc:	3b09      	subs	r3, #9
   331ce:	26ff      	movs	r6, #255	; 0xff
   331d0:	469a      	mov	sl, r3
   331d2:	e797      	b.n	33104 <__aeabi_fmul+0x30>
   331d4:	0028      	movs	r0, r5
   331d6:	f001 fda5 	bl	34d24 <__clzsi2>
   331da:	1f43      	subs	r3, r0, #5
   331dc:	409d      	lsls	r5, r3
   331de:	2376      	movs	r3, #118	; 0x76
   331e0:	425b      	negs	r3, r3
   331e2:	1a18      	subs	r0, r3, r0
   331e4:	2200      	movs	r2, #0
   331e6:	e79d      	b.n	33124 <__aeabi_fmul+0x50>
   331e8:	2080      	movs	r0, #128	; 0x80
   331ea:	2400      	movs	r4, #0
   331ec:	03c0      	lsls	r0, r0, #15
   331ee:	22ff      	movs	r2, #255	; 0xff
   331f0:	e7ba      	b.n	33168 <__aeabi_fmul+0x94>
   331f2:	003d      	movs	r5, r7
   331f4:	4652      	mov	r2, sl
   331f6:	e7ab      	b.n	33150 <__aeabi_fmul+0x7c>
   331f8:	003d      	movs	r5, r7
   331fa:	0021      	movs	r1, r4
   331fc:	4652      	mov	r2, sl
   331fe:	e7a7      	b.n	33150 <__aeabi_fmul+0x7c>
   33200:	0c3b      	lsrs	r3, r7, #16
   33202:	469c      	mov	ip, r3
   33204:	042a      	lsls	r2, r5, #16
   33206:	0c12      	lsrs	r2, r2, #16
   33208:	0c2b      	lsrs	r3, r5, #16
   3320a:	0014      	movs	r4, r2
   3320c:	4660      	mov	r0, ip
   3320e:	4665      	mov	r5, ip
   33210:	043f      	lsls	r7, r7, #16
   33212:	0c3f      	lsrs	r7, r7, #16
   33214:	437c      	muls	r4, r7
   33216:	4342      	muls	r2, r0
   33218:	435d      	muls	r5, r3
   3321a:	437b      	muls	r3, r7
   3321c:	0c27      	lsrs	r7, r4, #16
   3321e:	189b      	adds	r3, r3, r2
   33220:	18ff      	adds	r7, r7, r3
   33222:	42ba      	cmp	r2, r7
   33224:	d903      	bls.n	3322e <__aeabi_fmul+0x15a>
   33226:	2380      	movs	r3, #128	; 0x80
   33228:	025b      	lsls	r3, r3, #9
   3322a:	469c      	mov	ip, r3
   3322c:	4465      	add	r5, ip
   3322e:	0424      	lsls	r4, r4, #16
   33230:	043a      	lsls	r2, r7, #16
   33232:	0c24      	lsrs	r4, r4, #16
   33234:	1912      	adds	r2, r2, r4
   33236:	0193      	lsls	r3, r2, #6
   33238:	1e5c      	subs	r4, r3, #1
   3323a:	41a3      	sbcs	r3, r4
   3323c:	0c3f      	lsrs	r7, r7, #16
   3323e:	0e92      	lsrs	r2, r2, #26
   33240:	197d      	adds	r5, r7, r5
   33242:	431a      	orrs	r2, r3
   33244:	01ad      	lsls	r5, r5, #6
   33246:	4315      	orrs	r5, r2
   33248:	012b      	lsls	r3, r5, #4
   3324a:	d504      	bpl.n	33256 <__aeabi_fmul+0x182>
   3324c:	2301      	movs	r3, #1
   3324e:	465e      	mov	r6, fp
   33250:	086a      	lsrs	r2, r5, #1
   33252:	401d      	ands	r5, r3
   33254:	4315      	orrs	r5, r2
   33256:	0032      	movs	r2, r6
   33258:	327f      	adds	r2, #127	; 0x7f
   3325a:	2a00      	cmp	r2, #0
   3325c:	dd25      	ble.n	332aa <__aeabi_fmul+0x1d6>
   3325e:	076b      	lsls	r3, r5, #29
   33260:	d004      	beq.n	3326c <__aeabi_fmul+0x198>
   33262:	230f      	movs	r3, #15
   33264:	402b      	ands	r3, r5
   33266:	2b04      	cmp	r3, #4
   33268:	d000      	beq.n	3326c <__aeabi_fmul+0x198>
   3326a:	3504      	adds	r5, #4
   3326c:	012b      	lsls	r3, r5, #4
   3326e:	d503      	bpl.n	33278 <__aeabi_fmul+0x1a4>
   33270:	0032      	movs	r2, r6
   33272:	4b27      	ldr	r3, [pc, #156]	; (33310 <__aeabi_fmul+0x23c>)
   33274:	3280      	adds	r2, #128	; 0x80
   33276:	401d      	ands	r5, r3
   33278:	2afe      	cmp	r2, #254	; 0xfe
   3327a:	dc94      	bgt.n	331a6 <__aeabi_fmul+0xd2>
   3327c:	2401      	movs	r4, #1
   3327e:	01a8      	lsls	r0, r5, #6
   33280:	0a40      	lsrs	r0, r0, #9
   33282:	b2d2      	uxtb	r2, r2
   33284:	400c      	ands	r4, r1
   33286:	e76f      	b.n	33168 <__aeabi_fmul+0x94>
   33288:	2080      	movs	r0, #128	; 0x80
   3328a:	03c0      	lsls	r0, r0, #15
   3328c:	4207      	tst	r7, r0
   3328e:	d007      	beq.n	332a0 <__aeabi_fmul+0x1cc>
   33290:	4205      	tst	r5, r0
   33292:	d105      	bne.n	332a0 <__aeabi_fmul+0x1cc>
   33294:	4328      	orrs	r0, r5
   33296:	0240      	lsls	r0, r0, #9
   33298:	0a40      	lsrs	r0, r0, #9
   3329a:	4644      	mov	r4, r8
   3329c:	22ff      	movs	r2, #255	; 0xff
   3329e:	e763      	b.n	33168 <__aeabi_fmul+0x94>
   332a0:	4338      	orrs	r0, r7
   332a2:	0240      	lsls	r0, r0, #9
   332a4:	0a40      	lsrs	r0, r0, #9
   332a6:	22ff      	movs	r2, #255	; 0xff
   332a8:	e75e      	b.n	33168 <__aeabi_fmul+0x94>
   332aa:	2401      	movs	r4, #1
   332ac:	1aa3      	subs	r3, r4, r2
   332ae:	2b1b      	cmp	r3, #27
   332b0:	dd05      	ble.n	332be <__aeabi_fmul+0x1ea>
   332b2:	400c      	ands	r4, r1
   332b4:	2200      	movs	r2, #0
   332b6:	2000      	movs	r0, #0
   332b8:	e756      	b.n	33168 <__aeabi_fmul+0x94>
   332ba:	465e      	mov	r6, fp
   332bc:	e7cb      	b.n	33256 <__aeabi_fmul+0x182>
   332be:	002a      	movs	r2, r5
   332c0:	2020      	movs	r0, #32
   332c2:	40da      	lsrs	r2, r3
   332c4:	1ac3      	subs	r3, r0, r3
   332c6:	409d      	lsls	r5, r3
   332c8:	002b      	movs	r3, r5
   332ca:	1e5d      	subs	r5, r3, #1
   332cc:	41ab      	sbcs	r3, r5
   332ce:	4313      	orrs	r3, r2
   332d0:	075a      	lsls	r2, r3, #29
   332d2:	d004      	beq.n	332de <__aeabi_fmul+0x20a>
   332d4:	220f      	movs	r2, #15
   332d6:	401a      	ands	r2, r3
   332d8:	2a04      	cmp	r2, #4
   332da:	d000      	beq.n	332de <__aeabi_fmul+0x20a>
   332dc:	3304      	adds	r3, #4
   332de:	015a      	lsls	r2, r3, #5
   332e0:	d504      	bpl.n	332ec <__aeabi_fmul+0x218>
   332e2:	2401      	movs	r4, #1
   332e4:	2201      	movs	r2, #1
   332e6:	400c      	ands	r4, r1
   332e8:	2000      	movs	r0, #0
   332ea:	e73d      	b.n	33168 <__aeabi_fmul+0x94>
   332ec:	2401      	movs	r4, #1
   332ee:	019b      	lsls	r3, r3, #6
   332f0:	0a58      	lsrs	r0, r3, #9
   332f2:	400c      	ands	r4, r1
   332f4:	2200      	movs	r2, #0
   332f6:	e737      	b.n	33168 <__aeabi_fmul+0x94>
   332f8:	2080      	movs	r0, #128	; 0x80
   332fa:	2401      	movs	r4, #1
   332fc:	03c0      	lsls	r0, r0, #15
   332fe:	4328      	orrs	r0, r5
   33300:	0240      	lsls	r0, r0, #9
   33302:	0a40      	lsrs	r0, r0, #9
   33304:	400c      	ands	r4, r1
   33306:	22ff      	movs	r2, #255	; 0xff
   33308:	e72e      	b.n	33168 <__aeabi_fmul+0x94>
   3330a:	46c0      	nop			; (mov r8, r8)
   3330c:	0003a634 	.word	0x0003a634
   33310:	f7ffffff 	.word	0xf7ffffff

00033314 <__aeabi_f2iz>:
   33314:	0241      	lsls	r1, r0, #9
   33316:	0043      	lsls	r3, r0, #1
   33318:	0fc2      	lsrs	r2, r0, #31
   3331a:	0a49      	lsrs	r1, r1, #9
   3331c:	0e1b      	lsrs	r3, r3, #24
   3331e:	2000      	movs	r0, #0
   33320:	2b7e      	cmp	r3, #126	; 0x7e
   33322:	dd0d      	ble.n	33340 <__aeabi_f2iz+0x2c>
   33324:	2b9d      	cmp	r3, #157	; 0x9d
   33326:	dc0c      	bgt.n	33342 <__aeabi_f2iz+0x2e>
   33328:	2080      	movs	r0, #128	; 0x80
   3332a:	0400      	lsls	r0, r0, #16
   3332c:	4301      	orrs	r1, r0
   3332e:	2b95      	cmp	r3, #149	; 0x95
   33330:	dc0a      	bgt.n	33348 <__aeabi_f2iz+0x34>
   33332:	2096      	movs	r0, #150	; 0x96
   33334:	1ac3      	subs	r3, r0, r3
   33336:	40d9      	lsrs	r1, r3
   33338:	4248      	negs	r0, r1
   3333a:	2a00      	cmp	r2, #0
   3333c:	d100      	bne.n	33340 <__aeabi_f2iz+0x2c>
   3333e:	0008      	movs	r0, r1
   33340:	4770      	bx	lr
   33342:	4b03      	ldr	r3, [pc, #12]	; (33350 <__aeabi_f2iz+0x3c>)
   33344:	18d0      	adds	r0, r2, r3
   33346:	e7fb      	b.n	33340 <__aeabi_f2iz+0x2c>
   33348:	3b96      	subs	r3, #150	; 0x96
   3334a:	4099      	lsls	r1, r3
   3334c:	e7f4      	b.n	33338 <__aeabi_f2iz+0x24>
   3334e:	46c0      	nop			; (mov r8, r8)
   33350:	7fffffff 	.word	0x7fffffff

00033354 <__aeabi_i2f>:
   33354:	b570      	push	{r4, r5, r6, lr}
   33356:	2800      	cmp	r0, #0
   33358:	d030      	beq.n	333bc <__aeabi_i2f+0x68>
   3335a:	17c3      	asrs	r3, r0, #31
   3335c:	18c4      	adds	r4, r0, r3
   3335e:	405c      	eors	r4, r3
   33360:	0fc5      	lsrs	r5, r0, #31
   33362:	0020      	movs	r0, r4
   33364:	f001 fcde 	bl	34d24 <__clzsi2>
   33368:	239e      	movs	r3, #158	; 0x9e
   3336a:	1a1b      	subs	r3, r3, r0
   3336c:	2b96      	cmp	r3, #150	; 0x96
   3336e:	dc0d      	bgt.n	3338c <__aeabi_i2f+0x38>
   33370:	2296      	movs	r2, #150	; 0x96
   33372:	1ad2      	subs	r2, r2, r3
   33374:	4094      	lsls	r4, r2
   33376:	002a      	movs	r2, r5
   33378:	0264      	lsls	r4, r4, #9
   3337a:	0a64      	lsrs	r4, r4, #9
   3337c:	b2db      	uxtb	r3, r3
   3337e:	0264      	lsls	r4, r4, #9
   33380:	05db      	lsls	r3, r3, #23
   33382:	0a60      	lsrs	r0, r4, #9
   33384:	07d2      	lsls	r2, r2, #31
   33386:	4318      	orrs	r0, r3
   33388:	4310      	orrs	r0, r2
   3338a:	bd70      	pop	{r4, r5, r6, pc}
   3338c:	2b99      	cmp	r3, #153	; 0x99
   3338e:	dc19      	bgt.n	333c4 <__aeabi_i2f+0x70>
   33390:	2299      	movs	r2, #153	; 0x99
   33392:	1ad2      	subs	r2, r2, r3
   33394:	2a00      	cmp	r2, #0
   33396:	dd29      	ble.n	333ec <__aeabi_i2f+0x98>
   33398:	4094      	lsls	r4, r2
   3339a:	0022      	movs	r2, r4
   3339c:	4c14      	ldr	r4, [pc, #80]	; (333f0 <__aeabi_i2f+0x9c>)
   3339e:	4014      	ands	r4, r2
   333a0:	0751      	lsls	r1, r2, #29
   333a2:	d004      	beq.n	333ae <__aeabi_i2f+0x5a>
   333a4:	210f      	movs	r1, #15
   333a6:	400a      	ands	r2, r1
   333a8:	2a04      	cmp	r2, #4
   333aa:	d000      	beq.n	333ae <__aeabi_i2f+0x5a>
   333ac:	3404      	adds	r4, #4
   333ae:	0162      	lsls	r2, r4, #5
   333b0:	d413      	bmi.n	333da <__aeabi_i2f+0x86>
   333b2:	01a4      	lsls	r4, r4, #6
   333b4:	0a64      	lsrs	r4, r4, #9
   333b6:	b2db      	uxtb	r3, r3
   333b8:	002a      	movs	r2, r5
   333ba:	e7e0      	b.n	3337e <__aeabi_i2f+0x2a>
   333bc:	2200      	movs	r2, #0
   333be:	2300      	movs	r3, #0
   333c0:	2400      	movs	r4, #0
   333c2:	e7dc      	b.n	3337e <__aeabi_i2f+0x2a>
   333c4:	2205      	movs	r2, #5
   333c6:	0021      	movs	r1, r4
   333c8:	1a12      	subs	r2, r2, r0
   333ca:	40d1      	lsrs	r1, r2
   333cc:	22b9      	movs	r2, #185	; 0xb9
   333ce:	1ad2      	subs	r2, r2, r3
   333d0:	4094      	lsls	r4, r2
   333d2:	1e62      	subs	r2, r4, #1
   333d4:	4194      	sbcs	r4, r2
   333d6:	430c      	orrs	r4, r1
   333d8:	e7da      	b.n	33390 <__aeabi_i2f+0x3c>
   333da:	4b05      	ldr	r3, [pc, #20]	; (333f0 <__aeabi_i2f+0x9c>)
   333dc:	002a      	movs	r2, r5
   333de:	401c      	ands	r4, r3
   333e0:	239f      	movs	r3, #159	; 0x9f
   333e2:	01a4      	lsls	r4, r4, #6
   333e4:	1a1b      	subs	r3, r3, r0
   333e6:	0a64      	lsrs	r4, r4, #9
   333e8:	b2db      	uxtb	r3, r3
   333ea:	e7c8      	b.n	3337e <__aeabi_i2f+0x2a>
   333ec:	0022      	movs	r2, r4
   333ee:	e7d5      	b.n	3339c <__aeabi_i2f+0x48>
   333f0:	fbffffff 	.word	0xfbffffff

000333f4 <__aeabi_dadd>:
   333f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   333f6:	4645      	mov	r5, r8
   333f8:	46de      	mov	lr, fp
   333fa:	4657      	mov	r7, sl
   333fc:	464e      	mov	r6, r9
   333fe:	030c      	lsls	r4, r1, #12
   33400:	b5e0      	push	{r5, r6, r7, lr}
   33402:	004e      	lsls	r6, r1, #1
   33404:	0fc9      	lsrs	r1, r1, #31
   33406:	4688      	mov	r8, r1
   33408:	000d      	movs	r5, r1
   3340a:	0a61      	lsrs	r1, r4, #9
   3340c:	0f44      	lsrs	r4, r0, #29
   3340e:	430c      	orrs	r4, r1
   33410:	00c7      	lsls	r7, r0, #3
   33412:	0319      	lsls	r1, r3, #12
   33414:	0058      	lsls	r0, r3, #1
   33416:	0fdb      	lsrs	r3, r3, #31
   33418:	469b      	mov	fp, r3
   3341a:	0a4b      	lsrs	r3, r1, #9
   3341c:	0f51      	lsrs	r1, r2, #29
   3341e:	430b      	orrs	r3, r1
   33420:	0d76      	lsrs	r6, r6, #21
   33422:	0d40      	lsrs	r0, r0, #21
   33424:	0019      	movs	r1, r3
   33426:	00d2      	lsls	r2, r2, #3
   33428:	45d8      	cmp	r8, fp
   3342a:	d100      	bne.n	3342e <__aeabi_dadd+0x3a>
   3342c:	e0ae      	b.n	3358c <__aeabi_dadd+0x198>
   3342e:	1a35      	subs	r5, r6, r0
   33430:	2d00      	cmp	r5, #0
   33432:	dc00      	bgt.n	33436 <__aeabi_dadd+0x42>
   33434:	e0f6      	b.n	33624 <__aeabi_dadd+0x230>
   33436:	2800      	cmp	r0, #0
   33438:	d10f      	bne.n	3345a <__aeabi_dadd+0x66>
   3343a:	4313      	orrs	r3, r2
   3343c:	d100      	bne.n	33440 <__aeabi_dadd+0x4c>
   3343e:	e0db      	b.n	335f8 <__aeabi_dadd+0x204>
   33440:	1e6b      	subs	r3, r5, #1
   33442:	2b00      	cmp	r3, #0
   33444:	d000      	beq.n	33448 <__aeabi_dadd+0x54>
   33446:	e137      	b.n	336b8 <__aeabi_dadd+0x2c4>
   33448:	1aba      	subs	r2, r7, r2
   3344a:	4297      	cmp	r7, r2
   3344c:	41bf      	sbcs	r7, r7
   3344e:	1a64      	subs	r4, r4, r1
   33450:	427f      	negs	r7, r7
   33452:	1be4      	subs	r4, r4, r7
   33454:	2601      	movs	r6, #1
   33456:	0017      	movs	r7, r2
   33458:	e024      	b.n	334a4 <__aeabi_dadd+0xb0>
   3345a:	4bc6      	ldr	r3, [pc, #792]	; (33774 <__aeabi_dadd+0x380>)
   3345c:	429e      	cmp	r6, r3
   3345e:	d04d      	beq.n	334fc <__aeabi_dadd+0x108>
   33460:	2380      	movs	r3, #128	; 0x80
   33462:	041b      	lsls	r3, r3, #16
   33464:	4319      	orrs	r1, r3
   33466:	2d38      	cmp	r5, #56	; 0x38
   33468:	dd00      	ble.n	3346c <__aeabi_dadd+0x78>
   3346a:	e107      	b.n	3367c <__aeabi_dadd+0x288>
   3346c:	2d1f      	cmp	r5, #31
   3346e:	dd00      	ble.n	33472 <__aeabi_dadd+0x7e>
   33470:	e138      	b.n	336e4 <__aeabi_dadd+0x2f0>
   33472:	2020      	movs	r0, #32
   33474:	1b43      	subs	r3, r0, r5
   33476:	469a      	mov	sl, r3
   33478:	000b      	movs	r3, r1
   3347a:	4650      	mov	r0, sl
   3347c:	4083      	lsls	r3, r0
   3347e:	4699      	mov	r9, r3
   33480:	0013      	movs	r3, r2
   33482:	4648      	mov	r0, r9
   33484:	40eb      	lsrs	r3, r5
   33486:	4318      	orrs	r0, r3
   33488:	0003      	movs	r3, r0
   3348a:	4650      	mov	r0, sl
   3348c:	4082      	lsls	r2, r0
   3348e:	1e50      	subs	r0, r2, #1
   33490:	4182      	sbcs	r2, r0
   33492:	40e9      	lsrs	r1, r5
   33494:	431a      	orrs	r2, r3
   33496:	1aba      	subs	r2, r7, r2
   33498:	1a61      	subs	r1, r4, r1
   3349a:	4297      	cmp	r7, r2
   3349c:	41a4      	sbcs	r4, r4
   3349e:	0017      	movs	r7, r2
   334a0:	4264      	negs	r4, r4
   334a2:	1b0c      	subs	r4, r1, r4
   334a4:	0223      	lsls	r3, r4, #8
   334a6:	d562      	bpl.n	3356e <__aeabi_dadd+0x17a>
   334a8:	0264      	lsls	r4, r4, #9
   334aa:	0a65      	lsrs	r5, r4, #9
   334ac:	2d00      	cmp	r5, #0
   334ae:	d100      	bne.n	334b2 <__aeabi_dadd+0xbe>
   334b0:	e0df      	b.n	33672 <__aeabi_dadd+0x27e>
   334b2:	0028      	movs	r0, r5
   334b4:	f001 fc36 	bl	34d24 <__clzsi2>
   334b8:	0003      	movs	r3, r0
   334ba:	3b08      	subs	r3, #8
   334bc:	2b1f      	cmp	r3, #31
   334be:	dd00      	ble.n	334c2 <__aeabi_dadd+0xce>
   334c0:	e0d2      	b.n	33668 <__aeabi_dadd+0x274>
   334c2:	2220      	movs	r2, #32
   334c4:	003c      	movs	r4, r7
   334c6:	1ad2      	subs	r2, r2, r3
   334c8:	409d      	lsls	r5, r3
   334ca:	40d4      	lsrs	r4, r2
   334cc:	409f      	lsls	r7, r3
   334ce:	4325      	orrs	r5, r4
   334d0:	429e      	cmp	r6, r3
   334d2:	dd00      	ble.n	334d6 <__aeabi_dadd+0xe2>
   334d4:	e0c4      	b.n	33660 <__aeabi_dadd+0x26c>
   334d6:	1b9e      	subs	r6, r3, r6
   334d8:	1c73      	adds	r3, r6, #1
   334da:	2b1f      	cmp	r3, #31
   334dc:	dd00      	ble.n	334e0 <__aeabi_dadd+0xec>
   334de:	e0f1      	b.n	336c4 <__aeabi_dadd+0x2d0>
   334e0:	2220      	movs	r2, #32
   334e2:	0038      	movs	r0, r7
   334e4:	0029      	movs	r1, r5
   334e6:	1ad2      	subs	r2, r2, r3
   334e8:	40d8      	lsrs	r0, r3
   334ea:	4091      	lsls	r1, r2
   334ec:	4097      	lsls	r7, r2
   334ee:	002c      	movs	r4, r5
   334f0:	4301      	orrs	r1, r0
   334f2:	1e78      	subs	r0, r7, #1
   334f4:	4187      	sbcs	r7, r0
   334f6:	40dc      	lsrs	r4, r3
   334f8:	2600      	movs	r6, #0
   334fa:	430f      	orrs	r7, r1
   334fc:	077b      	lsls	r3, r7, #29
   334fe:	d009      	beq.n	33514 <__aeabi_dadd+0x120>
   33500:	230f      	movs	r3, #15
   33502:	403b      	ands	r3, r7
   33504:	2b04      	cmp	r3, #4
   33506:	d005      	beq.n	33514 <__aeabi_dadd+0x120>
   33508:	1d3b      	adds	r3, r7, #4
   3350a:	42bb      	cmp	r3, r7
   3350c:	41bf      	sbcs	r7, r7
   3350e:	427f      	negs	r7, r7
   33510:	19e4      	adds	r4, r4, r7
   33512:	001f      	movs	r7, r3
   33514:	0223      	lsls	r3, r4, #8
   33516:	d52c      	bpl.n	33572 <__aeabi_dadd+0x17e>
   33518:	4b96      	ldr	r3, [pc, #600]	; (33774 <__aeabi_dadd+0x380>)
   3351a:	3601      	adds	r6, #1
   3351c:	429e      	cmp	r6, r3
   3351e:	d100      	bne.n	33522 <__aeabi_dadd+0x12e>
   33520:	e09a      	b.n	33658 <__aeabi_dadd+0x264>
   33522:	4645      	mov	r5, r8
   33524:	4b94      	ldr	r3, [pc, #592]	; (33778 <__aeabi_dadd+0x384>)
   33526:	08ff      	lsrs	r7, r7, #3
   33528:	401c      	ands	r4, r3
   3352a:	0760      	lsls	r0, r4, #29
   3352c:	0576      	lsls	r6, r6, #21
   3352e:	0264      	lsls	r4, r4, #9
   33530:	4307      	orrs	r7, r0
   33532:	0b24      	lsrs	r4, r4, #12
   33534:	0d76      	lsrs	r6, r6, #21
   33536:	2100      	movs	r1, #0
   33538:	0324      	lsls	r4, r4, #12
   3353a:	0b23      	lsrs	r3, r4, #12
   3353c:	0d0c      	lsrs	r4, r1, #20
   3353e:	4a8f      	ldr	r2, [pc, #572]	; (3377c <__aeabi_dadd+0x388>)
   33540:	0524      	lsls	r4, r4, #20
   33542:	431c      	orrs	r4, r3
   33544:	4014      	ands	r4, r2
   33546:	0533      	lsls	r3, r6, #20
   33548:	4323      	orrs	r3, r4
   3354a:	005b      	lsls	r3, r3, #1
   3354c:	07ed      	lsls	r5, r5, #31
   3354e:	085b      	lsrs	r3, r3, #1
   33550:	432b      	orrs	r3, r5
   33552:	0038      	movs	r0, r7
   33554:	0019      	movs	r1, r3
   33556:	bc3c      	pop	{r2, r3, r4, r5}
   33558:	4690      	mov	r8, r2
   3355a:	4699      	mov	r9, r3
   3355c:	46a2      	mov	sl, r4
   3355e:	46ab      	mov	fp, r5
   33560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33562:	4664      	mov	r4, ip
   33564:	4304      	orrs	r4, r0
   33566:	d100      	bne.n	3356a <__aeabi_dadd+0x176>
   33568:	e211      	b.n	3398e <__aeabi_dadd+0x59a>
   3356a:	0004      	movs	r4, r0
   3356c:	4667      	mov	r7, ip
   3356e:	077b      	lsls	r3, r7, #29
   33570:	d1c6      	bne.n	33500 <__aeabi_dadd+0x10c>
   33572:	4645      	mov	r5, r8
   33574:	0760      	lsls	r0, r4, #29
   33576:	08ff      	lsrs	r7, r7, #3
   33578:	4307      	orrs	r7, r0
   3357a:	08e4      	lsrs	r4, r4, #3
   3357c:	4b7d      	ldr	r3, [pc, #500]	; (33774 <__aeabi_dadd+0x380>)
   3357e:	429e      	cmp	r6, r3
   33580:	d030      	beq.n	335e4 <__aeabi_dadd+0x1f0>
   33582:	0324      	lsls	r4, r4, #12
   33584:	0576      	lsls	r6, r6, #21
   33586:	0b24      	lsrs	r4, r4, #12
   33588:	0d76      	lsrs	r6, r6, #21
   3358a:	e7d4      	b.n	33536 <__aeabi_dadd+0x142>
   3358c:	1a33      	subs	r3, r6, r0
   3358e:	469a      	mov	sl, r3
   33590:	2b00      	cmp	r3, #0
   33592:	dd78      	ble.n	33686 <__aeabi_dadd+0x292>
   33594:	2800      	cmp	r0, #0
   33596:	d031      	beq.n	335fc <__aeabi_dadd+0x208>
   33598:	4876      	ldr	r0, [pc, #472]	; (33774 <__aeabi_dadd+0x380>)
   3359a:	4286      	cmp	r6, r0
   3359c:	d0ae      	beq.n	334fc <__aeabi_dadd+0x108>
   3359e:	2080      	movs	r0, #128	; 0x80
   335a0:	0400      	lsls	r0, r0, #16
   335a2:	4301      	orrs	r1, r0
   335a4:	4653      	mov	r3, sl
   335a6:	2b38      	cmp	r3, #56	; 0x38
   335a8:	dc00      	bgt.n	335ac <__aeabi_dadd+0x1b8>
   335aa:	e0e9      	b.n	33780 <__aeabi_dadd+0x38c>
   335ac:	430a      	orrs	r2, r1
   335ae:	1e51      	subs	r1, r2, #1
   335b0:	418a      	sbcs	r2, r1
   335b2:	2100      	movs	r1, #0
   335b4:	19d2      	adds	r2, r2, r7
   335b6:	42ba      	cmp	r2, r7
   335b8:	41bf      	sbcs	r7, r7
   335ba:	1909      	adds	r1, r1, r4
   335bc:	427c      	negs	r4, r7
   335be:	0017      	movs	r7, r2
   335c0:	190c      	adds	r4, r1, r4
   335c2:	0223      	lsls	r3, r4, #8
   335c4:	d5d3      	bpl.n	3356e <__aeabi_dadd+0x17a>
   335c6:	4b6b      	ldr	r3, [pc, #428]	; (33774 <__aeabi_dadd+0x380>)
   335c8:	3601      	adds	r6, #1
   335ca:	429e      	cmp	r6, r3
   335cc:	d100      	bne.n	335d0 <__aeabi_dadd+0x1dc>
   335ce:	e13a      	b.n	33846 <__aeabi_dadd+0x452>
   335d0:	2001      	movs	r0, #1
   335d2:	4b69      	ldr	r3, [pc, #420]	; (33778 <__aeabi_dadd+0x384>)
   335d4:	401c      	ands	r4, r3
   335d6:	087b      	lsrs	r3, r7, #1
   335d8:	4007      	ands	r7, r0
   335da:	431f      	orrs	r7, r3
   335dc:	07e0      	lsls	r0, r4, #31
   335de:	4307      	orrs	r7, r0
   335e0:	0864      	lsrs	r4, r4, #1
   335e2:	e78b      	b.n	334fc <__aeabi_dadd+0x108>
   335e4:	0023      	movs	r3, r4
   335e6:	433b      	orrs	r3, r7
   335e8:	d100      	bne.n	335ec <__aeabi_dadd+0x1f8>
   335ea:	e1cb      	b.n	33984 <__aeabi_dadd+0x590>
   335ec:	2280      	movs	r2, #128	; 0x80
   335ee:	0312      	lsls	r2, r2, #12
   335f0:	4314      	orrs	r4, r2
   335f2:	0324      	lsls	r4, r4, #12
   335f4:	0b24      	lsrs	r4, r4, #12
   335f6:	e79e      	b.n	33536 <__aeabi_dadd+0x142>
   335f8:	002e      	movs	r6, r5
   335fa:	e77f      	b.n	334fc <__aeabi_dadd+0x108>
   335fc:	0008      	movs	r0, r1
   335fe:	4310      	orrs	r0, r2
   33600:	d100      	bne.n	33604 <__aeabi_dadd+0x210>
   33602:	e0b4      	b.n	3376e <__aeabi_dadd+0x37a>
   33604:	1e58      	subs	r0, r3, #1
   33606:	2800      	cmp	r0, #0
   33608:	d000      	beq.n	3360c <__aeabi_dadd+0x218>
   3360a:	e0de      	b.n	337ca <__aeabi_dadd+0x3d6>
   3360c:	18ba      	adds	r2, r7, r2
   3360e:	42ba      	cmp	r2, r7
   33610:	419b      	sbcs	r3, r3
   33612:	1864      	adds	r4, r4, r1
   33614:	425b      	negs	r3, r3
   33616:	18e4      	adds	r4, r4, r3
   33618:	0017      	movs	r7, r2
   3361a:	2601      	movs	r6, #1
   3361c:	0223      	lsls	r3, r4, #8
   3361e:	d5a6      	bpl.n	3356e <__aeabi_dadd+0x17a>
   33620:	2602      	movs	r6, #2
   33622:	e7d5      	b.n	335d0 <__aeabi_dadd+0x1dc>
   33624:	2d00      	cmp	r5, #0
   33626:	d16e      	bne.n	33706 <__aeabi_dadd+0x312>
   33628:	1c70      	adds	r0, r6, #1
   3362a:	0540      	lsls	r0, r0, #21
   3362c:	0d40      	lsrs	r0, r0, #21
   3362e:	2801      	cmp	r0, #1
   33630:	dc00      	bgt.n	33634 <__aeabi_dadd+0x240>
   33632:	e0f9      	b.n	33828 <__aeabi_dadd+0x434>
   33634:	1ab8      	subs	r0, r7, r2
   33636:	4684      	mov	ip, r0
   33638:	4287      	cmp	r7, r0
   3363a:	4180      	sbcs	r0, r0
   3363c:	1ae5      	subs	r5, r4, r3
   3363e:	4240      	negs	r0, r0
   33640:	1a2d      	subs	r5, r5, r0
   33642:	0228      	lsls	r0, r5, #8
   33644:	d400      	bmi.n	33648 <__aeabi_dadd+0x254>
   33646:	e089      	b.n	3375c <__aeabi_dadd+0x368>
   33648:	1bd7      	subs	r7, r2, r7
   3364a:	42ba      	cmp	r2, r7
   3364c:	4192      	sbcs	r2, r2
   3364e:	1b1c      	subs	r4, r3, r4
   33650:	4252      	negs	r2, r2
   33652:	1aa5      	subs	r5, r4, r2
   33654:	46d8      	mov	r8, fp
   33656:	e729      	b.n	334ac <__aeabi_dadd+0xb8>
   33658:	4645      	mov	r5, r8
   3365a:	2400      	movs	r4, #0
   3365c:	2700      	movs	r7, #0
   3365e:	e76a      	b.n	33536 <__aeabi_dadd+0x142>
   33660:	4c45      	ldr	r4, [pc, #276]	; (33778 <__aeabi_dadd+0x384>)
   33662:	1af6      	subs	r6, r6, r3
   33664:	402c      	ands	r4, r5
   33666:	e749      	b.n	334fc <__aeabi_dadd+0x108>
   33668:	003d      	movs	r5, r7
   3366a:	3828      	subs	r0, #40	; 0x28
   3366c:	4085      	lsls	r5, r0
   3366e:	2700      	movs	r7, #0
   33670:	e72e      	b.n	334d0 <__aeabi_dadd+0xdc>
   33672:	0038      	movs	r0, r7
   33674:	f001 fb56 	bl	34d24 <__clzsi2>
   33678:	3020      	adds	r0, #32
   3367a:	e71d      	b.n	334b8 <__aeabi_dadd+0xc4>
   3367c:	430a      	orrs	r2, r1
   3367e:	1e51      	subs	r1, r2, #1
   33680:	418a      	sbcs	r2, r1
   33682:	2100      	movs	r1, #0
   33684:	e707      	b.n	33496 <__aeabi_dadd+0xa2>
   33686:	2b00      	cmp	r3, #0
   33688:	d000      	beq.n	3368c <__aeabi_dadd+0x298>
   3368a:	e0f3      	b.n	33874 <__aeabi_dadd+0x480>
   3368c:	1c70      	adds	r0, r6, #1
   3368e:	0543      	lsls	r3, r0, #21
   33690:	0d5b      	lsrs	r3, r3, #21
   33692:	2b01      	cmp	r3, #1
   33694:	dc00      	bgt.n	33698 <__aeabi_dadd+0x2a4>
   33696:	e0ad      	b.n	337f4 <__aeabi_dadd+0x400>
   33698:	4b36      	ldr	r3, [pc, #216]	; (33774 <__aeabi_dadd+0x380>)
   3369a:	4298      	cmp	r0, r3
   3369c:	d100      	bne.n	336a0 <__aeabi_dadd+0x2ac>
   3369e:	e0d1      	b.n	33844 <__aeabi_dadd+0x450>
   336a0:	18ba      	adds	r2, r7, r2
   336a2:	42ba      	cmp	r2, r7
   336a4:	41bf      	sbcs	r7, r7
   336a6:	1864      	adds	r4, r4, r1
   336a8:	427f      	negs	r7, r7
   336aa:	19e4      	adds	r4, r4, r7
   336ac:	07e7      	lsls	r7, r4, #31
   336ae:	0852      	lsrs	r2, r2, #1
   336b0:	4317      	orrs	r7, r2
   336b2:	0864      	lsrs	r4, r4, #1
   336b4:	0006      	movs	r6, r0
   336b6:	e721      	b.n	334fc <__aeabi_dadd+0x108>
   336b8:	482e      	ldr	r0, [pc, #184]	; (33774 <__aeabi_dadd+0x380>)
   336ba:	4285      	cmp	r5, r0
   336bc:	d100      	bne.n	336c0 <__aeabi_dadd+0x2cc>
   336be:	e093      	b.n	337e8 <__aeabi_dadd+0x3f4>
   336c0:	001d      	movs	r5, r3
   336c2:	e6d0      	b.n	33466 <__aeabi_dadd+0x72>
   336c4:	0029      	movs	r1, r5
   336c6:	3e1f      	subs	r6, #31
   336c8:	40f1      	lsrs	r1, r6
   336ca:	2b20      	cmp	r3, #32
   336cc:	d100      	bne.n	336d0 <__aeabi_dadd+0x2dc>
   336ce:	e08d      	b.n	337ec <__aeabi_dadd+0x3f8>
   336d0:	2240      	movs	r2, #64	; 0x40
   336d2:	1ad3      	subs	r3, r2, r3
   336d4:	409d      	lsls	r5, r3
   336d6:	432f      	orrs	r7, r5
   336d8:	1e7d      	subs	r5, r7, #1
   336da:	41af      	sbcs	r7, r5
   336dc:	2400      	movs	r4, #0
   336de:	430f      	orrs	r7, r1
   336e0:	2600      	movs	r6, #0
   336e2:	e744      	b.n	3356e <__aeabi_dadd+0x17a>
   336e4:	002b      	movs	r3, r5
   336e6:	0008      	movs	r0, r1
   336e8:	3b20      	subs	r3, #32
   336ea:	40d8      	lsrs	r0, r3
   336ec:	0003      	movs	r3, r0
   336ee:	2d20      	cmp	r5, #32
   336f0:	d100      	bne.n	336f4 <__aeabi_dadd+0x300>
   336f2:	e07d      	b.n	337f0 <__aeabi_dadd+0x3fc>
   336f4:	2040      	movs	r0, #64	; 0x40
   336f6:	1b45      	subs	r5, r0, r5
   336f8:	40a9      	lsls	r1, r5
   336fa:	430a      	orrs	r2, r1
   336fc:	1e51      	subs	r1, r2, #1
   336fe:	418a      	sbcs	r2, r1
   33700:	2100      	movs	r1, #0
   33702:	431a      	orrs	r2, r3
   33704:	e6c7      	b.n	33496 <__aeabi_dadd+0xa2>
   33706:	2e00      	cmp	r6, #0
   33708:	d050      	beq.n	337ac <__aeabi_dadd+0x3b8>
   3370a:	4e1a      	ldr	r6, [pc, #104]	; (33774 <__aeabi_dadd+0x380>)
   3370c:	42b0      	cmp	r0, r6
   3370e:	d057      	beq.n	337c0 <__aeabi_dadd+0x3cc>
   33710:	2680      	movs	r6, #128	; 0x80
   33712:	426b      	negs	r3, r5
   33714:	4699      	mov	r9, r3
   33716:	0436      	lsls	r6, r6, #16
   33718:	4334      	orrs	r4, r6
   3371a:	464b      	mov	r3, r9
   3371c:	2b38      	cmp	r3, #56	; 0x38
   3371e:	dd00      	ble.n	33722 <__aeabi_dadd+0x32e>
   33720:	e0d6      	b.n	338d0 <__aeabi_dadd+0x4dc>
   33722:	2b1f      	cmp	r3, #31
   33724:	dd00      	ble.n	33728 <__aeabi_dadd+0x334>
   33726:	e135      	b.n	33994 <__aeabi_dadd+0x5a0>
   33728:	2620      	movs	r6, #32
   3372a:	1af5      	subs	r5, r6, r3
   3372c:	0026      	movs	r6, r4
   3372e:	40ae      	lsls	r6, r5
   33730:	46b2      	mov	sl, r6
   33732:	003e      	movs	r6, r7
   33734:	40de      	lsrs	r6, r3
   33736:	46ac      	mov	ip, r5
   33738:	0035      	movs	r5, r6
   3373a:	4656      	mov	r6, sl
   3373c:	432e      	orrs	r6, r5
   3373e:	4665      	mov	r5, ip
   33740:	40af      	lsls	r7, r5
   33742:	1e7d      	subs	r5, r7, #1
   33744:	41af      	sbcs	r7, r5
   33746:	40dc      	lsrs	r4, r3
   33748:	4337      	orrs	r7, r6
   3374a:	1bd7      	subs	r7, r2, r7
   3374c:	42ba      	cmp	r2, r7
   3374e:	4192      	sbcs	r2, r2
   33750:	1b0c      	subs	r4, r1, r4
   33752:	4252      	negs	r2, r2
   33754:	1aa4      	subs	r4, r4, r2
   33756:	0006      	movs	r6, r0
   33758:	46d8      	mov	r8, fp
   3375a:	e6a3      	b.n	334a4 <__aeabi_dadd+0xb0>
   3375c:	4664      	mov	r4, ip
   3375e:	4667      	mov	r7, ip
   33760:	432c      	orrs	r4, r5
   33762:	d000      	beq.n	33766 <__aeabi_dadd+0x372>
   33764:	e6a2      	b.n	334ac <__aeabi_dadd+0xb8>
   33766:	2500      	movs	r5, #0
   33768:	2600      	movs	r6, #0
   3376a:	2700      	movs	r7, #0
   3376c:	e706      	b.n	3357c <__aeabi_dadd+0x188>
   3376e:	001e      	movs	r6, r3
   33770:	e6c4      	b.n	334fc <__aeabi_dadd+0x108>
   33772:	46c0      	nop			; (mov r8, r8)
   33774:	000007ff 	.word	0x000007ff
   33778:	ff7fffff 	.word	0xff7fffff
   3377c:	800fffff 	.word	0x800fffff
   33780:	2b1f      	cmp	r3, #31
   33782:	dc63      	bgt.n	3384c <__aeabi_dadd+0x458>
   33784:	2020      	movs	r0, #32
   33786:	1ac3      	subs	r3, r0, r3
   33788:	0008      	movs	r0, r1
   3378a:	4098      	lsls	r0, r3
   3378c:	469c      	mov	ip, r3
   3378e:	4683      	mov	fp, r0
   33790:	4653      	mov	r3, sl
   33792:	0010      	movs	r0, r2
   33794:	40d8      	lsrs	r0, r3
   33796:	0003      	movs	r3, r0
   33798:	4658      	mov	r0, fp
   3379a:	4318      	orrs	r0, r3
   3379c:	4663      	mov	r3, ip
   3379e:	409a      	lsls	r2, r3
   337a0:	1e53      	subs	r3, r2, #1
   337a2:	419a      	sbcs	r2, r3
   337a4:	4653      	mov	r3, sl
   337a6:	4302      	orrs	r2, r0
   337a8:	40d9      	lsrs	r1, r3
   337aa:	e703      	b.n	335b4 <__aeabi_dadd+0x1c0>
   337ac:	0026      	movs	r6, r4
   337ae:	433e      	orrs	r6, r7
   337b0:	d006      	beq.n	337c0 <__aeabi_dadd+0x3cc>
   337b2:	43eb      	mvns	r3, r5
   337b4:	4699      	mov	r9, r3
   337b6:	2b00      	cmp	r3, #0
   337b8:	d0c7      	beq.n	3374a <__aeabi_dadd+0x356>
   337ba:	4e94      	ldr	r6, [pc, #592]	; (33a0c <__aeabi_dadd+0x618>)
   337bc:	42b0      	cmp	r0, r6
   337be:	d1ac      	bne.n	3371a <__aeabi_dadd+0x326>
   337c0:	000c      	movs	r4, r1
   337c2:	0017      	movs	r7, r2
   337c4:	0006      	movs	r6, r0
   337c6:	46d8      	mov	r8, fp
   337c8:	e698      	b.n	334fc <__aeabi_dadd+0x108>
   337ca:	4b90      	ldr	r3, [pc, #576]	; (33a0c <__aeabi_dadd+0x618>)
   337cc:	459a      	cmp	sl, r3
   337ce:	d00b      	beq.n	337e8 <__aeabi_dadd+0x3f4>
   337d0:	4682      	mov	sl, r0
   337d2:	e6e7      	b.n	335a4 <__aeabi_dadd+0x1b0>
   337d4:	2800      	cmp	r0, #0
   337d6:	d000      	beq.n	337da <__aeabi_dadd+0x3e6>
   337d8:	e09e      	b.n	33918 <__aeabi_dadd+0x524>
   337da:	0018      	movs	r0, r3
   337dc:	4310      	orrs	r0, r2
   337de:	d100      	bne.n	337e2 <__aeabi_dadd+0x3ee>
   337e0:	e0e9      	b.n	339b6 <__aeabi_dadd+0x5c2>
   337e2:	001c      	movs	r4, r3
   337e4:	0017      	movs	r7, r2
   337e6:	46d8      	mov	r8, fp
   337e8:	4e88      	ldr	r6, [pc, #544]	; (33a0c <__aeabi_dadd+0x618>)
   337ea:	e687      	b.n	334fc <__aeabi_dadd+0x108>
   337ec:	2500      	movs	r5, #0
   337ee:	e772      	b.n	336d6 <__aeabi_dadd+0x2e2>
   337f0:	2100      	movs	r1, #0
   337f2:	e782      	b.n	336fa <__aeabi_dadd+0x306>
   337f4:	0023      	movs	r3, r4
   337f6:	433b      	orrs	r3, r7
   337f8:	2e00      	cmp	r6, #0
   337fa:	d000      	beq.n	337fe <__aeabi_dadd+0x40a>
   337fc:	e0ab      	b.n	33956 <__aeabi_dadd+0x562>
   337fe:	2b00      	cmp	r3, #0
   33800:	d100      	bne.n	33804 <__aeabi_dadd+0x410>
   33802:	e0e7      	b.n	339d4 <__aeabi_dadd+0x5e0>
   33804:	000b      	movs	r3, r1
   33806:	4313      	orrs	r3, r2
   33808:	d100      	bne.n	3380c <__aeabi_dadd+0x418>
   3380a:	e677      	b.n	334fc <__aeabi_dadd+0x108>
   3380c:	18ba      	adds	r2, r7, r2
   3380e:	42ba      	cmp	r2, r7
   33810:	41bf      	sbcs	r7, r7
   33812:	1864      	adds	r4, r4, r1
   33814:	427f      	negs	r7, r7
   33816:	19e4      	adds	r4, r4, r7
   33818:	0223      	lsls	r3, r4, #8
   3381a:	d400      	bmi.n	3381e <__aeabi_dadd+0x42a>
   3381c:	e0f2      	b.n	33a04 <__aeabi_dadd+0x610>
   3381e:	4b7c      	ldr	r3, [pc, #496]	; (33a10 <__aeabi_dadd+0x61c>)
   33820:	0017      	movs	r7, r2
   33822:	401c      	ands	r4, r3
   33824:	0006      	movs	r6, r0
   33826:	e669      	b.n	334fc <__aeabi_dadd+0x108>
   33828:	0020      	movs	r0, r4
   3382a:	4338      	orrs	r0, r7
   3382c:	2e00      	cmp	r6, #0
   3382e:	d1d1      	bne.n	337d4 <__aeabi_dadd+0x3e0>
   33830:	2800      	cmp	r0, #0
   33832:	d15b      	bne.n	338ec <__aeabi_dadd+0x4f8>
   33834:	001c      	movs	r4, r3
   33836:	4314      	orrs	r4, r2
   33838:	d100      	bne.n	3383c <__aeabi_dadd+0x448>
   3383a:	e0a8      	b.n	3398e <__aeabi_dadd+0x59a>
   3383c:	001c      	movs	r4, r3
   3383e:	0017      	movs	r7, r2
   33840:	46d8      	mov	r8, fp
   33842:	e65b      	b.n	334fc <__aeabi_dadd+0x108>
   33844:	0006      	movs	r6, r0
   33846:	2400      	movs	r4, #0
   33848:	2700      	movs	r7, #0
   3384a:	e697      	b.n	3357c <__aeabi_dadd+0x188>
   3384c:	4650      	mov	r0, sl
   3384e:	000b      	movs	r3, r1
   33850:	3820      	subs	r0, #32
   33852:	40c3      	lsrs	r3, r0
   33854:	4699      	mov	r9, r3
   33856:	4653      	mov	r3, sl
   33858:	2b20      	cmp	r3, #32
   3385a:	d100      	bne.n	3385e <__aeabi_dadd+0x46a>
   3385c:	e095      	b.n	3398a <__aeabi_dadd+0x596>
   3385e:	2340      	movs	r3, #64	; 0x40
   33860:	4650      	mov	r0, sl
   33862:	1a1b      	subs	r3, r3, r0
   33864:	4099      	lsls	r1, r3
   33866:	430a      	orrs	r2, r1
   33868:	1e51      	subs	r1, r2, #1
   3386a:	418a      	sbcs	r2, r1
   3386c:	464b      	mov	r3, r9
   3386e:	2100      	movs	r1, #0
   33870:	431a      	orrs	r2, r3
   33872:	e69f      	b.n	335b4 <__aeabi_dadd+0x1c0>
   33874:	2e00      	cmp	r6, #0
   33876:	d130      	bne.n	338da <__aeabi_dadd+0x4e6>
   33878:	0026      	movs	r6, r4
   3387a:	433e      	orrs	r6, r7
   3387c:	d067      	beq.n	3394e <__aeabi_dadd+0x55a>
   3387e:	43db      	mvns	r3, r3
   33880:	469a      	mov	sl, r3
   33882:	2b00      	cmp	r3, #0
   33884:	d01c      	beq.n	338c0 <__aeabi_dadd+0x4cc>
   33886:	4e61      	ldr	r6, [pc, #388]	; (33a0c <__aeabi_dadd+0x618>)
   33888:	42b0      	cmp	r0, r6
   3388a:	d060      	beq.n	3394e <__aeabi_dadd+0x55a>
   3388c:	4653      	mov	r3, sl
   3388e:	2b38      	cmp	r3, #56	; 0x38
   33890:	dd00      	ble.n	33894 <__aeabi_dadd+0x4a0>
   33892:	e096      	b.n	339c2 <__aeabi_dadd+0x5ce>
   33894:	2b1f      	cmp	r3, #31
   33896:	dd00      	ble.n	3389a <__aeabi_dadd+0x4a6>
   33898:	e09f      	b.n	339da <__aeabi_dadd+0x5e6>
   3389a:	2620      	movs	r6, #32
   3389c:	1af3      	subs	r3, r6, r3
   3389e:	0026      	movs	r6, r4
   338a0:	409e      	lsls	r6, r3
   338a2:	469c      	mov	ip, r3
   338a4:	46b3      	mov	fp, r6
   338a6:	4653      	mov	r3, sl
   338a8:	003e      	movs	r6, r7
   338aa:	40de      	lsrs	r6, r3
   338ac:	0033      	movs	r3, r6
   338ae:	465e      	mov	r6, fp
   338b0:	431e      	orrs	r6, r3
   338b2:	4663      	mov	r3, ip
   338b4:	409f      	lsls	r7, r3
   338b6:	1e7b      	subs	r3, r7, #1
   338b8:	419f      	sbcs	r7, r3
   338ba:	4653      	mov	r3, sl
   338bc:	40dc      	lsrs	r4, r3
   338be:	4337      	orrs	r7, r6
   338c0:	18bf      	adds	r7, r7, r2
   338c2:	4297      	cmp	r7, r2
   338c4:	4192      	sbcs	r2, r2
   338c6:	1864      	adds	r4, r4, r1
   338c8:	4252      	negs	r2, r2
   338ca:	18a4      	adds	r4, r4, r2
   338cc:	0006      	movs	r6, r0
   338ce:	e678      	b.n	335c2 <__aeabi_dadd+0x1ce>
   338d0:	4327      	orrs	r7, r4
   338d2:	1e7c      	subs	r4, r7, #1
   338d4:	41a7      	sbcs	r7, r4
   338d6:	2400      	movs	r4, #0
   338d8:	e737      	b.n	3374a <__aeabi_dadd+0x356>
   338da:	4e4c      	ldr	r6, [pc, #304]	; (33a0c <__aeabi_dadd+0x618>)
   338dc:	42b0      	cmp	r0, r6
   338de:	d036      	beq.n	3394e <__aeabi_dadd+0x55a>
   338e0:	2680      	movs	r6, #128	; 0x80
   338e2:	425b      	negs	r3, r3
   338e4:	0436      	lsls	r6, r6, #16
   338e6:	469a      	mov	sl, r3
   338e8:	4334      	orrs	r4, r6
   338ea:	e7cf      	b.n	3388c <__aeabi_dadd+0x498>
   338ec:	0018      	movs	r0, r3
   338ee:	4310      	orrs	r0, r2
   338f0:	d100      	bne.n	338f4 <__aeabi_dadd+0x500>
   338f2:	e603      	b.n	334fc <__aeabi_dadd+0x108>
   338f4:	1ab8      	subs	r0, r7, r2
   338f6:	4684      	mov	ip, r0
   338f8:	4567      	cmp	r7, ip
   338fa:	41ad      	sbcs	r5, r5
   338fc:	1ae0      	subs	r0, r4, r3
   338fe:	426d      	negs	r5, r5
   33900:	1b40      	subs	r0, r0, r5
   33902:	0205      	lsls	r5, r0, #8
   33904:	d400      	bmi.n	33908 <__aeabi_dadd+0x514>
   33906:	e62c      	b.n	33562 <__aeabi_dadd+0x16e>
   33908:	1bd7      	subs	r7, r2, r7
   3390a:	42ba      	cmp	r2, r7
   3390c:	4192      	sbcs	r2, r2
   3390e:	1b1c      	subs	r4, r3, r4
   33910:	4252      	negs	r2, r2
   33912:	1aa4      	subs	r4, r4, r2
   33914:	46d8      	mov	r8, fp
   33916:	e5f1      	b.n	334fc <__aeabi_dadd+0x108>
   33918:	0018      	movs	r0, r3
   3391a:	4310      	orrs	r0, r2
   3391c:	d100      	bne.n	33920 <__aeabi_dadd+0x52c>
   3391e:	e763      	b.n	337e8 <__aeabi_dadd+0x3f4>
   33920:	08f8      	lsrs	r0, r7, #3
   33922:	0767      	lsls	r7, r4, #29
   33924:	4307      	orrs	r7, r0
   33926:	2080      	movs	r0, #128	; 0x80
   33928:	08e4      	lsrs	r4, r4, #3
   3392a:	0300      	lsls	r0, r0, #12
   3392c:	4204      	tst	r4, r0
   3392e:	d008      	beq.n	33942 <__aeabi_dadd+0x54e>
   33930:	08dd      	lsrs	r5, r3, #3
   33932:	4205      	tst	r5, r0
   33934:	d105      	bne.n	33942 <__aeabi_dadd+0x54e>
   33936:	08d2      	lsrs	r2, r2, #3
   33938:	0759      	lsls	r1, r3, #29
   3393a:	4311      	orrs	r1, r2
   3393c:	000f      	movs	r7, r1
   3393e:	002c      	movs	r4, r5
   33940:	46d8      	mov	r8, fp
   33942:	0f7b      	lsrs	r3, r7, #29
   33944:	00e4      	lsls	r4, r4, #3
   33946:	431c      	orrs	r4, r3
   33948:	00ff      	lsls	r7, r7, #3
   3394a:	4e30      	ldr	r6, [pc, #192]	; (33a0c <__aeabi_dadd+0x618>)
   3394c:	e5d6      	b.n	334fc <__aeabi_dadd+0x108>
   3394e:	000c      	movs	r4, r1
   33950:	0017      	movs	r7, r2
   33952:	0006      	movs	r6, r0
   33954:	e5d2      	b.n	334fc <__aeabi_dadd+0x108>
   33956:	2b00      	cmp	r3, #0
   33958:	d038      	beq.n	339cc <__aeabi_dadd+0x5d8>
   3395a:	000b      	movs	r3, r1
   3395c:	4313      	orrs	r3, r2
   3395e:	d100      	bne.n	33962 <__aeabi_dadd+0x56e>
   33960:	e742      	b.n	337e8 <__aeabi_dadd+0x3f4>
   33962:	08f8      	lsrs	r0, r7, #3
   33964:	0767      	lsls	r7, r4, #29
   33966:	4307      	orrs	r7, r0
   33968:	2080      	movs	r0, #128	; 0x80
   3396a:	08e4      	lsrs	r4, r4, #3
   3396c:	0300      	lsls	r0, r0, #12
   3396e:	4204      	tst	r4, r0
   33970:	d0e7      	beq.n	33942 <__aeabi_dadd+0x54e>
   33972:	08cb      	lsrs	r3, r1, #3
   33974:	4203      	tst	r3, r0
   33976:	d1e4      	bne.n	33942 <__aeabi_dadd+0x54e>
   33978:	08d2      	lsrs	r2, r2, #3
   3397a:	0749      	lsls	r1, r1, #29
   3397c:	4311      	orrs	r1, r2
   3397e:	000f      	movs	r7, r1
   33980:	001c      	movs	r4, r3
   33982:	e7de      	b.n	33942 <__aeabi_dadd+0x54e>
   33984:	2700      	movs	r7, #0
   33986:	2400      	movs	r4, #0
   33988:	e5d5      	b.n	33536 <__aeabi_dadd+0x142>
   3398a:	2100      	movs	r1, #0
   3398c:	e76b      	b.n	33866 <__aeabi_dadd+0x472>
   3398e:	2500      	movs	r5, #0
   33990:	2700      	movs	r7, #0
   33992:	e5f3      	b.n	3357c <__aeabi_dadd+0x188>
   33994:	464e      	mov	r6, r9
   33996:	0025      	movs	r5, r4
   33998:	3e20      	subs	r6, #32
   3399a:	40f5      	lsrs	r5, r6
   3399c:	464b      	mov	r3, r9
   3399e:	002e      	movs	r6, r5
   339a0:	2b20      	cmp	r3, #32
   339a2:	d02d      	beq.n	33a00 <__aeabi_dadd+0x60c>
   339a4:	2540      	movs	r5, #64	; 0x40
   339a6:	1aed      	subs	r5, r5, r3
   339a8:	40ac      	lsls	r4, r5
   339aa:	4327      	orrs	r7, r4
   339ac:	1e7c      	subs	r4, r7, #1
   339ae:	41a7      	sbcs	r7, r4
   339b0:	2400      	movs	r4, #0
   339b2:	4337      	orrs	r7, r6
   339b4:	e6c9      	b.n	3374a <__aeabi_dadd+0x356>
   339b6:	2480      	movs	r4, #128	; 0x80
   339b8:	2500      	movs	r5, #0
   339ba:	0324      	lsls	r4, r4, #12
   339bc:	4e13      	ldr	r6, [pc, #76]	; (33a0c <__aeabi_dadd+0x618>)
   339be:	2700      	movs	r7, #0
   339c0:	e5dc      	b.n	3357c <__aeabi_dadd+0x188>
   339c2:	4327      	orrs	r7, r4
   339c4:	1e7c      	subs	r4, r7, #1
   339c6:	41a7      	sbcs	r7, r4
   339c8:	2400      	movs	r4, #0
   339ca:	e779      	b.n	338c0 <__aeabi_dadd+0x4cc>
   339cc:	000c      	movs	r4, r1
   339ce:	0017      	movs	r7, r2
   339d0:	4e0e      	ldr	r6, [pc, #56]	; (33a0c <__aeabi_dadd+0x618>)
   339d2:	e593      	b.n	334fc <__aeabi_dadd+0x108>
   339d4:	000c      	movs	r4, r1
   339d6:	0017      	movs	r7, r2
   339d8:	e590      	b.n	334fc <__aeabi_dadd+0x108>
   339da:	4656      	mov	r6, sl
   339dc:	0023      	movs	r3, r4
   339de:	3e20      	subs	r6, #32
   339e0:	40f3      	lsrs	r3, r6
   339e2:	4699      	mov	r9, r3
   339e4:	4653      	mov	r3, sl
   339e6:	2b20      	cmp	r3, #32
   339e8:	d00e      	beq.n	33a08 <__aeabi_dadd+0x614>
   339ea:	2340      	movs	r3, #64	; 0x40
   339ec:	4656      	mov	r6, sl
   339ee:	1b9b      	subs	r3, r3, r6
   339f0:	409c      	lsls	r4, r3
   339f2:	4327      	orrs	r7, r4
   339f4:	1e7c      	subs	r4, r7, #1
   339f6:	41a7      	sbcs	r7, r4
   339f8:	464b      	mov	r3, r9
   339fa:	2400      	movs	r4, #0
   339fc:	431f      	orrs	r7, r3
   339fe:	e75f      	b.n	338c0 <__aeabi_dadd+0x4cc>
   33a00:	2400      	movs	r4, #0
   33a02:	e7d2      	b.n	339aa <__aeabi_dadd+0x5b6>
   33a04:	0017      	movs	r7, r2
   33a06:	e5b2      	b.n	3356e <__aeabi_dadd+0x17a>
   33a08:	2400      	movs	r4, #0
   33a0a:	e7f2      	b.n	339f2 <__aeabi_dadd+0x5fe>
   33a0c:	000007ff 	.word	0x000007ff
   33a10:	ff7fffff 	.word	0xff7fffff

00033a14 <__aeabi_ddiv>:
   33a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a16:	4657      	mov	r7, sl
   33a18:	4645      	mov	r5, r8
   33a1a:	46de      	mov	lr, fp
   33a1c:	464e      	mov	r6, r9
   33a1e:	b5e0      	push	{r5, r6, r7, lr}
   33a20:	004c      	lsls	r4, r1, #1
   33a22:	030e      	lsls	r6, r1, #12
   33a24:	b087      	sub	sp, #28
   33a26:	4683      	mov	fp, r0
   33a28:	4692      	mov	sl, r2
   33a2a:	001d      	movs	r5, r3
   33a2c:	4680      	mov	r8, r0
   33a2e:	0b36      	lsrs	r6, r6, #12
   33a30:	0d64      	lsrs	r4, r4, #21
   33a32:	0fcf      	lsrs	r7, r1, #31
   33a34:	2c00      	cmp	r4, #0
   33a36:	d04f      	beq.n	33ad8 <__aeabi_ddiv+0xc4>
   33a38:	4b6f      	ldr	r3, [pc, #444]	; (33bf8 <__aeabi_ddiv+0x1e4>)
   33a3a:	429c      	cmp	r4, r3
   33a3c:	d035      	beq.n	33aaa <__aeabi_ddiv+0x96>
   33a3e:	2380      	movs	r3, #128	; 0x80
   33a40:	0f42      	lsrs	r2, r0, #29
   33a42:	041b      	lsls	r3, r3, #16
   33a44:	00f6      	lsls	r6, r6, #3
   33a46:	4313      	orrs	r3, r2
   33a48:	4333      	orrs	r3, r6
   33a4a:	4699      	mov	r9, r3
   33a4c:	00c3      	lsls	r3, r0, #3
   33a4e:	4698      	mov	r8, r3
   33a50:	4b6a      	ldr	r3, [pc, #424]	; (33bfc <__aeabi_ddiv+0x1e8>)
   33a52:	2600      	movs	r6, #0
   33a54:	469c      	mov	ip, r3
   33a56:	2300      	movs	r3, #0
   33a58:	4464      	add	r4, ip
   33a5a:	9303      	str	r3, [sp, #12]
   33a5c:	032b      	lsls	r3, r5, #12
   33a5e:	0b1b      	lsrs	r3, r3, #12
   33a60:	469b      	mov	fp, r3
   33a62:	006b      	lsls	r3, r5, #1
   33a64:	0fed      	lsrs	r5, r5, #31
   33a66:	4650      	mov	r0, sl
   33a68:	0d5b      	lsrs	r3, r3, #21
   33a6a:	9501      	str	r5, [sp, #4]
   33a6c:	d05e      	beq.n	33b2c <__aeabi_ddiv+0x118>
   33a6e:	4a62      	ldr	r2, [pc, #392]	; (33bf8 <__aeabi_ddiv+0x1e4>)
   33a70:	4293      	cmp	r3, r2
   33a72:	d053      	beq.n	33b1c <__aeabi_ddiv+0x108>
   33a74:	465a      	mov	r2, fp
   33a76:	00d1      	lsls	r1, r2, #3
   33a78:	2280      	movs	r2, #128	; 0x80
   33a7a:	0f40      	lsrs	r0, r0, #29
   33a7c:	0412      	lsls	r2, r2, #16
   33a7e:	4302      	orrs	r2, r0
   33a80:	430a      	orrs	r2, r1
   33a82:	4693      	mov	fp, r2
   33a84:	4652      	mov	r2, sl
   33a86:	00d1      	lsls	r1, r2, #3
   33a88:	4a5c      	ldr	r2, [pc, #368]	; (33bfc <__aeabi_ddiv+0x1e8>)
   33a8a:	4694      	mov	ip, r2
   33a8c:	2200      	movs	r2, #0
   33a8e:	4463      	add	r3, ip
   33a90:	0038      	movs	r0, r7
   33a92:	4068      	eors	r0, r5
   33a94:	4684      	mov	ip, r0
   33a96:	9002      	str	r0, [sp, #8]
   33a98:	1ae4      	subs	r4, r4, r3
   33a9a:	4316      	orrs	r6, r2
   33a9c:	2e0f      	cmp	r6, #15
   33a9e:	d900      	bls.n	33aa2 <__aeabi_ddiv+0x8e>
   33aa0:	e0b4      	b.n	33c0c <__aeabi_ddiv+0x1f8>
   33aa2:	4b57      	ldr	r3, [pc, #348]	; (33c00 <__aeabi_ddiv+0x1ec>)
   33aa4:	00b6      	lsls	r6, r6, #2
   33aa6:	599b      	ldr	r3, [r3, r6]
   33aa8:	469f      	mov	pc, r3
   33aaa:	0003      	movs	r3, r0
   33aac:	4333      	orrs	r3, r6
   33aae:	4699      	mov	r9, r3
   33ab0:	d16c      	bne.n	33b8c <__aeabi_ddiv+0x178>
   33ab2:	2300      	movs	r3, #0
   33ab4:	4698      	mov	r8, r3
   33ab6:	3302      	adds	r3, #2
   33ab8:	2608      	movs	r6, #8
   33aba:	9303      	str	r3, [sp, #12]
   33abc:	e7ce      	b.n	33a5c <__aeabi_ddiv+0x48>
   33abe:	46cb      	mov	fp, r9
   33ac0:	4641      	mov	r1, r8
   33ac2:	9a03      	ldr	r2, [sp, #12]
   33ac4:	9701      	str	r7, [sp, #4]
   33ac6:	2a02      	cmp	r2, #2
   33ac8:	d165      	bne.n	33b96 <__aeabi_ddiv+0x182>
   33aca:	9b01      	ldr	r3, [sp, #4]
   33acc:	4c4a      	ldr	r4, [pc, #296]	; (33bf8 <__aeabi_ddiv+0x1e4>)
   33ace:	469c      	mov	ip, r3
   33ad0:	2300      	movs	r3, #0
   33ad2:	2200      	movs	r2, #0
   33ad4:	4698      	mov	r8, r3
   33ad6:	e06b      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33ad8:	0003      	movs	r3, r0
   33ada:	4333      	orrs	r3, r6
   33adc:	4699      	mov	r9, r3
   33ade:	d04e      	beq.n	33b7e <__aeabi_ddiv+0x16a>
   33ae0:	2e00      	cmp	r6, #0
   33ae2:	d100      	bne.n	33ae6 <__aeabi_ddiv+0xd2>
   33ae4:	e1bc      	b.n	33e60 <__aeabi_ddiv+0x44c>
   33ae6:	0030      	movs	r0, r6
   33ae8:	f001 f91c 	bl	34d24 <__clzsi2>
   33aec:	0003      	movs	r3, r0
   33aee:	3b0b      	subs	r3, #11
   33af0:	2b1c      	cmp	r3, #28
   33af2:	dd00      	ble.n	33af6 <__aeabi_ddiv+0xe2>
   33af4:	e1ac      	b.n	33e50 <__aeabi_ddiv+0x43c>
   33af6:	221d      	movs	r2, #29
   33af8:	1ad3      	subs	r3, r2, r3
   33afa:	465a      	mov	r2, fp
   33afc:	0001      	movs	r1, r0
   33afe:	40da      	lsrs	r2, r3
   33b00:	3908      	subs	r1, #8
   33b02:	408e      	lsls	r6, r1
   33b04:	0013      	movs	r3, r2
   33b06:	4333      	orrs	r3, r6
   33b08:	4699      	mov	r9, r3
   33b0a:	465b      	mov	r3, fp
   33b0c:	408b      	lsls	r3, r1
   33b0e:	4698      	mov	r8, r3
   33b10:	2300      	movs	r3, #0
   33b12:	4c3c      	ldr	r4, [pc, #240]	; (33c04 <__aeabi_ddiv+0x1f0>)
   33b14:	2600      	movs	r6, #0
   33b16:	1a24      	subs	r4, r4, r0
   33b18:	9303      	str	r3, [sp, #12]
   33b1a:	e79f      	b.n	33a5c <__aeabi_ddiv+0x48>
   33b1c:	4651      	mov	r1, sl
   33b1e:	465a      	mov	r2, fp
   33b20:	4311      	orrs	r1, r2
   33b22:	d129      	bne.n	33b78 <__aeabi_ddiv+0x164>
   33b24:	2200      	movs	r2, #0
   33b26:	4693      	mov	fp, r2
   33b28:	3202      	adds	r2, #2
   33b2a:	e7b1      	b.n	33a90 <__aeabi_ddiv+0x7c>
   33b2c:	4659      	mov	r1, fp
   33b2e:	4301      	orrs	r1, r0
   33b30:	d01e      	beq.n	33b70 <__aeabi_ddiv+0x15c>
   33b32:	465b      	mov	r3, fp
   33b34:	2b00      	cmp	r3, #0
   33b36:	d100      	bne.n	33b3a <__aeabi_ddiv+0x126>
   33b38:	e19e      	b.n	33e78 <__aeabi_ddiv+0x464>
   33b3a:	4658      	mov	r0, fp
   33b3c:	f001 f8f2 	bl	34d24 <__clzsi2>
   33b40:	0003      	movs	r3, r0
   33b42:	3b0b      	subs	r3, #11
   33b44:	2b1c      	cmp	r3, #28
   33b46:	dd00      	ble.n	33b4a <__aeabi_ddiv+0x136>
   33b48:	e18f      	b.n	33e6a <__aeabi_ddiv+0x456>
   33b4a:	0002      	movs	r2, r0
   33b4c:	4659      	mov	r1, fp
   33b4e:	3a08      	subs	r2, #8
   33b50:	4091      	lsls	r1, r2
   33b52:	468b      	mov	fp, r1
   33b54:	211d      	movs	r1, #29
   33b56:	1acb      	subs	r3, r1, r3
   33b58:	4651      	mov	r1, sl
   33b5a:	40d9      	lsrs	r1, r3
   33b5c:	000b      	movs	r3, r1
   33b5e:	4659      	mov	r1, fp
   33b60:	430b      	orrs	r3, r1
   33b62:	4651      	mov	r1, sl
   33b64:	469b      	mov	fp, r3
   33b66:	4091      	lsls	r1, r2
   33b68:	4b26      	ldr	r3, [pc, #152]	; (33c04 <__aeabi_ddiv+0x1f0>)
   33b6a:	2200      	movs	r2, #0
   33b6c:	1a1b      	subs	r3, r3, r0
   33b6e:	e78f      	b.n	33a90 <__aeabi_ddiv+0x7c>
   33b70:	2300      	movs	r3, #0
   33b72:	2201      	movs	r2, #1
   33b74:	469b      	mov	fp, r3
   33b76:	e78b      	b.n	33a90 <__aeabi_ddiv+0x7c>
   33b78:	4651      	mov	r1, sl
   33b7a:	2203      	movs	r2, #3
   33b7c:	e788      	b.n	33a90 <__aeabi_ddiv+0x7c>
   33b7e:	2300      	movs	r3, #0
   33b80:	4698      	mov	r8, r3
   33b82:	3301      	adds	r3, #1
   33b84:	2604      	movs	r6, #4
   33b86:	2400      	movs	r4, #0
   33b88:	9303      	str	r3, [sp, #12]
   33b8a:	e767      	b.n	33a5c <__aeabi_ddiv+0x48>
   33b8c:	2303      	movs	r3, #3
   33b8e:	46b1      	mov	r9, r6
   33b90:	9303      	str	r3, [sp, #12]
   33b92:	260c      	movs	r6, #12
   33b94:	e762      	b.n	33a5c <__aeabi_ddiv+0x48>
   33b96:	2a03      	cmp	r2, #3
   33b98:	d100      	bne.n	33b9c <__aeabi_ddiv+0x188>
   33b9a:	e25c      	b.n	34056 <__aeabi_ddiv+0x642>
   33b9c:	9b01      	ldr	r3, [sp, #4]
   33b9e:	2a01      	cmp	r2, #1
   33ba0:	d000      	beq.n	33ba4 <__aeabi_ddiv+0x190>
   33ba2:	e1e4      	b.n	33f6e <__aeabi_ddiv+0x55a>
   33ba4:	4013      	ands	r3, r2
   33ba6:	469c      	mov	ip, r3
   33ba8:	2300      	movs	r3, #0
   33baa:	2400      	movs	r4, #0
   33bac:	2200      	movs	r2, #0
   33bae:	4698      	mov	r8, r3
   33bb0:	2100      	movs	r1, #0
   33bb2:	0312      	lsls	r2, r2, #12
   33bb4:	0b13      	lsrs	r3, r2, #12
   33bb6:	0d0a      	lsrs	r2, r1, #20
   33bb8:	0512      	lsls	r2, r2, #20
   33bba:	431a      	orrs	r2, r3
   33bbc:	0523      	lsls	r3, r4, #20
   33bbe:	4c12      	ldr	r4, [pc, #72]	; (33c08 <__aeabi_ddiv+0x1f4>)
   33bc0:	4640      	mov	r0, r8
   33bc2:	4022      	ands	r2, r4
   33bc4:	4313      	orrs	r3, r2
   33bc6:	4662      	mov	r2, ip
   33bc8:	005b      	lsls	r3, r3, #1
   33bca:	07d2      	lsls	r2, r2, #31
   33bcc:	085b      	lsrs	r3, r3, #1
   33bce:	4313      	orrs	r3, r2
   33bd0:	0019      	movs	r1, r3
   33bd2:	b007      	add	sp, #28
   33bd4:	bc3c      	pop	{r2, r3, r4, r5}
   33bd6:	4690      	mov	r8, r2
   33bd8:	4699      	mov	r9, r3
   33bda:	46a2      	mov	sl, r4
   33bdc:	46ab      	mov	fp, r5
   33bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33be0:	2300      	movs	r3, #0
   33be2:	2280      	movs	r2, #128	; 0x80
   33be4:	469c      	mov	ip, r3
   33be6:	0312      	lsls	r2, r2, #12
   33be8:	4698      	mov	r8, r3
   33bea:	4c03      	ldr	r4, [pc, #12]	; (33bf8 <__aeabi_ddiv+0x1e4>)
   33bec:	e7e0      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33bee:	2300      	movs	r3, #0
   33bf0:	4c01      	ldr	r4, [pc, #4]	; (33bf8 <__aeabi_ddiv+0x1e4>)
   33bf2:	2200      	movs	r2, #0
   33bf4:	4698      	mov	r8, r3
   33bf6:	e7db      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33bf8:	000007ff 	.word	0x000007ff
   33bfc:	fffffc01 	.word	0xfffffc01
   33c00:	0003a674 	.word	0x0003a674
   33c04:	fffffc0d 	.word	0xfffffc0d
   33c08:	800fffff 	.word	0x800fffff
   33c0c:	45d9      	cmp	r9, fp
   33c0e:	d900      	bls.n	33c12 <__aeabi_ddiv+0x1fe>
   33c10:	e139      	b.n	33e86 <__aeabi_ddiv+0x472>
   33c12:	d100      	bne.n	33c16 <__aeabi_ddiv+0x202>
   33c14:	e134      	b.n	33e80 <__aeabi_ddiv+0x46c>
   33c16:	2300      	movs	r3, #0
   33c18:	4646      	mov	r6, r8
   33c1a:	464d      	mov	r5, r9
   33c1c:	469a      	mov	sl, r3
   33c1e:	3c01      	subs	r4, #1
   33c20:	465b      	mov	r3, fp
   33c22:	0e0a      	lsrs	r2, r1, #24
   33c24:	021b      	lsls	r3, r3, #8
   33c26:	431a      	orrs	r2, r3
   33c28:	020b      	lsls	r3, r1, #8
   33c2a:	0c17      	lsrs	r7, r2, #16
   33c2c:	9303      	str	r3, [sp, #12]
   33c2e:	0413      	lsls	r3, r2, #16
   33c30:	0c1b      	lsrs	r3, r3, #16
   33c32:	0039      	movs	r1, r7
   33c34:	0028      	movs	r0, r5
   33c36:	4690      	mov	r8, r2
   33c38:	9301      	str	r3, [sp, #4]
   33c3a:	f7ff f8ab 	bl	32d94 <__udivsi3>
   33c3e:	0002      	movs	r2, r0
   33c40:	9b01      	ldr	r3, [sp, #4]
   33c42:	4683      	mov	fp, r0
   33c44:	435a      	muls	r2, r3
   33c46:	0028      	movs	r0, r5
   33c48:	0039      	movs	r1, r7
   33c4a:	4691      	mov	r9, r2
   33c4c:	f7ff f928 	bl	32ea0 <__aeabi_uidivmod>
   33c50:	0c35      	lsrs	r5, r6, #16
   33c52:	0409      	lsls	r1, r1, #16
   33c54:	430d      	orrs	r5, r1
   33c56:	45a9      	cmp	r9, r5
   33c58:	d90d      	bls.n	33c76 <__aeabi_ddiv+0x262>
   33c5a:	465b      	mov	r3, fp
   33c5c:	4445      	add	r5, r8
   33c5e:	3b01      	subs	r3, #1
   33c60:	45a8      	cmp	r8, r5
   33c62:	d900      	bls.n	33c66 <__aeabi_ddiv+0x252>
   33c64:	e13a      	b.n	33edc <__aeabi_ddiv+0x4c8>
   33c66:	45a9      	cmp	r9, r5
   33c68:	d800      	bhi.n	33c6c <__aeabi_ddiv+0x258>
   33c6a:	e137      	b.n	33edc <__aeabi_ddiv+0x4c8>
   33c6c:	2302      	movs	r3, #2
   33c6e:	425b      	negs	r3, r3
   33c70:	469c      	mov	ip, r3
   33c72:	4445      	add	r5, r8
   33c74:	44e3      	add	fp, ip
   33c76:	464b      	mov	r3, r9
   33c78:	1aeb      	subs	r3, r5, r3
   33c7a:	0039      	movs	r1, r7
   33c7c:	0018      	movs	r0, r3
   33c7e:	9304      	str	r3, [sp, #16]
   33c80:	f7ff f888 	bl	32d94 <__udivsi3>
   33c84:	9b01      	ldr	r3, [sp, #4]
   33c86:	0005      	movs	r5, r0
   33c88:	4343      	muls	r3, r0
   33c8a:	0039      	movs	r1, r7
   33c8c:	9804      	ldr	r0, [sp, #16]
   33c8e:	4699      	mov	r9, r3
   33c90:	f7ff f906 	bl	32ea0 <__aeabi_uidivmod>
   33c94:	0433      	lsls	r3, r6, #16
   33c96:	0409      	lsls	r1, r1, #16
   33c98:	0c1b      	lsrs	r3, r3, #16
   33c9a:	430b      	orrs	r3, r1
   33c9c:	4599      	cmp	r9, r3
   33c9e:	d909      	bls.n	33cb4 <__aeabi_ddiv+0x2a0>
   33ca0:	4443      	add	r3, r8
   33ca2:	1e6a      	subs	r2, r5, #1
   33ca4:	4598      	cmp	r8, r3
   33ca6:	d900      	bls.n	33caa <__aeabi_ddiv+0x296>
   33ca8:	e11a      	b.n	33ee0 <__aeabi_ddiv+0x4cc>
   33caa:	4599      	cmp	r9, r3
   33cac:	d800      	bhi.n	33cb0 <__aeabi_ddiv+0x29c>
   33cae:	e117      	b.n	33ee0 <__aeabi_ddiv+0x4cc>
   33cb0:	3d02      	subs	r5, #2
   33cb2:	4443      	add	r3, r8
   33cb4:	464a      	mov	r2, r9
   33cb6:	1a9b      	subs	r3, r3, r2
   33cb8:	465a      	mov	r2, fp
   33cba:	0412      	lsls	r2, r2, #16
   33cbc:	432a      	orrs	r2, r5
   33cbe:	9903      	ldr	r1, [sp, #12]
   33cc0:	4693      	mov	fp, r2
   33cc2:	0c10      	lsrs	r0, r2, #16
   33cc4:	0c0a      	lsrs	r2, r1, #16
   33cc6:	4691      	mov	r9, r2
   33cc8:	0409      	lsls	r1, r1, #16
   33cca:	465a      	mov	r2, fp
   33ccc:	0c09      	lsrs	r1, r1, #16
   33cce:	464e      	mov	r6, r9
   33cd0:	000d      	movs	r5, r1
   33cd2:	0412      	lsls	r2, r2, #16
   33cd4:	0c12      	lsrs	r2, r2, #16
   33cd6:	4345      	muls	r5, r0
   33cd8:	9105      	str	r1, [sp, #20]
   33cda:	4351      	muls	r1, r2
   33cdc:	4372      	muls	r2, r6
   33cde:	4370      	muls	r0, r6
   33ce0:	1952      	adds	r2, r2, r5
   33ce2:	0c0e      	lsrs	r6, r1, #16
   33ce4:	18b2      	adds	r2, r6, r2
   33ce6:	4295      	cmp	r5, r2
   33ce8:	d903      	bls.n	33cf2 <__aeabi_ddiv+0x2de>
   33cea:	2580      	movs	r5, #128	; 0x80
   33cec:	026d      	lsls	r5, r5, #9
   33cee:	46ac      	mov	ip, r5
   33cf0:	4460      	add	r0, ip
   33cf2:	0c15      	lsrs	r5, r2, #16
   33cf4:	0409      	lsls	r1, r1, #16
   33cf6:	0412      	lsls	r2, r2, #16
   33cf8:	0c09      	lsrs	r1, r1, #16
   33cfa:	1828      	adds	r0, r5, r0
   33cfc:	1852      	adds	r2, r2, r1
   33cfe:	4283      	cmp	r3, r0
   33d00:	d200      	bcs.n	33d04 <__aeabi_ddiv+0x2f0>
   33d02:	e0ce      	b.n	33ea2 <__aeabi_ddiv+0x48e>
   33d04:	d100      	bne.n	33d08 <__aeabi_ddiv+0x2f4>
   33d06:	e0c8      	b.n	33e9a <__aeabi_ddiv+0x486>
   33d08:	1a1d      	subs	r5, r3, r0
   33d0a:	4653      	mov	r3, sl
   33d0c:	1a9e      	subs	r6, r3, r2
   33d0e:	45b2      	cmp	sl, r6
   33d10:	4192      	sbcs	r2, r2
   33d12:	4252      	negs	r2, r2
   33d14:	1aab      	subs	r3, r5, r2
   33d16:	469a      	mov	sl, r3
   33d18:	4598      	cmp	r8, r3
   33d1a:	d100      	bne.n	33d1e <__aeabi_ddiv+0x30a>
   33d1c:	e117      	b.n	33f4e <__aeabi_ddiv+0x53a>
   33d1e:	0039      	movs	r1, r7
   33d20:	0018      	movs	r0, r3
   33d22:	f7ff f837 	bl	32d94 <__udivsi3>
   33d26:	9b01      	ldr	r3, [sp, #4]
   33d28:	0005      	movs	r5, r0
   33d2a:	4343      	muls	r3, r0
   33d2c:	0039      	movs	r1, r7
   33d2e:	4650      	mov	r0, sl
   33d30:	9304      	str	r3, [sp, #16]
   33d32:	f7ff f8b5 	bl	32ea0 <__aeabi_uidivmod>
   33d36:	9804      	ldr	r0, [sp, #16]
   33d38:	040b      	lsls	r3, r1, #16
   33d3a:	0c31      	lsrs	r1, r6, #16
   33d3c:	4319      	orrs	r1, r3
   33d3e:	4288      	cmp	r0, r1
   33d40:	d909      	bls.n	33d56 <__aeabi_ddiv+0x342>
   33d42:	4441      	add	r1, r8
   33d44:	1e6b      	subs	r3, r5, #1
   33d46:	4588      	cmp	r8, r1
   33d48:	d900      	bls.n	33d4c <__aeabi_ddiv+0x338>
   33d4a:	e107      	b.n	33f5c <__aeabi_ddiv+0x548>
   33d4c:	4288      	cmp	r0, r1
   33d4e:	d800      	bhi.n	33d52 <__aeabi_ddiv+0x33e>
   33d50:	e104      	b.n	33f5c <__aeabi_ddiv+0x548>
   33d52:	3d02      	subs	r5, #2
   33d54:	4441      	add	r1, r8
   33d56:	9b04      	ldr	r3, [sp, #16]
   33d58:	1acb      	subs	r3, r1, r3
   33d5a:	0018      	movs	r0, r3
   33d5c:	0039      	movs	r1, r7
   33d5e:	9304      	str	r3, [sp, #16]
   33d60:	f7ff f818 	bl	32d94 <__udivsi3>
   33d64:	9b01      	ldr	r3, [sp, #4]
   33d66:	4682      	mov	sl, r0
   33d68:	4343      	muls	r3, r0
   33d6a:	0039      	movs	r1, r7
   33d6c:	9804      	ldr	r0, [sp, #16]
   33d6e:	9301      	str	r3, [sp, #4]
   33d70:	f7ff f896 	bl	32ea0 <__aeabi_uidivmod>
   33d74:	9801      	ldr	r0, [sp, #4]
   33d76:	040b      	lsls	r3, r1, #16
   33d78:	0431      	lsls	r1, r6, #16
   33d7a:	0c09      	lsrs	r1, r1, #16
   33d7c:	4319      	orrs	r1, r3
   33d7e:	4288      	cmp	r0, r1
   33d80:	d90d      	bls.n	33d9e <__aeabi_ddiv+0x38a>
   33d82:	4653      	mov	r3, sl
   33d84:	4441      	add	r1, r8
   33d86:	3b01      	subs	r3, #1
   33d88:	4588      	cmp	r8, r1
   33d8a:	d900      	bls.n	33d8e <__aeabi_ddiv+0x37a>
   33d8c:	e0e8      	b.n	33f60 <__aeabi_ddiv+0x54c>
   33d8e:	4288      	cmp	r0, r1
   33d90:	d800      	bhi.n	33d94 <__aeabi_ddiv+0x380>
   33d92:	e0e5      	b.n	33f60 <__aeabi_ddiv+0x54c>
   33d94:	2302      	movs	r3, #2
   33d96:	425b      	negs	r3, r3
   33d98:	469c      	mov	ip, r3
   33d9a:	4441      	add	r1, r8
   33d9c:	44e2      	add	sl, ip
   33d9e:	9b01      	ldr	r3, [sp, #4]
   33da0:	042d      	lsls	r5, r5, #16
   33da2:	1ace      	subs	r6, r1, r3
   33da4:	4651      	mov	r1, sl
   33da6:	4329      	orrs	r1, r5
   33da8:	9d05      	ldr	r5, [sp, #20]
   33daa:	464f      	mov	r7, r9
   33dac:	002a      	movs	r2, r5
   33dae:	040b      	lsls	r3, r1, #16
   33db0:	0c08      	lsrs	r0, r1, #16
   33db2:	0c1b      	lsrs	r3, r3, #16
   33db4:	435a      	muls	r2, r3
   33db6:	4345      	muls	r5, r0
   33db8:	437b      	muls	r3, r7
   33dba:	4378      	muls	r0, r7
   33dbc:	195b      	adds	r3, r3, r5
   33dbe:	0c17      	lsrs	r7, r2, #16
   33dc0:	18fb      	adds	r3, r7, r3
   33dc2:	429d      	cmp	r5, r3
   33dc4:	d903      	bls.n	33dce <__aeabi_ddiv+0x3ba>
   33dc6:	2580      	movs	r5, #128	; 0x80
   33dc8:	026d      	lsls	r5, r5, #9
   33dca:	46ac      	mov	ip, r5
   33dcc:	4460      	add	r0, ip
   33dce:	0c1d      	lsrs	r5, r3, #16
   33dd0:	0412      	lsls	r2, r2, #16
   33dd2:	041b      	lsls	r3, r3, #16
   33dd4:	0c12      	lsrs	r2, r2, #16
   33dd6:	1828      	adds	r0, r5, r0
   33dd8:	189b      	adds	r3, r3, r2
   33dda:	4286      	cmp	r6, r0
   33ddc:	d200      	bcs.n	33de0 <__aeabi_ddiv+0x3cc>
   33dde:	e093      	b.n	33f08 <__aeabi_ddiv+0x4f4>
   33de0:	d100      	bne.n	33de4 <__aeabi_ddiv+0x3d0>
   33de2:	e08e      	b.n	33f02 <__aeabi_ddiv+0x4ee>
   33de4:	2301      	movs	r3, #1
   33de6:	4319      	orrs	r1, r3
   33de8:	4ba0      	ldr	r3, [pc, #640]	; (3406c <__aeabi_ddiv+0x658>)
   33dea:	18e3      	adds	r3, r4, r3
   33dec:	2b00      	cmp	r3, #0
   33dee:	dc00      	bgt.n	33df2 <__aeabi_ddiv+0x3de>
   33df0:	e099      	b.n	33f26 <__aeabi_ddiv+0x512>
   33df2:	074a      	lsls	r2, r1, #29
   33df4:	d000      	beq.n	33df8 <__aeabi_ddiv+0x3e4>
   33df6:	e09e      	b.n	33f36 <__aeabi_ddiv+0x522>
   33df8:	465a      	mov	r2, fp
   33dfa:	01d2      	lsls	r2, r2, #7
   33dfc:	d506      	bpl.n	33e0c <__aeabi_ddiv+0x3f8>
   33dfe:	465a      	mov	r2, fp
   33e00:	4b9b      	ldr	r3, [pc, #620]	; (34070 <__aeabi_ddiv+0x65c>)
   33e02:	401a      	ands	r2, r3
   33e04:	2380      	movs	r3, #128	; 0x80
   33e06:	4693      	mov	fp, r2
   33e08:	00db      	lsls	r3, r3, #3
   33e0a:	18e3      	adds	r3, r4, r3
   33e0c:	4a99      	ldr	r2, [pc, #612]	; (34074 <__aeabi_ddiv+0x660>)
   33e0e:	4293      	cmp	r3, r2
   33e10:	dd68      	ble.n	33ee4 <__aeabi_ddiv+0x4d0>
   33e12:	2301      	movs	r3, #1
   33e14:	9a02      	ldr	r2, [sp, #8]
   33e16:	4c98      	ldr	r4, [pc, #608]	; (34078 <__aeabi_ddiv+0x664>)
   33e18:	401a      	ands	r2, r3
   33e1a:	2300      	movs	r3, #0
   33e1c:	4694      	mov	ip, r2
   33e1e:	4698      	mov	r8, r3
   33e20:	2200      	movs	r2, #0
   33e22:	e6c5      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33e24:	2280      	movs	r2, #128	; 0x80
   33e26:	464b      	mov	r3, r9
   33e28:	0312      	lsls	r2, r2, #12
   33e2a:	4213      	tst	r3, r2
   33e2c:	d00a      	beq.n	33e44 <__aeabi_ddiv+0x430>
   33e2e:	465b      	mov	r3, fp
   33e30:	4213      	tst	r3, r2
   33e32:	d106      	bne.n	33e42 <__aeabi_ddiv+0x42e>
   33e34:	431a      	orrs	r2, r3
   33e36:	0312      	lsls	r2, r2, #12
   33e38:	0b12      	lsrs	r2, r2, #12
   33e3a:	46ac      	mov	ip, r5
   33e3c:	4688      	mov	r8, r1
   33e3e:	4c8e      	ldr	r4, [pc, #568]	; (34078 <__aeabi_ddiv+0x664>)
   33e40:	e6b6      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33e42:	464b      	mov	r3, r9
   33e44:	431a      	orrs	r2, r3
   33e46:	0312      	lsls	r2, r2, #12
   33e48:	0b12      	lsrs	r2, r2, #12
   33e4a:	46bc      	mov	ip, r7
   33e4c:	4c8a      	ldr	r4, [pc, #552]	; (34078 <__aeabi_ddiv+0x664>)
   33e4e:	e6af      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33e50:	0003      	movs	r3, r0
   33e52:	465a      	mov	r2, fp
   33e54:	3b28      	subs	r3, #40	; 0x28
   33e56:	409a      	lsls	r2, r3
   33e58:	2300      	movs	r3, #0
   33e5a:	4691      	mov	r9, r2
   33e5c:	4698      	mov	r8, r3
   33e5e:	e657      	b.n	33b10 <__aeabi_ddiv+0xfc>
   33e60:	4658      	mov	r0, fp
   33e62:	f000 ff5f 	bl	34d24 <__clzsi2>
   33e66:	3020      	adds	r0, #32
   33e68:	e640      	b.n	33aec <__aeabi_ddiv+0xd8>
   33e6a:	0003      	movs	r3, r0
   33e6c:	4652      	mov	r2, sl
   33e6e:	3b28      	subs	r3, #40	; 0x28
   33e70:	409a      	lsls	r2, r3
   33e72:	2100      	movs	r1, #0
   33e74:	4693      	mov	fp, r2
   33e76:	e677      	b.n	33b68 <__aeabi_ddiv+0x154>
   33e78:	f000 ff54 	bl	34d24 <__clzsi2>
   33e7c:	3020      	adds	r0, #32
   33e7e:	e65f      	b.n	33b40 <__aeabi_ddiv+0x12c>
   33e80:	4588      	cmp	r8, r1
   33e82:	d200      	bcs.n	33e86 <__aeabi_ddiv+0x472>
   33e84:	e6c7      	b.n	33c16 <__aeabi_ddiv+0x202>
   33e86:	464b      	mov	r3, r9
   33e88:	07de      	lsls	r6, r3, #31
   33e8a:	085d      	lsrs	r5, r3, #1
   33e8c:	4643      	mov	r3, r8
   33e8e:	085b      	lsrs	r3, r3, #1
   33e90:	431e      	orrs	r6, r3
   33e92:	4643      	mov	r3, r8
   33e94:	07db      	lsls	r3, r3, #31
   33e96:	469a      	mov	sl, r3
   33e98:	e6c2      	b.n	33c20 <__aeabi_ddiv+0x20c>
   33e9a:	2500      	movs	r5, #0
   33e9c:	4592      	cmp	sl, r2
   33e9e:	d300      	bcc.n	33ea2 <__aeabi_ddiv+0x48e>
   33ea0:	e733      	b.n	33d0a <__aeabi_ddiv+0x2f6>
   33ea2:	9e03      	ldr	r6, [sp, #12]
   33ea4:	4659      	mov	r1, fp
   33ea6:	46b4      	mov	ip, r6
   33ea8:	44e2      	add	sl, ip
   33eaa:	45b2      	cmp	sl, r6
   33eac:	41ad      	sbcs	r5, r5
   33eae:	426d      	negs	r5, r5
   33eb0:	4445      	add	r5, r8
   33eb2:	18eb      	adds	r3, r5, r3
   33eb4:	3901      	subs	r1, #1
   33eb6:	4598      	cmp	r8, r3
   33eb8:	d207      	bcs.n	33eca <__aeabi_ddiv+0x4b6>
   33eba:	4298      	cmp	r0, r3
   33ebc:	d900      	bls.n	33ec0 <__aeabi_ddiv+0x4ac>
   33ebe:	e07f      	b.n	33fc0 <__aeabi_ddiv+0x5ac>
   33ec0:	d100      	bne.n	33ec4 <__aeabi_ddiv+0x4b0>
   33ec2:	e0bc      	b.n	3403e <__aeabi_ddiv+0x62a>
   33ec4:	1a1d      	subs	r5, r3, r0
   33ec6:	468b      	mov	fp, r1
   33ec8:	e71f      	b.n	33d0a <__aeabi_ddiv+0x2f6>
   33eca:	4598      	cmp	r8, r3
   33ecc:	d1fa      	bne.n	33ec4 <__aeabi_ddiv+0x4b0>
   33ece:	9d03      	ldr	r5, [sp, #12]
   33ed0:	4555      	cmp	r5, sl
   33ed2:	d9f2      	bls.n	33eba <__aeabi_ddiv+0x4a6>
   33ed4:	4643      	mov	r3, r8
   33ed6:	468b      	mov	fp, r1
   33ed8:	1a1d      	subs	r5, r3, r0
   33eda:	e716      	b.n	33d0a <__aeabi_ddiv+0x2f6>
   33edc:	469b      	mov	fp, r3
   33ede:	e6ca      	b.n	33c76 <__aeabi_ddiv+0x262>
   33ee0:	0015      	movs	r5, r2
   33ee2:	e6e7      	b.n	33cb4 <__aeabi_ddiv+0x2a0>
   33ee4:	465a      	mov	r2, fp
   33ee6:	08c9      	lsrs	r1, r1, #3
   33ee8:	0752      	lsls	r2, r2, #29
   33eea:	430a      	orrs	r2, r1
   33eec:	055b      	lsls	r3, r3, #21
   33eee:	4690      	mov	r8, r2
   33ef0:	0d5c      	lsrs	r4, r3, #21
   33ef2:	465a      	mov	r2, fp
   33ef4:	2301      	movs	r3, #1
   33ef6:	9902      	ldr	r1, [sp, #8]
   33ef8:	0252      	lsls	r2, r2, #9
   33efa:	4019      	ands	r1, r3
   33efc:	0b12      	lsrs	r2, r2, #12
   33efe:	468c      	mov	ip, r1
   33f00:	e656      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33f02:	2b00      	cmp	r3, #0
   33f04:	d100      	bne.n	33f08 <__aeabi_ddiv+0x4f4>
   33f06:	e76f      	b.n	33de8 <__aeabi_ddiv+0x3d4>
   33f08:	4446      	add	r6, r8
   33f0a:	1e4a      	subs	r2, r1, #1
   33f0c:	45b0      	cmp	r8, r6
   33f0e:	d929      	bls.n	33f64 <__aeabi_ddiv+0x550>
   33f10:	0011      	movs	r1, r2
   33f12:	4286      	cmp	r6, r0
   33f14:	d000      	beq.n	33f18 <__aeabi_ddiv+0x504>
   33f16:	e765      	b.n	33de4 <__aeabi_ddiv+0x3d0>
   33f18:	9a03      	ldr	r2, [sp, #12]
   33f1a:	4293      	cmp	r3, r2
   33f1c:	d000      	beq.n	33f20 <__aeabi_ddiv+0x50c>
   33f1e:	e761      	b.n	33de4 <__aeabi_ddiv+0x3d0>
   33f20:	e762      	b.n	33de8 <__aeabi_ddiv+0x3d4>
   33f22:	2101      	movs	r1, #1
   33f24:	4249      	negs	r1, r1
   33f26:	2001      	movs	r0, #1
   33f28:	1ac2      	subs	r2, r0, r3
   33f2a:	2a38      	cmp	r2, #56	; 0x38
   33f2c:	dd21      	ble.n	33f72 <__aeabi_ddiv+0x55e>
   33f2e:	9b02      	ldr	r3, [sp, #8]
   33f30:	4003      	ands	r3, r0
   33f32:	469c      	mov	ip, r3
   33f34:	e638      	b.n	33ba8 <__aeabi_ddiv+0x194>
   33f36:	220f      	movs	r2, #15
   33f38:	400a      	ands	r2, r1
   33f3a:	2a04      	cmp	r2, #4
   33f3c:	d100      	bne.n	33f40 <__aeabi_ddiv+0x52c>
   33f3e:	e75b      	b.n	33df8 <__aeabi_ddiv+0x3e4>
   33f40:	000a      	movs	r2, r1
   33f42:	1d11      	adds	r1, r2, #4
   33f44:	4291      	cmp	r1, r2
   33f46:	4192      	sbcs	r2, r2
   33f48:	4252      	negs	r2, r2
   33f4a:	4493      	add	fp, r2
   33f4c:	e754      	b.n	33df8 <__aeabi_ddiv+0x3e4>
   33f4e:	4b47      	ldr	r3, [pc, #284]	; (3406c <__aeabi_ddiv+0x658>)
   33f50:	18e3      	adds	r3, r4, r3
   33f52:	2b00      	cmp	r3, #0
   33f54:	dde5      	ble.n	33f22 <__aeabi_ddiv+0x50e>
   33f56:	2201      	movs	r2, #1
   33f58:	4252      	negs	r2, r2
   33f5a:	e7f2      	b.n	33f42 <__aeabi_ddiv+0x52e>
   33f5c:	001d      	movs	r5, r3
   33f5e:	e6fa      	b.n	33d56 <__aeabi_ddiv+0x342>
   33f60:	469a      	mov	sl, r3
   33f62:	e71c      	b.n	33d9e <__aeabi_ddiv+0x38a>
   33f64:	42b0      	cmp	r0, r6
   33f66:	d839      	bhi.n	33fdc <__aeabi_ddiv+0x5c8>
   33f68:	d06e      	beq.n	34048 <__aeabi_ddiv+0x634>
   33f6a:	0011      	movs	r1, r2
   33f6c:	e73a      	b.n	33de4 <__aeabi_ddiv+0x3d0>
   33f6e:	9302      	str	r3, [sp, #8]
   33f70:	e73a      	b.n	33de8 <__aeabi_ddiv+0x3d4>
   33f72:	2a1f      	cmp	r2, #31
   33f74:	dc3c      	bgt.n	33ff0 <__aeabi_ddiv+0x5dc>
   33f76:	2320      	movs	r3, #32
   33f78:	1a9b      	subs	r3, r3, r2
   33f7a:	000c      	movs	r4, r1
   33f7c:	4658      	mov	r0, fp
   33f7e:	4099      	lsls	r1, r3
   33f80:	4098      	lsls	r0, r3
   33f82:	1e4b      	subs	r3, r1, #1
   33f84:	4199      	sbcs	r1, r3
   33f86:	465b      	mov	r3, fp
   33f88:	40d4      	lsrs	r4, r2
   33f8a:	40d3      	lsrs	r3, r2
   33f8c:	4320      	orrs	r0, r4
   33f8e:	4308      	orrs	r0, r1
   33f90:	001a      	movs	r2, r3
   33f92:	0743      	lsls	r3, r0, #29
   33f94:	d009      	beq.n	33faa <__aeabi_ddiv+0x596>
   33f96:	230f      	movs	r3, #15
   33f98:	4003      	ands	r3, r0
   33f9a:	2b04      	cmp	r3, #4
   33f9c:	d005      	beq.n	33faa <__aeabi_ddiv+0x596>
   33f9e:	0001      	movs	r1, r0
   33fa0:	1d08      	adds	r0, r1, #4
   33fa2:	4288      	cmp	r0, r1
   33fa4:	419b      	sbcs	r3, r3
   33fa6:	425b      	negs	r3, r3
   33fa8:	18d2      	adds	r2, r2, r3
   33faa:	0213      	lsls	r3, r2, #8
   33fac:	d53a      	bpl.n	34024 <__aeabi_ddiv+0x610>
   33fae:	2301      	movs	r3, #1
   33fb0:	9a02      	ldr	r2, [sp, #8]
   33fb2:	2401      	movs	r4, #1
   33fb4:	401a      	ands	r2, r3
   33fb6:	2300      	movs	r3, #0
   33fb8:	4694      	mov	ip, r2
   33fba:	4698      	mov	r8, r3
   33fbc:	2200      	movs	r2, #0
   33fbe:	e5f7      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   33fc0:	2102      	movs	r1, #2
   33fc2:	4249      	negs	r1, r1
   33fc4:	468c      	mov	ip, r1
   33fc6:	9d03      	ldr	r5, [sp, #12]
   33fc8:	44e3      	add	fp, ip
   33fca:	46ac      	mov	ip, r5
   33fcc:	44e2      	add	sl, ip
   33fce:	45aa      	cmp	sl, r5
   33fd0:	41ad      	sbcs	r5, r5
   33fd2:	426d      	negs	r5, r5
   33fd4:	4445      	add	r5, r8
   33fd6:	18ed      	adds	r5, r5, r3
   33fd8:	1a2d      	subs	r5, r5, r0
   33fda:	e696      	b.n	33d0a <__aeabi_ddiv+0x2f6>
   33fdc:	1e8a      	subs	r2, r1, #2
   33fde:	9903      	ldr	r1, [sp, #12]
   33fe0:	004d      	lsls	r5, r1, #1
   33fe2:	428d      	cmp	r5, r1
   33fe4:	4189      	sbcs	r1, r1
   33fe6:	4249      	negs	r1, r1
   33fe8:	4441      	add	r1, r8
   33fea:	1876      	adds	r6, r6, r1
   33fec:	9503      	str	r5, [sp, #12]
   33fee:	e78f      	b.n	33f10 <__aeabi_ddiv+0x4fc>
   33ff0:	201f      	movs	r0, #31
   33ff2:	4240      	negs	r0, r0
   33ff4:	1ac3      	subs	r3, r0, r3
   33ff6:	4658      	mov	r0, fp
   33ff8:	40d8      	lsrs	r0, r3
   33ffa:	0003      	movs	r3, r0
   33ffc:	2a20      	cmp	r2, #32
   33ffe:	d028      	beq.n	34052 <__aeabi_ddiv+0x63e>
   34000:	2040      	movs	r0, #64	; 0x40
   34002:	465d      	mov	r5, fp
   34004:	1a82      	subs	r2, r0, r2
   34006:	4095      	lsls	r5, r2
   34008:	4329      	orrs	r1, r5
   3400a:	1e4a      	subs	r2, r1, #1
   3400c:	4191      	sbcs	r1, r2
   3400e:	4319      	orrs	r1, r3
   34010:	2307      	movs	r3, #7
   34012:	2200      	movs	r2, #0
   34014:	400b      	ands	r3, r1
   34016:	d009      	beq.n	3402c <__aeabi_ddiv+0x618>
   34018:	230f      	movs	r3, #15
   3401a:	2200      	movs	r2, #0
   3401c:	400b      	ands	r3, r1
   3401e:	0008      	movs	r0, r1
   34020:	2b04      	cmp	r3, #4
   34022:	d1bd      	bne.n	33fa0 <__aeabi_ddiv+0x58c>
   34024:	0001      	movs	r1, r0
   34026:	0753      	lsls	r3, r2, #29
   34028:	0252      	lsls	r2, r2, #9
   3402a:	0b12      	lsrs	r2, r2, #12
   3402c:	08c9      	lsrs	r1, r1, #3
   3402e:	4319      	orrs	r1, r3
   34030:	2301      	movs	r3, #1
   34032:	4688      	mov	r8, r1
   34034:	9902      	ldr	r1, [sp, #8]
   34036:	2400      	movs	r4, #0
   34038:	4019      	ands	r1, r3
   3403a:	468c      	mov	ip, r1
   3403c:	e5b8      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   3403e:	4552      	cmp	r2, sl
   34040:	d8be      	bhi.n	33fc0 <__aeabi_ddiv+0x5ac>
   34042:	468b      	mov	fp, r1
   34044:	2500      	movs	r5, #0
   34046:	e660      	b.n	33d0a <__aeabi_ddiv+0x2f6>
   34048:	9d03      	ldr	r5, [sp, #12]
   3404a:	429d      	cmp	r5, r3
   3404c:	d3c6      	bcc.n	33fdc <__aeabi_ddiv+0x5c8>
   3404e:	0011      	movs	r1, r2
   34050:	e762      	b.n	33f18 <__aeabi_ddiv+0x504>
   34052:	2500      	movs	r5, #0
   34054:	e7d8      	b.n	34008 <__aeabi_ddiv+0x5f4>
   34056:	2280      	movs	r2, #128	; 0x80
   34058:	465b      	mov	r3, fp
   3405a:	0312      	lsls	r2, r2, #12
   3405c:	431a      	orrs	r2, r3
   3405e:	9b01      	ldr	r3, [sp, #4]
   34060:	0312      	lsls	r2, r2, #12
   34062:	0b12      	lsrs	r2, r2, #12
   34064:	469c      	mov	ip, r3
   34066:	4688      	mov	r8, r1
   34068:	4c03      	ldr	r4, [pc, #12]	; (34078 <__aeabi_ddiv+0x664>)
   3406a:	e5a1      	b.n	33bb0 <__aeabi_ddiv+0x19c>
   3406c:	000003ff 	.word	0x000003ff
   34070:	feffffff 	.word	0xfeffffff
   34074:	000007fe 	.word	0x000007fe
   34078:	000007ff 	.word	0x000007ff

0003407c <__aeabi_dmul>:
   3407c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3407e:	4657      	mov	r7, sl
   34080:	4645      	mov	r5, r8
   34082:	46de      	mov	lr, fp
   34084:	464e      	mov	r6, r9
   34086:	b5e0      	push	{r5, r6, r7, lr}
   34088:	030c      	lsls	r4, r1, #12
   3408a:	4698      	mov	r8, r3
   3408c:	004e      	lsls	r6, r1, #1
   3408e:	0b23      	lsrs	r3, r4, #12
   34090:	b087      	sub	sp, #28
   34092:	0007      	movs	r7, r0
   34094:	4692      	mov	sl, r2
   34096:	469b      	mov	fp, r3
   34098:	0d76      	lsrs	r6, r6, #21
   3409a:	0fcd      	lsrs	r5, r1, #31
   3409c:	2e00      	cmp	r6, #0
   3409e:	d06b      	beq.n	34178 <__aeabi_dmul+0xfc>
   340a0:	4b6d      	ldr	r3, [pc, #436]	; (34258 <__aeabi_dmul+0x1dc>)
   340a2:	429e      	cmp	r6, r3
   340a4:	d035      	beq.n	34112 <__aeabi_dmul+0x96>
   340a6:	2480      	movs	r4, #128	; 0x80
   340a8:	465b      	mov	r3, fp
   340aa:	0f42      	lsrs	r2, r0, #29
   340ac:	0424      	lsls	r4, r4, #16
   340ae:	00db      	lsls	r3, r3, #3
   340b0:	4314      	orrs	r4, r2
   340b2:	431c      	orrs	r4, r3
   340b4:	00c3      	lsls	r3, r0, #3
   340b6:	4699      	mov	r9, r3
   340b8:	4b68      	ldr	r3, [pc, #416]	; (3425c <__aeabi_dmul+0x1e0>)
   340ba:	46a3      	mov	fp, r4
   340bc:	469c      	mov	ip, r3
   340be:	2300      	movs	r3, #0
   340c0:	2700      	movs	r7, #0
   340c2:	4466      	add	r6, ip
   340c4:	9302      	str	r3, [sp, #8]
   340c6:	4643      	mov	r3, r8
   340c8:	031c      	lsls	r4, r3, #12
   340ca:	005a      	lsls	r2, r3, #1
   340cc:	0fdb      	lsrs	r3, r3, #31
   340ce:	4650      	mov	r0, sl
   340d0:	0b24      	lsrs	r4, r4, #12
   340d2:	0d52      	lsrs	r2, r2, #21
   340d4:	4698      	mov	r8, r3
   340d6:	d100      	bne.n	340da <__aeabi_dmul+0x5e>
   340d8:	e076      	b.n	341c8 <__aeabi_dmul+0x14c>
   340da:	4b5f      	ldr	r3, [pc, #380]	; (34258 <__aeabi_dmul+0x1dc>)
   340dc:	429a      	cmp	r2, r3
   340de:	d06d      	beq.n	341bc <__aeabi_dmul+0x140>
   340e0:	2380      	movs	r3, #128	; 0x80
   340e2:	0f41      	lsrs	r1, r0, #29
   340e4:	041b      	lsls	r3, r3, #16
   340e6:	430b      	orrs	r3, r1
   340e8:	495c      	ldr	r1, [pc, #368]	; (3425c <__aeabi_dmul+0x1e0>)
   340ea:	00e4      	lsls	r4, r4, #3
   340ec:	468c      	mov	ip, r1
   340ee:	431c      	orrs	r4, r3
   340f0:	00c3      	lsls	r3, r0, #3
   340f2:	2000      	movs	r0, #0
   340f4:	4462      	add	r2, ip
   340f6:	4641      	mov	r1, r8
   340f8:	18b6      	adds	r6, r6, r2
   340fa:	4069      	eors	r1, r5
   340fc:	1c72      	adds	r2, r6, #1
   340fe:	9101      	str	r1, [sp, #4]
   34100:	4694      	mov	ip, r2
   34102:	4307      	orrs	r7, r0
   34104:	2f0f      	cmp	r7, #15
   34106:	d900      	bls.n	3410a <__aeabi_dmul+0x8e>
   34108:	e0b0      	b.n	3426c <__aeabi_dmul+0x1f0>
   3410a:	4a55      	ldr	r2, [pc, #340]	; (34260 <__aeabi_dmul+0x1e4>)
   3410c:	00bf      	lsls	r7, r7, #2
   3410e:	59d2      	ldr	r2, [r2, r7]
   34110:	4697      	mov	pc, r2
   34112:	465b      	mov	r3, fp
   34114:	4303      	orrs	r3, r0
   34116:	4699      	mov	r9, r3
   34118:	d000      	beq.n	3411c <__aeabi_dmul+0xa0>
   3411a:	e087      	b.n	3422c <__aeabi_dmul+0x1b0>
   3411c:	2300      	movs	r3, #0
   3411e:	469b      	mov	fp, r3
   34120:	3302      	adds	r3, #2
   34122:	2708      	movs	r7, #8
   34124:	9302      	str	r3, [sp, #8]
   34126:	e7ce      	b.n	340c6 <__aeabi_dmul+0x4a>
   34128:	4642      	mov	r2, r8
   3412a:	9201      	str	r2, [sp, #4]
   3412c:	2802      	cmp	r0, #2
   3412e:	d067      	beq.n	34200 <__aeabi_dmul+0x184>
   34130:	2803      	cmp	r0, #3
   34132:	d100      	bne.n	34136 <__aeabi_dmul+0xba>
   34134:	e20e      	b.n	34554 <__aeabi_dmul+0x4d8>
   34136:	2801      	cmp	r0, #1
   34138:	d000      	beq.n	3413c <__aeabi_dmul+0xc0>
   3413a:	e162      	b.n	34402 <__aeabi_dmul+0x386>
   3413c:	2300      	movs	r3, #0
   3413e:	2400      	movs	r4, #0
   34140:	2200      	movs	r2, #0
   34142:	4699      	mov	r9, r3
   34144:	9901      	ldr	r1, [sp, #4]
   34146:	4001      	ands	r1, r0
   34148:	b2cd      	uxtb	r5, r1
   3414a:	2100      	movs	r1, #0
   3414c:	0312      	lsls	r2, r2, #12
   3414e:	0d0b      	lsrs	r3, r1, #20
   34150:	0b12      	lsrs	r2, r2, #12
   34152:	051b      	lsls	r3, r3, #20
   34154:	4313      	orrs	r3, r2
   34156:	4a43      	ldr	r2, [pc, #268]	; (34264 <__aeabi_dmul+0x1e8>)
   34158:	0524      	lsls	r4, r4, #20
   3415a:	4013      	ands	r3, r2
   3415c:	431c      	orrs	r4, r3
   3415e:	0064      	lsls	r4, r4, #1
   34160:	07ed      	lsls	r5, r5, #31
   34162:	0864      	lsrs	r4, r4, #1
   34164:	432c      	orrs	r4, r5
   34166:	4648      	mov	r0, r9
   34168:	0021      	movs	r1, r4
   3416a:	b007      	add	sp, #28
   3416c:	bc3c      	pop	{r2, r3, r4, r5}
   3416e:	4690      	mov	r8, r2
   34170:	4699      	mov	r9, r3
   34172:	46a2      	mov	sl, r4
   34174:	46ab      	mov	fp, r5
   34176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34178:	4303      	orrs	r3, r0
   3417a:	4699      	mov	r9, r3
   3417c:	d04f      	beq.n	3421e <__aeabi_dmul+0x1a2>
   3417e:	465b      	mov	r3, fp
   34180:	2b00      	cmp	r3, #0
   34182:	d100      	bne.n	34186 <__aeabi_dmul+0x10a>
   34184:	e189      	b.n	3449a <__aeabi_dmul+0x41e>
   34186:	4658      	mov	r0, fp
   34188:	f000 fdcc 	bl	34d24 <__clzsi2>
   3418c:	0003      	movs	r3, r0
   3418e:	3b0b      	subs	r3, #11
   34190:	2b1c      	cmp	r3, #28
   34192:	dd00      	ble.n	34196 <__aeabi_dmul+0x11a>
   34194:	e17a      	b.n	3448c <__aeabi_dmul+0x410>
   34196:	221d      	movs	r2, #29
   34198:	1ad3      	subs	r3, r2, r3
   3419a:	003a      	movs	r2, r7
   3419c:	0001      	movs	r1, r0
   3419e:	465c      	mov	r4, fp
   341a0:	40da      	lsrs	r2, r3
   341a2:	3908      	subs	r1, #8
   341a4:	408c      	lsls	r4, r1
   341a6:	0013      	movs	r3, r2
   341a8:	408f      	lsls	r7, r1
   341aa:	4323      	orrs	r3, r4
   341ac:	469b      	mov	fp, r3
   341ae:	46b9      	mov	r9, r7
   341b0:	2300      	movs	r3, #0
   341b2:	4e2d      	ldr	r6, [pc, #180]	; (34268 <__aeabi_dmul+0x1ec>)
   341b4:	2700      	movs	r7, #0
   341b6:	1a36      	subs	r6, r6, r0
   341b8:	9302      	str	r3, [sp, #8]
   341ba:	e784      	b.n	340c6 <__aeabi_dmul+0x4a>
   341bc:	4653      	mov	r3, sl
   341be:	4323      	orrs	r3, r4
   341c0:	d12a      	bne.n	34218 <__aeabi_dmul+0x19c>
   341c2:	2400      	movs	r4, #0
   341c4:	2002      	movs	r0, #2
   341c6:	e796      	b.n	340f6 <__aeabi_dmul+0x7a>
   341c8:	4653      	mov	r3, sl
   341ca:	4323      	orrs	r3, r4
   341cc:	d020      	beq.n	34210 <__aeabi_dmul+0x194>
   341ce:	2c00      	cmp	r4, #0
   341d0:	d100      	bne.n	341d4 <__aeabi_dmul+0x158>
   341d2:	e157      	b.n	34484 <__aeabi_dmul+0x408>
   341d4:	0020      	movs	r0, r4
   341d6:	f000 fda5 	bl	34d24 <__clzsi2>
   341da:	0003      	movs	r3, r0
   341dc:	3b0b      	subs	r3, #11
   341de:	2b1c      	cmp	r3, #28
   341e0:	dd00      	ble.n	341e4 <__aeabi_dmul+0x168>
   341e2:	e149      	b.n	34478 <__aeabi_dmul+0x3fc>
   341e4:	211d      	movs	r1, #29
   341e6:	1acb      	subs	r3, r1, r3
   341e8:	4651      	mov	r1, sl
   341ea:	0002      	movs	r2, r0
   341ec:	40d9      	lsrs	r1, r3
   341ee:	4653      	mov	r3, sl
   341f0:	3a08      	subs	r2, #8
   341f2:	4094      	lsls	r4, r2
   341f4:	4093      	lsls	r3, r2
   341f6:	430c      	orrs	r4, r1
   341f8:	4a1b      	ldr	r2, [pc, #108]	; (34268 <__aeabi_dmul+0x1ec>)
   341fa:	1a12      	subs	r2, r2, r0
   341fc:	2000      	movs	r0, #0
   341fe:	e77a      	b.n	340f6 <__aeabi_dmul+0x7a>
   34200:	2501      	movs	r5, #1
   34202:	9b01      	ldr	r3, [sp, #4]
   34204:	4c14      	ldr	r4, [pc, #80]	; (34258 <__aeabi_dmul+0x1dc>)
   34206:	401d      	ands	r5, r3
   34208:	2300      	movs	r3, #0
   3420a:	2200      	movs	r2, #0
   3420c:	4699      	mov	r9, r3
   3420e:	e79c      	b.n	3414a <__aeabi_dmul+0xce>
   34210:	2400      	movs	r4, #0
   34212:	2200      	movs	r2, #0
   34214:	2001      	movs	r0, #1
   34216:	e76e      	b.n	340f6 <__aeabi_dmul+0x7a>
   34218:	4653      	mov	r3, sl
   3421a:	2003      	movs	r0, #3
   3421c:	e76b      	b.n	340f6 <__aeabi_dmul+0x7a>
   3421e:	2300      	movs	r3, #0
   34220:	469b      	mov	fp, r3
   34222:	3301      	adds	r3, #1
   34224:	2704      	movs	r7, #4
   34226:	2600      	movs	r6, #0
   34228:	9302      	str	r3, [sp, #8]
   3422a:	e74c      	b.n	340c6 <__aeabi_dmul+0x4a>
   3422c:	2303      	movs	r3, #3
   3422e:	4681      	mov	r9, r0
   34230:	270c      	movs	r7, #12
   34232:	9302      	str	r3, [sp, #8]
   34234:	e747      	b.n	340c6 <__aeabi_dmul+0x4a>
   34236:	2280      	movs	r2, #128	; 0x80
   34238:	2300      	movs	r3, #0
   3423a:	2500      	movs	r5, #0
   3423c:	0312      	lsls	r2, r2, #12
   3423e:	4699      	mov	r9, r3
   34240:	4c05      	ldr	r4, [pc, #20]	; (34258 <__aeabi_dmul+0x1dc>)
   34242:	e782      	b.n	3414a <__aeabi_dmul+0xce>
   34244:	465c      	mov	r4, fp
   34246:	464b      	mov	r3, r9
   34248:	9802      	ldr	r0, [sp, #8]
   3424a:	e76f      	b.n	3412c <__aeabi_dmul+0xb0>
   3424c:	465c      	mov	r4, fp
   3424e:	464b      	mov	r3, r9
   34250:	9501      	str	r5, [sp, #4]
   34252:	9802      	ldr	r0, [sp, #8]
   34254:	e76a      	b.n	3412c <__aeabi_dmul+0xb0>
   34256:	46c0      	nop			; (mov r8, r8)
   34258:	000007ff 	.word	0x000007ff
   3425c:	fffffc01 	.word	0xfffffc01
   34260:	0003a6b4 	.word	0x0003a6b4
   34264:	800fffff 	.word	0x800fffff
   34268:	fffffc0d 	.word	0xfffffc0d
   3426c:	464a      	mov	r2, r9
   3426e:	4649      	mov	r1, r9
   34270:	0c17      	lsrs	r7, r2, #16
   34272:	0c1a      	lsrs	r2, r3, #16
   34274:	041b      	lsls	r3, r3, #16
   34276:	0c1b      	lsrs	r3, r3, #16
   34278:	0408      	lsls	r0, r1, #16
   3427a:	0019      	movs	r1, r3
   3427c:	0c00      	lsrs	r0, r0, #16
   3427e:	4341      	muls	r1, r0
   34280:	0015      	movs	r5, r2
   34282:	4688      	mov	r8, r1
   34284:	0019      	movs	r1, r3
   34286:	437d      	muls	r5, r7
   34288:	4379      	muls	r1, r7
   3428a:	9503      	str	r5, [sp, #12]
   3428c:	4689      	mov	r9, r1
   3428e:	0029      	movs	r1, r5
   34290:	0015      	movs	r5, r2
   34292:	4345      	muls	r5, r0
   34294:	444d      	add	r5, r9
   34296:	9502      	str	r5, [sp, #8]
   34298:	4645      	mov	r5, r8
   3429a:	0c2d      	lsrs	r5, r5, #16
   3429c:	46aa      	mov	sl, r5
   3429e:	9d02      	ldr	r5, [sp, #8]
   342a0:	4455      	add	r5, sl
   342a2:	45a9      	cmp	r9, r5
   342a4:	d906      	bls.n	342b4 <__aeabi_dmul+0x238>
   342a6:	468a      	mov	sl, r1
   342a8:	2180      	movs	r1, #128	; 0x80
   342aa:	0249      	lsls	r1, r1, #9
   342ac:	4689      	mov	r9, r1
   342ae:	44ca      	add	sl, r9
   342b0:	4651      	mov	r1, sl
   342b2:	9103      	str	r1, [sp, #12]
   342b4:	0c29      	lsrs	r1, r5, #16
   342b6:	9104      	str	r1, [sp, #16]
   342b8:	4641      	mov	r1, r8
   342ba:	0409      	lsls	r1, r1, #16
   342bc:	042d      	lsls	r5, r5, #16
   342be:	0c09      	lsrs	r1, r1, #16
   342c0:	4688      	mov	r8, r1
   342c2:	0029      	movs	r1, r5
   342c4:	0c25      	lsrs	r5, r4, #16
   342c6:	0424      	lsls	r4, r4, #16
   342c8:	4441      	add	r1, r8
   342ca:	0c24      	lsrs	r4, r4, #16
   342cc:	9105      	str	r1, [sp, #20]
   342ce:	0021      	movs	r1, r4
   342d0:	4341      	muls	r1, r0
   342d2:	4688      	mov	r8, r1
   342d4:	0021      	movs	r1, r4
   342d6:	4379      	muls	r1, r7
   342d8:	468a      	mov	sl, r1
   342da:	4368      	muls	r0, r5
   342dc:	4641      	mov	r1, r8
   342de:	4450      	add	r0, sl
   342e0:	4681      	mov	r9, r0
   342e2:	0c08      	lsrs	r0, r1, #16
   342e4:	4448      	add	r0, r9
   342e6:	436f      	muls	r7, r5
   342e8:	4582      	cmp	sl, r0
   342ea:	d903      	bls.n	342f4 <__aeabi_dmul+0x278>
   342ec:	2180      	movs	r1, #128	; 0x80
   342ee:	0249      	lsls	r1, r1, #9
   342f0:	4689      	mov	r9, r1
   342f2:	444f      	add	r7, r9
   342f4:	0c01      	lsrs	r1, r0, #16
   342f6:	4689      	mov	r9, r1
   342f8:	0039      	movs	r1, r7
   342fa:	4449      	add	r1, r9
   342fc:	9102      	str	r1, [sp, #8]
   342fe:	4641      	mov	r1, r8
   34300:	040f      	lsls	r7, r1, #16
   34302:	9904      	ldr	r1, [sp, #16]
   34304:	0c3f      	lsrs	r7, r7, #16
   34306:	4688      	mov	r8, r1
   34308:	0400      	lsls	r0, r0, #16
   3430a:	19c0      	adds	r0, r0, r7
   3430c:	4480      	add	r8, r0
   3430e:	4641      	mov	r1, r8
   34310:	9104      	str	r1, [sp, #16]
   34312:	4659      	mov	r1, fp
   34314:	0c0f      	lsrs	r7, r1, #16
   34316:	0409      	lsls	r1, r1, #16
   34318:	0c09      	lsrs	r1, r1, #16
   3431a:	4688      	mov	r8, r1
   3431c:	4359      	muls	r1, r3
   3431e:	468a      	mov	sl, r1
   34320:	0039      	movs	r1, r7
   34322:	4351      	muls	r1, r2
   34324:	4689      	mov	r9, r1
   34326:	4641      	mov	r1, r8
   34328:	434a      	muls	r2, r1
   3432a:	4651      	mov	r1, sl
   3432c:	0c09      	lsrs	r1, r1, #16
   3432e:	468b      	mov	fp, r1
   34330:	437b      	muls	r3, r7
   34332:	18d2      	adds	r2, r2, r3
   34334:	445a      	add	r2, fp
   34336:	4293      	cmp	r3, r2
   34338:	d903      	bls.n	34342 <__aeabi_dmul+0x2c6>
   3433a:	2380      	movs	r3, #128	; 0x80
   3433c:	025b      	lsls	r3, r3, #9
   3433e:	469b      	mov	fp, r3
   34340:	44d9      	add	r9, fp
   34342:	4651      	mov	r1, sl
   34344:	0409      	lsls	r1, r1, #16
   34346:	0c09      	lsrs	r1, r1, #16
   34348:	468a      	mov	sl, r1
   3434a:	4641      	mov	r1, r8
   3434c:	4361      	muls	r1, r4
   3434e:	437c      	muls	r4, r7
   34350:	0c13      	lsrs	r3, r2, #16
   34352:	0412      	lsls	r2, r2, #16
   34354:	444b      	add	r3, r9
   34356:	4452      	add	r2, sl
   34358:	46a1      	mov	r9, r4
   3435a:	468a      	mov	sl, r1
   3435c:	003c      	movs	r4, r7
   3435e:	4641      	mov	r1, r8
   34360:	436c      	muls	r4, r5
   34362:	434d      	muls	r5, r1
   34364:	4651      	mov	r1, sl
   34366:	444d      	add	r5, r9
   34368:	0c0f      	lsrs	r7, r1, #16
   3436a:	197d      	adds	r5, r7, r5
   3436c:	45a9      	cmp	r9, r5
   3436e:	d903      	bls.n	34378 <__aeabi_dmul+0x2fc>
   34370:	2180      	movs	r1, #128	; 0x80
   34372:	0249      	lsls	r1, r1, #9
   34374:	4688      	mov	r8, r1
   34376:	4444      	add	r4, r8
   34378:	9f04      	ldr	r7, [sp, #16]
   3437a:	9903      	ldr	r1, [sp, #12]
   3437c:	46b8      	mov	r8, r7
   3437e:	4441      	add	r1, r8
   34380:	468b      	mov	fp, r1
   34382:	4583      	cmp	fp, r0
   34384:	4180      	sbcs	r0, r0
   34386:	4241      	negs	r1, r0
   34388:	4688      	mov	r8, r1
   3438a:	4651      	mov	r1, sl
   3438c:	0408      	lsls	r0, r1, #16
   3438e:	042f      	lsls	r7, r5, #16
   34390:	0c00      	lsrs	r0, r0, #16
   34392:	183f      	adds	r7, r7, r0
   34394:	4658      	mov	r0, fp
   34396:	9902      	ldr	r1, [sp, #8]
   34398:	1810      	adds	r0, r2, r0
   3439a:	4689      	mov	r9, r1
   3439c:	4290      	cmp	r0, r2
   3439e:	4192      	sbcs	r2, r2
   343a0:	444f      	add	r7, r9
   343a2:	46ba      	mov	sl, r7
   343a4:	4252      	negs	r2, r2
   343a6:	4699      	mov	r9, r3
   343a8:	4693      	mov	fp, r2
   343aa:	44c2      	add	sl, r8
   343ac:	44d1      	add	r9, sl
   343ae:	44cb      	add	fp, r9
   343b0:	428f      	cmp	r7, r1
   343b2:	41bf      	sbcs	r7, r7
   343b4:	45c2      	cmp	sl, r8
   343b6:	4189      	sbcs	r1, r1
   343b8:	4599      	cmp	r9, r3
   343ba:	419b      	sbcs	r3, r3
   343bc:	4593      	cmp	fp, r2
   343be:	4192      	sbcs	r2, r2
   343c0:	427f      	negs	r7, r7
   343c2:	4249      	negs	r1, r1
   343c4:	0c2d      	lsrs	r5, r5, #16
   343c6:	4252      	negs	r2, r2
   343c8:	430f      	orrs	r7, r1
   343ca:	425b      	negs	r3, r3
   343cc:	4313      	orrs	r3, r2
   343ce:	197f      	adds	r7, r7, r5
   343d0:	18ff      	adds	r7, r7, r3
   343d2:	465b      	mov	r3, fp
   343d4:	193c      	adds	r4, r7, r4
   343d6:	0ddb      	lsrs	r3, r3, #23
   343d8:	9a05      	ldr	r2, [sp, #20]
   343da:	0264      	lsls	r4, r4, #9
   343dc:	431c      	orrs	r4, r3
   343de:	0243      	lsls	r3, r0, #9
   343e0:	4313      	orrs	r3, r2
   343e2:	1e5d      	subs	r5, r3, #1
   343e4:	41ab      	sbcs	r3, r5
   343e6:	465a      	mov	r2, fp
   343e8:	0dc0      	lsrs	r0, r0, #23
   343ea:	4303      	orrs	r3, r0
   343ec:	0252      	lsls	r2, r2, #9
   343ee:	4313      	orrs	r3, r2
   343f0:	01e2      	lsls	r2, r4, #7
   343f2:	d556      	bpl.n	344a2 <__aeabi_dmul+0x426>
   343f4:	2001      	movs	r0, #1
   343f6:	085a      	lsrs	r2, r3, #1
   343f8:	4003      	ands	r3, r0
   343fa:	4313      	orrs	r3, r2
   343fc:	07e2      	lsls	r2, r4, #31
   343fe:	4313      	orrs	r3, r2
   34400:	0864      	lsrs	r4, r4, #1
   34402:	485a      	ldr	r0, [pc, #360]	; (3456c <__aeabi_dmul+0x4f0>)
   34404:	4460      	add	r0, ip
   34406:	2800      	cmp	r0, #0
   34408:	dd4d      	ble.n	344a6 <__aeabi_dmul+0x42a>
   3440a:	075a      	lsls	r2, r3, #29
   3440c:	d009      	beq.n	34422 <__aeabi_dmul+0x3a6>
   3440e:	220f      	movs	r2, #15
   34410:	401a      	ands	r2, r3
   34412:	2a04      	cmp	r2, #4
   34414:	d005      	beq.n	34422 <__aeabi_dmul+0x3a6>
   34416:	1d1a      	adds	r2, r3, #4
   34418:	429a      	cmp	r2, r3
   3441a:	419b      	sbcs	r3, r3
   3441c:	425b      	negs	r3, r3
   3441e:	18e4      	adds	r4, r4, r3
   34420:	0013      	movs	r3, r2
   34422:	01e2      	lsls	r2, r4, #7
   34424:	d504      	bpl.n	34430 <__aeabi_dmul+0x3b4>
   34426:	2080      	movs	r0, #128	; 0x80
   34428:	4a51      	ldr	r2, [pc, #324]	; (34570 <__aeabi_dmul+0x4f4>)
   3442a:	00c0      	lsls	r0, r0, #3
   3442c:	4014      	ands	r4, r2
   3442e:	4460      	add	r0, ip
   34430:	4a50      	ldr	r2, [pc, #320]	; (34574 <__aeabi_dmul+0x4f8>)
   34432:	4290      	cmp	r0, r2
   34434:	dd00      	ble.n	34438 <__aeabi_dmul+0x3bc>
   34436:	e6e3      	b.n	34200 <__aeabi_dmul+0x184>
   34438:	2501      	movs	r5, #1
   3443a:	08db      	lsrs	r3, r3, #3
   3443c:	0762      	lsls	r2, r4, #29
   3443e:	431a      	orrs	r2, r3
   34440:	0264      	lsls	r4, r4, #9
   34442:	9b01      	ldr	r3, [sp, #4]
   34444:	4691      	mov	r9, r2
   34446:	0b22      	lsrs	r2, r4, #12
   34448:	0544      	lsls	r4, r0, #21
   3444a:	0d64      	lsrs	r4, r4, #21
   3444c:	401d      	ands	r5, r3
   3444e:	e67c      	b.n	3414a <__aeabi_dmul+0xce>
   34450:	2280      	movs	r2, #128	; 0x80
   34452:	4659      	mov	r1, fp
   34454:	0312      	lsls	r2, r2, #12
   34456:	4211      	tst	r1, r2
   34458:	d008      	beq.n	3446c <__aeabi_dmul+0x3f0>
   3445a:	4214      	tst	r4, r2
   3445c:	d106      	bne.n	3446c <__aeabi_dmul+0x3f0>
   3445e:	4322      	orrs	r2, r4
   34460:	0312      	lsls	r2, r2, #12
   34462:	0b12      	lsrs	r2, r2, #12
   34464:	4645      	mov	r5, r8
   34466:	4699      	mov	r9, r3
   34468:	4c43      	ldr	r4, [pc, #268]	; (34578 <__aeabi_dmul+0x4fc>)
   3446a:	e66e      	b.n	3414a <__aeabi_dmul+0xce>
   3446c:	465b      	mov	r3, fp
   3446e:	431a      	orrs	r2, r3
   34470:	0312      	lsls	r2, r2, #12
   34472:	0b12      	lsrs	r2, r2, #12
   34474:	4c40      	ldr	r4, [pc, #256]	; (34578 <__aeabi_dmul+0x4fc>)
   34476:	e668      	b.n	3414a <__aeabi_dmul+0xce>
   34478:	0003      	movs	r3, r0
   3447a:	4654      	mov	r4, sl
   3447c:	3b28      	subs	r3, #40	; 0x28
   3447e:	409c      	lsls	r4, r3
   34480:	2300      	movs	r3, #0
   34482:	e6b9      	b.n	341f8 <__aeabi_dmul+0x17c>
   34484:	f000 fc4e 	bl	34d24 <__clzsi2>
   34488:	3020      	adds	r0, #32
   3448a:	e6a6      	b.n	341da <__aeabi_dmul+0x15e>
   3448c:	0003      	movs	r3, r0
   3448e:	3b28      	subs	r3, #40	; 0x28
   34490:	409f      	lsls	r7, r3
   34492:	2300      	movs	r3, #0
   34494:	46bb      	mov	fp, r7
   34496:	4699      	mov	r9, r3
   34498:	e68a      	b.n	341b0 <__aeabi_dmul+0x134>
   3449a:	f000 fc43 	bl	34d24 <__clzsi2>
   3449e:	3020      	adds	r0, #32
   344a0:	e674      	b.n	3418c <__aeabi_dmul+0x110>
   344a2:	46b4      	mov	ip, r6
   344a4:	e7ad      	b.n	34402 <__aeabi_dmul+0x386>
   344a6:	2501      	movs	r5, #1
   344a8:	1a2a      	subs	r2, r5, r0
   344aa:	2a38      	cmp	r2, #56	; 0x38
   344ac:	dd06      	ble.n	344bc <__aeabi_dmul+0x440>
   344ae:	9b01      	ldr	r3, [sp, #4]
   344b0:	2400      	movs	r4, #0
   344b2:	401d      	ands	r5, r3
   344b4:	2300      	movs	r3, #0
   344b6:	2200      	movs	r2, #0
   344b8:	4699      	mov	r9, r3
   344ba:	e646      	b.n	3414a <__aeabi_dmul+0xce>
   344bc:	2a1f      	cmp	r2, #31
   344be:	dc21      	bgt.n	34504 <__aeabi_dmul+0x488>
   344c0:	2520      	movs	r5, #32
   344c2:	0020      	movs	r0, r4
   344c4:	1aad      	subs	r5, r5, r2
   344c6:	001e      	movs	r6, r3
   344c8:	40ab      	lsls	r3, r5
   344ca:	40a8      	lsls	r0, r5
   344cc:	40d6      	lsrs	r6, r2
   344ce:	1e5d      	subs	r5, r3, #1
   344d0:	41ab      	sbcs	r3, r5
   344d2:	4330      	orrs	r0, r6
   344d4:	4318      	orrs	r0, r3
   344d6:	40d4      	lsrs	r4, r2
   344d8:	0743      	lsls	r3, r0, #29
   344da:	d009      	beq.n	344f0 <__aeabi_dmul+0x474>
   344dc:	230f      	movs	r3, #15
   344de:	4003      	ands	r3, r0
   344e0:	2b04      	cmp	r3, #4
   344e2:	d005      	beq.n	344f0 <__aeabi_dmul+0x474>
   344e4:	0003      	movs	r3, r0
   344e6:	1d18      	adds	r0, r3, #4
   344e8:	4298      	cmp	r0, r3
   344ea:	419b      	sbcs	r3, r3
   344ec:	425b      	negs	r3, r3
   344ee:	18e4      	adds	r4, r4, r3
   344f0:	0223      	lsls	r3, r4, #8
   344f2:	d521      	bpl.n	34538 <__aeabi_dmul+0x4bc>
   344f4:	2501      	movs	r5, #1
   344f6:	9b01      	ldr	r3, [sp, #4]
   344f8:	2401      	movs	r4, #1
   344fa:	401d      	ands	r5, r3
   344fc:	2300      	movs	r3, #0
   344fe:	2200      	movs	r2, #0
   34500:	4699      	mov	r9, r3
   34502:	e622      	b.n	3414a <__aeabi_dmul+0xce>
   34504:	251f      	movs	r5, #31
   34506:	0021      	movs	r1, r4
   34508:	426d      	negs	r5, r5
   3450a:	1a28      	subs	r0, r5, r0
   3450c:	40c1      	lsrs	r1, r0
   3450e:	0008      	movs	r0, r1
   34510:	2a20      	cmp	r2, #32
   34512:	d01d      	beq.n	34550 <__aeabi_dmul+0x4d4>
   34514:	355f      	adds	r5, #95	; 0x5f
   34516:	1aaa      	subs	r2, r5, r2
   34518:	4094      	lsls	r4, r2
   3451a:	4323      	orrs	r3, r4
   3451c:	1e5c      	subs	r4, r3, #1
   3451e:	41a3      	sbcs	r3, r4
   34520:	2507      	movs	r5, #7
   34522:	4303      	orrs	r3, r0
   34524:	401d      	ands	r5, r3
   34526:	2200      	movs	r2, #0
   34528:	2d00      	cmp	r5, #0
   3452a:	d009      	beq.n	34540 <__aeabi_dmul+0x4c4>
   3452c:	220f      	movs	r2, #15
   3452e:	2400      	movs	r4, #0
   34530:	401a      	ands	r2, r3
   34532:	0018      	movs	r0, r3
   34534:	2a04      	cmp	r2, #4
   34536:	d1d6      	bne.n	344e6 <__aeabi_dmul+0x46a>
   34538:	0003      	movs	r3, r0
   3453a:	0765      	lsls	r5, r4, #29
   3453c:	0264      	lsls	r4, r4, #9
   3453e:	0b22      	lsrs	r2, r4, #12
   34540:	08db      	lsrs	r3, r3, #3
   34542:	432b      	orrs	r3, r5
   34544:	2501      	movs	r5, #1
   34546:	4699      	mov	r9, r3
   34548:	9b01      	ldr	r3, [sp, #4]
   3454a:	2400      	movs	r4, #0
   3454c:	401d      	ands	r5, r3
   3454e:	e5fc      	b.n	3414a <__aeabi_dmul+0xce>
   34550:	2400      	movs	r4, #0
   34552:	e7e2      	b.n	3451a <__aeabi_dmul+0x49e>
   34554:	2280      	movs	r2, #128	; 0x80
   34556:	2501      	movs	r5, #1
   34558:	0312      	lsls	r2, r2, #12
   3455a:	4322      	orrs	r2, r4
   3455c:	9901      	ldr	r1, [sp, #4]
   3455e:	0312      	lsls	r2, r2, #12
   34560:	0b12      	lsrs	r2, r2, #12
   34562:	400d      	ands	r5, r1
   34564:	4699      	mov	r9, r3
   34566:	4c04      	ldr	r4, [pc, #16]	; (34578 <__aeabi_dmul+0x4fc>)
   34568:	e5ef      	b.n	3414a <__aeabi_dmul+0xce>
   3456a:	46c0      	nop			; (mov r8, r8)
   3456c:	000003ff 	.word	0x000003ff
   34570:	feffffff 	.word	0xfeffffff
   34574:	000007fe 	.word	0x000007fe
   34578:	000007ff 	.word	0x000007ff

0003457c <__aeabi_dsub>:
   3457c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3457e:	4646      	mov	r6, r8
   34580:	46d6      	mov	lr, sl
   34582:	464f      	mov	r7, r9
   34584:	030c      	lsls	r4, r1, #12
   34586:	b5c0      	push	{r6, r7, lr}
   34588:	0fcd      	lsrs	r5, r1, #31
   3458a:	004e      	lsls	r6, r1, #1
   3458c:	0a61      	lsrs	r1, r4, #9
   3458e:	0f44      	lsrs	r4, r0, #29
   34590:	430c      	orrs	r4, r1
   34592:	00c1      	lsls	r1, r0, #3
   34594:	0058      	lsls	r0, r3, #1
   34596:	0d40      	lsrs	r0, r0, #21
   34598:	4684      	mov	ip, r0
   3459a:	468a      	mov	sl, r1
   3459c:	000f      	movs	r7, r1
   3459e:	0319      	lsls	r1, r3, #12
   345a0:	0f50      	lsrs	r0, r2, #29
   345a2:	0a49      	lsrs	r1, r1, #9
   345a4:	4301      	orrs	r1, r0
   345a6:	48c6      	ldr	r0, [pc, #792]	; (348c0 <__aeabi_dsub+0x344>)
   345a8:	0d76      	lsrs	r6, r6, #21
   345aa:	46a8      	mov	r8, r5
   345ac:	0fdb      	lsrs	r3, r3, #31
   345ae:	00d2      	lsls	r2, r2, #3
   345b0:	4584      	cmp	ip, r0
   345b2:	d100      	bne.n	345b6 <__aeabi_dsub+0x3a>
   345b4:	e0d8      	b.n	34768 <__aeabi_dsub+0x1ec>
   345b6:	2001      	movs	r0, #1
   345b8:	4043      	eors	r3, r0
   345ba:	42ab      	cmp	r3, r5
   345bc:	d100      	bne.n	345c0 <__aeabi_dsub+0x44>
   345be:	e0a6      	b.n	3470e <__aeabi_dsub+0x192>
   345c0:	4660      	mov	r0, ip
   345c2:	1a35      	subs	r5, r6, r0
   345c4:	2d00      	cmp	r5, #0
   345c6:	dc00      	bgt.n	345ca <__aeabi_dsub+0x4e>
   345c8:	e105      	b.n	347d6 <__aeabi_dsub+0x25a>
   345ca:	2800      	cmp	r0, #0
   345cc:	d110      	bne.n	345f0 <__aeabi_dsub+0x74>
   345ce:	000b      	movs	r3, r1
   345d0:	4313      	orrs	r3, r2
   345d2:	d100      	bne.n	345d6 <__aeabi_dsub+0x5a>
   345d4:	e0d7      	b.n	34786 <__aeabi_dsub+0x20a>
   345d6:	1e6b      	subs	r3, r5, #1
   345d8:	2b00      	cmp	r3, #0
   345da:	d000      	beq.n	345de <__aeabi_dsub+0x62>
   345dc:	e14b      	b.n	34876 <__aeabi_dsub+0x2fa>
   345de:	4653      	mov	r3, sl
   345e0:	1a9f      	subs	r7, r3, r2
   345e2:	45ba      	cmp	sl, r7
   345e4:	4180      	sbcs	r0, r0
   345e6:	1a64      	subs	r4, r4, r1
   345e8:	4240      	negs	r0, r0
   345ea:	1a24      	subs	r4, r4, r0
   345ec:	2601      	movs	r6, #1
   345ee:	e01e      	b.n	3462e <__aeabi_dsub+0xb2>
   345f0:	4bb3      	ldr	r3, [pc, #716]	; (348c0 <__aeabi_dsub+0x344>)
   345f2:	429e      	cmp	r6, r3
   345f4:	d048      	beq.n	34688 <__aeabi_dsub+0x10c>
   345f6:	2380      	movs	r3, #128	; 0x80
   345f8:	041b      	lsls	r3, r3, #16
   345fa:	4319      	orrs	r1, r3
   345fc:	2d38      	cmp	r5, #56	; 0x38
   345fe:	dd00      	ble.n	34602 <__aeabi_dsub+0x86>
   34600:	e119      	b.n	34836 <__aeabi_dsub+0x2ba>
   34602:	2d1f      	cmp	r5, #31
   34604:	dd00      	ble.n	34608 <__aeabi_dsub+0x8c>
   34606:	e14c      	b.n	348a2 <__aeabi_dsub+0x326>
   34608:	2320      	movs	r3, #32
   3460a:	000f      	movs	r7, r1
   3460c:	1b5b      	subs	r3, r3, r5
   3460e:	0010      	movs	r0, r2
   34610:	409a      	lsls	r2, r3
   34612:	409f      	lsls	r7, r3
   34614:	40e8      	lsrs	r0, r5
   34616:	1e53      	subs	r3, r2, #1
   34618:	419a      	sbcs	r2, r3
   3461a:	40e9      	lsrs	r1, r5
   3461c:	4307      	orrs	r7, r0
   3461e:	4317      	orrs	r7, r2
   34620:	4653      	mov	r3, sl
   34622:	1bdf      	subs	r7, r3, r7
   34624:	1a61      	subs	r1, r4, r1
   34626:	45ba      	cmp	sl, r7
   34628:	41a4      	sbcs	r4, r4
   3462a:	4264      	negs	r4, r4
   3462c:	1b0c      	subs	r4, r1, r4
   3462e:	0223      	lsls	r3, r4, #8
   34630:	d400      	bmi.n	34634 <__aeabi_dsub+0xb8>
   34632:	e0c5      	b.n	347c0 <__aeabi_dsub+0x244>
   34634:	0264      	lsls	r4, r4, #9
   34636:	0a65      	lsrs	r5, r4, #9
   34638:	2d00      	cmp	r5, #0
   3463a:	d100      	bne.n	3463e <__aeabi_dsub+0xc2>
   3463c:	e0f6      	b.n	3482c <__aeabi_dsub+0x2b0>
   3463e:	0028      	movs	r0, r5
   34640:	f000 fb70 	bl	34d24 <__clzsi2>
   34644:	0003      	movs	r3, r0
   34646:	3b08      	subs	r3, #8
   34648:	2b1f      	cmp	r3, #31
   3464a:	dd00      	ble.n	3464e <__aeabi_dsub+0xd2>
   3464c:	e0e9      	b.n	34822 <__aeabi_dsub+0x2a6>
   3464e:	2220      	movs	r2, #32
   34650:	003c      	movs	r4, r7
   34652:	1ad2      	subs	r2, r2, r3
   34654:	409d      	lsls	r5, r3
   34656:	40d4      	lsrs	r4, r2
   34658:	409f      	lsls	r7, r3
   3465a:	4325      	orrs	r5, r4
   3465c:	429e      	cmp	r6, r3
   3465e:	dd00      	ble.n	34662 <__aeabi_dsub+0xe6>
   34660:	e0db      	b.n	3481a <__aeabi_dsub+0x29e>
   34662:	1b9e      	subs	r6, r3, r6
   34664:	1c73      	adds	r3, r6, #1
   34666:	2b1f      	cmp	r3, #31
   34668:	dd00      	ble.n	3466c <__aeabi_dsub+0xf0>
   3466a:	e10a      	b.n	34882 <__aeabi_dsub+0x306>
   3466c:	2220      	movs	r2, #32
   3466e:	0038      	movs	r0, r7
   34670:	1ad2      	subs	r2, r2, r3
   34672:	0029      	movs	r1, r5
   34674:	4097      	lsls	r7, r2
   34676:	002c      	movs	r4, r5
   34678:	4091      	lsls	r1, r2
   3467a:	40d8      	lsrs	r0, r3
   3467c:	1e7a      	subs	r2, r7, #1
   3467e:	4197      	sbcs	r7, r2
   34680:	40dc      	lsrs	r4, r3
   34682:	2600      	movs	r6, #0
   34684:	4301      	orrs	r1, r0
   34686:	430f      	orrs	r7, r1
   34688:	077b      	lsls	r3, r7, #29
   3468a:	d009      	beq.n	346a0 <__aeabi_dsub+0x124>
   3468c:	230f      	movs	r3, #15
   3468e:	403b      	ands	r3, r7
   34690:	2b04      	cmp	r3, #4
   34692:	d005      	beq.n	346a0 <__aeabi_dsub+0x124>
   34694:	1d3b      	adds	r3, r7, #4
   34696:	42bb      	cmp	r3, r7
   34698:	41bf      	sbcs	r7, r7
   3469a:	427f      	negs	r7, r7
   3469c:	19e4      	adds	r4, r4, r7
   3469e:	001f      	movs	r7, r3
   346a0:	0223      	lsls	r3, r4, #8
   346a2:	d525      	bpl.n	346f0 <__aeabi_dsub+0x174>
   346a4:	4b86      	ldr	r3, [pc, #536]	; (348c0 <__aeabi_dsub+0x344>)
   346a6:	3601      	adds	r6, #1
   346a8:	429e      	cmp	r6, r3
   346aa:	d100      	bne.n	346ae <__aeabi_dsub+0x132>
   346ac:	e0af      	b.n	3480e <__aeabi_dsub+0x292>
   346ae:	4b85      	ldr	r3, [pc, #532]	; (348c4 <__aeabi_dsub+0x348>)
   346b0:	2501      	movs	r5, #1
   346b2:	401c      	ands	r4, r3
   346b4:	4643      	mov	r3, r8
   346b6:	0762      	lsls	r2, r4, #29
   346b8:	08ff      	lsrs	r7, r7, #3
   346ba:	0264      	lsls	r4, r4, #9
   346bc:	0576      	lsls	r6, r6, #21
   346be:	4317      	orrs	r7, r2
   346c0:	0b24      	lsrs	r4, r4, #12
   346c2:	0d76      	lsrs	r6, r6, #21
   346c4:	401d      	ands	r5, r3
   346c6:	2100      	movs	r1, #0
   346c8:	0324      	lsls	r4, r4, #12
   346ca:	0b23      	lsrs	r3, r4, #12
   346cc:	0d0c      	lsrs	r4, r1, #20
   346ce:	4a7e      	ldr	r2, [pc, #504]	; (348c8 <__aeabi_dsub+0x34c>)
   346d0:	0524      	lsls	r4, r4, #20
   346d2:	431c      	orrs	r4, r3
   346d4:	4014      	ands	r4, r2
   346d6:	0533      	lsls	r3, r6, #20
   346d8:	4323      	orrs	r3, r4
   346da:	005b      	lsls	r3, r3, #1
   346dc:	07ed      	lsls	r5, r5, #31
   346de:	085b      	lsrs	r3, r3, #1
   346e0:	432b      	orrs	r3, r5
   346e2:	0038      	movs	r0, r7
   346e4:	0019      	movs	r1, r3
   346e6:	bc1c      	pop	{r2, r3, r4}
   346e8:	4690      	mov	r8, r2
   346ea:	4699      	mov	r9, r3
   346ec:	46a2      	mov	sl, r4
   346ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   346f0:	2501      	movs	r5, #1
   346f2:	4643      	mov	r3, r8
   346f4:	0762      	lsls	r2, r4, #29
   346f6:	08ff      	lsrs	r7, r7, #3
   346f8:	4317      	orrs	r7, r2
   346fa:	08e4      	lsrs	r4, r4, #3
   346fc:	401d      	ands	r5, r3
   346fe:	4b70      	ldr	r3, [pc, #448]	; (348c0 <__aeabi_dsub+0x344>)
   34700:	429e      	cmp	r6, r3
   34702:	d036      	beq.n	34772 <__aeabi_dsub+0x1f6>
   34704:	0324      	lsls	r4, r4, #12
   34706:	0576      	lsls	r6, r6, #21
   34708:	0b24      	lsrs	r4, r4, #12
   3470a:	0d76      	lsrs	r6, r6, #21
   3470c:	e7db      	b.n	346c6 <__aeabi_dsub+0x14a>
   3470e:	4663      	mov	r3, ip
   34710:	1af3      	subs	r3, r6, r3
   34712:	2b00      	cmp	r3, #0
   34714:	dc00      	bgt.n	34718 <__aeabi_dsub+0x19c>
   34716:	e094      	b.n	34842 <__aeabi_dsub+0x2c6>
   34718:	4660      	mov	r0, ip
   3471a:	2800      	cmp	r0, #0
   3471c:	d035      	beq.n	3478a <__aeabi_dsub+0x20e>
   3471e:	4868      	ldr	r0, [pc, #416]	; (348c0 <__aeabi_dsub+0x344>)
   34720:	4286      	cmp	r6, r0
   34722:	d0b1      	beq.n	34688 <__aeabi_dsub+0x10c>
   34724:	2780      	movs	r7, #128	; 0x80
   34726:	043f      	lsls	r7, r7, #16
   34728:	4339      	orrs	r1, r7
   3472a:	2b38      	cmp	r3, #56	; 0x38
   3472c:	dc00      	bgt.n	34730 <__aeabi_dsub+0x1b4>
   3472e:	e0fd      	b.n	3492c <__aeabi_dsub+0x3b0>
   34730:	430a      	orrs	r2, r1
   34732:	0017      	movs	r7, r2
   34734:	2100      	movs	r1, #0
   34736:	1e7a      	subs	r2, r7, #1
   34738:	4197      	sbcs	r7, r2
   3473a:	4457      	add	r7, sl
   3473c:	4557      	cmp	r7, sl
   3473e:	4180      	sbcs	r0, r0
   34740:	1909      	adds	r1, r1, r4
   34742:	4244      	negs	r4, r0
   34744:	190c      	adds	r4, r1, r4
   34746:	0223      	lsls	r3, r4, #8
   34748:	d53a      	bpl.n	347c0 <__aeabi_dsub+0x244>
   3474a:	4b5d      	ldr	r3, [pc, #372]	; (348c0 <__aeabi_dsub+0x344>)
   3474c:	3601      	adds	r6, #1
   3474e:	429e      	cmp	r6, r3
   34750:	d100      	bne.n	34754 <__aeabi_dsub+0x1d8>
   34752:	e14b      	b.n	349ec <__aeabi_dsub+0x470>
   34754:	2201      	movs	r2, #1
   34756:	4b5b      	ldr	r3, [pc, #364]	; (348c4 <__aeabi_dsub+0x348>)
   34758:	401c      	ands	r4, r3
   3475a:	087b      	lsrs	r3, r7, #1
   3475c:	4017      	ands	r7, r2
   3475e:	431f      	orrs	r7, r3
   34760:	07e2      	lsls	r2, r4, #31
   34762:	4317      	orrs	r7, r2
   34764:	0864      	lsrs	r4, r4, #1
   34766:	e78f      	b.n	34688 <__aeabi_dsub+0x10c>
   34768:	0008      	movs	r0, r1
   3476a:	4310      	orrs	r0, r2
   3476c:	d000      	beq.n	34770 <__aeabi_dsub+0x1f4>
   3476e:	e724      	b.n	345ba <__aeabi_dsub+0x3e>
   34770:	e721      	b.n	345b6 <__aeabi_dsub+0x3a>
   34772:	0023      	movs	r3, r4
   34774:	433b      	orrs	r3, r7
   34776:	d100      	bne.n	3477a <__aeabi_dsub+0x1fe>
   34778:	e1b9      	b.n	34aee <__aeabi_dsub+0x572>
   3477a:	2280      	movs	r2, #128	; 0x80
   3477c:	0312      	lsls	r2, r2, #12
   3477e:	4314      	orrs	r4, r2
   34780:	0324      	lsls	r4, r4, #12
   34782:	0b24      	lsrs	r4, r4, #12
   34784:	e79f      	b.n	346c6 <__aeabi_dsub+0x14a>
   34786:	002e      	movs	r6, r5
   34788:	e77e      	b.n	34688 <__aeabi_dsub+0x10c>
   3478a:	0008      	movs	r0, r1
   3478c:	4310      	orrs	r0, r2
   3478e:	d100      	bne.n	34792 <__aeabi_dsub+0x216>
   34790:	e0ca      	b.n	34928 <__aeabi_dsub+0x3ac>
   34792:	1e58      	subs	r0, r3, #1
   34794:	4684      	mov	ip, r0
   34796:	2800      	cmp	r0, #0
   34798:	d000      	beq.n	3479c <__aeabi_dsub+0x220>
   3479a:	e0e7      	b.n	3496c <__aeabi_dsub+0x3f0>
   3479c:	4452      	add	r2, sl
   3479e:	4552      	cmp	r2, sl
   347a0:	4180      	sbcs	r0, r0
   347a2:	1864      	adds	r4, r4, r1
   347a4:	4240      	negs	r0, r0
   347a6:	1824      	adds	r4, r4, r0
   347a8:	0017      	movs	r7, r2
   347aa:	2601      	movs	r6, #1
   347ac:	0223      	lsls	r3, r4, #8
   347ae:	d507      	bpl.n	347c0 <__aeabi_dsub+0x244>
   347b0:	2602      	movs	r6, #2
   347b2:	e7cf      	b.n	34754 <__aeabi_dsub+0x1d8>
   347b4:	4664      	mov	r4, ip
   347b6:	432c      	orrs	r4, r5
   347b8:	d100      	bne.n	347bc <__aeabi_dsub+0x240>
   347ba:	e1b3      	b.n	34b24 <__aeabi_dsub+0x5a8>
   347bc:	002c      	movs	r4, r5
   347be:	4667      	mov	r7, ip
   347c0:	077b      	lsls	r3, r7, #29
   347c2:	d000      	beq.n	347c6 <__aeabi_dsub+0x24a>
   347c4:	e762      	b.n	3468c <__aeabi_dsub+0x110>
   347c6:	0763      	lsls	r3, r4, #29
   347c8:	08ff      	lsrs	r7, r7, #3
   347ca:	431f      	orrs	r7, r3
   347cc:	2501      	movs	r5, #1
   347ce:	4643      	mov	r3, r8
   347d0:	08e4      	lsrs	r4, r4, #3
   347d2:	401d      	ands	r5, r3
   347d4:	e793      	b.n	346fe <__aeabi_dsub+0x182>
   347d6:	2d00      	cmp	r5, #0
   347d8:	d178      	bne.n	348cc <__aeabi_dsub+0x350>
   347da:	1c75      	adds	r5, r6, #1
   347dc:	056d      	lsls	r5, r5, #21
   347de:	0d6d      	lsrs	r5, r5, #21
   347e0:	2d01      	cmp	r5, #1
   347e2:	dc00      	bgt.n	347e6 <__aeabi_dsub+0x26a>
   347e4:	e0f2      	b.n	349cc <__aeabi_dsub+0x450>
   347e6:	4650      	mov	r0, sl
   347e8:	1a80      	subs	r0, r0, r2
   347ea:	4582      	cmp	sl, r0
   347ec:	41bf      	sbcs	r7, r7
   347ee:	1a65      	subs	r5, r4, r1
   347f0:	427f      	negs	r7, r7
   347f2:	1bed      	subs	r5, r5, r7
   347f4:	4684      	mov	ip, r0
   347f6:	0228      	lsls	r0, r5, #8
   347f8:	d400      	bmi.n	347fc <__aeabi_dsub+0x280>
   347fa:	e08c      	b.n	34916 <__aeabi_dsub+0x39a>
   347fc:	4650      	mov	r0, sl
   347fe:	1a17      	subs	r7, r2, r0
   34800:	42ba      	cmp	r2, r7
   34802:	4192      	sbcs	r2, r2
   34804:	1b0c      	subs	r4, r1, r4
   34806:	4255      	negs	r5, r2
   34808:	1b65      	subs	r5, r4, r5
   3480a:	4698      	mov	r8, r3
   3480c:	e714      	b.n	34638 <__aeabi_dsub+0xbc>
   3480e:	2501      	movs	r5, #1
   34810:	4643      	mov	r3, r8
   34812:	2400      	movs	r4, #0
   34814:	401d      	ands	r5, r3
   34816:	2700      	movs	r7, #0
   34818:	e755      	b.n	346c6 <__aeabi_dsub+0x14a>
   3481a:	4c2a      	ldr	r4, [pc, #168]	; (348c4 <__aeabi_dsub+0x348>)
   3481c:	1af6      	subs	r6, r6, r3
   3481e:	402c      	ands	r4, r5
   34820:	e732      	b.n	34688 <__aeabi_dsub+0x10c>
   34822:	003d      	movs	r5, r7
   34824:	3828      	subs	r0, #40	; 0x28
   34826:	4085      	lsls	r5, r0
   34828:	2700      	movs	r7, #0
   3482a:	e717      	b.n	3465c <__aeabi_dsub+0xe0>
   3482c:	0038      	movs	r0, r7
   3482e:	f000 fa79 	bl	34d24 <__clzsi2>
   34832:	3020      	adds	r0, #32
   34834:	e706      	b.n	34644 <__aeabi_dsub+0xc8>
   34836:	430a      	orrs	r2, r1
   34838:	0017      	movs	r7, r2
   3483a:	2100      	movs	r1, #0
   3483c:	1e7a      	subs	r2, r7, #1
   3483e:	4197      	sbcs	r7, r2
   34840:	e6ee      	b.n	34620 <__aeabi_dsub+0xa4>
   34842:	2b00      	cmp	r3, #0
   34844:	d000      	beq.n	34848 <__aeabi_dsub+0x2cc>
   34846:	e0e5      	b.n	34a14 <__aeabi_dsub+0x498>
   34848:	1c73      	adds	r3, r6, #1
   3484a:	469c      	mov	ip, r3
   3484c:	055b      	lsls	r3, r3, #21
   3484e:	0d5b      	lsrs	r3, r3, #21
   34850:	2b01      	cmp	r3, #1
   34852:	dc00      	bgt.n	34856 <__aeabi_dsub+0x2da>
   34854:	e09f      	b.n	34996 <__aeabi_dsub+0x41a>
   34856:	4b1a      	ldr	r3, [pc, #104]	; (348c0 <__aeabi_dsub+0x344>)
   34858:	459c      	cmp	ip, r3
   3485a:	d100      	bne.n	3485e <__aeabi_dsub+0x2e2>
   3485c:	e0c5      	b.n	349ea <__aeabi_dsub+0x46e>
   3485e:	4452      	add	r2, sl
   34860:	4552      	cmp	r2, sl
   34862:	4180      	sbcs	r0, r0
   34864:	1864      	adds	r4, r4, r1
   34866:	4240      	negs	r0, r0
   34868:	1824      	adds	r4, r4, r0
   3486a:	07e7      	lsls	r7, r4, #31
   3486c:	0852      	lsrs	r2, r2, #1
   3486e:	4317      	orrs	r7, r2
   34870:	0864      	lsrs	r4, r4, #1
   34872:	4666      	mov	r6, ip
   34874:	e708      	b.n	34688 <__aeabi_dsub+0x10c>
   34876:	4812      	ldr	r0, [pc, #72]	; (348c0 <__aeabi_dsub+0x344>)
   34878:	4285      	cmp	r5, r0
   3487a:	d100      	bne.n	3487e <__aeabi_dsub+0x302>
   3487c:	e085      	b.n	3498a <__aeabi_dsub+0x40e>
   3487e:	001d      	movs	r5, r3
   34880:	e6bc      	b.n	345fc <__aeabi_dsub+0x80>
   34882:	0029      	movs	r1, r5
   34884:	3e1f      	subs	r6, #31
   34886:	40f1      	lsrs	r1, r6
   34888:	2b20      	cmp	r3, #32
   3488a:	d100      	bne.n	3488e <__aeabi_dsub+0x312>
   3488c:	e07f      	b.n	3498e <__aeabi_dsub+0x412>
   3488e:	2240      	movs	r2, #64	; 0x40
   34890:	1ad3      	subs	r3, r2, r3
   34892:	409d      	lsls	r5, r3
   34894:	432f      	orrs	r7, r5
   34896:	1e7d      	subs	r5, r7, #1
   34898:	41af      	sbcs	r7, r5
   3489a:	2400      	movs	r4, #0
   3489c:	430f      	orrs	r7, r1
   3489e:	2600      	movs	r6, #0
   348a0:	e78e      	b.n	347c0 <__aeabi_dsub+0x244>
   348a2:	002b      	movs	r3, r5
   348a4:	000f      	movs	r7, r1
   348a6:	3b20      	subs	r3, #32
   348a8:	40df      	lsrs	r7, r3
   348aa:	2d20      	cmp	r5, #32
   348ac:	d071      	beq.n	34992 <__aeabi_dsub+0x416>
   348ae:	2340      	movs	r3, #64	; 0x40
   348b0:	1b5d      	subs	r5, r3, r5
   348b2:	40a9      	lsls	r1, r5
   348b4:	430a      	orrs	r2, r1
   348b6:	1e51      	subs	r1, r2, #1
   348b8:	418a      	sbcs	r2, r1
   348ba:	2100      	movs	r1, #0
   348bc:	4317      	orrs	r7, r2
   348be:	e6af      	b.n	34620 <__aeabi_dsub+0xa4>
   348c0:	000007ff 	.word	0x000007ff
   348c4:	ff7fffff 	.word	0xff7fffff
   348c8:	800fffff 	.word	0x800fffff
   348cc:	2e00      	cmp	r6, #0
   348ce:	d03e      	beq.n	3494e <__aeabi_dsub+0x3d2>
   348d0:	4eb3      	ldr	r6, [pc, #716]	; (34ba0 <__aeabi_dsub+0x624>)
   348d2:	45b4      	cmp	ip, r6
   348d4:	d045      	beq.n	34962 <__aeabi_dsub+0x3e6>
   348d6:	2680      	movs	r6, #128	; 0x80
   348d8:	0436      	lsls	r6, r6, #16
   348da:	426d      	negs	r5, r5
   348dc:	4334      	orrs	r4, r6
   348de:	2d38      	cmp	r5, #56	; 0x38
   348e0:	dd00      	ble.n	348e4 <__aeabi_dsub+0x368>
   348e2:	e0a8      	b.n	34a36 <__aeabi_dsub+0x4ba>
   348e4:	2d1f      	cmp	r5, #31
   348e6:	dd00      	ble.n	348ea <__aeabi_dsub+0x36e>
   348e8:	e11f      	b.n	34b2a <__aeabi_dsub+0x5ae>
   348ea:	2620      	movs	r6, #32
   348ec:	0027      	movs	r7, r4
   348ee:	4650      	mov	r0, sl
   348f0:	1b76      	subs	r6, r6, r5
   348f2:	40b7      	lsls	r7, r6
   348f4:	40e8      	lsrs	r0, r5
   348f6:	4307      	orrs	r7, r0
   348f8:	4650      	mov	r0, sl
   348fa:	40b0      	lsls	r0, r6
   348fc:	1e46      	subs	r6, r0, #1
   348fe:	41b0      	sbcs	r0, r6
   34900:	40ec      	lsrs	r4, r5
   34902:	4338      	orrs	r0, r7
   34904:	1a17      	subs	r7, r2, r0
   34906:	42ba      	cmp	r2, r7
   34908:	4192      	sbcs	r2, r2
   3490a:	1b0c      	subs	r4, r1, r4
   3490c:	4252      	negs	r2, r2
   3490e:	1aa4      	subs	r4, r4, r2
   34910:	4666      	mov	r6, ip
   34912:	4698      	mov	r8, r3
   34914:	e68b      	b.n	3462e <__aeabi_dsub+0xb2>
   34916:	4664      	mov	r4, ip
   34918:	4667      	mov	r7, ip
   3491a:	432c      	orrs	r4, r5
   3491c:	d000      	beq.n	34920 <__aeabi_dsub+0x3a4>
   3491e:	e68b      	b.n	34638 <__aeabi_dsub+0xbc>
   34920:	2500      	movs	r5, #0
   34922:	2600      	movs	r6, #0
   34924:	2700      	movs	r7, #0
   34926:	e6ea      	b.n	346fe <__aeabi_dsub+0x182>
   34928:	001e      	movs	r6, r3
   3492a:	e6ad      	b.n	34688 <__aeabi_dsub+0x10c>
   3492c:	2b1f      	cmp	r3, #31
   3492e:	dc60      	bgt.n	349f2 <__aeabi_dsub+0x476>
   34930:	2720      	movs	r7, #32
   34932:	1af8      	subs	r0, r7, r3
   34934:	000f      	movs	r7, r1
   34936:	4684      	mov	ip, r0
   34938:	4087      	lsls	r7, r0
   3493a:	0010      	movs	r0, r2
   3493c:	40d8      	lsrs	r0, r3
   3493e:	4307      	orrs	r7, r0
   34940:	4660      	mov	r0, ip
   34942:	4082      	lsls	r2, r0
   34944:	1e50      	subs	r0, r2, #1
   34946:	4182      	sbcs	r2, r0
   34948:	40d9      	lsrs	r1, r3
   3494a:	4317      	orrs	r7, r2
   3494c:	e6f5      	b.n	3473a <__aeabi_dsub+0x1be>
   3494e:	0026      	movs	r6, r4
   34950:	4650      	mov	r0, sl
   34952:	4306      	orrs	r6, r0
   34954:	d005      	beq.n	34962 <__aeabi_dsub+0x3e6>
   34956:	43ed      	mvns	r5, r5
   34958:	2d00      	cmp	r5, #0
   3495a:	d0d3      	beq.n	34904 <__aeabi_dsub+0x388>
   3495c:	4e90      	ldr	r6, [pc, #576]	; (34ba0 <__aeabi_dsub+0x624>)
   3495e:	45b4      	cmp	ip, r6
   34960:	d1bd      	bne.n	348de <__aeabi_dsub+0x362>
   34962:	000c      	movs	r4, r1
   34964:	0017      	movs	r7, r2
   34966:	4666      	mov	r6, ip
   34968:	4698      	mov	r8, r3
   3496a:	e68d      	b.n	34688 <__aeabi_dsub+0x10c>
   3496c:	488c      	ldr	r0, [pc, #560]	; (34ba0 <__aeabi_dsub+0x624>)
   3496e:	4283      	cmp	r3, r0
   34970:	d00b      	beq.n	3498a <__aeabi_dsub+0x40e>
   34972:	4663      	mov	r3, ip
   34974:	e6d9      	b.n	3472a <__aeabi_dsub+0x1ae>
   34976:	2d00      	cmp	r5, #0
   34978:	d000      	beq.n	3497c <__aeabi_dsub+0x400>
   3497a:	e096      	b.n	34aaa <__aeabi_dsub+0x52e>
   3497c:	0008      	movs	r0, r1
   3497e:	4310      	orrs	r0, r2
   34980:	d100      	bne.n	34984 <__aeabi_dsub+0x408>
   34982:	e0e2      	b.n	34b4a <__aeabi_dsub+0x5ce>
   34984:	000c      	movs	r4, r1
   34986:	0017      	movs	r7, r2
   34988:	4698      	mov	r8, r3
   3498a:	4e85      	ldr	r6, [pc, #532]	; (34ba0 <__aeabi_dsub+0x624>)
   3498c:	e67c      	b.n	34688 <__aeabi_dsub+0x10c>
   3498e:	2500      	movs	r5, #0
   34990:	e780      	b.n	34894 <__aeabi_dsub+0x318>
   34992:	2100      	movs	r1, #0
   34994:	e78e      	b.n	348b4 <__aeabi_dsub+0x338>
   34996:	0023      	movs	r3, r4
   34998:	4650      	mov	r0, sl
   3499a:	4303      	orrs	r3, r0
   3499c:	2e00      	cmp	r6, #0
   3499e:	d000      	beq.n	349a2 <__aeabi_dsub+0x426>
   349a0:	e0a8      	b.n	34af4 <__aeabi_dsub+0x578>
   349a2:	2b00      	cmp	r3, #0
   349a4:	d100      	bne.n	349a8 <__aeabi_dsub+0x42c>
   349a6:	e0de      	b.n	34b66 <__aeabi_dsub+0x5ea>
   349a8:	000b      	movs	r3, r1
   349aa:	4313      	orrs	r3, r2
   349ac:	d100      	bne.n	349b0 <__aeabi_dsub+0x434>
   349ae:	e66b      	b.n	34688 <__aeabi_dsub+0x10c>
   349b0:	4452      	add	r2, sl
   349b2:	4552      	cmp	r2, sl
   349b4:	4180      	sbcs	r0, r0
   349b6:	1864      	adds	r4, r4, r1
   349b8:	4240      	negs	r0, r0
   349ba:	1824      	adds	r4, r4, r0
   349bc:	0017      	movs	r7, r2
   349be:	0223      	lsls	r3, r4, #8
   349c0:	d400      	bmi.n	349c4 <__aeabi_dsub+0x448>
   349c2:	e6fd      	b.n	347c0 <__aeabi_dsub+0x244>
   349c4:	4b77      	ldr	r3, [pc, #476]	; (34ba4 <__aeabi_dsub+0x628>)
   349c6:	4666      	mov	r6, ip
   349c8:	401c      	ands	r4, r3
   349ca:	e65d      	b.n	34688 <__aeabi_dsub+0x10c>
   349cc:	0025      	movs	r5, r4
   349ce:	4650      	mov	r0, sl
   349d0:	4305      	orrs	r5, r0
   349d2:	2e00      	cmp	r6, #0
   349d4:	d1cf      	bne.n	34976 <__aeabi_dsub+0x3fa>
   349d6:	2d00      	cmp	r5, #0
   349d8:	d14f      	bne.n	34a7a <__aeabi_dsub+0x4fe>
   349da:	000c      	movs	r4, r1
   349dc:	4314      	orrs	r4, r2
   349de:	d100      	bne.n	349e2 <__aeabi_dsub+0x466>
   349e0:	e0a0      	b.n	34b24 <__aeabi_dsub+0x5a8>
   349e2:	000c      	movs	r4, r1
   349e4:	0017      	movs	r7, r2
   349e6:	4698      	mov	r8, r3
   349e8:	e64e      	b.n	34688 <__aeabi_dsub+0x10c>
   349ea:	4666      	mov	r6, ip
   349ec:	2400      	movs	r4, #0
   349ee:	2700      	movs	r7, #0
   349f0:	e685      	b.n	346fe <__aeabi_dsub+0x182>
   349f2:	001f      	movs	r7, r3
   349f4:	0008      	movs	r0, r1
   349f6:	3f20      	subs	r7, #32
   349f8:	40f8      	lsrs	r0, r7
   349fa:	0007      	movs	r7, r0
   349fc:	2b20      	cmp	r3, #32
   349fe:	d100      	bne.n	34a02 <__aeabi_dsub+0x486>
   34a00:	e08e      	b.n	34b20 <__aeabi_dsub+0x5a4>
   34a02:	2040      	movs	r0, #64	; 0x40
   34a04:	1ac3      	subs	r3, r0, r3
   34a06:	4099      	lsls	r1, r3
   34a08:	430a      	orrs	r2, r1
   34a0a:	1e51      	subs	r1, r2, #1
   34a0c:	418a      	sbcs	r2, r1
   34a0e:	2100      	movs	r1, #0
   34a10:	4317      	orrs	r7, r2
   34a12:	e692      	b.n	3473a <__aeabi_dsub+0x1be>
   34a14:	2e00      	cmp	r6, #0
   34a16:	d114      	bne.n	34a42 <__aeabi_dsub+0x4c6>
   34a18:	0026      	movs	r6, r4
   34a1a:	4650      	mov	r0, sl
   34a1c:	4306      	orrs	r6, r0
   34a1e:	d062      	beq.n	34ae6 <__aeabi_dsub+0x56a>
   34a20:	43db      	mvns	r3, r3
   34a22:	2b00      	cmp	r3, #0
   34a24:	d15c      	bne.n	34ae0 <__aeabi_dsub+0x564>
   34a26:	1887      	adds	r7, r0, r2
   34a28:	4297      	cmp	r7, r2
   34a2a:	4192      	sbcs	r2, r2
   34a2c:	1864      	adds	r4, r4, r1
   34a2e:	4252      	negs	r2, r2
   34a30:	18a4      	adds	r4, r4, r2
   34a32:	4666      	mov	r6, ip
   34a34:	e687      	b.n	34746 <__aeabi_dsub+0x1ca>
   34a36:	4650      	mov	r0, sl
   34a38:	4320      	orrs	r0, r4
   34a3a:	1e44      	subs	r4, r0, #1
   34a3c:	41a0      	sbcs	r0, r4
   34a3e:	2400      	movs	r4, #0
   34a40:	e760      	b.n	34904 <__aeabi_dsub+0x388>
   34a42:	4e57      	ldr	r6, [pc, #348]	; (34ba0 <__aeabi_dsub+0x624>)
   34a44:	45b4      	cmp	ip, r6
   34a46:	d04e      	beq.n	34ae6 <__aeabi_dsub+0x56a>
   34a48:	2680      	movs	r6, #128	; 0x80
   34a4a:	0436      	lsls	r6, r6, #16
   34a4c:	425b      	negs	r3, r3
   34a4e:	4334      	orrs	r4, r6
   34a50:	2b38      	cmp	r3, #56	; 0x38
   34a52:	dd00      	ble.n	34a56 <__aeabi_dsub+0x4da>
   34a54:	e07f      	b.n	34b56 <__aeabi_dsub+0x5da>
   34a56:	2b1f      	cmp	r3, #31
   34a58:	dd00      	ble.n	34a5c <__aeabi_dsub+0x4e0>
   34a5a:	e08b      	b.n	34b74 <__aeabi_dsub+0x5f8>
   34a5c:	2620      	movs	r6, #32
   34a5e:	0027      	movs	r7, r4
   34a60:	4650      	mov	r0, sl
   34a62:	1af6      	subs	r6, r6, r3
   34a64:	40b7      	lsls	r7, r6
   34a66:	40d8      	lsrs	r0, r3
   34a68:	4307      	orrs	r7, r0
   34a6a:	4650      	mov	r0, sl
   34a6c:	40b0      	lsls	r0, r6
   34a6e:	1e46      	subs	r6, r0, #1
   34a70:	41b0      	sbcs	r0, r6
   34a72:	4307      	orrs	r7, r0
   34a74:	40dc      	lsrs	r4, r3
   34a76:	18bf      	adds	r7, r7, r2
   34a78:	e7d6      	b.n	34a28 <__aeabi_dsub+0x4ac>
   34a7a:	000d      	movs	r5, r1
   34a7c:	4315      	orrs	r5, r2
   34a7e:	d100      	bne.n	34a82 <__aeabi_dsub+0x506>
   34a80:	e602      	b.n	34688 <__aeabi_dsub+0x10c>
   34a82:	4650      	mov	r0, sl
   34a84:	1a80      	subs	r0, r0, r2
   34a86:	4582      	cmp	sl, r0
   34a88:	41bf      	sbcs	r7, r7
   34a8a:	1a65      	subs	r5, r4, r1
   34a8c:	427f      	negs	r7, r7
   34a8e:	1bed      	subs	r5, r5, r7
   34a90:	4684      	mov	ip, r0
   34a92:	0228      	lsls	r0, r5, #8
   34a94:	d400      	bmi.n	34a98 <__aeabi_dsub+0x51c>
   34a96:	e68d      	b.n	347b4 <__aeabi_dsub+0x238>
   34a98:	4650      	mov	r0, sl
   34a9a:	1a17      	subs	r7, r2, r0
   34a9c:	42ba      	cmp	r2, r7
   34a9e:	4192      	sbcs	r2, r2
   34aa0:	1b0c      	subs	r4, r1, r4
   34aa2:	4252      	negs	r2, r2
   34aa4:	1aa4      	subs	r4, r4, r2
   34aa6:	4698      	mov	r8, r3
   34aa8:	e5ee      	b.n	34688 <__aeabi_dsub+0x10c>
   34aaa:	000d      	movs	r5, r1
   34aac:	4315      	orrs	r5, r2
   34aae:	d100      	bne.n	34ab2 <__aeabi_dsub+0x536>
   34ab0:	e76b      	b.n	3498a <__aeabi_dsub+0x40e>
   34ab2:	4650      	mov	r0, sl
   34ab4:	0767      	lsls	r7, r4, #29
   34ab6:	08c0      	lsrs	r0, r0, #3
   34ab8:	4307      	orrs	r7, r0
   34aba:	2080      	movs	r0, #128	; 0x80
   34abc:	08e4      	lsrs	r4, r4, #3
   34abe:	0300      	lsls	r0, r0, #12
   34ac0:	4204      	tst	r4, r0
   34ac2:	d007      	beq.n	34ad4 <__aeabi_dsub+0x558>
   34ac4:	08cd      	lsrs	r5, r1, #3
   34ac6:	4205      	tst	r5, r0
   34ac8:	d104      	bne.n	34ad4 <__aeabi_dsub+0x558>
   34aca:	002c      	movs	r4, r5
   34acc:	4698      	mov	r8, r3
   34ace:	08d7      	lsrs	r7, r2, #3
   34ad0:	0749      	lsls	r1, r1, #29
   34ad2:	430f      	orrs	r7, r1
   34ad4:	0f7b      	lsrs	r3, r7, #29
   34ad6:	00e4      	lsls	r4, r4, #3
   34ad8:	431c      	orrs	r4, r3
   34ada:	00ff      	lsls	r7, r7, #3
   34adc:	4e30      	ldr	r6, [pc, #192]	; (34ba0 <__aeabi_dsub+0x624>)
   34ade:	e5d3      	b.n	34688 <__aeabi_dsub+0x10c>
   34ae0:	4e2f      	ldr	r6, [pc, #188]	; (34ba0 <__aeabi_dsub+0x624>)
   34ae2:	45b4      	cmp	ip, r6
   34ae4:	d1b4      	bne.n	34a50 <__aeabi_dsub+0x4d4>
   34ae6:	000c      	movs	r4, r1
   34ae8:	0017      	movs	r7, r2
   34aea:	4666      	mov	r6, ip
   34aec:	e5cc      	b.n	34688 <__aeabi_dsub+0x10c>
   34aee:	2700      	movs	r7, #0
   34af0:	2400      	movs	r4, #0
   34af2:	e5e8      	b.n	346c6 <__aeabi_dsub+0x14a>
   34af4:	2b00      	cmp	r3, #0
   34af6:	d039      	beq.n	34b6c <__aeabi_dsub+0x5f0>
   34af8:	000b      	movs	r3, r1
   34afa:	4313      	orrs	r3, r2
   34afc:	d100      	bne.n	34b00 <__aeabi_dsub+0x584>
   34afe:	e744      	b.n	3498a <__aeabi_dsub+0x40e>
   34b00:	08c0      	lsrs	r0, r0, #3
   34b02:	0767      	lsls	r7, r4, #29
   34b04:	4307      	orrs	r7, r0
   34b06:	2080      	movs	r0, #128	; 0x80
   34b08:	08e4      	lsrs	r4, r4, #3
   34b0a:	0300      	lsls	r0, r0, #12
   34b0c:	4204      	tst	r4, r0
   34b0e:	d0e1      	beq.n	34ad4 <__aeabi_dsub+0x558>
   34b10:	08cb      	lsrs	r3, r1, #3
   34b12:	4203      	tst	r3, r0
   34b14:	d1de      	bne.n	34ad4 <__aeabi_dsub+0x558>
   34b16:	08d7      	lsrs	r7, r2, #3
   34b18:	0749      	lsls	r1, r1, #29
   34b1a:	430f      	orrs	r7, r1
   34b1c:	001c      	movs	r4, r3
   34b1e:	e7d9      	b.n	34ad4 <__aeabi_dsub+0x558>
   34b20:	2100      	movs	r1, #0
   34b22:	e771      	b.n	34a08 <__aeabi_dsub+0x48c>
   34b24:	2500      	movs	r5, #0
   34b26:	2700      	movs	r7, #0
   34b28:	e5e9      	b.n	346fe <__aeabi_dsub+0x182>
   34b2a:	002e      	movs	r6, r5
   34b2c:	0027      	movs	r7, r4
   34b2e:	3e20      	subs	r6, #32
   34b30:	40f7      	lsrs	r7, r6
   34b32:	2d20      	cmp	r5, #32
   34b34:	d02f      	beq.n	34b96 <__aeabi_dsub+0x61a>
   34b36:	2640      	movs	r6, #64	; 0x40
   34b38:	1b75      	subs	r5, r6, r5
   34b3a:	40ac      	lsls	r4, r5
   34b3c:	4650      	mov	r0, sl
   34b3e:	4320      	orrs	r0, r4
   34b40:	1e44      	subs	r4, r0, #1
   34b42:	41a0      	sbcs	r0, r4
   34b44:	2400      	movs	r4, #0
   34b46:	4338      	orrs	r0, r7
   34b48:	e6dc      	b.n	34904 <__aeabi_dsub+0x388>
   34b4a:	2480      	movs	r4, #128	; 0x80
   34b4c:	2500      	movs	r5, #0
   34b4e:	0324      	lsls	r4, r4, #12
   34b50:	4e13      	ldr	r6, [pc, #76]	; (34ba0 <__aeabi_dsub+0x624>)
   34b52:	2700      	movs	r7, #0
   34b54:	e5d3      	b.n	346fe <__aeabi_dsub+0x182>
   34b56:	4650      	mov	r0, sl
   34b58:	4320      	orrs	r0, r4
   34b5a:	0007      	movs	r7, r0
   34b5c:	1e78      	subs	r0, r7, #1
   34b5e:	4187      	sbcs	r7, r0
   34b60:	2400      	movs	r4, #0
   34b62:	18bf      	adds	r7, r7, r2
   34b64:	e760      	b.n	34a28 <__aeabi_dsub+0x4ac>
   34b66:	000c      	movs	r4, r1
   34b68:	0017      	movs	r7, r2
   34b6a:	e58d      	b.n	34688 <__aeabi_dsub+0x10c>
   34b6c:	000c      	movs	r4, r1
   34b6e:	0017      	movs	r7, r2
   34b70:	4e0b      	ldr	r6, [pc, #44]	; (34ba0 <__aeabi_dsub+0x624>)
   34b72:	e589      	b.n	34688 <__aeabi_dsub+0x10c>
   34b74:	001e      	movs	r6, r3
   34b76:	0027      	movs	r7, r4
   34b78:	3e20      	subs	r6, #32
   34b7a:	40f7      	lsrs	r7, r6
   34b7c:	2b20      	cmp	r3, #32
   34b7e:	d00c      	beq.n	34b9a <__aeabi_dsub+0x61e>
   34b80:	2640      	movs	r6, #64	; 0x40
   34b82:	1af3      	subs	r3, r6, r3
   34b84:	409c      	lsls	r4, r3
   34b86:	4650      	mov	r0, sl
   34b88:	4320      	orrs	r0, r4
   34b8a:	1e44      	subs	r4, r0, #1
   34b8c:	41a0      	sbcs	r0, r4
   34b8e:	4307      	orrs	r7, r0
   34b90:	2400      	movs	r4, #0
   34b92:	18bf      	adds	r7, r7, r2
   34b94:	e748      	b.n	34a28 <__aeabi_dsub+0x4ac>
   34b96:	2400      	movs	r4, #0
   34b98:	e7d0      	b.n	34b3c <__aeabi_dsub+0x5c0>
   34b9a:	2400      	movs	r4, #0
   34b9c:	e7f3      	b.n	34b86 <__aeabi_dsub+0x60a>
   34b9e:	46c0      	nop			; (mov r8, r8)
   34ba0:	000007ff 	.word	0x000007ff
   34ba4:	ff7fffff 	.word	0xff7fffff

00034ba8 <__aeabi_d2iz>:
   34ba8:	b530      	push	{r4, r5, lr}
   34baa:	4d13      	ldr	r5, [pc, #76]	; (34bf8 <__aeabi_d2iz+0x50>)
   34bac:	030a      	lsls	r2, r1, #12
   34bae:	004b      	lsls	r3, r1, #1
   34bb0:	0b12      	lsrs	r2, r2, #12
   34bb2:	0d5b      	lsrs	r3, r3, #21
   34bb4:	0fc9      	lsrs	r1, r1, #31
   34bb6:	2400      	movs	r4, #0
   34bb8:	42ab      	cmp	r3, r5
   34bba:	dd10      	ble.n	34bde <__aeabi_d2iz+0x36>
   34bbc:	4c0f      	ldr	r4, [pc, #60]	; (34bfc <__aeabi_d2iz+0x54>)
   34bbe:	42a3      	cmp	r3, r4
   34bc0:	dc0f      	bgt.n	34be2 <__aeabi_d2iz+0x3a>
   34bc2:	2480      	movs	r4, #128	; 0x80
   34bc4:	4d0e      	ldr	r5, [pc, #56]	; (34c00 <__aeabi_d2iz+0x58>)
   34bc6:	0364      	lsls	r4, r4, #13
   34bc8:	4322      	orrs	r2, r4
   34bca:	1aed      	subs	r5, r5, r3
   34bcc:	2d1f      	cmp	r5, #31
   34bce:	dd0b      	ble.n	34be8 <__aeabi_d2iz+0x40>
   34bd0:	480c      	ldr	r0, [pc, #48]	; (34c04 <__aeabi_d2iz+0x5c>)
   34bd2:	1ac3      	subs	r3, r0, r3
   34bd4:	40da      	lsrs	r2, r3
   34bd6:	4254      	negs	r4, r2
   34bd8:	2900      	cmp	r1, #0
   34bda:	d100      	bne.n	34bde <__aeabi_d2iz+0x36>
   34bdc:	0014      	movs	r4, r2
   34bde:	0020      	movs	r0, r4
   34be0:	bd30      	pop	{r4, r5, pc}
   34be2:	4b09      	ldr	r3, [pc, #36]	; (34c08 <__aeabi_d2iz+0x60>)
   34be4:	18cc      	adds	r4, r1, r3
   34be6:	e7fa      	b.n	34bde <__aeabi_d2iz+0x36>
   34be8:	4c08      	ldr	r4, [pc, #32]	; (34c0c <__aeabi_d2iz+0x64>)
   34bea:	40e8      	lsrs	r0, r5
   34bec:	46a4      	mov	ip, r4
   34bee:	4463      	add	r3, ip
   34bf0:	409a      	lsls	r2, r3
   34bf2:	4302      	orrs	r2, r0
   34bf4:	e7ef      	b.n	34bd6 <__aeabi_d2iz+0x2e>
   34bf6:	46c0      	nop			; (mov r8, r8)
   34bf8:	000003fe 	.word	0x000003fe
   34bfc:	0000041d 	.word	0x0000041d
   34c00:	00000433 	.word	0x00000433
   34c04:	00000413 	.word	0x00000413
   34c08:	7fffffff 	.word	0x7fffffff
   34c0c:	fffffbed 	.word	0xfffffbed

00034c10 <__aeabi_ui2d>:
   34c10:	b510      	push	{r4, lr}
   34c12:	1e04      	subs	r4, r0, #0
   34c14:	d028      	beq.n	34c68 <__aeabi_ui2d+0x58>
   34c16:	f000 f885 	bl	34d24 <__clzsi2>
   34c1a:	4b15      	ldr	r3, [pc, #84]	; (34c70 <__aeabi_ui2d+0x60>)
   34c1c:	4a15      	ldr	r2, [pc, #84]	; (34c74 <__aeabi_ui2d+0x64>)
   34c1e:	1a1b      	subs	r3, r3, r0
   34c20:	1ad2      	subs	r2, r2, r3
   34c22:	2a1f      	cmp	r2, #31
   34c24:	dd15      	ble.n	34c52 <__aeabi_ui2d+0x42>
   34c26:	4a14      	ldr	r2, [pc, #80]	; (34c78 <__aeabi_ui2d+0x68>)
   34c28:	1ad2      	subs	r2, r2, r3
   34c2a:	4094      	lsls	r4, r2
   34c2c:	2200      	movs	r2, #0
   34c2e:	0324      	lsls	r4, r4, #12
   34c30:	055b      	lsls	r3, r3, #21
   34c32:	0b24      	lsrs	r4, r4, #12
   34c34:	0d5b      	lsrs	r3, r3, #21
   34c36:	2100      	movs	r1, #0
   34c38:	0010      	movs	r0, r2
   34c3a:	0324      	lsls	r4, r4, #12
   34c3c:	0d0a      	lsrs	r2, r1, #20
   34c3e:	0b24      	lsrs	r4, r4, #12
   34c40:	0512      	lsls	r2, r2, #20
   34c42:	4322      	orrs	r2, r4
   34c44:	4c0d      	ldr	r4, [pc, #52]	; (34c7c <__aeabi_ui2d+0x6c>)
   34c46:	051b      	lsls	r3, r3, #20
   34c48:	4022      	ands	r2, r4
   34c4a:	4313      	orrs	r3, r2
   34c4c:	005b      	lsls	r3, r3, #1
   34c4e:	0859      	lsrs	r1, r3, #1
   34c50:	bd10      	pop	{r4, pc}
   34c52:	0021      	movs	r1, r4
   34c54:	4091      	lsls	r1, r2
   34c56:	000a      	movs	r2, r1
   34c58:	210b      	movs	r1, #11
   34c5a:	1a08      	subs	r0, r1, r0
   34c5c:	40c4      	lsrs	r4, r0
   34c5e:	055b      	lsls	r3, r3, #21
   34c60:	0324      	lsls	r4, r4, #12
   34c62:	0b24      	lsrs	r4, r4, #12
   34c64:	0d5b      	lsrs	r3, r3, #21
   34c66:	e7e6      	b.n	34c36 <__aeabi_ui2d+0x26>
   34c68:	2300      	movs	r3, #0
   34c6a:	2400      	movs	r4, #0
   34c6c:	2200      	movs	r2, #0
   34c6e:	e7e2      	b.n	34c36 <__aeabi_ui2d+0x26>
   34c70:	0000041e 	.word	0x0000041e
   34c74:	00000433 	.word	0x00000433
   34c78:	00000413 	.word	0x00000413
   34c7c:	800fffff 	.word	0x800fffff

00034c80 <__aeabi_f2d>:
   34c80:	0041      	lsls	r1, r0, #1
   34c82:	0e09      	lsrs	r1, r1, #24
   34c84:	1c4b      	adds	r3, r1, #1
   34c86:	b570      	push	{r4, r5, r6, lr}
   34c88:	b2db      	uxtb	r3, r3
   34c8a:	0246      	lsls	r6, r0, #9
   34c8c:	0a75      	lsrs	r5, r6, #9
   34c8e:	0fc4      	lsrs	r4, r0, #31
   34c90:	2b01      	cmp	r3, #1
   34c92:	dd14      	ble.n	34cbe <__aeabi_f2d+0x3e>
   34c94:	23e0      	movs	r3, #224	; 0xe0
   34c96:	009b      	lsls	r3, r3, #2
   34c98:	076d      	lsls	r5, r5, #29
   34c9a:	0b36      	lsrs	r6, r6, #12
   34c9c:	18cb      	adds	r3, r1, r3
   34c9e:	2100      	movs	r1, #0
   34ca0:	0d0a      	lsrs	r2, r1, #20
   34ca2:	0028      	movs	r0, r5
   34ca4:	0512      	lsls	r2, r2, #20
   34ca6:	4d1c      	ldr	r5, [pc, #112]	; (34d18 <__aeabi_f2d+0x98>)
   34ca8:	4332      	orrs	r2, r6
   34caa:	055b      	lsls	r3, r3, #21
   34cac:	402a      	ands	r2, r5
   34cae:	085b      	lsrs	r3, r3, #1
   34cb0:	4313      	orrs	r3, r2
   34cb2:	005b      	lsls	r3, r3, #1
   34cb4:	07e4      	lsls	r4, r4, #31
   34cb6:	085b      	lsrs	r3, r3, #1
   34cb8:	4323      	orrs	r3, r4
   34cba:	0019      	movs	r1, r3
   34cbc:	bd70      	pop	{r4, r5, r6, pc}
   34cbe:	2900      	cmp	r1, #0
   34cc0:	d114      	bne.n	34cec <__aeabi_f2d+0x6c>
   34cc2:	2d00      	cmp	r5, #0
   34cc4:	d01e      	beq.n	34d04 <__aeabi_f2d+0x84>
   34cc6:	0028      	movs	r0, r5
   34cc8:	f000 f82c 	bl	34d24 <__clzsi2>
   34ccc:	280a      	cmp	r0, #10
   34cce:	dc1c      	bgt.n	34d0a <__aeabi_f2d+0x8a>
   34cd0:	230b      	movs	r3, #11
   34cd2:	002a      	movs	r2, r5
   34cd4:	1a1b      	subs	r3, r3, r0
   34cd6:	40da      	lsrs	r2, r3
   34cd8:	0003      	movs	r3, r0
   34cda:	3315      	adds	r3, #21
   34cdc:	409d      	lsls	r5, r3
   34cde:	4b0f      	ldr	r3, [pc, #60]	; (34d1c <__aeabi_f2d+0x9c>)
   34ce0:	0312      	lsls	r2, r2, #12
   34ce2:	1a1b      	subs	r3, r3, r0
   34ce4:	055b      	lsls	r3, r3, #21
   34ce6:	0b16      	lsrs	r6, r2, #12
   34ce8:	0d5b      	lsrs	r3, r3, #21
   34cea:	e7d8      	b.n	34c9e <__aeabi_f2d+0x1e>
   34cec:	2d00      	cmp	r5, #0
   34cee:	d006      	beq.n	34cfe <__aeabi_f2d+0x7e>
   34cf0:	0b32      	lsrs	r2, r6, #12
   34cf2:	2680      	movs	r6, #128	; 0x80
   34cf4:	0336      	lsls	r6, r6, #12
   34cf6:	076d      	lsls	r5, r5, #29
   34cf8:	4316      	orrs	r6, r2
   34cfa:	4b09      	ldr	r3, [pc, #36]	; (34d20 <__aeabi_f2d+0xa0>)
   34cfc:	e7cf      	b.n	34c9e <__aeabi_f2d+0x1e>
   34cfe:	4b08      	ldr	r3, [pc, #32]	; (34d20 <__aeabi_f2d+0xa0>)
   34d00:	2600      	movs	r6, #0
   34d02:	e7cc      	b.n	34c9e <__aeabi_f2d+0x1e>
   34d04:	2300      	movs	r3, #0
   34d06:	2600      	movs	r6, #0
   34d08:	e7c9      	b.n	34c9e <__aeabi_f2d+0x1e>
   34d0a:	0003      	movs	r3, r0
   34d0c:	002a      	movs	r2, r5
   34d0e:	3b0b      	subs	r3, #11
   34d10:	409a      	lsls	r2, r3
   34d12:	2500      	movs	r5, #0
   34d14:	e7e3      	b.n	34cde <__aeabi_f2d+0x5e>
   34d16:	46c0      	nop			; (mov r8, r8)
   34d18:	800fffff 	.word	0x800fffff
   34d1c:	00000389 	.word	0x00000389
   34d20:	000007ff 	.word	0x000007ff

00034d24 <__clzsi2>:
   34d24:	211c      	movs	r1, #28
   34d26:	2301      	movs	r3, #1
   34d28:	041b      	lsls	r3, r3, #16
   34d2a:	4298      	cmp	r0, r3
   34d2c:	d301      	bcc.n	34d32 <__clzsi2+0xe>
   34d2e:	0c00      	lsrs	r0, r0, #16
   34d30:	3910      	subs	r1, #16
   34d32:	0a1b      	lsrs	r3, r3, #8
   34d34:	4298      	cmp	r0, r3
   34d36:	d301      	bcc.n	34d3c <__clzsi2+0x18>
   34d38:	0a00      	lsrs	r0, r0, #8
   34d3a:	3908      	subs	r1, #8
   34d3c:	091b      	lsrs	r3, r3, #4
   34d3e:	4298      	cmp	r0, r3
   34d40:	d301      	bcc.n	34d46 <__clzsi2+0x22>
   34d42:	0900      	lsrs	r0, r0, #4
   34d44:	3904      	subs	r1, #4
   34d46:	a202      	add	r2, pc, #8	; (adr r2, 34d50 <__clzsi2+0x2c>)
   34d48:	5c10      	ldrb	r0, [r2, r0]
   34d4a:	1840      	adds	r0, r0, r1
   34d4c:	4770      	bx	lr
   34d4e:	46c0      	nop			; (mov r8, r8)
   34d50:	02020304 	.word	0x02020304
   34d54:	01010101 	.word	0x01010101
	...

00034d60 <atoi>:
   34d60:	b510      	push	{r4, lr}
   34d62:	220a      	movs	r2, #10
   34d64:	2100      	movs	r1, #0
   34d66:	f000 fb0d 	bl	35384 <strtol>
   34d6a:	bd10      	pop	{r4, pc}

00034d6c <__libc_init_array>:
   34d6c:	b570      	push	{r4, r5, r6, lr}
   34d6e:	2600      	movs	r6, #0
   34d70:	4d0c      	ldr	r5, [pc, #48]	; (34da4 <__libc_init_array+0x38>)
   34d72:	4c0d      	ldr	r4, [pc, #52]	; (34da8 <__libc_init_array+0x3c>)
   34d74:	1b64      	subs	r4, r4, r5
   34d76:	10a4      	asrs	r4, r4, #2
   34d78:	42a6      	cmp	r6, r4
   34d7a:	d109      	bne.n	34d90 <__libc_init_array+0x24>
   34d7c:	2600      	movs	r6, #0
   34d7e:	f005 fd8b 	bl	3a898 <_init>
   34d82:	4d0a      	ldr	r5, [pc, #40]	; (34dac <__libc_init_array+0x40>)
   34d84:	4c0a      	ldr	r4, [pc, #40]	; (34db0 <__libc_init_array+0x44>)
   34d86:	1b64      	subs	r4, r4, r5
   34d88:	10a4      	asrs	r4, r4, #2
   34d8a:	42a6      	cmp	r6, r4
   34d8c:	d105      	bne.n	34d9a <__libc_init_array+0x2e>
   34d8e:	bd70      	pop	{r4, r5, r6, pc}
   34d90:	00b3      	lsls	r3, r6, #2
   34d92:	58eb      	ldr	r3, [r5, r3]
   34d94:	4798      	blx	r3
   34d96:	3601      	adds	r6, #1
   34d98:	e7ee      	b.n	34d78 <__libc_init_array+0xc>
   34d9a:	00b3      	lsls	r3, r6, #2
   34d9c:	58eb      	ldr	r3, [r5, r3]
   34d9e:	4798      	blx	r3
   34da0:	3601      	adds	r6, #1
   34da2:	e7f2      	b.n	34d8a <__libc_init_array+0x1e>
   34da4:	0003a8a4 	.word	0x0003a8a4
   34da8:	0003a8a4 	.word	0x0003a8a4
   34dac:	0003a8a4 	.word	0x0003a8a4
   34db0:	0003a8a8 	.word	0x0003a8a8

00034db4 <malloc>:
   34db4:	b510      	push	{r4, lr}
   34db6:	4b03      	ldr	r3, [pc, #12]	; (34dc4 <malloc+0x10>)
   34db8:	0001      	movs	r1, r0
   34dba:	6818      	ldr	r0, [r3, #0]
   34dbc:	f000 f87c 	bl	34eb8 <_malloc_r>
   34dc0:	bd10      	pop	{r4, pc}
   34dc2:	46c0      	nop			; (mov r8, r8)
   34dc4:	20000130 	.word	0x20000130

00034dc8 <free>:
   34dc8:	b510      	push	{r4, lr}
   34dca:	4b03      	ldr	r3, [pc, #12]	; (34dd8 <free+0x10>)
   34dcc:	0001      	movs	r1, r0
   34dce:	6818      	ldr	r0, [r3, #0]
   34dd0:	f000 f828 	bl	34e24 <_free_r>
   34dd4:	bd10      	pop	{r4, pc}
   34dd6:	46c0      	nop			; (mov r8, r8)
   34dd8:	20000130 	.word	0x20000130

00034ddc <memcpy>:
   34ddc:	2300      	movs	r3, #0
   34dde:	b510      	push	{r4, lr}
   34de0:	429a      	cmp	r2, r3
   34de2:	d100      	bne.n	34de6 <memcpy+0xa>
   34de4:	bd10      	pop	{r4, pc}
   34de6:	5ccc      	ldrb	r4, [r1, r3]
   34de8:	54c4      	strb	r4, [r0, r3]
   34dea:	3301      	adds	r3, #1
   34dec:	e7f8      	b.n	34de0 <memcpy+0x4>

00034dee <memmove>:
   34dee:	b510      	push	{r4, lr}
   34df0:	4288      	cmp	r0, r1
   34df2:	d902      	bls.n	34dfa <memmove+0xc>
   34df4:	188b      	adds	r3, r1, r2
   34df6:	4298      	cmp	r0, r3
   34df8:	d308      	bcc.n	34e0c <memmove+0x1e>
   34dfa:	2300      	movs	r3, #0
   34dfc:	429a      	cmp	r2, r3
   34dfe:	d007      	beq.n	34e10 <memmove+0x22>
   34e00:	5ccc      	ldrb	r4, [r1, r3]
   34e02:	54c4      	strb	r4, [r0, r3]
   34e04:	3301      	adds	r3, #1
   34e06:	e7f9      	b.n	34dfc <memmove+0xe>
   34e08:	5c8b      	ldrb	r3, [r1, r2]
   34e0a:	5483      	strb	r3, [r0, r2]
   34e0c:	3a01      	subs	r2, #1
   34e0e:	d2fb      	bcs.n	34e08 <memmove+0x1a>
   34e10:	bd10      	pop	{r4, pc}

00034e12 <memset>:
   34e12:	0003      	movs	r3, r0
   34e14:	1882      	adds	r2, r0, r2
   34e16:	4293      	cmp	r3, r2
   34e18:	d100      	bne.n	34e1c <memset+0xa>
   34e1a:	4770      	bx	lr
   34e1c:	7019      	strb	r1, [r3, #0]
   34e1e:	3301      	adds	r3, #1
   34e20:	e7f9      	b.n	34e16 <memset+0x4>
	...

00034e24 <_free_r>:
   34e24:	b570      	push	{r4, r5, r6, lr}
   34e26:	0005      	movs	r5, r0
   34e28:	2900      	cmp	r1, #0
   34e2a:	d010      	beq.n	34e4e <_free_r+0x2a>
   34e2c:	1f0c      	subs	r4, r1, #4
   34e2e:	6823      	ldr	r3, [r4, #0]
   34e30:	2b00      	cmp	r3, #0
   34e32:	da00      	bge.n	34e36 <_free_r+0x12>
   34e34:	18e4      	adds	r4, r4, r3
   34e36:	0028      	movs	r0, r5
   34e38:	f000 fdd8 	bl	359ec <__malloc_lock>
   34e3c:	4a1d      	ldr	r2, [pc, #116]	; (34eb4 <_free_r+0x90>)
   34e3e:	6813      	ldr	r3, [r2, #0]
   34e40:	2b00      	cmp	r3, #0
   34e42:	d105      	bne.n	34e50 <_free_r+0x2c>
   34e44:	6063      	str	r3, [r4, #4]
   34e46:	6014      	str	r4, [r2, #0]
   34e48:	0028      	movs	r0, r5
   34e4a:	f000 fdd0 	bl	359ee <__malloc_unlock>
   34e4e:	bd70      	pop	{r4, r5, r6, pc}
   34e50:	42a3      	cmp	r3, r4
   34e52:	d909      	bls.n	34e68 <_free_r+0x44>
   34e54:	6821      	ldr	r1, [r4, #0]
   34e56:	1860      	adds	r0, r4, r1
   34e58:	4283      	cmp	r3, r0
   34e5a:	d1f3      	bne.n	34e44 <_free_r+0x20>
   34e5c:	6818      	ldr	r0, [r3, #0]
   34e5e:	685b      	ldr	r3, [r3, #4]
   34e60:	1841      	adds	r1, r0, r1
   34e62:	6021      	str	r1, [r4, #0]
   34e64:	e7ee      	b.n	34e44 <_free_r+0x20>
   34e66:	0013      	movs	r3, r2
   34e68:	685a      	ldr	r2, [r3, #4]
   34e6a:	2a00      	cmp	r2, #0
   34e6c:	d001      	beq.n	34e72 <_free_r+0x4e>
   34e6e:	42a2      	cmp	r2, r4
   34e70:	d9f9      	bls.n	34e66 <_free_r+0x42>
   34e72:	6819      	ldr	r1, [r3, #0]
   34e74:	1858      	adds	r0, r3, r1
   34e76:	42a0      	cmp	r0, r4
   34e78:	d10b      	bne.n	34e92 <_free_r+0x6e>
   34e7a:	6820      	ldr	r0, [r4, #0]
   34e7c:	1809      	adds	r1, r1, r0
   34e7e:	1858      	adds	r0, r3, r1
   34e80:	6019      	str	r1, [r3, #0]
   34e82:	4282      	cmp	r2, r0
   34e84:	d1e0      	bne.n	34e48 <_free_r+0x24>
   34e86:	6810      	ldr	r0, [r2, #0]
   34e88:	6852      	ldr	r2, [r2, #4]
   34e8a:	1841      	adds	r1, r0, r1
   34e8c:	6019      	str	r1, [r3, #0]
   34e8e:	605a      	str	r2, [r3, #4]
   34e90:	e7da      	b.n	34e48 <_free_r+0x24>
   34e92:	42a0      	cmp	r0, r4
   34e94:	d902      	bls.n	34e9c <_free_r+0x78>
   34e96:	230c      	movs	r3, #12
   34e98:	602b      	str	r3, [r5, #0]
   34e9a:	e7d5      	b.n	34e48 <_free_r+0x24>
   34e9c:	6821      	ldr	r1, [r4, #0]
   34e9e:	1860      	adds	r0, r4, r1
   34ea0:	4282      	cmp	r2, r0
   34ea2:	d103      	bne.n	34eac <_free_r+0x88>
   34ea4:	6810      	ldr	r0, [r2, #0]
   34ea6:	6852      	ldr	r2, [r2, #4]
   34ea8:	1841      	adds	r1, r0, r1
   34eaa:	6021      	str	r1, [r4, #0]
   34eac:	6062      	str	r2, [r4, #4]
   34eae:	605c      	str	r4, [r3, #4]
   34eb0:	e7ca      	b.n	34e48 <_free_r+0x24>
   34eb2:	46c0      	nop			; (mov r8, r8)
   34eb4:	20004720 	.word	0x20004720

00034eb8 <_malloc_r>:
   34eb8:	2303      	movs	r3, #3
   34eba:	b570      	push	{r4, r5, r6, lr}
   34ebc:	1ccd      	adds	r5, r1, #3
   34ebe:	439d      	bics	r5, r3
   34ec0:	3508      	adds	r5, #8
   34ec2:	0006      	movs	r6, r0
   34ec4:	2d0c      	cmp	r5, #12
   34ec6:	d21e      	bcs.n	34f06 <_malloc_r+0x4e>
   34ec8:	250c      	movs	r5, #12
   34eca:	42a9      	cmp	r1, r5
   34ecc:	d81d      	bhi.n	34f0a <_malloc_r+0x52>
   34ece:	0030      	movs	r0, r6
   34ed0:	f000 fd8c 	bl	359ec <__malloc_lock>
   34ed4:	4a25      	ldr	r2, [pc, #148]	; (34f6c <_malloc_r+0xb4>)
   34ed6:	6814      	ldr	r4, [r2, #0]
   34ed8:	0021      	movs	r1, r4
   34eda:	2900      	cmp	r1, #0
   34edc:	d119      	bne.n	34f12 <_malloc_r+0x5a>
   34ede:	4c24      	ldr	r4, [pc, #144]	; (34f70 <_malloc_r+0xb8>)
   34ee0:	6823      	ldr	r3, [r4, #0]
   34ee2:	2b00      	cmp	r3, #0
   34ee4:	d103      	bne.n	34eee <_malloc_r+0x36>
   34ee6:	0030      	movs	r0, r6
   34ee8:	f000 f8ae 	bl	35048 <_sbrk_r>
   34eec:	6020      	str	r0, [r4, #0]
   34eee:	0029      	movs	r1, r5
   34ef0:	0030      	movs	r0, r6
   34ef2:	f000 f8a9 	bl	35048 <_sbrk_r>
   34ef6:	1c43      	adds	r3, r0, #1
   34ef8:	d12c      	bne.n	34f54 <_malloc_r+0x9c>
   34efa:	230c      	movs	r3, #12
   34efc:	0030      	movs	r0, r6
   34efe:	6033      	str	r3, [r6, #0]
   34f00:	f000 fd75 	bl	359ee <__malloc_unlock>
   34f04:	e003      	b.n	34f0e <_malloc_r+0x56>
   34f06:	2d00      	cmp	r5, #0
   34f08:	dadf      	bge.n	34eca <_malloc_r+0x12>
   34f0a:	230c      	movs	r3, #12
   34f0c:	6033      	str	r3, [r6, #0]
   34f0e:	2000      	movs	r0, #0
   34f10:	bd70      	pop	{r4, r5, r6, pc}
   34f12:	680b      	ldr	r3, [r1, #0]
   34f14:	1b5b      	subs	r3, r3, r5
   34f16:	d41a      	bmi.n	34f4e <_malloc_r+0x96>
   34f18:	2b0b      	cmp	r3, #11
   34f1a:	d903      	bls.n	34f24 <_malloc_r+0x6c>
   34f1c:	600b      	str	r3, [r1, #0]
   34f1e:	18cc      	adds	r4, r1, r3
   34f20:	6025      	str	r5, [r4, #0]
   34f22:	e003      	b.n	34f2c <_malloc_r+0x74>
   34f24:	428c      	cmp	r4, r1
   34f26:	d10e      	bne.n	34f46 <_malloc_r+0x8e>
   34f28:	6863      	ldr	r3, [r4, #4]
   34f2a:	6013      	str	r3, [r2, #0]
   34f2c:	0030      	movs	r0, r6
   34f2e:	f000 fd5e 	bl	359ee <__malloc_unlock>
   34f32:	0020      	movs	r0, r4
   34f34:	2207      	movs	r2, #7
   34f36:	300b      	adds	r0, #11
   34f38:	1d23      	adds	r3, r4, #4
   34f3a:	4390      	bics	r0, r2
   34f3c:	1ac3      	subs	r3, r0, r3
   34f3e:	d0e7      	beq.n	34f10 <_malloc_r+0x58>
   34f40:	425a      	negs	r2, r3
   34f42:	50e2      	str	r2, [r4, r3]
   34f44:	e7e4      	b.n	34f10 <_malloc_r+0x58>
   34f46:	684b      	ldr	r3, [r1, #4]
   34f48:	6063      	str	r3, [r4, #4]
   34f4a:	000c      	movs	r4, r1
   34f4c:	e7ee      	b.n	34f2c <_malloc_r+0x74>
   34f4e:	000c      	movs	r4, r1
   34f50:	6849      	ldr	r1, [r1, #4]
   34f52:	e7c2      	b.n	34eda <_malloc_r+0x22>
   34f54:	2303      	movs	r3, #3
   34f56:	1cc4      	adds	r4, r0, #3
   34f58:	439c      	bics	r4, r3
   34f5a:	42a0      	cmp	r0, r4
   34f5c:	d0e0      	beq.n	34f20 <_malloc_r+0x68>
   34f5e:	1a21      	subs	r1, r4, r0
   34f60:	0030      	movs	r0, r6
   34f62:	f000 f871 	bl	35048 <_sbrk_r>
   34f66:	1c43      	adds	r3, r0, #1
   34f68:	d1da      	bne.n	34f20 <_malloc_r+0x68>
   34f6a:	e7c6      	b.n	34efa <_malloc_r+0x42>
   34f6c:	20004720 	.word	0x20004720
   34f70:	20004724 	.word	0x20004724

00034f74 <_puts_r>:
   34f74:	b570      	push	{r4, r5, r6, lr}
   34f76:	0005      	movs	r5, r0
   34f78:	000e      	movs	r6, r1
   34f7a:	2800      	cmp	r0, #0
   34f7c:	d004      	beq.n	34f88 <_puts_r+0x14>
   34f7e:	6983      	ldr	r3, [r0, #24]
   34f80:	2b00      	cmp	r3, #0
   34f82:	d101      	bne.n	34f88 <_puts_r+0x14>
   34f84:	f000 fc0e 	bl	357a4 <__sinit>
   34f88:	69ab      	ldr	r3, [r5, #24]
   34f8a:	68ac      	ldr	r4, [r5, #8]
   34f8c:	2b00      	cmp	r3, #0
   34f8e:	d102      	bne.n	34f96 <_puts_r+0x22>
   34f90:	0028      	movs	r0, r5
   34f92:	f000 fc07 	bl	357a4 <__sinit>
   34f96:	4b24      	ldr	r3, [pc, #144]	; (35028 <_puts_r+0xb4>)
   34f98:	429c      	cmp	r4, r3
   34f9a:	d10f      	bne.n	34fbc <_puts_r+0x48>
   34f9c:	686c      	ldr	r4, [r5, #4]
   34f9e:	89a3      	ldrh	r3, [r4, #12]
   34fa0:	071b      	lsls	r3, r3, #28
   34fa2:	d502      	bpl.n	34faa <_puts_r+0x36>
   34fa4:	6923      	ldr	r3, [r4, #16]
   34fa6:	2b00      	cmp	r3, #0
   34fa8:	d120      	bne.n	34fec <_puts_r+0x78>
   34faa:	0021      	movs	r1, r4
   34fac:	0028      	movs	r0, r5
   34fae:	f000 fa8b 	bl	354c8 <__swsetup_r>
   34fb2:	2800      	cmp	r0, #0
   34fb4:	d01a      	beq.n	34fec <_puts_r+0x78>
   34fb6:	2001      	movs	r0, #1
   34fb8:	4240      	negs	r0, r0
   34fba:	bd70      	pop	{r4, r5, r6, pc}
   34fbc:	4b1b      	ldr	r3, [pc, #108]	; (3502c <_puts_r+0xb8>)
   34fbe:	429c      	cmp	r4, r3
   34fc0:	d101      	bne.n	34fc6 <_puts_r+0x52>
   34fc2:	68ac      	ldr	r4, [r5, #8]
   34fc4:	e7eb      	b.n	34f9e <_puts_r+0x2a>
   34fc6:	4b1a      	ldr	r3, [pc, #104]	; (35030 <_puts_r+0xbc>)
   34fc8:	429c      	cmp	r4, r3
   34fca:	d1e8      	bne.n	34f9e <_puts_r+0x2a>
   34fcc:	68ec      	ldr	r4, [r5, #12]
   34fce:	e7e6      	b.n	34f9e <_puts_r+0x2a>
   34fd0:	3b01      	subs	r3, #1
   34fd2:	3601      	adds	r6, #1
   34fd4:	60a3      	str	r3, [r4, #8]
   34fd6:	2b00      	cmp	r3, #0
   34fd8:	da04      	bge.n	34fe4 <_puts_r+0x70>
   34fda:	69a2      	ldr	r2, [r4, #24]
   34fdc:	4293      	cmp	r3, r2
   34fde:	db16      	blt.n	3500e <_puts_r+0x9a>
   34fe0:	290a      	cmp	r1, #10
   34fe2:	d014      	beq.n	3500e <_puts_r+0x9a>
   34fe4:	6823      	ldr	r3, [r4, #0]
   34fe6:	1c5a      	adds	r2, r3, #1
   34fe8:	6022      	str	r2, [r4, #0]
   34fea:	7019      	strb	r1, [r3, #0]
   34fec:	7831      	ldrb	r1, [r6, #0]
   34fee:	68a3      	ldr	r3, [r4, #8]
   34ff0:	2900      	cmp	r1, #0
   34ff2:	d1ed      	bne.n	34fd0 <_puts_r+0x5c>
   34ff4:	3b01      	subs	r3, #1
   34ff6:	60a3      	str	r3, [r4, #8]
   34ff8:	2b00      	cmp	r3, #0
   34ffa:	da0f      	bge.n	3501c <_puts_r+0xa8>
   34ffc:	0022      	movs	r2, r4
   34ffe:	310a      	adds	r1, #10
   35000:	0028      	movs	r0, r5
   35002:	f000 fa0b 	bl	3541c <__swbuf_r>
   35006:	1c43      	adds	r3, r0, #1
   35008:	d0d5      	beq.n	34fb6 <_puts_r+0x42>
   3500a:	200a      	movs	r0, #10
   3500c:	e7d5      	b.n	34fba <_puts_r+0x46>
   3500e:	0022      	movs	r2, r4
   35010:	0028      	movs	r0, r5
   35012:	f000 fa03 	bl	3541c <__swbuf_r>
   35016:	1c43      	adds	r3, r0, #1
   35018:	d1e8      	bne.n	34fec <_puts_r+0x78>
   3501a:	e7cc      	b.n	34fb6 <_puts_r+0x42>
   3501c:	200a      	movs	r0, #10
   3501e:	6823      	ldr	r3, [r4, #0]
   35020:	1c5a      	adds	r2, r3, #1
   35022:	6022      	str	r2, [r4, #0]
   35024:	7018      	strb	r0, [r3, #0]
   35026:	e7c8      	b.n	34fba <_puts_r+0x46>
   35028:	0003a718 	.word	0x0003a718
   3502c:	0003a738 	.word	0x0003a738
   35030:	0003a6f8 	.word	0x0003a6f8

00035034 <puts>:
   35034:	b510      	push	{r4, lr}
   35036:	4b03      	ldr	r3, [pc, #12]	; (35044 <puts+0x10>)
   35038:	0001      	movs	r1, r0
   3503a:	6818      	ldr	r0, [r3, #0]
   3503c:	f7ff ff9a 	bl	34f74 <_puts_r>
   35040:	bd10      	pop	{r4, pc}
   35042:	46c0      	nop			; (mov r8, r8)
   35044:	20000130 	.word	0x20000130

00035048 <_sbrk_r>:
   35048:	2300      	movs	r3, #0
   3504a:	b570      	push	{r4, r5, r6, lr}
   3504c:	4c06      	ldr	r4, [pc, #24]	; (35068 <_sbrk_r+0x20>)
   3504e:	0005      	movs	r5, r0
   35050:	0008      	movs	r0, r1
   35052:	6023      	str	r3, [r4, #0]
   35054:	f7f6 fa72 	bl	2b53c <_sbrk>
   35058:	1c43      	adds	r3, r0, #1
   3505a:	d103      	bne.n	35064 <_sbrk_r+0x1c>
   3505c:	6823      	ldr	r3, [r4, #0]
   3505e:	2b00      	cmp	r3, #0
   35060:	d000      	beq.n	35064 <_sbrk_r+0x1c>
   35062:	602b      	str	r3, [r5, #0]
   35064:	bd70      	pop	{r4, r5, r6, pc}
   35066:	46c0      	nop			; (mov r8, r8)
   35068:	20005ccc 	.word	0x20005ccc

0003506c <sniprintf>:
   3506c:	b40c      	push	{r2, r3}
   3506e:	b530      	push	{r4, r5, lr}
   35070:	4b16      	ldr	r3, [pc, #88]	; (350cc <sniprintf+0x60>)
   35072:	b09d      	sub	sp, #116	; 0x74
   35074:	1e0c      	subs	r4, r1, #0
   35076:	681d      	ldr	r5, [r3, #0]
   35078:	da08      	bge.n	3508c <sniprintf+0x20>
   3507a:	238b      	movs	r3, #139	; 0x8b
   3507c:	2001      	movs	r0, #1
   3507e:	602b      	str	r3, [r5, #0]
   35080:	4240      	negs	r0, r0
   35082:	b01d      	add	sp, #116	; 0x74
   35084:	bc30      	pop	{r4, r5}
   35086:	bc08      	pop	{r3}
   35088:	b002      	add	sp, #8
   3508a:	4718      	bx	r3
   3508c:	2382      	movs	r3, #130	; 0x82
   3508e:	a902      	add	r1, sp, #8
   35090:	009b      	lsls	r3, r3, #2
   35092:	818b      	strh	r3, [r1, #12]
   35094:	2300      	movs	r3, #0
   35096:	9002      	str	r0, [sp, #8]
   35098:	6108      	str	r0, [r1, #16]
   3509a:	429c      	cmp	r4, r3
   3509c:	d000      	beq.n	350a0 <sniprintf+0x34>
   3509e:	1e63      	subs	r3, r4, #1
   350a0:	608b      	str	r3, [r1, #8]
   350a2:	614b      	str	r3, [r1, #20]
   350a4:	2301      	movs	r3, #1
   350a6:	425b      	negs	r3, r3
   350a8:	81cb      	strh	r3, [r1, #14]
   350aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   350ac:	ab21      	add	r3, sp, #132	; 0x84
   350ae:	0028      	movs	r0, r5
   350b0:	9301      	str	r3, [sp, #4]
   350b2:	f000 fcff 	bl	35ab4 <_svfiprintf_r>
   350b6:	1c43      	adds	r3, r0, #1
   350b8:	da01      	bge.n	350be <sniprintf+0x52>
   350ba:	238b      	movs	r3, #139	; 0x8b
   350bc:	602b      	str	r3, [r5, #0]
   350be:	2c00      	cmp	r4, #0
   350c0:	d0df      	beq.n	35082 <sniprintf+0x16>
   350c2:	2300      	movs	r3, #0
   350c4:	9a02      	ldr	r2, [sp, #8]
   350c6:	7013      	strb	r3, [r2, #0]
   350c8:	e7db      	b.n	35082 <sniprintf+0x16>
   350ca:	46c0      	nop			; (mov r8, r8)
   350cc:	20000130 	.word	0x20000130

000350d0 <siprintf>:
   350d0:	b40e      	push	{r1, r2, r3}
   350d2:	b510      	push	{r4, lr}
   350d4:	b09d      	sub	sp, #116	; 0x74
   350d6:	a902      	add	r1, sp, #8
   350d8:	9002      	str	r0, [sp, #8]
   350da:	6108      	str	r0, [r1, #16]
   350dc:	480b      	ldr	r0, [pc, #44]	; (3510c <siprintf+0x3c>)
   350de:	2482      	movs	r4, #130	; 0x82
   350e0:	6088      	str	r0, [r1, #8]
   350e2:	6148      	str	r0, [r1, #20]
   350e4:	2001      	movs	r0, #1
   350e6:	4240      	negs	r0, r0
   350e8:	ab1f      	add	r3, sp, #124	; 0x7c
   350ea:	81c8      	strh	r0, [r1, #14]
   350ec:	4808      	ldr	r0, [pc, #32]	; (35110 <siprintf+0x40>)
   350ee:	cb04      	ldmia	r3!, {r2}
   350f0:	00a4      	lsls	r4, r4, #2
   350f2:	6800      	ldr	r0, [r0, #0]
   350f4:	9301      	str	r3, [sp, #4]
   350f6:	818c      	strh	r4, [r1, #12]
   350f8:	f000 fcdc 	bl	35ab4 <_svfiprintf_r>
   350fc:	2300      	movs	r3, #0
   350fe:	9a02      	ldr	r2, [sp, #8]
   35100:	7013      	strb	r3, [r2, #0]
   35102:	b01d      	add	sp, #116	; 0x74
   35104:	bc10      	pop	{r4}
   35106:	bc08      	pop	{r3}
   35108:	b003      	add	sp, #12
   3510a:	4718      	bx	r3
   3510c:	7fffffff 	.word	0x7fffffff
   35110:	20000130 	.word	0x20000130

00035114 <strcasecmp>:
   35114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35116:	0007      	movs	r7, r0
   35118:	000e      	movs	r6, r1
   3511a:	783c      	ldrb	r4, [r7, #0]
   3511c:	f000 fbda 	bl	358d4 <__locale_ctype_ptr>
   35120:	2203      	movs	r2, #3
   35122:	1900      	adds	r0, r0, r4
   35124:	7843      	ldrb	r3, [r0, #1]
   35126:	4013      	ands	r3, r2
   35128:	2b01      	cmp	r3, #1
   3512a:	d100      	bne.n	3512e <strcasecmp+0x1a>
   3512c:	3420      	adds	r4, #32
   3512e:	7835      	ldrb	r5, [r6, #0]
   35130:	f000 fbd0 	bl	358d4 <__locale_ctype_ptr>
   35134:	2203      	movs	r2, #3
   35136:	1940      	adds	r0, r0, r5
   35138:	7843      	ldrb	r3, [r0, #1]
   3513a:	4013      	ands	r3, r2
   3513c:	2b01      	cmp	r3, #1
   3513e:	d100      	bne.n	35142 <strcasecmp+0x2e>
   35140:	3520      	adds	r5, #32
   35142:	1b60      	subs	r0, r4, r5
   35144:	d103      	bne.n	3514e <strcasecmp+0x3a>
   35146:	3701      	adds	r7, #1
   35148:	3601      	adds	r6, #1
   3514a:	2d00      	cmp	r5, #0
   3514c:	d1e5      	bne.n	3511a <strcasecmp+0x6>
   3514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035150 <strcat>:
   35150:	0002      	movs	r2, r0
   35152:	b510      	push	{r4, lr}
   35154:	7813      	ldrb	r3, [r2, #0]
   35156:	2b00      	cmp	r3, #0
   35158:	d105      	bne.n	35166 <strcat+0x16>
   3515a:	5ccc      	ldrb	r4, [r1, r3]
   3515c:	54d4      	strb	r4, [r2, r3]
   3515e:	3301      	adds	r3, #1
   35160:	2c00      	cmp	r4, #0
   35162:	d1fa      	bne.n	3515a <strcat+0xa>
   35164:	bd10      	pop	{r4, pc}
   35166:	3201      	adds	r2, #1
   35168:	e7f4      	b.n	35154 <strcat+0x4>

0003516a <strcmp>:
   3516a:	7802      	ldrb	r2, [r0, #0]
   3516c:	780b      	ldrb	r3, [r1, #0]
   3516e:	2a00      	cmp	r2, #0
   35170:	d003      	beq.n	3517a <strcmp+0x10>
   35172:	3001      	adds	r0, #1
   35174:	3101      	adds	r1, #1
   35176:	429a      	cmp	r2, r3
   35178:	d0f7      	beq.n	3516a <strcmp>
   3517a:	1ad0      	subs	r0, r2, r3
   3517c:	4770      	bx	lr

0003517e <strcpy>:
   3517e:	1c03      	adds	r3, r0, #0
   35180:	780a      	ldrb	r2, [r1, #0]
   35182:	3101      	adds	r1, #1
   35184:	701a      	strb	r2, [r3, #0]
   35186:	3301      	adds	r3, #1
   35188:	2a00      	cmp	r2, #0
   3518a:	d1f9      	bne.n	35180 <strcpy+0x2>
   3518c:	4770      	bx	lr
	...

00035190 <strdup>:
   35190:	b510      	push	{r4, lr}
   35192:	4b03      	ldr	r3, [pc, #12]	; (351a0 <strdup+0x10>)
   35194:	0001      	movs	r1, r0
   35196:	6818      	ldr	r0, [r3, #0]
   35198:	f000 f804 	bl	351a4 <_strdup_r>
   3519c:	bd10      	pop	{r4, pc}
   3519e:	46c0      	nop			; (mov r8, r8)
   351a0:	20000130 	.word	0x20000130

000351a4 <_strdup_r>:
   351a4:	b570      	push	{r4, r5, r6, lr}
   351a6:	0005      	movs	r5, r0
   351a8:	0008      	movs	r0, r1
   351aa:	000e      	movs	r6, r1
   351ac:	f000 f80d 	bl	351ca <strlen>
   351b0:	1c44      	adds	r4, r0, #1
   351b2:	0021      	movs	r1, r4
   351b4:	0028      	movs	r0, r5
   351b6:	f7ff fe7f 	bl	34eb8 <_malloc_r>
   351ba:	1e05      	subs	r5, r0, #0
   351bc:	d003      	beq.n	351c6 <_strdup_r+0x22>
   351be:	0022      	movs	r2, r4
   351c0:	0031      	movs	r1, r6
   351c2:	f7ff fe0b 	bl	34ddc <memcpy>
   351c6:	0028      	movs	r0, r5
   351c8:	bd70      	pop	{r4, r5, r6, pc}

000351ca <strlen>:
   351ca:	2300      	movs	r3, #0
   351cc:	5cc2      	ldrb	r2, [r0, r3]
   351ce:	3301      	adds	r3, #1
   351d0:	2a00      	cmp	r2, #0
   351d2:	d1fb      	bne.n	351cc <strlen+0x2>
   351d4:	1e58      	subs	r0, r3, #1
   351d6:	4770      	bx	lr

000351d8 <strncmp>:
   351d8:	2300      	movs	r3, #0
   351da:	b530      	push	{r4, r5, lr}
   351dc:	429a      	cmp	r2, r3
   351de:	d00a      	beq.n	351f6 <strncmp+0x1e>
   351e0:	3a01      	subs	r2, #1
   351e2:	5cc4      	ldrb	r4, [r0, r3]
   351e4:	5ccd      	ldrb	r5, [r1, r3]
   351e6:	42ac      	cmp	r4, r5
   351e8:	d104      	bne.n	351f4 <strncmp+0x1c>
   351ea:	429a      	cmp	r2, r3
   351ec:	d002      	beq.n	351f4 <strncmp+0x1c>
   351ee:	3301      	adds	r3, #1
   351f0:	2c00      	cmp	r4, #0
   351f2:	d1f6      	bne.n	351e2 <strncmp+0xa>
   351f4:	1b63      	subs	r3, r4, r5
   351f6:	0018      	movs	r0, r3
   351f8:	bd30      	pop	{r4, r5, pc}

000351fa <strncpy>:
   351fa:	b570      	push	{r4, r5, r6, lr}
   351fc:	0004      	movs	r4, r0
   351fe:	2a00      	cmp	r2, #0
   35200:	d100      	bne.n	35204 <strncpy+0xa>
   35202:	bd70      	pop	{r4, r5, r6, pc}
   35204:	780d      	ldrb	r5, [r1, #0]
   35206:	1e56      	subs	r6, r2, #1
   35208:	1c63      	adds	r3, r4, #1
   3520a:	7025      	strb	r5, [r4, #0]
   3520c:	3101      	adds	r1, #1
   3520e:	2d00      	cmp	r5, #0
   35210:	d105      	bne.n	3521e <strncpy+0x24>
   35212:	18a4      	adds	r4, r4, r2
   35214:	429c      	cmp	r4, r3
   35216:	d0f4      	beq.n	35202 <strncpy+0x8>
   35218:	701d      	strb	r5, [r3, #0]
   3521a:	3301      	adds	r3, #1
   3521c:	e7fa      	b.n	35214 <strncpy+0x1a>
   3521e:	001c      	movs	r4, r3
   35220:	0032      	movs	r2, r6
   35222:	e7ec      	b.n	351fe <strncpy+0x4>

00035224 <strrchr>:
   35224:	b570      	push	{r4, r5, r6, lr}
   35226:	000d      	movs	r5, r1
   35228:	2400      	movs	r4, #0
   3522a:	2900      	cmp	r1, #0
   3522c:	d105      	bne.n	3523a <strrchr+0x16>
   3522e:	f000 ff19 	bl	36064 <strchr>
   35232:	0004      	movs	r4, r0
   35234:	e006      	b.n	35244 <strrchr+0x20>
   35236:	001c      	movs	r4, r3
   35238:	1c58      	adds	r0, r3, #1
   3523a:	0029      	movs	r1, r5
   3523c:	f000 ff12 	bl	36064 <strchr>
   35240:	1e03      	subs	r3, r0, #0
   35242:	d1f8      	bne.n	35236 <strrchr+0x12>
   35244:	0020      	movs	r0, r4
   35246:	bd70      	pop	{r4, r5, r6, pc}

00035248 <strstr>:
   35248:	b510      	push	{r4, lr}
   3524a:	0002      	movs	r2, r0
   3524c:	7800      	ldrb	r0, [r0, #0]
   3524e:	2800      	cmp	r0, #0
   35250:	d104      	bne.n	3525c <strstr+0x14>
   35252:	7809      	ldrb	r1, [r1, #0]
   35254:	2900      	cmp	r1, #0
   35256:	d00d      	beq.n	35274 <strstr+0x2c>
   35258:	bd10      	pop	{r4, pc}
   3525a:	3201      	adds	r2, #1
   3525c:	7810      	ldrb	r0, [r2, #0]
   3525e:	2800      	cmp	r0, #0
   35260:	d0fa      	beq.n	35258 <strstr+0x10>
   35262:	2300      	movs	r3, #0
   35264:	5cc8      	ldrb	r0, [r1, r3]
   35266:	2800      	cmp	r0, #0
   35268:	d004      	beq.n	35274 <strstr+0x2c>
   3526a:	5cd4      	ldrb	r4, [r2, r3]
   3526c:	4284      	cmp	r4, r0
   3526e:	d1f4      	bne.n	3525a <strstr+0x12>
   35270:	3301      	adds	r3, #1
   35272:	e7f7      	b.n	35264 <strstr+0x1c>
   35274:	0010      	movs	r0, r2
   35276:	e7ef      	b.n	35258 <strstr+0x10>

00035278 <_strtol_l.isra.0>:
   35278:	b5f0      	push	{r4, r5, r6, r7, lr}
   3527a:	001f      	movs	r7, r3
   3527c:	000e      	movs	r6, r1
   3527e:	b087      	sub	sp, #28
   35280:	9005      	str	r0, [sp, #20]
   35282:	9103      	str	r1, [sp, #12]
   35284:	9202      	str	r2, [sp, #8]
   35286:	980c      	ldr	r0, [sp, #48]	; 0x30
   35288:	7834      	ldrb	r4, [r6, #0]
   3528a:	f000 fb20 	bl	358ce <__locale_ctype_ptr_l>
   3528e:	2208      	movs	r2, #8
   35290:	1900      	adds	r0, r0, r4
   35292:	7843      	ldrb	r3, [r0, #1]
   35294:	1c75      	adds	r5, r6, #1
   35296:	4013      	ands	r3, r2
   35298:	d10c      	bne.n	352b4 <_strtol_l.isra.0+0x3c>
   3529a:	2c2d      	cmp	r4, #45	; 0x2d
   3529c:	d10c      	bne.n	352b8 <_strtol_l.isra.0+0x40>
   3529e:	3301      	adds	r3, #1
   352a0:	782c      	ldrb	r4, [r5, #0]
   352a2:	9301      	str	r3, [sp, #4]
   352a4:	1cb5      	adds	r5, r6, #2
   352a6:	2f00      	cmp	r7, #0
   352a8:	d00c      	beq.n	352c4 <_strtol_l.isra.0+0x4c>
   352aa:	2f10      	cmp	r7, #16
   352ac:	d114      	bne.n	352d8 <_strtol_l.isra.0+0x60>
   352ae:	2c30      	cmp	r4, #48	; 0x30
   352b0:	d00a      	beq.n	352c8 <_strtol_l.isra.0+0x50>
   352b2:	e011      	b.n	352d8 <_strtol_l.isra.0+0x60>
   352b4:	002e      	movs	r6, r5
   352b6:	e7e6      	b.n	35286 <_strtol_l.isra.0+0xe>
   352b8:	9301      	str	r3, [sp, #4]
   352ba:	2c2b      	cmp	r4, #43	; 0x2b
   352bc:	d1f3      	bne.n	352a6 <_strtol_l.isra.0+0x2e>
   352be:	782c      	ldrb	r4, [r5, #0]
   352c0:	1cb5      	adds	r5, r6, #2
   352c2:	e7f0      	b.n	352a6 <_strtol_l.isra.0+0x2e>
   352c4:	2c30      	cmp	r4, #48	; 0x30
   352c6:	d12f      	bne.n	35328 <_strtol_l.isra.0+0xb0>
   352c8:	2220      	movs	r2, #32
   352ca:	782b      	ldrb	r3, [r5, #0]
   352cc:	4393      	bics	r3, r2
   352ce:	2b58      	cmp	r3, #88	; 0x58
   352d0:	d151      	bne.n	35376 <_strtol_l.isra.0+0xfe>
   352d2:	2710      	movs	r7, #16
   352d4:	786c      	ldrb	r4, [r5, #1]
   352d6:	3502      	adds	r5, #2
   352d8:	9b01      	ldr	r3, [sp, #4]
   352da:	4a29      	ldr	r2, [pc, #164]	; (35380 <_strtol_l.isra.0+0x108>)
   352dc:	0039      	movs	r1, r7
   352de:	189e      	adds	r6, r3, r2
   352e0:	0030      	movs	r0, r6
   352e2:	f7fd fddd 	bl	32ea0 <__aeabi_uidivmod>
   352e6:	0030      	movs	r0, r6
   352e8:	9104      	str	r1, [sp, #16]
   352ea:	0039      	movs	r1, r7
   352ec:	f7fd fd52 	bl	32d94 <__udivsi3>
   352f0:	2101      	movs	r1, #1
   352f2:	2300      	movs	r3, #0
   352f4:	4249      	negs	r1, r1
   352f6:	0002      	movs	r2, r0
   352f8:	468c      	mov	ip, r1
   352fa:	0018      	movs	r0, r3
   352fc:	0021      	movs	r1, r4
   352fe:	3930      	subs	r1, #48	; 0x30
   35300:	2909      	cmp	r1, #9
   35302:	d813      	bhi.n	3532c <_strtol_l.isra.0+0xb4>
   35304:	000c      	movs	r4, r1
   35306:	42a7      	cmp	r7, r4
   35308:	dd1c      	ble.n	35344 <_strtol_l.isra.0+0xcc>
   3530a:	1c59      	adds	r1, r3, #1
   3530c:	d009      	beq.n	35322 <_strtol_l.isra.0+0xaa>
   3530e:	4663      	mov	r3, ip
   35310:	4282      	cmp	r2, r0
   35312:	d306      	bcc.n	35322 <_strtol_l.isra.0+0xaa>
   35314:	d102      	bne.n	3531c <_strtol_l.isra.0+0xa4>
   35316:	9904      	ldr	r1, [sp, #16]
   35318:	42a1      	cmp	r1, r4
   3531a:	db02      	blt.n	35322 <_strtol_l.isra.0+0xaa>
   3531c:	2301      	movs	r3, #1
   3531e:	4378      	muls	r0, r7
   35320:	1820      	adds	r0, r4, r0
   35322:	782c      	ldrb	r4, [r5, #0]
   35324:	3501      	adds	r5, #1
   35326:	e7e9      	b.n	352fc <_strtol_l.isra.0+0x84>
   35328:	270a      	movs	r7, #10
   3532a:	e7d5      	b.n	352d8 <_strtol_l.isra.0+0x60>
   3532c:	0021      	movs	r1, r4
   3532e:	3941      	subs	r1, #65	; 0x41
   35330:	2919      	cmp	r1, #25
   35332:	d801      	bhi.n	35338 <_strtol_l.isra.0+0xc0>
   35334:	3c37      	subs	r4, #55	; 0x37
   35336:	e7e6      	b.n	35306 <_strtol_l.isra.0+0x8e>
   35338:	0021      	movs	r1, r4
   3533a:	3961      	subs	r1, #97	; 0x61
   3533c:	2919      	cmp	r1, #25
   3533e:	d801      	bhi.n	35344 <_strtol_l.isra.0+0xcc>
   35340:	3c57      	subs	r4, #87	; 0x57
   35342:	e7e0      	b.n	35306 <_strtol_l.isra.0+0x8e>
   35344:	1c5a      	adds	r2, r3, #1
   35346:	d108      	bne.n	3535a <_strtol_l.isra.0+0xe2>
   35348:	9a05      	ldr	r2, [sp, #20]
   3534a:	3323      	adds	r3, #35	; 0x23
   3534c:	6013      	str	r3, [r2, #0]
   3534e:	9b02      	ldr	r3, [sp, #8]
   35350:	0030      	movs	r0, r6
   35352:	2b00      	cmp	r3, #0
   35354:	d10b      	bne.n	3536e <_strtol_l.isra.0+0xf6>
   35356:	b007      	add	sp, #28
   35358:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3535a:	9a01      	ldr	r2, [sp, #4]
   3535c:	2a00      	cmp	r2, #0
   3535e:	d000      	beq.n	35362 <_strtol_l.isra.0+0xea>
   35360:	4240      	negs	r0, r0
   35362:	9a02      	ldr	r2, [sp, #8]
   35364:	2a00      	cmp	r2, #0
   35366:	d0f6      	beq.n	35356 <_strtol_l.isra.0+0xde>
   35368:	9a03      	ldr	r2, [sp, #12]
   3536a:	2b00      	cmp	r3, #0
   3536c:	d000      	beq.n	35370 <_strtol_l.isra.0+0xf8>
   3536e:	1e6a      	subs	r2, r5, #1
   35370:	9b02      	ldr	r3, [sp, #8]
   35372:	601a      	str	r2, [r3, #0]
   35374:	e7ef      	b.n	35356 <_strtol_l.isra.0+0xde>
   35376:	2430      	movs	r4, #48	; 0x30
   35378:	2f00      	cmp	r7, #0
   3537a:	d1ad      	bne.n	352d8 <_strtol_l.isra.0+0x60>
   3537c:	3708      	adds	r7, #8
   3537e:	e7ab      	b.n	352d8 <_strtol_l.isra.0+0x60>
   35380:	7fffffff 	.word	0x7fffffff

00035384 <strtol>:
   35384:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35386:	0013      	movs	r3, r2
   35388:	4a06      	ldr	r2, [pc, #24]	; (353a4 <strtol+0x20>)
   3538a:	0005      	movs	r5, r0
   3538c:	6810      	ldr	r0, [r2, #0]
   3538e:	6a04      	ldr	r4, [r0, #32]
   35390:	2c00      	cmp	r4, #0
   35392:	d100      	bne.n	35396 <strtol+0x12>
   35394:	4c04      	ldr	r4, [pc, #16]	; (353a8 <strtol+0x24>)
   35396:	000a      	movs	r2, r1
   35398:	9400      	str	r4, [sp, #0]
   3539a:	0029      	movs	r1, r5
   3539c:	f7ff ff6c 	bl	35278 <_strtol_l.isra.0>
   353a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   353a2:	46c0      	nop			; (mov r8, r8)
   353a4:	20000130 	.word	0x20000130
   353a8:	20000194 	.word	0x20000194

000353ac <_vsniprintf_r>:
   353ac:	b530      	push	{r4, r5, lr}
   353ae:	0014      	movs	r4, r2
   353b0:	b09b      	sub	sp, #108	; 0x6c
   353b2:	0005      	movs	r5, r0
   353b4:	001a      	movs	r2, r3
   353b6:	2c00      	cmp	r4, #0
   353b8:	da05      	bge.n	353c6 <_vsniprintf_r+0x1a>
   353ba:	238b      	movs	r3, #139	; 0x8b
   353bc:	6003      	str	r3, [r0, #0]
   353be:	2001      	movs	r0, #1
   353c0:	4240      	negs	r0, r0
   353c2:	b01b      	add	sp, #108	; 0x6c
   353c4:	bd30      	pop	{r4, r5, pc}
   353c6:	2382      	movs	r3, #130	; 0x82
   353c8:	4668      	mov	r0, sp
   353ca:	009b      	lsls	r3, r3, #2
   353cc:	8183      	strh	r3, [r0, #12]
   353ce:	2300      	movs	r3, #0
   353d0:	9100      	str	r1, [sp, #0]
   353d2:	9104      	str	r1, [sp, #16]
   353d4:	429c      	cmp	r4, r3
   353d6:	d000      	beq.n	353da <_vsniprintf_r+0x2e>
   353d8:	1e63      	subs	r3, r4, #1
   353da:	9302      	str	r3, [sp, #8]
   353dc:	9305      	str	r3, [sp, #20]
   353de:	2301      	movs	r3, #1
   353e0:	4669      	mov	r1, sp
   353e2:	425b      	negs	r3, r3
   353e4:	81cb      	strh	r3, [r1, #14]
   353e6:	0028      	movs	r0, r5
   353e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   353ea:	f000 fb63 	bl	35ab4 <_svfiprintf_r>
   353ee:	1c43      	adds	r3, r0, #1
   353f0:	da01      	bge.n	353f6 <_vsniprintf_r+0x4a>
   353f2:	238b      	movs	r3, #139	; 0x8b
   353f4:	602b      	str	r3, [r5, #0]
   353f6:	2c00      	cmp	r4, #0
   353f8:	d0e3      	beq.n	353c2 <_vsniprintf_r+0x16>
   353fa:	2300      	movs	r3, #0
   353fc:	9a00      	ldr	r2, [sp, #0]
   353fe:	7013      	strb	r3, [r2, #0]
   35400:	e7df      	b.n	353c2 <_vsniprintf_r+0x16>
	...

00035404 <vsniprintf>:
   35404:	b507      	push	{r0, r1, r2, lr}
   35406:	9300      	str	r3, [sp, #0]
   35408:	0013      	movs	r3, r2
   3540a:	000a      	movs	r2, r1
   3540c:	0001      	movs	r1, r0
   3540e:	4802      	ldr	r0, [pc, #8]	; (35418 <vsniprintf+0x14>)
   35410:	6800      	ldr	r0, [r0, #0]
   35412:	f7ff ffcb 	bl	353ac <_vsniprintf_r>
   35416:	bd0e      	pop	{r1, r2, r3, pc}
   35418:	20000130 	.word	0x20000130

0003541c <__swbuf_r>:
   3541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3541e:	0005      	movs	r5, r0
   35420:	000e      	movs	r6, r1
   35422:	0014      	movs	r4, r2
   35424:	2800      	cmp	r0, #0
   35426:	d004      	beq.n	35432 <__swbuf_r+0x16>
   35428:	6983      	ldr	r3, [r0, #24]
   3542a:	2b00      	cmp	r3, #0
   3542c:	d101      	bne.n	35432 <__swbuf_r+0x16>
   3542e:	f000 f9b9 	bl	357a4 <__sinit>
   35432:	4b22      	ldr	r3, [pc, #136]	; (354bc <__swbuf_r+0xa0>)
   35434:	429c      	cmp	r4, r3
   35436:	d12d      	bne.n	35494 <__swbuf_r+0x78>
   35438:	686c      	ldr	r4, [r5, #4]
   3543a:	69a3      	ldr	r3, [r4, #24]
   3543c:	60a3      	str	r3, [r4, #8]
   3543e:	89a3      	ldrh	r3, [r4, #12]
   35440:	071b      	lsls	r3, r3, #28
   35442:	d531      	bpl.n	354a8 <__swbuf_r+0x8c>
   35444:	6923      	ldr	r3, [r4, #16]
   35446:	2b00      	cmp	r3, #0
   35448:	d02e      	beq.n	354a8 <__swbuf_r+0x8c>
   3544a:	6823      	ldr	r3, [r4, #0]
   3544c:	6922      	ldr	r2, [r4, #16]
   3544e:	b2f7      	uxtb	r7, r6
   35450:	1a98      	subs	r0, r3, r2
   35452:	6963      	ldr	r3, [r4, #20]
   35454:	b2f6      	uxtb	r6, r6
   35456:	4298      	cmp	r0, r3
   35458:	db05      	blt.n	35466 <__swbuf_r+0x4a>
   3545a:	0021      	movs	r1, r4
   3545c:	0028      	movs	r0, r5
   3545e:	f000 f933 	bl	356c8 <_fflush_r>
   35462:	2800      	cmp	r0, #0
   35464:	d126      	bne.n	354b4 <__swbuf_r+0x98>
   35466:	68a3      	ldr	r3, [r4, #8]
   35468:	3001      	adds	r0, #1
   3546a:	3b01      	subs	r3, #1
   3546c:	60a3      	str	r3, [r4, #8]
   3546e:	6823      	ldr	r3, [r4, #0]
   35470:	1c5a      	adds	r2, r3, #1
   35472:	6022      	str	r2, [r4, #0]
   35474:	701f      	strb	r7, [r3, #0]
   35476:	6963      	ldr	r3, [r4, #20]
   35478:	4298      	cmp	r0, r3
   3547a:	d004      	beq.n	35486 <__swbuf_r+0x6a>
   3547c:	89a3      	ldrh	r3, [r4, #12]
   3547e:	07db      	lsls	r3, r3, #31
   35480:	d51a      	bpl.n	354b8 <__swbuf_r+0x9c>
   35482:	2e0a      	cmp	r6, #10
   35484:	d118      	bne.n	354b8 <__swbuf_r+0x9c>
   35486:	0021      	movs	r1, r4
   35488:	0028      	movs	r0, r5
   3548a:	f000 f91d 	bl	356c8 <_fflush_r>
   3548e:	2800      	cmp	r0, #0
   35490:	d012      	beq.n	354b8 <__swbuf_r+0x9c>
   35492:	e00f      	b.n	354b4 <__swbuf_r+0x98>
   35494:	4b0a      	ldr	r3, [pc, #40]	; (354c0 <__swbuf_r+0xa4>)
   35496:	429c      	cmp	r4, r3
   35498:	d101      	bne.n	3549e <__swbuf_r+0x82>
   3549a:	68ac      	ldr	r4, [r5, #8]
   3549c:	e7cd      	b.n	3543a <__swbuf_r+0x1e>
   3549e:	4b09      	ldr	r3, [pc, #36]	; (354c4 <__swbuf_r+0xa8>)
   354a0:	429c      	cmp	r4, r3
   354a2:	d1ca      	bne.n	3543a <__swbuf_r+0x1e>
   354a4:	68ec      	ldr	r4, [r5, #12]
   354a6:	e7c8      	b.n	3543a <__swbuf_r+0x1e>
   354a8:	0021      	movs	r1, r4
   354aa:	0028      	movs	r0, r5
   354ac:	f000 f80c 	bl	354c8 <__swsetup_r>
   354b0:	2800      	cmp	r0, #0
   354b2:	d0ca      	beq.n	3544a <__swbuf_r+0x2e>
   354b4:	2601      	movs	r6, #1
   354b6:	4276      	negs	r6, r6
   354b8:	0030      	movs	r0, r6
   354ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   354bc:	0003a718 	.word	0x0003a718
   354c0:	0003a738 	.word	0x0003a738
   354c4:	0003a6f8 	.word	0x0003a6f8

000354c8 <__swsetup_r>:
   354c8:	4b36      	ldr	r3, [pc, #216]	; (355a4 <__swsetup_r+0xdc>)
   354ca:	b570      	push	{r4, r5, r6, lr}
   354cc:	681d      	ldr	r5, [r3, #0]
   354ce:	0006      	movs	r6, r0
   354d0:	000c      	movs	r4, r1
   354d2:	2d00      	cmp	r5, #0
   354d4:	d005      	beq.n	354e2 <__swsetup_r+0x1a>
   354d6:	69ab      	ldr	r3, [r5, #24]
   354d8:	2b00      	cmp	r3, #0
   354da:	d102      	bne.n	354e2 <__swsetup_r+0x1a>
   354dc:	0028      	movs	r0, r5
   354de:	f000 f961 	bl	357a4 <__sinit>
   354e2:	4b31      	ldr	r3, [pc, #196]	; (355a8 <__swsetup_r+0xe0>)
   354e4:	429c      	cmp	r4, r3
   354e6:	d10f      	bne.n	35508 <__swsetup_r+0x40>
   354e8:	686c      	ldr	r4, [r5, #4]
   354ea:	230c      	movs	r3, #12
   354ec:	5ee2      	ldrsh	r2, [r4, r3]
   354ee:	b293      	uxth	r3, r2
   354f0:	0719      	lsls	r1, r3, #28
   354f2:	d42d      	bmi.n	35550 <__swsetup_r+0x88>
   354f4:	06d9      	lsls	r1, r3, #27
   354f6:	d411      	bmi.n	3551c <__swsetup_r+0x54>
   354f8:	2309      	movs	r3, #9
   354fa:	2001      	movs	r0, #1
   354fc:	6033      	str	r3, [r6, #0]
   354fe:	3337      	adds	r3, #55	; 0x37
   35500:	4313      	orrs	r3, r2
   35502:	81a3      	strh	r3, [r4, #12]
   35504:	4240      	negs	r0, r0
   35506:	bd70      	pop	{r4, r5, r6, pc}
   35508:	4b28      	ldr	r3, [pc, #160]	; (355ac <__swsetup_r+0xe4>)
   3550a:	429c      	cmp	r4, r3
   3550c:	d101      	bne.n	35512 <__swsetup_r+0x4a>
   3550e:	68ac      	ldr	r4, [r5, #8]
   35510:	e7eb      	b.n	354ea <__swsetup_r+0x22>
   35512:	4b27      	ldr	r3, [pc, #156]	; (355b0 <__swsetup_r+0xe8>)
   35514:	429c      	cmp	r4, r3
   35516:	d1e8      	bne.n	354ea <__swsetup_r+0x22>
   35518:	68ec      	ldr	r4, [r5, #12]
   3551a:	e7e6      	b.n	354ea <__swsetup_r+0x22>
   3551c:	075b      	lsls	r3, r3, #29
   3551e:	d513      	bpl.n	35548 <__swsetup_r+0x80>
   35520:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35522:	2900      	cmp	r1, #0
   35524:	d008      	beq.n	35538 <__swsetup_r+0x70>
   35526:	0023      	movs	r3, r4
   35528:	3344      	adds	r3, #68	; 0x44
   3552a:	4299      	cmp	r1, r3
   3552c:	d002      	beq.n	35534 <__swsetup_r+0x6c>
   3552e:	0030      	movs	r0, r6
   35530:	f7ff fc78 	bl	34e24 <_free_r>
   35534:	2300      	movs	r3, #0
   35536:	6363      	str	r3, [r4, #52]	; 0x34
   35538:	2224      	movs	r2, #36	; 0x24
   3553a:	89a3      	ldrh	r3, [r4, #12]
   3553c:	4393      	bics	r3, r2
   3553e:	81a3      	strh	r3, [r4, #12]
   35540:	2300      	movs	r3, #0
   35542:	6063      	str	r3, [r4, #4]
   35544:	6923      	ldr	r3, [r4, #16]
   35546:	6023      	str	r3, [r4, #0]
   35548:	2308      	movs	r3, #8
   3554a:	89a2      	ldrh	r2, [r4, #12]
   3554c:	4313      	orrs	r3, r2
   3554e:	81a3      	strh	r3, [r4, #12]
   35550:	6923      	ldr	r3, [r4, #16]
   35552:	2b00      	cmp	r3, #0
   35554:	d10b      	bne.n	3556e <__swsetup_r+0xa6>
   35556:	21a0      	movs	r1, #160	; 0xa0
   35558:	2280      	movs	r2, #128	; 0x80
   3555a:	89a3      	ldrh	r3, [r4, #12]
   3555c:	0089      	lsls	r1, r1, #2
   3555e:	0092      	lsls	r2, r2, #2
   35560:	400b      	ands	r3, r1
   35562:	4293      	cmp	r3, r2
   35564:	d003      	beq.n	3556e <__swsetup_r+0xa6>
   35566:	0021      	movs	r1, r4
   35568:	0030      	movs	r0, r6
   3556a:	f000 f9e9 	bl	35940 <__smakebuf_r>
   3556e:	2301      	movs	r3, #1
   35570:	89a2      	ldrh	r2, [r4, #12]
   35572:	4013      	ands	r3, r2
   35574:	d011      	beq.n	3559a <__swsetup_r+0xd2>
   35576:	2300      	movs	r3, #0
   35578:	60a3      	str	r3, [r4, #8]
   3557a:	6963      	ldr	r3, [r4, #20]
   3557c:	425b      	negs	r3, r3
   3557e:	61a3      	str	r3, [r4, #24]
   35580:	2000      	movs	r0, #0
   35582:	6923      	ldr	r3, [r4, #16]
   35584:	4283      	cmp	r3, r0
   35586:	d1be      	bne.n	35506 <__swsetup_r+0x3e>
   35588:	230c      	movs	r3, #12
   3558a:	5ee2      	ldrsh	r2, [r4, r3]
   3558c:	0613      	lsls	r3, r2, #24
   3558e:	d5ba      	bpl.n	35506 <__swsetup_r+0x3e>
   35590:	2340      	movs	r3, #64	; 0x40
   35592:	4313      	orrs	r3, r2
   35594:	81a3      	strh	r3, [r4, #12]
   35596:	3801      	subs	r0, #1
   35598:	e7b5      	b.n	35506 <__swsetup_r+0x3e>
   3559a:	0792      	lsls	r2, r2, #30
   3559c:	d400      	bmi.n	355a0 <__swsetup_r+0xd8>
   3559e:	6963      	ldr	r3, [r4, #20]
   355a0:	60a3      	str	r3, [r4, #8]
   355a2:	e7ed      	b.n	35580 <__swsetup_r+0xb8>
   355a4:	20000130 	.word	0x20000130
   355a8:	0003a718 	.word	0x0003a718
   355ac:	0003a738 	.word	0x0003a738
   355b0:	0003a6f8 	.word	0x0003a6f8

000355b4 <__sflush_r>:
   355b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   355b6:	898a      	ldrh	r2, [r1, #12]
   355b8:	0005      	movs	r5, r0
   355ba:	000c      	movs	r4, r1
   355bc:	0713      	lsls	r3, r2, #28
   355be:	d460      	bmi.n	35682 <__sflush_r+0xce>
   355c0:	684b      	ldr	r3, [r1, #4]
   355c2:	2b00      	cmp	r3, #0
   355c4:	dc04      	bgt.n	355d0 <__sflush_r+0x1c>
   355c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   355c8:	2b00      	cmp	r3, #0
   355ca:	dc01      	bgt.n	355d0 <__sflush_r+0x1c>
   355cc:	2000      	movs	r0, #0
   355ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   355d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   355d2:	2f00      	cmp	r7, #0
   355d4:	d0fa      	beq.n	355cc <__sflush_r+0x18>
   355d6:	2300      	movs	r3, #0
   355d8:	682e      	ldr	r6, [r5, #0]
   355da:	602b      	str	r3, [r5, #0]
   355dc:	2380      	movs	r3, #128	; 0x80
   355de:	015b      	lsls	r3, r3, #5
   355e0:	401a      	ands	r2, r3
   355e2:	d034      	beq.n	3564e <__sflush_r+0x9a>
   355e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   355e6:	89a3      	ldrh	r3, [r4, #12]
   355e8:	075b      	lsls	r3, r3, #29
   355ea:	d506      	bpl.n	355fa <__sflush_r+0x46>
   355ec:	6863      	ldr	r3, [r4, #4]
   355ee:	1ac0      	subs	r0, r0, r3
   355f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   355f2:	2b00      	cmp	r3, #0
   355f4:	d001      	beq.n	355fa <__sflush_r+0x46>
   355f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   355f8:	1ac0      	subs	r0, r0, r3
   355fa:	0002      	movs	r2, r0
   355fc:	6a21      	ldr	r1, [r4, #32]
   355fe:	2300      	movs	r3, #0
   35600:	0028      	movs	r0, r5
   35602:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35604:	47b8      	blx	r7
   35606:	89a1      	ldrh	r1, [r4, #12]
   35608:	1c43      	adds	r3, r0, #1
   3560a:	d106      	bne.n	3561a <__sflush_r+0x66>
   3560c:	682b      	ldr	r3, [r5, #0]
   3560e:	2b1d      	cmp	r3, #29
   35610:	d831      	bhi.n	35676 <__sflush_r+0xc2>
   35612:	4a2c      	ldr	r2, [pc, #176]	; (356c4 <__sflush_r+0x110>)
   35614:	40da      	lsrs	r2, r3
   35616:	07d3      	lsls	r3, r2, #31
   35618:	d52d      	bpl.n	35676 <__sflush_r+0xc2>
   3561a:	2300      	movs	r3, #0
   3561c:	6063      	str	r3, [r4, #4]
   3561e:	6923      	ldr	r3, [r4, #16]
   35620:	6023      	str	r3, [r4, #0]
   35622:	04cb      	lsls	r3, r1, #19
   35624:	d505      	bpl.n	35632 <__sflush_r+0x7e>
   35626:	1c43      	adds	r3, r0, #1
   35628:	d102      	bne.n	35630 <__sflush_r+0x7c>
   3562a:	682b      	ldr	r3, [r5, #0]
   3562c:	2b00      	cmp	r3, #0
   3562e:	d100      	bne.n	35632 <__sflush_r+0x7e>
   35630:	6560      	str	r0, [r4, #84]	; 0x54
   35632:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35634:	602e      	str	r6, [r5, #0]
   35636:	2900      	cmp	r1, #0
   35638:	d0c8      	beq.n	355cc <__sflush_r+0x18>
   3563a:	0023      	movs	r3, r4
   3563c:	3344      	adds	r3, #68	; 0x44
   3563e:	4299      	cmp	r1, r3
   35640:	d002      	beq.n	35648 <__sflush_r+0x94>
   35642:	0028      	movs	r0, r5
   35644:	f7ff fbee 	bl	34e24 <_free_r>
   35648:	2000      	movs	r0, #0
   3564a:	6360      	str	r0, [r4, #52]	; 0x34
   3564c:	e7bf      	b.n	355ce <__sflush_r+0x1a>
   3564e:	2301      	movs	r3, #1
   35650:	6a21      	ldr	r1, [r4, #32]
   35652:	0028      	movs	r0, r5
   35654:	47b8      	blx	r7
   35656:	1c43      	adds	r3, r0, #1
   35658:	d1c5      	bne.n	355e6 <__sflush_r+0x32>
   3565a:	682b      	ldr	r3, [r5, #0]
   3565c:	2b00      	cmp	r3, #0
   3565e:	d0c2      	beq.n	355e6 <__sflush_r+0x32>
   35660:	2b1d      	cmp	r3, #29
   35662:	d001      	beq.n	35668 <__sflush_r+0xb4>
   35664:	2b16      	cmp	r3, #22
   35666:	d101      	bne.n	3566c <__sflush_r+0xb8>
   35668:	602e      	str	r6, [r5, #0]
   3566a:	e7af      	b.n	355cc <__sflush_r+0x18>
   3566c:	2340      	movs	r3, #64	; 0x40
   3566e:	89a2      	ldrh	r2, [r4, #12]
   35670:	4313      	orrs	r3, r2
   35672:	81a3      	strh	r3, [r4, #12]
   35674:	e7ab      	b.n	355ce <__sflush_r+0x1a>
   35676:	2340      	movs	r3, #64	; 0x40
   35678:	430b      	orrs	r3, r1
   3567a:	2001      	movs	r0, #1
   3567c:	81a3      	strh	r3, [r4, #12]
   3567e:	4240      	negs	r0, r0
   35680:	e7a5      	b.n	355ce <__sflush_r+0x1a>
   35682:	690f      	ldr	r7, [r1, #16]
   35684:	2f00      	cmp	r7, #0
   35686:	d0a1      	beq.n	355cc <__sflush_r+0x18>
   35688:	680b      	ldr	r3, [r1, #0]
   3568a:	600f      	str	r7, [r1, #0]
   3568c:	1bdb      	subs	r3, r3, r7
   3568e:	9301      	str	r3, [sp, #4]
   35690:	2300      	movs	r3, #0
   35692:	0792      	lsls	r2, r2, #30
   35694:	d100      	bne.n	35698 <__sflush_r+0xe4>
   35696:	694b      	ldr	r3, [r1, #20]
   35698:	60a3      	str	r3, [r4, #8]
   3569a:	9b01      	ldr	r3, [sp, #4]
   3569c:	2b00      	cmp	r3, #0
   3569e:	dc00      	bgt.n	356a2 <__sflush_r+0xee>
   356a0:	e794      	b.n	355cc <__sflush_r+0x18>
   356a2:	9b01      	ldr	r3, [sp, #4]
   356a4:	003a      	movs	r2, r7
   356a6:	6a21      	ldr	r1, [r4, #32]
   356a8:	0028      	movs	r0, r5
   356aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   356ac:	47b0      	blx	r6
   356ae:	2800      	cmp	r0, #0
   356b0:	dc03      	bgt.n	356ba <__sflush_r+0x106>
   356b2:	2340      	movs	r3, #64	; 0x40
   356b4:	89a2      	ldrh	r2, [r4, #12]
   356b6:	4313      	orrs	r3, r2
   356b8:	e7df      	b.n	3567a <__sflush_r+0xc6>
   356ba:	9b01      	ldr	r3, [sp, #4]
   356bc:	183f      	adds	r7, r7, r0
   356be:	1a1b      	subs	r3, r3, r0
   356c0:	9301      	str	r3, [sp, #4]
   356c2:	e7ea      	b.n	3569a <__sflush_r+0xe6>
   356c4:	20400001 	.word	0x20400001

000356c8 <_fflush_r>:
   356c8:	690b      	ldr	r3, [r1, #16]
   356ca:	b570      	push	{r4, r5, r6, lr}
   356cc:	0005      	movs	r5, r0
   356ce:	000c      	movs	r4, r1
   356d0:	2b00      	cmp	r3, #0
   356d2:	d101      	bne.n	356d8 <_fflush_r+0x10>
   356d4:	2000      	movs	r0, #0
   356d6:	bd70      	pop	{r4, r5, r6, pc}
   356d8:	2800      	cmp	r0, #0
   356da:	d004      	beq.n	356e6 <_fflush_r+0x1e>
   356dc:	6983      	ldr	r3, [r0, #24]
   356de:	2b00      	cmp	r3, #0
   356e0:	d101      	bne.n	356e6 <_fflush_r+0x1e>
   356e2:	f000 f85f 	bl	357a4 <__sinit>
   356e6:	4b0b      	ldr	r3, [pc, #44]	; (35714 <_fflush_r+0x4c>)
   356e8:	429c      	cmp	r4, r3
   356ea:	d109      	bne.n	35700 <_fflush_r+0x38>
   356ec:	686c      	ldr	r4, [r5, #4]
   356ee:	220c      	movs	r2, #12
   356f0:	5ea3      	ldrsh	r3, [r4, r2]
   356f2:	2b00      	cmp	r3, #0
   356f4:	d0ee      	beq.n	356d4 <_fflush_r+0xc>
   356f6:	0021      	movs	r1, r4
   356f8:	0028      	movs	r0, r5
   356fa:	f7ff ff5b 	bl	355b4 <__sflush_r>
   356fe:	e7ea      	b.n	356d6 <_fflush_r+0xe>
   35700:	4b05      	ldr	r3, [pc, #20]	; (35718 <_fflush_r+0x50>)
   35702:	429c      	cmp	r4, r3
   35704:	d101      	bne.n	3570a <_fflush_r+0x42>
   35706:	68ac      	ldr	r4, [r5, #8]
   35708:	e7f1      	b.n	356ee <_fflush_r+0x26>
   3570a:	4b04      	ldr	r3, [pc, #16]	; (3571c <_fflush_r+0x54>)
   3570c:	429c      	cmp	r4, r3
   3570e:	d1ee      	bne.n	356ee <_fflush_r+0x26>
   35710:	68ec      	ldr	r4, [r5, #12]
   35712:	e7ec      	b.n	356ee <_fflush_r+0x26>
   35714:	0003a718 	.word	0x0003a718
   35718:	0003a738 	.word	0x0003a738
   3571c:	0003a6f8 	.word	0x0003a6f8

00035720 <_cleanup_r>:
   35720:	b510      	push	{r4, lr}
   35722:	4902      	ldr	r1, [pc, #8]	; (3572c <_cleanup_r+0xc>)
   35724:	f000 f8b2 	bl	3588c <_fwalk_reent>
   35728:	bd10      	pop	{r4, pc}
   3572a:	46c0      	nop			; (mov r8, r8)
   3572c:	000356c9 	.word	0x000356c9

00035730 <std.isra.0>:
   35730:	2300      	movs	r3, #0
   35732:	b510      	push	{r4, lr}
   35734:	0004      	movs	r4, r0
   35736:	6003      	str	r3, [r0, #0]
   35738:	6043      	str	r3, [r0, #4]
   3573a:	6083      	str	r3, [r0, #8]
   3573c:	8181      	strh	r1, [r0, #12]
   3573e:	6643      	str	r3, [r0, #100]	; 0x64
   35740:	81c2      	strh	r2, [r0, #14]
   35742:	6103      	str	r3, [r0, #16]
   35744:	6143      	str	r3, [r0, #20]
   35746:	6183      	str	r3, [r0, #24]
   35748:	0019      	movs	r1, r3
   3574a:	2208      	movs	r2, #8
   3574c:	305c      	adds	r0, #92	; 0x5c
   3574e:	f7ff fb60 	bl	34e12 <memset>
   35752:	4b05      	ldr	r3, [pc, #20]	; (35768 <std.isra.0+0x38>)
   35754:	6224      	str	r4, [r4, #32]
   35756:	6263      	str	r3, [r4, #36]	; 0x24
   35758:	4b04      	ldr	r3, [pc, #16]	; (3576c <std.isra.0+0x3c>)
   3575a:	62a3      	str	r3, [r4, #40]	; 0x28
   3575c:	4b04      	ldr	r3, [pc, #16]	; (35770 <std.isra.0+0x40>)
   3575e:	62e3      	str	r3, [r4, #44]	; 0x2c
   35760:	4b04      	ldr	r3, [pc, #16]	; (35774 <std.isra.0+0x44>)
   35762:	6323      	str	r3, [r4, #48]	; 0x30
   35764:	bd10      	pop	{r4, pc}
   35766:	46c0      	nop			; (mov r8, r8)
   35768:	00035fcd 	.word	0x00035fcd
   3576c:	00035ff5 	.word	0x00035ff5
   35770:	0003602d 	.word	0x0003602d
   35774:	00036059 	.word	0x00036059

00035778 <__sfmoreglue>:
   35778:	b570      	push	{r4, r5, r6, lr}
   3577a:	2568      	movs	r5, #104	; 0x68
   3577c:	1e4a      	subs	r2, r1, #1
   3577e:	4355      	muls	r5, r2
   35780:	000e      	movs	r6, r1
   35782:	0029      	movs	r1, r5
   35784:	3174      	adds	r1, #116	; 0x74
   35786:	f7ff fb97 	bl	34eb8 <_malloc_r>
   3578a:	1e04      	subs	r4, r0, #0
   3578c:	d008      	beq.n	357a0 <__sfmoreglue+0x28>
   3578e:	2100      	movs	r1, #0
   35790:	002a      	movs	r2, r5
   35792:	6001      	str	r1, [r0, #0]
   35794:	6046      	str	r6, [r0, #4]
   35796:	300c      	adds	r0, #12
   35798:	60a0      	str	r0, [r4, #8]
   3579a:	3268      	adds	r2, #104	; 0x68
   3579c:	f7ff fb39 	bl	34e12 <memset>
   357a0:	0020      	movs	r0, r4
   357a2:	bd70      	pop	{r4, r5, r6, pc}

000357a4 <__sinit>:
   357a4:	6983      	ldr	r3, [r0, #24]
   357a6:	b513      	push	{r0, r1, r4, lr}
   357a8:	0004      	movs	r4, r0
   357aa:	2b00      	cmp	r3, #0
   357ac:	d128      	bne.n	35800 <__sinit+0x5c>
   357ae:	6483      	str	r3, [r0, #72]	; 0x48
   357b0:	64c3      	str	r3, [r0, #76]	; 0x4c
   357b2:	6503      	str	r3, [r0, #80]	; 0x50
   357b4:	4b13      	ldr	r3, [pc, #76]	; (35804 <__sinit+0x60>)
   357b6:	4a14      	ldr	r2, [pc, #80]	; (35808 <__sinit+0x64>)
   357b8:	681b      	ldr	r3, [r3, #0]
   357ba:	6282      	str	r2, [r0, #40]	; 0x28
   357bc:	9301      	str	r3, [sp, #4]
   357be:	4298      	cmp	r0, r3
   357c0:	d101      	bne.n	357c6 <__sinit+0x22>
   357c2:	2301      	movs	r3, #1
   357c4:	6183      	str	r3, [r0, #24]
   357c6:	0020      	movs	r0, r4
   357c8:	f000 f820 	bl	3580c <__sfp>
   357cc:	6060      	str	r0, [r4, #4]
   357ce:	0020      	movs	r0, r4
   357d0:	f000 f81c 	bl	3580c <__sfp>
   357d4:	60a0      	str	r0, [r4, #8]
   357d6:	0020      	movs	r0, r4
   357d8:	f000 f818 	bl	3580c <__sfp>
   357dc:	2200      	movs	r2, #0
   357de:	60e0      	str	r0, [r4, #12]
   357e0:	2104      	movs	r1, #4
   357e2:	6860      	ldr	r0, [r4, #4]
   357e4:	f7ff ffa4 	bl	35730 <std.isra.0>
   357e8:	2201      	movs	r2, #1
   357ea:	2109      	movs	r1, #9
   357ec:	68a0      	ldr	r0, [r4, #8]
   357ee:	f7ff ff9f 	bl	35730 <std.isra.0>
   357f2:	2202      	movs	r2, #2
   357f4:	2112      	movs	r1, #18
   357f6:	68e0      	ldr	r0, [r4, #12]
   357f8:	f7ff ff9a 	bl	35730 <std.isra.0>
   357fc:	2301      	movs	r3, #1
   357fe:	61a3      	str	r3, [r4, #24]
   35800:	bd13      	pop	{r0, r1, r4, pc}
   35802:	46c0      	nop			; (mov r8, r8)
   35804:	0003a6f4 	.word	0x0003a6f4
   35808:	00035721 	.word	0x00035721

0003580c <__sfp>:
   3580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3580e:	4b1e      	ldr	r3, [pc, #120]	; (35888 <__sfp+0x7c>)
   35810:	0007      	movs	r7, r0
   35812:	681e      	ldr	r6, [r3, #0]
   35814:	69b3      	ldr	r3, [r6, #24]
   35816:	2b00      	cmp	r3, #0
   35818:	d102      	bne.n	35820 <__sfp+0x14>
   3581a:	0030      	movs	r0, r6
   3581c:	f7ff ffc2 	bl	357a4 <__sinit>
   35820:	3648      	adds	r6, #72	; 0x48
   35822:	68b4      	ldr	r4, [r6, #8]
   35824:	6873      	ldr	r3, [r6, #4]
   35826:	3b01      	subs	r3, #1
   35828:	d504      	bpl.n	35834 <__sfp+0x28>
   3582a:	6833      	ldr	r3, [r6, #0]
   3582c:	2b00      	cmp	r3, #0
   3582e:	d007      	beq.n	35840 <__sfp+0x34>
   35830:	6836      	ldr	r6, [r6, #0]
   35832:	e7f6      	b.n	35822 <__sfp+0x16>
   35834:	220c      	movs	r2, #12
   35836:	5ea5      	ldrsh	r5, [r4, r2]
   35838:	2d00      	cmp	r5, #0
   3583a:	d00d      	beq.n	35858 <__sfp+0x4c>
   3583c:	3468      	adds	r4, #104	; 0x68
   3583e:	e7f2      	b.n	35826 <__sfp+0x1a>
   35840:	2104      	movs	r1, #4
   35842:	0038      	movs	r0, r7
   35844:	f7ff ff98 	bl	35778 <__sfmoreglue>
   35848:	6030      	str	r0, [r6, #0]
   3584a:	2800      	cmp	r0, #0
   3584c:	d1f0      	bne.n	35830 <__sfp+0x24>
   3584e:	230c      	movs	r3, #12
   35850:	0004      	movs	r4, r0
   35852:	603b      	str	r3, [r7, #0]
   35854:	0020      	movs	r0, r4
   35856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35858:	2301      	movs	r3, #1
   3585a:	0020      	movs	r0, r4
   3585c:	425b      	negs	r3, r3
   3585e:	81e3      	strh	r3, [r4, #14]
   35860:	3302      	adds	r3, #2
   35862:	81a3      	strh	r3, [r4, #12]
   35864:	6665      	str	r5, [r4, #100]	; 0x64
   35866:	6025      	str	r5, [r4, #0]
   35868:	60a5      	str	r5, [r4, #8]
   3586a:	6065      	str	r5, [r4, #4]
   3586c:	6125      	str	r5, [r4, #16]
   3586e:	6165      	str	r5, [r4, #20]
   35870:	61a5      	str	r5, [r4, #24]
   35872:	2208      	movs	r2, #8
   35874:	0029      	movs	r1, r5
   35876:	305c      	adds	r0, #92	; 0x5c
   35878:	f7ff facb 	bl	34e12 <memset>
   3587c:	6365      	str	r5, [r4, #52]	; 0x34
   3587e:	63a5      	str	r5, [r4, #56]	; 0x38
   35880:	64a5      	str	r5, [r4, #72]	; 0x48
   35882:	64e5      	str	r5, [r4, #76]	; 0x4c
   35884:	e7e6      	b.n	35854 <__sfp+0x48>
   35886:	46c0      	nop			; (mov r8, r8)
   35888:	0003a6f4 	.word	0x0003a6f4

0003588c <_fwalk_reent>:
   3588c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3588e:	0004      	movs	r4, r0
   35890:	0007      	movs	r7, r0
   35892:	2600      	movs	r6, #0
   35894:	9101      	str	r1, [sp, #4]
   35896:	3448      	adds	r4, #72	; 0x48
   35898:	2c00      	cmp	r4, #0
   3589a:	d101      	bne.n	358a0 <_fwalk_reent+0x14>
   3589c:	0030      	movs	r0, r6
   3589e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   358a0:	6863      	ldr	r3, [r4, #4]
   358a2:	68a5      	ldr	r5, [r4, #8]
   358a4:	9300      	str	r3, [sp, #0]
   358a6:	9b00      	ldr	r3, [sp, #0]
   358a8:	3b01      	subs	r3, #1
   358aa:	9300      	str	r3, [sp, #0]
   358ac:	d501      	bpl.n	358b2 <_fwalk_reent+0x26>
   358ae:	6824      	ldr	r4, [r4, #0]
   358b0:	e7f2      	b.n	35898 <_fwalk_reent+0xc>
   358b2:	89ab      	ldrh	r3, [r5, #12]
   358b4:	2b01      	cmp	r3, #1
   358b6:	d908      	bls.n	358ca <_fwalk_reent+0x3e>
   358b8:	220e      	movs	r2, #14
   358ba:	5eab      	ldrsh	r3, [r5, r2]
   358bc:	3301      	adds	r3, #1
   358be:	d004      	beq.n	358ca <_fwalk_reent+0x3e>
   358c0:	0029      	movs	r1, r5
   358c2:	0038      	movs	r0, r7
   358c4:	9b01      	ldr	r3, [sp, #4]
   358c6:	4798      	blx	r3
   358c8:	4306      	orrs	r6, r0
   358ca:	3568      	adds	r5, #104	; 0x68
   358cc:	e7eb      	b.n	358a6 <_fwalk_reent+0x1a>

000358ce <__locale_ctype_ptr_l>:
   358ce:	30ec      	adds	r0, #236	; 0xec
   358d0:	6800      	ldr	r0, [r0, #0]
   358d2:	4770      	bx	lr

000358d4 <__locale_ctype_ptr>:
   358d4:	4b04      	ldr	r3, [pc, #16]	; (358e8 <__locale_ctype_ptr+0x14>)
   358d6:	681b      	ldr	r3, [r3, #0]
   358d8:	6a1b      	ldr	r3, [r3, #32]
   358da:	2b00      	cmp	r3, #0
   358dc:	d100      	bne.n	358e0 <__locale_ctype_ptr+0xc>
   358de:	4b03      	ldr	r3, [pc, #12]	; (358ec <__locale_ctype_ptr+0x18>)
   358e0:	33ec      	adds	r3, #236	; 0xec
   358e2:	6818      	ldr	r0, [r3, #0]
   358e4:	4770      	bx	lr
   358e6:	46c0      	nop			; (mov r8, r8)
   358e8:	20000130 	.word	0x20000130
   358ec:	20000194 	.word	0x20000194

000358f0 <__swhatbuf_r>:
   358f0:	b570      	push	{r4, r5, r6, lr}
   358f2:	000e      	movs	r6, r1
   358f4:	001d      	movs	r5, r3
   358f6:	230e      	movs	r3, #14
   358f8:	5ec9      	ldrsh	r1, [r1, r3]
   358fa:	b090      	sub	sp, #64	; 0x40
   358fc:	0014      	movs	r4, r2
   358fe:	2900      	cmp	r1, #0
   35900:	da07      	bge.n	35912 <__swhatbuf_r+0x22>
   35902:	2300      	movs	r3, #0
   35904:	602b      	str	r3, [r5, #0]
   35906:	89b3      	ldrh	r3, [r6, #12]
   35908:	061b      	lsls	r3, r3, #24
   3590a:	d411      	bmi.n	35930 <__swhatbuf_r+0x40>
   3590c:	2380      	movs	r3, #128	; 0x80
   3590e:	00db      	lsls	r3, r3, #3
   35910:	e00f      	b.n	35932 <__swhatbuf_r+0x42>
   35912:	aa01      	add	r2, sp, #4
   35914:	f000 fbe6 	bl	360e4 <_fstat_r>
   35918:	2800      	cmp	r0, #0
   3591a:	dbf2      	blt.n	35902 <__swhatbuf_r+0x12>
   3591c:	22f0      	movs	r2, #240	; 0xf0
   3591e:	9b02      	ldr	r3, [sp, #8]
   35920:	0212      	lsls	r2, r2, #8
   35922:	4013      	ands	r3, r2
   35924:	4a05      	ldr	r2, [pc, #20]	; (3593c <__swhatbuf_r+0x4c>)
   35926:	189b      	adds	r3, r3, r2
   35928:	425a      	negs	r2, r3
   3592a:	4153      	adcs	r3, r2
   3592c:	602b      	str	r3, [r5, #0]
   3592e:	e7ed      	b.n	3590c <__swhatbuf_r+0x1c>
   35930:	2340      	movs	r3, #64	; 0x40
   35932:	2000      	movs	r0, #0
   35934:	6023      	str	r3, [r4, #0]
   35936:	b010      	add	sp, #64	; 0x40
   35938:	bd70      	pop	{r4, r5, r6, pc}
   3593a:	46c0      	nop			; (mov r8, r8)
   3593c:	ffffe000 	.word	0xffffe000

00035940 <__smakebuf_r>:
   35940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35942:	2602      	movs	r6, #2
   35944:	898b      	ldrh	r3, [r1, #12]
   35946:	0005      	movs	r5, r0
   35948:	000c      	movs	r4, r1
   3594a:	4233      	tst	r3, r6
   3594c:	d006      	beq.n	3595c <__smakebuf_r+0x1c>
   3594e:	0023      	movs	r3, r4
   35950:	3347      	adds	r3, #71	; 0x47
   35952:	6023      	str	r3, [r4, #0]
   35954:	6123      	str	r3, [r4, #16]
   35956:	2301      	movs	r3, #1
   35958:	6163      	str	r3, [r4, #20]
   3595a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   3595c:	ab01      	add	r3, sp, #4
   3595e:	466a      	mov	r2, sp
   35960:	f7ff ffc6 	bl	358f0 <__swhatbuf_r>
   35964:	9900      	ldr	r1, [sp, #0]
   35966:	0007      	movs	r7, r0
   35968:	0028      	movs	r0, r5
   3596a:	f7ff faa5 	bl	34eb8 <_malloc_r>
   3596e:	2800      	cmp	r0, #0
   35970:	d108      	bne.n	35984 <__smakebuf_r+0x44>
   35972:	220c      	movs	r2, #12
   35974:	5ea3      	ldrsh	r3, [r4, r2]
   35976:	059a      	lsls	r2, r3, #22
   35978:	d4ef      	bmi.n	3595a <__smakebuf_r+0x1a>
   3597a:	2203      	movs	r2, #3
   3597c:	4393      	bics	r3, r2
   3597e:	431e      	orrs	r6, r3
   35980:	81a6      	strh	r6, [r4, #12]
   35982:	e7e4      	b.n	3594e <__smakebuf_r+0xe>
   35984:	4b0f      	ldr	r3, [pc, #60]	; (359c4 <__smakebuf_r+0x84>)
   35986:	62ab      	str	r3, [r5, #40]	; 0x28
   35988:	2380      	movs	r3, #128	; 0x80
   3598a:	89a2      	ldrh	r2, [r4, #12]
   3598c:	6020      	str	r0, [r4, #0]
   3598e:	4313      	orrs	r3, r2
   35990:	81a3      	strh	r3, [r4, #12]
   35992:	9b00      	ldr	r3, [sp, #0]
   35994:	6120      	str	r0, [r4, #16]
   35996:	6163      	str	r3, [r4, #20]
   35998:	9b01      	ldr	r3, [sp, #4]
   3599a:	2b00      	cmp	r3, #0
   3599c:	d00d      	beq.n	359ba <__smakebuf_r+0x7a>
   3599e:	230e      	movs	r3, #14
   359a0:	5ee1      	ldrsh	r1, [r4, r3]
   359a2:	0028      	movs	r0, r5
   359a4:	f000 fbb0 	bl	36108 <_isatty_r>
   359a8:	2800      	cmp	r0, #0
   359aa:	d006      	beq.n	359ba <__smakebuf_r+0x7a>
   359ac:	2203      	movs	r2, #3
   359ae:	89a3      	ldrh	r3, [r4, #12]
   359b0:	4393      	bics	r3, r2
   359b2:	001a      	movs	r2, r3
   359b4:	2301      	movs	r3, #1
   359b6:	4313      	orrs	r3, r2
   359b8:	81a3      	strh	r3, [r4, #12]
   359ba:	89a0      	ldrh	r0, [r4, #12]
   359bc:	4338      	orrs	r0, r7
   359be:	81a0      	strh	r0, [r4, #12]
   359c0:	e7cb      	b.n	3595a <__smakebuf_r+0x1a>
   359c2:	46c0      	nop			; (mov r8, r8)
   359c4:	00035721 	.word	0x00035721

000359c8 <__ascii_mbtowc>:
   359c8:	b082      	sub	sp, #8
   359ca:	2900      	cmp	r1, #0
   359cc:	d100      	bne.n	359d0 <__ascii_mbtowc+0x8>
   359ce:	a901      	add	r1, sp, #4
   359d0:	1e10      	subs	r0, r2, #0
   359d2:	d006      	beq.n	359e2 <__ascii_mbtowc+0x1a>
   359d4:	2b00      	cmp	r3, #0
   359d6:	d006      	beq.n	359e6 <__ascii_mbtowc+0x1e>
   359d8:	7813      	ldrb	r3, [r2, #0]
   359da:	600b      	str	r3, [r1, #0]
   359dc:	7810      	ldrb	r0, [r2, #0]
   359de:	1e43      	subs	r3, r0, #1
   359e0:	4198      	sbcs	r0, r3
   359e2:	b002      	add	sp, #8
   359e4:	4770      	bx	lr
   359e6:	2002      	movs	r0, #2
   359e8:	4240      	negs	r0, r0
   359ea:	e7fa      	b.n	359e2 <__ascii_mbtowc+0x1a>

000359ec <__malloc_lock>:
   359ec:	4770      	bx	lr

000359ee <__malloc_unlock>:
   359ee:	4770      	bx	lr

000359f0 <__ssputs_r>:
   359f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   359f2:	688e      	ldr	r6, [r1, #8]
   359f4:	b085      	sub	sp, #20
   359f6:	0007      	movs	r7, r0
   359f8:	000c      	movs	r4, r1
   359fa:	9203      	str	r2, [sp, #12]
   359fc:	9301      	str	r3, [sp, #4]
   359fe:	429e      	cmp	r6, r3
   35a00:	d839      	bhi.n	35a76 <__ssputs_r+0x86>
   35a02:	2390      	movs	r3, #144	; 0x90
   35a04:	898a      	ldrh	r2, [r1, #12]
   35a06:	00db      	lsls	r3, r3, #3
   35a08:	421a      	tst	r2, r3
   35a0a:	d034      	beq.n	35a76 <__ssputs_r+0x86>
   35a0c:	2503      	movs	r5, #3
   35a0e:	6909      	ldr	r1, [r1, #16]
   35a10:	6823      	ldr	r3, [r4, #0]
   35a12:	1a5b      	subs	r3, r3, r1
   35a14:	9302      	str	r3, [sp, #8]
   35a16:	6963      	ldr	r3, [r4, #20]
   35a18:	9802      	ldr	r0, [sp, #8]
   35a1a:	435d      	muls	r5, r3
   35a1c:	0feb      	lsrs	r3, r5, #31
   35a1e:	195d      	adds	r5, r3, r5
   35a20:	9b01      	ldr	r3, [sp, #4]
   35a22:	106d      	asrs	r5, r5, #1
   35a24:	3301      	adds	r3, #1
   35a26:	181b      	adds	r3, r3, r0
   35a28:	42ab      	cmp	r3, r5
   35a2a:	d900      	bls.n	35a2e <__ssputs_r+0x3e>
   35a2c:	001d      	movs	r5, r3
   35a2e:	0553      	lsls	r3, r2, #21
   35a30:	d532      	bpl.n	35a98 <__ssputs_r+0xa8>
   35a32:	0029      	movs	r1, r5
   35a34:	0038      	movs	r0, r7
   35a36:	f7ff fa3f 	bl	34eb8 <_malloc_r>
   35a3a:	1e06      	subs	r6, r0, #0
   35a3c:	d109      	bne.n	35a52 <__ssputs_r+0x62>
   35a3e:	230c      	movs	r3, #12
   35a40:	603b      	str	r3, [r7, #0]
   35a42:	2340      	movs	r3, #64	; 0x40
   35a44:	2001      	movs	r0, #1
   35a46:	89a2      	ldrh	r2, [r4, #12]
   35a48:	4240      	negs	r0, r0
   35a4a:	4313      	orrs	r3, r2
   35a4c:	81a3      	strh	r3, [r4, #12]
   35a4e:	b005      	add	sp, #20
   35a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35a52:	9a02      	ldr	r2, [sp, #8]
   35a54:	6921      	ldr	r1, [r4, #16]
   35a56:	f7ff f9c1 	bl	34ddc <memcpy>
   35a5a:	89a3      	ldrh	r3, [r4, #12]
   35a5c:	4a14      	ldr	r2, [pc, #80]	; (35ab0 <__ssputs_r+0xc0>)
   35a5e:	401a      	ands	r2, r3
   35a60:	2380      	movs	r3, #128	; 0x80
   35a62:	4313      	orrs	r3, r2
   35a64:	81a3      	strh	r3, [r4, #12]
   35a66:	9b02      	ldr	r3, [sp, #8]
   35a68:	6126      	str	r6, [r4, #16]
   35a6a:	18f6      	adds	r6, r6, r3
   35a6c:	6026      	str	r6, [r4, #0]
   35a6e:	6165      	str	r5, [r4, #20]
   35a70:	9e01      	ldr	r6, [sp, #4]
   35a72:	1aed      	subs	r5, r5, r3
   35a74:	60a5      	str	r5, [r4, #8]
   35a76:	9b01      	ldr	r3, [sp, #4]
   35a78:	42b3      	cmp	r3, r6
   35a7a:	d200      	bcs.n	35a7e <__ssputs_r+0x8e>
   35a7c:	001e      	movs	r6, r3
   35a7e:	0032      	movs	r2, r6
   35a80:	9903      	ldr	r1, [sp, #12]
   35a82:	6820      	ldr	r0, [r4, #0]
   35a84:	f7ff f9b3 	bl	34dee <memmove>
   35a88:	68a3      	ldr	r3, [r4, #8]
   35a8a:	2000      	movs	r0, #0
   35a8c:	1b9b      	subs	r3, r3, r6
   35a8e:	60a3      	str	r3, [r4, #8]
   35a90:	6823      	ldr	r3, [r4, #0]
   35a92:	199e      	adds	r6, r3, r6
   35a94:	6026      	str	r6, [r4, #0]
   35a96:	e7da      	b.n	35a4e <__ssputs_r+0x5e>
   35a98:	002a      	movs	r2, r5
   35a9a:	0038      	movs	r0, r7
   35a9c:	f000 fb65 	bl	3616a <_realloc_r>
   35aa0:	1e06      	subs	r6, r0, #0
   35aa2:	d1e0      	bne.n	35a66 <__ssputs_r+0x76>
   35aa4:	6921      	ldr	r1, [r4, #16]
   35aa6:	0038      	movs	r0, r7
   35aa8:	f7ff f9bc 	bl	34e24 <_free_r>
   35aac:	e7c7      	b.n	35a3e <__ssputs_r+0x4e>
   35aae:	46c0      	nop			; (mov r8, r8)
   35ab0:	fffffb7f 	.word	0xfffffb7f

00035ab4 <_svfiprintf_r>:
   35ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35ab6:	b09f      	sub	sp, #124	; 0x7c
   35ab8:	9002      	str	r0, [sp, #8]
   35aba:	9305      	str	r3, [sp, #20]
   35abc:	898b      	ldrh	r3, [r1, #12]
   35abe:	000f      	movs	r7, r1
   35ac0:	0016      	movs	r6, r2
   35ac2:	061b      	lsls	r3, r3, #24
   35ac4:	d511      	bpl.n	35aea <_svfiprintf_r+0x36>
   35ac6:	690b      	ldr	r3, [r1, #16]
   35ac8:	2b00      	cmp	r3, #0
   35aca:	d10e      	bne.n	35aea <_svfiprintf_r+0x36>
   35acc:	2140      	movs	r1, #64	; 0x40
   35ace:	f7ff f9f3 	bl	34eb8 <_malloc_r>
   35ad2:	6038      	str	r0, [r7, #0]
   35ad4:	6138      	str	r0, [r7, #16]
   35ad6:	2800      	cmp	r0, #0
   35ad8:	d105      	bne.n	35ae6 <_svfiprintf_r+0x32>
   35ada:	230c      	movs	r3, #12
   35adc:	9a02      	ldr	r2, [sp, #8]
   35ade:	3801      	subs	r0, #1
   35ae0:	6013      	str	r3, [r2, #0]
   35ae2:	b01f      	add	sp, #124	; 0x7c
   35ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35ae6:	2340      	movs	r3, #64	; 0x40
   35ae8:	617b      	str	r3, [r7, #20]
   35aea:	2300      	movs	r3, #0
   35aec:	ad06      	add	r5, sp, #24
   35aee:	616b      	str	r3, [r5, #20]
   35af0:	3320      	adds	r3, #32
   35af2:	766b      	strb	r3, [r5, #25]
   35af4:	3310      	adds	r3, #16
   35af6:	76ab      	strb	r3, [r5, #26]
   35af8:	0034      	movs	r4, r6
   35afa:	7823      	ldrb	r3, [r4, #0]
   35afc:	2b00      	cmp	r3, #0
   35afe:	d147      	bne.n	35b90 <_svfiprintf_r+0xdc>
   35b00:	1ba3      	subs	r3, r4, r6
   35b02:	9304      	str	r3, [sp, #16]
   35b04:	d00d      	beq.n	35b22 <_svfiprintf_r+0x6e>
   35b06:	1ba3      	subs	r3, r4, r6
   35b08:	0032      	movs	r2, r6
   35b0a:	0039      	movs	r1, r7
   35b0c:	9802      	ldr	r0, [sp, #8]
   35b0e:	f7ff ff6f 	bl	359f0 <__ssputs_r>
   35b12:	1c43      	adds	r3, r0, #1
   35b14:	d100      	bne.n	35b18 <_svfiprintf_r+0x64>
   35b16:	e0b5      	b.n	35c84 <_svfiprintf_r+0x1d0>
   35b18:	696a      	ldr	r2, [r5, #20]
   35b1a:	9b04      	ldr	r3, [sp, #16]
   35b1c:	4694      	mov	ip, r2
   35b1e:	4463      	add	r3, ip
   35b20:	616b      	str	r3, [r5, #20]
   35b22:	7823      	ldrb	r3, [r4, #0]
   35b24:	2b00      	cmp	r3, #0
   35b26:	d100      	bne.n	35b2a <_svfiprintf_r+0x76>
   35b28:	e0ac      	b.n	35c84 <_svfiprintf_r+0x1d0>
   35b2a:	2201      	movs	r2, #1
   35b2c:	2300      	movs	r3, #0
   35b2e:	4252      	negs	r2, r2
   35b30:	606a      	str	r2, [r5, #4]
   35b32:	a902      	add	r1, sp, #8
   35b34:	3254      	adds	r2, #84	; 0x54
   35b36:	1852      	adds	r2, r2, r1
   35b38:	3401      	adds	r4, #1
   35b3a:	602b      	str	r3, [r5, #0]
   35b3c:	60eb      	str	r3, [r5, #12]
   35b3e:	60ab      	str	r3, [r5, #8]
   35b40:	7013      	strb	r3, [r2, #0]
   35b42:	65ab      	str	r3, [r5, #88]	; 0x58
   35b44:	4e58      	ldr	r6, [pc, #352]	; (35ca8 <_svfiprintf_r+0x1f4>)
   35b46:	2205      	movs	r2, #5
   35b48:	7821      	ldrb	r1, [r4, #0]
   35b4a:	0030      	movs	r0, r6
   35b4c:	f000 fb02 	bl	36154 <memchr>
   35b50:	1c62      	adds	r2, r4, #1
   35b52:	2800      	cmp	r0, #0
   35b54:	d120      	bne.n	35b98 <_svfiprintf_r+0xe4>
   35b56:	6829      	ldr	r1, [r5, #0]
   35b58:	06cb      	lsls	r3, r1, #27
   35b5a:	d504      	bpl.n	35b66 <_svfiprintf_r+0xb2>
   35b5c:	2353      	movs	r3, #83	; 0x53
   35b5e:	ae02      	add	r6, sp, #8
   35b60:	3020      	adds	r0, #32
   35b62:	199b      	adds	r3, r3, r6
   35b64:	7018      	strb	r0, [r3, #0]
   35b66:	070b      	lsls	r3, r1, #28
   35b68:	d504      	bpl.n	35b74 <_svfiprintf_r+0xc0>
   35b6a:	2353      	movs	r3, #83	; 0x53
   35b6c:	202b      	movs	r0, #43	; 0x2b
   35b6e:	ae02      	add	r6, sp, #8
   35b70:	199b      	adds	r3, r3, r6
   35b72:	7018      	strb	r0, [r3, #0]
   35b74:	7823      	ldrb	r3, [r4, #0]
   35b76:	2b2a      	cmp	r3, #42	; 0x2a
   35b78:	d016      	beq.n	35ba8 <_svfiprintf_r+0xf4>
   35b7a:	2000      	movs	r0, #0
   35b7c:	210a      	movs	r1, #10
   35b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35b80:	7822      	ldrb	r2, [r4, #0]
   35b82:	3a30      	subs	r2, #48	; 0x30
   35b84:	2a09      	cmp	r2, #9
   35b86:	d955      	bls.n	35c34 <_svfiprintf_r+0x180>
   35b88:	2800      	cmp	r0, #0
   35b8a:	d015      	beq.n	35bb8 <_svfiprintf_r+0x104>
   35b8c:	9309      	str	r3, [sp, #36]	; 0x24
   35b8e:	e013      	b.n	35bb8 <_svfiprintf_r+0x104>
   35b90:	2b25      	cmp	r3, #37	; 0x25
   35b92:	d0b5      	beq.n	35b00 <_svfiprintf_r+0x4c>
   35b94:	3401      	adds	r4, #1
   35b96:	e7b0      	b.n	35afa <_svfiprintf_r+0x46>
   35b98:	2301      	movs	r3, #1
   35b9a:	1b80      	subs	r0, r0, r6
   35b9c:	4083      	lsls	r3, r0
   35b9e:	6829      	ldr	r1, [r5, #0]
   35ba0:	0014      	movs	r4, r2
   35ba2:	430b      	orrs	r3, r1
   35ba4:	602b      	str	r3, [r5, #0]
   35ba6:	e7cd      	b.n	35b44 <_svfiprintf_r+0x90>
   35ba8:	9b05      	ldr	r3, [sp, #20]
   35baa:	1d18      	adds	r0, r3, #4
   35bac:	681b      	ldr	r3, [r3, #0]
   35bae:	9005      	str	r0, [sp, #20]
   35bb0:	2b00      	cmp	r3, #0
   35bb2:	db39      	blt.n	35c28 <_svfiprintf_r+0x174>
   35bb4:	9309      	str	r3, [sp, #36]	; 0x24
   35bb6:	0014      	movs	r4, r2
   35bb8:	7823      	ldrb	r3, [r4, #0]
   35bba:	2b2e      	cmp	r3, #46	; 0x2e
   35bbc:	d10b      	bne.n	35bd6 <_svfiprintf_r+0x122>
   35bbe:	7863      	ldrb	r3, [r4, #1]
   35bc0:	1c62      	adds	r2, r4, #1
   35bc2:	2b2a      	cmp	r3, #42	; 0x2a
   35bc4:	d13e      	bne.n	35c44 <_svfiprintf_r+0x190>
   35bc6:	9b05      	ldr	r3, [sp, #20]
   35bc8:	3402      	adds	r4, #2
   35bca:	1d1a      	adds	r2, r3, #4
   35bcc:	681b      	ldr	r3, [r3, #0]
   35bce:	9205      	str	r2, [sp, #20]
   35bd0:	2b00      	cmp	r3, #0
   35bd2:	db34      	blt.n	35c3e <_svfiprintf_r+0x18a>
   35bd4:	9307      	str	r3, [sp, #28]
   35bd6:	4e35      	ldr	r6, [pc, #212]	; (35cac <_svfiprintf_r+0x1f8>)
   35bd8:	7821      	ldrb	r1, [r4, #0]
   35bda:	2203      	movs	r2, #3
   35bdc:	0030      	movs	r0, r6
   35bde:	f000 fab9 	bl	36154 <memchr>
   35be2:	2800      	cmp	r0, #0
   35be4:	d006      	beq.n	35bf4 <_svfiprintf_r+0x140>
   35be6:	2340      	movs	r3, #64	; 0x40
   35be8:	1b80      	subs	r0, r0, r6
   35bea:	4083      	lsls	r3, r0
   35bec:	682a      	ldr	r2, [r5, #0]
   35bee:	3401      	adds	r4, #1
   35bf0:	4313      	orrs	r3, r2
   35bf2:	602b      	str	r3, [r5, #0]
   35bf4:	7821      	ldrb	r1, [r4, #0]
   35bf6:	2206      	movs	r2, #6
   35bf8:	482d      	ldr	r0, [pc, #180]	; (35cb0 <_svfiprintf_r+0x1fc>)
   35bfa:	1c66      	adds	r6, r4, #1
   35bfc:	7629      	strb	r1, [r5, #24]
   35bfe:	f000 faa9 	bl	36154 <memchr>
   35c02:	2800      	cmp	r0, #0
   35c04:	d046      	beq.n	35c94 <_svfiprintf_r+0x1e0>
   35c06:	4b2b      	ldr	r3, [pc, #172]	; (35cb4 <_svfiprintf_r+0x200>)
   35c08:	2b00      	cmp	r3, #0
   35c0a:	d12f      	bne.n	35c6c <_svfiprintf_r+0x1b8>
   35c0c:	6829      	ldr	r1, [r5, #0]
   35c0e:	9b05      	ldr	r3, [sp, #20]
   35c10:	2207      	movs	r2, #7
   35c12:	05c9      	lsls	r1, r1, #23
   35c14:	d528      	bpl.n	35c68 <_svfiprintf_r+0x1b4>
   35c16:	189b      	adds	r3, r3, r2
   35c18:	4393      	bics	r3, r2
   35c1a:	3308      	adds	r3, #8
   35c1c:	9305      	str	r3, [sp, #20]
   35c1e:	696b      	ldr	r3, [r5, #20]
   35c20:	9a03      	ldr	r2, [sp, #12]
   35c22:	189b      	adds	r3, r3, r2
   35c24:	616b      	str	r3, [r5, #20]
   35c26:	e767      	b.n	35af8 <_svfiprintf_r+0x44>
   35c28:	425b      	negs	r3, r3
   35c2a:	60eb      	str	r3, [r5, #12]
   35c2c:	2302      	movs	r3, #2
   35c2e:	430b      	orrs	r3, r1
   35c30:	602b      	str	r3, [r5, #0]
   35c32:	e7c0      	b.n	35bb6 <_svfiprintf_r+0x102>
   35c34:	434b      	muls	r3, r1
   35c36:	3401      	adds	r4, #1
   35c38:	189b      	adds	r3, r3, r2
   35c3a:	2001      	movs	r0, #1
   35c3c:	e7a0      	b.n	35b80 <_svfiprintf_r+0xcc>
   35c3e:	2301      	movs	r3, #1
   35c40:	425b      	negs	r3, r3
   35c42:	e7c7      	b.n	35bd4 <_svfiprintf_r+0x120>
   35c44:	2300      	movs	r3, #0
   35c46:	0014      	movs	r4, r2
   35c48:	200a      	movs	r0, #10
   35c4a:	001a      	movs	r2, r3
   35c4c:	606b      	str	r3, [r5, #4]
   35c4e:	7821      	ldrb	r1, [r4, #0]
   35c50:	3930      	subs	r1, #48	; 0x30
   35c52:	2909      	cmp	r1, #9
   35c54:	d903      	bls.n	35c5e <_svfiprintf_r+0x1aa>
   35c56:	2b00      	cmp	r3, #0
   35c58:	d0bd      	beq.n	35bd6 <_svfiprintf_r+0x122>
   35c5a:	9207      	str	r2, [sp, #28]
   35c5c:	e7bb      	b.n	35bd6 <_svfiprintf_r+0x122>
   35c5e:	4342      	muls	r2, r0
   35c60:	3401      	adds	r4, #1
   35c62:	1852      	adds	r2, r2, r1
   35c64:	2301      	movs	r3, #1
   35c66:	e7f2      	b.n	35c4e <_svfiprintf_r+0x19a>
   35c68:	3307      	adds	r3, #7
   35c6a:	e7d5      	b.n	35c18 <_svfiprintf_r+0x164>
   35c6c:	ab05      	add	r3, sp, #20
   35c6e:	9300      	str	r3, [sp, #0]
   35c70:	003a      	movs	r2, r7
   35c72:	4b11      	ldr	r3, [pc, #68]	; (35cb8 <_svfiprintf_r+0x204>)
   35c74:	0029      	movs	r1, r5
   35c76:	9802      	ldr	r0, [sp, #8]
   35c78:	e000      	b.n	35c7c <_svfiprintf_r+0x1c8>
   35c7a:	bf00      	nop
   35c7c:	9003      	str	r0, [sp, #12]
   35c7e:	9b03      	ldr	r3, [sp, #12]
   35c80:	3301      	adds	r3, #1
   35c82:	d1cc      	bne.n	35c1e <_svfiprintf_r+0x16a>
   35c84:	89bb      	ldrh	r3, [r7, #12]
   35c86:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35c88:	065b      	lsls	r3, r3, #25
   35c8a:	d400      	bmi.n	35c8e <_svfiprintf_r+0x1da>
   35c8c:	e729      	b.n	35ae2 <_svfiprintf_r+0x2e>
   35c8e:	2001      	movs	r0, #1
   35c90:	4240      	negs	r0, r0
   35c92:	e726      	b.n	35ae2 <_svfiprintf_r+0x2e>
   35c94:	ab05      	add	r3, sp, #20
   35c96:	9300      	str	r3, [sp, #0]
   35c98:	003a      	movs	r2, r7
   35c9a:	4b07      	ldr	r3, [pc, #28]	; (35cb8 <_svfiprintf_r+0x204>)
   35c9c:	0029      	movs	r1, r5
   35c9e:	9802      	ldr	r0, [sp, #8]
   35ca0:	f000 f87a 	bl	35d98 <_printf_i>
   35ca4:	e7ea      	b.n	35c7c <_svfiprintf_r+0x1c8>
   35ca6:	46c0      	nop			; (mov r8, r8)
   35ca8:	0003a762 	.word	0x0003a762
   35cac:	0003a768 	.word	0x0003a768
   35cb0:	0003a76c 	.word	0x0003a76c
   35cb4:	00000000 	.word	0x00000000
   35cb8:	000359f1 	.word	0x000359f1

00035cbc <_printf_common>:
   35cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35cbe:	0015      	movs	r5, r2
   35cc0:	9301      	str	r3, [sp, #4]
   35cc2:	688a      	ldr	r2, [r1, #8]
   35cc4:	690b      	ldr	r3, [r1, #16]
   35cc6:	9000      	str	r0, [sp, #0]
   35cc8:	000c      	movs	r4, r1
   35cca:	4293      	cmp	r3, r2
   35ccc:	da00      	bge.n	35cd0 <_printf_common+0x14>
   35cce:	0013      	movs	r3, r2
   35cd0:	0022      	movs	r2, r4
   35cd2:	602b      	str	r3, [r5, #0]
   35cd4:	3243      	adds	r2, #67	; 0x43
   35cd6:	7812      	ldrb	r2, [r2, #0]
   35cd8:	2a00      	cmp	r2, #0
   35cda:	d001      	beq.n	35ce0 <_printf_common+0x24>
   35cdc:	3301      	adds	r3, #1
   35cde:	602b      	str	r3, [r5, #0]
   35ce0:	6823      	ldr	r3, [r4, #0]
   35ce2:	069b      	lsls	r3, r3, #26
   35ce4:	d502      	bpl.n	35cec <_printf_common+0x30>
   35ce6:	682b      	ldr	r3, [r5, #0]
   35ce8:	3302      	adds	r3, #2
   35cea:	602b      	str	r3, [r5, #0]
   35cec:	2706      	movs	r7, #6
   35cee:	6823      	ldr	r3, [r4, #0]
   35cf0:	401f      	ands	r7, r3
   35cf2:	d027      	beq.n	35d44 <_printf_common+0x88>
   35cf4:	0023      	movs	r3, r4
   35cf6:	3343      	adds	r3, #67	; 0x43
   35cf8:	781b      	ldrb	r3, [r3, #0]
   35cfa:	1e5a      	subs	r2, r3, #1
   35cfc:	4193      	sbcs	r3, r2
   35cfe:	6822      	ldr	r2, [r4, #0]
   35d00:	0692      	lsls	r2, r2, #26
   35d02:	d430      	bmi.n	35d66 <_printf_common+0xaa>
   35d04:	0022      	movs	r2, r4
   35d06:	9901      	ldr	r1, [sp, #4]
   35d08:	3243      	adds	r2, #67	; 0x43
   35d0a:	9800      	ldr	r0, [sp, #0]
   35d0c:	9e08      	ldr	r6, [sp, #32]
   35d0e:	47b0      	blx	r6
   35d10:	1c43      	adds	r3, r0, #1
   35d12:	d025      	beq.n	35d60 <_printf_common+0xa4>
   35d14:	2306      	movs	r3, #6
   35d16:	6820      	ldr	r0, [r4, #0]
   35d18:	682a      	ldr	r2, [r5, #0]
   35d1a:	68e1      	ldr	r1, [r4, #12]
   35d1c:	4003      	ands	r3, r0
   35d1e:	2500      	movs	r5, #0
   35d20:	2b04      	cmp	r3, #4
   35d22:	d103      	bne.n	35d2c <_printf_common+0x70>
   35d24:	1a8d      	subs	r5, r1, r2
   35d26:	43eb      	mvns	r3, r5
   35d28:	17db      	asrs	r3, r3, #31
   35d2a:	401d      	ands	r5, r3
   35d2c:	68a3      	ldr	r3, [r4, #8]
   35d2e:	6922      	ldr	r2, [r4, #16]
   35d30:	4293      	cmp	r3, r2
   35d32:	dd01      	ble.n	35d38 <_printf_common+0x7c>
   35d34:	1a9b      	subs	r3, r3, r2
   35d36:	18ed      	adds	r5, r5, r3
   35d38:	2700      	movs	r7, #0
   35d3a:	42bd      	cmp	r5, r7
   35d3c:	d120      	bne.n	35d80 <_printf_common+0xc4>
   35d3e:	2000      	movs	r0, #0
   35d40:	e010      	b.n	35d64 <_printf_common+0xa8>
   35d42:	3701      	adds	r7, #1
   35d44:	68e3      	ldr	r3, [r4, #12]
   35d46:	682a      	ldr	r2, [r5, #0]
   35d48:	1a9b      	subs	r3, r3, r2
   35d4a:	429f      	cmp	r7, r3
   35d4c:	dad2      	bge.n	35cf4 <_printf_common+0x38>
   35d4e:	0022      	movs	r2, r4
   35d50:	2301      	movs	r3, #1
   35d52:	3219      	adds	r2, #25
   35d54:	9901      	ldr	r1, [sp, #4]
   35d56:	9800      	ldr	r0, [sp, #0]
   35d58:	9e08      	ldr	r6, [sp, #32]
   35d5a:	47b0      	blx	r6
   35d5c:	1c43      	adds	r3, r0, #1
   35d5e:	d1f0      	bne.n	35d42 <_printf_common+0x86>
   35d60:	2001      	movs	r0, #1
   35d62:	4240      	negs	r0, r0
   35d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35d66:	2030      	movs	r0, #48	; 0x30
   35d68:	18e1      	adds	r1, r4, r3
   35d6a:	3143      	adds	r1, #67	; 0x43
   35d6c:	7008      	strb	r0, [r1, #0]
   35d6e:	0021      	movs	r1, r4
   35d70:	1c5a      	adds	r2, r3, #1
   35d72:	3145      	adds	r1, #69	; 0x45
   35d74:	7809      	ldrb	r1, [r1, #0]
   35d76:	18a2      	adds	r2, r4, r2
   35d78:	3243      	adds	r2, #67	; 0x43
   35d7a:	3302      	adds	r3, #2
   35d7c:	7011      	strb	r1, [r2, #0]
   35d7e:	e7c1      	b.n	35d04 <_printf_common+0x48>
   35d80:	0022      	movs	r2, r4
   35d82:	2301      	movs	r3, #1
   35d84:	321a      	adds	r2, #26
   35d86:	9901      	ldr	r1, [sp, #4]
   35d88:	9800      	ldr	r0, [sp, #0]
   35d8a:	9e08      	ldr	r6, [sp, #32]
   35d8c:	47b0      	blx	r6
   35d8e:	1c43      	adds	r3, r0, #1
   35d90:	d0e6      	beq.n	35d60 <_printf_common+0xa4>
   35d92:	3701      	adds	r7, #1
   35d94:	e7d1      	b.n	35d3a <_printf_common+0x7e>
	...

00035d98 <_printf_i>:
   35d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   35d9a:	b08b      	sub	sp, #44	; 0x2c
   35d9c:	9206      	str	r2, [sp, #24]
   35d9e:	000a      	movs	r2, r1
   35da0:	3243      	adds	r2, #67	; 0x43
   35da2:	9307      	str	r3, [sp, #28]
   35da4:	9005      	str	r0, [sp, #20]
   35da6:	9204      	str	r2, [sp, #16]
   35da8:	7e0a      	ldrb	r2, [r1, #24]
   35daa:	000c      	movs	r4, r1
   35dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35dae:	2a6e      	cmp	r2, #110	; 0x6e
   35db0:	d100      	bne.n	35db4 <_printf_i+0x1c>
   35db2:	e08f      	b.n	35ed4 <_printf_i+0x13c>
   35db4:	d817      	bhi.n	35de6 <_printf_i+0x4e>
   35db6:	2a63      	cmp	r2, #99	; 0x63
   35db8:	d02c      	beq.n	35e14 <_printf_i+0x7c>
   35dba:	d808      	bhi.n	35dce <_printf_i+0x36>
   35dbc:	2a00      	cmp	r2, #0
   35dbe:	d100      	bne.n	35dc2 <_printf_i+0x2a>
   35dc0:	e099      	b.n	35ef6 <_printf_i+0x15e>
   35dc2:	2a58      	cmp	r2, #88	; 0x58
   35dc4:	d054      	beq.n	35e70 <_printf_i+0xd8>
   35dc6:	0026      	movs	r6, r4
   35dc8:	3642      	adds	r6, #66	; 0x42
   35dca:	7032      	strb	r2, [r6, #0]
   35dcc:	e029      	b.n	35e22 <_printf_i+0x8a>
   35dce:	2a64      	cmp	r2, #100	; 0x64
   35dd0:	d001      	beq.n	35dd6 <_printf_i+0x3e>
   35dd2:	2a69      	cmp	r2, #105	; 0x69
   35dd4:	d1f7      	bne.n	35dc6 <_printf_i+0x2e>
   35dd6:	6821      	ldr	r1, [r4, #0]
   35dd8:	681a      	ldr	r2, [r3, #0]
   35dda:	0608      	lsls	r0, r1, #24
   35ddc:	d523      	bpl.n	35e26 <_printf_i+0x8e>
   35dde:	1d11      	adds	r1, r2, #4
   35de0:	6019      	str	r1, [r3, #0]
   35de2:	6815      	ldr	r5, [r2, #0]
   35de4:	e025      	b.n	35e32 <_printf_i+0x9a>
   35de6:	2a73      	cmp	r2, #115	; 0x73
   35de8:	d100      	bne.n	35dec <_printf_i+0x54>
   35dea:	e088      	b.n	35efe <_printf_i+0x166>
   35dec:	d808      	bhi.n	35e00 <_printf_i+0x68>
   35dee:	2a6f      	cmp	r2, #111	; 0x6f
   35df0:	d029      	beq.n	35e46 <_printf_i+0xae>
   35df2:	2a70      	cmp	r2, #112	; 0x70
   35df4:	d1e7      	bne.n	35dc6 <_printf_i+0x2e>
   35df6:	2220      	movs	r2, #32
   35df8:	6809      	ldr	r1, [r1, #0]
   35dfa:	430a      	orrs	r2, r1
   35dfc:	6022      	str	r2, [r4, #0]
   35dfe:	e003      	b.n	35e08 <_printf_i+0x70>
   35e00:	2a75      	cmp	r2, #117	; 0x75
   35e02:	d020      	beq.n	35e46 <_printf_i+0xae>
   35e04:	2a78      	cmp	r2, #120	; 0x78
   35e06:	d1de      	bne.n	35dc6 <_printf_i+0x2e>
   35e08:	0022      	movs	r2, r4
   35e0a:	2178      	movs	r1, #120	; 0x78
   35e0c:	3245      	adds	r2, #69	; 0x45
   35e0e:	7011      	strb	r1, [r2, #0]
   35e10:	4a6c      	ldr	r2, [pc, #432]	; (35fc4 <_printf_i+0x22c>)
   35e12:	e030      	b.n	35e76 <_printf_i+0xde>
   35e14:	000e      	movs	r6, r1
   35e16:	681a      	ldr	r2, [r3, #0]
   35e18:	3642      	adds	r6, #66	; 0x42
   35e1a:	1d11      	adds	r1, r2, #4
   35e1c:	6019      	str	r1, [r3, #0]
   35e1e:	6813      	ldr	r3, [r2, #0]
   35e20:	7033      	strb	r3, [r6, #0]
   35e22:	2301      	movs	r3, #1
   35e24:	e079      	b.n	35f1a <_printf_i+0x182>
   35e26:	0649      	lsls	r1, r1, #25
   35e28:	d5d9      	bpl.n	35dde <_printf_i+0x46>
   35e2a:	1d11      	adds	r1, r2, #4
   35e2c:	6019      	str	r1, [r3, #0]
   35e2e:	2300      	movs	r3, #0
   35e30:	5ed5      	ldrsh	r5, [r2, r3]
   35e32:	2d00      	cmp	r5, #0
   35e34:	da03      	bge.n	35e3e <_printf_i+0xa6>
   35e36:	232d      	movs	r3, #45	; 0x2d
   35e38:	9a04      	ldr	r2, [sp, #16]
   35e3a:	426d      	negs	r5, r5
   35e3c:	7013      	strb	r3, [r2, #0]
   35e3e:	4b62      	ldr	r3, [pc, #392]	; (35fc8 <_printf_i+0x230>)
   35e40:	270a      	movs	r7, #10
   35e42:	9303      	str	r3, [sp, #12]
   35e44:	e02f      	b.n	35ea6 <_printf_i+0x10e>
   35e46:	6820      	ldr	r0, [r4, #0]
   35e48:	6819      	ldr	r1, [r3, #0]
   35e4a:	0605      	lsls	r5, r0, #24
   35e4c:	d503      	bpl.n	35e56 <_printf_i+0xbe>
   35e4e:	1d08      	adds	r0, r1, #4
   35e50:	6018      	str	r0, [r3, #0]
   35e52:	680d      	ldr	r5, [r1, #0]
   35e54:	e005      	b.n	35e62 <_printf_i+0xca>
   35e56:	0640      	lsls	r0, r0, #25
   35e58:	d5f9      	bpl.n	35e4e <_printf_i+0xb6>
   35e5a:	680d      	ldr	r5, [r1, #0]
   35e5c:	1d08      	adds	r0, r1, #4
   35e5e:	6018      	str	r0, [r3, #0]
   35e60:	b2ad      	uxth	r5, r5
   35e62:	4b59      	ldr	r3, [pc, #356]	; (35fc8 <_printf_i+0x230>)
   35e64:	2708      	movs	r7, #8
   35e66:	9303      	str	r3, [sp, #12]
   35e68:	2a6f      	cmp	r2, #111	; 0x6f
   35e6a:	d018      	beq.n	35e9e <_printf_i+0x106>
   35e6c:	270a      	movs	r7, #10
   35e6e:	e016      	b.n	35e9e <_printf_i+0x106>
   35e70:	3145      	adds	r1, #69	; 0x45
   35e72:	700a      	strb	r2, [r1, #0]
   35e74:	4a54      	ldr	r2, [pc, #336]	; (35fc8 <_printf_i+0x230>)
   35e76:	9203      	str	r2, [sp, #12]
   35e78:	681a      	ldr	r2, [r3, #0]
   35e7a:	6821      	ldr	r1, [r4, #0]
   35e7c:	1d10      	adds	r0, r2, #4
   35e7e:	6018      	str	r0, [r3, #0]
   35e80:	6815      	ldr	r5, [r2, #0]
   35e82:	0608      	lsls	r0, r1, #24
   35e84:	d522      	bpl.n	35ecc <_printf_i+0x134>
   35e86:	07cb      	lsls	r3, r1, #31
   35e88:	d502      	bpl.n	35e90 <_printf_i+0xf8>
   35e8a:	2320      	movs	r3, #32
   35e8c:	4319      	orrs	r1, r3
   35e8e:	6021      	str	r1, [r4, #0]
   35e90:	2710      	movs	r7, #16
   35e92:	2d00      	cmp	r5, #0
   35e94:	d103      	bne.n	35e9e <_printf_i+0x106>
   35e96:	2320      	movs	r3, #32
   35e98:	6822      	ldr	r2, [r4, #0]
   35e9a:	439a      	bics	r2, r3
   35e9c:	6022      	str	r2, [r4, #0]
   35e9e:	0023      	movs	r3, r4
   35ea0:	2200      	movs	r2, #0
   35ea2:	3343      	adds	r3, #67	; 0x43
   35ea4:	701a      	strb	r2, [r3, #0]
   35ea6:	6863      	ldr	r3, [r4, #4]
   35ea8:	60a3      	str	r3, [r4, #8]
   35eaa:	2b00      	cmp	r3, #0
   35eac:	db5c      	blt.n	35f68 <_printf_i+0x1d0>
   35eae:	2204      	movs	r2, #4
   35eb0:	6821      	ldr	r1, [r4, #0]
   35eb2:	4391      	bics	r1, r2
   35eb4:	6021      	str	r1, [r4, #0]
   35eb6:	2d00      	cmp	r5, #0
   35eb8:	d158      	bne.n	35f6c <_printf_i+0x1d4>
   35eba:	9e04      	ldr	r6, [sp, #16]
   35ebc:	2b00      	cmp	r3, #0
   35ebe:	d064      	beq.n	35f8a <_printf_i+0x1f2>
   35ec0:	0026      	movs	r6, r4
   35ec2:	9b03      	ldr	r3, [sp, #12]
   35ec4:	3642      	adds	r6, #66	; 0x42
   35ec6:	781b      	ldrb	r3, [r3, #0]
   35ec8:	7033      	strb	r3, [r6, #0]
   35eca:	e05e      	b.n	35f8a <_printf_i+0x1f2>
   35ecc:	0648      	lsls	r0, r1, #25
   35ece:	d5da      	bpl.n	35e86 <_printf_i+0xee>
   35ed0:	b2ad      	uxth	r5, r5
   35ed2:	e7d8      	b.n	35e86 <_printf_i+0xee>
   35ed4:	6809      	ldr	r1, [r1, #0]
   35ed6:	681a      	ldr	r2, [r3, #0]
   35ed8:	0608      	lsls	r0, r1, #24
   35eda:	d505      	bpl.n	35ee8 <_printf_i+0x150>
   35edc:	1d11      	adds	r1, r2, #4
   35ede:	6019      	str	r1, [r3, #0]
   35ee0:	6813      	ldr	r3, [r2, #0]
   35ee2:	6962      	ldr	r2, [r4, #20]
   35ee4:	601a      	str	r2, [r3, #0]
   35ee6:	e006      	b.n	35ef6 <_printf_i+0x15e>
   35ee8:	0649      	lsls	r1, r1, #25
   35eea:	d5f7      	bpl.n	35edc <_printf_i+0x144>
   35eec:	1d11      	adds	r1, r2, #4
   35eee:	6019      	str	r1, [r3, #0]
   35ef0:	6813      	ldr	r3, [r2, #0]
   35ef2:	8aa2      	ldrh	r2, [r4, #20]
   35ef4:	801a      	strh	r2, [r3, #0]
   35ef6:	2300      	movs	r3, #0
   35ef8:	9e04      	ldr	r6, [sp, #16]
   35efa:	6123      	str	r3, [r4, #16]
   35efc:	e054      	b.n	35fa8 <_printf_i+0x210>
   35efe:	681a      	ldr	r2, [r3, #0]
   35f00:	1d11      	adds	r1, r2, #4
   35f02:	6019      	str	r1, [r3, #0]
   35f04:	6816      	ldr	r6, [r2, #0]
   35f06:	2100      	movs	r1, #0
   35f08:	6862      	ldr	r2, [r4, #4]
   35f0a:	0030      	movs	r0, r6
   35f0c:	f000 f922 	bl	36154 <memchr>
   35f10:	2800      	cmp	r0, #0
   35f12:	d001      	beq.n	35f18 <_printf_i+0x180>
   35f14:	1b80      	subs	r0, r0, r6
   35f16:	6060      	str	r0, [r4, #4]
   35f18:	6863      	ldr	r3, [r4, #4]
   35f1a:	6123      	str	r3, [r4, #16]
   35f1c:	2300      	movs	r3, #0
   35f1e:	9a04      	ldr	r2, [sp, #16]
   35f20:	7013      	strb	r3, [r2, #0]
   35f22:	e041      	b.n	35fa8 <_printf_i+0x210>
   35f24:	6923      	ldr	r3, [r4, #16]
   35f26:	0032      	movs	r2, r6
   35f28:	9906      	ldr	r1, [sp, #24]
   35f2a:	9805      	ldr	r0, [sp, #20]
   35f2c:	9d07      	ldr	r5, [sp, #28]
   35f2e:	47a8      	blx	r5
   35f30:	1c43      	adds	r3, r0, #1
   35f32:	d043      	beq.n	35fbc <_printf_i+0x224>
   35f34:	6823      	ldr	r3, [r4, #0]
   35f36:	2500      	movs	r5, #0
   35f38:	079b      	lsls	r3, r3, #30
   35f3a:	d40f      	bmi.n	35f5c <_printf_i+0x1c4>
   35f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35f3e:	68e0      	ldr	r0, [r4, #12]
   35f40:	4298      	cmp	r0, r3
   35f42:	da3d      	bge.n	35fc0 <_printf_i+0x228>
   35f44:	0018      	movs	r0, r3
   35f46:	e03b      	b.n	35fc0 <_printf_i+0x228>
   35f48:	0022      	movs	r2, r4
   35f4a:	2301      	movs	r3, #1
   35f4c:	3219      	adds	r2, #25
   35f4e:	9906      	ldr	r1, [sp, #24]
   35f50:	9805      	ldr	r0, [sp, #20]
   35f52:	9e07      	ldr	r6, [sp, #28]
   35f54:	47b0      	blx	r6
   35f56:	1c43      	adds	r3, r0, #1
   35f58:	d030      	beq.n	35fbc <_printf_i+0x224>
   35f5a:	3501      	adds	r5, #1
   35f5c:	68e3      	ldr	r3, [r4, #12]
   35f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35f60:	1a9b      	subs	r3, r3, r2
   35f62:	429d      	cmp	r5, r3
   35f64:	dbf0      	blt.n	35f48 <_printf_i+0x1b0>
   35f66:	e7e9      	b.n	35f3c <_printf_i+0x1a4>
   35f68:	2d00      	cmp	r5, #0
   35f6a:	d0a9      	beq.n	35ec0 <_printf_i+0x128>
   35f6c:	9e04      	ldr	r6, [sp, #16]
   35f6e:	0028      	movs	r0, r5
   35f70:	0039      	movs	r1, r7
   35f72:	f7fc ff95 	bl	32ea0 <__aeabi_uidivmod>
   35f76:	9b03      	ldr	r3, [sp, #12]
   35f78:	3e01      	subs	r6, #1
   35f7a:	5c5b      	ldrb	r3, [r3, r1]
   35f7c:	0028      	movs	r0, r5
   35f7e:	7033      	strb	r3, [r6, #0]
   35f80:	0039      	movs	r1, r7
   35f82:	f7fc ff07 	bl	32d94 <__udivsi3>
   35f86:	1e05      	subs	r5, r0, #0
   35f88:	d1f1      	bne.n	35f6e <_printf_i+0x1d6>
   35f8a:	2f08      	cmp	r7, #8
   35f8c:	d109      	bne.n	35fa2 <_printf_i+0x20a>
   35f8e:	6823      	ldr	r3, [r4, #0]
   35f90:	07db      	lsls	r3, r3, #31
   35f92:	d506      	bpl.n	35fa2 <_printf_i+0x20a>
   35f94:	6863      	ldr	r3, [r4, #4]
   35f96:	6922      	ldr	r2, [r4, #16]
   35f98:	4293      	cmp	r3, r2
   35f9a:	dc02      	bgt.n	35fa2 <_printf_i+0x20a>
   35f9c:	2330      	movs	r3, #48	; 0x30
   35f9e:	3e01      	subs	r6, #1
   35fa0:	7033      	strb	r3, [r6, #0]
   35fa2:	9b04      	ldr	r3, [sp, #16]
   35fa4:	1b9b      	subs	r3, r3, r6
   35fa6:	6123      	str	r3, [r4, #16]
   35fa8:	9b07      	ldr	r3, [sp, #28]
   35faa:	aa09      	add	r2, sp, #36	; 0x24
   35fac:	9300      	str	r3, [sp, #0]
   35fae:	0021      	movs	r1, r4
   35fb0:	9b06      	ldr	r3, [sp, #24]
   35fb2:	9805      	ldr	r0, [sp, #20]
   35fb4:	f7ff fe82 	bl	35cbc <_printf_common>
   35fb8:	1c43      	adds	r3, r0, #1
   35fba:	d1b3      	bne.n	35f24 <_printf_i+0x18c>
   35fbc:	2001      	movs	r0, #1
   35fbe:	4240      	negs	r0, r0
   35fc0:	b00b      	add	sp, #44	; 0x2c
   35fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35fc4:	0003a784 	.word	0x0003a784
   35fc8:	0003a773 	.word	0x0003a773

00035fcc <__sread>:
   35fcc:	b570      	push	{r4, r5, r6, lr}
   35fce:	000c      	movs	r4, r1
   35fd0:	250e      	movs	r5, #14
   35fd2:	5f49      	ldrsh	r1, [r1, r5]
   35fd4:	f000 f8f0 	bl	361b8 <_read_r>
   35fd8:	2800      	cmp	r0, #0
   35fda:	db03      	blt.n	35fe4 <__sread+0x18>
   35fdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35fde:	181b      	adds	r3, r3, r0
   35fe0:	6563      	str	r3, [r4, #84]	; 0x54
   35fe2:	bd70      	pop	{r4, r5, r6, pc}
   35fe4:	89a3      	ldrh	r3, [r4, #12]
   35fe6:	4a02      	ldr	r2, [pc, #8]	; (35ff0 <__sread+0x24>)
   35fe8:	4013      	ands	r3, r2
   35fea:	81a3      	strh	r3, [r4, #12]
   35fec:	e7f9      	b.n	35fe2 <__sread+0x16>
   35fee:	46c0      	nop			; (mov r8, r8)
   35ff0:	ffffefff 	.word	0xffffefff

00035ff4 <__swrite>:
   35ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35ff6:	001f      	movs	r7, r3
   35ff8:	898b      	ldrh	r3, [r1, #12]
   35ffa:	0005      	movs	r5, r0
   35ffc:	000c      	movs	r4, r1
   35ffe:	0016      	movs	r6, r2
   36000:	05db      	lsls	r3, r3, #23
   36002:	d505      	bpl.n	36010 <__swrite+0x1c>
   36004:	230e      	movs	r3, #14
   36006:	5ec9      	ldrsh	r1, [r1, r3]
   36008:	2200      	movs	r2, #0
   3600a:	2302      	movs	r3, #2
   3600c:	f000 f88e 	bl	3612c <_lseek_r>
   36010:	89a3      	ldrh	r3, [r4, #12]
   36012:	4a05      	ldr	r2, [pc, #20]	; (36028 <__swrite+0x34>)
   36014:	0028      	movs	r0, r5
   36016:	4013      	ands	r3, r2
   36018:	81a3      	strh	r3, [r4, #12]
   3601a:	0032      	movs	r2, r6
   3601c:	230e      	movs	r3, #14
   3601e:	5ee1      	ldrsh	r1, [r4, r3]
   36020:	003b      	movs	r3, r7
   36022:	f000 f839 	bl	36098 <_write_r>
   36026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36028:	ffffefff 	.word	0xffffefff

0003602c <__sseek>:
   3602c:	b570      	push	{r4, r5, r6, lr}
   3602e:	000c      	movs	r4, r1
   36030:	250e      	movs	r5, #14
   36032:	5f49      	ldrsh	r1, [r1, r5]
   36034:	f000 f87a 	bl	3612c <_lseek_r>
   36038:	89a3      	ldrh	r3, [r4, #12]
   3603a:	1c42      	adds	r2, r0, #1
   3603c:	d103      	bne.n	36046 <__sseek+0x1a>
   3603e:	4a05      	ldr	r2, [pc, #20]	; (36054 <__sseek+0x28>)
   36040:	4013      	ands	r3, r2
   36042:	81a3      	strh	r3, [r4, #12]
   36044:	bd70      	pop	{r4, r5, r6, pc}
   36046:	2280      	movs	r2, #128	; 0x80
   36048:	0152      	lsls	r2, r2, #5
   3604a:	4313      	orrs	r3, r2
   3604c:	81a3      	strh	r3, [r4, #12]
   3604e:	6560      	str	r0, [r4, #84]	; 0x54
   36050:	e7f8      	b.n	36044 <__sseek+0x18>
   36052:	46c0      	nop			; (mov r8, r8)
   36054:	ffffefff 	.word	0xffffefff

00036058 <__sclose>:
   36058:	b510      	push	{r4, lr}
   3605a:	230e      	movs	r3, #14
   3605c:	5ec9      	ldrsh	r1, [r1, r3]
   3605e:	f000 f82f 	bl	360c0 <_close_r>
   36062:	bd10      	pop	{r4, pc}

00036064 <strchr>:
   36064:	b2c9      	uxtb	r1, r1
   36066:	7803      	ldrb	r3, [r0, #0]
   36068:	2b00      	cmp	r3, #0
   3606a:	d004      	beq.n	36076 <strchr+0x12>
   3606c:	4299      	cmp	r1, r3
   3606e:	d100      	bne.n	36072 <strchr+0xe>
   36070:	4770      	bx	lr
   36072:	3001      	adds	r0, #1
   36074:	e7f7      	b.n	36066 <strchr+0x2>
   36076:	424b      	negs	r3, r1
   36078:	4159      	adcs	r1, r3
   3607a:	4249      	negs	r1, r1
   3607c:	4008      	ands	r0, r1
   3607e:	e7f7      	b.n	36070 <strchr+0xc>

00036080 <__ascii_wctomb>:
   36080:	1e0b      	subs	r3, r1, #0
   36082:	d004      	beq.n	3608e <__ascii_wctomb+0xe>
   36084:	2aff      	cmp	r2, #255	; 0xff
   36086:	d904      	bls.n	36092 <__ascii_wctomb+0x12>
   36088:	238a      	movs	r3, #138	; 0x8a
   3608a:	6003      	str	r3, [r0, #0]
   3608c:	3b8b      	subs	r3, #139	; 0x8b
   3608e:	0018      	movs	r0, r3
   36090:	4770      	bx	lr
   36092:	700a      	strb	r2, [r1, #0]
   36094:	2301      	movs	r3, #1
   36096:	e7fa      	b.n	3608e <__ascii_wctomb+0xe>

00036098 <_write_r>:
   36098:	b570      	push	{r4, r5, r6, lr}
   3609a:	0005      	movs	r5, r0
   3609c:	0008      	movs	r0, r1
   3609e:	0011      	movs	r1, r2
   360a0:	2200      	movs	r2, #0
   360a2:	4c06      	ldr	r4, [pc, #24]	; (360bc <_write_r+0x24>)
   360a4:	6022      	str	r2, [r4, #0]
   360a6:	001a      	movs	r2, r3
   360a8:	f7f5 fa12 	bl	2b4d0 <_write>
   360ac:	1c43      	adds	r3, r0, #1
   360ae:	d103      	bne.n	360b8 <_write_r+0x20>
   360b0:	6823      	ldr	r3, [r4, #0]
   360b2:	2b00      	cmp	r3, #0
   360b4:	d000      	beq.n	360b8 <_write_r+0x20>
   360b6:	602b      	str	r3, [r5, #0]
   360b8:	bd70      	pop	{r4, r5, r6, pc}
   360ba:	46c0      	nop			; (mov r8, r8)
   360bc:	20005ccc 	.word	0x20005ccc

000360c0 <_close_r>:
   360c0:	2300      	movs	r3, #0
   360c2:	b570      	push	{r4, r5, r6, lr}
   360c4:	4c06      	ldr	r4, [pc, #24]	; (360e0 <_close_r+0x20>)
   360c6:	0005      	movs	r5, r0
   360c8:	0008      	movs	r0, r1
   360ca:	6023      	str	r3, [r4, #0]
   360cc:	f7f5 fa54 	bl	2b578 <_close>
   360d0:	1c43      	adds	r3, r0, #1
   360d2:	d103      	bne.n	360dc <_close_r+0x1c>
   360d4:	6823      	ldr	r3, [r4, #0]
   360d6:	2b00      	cmp	r3, #0
   360d8:	d000      	beq.n	360dc <_close_r+0x1c>
   360da:	602b      	str	r3, [r5, #0]
   360dc:	bd70      	pop	{r4, r5, r6, pc}
   360de:	46c0      	nop			; (mov r8, r8)
   360e0:	20005ccc 	.word	0x20005ccc

000360e4 <_fstat_r>:
   360e4:	2300      	movs	r3, #0
   360e6:	b570      	push	{r4, r5, r6, lr}
   360e8:	4c06      	ldr	r4, [pc, #24]	; (36104 <_fstat_r+0x20>)
   360ea:	0005      	movs	r5, r0
   360ec:	0008      	movs	r0, r1
   360ee:	0011      	movs	r1, r2
   360f0:	6023      	str	r3, [r4, #0]
   360f2:	f7f5 fa4b 	bl	2b58c <_fstat>
   360f6:	1c43      	adds	r3, r0, #1
   360f8:	d103      	bne.n	36102 <_fstat_r+0x1e>
   360fa:	6823      	ldr	r3, [r4, #0]
   360fc:	2b00      	cmp	r3, #0
   360fe:	d000      	beq.n	36102 <_fstat_r+0x1e>
   36100:	602b      	str	r3, [r5, #0]
   36102:	bd70      	pop	{r4, r5, r6, pc}
   36104:	20005ccc 	.word	0x20005ccc

00036108 <_isatty_r>:
   36108:	2300      	movs	r3, #0
   3610a:	b570      	push	{r4, r5, r6, lr}
   3610c:	4c06      	ldr	r4, [pc, #24]	; (36128 <_isatty_r+0x20>)
   3610e:	0005      	movs	r5, r0
   36110:	0008      	movs	r0, r1
   36112:	6023      	str	r3, [r4, #0]
   36114:	f7f5 fa48 	bl	2b5a8 <_isatty>
   36118:	1c43      	adds	r3, r0, #1
   3611a:	d103      	bne.n	36124 <_isatty_r+0x1c>
   3611c:	6823      	ldr	r3, [r4, #0]
   3611e:	2b00      	cmp	r3, #0
   36120:	d000      	beq.n	36124 <_isatty_r+0x1c>
   36122:	602b      	str	r3, [r5, #0]
   36124:	bd70      	pop	{r4, r5, r6, pc}
   36126:	46c0      	nop			; (mov r8, r8)
   36128:	20005ccc 	.word	0x20005ccc

0003612c <_lseek_r>:
   3612c:	b570      	push	{r4, r5, r6, lr}
   3612e:	0005      	movs	r5, r0
   36130:	0008      	movs	r0, r1
   36132:	0011      	movs	r1, r2
   36134:	2200      	movs	r2, #0
   36136:	4c06      	ldr	r4, [pc, #24]	; (36150 <_lseek_r+0x24>)
   36138:	6022      	str	r2, [r4, #0]
   3613a:	001a      	movs	r2, r3
   3613c:	f7f5 fa3d 	bl	2b5ba <_lseek>
   36140:	1c43      	adds	r3, r0, #1
   36142:	d103      	bne.n	3614c <_lseek_r+0x20>
   36144:	6823      	ldr	r3, [r4, #0]
   36146:	2b00      	cmp	r3, #0
   36148:	d000      	beq.n	3614c <_lseek_r+0x20>
   3614a:	602b      	str	r3, [r5, #0]
   3614c:	bd70      	pop	{r4, r5, r6, pc}
   3614e:	46c0      	nop			; (mov r8, r8)
   36150:	20005ccc 	.word	0x20005ccc

00036154 <memchr>:
   36154:	b2c9      	uxtb	r1, r1
   36156:	1882      	adds	r2, r0, r2
   36158:	4290      	cmp	r0, r2
   3615a:	d101      	bne.n	36160 <memchr+0xc>
   3615c:	2000      	movs	r0, #0
   3615e:	4770      	bx	lr
   36160:	7803      	ldrb	r3, [r0, #0]
   36162:	428b      	cmp	r3, r1
   36164:	d0fb      	beq.n	3615e <memchr+0xa>
   36166:	3001      	adds	r0, #1
   36168:	e7f6      	b.n	36158 <memchr+0x4>

0003616a <_realloc_r>:
   3616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3616c:	0007      	movs	r7, r0
   3616e:	000d      	movs	r5, r1
   36170:	0016      	movs	r6, r2
   36172:	2900      	cmp	r1, #0
   36174:	d105      	bne.n	36182 <_realloc_r+0x18>
   36176:	0011      	movs	r1, r2
   36178:	f7fe fe9e 	bl	34eb8 <_malloc_r>
   3617c:	0004      	movs	r4, r0
   3617e:	0020      	movs	r0, r4
   36180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36182:	2a00      	cmp	r2, #0
   36184:	d103      	bne.n	3618e <_realloc_r+0x24>
   36186:	f7fe fe4d 	bl	34e24 <_free_r>
   3618a:	0034      	movs	r4, r6
   3618c:	e7f7      	b.n	3617e <_realloc_r+0x14>
   3618e:	f000 f827 	bl	361e0 <_malloc_usable_size_r>
   36192:	002c      	movs	r4, r5
   36194:	4286      	cmp	r6, r0
   36196:	d9f2      	bls.n	3617e <_realloc_r+0x14>
   36198:	0031      	movs	r1, r6
   3619a:	0038      	movs	r0, r7
   3619c:	f7fe fe8c 	bl	34eb8 <_malloc_r>
   361a0:	1e04      	subs	r4, r0, #0
   361a2:	d0ec      	beq.n	3617e <_realloc_r+0x14>
   361a4:	0029      	movs	r1, r5
   361a6:	0032      	movs	r2, r6
   361a8:	f7fe fe18 	bl	34ddc <memcpy>
   361ac:	0029      	movs	r1, r5
   361ae:	0038      	movs	r0, r7
   361b0:	f7fe fe38 	bl	34e24 <_free_r>
   361b4:	e7e3      	b.n	3617e <_realloc_r+0x14>
	...

000361b8 <_read_r>:
   361b8:	b570      	push	{r4, r5, r6, lr}
   361ba:	0005      	movs	r5, r0
   361bc:	0008      	movs	r0, r1
   361be:	0011      	movs	r1, r2
   361c0:	2200      	movs	r2, #0
   361c2:	4c06      	ldr	r4, [pc, #24]	; (361dc <_read_r+0x24>)
   361c4:	6022      	str	r2, [r4, #0]
   361c6:	001a      	movs	r2, r3
   361c8:	f7f5 f958 	bl	2b47c <_read>
   361cc:	1c43      	adds	r3, r0, #1
   361ce:	d103      	bne.n	361d8 <_read_r+0x20>
   361d0:	6823      	ldr	r3, [r4, #0]
   361d2:	2b00      	cmp	r3, #0
   361d4:	d000      	beq.n	361d8 <_read_r+0x20>
   361d6:	602b      	str	r3, [r5, #0]
   361d8:	bd70      	pop	{r4, r5, r6, pc}
   361da:	46c0      	nop			; (mov r8, r8)
   361dc:	20005ccc 	.word	0x20005ccc

000361e0 <_malloc_usable_size_r>:
   361e0:	1f0b      	subs	r3, r1, #4
   361e2:	681b      	ldr	r3, [r3, #0]
   361e4:	1f18      	subs	r0, r3, #4
   361e6:	2b00      	cmp	r3, #0
   361e8:	da01      	bge.n	361ee <_malloc_usable_size_r+0xe>
   361ea:	580b      	ldr	r3, [r1, r0]
   361ec:	18c0      	adds	r0, r0, r3
   361ee:	4770      	bx	lr

000361f0 <sysfont_glyphs>:
   361f0:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   36200:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   36210:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   36220:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36230:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36240:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   36250:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   36260:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   36270:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   36280:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   36290:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   362a0:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   362b0:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   362c0:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   362d0:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   362e0:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   362f0:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36300:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36310:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36320:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36330:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36340:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   36350:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   36360:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   36370:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   36380:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   36390:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   363a0:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   363b0:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   363c0:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   363d0:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   363e0:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   363f0:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36400:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36410:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36420:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36430:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36440:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   36450:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   36460:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   36470:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   36480:	4020 0000                                    @..

00036484 <pcWelcomeMessage>:
   36484:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36494:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   364a4:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   364b4:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   364c4:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   364d4:	7275 736e 6320 7275 6572 746e 7820 202c     urns current x, 
   364e4:	2c79 7a20 6120 6363 6c65 7265 7461 6f69     y, z acceleratio
   364f4:	206e 7266 6d6f 7420 6568 4920 554d 0a0d     n from the IMU..
   36504:	0000 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   36514:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   36524:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   36534:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   36544:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   36554:	2065 6564 6976 6563 0a0d 0000 6567 6474     e device....getd
   36564:	7369 6174 636e 0065 6567 6474 7369 6174     istance.getdista
   36574:	636e 3a65 5220 7465 7275 736e 7420 6568     nce: Returns the
   36584:	6420 7369 6174 636e 2065 7266 6d6f 7420      distance from t
   36594:	6568 5520 2d53 3031 2030 6553 736e 726f     he US-100 Sensor
   365a4:	0d2e 000a 3269 0063 3269 3a63 5320 6163     ....i2c.i2c: Sca
   365b4:	736e 4920 4332 6220 7375 0a0d 0000 0000     ns I2C bus......
   365c4:	7067 0073 7067 3a73 5220 7465 7275 736e     gps.gps: Returns
   365d4:	6320 7275 6572 746e 6c20 7461 7469 6475      current latitud
   365e4:	2065 6e61 2064 6f6c 676e 7469 6475 2065     e and longitude 
   365f4:	7266 6d6f 7420 6568 4720 5350 0a0d 0a0d     from the GPS....
   36604:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   36614:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   36624:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   36634:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   36644:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   36654:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   36664:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   36674:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   36684:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   36694:	2179 5320 6e65 6964 676e 6420 6d75 796d     y! Sending dummy
   366a4:	6420 7461 2061 0a0d 0000 0000 6325 325b      data ......%c[2
   366b4:	004a 0000 7453 6475 6e65 7374 7420 206f     J...Students to 
   366c4:	6966 6c6c 6f20 7475 0021 0000 7542 7474     fill out!...Butt
   366d4:	6e6f 2320 6425 6920 2073 6572 656c 7361     on #%d is releas
   366e4:	6465 0a0d 0000 0000 7542 7474 6e6f 2320     ed......Button #
   366f4:	6425 6920 2073 7270 7365 6573 0d64 000a     %d is pressed...
   36704:	6553 736e 726f 4520 7272 726f 2520 2164     Sensor Error %d!
   36714:	0a0d 0000 6944 7473 6e61 6563 203a 6425     ....Distance: %d
   36724:	6d20 0d6d 000a 0000 6944 7473 6e61 6563      mm.....Distance
   36734:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   36744:	000a 0000 7544 6d6d 2079 6147 656d 4420     ....Dummy Game D
   36754:	7461 2061 514d 5454 5020 736f 0d74 000a     ata MQTT Post...
   36764:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   36774:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   36784:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   36794:	0000 0000 3025 7832 203a 0000 3025 7832     ....%02x: ..%02x
   367a4:	0020 0000 6441 6564 2064 7962 4420 7265      ...Added by Der
   367b4:	6b65 202c 4254 2144 0a0d 0a0d 0000 0000     ek, TBD!........

000367c4 <xImuGetCommand>:
   367c4:	64c8 0003 64cc 0003 3b99 0001 0000 0000     .d...d...;......

000367d4 <xOTAUCommand>:
   367d4:	6508 0003 650c 0003 3d45 0001 0000 0000     .e...e..E=......

000367e4 <xResetCommand>:
   367e4:	653c 0003 6544 0003 3d65 0001 0000 0000     <e..De..e=......

000367f4 <xDistanceSensorGetDistance>:
   367f4:	6560 0003 656c 0003 3d85 0001 0000 0000     `e..le...=......

00036804 <xI2cScan>:
   36804:	65a8 0003 65ac 0003 3e2d 0001 0000 0000     .e...e..->......

00036814 <xGpsGetCommand>:
   36814:	65c4 0003 65c8 0003 3f55 0001 0000 0000     .e...e..U?......

00036824 <xClearScreen>:
   36824:	6608 0003 660c 0003 3cfd 0001 0000 0000     .f...f...<......
   36834:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   36844:	696c 657a 4420 7369 6174 636e 2065 6553     lize Distance Se
   36854:	736e 726f 0021 0000                         nsor!...

0003685c <msgKeypadGetCount>:
   3685c:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   3686c:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   3687c:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   3688c:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   3689c:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   368ac:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   368bc:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   368cc:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   368dc:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   368ec:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   368fc:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   3690c:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   3691c:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   3692c:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   3693c:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   3694c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3695c:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   3696c:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   3697c:	6574 2164 0a0d 0000 5345 3545 3631 0000     ted!....ESE516..
   3698c:	6f49 7254 6361 696b 676e 0000 6544 6572     IoTracking..Dere
   3699c:	206b 685a 756f 0000 6557 6869 6f61 4820     k Zhou..Weihao H
   369ac:	002e 0000                                   ....

000369b0 <main_mqtt_broker>:
   369b0:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   369c0:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   369d0:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   369e0:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   369f0:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   36a00:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36a10:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36a20:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36a30:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36a40:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36a50:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36a60:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36a70:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   36a80:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   36a90:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36aa0:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   36ab0:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   36ac0:	7564 7e2f 6564 6572 7a6b 796d 432f 7061     du/~derekzmy/Cap
   36ad0:	7574 6572 502e 474e 0000 0000 7473 726f     ture.PNG....stor
   36ae0:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   36af0:	706d 7974 6420 7461 2e61 0a0d 0000 0000     mpty data.......
   36b00:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36b10:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   36b20:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   36b30:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   36b40:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36b50:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   36b60:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   36b70:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36b80:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   36b90:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   36ba0:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   36bb0:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   36bc0:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   36bd0:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   36be0:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   36bf0:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   36c00:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   36c10:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   36c20:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   36c30:	6375 6563 7373 7566 6c6c 2e79 0a0d 0000     uccessfully.....
   36c40:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36c50:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   36c60:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   36c70:	6465 0d2e 000a 0000 7468 7074 635f 696c     ed......http_cli
   36c80:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   36c90:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   36ca0:	0a0d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   36cb0:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   36cc0:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   36cd0:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   36ce0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36cf0:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   36d00:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   36d10:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   36d20:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   36d30:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   36d40:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   36d50:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
   36d60:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   36d70:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
   36d80:	0000 0000 3931 3739 3131 3530 0000 0000     ....19971105....
   36d90:	6564 6572 006b 0000 6977 6966 635f 3a62     derek...wifi_cb:
   36da0:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   36db0:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   36dc0:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   36dd0:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   36de0:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36df0:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   36e00:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   36e10:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   36e20:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   36e30:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   36e40:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36e50:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   36e60:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   36e70:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   36e80:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   36e90:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   36ea0:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   36eb0:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   36ec0:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   36ed0:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   36ee0:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   36ef0:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   36f00:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   36f10:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   36f20:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   36f30:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   36f40:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   36f50:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   36f60:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   36f70:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   36f80:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   36f90:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   36fa0:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   36fb0:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   36fc0:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   36fd0:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   36fe0:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   36ff0:	4d49 2055 6f74 6970 2063 6572 6563 7669     IMU topic receiv
   37000:	6465 2021 002d 0000 2e25 732a 0d20 0d0a     ed! -...%.*s ...
   37010:	000a 0000 0a0d 6944 7473 6e61 6563 7420     ......Distance t
   37020:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   37030:	0000 0000 5047 2053 6f74 6970 2063 6572     ....GPS topic re
   37040:	6563 7669 6465 2021 002d 0000 2e25 732a     ceived! -...%.*s
   37050:	0d20 000a 3e20 203e 0000 0000 3150 4c5f      ... >> ....P1_L
   37060:	4445 455f 4553 3135 5f36 3654 0000 0000     ED_ESE516_T6....
   37070:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   37080:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   37090:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   370a0:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   370b0:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   370c0:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   370d0:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   370e0:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   370f0:	206f 7262 6b6f 7265 0a0d 0a0d 0000 0000     o broker........
   37100:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   37110:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   37120:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   37130:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   37140:	5345 3545 3631 545f 0036 0000 6f49 7274     ESE516_T6...Iotr
   37150:	6361 696b 676e 495f 554d 545f 0036 0000     acking_IMU_T6...
   37160:	6f49 7274 6361 696b 676e 475f 5350 545f     Iotracking_GPS_T
   37170:	0036 0000 514d 5454 4320 6e6f 656e 7463     6...MQTT Connect
   37180:	6465 0a0d 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   37190:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   371a0:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   371b0:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   371c0:	6420 7369 6f63 6e6e 6365 6574 0d64 000a      disconnected...
   371d0:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   371e0:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   371f0:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   37200:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   37210:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   37220:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   37230:	2820 6425 0d29 000a 227b 2264 7b3a 7422      (%d)...{"d":{"t
   37240:	6d65 2270 253a 7d64 007d 0000 465b 4941     emp":%d}}...[FAI
   37250:	5d4c 7220 7365 2520 0d64 000a 6c46 6761     L] res %d...Flag
   37260:	2e41 7874 2074 6461 6564 2164 0a0d 0000     A.txt added!....
   37270:	3a30 6c46 6761 2e41 7874 0074 6f43 6e6e     0:FlagA.txt.Conn
   37280:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   37290:	6b6f 7265 0d21 0d0a 000a 0000 227b 6d69     oker!.......{"im
   372a0:	7875 3a22 6425 202c 6922 756d 2279 203a     ux":%d, "imuy": 
   372b0:	6425 202c 6922 756d 227a 203a 6425 007d     %d, "imuz": %d}.
   372c0:	227b 616e 656d 3a22 6422 7265 6b65 2c22     {"name":"derek",
   372d0:	2220 616c 2274 203a 6625 202c 6c22 6e6f      "lat": %f, "lon
   372e0:	3a22 2520 7d66 0000 6425 0000 7d5d 0000     ": %f}..%d..]}..
   372f0:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   37300:	3631 545f 0036 0000 5245 4f52 2052 6e49     16_T6...ERROR In
   37310:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   37320:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   37330:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   37340:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   37350:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   37360:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   37370:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   37380:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   37390:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   373a0:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   373b0:	5f36 3654 0000 0000 514d 5454 7320 6e65     6_T6....MQTT sen
   373c0:	2064 7325 0a0d 0000 6730 0001 673c 0001     d %s....0g..<g..
   373d0:	674e 0001 67a4 0001 67c4 0001 6568 706c     Ng...g...g..help
   373e0:	0000 0000 6568 706c 203a 694c 7473 2073     ....help: Lists 
   373f0:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   37400:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   37410:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   37420:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   37430:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   37440:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   37450:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   37460:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   37470:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   37480:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   37490:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   374a0:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   374b0:	7364 0d2e 0d0a 000a                         ds......

000374b8 <xHelpCommand>:
   374b8:	73dc 0003 73e4 0003 84c9 0001 0000 0000     .s...s..........
   374c8:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   374d8:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   374e8:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   374f8:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37508:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37518:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37528:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37538:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37548:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37558:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37568:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37578:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37588:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37598:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   375a8:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   375b8:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   375c8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   375d8:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   375e8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   375f8:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   37608:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37618:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37628:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37638:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37648:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37658:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37668:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37678:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37688:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37698:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   376a8:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   376b8:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   376c8:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   376d8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   376e8:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   376f8:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   37708:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   37718:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   37728:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   37738:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37748:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37758:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37768:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37778:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37788:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37798:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   377a8:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   377b8:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   377c8:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   377d8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   377e8:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   377f8:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   37808:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   37818:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   37828:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   37838:	6365 6374 616c 7373 0021 0000 8bee 0001     ectclass!.......
   37848:	8be6 0001 8bea 0001 8bde 0001 8be2 0001     ................
   37858:	8bf2 0001 8bf6 0001 8bfa 0001 8bfe 0001     ................
   37868:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37878:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37888:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37898:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   378a8:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   378b8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   378c8:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   378d8:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   378e8:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   378f8:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   37908:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37918:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   37928:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   37938:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   37948:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37958:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37968:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37978:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37988:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37998:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   379a8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   379b8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   379c8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   379d8:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   379e8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   379f8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37a08:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37a18:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37a28:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   37a38:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37a48:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37a58:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37a68:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37a78:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37a88:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37a98:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37aa8:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   37ab8:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   37ac8:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   37ad8:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   37ae8:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   37af8:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   37b08:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37b18:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   37b28:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   37b38:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   37b48:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   37b58:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37b68:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37b78:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37b88:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37b98:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37ba8:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   37bb8:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   37bc8:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   37bd8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37be8:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   37bf8:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   37c08:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37c18:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37c28:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37c38:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37c48:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37c58:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37c68:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37c78:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37c88:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37c98:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37ca8:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   37cb8:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37cc8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37cd8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37ce8:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37cf8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37d08:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37d18:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37d28:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37d38:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37d48:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37d58:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37d68:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37d78:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37d88:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37d98:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37da8:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   37db8:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37dc8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37dd8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37de8:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37df8:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   37e08:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37e18:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37e28:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   37e38:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37e48:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37e58:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37e68:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37e78:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37e88:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37e98:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37ea8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37eb8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37ec8:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37ed8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37ee8:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   37ef8:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   37f08:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37f18:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37f28:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   37f38:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37f48:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37f58:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37f68:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37f78:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37f88:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37f98:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37fa8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37fb8:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37fc8:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37fd8:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37fe8:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37ff8:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38008:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   38018:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38028:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38038:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38048:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38058:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38068:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38078:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38088:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38098:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   380a8:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   380b8:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   380c8:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   380d8:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   380e8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   380f8:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   38108:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   38118:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38128:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38138:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38148:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38158:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38168:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38178:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38188:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38198:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   381a8:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   381b8:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   381c8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   381d8:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   381e8:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   381f8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38208:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38218:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38228:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38238:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38248:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38258:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38268:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38278:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38288:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38298:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   382a8:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   382b8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   382c8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   382d8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   382e8:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   382f8:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38308:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38318:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38328:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38338:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38348:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38358:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38368:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38378:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38388:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38398:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   383a8:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   383b8:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   383c8:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   383d8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   383e8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   383f8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38408:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38418:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38428:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38438:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38448:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38458:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38468:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38478:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38488:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38498:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   384a8:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   384b8:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   384c8:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   384d8:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   384e8:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   384f8:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38508:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38518:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38528:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38538:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38548:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38558:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38568:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38578:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38588:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38598:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   385a8:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   385b8:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   385c8:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   385d8:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   385e8:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   385f8:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   38608:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38618:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38628:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38638:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38648:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38658:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38668:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38678:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38688:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38698:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   386a8:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   386b8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   386c8:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   386d8:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   386e8:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   386f8:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   38708:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   38718:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   38728:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   38738:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38748:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38758:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38768:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38778:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38788:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38798:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   387a8:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   387b8:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   387c8:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   387d8:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   387e8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   387f8:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   38808:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   38818:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   38828:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   38838:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   38848:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38858:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38868:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38878:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38888:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38898:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   388a8:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   388b8:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   388c8:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   388d8:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   388e8:	0000 0000 6d54 2072 7653 0063 dc88 0001     ....Tmr Svc.....
   388f8:	dc88 0001 dc88 0001 dd16 0001 dce0 0001     ................
   38908:	dd0a 0001 dc88 0001 dc88 0001 dd16 0001     ................
   38918:	dce0 0001                                   ....

0003891c <sd_mmc_trans_units>:
   3891c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00038938 <sd_trans_multipliers>:
   38938:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38948:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   38958:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38968:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038978 <mmc_trans_multipliers>:
   38978:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38988:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38998:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   389a8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   389b8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   389c8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   389d8:	746c 6320 646d 000a 000d 0000               lt cmd......

000389e4 <__FUNCTION__.17099>:
   389e4:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   389f4:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   38a04:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38a14:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38a24:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   38a34:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38a44:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38a54:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38a64:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38a74:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38a84:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38a94:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38aa4:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   38ab4:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   38ac4:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   38ad4:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   38ae4:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   38af4:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   38b04:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38b14:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38b24:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   38b34:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   38b44:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   38b54:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38b64:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38b74:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38b84:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38b94:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38ba4:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   38bb4:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   38bc4:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   38bd4:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   38be4:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   38bf4:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   38c04:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   38c14:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   38c24:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   38c34:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   38c44:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   38c54:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38c64:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38c74:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38c84:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38c94:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38ca4:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   38cb4:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   38cc4:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   38cd4:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   38ce4:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   38cf4:	203f 6425 000a 0000 1e28 0002 1df8 0002     ? %d....(.......
   38d04:	1df0 0002 1e08 0002 1e00 0002 1e20 0002     ............ ...
   38d14:	1e10 0002 1e18 0002                         ........

00038d1c <__FUNCTION__.17967>:
   38d1c:	6968 5f66 6573 646e 0000 0000               hif_send....

00038d28 <__FUNCTION__.17977>:
   38d28:	6968 5f66 7369 0072                         hif_isr.

00038d30 <__FUNCTION__.17986>:
   38d30:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00038d40 <__FUNCTION__.17998>:
   38d40:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038d4c <__FUNCTION__.18014>:
   38d4c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38d5c:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38d6c:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38d7c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   38d8c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38d9c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   38dac:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   38dbc:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   38dcc:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   38ddc:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   38dec:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   38dfc:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   38e0c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   38e1c:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   38e2c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   38e3c:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   38e4c:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38e5c:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38e6c:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38e7c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   38e8c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   38e9c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   38eac:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   38ebc:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   38ecc:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   38edc:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   38eec:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   38efc:	2064 000a 0a0d 0000 694d 6d73 7461 6863     d ......Mismatch
   38f0c:	4620 7269 616d 7277 2065 6556 7372 6f69      Firmawre Versio
   38f1c:	0a6e 0000 654b 2079 7369 6e20 746f 7620     n...Key is not v
   38f2c:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
   38f3c:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
   38f4c:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
   38f5c:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
   38f6c:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   38f7c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   38f8c:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   38f9c:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   38fac:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
   38fbc:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
   38fcc:	505f 5f53 4553 5652 5245 205f 7369 6e20     _PS_SERVER_ is n
   38fdc:	746f 6420 6665 6e69 6465 000a 694c 7473     ot defined..List
   38fec:	6e65 6320 6168 6e6e 6c65 7320 6f68 6c75     en channel shoul
   38ffc:	2064 6e6f 796c 6220 2065 324d 5f4d 4957     d only be M2M_WI
   3900c:	4946 435f 5f48 2f31 2f36 3131 0a20 0000     FI_CH_1/6/11 ...
   3901c:	4f50 4557 2052 4153 4556 2520 0a64 0000     POWER SAVE %d...
   3902c:	4e49 4156 494c 2044 4f44 414d 4e49 4e20     INVALID DOMAIN N
   3903c:	4d41 0a45 0000 0000 5250 474e 4220 6675     AME.....PRNG Buf
   3904c:	6566 2072 7865 6563 6465 6465 6d20 7861     fer exceeded max
   3905c:	6d69 6d75 7320 7a69 2065 6425 6f20 2072     imum size %d or 
   3906c:	554e 4c4c 4220 6675 6566 0a72 0000 0000     NULL Buffer.....

0003907c <__FUNCTION__.17949>:
   3907c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00039088 <__FUNCTION__.17978>:
   39088:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039098 <__FUNCTION__.18009>:
   39098:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   390a8:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   390b8:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   390c8:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   390d8:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   390e8:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   390f8:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   39108:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   39118:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   39128:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00039138 <__FUNCTION__.17806>:
   39138:	6863 7069 775f 6b61 0065 0000               chip_wake...

00039144 <__FUNCTION__.17855>:
   39144:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39154:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39164:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39174:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39184:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39194:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   391a4:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   391b4:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   391c4:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   391d4:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   391e4:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   391f4:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39204:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39214:	6920 696e 2074 7562 0a73 0000                init bus...

00039220 <__FUNCTION__.17853>:
   39220:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0003922c <__FUNCTION__.17860>:
   3922c:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0003923c <crc7_syndrome_table>:
   3923c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   3924c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   3925c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   3926c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3927c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3928c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3929c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   392ac:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   392bc:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   392cc:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   392dc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   392ec:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   392fc:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3930c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3931c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3932c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3933c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3934c:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3935c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3936c:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3937c:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3938c:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3939c:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   393ac:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   393bc:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   393cc:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   393dc:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   393ec:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   393fc:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3940c:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3941c:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3942c:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3943c:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3944c:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3945c:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3946c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3947c:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3948c:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3949c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   394ac:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   394bc:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   394cc:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   394dc:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   394ec:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   394fc:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3950c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3951c:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3952c:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3953c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3954c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3955c:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3956c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3957c:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3958c:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3959c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   395ac:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   395bc:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   395cc:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   395dc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   395ec:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   395fc:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3960c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3961c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3962c:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3963c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3964c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3965c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3966c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3967c:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3968c:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3969c:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   396ac:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   396bc:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   396cc:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   396dc:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   396ec:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   396fc:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3970c:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3971c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3972c:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3973c:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3974c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3975c:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3976c:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3977c:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3978c:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3979c:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   397ac:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   397bc:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   397cc:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   397dc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   397ec:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   397fc:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3980c:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3981c:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3982c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3983c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3984c:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3985c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3986c:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3987c:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3988c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3989c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   398ac:	2e2e 0a2e 0000 0000 3978 0002 3978 0002     ........x9..x9..
   398bc:	3a08 0002 38cc 0002 3912 0002 3934 0002     .:...8...9..49..
   398cc:	39ba 0002 39ba 0002 3a74 0002 38a0 0002     .9...9..t:...8..
   398dc:	3ace 0002 3ace 0002 3ace 0002 3ace 0002     .:...:...:...:..
   398ec:	3956 0002 3ed8 0002 3ed8 0002 3f60 0002     V9...>...>..`?..
   398fc:	3e3c 0002 3e7e 0002 3e9c 0002 3f16 0002     <>..~>...>...?..
   3990c:	3f16 0002 3fc2 0002 3e14 0002 4012 0002     .?...?...>...@..
   3991c:	4012 0002 4012 0002 4012 0002 3eba 0002     .@...@...@...>..

0003992c <__FUNCTION__.17128>:
   3992c:	7073 5f69 6d63 0064                         spi_cmd.

00039934 <__FUNCTION__.17135>:
   39934:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00039944 <__FUNCTION__.17144>:
   39944:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00039950 <__FUNCTION__.17177>:
   39950:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   39960:	0000 0000                                   ....

00039964 <__FUNCTION__.17223>:
   39964:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00039974 <__FUNCTION__.17235>:
   39974:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00039984 <__FUNCTION__.17246>:
   39984:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00039994 <__FUNCTION__.17258>:
   39994:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000399a4 <__FUNCTION__.17269>:
   399a4:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000399b0 <__FUNCTION__.17290>:
   399b0:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   399c0:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   399d0:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   399e0:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   399f0:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   39a00:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   39a10:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39a20:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   39a30:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   39a40:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   39a50:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   39a60:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   39a70:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   39a80:	2074 2230 0000 0000                         t 0"....

00039a88 <lun_desc>:
   39a88:	f6ad 0001 f705 0001 f751 0001 f79d 0001     ........Q.......
   39a98:	f7cd 0001 f851 0001 f8e1 0001 9a70 0003     ....Q.......p...
   39aa8:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   39ab8:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   39ac8:	98f6 0002 9970 0002 9970 0002 9914 0002     ....p...p.......
   39ad8:	990e 0002 991a 0002 98fc 0002 9920 0002     ............ ...
   39ae8:	9956 0002 9b58 0002 9ba8 0002 9ba8 0002     V...X...........
   39af8:	9ba4 0002 9b4a 0002 9b6a 0002 9b3a 0002     ....J...j...:...
   39b08:	9b7c 0002 9b8e 0002 9bf6 0002 9c24 0002     |...........$...
   39b18:	9c24 0002 9c20 0002 9bf0 0002 9bfc 0002     $... ...........
   39b28:	9bea 0002 9c02 0002 9c08 0002               ............

00039b34 <tcc_modules>:
   39b34:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00039b40 <_tcc_gclk_ids>:
   39b40:	1a1a 001b                                   ....

00039b44 <_tcc_apbcmasks>:
   39b44:	0100 0000 0200 0000 0400 0000               ............

00039b50 <_tcc_maxs>:
   39b50:	ffff 00ff ffff 00ff ffff 0000               ............

00039b5c <_tcc_cc_nums>:
   39b5c:	0204 0002                                   ....

00039b60 <_tcc_ow_nums>:
   39b60:	0408 0002                                   ....

00039b64 <_tcc_intflag>:
   39b64:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   39b74:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   39b84:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00039b94 <LfnOfs>:
   39b94:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   39ba4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   39bb4:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   39bc4:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   39bd4:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   39be4:	5441 2020 2020 0020                         AT     .

00039bec <excvt.4558>:
   39bec:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39bfc:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   39c0c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39c1c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39c2c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39c3c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39c4c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   39c5c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039c6c <Tbl>:
   39c6c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39c7c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   39c8c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39c9c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39cac:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39cbc:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39ccc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39cdc:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39cec:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39cfc:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   39d0c:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39d1c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39d2c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39d3c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39d4c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   39d5c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039d6c <tbl_lower.4308>:
   39d6c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   39d7c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   39d8c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   39d9c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39dac:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39dbc:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39dcc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39ddc:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39dec:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39dfc:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   39e0c:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39e1c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39e2c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39e3c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   39e4c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   39e5c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   39e6c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   39e7c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   39e8c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   39e9c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39eac:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39ebc:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39ecc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39edc:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39eec:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39efc:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   39f0c:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39f1c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39f2c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39f3c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039f4c <tbl_upper.4309>:
   39f4c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   39f5c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39f6c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39f7c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39f8c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39f9c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39fac:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39fbc:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39fcc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39fdc:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39fec:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39ffc:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a00c:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a01c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a02c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3a03c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3a04c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3a05c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3a06c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3a07c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3a08c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3a09c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3a0ac:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3a0bc:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3a0cc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3a0dc:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3a0ec:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3a0fc:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3a10c:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3a11c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3a12c:	ef62 0002 ef62 0002 ef62 0002 edf0 0002     b...b...b.......
   3a13c:	ef62 0002 eeda 0002 ef62 0002 ef62 0002     b.......b...b...
   3a14c:	ef62 0002 ef62 0002 ef62 0002 ef62 0002     b...b...b...b...
   3a15c:	ef62 0002 ef54 0002 514d 4354 0000 0000     b...T...MQTC....
   3a16c:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3a17c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a1bc:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3a1d4:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a214:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3a224:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3a234:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3a244:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3a254:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3a264:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3a274:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3a284:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3a294:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3a2a4:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3a2b4:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3a2c4:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3a2d4:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3a2e4:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3a2f4:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3a304:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3a314:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3a324:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3a334:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3a344:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3a354:	5448 5054 002f 0000 0d31 0000 1056 0003     HTTP/...1...V...
   3a364:	1050 0003 104a 0003 1044 0003 105c 0003     P...J...D...\...
   3a374:	103e 0003 105c 0003 1038 0003 1032 0003     >...\...8...2...
   3a384:	105c 0003 102c 0003 102c 0003 1026 0003     \...,...,...&...
   3a394:	1020 0003 101a 0003 2000 4200 2400 4200      ........ .B.$.B
   3a3a4:	2800 4200 0a0d 2d2d 2d2d 452d 4553 3135     .(.B..-----ESE51
   3a3b4:	2036 614d 6e69 5020 6f72 7267 6d61 2d2d     6 Main Program--
   3a3c4:	2d2d 0d2d 000a 0000 0a0d 6e49 7469 6169     ---.......Initia
   3a3d4:	696c 657a 4820 2e57 2e2e 0a0d 0000 0000     lize HW.........
   3a3e4:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3a3f4:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3a404:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3a414:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3a424:	6143 6e6e 746f 6620 6e69 2064 4d49 2155     Cannot find IMU!
   3a434:	0a0d 0000 4d49 2055 6f66 6e75 2164 0a0d     ....IMU found!..
   3a444:	0000 0000 4d49 2055 6e69 7469 6169 696c     ....IMU initiali
   3a454:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   3a464:	2074 6e69 7469 6169 696c 657a 4920 554d     t initialize IMU
   3a474:	0a0d 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   3a484:	6420 7369 6174 636e 2065 6573 736e 726f      distance sensor
   3a494:	0a0d 0000 6944 7473 6e61 6563 7320 6e65     ....Distance sen
   3a4a4:	6f73 2072 6e69 7469 6169 696c 657a 0d64     sor initialized.
   3a4b4:	000a 0000 6548 7061 6220 6665 726f 2065     ....Heap before 
   3a4c4:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   3a4d4:	6425 0000 4c43 5f49 4154 4b53 0000 0000     %d..CLI_TASK....
   3a4e4:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   3a4f4:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   3a504:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   3a514:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   3a524:	4c43 3a49 2520 0d64 0d0a 000a 4955 5420     CLI: %d.....UI T
   3a534:	7361 006b 5245 3a52 5520 2049 6174 6b73     ask.ERR: UI task
   3a544:	6320 756f 646c 6e20 746f 6220 2065 6e69      could not be in
   3a554:	7469 6169 696c 657a 2164 0a0d 0000 0000     itialized!......
   3a564:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3a574:	6e69 2067 4955 5420 7361 3a6b 2520 0d64     ing UI Task: %d.
   3a584:	0d0a 000a 4957 4946 545f 5341 004b 0000     ....WIFI_TASK...
   3a594:	5245 3a52 5720 4649 2049 6174 6b73 6320     ERR: WIFI task c
   3a5a4:	756f 646c 6e20 746f 6220 2065 6e69 7469     ould not be init
   3a5b4:	6169 696c 657a 2164 0a0d 0000 6548 7061     ialized!....Heap
   3a5c4:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   3a5d4:	4957 4946 203a 6425 0a0d 0000 7245 6f72     WIFI: %d....Erro
   3a5e4:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   3a5f4:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   3a604:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   3a614:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   3a624:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   3a634:	3200 0003 3150 0003 3150 0003 314e 0003     .2..P1..P1..N1..
   3a644:	31f2 0003 31f2 0003 31e8 0003 314e 0003     .1...1...1..N1..
   3a654:	31f2 0003 31e8 0003 31f2 0003 314e 0003     .1...1...1..N1..
   3a664:	31f8 0003 31f8 0003 31f8 0003 3288 0003     .1...1...1...2..
   3a674:	3c0c 0003 3bee 0003 3ba8 0003 3ac6 0003     .<...;...;...:..
   3a684:	3ba8 0003 3be0 0003 3ba8 0003 3ac6 0003     .;...;...;...:..
   3a694:	3bee 0003 3bee 0003 3be0 0003 3ac6 0003     .;...;...;...:..
   3a6a4:	3abe 0003 3abe 0003 3abe 0003 3e24 0003     .:...:...:..$>..
   3a6b4:	426c 0003 412c 0003 412c 0003 4128 0003     lB..,A..,A..(A..
   3a6c4:	4244 0003 4244 0003 4236 0003 4128 0003     DB..DB..6B..(A..
   3a6d4:	4244 0003 4236 0003 4244 0003 4128 0003     DB..6B..DB..(A..
   3a6e4:	424c 0003 424c 0003 424c 0003 4450 0003     LB..LB..LB..PD..

0003a6f4 <_global_impure_ptr>:
   3a6f4:	0134 2000                                   4.. 

0003a6f8 <__sf_fake_stderr>:
	...

0003a718 <__sf_fake_stdin>:
	...

0003a738 <__sf_fake_stdout>:
	...
   3a758:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3a768:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3a778:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3a788:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003a795 <_ctype_>:
   3a795:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3a7a5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3a7b5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3a7c5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3a7d5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3a7e5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3a7f5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3a805:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3a815:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003a898 <_init>:
   3a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a89a:	46c0      	nop			; (mov r8, r8)
   3a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a89e:	bc08      	pop	{r3}
   3a8a0:	469e      	mov	lr, r3
   3a8a2:	4770      	bx	lr

0003a8a4 <__init_array_start>:
   3a8a4:	000120dd 	.word	0x000120dd

0003a8a8 <_fini>:
   3a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a8aa:	46c0      	nop			; (mov r8, r8)
   3a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a8ae:	bc08      	pop	{r3}
   3a8b0:	469e      	mov	lr, r3
   3a8b2:	4770      	bx	lr

0003a8b4 <__fini_array_start>:
   3a8b4:	000120b5 	.word	0x000120b5
